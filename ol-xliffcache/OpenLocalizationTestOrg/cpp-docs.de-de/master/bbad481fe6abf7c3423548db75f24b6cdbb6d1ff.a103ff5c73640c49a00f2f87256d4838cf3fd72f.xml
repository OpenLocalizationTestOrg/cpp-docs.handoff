{"nodes":[{"pos":[12,41],"content":"CPoint Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CPoint Class | Microsoft Docs","pos":[0,29]}]},{"pos":[638,650],"content":"CPoint Class","linkify":"CPoint Class","nodes":[{"content":"CPoint Class","pos":[0,12]}]},{"pos":[651,692],"content":"Similar to the Windows <ph id=\"ph1\">`POINT`</ph> structure.","source":"Similar to the Windows `POINT` structure."},{"pos":[701,707],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[764,771],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[781,800],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[807,811]},{"content":"Description","pos":[812,823]},{"pos":[861,894],"content":"<bpt id=\"p1\">[</bpt>CPoint::CPoint<ept id=\"p1\">](#cpoint__cpoint)</ept>","source":"[CPoint::CPoint](#cpoint__cpoint)"},{"pos":[895,917],"content":"Constructs a <ph id=\"ph1\">`CPoint`</ph>.","source":"Constructs a `CPoint`."},{"pos":[928,942],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[949,953]},{"content":"Description","pos":[954,965]},{"pos":[1003,1036],"content":"<bpt id=\"p1\">[</bpt>CPoint::Offset<ept id=\"p1\">](#cpoint__offset)</ept>","source":"[CPoint::Offset](#cpoint__offset)"},{"pos":[1037,1096],"content":"Adds values to the <bpt id=\"p1\">**</bpt>x<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>y<ept id=\"p2\">**</ept> members of the <ph id=\"ph1\">`CPoint`</ph>.","source":"Adds values to the **x** and **y** members of the `CPoint`."},{"pos":[1107,1123],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[1130,1134]},{"content":"Description","pos":[1135,1146]},{"pos":[1184,1225],"content":"<bpt id=\"p1\">[</bpt>CPoint::operator -<ept id=\"p1\">](#cpoint__operator_-)</ept>","source":"[CPoint::operator -](#cpoint__operator_-)"},{"pos":[1226,1379],"content":"Returns the difference of a <ph id=\"ph1\">`CPoint`</ph> and a size, or the negation of a point, or the size difference between two points, or the offset by a negative size.","source":"Returns the difference of a `CPoint` and a size, or the negation of a point, or the size difference between two points, or the offset by a negative size."},{"pos":[1384,1429],"content":"<bpt id=\"p1\">[</bpt>CPoint::operator !=<ept id=\"p1\">](#cpoint__operator__neq)</ept>","source":"[CPoint::operator !=](#cpoint__operator__neq)"},{"content":"Checks for inequality between two points.","pos":[1430,1471]},{"pos":[1476,1520],"content":"<bpt id=\"p1\">[</bpt>CPoint::operator +<ept id=\"p1\">](#cpoint__operator__add)</ept>","source":"[CPoint::operator +](#cpoint__operator__add)"},{"pos":[1521,1602],"content":"Returns the sum of a <ph id=\"ph1\">`CPoint`</ph> and a size or point, or a <ph id=\"ph2\">`CRect`</ph> offset by a size.","source":"Returns the sum of a `CPoint` and a size or point, or a `CRect` offset by a size."},{"pos":[1607,1655],"content":"<bpt id=\"p1\">[</bpt>CPoint::operator +=<ept id=\"p1\">](#cpoint__operator__add_eq)</ept>","source":"[CPoint::operator +=](#cpoint__operator__add_eq)"},{"pos":[1656,1699],"content":"Offsets <ph id=\"ph1\">`CPoint`</ph> by adding a size or point.","source":"Offsets `CPoint` by adding a size or point."},{"pos":[1704,1752],"content":"<bpt id=\"p1\">[</bpt>CPoint::operator -=<ept id=\"p1\">](cpoint::operator%20-=.xml)</ept>","source":"[CPoint::operator -=](cpoint::operator%20-=.xml)"},{"pos":[1753,1801],"content":"Offsets <ph id=\"ph1\">`CPoint`</ph> by subtracting a size or point.","source":"Offsets `CPoint` by subtracting a size or point."},{"pos":[1806,1853],"content":"<bpt id=\"p1\">[</bpt>CPoint::operator ==<ept id=\"p1\">](#cpoint__operator__eq_eq)</ept>","source":"[CPoint::operator ==](#cpoint__operator__eq_eq)"},{"content":"Checks for equality between two points.","pos":[1854,1893]},{"pos":[1903,1910],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1914,2035],"content":"It also includes member functions to manipulate <ph id=\"ph1\">`CPoint`</ph> and <bpt id=\"p1\">[</bpt>POINT<ept id=\"p1\">](../../mfc/reference/point-structure1.md)</ept> structures.","source":"It also includes member functions to manipulate `CPoint` and [POINT](../../mfc/reference/point-structure1.md) structures."},{"content":"A <ph id=\"ph1\">`CPoint`</ph> object can be used wherever a <ph id=\"ph2\">`POINT`</ph> structure is used.","pos":[2042,2109],"source":"A `CPoint` object can be used wherever a `POINT` structure is used."},{"content":"The operators of this class that interact with a \"size\" accept either <bpt id=\"p1\">[</bpt>CSize<ept id=\"p1\">](../../atl-mfc-shared/reference/csize-class.md)</ept> objects or <bpt id=\"p2\">[</bpt>SIZE<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structures, since the two are interchangeable.","pos":[2110,2359],"source":" The operators of this class that interact with a \"size\" accept either [CSize](../../atl-mfc-shared/reference/csize-class.md) objects or [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structures, since the two are interchangeable."},{"pos":[2367,2621],"content":"[!NOTE]\n This class is derived from the `tagPOINT` structure. (The name `tagPOINT` is a less commonly used name for the `POINT` structure.) This means that the data members of the `POINT` structure, `x` and `y`, are accessible data members of `CPoint`.","leadings":["","> "],"nodes":[{"content":" This class is derived from the `tagPOINT` structure. (The name `tagPOINT` is a less commonly used name for the `POINT` structure.) This means that the data members of the `POINT` structure, `x` and `y`, are accessible data members of `CPoint`.","pos":[8,252],"nodes":[{"content":"This class is derived from the <ph id=\"ph1\">`tagPOINT`</ph> structure.","pos":[1,53],"source":" This class is derived from the `tagPOINT` structure."},{"content":"(The name <ph id=\"ph1\">`tagPOINT`</ph> is a less commonly used name for the <ph id=\"ph2\">`POINT`</ph> structure.) This means that the data members of the <ph id=\"ph3\">`POINT`</ph> structure, <ph id=\"ph4\">`x`</ph> and <ph id=\"ph5\">`y`</ph>, are accessible data members of <ph id=\"ph6\">`CPoint`</ph>.","pos":[54,244],"source":" (The name `tagPOINT` is a less commonly used name for the `POINT` structure.) This means that the data members of the `POINT` structure, `x` and `y`, are accessible data members of `CPoint`."}]}]},{"pos":[2629,2773],"content":"[!NOTE]\n For more information on shared utility classes (like `CPoint`), see [Shared Classes](../../atl-mfc-shared/atl-mfc-shared-classes.md).","leadings":["","> "],"nodes":[{"content":"For more information on shared utility classes (like <ph id=\"ph1\">`CPoint`</ph>), see <bpt id=\"p1\">[</bpt>Shared Classes<ept id=\"p1\">](../../atl-mfc-shared/atl-mfc-shared-classes.md)</ept>.","pos":[9,142],"source":" For more information on shared utility classes (like `CPoint`), see [Shared Classes](../../atl-mfc-shared/atl-mfc-shared-classes.md)."}]},{"pos":[2782,2803],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[2841,2853],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2857,2879],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atltypes.h","source":"**Header:** atltypes.h"},{"pos":[2889,2934],"content":"<bpt id=\"p1\">&lt;a name=\"cpoint__cpoint\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPoint::CPoint","linkify":"<a name=\"cpoint__cpoint\"></a>  CPoint::CPoint","source":"<a name=\"cpoint__cpoint\"></a>  CPoint::CPoint"},{"pos":[2938,2967],"content":"Constructs a <ph id=\"ph1\">`CPoint`</ph> object.","source":"Constructs a `CPoint` object."},{"pos":[3171,3181],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the value of the <ph id=\"ph1\">`x`</ph> member of <ph id=\"ph2\">`CPoint`</ph>.","pos":[3196,3246],"source":" Specifies the value of the `x` member of `CPoint`."},{"content":"Specifies the value of the <ph id=\"ph1\">`y`</ph> member of <ph id=\"ph2\">`CPoint`</ph>.","pos":[3264,3314],"source":" Specifies the value of the `y` member of `CPoint`."},{"content":"<bpt id=\"p1\"> [</bpt>POINT<ept id=\"p1\">](../../mfc/reference/point-structure1.md)</ept> structure or <ph id=\"ph1\">`CPoint`</ph> that specifies the values used to initialize <ph id=\"ph2\">`CPoint`</ph>.","pos":[3332,3458],"source":" [POINT](../../mfc/reference/point-structure1.md) structure or `CPoint` that specifies the values used to initialize `CPoint`."},{"content":"<bpt id=\"p1\"> [</bpt>SIZE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure or <bpt id=\"p2\">[</bpt>CSize<ept id=\"p2\">](../../atl-mfc-shared/reference/csize-class.md)</ept> that specifies the values used to initialize <ph id=\"ph1\">`CPoint`</ph>.","pos":[3478,3668],"source":" [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure or [CSize](../../atl-mfc-shared/reference/csize-class.md) that specifies the values used to initialize `CPoint`."},{"content":"Sets the <ph id=\"ph1\">`x`</ph> member to the low-order word of <ph id=\"ph2\">`dwPoint`</ph> and the <ph id=\"ph3\">`y`</ph> member to the high-order word of <ph id=\"ph4\">`dwPoint`</ph>.","pos":[3688,3798],"source":" Sets the `x` member to the low-order word of `dwPoint` and the `y` member to the high-order word of `dwPoint`."},{"pos":[3808,3815],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3819,3879],"content":"If no arguments are given, <ph id=\"ph1\">`x`</ph> and <ph id=\"ph2\">`y`</ph> members are set to 0.","source":"If no arguments are given, `x` and `y` members are set to 0."},{"pos":[3889,3896],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4329,4374],"content":"<bpt id=\"p1\">&lt;a name=\"cpoint__offset\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPoint::Offset","linkify":"<a name=\"cpoint__offset\"></a>  CPoint::Offset","source":"<a name=\"cpoint__offset\"></a>  CPoint::Offset"},{"pos":[4378,4437],"content":"Adds values to the <bpt id=\"p1\">**</bpt>x<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>y<ept id=\"p2\">**</ept> members of the <ph id=\"ph1\">`CPoint`</ph>.","source":"Adds values to the **x** and **y** members of the `CPoint`."},{"pos":[4610,4620],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>xOffset<ept id=\"p1\">*</ept>","pos":[4624,4633],"source":"*xOffset*"},{"content":"Specifies the amount to offset the <bpt id=\"p1\">**</bpt>x<ept id=\"p1\">**</ept> member of the <ph id=\"ph1\">`CPoint`</ph>.","pos":[4637,4701],"source":" Specifies the amount to offset the **x** member of the `CPoint`."},{"content":"<bpt id=\"p1\">*</bpt>yOffset<ept id=\"p1\">*</ept>","pos":[4708,4717],"source":"*yOffset*"},{"content":"Specifies the amount to offset the <bpt id=\"p1\">**</bpt>y<ept id=\"p1\">**</ept> member of the <ph id=\"ph1\">`CPoint`</ph>.","pos":[4721,4785],"source":" Specifies the amount to offset the **y** member of the `CPoint`."},{"content":"Specifies the amount ( <bpt id=\"p1\">[</bpt>POINT<ept id=\"p1\">](../../mfc/reference/point-structure1.md)</ept> or <ph id=\"ph1\">`CPoint`</ph>) to offset the <ph id=\"ph2\">`CPoint`</ph>.","pos":[4803,4911],"source":" Specifies the amount ( [POINT](../../mfc/reference/point-structure1.md) or `CPoint`) to offset the `CPoint`."},{"content":"Specifies the amount ( <bpt id=\"p1\">[</bpt>SIZE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> or <bpt id=\"p2\">[</bpt>CSize<ept id=\"p2\">](../../atl-mfc-shared/reference/csize-class.md)</ept>) to offset the <ph id=\"ph1\">`CPoint`</ph>.","pos":[4928,5100],"source":" Specifies the amount ( [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) or [CSize](../../atl-mfc-shared/reference/csize-class.md)) to offset the `CPoint`."},{"pos":[5110,5117],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5121,5214],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#28<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cpoint-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#28](../../atl-mfc-shared/codesnippet/cpp/cpoint-class_1.cpp)]"},{"pos":[5224,5283],"content":"<bpt id=\"p1\">&lt;a name=\"cpoint__operator__eq_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPoint::operator ==","linkify":"<a name=\"cpoint__operator__eq_eq\"></a>  CPoint::operator ==","source":"<a name=\"cpoint__operator__eq_eq\"></a>  CPoint::operator =="},{"content":"Checks for equality between two points.","pos":[5287,5326]},{"pos":[5395,5405],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Contains a <bpt id=\"p1\">[</bpt>POINT<ept id=\"p1\">](../../mfc/reference/point-structure1.md)</ept> structure or <ph id=\"ph1\">`CPoint`</ph> object.","pos":[5420,5509],"source":" Contains a [POINT](../../mfc/reference/point-structure1.md) structure or `CPoint` object."},{"pos":[5519,5531],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the points are equal; otherwise 0.","pos":[5535,5580]},{"pos":[5590,5597],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5601,5694],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#29<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cpoint-class_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#29](../../atl-mfc-shared/codesnippet/cpp/cpoint-class_2.cpp)]"},{"pos":[5704,5761],"content":"<bpt id=\"p1\">&lt;a name=\"cpoint__operator__neq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPoint::operator !=","linkify":"<a name=\"cpoint__operator__neq\"></a>  CPoint::operator !=","source":"<a name=\"cpoint__operator__neq\"></a>  CPoint::operator !="},{"content":"Checks for inequality between two points.","pos":[5765,5806]},{"pos":[5875,5885],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Contains a <bpt id=\"p1\">[</bpt>POINT<ept id=\"p1\">](../../mfc/reference/point-structure1.md)</ept> structure or <ph id=\"ph1\">`CPoint`</ph> object.","pos":[5900,5989],"source":" Contains a [POINT](../../mfc/reference/point-structure1.md) structure or `CPoint` object."},{"pos":[5999,6011],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the points are not equal; otherwise 0.","pos":[6015,6064]},{"pos":[6074,6081],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6085,6178],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#30<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cpoint-class_3.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#30](../../atl-mfc-shared/codesnippet/cpp/cpoint-class_3.cpp)]"},{"pos":[6188,6248],"content":"<bpt id=\"p1\">&lt;a name=\"cpoint__operator__add_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPoint::operator +=","linkify":"<a name=\"cpoint__operator__add_eq\"></a>  CPoint::operator +=","source":"<a name=\"cpoint__operator__add_eq\"></a>  CPoint::operator +="},{"pos":[6252,6299],"content":"The first overload adds a size to the <ph id=\"ph1\">`CPoint`</ph>.","source":"The first overload adds a size to the `CPoint`."},{"pos":[6405,6415],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Contains a <bpt id=\"p1\">[</bpt>SIZE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure or <bpt id=\"p2\">[</bpt>CSize<ept id=\"p2\">](../../atl-mfc-shared/reference/csize-class.md)</ept> object.","pos":[6429,6582],"source":" Contains a [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure or [CSize](../../atl-mfc-shared/reference/csize-class.md) object."},{"content":"Contains a <bpt id=\"p1\">[</bpt>POINT<ept id=\"p1\">](../../mfc/reference/point-structure1.md)</ept> structure or <bpt id=\"p2\">[</bpt>CPoint<ept id=\"p2\">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object.","pos":[6600,6737],"source":" Contains a [POINT](../../mfc/reference/point-structure1.md) structure or [CPoint](../../atl-mfc-shared/reference/cpoint-class.md) object."},{"pos":[6747,6754],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6758,6807],"content":"The second overload adds a point to the <ph id=\"ph1\">`CPoint`</ph>.","source":"The second overload adds a point to the `CPoint`."},{"pos":[6814,7049],"content":"In both cases, addition is done by adding the <bpt id=\"p1\">**</bpt>x<ept id=\"p1\">**</ept> (or <bpt id=\"p2\">**</bpt>cx<ept id=\"p2\">**</ept>) member of the right-hand operand to the <bpt id=\"p3\">**</bpt>x<ept id=\"p3\">**</ept> member of the <ph id=\"ph1\">`CPoint`</ph> and adding the <bpt id=\"p4\">**</bpt>y<ept id=\"p4\">**</ept> (or <bpt id=\"p5\">**</bpt>cy<ept id=\"p5\">**</ept>) member of the right-hand operand to the <bpt id=\"p6\">**</bpt>y<ept id=\"p6\">**</ept> member of the <ph id=\"ph2\">`CPoint`</ph>.","source":"In both cases, addition is done by adding the **x** (or **cx**) member of the right-hand operand to the **x** member of the `CPoint` and adding the **y** (or **cy**) member of the right-hand operand to the **y** member of the `CPoint`."},{"pos":[7056,7179],"content":"For example, adding <ph id=\"ph1\">`CPoint(5, -7)`</ph> to a variable which contains <ph id=\"ph2\">`CPoint(30, 40)`</ph> changes the variable to <ph id=\"ph3\">`CPoint(35, 33)`</ph>.","source":"For example, adding `CPoint(5, -7)` to a variable which contains `CPoint(30, 40)` changes the variable to `CPoint(35, 33)`."},{"pos":[7189,7196],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7200,7293],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#31<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cpoint-class_4.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#31](../../atl-mfc-shared/codesnippet/cpp/cpoint-class_4.cpp)]"},{"pos":[7303,7360],"content":"<bpt id=\"p1\">&lt;a name=\"cpoint__operator_-_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPoint::operator -=","linkify":"<a name=\"cpoint__operator_-_eq\"></a>  CPoint::operator -=","source":"<a name=\"cpoint__operator_-_eq\"></a>  CPoint::operator -="},{"pos":[7364,7418],"content":"The first overload subtracts a size from the <ph id=\"ph1\">`CPoint`</ph>.","source":"The first overload subtracts a size from the `CPoint`."},{"pos":[7524,7534],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Contains a <bpt id=\"p1\">[</bpt>SIZE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure or <bpt id=\"p2\">[</bpt>CSize<ept id=\"p2\">](../../atl-mfc-shared/reference/csize-class.md)</ept> object.","pos":[7548,7701],"source":" Contains a [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure or [CSize](../../atl-mfc-shared/reference/csize-class.md) object."},{"content":"Contains a <bpt id=\"p1\">[</bpt>POINT<ept id=\"p1\">](../../mfc/reference/point-structure1.md)</ept> structure or <bpt id=\"p2\">[</bpt>CPoint<ept id=\"p2\">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object.","pos":[7719,7856],"source":" Contains a [POINT](../../mfc/reference/point-structure1.md) structure or [CPoint](../../atl-mfc-shared/reference/cpoint-class.md) object."},{"pos":[7866,7873],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7877,7933],"content":"The second overload subtracts a point from the <ph id=\"ph1\">`CPoint`</ph>.","source":"The second overload subtracts a point from the `CPoint`."},{"pos":[7940,8192],"content":"In both cases, subtraction is done by subtracting the <bpt id=\"p1\">**</bpt>x<ept id=\"p1\">**</ept> (or <bpt id=\"p2\">**</bpt>cx<ept id=\"p2\">**</ept>) member of the right-hand operand from the <bpt id=\"p3\">**</bpt>x<ept id=\"p3\">**</ept> member of the <ph id=\"ph1\">`CPoint`</ph> and subtracting the <bpt id=\"p4\">**</bpt>y<ept id=\"p4\">**</ept> (or <bpt id=\"p5\">**</bpt>cy<ept id=\"p5\">**</ept>) member of the right-hand operand from the <bpt id=\"p6\">**</bpt>y<ept id=\"p6\">**</ept> member of the <ph id=\"ph2\">`CPoint`</ph>.","source":"In both cases, subtraction is done by subtracting the **x** (or **cx**) member of the right-hand operand from the **x** member of the `CPoint` and subtracting the **y** (or **cy**) member of the right-hand operand from the **y** member of the `CPoint`."},{"pos":[8199,8329],"content":"For example, subtracting <ph id=\"ph1\">`CPoint(5, -7)`</ph> from a variable which contains <ph id=\"ph2\">`CPoint(30, 40)`</ph> changes the variable to <ph id=\"ph3\">`CPoint(25, 47)`</ph>.","source":"For example, subtracting `CPoint(5, -7)` from a variable which contains `CPoint(30, 40)` changes the variable to `CPoint(25, 47)`."},{"pos":[8339,8346],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8350,8443],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#32<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cpoint-class_5.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#32](../../atl-mfc-shared/codesnippet/cpp/cpoint-class_5.cpp)]"},{"pos":[8453,8509],"content":"<bpt id=\"p1\">&lt;a name=\"cpoint__operator__add\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPoint::operator +","linkify":"<a name=\"cpoint__operator__add\"></a>  CPoint::operator +","source":"<a name=\"cpoint__operator__add\"></a>  CPoint::operator +"},{"pos":[8513,8620],"content":"Use this operator to offset <ph id=\"ph1\">`CPoint`</ph> by a <ph id=\"ph2\">`CPoint`</ph> or <ph id=\"ph3\">`CSize`</ph> object, or to offset a <ph id=\"ph4\">`CRect`</ph> by a <ph id=\"ph5\">`CPoint`</ph>.","source":"Use this operator to offset `CPoint` by a `CPoint` or `CSize` object, or to offset a `CRect` by a `CPoint`."},{"pos":[8798,8808],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Contains a <bpt id=\"p1\">[</bpt>SIZE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure or <bpt id=\"p2\">[</bpt>CSize<ept id=\"p2\">](../../atl-mfc-shared/reference/csize-class.md)</ept> object.","pos":[8822,8975],"source":" Contains a [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure or [CSize](../../atl-mfc-shared/reference/csize-class.md) object."},{"content":"Contains a <bpt id=\"p1\">[</bpt>POINT<ept id=\"p1\">](../../mfc/reference/point-structure1.md)</ept> structure or <bpt id=\"p2\">[</bpt>CPoint<ept id=\"p2\">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object.","pos":[8993,9130],"source":" Contains a [POINT](../../mfc/reference/point-structure1.md) structure or [CPoint](../../atl-mfc-shared/reference/cpoint-class.md) object."},{"content":"Contains a pointer to a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](../../mfc/reference/rect-structure1.md)</ept> structure or <bpt id=\"p2\">[</bpt>CRect<ept id=\"p2\">](../../atl-mfc-shared/reference/crect-class.md)</ept> object.","pos":[9149,9295],"source":" Contains a pointer to a [RECT](../../mfc/reference/rect-structure1.md) structure or [CRect](../../atl-mfc-shared/reference/crect-class.md) object."},{"pos":[9305,9317],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[9321,9431],"content":"A <ph id=\"ph1\">`CPoint`</ph> that is offset by a size, a <bpt id=\"p1\">**</bpt>CPoint<ept id=\"p1\">**</ept> that is offset by a point, or a <bpt id=\"p2\">**</bpt>CRect<ept id=\"p2\">**</ept> offset by a point.","source":"A `CPoint` that is offset by a size, a **CPoint** that is offset by a point, or a **CRect** offset by a point."},{"pos":[9441,9448],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9452,9626],"content":"For example, using one of the first two overloads to offset the point <ph id=\"ph1\">`CPoint(25, -19)`</ph> by a point <ph id=\"ph2\">`CPoint(15, 5)`</ph> or size <ph id=\"ph3\">`CSize(15, 5)`</ph> returns the value <ph id=\"ph4\">`CPoint(40, -14)`</ph>.","source":"For example, using one of the first two overloads to offset the point `CPoint(25, -19)` by a point `CPoint(15, 5)` or size `CSize(15, 5)` returns the value `CPoint(40, -14)`."},{"content":"Adding a rectangle to a point returns the rectangle after being offset by the <bpt id=\"p1\">**</bpt>x<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>y<ept id=\"p2\">**</ept> values specified in the point.","pos":[9633,9757],"source":"Adding a rectangle to a point returns the rectangle after being offset by the **x** and **y** values specified in the point."},{"content":"For example, using the last overload to offset a rectangle <ph id=\"ph1\">`CRect(125, 219, 325, 419)`</ph> by a point <ph id=\"ph2\">`CPoint(25, -19)`</ph> returns <ph id=\"ph3\">`CRect(150, 200, 350, 400)`</ph>.","pos":[9758,9910],"source":" For example, using the last overload to offset a rectangle `CRect(125, 219, 325, 419)` by a point `CPoint(25, -19)` returns `CRect(150, 200, 350, 400)`."},{"pos":[9920,9927],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9931,10024],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#33<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cpoint-class_6.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#33](../../atl-mfc-shared/codesnippet/cpp/cpoint-class_6.cpp)]"},{"pos":[10034,10087],"content":"<bpt id=\"p1\">&lt;a name=\"cpoint__operator_-\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPoint::operator -","linkify":"<a name=\"cpoint__operator_-\"></a>  CPoint::operator -","source":"<a name=\"cpoint__operator_-\"></a>  CPoint::operator -"},{"pos":[10091,10181],"content":"Use one of the first two overloads to subtract a <ph id=\"ph1\">`CPoint`</ph> or <ph id=\"ph2\">`CSize`</ph> object from <ph id=\"ph3\">`CPoint`</ph>.","source":"Use one of the first two overloads to subtract a `CPoint` or `CSize` object from `CPoint`."},{"pos":[10399,10409],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <bpt id=\"p1\">[</bpt>POINT<ept id=\"p1\">](../../mfc/reference/point-structure1.md)</ept> structure or <bpt id=\"p2\">[</bpt>CPoint<ept id=\"p2\">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> object.","pos":[10424,10552],"source":" A [POINT](../../mfc/reference/point-structure1.md) structure or [CPoint](../../atl-mfc-shared/reference/cpoint-class.md) object."},{"content":"A <bpt id=\"p1\">[</bpt>SIZE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure or <bpt id=\"p2\">[</bpt>CSize<ept id=\"p2\">](../../atl-mfc-shared/reference/csize-class.md)</ept> object.","pos":[10569,10713],"source":" A [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure or [CSize](../../atl-mfc-shared/reference/csize-class.md) object."},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](../../mfc/reference/rect-structure1.md)</ept> structure or a <bpt id=\"p2\">[</bpt>CRect<ept id=\"p2\">](../../atl-mfc-shared/reference/crect-class.md)</ept> object.","pos":[10732,10871],"source":" A pointer to a [RECT](../../mfc/reference/rect-structure1.md) structure or a [CRect](../../atl-mfc-shared/reference/crect-class.md) object."},{"pos":[10881,10893],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10897,11102],"content":"A <ph id=\"ph1\">`CSize`</ph> that is the difference between two points, a <ph id=\"ph2\">`CPoint`</ph> that is offset by the negation of a size, a <ph id=\"ph3\">`CRect`</ph> that is offset by the negation of a point, or a <ph id=\"ph4\">`CPoint`</ph> that is the negation of a point.","source":"A `CSize` that is the difference between two points, a `CPoint` that is offset by the negation of a size, a `CRect` that is offset by the negation of a point, or a `CPoint` that is the negation of a point."},{"pos":[11112,11119],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The third overload offsets a <ph id=\"ph1\">`CRect`</ph> by the negation of <ph id=\"ph2\">`CPoint`</ph>.","pos":[11123,11188],"source":"The third overload offsets a `CRect` by the negation of `CPoint`."},{"content":"Finally, use the unary operator to negate <ph id=\"ph1\">`CPoint`</ph>.","pos":[11189,11240],"source":" Finally, use the unary operator to negate `CPoint`."},{"pos":[11247,11390],"content":"For example, using the first overload to find the difference between two points <ph id=\"ph1\">`CPoint(25, -19)`</ph> and <ph id=\"ph2\">`CPoint(15, 5)`</ph> returns <ph id=\"ph3\">`CSize(10, -24)`</ph>.","source":"For example, using the first overload to find the difference between two points `CPoint(25, -19)` and `CPoint(15, 5)` returns `CSize(10, -24)`."},{"content":"Subtracting a <ph id=\"ph1\">`CSize`</ph> from <ph id=\"ph2\">`CPoint`</ph> does the same calculation as above but returns a <ph id=\"ph3\">`CPoint`</ph> object, not a <ph id=\"ph4\">`CSize`</ph> object.","pos":[11397,11520],"source":"Subtracting a `CSize` from `CPoint` does the same calculation as above but returns a `CPoint` object, not a `CSize` object."},{"content":"For example, using the second overload to find the difference between the point <ph id=\"ph1\">`CPoint(25, -19)`</ph> and the size <ph id=\"ph2\">`CSize(15, 5)`</ph> returns <ph id=\"ph3\">`CPoint(10, -24)`</ph>.","pos":[11521,11673],"source":" For example, using the second overload to find the difference between the point `CPoint(25, -19)` and the size `CSize(15, 5)` returns `CPoint(10, -24)`."},{"content":"Subtracting a rectangle from a point returns the rectangle offset by the negatives of the <bpt id=\"p1\">**</bpt>x<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>y<ept id=\"p2\">**</ept> values specified in the point.","pos":[11680,11816],"source":"Subtracting a rectangle from a point returns the rectangle offset by the negatives of the **x** and **y** values specified in the point."},{"content":"For example, using the last overload to offset the rectangle <ph id=\"ph1\">`CRect(125, 200, 325, 400)`</ph> by the point <ph id=\"ph2\">`CPoint(25, -19)`</ph> returns <ph id=\"ph3\">`CRect(100, 219, 300, 419)`</ph>.","pos":[11817,11973],"source":" For example, using the last overload to offset the rectangle `CRect(125, 200, 325, 400)` by the point `CPoint(25, -19)` returns `CRect(100, 219, 300, 419)`."},{"content":"Use the unary operator to negate a point.","pos":[11980,12021]},{"content":"For example, using the unary operator with the point <ph id=\"ph1\">`CPoint(25, -19)`</ph> returns <ph id=\"ph2\">`CPoint(-25, 19)`</ph>.","pos":[12022,12119],"source":" For example, using the unary operator with the point `CPoint(25, -19)` returns `CPoint(-25, 19)`."},{"pos":[12129,12136],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12140,12233],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#34<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cpoint-class_7.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#34](../../atl-mfc-shared/codesnippet/cpp/cpoint-class_7.cpp)]"},{"pos":[12242,12250],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>MFC Sample MDI<ept id=\"p1\">](../../visual-cpp-samples.md)</ept><ph id=\"ph1\"> </ph>","pos":[12254,12300],"source":"[MFC Sample MDI](../../visual-cpp-samples.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[12303,12352],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>POINT Structure<ept id=\"p1\">](../../mfc/reference/point-structure1.md)</ept><ph id=\"ph1\"> </ph>","pos":[12355,12415],"source":" [POINT Structure](../../mfc/reference/point-structure1.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CRect Class<ept id=\"p1\">](../../atl-mfc-shared/reference/crect-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[12418,12480],"source":" [CRect Class](../../atl-mfc-shared/reference/crect-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CSize Class<ept id=\"p1\">](../../atl-mfc-shared/reference/csize-class.md)</ept>","pos":[12483,12544],"source":" [CSize Class](../../atl-mfc-shared/reference/csize-class.md)"}],"content":"---\ntitle: \"CPoint Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CPoint\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"LPPOINT structure\"\n  - \"POINT structure\"\n  - \"CPoint class\"\nms.assetid: a6d4db93-35cc-444d-9221-c3e160f6edaa\ncaps.latest.revision: 22\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CPoint Class\nSimilar to the Windows `POINT` structure.  \n  \n## Syntax  \n  \n```  \nclass CPoint : public tagPOINT  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPoint::CPoint](#cpoint__cpoint)|Constructs a `CPoint`.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPoint::Offset](#cpoint__offset)|Adds values to the **x** and **y** members of the `CPoint`.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPoint::operator -](#cpoint__operator_-)|Returns the difference of a `CPoint` and a size, or the negation of a point, or the size difference between two points, or the offset by a negative size.|  \n|[CPoint::operator !=](#cpoint__operator__neq)|Checks for inequality between two points.|  \n|[CPoint::operator +](#cpoint__operator__add)|Returns the sum of a `CPoint` and a size or point, or a `CRect` offset by a size.|  \n|[CPoint::operator +=](#cpoint__operator__add_eq)|Offsets `CPoint` by adding a size or point.|  \n|[CPoint::operator -=](cpoint::operator%20-=.xml)|Offsets `CPoint` by subtracting a size or point.|  \n|[CPoint::operator ==](#cpoint__operator__eq_eq)|Checks for equality between two points.|  \n  \n## Remarks  \n It also includes member functions to manipulate `CPoint` and [POINT](../../mfc/reference/point-structure1.md) structures.  \n  \n A `CPoint` object can be used wherever a `POINT` structure is used. The operators of this class that interact with a \"size\" accept either [CSize](../../atl-mfc-shared/reference/csize-class.md) objects or [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structures, since the two are interchangeable.  \n  \n> [!NOTE]\n>  This class is derived from the `tagPOINT` structure. (The name `tagPOINT` is a less commonly used name for the `POINT` structure.) This means that the data members of the `POINT` structure, `x` and `y`, are accessible data members of `CPoint`.  \n  \n> [!NOTE]\n>  For more information on shared utility classes (like `CPoint`), see [Shared Classes](../../atl-mfc-shared/atl-mfc-shared-classes.md).  \n  \n## Inheritance Hierarchy  \n `tagPOINT`  \n  \n `CPoint`  \n  \n## Requirements  \n **Header:** atltypes.h  \n  \n##  <a name=\"cpoint__cpoint\"></a>  CPoint::CPoint  \n Constructs a `CPoint` object.  \n  \n```  \nCPoint() throw();\n\nCPoint(\n    int initX,  \n    int initY) throw();\n\nCPoint(\n    POINT initPt) throw();\n\nCPoint(\n    SIZE initSize) throw();\n\nCPoint(\n    LPARAM dwPoint) throw();\n```  \n  \n### Parameters  \n `initX`  \n Specifies the value of the `x` member of `CPoint`.  \n  \n `initY`  \n Specifies the value of the `y` member of `CPoint`.  \n  \n `initPt`  \n [POINT](../../mfc/reference/point-structure1.md) structure or `CPoint` that specifies the values used to initialize `CPoint`.  \n  \n `initSize`  \n [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure or [CSize](../../atl-mfc-shared/reference/csize-class.md) that specifies the values used to initialize `CPoint`.  \n  \n `dwPoint`  \n Sets the `x` member to the low-order word of `dwPoint` and the `y` member to the high-order word of `dwPoint`.  \n  \n### Remarks  \n If no arguments are given, `x` and `y` members are set to 0.  \n  \n### Example  \n  \n```  \n \nCPoint   ptTopLeft(0,\n    0);\n\n \n// works from a POINT,\n    too  \n \nPOINT   ptHere;  \nptHere.x = 35;  \nptHere.y = 95;  \n \nCPoint   ptMFCHere(ptHere);\n\n \n// works from A SIZE  \n \nSIZE   sHowBig;  \nsHowBig.cx = 300;  \nsHowBig.cy = 10;  \n \nCPoint ptMFCBig(sHowBig);\n\n \n// or from a DWORD  \n \nDWORD   dwSize;  \ndwSize = MAKELONG(35,\n    95);\n\n \nCPoint ptFromDouble(dwSize);\n\nASSERT(ptFromDouble == ptMFCHere);\n```  \n  \n##  <a name=\"cpoint__offset\"></a>  CPoint::Offset  \n Adds values to the **x** and **y** members of the `CPoint`.  \n  \n```  \nvoid Offset(\n    int xOffset,  \n    int yOffset) throw();\n\n \n    void Offset(\n    POINT point) throw();\n\n \n    void Offset(\n    SIZE size) throw();\n```  \n  \n### Parameters  \n *xOffset*  \n Specifies the amount to offset the **x** member of the `CPoint`.  \n  \n *yOffset*  \n Specifies the amount to offset the **y** member of the `CPoint`.  \n  \n `point`  \n Specifies the amount ( [POINT](../../mfc/reference/point-structure1.md) or `CPoint`) to offset the `CPoint`.  \n  \n `size`  \n Specifies the amount ( [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) or [CSize](../../atl-mfc-shared/reference/csize-class.md)) to offset the `CPoint`.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#28](../../atl-mfc-shared/codesnippet/cpp/cpoint-class_1.cpp)]  \n  \n##  <a name=\"cpoint__operator__eq_eq\"></a>  CPoint::operator ==  \n Checks for equality between two points.  \n  \n```  \nBOOL operator==(POINT point) const throw();\n```  \n  \n### Parameters  \n `point`  \n Contains a [POINT](../../mfc/reference/point-structure1.md) structure or `CPoint` object.  \n  \n### Return Value  \n Nonzero if the points are equal; otherwise 0.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#29](../../atl-mfc-shared/codesnippet/cpp/cpoint-class_2.cpp)]  \n  \n##  <a name=\"cpoint__operator__neq\"></a>  CPoint::operator !=  \n Checks for inequality between two points.  \n  \n```  \nBOOL operator!=(POINT point) const throw();\n```  \n  \n### Parameters  \n `point`  \n Contains a [POINT](../../mfc/reference/point-structure1.md) structure or `CPoint` object.  \n  \n### Return Value  \n Nonzero if the points are not equal; otherwise 0.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#30](../../atl-mfc-shared/codesnippet/cpp/cpoint-class_3.cpp)]  \n  \n##  <a name=\"cpoint__operator__add_eq\"></a>  CPoint::operator +=  \n The first overload adds a size to the `CPoint`.  \n  \n```  \nvoid operator+=(SIZE size) throw();\n\n \n    void operator+=(POINT point) throw();\n```  \n  \n### Parameters  \n `size`  \n Contains a [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure or [CSize](../../atl-mfc-shared/reference/csize-class.md) object.  \n  \n `point`  \n Contains a [POINT](../../mfc/reference/point-structure1.md) structure or [CPoint](../../atl-mfc-shared/reference/cpoint-class.md) object.  \n  \n### Remarks  \n The second overload adds a point to the `CPoint`.  \n  \n In both cases, addition is done by adding the **x** (or **cx**) member of the right-hand operand to the **x** member of the `CPoint` and adding the **y** (or **cy**) member of the right-hand operand to the **y** member of the `CPoint`.  \n  \n For example, adding `CPoint(5, -7)` to a variable which contains `CPoint(30, 40)` changes the variable to `CPoint(35, 33)`.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#31](../../atl-mfc-shared/codesnippet/cpp/cpoint-class_4.cpp)]  \n  \n##  <a name=\"cpoint__operator_-_eq\"></a>  CPoint::operator -=  \n The first overload subtracts a size from the `CPoint`.  \n  \n```  \nvoid operator-=(SIZE size) throw();\n\n \n    void operator-=(POINT point) throw();\n```  \n  \n### Parameters  \n `size`  \n Contains a [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure or [CSize](../../atl-mfc-shared/reference/csize-class.md) object.  \n  \n `point`  \n Contains a [POINT](../../mfc/reference/point-structure1.md) structure or [CPoint](../../atl-mfc-shared/reference/cpoint-class.md) object.  \n  \n### Remarks  \n The second overload subtracts a point from the `CPoint`.  \n  \n In both cases, subtraction is done by subtracting the **x** (or **cx**) member of the right-hand operand from the **x** member of the `CPoint` and subtracting the **y** (or **cy**) member of the right-hand operand from the **y** member of the `CPoint`.  \n  \n For example, subtracting `CPoint(5, -7)` from a variable which contains `CPoint(30, 40)` changes the variable to `CPoint(25, 47)`.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#32](../../atl-mfc-shared/codesnippet/cpp/cpoint-class_5.cpp)]  \n  \n##  <a name=\"cpoint__operator__add\"></a>  CPoint::operator +  \n Use this operator to offset `CPoint` by a `CPoint` or `CSize` object, or to offset a `CRect` by a `CPoint`.  \n  \n```  \nCPoint operator+(SIZE size) const throw();\n\n \n    CPoint operator+(POINT point) const throw();\n\n \n    CRect operator+(const RECT* lpRect) const throw();\n```  \n  \n### Parameters  \n `size`  \n Contains a [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure or [CSize](../../atl-mfc-shared/reference/csize-class.md) object.  \n  \n `point`  \n Contains a [POINT](../../mfc/reference/point-structure1.md) structure or [CPoint](../../atl-mfc-shared/reference/cpoint-class.md) object.  \n  \n `lpRect`  \n Contains a pointer to a [RECT](../../mfc/reference/rect-structure1.md) structure or [CRect](../../atl-mfc-shared/reference/crect-class.md) object.  \n  \n### Return Value  \n A `CPoint` that is offset by a size, a **CPoint** that is offset by a point, or a **CRect** offset by a point.  \n  \n### Remarks  \n For example, using one of the first two overloads to offset the point `CPoint(25, -19)` by a point `CPoint(15, 5)` or size `CSize(15, 5)` returns the value `CPoint(40, -14)`.  \n  \n Adding a rectangle to a point returns the rectangle after being offset by the **x** and **y** values specified in the point. For example, using the last overload to offset a rectangle `CRect(125, 219, 325, 419)` by a point `CPoint(25, -19)` returns `CRect(150, 200, 350, 400)`.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#33](../../atl-mfc-shared/codesnippet/cpp/cpoint-class_6.cpp)]  \n  \n##  <a name=\"cpoint__operator_-\"></a>  CPoint::operator -  \n Use one of the first two overloads to subtract a `CPoint` or `CSize` object from `CPoint`.  \n  \n```  \nCSize operator-(POINT point) const throw();\n\n \n    CPoint operator-(SIZE size) const throw();\n\n \n    CRect operator-(const RECT* lpRect) const throw();\n\n \n    CPoint operator-() const throw();\n```  \n  \n### Parameters  \n `point`  \n A [POINT](../../mfc/reference/point-structure1.md) structure or [CPoint](../../atl-mfc-shared/reference/cpoint-class.md) object.  \n  \n `size`  \n A [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure or [CSize](../../atl-mfc-shared/reference/csize-class.md) object.  \n  \n `lpRect`  \n A pointer to a [RECT](../../mfc/reference/rect-structure1.md) structure or a [CRect](../../atl-mfc-shared/reference/crect-class.md) object.  \n  \n### Return Value  \n A `CSize` that is the difference between two points, a `CPoint` that is offset by the negation of a size, a `CRect` that is offset by the negation of a point, or a `CPoint` that is the negation of a point.  \n  \n### Remarks  \n The third overload offsets a `CRect` by the negation of `CPoint`. Finally, use the unary operator to negate `CPoint`.  \n  \n For example, using the first overload to find the difference between two points `CPoint(25, -19)` and `CPoint(15, 5)` returns `CSize(10, -24)`.  \n  \n Subtracting a `CSize` from `CPoint` does the same calculation as above but returns a `CPoint` object, not a `CSize` object. For example, using the second overload to find the difference between the point `CPoint(25, -19)` and the size `CSize(15, 5)` returns `CPoint(10, -24)`.  \n  \n Subtracting a rectangle from a point returns the rectangle offset by the negatives of the **x** and **y** values specified in the point. For example, using the last overload to offset the rectangle `CRect(125, 200, 325, 400)` by the point `CPoint(25, -19)` returns `CRect(100, 219, 300, 419)`.  \n  \n Use the unary operator to negate a point. For example, using the unary operator with the point `CPoint(25, -19)` returns `CPoint(-25, 19)`.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#34](../../atl-mfc-shared/codesnippet/cpp/cpoint-class_7.cpp)]  \n  \n## See Also  \n [MFC Sample MDI](../../visual-cpp-samples.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [POINT Structure](../../mfc/reference/point-structure1.md)   \n [CRect Class](../../atl-mfc-shared/reference/crect-class.md)   \n [CSize Class](../../atl-mfc-shared/reference/csize-class.md)\n\n\n\n"}