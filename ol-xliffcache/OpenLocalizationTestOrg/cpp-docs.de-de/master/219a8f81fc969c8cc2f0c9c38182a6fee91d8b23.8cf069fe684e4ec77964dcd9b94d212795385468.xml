{"nodes":[{"pos":[12,79],"content":"_itoa, _i64toa, _ui64toa, _itow, _i64tow, _ui64tow | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_itoa, _i64toa, _ui64toa, _itow, _i64tow, _ui64tow | Microsoft Docs","pos":[0,67]}]},{"pos":[1548,1598],"content":"_itoa, _i64toa, _ui64toa, _itow, _i64tow, _ui64tow","linkify":"_itoa, _i64toa, _ui64toa, _itow, _i64tow, _ui64tow","nodes":[{"content":"_itoa, _i64toa, _ui64toa, _itow, _i64tow, _ui64tow","pos":[0,50]}]},{"content":"Converts an integer to a string.","pos":[1599,1631]},{"content":"More secure versions of these functions are available; see <bpt id=\"p1\">[</bpt>_itoa_s, _i64toa_s, _ui64toa_s, _itow_s, _i64tow_s, _ui64tow_s<ept id=\"p1\">](../../c-runtime-library/reference/itoa-s-i64toa-s-ui64toa-s-itow-s-i64tow-s-ui64tow-s.md)</ept>.","pos":[1632,1846],"source":" More secure versions of these functions are available; see [_itoa_s, _i64toa_s, _ui64toa_s, _itow_s, _i64tow_s, _ui64tow_s](../../c-runtime-library/reference/itoa-s-i64toa-s-ui64toa-s-itow-s-i64tow-s-ui64tow-s.md)."},{"pos":[1855,1861],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[3103,3113],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Number to be converted.","pos":[3128,3151]},{"content":"String result.","pos":[3167,3181]},{"content":"Base of <ph id=\"ph1\">`value`</ph>; which must be in the range 2–36.","pos":[3199,3248],"source":" Base of `value`; which must be in the range 2–36."},{"pos":[3257,3269],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Each of these functions returns a pointer to <ph id=\"ph1\">`str`</ph>.","pos":[3273,3324],"source":"Each of these functions returns a pointer to `str`."},{"content":"There is no error return.","pos":[3325,3350]},{"pos":[3359,3366],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_itoa`</ph>, <ph id=\"ph2\">`_i64toa`</ph>, and <ph id=\"ph3\">`_ui64toa`</ph> functions convert the digits of the given <ph id=\"ph4\">`value`</ph> argument to a null-terminated character string and stores the result (up to 33 characters for <ph id=\"ph5\">`_itoa`</ph> and 65 for <ph id=\"ph6\">`_i64toa`</ph> and <ph id=\"ph7\">`_ui64toa`</ph>) in <ph id=\"ph8\">`str`</ph>.","pos":[3370,3607],"source":"The `_itoa`, `_i64toa`, and `_ui64toa` functions convert the digits of the given `value` argument to a null-terminated character string and stores the result (up to 33 characters for `_itoa` and 65 for `_i64toa` and `_ui64toa`) in `str`."},{"content":"If <ph id=\"ph1\">`radix`</ph> equals 10 and <ph id=\"ph2\">`value`</ph> is negative, the first character of the stored string is the minus sign ( <ph id=\"ph3\">`–`</ph> ).","pos":[3608,3721],"source":" If `radix` equals 10 and `value` is negative, the first character of the stored string is the minus sign ( `–` )."},{"content":"<ph id=\"ph1\">`_itow`</ph>, <ph id=\"ph2\">`_i64tow`</ph>, and <ph id=\"ph3\">`_ui64tow`</ph> are wide-character versions of <ph id=\"ph4\">`_itoa`</ph>, <ph id=\"ph5\">`_i64toa`</ph>, and <ph id=\"ph6\">`_ui64toa`</ph>, respectively.","pos":[3722,3837],"source":"`_itow`, `_i64tow`, and `_ui64tow` are wide-character versions of `_itoa`, `_i64toa`, and `_ui64toa`, respectively."},{"pos":[3845,4017],"content":"[!IMPORTANT]\n To prevent buffer overruns, ensure that the `str` buffer is large enough to hold the converted digits plus the trailing null-character and a sign character.","leadings":["","> "],"nodes":[{"content":"To prevent buffer overruns, ensure that the <ph id=\"ph1\">`str`</ph> buffer is large enough to hold the converted digits plus the trailing null-character and a sign character.","pos":[14,170],"source":" To prevent buffer overruns, ensure that the `str` buffer is large enough to hold the converted digits plus the trailing null-character and a sign character."}]},{"content":"In C++, these functions have template overloads that invoke the newer, secure counterparts of these functions.","pos":[4024,4134]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[4135,4243],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"pos":[4253,4282],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"Tchar.h routine","pos":[4289,4304]},{"content":"_UNICODE and _MBCS not defined","pos":[4305,4335]},{"content":"_MBCS defined","pos":[4336,4349]},{"content":"_UNICODE defined","pos":[4350,4366]},{"pos":[4614,4626],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[4633,4640]},{"content":"Required header","pos":[4641,4656]},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdlib.h&gt;","pos":[4709,4720],"source":"\\<stdlib.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdlib.h&gt;","pos":[4735,4746],"source":"\\<stdlib.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdlib.h&gt;","pos":[4762,4773],"source":"\\<stdlib.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdlib.h&gt;","pos":[4786,4797],"source":"\\<stdlib.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdlib.h&gt;","pos":[4812,4823],"source":"\\<stdlib.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdlib.h&gt;","pos":[4839,4850],"source":"\\<stdlib.h>"},{"pos":[4858,4976],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[4985,4992],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7313,7338],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[7342,7440],"content":"<bpt id=\"p1\">[</bpt>System::Convert::ToString<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.convert.tostring.aspx)</ept>","source":"[System::Convert::ToString](https://msdn.microsoft.com/en-us/library/system.convert.tostring.aspx)"},{"pos":[7449,7457],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Data Conversion<ept id=\"p1\">](../../c-runtime-library/data-conversion.md)</ept><ph id=\"ph1\"> </ph>","pos":[7461,7523],"source":"[Data Conversion](../../c-runtime-library/data-conversion.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_ltoa, _ltow<ept id=\"p1\">](../../c-runtime-library/reference/ltoa-ltow.md)</ept><ph id=\"ph1\"> </ph>","pos":[7526,7590],"source":" [_ltoa, _ltow](../../c-runtime-library/reference/ltoa-ltow.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_ltoa_s, _ltow_s<ept id=\"p1\">](../../c-runtime-library/reference/ltoa-s-ltow-s.md)</ept><ph id=\"ph1\"> </ph>","pos":[7593,7665],"source":" [_ltoa_s, _ltow_s](../../c-runtime-library/reference/ltoa-s-ltow-s.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_ultoa, _ultow<ept id=\"p1\">](../../c-runtime-library/reference/ultoa-ultow.md)</ept><ph id=\"ph1\"> </ph>","pos":[7668,7736],"source":" [_ultoa, _ultow](../../c-runtime-library/reference/ultoa-ultow.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_ultoa_s, _ultow_s<ept id=\"p1\">](../../c-runtime-library/reference/ultoa-s-ultow-s.md)</ept>","pos":[7739,7814],"source":" [_ultoa_s, _ultow_s](../../c-runtime-library/reference/ultoa-s-ultow-s.md)"}],"content":"---\ntitle: \"_itoa, _i64toa, _ui64toa, _itow, _i64tow, _ui64tow | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_itow\"\n  - \"_i64tow\"\n  - \"_itoa\"\n  - \"_i64toa\"\n  - \"_ui64toa\"\n  - \"_ui64tow\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-convert-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_i64tow\"\n  - \"ui64toa\"\n  - \"ui64tow\"\n  - \"itot\"\n  - \"_itot\"\n  - \"_i64toa\"\n  - \"_itoa\"\n  - \"_itow\"\n  - \"_ui64tow\"\n  - \"i64toa\"\n  - \"i64tow\"\n  - \"itow\"\n  - \"_ui64toa\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_itot function\"\n  - \"ui64toa function\"\n  - \"_ui64toa function\"\n  - \"converting integers\"\n  - \"itot function\"\n  - \"_i64tow function\"\n  - \"_i64toa function\"\n  - \"_itow function\"\n  - \"ui64tow function\"\n  - \"integers, converting\"\n  - \"itoa function\"\n  - \"_ui64tow function\"\n  - \"i64tow function\"\n  - \"itow function\"\n  - \"i64toa function\"\n  - \"converting numbers, to strings\"\n  - \"_itoa function\"\nms.assetid: 46592a00-77bb-4e73-98c0-bf629d96cea6\ncaps.latest.revision: 25\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _itoa, _i64toa, _ui64toa, _itow, _i64tow, _ui64tow\nConverts an integer to a string. More secure versions of these functions are available; see [_itoa_s, _i64toa_s, _ui64toa_s, _itow_s, _i64tow_s, _ui64tow_s](../../c-runtime-library/reference/itoa-s-i64toa-s-ui64toa-s-itow-s-i64tow-s-ui64tow-s.md).  \n  \n## Syntax  \n  \n```  \nchar *_itoa(  \n   int value,  \n   char *str,  \n   int radix   \n);  \nchar *_i64toa(  \n   __int64 value,  \n   char *str,  \n   int radix   \n);  \nchar * _ui64toa(  \n   unsigned _int64 value,  \n   char *str,  \n   int radix   \n);  \nwchar_t * _itow(  \n   int value,  \n   wchar_t *str,  \n   int radix   \n);  \nwchar_t * _i64tow(  \n   __int64 value,  \n   wchar_t *str,  \n   int radix   \n);  \nwchar_t * _ui64tow(  \n   unsigned __int64 value,  \n   wchar_t *str,  \n   int radix   \n);  \ntemplate <size_t size>  \nchar *_itoa(  \n   int value,  \n   char (&str)[size],  \n   int radix   \n); // C++ only  \ntemplate <size_t size>  \nchar *_i64toa(  \n   __int64 value,  \n   char (&str)[size],  \n   int radix   \n); // C++ only  \ntemplate <size_t size>  \nchar * _ui64toa(  \n   unsigned _int64 value,  \n   char (&str)[size],  \n   int radix   \n); // C++ only  \ntemplate <size_t size>  \nwchar_t * _itow(  \n   int value,  \n   wchar_t (&str)[size],  \n   int radix   \n); // C++ only  \ntemplate <size_t size>  \nwchar_t * _i64tow(  \n   __int64 value,  \n   wchar_t (&str)[size],  \n   int radix   \n); // C++ only  \ntemplate <size_t size>  \nwchar_t * _ui64tow(  \n   unsigned __int64 value,  \n   wchar_t (&str)[size],  \n   int radix   \n); // C++ only  \n```  \n  \n#### Parameters  \n `value`  \n Number to be converted.  \n  \n `str`  \n String result.  \n  \n `radix`  \n Base of `value`; which must be in the range 2–36.  \n  \n## Return Value  \n Each of these functions returns a pointer to `str`. There is no error return.  \n  \n## Remarks  \n The `_itoa`, `_i64toa`, and `_ui64toa` functions convert the digits of the given `value` argument to a null-terminated character string and stores the result (up to 33 characters for `_itoa` and 65 for `_i64toa` and `_ui64toa`) in `str`. If `radix` equals 10 and `value` is negative, the first character of the stored string is the minus sign ( `–` ). `_itow`, `_i64tow`, and `_ui64tow` are wide-character versions of `_itoa`, `_i64toa`, and `_ui64toa`, respectively.  \n  \n> [!IMPORTANT]\n>  To prevent buffer overruns, ensure that the `str` buffer is large enough to hold the converted digits plus the trailing null-character and a sign character.  \n  \n In C++, these functions have template overloads that invoke the newer, secure counterparts of these functions. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n### Generic-Text Routine Mappings  \n  \n|Tchar.h routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_itot`|`_itoa`|`_itoa`|`_itow`|  \n|`_i64tot`|`_i64toa`|`_i64toa`|`_i64tow`|  \n|`_ui64tot`|`_ui64toa`|`_ui64toa`|`_ui64tow`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_itoa`|\\<stdlib.h>|  \n|`_i64toa`|\\<stdlib.h>|  \n|`_ui64toa`|\\<stdlib.h>|  \n|`_itow`|\\<stdlib.h>|  \n|`_i64tow`|\\<stdlib.h>|  \n|`_ui64tow`|\\<stdlib.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_itoa.c  \n// compile with: /W3  \n// This program makes use of the _itoa functions  \n// in various examples.  \n  \n#include <string.h>  \n#include <stdlib.h>  \n  \nint main( void )  \n{  \n   char buffer[65];  \n   int r;  \n   for( r=10; r>=2; --r )  \n   {  \n     _itoa( -1, buffer, r ); // C4996  \n     // Note: _itoa is deprecated; consider using _itoa_s instead  \n     printf( \"base %d: %s (%d chars)\\n\", r, buffer, strnlen(buffer, _countof(buffer)) );  \n   }  \n   printf( \"\\n\" );  \n   for( r=10; r>=2; --r )  \n   {  \n     _i64toa( -1L, buffer, r ); // C4996  \n     // Note: _i64toa is deprecated; consider using _i64toa_s  \n     printf( \"base %d: %s (%d chars)\\n\", r, buffer, strnlen(buffer, _countof(buffer)) );  \n   }  \n   printf( \"\\n\" );  \n   for( r=10; r>=2; --r )  \n   {  \n     _ui64toa( 0xffffffffffffffffL, buffer, r ); // C4996  \n     // Note: _ui64toa is deprecated; consider using _ui64toa_s  \n     printf( \"base %d: %s (%d chars)\\n\", r, buffer, strnlen(buffer, _countof(buffer)) );  \n   }  \n}  \n```  \n  \n```Output  \nbase 10: -1 (2 chars)  \nbase 9: 12068657453 (11 chars)  \nbase 8: 37777777777 (11 chars)  \nbase 7: 211301422353 (12 chars)  \nbase 6: 1550104015503 (13 chars)  \nbase 5: 32244002423140 (14 chars)  \nbase 4: 3333333333333333 (16 chars)  \nbase 3: 102002022201221111210 (21 chars)  \nbase 2: 11111111111111111111111111111111 (32 chars)  \n  \nbase 10: -1 (2 chars)  \nbase 9: 145808576354216723756 (21 chars)  \nbase 8: 1777777777777777777777 (22 chars)  \nbase 7: 45012021522523134134601 (23 chars)  \nbase 6: 3520522010102100444244423 (25 chars)  \nbase 5: 2214220303114400424121122430 (28 chars)  \nbase 4: 33333333333333333333333333333333 (32 chars)  \nbase 3: 11112220022122120101211020120210210211220 (41 chars)  \nbase 2: 1111111111111111111111111111111111111111111111111111111111111111 (64 chars)  \n  \nbase 10: 18446744073709551615 (20 chars)  \nbase 9: 145808576354216723756 (21 chars)  \nbase 8: 1777777777777777777777 (22 chars)  \nbase 7: 45012021522523134134601 (23 chars)  \nbase 6: 3520522010102100444244423 (25 chars)  \nbase 5: 2214220303114400424121122430 (28 chars)  \nbase 4: 33333333333333333333333333333333 (32 chars)  \nbase 3: 11112220022122120101211020120210210211220 (41 chars)  \nbase 2: 1111111111111111111111111111111111111111111111111111111111111111 (64 chars)  \n```  \n  \n## .NET Framework Equivalent  \n [System::Convert::ToString](https://msdn.microsoft.com/en-us/library/system.convert.tostring.aspx)  \n  \n## See Also  \n [Data Conversion](../../c-runtime-library/data-conversion.md)   \n [_ltoa, _ltow](../../c-runtime-library/reference/ltoa-ltow.md)   \n [_ltoa_s, _ltow_s](../../c-runtime-library/reference/ltoa-s-ltow-s.md)   \n [_ultoa, _ultow](../../c-runtime-library/reference/ultoa-ultow.md)   \n [_ultoa_s, _ultow_s](../../c-runtime-library/reference/ultoa-s-ultow-s.md)"}