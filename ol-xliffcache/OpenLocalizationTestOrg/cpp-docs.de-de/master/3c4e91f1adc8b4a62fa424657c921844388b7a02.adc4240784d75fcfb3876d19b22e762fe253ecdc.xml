{"nodes":[{"pos":[12,48],"content":"ptr::QueryInterface | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ptr::QueryInterface | Microsoft Docs","pos":[0,36]}]},{"content":"ptr::QueryInterface","pos":[719,738]},{"pos":[739,831],"content":"Queries the owned COM object for an interface and attaches the result to another <ph id=\"ph1\">`com::ptr`</ph>.","source":"Queries the owned COM object for an interface and attaches the result to another `com::ptr`."},{"content":"Syntax","pos":[840,846]},{"content":"Parameters","pos":[960,970]},{"content":"The <ph id=\"ph1\">`com::ptr`</ph> that will get the interface.","pos":[985,1028],"source":" The `com::ptr` that will get the interface."},{"content":"Exceptions","pos":[1037,1047]},{"pos":[1051,1239],"content":"Internally, <ph id=\"ph1\">`QueryInterface`</ph> is called on the owned COM object and any error <ph id=\"ph2\">`HRESULT`</ph> is converted to an exception by &lt;xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A&gt;.","source":"Internally, `QueryInterface` is called on the owned COM object and any error `HRESULT` is converted to an exception by <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A>."},{"content":"Remarks","pos":[1248,1255]},{"content":"Use this method to create a COM wrapper for a different interface of the COM object owned by the current wrapper.","pos":[1259,1372]},{"content":"This method calls <ph id=\"ph1\">`QueryInterface`</ph> through the owned COM object to request a pointer to a specific interface of the COM object and attaches the returned interface pointer to the passed-in <ph id=\"ph2\">`com::ptr`</ph>.","pos":[1373,1572],"source":" This method calls `QueryInterface` through the owned COM object to request a pointer to a specific interface of the COM object and attaches the returned interface pointer to the passed-in `com::ptr`."},{"content":"Example","pos":[1581,1588]},{"content":"This example implements a CLR class that uses a <ph id=\"ph1\">`com::ptr`</ph> to wrap its private member <ph id=\"ph2\">`IXMLDOMDocument`</ph> object.","pos":[1592,1703],"source":"This example implements a CLR class that uses a `com::ptr` to wrap its private member `IXMLDOMDocument` object."},{"content":"The <ph id=\"ph1\">`WriteTopLevelNode`</ph> member function uses <ph id=\"ph2\">`QueryInterface`</ph> to fill a local <ph id=\"ph3\">`com::ptr`</ph> with an <ph id=\"ph4\">`IXMLDOMNode`</ph> and then passes the <ph id=\"ph5\">`com::ptr`</ph> (by tracking reference) to a private member function that writes the node's name and text properties to the console.","pos":[1704,1962],"source":" The `WriteTopLevelNode` member function uses `QueryInterface` to fill a local `com::ptr` with an `IXMLDOMNode` and then passes the `com::ptr` (by tracking reference) to a private member function that writes the node's name and text properties to the console."},{"content":"Requirements","pos":[4861,4873]},{"pos":[4877,4911],"content":"<bpt id=\"p1\">**</bpt>Header file<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>msclr\\com\\ptr.h&gt;","source":"**Header file** \\<msclr\\com\\ptr.h>"},{"pos":[4918,4942],"content":"<bpt id=\"p1\">**</bpt>Namespace<ept id=\"p1\">**</ept> msclr::com","source":"**Namespace** msclr::com"},{"content":"See Also","pos":[4951,4959]},{"content":"ptr Members","pos":[4964,4975]},{"content":"ptr::GetInterface","pos":[5008,5025]}],"content":"---\ntitle: \"ptr::QueryInterface | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ptr.QueryInterface\"\n  - \"ptr::QueryInterface\"\n  - \"msclr::com::ptr::QueryInterface\"\n  - \"msclr.com.ptr.QueryInterface\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"QueryInterface method\"\nms.assetid: c2619517-3fde-493b-b12d-da8f62d5d803\ncaps.latest.revision: 11\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ptr::QueryInterface\nQueries the owned COM object for an interface and attaches the result to another `com::ptr`.  \n  \n## Syntax  \n  \n```  \ntemplate<class _other_type>  \nvoid QueryInterface(  \n   ptr<_other_type> % other  \n);  \n```  \n  \n#### Parameters  \n `other`  \n The `com::ptr` that will get the interface.  \n  \n## Exceptions  \n Internally, `QueryInterface` is called on the owned COM object and any error `HRESULT` is converted to an exception by <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A>.  \n  \n## Remarks  \n Use this method to create a COM wrapper for a different interface of the COM object owned by the current wrapper. This method calls `QueryInterface` through the owned COM object to request a pointer to a specific interface of the COM object and attaches the returned interface pointer to the passed-in `com::ptr`.  \n  \n## Example  \n This example implements a CLR class that uses a `com::ptr` to wrap its private member `IXMLDOMDocument` object. The `WriteTopLevelNode` member function uses `QueryInterface` to fill a local `com::ptr` with an `IXMLDOMNode` and then passes the `com::ptr` (by tracking reference) to a private member function that writes the node's name and text properties to the console.  \n  \n```  \n// comptr_queryinterface.cpp  \n// compile with: /clr /link msxml2.lib  \n#include <msxml2.h>  \n#include <msclr\\com\\ptr.h>  \n  \n#import <msxml3.dll> raw_interfaces_only  \n  \nusing namespace System;  \nusing namespace System::Runtime::InteropServices;  \nusing namespace msclr;  \n  \n// a ref class that uses a com::ptr to contain an   \n// IXMLDOMDocument object  \nref class XmlDocument {  \npublic:  \n   // construct the internal com::ptr with a null interface  \n   // and use CreateInstance to fill it  \n   XmlDocument(String^ progid) {  \n      m_ptrDoc.CreateInstance(progid);     \n   }  \n  \n   void LoadXml(String^ xml) {  \n      pin_ptr<const wchar_t> pinnedXml = PtrToStringChars(xml);  \n      BSTR bstr = NULL;  \n  \n      try {  \n         // load some XML into our document  \n         bstr = ::SysAllocString(pinnedXml);  \n         if (NULL == bstr) {  \n            throw gcnew OutOfMemoryException;  \n         }  \n         VARIANT_BOOL bIsSuccessful = false;  \n         // use operator -> to call IXMODOMDocument member function  \n         Marshal::ThrowExceptionForHR(m_ptrDoc->loadXML(bstr, &bIsSuccessful));  \n      }  \n      finally {  \n         ::SysFreeString(bstr);  \n      }  \n   }  \n  \n   // write the top level node to the console  \n   void WriteTopLevelNode() {  \n      com::ptr<IXMLDOMNode> ptrNode;  \n  \n      // query for the top level node interface  \n      m_ptrDoc.QueryInterface(ptrNode);  \n      WriteNode(ptrNode);  \n   }  \n  \n   // note that the destructor will call the com::ptr destructor  \n   // and automatically release the reference to the COM object  \n  \nprivate:  \n   // simplified function that only writes the node  \n   void WriteNode(com::ptr<IXMLDOMNode> % node) {  \n      BSTR bstr = NULL;  \n  \n      try {  \n         // write out the name and text properties  \n         Marshal::ThrowExceptionForHR(node->get_nodeName(&bstr));  \n         String^ strName = gcnew String(bstr);  \n         Console::Write(\"<{0}>\", strName);  \n         ::SysFreeString(bstr);  \n         bstr = NULL;  \n  \n         Marshal::ThrowExceptionForHR(node->get_text(&bstr));  \n         Console::Write(gcnew String(bstr));  \n         ::SysFreeString(bstr);  \n         bstr = NULL;  \n  \n         Console::WriteLine(\"</{0}>\", strName);  \n      }  \n      finally {  \n         ::SysFreeString(bstr);  \n      }  \n   }  \n  \n   com::ptr<IXMLDOMDocument> m_ptrDoc;  \n};  \n  \n// use the ref class to handle an XML DOM Document object  \nint main() {  \n   try {  \n      // create the class from a progid string  \n      XmlDocument doc(\"Msxml2.DOMDocument.3.0\");  \n  \n      // stream some xml into the document  \n      doc.LoadXml(\"<word>persnickety</word>\");  \n  \n      // write the document to the console  \n      doc.WriteTopLevelNode();  \n   }  \n   catch (Exception^ e) {  \n      Console::WriteLine(e);     \n   }  \n}  \n```  \n  \n```Output  \n<#document>persnickety</#document>  \n```  \n  \n## Requirements  \n **Header file** \\<msclr\\com\\ptr.h>  \n  \n **Namespace** msclr::com  \n  \n## See Also  \n [ptr Members](../dotnet/ptr-members.md)   \n [ptr::GetInterface](../dotnet/ptr-getinterface.md)"}