<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">740d0a3742875a410f281eb2863037458cefc632</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\idle-loop-processing.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5405483ce6bc8ab41516d5c2efe5366706c69d0d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad61d3395574dc2ea1a00055a51bfd02adf5f42b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Idle Loop Processing | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Idle Loop Processing</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Many applications perform lengthy processing "in the background."</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Sometimes performance considerations dictate using multithreading for such work.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Threads involve extra development overhead, so they are not recommended for simple tasks like the idle-time work that MFC does in the <bpt id="p1">[</bpt>OnIdle<ept id="p1">](../mfc/reference/cwinthread-class.md#cwinthread__onidle)</ept> function.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This article focuses on idle processing.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information about multithreading, see <bpt id="p1">[</bpt>Multithreading Topics<ept id="p1">](../parallel/multithreading-support-for-older-code-visual-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Some kinds of background processing are appropriately done during intervals that the user is not otherwise interacting with the application.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In an application developed for the Microsoft Windows operating system, an application can perform idle-time processing by splitting a lengthy process into many small fragments.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>After processing each fragment, the application yields execution control to Windows using a <bpt id="p1">[</bpt>PeekMessage<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms644943)</ept> loop.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This article explains two ways to do idle processing in your application:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Using <bpt id="p1">**</bpt>PeekMessage<ept id="p1">**</ept> in MFC's main message loop.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Embedding another <bpt id="p1">**</bpt>PeekMessage<ept id="p1">**</ept> loop somewhere else in the application.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>PeekMessage in the MFC Message Loop</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In an application developed with MFC, the main message loop in the <ph id="ph1">`CWinThread`</ph> class contains a message loop that calls the <bpt id="p1">[</bpt>PeekMessage<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms644943)</ept> Win32 API.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This loop also calls the <ph id="ph1">`OnIdle`</ph> member function of <ph id="ph2">`CWinThread`</ph> between messages.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>An application can process messages in this idle time by overriding the <ph id="ph1">`OnIdle`</ph> function.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>Run<ept id="p1">**</ept>, <ph id="ph1">`OnIdle`</ph>, and certain other member functions are now members of class <ph id="ph2">`CWinThread`</ph> rather than of class <ph id="ph3">`CWinApp`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>is derived from <ph id="ph1">`CWinThread`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information about performing idle processing, see <bpt id="p1">[</bpt>OnIdle<ept id="p1">](../mfc/reference/cwinthread-class.md#cwinthread__onidle)</ept> in the <bpt id="p2">*</bpt>MFC Reference<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>PeekMessage Elsewhere in Your Application</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Another method for performing idle processing in an application involves embedding a message loop in one of your functions.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This message loop is very similar to MFC's main message loop, found in <bpt id="p1">[</bpt>CWinThread::Run<ept id="p1">](../mfc/reference/cwinthread-class.md#cwinthread__run)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>That means such a loop in an application developed with MFC must perform many of the same functions as the main message loop.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following code fragment demonstrates writing a message loop that is compatible with MFC:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#8</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This code, embedded in a function, loops as long as there is idle processing to do.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Within that loop, a nested loop repeatedly calls <bpt id="p1">**</bpt>PeekMessage<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>As long as that call returns a nonzero value, the loop calls <ph id="ph1">`CWinThread::PumpMessage`</ph> to perform normal message translation and dispatching.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Although <ph id="ph1">`PumpMessage`</ph> is undocumented, you can examine its source code in the ThrdCore.Cpp file in the \atlmfc\src\mfc directory of your Visual C++ installation.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Once the inner loop ends, the outer loop performs idle processing with one or more calls to <ph id="ph1">`OnIdle`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The first call is for MFC's purposes.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can make additional calls to <ph id="ph1">`OnIdle`</ph> to do your own background work.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more information about performing idle processing, see <bpt id="p1">[</bpt>OnIdle<ept id="p1">](../mfc/reference/cwinthread-class.md#cwinthread__onidle)</ept> in the MFC Library Reference.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>General MFC Topics</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>