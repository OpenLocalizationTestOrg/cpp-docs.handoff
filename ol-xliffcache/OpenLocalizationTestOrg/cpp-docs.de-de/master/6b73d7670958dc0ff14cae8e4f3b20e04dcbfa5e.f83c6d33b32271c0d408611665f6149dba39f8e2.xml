{"nodes":[{"pos":[12,42],"content":"_get_doserrno | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_get_doserrno | Microsoft Docs","pos":[0,30]}]},{"pos":[978,991],"content":"_get_doserrno","linkify":"_get_doserrno","nodes":[{"content":"_get_doserrno","pos":[0,13]}]},{"pos":[992,1092],"content":"Gets the error value returned by the operating system before it is translated into an <ph id=\"ph1\">`errno`</ph> value.","source":"Gets the error value returned by the operating system before it is translated into an `errno` value."},{"pos":[1101,1107],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1184,1194],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[out] <ph id=\"ph1\">`pValue`</ph>","pos":[1198,1212],"source":"[out] `pValue`"},{"content":"A pointer to an integer to be filled with the current value of the <ph id=\"ph1\">`_doserrno`</ph> global macro.","pos":[1216,1308],"source":" A pointer to an integer to be filled with the current value of the `_doserrno` global macro."},{"pos":[1317,1329],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If <ph id=\"ph1\">`_get_doserrno`</ph> succeeds, it returns zero; if it fails, it returns an error code.","pos":[1333,1417],"source":"If `_get_doserrno` succeeds, it returns zero; if it fails, it returns an error code."},{"content":"If <ph id=\"ph1\">`pValue`</ph> is <ph id=\"ph2\">`NULL`</ph>, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[1418,1571],"source":" If `pValue` is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, this function sets <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and returns <ph id=\"ph3\">`EINVAL`</ph>.","pos":[1572,1669],"source":" If execution is allowed to continue, this function sets `errno` to `EINVAL` and returns `EINVAL`."},{"pos":[1678,1685],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_doserrno`</ph> global macro is set to zero during CRT initialization, before process execution begins.","pos":[1689,1792],"source":"The `_doserrno` global macro is set to zero during CRT initialization, before process execution begins."},{"content":"It is set to the operating-system error value returned by any system-level function call that returns an operating-system error, and it is never reset to zero during execution.","pos":[1793,1969]},{"content":"When you write code to check the error value returned by a function, always clear <ph id=\"ph1\">`_doserrno`</ph> by using <bpt id=\"p1\">[</bpt>_set_doserrno<ept id=\"p1\">](../../c-runtime-library/reference/set-doserrno.md)</ept> before the function call.","pos":[1970,2165],"source":" When you write code to check the error value returned by a function, always clear `_doserrno` by using [_set_doserrno](../../c-runtime-library/reference/set-doserrno.md) before the function call."},{"content":"Because another function call may overwrite <ph id=\"ph1\">`_doserrno`</ph>, check the value by using <ph id=\"ph2\">`_get_doserrno`</ph> immediately after the function call.","pos":[2166,2300],"source":" Because another function call may overwrite `_doserrno`, check the value by using `_get_doserrno` immediately after the function call."},{"pos":[2307,2433],"content":"We recommend <bpt id=\"p1\">[</bpt>_get_errno<ept id=\"p1\">](../../c-runtime-library/reference/get-errno.md)</ept> instead of <ph id=\"ph1\">`_get_doserrno`</ph> for portable error codes.","source":"We recommend [_get_errno](../../c-runtime-library/reference/get-errno.md) instead of `_get_doserrno` for portable error codes."},{"pos":[2440,2497],"content":"Possible values of <ph id=\"ph1\">`_doserrno`</ph> are defined in <ph id=\"ph2\">\\&lt;</ph>errno.h&gt;.","source":"Possible values of `_doserrno` are defined in \\<errno.h>."},{"pos":[2506,2518],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[2525,2532]},{"content":"Required header","pos":[2533,2548]},{"content":"Optional header","pos":[2549,2564]},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdlib.h&gt;, <ph id=\"ph2\">\\&lt;</ph>cstdlib&gt; (C++)","pos":[2647,2676],"source":"\\<stdlib.h>, \\<cstdlib> (C++)"},{"content":"<ph id=\"ph1\">\\&lt;</ph>errno.h&gt;, <ph id=\"ph2\">\\&lt;</ph>cerrno&gt; (C++)","pos":[2677,2704],"source":"\\<errno.h>, \\<cerrno> (C++)"},{"content":"<ph id=\"ph1\">`_get_doserrno`</ph> is a Microsoft extension.","pos":[2712,2753],"source":"`_get_doserrno` is a Microsoft extension."},{"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","pos":[2754,2852],"source":" For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"pos":[2861,2869],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>_set_doserrno<ept id=\"p1\">](../../c-runtime-library/reference/set-doserrno.md)</ept><ph id=\"ph1\"> </ph>","pos":[2873,2940],"source":"[_set_doserrno](../../c-runtime-library/reference/set-doserrno.md) "},{"content":"<bpt id=\"p1\"> [</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>","pos":[2943,3059],"source":" [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)"}],"content":"---\ntitle: \"_get_doserrno | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_get_doserrno\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-runtime-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_get_doserrno\"\n  - \"get_doserrno\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"get_doserrno function\"\n  - \"_get_doserrno function\"\nms.assetid: 7fec7be3-6e39-4181-846b-8ef24489361c\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _get_doserrno\nGets the error value returned by the operating system before it is translated into an `errno` value.  \n  \n## Syntax  \n  \n```  \nerrno_t _get_doserrno(   \n   int * pValue   \n);   \n```  \n  \n#### Parameters  \n [out] `pValue`  \n A pointer to an integer to be filled with the current value of the `_doserrno` global macro.  \n  \n## Return Value  \n If `_get_doserrno` succeeds, it returns zero; if it fails, it returns an error code. If `pValue` is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, this function sets `errno` to `EINVAL` and returns `EINVAL`.  \n  \n## Remarks  \n The `_doserrno` global macro is set to zero during CRT initialization, before process execution begins. It is set to the operating-system error value returned by any system-level function call that returns an operating-system error, and it is never reset to zero during execution. When you write code to check the error value returned by a function, always clear `_doserrno` by using [_set_doserrno](../../c-runtime-library/reference/set-doserrno.md) before the function call. Because another function call may overwrite `_doserrno`, check the value by using `_get_doserrno` immediately after the function call.  \n  \n We recommend [_get_errno](../../c-runtime-library/reference/get-errno.md) instead of `_get_doserrno` for portable error codes.  \n  \n Possible values of `_doserrno` are defined in \\<errno.h>.  \n  \n## Requirements  \n  \n|Routine|Required header|Optional header|  \n|-------------|---------------------|---------------------|  \n|`_get_doserrno`|\\<stdlib.h>, \\<cstdlib> (C++)|\\<errno.h>, \\<cerrno> (C++)|  \n  \n `_get_doserrno` is a Microsoft extension. For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## See Also  \n [_set_doserrno](../../c-runtime-library/reference/set-doserrno.md)   \n [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)"}