{"nodes":[{"pos":[12,38],"content":"wcsrtombs | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"wcsrtombs | Microsoft Docs","pos":[0,26]}]},{"content":"wcsrtombs","pos":[1013,1022]},{"content":"Convert a wide character string to its multibyte character string representation.","pos":[1023,1104]},{"content":"A more secure version of this function is available; see <bpt id=\"p1\">[</bpt>wcsrtombs_s<ept id=\"p1\">](../../c-runtime-library/reference/wcsrtombs-s.md)</ept>.","pos":[1105,1226],"source":" A more secure version of this function is available; see [wcsrtombs_s](../../c-runtime-library/reference/wcsrtombs-s.md)."},{"content":"Syntax","pos":[1235,1241]},{"content":"Parameters","pos":[1540,1550]},{"content":"[out]","pos":[1554,1559]},{"content":"The resulting converted multibyte character string's address location.","pos":[1571,1641]},{"content":"[in]","pos":[1648,1652]},{"content":"Indirectly points to the location of the wide character string to be converted.","pos":[1664,1743]},{"content":"[in]","pos":[1750,1754]},{"content":"The number of character to be converted.","pos":[1766,1806]},{"content":"[in]","pos":[1813,1817]},{"content":"A pointer to an <ph id=\"ph1\">`mbstate_t`</ph> conversion state object.","pos":[1831,1883],"source":" A pointer to an `mbstate_t` conversion state object."},{"content":"Return Value","pos":[1892,1904]},{"content":"Returns the number of bytes successfully converted, not including the null terminating null byte (if any), otherwise a -1 if an error occurred.","pos":[1908,2051]},{"content":"Remarks","pos":[2060,2067]},{"content":"The <ph id=\"ph1\">`wcsrtombs`</ph> function converts a string of wide characters, beginning in the specified conversion state contained in <ph id=\"ph2\">`mbstate`</ph>, from the values indirect pointed to in <ph id=\"ph3\">`wcstr`</ph>, into the address of <ph id=\"ph4\">`mbstr`</ph>.","pos":[2071,2278],"source":"The `wcsrtombs` function converts a string of wide characters, beginning in the specified conversion state contained in `mbstate`, from the values indirect pointed to in `wcstr`, into the address of `mbstr`."},{"content":"The conversion will continue for each character until: after a null terminating wide character is encountered, when a non corresponding character is encountered or when the next character would exceed the limit contained in <ph id=\"ph1\">`count`</ph>.","pos":[2279,2511],"source":" The conversion will continue for each character until: after a null terminating wide character is encountered, when a non corresponding character is encountered or when the next character would exceed the limit contained in `count`."},{"content":"If <ph id=\"ph1\">`wcsrtombs`</ph> encounters the wide-character null character (L'\\0') either before or when <ph id=\"ph2\">`count`</ph> occurs, it converts it to an 8-bit 0 and stops.","pos":[2512,2657],"source":" If `wcsrtombs` encounters the wide-character null character (L'\\0') either before or when `count` occurs, it converts it to an 8-bit 0 and stops."},{"content":"Thus, the multibyte character string at <ph id=\"ph1\">`mbstr`</ph> is null-terminated only if <ph id=\"ph2\">`wcsrtombs`</ph> encounters a wide character null character during conversion.","pos":[2664,2812],"source":"Thus, the multibyte character string at `mbstr` is null-terminated only if `wcsrtombs` encounters a wide character null character during conversion."},{"content":"If the sequences pointed to by <ph id=\"ph1\">`wcstr`</ph> and <ph id=\"ph2\">`mbstr`</ph> overlap, the behavior of <ph id=\"ph3\">`wcsrtombs`</ph> is undefined.","pos":[2813,2914],"source":" If the sequences pointed to by `wcstr` and `mbstr` overlap, the behavior of `wcsrtombs` is undefined."},{"content":"is affected by the LC_TYPE category of the current locale.","pos":[2927,2985]},{"content":"The <ph id=\"ph1\">`wcsrtombs`</ph> function differs from <bpt id=\"p1\">[</bpt>wcstombs, _wcstombs_l<ept id=\"p1\">](../../c-runtime-library/reference/wcstombs-wcstombs-l.md)</ept> by its restartability.","pos":[2992,3134],"source":"The `wcsrtombs` function differs from [wcstombs, _wcstombs_l](../../c-runtime-library/reference/wcstombs-wcstombs-l.md) by its restartability."},{"content":"The conversion state is stored in <ph id=\"ph1\">`mbstate`</ph> for subsequent calls to the same or other restartable functions.","pos":[3135,3243],"source":" The conversion state is stored in `mbstate` for subsequent calls to the same or other restartable functions."},{"content":"Results are undefined when mixing the use of restartable and nonrestartable functions.","pos":[3244,3330]},{"content":"For example, an application would use <ph id=\"ph1\">`wcsrlen`</ph> rather than <ph id=\"ph2\">`wcsnlen`</ph>, if a subsequent call to <ph id=\"ph3\">`wcsrtombs`</ph> were used instead of <ph id=\"ph4\">`wcstombs`</ph>.","pos":[3332,3471],"source":"  For example, an application would use `wcsrlen` rather than `wcsnlen`, if a subsequent call to `wcsrtombs` were used instead of `wcstombs`."},{"content":"If the <ph id=\"ph1\">`mbstr`</ph> argument is <ph id=\"ph2\">`NULL`</ph>, <ph id=\"ph3\">`wcsrtombs`</ph> returns the required size in bytes of the destination string.","pos":[3478,3586],"source":"If the `mbstr` argument is `NULL`, `wcsrtombs` returns the required size in bytes of the destination string."},{"content":"If <ph id=\"ph1\">`mbstate`</ph> is null, the internal <ph id=\"ph2\">`mbstate_t`</ph> conversion state is used.","pos":[3587,3659],"source":" If `mbstate` is null, the internal `mbstate_t` conversion state is used."},{"content":"If the character sequence <ph id=\"ph1\">`wchar`</ph> does not have a corresponding multibyte character representation, a -1 is returned and the <ph id=\"ph2\">`errno`</ph> is set to <ph id=\"ph3\">`EILSEQ`</ph>.","pos":[3660,3812],"source":" If the character sequence `wchar` does not have a corresponding multibyte character representation, a -1 is returned and the `errno` is set to `EILSEQ`."},{"content":"In C++, this function has a template overload that invokes the newer, secure counterpart of this function.","pos":[3819,3925]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[3926,4034],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"content":"Exceptions","pos":[4043,4053]},{"pos":[4057,4228],"content":"The <ph id=\"ph1\">`wcsrtombs`</ph> function is multithread safe as long as no function in the current thread calls <ph id=\"ph2\">`setlocale`</ph> while this function is executing and the <ph id=\"ph3\">`mbstate`</ph> is not null.","source":"The `wcsrtombs` function is multithread safe as long as no function in the current thread calls `setlocale` while this function is executing and the `mbstate` is not null."},{"content":"Example","pos":[4237,4244]},{"content":".NET Framework Equivalent","pos":[5381,5406]},{"content":"Not applicable.","pos":[5410,5425]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[5426,5473],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[5474,5599],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"Requirements","pos":[5608,5620]},{"content":"Routine","pos":[5627,5634]},{"content":"Required header","pos":[5635,5650]},{"content":"wchar.h&gt;","pos":[5709,5717],"source":"wchar.h>"},{"content":"See Also","pos":[5727,5735]},{"content":"Data Conversion","pos":[5740,5755]},{"content":"Locale","pos":[5806,5812]},{"content":"Interpretation of Multibyte-Character Sequences","pos":[5854,5901]},{"content":"wcrtomb","pos":[5984,5991]},{"content":"wcrtomb_s","pos":[6044,6053]},{"content":"wctomb, _wctomb_l","pos":[6108,6125]},{"content":"wcstombs, _wcstombs_l","pos":[6186,6207]},{"content":"mbsinit","pos":[6272,6279]}],"content":"---\ntitle: \"wcsrtombs | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"wcsrtombs\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-convert-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"wcsrtombs\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"wcsrtombs function\"\n  - \"string conversion, wide characters\"\n  - \"wide characters, strings\"\nms.assetid: a8d21fec-0d36-4085-9d81-9b1c61c7259d\ncaps.latest.revision: 26\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# wcsrtombs\nConvert a wide character string to its multibyte character string representation. A more secure version of this function is available; see [wcsrtombs_s](../../c-runtime-library/reference/wcsrtombs-s.md).  \n  \n## Syntax  \n  \n```  \nsize_t wcsrtombs(  \n   char *mbstr,  \n   const wchar_t **wcstr,  \n   sizeof count,  \n   mbstate_t *mbstate  \n);  \ntemplate <size_t size>  \nsize_t wcsrtombs(  \n   char (&mbstr)[size],  \n   const wchar_t **wcstr,  \n   sizeof count,  \n   mbstate_t *mbstate  \n); // C++ only  \n```  \n  \n#### Parameters  \n [out] `mbstr`  \n The resulting converted multibyte character string's address location.  \n  \n [in] `wcstr`  \n Indirectly points to the location of the wide character string to be converted.  \n  \n [in] `count`  \n The number of character to be converted.  \n  \n [in] `mbstate`  \n A pointer to an `mbstate_t` conversion state object.  \n  \n## Return Value  \n Returns the number of bytes successfully converted, not including the null terminating null byte (if any), otherwise a -1 if an error occurred.  \n  \n## Remarks  \n The `wcsrtombs` function converts a string of wide characters, beginning in the specified conversion state contained in `mbstate`, from the values indirect pointed to in `wcstr`, into the address of `mbstr`. The conversion will continue for each character until: after a null terminating wide character is encountered, when a non corresponding character is encountered or when the next character would exceed the limit contained in `count`. If `wcsrtombs` encounters the wide-character null character (L'\\0') either before or when `count` occurs, it converts it to an 8-bit 0 and stops.  \n  \n Thus, the multibyte character string at `mbstr` is null-terminated only if `wcsrtombs` encounters a wide character null character during conversion. If the sequences pointed to by `wcstr` and `mbstr` overlap, the behavior of `wcsrtombs` is undefined. `wcsrtombs` is affected by the LC_TYPE category of the current locale.  \n  \n The `wcsrtombs` function differs from [wcstombs, _wcstombs_l](../../c-runtime-library/reference/wcstombs-wcstombs-l.md) by its restartability. The conversion state is stored in `mbstate` for subsequent calls to the same or other restartable functions. Results are undefined when mixing the use of restartable and nonrestartable functions.  For example, an application would use `wcsrlen` rather than `wcsnlen`, if a subsequent call to `wcsrtombs` were used instead of `wcstombs`.  \n  \n If the `mbstr` argument is `NULL`, `wcsrtombs` returns the required size in bytes of the destination string. If `mbstate` is null, the internal `mbstate_t` conversion state is used. If the character sequence `wchar` does not have a corresponding multibyte character representation, a -1 is returned and the `errno` is set to `EILSEQ`.  \n  \n In C++, this function has a template overload that invokes the newer, secure counterpart of this function. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n## Exceptions  \n The `wcsrtombs` function is multithread safe as long as no function in the current thread calls `setlocale` while this function is executing and the `mbstate` is not null.  \n  \n## Example  \n  \n```  \n// crt_wcsrtombs.cpp  \n// compile with: /W3  \n// This code example converts a wide  \n// character string into a multibyte  \n// character string.  \n  \n#include <stdio.h>  \n#include <memory.h>  \n#include <wchar.h>  \n#include <errno.h>  \n  \n#define MB_BUFFER_SIZE 100  \n  \nint main()  \n{  \n    const wchar_t   wcString[] =   \n                    {L\"Every good boy does fine.\"};  \n    const wchar_t   *wcsIndirectString = wcString;  \n    char            mbString[MB_BUFFER_SIZE];  \n    size_t          countConverted;  \n    mbstate_t       mbstate;  \n  \n    // Reset to initial shift state  \n    ::memset((void*)&mbstate, 0, sizeof(mbstate));  \n  \n    countConverted = wcsrtombs(mbString, &wcsIndirectString,  \n                               MB_BUFFER_SIZE, &mbstate); // C4996  \n    // Note: wcsrtombs is deprecated; consider using wcsrtombs_s  \n    if (errno == EILSEQ)  \n    {  \n        printf( \"An encoding error was detected in the string.\\n\" );  \n    }  \n    else   \n    {  \n        printf( \"The string was successfuly converted.\\n\" );  \n    }  \n}  \n```  \n  \n```Output  \nThe string was successfuly converted.  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`wcsrtombs`|\\<wchar.h>|  \n  \n## See Also  \n [Data Conversion](../../c-runtime-library/data-conversion.md)   \n [Locale](../../c-runtime-library/locale.md)   \n [Interpretation of Multibyte-Character Sequences](../../c-runtime-library/interpretation-of-multibyte-character-sequences.md)   \n [wcrtomb](../../c-runtime-library/reference/wcrtomb.md)   \n [wcrtomb_s](../../c-runtime-library/reference/wcrtomb-s.md)   \n [wctomb, _wctomb_l](../../c-runtime-library/reference/wctomb-wctomb-l.md)   \n [wcstombs, _wcstombs_l](../../c-runtime-library/reference/wcstombs-wcstombs-l.md)   \n [mbsinit](../../c-runtime-library/reference/mbsinit.md)"}