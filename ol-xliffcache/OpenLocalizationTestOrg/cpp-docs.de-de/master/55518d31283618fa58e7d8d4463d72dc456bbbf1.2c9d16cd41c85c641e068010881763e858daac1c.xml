{"nodes":[{"pos":[12,48],"content":"_execlpe, _wexeclpe | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_execlpe, _wexeclpe | Microsoft Docs","pos":[0,36]}]},{"content":"_execlpe, _wexeclpe","pos":[1055,1074]},{"content":"Loads and executes new child processes.","pos":[1075,1114]},{"pos":[1122,1342],"content":"[!IMPORTANT]\n This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","leadings":["","> "],"nodes":[{"content":" This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","pos":[13,218],"nodes":[{"content":"This API cannot be used in applications that execute in the Windows Runtime.","pos":[1,77]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRT functions not supported with /ZW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.","pos":[78,205],"source":" For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)."}]}]},{"content":"Syntax","pos":[1351,1357]},{"content":"Parameters","pos":[1684,1694]},{"content":"Path of the file to execute.","pos":[1711,1739]},{"content":",","pos":[1752,1753]},{"content":"List of pointers to parameters.","pos":[1769,1800]},{"content":"Array of pointers to environment settings.","pos":[1817,1859]},{"content":"Return Value","pos":[1868,1880]},{"content":"If successful, these functions do not return to the calling process.","pos":[1884,1952]},{"content":"A return value of –1 indicates an error, in which case the <ph id=\"ph1\">`errno`</ph> global variable is set.","pos":[1953,2043],"source":" A return value of –1 indicates an error, in which case the `errno` global variable is set."},{"pos":[2058,2063],"content":"value"},{"content":"Description","pos":[2064,2075]},{"content":"The space required for the arguments and environment settings exceeds 32 KB.","pos":[2130,2206]},{"content":"The specified file has a locking or sharing violation.","pos":[2220,2274]},{"content":"Invalid parameter.","pos":[2288,2306]},{"content":"Too many files open (the specified file must be opened to determine whether it is executable).","pos":[2320,2414]},{"content":"The file or path not found.","pos":[2428,2455]},{"content":"The specified file is not executable or has an invalid executable-file format.","pos":[2470,2548]},{"content":"Not enough memory is available to execute the new process; the available memory has been corrupted; or an invalid block exists, indicating that the calling process was not allocated properly.","pos":[2562,2753]},{"pos":[2761,2938],"content":"For more information about these and other return codes, see <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For more information about these and other return codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"Remarks","pos":[2947,2954]},{"content":"Each of these functions loads and executes a new process, passing each command-line argument as a separate parameter and also passing an array of pointers to environment settings.","pos":[2958,3137]},{"content":"These functions use the <ph id=\"ph1\">`PATH`</ph> environment variable to find the file to execute.","pos":[3138,3218],"source":" These functions use the `PATH` environment variable to find the file to execute."},{"content":"The <ph id=\"ph1\">`_execlpe`</ph> functions validate their parameters.","pos":[3225,3276],"source":"The `_execlpe` functions validate their parameters."},{"content":"If either <ph id=\"ph1\">`cmdname`</ph> or <ph id=\"ph2\">`arg0`</ph> is a null pointers or empty string, these functions invoke the invalid parameter handler as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[3277,3484],"source":" If either `cmdname` or `arg0` is a null pointers or empty string, these functions invoke the invalid parameter handler as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and return -1.","pos":[3485,3576],"source":" If execution is allowed to continue, these functions set `errno` to `EINVAL` and return -1."},{"content":"No new process is launched.","pos":[3577,3604]},{"content":"Requirements","pos":[3613,3625]},{"content":"Function","pos":[3632,3640]},{"content":"Required header","pos":[3641,3656]},{"content":"Optional header","pos":[3657,3672]},{"content":"process.h&gt;","pos":[3753,3763],"source":"process.h>"},{"content":"errno.h&gt;","pos":[3766,3774],"source":"errno.h>"},{"content":"process.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[3793,3817],"source":"process.h> or \\<wchar.h>"},{"content":"errno.h&gt;","pos":[3820,3828],"source":"errno.h>"},{"pos":[3836,3934],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"Example","pos":[3943,3950]},{"pos":[3954,4048],"content":"See the example in <bpt id=\"p1\">[</bpt>_exec, _wexec Functions<ept id=\"p1\">](../../c-runtime-library/exec-wexec-functions.md)</ept>.","source":"See the example in [_exec, _wexec Functions](../../c-runtime-library/exec-wexec-functions.md)."},{"content":".NET Framework Equivalent","pos":[4057,4082]},{"content":"System::Diagnostics::Process Class","pos":[4093,4127]},{"content":"System::Diagnostics::ProcessStartInfo Class","pos":[4213,4256]},{"content":"See Also","pos":[4349,4357]},{"content":"Process and Environment Control","pos":[4362,4393]},{"content":"_exec, _wexec Functions","pos":[4460,4483]},{"content":"abort","pos":[4539,4544]},{"content":"atexit","pos":[4595,4601]},{"content":"exit, _Exit, _exit","pos":[4653,4671]},{"content":"_onexit, _onexit_m","pos":[4731,4749]},{"content":"_spawn, _wspawn Functions","pos":[4810,4835]},{"content":"system, _wsystem","pos":[4893,4909]}],"content":"---\ntitle: \"_execlpe, _wexeclpe | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_execlpe\"\n  - \"_wexeclpe\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-process-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_wexeclpe\"\n  - \"execlpe\"\n  - \"wexeclpe\"\n  - \"_execlpe\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"wexeclpe function\"\n  - \"_wexeclpe function\"\n  - \"_execlpe function\"\n  - \"execlpe function\"\nms.assetid: 07b861da-3e7e-4f1d-bb80-ad69b55e5162\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _execlpe, _wexeclpe\nLoads and executes new child processes.  \n  \n> [!IMPORTANT]\n>  This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).  \n  \n## Syntax  \n  \n```  \nintptr_t _execlpe(   \n   const char *cmdname,  \n   const char *arg0,  \n   ... const char *argn,  \n   NULL,  \n   const char *const *envp   \n);  \nintptr_t _wexeclpe(   \n   const wchar_t *cmdname,  \n   const wchar_t *arg0,  \n   ... const wchar_t *argn,  \n   NULL,  \n   const wchar_t *const *envp   \n);  \n```  \n  \n#### Parameters  \n `cmdname`  \n Path of the file to execute.  \n  \n `arg0`, `...``argn`  \n List of pointers to parameters.  \n  \n `envp`  \n Array of pointers to environment settings.  \n  \n## Return Value  \n If successful, these functions do not return to the calling process. A return value of –1 indicates an error, in which case the `errno` global variable is set.  \n  \n|`errno` value|Description|  \n|-------------------|-----------------|  \n|`E2BIG`|The space required for the arguments and environment settings exceeds 32 KB.|  \n|`EACCES`|The specified file has a locking or sharing violation.|  \n|`EINVAL`|Invalid parameter.|  \n|`EMFILE`|Too many files open (the specified file must be opened to determine whether it is executable).|  \n|`ENOENT`|The file or path not found.|  \n|`ENOEXEC`|The specified file is not executable or has an invalid executable-file format.|  \n|`ENOMEM`|Not enough memory is available to execute the new process; the available memory has been corrupted; or an invalid block exists, indicating that the calling process was not allocated properly.|  \n  \n For more information about these and other return codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n Each of these functions loads and executes a new process, passing each command-line argument as a separate parameter and also passing an array of pointers to environment settings. These functions use the `PATH` environment variable to find the file to execute.  \n  \n The `_execlpe` functions validate their parameters. If either `cmdname` or `arg0` is a null pointers or empty string, these functions invoke the invalid parameter handler as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions set `errno` to `EINVAL` and return -1. No new process is launched.  \n  \n## Requirements  \n  \n|Function|Required header|Optional header|  \n|--------------|---------------------|---------------------|  \n|`_execlpe`|\\<process.h>|\\<errno.h>|  \n|`_wexeclpe`|\\<process.h> or \\<wchar.h>|\\<errno.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n See the example in [_exec, _wexec Functions](../../c-runtime-library/exec-wexec-functions.md).  \n  \n## .NET Framework Equivalent  \n  \n-   [System::Diagnostics::Process Class](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.aspx)  \n  \n-   [System::Diagnostics::ProcessStartInfo Class](https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.aspx)  \n  \n## See Also  \n [Process and Environment Control](../../c-runtime-library/process-and-environment-control.md)   \n [_exec, _wexec Functions](../../c-runtime-library/exec-wexec-functions.md)   \n [abort](../../c-runtime-library/reference/abort.md)   \n [atexit](../../c-runtime-library/reference/atexit.md)   \n [exit, _Exit, _exit](../../c-runtime-library/reference/exit-exit-exit.md)   \n [_onexit, _onexit_m](../../c-runtime-library/reference/onexit-onexit-m.md)   \n [_spawn, _wspawn Functions](../../c-runtime-library/spawn-wspawn-functions.md)   \n [system, _wsystem](../../c-runtime-library/reference/system-wsystem.md)"}