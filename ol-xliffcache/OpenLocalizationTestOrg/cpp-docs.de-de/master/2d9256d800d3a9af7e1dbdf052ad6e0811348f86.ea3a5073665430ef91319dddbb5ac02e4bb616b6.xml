{"nodes":[{"pos":[12,65],"content":"negative_binomial_distribution Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"negative_binomial_distribution Class | Microsoft Docs","pos":[0,53]}]},{"pos":[891,927],"content":"negative_binomial_distribution Class","linkify":"negative_binomial_distribution Class","nodes":[{"content":"negative_binomial_distribution Class","pos":[0,36]}]},{"content":"Generates a negative binomial distribution.","pos":[928,971]},{"pos":[980,986],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[992,1108],"content":"class negative_binomial_distribution { public: // types typedef IntType result_type; struct param_type;","source":"class negative_binomial_distribution\n{\npublic:\n    // types \n    typedef IntType result_type;\n    struct param_type;"},{"content":"};","pos":[1723,1725]},{"pos":[1734,1744],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The integer result type, defaults to <ph id=\"ph1\">`int`</ph>.","pos":[1761,1804],"source":" The integer result type, defaults to `int`."},{"content":"For possible types, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","pos":[1805,1872],"source":" For possible types, see [\\<random>](../standard-library/random.md)."},{"pos":[1881,1888],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template class describes a distribution that produces values of a user-specified integral type, or type <ph id=\"ph1\">`int`</ph> if none is provided, distributed according to the Negative Binomial Distribution discrete probability function.","pos":[1892,2117],"source":"The template class describes a distribution that produces values of a user-specified integral type, or type `int` if none is provided, distributed according to the Negative Binomial Distribution discrete probability function."},{"content":"The following table links to articles about individual members.","pos":[2118,2181]},{"pos":[2205,2334],"content":"<bpt id=\"p1\">[</bpt>negative_binomial_distribution::negative_binomial_distribution<ept id=\"p1\">](#negative_binomial_distribution__negative_binomial_distribution)</ept>","source":"[negative_binomial_distribution::negative_binomial_distribution](#negative_binomial_distribution__negative_binomial_distribution)"},{"pos":[2496,2585],"content":"<bpt id=\"p1\">[</bpt>negative_binomial_distribution::param_type<ept id=\"p1\">](#negative_binomial_distribution__param_type)</ept>","source":"[negative_binomial_distribution::param_type](#negative_binomial_distribution__param_type)"},{"pos":[2593,2713],"content":"The property members <ph id=\"ph1\">`k()`</ph> and <ph id=\"ph2\">`p()`</ph> return the currently stored distribution parameter values <ph id=\"ph3\">`k`</ph> and <ph id=\"ph4\">`p`</ph> respectively.","source":"The property members `k()` and `p()` return the currently stored distribution parameter values `k` and `p` respectively."},{"pos":[2720,2834],"content":"For more information about distribution classes and their members, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","source":"For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md)."},{"pos":[2841,3051],"content":"For detailed information about the negative binomial distribution discrete probability function, see the Wolfram MathWorld article <bpt id=\"p1\">[</bpt>Negative Binomial Distribution<ept id=\"p1\">](http://go.microsoft.com/fwlink/LinkId=400516)</ept>.","source":"For detailed information about the negative binomial distribution discrete probability function, see the Wolfram MathWorld article [Negative Binomial Distribution](http://go.microsoft.com/fwlink/LinkId=400516)."},{"pos":[3060,3067],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4652,4658],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"content":"First run:","pos":[4662,4672]},{"content":"Second run:","pos":[5147,5158]},{"pos":[5898,5910],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[5914,5935],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>random&gt;","source":"**Header:** \\<random>"},{"pos":[5942,5960],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[5970,6111],"content":"<bpt id=\"p1\">&lt;a name=\"negative_binomial_distribution__negative_binomial_distribution\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  negative_binomial_distribution::negative_binomial_distribution","linkify":"<a name=\"negative_binomial_distribution__negative_binomial_distribution\"></a>  negative_binomial_distribution::negative_binomial_distribution","source":"<a name=\"negative_binomial_distribution__negative_binomial_distribution\"></a>  negative_binomial_distribution::negative_binomial_distribution"},{"content":"Constructs the distribution.","pos":[6115,6143]},{"pos":[6308,6318],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`k`</ph> distribution parameter.","pos":[6329,6360],"source":" The `k` distribution parameter."},{"content":"The <ph id=\"ph1\">`p`</ph> distribution parameter.","pos":[6374,6405],"source":" The `p` distribution parameter."},{"content":"The parameter structure used to construct the distribution.","pos":[6422,6481]},{"pos":[6491,6498],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6502,6549],"content":"<bpt id=\"p1\">**</bpt>Precondition:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`0.0 &lt; k`</ph> and <ph id=\"ph2\">`0.0 &lt; p ≤ 1.0`</ph>","source":"**Precondition:** `0.0 < k` and `0.0 < p ≤ 1.0`"},{"pos":[6556,6689],"content":"The first constructor constructs an object whose stored <ph id=\"ph1\">`p`</ph> value holds the value <ph id=\"ph2\">`p`</ph> and whose stored <ph id=\"ph3\">`k`</ph> value holds the value <ph id=\"ph4\">`k`</ph>.","source":"The first constructor constructs an object whose stored `p` value holds the value `p` and whose stored `k` value holds the value `k`."},{"content":"The second constructor constructs an object whose stored parameters are initialized from <ph id=\"ph1\">`parm`</ph>.","pos":[6696,6792],"source":"The second constructor constructs an object whose stored parameters are initialized from `parm`."},{"content":"You can obtain and set the current parameters of an existing distribution by calling the <ph id=\"ph1\">`param()`</ph> member function.","pos":[6793,6908],"source":" You can obtain and set the current parameters of an existing distribution by calling the `param()` member function."},{"pos":[6918,7019],"content":"<bpt id=\"p1\">&lt;a name=\"negative_binomial_distribution__param_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  negative_binomial_distribution::param_type","linkify":"<a name=\"negative_binomial_distribution__param_type\"></a>  negative_binomial_distribution::param_type","source":"<a name=\"negative_binomial_distribution__param_type\"></a>  negative_binomial_distribution::param_type"},{"content":"Stores the parameters of the distribution.","pos":[7023,7065]},{"content":"struct param_type {","pos":[7071,7090]},{"content":"typedef negative_binomial_distribution<ph id=\"ph1\">`&lt;`</ph>IntType&gt; distribution_type;","pos":[7096,7164],"source":"   typedef negative_binomial_distribution`<`IntType> distribution_type;"},{"content":"param_type(IntType k = 1, double p = 0.5); IntType k() const; double p() const; .....","pos":[7170,7264],"source":"   param_type(IntType k = 1, double p = 0.5);\n   IntType k() const;\n   double p() const;\n   ....."},{"content":"bool operator==(const param_type&amp; right) const; bool operator!=(const param_type&amp; right) const; };","pos":[7270,7374],"source":"   bool operator==(const param_type& right) const;\n   bool operator!=(const param_type& right) const;\n   };"},{"pos":[7384,7394],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[7398,7515],"content":"See parent topic <bpt id=\"p1\">[</bpt>negative_binomial_distribution Class<ept id=\"p1\">](../standard-library/negative-binomial-distribution-class.md)</ept>.","source":"See parent topic [negative_binomial_distribution Class](../standard-library/negative-binomial-distribution-class.md)."},{"pos":[7525,7532],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7536,7583],"content":"<bpt id=\"p1\">**</bpt>Precondition:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`0.0 &lt; k`</ph> and <ph id=\"ph2\">`0.0 &lt; p ≤ 1.0`</ph>","source":"**Precondition:** `0.0 < k` and `0.0 < p ≤ 1.0`"},{"pos":[7590,7833],"content":"This structure can be passed to the distribution's class constructor at instantiation, to the <ph id=\"ph1\">`param()`</ph> member function to set the stored parameters of an existing distribution, and to <ph id=\"ph2\">`operator()`</ph> to be used in place of the stored parameters.","source":"This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters."},{"pos":[7842,7850],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[7854,7896],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>","source":"[\\<random>](../standard-library/random.md)"}],"content":"---\ntitle: \"negative_binomial_distribution Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"tr1::negative_binomial_distribution\"\n  - \"tr1.negative_binomial_distribution\"\n  - \"std.tr1.negative_binomial_distribution\"\n  - \"random/std::tr1::negative_binomial_distribution\"\n  - \"std::tr1::negative_binomial_distribution\"\n  - \"negative_binomial_distribution\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"negative_binomial_distribution class\"\nms.assetid: 7f5f0967-7fdd-4578-99d4-88f292b4fe9c\ncaps.latest.revision: 15\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# negative_binomial_distribution Class\nGenerates a negative binomial distribution.  \n  \n## Syntax  \n  \nclass negative_binomial_distribution\n{\npublic:\n    // types \n    typedef IntType result_type;\n    struct param_type;   \n    \n    // constructor and reset functions\n    explicit negative_binomial_distribution(IntType k = 1, double p = 0.5);\n    explicit negative_binomial_distribution(const param_type& parm);\n    void reset();\n    \n    // generating functions \n    template `<`class URNG>  \n    result_type operator()(URNG& gen);\n    template `<`class URNG>\n    result_type operator()(URNG& gen, const param_type& parm);\n    \n    // property functions     \n    IntType k() const;\n    double p() const;\n    param_type param() const;\n    void param(const param_type& parm);\n    result_type min() const;\n    result_type max() const; \n};\n  \n#### Parameters  \n `IntType`  \n The integer result type, defaults to `int`. For possible types, see [\\<random>](../standard-library/random.md).  \n  \n## Remarks  \n The template class describes a distribution that produces values of a user-specified integral type, or type `int` if none is provided, distributed according to the Negative Binomial Distribution discrete probability function. The following table links to articles about individual members.  \n  \n||||  \n|-|-|-|  \n|[negative_binomial_distribution::negative_binomial_distribution](#negative_binomial_distribution__negative_binomial_distribution)|`negative_binomial_distribution::k`|`negative_binomial_distribution::param`|  \n|`negative_binomial_distribution::operator()`|`negative_binomial_distribution::p`|[negative_binomial_distribution::param_type](#negative_binomial_distribution__param_type)|  \n  \n The property members `k()` and `p()` return the currently stored distribution parameter values `k` and `p` respectively.  \n  \n For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md).  \n  \n For detailed information about the negative binomial distribution discrete probability function, see the Wolfram MathWorld article [Negative Binomial Distribution](http://go.microsoft.com/fwlink/LinkId=400516).  \n  \n## Example  \n  \n```cpp  \n// compile with: /EHsc /W4  \n#include <random>   \n#include <iostream>  \n#include <iomanip>  \n#include <string>  \n#include <map>  \n  \nvoid test(const int k, const double p, const int& s) {  \n  \n    // uncomment to use a non-deterministic seed  \n    //    std::random_device rd;  \n    //    std::mt19937 gen(rd());  \n    std::mt19937 gen(1729);  \n  \n    std::negative_binomial_distribution<> distr(k, p);  \n  \n    std::cout << std::endl;  \n    std::cout << \"k == \" << distr.k() << std::endl;  \n    std::cout << \"p == \" << distr.p() << std::endl;  \n  \n    // generate the distribution as a histogram  \n    std::map<int, int> histogram;  \n    for (int i = 0; i < s; ++i) {  \n        ++histogram[distr(gen)];  \n    }  \n  \n    // print results  \n    std::cout << \"Histogram for \" << s << \" samples:\" << std::endl;  \n    for (const auto& elem : histogram) {  \n        std::cout << std::setw(5) << elem.first << ' ' << std::string(elem.second, ':') << std::endl;  \n    }  \n    std::cout << std::endl;  \n}  \n  \nint main()  \n{  \n    int    k_dist = 1;  \n    double p_dist = 0.5;  \n    int    samples = 100;  \n  \n    std::cout << \"Use CTRL-Z to bypass data entry and run using default values.\" << std::endl;  \n    std::cout << \"Enter an integer value for k distribution (where 0 < k): \";  \n    std::cin >> k_dist;  \n    std::cout << \"Enter a double value for p distribution (where 0.0 < p <= 1.0): \";  \n    std::cin >> p_dist;  \n    std::cout << \"Enter an integer value for a sample count: \";  \n    std::cin >> samples;  \n  \n    test(k_dist, p_dist, samples);  \n}  \n  \n```  \n  \n## Output  \n First run:  \n  \n```  \nUse CTRL-Z to bypass data entry and run using default values.  \nEnter an integer value for k distribution (where 0 `<` k): 1  \nEnter a double value for p distribution (where 0.0 `<`p `<`= 1.0): .5  \nEnter an integer value for a sample count: 100  \n \nk == 1  \np == 0.5  \nHistogram for 100 samples:  \n    0 :::::::::::::::::::::::::::::::::::::::::::  \n    1 ::::::::::::::::::::::::::::::::  \n    2 ::::::::::::  \n    3 :::::::  \n    4 ::::  \n    5 ::  \n```  \n  \n Second run:  \n  \n```  \nUse CTRL-Z to bypass data entry and run using default values.  \nEnter an integer value for k distribution (where 0 `<` k): 100  \nEnter a double value for p distribution (where 0.0 `<` p <= 1.0): .667  \nEnter an integer value for a sample count: 100  \n \nk == 100  \np == 0.667  \nHistogram for 100 samples:  \n    31 ::  \n    32 :  \n    33 ::  \n    34 :  \n    35 ::  \n    37 ::  \n    38 :  \n    39 :  \n    40 ::  \n    41 :::  \n    42 :::  \n    43 :::::  \n    44 :::::  \n    45 ::::  \n    46 ::::::  \n    47 ::::::::  \n    48 :::  \n    49 :::  \n    50 :::::::::  \n    51 :::::::  \n    52 ::  \n    53 :::  \n    54 :::::  \n    56 ::::  \n    58 :  \n    59 :::::  \n    60 ::  \n    61 :  \n    62 ::  \n    64 :  \n    69 ::::  \n```  \n  \n## Requirements  \n **Header:** \\<random>  \n  \n **Namespace:** std  \n  \n##  <a name=\"negative_binomial_distribution__negative_binomial_distribution\"></a>  negative_binomial_distribution::negative_binomial_distribution  \n Constructs the distribution.  \n  \n```  \nexplicit negative_binomial_distribution(IntType k = 1, double p = 0.5);\n\n \nexplicit negative_binomial_distribution(const param_type& parm);\n```  \n  \n### Parameters  \n `k`  \n The `k` distribution parameter.  \n  \n `p`  \n The `p` distribution parameter.  \n  \n `parm`  \n The parameter structure used to construct the distribution.  \n  \n### Remarks  \n **Precondition:** `0.0 < k` and `0.0 < p ≤ 1.0`  \n  \n The first constructor constructs an object whose stored `p` value holds the value `p` and whose stored `k` value holds the value `k`.  \n  \n The second constructor constructs an object whose stored parameters are initialized from `parm`. You can obtain and set the current parameters of an existing distribution by calling the `param()` member function.  \n  \n##  <a name=\"negative_binomial_distribution__param_type\"></a>  negative_binomial_distribution::param_type  \n Stores the parameters of the distribution.  \n  \nstruct param_type {  \n   typedef negative_binomial_distribution`<`IntType> distribution_type;  \n   param_type(IntType k = 1, double p = 0.5);\n   IntType k() const;\n   double p() const;\n   .....  \n   bool operator==(const param_type& right) const;\n   bool operator!=(const param_type& right) const;\n   };  \n  \n### Parameters  \n See parent topic [negative_binomial_distribution Class](../standard-library/negative-binomial-distribution-class.md).  \n  \n### Remarks  \n **Precondition:** `0.0 < k` and `0.0 < p ≤ 1.0`  \n  \n This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters.  \n  \n## See Also  \n [\\<random>](../standard-library/random.md)\n"}