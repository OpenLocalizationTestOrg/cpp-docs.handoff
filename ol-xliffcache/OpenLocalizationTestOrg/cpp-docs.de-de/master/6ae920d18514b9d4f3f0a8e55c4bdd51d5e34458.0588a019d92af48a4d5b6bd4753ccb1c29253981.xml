{"nodes":[{"pos":[12,47],"content":"CPaneDivider Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CPaneDivider Class | Microsoft Docs","pos":[0,35]}]},{"content":"CPaneDivider Class","pos":[610,628]},{"pos":[735,884],"content":"The <ph id=\"ph1\">`CPaneDivider`</ph> class divides two panes, divides two groups of panes, or separates a group of panes from the client area of the main frame window.","source":"The `CPaneDivider` class divides two panes, divides two groups of panes, or separates a group of panes from the client area of the main frame window."},{"content":"Syntax","pos":[893,899]},{"content":"Members","pos":[963,970]},{"content":"Public Constructors","pos":[980,999]},{"content":"Name","pos":[1006,1010]},{"content":"Description","pos":[1011,1022]},{"content":"CPaneDivider::CPaneDivider","pos":[1061,1087]},{"content":"Public Methods","pos":[1129,1143]},{"content":"Name","pos":[1150,1154]},{"content":"Description","pos":[1155,1166]},{"content":"CPaneDivider::AddPaneContainer","pos":[1205,1235]},{"content":"CPaneDivider::AddPane","pos":[1276,1297]},{"content":"CPaneDivider::AddRecentPane","pos":[1329,1356]},{"content":"CPaneDivider::CalcExpectedDockedRect","pos":[1394,1430]},{"content":"CPaneDivider::CalcFixedLayout","pos":[1477,1506]},{"pos":[1540,1648],"content":"(Overrides <bpt id=\"p1\">[</bpt>CBasePane::CalcFixedLayout<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__calcfixedlayout)</ept>.)","source":"(Overrides [CBasePane::CalcFixedLayout](../../mfc/reference/cbasepane-class.md#cbasepane__calcfixedlayout).)"},{"content":"CPaneDivider::CheckVisibility","pos":[1654,1683]},{"content":"CPaneDivider::CreateEx","pos":[1723,1745]},{"pos":[1772,1866],"content":"(Overrides <bpt id=\"p1\">[</bpt>CBasePane::CreateEx<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__createex)</ept>.)","source":"(Overrides [CBasePane::CreateEx](../../mfc/reference/cbasepane-class.md#cbasepane__createex).)"},{"content":"CPaneDivider::DoesAllowDynInsertBefore","pos":[1872,1910]},{"pos":[1953,2079],"content":"(Overrides <bpt id=\"p1\">[</bpt>CBasePane::DoesAllowDynInsertBefore<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__doesallowdyninsertbefore)</ept>.)","source":"(Overrides [CBasePane::DoesAllowDynInsertBefore](../../mfc/reference/cbasepane-class.md#cbasepane__doesallowdyninsertbefore).)"},{"content":"CPaneDivider::DoesContainFloatingPane","pos":[2085,2122]},{"content":"CPaneDivider::FindPaneContainer","pos":[2170,2201]},{"content":"CPaneDivider::FindTabbedPane","pos":[2243,2271]},{"content":"CPaneDivider::GetDefaultWidth","pos":[2310,2339]},{"content":"CPaneDivider::GetFirstPane","pos":[2379,2405]},{"content":"CPaneDivider::GetPaneDividerStyle","pos":[2442,2475]},{"content":"CPaneDivider::GetRootContainerRect","pos":[2519,2553]},{"content":"CPaneDivider::GetWidth","pos":[2598,2620]},{"content":"CPaneDivider::Init","pos":[2653,2671]},{"content":"CPaneDivider::InsertPane","pos":[2700,2724]},{"content":"CPaneDivider::IsAutoHideMode","pos":[2759,2787]},{"pos":[2820,2926],"content":"(Overrides <bpt id=\"p1\">[</bpt>CBasePane::IsAutoHideMode<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__isautohidemode)</ept>.)","source":"(Overrides [CBasePane::IsAutoHideMode](../../mfc/reference/cbasepane-class.md#cbasepane__isautohidemode).)"},{"content":"CPaneDivider::IsDefault","pos":[2932,2955]},{"content":"CPaneDivider::IsHorizontal","pos":[2989,3015]},{"pos":[3046,3148],"content":"(Overrides <bpt id=\"p1\">[</bpt>CBasePane::IsHorizontal<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__ishorizontal)</ept>.)","source":"(Overrides [CBasePane::IsHorizontal](../../mfc/reference/cbasepane-class.md#cbasepane__ishorizontal).)"},{"content":"CPaneDivider::Move","pos":[3154,3172]},{"content":"CPaneDivider::NotifyAboutRelease","pos":[3201,3233]},{"content":"CPaneDivider::OnShowPane","pos":[3276,3300]},{"content":"CPaneDivider::ReleaseEmptyPaneContainers","pos":[3335,3375]},{"content":"CPaneDivider::RemovePane","pos":[3426,3450]},{"content":"CPaneDivider::ReplacePane","pos":[3485,3510]},{"content":"CPaneDivider::RepositionPanes","pos":[3546,3575]},{"content":"CPaneDivider::Serialize","pos":[3615,3638]},{"pos":[3666,3701],"content":"(Overrides <ph id=\"ph1\">`CBasePane::Serialize`</ph>.)","source":"(Overrides `CBasePane::Serialize`.)"},{"content":"CPaneDivider::SetAutoHideMode","pos":[3707,3736]},{"content":"CPaneDivider::SetPaneContainerManager","pos":[3776,3813]},{"content":"CPaneDivider::ShowWindow","pos":[3861,3885]},{"content":"CPaneDivider::StoreRecentDockSiteInfo","pos":[3920,3957]},{"content":"CPaneDivider::StoreRecentTabRelatedInfo","pos":[4005,4044]},{"content":"Public Methods","pos":[4099,4113]},{"content":"Name","pos":[4120,4124]},{"content":"Description","pos":[4125,4136]},{"content":"CPaneDivider::GetPanes","pos":[4175,4197]},{"content":"Returns the list of panes that reside in the <bpt id=\"p1\">[</bpt>CPaneContainer Class<ept id=\"p1\">](../../mfc/reference/cpanecontainer-class.md)</ept>.","pos":[4224,4337],"source":"Returns the list of panes that reside in the [CPaneContainer Class](../../mfc/reference/cpanecontainer-class.md)."},{"content":"This method should be called only for default pane dividers.","pos":[4338,4398]},{"content":"CPaneDivider::GetPaneDividers","pos":[4404,4433]},{"content":"Returns the list of pane dividers that reside in the <bpt id=\"p1\">[</bpt>CPaneContainer Class<ept id=\"p1\">](../../mfc/reference/cpanecontainer-class.md)</ept>.","pos":[4467,4588],"source":"Returns the list of pane dividers that reside in the [CPaneContainer Class](../../mfc/reference/cpanecontainer-class.md)."},{"content":"This method should be called only for default pane dividers.","pos":[4589,4649]},{"content":"Data Members","pos":[4660,4672]},{"content":"Name","pos":[4679,4683]},{"content":"Description","pos":[4684,4695]},{"content":"CPaneDivider::m_nDefaultWidth","pos":[4734,4763]},{"content":"Specifies the default width in pixels of all pane dividers in the application.","pos":[4797,4875]},{"content":"CPaneDivider::m_pSliderRTC","pos":[4881,4907]},{"pos":[4938,5025],"content":"Holds a pointer to the runtime class information about a <ph id=\"ph1\">`CPaneDivider`</ph>-derived object.","source":"Holds a pointer to the runtime class information about a `CPaneDivider`-derived object."},{"content":"Remarks","pos":[5035,5042]},{"pos":[5046,5127],"content":"The framework creates <ph id=\"ph1\">`CPaneDivider`</ph> objects automatically when a pane is docked.","source":"The framework creates `CPaneDivider` objects automatically when a pane is docked."},{"content":"There are two types of pane dividers:","pos":[5134,5171]},{"content":"a default pane divider is created when a group of panes is docked to a side of the main frame window.","pos":[5181,5282]},{"content":"The default pane divider holds a pointer to the <bpt id=\"p1\">[</bpt>CPaneContainerManager Class<ept id=\"p1\">](../../mfc/reference/cpanecontainermanager-class.md)</ept> and redirects most operations on the group of panes (such as resizing a pane, or docking another pane or container) to the container manager.","pos":[5283,5554],"source":" The default pane divider holds a pointer to the [CPaneContainerManager Class](../../mfc/reference/cpanecontainermanager-class.md) and redirects most operations on the group of panes (such as resizing a pane, or docking another pane or container) to the container manager."},{"content":"Each docking pane maintains a pointer to its default pane divider.","pos":[5555,5621]},{"content":"A regular pane divider just divides two panes in a container.","pos":[5631,5692]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CPaneContainer Class<ept id=\"p1\">](../../mfc/reference/cpanecontainer-class.md)</ept>.","pos":[5693,5787],"source":" For more information, see [CPaneContainer Class](../../mfc/reference/cpanecontainer-class.md)."},{"content":"Example","pos":[5796,5803]},{"content":"The following example demonstrates how to get a <ph id=\"ph1\">`CPaneDivider`</ph> object from a <ph id=\"ph2\">`CWorkspaceBar`</ph> object.","pos":[5807,5907],"source":"The following example demonstrates how to get a `CPaneDivider` object from a `CWorkspaceBar` object."},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>MDI Tabs Demo sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[5908,5993],"source":" This code snippet is part of the [MDI Tabs Demo sample](../../visual-cpp-samples.md)."},{"pos":[6011,6032],"content":"NVC_MFC_MDITabsDemo#5"},{"content":"Inheritance Hierarchy","pos":[6105,6126]},{"pos":[6130,6273],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept> <bpt id=\"p2\">[</bpt>CCmdTarget<ept id=\"p2\">](../../mfc/reference/ccmdtarget-class.md)</ept> <bpt id=\"p3\">[</bpt>CWnd<ept id=\"p3\">](../../mfc/reference/cwnd-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md) [CCmdTarget](../../mfc/reference/ccmdtarget-class.md) [CWnd](../../mfc/reference/cwnd-class.md)"},{"pos":[6280,6389],"content":"<bpt id=\"p1\">[</bpt>CBasePane<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md)</ept> <bpt id=\"p2\">[</bpt>CPaneDivider<ept id=\"p2\">](../../mfc/reference/cpanedivider-class.md)</ept>","source":"[CBasePane](../../mfc/reference/cbasepane-class.md) [CPaneDivider](../../mfc/reference/cpanedivider-class.md)"},{"content":"Requirements","pos":[6398,6410]},{"pos":[6414,6442],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxPaneDivider.h","source":"**Header:** afxPaneDivider.h"},{"pos":[6498,6527],"content":"CPaneDivider::SetAutoHideMode"},{"content":"Parameters","pos":[6689,6699]},{"pos":[6703,6707],"content":"[in]"},{"content":"Remarks","pos":[6725,6732]},{"pos":[6796,6833],"content":"CPaneDivider::SetPaneContainerManager"},{"content":"Parameters","pos":[7017,7027]},{"pos":[7031,7035],"content":"[in]"},{"content":"Remarks","pos":[7049,7056]},{"pos":[7104,7125],"content":"CPaneDivider::AddPane"},{"content":"Parameters","pos":[7296,7306]},{"pos":[7310,7314],"content":"[in]"},{"content":"Remarks","pos":[7331,7338]},{"pos":[7395,7425],"content":"CPaneDivider::AddPaneContainer"},{"content":"Parameters","pos":[7797,7807]},{"content":"[in]","pos":[7811,7815]},{"content":"[in]","pos":[7841,7845]},{"content":"[in]","pos":[7862,7866]},{"content":"[in]","pos":[7883,7887]},{"content":"Return Value","pos":[7911,7923]},{"content":"Remarks","pos":[7933,7940]},{"pos":[7994,8021],"content":"CPaneDivider::AddRecentPane"},{"content":"Parameters","pos":[8208,8218]},{"pos":[8222,8226],"content":"[in]"},{"content":"Return Value","pos":[8243,8255]},{"content":"Remarks","pos":[8265,8272]},{"pos":[8335,8371],"content":"CPaneDivider::CalcExpectedDockedRect"},{"content":"Parameters","pos":[8663,8673]},{"content":"[in]","pos":[8677,8681]},{"content":"[in]","pos":[8698,8702]},{"content":"[in]","pos":[8716,8720]},{"content":"[in]","pos":[8737,8741]},{"content":"[in]","pos":[8756,8760]},{"content":"Remarks","pos":[8784,8791]},{"pos":[8847,8876],"content":"CPaneDivider::CalcFixedLayout"},{"content":"Parameters","pos":[9073,9083]},{"content":"[in]","pos":[9087,9091]},{"content":"[in]","pos":[9106,9110]},{"content":"Return Value","pos":[9128,9140]},{"content":"Remarks","pos":[9150,9157]},{"pos":[9213,9242],"content":"CPaneDivider::CheckVisibility"},{"content":"Return Value","pos":[9402,9414]},{"content":"Remarks","pos":[9424,9431]},{"pos":[9484,9510],"content":"CPaneDivider::CPaneDivider"},{"content":"Parameters","pos":[9725,9735]},{"content":"[in]","pos":[9739,9743]},{"content":"[in]","pos":[9764,9768]},{"content":"Return Value","pos":[9788,9800]},{"content":"Remarks","pos":[9810,9817]},{"pos":[9866,9888],"content":"CPaneDivider::CreateEx"},{"content":"Parameters","pos":[10178,10188]},{"content":"[in]","pos":[10192,10196]},{"content":"[in]","pos":[10212,10216]},{"content":"[in]","pos":[10230,10234]},{"content":"[in]","pos":[10245,10249]},{"content":"[in]","pos":[10266,10270]},{"content":"[in]","pos":[10280,10284]},{"content":"Return Value","pos":[10305,10317]},{"content":"Remarks","pos":[10327,10334]},{"pos":[10399,10437],"content":"CPaneDivider::DoesAllowDynInsertBefore"},{"content":"Return Value","pos":[10615,10627]},{"content":"Remarks","pos":[10637,10644]},{"pos":[10708,10745],"content":"CPaneDivider::DoesContainFloatingPane"},{"content":"Return Value","pos":[10913,10925]},{"content":"Remarks","pos":[10935,10942]},{"pos":[11000,11031],"content":"CPaneDivider::FindPaneContainer"},{"content":"Parameters","pos":[11242,11252]},{"content":"[in]","pos":[11256,11260]},{"content":"[in]","pos":[11271,11275]},{"content":"Return Value","pos":[11296,11308]},{"content":"Remarks","pos":[11318,11325]},{"pos":[11380,11408],"content":"CPaneDivider::FindTabbedPane"},{"content":"Parameters","pos":[11577,11587]},{"pos":[11591,11595],"content":"[in]"},{"content":"Return Value","pos":[11611,11623]},{"content":"Remarks","pos":[11633,11640]},{"pos":[11696,11725],"content":"CPaneDivider::GetDefaultWidth"},{"content":"Return Value","pos":[11893,11905]},{"content":"Remarks","pos":[11915,11922]},{"pos":[11975,12001],"content":"CPaneDivider::GetFirstPane"},{"content":"Return Value","pos":[12171,12183]},{"content":"Remarks","pos":[12193,12200]},{"pos":[12256,12285],"content":"CPaneDivider::GetPaneDividers"},{"content":"Returns the list of pane dividers that reside in the <bpt id=\"p1\">[</bpt>CPaneContainer Class<ept id=\"p1\">](../../mfc/reference/cpanecontainer-class.md)</ept>.","pos":[12289,12410],"source":"Returns the list of pane dividers that reside in the [CPaneContainer Class](../../mfc/reference/cpanecontainer-class.md)."},{"content":"This method should be called only for default pane dividers.","pos":[12411,12471]},{"content":"Parameters","pos":[12539,12549]},{"content":"[out]","pos":[12553,12558]},{"content":"Contains the list of pane dividers that reside in the pane container.","pos":[12575,12644]},{"content":"Remarks","pos":[12654,12661]},{"content":"This method should be called for default pane dividers only.","pos":[12665,12725]},{"content":"A default pane divider is a divider that resizes the entire pane container.","pos":[12726,12801]},{"pos":[12861,12894],"content":"CPaneDivider::GetPaneDividerStyle"},{"content":"Return Value","pos":[13060,13072]},{"content":"Remarks","pos":[13082,13089]},{"pos":[13138,13160],"content":"CPaneDivider::GetPanes"},{"content":"Returns the list of panes that reside in the <bpt id=\"p1\">[</bpt>CPaneContainer Class<ept id=\"p1\">](../../mfc/reference/cpanecontainer-class.md)</ept>.","pos":[13164,13277],"source":"Returns the list of panes that reside in the [CPaneContainer Class](../../mfc/reference/cpanecontainer-class.md)."},{"content":"This method should be called only to retrieve default pane dividers.","pos":[13278,13346]},{"content":"Parameters","pos":[13404,13414]},{"content":"[out]","pos":[13418,13423]},{"content":"Contains the list of panes that reside in the pane container.","pos":[13437,13498]},{"content":"Remarks","pos":[13508,13515]},{"content":"This method should be called for default pane dividers only.","pos":[13519,13579]},{"content":"A default pane divider is a divider that resizes the entire pane container.","pos":[13580,13655]},{"pos":[13716,13750],"content":"CPaneDivider::GetRootContainerRect"},{"content":"Return Value","pos":[13908,13920]},{"content":"Remarks","pos":[13930,13937]},{"pos":[13986,14008],"content":"CPaneDivider::GetWidth"},{"content":"Return Value","pos":[14161,14173]},{"content":"Remarks","pos":[14183,14190]},{"pos":[14235,14253],"content":"CPaneDivider::Init"},{"content":"Parameters","pos":[14454,14464]},{"content":"[in]","pos":[14468,14472]},{"content":"[in]","pos":[14493,14497]},{"content":"Remarks","pos":[14517,14524]},{"pos":[14575,14599],"content":"CPaneDivider::InsertPane"},{"content":"Parameters","pos":[14873,14883]},{"content":"[in]","pos":[14887,14891]},{"content":"[in]","pos":[14910,14914]},{"content":"[in]","pos":[14931,14935]},{"content":"[in]","pos":[14953,14957]},{"content":"Return Value","pos":[14976,14988]},{"content":"Remarks","pos":[14998,15005]},{"pos":[15060,15088],"content":"CPaneDivider::IsAutoHideMode"},{"content":"Return Value","pos":[15248,15260]},{"content":"Remarks","pos":[15270,15277]},{"pos":[15327,15350],"content":"CPaneDivider::IsDefault"},{"content":"Return Value","pos":[15505,15517]},{"content":"Remarks","pos":[15527,15534]},{"pos":[15587,15613],"content":"CPaneDivider::IsHorizontal"},{"content":"Return Value","pos":[15771,15783]},{"content":"Remarks","pos":[15793,15800]},{"pos":[15856,15885],"content":"CPaneDivider::m_nDefaultWidth"},{"content":"Specifies the default width, in pixels, of all pane dividers in the application.","pos":[15889,15969]},{"pos":[16075,16093],"content":"CPaneDivider::Move"},{"content":"Parameters","pos":[16296,16306]},{"content":"[in]","pos":[16310,16314]},{"content":"[in]","pos":[16329,16333]},{"content":"Remarks","pos":[16359,16366]},{"pos":[16419,16445],"content":"CPaneDivider::m_pSliderRTC"},{"pos":[16449,16532],"content":"Holds a pointer to runtime class information about a <ph id=\"ph1\">`CPaneDivider`</ph>-derived object.","source":"Holds a pointer to runtime class information about a `CPaneDivider`-derived object."},{"content":"Remarks","pos":[16611,16618]},{"content":"Set this member variable if you create a custom pane divider.","pos":[16622,16683]},{"content":"This enables the framework to create your pane divider when the pane is drawn.","pos":[16684,16762]},{"content":"Example","pos":[16772,16779]},{"pos":[16783,16857],"content":"The following example shows how to set the <ph id=\"ph1\">`m_pSliderRTC`</ph> member variable:","source":"The following example shows how to set the `m_pSliderRTC` member variable:"},{"pos":[17046,17078],"content":"CPaneDivider::NotifyAboutRelease"},{"content":"Remarks","pos":[17241,17248]},{"pos":[17299,17323],"content":"CPaneDivider::OnShowPane"},{"content":"Parameters","pos":[17520,17530]},{"content":"[in]","pos":[17534,17538]},{"content":"[in]","pos":[17549,17553]},{"content":"Remarks","pos":[17571,17578]},{"pos":[17645,17685],"content":"CPaneDivider::ReleaseEmptyPaneContainers"},{"content":"Remarks","pos":[17848,17855]},{"pos":[17906,17930],"content":"CPaneDivider::RemovePane"},{"content":"Parameters","pos":[18104,18114]},{"pos":[18118,18122],"content":"[in]"},{"content":"Remarks","pos":[18139,18146]},{"pos":[18198,18223],"content":"CPaneDivider::ReplacePane"},{"content":"Parameters","pos":[18452,18462]},{"content":"[in]","pos":[18466,18470]},{"content":"[in]","pos":[18490,18494]},{"content":"Return Value","pos":[18524,18536]},{"content":"Remarks","pos":[18546,18553]},{"pos":[18609,18638],"content":"CPaneDivider::RepositionPanes"},{"content":"Parameters","pos":[18835,18845]},{"content":"[in]","pos":[18849,18853]},{"content":"[in]","pos":[18867,18871]},{"content":"Remarks","pos":[18888,18895]},{"pos":[18945,18968],"content":"CPaneDivider::Serialize"},{"content":"Parameters","pos":[19126,19136]},{"pos":[19140,19144],"content":"[in]"},{"content":"Remarks","pos":[19159,19166]},{"pos":[19217,19241],"content":"CPaneDivider::ShowWindow"},{"content":"Parameters","pos":[19400,19410]},{"pos":[19414,19418],"content":"[in]"},{"content":"Remarks","pos":[19439,19446]},{"pos":[19510,19547],"content":"CPaneDivider::StoreRecentDockSiteInfo"},{"content":"Parameters","pos":[19726,19736]},{"pos":[19740,19744],"content":"[in]"},{"content":"Remarks","pos":[19761,19768]},{"pos":[19834,19873],"content":"CPaneDivider::StoreRecentTabRelatedInfo"},{"content":"Parameters","pos":[20099,20109]},{"content":"[in]","pos":[20113,20117]},{"content":"[in]","pos":[20135,20139]},{"content":"Remarks","pos":[20162,20169]},{"content":"See Also","pos":[20178,20186]},{"content":"Hierarchy Chart","pos":[20191,20206]},{"content":"Classes","pos":[20243,20250]},{"content":"CPaneContainerManager Class","pos":[20293,20320]},{"content":"CPaneContainer Class","pos":[20379,20399]},{"content":"CDockingManager Class","pos":[20451,20472]},{"content":"CBasePane Class","pos":[20525,20540]}],"content":"---\ntitle: \"CPaneDivider Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CPaneDivider\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CPaneDivider class\"\nms.assetid: 8e828a5d-232f-4127-b8e3-7fa45a7a476e\ncaps.latest.revision: 25\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CPaneDivider Class\n[!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n The `CPaneDivider` class divides two panes, divides two groups of panes, or separates a group of panes from the client area of the main frame window.  \n  \n## Syntax  \n  \n```  \nclass CPaneDivider : public CBasePane  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPaneDivider::CPaneDivider](#cpanedivider__cpanedivider)||  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPaneDivider::AddPaneContainer](#cpanedivider__addpanecontainer)||  \n|[CPaneDivider::AddPane](#cpanedivider__addpane)||  \n|[CPaneDivider::AddRecentPane](#cpanedivider__addrecentpane)||  \n|[CPaneDivider::CalcExpectedDockedRect](#cpanedivider__calcexpecteddockedrect)||  \n|[CPaneDivider::CalcFixedLayout](#cpanedivider__calcfixedlayout)|(Overrides [CBasePane::CalcFixedLayout](../../mfc/reference/cbasepane-class.md#cbasepane__calcfixedlayout).)|  \n|[CPaneDivider::CheckVisibility](#cpanedivider__checkvisibility)||  \n|[CPaneDivider::CreateEx](#cpanedivider__createex)|(Overrides [CBasePane::CreateEx](../../mfc/reference/cbasepane-class.md#cbasepane__createex).)|  \n|[CPaneDivider::DoesAllowDynInsertBefore](#cpanedivider__doesallowdyninsertbefore)|(Overrides [CBasePane::DoesAllowDynInsertBefore](../../mfc/reference/cbasepane-class.md#cbasepane__doesallowdyninsertbefore).)|  \n|[CPaneDivider::DoesContainFloatingPane](#cpanedivider__doescontainfloatingpane)||  \n|[CPaneDivider::FindPaneContainer](#cpanedivider__findpanecontainer)||  \n|[CPaneDivider::FindTabbedPane](#cpanedivider__findtabbedpane)||  \n|[CPaneDivider::GetDefaultWidth](#cpanedivider__getdefaultwidth)||  \n|[CPaneDivider::GetFirstPane](#cpanedivider__getfirstpane)||  \n|[CPaneDivider::GetPaneDividerStyle](#cpanedivider__getpanedividerstyle)||  \n|[CPaneDivider::GetRootContainerRect](#cpanedivider__getrootcontainerrect)||  \n|[CPaneDivider::GetWidth](#cpanedivider__getwidth)||  \n|[CPaneDivider::Init](#cpanedivider__init)||  \n|[CPaneDivider::InsertPane](#cpanedivider__insertpane)||  \n|[CPaneDivider::IsAutoHideMode](#cpanedivider__isautohidemode)|(Overrides [CBasePane::IsAutoHideMode](../../mfc/reference/cbasepane-class.md#cbasepane__isautohidemode).)|  \n|[CPaneDivider::IsDefault](#cpanedivider__isdefault)||  \n|[CPaneDivider::IsHorizontal](#cpanedivider__ishorizontal)|(Overrides [CBasePane::IsHorizontal](../../mfc/reference/cbasepane-class.md#cbasepane__ishorizontal).)|  \n|[CPaneDivider::Move](#cpanedivider__move)||  \n|[CPaneDivider::NotifyAboutRelease](#cpanedivider__notifyaboutrelease)||  \n|[CPaneDivider::OnShowPane](#cpanedivider__onshowpane)||  \n|[CPaneDivider::ReleaseEmptyPaneContainers](#cpanedivider__releaseemptypanecontainers)||  \n|[CPaneDivider::RemovePane](#cpanedivider__removepane)||  \n|[CPaneDivider::ReplacePane](#cpanedivider__replacepane)||  \n|[CPaneDivider::RepositionPanes](#cpanedivider__repositionpanes)||  \n|[CPaneDivider::Serialize](#cpanedivider__serialize)|(Overrides `CBasePane::Serialize`.)|  \n|[CPaneDivider::SetAutoHideMode](#cpanedivider__setautohidemode)||  \n|[CPaneDivider::SetPaneContainerManager](#cpanedivider__setpanecontainermanager)||  \n|[CPaneDivider::ShowWindow](#cpanedivider__showwindow)||  \n|[CPaneDivider::StoreRecentDockSiteInfo](#cpanedivider__storerecentdocksiteinfo)||  \n|[CPaneDivider::StoreRecentTabRelatedInfo](#cpanedivider__storerecenttabrelatedinfo)||  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPaneDivider::GetPanes](#cpanedivider__getpanes)|Returns the list of panes that reside in the [CPaneContainer Class](../../mfc/reference/cpanecontainer-class.md). This method should be called only for default pane dividers.|  \n|[CPaneDivider::GetPaneDividers](#cpanedivider__getpanedividers)|Returns the list of pane dividers that reside in the [CPaneContainer Class](../../mfc/reference/cpanecontainer-class.md). This method should be called only for default pane dividers.|  \n  \n### Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPaneDivider::m_nDefaultWidth](#cpanedivider__m_ndefaultwidth)|Specifies the default width in pixels of all pane dividers in the application.|  \n|[CPaneDivider::m_pSliderRTC](#cpanedivider__m_psliderrtc)|Holds a pointer to the runtime class information about a `CPaneDivider`-derived object.|  \n  \n## Remarks  \n The framework creates `CPaneDivider` objects automatically when a pane is docked.  \n  \n There are two types of pane dividers:  \n  \n-   a default pane divider is created when a group of panes is docked to a side of the main frame window. The default pane divider holds a pointer to the [CPaneContainerManager Class](../../mfc/reference/cpanecontainermanager-class.md) and redirects most operations on the group of panes (such as resizing a pane, or docking another pane or container) to the container manager. Each docking pane maintains a pointer to its default pane divider.  \n  \n-   A regular pane divider just divides two panes in a container. For more information, see [CPaneContainer Class](../../mfc/reference/cpanecontainer-class.md).  \n  \n## Example  \n The following example demonstrates how to get a `CPaneDivider` object from a `CWorkspaceBar` object. This code snippet is part of the [MDI Tabs Demo sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_MDITabsDemo#5](../../mfc/reference/codesnippet/cpp/cpanedivider-class_1.cpp)]  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md) [CCmdTarget](../../mfc/reference/ccmdtarget-class.md) [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n [CBasePane](../../mfc/reference/cbasepane-class.md) [CPaneDivider](../../mfc/reference/cpanedivider-class.md)  \n  \n## Requirements  \n **Header:** afxPaneDivider.h  \n  \n##  <a name=\"cpanedivider__setautohidemode\"></a>  CPaneDivider::SetAutoHideMode  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetAutoHideMode(BOOL bMode);\n```  \n  \n### Parameters  \n [in] `bMode`  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__setpanecontainermanager\"></a>  CPaneDivider::SetPaneContainerManager  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetPaneContainerManager(CPaneContainerManager* p);\n```  \n  \n### Parameters  \n [in] `p`  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__addpane\"></a>  CPaneDivider::AddPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void AddPane(CDockablePane* pBar);\n```  \n  \n### Parameters  \n [in] `pBar`  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__addpanecontainer\"></a>  CPaneDivider::AddPaneContainer  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL AddPaneContainer(\n    CPaneContainerManager& barContainerManager,  \n    BOOL bOuterEdge);\n\n \nvirtual BOOL AddPaneContainer(\n    CDockablePane* pTargetBar,  \n    CPaneContainerManager& barContainerManager,  \n    DWORD dwAlignment);\n```  \n  \n### Parameters  \n [in] `barContainerManager`  \n [in] `bOuterEdge`  \n [in] `pTargetBar`  \n [in] `dwAlignment`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__addrecentpane\"></a>  CPaneDivider::AddRecentPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual CDockablePane* AddRecentPane(CDockablePane* pBar);\n```  \n  \n### Parameters  \n [in] `pBar`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__calcexpecteddockedrect\"></a>  CPaneDivider::CalcExpectedDockedRect  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void CalcExpectedDockedRect(\n    CWnd* pWndToDock,  \n    CPoint ptMouse,  \n    CRect& rectResult,  \n    BOOL& bDrawTab,  \n    CDockablePane** ppTargetBar);\n```  \n  \n### Parameters  \n [in] `pWndToDock`  \n [in] `ptMouse`  \n [in] `rectResult`  \n [in] `bDrawTab`  \n [in] `ppTargetBar`  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__calcfixedlayout\"></a>  CPaneDivider::CalcFixedLayout  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual CSize CalcFixedLayout(\n    BOOL bStretch,  \n    BOOL bHorz);\n```  \n  \n### Parameters  \n [in] `bStretch`  \n [in] `bHorz`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__checkvisibility\"></a>  CPaneDivider::CheckVisibility  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL CheckVisibility();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__cpanedivider\"></a>  CPaneDivider::CPaneDivider  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCPaneDivider();\n\n \nCPaneDivider(\n    BOOL bDefaultSlider,  \n    CWnd* pParent = NULL);\n```  \n  \n### Parameters  \n [in] `bDefaultSlider`  \n [in] `pParent`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__createex\"></a>  CPaneDivider::CreateEx  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL CreateEx(\n    DWORD dwStyleEx,  \n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    UINT nID,  \n    CCreateContext* pContext);\n```  \n  \n### Parameters  \n [in] `dwStyleEx`  \n [in] `dwStyle`  \n [in] `rect`  \n [in] `pParentWnd`  \n [in] `nID`  \n [in] `pContext`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__doesallowdyninsertbefore\"></a>  CPaneDivider::DoesAllowDynInsertBefore  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL DoesAllowDynInsertBefore() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__doescontainfloatingpane\"></a>  CPaneDivider::DoesContainFloatingPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL DoesContainFloatingPane();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__findpanecontainer\"></a>  CPaneDivider::FindPaneContainer  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCPaneContainer* FindPaneContainer(\n    CDockablePane* pBar,  \n    BOOL& bLeftBar);\n```  \n  \n### Parameters  \n [in] `pBar`  \n [in] `bLeftBar`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__findtabbedpane\"></a>  CPaneDivider::FindTabbedPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCDockablePane* FindTabbedPane(UINT nID);\n```  \n  \n### Parameters  \n [in] `nID`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__getdefaultwidth\"></a>  CPaneDivider::GetDefaultWidth  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nstatic int __stdcall GetDefaultWidth();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__getfirstpane\"></a>  CPaneDivider::GetFirstPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nconst CBasePane* GetFirstPane() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__getpanedividers\"></a>  CPaneDivider::GetPaneDividers  \n Returns the list of pane dividers that reside in the [CPaneContainer Class](../../mfc/reference/cpanecontainer-class.md). This method should be called only for default pane dividers.  \n  \n```  \nvoid GetPaneDividers(CObList& lstSliders);\n```  \n  \n### Parameters  \n [out] `lstSliders`  \n Contains the list of pane dividers that reside in the pane container.  \n  \n### Remarks  \n This method should be called for default pane dividers only. A default pane divider is a divider that resizes the entire pane container.  \n  \n##  <a name=\"cpanedivider__getpanedividerstyle\"></a>  CPaneDivider::GetPaneDividerStyle  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nDWORD GetPaneDividerStyle() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__getpanes\"></a>  CPaneDivider::GetPanes  \n Returns the list of panes that reside in the [CPaneContainer Class](../../mfc/reference/cpanecontainer-class.md). This method should be called only to retrieve default pane dividers.  \n  \n```  \nvoid GetPanes(CObList& lstBars);\n```  \n  \n### Parameters  \n [out] `lstBars`  \n Contains the list of panes that reside in the pane container.  \n  \n### Remarks  \n This method should be called for default pane dividers only. A default pane divider is a divider that resizes the entire pane container.  \n  \n##  <a name=\"cpanedivider__getrootcontainerrect\"></a>  CPaneDivider::GetRootContainerRect  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCRect GetRootContainerRect();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__getwidth\"></a>  CPaneDivider::GetWidth  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nint GetWidth() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__init\"></a>  CPaneDivider::Init  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid Init(\n    BOOL bDefaultSlider = FALSE,  \n    CWnd* pParent = NULL);\n```  \n  \n### Parameters  \n [in] `bDefaultSlider`  \n [in] `pParent`  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__insertpane\"></a>  CPaneDivider::InsertPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL InsertPane(\n    CDockablePane* pBarToInsert,  \n    CDockablePane* pTargetBar,  \n    DWORD dwAlignment,  \n    LPCRECT lpRect = NULL);\n```  \n  \n### Parameters  \n [in] `pBarToInsert`  \n [in] `pTargetBar`  \n [in] `dwAlignment`  \n [in] `lpRect`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__isautohidemode\"></a>  CPaneDivider::IsAutoHideMode  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsAutoHideMode() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__isdefault\"></a>  CPaneDivider::IsDefault  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsDefault() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__ishorizontal\"></a>  CPaneDivider::IsHorizontal  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsHorizontal() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__m_ndefaultwidth\"></a>  CPaneDivider::m_nDefaultWidth  \n Specifies the default width, in pixels, of all pane dividers in the application.  \n  \n```  \nAFX_IMPORT_DATA static int m_nDefaultWidth;  \n```  \n  \n##  <a name=\"cpanedivider__move\"></a>  CPaneDivider::Move  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void Move(\n    CPoint& ptOffset,  \n    BOOL bAdjustLayout = TRUE);\n```  \n  \n### Parameters  \n [in] `ptOffset`  \n [in] `bAdjustLayout`  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__m_psliderrtc\"></a>  CPaneDivider::m_pSliderRTC  \n Holds a pointer to runtime class information about a `CPaneDivider`-derived object.  \n  \n```  \nAFX_IMPORT_DATA static CRuntimeClass* m_pSliderRTC;  \n```  \n  \n### Remarks  \n Set this member variable if you create a custom pane divider. This enables the framework to create your pane divider when the pane is drawn.  \n  \n### Example  \n The following example shows how to set the `m_pSliderRTC` member variable:  \n  \n```  \nclass CMySplitter : public CPaneDivider  \n{  \n...  \n};  \n \nCPaneDivider::m_pSliderRTC = RUNTIME_CLASS(CMySpliter);\n```  \n  \n##  <a name=\"cpanedivider__notifyaboutrelease\"></a>  CPaneDivider::NotifyAboutRelease  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void NotifyAboutRelease();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__onshowpane\"></a>  CPaneDivider::OnShowPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnShowPane(\n    CDockablePane* pBar,  \n    BOOL bShow);\n```  \n  \n### Parameters  \n [in] `pBar`  \n [in] `bShow`  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__releaseemptypanecontainers\"></a>  CPaneDivider::ReleaseEmptyPaneContainers  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid ReleaseEmptyPaneContainers();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__removepane\"></a>  CPaneDivider::RemovePane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void RemovePane(CDockablePane* pBar);\n```  \n  \n### Parameters  \n [in] `pBar`  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__replacepane\"></a>  CPaneDivider::ReplacePane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL ReplacePane(\n    CDockablePane* pBarToReplace,  \n    CDockablePane* pBarToReplaceWith);\n```  \n  \n### Parameters  \n [in] `pBarToReplace`  \n [in] `pBarToReplaceWith`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__repositionpanes\"></a>  CPaneDivider::RepositionPanes  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void RepositionPanes(\n    CRect& rectNew,  \n    HDWP& hdwp);\n```  \n  \n### Parameters  \n [in] `rectNew`  \n [in] `hdwp`  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__serialize\"></a>  CPaneDivider::Serialize  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid Serialize(CArchive& ar);\n```  \n  \n### Parameters  \n [in] `ar`  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__showwindow\"></a>  CPaneDivider::ShowWindow  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid ShowWindow(int nCmdShow);\n```  \n  \n### Parameters  \n [in] `nCmdShow`  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__storerecentdocksiteinfo\"></a>  CPaneDivider::StoreRecentDockSiteInfo  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid StoreRecentDockSiteInfo(CDockablePane* pBar);\n```  \n  \n### Parameters  \n [in] `pBar`  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__storerecenttabrelatedinfo\"></a>  CPaneDivider::StoreRecentTabRelatedInfo  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid StoreRecentTabRelatedInfo(\n    CDockablePane* pDockingBar,  \n    CDockablePane* pTabbedBar);\n```  \n  \n### Parameters  \n [in] `pDockingBar`  \n [in] `pTabbedBar`  \n  \n### Remarks  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CPaneContainerManager Class](../../mfc/reference/cpanecontainermanager-class.md)   \n [CPaneContainer Class](../../mfc/reference/cpanecontainer-class.md)   \n [CDockingManager Class](../../mfc/reference/cdockingmanager-class.md)   \n [CBasePane Class](../../mfc/reference/cbasepane-class.md)\n"}