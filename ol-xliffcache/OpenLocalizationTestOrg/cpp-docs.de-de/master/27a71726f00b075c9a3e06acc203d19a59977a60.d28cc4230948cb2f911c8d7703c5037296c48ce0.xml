{"nodes":[{"pos":[12,51],"content":"_mbccpy_s, _mbccpy_s_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_mbccpy_s, _mbccpy_s_l | Microsoft Docs","pos":[0,39]}]},{"content":"_mbccpy_s, _mbccpy_s_l","pos":[1173,1195]},{"content":"Copies one multibyte character from a string to another string.","pos":[1196,1259]},{"content":"These versions of <bpt id=\"p1\">[</bpt>_mbccpy, _mbccpy_l<ept id=\"p1\">](../../c-runtime-library/reference/mbccpy-mbccpy-l.md)</ept> have security enhancements, as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1260,1485],"source":" These versions of [_mbccpy, _mbccpy_l](../../c-runtime-library/reference/mbccpy-mbccpy-l.md) have security enhancements, as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"pos":[1493,1713],"content":"[!IMPORTANT]\n This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","leadings":["","> "],"nodes":[{"content":" This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","pos":[13,218],"nodes":[{"content":"This API cannot be used in applications that execute in the Windows Runtime.","pos":[1,77]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRT functions not supported with /ZW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.","pos":[78,205],"source":" For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)."}]}]},{"content":"Syntax","pos":[1722,1728]},{"content":"Parameters","pos":[2360,2370]},{"content":"[out]","pos":[2374,2379]},{"content":"Copy destination.","pos":[2390,2407]},{"content":"[in]","pos":[2414,2418]},{"content":"Size of the destination buffer.","pos":[2440,2471]},{"content":"[out]","pos":[2478,2483]},{"content":"Filled with the number of bytes copied (1 or 2 if successful).","pos":[2497,2559]},{"content":"Pass <ph id=\"ph1\">`NULL`</ph> if you don't care about the number.","pos":[2560,2607],"source":" Pass `NULL` if you don't care about the number."},{"content":"[in]","pos":[2614,2618]},{"content":"Multibyte character to copy.","pos":[2628,2656]},{"content":"[in]","pos":[2663,2667]},{"content":"Locale to use.","pos":[2680,2694]},{"content":"Return Value","pos":[2703,2715]},{"content":"Zero if successful; an error code on failure.","pos":[2719,2764]},{"content":"If <ph id=\"ph1\">`src`</ph> or <ph id=\"ph2\">`dest`</ph> is <ph id=\"ph3\">`NULL`</ph>, or if more than <ph id=\"ph4\">`buffSizeinBytes`</ph> bytes would be copied to <ph id=\"ph5\">`dest`</ph>, then the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2765,2997],"source":" If `src` or `dest` is `NULL`, or if more than `buffSizeinBytes` bytes would be copied to `dest`, then the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, the functions return <ph id=\"ph1\">`EINVAL`</ph> and <ph id=\"ph2\">`errno`</ph> is set to <ph id=\"ph3\">`EINVAL`</ph>.","pos":[2998,3096],"source":" If execution is allowed to continue, the functions return `EINVAL` and `errno` is set to `EINVAL`."},{"content":"Remarks","pos":[3105,3112]},{"content":"The <ph id=\"ph1\">`_mbccpy_s`</ph> function copies one multibyte character from <ph id=\"ph2\">`src`</ph> to <ph id=\"ph3\">`dest`</ph>.","pos":[3116,3193],"source":"The `_mbccpy_s` function copies one multibyte character from `src` to `dest`."},{"content":"If <ph id=\"ph1\">`src`</ph> does not point to the lead byte of a multibyte character as determined by an implicit call to <bpt id=\"p1\">[</bpt>_ismbblead<ept id=\"p1\">](../../c-runtime-library/reference/ismbblead-ismbblead-l.md)</ept>, then the single byte that <ph id=\"ph2\">`src`</ph> points to is copied.","pos":[3194,3423],"source":" If `src` does not point to the lead byte of a multibyte character as determined by an implicit call to [_ismbblead](../../c-runtime-library/reference/ismbblead-ismbblead-l.md), then the single byte that `src` points to is copied."},{"content":"If <ph id=\"ph1\">`src`</ph> points to a lead byte but the following byte is 0 and thus invalid, then 0 is copied to <ph id=\"ph2\">`dest`</ph>, <ph id=\"ph3\">`errno`</ph> is set to <ph id=\"ph4\">`EILSEQ`</ph>, and the function returns <ph id=\"ph5\">`EILSEQ`</ph>.","pos":[3424,3591],"source":" If `src` points to a lead byte but the following byte is 0 and thus invalid, then 0 is copied to `dest`, `errno` is set to `EILSEQ`, and the function returns `EILSEQ`."},{"pos":[3610,3768],"content":"does not append a null terminator; however, if <ph id=\"ph1\">`src`</ph> points to a null character, then that null is copied to <ph id=\"ph2\">`dest`</ph> (this is just a regular single-byte copy).","source":" does not append a null terminator; however, if `src` points to a null character, then that null is copied to `dest` (this is just a regular single-byte copy)."},{"content":"The value in <ph id=\"ph1\">`pCopied`</ph> is filled with the number of bytes copied.","pos":[3775,3840],"source":"The value in `pCopied` is filled with the number of bytes copied."},{"content":"Possible values are 1 and 2 if the operation is successful.","pos":[3841,3900]},{"content":"If <ph id=\"ph1\">`NULL`</ph> is passed in, this parameter is ignored.","pos":[3901,3951],"source":" If `NULL` is passed in, this parameter is ignored."},{"pos":[3964,3973],"content":"copied to"},{"content":"Return value","pos":[3991,4003]},{"content":"non-lead-byte","pos":[4082,4095]},{"content":"non-lead-byte","pos":[4096,4109]},{"content":"1","pos":[4110,4111]},{"content":"0","pos":[4112,4113]},{"content":"0","pos":[4118,4119]},{"content":"0","pos":[4120,4121]},{"content":"1","pos":[4122,4123]},{"content":"0","pos":[4124,4125]},{"content":"lead-byte followed by non-0","pos":[4130,4157]},{"content":"lead-byte followed by non-0","pos":[4158,4185]},{"content":"2","pos":[4186,4187]},{"content":"0","pos":[4188,4189]},{"content":"lead-byte followed by 0","pos":[4194,4217]},{"content":"0","pos":[4218,4219]},{"content":"1","pos":[4220,4221]},{"content":"Note that the second row is just a special case of the first.","pos":[4238,4299]},{"content":"Also note that the table assumes <ph id=\"ph1\">`buffSizeInBytes` &gt;= `pCopied`</ph>.","pos":[4300,4364],"source":" Also note that the table assumes `buffSizeInBytes` >= `pCopied`."},{"content":"uses the current locale for any locale-dependent behavior.","pos":[4383,4441]},{"content":"is identical to <ph id=\"ph1\">`_mbccpy_s`</ph> except that <ph id=\"ph2\">`_mbccpy_s_l`</ph> uses the locale passed in for any locale-dependent behavior.","pos":[4456,4570],"source":" is identical to `_mbccpy_s` except that `_mbccpy_s_l` uses the locale passed in for any locale-dependent behavior."},{"content":"In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically, eliminating the need to specify a size argument.","pos":[4577,4745]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[4746,4854],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"content":"Generic-Text Routine Mappings","pos":[4864,4893]},{"content":"Tchar.h routine","pos":[4900,4915]},{"content":"_UNICODE and _MBCS not defined","pos":[4916,4946]},{"content":"_MBCS defined","pos":[4947,4960]},{"content":"_UNICODE defined","pos":[4961,4977]},{"content":"Maps to macro or inline function.","pos":[5103,5136]},{"content":"Maps to macro or inline function.","pos":[5149,5182]},{"content":"Requirements","pos":[5192,5204]},{"content":"Routine","pos":[5211,5218]},{"content":"Required header","pos":[5219,5234]},{"content":"mbstring.h&gt;","pos":[5293,5304],"source":"mbstring.h>"},{"content":"mbstring.h&gt;","pos":[5325,5336],"source":"mbstring.h>"},{"pos":[5344,5442],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"See Also","pos":[5451,5459]},{"content":"Locale","pos":[5464,5470]},{"content":"Interpretation of Multibyte-Character Sequences","pos":[5512,5559]},{"content":"_mbclen, mblen, _mblen_l","pos":[5642,5666]}],"content":"---\ntitle: \"_mbccpy_s, _mbccpy_s_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_mbccpy_s\"\n  - \"_mbccpy_s_l\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-multibyte-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_mbccpy_s_l\"\n  - \"mbccpy_s_l\"\n  - \"mbccpy_s\"\n  - \"_mbccpy_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"tccpy_s_l function\"\n  - \"_tccpy_s function\"\n  - \"_mbccpy_s function\"\n  - \"mbccpy_s function\"\n  - \"tccpy_s function\"\n  - \"mbccpy_s_l function\"\n  - \"_tccpy_s_l function\"\n  - \"_mbccpy_s_l function\"\nms.assetid: b6e965fa-53c1-4ec3-85ef-a1c4b4f2b2da\ncaps.latest.revision: 30\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _mbccpy_s, _mbccpy_s_l\nCopies one multibyte character from a string to another string. These versions of [_mbccpy, _mbccpy_l](../../c-runtime-library/reference/mbccpy-mbccpy-l.md) have security enhancements, as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n> [!IMPORTANT]\n>  This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).  \n  \n## Syntax  \n  \n```  \nerrno_t _mbccpy_s(  \n   unsigned char *dest,  \n   size_t buffSizeInBytes,  \n   int * pCopied,  \n   const unsigned char *src   \n);  \nerrno_t _mbccpy_s_l(  \n   unsigned char *dest,  \n   size_t buffSizeInBytes,  \n   int * pCopied,  \n   const unsigned char *src,  \n   locale_t locale  \n);  \ntemplate <size_t size>  \nerrno_t _mbccpy_s(  \n   unsigned char (&dest)[size],  \n   int * pCopied,  \n   const unsigned char *src   \n); // C++ only  \ntemplate <size_t size>  \nerrno_t _mbccpy_s_l(  \n   unsigned char (&dest)[size],  \n   int * pCopied,  \n   const unsigned char *src,  \n   locale_t locale  \n); // C++ only  \n```  \n  \n#### Parameters  \n [out] `dest`  \n Copy destination.  \n  \n [in] `buffSizeInBytes`  \n Size of the destination buffer.  \n  \n [out] `pCopied`  \n Filled with the number of bytes copied (1 or 2 if successful). Pass `NULL` if you don't care about the number.  \n  \n [in] `src`  \n Multibyte character to copy.  \n  \n [in] `locale`  \n Locale to use.  \n  \n## Return Value  \n Zero if successful; an error code on failure. If `src` or `dest` is `NULL`, or if more than `buffSizeinBytes` bytes would be copied to `dest`, then the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, the functions return `EINVAL` and `errno` is set to `EINVAL`.  \n  \n## Remarks  \n The `_mbccpy_s` function copies one multibyte character from `src` to `dest`. If `src` does not point to the lead byte of a multibyte character as determined by an implicit call to [_ismbblead](../../c-runtime-library/reference/ismbblead-ismbblead-l.md), then the single byte that `src` points to is copied. If `src` points to a lead byte but the following byte is 0 and thus invalid, then 0 is copied to `dest`, `errno` is set to `EILSEQ`, and the function returns `EILSEQ`.  \n  \n `_mbccpy_s` does not append a null terminator; however, if `src` points to a null character, then that null is copied to `dest` (this is just a regular single-byte copy).  \n  \n The value in `pCopied` is filled with the number of bytes copied. Possible values are 1 and 2 if the operation is successful. If `NULL` is passed in, this parameter is ignored.  \n  \n|`src`|copied to `dest`|`pCopied`|Return value|  \n|-----------|----------------------|---------------|------------------|  \n|non-lead-byte|non-lead-byte|1|0|  \n|0|0|1|0|  \n|lead-byte followed by non-0|lead-byte followed by non-0|2|0|  \n|lead-byte followed by 0|0|1|`EILSEQ`|  \n  \n Note that the second row is just a special case of the first. Also note that the table assumes `buffSizeInBytes` >= `pCopied`.  \n  \n `_mbccpy_s` uses the current locale for any locale-dependent behavior. `_mbccpy_s_l` is identical to `_mbccpy_s` except that `_mbccpy_s_l` uses the locale passed in for any locale-dependent behavior.  \n  \n In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically, eliminating the need to specify a size argument. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n### Generic-Text Routine Mappings  \n  \n|Tchar.h routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_tccpy_s`|Maps to macro or inline function.|`_mbccpy_s`|Maps to macro or inline function.|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_mbccpy_s`|\\<mbstring.h>|  \n|`_mbccpy_s_l`|\\<mbstring.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## See Also  \n [Locale](../../c-runtime-library/locale.md)   \n [Interpretation of Multibyte-Character Sequences](../../c-runtime-library/interpretation-of-multibyte-character-sequences.md)   \n [_mbclen, mblen, _mblen_l](../../c-runtime-library/reference/mbclen-mblen-mblen-l.md)"}