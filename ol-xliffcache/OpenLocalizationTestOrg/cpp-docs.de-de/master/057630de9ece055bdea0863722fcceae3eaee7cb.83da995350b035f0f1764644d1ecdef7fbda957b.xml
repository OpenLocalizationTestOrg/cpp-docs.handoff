{"nodes":[{"pos":[12,43],"content":"hash_set Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"hash_set Class | Microsoft Docs","pos":[0,31]}]},{"pos":[712,726],"content":"hash_set Class","linkify":"hash_set Class","nodes":[{"content":"hash_set Class","pos":[0,14]}]},{"pos":[729,847],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"The container class hash_set is an extension of the Standard Template Library (STL) and is used for the storage and fast retrieval of data from a collection in which the values of the elements contained are unique and serve as the key values.","pos":[854,1096]},{"pos":[1105,1111],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1266,1276],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The element data type to be stored in the hash_set.","pos":[1289,1340]},{"content":"The type which includes two function objects, one of class compare that is a binary predicate able to compare two element values as sort keys to determine their relative order and a hash function that is a unary predicate mapping key values of the elements to unsigned integers of type <bpt id=\"p1\">**</bpt>size_t<ept id=\"p1\">**</ept>.","pos":[1359,1656],"source":" The type which includes two function objects, one of class compare that is a binary predicate able to compare two element values as sort keys to determine their relative order and a hash function that is a unary predicate mapping key values of the elements to unsigned integers of type **size_t**."},{"content":"This argument is optional, and the <ph id=\"ph1\">`hash_compare`</ph><bpt id=\"p1\">*</bpt>&lt;Key,<ept id=\"p1\">*</ept> <bpt id=\"p2\">**</bpt>less<ept id=\"p2\">**</ept><bpt id=\"p3\">*</bpt><ph id=\"ph2\">\\&lt;</ph>Key&gt; &gt;<ept id=\"p3\">*</ept> is the default value.","pos":[1657,1754],"source":" This argument is optional, and the `hash_compare`*<Key,* **less***\\<Key> >* is the default value."},{"content":"The type that represents the stored allocator object that encapsulates details about the hash_set's allocation and deallocation of memory.","pos":[1776,1914]},{"content":"This argument is optional, and the default value is <bpt id=\"p1\">**</bpt>allocator<ept id=\"p1\">**</ept><bpt id=\"p2\">*</bpt><ph id=\"ph1\">\\&lt;</ph>Key&gt;.<ept id=\"p2\">*</ept>","pos":[1915,1989],"source":" This argument is optional, and the default value is **allocator***\\<Key>.*"},{"pos":[1998,2005],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The hash_set is:","pos":[2009,2025]},{"content":"An associative container, which a variable size container that supports the efficient retrieval of element values based on an associated key value.","pos":[2035,2182]},{"content":"Further, it is a simple associative container because its element values are its key values.","pos":[2183,2275]},{"content":"Reversible, because it provides a bidirectional iterator to access its elements.","pos":[2285,2365]},{"content":"Hashed, because its elements are grouped into buckets based on the value of a hash function applied to the key values of the elements.","pos":[2375,2509]},{"content":"Unique in the sense that each of its elements must have a unique key.","pos":[2519,2588]},{"content":"Because hash_set is also a simple associative container, its elements are also unique.","pos":[2589,2675]},{"content":"A template class because the functionality it provides is generic and so independent of the specific type of data contained as elements or keys.","pos":[2685,2829]},{"content":"The data types to be used for elements and keys are, instead, specified as parameters in the class template along with the comparison function and allocator.","pos":[2830,2987]},{"content":"The main advantage of hashing over sorting is greater efficiency; a successful hashing performs insertions, deletions, and finds in constant average time as compared with a time proportional to the logarithm of the number of elements in the container for sorting techniques.","pos":[2994,3268]},{"content":"The value of an element in a set may not be changed directly.","pos":[3269,3330]},{"content":"Instead, you must delete old values and insert elements with new values.","pos":[3331,3403]},{"content":"The choice of container type should be based in general on the type of searching and inserting required by the application.","pos":[3410,3533]},{"content":"Hashed associative containers are optimized for the operations of lookup, insertion and removal.","pos":[3534,3630]},{"content":"The member functions that explicitly support these operations are efficient when used with a well-designed hash function, performing them in a time that is on average constant and not dependent on the number of elements in the container.","pos":[3631,3868]},{"content":"A well-designed hash function produces a uniform distribution of hashed values and minimizes the number of collisions, where a collision is said to occur when distinct key values are mapped into the same hashed value.","pos":[3869,4086]},{"content":"In the worst case, with the worst possible hash function, the number of operations is proportional to the number of elements in the sequence (linear time).","pos":[4087,4242]},{"content":"The hash_set should be the associative container of choice when the conditions associating the values with their keys are satisfied by the application.","pos":[4249,4400]},{"content":"The elements of a hash_set are unique and serve as their own sort keys.","pos":[4401,4472]},{"content":"A model for this type of structure is an ordered list of, say, words in which the words may occur only once.","pos":[4473,4581]},{"content":"If multiple occurrences of the words were allowed, then a hash_multiset would be the appropriate container structure.","pos":[4582,4699]},{"content":"If values need to be attached to a list of unique key words, then a hash_map would be an appropriate structure to contain this data.","pos":[4700,4832]},{"content":"If instead the keys are not unique, then a hash_multimap would be the container of choice.","pos":[4833,4923]},{"content":"The hash_set orders the sequence it controls by calling a stored hash <bpt id=\"p1\">**</bpt>Traits<ept id=\"p1\">**</ept> object of type <bpt id=\"p2\">[</bpt>value_compare<ept id=\"p2\">](#hash_set__value_compare)</ept>.","pos":[4930,5068],"source":"The hash_set orders the sequence it controls by calling a stored hash **Traits** object of type [value_compare](#hash_set__value_compare)."},{"content":"This stored object may be accessed by calling the member function <bpt id=\"p1\">[</bpt>key_comp<ept id=\"p1\">](#hash_set__key_comp)</ept>.","pos":[5069,5167],"source":" This stored object may be accessed by calling the member function [key_comp](#hash_set__key_comp)."},{"content":"Such a function object must behave the same as an object of class <bpt id=\"p1\">*</bpt>hash_compare&lt;Key, less<ph id=\"ph1\">\\&lt;</ph>Key&gt; &gt;.<ept id=\"p1\">*</ept>","pos":[5168,5267],"source":" Such a function object must behave the same as an object of class *hash_compare<Key, less\\<Key> >.*"},{"content":"Specifically, for all values <ph id=\"ph1\">` key`</ph> of type Key, the call Trait( <ph id=\"ph2\">` key`</ph> ) yields a distribution of values of type size_t.","pos":[5268,5389],"source":" Specifically, for all values ` key` of type Key, the call Trait( ` key` ) yields a distribution of values of type size_t."},{"content":"In general, the elements need be merely less than comparable to establish this order: so that, given any two elements, it may be determined either that they are equivalent (in the sense that neither is less than the other) or that one is less than the other.","pos":[5396,5654]},{"content":"This results in an ordering between the non-equivalent elements.","pos":[5655,5719]},{"content":"On a more technical note, the comparison function is a binary predicate that induces a strict weak ordering in the standard mathematical sense.","pos":[5720,5863]},{"content":"A binary predicate <bpt id=\"p1\">*</bpt>f<ept id=\"p1\">*</ept>( <bpt id=\"p2\">*</bpt>x<ept id=\"p2\">*</ept>, <bpt id=\"p3\">*</bpt>y<ept id=\"p3\">*</ept>) is a function object that has two argument objects x and y and a return value of true or false.","pos":[5864,5993],"source":" A binary predicate *f*( *x*, *y*) is a function object that has two argument objects x and y and a return value of true or false."},{"content":"An ordering imposed on a hash_set is a strict weak ordering if the binary predicate is irreflexive, antisymmetric, and transitive and if equivalence is transitive, where two objects <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>y<ept id=\"p2\">*</ept> are defined to be equivalent when both <bpt id=\"p3\">*</bpt>f<ept id=\"p3\">*</ept>( <bpt id=\"p4\">*</bpt>x<ept id=\"p4\">*</ept>, <bpt id=\"p5\">*</bpt>y<ept id=\"p5\">*</ept>) and <bpt id=\"p6\">*</bpt>f<ept id=\"p6\">*</ept>( <bpt id=\"p7\">*</bpt>y<ept id=\"p7\">*</ept>, <bpt id=\"p8\">*</bpt>x<ept id=\"p8\">*</ept>) are false.","pos":[5994,6271],"source":" An ordering imposed on a hash_set is a strict weak ordering if the binary predicate is irreflexive, antisymmetric, and transitive and if equivalence is transitive, where two objects *x* and *y* are defined to be equivalent when both *f*( *x*, *y*) and *f*( *y*, *x*) are false."},{"content":"If the stronger condition of equality between keys replaces that of equivalence, then the ordering becomes total (in the sense that all the elements are ordered with respect to each other) and the keys matched will be indiscernible from each other.","pos":[6272,6520]},{"content":"The actual order of elements in the controlled sequence depends on the hash function, the ordering function, and the current size of the hash table stored in the container object.","pos":[6527,6706]},{"content":"You cannot determine the current size of the hash table, so you cannot in general predict the order of elements in the controlled sequence.","pos":[6707,6846]},{"content":"Inserting elements invalidates no iterators, and removing elements invalidates only those iterators that had specifically pointed at the removed elements.","pos":[6847,7001]},{"content":"The iterator provided by the hash_set class is a bidirectional iterator, but the class member functions <bpt id=\"p1\">[</bpt>insert<ept id=\"p1\">](#hash_set__insert)</ept> and <bpt id=\"p2\">[</bpt>hash_set<ept id=\"p2\">](#hash_set__hash_set)</ept> have versions that take as template parameters a weaker input iterator, whose functionality requirements are more minimal than those guaranteed by the class of bidirectional iterators.","pos":[7008,7360],"source":"The iterator provided by the hash_set class is a bidirectional iterator, but the class member functions [insert](#hash_set__insert) and [hash_set](#hash_set__hash_set) have versions that take as template parameters a weaker input iterator, whose functionality requirements are more minimal than those guaranteed by the class of bidirectional iterators."},{"content":"The different iterator concepts form a family related by refinements in their functionality.","pos":[7361,7453]},{"content":"Each iterator concept has its own set of requirements, and the algorithms that work with them must limit their assumptions to the requirements provided by that type of iterator.","pos":[7454,7631]},{"content":"It may be assumed that an input iterator may be dereferenced to refer to some object and that it may be incremented to the next iterator in the sequence.","pos":[7632,7785]},{"content":"This is a minimal set of functionality, but it is enough to be able to talk meaningfully about a range of iterators [ <ph id=\"ph1\">` first`</ph>, <ph id=\"ph2\">` last`</ph>) in the context of the class member functions.","pos":[7786,7968],"source":" This is a minimal set of functionality, but it is enough to be able to talk meaningfully about a range of iterators [ ` first`, ` last`) in the context of the class member functions."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[7975,8213],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[8214,8303],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[8313,8325],"content":"Constructors","linkify":"Constructors","nodes":[{"content":"Constructors","pos":[0,12]}]},{"pos":[8346,8377],"content":"<bpt id=\"p1\">[</bpt>hash_set<ept id=\"p1\">](#hash_set__hash_set)</ept>","source":"[hash_set](#hash_set__hash_set)"},{"pos":[8378,8474],"content":"Constructs a <ph id=\"ph1\">`hash_set`</ph> that is empty or that is a copy of all or part of some other <ph id=\"ph2\">`hash_set`</ph>.","source":"Constructs a `hash_set` that is empty or that is a copy of all or part of some other `hash_set`."},{"pos":[8485,8493],"content":"Typedefs","linkify":"Typedefs","nodes":[{"content":"Typedefs","pos":[0,8]}]},{"pos":[8514,8557],"content":"<bpt id=\"p1\">[</bpt>allocator_type<ept id=\"p1\">](#hash_set__allocator_type)</ept>","source":"[allocator_type](#hash_set__allocator_type)"},{"pos":[8558,8629],"content":"A type that represents the <ph id=\"ph1\">`allocator`</ph> class for the <ph id=\"ph2\">`hash_set`</ph> object.","source":"A type that represents the `allocator` class for the `hash_set` object."},{"pos":[8634,8677],"content":"<bpt id=\"p1\">[</bpt>const_iterator<ept id=\"p1\">](#hash_set__const_iterator)</ept>","source":"[const_iterator](#hash_set__const_iterator)"},{"pos":[8678,8774],"content":"A type that provides a bidirectional iterator that can read a <ph id=\"ph1\">`const`</ph> element in the <ph id=\"ph2\">`hash_set`</ph>.","source":"A type that provides a bidirectional iterator that can read a `const` element in the `hash_set`."},{"pos":[8779,8820],"content":"<bpt id=\"p1\">[</bpt>const_pointer<ept id=\"p1\">](#hash_set__const_pointer)</ept>","source":"[const_pointer](#hash_set__const_pointer)"},{"pos":[8821,8889],"content":"A type that provides a pointer to a <ph id=\"ph1\">`const`</ph> element in a <ph id=\"ph2\">`hash_set`</ph>.","source":"A type that provides a pointer to a `const` element in a `hash_set`."},{"pos":[8894,8939],"content":"<bpt id=\"p1\">[</bpt>const_reference<ept id=\"p1\">](#hash_set__const_reference)</ept>","source":"[const_reference](#hash_set__const_reference)"},{"pos":[8940,9063],"content":"A type that provides a reference to a <ph id=\"ph1\">`const`</ph> element stored in a <ph id=\"ph2\">`hash_set`</ph> for reading and performing <ph id=\"ph3\">`const`</ph> operations.","source":"A type that provides a reference to a `const` element stored in a `hash_set` for reading and performing `const` operations."},{"pos":[9068,9127],"content":"<bpt id=\"p1\">[</bpt>const_reverse_iterator<ept id=\"p1\">](#hash_set__const_reverse_iterator)</ept>","source":"[const_reverse_iterator](#hash_set__const_reverse_iterator)"},{"pos":[9128,9226],"content":"A type that provides a bidirectional iterator that can read any <ph id=\"ph1\">`const`</ph> element in the <ph id=\"ph2\">`hash_set`</ph>.","source":"A type that provides a bidirectional iterator that can read any `const` element in the `hash_set`."},{"pos":[9231,9276],"content":"<bpt id=\"p1\">[</bpt>difference_type<ept id=\"p1\">](#hash_set__difference_type)</ept>","source":"[difference_type](#hash_set__difference_type)"},{"pos":[9277,9420],"content":"A signed integer type that can be used to represent the number of elements of a <ph id=\"ph1\">`hash_set`</ph> in a range between elements pointed to by iterators.","source":"A signed integer type that can be used to represent the number of elements of a `hash_set` in a range between elements pointed to by iterators."},{"pos":[9425,9456],"content":"<bpt id=\"p1\">[</bpt>iterator<ept id=\"p1\">](#hash_set__iterator)</ept>","source":"[iterator](#hash_set__iterator)"},{"pos":[9457,9555],"content":"A type that provides a bidirectional iterator that can read or modify any element in a <ph id=\"ph1\">`hash_set`</ph>.","source":"A type that provides a bidirectional iterator that can read or modify any element in a `hash_set`."},{"pos":[9560,9597],"content":"<bpt id=\"p1\">[</bpt>key_compare<ept id=\"p1\">](#hash_set__key_compare)</ept>","source":"[key_compare](#hash_set__key_compare)"},{"pos":[9598,9734],"content":"A type that provides a function object that can compare two sort keys to determine the relative order of two elements in the <ph id=\"ph1\">`hash_set`</ph>.","source":"A type that provides a function object that can compare two sort keys to determine the relative order of two elements in the `hash_set`."},{"pos":[9739,9770],"content":"<bpt id=\"p1\">[</bpt>key_type<ept id=\"p1\">](#hash_set__key_type)</ept>","source":"[key_type](#hash_set__key_type)"},{"pos":[9771,9868],"content":"A type that describes an object stored as an element of a <ph id=\"ph1\">`hash_set`</ph> in its capacity as sort key.","source":"A type that describes an object stored as an element of a `hash_set` in its capacity as sort key."},{"pos":[9873,9902],"content":"<bpt id=\"p1\">[</bpt>pointer<ept id=\"p1\">](#hash_set__pointer)</ept>","source":"[pointer](#hash_set__pointer)"},{"pos":[9903,9964],"content":"A type that provides a pointer to an element in a <ph id=\"ph1\">`hash_set`</ph>.","source":"A type that provides a pointer to an element in a `hash_set`."},{"pos":[9969,10002],"content":"<bpt id=\"p1\">[</bpt>reference<ept id=\"p1\">](#hash_set__reference)</ept>","source":"[reference](#hash_set__reference)"},{"pos":[10003,10073],"content":"A type that provides a reference to an element stored in a <ph id=\"ph1\">`hash_set`</ph>.","source":"A type that provides a reference to an element stored in a `hash_set`."},{"pos":[10078,10125],"content":"<bpt id=\"p1\">[</bpt>reverse_iterator<ept id=\"p1\">](#hash_set__reverse_iterator)</ept>","source":"[reverse_iterator](#hash_set__reverse_iterator)"},{"pos":[10126,10232],"content":"A type that provides a bidirectional iterator that can read or modify an element in a reversed <ph id=\"ph1\">`hash_set`</ph>.","source":"A type that provides a bidirectional iterator that can read or modify an element in a reversed `hash_set`."},{"pos":[10237,10270],"content":"<bpt id=\"p1\">[</bpt>size_type<ept id=\"p1\">](#hash_set__size_type)</ept>","source":"[size_type](#hash_set__size_type)"},{"pos":[10271,10354],"content":"An unsigned integer type that can represent the number of elements in a <ph id=\"ph1\">`hash_set`</ph>.","source":"An unsigned integer type that can represent the number of elements in a `hash_set`."},{"pos":[10359,10400],"content":"<bpt id=\"p1\">[</bpt>value_compare<ept id=\"p1\">](#hash_set__value_compare)</ept>","source":"[value_compare](#hash_set__value_compare)"},{"pos":[10401,10613],"content":"A type that provides two function objects, a binary predicate of class compare that can compare two element values of a <ph id=\"ph1\">`hash_set`</ph> to determine their relative order and a unary predicate that hashes the elements.","source":"A type that provides two function objects, a binary predicate of class compare that can compare two element values of a `hash_set` to determine their relative order and a unary predicate that hashes the elements."},{"pos":[10618,10653],"content":"<bpt id=\"p1\">[</bpt>value_type<ept id=\"p1\">](#hash_set__value_type)</ept>","source":"[value_type](#hash_set__value_type)"},{"pos":[10654,10750],"content":"A type that describes an object stored as an element of a <ph id=\"ph1\">`hash_set`</ph> in its capacity as a value.","source":"A type that describes an object stored as an element of a `hash_set` in its capacity as a value."},{"pos":[10761,10777],"content":"Member Functions","linkify":"Member Functions","nodes":[{"content":"Member Functions","pos":[0,16]}]},{"pos":[10798,10823],"content":"<bpt id=\"p1\">[</bpt>begin<ept id=\"p1\">](#hash_set__begin)</ept>","source":"[begin](#hash_set__begin)"},{"pos":[10824,10895],"content":"Returns an iterator that addresses the first element in the <ph id=\"ph1\">`hash_set`</ph>.","source":"Returns an iterator that addresses the first element in the `hash_set`."},{"pos":[10900,10937],"content":"<bpt id=\"p1\">[</bpt>hash_set::cbegin<ept id=\"p1\">](#hash_set__cbegin)</ept>","source":"[hash_set::cbegin](#hash_set__cbegin)"},{"pos":[10938,11010],"content":"Returns a const iterator addressing the first element in the <ph id=\"ph1\">`hash_set`</ph>.","source":"Returns a const iterator addressing the first element in the `hash_set`."},{"pos":[11015,11048],"content":"<bpt id=\"p1\">[</bpt>hash_set::cend<ept id=\"p1\">](#hash_set__cend)</ept>","source":"[hash_set::cend](#hash_set__cend)"},{"pos":[11049,11146],"content":"Returns a const iterator that addresses the location succeeding the last element in a <ph id=\"ph1\">`hash_set`</ph>.","source":"Returns a const iterator that addresses the location succeeding the last element in a `hash_set`."},{"pos":[11151,11176],"content":"<bpt id=\"p1\">[</bpt>clear<ept id=\"p1\">](#hash_set__clear)</ept>","source":"[clear](#hash_set__clear)"},{"pos":[11177,11217],"content":"Erases all the elements of a <ph id=\"ph1\">`hash_set`</ph>.","source":"Erases all the elements of a `hash_set`."},{"pos":[11222,11247],"content":"<bpt id=\"p1\">[</bpt>count<ept id=\"p1\">](#hash_set__count)</ept>","source":"[count](#hash_set__count)"},{"pos":[11248,11339],"content":"Returns the number of elements in a <ph id=\"ph1\">`hash_set`</ph> whose key matches a parameter-specified key.","source":"Returns the number of elements in a `hash_set` whose key matches a parameter-specified key."},{"pos":[11344,11383],"content":"<bpt id=\"p1\">[</bpt>hash_set::crbegin<ept id=\"p1\">](#hash_set__crbegin)</ept>","source":"[hash_set::crbegin](#hash_set__crbegin)"},{"pos":[11384,11463],"content":"Returns a const iterator addressing the first element in a reversed <ph id=\"ph1\">`hash_set`</ph>.","source":"Returns a const iterator addressing the first element in a reversed `hash_set`."},{"pos":[11468,11503],"content":"<bpt id=\"p1\">[</bpt>hash_set::crend<ept id=\"p1\">](#hash_set__crend)</ept>","source":"[hash_set::crend](#hash_set__crend)"},{"pos":[11504,11610],"content":"Returns a const iterator that addresses the location succeeding the last element in a reversed <ph id=\"ph1\">`hash_set`</ph>.","source":"Returns a const iterator that addresses the location succeeding the last element in a reversed `hash_set`."},{"pos":[11615,11654],"content":"<bpt id=\"p1\">[</bpt>hash_set::emplace<ept id=\"p1\">](#hash_set__emplace)</ept>","source":"[hash_set::emplace](#hash_set__emplace)"},{"pos":[11655,11713],"content":"Inserts an element constructed in place into a <ph id=\"ph1\">`hash_set`</ph>.","source":"Inserts an element constructed in place into a `hash_set`."},{"pos":[11718,11767],"content":"<bpt id=\"p1\">[</bpt>hash_set::emplace_hint<ept id=\"p1\">](#hash_set__emplace_hint)</ept>","source":"[hash_set::emplace_hint](#hash_set__emplace_hint)"},{"pos":[11768,11849],"content":"Inserts an element constructed in place into a <ph id=\"ph1\">`hash_set`</ph>, with a placement hint.","source":"Inserts an element constructed in place into a `hash_set`, with a placement hint."},{"pos":[11854,11879],"content":"<bpt id=\"p1\">[</bpt>empty<ept id=\"p1\">](#hash_set__empty)</ept>","source":"[empty](#hash_set__empty)"},{"pos":[11880,11911],"content":"Tests if a <ph id=\"ph1\">`hash_set`</ph> is empty.","source":"Tests if a `hash_set` is empty."},{"pos":[11916,11937],"content":"<bpt id=\"p1\">[</bpt>end<ept id=\"p1\">](#hash_set__end)</ept>","source":"[end](#hash_set__end)"},{"pos":[11938,12030],"content":"Returns an iterator that addresses the location succeeding the last element in a <ph id=\"ph1\">`hash_set`</ph>.","source":"Returns an iterator that addresses the location succeeding the last element in a `hash_set`."},{"pos":[12035,12072],"content":"<bpt id=\"p1\">[</bpt>equal_range<ept id=\"p1\">](#hash_set__equal_range)</ept>","source":"[equal_range](#hash_set__equal_range)"},{"pos":[12073,12294],"content":"Returns a pair of iterators respectively to the first element in a <ph id=\"ph1\">`hash_set`</ph> with a key that is greater than a specified key and to the first element in the <ph id=\"ph2\">`hash_set`</ph> with a key that is equal to or greater than the key.","source":"Returns a pair of iterators respectively to the first element in a `hash_set` with a key that is greater than a specified key and to the first element in the `hash_set` with a key that is equal to or greater than the key."},{"pos":[12299,12324],"content":"<bpt id=\"p1\">[</bpt>erase<ept id=\"p1\">](#hash_set__erase)</ept>","source":"[erase](#hash_set__erase)"},{"pos":[12325,12455],"content":"Removes an element or a range of elements in a <ph id=\"ph1\">`hash_set`</ph> from specified positions or removes elements that match a specified key.","source":"Removes an element or a range of elements in a `hash_set` from specified positions or removes elements that match a specified key."},{"pos":[12460,12483],"content":"<bpt id=\"p1\">[</bpt>find<ept id=\"p1\">](#hash_set__find)</ept>","source":"[find](#hash_set__find)"},{"pos":[12484,12603],"content":"Returns an iterator addressing the location of an element in a <ph id=\"ph1\">`hash_set`</ph> that has a key equivalent to a specified key.","source":"Returns an iterator addressing the location of an element in a `hash_set` that has a key equivalent to a specified key."},{"pos":[12608,12649],"content":"<bpt id=\"p1\">[</bpt>get_allocator<ept id=\"p1\">](#hash_set__get_allocator)</ept>","source":"[get_allocator](#hash_set__get_allocator)"},{"pos":[12650,12724],"content":"Returns a copy of the <ph id=\"ph1\">`allocator`</ph> object used to construct the <ph id=\"ph2\">`hash_set`</ph>.","source":"Returns a copy of the `allocator` object used to construct the `hash_set`."},{"pos":[12729,12756],"content":"<bpt id=\"p1\">[</bpt>insert<ept id=\"p1\">](#hash_set__insert)</ept>","source":"[insert](#hash_set__insert)"},{"pos":[12757,12817],"content":"Inserts an element or a range of elements into a <ph id=\"ph1\">`hash_set`</ph>.","source":"Inserts an element or a range of elements into a `hash_set`."},{"pos":[12822,12853],"content":"<bpt id=\"p1\">[</bpt>key_comp<ept id=\"p1\">](#hash_set__key_comp)</ept>","source":"[key_comp](#hash_set__key_comp)"},{"pos":[12854,12931],"content":"Retrieves a copy of the comparison object used to order keys in a <ph id=\"ph1\">`hash_set`</ph>.","source":"Retrieves a copy of the comparison object used to order keys in a `hash_set`."},{"pos":[12936,12973],"content":"<bpt id=\"p1\">[</bpt>lower_bound<ept id=\"p1\">](#hash_set__lower_bound)</ept>","source":"[lower_bound](#hash_set__lower_bound)"},{"pos":[12974,13091],"content":"Returns an iterator to the first element in a <ph id=\"ph1\">`hash_set`</ph> with a key that is equal to or greater than a specified key.","source":"Returns an iterator to the first element in a `hash_set` with a key that is equal to or greater than a specified key."},{"pos":[13096,13127],"content":"<bpt id=\"p1\">[</bpt>max_size<ept id=\"p1\">](#hash_set__max_size)</ept>","source":"[max_size](#hash_set__max_size)"},{"pos":[13128,13173],"content":"Returns the maximum length of the <ph id=\"ph1\">`hash_set`</ph>.","source":"Returns the maximum length of the `hash_set`."},{"pos":[13178,13205],"content":"<bpt id=\"p1\">[</bpt>rbegin<ept id=\"p1\">](#hash_set__rbegin)</ept>","source":"[rbegin](#hash_set__rbegin)"},{"pos":[13206,13280],"content":"Returns an iterator addressing the first element in a reversed <ph id=\"ph1\">`hash_set`</ph>.","source":"Returns an iterator addressing the first element in a reversed `hash_set`."},{"pos":[13285,13308],"content":"<bpt id=\"p1\">[</bpt>rend<ept id=\"p1\">](#hash_set__rend)</ept>","source":"[rend](#hash_set__rend)"},{"pos":[13309,13410],"content":"Returns an iterator that addresses the location succeeding the last element in a reversed <ph id=\"ph1\">`hash_set`</ph>.","source":"Returns an iterator that addresses the location succeeding the last element in a reversed `hash_set`."},{"pos":[13415,13438],"content":"<bpt id=\"p1\">[</bpt>size<ept id=\"p1\">](#hash_set__size)</ept>","source":"[size](#hash_set__size)"},{"pos":[13439,13488],"content":"Returns the number of elements in the <ph id=\"ph1\">`hash_set`</ph>.","source":"Returns the number of elements in the `hash_set`."},{"pos":[13493,13516],"content":"<bpt id=\"p1\">[</bpt>swap<ept id=\"p1\">](#hash_set__swap)</ept>","source":"[swap](#hash_set__swap)"},{"pos":[13517,13559],"content":"Exchanges the elements of two <ph id=\"ph1\">`hash_set`</ph>s.","source":"Exchanges the elements of two `hash_set`s."},{"pos":[13564,13601],"content":"<bpt id=\"p1\">[</bpt>upper_bound<ept id=\"p1\">](#hash_set__upper_bound)</ept>","source":"[upper_bound](#hash_set__upper_bound)"},{"pos":[13602,13724],"content":"Returns an iterator to the first element in a <ph id=\"ph1\">`hash_set`</ph> that with a key that is equal to or greater than a specified key.","source":"Returns an iterator to the first element in a `hash_set` that with a key that is equal to or greater than a specified key."},{"pos":[13729,13764],"content":"<bpt id=\"p1\">[</bpt>value_comp<ept id=\"p1\">](#hash_set__value_comp)</ept>","source":"[value_comp](#hash_set__value_comp)"},{"pos":[13765,13866],"content":"Retrieves a copy of the hash traits object used to hash and order element key values in a <ph id=\"ph1\">`hash_set`</ph>.","source":"Retrieves a copy of the hash traits object used to hash and order element key values in a `hash_set`."},{"pos":[13877,13886],"content":"Operators","linkify":"Operators","nodes":[{"content":"Operators","pos":[0,9]}]},{"pos":[13907,13952],"content":"<bpt id=\"p1\">[</bpt>hash_set::operator=<ept id=\"p1\">](#hash_set__operator_eq)</ept>","source":"[hash_set::operator=](#hash_set__operator_eq)"},{"pos":[13953,14025],"content":"Replaces the elements of a <ph id=\"ph1\">`hash_set`</ph> with a copy of another <ph id=\"ph2\">`hash_set`</ph>.","source":"Replaces the elements of a `hash_set` with a copy of another `hash_set`."},{"pos":[14035,14047],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[14051,14073],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> &lt;hash_set&gt;","source":"**Header:** <hash_set>"},{"pos":[14080,14101],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> stdext","source":"**Namespace:** stdext"},{"pos":[14111,14176],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__allocator_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::allocator_type","linkify":"<a name=\"hash_set__allocator_type\"></a>  hash_set::allocator_type","source":"<a name=\"hash_set__allocator_type\"></a>  hash_set::allocator_type"},{"pos":[14184,14302],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"A type that represents the allocator class for the hash_set object.","pos":[14309,14376]},{"pos":[14510,14517],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[14521,14592],"content":"<bpt id=\"p1\">**</bpt>allocator_type<ept id=\"p1\">**</ept> is a synonym for the template parameter <ph id=\"ph1\">`Allocator`</ph>.","source":"**allocator_type** is a synonym for the template parameter `Allocator`."},{"pos":[14599,14729],"content":"For more information on <ph id=\"ph1\">`Allocator`</ph>, see the Remarks section of the <bpt id=\"p1\">[</bpt>hash_set Class<ept id=\"p1\">](../standard-library/hash-set-class.md)</ept> topic.","source":"For more information on `Allocator`, see the Remarks section of the [hash_set Class](../standard-library/hash-set-class.md) topic."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[14736,14974],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[14975,15064],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[15074,15081],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[15086,15186],"content":"See example for <bpt id=\"p1\">[</bpt>get_allocator<ept id=\"p1\">](#hash_set__get_allocator)</ept> for an example that uses <ph id=\"ph1\">`allocator_type`</ph>.","source":"See example for [get_allocator](#hash_set__get_allocator) for an example that uses `allocator_type`."},{"pos":[15196,15243],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__begin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::begin","linkify":"<a name=\"hash_set__begin\"></a>  hash_set::begin","source":"<a name=\"hash_set__begin\"></a>  hash_set::begin"},{"pos":[15251,15369],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"Returns an iterator that addresses the first element in the hash_set.","pos":[15376,15445]},{"pos":[15519,15531],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A bidirectional iterator addressing the first element in the hash_set or the location succeeding an empty hash_set.","pos":[15535,15650]},{"pos":[15660,15667],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the return value of <bpt id=\"p1\">**</bpt>begin<ept id=\"p1\">**</ept> is assigned to a <ph id=\"ph1\">`const_iterator`</ph>, the elements in the hash_set object cannot be modified.","pos":[15671,15794],"source":"If the return value of **begin** is assigned to a `const_iterator`, the elements in the hash_set object cannot be modified."},{"content":"If the return value of <bpt id=\"p1\">**</bpt>begin<ept id=\"p1\">**</ept> is assigned to an <bpt id=\"p2\">**</bpt>iterator<ept id=\"p2\">**</ept>, the elements in the hash_set object can be modified.","pos":[15795,15912],"source":" If the return value of **begin** is assigned to an **iterator**, the elements in the hash_set object can be modified."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[15919,16157],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[16158,16247],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[16257,16264],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[17139,17188],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__cbegin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::cbegin","linkify":"<a name=\"hash_set__cbegin\"></a>  hash_set::cbegin","source":"<a name=\"hash_set__cbegin\"></a>  hash_set::cbegin"},{"pos":[17196,17314],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"Returns a const iterator that addresses the first element in the hash_set.","pos":[17321,17395]},{"pos":[17451,17463],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[17467,17631],"content":"A const bidirectional iterator addressing the first element in the <bpt id=\"p1\">[</bpt>hash_set<ept id=\"p1\">](../standard-library/hash-set-class.md)</ept> or the location succeeding an empty <ph id=\"ph1\">`hash_set`</ph>.","source":"A const bidirectional iterator addressing the first element in the [hash_set](../standard-library/hash-set-class.md) or the location succeeding an empty `hash_set`."},{"pos":[17641,17648],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17652,17744],"content":"With the return value of <ph id=\"ph1\">`cbegin`</ph>, the elements in the <ph id=\"ph2\">`hash_set`</ph> object cannot be modified.","source":"With the return value of `cbegin`, the elements in the `hash_set` object cannot be modified."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[17751,17989],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[17990,18079],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[18089,18096],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[18594,18639],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__cend\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::cend","linkify":"<a name=\"hash_set__cend\"></a>  hash_set::cend","source":"<a name=\"hash_set__cend\"></a>  hash_set::cend"},{"pos":[18647,18765],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"Returns a const iterator that addresses the location succeeding the last element in a hash_set.","pos":[18772,18867]},{"pos":[18921,18933],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A const bidirectional iterator that addresses the location succeeding the last element in a <bpt id=\"p1\">[</bpt>hash_set<ept id=\"p1\">](../standard-library/hash-set-class.md)</ept>.","pos":[18937,19079],"source":"A const bidirectional iterator that addresses the location succeeding the last element in a [hash_set](../standard-library/hash-set-class.md)."},{"content":"If the <ph id=\"ph1\">`hash_set`</ph> is empty, then <ph id=\"ph2\">`hash_set::cend == hash_set::begin`</ph>.","pos":[19080,19149],"source":" If the `hash_set` is empty, then `hash_set::cend == hash_set::begin`."},{"pos":[19159,19166],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`cend`</ph> is used to test whether an iterator has reached the end of its <ph id=\"ph2\">`hash_set`</ph>.","pos":[19170,19251],"source":"`cend` is used to test whether an iterator has reached the end of its `hash_set`."},{"content":"The value returned by <ph id=\"ph1\">`cend`</ph> should not be dereferenced.","pos":[19252,19308],"source":" The value returned by `cend` should not be dereferenced."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[19315,19553],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[19554,19643],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[19653,19660],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[20172,20219],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__clear\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::clear","linkify":"<a name=\"hash_set__clear\"></a>  hash_set::clear","source":"<a name=\"hash_set__clear\"></a>  hash_set::clear"},{"pos":[20227,20345],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"Erases all the elements of a hash_set.","pos":[20352,20390]},{"pos":[20429,20436],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[20440,20678],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[20679,20768],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[20778,20785],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[21391,21456],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__const_iterator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::const_iterator","linkify":"<a name=\"hash_set__const_iterator\"></a>  hash_set::const_iterator","source":"<a name=\"hash_set__const_iterator\"></a>  hash_set::const_iterator"},{"pos":[21464,21582],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"pos":[21589,21685],"content":"A type that provides a bidirectional iterator that can read a <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> element in the hash_set.","source":"A type that provides a bidirectional iterator that can read a **const** element in the hash_set."},{"pos":[21819,21826],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[21830,21903],"content":"A type <ph id=\"ph1\">`const_iterator`</ph> cannot be used to modify the value of an element.","source":"A type `const_iterator` cannot be used to modify the value of an element."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[21910,22148],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[22149,22238],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[22248,22255],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[22260,22344],"content":"See example for <bpt id=\"p1\">[</bpt>begin<ept id=\"p1\">](#hash_set__begin)</ept> for an example that uses <ph id=\"ph1\">`const_iterator`</ph>.","source":"See example for [begin](#hash_set__begin) for an example that uses `const_iterator`."},{"pos":[22354,22417],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__const_pointer\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::const_pointer","linkify":"<a name=\"hash_set__const_pointer\"></a>  hash_set::const_pointer","source":"<a name=\"hash_set__const_pointer\"></a>  hash_set::const_pointer"},{"pos":[22425,22543],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"pos":[22550,22618],"content":"A type that provides a pointer to a <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> element in a hash_set.","source":"A type that provides a pointer to a **const** element in a hash_set."},{"pos":[22750,22757],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[22761,22833],"content":"A type <ph id=\"ph1\">`const_pointer`</ph> cannot be used to modify the value of an element.","source":"A type `const_pointer` cannot be used to modify the value of an element."},{"pos":[22840,22970],"content":"In most cases, a <bpt id=\"p1\">[</bpt>const_iterator<ept id=\"p1\">](#hash_set__const_iterator)</ept> should be used to access the elements in a <bpt id=\"p2\">**</bpt>const<ept id=\"p2\">**</ept> hash_set object.","source":"In most cases, a [const_iterator](#hash_set__const_iterator) should be used to access the elements in a **const** hash_set object."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[22977,23215],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[23216,23305],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[23315,23382],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__const_reference\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::const_reference","linkify":"<a name=\"hash_set__const_reference\"></a>  hash_set::const_reference","source":"<a name=\"hash_set__const_reference\"></a>  hash_set::const_reference"},{"pos":[23390,23508],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"pos":[23515,23640],"content":"A type that provides a reference to a <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> element stored in a hash_set for reading and performing <bpt id=\"p2\">**</bpt>const<ept id=\"p2\">**</ept> operations.","source":"A type that provides a reference to a **const** element stored in a hash_set for reading and performing **const** operations."},{"pos":[23776,23783],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[23787,24025],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[24026,24115],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[24125,24132],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[24840,24921],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__const_reverse_iterator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::const_reverse_iterator","linkify":"<a name=\"hash_set__const_reverse_iterator\"></a>  hash_set::const_reverse_iterator","source":"<a name=\"hash_set__const_reverse_iterator\"></a>  hash_set::const_reverse_iterator"},{"pos":[24929,25047],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"pos":[25054,25152],"content":"A type that provides a bidirectional iterator that can read any <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> element in the hash_set.","source":"A type that provides a bidirectional iterator that can read any **const** element in the hash_set."},{"pos":[25302,25309],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[25313,25437],"content":"A type <ph id=\"ph1\">`const_reverse_iterator`</ph> cannot modify the value of an element and is use to iterate through the hash_set in reverse.","source":"A type `const_reverse_iterator` cannot modify the value of an element and is use to iterate through the hash_set in reverse."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[25444,25682],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[25683,25772],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[25782,25789],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[25794,25907],"content":"See the example for <bpt id=\"p1\">[</bpt>rend<ept id=\"p1\">](#hash_set__rend)</ept> for an example of how to declare and use the <ph id=\"ph1\">`const_reverse_iterator`</ph>","source":"See the example for [rend](#hash_set__rend) for an example of how to declare and use the `const_reverse_iterator`"},{"pos":[25917,25964],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__count\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::count","linkify":"<a name=\"hash_set__count\"></a>  hash_set::count","source":"<a name=\"hash_set__count\"></a>  hash_set::count"},{"pos":[25972,26090],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"Returns the number of elements in a hash_set whose key matches a parameter-specified key.","pos":[26097,26186]},{"pos":[26250,26260],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The key of the elements to be matched from the hash_set.","pos":[26274,26330]},{"pos":[26340,26352],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the hash_set contains an element whose sort key matches the parameter key.","pos":[26356,26435]},{"content":"0 if the hash_set does not contain an element with a matching key.","pos":[26442,26508]},{"pos":[26518,26525],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The member function returns the number of elements in the following range:","pos":[26529,26603]},{"pos":[26610,26670],"content":"[ <bpt id=\"p1\">**</bpt>lower_bound<ept id=\"p1\">**</ept> (_ <bpt id=\"p2\">*</bpt>Key<ept id=\"p2\">*</ept> ), <bpt id=\"p3\">**</bpt>upper_bound<ept id=\"p3\">**</ept> (<ph id=\"ph1\">\\_</ph> <bpt id=\"p4\">*</bpt>Key<ept id=\"p4\">*</ept> ) ).","source":"[ **lower_bound** (_ *Key* ), **upper_bound** (\\_ *Key* ) )."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[26677,26915],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[26916,27005],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[27015,27022],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates the use of the hash_set::count member function.","pos":[27027,27109]},{"pos":[27885,27936],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__crbegin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::crbegin","linkify":"<a name=\"hash_set__crbegin\"></a>  hash_set::crbegin","source":"<a name=\"hash_set__crbegin\"></a>  hash_set::crbegin"},{"pos":[27944,28062],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"Returns a const iterator addressing the first element in a reversed hash_set.","pos":[28069,28146]},{"pos":[28211,28223],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[28227,28433],"content":"A const reverse bidirectional iterator addressing the first element in a reversed <bpt id=\"p1\">[</bpt>hash_set<ept id=\"p1\">](../standard-library/hash-set-class.md)</ept> or addressing what had been the last element in the unreversed <ph id=\"ph1\">`hash_set`</ph>.","source":"A const reverse bidirectional iterator addressing the first element in a reversed [hash_set](../standard-library/hash-set-class.md) or addressing what had been the last element in the unreversed `hash_set`."},{"pos":[28443,28450],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[28454,28565],"content":"<ph id=\"ph1\">`crbegin`</ph> is used with a reversed hash_set just as <bpt id=\"p1\">[</bpt>hash_set::begin<ept id=\"p1\">](#hash_set__begin)</ept> is used with a hash_set.","source":"`crbegin` is used with a reversed hash_set just as [hash_set::begin](#hash_set__begin) is used with a hash_set."},{"pos":[28572,28649],"content":"With the return value of <ph id=\"ph1\">`crbegin`</ph>, the <ph id=\"ph2\">`hash_set`</ph> object cannot be modified.","source":"With the return value of `crbegin`, the `hash_set` object cannot be modified."},{"pos":[28656,28720],"content":"<ph id=\"ph1\">`crbegin`</ph> can be used to iterate through a <ph id=\"ph2\">`hash_set`</ph> backwards.","source":"`crbegin` can be used to iterate through a `hash_set` backwards."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[28727,28965],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[28966,29055],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[29065,29072],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[29641,29688],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__crend\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::crend","linkify":"<a name=\"hash_set__crend\"></a>  hash_set::crend","source":"<a name=\"hash_set__crend\"></a>  hash_set::crend"},{"pos":[29696,29814],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"Returns a const iterator that addresses the location succeeding the last element in a reversed hash_set.","pos":[29821,29925]},{"pos":[29988,30000],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[30004,30243],"content":"A const reverse bidirectional iterator that addresses the location succeeding the last element in a reversed <bpt id=\"p1\">[</bpt>hash_set<ept id=\"p1\">](../standard-library/hash-set-class.md)</ept> (the location that had preceded the first element in the unreversed <ph id=\"ph1\">`hash_set`</ph>).","source":"A const reverse bidirectional iterator that addresses the location succeeding the last element in a reversed [hash_set](../standard-library/hash-set-class.md) (the location that had preceded the first element in the unreversed `hash_set`)."},{"pos":[30253,30260],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[30264,30373],"content":"<ph id=\"ph1\">`crend`</ph> is used with a reversed <ph id=\"ph2\">`hash_set`</ph> just as <bpt id=\"p1\">[</bpt>hash_set::end<ept id=\"p1\">](#hash_set__end)</ept> is used with a <ph id=\"ph3\">`hash_set`</ph>.","source":"`crend` is used with a reversed `hash_set` just as [hash_set::end](#hash_set__end) is used with a `hash_set`."},{"pos":[30380,30455],"content":"With the return value of <ph id=\"ph1\">`crend`</ph>, the <ph id=\"ph2\">`hash_set`</ph> object cannot be modified.","source":"With the return value of `crend`, the `hash_set` object cannot be modified."},{"pos":[30462,30558],"content":"<ph id=\"ph1\">`crend`</ph> can be used to test to whether a reverse iterator has reached the end of its <ph id=\"ph2\">`hash_set`</ph>.","source":"`crend` can be used to test to whether a reverse iterator has reached the end of its `hash_set`."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[30565,30803],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[30804,30893],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[30903,30910],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[31492,31559],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__difference_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::difference_type","linkify":"<a name=\"hash_set__difference_type\"></a>  hash_set::difference_type","source":"<a name=\"hash_set__difference_type\"></a>  hash_set::difference_type"},{"pos":[31567,31685],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"A signed integer type that can be used to represent the number of elements of a hash_set in a range between elements pointed to by iterators.","pos":[31692,31833]},{"pos":[31969,31976],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`difference_type`</ph> is the type returned when subtracting or incrementing through iterators of the container.","pos":[31980,32091],"source":"The `difference_type` is the type returned when subtracting or incrementing through iterators of the container."},{"content":"The <ph id=\"ph1\">`difference_type`</ph> is typically used to represent the number of elements in the range [ <ph id=\"ph2\">` first`</ph>, <ph id=\"ph3\">` last`</ph>) between the iterators <ph id=\"ph4\">` first`</ph> and <ph id=\"ph5\">` last`</ph>, includes the element pointed to by <ph id=\"ph6\">` first`</ph> and the range of elements up to, but not including, the element pointed to by <ph id=\"ph7\">` last`</ph>.","pos":[32092,32376],"source":" The `difference_type` is typically used to represent the number of elements in the range [ ` first`, ` last`) between the iterators ` first` and ` last`, includes the element pointed to by ` first` and the range of elements up to, but not including, the element pointed to by ` last`."},{"pos":[32383,32741],"content":"Note that although <ph id=\"ph1\">`difference_type`</ph> is available for all iterators that satisfy the requirements of an input iterator, which includes the class of bidirectional iterators supported by reversible containers such as set, subtraction between iterators is only supported by random-access iterators provided by a random access container, such as vector or deque.","source":"Note that although `difference_type` is available for all iterators that satisfy the requirements of an input iterator, which includes the class of bidirectional iterators supported by reversible containers such as set, subtraction between iterators is only supported by random-access iterators provided by a random access container, such as vector or deque."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[32748,32986],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[32987,33076],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[33086,33093],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[34771,34822],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__emplace\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::emplace","linkify":"<a name=\"hash_set__emplace\"></a>  hash_set::emplace","source":"<a name=\"hash_set__emplace\"></a>  hash_set::emplace"},{"pos":[34830,34948],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"Inserts an element constructed in place into a hash_set.","pos":[34955,35011]},{"pos":[35112,35122],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[35143,35152]},{"content":"Description","pos":[35153,35164]},{"pos":[35176,35391],"content":"The value of an element to be inserted into the <bpt id=\"p1\">[</bpt>hash_set<ept id=\"p1\">](../standard-library/hash-set-class.md)</ept> unless the <ph id=\"ph1\">`hash_set`</ph> already contains that element or, more generally, an element whose key is equivalently ordered.","source":"The value of an element to be inserted into the [hash_set](../standard-library/hash-set-class.md) unless the `hash_set` already contains that element or, more generally, an element whose key is equivalently ordered."},{"pos":[35402,35414],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[35418,35759],"content":"The <ph id=\"ph1\">`emplace`</ph> member function returns a pair whose <ph id=\"ph2\">`bool`</ph> component returns <ph id=\"ph3\">`true`</ph> if an insertion was make and <ph id=\"ph4\">`false`</ph> if the <ph id=\"ph5\">`hash_set`</ph> already contained an element whose key had an equivalent value in the ordering, and whose iterator component returns the address where a new element was inserted or where the element was already located.","source":"The `emplace` member function returns a pair whose `bool` component returns `true` if an insertion was make and `false` if the `hash_set` already contained an element whose key had an equivalent value in the ordering, and whose iterator component returns the address where a new element was inserted or where the element was already located."},{"pos":[35769,35776],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[35780,36018],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[36019,36108],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[36118,36125],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[36597,36658],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__emplace_hint\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::emplace_hint","linkify":"<a name=\"hash_set__emplace_hint\"></a>  hash_set::emplace_hint","source":"<a name=\"hash_set__emplace_hint\"></a>  hash_set::emplace_hint"},{"pos":[36666,36784],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"Inserts an element constructed in place into a hash_set.","pos":[36791,36847]},{"pos":[36962,36972],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[36993,37002]},{"content":"Description","pos":[37003,37014]},{"pos":[37026,37241],"content":"The value of an element to be inserted into the <bpt id=\"p1\">[</bpt>hash_set<ept id=\"p1\">](../standard-library/hash-set-class.md)</ept> unless the <ph id=\"ph1\">`hash_set`</ph> already contains that element or, more generally, an element whose key is equivalently ordered.","source":"The value of an element to be inserted into the [hash_set](../standard-library/hash-set-class.md) unless the `hash_set` already contains that element or, more generally, an element whose key is equivalently ordered."},{"content":"The place to start searching for the correct point of insertion.","pos":[37255,37319]},{"content":"(Insertion can occur in amortized constant time, instead of logarithmic time, if the insertion point immediately follows <ph id=\"ph1\">`_Where`</ph>.)","pos":[37320,37451],"source":" (Insertion can occur in amortized constant time, instead of logarithmic time, if the insertion point immediately follows `_Where`.)"},{"pos":[37462,37474],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[37478,37708],"content":"The <bpt id=\"p1\">[</bpt>hash_set::emplace<ept id=\"p1\">](#hash_set__emplace)</ept> member function returns an iterator that points to the position where the new element was inserted into the <ph id=\"ph1\">`hash_set`</ph>, or where the existing element with equivalent ordering is located.","source":"The [hash_set::emplace](#hash_set__emplace) member function returns an iterator that points to the position where the new element was inserted into the `hash_set`, or where the existing element with equivalent ordering is located."},{"pos":[37718,37725],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[37729,37858],"content":"Insertion can occur in amortized constant time, instead of logarithmic time, if the insertion point immediately follows <ph id=\"ph1\">`_Where`</ph>.","source":"Insertion can occur in amortized constant time, instead of logarithmic time, if the insertion point immediately follows `_Where`."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[37865,38103],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[38104,38193],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[38203,38210],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[38699,38746],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__empty\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::empty","linkify":"<a name=\"hash_set__empty\"></a>  hash_set::empty","source":"<a name=\"hash_set__empty\"></a>  hash_set::empty"},{"pos":[38754,38872],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"Tests if a hash_set is empty.","pos":[38879,38908]},{"pos":[38953,38965],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38969,39042],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the hash_set is empty; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if the hash_set is nonempty.","source":"**true** if the hash_set is empty; **false** if the hash_set is nonempty."},{"pos":[39052,39059],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[39063,39301],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[39302,39391],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[39401,39408],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[40045,40088],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__end\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::end","linkify":"<a name=\"hash_set__end\"></a>  hash_set::end","source":"<a name=\"hash_set__end\"></a>  hash_set::end"},{"pos":[40096,40214],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"Returns an iterator that addresses the location succeeding the last element in a hash_set.","pos":[40221,40311]},{"pos":[40381,40393],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A bidirectional iterator that addresses the location succeeding the last element in a hash_set.","pos":[40397,40492]},{"content":"If the hash_set is empty, then hash_set::end == hash_set::begin.","pos":[40493,40557]},{"pos":[40567,40574],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<bpt id=\"p1\">**</bpt>end<ept id=\"p1\">**</ept> is used to test whether an iterator has reached the end of its hash_set.","pos":[40578,40658],"source":"**end** is used to test whether an iterator has reached the end of its hash_set."},{"content":"The value returned by <bpt id=\"p1\">**</bpt>end<ept id=\"p1\">**</ept> should not be dereferenced.","pos":[40659,40716],"source":" The value returned by **end** should not be dereferenced."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[40723,40961],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[40962,41051],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[41061,41068],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[41962,42021],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__equal_range\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::equal_range","linkify":"<a name=\"hash_set__equal_range\"></a>  hash_set::equal_range","source":"<a name=\"hash_set__equal_range\"></a>  hash_set::equal_range"},{"pos":[42029,42147],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"Returns a pair of iterators respectively to the first element in a hash set with a key that is equal to a specified key and to the first element in the hash set with a key that is greater than the key.","pos":[42154,42355]},{"pos":[42511,42521],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The argument key to be compared with the sort key of an element from the hash_set being searched.","pos":[42535,42632]},{"pos":[42642,42654],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[42658,42875],"content":"A pair of iterators where the first is the <bpt id=\"p1\">[</bpt>lower_bound<ept id=\"p1\">](../standard-library/set-class.md#set__lower_bound)</ept> of the key and the second is the <bpt id=\"p2\">[</bpt>upper_bound<ept id=\"p2\">](../standard-library/set-class.md#set__upper_bound)</ept> of the key.","source":"A pair of iterators where the first is the [lower_bound](../standard-library/set-class.md#set__lower_bound) of the key and the second is the [upper_bound](../standard-library/set-class.md#set__upper_bound) of the key."},{"content":"To access the first iterator of a pair pr returned by the member function, use <ph id=\"ph1\">`pr`</ph>.","pos":[42882,42966],"source":"To access the first iterator of a pair pr returned by the member function, use `pr`."},{"content":"<bpt id=\"p1\">**</bpt>first<ept id=\"p1\">**</ept>, and to dereference the lower bound iterator, use <ph id=\"ph1\">\\*</ph>( <ph id=\"ph2\">`pr`</ph>.","pos":[42967,43036],"source":"**first**, and to dereference the lower bound iterator, use \\*( `pr`."},{"content":"<bpt id=\"p1\">**</bpt>first<ept id=\"p1\">**</ept>).","pos":[43037,43048],"source":"**first**)."},{"content":"To access the second iterator of a pair <ph id=\"ph1\">`pr`</ph> returned by the member function, use <ph id=\"ph2\">`pr`</ph>.","pos":[43049,43136],"source":" To access the second iterator of a pair `pr` returned by the member function, use `pr`."},{"content":"<bpt id=\"p1\">**</bpt>second<ept id=\"p1\">**</ept>, and to dereference the upper bound iterator, use <ph id=\"ph1\">\\*</ph>( <ph id=\"ph2\">`pr`</ph>.","pos":[43137,43207],"source":"**second**, and to dereference the upper bound iterator, use \\*( `pr`."},{"content":"<bpt id=\"p1\">**</bpt>second<ept id=\"p1\">**</ept>).","pos":[43208,43220],"source":"**second**)."},{"pos":[43230,43237],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[43241,43479],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[43480,43569],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[43579,43586],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[45495,45542],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__erase\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::erase","linkify":"<a name=\"hash_set__erase\"></a>  hash_set::erase","source":"<a name=\"hash_set__erase\"></a>  hash_set::erase"},{"pos":[45550,45668],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"Removes an element or a range of elements in a hash_set from specified positions or removes elements that match a specified key.","pos":[45675,45803]},{"pos":[45948,45958],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Position of the element to be removed from the hash_set.","pos":[45974,46030]},{"content":"Position of the first element removed from the hash_set.","pos":[46049,46105]},{"content":"Position just beyond the last element removed from the hash_set.","pos":[46123,46187]},{"content":"The key of the elements to be removed from the hash_set.","pos":[46204,46260]},{"pos":[46270,46282],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"For the first two member functions, a bidirectional iterator that designates the first element remaining beyond any elements removed, or a pointer to the end of the hash_set if no such element exists.","pos":[46286,46486]},{"content":"For the third member function, the number of elements that have been removed from the hash_set.","pos":[46487,46582]},{"pos":[46592,46599],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The member functions never throw an exception.","pos":[46603,46649]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[46656,46894],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[46895,46984],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[46994,47001],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates the use of the hash_set::erase member function.","pos":[47006,47088]},{"pos":[49623,49668],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__find\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::find","linkify":"<a name=\"hash_set__find\"></a>  hash_set::find","source":"<a name=\"hash_set__find\"></a>  hash_set::find"},{"pos":[49676,49794],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"Returns an iterator addressing the location of an element in a hash_set that has a key equivalent to a specified key.","pos":[49801,49918]},{"pos":[50018,50028],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The argument key to be matched by the sort key of an element from the hash_set being searched.","pos":[50042,50136]},{"pos":[50146,50158],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[50162,50378],"content":"An <bpt id=\"p1\">**</bpt>iterator<ept id=\"p1\">**</ept> or <ph id=\"ph1\">`const_iterator`</ph> that addresses the location of an element equivalent to a specified key or that addresses the location succeeding the last element in the hash_set if no match is found for the key.","source":"An **iterator** or `const_iterator` that addresses the location of an element equivalent to a specified key or that addresses the location succeeding the last element in the hash_set if no match is found for the key."},{"pos":[50388,50395],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[50399,50628],"content":"The member function returns an iterator that addresses an element in the hash_set whose sort key is <bpt id=\"p1\">**</bpt>equivalent<ept id=\"p1\">**</ept> to the argument key under a binary predicate that induces an ordering based on a less-than comparability relation.","source":"The member function returns an iterator that addresses an element in the hash_set whose sort key is **equivalent** to the argument key under a binary predicate that induces an ordering based on a less-than comparability relation."},{"content":"If the return value of <bpt id=\"p1\">**</bpt>find<ept id=\"p1\">**</ept> is assigned to a <ph id=\"ph1\">`const_iterator`</ph>, the hash_set object cannot be modified.","pos":[50635,50741],"source":"If the return value of **find** is assigned to a `const_iterator`, the hash_set object cannot be modified."},{"content":"If the return value of <bpt id=\"p1\">**</bpt>find<ept id=\"p1\">**</ept> is assigned to an <bpt id=\"p2\">**</bpt>iterator<ept id=\"p2\">**</ept>, the hash_set object can be modified.","pos":[50742,50842],"source":" If the return value of **find** is assigned to an **iterator**, the hash_set object can be modified."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[50849,51087],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[51088,51177],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[51187,51194],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[52646,52709],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__get_allocator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::get_allocator","linkify":"<a name=\"hash_set__get_allocator\"></a>  hash_set::get_allocator","source":"<a name=\"hash_set__get_allocator\"></a>  hash_set::get_allocator"},{"pos":[52717,52835],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"Returns a copy of the allocator object used to construct the hash_set.","pos":[52842,52912]},{"pos":[52970,52982],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[52986,53083],"content":"The allocator used by the hash_set to manage memory, which is the template parameter <ph id=\"ph1\">`Allocator`</ph>.","source":"The allocator used by the hash_set to manage memory, which is the template parameter `Allocator`."},{"pos":[53090,53220],"content":"For more information on <ph id=\"ph1\">`Allocator`</ph>, see the Remarks section of the <bpt id=\"p1\">[</bpt>hash_set Class<ept id=\"p1\">](../standard-library/hash-set-class.md)</ept> topic.","source":"For more information on `Allocator`, see the Remarks section of the [hash_set Class](../standard-library/hash-set-class.md) topic."},{"pos":[53230,53237],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Allocators for the hash_set class specify how the class manages storage.","pos":[53241,53313]},{"content":"The default allocators supplied with STL container classes is sufficient for most programming needs.","pos":[53314,53414]},{"content":"Writing and using your own allocator class is an advanced C++ topic.","pos":[53415,53483]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[53490,53728],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[53729,53818],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[53828,53835],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[55419,55472],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__hash_set\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::hash_set","linkify":"<a name=\"hash_set__hash_set\"></a>  hash_set::hash_set","source":"<a name=\"hash_set__hash_set\"></a>  hash_set::hash_set"},{"pos":[55480,55598],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"pos":[55605,55701],"content":"Constructs a <ph id=\"ph1\">`hash_set`</ph> that is empty or that is a copy of all or part of some other <ph id=\"ph2\">`hash_set`</ph>.","source":"Constructs a `hash_set` that is empty or that is a copy of all or part of some other `hash_set`."},{"pos":[56529,56539],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[56560,56569]},{"content":"Description","pos":[56570,56581]},{"pos":[56591,56688],"content":"The storage allocator class to be used for this <ph id=\"ph1\">`hash_set`</ph> object, which defaults to <ph id=\"ph2\">`Allocator`</ph>.","source":"The storage allocator class to be used for this `hash_set` object, which defaults to `Allocator`."},{"pos":[56700,56826],"content":"The comparison function of type <ph id=\"ph1\">`const Traits`</ph> used to order the elements in the <ph id=\"ph2\">`hash_set`</ph>, which defaults to <ph id=\"ph3\">`hash_compare`</ph>.","source":"The comparison function of type `const Traits` used to order the elements in the `hash_set`, which defaults to `hash_compare`."},{"pos":[56839,56906],"content":"The <ph id=\"ph1\">`hash_set`</ph> of which the constructed <ph id=\"ph2\">`hash_set`</ph> is to be a copy.","source":"The `hash_set` of which the constructed `hash_set` is to be a copy."},{"content":"The position of the first element in the range of elements to be copied.","pos":[56919,56991]},{"content":"The position of the first element beyond the range of elements to be copied.","pos":[57003,57079]},{"pos":[57090,57097],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"All constructors store a type of allocator object that manages memory storage for the <ph id=\"ph1\">`hash_set`</ph> and that can later be returned by calling <bpt id=\"p1\">[</bpt>hash_set::get_allocator<ept id=\"p1\">](#hash_set__get_allocator)</ept>.","pos":[57101,57292],"source":"All constructors store a type of allocator object that manages memory storage for the `hash_set` and that can later be returned by calling [hash_set::get_allocator](#hash_set__get_allocator)."},{"content":"The allocator parameter is often omitted in the class declarations and preprocessing macros used to substitute alternative allocators.","pos":[57293,57427]},{"content":"All constructors initialize their hash_sets.","pos":[57434,57478]},{"content":"All constructors store a function object of type <ph id=\"ph1\">`Traits`</ph> that is used to establish an order among the keys of the <ph id=\"ph2\">`hash_set`</ph> and that can later be returned by calling <bpt id=\"p1\">[</bpt>hash_set::key_comp<ept id=\"p1\">](#hash_set__key_comp)</ept>.","pos":[57485,57695],"source":"All constructors store a function object of type `Traits` that is used to establish an order among the keys of the `hash_set` and that can later be returned by calling [hash_set::key_comp](#hash_set__key_comp)."},{"content":"For more information on <ph id=\"ph1\">`Traits`</ph> see the <bpt id=\"p1\">[</bpt>hash_set Class<ept id=\"p1\">](../standard-library/hash-set-class.md)</ept> topic.","pos":[57696,57799],"source":" For more information on `Traits` see the [hash_set Class](../standard-library/hash-set-class.md) topic."},{"content":"The first constructor creates an empty initial <ph id=\"ph1\">`hash_set`</ph> The second specifies the type of comparison function ( <ph id=\"ph2\">`Comp`</ph>) to be used in establishing the order of the elements, and the third explicitly specifies the allocator type ( <ph id=\"ph3\">`Al`</ph>) to be used.","pos":[57806,58054],"source":"The first constructor creates an empty initial `hash_set` The second specifies the type of comparison function ( `Comp`) to be used in establishing the order of the elements, and the third explicitly specifies the allocator type ( `Al`) to be used."},{"content":"The key word <ph id=\"ph1\">`explicit`</ph> suppresses certain kinds of automatic type conversion.","pos":[58055,58133],"source":" The key word `explicit` suppresses certain kinds of automatic type conversion."},{"pos":[58140,58214],"content":"The fourth and fifth constructors specify a copy of the <ph id=\"ph1\">`hash_set``Right`</ph>.","source":"The fourth and fifth constructors specify a copy of the `hash_set``Right`."},{"content":"The last sixth, seventh, and eighth constructors use an initializer_list for the elements.","pos":[58221,58311]},{"pos":[58318,58495],"content":"The last constructors copy the range [ <ph id=\"ph1\">`First`</ph>, <ph id=\"ph2\">`Last`</ph>) of a <ph id=\"ph3\">`hash_set`</ph> with increasing explicitness in specifying the type of comparison function of class Traits and allocator.","source":"The last constructors copy the range [ `First`, `Last`) of a `hash_set` with increasing explicitness in specifying the type of comparison function of class Traits and allocator."},{"pos":[58502,58553],"content":"The eighth constructor moves the <ph id=\"ph1\">`hash_set``Right`</ph>.","source":"The eighth constructor moves the `hash_set``Right`."},{"pos":[58560,58834],"content":"The actual order of elements in a <ph id=\"ph1\">`hash_set`</ph> container depends on the hash function, the ordering function and the current size of the hash table and cannot, in general, be predicted as it could with the set container, where it was determined by the ordering function alone.","source":"The actual order of elements in a `hash_set` container depends on the hash function, the ordering function and the current size of the hash table and cannot, in general, be predicted as it could with the set container, where it was determined by the ordering function alone."},{"pos":[58844,58893],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__insert\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::insert","linkify":"<a name=\"hash_set__insert\"></a>  hash_set::insert","source":"<a name=\"hash_set__insert\"></a>  hash_set::insert"},{"pos":[58901,59019],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"pos":[59026,59086],"content":"Inserts an element or a range of elements into a <ph id=\"ph1\">`hash_set`</ph>.","source":"Inserts an element or a range of elements into a `hash_set`."},{"pos":[59390,59400],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[59421,59430]},{"content":"Description","pos":[59431,59442]},{"pos":[59453,59629],"content":"The value of an element to be inserted into the <ph id=\"ph1\">`hash_set`</ph> unless the <ph id=\"ph2\">`hash_set`</ph> already contains that element or, more generally, an element whose key is equivalently ordered.","source":"The value of an element to be inserted into the `hash_set` unless the `hash_set` already contains that element or, more generally, an element whose key is equivalently ordered."},{"content":"The place to start searching for the correct point of insertion.","pos":[59642,59706]},{"content":"(Insertion can occur in amortized constant time, instead of logarithmic time, if the insertion point immediately follows <ph id=\"ph1\">`_Where`</ph>.)","pos":[59707,59838],"source":" (Insertion can occur in amortized constant time, instead of logarithmic time, if the insertion point immediately follows `_Where`.)"},{"pos":[59851,59916],"content":"The position of the first element to be copied from a <ph id=\"ph1\">`hash_set`</ph>.","source":"The position of the first element to be copied from a `hash_set`."},{"pos":[59928,60001],"content":"The position just beyond the last element to be copied from a <ph id=\"ph1\">`hash_set`</ph>.","source":"The position just beyond the last element to be copied from a `hash_set`."},{"content":"The initializer_list from which to copy the elements.","pos":[60014,60067]},{"pos":[60078,60090],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[60094,60440],"content":"The first <ph id=\"ph1\">`insert`</ph> member function returns a pair whose <ph id=\"ph2\">`bool`</ph> component returns <ph id=\"ph3\">`true`</ph> if an insertion was make and <ph id=\"ph4\">`false`</ph> if the <ph id=\"ph5\">`hash_set`</ph> already contained an element whose key had an equivalent value in the ordering, and whose iterator component returns the address where a new element was inserted or where the element was already located.","source":"The first `insert` member function returns a pair whose `bool` component returns `true` if an insertion was make and `false` if the `hash_set` already contained an element whose key had an equivalent value in the ordering, and whose iterator component returns the address where a new element was inserted or where the element was already located."},{"content":"To access the iterator component of a pair <ph id=\"ph1\">`pr`</ph> returned by this member function, use <ph id=\"ph2\">`pr.first`</ph> and to dereference it, use <ph id=\"ph3\">`*(pr.first)`</ph>.","pos":[60447,60585],"source":"To access the iterator component of a pair `pr` returned by this member function, use `pr.first` and to dereference it, use `*(pr.first)`."},{"content":"To access the <ph id=\"ph1\">`bool`</ph> component of a pair <ph id=\"ph2\">`pr`</ph> returned by this member function, use <ph id=\"ph3\">`pr.second`</ph>, and to dereference it, use <ph id=\"ph4\">`*(pr.second)`</ph>.","pos":[60586,60725],"source":" To access the `bool` component of a pair `pr` returned by this member function, use `pr.second`, and to dereference it, use `*(pr.second)`."},{"pos":[60732,60871],"content":"The second <ph id=\"ph1\">`insert`</ph> member function returns an iterator that points to the position where the new element was inserted into the <ph id=\"ph2\">`hash_set`</ph>.","source":"The second `insert` member function returns an iterator that points to the position where the new element was inserted into the `hash_set`."},{"pos":[60881,60888],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The third member function inserts the elements in an initializer_list.","pos":[60892,60962]},{"pos":[60969,61168],"content":"The third member function inserts the sequence of element values into a <ph id=\"ph1\">`hash_set`</ph> corresponding to each element addressed by an iterator of in the range [ <ph id=\"ph2\">`First`</ph>, <ph id=\"ph3\">`Last`</ph>) of a specified <ph id=\"ph4\">`hash_set`</ph>.","source":"The third member function inserts the sequence of element values into a `hash_set` corresponding to each element addressed by an iterator of in the range [ `First`, `Last`) of a specified `hash_set`."},{"pos":[61178,61231],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__iterator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::iterator","linkify":"<a name=\"hash_set__iterator\"></a>  hash_set::iterator","source":"<a name=\"hash_set__iterator\"></a>  hash_set::iterator"},{"pos":[61239,61357],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"A type that provides a bidirectional iterator that can read or modify any element in a hash_set.","pos":[61364,61460]},{"pos":[61582,61589],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[61593,61659],"content":"A type <bpt id=\"p1\">**</bpt>iterator<ept id=\"p1\">**</ept> can be used to modify the value of an element.","source":"A type **iterator** can be used to modify the value of an element."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[61666,61904],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[61905,61994],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[62004,62011],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[62016,62116],"content":"See the example for <bpt id=\"p1\">[</bpt>begin<ept id=\"p1\">](#hash_set__begin)</ept> for an example of how to declare and use <bpt id=\"p2\">**</bpt>iterator<ept id=\"p2\">**</ept>.","source":"See the example for [begin](#hash_set__begin) for an example of how to declare and use **iterator**."},{"pos":[62126,62179],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__key_comp\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::key_comp","linkify":"<a name=\"hash_set__key_comp\"></a>  hash_set::key_comp","source":"<a name=\"hash_set__key_comp\"></a>  hash_set::key_comp"},{"pos":[62187,62305],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"Retrieves a copy of the hash traits object used to hash and order element key values in a hash_set.","pos":[62312,62411]},{"pos":[62466,62478],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[62482,62595],"content":"Returns the function object that a hash_set uses to order its elements, which is the template parameter <ph id=\"ph1\">`Traits`</ph>.","source":"Returns the function object that a hash_set uses to order its elements, which is the template parameter `Traits`."},{"pos":[62602,62705],"content":"For more information on <ph id=\"ph1\">`Traits`</ph> see the <bpt id=\"p1\">[</bpt>hash_set Class<ept id=\"p1\">](../standard-library/hash-set-class.md)</ept> topic.","source":"For more information on `Traits` see the [hash_set Class](../standard-library/hash-set-class.md) topic."},{"pos":[62715,62722],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The stored object defines the member function:","pos":[62726,62772]},{"pos":[62779,62849],"content":"<bpt id=\"p1\">**</bpt>bool operator<ept id=\"p1\">**</ept>( <bpt id=\"p2\">**</bpt>const Key&amp;<ept id=\"p2\">**</ept> _ <bpt id=\"p3\">*</bpt>xVal<ept id=\"p3\">*</ept>, <bpt id=\"p4\">**</bpt>const Key&amp;<ept id=\"p4\">**</ept> <ph id=\"ph1\">\\_</ph> <ph id=\"ph2\">`yVal`</ph>);","source":"**bool operator**( **const Key&** _ *xVal*, **const Key&** \\_ `yVal`);"},{"pos":[62856,62945],"content":"which returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if <ph id=\"ph1\">`_xVal`</ph> precedes and is not equal to <ph id=\"ph2\">`_yVal`</ph> in the sort order.","source":"which returns **true** if `_xVal` precedes and is not equal to `_yVal` in the sort order."},{"content":"Note that both <bpt id=\"p1\">[</bpt>key_compare<ept id=\"p1\">](#hash_set__key_compare)</ept> and <bpt id=\"p2\">[</bpt>value_compare<ept id=\"p2\">](#hash_set__value_compare)</ept> are synonyms for the template parameter <bpt id=\"p3\">**</bpt>Traits<ept id=\"p3\">**</ept>.","pos":[62952,63102],"source":"Note that both [key_compare](#hash_set__key_compare) and [value_compare](#hash_set__value_compare) are synonyms for the template parameter **Traits**."},{"content":"Both types are provided for the hash_set and hash_multiset classes, where they are identical, for compatibility with the hash_map and hash_multimap classes, where they are distinct.","pos":[63103,63284]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[63291,63529],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[63530,63619],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[63629,63636],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[64902,64961],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__key_compare\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::key_compare","linkify":"<a name=\"hash_set__key_compare\"></a>  hash_set::key_compare","source":"<a name=\"hash_set__key_compare\"></a>  hash_set::key_compare"},{"pos":[64969,65087],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"A type that provides a function object that can compare two sort keys to determine the relative order of two elements in the hash_set.","pos":[65094,65228]},{"pos":[65283,65290],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[65294,65357],"content":"<ph id=\"ph1\">`key_compare`</ph> is a synonym for the template parameter <ph id=\"ph2\">`Traits`</ph>.","source":"`key_compare` is a synonym for the template parameter `Traits`."},{"pos":[65364,65467],"content":"For more information on <ph id=\"ph1\">`Traits`</ph> see the <bpt id=\"p1\">[</bpt>hash_set Class<ept id=\"p1\">](../standard-library/hash-set-class.md)</ept> topic.","source":"For more information on `Traits` see the [hash_set Class](../standard-library/hash-set-class.md) topic."},{"content":"Note that both <ph id=\"ph1\">`key_compare`</ph> and <bpt id=\"p1\">[</bpt>value_compare<ept id=\"p1\">](#hash_set__value_compare)</ept> are synonyms for the template parameter <bpt id=\"p2\">**</bpt>Traits<ept id=\"p2\">**</ept>.","pos":[65474,65600],"source":"Note that both `key_compare` and [value_compare](#hash_set__value_compare) are synonyms for the template parameter **Traits**."},{"content":"Both types are provided for the set and multiset classes, where they are identical, for compatibility with the map and multimap classes, where they are distinct.","pos":[65601,65762]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[65769,66007],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[66008,66097],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[66107,66114],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[66119,66226],"content":"See the example for <bpt id=\"p1\">[</bpt>key_comp<ept id=\"p1\">](#hash_set__key_comp)</ept> for an example of how to declare and use <ph id=\"ph1\">`key_compare`</ph>.","source":"See the example for [key_comp](#hash_set__key_comp) for an example of how to declare and use `key_compare`."},{"pos":[66236,66289],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__key_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::key_type","linkify":"<a name=\"hash_set__key_type\"></a>  hash_set::key_type","source":"<a name=\"hash_set__key_type\"></a>  hash_set::key_type"},{"pos":[66297,66415],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"A type that describes an object stored as an element of a hash_set in its capacity as sort key.","pos":[66422,66517]},{"pos":[66566,66573],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[66577,66636],"content":"<bpt id=\"p1\">**</bpt>key_type<ept id=\"p1\">**</ept> is a synonym for the template parameter <ph id=\"ph1\">`Key`</ph>.","source":"**key_type** is a synonym for the template parameter `Key`."},{"pos":[66643,66767],"content":"For more information on <ph id=\"ph1\">`Key`</ph>, see the Remarks section of the <bpt id=\"p1\">[</bpt>hash_set Class<ept id=\"p1\">](../standard-library/hash-set-class.md)</ept> topic.","source":"For more information on `Key`, see the Remarks section of the [hash_set Class](../standard-library/hash-set-class.md) topic."},{"content":"Note that both <ph id=\"ph1\">`key_type`</ph> and <bpt id=\"p1\">[</bpt>value_type<ept id=\"p1\">](#hash_set__value_type)</ept> are synonyms for the template parameter <bpt id=\"p2\">**</bpt>Key<ept id=\"p2\">**</ept>.","pos":[66774,66888],"source":"Note that both `key_type` and [value_type](#hash_set__value_type) are synonyms for the template parameter **Key**."},{"content":"Both types are provided for the hash_set and hash_multiset classes, where they are identical, for compatibility with the hash_map and hash_multimap classes, where they are distinct.","pos":[66889,67070]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[67077,67315],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[67316,67405],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[67415,67422],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[67427,67535],"content":"See the example for <bpt id=\"p1\">[</bpt>value_type<ept id=\"p1\">](#hash_set__value_type)</ept> for an example of how to declare and use <ph id=\"ph1\">`key_type`</ph>.","source":"See the example for [value_type](#hash_set__value_type) for an example of how to declare and use `key_type`."},{"pos":[67545,67604],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__lower_bound\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::lower_bound","linkify":"<a name=\"hash_set__lower_bound\"></a>  hash_set::lower_bound","source":"<a name=\"hash_set__lower_bound\"></a>  hash_set::lower_bound"},{"pos":[67612,67730],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"Returns an iterator to the first element in a hash_set with a key that is equal to or greater than a specified key.","pos":[67737,67852]},{"pos":[67966,67976],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The argument key to be compared with the sort key of an element from the hash_set being searched.","pos":[67990,68087]},{"pos":[68097,68109],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[68113,68379],"content":"An <bpt id=\"p1\">**</bpt>iterator<ept id=\"p1\">**</ept> or <ph id=\"ph1\">`const_iterator`</ph> that addresses the location of an element in a hash_set that with a key that is equal to or greater than the argument key or that addresses the location succeeding the last element in the hash_set if no match is found for the key.","source":"An **iterator** or `const_iterator` that addresses the location of an element in a hash_set that with a key that is equal to or greater than the argument key or that addresses the location succeeding the last element in the hash_set if no match is found for the key."},{"pos":[68389,68396],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[68400,68638],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[68639,68728],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[68738,68745],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[70228,70281],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__max_size\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::max_size","linkify":"<a name=\"hash_set__max_size\"></a>  hash_set::max_size","source":"<a name=\"hash_set__max_size\"></a>  hash_set::max_size"},{"pos":[70289,70407],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"Returns the maximum length of the hash_set.","pos":[70414,70457]},{"pos":[70510,70522],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The maximum possible length of the hash_set.","pos":[70526,70570]},{"pos":[70580,70587],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[70591,70829],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[70830,70919],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[70929,70936],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[71328,71385],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::operator=","linkify":"<a name=\"hash_set__operator_eq\"></a>  hash_set::operator=","source":"<a name=\"hash_set__operator_eq\"></a>  hash_set::operator="},{"pos":[71393,71511],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"Replaces the elements of the hash_set with a copy of another hash_set.","pos":[71518,71588]},{"pos":[71697,71707],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[71728,71737]},{"content":"Description","pos":[71738,71749]},{"pos":[71763,71850],"content":"The <bpt id=\"p1\">[</bpt>hash_set<ept id=\"p1\">](../standard-library/hash-set-class.md)</ept> being copied into the <ph id=\"ph1\">`hash_set`</ph>.","source":"The [hash_set](../standard-library/hash-set-class.md) being copied into the `hash_set`."},{"pos":[71861,71868],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[71872,72005],"content":"After erasing any existing elements in a <ph id=\"ph1\">`hash_set`</ph>, <ph id=\"ph2\">`operator=`</ph> either copies or moves the contents of <ph id=\"ph3\">` right`</ph> into the <ph id=\"ph4\">`hash_set`</ph>.","source":"After erasing any existing elements in a `hash_set`, `operator=` either copies or moves the contents of ` right` into the `hash_set`."},{"pos":[72015,72022],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[72775,72826],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__pointer\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::pointer","linkify":"<a name=\"hash_set__pointer\"></a>  hash_set::pointer","source":"<a name=\"hash_set__pointer\"></a>  hash_set::pointer"},{"pos":[72834,72952],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"A type that provides a pointer to an element in a hash_set.","pos":[72959,73018]},{"pos":[73138,73145],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[73149,73214],"content":"A type <bpt id=\"p1\">**</bpt>pointer<ept id=\"p1\">**</ept> can be used to modify the value of an element.","source":"A type **pointer** can be used to modify the value of an element."},{"pos":[73221,73330],"content":"In most cases, an <bpt id=\"p1\">[</bpt>iterator<ept id=\"p1\">](#hash_set__iterator)</ept> should be used to access the elements in a hash_set object.","source":"In most cases, an [iterator](#hash_set__iterator) should be used to access the elements in a hash_set object."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[73337,73575],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[73576,73665],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[73675,73724],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__rbegin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::rbegin","linkify":"<a name=\"hash_set__rbegin\"></a>  hash_set::rbegin","source":"<a name=\"hash_set__rbegin\"></a>  hash_set::rbegin"},{"pos":[73732,73850],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"Returns an iterator addressing the first element in a reversed hash_set.","pos":[73857,73929]},{"pos":[74021,74033],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reverse bidirectional iterator addressing the first element in a reversed hash_set or addressing what had been the last element in the unreversed hash_set.","pos":[74037,74194]},{"pos":[74204,74211],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[74215,74315],"content":"<ph id=\"ph1\">`rbegin`</ph> is used with a reversed hash_set just as <bpt id=\"p1\">[</bpt>begin<ept id=\"p1\">](#hash_set__begin)</ept> is used with a hash_set.","source":"`rbegin` is used with a reversed hash_set just as [begin](#hash_set__begin) is used with a hash_set."},{"content":"If the return value of <ph id=\"ph1\">`rbegin`</ph> is assigned to a <ph id=\"ph2\">`const_reverse_iterator`</ph>, then the hash_set object cannot be modified.","pos":[74322,74441],"source":"If the return value of `rbegin` is assigned to a `const_reverse_iterator`, then the hash_set object cannot be modified."},{"content":"If the return value of <ph id=\"ph1\">`rbegin`</ph> is assigned to a <ph id=\"ph2\">`reverse_iterator`</ph>, then the hash_set object can be modified.","pos":[74442,74552],"source":" If the return value of `rbegin` is assigned to a `reverse_iterator`, then the hash_set object can be modified."},{"pos":[74559,74620],"content":"<ph id=\"ph1\">`rbegin`</ph> can be used to iterate through a hash_set backwards.","source":"`rbegin` can be used to iterate through a hash_set backwards."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[74627,74865],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[74866,74955],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[74965,74972],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[76573,76628],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__reference\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::reference","linkify":"<a name=\"hash_set__reference\"></a>  hash_set::reference","source":"<a name=\"hash_set__reference\"></a>  hash_set::reference"},{"pos":[76636,76754],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"A type that provides a reference to an element stored in a hash_set.","pos":[76761,76829]},{"pos":[76953,76960],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[76964,77202],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[77203,77292],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[77302,77309],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[78137,78182],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__rend\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::rend","linkify":"<a name=\"hash_set__rend\"></a>  hash_set::rend","source":"<a name=\"hash_set__rend\"></a>  hash_set::rend"},{"pos":[78190,78308],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"Returns an iterator that addresses the location succeeding the last element in a reversed hash_set.","pos":[78315,78414]},{"pos":[78502,78514],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reverse bidirectional iterator that addresses the location succeeding the last element in a reversed hash_set (the location that had preceded the first element in the unreversed hash_set).","pos":[78518,78708]},{"pos":[78718,78725],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[78729,78823],"content":"<ph id=\"ph1\">`rend`</ph> is used with a reversed hash_set just as <bpt id=\"p1\">[</bpt>end<ept id=\"p1\">](#hash_set__end)</ept> is used with a hash_set.","source":"`rend` is used with a reversed hash_set just as [end](#hash_set__end) is used with a hash_set."},{"content":"If the return value of <ph id=\"ph1\">`rend`</ph> is assigned to a <ph id=\"ph2\">`const_reverse_iterator`</ph>, then the hash_set object cannot be modified.","pos":[78830,78947],"source":"If the return value of `rend` is assigned to a `const_reverse_iterator`, then the hash_set object cannot be modified."},{"content":"If the return value of <ph id=\"ph1\">`rend`</ph> is assigned to a <ph id=\"ph2\">`reverse_iterator`</ph>, then the hash_set object can be modified.","pos":[78948,79056],"source":" If the return value of `rend` is assigned to a `reverse_iterator`, then the hash_set object can be modified."},{"content":"The value returned by <ph id=\"ph1\">`rend`</ph> should not be dereferenced.","pos":[79057,79113],"source":" The value returned by `rend` should not be dereferenced."},{"pos":[79120,79213],"content":"<ph id=\"ph1\">`rend`</ph> can be used to test to whether a reverse iterator has reached the end of its hash_set.","source":"`rend` can be used to test to whether a reverse iterator has reached the end of its hash_set."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[79220,79458],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[79459,79548],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[79558,79565],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[81214,81283],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__reverse_iterator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::reverse_iterator","linkify":"<a name=\"hash_set__reverse_iterator\"></a>  hash_set::reverse_iterator","source":"<a name=\"hash_set__reverse_iterator\"></a>  hash_set::reverse_iterator"},{"pos":[81291,81409],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"A type that provides a bidirectional iterator that can read or modify an element in a reversed hash_set.","pos":[81416,81520]},{"pos":[81658,81665],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[81669,81745],"content":"A type <ph id=\"ph1\">`reverse_iterator`</ph> is use to iterate through the hash_set in reverse.","source":"A type `reverse_iterator` is use to iterate through the hash_set in reverse."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[81752,81990],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[81991,82080],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[82090,82097],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[82102,82210],"content":"See the example for <bpt id=\"p1\">[</bpt>rbegin<ept id=\"p1\">](#hash_set__rbegin)</ept> for an example of how to declare and use <ph id=\"ph1\">`reverse_iterator`</ph>.","source":"See the example for [rbegin](#hash_set__rbegin) for an example of how to declare and use `reverse_iterator`."},{"pos":[82220,82265],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__size\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::size","linkify":"<a name=\"hash_set__size\"></a>  hash_set::size","source":"<a name=\"hash_set__size\"></a>  hash_set::size"},{"pos":[82273,82391],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"Returns the number of elements in the hash_set.","pos":[82398,82445]},{"pos":[82494,82506],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current length of the hash_set.","pos":[82510,82545]},{"pos":[82555,82562],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[82566,82804],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[82805,82894],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[82904,82911],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[83471,83526],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__size_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::size_type","linkify":"<a name=\"hash_set__size_type\"></a>  hash_set::size_type","source":"<a name=\"hash_set__size_type\"></a>  hash_set::size_type"},{"pos":[83534,83652],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"An unsigned integer type that can represent the number of elements in a hash_set.","pos":[83659,83740]},{"pos":[83864,83871],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[83875,84113],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[84114,84203],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[84213,84220],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[84225,84321],"content":"See the example for <bpt id=\"p1\">[</bpt>size<ept id=\"p1\">](#hash_set__size)</ept> for an example of how to declare and use <ph id=\"ph1\">`size_type`</ph>","source":"See the example for [size](#hash_set__size) for an example of how to declare and use `size_type`"},{"pos":[84331,84376],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__swap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::swap","linkify":"<a name=\"hash_set__swap\"></a>  hash_set::swap","source":"<a name=\"hash_set__swap\"></a>  hash_set::swap"},{"pos":[84384,84502],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"Exchanges the elements of two hash_sets.","pos":[84509,84549]},{"pos":[84602,84612],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The argument hash_set providing the elements to be swapped with the target hash_set.","pos":[84628,84712]},{"pos":[84722,84729],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The member function invalidates no references, pointers, or iterators that designate elements in the two hash_sets whose elements are being exchanged.","pos":[84733,84883]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[84890,85128],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[85129,85218],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[85228,85235],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[86580,86639],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__upper_bound\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::upper_bound","linkify":"<a name=\"hash_set__upper_bound\"></a>  hash_set::upper_bound","source":"<a name=\"hash_set__upper_bound\"></a>  hash_set::upper_bound"},{"pos":[86647,86765],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"Returns an iterator to the first element in a hash_set that with a key that is greater than a specified key.","pos":[86772,86880]},{"pos":[86994,87004],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The argument key to be compared with the sort key of an element from the hash_set being searched.","pos":[87018,87115]},{"pos":[87125,87137],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[87141,87408],"content":"An <bpt id=\"p1\">**</bpt>iterator<ept id=\"p1\">**</ept> or <ph id=\"ph1\">`const_iterator`</ph> that addresses the location of an element in a hash_set that with a key that is equal to or greater than the argument key, or that addresses the location succeeding the last element in the hash_set if no match is found for the key.","source":"An **iterator** or `const_iterator` that addresses the location of an element in a hash_set that with a key that is equal to or greater than the argument key, or that addresses the location succeeding the last element in the hash_set if no match is found for the key."},{"pos":[87418,87425],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[87429,87667],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[87668,87757],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[87767,87774],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[89343,89400],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__value_comp\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::value_comp","linkify":"<a name=\"hash_set__value_comp\"></a>  hash_set::value_comp","source":"<a name=\"hash_set__value_comp\"></a>  hash_set::value_comp"},{"pos":[89408,89526],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"Retrieves a copy of the comparison object used to order element values in a hash_set.","pos":[89533,89618]},{"pos":[89677,89689],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[89693,89807],"content":"Returns the function object that a hash_set uses to order its elements, which is the template parameter <ph id=\"ph1\">`Compare`</ph>.","source":"Returns the function object that a hash_set uses to order its elements, which is the template parameter `Compare`."},{"pos":[89814,89942],"content":"For more information on <ph id=\"ph1\">`Compare`</ph>, see the Remarks section of the <bpt id=\"p1\">[</bpt>hash_set Class<ept id=\"p1\">](../standard-library/hash-set-class.md)</ept> topic.","source":"For more information on `Compare`, see the Remarks section of the [hash_set Class](../standard-library/hash-set-class.md) topic."},{"pos":[89952,89959],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The stored object defines the member function:","pos":[89963,90009]},{"pos":[90016,90086],"content":"<bpt id=\"p1\">**</bpt>bool operator<ept id=\"p1\">**</ept>( <bpt id=\"p2\">**</bpt>const Key&amp;<ept id=\"p2\">**</ept> _ <bpt id=\"p3\">*</bpt>xVal<ept id=\"p3\">*</ept>, <bpt id=\"p4\">**</bpt>const Key&amp;<ept id=\"p4\">**</ept> <ph id=\"ph1\">\\_</ph> <ph id=\"ph2\">`yVal`</ph>);","source":"**bool operator**( **const Key&** _ *xVal*, **const Key&** \\_ `yVal`);"},{"pos":[90093,90182],"content":"which returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if <ph id=\"ph1\">`_xVal`</ph> precedes and is not equal to <ph id=\"ph2\">`_yVal`</ph> in the sort order.","source":"which returns **true** if `_xVal` precedes and is not equal to `_yVal` in the sort order."},{"content":"Note that both <bpt id=\"p1\">[</bpt>value_compare<ept id=\"p1\">](../standard-library/set-class.md#set__value_compare)</ept> and <bpt id=\"p2\">[</bpt>key_compare<ept id=\"p2\">](../standard-library/set-class.md#set__key_compare)</ept> are synonyms for the template parameter <ph id=\"ph1\">`Compare`</ph>.","pos":[90189,90392],"source":"Note that both [value_compare](../standard-library/set-class.md#set__value_compare) and [key_compare](../standard-library/set-class.md#set__key_compare) are synonyms for the template parameter `Compare`."},{"content":"Both types are provided for the hash_set and hash_multiset classes, where they are identical, for compatibility with the hash_map and hash_multimap classes, where they are distinct.","pos":[90393,90574]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[90581,90819],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[90820,90909],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[90919,90926],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[92200,92263],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__value_compare\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::value_compare","linkify":"<a name=\"hash_set__value_compare\"></a>  hash_set::value_compare","source":"<a name=\"hash_set__value_compare\"></a>  hash_set::value_compare"},{"pos":[92271,92389],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"A type that provides two function objects, a binary predicate of class compare that can compare two element values of a hash_set to determine their relative order and a unary predicate that hashes the elements.","pos":[92396,92606]},{"pos":[92668,92675],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[92679,92746],"content":"<bpt id=\"p1\">**</bpt>value_compare<ept id=\"p1\">**</ept> is a synonym for the template parameter <ph id=\"ph1\">`Traits`</ph>.","source":"**value_compare** is a synonym for the template parameter `Traits`."},{"pos":[92753,92856],"content":"For more information on <ph id=\"ph1\">`Traits`</ph> see the <bpt id=\"p1\">[</bpt>hash_set Class<ept id=\"p1\">](../standard-library/hash-set-class.md)</ept> topic.","source":"For more information on `Traits` see the [hash_set Class](../standard-library/hash-set-class.md) topic."},{"content":"Note that both <bpt id=\"p1\">[</bpt>key_compare<ept id=\"p1\">](#hash_set__key_compare)</ept> and <bpt id=\"p2\">**</bpt>value_compare<ept id=\"p2\">**</ept> are synonyms for the template parameter <bpt id=\"p3\">**</bpt>Traits<ept id=\"p3\">**</ept>.","pos":[92863,92989],"source":"Note that both [key_compare](#hash_set__key_compare) and **value_compare** are synonyms for the template parameter **Traits**."},{"content":"Both types are provided for the hash_set and hash_multiset classes, where they are identical, for compatibility with the hash_map and hash_multimap classes, where they are distinct.","pos":[92990,93171]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[93178,93416],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[93417,93506],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[93516,93523],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[93528,93641],"content":"See the example for <bpt id=\"p1\">[</bpt>value_comp<ept id=\"p1\">](#hash_set__value_comp)</ept> for an example of how to declare and use <ph id=\"ph1\">`value_compare`</ph>.","source":"See the example for [value_comp](#hash_set__value_comp) for an example of how to declare and use `value_compare`."},{"pos":[93651,93708],"content":"<bpt id=\"p1\">&lt;a name=\"hash_set__value_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_set::value_type","linkify":"<a name=\"hash_set__value_type\"></a>  hash_set::value_type","source":"<a name=\"hash_set__value_type\"></a>  hash_set::value_type"},{"pos":[93716,93834],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_set Class<ept id=\"p1\">](../standard-library/unordered-set-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_set Class](../standard-library/unordered-set-class.md)."}]}]},{"content":"A type that describes an object stored as an element of a hash_set in its capacity as a value.","pos":[93841,93935]},{"pos":[93986,93993],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[94938,94946],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Thread Safety in the C++ Standard Library<ept id=\"p1\">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept><ph id=\"ph1\"> </ph>","pos":[94950,95060],"source":"[Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C++ Standard Library Reference<ept id=\"p1\">](../standard-library/cpp-standard-library-reference.md)</ept>","pos":[95063,95151],"source":" [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)"}],"content":"---\ntitle: \"hash_set Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"hash_set/stdext::hash_set\"\n  - \"std::hash_set\"\n  - \"std.hash_set\"\n  - \"stdext::hash_set\"\n  - \"hash_set\"\n  - \"stdext.hash_set\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"hash_set class\"\nms.assetid: c765c06e-cbb6-48c2-93ca-d15468eb28d7\ncaps.latest.revision: 22\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# hash_set Class\n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n The container class hash_set is an extension of the Standard Template Library (STL) and is used for the storage and fast retrieval of data from a collection in which the values of the elements contained are unique and serve as the key values.  \n  \n## Syntax  \n  \n```  \ntemplate <class Key,   \n    class Traits=hash_compare<Key, less<Key>>,   \n    class Allocator=allocator<Key>>  \nclass hash_set  \n```  \n  \n#### Parameters  \n `Key`  \n The element data type to be stored in the hash_set.  \n  \n `Traits`  \n The type which includes two function objects, one of class compare that is a binary predicate able to compare two element values as sort keys to determine their relative order and a hash function that is a unary predicate mapping key values of the elements to unsigned integers of type **size_t**. This argument is optional, and the `hash_compare`*<Key,* **less***\\<Key> >* is the default value.  \n  \n `Allocator`  \n The type that represents the stored allocator object that encapsulates details about the hash_set's allocation and deallocation of memory. This argument is optional, and the default value is **allocator***\\<Key>.*  \n  \n## Remarks  \n The hash_set is:  \n  \n-   An associative container, which a variable size container that supports the efficient retrieval of element values based on an associated key value. Further, it is a simple associative container because its element values are its key values.  \n  \n-   Reversible, because it provides a bidirectional iterator to access its elements.  \n  \n-   Hashed, because its elements are grouped into buckets based on the value of a hash function applied to the key values of the elements.  \n  \n-   Unique in the sense that each of its elements must have a unique key. Because hash_set is also a simple associative container, its elements are also unique.  \n  \n-   A template class because the functionality it provides is generic and so independent of the specific type of data contained as elements or keys. The data types to be used for elements and keys are, instead, specified as parameters in the class template along with the comparison function and allocator.  \n  \n The main advantage of hashing over sorting is greater efficiency; a successful hashing performs insertions, deletions, and finds in constant average time as compared with a time proportional to the logarithm of the number of elements in the container for sorting techniques. The value of an element in a set may not be changed directly. Instead, you must delete old values and insert elements with new values.  \n  \n The choice of container type should be based in general on the type of searching and inserting required by the application. Hashed associative containers are optimized for the operations of lookup, insertion and removal. The member functions that explicitly support these operations are efficient when used with a well-designed hash function, performing them in a time that is on average constant and not dependent on the number of elements in the container. A well-designed hash function produces a uniform distribution of hashed values and minimizes the number of collisions, where a collision is said to occur when distinct key values are mapped into the same hashed value. In the worst case, with the worst possible hash function, the number of operations is proportional to the number of elements in the sequence (linear time).  \n  \n The hash_set should be the associative container of choice when the conditions associating the values with their keys are satisfied by the application. The elements of a hash_set are unique and serve as their own sort keys. A model for this type of structure is an ordered list of, say, words in which the words may occur only once. If multiple occurrences of the words were allowed, then a hash_multiset would be the appropriate container structure. If values need to be attached to a list of unique key words, then a hash_map would be an appropriate structure to contain this data. If instead the keys are not unique, then a hash_multimap would be the container of choice.  \n  \n The hash_set orders the sequence it controls by calling a stored hash **Traits** object of type [value_compare](#hash_set__value_compare). This stored object may be accessed by calling the member function [key_comp](#hash_set__key_comp). Such a function object must behave the same as an object of class *hash_compare<Key, less\\<Key> >.* Specifically, for all values ` key` of type Key, the call Trait( ` key` ) yields a distribution of values of type size_t.  \n  \n In general, the elements need be merely less than comparable to establish this order: so that, given any two elements, it may be determined either that they are equivalent (in the sense that neither is less than the other) or that one is less than the other. This results in an ordering between the non-equivalent elements. On a more technical note, the comparison function is a binary predicate that induces a strict weak ordering in the standard mathematical sense. A binary predicate *f*( *x*, *y*) is a function object that has two argument objects x and y and a return value of true or false. An ordering imposed on a hash_set is a strict weak ordering if the binary predicate is irreflexive, antisymmetric, and transitive and if equivalence is transitive, where two objects *x* and *y* are defined to be equivalent when both *f*( *x*, *y*) and *f*( *y*, *x*) are false. If the stronger condition of equality between keys replaces that of equivalence, then the ordering becomes total (in the sense that all the elements are ordered with respect to each other) and the keys matched will be indiscernible from each other.  \n  \n The actual order of elements in the controlled sequence depends on the hash function, the ordering function, and the current size of the hash table stored in the container object. You cannot determine the current size of the hash table, so you cannot in general predict the order of elements in the controlled sequence. Inserting elements invalidates no iterators, and removing elements invalidates only those iterators that had specifically pointed at the removed elements.  \n  \n The iterator provided by the hash_set class is a bidirectional iterator, but the class member functions [insert](#hash_set__insert) and [hash_set](#hash_set__hash_set) have versions that take as template parameters a weaker input iterator, whose functionality requirements are more minimal than those guaranteed by the class of bidirectional iterators. The different iterator concepts form a family related by refinements in their functionality. Each iterator concept has its own set of requirements, and the algorithms that work with them must limit their assumptions to the requirements provided by that type of iterator. It may be assumed that an input iterator may be dereferenced to refer to some object and that it may be incremented to the next iterator in the sequence. This is a minimal set of functionality, but it is enough to be able to talk meaningfully about a range of iterators [ ` first`, ` last`) in the context of the class member functions.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[hash_set](#hash_set__hash_set)|Constructs a `hash_set` that is empty or that is a copy of all or part of some other `hash_set`.|  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|[allocator_type](#hash_set__allocator_type)|A type that represents the `allocator` class for the `hash_set` object.|  \n|[const_iterator](#hash_set__const_iterator)|A type that provides a bidirectional iterator that can read a `const` element in the `hash_set`.|  \n|[const_pointer](#hash_set__const_pointer)|A type that provides a pointer to a `const` element in a `hash_set`.|  \n|[const_reference](#hash_set__const_reference)|A type that provides a reference to a `const` element stored in a `hash_set` for reading and performing `const` operations.|  \n|[const_reverse_iterator](#hash_set__const_reverse_iterator)|A type that provides a bidirectional iterator that can read any `const` element in the `hash_set`.|  \n|[difference_type](#hash_set__difference_type)|A signed integer type that can be used to represent the number of elements of a `hash_set` in a range between elements pointed to by iterators.|  \n|[iterator](#hash_set__iterator)|A type that provides a bidirectional iterator that can read or modify any element in a `hash_set`.|  \n|[key_compare](#hash_set__key_compare)|A type that provides a function object that can compare two sort keys to determine the relative order of two elements in the `hash_set`.|  \n|[key_type](#hash_set__key_type)|A type that describes an object stored as an element of a `hash_set` in its capacity as sort key.|  \n|[pointer](#hash_set__pointer)|A type that provides a pointer to an element in a `hash_set`.|  \n|[reference](#hash_set__reference)|A type that provides a reference to an element stored in a `hash_set`.|  \n|[reverse_iterator](#hash_set__reverse_iterator)|A type that provides a bidirectional iterator that can read or modify an element in a reversed `hash_set`.|  \n|[size_type](#hash_set__size_type)|An unsigned integer type that can represent the number of elements in a `hash_set`.|  \n|[value_compare](#hash_set__value_compare)|A type that provides two function objects, a binary predicate of class compare that can compare two element values of a `hash_set` to determine their relative order and a unary predicate that hashes the elements.|  \n|[value_type](#hash_set__value_type)|A type that describes an object stored as an element of a `hash_set` in its capacity as a value.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[begin](#hash_set__begin)|Returns an iterator that addresses the first element in the `hash_set`.|  \n|[hash_set::cbegin](#hash_set__cbegin)|Returns a const iterator addressing the first element in the `hash_set`.|  \n|[hash_set::cend](#hash_set__cend)|Returns a const iterator that addresses the location succeeding the last element in a `hash_set`.|  \n|[clear](#hash_set__clear)|Erases all the elements of a `hash_set`.|  \n|[count](#hash_set__count)|Returns the number of elements in a `hash_set` whose key matches a parameter-specified key.|  \n|[hash_set::crbegin](#hash_set__crbegin)|Returns a const iterator addressing the first element in a reversed `hash_set`.|  \n|[hash_set::crend](#hash_set__crend)|Returns a const iterator that addresses the location succeeding the last element in a reversed `hash_set`.|  \n|[hash_set::emplace](#hash_set__emplace)|Inserts an element constructed in place into a `hash_set`.|  \n|[hash_set::emplace_hint](#hash_set__emplace_hint)|Inserts an element constructed in place into a `hash_set`, with a placement hint.|  \n|[empty](#hash_set__empty)|Tests if a `hash_set` is empty.|  \n|[end](#hash_set__end)|Returns an iterator that addresses the location succeeding the last element in a `hash_set`.|  \n|[equal_range](#hash_set__equal_range)|Returns a pair of iterators respectively to the first element in a `hash_set` with a key that is greater than a specified key and to the first element in the `hash_set` with a key that is equal to or greater than the key.|  \n|[erase](#hash_set__erase)|Removes an element or a range of elements in a `hash_set` from specified positions or removes elements that match a specified key.|  \n|[find](#hash_set__find)|Returns an iterator addressing the location of an element in a `hash_set` that has a key equivalent to a specified key.|  \n|[get_allocator](#hash_set__get_allocator)|Returns a copy of the `allocator` object used to construct the `hash_set`.|  \n|[insert](#hash_set__insert)|Inserts an element or a range of elements into a `hash_set`.|  \n|[key_comp](#hash_set__key_comp)|Retrieves a copy of the comparison object used to order keys in a `hash_set`.|  \n|[lower_bound](#hash_set__lower_bound)|Returns an iterator to the first element in a `hash_set` with a key that is equal to or greater than a specified key.|  \n|[max_size](#hash_set__max_size)|Returns the maximum length of the `hash_set`.|  \n|[rbegin](#hash_set__rbegin)|Returns an iterator addressing the first element in a reversed `hash_set`.|  \n|[rend](#hash_set__rend)|Returns an iterator that addresses the location succeeding the last element in a reversed `hash_set`.|  \n|[size](#hash_set__size)|Returns the number of elements in the `hash_set`.|  \n|[swap](#hash_set__swap)|Exchanges the elements of two `hash_set`s.|  \n|[upper_bound](#hash_set__upper_bound)|Returns an iterator to the first element in a `hash_set` that with a key that is equal to or greater than a specified key.|  \n|[value_comp](#hash_set__value_comp)|Retrieves a copy of the hash traits object used to hash and order element key values in a `hash_set`.|  \n  \n### Operators  \n  \n|||  \n|-|-|  \n|[hash_set::operator=](#hash_set__operator_eq)|Replaces the elements of a `hash_set` with a copy of another `hash_set`.|  \n  \n## Requirements  \n **Header:** <hash_set>  \n  \n **Namespace:** stdext  \n  \n##  <a name=\"hash_set__allocator_type\"></a>  hash_set::allocator_type  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n A type that represents the allocator class for the hash_set object.  \n  \n```  \ntypedef list<typename Traits::value_type, typename Traits::allocator_type>::allocator_type allocator_type;  \n```  \n  \n### Remarks  \n **allocator_type** is a synonym for the template parameter `Allocator`.  \n  \n For more information on `Allocator`, see the Remarks section of the [hash_set Class](../standard-library/hash-set-class.md) topic.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  See example for [get_allocator](#hash_set__get_allocator) for an example that uses `allocator_type`.  \n  \n##  <a name=\"hash_set__begin\"></a>  hash_set::begin  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n Returns an iterator that addresses the first element in the hash_set.  \n  \n```  \nconst_iterator begin() const;\n\niterator begin();\n```  \n  \n### Return Value  \n A bidirectional iterator addressing the first element in the hash_set or the location succeeding an empty hash_set.  \n  \n### Remarks  \n If the return value of **begin** is assigned to a `const_iterator`, the elements in the hash_set object cannot be modified. If the return value of **begin** is assigned to an **iterator**, the elements in the hash_set object can be modified.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_set_begin.cpp  \n// compile with: /EHsc  \n#include <hash_set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_set <int> hs1;  \n   hash_set <int>::iterator hs1_Iter;  \n   hash_set <int>::const_iterator hs1_cIter;  \n  \n   hs1.insert( 1 );  \n   hs1.insert( 2 );  \n   hs1.insert( 3 );  \n  \n   hs1_Iter = hs1.begin( );  \n   cout << \"The first element of hs1 is \" << *hs1_Iter << endl;  \n  \n   hs1_Iter = hs1.begin( );  \n   hs1.erase( hs1_Iter );  \n  \n   // The following 2 lines would err because the iterator is const  \n   // hs1_cIter = hs1.begin( );  \n   // hs1.erase( hs1_cIter );  \n  \n   hs1_cIter = hs1.begin( );  \n   cout << \"The first element of hs1 is now \" << *hs1_cIter << endl;  \n}  \n```  \n  \n```Output  \nThe first element of hs1 is 1  \nThe first element of hs1 is now 2  \n```  \n  \n##  <a name=\"hash_set__cbegin\"></a>  hash_set::cbegin  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n Returns a const iterator that addresses the first element in the hash_set.  \n  \n```  \nconst_iterator cbegin() const;\n```  \n  \n### Return Value  \n A const bidirectional iterator addressing the first element in the [hash_set](../standard-library/hash-set-class.md) or the location succeeding an empty `hash_set`.  \n  \n### Remarks  \n With the return value of `cbegin`, the elements in the `hash_set` object cannot be modified.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_set_cbegin.cpp  \n// compile with: /EHsc  \n#include <hash_set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_set <int> hs1;  \n   hash_set <int>::const_iterator hs1_cIter;  \n  \n   hs1.insert( 1 );  \n   hs1.insert( 2 );  \n   hs1.insert( 3 );  \n  \n   hs1_cIter = hs1.cbegin( );  \n   cout << \"The first element of hs1 is \" << *hs1_cIter << endl;  \n}  \n```  \n  \n```Output  \nThe first element of hs1 is 1  \n```  \n  \n##  <a name=\"hash_set__cend\"></a>  hash_set::cend  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n Returns a const iterator that addresses the location succeeding the last element in a hash_set.  \n  \n```  \nconst_iterator cend() const;\n```  \n  \n### Return Value  \n A const bidirectional iterator that addresses the location succeeding the last element in a [hash_set](../standard-library/hash-set-class.md). If the `hash_set` is empty, then `hash_set::cend == hash_set::begin`.  \n  \n### Remarks  \n `cend` is used to test whether an iterator has reached the end of its `hash_set`. The value returned by `cend` should not be dereferenced.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_set_cend.cpp  \n// compile with: /EHsc  \n#include <hash_set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_set <int> hs1;  \n   hash_set <int> :: const_iterator hs1_cIter;  \n  \n   hs1.insert( 1 );  \n   hs1.insert( 2 );  \n   hs1.insert( 3 );  \n  \n   hs1_cIter = hs1.cend( );  \n   hs1_cIter--;  \n   cout << \"The last element of hs1 is \" << *hs1_cIter << endl;  \n}  \n```  \n  \n```Output  \nThe last element of hs1 is 3  \n```  \n  \n##  <a name=\"hash_set__clear\"></a>  hash_set::clear  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n Erases all the elements of a hash_set.  \n  \n```  \nvoid clear();\n```  \n  \n### Remarks  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_set_clear.cpp  \n// compile with: /EHsc  \n#include <hash_set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_set <int> hs1;  \n  \n   hs1.insert( 1 );  \n   hs1.insert( 2 );  \n  \n   cout << \"The size of the hash_set is initially \" << hs1.size( )  \n        << \".\" << endl;  \n  \n   hs1.clear( );  \n   cout << \"The size of the hash_set after clearing is \"   \n        << hs1.size( ) << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe size of the hash_set is initially 2.  \nThe size of the hash_set after clearing is 0.  \n```  \n  \n##  <a name=\"hash_set__const_iterator\"></a>  hash_set::const_iterator  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n A type that provides a bidirectional iterator that can read a **const** element in the hash_set.  \n  \n```  \ntypedef list<typename Traits::value_type, typename Traits::allocator_type>::const_iterator const_iterator;  \n```  \n  \n### Remarks  \n A type `const_iterator` cannot be used to modify the value of an element.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  See example for [begin](#hash_set__begin) for an example that uses `const_iterator`.  \n  \n##  <a name=\"hash_set__const_pointer\"></a>  hash_set::const_pointer  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n A type that provides a pointer to a **const** element in a hash_set.  \n  \n```  \ntypedef list<typename Traits::value_type, typename Traits::allocator_type>::const_pointer const_pointer;  \n```  \n  \n### Remarks  \n A type `const_pointer` cannot be used to modify the value of an element.  \n  \n In most cases, a [const_iterator](#hash_set__const_iterator) should be used to access the elements in a **const** hash_set object.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n##  <a name=\"hash_set__const_reference\"></a>  hash_set::const_reference  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n A type that provides a reference to a **const** element stored in a hash_set for reading and performing **const** operations.  \n  \n```  \ntypedef list<typename Traits::value_type, typename Traits::allocator_type>::const_reference const_reference;  \n```  \n  \n### Remarks  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_set_const_ref.cpp  \n// compile with: /EHsc  \n#include <hash_set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_set <int> hs1;  \n  \n   hs1.insert( 10 );  \n   hs1.insert( 20 );  \n  \n   // Declare and initialize a const_reference &Ref1   \n   // to the 1st element  \n   const int &Ref1 = *hs1.begin( );  \n  \n   cout << \"The first element in the hash_set is \"  \n        << Ref1 << \".\" << endl;  \n  \n   // The following line would cause an error because the   \n   // const_reference cannot be used to modify the hash_set  \n   // Ref1 = Ref1 + 5;  \n}  \n```  \n  \n```Output  \nThe first element in the hash_set is 10.  \n```  \n  \n##  <a name=\"hash_set__const_reverse_iterator\"></a>  hash_set::const_reverse_iterator  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n A type that provides a bidirectional iterator that can read any **const** element in the hash_set.  \n  \n```  \ntypedef list<typename Traits::value_type, typename Traits::allocator_type>::const_reverse_iterator const_reverse_iterator;  \n```  \n  \n### Remarks  \n A type `const_reverse_iterator` cannot modify the value of an element and is use to iterate through the hash_set in reverse.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  See the example for [rend](#hash_set__rend) for an example of how to declare and use the `const_reverse_iterator`  \n  \n##  <a name=\"hash_set__count\"></a>  hash_set::count  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n Returns the number of elements in a hash_set whose key matches a parameter-specified key.  \n  \n```  \nsize_type count(const Key& key) const;\n```  \n  \n### Parameters  \n ` key`  \n The key of the elements to be matched from the hash_set.  \n  \n### Return Value  \n 1 if the hash_set contains an element whose sort key matches the parameter key.  \n  \n 0 if the hash_set does not contain an element with a matching key.  \n  \n### Remarks  \n The member function returns the number of elements in the following range:  \n  \n [ **lower_bound** (_ *Key* ), **upper_bound** (\\_ *Key* ) ).  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  The following example demonstrates the use of the hash_set::count member function.  \n  \n```  \n// hash_set_count.cpp  \n// compile with: /EHsc  \n#include <hash_set>  \n#include <iostream>  \n  \nint main( )  \n{  \n    using namespace std;  \n    using namespace stdext;  \n    hash_set<int> hs1;  \n    hash_set<int>::size_type i;  \n  \n    hs1.insert(1);  \n    hs1.insert(1);  \n  \n    // Keys must be unique in hash_set, so duplicates are ignored.  \n    i = hs1.count(1);  \n    cout << \"The number of elements in hs1 with a sort key of 1 is: \"  \n         << i << \".\" << endl;  \n  \n    i = hs1.count(2);  \n    cout << \"The number of elements in hs1 with a sort key of 2 is: \"  \n         << i << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe number of elements in hs1 with a sort key of 1 is: 1.  \nThe number of elements in hs1 with a sort key of 2 is: 0.  \n```  \n  \n##  <a name=\"hash_set__crbegin\"></a>  hash_set::crbegin  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n Returns a const iterator addressing the first element in a reversed hash_set.  \n  \n```  \nconst_reverse_iterator crbegin() const;\n```  \n  \n### Return Value  \n A const reverse bidirectional iterator addressing the first element in a reversed [hash_set](../standard-library/hash-set-class.md) or addressing what had been the last element in the unreversed `hash_set`.  \n  \n### Remarks  \n `crbegin` is used with a reversed hash_set just as [hash_set::begin](#hash_set__begin) is used with a hash_set.  \n  \n With the return value of `crbegin`, the `hash_set` object cannot be modified.  \n  \n `crbegin` can be used to iterate through a `hash_set` backwards.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_set_crbegin.cpp  \n// compile with: /EHsc  \n#include <hash_set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_set <int> hs1;  \n   hash_set <int>::const_reverse_iterator hs1_crIter;  \n  \n   hs1.insert( 10 );  \n   hs1.insert( 20 );  \n   hs1.insert( 30 );  \n  \n   hs1_crIter = hs1.crbegin( );  \n   cout << \"The first element in the reversed hash_set is \"  \n        << *hs1_crIter << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe first element in the reversed hash_set is 30.  \n```  \n  \n##  <a name=\"hash_set__crend\"></a>  hash_set::crend  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n Returns a const iterator that addresses the location succeeding the last element in a reversed hash_set.  \n  \n```  \nconst_reverse_iterator crend() const;\n```  \n  \n### Return Value  \n A const reverse bidirectional iterator that addresses the location succeeding the last element in a reversed [hash_set](../standard-library/hash-set-class.md) (the location that had preceded the first element in the unreversed `hash_set`).  \n  \n### Remarks  \n `crend` is used with a reversed `hash_set` just as [hash_set::end](#hash_set__end) is used with a `hash_set`.  \n  \n With the return value of `crend`, the `hash_set` object cannot be modified.  \n  \n `crend` can be used to test to whether a reverse iterator has reached the end of its `hash_set`.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_set_crend.cpp  \n// compile with: /EHsc  \n#include <hash_set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_set <int> hs1;  \n   hash_set <int>::const_reverse_iterator hs1_crIter;  \n  \n   hs1.insert( 10 );  \n   hs1.insert( 20 );  \n   hs1.insert( 30 );  \n  \n   hs1_crIter = hs1.crend( );  \n   hs1_crIter--;  \n   cout << \"The last element in the reversed hash_set is \"  \n        << *hs1_crIter << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe last element in the reversed hash_set is 10.  \n```  \n  \n##  <a name=\"hash_set__difference_type\"></a>  hash_set::difference_type  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n A signed integer type that can be used to represent the number of elements of a hash_set in a range between elements pointed to by iterators.  \n  \n```  \ntypedef list<typename Traits::value_type, typename Traits::allocator_type>::difference_type difference_type;  \n```  \n  \n### Remarks  \n The `difference_type` is the type returned when subtracting or incrementing through iterators of the container. The `difference_type` is typically used to represent the number of elements in the range [ ` first`, ` last`) between the iterators ` first` and ` last`, includes the element pointed to by ` first` and the range of elements up to, but not including, the element pointed to by ` last`.  \n  \n Note that although `difference_type` is available for all iterators that satisfy the requirements of an input iterator, which includes the class of bidirectional iterators supported by reversible containers such as set, subtraction between iterators is only supported by random-access iterators provided by a random access container, such as vector or deque.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_set_diff_type.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <hash_set>  \n#include <algorithm>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n  \n   hash_set <int> hs1;  \n   hash_set <int>::iterator hs1_Iter, hs1_bIter, hs1_eIter;  \n  \n   hs1.insert( 20 );  \n   hs1.insert( 10 );  \n   hs1.insert( 20 );   // Won't insert as hash_set elements are unique  \n  \n   hs1_bIter = hs1.begin( );  \n   hs1_eIter = hs1.end( );  \n  \n   hash_set <int>::difference_type   df_typ5, df_typ10, df_typ20;  \n  \n   df_typ5 = count( hs1_bIter, hs1_eIter, 5 );  \n   df_typ10 = count( hs1_bIter, hs1_eIter, 10 );  \n   df_typ20 = count( hs1_bIter, hs1_eIter, 20 );  \n  \n   // The keys, and hence the elements, of a hash_set are unique,  \n   // so there is at most one of a given value  \n   cout << \"The number '5' occurs \" << df_typ5  \n        << \" times in hash_set hs1.\\n\";  \n   cout << \"The number '10' occurs \" << df_typ10  \n        << \" times in hash_set hs1.\\n\";  \n   cout << \"The number '20' occurs \" << df_typ20  \n        << \" times in hash_set hs1.\\n\";  \n  \n   // Count the number of elements in a hash_set  \n   hash_set <int>::difference_type  df_count = 0;  \n   hs1_Iter = hs1.begin( );  \n   while ( hs1_Iter != hs1_eIter)  \n   {  \n      df_count++;  \n      hs1_Iter++;  \n   }  \n  \n   cout << \"The number of elements in the hash_set hs1 is: \"   \n        << df_count << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe number '5' occurs 0 times in hash_set hs1.  \nThe number '10' occurs 1 times in hash_set hs1.  \nThe number '20' occurs 1 times in hash_set hs1.  \nThe number of elements in the hash_set hs1 is: 2.  \n```  \n  \n##  <a name=\"hash_set__emplace\"></a>  hash_set::emplace  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n Inserts an element constructed in place into a hash_set.  \n  \n```  \ntemplate <class ValTy>  \npair <iterator, bool>  \nemplace(\n    ValTy&& val);\n```  \n  \n### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|` val`|The value of an element to be inserted into the [hash_set](../standard-library/hash-set-class.md) unless the `hash_set` already contains that element or, more generally, an element whose key is equivalently ordered.|  \n  \n### Return Value  \n The `emplace` member function returns a pair whose `bool` component returns `true` if an insertion was make and `false` if the `hash_set` already contained an element whose key had an equivalent value in the ordering, and whose iterator component returns the address where a new element was inserted or where the element was already located.  \n  \n### Remarks  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_set_emplace.cpp  \n// compile with: /EHsc  \n#include <hash_set>  \n#include <iostream>  \n#include <string>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_set<string> hs3;  \n   string str1(\"a\");  \n  \n   hs3.emplace(move(str1));  \n   cout << \"After the emplace insertion, hs3 contains \"  \n      << *hs3.begin() << \".\" << endl;  \n}  \n```  \n  \n```Output  \nAfter the emplace insertion, hs3 contains a.  \n```  \n  \n##  <a name=\"hash_set__emplace_hint\"></a>  hash_set::emplace_hint  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n Inserts an element constructed in place into a hash_set.  \n  \n```  \ntemplate <class ValTy>  \niterator emplace(\n    const_iterator _Where,  \n    ValTy&& val);\n```  \n  \n### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|` val`|The value of an element to be inserted into the [hash_set](../standard-library/hash-set-class.md) unless the `hash_set` already contains that element or, more generally, an element whose key is equivalently ordered.|  \n|`_Where`|The place to start searching for the correct point of insertion. (Insertion can occur in amortized constant time, instead of logarithmic time, if the insertion point immediately follows `_Where`.)|  \n  \n### Return Value  \n The [hash_set::emplace](#hash_set__emplace) member function returns an iterator that points to the position where the new element was inserted into the `hash_set`, or where the existing element with equivalent ordering is located.  \n  \n### Remarks  \n Insertion can occur in amortized constant time, instead of logarithmic time, if the insertion point immediately follows `_Where`.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_set_emplace_hint.cpp  \n// compile with: /EHsc  \n#include <hash_set>  \n#include <iostream>  \n#include <string>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_set<string> hs3;  \n   string str1(\"a\");  \n  \n   hs3.insert(hs3.begin(), move(str1));  \n   cout << \"After the emplace insertion, hs3 contains \"  \n      << *hs3.begin() << \".\" << endl;  \n}  \n```  \n  \n```Output  \nAfter the emplace insertion, hs3 contains a.  \n```  \n  \n##  <a name=\"hash_set__empty\"></a>  hash_set::empty  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n Tests if a hash_set is empty.  \n  \n```  \nbool empty() const;\n```  \n  \n### Return Value  \n **true** if the hash_set is empty; **false** if the hash_set is nonempty.  \n  \n### Remarks  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_set_empty.cpp  \n// compile with: /EHsc  \n#include <hash_set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_set <int> hs1, hs2;  \n   hs1.insert ( 1 );  \n  \n   if ( hs1.empty( ) )  \n      cout << \"The hash_set hs1 is empty.\" << endl;  \n   else  \n      cout << \"The hash_set hs1 is not empty.\" << endl;  \n  \n   if ( hs2.empty( ) )  \n      cout << \"The hash_set hs2 is empty.\" << endl;  \n   else  \n      cout << \"The hash_set hs2 is not empty.\" << endl;  \n}  \n```  \n  \n```Output  \nThe hash_set hs1 is not empty.  \nThe hash_set hs2 is empty.  \n```  \n  \n##  <a name=\"hash_set__end\"></a>  hash_set::end  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n Returns an iterator that addresses the location succeeding the last element in a hash_set.  \n  \n```  \nconst_iterator end() const;\n\niterator end();\n```  \n  \n### Return Value  \n A bidirectional iterator that addresses the location succeeding the last element in a hash_set. If the hash_set is empty, then hash_set::end == hash_set::begin.  \n  \n### Remarks  \n **end** is used to test whether an iterator has reached the end of its hash_set. The value returned by **end** should not be dereferenced.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_set_end.cpp  \n// compile with: /EHsc  \n#include <hash_set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_set <int> hs1;  \n   hash_set <int> :: iterator hs1_Iter;  \n   hash_set <int> :: const_iterator hs1_cIter;  \n  \n   hs1.insert( 1 );  \n   hs1.insert( 2 );  \n   hs1.insert( 3 );  \n  \n   hs1_Iter = hs1.end( );  \n   hs1_Iter--;  \n   cout << \"The last element of hs1 is \" << *hs1_Iter << endl;  \n  \n   hs1.erase( hs1_Iter );  \n  \n   // The following 3 lines would err because the iterator is const:  \n   // hs1_cIter = hs1.end( );  \n   // hs1_cIter--;  \n   // hs1.erase( hs1_cIter );  \n  \n   hs1_cIter = hs1.end( );  \n   hs1_cIter--;  \n   cout << \"The last element of hs1 is now \" << *hs1_cIter << endl;  \n}  \n```  \n  \n```Output  \nThe last element of hs1 is 3  \nThe last element of hs1 is now 2  \n```  \n  \n##  <a name=\"hash_set__equal_range\"></a>  hash_set::equal_range  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n Returns a pair of iterators respectively to the first element in a hash set with a key that is equal to a specified key and to the first element in the hash set with a key that is greater than the key.  \n  \n```  \npair <const_iterator, const_iterator> equal_range (const Key& key) const;\n\npair <iterator, iterator> equal_range (const Key& key);\n```  \n  \n### Parameters  \n ` key`  \n The argument key to be compared with the sort key of an element from the hash_set being searched.  \n  \n### Return Value  \n A pair of iterators where the first is the [lower_bound](../standard-library/set-class.md#set__lower_bound) of the key and the second is the [upper_bound](../standard-library/set-class.md#set__upper_bound) of the key.  \n  \n To access the first iterator of a pair pr returned by the member function, use `pr`. **first**, and to dereference the lower bound iterator, use \\*( `pr`. **first**). To access the second iterator of a pair `pr` returned by the member function, use `pr`. **second**, and to dereference the upper bound iterator, use \\*( `pr`. **second**).  \n  \n### Remarks  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_set_equal_range.cpp  \n// compile with: /EHsc  \n#include <hash_set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;   \n   using namespace stdext;  \n   typedef hash_set<int> IntHSet;  \n   IntHSet hs1;  \n   hash_set <int> :: const_iterator hs1_RcIter;  \n  \n   hs1.insert( 10 );  \n   hs1.insert( 20 );  \n   hs1.insert( 30 );  \n  \n   pair <IntHSet::const_iterator, IntHSet::const_iterator> p1, p2;  \n   p1 = hs1.equal_range( 20 );  \n  \n   cout << \"The upper bound of the element with \"  \n        << \"a key of 20 in the hash_set hs1 is: \"  \n        << *(p1.second) << \".\" << endl;  \n  \n   cout << \"The lower bound of the element with \"  \n        << \"a key of 20 in the hash_set hs1 is: \"  \n        << *(p1.first) << \".\" << endl;  \n  \n   // Compare the upper_bound called directly   \n   hs1_RcIter = hs1.upper_bound( 20 );  \n   cout << \"A direct call of upper_bound( 20 ) gives \"  \n        << *hs1_RcIter << \",\" << endl  \n        << \"matching the 2nd element of the pair\"  \n        << \" returned by equal_range( 20 ).\" << endl;  \n  \n   p2 = hs1.equal_range( 40 );  \n  \n   // If no match is found for the key,  \n   // both elements of the pair return end( )  \n   if ( ( p2.first == hs1.end( ) ) && ( p2.second == hs1.end( ) ) )  \n      cout << \"The hash_set hs1 doesn't have an element \"  \n           << \"with a key greater than or equal to 40.\" << endl;  \n   else  \n      cout << \"The element of hash_set hs1 with a key >= 40 is: \"  \n           << *(p1.first) << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe upper bound of the element with a key of 20 in the hash_set hs1 is: 30.  \nThe lower bound of the element with a key of 20 in the hash_set hs1 is: 20.  \nA direct call of upper_bound( 20 ) gives 30,  \nmatching the 2nd element of the pair returned by equal_range( 20 ).  \nThe hash_set hs1 doesn't have an element with a key greater than or equal to 40.  \n```  \n  \n##  <a name=\"hash_set__erase\"></a>  hash_set::erase  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n Removes an element or a range of elements in a hash_set from specified positions or removes elements that match a specified key.  \n  \n```  \niterator erase(iterator _Where);\n\niterator erase(iterator first, iterator last);\n\nsize_type erase(const key_type& key);\n```  \n  \n### Parameters  \n `_Where`  \n Position of the element to be removed from the hash_set.  \n  \n ` first`  \n Position of the first element removed from the hash_set.  \n  \n ` last`  \n Position just beyond the last element removed from the hash_set.  \n  \n ` key`  \n The key of the elements to be removed from the hash_set.  \n  \n### Return Value  \n For the first two member functions, a bidirectional iterator that designates the first element remaining beyond any elements removed, or a pointer to the end of the hash_set if no such element exists. For the third member function, the number of elements that have been removed from the hash_set.  \n  \n### Remarks  \n The member functions never throw an exception.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  The following example demonstrates the use of the hash_set::erase member function.  \n  \n```  \n// hash_set_erase.cpp  \n// compile with: /EHsc  \n#include <hash_set>  \n#include <iostream>  \n  \nint main()  \n{  \n    using namespace std;  \n    using namespace stdext;  \n    hash_set<int> hs1, hs2, hs3;  \n    hash_set<int>::iterator pIter, Iter1, Iter2;  \n    int i;  \n    hash_set<int>::size_type n;  \n  \n    for (i = 1; i < 5; i++)  \n    {  \n        hs1.insert (i);  \n        hs2.insert (i * i);  \n        hs3.insert (i - 1);  \n    }  \n  \n    // The 1st member function removes an element at a given position  \n    Iter1 = ++hs1.begin();  \n    hs1.erase(Iter1);  \n  \n    cout << \"After the 2nd element is deleted, the hash_set hs1 is:\";  \n    for (pIter = hs1.begin(); pIter != hs1.end(); pIter++)  \n        cout << \" \" << *pIter;  \n    cout << \".\" << endl;  \n  \n    // The 2nd member function removes elements  \n    // in the range [ first,  last)  \n    Iter1 = ++hs2.begin();  \n    Iter2 = --hs2.end();  \n    hs2.erase(Iter1, Iter2);  \n  \n    cout << \"After the middle two elements are deleted, \"  \n         << \"the hash_set hs2 is:\";  \n    for (pIter = hs2.begin(); pIter != hs2.end(); pIter++)  \n        cout << \" \" << *pIter;  \n    cout << \".\" << endl;  \n  \n    // The 3rd member function removes elements with a given  key  \n    n = hs3.erase(2);  \n  \n    cout << \"After the element with a key of 2 is deleted, \"  \n         << \"the hash_set hs3 is:\";  \n    for (pIter = hs3.begin(); pIter != hs3.end(); pIter++)  \n        cout << \" \" << *pIter;  \n    cout << \".\" << endl;  \n  \n    // The 3rd member function returns the number of elements removed  \n    cout << \"The number of elements removed from hs3 is: \"  \n         << n << \".\" << endl;  \n  \n    // The dereferenced iterator can also be used to specify a key  \n    Iter1 = ++hs3.begin();  \n    hs3.erase(Iter1);  \n  \n    cout << \"After another element (unique for hash_set) with a key \"  \n         << endl;  \n    cout  << \"equal to that of the 2nd element is deleted, \"  \n          << \"the hash_set hs3 is:\";  \n    for (pIter = hs3.begin(); pIter != hs3.end(); pIter++)  \n        cout << \" \" << *pIter;  \n    cout << \".\" << endl;  \n}  \n```  \n  \n```Output  \nAfter the 2nd element is deleted, the hash_set hs1 is: 1 3 4.  \nAfter the middle two elements are deleted, the hash_set hs2 is: 16 4.  \nAfter the element with a key of 2 is deleted, the hash_set hs3 is: 0 1 3.  \nThe number of elements removed from hs3 is: 1.  \nAfter another element (unique for hash_set) with a key   \nequal to that of the 2nd element is deleted, the hash_set hs3 is: 0 3.  \n```  \n  \n##  <a name=\"hash_set__find\"></a>  hash_set::find  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n Returns an iterator addressing the location of an element in a hash_set that has a key equivalent to a specified key.  \n  \n```  \niterator find(const Key& key);\n\nconst_iterator find(const Key& key) const;\n```  \n  \n### Parameters  \n ` key`  \n The argument key to be matched by the sort key of an element from the hash_set being searched.  \n  \n### Return Value  \n An **iterator** or `const_iterator` that addresses the location of an element equivalent to a specified key or that addresses the location succeeding the last element in the hash_set if no match is found for the key.  \n  \n### Remarks  \n The member function returns an iterator that addresses an element in the hash_set whose sort key is **equivalent** to the argument key under a binary predicate that induces an ordering based on a less-than comparability relation.  \n  \n If the return value of **find** is assigned to a `const_iterator`, the hash_set object cannot be modified. If the return value of **find** is assigned to an **iterator**, the hash_set object can be modified.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_set_find.cpp  \n// compile with: /EHsc  \n#include <hash_set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_set <int> hs1;  \n   hash_set <int> :: const_iterator hs1_AcIter, hs1_RcIter;  \n  \n   hs1.insert( 10 );  \n   hs1.insert( 20 );  \n   hs1.insert( 30 );  \n  \n   hs1_RcIter = hs1.find( 20 );  \n   cout << \"The element of hash_set hs1 with a key of 20 is: \"  \n        << *hs1_RcIter << \".\" << endl;  \n  \n   hs1_RcIter = hs1.find( 40 );  \n  \n   // If no match is found for the key, end( ) is returned  \n   if ( hs1_RcIter == hs1.end( ) )  \n      cout << \"The hash_set hs1 doesn't have an element \"  \n           << \"with a key of 40.\" << endl;  \n   else  \n      cout << \"The element of hash_set hs1 with a key of 40 is: \"  \n           << *hs1_RcIter << \".\" << endl;  \n  \n   // The element at a specific location in the hash_set can be found   \n   // by using a dereferenced iterator addressing the location  \n   hs1_AcIter = hs1.end( );  \n   hs1_AcIter--;  \n   hs1_RcIter = hs1.find( *hs1_AcIter );  \n   cout << \"The element of hs1 with a key matching \"  \n        << \"that of the last element is: \"  \n        << *hs1_RcIter << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe element of hash_set hs1 with a key of 20 is: 20.  \nThe hash_set hs1 doesn't have an element with a key of 40.  \nThe element of hs1 with a key matching that of the last element is: 30.  \n```  \n  \n##  <a name=\"hash_set__get_allocator\"></a>  hash_set::get_allocator  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n Returns a copy of the allocator object used to construct the hash_set.  \n  \n```  \nAllocator get_allocator() const;\n```  \n  \n### Return Value  \n The allocator used by the hash_set to manage memory, which is the template parameter `Allocator`.  \n  \n For more information on `Allocator`, see the Remarks section of the [hash_set Class](../standard-library/hash-set-class.md) topic.  \n  \n### Remarks  \n Allocators for the hash_set class specify how the class manages storage. The default allocators supplied with STL container classes is sufficient for most programming needs. Writing and using your own allocator class is an advanced C++ topic.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_set_get_allocator.cpp  \n// compile with: /EHsc  \n#include <hash_set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n  \n   // The following lines declare objects  \n   // that use the default allocator.  \n   hash_set <int, hash_compare <int, less<int> > > hs1;  \n   hash_set <int,  hash_compare <int, greater<int> > > hs2;  \n   hash_set <double, hash_compare <double,  \n      less<double> >, allocator<double> > hs3;  \n  \n   hash_set <int, hash_compare <int,  \n      greater<int> > >::allocator_type hs2_Alloc;  \n   hash_set <double>::allocator_type hs3_Alloc;  \n   hs2_Alloc = hs2.get_allocator( );  \n  \n   cout << \"The number of integers that can be allocated\"  \n        << endl << \"before free memory is exhausted: \"  \n        << hs1.max_size( ) << \".\" << endl;  \n  \n   cout << \"The number of doubles that can be allocated\"  \n        << endl << \"before free memory is exhausted: \"  \n        << hs3.max_size( ) <<  \".\" << endl;  \n  \n   // The following lines create a hash_set hs4  \n   // with the allocator of hash_set hs1.  \n   hash_set <int>::allocator_type hs4_Alloc;  \n   hash_set <int> hs4;  \n   hs4_Alloc = hs2.get_allocator( );  \n  \n   // Two allocators are interchangeable if  \n   // storage allocated from each can be  \n   // deallocated by the other  \n   if( hs2_Alloc == hs4_Alloc )  \n   {  \n      cout << \"The allocators are interchangeable.\"  \n           << endl;  \n   }  \n   else  \n   {  \n      cout << \"The allocators are not interchangeable.\"  \n           << endl;  \n   }  \n}  \n```  \n  \n##  <a name=\"hash_set__hash_set\"></a>  hash_set::hash_set  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n Constructs a `hash_set` that is empty or that is a copy of all or part of some other `hash_set`.  \n  \n```  \nhash_set();\n\nexplicit hash_set(\n    const Traits& Comp);\n\nhash_set(\n    const Traits& Comp,  \n    const Allocator& Al);\n\nhash_set(\n    const hash_set<Key, Traits, Allocator>& Right);\n\nhash_set(\n    hash_set&& Right);\n\nhash_set(\n    initializer_list<Type> IList);\n\nhash_set(\n    initializer_list<Type> IList,   \n    const Compare& Comp);\n\nhash_set(\n    initializer_list<value_type> IList,   \n    const Compare& Comp,   \n    const Allocator& Al);\n\ntemplate <class InputIterator>  \nhash_set(\n InputIterator First,  \n    InputIterator Last);\n\ntemplate <class InputIterator>  \nhash_set(\n InputIterator First,  \n    InputIterator Last,  \n    const Traits& Comp);\n\ntemplate <class InputIterator>  \nhash_set(\n InputIterator First,  \n    InputIterator Last,  \n    const Traits& Comp,  \n    const Allocator& Al);\n```  \n  \n### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|`Al`|The storage allocator class to be used for this `hash_set` object, which defaults to `Allocator`.|  \n|`Comp`|The comparison function of type `const Traits` used to order the elements in the `hash_set`, which defaults to `hash_compare`.|  \n|`Right`|The `hash_set` of which the constructed `hash_set` is to be a copy.|  \n|`First`|The position of the first element in the range of elements to be copied.|  \n|`Last`|The position of the first element beyond the range of elements to be copied.|  \n  \n### Remarks  \n All constructors store a type of allocator object that manages memory storage for the `hash_set` and that can later be returned by calling [hash_set::get_allocator](#hash_set__get_allocator). The allocator parameter is often omitted in the class declarations and preprocessing macros used to substitute alternative allocators.  \n  \n All constructors initialize their hash_sets.  \n  \n All constructors store a function object of type `Traits` that is used to establish an order among the keys of the `hash_set` and that can later be returned by calling [hash_set::key_comp](#hash_set__key_comp). For more information on `Traits` see the [hash_set Class](../standard-library/hash-set-class.md) topic.  \n  \n The first constructor creates an empty initial `hash_set` The second specifies the type of comparison function ( `Comp`) to be used in establishing the order of the elements, and the third explicitly specifies the allocator type ( `Al`) to be used. The key word `explicit` suppresses certain kinds of automatic type conversion.  \n  \n The fourth and fifth constructors specify a copy of the `hash_set``Right`.  \n  \n The last sixth, seventh, and eighth constructors use an initializer_list for the elements.  \n  \n The last constructors copy the range [ `First`, `Last`) of a `hash_set` with increasing explicitness in specifying the type of comparison function of class Traits and allocator.  \n  \n The eighth constructor moves the `hash_set``Right`.  \n  \n The actual order of elements in a `hash_set` container depends on the hash function, the ordering function and the current size of the hash table and cannot, in general, be predicted as it could with the set container, where it was determined by the ordering function alone.  \n  \n##  <a name=\"hash_set__insert\"></a>  hash_set::insert  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n Inserts an element or a range of elements into a `hash_set`.  \n  \n```  \npair<iterator, bool> insert(\n    const value_type& Val);\n\niterator insert(\n    iterator Where,  \n    const value_type& Val);\n\nvoid insert(\n    initializer_list<value_type> IList)  \ntemplate <class InputIterator>  \nvoid insert(\n    InputIterator First,  \n    InputIterator Last);\n```  \n  \n### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|`Val`|The value of an element to be inserted into the `hash_set` unless the `hash_set` already contains that element or, more generally, an element whose key is equivalently ordered.|  \n|`Where`|The place to start searching for the correct point of insertion. (Insertion can occur in amortized constant time, instead of logarithmic time, if the insertion point immediately follows `_Where`.)|  \n|`First`|The position of the first element to be copied from a `hash_set`.|  \n|`Last`|The position just beyond the last element to be copied from a `hash_set`.|  \n|`IList`|The initializer_list from which to copy the elements.|  \n  \n### Return Value  \n The first `insert` member function returns a pair whose `bool` component returns `true` if an insertion was make and `false` if the `hash_set` already contained an element whose key had an equivalent value in the ordering, and whose iterator component returns the address where a new element was inserted or where the element was already located.  \n  \n To access the iterator component of a pair `pr` returned by this member function, use `pr.first` and to dereference it, use `*(pr.first)`. To access the `bool` component of a pair `pr` returned by this member function, use `pr.second`, and to dereference it, use `*(pr.second)`.  \n  \n The second `insert` member function returns an iterator that points to the position where the new element was inserted into the `hash_set`.  \n  \n### Remarks  \n The third member function inserts the elements in an initializer_list.  \n  \n The third member function inserts the sequence of element values into a `hash_set` corresponding to each element addressed by an iterator of in the range [ `First`, `Last`) of a specified `hash_set`.  \n  \n##  <a name=\"hash_set__iterator\"></a>  hash_set::iterator  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n A type that provides a bidirectional iterator that can read or modify any element in a hash_set.  \n  \n```  \ntypedef list<typename Traits::value_type, typename Traits::allocator_type>::iterator iterator;  \n```  \n  \n### Remarks  \n A type **iterator** can be used to modify the value of an element.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  See the example for [begin](#hash_set__begin) for an example of how to declare and use **iterator**.  \n  \n##  <a name=\"hash_set__key_comp\"></a>  hash_set::key_comp  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n Retrieves a copy of the hash traits object used to hash and order element key values in a hash_set.  \n  \n```  \nkey_compare key_comp() const;\n```  \n  \n### Return Value  \n Returns the function object that a hash_set uses to order its elements, which is the template parameter `Traits`.  \n  \n For more information on `Traits` see the [hash_set Class](../standard-library/hash-set-class.md) topic.  \n  \n### Remarks  \n The stored object defines the member function:  \n  \n **bool operator**( **const Key&** _ *xVal*, **const Key&** \\_ `yVal`);  \n  \n which returns **true** if `_xVal` precedes and is not equal to `_yVal` in the sort order.  \n  \n Note that both [key_compare](#hash_set__key_compare) and [value_compare](#hash_set__value_compare) are synonyms for the template parameter **Traits**. Both types are provided for the hash_set and hash_multiset classes, where they are identical, for compatibility with the hash_map and hash_multimap classes, where they are distinct.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_set_key_comp.cpp  \n// compile with: /EHsc  \n#include <hash_set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n  \n   hash_set <int, hash_compare < int, less<int> > >hs1;  \n   hash_set<int, hash_compare < int, less<int> > >::key_compare kc1  \n          = hs1.key_comp( ) ;  \n   bool result1 = kc1( 2, 3 ) ;  \n   if( result1 == true )  \n   {  \n      cout << \"kc1( 2,3 ) returns value of true, \"  \n           << \"where kc1 is the function object of hs1.\"  \n           << endl;  \n   }  \n   else  \n   {  \n      cout << \"kc1( 2,3 ) returns value of false \"  \n           << \"where kc1 is the function object of hs1.\"  \n        << endl;  \n   }  \n  \n   hash_set <int, hash_compare < int, greater<int> > > hs2;  \n   hash_set<int, hash_compare < int, greater<int> > >::key_compare  \n         kc2 = hs2.key_comp( ) ;  \n   bool result2 = kc2( 2, 3 ) ;  \n   if(result2 == true)  \n   {  \n      cout << \"kc2( 2,3 ) returns value of true, \"  \n           << \"where kc2 is the function object of hs2.\"  \n           << endl;  \n   }  \n   else  \n   {  \n      cout << \"kc2( 2,3 ) returns value of false, \"  \n           << \"where kc2 is the function object of hs2.\"  \n           << endl;  \n   }  \n}  \n```  \n  \n##  <a name=\"hash_set__key_compare\"></a>  hash_set::key_compare  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n A type that provides a function object that can compare two sort keys to determine the relative order of two elements in the hash_set.  \n  \n```  \ntypedef Traits key_compare;  \n```  \n  \n### Remarks  \n `key_compare` is a synonym for the template parameter `Traits`.  \n  \n For more information on `Traits` see the [hash_set Class](../standard-library/hash-set-class.md) topic.  \n  \n Note that both `key_compare` and [value_compare](#hash_set__value_compare) are synonyms for the template parameter **Traits**. Both types are provided for the set and multiset classes, where they are identical, for compatibility with the map and multimap classes, where they are distinct.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  See the example for [key_comp](#hash_set__key_comp) for an example of how to declare and use `key_compare`.  \n  \n##  <a name=\"hash_set__key_type\"></a>  hash_set::key_type  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n A type that describes an object stored as an element of a hash_set in its capacity as sort key.  \n  \n```  \ntypedef Key key_type;  \n```  \n  \n### Remarks  \n **key_type** is a synonym for the template parameter `Key`.  \n  \n For more information on `Key`, see the Remarks section of the [hash_set Class](../standard-library/hash-set-class.md) topic.  \n  \n Note that both `key_type` and [value_type](#hash_set__value_type) are synonyms for the template parameter **Key**. Both types are provided for the hash_set and hash_multiset classes, where they are identical, for compatibility with the hash_map and hash_multimap classes, where they are distinct.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  See the example for [value_type](#hash_set__value_type) for an example of how to declare and use `key_type`.  \n  \n##  <a name=\"hash_set__lower_bound\"></a>  hash_set::lower_bound  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n Returns an iterator to the first element in a hash_set with a key that is equal to or greater than a specified key.  \n  \n```  \nconst_iterator lower_bound(const Key& key) const;\n\niterator lower_bound(const Key& key);\n```  \n  \n### Parameters  \n ` key`  \n The argument key to be compared with the sort key of an element from the hash_set being searched.  \n  \n### Return Value  \n An **iterator** or `const_iterator` that addresses the location of an element in a hash_set that with a key that is equal to or greater than the argument key or that addresses the location succeeding the last element in the hash_set if no match is found for the key.  \n  \n### Remarks  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_set_lower_bound.cpp  \n// compile with: /EHsc  \n#include <hash_set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_set <int> hs1;  \n   hash_set <int> :: const_iterator hs1_AcIter, hs1_RcIter;  \n  \n   hs1.insert( 10 );  \n   hs1.insert( 20 );  \n   hs1.insert( 30 );  \n  \n   hs1_RcIter = hs1.lower_bound( 20 );  \n   cout << \"The element of hash_set hs1 with a key of 20 is: \"  \n        << *hs1_RcIter << \".\" << endl;  \n  \n   hs1_RcIter = hs1.lower_bound( 40 );  \n  \n   // If no match is found for the key, end( ) is returned  \n   if ( hs1_RcIter == hs1.end( ) )  \n      cout << \"The hash_set hs1 doesn't have an element \"  \n           << \"with a key of 40.\" << endl;  \n   else  \n      cout << \"The element of hash_set hs1 with a key of 40 is: \"  \n           << *hs1_RcIter << \".\" << endl;  \n  \n   // An element at a specific location in the hash_set can be found   \n   // by using a dereferenced iterator that addresses the location  \n   hs1_AcIter = hs1.end( );  \n   hs1_AcIter--;  \n   hs1_RcIter = hs1.lower_bound( *hs1_AcIter );  \n   cout << \"The element of hs1 with a key matching \"  \n        << \"that of the last element is: \"  \n        << *hs1_RcIter << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe element of hash_set hs1 with a key of 20 is: 20.  \nThe hash_set hs1 doesn't have an element with a key of 40.  \nThe element of hs1 with a key matching that of the last element is: 30.  \n```  \n  \n##  <a name=\"hash_set__max_size\"></a>  hash_set::max_size  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n Returns the maximum length of the hash_set.  \n  \n```  \nsize_type max_size() const;\n```  \n  \n### Return Value  \n The maximum possible length of the hash_set.  \n  \n### Remarks  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_set_max_size.cpp  \n// compile with: /EHsc  \n#include <hash_set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_set <int> hs1;  \n   hash_set <int>::size_type i;  \n  \n   i = hs1.max_size( );  \n   cout << \"The maximum possible length \"  \n        << \"of the hash_set is \" << i << \".\" << endl;  \n}  \n```  \n  \n##  <a name=\"hash_set__operator_eq\"></a>  hash_set::operator=  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n Replaces the elements of the hash_set with a copy of another hash_set.  \n  \n```  \nhash_set& operator=(const hash_set& right);\n\nhash_set& operator=(hash_set&& right);\n```  \n  \n### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|` right`|The [hash_set](../standard-library/hash-set-class.md) being copied into the `hash_set`.|  \n  \n### Remarks  \n After erasing any existing elements in a `hash_set`, `operator=` either copies or moves the contents of ` right` into the `hash_set`.  \n  \n### Example  \n  \n```cpp  \n// hash_set_operator_as.cpp  \n// compile with: /EHsc  \n#include <hash_set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_set<int> v1, v2, v3;  \n   hash_set<int>::iterator iter;  \n  \n   v1.insert(10);  \n  \n   cout << \"v1 = \" ;  \n   for (iter = v1.begin(); iter != v1.end(); iter++)  \n      cout << iter << \" \";  \n   cout << endl;  \n  \n   v2 = v1;  \n   cout << \"v2 = \";  \n   for (iter = v2.begin(); iter != v2.end(); iter++)  \n      cout << iter << \" \";  \n   cout << endl;  \n  \n// move v1 into v2  \n   v2.clear();  \n   v2 = move(v1);  \n   cout << \"v2 = \";  \n   for (iter = v2.begin(); iter != v2.end(); iter++)  \n      cout << iter << \" \";  \n   cout << endl;  \n}  \n```  \n  \n##  <a name=\"hash_set__pointer\"></a>  hash_set::pointer  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n A type that provides a pointer to an element in a hash_set.  \n  \n```  \ntypedef list<typename Traits::value_type, typename Traits::allocator_type>::pointer pointer;  \n```  \n  \n### Remarks  \n A type **pointer** can be used to modify the value of an element.  \n  \n In most cases, an [iterator](#hash_set__iterator) should be used to access the elements in a hash_set object.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n##  <a name=\"hash_set__rbegin\"></a>  hash_set::rbegin  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n Returns an iterator addressing the first element in a reversed hash_set.  \n  \n```  \nconst_reverse_iterator rbegin() const;\n\nreverse_iterator rbegin();\n```  \n  \n### Return Value  \n A reverse bidirectional iterator addressing the first element in a reversed hash_set or addressing what had been the last element in the unreversed hash_set.  \n  \n### Remarks  \n `rbegin` is used with a reversed hash_set just as [begin](#hash_set__begin) is used with a hash_set.  \n  \n If the return value of `rbegin` is assigned to a `const_reverse_iterator`, then the hash_set object cannot be modified. If the return value of `rbegin` is assigned to a `reverse_iterator`, then the hash_set object can be modified.  \n  \n `rbegin` can be used to iterate through a hash_set backwards.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_set_rbegin.cpp  \n// compile with: /EHsc  \n#include <hash_set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_set <int> hs1;  \n   hash_set <int>::iterator hs1_Iter;  \n   hash_set <int>::reverse_iterator hs1_rIter;  \n  \n   hs1.insert( 10 );  \n   hs1.insert( 20 );  \n   hs1.insert( 30 );  \n  \n   hs1_rIter = hs1.rbegin( );  \n   cout << \"The first element in the reversed hash_set is \"  \n        << *hs1_rIter << \".\" << endl;  \n  \n   // begin can be used to start an iteration   \n   // throught a hash_set in a forward order  \n   cout << \"The hash_set is: \";  \n   for ( hs1_Iter = hs1.begin( ) ; hs1_Iter != hs1.end( );  \n         hs1_Iter++ )  \n      cout << *hs1_Iter << \" \";  \n   cout << endl;  \n  \n   // rbegin can be used to start an iteration   \n   // throught a hash_set in a reverse order  \n   cout << \"The reversed hash_set is: \";  \n   for ( hs1_rIter = hs1.rbegin( ) ; hs1_rIter != hs1.rend( );  \n         hs1_rIter++ )  \n      cout << *hs1_rIter << \" \";  \n   cout << endl;  \n  \n   // A hash_set element can be erased by dereferencing to its key   \n   hs1_rIter = hs1.rbegin( );  \n   hs1.erase ( *hs1_rIter );  \n  \n   hs1_rIter = hs1.rbegin( );  \n   cout << \"After the erasure, the first element \"  \n        << \"in the reversed hash_set is \"<< *hs1_rIter << \".\"  \n        << endl;  \n}  \n```  \n  \n```Output  \nThe first element in the reversed hash_set is 30.  \nThe hash_set is: 10 20 30   \nThe reversed hash_set is: 30 20 10   \nAfter the erasure, the first element in the reversed hash_set is 20.  \n```  \n  \n##  <a name=\"hash_set__reference\"></a>  hash_set::reference  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n A type that provides a reference to an element stored in a hash_set.  \n  \n```  \ntypedef list<typename Traits::value_type, typename Traits::allocator_type>::reference reference;  \n```  \n  \n### Remarks  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_set_reference.cpp  \n// compile with: /EHsc  \n#include <hash_set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_set <int> hs1;  \n  \n   hs1.insert( 10 );  \n   hs1.insert( 20 );  \n  \n   // Declare and initialize a reference &Ref1 to the 1st element  \n   int &Ref1 = *hs1.begin( );  \n  \n   cout << \"The first element in the hash_set is \"  \n        << Ref1 << \".\" << endl;  \n  \n   // The value of the 1st element of the hash_set can be changed  \n   // by operating on its (non-const) reference  \n   Ref1 = Ref1 + 5;  \n  \n   cout << \"The first element in the hash_set is now \"  \n        << *hs1.begin() << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe first element in the hash_set is 10.  \nThe first element in the hash_set is now 15.  \n```  \n  \n##  <a name=\"hash_set__rend\"></a>  hash_set::rend  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n Returns an iterator that addresses the location succeeding the last element in a reversed hash_set.  \n  \n```  \nconst_reverse_iterator rend() const;\n\nreverse_iterator rend();\n```  \n  \n### Return Value  \n A reverse bidirectional iterator that addresses the location succeeding the last element in a reversed hash_set (the location that had preceded the first element in the unreversed hash_set).  \n  \n### Remarks  \n `rend` is used with a reversed hash_set just as [end](#hash_set__end) is used with a hash_set.  \n  \n If the return value of `rend` is assigned to a `const_reverse_iterator`, then the hash_set object cannot be modified. If the return value of `rend` is assigned to a `reverse_iterator`, then the hash_set object can be modified. The value returned by `rend` should not be dereferenced.  \n  \n `rend` can be used to test to whether a reverse iterator has reached the end of its hash_set.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_set_rend.cpp  \n// compile with: /EHsc  \n#include <hash_set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_set <int> hs1;  \n   hash_set <int>::iterator hs1_Iter;  \n   hash_set <int>::reverse_iterator hs1_rIter;  \n   hash_set <int>::const_reverse_iterator hs1_crIter;  \n  \n   hs1.insert( 10 );  \n   hs1.insert( 20 );  \n   hs1.insert( 30 );  \n  \n   hs1_rIter = hs1.rend( );  \n   hs1_rIter--;  \n   cout << \"The last element in the reversed hash_set is \"  \n        << *hs1_rIter << \".\" << endl;  \n  \n   // end can be used to terminate an iteration   \n   // throught a hash_set in a forward order  \n   cout << \"The hash_set is: \";  \n   for ( hs1_Iter = hs1.begin( ) ; hs1_Iter != hs1.end( );  \n         hs1_Iter++ )  \n      cout << *hs1_Iter << \" \";  \n   cout << \".\" << endl;  \n  \n   // rend can be used to terminate an iteration   \n   // through a hash_set in a reverse order  \n   cout << \"The reversed hash_set is: \";  \n   for ( hs1_rIter = hs1.rbegin( ) ; hs1_rIter != hs1.rend( );  \n         hs1_rIter++ )  \n      cout << *hs1_rIter << \" \";  \n   cout << \".\" << endl;  \n  \n   hs1_rIter = hs1.rend( );  \n   hs1_rIter--;  \n   hs1.erase ( *hs1_rIter );  \n  \n   hs1_rIter = hs1.rend( );  \n   hs1_rIter--;  \n   cout << \"After the erasure, the last element in the \"  \n        << \"reversed hash_set is \" << *hs1_rIter << \".\"  \n        << endl;  \n}  \n```  \n  \n```Output  \nThe last element in the reversed hash_set is 10.  \nThe hash_set is: 10 20 30 .  \nThe reversed hash_set is: 30 20 10 .  \nAfter the erasure, the last element in the reversed hash_set is 20.  \n```  \n  \n##  <a name=\"hash_set__reverse_iterator\"></a>  hash_set::reverse_iterator  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n A type that provides a bidirectional iterator that can read or modify an element in a reversed hash_set.  \n  \n```  \ntypedef list<typename Traits::value_type, typename Traits::allocator_type>::reverse_iterator reverse_iterator;  \n```  \n  \n### Remarks  \n A type `reverse_iterator` is use to iterate through the hash_set in reverse.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  See the example for [rbegin](#hash_set__rbegin) for an example of how to declare and use `reverse_iterator`.  \n  \n##  <a name=\"hash_set__size\"></a>  hash_set::size  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n Returns the number of elements in the hash_set.  \n  \n```  \nsize_type size() const;\n```  \n  \n### Return Value  \n The current length of the hash_set.  \n  \n### Remarks  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_set_size.cpp  \n// compile with: /EHsc  \n#include <hash_set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_set <int> hs1;  \n   hash_set <int> :: size_type i;  \n  \n   hs1.insert( 1 );  \n   i = hs1.size( );  \n   cout << \"The hash_set length is \" << i << \".\" << endl;  \n  \n   hs1.insert( 2 );  \n   i = hs1.size( );  \n   cout << \"The hash_set length is now \" << i << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe hash_set length is 1.  \nThe hash_set length is now 2.  \n```  \n  \n##  <a name=\"hash_set__size_type\"></a>  hash_set::size_type  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n An unsigned integer type that can represent the number of elements in a hash_set.  \n  \n```  \ntypedef list<typename Traits::value_type, typename Traits::allocator_type>::size_type size_type;  \n```  \n  \n### Remarks  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  See the example for [size](#hash_set__size) for an example of how to declare and use `size_type`  \n  \n##  <a name=\"hash_set__swap\"></a>  hash_set::swap  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n Exchanges the elements of two hash_sets.  \n  \n```  \nvoid swap(hash_set& right);\n```  \n  \n### Parameters  \n ` right`  \n The argument hash_set providing the elements to be swapped with the target hash_set.  \n  \n### Remarks  \n The member function invalidates no references, pointers, or iterators that designate elements in the two hash_sets whose elements are being exchanged.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_set_swap.cpp  \n// compile with: /EHsc  \n#include <hash_set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_set <int> hs1, hs2, hs3;  \n   hash_set <int>::iterator hs1_Iter;  \n  \n   hs1.insert( 10 );  \n   hs1.insert( 20 );  \n   hs1.insert( 30 );  \n   hs2.insert( 100 );  \n   hs2.insert( 200 );  \n   hs3.insert( 300 );  \n  \n   cout << \"The original hash_set hs1 is:\";  \n   for ( hs1_Iter = hs1.begin( ); hs1_Iter != hs1.end( );  \n         hs1_Iter++ )  \n         cout << \" \" << *hs1_Iter;  \n   cout   << \".\" << endl;  \n  \n   // This is the member function version of swap  \n   hs1.swap( hs2 );  \n  \n   cout << \"After swapping with hs2, list hs1 is:\";  \n   for ( hs1_Iter = hs1.begin( ); hs1_Iter != hs1.end( );  \n         hs1_Iter++ )  \n         cout << \" \" << *hs1_Iter;  \n   cout  << \".\" << endl;  \n  \n   // This is the specialized template version of swap  \n   swap( hs1, hs3 );  \n  \n   cout << \"After swapping with hs3, list hs1 is:\";  \n   for ( hs1_Iter = hs1.begin( ); hs1_Iter != hs1.end( );  \n         hs1_Iter++ )  \n         cout << \" \" << *hs1_Iter;  \n   cout   << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe original hash_set hs1 is: 10 20 30.  \nAfter swapping with hs2, list hs1 is: 200 100.  \nAfter swapping with hs3, list hs1 is: 300.  \n```  \n  \n##  <a name=\"hash_set__upper_bound\"></a>  hash_set::upper_bound  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n Returns an iterator to the first element in a hash_set that with a key that is greater than a specified key.  \n  \n```  \nconst_iterator upper_bound(const Key& key) const;\n\niterator upper_bound(const Key& key);\n```  \n  \n### Parameters  \n ` key`  \n The argument key to be compared with the sort key of an element from the hash_set being searched.  \n  \n### Return Value  \n An **iterator** or `const_iterator` that addresses the location of an element in a hash_set that with a key that is equal to or greater than the argument key, or that addresses the location succeeding the last element in the hash_set if no match is found for the key.  \n  \n### Remarks  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_set_upper_bound.cpp  \n// compile with: /EHsc  \n#include <hash_set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_set <int> hs1;  \n   hash_set <int> :: const_iterator hs1_AcIter, hs1_RcIter;  \n  \n   hs1.insert( 10 );  \n   hs1.insert( 20 );  \n   hs1.insert( 30 );  \n  \n   hs1_RcIter = hs1.upper_bound( 20 );  \n   cout << \"The first element of hash_set hs1 with a key greater \"  \n        << \"than 20 is: \" << *hs1_RcIter << \".\" << endl;  \n  \n   hs1_RcIter = hs1.upper_bound( 30 );  \n  \n   // If no match is found for the key, end( ) is returned  \n   if ( hs1_RcIter == hs1.end( ) )  \n      cout << \"The hash_set hs1 doesn't have an element \"  \n           << \"with a key greater than 30.\" << endl;  \n   else  \n      cout << \"The element of hash_set hs1 with a key > 40 is: \"  \n           << *hs1_RcIter << \".\" << endl;  \n  \n   // An element at a specific location in the hash_set can be found  \n   // by using a dereferenced iterator addressing the location  \n   hs1_AcIter = hs1.begin( );  \n   hs1_RcIter = hs1.upper_bound( *hs1_AcIter );  \n   cout << \"The first element of hs1 with a key greater than \"  \n        << endl << \"that of the initial element of hs1 is: \"  \n        << *hs1_RcIter << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe first element of hash_set hs1 with a key greater than 20 is: 30.  \nThe hash_set hs1 doesn't have an element with a key greater than 30.  \nThe first element of hs1 with a key greater than   \nthat of the initial element of hs1 is: 20.  \n```  \n  \n##  <a name=\"hash_set__value_comp\"></a>  hash_set::value_comp  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n Retrieves a copy of the comparison object used to order element values in a hash_set.  \n  \n```  \nvalue_compare value_comp() const;\n```  \n  \n### Return Value  \n Returns the function object that a hash_set uses to order its elements, which is the template parameter `Compare`.  \n  \n For more information on `Compare`, see the Remarks section of the [hash_set Class](../standard-library/hash-set-class.md) topic.  \n  \n### Remarks  \n The stored object defines the member function:  \n  \n **bool operator**( **const Key&** _ *xVal*, **const Key&** \\_ `yVal`);  \n  \n which returns **true** if `_xVal` precedes and is not equal to `_yVal` in the sort order.  \n  \n Note that both [value_compare](../standard-library/set-class.md#set__value_compare) and [key_compare](../standard-library/set-class.md#set__key_compare) are synonyms for the template parameter `Compare`. Both types are provided for the hash_set and hash_multiset classes, where they are identical, for compatibility with the hash_map and hash_multimap classes, where they are distinct.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_set_value_comp.cpp  \n// compile with: /EHsc  \n#include <hash_set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n  \n   hash_set <int, hash_compare < int, less<int> > > hs1;  \n   hash_set <int, hash_compare < int, less<int> >  >::value_compare  \n      vc1 = hs1.value_comp( );  \n   bool result1 = vc1( 2, 3 );  \n   if( result1 == true )  \n   {  \n      cout << \"vc1( 2,3 ) returns value of true, \"  \n           << \"where vc1 is the function object of hs1.\"  \n           << endl;  \n   }  \n   else  \n   {  \n      cout << \"vc1( 2,3 ) returns value of false, \"  \n           << \"where vc1 is the function object of hs1.\"  \n           << endl;  \n   }  \n  \n   hash_set <int, hash_compare < int, greater<int> > > hs2;  \n   hash_set<int, hash_compare < int, greater<int> > >::value_compare  \n      vc2 = hs2.value_comp( );  \n   bool result2 = vc2( 2, 3 );  \n   if( result2 == true )  \n   {  \n      cout << \"vc2( 2,3 ) returns value of true, \"  \n           << \"where vc2 is the function object of hs2.\"  \n           << endl;  \n   }  \n   else  \n   {  \n      cout << \"vc2( 2,3 ) returns value of false, \"  \n           << \"where vc2 is the function object of hs2.\"  \n           << endl;  \n   }  \n}  \n```  \n  \n##  <a name=\"hash_set__value_compare\"></a>  hash_set::value_compare  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n A type that provides two function objects, a binary predicate of class compare that can compare two element values of a hash_set to determine their relative order and a unary predicate that hashes the elements.  \n  \n```  \ntypedef key_compare value_compare;  \n```  \n  \n### Remarks  \n **value_compare** is a synonym for the template parameter `Traits`.  \n  \n For more information on `Traits` see the [hash_set Class](../standard-library/hash-set-class.md) topic.  \n  \n Note that both [key_compare](#hash_set__key_compare) and **value_compare** are synonyms for the template parameter **Traits**. Both types are provided for the hash_set and hash_multiset classes, where they are identical, for compatibility with the hash_map and hash_multimap classes, where they are distinct.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  See the example for [value_comp](#hash_set__value_comp) for an example of how to declare and use `value_compare`.  \n  \n##  <a name=\"hash_set__value_type\"></a>  hash_set::value_type  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_set Class](../standard-library/unordered-set-class.md).  \n  \n A type that describes an object stored as an element of a hash_set in its capacity as a value.  \n  \n```  \ntypedef Key value_type;  \n```  \n  \n### Example  \n  \n```cpp  \n// hash_set_value_type.cpp  \n// compile with: /EHsc  \n#include <hash_set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_set <int> hs1;  \n   hash_set <int>::iterator hs1_Iter;  \n  \n   hash_set <int> :: value_type hsvt_Int;   // Declare value_type  \n   hsvt_Int = 10;             // Initialize value_type  \n  \n   hash_set <int> :: key_type hskt_Int;   // Declare key_type  \n   hskt_Int = 20;             // Initialize key_type  \n  \n   hs1.insert( hsvt_Int );         // Insert value into hs1  \n   hs1.insert( hskt_Int );         // Insert key into hs1  \n  \n   // A hash_set accepts key_types or value_types as elements  \n   cout << \"The hash_set has elements:\";  \n   for ( hs1_Iter = hs1.begin( ) ; hs1_Iter != hs1.end( ); hs1_Iter++)  \n      cout << \" \" << *hs1_Iter;  \n   cout << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe hash_set has elements: 10 20.  \n```  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n"}