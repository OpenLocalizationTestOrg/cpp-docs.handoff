<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">75534f3527dba7b8983fc43b089c49d3332adf15</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\crgn-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b2c88c6f5e4f7992b2d12c08ff4022f0e2de59a4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">00176bcaf3f19583f3708472022011275395583f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CRgn Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CRgn Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Encapsulates a Windows graphics device interface (GDI) region.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CRgn::CRgn</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CRgn`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CRgn::CombineRgn</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Sets a <ph id="ph1">`CRgn`</ph> object so that it is equivalent to the union of two specified <ph id="ph2">`CRgn`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CRgn::CopyRgn</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Sets a <ph id="ph1">`CRgn`</ph> object so that it is a copy of a specified <ph id="ph2">`CRgn`</ph> object.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CRgn::CreateEllipticRgn</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Initializes a <ph id="ph1">`CRgn`</ph> object with an elliptical region.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CRgn::CreateEllipticRgnIndirect</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Initializes a <ph id="ph1">`CRgn`</ph> object with an elliptical region defined by a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CRgn::CreateFromData</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Creates a region from the given region and transformation data.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CRgn::CreateFromPath</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Creates a region from the path that is selected into the given device context.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CRgn::CreatePolygonRgn</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Initializes a <ph id="ph1">`CRgn`</ph> object with a polygonal region.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The system closes the polygon automatically, if necessary, by drawing a line from the last vertex to the first.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>CRgn::CreatePolyPolygonRgn</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Initializes a <ph id="ph1">`CRgn`</ph> object with a region consisting of a series of closed polygons.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The polygons may be disjoint, or they may overlap.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CRgn::CreateRectRgn</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Initializes a <ph id="ph1">`CRgn`</ph> object with a rectangular region.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CRgn::CreateRectRgnIndirect</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Initializes a <ph id="ph1">`CRgn`</ph> object with a rectangular region defined by a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>CRgn::CreateRoundRectRgn</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Initializes a <ph id="ph1">`CRgn`</ph> object with a rectangular region with rounded corners.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>CRgn::EqualRgn</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Checks two <ph id="ph1">`CRgn`</ph> objects to determine whether they are equivalent.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>CRgn::FromHandle</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Returns a pointer to a <ph id="ph1">`CRgn`</ph> object when given a handle to a Windows region.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>CRgn::GetRegionData</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Fills the specified buffer with data describing the given region.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>CRgn::GetRgnBox</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Retrieves the coordinates of the bounding rectangle of a <ph id="ph1">`CRgn`</ph> object.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>CRgn::OffsetRgn</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Moves a <ph id="ph1">`CRgn`</ph> object by the specified offsets.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>CRgn::PtInRegion</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Determines whether a specified point is in the region.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>CRgn::RectInRegion</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Determines whether any part of a specified rectangle is within the boundaries of the region.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>CRgn::SetRectRgn</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Sets the <ph id="ph1">`CRgn`</ph> object to the specified rectangular region.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>CRgn::operator HRGN</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Returns the Windows handle contained in the <ph id="ph1">`CRgn`</ph> object.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A region is an elliptical or polygonal area within a window.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To use regions, you use the member functions of class <ph id="ph1">`CRgn`</ph> with the clipping functions defined as members of class <ph id="ph2">`CDC`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The member functions of <ph id="ph1">`CRgn`</ph> create, alter, and retrieve information about the region object for which they are called.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For more information on using <ph id="ph1">`CRgn`</ph>, see <bpt id="p1">[</bpt>Graphic Objects<ept id="p1">](../../mfc/graphic-objects.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>CGdiObject</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxwin.h</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>CRgn::CombineRgn</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Creates a new GDI region by combining two existing regions.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Identifies an existing region.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Identifies an existing region.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Specifies the operation to be performed when combining the two source regions.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>It can be any one of the following values:</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RGN_AND<ept id="p1">**</ept> Uses overlapping areas of both regions (intersection).</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RGN_COPY<ept id="p1">**</ept> Creates a copy of region 1 (identified by <ph id="ph1">`pRgn1`</ph>).</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RGN_DIFF<ept id="p1">**</ept> Creates a region consisting of the areas of region 1 (identified by <ph id="ph1">`pRgn1`</ph>) that are not part of region 2 (identified by <ph id="ph2">`pRgn2`</ph>).</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RGN_OR<ept id="p1">**</ept> Combines both regions in their entirety (union).</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RGN_XOR<ept id="p1">**</ept> Combines both regions but removes overlapping areas.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Specifies the type of the resulting region.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>It can be one of the following values:</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COMPLEXREGION<ept id="p1">**</ept> New region has overlapping borders.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ERROR<ept id="p1">**</ept> No new region created.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NULLREGION<ept id="p1">**</ept> New region is empty.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SIMPLEREGION<ept id="p1">**</ept> New region has no overlapping borders.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The regions are combined as specified by <ph id="ph1">`nCombineMode`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The two specified regions are combined, and the resulting region handle is stored in the <ph id="ph1">`CRgn`</ph> object.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Thus, whatever region is stored in the <ph id="ph1">`CRgn`</ph> object is replaced by the combined region.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The size of a region is limited to 32,767 by 32,767 logical units or 64K of memory, whichever is smaller.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>CopyRgn<ept id="p1">](#crgn__copyrgn)</ept> to simply copy one region into another region.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#144</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>CRgn::CopyRgn</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Copies the region defined by <ph id="ph1">`pRgnSrc`</ph> into the <ph id="ph2">`CRgn`</ph> object.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Identifies an existing region.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Specifies the type of the resulting region.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>It can be one of the following values:</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COMPLEXREGION<ept id="p1">**</ept> New region has overlapping borders.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ERROR<ept id="p1">**</ept> No new region created.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NULLREGION<ept id="p1">**</ept> New region is empty.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SIMPLEREGION<ept id="p1">**</ept> New region has no overlapping borders.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The new region replaces the region formerly stored in the <ph id="ph1">`CRgn`</ph> object.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>This function is a special case of the <bpt id="p1">[</bpt>CombineRgn<ept id="p1">](#crgn__combinergn)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CRgn::CreateEllipticRgn<ept id="p1">](#crgn__createellipticrgn)</ept>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>CRgn::CreateEllipticRgn</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Creates an elliptical region.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the upper-left corner of the bounding rectangle of the ellipse.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the upper-left corner of the bounding rectangle of the ellipse.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the lower-right corner of the bounding rectangle of the ellipse.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the lower-right corner of the bounding rectangle of the ellipse.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Nonzero if the operation succeeded; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The region is defined by the bounding rectangle specified by <ph id="ph1">`x1`</ph>, <ph id="ph2">`y1`</ph>, <ph id="ph3">`x2`</ph>, and <ph id="ph4">`y2`</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The region is stored in the <ph id="ph1">`CRgn`</ph> object.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The size of a region is limited to 32,767 by 32,767 logical units or 64K of memory, whichever is smaller.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>When it has finished using a region created with the <ph id="ph1">`CreateEllipticRgn`</ph> function, an application should select the region out of the device context and use the <ph id="ph2">`DeleteObject`</ph> function to remove it.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#145</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>CRgn::CreateEllipticRgnIndirect</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Creates an elliptical region.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Points to a <ph id="ph1">`RECT`</ph> structure or a <ph id="ph2">`CRect`</ph> object that contains the logical coordinates of the upper-left and lower-right corners of the bounding rectangle of the ellipse.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Nonzero if the operation succeeded; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The region is defined by the structure or object pointed to by <ph id="ph1">`lpRect`</ph> and is stored in the <ph id="ph2">`CRgn`</ph> object.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The size of a region is limited to 32,767 by 32,767 logical units or 64K of memory, whichever is smaller.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>When it has finished using a region created with the <ph id="ph1">`CreateEllipticRgnIndirect`</ph> function, an application should select the region out of the device context and use the <ph id="ph2">`DeleteObject`</ph> function to remove it.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CRgn::CreateRectRgnIndirect<ept id="p1">](#crgn__createrectrgnindirect)</ept>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>CRgn::CreateFromData</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Creates a region from the given region and transformation data.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>lpXForm</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Points to an <bpt id="p1">[</bpt>XFORM<ept id="p1">](../../mfc/reference/xform-structure.md)</ept> data structure that defines the transformation to be performed on the region.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>If this pointer is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the identity transformation is used.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Specifies the number of bytes pointed to by <ph id="ph1">`pRgnData`</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>RGNDATA<ept id="p1">](../../mfc/reference/rgndata-structure.md)</ept> data structure that contains the region data.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>An application can retrieve data for a region by calling the <ph id="ph1">`CRgn::GetRegionData`</ph> function.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>CRgn::CreateFromPath</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Creates a region from the path that is selected into the given device context.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Identifies a device context that contains a closed path.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The device context identified by the <ph id="ph1">`pDC`</ph> parameter must contain a closed path.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>After <ph id="ph1">`CreateFromPath`</ph> converts a path into a region, Windows discards the closed path from the device context.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>CRgn::CreatePolygonRgn</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Creates a polygonal region.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Points to an array of <bpt id="p1">**</bpt>POINT<ept id="p1">**</ept> structures or an array of <ph id="ph1">`CPoint`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Each structure specifies the x-coordinate and y-coordinate of one vertex of the polygon.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>POINT<ept id="p1">**</ept> structure has the following form:</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Specifies the number of <bpt id="p1">**</bpt>POINT<ept id="p1">**</ept> structures or <ph id="ph1">`CPoint`</ph> objects in the array pointed to by <ph id="ph2">`lpPoints`</ph>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Specifies the filling mode for the region.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>This parameter may be either <bpt id="p1">**</bpt>ALTERNATE<ept id="p1">**</ept> or <bpt id="p2">**</bpt>WINDING<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Nonzero if the operation succeeded; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The system closes the polygon automatically, if necessary, by drawing a line from the last vertex to the first.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The resulting region is stored in the <ph id="ph1">`CRgn`</ph> object.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The size of a region is limited to 32,767 by 32,767 logical units or 64K of memory, whichever is smaller.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>When the polygon-filling mode is <bpt id="p1">**</bpt>ALTERNATE<ept id="p1">**</ept>, the system fills the area between odd-numbered and even-numbered polygon sides on each scan line.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>That is, the system fills the area between the first and second side, between the third and fourth side, and so on.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>When the polygon-filling mode is <bpt id="p1">**</bpt>WINDING<ept id="p1">**</ept>, the system uses the direction in which a figure was drawn to determine whether to fill an area.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Each line segment in a polygon is drawn in either a clockwise or a counterclockwise direction.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Whenever an imaginary line drawn from an enclosed area to the outside of a figure passes through a clockwise line segment, a count is incremented.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>When the line passes through a counterclockwise line segment, the count is decremented.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The area is filled if the count is nonzero when the line reaches the outside of the figure.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>When an application has finished using a region created with the <ph id="ph1">`CreatePolygonRgn`</ph> function, it should select the region out of the device context and use the <ph id="ph2">`DeleteObject`</ph> function to remove it.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#146</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>CRgn::CreatePolyPolygonRgn</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Creates a region consisting of a series of closed polygons.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Points to an array of <bpt id="p1">**</bpt>POINT<ept id="p1">**</ept> structures or an array of <ph id="ph1">`CPoint`</ph> objects that defines the vertices of the polygons.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Each polygon must be explicitly closed because the system does not close them automatically.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The polygons are specified consecutively.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>POINT<ept id="p1">**</ept> structure has the following form:</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Points to an array of integers.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The first integer specifies the number of vertices in the first polygon in the <ph id="ph1">`lpPoints`</ph> array, the second integer specifies the number of vertices in the second polygon, and so on.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Specifies the total number of integers in the <ph id="ph1">`lpPolyCounts`</ph> array.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Specifies the polygon-filling mode.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>This value may be either <bpt id="p1">**</bpt>ALTERNATE<ept id="p1">**</ept> or <bpt id="p2">**</bpt>WINDING<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Nonzero if the operation succeeded; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The resulting region is stored in the <ph id="ph1">`CRgn`</ph> object.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The polygons may be disjoint, or they may overlap.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The size of a region is limited to 32,767 by 32,767 logical units or 64K of memory, whichever is smaller.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>When the polygon-filling mode is <bpt id="p1">**</bpt>ALTERNATE<ept id="p1">**</ept>, the system fills the area between odd-numbered and even-numbered polygon sides on each scan line.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>That is, the system fills the area between the first and second side, between the third and fourth side, and so on.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>When the polygon-filling mode is <bpt id="p1">**</bpt>WINDING<ept id="p1">**</ept>, the system uses the direction in which a figure was drawn to determine whether to fill an area.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Each line segment in a polygon is drawn in either a clockwise or a counterclockwise direction.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Whenever an imaginary line drawn from an enclosed area to the outside of a figure passes through a clockwise line segment, a count is incremented.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>When the line passes through a counterclockwise line segment, the count is decremented.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The area is filled if the count is nonzero when the line reaches the outside of the figure.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>When an application has finished using a region created with the <ph id="ph1">`CreatePolyPolygonRgn`</ph> function, it should select the region out of the device context and use the <bpt id="p1">[</bpt>CGDIObject::DeleteObject<ept id="p1">](../../mfc/reference/cgdiobject-class.md#cgdiobject__deleteobject)</ept> member function to remove it.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>CRgn::CreateRectRgn</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Creates a rectangular region that is stored in the <ph id="ph1">`CRgn`</ph> object.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the upper-left corner of the region.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the upper-left corner of the region.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the lower-right corner of the region.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the lower-right corner of the region.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Nonzero if the operation succeeded; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The size of a region is limited to 32,767 by 32,767 logical units or 64K of memory, whichever is smaller.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>When it has finished using a region created by <ph id="ph1">`CreateRectRgn`</ph>, an application should use the <bpt id="p1">[</bpt>CGDIObject::DeleteObject<ept id="p1">](../../mfc/reference/cgdiobject-class.md#cgdiobject__deleteobject)</ept> member function to remove the region.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#147</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>For an additional example, see <bpt id="p1">[</bpt>CRgn::CombineRgn<ept id="p1">](#crgn__combinergn)</ept>.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>CRgn::CreateRectRgnIndirect</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Creates a rectangular region that is stored in the <ph id="ph1">`CRgn`</ph> object.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Points to a <ph id="ph1">`RECT`</ph> structure or <ph id="ph2">`CRect`</ph> object that contains the logical coordinates of the upper-left and lower-right corners of the region.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`RECT`</ph> structure has the following form:</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Nonzero if the operation succeeded; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The size of a region is limited to 32,767 by 32,767 logical units or 64K of memory, whichever is smaller.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>When it has finished using a region created by <ph id="ph1">`CreateRectRgnIndirect`</ph>, an application should use the <bpt id="p1">[</bpt>CGDIObject::DeleteObject<ept id="p1">](../../mfc/reference/cgdiobject-class.md#cgdiobject__deleteobject)</ept> member function to remove the region.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#148</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>CRgn::CreateRoundRectRgn</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Creates a rectangular region with rounded corners that is stored in the <ph id="ph1">`CRgn`</ph> object.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the upper-left corner of the region.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the upper-left corner of the region.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the lower-right corner of the region.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the lower-right corner of the region.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>x3</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Specifies the width of the ellipse used to create the rounded corners.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Specifies the height of the ellipse used to create the rounded corners.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Nonzero if the operation succeeded; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>The size of a region is limited to 32,767 by 32,767 logical units or 64K of memory, whichever is smaller.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>When an application has finished using a region created with the <ph id="ph1">`CreateRoundRectRgn`</ph> function, it should select the region out of the device context and use the <bpt id="p1">[</bpt>CGDIObject::DeleteObject<ept id="p1">](../../mfc/reference/cgdiobject-class.md#cgdiobject__deleteobject)</ept> member function to remove it.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#149</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>CRgn::CRgn</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CRgn`</ph> object.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`m_hObject`</ph> data member does not contain a valid Windows GDI region until the object is initialized with one or more of the other <ph id="ph2">`CRgn`</ph> member functions.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CRgn::CreateRoundRectRgn<ept id="p1">](#crgn__createroundrectrgn)</ept>.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>CRgn::EqualRgn</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Determines whether the given region is equivalent to the region stored in the <ph id="ph1">`CRgn`</ph> object.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Identifies a region.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Nonzero if the two regions are equivalent; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#150</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>CRgn::FromHandle</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Returns a pointer to a <ph id="ph1">`CRgn`</ph> object when given a handle to a Windows region.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Specifies a handle to a Windows region.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CRgn`</ph> object.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>If the function was not successful, the return value is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`CRgn`</ph> object is not already attached to the handle, a temporary <ph id="ph2">`CRgn`</ph> object is created and attached.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>This temporary <ph id="ph1">`CRgn`</ph> object is valid only until the next time the application has idle time in its event loop, at which time all temporary graphic objects are deleted.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Another way of saying this is that the temporary object is only valid during the processing of one window message.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>CRgn::GetRegionData</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Fills the specified buffer with data describing the region.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>RGNDATA<ept id="p1">](../../mfc/reference/rgndata-structure.md)</ept> data structure that receives the information.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>If this parameter is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the return value contains the number of bytes needed for the region data.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Specifies the size, in bytes, of the <ph id="ph1">`lpRgnData`</ph> buffer.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>If the function succeeds and <ph id="ph1">`nCount`</ph> specifies an adequate number of bytes, the return value is always <ph id="ph2">`nCount`</ph>.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>If the function fails, or if <ph id="ph1">`nCount`</ph> specifies less than adequate number of bytes, the return value is 0 (error).</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>This data includes the dimensions of the rectangles that make up the region.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>This function is used in conjunction with the <ph id="ph1">`CRgn::CreateFromData`</ph> function.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>CRgn::GetRgnBox</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Retrieves the coordinates of the bounding rectangle of the <ph id="ph1">`CRgn`</ph> object.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Points to a <ph id="ph1">`RECT`</ph> structure or <ph id="ph2">`CRect`</ph> object to receive the coordinates of the bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`RECT`</ph> structure has the following form:</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Specifies the region's type.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>It can be any of the following values:</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COMPLEXREGION<ept id="p1">**</ept> Region has overlapping borders.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NULLREGION<ept id="p1">**</ept> Region is empty.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ERROR<ept id="p1">**</ept> <ph id="ph1">`CRgn`</ph> object does not specify a valid region.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SIMPLEREGION<ept id="p1">**</ept> Region has no overlapping borders.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CRgn::CreatePolygonRgn<ept id="p1">](#crgn__createpolygonrgn)</ept>.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>CRgn::OffsetRgn</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Moves the region stored in the <ph id="ph1">`CRgn`</ph> object by the specified offsets.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>x</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Specifies the number of units to move left or right.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>y</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Specifies the number of units to move up or down.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>The x-coordinate of <ph id="ph1">`point`</ph> specifies the number of units to move left or right.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>The y-coordinate of <ph id="ph1">`point`</ph> specifies the number of units to move up or down.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`point`</ph> parameter may be either a <bpt id="p1">**</bpt>POINT<ept id="p1">**</ept> structure or a <ph id="ph2">`CPoint`</ph> object.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>The new region's type.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>It can be any one of the following values:</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COMPLEXREGION<ept id="p1">**</ept> Region has overlapping borders.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ERROR<ept id="p1">**</ept> Region handle is not valid.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NULLREGION<ept id="p1">**</ept> Region is empty.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SIMPLEREGION<ept id="p1">**</ept> Region has no overlapping borders.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>The function moves the region <bpt id="p1">*</bpt>x<ept id="p1">*</ept> units along the x-axis and <bpt id="p2">*</bpt>y<ept id="p2">*</ept> units along the y-axis.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>The coordinate values of a region must be less than or equal to 32,767 and greater than or equal to –32,768.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>x<ept id="p1">*</ept> and <bpt id="p2">*</bpt>y<ept id="p2">*</ept> parameters must be carefully chosen to prevent invalid region coordinates.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CRgn::CreateEllipticRgn<ept id="p1">](#crgn__createellipticrgn)</ept>.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>CRgn::operator HRGN</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Use this operator to get the attached Windows GDI handle of the <ph id="ph1">`CRgn`</ph> object.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>If successful, a handle to the Windows GDI object represented by the <ph id="ph1">`CRgn`</ph> object; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>This operator is a casting operator, which supports direct use of an <bpt id="p1">**</bpt>HRGN<ept id="p1">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>For more information about using graphic objects, see the article <bpt id="p1">[</bpt>Graphic Objects<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd144962)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>CRgn::PtInRegion</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Checks whether the point given by <bpt id="p1">*</bpt>x<ept id="p1">*</ept> and <bpt id="p2">*</bpt>y<ept id="p2">*</ept> is in the region stored in the <ph id="ph1">`CRgn`</ph> object.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>x</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Specifies the logical x-coordinate of the point to test.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>y</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Specifies the logical y-coordinate of the point to test.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>The x- and y-coordinates of <ph id="ph1">`point`</ph> specify the x- and y-coordinates of the point to test the value of.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`point`</ph> parameter can either be a <bpt id="p1">**</bpt>POINT<ept id="p1">**</ept> structure or a <ph id="ph2">`CPoint`</ph> object.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Nonzero if the point is in the region; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>CRgn::RectInRegion</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Determines whether any part of the rectangle specified by <ph id="ph1">`lpRect`</ph> is within the boundaries of the region stored in the <ph id="ph2">`CRgn`</ph> object.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Points to a <ph id="ph1">`RECT`</ph> structure or <ph id="ph2">`CRect`</ph> object.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`RECT`</ph> structure has the following form:</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Nonzero if any part of the specified rectangle lies within the boundaries of the region; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>CRgn::SetRectRgn</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Creates a rectangular region.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate of the upper-left corner of the rectangular region.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate of the upper-left corner of the rectangular region.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Specifies the x-coordinate of the lower-right corner of the rectangular region.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Specifies the y-coordinate of the lower-right corner of the rectangular region.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>Specifies the rectangular region.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>Can be either a pointer to a <ph id="ph1">`RECT`</ph> structure or a <ph id="ph2">`CRect`</ph> object.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Unlike <bpt id="p1">[</bpt>CreateRectRgn<ept id="p1">](#crgn__createrectrgn)</ept>, however, it does not allocate any additional memory from the local Windows application heap.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Instead, it uses the space allocated for the region stored in the <ph id="ph1">`CRgn`</ph> object.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>This means that the <ph id="ph1">`CRgn`</ph> object must already have been initialized with a valid Windows region before calling <ph id="ph2">`SetRectRgn`</ph>.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>The points given by <ph id="ph1">`x1`</ph>, <ph id="ph2">`y1`</ph>, <ph id="ph3">`x2`</ph>, and <ph id="ph4">`y2`</ph> specify the minimum size of the allocated space.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Use this function instead of the <ph id="ph1">`CreateRectRgn`</ph> member function to avoid calls to the local memory manager.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>CWnd Class</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>