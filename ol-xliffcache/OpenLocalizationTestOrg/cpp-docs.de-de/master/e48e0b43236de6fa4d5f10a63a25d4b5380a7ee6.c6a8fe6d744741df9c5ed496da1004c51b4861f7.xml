{"nodes":[{"pos":[12,45],"content":"CScrollBar Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CScrollBar Class | Microsoft Docs","pos":[0,33]}]},{"pos":[732,748],"content":"CScrollBar Class","linkify":"CScrollBar Class","nodes":[{"content":"CScrollBar Class","pos":[0,16]}]},{"content":"Provides the functionality of a Windows scroll-bar control.","pos":[749,808]},{"pos":[817,823],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[880,887],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[897,916],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[923,927]},{"content":"Description","pos":[928,939]},{"pos":[977,1026],"content":"<bpt id=\"p1\">[</bpt>CScrollBar::CScrollBar<ept id=\"p1\">](#cscrollbar__cscrollbar)</ept>","source":"[CScrollBar::CScrollBar](#cscrollbar__cscrollbar)"},{"pos":[1027,1060],"content":"Constructs a <ph id=\"ph1\">`CScrollBar`</ph> object.","source":"Constructs a `CScrollBar` object."},{"pos":[1071,1085],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1092,1096]},{"content":"Description","pos":[1097,1108]},{"pos":[1146,1187],"content":"<bpt id=\"p1\">[</bpt>CScrollBar::Create<ept id=\"p1\">](#cscrollbar__create)</ept>","source":"[CScrollBar::Create](#cscrollbar__create)"},{"pos":[1188,1262],"content":"Creates the Windows scroll bar and attaches it to the <ph id=\"ph1\">`CScrollBar`</ph> object.","source":"Creates the Windows scroll bar and attaches it to the `CScrollBar` object."},{"pos":[1267,1326],"content":"<bpt id=\"p1\">[</bpt>CScrollBar::EnableScrollBar<ept id=\"p1\">](#cscrollbar__enablescrollbar)</ept>","source":"[CScrollBar::EnableScrollBar](#cscrollbar__enablescrollbar)"},{"content":"Enables or disables one or both arrows of a scroll bar.","pos":[1327,1382]},{"pos":[1387,1448],"content":"<bpt id=\"p1\">[</bpt>CScrollBar::GetScrollBarInfo<ept id=\"p1\">](#cscrollbar__getscrollbarinfo)</ept>","source":"[CScrollBar::GetScrollBarInfo](#cscrollbar__getscrollbarinfo)"},{"pos":[1449,1526],"content":"Retrieves information about the scroll bar using a <ph id=\"ph1\">`SCROLLBARINFO`</ph> structure.","source":"Retrieves information about the scroll bar using a `SCROLLBARINFO` structure."},{"pos":[1531,1586],"content":"<bpt id=\"p1\">[</bpt>CScrollBar::GetScrollInfo<ept id=\"p1\">](#cscrollbar__getscrollinfo)</ept>","source":"[CScrollBar::GetScrollInfo](#cscrollbar__getscrollinfo)"},{"content":"Retrieves information about the scroll bar.","pos":[1587,1630]},{"pos":[1635,1692],"content":"<bpt id=\"p1\">[</bpt>CScrollBar::GetScrollLimit<ept id=\"p1\">](#cscrollbar__getscrolllimit)</ept>","source":"[CScrollBar::GetScrollLimit](#cscrollbar__getscrolllimit)"},{"content":"Retrieves the limit of the scroll bar","pos":[1693,1730]},{"pos":[1735,1788],"content":"<bpt id=\"p1\">[</bpt>CScrollBar::GetScrollPos<ept id=\"p1\">](#cscrollbar__getscrollpos)</ept>","source":"[CScrollBar::GetScrollPos](#cscrollbar__getscrollpos)"},{"content":"Retrieves the current position of a scroll box.","pos":[1789,1836]},{"pos":[1841,1898],"content":"<bpt id=\"p1\">[</bpt>CScrollBar::GetScrollRange<ept id=\"p1\">](#cscrollbar__getscrollrange)</ept>","source":"[CScrollBar::GetScrollRange](#cscrollbar__getscrollrange)"},{"content":"Retrieves the current minimum and maximum scroll-bar positions for the given scroll bar.","pos":[1899,1987]},{"pos":[1992,2047],"content":"<bpt id=\"p1\">[</bpt>CScrollBar::SetScrollInfo<ept id=\"p1\">](#cscrollbar__setscrollinfo)</ept>","source":"[CScrollBar::SetScrollInfo](#cscrollbar__setscrollinfo)"},{"content":"Sets information about the scroll bar.","pos":[2048,2086]},{"pos":[2091,2144],"content":"<bpt id=\"p1\">[</bpt>CScrollBar::SetScrollPos<ept id=\"p1\">](#cscrollbar__setscrollpos)</ept>","source":"[CScrollBar::SetScrollPos](#cscrollbar__setscrollpos)"},{"content":"Sets the current position of a scroll box.","pos":[2145,2187]},{"pos":[2192,2249],"content":"<bpt id=\"p1\">[</bpt>CScrollBar::SetScrollRange<ept id=\"p1\">](#cscrollbar__setscrollrange)</ept>","source":"[CScrollBar::SetScrollRange](#cscrollbar__setscrollrange)"},{"content":"Sets minimum and maximum position values for the given scroll bar.","pos":[2250,2316]},{"pos":[2321,2376],"content":"<bpt id=\"p1\">[</bpt>CScrollBar::ShowScrollBar<ept id=\"p1\">](#cscrollbar__showscrollbar)</ept>","source":"[CScrollBar::ShowScrollBar](#cscrollbar__showscrollbar)"},{"content":"Shows or hides a scroll bar.","pos":[2377,2405]},{"pos":[2415,2422],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You create a scroll-bar control in two steps.","pos":[2426,2471]},{"content":"First, call the constructor <ph id=\"ph1\">`CScrollBar`</ph> to construct the <ph id=\"ph2\">`CScrollBar`</ph> object, then call the <bpt id=\"p1\">[</bpt>Create<ept id=\"p1\">](#cscrollbar__create)</ept> member function to create the Windows scroll-bar control and attach it to the <ph id=\"ph3\">`CScrollBar`</ph> object.","pos":[2472,2693],"source":" First, call the constructor `CScrollBar` to construct the `CScrollBar` object, then call the [Create](#cscrollbar__create) member function to create the Windows scroll-bar control and attach it to the `CScrollBar` object."},{"pos":[2700,2865],"content":"If you create a <ph id=\"ph1\">`CScrollBar`</ph> object within a dialog box (through a dialog resource), the <ph id=\"ph2\">`CScrollBar`</ph> is automatically destroyed when the user closes the dialog box.","source":"If you create a `CScrollBar` object within a dialog box (through a dialog resource), the `CScrollBar` is automatically destroyed when the user closes the dialog box."},{"pos":[2872,2957],"content":"If you create a <ph id=\"ph1\">`CScrollBar`</ph> object within a window, you may also need to destroy it.","source":"If you create a `CScrollBar` object within a window, you may also need to destroy it."},{"content":"If you create the <ph id=\"ph1\">`CScrollBar`</ph> object on the stack, it is destroyed automatically.","pos":[2964,3046],"source":"If you create the `CScrollBar` object on the stack, it is destroyed automatically."},{"content":"If you create the <ph id=\"ph1\">`CScrollBar`</ph> object on the heap by using the <bpt id=\"p1\">**</bpt>new<ept id=\"p1\">**</ept> function, you must call <bpt id=\"p2\">**</bpt>delete<ept id=\"p2\">**</ept> on the object to destroy it when the user terminates the Windows scroll bar.","pos":[3047,3229],"source":" If you create the `CScrollBar` object on the heap by using the **new** function, you must call **delete** on the object to destroy it when the user terminates the Windows scroll bar."},{"pos":[3236,3358],"content":"If you allocate any memory in the <ph id=\"ph1\">`CScrollBar`</ph> object, override the <ph id=\"ph2\">`CScrollBar`</ph> destructor to dispose of the allocations.","source":"If you allocate any memory in the `CScrollBar` object, override the `CScrollBar` destructor to dispose of the allocations."},{"pos":[3365,3457],"content":"For related information about using <ph id=\"ph1\">`CScrollBar`</ph>, see <bpt id=\"p1\">[</bpt>Controls<ept id=\"p1\">](../../mfc/controls-mfc.md)</ept>.","source":"For related information about using `CScrollBar`, see [Controls](../../mfc/controls-mfc.md)."},{"pos":[3466,3487],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[3491,3538],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[3545,3598],"content":"<bpt id=\"p1\">[</bpt>CCmdTarget<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept>","source":"[CCmdTarget](../../mfc/reference/ccmdtarget-class.md)"},{"pos":[3605,3646],"content":"<bpt id=\"p1\">[</bpt>CWnd<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept>","source":"[CWnd](../../mfc/reference/cwnd-class.md)"},{"pos":[3674,3686],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3690,3710],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxwin.h","source":"**Header:** afxwin.h"},{"pos":[3720,3773],"content":"<bpt id=\"p1\">&lt;a name=\"cscrollbar__create\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CScrollBar::Create","linkify":"<a name=\"cscrollbar__create\"></a>  CScrollBar::Create","source":"<a name=\"cscrollbar__create\"></a>  CScrollBar::Create"},{"pos":[3777,3851],"content":"Creates the Windows scroll bar and attaches it to the <ph id=\"ph1\">`CScrollBar`</ph> object.","source":"Creates the Windows scroll bar and attaches it to the `CScrollBar` object."},{"pos":[3981,3991],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the scroll bar's style.","pos":[4008,4041]},{"content":"Apply any combination of <bpt id=\"p1\">[</bpt>scroll-bar styles<ept id=\"p1\">](../../mfc/reference/scroll-bar-styles.md)</ept> to the scroll bar.","pos":[4042,4147],"source":" Apply any combination of [scroll-bar styles](../../mfc/reference/scroll-bar-styles.md) to the scroll bar."},{"content":"Specifies the scroll bar's size and position.","pos":[4164,4209]},{"content":"Can be either a <ph id=\"ph1\">`RECT`</ph> structure or a <ph id=\"ph2\">`CRect`</ph> object.","pos":[4210,4263],"source":" Can be either a `RECT` structure or a `CRect` object."},{"content":"Specifies the scroll bar's parent window, usually a <ph id=\"ph1\">`CDialog`</ph> object.","pos":[4286,4355],"source":" Specifies the scroll bar's parent window, usually a `CDialog` object."},{"content":"It must not be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[4356,4380],"source":" It must not be **NULL**."},{"content":"The scroll bar's control ID.","pos":[4396,4424]},{"pos":[4434,4446],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[4450,4485]},{"pos":[4495,4502],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You construct a <ph id=\"ph1\">`CScrollBar`</ph> object in two steps.","pos":[4506,4555],"source":"You construct a `CScrollBar` object in two steps."},{"content":"First, call the constructor, which constructs the <ph id=\"ph1\">`CScrollBar`</ph> object; then call <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept>, which creates and initializes the associated Windows scroll bar and attaches it to the <ph id=\"ph2\">`CScrollBar`</ph> object.","pos":[4556,4756],"source":" First, call the constructor, which constructs the `CScrollBar` object; then call **Create**, which creates and initializes the associated Windows scroll bar and attaches it to the `CScrollBar` object."},{"pos":[4763,4853],"content":"Apply the following <bpt id=\"p1\">[</bpt>window styles<ept id=\"p1\">](../../mfc/reference/window-styles.md)</ept> to a scroll bar:","source":"Apply the following [window styles](../../mfc/reference/window-styles.md) to a scroll bar:"},{"pos":[4861,4880],"content":"<bpt id=\"p1\">**</bpt>WS_CHILD<ept id=\"p1\">**</ept> Always","source":"**WS_CHILD** Always"},{"pos":[4888,4910],"content":"<bpt id=\"p1\">**</bpt>WS_VISIBLE<ept id=\"p1\">**</ept> Usually","source":"**WS_VISIBLE** Usually"},{"pos":[4918,4940],"content":"<bpt id=\"p1\">**</bpt>WS_DISABLED<ept id=\"p1\">**</ept> Rarely","source":"**WS_DISABLED** Rarely"},{"pos":[4948,4978],"content":"<bpt id=\"p1\">**</bpt>WS_GROUP<ept id=\"p1\">**</ept> To group controls","source":"**WS_GROUP** To group controls"},{"pos":[4988,4995],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4999,5092],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CScrollBar#1<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cscrollbar-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CScrollBar#1](../../mfc/reference/codesnippet/cpp/cscrollbar-class_1.cpp)]"},{"pos":[5102,5163],"content":"<bpt id=\"p1\">&lt;a name=\"cscrollbar__cscrollbar\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CScrollBar::CScrollBar","linkify":"<a name=\"cscrollbar__cscrollbar\"></a>  CScrollBar::CScrollBar","source":"<a name=\"cscrollbar__cscrollbar\"></a>  CScrollBar::CScrollBar"},{"pos":[5167,5200],"content":"Constructs a <ph id=\"ph1\">`CScrollBar`</ph> object.","source":"Constructs a `CScrollBar` object."},{"pos":[5239,5246],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5250,5365],"content":"After constructing the object, call the <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> member function to create and initialize the Windows scroll bar.","source":"After constructing the object, call the **Create** member function to create and initialize the Windows scroll bar."},{"pos":[5375,5382],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5386,5477],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CScrollBar#2<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cscrollbar-class_2.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CScrollBar#2](../../mfc/reference/codesnippet/cpp/cscrollbar-class_2.h)]"},{"pos":[5487,5558],"content":"<bpt id=\"p1\">&lt;a name=\"cscrollbar__enablescrollbar\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CScrollBar::EnableScrollBar","linkify":"<a name=\"cscrollbar__enablescrollbar\"></a>  CScrollBar::EnableScrollBar","source":"<a name=\"cscrollbar__enablescrollbar\"></a>  CScrollBar::EnableScrollBar"},{"content":"Enables or disables one or both arrows of a scroll bar.","pos":[5562,5617]},{"pos":[5700,5710],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies whether the scroll arrows are enabled or disabled and which arrows are enabled or disabled.","pos":[5731,5832]},{"content":"This parameter can be one of the following values:","pos":[5833,5883]},{"pos":[5891,5947],"content":"<bpt id=\"p1\">**</bpt>ESB_ENABLE_BOTH<ept id=\"p1\">**</ept> Enables both arrows of a scroll bar.","source":"**ESB_ENABLE_BOTH** Enables both arrows of a scroll bar."},{"pos":[5955,6068],"content":"<bpt id=\"p1\">**</bpt>ESB_DISABLE_LTUP<ept id=\"p1\">**</ept> Disables the left arrow of a horizontal scroll bar or the up arrow of a vertical scroll bar.","source":"**ESB_DISABLE_LTUP** Disables the left arrow of a horizontal scroll bar or the up arrow of a vertical scroll bar."},{"pos":[6076,6192],"content":"<bpt id=\"p1\">**</bpt>ESB_DISABLE_RTDN<ept id=\"p1\">**</ept> Disables the right arrow of a horizontal scroll bar or the down arrow of a vertical scroll bar.","source":"**ESB_DISABLE_RTDN** Disables the right arrow of a horizontal scroll bar or the down arrow of a vertical scroll bar."},{"pos":[6200,6258],"content":"<bpt id=\"p1\">**</bpt>ESB_DISABLE_BOTH<ept id=\"p1\">**</ept> Disables both arrows of a scroll bar.","source":"**ESB_DISABLE_BOTH** Disables both arrows of a scroll bar."},{"pos":[6268,6280],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the arrows are enabled or disabled as specified; otherwise 0, which indicates that the arrows are already in the requested state or that an error occurred.","pos":[6284,6450]},{"pos":[6460,6467],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6472,6550],"content":"See the example for <bpt id=\"p1\">[</bpt>CScrollBar::SetScrollRange<ept id=\"p1\">](#cscrollbar__setscrollrange)</ept>.","source":"See the example for [CScrollBar::SetScrollRange](#cscrollbar__setscrollrange)."},{"pos":[6560,6633],"content":"<bpt id=\"p1\">&lt;a name=\"cscrollbar__getscrollbarinfo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CScrollBar::GetScrollBarInfo","linkify":"<a name=\"cscrollbar__getscrollbarinfo\"></a>  CScrollBar::GetScrollBarInfo","source":"<a name=\"cscrollbar__getscrollbarinfo\"></a>  CScrollBar::GetScrollBarInfo"},{"pos":[6637,6729],"content":"Retrieves the information that the <bpt id=\"p1\">**</bpt>SCROLLBARINFO<ept id=\"p1\">**</ept> structure maintains about a scroll bar.","source":"Retrieves the information that the **SCROLLBARINFO** structure maintains about a scroll bar."},{"pos":[6814,6824],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>pScrollInfo<ept id=\"p1\">*</ept>","pos":[6828,6841],"source":"*pScrollInfo*"},{"content":"A pointer to the <bpt id=\"p1\">[</bpt>SCROLLBARINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787535)</ept> structure.","pos":[6845,6948],"source":" A pointer to the [SCROLLBARINFO](http://msdn.microsoft.com/library/windows/desktop/bb787535) structure."},{"pos":[6958,6970],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6974,7024],"content":"Returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> on success, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> on failure.","source":"Returns **TRUE** on success, **FALSE** on failure."},{"pos":[7034,7041],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7045,7261],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>SBM_SCROLLBARINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787545)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [SBM_SCROLLBARINFO](http://msdn.microsoft.com/library/windows/desktop/bb787545) message, as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[7271,7338],"content":"<bpt id=\"p1\">&lt;a name=\"cscrollbar__getscrollinfo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CScrollBar::GetScrollInfo","linkify":"<a name=\"cscrollbar__getscrollinfo\"></a>  CScrollBar::GetScrollInfo","source":"<a name=\"cscrollbar__getscrollinfo\"></a>  CScrollBar::GetScrollInfo"},{"pos":[7342,7429],"content":"Retrieves the information that the <ph id=\"ph1\">`SCROLLINFO`</ph> structure maintains about a scroll bar.","source":"Retrieves the information that the `SCROLLINFO` structure maintains about a scroll bar."},{"pos":[7534,7544],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>SCROLLINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787537)</ept> structure.","pos":[7566,7664],"source":" A pointer to a [SCROLLINFO](http://msdn.microsoft.com/library/windows/desktop/bb787537) structure."},{"content":"See the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for more information about this structure.","pos":[7665,7767],"source":" See the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for more information about this structure."},{"content":"Specifies the scroll bar parameters to retrieve.","pos":[7785,7833]},{"content":"Typical usage, SIF_ALL, specifies a combination of SIF_PAGE, SIF_POS, SIF_TRACKPOS, and SIF_RANGE.","pos":[7834,7932]},{"content":"See <ph id=\"ph1\">`SCROLLINFO`</ph> for more information on the nMask values.","pos":[7933,7991],"source":" See `SCROLLINFO` for more information on the nMask values."},{"pos":[8001,8013],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If the message retrieved any values, the return is <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>.","pos":[8017,8077],"source":"If the message retrieved any values, the return is **TRUE**."},{"content":"Otherwise, it is <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>.","pos":[8078,8105],"source":" Otherwise, it is **FALSE**."},{"pos":[8115,8122],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8126,8194],"content":"<ph id=\"ph1\">`GetScrollInfo`</ph> enables applications to use 32-bit scroll positions.","source":"`GetScrollInfo` enables applications to use 32-bit scroll positions."},{"content":"The <bpt id=\"p1\">[</bpt>SCROLLINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787537)</ept> structure contains information about a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box (the thumb).","pos":[8201,8446],"source":"The [SCROLLINFO](http://msdn.microsoft.com/library/windows/desktop/bb787537) structure contains information about a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box (the thumb)."},{"content":"See the <ph id=\"ph1\">`SCROLLINFO`</ph> structure topic in the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for more information about changing the structure defaults.","pos":[8447,8602],"source":" See the `SCROLLINFO` structure topic in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for more information about changing the structure defaults."},{"content":"The MFC Windows message handlers that indicate scroll bar position, <bpt id=\"p1\">[</bpt>CWnd::OnHScroll<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__onhscroll)</ept> and <bpt id=\"p2\">[</bpt>CWnd::OnVScroll<ept id=\"p2\">](../../mfc/reference/cwnd-class.md#cwnd__onvscroll)</ept>, provide only 16 bits of position data.","pos":[8609,8858],"source":"The MFC Windows message handlers that indicate scroll bar position, [CWnd::OnHScroll](../../mfc/reference/cwnd-class.md#cwnd__onhscroll) and [CWnd::OnVScroll](../../mfc/reference/cwnd-class.md#cwnd__onvscroll), provide only 16 bits of position data."},{"content":"<ph id=\"ph1\">`GetScrollInfo`</ph> and <ph id=\"ph2\">`SetScrollInfo`</ph> provide 32 bits of scroll bar position data.","pos":[8859,8939],"source":"`GetScrollInfo` and `SetScrollInfo` provide 32 bits of scroll bar position data."},{"content":"Thus, an application can call <ph id=\"ph1\">`GetScrollInfo`</ph> while processing either <ph id=\"ph2\">`CWnd::OnHScroll`</ph> or <ph id=\"ph3\">`CWnd::OnVScroll`</ph> to obtain 32-bit scroll bar position data.","pos":[8940,9091],"source":" Thus, an application can call `GetScrollInfo` while processing either `CWnd::OnHScroll` or `CWnd::OnVScroll` to obtain 32-bit scroll bar position data."},{"pos":[9101,9108],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9113,9202],"content":"See the example for <bpt id=\"p1\">[</bpt>CWnd::OnHScroll<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__onhscroll)</ept>.","source":"See the example for [CWnd::OnHScroll](../../mfc/reference/cwnd-class.md#cwnd__onhscroll)."},{"pos":[9212,9281],"content":"<bpt id=\"p1\">&lt;a name=\"cscrollbar__getscrolllimit\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CScrollBar::GetScrollLimit","linkify":"<a name=\"cscrollbar__getscrolllimit\"></a>  CScrollBar::GetScrollLimit","source":"<a name=\"cscrollbar__getscrolllimit\"></a>  CScrollBar::GetScrollLimit"},{"content":"Retrieves the maximum scrolling position of the scroll bar.","pos":[9285,9344]},{"pos":[9391,9403],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Specifies the maximum position of a scroll bar if successful; otherwise 0.","pos":[9407,9481]},{"pos":[9491,9498],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9503,9592],"content":"See the example for <bpt id=\"p1\">[</bpt>CWnd::OnHScroll<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__onhscroll)</ept>.","source":"See the example for [CWnd::OnHScroll](../../mfc/reference/cwnd-class.md#cwnd__onhscroll)."},{"pos":[9602,9667],"content":"<bpt id=\"p1\">&lt;a name=\"cscrollbar__getscrollpos\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CScrollBar::GetScrollPos","linkify":"<a name=\"cscrollbar__getscrollpos\"></a>  CScrollBar::GetScrollPos","source":"<a name=\"cscrollbar__getscrollpos\"></a>  CScrollBar::GetScrollPos"},{"content":"Retrieves the current position of a scroll box.","pos":[9671,9718]},{"pos":[9772,9784],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Specifies the current position of the scroll box if successful; otherwise 0.","pos":[9788,9864]},{"pos":[9874,9881],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The current position is a relative value that depends on the current scrolling range.","pos":[9885,9970]},{"content":"For example, if the scrolling range is 100 to 200 and the scroll box is in the middle of the bar, the current position is 150.","pos":[9971,10097]},{"pos":[10107,10114],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10119,10208],"content":"See the example for <bpt id=\"p1\">[</bpt>CWnd::OnHScroll<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__onhscroll)</ept>.","source":"See the example for [CWnd::OnHScroll](../../mfc/reference/cwnd-class.md#cwnd__onhscroll)."},{"pos":[10218,10287],"content":"<bpt id=\"p1\">&lt;a name=\"cscrollbar__getscrollrange\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CScrollBar::GetScrollRange","linkify":"<a name=\"cscrollbar__getscrollrange\"></a>  CScrollBar::GetScrollRange","source":"<a name=\"cscrollbar__getscrollrange\"></a>  CScrollBar::GetScrollRange"},{"pos":[10291,10432],"content":"Copies the current minimum and maximum scroll-bar positions for the given scroll bar to the locations specified by <ph id=\"ph1\">`lpMinPos`</ph> and <ph id=\"ph2\">`lpMaxPos`</ph>.","source":"Copies the current minimum and maximum scroll-bar positions for the given scroll bar to the locations specified by `lpMinPos` and `lpMaxPos`."},{"pos":[10530,10540],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to the integer variable that is to receive the minimum position.","pos":[10558,10629]},{"content":"Points to the integer variable that is to receive the maximum position.","pos":[10650,10721]},{"pos":[10731,10738],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default range for a scroll-bar control is empty (both values are 0).","pos":[10742,10814]},{"pos":[10824,10831],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10836,10925],"content":"See the example for <bpt id=\"p1\">[</bpt>CWnd::OnHScroll<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__onhscroll)</ept>.","source":"See the example for [CWnd::OnHScroll](../../mfc/reference/cwnd-class.md#cwnd__onhscroll)."},{"pos":[10935,11002],"content":"<bpt id=\"p1\">&lt;a name=\"cscrollbar__setscrollinfo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CScrollBar::SetScrollInfo","linkify":"<a name=\"cscrollbar__setscrollinfo\"></a>  CScrollBar::SetScrollInfo","source":"<a name=\"cscrollbar__setscrollinfo\"></a>  CScrollBar::SetScrollInfo"},{"pos":[11006,11088],"content":"Sets the information that the <ph id=\"ph1\">`SCROLLINFO`</ph> structure maintains about a scroll bar.","source":"Sets the information that the `SCROLLINFO` structure maintains about a scroll bar."},{"pos":[11192,11202],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>SCROLLINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787537)</ept> structure.","pos":[11224,11322],"source":" A pointer to a [SCROLLINFO](http://msdn.microsoft.com/library/windows/desktop/bb787537) structure."},{"content":"Specifies whether the scroll bar should be redrawn to reflect the new information.","pos":[11342,11424]},{"content":"If <ph id=\"ph1\">`bRedraw`</ph> is <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, the scroll bar is redrawn.","pos":[11425,11477],"source":" If `bRedraw` is **TRUE**, the scroll bar is redrawn."},{"content":"If it is <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>, it is not redrawn.","pos":[11478,11516],"source":" If it is **FALSE**, it is not redrawn."},{"content":"The scroll bar is redrawn by default.","pos":[11517,11554]},{"pos":[11564,11576],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If successful, the return is <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>.","pos":[11580,11618],"source":"If successful, the return is **TRUE**."},{"content":"Otherwise, it is <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>.","pos":[11619,11646],"source":" Otherwise, it is **FALSE**."},{"pos":[11656,11663],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11667,11772],"content":"You must provide the values required by the <ph id=\"ph1\">`SCROLLINFO`</ph> structure parameters, including the flag values.","source":"You must provide the values required by the `SCROLLINFO` structure parameters, including the flag values."},{"content":"The <ph id=\"ph1\">`SCROLLINFO`</ph> structure contains information about a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box (the thumb).","pos":[11779,11964],"source":"The `SCROLLINFO` structure contains information about a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box (the thumb)."},{"content":"See the <bpt id=\"p1\">[</bpt>SCROLLINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb787537)</ept> structure topic in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for more information about changing the structure defaults.","pos":[11965,12180],"source":" See the [SCROLLINFO](http://msdn.microsoft.com/library/windows/desktop/bb787537) structure topic in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for more information about changing the structure defaults."},{"pos":[12190,12197],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12201,12294],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CScrollBar#3<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cscrollbar-class_3.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CScrollBar#3](../../mfc/reference/codesnippet/cpp/cscrollbar-class_3.cpp)]"},{"pos":[12304,12369],"content":"<bpt id=\"p1\">&lt;a name=\"cscrollbar__setscrollpos\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CScrollBar::SetScrollPos","linkify":"<a name=\"cscrollbar__setscrollpos\"></a>  CScrollBar::SetScrollPos","source":"<a name=\"cscrollbar__setscrollpos\"></a>  CScrollBar::SetScrollPos"},{"pos":[12373,12513],"content":"Sets the current position of a scroll box to that specified by <ph id=\"ph1\">`nPos`</ph> and, if specified, redraws the scroll bar to reflect the new position.","source":"Sets the current position of a scroll box to that specified by `nPos` and, if specified, redraws the scroll bar to reflect the new position."},{"pos":[12598,12608],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the new position for the scroll box.","pos":[12622,12668]},{"content":"It must be within the scrolling range.","pos":[12669,12707]},{"content":"Specifies whether the scroll bar should be redrawn to reflect the new position.","pos":[12727,12806]},{"content":"If <ph id=\"ph1\">`bRedraw`</ph> is <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, the scroll bar is redrawn.","pos":[12807,12859],"source":" If `bRedraw` is **TRUE**, the scroll bar is redrawn."},{"content":"If it is <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>, it is not redrawn.","pos":[12860,12898],"source":" If it is **FALSE**, it is not redrawn."},{"content":"The scroll bar is redrawn by default.","pos":[12899,12936]},{"pos":[12946,12958],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Specifies the previous position of the scroll box if successful; otherwise 0.","pos":[12962,13039]},{"pos":[13049,13056],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[13060,13237],"content":"Set <ph id=\"ph1\">`bRedraw`</ph> to <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept> whenever the scroll bar will be redrawn by a subsequent call to another function to avoid having the scroll bar redrawn twice within a short interval.","source":"Set `bRedraw` to **FALSE** whenever the scroll bar will be redrawn by a subsequent call to another function to avoid having the scroll bar redrawn twice within a short interval."},{"pos":[13247,13254],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13259,13337],"content":"See the example for <bpt id=\"p1\">[</bpt>CScrollBar::SetScrollRange<ept id=\"p1\">](#cscrollbar__setscrollrange)</ept>.","source":"See the example for [CScrollBar::SetScrollRange](#cscrollbar__setscrollrange)."},{"pos":[13347,13416],"content":"<bpt id=\"p1\">&lt;a name=\"cscrollbar__setscrollrange\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CScrollBar::SetScrollRange","linkify":"<a name=\"cscrollbar__setscrollrange\"></a>  CScrollBar::SetScrollRange","source":"<a name=\"cscrollbar__setscrollrange\"></a>  CScrollBar::SetScrollRange"},{"content":"Sets minimum and maximum position values for the given scroll bar.","pos":[13420,13486]},{"pos":[13596,13606],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the minimum scrolling position.","pos":[13623,13664]},{"content":"Specifies the maximum scrolling position.","pos":[13684,13725]},{"content":"Specifies whether the scroll bar should be redrawn to reflect the change.","pos":[13745,13818]},{"content":"If <ph id=\"ph1\">`bRedraw`</ph> is <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, the scroll bar is redrawn; if <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>, it is not redrawn.","pos":[13819,13904],"source":" If `bRedraw` is **TRUE**, the scroll bar is redrawn; if **FALSE**, it is not redrawn."},{"content":"It is redrawn by default.","pos":[13905,13930]},{"pos":[13940,13947],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[13951,14013],"content":"Set <ph id=\"ph1\">`nMinPos`</ph> and <ph id=\"ph2\">`nMaxPos`</ph> to 0 to hide standard scroll bars.","source":"Set `nMinPos` and `nMaxPos` to 0 to hide standard scroll bars."},{"content":"Do not call this function to hide a scroll bar while processing a scroll-bar notification message.","pos":[14020,14118]},{"pos":[14125,14309],"content":"If a call to <ph id=\"ph1\">`SetScrollRange`</ph> immediately follows a call to the <ph id=\"ph2\">`SetScrollPos`</ph> member function, set <ph id=\"ph3\">`bRedraw`</ph> in <ph id=\"ph4\">`SetScrollPos`</ph> to 0 to prevent the scroll bar from being redrawn twice.","source":"If a call to `SetScrollRange` immediately follows a call to the `SetScrollPos` member function, set `bRedraw` in `SetScrollPos` to 0 to prevent the scroll bar from being redrawn twice."},{"content":"The difference between the values specified by <ph id=\"ph1\">`nMinPos`</ph> and <ph id=\"ph2\">`nMaxPos`</ph> must not be greater than 32,767.","pos":[14316,14419],"source":"The difference between the values specified by `nMinPos` and `nMaxPos` must not be greater than 32,767."},{"content":"The default range for a scroll-bar control is empty (both <ph id=\"ph1\">`nMinPos`</ph> and <ph id=\"ph2\">`nMaxPos`</ph> are 0).","pos":[14420,14509],"source":" The default range for a scroll-bar control is empty (both `nMinPos` and `nMaxPos` are 0)."},{"pos":[14519,14526],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[14530,14623],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CScrollBar#4<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cscrollbar-class_4.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CScrollBar#4](../../mfc/reference/codesnippet/cpp/cscrollbar-class_4.cpp)]"},{"pos":[14633,14700],"content":"<bpt id=\"p1\">&lt;a name=\"cscrollbar__showscrollbar\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CScrollBar::ShowScrollBar","linkify":"<a name=\"cscrollbar__showscrollbar\"></a>  CScrollBar::ShowScrollBar","source":"<a name=\"cscrollbar__showscrollbar\"></a>  CScrollBar::ShowScrollBar"},{"content":"Shows or hides a scroll bar.","pos":[14704,14732]},{"pos":[14796,14806],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies whether the scroll bar is shown or hidden.","pos":[14821,14873]},{"content":"If this parameter is <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, the scroll bar is shown; otherwise it is hidden.","pos":[14874,14953],"source":" If this parameter is **TRUE**, the scroll bar is shown; otherwise it is hidden."},{"pos":[14963,14970],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An application should not call this function to hide a scroll bar while processing a scroll-bar notification message.","pos":[14974,15091]},{"pos":[15101,15108],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[15113,15175],"content":"See the example for <bpt id=\"p1\">[</bpt>CScrollBar::Create<ept id=\"p1\">](#cscrollbar__create)</ept>.","source":"See the example for [CScrollBar::Create](#cscrollbar__create)."},{"pos":[15184,15192],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>CWnd Class<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[15196,15244],"source":"[CWnd Class](../../mfc/reference/cwnd-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[15247,15296],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CWnd Class<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[15299,15348],"source":" [CWnd Class](../../mfc/reference/cwnd-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CButton Class<ept id=\"p1\">](../../mfc/reference/cbutton-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[15351,15406],"source":" [CButton Class](../../mfc/reference/cbutton-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CComboBox Class<ept id=\"p1\">](../../mfc/reference/ccombobox-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[15409,15468],"source":" [CComboBox Class](../../mfc/reference/ccombobox-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CEdit Class<ept id=\"p1\">](../../mfc/reference/cedit-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[15471,15522],"source":" [CEdit Class](../../mfc/reference/cedit-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CListBox Class<ept id=\"p1\">](../../mfc/reference/clistbox-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[15525,15582],"source":" [CListBox Class](../../mfc/reference/clistbox-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CStatic Class<ept id=\"p1\">](../../mfc/reference/cstatic-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[15585,15640],"source":" [CStatic Class](../../mfc/reference/cstatic-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CDialog Class<ept id=\"p1\">](../../mfc/reference/cdialog-class.md)</ept>","pos":[15643,15697],"source":" [CDialog Class](../../mfc/reference/cdialog-class.md)"}],"content":"---\ntitle: \"CScrollBar Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CScrollBar\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CScrollBar class\"\n  - \"SCROLLBAR window class\"\n  - \"scroll bars\"\n  - \"Windows common controls [C++], CScrollBar\"\n  - \"controls [MFC], scroll bar\"\nms.assetid: f3735ca5-73ea-46dc-918b-4d824c9fe47f\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CScrollBar Class\nProvides the functionality of a Windows scroll-bar control.  \n  \n## Syntax  \n  \n```  \nclass CScrollBar : public CWnd  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CScrollBar::CScrollBar](#cscrollbar__cscrollbar)|Constructs a `CScrollBar` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CScrollBar::Create](#cscrollbar__create)|Creates the Windows scroll bar and attaches it to the `CScrollBar` object.|  \n|[CScrollBar::EnableScrollBar](#cscrollbar__enablescrollbar)|Enables or disables one or both arrows of a scroll bar.|  \n|[CScrollBar::GetScrollBarInfo](#cscrollbar__getscrollbarinfo)|Retrieves information about the scroll bar using a `SCROLLBARINFO` structure.|  \n|[CScrollBar::GetScrollInfo](#cscrollbar__getscrollinfo)|Retrieves information about the scroll bar.|  \n|[CScrollBar::GetScrollLimit](#cscrollbar__getscrolllimit)|Retrieves the limit of the scroll bar|  \n|[CScrollBar::GetScrollPos](#cscrollbar__getscrollpos)|Retrieves the current position of a scroll box.|  \n|[CScrollBar::GetScrollRange](#cscrollbar__getscrollrange)|Retrieves the current minimum and maximum scroll-bar positions for the given scroll bar.|  \n|[CScrollBar::SetScrollInfo](#cscrollbar__setscrollinfo)|Sets information about the scroll bar.|  \n|[CScrollBar::SetScrollPos](#cscrollbar__setscrollpos)|Sets the current position of a scroll box.|  \n|[CScrollBar::SetScrollRange](#cscrollbar__setscrollrange)|Sets minimum and maximum position values for the given scroll bar.|  \n|[CScrollBar::ShowScrollBar](#cscrollbar__showscrollbar)|Shows or hides a scroll bar.|  \n  \n## Remarks  \n You create a scroll-bar control in two steps. First, call the constructor `CScrollBar` to construct the `CScrollBar` object, then call the [Create](#cscrollbar__create) member function to create the Windows scroll-bar control and attach it to the `CScrollBar` object.  \n  \n If you create a `CScrollBar` object within a dialog box (through a dialog resource), the `CScrollBar` is automatically destroyed when the user closes the dialog box.  \n  \n If you create a `CScrollBar` object within a window, you may also need to destroy it.  \n  \n If you create the `CScrollBar` object on the stack, it is destroyed automatically. If you create the `CScrollBar` object on the heap by using the **new** function, you must call **delete** on the object to destroy it when the user terminates the Windows scroll bar.  \n  \n If you allocate any memory in the `CScrollBar` object, override the `CScrollBar` destructor to dispose of the allocations.  \n  \n For related information about using `CScrollBar`, see [Controls](../../mfc/controls-mfc.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n `CScrollBar`  \n  \n## Requirements  \n **Header:** afxwin.h  \n  \n##  <a name=\"cscrollbar__create\"></a>  CScrollBar::Create  \n Creates the Windows scroll bar and attaches it to the `CScrollBar` object.  \n  \n```  \nvirtual BOOL Create(\n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    UINT nID);\n```  \n  \n### Parameters  \n `dwStyle`  \n Specifies the scroll bar's style. Apply any combination of [scroll-bar styles](../../mfc/reference/scroll-bar-styles.md) to the scroll bar.  \n  \n `rect`  \n Specifies the scroll bar's size and position. Can be either a `RECT` structure or a `CRect` object.  \n  \n `pParentWnd`  \n Specifies the scroll bar's parent window, usually a `CDialog` object. It must not be **NULL**.  \n  \n `nID`  \n The scroll bar's control ID.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n You construct a `CScrollBar` object in two steps. First, call the constructor, which constructs the `CScrollBar` object; then call **Create**, which creates and initializes the associated Windows scroll bar and attaches it to the `CScrollBar` object.  \n  \n Apply the following [window styles](../../mfc/reference/window-styles.md) to a scroll bar:  \n  \n- **WS_CHILD** Always  \n  \n- **WS_VISIBLE** Usually  \n  \n- **WS_DISABLED** Rarely  \n  \n- **WS_GROUP** To group controls  \n  \n### Example  \n [!code-cpp[NVC_MFC_CScrollBar#1](../../mfc/reference/codesnippet/cpp/cscrollbar-class_1.cpp)]  \n  \n##  <a name=\"cscrollbar__cscrollbar\"></a>  CScrollBar::CScrollBar  \n Constructs a `CScrollBar` object.  \n  \n```  \nCScrollBar();\n```  \n  \n### Remarks  \n After constructing the object, call the **Create** member function to create and initialize the Windows scroll bar.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CScrollBar#2](../../mfc/reference/codesnippet/cpp/cscrollbar-class_2.h)]  \n  \n##  <a name=\"cscrollbar__enablescrollbar\"></a>  CScrollBar::EnableScrollBar  \n Enables or disables one or both arrows of a scroll bar.  \n  \n```  \nBOOL EnableScrollBar(UINT nArrowFlags = ESB_ENABLE_BOTH);\n```  \n  \n### Parameters  \n `nArrowFlags`  \n Specifies whether the scroll arrows are enabled or disabled and which arrows are enabled or disabled. This parameter can be one of the following values:  \n  \n- **ESB_ENABLE_BOTH** Enables both arrows of a scroll bar.  \n  \n- **ESB_DISABLE_LTUP** Disables the left arrow of a horizontal scroll bar or the up arrow of a vertical scroll bar.  \n  \n- **ESB_DISABLE_RTDN** Disables the right arrow of a horizontal scroll bar or the down arrow of a vertical scroll bar.  \n  \n- **ESB_DISABLE_BOTH** Disables both arrows of a scroll bar.  \n  \n### Return Value  \n Nonzero if the arrows are enabled or disabled as specified; otherwise 0, which indicates that the arrows are already in the requested state or that an error occurred.  \n  \n### Example  \n  See the example for [CScrollBar::SetScrollRange](#cscrollbar__setscrollrange).  \n  \n##  <a name=\"cscrollbar__getscrollbarinfo\"></a>  CScrollBar::GetScrollBarInfo  \n Retrieves the information that the **SCROLLBARINFO** structure maintains about a scroll bar.  \n  \n```  \nBOOL GetScrollBarInfo(PSCROLLBARINFO pScrollInfo) const;\n\n \n```  \n  \n### Parameters  \n *pScrollInfo*  \n A pointer to the [SCROLLBARINFO](http://msdn.microsoft.com/library/windows/desktop/bb787535) structure.  \n  \n### Return Value  \n Returns **TRUE** on success, **FALSE** on failure.  \n  \n### Remarks  \n This member function emulates the functionality of the [SBM_SCROLLBARINFO](http://msdn.microsoft.com/library/windows/desktop/bb787545) message, as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cscrollbar__getscrollinfo\"></a>  CScrollBar::GetScrollInfo  \n Retrieves the information that the `SCROLLINFO` structure maintains about a scroll bar.  \n  \n```  \nBOOL GetScrollInfo(\n    LPSCROLLINFO lpScrollInfo,  \n    UINT nMask = SIF_ALL);\n```  \n  \n### Parameters  \n `lpScrollInfo`  \n A pointer to a [SCROLLINFO](http://msdn.microsoft.com/library/windows/desktop/bb787537) structure. See the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for more information about this structure.  \n  \n `nMask`  \n Specifies the scroll bar parameters to retrieve. Typical usage, SIF_ALL, specifies a combination of SIF_PAGE, SIF_POS, SIF_TRACKPOS, and SIF_RANGE. See `SCROLLINFO` for more information on the nMask values.  \n  \n### Return Value  \n If the message retrieved any values, the return is **TRUE**. Otherwise, it is **FALSE**.  \n  \n### Remarks  \n `GetScrollInfo` enables applications to use 32-bit scroll positions.  \n  \n The [SCROLLINFO](http://msdn.microsoft.com/library/windows/desktop/bb787537) structure contains information about a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box (the thumb). See the `SCROLLINFO` structure topic in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for more information about changing the structure defaults.  \n  \n The MFC Windows message handlers that indicate scroll bar position, [CWnd::OnHScroll](../../mfc/reference/cwnd-class.md#cwnd__onhscroll) and [CWnd::OnVScroll](../../mfc/reference/cwnd-class.md#cwnd__onvscroll), provide only 16 bits of position data. `GetScrollInfo` and `SetScrollInfo` provide 32 bits of scroll bar position data. Thus, an application can call `GetScrollInfo` while processing either `CWnd::OnHScroll` or `CWnd::OnVScroll` to obtain 32-bit scroll bar position data.  \n  \n### Example  \n  See the example for [CWnd::OnHScroll](../../mfc/reference/cwnd-class.md#cwnd__onhscroll).  \n  \n##  <a name=\"cscrollbar__getscrolllimit\"></a>  CScrollBar::GetScrollLimit  \n Retrieves the maximum scrolling position of the scroll bar.  \n  \n```  \nint GetScrollLimit();\n```  \n  \n### Return Value  \n Specifies the maximum position of a scroll bar if successful; otherwise 0.  \n  \n### Example  \n  See the example for [CWnd::OnHScroll](../../mfc/reference/cwnd-class.md#cwnd__onhscroll).  \n  \n##  <a name=\"cscrollbar__getscrollpos\"></a>  CScrollBar::GetScrollPos  \n Retrieves the current position of a scroll box.  \n  \n```  \nint GetScrollPos() const;\n\n \n```  \n  \n### Return Value  \n Specifies the current position of the scroll box if successful; otherwise 0.  \n  \n### Remarks  \n The current position is a relative value that depends on the current scrolling range. For example, if the scrolling range is 100 to 200 and the scroll box is in the middle of the bar, the current position is 150.  \n  \n### Example  \n  See the example for [CWnd::OnHScroll](../../mfc/reference/cwnd-class.md#cwnd__onhscroll).  \n  \n##  <a name=\"cscrollbar__getscrollrange\"></a>  CScrollBar::GetScrollRange  \n Copies the current minimum and maximum scroll-bar positions for the given scroll bar to the locations specified by `lpMinPos` and `lpMaxPos`.  \n  \n```  \nvoid GetScrollRange(\n    LPINT lpMinPos,  \n    LPINT lpMaxPos) const;\n\n \n```  \n  \n### Parameters  \n `lpMinPos`  \n Points to the integer variable that is to receive the minimum position.  \n  \n `lpMaxPos`  \n Points to the integer variable that is to receive the maximum position.  \n  \n### Remarks  \n The default range for a scroll-bar control is empty (both values are 0).  \n  \n### Example  \n  See the example for [CWnd::OnHScroll](../../mfc/reference/cwnd-class.md#cwnd__onhscroll).  \n  \n##  <a name=\"cscrollbar__setscrollinfo\"></a>  CScrollBar::SetScrollInfo  \n Sets the information that the `SCROLLINFO` structure maintains about a scroll bar.  \n  \n```  \nBOOL SetScrollInfo(\n    LPSCROLLINFO lpScrollInfo,  \n    BOOL bRedraw = TRUE);\n```  \n  \n### Parameters  \n `lpScrollInfo`  \n A pointer to a [SCROLLINFO](http://msdn.microsoft.com/library/windows/desktop/bb787537) structure.  \n  \n `bRedraw`  \n Specifies whether the scroll bar should be redrawn to reflect the new information. If `bRedraw` is **TRUE**, the scroll bar is redrawn. If it is **FALSE**, it is not redrawn. The scroll bar is redrawn by default.  \n  \n### Return Value  \n If successful, the return is **TRUE**. Otherwise, it is **FALSE**.  \n  \n### Remarks  \n You must provide the values required by the `SCROLLINFO` structure parameters, including the flag values.  \n  \n The `SCROLLINFO` structure contains information about a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box (the thumb). See the [SCROLLINFO](http://msdn.microsoft.com/library/windows/desktop/bb787537) structure topic in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for more information about changing the structure defaults.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CScrollBar#3](../../mfc/reference/codesnippet/cpp/cscrollbar-class_3.cpp)]  \n  \n##  <a name=\"cscrollbar__setscrollpos\"></a>  CScrollBar::SetScrollPos  \n Sets the current position of a scroll box to that specified by `nPos` and, if specified, redraws the scroll bar to reflect the new position.  \n  \n```  \nint SetScrollPos(\n    int nPos,  \n    BOOL bRedraw = TRUE);\n```  \n  \n### Parameters  \n `nPos`  \n Specifies the new position for the scroll box. It must be within the scrolling range.  \n  \n `bRedraw`  \n Specifies whether the scroll bar should be redrawn to reflect the new position. If `bRedraw` is **TRUE**, the scroll bar is redrawn. If it is **FALSE**, it is not redrawn. The scroll bar is redrawn by default.  \n  \n### Return Value  \n Specifies the previous position of the scroll box if successful; otherwise 0.  \n  \n### Remarks  \n Set `bRedraw` to **FALSE** whenever the scroll bar will be redrawn by a subsequent call to another function to avoid having the scroll bar redrawn twice within a short interval.  \n  \n### Example  \n  See the example for [CScrollBar::SetScrollRange](#cscrollbar__setscrollrange).  \n  \n##  <a name=\"cscrollbar__setscrollrange\"></a>  CScrollBar::SetScrollRange  \n Sets minimum and maximum position values for the given scroll bar.  \n  \n```  \nvoid SetScrollRange(\n    int nMinPos,  \n    int nMaxPos,  \n    BOOL bRedraw = TRUE);\n```  \n  \n### Parameters  \n `nMinPos`  \n Specifies the minimum scrolling position.  \n  \n `nMaxPos`  \n Specifies the maximum scrolling position.  \n  \n `bRedraw`  \n Specifies whether the scroll bar should be redrawn to reflect the change. If `bRedraw` is **TRUE**, the scroll bar is redrawn; if **FALSE**, it is not redrawn. It is redrawn by default.  \n  \n### Remarks  \n Set `nMinPos` and `nMaxPos` to 0 to hide standard scroll bars.  \n  \n Do not call this function to hide a scroll bar while processing a scroll-bar notification message.  \n  \n If a call to `SetScrollRange` immediately follows a call to the `SetScrollPos` member function, set `bRedraw` in `SetScrollPos` to 0 to prevent the scroll bar from being redrawn twice.  \n  \n The difference between the values specified by `nMinPos` and `nMaxPos` must not be greater than 32,767. The default range for a scroll-bar control is empty (both `nMinPos` and `nMaxPos` are 0).  \n  \n### Example  \n [!code-cpp[NVC_MFC_CScrollBar#4](../../mfc/reference/codesnippet/cpp/cscrollbar-class_4.cpp)]  \n  \n##  <a name=\"cscrollbar__showscrollbar\"></a>  CScrollBar::ShowScrollBar  \n Shows or hides a scroll bar.  \n  \n```  \nvoid ShowScrollBar(BOOL bShow = TRUE);\n```  \n  \n### Parameters  \n `bShow`  \n Specifies whether the scroll bar is shown or hidden. If this parameter is **TRUE**, the scroll bar is shown; otherwise it is hidden.  \n  \n### Remarks  \n An application should not call this function to hide a scroll bar while processing a scroll-bar notification message.  \n  \n### Example  \n  See the example for [CScrollBar::Create](#cscrollbar__create).  \n  \n## See Also  \n [CWnd Class](../../mfc/reference/cwnd-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CWnd Class](../../mfc/reference/cwnd-class.md)   \n [CButton Class](../../mfc/reference/cbutton-class.md)   \n [CComboBox Class](../../mfc/reference/ccombobox-class.md)   \n [CEdit Class](../../mfc/reference/cedit-class.md)   \n [CListBox Class](../../mfc/reference/clistbox-class.md)   \n [CStatic Class](../../mfc/reference/cstatic-class.md)   \n [CDialog Class](../../mfc/reference/cdialog-class.md)\n"}