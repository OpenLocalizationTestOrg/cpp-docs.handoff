<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e0d5739226371fb9d109330d1d5605bb570f670a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\code-seg-declspec.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b93775840026344344886d6c36a2351beda6f923</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">895bf9357f402ceddee5a794308041a98ac8c924</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>code_seg (__declspec) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>code_seg (__declspec)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`code_seg`</ph> declaration attribute names an executable text segment in the .obj file in which the object code for the function or class member functions will be stored.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`__declspec(code_seg(...))`</ph> attribute enables the placement of code into separate named segments that can be paged or locked in memory individually.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can use this attribute to control the placement of instantiated templates and compiler-generated code.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>segment<ept id="p1">*</ept> is a named block of data in an .obj file that is loaded into memory as a unit.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>text segment<ept id="p1">*</ept> is a segment that contains executable code.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The term <bpt id="p1">*</bpt>section<ept id="p1">*</ept> is often used interchangeably with segment.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Object code that's generated when <ph id="ph1">`declarator`</ph> is defined is put in the text segment specified by <ph id="ph2">`segname`</ph>, which is a narrow-string literal.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The name <ph id="ph1">`segname`</ph> does not have to be specified in a <bpt id="p1">[</bpt>section<ept id="p1">](../preprocessor/section.md)</ept> pragma before it can be used in a declaration.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>By default, when no <ph id="ph1">`code_seg`</ph> is specified, object code is put in a segment named .text.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`code_seg`</ph> attribute overrides any existing <bpt id="p1">[</bpt>#pragma code_seg<ept id="p1">](../preprocessor/code-seg.md)</ept> directive.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`code_seg`</ph> attribute applied to a member function overrides any <ph id="ph2">`code_seg`</ph> attribute applied to the enclosing class.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If an entity has a <ph id="ph1">`code_seg`</ph> attribute, all declarations and definitions of the same entity must have identical <ph id="ph2">`code_seg`</ph> attributes.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If a base-class has a <ph id="ph1">`code_seg`</ph> attribute, derived classes must have the same attribute.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`code_seg`</ph> attribute is applied to a namespace-scope function or a member function, the object code for that function is put in the specified text segment.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When this attribute is applied to a class, all member functions of the class and nested classes—this includes compiler-generated special member functions—are put in the specified segment.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Locally defined classes—for example, classes defined in a member function body—do not inherit the <ph id="ph1">`code_seg`</ph> attribute of the enclosing scope.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`code_seg`</ph> attribute is applied to a template class or template function, all implicit specializations of the template are put in the specified segment.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Explicit or partial specializations do not inherit the <ph id="ph1">`code_seg`</ph> attribute from the primary template.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You may specify the same or a different <ph id="ph1">`code_seg`</ph> attribute on the specialization.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`code_seg`</ph> attribute can’t be applied to an explicit template instantiation.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>By default, compiler-generated code such as a special member function is put in the .text segment.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`#pragma code_seg`</ph> directive does not override this default.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`code_seg`</ph> attribute on the class, class template, or function template to control where compiler-generated code is put.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Lambdas inherit <ph id="ph1">`code_seg`</ph> attributes from their enclosing scope.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To specify a segment for a lambda, apply a <ph id="ph1">`code_seg`</ph> attribute after the parameter-declaration clause and before any mutable or exception specification, any trailing return-type specification, and the lambda body.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Lambda Expression Syntax<ept id="p1">](../cpp/lambda-expression-syntax.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This example defines a lambda in a segment named PagedMem:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Be careful when you put specific member functions—especially virtual member functions—in different segments.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If you define a virtual function in a derived class that resides in a paged segment when the base class method resides in a non-paged segment, other base class methods or user code may assume that invoking the virtual method will not trigger a page fault.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This example shows how a <ph id="ph1">`code_seg`</ph> attribute controls segment placement when implicit and explicit template specialization is used:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>__declspec</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Keywords</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>