{"nodes":[{"pos":[12,43],"content":"location Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"location Class | Microsoft Docs","pos":[0,31]}]},{"pos":[616,630],"content":"location Class","linkify":"location Class","nodes":[{"content":"location Class","pos":[0,14]}]},{"content":"An abstraction of a physical location on hardware.","pos":[631,681]},{"pos":[690,696],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[734,741],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[751,770],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[777,781]},{"content":"Description","pos":[782,793]},{"pos":[831,870],"content":"<bpt id=\"p1\">[</bpt>location::location Constructor<ept id=\"p1\">](#ctor)</ept>","source":"[location::location Constructor](#ctor)"},{"content":"Overloaded.","pos":[871,882]},{"content":"Constructs a <ph id=\"ph1\">`location`</ph> object.","pos":[883,914],"source":" Constructs a `location` object."},{"pos":[919,958],"content":"<bpt id=\"p1\">[</bpt>location::~location Destructor<ept id=\"p1\">](#dtor)</ept>","source":"[location::~location Destructor](#dtor)"},{"pos":[959,988],"content":"Destroys a <ph id=\"ph1\">`location`</ph> object.","source":"Destroys a `location` object."},{"pos":[999,1013],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1020,1024]},{"content":"Description","pos":[1025,1036]},{"pos":[1074,1110],"content":"<bpt id=\"p1\">[</bpt>location::current Method<ept id=\"p1\">](#current)</ept>","source":"[location::current Method](#current)"},{"pos":[1111,1208],"content":"Returns a <ph id=\"ph1\">`location`</ph> object representing the most specific place the calling thread is executing.","source":"Returns a `location` object representing the most specific place the calling thread is executing."},{"pos":[1213,1263],"content":"<bpt id=\"p1\">[</bpt>location::from_numa_node Method<ept id=\"p1\">](#from_numa_node)</ept>","source":"[location::from_numa_node Method](#from_numa_node)"},{"pos":[1264,1327],"content":"Returns a <ph id=\"ph1\">`location`</ph> object which represents a given NUMA node.","source":"Returns a `location` object which represents a given NUMA node."},{"pos":[1338,1354],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[1361,1365]},{"content":"Description","pos":[1366,1377]},{"pos":[1415,1461],"content":"<bpt id=\"p1\">[</bpt>location::operator!= Operator<ept id=\"p1\">](#operator_neq)</ept>","source":"[location::operator!= Operator](#operator_neq)"},{"pos":[1462,1533],"content":"Determines whether two <ph id=\"ph1\">`location`</ph> objects represent different location.","source":"Determines whether two `location` objects represent different location."},{"pos":[1538,1582],"content":"<bpt id=\"p1\">[</bpt>location::operator= Operator<ept id=\"p1\">](#operator_eq)</ept>","source":"[location::operator= Operator](#operator_eq)"},{"pos":[1583,1649],"content":"Assigns the contents of a different <ph id=\"ph1\">`location`</ph> object to this one.","source":"Assigns the contents of a different `location` object to this one."},{"pos":[1654,1702],"content":"<bpt id=\"p1\">[</bpt>location::operator== Operator<ept id=\"p1\">](#operator_eq_eq)</ept>","source":"[location::operator== Operator](#operator_eq_eq)"},{"pos":[1703,1773],"content":"Determines whether two <ph id=\"ph1\">`location`</ph> objects represent the same location.","source":"Determines whether two `location` objects represent the same location."},{"pos":[1783,1804],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[1827,1839],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[1843,1863],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> concrt.h","source":"**Header:** concrt.h"},{"pos":[1870,1896],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[1906,1957],"content":"<bpt id=\"p1\">&lt;a name=\"dtor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  location::~location Destructor","linkify":"<a name=\"dtor\"></a>  location::~location Destructor","source":"<a name=\"dtor\"></a>  location::~location Destructor"},{"pos":[1961,1990],"content":"Destroys a <ph id=\"ph1\">`location`</ph> object.","source":"Destroys a `location` object."},{"pos":[2026,2074],"content":"<bpt id=\"p1\">&lt;a name=\"current\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  location::current Method","linkify":"<a name=\"current\"></a>  location::current Method","source":"<a name=\"current\"></a>  location::current Method"},{"pos":[2078,2175],"content":"Returns a <ph id=\"ph1\">`location`</ph> object representing the most specific place the calling thread is executing.","source":"Returns a `location` object representing the most specific place the calling thread is executing."},{"pos":[2233,2245],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A location representing the most specific place the calling thread is executing.","pos":[2249,2329]},{"pos":[2339,2401],"content":"<bpt id=\"p1\">&lt;a name=\"from_numa_node\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  location::from_numa_node Method","linkify":"<a name=\"from_numa_node\"></a>  location::from_numa_node Method","source":"<a name=\"from_numa_node\"></a>  location::from_numa_node Method"},{"pos":[2405,2468],"content":"Returns a <ph id=\"ph1\">`location`</ph> object which represents a given NUMA node.","source":"Returns a `location` object which represents a given NUMA node."},{"pos":[2563,2573],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The NUMA node number to construct a location for.","pos":[2598,2647]},{"pos":[2657,2669],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[2673,2756],"content":"A location representing the NUMA node specified by the <ph id=\"ph1\">`_NumaNodeNumber`</ph> parameter.","source":"A location representing the NUMA node specified by the `_NumaNodeNumber` parameter."},{"pos":[2766,2817],"content":"<bpt id=\"p1\">&lt;a name=\"ctor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  location::location Constructor","linkify":"<a name=\"ctor\"></a>  location::location Constructor","source":"<a name=\"ctor\"></a>  location::location Constructor"},{"pos":[2821,2852],"content":"Constructs a <ph id=\"ph1\">`location`</ph> object.","source":"Constructs a `location` object."},{"pos":[3053,3063],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[3142,3149],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A default constructed location represents the system as a whole.","pos":[3153,3217]},{"pos":[3227,3285],"content":"<bpt id=\"p1\">&lt;a name=\"operator_neq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  location::operator!= Operator","linkify":"<a name=\"operator_neq\"></a>  location::operator!= Operator","source":"<a name=\"operator_neq\"></a>  location::operator!= Operator"},{"pos":[3289,3360],"content":"Determines whether two <ph id=\"ph1\">`location`</ph> objects represent different location.","source":"Determines whether two `location` objects represent different location."},{"pos":[3429,3439],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[3459,3471],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3475,3536],"content":"<ph id=\"ph1\">`true`</ph> if the two locations are different, <ph id=\"ph2\">`false`</ph> otherwise.","source":"`true` if the two locations are different, `false` otherwise."},{"pos":[3546,3602],"content":"<bpt id=\"p1\">&lt;a name=\"operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  location::operator= Operator","linkify":"<a name=\"operator_eq\"></a>  location::operator= Operator","source":"<a name=\"operator_eq\"></a>  location::operator= Operator"},{"pos":[3606,3672],"content":"Assigns the contents of a different <ph id=\"ph1\">`location`</ph> object to this one.","source":"Assigns the contents of a different `location` object to this one."},{"pos":[3739,3749],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The source <ph id=\"ph1\">`location`</ph> object.","pos":[3763,3792],"source":" The source `location` object."},{"pos":[3802,3814],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3824,3884],"content":"<bpt id=\"p1\">&lt;a name=\"operator_eq_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  location::operator== Operator","linkify":"<a name=\"operator_eq_eq\"></a>  location::operator== Operator","source":"<a name=\"operator_eq_eq\"></a>  location::operator== Operator"},{"pos":[3888,3958],"content":"Determines whether two <ph id=\"ph1\">`location`</ph> objects represent the same location.","source":"Determines whether two `location` objects represent the same location."},{"pos":[4027,4037],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[4057,4069],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4073,4138],"content":"<ph id=\"ph1\">`true`</ph> if the two locations are identical, and <ph id=\"ph2\">`false`</ph> otherwise.","source":"`true` if the two locations are identical, and `false` otherwise."},{"pos":[4147,4155],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[4159,4208],"content":"<bpt id=\"p1\">[</bpt>concurrency Namespace<ept id=\"p1\">](concurrency-namespace.md)</ept>","source":"[concurrency Namespace](concurrency-namespace.md)"}],"content":"---\ntitle: \"location Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"concrt/concurrency::location\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"location class\"\nms.assetid: c3289f51-5bf1-4dff-a18d-d0dab8e5d9c7\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# location Class\nAn abstraction of a physical location on hardware.  \n  \n## Syntax  \n  \n```\nclass location;\n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[location::location Constructor](#ctor)|Overloaded. Constructs a `location` object.|  \n|[location::~location Destructor](#dtor)|Destroys a `location` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[location::current Method](#current)|Returns a `location` object representing the most specific place the calling thread is executing.|  \n|[location::from_numa_node Method](#from_numa_node)|Returns a `location` object which represents a given NUMA node.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[location::operator!= Operator](#operator_neq)|Determines whether two `location` objects represent different location.|  \n|[location::operator= Operator](#operator_eq)|Assigns the contents of a different `location` object to this one.|  \n|[location::operator== Operator](#operator_eq_eq)|Determines whether two `location` objects represent the same location.|  \n  \n## Inheritance Hierarchy  \n `location`  \n  \n## Requirements  \n **Header:** concrt.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"dtor\"></a>  location::~location Destructor  \n Destroys a `location` object.  \n  \n```\n~location();\n```  \n  \n##  <a name=\"current\"></a>  location::current Method  \n Returns a `location` object representing the most specific place the calling thread is executing.  \n  \n```\nstatic location __cdecl current();\n```  \n  \n### Return Value  \n A location representing the most specific place the calling thread is executing.  \n  \n##  <a name=\"from_numa_node\"></a>  location::from_numa_node Method  \n Returns a `location` object which represents a given NUMA node.  \n  \n```\nstatic location __cdecl from_numa_node(unsigned short _NumaNodeNumber);\n```  \n  \n### Parameters  \n `_NumaNodeNumber`  \n The NUMA node number to construct a location for.  \n  \n### Return Value  \n A location representing the NUMA node specified by the `_NumaNodeNumber` parameter.  \n  \n##  <a name=\"ctor\"></a>  location::location Constructor  \n Constructs a `location` object.  \n  \n```\nlocation();\n\nlocation(\n    const location& _Src);\n\nlocation(\n    T _LocationType,\n    unsigned int _Id,\n    unsigned int _BindingId = 0,\n    _Inout_opt_ void* _PBinding = NULL);\n```  \n  \n### Parameters  \n `_Src`  \n `_LocationType`  \n `_Id`  \n `_BindingId`  \n `_PBinding`  \n  \n### Remarks  \n A default constructed location represents the system as a whole.  \n  \n##  <a name=\"operator_neq\"></a>  location::operator!= Operator  \n Determines whether two `location` objects represent different location.  \n  \n```\nbool operator!= (const location& _Rhs) const;\n```  \n  \n### Parameters  \n `_Rhs`  \n  \n### Return Value  \n `true` if the two locations are different, `false` otherwise.  \n  \n##  <a name=\"operator_eq\"></a>  location::operator= Operator  \n Assigns the contents of a different `location` object to this one.  \n  \n```\nlocation& operator= (const location& _Rhs);\n```  \n  \n### Parameters  \n `_Rhs`  \n The source `location` object.  \n  \n### Return Value  \n  \n##  <a name=\"operator_eq_eq\"></a>  location::operator== Operator  \n Determines whether two `location` objects represent the same location.  \n  \n```\nbool operator== (const location& _Rhs) const;\n```  \n  \n### Parameters  \n `_Rhs`  \n  \n### Return Value  \n `true` if the two locations are identical, and `false` otherwise.  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)\n"}