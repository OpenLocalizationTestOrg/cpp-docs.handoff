{"nodes":[{"pos":[12,73],"content":"integral_constant Class, bool_constant Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"integral_constant Class, bool_constant Class | Microsoft Docs","pos":[0,61]}]},{"pos":[944,988],"content":"integral_constant Class, bool_constant Class","linkify":"integral_constant Class, bool_constant Class","nodes":[{"content":"integral_constant Class, bool_constant Class","pos":[0,44]}]},{"content":"Makes an integral constant from a type and value.","pos":[989,1038]},{"pos":[1047,1053],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"content":"struct integral_constant {","pos":[1059,1085]},{"content":"static constexpr T value = v;","pos":[1091,1120]},{"content":"typedef T value_type;","pos":[1126,1147]},{"content":"typedef integral_constant<ph id=\"ph1\">\\&lt;</ph>T, v&gt;","pos":[1153,1185],"source":"   typedef integral_constant\\<T, v>"},{"content":"type;","pos":[1191,1196]},{"content":"constexpr operator value_type() const noexcept { return (value); }","pos":[1202,1271],"source":"   constexpr operator value_type() const noexcept { return (value);\n   }"},{"content":"constexpr value_type operator()() const noexcept { return (value); }","pos":[1277,1348],"source":"   constexpr value_type operator()() const noexcept { return (value);\n   }"},{"content":"};","pos":[1354,1356]},{"pos":[1367,1377],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type of the constant.","pos":[1388,1413]},{"content":"The value of the constant.","pos":[1427,1453]},{"pos":[1462,1469],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`integral_constant`</ph> template class, when specialized with an integral type <ph id=\"ph2\">`T`</ph> and a value <ph id=\"ph3\">`v`</ph> of that type, represents an object that holds a constant of that integral type with the specified value.","pos":[1473,1676],"source":"The `integral_constant` template class, when specialized with an integral type `T` and a value `v` of that type, represents an object that holds a constant of that integral type with the specified value."},{"content":"The member named <ph id=\"ph1\">`type`</ph> is an alias for the generated template specialization type, and the <ph id=\"ph2\">`value`</ph> member holds the value <ph id=\"ph3\">`v`</ph> used to create the specialization.","pos":[1677,1838],"source":" The member named `type` is an alias for the generated template specialization type, and the `value` member holds the value `v` used to create the specialization."},{"pos":[1845,1978],"content":"The <ph id=\"ph1\">`bool_constant`</ph> template class is an explicit partial specialization of <ph id=\"ph2\">`integral_constant`</ph> that uses <ph id=\"ph3\">`bool`</ph> as the <ph id=\"ph4\">`T`</ph> argument.","source":"The `bool_constant` template class is an explicit partial specialization of `integral_constant` that uses `bool` as the `T` argument."},{"pos":[1987,1994],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2561,2573],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2577,2602],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> &lt;type_traits&gt;","source":"**Header:** <type_traits>"},{"pos":[2609,2627],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[2636,2644],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>&lt;type_traits&gt;<ept id=\"p1\">](../standard-library/type-traits.md)</ept><ph id=\"ph1\"> </ph>","pos":[2648,2700],"source":"[<type_traits>](../standard-library/type-traits.md) "},{"content":"<bpt id=\"p1\"> [</bpt>false_type Typedef<ept id=\"p1\">](../standard-library/type-traits-typedefs.md#false_type_typedef)</ept><ph id=\"ph1\"> </ph>","pos":[2703,2789],"source":" [false_type Typedef](../standard-library/type-traits-typedefs.md#false_type_typedef) "},{"content":"<bpt id=\"p1\"> [</bpt>true_type Typedef<ept id=\"p1\">](../standard-library/type-traits-typedefs.md#true_type_typedef)</ept>","pos":[2792,2875],"source":" [true_type Typedef](../standard-library/type-traits-typedefs.md#true_type_typedef)"}],"content":"---\ntitle: \"integral_constant Class, bool_constant Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.tr1.integral_constant\"\n  - \"integral_constant\"\n  - \"std::tr1::integral_constant\"\n  - \"std.integral_constant\"\n  - \"std::integral_constant\"\n  - \"type_traits/std::integral_constant\"\n  - \"std.bool_constant\"\n  - \"std::bool_constant\"\n  - \"type_traits/std::bool_constant\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"integral_constant class [TR1]\"\n  - \"integral_constant\"\n  - \"bool_constant\"\nms.assetid: 11c002c6-4d31-4042-9341-f2543f43e108\ncaps.latest.revision: 23\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# integral_constant Class, bool_constant Class\nMakes an integral constant from a type and value.  \n  \n## Syntax  \n  \nstruct integral_constant {  \n   static constexpr T value = v;  \n   typedef T value_type;  \n   typedef integral_constant\\<T, v>  \n   type;  \n   constexpr operator value_type() const noexcept { return (value);\n   }  \n   constexpr value_type operator()() const noexcept { return (value);\n   }  \n   };  \n  \n#### Parameters  \n `T`  \n The type of the constant.  \n  \n `v`  \n The value of the constant.  \n  \n## Remarks  \n The `integral_constant` template class, when specialized with an integral type `T` and a value `v` of that type, represents an object that holds a constant of that integral type with the specified value. The member named `type` is an alias for the generated template specialization type, and the `value` member holds the value `v` used to create the specialization.  \n  \n The `bool_constant` template class is an explicit partial specialization of `integral_constant` that uses `bool` as the `T` argument.  \n  \n## Example  \n  \n```cpp  \n// std__type_traits__integral_constant.cpp   \n// compile with: /EHsc   \n#include <type_traits>   \n#include <iostream>   \n  \nint main()   \n    {   \n    std::cout << \"integral_constant<int, 5> == \"   \n        << std::integral_constant<int, 5>::value << std::endl;   \n    std::cout << \"integral_constant<bool, false> == \" << std::boolalpha   \n        << std::integral_constant<bool, false>::value << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \nintegral_constant<int, 5> == 5  \nintegral_constant<bool, false> == false  \n```  \n  \n## Requirements  \n **Header:** <type_traits>  \n  \n **Namespace:** std  \n  \n## See Also  \n [<type_traits>](../standard-library/type-traits.md)   \n [false_type Typedef](../standard-library/type-traits-typedefs.md#false_type_typedef)   \n [true_type Typedef](../standard-library/type-traits-typedefs.md#true_type_typedef)\n\n"}