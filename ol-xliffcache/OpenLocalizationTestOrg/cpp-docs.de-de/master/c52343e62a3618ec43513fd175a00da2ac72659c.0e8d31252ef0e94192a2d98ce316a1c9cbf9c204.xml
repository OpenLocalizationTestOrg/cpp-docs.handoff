{"nodes":[{"pos":[12,55],"content":"-Og (Global Optimizations) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"-Og (Global Optimizations) | Microsoft Docs","pos":[0,43]}]},{"content":"/Og (Global Optimizations)","pos":[915,941]},{"content":"Deprecated.","pos":[942,953]},{"content":"Provides local and global optimizations, automatic-register allocation, and loop optimization.","pos":[954,1048]},{"content":"Syntax","pos":[1057,1063]},{"content":"Remarks","pos":[1093,1100]},{"content":"<bpt id=\"p1\">**</bpt>/Og<ept id=\"p1\">**</ept> is deprecated.","pos":[1104,1126],"source":"**/Og** is deprecated."},{"content":"These optimizations are now generally enabled by default.","pos":[1127,1184]},{"content":"For more information on optimizations, see <bpt id=\"p1\">[</bpt>/O1, /O2 (Minimize Size, Maximize Speed)<ept id=\"p1\">](../../build/reference/o1-o2-minimize-size-maximize-speed.md)</ept> or <bpt id=\"p2\">[</bpt>/Ox (Full Optimization)<ept id=\"p2\">](../../build/reference/ox-full-optimization.md)</ept>.","pos":[1185,1408],"source":" For more information on optimizations, see [/O1, /O2 (Minimize Size, Maximize Speed)](../../build/reference/o1-o2-minimize-size-maximize-speed.md) or [/Ox (Full Optimization)](../../build/reference/ox-full-optimization.md)."},{"pos":[1415,1471],"content":"The following optimizations are available under <bpt id=\"p1\">**</bpt>/Og<ept id=\"p1\">**</ept>:","source":"The following optimizations are available under **/Og**:"},{"content":"Local and global common subexpression elimination","pos":[1481,1530]},{"content":"In this optimization, the value of a common subexpression is calculated once.","pos":[1541,1618]},{"content":"In the following example, if the values of <ph id=\"ph1\">`b`</ph> and <ph id=\"ph2\">`c`</ph> do not change between the three expressions, the compiler can assign the calculation of <ph id=\"ph3\">`b + c`</ph> to a temporary variable, and substitute the variable for <ph id=\"ph4\">`b + c`</ph>:","pos":[1619,1835],"source":" In the following example, if the values of `b` and `c` do not change between the three expressions, the compiler can assign the calculation of `b + c` to a temporary variable, and substitute the variable for `b + c`:"},{"content":"For local common subexpression optimization, the compiler examines short sections of code for common subexpressions.","pos":[1920,2036]},{"content":"For global common subexpression optimization, the compiler searches entire functions for common subexpressions.","pos":[2037,2148]},{"content":"Automatic register allocation","pos":[2158,2187]},{"pos":[2198,2338],"content":"This optimization allows the compiler to store frequently used variables and subexpressions in registers; the <ph id=\"ph1\">`register`</ph> keyword is ignored.","source":"This optimization allows the compiler to store frequently used variables and subexpressions in registers; the `register` keyword is ignored."},{"content":"Loop optimization","pos":[2348,2365]},{"content":"This optimization removes invariant subexpressions from the body of a loop.","pos":[2376,2451]},{"content":"An optimal loop contains only expressions whose values change through each execution of the loop.","pos":[2452,2549]},{"content":"In the following example, the expression <ph id=\"ph1\">`x + y`</ph> does not change in the loop body:","pos":[2550,2632],"source":" In the following example, the expression `x + y` does not change in the loop body:"},{"pos":[2735,2826],"content":"After optimization, <ph id=\"ph1\">`x + y`</ph> is calculated once rather than every time the loop is executed:","source":"After optimization, `x + y` is calculated once rather than every time the loop is executed:"},{"pos":[2942,3161],"content":"Loop optimization is much more effective when the compiler can assume no aliasing, which you set with <bpt id=\"p1\">[</bpt>__restrict<ept id=\"p1\">](../../cpp/extension-restrict.md)</ept>, <bpt id=\"p2\">[</bpt>noalias<ept id=\"p2\">](../../cpp/noalias.md)</ept>, or <bpt id=\"p3\">[</bpt>restrict<ept id=\"p3\">](../../cpp/restrict.md)</ept>.","source":"Loop optimization is much more effective when the compiler can assume no aliasing, which you set with [__restrict](../../cpp/extension-restrict.md), [noalias](../../cpp/noalias.md), or [restrict](../../cpp/restrict.md)."},{"pos":[3173,3314],"content":"[!NOTE]\n You can enable or disable global optimization on a function-by-function basis using the `optimize` pragma with the `g` option.","leadings":["","    > "],"nodes":[{"content":"You can enable or disable global optimization on a function-by-function basis using the <ph id=\"ph1\">`optimize`</ph> pragma with the <ph id=\"ph2\">`g`</ph> option.","pos":[9,135],"source":" You can enable or disable global optimization on a function-by-function basis using the `optimize` pragma with the `g` option."}]},{"content":"<bpt id=\"p1\">**</bpt>/Og<ept id=\"p1\">**</ept> also enables the Named Return Value optimization, which eliminates the copy constructor and destructor of a stack based return value.","pos":[3321,3462],"source":"**/Og** also enables the Named Return Value optimization, which eliminates the copy constructor and destructor of a stack based return value."},{"content":"See <bpt id=\"p1\">[</bpt>/O1, /O2 (Minimize Size, Maximize Speed)<ept id=\"p1\">](../../build/reference/o1-o2-minimize-size-maximize-speed.md)</ept> for more information.","pos":[3463,3592],"source":" See [/O1, /O2 (Minimize Size, Maximize Speed)](../../build/reference/o1-o2-minimize-size-maximize-speed.md) for more information."},{"pos":[3599,3800],"content":"For related information, see <bpt id=\"p1\">[</bpt>Generate Intrinsic Functions (/Oi)<ept id=\"p1\">](../../build/reference/oi-generate-intrinsic-functions.md)</ept> and <bpt id=\"p2\">[</bpt>Full Optimization (/Ox)<ept id=\"p2\">](../../build/reference/ox-full-optimization.md)</ept>.","source":"For related information, see [Generate Intrinsic Functions (/Oi)](../../build/reference/oi-generate-intrinsic-functions.md) and [Full Optimization (/Ox)](../../build/reference/ox-full-optimization.md)."},{"content":"To set this compiler option in the Visual Studio development environment","pos":[3810,3882]},{"content":"Open the project's <bpt id=\"p1\">**</bpt>Property Pages<ept id=\"p1\">**</ept> dialog box.","pos":[3892,3941],"source":"Open the project's **Property Pages** dialog box."},{"content":"For details, see <bpt id=\"p1\">[</bpt>Working with Project Properties<ept id=\"p1\">](../../ide/working-with-project-properties.md)</ept>.","pos":[3942,4039],"source":" For details, see [Working with Project Properties](../../ide/working-with-project-properties.md)."},{"pos":[4049,4076],"content":"Click the <bpt id=\"p1\">**</bpt>C/C++<ept id=\"p1\">**</ept> folder.","source":"Click the **C/C++** folder."},{"pos":[4086,4127],"content":"Click the <bpt id=\"p1\">**</bpt>Command Line<ept id=\"p1\">**</ept> property page.","source":"Click the **Command Line** property page."},{"pos":[4137,4196],"content":"Type the compiler option in the <bpt id=\"p1\">**</bpt>Additional Options<ept id=\"p1\">**</ept> box.","source":"Type the compiler option in the **Additional Options** box."},{"content":"To set this compiler option programmatically","pos":[4206,4250]},{"content":"See &lt;xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.AdditionalOptions%2A&gt;.","pos":[4260,4348],"source":"See <xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.AdditionalOptions%2A>."},{"content":"See Also","pos":[4357,4365]},{"content":"/O Options (Optimize Code)","pos":[4370,4396]},{"content":"Compiler Options","pos":[4453,4469]},{"content":"Setting Compiler Options","pos":[4519,4543]}],"content":"---\ntitle: \"-Og (Global Optimizations) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"VC.Project.VCCLCompilerTool.GlobalOptimizations\"\n  - \"/og\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"-Og compiler option [C++]\"\n  - \"global optimizations compiler option [C++]\"\n  - \"automatic register allocation\"\n  - \"/Og compiler option [C++]\"\n  - \"loop structures, optimizing\"\n  - \"common subexpression elimination\"\n  - \"Og compiler option [C++]\"\nms.assetid: d10630cc-b9cf-4e97-bde3-8d7ee79e9435\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# /Og (Global Optimizations)\nDeprecated. Provides local and global optimizations, automatic-register allocation, and loop optimization.  \n  \n## Syntax  \n  \n```  \n/Og  \n```  \n  \n## Remarks  \n **/Og** is deprecated. These optimizations are now generally enabled by default. For more information on optimizations, see [/O1, /O2 (Minimize Size, Maximize Speed)](../../build/reference/o1-o2-minimize-size-maximize-speed.md) or [/Ox (Full Optimization)](../../build/reference/ox-full-optimization.md).  \n  \n The following optimizations are available under **/Og**:  \n  \n-   Local and global common subexpression elimination  \n  \n     In this optimization, the value of a common subexpression is calculated once. In the following example, if the values of `b` and `c` do not change between the three expressions, the compiler can assign the calculation of `b + c` to a temporary variable, and substitute the variable for `b + c`:  \n  \n    ```  \n    a = b + c;  \n    d = b + c;  \n    e = b + c;  \n    ```  \n  \n     For local common subexpression optimization, the compiler examines short sections of code for common subexpressions. For global common subexpression optimization, the compiler searches entire functions for common subexpressions.  \n  \n-   Automatic register allocation  \n  \n     This optimization allows the compiler to store frequently used variables and subexpressions in registers; the `register` keyword is ignored.  \n  \n-   Loop optimization  \n  \n     This optimization removes invariant subexpressions from the body of a loop. An optimal loop contains only expressions whose values change through each execution of the loop. In the following example, the expression `x + y` does not change in the loop body:  \n  \n    ```  \n    i = -100;  \n    while( i < 0 ) {  \n        i += x + y;  \n    }  \n    ```  \n  \n     After optimization, `x + y` is calculated once rather than every time the loop is executed:  \n  \n    ```  \n    i = -100;  \n    t = x + y;  \n    while( i < 0 ) {  \n        i += t;  \n    }  \n    ```  \n  \n     Loop optimization is much more effective when the compiler can assume no aliasing, which you set with [__restrict](../../cpp/extension-restrict.md), [noalias](../../cpp/noalias.md), or [restrict](../../cpp/restrict.md).  \n  \n    > [!NOTE]\n    >  You can enable or disable global optimization on a function-by-function basis using the `optimize` pragma with the `g` option.  \n  \n **/Og** also enables the Named Return Value optimization, which eliminates the copy constructor and destructor of a stack based return value. See [/O1, /O2 (Minimize Size, Maximize Speed)](../../build/reference/o1-o2-minimize-size-maximize-speed.md) for more information.  \n  \n For related information, see [Generate Intrinsic Functions (/Oi)](../../build/reference/oi-generate-intrinsic-functions.md) and [Full Optimization (/Ox)](../../build/reference/ox-full-optimization.md).  \n  \n### To set this compiler option in the Visual Studio development environment  \n  \n1.  Open the project's **Property Pages** dialog box. For details, see [Working with Project Properties](../../ide/working-with-project-properties.md).  \n  \n2.  Click the **C/C++** folder.  \n  \n3.  Click the **Command Line** property page.  \n  \n4.  Type the compiler option in the **Additional Options** box.  \n  \n### To set this compiler option programmatically  \n  \n-   See <xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.AdditionalOptions%2A>.  \n  \n## See Also  \n [/O Options (Optimize Code)](../../build/reference/o-options-optimize-code.md)   \n [Compiler Options](../../build/reference/compiler-options.md)   \n [Setting Compiler Options](../../build/reference/setting-compiler-options.md)"}