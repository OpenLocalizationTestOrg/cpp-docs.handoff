{"nodes":[{"pos":[12,64],"content":"Output File Stream Member Functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Output File Stream Member Functions | Microsoft Docs","pos":[0,52]}]},{"pos":[605,640],"content":"Output File Stream Member Functions","linkify":"Output File Stream Member Functions","nodes":[{"content":"Output File Stream Member Functions","pos":[0,35]}]},{"content":"Output stream member functions have three types: those that are equivalent to manipulators, those that perform unformatted write operations, and those that otherwise modify the stream state and have no equivalent manipulator or insertion operator.","pos":[641,888]},{"content":"For sequential, formatted output, you might use only insertion operators and manipulators.","pos":[889,979]},{"content":"For random-access binary disk output, you use other member functions, with or without insertion operators.","pos":[980,1086]},{"pos":[1095,1131],"content":"The open Function for Output Streams","linkify":"The open Function for Output Streams","nodes":[{"content":"The open Function for Output Streams","pos":[0,36]}]},{"content":"To use an output file stream (<bpt id=\"p1\">[</bpt>ofstream<ept id=\"p1\">](../standard-library/basic-ofstream-class.md)</ept>), you must associate that stream with a specific disk file in the constructor or the <bpt id=\"p2\">**</bpt>open<ept id=\"p2\">**</ept> function.","pos":[1135,1324],"source":"To use an output file stream ([ofstream](../standard-library/basic-ofstream-class.md)), you must associate that stream with a specific disk file in the constructor or the **open** function."},{"content":"If you use the <bpt id=\"p1\">**</bpt>open<ept id=\"p1\">**</ept> function, you can reuse the same stream object with a series of files.","pos":[1325,1419],"source":" If you use the **open** function, you can reuse the same stream object with a series of files."},{"content":"In either case, the arguments describing the file are the same.","pos":[1420,1483]},{"content":"When you open the file associated with an output stream, you generally specify an <bpt id=\"p1\">**</bpt>open_mode<ept id=\"p1\">**</ept> flag.","pos":[1490,1591],"source":"When you open the file associated with an output stream, you generally specify an **open_mode** flag."},{"content":"You can combine these flags, which are defined as enumerators in the <ph id=\"ph1\">`ios`</ph> class, with the bitwise OR ( &amp;#124; ) operator.","pos":[1592,1714],"source":" You can combine these flags, which are defined as enumerators in the `ios` class, with the bitwise OR ( &#124; ) operator."},{"content":"See <bpt id=\"p1\">[</bpt>ios_base::openmode<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__openmode)</ept> for a list of the enumerators.","pos":[1715,1828],"source":" See [ios_base::openmode](../standard-library/ios-base-class.md#ios_base__openmode) for a list of the enumerators."},{"content":"Three common output stream situations involve mode options:","pos":[1835,1894]},{"content":"Creating a file.","pos":[1904,1920]},{"content":"If the file already exists, the old version is deleted.","pos":[1921,1976]},{"content":"Appending records to an existing file or creating one if it does not exist.","pos":[2126,2201]},{"content":"Opening two files, one at a time, on the same stream.","pos":[2269,2322]},{"pos":[2612,2628],"content":"The put Function","linkify":"The put Function","nodes":[{"content":"The put Function","pos":[0,16]}]},{"content":"The <bpt id=\"p1\">**</bpt>put<ept id=\"p1\">**</ept> function writes one character to the output stream.","pos":[2632,2695],"source":"The **put** function writes one character to the output stream."},{"content":"The following two statements are the same by default, but the second is affected by the stream's format arguments:","pos":[2696,2810]},{"pos":[2945,2963],"content":"The write Function","linkify":"The write Function","nodes":[{"content":"The write Function","pos":[0,18]}]},{"content":"The <bpt id=\"p1\">**</bpt>write<ept id=\"p1\">**</ept> function writes a block of memory to an output file stream.","pos":[2967,3040],"source":"The **write** function writes a block of memory to an output file stream."},{"content":"The length argument specifies the number of bytes written.","pos":[3041,3099]},{"content":"This example creates an output file stream and writes the binary value of the <ph id=\"ph1\">`Date`</ph> structure to it:","pos":[3100,3201],"source":" This example creates an output file stream and writes the binary value of the `Date` structure to it:"},{"content":"The <bpt id=\"p1\">**</bpt>write<ept id=\"p1\">**</ept> function does not stop when it reaches a null character, so the complete class structure is written.","pos":[3512,3626],"source":"The **write** function does not stop when it reaches a null character, so the complete class structure is written."},{"content":"The function takes two arguments: a <ph id=\"ph1\">`char`</ph> pointer and a count of characters to write.","pos":[3627,3713],"source":" The function takes two arguments: a `char` pointer and a count of characters to write."},{"content":"Note the required cast to <bpt id=\"p1\">**</bpt>char<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> before the address of the structure object.","pos":[3714,3794],"source":" Note the required cast to **char\\*** before the address of the structure object."},{"pos":[3803,3832],"content":"The seekp and tellp Functions","linkify":"The seekp and tellp Functions","nodes":[{"content":"The seekp and tellp Functions","pos":[0,29]}]},{"content":"An output file stream keeps an internal pointer that points to the position where data is to be written next.","pos":[3836,3945]},{"content":"The <ph id=\"ph1\">`seekp`</ph> member function sets this pointer and thus provides random-access disk file output.","pos":[3946,4041],"source":" The `seekp` member function sets this pointer and thus provides random-access disk file output."},{"content":"The <ph id=\"ph1\">`tellp`</ph> member function returns the file position.","pos":[4042,4096],"source":" The `tellp` member function returns the file position."},{"content":"For examples that use the input stream equivalents to <ph id=\"ph1\">`seekp`</ph> and <ph id=\"ph2\">`tellp`</ph>, see <bpt id=\"p1\">[</bpt>The seekg and tellg Functions<ept id=\"p1\">](../standard-library/input-stream-member-functions.md)</ept>.","pos":[4097,4262],"source":" For examples that use the input stream equivalents to `seekp` and `tellp`, see [The seekg and tellg Functions](../standard-library/input-stream-member-functions.md)."},{"pos":[4271,4308],"content":"The close Function for Output Streams","linkify":"The close Function for Output Streams","nodes":[{"content":"The close Function for Output Streams","pos":[0,37]}]},{"content":"The <bpt id=\"p1\">**</bpt>close<ept id=\"p1\">**</ept> member function closes the disk file associated with an output file stream.","pos":[4312,4401],"source":"The **close** member function closes the disk file associated with an output file stream."},{"content":"The file must be closed to complete all disk output.","pos":[4402,4454]},{"content":"If necessary, the <ph id=\"ph1\">`ofstream`</ph> destructor closes the file for you, but you can use the <bpt id=\"p1\">**</bpt>close<ept id=\"p1\">**</ept> function if you need to open another file for the same stream object.","pos":[4455,4619],"source":" If necessary, the `ofstream` destructor closes the file for you, but you can use the **close** function if you need to open another file for the same stream object."},{"content":"The output stream destructor automatically closes a stream's file only if the constructor or the <bpt id=\"p1\">**</bpt>open<ept id=\"p1\">**</ept> member function opened the file.","pos":[4626,4764],"source":"The output stream destructor automatically closes a stream's file only if the constructor or the **open** member function opened the file."},{"content":"If you pass the constructor a file descriptor for an already-open file or use the <bpt id=\"p1\">**</bpt>attach<ept id=\"p1\">**</ept> member function, you must close the file explicitly.","pos":[4765,4910],"source":" If you pass the constructor a file descriptor for an already-open file or use the **attach** member function, you must close the file explicitly."},{"pos":[4920,4999],"content":"<bpt id=\"p1\">&lt;a name=\"vclrferrorprocessingfunctionsanchor10\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> Error Processing Functions","linkify":"<a name=\"vclrferrorprocessingfunctionsanchor10\"></a> Error Processing Functions","source":"<a name=\"vclrferrorprocessingfunctionsanchor10\"></a> Error Processing Functions"},{"content":"Use these member functions to test for errors while writing to a stream:","pos":[5003,5075]},{"content":"Function","pos":[5082,5090]},{"content":"Return value","pos":[5091,5103]},{"pos":[5146,5223],"content":"<bpt id=\"p1\">[</bpt>bad<ept id=\"p1\">](http://msdn.microsoft.com/Library/4038d331-e9c9-48b0-bf49-c6505744469c)</ept>","source":"[bad](http://msdn.microsoft.com/Library/4038d331-e9c9-48b0-bf49-c6505744469c)"},{"pos":[5224,5276],"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if there is an unrecoverable error.","source":"Returns **true** if there is an unrecoverable error."},{"pos":[5281,5359],"content":"<bpt id=\"p1\">[</bpt>fail<ept id=\"p1\">](http://msdn.microsoft.com/Library/619f1b36-1e72-4551-8b48-888ae4e370d2)</ept>","source":"[fail](http://msdn.microsoft.com/Library/619f1b36-1e72-4551-8b48-888ae4e370d2)"},{"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if there is an unrecoverable error or an \"expected\" condition, such as a conversion error, or if the file is not found.","pos":[5360,5496],"source":"Returns **true** if there is an unrecoverable error or an \"expected\" condition, such as a conversion error, or if the file is not found."},{"content":"Processing can often resume after a call to <bpt id=\"p1\">**</bpt>clear<ept id=\"p1\">**</ept> with a zero argument.","pos":[5497,5572],"source":" Processing can often resume after a call to **clear** with a zero argument."},{"pos":[5577,5655],"content":"<bpt id=\"p1\">[</bpt>good<ept id=\"p1\">](http://msdn.microsoft.com/Library/77f0aa17-2ae1-48ae-8040-592d301e3972)</ept>","source":"[good](http://msdn.microsoft.com/Library/77f0aa17-2ae1-48ae-8040-592d301e3972)"},{"pos":[5656,5769],"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if there is no error condition (unrecoverable or otherwise) and the end-of-file flag is not set.","source":"Returns **true** if there is no error condition (unrecoverable or otherwise) and the end-of-file flag is not set."},{"pos":[5774,5851],"content":"<bpt id=\"p1\">[</bpt>eof<ept id=\"p1\">](http://msdn.microsoft.com/Library/3087f631-1268-49cd-86cf-ff4108862329)</ept>","source":"[eof](http://msdn.microsoft.com/Library/3087f631-1268-49cd-86cf-ff4108862329)"},{"pos":[5852,5898],"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> on the end-of-file condition.","source":"Returns **true** on the end-of-file condition."},{"pos":[5903,5982],"content":"<bpt id=\"p1\">[</bpt>clear<ept id=\"p1\">](http://msdn.microsoft.com/Library/dc172694-1267-45f8-8f5c-e822e16fc271)</ept>","source":"[clear](http://msdn.microsoft.com/Library/dc172694-1267-45f8-8f5c-e822e16fc271)"},{"content":"Sets the internal error state.","pos":[5983,6013]},{"content":"If called with the default arguments, it clears all error bits.","pos":[6014,6077]},{"pos":[6082,6163],"content":"<bpt id=\"p1\">[</bpt>rdstate<ept id=\"p1\">](http://msdn.microsoft.com/Library/e235e4e2-7e95-4777-a160-3938d263dd9c)</ept>","source":"[rdstate](http://msdn.microsoft.com/Library/e235e4e2-7e95-4777-a160-3938d263dd9c)"},{"content":"Returns the current error state.","pos":[6164,6196]},{"content":"The <bpt id=\"p1\">**</bpt>!<ept id=\"p1\">**</ept>","pos":[6204,6213],"source":"The **!**"},{"content":"operator is overloaded to perform the same function as the <bpt id=\"p1\">**</bpt>fail<ept id=\"p1\">**</ept> function.","pos":[6214,6291],"source":" operator is overloaded to perform the same function as the **fail** function."},{"content":"Thus the expression:","pos":[6292,6312]},{"content":"is equivalent to:","pos":[6349,6366]},{"content":"The <bpt id=\"p1\">**</bpt>void<ph id=\"ph1\">\\*</ph>()<ept id=\"p1\">**</ept> operator is overloaded to be the opposite of the <bpt id=\"p2\">**</bpt>!<ept id=\"p2\">**</ept>","pos":[6409,6480],"source":"The **void\\*()** operator is overloaded to be the opposite of the **!**"},{"content":"operator; thus the expression:","pos":[6481,6511]},{"content":"is equal to:","pos":[6547,6559]},{"pos":[6603,6704],"content":"The <bpt id=\"p1\">**</bpt>void<ph id=\"ph1\">\\*</ph>()<ept id=\"p1\">**</ept> operator is not equivalent to <bpt id=\"p2\">**</bpt>good<ept id=\"p2\">**</ept> because it does not test for the end of file.","source":"The **void\\*()** operator is not equivalent to **good** because it does not test for the end of file."},{"pos":[6713,6721],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[6725,6780],"content":"<bpt id=\"p1\">[</bpt>Output Streams<ept id=\"p1\">](../standard-library/output-streams.md)</ept>","source":"[Output Streams](../standard-library/output-streams.md)"}],"content":"---\ntitle: \"Output File Stream Member Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"output streams, member functions\"\nms.assetid: 38aaf710-8035-4a34-a0c4-123a5327f28a\ncaps.latest.revision: 8\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Output File Stream Member Functions\nOutput stream member functions have three types: those that are equivalent to manipulators, those that perform unformatted write operations, and those that otherwise modify the stream state and have no equivalent manipulator or insertion operator. For sequential, formatted output, you might use only insertion operators and manipulators. For random-access binary disk output, you use other member functions, with or without insertion operators.  \n  \n## The open Function for Output Streams  \n To use an output file stream ([ofstream](../standard-library/basic-ofstream-class.md)), you must associate that stream with a specific disk file in the constructor or the **open** function. If you use the **open** function, you can reuse the same stream object with a series of files. In either case, the arguments describing the file are the same.  \n  \n When you open the file associated with an output stream, you generally specify an **open_mode** flag. You can combine these flags, which are defined as enumerators in the `ios` class, with the bitwise OR ( &#124; ) operator. See [ios_base::openmode](../standard-library/ios-base-class.md#ios_base__openmode) for a list of the enumerators.  \n  \n Three common output stream situations involve mode options:  \n  \n-   Creating a file. If the file already exists, the old version is deleted.  \n  \n ```  \n    ostream ofile(\"FILENAME\");\n// Default is ios::out  \n    ofstream ofile(\"FILENAME\", ios::out);\n\n// Equivalent to above  \n```  \n  \n-   Appending records to an existing file or creating one if it does not exist.  \n  \n ```  \n    ofstream ofile(\"FILENAME\", ios::app);\n```  \n  \n-   Opening two files, one at a time, on the same stream.  \n  \n ```  \n    ofstream ofile();\nofile.open(\"FILE1\",\n    ios::in);\n// Do some output  \n    ofile.close();\n\n// FILE1 closed  \n    ofile.open(\"FILE2\",\n    ios::in);\n// Do some more output  \n    ofile.close();\n\n// FILE2 closed  // When ofile goes out of scope it is destroyed.  \n```  \n  \n## The put Function  \n The **put** function writes one character to the output stream. The following two statements are the same by default, but the second is affected by the stream's format arguments:  \n  \n```  \ncout.put('A');\n\n// Exactly one character written  \ncout <<'A'; // Format arguments 'width' and 'fill' apply   \n```  \n  \n## The write Function  \n The **write** function writes a block of memory to an output file stream. The length argument specifies the number of bytes written. This example creates an output file stream and writes the binary value of the `Date` structure to it:  \n  \n```  \n// write_function.cpp  \n// compile with: /EHsc  \n#include <fstream>  \nusing namespace std;  \n  \nstruct Date  \n{  \n   int mo, da, yr;  \n};  \n  \nint main( )  \n{  \n   Date dt = { 6, 10, 92 };  \n   ofstream tfile( \"date.dat\" , ios::binary );  \n   tfile.write( (char *) &dt, sizeof dt );  \n}  \n```  \n  \n The **write** function does not stop when it reaches a null character, so the complete class structure is written. The function takes two arguments: a `char` pointer and a count of characters to write. Note the required cast to **char\\*** before the address of the structure object.  \n  \n## The seekp and tellp Functions  \n An output file stream keeps an internal pointer that points to the position where data is to be written next. The `seekp` member function sets this pointer and thus provides random-access disk file output. The `tellp` member function returns the file position. For examples that use the input stream equivalents to `seekp` and `tellp`, see [The seekg and tellg Functions](../standard-library/input-stream-member-functions.md).  \n  \n## The close Function for Output Streams  \n The **close** member function closes the disk file associated with an output file stream. The file must be closed to complete all disk output. If necessary, the `ofstream` destructor closes the file for you, but you can use the **close** function if you need to open another file for the same stream object.  \n  \n The output stream destructor automatically closes a stream's file only if the constructor or the **open** member function opened the file. If you pass the constructor a file descriptor for an already-open file or use the **attach** member function, you must close the file explicitly.  \n  \n##  <a name=\"vclrferrorprocessingfunctionsanchor10\"></a> Error Processing Functions  \n Use these member functions to test for errors while writing to a stream:  \n  \n|Function|Return value|  \n|--------------|------------------|  \n|[bad](http://msdn.microsoft.com/Library/4038d331-e9c9-48b0-bf49-c6505744469c)|Returns **true** if there is an unrecoverable error.|  \n|[fail](http://msdn.microsoft.com/Library/619f1b36-1e72-4551-8b48-888ae4e370d2)|Returns **true** if there is an unrecoverable error or an \"expected\" condition, such as a conversion error, or if the file is not found. Processing can often resume after a call to **clear** with a zero argument.|  \n|[good](http://msdn.microsoft.com/Library/77f0aa17-2ae1-48ae-8040-592d301e3972)|Returns **true** if there is no error condition (unrecoverable or otherwise) and the end-of-file flag is not set.|  \n|[eof](http://msdn.microsoft.com/Library/3087f631-1268-49cd-86cf-ff4108862329)|Returns **true** on the end-of-file condition.|  \n|[clear](http://msdn.microsoft.com/Library/dc172694-1267-45f8-8f5c-e822e16fc271)|Sets the internal error state. If called with the default arguments, it clears all error bits.|  \n|[rdstate](http://msdn.microsoft.com/Library/e235e4e2-7e95-4777-a160-3938d263dd9c)|Returns the current error state.|  \n  \n The **!** operator is overloaded to perform the same function as the **fail** function. Thus the expression:  \n  \n```  \nif(!cout)...  \n```  \n  \n is equivalent to:  \n  \n```  \nif(cout.fail())...  \n```  \n  \n The **void\\*()** operator is overloaded to be the opposite of the **!** operator; thus the expression:  \n  \n```  \nif(cout)...  \n```  \n  \n is equal to:  \n  \n```  \nif(!cout.fail())...  \n```  \n  \n The **void\\*()** operator is not equivalent to **good** because it does not test for the end of file.  \n  \n## See Also  \n [Output Streams](../standard-library/output-streams.md)\n\n"}