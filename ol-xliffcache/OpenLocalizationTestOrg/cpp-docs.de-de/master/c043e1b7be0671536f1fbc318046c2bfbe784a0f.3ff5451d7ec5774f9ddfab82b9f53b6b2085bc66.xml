{"nodes":[{"pos":[12,48],"content":"CFixedStringT Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CFixedStringT Class | Microsoft Docs","pos":[0,36]}]},{"content":"CFixedStringT Class","pos":[649,668]},{"content":"This class represents a string object with a fixed character buffer.","pos":[669,737]},{"content":"Syntax","pos":[746,752]},{"content":"Parameters","pos":[890,900]},{"content":"Used as the base class for the fixed string object and can be any <ph id=\"ph1\">`CStringT`</ph>-based type.","pos":[920,1008],"source":" Used as the base class for the fixed string object and can be any `CStringT`-based type."},{"content":"Some examples include <ph id=\"ph1\">`CString`</ph>, <ph id=\"ph2\">`CStringA`</ph>, and <ph id=\"ph3\">`CStringW`</ph>.","pos":[1009,1069],"source":" Some examples include `CString`, `CStringA`, and `CStringW`."},{"content":"t_nChars","pos":[1077,1085]},{"content":"The number of characters stored in the buffer.","pos":[1090,1136]},{"content":"Members","pos":[1145,1152]},{"content":"Public Constructors","pos":[1162,1181]},{"content":"Name","pos":[1188,1192]},{"content":"Description","pos":[1193,1204]},{"content":"CFixedStringT::CFixedStringT","pos":[1243,1271]},{"content":"The constructor for the string object.","pos":[1304,1342]},{"content":"Public Operators","pos":[1353,1369]},{"content":"Name","pos":[1376,1380]},{"content":"Description","pos":[1381,1392]},{"content":"CFixedStringT::operator =","pos":[1431,1456]},{"pos":[1488,1536],"content":"Assigns a new value to a <ph id=\"ph1\">`CFixedStringT`</ph> object.","source":"Assigns a new value to a `CFixedStringT` object."},{"content":"Remarks","pos":[1546,1553]},{"content":"This class is an example of a custom string class based on <ph id=\"ph1\">`CStringT`</ph>.","pos":[1557,1627],"source":"This class is an example of a custom string class based on `CStringT`."},{"content":"Although quite similar, the two classes differ in implementation.","pos":[1628,1693]},{"content":"The major differences between <ph id=\"ph1\">`CFixedStringT`</ph> and <ph id=\"ph2\">`CStringT`</ph> are:","pos":[1694,1759],"source":" The major differences between `CFixedStringT` and `CStringT` are:"},{"content":"The initial character buffer is allocated as part of the object and has size <bpt id=\"p1\">*</bpt>t_nChars<ept id=\"p1\">*</ept>.","pos":[1769,1857],"source":"The initial character buffer is allocated as part of the object and has size *t_nChars*."},{"content":"This allows the <bpt id=\"p1\">**</bpt>CFixedString<ept id=\"p1\">**</ept> object to occupy a contiguous memory chunk for performance purposes.","pos":[1858,1959],"source":" This allows the **CFixedString** object to occupy a contiguous memory chunk for performance purposes."},{"content":"However, if the contents of a <ph id=\"ph1\">`CFixedStringT`</ph> object grows beyond <bpt id=\"p1\">*</bpt>t_nChars<ept id=\"p1\">*</ept>, the buffer is allocated dynamically.","pos":[1960,2074],"source":" However, if the contents of a `CFixedStringT` object grows beyond *t_nChars*, the buffer is allocated dynamically."},{"content":"The character buffer for a <ph id=\"ph1\">`CFixedStringT`</ph> object is always the same length ( <bpt id=\"p1\">*</bpt>t_nChars<ept id=\"p1\">*</ept>).","pos":[2084,2174],"source":"The character buffer for a `CFixedStringT` object is always the same length ( *t_nChars*)."},{"content":"There is no limitation on buffer size for <ph id=\"ph1\">`CStringT`</ph> objects.","pos":[2175,2236],"source":" There is no limitation on buffer size for `CStringT` objects."},{"content":"The memory manager for <ph id=\"ph1\">`CFixedStringT`</ph> is customized such that sharing of a <bpt id=\"p1\">[</bpt>CStringData<ept id=\"p1\">](../../atl-mfc-shared/reference/cstringdata-class.md)</ept> object between two or more <ph id=\"ph2\">`CFixedStringT`</ph> objectsis not allowed.","pos":[2246,2454],"source":"The memory manager for `CFixedStringT` is customized such that sharing of a [CStringData](../../atl-mfc-shared/reference/cstringdata-class.md) object between two or more `CFixedStringT` objectsis not allowed."},{"content":"objects do not have this limitation.","pos":[2466,2502]},{"pos":[2509,2717],"content":"For more information on the customization of <ph id=\"ph1\">`CFixedStringT`</ph> and memory management for string objects in general, see <bpt id=\"p1\">[</bpt>Memory Management and CStringT<ept id=\"p1\">](../../atl-mfc-shared/memory-management-with-cstringt.md)</ept>.","source":"For more information on the customization of `CFixedStringT` and memory management for string objects in general, see [Memory Management and CStringT](../../atl-mfc-shared/memory-management-with-cstringt.md)."},{"content":"Inheritance Hierarchy","pos":[2726,2747]},{"content":"Requirements","pos":[2840,2852]},{"pos":[2856,2878],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> cstringt.h","source":"**Header:** cstringt.h"},{"pos":[2933,2961],"content":"CFixedStringT::CFixedStringT"},{"pos":[2965,3001],"content":"Constructs a <ph id=\"ph1\">`CFixedStringT`</ph> object.","source":"Constructs a `CFixedStringT` object."},{"content":"Parameters","pos":[3364,3374]},{"content":"A null-terminated string to be copied into this <ph id=\"ph1\">`CFixedStringT`</ph> object.","pos":[3387,3458],"source":" A null-terminated string to be copied into this `CFixedStringT` object."},{"content":"An existing <ph id=\"ph1\">`CFixedStringT`</ph> object to be copied into this <ph id=\"ph2\">`CFixedStringT`</ph> object.","pos":[3474,3555],"source":" An existing `CFixedStringT` object to be copied into this `CFixedStringT` object."},{"content":"A pointer to the memory manager of the <ph id=\"ph1\">`CFixedStringT`</ph> object.","pos":[3578,3640],"source":" A pointer to the memory manager of the `CFixedStringT` object."},{"content":"For more information on <ph id=\"ph1\">`IAtlStringMgr`</ph> and memory management for <ph id=\"ph2\">`CFixedStringT`</ph>, see <bpt id=\"p1\">[</bpt>Memory Management and CStringT<ept id=\"p1\">](../../atl-mfc-shared/memory-management-with-cstringt.md)</ept>.","pos":[3641,3818],"source":" For more information on `IAtlStringMgr` and memory management for `CFixedStringT`, see [Memory Management and CStringT](../../atl-mfc-shared/memory-management-with-cstringt.md)."},{"content":"Remarks","pos":[3828,3835]},{"content":"Because the constructors copy the input data into new allocated storage, you should be aware that memory exceptions may result.","pos":[3839,3966]},{"content":"Note that some of these constructors act as conversion functions.","pos":[3967,4032]},{"pos":[4086,4111],"content":"CFixedStringT::operator ="},{"pos":[4115,4178],"content":"Reinitializes an existing <ph id=\"ph1\">`CFixedStringT`</ph> object with new data.","source":"Reinitializes an existing `CFixedStringT` object with new data."},{"content":"Parameters","pos":[4583,4593]},{"content":"A null-terminated string to be copied into this <ph id=\"ph1\">`CFixedStringT`</ph> object.","pos":[4606,4677],"source":" A null-terminated string to be copied into this `CFixedStringT` object."},{"content":"An existing <ph id=\"ph1\">`CFixedStringT`</ph> to be copied into this <ph id=\"ph2\">`CFixedStringT`</ph> object.","pos":[4693,4767],"source":" An existing `CFixedStringT` to be copied into this `CFixedStringT` object."},{"content":"Remarks","pos":[4777,4784]},{"pos":[4788,4966],"content":"You should be aware that memory exceptions may occur whenever you use the assignment operator because new storage is often allocated to hold the resulting <ph id=\"ph1\">`CFixedStringT`</ph> object.","source":"You should be aware that memory exceptions may occur whenever you use the assignment operator because new storage is often allocated to hold the resulting `CFixedStringT` object."},{"content":"See Also","pos":[4975,4983]},{"content":"CStringT Class","pos":[4988,5002]},{"content":"Hierarchy Chart","pos":[5059,5074]},{"content":"ATL/MFC Shared Classes","pos":[5111,5133]}],"content":"---\ntitle: \"CFixedStringT Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CFixedStringT\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CFixedStringT class\"\n  - \"shared classes, CFixedStringT\"\nms.assetid: 6d4171ba-3104-493a-a6cc-d515f4ba9a4b\ncaps.latest.revision: 17\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CFixedStringT Class\nThis class represents a string object with a fixed character buffer.  \n  \n## Syntax  \n  \n```\ntemplate<class\nStringType,\n    int\nt_nChars>\nclass CFixedStringT : private CFixedStringMgr,\n    public StringType\n```  \n  \n#### Parameters  \n `StringType`  \n Used as the base class for the fixed string object and can be any `CStringT`-based type. Some examples include `CString`, `CStringA`, and `CStringW`.  \n  \n *t_nChars*  \n The number of characters stored in the buffer.  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CFixedStringT::CFixedStringT](#cfixedstringt__cfixedstringt)|The constructor for the string object.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CFixedStringT::operator =](#cfixedstringt__operator__eq)|Assigns a new value to a `CFixedStringT` object.|  \n  \n## Remarks  \n This class is an example of a custom string class based on `CStringT`. Although quite similar, the two classes differ in implementation. The major differences between `CFixedStringT` and `CStringT` are:  \n  \n-   The initial character buffer is allocated as part of the object and has size *t_nChars*. This allows the **CFixedString** object to occupy a contiguous memory chunk for performance purposes. However, if the contents of a `CFixedStringT` object grows beyond *t_nChars*, the buffer is allocated dynamically.  \n  \n-   The character buffer for a `CFixedStringT` object is always the same length ( *t_nChars*). There is no limitation on buffer size for `CStringT` objects.  \n  \n-   The memory manager for `CFixedStringT` is customized such that sharing of a [CStringData](../../atl-mfc-shared/reference/cstringdata-class.md) object between two or more `CFixedStringT` objectsis not allowed. `CStringT` objects do not have this limitation.  \n  \n For more information on the customization of `CFixedStringT` and memory management for string objects in general, see [Memory Management and CStringT](../../atl-mfc-shared/memory-management-with-cstringt.md).  \n  \n## Inheritance Hierarchy  \n `IAtlStringMgr`  \n  \n `StringType`  \n  \n `CFixedStringMgr`  \n  \n `CFixedStringT`  \n  \n## Requirements  \n **Header:** cstringt.h  \n  \n##  <a name=\"cfixedstringt__cfixedstringt\"></a>  CFixedStringT::CFixedStringT  \n Constructs a `CFixedStringT` object.  \n  \n```\nCFixedStringT() throw();\n\nexplicit CFixedStringT(IAtlStringMgr* pStringMgr) throw();\n\nCFixedStringT(const CFixedStringT<StringType,\nt_nChars>& str);\n\nCFixedStringT(const StringType& str);\n\nCFixedStringT(const StringType::XCHAR* psz);\n\nexplicit CFixedStringT(const StringType::YCHAR* psz);\n\nexplicit CFixedStringT(const unsigned char* psz);\n```  \n  \n### Parameters  \n `psz`  \n A null-terminated string to be copied into this `CFixedStringT` object.  \n  \n `str`  \n An existing `CFixedStringT` object to be copied into this `CFixedStringT` object.  \n  \n `pStringMgr`  \n A pointer to the memory manager of the `CFixedStringT` object. For more information on `IAtlStringMgr` and memory management for `CFixedStringT`, see [Memory Management and CStringT](../../atl-mfc-shared/memory-management-with-cstringt.md).  \n  \n### Remarks  \n Because the constructors copy the input data into new allocated storage, you should be aware that memory exceptions may result. Note that some of these constructors act as conversion functions.  \n  \n##  <a name=\"cfixedstringt__operator__eq\"></a>  CFixedStringT::operator =  \n Reinitializes an existing `CFixedStringT` object with new data.  \n  \n```\nCFixedStringT<StringType,\nt_nChars>& operator=(const CFixedStringT<StringType,\nt_nChars>& str);\n\nCFixedStringT<StringType,\nt_nChars>& operator=(const char* psz);\n\nCFixedStringT<StringType,\nt_nChars>& operator=(const wchar_t* psz);\n\nCFixedStringT<StringType,\nt_nChars>& operator=(const unsigned char* psz);\n\nCFixedStringT<StringType,\n    t_nChars>& operator=(const StringType& str);\n```  \n  \n### Parameters  \n `str`  \n A null-terminated string to be copied into this `CFixedStringT` object.  \n  \n `psz`  \n An existing `CFixedStringT` to be copied into this `CFixedStringT` object.  \n  \n### Remarks  \n You should be aware that memory exceptions may occur whenever you use the assignment operator because new storage is often allocated to hold the resulting `CFixedStringT` object.  \n  \n## See Also  \n [CStringT Class](../../atl-mfc-shared/reference/cstringt-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [ATL/MFC Shared Classes](../../atl-mfc-shared/atl-mfc-shared-classes.md)\n\n\n\n\n"}