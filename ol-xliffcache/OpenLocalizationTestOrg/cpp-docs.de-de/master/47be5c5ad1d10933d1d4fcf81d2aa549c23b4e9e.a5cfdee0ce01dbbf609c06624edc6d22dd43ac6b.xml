{"nodes":[{"pos":[12,49],"content":"Compiler Error C2059 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Error C2059 | Microsoft Docs","pos":[0,37]}]},{"pos":[624,644],"content":"Compiler Error C2059","linkify":"Compiler Error C2059","nodes":[{"content":"Compiler Error C2059","pos":[0,20]}]},{"content":"syntax error : 'token'","pos":[645,667]},{"content":"The token caused a syntax error.","pos":[674,706]},{"pos":[713,793],"content":"The following example generates an error message for the line that declares <ph id=\"ph1\">`j`</ph>.","source":"The following example generates an error message for the line that declares `j`."},{"content":"To determine the cause of the error, examine not only the line that's listed in the error message, but also the lines above it.","pos":[943,1070]},{"content":"If examining the lines yields no clue about the problem, try commenting out the line that's listed in the error message and perhaps several lines above it.","pos":[1071,1226]},{"pos":[1233,1378],"content":"If the error message occurs on a symbol that immediately follows a <ph id=\"ph1\">`typedef`</ph> variable, make sure that the variable is defined in the source code.","source":"If the error message occurs on a symbol that immediately follows a `typedef` variable, make sure that the variable is defined in the source code."},{"pos":[1385,1494],"content":"You may get C2059 if a symbol evaluates to nothing, as can occur when <bpt id=\"p1\">**</bpt>/D<ept id=\"p1\">**</ept><ph id=\"ph1\">`symbol`</ph><bpt id=\"p2\">**</bpt><ph id=\"ph2\">=</ph><ept id=\"p2\">**</ept> is used to compile.","source":"You may get C2059 if a symbol evaluates to nothing, as can occur when **/D**`symbol`**=** is used to compile."},{"content":"Another case in which C2059 can occur is when you compile an application that specifies a structure in the default arguments for a function.","pos":[1738,1878]},{"content":"The default value for an argument must be an expression.","pos":[1879,1935]},{"content":"An initializer list—for example, one that used to initialize a structure—is not an expression.","pos":[1936,2030]},{"content":"To resolve this problem, define a constructor to perform the required initialization.","pos":[2032,2117]},{"content":"The following example generates C2059:","pos":[2124,2162]},{"content":"You can also get C2059 if you define a member template class or function outside the class.","pos":[2477,2568]},{"content":"For information, see <bpt id=\"p1\">[</bpt>Knowledge Base article 241949<ept id=\"p1\">](http://support.microsoft.com/kb/241949)</ept>.","pos":[2569,2662],"source":" For information, see [Knowledge Base article 241949](http://support.microsoft.com/kb/241949)."},{"content":"C2059 can occur for an ill-formed cast.","pos":[2669,2708]},{"content":"The following sample generates C2059:","pos":[2715,2752]},{"content":"C2059 can also occur if you attempt to create a namespace name that contains a period.","pos":[3051,3137]},{"content":"The following sample generates C2059:","pos":[3144,3181]},{"pos":[3323,3471],"content":"C2059 can occur when an operator that can qualify a name (<ph id=\"ph1\">`::`</ph>, <ph id=\"ph2\">`-&gt;`</ph>, and <ph id=\"ph3\">`.`</ph>) must be followed by the keyword <ph id=\"ph4\">`template`</ph>, as shown in this example:","source":"C2059 can occur when an operator that can qualify a name (`::`, `->`, and `.`) must be followed by the keyword `template`, as shown in this example:"},{"content":"By default, C++ assumes that <ph id=\"ph1\">`AY::Rebind`</ph> isn't a template; therefore, the following <ph id=\"ph2\">`&lt;`</ph> is interpreted as a less-than sign.","pos":[3765,3889],"source":"By default, C++ assumes that `AY::Rebind` isn't a template; therefore, the following `<` is interpreted as a less-than sign."},{"content":"You must tell the compiler explicitly that <ph id=\"ph1\">`Rebind`</ph> is a template so that it can correctly parse the angle bracket.","pos":[3891,4006],"source":"  You must tell the compiler explicitly that `Rebind` is a template so that it can correctly parse the angle bracket."},{"content":"To correct this error, use the <ph id=\"ph1\">`template`</ph> keyword on the dependent type's name, as shown here:","pos":[4007,4101],"source":" To correct this error, use the `template` keyword on the dependent type's name, as shown here:"}],"content":"---\ntitle: \"Compiler Error C2059 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"C2059\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C2059\"\nms.assetid: 2be4eb39-3f37-4b32-8e8d-75835e07c78a\ncaps.latest.revision: 22\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Compiler Error C2059\nsyntax error : 'token'  \n  \n The token caused a syntax error.  \n  \n The following example generates an error message for the line that declares `j`.  \n  \n```  \n// C2059e.cpp  \n// compile with: /c  \n// C2143 expected  \n// Error caused by the incorrect use of '*'.  \n   int j*; // C2059   \n```  \n  \n To determine the cause of the error, examine not only the line that's listed in the error message, but also the lines above it. If examining the lines yields no clue about the problem, try commenting out the line that's listed in the error message and perhaps several lines above it.  \n  \n If the error message occurs on a symbol that immediately follows a `typedef` variable, make sure that the variable is defined in the source code.  \n  \n You may get C2059 if a symbol evaluates to nothing, as can occur when **/D**`symbol`**=** is used to compile.  \n  \n```  \n// C2059a.cpp  \n// compile with: /DTEST=  \n#include <stdio.h>  \n  \nint main() {  \n   #ifdef TEST  \n      printf_s(\"\\nTEST defined %d\", TEST);   // C2059  \n   #else  \n      printf_s(\"\\nTEST not defined\");  \n   #endif  \n}  \n```  \n  \n Another case in which C2059 can occur is when you compile an application that specifies a structure in the default arguments for a function. The default value for an argument must be an expression. An initializer list—for example, one that used to initialize a structure—is not an expression.  To resolve this problem, define a constructor to perform the required initialization.  \n  \n The following example generates C2059:  \n  \n```  \n// C2059b.cpp  \n// compile with: /c  \nstruct ag_type {  \n   int a;  \n   float b;  \n   // Uncomment the following line to resolve.  \n   // ag_type(int aa, float bb) : a(aa), b(bb) {}   \n};  \n  \nvoid func(ag_type arg = {5, 7.0});   // C2059  \nvoid func(ag_type arg = ag_type(5, 7.0));   // OK  \n```  \n  \n You can also get C2059 if you define a member template class or function outside the class. For information, see [Knowledge Base article 241949](http://support.microsoft.com/kb/241949).  \n  \n C2059 can occur for an ill-formed cast.  \n  \n The following sample generates C2059:  \n  \n```  \n// C2059c.cpp  \n// compile with: /clr  \nusing namespace System;  \nref class From {};  \nref class To : public From {};  \n  \nint main() {  \n   From^ refbase = gcnew To();  \n   To^ refTo = safe_cast<To^>(From^);   // C2059  \n   To^ refTo2 = safe_cast<To^>(refbase);   // OK  \n}  \n```  \n  \n C2059 can also occur if you attempt to create a namespace name that contains a period.  \n  \n The following sample generates C2059:  \n  \n```  \n// C2059d.cpp  \n// compile with: /c  \nnamespace A.B {}   // C2059  \n  \n// OK  \nnamespace A  {  \n   namespace B {}  \n}  \n```  \n  \n C2059 can occur when an operator that can qualify a name (`::`, `->`, and `.`) must be followed by the keyword `template`, as shown in this example:  \n  \n```cpp  \ntemplate <typename T> struct Allocator {  \n    template <typename U> struct Rebind {  \n        typedef Allocator<U> Other;  \n    };  \n};  \n  \ntemplate <typename X, typename AY> struct Container {  \n    typedef typename AY::Rebind<X>::Other AX; // error C2059  \n};  \n  \n```  \n  \n By default, C++ assumes that `AY::Rebind` isn't a template; therefore, the following `<` is interpreted as a less-than sign.  You must tell the compiler explicitly that `Rebind` is a template so that it can correctly parse the angle bracket. To correct this error, use the `template` keyword on the dependent type's name, as shown here:  \n  \n```cpp  \ntemplate <typename T> struct Allocator {  \n    template <typename U> struct Rebind {  \n        typedef Allocator<U> Other;  \n    };  \n};  \n  \ntemplate <typename X, typename AY> struct Container {  \n    typedef typename AY::template Rebind<X>::Other AX; // correct  \n};  \n  \n```"}