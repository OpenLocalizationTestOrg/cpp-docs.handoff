<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">08d2a2161a2596cebb27175c55023d5313c7b908</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\exception-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">471e04177a2311d0f26ec44dbe2aea8704f29343</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3f64b6639e6d87e1226969fd7b1271976fead96c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>exception<ph id="ph1">&amp;gt;</ph> functions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>exception<ph id="ph1">&amp;gt;</ph> functions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>current_exception</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>get_terminate</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>get_unexpected</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>make_exception_ptr</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>rethrow_exception</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>set_terminate</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>set_unexpected</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>terminate</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>uncaught_exception</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>unexpected</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>current_exception</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Obtains a smart pointer to the current exception.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">[</bpt>exception_ptr<ept id="p1">](../standard-library/exception-typedefs.md#exception_ptr)</ept> object pointing to the current exception.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">`current_exception`</ph> function in a catch block.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If an exception is in flight and the catch block can catch the exception, the <ph id="ph1">`current_exception`</ph> function returns an <ph id="ph2">`exception_ptr`</ph> object that references the exception.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Otherwise, the function returns a null <ph id="ph1">`exception_ptr`</ph> object.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`current_exception`</ph> function captures the exception that is in flight regardless of whether the <ph id="ph2">`catch`</ph> statement specifies an <bpt id="p1">[</bpt>exception-declaration<ept id="p1">](../cpp/try-throw-and-catch-statements-cpp.md)</ept> statement.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The destructor for the current exception is called at the end of the <ph id="ph1">`catch`</ph> block if you do not rethrow the exception.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>However, even if you call the <ph id="ph1">`current_exception`</ph> function in the destructor, the function returns an <ph id="ph2">`exception_ptr`</ph> object that references the current exception.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Successive calls to the <ph id="ph1">`current_exception`</ph> function return <ph id="ph2">`exception_ptr`</ph> objects that refer to different copies of the current exception.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Consequently, the objects compare as unequal because they refer to different copies, even though the copies have the same binary value.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>make_exception_ptr</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Creates an <bpt id="p1">[</bpt>exception_ptr<ept id="p1">](../standard-library/exception-typedefs.md#exception_ptr)</ept> object that holds a copy of an exception.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The class with the exception to copy.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Usually, you specify an <bpt id="p1">[</bpt>exception class<ept id="p1">](../standard-library/exception-class.md)</ept> object as the argument to the <ph id="ph1">`make_exception_ptr`</ph> function, although any class object can be the argument.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">[</bpt>exception_ptr<ept id="p1">](../standard-library/exception-typedefs.md#exception_ptr)</ept> object pointing to a copy of the current exception for <ph id="ph1">`Except`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Calling the <ph id="ph1">`make_exception_ptr`</ph> function is equivalent to throwing a C++ exception, catching it in a catch block, and then calling the <bpt id="p1">[</bpt>current_exception<ept id="p1">](../standard-library/exception-functions.md#current_exception)</ept> function to return an <ph id="ph2">`exception_ptr`</ph> object that references the exception.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The Microsoft implementation of the <ph id="ph1">`make_exception_ptr`</ph> function is more efficient than throwing and then catching an exception.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>An application typically does not require the <ph id="ph1">`make_exception_ptr`</ph> function, and we discourage its use.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>rethrow_exception</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Throws an exception passed as a parameter.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The caught exception to re-throw.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`P`</ph> is a null <bpt id="p1">[</bpt>exception_ptr<ept id="p1">](../standard-library/exception-typedefs.md#exception_ptr)</ept>, the function throws <bpt id="p2">[</bpt>std::bad_exception<ept id="p2">](../standard-library/bad-exception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>After you store a caught exception in an <ph id="ph1">`exception_ptr`</ph> object, the primary thread can process the object.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In your primary thread, call the <ph id="ph1">`rethrow_exception`</ph> function together with the <ph id="ph2">`exception_ptr`</ph> object as its argument.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`rethrow_exception`</ph> function extracts the exception from the <ph id="ph2">`exception_ptr`</ph> object and then throws the exception in the context of the primary thread.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>get_terminate</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Obtains the current <ph id="ph1">`terminate_handler`</ph> function.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>set_terminate</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Establishes a new <ph id="ph1">`terminate_handler`</ph> to be called at the termination of the program.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The function to be called at termination.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The address of the previous function that used to be called at termination.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The function establishes a new <bpt id="p1">[</bpt>terminate_handler<ept id="p1">](../standard-library/exception-typedefs.md#terminate_handler)</ept> as the function * <ph id="ph1">`fnew`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Thus, <ph id="ph1">`fnew`</ph> must not be a null pointer.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The function returns the address of the previous terminate handler.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>get_unexpected</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Obtains the current <ph id="ph1">`unexpected_handler`</ph> function.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>set_unexpected</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Establishes a new <ph id="ph1">`unexpected_handler`</ph> to be when an unexpected exception is encountered.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The function to be called when an unexpected exception is encountered.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The address of the previous <ph id="ph1">`unexpected_handler`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>must not be a null pointer.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The C++ Standard requires that <ph id="ph1">`unexpected`</ph> is called when a function throws an exception that is not on its throw list.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The current implementation does not support this.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The following example calls <ph id="ph1">`unexpected`</ph> directly, which then calls the <ph id="ph2">`unexpected_handler`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>terminate</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Calls a terminate handler.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The function calls a terminate handler, a function of type <ph id="ph1">`void`</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>terminate<ept id="p1">**</ept> is called directly by the program, the terminate handler is the one most recently set by a call to <bpt id="p2">[</bpt>set_terminate<ept id="p2">](../standard-library/exception-functions.md#set_terminate)</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>terminate<ept id="p1">**</ept> is called for any of several other reasons during evaluation of a throw expression, the terminate handler is the one in effect immediately after evaluating the throw expression.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>A terminate handler may not return to its caller.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>At program startup, the terminate handler is a function that calls <bpt id="p1">**</bpt>abort<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>set_unexpected<ept id="p1">](../standard-library/exception-functions.md#set_unexpected)</ept> for an example of the use of <bpt id="p2">**</bpt>terminate<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>uncaught_exception</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`true`</ph> only if a thrown exception is being currently processed.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`true`</ph> after completing evaluation of a throw expression and before completing initialization of the exception declaration in the matching handler or calling <bpt id="p1">[</bpt>unexpected<ept id="p1">](../standard-library/exception-functions.md#unexpected)</ept> as a result of the throw expression.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>In particular, <ph id="ph1">`uncaught_exception`</ph> will return <ph id="ph2">`true`</ph> when called from a destructor that is being invoked during an exception unwind.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>On devices, <ph id="ph1">`uncaught_exception`</ph> is only supported on Windows CE 5.00 and higher versions, including Windows Mobile 2005 platforms.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>unexpected</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Calls the unexpected handler.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The C++ Standard requires that <ph id="ph1">`unexpected`</ph> is called when a function throws an exception that is not on its throw list.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The current implementation does not support this.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The example calls <ph id="ph1">`unexpected`</ph> directly, which calls the unexpected handler.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The function calls an unexpected handler, a function of type <ph id="ph1">`void`</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`unexpected`</ph> is called directly by the program, the unexpected handler is the one most recently set by a call to <bpt id="p1">[</bpt>set_unexpected<ept id="p1">](../standard-library/exception-functions.md#set_unexpected)</ept>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>An unexpected handler may not return to its caller.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>It may terminate execution by:</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Throwing an object of a type listed in the exception specification or an object of any type if the unexpected handler is called directly by the program.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Throwing an object of type <bpt id="p1">[</bpt>bad_exception<ept id="p1">](../standard-library/bad-exception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Calling <bpt id="p1">[</bpt>terminate<ept id="p1">](../standard-library/exception-functions.md#terminate)</ept>, <bpt id="p2">**</bpt>abort<ept id="p2">**</ept> or <bpt id="p3">**</bpt>exit<ept id="p3">**</ept>( <ph id="ph1">`int`</ph>).</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>At program startup, the unexpected handler is a function that calls <bpt id="p1">[</bpt>terminate<ept id="p1">](../standard-library/exception-functions.md#terminate)</ept>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>set_unexpected<ept id="p1">](../standard-library/exception-functions.md#set_unexpected)</ept> for an example of the use of <bpt id="p2">**</bpt>unexpected.<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>exception&gt;</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>