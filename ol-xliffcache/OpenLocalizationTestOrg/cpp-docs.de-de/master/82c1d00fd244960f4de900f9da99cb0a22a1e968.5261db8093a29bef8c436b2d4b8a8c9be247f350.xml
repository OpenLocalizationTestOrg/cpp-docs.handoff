{"nodes":[{"pos":[12,151],"content":"_stat, _stat32, _stat64, _stati64, _stat32i64, _stat64i32, _wstat, _wstat32, _wstat64, _wstati64, _wstat32i64, _wstat64i32 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_stat, _stat32, _stat64, _stati64, _stat32i64, _stat64i32, _wstat, _wstat32, _wstat64, _wstati64, _wstat32i64, _wstat64i32 | Microsoft Docs","pos":[0,139]}]},{"pos":[2660,2782],"content":"_stat, _stat32, _stat64, _stati64, _stat32i64, _stat64i32, _wstat, _wstat32, _wstat64, _wstati64, _wstat32i64, _wstat64i32","linkify":"_stat, _stat32, _stat64, _stati64, _stat32i64, _stat64i32, _wstat, _wstat32, _wstat64, _wstati64, _wstat32i64, _wstat64i32","nodes":[{"content":"_stat, _stat32, _stat64, _stati64, _stat32i64, _stat64i32, _wstat, _wstat32, _wstat64, _wstati64, _wstat32i64, _wstat64i32","pos":[0,122]}]},{"content":"Get status information on a file.","pos":[2783,2816]},{"pos":[2825,2831],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[3769,3779],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to a string containing the path of existing file or directory.","pos":[3793,3863]},{"content":"Pointer to structure that stores results.","pos":[3882,3923]},{"pos":[3932,3944],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Each of these functions returns 0 if the file-status information is obtained.","pos":[3948,4025]},{"content":"A return value of –1 indicates an error, in which case <ph id=\"ph1\">`errno`</ph> is set to <ph id=\"ph2\">`ENOENT`</ph>, indicating that the filename or path could not be found.","pos":[4026,4165],"source":" A return value of –1 indicates an error, in which case `errno` is set to `ENOENT`, indicating that the filename or path could not be found."},{"content":"A return value of <ph id=\"ph1\">`EINVAL`</ph> indicates an invalid parameter; <ph id=\"ph2\">`errno`</ph> is also set to <ph id=\"ph3\">`EINVAL`</ph> in this case.","pos":[4166,4270],"source":" A return value of `EINVAL` indicates an invalid parameter; `errno` is also set to `EINVAL` in this case."},{"pos":[4277,4451],"content":"See <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept> for more information on this, and other, return codes.","source":"See [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md) for more information on this, and other, return codes."},{"pos":[4458,4755],"content":"The date stamp on a file can be represented if it is later than midnight, January 1, 1970, and before 23:59:59, December 31, 3000, UTC, unless you use <ph id=\"ph1\">`_stat32`</ph> or <ph id=\"ph2\">`_wstat32`</ph>, or have defined <ph id=\"ph3\">`_USE_32BIT_TIME_T`</ph>, in which case the date can be represented only until 23:59:59 January 18, 2038, UTC.","source":"The date stamp on a file can be represented if it is later than midnight, January 1, 1970, and before 23:59:59, December 31, 3000, UTC, unless you use `_stat32` or `_wstat32`, or have defined `_USE_32BIT_TIME_T`, in which case the date can be represented only until 23:59:59 January 18, 2038, UTC."},{"pos":[4764,4771],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_stat`</ph> function obtains information about the file or directory specified by <ph id=\"ph2\">`path`</ph> and stores it in the structure pointed to by <ph id=\"ph3\">`buffer`</ph>.","pos":[4775,4918],"source":"The `_stat` function obtains information about the file or directory specified by `path` and stores it in the structure pointed to by `buffer`."},{"content":"<ph id=\"ph1\">`_stat`</ph> automatically handles multibyte-character string arguments as appropriate, recognizing multibyte-character sequences according to the multibyte code page currently in use.","pos":[4919,5098],"source":"`_stat` automatically handles multibyte-character string arguments as appropriate, recognizing multibyte-character sequences according to the multibyte code page currently in use."},{"content":"<ph id=\"ph1\">`_wstat`</ph> is a wide-character version of <ph id=\"ph2\">`_stat`</ph>; the <ph id=\"ph3\">`path`</ph> argument to <ph id=\"ph4\">`_wstat`</ph> is a wide-character string.","pos":[5105,5213],"source":"`_wstat` is a wide-character version of `_stat`; the `path` argument to `_wstat` is a wide-character string."},{"content":"<ph id=\"ph1\">`_wstat`</ph> and <ph id=\"ph2\">`_stat`</ph> behave identically except that <ph id=\"ph3\">`_wstat`</ph> does not handle multibyte-character strings.","pos":[5214,5319],"source":"`_wstat` and `_stat` behave identically except that `_wstat` does not handle multibyte-character strings."},{"content":"Variations of these functions support 32- or 64-bit time types, and 32- or 64-bit file lengths.","pos":[5326,5421]},{"content":"The first numerical suffix (<ph id=\"ph1\">`32`</ph> or <ph id=\"ph2\">`64`</ph>) indicates the size of the time type used; the second suffix is either <ph id=\"ph3\">`i32`</ph> or <ph id=\"ph4\">`i64`</ph>, indicating whether the file size is represented as a 32-bit or 64-bit integer.","pos":[5422,5628],"source":" The first numerical suffix (`32` or `64`) indicates the size of the time type used; the second suffix is either `i32` or `i64`, indicating whether the file size is represented as a 32-bit or 64-bit integer."},{"content":"<ph id=\"ph1\">`_stat`</ph> is equivalent to <ph id=\"ph2\">`_stat64i32`</ph>, and <ph id=\"ph3\">`struct``_stat`</ph> contains a 64-bit time.","pos":[5635,5717],"source":"`_stat` is equivalent to `_stat64i32`, and `struct``_stat` contains a 64-bit time."},{"content":"This is true unless <ph id=\"ph1\">`_USE_32BIT_TIME_T`</ph> is defined, in which case the old behavior is in effect; <ph id=\"ph2\">`_stat`</ph> uses a 32-bit time, and <ph id=\"ph3\">`struct``_stat`</ph> contains a 32-bit time.","pos":[5718,5886],"source":" This is true unless `_USE_32BIT_TIME_T` is defined, in which case the old behavior is in effect; `_stat` uses a 32-bit time, and `struct``_stat` contains a 32-bit time."},{"content":"The same is true for <ph id=\"ph1\">`_stati64`</ph>.","pos":[5887,5919],"source":" The same is true for `_stati64`."},{"pos":[5927,6174],"content":"[!NOTE]\n `_wstat` does not work with [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] symbolic links. In these cases, `_wstat` will always report a file size of 0. `_stat` does work correctly with symbolic links.","leadings":["","> "],"nodes":[{"content":" `_wstat` does not work with [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] symbolic links. In these cases, `_wstat` will always report a file size of 0. `_stat` does work correctly with symbolic links.","pos":[8,245],"nodes":[{"content":"<ph id=\"ph1\"> `_wstat`</ph> does not work with <ph id=\"ph2\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> symbolic links.","pos":[0,126],"source":" `_wstat` does not work with [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] symbolic links."},{"content":"In these cases, <ph id=\"ph1\">`_wstat`</ph> will always report a file size of 0.","pos":[127,188],"source":" In these cases, `_wstat` will always report a file size of 0."},{"content":"<ph id=\"ph1\">`_stat`</ph> does work correctly with symbolic links.","pos":[189,237],"source":"`_stat` does work correctly with symbolic links."}]}]},{"content":"This function validates its parameters.","pos":[6181,6220]},{"content":"If either <ph id=\"ph1\">`path`</ph> or <ph id=\"ph2\">`buffer`</ph> is <ph id=\"ph3\">`NULL`</ph>, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[6221,6391],"source":" If either `path` or `buffer` is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"pos":[6401,6451],"content":"Time Type and File Length Type Variations of _stat","linkify":"Time Type and File Length Type Variations of _stat","nodes":[{"content":"Time Type and File Length Type Variations of _stat","pos":[0,50]}]},{"content":"Functions","pos":[6458,6467]},{"content":"_USE_32BIT_TIME_T defined?","pos":[6468,6494]},{"content":"Time type","pos":[6495,6504]},{"content":"File length type","pos":[6505,6521]},{"pos":[6622,6639],"content":"<ph id=\"ph1\">`_stat`</ph>, <ph id=\"ph2\">`_wstat`</ph>","source":"`_stat`, `_wstat`"},{"content":"Not defined","pos":[6640,6651]},{"content":"64-bit","pos":[6652,6658]},{"content":"32-bit","pos":[6659,6665]},{"pos":[6670,6687],"content":"<ph id=\"ph1\">`_stat`</ph>, <ph id=\"ph2\">`_wstat`</ph>","source":"`_stat`, `_wstat`"},{"content":"Defined","pos":[6688,6695]},{"content":"32-bit","pos":[6696,6702]},{"content":"32-bit","pos":[6703,6709]},{"pos":[6714,6735],"content":"<ph id=\"ph1\">`_stat32`</ph>, <ph id=\"ph2\">`_wstat32`</ph>","source":"`_stat32`, `_wstat32`"},{"content":"Not affected by the macro definition","pos":[6736,6772]},{"content":"32-bit","pos":[6773,6779]},{"content":"32-bit","pos":[6780,6786]},{"pos":[6791,6812],"content":"<ph id=\"ph1\">`_stat64`</ph>, <ph id=\"ph2\">`_wstat64`</ph>","source":"`_stat64`, `_wstat64`"},{"content":"Not affected by the macro definition","pos":[6813,6849]},{"content":"64-bit","pos":[6850,6856]},{"content":"64-bit","pos":[6857,6863]},{"pos":[6868,6891],"content":"<ph id=\"ph1\">`_stati64`</ph>, <ph id=\"ph2\">`_wstati64`</ph>","source":"`_stati64`, `_wstati64`"},{"content":"Not defined","pos":[6892,6903]},{"content":"64-bit","pos":[6904,6910]},{"content":"64-bit","pos":[6911,6917]},{"pos":[6922,6945],"content":"<ph id=\"ph1\">`_stati64`</ph>, <ph id=\"ph2\">`_wstati64`</ph>","source":"`_stati64`, `_wstati64`"},{"content":"Defined","pos":[6946,6953]},{"content":"32-bit","pos":[6954,6960]},{"content":"64-bit","pos":[6961,6967]},{"pos":[6972,6999],"content":"<ph id=\"ph1\">`_stat32i64`</ph>, <ph id=\"ph2\">`_wstat32i64`</ph>","source":"`_stat32i64`, `_wstat32i64`"},{"content":"Not affected by the macro definition","pos":[7000,7036]},{"content":"32-bit","pos":[7037,7043]},{"content":"64-bit","pos":[7044,7050]},{"pos":[7055,7082],"content":"<ph id=\"ph1\">`_stat64i32`</ph>, <ph id=\"ph2\">`_wstat64i32`</ph>","source":"`_stat64i32`, `_wstat64i32`"},{"content":"Not affected by the macro definition","pos":[7083,7119]},{"content":"64-bit","pos":[7120,7126]},{"content":"32-bit","pos":[7127,7133]},{"pos":[7144,7173],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"TCHAR.H routine","pos":[7180,7195]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[7196,7224],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[7225,7238]},{"content":"_UNICODE defined","pos":[7239,7255]},{"pos":[7621,7697],"content":"The <ph id=\"ph1\">`_stat`</ph> structure, defined in SYS\\STAT.H, includes the following fields.","source":"The `_stat` structure, defined in SYS\\STAT.H, includes the following fields."},{"content":"Numeric identifier of group that owns the file (UNIX-specific) This field will always be zero on Windows systems.","pos":[7716,7829]},{"content":"A redirected file is classified as a Windows file.","pos":[7830,7880]},{"content":"Time of last access of file.","pos":[7901,7929]},{"content":"Valid on NTFS but not on FAT formatted disk drives.","pos":[7930,7981]},{"content":"Time of creation of file.","pos":[8002,8027]},{"content":"Valid on NTFS but not on FAT formatted disk drives.","pos":[8028,8079]},{"content":"Drive number of the disk containing the file (same as <ph id=\"ph1\">`st_rdev`</ph>).","pos":[8098,8163],"source":" Drive number of the disk containing the file (same as `st_rdev`)."},{"content":"Number of the information node (the <ph id=\"ph1\">`inode`</ph>) for the file (UNIX-specific).","pos":[8182,8256],"source":" Number of the information node (the `inode`) for the file (UNIX-specific)."},{"content":"On UNIX file systems, the <ph id=\"ph1\">`inode`</ph> describes the file date and time stamps, permissions, and content.","pos":[8257,8357],"source":" On UNIX file systems, the `inode` describes the file date and time stamps, permissions, and content."},{"content":"When files are hard-linked to one another, they share the same <ph id=\"ph1\">`inode`</ph>.","pos":[8358,8429],"source":" When files are hard-linked to one another, they share the same `inode`."},{"content":"The <ph id=\"ph1\">`inode`</ph>, and therefore <ph id=\"ph2\">`st_ino`</ph>, has no meaning in the FAT, HPFS, or NTFS file systems.","pos":[8430,8521],"source":" The `inode`, and therefore `st_ino`, has no meaning in the FAT, HPFS, or NTFS file systems."},{"content":"Bit mask for file-mode information.","pos":[8541,8576]},{"content":"The <ph id=\"ph1\">`_S_IFDIR`</ph> bit is set if <ph id=\"ph2\">`path`</ph> specifies a directory; the <ph id=\"ph3\">`_S_IFREG`</ph> bit is set if <ph id=\"ph4\">`path`</ph> specifies an ordinary file or a device.","pos":[8577,8711],"source":" The `_S_IFDIR` bit is set if `path` specifies a directory; the `_S_IFREG` bit is set if `path` specifies an ordinary file or a device."},{"content":"User read/write bits are set according to the file's permission mode; user execute bits are set according to the filename extension.","pos":[8712,8844]},{"content":"Time of last modification of file.","pos":[8865,8899]},{"content":"Always 1 on non-NTFS file systems.","pos":[8920,8954]},{"content":"Drive number of the disk containing the file (same as <ph id=\"ph1\">`st_dev`</ph>).","pos":[8974,9038],"source":" Drive number of the disk containing the file (same as `st_dev`)."},{"content":"Size of the file in bytes; a 64-bit integer for variations with the <ph id=\"ph1\">`i64`</ph> suffix<bpt id=\"p1\">**</bpt>.<ept id=\"p1\">**</ept>","pos":[9058,9143],"source":" Size of the file in bytes; a 64-bit integer for variations with the `i64` suffix**.**"},{"content":"Numeric identifier of user who owns file (UNIX-specific).","pos":[9162,9219]},{"content":"This field will always be zero on Windows systems.","pos":[9220,9270]},{"content":"A redirected file is classified as a Windows file.","pos":[9271,9321]},{"content":"If <ph id=\"ph1\">`path`</ph> refers to a device, the <ph id=\"ph2\">`st_size`</ph>, various time fields, <ph id=\"ph3\">`st_dev`</ph>, and <ph id=\"ph4\">`st_rdev`</ph> fields in the <ph id=\"ph5\">`_stat`</ph> structure are meaningless.","pos":[9328,9466],"source":"If `path` refers to a device, the `st_size`, various time fields, `st_dev`, and `st_rdev` fields in the `_stat` structure are meaningless."},{"content":"Because STAT.H uses the <bpt id=\"p1\">[</bpt>_dev_t<ept id=\"p1\">](../../c-runtime-library/standard-types.md)</ept> type that is defined in TYPES.H, you must include TYPES.H before STAT.H in your code.","pos":[9467,9628],"source":" Because STAT.H uses the [_dev_t](../../c-runtime-library/standard-types.md) type that is defined in TYPES.H, you must include TYPES.H before STAT.H in your code."},{"pos":[9637,9649],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[9656,9663]},{"content":"Required header","pos":[9664,9679]},{"content":"Optional headers","pos":[9680,9696]},{"pos":[9764,9833],"content":"<ph id=\"ph1\">`_stat`</ph>, <ph id=\"ph2\">`_stat32`</ph>, <ph id=\"ph3\">`_stat64`</ph>, <ph id=\"ph4\">`_stati64`</ph>, <ph id=\"ph5\">`_stat32i64`</ph>, <ph id=\"ph6\">`_stat64i32`</ph>","source":"`_stat`, `_stat32`, `_stat64`, `_stati64`, `_stat32i64`, `_stat64i32`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>sys/types.h&gt; followed by <ph id=\"ph2\">\\&lt;</ph>sys/stat.h&gt;","pos":[9834,9874],"source":"\\<sys/types.h> followed by \\<sys/stat.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>errno.h&gt;","pos":[9875,9885],"source":"\\<errno.h>"},{"pos":[9890,9965],"content":"<ph id=\"ph1\">`_wstat`</ph>, <ph id=\"ph2\">`_wstat32`</ph>, <ph id=\"ph3\">`_wstat64`</ph>, <ph id=\"ph4\">`_wstati64`</ph>, <ph id=\"ph5\">`_wstat32i64`</ph>, <ph id=\"ph6\">`_wstat64i32`</ph>","source":"`_wstat`, `_wstat32`, `_wstat64`, `_wstati64`, `_wstat32i64`, `_wstat64i32`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>sys/types.h&gt; followed by <ph id=\"ph2\">\\&lt;</ph>sys/stat.h&gt; or <ph id=\"ph3\">\\&lt;</ph>wchar.h&gt;","pos":[9966,10020],"source":"\\<sys/types.h> followed by \\<sys/stat.h> or \\<wchar.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>errno.h&gt;","pos":[10021,10031],"source":"\\<errno.h>"},{"pos":[10039,10163],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[10172,10179],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11658,11683],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[11693,11802],"content":"<bpt id=\"p1\">[</bpt>System::IO::File::GetAttributes<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.io.file.getattributes.aspx)</ept>","source":"[System::IO::File::GetAttributes](https://msdn.microsoft.com/en-us/library/system.io.file.getattributes.aspx)"},{"pos":[11812,11925],"content":"<bpt id=\"p1\">[</bpt>System::IO::File::GetCreationTime<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.io.file.getcreationtime.aspx)</ept>","source":"[System::IO::File::GetCreationTime](https://msdn.microsoft.com/en-us/library/system.io.file.getcreationtime.aspx)"},{"pos":[11935,12052],"content":"<bpt id=\"p1\">[</bpt>System::IO::File::GetLastAccessTime<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.io.file.getlastaccesstime.aspx)</ept>","source":"[System::IO::File::GetLastAccessTime](https://msdn.microsoft.com/en-us/library/system.io.file.getlastaccesstime.aspx)"},{"pos":[12062,12177],"content":"<bpt id=\"p1\">[</bpt>System::IO::File::GetLastWriteTime<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.io.file.getlastwritetime.aspx)</ept>","source":"[System::IO::File::GetLastWriteTime](https://msdn.microsoft.com/en-us/library/system.io.file.getlastwritetime.aspx)"},{"pos":[12186,12194],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>File Handling<ept id=\"p1\">](../../c-runtime-library/file-handling.md)</ept><ph id=\"ph1\"> </ph>","pos":[12198,12256],"source":"[File Handling](../../c-runtime-library/file-handling.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_access, _waccess<ept id=\"p1\">](../../c-runtime-library/reference/access-waccess.md)</ept><ph id=\"ph1\"> </ph>","pos":[12259,12333],"source":" [_access, _waccess](../../c-runtime-library/reference/access-waccess.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_fstat, _fstat32, _fstat64, _fstati64, _fstat32i64, _fstat64i32<ept id=\"p1\">](../../c-runtime-library/reference/fstat-fstat32-fstat64-fstati64-fstat32i64-fstat64i32.md)</ept><ph id=\"ph1\"> </ph>","pos":[12336,12494],"source":" [_fstat, _fstat32, _fstat64, _fstati64, _fstat32i64, _fstat64i32](../../c-runtime-library/reference/fstat-fstat32-fstat64-fstati64-fstat32i64-fstat64i32.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_getmbcp<ept id=\"p1\">](../../c-runtime-library/reference/getmbcp.md)</ept><ph id=\"ph1\"> </ph>","pos":[12497,12555],"source":" [_getmbcp](../../c-runtime-library/reference/getmbcp.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_setmbcp<ept id=\"p1\">](../../c-runtime-library/reference/setmbcp.md)</ept>","pos":[12558,12615],"source":" [_setmbcp](../../c-runtime-library/reference/setmbcp.md)"}],"content":"---\ntitle: \"_stat, _stat32, _stat64, _stati64, _stat32i64, _stat64i32, _wstat, _wstat32, _wstat64, _wstati64, _wstat32i64, _wstat64i32 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_wstat64\"\n  - \"_stati64\"\n  - \"_stat32\"\n  - \"_stat32i64\"\n  - \"_stat\"\n  - \"_wstati64\"\n  - \"_wstat32\"\n  - \"_wstat64i32\"\n  - \"_wstat\"\n  - \"_stat64\"\n  - \"_stat64i32\"\n  - \"_wstat32i64\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-filesystem-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"tstat32\"\n  - \"tstat\"\n  - \"_tstat64i32\"\n  - \"tstati64\"\n  - \"_wstat64\"\n  - \"_wstat32\"\n  - \"wstati64\"\n  - \"tstat64\"\n  - \"_stati64\"\n  - \"_wstat\"\n  - \"wstat64i32\"\n  - \"stat32i64\"\n  - \"tstat32i64\"\n  - \"_tstat\"\n  - \"_wstati64\"\n  - \"_tstati64\"\n  - \"_wstat32i64\"\n  - \"wstat32\"\n  - \"_wstat64i32\"\n  - \"_stat\"\n  - \"_tstat32\"\n  - \"stat64i32\"\n  - \"wstat64\"\n  - \"stat\"\n  - \"_stat32i64\"\n  - \"_stat32\"\n  - \"stati64\"\n  - \"wstat\"\n  - \"_stat64i32\"\n  - \"stat32\"\n  - \"_tstat32i64\"\n  - \"tstat64i32\"\n  - \"_tstat64\"\n  - \"_stat64\"\n  - \"stat/_stat\"\n  - \"stat/_stat32\"\n  - \"stat/_stat64\"\n  - \"stat/_stati64\"\n  - \"stat/_stat32i64\"\n  - \"stat/_stat64i32\"\n  - \"stat/_wstat\"\n  - \"stat/_wstat32\"\n  - \"stat/_wstat64\"\n  - \"stat/_wstati64\"\n  - \"stat/_wstat32i64\"\n  - \"stat/_wstat64i32\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"files [C++], status information\"\n  - \"_stat function\"\n  - \"_wstat function\"\n  - \"_stat64i32 function\"\n  - \"tstat function\"\n  - \"_tstat64i32 function\"\n  - \"_stati64 function\"\n  - \"_stat64 function\"\n  - \"tstati64 function\"\n  - \"wstati64 function\"\n  - \"wstat64 function\"\n  - \"_wstat64i32 function\"\n  - \"_tstat32i64 function\"\n  - \"_stat32i64 function\"\n  - \"stat function\"\n  - \"status of files\"\n  - \"_tstat32 function\"\n  - \"tstat64 function\"\n  - \"_wstat64 function\"\n  - \"_tstat function\"\n  - \"_stat32 function\"\n  - \"wstat function\"\n  - \"_wstat32i64 function\"\n  - \"_tstati64 function\"\n  - \"_wstat32 function\"\n  - \"stat64 function\"\n  - \"stati64 function\"\n  - \"_wstati64 function\"\n  - \"_tstat64 function\"\n  - \"files [C++], getting status information\"\nms.assetid: 99a75ae6-ff26-47ad-af70-5ea7e17226a5\ncaps.latest.revision: 26\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _stat, _stat32, _stat64, _stati64, _stat32i64, _stat64i32, _wstat, _wstat32, _wstat64, _wstati64, _wstat32i64, _wstat64i32\nGet status information on a file.  \n  \n## Syntax  \n  \n```  \nint _stat(  \n   const char *path,  \n   struct _stat *buffer   \n);  \nint _stat32(  \n   const char *path,  \n   struct __stat32 *buffer   \n);  \nint _stat64(  \n   const char *path,  \n   struct __stat64 *buffer   \n);  \nint _stati64(  \n   const char *path,  \n   struct _stati64 *buffer   \n);  \nint _stat32i64(  \n   const char *path,  \n   struct _stat32i64 *buffer   \n);  \nint _stat64i32(  \n   const char *path,  \n   struct _stat64i32 *buffer   \n);  \nint _wstat(  \n   const wchar_t *path,  \n   struct _stat *buffer   \n);  \nint _wstat32(  \n   const wchar_t *path,  \n   struct __stat32 *buffer   \n);  \nint _wstat64(  \n   const wchar_t *path,  \n   struct __stat64 *buffer   \n);  \nint _wstati64(  \n   const wchar_t *path,  \n   struct _stati64 *buffer   \n);  \nint _wstat32i64(  \n   const wchar_t *path,  \n   struct _stat32i64 *buffer   \n);  \nint _wstat64i32(  \n   const wchar_t *path,  \n   struct _stat64i32 *buffer   \n);  \n```  \n  \n#### Parameters  \n `path`  \n Pointer to a string containing the path of existing file or directory.  \n  \n `buffer`  \n Pointer to structure that stores results.  \n  \n## Return Value  \n Each of these functions returns 0 if the file-status information is obtained. A return value of –1 indicates an error, in which case `errno` is set to `ENOENT`, indicating that the filename or path could not be found. A return value of `EINVAL` indicates an invalid parameter; `errno` is also set to `EINVAL` in this case.  \n  \n See [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md) for more information on this, and other, return codes.  \n  \n The date stamp on a file can be represented if it is later than midnight, January 1, 1970, and before 23:59:59, December 31, 3000, UTC, unless you use `_stat32` or `_wstat32`, or have defined `_USE_32BIT_TIME_T`, in which case the date can be represented only until 23:59:59 January 18, 2038, UTC.  \n  \n## Remarks  \n The `_stat` function obtains information about the file or directory specified by `path` and stores it in the structure pointed to by `buffer`. `_stat` automatically handles multibyte-character string arguments as appropriate, recognizing multibyte-character sequences according to the multibyte code page currently in use.  \n  \n `_wstat` is a wide-character version of `_stat`; the `path` argument to `_wstat` is a wide-character string. `_wstat` and `_stat` behave identically except that `_wstat` does not handle multibyte-character strings.  \n  \n Variations of these functions support 32- or 64-bit time types, and 32- or 64-bit file lengths. The first numerical suffix (`32` or `64`) indicates the size of the time type used; the second suffix is either `i32` or `i64`, indicating whether the file size is represented as a 32-bit or 64-bit integer.  \n  \n `_stat` is equivalent to `_stat64i32`, and `struct``_stat` contains a 64-bit time. This is true unless `_USE_32BIT_TIME_T` is defined, in which case the old behavior is in effect; `_stat` uses a 32-bit time, and `struct``_stat` contains a 32-bit time. The same is true for `_stati64`.  \n  \n> [!NOTE]\n>  `_wstat` does not work with [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] symbolic links. In these cases, `_wstat` will always report a file size of 0. `_stat` does work correctly with symbolic links.  \n  \n This function validates its parameters. If either `path` or `buffer` is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md).  \n  \n### Time Type and File Length Type Variations of _stat  \n  \n|Functions|_USE_32BIT_TIME_T defined?|Time type|File length type|  \n|---------------|------------------------------------|---------------|----------------------|  \n|`_stat`, `_wstat`|Not defined|64-bit|32-bit|  \n|`_stat`, `_wstat`|Defined|32-bit|32-bit|  \n|`_stat32`, `_wstat32`|Not affected by the macro definition|32-bit|32-bit|  \n|`_stat64`, `_wstat64`|Not affected by the macro definition|64-bit|64-bit|  \n|`_stati64`, `_wstati64`|Not defined|64-bit|64-bit|  \n|`_stati64`, `_wstati64`|Defined|32-bit|64-bit|  \n|`_stat32i64`, `_wstat32i64`|Not affected by the macro definition|32-bit|64-bit|  \n|`_stat64i32`, `_wstat64i32`|Not affected by the macro definition|64-bit|32-bit|  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_tstat`|`_stat`|`_stat`|`_wstat`|  \n|`_tstat64`|`_stat64`|`_stat64`|`_wstat64`|  \n|`_tstati64`|`_stati64`|`_stati64`|`_wstati64`|  \n|`_tstat32i64`|`_stat32i64`|`_stat32i64`|`_wstat32i64`|  \n|`_tstat64i32`|`_stat64i32`|`_stat64i32`|`_wstat64i32`|  \n  \n The `_stat` structure, defined in SYS\\STAT.H, includes the following fields.  \n  \n `st_gid`  \n Numeric identifier of group that owns the file (UNIX-specific) This field will always be zero on Windows systems. A redirected file is classified as a Windows file.  \n  \n `st_atime`  \n Time of last access of file. Valid on NTFS but not on FAT formatted disk drives.  \n  \n `st_ctime`  \n Time of creation of file. Valid on NTFS but not on FAT formatted disk drives.  \n  \n `st_dev`  \n Drive number of the disk containing the file (same as `st_rdev`).  \n  \n `st_ino`  \n Number of the information node (the `inode`) for the file (UNIX-specific). On UNIX file systems, the `inode` describes the file date and time stamps, permissions, and content. When files are hard-linked to one another, they share the same `inode`. The `inode`, and therefore `st_ino`, has no meaning in the FAT, HPFS, or NTFS file systems.  \n  \n `st_mode`  \n Bit mask for file-mode information. The `_S_IFDIR` bit is set if `path` specifies a directory; the `_S_IFREG` bit is set if `path` specifies an ordinary file or a device. User read/write bits are set according to the file's permission mode; user execute bits are set according to the filename extension.  \n  \n `st_mtime`  \n Time of last modification of file.  \n  \n `st_nlink`  \n Always 1 on non-NTFS file systems.  \n  \n `st_rdev`  \n Drive number of the disk containing the file (same as `st_dev`).  \n  \n `st_size`  \n Size of the file in bytes; a 64-bit integer for variations with the `i64` suffix**.**  \n  \n `st_uid`  \n Numeric identifier of user who owns file (UNIX-specific). This field will always be zero on Windows systems. A redirected file is classified as a Windows file.  \n  \n If `path` refers to a device, the `st_size`, various time fields, `st_dev`, and `st_rdev` fields in the `_stat` structure are meaningless. Because STAT.H uses the [_dev_t](../../c-runtime-library/standard-types.md) type that is defined in TYPES.H, you must include TYPES.H before STAT.H in your code.  \n  \n## Requirements  \n  \n|Routine|Required header|Optional headers|  \n|-------------|---------------------|----------------------|  \n|`_stat`, `_stat32`, `_stat64`, `_stati64`, `_stat32i64`, `_stat64i32`|\\<sys/types.h> followed by \\<sys/stat.h>|\\<errno.h>|  \n|`_wstat`, `_wstat32`, `_wstat64`, `_wstati64`, `_wstat32i64`, `_wstat64i32`|\\<sys/types.h> followed by \\<sys/stat.h> or \\<wchar.h>|\\<errno.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_stat.c  \n// This program uses the _stat function to  \n// report information about the file named crt_stat.c.  \n  \n#include <time.h>  \n#include <sys/types.h>  \n#include <sys/stat.h>  \n#include <stdio.h>  \n#include <errno.h>  \n  \nint main( void )  \n{  \n   struct _stat buf;  \n   int result;  \n   char timebuf[26];  \n   char* filename = \"crt_stat.c\";  \n   errno_t err;  \n  \n   // Get data associated with \"crt_stat.c\":   \n   result = _stat( filename, &buf );  \n  \n   // Check if statistics are valid:   \n   if( result != 0 )  \n   {  \n      perror( \"Problem getting information\" );  \n      switch (errno)  \n      {  \n         case ENOENT:  \n           printf(\"File %s not found.\\n\", filename);  \n           break;  \n         case EINVAL:  \n           printf(\"Invalid parameter to _stat.\\n\");  \n           break;  \n         default:  \n           /* Should never be reached. */  \n           printf(\"Unexpected error in _stat.\\n\");  \n      }  \n   }  \n   else  \n   {  \n      // Output some of the statistics:   \n      printf( \"File size     : %ld\\n\", buf.st_size );  \n      printf( \"Drive         : %c:\\n\", buf.st_dev + 'A' );  \n      err = ctime_s(timebuf, 26, &buf.st_mtime);  \n      if (err)  \n      {  \n         printf(\"Invalid arguments to ctime_s.\");  \n         exit(1);  \n      }  \n      printf( \"Time modified : %s\", timebuf );  \n   }  \n}  \n```  \n  \n```Output  \nFile size     : 732  \nDrive         : C:  \nTime modified : Thu Feb 07 14:39:36 2002  \n```  \n  \n## .NET Framework Equivalent  \n  \n-   [System::IO::File::GetAttributes](https://msdn.microsoft.com/en-us/library/system.io.file.getattributes.aspx)  \n  \n-   [System::IO::File::GetCreationTime](https://msdn.microsoft.com/en-us/library/system.io.file.getcreationtime.aspx)  \n  \n-   [System::IO::File::GetLastAccessTime](https://msdn.microsoft.com/en-us/library/system.io.file.getlastaccesstime.aspx)  \n  \n-   [System::IO::File::GetLastWriteTime](https://msdn.microsoft.com/en-us/library/system.io.file.getlastwritetime.aspx)  \n  \n## See Also  \n [File Handling](../../c-runtime-library/file-handling.md)   \n [_access, _waccess](../../c-runtime-library/reference/access-waccess.md)   \n [_fstat, _fstat32, _fstat64, _fstati64, _fstat32i64, _fstat64i32](../../c-runtime-library/reference/fstat-fstat32-fstat64-fstati64-fstat32i64-fstat64i32.md)   \n [_getmbcp](../../c-runtime-library/reference/getmbcp.md)   \n [_setmbcp](../../c-runtime-library/reference/setmbcp.md)"}