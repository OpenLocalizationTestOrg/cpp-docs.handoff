<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e158dfb13f9161acf249c8692676109a6fbaed6f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\active-documents.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">89ea4519cf8c345806735a48255b853ae54050d4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f51da97ea5926c104202779b38f54ca40f50402e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Active Documents | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Active Documents</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Active documents extend the compound document technology of OLE.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These extensions are provided in the form of additional interfaces that manage views, so that objects can function within containers and yet retain control over their display and printing functions.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This process makes it possible to display documents both in foreign frames (such as the Microsoft Office Binder or Microsoft Internet Explorer) and in native frames (such as the product's own view ports).</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This section describes the functional <bpt id="p1">[</bpt>requirements for active documents<ept id="p1">](#requirements_for_active_documents)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The active document owns a set of data and has access to storage where the data can be saved and retrieved.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It can create and manage one or more views on its data.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In addition to supporting the usual embedding and in-place activation interfaces of OLE documents, the active document communicates its ability to create views through <ph id="ph1">`IOleDocument`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Through this interface, the container can ask to create (and possibly enumerate) the views that the active document can display.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Through this interface, the active document can also provide miscellaneous information about itself, such as whether it supports multiple views or complex rectangles.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following is the <bpt id="p1">**</bpt>IOleDocument<ept id="p1">**</ept> interface.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Note that the <bpt id="p1">**</bpt>IEnumOleDocumentViews<ept id="p1">**</ept> interface is a standard OLE enumerator for <bpt id="p2">**</bpt>IOleDocumentView <ph id="ph1">\*</ph><ept id="p2">**</ept> types.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Every active document must have a view frame provider with this interface.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If the document is not embedded within a container, the active document server itself must provide the view frame.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>However, when the active document is embedded in an active document container, the container provides the view frame.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>An active document can create one or more types of <bpt id="p1">[</bpt>views<ept id="p1">](#requirements_for_view_objects)</ept> of its data (for example, normal, outline, page layout, and so on).</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Views act like filters through which the data can be seen.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Even if the document has only one type of view, you may still want to support multiple views as a means of supporting new window functionality (for example, the <bpt id="p1">**</bpt>New Window<ept id="p1">**</ept> item on the <bpt id="p2">**</bpt>Window<ept id="p2">**</ept> menu in Office applications).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Requirements for Active Documents</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>An active document that can be displayed in an active document container must:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Use OLE's Compound Files as its storage mechanism by implementing <ph id="ph1">`IPersistStorage`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Support the basic embedding features of OLE Documents, including <bpt id="p1">**</bpt>Create From File<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This necessitates the interfaces <ph id="ph1">`IPersistFile`</ph>, <ph id="ph2">`IOleObject`</ph>, and <ph id="ph3">`IDataObject`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Support one or more views, each of which is capable of in-place activation.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>That is, the views must support the interface <ph id="ph1">`IOleDocumentView`</ph> as well as the interfaces <ph id="ph2">`IOleInPlaceObject`</ph> and <ph id="ph3">`IOleInPlaceActiveObject`</ph> (using the container's <bpt id="p1">**</bpt>IOleInPlaceSite<ept id="p1">**</ept> and <bpt id="p2">**</bpt>IOleInPlaceFrame<ept id="p2">**</ept> interfaces).</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Support the standard active document interfaces <ph id="ph1">`IOleDocument`</ph>, <ph id="ph2">`IOleCommandTarget`</ph>, and <ph id="ph3">`IPrint`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Knowledge of when and how to use the container-side interfaces is implied in these requirements.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Requirements for View Objects</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>An active document can create one or more views of its data.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Functionally, these views are like ports onto a particular method for displaying the data.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If an active document only supports a single view, the active document and that single view can be implemented using a single class.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IOleDocument::CreateView<ept id="p1">**</ept> returns the same object's <ph id="ph1">`IOleDocumentView`</ph> interface pointer.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To be represented within an active document container, a view component must support <bpt id="p1">**</bpt>IOleInPlaceObject<ept id="p1">**</ept> and <bpt id="p2">**</bpt>IOleInPlaceActiveObject<ept id="p2">**</ept> in addition to <ph id="ph1">`IOleDocumentView`</ph>:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Every view has an associated view site, which encapsulates the view frame and the view port (HWND and a rectangular area in that window).</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The site exposes this functionality though the standard <bpt id="p1">**</bpt>IOleInPlaceSite<ept id="p1">**</ept> interface.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Note that it is possible to have more than one view port on a single HWND.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Typically, each type of view has a different printed representation.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Hence views and the corresponding view sites should implement the printing interfaces if <ph id="ph1">`IPrint`</ph> and <ph id="ph2">`IContinueCallback`</ph>, respectively.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The view frame must negotiate with the view provider through <bpt id="p1">**</bpt>IPrint<ept id="p1">**</ept> when printing begins, so that headers, footers, margins, and related elements are printed correctly.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The view provider notifies the frame of printing-related events through <ph id="ph1">`IContinueCallback`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For more information on the use of these interfaces, see <bpt id="p1">[</bpt>Programmatic Printing<ept id="p1">](../mfc/programmatic-printing.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Note that if an active document only supports a single view, then the active document and that single view can be implemented using a single concrete class.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IOleDocument::CreateView<ept id="p1">**</ept> simply returns the same object's <ph id="ph1">`IOleDocumentView`</ph> interface pointer.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In short, it is not necessary that there be two separate object instances when only one view is required.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A view object can also be a command target.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>By implementing <ph id="ph1">`IOleCommandTarget`</ph> a view can receive commands that originate in the container's user interface (such as <bpt id="p1">**</bpt>New<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Open<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Save As<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Print<ept id="p4">**</ept> on the <bpt id="p5">**</bpt>File<ept id="p5">**</ept> menu; and <bpt id="p6">**</bpt>Copy<ept id="p6">**</ept>, <bpt id="p7">**</bpt>Paste<ept id="p7">**</ept>, <bpt id="p8">**</bpt>Undo<ept id="p8">**</ept> on the <bpt id="p9">**</bpt>Edit<ept id="p9">**</ept> menu).</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Message Handling and Command Targets<ept id="p1">](../mfc/message-handling-and-command-targets.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Active Document Containment</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>