{"nodes":[{"pos":[12,52],"content":"Indirection Operator: * | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Indirection Operator: * | Microsoft Docs","pos":[0,40]}]},{"content":"Indirection Operator: *","pos":[679,702]},{"content":"Syntax","pos":[706,712]},{"content":"Remarks","pos":[759,766]},{"content":"The unary indirection operator (<bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>) dereferences a pointer; that is, it converts a pointer value to an l-value.","pos":[770,885],"source":"The unary indirection operator (**\\***) dereferences a pointer; that is, it converts a pointer value to an l-value."},{"content":"The operand of the indirection operator must be a pointer to a type.","pos":[886,954]},{"content":"The result of the indirection expression is the type from which the pointer type is derived.","pos":[955,1047]},{"content":"The use of the <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> operator in this context is different from its meaning as a binary operator, which is multiplication.","pos":[1048,1171],"source":" The use of the **\\*** operator in this context is different from its meaning as a binary operator, which is multiplication."},{"content":"If the operand points to a function, the result is a function designator.","pos":[1178,1251]},{"content":"If it points to a storage location, the result is an l-value designating the storage location.","pos":[1252,1346]},{"content":"The indirection operator may be used cumulatively to dereference pointers to pointers.","pos":[1353,1439]},{"content":"For example:","pos":[1440,1452]},{"content":"If the pointer value is invalid, the result is undefined.","pos":[1985,2042]},{"content":"The following list includes some of the most common conditions that invalidate a pointer value.","pos":[2043,2138]},{"content":"The pointer is a null pointer.","pos":[2148,2178]},{"content":"The pointer specifies the address of a local item that is not visible at the time of the reference.","pos":[2188,2287]},{"content":"The pointer specifies an address that is inappropriately aligned for the type of the object pointed to.","pos":[2297,2400]},{"content":"The pointer specifies an address not used by the executing program.","pos":[2410,2477]},{"content":"See Also","pos":[2486,2494]},{"content":"Expressions with Unary Operators","pos":[2499,2531]},{"content":"C++ Built-in Operators, Precedence and Associativity","pos":[2582,2634]},{"content":"Address-of Operator: &amp;","pos":[2704,2726],"source":"Address-of Operator: &"},{"content":"Indirection and Address-of Operators","pos":[2768,2804]}],"content":"---\ntitle: \"Indirection Operator: * | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"* operator\"\n  - \"indirection operator\"\n  - \"operators [C++], indirection\"\n  - \"indirection operator, syntax\"\nms.assetid: c50309e1-6c02-4184-9fcb-2e13c1f4ac03\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Indirection Operator: *\n## Syntax  \n  \n```  \n  \n* cast-expression  \n```  \n  \n## Remarks  \n The unary indirection operator (**\\***) dereferences a pointer; that is, it converts a pointer value to an l-value. The operand of the indirection operator must be a pointer to a type. The result of the indirection expression is the type from which the pointer type is derived. The use of the **\\*** operator in this context is different from its meaning as a binary operator, which is multiplication.  \n  \n If the operand points to a function, the result is a function designator. If it points to a storage location, the result is an l-value designating the storage location.  \n  \n The indirection operator may be used cumulatively to dereference pointers to pointers. For example:  \n  \n```  \n// expre_Indirection_Operator.cpp  \n// compile with: /EHsc  \n// Demonstrate indirection operator  \n#include <iostream>  \nusing namespace std;  \nint main() {  \n   int n = 5;  \n   int *pn = &n;  \n   int **ppn = &pn;  \n  \n   cout  << \"Value of n:\\n\"  \n         << \"direct value: \" << n << endl  \n         << \"indirect value: \" << *pn << endl  \n         << \"doubly indirect value: \" << **ppn << endl  \n         << \"address of n: \" << pn << endl  \n         << \"address of n via indirection: \" << *ppn << endl;  \n}  \n```  \n  \n If the pointer value is invalid, the result is undefined. The following list includes some of the most common conditions that invalidate a pointer value.  \n  \n-   The pointer is a null pointer.  \n  \n-   The pointer specifies the address of a local item that is not visible at the time of the reference.  \n  \n-   The pointer specifies an address that is inappropriately aligned for the type of the object pointed to.  \n  \n-   The pointer specifies an address not used by the executing program.  \n  \n## See Also  \n [Expressions with Unary Operators](../cpp/expressions-with-unary-operators.md)   \n [C++ Built-in Operators, Precedence and Associativity](../cpp/cpp-built-in-operators-precedence-and-associativity.md)   \n [Address-of Operator: &](../cpp/address-of-operator-amp.md)   \n [Indirection and Address-of Operators](../c-language/indirection-and-address-of-operators.md)"}