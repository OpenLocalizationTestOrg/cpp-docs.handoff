{"nodes":[{"pos":[12,48],"content":"Binary Output Files | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Binary Output Files | Microsoft Docs","pos":[0,36]}]},{"content":"Binary Output Files","pos":[665,684]},{"content":"Streams were originally designed for text, so the default output mode is text.","pos":[685,763]},{"content":"In text mode, the newline character (hexadecimal 10) expands to a carriage return–linefeed (16-bit only).","pos":[764,869]},{"content":"The expansion can cause problems, as shown here:","pos":[870,918]},{"content":"You might expect this program to output the byte sequence { 99, 0, 10, 0 }; instead, it outputs { 99, 0, 13, 10, 0 }, which causes problems for a program expecting binary input.","pos":[1176,1353]},{"content":"If you need true binary output, in which characters are written untranslated, you could specify binary output by using the <bpt id=\"p1\">[</bpt>ofstream<ept id=\"p1\">](../standard-library/basic-ofstream-class.md#basic_ofstream__basic_ofstream)</ept> constructor openmode argument:","pos":[1354,1594],"source":" If you need true binary output, in which characters are written untranslated, you could specify binary output by using the [ofstream](../standard-library/basic-ofstream-class.md#basic_ofstream__basic_ofstream) constructor openmode argument:"},{"content":"See Also","pos":[1911,1919]},{"content":"Output Streams","pos":[1924,1938]}],"content":"---\ntitle: \"Binary Output Files | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"I/O [C++], binary output files\"\n  - \"files [C++], binary output files\"\n  - \"binary data, binary output files\"\nms.assetid: 180954af-8cd6-444b-9a76-2f630a3389d8\ncaps.latest.revision: 8\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Binary Output Files\nStreams were originally designed for text, so the default output mode is text. In text mode, the newline character (hexadecimal 10) expands to a carriage return–linefeed (16-bit only). The expansion can cause problems, as shown here:  \n  \n```  \n// binary_output_files.cpp  \n// compile with: /EHsc  \n#include <fstream>  \nusing namespace std;  \nint iarray[2] = { 99, 10 };  \nint main( )  \n{  \n    ofstream os( \"test.dat\" );  \n    os.write( (char *) iarray, sizeof( iarray ) );  \n}  \n```  \n  \n You might expect this program to output the byte sequence { 99, 0, 10, 0 }; instead, it outputs { 99, 0, 13, 10, 0 }, which causes problems for a program expecting binary input. If you need true binary output, in which characters are written untranslated, you could specify binary output by using the [ofstream](../standard-library/basic-ofstream-class.md#basic_ofstream__basic_ofstream) constructor openmode argument:  \n  \n```  \n// binary_output_files2.cpp  \n// compile with: /EHsc  \n#include <fstream>  \nusing namespace std;  \nint iarray[2] = { 99, 10 };  \n  \nint main()  \n{  \n   ofstream ofs ( \"test.dat\", ios_base::binary );  \n  \n   // Exactly 8 bytes written  \n   ofs.write( (char*)&iarray[0], sizeof(int)*2 );   \n}  \n```  \n  \n## See Also  \n [Output Streams](../standard-library/output-streams.md)\n\n"}