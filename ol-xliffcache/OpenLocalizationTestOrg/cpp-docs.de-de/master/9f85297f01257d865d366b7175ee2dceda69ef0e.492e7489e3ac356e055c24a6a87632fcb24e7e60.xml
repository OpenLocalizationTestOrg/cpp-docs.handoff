{"nodes":[{"pos":[12,44],"content":"_aligned_malloc | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_aligned_malloc | Microsoft Docs","pos":[0,32]}]},{"content":"_aligned_malloc","pos":[988,1003]},{"content":"Allocates memory on a specified alignment boundary.","pos":[1004,1055]},{"content":"Syntax","pos":[1064,1070]},{"content":"Parameters","pos":[1170,1180]},{"content":"Size of the requested memory allocation.","pos":[1194,1234]},{"content":"The alignment value, which must be an integer power of 2.","pos":[1256,1313]},{"content":"Return Value","pos":[1322,1334]},{"content":"A pointer to the memory block that was allocated or <ph id=\"ph1\">`NULL`</ph> if the operation failed.","pos":[1338,1421],"source":"A pointer to the memory block that was allocated or `NULL` if the operation failed."},{"content":"The pointer is a multiple of <ph id=\"ph1\">`alignment`</ph>.","pos":[1422,1463],"source":" The pointer is a multiple of `alignment`."},{"content":"Remarks","pos":[1472,1479]},{"pos":[1501,1567],"content":"is based on <bpt id=\"p1\">[</bpt>malloc<ept id=\"p1\">](../../c-runtime-library/reference/malloc.md)</ept>.","source":" is based on [malloc](../../c-runtime-library/reference/malloc.md)."},{"content":"is marked <ph id=\"ph1\">`__declspec(noalias)`</ph> and <ph id=\"ph2\">`__declspec(restrict)`</ph>, meaning that the function is guaranteed not to modify global variables and that the pointer returned is not aliased.","pos":[1592,1768],"source":" is marked `__declspec(noalias)` and `__declspec(restrict)`, meaning that the function is guaranteed not to modify global variables and that the pointer returned is not aliased."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>noalias<ept id=\"p1\">](../../cpp/noalias.md)</ept> and <bpt id=\"p2\">[</bpt>restrict<ept id=\"p2\">](../../cpp/restrict.md)</ept>.","pos":[1769,1865],"source":" For more information, see [noalias](../../cpp/noalias.md) and [restrict](../../cpp/restrict.md)."},{"content":"This function sets <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`ENOMEM`</ph> if the memory allocation failed or if the requested size was greater than <ph id=\"ph3\">`_HEAP_MAXREQ`</ph>.","pos":[1872,2000],"source":"This function sets `errno` to `ENOMEM` if the memory allocation failed or if the requested size was greater than `_HEAP_MAXREQ`."},{"content":"For more information about <ph id=\"ph1\">`errno`</ph>, see <bpt id=\"p1\">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","pos":[2001,2157],"source":" For more information about `errno`, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"Also, <ph id=\"ph1\">`_aligned_malloc`</ph> validates its parameters.","pos":[2158,2207],"source":" Also, `_aligned_malloc` validates its parameters."},{"content":"If <ph id=\"ph1\">`alignment`</ph> is not a power of 2 or <ph id=\"ph2\">`size`</ph> is zero, this function invokes the invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2208,2403],"source":" If `alignment` is not a power of 2 or `size` is zero, this function invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, this function returns <ph id=\"ph1\">`NULL`</ph> and sets <ph id=\"ph2\">`errno`</ph> to <ph id=\"ph3\">`EINVAL`</ph>.","pos":[2404,2499],"source":" If execution is allowed to continue, this function returns `NULL` and sets `errno` to `EINVAL`."},{"content":"Requirements","pos":[2508,2520]},{"content":"Routine","pos":[2527,2534]},{"content":"Required header","pos":[2535,2550]},{"content":"malloc.h&gt;","pos":[2615,2624],"source":"malloc.h>"},{"content":"Example","pos":[2634,2641]},{"content":"See Also","pos":[5309,5317]},{"content":"Data Alignment","pos":[5322,5336]}],"content":"---\ntitle: \"_aligned_malloc | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_aligned_malloc\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-heap-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_aligned_malloc\"\n  - \"alligned_malloc\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"aligned_malloc function\"\n  - \"_aligned_malloc function\"\nms.assetid: fb788d40-ee94-4039-aa4d-97d73dab1ca0\ncaps.latest.revision: 25\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _aligned_malloc\nAllocates memory on a specified alignment boundary.  \n  \n## Syntax  \n  \n```  \nvoid * _aligned_malloc(  \n    size_t size,   \n    size_t alignment  \n);  \n```  \n  \n#### Parameters  \n `size`  \n Size of the requested memory allocation.  \n  \n `alignment`  \n The alignment value, which must be an integer power of 2.  \n  \n## Return Value  \n A pointer to the memory block that was allocated or `NULL` if the operation failed. The pointer is a multiple of `alignment`.  \n  \n## Remarks  \n `_aligned_malloc` is based on [malloc](../../c-runtime-library/reference/malloc.md).  \n  \n `_aligned_malloc` is marked `__declspec(noalias)` and `__declspec(restrict)`, meaning that the function is guaranteed not to modify global variables and that the pointer returned is not aliased. For more information, see [noalias](../../cpp/noalias.md) and [restrict](../../cpp/restrict.md).  \n  \n This function sets `errno` to `ENOMEM` if the memory allocation failed or if the requested size was greater than `_HEAP_MAXREQ`. For more information about `errno`, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md). Also, `_aligned_malloc` validates its parameters. If `alignment` is not a power of 2 or `size` is zero, this function invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, this function returns `NULL` and sets `errno` to `EINVAL`.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_aligned_malloc`|\\<malloc.h>|  \n  \n## Example  \n  \n```  \n// crt_aligned_malloc.c  \n  \n#include <malloc.h>  \n#include <stdio.h>  \n  \nint main() {  \n    void    *ptr;  \n    size_t  alignment,  \n            off_set;  \n  \n    // Note alignment should be 2^N where N is any positive int.  \n    alignment = 16;  \n    off_set = 5;  \n  \n    // Using _aligned_malloc  \n    ptr = _aligned_malloc(100, alignment);  \n    if (ptr == NULL)  \n    {  \n        printf_s( \"Error allocation aligned memory.\");  \n        return -1;  \n    }  \n    if (((unsigned long long)ptr % alignment ) == 0)  \n        printf_s( \"This pointer, %p, is aligned on %zu\\n\",  \n                  ptr, alignment);  \n    else  \n        printf_s( \"This pointer, %p, is not aligned on %zu\\n\",   \n                  ptr, alignment);  \n  \n    // Using _aligned_realloc  \n    ptr = _aligned_realloc(ptr, 200, alignment);  \n    if ( ((unsigned long long)ptr % alignment ) == 0)  \n        printf_s( \"This pointer, %p, is aligned on %zu\\n\",  \n                  ptr, alignment);  \n    else  \n        printf_s( \"This pointer, %p, is not aligned on %zu\\n\",   \n                  ptr, alignment);  \n    _aligned_free(ptr);  \n  \n    // Using _aligned_offset_malloc  \n    ptr = _aligned_offset_malloc(200, alignment, off_set);  \n    if (ptr == NULL)  \n    {  \n        printf_s( \"Error allocation aligned offset memory.\");  \n        return -1;  \n    }  \n    if ( ( (((unsigned long long)ptr) + off_set) % alignment ) == 0)  \n        printf_s( \"This pointer, %p, is offset by %zu on alignment of %zu\\n\",  \n                  ptr, off_set, alignment);  \n    else  \n        printf_s( \"This pointer, %p, does not satisfy offset %zu \"  \n                  \"and alignment %zu\\n\",ptr, off_set, alignment);  \n  \n    // Using _aligned_offset_realloc  \n    ptr = _aligned_offset_realloc(ptr, 200, alignment, off_set);  \n    if (ptr == NULL)  \n    {  \n        printf_s( \"Error reallocation aligned offset memory.\");  \n        return -1;  \n    }  \n    if ( ( (((unsigned long long)ptr) + off_set) % alignment ) == 0)  \n        printf_s( \"This pointer, %p, is offset by %zu on alignment of %zu\\n\",  \n                  ptr, off_set, alignment);  \n    else  \n        printf_s( \"This pointer, %p, does not satisfy offset %zu and \"  \n                  \"alignment %zu\\n\", ptr, off_set, alignment);  \n  \n    // Note that _aligned_free works for both _aligned_malloc  \n    // and _aligned_offset_malloc. Using free is illegal.  \n    _aligned_free(ptr);  \n}  \n```  \n  \n```Output  \nThis pointer, 3280880, is aligned on 16  \nThis pointer, 3280880, is aligned on 16  \nThis pointer, 3280891, is offset by 5 on alignment of 16  \nThis pointer, 3280891, is offset by 5 on alignment of 16  \n```  \n  \n## See Also  \n [Data Alignment](../../c-runtime-library/data-alignment.md)"}