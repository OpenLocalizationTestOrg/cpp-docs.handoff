{"nodes":[{"pos":[12,53],"content":"Simple Data Type Classes | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Simple Data Type Classes | Microsoft Docs","pos":[0,41]}]},{"content":"Simple Data Type Classes","pos":[675,699]},{"content":"The following classes encapsulate drawing coordinates, character strings, and time and date information, allowing convenient use of C++ syntax.","pos":[700,843]},{"content":"These objects are used widely as parameters to the member functions of Windows classes in the class library.","pos":[844,952]},{"content":"Because <ph id=\"ph1\">`CPoint`</ph>, <ph id=\"ph2\">`CSize`</ph>, and <ph id=\"ph3\">`CRect`</ph> correspond to the <bpt id=\"p1\">**</bpt>POINT<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>SIZE<ept id=\"p2\">**</ept>, and <ph id=\"ph4\">`RECT`</ph> structures, respectively, in the <ph id=\"ph5\">[!INCLUDE[winSDK](../atl/includes/winsdk_md.md)]</ph>, you can use objects of these C++ classes wherever you can use these C-language structures.","pos":[953,1215],"source":" Because `CPoint`, `CSize`, and `CRect` correspond to the **POINT**, **SIZE**, and `RECT` structures, respectively, in the [!INCLUDE[winSDK](../atl/includes/winsdk_md.md)], you can use objects of these C++ classes wherever you can use these C-language structures."},{"content":"The classes provide useful interfaces through their member functions.","pos":[1216,1285]},{"content":"provides very flexible dynamic character strings.","pos":[1297,1346]},{"content":", <ph id=\"ph1\">`COleDateTime`</ph>, <ph id=\"ph2\">`CTimeSpan`</ph>, and <bpt id=\"p1\">**</bpt>COleTimeSpan<ept id=\"p1\">**</ept> represent time and date values.","pos":[1354,1437],"source":", `COleDateTime`, `CTimeSpan`, and **COleTimeSpan** represent time and date values."},{"content":"For more information about these classes, see the article <bpt id=\"p1\">[</bpt>Date and Time<ept id=\"p1\">](../atl-mfc-shared/date-and-time.md)</ept>.","pos":[1438,1548],"source":" For more information about these classes, see the article [Date and Time](../atl-mfc-shared/date-and-time.md)."},{"content":"The classes that begin with \"<bpt id=\"p1\">**</bpt>COle<ept id=\"p1\">**</ept>\" are encapsulations of data types provided by OLE.","pos":[1555,1643],"source":"The classes that begin with \"**COle**\" are encapsulations of data types provided by OLE."},{"content":"These data types can be used in Windows programs regardless of whether other OLE features are used.","pos":[1644,1743]},{"content":"CStringT Class","pos":[1751,1765]},{"content":"Holds character strings.","pos":[1817,1841]},{"content":"CTime","pos":[1849,1854]},{"content":"Holds absolute time and date values.","pos":[1903,1939]},{"content":"COleDateTime","pos":[1947,1959]},{"content":"Wrapper for the OLE automation type <bpt id=\"p1\">**</bpt>DATE<ept id=\"p1\">**</ept>.","pos":[2015,2060],"source":" Wrapper for the OLE automation type **DATE**."},{"content":"Represents date and time values.","pos":[2061,2093]},{"content":"CTimeSpan","pos":[2101,2110]},{"content":"Holds relative time and date values.","pos":[2163,2199]},{"content":"COleDateTimeSpan","pos":[2207,2223]},{"content":"Holds relative <ph id=\"ph1\">`COleDateTime`</ph> values, such as the difference between two <ph id=\"ph2\">`COleDateTime`</ph> values.","pos":[2283,2378],"source":" Holds relative `COleDateTime` values, such as the difference between two `COleDateTime` values."},{"content":"CPoint","pos":[2386,2392]},{"content":"Holds coordinate (x, y) pairs.","pos":[2442,2472]},{"content":"CSize","pos":[2480,2485]},{"content":"Holds distance, relative positions, or paired values.","pos":[2534,2587]},{"content":"CRect","pos":[2595,2600]},{"content":"Holds coordinates of rectangular areas.","pos":[2649,2688]},{"content":"CImageList","pos":[2696,2706]},{"content":"Provides the functionality of the Windows image list.","pos":[2749,2802]},{"content":"Image lists are used with list controls and tree controls.","pos":[2803,2861]},{"content":"They can also be used to store and archive a set of same-sized bitmaps.","pos":[2862,2933]},{"content":"COleVariant","pos":[2941,2952]},{"content":"Wrapper for the OLE automation type <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept>.","pos":[2996,3044],"source":" Wrapper for the OLE automation type **VARIANT**."},{"content":"Data in <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept>s can be stored in many formats.","pos":[3045,3096],"source":" Data in **VARIANT**s can be stored in many formats."},{"content":"COleCurrency","pos":[3104,3116]},{"content":"Wrapper for the OLE automation type <bpt id=\"p1\">**</bpt>CURRENCY<ept id=\"p1\">**</ept>, a fixed-point arithmetic type, with 15 digits before the decimal point and 4 digits after.","pos":[3161,3301],"source":" Wrapper for the OLE automation type **CURRENCY**, a fixed-point arithmetic type, with 15 digits before the decimal point and 4 digits after."},{"pos":[3309,3655],"content":"[!NOTE]\n Beginning with Visual C++ .NET, `CRect`, `CSize`, and `CPoint` have been modified to be usable in either ATL or MFC applications. In addition, `CStringT` has been added to provide an MFC-independent `CString`-like class. For more information on shared utility classes, see [Shared Classes](../atl-mfc-shared/atl-mfc-shared-classes.md).","leadings":["","> "],"nodes":[{"content":" Beginning with Visual C++ .NET, `CRect`, `CSize`, and `CPoint` have been modified to be usable in either ATL or MFC applications. In addition, `CStringT` has been added to provide an MFC-independent `CString`-like class. For more information on shared utility classes, see [Shared Classes](../atl-mfc-shared/atl-mfc-shared-classes.md).","pos":[8,344],"nodes":[{"content":"Beginning with Visual C++ .NET, <ph id=\"ph1\">`CRect`</ph>, <ph id=\"ph2\">`CSize`</ph>, and <ph id=\"ph3\">`CPoint`</ph> have been modified to be usable in either ATL or MFC applications.","pos":[1,130],"source":" Beginning with Visual C++ .NET, `CRect`, `CSize`, and `CPoint` have been modified to be usable in either ATL or MFC applications."},{"content":"In addition, <ph id=\"ph1\">`CStringT`</ph> has been added to provide an MFC-independent <ph id=\"ph2\">`CString`</ph>-like class.","pos":[131,221],"source":" In addition, `CStringT` has been added to provide an MFC-independent `CString`-like class."},{"content":"For more information on shared utility classes, see <bpt id=\"p1\">[</bpt>Shared Classes<ept id=\"p1\">](../atl-mfc-shared/atl-mfc-shared-classes.md)</ept>.","pos":[222,336],"source":" For more information on shared utility classes, see [Shared Classes](../atl-mfc-shared/atl-mfc-shared-classes.md)."}]}]},{"content":"See Also","pos":[3664,3672]},{"content":"Class Overview","pos":[3677,3691]}],"content":"---\ntitle: \"Simple Data Type Classes | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"vc.classes.data\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"scalar classes [C++]\"\n  - \"data classes [C++]\"\n  - \"simple data type classes\"\nms.assetid: 0d591d68-0a33-49e9-8a6d-90c90de5c16a\ncaps.latest.revision: 12\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Simple Data Type Classes\nThe following classes encapsulate drawing coordinates, character strings, and time and date information, allowing convenient use of C++ syntax. These objects are used widely as parameters to the member functions of Windows classes in the class library. Because `CPoint`, `CSize`, and `CRect` correspond to the **POINT**, **SIZE**, and `RECT` structures, respectively, in the [!INCLUDE[winSDK](../atl/includes/winsdk_md.md)], you can use objects of these C++ classes wherever you can use these C-language structures. The classes provide useful interfaces through their member functions. `CStringT` provides very flexible dynamic character strings. `CTime`, `COleDateTime`, `CTimeSpan`, and **COleTimeSpan** represent time and date values. For more information about these classes, see the article [Date and Time](../atl-mfc-shared/date-and-time.md).  \n  \n The classes that begin with \"**COle**\" are encapsulations of data types provided by OLE. These data types can be used in Windows programs regardless of whether other OLE features are used.  \n  \n [CStringT Class](../atl-mfc-shared/reference/cstringt-class.md)  \n Holds character strings.  \n  \n [CTime](../atl-mfc-shared/reference/ctime-class.md)  \n Holds absolute time and date values.  \n  \n [COleDateTime](../atl-mfc-shared/reference/coledatetime-class.md)  \n Wrapper for the OLE automation type **DATE**. Represents date and time values.  \n  \n [CTimeSpan](../atl-mfc-shared/reference/ctimespan-class.md)  \n Holds relative time and date values.  \n  \n [COleDateTimeSpan](../atl-mfc-shared/reference/coledatetimespan-class.md)  \n Holds relative `COleDateTime` values, such as the difference between two `COleDateTime` values.  \n  \n [CPoint](../atl-mfc-shared/reference/cpoint-class.md)  \n Holds coordinate (x, y) pairs.  \n  \n [CSize](../atl-mfc-shared/reference/csize-class.md)  \n Holds distance, relative positions, or paired values.  \n  \n [CRect](../atl-mfc-shared/reference/crect-class.md)  \n Holds coordinates of rectangular areas.  \n  \n [CImageList](../mfc/reference/cimagelist-class.md)  \n Provides the functionality of the Windows image list. Image lists are used with list controls and tree controls. They can also be used to store and archive a set of same-sized bitmaps.  \n  \n [COleVariant](../mfc/reference/colevariant-class.md)  \n Wrapper for the OLE automation type **VARIANT**. Data in **VARIANT**s can be stored in many formats.  \n  \n [COleCurrency](../mfc/reference/colecurrency-class.md)  \n Wrapper for the OLE automation type **CURRENCY**, a fixed-point arithmetic type, with 15 digits before the decimal point and 4 digits after.  \n  \n> [!NOTE]\n>  Beginning with Visual C++ .NET, `CRect`, `CSize`, and `CPoint` have been modified to be usable in either ATL or MFC applications. In addition, `CStringT` has been added to provide an MFC-independent `CString`-like class. For more information on shared utility classes, see [Shared Classes](../atl-mfc-shared/atl-mfc-shared-classes.md).  \n  \n## See Also  \n [Class Overview](../mfc/class-library-overview.md)\n\n"}