{"nodes":[{"pos":[12,54],"content":"cauchy_distribution Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"cauchy_distribution Class | Microsoft Docs","pos":[0,42]}]},{"content":"cauchy_distribution Class","pos":[803,828]},{"content":"Generates a Cauchy distribution.","pos":[829,861]},{"content":"Syntax","pos":[870,876]},{"content":"Parameters","pos":[1547,1557]},{"content":"The floating-point result type, defaults to <ph id=\"ph1\">`double`</ph>.","pos":[1575,1628],"source":" The floating-point result type, defaults to `double`."},{"content":"For possible types, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","pos":[1629,1696],"source":" For possible types, see [\\<random>](../standard-library/random.md)."},{"content":"Remarks","pos":[1705,1712]},{"content":"The template class describes a distribution that produces values of a user-specified integral type, or type <ph id=\"ph1\">`double`</ph> if none is provided, distributed according to the Cauchy Distribution.","pos":[1716,1903],"source":"The template class describes a distribution that produces values of a user-specified integral type, or type `double` if none is provided, distributed according to the Cauchy Distribution."},{"content":"The following table links to articles about individual members.","pos":[1904,1967]},{"content":"cauchy_distribution::cauchy_distribution","pos":[1992,2032]},{"content":"cauchy_distribution::param_type","pos":[2195,2226]},{"pos":[2269,2386],"content":"The property functions <ph id=\"ph1\">`a()`</ph> and <ph id=\"ph2\">`b()`</ph> return their respective values for stored distribution parameters <ph id=\"ph3\">`a`</ph> and <ph id=\"ph4\">`b`</ph>.","source":"The property functions `a()` and `b()` return their respective values for stored distribution parameters `a` and `b`."},{"pos":[2393,2507],"content":"For more information about distribution classes and their members, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","source":"For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md)."},{"pos":[2514,2672],"content":"For detailed information about the cauchy distribution, see the Wolfram MathWorld article <bpt id=\"p1\">[</bpt>Cauchy Distribution<ept id=\"p1\">](http://go.microsoft.com/fwlink/LinkId=400523)</ept>.","source":"For detailed information about the cauchy distribution, see the Wolfram MathWorld article [Cauchy Distribution](http://go.microsoft.com/fwlink/LinkId=400523)."},{"content":"Example","pos":[2681,2688]},{"content":"Output","pos":[4592,4598]},{"content":"First run:","pos":[4602,4612]},{"content":"Second run:","pos":[5265,5276]},{"content":"Third run:","pos":[5936,5946]},{"content":"Requirements","pos":[6611,6623]},{"pos":[6627,6648],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>random&gt;","source":"**Header:** \\<random>"},{"pos":[6655,6673],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[6740,6780],"content":"cauchy_distribution::cauchy_distribution"},{"content":"Constructs the distribution.","pos":[6784,6812]},{"content":"Parameters","pos":[6960,6970]},{"content":"The <ph id=\"ph1\">`a`</ph> distribution parameter.","pos":[6981,7012],"source":" The `a` distribution parameter."},{"content":"The <ph id=\"ph1\">`b`</ph> distribution parameter.","pos":[7026,7057],"source":" The `b` distribution parameter."},{"content":"The parameter structure used to construct the distribution.","pos":[7074,7133]},{"content":"Remarks","pos":[7143,7150]},{"pos":[7156,7169],"content":"Precondition:"},{"pos":[7188,7321],"content":"The first constructor constructs an object whose stored <ph id=\"ph1\">`a`</ph> value holds the value <ph id=\"ph2\">`a`</ph> and whose stored <ph id=\"ph3\">`b`</ph> value holds the value <ph id=\"ph4\">`b`</ph>.","source":"The first constructor constructs an object whose stored `a` value holds the value `a` and whose stored `b` value holds the value `b`."},{"content":"The second constructor constructs an object whose stored parameters are initialized from <ph id=\"ph1\">`parm`</ph>.","pos":[7328,7424],"source":"The second constructor constructs an object whose stored parameters are initialized from `parm`."},{"content":"You can obtain and set the current parameters of an existing distribution by calling the <ph id=\"ph1\">`param()`</ph> member function.","pos":[7425,7540],"source":" You can obtain and set the current parameters of an existing distribution by calling the `param()` member function."},{"pos":[7598,7629],"content":"cauchy_distribution::param_type"},{"content":"Stores all the parameters of the distribution.","pos":[7633,7679]},{"content":"Parameters","pos":[8005,8015]},{"pos":[8019,8114],"content":"See parent topic <bpt id=\"p1\">[</bpt>cauchy_distribution Class<ept id=\"p1\">](../standard-library/cauchy-distribution-class.md)</ept>.","source":"See parent topic [cauchy_distribution Class](../standard-library/cauchy-distribution-class.md)."},{"content":"Remarks","pos":[8124,8131]},{"pos":[8137,8150],"content":"Precondition:"},{"pos":[8169,8412],"content":"This structure can be passed to the distribution's class constructor at instantiation, to the <ph id=\"ph1\">`param()`</ph> member function to set the stored parameters of an existing distribution, and to <ph id=\"ph2\">`operator()`</ph> to be used in place of the stored parameters.","source":"This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters."},{"content":"See Also","pos":[8421,8429]},{"content":"random&gt;","pos":[8436,8443],"source":"random>"}],"content":"---\ntitle: \"cauchy_distribution Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"cauchy_distribution\"\n  - \"random/std::tr1::cauchy_distribution\"\n  - \"std::tr1::cauchy_distribution\"\n  - \"std.tr1.cauchy_distribution\"\n  - \"tr1::cauchy_distribution\"\n  - \"tr1.cauchy_distribution\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"cauchy_distribution class\"\nms.assetid: 21522351-f2f1-46d9-97f0-d358c932356c\ncaps.latest.revision: 25\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# cauchy_distribution Class\nGenerates a Cauchy distribution.  \n  \n## Syntax  \n```  \nclass cauchy_distribution{public:    // types typedef RealType result_type;    struct param_type;    // constructor and reset functions explicit cauchy_distribution(RealType a = 0.0, RealType b = 1.0);\n   explicit cauchy_distribution(const param_type& parm);\n   void reset();\n   // generating functions template <class URNG>  \n   result_type operator()(URNG& gen);\n   template <class URNG>  \n   result_type operator()(URNG& gen, const param_type& parm);\n   // property functions RealType a() const;\n   RealType b() const;\n   param_type param() const;\n   void param(const param_type& parm);\n   result_type min() const;\n   result_type max() const;};  \n```   \n#### Parameters  \n `RealType`  \n The floating-point result type, defaults to `double`. For possible types, see [\\<random>](../standard-library/random.md).  \n  \n## Remarks  \n The template class describes a distribution that produces values of a user-specified integral type, or type `double` if none is provided, distributed according to the Cauchy Distribution. The following table links to articles about individual members.  \n  \n||||  \n|-|-|-|  \n|[cauchy_distribution::cauchy_distribution](#cauchy_distribution__cauchy_distribution)|`cauchy_distribution::a`|`cauchy_distribution::param`|  \n|`cauchy_distribution::operator()`|`cauchy_distribution::b`|[cauchy_distribution::param_type](#cauchy_distribution__param_type)|  \n  \n The property functions `a()` and `b()` return their respective values for stored distribution parameters `a` and `b`.  \n  \n For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md).  \n  \n For detailed information about the cauchy distribution, see the Wolfram MathWorld article [Cauchy Distribution](http://go.microsoft.com/fwlink/LinkId=400523).  \n  \n## Example  \n  \n```cpp  \n// compile with: /EHsc /W4  \n#include <random>   \n#include <iostream>  \n#include <iomanip>  \n#include <string>  \n#include <map>  \n  \nvoid test(const double a, const double b, const int s) {  \n  \n    // uncomment to use a non-deterministic generator  \n    //    std::random_device gen;  \n  \n    std::mt19937 gen(1701);  \n  \n    std::cauchy_distribution<> distr(a, b);  \n  \n    std::cout << std::endl;  \n    std::cout << \"min() == \" << distr.min() << std::endl;  \n    std::cout << \"max() == \" << distr.max() << std::endl;  \n    std::cout << \"a() == \" << std::fixed << std::setw(11) << std::setprecision(10) << distr.a() << std::endl;  \n    std::cout << \"b() == \" << std::fixed << std::setw(11) << std::setprecision(10) << distr.b() << std::endl;  \n  \n    // generate the distribution as a histogram  \n    std::map<double, int> histogram;  \n    for (int i = 0; i < s; ++i) {  \n        ++histogram[distr(gen)];  \n    }  \n  \n    // print results  \n    std::cout << \"Distribution for \" << s << \" samples:\" << std::endl;  \n    int counter = 0;  \n    for (const auto& elem : histogram) {  \n        std::cout << std::fixed << std::setw(11) << ++counter << \": \"  \n            << std::setw(14) << std::setprecision(10) << elem.first << std::endl;  \n    }  \n    std::cout << std::endl;  \n}  \n  \nint main()  \n{  \n    double a_dist = 0.0;  \n    double b_dist = 1;  \n  \n    int samples = 10;  \n  \n    std::cout << \"Use CTRL-Z to bypass data entry and run using default values.\" << std::endl;  \n    std::cout << \"Enter a floating point value for the 'a' distribution parameter: \";  \n    std::cin >> a_dist;  \n    std::cout << \"Enter a floating point value for the 'b' distribution parameter (must be greater than zero): \";  \n    std::cin >> b_dist;  \n    std::cout << \"Enter an integer value for the sample count: \";  \n    std::cin >> samples;  \n  \n    test(a_dist, b_dist, samples);  \n}  \n  \n```  \n  \n## Output  \n First run:  \n  \n```  \nUse CTRL-Z to bypass data entry and run using default values.  \nEnter a floating point value for the 'a' distribution parameter: 0  \nEnter a floating point value for the 'b' distribution parameter (must be greater than zero): 1  \nEnter an integer value for the sample count: 10  \n \nmin() == -1.79769e+308  \nmax() == 1.79769e+308  \na() == 0.0000000000  \nb() == 1.0000000000  \nDistribution for 10 samples:  \n    1: -3.4650392984  \n    2: -2.6369564174  \n    3: -0.0786978867  \n    4: -0.0609632093  \n    5: 0.0589387400  \n    6: 0.0589539764  \n    7: 0.1004592006  \n    8: 1.0965724260  \n    9: 1.4389408122  \n    10: 2.5253154706  \n```  \n  \n Second run:  \n  \n```  \nUse CTRL-Z to bypass data entry and run using default values.  \nEnter a floating point value for the 'a' distribution parameter: 0  \nEnter a floating point value for the 'b' distribution parameter (must be greater than zero): 10  \nEnter an integer value for the sample count: 10  \n \nmin() == -1.79769e+308  \nmax() == 1.79769e+308  \na() == 0.0000000000  \nb() == 10.0000000000  \nDistribution for 10 samples:  \n    1: -34.6503929840  \n    2: -26.3695641736  \n    3: -0.7869788674  \n    4: -0.6096320926  \n    5: 0.5893873999  \n    6: 0.5895397637  \n    7: 1.0045920062  \n    8: 10.9657242597  \n    9: 14.3894081218  \n    10: 25.2531547063  \n```  \n  \n Third run:  \n  \n```  \nUse CTRL-Z to bypass data entry and run using default values.  \nEnter a floating point value for the 'a' distribution parameter: 10  \nEnter a floating point value for the 'b' distribution parameter (must be greater than zero): 10  \nEnter an integer value for the sample count: 10  \n \nmin() == -1.79769e+308  \nmax() == 1.79769e+308  \na() == 10.0000000000  \nb() == 10.0000000000  \nDistribution for 10 samples:  \n    1: -24.6503929840  \n    2: -16.3695641736  \n    3: 9.2130211326  \n    4: 9.3903679074  \n    5: 10.5893873999  \n    6: 10.5895397637  \n    7: 11.0045920062  \n    8: 20.9657242597  \n    9: 24.3894081218  \n    10: 35.2531547063  \n```  \n  \n## Requirements  \n **Header:** \\<random>  \n  \n **Namespace:** std  \n  \n##  <a name=\"cauchy_distribution__cauchy_distribution\"></a>  cauchy_distribution::cauchy_distribution  \n Constructs the distribution.  \n  \n```  \nexplicit cauchy_distribution(RealType a = 0.0, RealType b = 1.0);\n\n \nexplicit cauchy_distribution(const param_type& parm);\n```  \n  \n### Parameters  \n `a`  \n The `a` distribution parameter.  \n  \n `b`  \n The `b` distribution parameter.  \n  \n `parm`  \n The parameter structure used to construct the distribution.  \n  \n### Remarks  \n **Precondition:** `0.0 < b`  \n  \n The first constructor constructs an object whose stored `a` value holds the value `a` and whose stored `b` value holds the value `b`.  \n  \n The second constructor constructs an object whose stored parameters are initialized from `parm`. You can obtain and set the current parameters of an existing distribution by calling the `param()` member function.  \n  \n##  <a name=\"cauchy_distribution__param_type\"></a>  cauchy_distribution::param_type  \n Stores all the parameters of the distribution.  \n```cpp    \nstruct param_type {  \n   typedef cauchy_distribution<RealType> distribution_type;  \n   param_type(RealType a = 0.0, RealType b = 1.0);\n   RealType a() const;\n   RealType b() const;\n   .....  \n   bool operator==(const param_type& right) const;\n   bool operator!=(const param_type& right) const;\n   };  \n```  \n### Parameters  \n See parent topic [cauchy_distribution Class](../standard-library/cauchy-distribution-class.md).  \n  \n### Remarks  \n **Precondition:** `0.0 < b`  \n  \n This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters.  \n  \n## See Also  \n [\\<random>](../standard-library/random.md)\n\n\n\n"}