{"nodes":[{"pos":[12,52],"content":"greater_equal (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"greater_equal (STL-CLR) | Microsoft Docs","pos":[0,40]}]},{"content":"greater_equal (STL/CLR)","pos":[638,661]},{"content":"The template class describes a functor that, when called, returns true only if the first argument is greater than or equal to the second.","pos":[662,799]},{"content":"You use it specify a function object in terms of its argument type.","pos":[800,867]},{"content":"Syntax","pos":[876,882]},{"content":"Parameters","pos":[1473,1483]},{"content":"Arg","pos":[1487,1490]},{"content":"The type of the arguments.","pos":[1494,1520]},{"content":"Member Functions","pos":[1529,1545]},{"content":"Type Definition","pos":[1552,1567]},{"content":"Description","pos":[1568,1579]},{"content":"delegate_type","pos":[1628,1641]},{"content":"The type of the generic delegate.","pos":[1642,1675]},{"content":"first_argument_type","pos":[1680,1699]},{"content":"The type of the functor first argument.","pos":[1700,1739]},{"content":"result_type","pos":[1744,1755]},{"content":"The type of the functor result.","pos":[1756,1787]},{"content":"second_argument_type","pos":[1792,1812]},{"content":"The type of the functor second argument.","pos":[1813,1853]},{"content":"Member","pos":[1861,1867]},{"content":"Description","pos":[1868,1879]},{"content":"greater_equal","pos":[1919,1932]},{"content":"Constructs the functor.","pos":[1933,1956]},{"content":"Operator","pos":[1964,1972]},{"content":"Description","pos":[1973,1984]},{"content":"operator()","pos":[2026,2036]},{"content":"Computes the desired function.","pos":[2037,2067]},{"content":"operator delegate_type^","pos":[2072,2095]},{"content":"Casts the functor to a delegate.","pos":[2096,2128]},{"content":"Remarks","pos":[2138,2145]},{"content":"The template class describes a two-argument functor.","pos":[2149,2201]},{"content":"It defines the member operator <ph id=\"ph1\">`operator()`</ph> so that, when the object is called as a function, it returns true only if the first argument is greater than or equal to the second.","pos":[2202,2378],"source":" It defines the member operator `operator()` so that, when the object is called as a function, it returns true only if the first argument is greater than or equal to the second."},{"pos":[2385,2507],"content":"You can also pass the object as a function argument whose type is <ph id=\"ph1\">`delegate_type^`</ph> and it will be converted appropriately.","source":"You can also pass the object as a function argument whose type is `delegate_type^` and it will be converted appropriately."},{"content":"Example","pos":[2516,2523]},{"content":"Requirements","pos":[3554,3566]},{"pos":[3570,3602],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/functional&gt;","source":"**Header:** \\<cliext/functional>"},{"pos":[3609,3630],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[3639,3647]},{"content":"less (STL/CLR)","pos":[3652,3666]}],"content":"---\ntitle: \"greater_equal (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::greater_equal\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"greater_equal function [STL/CLR]\"\nms.assetid: 4d4d8301-72dd-4a06-a652-5237e1e72a88\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# greater_equal (STL/CLR)\nThe template class describes a functor that, when called, returns true only if the first argument is greater than or equal to the second. You use it specify a function object in terms of its argument type.  \n  \n## Syntax  \n  \n```  \ntemplate<typename Arg>  \n    ref class greater_equal  \n    { // wrap operator()  \npublic:  \n    typedef Arg first_argument_type;  \n    typedef Arg second_argument_type;  \n    typedef bool result_type;  \n    typedef Microsoft::VisualC::StlClr::BinaryDelegate<  \n        first_argument_type, second_argument_type, result_type>  \n        delegate_type;  \n  \n    greater_equal();  \n    greater_equal(greater_equal<Arg>% right);  \n  \n    result_type operator()(first_argument_type left,  \n        second_argument_type right);  \n    operator delegate_type^();  \n    };  \n```  \n  \n#### Parameters  \n Arg  \n The type of the arguments.  \n  \n## Member Functions  \n  \n|Type Definition|Description|  \n|---------------------|-----------------|  \n|delegate_type|The type of the generic delegate.|  \n|first_argument_type|The type of the functor first argument.|  \n|result_type|The type of the functor result.|  \n|second_argument_type|The type of the functor second argument.|  \n  \n|Member|Description|  \n|------------|-----------------|  \n|greater_equal|Constructs the functor.|  \n  \n|Operator|Description|  \n|--------------|-----------------|  \n|operator()|Computes the desired function.|  \n|operator delegate_type^|Casts the functor to a delegate.|  \n  \n## Remarks  \n The template class describes a two-argument functor. It defines the member operator `operator()` so that, when the object is called as a function, it returns true only if the first argument is greater than or equal to the second.  \n  \n You can also pass the object as a function argument whose type is `delegate_type^` and it will be converted appropriately.  \n  \n## Example  \n  \n```  \n// cliext_greater_equal.cpp   \n// compile with: /clr   \n#include <cliext/algorithm>   \n#include <cliext/functional>   \n#include <cliext/vector>   \n  \ntypedef cliext::vector<int> Myvector;   \nint main()   \n    {   \n    Myvector c1;   \n    c1.push_back(4);   \n    c1.push_back(3);   \n    Myvector c2;   \n    c2.push_back(4);   \n    c2.push_back(4);   \n    Myvector c3(2, 0);   \n  \n// display initial contents \" 4 3\" and \" 4 4\"   \n    for each (int elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n    for each (int elem in c2)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// transform and display   \n    cliext::transform(c1.begin(), c1.begin() + 2,   \n        c2.begin(), c3.begin(), cliext::greater_equal<int>());   \n    for each (int elem in c3)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n4 3  \n4 4  \n1 0  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/functional>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [less (STL/CLR)](../dotnet/less-stl-clr.md)"}