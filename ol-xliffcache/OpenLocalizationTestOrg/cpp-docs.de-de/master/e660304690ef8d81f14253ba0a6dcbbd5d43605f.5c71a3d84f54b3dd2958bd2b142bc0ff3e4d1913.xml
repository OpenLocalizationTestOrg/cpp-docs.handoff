{"nodes":[{"pos":[12,57],"content":"Objects Own Resources (RAII) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Objects Own Resources (RAII) | Microsoft Docs","pos":[0,45]}]},{"content":"Objects Own Resources (RAII)","pos":[537,565]},{"content":"Make sure that objects own resources.","pos":[566,603]},{"content":"This principle is also known as “resource acquisition is initialization” or “RAII.”","pos":[604,687]},{"content":"Example","pos":[696,703]},{"content":"Pass every “new” object as a constructor argument to another named object that owns it (almost always unique_ptr).","pos":[707,821]},{"content":"Always immediately pass any new resource to another object that owns it.","pos":[1097,1169]},{"content":"See Also","pos":[1379,1387]},{"content":"Welcome Back to C++","pos":[1392,1411]},{"content":"C++ Language Reference","pos":[1460,1482]},{"content":"C++ Standard Library","pos":[1523,1543]}],"content":"---\ntitle: \"Objects Own Resources (RAII) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: f86b484e-5a27-4c3b-a92a-dfaa5dd6d93a\ncaps.latest.revision: 4\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Objects Own Resources (RAII)\nMake sure that objects own resources. This principle is also known as “resource acquisition is initialization” or “RAII.”  \n  \n## Example  \n Pass every “new” object as a constructor argument to another named object that owns it (almost always unique_ptr).  \n  \n```cpp  \nvoid f() {  \n  unique_ptr<widget> p( new widget(…) );  \n  my_class x( new widget() );  \n  …  \n} // automatic destruction and deallocation for both widget objects  \n  // automatic exception safety, as if “finally { p->dispose(); x.w.dispose(); }”  \n  \n```  \n  \n Always immediately pass any new resource to another object that owns it.  \n  \n```cpp  \nvoid g() {  \n  other_class y( OpenFile() );  \n  …  \n} // automatic closing and release for file resource  \n  // automatic exception safety, as if “finally { y.file.dispose(); }”  \n  \n```  \n  \n## See Also  \n [Welcome Back to C++](../cpp/welcome-back-to-cpp-modern-cpp.md)   \n [C++ Language Reference](../cpp/cpp-language-reference.md)   \n [C++ Standard Library](../standard-library/cpp-standard-library-reference.md)"}