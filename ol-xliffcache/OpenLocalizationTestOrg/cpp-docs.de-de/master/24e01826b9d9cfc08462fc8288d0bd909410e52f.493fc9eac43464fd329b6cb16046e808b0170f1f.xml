{"nodes":[{"pos":[12,35],"content":"setbuf | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"setbuf | Microsoft Docs","pos":[0,23]}]},{"pos":[924,930],"content":"setbuf","linkify":"setbuf","nodes":[{"content":"setbuf","pos":[0,6]}]},{"content":"Controls stream buffering.","pos":[931,957]},{"content":"This function is deprecated; use <bpt id=\"p1\">[</bpt>setvbuf<ept id=\"p1\">](../../c-runtime-library/reference/setvbuf.md)</ept> instead.","pos":[958,1055],"source":" This function is deprecated; use [setvbuf](../../c-runtime-library/reference/setvbuf.md) instead."},{"pos":[1064,1070],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1154,1164],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to <ph id=\"ph1\">`FILE`</ph> structure.","pos":[1180,1208],"source":" Pointer to `FILE` structure."},{"content":"User-allocated buffer.","pos":[1227,1249]},{"pos":[1258,1265],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`setbuf`</ph> function controls buffering for <ph id=\"ph2\">`stream`</ph>.","pos":[1269,1323],"source":"The `setbuf` function controls buffering for `stream`."},{"content":"The <ph id=\"ph1\">`stream`</ph> argument must refer to an open file that has not been read or written.","pos":[1324,1407],"source":" The `stream` argument must refer to an open file that has not been read or written."},{"content":"If the <ph id=\"ph1\">`buffer`</ph> argument is <ph id=\"ph2\">`NULL`</ph>, the stream is un-buffered.","pos":[1408,1470],"source":" If the `buffer` argument is `NULL`, the stream is un-buffered."},{"content":"If not, the buffer must point to a character array of length <ph id=\"ph1\">`BUFSIZ`</ph>, where <ph id=\"ph2\">`BUFSIZ`</ph> is the buffer size as defined in STDIO.H.","pos":[1471,1598],"source":" If not, the buffer must point to a character array of length `BUFSIZ`, where `BUFSIZ` is the buffer size as defined in STDIO.H."},{"content":"The user-specified buffer, instead of the default system-allocated buffer for the given stream, is used for I/O buffering.","pos":[1599,1721]},{"content":"The <ph id=\"ph1\">`stderr`</ph> stream is un-buffered by default, but you can use <ph id=\"ph2\">`setbuf`</ph> to assign buffers to <ph id=\"ph3\">`stderr`</ph>.","pos":[1722,1824],"source":" The `stderr` stream is un-buffered by default, but you can use `setbuf` to assign buffers to `stderr`."},{"content":"<ph id=\"ph1\">`setbuf`</ph> has been replaced by <bpt id=\"p1\">[</bpt>setvbuf<ept id=\"p1\">](../../c-runtime-library/reference/setvbuf.md)</ept>, which is the preferred routine for new code.","pos":[1831,1962],"source":"`setbuf` has been replaced by [setvbuf](../../c-runtime-library/reference/setvbuf.md), which is the preferred routine for new code."},{"content":"<ph id=\"ph1\">`setbuf`</ph> is retained for compatibility with existing code.","pos":[1963,2021],"source":"`setbuf` is retained for compatibility with existing code."},{"pos":[2030,2042],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[2049,2056]},{"content":"Required header","pos":[2057,2072]},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt;","pos":[2126,2136],"source":"\\<stdio.h>"},{"pos":[2144,2268],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[2277,2284],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3260,3285],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[3289,3304]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[3305,3352],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[3353,3478],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[3487,3495],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Stream I/O<ept id=\"p1\">](../../c-runtime-library/stream-i-o.md)</ept><ph id=\"ph1\"> </ph>","pos":[3499,3551],"source":"[Stream I/O](../../c-runtime-library/stream-i-o.md) "},{"content":"<bpt id=\"p1\"> [</bpt>fclose, _fcloseall<ept id=\"p1\">](../../c-runtime-library/reference/fclose-fcloseall.md)</ept><ph id=\"ph1\"> </ph>","pos":[3554,3631],"source":" [fclose, _fcloseall](../../c-runtime-library/reference/fclose-fcloseall.md) "},{"content":"<bpt id=\"p1\"> [</bpt>fflush<ept id=\"p1\">](../../c-runtime-library/reference/fflush.md)</ept><ph id=\"ph1\"> </ph>","pos":[3634,3689],"source":" [fflush](../../c-runtime-library/reference/fflush.md) "},{"content":"<bpt id=\"p1\"> [</bpt>fopen, _wfopen<ept id=\"p1\">](../../c-runtime-library/reference/fopen-wfopen.md)</ept><ph id=\"ph1\"> </ph>","pos":[3692,3761],"source":" [fopen, _wfopen](../../c-runtime-library/reference/fopen-wfopen.md) "},{"content":"<bpt id=\"p1\"> [</bpt>setvbuf<ept id=\"p1\">](../../c-runtime-library/reference/setvbuf.md)</ept>","pos":[3764,3820],"source":" [setvbuf](../../c-runtime-library/reference/setvbuf.md)"}],"content":"---\ntitle: \"setbuf | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"setbuf\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-stdio-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"setbuf\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"setbuf function\"\n  - \"stream buffering\"\nms.assetid: 13beda22-7b56-455d-8a6c-f2eb636885b9\ncaps.latest.revision: 16\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# setbuf\nControls stream buffering. This function is deprecated; use [setvbuf](../../c-runtime-library/reference/setvbuf.md) instead.  \n  \n## Syntax  \n  \n```  \nvoid setbuf(  \n   FILE *stream,  \n   char *buffer   \n);  \n```  \n  \n#### Parameters  \n `stream`  \n Pointer to `FILE` structure.  \n  \n `buffer`  \n User-allocated buffer.  \n  \n## Remarks  \n The `setbuf` function controls buffering for `stream`. The `stream` argument must refer to an open file that has not been read or written. If the `buffer` argument is `NULL`, the stream is un-buffered. If not, the buffer must point to a character array of length `BUFSIZ`, where `BUFSIZ` is the buffer size as defined in STDIO.H. The user-specified buffer, instead of the default system-allocated buffer for the given stream, is used for I/O buffering. The `stderr` stream is un-buffered by default, but you can use `setbuf` to assign buffers to `stderr`.  \n  \n `setbuf` has been replaced by [setvbuf](../../c-runtime-library/reference/setvbuf.md), which is the preferred routine for new code. `setbuf` is retained for compatibility with existing code.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`setbuf`|\\<stdio.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_setbuf.c  \n// compile with: /W3  \n// This program first opens files named DATA1 and  \n// DATA2. Then it uses setbuf to give DATA1 a user-assigned  \n// buffer and to change DATA2 so that it has no buffer.  \n  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   char buf[BUFSIZ];  \n   FILE *stream1, *stream2;  \n  \n   fopen_s( &stream1, \"data1\", \"a\" );  \n   fopen_s( &stream2, \"data2\", \"w\" );  \n  \n   if( (stream1 != NULL) && (stream2 != NULL) )  \n   {  \n      // \"stream1\" uses user-assigned buffer:  \n      setbuf( stream1, buf ); // C4996  \n      // Note: setbuf is deprecated; consider using setvbuf instead  \n      printf( \"stream1 set to user-defined buffer at: %Fp\\n\", buf );  \n  \n      // \"stream2\" is unbuffered  \n      setbuf( stream2, NULL ); // C4996  \n      printf( \"stream2 buffering disabled\\n\" );  \n      _fcloseall();  \n   }  \n}  \n```  \n  \n```Output  \nstream1 set to user-defined buffer at: 0012FCDC  \nstream2 buffering disabled  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [fclose, _fcloseall](../../c-runtime-library/reference/fclose-fcloseall.md)   \n [fflush](../../c-runtime-library/reference/fflush.md)   \n [fopen, _wfopen](../../c-runtime-library/reference/fopen-wfopen.md)   \n [setvbuf](../../c-runtime-library/reference/setvbuf.md)"}