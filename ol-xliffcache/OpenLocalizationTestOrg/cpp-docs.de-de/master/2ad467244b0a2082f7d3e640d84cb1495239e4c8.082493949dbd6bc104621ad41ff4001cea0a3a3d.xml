{"nodes":[{"pos":[12,37],"content":"oinline | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"oinline | Microsoft Docs","pos":[0,24]}]},{"content":"noinline","pos":[673,681]},{"content":"Microsoft Specific","pos":[685,703]},{"pos":[707,818],"content":"<bpt id=\"p1\">**</bpt>__declspec(noinline)<ept id=\"p1\">**</ept> tells the compiler to never inline a particular member function (function in a class).","source":"**__declspec(noinline)** tells the compiler to never inline a particular member function (function in a class)."},{"content":"It may be worthwhile to not inline a function if it is small and not critical to the performance of your code.","pos":[825,935]},{"content":"That is, if the function is small and not likely to be called often, such as a function that handles an error condition.","pos":[936,1056]},{"pos":[1063,1205],"content":"Keep in mind that if a function is marked <ph id=\"ph1\">`noinline`</ph>, the calling function will be smaller and thus, itself a candidate for compiler inlining.","source":"Keep in mind that if a function is marked `noinline`, the calling function will be smaller and thus, itself a candidate for compiler inlining."},{"content":"END Microsoft Specific","pos":[1335,1357]},{"content":"See Also","pos":[1366,1374]},{"content":"__declspec","pos":[1379,1389]},{"content":"Keywords","pos":[1416,1424]},{"content":"inline, __inline, <ph id=\"ph1\">\\_</ph>_forceinline","pos":[1455,1487],"source":"inline, __inline, \\__forceinline"}],"content":"---\ntitle: \"noinline | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"noinline\"\n  - \"noinline_cpp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"noinline __declspec keyword\"\n  - \"__declspec keyword [C++], noinline\"\nms.assetid: f259d55b-dec7-4bde-8cf9-14521e4fdc42\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# noinline\n## Microsoft Specific  \n **__declspec(noinline)** tells the compiler to never inline a particular member function (function in a class).  \n  \n It may be worthwhile to not inline a function if it is small and not critical to the performance of your code. That is, if the function is small and not likely to be called often, such as a function that handles an error condition.  \n  \n Keep in mind that if a function is marked `noinline`, the calling function will be smaller and thus, itself a candidate for compiler inlining.  \n  \n```  \nclass X {  \n   __declspec(noinline) int mbrfunc() {  \n      return 0;   \n   }   // will not inline  \n};  \n```  \n  \n## END Microsoft Specific  \n  \n## See Also  \n [__declspec](../cpp/declspec.md)   \n [Keywords](../cpp/keywords-cpp.md)   \n [inline, __inline, \\__forceinline](inline-functions-cpp.md)\n\n"}