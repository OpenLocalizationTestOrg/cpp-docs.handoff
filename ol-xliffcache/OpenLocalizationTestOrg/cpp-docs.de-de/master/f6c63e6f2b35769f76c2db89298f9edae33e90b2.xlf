<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f6c63e6f2b35769f76c2db89298f9edae33e90b2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\exec-wexec-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a92e07e7d32841bb91e81ff58dea86d57cfecfca</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bef50ce2ef098acd1095ba20a91fa6bd9d6c0ace</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_exec, _wexec Functions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_exec, _wexec Functions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Each function in this family loads and executes a new process:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>_execl, _wexecl</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>_execv, _wexecv</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>_execle, _wexecle</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>_execve, _wexecve</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>_execlp, _wexeclp</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>_execvp, _wexecvp</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>_execlpe, _wexeclpe</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>_execvpe, _wexecvpe</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The letter at the end of the function name determines the variation.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>_exec function suffix</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>, array of pointers to environment settings, is passed to the new process.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Command-line arguments are passed individually to <ph id="ph1">`_exec`</ph> function.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Typically used when the number of parameters to the new process is known in advance.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>environment variable is used to find the file to execute.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>, array of pointers to command-line arguments, is passed to <ph id="ph1">`_exec`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Typically used when the number of parameters to the new process is variable.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`_exec`</ph> function loads and executes a new process.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>All <ph id="ph1">`_exec`</ph> functions use the same operating-system function (<bpt id="p1">[</bpt>CreateProcess<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms682425.aspx)</ept>).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_exec`</ph> functions automatically handle multibyte-character string arguments as appropriate, recognizing multibyte-character sequences according to the multibyte code page currently in use.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_wexec`</ph> functions are wide-character versions of the <ph id="ph2">`_exec`</ph> functions.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_wexec`</ph> functions behave identically to their <ph id="ph2">`_exec`</ph> family counterparts except that they do not handle multibyte-character strings.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Generic-Text Routine Mappings</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Tchar.h routine</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>_UNICODE and _MBCS not defined</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>_MBCS defined</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>_UNICODE defined</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`cmdname`</ph> parameter specifies the file to be executed as the new process.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>It can specify a full path (from the root), a partial path (from the current working directory), or a file name.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`cmdname`</ph> does not have a file name extension or does not end with a period (.), the <ph id="ph2">`_exec`</ph> function searches for the named file.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If the search is unsuccessful, it tries the same base name with the .com file name extension and then with the .exe, .bat, and .cmd file name extensions.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`cmdname`</ph> has a file name extension, only that extension is used in the search.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`cmdname`</ph> ends with a period, the <ph id="ph2">`_exec`</ph> function searches for <ph id="ph3">`cmdname`</ph> with no file name extension.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`_execlpe`</ph>, <ph id="ph2">`_execvp`</ph>, and <ph id="ph3">`_execvpe`</ph> search for <ph id="ph4">`cmdname`</ph> (using the same procedures) in the directories specified by the <ph id="ph5">`PATH`</ph> environment variable.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`cmdname`</ph> contains a drive specifier or any slashes (that is, if it is a relative path), the <ph id="ph2">`_exec`</ph> call searches only for the specified file; the path is not searched.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Parameters are passed to the new process by giving one or more pointers to character strings as parameters in the <ph id="ph1">`_exec`</ph> call.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>These character strings form the parameter list for the new process.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The combined length of the inherited environment settings and the strings forming the parameter list for the new process must not exceed 32 kilobytes.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The terminating null character ('\0') for each string is not included in the count, but space characters (inserted automatically to separate the parameters) are counted.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Spaces embedded in strings may cause unexpected behavior; for example, passing <ph id="ph1">`_exec`</ph> the string <ph id="ph2">`"hi there"`</ph> will result in the new process getting two arguments, <ph id="ph3">`"hi"`</ph> and <ph id="ph4">`"there"`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If the intent was to have the new process open a file named "hi there", the process would fail.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You can avoid this by quoting the string: <ph id="ph1">`"\"hi there\""`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Do not pass user input to <ph id="ph1">`_exec`</ph> without explicitly checking its content.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>will result in a call to <bpt id="p1">[</bpt>CreateProcess<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms682425.aspx)</ept> so keep in mind that unqualified path names could lead to potential security vulnerabilities.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_exec`</ph> functions validate their parameters.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If expected parameters are null pointers, empty strings, or omitted, the <ph id="ph1">`_exec`</ph> functions invoke the invalid parameter handler as described in <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../c-runtime-library/parameter-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If execution is allowed to continue, these functions set <ph id="ph1">`errno`</ph> to <ph id="ph2">`EINVAL`</ph> and return -1.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>No new process is executed.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The argument pointers can be passed as separate parameters (in <ph id="ph1">`_execl`</ph>, <ph id="ph2">`_execle`</ph>, <ph id="ph3">`_execlp`</ph>, and <ph id="ph4">`_execlpe`</ph>) or as an array of pointers (in <ph id="ph5">`_execv`</ph>, <ph id="ph6">`_execve`</ph>, <ph id="ph7">`_execvp`</ph>, and <ph id="ph8">`_execvpe`</ph>).</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>At least one parameter, <ph id="ph1">`arg0`</ph>, must be passed to the new process; this parameter is <ph id="ph2">`argv`</ph>[0] of the new process.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Usually, this parameter is a copy of <ph id="ph1">`cmdname`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>(A different value does not produce an error.)</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_execl`</ph>, <ph id="ph2">`_execle`</ph>, <ph id="ph3">`_execlp`</ph>, and <ph id="ph4">`_execlpe`</ph> calls are typically used when the number of parameters is known in advance.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The parameter <ph id="ph1">`arg0`</ph> is usually a pointer to <ph id="ph2">`cmdname`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The parameters <ph id="ph1">`arg1`</ph> through <ph id="ph2">`argn`</ph> point to the character strings forming the new parameter list.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A null pointer must follow <ph id="ph1">`argn`</ph> to mark the end of the parameter list.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_execv`</ph>, <ph id="ph2">`_execve`</ph>, <ph id="ph3">`_execvp`</ph>, and <ph id="ph4">`_execvpe`</ph> calls are useful when the number of parameters to the new process is variable.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Pointers to the parameters are passed as an array, <ph id="ph1">`argv`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The parameter <ph id="ph1">`argv`</ph>[0] is usually a pointer to <ph id="ph2">`cmdname`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The parameters <ph id="ph1">`argv`</ph>[1] through <ph id="ph2">`argv`</ph>[<ph id="ph3">`n`</ph>] point to the character strings forming the new parameter list.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The parameter <ph id="ph1">`argv`</ph>[<ph id="ph2">`n`</ph>+1] must be a <ph id="ph3">`NULL`</ph> pointer to mark the end of the parameter list.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Files that are open when an <ph id="ph1">`_exec`</ph> call is made remain open in the new process.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">`_execl`</ph>, <ph id="ph2">`_execlp`</ph>, <ph id="ph3">`_execv`</ph>, and <ph id="ph4">`_execvp`</ph> calls, the new process inherits the environment of the calling process.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`_execlpe`</ph>, <ph id="ph2">`_execve`</ph>, and <ph id="ph3">`_execvpe`</ph> calls alter the environment for the new process by passing a list of environment settings through the <ph id="ph4">`envp`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>is an array of character pointers, each element of which (except for the final element) points to a null-terminated string defining an environment variable.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Such a string usually has the form <ph id="ph1">`NAME`=`value`</ph> where <ph id="ph2">`NAME`</ph> is the name of an environment variable and <ph id="ph3">`value`</ph> is the string value to which that variable is set.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>(Note that <ph id="ph1">`value`</ph> is not enclosed in double quotation marks.) The final element of the <ph id="ph2">`envp`</ph> array should be <ph id="ph3">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`envp`</ph> itself is <ph id="ph2">`NULL`</ph>, the new process inherits the environment settings of the calling process.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A program executed with one of the <ph id="ph1">`_exec`</ph> functions is always loaded into memory as if the maximum allocation field in the program's .exe file header were set to the default value of 0xFFFFH.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_exec`</ph> calls do not preserve the translation modes of open files.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>If the new process must use files inherited from the calling process, use the <bpt id="p1">[</bpt>_setmode<ept id="p1">](../c-runtime-library/reference/setmode.md)</ept> routine to set the translation mode of these files to the desired mode.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>You must explicitly flush (using <ph id="ph1">`fflush`</ph> or <ph id="ph2">`_flushall`</ph>) or close any stream before the <ph id="ph3">`_exec`</ph> function call.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Signal settings are not preserved in new processes that are created by calls to <ph id="ph1">`_exec`</ph> routines.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The signal settings are reset to the default in the new process.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Run the following program to execute Crt_args.exe:</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>System::Diagnostics::Process Class</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>System::Diagnostics::ProcessStartInfo Class</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> process.h</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Process and Environment Control</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>abort</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>atexit</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>exit, _Exit, _exit</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>_onexit, _onexit_m</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>_spawn, _wspawn Functions</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>system, _wsystem</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>