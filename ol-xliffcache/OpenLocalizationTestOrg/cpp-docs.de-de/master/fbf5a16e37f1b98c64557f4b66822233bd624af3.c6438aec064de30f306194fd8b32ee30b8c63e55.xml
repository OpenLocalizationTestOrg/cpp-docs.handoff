{"nodes":[{"pos":[12,96],"content":"How to: Declare Value Types with the interior_ptr Keyword (C++-CLI) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Declare Value Types with the interior_ptr Keyword (C++-CLI) | Microsoft Docs","pos":[0,84]}]},{"content":"How to: Declare Value Types with the interior_ptr Keyword (C++/CLI)","pos":[658,725]},{"pos":[726,774],"content":"An <ph id=\"ph1\">`interior_ptr`</ph> can be used with a value type.","source":"An `interior_ptr` can be used with a value type."},{"pos":[782,905],"content":"[!IMPORTANT]\n This language feature is supported by the **/clr** compiler option, but not by the **/ZW** compiler option.","leadings":["","> "],"nodes":[{"content":"This language feature is supported by the <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept> compiler option, but not by the <bpt id=\"p2\">**</bpt>/ZW<ept id=\"p2\">**</ept> compiler option.","pos":[14,121],"source":" This language feature is supported by the **/clr** compiler option, but not by the **/ZW** compiler option."}]},{"content":"Example","pos":[914,921]},{"content":"Description","pos":[931,942]},{"pos":[946,1081],"content":"The following <ph id=\"ph1\">[!INCLUDE[cppcli](../build/reference/includes/cppcli_md.md)]</ph> sample shows how to use an <ph id=\"ph2\">`interior_ptr`</ph> with a value type.","source":"The following [!INCLUDE[cppcli](../build/reference/includes/cppcli_md.md)] sample shows how to use an `interior_ptr` with a value type."},{"content":"Code","pos":[1091,1095]},{"content":"Output","pos":[1702,1708]},{"content":"Example","pos":[1756,1763]},{"content":"Description","pos":[1773,1784]},{"pos":[1788,1853],"content":"In a value type, the <ph id=\"ph1\">`this`</ph> pointer evaluates to an interior_ptr.","source":"In a value type, the `this` pointer evaluates to an interior_ptr."},{"pos":[1860,2049],"content":"In the body of a non-static member-function of a value type <ph id=\"ph1\">`V`</ph>, <ph id=\"ph2\">`this`</ph> is an expression of type <ph id=\"ph3\">`interior_ptr&lt;V&gt;`</ph> whose value is the address of the object for which the function is called.","source":"In the body of a non-static member-function of a value type `V`, `this` is an expression of type `interior_ptr<V>` whose value is the address of the object for which the function is called."},{"content":"Code","pos":[2059,2063]},{"content":"Example","pos":[2286,2293]},{"content":"Description","pos":[2303,2314]},{"content":"The following sample shows how to use the address-of operator with static members.","pos":[2318,2400]},{"content":"The address of a static Visual C++ type member yields a native pointer.","pos":[2407,2478]},{"content":"The address of a static value type member is a managed pointer because value type member is allocated on the runtime heap and can be moved by the garbage collector.","pos":[2480,2644]},{"content":"Code","pos":[2654,2658]},{"content":"Output","pos":[3137,3143]},{"content":"See Also","pos":[3185,3193]},{"content":"interior_ptr (C++/CLI)","pos":[3198,3220]}],"content":"---\ntitle: \"How to: Declare Value Types with the interior_ptr Keyword (C++-CLI) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"_ptr keyword\"\n  - \"value types, declaring\"\nms.assetid: 49eea66e-eeba-49bd-95b0-ba297be436e3\ncaps.latest.revision: 13\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Declare Value Types with the interior_ptr Keyword (C++/CLI)\nAn `interior_ptr` can be used with a value type.  \n  \n> [!IMPORTANT]\n>  This language feature is supported by the **/clr** compiler option, but not by the **/ZW** compiler option.  \n  \n## Example  \n  \n### Description  \n The following [!INCLUDE[cppcli](../build/reference/includes/cppcli_md.md)] sample shows how to use an `interior_ptr` with a value type.  \n  \n### Code  \n  \n```  \n// interior_ptr_value_types.cpp  \n// compile with: /clr  \nvalue struct V {  \n   V(int i) : data(i){}  \n   int data;  \n};  \n  \nint main() {  \n   V v(1);  \n   System::Console::WriteLine(v.data);  \n  \n   // pointing to a value type  \n   interior_ptr<V> pv = &v;  \n   pv->data = 2;  \n  \n   System::Console::WriteLine(v.data);  \n   System::Console::WriteLine(pv->data);  \n  \n   // pointing into a value type  \n   interior_ptr<int> pi = &v.data;  \n   *pi = 3;  \n   System::Console::WriteLine(*pi);  \n   System::Console::WriteLine(v.data);  \n   System::Console::WriteLine(pv->data);  \n}  \n```  \n  \n### Output  \n  \n```  \n1  \n2  \n2  \n3  \n3  \n3  \n```  \n  \n## Example  \n  \n### Description  \n In a value type, the `this` pointer evaluates to an interior_ptr.  \n  \n In the body of a non-static member-function of a value type `V`, `this` is an expression of type `interior_ptr<V>` whose value is the address of the object for which the function is called.  \n  \n### Code  \n  \n```  \n// interior_ptr_value_types_this.cpp  \n// compile with: /clr /LD  \nvalue struct V {  \n   int data;  \n   void f() {  \n      interior_ptr<V> pv1 = this;  \n      // V* pv2 = this;   error  \n   }  \n};  \n```  \n  \n## Example  \n  \n### Description  \n The following sample shows how to use the address-of operator with static members.  \n  \n The address of a static Visual C++ type member yields a native pointer.  The address of a static value type member is a managed pointer because value type member is allocated on the runtime heap and can be moved by the garbage collector.  \n  \n### Code  \n  \n```  \n// interior_ptr_value_static.cpp  \n// compile with: /clr  \nusing namespace System;  \nvalue struct V { int i; };  \n  \nref struct G {  \n   static V v = {22};   \n   static int i = 23;   \n   static String^ pS = \"hello\";   \n};  \n  \nint main() {  \n   interior_ptr<int> p1 = &G::v.i;  \n   Console::WriteLine(*p1);  \n  \n   interior_ptr<int> p2 = &G::i;  \n   Console::WriteLine(*p2);  \n  \n   interior_ptr<String^> p3 = &G::pS;  \n   Console::WriteLine(*p3);  \n}  \n```  \n  \n### Output  \n  \n```  \n22  \n23  \nhello  \n```  \n  \n## See Also  \n [interior_ptr (C++/CLI)](../windows/interior-ptr-cpp-cli.md)"}