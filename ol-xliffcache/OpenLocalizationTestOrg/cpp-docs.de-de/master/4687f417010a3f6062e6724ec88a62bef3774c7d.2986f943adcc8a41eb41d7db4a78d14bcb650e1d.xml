{"nodes":[{"pos":[12,37],"content":"_fpreset | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_fpreset | Microsoft Docs","pos":[0,25]}]},{"content":"_fpreset","pos":[1001,1009]},{"content":"Resets the floating-point package.","pos":[1010,1044]},{"content":"Syntax","pos":[1053,1059]},{"content":"Remarks","pos":[1108,1115]},{"content":"The <ph id=\"ph1\">`_fpreset`</ph> function reinitializes the floating-point math package.","pos":[1119,1189],"source":"The `_fpreset` function reinitializes the floating-point math package."},{"content":"is usually used with <ph id=\"ph1\">`signal`</ph>, <ph id=\"ph2\">`system`</ph>, or the <ph id=\"ph3\">`_exec`</ph> or <ph id=\"ph4\">`_spawn`</ph> functions.","pos":[1201,1279],"source":" is usually used with `signal`, `system`, or the `_exec` or `_spawn` functions."},{"content":"If a program traps floating-point error signals (<ph id=\"ph1\">`SIGFPE`</ph>) with <ph id=\"ph2\">`signal`</ph>, it can safely recover from floating-point errors by invoking <ph id=\"ph3\">`_fpreset`</ph> and using <ph id=\"ph4\">`longjmp`</ph>.","pos":[1280,1446],"source":" If a program traps floating-point error signals (`SIGFPE`) with `signal`, it can safely recover from floating-point errors by invoking `_fpreset` and using `longjmp`."},{"pos":[1453,1714],"content":"This function is deprecated when compiling with <bpt id=\"p1\">[</bpt>/clr (Common Language Runtime Compilation)<ept id=\"p1\">](../../build/reference/clr-common-language-runtime-compilation.md)</ept> or <ph id=\"ph1\">`/clr:pure`</ph> because the common language runtime only supports the default floating-point precision.","source":"This function is deprecated when compiling with [/clr (Common Language Runtime Compilation)](../../build/reference/clr-common-language-runtime-compilation.md) or `/clr:pure` because the common language runtime only supports the default floating-point precision."},{"content":"Requirements","pos":[1723,1735]},{"content":"Function","pos":[1742,1750]},{"content":"Required header","pos":[1751,1766]},{"content":"float.h&gt;","pos":[1825,1833],"source":"float.h>"},{"pos":[1841,1959],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[1968,1975]},{"content":"See Also","pos":[5319,5327]},{"content":"Floating-Point Support","pos":[5332,5354]},{"content":"_exec, _wexec Functions","pos":[5412,5435]},{"content":"signal","pos":[5491,5497]},{"content":"_spawn, _wspawn Functions","pos":[5549,5574]},{"content":"system, _wsystem","pos":[5632,5648]}],"content":"---\ntitle: \"_fpreset | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_fpreset\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-runtime-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_fpreset\"\n  - \"fpreset\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"fpreset function\"\n  - \"floating-point numbers, resetting math package\"\n  - \"_fpreset function\"\nms.assetid: f31c6a04-b464-4f07-a7c4-42133360e328\ncaps.latest.revision: 16\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _fpreset\nResets the floating-point package.  \n  \n## Syntax  \n  \n```  \nvoid _fpreset( void );  \n```  \n  \n## Remarks  \n The `_fpreset` function reinitializes the floating-point math package. `_fpreset` is usually used with `signal`, `system`, or the `_exec` or `_spawn` functions. If a program traps floating-point error signals (`SIGFPE`) with `signal`, it can safely recover from floating-point errors by invoking `_fpreset` and using `longjmp`.  \n  \n This function is deprecated when compiling with [/clr (Common Language Runtime Compilation)](../../build/reference/clr-common-language-runtime-compilation.md) or `/clr:pure` because the common language runtime only supports the default floating-point precision.  \n  \n## Requirements  \n  \n|Function|Required header|  \n|--------------|---------------------|  \n|`_fpreset`|\\<float.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_fpreset.c  \n// This program uses signal to set up a  \n// routine for handling floating-point errors.  \n  \n#include <stdio.h>  \n#include <signal.h>  \n#include <setjmp.h>  \n#include <stdlib.h>  \n#include <float.h>  \n#include <math.h>  \n#include <string.h>  \n  \njmp_buf mark;              // Address for long jump to jump to  \nint     fperr;             // Global error number  \n  \nvoid __cdecl fphandler( int sig, int num );   // Prototypes  \nvoid fpcheck( void );  \n  \nint main( void )  \n{  \n   double n1 = 5.0;  \n   double n2 = 0.0;  \n   double r;  \n   int jmpret;  \n  \n   // Unmask all floating-point exceptions.   \n    _control87( 0, _MCW_EM );  \n   // Set up floating-point error handler. The compiler  \n   // will generate a warning because it expects  \n   // signal-handling functions to take only one argument.  \n   if( signal( SIGFPE, (void (__cdecl *)(int)) fphandler ) == SIG_ERR )  \n    {  \n       fprintf( stderr, \"Couldn't set SIGFPE\\n\" );  \n       abort();  \n    }  \n  \n   // Save stack environment for return in case of error. First   \n   // time through, jmpret is 0, so true conditional is executed.   \n   // If an error occurs, jmpret will be set to -1 and false   \n   // conditional will be executed.  \n   jmpret = setjmp( mark );  \n   if( jmpret == 0 )  \n   {  \n      printf( \"Dividing %4.3g by %4.3g...\\n\", n1, n2 );  \n      r = n1 / n2;  \n      // This won't be reached if error occurs.  \n      printf( \"\\n\\n%4.3g / %4.3g = %4.3g\\n\", n1, n2, r );  \n  \n      r = n1 * n2;  \n      // This won't be reached if error occurs.  \n      printf( \"\\n\\n%4.3g * %4.3g = %4.3g\\n\", n1, n2, r );  \n   }  \n   else  \n      fpcheck();  \n}  \n// fphandler handles SIGFPE (floating-point error) interrupt. Note  \n// that this prototype accepts two arguments and that the   \n// prototype for signal in the run-time library expects a signal   \n// handler to have only one argument.  \n//  \n// The second argument in this signal handler allows processing of  \n// _FPE_INVALID, _FPE_OVERFLOW, _FPE_UNDERFLOW, and   \n// _FPE_ZERODIVIDE, all of which are Microsoft-specific symbols   \n// that augment the information provided by SIGFPE. The compiler   \n// will generate a warning, which is harmless and expected.  \n  \nvoid fphandler( int sig, int num )  \n{  \n   // Set global for outside check since we don't want  \n   // to do I/O in the handler.  \n   fperr = num;  \n  \n   // Initialize floating-point package. */  \n   _fpreset();  \n  \n   // Restore calling environment and jump back to setjmp. Return   \n   // -1 so that setjmp will return false for conditional test.  \n   longjmp( mark, -1 );  \n}  \n  \nvoid fpcheck( void )  \n{  \n   char fpstr[30];  \n   switch( fperr )  \n   {  \n   case _FPE_INVALID:  \n       strcpy_s( fpstr, sizeof(fpstr), \"Invalid number\" );  \n       break;  \n   case _FPE_OVERFLOW:  \n       strcpy_s( fpstr, sizeof(fpstr), \"Overflow\" );  \n  \n       break;  \n   case _FPE_UNDERFLOW:  \n       strcpy_s( fpstr, sizeof(fpstr), \"Underflow\" );  \n       break;  \n   case _FPE_ZERODIVIDE:  \n       strcpy_s( fpstr, sizeof(fpstr), \"Divide by zero\" );  \n       break;  \n   default:  \n       strcpy_s( fpstr, sizeof(fpstr), \"Other floating point error\" );  \n       break;  \n   }  \n   printf( \"Error %d: %s\\n\", fperr, fpstr );  \n}  \n```  \n  \n```Output  \nDividing    5 by    0...  \nError 131: Divide by zero  \n```  \n  \n## See Also  \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [_exec, _wexec Functions](../../c-runtime-library/exec-wexec-functions.md)   \n [signal](../../c-runtime-library/reference/signal.md)   \n [_spawn, _wspawn Functions](../../c-runtime-library/spawn-wspawn-functions.md)   \n [system, _wsystem](../../c-runtime-library/reference/system-wsystem.md)"}