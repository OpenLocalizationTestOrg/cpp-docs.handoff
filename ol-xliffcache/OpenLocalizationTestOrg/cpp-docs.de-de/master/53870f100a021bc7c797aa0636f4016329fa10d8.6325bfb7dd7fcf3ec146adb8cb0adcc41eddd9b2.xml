{"nodes":[{"pos":[12,49],"content":"_memicmp, _memicmp_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_memicmp, _memicmp_l | Microsoft Docs","pos":[0,37]}]},{"pos":[1046,1066],"content":"_memicmp, _memicmp_l","linkify":"_memicmp, _memicmp_l","nodes":[{"content":"_memicmp, _memicmp_l","pos":[0,20]}]},{"content":"Compares characters in two buffers (case-insensitive).","pos":[1067,1121]},{"pos":[1130,1136],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1358,1368],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"First buffer.","pos":[1382,1395]},{"content":"Second buffer.","pos":[1412,1426]},{"content":"Number of characters.","pos":[1444,1465]},{"content":"Locale to use.","pos":[1484,1498]},{"pos":[1507,1519],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The return value indicates the relationship between the buffers.","pos":[1523,1587]},{"content":"Return value","pos":[1594,1606]},{"content":"Relationship of first count bytes of buf1 and buf2","pos":[1607,1657]},{"content":"&lt; 0","pos":[1742,1745],"source":"< 0"},{"pos":[1746,1770],"content":"<ph id=\"ph1\">`buf1`</ph> less than <ph id=\"ph2\">`buf2`</ph>.","source":"`buf1` less than `buf2`."},{"content":"0","pos":[1775,1776]},{"pos":[1777,1804],"content":"<ph id=\"ph1\">`buf1`</ph> identical to <ph id=\"ph2\">`buf2`</ph>.","source":"`buf1` identical to `buf2`."},{"content":"&gt; 0","pos":[1809,1812],"source":"> 0"},{"pos":[1813,1840],"content":"<ph id=\"ph1\">`buf1`</ph> greater than <ph id=\"ph2\">`buf2`</ph>.","source":"`buf1` greater than `buf2`."},{"content":"An error occurred.","pos":[1860,1878]},{"pos":[1888,1895],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_memicmp`</ph> function compares the first <ph id=\"ph2\">`count`</ph> characters of the two buffers <ph id=\"ph3\">`buf1`</ph> and <ph id=\"ph4\">`buf2`</ph> byte by byte.","pos":[1899,2011],"source":"The `_memicmp` function compares the first `count` characters of the two buffers `buf1` and `buf2` byte by byte."},{"content":"The comparison is not case-sensitive.","pos":[2012,2049]},{"content":"If either <ph id=\"ph1\">`buf1`</ph> or <ph id=\"ph2\">`buf2`</ph> is a null pointer, this function invokes an invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2056,2242],"source":"If either `buf1` or `buf2` is a null pointer, this function invokes an invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, the function returns <ph id=\"ph1\">`_NLSCMPERROR`</ph> and sets <ph id=\"ph2\">`errno`</ph> to <ph id=\"ph3\">`EINVAL`</ph>.","pos":[2243,2345],"source":" If execution is allowed to continue, the function returns `_NLSCMPERROR` and sets `errno` to `EINVAL`."},{"content":"<ph id=\"ph1\">`_memicmp`</ph> uses the current locale for locale-dependent behavior; <ph id=\"ph2\">`_memicmp_l`</ph> is identical except that it uses the locale passed in instead.","pos":[2352,2493],"source":"`_memicmp` uses the current locale for locale-dependent behavior; `_memicmp_l` is identical except that it uses the locale passed in instead."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Locale<ept id=\"p1\">](../../c-runtime-library/locale.md)</ept>.","pos":[2494,2564],"source":" For more information, see [Locale](../../c-runtime-library/locale.md)."},{"pos":[2573,2585],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[2592,2599]},{"content":"Required header","pos":[2600,2615]},{"content":"<ph id=\"ph1\">\\&lt;</ph>memory.h&gt; or <ph id=\"ph2\">\\&lt;</ph>string.h&gt;","pos":[2671,2697],"source":"\\<memory.h> or \\<string.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>memory.h&gt; or <ph id=\"ph2\">\\&lt;</ph>string.h&gt;","pos":[2715,2741],"source":"\\<memory.h> or \\<string.h>"},{"pos":[2749,2867],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[2876,2883],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3844,3869],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[3873,3888]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[3889,3936],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[3937,4062],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[4071,4079],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Buffer Manipulation<ept id=\"p1\">](../../c-runtime-library/buffer-manipulation.md)</ept><ph id=\"ph1\"> </ph>","pos":[4083,4153],"source":"[Buffer Manipulation](../../c-runtime-library/buffer-manipulation.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_memccpy<ept id=\"p1\">](../../c-runtime-library/reference/memccpy.md)</ept><ph id=\"ph1\"> </ph>","pos":[4156,4214],"source":" [_memccpy](../../c-runtime-library/reference/memccpy.md) "},{"content":"<bpt id=\"p1\"> [</bpt>memchr, wmemchr<ept id=\"p1\">](../../c-runtime-library/reference/memchr-wmemchr.md)</ept><ph id=\"ph1\"> </ph>","pos":[4217,4289],"source":" [memchr, wmemchr](../../c-runtime-library/reference/memchr-wmemchr.md) "},{"content":"<bpt id=\"p1\"> [</bpt>memcmp, wmemcmp<ept id=\"p1\">](../../c-runtime-library/reference/memcmp-wmemcmp.md)</ept><ph id=\"ph1\"> </ph>","pos":[4292,4364],"source":" [memcmp, wmemcmp](../../c-runtime-library/reference/memcmp-wmemcmp.md) "},{"content":"<bpt id=\"p1\"> [</bpt>memcpy, wmemcpy<ept id=\"p1\">](../../c-runtime-library/reference/memcpy-wmemcpy.md)</ept><ph id=\"ph1\"> </ph>","pos":[4367,4439],"source":" [memcpy, wmemcpy](../../c-runtime-library/reference/memcpy-wmemcpy.md) "},{"content":"<bpt id=\"p1\"> [</bpt>memset, wmemset<ept id=\"p1\">](../../c-runtime-library/reference/memset-wmemset.md)</ept><ph id=\"ph1\"> </ph>","pos":[4442,4514],"source":" [memset, wmemset](../../c-runtime-library/reference/memset-wmemset.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_stricmp, _wcsicmp, _mbsicmp, _stricmp_l, _wcsicmp_l, _mbsicmp_l<ept id=\"p1\">](../../c-runtime-library/reference/stricmp-wcsicmp-mbsicmp-stricmp-l-wcsicmp-l-mbsicmp-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[4517,4677],"source":" [_stricmp, _wcsicmp, _mbsicmp, _stricmp_l, _wcsicmp_l, _mbsicmp_l](../../c-runtime-library/reference/stricmp-wcsicmp-mbsicmp-stricmp-l-wcsicmp-l-mbsicmp-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_strnicmp, _wcsnicmp, _mbsnicmp, _strnicmp_l, _wcsnicmp_l, _mbsnicmp_l<ept id=\"p1\">](../../c-runtime-library/reference/strnicmp-wcsnicmp-mbsnicmp-strnicmp-l-wcsnicmp-l-mbsnicmp-l.md)</ept>","pos":[4680,4851],"source":" [_strnicmp, _wcsnicmp, _mbsnicmp, _strnicmp_l, _wcsnicmp_l, _mbsnicmp_l](../../c-runtime-library/reference/strnicmp-wcsnicmp-mbsnicmp-strnicmp-l-wcsnicmp-l-mbsnicmp-l.md)"}],"content":"---\ntitle: \"_memicmp, _memicmp_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_memicmp_l\"\n  - \"_memicmp\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-string-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_memicmp\"\n  - \"memicmp_l\"\n  - \"_memicmp_l\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"memicmp function\"\n  - \"_memicmp function\"\n  - \"memicmp_l function\"\n  - \"_memicmp_l function\"\nms.assetid: 0a6eb945-4077-4f84-935d-1aaebe8db8cb\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _memicmp, _memicmp_l\nCompares characters in two buffers (case-insensitive).  \n  \n## Syntax  \n  \n```  \nint _memicmp(  \n   const void *buf1,  \n   const void *buf2,  \n   size_t count   \n);  \nint _memicmp_l(  \n   const void *buf1,  \n   const void *buf2,  \n   size_t count,  \n   _locale_t locale  \n);  \n```  \n  \n#### Parameters  \n `buf1`  \n First buffer.  \n  \n `buf2`  \n Second buffer.  \n  \n `count`  \n Number of characters.  \n  \n `locale`  \n Locale to use.  \n  \n## Return Value  \n The return value indicates the relationship between the buffers.  \n  \n|Return value|Relationship of first count bytes of buf1 and buf2|  \n|------------------|--------------------------------------------------------|  \n|< 0|`buf1` less than `buf2`.|  \n|0|`buf1` identical to `buf2`.|  \n|> 0|`buf1` greater than `buf2`.|  \n|`_NLSCMPERROR`|An error occurred.|  \n  \n## Remarks  \n The `_memicmp` function compares the first `count` characters of the two buffers `buf1` and `buf2` byte by byte. The comparison is not case-sensitive.  \n  \n If either `buf1` or `buf2` is a null pointer, this function invokes an invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, the function returns `_NLSCMPERROR` and sets `errno` to `EINVAL`.  \n  \n `_memicmp` uses the current locale for locale-dependent behavior; `_memicmp_l` is identical except that it uses the locale passed in instead. For more information, see [Locale](../../c-runtime-library/locale.md).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_memicmp`|\\<memory.h> or \\<string.h>|  \n|`_memicmp_l`|\\<memory.h> or \\<string.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_memicmp.c  \n// This program uses _memicmp to compare  \n// the first 29 letters of the strings named first and  \n// second without regard to the case of the letters.  \n  \n#include <memory.h>  \n#include <stdio.h>  \n#include <string.h>  \n  \nint main( void )  \n{  \n   int result;  \n   char first[] = \"Those Who Will Not Learn from History\";  \n   char second[] = \"THOSE WHO WILL NOT LEARN FROM their mistakes\";  \n   // Note that the 29th character is right here ^  \n  \n   printf( \"Compare '%.29s' to '%.29s'\\n\", first, second );  \n   result = _memicmp( first, second, 29 );  \n   if( result < 0 )  \n      printf( \"First is less than second.\\n\" );  \n   else if( result == 0 )  \n      printf( \"First is equal to second.\\n\" );  \n   else if( result > 0 )  \n      printf( \"First is greater than second.\\n\" );  \n}  \n```  \n  \n```Output  \nCompare 'Those Who Will Not Learn from' to 'THOSE WHO WILL NOT LEARN FROM'  \nFirst is equal to second.  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Buffer Manipulation](../../c-runtime-library/buffer-manipulation.md)   \n [_memccpy](../../c-runtime-library/reference/memccpy.md)   \n [memchr, wmemchr](../../c-runtime-library/reference/memchr-wmemchr.md)   \n [memcmp, wmemcmp](../../c-runtime-library/reference/memcmp-wmemcmp.md)   \n [memcpy, wmemcpy](../../c-runtime-library/reference/memcpy-wmemcpy.md)   \n [memset, wmemset](../../c-runtime-library/reference/memset-wmemset.md)   \n [_stricmp, _wcsicmp, _mbsicmp, _stricmp_l, _wcsicmp_l, _mbsicmp_l](../../c-runtime-library/reference/stricmp-wcsicmp-mbsicmp-stricmp-l-wcsicmp-l-mbsicmp-l.md)   \n [_strnicmp, _wcsnicmp, _mbsnicmp, _strnicmp_l, _wcsnicmp_l, _mbsnicmp_l](../../c-runtime-library/reference/strnicmp-wcsnicmp-mbsnicmp-strnicmp-l-wcsnicmp-l-mbsnicmp-l.md)"}