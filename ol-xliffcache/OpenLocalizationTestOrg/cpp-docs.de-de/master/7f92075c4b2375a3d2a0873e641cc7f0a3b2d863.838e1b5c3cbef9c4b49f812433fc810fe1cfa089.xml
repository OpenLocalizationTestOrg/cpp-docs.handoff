{"nodes":[{"pos":[12,47],"content":"CMapWordToOb Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMapWordToOb Class | Microsoft Docs","pos":[0,35]}]},{"content":"CMapWordToOb Class","pos":[636,654]},{"pos":[655,713],"content":"Supports maps of <ph id=\"ph1\">`CObject`</ph> pointers keyed by 16-bit words.","source":"Supports maps of `CObject` pointers keyed by 16-bit words."},{"content":"Syntax","pos":[722,728]},{"content":"Members","pos":[790,797]},{"content":"The member functions of <ph id=\"ph1\">`CMapWordToOb`</ph> are similar to the member functions of class <bpt id=\"p1\">[</bpt>CMapStringToOb<ept id=\"p1\">](../../mfc/reference/cmapstringtoob-class.md)</ept>.","pos":[801,947],"source":"The member functions of `CMapWordToOb` are similar to the member functions of class [CMapStringToOb](../../mfc/reference/cmapstringtoob-class.md)."},{"content":"Because of this similarity, you can use the <ph id=\"ph1\">`CMapStringToOb`</ph> reference documentation for member function specifics.","pos":[948,1063],"source":" Because of this similarity, you can use the `CMapStringToOb` reference documentation for member function specifics."},{"content":"Wherever you see a <ph id=\"ph1\">`CString`</ph> or a <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> pointer to <ph id=\"ph2\">`char`</ph> as a function parameter or return value, substitute <bpt id=\"p2\">**</bpt>WORD<ept id=\"p2\">**</ept>.","pos":[1064,1187],"source":" Wherever you see a `CString` or a **const** pointer to `char` as a function parameter or return value, substitute **WORD**."},{"content":"for example, translates to","pos":[1286,1312]},{"content":"Public Constructors","pos":[1397,1416]},{"content":"Name","pos":[1423,1427]},{"content":"Description","pos":[1428,1439]},{"content":"CMapStringToOb::CMapStringToOb","pos":[1478,1508]},{"content":"Constructor.","pos":[1586,1598]},{"content":"Public Methods","pos":[1609,1623]},{"content":"Name","pos":[1630,1634]},{"content":"Description","pos":[1635,1646]},{"content":"CMapStringToOb::GetCount","pos":[1685,1709]},{"content":"Returns the number of elements in this map.","pos":[1781,1824]},{"content":"CMapStringToOb::GetHashTableSize","pos":[1830,1862]},{"content":"Determines the current number of elements in the hash table.","pos":[1942,2002]},{"content":"CMapStringToOb::GetNextAssoc","pos":[2008,2036]},{"content":"Gets the next element for iterating.","pos":[2112,2148]},{"content":"CMapStringToOb::GetSize","pos":[2154,2177]},{"content":"Returns the number of elements in this map.","pos":[2248,2291]},{"content":"CMapStringToOb::GetStartPosition","pos":[2297,2329]},{"content":"Returns the position of the first element.","pos":[2409,2451]},{"content":"CMapStringToOb::HashKey","pos":[2457,2480]},{"content":"Calculates the hash value of a specified key.","pos":[2551,2596]},{"content":"CMapStringToOb::InitHashTable","pos":[2602,2631]},{"content":"Initializes the hash table.","pos":[2708,2735]},{"content":"CMapStringToOb::IsEmpty","pos":[2741,2764]},{"content":"Tests for the empty-map condition (no elements).","pos":[2835,2883]},{"content":"CMapStringToOb::Lookup","pos":[2889,2911]},{"content":"Looks up a void pointer based on the void pointer key.","pos":[2981,3035]},{"content":"The pointer value, not the entity it points to, is used for the key comparison.","pos":[3036,3115]},{"content":"CMapStringToOb::LookupKey","pos":[3121,3146]},{"content":"Returns a reference to the key associated with the specified key value.","pos":[3219,3290]},{"content":"CMapStringToOb::RemoveAll","pos":[3296,3321]},{"content":"Removes all the elements from this map.","pos":[3394,3433]},{"content":"CMapStringToOb::RemoveKey","pos":[3439,3464]},{"content":"Removes an element specified by a key.","pos":[3537,3575]},{"content":"CMapStringToOb::SetAt","pos":[3581,3602]},{"content":"Inserts an element into the map; replaces an existing element if a matching key is found.","pos":[3671,3760]},{"content":"Public Operators","pos":[3771,3787]},{"content":"Name","pos":[3794,3798]},{"content":"Description","pos":[3799,3810]},{"content":"CMapStringToOb::operator [ ]","pos":[3849,3877]},{"pos":[3952,4020],"content":"Inserts an element into the map — operator substitution for <ph id=\"ph1\">`SetAt`</ph>.","source":"Inserts an element into the map — operator substitution for `SetAt`."},{"content":"Remarks","pos":[4030,4037]},{"content":"incorporates the <ph id=\"ph1\">`IMPLEMENT_SERIAL`</ph> macro to support serialization and dumping of its elements.","pos":[4056,4151],"source":" incorporates the `IMPLEMENT_SERIAL` macro to support serialization and dumping of its elements."},{"content":"Each element is serialized in turn if a map is stored to an archive, either with the overloaded insertion ( <bpt id=\"p1\">**</bpt><ph id=\"ph1\">&lt;&lt;</ph><ept id=\"p1\">**</ept>) operator or with the <ph id=\"ph2\">`Serialize`</ph> member function.","pos":[4152,4317],"source":" Each element is serialized in turn if a map is stored to an archive, either with the overloaded insertion ( **<<**) operator or with the `Serialize` member function."},{"pos":[4324,4446],"content":"If you need a dump of individual <bpt id=\"p1\">**</bpt>WORD<ept id=\"p1\">**</ept><ph id=\"ph1\">- `CObject`</ph> elements, you must set the depth of the dump context to 1 or greater.","source":"If you need a dump of individual **WORD**- `CObject` elements, you must set the depth of the dump context to 1 or greater."},{"content":"When a <ph id=\"ph1\">`CMapWordToOb`</ph> object is deleted, or when its elements are removed, the <ph id=\"ph2\">`CObject`</ph> pointers are removed.","pos":[4453,4563],"source":"When a `CMapWordToOb` object is deleted, or when its elements are removed, the `CObject` pointers are removed."},{"content":"The objects referenced by the <ph id=\"ph1\">`CObject`</ph> pointers are not destroyed.","pos":[4564,4631],"source":" The objects referenced by the `CObject` pointers are not destroyed."},{"pos":[4638,4734],"content":"For more information on <ph id=\"ph1\">`CMapWordToOb`</ph>, see the article <bpt id=\"p1\">[</bpt>Collections<ept id=\"p1\">](../../mfc/collections.md)</ept>.","source":"For more information on `CMapWordToOb`, see the article [Collections](../../mfc/collections.md)."},{"content":"Inheritance Hierarchy","pos":[4743,4764]},{"content":"CObject","pos":[4769,4776]},{"content":"Requirements","pos":[4845,4857]},{"pos":[4861,4882],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxcoll.h","source":"**Header:** afxcoll.h"},{"content":"See Also","pos":[4891,4899]},{"content":"CObject Class","pos":[4904,4917]},{"content":"Hierarchy Chart","pos":[4962,4977]}],"content":"---\ntitle: \"CMapWordToOb Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CMapWordToOb\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"16-bit word mapping\"\n  - \"CMapWordToOb class\"\nms.assetid: 9c9bcd76-456f-4cf9-b03c-dd28b49d5e4f\ncaps.latest.revision: 23\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMapWordToOb Class\nSupports maps of `CObject` pointers keyed by 16-bit words.  \n  \n## Syntax  \n  \n```  \nclass CMapWordToOb : public CObject  \n```  \n  \n## Members  \n The member functions of `CMapWordToOb` are similar to the member functions of class [CMapStringToOb](../../mfc/reference/cmapstringtoob-class.md). Because of this similarity, you can use the `CMapStringToOb` reference documentation for member function specifics. Wherever you see a `CString` or a **const** pointer to `char` as a function parameter or return value, substitute **WORD**.  \n  \n `BOOL CMapStringToOb::Lookup( const char* <key>,`  \n  \n `CObject*& <rValue> ) const;`  \n  \n for example, translates to  \n  \n `BOOL CMapWordToOb::Lookup( WORD <key>, CObject*& <rValue> ) const;`  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMapStringToOb::CMapStringToOb](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__cmapstringtoob)|Constructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMapStringToOb::GetCount](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__getcount)|Returns the number of elements in this map.|  \n|[CMapStringToOb::GetHashTableSize](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__gethashtablesize)|Determines the current number of elements in the hash table.|  \n|[CMapStringToOb::GetNextAssoc](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__getnextassoc)|Gets the next element for iterating.|  \n|[CMapStringToOb::GetSize](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__getsize)|Returns the number of elements in this map.|  \n|[CMapStringToOb::GetStartPosition](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__getstartposition)|Returns the position of the first element.|  \n|[CMapStringToOb::HashKey](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__hashkey)|Calculates the hash value of a specified key.|  \n|[CMapStringToOb::InitHashTable](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__inithashtable)|Initializes the hash table.|  \n|[CMapStringToOb::IsEmpty](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__isempty)|Tests for the empty-map condition (no elements).|  \n|[CMapStringToOb::Lookup](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__lookup)|Looks up a void pointer based on the void pointer key. The pointer value, not the entity it points to, is used for the key comparison.|  \n|[CMapStringToOb::LookupKey](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__lookupkey)|Returns a reference to the key associated with the specified key value.|  \n|[CMapStringToOb::RemoveAll](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__removeall)|Removes all the elements from this map.|  \n|[CMapStringToOb::RemoveKey](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__removekey)|Removes an element specified by a key.|  \n|[CMapStringToOb::SetAt](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__setat)|Inserts an element into the map; replaces an existing element if a matching key is found.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMapStringToOb::operator [ ]](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__operator_at)|Inserts an element into the map — operator substitution for `SetAt`.|  \n  \n## Remarks  \n `CMapWordToOb` incorporates the `IMPLEMENT_SERIAL` macro to support serialization and dumping of its elements. Each element is serialized in turn if a map is stored to an archive, either with the overloaded insertion ( **<<**) operator or with the `Serialize` member function.  \n  \n If you need a dump of individual **WORD**- `CObject` elements, you must set the depth of the dump context to 1 or greater.  \n  \n When a `CMapWordToOb` object is deleted, or when its elements are removed, the `CObject` pointers are removed. The objects referenced by the `CObject` pointers are not destroyed.  \n  \n For more information on `CMapWordToOb`, see the article [Collections](../../mfc/collections.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n `CMapWordToOb`  \n  \n## Requirements  \n **Header:** afxcoll.h  \n  \n## See Also  \n [CObject Class](../../mfc/reference/cobject-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)\n\n\n\n"}