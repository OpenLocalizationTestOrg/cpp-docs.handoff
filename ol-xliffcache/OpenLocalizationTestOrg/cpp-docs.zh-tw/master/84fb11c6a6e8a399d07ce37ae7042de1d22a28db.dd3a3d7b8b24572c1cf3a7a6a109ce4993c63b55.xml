{"nodes":[{"pos":[12,61],"content":"task Class (Concurrency Runtime) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"task Class (Concurrency Runtime) | Microsoft Docs","pos":[0,49]}]},{"content":"task Class (Concurrency Runtime)","pos":[628,660]},{"content":"The Parallel Patterns Library (PPL) <ph id=\"ph1\">`task`</ph> class.","pos":[661,710],"source":"The Parallel Patterns Library (PPL) `task` class."},{"content":"A <ph id=\"ph1\">`task`</ph> object represents work that can be executed asynchronously, and concurrently with other tasks and parallel work produced by parallel algorithms in the Concurrency Runtime.","pos":[711,891],"source":" A `task` object represents work that can be executed asynchronously, and concurrently with other tasks and parallel work produced by parallel algorithms in the Concurrency Runtime."},{"content":"It produces a result of type <ph id=\"ph1\">`_ResultType`</ph> on successful completion.","pos":[892,960],"source":" It produces a result of type `_ResultType` on successful completion."},{"content":"Tasks of type <ph id=\"ph1\">`task&lt;void&gt;`</ph> produce no result.","pos":[961,1006],"source":" Tasks of type `task<void>` produce no result."},{"content":"A task can be waited upon and canceled independently of other tasks.","pos":[1007,1075]},{"content":"It can also be composed with other tasks using continuations( <ph id=\"ph1\">`then`</ph>), and join( <ph id=\"ph2\">`when_all`</ph>) and choice( <ph id=\"ph3\">`when_any`</ph>) patterns.","pos":[1076,1202],"source":" It can also be composed with other tasks using continuations( `then`), and join( `when_all`) and choice( `when_any`) patterns."},{"content":"Syntax","pos":[1211,1217]},{"content":"Parameters","pos":[1350,1360]},{"content":"The result type of this task.","pos":[1395,1424]},{"content":"Members","pos":[1433,1440]},{"content":"Public Typedefs","pos":[1450,1465]},{"content":"Name","pos":[1472,1476]},{"content":"Description","pos":[1477,1488]},{"content":"The type of the result an object of this class produces.","pos":[1540,1596]},{"content":"Public Constructors","pos":[1607,1626]},{"content":"Name","pos":[1633,1637]},{"content":"Description","pos":[1638,1649]},{"content":"task::task Constructor","pos":[1688,1710]},{"content":"Overloaded.","pos":[1719,1730]},{"content":"Constructs a <ph id=\"ph1\">`task`</ph> object.","pos":[1731,1758],"source":" Constructs a `task` object."},{"content":"Public Methods","pos":[1769,1783]},{"content":"Name","pos":[1790,1794]},{"content":"Description","pos":[1795,1806]},{"content":"task::get Method","pos":[1845,1861]},{"content":"Overloaded.","pos":[1869,1880]},{"content":"Returns the result this task produced.","pos":[1881,1919]},{"content":"If the task is not in a terminal state, a call to <ph id=\"ph1\">`get`</ph> will wait for the task to finish.","pos":[1920,2009],"source":" If the task is not in a terminal state, a call to `get` will wait for the task to finish."},{"content":"This method does not return a value when called on a task with a <ph id=\"ph1\">`result_type`</ph> of <ph id=\"ph2\">`void`</ph>.","pos":[2010,2099],"source":" This method does not return a value when called on a task with a `result_type` of `void`."},{"content":"task::is_apartment_aware Method","pos":[2105,2136]},{"pos":[2159,2269],"content":"Determines whether the task unwraps a Windows Runtime <ph id=\"ph1\">`IAsyncInfo`</ph> interface or is descended from such a task.","source":"Determines whether the task unwraps a Windows Runtime `IAsyncInfo` interface or is descended from such a task."},{"content":"task::is_done Method (Concurrency Runtime)","pos":[2275,2317]},{"content":"Determines if the task is completed.","pos":[2329,2365]},{"content":"task::scheduler Method (Concurrency Runtime)","pos":[2371,2415]},{"content":"Returns the scheduler for this task","pos":[2429,2464]},{"content":"task::then Method","pos":[2470,2487]},{"content":"Overloaded.","pos":[2496,2507]},{"content":"Adds a continuation task to this task.","pos":[2508,2546]},{"content":"task::wait Method","pos":[2552,2569]},{"content":"Waits for this task to reach a terminal state.","pos":[2578,2624]},{"content":"It is possible for <ph id=\"ph1\">`wait`</ph> to execute the task inline, if all of the tasks dependencies are satisfied, and it has not already been picked up for execution by a background worker.","pos":[2625,2802],"source":" It is possible for `wait` to execute the task inline, if all of the tasks dependencies are satisfied, and it has not already been picked up for execution by a background worker."},{"content":"Public Operators","pos":[2813,2829]},{"content":"Name","pos":[2836,2840]},{"content":"Description","pos":[2841,2852]},{"content":"task::operator!= Operator","pos":[2891,2916]},{"content":"Overloaded.","pos":[2933,2944]},{"content":"Determines whether two <ph id=\"ph1\">`task`</ph> objects represent different internal tasks.","pos":[2945,3018],"source":" Determines whether two `task` objects represent different internal tasks."},{"content":"task::operator= Operator","pos":[3024,3048]},{"content":"Overloaded.","pos":[3064,3075]},{"content":"Replaces the contents of one <ph id=\"ph1\">`task`</ph> object with another.","pos":[3076,3132],"source":" Replaces the contents of one `task` object with another."},{"content":"task::operator== Operator","pos":[3138,3163]},{"content":"Overloaded.","pos":[3182,3193]},{"content":"Determines whether two <ph id=\"ph1\">`task`</ph> objects represent the same internal task.","pos":[3194,3265],"source":" Determines whether two `task` objects represent the same internal task."},{"content":"Remarks","pos":[3275,3282]},{"pos":[3286,3397],"content":"For more information, see <bpt id=\"p1\">[</bpt>Task Parallelism<ept id=\"p1\">](../../../parallel/concrt/task-parallelism-concurrency-runtime.md)</ept>.","source":"For more information, see [Task Parallelism](../../../parallel/concrt/task-parallelism-concurrency-runtime.md)."},{"content":"Inheritance Hierarchy","pos":[3406,3427]},{"content":"Requirements","pos":[3446,3458]},{"pos":[3462,3484],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> ppltasks.h","source":"**Header:** ppltasks.h"},{"pos":[3491,3517],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[3547,3563],"content":"task::get Method"},{"content":"Returns the result this task produced.","pos":[3567,3605]},{"content":"If the task is not in a terminal state, a call to <ph id=\"ph1\">`get`</ph> will wait for the task to finish.","pos":[3606,3695],"source":" If the task is not in a terminal state, a call to `get` will wait for the task to finish."},{"content":"This method does not return a value when called on a task with a <ph id=\"ph1\">`result_type`</ph> of <ph id=\"ph2\">`void`</ph>.","pos":[3696,3785],"source":" This method does not return a value when called on a task with a `result_type` of `void`."},{"content":"Return Value","pos":[3852,3864]},{"content":"The result of the task.","pos":[3868,3891]},{"content":"Remarks","pos":[3901,3908]},{"content":"If the task is canceled, a call to <ph id=\"ph1\">`get`</ph> will throw a <bpt id=\"p1\">[</bpt>task_canceled<ept id=\"p1\">](task-canceled-class.md)</ept> exception.","pos":[3912,4016],"source":"If the task is canceled, a call to `get` will throw a [task_canceled](task-canceled-class.md) exception."},{"content":"If the task encountered an different exception or an exception was propagated to it from an antecedent task, a call to <ph id=\"ph1\">`get`</ph> will throw that exception.","pos":[4017,4168],"source":" If the task encountered an different exception or an exception was propagated to it from an antecedent task, a call to `get` will throw that exception."},{"pos":[4176,4728],"content":"[!IMPORTANT]\n In a [!INCLUDE[win8_appname_long](../../../build/includes/win8_appname_long_md.md)] app, do not call [concurrency::task::wait](#wait) or `get` ( `wait` calls `get`) in code that runs on the STA. Otherwise, the runtime throws [concurrency::invalid_operation](invalid-operation-class.md) because these methods block the current thread and can cause the app to become unresponsive. However, you can call the `get` method to receive the result of the antecedent task in a task-based continuation because the result is immediately available.","leadings":["","> "],"nodes":[{"content":" In a [!INCLUDE[win8_appname_long](../../../build/includes/win8_appname_long_md.md)] app, do not call [concurrency::task::wait](#wait) or `get` ( `wait` calls `get`) in code that runs on the STA. Otherwise, the runtime throws [concurrency::invalid_operation](invalid-operation-class.md) because these methods block the current thread and can cause the app to become unresponsive. However, you can call the `get` method to receive the result of the antecedent task in a task-based continuation because the result is immediately available.","pos":[13,550],"nodes":[{"content":"In a <ph id=\"ph1\">[!INCLUDE[win8_appname_long](../../../build/includes/win8_appname_long_md.md)]</ph> app, do not call <bpt id=\"p1\">[</bpt>concurrency::task::wait<ept id=\"p1\">](#wait)</ept> or <ph id=\"ph2\">`get`</ph> ( <ph id=\"ph3\">`wait`</ph> calls <ph id=\"ph4\">`get`</ph>) in code that runs on the STA.","pos":[1,195],"source":" In a [!INCLUDE[win8_appname_long](../../../build/includes/win8_appname_long_md.md)] app, do not call [concurrency::task::wait](#wait) or `get` ( `wait` calls `get`) in code that runs on the STA."},{"content":"Otherwise, the runtime throws <bpt id=\"p1\">[</bpt>concurrency::invalid_operation<ept id=\"p1\">](invalid-operation-class.md)</ept> because these methods block the current thread and can cause the app to become unresponsive.","pos":[196,379],"source":" Otherwise, the runtime throws [concurrency::invalid_operation](invalid-operation-class.md) because these methods block the current thread and can cause the app to become unresponsive."},{"content":"However, you can call the <ph id=\"ph1\">`get`</ph> method to receive the result of the antecedent task in a task-based continuation because the result is immediately available.","pos":[380,537],"source":" However, you can call the `get` method to receive the result of the antecedent task in a task-based continuation because the result is immediately available."}]}]},{"pos":[4773,4804],"content":"task::is_apartment_aware Method"},{"pos":[4808,4918],"content":"Determines whether the task unwraps a Windows Runtime <ph id=\"ph1\">`IAsyncInfo`</ph> interface or is descended from such a task.","source":"Determines whether the task unwraps a Windows Runtime `IAsyncInfo` interface or is descended from such a task."},{"content":"Return Value","pos":[4974,4986]},{"pos":[4997,5095],"content":"if the task unwraps an <ph id=\"ph1\">`IAsyncInfo`</ph> interface or is descended from such a task, <ph id=\"ph2\">`false`</ph> otherwise.","source":" if the task unwraps an `IAsyncInfo` interface or is descended from such a task, `false` otherwise."},{"pos":[5129,5171],"content":"task::is_done Method (Concurrency Runtime)"},{"content":"Determines if the task is completed.","pos":[5175,5211]},{"content":"Return Value","pos":[5256,5268]},{"content":"True if the task has completed, false otherwise.","pos":[5272,5320]},{"content":"Remarks","pos":[5330,5337]},{"content":"The function returns true if the task is completed or canceled (with or without user exception).","pos":[5341,5437]},{"pos":[5476,5501],"content":"task::operator!= Operator"},{"pos":[5505,5578],"content":"Determines whether two <ph id=\"ph1\">`task`</ph> objects represent different internal tasks.","source":"Determines whether two `task` objects represent different internal tasks."},{"content":"Parameters","pos":[5705,5715]},{"content":"Return Value","pos":[5735,5747]},{"pos":[5758,5832],"content":"if the objects refer to different underlying tasks, and <ph id=\"ph1\">`false`</ph> otherwise.","source":" if the objects refer to different underlying tasks, and `false` otherwise."},{"pos":[5870,5894],"content":"task::operator= Operator"},{"pos":[5898,5954],"content":"Replaces the contents of one <ph id=\"ph1\">`task`</ph> object with another.","source":"Replaces the contents of one `task` object with another."},{"content":"Parameters","pos":[6049,6059]},{"content":"The source <ph id=\"ph1\">`task`</ph> object.","pos":[6075,6100],"source":" The source `task` object."},{"content":"Return Value","pos":[6110,6122]},{"content":"Remarks","pos":[6132,6139]},{"pos":[6143,6277],"content":"As <ph id=\"ph1\">`task`</ph> behaves like a smart pointer, after a copy assignment, this <ph id=\"ph2\">`task`</ph> objects represents the same actual task as <ph id=\"ph3\">`_Other`</ph> does.","source":"As `task` behaves like a smart pointer, after a copy assignment, this `task` objects represents the same actual task as `_Other` does."},{"pos":[6318,6343],"content":"task::operator== Operator"},{"pos":[6347,6418],"content":"Determines whether two <ph id=\"ph1\">`task`</ph> objects represent the same internal task.","source":"Determines whether two `task` objects represent the same internal task."},{"content":"Parameters","pos":[6545,6555]},{"content":"Return Value","pos":[6575,6587]},{"pos":[6598,6670],"content":"if the objects refer to the same underlying task, and <ph id=\"ph1\">`false`</ph> otherwise.","source":" if the objects refer to the same underlying task, and `false` otherwise."},{"pos":[6706,6750],"content":"task::scheduler Method (Concurrency Runtime)"},{"content":"Returns the scheduler for this task","pos":[6754,6789]},{"content":"Return Value","pos":[6845,6857]},{"content":"A pointer to the scheduler","pos":[6861,6887]},{"pos":[6918,6940],"content":"task::task Constructor"},{"pos":[6944,6971],"content":"Constructs a <ph id=\"ph1\">`task`</ph> object.","source":"Constructs a `task` object."},{"content":"Parameters","pos":[7241,7251]},{"content":"The type of the parameter from which the task is to be constructed.","pos":[7262,7329]},{"content":"The parameter from which the task is to be constructed.","pos":[7348,7403]},{"content":"This could be a lambda, a function object, a <ph id=\"ph1\">`task_completion_event&lt;result_type&gt;`</ph> object, or a Windows::Foundation::IAsyncInfo if you are using tasks in your Windows Store app.","pos":[7404,7580],"source":" This could be a lambda, a function object, a `task_completion_event<result_type>` object, or a Windows::Foundation::IAsyncInfo if you are using tasks in your Windows Store app."},{"content":"The lambda or function object should be a type equivalent to <ph id=\"ph1\">`std::function&lt;X(void)&gt;`</ph>, where X can be a variable of type <ph id=\"ph2\">`result_type`</ph>, <ph id=\"ph3\">`task&lt;result_type&gt;`</ph>, or a Windows::Foundation::IAsyncInfo in Windows Store apps.","pos":[7581,7797],"source":" The lambda or function object should be a type equivalent to `std::function<X(void)>`, where X can be a variable of type `result_type`, `task<result_type>`, or a Windows::Foundation::IAsyncInfo in Windows Store apps."},{"content":"The task options include cancellation token, scheduler etc","pos":[7822,7880]},{"content":"The source <ph id=\"ph1\">`task`</ph> object.","pos":[7899,7924],"source":" The source `task` object."},{"content":"Remarks","pos":[7934,7941]},{"content":"The default constructor for a <ph id=\"ph1\">`task`</ph> is only present in order to allow tasks to be used within containers.","pos":[7945,8051],"source":"The default constructor for a `task` is only present in order to allow tasks to be used within containers."},{"content":"A default constructed task cannot be used until you assign a valid task to it.","pos":[8052,8130]},{"content":"Methods such as <ph id=\"ph1\">`get`</ph>, <ph id=\"ph2\">`wait`</ph> or <ph id=\"ph3\">`then`</ph> will throw an <bpt id=\"p1\">[</bpt>invalid_argument<ept id=\"p1\">](../../../standard-library/invalid-argument-class.md)</ept> exception when called on a default constructed task.","pos":[8131,8309],"source":" Methods such as `get`, `wait` or `then` will throw an [invalid_argument](../../../standard-library/invalid-argument-class.md) exception when called on a default constructed task."},{"pos":[8316,8461],"content":"A task that is created from a <ph id=\"ph1\">`task_completion_event`</ph> will complete (and have its continuations scheduled) when the task completion event is set.","source":"A task that is created from a `task_completion_event` will complete (and have its continuations scheduled) when the task completion event is set."},{"content":"The version of the constructor that takes a cancellation token creates a task that can be canceled using the <ph id=\"ph1\">`cancellation_token_source`</ph> the token was obtained from.","pos":[8468,8633],"source":"The version of the constructor that takes a cancellation token creates a task that can be canceled using the `cancellation_token_source` the token was obtained from."},{"content":"Tasks created without a cancellation token are not cancelable.","pos":[8634,8696]},{"content":"Tasks created from a <ph id=\"ph1\">`Windows::Foundation::IAsyncInfo`</ph> interface or a lambda that returns an <ph id=\"ph2\">`IAsyncInfo`</ph> interface reach their terminal state when the enclosed Windows Runtime asynchronous operation or action completes.","pos":[8703,8923],"source":"Tasks created from a `Windows::Foundation::IAsyncInfo` interface or a lambda that returns an `IAsyncInfo` interface reach their terminal state when the enclosed Windows Runtime asynchronous operation or action completes."},{"content":"Similarly, tasks created from a lamda that returns a <ph id=\"ph1\">`task&lt;result_type&gt;`</ph> reach their terminal state when the inner task reaches its terminal state, and not when the lamda returns.","pos":[8924,9103],"source":" Similarly, tasks created from a lamda that returns a `task<result_type>` reach their terminal state when the inner task reaches its terminal state, and not when the lamda returns."},{"content":"behaves like a smart pointer and is safe to pass around by value.","pos":[9117,9182]},{"content":"It can be accessed by multiple threads without the need for locks.","pos":[9183,9249]},{"content":"The constructor overloads that take a Windows::Foundation::IAsyncInfo interface or a lambda returning such an interface, are only available to Windows Store apps.","pos":[9256,9418]},{"pos":[9425,9536],"content":"For more information, see <bpt id=\"p1\">[</bpt>Task Parallelism<ept id=\"p1\">](../../../parallel/concrt/task-parallelism-concurrency-runtime.md)</ept>.","source":"For more information, see [Task Parallelism](../../../parallel/concrt/task-parallelism-concurrency-runtime.md)."},{"pos":[9567,9584],"content":"task::then Method"},{"content":"Adds a continuation task to this task.","pos":[9588,9626]},{"content":"Parameters","pos":[10833,10843]},{"content":"The type of the function object that will be invoked by this task.","pos":[10862,10928]},{"content":"The continuation function to execute when this task completes.","pos":[10946,11008]},{"content":"This continuation function must take as input a variable of either <ph id=\"ph1\">`result_type`</ph> or <ph id=\"ph2\">`task&lt;result_type&gt;`</ph>, where <ph id=\"ph3\">`result_type`</ph> is the type of the result this task produces.","pos":[11009,11179],"source":" This continuation function must take as input a variable of either `result_type` or `task<result_type>`, where `result_type` is the type of the result this task produces."},{"content":"The task options include cancellation token, scheduler and continuation context.","pos":[11204,11284]},{"content":"By default the former 3 options are inherited from the antecedent task","pos":[11285,11355]},{"content":"The cancellation token to associate with the continuation task.","pos":[11386,11449]},{"content":"A continuation task that is created without a cancellation token will inherit the token of its antecedent task.","pos":[11450,11561]},{"content":"A variable that specifies where the continuation should execute.","pos":[11594,11658]},{"content":"This variable is only useful when used in a Windows Store style app.","pos":[11659,11727]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>task_continuation_context<ept id=\"p1\">](task-continuation-context-class.md)</ept>","pos":[11728,11817],"source":" For more information, see [task_continuation_context](task-continuation-context-class.md)"},{"content":"Return Value","pos":[11827,11839]},{"content":"The newly created continuation task.","pos":[11843,11879]},{"content":"The result type of the returned task is determined by what <ph id=\"ph1\">`_Func`</ph> returns.","pos":[11880,11955],"source":" The result type of the returned task is determined by what `_Func` returns."},{"content":"Remarks","pos":[11965,11972]},{"pos":[11976,12129],"content":"The overloads of <ph id=\"ph1\">`then`</ph> that take a lambda or functor that returns a Windows::Foundation::IAsyncInfo interface, are only available to Windows Store apps.","source":"The overloads of `then` that take a lambda or functor that returns a Windows::Foundation::IAsyncInfo interface, are only available to Windows Store apps."},{"pos":[12136,12309],"content":"For more information on how to use task continuations to compose asynchronous work, see <bpt id=\"p1\">[</bpt>Task Parallelism<ept id=\"p1\">](../../../parallel/concrt/task-parallelism-concurrency-runtime.md)</ept>.","source":"For more information on how to use task continuations to compose asynchronous work, see [Task Parallelism](../../../parallel/concrt/task-parallelism-concurrency-runtime.md)."},{"pos":[12340,12357],"content":"task::wait Method"},{"content":"Waits for this task to reach a terminal state.","pos":[12361,12407]},{"content":"It is possible for <ph id=\"ph1\">`wait`</ph> to execute the task inline, if all of the tasks dependencies are satisfied, and it has not already been picked up for execution by a background worker.","pos":[12408,12585],"source":" It is possible for `wait` to execute the task inline, if all of the tasks dependencies are satisfied, and it has not already been picked up for execution by a background worker."},{"content":"Return Value","pos":[12634,12646]},{"content":"A <ph id=\"ph1\">`task_status`</ph> value which could be either <ph id=\"ph2\">`completed`</ph> or <ph id=\"ph3\">`canceled`</ph>.","pos":[12650,12720],"source":"A `task_status` value which could be either `completed` or `canceled`."},{"content":"If the task encountered an exception during execution, or an exception was propagated to it from an antecedent task, <ph id=\"ph1\">`wait`</ph> will throw that exception.","pos":[12721,12871],"source":" If the task encountered an exception during execution, or an exception was propagated to it from an antecedent task, `wait` will throw that exception."},{"content":"Remarks","pos":[12881,12888]},{"pos":[12896,13371],"content":"[!IMPORTANT]\n In a [!INCLUDE[win8_appname_long](../../../build/includes/win8_appname_long_md.md)] app, do not call `wait` in code that runs on the STA. Otherwise, the runtime throws [concurrency::invalid_operation](invalid-operation-class.md) because this method blocks the current thread and can cause the app to become unresponsive. However, you can call the [concurrency::task::get](#get) method to receive the result of the antecedent task in a task-based continuation.","leadings":["","> "],"nodes":[{"content":" In a [!INCLUDE[win8_appname_long](../../../build/includes/win8_appname_long_md.md)] app, do not call `wait` in code that runs on the STA. Otherwise, the runtime throws [concurrency::invalid_operation](invalid-operation-class.md) because this method blocks the current thread and can cause the app to become unresponsive. However, you can call the [concurrency::task::get](#get) method to receive the result of the antecedent task in a task-based continuation.","pos":[13,473],"nodes":[{"content":"In a <ph id=\"ph1\">[!INCLUDE[win8_appname_long](../../../build/includes/win8_appname_long_md.md)]</ph> app, do not call <ph id=\"ph2\">`wait`</ph> in code that runs on the STA.","pos":[1,138],"source":" In a [!INCLUDE[win8_appname_long](../../../build/includes/win8_appname_long_md.md)] app, do not call `wait` in code that runs on the STA."},{"content":"Otherwise, the runtime throws <bpt id=\"p1\">[</bpt>concurrency::invalid_operation<ept id=\"p1\">](invalid-operation-class.md)</ept> because this method blocks the current thread and can cause the app to become unresponsive.","pos":[139,321],"source":" Otherwise, the runtime throws [concurrency::invalid_operation](invalid-operation-class.md) because this method blocks the current thread and can cause the app to become unresponsive."},{"content":"However, you can call the <bpt id=\"p1\">[</bpt>concurrency::task::get<ept id=\"p1\">](#get)</ept> method to receive the result of the antecedent task in a task-based continuation.","pos":[322,460],"source":" However, you can call the [concurrency::task::get](#get) method to receive the result of the antecedent task in a task-based continuation."}]}]},{"content":"See Also","pos":[13380,13388]},{"content":"concurrency Namespace","pos":[13393,13414]}],"content":"---\ntitle: \"task Class (Concurrency Runtime) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"ppltasks/concurrency::task\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"task class\"\nms.assetid: cdc3a8c0-5cbe-45a0-b5d5-e9f81d94df1a\ncaps.latest.revision: 12\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# task Class (Concurrency Runtime)\nThe Parallel Patterns Library (PPL) `task` class. A `task` object represents work that can be executed asynchronously, and concurrently with other tasks and parallel work produced by parallel algorithms in the Concurrency Runtime. It produces a result of type `_ResultType` on successful completion. Tasks of type `task<void>` produce no result. A task can be waited upon and canceled independently of other tasks. It can also be composed with other tasks using continuations( `then`), and join( `when_all`) and choice( `when_any`) patterns.  \n  \n## Syntax  \n  \n```\ntemplate <typename T>\nclass task;\n\ntemplate <>\nclass task<void>;\n\ntemplate<typename _ReturnType>\nclass task;\n```  \n  \n#### Parameters  \n `T`  \n `T`  \n `_ReturnType`  \n The result type of this task.  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`result_type`|The type of the result an object of this class produces.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[task::task Constructor](#ctor)|Overloaded. Constructs a `task` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[task::get Method](#get)|Overloaded. Returns the result this task produced. If the task is not in a terminal state, a call to `get` will wait for the task to finish. This method does not return a value when called on a task with a `result_type` of `void`.|  \n|[task::is_apartment_aware Method](#is_apartment_aware)|Determines whether the task unwraps a Windows Runtime `IAsyncInfo` interface or is descended from such a task.|  \n|[task::is_done Method (Concurrency Runtime)](#is_done)|Determines if the task is completed.|  \n|[task::scheduler Method (Concurrency Runtime)](#scheduler)|Returns the scheduler for this task|  \n|[task::then Method](#then)|Overloaded. Adds a continuation task to this task.|  \n|[task::wait Method](#wait)|Waits for this task to reach a terminal state. It is possible for `wait` to execute the task inline, if all of the tasks dependencies are satisfied, and it has not already been picked up for execution by a background worker.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[task::operator!= Operator](#operator_neq)|Overloaded. Determines whether two `task` objects represent different internal tasks.|  \n|[task::operator= Operator](#operator_eq)|Overloaded. Replaces the contents of one `task` object with another.|  \n|[task::operator== Operator](#operator_eq_eq)|Overloaded. Determines whether two `task` objects represent the same internal task.|  \n  \n## Remarks  \n For more information, see [Task Parallelism](../../../parallel/concrt/task-parallelism-concurrency-runtime.md).  \n  \n## Inheritance Hierarchy  \n `task`  \n  \n## Requirements  \n **Header:** ppltasks.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"get\"></a>  task::get Method  \n Returns the result this task produced. If the task is not in a terminal state, a call to `get` will wait for the task to finish. This method does not return a value when called on a task with a `result_type` of `void`.  \n  \n```\n_ReturnType get() const;\n\nvoid get() const;\n```  \n  \n### Return Value  \n The result of the task.  \n  \n### Remarks  \n If the task is canceled, a call to `get` will throw a [task_canceled](task-canceled-class.md) exception. If the task encountered an different exception or an exception was propagated to it from an antecedent task, a call to `get` will throw that exception.  \n  \n> [!IMPORTANT]\n>  In a [!INCLUDE[win8_appname_long](../../../build/includes/win8_appname_long_md.md)] app, do not call [concurrency::task::wait](#wait) or `get` ( `wait` calls `get`) in code that runs on the STA. Otherwise, the runtime throws [concurrency::invalid_operation](invalid-operation-class.md) because these methods block the current thread and can cause the app to become unresponsive. However, you can call the `get` method to receive the result of the antecedent task in a task-based continuation because the result is immediately available.  \n  \n##  <a name=\"is_apartment_aware\"></a>  task::is_apartment_aware Method  \n Determines whether the task unwraps a Windows Runtime `IAsyncInfo` interface or is descended from such a task.  \n  \n```\nbool is_apartment_aware() const;\n```  \n  \n### Return Value  \n `true` if the task unwraps an `IAsyncInfo` interface or is descended from such a task, `false` otherwise.  \n  \n##  <a name=\"is_done\"></a>  task::is_done Method (Concurrency Runtime)  \n Determines if the task is completed.  \n  \n```\nbool is_done() const;\n```  \n  \n### Return Value  \n True if the task has completed, false otherwise.  \n  \n### Remarks  \n The function returns true if the task is completed or canceled (with or without user exception).  \n  \n##  <a name=\"operator_neq\"></a>  task::operator!= Operator  \n Determines whether two `task` objects represent different internal tasks.  \n  \n```\nbool operator!= (const task<_ReturnType>& _Rhs) const;\n\nbool operator!= (const task<void>& _Rhs) const;\n```  \n  \n### Parameters  \n `_Rhs`  \n  \n### Return Value  \n `true` if the objects refer to different underlying tasks, and `false` otherwise.  \n  \n##  <a name=\"operator_eq\"></a>  task::operator= Operator  \n Replaces the contents of one `task` object with another.  \n  \n```\ntask& operator= (const task& _Other);\n\ntask& operator= (task&& _Other);\n```  \n  \n### Parameters  \n `_Other`  \n The source `task` object.  \n  \n### Return Value  \n  \n### Remarks  \n As `task` behaves like a smart pointer, after a copy assignment, this `task` objects represents the same actual task as `_Other` does.  \n  \n##  <a name=\"operator_eq_eq\"></a>  task::operator== Operator  \n Determines whether two `task` objects represent the same internal task.  \n  \n```\nbool operator== (const task<_ReturnType>& _Rhs) const;\n\nbool operator== (const task<void>& _Rhs) const;\n```  \n  \n### Parameters  \n `_Rhs`  \n  \n### Return Value  \n `true` if the objects refer to the same underlying task, and `false` otherwise.  \n  \n##  <a name=\"scheduler\"></a>  task::scheduler Method (Concurrency Runtime)  \n Returns the scheduler for this task  \n  \n```\nscheduler_ptr scheduler() const;\n```  \n  \n### Return Value  \n A pointer to the scheduler  \n  \n##  <a name=\"ctor\"></a>  task::task Constructor  \n Constructs a `task` object.  \n  \n```\ntask();\n\ntemplate<typename T>\n__declspec(\n    noinline) explicit task(T _Param);\n\ntemplate<typename T>\n__declspec(\n    noinline) explicit task(T _Param, const task_options& _TaskOptions);\n\ntask(\n    const task& _Other);\n\ntask(\n    task&& _Other);\n```  \n  \n### Parameters  \n `T`  \n The type of the parameter from which the task is to be constructed.  \n  \n `_Param`  \n The parameter from which the task is to be constructed. This could be a lambda, a function object, a `task_completion_event<result_type>` object, or a Windows::Foundation::IAsyncInfo if you are using tasks in your Windows Store app. The lambda or function object should be a type equivalent to `std::function<X(void)>`, where X can be a variable of type `result_type`, `task<result_type>`, or a Windows::Foundation::IAsyncInfo in Windows Store apps.  \n  \n `_TaskOptions`  \n The task options include cancellation token, scheduler etc  \n  \n `_Other`  \n The source `task` object.  \n  \n### Remarks  \n The default constructor for a `task` is only present in order to allow tasks to be used within containers. A default constructed task cannot be used until you assign a valid task to it. Methods such as `get`, `wait` or `then` will throw an [invalid_argument](../../../standard-library/invalid-argument-class.md) exception when called on a default constructed task.  \n  \n A task that is created from a `task_completion_event` will complete (and have its continuations scheduled) when the task completion event is set.  \n  \n The version of the constructor that takes a cancellation token creates a task that can be canceled using the `cancellation_token_source` the token was obtained from. Tasks created without a cancellation token are not cancelable.  \n  \n Tasks created from a `Windows::Foundation::IAsyncInfo` interface or a lambda that returns an `IAsyncInfo` interface reach their terminal state when the enclosed Windows Runtime asynchronous operation or action completes. Similarly, tasks created from a lamda that returns a `task<result_type>` reach their terminal state when the inner task reaches its terminal state, and not when the lamda returns.  \n  \n `task` behaves like a smart pointer and is safe to pass around by value. It can be accessed by multiple threads without the need for locks.  \n  \n The constructor overloads that take a Windows::Foundation::IAsyncInfo interface or a lambda returning such an interface, are only available to Windows Store apps.  \n  \n For more information, see [Task Parallelism](../../../parallel/concrt/task-parallelism-concurrency-runtime.md).  \n  \n##  <a name=\"then\"></a>  task::then Method  \n Adds a continuation task to this task.  \n  \n```\ntemplate<typename _Function>\n__declspec(\n    noinline) auto then(const _Function& _Func) const -> typename details::_ContinuationTypeTraits<_Function,\n    _ReturnType>::_TaskOfType;\n\ntemplate<typename _Function>\n__declspec(\n    noinline) auto then(const _Function& _Func,\n    const task_options& _TaskOptions) const -> typename details::_ContinuationTypeTraits<_Function,\n    _ReturnType>::_TaskOfType;\n\ntemplate<typename _Function>\n__declspec(\n    noinline) auto then(const _Function& _Func,\n    cancellation_token _CancellationToken,\n    task_continuation_context _ContinuationContext) const -> typename details::_ContinuationTypeTraits<_Function,\n    _ReturnType>::_TaskOfType;\n\ntemplate<typename _Function>\n__declspec(\n    noinline) auto then(const _Function& _Func,\n    const task_options& _TaskOptions = task_options()) const -> typename details::_ContinuationTypeTraits<_Function,\n    void>::_TaskOfType;\n\ntemplate<typename _Function>\n__declspec(\n    noinline) auto then(const _Function& _Func,\n    cancellation_token _CancellationToken,\n    task_continuation_context _ContinuationContext) const -> typename details::_ContinuationTypeTraits<_Function,\n    void>::_TaskOfType;\n```   \n  \n### Parameters  \n `_Function`  \n The type of the function object that will be invoked by this task.  \n  \n `_Func`  \n The continuation function to execute when this task completes. This continuation function must take as input a variable of either `result_type` or `task<result_type>`, where `result_type` is the type of the result this task produces.  \n  \n `_TaskOptions`  \n The task options include cancellation token, scheduler and continuation context. By default the former 3 options are inherited from the antecedent task  \n  \n `_CancellationToken`  \n The cancellation token to associate with the continuation task. A continuation task that is created without a cancellation token will inherit the token of its antecedent task.  \n  \n `_ContinuationContext`  \n A variable that specifies where the continuation should execute. This variable is only useful when used in a Windows Store style app. For more information, see [task_continuation_context](task-continuation-context-class.md)  \n  \n### Return Value  \n The newly created continuation task. The result type of the returned task is determined by what `_Func` returns.  \n  \n### Remarks  \n The overloads of `then` that take a lambda or functor that returns a Windows::Foundation::IAsyncInfo interface, are only available to Windows Store apps.  \n  \n For more information on how to use task continuations to compose asynchronous work, see [Task Parallelism](../../../parallel/concrt/task-parallelism-concurrency-runtime.md).  \n  \n##  <a name=\"wait\"></a>  task::wait Method  \n Waits for this task to reach a terminal state. It is possible for `wait` to execute the task inline, if all of the tasks dependencies are satisfied, and it has not already been picked up for execution by a background worker.  \n  \n```\ntask_status wait() const;\n```  \n  \n### Return Value  \n A `task_status` value which could be either `completed` or `canceled`. If the task encountered an exception during execution, or an exception was propagated to it from an antecedent task, `wait` will throw that exception.  \n  \n### Remarks  \n  \n> [!IMPORTANT]\n>  In a [!INCLUDE[win8_appname_long](../../../build/includes/win8_appname_long_md.md)] app, do not call `wait` in code that runs on the STA. Otherwise, the runtime throws [concurrency::invalid_operation](invalid-operation-class.md) because this method blocks the current thread and can cause the app to become unresponsive. However, you can call the [concurrency::task::get](#get) method to receive the result of the antecedent task in a task-based continuation.  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)\n"}