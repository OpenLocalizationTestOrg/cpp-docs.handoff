{"nodes":[{"pos":[12,36],"content":"_fcvt_s | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_fcvt_s | Microsoft Docs","pos":[0,24]}]},{"content":"_fcvt_s","pos":[1046,1053]},{"content":"Converts a floating-point number to a string.","pos":[1054,1099]},{"content":"This is a version of <bpt id=\"p1\">[</bpt>_fcvt<ept id=\"p1\">](../../c-runtime-library/reference/fcvt.md)</ept> with security enhancements as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1100,1303],"source":" This is a version of [_fcvt](../../c-runtime-library/reference/fcvt.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"content":"Syntax","pos":[1312,1318]},{"content":"Parameters","pos":[1634,1644]},{"content":"[out]","pos":[1648,1653]},{"content":"The supplied buffer that will hold the result of the conversion.","pos":[1666,1730]},{"content":"[in]","pos":[1737,1741]},{"content":"The size of the buffer in bytes.","pos":[1759,1791]},{"content":"[in]","pos":[1798,1802]},{"content":"Number to be converted.","pos":[1814,1837]},{"content":"[in]","pos":[1844,1848]},{"content":"Number of digits after the decimal point.","pos":[1860,1901]},{"content":"[out]","pos":[1908,1913]},{"content":"Pointer to the stored decimal-point position.","pos":[1923,1968]},{"content":"[out]","pos":[1975,1980]},{"content":"Pointer to the stored sign indicator.","pos":[1991,2028]},{"content":"Return Value","pos":[2037,2049]},{"content":"Zero if successful.","pos":[2053,2072]},{"content":"The return value is an error code if there is a failure.","pos":[2073,2129]},{"content":"Error codes are defined in Errno.h.","pos":[2130,2165]},{"content":"For a listing of these errors, see <bpt id=\"p1\">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","pos":[2166,2317],"source":" For a listing of these errors, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"In the case of an invalid parameter, as listed in the following table, this function invokes the invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2324,2536],"source":"In the case of an invalid parameter, as listed in the following table, this function invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, this function sets <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and returns <ph id=\"ph3\">`EINVAL`</ph>.","pos":[2537,2634],"source":" If execution is allowed to continue, this function sets `errno` to `EINVAL` and returns `EINVAL`."},{"content":"Error Conditions","pos":[2644,2660]},{"content":"value","pos":[2690,2695]},{"content":"count","pos":[2696,2701]},{"content":"dec","pos":[2702,2705]},{"content":"sign","pos":[2706,2710]},{"content":"Return","pos":[2711,2717]},{"pos":[2718,2726],"content":"Value in"},{"content":"any","pos":[2868,2871]},{"content":"any","pos":[2872,2875]},{"content":"any","pos":[2876,2879]},{"content":"any","pos":[2880,2883]},{"content":"any","pos":[2884,2887]},{"content":"Not modified.","pos":[2897,2910]},{"pos":[2915,2950],"content":"Not <ph id=\"ph1\">`NULL`</ph> (points to valid memory)","source":"Not `NULL` (points to valid memory)"},{"content":"&lt;=0","pos":[2951,2954],"source":"<=0"},{"content":"any","pos":[2955,2958]},{"content":"any","pos":[2959,2962]},{"content":"any","pos":[2963,2966]},{"content":"any","pos":[2967,2970]},{"content":"Not modified.","pos":[2980,2993]},{"content":"any","pos":[2998,3001]},{"content":"any","pos":[3002,3005]},{"content":"any","pos":[3006,3009]},{"content":"any","pos":[3010,3013]},{"content":"any","pos":[3021,3024]},{"content":"Not modified.","pos":[3034,3047]},{"content":"any","pos":[3052,3055]},{"content":"any","pos":[3056,3059]},{"content":"any","pos":[3060,3063]},{"content":"any","pos":[3064,3067]},{"content":"any","pos":[3068,3071]},{"content":"Not modified.","pos":[3088,3101]},{"content":"Security Issues","pos":[3111,3126]},{"pos":[3145,3241],"content":"might generate an access violation if <ph id=\"ph1\">`buffer`</ph> does not point to valid memory and is not <ph id=\"ph2\">`NULL`</ph>.","source":" might generate an access violation if `buffer` does not point to valid memory and is not `NULL`."},{"content":"Remarks","pos":[3250,3257]},{"content":"The <ph id=\"ph1\">`_fcvt_s`</ph> function converts a floating-point number to a null-terminated character string.","pos":[3261,3355],"source":"The `_fcvt_s` function converts a floating-point number to a null-terminated character string."},{"content":"The <ph id=\"ph1\">`value`</ph> parameter is the floating-point number to be converted.","pos":[3356,3423],"source":" The `value` parameter is the floating-point number to be converted."},{"content":"stores the digits of <ph id=\"ph1\">`value`</ph> as a string and appends a null character ('\\0').","pos":[3434,3511],"source":" stores the digits of `value` as a string and appends a null character ('\\0')."},{"content":"The <ph id=\"ph1\">`count`</ph> parameter specifies the number of digits to be stored after the decimal point.","pos":[3512,3602],"source":" The `count` parameter specifies the number of digits to be stored after the decimal point."},{"content":"Excess digits are rounded off to <ph id=\"ph1\">`count`</ph> places.","pos":[3603,3651],"source":" Excess digits are rounded off to `count` places."},{"content":"If there are fewer than <ph id=\"ph1\">`count`</ph> digits of precision, the string is padded with zeros.","pos":[3652,3737],"source":" If there are fewer than `count` digits of precision, the string is padded with zeros."},{"content":"Only digits are stored in the string.","pos":[3744,3781]},{"content":"The position of the decimal point and the sign of <ph id=\"ph1\">`value`</ph> can be obtained from <ph id=\"ph2\">`dec`</ph> and <ph id=\"ph3\">`sign`</ph> after the call.","pos":[3782,3893],"source":" The position of the decimal point and the sign of `value` can be obtained from `dec` and `sign` after the call."},{"content":"The <ph id=\"ph1\">`dec`</ph> parameter points to an integer value; this integer value gives the position of the decimal point with respect to the beginning of the string.","pos":[3894,4045],"source":" The `dec` parameter points to an integer value; this integer value gives the position of the decimal point with respect to the beginning of the string."},{"content":"A zero or negative integer value indicates that the decimal point lies to the left of the first digit.","pos":[4046,4148]},{"content":"The parameter <ph id=\"ph1\">`sign`</ph> points to an integer indicating the sign of <ph id=\"ph2\">`value`</ph>.","pos":[4149,4222],"source":" The parameter `sign` points to an integer indicating the sign of `value`."},{"content":"The integer is set to 0 if <ph id=\"ph1\">`value`</ph> is positive and is set to a nonzero number if <ph id=\"ph2\">`value`</ph> is negative.","pos":[4223,4324],"source":" The integer is set to 0 if `value` is positive and is set to a nonzero number if `value` is negative."},{"pos":[4331,4407],"content":"A buffer of length <ph id=\"ph1\">`_CVTBUFSIZE`</ph> is sufficient for any floating point value.","source":"A buffer of length `_CVTBUFSIZE` is sufficient for any floating point value."},{"content":"The difference between <ph id=\"ph1\">`_ecvt_s`</ph> and <ph id=\"ph2\">`_fcvt_s`</ph> is in the interpretation of the <ph id=\"ph3\">`count`</ph> parameter.","pos":[4414,4511],"source":"The difference between `_ecvt_s` and `_fcvt_s` is in the interpretation of the `count` parameter."},{"content":"interprets <ph id=\"ph1\">`count`</ph> as the total number of digits in the output string, and <ph id=\"ph2\">`_fcvt_s`</ph> interprets c<ph id=\"ph3\">`ount`</ph> as the number of digits after the decimal point.","pos":[4522,4674],"source":" interprets `count` as the total number of digits in the output string, and `_fcvt_s` interprets c`ount` as the number of digits after the decimal point."},{"content":"In C++, using this function is simplified by a template overload; the overload can infer buffer length automatically, eliminating the need to specify a size argument.","pos":[4681,4847]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[4848,4956],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"content":"The debug version of this function first fills the buffer with 0xFD.","pos":[4963,5031]},{"content":"To disable this behavior, use <bpt id=\"p1\">[</bpt>_CrtSetDebugFillThreshold<ept id=\"p1\">](../../c-runtime-library/reference/crtsetdebugfillthreshold.md)</ept>.","pos":[5032,5153],"source":" To disable this behavior, use [_CrtSetDebugFillThreshold](../../c-runtime-library/reference/crtsetdebugfillthreshold.md)."},{"content":"Requirements","pos":[5162,5174]},{"content":"Function","pos":[5181,5189]},{"content":"Required header","pos":[5190,5205]},{"content":"Optional header","pos":[5206,5221]},{"content":"stdlib.h&gt;","pos":[5301,5310],"source":"stdlib.h>"},{"content":"errno.h&gt;","pos":[5313,5321],"source":"errno.h>"},{"pos":[5329,5447],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[5454,5561],"content":"<bpt id=\"p1\">**</bpt>Libraries:<ept id=\"p1\">**</ept> All versions of the <bpt id=\"p2\">[</bpt>CRT Library Features<ept id=\"p2\">](../../c-runtime-library/crt-library-features.md)</ept>.","source":"**Libraries:** All versions of the [CRT Library Features](../../c-runtime-library/crt-library-features.md)."},{"content":"Example","pos":[5570,5577]},{"content":".NET Framework Equivalent","pos":[6076,6101]},{"content":"&lt;xref:System.Convert.ToString%2A&gt;","pos":[6105,6138],"source":"<xref:System.Convert.ToString%2A>"},{"content":"See Also","pos":[6147,6155]},{"content":"Data Conversion","pos":[6160,6175]},{"content":"Floating-Point Support","pos":[6226,6248]},{"content":"atof, _atof_l, _wtof, _wtof_l","pos":[6306,6335]},{"content":"_ecvt_s","pos":[6404,6411]},{"content":"_gcvt_s","pos":[6463,6470]},{"content":"_fcvt","pos":[6522,6527]}],"content":"---\ntitle: \"_fcvt_s | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_fcvt_s\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-convert-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"fcvt_s\"\n  - \"_fcvt_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"fcvt_s function\"\n  - \"converting floating point, to strings\"\n  - \"floating-point functions, converting number to string\"\n  - \"_fcvt_s function\"\nms.assetid: 48671197-1d29-4c2b-a5d8-d2368f5f68a1\ncaps.latest.revision: 27\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _fcvt_s\nConverts a floating-point number to a string. This is a version of [_fcvt](../../c-runtime-library/reference/fcvt.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n## Syntax  \n  \n```  \nerrno_t _fcvt_s(   \n   char* buffer,  \n   size_t sizeInBytes,  \n   double value,  \n   int count,  \n   int *dec,  \n   int *sign   \n);  \ntemplate <size_t size>  \nerrno_t _fcvt_s(   \n   char (&buffer)[size],  \n   double value,  \n   int count,  \n   int *dec,  \n   int *sign   \n); // C++ only  \n```  \n  \n#### Parameters  \n [out] `buffer`  \n The supplied buffer that will hold the result of the conversion.  \n  \n [in] `sizeInBytes`  \n The size of the buffer in bytes.  \n  \n [in] `value`  \n Number to be converted.  \n  \n [in] `count`  \n Number of digits after the decimal point.  \n  \n [out] `dec`  \n Pointer to the stored decimal-point position.  \n  \n [out] `sign`  \n Pointer to the stored sign indicator.  \n  \n## Return Value  \n Zero if successful. The return value is an error code if there is a failure. Error codes are defined in Errno.h. For a listing of these errors, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n In the case of an invalid parameter, as listed in the following table, this function invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, this function sets `errno` to `EINVAL` and returns `EINVAL`.  \n  \n### Error Conditions  \n  \n|`buffer`|`sizeInBytes`|value|count|dec|sign|Return|Value in `buffer`|  \n|--------------|-------------------|-----------|-----------|---------|----------|------------|-----------------------|  \n|`NULL`|any|any|any|any|any|`EINVAL`|Not modified.|  \n|Not `NULL` (points to valid memory)|<=0|any|any|any|any|`EINVAL`|Not modified.|  \n|any|any|any|any|`NULL`|any|`EINVAL`|Not modified.|  \n|any|any|any|any|any|`NULL`|`EINVAL`|Not modified.|  \n  \n **Security Issues**  \n  \n `_fcvt_s` might generate an access violation if `buffer` does not point to valid memory and is not `NULL`.  \n  \n## Remarks  \n The `_fcvt_s` function converts a floating-point number to a null-terminated character string. The `value` parameter is the floating-point number to be converted. `_fcvt_s` stores the digits of `value` as a string and appends a null character ('\\0'). The `count` parameter specifies the number of digits to be stored after the decimal point. Excess digits are rounded off to `count` places. If there are fewer than `count` digits of precision, the string is padded with zeros.  \n  \n Only digits are stored in the string. The position of the decimal point and the sign of `value` can be obtained from `dec` and `sign` after the call. The `dec` parameter points to an integer value; this integer value gives the position of the decimal point with respect to the beginning of the string. A zero or negative integer value indicates that the decimal point lies to the left of the first digit. The parameter `sign` points to an integer indicating the sign of `value`. The integer is set to 0 if `value` is positive and is set to a nonzero number if `value` is negative.  \n  \n A buffer of length `_CVTBUFSIZE` is sufficient for any floating point value.  \n  \n The difference between `_ecvt_s` and `_fcvt_s` is in the interpretation of the `count` parameter. `_ecvt_s` interprets `count` as the total number of digits in the output string, and `_fcvt_s` interprets c`ount` as the number of digits after the decimal point.  \n  \n In C++, using this function is simplified by a template overload; the overload can infer buffer length automatically, eliminating the need to specify a size argument. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n The debug version of this function first fills the buffer with 0xFD. To disable this behavior, use [_CrtSetDebugFillThreshold](../../c-runtime-library/reference/crtsetdebugfillthreshold.md).  \n  \n## Requirements  \n  \n|Function|Required header|Optional header|  \n|--------------|---------------------|---------------------|  \n|`_fcvt_s`|\\<stdlib.h>|\\<errno.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n **Libraries:** All versions of the [CRT Library Features](../../c-runtime-library/crt-library-features.md).  \n  \n## Example  \n  \n```  \n// fcvt_s.c  \n#include <stdio.h>  \n#include <stdlib.h>  \n#include <errno.h>  \n  \nint main()  \n{  \n  char * buf = 0;  \n  int decimal;  \n  int sign;  \n  int err;  \n  \n  buf = (char*) malloc(_CVTBUFSIZE);  \n  err = _fcvt_s(buf, _CVTBUFSIZE, 1.2, 5, &decimal, &sign);  \n  \n  if (err != 0)  \n  {  \n     printf(\"_fcvt_s failed with error code %d\\n\", err);  \n     exit(1);  \n  }  \n  \n  printf(\"Converted value: %s\\n\", buf);    \n  \n}  \n```  \n  \n```Output  \nConverted value: 120000  \n```  \n  \n## .NET Framework Equivalent  \n <xref:System.Convert.ToString%2A>  \n  \n## See Also  \n [Data Conversion](../../c-runtime-library/data-conversion.md)   \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [atof, _atof_l, _wtof, _wtof_l](../../c-runtime-library/reference/atof-atof-l-wtof-wtof-l.md)   \n [_ecvt_s](../../c-runtime-library/reference/ecvt-s.md)   \n [_gcvt_s](../../c-runtime-library/reference/gcvt-s.md)   \n [_fcvt](../../c-runtime-library/reference/fcvt.md)"}