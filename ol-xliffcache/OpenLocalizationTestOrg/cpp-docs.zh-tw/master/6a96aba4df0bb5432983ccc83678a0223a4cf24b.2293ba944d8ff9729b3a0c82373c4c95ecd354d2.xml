{"nodes":[{"pos":[12,47],"content":"o_dual_interfaces | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"o_dual_interfaces | Microsoft Docs","pos":[0,34]}]},{"content":"no_dual_interfaces","pos":[631,649]},{"content":"C++ Specific","pos":[652,664]},{"content":"Changes the way the compiler generates wrapper functions for dual interface methods.","pos":[673,757]},{"content":"Syntax","pos":[766,772]},{"content":"Remarks","pos":[817,824]},{"content":"Normally, the wrapper will call the method through the virtual function table for the interface.","pos":[828,924]},{"content":"With <ph id=\"ph1\">`no_dual_interfaces`</ph>, the wrapper instead calls <bpt id=\"p1\">**</bpt>IDispatch::Invoke<ept id=\"p1\">**</ept> to invoke the method.","pos":[925,1021],"source":" With `no_dual_interfaces`, the wrapper instead calls **IDispatch::Invoke** to invoke the method."},{"content":"END C++ Specific","pos":[1030,1046]},{"content":"See Also","pos":[1057,1065]},{"content":"import Attributes","pos":[1071,1088]},{"content":"import Directive","pos":[1143,1159]}],"content":"---\ntitle: \"no_dual_interfaces | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"no_dual_interfaces\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"no_dual_interfaces attribute\"\nms.assetid: 9acd5d9d-4a49-4cdc-9470-73a2c23cf512\ncaps.latest.revision: 4\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# no_dual_interfaces\n**C++ Specific**  \n  \n Changes the way the compiler generates wrapper functions for dual interface methods.  \n  \n## Syntax  \n  \n```  \nno_dual_interfaces  \n```  \n  \n## Remarks  \n Normally, the wrapper will call the method through the virtual function table for the interface. With `no_dual_interfaces`, the wrapper instead calls **IDispatch::Invoke** to invoke the method.  \n  \n **END C++ Specific**  \n  \n## See Also  \n [#import Attributes](../preprocessor/hash-import-attributes-cpp.md)   \n [#import Directive](../preprocessor/hash-import-directive-cpp.md)"}