<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bfab56fe6847015adff4013d075893e982d5d2f4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\using-insertion-operators-and-controlling-format.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bc00a218f895fe5aebfdbaeffd893a21f7f05fc3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">abfc84ef3fde2b02b8df4daa48fdc3fed3296e3e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using Insertion Operators and Controlling Format | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using Insertion Operators and Controlling Format</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic shows how to control format and how to create insertion operators for your own classes.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The insertion (<bpt id="p1">**</bpt><ph id="ph1">&lt;&lt;</ph><ept id="p1">**</ept>) operator, which is preprogrammed for all standard C++ data types, sends bytes to an output stream object.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Insertion operators work with predefined "manipulators," which are elements that change the default format of integer arguments.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can control the format with the following options:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Output Width</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Alignment</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Precision</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Radix</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Output Width</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To align output, you specify the output width for each item by placing the <ph id="ph1">`setw`</ph> manipulator in the stream or by calling the <bpt id="p1">**</bpt>width<ept id="p1">**</ept> member function.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This example right-aligns the values in a column at least 10 characters wide:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Leading blanks are added to any value fewer than 10 characters wide.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To pad a field, use the <bpt id="p1">**</bpt>fill<ept id="p1">**</ept> member function, which sets the value of the padding character for fields that have a specified width.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The default is a blank.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To pad the column of numbers with asterisks, modify the previous <bpt id="p1">**</bpt>for<ept id="p1">**</ept> loop as follows:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`endl`</ph> manipulator replaces the newline character (<ph id="ph2">`'\n'`</ph>).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The output looks like this:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To specify widths for data elements in the same line, use the <ph id="ph1">`setw`</ph> manipulator:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>width<ept id="p1">**</ept> member function is declared in <ph id="ph1">\&lt;</ph>iostream&gt;.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If you use <ph id="ph1">`setw`</ph> or any other manipulator with arguments, you must include <ph id="ph2">\&lt;</ph>iomanip&gt;.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In the output, strings are printed in a field of width 6 and integers in a field of width 10:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Neither <ph id="ph1">`setw`</ph> nor <bpt id="p1">**</bpt>width<ept id="p1">**</ept> truncates values.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If formatted output exceeds the width, the entire value prints, subject to the stream's precision setting.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Both <ph id="ph1">`setw`</ph> and <bpt id="p1">**</bpt>width<ept id="p1">**</ept> affect the following field only.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Field width reverts to its default behavior (the necessary width) after one field has been printed.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>However, the other stream format options remain in effect until changed.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Alignment</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Output streams default to right-aligned text.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To left-align the names in the previous example and right-align the numbers, replace the <bpt id="p1">**</bpt>for<ept id="p1">**</ept> loop as follows:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The output looks like this:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The left-align flag is set by using the <bpt id="p1">[</bpt>setiosflags<ept id="p1">](../standard-library/iomanip-functions.md#setiosflags)</ept> manipulator with the <ph id="ph1">`left`</ph> enumerator.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This enumerator is defined in the <bpt id="p1">[</bpt>ios<ept id="p1">](../standard-library/basic-ios-class.md)</ept> class, so its reference must include the <bpt id="p2">**</bpt>ios::<ept id="p2">**</ept> prefix.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>resetiosflags<ept id="p1">](../standard-library/iomanip-functions.md#resetiosflags)</ept> manipulator turns off the left-align flag.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Unlike <bpt id="p1">**</bpt>width<ept id="p1">**</ept> and <ph id="ph1">`setw`</ph>, the effect of <ph id="ph2">`setiosflags`</ph> and <ph id="ph3">`resetiosflags`</ph> is permanent.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Precision</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The default value for floating-point precision is six.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For example, the number 3466.9768 prints as 3466.98.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To change the way this value prints, use the <bpt id="p1">[</bpt>setprecision<ept id="p1">](../standard-library/iomanip-functions.md#setprecision)</ept> manipulator.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The manipulator has two flags: <bpt id="p1">[</bpt>fixed<ept id="p1">](../standard-library/ios-functions.md#fixed)</ept> and <bpt id="p2">[</bpt>scientific<ept id="p2">](../standard-library/ios-functions.md#scientific)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">[</bpt>fixed<ept id="p1">](../standard-library/ios-functions.md#fixed)</ept> is set, the number prints as 3466.976800.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>scientific<ept id="p1">**</ept> is set, it prints as 3.4669773+003.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To display the floating-point numbers shown in <bpt id="p1">[</bpt>Alignment<ept id="p1">](#vclrfalignmentanchor4)</ept> with one significant digit, replace the <bpt id="p2">**</bpt>for<ept id="p2">**</ept> loop as follows:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The program prints this list:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>To eliminate scientific notation, insert this statement before the <bpt id="p1">**</bpt>for<ept id="p1">**</ept> loop:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>With fixed notation, the program prints with one digit after the decimal point.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If you change the <bpt id="p1">**</bpt>ios::fixed<ept id="p1">**</ept> flag to <bpt id="p2">**</bpt>ios::scientific<ept id="p2">**</ept>, the program prints this:</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Again, the program prints one digit after the decimal point.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If either <bpt id="p1">**</bpt>ios::fixed<ept id="p1">**</ept> or <bpt id="p2">**</bpt>ios::scientific<ept id="p2">**</ept> is set, the precision value determines the number of digits after the decimal point.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If neither flag is set, the precision value determines the total number of significant digits.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`resetiosflags`</ph> manipulator clears these flags.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Radix</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>dec<ept id="p1">**</ept>, <bpt id="p2">**</bpt>oct<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>hex<ept id="p3">**</ept> manipulators set the default radix for input and output.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For example, if you insert the <bpt id="p1">**</bpt>hex<ept id="p1">**</ept> manipulator into the output stream, the object correctly translates the internal data representation of integers into a hexadecimal output format.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The numbers are displayed with digits a through f in lower case if the <bpt id="p1">[</bpt>uppercase<ept id="p1">](../standard-library/ios-functions.md#uppercase)</ept> flag is clear (the default); otherwise, they are displayed in upper case.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The default radix is <bpt id="p1">**</bpt>dec<ept id="p1">**</ept> (decimal).</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Quoted strings (C++14)</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>When you insert a string into a stream, you can easily retrieve the same string back by calling the stringstream::str() member function.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>However, if you want to use the extraction operator to insert the stream into a new string at a later point, you may get an unexpected result because the &gt;&gt; operator by default will stop when it encounters the first whitespace character.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This behavior can be overcome manually, but to make string round-tripping more convenient, C++14 adds the <ph id="ph1">`std::quoted`</ph> stream manipulator in <ph id="ph2">`&lt;iomanip&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Upon insertion, <ph id="ph1">`quoted()`</ph> surrounds the string with a delimiter (double quote ' " ' by default) and upon extraction manipulates the stream to extract all characters until the final delimiter is encountered.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Any embedded quotes are escaped with an escape character ('<ph id="ph1">\\\\</ph>' by default).</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The delimiters are present only in the stream object; they are not present in the extracted string but they are present in the string returned by <bpt id="p1">[</bpt>basic_stringstream::str<ept id="p1">](../standard-library/basic-stringstream-class.md#basic_stringstream__str)</ept>().</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The whitespace behavior of the insertion and extraction operations is independent of how a string is represented in code, so the quoted operator is useful regardless of whether the input string is a raw string literal or a regular string.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The input string, whatever its format, can have embedded quotes, line breaks, tabs, and so on and all these will be preserved by the quoted() manipulator.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For more information and full code examples, see [quoted]--brokenlink--(../Topic/%3Cios%3E%20functions.md#quoted).</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Output Streams</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>