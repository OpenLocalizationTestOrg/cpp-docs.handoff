{"nodes":[{"pos":[12,68],"content":"Variable Argument Lists (...) (C++-CLI) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Variable Argument Lists (...) (C++-CLI) | Microsoft Docs","pos":[0,56]}]},{"content":"Variable Argument Lists (...) (C++/CLI)","pos":[635,674]},{"pos":[675,805],"content":"This example shows how you can use the <ph id=\"ph1\">`...`</ph> syntax in Visual C++ to implement functions that have a variable number of arguments.","source":"This example shows how you can use the `...` syntax in Visual C++ to implement functions that have a variable number of arguments."},{"pos":[813,1087],"content":"[!NOTE]\n This topic pertains to C++/CLI. For information about using the `...` in ISO Standard C++, see [Ellipses and Variadic Templates](../cpp/ellipses-and-variadic-templates.md) and Ellipses and Default Arguments in [Postfix expressions](../cpp/postfix-expressions.md).","leadings":["","> "],"nodes":[{"content":" This topic pertains to C++/CLI. For information about using the `...` in ISO Standard C++, see [Ellipses and Variadic Templates](../cpp/ellipses-and-variadic-templates.md) and Ellipses and Default Arguments in [Postfix expressions](../cpp/postfix-expressions.md).","pos":[8,272],"nodes":[{"content":"This topic pertains to C++/CLI.","pos":[1,32]},{"content":"For information about using the <ph id=\"ph1\">`...`</ph> in ISO Standard C++, see <bpt id=\"p1\">[</bpt>Ellipses and Variadic Templates<ept id=\"p1\">](../cpp/ellipses-and-variadic-templates.md)</ept> and Ellipses and Default Arguments in <bpt id=\"p2\">[</bpt>Postfix expressions<ept id=\"p2\">](../cpp/postfix-expressions.md)</ept>.","pos":[33,264],"source":" For information about using the `...` in ISO Standard C++, see [Ellipses and Variadic Templates](../cpp/ellipses-and-variadic-templates.md) and Ellipses and Default Arguments in [Postfix expressions](../cpp/postfix-expressions.md)."}]}]},{"pos":[1094,1173],"content":"The parameter that uses <ph id=\"ph1\">`...`</ph> must be the last parameter in the parameter list.","source":"The parameter that uses `...` must be the last parameter in the parameter list."},{"content":"Example","pos":[1182,1189]},{"content":"Code","pos":[1199,1203]},{"content":"Output","pos":[1579,1585]},{"content":"Code Example","pos":[1613,1625]},{"content":"The following example shows how to call from C# a Visual C++ function that takes a variable number of arguments.","pos":[1629,1741]},{"pos":[1932,2075],"content":"The function <ph id=\"ph1\">`f`</ph> can be called from C# or Visual Basic, for example, as though it were a function that can take a variable number of arguments.","source":"The function `f` can be called from C# or Visual Basic, for example, as though it were a function that can take a variable number of arguments."},{"content":"In C#, an argument that is passed to a <ph id=\"ph1\">`ParamArray`</ph> parameter can be called by a variable number of arguments.","pos":[2082,2192],"source":"In C#, an argument that is passed to a `ParamArray` parameter can be called by a variable number of arguments."},{"content":"The following code sample is in C#.","pos":[2193,2228]},{"pos":[2569,2654],"content":"A call to <ph id=\"ph1\">`f`</ph> in Visual C++ can pass an initialized array or a variable-length array.","source":"A call to `f` in Visual C++ can pass an initialized array or a variable-length array."},{"content":"See Also","pos":[2922,2930]},{"content":"Arrays","pos":[2935,2941]}],"content":"---\ntitle: \"Variable Argument Lists (...) (C++-CLI) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"variable argument lists\"\n  - \"parameter arrays\"\nms.assetid: db1a27f4-02a8-4318-8690-1f2893f52b38\ncaps.latest.revision: 22\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Variable Argument Lists (...) (C++/CLI)\nThis example shows how you can use the `...` syntax in Visual C++ to implement functions that have a variable number of arguments.  \n  \n> [!NOTE]\n>  This topic pertains to C++/CLI. For information about using the `...` in ISO Standard C++, see [Ellipses and Variadic Templates](../cpp/ellipses-and-variadic-templates.md) and Ellipses and Default Arguments in [Postfix expressions](../cpp/postfix-expressions.md).  \n  \n The parameter that uses `...` must be the last parameter in the parameter list.  \n  \n## Example  \n  \n### Code  \n  \n```  \n// mcppv2_paramarray.cpp  \n// compile with: /clr  \nusing namespace System;  \ndouble average( ... array<Int32>^ arr ) {  \n   int i = arr->GetLength(0);  \n   double answer = 0.0;  \n  \n   for (int j = 0 ; j < i ; j++)  \n      answer += arr[j];  \n  \n   return answer / i;  \n}  \n  \nint main() {  \n   Console::WriteLine(\"{0}\", average( 1, 2, 3, 6 ));  \n}  \n```  \n  \n### Output  \n  \n```  \n3  \n```  \n  \n## Code Example  \n The following example shows how to call from C# a Visual C++ function that takes a variable number of arguments.  \n  \n```  \n// mcppv2_paramarray2.cpp  \n// compile with: /clr:safe /LD  \nusing namespace System;  \n  \npublic ref class C {  \npublic:   \n   void f( ... array<String^>^ a ) {}  \n};  \n```  \n  \n The function `f` can be called from C# or Visual Basic, for example, as though it were a function that can take a variable number of arguments.  \n  \n In C#, an argument that is passed to a `ParamArray` parameter can be called by a variable number of arguments. The following code sample is in C#.  \n  \n```  \n// mcppv2_paramarray3.cs  \n// compile with: /r:mcppv2_paramarray2.dll  \n// a C# program  \n  \npublic class X {  \n   public static void Main() {  \n      // Visual C# will generate a String array to match the   \n      // ParamArray attribute  \n      C myc = new C();  \n      myc.f(\"hello\", \"there\", \"world\");  \n   }  \n}  \n```  \n  \n A call to `f` in Visual C++ can pass an initialized array or a variable-length array.  \n  \n```  \n// mcpp_paramarray4.cpp  \n// compile with: /clr  \nusing namespace System;  \n  \npublic ref class C {  \npublic:   \n   void f( ... array<String^>^ a ) {}  \n};  \n  \nint main() {  \n   C ^ myc = gcnew C();  \n   myc->f(\"hello\", \"world\", \"!!!\");  \n}  \n```  \n  \n## See Also  \n [Arrays](../windows/arrays-cpp-component-extensions.md)"}