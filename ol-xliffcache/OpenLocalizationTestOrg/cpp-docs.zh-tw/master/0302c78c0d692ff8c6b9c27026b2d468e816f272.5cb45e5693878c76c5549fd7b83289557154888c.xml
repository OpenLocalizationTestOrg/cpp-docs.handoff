{"nodes":[{"pos":[12,55],"content":"Expressions in Parentheses | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Expressions in Parentheses | Microsoft Docs","pos":[0,43]}]},{"content":"Expressions in Parentheses","pos":[696,722]},{"content":"You can enclose any operand in parentheses without changing the type or value of the enclosed expression.","pos":[723,828]},{"content":"For example, in the expression:","pos":[829,860]},{"content":"the parentheses around <ph id=\"ph1\">`10 + 5`</ph> mean that the value of <ph id=\"ph2\">`10 + 5`</ph> is evaluated first and it becomes the left operand of the division (<bpt id=\"p1\">**</bpt><ph id=\"ph3\">/</ph><ept id=\"p1\">**</ept>) operator.","pos":[899,1047],"source":"the parentheses around `10 + 5` mean that the value of `10 + 5` is evaluated first and it becomes the left operand of the division (**/**) operator."},{"content":"The result of <ph id=\"ph1\">`( 10 + 5 ) / 5`</ph> is 3.","pos":[1048,1084],"source":" The result of `( 10 + 5 ) / 5` is 3."},{"content":"Without the parentheses, <ph id=\"ph1\">`10 + 5 / 5`</ph> would evaluate to 11.","pos":[1085,1144],"source":" Without the parentheses, `10 + 5 / 5` would evaluate to 11."},{"content":"Although parentheses affect the way operands are grouped in an expression, they cannot guarantee a particular order of evaluation in all cases.","pos":[1151,1294]},{"content":"For example, neither the parentheses nor the left-to-right grouping of the following expression guarantees what the value of <ph id=\"ph1\">`i`</ph> will be in either of the subexpressions:","pos":[1295,1464],"source":" For example, neither the parentheses nor the left-to-right grouping of the following expression guarantees what the value of `i` will be in either of the subexpressions:"},{"content":"The compiler is free to evaluate the two sides of the multiplication in any order.","pos":[1511,1593]},{"content":"If the initial value of <ph id=\"ph1\">`i`</ph> is zero, the whole expression could be evaluated as either of these two statements:","pos":[1594,1705],"source":" If the initial value of `i` is zero, the whole expression could be evaluated as either of these two statements:"},{"pos":[1784,1886],"content":"Exceptions resulting from side effects are discussed in <bpt id=\"p1\">[</bpt>Side Effects<ept id=\"p1\">](../c-language/side-effects.md)</ept>.","source":"Exceptions resulting from side effects are discussed in [Side Effects](../c-language/side-effects.md)."},{"content":"See Also","pos":[1895,1903]},{"content":"C Primary Expressions","pos":[1908,1929]}],"content":"---\ntitle: \"Expressions in Parentheses | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"parentheses\"\n  - \"expression evaluation, evaluation order\"\n  - \"expressions [C++], evaluating\"\n  - \"parentheses, expressions\"\nms.assetid: b8636147-6982-408c-9e64-29e40678ee43\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Expressions in Parentheses\nYou can enclose any operand in parentheses without changing the type or value of the enclosed expression. For example, in the expression:  \n  \n```  \n( 10 + 5 ) / 5  \n```  \n  \n the parentheses around `10 + 5` mean that the value of `10 + 5` is evaluated first and it becomes the left operand of the division (**/**) operator. The result of `( 10 + 5 ) / 5` is 3. Without the parentheses, `10 + 5 / 5` would evaluate to 11.  \n  \n Although parentheses affect the way operands are grouped in an expression, they cannot guarantee a particular order of evaluation in all cases. For example, neither the parentheses nor the left-to-right grouping of the following expression guarantees what the value of `i` will be in either of the subexpressions:  \n  \n```  \n( i++ +1 ) * ( 2 + i )  \n```  \n  \n The compiler is free to evaluate the two sides of the multiplication in any order. If the initial value of `i` is zero, the whole expression could be evaluated as either of these two statements:  \n  \n```  \n( 0 + 1 + 1 ) * ( 2 + 1 )   \n( 0 + 1 + 1 ) * ( 2 + 0 )  \n```  \n  \n Exceptions resulting from side effects are discussed in [Side Effects](../c-language/side-effects.md).  \n  \n## See Also  \n [C Primary Expressions](../c-language/c-primary-expressions.md)"}