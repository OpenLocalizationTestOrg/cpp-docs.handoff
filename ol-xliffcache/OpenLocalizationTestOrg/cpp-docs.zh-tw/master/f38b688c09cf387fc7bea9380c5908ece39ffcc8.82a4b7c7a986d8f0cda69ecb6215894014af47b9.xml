{"nodes":[{"pos":[12,42],"content":"CHandle Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CHandle Class | Microsoft Docs","pos":[0,30]}]},{"content":"CHandle Class","pos":[632,645]},{"content":"This class provides methods for creating and using a handle object.","pos":[646,713]},{"content":"Syntax","pos":[722,728]},{"content":"Members","pos":[764,771]},{"content":"Public Constructors","pos":[781,800]},{"content":"Name","pos":[807,811]},{"content":"Description","pos":[812,823]},{"content":"CHandle::CHandle","pos":[862,878]},{"content":"The constructor.","pos":[899,915]},{"content":"CHandle::~CHandle","pos":[921,938]},{"content":"The destructor.","pos":[964,979]},{"content":"Public Methods","pos":[990,1004]},{"content":"Name","pos":[1011,1015]},{"content":"Description","pos":[1016,1027]},{"content":"CHandle::Attach","pos":[1066,1081]},{"pos":[1101,1171],"content":"Call this method to attach the <ph id=\"ph1\">`CHandle`</ph> object to an existing handle.","source":"Call this method to attach the `CHandle` object to an existing handle."},{"content":"CHandle::Close","pos":[1177,1191]},{"pos":[1210,1255],"content":"Call this method to close a <ph id=\"ph1\">`CHandle`</ph> object.","source":"Call this method to close a `CHandle` object."},{"content":"CHandle::Detach","pos":[1261,1276]},{"pos":[1296,1356],"content":"Call this method to detach a handle from a <ph id=\"ph1\">`CHandle`</ph> object.","source":"Call this method to detach a handle from a `CHandle` object."},{"content":"Public Operators","pos":[1367,1383]},{"content":"Name","pos":[1390,1394]},{"content":"Description","pos":[1395,1406]},{"content":"CHandle::operator HANDLE","pos":[1445,1469]},{"content":"Returns the value of the stored handle.","pos":[1498,1537]},{"content":"CHandle::operator =","pos":[1543,1562]},{"content":"Assignment operator.","pos":[1587,1607]},{"content":"Public Data Members","pos":[1618,1637]},{"content":"Name","pos":[1644,1648]},{"content":"Description","pos":[1649,1660]},{"content":"CHandle::m_h","pos":[1699,1711]},{"content":"The member variable that stores the handle.","pos":[1728,1771]},{"content":"Remarks","pos":[1781,1788]},{"pos":[1792,1933],"content":"A <ph id=\"ph1\">`CHandle`</ph> object can be used whenever a handle is required: the main difference is that the <ph id=\"ph2\">`CHandle`</ph> object will automatically be deleted.","source":"A `CHandle` object can be used whenever a handle is required: the main difference is that the `CHandle` object will automatically be deleted."},{"pos":[1941,2341],"content":"[!NOTE]\n Some API functions will use NULL as an empty or invalid handle, while others use INVALID_HANDLE_VALUE. `CHandle` only uses NULL and will treat INVALID_HANDLE_VALUE as a real handle. If you call an API which can return INVALID_HANDLE_VALUE, you should check for this value before calling [CHandle::Attach](#chandle__attach) or passing it to the `CHandle` constructor, and instead pass NULL.","leadings":["","> "],"nodes":[{"content":" Some API functions will use NULL as an empty or invalid handle, while others use INVALID_HANDLE_VALUE. `CHandle` only uses NULL and will treat INVALID_HANDLE_VALUE as a real handle. If you call an API which can return INVALID_HANDLE_VALUE, you should check for this value before calling [CHandle::Attach](#chandle__attach) or passing it to the `CHandle` constructor, and instead pass NULL.","pos":[8,398],"nodes":[{"content":"Some API functions will use NULL as an empty or invalid handle, while others use INVALID_HANDLE_VALUE.","pos":[1,103]},{"content":"only uses NULL and will treat INVALID_HANDLE_VALUE as a real handle.","pos":[114,182]},{"content":"If you call an API which can return INVALID_HANDLE_VALUE, you should check for this value before calling <bpt id=\"p1\">[</bpt>CHandle::Attach<ept id=\"p1\">](#chandle__attach)</ept> or passing it to the <ph id=\"ph1\">`CHandle`</ph> constructor, and instead pass NULL.","pos":[183,390],"source":" If you call an API which can return INVALID_HANDLE_VALUE, you should check for this value before calling [CHandle::Attach](#chandle__attach) or passing it to the `CHandle` constructor, and instead pass NULL."}]}]},{"content":"Requirements","pos":[2350,2362]},{"pos":[2366,2387],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlbase.h","source":"**Header:** atlbase.h"},{"pos":[2429,2444],"content":"CHandle::Attach"},{"pos":[2448,2518],"content":"Call this method to attach the <ph id=\"ph1\">`CHandle`</ph> object to an existing handle.","source":"Call this method to attach the `CHandle` object to an existing handle."},{"content":"Parameters","pos":[2572,2582]},{"content":"will take ownership of the handle <ph id=\"ph1\">`h`</ph>.","pos":[2603,2641],"source":" will take ownership of the handle `h`."},{"content":"Remarks","pos":[2651,2658]},{"content":"Assigns the <ph id=\"ph1\">`CHandle`</ph> object to the <ph id=\"ph2\">`h`</ph> handle.","pos":[2662,2709],"source":"Assigns the `CHandle` object to the `h` handle."},{"content":"In debugs builds, an ATLASSERT will be raised if <ph id=\"ph1\">`h`</ph> is NULL.","pos":[2710,2771],"source":" In debugs builds, an ATLASSERT will be raised if `h` is NULL."},{"content":"No other check as to the validity of the handle is made.","pos":[2772,2828]},{"pos":[2871,2887],"content":"CHandle::CHandle"},{"content":"The constructor.","pos":[2891,2907]},{"content":"Parameters","pos":[3016,3026]},{"content":"An existing handle or <ph id=\"ph1\">`CHandle`</ph>.","pos":[3037,3069],"source":" An existing handle or `CHandle`."},{"content":"Remarks","pos":[3079,3086]},{"pos":[3090,3178],"content":"Creates a new <ph id=\"ph1\">`CHandle`</ph> object, optionally using an existing handle or <ph id=\"ph2\">`CHandle`</ph> object.","source":"Creates a new `CHandle` object, optionally using an existing handle or `CHandle` object."},{"pos":[3226,3243],"content":"CHandle::~CHandle"},{"content":"The destructor.","pos":[3247,3262]},{"content":"Remarks","pos":[3305,3312]},{"pos":[3316,3388],"content":"Frees the <ph id=\"ph1\">`CHandle`</ph> object by calling <bpt id=\"p1\">[</bpt>CHandle::Close<ept id=\"p1\">](#chandle__close)</ept>.","source":"Frees the `CHandle` object by calling [CHandle::Close](#chandle__close)."},{"pos":[3429,3443],"content":"CHandle::Close"},{"pos":[3447,3492],"content":"Call this method to close a <ph id=\"ph1\">`CHandle`</ph> object.","source":"Call this method to close a `CHandle` object."},{"content":"Remarks","pos":[3537,3544]},{"content":"Closes an open object handle.","pos":[3548,3577]},{"content":"If the handle is NULL, which will be the case if <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> has already been called, an ATLASSERT will be raised in debug builds.","pos":[3578,3706],"source":" If the handle is NULL, which will be the case if **Close** has already been called, an ATLASSERT will be raised in debug builds."},{"pos":[3748,3763],"content":"CHandle::Detach"},{"pos":[3767,3827],"content":"Call this method to detach a handle from a <ph id=\"ph1\">`CHandle`</ph> object.","source":"Call this method to detach a handle from a `CHandle` object."},{"content":"Return Value","pos":[3875,3887]},{"content":"Returns the handle being detached.","pos":[3891,3925]},{"content":"Remarks","pos":[3935,3942]},{"content":"Releases ownership of the handle.","pos":[3946,3979]},{"pos":[4018,4030],"content":"CHandle::m_h"},{"content":"The member variable that stores the handle.","pos":[4034,4077]},{"pos":[4149,4168],"content":"CHandle::operator ="},{"content":"The assignment operator.","pos":[4172,4196]},{"content":"Parameters","pos":[4259,4269]},{"content":"will take ownership of the handle <ph id=\"ph1\">`h`</ph>.","pos":[4290,4328],"source":" will take ownership of the handle `h`."},{"content":"Return Value","pos":[4338,4350]},{"pos":[4354,4402],"content":"Returns a reference to the new <ph id=\"ph1\">`CHandle`</ph> object.","source":"Returns a reference to the new `CHandle` object."},{"content":"Remarks","pos":[4412,4419]},{"content":"If the <ph id=\"ph1\">`CHandle`</ph> object currently contains a handle, it will be closed.","pos":[4423,4494],"source":"If the `CHandle` object currently contains a handle, it will be closed."},{"content":"The <ph id=\"ph1\">`CHandle`</ph> object being passed in will have its handle reference set to NULL.","pos":[4495,4575],"source":" The `CHandle` object being passed in will have its handle reference set to NULL."},{"content":"This ensures that two <ph id=\"ph1\">`CHandle`</ph> objects will never contain the same active handle.","pos":[4576,4658],"source":" This ensures that two `CHandle` objects will never contain the same active handle."},{"pos":[4709,4733],"content":"CHandle::operator HANDLE"},{"content":"Returns the value of the stored handle.","pos":[4737,4776]},{"content":"```operator HANDLE() const throw();","pos":[4782,4817]}],"content":"---\ntitle: \"CHandle Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL.CHandle\"\n  - \"ATL::CHandle\"\n  - \"CHandle\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CHandle class\"\nms.assetid: 883e9db5-40ec-4e29-9c74-4dd2ddd2e35d\ncaps.latest.revision: 19\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CHandle Class\nThis class provides methods for creating and using a handle object.  \n  \n## Syntax  \n  \n```\nclass CHandle\n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CHandle::CHandle](#chandle__chandle)|The constructor.|  \n|[CHandle::~CHandle](#chandle___dtorchandle)|The destructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CHandle::Attach](#chandle__attach)|Call this method to attach the `CHandle` object to an existing handle.|  \n|[CHandle::Close](#chandle__close)|Call this method to close a `CHandle` object.|  \n|[CHandle::Detach](#chandle__detach)|Call this method to detach a handle from a `CHandle` object.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CHandle::operator HANDLE](#chandle__operator_handle)|Returns the value of the stored handle.|  \n|[CHandle::operator =](#chandle__operator_eq)|Assignment operator.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CHandle::m_h](#chandle__m_h)|The member variable that stores the handle.|  \n  \n## Remarks  \n A `CHandle` object can be used whenever a handle is required: the main difference is that the `CHandle` object will automatically be deleted.  \n  \n> [!NOTE]\n>  Some API functions will use NULL as an empty or invalid handle, while others use INVALID_HANDLE_VALUE. `CHandle` only uses NULL and will treat INVALID_HANDLE_VALUE as a real handle. If you call an API which can return INVALID_HANDLE_VALUE, you should check for this value before calling [CHandle::Attach](#chandle__attach) or passing it to the `CHandle` constructor, and instead pass NULL.  \n  \n## Requirements  \n **Header:** atlbase.h  \n  \n##  <a name=\"chandle__attach\"></a>  CHandle::Attach  \n Call this method to attach the `CHandle` object to an existing handle.  \n  \n```\nvoid Attach(HANDLE h) throw();\n```  \n  \n### Parameters  \n `h`  \n `CHandle` will take ownership of the handle `h`.  \n  \n### Remarks  \n Assigns the `CHandle` object to the `h` handle. In debugs builds, an ATLASSERT will be raised if `h` is NULL. No other check as to the validity of the handle is made.  \n  \n##  <a name=\"chandle__chandle\"></a>  CHandle::CHandle  \n The constructor.  \n  \n```\nCHandle() throw();\nCHandle(CHandle& h) throw();\nexplicit CHandle(HANDLE   h) throw();\n```  \n  \n### Parameters  \n `h`  \n An existing handle or `CHandle`.  \n  \n### Remarks  \n Creates a new `CHandle` object, optionally using an existing handle or `CHandle` object.  \n  \n##  <a name=\"chandle___dtorchandle\"></a>  CHandle::~CHandle  \n The destructor.  \n  \n```\n~CHandle() throw();\n```  \n  \n### Remarks  \n Frees the `CHandle` object by calling [CHandle::Close](#chandle__close).  \n  \n##  <a name=\"chandle__close\"></a>  CHandle::Close  \n Call this method to close a `CHandle` object.  \n  \n```\nvoid Close() throw();\n```  \n  \n### Remarks  \n Closes an open object handle. If the handle is NULL, which will be the case if **Close** has already been called, an ATLASSERT will be raised in debug builds.  \n  \n##  <a name=\"chandle__detach\"></a>  CHandle::Detach  \n Call this method to detach a handle from a `CHandle` object.  \n  \n```\nHANDLE Detach() throw();\n```  \n  \n### Return Value  \n Returns the handle being detached.  \n  \n### Remarks  \n Releases ownership of the handle.  \n  \n##  <a name=\"chandle__m_h\"></a>  CHandle::m_h  \n The member variable that stores the handle.  \n  \n```\nHANDLE m_h;\n```  \n  \n##  <a name=\"chandle__operator_eq\"></a>  CHandle::operator =  \n The assignment operator.  \n  \n```\nCHandle& operator=(CHandle& h) throw();\n```  \n  \n### Parameters  \n `h`  \n `CHandle` will take ownership of the handle `h`.  \n  \n### Return Value  \n Returns a reference to the new `CHandle` object.  \n  \n### Remarks  \n If the `CHandle` object currently contains a handle, it will be closed. The `CHandle` object being passed in will have its handle reference set to NULL. This ensures that two `CHandle` objects will never contain the same active handle.  \n  \n##  <a name=\"chandle__operator_handle\"></a>  CHandle::operator HANDLE  \n Returns the value of the stored handle.  \n  \n```operator HANDLE() const throw();\n```  \n  \n### Remarks  \n Returns the value stored in [CHandle::m_h](#chandle__m_h).  \n  \n## See Also  \n [Class Overview](../../atl/atl-class-overview.md)\n"}