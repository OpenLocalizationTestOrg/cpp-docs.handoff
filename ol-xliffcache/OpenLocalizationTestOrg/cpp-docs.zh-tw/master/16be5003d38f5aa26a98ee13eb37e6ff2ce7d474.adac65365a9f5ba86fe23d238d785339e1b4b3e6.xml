{"nodes":[{"pos":[12,48],"content":"for Statement (C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"for Statement (C++) | Microsoft Docs","pos":[0,36]}]},{"content":"for Statement (C++)","pos":[586,605]},{"content":"Executes a statement repeatedly until the condition becomes false.","pos":[606,672]},{"content":"For information on the range-based for statement, see <bpt id=\"p1\">[</bpt>Range-based for Statement (C++)<ept id=\"p1\">](../cpp/range-based-for-statement-cpp.md)</ept>.","pos":[673,802],"source":" For information on the range-based for statement, see [Range-based for Statement (C++)](../cpp/range-based-for-statement-cpp.md)."},{"content":"Syntax","pos":[811,817]},{"content":"Remarks","pos":[921,928]},{"pos":[932,1021],"content":"Use the <ph id=\"ph1\">`for`</ph> statement to construct loops that must execute a specified number of times.","source":"Use the `for` statement to construct loops that must execute a specified number of times."},{"pos":[1028,1114],"content":"The <ph id=\"ph1\">`for`</ph> statement consists of three optional parts, as shown in the following table.","source":"The `for` statement consists of three optional parts, as shown in the following table."},{"content":"for Loop Elements","pos":[1124,1141]},{"content":"Syntax Name","pos":[1148,1159]},{"content":"When Executed","pos":[1160,1173]},{"content":"Description","pos":[1174,1185]},{"content":"Before any other element of the <bpt id=\"p1\">**</bpt>for<ept id=\"p1\">**</ept> statement, <ph id=\"ph1\">`init-expression`</ph> is executed only once.","pos":[1268,1359],"source":"Before any other element of the **for** statement, `init-expression` is executed only once."},{"content":"Control then passes to <ph id=\"ph1\">`cond-expression`</ph>.","pos":[1360,1401],"source":" Control then passes to `cond-expression`."},{"content":"Often used to initialize loop indices.","pos":[1402,1440]},{"content":"It can contain expressions or declarations.","pos":[1441,1484]},{"content":"Before execution of each iteration of <ph id=\"ph1\">`statement`</ph>, including the first iteration.","pos":[1507,1588],"source":"Before execution of each iteration of `statement`, including the first iteration."},{"content":"is executed only if <ph id=\"ph1\">`cond-expression`</ph> evaluates to true (nonzero).","pos":[1601,1667],"source":" is executed only if `cond-expression` evaluates to true (nonzero)."},{"content":"An expression that evaluates to an integral type or a class type that has an unambiguous conversion to an integral type.","pos":[1668,1788]},{"content":"Normally used to test for loop-termination criteria.","pos":[1789,1841]},{"content":"At the end of each iteration of <ph id=\"ph1\">`statement`</ph>.","pos":[1864,1908],"source":"At the end of each iteration of `statement`."},{"content":"After <ph id=\"ph1\">`loop-expression`</ph> is executed, <ph id=\"ph2\">`cond-expression`</ph> is evaluated.","pos":[1909,1977],"source":" After `loop-expression` is executed, `cond-expression` is evaluated."},{"content":"Normally used to increment loop indices.","pos":[1978,2018]},{"pos":[2026,2096],"content":"The following examples show different ways to use the <ph id=\"ph1\">`for`</ph> statement.","source":"The following examples show different ways to use the `for` statement."},{"content":"and <ph id=\"ph1\">`loop-expression`</ph> can contain multiple statements separated by commas.","pos":[2669,2743],"source":" and `loop-expression` can contain multiple statements separated by commas."},{"content":"For example:","pos":[2744,2756]},{"pos":[3059,3120],"content":"can be incremented or decremented, or modified in other ways."},{"content":"A <ph id=\"ph1\">`for`</ph> loop terminates when a <bpt id=\"p1\">[</bpt>break<ept id=\"p1\">](../cpp/break-statement-cpp.md)</ept>, <bpt id=\"p2\">[</bpt>return<ept id=\"p2\">](../cpp/return-statement-cpp.md)</ept>, or <bpt id=\"p3\">[</bpt>goto<ept id=\"p3\">](../cpp/goto-statement-cpp.md)</ept> (to a labeled statement outside the <bpt id=\"p4\">**</bpt>for<ept id=\"p4\">**</ept> loop) within <ph id=\"ph2\">`statement`</ph> is executed.","pos":[3424,3658],"source":"A `for` loop terminates when a [break](../cpp/break-statement-cpp.md), [return](../cpp/return-statement-cpp.md), or [goto](../cpp/goto-statement-cpp.md) (to a labeled statement outside the **for** loop) within `statement` is executed."},{"content":"A <bpt id=\"p1\">[</bpt>continue<ept id=\"p1\">](../cpp/continue-statement-cpp.md)</ept> statement in a <ph id=\"ph1\">`for`</ph> loop terminates only the current iteration.","pos":[3659,3770],"source":" A [continue](../cpp/continue-statement-cpp.md) statement in a `for` loop terminates only the current iteration."},{"pos":[3777,3930],"content":"If <ph id=\"ph1\">`cond-expression`</ph> is omitted, it is considered true and the <bpt id=\"p1\">**</bpt>for<ept id=\"p1\">**</ept> loop will not terminate without a <ph id=\"ph2\">`break`</ph>, <ph id=\"ph3\">`return`</ph>, or <ph id=\"ph4\">`goto`</ph> within <ph id=\"ph5\">`statement`</ph>.","source":"If `cond-expression` is omitted, it is considered true and the **for** loop will not terminate without a `break`, `return`, or `goto` within `statement`."},{"content":"Although the three fields of the <ph id=\"ph1\">`for`</ph> statement are normally used for initialization, testing for termination, and incrementing, they are not restricted to these uses.","pos":[3937,4105],"source":"Although the three fields of the `for` statement are normally used for initialization, testing for termination, and incrementing, they are not restricted to these uses."},{"content":"For example, the following code prints the numbers 0 through 4.","pos":[4106,4169]},{"content":"In this case, <ph id=\"ph1\">`statement`</ph> is the null statement:","pos":[4170,4218],"source":" In this case, `statement` is the null statement:"},{"content":"for Loops and the C++ Standard","pos":[4397,4427]},{"content":"The C++ standard says that a variable declared in a <ph id=\"ph1\">`for`</ph> loop shall go out of scope after the <ph id=\"ph2\">`for`</ph> loop ends.","pos":[4431,4542],"source":"The C++ standard says that a variable declared in a `for` loop shall go out of scope after the `for` loop ends."},{"content":"For example:","pos":[4543,4555]},{"pos":[4692,4871],"content":"By default, under <bpt id=\"p1\">[</bpt>/Ze<ept id=\"p1\">](../build/reference/za-ze-disable-language-extensions.md)</ept>, a variable declared in a <ph id=\"ph1\">`for`</ph> loop remains in scope until the <ph id=\"ph2\">`for`</ph> loop's enclosing scope ends.","source":"By default, under [/Ze](../build/reference/za-ze-disable-language-extensions.md), a variable declared in a `for` loop remains in scope until the `for` loop's enclosing scope ends."},{"pos":[4878,5056],"content":"<bpt id=\"p1\">[</bpt>/Zc:forScope<ept id=\"p1\">](../build/reference/zc-forscope-force-conformance-in-for-loop-scope.md)</ept> enables standard behavior of variables declared in for loops without needing to specify /Za.","source":"[/Zc:forScope](../build/reference/zc-forscope-force-conformance-in-for-loop-scope.md) enables standard behavior of variables declared in for loops without needing to specify /Za."},{"pos":[5063,5176],"content":"It is also possible to use the scoping differences of the <ph id=\"ph1\">`for`</ph> loop to redeclare variables under /Ze as follows:","source":"It is also possible to use the scoping differences of the `for` loop to redeclare variables under /Ze as follows:"},{"content":"This more closely mimics the standard behavior of a variable declared in a <ph id=\"ph1\">`for`</ph> loop, which requires variables declared in a <ph id=\"ph2\">`for`</ph> loop to go out of scope after the loop is done.","pos":[5395,5574],"source":"This more closely mimics the standard behavior of a variable declared in a `for` loop, which requires variables declared in a `for` loop to go out of scope after the loop is done."},{"content":"When a variable is declared in a <ph id=\"ph1\">`for`</ph> loop, the compiler internally promotes it to a local variable in the <ph id=\"ph2\">`for`</ph> loop's enclosing scope even if there is already a local variable with the same name.","pos":[5575,5773],"source":" When a variable is declared in a `for` loop, the compiler internally promotes it to a local variable in the `for` loop's enclosing scope even if there is already a local variable with the same name."},{"content":"See Also","pos":[5782,5790]},{"content":"Iteration Statements","pos":[5795,5815]},{"content":"Keywords","pos":[5858,5866]},{"content":"while Statement (C++)","pos":[5897,5918]},{"content":"do-while Statement (C++)","pos":[5956,5980]},{"content":"Range-based for Statement (C++)","pos":[6021,6052]}],"content":"---\ntitle: \"for Statement (C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"for keyword [C++]\"\nms.assetid: 6c7d01b3-c4c1-4c6a-aa58-e2d198f33d4a\ncaps.latest.revision: 15\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# for Statement (C++)\nExecutes a statement repeatedly until the condition becomes false. For information on the range-based for statement, see [Range-based for Statement (C++)](../cpp/range-based-for-statement-cpp.md).  \n  \n## Syntax  \n  \n```  \nfor ( init-expression ; cond-expression ; loop-expression )   \n    statement;  \n```  \n  \n## Remarks  \n Use the `for` statement to construct loops that must execute a specified number of times.  \n  \n The `for` statement consists of three optional parts, as shown in the following table.  \n  \n### for Loop Elements  \n  \n|Syntax Name|When Executed|Description|  \n|-----------------|-------------------|-----------------|  \n|`init-expression`|Before any other element of the **for** statement, `init-expression` is executed only once. Control then passes to `cond-expression`.|Often used to initialize loop indices. It can contain expressions or declarations.|  \n|`cond-expression`|Before execution of each iteration of `statement`, including the first iteration. `statement` is executed only if `cond-expression` evaluates to true (nonzero).|An expression that evaluates to an integral type or a class type that has an unambiguous conversion to an integral type. Normally used to test for loop-termination criteria.|  \n|`loop-expression`|At the end of each iteration of `statement`. After `loop-expression` is executed, `cond-expression` is evaluated.|Normally used to increment loop indices.|  \n  \n The following examples show different ways to use the `for` statement.  \n  \n```cpp  \n#include <iostream>  \nusing namespace std;  \n  \nint main() {  \n    // The counter variable can be declared in the init-expression.  \n    for (int i = 0; i < 2; i++ ){   \n       cout << i;  \n    }  \n    // Output: 01  \n    // The counter variable can be declared outside the for loop.  \n    int i;  \n    for (i = 0; i < 2; i++){  \n        cout << i;  \n    }  \n    // Output: 01  \n    // These for loops are the equivalent of a while loop.  \n    i = 0;  \n    while (i < 2){  \n        cout << i++;  \n    }  \n}  \n    // Output: 012  \n```  \n  \n `init-expression` and `loop-expression` can contain multiple statements separated by commas. For example:  \n  \n```cpp  \n#include <iostream>  \nusing namespace std;  \n  \nint main(){  \n    int i, j;  \n    for ( i = 5, j = 10 ; i + j < 20; i++, j++ ) {  \n        cout << \"i + j = \" << (i + j) << '\\n';  \n    }  \n}  \n    // Output:  \n    i + j = 15  \n    i + j = 17  \n    i + j = 19  \n```  \n  \n `loop-expression` can be incremented or decremented, or modified in other ways.  \n  \n```cpp  \n#include <iostream>  \nusing namespace std;  \n  \nint main(){  \nfor (int i = 10; i > 0; i--) {  \n        cout << i << ' ';  \n    }  \n    // Output: 10 9 8 7 6 5 4 3 2 1  \n    for (int i = 10; i < 20; i = i+2) {  \n        cout << i << ' ';  \n    }  \n    // Output: 10 12 14 16 18  \n```  \n  \n A `for` loop terminates when a [break](../cpp/break-statement-cpp.md), [return](../cpp/return-statement-cpp.md), or [goto](../cpp/goto-statement-cpp.md) (to a labeled statement outside the **for** loop) within `statement` is executed. A [continue](../cpp/continue-statement-cpp.md) statement in a `for` loop terminates only the current iteration.  \n  \n If `cond-expression` is omitted, it is considered true and the **for** loop will not terminate without a `break`, `return`, or `goto` within `statement`.  \n  \n Although the three fields of the `for` statement are normally used for initialization, testing for termination, and incrementing, they are not restricted to these uses. For example, the following code prints the numbers 0 through 4. In this case, `statement` is the null statement:  \n  \n```cpp  \n#include <iostream>  \nusing namespace std;  \n  \nint main()  \n{  \n    int i;  \n    for( i = 0; i < 5; cout << i << '\\n', i++){  \n        ;  \n    }  \n}  \n```  \n  \n## for Loops and the C++ Standard  \n The C++ standard says that a variable declared in a `for` loop shall go out of scope after the `for` loop ends. For example:  \n  \n```cpp  \nfor (int i = 0 ; i < 5 ; i++) {  \n   // do something  \n}  \n// i is now out of scope under /Za or /Zc:forScope  \n```  \n  \n By default, under [/Ze](../build/reference/za-ze-disable-language-extensions.md), a variable declared in a `for` loop remains in scope until the `for` loop's enclosing scope ends.  \n  \n [/Zc:forScope](../build/reference/zc-forscope-force-conformance-in-for-loop-scope.md) enables standard behavior of variables declared in for loops without needing to specify /Za.  \n  \n It is also possible to use the scoping differences of the `for` loop to redeclare variables under /Ze as follows:  \n  \n```cpp  \n// for_statement5.cpp  \nint main(){  \n   int i = 0;   // hidden by var with same name declared in for loop  \n   for ( int i = 0 ; i < 3; i++ ) {}  \n  \n   for ( int i = 0 ; i < 3; i++ ) {}  \n}  \n```  \n  \n This more closely mimics the standard behavior of a variable declared in a `for` loop, which requires variables declared in a `for` loop to go out of scope after the loop is done. When a variable is declared in a `for` loop, the compiler internally promotes it to a local variable in the `for` loop's enclosing scope even if there is already a local variable with the same name.  \n  \n## See Also  \n [Iteration Statements](../cpp/iteration-statements-cpp.md)   \n [Keywords](../cpp/keywords-cpp.md)   \n [while Statement (C++)](../cpp/while-statement-cpp.md)   \n [do-while Statement (C++)](../cpp/do-while-statement-cpp.md)   \n [Range-based for Statement (C++)](../cpp/range-based-for-statement-cpp.md)"}