{"nodes":[{"pos":[12,59],"content":"exponential_distribution Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"exponential_distribution Class | Microsoft Docs","pos":[0,47]}]},{"content":"exponential_distribution Class","pos":[886,916]},{"content":"Generates an exponential distribution.","pos":[917,955]},{"content":"Syntax","pos":[964,970]},{"content":"Parameters","pos":[1658,1668]},{"content":"The floating-point result type, defaults to <ph id=\"ph1\">`double`</ph>.","pos":[1686,1739],"source":" The floating-point result type, defaults to `double`."},{"content":"For possible types, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","pos":[1740,1807],"source":" For possible types, see [\\<random>](../standard-library/random.md)."},{"content":"Remarks","pos":[1816,1823]},{"content":"The template class describes a distribution that produces values of a user-specified integral type, or type <ph id=\"ph1\">`double`</ph> if none is provided, distributed according to the Exponential Distribution.","pos":[1827,2019],"source":"The template class describes a distribution that produces values of a user-specified integral type, or type `double` if none is provided, distributed according to the Exponential Distribution."},{"content":"The following table links to articles about individual members.","pos":[2020,2083]},{"content":"exponential_distribution::exponential_distribution","pos":[2108,2158]},{"content":"exponential_distribution::param_type","pos":[2327,2363]},{"pos":[2411,2509],"content":"The property function <ph id=\"ph1\">`lambda()`</ph> returns the value for the stored distribution parameter <ph id=\"ph2\">`lambda`</ph>.","source":"The property function `lambda()` returns the value for the stored distribution parameter `lambda`."},{"pos":[2516,2630],"content":"For more information about distribution classes and their members, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","source":"For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md)."},{"pos":[2637,2805],"content":"For detailed information about the exponential distribution, see the Wolfram MathWorld article <bpt id=\"p1\">[</bpt>Exponential Distribution<ept id=\"p1\">](http://go.microsoft.com/fwlink/LinkId=401098)</ept>.","source":"For detailed information about the exponential distribution, see the Wolfram MathWorld article [Exponential Distribution](http://go.microsoft.com/fwlink/LinkId=401098)."},{"content":"Example","pos":[2814,2821]},{"content":"Output","pos":[4461,4467]},{"content":"Requirements","pos":[5025,5037]},{"pos":[5041,5062],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>random&gt;","source":"**Header:** \\<random>"},{"pos":[5069,5087],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[5164,5214],"content":"exponential_distribution::exponential_distribution"},{"content":"Constructs the distribution.","pos":[5218,5246]},{"content":"Parameters","pos":[5391,5401]},{"content":"The <ph id=\"ph1\">`lambda`</ph> distribution parameter.","pos":[5417,5453],"source":" The `lambda` distribution parameter."},{"content":"The parameter package used to construct the distribution.","pos":[5470,5527]},{"content":"Remarks","pos":[5537,5544]},{"pos":[5550,5563],"content":"Precondition:"},{"pos":[5587,5683],"content":"The first constructor constructs an object whose stored <ph id=\"ph1\">`lambda`</ph> value holds the value <ph id=\"ph2\">`lambda`</ph>.","source":"The first constructor constructs an object whose stored `lambda` value holds the value `lambda`."},{"content":"The second constructor constructs an object whose stored parameters are initialized from <ph id=\"ph1\">`parm`</ph>.","pos":[5690,5786],"source":"The second constructor constructs an object whose stored parameters are initialized from `parm`."},{"content":"You can obtain and set the current parameters of an existing distribution by calling the <ph id=\"ph1\">`param()`</ph> member function.","pos":[5787,5902],"source":" You can obtain and set the current parameters of an existing distribution by calling the `param()` member function."},{"pos":[5965,6001],"content":"exponential_distribution::param_type"},{"content":"Stores the parameters of the distribution.","pos":[6005,6047]},{"content":"struct param_type {","pos":[6053,6072]},{"content":"typedef exponential_distribution<ph id=\"ph1\">\\&lt;</ph>RealType&gt; distribution_type;","pos":[6078,6140],"source":"   typedef exponential_distribution\\<RealType> distribution_type;"},{"content":"param_type(RealType lambda = 1.0); RealType lambda() const; .....","pos":[6146,6217],"source":"   param_type(RealType lambda = 1.0);\n   RealType lambda() const;\n   ....."},{"content":"bool operator==(const param_type&amp; right) const; bool operator!=(const param_type&amp; right) const; };","pos":[6223,6327],"source":"   bool operator==(const param_type& right) const;\n   bool operator!=(const param_type& right) const;\n   };"},{"content":"Parameters","pos":[6337,6347]},{"pos":[6351,6456],"content":"See parent topic <bpt id=\"p1\">[</bpt>exponential_distribution Class<ept id=\"p1\">](../standard-library/exponential-distribution-class.md)</ept>.","source":"See parent topic [exponential_distribution Class](../standard-library/exponential-distribution-class.md)."},{"content":"Remarks","pos":[6466,6473]},{"pos":[6479,6492],"content":"Precondition:"},{"pos":[6516,6759],"content":"This structure can be passed to the distribution's class constructor at instantiation, to the <ph id=\"ph1\">`param()`</ph> member function to set the stored parameters of an existing distribution, and to <ph id=\"ph2\">`operator()`</ph> to be used in place of the stored parameters.","source":"This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters."},{"content":"See Also","pos":[6768,6776]},{"content":"random&gt;","pos":[6783,6790],"source":"random>"}],"content":"---\ntitle: \"exponential_distribution Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std::tr1::exponential_distribution\"\n  - \"exponential_distribution\"\n  - \"tr1::exponential_distribution\"\n  - \"tr1.exponential_distribution\"\n  - \"random/std::tr1::exponential_distribution\"\n  - \"std.tr1.exponential_distribution\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"exponential_distribution class [TR1]\"\n  - \"exponential_distribution class\"\nms.assetid: d54f3126-a09b-45f9-a30b-0d94d03bcdc9\ncaps.latest.revision: 18\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# exponential_distribution Class\nGenerates an exponential distribution.  \n  \n## Syntax  \n```  \nclass exponential_distribution  \n   {  \n   public:  // types  \n   typedef RealType result_type;  \n   struct param_type;  // constructors and reset functions  \n   explicit exponential_distribution(RealType lambda = 1.0);\n   explicit exponential_distribution(const param_type& parm);\n   void reset();\n   // generating functions  \n   template <class URNG>  \n   result_type operator()(URNG& gen);\n   template <class URNG>  \n   result_type operator()(URNG& gen, const param_type& parm);\n   // property functions  \n   RealType lambda() const;\n   param_type param() const;\n   void param(const param_type& parm);\n   result_type min() const;\n   result_type max() const;\n   };  \n``` \n#### Parameters  \n `RealType`  \n The floating-point result type, defaults to `double`. For possible types, see [\\<random>](../standard-library/random.md).  \n  \n## Remarks  \n The template class describes a distribution that produces values of a user-specified integral type, or type `double` if none is provided, distributed according to the Exponential Distribution. The following table links to articles about individual members.  \n  \n||||  \n|-|-|-|  \n|[exponential_distribution::exponential_distribution](#exponential_distribution__exponential_distribution)|`exponential_distribution::lambda`|`exponential_distribution::param`|  \n|`exponential_distribution::operator()`||[exponential_distribution::param_type](#exponential_distribution__param_type)|  \n  \n The property function `lambda()` returns the value for the stored distribution parameter `lambda`.  \n  \n For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md).  \n  \n For detailed information about the exponential distribution, see the Wolfram MathWorld article [Exponential Distribution](http://go.microsoft.com/fwlink/LinkId=401098).  \n  \n## Example  \n  \n```cpp  \n// compile with: /EHsc /W4  \n#include <random>   \n#include <iostream>  \n#include <iomanip>  \n#include <string>  \n#include <map>  \n  \nvoid test(const double l, const int s) {  \n  \n    // uncomment to use a non-deterministic generator  \n    //    std::random_device gen;  \n    std::mt19937 gen(1701);  \n  \n    std::exponential_distribution<> distr(l);  \n  \n    std::cout << std::endl;  \n    std::cout << \"min() == \" << distr.min() << std::endl;  \n    std::cout << \"max() == \" << distr.max() << std::endl;  \n    std::cout << \"lambda() == \" << std::fixed << std::setw(11) << std::setprecision(10) << distr.lambda() << std::endl;  \n  \n    // generate the distribution as a histogram  \n    std::map<double, int> histogram;  \n    for (int i = 0; i < s; ++i) {  \n        ++histogram[distr(gen)];  \n    }  \n  \n    // print results  \n    std::cout << \"Distribution for \" << s << \" samples:\" << std::endl;  \n    int counter = 0;  \n    for (const auto& elem : histogram) {  \n        std::cout << std::fixed << std::setw(11) << ++counter << \": \"  \n            << std::setw(14) << std::setprecision(10) << elem.first << std::endl;  \n    }  \n    std::cout << std::endl;  \n}  \n  \nint main()  \n{  \n    double l_dist = 0.5;  \n    int samples = 10;  \n  \n    std::cout << \"Use CTRL-Z to bypass data entry and run using default values.\" << std::endl;  \n    std::cout << \"Enter a floating point value for the 'lambda' distribution parameter (must be greater than zero): \";  \n    std::cin >> l_dist;  \n    std::cout << \"Enter an integer value for the sample count: \";  \n    std::cin >> samples;  \n  \n    test(l_dist, samples);  \n}  \n  \n```  \n  \n## Output  \n  \n```  \nUse CTRL-Z to bypass data entry and run using default values.  \nEnter a floating point value for the 'lambda' distribution parameter (must be greater than zero): 1  \nEnter an integer value for the sample count: 10  \n \nmin() == 0  \nmax() == 1.79769e+308  \nlambda() == 1.0000000000  \nDistribution for 10 samples:  \n    1: 0.0936880533  \n    2: 0.1225944894  \n    3: 0.6443593183  \n    4: 0.6551171649  \n    5: 0.7313457551  \n    6: 0.7313557977  \n    7: 0.7590097389  \n    8: 1.4466885214  \n    9: 1.6434088411  \n    10: 2.1201210996  \n```  \n  \n## Requirements  \n **Header:** \\<random>  \n  \n **Namespace:** std  \n  \n##  <a name=\"exponential_distribution__exponential_distribution\"></a>  exponential_distribution::exponential_distribution  \n Constructs the distribution.  \n  \n```  \nexplicit exponential_distribution(RealType lambda = 1.0);\n\n \nexplicit exponential_distribution(const param_type& parm);\n```  \n  \n### Parameters  \n `lambda`  \n The `lambda` distribution parameter.  \n  \n `parm`  \n The parameter package used to construct the distribution.  \n  \n### Remarks  \n **Precondition:** `0.0 < lambda`  \n  \n The first constructor constructs an object whose stored `lambda` value holds the value `lambda`.  \n  \n The second constructor constructs an object whose stored parameters are initialized from `parm`. You can obtain and set the current parameters of an existing distribution by calling the `param()` member function.  \n  \n##  <a name=\"exponential_distribution__param_type\"></a>  exponential_distribution::param_type  \n Stores the parameters of the distribution.  \n  \nstruct param_type {  \n   typedef exponential_distribution\\<RealType> distribution_type;  \n   param_type(RealType lambda = 1.0);\n   RealType lambda() const;\n   .....  \n   bool operator==(const param_type& right) const;\n   bool operator!=(const param_type& right) const;\n   };  \n  \n### Parameters  \n See parent topic [exponential_distribution Class](../standard-library/exponential-distribution-class.md).  \n  \n### Remarks  \n **Precondition:** `0.0 < lambda`  \n  \n This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters.  \n  \n## See Also  \n [\\<random>](../standard-library/random.md)\n\n"}