{"nodes":[{"pos":[12,38],"content":"attribute | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"attribute | Microsoft Docs","pos":[0,26]}]},{"content":"attribute","pos":[704,713]},{"content":"Allows you to create a custom attribute.","pos":[714,754]},{"content":"Syntax","pos":[763,769]},{"content":"Parameters","pos":[890,900]},{"content":"AllowOn","pos":[905,912]},{"content":"Specifies the language elements to which the custom attribute can be applied.","pos":[917,994]},{"content":"Default is <bpt id=\"p1\">**</bpt>System::AttributeTargets::All<ept id=\"p1\">**</ept> (see <bpt id=\"p2\">[</bpt>System::AttributeTargets<ept id=\"p2\">](https://msdn.microsoft.com/en-us/library/system.attributetargets.aspx)</ept>).","pos":[995,1144],"source":" Default is **System::AttributeTargets::All** (see [System::AttributeTargets](https://msdn.microsoft.com/en-us/library/system.attributetargets.aspx))."},{"content":"Specifies whether the custom attribute can be applied repeatedly to a construct.","pos":[1170,1250]},{"content":"Default is <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>.","pos":[1251,1272],"source":" Default is **FALSE**."},{"content":"Indicates if the attribute is to be inherited by subclasses.","pos":[1294,1354]},{"content":"The compiler provides no special support for this functionality; it is the job of the attribute consumers (Reflection, for example) to respect this information.","pos":[1355,1515]},{"content":"If <ph id=\"ph1\">`Inherited`</ph> is <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, the attribute is inherited.","pos":[1516,1571],"source":" If `Inherited` is **TRUE**, the attribute is inherited."},{"content":"If <ph id=\"ph1\">`AllowMultiple`</ph> is <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, the attribute will accumulate on the derived member; if <ph id=\"ph2\">`AllowMultiple`</ph> is <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>, the attribute will override (or replace) in inheritance.","pos":[1572,1746],"source":" If `AllowMultiple` is **TRUE**, the attribute will accumulate on the derived member; if `AllowMultiple` is **FALSE**, the attribute will override (or replace) in inheritance."},{"content":"If <ph id=\"ph1\">`Inherited`</ph> is <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>, the attribute will not be inherited.","pos":[1747,1812],"source":" If `Inherited` is **FALSE**, the attribute will not be inherited."},{"content":"Default is <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>.","pos":[1813,1833],"source":" Default is **TRUE**."},{"content":"Remarks","pos":[1842,1849]},{"pos":[1857,2137],"content":"[!NOTE]\n The `attribute` attribute is now deprecated.  Use the common language runtime attribute System.Attribute to directly to create user-defined attirbutes.  For more information, see [User-Defined Attributes](../windows/user-defined-attributes-cpp-component-extensions.md).","leadings":["","> "],"nodes":[{"content":" The `attribute` attribute is now deprecated.  Use the common language runtime attribute System.Attribute to directly to create user-defined attirbutes.  For more information, see [User-Defined Attributes](../windows/user-defined-attributes-cpp-component-extensions.md).","pos":[8,278],"nodes":[{"content":"The <ph id=\"ph1\">`attribute`</ph> attribute is now deprecated.","pos":[1,45],"source":" The `attribute` attribute is now deprecated."},{"content":"Use the common language runtime attribute System.Attribute to directly to create user-defined attirbutes.","pos":[47,152]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>User-Defined Attributes<ept id=\"p1\">](../windows/user-defined-attributes-cpp-component-extensions.md)</ept>.","pos":[154,270],"source":"  For more information, see [User-Defined Attributes](../windows/user-defined-attributes-cpp-component-extensions.md)."}]}]},{"content":"You define a <bpt id=\"p1\">[</bpt>custom attribute<ept id=\"p1\">](../windows/custom-attributes-cpp.md)</ept> by placing the <ph id=\"ph1\">`attribute`</ph> attribute on a managed class or struct definition.","pos":[2144,2290],"source":"You define a [custom attribute](../windows/custom-attributes-cpp.md) by placing the `attribute` attribute on a managed class or struct definition."},{"content":"The name of the class is the custom attribute.","pos":[2291,2337]},{"content":"For example:","pos":[2338,2350]},{"content":"defines an attribute called MyAttr that can be applied to function parameters.","pos":[2429,2507]},{"content":"The class must be public if the attribute is going to be used in other assemblies.","pos":[2508,2590]},{"pos":[2598,2836],"content":"[!NOTE]\n To prevent namespace collisions, all attribute names implicitly end with \"Attribute\"; in this example, the name of the attribute and class is actually MyAttrAttribute, but MyAttr and MyAttrAttribute can be used interchangeably.","leadings":["","> "],"nodes":[{"content":"To prevent namespace collisions, all attribute names implicitly end with \"Attribute\"; in this example, the name of the attribute and class is actually MyAttrAttribute, but MyAttr and MyAttrAttribute can be used interchangeably.","pos":[9,236]}]},{"content":"The class's public constructors define the attribute's unnamed parameters.","pos":[2843,2917]},{"content":"Overloaded constructors allow multiple ways of specifying the attribute, so a custom attribute that is defined the following way:","pos":[2918,3047]},{"content":"The class's public data members and properties are the attribute's optional named parameters:","pos":[3531,3624]},{"pos":[4240,4351],"content":"For a list of possible attribute parameter types, see <bpt id=\"p1\">[</bpt>Custom Attributes<ept id=\"p1\">](../windows/custom-attributes-cpp.md)</ept>.","source":"For a list of possible attribute parameter types, see [Custom Attributes](../windows/custom-attributes-cpp.md)."},{"pos":[4358,4490],"content":"See <bpt id=\"p1\">[</bpt>User-Defined Attributes<ept id=\"p1\">](../windows/user-defined-attributes-cpp-component-extensions.md)</ept> for a discussion on attribute targets.","source":"See [User-Defined Attributes](../windows/user-defined-attributes-cpp-component-extensions.md) for a discussion on attribute targets."},{"pos":[4497,4673],"content":"The <ph id=\"ph1\">`attribute`</ph> attribute has an <ph id=\"ph2\">`AllowMultiple`</ph> parameter that specifies whether the custom attribute is single use or multiuse (can appear more than once on the same entity).","source":"The `attribute` attribute has an `AllowMultiple` parameter that specifies whether the custom attribute is single use or multiuse (can appear more than once on the same entity)."},{"content":"Custom attribute classes are derived directly or indirectly from &lt;xref:System.ComponentModel.AttributeCollection.%23ctor%2A&gt;, which makes identifying attribute definitions in metadata fast and easy.","pos":[4971,5169],"source":"Custom attribute classes are derived directly or indirectly from <xref:System.ComponentModel.AttributeCollection.%23ctor%2A>, which makes identifying attribute definitions in metadata fast and easy."},{"content":"The <ph id=\"ph1\">`attribute`</ph> attribute implies inheritance from System::Attribute, so explicit derivation is not necessary:","pos":[5170,5280],"source":" The `attribute` attribute implies inheritance from System::Attribute, so explicit derivation is not necessary:"},{"content":"is equivalent to","pos":[5344,5360]},{"pos":[5480,5635],"content":"is an alias for &lt;xref:System.AttributeUsageAttribute?displayProperty=fullName&gt; (not AttributeAttribute; this is an exception to the attribute naming rule).","source":" is an alias for <xref:System.AttributeUsageAttribute?displayProperty=fullName> (not AttributeAttribute; this is an exception to the attribute naming rule)."},{"content":"Requirements","pos":[5644,5656]},{"content":"Attribute Context","pos":[5666,5683]},{"content":"Applies to","pos":[5706,5716]},{"pos":[5725,5750],"content":"<bpt id=\"p1\">**</bpt>class<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>ref struct<ept id=\"p2\">**</ept>","source":"**class**, **ref struct**"},{"content":"Repeatable","pos":[5757,5767]},{"content":"No","pos":[5770,5772]},{"content":"Required attributes","pos":[5779,5798]},{"content":"None","pos":[5801,5805]},{"content":"Invalid attributes","pos":[5812,5830]},{"content":"None","pos":[5833,5837]},{"pos":[5845,5955],"content":"For more information about the attribute contexts, see <bpt id=\"p1\">[</bpt>Attribute Contexts<ept id=\"p1\">](../windows/attribute-contexts.md)</ept>.","source":"For more information about the attribute contexts, see [Attribute Contexts](../windows/attribute-contexts.md)."},{"content":"Example","pos":[5964,5971]},{"content":"Example","pos":[6259,6266]},{"pos":[6270,6408],"content":"The <ph id=\"ph1\">`Inherited`</ph> named argument specifies whether a custom attribute applied on a base class will show up on reflection of a derived class.","source":"The `Inherited` named argument specifies whether a custom attribute applied on a base class will show up on reflection of a derived class."},{"content":"See Also","pos":[7286,7294]},{"content":"Attributes Alphabetical Reference","pos":[7299,7332]},{"content":"Custom Attributes","pos":[7388,7405]}],"content":"---\ntitle: \"attribute | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"vc-attr.attribute\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"__typeof keyword\"\n  - \"custom attributes, creating\"\n  - \"attribute attribute\"\n  - \"attributes [C++], custom\"\nms.assetid: 8cb3489f-65c4-44ea-b0aa-3c3c6b15741d\ncaps.latest.revision: 18\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# attribute\nAllows you to create a custom attribute.  \n  \n## Syntax  \n  \n```  \n  \n      [ attribute(  \n   AllowOn,  \n   AllowMultiple=boolean,  \n   Inherited=boolean  \n) ]  \n```  \n  \n#### Parameters  \n *AllowOn*  \n Specifies the language elements to which the custom attribute can be applied. Default is **System::AttributeTargets::All** (see [System::AttributeTargets](https://msdn.microsoft.com/en-us/library/system.attributetargets.aspx)).  \n  \n `AllowMultiple`  \n Specifies whether the custom attribute can be applied repeatedly to a construct. Default is **FALSE**.  \n  \n `Inherited`  \n Indicates if the attribute is to be inherited by subclasses. The compiler provides no special support for this functionality; it is the job of the attribute consumers (Reflection, for example) to respect this information. If `Inherited` is **TRUE**, the attribute is inherited. If `AllowMultiple` is **TRUE**, the attribute will accumulate on the derived member; if `AllowMultiple` is **FALSE**, the attribute will override (or replace) in inheritance. If `Inherited` is **FALSE**, the attribute will not be inherited. Default is **TRUE**.  \n  \n## Remarks  \n  \n> [!NOTE]\n>  The `attribute` attribute is now deprecated.  Use the common language runtime attribute System.Attribute to directly to create user-defined attirbutes.  For more information, see [User-Defined Attributes](../windows/user-defined-attributes-cpp-component-extensions.md).  \n  \n You define a [custom attribute](../windows/custom-attributes-cpp.md) by placing the `attribute` attribute on a managed class or struct definition. The name of the class is the custom attribute. For example:  \n  \n```  \n[ attribute(Parameter) ]  \npublic ref class MyAttr {};  \n```  \n  \n defines an attribute called MyAttr that can be applied to function parameters. The class must be public if the attribute is going to be used in other assemblies.  \n  \n> [!NOTE]\n>  To prevent namespace collisions, all attribute names implicitly end with \"Attribute\"; in this example, the name of the attribute and class is actually MyAttrAttribute, but MyAttr and MyAttrAttribute can be used interchangeably.  \n  \n The class's public constructors define the attribute's unnamed parameters. Overloaded constructors allow multiple ways of specifying the attribute, so a custom attribute that is defined the following way:  \n  \n```  \n// cpp_attr_ref_attribute.cpp  \n// compile with: /c /clr  \nusing namespace System;  \n[ attribute(AttributeTargets::Class) ]   // apply attribute to classes  \npublic ref class MyAttr {  \npublic:  \n   MyAttr() {}   // Constructor with no parameters  \n   MyAttr(int arg1) {}   // Constructor with one parameter  \n};  \n  \n[MyAttr]  \nref class ClassA {};   // Attribute with no parameters  \n  \n[MyAttr(123)]  \nref class ClassB {};   // Attribute with one parameter  \n```  \n  \n The class's public data members and properties are the attribute's optional named parameters:  \n  \n```  \n// cpp_attr_ref_attribute_2.cpp  \n// compile with: /c /clr  \nusing namespace System;  \n[ attribute(AttributeTargets::Class) ]  \nref class MyAttr {  \npublic:  \n   // Property Priority becomes attribute's named parameter Priority  \n    property int Priority {  \n       void set(int value) {}  \n       int get() { return 0;}  \n   }  \n   // Data member Version becomes attribute's named parameter Version  \n   int Version;  \n   MyAttr() {}   // constructor with no parameters  \n   MyAttr(int arg1) {}   // constructor with one parameter  \n};  \n  \n[MyAttr(123, Version=2)]   \nref class ClassC {};  \n```  \n  \n For a list of possible attribute parameter types, see [Custom Attributes](../windows/custom-attributes-cpp.md).  \n  \n See [User-Defined Attributes](../windows/user-defined-attributes-cpp-component-extensions.md) for a discussion on attribute targets.  \n  \n The `attribute` attribute has an `AllowMultiple` parameter that specifies whether the custom attribute is single use or multiuse (can appear more than once on the same entity).  \n  \n```  \n// cpp_attr_ref_attribute_3.cpp  \n// compile with: /c /clr  \nusing namespace System;  \n[ attribute(AttributeTargets::Class, AllowMultiple = true) ]  \nref struct MyAttr {  \n   MyAttr(){}  \n};   // MyAttr is a multiuse attribute  \n  \n[MyAttr, MyAttr()]  \nref class ClassA {};  \n```  \n  \n Custom attribute classes are derived directly or indirectly from <xref:System.ComponentModel.AttributeCollection.%23ctor%2A>, which makes identifying attribute definitions in metadata fast and easy. The `attribute` attribute implies inheritance from System::Attribute, so explicit derivation is not necessary:  \n  \n```  \n[ attribute(Class) ]  \nref class MyAttr  \n```  \n  \n is equivalent to  \n  \n```  \n[ attribute(Class) ]  \nref class MyAttr : System::Attribute   // OK, but redundant.  \n```  \n  \n `attribute` is an alias for <xref:System.AttributeUsageAttribute?displayProperty=fullName> (not AttributeAttribute; this is an exception to the attribute naming rule).  \n  \n## Requirements  \n  \n### Attribute Context  \n  \n|||  \n|-|-|  \n|**Applies to**|`ref` **class**, **ref struct**|  \n|**Repeatable**|No|  \n|**Required attributes**|None|  \n|**Invalid attributes**|None|  \n  \n For more information about the attribute contexts, see [Attribute Contexts](../windows/attribute-contexts.md).  \n  \n## Example  \n  \n```  \n// cpp_attr_ref_attribute_4.cpp  \n// compile with: /c /clr  \nusing namespace System;  \n[attribute(AttributeTargets::Class)]  \nref struct ABC {  \n   ABC(Type ^) {}  \n};  \n  \n[ABC(String::typeid)]   // typeid operator yields System::Type ^  \nref class MyClass {};  \n```  \n  \n## Example  \n The `Inherited` named argument specifies whether a custom attribute applied on a base class will show up on reflection of a derived class.  \n  \n```  \n// cpp_attr_ref_attribute_5.cpp  \n// compile with: /clr  \nusing namespace System;  \nusing namespace System::Reflection;  \n  \n[attribute( AttributeTargets::Method, Inherited=false )]  \nref class BaseOnlyAttribute { };  \n  \n[attribute( AttributeTargets::Method, Inherited=true )]  \nref class DerivedTooAttribute { };  \n  \nref struct IBase {  \npublic:  \n   [BaseOnly, DerivedToo]  \n   virtual void meth() {}  \n};  \n  \n// Reflection on Derived::meth will show DerivedTooAttribute   \n// but not BaseOnlyAttribute.  \nref class Derived : public IBase {  \npublic:  \n   virtual void meth() override {}  \n};  \n  \nint main() {  \n   IBase ^ pIB = gcnew Derived;  \n  \n   MemberInfo ^ pMI = pIB->GetType( )->GetMethod( \"meth\" );  \n   array<Object ^> ^ pObjs = pMI->GetCustomAttributes( true );  \n   Console::WriteLine( pObjs->Length ) ;  \n}  \n```  \n  \n```Output  \n2  \n```  \n  \n## See Also  \n [Attributes Alphabetical Reference](../windows/attributes-alphabetical-reference.md)   \n [Custom Attributes](http://msdn.microsoft.com/en-us/558ebdb2-082f-44dc-b442-d8d33bf7bdb8)"}