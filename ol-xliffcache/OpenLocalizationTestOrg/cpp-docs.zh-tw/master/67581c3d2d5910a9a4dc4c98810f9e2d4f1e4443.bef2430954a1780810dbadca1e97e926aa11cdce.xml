{"nodes":[{"pos":[12,67],"content":"How to: Migrate to -clr:safe (C++-CLI) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Migrate to -clr:safe (C++-CLI) | Microsoft Docs","pos":[0,55]}]},{"content":"How to: Migrate to /clr:safe (C++/CLI)","pos":[783,821]},{"pos":[822,976],"content":"Visual C++ can generate verifiable components by using <bpt id=\"p1\">**</bpt>/clr:safe<ept id=\"p1\">**</ept>, which causes the compiler to generate errors for each non-verifiable code construct.","source":"Visual C++ can generate verifiable components by using **/clr:safe**, which causes the compiler to generate errors for each non-verifiable code construct."},{"content":"Remarks","pos":[985,992]},{"content":"The following issues generate verifiability errors:","pos":[996,1047]},{"content":"Native types.","pos":[1057,1070]},{"content":"Even if it isn't used, the declaration of native classes, structures, pointers, or arrays will prevent compilation.","pos":[1071,1186]},{"content":"Global variables","pos":[1196,1212]},{"content":"Function calls into any unmanaged library, including common language runtime function calls","pos":[1222,1313]},{"content":"A verifiable function cannot contain a <bpt id=\"p1\">[</bpt>static_cast Operator<ept id=\"p1\">](../cpp/static-cast-operator.md)</ept> for down-casting.","pos":[1323,1434],"source":"A verifiable function cannot contain a [static_cast Operator](../cpp/static-cast-operator.md) for down-casting."},{"content":"The <bpt id=\"p1\">[</bpt>static_cast Operator<ept id=\"p1\">](../cpp/static-cast-operator.md)</ept> can be used for casting between primitive types, but for down-casting, <bpt id=\"p2\">[</bpt>safe_cast<ept id=\"p2\">](../windows/safe-cast-cpp-component-extensions.md)</ept> or a C-Style cast (which is implemented as a <bpt id=\"p3\">[</bpt>safe_cast<ept id=\"p3\">](../windows/safe-cast-cpp-component-extensions.md)</ept>) must be used.","pos":[1435,1748],"source":" The [static_cast Operator](../cpp/static-cast-operator.md) can be used for casting between primitive types, but for down-casting, [safe_cast](../windows/safe-cast-cpp-component-extensions.md) or a C-Style cast (which is implemented as a [safe_cast](../windows/safe-cast-cpp-component-extensions.md)) must be used."},{"pos":[1758,1895],"content":"A verifiable function cannot contain a <bpt id=\"p1\">[</bpt>reinterpret_cast Operator<ept id=\"p1\">](../cpp/reinterpret-cast-operator.md)</ept> (or any C-style cast equivalent).","source":"A verifiable function cannot contain a [reinterpret_cast Operator](../cpp/reinterpret-cast-operator.md) (or any C-style cast equivalent)."},{"content":"A verifiable function cannot perform arithmetic on an <bpt id=\"p1\">[</bpt>interior_ptr (C++/CLI)<ept id=\"p1\">](../windows/interior-ptr-cpp-cli.md)</ept>.","pos":[1905,2020],"source":"A verifiable function cannot perform arithmetic on an [interior_ptr (C++/CLI)](../windows/interior-ptr-cpp-cli.md)."},{"content":"It may only assign to it and dereference it.","pos":[2021,2065]},{"content":"A verifiable function can only throw or catch pointers to reference types, so value types must be boxed before throwing.","pos":[2075,2195]},{"pos":[2205,2398],"content":"A verifiable function can only call verifiable functions (such that calls to the common language runtime are not allowed, include <ph id=\"ph1\">`AtEntry`/`AtExit`</ph>, and so global constructors are disallowed).","source":"A verifiable function can only call verifiable functions (such that calls to the common language runtime are not allowed, include `AtEntry`/`AtExit`, and so global constructors are disallowed)."},{"content":"A verifiable class cannot use &lt;xref:System.Runtime.InteropServices.LayoutKind&gt;.","pos":[2408,2487],"source":"A verifiable class cannot use <xref:System.Runtime.InteropServices.LayoutKind>."},{"content":"If building an EXE, a main function cannot declare any parameters, so &lt;xref:System.Environment.GetCommandLineArgs%2A&gt; must be used to retrieve command-line arguments.","pos":[2497,2663],"source":"If building an EXE, a main function cannot declare any parameters, so <xref:System.Environment.GetCommandLineArgs%2A> must be used to retrieve command-line arguments."},{"content":"Making a non-virtual call to a virtual function.","pos":[2673,2721]},{"content":"For example:","pos":[2722,2734]},{"content":"Also, the following keywords cannot be used in verifiable code:","pos":[3034,3097]},{"pos":[3107,3200],"content":"<bpt id=\"p1\">[</bpt>unmanaged<ept id=\"p1\">](../preprocessor/managed-unmanaged.md)</ept> and <bpt id=\"p2\">[</bpt>pack<ept id=\"p2\">](../preprocessor/pack.md)</ept> pragmas","source":"[unmanaged](../preprocessor/managed-unmanaged.md) and [pack](../preprocessor/pack.md) pragmas"},{"pos":[3210,3314],"content":"<bpt id=\"p1\">[</bpt>naked<ept id=\"p1\">](../cpp/naked-cpp.md)</ept> and <bpt id=\"p2\">[</bpt>align<ept id=\"p2\">](../cpp/align-cpp.md)</ept> <bpt id=\"p3\">[</bpt>__declspec<ept id=\"p3\">](../cpp/declspec.md)</ept> modifiers","source":"[naked](../cpp/naked-cpp.md) and [align](../cpp/align-cpp.md) [__declspec](../cpp/declspec.md) modifiers"},{"content":"__asm","pos":[3325,3330]},{"content":"__based","pos":[3370,3377]},{"pos":[3413,3456],"content":"<bpt id=\"p1\">[</bpt>__try<ept id=\"p1\">](../cpp/try-except-statement.md)</ept> and","source":"[__try](../cpp/try-except-statement.md) and "},{"content":"See Also","pos":[3476,3484]},{"content":"Pure and Verifiable Code (C++/CLI)","pos":[3489,3523]}],"content":"---\ntitle: \"How to: Migrate to -clr:safe (C++-CLI) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"migration [C++], verifiable assemblies\"\n  - \"upgrading Visual C++ applications, verifiable assemblies\"\n  - \"verifiable assemblies [C++], migrating to\"\n  - \"/clr compiler option [C++], migrating to /clr:safe\"\nms.assetid: 75f9aae9-1dcc-448a-aa11-2d96f972f9d2\ncaps.latest.revision: 15\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Migrate to /clr:safe (C++/CLI)\nVisual C++ can generate verifiable components by using **/clr:safe**, which causes the compiler to generate errors for each non-verifiable code construct.  \n  \n## Remarks  \n The following issues generate verifiability errors:  \n  \n-   Native types. Even if it isn't used, the declaration of native classes, structures, pointers, or arrays will prevent compilation.  \n  \n-   Global variables  \n  \n-   Function calls into any unmanaged library, including common language runtime function calls  \n  \n-   A verifiable function cannot contain a [static_cast Operator](../cpp/static-cast-operator.md) for down-casting. The [static_cast Operator](../cpp/static-cast-operator.md) can be used for casting between primitive types, but for down-casting, [safe_cast](../windows/safe-cast-cpp-component-extensions.md) or a C-Style cast (which is implemented as a [safe_cast](../windows/safe-cast-cpp-component-extensions.md)) must be used.  \n  \n-   A verifiable function cannot contain a [reinterpret_cast Operator](../cpp/reinterpret-cast-operator.md) (or any C-style cast equivalent).  \n  \n-   A verifiable function cannot perform arithmetic on an [interior_ptr (C++/CLI)](../windows/interior-ptr-cpp-cli.md). It may only assign to it and dereference it.  \n  \n-   A verifiable function can only throw or catch pointers to reference types, so value types must be boxed before throwing.  \n  \n-   A verifiable function can only call verifiable functions (such that calls to the common language runtime are not allowed, include `AtEntry`/`AtExit`, and so global constructors are disallowed).  \n  \n-   A verifiable class cannot use <xref:System.Runtime.InteropServices.LayoutKind>.  \n  \n-   If building an EXE, a main function cannot declare any parameters, so <xref:System.Environment.GetCommandLineArgs%2A> must be used to retrieve command-line arguments.  \n  \n-   Making a non-virtual call to a virtual function. For example:  \n  \n    ```  \n    // not_verifiable.cpp  \n    // compile with: /clr  \n    ref struct A {  \n       virtual void Test() {}  \n    };  \n  \n    ref struct B : A {};  \n  \n    int main() {  \n       B^ b1 = gcnew B;  \n       b1->A::Test();   // Non-virtual call to virtual function  \n    }  \n    ```  \n  \n Also, the following keywords cannot be used in verifiable code:  \n  \n-   [unmanaged](../preprocessor/managed-unmanaged.md) and [pack](../preprocessor/pack.md) pragmas  \n  \n-   [naked](../cpp/naked-cpp.md) and [align](../cpp/align-cpp.md) [__declspec](../cpp/declspec.md) modifiers  \n  \n-   [__asm](../assembler/inline/asm.md)  \n  \n-   [__based](../cpp/based-grammar.md)  \n  \n-   [__try](../cpp/try-except-statement.md) and `__except`  \n  \n## See Also  \n [Pure and Verifiable Code (C++/CLI)](../dotnet/pure-and-verifiable-code-cpp-cli.md)"}