{"nodes":[{"pos":[12,51],"content":"Structure Declarations | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Structure Declarations | Microsoft Docs","pos":[0,39]}]},{"content":"Structure Declarations","pos":[724,746]},{"content":"A \"structure declaration\" names a type and specifies a sequence of variable values (called \"members\" or \"fields\" of the structure) that can have different types.","pos":[747,908]},{"content":"An optional identifier, called a \"tag,\" gives the name of the structure type and can be used in subsequent references to the structure type.","pos":[909,1049]},{"content":"A variable of that structure type holds the entire sequence defined by that type.","pos":[1050,1131]},{"content":"Structures in C are similar to the types known as \"records\" in other languages.","pos":[1132,1211]},{"content":"Syntax","pos":[1220,1226]},{"content":"<bpt id=\"p1\">*</bpt>struct-or-union-specifier<ept id=\"p1\">*</ept>:","pos":[1230,1258],"source":"*struct-or-union-specifier*:"},{"content":"<bpt id=\"p1\"> *</bpt>struct-or-union identifier<ept id=\"p1\">*</ept> opt<bpt id=\"p2\">**</bpt>{<ept id=\"p2\">**</ept> <bpt id=\"p3\">*</bpt>struct-declaration-list<ept id=\"p3\">*</ept> <bpt id=\"p4\">**</bpt>}<ept id=\"p4\">**</ept>","pos":[1261,1331],"source":" *struct-or-union identifier* opt**{** *struct-declaration-list* **}**"},{"content":"struct-or-union identifier","pos":[1339,1365]},{"content":"<bpt id=\"p1\">*</bpt>struct-or-union<ept id=\"p1\">*</ept>:","pos":[1373,1391],"source":"*struct-or-union*:"},{"content":"struct","pos":[1397,1403]},{"content":"union","pos":[1414,1419]},{"content":"<bpt id=\"p1\">*</bpt>struct-declaration-list<ept id=\"p1\">*</ept>:","pos":[1428,1454],"source":"*struct-declaration-list*:"},{"content":"struct-declaration","pos":[1459,1477]},{"content":"struct-declaration-list struct-declaration","pos":[1486,1528]},{"content":"The structure content is defined to be","pos":[1536,1574]},{"content":"<bpt id=\"p1\">*</bpt>struct-declaration<ept id=\"p1\">*</ept>:","pos":[1581,1602],"source":"*struct-declaration*:"},{"content":"<bpt id=\"p1\"> *</bpt>specifier-qualifier-list struct-declarator-list<ept id=\"p1\">*</ept>  <bpt id=\"p2\">**</bpt>;<ept id=\"p2\">**</ept>","pos":[1605,1662],"source":" *specifier-qualifier-list struct-declarator-list*  **;**"},{"content":"<bpt id=\"p1\">*</bpt>specifier-qualifier-list<ept id=\"p1\">*</ept>:","pos":[1669,1696],"source":"*specifier-qualifier-list*:"},{"content":"<bpt id=\"p1\"> *</bpt>type-specifier specifier-qualifier-list<ept id=\"p1\">*</ept> opt","pos":[1699,1745],"source":" *type-specifier specifier-qualifier-list* opt"},{"pos":[1752,1797],"content":"<bpt id=\"p1\">*</bpt>type-qualifier specifier-qualifier-list<ept id=\"p1\">*</ept> opt","source":"*type-qualifier specifier-qualifier-list* opt"},{"content":"<bpt id=\"p1\">*</bpt>struct-declarator-list<ept id=\"p1\">*</ept>:","pos":[1804,1829],"source":"*struct-declarator-list*:"},{"content":"struct-declarator","pos":[1834,1851]},{"pos":[1859,1911],"content":"<bpt id=\"p1\">*</bpt>struct-declarator-list<ept id=\"p1\">*</ept>  <bpt id=\"p2\">**</bpt>,<ept id=\"p2\">**</ept>  <bpt id=\"p3\">*</bpt>struct-declarator<ept id=\"p3\">*</ept>","source":"*struct-declarator-list*  **,**  *struct-declarator*"},{"content":"<bpt id=\"p1\">*</bpt>struct-declarator<ept id=\"p1\">*</ept>:","pos":[1918,1938],"source":"*struct-declarator*:"},{"content":"The declaration of a structure type does not set aside space for a structure.","pos":[1961,2038]},{"content":"It is only a template for later declarations of structure variables.","pos":[2039,2107]},{"content":"A previously defined <bpt id=\"p1\">*</bpt>identifier<ept id=\"p1\">*</ept> (tag) can be used to refer to a structure type defined elsewhere.","pos":[2114,2213],"source":"A previously defined *identifier* (tag) can be used to refer to a structure type defined elsewhere."},{"content":"In this case, <bpt id=\"p1\">*</bpt>struct-declaration-list<ept id=\"p1\">*</ept> cannot be repeated as long as the definition is visible.","pos":[2214,2310],"source":" In this case, *struct-declaration-list* cannot be repeated as long as the definition is visible."},{"content":"Declarations of pointers to structures and typedefs for structure types can use the structure tag before the structure type is defined.","pos":[2311,2446]},{"content":"However, the structure definition must be encountered prior to any actual use of the size of the fields.","pos":[2447,2551]},{"content":"This is an incomplete definition of the type and the type tag.","pos":[2552,2614]},{"content":"For this definition to be completed, a type definition must appear later in the same scope.","pos":[2615,2706]},{"content":"The <bpt id=\"p1\">*</bpt>struct-declaration-list<ept id=\"p1\">*</ept> specifies the types and names of the structure members.","pos":[2713,2798],"source":"The *struct-declaration-list* specifies the types and names of the structure members."},{"content":"A <bpt id=\"p1\">*</bpt>struct-declaration-list<ept id=\"p1\">*</ept> argument contains one or more variable or bit-field declarations.","pos":[2799,2892],"source":" A *struct-declaration-list* argument contains one or more variable or bit-field declarations."},{"content":"Each variable declared in <bpt id=\"p1\">*</bpt>struct-declaration-list<ept id=\"p1\">*</ept> is defined as a member of the structure type.","pos":[2899,2996],"source":"Each variable declared in *struct-declaration-list* is defined as a member of the structure type."},{"content":"Variable declarations within <bpt id=\"p1\">*</bpt>struct-declaration-list<ept id=\"p1\">*</ept> have the same form as other variable declarations discussed in this section, except that the declarations cannot contain storage-class specifiers or initializers.","pos":[2997,3214],"source":" Variable declarations within *struct-declaration-list* have the same form as other variable declarations discussed in this section, except that the declarations cannot contain storage-class specifiers or initializers."},{"content":"The structure members can have any variable types except type <ph id=\"ph1\">`void`</ph>, an incomplete type, or a function type.","pos":[3215,3324],"source":" The structure members can have any variable types except type `void`, an incomplete type, or a function type."},{"content":"A member cannot be declared to have the type of the structure in which it appears.","pos":[3331,3413]},{"content":"However, a member can be declared as a pointer to the structure type in which it appears as long as the structure type has a tag.","pos":[3414,3543]},{"content":"This allows you to create linked lists of structures.","pos":[3544,3597]},{"content":"Structures follow the same scoping as other identifiers.","pos":[3604,3660]},{"content":"Structure identifiers must be distinct from other structure, union, and enumeration tags with the same visibility.","pos":[3661,3775]},{"content":"Each <bpt id=\"p1\">*</bpt>struct-declaration<ept id=\"p1\">*</ept> in a <bpt id=\"p2\">*</bpt>struct-declaration-list<ept id=\"p2\">*</ept> must be unique within the list.","pos":[3782,3870],"source":"Each *struct-declaration* in a *struct-declaration-list* must be unique within the list."},{"content":"However, identifier names in a <bpt id=\"p1\">*</bpt>struct-declaration-list<ept id=\"p1\">*</ept> do not have to be distinct from ordinary variable names or from identifiers in other structure declaration lists.","pos":[3871,4041],"source":" However, identifier names in a *struct-declaration-list* do not have to be distinct from ordinary variable names or from identifiers in other structure declaration lists."},{"content":"Nested structures can also be accessed as though they were declared at the file-scope level.","pos":[4048,4140]},{"content":"For example, given this declaration:","pos":[4141,4177]},{"content":"these declarations are both legal:","pos":[4289,4323]},{"content":"Examples","pos":[4381,4389]},{"content":"These examples illustrate structure declarations:","pos":[4393,4442]},{"content":"The <ph id=\"ph1\">`employee`</ph> structure has three members: <ph id=\"ph2\">`name`</ph>, <ph id=\"ph3\">`id`</ph>, and <ph id=\"ph4\">`class`</ph>.","pos":[4597,4667],"source":"The `employee` structure has three members: `name`, `id`, and `class`."},{"content":"The <ph id=\"ph1\">`name`</ph> member is a 20-element array, and <ph id=\"ph2\">`id`</ph> and <ph id=\"ph3\">`class`</ph> are simple members with <ph id=\"ph4\">`int`</ph> and <bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept> type, respectively.","pos":[4668,4792],"source":" The `name` member is a 20-element array, and `id` and `class` are simple members with `int` and **long** type, respectively."},{"content":"The identifier <ph id=\"ph1\">`employee`</ph> is the structure identifier.","pos":[4793,4847],"source":" The identifier `employee` is the structure identifier."},{"content":"This example defines three structure variables: <ph id=\"ph1\">`student`</ph>, <ph id=\"ph2\">`faculty`</ph>, and <ph id=\"ph3\">`staff`</ph>.","pos":[4912,4994],"source":"This example defines three structure variables: `student`, `faculty`, and `staff`."},{"content":"Each structure has the same list of three members.","pos":[4995,5045]},{"content":"The members are declared to have the structure type <ph id=\"ph1\">`employee`</ph>, defined in the previous example.","pos":[5046,5142],"source":" The members are declared to have the structure type `employee`, defined in the previous example."},{"content":"The <ph id=\"ph1\">`complex`</ph> structure has two members with <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept> type, <ph id=\"ph2\">`x`</ph> and <ph id=\"ph3\">`y`</ph>.","pos":[5313,5386],"source":"The `complex` structure has two members with **float** type, `x` and `y`."},{"content":"The structure type has no tag and is therefore unnamed or anonymous.","pos":[5387,5455]},{"content":"The first two members of the structure are a <ph id=\"ph1\">`char`</ph> variable and a pointer to a <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept> value.","pos":[5598,5694],"source":"The first two members of the structure are a `char` variable and a pointer to a **float** value."},{"content":"The third member, <ph id=\"ph1\">`next`</ph>, is declared as a pointer to the structure type being defined (<ph id=\"ph2\">`sample`</ph>).","pos":[5695,5793],"source":" The third member, `next`, is declared as a pointer to the structure type being defined (`sample`)."},{"content":"Anonymous structures can be useful when the tag named is not needed.","pos":[5800,5868]},{"content":"This is the case when one declaration defines all structure instances.","pos":[5869,5939]},{"content":"For example:","pos":[5940,5952]},{"content":"Embedded structures are often anonymous.","pos":[6027,6067]},{"content":"Microsoft Specific","pos":[6223,6241]},{"content":"The compiler allows an unsized or zero-sized array as the last member of a structure.","pos":[6250,6335]},{"content":"This can be useful if the size of a constant array differs when used in various situations.","pos":[6336,6427]},{"content":"The declaration of such a structure looks like this:","pos":[6428,6480]},{"pos":[6496,6563],"content":"<bpt id=\"p1\">*</bpt>identifier<ept id=\"p1\">*</ept><bpt id=\"p2\">**</bpt>{<ept id=\"p2\">**</ept> <bpt id=\"p3\">*</bpt>set-of-declarations<ept id=\"p3\">*</ept> <bpt id=\"p4\">*</bpt>type array-name<ept id=\"p4\">*</ept><bpt id=\"p5\">**</bpt>[ ];};<ept id=\"p5\">**</ept>","source":"*identifier***{** *set-of-declarations* *type array-name***[ ];};**"},{"content":"Unsized arrays can appear only as the last member of a structure.","pos":[6570,6635]},{"content":"Structures containing unsized array declarations can be nested within other structures as long as no further members are declared in any enclosing structures.","pos":[6636,6794]},{"content":"Arrays of such structures are not allowed.","pos":[6795,6837]},{"content":"The <ph id=\"ph1\">`sizeof`</ph> operator, when applied to a variable of this type or to the type itself, assumes 0 for the size of the array.","pos":[6838,6960],"source":" The `sizeof` operator, when applied to a variable of this type or to the type itself, assumes 0 for the size of the array."},{"content":"Structure declarations can also be specified without a declarator when they are members of another structure or union.","pos":[6967,7085]},{"content":"The field names are promoted into the enclosing structure.","pos":[7086,7144]},{"content":"For example, a nameless structure looks like this:","pos":[7145,7195]},{"pos":[7407,7530],"content":"See <bpt id=\"p1\">[</bpt>Structure and Union Members<ept id=\"p1\">](../c-language/structure-and-union-members.md)</ept> for information about structure references.","source":"See [Structure and Union Members](../c-language/structure-and-union-members.md) for information about structure references."},{"content":"END Microsoft Specific","pos":[7539,7561]},{"content":"See Also","pos":[7572,7580]},{"content":"Declarators and Variable Declarations","pos":[7585,7622]}],"content":"---\ntitle: \"Structure Declarations | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"structure declarations\"\n  - \"anonymous structures\"\n  - \"types [C], declarations\"\n  - \"structure members\"\n  - \"embedded structures\"\nms.assetid: 5be3be77-a236-4153-b574-7aa77675df7f\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Structure Declarations\nA \"structure declaration\" names a type and specifies a sequence of variable values (called \"members\" or \"fields\" of the structure) that can have different types. An optional identifier, called a \"tag,\" gives the name of the structure type and can be used in subsequent references to the structure type. A variable of that structure type holds the entire sequence defined by that type. Structures in C are similar to the types known as \"records\" in other languages.  \n  \n## Syntax  \n *struct-or-union-specifier*:  \n *struct-or-union identifier* opt**{** *struct-declaration-list* **}**  \n  \n *struct-or-union identifier*  \n  \n *struct-or-union*:  \n **struct**  \n  \n **union**  \n  \n *struct-declaration-list*:  \n *struct-declaration*  \n  \n *struct-declaration-list struct-declaration*  \n  \n The structure content is defined to be  \n  \n *struct-declaration*:  \n *specifier-qualifier-list struct-declarator-list*  **;**  \n  \n *specifier-qualifier-list*:  \n *type-specifier specifier-qualifier-list* opt  \n  \n *type-qualifier specifier-qualifier-list* opt  \n  \n *struct-declarator-list*:  \n *struct-declarator*  \n  \n *struct-declarator-list*  **,**  *struct-declarator*  \n  \n *struct-declarator*:  \n `declarator`  \n  \n The declaration of a structure type does not set aside space for a structure. It is only a template for later declarations of structure variables.  \n  \n A previously defined *identifier* (tag) can be used to refer to a structure type defined elsewhere. In this case, *struct-declaration-list* cannot be repeated as long as the definition is visible. Declarations of pointers to structures and typedefs for structure types can use the structure tag before the structure type is defined. However, the structure definition must be encountered prior to any actual use of the size of the fields. This is an incomplete definition of the type and the type tag. For this definition to be completed, a type definition must appear later in the same scope.  \n  \n The *struct-declaration-list* specifies the types and names of the structure members. A *struct-declaration-list* argument contains one or more variable or bit-field declarations.  \n  \n Each variable declared in *struct-declaration-list* is defined as a member of the structure type. Variable declarations within *struct-declaration-list* have the same form as other variable declarations discussed in this section, except that the declarations cannot contain storage-class specifiers or initializers. The structure members can have any variable types except type `void`, an incomplete type, or a function type.  \n  \n A member cannot be declared to have the type of the structure in which it appears. However, a member can be declared as a pointer to the structure type in which it appears as long as the structure type has a tag. This allows you to create linked lists of structures.  \n  \n Structures follow the same scoping as other identifiers. Structure identifiers must be distinct from other structure, union, and enumeration tags with the same visibility.  \n  \n Each *struct-declaration* in a *struct-declaration-list* must be unique within the list. However, identifier names in a *struct-declaration-list* do not have to be distinct from ordinary variable names or from identifiers in other structure declaration lists.  \n  \n Nested structures can also be accessed as though they were declared at the file-scope level. For example, given this declaration:  \n  \n```  \nstruct a  \n{  \n    int x;  \n    struct b  \n    {  \n      int y;  \n    } var2;  \n} var1;  \n```  \n  \n these declarations are both legal:  \n  \n```  \nstruct a var3;  \nstruct b var4;  \n```  \n  \n## Examples  \n These examples illustrate structure declarations:  \n  \n```  \nstruct employee   /* Defines a structure variable named temp */  \n{  \n    char name[20];  \n    int id;  \n    long class;  \n} temp;  \n```  \n  \n The `employee` structure has three members: `name`, `id`, and `class`. The `name` member is a 20-element array, and `id` and `class` are simple members with `int` and **long** type, respectively. The identifier `employee` is the structure identifier.  \n  \n```  \nstruct employee student, faculty, staff;  \n```  \n  \n This example defines three structure variables: `student`, `faculty`, and `staff`. Each structure has the same list of three members. The members are declared to have the structure type `employee`, defined in the previous example.  \n  \n```  \nstruct           /* Defines an anonymous struct and a */  \n{                /* structure variable named complex  */  \n    float x, y;  \n} complex;  \n```  \n  \n The `complex` structure has two members with **float** type, `x` and `y`. The structure type has no tag and is therefore unnamed or anonymous.  \n  \n```  \nstruct sample   /* Defines a structure named x */  \n{  \n    char c;  \n    float *pf;  \n    struct sample *next;  \n} x;  \n```  \n  \n The first two members of the structure are a `char` variable and a pointer to a **float** value. The third member, `next`, is declared as a pointer to the structure type being defined (`sample`).  \n  \n Anonymous structures can be useful when the tag named is not needed. This is the case when one declaration defines all structure instances. For example:  \n  \n```  \nstruct  \n{  \n    int x;  \n    int y;  \n} mystruct;  \n```  \n  \n Embedded structures are often anonymous.  \n  \n```  \nstruct somestruct  \n{  \n    struct    /* Anonymous structure */  \n    {  \n        int x, y;  \n    } point;  \n    int type;  \n} w;  \n```  \n  \n **Microsoft Specific**  \n  \n The compiler allows an unsized or zero-sized array as the last member of a structure. This can be useful if the size of a constant array differs when used in various situations. The declaration of such a structure looks like this:  \n  \n `struct` *identifier***{** *set-of-declarations* *type array-name***[ ];};**  \n  \n Unsized arrays can appear only as the last member of a structure. Structures containing unsized array declarations can be nested within other structures as long as no further members are declared in any enclosing structures. Arrays of such structures are not allowed. The `sizeof` operator, when applied to a variable of this type or to the type itself, assumes 0 for the size of the array.  \n  \n Structure declarations can also be specified without a declarator when they are members of another structure or union. The field names are promoted into the enclosing structure. For example, a nameless structure looks like this:  \n  \n```  \nstruct s  \n{  \n    float y;  \n    struct  \n    {  \n        int a, b, c;  \n    };  \n    char str[10];  \n} *p_s;  \n.  \n.  \n.  \np_s->b = 100;  /* A reference to a field in the s structure */  \n```  \n  \n See [Structure and Union Members](../c-language/structure-and-union-members.md) for information about structure references.  \n  \n **END Microsoft Specific**  \n  \n## See Also  \n [Declarators and Variable Declarations](../c-language/declarators-and-variable-declarations.md)"}