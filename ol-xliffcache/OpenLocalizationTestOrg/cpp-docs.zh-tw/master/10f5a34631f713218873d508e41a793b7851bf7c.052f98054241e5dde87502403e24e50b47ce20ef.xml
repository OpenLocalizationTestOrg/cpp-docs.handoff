{"nodes":[{"pos":[12,46],"content":"multiplies Struct | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"multiplies Struct | Microsoft Docs","pos":[0,34]}]},{"content":"multiplies Struct","pos":[730,747]},{"pos":[748,858],"content":"A predefined function object that performs the multiplication operation (binary <ph id=\"ph1\">`operator*`</ph>) on its arguments.","source":"A predefined function object that performs the multiplication operation (binary `operator*`) on its arguments."},{"content":"Syntax","pos":[867,873]},{"content":"Parameters","pos":[1294,1304]},{"content":", <ph id=\"ph1\">`T`</ph>,","pos":[1314,1320],"source":", `T`, "},{"content":"A type that supports a binary <ph id=\"ph1\">`operator*`</ph> that takes operands of the specified or inferred types.","pos":[1328,1425],"source":" A type that supports a binary `operator*` that takes operands of the specified or inferred types."},{"content":"The left operand of the multiplication operation.","pos":[1442,1491]},{"content":"The unspecialized template takes an lvalue reference argument of type <ph id=\"ph1\">`Type`</ph>.","pos":[1492,1569],"source":" The unspecialized template takes an lvalue reference argument of type `Type`."},{"content":"The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type <ph id=\"ph1\">`T`</ph>.","pos":[1570,1681],"source":" The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `T`."},{"content":"The right operand of the multiplication operation.","pos":[1699,1749]},{"content":"The unspecialized template takes an lvalue reference argument of type <ph id=\"ph1\">`Type`</ph>.","pos":[1750,1827],"source":" The unspecialized template takes an lvalue reference argument of type `Type`."},{"content":"The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type <ph id=\"ph1\">`U`</ph>.","pos":[1828,1939],"source":" The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `U`."},{"content":"Return Value","pos":[1948,1960]},{"content":"The result of <ph id=\"ph1\">`Left``*``Right`</ph>.","pos":[1964,1995],"source":"The result of `Left``*``Right`."},{"content":"The specialized template does perfect forwarding of the result, which has the type that's returned by <ph id=\"ph1\">`operator*`</ph>.","pos":[1996,2110],"source":" The specialized template does perfect forwarding of the result, which has the type that's returned by `operator*`."},{"content":"Example","pos":[2119,2126]},{"content":"Requirements","pos":[3480,3492]},{"pos":[3496,3521],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>functional&gt;","source":"**Header:** \\<functional>"},{"pos":[3528,3546],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"content":"See Also","pos":[3555,3563]},{"content":"Thread Safety in the C++ Standard Library","pos":[3568,3609]},{"content":"C++ Standard Library Reference","pos":[3682,3712]}],"content":"---\ntitle: \"multiplies Struct | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std::multiplies\"\n  - \"multiplies\"\n  - \"xfunctional/std::multiplies\"\n  - \"std.multiplies\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"multiplies class\"\n  - \"multiplies struct\"\nms.assetid: ec85e8af-70ad-44ad-90f0-d961a5847864\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# multiplies Struct\nA predefined function object that performs the multiplication operation (binary `operator*`) on its arguments.  \n  \n## Syntax  \n  \n```\ntemplate <class Type = void>\nstruct multiplies : public binary_function <Type, Type, Type>  \n{\n    Type operator()(const Type& Left, const Type& Right) const;\n};\n\n// specialized transparent functor for operator*\ntemplate <>\nstruct multiplies<void>  \n{\n  template <class T, class U>\n  auto operator()(T&& Left, U&& Right) const`\n    -> decltype(std::forward<T>(Left) * std::forward<U>(Right));\n };\n```  \n  \n#### Parameters  \n `Type`, `T`, `U`  \n A type that supports a binary `operator*` that takes operands of the specified or inferred types.  \n  \n `Left`  \n The left operand of the multiplication operation. The unspecialized template takes an lvalue reference argument of type `Type`. The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `T`.  \n  \n `Right`  \n The right operand of the multiplication operation. The unspecialized template takes an lvalue reference argument of type `Type`. The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `U`.  \n  \n## Return Value  \n The result of `Left``*``Right`. The specialized template does perfect forwarding of the result, which has the type that's returned by `operator*`.  \n  \n## Example  \n  \n```cpp  \n// functional_multiplies.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <functional>  \n#include <algorithm>  \n#include <iostream>  \n  \nusing namespace std;  \n  \nint main( )  \n{  \n   vector <int> v1, v2, v3 ( 6 );  \n   vector <int>::iterator Iter1, Iter2, Iter3;  \n  \n   int i;  \n   for ( i = 1 ; i <= 6 ; i++ )  \n   {  \n      v1.push_back( 2 * i );  \n   }  \n  \n   int j;  \n   for ( j = 1 ; j <= 6 ; j++ )  \n   {  \n      v2.push_back( 3 * j );  \n   }  \n  \n   cout << \"The vector v1 = ( \" ;  \n   for ( Iter1 = v1.begin( ) ; Iter1 != v1.end( ) ; Iter1++ )  \n      cout << *Iter1 << \" \";  \n   cout << \")\" << endl;  \n  \n   cout << \"The vector v2 = ( \" ;  \n   for ( Iter2 = v2.begin( ) ; Iter2 != v2.end( ) ; Iter2++ )  \n      cout << *Iter2 << \" \";  \n   cout << \")\" << endl;  \n  \n   // Finding the element-wise products of the elements of v1 & v2  \n   transform ( v1.begin( ),  v1.end( ), v2.begin( ), v3.begin ( ),   \n      multiplies<int>( ) );  \n  \n   cout << \"The element-wise products of vectors V1 & v2\\n are: ( \" ;  \n   for ( Iter3 = v3.begin( ) ; Iter3 != v3.end( ) ; Iter3++ )  \n      cout << *Iter3 << \" \";  \n   cout << \")\" << endl;  \n}  \n\\* Output:   \nThe vector v1 = ( 2 4 6 8 10 12 )  \nThe vector v2 = ( 3 6 9 12 15 18 )  \nThe element-wise products of vectors V1 & v2  \n are: ( 6 24 54 96 150 216 )  \n*\\  \n```  \n  \n## Requirements  \n **Header:** \\<functional>  \n  \n **Namespace:** std  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}