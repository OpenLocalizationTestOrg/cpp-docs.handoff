{"nodes":[{"content":"C++ Language Reference","pos":[3,25]},{"content":"Lexical Conventions","pos":[58,77]},{"content":"Overview of File Translation","pos":[108,136]},{"content":"Character Sets2","pos":[176,191]},{"content":"Tokens (C++)","pos":[218,230]},{"content":"Comments (C++)","pos":[252,266]},{"content":"Identifiers (C++)","pos":[290,307]},{"content":"Keywords (C++)","pos":[334,348]},{"content":"auto Keyword","pos":[373,385]},{"content":"Punctuators (C++)","pos":[409,426]},{"content":"Numeric, Boolean and Pointer Literals  (C++)","pos":[453,497]},{"content":"String and Character Literals  (C++)","pos":[549,585]},{"content":"User-Defined Literals  (C++)","pos":[630,658]},{"content":"Basic Concepts  (C++)","pos":[694,715]},{"content":"Declarations and Definitions (C++)","pos":[745,779]},{"content":"Overview of Declarators","pos":[824,847]},{"content":"Specifiers","pos":[883,893]},{"content":"Point of declaration in C++","pos":[916,943]},{"content":"Initializers","pos":[983,995]},{"content":"Aliases and typedefs (C++)","pos":[1020,1046]},{"content":"using Declaration","pos":[1083,1100]},{"content":"Resolving ambiguous declarations (C++)","pos":[1130,1168]},{"content":"Storage classes (C++)","pos":[1217,1238]},{"content":"const (C++)","pos":[1270,1281]},{"content":"constexpr (C++)","pos":[1303,1318]},{"content":"volatile (C++)","pos":[1344,1358]},{"content":"auto (C++)","pos":[1383,1393]},{"content":"decltype  (C++)","pos":[1414,1429]},{"content":"Attributes2","pos":[1454,1465]},{"content":"Scope (Visual C++)","pos":[1488,1506]},{"content":"Program and Linkage  (C++)","pos":[1534,1560]},{"content":"Types of Linkage","pos":[1596,1612]},{"content":"Linkage in Names with File Scope","pos":[1641,1673]},{"content":"Linkage in Names with Class Scope","pos":[1718,1751]},{"content":"Linkage in Names with Block Scope","pos":[1797,1830]},{"content":"Names with No Linkage","pos":[1876,1897]},{"content":"Using extern to Specify Linkage","pos":[1931,1962]},{"content":"Startup and Termination (C++)","pos":[2005,2034]},{"content":"main: Program Startup","pos":[2074,2095]},{"content":"Using wmain Instead of main","pos":[2129,2156]},{"content":"Argument Definitions","pos":[2197,2217]},{"content":"Wildcard Expansion","pos":[2251,2269]},{"content":"Parsing C++ Command-Line Arguments","pos":[2301,2335]},{"content":"Customizing C++ Command-Line Processing","pos":[2383,2422]},{"content":"main Function Restrictions","pos":[2475,2501]},{"content":"Program Termination","pos":[2540,2559]},{"content":"exit Function","pos":[2592,2605]},{"content":"abort Function","pos":[2632,2646]},{"content":"return Statement in Program Termination (C++)","pos":[2674,2719]},{"content":"Additional Startup Considerations","pos":[2775,2808]},{"content":"Additional Termination Considerations","pos":[2854,2891]},{"content":"Using exit or return","pos":[2942,2962]},{"content":"Using atexit","pos":[2996,3008]},{"content":"Using abort","pos":[3034,3045]},{"content":"Lvalues and Rvalues (Visual C++)","pos":[3068,3100]},{"content":"Temporary Objects","pos":[3142,3159]},{"content":"Alignment (C++ Declarations)","pos":[3188,3216]},{"content":"alignof and alignas (C++)","pos":[3254,3279]},{"content":"Trivial, standard-layout, and POD types","pos":[3314,3353]},{"content":"Fundamental Types  (C++)","pos":[3401,3425]},{"content":"Data Type Ranges","pos":[3458,3474]},{"content":"nullptr","pos":[3502,3509]},{"content":"void (C++)","pos":[3528,3538]},{"content":"bool (C++)","pos":[3558,3568]},{"content":"false (C++)","pos":[3588,3599]},{"content":"true (C++)","pos":[3620,3630]},{"content":"char, wchar_t, char16_t, char32_t","pos":[3650,3683]},{"content":"__int8, __int16, __int32, __int64","pos":[3725,3758]},{"content":"__m64","pos":[3792,3797]},{"content":"__m128","pos":[3812,3818]},{"content":"__m128d","pos":[3834,3841]},{"content":"__m128i","pos":[3858,3865]},{"content":"__ptr32, __ptr64","pos":[3882,3898]},{"content":"Numerical Limits (C++)","pos":[3921,3943]},{"content":"Integer Limits","pos":[3976,3990]},{"content":"Floating Limits","pos":[4017,4032]},{"content":"Standard Conversions","pos":[4059,4079]},{"content":"C++ Built-in Operators, Precedence and Associativity","pos":[4110,4162]},{"content":"__alignof Operator","pos":[4225,4243]},{"content":"__uuidof Operator","pos":[4271,4288]},{"content":"Additive Operators: + and -","pos":[4315,4342]},{"content":"Address-of Operator: &amp;","pos":[4381,4403],"source":"Address-of Operator: &"},{"content":"Assignment Operators","pos":[4438,4458]},{"content":"Bitwise AND Operator: &amp;","pos":[4490,4513],"source":"Bitwise AND Operator: &"},{"content":"Bitwise Exclusive OR Operator: ^","pos":[4549,4581]},{"content":"Bitwise Inclusive OR Operator: |","pos":[4626,4658]},{"content":"Cast Operator: ()","pos":[4704,4721]},{"content":"Comma Operator: ,","pos":[4753,4770]},{"content":"Conditional Operator: ?","pos":[4796,4819]},{"content":":","pos":[4820,4821]},{"content":"delete Operator (C++)","pos":[4855,4876]},{"content":"Equality Operators: == and !=","pos":[4907,4936]},{"content":"Explicit Type Conversion Operator: ()","pos":[4995,5032]},{"content":"Function Call Operator: ()","pos":[5084,5110]},{"content":"Indirection Operator: *","pos":[5151,5174]},{"content":"Left Shift and Right Shift Operators (&gt;&gt; and &lt;&lt;)","pos":[5211,5259],"source":"Left Shift and Right Shift Operators (>> and <<)"},{"content":"Logical AND Operator: &amp;&amp;","pos":[5324,5348],"source":"Logical AND Operator: &&"},{"content":"Logical Negation Operator: !","pos":[5388,5416]},{"content":"Logical OR Operator: ||","pos":[5460,5483]},{"content":"Member Access Operators: .","pos":[5524,5550]},{"content":"and -&gt;","pos":[5551,5557],"source":" and ->"},{"content":"Multiplicative Operators and the Modulus Operator","pos":[5600,5649]},{"content":"new Operator (C++)","pos":[5710,5728]},{"content":"One's Complement Operator: ~","pos":[5756,5784]},{"pos":[5827,5866],"content":"Pointer-to-Member Operators: .<bpt id=\"p1\">*</bpt> and -&gt;<ept id=\"p1\">*</ept>","source":"Pointer-to-Member Operators: .* and ->*"},{"content":"Postfix Increment and Decrement Operators: ++ and --","pos":[5923,5975]},{"content":"Prefix Increment and Decrement Operators: ++ and --","pos":[6052,6103]},{"content":"Relational Operators: &lt;, &gt;, &lt;=, and &gt;=","pos":[6179,6217],"source":"Relational Operators: <, >, <=, and >="},{"content":"Scope Resolution Operator: ::","pos":[6265,6294]},{"content":"sizeof Operator","pos":[6331,6346]},{"content":"Subscript Operator:","pos":[6373,6392]},{"content":"typeid Operator","pos":[6422,6437]},{"content":"Unary Plus and Negation Operators: + and -","pos":[6464,6506]},{"content":"Expressions (C++)","pos":[6559,6576]},{"content":"Types of Expressions","pos":[6603,6623]},{"content":"Primary Expressions","pos":[6656,6675]},{"content":"Ellipses and Variadic Templates","pos":[6707,6738]},{"content":"Postfix Expressions","pos":[6782,6801]},{"content":"Expressions with Unary Operators","pos":[6833,6865]},{"content":"Expressions with Binary Operators","pos":[6910,6943]},{"content":"C++ Constant Expressions","pos":[6989,7013]},{"content":"Semantics of Expressions","pos":[7049,7073]},{"content":"Casting","pos":[7109,7116]},{"content":"Casting Operators","pos":[7136,7153]},{"content":"dynamic_cast Operator","pos":[7184,7205]},{"content":"bad_cast Exception","pos":[7240,7258]},{"content":"static_cast Operator","pos":[7290,7310]},{"content":"const_cast Operator","pos":[7344,7363]},{"content":"reinterpret_cast Operator","pos":[7396,7421]},{"content":"Run-Time Type Information","pos":[7459,7484]},{"content":"bad_typeid Exception","pos":[7523,7543]},{"content":"type_info Class","pos":[7577,7592]},{"content":"Statements (C++)","pos":[7618,7634]},{"content":"Overview of C++ Statements","pos":[7660,7686]},{"content":"Labeled Statements","pos":[7724,7742]},{"content":"Expression Statement","pos":[7772,7792]},{"content":"Null Statement","pos":[7825,7839]},{"content":"Compound Statements (Blocks)","pos":[7865,7893]},{"content":"Selection Statements (C++)","pos":[7931,7957]},{"content":"if-else Statement (C++)","pos":[7994,8017]},{"content":"__if_exists Statement","pos":[8051,8072]},{"content":"__if_not_exists Statement","pos":[8104,8129]},{"content":"switch Statement (C++)","pos":[8165,8187]},{"content":"Iteration Statements (C++)","pos":[8219,8245]},{"content":"while Statement (C++)","pos":[8282,8303]},{"content":"do-while Statement (C++)","pos":[8335,8359]},{"content":"for Statement (C++)","pos":[8394,8413]},{"content":"Range-based for Statement (C++)","pos":[8443,8474]},{"content":"Jump Statements (C++)","pos":[8515,8536]},{"content":"break Statement (C++)","pos":[8568,8589]},{"content":"continue Statement (C++)","pos":[8621,8645]},{"content":"return Statement (C++)","pos":[8680,8702]},{"content":"goto Statement (C++)","pos":[8735,8755]},{"content":"Transfers of Control","pos":[8786,8806]},{"content":"Namespaces (C++)","pos":[8837,8853]},{"content":"Enumerations (C++)","pos":[8878,8896]},{"content":"Unions","pos":[8923,8929]},{"content":"Functions (C++)","pos":[8946,8961]},{"content":"Functions with Variable Argument Lists  (C++)","pos":[8986,9031]},{"content":"Function Overloading","pos":[9085,9105]},{"content":"Explicitly Defaulted and Deleted Functions","pos":[9137,9179]},{"content":"Argument-Dependent Name (Koenig) Lookup on Functions","pos":[9233,9285]},{"content":"Default Arguments","pos":[9347,9364]},{"content":"Inline Functions (C++)","pos":[9393,9415]},{"content":"Operator Overloading","pos":[9446,9466]},{"content":"General Rules for Operator Overloading","pos":[9498,9536]},{"content":"Overloading Unary Operators","pos":[9586,9613]},{"content":"Increment and Decrement Operator Overloading (C++)","pos":[9653,9703]},{"content":"Binary Operators","pos":[9763,9779]},{"content":"Assignment","pos":[9807,9817]},{"content":"Function Call (C++)","pos":[9839,9858]},{"content":"Subscripting","pos":[9887,9899]},{"content":"Member Access","pos":[9923,9936]},{"content":"Classes and Structs (C++)","pos":[9960,9985]},{"content":"class (C++)","pos":[10020,10031]},{"content":"struct (C++)","pos":[10052,10064]},{"content":"Class Member Overview","pos":[10086,10107]},{"content":"Member Access Control (C++)","pos":[10140,10167]},{"content":"friend (C++)","pos":[10205,10217]},{"content":"private (C++)","pos":[10240,10253]},{"content":"protected (C++)","pos":[10277,10292]},{"content":"public (C++)","pos":[10318,10330]},{"content":"Initializing classes and structs without constructors (C++)","pos":[10352,10411]},{"content":"Constructors (C++)","pos":[10480,10498]},{"content":"Copy Constructors and Copy Assignment Operators (C++)","pos":[10527,10580]},{"content":"Move Constructors and Move Assignment Operators (C++)","pos":[10644,10697]},{"content":"Destructors (C++)","pos":[10760,10777]},{"content":"Overview of Member Functions","pos":[10804,10832]},{"content":"virtual Specifier","pos":[10873,10890]},{"content":"override Specifier","pos":[10920,10938]},{"content":"final Specifier","pos":[10969,10984]},{"content":"Inheritance  (C++)","pos":[11011,11029]},{"content":"Virtual Functions","pos":[11057,11074]},{"content":"Single Inheritance","pos":[11104,11122]},{"content":"Base Classes","pos":[11153,11165]},{"content":"Multiple Base Classes","pos":[11190,11211]},{"content":"Explicit Overrides (C++)","pos":[11245,11269]},{"content":"Abstract Classes (C++)","pos":[11304,11326]},{"content":"Summary of Scope Rules","pos":[11359,11381]},{"content":"Inheritance Keywords","pos":[11416,11436]},{"content":"virtual (C++)","pos":[11469,11482]},{"content":"__super","pos":[11506,11513]},{"content":"__interface","pos":[11531,11542]},{"content":"Static Members (C++)","pos":[11563,11583]},{"content":"User-Defined Type Conversions (C++)","pos":[11613,11648]},{"content":"Mutable Data Members (C++)","pos":[11693,11719]},{"content":"Nested Class Declarations","pos":[11755,11780]},{"content":"Anonymous Class Types","pos":[11817,11838]},{"content":"Pointers to Members","pos":[11871,11890]},{"content":"this Pointer","pos":[11921,11933]},{"content":"C++ Bit Fields","pos":[11957,11971]},{"content":"Lambda Expressions in C++","pos":[11996,12021]},{"content":"Lambda Expression Syntax","pos":[12058,12082]},{"content":"Examples of Lambda Expressions","pos":[12118,12148]},{"content":"Arrays (C++)","pos":[12189,12201]},{"content":"Using Arrays (C++)","pos":[12223,12241]},{"content":"Initializing Arrays","pos":[12269,12288]},{"content":"Arrays in Expressions","pos":[12319,12340]},{"content":"Interpretation of Subscript Operator","pos":[12373,12409]},{"content":"Indirection on Array Types","pos":[12457,12483]},{"content":"Ordering of C++ Arrays","pos":[12521,12543]},{"content":"References (C++)","pos":[12576,12592]},{"content":"Lvalue Reference Declarator: &amp;","pos":[12618,12648],"source":"Lvalue Reference Declarator: &"},{"content":"Rvalue Reference Declarator: &amp;&amp;","pos":[12691,12722],"source":"Rvalue Reference Declarator: &&"},{"content":"Reference-Type Function Arguments","pos":[12769,12802]},{"content":"Reference-Type Function Returns","pos":[12847,12878]},{"content":"References to Pointers","pos":[12921,12943]},{"content":"Pointers (C++)","pos":[12976,12990]},{"content":"const and volatile Pointers","pos":[13014,13041]},{"content":"new and delete Operators","pos":[13080,13104]},{"content":"Exception Handling in Visual C++","pos":[13139,13171]},{"content":"C++ Exception Handling","pos":[13215,13237]},{"content":"try, throw, and catch Statements (C++)","pos":[13272,13310]},{"content":"How Catch Blocks are Evaluated (C++)","pos":[13357,13393]},{"content":"Exceptions and Stack Unwinding in C++","pos":[13440,13477]},{"content":"Exception Specifications (throw) (C++)","pos":[13527,13565]},{"content":"noexcept (C++)","pos":[13612,13626]},{"content":"Unhandled C++ Exceptions","pos":[13651,13675]},{"content":"Mixing C (Structured) and C++ Exceptions","pos":[13712,13752]},{"content":"Using setjmp-longjmp","pos":[13804,13824]},{"content":"Exception Handling Differences","pos":[13858,13888]},{"content":"Structured Exception Handling (C-C++)","pos":[13930,13967]},{"content":"Writing an Exception Handler","pos":[14015,14043]},{"content":"try-except Statement","pos":[14085,14105]},{"content":"Writing an Exception Filter","pos":[14139,14166]},{"content":"Raising Software Exceptions","pos":[14207,14234]},{"content":"Hardware Exceptions","pos":[14275,14294]},{"content":"Restrictions on Exception Handlers","pos":[14327,14361]},{"content":"Writing a Termination Handler","pos":[14408,14437]},{"content":"try-finally Statement","pos":[14480,14501]},{"content":"Cleaning up Resources","pos":[14536,14557]},{"content":"Timing of Exception Handling: A Summary","pos":[14592,14631]},{"content":"Restrictions on Termination Handlers","pos":[14683,14719]},{"content":"Using Structured Exception Handling with C++","pos":[14768,14812]},{"content":"Transporting Exceptions Between Threads","pos":[14868,14907]},{"content":"Assertion and User-Supplied Messages (C++)","pos":[14957,14999]},{"content":"static_assert","pos":[15051,15064]},{"content":"Templates (C++)","pos":[15088,15103]},{"content":"typename","pos":[15128,15136]},{"content":"Class Templates","pos":[15156,15171]},{"content":"Template Friends","pos":[15198,15214]},{"content":"Function Templates","pos":[15242,15260]},{"content":"Function Template Instantiation","pos":[15291,15322]},{"content":"Explicit Instantiation","pos":[15366,15388]},{"content":"Explicit Specialization of Function Templates","pos":[15423,15468]},{"content":"Partial Ordering of Function Templates (C++)","pos":[15526,15570]},{"content":"Member Function Templates","pos":[15625,15650]},{"content":"Template Specialization (C++)","pos":[15687,15716]},{"content":"Templates and Name Resolution","pos":[15755,15784]},{"content":"Name Resolution for Dependent Types","pos":[15826,15861]},{"content":"Name Resolution for Locally Declared Names","pos":[15909,15951]},{"content":"Overload Resolution of Function Template Calls","pos":[16006,16052]},{"content":"Source code organization (C++ Templates)","pos":[16110,16150]},{"content":"Event Handling","pos":[16199,16213]},{"content":"__event","pos":[16239,16246]},{"content":"__hook","pos":[16263,16269]},{"content":"__raise","pos":[16285,16292]},{"content":"__unhook","pos":[16309,16317]},{"content":"Event Handling in Native C++","pos":[16335,16363]},{"content":"Event Handling in COM","pos":[16403,16424]},{"content":"Microsoft-Specific Modifiers","pos":[16456,16484]},{"content":"Based Addressing","pos":[16524,16540]},{"content":"__based Grammar","pos":[16569,16584]},{"content":"Based Pointers (C++)","pos":[16610,16630]},{"content":"Calling Conventions","pos":[16660,16679]},{"content":"Argument Passing and Naming Conventions","pos":[16711,16750]},{"content":"__cdecl","pos":[16803,16810]},{"content":"__clrcall","pos":[16829,16838]},{"content":"__stdcall","pos":[16859,16868]},{"content":"__fastcall","pos":[16889,16899]},{"content":"__thiscall","pos":[16921,16931]},{"content":"__vectorcall","pos":[16953,16965]},{"content":"Calling Example: Function Prototype and Call","pos":[16988,17032]},{"content":"Results of Calling Example","pos":[17089,17115]},{"content":"Naked Function Calls","pos":[17154,17174]},{"content":"Rules and Limitations for Naked Functions","pos":[17208,17249]},{"content":"Considerations for Writing Prolog-Epilog Code","pos":[17304,17349]},{"content":"Floating Point Coprocessor and Calling Conventions","pos":[17407,17457]},{"content":"Obsolete Calling Conventions","pos":[17520,17548]},{"content":"restrict (C++ AMP)","pos":[17588,17606]},{"content":"tile_static Keyword","pos":[17634,17653]},{"content":"__declspec","pos":[17684,17694]},{"content":"align (C++)","pos":[17715,17726]},{"content":"allocate","pos":[17748,17756]},{"content":"appdomain","pos":[17777,17786]},{"content":"code_seg (__declspec)","pos":[17808,17829]},{"content":"deprecated (C++)","pos":[17859,17875]},{"content":"dllexport, dllimport","pos":[17902,17922]},{"content":"Definitions and Declarations (C++)","pos":[17955,17989]},{"content":"Defining Inline C++ Functions with dllexport and dllimport","pos":[18035,18093]},{"content":"General Rules and Limitations","pos":[18165,18194]},{"content":"Using dllimport and dllexport in C++ Classes","pos":[18237,18281]},{"content":"jitintrinsic","pos":[18338,18350]},{"content":"naked (C++)","pos":[18375,18386]},{"content":"noalias","pos":[18408,18415]},{"content":"noinline","pos":[18435,18443]},{"content":"noreturn","pos":[18464,18472]},{"content":"nothrow (C++)","pos":[18493,18506]},{"content":"novtable","pos":[18530,18538]},{"content":"process","pos":[18559,18566]},{"content":"property (C++)","pos":[18586,18600]},{"content":"restrict","pos":[18625,18633]},{"content":"safebuffers","pos":[18654,18665]},{"content":"selectany","pos":[18689,18698]},{"content":"thread","pos":[18720,18726]},{"content":"uuid (C++)","pos":[18745,18755]},{"content":"__restrict","pos":[18775,18785]},{"content":"__sptr, __uptr","pos":[18815,18829]},{"content":"__unaligned","pos":[18850,18861]},{"content":"__w64","pos":[18882,18887]},{"content":"func","pos":[18904,18908]},{"content":"Compiler COM Support","pos":[18925,18945]},{"content":"Compiler COM Global Functions","pos":[18977,19006]},{"content":"_com_raise_error","pos":[19048,19064]},{"content":"ConvertStringToBSTR","pos":[19092,19111]},{"content":"ConvertBSTRToString","pos":[19143,19162]},{"content":"_set_com_error_handler","pos":[19194,19216]},{"content":"Compiler COM Support Classes","pos":[19249,19277]},{"content":"_bstr_t Class","pos":[19318,19331]},{"content":"_bstr_t Member Functions","pos":[19357,19381]},{"content":"_bstr_t::Assign","pos":[19419,19434]},{"content":"_bstr_t::Attach","pos":[19462,19477]},{"content":"_bstr_t::_bstr_t","pos":[19505,19521]},{"content":"_bstr_t::copy","pos":[19549,19562]},{"content":"_bstr_t::Detach","pos":[19588,19603]},{"content":"_bstr_t::GetAddress","pos":[19631,19650]},{"content":"_bstr_t::GetBSTR","pos":[19682,19698]},{"content":"_bstr_t::length","pos":[19727,19742]},{"content":"_bstr_t Operators","pos":[19769,19786]},{"content":"_bstr_t::operator =","pos":[19817,19836]},{"content":"_bstr_t::operator +=, +","pos":[19872,19895]},{"content":"_bstr_t::operator !","pos":[19940,19959]},{"content":"_bstr_t Relational Operators","pos":[20001,20029]},{"pos":[20071,20104],"content":"_bstr_t::wchar_t<bpt id=\"p1\">*</bpt>, _bstr_t::char<ept id=\"p1\">*</ept>","source":"_bstr_t::wchar_t*, _bstr_t::char*"},{"content":"_com_error Class","pos":[20153,20169]},{"content":"_com_error Member Functions","pos":[20198,20225]},{"content":"_com_error::_com_error","pos":[20266,20288]},{"content":"_com_error::Description","pos":[20322,20345]},{"content":"_com_error::Error","pos":[20381,20398]},{"content":"_com_error::ErrorInfo","pos":[20428,20449]},{"content":"_com_error::ErrorMessage","pos":[20483,20507]},{"content":"_com_error::GUID","pos":[20544,20560]},{"content":"_com_error::HelpContext","pos":[20589,20612]},{"content":"_com_error::HelpFile","pos":[20648,20668]},{"content":"_com_error::HRESULTToWCode","pos":[20701,20727]},{"content":"_com_error::Source","pos":[20766,20784]},{"content":"_com_error::WCode","pos":[20815,20832]},{"content":"_com_error::WCodeToHRESULT","pos":[20862,20888]},{"content":"_com_error Operators","pos":[20926,20946]},{"content":"_com_error::operator =","pos":[20980,21002]},{"content":"_com_ptr_t Class","pos":[21039,21055]},{"content":"_com_ptr_t Member Functions","pos":[21084,21111]},{"content":"_com_ptr_t::_com_ptr_t","pos":[21152,21174]},{"content":"_com_ptr_t::AddRef","pos":[21208,21226]},{"content":"_com_ptr_t::Attach","pos":[21257,21275]},{"content":"_com_ptr_t::CreateInstance","pos":[21306,21332]},{"content":"_com_ptr_t::Detach","pos":[21371,21389]},{"content":"_com_ptr_t::GetActiveObject","pos":[21420,21447]},{"content":"_com_ptr_t::GetInterfacePtr","pos":[21487,21514]},{"content":"_com_ptr_t::QueryInterface","pos":[21554,21580]},{"content":"_com_ptr_t::Release","pos":[21619,21638]},{"content":"_com_ptr_t Operators","pos":[21669,21689]},{"content":"_com_ptr_t::operator =","pos":[21723,21745]},{"content":"_com_ptr_t Relational Operators","pos":[21784,21815]},{"content":"_com_ptr_t Extractors","pos":[21860,21881]},{"content":"Relational Function Templates","pos":[21915,21944]},{"content":"_variant_t Class","pos":[21986,22002]},{"content":"_variant_t Member Functions","pos":[22031,22058]},{"content":"_variant_t::_variant_t","pos":[22099,22121]},{"content":"_variant_t::Attach","pos":[22155,22173]},{"content":"_variant_t::Clear","pos":[22204,22221]},{"content":"_variant_t::ChangeType","pos":[22251,22273]},{"content":"_variant_t::Detach","pos":[22308,22326]},{"content":"_variant_t::SetString","pos":[22357,22378]},{"content":"_variant_t Operators","pos":[22411,22431]},{"content":"_variant_t::operator =","pos":[22465,22487]},{"content":"_variant_t Relational Operators","pos":[22526,22557]},{"content":"_variant_t Extractors","pos":[22602,22623]},{"content":"Microsoft Extensions","pos":[22654,22674]},{"content":"Nonstandard Behavior","pos":[22705,22725]},{"content":"Compiler Limits","pos":[22757,22772]},{"content":"Welcome Back to C++ (Modern C++)","pos":[22797,22829]},{"content":"Support For C++11-14-17 Features (Modern C++)","pos":[22870,22915]},{"content":"C++ Type System (Modern C++)","pos":[22969,22997]},{"content":"Value Types (Modern C++)","pos":[23035,23059]},{"content":"Type Conversions and Type Safety (Modern C++)","pos":[23093,23138]},{"content":"Uniform Initialization and Delegating Constructors","pos":[23192,23242]},{"content":"Object Lifetime And Resource Management (Modern C++)","pos":[23303,23355]},{"content":"Objects Own Resources (RAII)","pos":[23416,23444]},{"content":"Smart Pointers (Modern C++)","pos":[23481,23508]},{"content":"How to: Create and Use unique_ptr Instances","pos":[23545,23588]},{"content":"How to: Create and Use shared_ptr Instances","pos":[23642,23685]},{"content":"How to: Create and Use weak_ptr Instances","pos":[23739,23780]},{"content":"How to: Create and Use CComPtr and CComQIPtr Instances","pos":[23832,23886]},{"content":"Pimpl For Compile-Time Encapsulation (Modern C++)","pos":[23950,23999]},{"content":"Containers (Modern C++)","pos":[24057,24080]},{"content":"Algorithms (Modern C++)","pos":[24112,24135]},{"content":"String and I-O Formatting (Modern C++)","pos":[24167,24205]},{"content":"Errors and Exception Handling (Modern C++)","pos":[24252,24294]},{"content":"How to: Design for Exception Safety","pos":[24346,24381]},{"content":"How to: Interface Between Exceptional and Non-Exceptional Code","pos":[24427,24489]},{"content":"Portability At ABI Boundaries (Modern C++)","pos":[24561,24603]}],"content":"# [C++ Language Reference](cpp-language-reference.md)\n## [Lexical Conventions](lexical-conventions.md)\n### [Overview of File Translation](overview-of-file-translation.md)\n### [Character Sets2](character-sets2.md)\n### [Tokens (C++)](tokens-cpp.md)\n### [Comments (C++)](comments-cpp.md)\n### [Identifiers (C++)](identifiers-cpp.md)\n### [Keywords (C++)](keywords-cpp.md)\n#### [auto Keyword](auto-keyword.md)\n### [Punctuators (C++)](punctuators-cpp.md)\n### [Numeric, Boolean and Pointer Literals  (C++)](numeric-boolean-and-pointer-literals-cpp.md)\n### [String and Character Literals  (C++)](string-and-character-literals-cpp.md)\n### [User-Defined Literals  (C++)](user-defined-literals-cpp.md)\n## [Basic Concepts  (C++)](basic-concepts-cpp.md)\n### [Declarations and Definitions (C++)](declarations-and-definitions-cpp.md)\n#### [Overview of Declarators](overview-of-declarators.md)\n#### [Specifiers](specifiers.md)\n#### [Point of declaration in C++](point-of-declaration-in-cpp.md)\n#### [Initializers](initializers.md)\n#### [Aliases and typedefs (C++)](aliases-and-typedefs-cpp.md)\n#### [using Declaration](using-declaration.md)\n#### [Resolving ambiguous declarations (C++)](resolving-ambiguous-declarations-cpp.md)\n#### [Storage classes (C++)](storage-classes-cpp.md)\n#### [const (C++)](const-cpp.md)\n#### [constexpr (C++)](constexpr-cpp.md)\n#### [volatile (C++)](volatile-cpp.md)\n#### [auto (C++)](auto-cpp.md)\n#### [decltype  (C++)](decltype-cpp.md)\n#### [Attributes2](attributes2.md)\n### [Scope (Visual C++)](scope-visual-cpp.md)\n### [Program and Linkage  (C++)](program-and-linkage-cpp.md)\n#### [Types of Linkage](types-of-linkage.md)\n#### [Linkage in Names with File Scope](linkage-in-names-with-file-scope.md)\n#### [Linkage in Names with Class Scope](linkage-in-names-with-class-scope.md)\n#### [Linkage in Names with Block Scope](linkage-in-names-with-block-scope.md)\n#### [Names with No Linkage](names-with-no-linkage.md)\n#### [Using extern to Specify Linkage](using-extern-to-specify-linkage.md)\n### [Startup and Termination (C++)](startup-and-termination-cpp.md)\n#### [main: Program Startup](main-program-startup.md)\n##### [Using wmain Instead of main](using-wmain-instead-of-main.md)\n##### [Argument Definitions](argument-definitions.md)\n##### [Wildcard Expansion](wildcard-expansion.md)\n##### [Parsing C++ Command-Line Arguments](parsing-cpp-command-line-arguments.md)\n##### [Customizing C++ Command-Line Processing](customizing-cpp-command-line-processing.md)\n##### [main Function Restrictions](main-function-restrictions.md)\n#### [Program Termination](program-termination.md)\n##### [exit Function](exit-function.md)\n##### [abort Function](abort-function.md)\n##### [return Statement in Program Termination (C++)](return-statement-in-program-termination-cpp.md)\n#### [Additional Startup Considerations](additional-startup-considerations.md)\n#### [Additional Termination Considerations](additional-termination-considerations.md)\n##### [Using exit or return](using-exit-or-return.md)\n##### [Using atexit](using-atexit.md)\n##### [Using abort](using-abort.md)\n### [Lvalues and Rvalues (Visual C++)](lvalues-and-rvalues-visual-cpp.md)\n### [Temporary Objects](temporary-objects.md)\n### [Alignment (C++ Declarations)](alignment-cpp-declarations.md)\n### [alignof and alignas (C++)](alignof-and-alignas-cpp.md)\n### [Trivial, standard-layout, and POD types](trivial-standard-layout-and-pod-types.md)\n## [Fundamental Types  (C++)](fundamental-types-cpp.md)\n### [Data Type Ranges](data-type-ranges.md)\n### [nullptr](nullptr.md)\n### [void (C++)](void-cpp.md)\n### [bool (C++)](bool-cpp.md)\n### [false (C++)](false-cpp.md)\n### [true (C++)](true-cpp.md)\n### [char, wchar_t, char16_t, char32_t](char-wchar-t-char16-t-char32-t.md)\n### [__int8, __int16, __int32, __int64](int8-int16-int32-int64.md)\n### [__m64](m64.md)\n### [__m128](m128.md)\n### [__m128d](m128d.md)\n### [__m128i](m128i.md)\n### [__ptr32, __ptr64](ptr32-ptr64.md)\n### [Numerical Limits (C++)](numerical-limits-cpp.md)\n#### [Integer Limits](integer-limits.md)\n#### [Floating Limits](floating-limits.md)\n### [Standard Conversions](standard-conversions.md)\n## [C++ Built-in Operators, Precedence and Associativity](cpp-built-in-operators-precedence-and-associativity.md)\n### [__alignof Operator](alignof-operator.md)\n### [__uuidof Operator](uuidof-operator.md)\n### [Additive Operators: + and -](additive-operators-plus-and.md)\n### [Address-of Operator: &](address-of-operator-amp.md)\n### [Assignment Operators](assignment-operators.md)\n### [Bitwise AND Operator: &](bitwise-and-operator-amp.md)\n### [Bitwise Exclusive OR Operator: ^](bitwise-exclusive-or-operator-hat.md)\n### [Bitwise Inclusive OR Operator: |](bitwise-inclusive-or-operator-pipe.md)\n### [Cast Operator: ()](cast-operator-parens.md)\n### [Comma Operator: ,](comma-operator.md)\n### [Conditional Operator: ? :](conditional-operator-q.md)\n### [delete Operator (C++)](delete-operator-cpp.md)\n### [Equality Operators: == and !=](equality-operators-equal-equal-and-exclpt-equal.md)\n### [Explicit Type Conversion Operator: ()](explicit-type-conversion-operator-parens.md)\n### [Function Call Operator: ()](function-call-operator-parens.md)\n### [Indirection Operator: *](indirection-operator-star.md)\n### [Left Shift and Right Shift Operators (>> and <<)](left-shift-and-right-shift-operators-input-and-output.md)\n### [Logical AND Operator: &&](logical-and-operator-amp-amp.md)\n### [Logical Negation Operator: !](logical-negation-operator-exclpt.md)\n### [Logical OR Operator: ||](logical-or-operator-pipe-pipe.md)\n### [Member Access Operators: . and ->](member-access-operators-dot-and.md)\n### [Multiplicative Operators and the Modulus Operator](multiplicative-operators-and-the-modulus-operator.md)\n### [new Operator (C++)](new-operator-cpp.md)\n### [One's Complement Operator: ~](one-s-complement-operator-tilde.md)\n### [Pointer-to-Member Operators: .* and ->*](pointer-to-member-operators-dot-star-and-star.md)\n### [Postfix Increment and Decrement Operators: ++ and --](postfix-increment-and-decrement-operators-increment-and-decrement.md)\n### [Prefix Increment and Decrement Operators: ++ and --](prefix-increment-and-decrement-operators-increment-and-decrement.md)\n### [Relational Operators: <, >, <=, and >=](relational-operators-equal-and-equal.md)\n### [Scope Resolution Operator: ::](scope-resolution-operator.md)\n### [sizeof Operator](sizeof-operator.md)\n### [Subscript Operator:](subscript-operator.md)\n### [typeid Operator](typeid-operator.md)\n### [Unary Plus and Negation Operators: + and -](unary-plus-and-negation-operators-plus-and.md)\n## [Expressions (C++)](expressions-cpp.md)\n### [Types of Expressions](types-of-expressions.md)\n#### [Primary Expressions](primary-expressions.md)\n#### [Ellipses and Variadic Templates](ellipses-and-variadic-templates.md)\n#### [Postfix Expressions](postfix-expressions.md)\n#### [Expressions with Unary Operators](expressions-with-unary-operators.md)\n#### [Expressions with Binary Operators](expressions-with-binary-operators.md)\n#### [C++ Constant Expressions](cpp-constant-expressions.md)\n### [Semantics of Expressions](semantics-of-expressions.md)\n### [Casting](casting.md)\n#### [Casting Operators](casting-operators.md)\n##### [dynamic_cast Operator](dynamic-cast-operator.md)\n##### [bad_cast Exception](bad-cast-exception.md)\n##### [static_cast Operator](static-cast-operator.md)\n##### [const_cast Operator](const-cast-operator.md)\n##### [reinterpret_cast Operator](reinterpret-cast-operator.md)\n#### [Run-Time Type Information](run-time-type-information.md)\n##### [bad_typeid Exception](bad-typeid-exception.md)\n##### [type_info Class](type-info-class.md)\n## [Statements (C++)](statements-cpp.md)\n### [Overview of C++ Statements](overview-of-cpp-statements.md)\n### [Labeled Statements](labeled-statements.md)\n### [Expression Statement](expression-statement.md)\n#### [Null Statement](null-statement.md)\n### [Compound Statements (Blocks)](compound-statements-blocks.md)\n### [Selection Statements (C++)](selection-statements-cpp.md)\n#### [if-else Statement (C++)](if-else-statement-cpp.md)\n#### [__if_exists Statement](if-exists-statement.md)\n#### [__if_not_exists Statement](if-not-exists-statement.md)\n#### [switch Statement (C++)](switch-statement-cpp.md)\n### [Iteration Statements (C++)](iteration-statements-cpp.md)\n#### [while Statement (C++)](while-statement-cpp.md)\n#### [do-while Statement (C++)](do-while-statement-cpp.md)\n#### [for Statement (C++)](for-statement-cpp.md)\n#### [Range-based for Statement (C++)](range-based-for-statement-cpp.md)\n### [Jump Statements (C++)](jump-statements-cpp.md)\n#### [break Statement (C++)](break-statement-cpp.md)\n#### [continue Statement (C++)](continue-statement-cpp.md)\n#### [return Statement (C++)](return-statement-cpp.md)\n#### [goto Statement (C++)](goto-statement-cpp.md)\n#### [Transfers of Control](transfers-of-control.md)\n## [Namespaces (C++)](namespaces-cpp.md)\n## [Enumerations (C++)](enumerations-cpp.md)\n## [Unions](unions.md)\n## [Functions (C++)](functions-cpp.md)\n### [Functions with Variable Argument Lists  (C++)](functions-with-variable-argument-lists-cpp.md)\n### [Function Overloading](function-overloading.md)\n### [Explicitly Defaulted and Deleted Functions](explicitly-defaulted-and-deleted-functions.md)\n### [Argument-Dependent Name (Koenig) Lookup on Functions](argument-dependent-name-koenig-lookup-on-functions.md)\n### [Default Arguments](default-arguments.md)\n### [Inline Functions (C++)](inline-functions-cpp.md)\n## [Operator Overloading](operator-overloading.md)\n### [General Rules for Operator Overloading](general-rules-for-operator-overloading.md)\n### [Overloading Unary Operators](overloading-unary-operators.md)\n#### [Increment and Decrement Operator Overloading (C++)](increment-and-decrement-operator-overloading-cpp.md)\n### [Binary Operators](binary-operators.md)\n### [Assignment](assignment.md)\n### [Function Call (C++)](function-call-cpp.md)\n### [Subscripting](subscripting.md)\n### [Member Access](member-access.md)\n## [Classes and Structs (C++)](classes-and-structs-cpp.md)\n### [class (C++)](class-cpp.md)\n### [struct (C++)](struct-cpp.md)\n### [Class Member Overview](class-member-overview.md)\n### [Member Access Control (C++)](member-access-control-cpp.md)\n#### [friend (C++)](friend-cpp.md)\n#### [private (C++)](private-cpp.md)\n#### [protected (C++)](protected-cpp.md)\n#### [public (C++)](public-cpp.md)\n### [Initializing classes and structs without constructors (C++)](initializing-classes-and-structs-without-constructors-cpp.md)\n### [Constructors (C++)](constructors-cpp.md)\n#### [Copy Constructors and Copy Assignment Operators (C++)](copy-constructors-and-copy-assignment-operators-cpp.md)\n#### [Move Constructors and Move Assignment Operators (C++)](move-constructors-and-move-assignment-operators-cpp.md)\n### [Destructors (C++)](destructors-cpp.md)\n### [Overview of Member Functions](overview-of-member-functions.md)\n#### [virtual Specifier](virtual-specifier.md)\n#### [override Specifier](override-specifier.md)\n#### [final Specifier](final-specifier.md)\n### [Inheritance  (C++)](inheritance-cpp.md)\n#### [Virtual Functions](virtual-functions.md)\n#### [Single Inheritance](single-inheritance.md)\n#### [Base Classes](base-classes.md)\n#### [Multiple Base Classes](multiple-base-classes.md)\n#### [Explicit Overrides (C++)](explicit-overrides-cpp.md)\n#### [Abstract Classes (C++)](abstract-classes-cpp.md)\n#### [Summary of Scope Rules](summary-of-scope-rules.md)\n#### [Inheritance Keywords](inheritance-keywords.md)\n#### [virtual (C++)](virtual-cpp.md)\n#### [__super](super.md)\n#### [__interface](interface.md)\n### [Static Members (C++)](static-members-cpp.md)\n### [User-Defined Type Conversions (C++)](user-defined-type-conversions-cpp.md)\n### [Mutable Data Members (C++)](mutable-data-members-cpp.md)\n### [Nested Class Declarations](nested-class-declarations.md)\n### [Anonymous Class Types](anonymous-class-types.md)\n### [Pointers to Members](pointers-to-members.md)\n### [this Pointer](this-pointer.md)\n### [C++ Bit Fields](cpp-bit-fields.md)\n## [Lambda Expressions in C++](lambda-expressions-in-cpp.md)\n### [Lambda Expression Syntax](lambda-expression-syntax.md)\n### [Examples of Lambda Expressions](examples-of-lambda-expressions.md)\n## [Arrays (C++)](arrays-cpp.md)\n### [Using Arrays (C++)](using-arrays-cpp.md)\n### [Initializing Arrays](initializing-arrays.md)\n### [Arrays in Expressions](arrays-in-expressions.md)\n### [Interpretation of Subscript Operator](interpretation-of-subscript-operator.md)\n### [Indirection on Array Types](indirection-on-array-types.md)\n### [Ordering of C++ Arrays](ordering-of-cpp-arrays.md)\n## [References (C++)](references-cpp.md)\n### [Lvalue Reference Declarator: &](lvalue-reference-declarator-amp.md)\n### [Rvalue Reference Declarator: &&](rvalue-reference-declarator-amp-amp.md)\n### [Reference-Type Function Arguments](reference-type-function-arguments.md)\n### [Reference-Type Function Returns](reference-type-function-returns.md)\n### [References to Pointers](references-to-pointers.md)\n## [Pointers (C++)](pointers-cpp.md)\n### [const and volatile Pointers](const-and-volatile-pointers.md)\n### [new and delete Operators](new-and-delete-operators.md)\n## [Exception Handling in Visual C++](exception-handling-in-visual-cpp.md)\n### [C++ Exception Handling](cpp-exception-handling.md)\n#### [try, throw, and catch Statements (C++)](try-throw-and-catch-statements-cpp.md)\n#### [How Catch Blocks are Evaluated (C++)](how-catch-blocks-are-evaluated-cpp.md)\n#### [Exceptions and Stack Unwinding in C++](exceptions-and-stack-unwinding-in-cpp.md)\n#### [Exception Specifications (throw) (C++)](exception-specifications-throw-cpp.md)\n#### [noexcept (C++)](noexcept-cpp.md)\n#### [Unhandled C++ Exceptions](unhandled-cpp-exceptions.md)\n#### [Mixing C (Structured) and C++ Exceptions](mixing-c-structured-and-cpp-exceptions.md)\n##### [Using setjmp-longjmp](using-setjmp-longjmp.md)\n##### [Exception Handling Differences](exception-handling-differences.md)\n### [Structured Exception Handling (C-C++)](structured-exception-handling-c-cpp.md)\n#### [Writing an Exception Handler](writing-an-exception-handler.md)\n##### [try-except Statement](try-except-statement.md)\n##### [Writing an Exception Filter](writing-an-exception-filter.md)\n##### [Raising Software Exceptions](raising-software-exceptions.md)\n##### [Hardware Exceptions](hardware-exceptions.md)\n##### [Restrictions on Exception Handlers](restrictions-on-exception-handlers.md)\n#### [Writing a Termination Handler](writing-a-termination-handler.md)\n##### [try-finally Statement](try-finally-statement.md)\n##### [Cleaning up Resources](cleaning-up-resources.md)\n##### [Timing of Exception Handling: A Summary](timing-of-exception-handling-a-summary.md)\n##### [Restrictions on Termination Handlers](restrictions-on-termination-handlers.md)\n#### [Using Structured Exception Handling with C++](using-structured-exception-handling-with-cpp.md)\n### [Transporting Exceptions Between Threads](transporting-exceptions-between-threads.md)\n## [Assertion and User-Supplied Messages (C++)](assertion-and-user-supplied-messages-cpp.md)\n### [static_assert](static-assert.md)\n## [Templates (C++)](templates-cpp.md)\n### [typename](typename.md)\n### [Class Templates](class-templates.md)\n### [Template Friends](template-friends.md)\n### [Function Templates](function-templates.md)\n#### [Function Template Instantiation](function-template-instantiation.md)\n#### [Explicit Instantiation](explicit-instantiation.md)\n#### [Explicit Specialization of Function Templates](explicit-specialization-of-function-templates.md)\n#### [Partial Ordering of Function Templates (C++)](partial-ordering-of-function-templates-cpp.md)\n#### [Member Function Templates](member-function-templates.md)\n### [Template Specialization (C++)](template-specialization-cpp.md)\n### [Templates and Name Resolution](templates-and-name-resolution.md)\n#### [Name Resolution for Dependent Types](name-resolution-for-dependent-types.md)\n#### [Name Resolution for Locally Declared Names](name-resolution-for-locally-declared-names.md)\n#### [Overload Resolution of Function Template Calls](overload-resolution-of-function-template-calls.md)\n### [Source code organization (C++ Templates)](source-code-organization-cpp-templates.md)\n## [Event Handling](event-handling.md)\n### [__event](event.md)\n### [__hook](hook.md)\n### [__raise](raise.md)\n### [__unhook](unhook.md)\n### [Event Handling in Native C++](event-handling-in-native-cpp.md)\n### [Event Handling in COM](event-handling-in-com.md)\n## [Microsoft-Specific Modifiers](microsoft-specific-modifiers.md)\n### [Based Addressing](based-addressing.md)\n#### [__based Grammar](based-grammar.md)\n#### [Based Pointers (C++)](based-pointers-cpp.md)\n### [Calling Conventions](calling-conventions.md)\n#### [Argument Passing and Naming Conventions](argument-passing-and-naming-conventions.md)\n##### [__cdecl](cdecl.md)\n##### [__clrcall](clrcall.md)\n##### [__stdcall](stdcall.md)\n##### [__fastcall](fastcall.md)\n##### [__thiscall](thiscall.md)\n##### [__vectorcall](vectorcall.md)\n#### [Calling Example: Function Prototype and Call](calling-example-function-prototype-and-call.md)\n##### [Results of Calling Example](results-of-calling-example.md)\n#### [Naked Function Calls](naked-function-calls.md)\n##### [Rules and Limitations for Naked Functions](rules-and-limitations-for-naked-functions.md)\n##### [Considerations for Writing Prolog-Epilog Code](considerations-for-writing-prolog-epilog-code.md)\n#### [Floating Point Coprocessor and Calling Conventions](floating-point-coprocessor-and-calling-conventions.md)\n#### [Obsolete Calling Conventions](obsolete-calling-conventions.md)\n### [restrict (C++ AMP)](restrict-cpp-amp.md)\n### [tile_static Keyword](tile-static-keyword.md)\n### [__declspec](declspec.md)\n#### [align (C++)](align-cpp.md)\n#### [allocate](allocate.md)\n#### [appdomain](appdomain.md)\n#### [code_seg (__declspec)](code-seg-declspec.md)\n#### [deprecated (C++)](deprecated-cpp.md)\n#### [dllexport, dllimport](dllexport-dllimport.md)\n##### [Definitions and Declarations (C++)](definitions-and-declarations-cpp.md)\n##### [Defining Inline C++ Functions with dllexport and dllimport](defining-inline-cpp-functions-with-dllexport-and-dllimport.md)\n##### [General Rules and Limitations](general-rules-and-limitations.md)\n##### [Using dllimport and dllexport in C++ Classes](using-dllimport-and-dllexport-in-cpp-classes.md)\n#### [jitintrinsic](jitintrinsic.md)\n#### [naked (C++)](naked-cpp.md)\n#### [noalias](noalias.md)\n#### [noinline](noinline.md)\n#### [noreturn](noreturn.md)\n#### [nothrow (C++)](nothrow-cpp.md)\n#### [novtable](novtable.md)\n#### [process](process.md)\n#### [property (C++)](property-cpp.md)\n#### [restrict](restrict.md)\n#### [safebuffers](safebuffers.md)\n#### [selectany](selectany.md)\n#### [thread](thread.md)\n#### [uuid (C++)](uuid-cpp.md)\n### [__restrict](extension-restrict.md)\n### [__sptr, __uptr](sptr-uptr.md)\n### [__unaligned](unaligned.md)\n### [__w64](w64.md)\n### [__func__](func.md)\n## [Compiler COM Support](compiler-com-support.md)\n### [Compiler COM Global Functions](compiler-com-global-functions.md)\n#### [_com_raise_error](com-raise-error.md)\n#### [ConvertStringToBSTR](convertstringtobstr.md)\n#### [ConvertBSTRToString](convertbstrtostring.md)\n#### [_set_com_error_handler](set-com-error-handler.md)\n### [Compiler COM Support Classes](compiler-com-support-classes.md)\n#### [_bstr_t Class](bstr-t-class.md)\n##### [_bstr_t Member Functions](bstr-t-member-functions.md)\n###### [_bstr_t::Assign](bstr-t-assign.md)\n###### [_bstr_t::Attach](bstr-t-attach.md)\n###### [_bstr_t::_bstr_t](bstr-t-bstr-t.md)\n###### [_bstr_t::copy](bstr-t-copy.md)\n###### [_bstr_t::Detach](bstr-t-detach.md)\n###### [_bstr_t::GetAddress](bstr-t-getaddress.md)\n###### [_bstr_t::GetBSTR](bstr-t-getbstr.md)\n###### [_bstr_t::length](bstr-t-length.md)\n##### [_bstr_t Operators](bstr-t-operators.md)\n###### [_bstr_t::operator =](bstr-t-operator-equal.md)\n###### [_bstr_t::operator +=, +](bstr-t-operator-add-equal-plus.md)\n###### [_bstr_t::operator !](bstr-t-operator-logical-not.md)\n###### [_bstr_t Relational Operators](bstr-t-relational-operators.md)\n###### [_bstr_t::wchar_t*, _bstr_t::char*](bstr-t-wchar-t-star-bstr-t-char-star.md)\n#### [_com_error Class](com-error-class.md)\n##### [_com_error Member Functions](com-error-member-functions.md)\n###### [_com_error::_com_error](com-error-com-error.md)\n###### [_com_error::Description](com-error-description.md)\n###### [_com_error::Error](com-error-error.md)\n###### [_com_error::ErrorInfo](com-error-errorinfo.md)\n###### [_com_error::ErrorMessage](com-error-errormessage.md)\n###### [_com_error::GUID](com-error-guid.md)\n###### [_com_error::HelpContext](com-error-helpcontext.md)\n###### [_com_error::HelpFile](com-error-helpfile.md)\n###### [_com_error::HRESULTToWCode](com-error-hresulttowcode.md)\n###### [_com_error::Source](com-error-source.md)\n###### [_com_error::WCode](com-error-wcode.md)\n###### [_com_error::WCodeToHRESULT](com-error-wcodetohresult.md)\n##### [_com_error Operators](com-error-operators.md)\n###### [_com_error::operator =](com-error-operator-equal.md)\n#### [_com_ptr_t Class](com-ptr-t-class.md)\n##### [_com_ptr_t Member Functions](com-ptr-t-member-functions.md)\n###### [_com_ptr_t::_com_ptr_t](com-ptr-t-com-ptr-t.md)\n###### [_com_ptr_t::AddRef](com-ptr-t-addref.md)\n###### [_com_ptr_t::Attach](com-ptr-t-attach.md)\n###### [_com_ptr_t::CreateInstance](com-ptr-t-createinstance.md)\n###### [_com_ptr_t::Detach](com-ptr-t-detach.md)\n###### [_com_ptr_t::GetActiveObject](com-ptr-t-getactiveobject.md)\n###### [_com_ptr_t::GetInterfacePtr](com-ptr-t-getinterfaceptr.md)\n###### [_com_ptr_t::QueryInterface](com-ptr-t-queryinterface.md)\n###### [_com_ptr_t::Release](com-ptr-t-release.md)\n##### [_com_ptr_t Operators](com-ptr-t-operators.md)\n###### [_com_ptr_t::operator =](com-ptr-t-operator-equal.md)\n###### [_com_ptr_t Relational Operators](com-ptr-t-relational-operators.md)\n###### [_com_ptr_t Extractors](com-ptr-t-extractors.md)\n##### [Relational Function Templates](relational-function-templates.md)\n#### [_variant_t Class](variant-t-class.md)\n##### [_variant_t Member Functions](variant-t-member-functions.md)\n###### [_variant_t::_variant_t](variant-t-variant-t.md)\n###### [_variant_t::Attach](variant-t-attach.md)\n###### [_variant_t::Clear](variant-t-clear.md)\n###### [_variant_t::ChangeType](variant-t-changetype.md)\n###### [_variant_t::Detach](variant-t-detach.md)\n###### [_variant_t::SetString](variant-t-setstring.md)\n##### [_variant_t Operators](variant-t-operators.md)\n###### [_variant_t::operator =](variant-t-operator-equal.md)\n###### [_variant_t Relational Operators](variant-t-relational-operators.md)\n###### [_variant_t Extractors](variant-t-extractors.md)\n## [Microsoft Extensions](microsoft-extensions.md)\n## [Nonstandard Behavior](nonstandard-behavior.md)\n### [Compiler Limits](compiler-limits.md)\n# [Welcome Back to C++ (Modern C++)](welcome-back-to-cpp-modern-cpp.md)\n## [Support For C++11-14-17 Features (Modern C++)](support-for-cpp11-14-17-features-modern-cpp.md)\n## [C++ Type System (Modern C++)](cpp-type-system-modern-cpp.md)\n### [Value Types (Modern C++)](value-types-modern-cpp.md)\n### [Type Conversions and Type Safety (Modern C++)](type-conversions-and-type-safety-modern-cpp.md)\n## [Uniform Initialization and Delegating Constructors](uniform-initialization-and-delegating-constructors.md)\n## [Object Lifetime And Resource Management (Modern C++)](object-lifetime-and-resource-management-modern-cpp.md)\n## [Objects Own Resources (RAII)](objects-own-resources-raii.md)\n## [Smart Pointers (Modern C++)](smart-pointers-modern-cpp.md)\n### [How to: Create and Use unique_ptr Instances](how-to-create-and-use-unique-ptr-instances.md)\n### [How to: Create and Use shared_ptr Instances](how-to-create-and-use-shared-ptr-instances.md)\n### [How to: Create and Use weak_ptr Instances](how-to-create-and-use-weak-ptr-instances.md)\n### [How to: Create and Use CComPtr and CComQIPtr Instances](how-to-create-and-use-ccomptr-and-ccomqiptr-instances.md)\n## [Pimpl For Compile-Time Encapsulation (Modern C++)](pimpl-for-compile-time-encapsulation-modern-cpp.md)\n## [Containers (Modern C++)](containers-modern-cpp.md)\n## [Algorithms (Modern C++)](algorithms-modern-cpp.md)\n## [String and I-O Formatting (Modern C++)](string-and-i-o-formatting-modern-cpp.md)\n## [Errors and Exception Handling (Modern C++)](errors-and-exception-handling-modern-cpp.md)\n### [How to: Design for Exception Safety](how-to-design-for-exception-safety.md)\n### [How to: Interface Between Exceptional and Non-Exceptional Code](how-to-interface-between-exceptional-and-non-exceptional-code.md)\n## [Portability At ABI Boundaries (Modern C++)](portability-at-abi-boundaries-modern-cpp.md)\n"}