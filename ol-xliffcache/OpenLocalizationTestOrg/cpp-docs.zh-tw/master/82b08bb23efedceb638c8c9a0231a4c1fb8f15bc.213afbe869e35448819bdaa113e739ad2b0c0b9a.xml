{"nodes":[{"pos":[12,41],"content":"Scalar Types | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Scalar Types | Microsoft Docs","pos":[0,29]}]},{"content":"Scalar Types","pos":[547,559]},{"content":"Although the access of data can stem from any alignment, it is recommended that data be aligned on its natural boundary to avoid performance loss (or a multiple thereof).","pos":[560,730]},{"content":"Enums are constant integers and are treated as 32-bit integers.","pos":[731,794]},{"content":"The following table describes the type definition and recommended storage for it as it pertains to alignment using the following alignment values:","pos":[795,941]},{"content":"Byte – 8 bits","pos":[951,964]},{"content":"Word – 16 bits","pos":[974,988]},{"content":"Double Word – 32 bits","pos":[998,1019]},{"content":"Quad Word – 64 bits","pos":[1029,1048]},{"content":"Octa Word – 128 bits","pos":[1058,1078]},{"content":"Scalar Type","pos":[1105,1116]},{"content":"C Data Type","pos":[1117,1128]},{"content":"Storage Size (in bytes)","pos":[1129,1152]},{"content":"Recommended Alignment","pos":[1153,1174]},{"content":"INT8","pos":[1181,1185]},{"content":"1","pos":[1195,1196]},{"content":"Byte","pos":[1197,1201]},{"content":"UINT8","pos":[1208,1213]},{"content":"1","pos":[1232,1233]},{"content":"Byte","pos":[1234,1238]},{"content":"INT16","pos":[1245,1250]},{"content":"short","pos":[1255,1260]},{"content":"2","pos":[1263,1264]},{"content":"Word","pos":[1265,1269]},{"content":"UINT16","pos":[1276,1282]},{"content":"unsigned short","pos":[1287,1301]},{"content":"2","pos":[1304,1305]},{"content":"Word","pos":[1306,1310]},{"content":"INT32","pos":[1317,1322]},{"content":"int, long","pos":[1327,1336]},{"content":"4","pos":[1339,1340]},{"content":"Doubleword","pos":[1341,1351]},{"content":"UINT32","pos":[1358,1364]},{"content":"unsigned int, unsigned long","pos":[1369,1396]},{"content":"4","pos":[1399,1400]},{"content":"Doubleword","pos":[1401,1411]},{"content":"INT64","pos":[1418,1423]},{"content":"8","pos":[1436,1437]},{"content":"Quadword","pos":[1438,1446]},{"content":"UINT64","pos":[1453,1459]},{"content":"unsigned __int64","pos":[1464,1480]},{"content":"8","pos":[1483,1484]},{"content":"Quadword","pos":[1485,1493]},{"content":"FP32 (single precision)","pos":[1500,1523]},{"content":"float","pos":[1528,1533]},{"content":"4","pos":[1536,1537]},{"content":"Doubleword","pos":[1538,1548]},{"content":"FP64 (double precision)","pos":[1555,1578]},{"content":"double","pos":[1583,1589]},{"content":"8","pos":[1592,1593]},{"content":"Quadword","pos":[1594,1602]},{"content":"POINTER","pos":[1609,1616]},{"content":"8","pos":[1626,1627]},{"content":"Quadword","pos":[1628,1636]},{"content":"struct __m64","pos":[1651,1663]},{"content":"8","pos":[1666,1667]},{"content":"Quadword","pos":[1668,1676]},{"content":"struct __m128","pos":[1692,1705]},{"content":"16","pos":[1708,1710]},{"content":"Octaword","pos":[1711,1719]},{"content":"See Also","pos":[1729,1737]},{"content":"Types and Storage","pos":[1742,1759]}],"content":"---\ntitle: \"Scalar Types | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: 07c9195e-b6c7-4083-8ef0-8a93032e4d1e\ncaps.latest.revision: 7\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Scalar Types\nAlthough the access of data can stem from any alignment, it is recommended that data be aligned on its natural boundary to avoid performance loss (or a multiple thereof). Enums are constant integers and are treated as 32-bit integers. The following table describes the type definition and recommended storage for it as it pertains to alignment using the following alignment values:  \n  \n-   Byte – 8 bits  \n  \n-   Word – 16 bits  \n  \n-   Double Word – 32 bits  \n  \n-   Quad Word – 64 bits  \n  \n-   Octa Word – 128 bits  \n  \n|||||  \n|-|-|-|-|  \n|Scalar Type|C Data Type|Storage Size (in bytes)|Recommended Alignment|  \n|**INT8**|`char`|1|Byte|  \n|**UINT8**|`unsigned char`|1|Byte|  \n|**INT16**|**short**|2|Word|  \n|**UINT16**|**unsigned short**|2|Word|  \n|**INT32**|**int, long**|4|Doubleword|  \n|**UINT32**|**unsigned int, unsigned long**|4|Doubleword|  \n|**INT64**|`__int64`|8|Quadword|  \n|**UINT64**|**unsigned __int64**|8|Quadword|  \n|**FP32 (single precision)**|**float**|4|Doubleword|  \n|**FP64 (double precision)**|**double**|8|Quadword|  \n|**POINTER**|**\\***|8|Quadword|  \n|`__m64`|**struct __m64**|8|Quadword|  \n|`__m128`|**struct __m128**|16|Octaword|  \n  \n## See Also  \n [Types and Storage](../build/types-and-storage.md)"}