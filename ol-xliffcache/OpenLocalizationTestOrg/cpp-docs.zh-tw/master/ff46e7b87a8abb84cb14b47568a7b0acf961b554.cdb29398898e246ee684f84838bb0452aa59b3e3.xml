{"nodes":[{"pos":[12,41],"content":"choice Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"choice Class | Microsoft Docs","pos":[0,29]}]},{"content":"choice Class","pos":[610,622]},{"content":"A <ph id=\"ph1\">`choice`</ph> messaging block is a multi-source, single-target block that represents a control-flow interaction with a set of sources.","pos":[623,754],"source":"A `choice` messaging block is a multi-source, single-target block that represents a control-flow interaction with a set of sources."},{"content":"The choice block will wait for any one of multiple sources to produce a message and will propagate the index of the source that produced the message.","pos":[755,904]},{"content":"Syntax","pos":[913,919]},{"content":"Parameters","pos":[1013,1023]},{"content":"A <ph id=\"ph1\">`tuple`</ph>-based type representing the payloads of the input sources.","pos":[1034,1102],"source":" A `tuple`-based type representing the payloads of the input sources."},{"content":"Members","pos":[1111,1118]},{"content":"Public Typedefs","pos":[1128,1143]},{"content":"Name","pos":[1150,1154]},{"content":"Description","pos":[1155,1166]},{"pos":[1211,1232],"content":"A type alias for <ph id=\"ph1\">`T`</ph>.","source":"A type alias for `T`."},{"content":"Public Constructors","pos":[1243,1262]},{"content":"Name","pos":[1269,1273]},{"content":"Description","pos":[1274,1285]},{"content":"choice::choice Constructor","pos":[1324,1350]},{"content":"Overloaded.","pos":[1359,1370]},{"content":"Constructs a <ph id=\"ph1\">`choice`</ph> messaging block.","pos":[1371,1409],"source":" Constructs a `choice` messaging block."},{"content":"choice::~choice Destructor","pos":[1415,1441]},{"pos":[1450,1488],"content":"Destroys the <ph id=\"ph1\">`choice`</ph> messaging block.","source":"Destroys the `choice` messaging block."},{"content":"Public Methods","pos":[1499,1513]},{"content":"Name","pos":[1520,1524]},{"content":"Description","pos":[1525,1536]},{"content":"choice::accept Method","pos":[1575,1596]},{"pos":[1607,1703],"content":"Accepts a message that was offered by this <ph id=\"ph1\">`choice`</ph> block, transferring ownership to the caller.","source":"Accepts a message that was offered by this `choice` block, transferring ownership to the caller."},{"content":"choice::acquire_ref Method","pos":[1709,1735]},{"pos":[1751,1832],"content":"Acquires a reference count on this <ph id=\"ph1\">`choice`</ph> messaging block, to prevent deletion.","source":"Acquires a reference count on this `choice` messaging block, to prevent deletion."},{"content":"choice::consume Method","pos":[1838,1860]},{"pos":[1872,2021],"content":"Consumes a message previously offered by this <ph id=\"ph1\">`choice`</ph> messaging block and successfully reserved by the target, transferring ownership to the caller.","source":"Consumes a message previously offered by this `choice` messaging block and successfully reserved by the target, transferring ownership to the caller."},{"content":"choice::has_value Method","pos":[2027,2051]},{"pos":[2065,2148],"content":"Checks whether this <ph id=\"ph1\">`choice`</ph> messaging block has been initialized with a value yet.","source":"Checks whether this `choice` messaging block has been initialized with a value yet."},{"content":"choice::index Method","pos":[2154,2174]},{"pos":[2184,2284],"content":"Returns an index into the <ph id=\"ph1\">`tuple`</ph> representing the element selected by the <ph id=\"ph2\">`choice`</ph> messaging block.","source":"Returns an index into the `tuple` representing the element selected by the `choice` messaging block."},{"content":"choice::link_target Method","pos":[2290,2316]},{"pos":[2332,2386],"content":"Links a target block to this <ph id=\"ph1\">`choice`</ph> messaging block.","source":"Links a target block to this `choice` messaging block."},{"content":"choice::release Method","pos":[2392,2414]},{"content":"Releases a previous successful message reservation.","pos":[2426,2477]},{"content":"choice::release_ref Method","pos":[2483,2509]},{"pos":[2525,2585],"content":"Releases a reference count on this <ph id=\"ph1\">`choice`</ph> messaging block.","source":"Releases a reference count on this `choice` messaging block."},{"content":"choice::reserve Method","pos":[2591,2613]},{"pos":[2625,2696],"content":"Reserves a message previously offered by this <ph id=\"ph1\">`choice`</ph> messaging block.","source":"Reserves a message previously offered by this `choice` messaging block."},{"content":"choice::unlink_target Method","pos":[2702,2730]},{"pos":[2748,2806],"content":"Unlinks a target block from this <ph id=\"ph1\">`choice`</ph> messaging block.","source":"Unlinks a target block from this `choice` messaging block."},{"content":"choice::unlink_targets Method","pos":[2812,2841]},{"content":"Unlinks all targets from this <ph id=\"ph1\">`choice`</ph> messaging block.","pos":[2860,2915],"source":"Unlinks all targets from this `choice` messaging block."},{"content":"(Overrides <bpt id=\"p1\">[</bpt>ISource::unlink_targets<ept id=\"p1\">](isource-class.md#unlink_targets)</ept>.)","pos":[2916,2987],"source":" (Overrides [ISource::unlink_targets](isource-class.md#unlink_targets).)"},{"content":"choice::value Method","pos":[2993,3013]},{"pos":[3023,3097],"content":"Gets the message whose index was selected by the <ph id=\"ph1\">`choice`</ph> messaging block.","source":"Gets the message whose index was selected by the `choice` messaging block."},{"content":"Remarks","pos":[3107,3114]},{"content":"The choice block ensures that only one of the incoming messages is consumed.","pos":[3118,3194]},{"pos":[3201,3314],"content":"For more information, see <bpt id=\"p1\">[</bpt>Asynchronous Message Blocks<ept id=\"p1\">](../../../parallel/concrt/asynchronous-message-blocks.md)</ept>.","source":"For more information, see [Asynchronous Message Blocks](../../../parallel/concrt/asynchronous-message-blocks.md)."},{"content":"Inheritance Hierarchy","pos":[3323,3344]},{"content":"ISource","pos":[3349,3356]},{"content":"Requirements","pos":[3399,3411]},{"pos":[3415,3435],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> agents.h","source":"**Header:** agents.h"},{"pos":[3442,3468],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[3501,3522],"content":"choice::accept Method"},{"pos":[3526,3622],"content":"Accepts a message that was offered by this <ph id=\"ph1\">`choice`</ph> block, transferring ownership to the caller.","source":"Accepts a message that was offered by this `choice` block, transferring ownership to the caller."},{"content":"Parameters","pos":[3758,3768]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the offered <ph id=\"ph2\">`message`</ph> object.","pos":[3784,3846],"source":" The `runtime_object_identity` of the offered `message` object."},{"content":"A pointer to the target block that is calling the <ph id=\"ph1\">`accept`</ph> method.","pos":[3867,3933],"source":" A pointer to the target block that is calling the `accept` method."},{"content":"Return Value","pos":[3943,3955]},{"content":"A pointer to the message that the caller now has ownership of.","pos":[3959,4021]},{"pos":[4059,4085],"content":"choice::acquire_ref Method"},{"pos":[4089,4170],"content":"Acquires a reference count on this <ph id=\"ph1\">`choice`</ph> messaging block, to prevent deletion.","source":"Acquires a reference count on this `choice` messaging block, to prevent deletion."},{"content":"Parameters","pos":[4256,4266]},{"content":"A pointer to the target block that is calling this method.","pos":[4284,4342]},{"content":"Remarks","pos":[4352,4359]},{"pos":[4363,4476],"content":"This method is called by an <ph id=\"ph1\">`ITarget`</ph> object that is being linked to this source during the <ph id=\"ph2\">`link_target`</ph> method.","source":"This method is called by an `ITarget` object that is being linked to this source during the `link_target` method."},{"pos":[4507,4533],"content":"choice::choice Constructor"},{"pos":[4537,4575],"content":"Constructs a <ph id=\"ph1\">`choice`</ph> messaging block.","source":"Constructs a `choice` messaging block."},{"content":"Parameters","pos":[4786,4796]},{"content":"A <ph id=\"ph1\">`tuple`</ph> of sources for the choice.","pos":[4812,4848],"source":" A `tuple` of sources for the choice."},{"content":"The <ph id=\"ph1\">`Scheduler`</ph> object within which the propagation task for the <ph id=\"ph2\">`choice`</ph> messaging block is scheduled.","pos":[4872,4975],"source":" The `Scheduler` object within which the propagation task for the `choice` messaging block is scheduled."},{"content":"The <ph id=\"ph1\">`ScheduleGroup`</ph> object within which the propagation task for the <ph id=\"ph2\">`choice`</ph> messaging block is scheduled.","pos":[5003,5110],"source":" The `ScheduleGroup` object within which the propagation task for the `choice` messaging block is scheduled."},{"content":"The <ph id=\"ph1\">`Scheduler`</ph> object used is implied by the schedule group.","pos":[5111,5172],"source":" The `Scheduler` object used is implied by the schedule group."},{"content":"A <ph id=\"ph1\">`choice`</ph> messaging block to copy from.","pos":[5192,5232],"source":" A `choice` messaging block to copy from."},{"content":"Note that the original object is orphaned, making this a move constructor.","pos":[5233,5307]},{"content":"Remarks","pos":[5317,5324]},{"pos":[5328,5439],"content":"The runtime uses the default scheduler if you do not specify the <ph id=\"ph1\">`_PScheduler`</ph> or <ph id=\"ph2\">`_PScheduleGroup`</ph> parameters.","source":"The runtime uses the default scheduler if you do not specify the `_PScheduler` or `_PScheduleGroup` parameters."},{"content":"Move construction is not performed under a lock, which means that it is up to the user to make sure that there are no light-weight tasks in flight at the time of moving.","pos":[5446,5615]},{"content":"Otherwise, numerous races can occur, leading to exceptions or inconsistent state.","pos":[5616,5697]},{"pos":[5728,5754],"content":"choice::~choice Destructor"},{"pos":[5758,5796],"content":"Destroys the <ph id=\"ph1\">`choice`</ph> messaging block.","source":"Destroys the `choice` messaging block."},{"pos":[5856,5878],"content":"choice::consume Method"},{"pos":[5882,6031],"content":"Consumes a message previously offered by this <ph id=\"ph1\">`choice`</ph> messaging block and successfully reserved by the target, transferring ownership to the caller.","source":"Consumes a message previously offered by this `choice` messaging block and successfully reserved by the target, transferring ownership to the caller."},{"content":"Parameters","pos":[6168,6178]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the reserved <ph id=\"ph2\">`message`</ph> object.","pos":[6194,6257],"source":" The `runtime_object_identity` of the reserved `message` object."},{"content":"A pointer to the target block that is calling the <ph id=\"ph1\">`consume`</ph> method.","pos":[6278,6345],"source":" A pointer to the target block that is calling the `consume` method."},{"content":"Return Value","pos":[6355,6367]},{"pos":[6371,6442],"content":"A pointer to the <ph id=\"ph1\">`message`</ph> object that the caller now has ownership of.","source":"A pointer to the `message` object that the caller now has ownership of."},{"content":"Remarks","pos":[6452,6459]},{"pos":[6463,6580],"content":"The <ph id=\"ph1\">`consume`</ph> method is similar to <ph id=\"ph2\">`accept`</ph>, but must always be preceded by a call to <ph id=\"ph3\">`reserve`</ph> that returned <ph id=\"ph4\">`true`</ph>.","source":"The `consume` method is similar to `accept`, but must always be preceded by a call to `reserve` that returned `true`."},{"pos":[6616,6640],"content":"choice::has_value Method"},{"pos":[6644,6727],"content":"Checks whether this <ph id=\"ph1\">`choice`</ph> messaging block has been initialized with a value yet.","source":"Checks whether this `choice` messaging block has been initialized with a value yet."},{"content":"Return Value","pos":[6779,6791]},{"pos":[6802,6855],"content":"if the block has received a value, <ph id=\"ph1\">`false`</ph> otherwise.","source":" if the block has received a value, `false` otherwise."},{"pos":[6887,6907],"content":"choice::index Method"},{"pos":[6911,7011],"content":"Returns an index into the <ph id=\"ph1\">`tuple`</ph> representing the element selected by the <ph id=\"ph2\">`choice`</ph> messaging block.","source":"Returns an index into the `tuple` representing the element selected by the `choice` messaging block."},{"content":"Return Value","pos":[7052,7064]},{"content":"The message index.","pos":[7068,7086]},{"content":"Remarks","pos":[7096,7103]},{"pos":[7107,7167],"content":"The message payload can be extracted using the <ph id=\"ph1\">`get`</ph> method.","source":"The message payload can be extracted using the `get` method."},{"pos":[7205,7231],"content":"choice::link_target Method"},{"pos":[7235,7289],"content":"Links a target block to this <ph id=\"ph1\">`choice`</ph> messaging block.","source":"Links a target block to this `choice` messaging block."},{"content":"Parameters","pos":[7375,7385]},{"content":"A pointer to an <ph id=\"ph1\">`ITarget`</ph> block to link to this <ph id=\"ph2\">`choice`</ph> messaging block.","pos":[7403,7476],"source":" A pointer to an `ITarget` block to link to this `choice` messaging block."},{"pos":[7510,7532],"content":"choice::release Method"},{"content":"Releases a previous successful message reservation.","pos":[7536,7587]},{"content":"Parameters","pos":[7712,7722]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the <ph id=\"ph2\">`message`</ph> object being released.","pos":[7738,7807],"source":" The `runtime_object_identity` of the `message` object being released."},{"content":"A pointer to the target block that is calling the <ph id=\"ph1\">`release`</ph> method.","pos":[7828,7895],"source":" A pointer to the target block that is calling the `release` method."},{"pos":[7933,7959],"content":"choice::release_ref Method"},{"pos":[7963,8023],"content":"Releases a reference count on this <ph id=\"ph1\">`choice`</ph> messaging block.","source":"Releases a reference count on this `choice` messaging block."},{"content":"Parameters","pos":[8109,8119]},{"content":"A pointer to the target block that is calling this method.","pos":[8137,8195]},{"content":"Remarks","pos":[8205,8212]},{"content":"This method is called by an <ph id=\"ph1\">`ITarget`</ph> object that is being unlinked from this source.","pos":[8216,8301],"source":"This method is called by an `ITarget` object that is being unlinked from this source."},{"content":"The source block is allowed to release any resources reserved for the target block.","pos":[8302,8385]},{"pos":[8419,8441],"content":"choice::reserve Method"},{"pos":[8445,8516],"content":"Reserves a message previously offered by this <ph id=\"ph1\">`choice`</ph> messaging block.","source":"Reserves a message previously offered by this `choice` messaging block."},{"content":"Parameters","pos":[8641,8651]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the <ph id=\"ph2\">`message`</ph> object being reserved.","pos":[8667,8736],"source":" The `runtime_object_identity` of the `message` object being reserved."},{"content":"A pointer to the target block that is calling the <ph id=\"ph1\">`reserve`</ph> method.","pos":[8757,8824],"source":" A pointer to the target block that is calling the `reserve` method."},{"content":"Return Value","pos":[8834,8846]},{"content":"if the message was successfully reserved, <ph id=\"ph1\">`false`</ph> otherwise.","pos":[8857,8917],"source":" if the message was successfully reserved, `false` otherwise."},{"content":"Reservations can fail for many reasons, including: the message was already reserved or accepted by another target, the source could deny reservations, and so forth.","pos":[8918,9082]},{"content":"Remarks","pos":[9092,9099]},{"pos":[9103,9257],"content":"After you call <ph id=\"ph1\">`reserve`</ph>, if it succeeds, you must call either <ph id=\"ph2\">`consume`</ph> or <ph id=\"ph3\">`release`</ph> in order to take or give up possession of the message, respectively.","source":"After you call `reserve`, if it succeeds, you must call either `consume` or `release` in order to take or give up possession of the message, respectively."},{"pos":[9297,9325],"content":"choice::unlink_target Method"},{"pos":[9329,9387],"content":"Unlinks a target block from this <ph id=\"ph1\">`choice`</ph> messaging block.","source":"Unlinks a target block from this `choice` messaging block."},{"content":"Parameters","pos":[9475,9485]},{"content":"A pointer to an <ph id=\"ph1\">`ITarget`</ph> block to unlink from this <ph id=\"ph2\">`choice`</ph> messaging block.","pos":[9503,9580],"source":" A pointer to an `ITarget` block to unlink from this `choice` messaging block."},{"pos":[9621,9650],"content":"choice::unlink_targets Method"},{"pos":[9654,9709],"content":"Unlinks all targets from this <ph id=\"ph1\">`choice`</ph> messaging block.","source":"Unlinks all targets from this `choice` messaging block."},{"content":"Remarks","pos":[9765,9772]},{"pos":[9776,9918],"content":"This method does not need to be called from the destructor because destructor for the internal <ph id=\"ph1\">`single_assignment`</ph> block will unlink properly.","source":"This method does not need to be called from the destructor because destructor for the internal `single_assignment` block will unlink properly."},{"pos":[9950,9970],"content":"choice::value Method"},{"pos":[9974,10048],"content":"Gets the message whose index was selected by the <ph id=\"ph1\">`choice`</ph> messaging block.","source":"Gets the message whose index was selected by the `choice` messaging block."},{"content":"Parameters","pos":[10147,10157]},{"content":"The type of the message payload.","pos":[10180,10212]},{"content":"Return Value","pos":[10222,10234]},{"content":"The payload of the message.","pos":[10238,10265]},{"content":"Remarks","pos":[10275,10282]},{"content":"Because a <ph id=\"ph1\">`choice`</ph> messaging block can take inputs with different payload types, you must specify the type of the payload at the point of retrieval.","pos":[10286,10434],"source":"Because a `choice` messaging block can take inputs with different payload types, you must specify the type of the payload at the point of retrieval."},{"content":"You can determine the type based on the result of the <ph id=\"ph1\">`index`</ph> method.","pos":[10435,10504],"source":" You can determine the type based on the result of the `index` method."},{"content":"See Also","pos":[10513,10521]},{"content":"concurrency Namespace","pos":[10526,10547]},{"content":"join Class","pos":[10580,10590]},{"content":"single_assignment Class","pos":[10612,10635]}],"content":"---\ntitle: \"choice Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"agents/concurrency::choice\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"choice class\"\nms.assetid: 4157a539-d5c2-4161-b1ab-536ce2888397\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# choice Class\nA `choice` messaging block is a multi-source, single-target block that represents a control-flow interaction with a set of sources. The choice block will wait for any one of multiple sources to produce a message and will propagate the index of the source that produced the message.  \n  \n## Syntax  \n  \n```  \ntemplate<\n    class T  \n>  \nclass choice: public ISource<size_t>;  \n```  \n  \n#### Parameters  \n `T`  \n A `tuple`-based type representing the payloads of the input sources.  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`type`|A type alias for `T`.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[choice::choice Constructor](#ctor)|Overloaded. Constructs a `choice` messaging block.|  \n|[choice::~choice Destructor](#dtor)|Destroys the `choice` messaging block.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[choice::accept Method](#accept)|Accepts a message that was offered by this `choice` block, transferring ownership to the caller.|  \n|[choice::acquire_ref Method](#acquire_ref)|Acquires a reference count on this `choice` messaging block, to prevent deletion.|  \n|[choice::consume Method](#consume)|Consumes a message previously offered by this `choice` messaging block and successfully reserved by the target, transferring ownership to the caller.|  \n|[choice::has_value Method](#has_value)|Checks whether this `choice` messaging block has been initialized with a value yet.|  \n|[choice::index Method](#index)|Returns an index into the `tuple` representing the element selected by the `choice` messaging block.|  \n|[choice::link_target Method](#link_target)|Links a target block to this `choice` messaging block.|  \n|[choice::release Method](#release)|Releases a previous successful message reservation.|  \n|[choice::release_ref Method](#release_ref)|Releases a reference count on this `choice` messaging block.|  \n|[choice::reserve Method](#reserve)|Reserves a message previously offered by this `choice` messaging block.|  \n|[choice::unlink_target Method](#unlink_target)|Unlinks a target block from this `choice` messaging block.|  \n|[choice::unlink_targets Method](#unlink_targets)|Unlinks all targets from this `choice` messaging block. (Overrides [ISource::unlink_targets](isource-class.md#unlink_targets).)|  \n|[choice::value Method](#value)|Gets the message whose index was selected by the `choice` messaging block.|  \n  \n## Remarks  \n The choice block ensures that only one of the incoming messages is consumed.  \n  \n For more information, see [Asynchronous Message Blocks](../../../parallel/concrt/asynchronous-message-blocks.md).  \n  \n## Inheritance Hierarchy  \n [ISource](isource-class.md)  \n  \n `choice`  \n  \n## Requirements  \n **Header:** agents.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"accept\"></a>  choice::accept Method  \n Accepts a message that was offered by this `choice` block, transferring ownership to the caller.  \n  \n```  \nvirtual message<size_t>* accept(\n    runtime_object_identity _MsgId,  \n    _Inout_ ITarget<size_t>* _PTarget);\n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the offered `message` object.  \n  \n `_PTarget`  \n A pointer to the target block that is calling the `accept` method.  \n  \n### Return Value  \n A pointer to the message that the caller now has ownership of.  \n  \n##  <a name=\"acquire_ref\"></a>  choice::acquire_ref Method  \n Acquires a reference count on this `choice` messaging block, to prevent deletion.  \n  \n```  \nvirtual void acquire_ref(_Inout_ ITarget<size_t>* _PTarget);\n```  \n  \n### Parameters  \n `_PTarget`  \n A pointer to the target block that is calling this method.  \n  \n### Remarks  \n This method is called by an `ITarget` object that is being linked to this source during the `link_target` method.  \n  \n##  <a name=\"ctor\"></a>  choice::choice Constructor  \n Constructs a `choice` messaging block.  \n  \n```  \nexplicit choice(\n    T _Tuple);\n\n \nchoice(\n    Scheduler& _PScheduler,  \n    T _Tuple);\n\n \nchoice(\n    ScheduleGroup& _PScheduleGroup,  \n    T _Tuple);\n\n \nchoice(\n    choice&& _Choice);\n```  \n  \n### Parameters  \n `_Tuple`  \n A `tuple` of sources for the choice.  \n  \n `_PScheduler`  \n The `Scheduler` object within which the propagation task for the `choice` messaging block is scheduled.  \n  \n `_PScheduleGroup`  \n The `ScheduleGroup` object within which the propagation task for the `choice` messaging block is scheduled. The `Scheduler` object used is implied by the schedule group.  \n  \n `_Choice`  \n A `choice` messaging block to copy from. Note that the original object is orphaned, making this a move constructor.  \n  \n### Remarks  \n The runtime uses the default scheduler if you do not specify the `_PScheduler` or `_PScheduleGroup` parameters.  \n  \n Move construction is not performed under a lock, which means that it is up to the user to make sure that there are no light-weight tasks in flight at the time of moving. Otherwise, numerous races can occur, leading to exceptions or inconsistent state.  \n  \n##  <a name=\"dtor\"></a>  choice::~choice Destructor  \n Destroys the `choice` messaging block.  \n  \n```  \n~choice();\n```  \n  \n##  <a name=\"consume\"></a>  choice::consume Method  \n Consumes a message previously offered by this `choice` messaging block and successfully reserved by the target, transferring ownership to the caller.  \n  \n```  \nvirtual message<size_t>* consume(\n    runtime_object_identity _MsgId,  \n    _Inout_ ITarget<size_t>* _PTarget);\n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the reserved `message` object.  \n  \n `_PTarget`  \n A pointer to the target block that is calling the `consume` method.  \n  \n### Return Value  \n A pointer to the `message` object that the caller now has ownership of.  \n  \n### Remarks  \n The `consume` method is similar to `accept`, but must always be preceded by a call to `reserve` that returned `true`.  \n  \n##  <a name=\"has_value\"></a>  choice::has_value Method  \n Checks whether this `choice` messaging block has been initialized with a value yet.  \n  \n```  \nbool has_value() const;\n\n \n```  \n  \n### Return Value  \n `true` if the block has received a value, `false` otherwise.  \n  \n##  <a name=\"index\"></a>  choice::index Method  \n Returns an index into the `tuple` representing the element selected by the `choice` messaging block.  \n  \n```  \nsize_t index();\n```  \n  \n### Return Value  \n The message index.  \n  \n### Remarks  \n The message payload can be extracted using the `get` method.  \n  \n##  <a name=\"link_target\"></a>  choice::link_target Method  \n Links a target block to this `choice` messaging block.  \n  \n```  \nvirtual void link_target(_Inout_ ITarget<size_t>* _PTarget);\n```  \n  \n### Parameters  \n `_PTarget`  \n A pointer to an `ITarget` block to link to this `choice` messaging block.  \n  \n##  <a name=\"release\"></a>  choice::release Method  \n Releases a previous successful message reservation.  \n  \n```  \nvirtual void release(\n    runtime_object_identity _MsgId,  \n    _Inout_ ITarget<size_t>* _PTarget);\n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the `message` object being released.  \n  \n `_PTarget`  \n A pointer to the target block that is calling the `release` method.  \n  \n##  <a name=\"release_ref\"></a>  choice::release_ref Method  \n Releases a reference count on this `choice` messaging block.  \n  \n```  \nvirtual void release_ref(_Inout_ ITarget<size_t>* _PTarget);\n```  \n  \n### Parameters  \n `_PTarget`  \n A pointer to the target block that is calling this method.  \n  \n### Remarks  \n This method is called by an `ITarget` object that is being unlinked from this source. The source block is allowed to release any resources reserved for the target block.  \n  \n##  <a name=\"reserve\"></a>  choice::reserve Method  \n Reserves a message previously offered by this `choice` messaging block.  \n  \n```  \nvirtual bool reserve(\n    runtime_object_identity _MsgId,  \n    _Inout_ ITarget<size_t>* _PTarget);\n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the `message` object being reserved.  \n  \n `_PTarget`  \n A pointer to the target block that is calling the `reserve` method.  \n  \n### Return Value  \n `true` if the message was successfully reserved, `false` otherwise. Reservations can fail for many reasons, including: the message was already reserved or accepted by another target, the source could deny reservations, and so forth.  \n  \n### Remarks  \n After you call `reserve`, if it succeeds, you must call either `consume` or `release` in order to take or give up possession of the message, respectively.  \n  \n##  <a name=\"unlink_target\"></a>  choice::unlink_target Method  \n Unlinks a target block from this `choice` messaging block.  \n  \n```  \nvirtual void unlink_target(_Inout_ ITarget<size_t>* _PTarget);\n```  \n  \n### Parameters  \n `_PTarget`  \n A pointer to an `ITarget` block to unlink from this `choice` messaging block.  \n  \n##  <a name=\"unlink_targets\"></a>  choice::unlink_targets Method  \n Unlinks all targets from this `choice` messaging block.  \n  \n```  \nvirtual void unlink_targets();\n```  \n  \n### Remarks  \n This method does not need to be called from the destructor because destructor for the internal `single_assignment` block will unlink properly.  \n  \n##  <a name=\"value\"></a>  choice::value Method  \n Gets the message whose index was selected by the `choice` messaging block.  \n  \n```  \ntemplate <\n    typename _Payload_type  \n>  \n_Payload_type const& value();\n```  \n  \n### Parameters  \n `_Payload_type`  \n The type of the message payload.  \n  \n### Return Value  \n The payload of the message.  \n  \n### Remarks  \n Because a `choice` messaging block can take inputs with different payload types, you must specify the type of the payload at the point of retrieval. You can determine the type based on the result of the `index` method.  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)   \n [join Class](join-class.md)   \n [single_assignment Class](single-assignment-class.md)\n"}