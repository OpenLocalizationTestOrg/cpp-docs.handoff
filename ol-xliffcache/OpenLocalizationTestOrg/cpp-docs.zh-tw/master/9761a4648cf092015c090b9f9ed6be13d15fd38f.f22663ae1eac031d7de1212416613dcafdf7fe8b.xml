{"nodes":[{"pos":[12,67],"content":"_ASSERT, _ASSERTE, _ASSERT_EXPR Macros | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_ASSERT, _ASSERTE, _ASSERT_EXPR Macros | Microsoft Docs","pos":[0,55]}]},{"content":"_ASSERT, _ASSERTE, _ASSERT_EXPR Macros","pos":[1059,1097]},{"pos":[1098,1197],"content":"Evaluate an expression and generate a debug report when the result is <ph id=\"ph1\">`False`</ph> (debug version only).","source":"Evaluate an expression and generate a debug report when the result is `False` (debug version only)."},{"content":"Syntax","pos":[1206,1212]},{"content":"Parameters","pos":[1382,1392]},{"content":"A scalar expression (including pointer expressions) that evaluates to nonzero (true) or 0 (false).","pos":[1419,1517]},{"content":"A wide string to display as part of the report.","pos":[1537,1584]},{"content":"Remarks","pos":[1593,1600]},{"content":"The <ph id=\"ph1\">`_ASSERT_EXPR`</ph>, <ph id=\"ph2\">`_ASSERT`</ph> and <ph id=\"ph3\">`_ASSERTE`</ph> macros provide an application with a clean and simple mechanism for checking assumptions during the debugging process.","pos":[1604,1767],"source":"The `_ASSERT_EXPR`, `_ASSERT` and `_ASSERTE` macros provide an application with a clean and simple mechanism for checking assumptions during the debugging process."},{"content":"They are very flexible because they do not need to be enclosed in <ph id=\"ph1\">`#ifdef`</ph> statements to prevent them from being called in a retail build of an application.","pos":[1768,1924],"source":" They are very flexible because they do not need to be enclosed in `#ifdef` statements to prevent them from being called in a retail build of an application."},{"content":"This flexibility is achieved by using the <bpt id=\"p1\">[</bpt>_DEBUG<ept id=\"p1\">](../../c-runtime-library/debug.md)</ept> macro.","pos":[1925,2016],"source":" This flexibility is achieved by using the [_DEBUG](../../c-runtime-library/debug.md) macro."},{"content":", <ph id=\"ph1\">`_ASSERT`</ph> and <ph id=\"ph2\">`_ASSERTE`</ph> are only available when <ph id=\"ph3\">`_DEBUG`</ph> is defined at compile time.","pos":[2031,2118],"source":", `_ASSERT` and `_ASSERTE` are only available when `_DEBUG` is defined at compile time."},{"content":"When <ph id=\"ph1\">`_DEBUG`</ph> is not defined, calls to these macros are removed during preprocessing.","pos":[2119,2204],"source":" When `_DEBUG` is not defined, calls to these macros are removed during preprocessing."},{"content":", <ph id=\"ph1\">`_ASSERT`</ph> and <ph id=\"ph2\">`_ASSERTE`</ph> evaluate their <ph id=\"ph3\">`booleanExpression`</ph> argument and when the result is <ph id=\"ph4\">`false`</ph> (0), they print a diagnostic message and call <bpt id=\"p1\">[</bpt>_CrtDbgReportW<ept id=\"p1\">](../../c-runtime-library/reference/crtdbgreport-crtdbgreportw.md)</ept> to generate a debug report.","pos":[2225,2482],"source":", `_ASSERT` and `_ASSERTE` evaluate their `booleanExpression` argument and when the result is `false` (0), they print a diagnostic message and call [_CrtDbgReportW](../../c-runtime-library/reference/crtdbgreport-crtdbgreportw.md) to generate a debug report."},{"content":"The <ph id=\"ph1\">`_ASSERT`</ph> macro prints a simple diagnostic message,  <ph id=\"ph2\">`_ASSERTE`</ph> includes a string representation of the failed expression in the message, and <ph id=\"ph3\">`_ASSERT_EXPR`</ph> includes the <ph id=\"ph4\">`message`</ph> string in the diagnostic message.","pos":[2483,2700],"source":" The `_ASSERT` macro prints a simple diagnostic message,  `_ASSERTE` includes a string representation of the failed expression in the message, and `_ASSERT_EXPR` includes the `message` string in the diagnostic message."},{"content":"These macros do nothing when <ph id=\"ph1\">`booleanExpression`</ph> evaluates to nonzero.","pos":[2701,2771],"source":" These macros do nothing when `booleanExpression` evaluates to nonzero."},{"content":", <ph id=\"ph1\">`_ASSERT`</ph> and <ph id=\"ph2\">`_ASSERTE`</ph> invoke <ph id=\"ph3\">`_CrtDbgReportW`</ph>, which causes all output to be in wide characters.","pos":[2792,2893],"source":", `_ASSERT` and `_ASSERTE` invoke `_CrtDbgReportW`, which causes all output to be in wide characters."},{"content":"properly prints Unicode characters in <ph id=\"ph1\">`booleanExpression`</ph> and <ph id=\"ph2\">`_ASSERT_EXPR`</ph> prints Unicode characters in <ph id=\"ph3\">`message`</ph>.","pos":[2905,3021],"source":" properly prints Unicode characters in `booleanExpression` and `_ASSERT_EXPR` prints Unicode characters in `message`."},{"content":"Because the <ph id=\"ph1\">`_ASSERTE`</ph> macro specifies the failed expression, and <ph id=\"ph2\">`_ASSERT_EXPR`</ph> lets you specify a message in the generated report, they enable users to identify the problem without referring to the application source code.","pos":[3028,3252],"source":"Because the `_ASSERTE` macro specifies the failed expression, and `_ASSERT_EXPR` lets you specify a message in the generated report, they enable users to identify the problem without referring to the application source code."},{"content":"However, a disadvantage exists in that every <ph id=\"ph1\">`message`</ph> printed by <ph id=\"ph2\">`_ASSERT_EXPR`</ph> and every expression evaluated by <ph id=\"ph3\">`_ASSERTE`</ph> is included in the output (debug version) file of your application as a string constant.","pos":[3253,3467],"source":" However, a disadvantage exists in that every `message` printed by `_ASSERT_EXPR` and every expression evaluated by `_ASSERTE` is included in the output (debug version) file of your application as a string constant."},{"content":"Therefore, if a large number of calls are made to <ph id=\"ph1\">`_ASSERT_EXPR`</ph> or <ph id=\"ph2\">`_ASSERTE`</ph>, these expressions can greatly increase the size of your output file.","pos":[3468,3616],"source":" Therefore, if a large number of calls are made to `_ASSERT_EXPR` or `_ASSERTE`, these expressions can greatly increase the size of your output file."},{"pos":[3623,3887],"content":"Unless you specify otherwise with the <bpt id=\"p1\">[</bpt>_CrtSetReportMode<ept id=\"p1\">](../../c-runtime-library/reference/crtsetreportmode.md)</ept> and <bpt id=\"p2\">[</bpt>_CrtSetReportFile<ept id=\"p2\">](../../c-runtime-library/reference/crtsetreportfile.md)</ept> functions, messages appear in a pop-up dialog box equivalent to setting:","source":"Unless you specify otherwise with the [_CrtSetReportMode](../../c-runtime-library/reference/crtsetreportmode.md) and [_CrtSetReportFile](../../c-runtime-library/reference/crtsetreportfile.md) functions, messages appear in a pop-up dialog box equivalent to setting:"},{"content":"generates the debug report and determines its destination or destinations, based on the current report mode or modes and file defined for the <ph id=\"ph1\">`_CRT_ASSERT`</ph> report type.","pos":[3979,4147],"source":" generates the debug report and determines its destination or destinations, based on the current report mode or modes and file defined for the `_CRT_ASSERT` report type."},{"content":"By default, assertion failures and errors are directed to a debug message window.","pos":[4148,4229]},{"content":"The <bpt id=\"p1\">[</bpt>_CrtSetReportMode<ept id=\"p1\">](../../c-runtime-library/reference/crtsetreportmode.md)</ept> and <bpt id=\"p2\">[</bpt>_CrtSetReportFile<ept id=\"p2\">](../../c-runtime-library/reference/crtsetreportfile.md)</ept> functions are used to define the destinations for each report type.","pos":[4230,4455],"source":" The [_CrtSetReportMode](../../c-runtime-library/reference/crtsetreportmode.md) and [_CrtSetReportFile](../../c-runtime-library/reference/crtsetreportfile.md) functions are used to define the destinations for each report type."},{"pos":[4462,4715],"content":"When the destination is a debug message window and the user clicks the <bpt id=\"p1\">**</bpt>Retry<ept id=\"p1\">**</ept> button, <ph id=\"ph1\">`_CrtDbgReportW`</ph> returns 1, causing the <ph id=\"ph2\">`_ASSERT_EXPR`</ph>, <ph id=\"ph3\">`_ASSERT`</ph> and <ph id=\"ph4\">`_ASSERTE`</ph> macros to start the debugger provided that just-in-time (JIT) debugging is enabled.","source":"When the destination is a debug message window and the user clicks the **Retry** button, `_CrtDbgReportW` returns 1, causing the `_ASSERT_EXPR`, `_ASSERT` and `_ASSERTE` macros to start the debugger provided that just-in-time (JIT) debugging is enabled."},{"content":"For more information about the reporting process, see the <bpt id=\"p1\">[</bpt>_CrtDbgReport, _CrtDbgReportW<ept id=\"p1\">](../../c-runtime-library/reference/crtdbgreport-crtdbgreportw.md)</ept> function.","pos":[4722,4886],"source":"For more information about the reporting process, see the [_CrtDbgReport, _CrtDbgReportW](../../c-runtime-library/reference/crtdbgreport-crtdbgreportw.md) function."},{"content":"For more information about resolving assertion failures and using these macros as a debugging error handling mechanism, see <bpt id=\"p1\">[</bpt>Using Macros for Verification and Reporting<ept id=\"p1\">](/visualstudio/debugger/macros-for-reporting)</ept>.","pos":[4887,5102],"source":" For more information about resolving assertion failures and using these macros as a debugging error handling mechanism, see [Using Macros for Verification and Reporting](/visualstudio/debugger/macros-for-reporting)."},{"content":"In addition to the <ph id=\"ph1\">`_ASSERT`</ph> macros, the <bpt id=\"p1\">[</bpt>assert<ept id=\"p1\">](../../c-runtime-library/reference/assert-macro-assert-wassert.md)</ept> macro can be used to verify program logic.","pos":[5109,5267],"source":"In addition to the `_ASSERT` macros, the [assert](../../c-runtime-library/reference/assert-macro-assert-wassert.md) macro can be used to verify program logic."},{"content":"This macro is available in both the debug and release versions of the libraries.","pos":[5268,5348]},{"content":"The <bpt id=\"p1\">[</bpt>_RPT, _RPTF<ept id=\"p1\">](../../c-runtime-library/reference/rpt-rptf-rptw-rptfw-macros.md)</ept> debug macros are also available for generating a debug report, but they do not evaluate an expression.","pos":[5349,5534],"source":" The [_RPT, _RPTF](../../c-runtime-library/reference/rpt-rptf-rptw-rptfw-macros.md) debug macros are also available for generating a debug report, but they do not evaluate an expression."},{"content":"The <ph id=\"ph1\">`_RPT`</ph> macros generate a simple report.","pos":[5535,5578],"source":" The `_RPT` macros generate a simple report."},{"content":"The <ph id=\"ph1\">`_RPTF`</ph> macros include the source file and line number where the report macro was called in the generated report.","pos":[5579,5696],"source":" The `_RPTF` macros include the source file and line number where the report macro was called in the generated report."},{"content":"Wide character versions of these macros are available (<ph id=\"ph1\">`_RPTWn`</ph>, <ph id=\"ph2\">`_RPTFWn`</ph>).","pos":[5697,5773],"source":" Wide character versions of these macros are available (`_RPTWn`, `_RPTFWn`)."},{"content":"The wide character versions are identical to the narrow character versions except that wide character strings are used for all string parameters and output.","pos":[5774,5930]},{"pos":[5937,6191],"content":"Although <ph id=\"ph1\">`_ASSERT_EXPR`</ph>, <ph id=\"ph2\">`_ASSERT`</ph> and <ph id=\"ph3\">`_ASSERTE`</ph> are macros and are available by including <ph id=\"ph4\">\\&lt;</ph>crtdbg.h&gt;, the application must link with a debug version of the C run-time library when <ph id=\"ph5\">`_DEBUG`</ph> is defined because these macros call other run-time functions.","source":"Although `_ASSERT_EXPR`, `_ASSERT` and `_ASSERTE` are macros and are available by including \\<crtdbg.h>, the application must link with a debug version of the C run-time library when `_DEBUG` is defined because these macros call other run-time functions."},{"content":"Requirements","pos":[6200,6212]},{"content":"Macro","pos":[6219,6224]},{"content":"Required header","pos":[6225,6240]},{"pos":[6297,6326],"content":",                  <ph id=\"ph1\">`_ASSERT`</ph>,","source":",                  `_ASSERT`, "},{"content":"crtdbg.h&gt;","pos":[6340,6349],"source":"crtdbg.h>"},{"content":"Example","pos":[6359,6366]},{"content":"In this program, calls are made to the <ph id=\"ph1\">`_ASSERT`</ph> and <ph id=\"ph2\">`_ASSERTE`</ph> macros to test the condition <ph id=\"ph3\">`string1 == string2`</ph>.","pos":[6370,6484],"source":"In this program, calls are made to the `_ASSERT` and `_ASSERTE` macros to test the condition `string1 == string2`."},{"content":"If the condition fails, these macros print a diagnostic message.","pos":[6485,6549]},{"content":"The <ph id=\"ph1\">`_RPTn`</ph> and <ph id=\"ph2\">`_RPTFn`</ph> group of macros is also exercised in this program, as an alternative to the <ph id=\"ph3\">`printf`</ph> function.","pos":[6550,6669],"source":" The `_RPTn` and `_RPTFn` group of macros is also exercised in this program, as an alternative to the `printf` function."},{"content":".NET Framework Equivalent","pos":[8876,8901]},{"content":"System::Diagnostics::Debug::Assert","pos":[8906,8940]},{"content":"See Also","pos":[9029,9037]},{"content":"Debug Routines","pos":[9042,9056]},{"content":"assert Macro, _assert, _wassert","pos":[9106,9137]},{"content":"_RPT, _RPTF, _RPTW, _RPTFW Macros","pos":[9210,9243]}],"content":"---\ntitle: \"_ASSERT, _ASSERTE, _ASSERT_EXPR Macros | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_ASSERTE\"\n  - \"ASSERTE\"\n  - \"_ASSERT\"\n  - \"_ASSERT_EXPR\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"debugging [CRT], using macros\"\n  - \"_ASSERTE macro\"\n  - \"macros, debugging with\"\n  - \"debug reporting macros\"\n  - \"_ASSERT macro\"\n  - \"_ASSERT_EXPR macro\"\nms.assetid: e98fd2a6-7f5e-4aa8-8fe8-e93490deba36\ncaps.latest.revision: 27\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _ASSERT, _ASSERTE, _ASSERT_EXPR Macros\nEvaluate an expression and generate a debug report when the result is `False` (debug version only).  \n  \n## Syntax  \n  \n```  \n_ASSERT_EXPR(  \n   booleanExpression,  \n   message  \n);  \n_ASSERT(   \n   booleanExpression   \n);  \n_ASSERTE(   \n   booleanExpression   \n);  \n  \n```  \n  \n#### Parameters  \n `booleanExpression`  \n A scalar expression (including pointer expressions) that evaluates to nonzero (true) or 0 (false).  \n  \n `message`  \n A wide string to display as part of the report.  \n  \n## Remarks  \n The `_ASSERT_EXPR`, `_ASSERT` and `_ASSERTE` macros provide an application with a clean and simple mechanism for checking assumptions during the debugging process. They are very flexible because they do not need to be enclosed in `#ifdef` statements to prevent them from being called in a retail build of an application. This flexibility is achieved by using the [_DEBUG](../../c-runtime-library/debug.md) macro. `_ASSERT_EXPR`, `_ASSERT` and `_ASSERTE` are only available when `_DEBUG` is defined at compile time. When `_DEBUG` is not defined, calls to these macros are removed during preprocessing.  \n  \n `_ASSERT_EXPR`, `_ASSERT` and `_ASSERTE` evaluate their `booleanExpression` argument and when the result is `false` (0), they print a diagnostic message and call [_CrtDbgReportW](../../c-runtime-library/reference/crtdbgreport-crtdbgreportw.md) to generate a debug report. The `_ASSERT` macro prints a simple diagnostic message,  `_ASSERTE` includes a string representation of the failed expression in the message, and `_ASSERT_EXPR` includes the `message` string in the diagnostic message. These macros do nothing when `booleanExpression` evaluates to nonzero.  \n  \n `_ASSERT_EXPR`, `_ASSERT` and `_ASSERTE` invoke `_CrtDbgReportW`, which causes all output to be in wide characters. `_ASSERTE` properly prints Unicode characters in `booleanExpression` and `_ASSERT_EXPR` prints Unicode characters in `message`.  \n  \n Because the `_ASSERTE` macro specifies the failed expression, and `_ASSERT_EXPR` lets you specify a message in the generated report, they enable users to identify the problem without referring to the application source code. However, a disadvantage exists in that every `message` printed by `_ASSERT_EXPR` and every expression evaluated by `_ASSERTE` is included in the output (debug version) file of your application as a string constant. Therefore, if a large number of calls are made to `_ASSERT_EXPR` or `_ASSERTE`, these expressions can greatly increase the size of your output file.  \n  \n Unless you specify otherwise with the [_CrtSetReportMode](../../c-runtime-library/reference/crtsetreportmode.md) and [_CrtSetReportFile](../../c-runtime-library/reference/crtsetreportfile.md) functions, messages appear in a pop-up dialog box equivalent to setting:  \n  \n```c  \n_CrtSetReportMode(CRT_ASSERT, _CRTDBG_MODE_WNDW);  \n```  \n  \n `_CrtDbgReportW` generates the debug report and determines its destination or destinations, based on the current report mode or modes and file defined for the `_CRT_ASSERT` report type. By default, assertion failures and errors are directed to a debug message window. The [_CrtSetReportMode](../../c-runtime-library/reference/crtsetreportmode.md) and [_CrtSetReportFile](../../c-runtime-library/reference/crtsetreportfile.md) functions are used to define the destinations for each report type.  \n  \n When the destination is a debug message window and the user clicks the **Retry** button, `_CrtDbgReportW` returns 1, causing the `_ASSERT_EXPR`, `_ASSERT` and `_ASSERTE` macros to start the debugger provided that just-in-time (JIT) debugging is enabled.  \n  \n For more information about the reporting process, see the [_CrtDbgReport, _CrtDbgReportW](../../c-runtime-library/reference/crtdbgreport-crtdbgreportw.md) function. For more information about resolving assertion failures and using these macros as a debugging error handling mechanism, see [Using Macros for Verification and Reporting](/visualstudio/debugger/macros-for-reporting).  \n  \n In addition to the `_ASSERT` macros, the [assert](../../c-runtime-library/reference/assert-macro-assert-wassert.md) macro can be used to verify program logic. This macro is available in both the debug and release versions of the libraries. The [_RPT, _RPTF](../../c-runtime-library/reference/rpt-rptf-rptw-rptfw-macros.md) debug macros are also available for generating a debug report, but they do not evaluate an expression. The `_RPT` macros generate a simple report. The `_RPTF` macros include the source file and line number where the report macro was called in the generated report. Wide character versions of these macros are available (`_RPTWn`, `_RPTFWn`). The wide character versions are identical to the narrow character versions except that wide character strings are used for all string parameters and output.  \n  \n Although `_ASSERT_EXPR`, `_ASSERT` and `_ASSERTE` are macros and are available by including \\<crtdbg.h>, the application must link with a debug version of the C run-time library when `_DEBUG` is defined because these macros call other run-time functions.  \n  \n## Requirements  \n  \n|Macro|Required header|  \n|-----------|---------------------|  \n|`_ASSERT_EXPR`,                  `_ASSERT`, `_ASSERTE`|\\<crtdbg.h>|  \n  \n## Example  \n In this program, calls are made to the `_ASSERT` and `_ASSERTE` macros to test the condition `string1 == string2`. If the condition fails, these macros print a diagnostic message. The `_RPTn` and `_RPTFn` group of macros is also exercised in this program, as an alternative to the `printf` function.  \n  \n```  \n// crt_ASSERT_macro.c  \n// compile with: /D_DEBUG /MTd /Od /Zi /link /verbose:lib /debug  \n//  \n// This program uses the _ASSERT and _ASSERTE debugging macros.  \n//  \n  \n#include <stdio.h>  \n#include <string.h>  \n#include <malloc.h>  \n#include <crtdbg.h>  \n  \nint main()  \n{  \n   char *p1, *p2;  \n  \n   // The Reporting Mode and File must be specified  \n   // before generating a debug report via an assert  \n   // or report macro.  \n   // This program sends all report types to STDOUT.  \n   _CrtSetReportMode(_CRT_WARN, _CRTDBG_MODE_FILE);  \n   _CrtSetReportFile(_CRT_WARN, _CRTDBG_FILE_STDOUT);  \n   _CrtSetReportMode(_CRT_ERROR, _CRTDBG_MODE_FILE);  \n   _CrtSetReportFile(_CRT_ERROR, _CRTDBG_FILE_STDOUT);  \n   _CrtSetReportMode(_CRT_ASSERT, _CRTDBG_MODE_FILE);  \n   _CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDOUT);  \n  \n   // Allocate and assign the pointer variables.  \n   p1 = (char *)malloc(10);  \n   strcpy_s(p1, 10, \"I am p1\");  \n   p2 = (char *)malloc(10);  \n   strcpy_s(p2, 10, \"I am p2\");  \n  \n   // Use the report macros as a debugging  \n   // warning mechanism, similar to printf.  \n   // Use the assert macros to check if the   \n   // p1 and p2 variables are equivalent.  \n   // If the expression fails, _ASSERTE will  \n   // include a string representation of the  \n   // failed expression in the report.  \n   // _ASSERT does not include the  \n   // expression in the generated report.  \n   _RPT0(_CRT_WARN,  \n       \"Use the assert macros to evaluate the expression p1 == p2.\\n\");  \n   _RPTF2(_CRT_WARN, \"\\n Will _ASSERT find '%s' == '%s' ?\\n\", p1, p2);  \n   _ASSERT(p1 == p2);  \n  \n   _RPTF2(_CRT_WARN, \"\\n\\n Will _ASSERTE find '%s' == '%s' ?\\n\",  \n          p1, p2);  \n   _ASSERTE(p1 == p2);  \n  \n   _RPT2(_CRT_ERROR, \"'%s' != '%s'\\n\", p1, p2);  \n  \n   free(p2);  \n   free(p1);  \n  \n   return 0;  \n}  \n```  \n  \n```Output  \nUse the assert macros to evaluate the expression p1 == p2.  \ncrt_ASSERT_macro.c(54) :   \n Will _ASSERT find 'I am p1' == 'I am p2' ?  \ncrt_ASSERT_macro.c(55) : Assertion failed!  \ncrt_ASSERT_macro.c(58) :   \n  \n Will _ASSERTE find 'I am p1' == 'I am p2' ?  \ncrt_ASSERT_macro.c(59) : Assertion failed: p1 == p2  \n'I am p1' != 'I am p2'  \n```  \n  \n## .NET Framework Equivalent  \n [System::Diagnostics::Debug::Assert](https://msdn.microsoft.com/en-us/library/system.diagnostics.debug.assert.aspx)  \n  \n## See Also  \n [Debug Routines](../../c-runtime-library/debug-routines.md)   \n [assert Macro, _assert, _wassert](../../c-runtime-library/reference/assert-macro-assert-wassert.md)   \n [_RPT, _RPTF, _RPTW, _RPTFW Macros](../../c-runtime-library/reference/rpt-rptf-rptw-rptfw-macros.md)"}