{"nodes":[{"pos":[12,47],"content":"Largest Array Size | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Largest Array Size | Microsoft Docs","pos":[0,35]}]},{"content":"Largest Array Size","pos":[561,579]},{"pos":[580,703],"content":"<bpt id=\"p1\">**</bpt>ANSI 3.3.3.4, 4.1.1<ept id=\"p1\">**</ept> The type of integer required to hold the maximum size of an array — that is, the size of <bpt id=\"p2\">**</bpt>size_t<ept id=\"p2\">**</ept>","source":"**ANSI 3.3.3.4, 4.1.1** The type of integer required to hold the maximum size of an array — that is, the size of **size_t**"},{"content":"The <ph id=\"ph1\">`size_t`</ph> typedef is an <ph id=\"ph2\">`unsigned int`</ph> on the 32-bit x86 platform.","pos":[710,779],"source":"The `size_t` typedef is an `unsigned int` on the 32-bit x86 platform."},{"content":"On 64-bit platforms, the <ph id=\"ph1\">`size_t`</ph> typedef is an <bpt id=\"p1\">**</bpt>unsigned __int64<ept id=\"p1\">**</ept>.","pos":[780,849],"source":" On 64-bit platforms, the `size_t` typedef is an **unsigned __int64**."},{"content":"See Also","pos":[858,866]},{"content":"Arrays and Pointers","pos":[871,890]}],"content":"---\ntitle: \"Largest Array Size | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nms.assetid: 4c782cf6-73f3-40b0-b306-229d22da4ee1\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Largest Array Size\n**ANSI 3.3.3.4, 4.1.1** The type of integer required to hold the maximum size of an array — that is, the size of **size_t**  \n  \n The `size_t` typedef is an `unsigned int` on the 32-bit x86 platform. On 64-bit platforms, the `size_t` typedef is an **unsigned __int64**.  \n  \n## See Also  \n [Arrays and Pointers](../c-language/arrays-and-pointers.md)"}