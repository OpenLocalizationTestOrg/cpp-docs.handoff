{"nodes":[{"pos":[12,50],"content":"C Compound Assignment | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"C Compound Assignment | Microsoft Docs","pos":[0,38]}]},{"content":"C Compound Assignment","pos":[665,686]},{"content":"The compound-assignment operators combine the simple-assignment operator with another binary operator.","pos":[687,789]},{"content":"Compound-assignment operators perform the operation specified by the additional operator, then assign the result to the left operand.","pos":[790,923]},{"content":"For example, a compound-assignment expression such as","pos":[924,977]},{"content":"can be understood as","pos":[1038,1058]},{"pos":[1136,1416],"content":"However, the compound-assignment expression is not equivalent to the expanded version because the compound-assignment expression evaluates <bpt id=\"p1\">*</bpt>expression1<ept id=\"p1\">*</ept> only once, while the expanded version evaluates <bpt id=\"p2\">*</bpt>expression1<ept id=\"p2\">*</ept> twice: in the addition operation and in the assignment operation.","source":"However, the compound-assignment expression is not equivalent to the expanded version because the compound-assignment expression evaluates *expression1* only once, while the expanded version evaluates *expression1* twice: in the addition operation and in the assignment operation."},{"content":"The operands of a compound-assignment operator must be of integral or floating type.","pos":[1423,1507]},{"content":"Each compound-assignment operator performs the conversions that the corresponding binary operator performs and restricts the types of its operands accordingly.","pos":[1508,1667]},{"content":"The addition-assignment (<ph id=\"ph1\">`+=`</ph>) and subtraction-assignment (<bpt id=\"p1\">**</bpt>–=<ept id=\"p1\">**</ept>) operators can also have a left operand of pointer type, in which case the right-hand operand must be of integral type.","pos":[1668,1853],"source":" The addition-assignment (`+=`) and subtraction-assignment (**–=**) operators can also have a left operand of pointer type, in which case the right-hand operand must be of integral type."},{"content":"The result of a compound-assignment operation has the value and type of the left operand.","pos":[1854,1943]},{"content":"In this example, a bitwise-inclusive-AND operation is performed on <ph id=\"ph1\">`n`</ph> and <ph id=\"ph2\">`MASK`</ph>, and the result is assigned to <ph id=\"ph3\">`n`</ph>.","pos":[2003,2120],"source":"In this example, a bitwise-inclusive-AND operation is performed on `n` and `MASK`, and the result is assigned to `n`."},{"content":"The manifest constant <ph id=\"ph1\">`MASK`</ph> is defined with a <bpt id=\"p1\">[</bpt>#define<ept id=\"p1\">](../preprocessor/hash-define-directive-c-cpp.md)</ept> preprocessor directive.","pos":[2121,2249],"source":" The manifest constant `MASK` is defined with a [#define](../preprocessor/hash-define-directive-c-cpp.md) preprocessor directive."},{"content":"See Also","pos":[2258,2266]},{"content":"C Assignment Operators","pos":[2271,2293]}],"content":"---\ntitle: \"C Compound Assignment | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"operators [C], assignment\"\n  - \"compound assignment operators\"\n  - \"assignment operators, compound\"\nms.assetid: db7b5893-cd56-4f1c-9981-5a024200ab63\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# C Compound Assignment\nThe compound-assignment operators combine the simple-assignment operator with another binary operator. Compound-assignment operators perform the operation specified by the additional operator, then assign the result to the left operand. For example, a compound-assignment expression such as  \n  \n```  \n  \nexpression1  \n+=  \nexpression2  \n  \n```  \n  \n can be understood as  \n  \n```  \n  \nexpression1  \n=  \nexpression1  \n+  \nexpression2  \n  \n```  \n  \n However, the compound-assignment expression is not equivalent to the expanded version because the compound-assignment expression evaluates *expression1* only once, while the expanded version evaluates *expression1* twice: in the addition operation and in the assignment operation.  \n  \n The operands of a compound-assignment operator must be of integral or floating type. Each compound-assignment operator performs the conversions that the corresponding binary operator performs and restricts the types of its operands accordingly. The addition-assignment (`+=`) and subtraction-assignment (**–=**) operators can also have a left operand of pointer type, in which case the right-hand operand must be of integral type. The result of a compound-assignment operation has the value and type of the left operand.  \n  \n```  \n#define MASK 0xff00  \n  \nn &= MASK;  \n```  \n  \n In this example, a bitwise-inclusive-AND operation is performed on `n` and `MASK`, and the result is assigned to `n`. The manifest constant `MASK` is defined with a [#define](../preprocessor/hash-define-directive-c-cpp.md) preprocessor directive.  \n  \n## See Also  \n [C Assignment Operators](../c-language/c-assignment-operators.md)"}