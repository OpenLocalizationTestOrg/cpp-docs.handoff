{"nodes":[{"pos":[12,50],"content":"insert_iterator Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"insert_iterator Class | Microsoft Docs","pos":[0,38]}]},{"content":"insert_iterator Class","pos":[742,763]},{"content":"Describes an iterator adaptor that satisfies the requirements of an output iterator.","pos":[764,848]},{"content":"It inserts, rather than overwrites, elements into a sequence and thus provides semantics that are different from the overwrite semantics provided by the iterators of the C++ sequence and associative containers.","pos":[849,1059]},{"content":"The <ph id=\"ph1\">`insert_iterator`</ph> class is templatized on the type of container being adapted.","pos":[1060,1142],"source":" The `insert_iterator` class is templatized on the type of container being adapted."},{"content":"Syntax","pos":[1151,1157]},{"content":"Parameters","pos":[1233,1243]},{"content":"The type of container into which elements are to be inserted by an <ph id=\"ph1\">`insert_iterator`</ph>.","pos":[1262,1347],"source":" The type of container into which elements are to be inserted by an `insert_iterator`."},{"content":"Remarks","pos":[1356,1363]},{"content":"The container of type <bpt id=\"p1\">**</bpt>Container<ept id=\"p1\">**</ept> must satisfy the requirements for a variable-sized container and have a two-argument insert member function where the parameters are of type <bpt id=\"p2\">**</bpt>Container::iterator<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>Container::value_type<ept id=\"p3\">**</ept> and that returns a type <bpt id=\"p4\">**</bpt>Container::iterator<ept id=\"p4\">**</ept>.","pos":[1367,1646],"source":"The container of type **Container** must satisfy the requirements for a variable-sized container and have a two-argument insert member function where the parameters are of type **Container::iterator** and **Container::value_type** and that returns a type **Container::iterator**."},{"content":"Standard Template Library sequence and sorted associative containers satisfy these requirements and can be adapted to use with <ph id=\"ph1\">`insert_iterator`</ph>s.","pos":[1647,1793],"source":" Standard Template Library sequence and sorted associative containers satisfy these requirements and can be adapted to use with `insert_iterator`s."},{"content":"For associative containers, the position argument is treated as a hint, which has the potential to improve or degrade performance depending on how good the hint is.","pos":[1794,1958]},{"content":"An <ph id=\"ph1\">`insert_iterator`</ph> must always be initialized with its container.","pos":[1959,2026],"source":" An `insert_iterator` must always be initialized with its container."},{"content":"Constructors","pos":[2036,2048]},{"content":"insert_iterator","pos":[2070,2085]},{"pos":[2122,2219],"content":"Constructs an <ph id=\"ph1\">`insert_iterator`</ph> that inserts an element into a specified position in a container.","source":"Constructs an `insert_iterator` that inserts an element into a specified position in a container."},{"content":"Typedefs","pos":[2230,2238]},{"content":"container_type","pos":[2260,2274]},{"content":"A type that represents the container into which a general insertion is to be made.","pos":[2310,2392]},{"content":"reference","pos":[2398,2407]},{"content":"A type that provides a reference to an element in a sequence controlled by the associated container.","pos":[2438,2538]},{"content":"Operators","pos":[2549,2558]},{"content":"operator*","pos":[2580,2589]},{"pos":[2624,2732],"content":"Dereferencing operator used to implement the output iterator expression * <ph id=\"ph1\">`i` = `x`</ph> for a general insertion.","source":"Dereferencing operator used to implement the output iterator expression * `i` = `x` for a general insertion."},{"content":"operator++","pos":[2738,2748]},{"pos":[2786,2873],"content":"Increments the <ph id=\"ph1\">`insert_iterator`</ph> to the next location into which a value may be stored.","source":"Increments the `insert_iterator` to the next location into which a value may be stored."},{"content":"operator=","pos":[2879,2888]},{"pos":[2921,3026],"content":"Assignment operator used to implement the output iterator expression * <ph id=\"ph1\">`i` = `x`</ph> for a general insertion.","source":"Assignment operator used to implement the output iterator expression * `i` = `x` for a general insertion."},{"content":"Requirements","pos":[3036,3048]},{"pos":[3052,3075],"content":"<bpt id=\"p1\">**</bpt>Header<ept id=\"p1\">**</ept>: <ph id=\"ph1\">\\&lt;</ph>iterator&gt;","source":"**Header**: \\<iterator>"},{"pos":[3082,3100],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[3158,3189],"content":"insert_iterator::container_type"},{"content":"A type that represents the container into which a general insertion is to be made.","pos":[3193,3275]},{"content":"Remarks","pos":[3332,3339]},{"pos":[3343,3406],"content":"The type is a synonym for the template parameter <bpt id=\"p1\">**</bpt>Container<ept id=\"p1\">**</ept>.","source":"The type is a synonym for the template parameter **Container**."},{"content":"Example","pos":[3416,3423]},{"pos":[4122,4154],"content":"insert_iterator::insert_iterator"},{"pos":[4158,4255],"content":"Constructs an <ph id=\"ph1\">`insert_iterator`</ph> that inserts an element into a specified position in a container.","source":"Constructs an `insert_iterator` that inserts an element into a specified position in a container."},{"content":"Parameters","pos":[4347,4357]},{"content":"The container into which the <ph id=\"ph1\">`insert_iterator`</ph> is to insert elements.","pos":[4372,4441],"source":" The container into which the `insert_iterator` is to insert elements."},{"content":"The position for the insertion.","pos":[4457,4488]},{"content":"Remarks","pos":[4498,4505]},{"content":"All containers have the insert member function called by the <ph id=\"ph1\">`insert_iterator`</ph>.","pos":[4509,4588],"source":"All containers have the insert member function called by the `insert_iterator`."},{"content":"For associative containers the position parameter is merely a suggestion.","pos":[4589,4662]},{"content":"The inserter function provides a convenient way to insert to values.","pos":[4663,4731]},{"content":"Example","pos":[4741,4748]},{"pos":[5837,5863],"content":"insert_iterator::operator*"},{"content":"Dereferences the insert iterator returning the element is addresses.","pos":[5867,5935]},{"content":"Return Value","pos":[5999,6011]},{"content":"The member function returns the value of the element addressed.","pos":[6015,6078]},{"content":"Remarks","pos":[6088,6095]},{"content":"Used to implement the output iterator expression <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph>Iter<ept id=\"p1\">**</ept><ph id=\"ph2\"> = </ph><bpt id=\"p2\">**</bpt>value<ept id=\"p2\">**</ept>.","pos":[6099,6171],"source":"Used to implement the output iterator expression **\\*Iter** = **value**."},{"content":"If <bpt id=\"p1\">**</bpt>Iter<ept id=\"p1\">**</ept> is an iterator that addresses an element in a sequence, then <bpt id=\"p2\">**</bpt><ph id=\"ph1\">\\*</ph>Iter<ept id=\"p2\">**</ept><ph id=\"ph2\"> = </ph><bpt id=\"p3\">**</bpt>value<ept id=\"p3\">**</ept> replaces that element with value and does not change the total number of elements in the sequence.","pos":[6172,6366],"source":" If **Iter** is an iterator that addresses an element in a sequence, then **\\*Iter** = **value** replaces that element with value and does not change the total number of elements in the sequence."},{"content":"Example","pos":[6376,6383]},{"pos":[7366,7393],"content":"insert_iterator::operator++"},{"pos":[7397,7486],"content":"Increments the <bpt id=\"p1\">**</bpt>insert_iterator<ept id=\"p1\">**</ept> to the next location into which a value may be stored.","source":"Increments the **insert_iterator** to the next location into which a value may be stored."},{"content":"Parameters","pos":[7596,7606]},{"pos":[7610,7692],"content":"A <ph id=\"ph1\">`insert_iterator`</ph> addressing the next location into which a value may be stored.","source":"A `insert_iterator` addressing the next location into which a value may be stored."},{"content":"Remarks","pos":[7702,7709]},{"content":"Both preincrementation and postincrementation operators return the same result.","pos":[7713,7792]},{"content":"Example","pos":[7802,7809]},{"pos":[8822,8848],"content":"insert_iterator::operator="},{"content":"Inserts a value into the container and returns the iterator updated to point to the new element.","pos":[8852,8948]},{"content":"Parameters","pos":[9140,9150]},{"content":"The value to be assigned to the container.","pos":[9163,9205]},{"content":"Return Value","pos":[9215,9227]},{"content":"A reference to the element inserted into the container.","pos":[9231,9286]},{"content":"Remarks","pos":[9296,9303]},{"content":"The first member operator evaluates","pos":[9307,9342]},{"pos":[9386,9387],"content":";"},{"pos":[9410,9431],"content":"then returns <ph id=\"ph1\">`*this`</ph>.","source":"then returns `*this`."},{"content":"The second member operator evaluates","pos":[9438,9474]},{"pos":[9553,9574],"content":"then returns <ph id=\"ph1\">`*this`</ph>.","source":"then returns `*this`."},{"content":"Example","pos":[9584,9591]},{"pos":[10567,10593],"content":"insert_iterator::reference"},{"content":"A type that provides a reference to an element in a sequence controlled by the associated container.","pos":[10597,10697]},{"content":"Remarks","pos":[10769,10776]},{"content":"The type describes a reference to an element of the sequence controlled by the associated container.","pos":[10780,10880]},{"content":"Example","pos":[10890,10897]},{"content":"See Also","pos":[11701,11709]},{"content":"iterator&gt;","pos":[11716,11725],"source":"iterator>"},{"content":"Thread Safety in the C++ Standard Library","pos":[11765,11806]},{"content":"C++ Standard Library Reference","pos":[11879,11909]}],"content":"---\ntitle: \"insert_iterator Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std::insert_iterator\"\n  - \"iterator/std::insert_iterator\"\n  - \"std.insert_iterator\"\n  - \"insert_iterator\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"insert_iterator class\"\n  - \"insert_iterator class, syntax\"\nms.assetid: d5d86405-872e-4e3b-9e68-c69a2b7e8221\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# insert_iterator Class\nDescribes an iterator adaptor that satisfies the requirements of an output iterator. It inserts, rather than overwrites, elements into a sequence and thus provides semantics that are different from the overwrite semantics provided by the iterators of the C++ sequence and associative containers. The `insert_iterator` class is templatized on the type of container being adapted.  \n  \n## Syntax  \n  \n```\ntemplate <class Container>  \nclass insert_iterator;\n```  \n  \n#### Parameters  \n `Container`  \n The type of container into which elements are to be inserted by an `insert_iterator`.  \n  \n## Remarks  \n The container of type **Container** must satisfy the requirements for a variable-sized container and have a two-argument insert member function where the parameters are of type **Container::iterator** and **Container::value_type** and that returns a type **Container::iterator**. Standard Template Library sequence and sorted associative containers satisfy these requirements and can be adapted to use with `insert_iterator`s. For associative containers, the position argument is treated as a hint, which has the potential to improve or degrade performance depending on how good the hint is. An `insert_iterator` must always be initialized with its container.  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[insert_iterator](#insert_iterator__insert_iterator)|Constructs an `insert_iterator` that inserts an element into a specified position in a container.|  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|[container_type](#insert_iterator__container_type)|A type that represents the container into which a general insertion is to be made.|  \n|[reference](#insert_iterator__reference)|A type that provides a reference to an element in a sequence controlled by the associated container.|  \n  \n### Operators  \n  \n|||  \n|-|-|  \n|[operator*](#insert_iterator__operator_star)|Dereferencing operator used to implement the output iterator expression * `i` = `x` for a general insertion.|  \n|[operator++](#insert_iterator__operator_add_add)|Increments the `insert_iterator` to the next location into which a value may be stored.|  \n|[operator=](#insert_iterator__operator_eq)|Assignment operator used to implement the output iterator expression * `i` = `x` for a general insertion.|  \n  \n## Requirements  \n **Header**: \\<iterator>  \n  \n **Namespace:** std  \n  \n##  <a name=\"insert_iterator__container_type\"></a>  insert_iterator::container_type  \n A type that represents the container into which a general insertion is to be made.  \n  \n```\ntypedef Container container_type;\n```  \n  \n### Remarks  \n The type is a synonym for the template parameter **Container**.  \n  \n### Example  \n  \n```cpp  \n// insert_iterator_container_type.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <list>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   list<int> L1;  \n   insert_iterator<list<int> >::container_type L2 = L1;  \n   inserter ( L2, L2.end ( ) ) = 20;  \n   inserter ( L2, L2.end ( ) ) = 10;  \n   inserter ( L2, L2.begin ( ) ) = 40;  \n  \n   list <int>::iterator vIter;  \n   cout << \"The list L2 is: ( \";  \n   for ( vIter = L2.begin ( ) ; vIter != L2.end ( ); vIter++ )  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe list L2 is: ( 40 20 10 ).  \n*\\  \n```  \n  \n##  <a name=\"insert_iterator__insert_iterator\"></a>  insert_iterator::insert_iterator  \n Constructs an `insert_iterator` that inserts an element into a specified position in a container.  \n  \n```\ninsert_iterator(Container& _Cont, typename Container::iterator _It);\n```  \n  \n### Parameters  \n `_Cont`  \n The container into which the `insert_iterator` is to insert elements.  \n  \n `_It`  \n The position for the insertion.  \n  \n### Remarks  \n All containers have the insert member function called by the `insert_iterator`. For associative containers the position parameter is merely a suggestion. The inserter function provides a convenient way to insert to values.  \n  \n### Example  \n  \n```cpp  \n// insert_iterator_insert_iterator.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <list>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n   list <int>::iterator L_Iter;  \n  \n   list<int> L;  \n   for (i = 1 ; i < 4 ; ++i )    \n   {  \n      L.push_back ( 10 * i );  \n   }  \n  \n   cout << \"The list L is:\\n ( \";  \n   for ( L_Iter = L.begin( ) ; L_Iter != L.end( ); L_Iter++)  \n      cout << *L_Iter << \" \";  \n   cout << \").\" << endl;  \n  \n   // Using the member function to insert an element  \n   inserter ( L, L.begin ( ) ) = 2;  \n  \n   // Alternatively, you may use the template version  \n   insert_iterator< list < int> > Iter(L, L.end ( ) );  \n *Iter = 300;  \n  \n   cout << \"After the insertions, the list L is:\\n ( \";  \n   for ( L_Iter = L.begin( ) ; L_Iter != L.end( ); L_Iter++ )  \n      cout << *L_Iter << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe list L is:  \n ( 10 20 30 ).  \nAfter the insertions, the list L is:  \n ( 2 10 20 30 300 ).  \n*\\  \n```  \n  \n##  <a name=\"insert_iterator__operator_star\"></a>  insert_iterator::operator*  \n Dereferences the insert iterator returning the element is addresses.  \n  \n```\ninsert_iterator<Container>& operator*();\n```  \n  \n### Return Value  \n The member function returns the value of the element addressed.  \n  \n### Remarks  \n Used to implement the output iterator expression **\\*Iter** = **value**. If **Iter** is an iterator that addresses an element in a sequence, then **\\*Iter** = **value** replaces that element with value and does not change the total number of elements in the sequence.  \n  \n### Example  \n  \n```cpp  \n// insert_iterator_op_deref.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <list>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n   list <int>::iterator L_Iter;  \n  \n   list<int> L;  \n   for (i = 0 ; i < 4 ; ++i )    \n   {  \n      L.push_back ( 2 * i );  \n   }  \n  \n   cout << \"The original list L is:\\n ( \";  \n   for ( L_Iter = L.begin( ) ; L_Iter != L.end( ); L_Iter++ )  \n      cout << *L_Iter << \" \";  \n   cout << \").\" << endl;  \n  \n   insert_iterator< list < int> > Iter(L, L.begin ( ) );  \n *Iter = 10;  \n *Iter = 20;  \n *Iter = 30;  \n  \n   cout << \"After the insertions, the list L is:\\n ( \";  \n   for ( L_Iter = L.begin( ) ; L_Iter != L.end( ); L_Iter++ )  \n      cout << *L_Iter << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe original list L is:  \n ( 0 2 4 6 ).  \nAfter the insertions, the list L is:  \n ( 10 20 30 0 2 4 6 ).  \n*\\  \n```  \n  \n##  <a name=\"insert_iterator__operator_add_add\"></a>  insert_iterator::operator++  \n Increments the **insert_iterator** to the next location into which a value may be stored.  \n  \n```\ninsert_iterator<Container>& operator++();\n\ninsert_iterator<Container> operator++(int);\n```  \n  \n### Parameters  \n A `insert_iterator` addressing the next location into which a value may be stored.  \n  \n### Remarks  \n Both preincrementation and postincrementation operators return the same result.  \n  \n### Example  \n  \n```cpp  \n// insert_iterator_op_incr.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   vector<int> vec;  \n   for (i = 1 ; i < 5 ; ++i )   \n   {  \n      vec.push_back (  i );  \n   }  \n  \n   vector <int>::iterator vIter;  \n   cout << \"The vector vec is:\\n ( \";  \n   for ( vIter = vec.begin ( ) ; vIter != vec.end ( ); vIter++ )  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n  \n   insert_iterator<vector<int> > ii ( vec, vec.begin ( ) );  \n *ii = 30;  \n   ii++;  \n *ii = 40;  \n   ii++;  \n *ii = 50;  \n  \n   cout << \"After the insertions, the vector vec becomes:\\n ( \";  \n   for ( vIter = vec.begin ( ) ; vIter != vec.end ( ); vIter++ )  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe vector vec is:  \n ( 1 2 3 4 ).  \nAfter the insertions, the vector vec becomes:  \n ( 30 40 50 1 2 3 4 ).  \n*\\  \n```  \n  \n##  <a name=\"insert_iterator__operator_eq\"></a>  insert_iterator::operator=  \n Inserts a value into the container and returns the iterator updated to point to the new element.  \n  \n```\ninsert_iterator<Container>& operator=(\n    typename Container::const_reference val,);\n\ninsert_iterator<Container>& operator=(\n    typename Container::value_type&& val);\n```  \n  \n### Parameters  \n `val`  \n The value to be assigned to the container.  \n  \n### Return Value  \n A reference to the element inserted into the container.  \n  \n### Remarks  \n The first member operator evaluates  \n  \n `Iter = container->insert(Iter, val)`;  \n  \n `++Iter;`  \n  \n then returns `*this`.  \n  \n The second member operator evaluates  \n  \n `Iter = container->insert(Iter, std::move(val));`  \n  \n `++Iter;`  \n  \n then returns `*this`.  \n  \n### Example  \n  \n```cpp  \n// insert_iterator_op_assign.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <list>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n   list <int>::iterator L_Iter;  \n  \n   list<int> L;  \n   for (i = 0 ; i < 4 ; ++i )   \n   {  \n      L.push_back ( 2 * i );  \n   }  \n  \n   cout << \"The original list L is:\\n ( \";  \n   for ( L_Iter = L.begin( ) ; L_Iter != L.end( ); L_Iter++ )  \n      cout << *L_Iter << \" \";  \n   cout << \").\" << endl;  \n  \n   insert_iterator< list < int> > Iter(L, L.begin ( ) );  \n *Iter = 10;  \n *Iter = 20;  \n *Iter = 30;  \n  \n   cout << \"After the insertions, the list L is:\\n ( \";  \n   for ( L_Iter = L.begin( ) ; L_Iter != L.end( ); L_Iter++ )  \n      cout << *L_Iter << \" \";  \n   cout << \").\" << endl;  \n}  \n\\* Output:   \nThe original list L is:  \n ( 0 2 4 6 ).  \nAfter the insertions, the list L is:  \n ( 10 20 30 0 2 4 6 ).  \n*\\  \n```  \n  \n##  <a name=\"insert_iterator__reference\"></a>  insert_iterator::reference  \n A type that provides a reference to an element in a sequence controlled by the associated container.  \n  \n```\ntypedef typename Container::reference reference;\n```  \n  \n### Remarks  \n The type describes a reference to an element of the sequence controlled by the associated container.  \n  \n### Example  \n  \n```cpp  \n// insert_iterator_container_reference.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <list>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   list<int> L;  \n   insert_iterator<list<int> > iivIter( L , L.begin ( ) );  \n *iivIter = 10;  \n *iivIter = 20;  \n *iivIter = 30;  \n  \n   list<int>::iterator LIter;  \n   cout << \"The list L is: ( \";  \n   for ( LIter = L.begin ( ) ; LIter != L.end ( ); LIter++ )  \n      cout << *LIter << \" \";  \n   cout << \").\" << endl;  \n  \n   insert_iterator<list<int> >::reference   \n        RefFirst = *(L.begin ( ));  \n   cout << \"The first element in the list L is: \"   \n        << RefFirst << \".\" << endl;  \n}  \n\\* Output:   \nThe list L is: ( 10 20 30 ).  \nThe first element in the list L is: 10.  \n*\\  \n```  \n  \n## See Also  \n [\\<iterator>](../standard-library/iterator.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}