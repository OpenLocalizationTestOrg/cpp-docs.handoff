<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c55adcb5a9fcdea203ac65edc2ea686b43c75ba4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\alloca.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aea24606f855a59abdd80844010d813d7d33feda</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">97e4c7f09139976f9ea288d6bd6255e798a0a687</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_alloca | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_alloca</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Allocates memory on the stack.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This function is deprecated because a more secure version is available; see <bpt id="p1">[</bpt>_malloca<ept id="p1">](../../c-runtime-library/reference/malloca.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Bytes to be allocated from the stack.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_alloca`</ph> routine returns a <ph id="ph2">`void`</ph> pointer to the allocated space, which is guaranteed to be suitably aligned for storage of any type of object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`size`</ph> is 0, <ph id="ph2">`_alloca`</ph> allocates a zero-length item and returns a valid pointer to that item.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A stack overflow exception is generated if the space cannot be allocated.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The stack overflow exception is not a C++ exception; it is a structured exception.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Instead of using C++ exception handling, you must use <bpt id="p1">[</bpt>Structured Exception Handling<ept id="p1">](../../cpp/structured-exception-handling-c-cpp.md)</ept> (SEH).</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>allocates <ph id="ph1">`size`</ph> bytes from the program stack.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The allocated space is automatically freed when the calling function exits (not when the allocation merely passes out of scope).</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Therefore, do not pass the pointer value returned by <ph id="ph1">`_alloca`</ph> as an argument to <bpt id="p1">[</bpt>free<ept id="p1">](../../c-runtime-library/reference/free.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>There are restrictions to explicitly calling <ph id="ph1">`_alloca`</ph> in an exception handler (EH).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>EH routines that run on x86-class processors operate in their own memory frame: They perform their tasks in memory space that is not based on the current location of the stack pointer of the enclosing function.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The most common implementations include Windows NT structured exception handling (SEH) and C++ catch clause expressions.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Therefore, explicitly calling <ph id="ph1">`_alloca`</ph> in any of the following scenarios results in program failure during the return to the calling EH routine:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Windows NT SEH exception filter expression: <ph id="ph1">`__except`</ph> (<ph id="ph2">`_alloca ()`</ph> )</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Windows NT SEH final exception handler: <ph id="ph1">`__finally`</ph> {<ph id="ph2">`_alloca ()`</ph> }</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>C++ EH catch clause expression</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">`_alloca`</ph> can be called directly from within an EH routine or from an application-supplied callback that gets invoked by one of the EH scenarios previously listed.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In Windows XP, if <ph id="ph1">`_alloca`</ph> is called inside a try/catch block, you must call <bpt id="p1">[</bpt>_resetstkoflw<ept id="p1">](../../c-runtime-library/reference/resetstkoflw.md)</ept> in the catch block.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In addition to the above restrictions, when using the<bpt id="p1">[</bpt>/clr (Common Language Runtime Compilation)<ept id="p1">](../../build/reference/clr-common-language-runtime-compilation.md)</ept> option, <ph id="ph1">`_alloca`</ph> cannot be used in <ph id="ph2">`__except`</ph> blocks.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>/clr Restrictions<ept id="p1">](../../build/reference/clr-restrictions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>malloc.h&gt;</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Memory Allocation</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>calloc</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>malloc</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>realloc</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>_resetstkoflw</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>_malloca</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>