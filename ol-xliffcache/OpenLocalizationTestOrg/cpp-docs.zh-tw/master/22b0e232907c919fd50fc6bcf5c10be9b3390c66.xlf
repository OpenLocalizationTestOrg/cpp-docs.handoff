<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">22b0e232907c919fd50fc6bcf5c10be9b3390c66</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\dotnet\how-to-extend-the-marshaling-library.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">54e01376ad6f8021dba8a8073fe9bdd8d431e441</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">def153188cea3aa80864bcdf27a7cec08678a2d5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Extend the Marshaling Library | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Extend the Marshaling Library</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic explains how to extend the marshaling library to provide more conversions between data types.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Users can extend the marshaling library for any data conversions not currently supported by the library.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can extend the marshaling library in one of two ways - with or without a <bpt id="p1">[</bpt>marshal_context Class<ept id="p1">](../dotnet/marshal-context-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Review the <bpt id="p1">[</bpt>Overview of Marshaling in C++<ept id="p1">](../dotnet/overview-of-marshaling-in-cpp.md)</ept> topic to determine whether a new conversion requires a context.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In both cases, you first create a file for new marshaling conversions.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You do so to preserve the integrity of the standard marshaling library files.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you want to port a project to another computer or to another programmer, you must copy the new marshaling file together with the rest of the project.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In this manner, the user receiving the project will be guaranteed to receive the new conversions and will not have to modify any library files.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To Extend the Marshaling Library with a Conversion that does not Require a Context</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Create a file to store the new marshaling functions, for example, MyMarshal.h.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Include one or more of the marshal library files:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>marshal.h for base types.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>marshal_windows.h for windows data types.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>marshal_cppstd.h for STL data types.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>marshal_atl.h for ATL data types.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Use the code at the end of these steps to write the conversion function.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In this code, TO is the type to convert to, FROM is the type to convert from, and <ph id="ph1">`from`</ph> is the parameter to be converted.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Replace the comment about conversion logic with code to convert the <ph id="ph1">`from`</ph> parameter into an object of TO type and return the converted object.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To Extend the Marshaling Library with a Conversion that Requires a Context</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Create a file to store the new marshaling functions, for example, MyMarshal.h</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Include one or more of the marshal library files:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>marshal.h for base types.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>marshal_windows.h for windows data types.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>marshal_cppstd.h for STL data types.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>marshal_atl.h for ATL data types.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Use the code at the end of these steps to write the conversion function.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In this code, TO is the type to convert to, FROM is the type to convert from, <ph id="ph1">`toObject`</ph> is a pointer in which to store the result, and <ph id="ph2">`fromObject`</ph> is the parameter to be converted.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Replace the comment about initializing with code to initialize the <ph id="ph1">`toPtr`</ph> to the appropriate empty value.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For example, if it is a pointer, set it to <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Replace the comment about conversion logic with code to convert the <ph id="ph1">`from`</ph> parameter into an object of <bpt id="p1">*</bpt>TO<ept id="p1">*</ept> type.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This converted object will be stored in <ph id="ph1">`toPtr`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Replace the comment about setting <ph id="ph1">`toObject`</ph> with code to set <ph id="ph2">`toObject`</ph> to your converted object.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Replace the comment about cleaning up native resources with code to free any memory allocated by <ph id="ph1">`toPtr`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`toPtr`</ph> allocated memory by using <ph id="ph2">`new`</ph>, use <ph id="ph3">`delete`</ph> to free the memory.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following example extends the marshaling library with a conversion that does not require a context.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In this example, the code converts the employee information from a native data type to a managed data type.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In the previous example, the <ph id="ph1">`marshal_as`</ph> function returns a handle to the converted data.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This was done in order to prevent creating an additional copy of the data.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Returning the variable directly would have an unnecessary performance cost associated with it.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following example converts the employee information from a managed data type to a native data type.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This conversion requires a marshaling context.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Overview of Marshaling in C++</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>