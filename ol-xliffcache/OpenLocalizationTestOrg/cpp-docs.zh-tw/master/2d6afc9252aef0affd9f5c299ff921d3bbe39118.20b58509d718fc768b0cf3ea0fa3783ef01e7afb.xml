{"nodes":[{"pos":[12,46],"content":"transformer Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"transformer Class | Microsoft Docs","pos":[0,34]}]},{"content":"transformer Class","pos":[625,642]},{"pos":[643,852],"content":"A <ph id=\"ph1\">`transformer`</ph> messaging block is a single-target, multi-source, ordered <ph id=\"ph2\">`propagator_block`</ph> which can accept messages of one type and is capable of storing an unbounded number of messages of a different type.","source":"A `transformer` messaging block is a single-target, multi-source, ordered `propagator_block` which can accept messages of one type and is capable of storing an unbounded number of messages of a different type."},{"content":"Syntax","pos":[861,867]},{"content":"Parameters","pos":[1057,1067]},{"content":"The payload type of the messages accepted by the buffer.","pos":[1083,1139]},{"content":"The payload type of the messages stored and propagated out by the buffer.","pos":[1159,1232]},{"content":"Members","pos":[1241,1248]},{"content":"Public Constructors","pos":[1258,1277]},{"content":"Name","pos":[1284,1288]},{"content":"Description","pos":[1289,1300]},{"content":"transformer::transformer Constructor","pos":[1339,1375]},{"content":"Overloaded.","pos":[1384,1395]},{"content":"Constructs a <ph id=\"ph1\">`transformer`</ph> messaging block.","pos":[1396,1439],"source":" Constructs a `transformer` messaging block."},{"content":"transformer::~transformer Destructor","pos":[1445,1481]},{"pos":[1490,1533],"content":"Destroys the <ph id=\"ph1\">`transformer`</ph> messaging block.","source":"Destroys the `transformer` messaging block."},{"content":"Protected Methods","pos":[1544,1561]},{"content":"Name","pos":[1568,1572]},{"content":"Description","pos":[1573,1584]},{"content":"transformer::accept_message Method","pos":[1623,1657]},{"pos":[1676,1787],"content":"Accepts a message that was offered by this <ph id=\"ph1\">`transformer`</ph> messaging block, transferring ownership to the caller.","source":"Accepts a message that was offered by this `transformer` messaging block, transferring ownership to the caller."},{"content":"transformer::consume_message Method","pos":[1793,1828]},{"pos":[1848,1972],"content":"Consumes a message previously offered by the <ph id=\"ph1\">`transformer`</ph> and reserved by the target, transferring ownership to the caller.","source":"Consumes a message previously offered by the `transformer` and reserved by the target, transferring ownership to the caller."},{"content":"transformer::link_target_notification Method","pos":[1978,2022]},{"pos":[2051,2148],"content":"A callback that notifies that a new target has been linked to this <ph id=\"ph1\">`transformer`</ph> messaging block.","source":"A callback that notifies that a new target has been linked to this `transformer` messaging block."},{"content":"transformer::propagate_message Method","pos":[2154,2191]},{"content":"Asynchronously passes a message from an <ph id=\"ph1\">`ISource`</ph> block to this <ph id=\"ph2\">`transformer`</ph> messaging block.","pos":[2213,2307],"source":"Asynchronously passes a message from an `ISource` block to this `transformer` messaging block."},{"content":"It is invoked by the <ph id=\"ph1\">`propagate`</ph> method, when called by a source block.","pos":[2308,2379],"source":" It is invoked by the `propagate` method, when called by a source block."},{"content":"transformer::propagate_to_any_targets Method","pos":[2385,2429]},{"content":"Executes the transformer function on the input messages.","pos":[2458,2514]},{"content":"transformer::release_message Method","pos":[2520,2555]},{"content":"Releases a previous message reservation.","pos":[2575,2615]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>source_block::release_message<ept id=\"p1\">](source-block-class.md#release_message)</ept>.)","pos":[2616,2699],"source":" (Overrides [source_block::release_message](source-block-class.md#release_message).)"},{"content":"transformer::reserve_message Method","pos":[2705,2740]},{"content":"Reserves a message previously offered by this <ph id=\"ph1\">`transformer`</ph> messaging block.","pos":[2760,2836],"source":"Reserves a message previously offered by this `transformer` messaging block."},{"content":"(Overrides <bpt id=\"p1\">[</bpt>source_block::reserve_message<ept id=\"p1\">](source-block-class.md#reserve_message)</ept>.)","pos":[2837,2920],"source":" (Overrides [source_block::reserve_message](source-block-class.md#reserve_message).)"},{"content":"transformer::resume_propagation Method","pos":[2926,2964]},{"content":"Resumes propagation after a reservation has been released.","pos":[2987,3045]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>source_block::resume_propagation<ept id=\"p1\">](source-block-class.md#resume_propagation)</ept>.)","pos":[3046,3135],"source":" (Overrides [source_block::resume_propagation](source-block-class.md#resume_propagation).)"},{"content":"transformer::send_message Method","pos":[3141,3173]},{"content":"Synchronously passes a message from an <ph id=\"ph1\">`ISource`</ph> block to this <ph id=\"ph2\">`transformer`</ph> messaging block.","pos":[3190,3283],"source":"Synchronously passes a message from an `ISource` block to this `transformer` messaging block."},{"content":"It is invoked by the <ph id=\"ph1\">`send`</ph> method, when called by a source block.","pos":[3284,3350],"source":" It is invoked by the `send` method, when called by a source block."},{"content":"transformer::supports_anonymous_source Method","pos":[3356,3401]},{"content":"Overrides the <ph id=\"ph1\">`supports_anonymous_source`</ph> method to indicate that this block can accept messages offered to it by a source that is not linked.","pos":[3431,3573],"source":"Overrides the `supports_anonymous_source` method to indicate that this block can accept messages offered to it by a source that is not linked."},{"content":"(Overrides <bpt id=\"p1\">[</bpt>ITarget::supports_anonymous_source<ept id=\"p1\">](itarget-class.md#supports_anonymous_source)</ept>.)","pos":[3574,3667],"source":" (Overrides [ITarget::supports_anonymous_source](itarget-class.md#supports_anonymous_source).)"},{"content":"Remarks","pos":[3677,3684]},{"pos":[3688,3801],"content":"For more information, see <bpt id=\"p1\">[</bpt>Asynchronous Message Blocks<ept id=\"p1\">](../../../parallel/concrt/asynchronous-message-blocks.md)</ept>.","source":"For more information, see [Asynchronous Message Blocks](../../../parallel/concrt/asynchronous-message-blocks.md)."},{"content":"Inheritance Hierarchy","pos":[3810,3831]},{"content":"ISource","pos":[3836,3843]},{"content":"ITarget","pos":[3870,3877]},{"content":"source_block","pos":[3904,3916]},{"content":"propagator_block","pos":[3948,3964]},{"content":"Requirements","pos":[4021,4033]},{"pos":[4037,4057],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> agents.h","source":"**Header:** agents.h"},{"pos":[4064,4090],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[4131,4165],"content":"transformer::accept_message Method"},{"pos":[4169,4280],"content":"Accepts a message that was offered by this <ph id=\"ph1\">`transformer`</ph> messaging block, transferring ownership to the caller.","source":"Accepts a message that was offered by this `transformer` messaging block, transferring ownership to the caller."},{"content":"Parameters","pos":[4377,4387]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the offered <ph id=\"ph2\">`message`</ph> object.","pos":[4403,4465],"source":" The `runtime_object_identity` of the offered `message` object."},{"content":"Return Value","pos":[4475,4487]},{"pos":[4491,4562],"content":"A pointer to the <ph id=\"ph1\">`message`</ph> object that the caller now has ownership of.","source":"A pointer to the `message` object that the caller now has ownership of."},{"pos":[4604,4639],"content":"transformer::consume_message Method"},{"pos":[4643,4767],"content":"Consumes a message previously offered by the <ph id=\"ph1\">`transformer`</ph> and reserved by the target, transferring ownership to the caller.","source":"Consumes a message previously offered by the `transformer` and reserved by the target, transferring ownership to the caller."},{"content":"Parameters","pos":[4865,4875]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the <ph id=\"ph2\">`message`</ph> object being consumed.","pos":[4891,4960],"source":" The `runtime_object_identity` of the `message` object being consumed."},{"content":"Return Value","pos":[4970,4982]},{"pos":[4986,5057],"content":"A pointer to the <ph id=\"ph1\">`message`</ph> object that the caller now has ownership of.","source":"A pointer to the `message` object that the caller now has ownership of."},{"content":"Remarks","pos":[5067,5074]},{"pos":[5078,5145],"content":"Similar to <ph id=\"ph1\">`accept`</ph>, but is always preceded by a call to <ph id=\"ph2\">`reserve`</ph>.","source":"Similar to `accept`, but is always preceded by a call to `reserve`."},{"pos":[5196,5240],"content":"transformer::link_target_notification Method"},{"pos":[5244,5341],"content":"A callback that notifies that a new target has been linked to this <ph id=\"ph1\">`transformer`</ph> messaging block.","source":"A callback that notifies that a new target has been linked to this `transformer` messaging block."},{"pos":[5465,5502],"content":"transformer::propagate_message Method"},{"content":"Asynchronously passes a message from an <ph id=\"ph1\">`ISource`</ph> block to this <ph id=\"ph2\">`transformer`</ph> messaging block.","pos":[5506,5600],"source":"Asynchronously passes a message from an `ISource` block to this `transformer` messaging block."},{"content":"It is invoked by the <ph id=\"ph1\">`propagate`</ph> method, when called by a source block.","pos":[5601,5672],"source":" It is invoked by the `propagate` method, when called by a source block."},{"content":"Parameters","pos":[5817,5827]},{"content":"A pointer to the <ph id=\"ph1\">`message`</ph> object.","pos":[5846,5880],"source":" A pointer to the `message` object."},{"content":"A pointer to the source block offering the message.","pos":[5901,5952]},{"content":"Return Value","pos":[5962,5974]},{"pos":[5978,6090],"content":"A <bpt id=\"p1\">[</bpt>message_status<ept id=\"p1\">](concurrency-namespace-enums.md)</ept> indication of what the target decided to do with the message.","source":"A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message."},{"pos":[6141,6185],"content":"transformer::propagate_to_any_targets Method"},{"content":"Executes the transformer function on the input messages.","pos":[6189,6245]},{"pos":[6371,6406],"content":"transformer::release_message Method"},{"content":"Releases a previous message reservation.","pos":[6410,6450]},{"content":"Parameters","pos":[6535,6545]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the <ph id=\"ph2\">`message`</ph> object being released.","pos":[6561,6630],"source":" The `runtime_object_identity` of the `message` object being released."},{"pos":[6672,6707],"content":"transformer::reserve_message Method"},{"pos":[6711,6787],"content":"Reserves a message previously offered by this <ph id=\"ph1\">`transformer`</ph> messaging block.","source":"Reserves a message previously offered by this `transformer` messaging block."},{"content":"Parameters","pos":[6872,6882]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the <ph id=\"ph2\">`message`</ph> object being reserved.","pos":[6898,6967],"source":" The `runtime_object_identity` of the `message` object being reserved."},{"content":"Return Value","pos":[6977,6989]},{"pos":[7000,7060],"content":"if the message was successfully reserved, <ph id=\"ph1\">`false`</ph> otherwise.","source":" if the message was successfully reserved, `false` otherwise."},{"content":"Remarks","pos":[7070,7077]},{"pos":[7081,7226],"content":"After <ph id=\"ph1\">`reserve`</ph> is called, if it returns <ph id=\"ph2\">`true`</ph>, either <ph id=\"ph3\">`consume`</ph> or <ph id=\"ph4\">`release`</ph> must be called to either take or release ownership of the message.","source":"After `reserve` is called, if it returns `true`, either `consume` or `release` must be called to either take or release ownership of the message."},{"pos":[7271,7309],"content":"transformer::resume_propagation Method"},{"content":"Resumes propagation after a reservation has been released.","pos":[7313,7371]},{"pos":[7458,7490],"content":"transformer::send_message Method"},{"content":"Synchronously passes a message from an <ph id=\"ph1\">`ISource`</ph> block to this <ph id=\"ph2\">`transformer`</ph> messaging block.","pos":[7494,7587],"source":"Synchronously passes a message from an `ISource` block to this `transformer` messaging block."},{"content":"It is invoked by the <ph id=\"ph1\">`send`</ph> method, when called by a source block.","pos":[7588,7654],"source":" It is invoked by the `send` method, when called by a source block."},{"content":"Parameters","pos":[7794,7804]},{"content":"A pointer to the <ph id=\"ph1\">`message`</ph> object.","pos":[7823,7857],"source":" A pointer to the `message` object."},{"content":"A pointer to the source block offering the message.","pos":[7878,7929]},{"content":"Return Value","pos":[7939,7951]},{"pos":[7955,8067],"content":"A <bpt id=\"p1\">[</bpt>message_status<ept id=\"p1\">](concurrency-namespace-enums.md)</ept> indication of what the target decided to do with the message.","source":"A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message."},{"pos":[8119,8164],"content":"transformer::supports_anonymous_source Method"},{"pos":[8168,8310],"content":"Overrides the <ph id=\"ph1\">`supports_anonymous_source`</ph> method to indicate that this block can accept messages offered to it by a source that is not linked.","source":"Overrides the `supports_anonymous_source` method to indicate that this block can accept messages offered to it by a source that is not linked."},{"content":"Return Value","pos":[8375,8387]},{"pos":[8398,8451],"content":"because the block does not postpone offered messages."},{"pos":[8482,8518],"content":"transformer::transformer Constructor"},{"pos":[8522,8565],"content":"Constructs a <ph id=\"ph1\">`transformer`</ph> messaging block.","source":"Constructs a `transformer` messaging block."},{"content":"Parameters","pos":[9408,9418]},{"content":"A function that will be invoked for each accepted message.","pos":[9433,9491]},{"content":"A pointer to a target block to link with the transformer.","pos":[9512,9569]},{"content":"A filter function which determines whether offered messages should be accepted.","pos":[9589,9668]},{"content":"The <ph id=\"ph1\">`Scheduler`</ph> object within which the propagation task for the <ph id=\"ph2\">`transformer`</ph> messaging block is scheduled.","pos":[9692,9800],"source":" The `Scheduler` object within which the propagation task for the `transformer` messaging block is scheduled."},{"content":"The <ph id=\"ph1\">`ScheduleGroup`</ph> object within which the propagation task for the <ph id=\"ph2\">`transformer`</ph> messaging block is scheduled.","pos":[9828,9940],"source":" The `ScheduleGroup` object within which the propagation task for the `transformer` messaging block is scheduled."},{"content":"The <ph id=\"ph1\">`Scheduler`</ph> object used is implied by the schedule group.","pos":[9941,10002],"source":" The `Scheduler` object used is implied by the schedule group."},{"content":"Remarks","pos":[10012,10019]},{"pos":[10023,10134],"content":"The runtime uses the default scheduler if you do not specify the <ph id=\"ph1\">`_PScheduler`</ph> or <ph id=\"ph2\">`_PScheduleGroup`</ph> parameters.","source":"The runtime uses the default scheduler if you do not specify the `_PScheduler` or `_PScheduleGroup` parameters."},{"pos":[10141,10301],"content":"The type <ph id=\"ph1\">`_Transform_method`</ph> is a functor with signature <ph id=\"ph2\">`_Output (_Input const &amp;)`</ph> which is invoked by this <ph id=\"ph3\">`transformer`</ph> messaging block to process a message.","source":"The type `_Transform_method` is a functor with signature `_Output (_Input const &)` which is invoked by this `transformer` messaging block to process a message."},{"pos":[10308,10504],"content":"The type <ph id=\"ph1\">`filter_method`</ph> is a functor with signature <ph id=\"ph2\">`bool (_Input const &amp;)`</ph> which is invoked by this <ph id=\"ph3\">`transformer`</ph> messaging block to determine whether or not it should accept an offered message.","source":"The type `filter_method` is a functor with signature `bool (_Input const &)` which is invoked by this `transformer` messaging block to determine whether or not it should accept an offered message."},{"pos":[10535,10571],"content":"transformer::~transformer Destructor"},{"pos":[10575,10618],"content":"Destroys the <ph id=\"ph1\">`transformer`</ph> messaging block.","source":"Destroys the `transformer` messaging block."},{"content":"See Also","pos":[10656,10664]},{"content":"concurrency Namespace","pos":[10669,10690]},{"content":"call Class","pos":[10723,10733]}],"content":"---\ntitle: \"transformer Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"agents/concurrency::transformer\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"transformer class\"\nms.assetid: eea71925-7043-4a92-bfd4-dbc0ece5d081\ncaps.latest.revision: 22\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# transformer Class\nA `transformer` messaging block is a single-target, multi-source, ordered `propagator_block` which can accept messages of one type and is capable of storing an unbounded number of messages of a different type.  \n  \n## Syntax  \n  \n```\ntemplate<class _Input, class _Output>\nclass transformer : public propagator_block<single_link_registry<ITarget<_Output>>,\n    multi_link_registry<ISource<_Input>>>;\n```   \n  \n#### Parameters  \n `_Input`  \n The payload type of the messages accepted by the buffer.  \n  \n `_Output`  \n The payload type of the messages stored and propagated out by the buffer.  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[transformer::transformer Constructor](#ctor)|Overloaded. Constructs a `transformer` messaging block.|  \n|[transformer::~transformer Destructor](#dtor)|Destroys the `transformer` messaging block.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[transformer::accept_message Method](#accept_message)|Accepts a message that was offered by this `transformer` messaging block, transferring ownership to the caller.|  \n|[transformer::consume_message Method](#consume_message)|Consumes a message previously offered by the `transformer` and reserved by the target, transferring ownership to the caller.|  \n|[transformer::link_target_notification Method](#link_target_notification)|A callback that notifies that a new target has been linked to this `transformer` messaging block.|  \n|[transformer::propagate_message Method](#propagate_message)|Asynchronously passes a message from an `ISource` block to this `transformer` messaging block. It is invoked by the `propagate` method, when called by a source block.|  \n|[transformer::propagate_to_any_targets Method](#propagate_to_any_targets)|Executes the transformer function on the input messages.|  \n|[transformer::release_message Method](#release_message)|Releases a previous message reservation. (Overrides [source_block::release_message](source-block-class.md#release_message).)|  \n|[transformer::reserve_message Method](#reserve_message)|Reserves a message previously offered by this `transformer` messaging block. (Overrides [source_block::reserve_message](source-block-class.md#reserve_message).)|  \n|[transformer::resume_propagation Method](#resume_propagation)|Resumes propagation after a reservation has been released. (Overrides [source_block::resume_propagation](source-block-class.md#resume_propagation).)|  \n|[transformer::send_message Method](#send_message)|Synchronously passes a message from an `ISource` block to this `transformer` messaging block. It is invoked by the `send` method, when called by a source block.|  \n|[transformer::supports_anonymous_source Method](#supports_anonymous_source)|Overrides the `supports_anonymous_source` method to indicate that this block can accept messages offered to it by a source that is not linked. (Overrides [ITarget::supports_anonymous_source](itarget-class.md#supports_anonymous_source).)|  \n  \n## Remarks  \n For more information, see [Asynchronous Message Blocks](../../../parallel/concrt/asynchronous-message-blocks.md).  \n  \n## Inheritance Hierarchy  \n [ISource](isource-class.md)  \n  \n [ITarget](itarget-class.md)  \n  \n [source_block](source-block-class.md)  \n  \n [propagator_block](propagator-block-class.md)  \n  \n `transformer`  \n  \n## Requirements  \n **Header:** agents.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"accept_message\"></a>  transformer::accept_message Method  \n Accepts a message that was offered by this `transformer` messaging block, transferring ownership to the caller.  \n  \n```\nvirtual message<_Output>* accept_message(runtime_object_identity _MsgId);\n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the offered `message` object.  \n  \n### Return Value  \n A pointer to the `message` object that the caller now has ownership of.  \n  \n##  <a name=\"consume_message\"></a>  transformer::consume_message Method  \n Consumes a message previously offered by the `transformer` and reserved by the target, transferring ownership to the caller.  \n  \n```\nvirtual message<_Output>* consume_message(runtime_object_identity _MsgId);\n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the `message` object being consumed.  \n  \n### Return Value  \n A pointer to the `message` object that the caller now has ownership of.  \n  \n### Remarks  \n Similar to `accept`, but is always preceded by a call to `reserve`.  \n  \n##  <a name=\"link_target_notification\"></a>  transformer::link_target_notification Method  \n A callback that notifies that a new target has been linked to this `transformer` messaging block.  \n  \n```\nvirtual void link_target_notification(_Inout_ ITarget<_Output> *);\n```  \n  \n##  <a name=\"propagate_message\"></a>  transformer::propagate_message Method  \n Asynchronously passes a message from an `ISource` block to this `transformer` messaging block. It is invoked by the `propagate` method, when called by a source block.  \n  \n```\nvirtual message_status propagate_message(\n    _Inout_ message<_Input>* _PMessage,\n    _Inout_ ISource<_Input>* _PSource);\n```  \n  \n### Parameters  \n `_PMessage`  \n A pointer to the `message` object.  \n  \n `_PSource`  \n A pointer to the source block offering the message.  \n  \n### Return Value  \n A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message.  \n  \n##  <a name=\"propagate_to_any_targets\"></a>  transformer::propagate_to_any_targets Method  \n Executes the transformer function on the input messages.  \n  \n```\nvirtual void propagate_to_any_targets(_Inout_opt_ message<_Output> *);\n```  \n  \n##  <a name=\"release_message\"></a>  transformer::release_message Method  \n Releases a previous message reservation.  \n  \n```\nvirtual void release_message(runtime_object_identity _MsgId);\n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the `message` object being released.  \n  \n##  <a name=\"reserve_message\"></a>  transformer::reserve_message Method  \n Reserves a message previously offered by this `transformer` messaging block.  \n  \n```\nvirtual bool reserve_message(runtime_object_identity _MsgId);\n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the `message` object being reserved.  \n  \n### Return Value  \n `true` if the message was successfully reserved, `false` otherwise.  \n  \n### Remarks  \n After `reserve` is called, if it returns `true`, either `consume` or `release` must be called to either take or release ownership of the message.  \n  \n##  <a name=\"resume_propagation\"></a>  transformer::resume_propagation Method  \n Resumes propagation after a reservation has been released.  \n  \n```\nvirtual void resume_propagation();\n```  \n  \n##  <a name=\"send_message\"></a>  transformer::send_message Method  \n Synchronously passes a message from an `ISource` block to this `transformer` messaging block. It is invoked by the `send` method, when called by a source block.  \n  \n```\nvirtual message_status send_message(\n    _Inout_ message<_Input>* _PMessage,\n    _Inout_ ISource<_Input>* _PSource);\n```  \n  \n### Parameters  \n `_PMessage`  \n A pointer to the `message` object.  \n  \n `_PSource`  \n A pointer to the source block offering the message.  \n  \n### Return Value  \n A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message.  \n  \n##  <a name=\"supports_anonymous_source\"></a>  transformer::supports_anonymous_source Method  \n Overrides the `supports_anonymous_source` method to indicate that this block can accept messages offered to it by a source that is not linked.  \n  \n```\nvirtual bool supports_anonymous_source();\n```  \n  \n### Return Value  \n `true` because the block does not postpone offered messages.  \n  \n##  <a name=\"ctor\"></a>  transformer::transformer Constructor  \n Constructs a `transformer` messaging block.  \n  \n```\ntransformer(\n    _Transform_method const& _Func,\n    _Inout_opt_ ITarget<_Output>* _PTarget = NULL);\n\ntransformer(\n    _Transform_method const& _Func,\n    _Inout_opt_ ITarget<_Output>* _PTarget,\n    filter_method const& _Filter);\n\ntransformer(\n    Scheduler& _PScheduler,\n    _Transform_method const& _Func,\n    _Inout_opt_ ITarget<_Output>* _PTarget = NULL);\n\ntransformer(\n    Scheduler& _PScheduler,\n    _Transform_method const& _Func,\n    _Inout_opt_ ITarget<_Output>* _PTarget,\n    filter_method const& _Filter);\n\ntransformer(\n    ScheduleGroup& _PScheduleGroup,\n    _Transform_method const& _Func,\n    _Inout_opt_ ITarget<_Output>* _PTarget = NULL);\n\ntransformer(\n    ScheduleGroup& _PScheduleGroup,\n    _Transform_method const& _Func,\n    _Inout_opt_ ITarget<_Output>* _PTarget,\n    filter_method const& _Filter);\n```  \n  \n### Parameters  \n `_Func`  \n A function that will be invoked for each accepted message.  \n  \n `_PTarget`  \n A pointer to a target block to link with the transformer.  \n  \n `_Filter`  \n A filter function which determines whether offered messages should be accepted.  \n  \n `_PScheduler`  \n The `Scheduler` object within which the propagation task for the `transformer` messaging block is scheduled.  \n  \n `_PScheduleGroup`  \n The `ScheduleGroup` object within which the propagation task for the `transformer` messaging block is scheduled. The `Scheduler` object used is implied by the schedule group.  \n  \n### Remarks  \n The runtime uses the default scheduler if you do not specify the `_PScheduler` or `_PScheduleGroup` parameters.  \n  \n The type `_Transform_method` is a functor with signature `_Output (_Input const &)` which is invoked by this `transformer` messaging block to process a message.  \n  \n The type `filter_method` is a functor with signature `bool (_Input const &)` which is invoked by this `transformer` messaging block to determine whether or not it should accept an offered message.  \n  \n##  <a name=\"dtor\"></a>  transformer::~transformer Destructor  \n Destroys the `transformer` messaging block.  \n  \n```\n~transformer();\n```  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)   \n [call Class](call-class.md)\n"}