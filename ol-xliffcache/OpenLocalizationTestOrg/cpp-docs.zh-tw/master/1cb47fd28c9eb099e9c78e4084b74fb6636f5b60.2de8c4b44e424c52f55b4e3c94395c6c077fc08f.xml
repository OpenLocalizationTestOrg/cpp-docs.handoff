{"nodes":[{"pos":[12,48],"content":"max_unbounded Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"max_unbounded Class | Microsoft Docs","pos":[0,36]}]},{"content":"max_unbounded Class","pos":[705,724]},{"pos":[725,899],"content":"Describes a <bpt id=\"p1\">[</bpt>max class<ept id=\"p1\">](../standard-library/allocators-header.md)</ept> object that does not limit the maximum length of a <bpt id=\"p2\">[</bpt>freelist<ept id=\"p2\">](../standard-library/freelist-class.md)</ept> object.","source":"Describes a [max class](../standard-library/allocators-header.md) object that does not limit the maximum length of a [freelist](../standard-library/freelist-class.md) object."},{"content":"Syntax","pos":[908,914]},{"content":"Member Functions","pos":[957,973]},{"content":"allocated","pos":[995,1004]},{"content":"Increments the count of allocated memory blocks.","pos":[1033,1081]},{"content":"deallocated","pos":[1087,1098]},{"content":"Decrements the count of allocated memory blocks.","pos":[1129,1177]},{"content":"full","pos":[1183,1187]},{"content":"Returns a value that specifies whether more memory blocks should be added to the free list.","pos":[1211,1302]},{"content":"released","pos":[1308,1316]},{"content":"Decrements the count of memory blocks on the free list.","pos":[1344,1399]},{"content":"saved","pos":[1405,1410]},{"content":"Increments the count of memory blocks on the free list.","pos":[1435,1490]},{"content":"Requirements","pos":[1500,1512]},{"pos":[1516,1541],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>allocators&gt;","source":"**Header:** \\<allocators>"},{"pos":[1548,1569],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> stdext","source":"**Namespace:** stdext"},{"pos":[1620,1644],"content":"max_unbounded::allocated"},{"content":"Increments the count of allocated memory blocks.","pos":[1648,1696]},{"content":"Parameters","pos":[1756,1766]},{"content":"Parameter","pos":[1773,1782]},{"content":"Description","pos":[1783,1794]},{"content":"The increment value.","pos":[1843,1863]},{"content":"Remarks","pos":[1874,1881]},{"content":"This member function does nothing.","pos":[1885,1919]},{"content":"It is called after each successful call by <ph id=\"ph1\">`cache_freelist::allocate`</ph> to operator <ph id=\"ph2\">`new`</ph>.","pos":[1920,2008],"source":" It is called after each successful call by `cache_freelist::allocate` to operator `new`."},{"content":"The argument <ph id=\"ph1\">`_Nx`</ph> is the number of memory blocks in the chunk allocated by operator <ph id=\"ph2\">`new`</ph>.","pos":[2009,2100],"source":" The argument `_Nx` is the number of memory blocks in the chunk allocated by operator `new`."},{"pos":[2153,2179],"content":"max_unbounded::deallocated"},{"content":"Decrements the count of allocated memory blocks.","pos":[2183,2231]},{"content":"Parameters","pos":[2293,2303]},{"content":"Parameter","pos":[2310,2319]},{"content":"Description","pos":[2320,2331]},{"content":"The increment value.","pos":[2380,2400]},{"content":"Remarks","pos":[2411,2418]},{"content":"The member function does nothing.","pos":[2422,2455]},{"content":"This member function is called after each call by <ph id=\"ph1\">`cache_freelist::deallocate`</ph> to operator <ph id=\"ph2\">`delete`</ph>.","pos":[2456,2556],"source":" This member function is called after each call by `cache_freelist::deallocate` to operator `delete`."},{"content":"The argument <ph id=\"ph1\">`_Nx`</ph> is the number of memory blocks in the chunk deallocated by operator <ph id=\"ph2\">`delete`</ph>.","pos":[2557,2653],"source":" The argument `_Nx` is the number of memory blocks in the chunk deallocated by operator `delete`."},{"pos":[2699,2718],"content":"max_unbounded::full"},{"content":"Returns a value that specifies whether more memory blocks should be added to the free list.","pos":[2722,2813]},{"content":"Return Value","pos":[2849,2861]},{"pos":[2865,2908],"content":"The member function always returns <ph id=\"ph1\">`false`</ph>.","source":"The member function always returns `false`."},{"content":"Remarks","pos":[2918,2925]},{"content":"This member function is called by <ph id=\"ph1\">`cache_freelist::deallocate`</ph>.","pos":[2929,2992],"source":"This member function is called by `cache_freelist::deallocate`."},{"content":"If the call returns <ph id=\"ph1\">`true`</ph>, <ph id=\"ph2\">`deallocate`</ph> puts the memory block on the free list; if it returns false, <ph id=\"ph3\">`deallocate`</ph> calls operator <ph id=\"ph4\">`delete`</ph> to deallocate the block.","pos":[2993,3156],"source":" If the call returns `true`, `deallocate` puts the memory block on the free list; if it returns false, `deallocate` calls operator `delete` to deallocate the block."},{"pos":[3206,3229],"content":"max_unbounded::released"},{"content":"Decrements the count of memory blocks on the free list.","pos":[3233,3288]},{"content":"Remarks","pos":[3328,3335]},{"content":"This member function does nothing.","pos":[3339,3373]},{"content":"The <ph id=\"ph1\">`released`</ph> member function of the current max class is called by <ph id=\"ph2\">`cache_freelist::allocate`</ph> whenever it removes a memory block from the free list.","pos":[3374,3524],"source":" The `released` member function of the current max class is called by `cache_freelist::allocate` whenever it removes a memory block from the free list."},{"pos":[3571,3591],"content":"max_unbounded::saved"},{"content":"Increments the count of memory blocks on the free list.","pos":[3595,3650]},{"content":"Remarks","pos":[3687,3694]},{"content":"This member function does nothing.","pos":[3698,3732]},{"content":"It is called by <ph id=\"ph1\">`cache_freelist::deallocate`</ph> whenever it puts a memory block on the free list.","pos":[3733,3827],"source":" It is called by `cache_freelist::deallocate` whenever it puts a memory block on the free list."},{"content":"See Also","pos":[3836,3844]},{"content":"allocators&gt;","pos":[3851,3862],"source":"allocators>"}],"content":"---\ntitle: \"max_unbounded Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"allocators/stdext::max_unbounded\"\n  - \"stdext::max_unbounded\"\n  - \"stdext.max_unbounded\"\n  - \"max_unbounded\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"max_unbounded class\"\nms.assetid: e34627a9-c231-4031-a483-cbb0514fff46\ncaps.latest.revision: 18\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# max_unbounded Class\nDescribes a [max class](../standard-library/allocators-header.md) object that does not limit the maximum length of a [freelist](../standard-library/freelist-class.md) object.  \n  \n## Syntax  \n  \n```\nclass max_unbounded\n```  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[allocated](#max_unbounded__allocated)|Increments the count of allocated memory blocks.|  \n|[deallocated](#max_unbounded__deallocated)|Decrements the count of allocated memory blocks.|  \n|[full](#max_unbounded__full)|Returns a value that specifies whether more memory blocks should be added to the free list.|  \n|[released](#max_unbounded__released)|Decrements the count of memory blocks on the free list.|  \n|[saved](#max_unbounded__saved)|Increments the count of memory blocks on the free list.|  \n  \n## Requirements  \n **Header:** \\<allocators>  \n  \n **Namespace:** stdext  \n  \n##  <a name=\"max_unbounded__allocated\"></a>  max_unbounded::allocated  \n Increments the count of allocated memory blocks.  \n  \n```\nvoid allocated(std::size_t _Nx = 1);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`_Nx`|The increment value.|  \n  \n### Remarks  \n This member function does nothing. It is called after each successful call by `cache_freelist::allocate` to operator `new`. The argument `_Nx` is the number of memory blocks in the chunk allocated by operator `new`.  \n  \n##  <a name=\"max_unbounded__deallocated\"></a>  max_unbounded::deallocated  \n Decrements the count of allocated memory blocks.  \n  \n```\nvoid deallocated(std::size_t _Nx = 1);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`_Nx`|The increment value.|  \n  \n### Remarks  \n The member function does nothing. This member function is called after each call by `cache_freelist::deallocate` to operator `delete`. The argument `_Nx` is the number of memory blocks in the chunk deallocated by operator `delete`.  \n  \n##  <a name=\"max_unbounded__full\"></a>  max_unbounded::full  \n Returns a value that specifies whether more memory blocks should be added to the free list.  \n  \n```\nbool full();\n```  \n  \n### Return Value  \n The member function always returns `false`.  \n  \n### Remarks  \n This member function is called by `cache_freelist::deallocate`. If the call returns `true`, `deallocate` puts the memory block on the free list; if it returns false, `deallocate` calls operator `delete` to deallocate the block.  \n  \n##  <a name=\"max_unbounded__released\"></a>  max_unbounded::released  \n Decrements the count of memory blocks on the free list.  \n  \n```\nvoid released();\n```  \n  \n### Remarks  \n This member function does nothing. The `released` member function of the current max class is called by `cache_freelist::allocate` whenever it removes a memory block from the free list.  \n  \n##  <a name=\"max_unbounded__saved\"></a>  max_unbounded::saved  \n Increments the count of memory blocks on the free list.  \n  \n```\nvoid saved();\n```  \n  \n### Remarks  \n This member function does nothing. It is called by `cache_freelist::deallocate` whenever it puts a memory block on the free list.  \n  \n## See Also  \n [\\<allocators>](../standard-library/allocators-header.md)\n\n\n\n"}