{"nodes":[{"pos":[12,48],"content":"steady_clock struct | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"steady_clock struct | Microsoft Docs","pos":[0,36]}]},{"content":"steady_clock struct","pos":[582,601]},{"pos":[602,630],"content":"Represents a <ph id=\"ph1\">`steady`</ph> clock.","source":"Represents a `steady` clock."},{"content":"Syntax","pos":[639,645]},{"content":"Remarks","pos":[692,699]},{"content":"On Windows, steady_clock wraps the QueryPerformanceCounter function.","pos":[703,771]},{"pos":[778,949],"content":"A clock is <bpt id=\"p1\">*</bpt>monotonic<ept id=\"p1\">*</ept> if the value that is returned by a first call to <ph id=\"ph1\">`now()`</ph> is always less than or equal to the value that is returned by a subsequent call to <ph id=\"ph2\">`now()`</ph>.","source":"A clock is *monotonic* if the value that is returned by a first call to `now()` is always less than or equal to the value that is returned by a subsequent call to `now()`."},{"pos":[956,1045],"content":"A clock is <bpt id=\"p1\">*</bpt>steady<ept id=\"p1\">*</ept> if it is <bpt id=\"p2\">*</bpt>monotonic<ept id=\"p2\">*</ept> and if the time between clock ticks is constant.","source":"A clock is *steady* if it is *monotonic* and if the time between clock ticks is constant."},{"content":"High_resolution_clock is a typdef for steady_clock.","pos":[1052,1103]},{"content":"Public functions","pos":[1112,1128]},{"content":"Function","pos":[1135,1143]},{"content":"Description","pos":[1144,1155]},{"content":"now","pos":[1197,1200]},{"content":"Returns the current time as a time_point value.","pos":[1201,1248]},{"content":"Public Constants","pos":[1258,1274]},{"content":"Name","pos":[1281,1285]},{"content":"Description","pos":[1286,1297]},{"content":"Holds <ph id=\"ph1\">`true`</ph>.","pos":[1361,1374],"source":"Holds `true`."},{"content":"A <ph id=\"ph1\">`steady_clock`</ph> is <bpt id=\"p1\">*</bpt>steady<ept id=\"p1\">*</ept>.","pos":[1375,1404],"source":" A `steady_clock` is *steady*."},{"content":"Requirements","pos":[1414,1426]},{"pos":[1430,1448],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> chrono","source":"**Header:** chrono"},{"pos":[1455,1481],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std::chrono","source":"**Namespace:** std::chrono"},{"content":"See Also","pos":[1490,1498]},{"content":"Header Files Reference","pos":[1503,1525]},{"content":"chrono&gt;","pos":[1592,1599],"source":"chrono>"},{"content":"system_clock Structure","pos":[1637,1659]}],"content":"---\ntitle: \"steady_clock struct | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"chrono/std::chrono::steady_clock\"\ndev_langs: \n  - \"C++\"\nms.assetid: 970d12ec-fc80-4391-a2f7-b57b2aec668d\ncaps.latest.revision: 14\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# steady_clock struct\nRepresents a `steady` clock.  \n  \n## Syntax  \n  \n```  \nstruct steady_clock;  \n```  \n  \n## Remarks  \n On Windows, steady_clock wraps the QueryPerformanceCounter function.  \n  \n A clock is *monotonic* if the value that is returned by a first call to `now()` is always less than or equal to the value that is returned by a subsequent call to `now()`.  \n  \n A clock is *steady* if it is *monotonic* and if the time between clock ticks is constant.  \n  \n High_resolution_clock is a typdef for steady_clock.  \n  \n## Public functions  \n  \n|Function|Description|  \n|--------------|-----------------|  \n|now|Returns the current time as a time_point value.|  \n  \n## Public Constants  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`system_clock::is_steady`|Holds `true`. A `steady_clock` is *steady*.|  \n  \n## Requirements  \n **Header:** chrono  \n  \n **Namespace:** std::chrono  \n  \n## See Also  \n [Header Files Reference](../standard-library/cpp-standard-library-header-files.md)   \n [\\<chrono>](../standard-library/chrono.md)   \n [system_clock Structure](../standard-library/system-clock-structure.md)\n"}