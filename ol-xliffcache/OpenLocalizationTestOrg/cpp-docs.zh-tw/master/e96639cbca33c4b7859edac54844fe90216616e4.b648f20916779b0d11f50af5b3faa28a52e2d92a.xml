{"nodes":[{"pos":[12,46],"content":"Default Arguments | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Default Arguments | Microsoft Docs","pos":[0,34]}]},{"content":"Default Arguments","pos":[786,803]},{"content":"In many cases, functions have arguments that are used so infrequently that a default value would suffice.","pos":[804,909]},{"content":"To address this, the default-argument facility allows for specifying only those arguments to a function that are meaningful in a given call.","pos":[910,1050]},{"content":"To illustrate this concept, consider the example presented in <bpt id=\"p1\">[</bpt>Function Overloading<ept id=\"p1\">](../cpp/function-overloading.md)</ept>.","pos":[1051,1168],"source":" To illustrate this concept, consider the example presented in [Function Overloading](../cpp/function-overloading.md)."},{"pos":[1437,1547],"content":"In many applications, a reasonable default can be supplied for <ph id=\"ph1\">`prec`</ph>, eliminating the need for two functions:","source":"In many applications, a reasonable default can be supplied for `prec`, eliminating the need for two functions:"},{"pos":[1758,1896],"content":"The implementation of the <ph id=\"ph1\">`print`</ph> function is changed slightly to reflect the fact that only one such function exists for type <bpt id=\"p1\">**</bpt>double<ept id=\"p1\">**</ept>:","source":"The implementation of the `print` function is changed slightly to reflect the fact that only one such function exists for type **double**:"},{"pos":[2884,2951],"content":"To invoke the new <ph id=\"ph1\">`print`</ph> function, use code such as the following:","source":"To invoke the new `print` function, use code such as the following:"},{"content":"Note these points when using default arguments:","pos":[3116,3163]},{"content":"Default arguments are used only in function calls where trailing arguments are omitted — they must be the last argument(s).","pos":[3173,3296]},{"content":"Therefore, the following code is illegal:","pos":[3297,3338]},{"content":"A default argument cannot be redefined in later declarations even if the redefinition is identical to the original.","pos":[3421,3536]},{"content":"Therefore, the following code produces an error:","pos":[3537,3585]},{"pos":[3835,3955],"content":"The problem with this code is that the function declaration in the definition redefines the default argument for <ph id=\"ph1\">`prec`</ph>.","source":"The problem with this code is that the function declaration in the definition redefines the default argument for `prec`."},{"content":"Additional default arguments can be added by later declarations.","pos":[3965,4029]},{"content":"Default arguments can be provided for pointers to functions.","pos":[4039,4099]},{"content":"For example:","pos":[4100,4112]},{"content":"See Also","pos":[4183,4191]},{"content":"C++ Abstract Declarators","pos":[4196,4220]}],"content":"---\ntitle: \"Default Arguments | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"arguments [C++], function\"\n  - \"function declarators\"\n  - \"functions [C++], default arguments\"\n  - \"declaring functions, declarators\"\n  - \"default arguments\"\n  - \"arguments [C++], default\"\n  - \"defaults [C++], arguments\"\nms.assetid: d32cf516-05cb-4d4d-b169-92f5649fdfa2\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Default Arguments\nIn many cases, functions have arguments that are used so infrequently that a default value would suffice. To address this, the default-argument facility allows for specifying only those arguments to a function that are meaningful in a given call. To illustrate this concept, consider the example presented in [Function Overloading](../cpp/function-overloading.md).  \n  \n```  \n// Prototype three print functions.  \nint print( char *s );                  // Print a string.  \nint print( double dvalue );            // Print a double.  \nint print( double dvalue, int prec );  // Print a double with a  \n//  given precision.  \n```  \n  \n In many applications, a reasonable default can be supplied for `prec`, eliminating the need for two functions:  \n  \n```  \n// Prototype two print functions.  \nint print( char *s );                    // Print a string.  \nint print( double dvalue, int prec=2 );  // Print a double with a  \n//  given precision.  \n```  \n  \n The implementation of the `print` function is changed slightly to reflect the fact that only one such function exists for type **double**:  \n  \n```  \n// default_arguments.cpp  \n// compile with: /EHsc /c  \n  \n// Print a double in specified precision.  \n//  Positive numbers for precision indicate how many digits  \n//  precision after the decimal point to show. Negative  \n//  numbers for precision indicate where to round the number  \n//  to the left of the decimal point.  \n  \n#include <iostream>  \n#include <math.h>  \nusing namespace std;  \n  \nint print( double dvalue, int prec ) {  \n   // Use table-lookup for rounding/truncation.  \n   static const double rgPow10[] = {   \n      10E-7, 10E-6, 10E-5, 10E-4, 10E-3, 10E-2, 10E-1, 10E0,  \n         10E1,  10E2,  10E3,  10E4, 10E5,  10E6  \n   };  \n   const int iPowZero = 6;  \n   // If precision out of range, just print the number.  \n   if( prec >= -6 && prec <= 7 )  \n      // Scale, truncate, then rescale.  \n      dvalue = floor( dvalue / rgPow10[iPowZero - prec] ) *  \n      rgPow10[iPowZero - prec];  \n   cout << dvalue << endl;  \n   return cout.good();  \n}  \n```  \n  \n To invoke the new `print` function, use code such as the following:  \n  \n```  \nprint( d );    // Precision of 2 supplied by default argument.  \nprint( d, 0 ); // Override default argument to achieve other  \n//  results.  \n```  \n  \n Note these points when using default arguments:  \n  \n-   Default arguments are used only in function calls where trailing arguments are omitted — they must be the last argument(s). Therefore, the following code is illegal:  \n  \n    ```  \n    int print( double dvalue = 0.0, int prec );  \n    ```  \n  \n-   A default argument cannot be redefined in later declarations even if the redefinition is identical to the original. Therefore, the following code produces an error:  \n  \n    ```  \n    // Prototype for print function.  \n    int print( double dvalue, int prec = 2 );  \n  \n    ...  \n  \n    // Definition for print function.  \n    int print( double dvalue, int prec = 2 )  \n    {  \n    ...  \n    }  \n    ```  \n  \n     The problem with this code is that the function declaration in the definition redefines the default argument for `prec`.  \n  \n-   Additional default arguments can be added by later declarations.  \n  \n-   Default arguments can be provided for pointers to functions. For example:  \n  \n    ```  \n    int (*pShowIntVal)( int i = 0 );  \n    ```  \n  \n## See Also  \n [C++ Abstract Declarators](http://msdn.microsoft.com/en-us/e7e18c18-0cad-4450-942b-d27e1d4dd088)"}