{"nodes":[{"pos":[12,40],"content":"wcsrtombs_s | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"wcsrtombs_s | Microsoft Docs","pos":[0,28]}]},{"content":"wcsrtombs_s","pos":[995,1006]},{"content":"Convert a wide character string to its multibyte character string representation.","pos":[1007,1088]},{"content":"A version of <bpt id=\"p1\">[</bpt>wcsrtombs<ept id=\"p1\">](../../c-runtime-library/reference/wcsrtombs.md)</ept> with security enhancements as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1089,1293],"source":" A version of [wcsrtombs](../../c-runtime-library/reference/wcsrtombs.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"content":"Syntax","pos":[1302,1308]},{"content":"Parameters","pos":[1692,1702]},{"content":"[out]","pos":[1706,1711]},{"content":"The number of characters converted.","pos":[1730,1765]},{"content":"[out]","pos":[1772,1777]},{"content":"The address of a buffer for the resulting converted multibyte character string.","pos":[1789,1868]},{"content":"[out]","pos":[1875,1880]},{"content":"The size in bytes of the <ph id=\"ph1\">`mbstr`</ph> buffer.","pos":[1898,1938],"source":" The size in bytes of the `mbstr` buffer."},{"content":"[in]","pos":[1945,1949]},{"content":"Points to the wide character string to be converted.","pos":[1961,2013]},{"content":"[in]","pos":[2020,2024]},{"content":"The maximum number of bytes to be stored in the <ph id=\"ph1\">`mbstr`</ph> buffer, or <bpt id=\"p1\">[</bpt>_TRUNCATE<ept id=\"p1\">](../../c-runtime-library/truncate.md)</ept>.","pos":[2036,2152],"source":" The maximum number of bytes to be stored in the `mbstr` buffer, or [_TRUNCATE](../../c-runtime-library/truncate.md)."},{"content":"[in]","pos":[2159,2163]},{"content":"A pointer to an <ph id=\"ph1\">`mbstate_t`</ph> conversion state object.","pos":[2177,2229],"source":" A pointer to an `mbstate_t` conversion state object."},{"content":"Return Value","pos":[2238,2250]},{"content":"Zero if successful, an error code on failure.","pos":[2254,2299]},{"content":"Error condition","pos":[2306,2321]},{"pos":[2322,2338],"content":"Return value and"},{"pos":[2416,2447],"content":"is <ph id=\"ph1\">`NULL`</ph> and <ph id=\"ph2\">`sizeInBytes`</ph> &gt; 0","source":" is `NULL` and `sizeInBytes` > 0"},{"pos":[2469,2471],"content":"is"},{"pos":[2492,2610],"content":"The destination buffer is too small to contain the converted string (unless <ph id=\"ph1\">`count`</ph> is <ph id=\"ph2\">`_TRUNCATE`</ph>; see Remarks below)","source":"The destination buffer is too small to contain the converted string (unless `count` is `_TRUNCATE`; see Remarks below)"},{"content":"If any of these conditions occurs, the invalid parameter exception is invoked as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept> .","pos":[2627,2794],"source":"If any of these conditions occurs, the invalid parameter exception is invoked as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md) ."},{"content":"If execution is allowed to continue, the function returns an error code and sets <ph id=\"ph1\">`errno`</ph> as indicated in the table.","pos":[2795,2910],"source":" If execution is allowed to continue, the function returns an error code and sets `errno` as indicated in the table."},{"content":"Remarks","pos":[2919,2926]},{"content":"The <ph id=\"ph1\">`wcsrtombs_s`</ph> function converts a string of wide characters pointed to by <ph id=\"ph2\">`wcstr`</ph> into multibyte characters stored in the buffer pointed to by <ph id=\"ph3\">`mbstr`</ph>, using the conversion state contained in <ph id=\"ph4\">`mbstate`</ph>.","pos":[2930,3136],"source":"The `wcsrtombs_s` function converts a string of wide characters pointed to by `wcstr` into multibyte characters stored in the buffer pointed to by `mbstr`, using the conversion state contained in `mbstate`."},{"content":"The conversion will continue for each character until one of these conditions is met:","pos":[3137,3222]},{"content":"A null wide character is encountered","pos":[3232,3268]},{"content":"A wide character that cannot be converted is encountered","pos":[3278,3334]},{"pos":[3344,3408],"content":"The number of bytes stored in the <ph id=\"ph1\">`mbstr`</ph> buffer equals <ph id=\"ph2\">`count`</ph>.","source":"The number of bytes stored in the `mbstr` buffer equals `count`."},{"content":"The destination string is always null-terminated (even in the case of an error).","pos":[3415,3495]},{"pos":[3502,3722],"content":"If <ph id=\"ph1\">`count`</ph> is the special value <bpt id=\"p1\">[</bpt>_TRUNCATE<ept id=\"p1\">](../../c-runtime-library/truncate.md)</ept>, then <ph id=\"ph2\">`wcsrtombs_s`</ph> converts as much of the string as will fit into the destination buffer, while still leaving room for a null terminator.","source":"If `count` is the special value [_TRUNCATE](../../c-runtime-library/truncate.md), then `wcsrtombs_s` converts as much of the string as will fit into the destination buffer, while still leaving room for a null terminator."},{"content":"If <ph id=\"ph1\">`wcsrtombs_s`</ph> successfully converts the source string, it puts the size in bytes of the converted string, including the null terminator, into <ph id=\"ph2\">`*``pReturnValue`</ph> (provided <ph id=\"ph3\">`pReturnValue`</ph> is not <ph id=\"ph4\">`NULL`</ph>).","pos":[3729,3932],"source":"If `wcsrtombs_s` successfully converts the source string, it puts the size in bytes of the converted string, including the null terminator, into `*``pReturnValue` (provided `pReturnValue` is not `NULL`)."},{"content":"This occurs even if the <ph id=\"ph1\">`mbstr`</ph> argument is <ph id=\"ph2\">`NULL`</ph> and provides a way to determine the required buffer size.","pos":[3933,4041],"source":" This occurs even if the `mbstr` argument is `NULL` and provides a way to determine the required buffer size."},{"content":"Note that if <ph id=\"ph1\">`mbstr`</ph> is <ph id=\"ph2\">`NULL`</ph>, <ph id=\"ph3\">`count`</ph> is ignored.","pos":[4042,4093],"source":" Note that if `mbstr` is `NULL`, `count` is ignored."},{"pos":[4100,4317],"content":"If <ph id=\"ph1\">`wcsrtombs_s`</ph> encounters a wide character it cannot convert to a multibyte character, it puts -1 in <ph id=\"ph2\">`*``pReturnValue`</ph>, sets the destination buffer to an empty string, sets <ph id=\"ph3\">`errno`</ph> to <ph id=\"ph4\">`EILSEQ`</ph>, and returns <ph id=\"ph5\">`EILSEQ`</ph>.","source":"If `wcsrtombs_s` encounters a wide character it cannot convert to a multibyte character, it puts -1 in `*``pReturnValue`, sets the destination buffer to an empty string, sets `errno` to `EILSEQ`, and returns `EILSEQ`."},{"content":"If the sequences pointed to by <ph id=\"ph1\">`wcstr`</ph> and <ph id=\"ph2\">`mbstr`</ph> overlap, the behavior of <ph id=\"ph3\">`wcsrtombs_s`</ph> is undefined.","pos":[4324,4427],"source":"If the sequences pointed to by `wcstr` and `mbstr` overlap, the behavior of `wcsrtombs_s` is undefined."},{"content":"is affected by the LC_TYPE category of the current locale.","pos":[4442,4500]},{"pos":[4508,4649],"content":"[!IMPORTANT]\n Ensure that `wcstr` and `mbstr` do not overlap, and that `count` correctly reflects the number of wide characters to convert.","leadings":["","> "],"nodes":[{"content":"Ensure that <ph id=\"ph1\">`wcstr`</ph> and <ph id=\"ph2\">`mbstr`</ph> do not overlap, and that <ph id=\"ph3\">`count`</ph> correctly reflects the number of wide characters to convert.","pos":[14,139],"source":" Ensure that `wcstr` and `mbstr` do not overlap, and that `count` correctly reflects the number of wide characters to convert."}]},{"content":"The <ph id=\"ph1\">`wcsrtombs_s`</ph> function differs from <bpt id=\"p1\">[</bpt>wcstombs_s, _wcstombs_s_l<ept id=\"p1\">](../../c-runtime-library/reference/wcstombs-s-wcstombs-s-l.md)</ept> by its restartability.","pos":[4656,4808],"source":"The `wcsrtombs_s` function differs from [wcstombs_s, _wcstombs_s_l](../../c-runtime-library/reference/wcstombs-s-wcstombs-s-l.md) by its restartability."},{"content":"The conversion state is stored in <ph id=\"ph1\">`mbstate`</ph> for subsequent calls to the same or other restartable functions.","pos":[4809,4917],"source":" The conversion state is stored in `mbstate` for subsequent calls to the same or other restartable functions."},{"content":"Results are undefined when mixing the use of restartable and nonrestartable functions.","pos":[4918,5004]},{"content":"For example, an application would use <ph id=\"ph1\">`wcsrlen`</ph> rather than <ph id=\"ph2\">`wcslen`</ph>, if a subsequent call to <ph id=\"ph3\">`wcsrtombs_s`</ph> were used instead of","pos":[5005,5133],"source":" For example, an application would use `wcsrlen` rather than `wcslen`, if a subsequent call to `wcsrtombs_s` were used instead of "},{"content":"In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically (eliminating the need to specify a size argument) and they can automatically replace older, non-secure functions with their newer, secure counterparts.","pos":[5154,5424]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[5425,5533],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"content":"Exceptions","pos":[5542,5552]},{"pos":[5556,5725],"content":"The <ph id=\"ph1\">`wcsrtombs_s`</ph> function is multithread safe as long as no function in the current thread calls <ph id=\"ph2\">`setlocale`</ph> while this function is executing and the <ph id=\"ph3\">`mbstate`</ph> is null.","source":"The `wcsrtombs_s` function is multithread safe as long as no function in the current thread calls `setlocale` while this function is executing and the `mbstate` is null."},{"content":"Example","pos":[5734,5741]},{"content":".NET Framework Equivalent","pos":[6835,6860]},{"content":"Not applicable.","pos":[6864,6879]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[6880,6927],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[6928,7053],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"Requirements","pos":[7062,7074]},{"content":"Routine","pos":[7081,7088]},{"content":"Required header","pos":[7089,7104]},{"content":"wchar.h&gt;","pos":[7165,7173],"source":"wchar.h>"},{"content":"See Also","pos":[7183,7191]},{"content":"Data Conversion","pos":[7196,7211]},{"content":"Locale","pos":[7262,7268]},{"content":"Interpretation of Multibyte-Character Sequences","pos":[7310,7357]},{"content":"wcrtomb","pos":[7440,7447]},{"content":"wcrtomb_s","pos":[7500,7509]},{"content":"wctomb, _wctomb_l","pos":[7564,7581]},{"content":"wcstombs, _wcstombs_l","pos":[7642,7663]},{"content":"mbsinit","pos":[7728,7735]}],"content":"---\ntitle: \"wcsrtombs_s | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"wcsrtombs_s\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-convert-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"wcsrtombs_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"string conversion, wide characters\"\n  - \"wcsrtombs_s function\"\n  - \"wide characters, strings\"\nms.assetid: 9dccb766-113c-44bb-9b04-07a634dddec8\ncaps.latest.revision: 27\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# wcsrtombs_s\nConvert a wide character string to its multibyte character string representation. A version of [wcsrtombs](../../c-runtime-library/reference/wcsrtombs.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n## Syntax  \n  \n```  \nerrno_t wcsrtombs_s(  \n   size_t *pReturnValue,  \n   char *mbstr,  \n   size_t sizeInBytes,  \n   const wchar_t **wcstr,  \n   sizeof count,  \n   mbstate_t *mbstate  \n);  \ntemplate <size_t size>  \nerrno_t wcsrtombs_s(  \n   size_t *pReturnValue,  \n   char (&mbstr)[size],  \n   const wchar_t **wcstr,  \n   sizeof count,  \n   mbstate_t *mbstate  \n); // C++ only  \n```  \n  \n#### Parameters  \n [out] `pReturnValue`  \n The number of characters converted.  \n  \n [out] `mbstr`  \n The address of a buffer for the resulting converted multibyte character string.  \n  \n [out] `sizeInBytes`  \n The size in bytes of the `mbstr` buffer.  \n  \n [in] `wcstr`  \n Points to the wide character string to be converted.  \n  \n [in] `count`  \n The maximum number of bytes to be stored in the `mbstr` buffer, or [_TRUNCATE](../../c-runtime-library/truncate.md).  \n  \n [in] `mbstate`  \n A pointer to an `mbstate_t` conversion state object.  \n  \n## Return Value  \n Zero if successful, an error code on failure.  \n  \n|Error condition|Return value and `errno`|  \n|---------------------|------------------------------|  \n|`mbstr` is `NULL` and `sizeInBytes` > 0|`EINVAL`|  \n|`wcstr` is `NULL`|`EINVAL`|  \n|The destination buffer is too small to contain the converted string (unless `count` is `_TRUNCATE`; see Remarks below)|`ERANGE`|  \n  \n If any of these conditions occurs, the invalid parameter exception is invoked as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md) . If execution is allowed to continue, the function returns an error code and sets `errno` as indicated in the table.  \n  \n## Remarks  \n The `wcsrtombs_s` function converts a string of wide characters pointed to by `wcstr` into multibyte characters stored in the buffer pointed to by `mbstr`, using the conversion state contained in `mbstate`. The conversion will continue for each character until one of these conditions is met:  \n  \n-   A null wide character is encountered  \n  \n-   A wide character that cannot be converted is encountered  \n  \n-   The number of bytes stored in the `mbstr` buffer equals `count`.  \n  \n The destination string is always null-terminated (even in the case of an error).  \n  \n If `count` is the special value [_TRUNCATE](../../c-runtime-library/truncate.md), then `wcsrtombs_s` converts as much of the string as will fit into the destination buffer, while still leaving room for a null terminator.  \n  \n If `wcsrtombs_s` successfully converts the source string, it puts the size in bytes of the converted string, including the null terminator, into `*``pReturnValue` (provided `pReturnValue` is not `NULL`). This occurs even if the `mbstr` argument is `NULL` and provides a way to determine the required buffer size. Note that if `mbstr` is `NULL`, `count` is ignored.  \n  \n If `wcsrtombs_s` encounters a wide character it cannot convert to a multibyte character, it puts -1 in `*``pReturnValue`, sets the destination buffer to an empty string, sets `errno` to `EILSEQ`, and returns `EILSEQ`.  \n  \n If the sequences pointed to by `wcstr` and `mbstr` overlap, the behavior of `wcsrtombs_s` is undefined. `wcsrtombs_s` is affected by the LC_TYPE category of the current locale.  \n  \n> [!IMPORTANT]\n>  Ensure that `wcstr` and `mbstr` do not overlap, and that `count` correctly reflects the number of wide characters to convert.  \n  \n The `wcsrtombs_s` function differs from [wcstombs_s, _wcstombs_s_l](../../c-runtime-library/reference/wcstombs-s-wcstombs-s-l.md) by its restartability. The conversion state is stored in `mbstate` for subsequent calls to the same or other restartable functions. Results are undefined when mixing the use of restartable and nonrestartable functions. For example, an application would use `wcsrlen` rather than `wcslen`, if a subsequent call to `wcsrtombs_s` were used instead of `wcstombs_s.`  \n  \n In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically (eliminating the need to specify a size argument) and they can automatically replace older, non-secure functions with their newer, secure counterparts. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n## Exceptions  \n The `wcsrtombs_s` function is multithread safe as long as no function in the current thread calls `setlocale` while this function is executing and the `mbstate` is null.  \n  \n## Example  \n  \n```  \n// crt_wcsrtombs_s.cpp  \n//   \n// This code example converts a wide  \n// character string into a multibyte  \n// character string.  \n//  \n  \n#include <stdio.h>  \n#include <memory.h>  \n#include <wchar.h>  \n#include <errno.h>  \n  \n#define MB_BUFFER_SIZE 100  \n  \nvoid main()  \n{  \n    const wchar_t   wcString[] =   \n                    {L\"Every good boy does fine.\"};  \n    const wchar_t   *wcsIndirectString = wcString;  \n    char            mbString[MB_BUFFER_SIZE];  \n    size_t          countConverted;  \n    errno_t         err;  \n    mbstate_t       mbstate;  \n  \n    // Reset to initial shift state  \n    ::memset((void*)&mbstate, 0, sizeof(mbstate));  \n  \n    err = wcsrtombs_s(&countConverted, mbString, MB_BUFFER_SIZE,  \n                      &wcsIndirectString, MB_BUFFER_SIZE, &mbstate);  \n    if (err == EILSEQ)  \n    {  \n        printf( \"An encoding error was detected in the string.\\n\" );  \n    }  \n    else   \n    {  \n        printf( \"The string was successfully converted.\\n\" );  \n    }  \n}  \n```  \n  \n```Output  \nThe string was successfully converted.  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`wcsrtombs_s`|\\<wchar.h>|  \n  \n## See Also  \n [Data Conversion](../../c-runtime-library/data-conversion.md)   \n [Locale](../../c-runtime-library/locale.md)   \n [Interpretation of Multibyte-Character Sequences](../../c-runtime-library/interpretation-of-multibyte-character-sequences.md)   \n [wcrtomb](../../c-runtime-library/reference/wcrtomb.md)   \n [wcrtomb_s](../../c-runtime-library/reference/wcrtomb-s.md)   \n [wctomb, _wctomb_l](../../c-runtime-library/reference/wctomb-wctomb-l.md)   \n [wcstombs, _wcstombs_l](../../c-runtime-library/reference/wcstombs-wcstombs-l.md)   \n [mbsinit](../../c-runtime-library/reference/mbsinit.md)"}