{"nodes":[{"pos":[12,48],"content":"pointers_to_members | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"pointers_to_members | Microsoft Docs","pos":[0,36]}]},{"content":"pointers_to_members","pos":[766,785]},{"content":"C++ Specific","pos":[788,800]},{"content":"Specifies whether a pointer to a class member can be declared before its associated class definition and is used to control the pointer size and the code required to interpret the pointer.","pos":[809,997]},{"content":"Syntax","pos":[1006,1012]},{"content":"Remarks","pos":[1123,1130]},{"pos":[1134,1371],"content":"You can place a <bpt id=\"p1\">**</bpt>pointers_to_members<ept id=\"p1\">**</ept> pragma in your source file as an alternative to using the <bpt id=\"p2\">[</bpt>/vmx<ept id=\"p2\">](../build/reference/vmb-vmg-representation-method.md)</ept> compiler options or the <bpt id=\"p3\">[</bpt>inheritance keywords<ept id=\"p3\">](../cpp/inheritance-keywords.md)</ept>.","source":"You can place a **pointers_to_members** pragma in your source file as an alternative to using the [/vmx](../build/reference/vmb-vmg-representation-method.md) compiler options or the [inheritance keywords](../cpp/inheritance-keywords.md)."},{"content":"The <bpt id=\"p1\">*</bpt>pointer-declaration<ept id=\"p1\">*</ept> argument specifies whether you have declared a pointer to a member before or after the associated function definition.","pos":[1378,1522],"source":"The *pointer-declaration* argument specifies whether you have declared a pointer to a member before or after the associated function definition."},{"content":"The <bpt id=\"p1\">*</bpt>pointer-declaration<ept id=\"p1\">*</ept> argument is one of the following two symbols:","pos":[1523,1594],"source":" The *pointer-declaration* argument is one of the following two symbols:"},{"content":"Argument","pos":[1601,1609]},{"content":"Comments","pos":[1610,1618]},{"content":"full_generality","pos":[1659,1674]},{"content":"Generates safe, sometimes nonoptimal code.","pos":[1677,1719]},{"content":"You use <bpt id=\"p1\">**</bpt>full_generality<ept id=\"p1\">**</ept> if any pointer to a member is declared before the associated class definition.","pos":[1720,1826],"source":" You use **full_generality** if any pointer to a member is declared before the associated class definition."},{"content":"This argument always uses the pointer representation specified by the <bpt id=\"p1\">*</bpt>most-general-representation<ept id=\"p1\">*</ept> argument.","pos":[1827,1936],"source":" This argument always uses the pointer representation specified by the *most-general-representation* argument."},{"content":"Equivalent to /vmg.","pos":[1937,1956]},{"content":"best_case","pos":[1963,1972]},{"content":"Generates safe, optimal code using best-case representation for all pointers to members.","pos":[1975,2063]},{"content":"Requires defining the class before declaring a pointer to a member of the class.","pos":[2064,2144]},{"content":"The default is <bpt id=\"p1\">**</bpt>best_case<ept id=\"p1\">**</ept>.","pos":[2145,2174],"source":" The default is **best_case**."},{"content":"The <bpt id=\"p1\">*</bpt>most-general-representation<ept id=\"p1\">*</ept> argument specifies the smallest pointer representation that the compiler can safely use to reference any pointer to a member of a class in a translation unit.","pos":[2182,2374],"source":"The *most-general-representation* argument specifies the smallest pointer representation that the compiler can safely use to reference any pointer to a member of a class in a translation unit."},{"content":"The argument can be one of the following:","pos":[2375,2416]},{"content":"Argument","pos":[2423,2431]},{"content":"Comments","pos":[2432,2440]},{"content":"single_inheritance","pos":[2481,2499]},{"content":"The most general representation is single-inheritance, pointer to a member function.","pos":[2502,2586]},{"content":"Causes an error if the inheritance model of a class definition for which a pointer to a member is declared is ever either multiple or virtual.","pos":[2587,2729]},{"content":"multiple_inheritance","pos":[2736,2756]},{"content":"The most general representation is multiple-inheritance, pointer to a member function.","pos":[2759,2845]},{"content":"Causes an error if the inheritance model of a class definition for which a pointer to a member is declared is virtual.","pos":[2846,2964]},{"content":"virtual_inheritance","pos":[2971,2990]},{"content":"The most general representation is virtual-inheritance, pointer to a member function.","pos":[2993,3078]},{"content":"Never causes an error.","pos":[3079,3101]},{"content":"This is the default argument when <bpt id=\"p1\">**</bpt>#pragma pointers_to_members(full_generality)<ept id=\"p1\">**</ept> is used.","pos":[3102,3193],"source":" This is the default argument when **#pragma pointers_to_members(full_generality)** is used."},{"pos":[3202,3543],"content":"[!CAUTION]\n We advise you to put the `pointers_to_members` pragma only in the source code file that you want to affect, and only after any `#include` directives. This practice lessens the risk that the pragma will affect other files, and that you will accidently specify multiple definitions for the same variable, function, or class name.","leadings":["","> "],"nodes":[{"content":" We advise you to put the `pointers_to_members` pragma only in the source code file that you want to affect, and only after any `#include` directives. This practice lessens the risk that the pragma will affect other files, and that you will accidently specify multiple definitions for the same variable, function, or class name.","pos":[11,339],"nodes":[{"content":"We advise you to put the <ph id=\"ph1\">`pointers_to_members`</ph> pragma only in the source code file that you want to affect, and only after any <ph id=\"ph2\">`#include`</ph> directives.","pos":[1,150],"source":" We advise you to put the `pointers_to_members` pragma only in the source code file that you want to affect, and only after any `#include` directives."},{"content":"This practice lessens the risk that the pragma will affect other files, and that you will accidently specify multiple definitions for the same variable, function, or class name.","pos":[151,328]}]}]},{"content":"Example","pos":[3552,3559]},{"content":"END C++ Specific","pos":[3691,3707]},{"content":"See Also","pos":[3716,3724]},{"content":"Pragma Directives and the __Pragma Keyword","pos":[3729,3771]}],"content":"---\ntitle: \"pointers_to_members | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"pointers_to_members_CPP\"\n  - \"vc-pragma.pointers_to_members\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"class members, pointers to\"\n  - \"pragmas, pointers_to_members\"\n  - \"members, pointers to\"\n  - \"pointers_to_members pragma\"\nms.assetid: 8325428c-c90a-4aed-9e82-cb1dda23f4ca\ncaps.latest.revision: 6\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# pointers_to_members\n**C++ Specific**  \n  \n Specifies whether a pointer to a class member can be declared before its associated class definition and is used to control the pointer size and the code required to interpret the pointer.  \n  \n## Syntax  \n  \n```  \n  \n#pragma pointers_to_members( pointer-declaration, [most-general-representation] )  \n```  \n  \n## Remarks  \n You can place a **pointers_to_members** pragma in your source file as an alternative to using the [/vmx](../build/reference/vmb-vmg-representation-method.md) compiler options or the [inheritance keywords](../cpp/inheritance-keywords.md).  \n  \n The *pointer-declaration* argument specifies whether you have declared a pointer to a member before or after the associated function definition. The *pointer-declaration* argument is one of the following two symbols:  \n  \n|Argument|Comments|  \n|--------------|--------------|  \n|**full_generality**|Generates safe, sometimes nonoptimal code. You use **full_generality** if any pointer to a member is declared before the associated class definition. This argument always uses the pointer representation specified by the *most-general-representation* argument. Equivalent to /vmg.|  \n|**best_case**|Generates safe, optimal code using best-case representation for all pointers to members. Requires defining the class before declaring a pointer to a member of the class. The default is **best_case**.|  \n  \n The *most-general-representation* argument specifies the smallest pointer representation that the compiler can safely use to reference any pointer to a member of a class in a translation unit. The argument can be one of the following:  \n  \n|Argument|Comments|  \n|--------------|--------------|  \n|**single_inheritance**|The most general representation is single-inheritance, pointer to a member function. Causes an error if the inheritance model of a class definition for which a pointer to a member is declared is ever either multiple or virtual.|  \n|**multiple_inheritance**|The most general representation is multiple-inheritance, pointer to a member function. Causes an error if the inheritance model of a class definition for which a pointer to a member is declared is virtual.|  \n|**virtual_inheritance**|The most general representation is virtual-inheritance, pointer to a member function. Never causes an error. This is the default argument when **#pragma pointers_to_members(full_generality)** is used.|  \n  \n> [!CAUTION]\n>  We advise you to put the `pointers_to_members` pragma only in the source code file that you want to affect, and only after any `#include` directives. This practice lessens the risk that the pragma will affect other files, and that you will accidently specify multiple definitions for the same variable, function, or class name.  \n  \n## Example  \n  \n```  \n//   Specify single-inheritance only  \n#pragma pointers_to_members( full_generality, single_inheritance )  \n```  \n  \n## END C++ Specific  \n  \n## See Also  \n [Pragma Directives and the __Pragma Keyword](../preprocessor/pragma-directives-and-the-pragma-keyword.md)"}