{"nodes":[{"pos":[12,55],"content":"CDynamicAccessor::GetValue | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CDynamicAccessor::GetValue | Microsoft Docs","pos":[0,43]}]},{"content":"CDynamicAccessor::GetValue","pos":[875,901]},{"content":"Retrieves the data for a specified column.","pos":[902,944]},{"content":"Syntax","pos":[953,959]},{"content":"Parameters","pos":[1529,1539]},{"content":"[in] A templated parameter that handles any data type except string types (<bpt id=\"p1\">**</bpt>CHAR<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>WCHAR<ph id=\"ph2\">\\*</ph><ept id=\"p2\">**</ept>), which require special handling.","pos":[1554,1686],"source":" [in] A templated parameter that handles any data type except string types (**CHAR\\***, **WCHAR\\***), which require special handling."},{"content":"uses the appropriate data type based on what you specify here.","pos":[1698,1760]},{"content":"[in] The column number.","pos":[1780,1803]},{"content":"Column numbers start with 1.","pos":[1804,1832]},{"content":"A value of 0 refers to the bookmark column, if any.","pos":[1833,1884]},{"content":"[in] The column name.","pos":[1908,1929]},{"content":"[out] The pointer to the contents of the specified column.","pos":[1947,2005]},{"content":"Return Value","pos":[2014,2026]},{"content":"If you want to pass string data, use the nontemplated versions of <ph id=\"ph1\">`GetValue`</ph>.","pos":[2030,2107],"source":"If you want to pass string data, use the nontemplated versions of `GetValue`."},{"content":"The nontemplated versions of this method return <bpt id=\"p1\">**</bpt>void<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>, which points to the part of the buffer that contains the specified column data.","pos":[2108,2247],"source":" The nontemplated versions of this method return **void\\***, which points to the part of the buffer that contains the specified column data."},{"content":"Returns <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if the column is not found.","pos":[2248,2292],"source":" Returns **NULL** if the column is not found."},{"content":"For all other data types, it is simpler to use the templated versions of <ph id=\"ph1\">`GetValue`</ph>.","pos":[2299,2383],"source":"For all other data types, it is simpler to use the templated versions of `GetValue`."},{"content":"The templated versions return <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> on success or <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> on failure.","pos":[2384,2458],"source":" The templated versions return **true** on success or **false** on failure."},{"content":"Remarks","pos":[2467,2474]},{"content":"Use the nontemplated versions to return columns that contain strings and the templated versions for columns that contain other data types.","pos":[2478,2616]},{"pos":[2623,2743],"content":"In debug mode, you will get an assertion if the size of <ph id=\"ph1\">`pData`</ph> is unequal to the size of the column to which it points.","source":"In debug mode, you will get an assertion if the size of `pData` is unequal to the size of the column to which it points."},{"content":"Requirements","pos":[2752,2764]},{"pos":[2768,2790],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atldbcli.h","source":"**Header:** atldbcli.h"},{"content":"See Also","pos":[2799,2807]},{"content":"CDynamicAccessor Class","pos":[2812,2834]}],"content":"---\ntitle: \"CDynamicAccessor::GetValue | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"GetValue\"\n  - \"CDynamicAccessor::GetValue<ctype>\"\n  - \"ATL.CDynamicAccessor.GetValue<ctype>\"\n  - \"CDynamicAccessor.GetValue\"\n  - \"CDynamicAccessor::GetValue\"\n  - \"ATL.CDynamicAccessor.GetValue\"\n  - \"ATL::CDynamicAccessor::GetValue\"\n  - \"ATL::CDynamicAccessor::GetValue<ctype>\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"GetValue method\"\nms.assetid: 553f44af-68bc-4cb6-8774-e0940003fa90\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CDynamicAccessor::GetValue\nRetrieves the data for a specified column.  \n  \n## Syntax  \n  \n```  \n  \n      void* GetValue(   \n   DBORDINAL nColumn    \n) const throw( );  \nvoid* GetValue(  \n   const CHAR* pColumnName   \n) const throw( );  \nvoid* GetValue(  \n   const WCHAR* pColumnName   \n) const throw( );  \ntemplate < class ctype >  \nbool GetValue(  \n   DBORDINAL nColumn,  \n   ctype* pData   \n) const throw( );  \ntemplate < class ctype >  \nbool GetValue(  \n   const CHAR* pColumnName,  \n   ctype* pData   \n) const throw( );  \ntemplate < class ctype >  \nbool GetValue(  \n   const WCHAR* pColumnName,  \n   ctype* pData   \n) const throw( );  \n```  \n  \n#### Parameters  \n `ctype`  \n [in] A templated parameter that handles any data type except string types (**CHAR\\***, **WCHAR\\***), which require special handling. `GetValue` uses the appropriate data type based on what you specify here.  \n  \n `nColumn`  \n [in] The column number. Column numbers start with 1. A value of 0 refers to the bookmark column, if any.  \n  \n `pColumnName`  \n [in] The column name.  \n  \n `pData`  \n [out] The pointer to the contents of the specified column.  \n  \n## Return Value  \n If you want to pass string data, use the nontemplated versions of `GetValue`. The nontemplated versions of this method return **void\\***, which points to the part of the buffer that contains the specified column data. Returns **NULL** if the column is not found.  \n  \n For all other data types, it is simpler to use the templated versions of `GetValue`. The templated versions return **true** on success or **false** on failure.  \n  \n## Remarks  \n Use the nontemplated versions to return columns that contain strings and the templated versions for columns that contain other data types.  \n  \n In debug mode, you will get an assertion if the size of `pData` is unequal to the size of the column to which it points.  \n  \n## Requirements  \n **Header:** atldbcli.h  \n  \n## See Also  \n [CDynamicAccessor Class](../../data/oledb/cdynamicaccessor-class.md)"}