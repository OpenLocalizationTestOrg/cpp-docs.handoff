{"nodes":[{"pos":[12,50],"content":"__if_exists Statement | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"__if_exists Statement | Microsoft Docs","pos":[0,38]}]},{"content":"__if_exists Statement","pos":[728,749]},{"content":"The <ph id=\"ph1\">`__if_exists`</ph> statement tests whether the specified identifier exists.","pos":[750,824],"source":"The `__if_exists` statement tests whether the specified identifier exists."},{"content":"If the identifier exists, the specified statement block is executed.","pos":[825,893]},{"content":"Syntax","pos":[902,908]},{"content":"Parameters","pos":[984,994]},{"content":"Parameter","pos":[1001,1010]},{"content":"Description","pos":[1011,1022]},{"content":"The identifier whose existence you want to test.","pos":[1078,1126]},{"pos":[1144,1201],"content":"One or more statements to execute if <ph id=\"ph1\">`identifier`</ph> exists.","source":"One or more statements to execute if `identifier` exists."},{"content":"Remarks","pos":[1211,1218]},{"pos":[1226,1342],"content":"[!CAUTION]\n To achieve the most reliable results, use the `__if_exists` statement under the following constraints.","leadings":["","> "],"nodes":[{"content":"To achieve the most reliable results, use the <ph id=\"ph1\">`__if_exists`</ph> statement under the following constraints.","pos":[12,114],"source":" To achieve the most reliable results, use the `__if_exists` statement under the following constraints."}]},{"pos":[1352,1422],"content":"Apply the <ph id=\"ph1\">`__if_exists`</ph> statement to only simple types, not templates.","source":"Apply the `__if_exists` statement to only simple types, not templates."},{"content":"Apply the <ph id=\"ph1\">`__if_exists`</ph> statement to identifiers both inside or outside a class.","pos":[1432,1512],"source":"Apply the `__if_exists` statement to identifiers both inside or outside a class."},{"content":"Do not apply the <ph id=\"ph1\">`__if_exists`</ph> statement to local variables.","pos":[1513,1573],"source":" Do not apply the `__if_exists` statement to local variables."},{"content":"Use the <ph id=\"ph1\">`__if_exists`</ph> statement only in the body of a function.","pos":[1583,1646],"source":"Use the `__if_exists` statement only in the body of a function."},{"content":"Outside of the body of a function, the <ph id=\"ph1\">`__if_exists`</ph> statement can test only fully defined types.","pos":[1647,1744],"source":" Outside of the body of a function, the `__if_exists` statement can test only fully defined types."},{"content":"When you test for overloaded functions, you cannot test for a specific form of the overload.","pos":[1754,1846]},{"pos":[1853,1969],"content":"The complement to the <ph id=\"ph1\">`__if_exists`</ph> statement is the <bpt id=\"p1\">[</bpt>__if_not_exists<ept id=\"p1\">](../cpp/if-not-exists-statement.md)</ept> statement.","source":"The complement to the `__if_exists` statement is the [__if_not_exists](../cpp/if-not-exists-statement.md) statement."},{"content":"Example","pos":[1978,1985]},{"content":"Notice that this example uses templates, which is not advised.","pos":[1989,2051]},{"content":"Output","pos":[2984,2990]},{"content":"See Also","pos":[3118,3126]},{"content":"Selection Statements","pos":[3131,3151]},{"content":"Keywords","pos":[3194,3202]},{"content":"__if_not_exists Statement","pos":[3233,3258]}],"content":"---\ntitle: \"__if_exists Statement | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"__if_exists_cpp\"\n  - \"__if_exists\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"identifiers, testing for existence\"\n  - \"symbols, testing for existence\"\n  - \"__if_exists keyword [C++]\"\nms.assetid: d3eb34b6-f3a9-4063-a286-b62a28c0c7fa\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# __if_exists Statement\nThe `__if_exists` statement tests whether the specified identifier exists. If the identifier exists, the specified statement block is executed.  \n  \n## Syntax  \n  \n```  \n__if_exists ( identifier ) {   \nstatements  \n};  \n```  \n  \n#### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`identifier`|The identifier whose existence you want to test.|  \n|`statements`|One or more statements to execute if `identifier` exists.|  \n  \n## Remarks  \n  \n> [!CAUTION]\n>  To achieve the most reliable results, use the `__if_exists` statement under the following constraints.  \n  \n-   Apply the `__if_exists` statement to only simple types, not templates.  \n  \n-   Apply the `__if_exists` statement to identifiers both inside or outside a class. Do not apply the `__if_exists` statement to local variables.  \n  \n-   Use the `__if_exists` statement only in the body of a function. Outside of the body of a function, the `__if_exists` statement can test only fully defined types.  \n  \n-   When you test for overloaded functions, you cannot test for a specific form of the overload.  \n  \n The complement to the `__if_exists` statement is the [__if_not_exists](../cpp/if-not-exists-statement.md) statement.  \n  \n## Example  \n Notice that this example uses templates, which is not advised.  \n  \n```  \n// the__if_exists_statement.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \ntemplate<typename T>  \nclass X : public T {  \npublic:  \n   void Dump() {  \n      std::cout << \"In X<T>::Dump()\" << std::endl;  \n  \n      __if_exists(T::Dump) {  \n         T::Dump();  \n      }  \n  \n      __if_not_exists(T::Dump) {  \n         std::cout << \"T::Dump does not exist\" << std::endl;  \n      }  \n   }     \n};  \n  \nclass A {  \npublic:  \n   void Dump() {  \n      std::cout << \"In A::Dump()\" << std::endl;  \n   }  \n};  \n  \nclass B {};  \n  \nbool g_bFlag = true;  \n  \nclass C {  \npublic:  \n   void f(int);  \n   void f(double);  \n};  \n  \nint main() {   \n   X<A> x1;  \n   X<B> x2;  \n  \n   x1.Dump();  \n   x2.Dump();  \n  \n   __if_exists(::g_bFlag) {  \n      std::cout << \"g_bFlag = \" << g_bFlag << std::endl;  \n   }  \n  \n   __if_exists(C::f) {  \n      std::cout << \"C::f exists\" << std::endl;  \n   }  \n  \n   return 0;  \n}  \n```  \n  \n## Output  \n  \n```  \nIn X<T>::Dump()  \nIn A::Dump()  \nIn X<T>::Dump()  \nT::Dump does not exist  \ng_bFlag = 1  \nC::f exists  \n```  \n  \n## See Also  \n [Selection Statements](../cpp/selection-statements-cpp.md)   \n [Keywords](../cpp/keywords-cpp.md)   \n [__if_not_exists Statement](../cpp/if-not-exists-statement.md)"}