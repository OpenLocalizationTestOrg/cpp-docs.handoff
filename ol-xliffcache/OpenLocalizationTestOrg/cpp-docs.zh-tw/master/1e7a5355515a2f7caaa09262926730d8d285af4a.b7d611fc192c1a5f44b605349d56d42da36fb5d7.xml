{"nodes":[{"pos":[12,51],"content":"list::unique (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"list::unique (STL-CLR) | Microsoft Docs","pos":[0,39]}]},{"content":"list::unique (STL/CLR)","pos":[627,649]},{"content":"Removes adjacent elements that pass a specified test.","pos":[650,703]},{"content":"Syntax","pos":[712,718]},{"content":"Parameters","pos":[819,829]},{"content":"pred","pos":[833,837]},{"content":"Comparer for element pairs.","pos":[841,868]},{"content":"Remarks","pos":[877,884]},{"content":"The first member function removes from the controlled sequence (erases) every element that compares equal to its preceding element -- if element <ph id=\"ph1\">`X`</ph> precedes element <ph id=\"ph2\">`Y`</ph> and <ph id=\"ph3\">`X == Y`</ph>, the member function removes <ph id=\"ph4\">`Y`</ph>.","pos":[888,1104],"source":"The first member function removes from the controlled sequence (erases) every element that compares equal to its preceding element -- if element `X` precedes element `Y` and `X == Y`, the member function removes `Y`."},{"content":"You use it to remove all but one copy of every subsequence of adjacent elements that compare equal.","pos":[1105,1204]},{"content":"Note that if the controlled sequence is ordered, such as by calling <bpt id=\"p1\">[</bpt>list::sort (STL/CLR)<ept id=\"p1\">](../dotnet/list-sort-stl-clr.md)</ept><ph id=\"ph1\">`()`</ph>, the member function leaves only elements with unique values.","pos":[1205,1393],"source":" Note that if the controlled sequence is ordered, such as by calling [list::sort (STL/CLR)](../dotnet/list-sort-stl-clr.md)`()`, the member function leaves only elements with unique values."},{"content":"(Hence the name).","pos":[1394,1411]},{"content":"The second member function behaves the same as the first, except that it removes each element <ph id=\"ph1\">`Y`</ph> following an element <ph id=\"ph2\">`X`</ph> for which <ph id=\"ph3\">`pred``(X, Y)`</ph>.","pos":[1418,1566],"source":"The second member function behaves the same as the first, except that it removes each element `Y` following an element `X` for which `pred``(X, Y)`."},{"content":"You use it to remove all but one copy of every subsequence of adjacent elements that satisfy a predicate function or delegate that you specify.","pos":[1567,1710]},{"content":"Note that if the controlled sequence is ordered, such as by calling <ph id=\"ph1\">`sort(``pred``)`</ph>, the member function leaves only elements that do not have equivalent ordering with any other elements.","pos":[1711,1899],"source":" Note that if the controlled sequence is ordered, such as by calling `sort(``pred``)`, the member function leaves only elements that do not have equivalent ordering with any other elements."},{"content":"Example","pos":[1908,1915]},{"content":"Requirements","pos":[2891,2903]},{"pos":[2907,2933],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/list&gt;","source":"**Header:** \\<cliext/list>"},{"pos":[2940,2961],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2970,2978]},{"content":"list (STL/CLR)","pos":[2983,2997]},{"content":"list::remove (STL/CLR)","pos":[3031,3053]},{"content":"list::remove_if (STL/CLR)","pos":[3094,3119]},{"content":"list::sort (STL/CLR)","pos":[3163,3183]}],"content":"---\ntitle: \"list::unique (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::list::unique\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"unique member [STL/CLR]\"\nms.assetid: c3a29e4e-0ec1-4472-b050-7a9511037132\ncaps.latest.revision: 17\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# list::unique (STL/CLR)\nRemoves adjacent elements that pass a specified test.  \n  \n## Syntax  \n  \n```  \nvoid unique();  \ntemplate<typename Pred2>  \n    void unique(Pred2 pred);  \n```  \n  \n#### Parameters  \n pred  \n Comparer for element pairs.  \n  \n## Remarks  \n The first member function removes from the controlled sequence (erases) every element that compares equal to its preceding element -- if element `X` precedes element `Y` and `X == Y`, the member function removes `Y`. You use it to remove all but one copy of every subsequence of adjacent elements that compare equal. Note that if the controlled sequence is ordered, such as by calling [list::sort (STL/CLR)](../dotnet/list-sort-stl-clr.md)`()`, the member function leaves only elements with unique values. (Hence the name).  \n  \n The second member function behaves the same as the first, except that it removes each element `Y` following an element `X` for which `pred``(X, Y)`. You use it to remove all but one copy of every subsequence of adjacent elements that satisfy a predicate function or delegate that you specify. Note that if the controlled sequence is ordered, such as by calling `sort(``pred``)`, the member function leaves only elements that do not have equivalent ordering with any other elements.  \n  \n## Example  \n  \n```  \n// cliext_list_unique.cpp   \n// compile with: /clr   \n#include <cliext/list>   \n  \nint main()   \n    {   \n    cliext::list<wchar_t> c1;   \n    c1.push_back(L'a');   \n    c1.push_back(L'a');   \n    c1.push_back(L'b');   \n    c1.push_back(L'c');   \n  \n// display initial contents \" a a b c\"   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// display contents after unique   \n    cliext::list<wchar_t> c2(c1);   \n    c2.unique();   \n    for each (wchar_t elem in c2)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// display contents after unique(not_equal_to)   \n    c2 = c1;   \n    c2.unique(cliext::not_equal_to<wchar_t>());   \n    for each (wchar_t elem in c2)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \na a b c  \na b c  \na a  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/list>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [list (STL/CLR)](../dotnet/list-stl-clr.md)   \n [list::remove (STL/CLR)](../dotnet/list-remove-stl-clr.md)   \n [list::remove_if (STL/CLR)](../dotnet/list-remove-if-stl-clr.md)   \n [list::sort (STL/CLR)](../dotnet/list-sort-stl-clr.md)"}