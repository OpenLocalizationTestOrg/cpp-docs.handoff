{"nodes":[{"pos":[12,60],"content":"hash_set::key_compare (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"hash_set::key_compare (STL-CLR) | Microsoft Docs","pos":[0,48]}]},{"content":"hash_set::key_compare (STL/CLR)","pos":[650,681]},{"content":"The ordering delegate for two keys.","pos":[682,717]},{"content":"Syntax","pos":[726,732]},{"content":"Remarks","pos":[838,845]},{"content":"The type is a synonym for the delegate that determines the ordering of its key arguments.","pos":[849,938]},{"content":"Example","pos":[947,954]},{"content":"Requirements","pos":[2182,2194]},{"pos":[2198,2228],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/hash_set&gt;","source":"**Header:** \\<cliext/hash_set>"},{"pos":[2235,2256],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2265,2273]},{"content":"hash_set (STL/CLR)","pos":[2278,2296]},{"content":"hash_set::key_comp (STL/CLR)","pos":[2334,2362]},{"content":"hash_set::key_type (STL/CLR)","pos":[2409,2437]},{"content":"hash_set::value_compare (STL/CLR)","pos":[2484,2517]}],"content":"---\ntitle: \"hash_set::key_compare (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::hash_set::key_compare\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"key_compare member [STL/CLR]\"\nms.assetid: 93a94dde-3296-4e34-b461-3e2a20801041\ncaps.latest.revision: 17\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# hash_set::key_compare (STL/CLR)\nThe ordering delegate for two keys.  \n  \n## Syntax  \n  \n```  \nMicrosoft::VisualC::StlClr::BinaryDelegate<GKey, GKey, bool>  \n    key_compare;  \n```  \n  \n## Remarks  \n The type is a synonym for the delegate that determines the ordering of its key arguments.  \n  \n## Example  \n  \n```  \n// cliext_hash_set_key_compare.cpp   \n// compile with: /clr   \n#include <cliext/hash_set>   \n  \ntypedef cliext::hash_set<wchar_t> Myhash_set;   \nint main()   \n    {   \n    Myhash_set c1;   \n    Myhash_set::key_compare^ kcomp = c1.key_comp();   \n  \n    System::Console::WriteLine(\"compare(L'a', L'a') = {0}\",   \n        kcomp(L'a', L'a'));   \n    System::Console::WriteLine(\"compare(L'a', L'b') = {0}\",   \n        kcomp(L'a', L'b'));   \n    System::Console::WriteLine(\"compare(L'b', L'a') = {0}\",   \n        kcomp(L'b', L'a'));   \n    System::Console::WriteLine();   \n  \n// test a different ordering rule   \n    Myhash_set c2 = cliext::greater<wchar_t>();   \n    kcomp = c2.key_comp();   \n  \n    System::Console::WriteLine(\"compare(L'a', L'a') = {0}\",   \n        kcomp(L'a', L'a'));   \n    System::Console::WriteLine(\"compare(L'a', L'b') = {0}\",   \n        kcomp(L'a', L'b'));   \n    System::Console::WriteLine(\"compare(L'b', L'a') = {0}\",   \n        kcomp(L'b', L'a'));   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \ncompare(L'a', L'a') = True  \ncompare(L'a', L'b') = True  \ncompare(L'b', L'a') = False  \n  \ncompare(L'a', L'a') = False  \ncompare(L'a', L'b') = False  \ncompare(L'b', L'a') = True  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/hash_set>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [hash_set (STL/CLR)](../dotnet/hash-set-stl-clr.md)   \n [hash_set::key_comp (STL/CLR)](../dotnet/hash-set-key-comp-stl-clr.md)   \n [hash_set::key_type (STL/CLR)](../dotnet/hash-set-key-type-stl-clr.md)   \n [hash_set::value_compare (STL/CLR)](../dotnet/hash-set-value-compare-stl-clr.md)"}