<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2de94609ee93769e7bb319afd25d59d6feb3bac4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\event.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ec3a23474965f2bdecf8270f002510c93340e4b2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8ff150cec8d8b6474aaf9ce4b6e9fa765d337f18</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>__event | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>__event</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Declares an event.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The keyword <ph id="ph1">`__event`</ph> can be applied to a method declaration, an interface declaration, or a data member declaration.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>However, you cannot use the <ph id="ph1">`__event`</ph> keyword to qualify a member of a nested class.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Depending on whether your event source and receiver are native C++, COM, or managed (.NET Framework), you can use the following constructs as events:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Native C++</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>COM</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Managed (.NET Framework)</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Method</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>—</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>method</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>—</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>interface</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>—</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>—</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>—</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>data member</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>__hook<ept id="p1">](../cpp/hook.md)</ept> in an event receiver to associate a handler method with an event method.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Note that after you create an event with the <ph id="ph1">`__event`</ph> keyword, all event handlers subsequently hooked to that event will be called when the event is called.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`__event`</ph> method declaration cannot have a definition; a definition is implicitly generated, so the event method can be called as if it were any ordinary method.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A templated class or struct cannot contain events.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Native Events</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Native events are methods.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The return type is typically <ph id="ph1">`HRESULT`</ph> or <ph id="ph2">`void`</ph>, but can be any integral type, including an <ph id="ph3">`enum`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When an event uses an integral return type, an error condition is defined when an event handler returns a nonzero value, in which case the event being raised will call the other delegates.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Event Handling in Native C++<ept id="p1">](../cpp/event-handling-in-native-cpp.md)</ept> for sample code.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>COM Events</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>COM events are interfaces.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The parameters of a method in an event source interface should be <bpt id="p1">**</bpt>in<ept id="p1">**</ept> parameters (but this is not rigorously enforced), because an <bpt id="p2">**</bpt>out<ept id="p2">**</ept> parameter is not useful when multicasting.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A level 1 warning will be issued if you use an <bpt id="p1">**</bpt>out<ept id="p1">**</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The return type is typically <ph id="ph1">`HRESULT`</ph> or <ph id="ph2">`void`</ph>, but can be any integral type, including <ph id="ph3">`enum`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When an event uses an integral return type and an event handler returns a nonzero value, it is an error condition, in which case the event being raised aborts calls to the other delegates.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Note that the compiler will automatically mark an event source interface as a <bpt id="p1">[</bpt>source<ept id="p1">](../windows/source-cpp.md)</ept> in the generated IDL.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>__interface<ept id="p1">](../cpp/interface.md)</ept> keyword is always required after <ph id="ph1">`__event`</ph> for a COM event source.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Event Handling in COM<ept id="p1">](../cpp/event-handling-in-com.md)</ept> for sample code.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Managed Events</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For information on coding events in the new syntax, see <bpt id="p1">[</bpt>event<ept id="p1">](../windows/event-cpp-component-extensions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Managed events are data members or methods.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>When used with an event, the return type of a delegate must be compliant with the <bpt id="p1">[</bpt>Common Language Specification<ept id="p1">](http://msdn.microsoft.com/Library/4f0b77d0-4844-464f-af73-6e06bedeafc6)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The return type of the event handler must match the return type of the delegate.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For more information on delegates, see <bpt id="p1">[</bpt>Delegates and Events<ept id="p1">](../dotnet/delegates-and-events.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If a managed event is a data member, its type must be a pointer to a delegate.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In the .NET Framework, you can treat a data member as if it were a method itself (that is, the <ph id="ph1">`Invoke`</ph> method of its corresponding delegate).</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You must predefine the delegate type for declaring a managed event data member.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In contrast, a managed event method implicitly defines the corresponding managed delegate if it is not already defined.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example, you can declare an event value such as <ph id="ph1">`OnClick`</ph> as an event as follows:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>When implicitly declaring a managed event, you can specify add and remove accessors that will be called when event handlers are added or removed.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can also define the method that calls (raises) the event from outside the class.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Example: Native Events</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Example: COM Events</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Keywords</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Event Handling</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>event_source</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>event_receiver</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>__hook</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>__unhook</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>__raise</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>