<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f730388cc71bce6a00328b97fad8dbd675b4008e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\using-generic-text-mappings.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c0154b48679587dbb36595303e534d62ffc3a01b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1618672a1e4f77a23bda26b87e8fa058f90a3ef3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using Generic-Text Mappings | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using Generic-Text Mappings</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>To simplify code development for various international markets, the Microsoft run-time library provides Microsoft-specific "generic-text" mappings for many data types, routines, and other objects.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>These mappings are defined in TCHAR.H.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can use these name mappings to write generic code that can be compiled for any of the three kinds of character sets: ASCII (SBCS), MBCS, or Unicode, depending on a manifest constant you define using a <ph id="ph1">`#define`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Generic-text mappings are Microsoft extensions that are not ANSI compatible.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Preprocessor Directives for Generic-Text Mappings</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>define</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Compiled version</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Unicode (wide-character)</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>maps to</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Multibyte-character</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>maps to</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>None (the default: neither <ph id="ph1">`_UNICODE`</ph> nor <ph id="ph2">`_MBCS`</ph> defined)</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>SBCS (ASCII)</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>maps to</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, the generic-text function <ph id="ph1">`_tcsrev`</ph>, defined in TCHAR.H, maps to <ph id="ph2">`mbsrev`</ph> if <ph id="ph3">`MBCS`</ph> has been defined in your program, or to <ph id="ph4">`_wcsrev`</ph> if <ph id="ph5">`_UNICODE`</ph> has been defined.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Otherwise <ph id="ph1">`_tcsrev`</ph> maps to <ph id="ph2">`strrev`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The generic-text data type <ph id="ph1">`_TCHAR`</ph>, also defined in TCHAR.H, maps to type <ph id="ph2">`char`</ph> if <ph id="ph3">`_MBCS`</ph> is defined, to type <ph id="ph4">`wchar_t`</ph> if <ph id="ph5">`_UNICODE`</ph> is defined, and to type <ph id="ph6">`char`</ph> if neither constant is defined.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Other data type mappings are provided in TCHAR.H for programming convenience, but <ph id="ph1">`_TCHAR`</ph> is the type that is most useful.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Generic-Text Data Type Mappings</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Generic-text data type name</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>SBCS (_UNICODE, _MBCS not defined)</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>_MBCS defined</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>_UNICODE defined</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>or</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>No effect (removed by preprocessor)</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>No effect (removed by preprocessor)</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>(converts following character or string to its Unicode counterpart)</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For a complete list of generic-text mappings of routines, variables, and other objects, see <bpt id="p1">[</bpt>Generic-Text Mappings<ept id="p1">](../c-runtime-library/generic-text-mappings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following code fragments illustrate the use of <ph id="ph1">`_TCHAR`</ph> and <ph id="ph2">`_tcsrev`</ph> for mapping to the MBCS, Unicode, and SBCS models.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`MBCS`</ph> has been defined, the preprocessor maps the preceding fragment to the following code:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`_UNICODE`</ph> has been defined, the preprocessor maps the same fragment to the following code:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If neither <ph id="ph1">`_MBCS`</ph> nor <ph id="ph2">`_UNICODE`</ph> has been defined, the preprocessor maps the fragment to single-byte ASCII code, as follows:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Thus you can write, maintain, and compile a single source code file to run with routines that are specific to any of the three kinds of character sets.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Generic-Text Mappings</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Data Type Mappings</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Constant and Global Variable Mappings</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Routine Mappings</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A Sample Generic-Text Program</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>