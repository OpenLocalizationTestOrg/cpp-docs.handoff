{"nodes":[{"pos":[12,41],"content":"struct (C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"struct (C++) | Microsoft Docs","pos":[0,29]}]},{"content":"struct (C++)","pos":[624,636]},{"pos":[637,721],"content":"The <ph id=\"ph1\">`struct`</ph> keyword defines a structure type and/or a variable of a structure type.","source":"The `struct` keyword defines a structure type and/or a variable of a structure type."},{"content":"Syntax","pos":[730,736]},{"content":"Parameters","pos":[892,902]},{"content":"Optional template specifications.","pos":[925,958]},{"content":"For more information, refer to <bpt id=\"p1\">[</bpt>Template Specifications<ept id=\"p1\">](templates-cpp.md)</ept>.","pos":[959,1034],"source":" For more information, refer to [Template Specifications](templates-cpp.md)."},{"content":"The <ph id=\"ph1\">`struct`</ph> keyword.","pos":[1053,1074],"source":" The `struct` keyword."},{"content":"Optional storage-class specification.","pos":[1099,1136]},{"content":"For more information, refer to the <bpt id=\"p1\">[</bpt>__declspec<ept id=\"p1\">](../cpp/declspec.md)</ept> keyword.","pos":[1137,1213],"source":" For more information, refer to the [__declspec](../cpp/declspec.md) keyword."},{"content":"The type name given to the structure.","pos":[1229,1266]},{"content":"The tag becomes a reserved word within the scope of the structure.","pos":[1267,1333]},{"content":"The tag is optional.","pos":[1334,1354]},{"content":"If omitted, an anonymous structure is defined.","pos":[1355,1401]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Anonymous Class Types<ept id=\"p1\">](../cpp/anonymous-class-types.md)</ept>.","pos":[1402,1485],"source":" For more information, see [Anonymous Class Types](../cpp/anonymous-class-types.md)."},{"content":"Optional list of classes or structures this structure will derive its members from.","pos":[1507,1590]},{"content":"See <bpt id=\"p1\">[</bpt>Base Classes<ept id=\"p1\">](../cpp/base-classes.md)</ept> for more information.","pos":[1591,1655],"source":" See [Base Classes](../cpp/base-classes.md) for more information."},{"content":"Each base class or structure name can be preceded by an access specifier (<bpt id=\"p1\">[</bpt>public<ept id=\"p1\">](../cpp/public-cpp.md)</ept>, <bpt id=\"p2\">[</bpt>private<ept id=\"p2\">](../cpp/private-cpp.md)</ept>, <bpt id=\"p3\">[</bpt>protected<ept id=\"p3\">](../cpp/protected-cpp.md)</ept>) and the <bpt id=\"p4\">[</bpt>virtual<ept id=\"p4\">](../cpp/virtual-cpp.md)</ept> keyword.","pos":[1656,1883],"source":" Each base class or structure name can be preceded by an access specifier ([public](../cpp/public-cpp.md), [private](../cpp/private-cpp.md), [protected](../cpp/protected-cpp.md)) and the [virtual](../cpp/virtual-cpp.md) keyword."},{"content":"See the member-access table in <bpt id=\"p1\">[</bpt>Controlling Access to Class Members<ept id=\"p1\">](member-access-control-cpp.md)</ept> for more information.","pos":[1884,2004],"source":" See the member-access table in [Controlling Access to Class Members](member-access-control-cpp.md) for more information."},{"content":"List of structure members.","pos":[2028,2054]},{"content":"Refer to <bpt id=\"p1\">[</bpt>Class Member Overview<ept id=\"p1\">](../cpp/class-member-overview.md)</ept> for more information.","pos":[2055,2142],"source":" Refer to [Class Member Overview](../cpp/class-member-overview.md) for more information."},{"content":"The only difference here is that <ph id=\"ph1\">`struct`</ph> is used in place of <ph id=\"ph2\">`class`</ph>.","pos":[2143,2213],"source":" The only difference here is that `struct` is used in place of `class`."},{"content":"Declarator list specifying the names of the class.","pos":[2237,2287]},{"content":"Declarator lists declare one or more instances of the structure type.","pos":[2288,2357]},{"content":"Declarators may include initializer lists if all data members of the class are <ph id=\"ph1\">`public`</ph>.","pos":[2358,2446],"source":" Declarators may include initializer lists if all data members of the class are `public`."},{"content":"Initializer lists are common in structures because data members are <ph id=\"ph1\">`public`</ph> by default.","pos":[2447,2535],"source":" Initializer lists are common in structures because data members are `public` by default."},{"content":"See <bpt id=\"p1\">[</bpt>Overview of Declarators<ept id=\"p1\">](../cpp/overview-of-declarators.md)</ept> for more information.","pos":[2537,2623],"source":"  See [Overview of Declarators](../cpp/overview-of-declarators.md) for more information."},{"content":"Remarks","pos":[2632,2639]},{"content":"A structure type is a user-defined composite type.","pos":[2643,2693]},{"content":"It is composed of fields or members that can have different types.","pos":[2694,2760]},{"pos":[2767,2858],"content":"In C++, a structure is the same as a class except that its members are <ph id=\"ph1\">`public`</ph> by default.","source":"In C++, a structure is the same as a class except that its members are `public` by default."},{"pos":[2865,2999],"content":"For information on managed classes and structs, see <bpt id=\"p1\">[</bpt>Classes and Structs<ept id=\"p1\">](../windows/classes-and-structs-cpp-component-extensions.md)</ept>.","source":"For information on managed classes and structs, see [Classes and Structs](../windows/classes-and-structs-cpp-component-extensions.md)."},{"content":"Using a Structure","pos":[3008,3025]},{"content":"In C, you must explicitly use the <ph id=\"ph1\">`struct`</ph> keyword to declare a structure.","pos":[3029,3103],"source":"In C, you must explicitly use the `struct` keyword to declare a structure."},{"content":"In C++, you do not need to use the <ph id=\"ph1\">`struct`</ph> keyword after the type has been defined.","pos":[3104,3188],"source":" In C++, you do not need to use the `struct` keyword after the type has been defined."},{"content":"You have the option of declaring variables when the structure type is defined by placing one or more comma-separated variable names between the closing brace and the semicolon.","pos":[3195,3371]},{"content":"Structure variables can be initialized.","pos":[3378,3417]},{"content":"The initialization for each variable must be enclosed in braces.","pos":[3418,3482]},{"pos":[3489,3614],"content":"For related information, see <bpt id=\"p1\">[</bpt>class<ept id=\"p1\">](../cpp/class-cpp.md)</ept>, <bpt id=\"p2\">[</bpt>union<ept id=\"p2\">](../cpp/unions.md)</ept>, and <bpt id=\"p3\">[</bpt>enum<ept id=\"p3\">](../cpp/enumerations-cpp.md)</ept>.","source":"For related information, see [class](../cpp/class-cpp.md), [union](../cpp/unions.md), and [enum](../cpp/enumerations-cpp.md)."},{"content":"Example","pos":[3623,3630]}],"content":"---\ntitle: \"struct (C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"struct\"\n  - \"struct_cpp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"struct constructors\"\nms.assetid: 3c6ba273-e248-4ff1-8c69-d2abcf1263c6\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# struct (C++)\nThe `struct` keyword defines a structure type and/or a variable of a structure type.  \n  \n## Syntax  \n  \n```  \n[template-spec] struct[ms-decl-spec] [tag [: base-list ]]  \n{   \n   member-list   \n} [declarators];  \n[struct] tag declarators;  \n```  \n  \n#### Parameters  \n `template-spec`  \n Optional template specifications. For more information, refer to [Template Specifications](templates-cpp.md).  \n  \n `struct`  \n The `struct` keyword.  \n  \n `ms-decl-spec`  \n Optional storage-class specification. For more information, refer to the [__declspec](../cpp/declspec.md) keyword.  \n  \n `tag`  \n The type name given to the structure. The tag becomes a reserved word within the scope of the structure. The tag is optional. If omitted, an anonymous structure is defined. For more information, see [Anonymous Class Types](../cpp/anonymous-class-types.md).  \n  \n `base-list`  \n Optional list of classes or structures this structure will derive its members from. See [Base Classes](../cpp/base-classes.md) for more information. Each base class or structure name can be preceded by an access specifier ([public](../cpp/public-cpp.md), [private](../cpp/private-cpp.md), [protected](../cpp/protected-cpp.md)) and the [virtual](../cpp/virtual-cpp.md) keyword. See the member-access table in [Controlling Access to Class Members](member-access-control-cpp.md) for more information.  \n  \n `member-list`  \n List of structure members. Refer to [Class Member Overview](../cpp/class-member-overview.md) for more information. The only difference here is that `struct` is used in place of `class`.  \n  \n `declarators`  \n Declarator list specifying the names of the class. Declarator lists declare one or more instances of the structure type. Declarators may include initializer lists if all data members of the class are `public`. Initializer lists are common in structures because data members are `public` by default.  See [Overview of Declarators](../cpp/overview-of-declarators.md) for more information.  \n  \n## Remarks  \n A structure type is a user-defined composite type. It is composed of fields or members that can have different types.  \n  \n In C++, a structure is the same as a class except that its members are `public` by default.  \n  \n For information on managed classes and structs, see [Classes and Structs](../windows/classes-and-structs-cpp-component-extensions.md).  \n  \n## Using a Structure  \n In C, you must explicitly use the `struct` keyword to declare a structure. In C++, you do not need to use the `struct` keyword after the type has been defined.  \n  \n You have the option of declaring variables when the structure type is defined by placing one or more comma-separated variable names between the closing brace and the semicolon.  \n  \n Structure variables can be initialized. The initialization for each variable must be enclosed in braces.  \n  \n For related information, see [class](../cpp/class-cpp.md), [union](../cpp/unions.md), and [enum](../cpp/enumerations-cpp.md).  \n  \n## Example  \n  \n```  \n#include <iostream>  \nusing namespace std;  \n  \nstruct PERSON {   // Declare PERSON struct type  \n    int age;   // Declare member types  \n    long ss;  \n    float weight;  \n    char name[25];  \n} family_member;   // Define object of type PERSON  \n  \nstruct CELL {   // Declare CELL bit field  \n    unsigned short character  : 8;  // 00000000 ????????  \n    unsigned short foreground : 3;  // 00000??? 00000000  \n    unsigned short intensity  : 1;  // 0000?000 00000000  \n    unsigned short background : 3;  // 0???0000 00000000  \n    unsigned short blink      : 1;  // ?0000000 00000000  \n} screen[25][80];       // Array of bit fields   \n  \nint main() {  \n    struct PERSON sister;   // C style structure declaration  \n    PERSON brother;   // C++ style structure declaration  \n    sister.age = 13;   // assign values to members  \n    brother.age = 7;  \n    cout << \"sister.age = \" << sister.age << '\\n';  \n    cout << \"brother.age = \" << brother.age << '\\n';  \n  \n    CELL my_cell;  \n    my_cell.character = 1;  \n    cout << \"my_cell.character = \" << my_cell.character;  \n}  \n// Output:  \n// sister.age = 13  \n// brother.age = 7  \n// my_cell.character = 1  \n```  \n  \n"}