{"nodes":[{"pos":[12,79],"content":"strerror_s, _strerror_s, _wcserror_s, __wcserror_s | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"strerror_s, _strerror_s, _wcserror_s, __wcserror_s | Microsoft Docs","pos":[0,67]}]},{"content":"strerror_s, _strerror_s, _wcserror_s, __wcserror_s","pos":[1373,1423]},{"content":"Get a system error message (<ph id=\"ph1\">`strerror_s`</ph>, <ph id=\"ph2\">`_wcserror_s`</ph>) or print a user-supplied error message (<ph id=\"ph3\">`_strerror_s`</ph>, <ph id=\"ph4\">`__wcserror_s`</ph>).","pos":[1424,1552],"source":"Get a system error message (`strerror_s`, `_wcserror_s`) or print a user-supplied error message (`_strerror_s`, `__wcserror_s`)."},{"content":"These are versions of <bpt id=\"p1\">[</bpt>strerror, _strerror, _wcserror, <ph id=\"ph1\">\\_</ph>_wcserror<ept id=\"p1\">](../../c-runtime-library/reference/strerror-strerror-wcserror-wcserror.md)</ept> with security enhancements as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1553,1826],"source":" These are versions of [strerror, _strerror, _wcserror, \\__wcserror](../../c-runtime-library/reference/strerror-strerror-wcserror-wcserror.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"content":"Syntax","pos":[1835,1841]},{"content":"Parameters","pos":[2741,2751]},{"content":"Buffer to hold error string.","pos":[2767,2795]},{"content":"Size of buffer.","pos":[2824,2839]},{"content":"Error number.","pos":[2858,2871]},{"content":"User-supplied message.","pos":[2893,2915]},{"content":"Return Value","pos":[2924,2936]},{"content":"Zero if successful, an error code on failure.","pos":[2940,2985]},{"content":"Error Condtions","pos":[2995,3010]},{"pos":[3057,3068],"content":"Contents of"},{"content":"any","pos":[3178,3181]},{"content":"any","pos":[3182,3185]},{"content":"n/a","pos":[3186,3189]},{"content":"any","pos":[3194,3197]},{"content":"0","pos":[3198,3199]},{"content":"any","pos":[3200,3203]},{"content":"not modified","pos":[3204,3216]},{"content":"Remarks","pos":[3226,3233]},{"content":"The <ph id=\"ph1\">`strerror_s`</ph> function maps <ph id=\"ph2\">`errnum`</ph> to an error-message string, returning the string in <ph id=\"ph3\">`buffer`</ph>.","pos":[3237,3338],"source":"The `strerror_s` function maps `errnum` to an error-message string, returning the string in `buffer`."},{"content":"doesn't take the error number; it uses the current value of <ph id=\"ph1\">`errno`</ph> to determine the appropriate message.","pos":[3353,3458],"source":" doesn't take the error number; it uses the current value of `errno` to determine the appropriate message."},{"content":"Neither <ph id=\"ph1\">`strerror_s`</ph> nor <ph id=\"ph2\">`_strerror_s`</ph> actually prints the message: For that, you need to call an output function such as <bpt id=\"p1\">[</bpt>fprintf<ept id=\"p1\">](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)</ept>:","pos":[3459,3667],"source":" Neither `strerror_s` nor `_strerror_s` actually prints the message: For that, you need to call an output function such as [fprintf](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md):"},{"content":"If <ph id=\"ph1\">`strErrMsg`</ph> is <ph id=\"ph2\">`NULL`</ph>, <ph id=\"ph3\">`_strerror_s`</ph> returns a string in <ph id=\"ph4\">`buffer`</ph> containing the system error message for the last library call that produced an error.","pos":[3800,3954],"source":"If `strErrMsg` is `NULL`, `_strerror_s` returns a string in `buffer` containing the system error message for the last library call that produced an error."},{"content":"The error-message string is terminated by the newline character ('\\n').","pos":[3955,4026]},{"content":"If <ph id=\"ph1\">`strErrMsg`</ph> is not equal to <ph id=\"ph2\">`NULL`</ph>, then <ph id=\"ph3\">`_strerror_s`</ph> returns a string in <ph id=\"ph4\">`buffer`</ph> containing (in order) your string message, a colon, a space, the system error message for the last library call producing an error, and a newline character.","pos":[4027,4270],"source":" If `strErrMsg` is not equal to `NULL`, then `_strerror_s` returns a string in `buffer` containing (in order) your string message, a colon, a space, the system error message for the last library call producing an error, and a newline character."},{"content":"Your string message can be, at most, 94 characters long.","pos":[4271,4327]},{"content":"These functions truncate the error message if its length exceeds <ph id=\"ph1\">`numberOfElements`</ph> -1.","pos":[4334,4421],"source":"These functions truncate the error message if its length exceeds `numberOfElements` -1."},{"content":"The resulting string in <ph id=\"ph1\">`buffer`</ph> is always null-terminated.","pos":[4422,4481],"source":" The resulting string in `buffer` is always null-terminated."},{"content":"The actual error number for <ph id=\"ph1\">`_strerror_s`</ph> is stored in the variable <bpt id=\"p1\">[</bpt>errno<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","pos":[4488,4632],"source":"The actual error number for `_strerror_s` is stored in the variable [errno](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"The system error messages are accessed through the variable <bpt id=\"p1\">[</bpt>_sys_errlist<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>, which is an array of messages ordered by error number.","pos":[4633,4831],"source":" The system error messages are accessed through the variable [_sys_errlist](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md), which is an array of messages ordered by error number."},{"content":"accesses the appropriate error message by using the <ph id=\"ph1\">`errno`</ph> value as an index to the variable <ph id=\"ph2\">`_sys_errlist`</ph>.","pos":[4846,4955],"source":" accesses the appropriate error message by using the `errno` value as an index to the variable `_sys_errlist`."},{"content":"The value of the variable <bpt id=\"p1\">[</bpt>_sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept> is defined as the maximum number of elements in the <ph id=\"ph1\">`_sys_errlist`</ph> array.","pos":[4956,5135],"source":" The value of the variable [_sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md) is defined as the maximum number of elements in the `_sys_errlist` array."},{"content":"To produce accurate results, call <ph id=\"ph1\">`_strerror_s`</ph> immediately after a library routine returns with an error.","pos":[5136,5242],"source":" To produce accurate results, call `_strerror_s` immediately after a library routine returns with an error."},{"content":"Otherwise, subsequent calls to <ph id=\"ph1\">`strerror_s`</ph> or <ph id=\"ph2\">`_strerror_s`</ph> can overwrite the <ph id=\"ph3\">`errno`</ph> value.","pos":[5243,5336],"source":" Otherwise, subsequent calls to `strerror_s` or `_strerror_s` can overwrite the `errno` value."},{"pos":[5357,5450],"content":"and <ph id=\"ph1\">`__wcserror_s`</ph>are wide-character versions of <ph id=\"ph2\">`strerror_s`</ph>and <ph id=\"ph3\">`_strerror_s`</ph>, respectively.","source":" and `__wcserror_s`are wide-character versions of `strerror_s`and `_strerror_s`, respectively."},{"content":"These functions validate their parameters.","pos":[5457,5499]},{"content":"If buffer is <ph id=\"ph1\">`NULL`</ph> or if the size parameter is 0, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept> .","pos":[5500,5682],"source":" If buffer is `NULL` or if the size parameter is 0, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md) ."},{"content":"If execution is allowed to continue, the functions return <ph id=\"ph1\">`EINVAL`</ph> and set <ph id=\"ph2\">`errno`</ph> to <ph id=\"ph3\">`EINVAL`</ph>.","pos":[5683,5778],"source":" If execution is allowed to continue, the functions return `EINVAL` and set `errno` to `EINVAL`."},{"content":"and <ph id=\"ph1\">`__wcserror_s`</ph> are not part of the ANSI definition but are instead Microsoft extensions to it.","pos":[5813,5911],"source":" and `__wcserror_s` are not part of the ANSI definition but are instead Microsoft extensions to it."},{"content":"Do not use them where portability is desired; for ANSI compatibility, use <ph id=\"ph1\">`strerror_s`</ph> instead.","pos":[5912,6007],"source":" Do not use them where portability is desired; for ANSI compatibility, use `strerror_s` instead."},{"content":"In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically, eliminating the need to specify a size argument.","pos":[6014,6182]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[6183,6291],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"content":"The debug versions of these functions first fill the buffer with 0xFD.","pos":[6298,6368]},{"content":"To disable this behavior, use <bpt id=\"p1\">[</bpt>_CrtSetDebugFillThreshold<ept id=\"p1\">](../../c-runtime-library/reference/crtsetdebugfillthreshold.md)</ept>.","pos":[6369,6490],"source":" To disable this behavior, use [_CrtSetDebugFillThreshold](../../c-runtime-library/reference/crtsetdebugfillthreshold.md)."},{"content":"Generic-Text Routine Mappings","pos":[6500,6529]},{"content":"TCHAR.H routine","pos":[6536,6551]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[6552,6580],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[6581,6594]},{"content":"_UNICODE defined","pos":[6595,6611]},{"content":"Requirements","pos":[6787,6799]},{"content":"Routine","pos":[6806,6813]},{"content":"Required header","pos":[6814,6829]},{"pos":[6886,6887],"content":","},{"content":"string.h&gt;","pos":[6904,6913],"source":"string.h>"},{"pos":[6931,6932],"content":","},{"content":"string.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[6950,6973],"source":"string.h> or \\<wchar.h>"},{"pos":[6981,7105],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[7114,7121]},{"pos":[7125,7207],"content":"See the example for <bpt id=\"p1\">[</bpt>perror<ept id=\"p1\">](../../c-runtime-library/reference/perror-wperror.md)</ept>.","source":"See the example for [perror](../../c-runtime-library/reference/perror-wperror.md)."},{"content":".NET Framework Equivalent","pos":[7216,7241]},{"content":"System::Exception::Message","pos":[7246,7272]},{"content":"See Also","pos":[7354,7362]},{"content":"String Manipulation","pos":[7367,7386]},{"content":"clearerr","pos":[7445,7453]},{"content":"ferror","pos":[7507,7513]},{"content":"perror, _wperror","pos":[7565,7581]}],"content":"---\ntitle: \"strerror_s, _strerror_s, _wcserror_s, __wcserror_s | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"__wcserror_s\"\n  - \"_strerror_s\"\n  - \"_wcserror_s\"\n  - \"strerror_s\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-runtime-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"wcserror_s\"\n  - \"__wcserror_s\"\n  - \"_tcserror_s\"\n  - \"_wcserror_s\"\n  - \"tcserror_s\"\n  - \"strerror_s\"\n  - \"_strerror_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"__wcserror_s function\"\n  - \"error messages, printing\"\n  - \"tcserror_s function\"\n  - \"printing error messages\"\n  - \"strerror_s function\"\n  - \"_wcserror_s function\"\n  - \"_tcserror_s function\"\n  - \"_strerror_s function\"\n  - \"wcserror_s function\"\n  - \"error messages, getting\"\nms.assetid: 9e5b15a0-efe1-4586-b7e3-e1d7c31a03d6\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# strerror_s, _strerror_s, _wcserror_s, __wcserror_s\nGet a system error message (`strerror_s`, `_wcserror_s`) or print a user-supplied error message (`_strerror_s`, `__wcserror_s`). These are versions of [strerror, _strerror, _wcserror, \\__wcserror](../../c-runtime-library/reference/strerror-strerror-wcserror-wcserror.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n## Syntax  \n  \n```  \nerrno_t strerror_s(  \n   char *buffer,  \n   size_t numberOfElements,  \n   int errnum   \n);  \nerrno_t _strerror_s(  \n   char *buffer,  \n   size_t numberOfElements,  \n   const char *strErrMsg   \n);  \nerrno_t _wcserror_s(  \n   wchar_t *buffer,  \n   size_t numberOfElements,  \n   int errnum   \n);  \nerrno_t __wcserror_s(  \n   wchar_t *buffer,  \n   size_t numberOfElements,  \n   const wchar_t *strErrMsg   \n);  \ntemplate <size_t size>  \nerrno_t strerror_s(  \n   char (&buffer)[size],  \n   int errnum   \n); // C++ only  \ntemplate <size_t size>  \nerrno_t _strerror_s(  \n   char (&buffer)[size],  \n   const char *strErrMsg   \n); // C++ only  \ntemplate <size_t size>  \nerrno_t _wcserror_s(  \n   wchar_t (&buffer)[size],  \n   int errnum   \n); // C++ only  \ntemplate <size_t size>  \nerrno_t __wcserror_s(  \n   wchar_t (&buffer)[size],  \n   const wchar_t *strErrMsg   \n); // C++ only  \n```  \n  \n#### Parameters  \n `buffer`  \n Buffer to hold error string.  \n  \n `numberOfElements`  \n Size of buffer.  \n  \n `errnum`  \n Error number.  \n  \n `strErrMsg`  \n User-supplied message.  \n  \n## Return Value  \n Zero if successful, an error code on failure.  \n  \n### Error Condtions  \n  \n|`buffer`|`numberOfElements`|`strErrMsg`|Contents of `buffer`|  \n|--------------|------------------------|-----------------|--------------------------|  \n|`NULL`|any|any|n/a|  \n|any|0|any|not modified|  \n  \n## Remarks  \n The `strerror_s` function maps `errnum` to an error-message string, returning the string in `buffer`. `_strerror_s` doesn't take the error number; it uses the current value of `errno` to determine the appropriate message. Neither `strerror_s` nor `_strerror_s` actually prints the message: For that, you need to call an output function such as [fprintf](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md):  \n  \n```  \nif (( _access( \"datafile\",2 )) == -1 )  \n{  \n   _strerror_s(buffer, 80);  \n   fprintf( stderr, buffer );  \n}  \n```  \n  \n If `strErrMsg` is `NULL`, `_strerror_s` returns a string in `buffer` containing the system error message for the last library call that produced an error. The error-message string is terminated by the newline character ('\\n'). If `strErrMsg` is not equal to `NULL`, then `_strerror_s` returns a string in `buffer` containing (in order) your string message, a colon, a space, the system error message for the last library call producing an error, and a newline character. Your string message can be, at most, 94 characters long.  \n  \n These functions truncate the error message if its length exceeds `numberOfElements` -1. The resulting string in `buffer` is always null-terminated.  \n  \n The actual error number for `_strerror_s` is stored in the variable [errno](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md). The system error messages are accessed through the variable [_sys_errlist](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md), which is an array of messages ordered by error number. `_strerror_s` accesses the appropriate error message by using the `errno` value as an index to the variable `_sys_errlist`. The value of the variable [_sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md) is defined as the maximum number of elements in the `_sys_errlist` array. To produce accurate results, call `_strerror_s` immediately after a library routine returns with an error. Otherwise, subsequent calls to `strerror_s` or `_strerror_s` can overwrite the `errno` value.  \n  \n `_wcserror_s` and `__wcserror_s`are wide-character versions of `strerror_s`and `_strerror_s`, respectively.  \n  \n These functions validate their parameters. If buffer is `NULL` or if the size parameter is 0, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md) . If execution is allowed to continue, the functions return `EINVAL` and set `errno` to `EINVAL`.  \n  \n `_strerror_s, _wcserror_s,` and `__wcserror_s` are not part of the ANSI definition but are instead Microsoft extensions to it. Do not use them where portability is desired; for ANSI compatibility, use `strerror_s` instead.  \n  \n In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically, eliminating the need to specify a size argument. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n The debug versions of these functions first fill the buffer with 0xFD. To disable this behavior, use [_CrtSetDebugFillThreshold](../../c-runtime-library/reference/crtsetdebugfillthreshold.md).  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_tcserror_s`|`strerror_s`|`strerror_s`|`_wcserror_s`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`strerror_s`, `_strerror_s`|\\<string.h>|  \n|`_wcserror_s`, `__wcserror_s`|\\<string.h> or \\<wchar.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n See the example for [perror](../../c-runtime-library/reference/perror-wperror.md).  \n  \n## .NET Framework Equivalent  \n [System::Exception::Message](https://msdn.microsoft.com/en-us/library/system.exception.message.aspx)  \n  \n## See Also  \n [String Manipulation](../../c-runtime-library/string-manipulation-crt.md)   \n [clearerr](../../c-runtime-library/reference/clearerr.md)   \n [ferror](../../c-runtime-library/reference/ferror.md)   \n [perror, _wperror](../../c-runtime-library/reference/perror-wperror.md)"}