{"nodes":[{"pos":[12,59],"content":"printf_p Positional Parameters | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"printf_p Positional Parameters | Microsoft Docs","pos":[0,47]}]},{"content":"printf_p Positional Parameters","pos":[820,850]},{"content":"Positional parameters provide the ability to specify by number which of the arguments is to be substituted into a field in a format string.","pos":[851,990]},{"content":"The following positional parameter <ph id=\"ph1\">`printf`</ph> functions are available:","pos":[991,1059],"source":" The following positional parameter `printf` functions are available:"},{"content":"printf, _printf_l, wprintf, _wprintf_l","pos":[1067,1105]},{"content":"_printf_p, _printf_p_l, _wprintf_p, _wprintf_p_l","pos":[1180,1228]},{"content":"sprintf, _sprintf_l, swprintf, _swprintf_l, <ph id=\"ph1\">\\_</ph>_swprintf_l","pos":[1314,1371],"source":"sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l"},{"content":"_sprintf_p, _sprintf_p_l, _swprintf_p, _swprintf_p_l","pos":[1461,1513]},{"content":"_cprintf, _cprintf_l, _cwprintf, _cwprintf_l","pos":[1603,1647]},{"content":"_cprintf_p, _cprintf_p_l, _cwprintf_p, _cwprintf_p_l","pos":[1726,1778]},{"content":"fprintf, _fprintf_l, fwprintf, _fwprintf_l","pos":[1868,1910]},{"content":"_fprintf_p, _fprintf_p_l, _fwprintf_p, _fwprintf_p_l","pos":[1989,2041]},{"content":"vprintf, _vprintf_l, vwprintf, _vwprintf_l","pos":[2131,2173]},{"content":"_vprintf_p, _vprintf_p_l, _vwprintf_p, _vwprintf_p_l","pos":[2252,2304]},{"content":"vfprintf, _vfprintf_l, vfwprintf, _vfwprintf_l","pos":[2394,2440]},{"content":"_vfprintf_p, _vfprintf_p_l, _vfwprintf_p, _vfwprintf_p_l","pos":[2523,2579]},{"content":"vsprintf, _vsprintf_l, vswprintf, _vswprintf_l, <ph id=\"ph1\">\\_</ph>_vswprintf_l","pos":[2673,2735],"source":"vsprintf, _vsprintf_l, vswprintf, _vswprintf_l, \\__vswprintf_l"},{"content":"_vsprintf_p, _vsprintf_p_l, _vswprintf_p, _vswprintf_p_l","pos":[2830,2886]},{"content":"Specifying Positional Parameters","pos":[2981,3013]},{"content":"Parameter Indexing","pos":[3025,3043]},{"content":"By default the positional functions behave identically to the non position ones, if no positional formatting is present.","pos":[3047,3167]},{"content":"Positional parameters are specified using the format \"<ph id=\"ph1\">`%m$x`</ph>\", where <ph id=\"ph2\">`m`</ph> denotes a numeric ordinal number indicating the position of the parameter in the list of parameters, preceding the format string and <ph id=\"ph3\">`x`</ph> denotes the type field character type specified in the <ph id=\"ph4\">`printf`</ph> function.","pos":[3168,3451],"source":" Positional parameters are specified using the format \"`%m$x`\", where `m` denotes a numeric ordinal number indicating the position of the parameter in the list of parameters, preceding the format string and `x` denotes the type field character type specified in the `printf` function."},{"content":"The parameters in the list are indexed starting at the value 1 for the first element in the list and so forth.","pos":[3452,3562]},{"content":"For additional information concerning type field characters, see <bpt id=\"p1\">[</bpt>printf Type Field Characters<ept id=\"p1\">](../c-runtime-library/printf-type-field-characters.md)</ept>.","pos":[3563,3713],"source":" For additional information concerning type field characters, see [printf Type Field Characters](../c-runtime-library/printf-type-field-characters.md)."},{"content":"For an example of this behavior:","pos":[3720,3752]},{"content":"will print","pos":[3818,3828]},{"content":"The order of the numbers used need not match the order of the arguments given.","pos":[3864,3942]},{"content":"Thus the following is valid:","pos":[3943,3971]},{"content":"will print","pos":[4037,4047]},{"content":"Parameter may be used more than once while formatting, unlike in traditional format strings, so that","pos":[4083,4183]},{"content":"will print","pos":[4254,4264]},{"content":"However, all arguments must be used at least once somewhere in the format string.","pos":[4307,4388]},{"pos":[4395,4488],"content":"The maximum number of positional parameters allowed in a format string is given by <ph id=\"ph1\">`_ARGMAX`</ph>.","source":"The maximum number of positional parameters allowed in a format string is given by `_ARGMAX`."},{"content":"Width and Precision","pos":[4500,4519]},{"content":"When the * symbol is used to specify that the width or precision is to be determined from an argument, then the position of the width or precision value must appear immediately following the <ph id=\"ph1\">\\*</ph> symbol.","pos":[4523,4724],"source":"When the * symbol is used to specify that the width or precision is to be determined from an argument, then the position of the width or precision value must appear immediately following the \\* symbol."},{"content":"For example,","pos":[4725,4737]},{"content":"or","pos":[4795,4797]},{"content":"Mixing positional and non positional arguments","pos":[4860,4906]},{"content":"Positional parameters may not be mixed with non-positional parameters in the same format string.","pos":[4910,5006]},{"content":"However, <ph id=\"ph1\">`printf_p`</ph> and related functions still support non-positional parameters in format strings containing no positional parameters.","pos":[5008,5144],"source":"  However, `printf_p` and related functions still support non-positional parameters in format strings containing no positional parameters."},{"content":"Example","pos":[5153,5160]},{"content":"See Also","pos":[6165,6173]},{"content":"printf Type Field Characters","pos":[6178,6206]},{"content":"printf Width Specification","pos":[6267,6293]},{"content":"Precision Specification","pos":[6352,6375]}],"content":"---\ntitle: \"printf_p Positional Parameters | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napilocation: \n  - \"msvcr120.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr100.dll\"\napitype: \"DLLExport\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_printf_p function, positional parameters\"\n  - \"printf_p function, positional parameters\"\nms.assetid: beb4fd85-a7aa-4665-9085-2c907a5b9ab0\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# printf_p Positional Parameters\nPositional parameters provide the ability to specify by number which of the arguments is to be substituted into a field in a format string. The following positional parameter `printf` functions are available:  \n  \n [printf, _printf_l, wprintf, _wprintf_l](../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)  \n [_printf_p, _printf_p_l, _wprintf_p, _wprintf_p_l](../c-runtime-library/reference/printf-p-printf-p-l-wprintf-p-wprintf-p-l.md)  \n  \n [sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l](../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)  \n [_sprintf_p, _sprintf_p_l, _swprintf_p, _swprintf_p_l](../c-runtime-library/reference/sprintf-p-sprintf-p-l-swprintf-p-swprintf-p-l.md)  \n  \n [_cprintf, _cprintf_l, _cwprintf, _cwprintf_l](../c-runtime-library/reference/cprintf-cprintf-l-cwprintf-cwprintf-l.md)  \n [_cprintf_p, _cprintf_p_l, _cwprintf_p, _cwprintf_p_l](../c-runtime-library/reference/cprintf-p-cprintf-p-l-cwprintf-p-cwprintf-p-l.md)  \n  \n [fprintf, _fprintf_l, fwprintf, _fwprintf_l](../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)  \n [_fprintf_p, _fprintf_p_l, _fwprintf_p, _fwprintf_p_l](../c-runtime-library/reference/fprintf-p-fprintf-p-l-fwprintf-p-fwprintf-p-l.md)  \n  \n [vprintf, _vprintf_l, vwprintf, _vwprintf_l](../c-runtime-library/reference/vprintf-vprintf-l-vwprintf-vwprintf-l.md)  \n [_vprintf_p, _vprintf_p_l, _vwprintf_p, _vwprintf_p_l](../c-runtime-library/reference/vprintf-p-vprintf-p-l-vwprintf-p-vwprintf-p-l.md)  \n  \n [vfprintf, _vfprintf_l, vfwprintf, _vfwprintf_l](../c-runtime-library/reference/vfprintf-vfprintf-l-vfwprintf-vfwprintf-l.md)  \n [_vfprintf_p, _vfprintf_p_l, _vfwprintf_p, _vfwprintf_p_l](../c-runtime-library/reference/vfprintf-p-vfprintf-p-l-vfwprintf-p-vfwprintf-p-l.md)  \n  \n [vsprintf, _vsprintf_l, vswprintf, _vswprintf_l, \\__vswprintf_l](../c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l.md)  \n [_vsprintf_p, _vsprintf_p_l, _vswprintf_p, _vswprintf_p_l](../c-runtime-library/reference/vsprintf-p-vsprintf-p-l-vswprintf-p-vswprintf-p-l.md)  \n  \n## Specifying Positional Parameters  \n  \n##### Parameter Indexing  \n By default the positional functions behave identically to the non position ones, if no positional formatting is present. Positional parameters are specified using the format \"`%m$x`\", where `m` denotes a numeric ordinal number indicating the position of the parameter in the list of parameters, preceding the format string and `x` denotes the type field character type specified in the `printf` function. The parameters in the list are indexed starting at the value 1 for the first element in the list and so forth. For additional information concerning type field characters, see [printf Type Field Characters](../c-runtime-library/printf-type-field-characters.md).  \n  \n For an example of this behavior:  \n  \n```  \n_printf_p(\"%1$s %2$s\", \"November\", \"10\");  \n```  \n  \n will print  \n  \n```  \nNovember 10  \n```  \n  \n The order of the numbers used need not match the order of the arguments given. Thus the following is valid:  \n  \n```  \n_printf_p(\"%2$s %1$s\", \"November\", \"10\");  \n```  \n  \n will print  \n  \n```  \n10 November  \n```  \n  \n Parameter may be used more than once while formatting, unlike in traditional format strings, so that  \n  \n```  \n_printf_p(\"%1$d times %1$d is %2$d\", 10, 100);  \n```  \n  \n will print  \n  \n```  \n10 times 10 is 100  \n```  \n  \n However, all arguments must be used at least once somewhere in the format string.  \n  \n The maximum number of positional parameters allowed in a format string is given by `_ARGMAX`.  \n  \n##### Width and Precision  \n When the * symbol is used to specify that the width or precision is to be determined from an argument, then the position of the width or precision value must appear immediately following the \\* symbol. For example,  \n  \n```  \n_printf_p(\"%1$*2$s\",\"Hello\", 10);  \n```  \n  \n or  \n  \n```  \n_printf_p(\"%2$*1$s\",10, \"Hello\");  \n```  \n  \n##### Mixing positional and non positional arguments  \n Positional parameters may not be mixed with non-positional parameters in the same format string.  However, `printf_p` and related functions still support non-positional parameters in format strings containing no positional parameters.  \n  \n## Example  \n  \n```  \n// positional_args.c  \n// Positional arguments allow the specification of the order  \n// in which arguments are consumed in a formatting string.  \n  \n#include <stdio.h>  \n  \nint main(int argc, char *argv[])  \n{  \n    int     i = 1,  \n            j = 2,  \n            k = 3;  \n    double  x = 0.1,  \n            y = 0.2,  \n            z = 0.3;  \n    char    *s1 = \"abc\",  \n            *s2 = \"def\",  \n            *s3 = \"ghi\";  \n  \n    // If positional arguments are unspecified,  \n    // normal input order is used.  \n    _printf_p(\"%d %d %d\\n\", i, j, k);  \n  \n    // Positional args are numbers indicating the  \n    // argument enclosed in curly braces.  \n    _printf_p(\"%3$d %1$d %2$d\\n\", i, j, k);  \n  \n    // The same positional argument may be reused.  \n    _printf_p(\"%1$d %2$d %1$d\\n\", i, j);  \n  \n    _printf_p(\"%1$s %2$s %3$s\\n\", s1, s2, s3);  \n  \n    _printf_p(\"%3$s %1$s %2$s\\n\", s1, s2, s3);  \n}  \n```  \n  \n```Output  \n1 2 3  \n3 1 2  \n1 2 1  \nabc def ghi  \nghi abc def  \n```  \n  \n## See Also  \n [printf Type Field Characters](../c-runtime-library/printf-type-field-characters.md)   \n [printf Width Specification](../c-runtime-library/printf-width-specification.md)   \n [Precision Specification](../c-runtime-library/precision-specification.md)"}