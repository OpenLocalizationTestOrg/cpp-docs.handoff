{"nodes":[{"pos":[12,51],"content":"Compiler Warning C4868 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Warning C4868 | Microsoft Docs","pos":[0,39]}]},{"content":"Compiler Warning C4868","pos":[401,423]},{"content":"'file(line_number)' compiler may not enforce left-to-right evaluation order in braced initializer list","pos":[424,526]},{"content":"The elements of a braced initializer list are to be evaluated in left-to-right order.","pos":[533,618]},{"content":"There are two cases in which the compiler is unable to guarantee this order: the first is when some of the elements are objects passed by value; the second is  when compiling with <ph id=\"ph1\">`/clr`</ph> and some of the elements are fields of objects or are array elements.","pos":[619,875],"source":" There are two cases in which the compiler is unable to guarantee this order: the first is when some of the elements are objects passed by value; the second is  when compiling with `/clr` and some of the elements are fields of objects or are array elements."},{"content":"When the compiler can't guarantee left-to-right evaluation it emits warning C4868.","pos":[876,958]},{"content":"This warning can be generated as a result of compiler conformance work that was done for Visual C++ 2015 Update 2.","pos":[965,1079]},{"content":"Code that compiled prior to Visual C++ 2015 Update 2 will now generate C4868.","pos":[1080,1157]},{"content":"This warning is off by default.","pos":[1164,1195]},{"content":"Use <ph id=\"ph1\">`/Wall`</ph> to activate this warning.","pos":[1196,1233],"source":" Use `/Wall` to activate this warning."},{"content":"To resolve this warning, first consider whether left-to-right evaluation of the initializer list elements is necessary, such as when evaluation of the elements might produce order-dependent side-effects.","pos":[1240,1443]},{"content":"In many cases, the order in which elements are evaluated does not have an observable effect.","pos":[1444,1536]},{"content":"If the order of evaluation must be left-to-right, consider if it's possible to pass the elements by (const) reference instead.","pos":[1543,1669]},{"content":"A change such as this eliminates the warning in the following code sample.","pos":[1670,1744]},{"content":"Example","pos":[1753,1760]},{"content":"The following sample generates C4868.","pos":[1764,1801]}],"content":"---\ntitle: \"Compiler Warning C4868 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"C4868\"\nms.assetid: fc6aa7e5-34dd-4ec2-88bd-16e430361dc7\ncaps.latest.revision: 4\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Compiler Warning C4868\n'file(line_number)' compiler may not enforce left-to-right evaluation order in braced initializer list  \n  \n The elements of a braced initializer list are to be evaluated in left-to-right order. There are two cases in which the compiler is unable to guarantee this order: the first is when some of the elements are objects passed by value; the second is  when compiling with `/clr` and some of the elements are fields of objects or are array elements. When the compiler can't guarantee left-to-right evaluation it emits warning C4868.  \n  \n This warning can be generated as a result of compiler conformance work that was done for Visual C++ 2015 Update 2. Code that compiled prior to Visual C++ 2015 Update 2 will now generate C4868.  \n  \n This warning is off by default. Use `/Wall` to activate this warning.  \n  \n To resolve this warning, first consider whether left-to-right evaluation of the initializer list elements is necessary, such as when evaluation of the elements might produce order-dependent side-effects. In many cases, the order in which elements are evaluated does not have an observable effect.  \n  \n If the order of evaluation must be left-to-right, consider if it's possible to pass the elements by (const) reference instead. A change such as this eliminates the warning in the following code sample.  \n  \n## Example  \n The following sample generates C4868.  \n  \n```  \n// C4868.cpp  \n// compile with: /c /Wall  \n#include <cstdio>  \n  \nclass HasCopyConstructor  \n{  \npublic:  \n    int x;  \n  \n    HasCopyConstructor(int x): x(x) {}  \n  \n    HasCopyConstructor(const HasCopyConstructor& h): x(h.x)  \n    {  \n        printf(\"Constructing %d\\n\", h.x);  \n    }  \n};  \n  \nclass TripWarning4868  \n{  \npublic:  \n    // note that taking \"HasCopyConstructor\" parameters by-value will trigger copy-construction.  \n    TripWarning4868(HasCopyConstructor a, HasCopyConstructor b) {}  \n  \n    // This variation will not trigger the warning:  \n    // TripWarning4868(const HasCopyConstructor& a, const HasCopyConstructor& b) {}  \n};  \n  \nint main()  \n{  \n    HasCopyConstructor a{1};  \n    HasCopyConstructor b{2};  \n  \n    // the warning will indicate the below line, the usage of the braced initializer list.  \n    TripWarning4868 warningOnThisLine{a, b};  \n};  \n```"}