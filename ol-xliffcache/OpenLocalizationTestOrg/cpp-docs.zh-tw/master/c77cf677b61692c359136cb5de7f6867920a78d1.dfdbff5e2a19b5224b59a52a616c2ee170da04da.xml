{"nodes":[{"pos":[12,53],"content":"hash_set::find (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"hash_set::find (STL-CLR) | Microsoft Docs","pos":[0,41]}]},{"content":"hash_set::find (STL/CLR)","pos":[629,653]},{"content":"Finds an element that matches a specified key.","pos":[654,700]},{"content":"Syntax","pos":[709,715]},{"content":"Parameters","pos":[772,782]},{"content":"key","pos":[786,789]},{"content":"Key value to search for.","pos":[793,817]},{"content":"Remarks","pos":[826,833]},{"content":"If at least one element in the controlled sequence has equivalent ordering with <ph id=\"ph1\">`key`</ph>, the member function returns an iterator designating one of those elements; otherwise it returns <bpt id=\"p1\">[</bpt>hash_set::end (STL/CLR)<ept id=\"p1\">](../dotnet/hash-set-end-stl-clr.md)</ept><ph id=\"ph2\">`()`</ph>.","pos":[837,1085],"source":"If at least one element in the controlled sequence has equivalent ordering with `key`, the member function returns an iterator designating one of those elements; otherwise it returns [hash_set::end (STL/CLR)](../dotnet/hash-set-end-stl-clr.md)`()`."},{"content":"You use it to locate an element currently in the controlled sequence that matches a specified key.","pos":[1086,1184]},{"content":"Example","pos":[1193,1200]},{"content":"Description","pos":[2035,2046]},{"pos":[2050,2120],"content":"Note that <ph id=\"ph1\">`find`</ph> does not guarantee which of several element it finds.","source":"Note that `find` does not guarantee which of several element it finds."},{"content":"Requirements","pos":[2129,2141]},{"pos":[2145,2175],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/hash_set&gt;","source":"**Header:** \\<cliext/hash_set>"},{"pos":[2182,2203],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2212,2220]},{"content":"hash_set (STL/CLR)","pos":[2225,2243]},{"content":"hash_set::equal_range (STL/CLR)","pos":[2281,2312]},{"content":"hash_set::lower_bound (STL/CLR)","pos":[2362,2393]},{"content":"hash_set::upper_bound (STL/CLR)","pos":[2443,2474]}],"content":"---\ntitle: \"hash_set::find (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::hash_set::find\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"find member [STL/CLR]\"\nms.assetid: 758b7438-ef15-4af0-8001-a1126d5e9a9e\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# hash_set::find (STL/CLR)\nFinds an element that matches a specified key.  \n  \n## Syntax  \n  \n```  \niterator find(key_type key);  \n```  \n  \n#### Parameters  \n key  \n Key value to search for.  \n  \n## Remarks  \n If at least one element in the controlled sequence has equivalent ordering with `key`, the member function returns an iterator designating one of those elements; otherwise it returns [hash_set::end (STL/CLR)](../dotnet/hash-set-end-stl-clr.md)`()`. You use it to locate an element currently in the controlled sequence that matches a specified key.  \n  \n## Example  \n  \n```  \n// cliext_hash_set_find.cpp   \n// compile with: /clr   \n#include <cliext/hash_set>   \n  \ntypedef cliext::hash_set<wchar_t> Myhash_set;   \nint main()   \n    {   \n    Myhash_set c1;   \n    c1.insert(L'a');   \n    c1.insert(L'b');   \n    c1.insert(L'c');   \n  \n// display initial contents \" a b c\"   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n    System::Console::WriteLine(\"find {0} = {1}\",   \n        L'A', c1.find(L'A') != c1.end());   \n    System::Console::WriteLine(\"find {0} = {1}\",   \n        L'b', *c1.find(L'b'));   \n    System::Console::WriteLine(\"find {0} = {1}\",   \n        L'C', c1.find(L'C') != c1.end());   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n a b c  \nfind A = False  \nfind b = b  \nfind C = False  \n```  \n  \n## Description  \n Note that `find` does not guarantee which of several element it finds.  \n  \n## Requirements  \n **Header:** \\<cliext/hash_set>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [hash_set (STL/CLR)](../dotnet/hash-set-stl-clr.md)   \n [hash_set::equal_range (STL/CLR)](../dotnet/hash-set-equal-range-stl-clr.md)   \n [hash_set::lower_bound (STL/CLR)](../dotnet/hash-set-lower-bound-stl-clr.md)   \n [hash_set::upper_bound (STL/CLR)](../dotnet/hash-set-upper-bound-stl-clr.md)"}