{"nodes":[{"pos":[12,51],"content":"reverse_iterator Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"reverse_iterator Class | Microsoft Docs","pos":[0,39]}]},{"content":"reverse_iterator Class","pos":[712,734]},{"content":"The template class is an iterator adaptor that describes a reverse iterator object that behaves like a random-access or bidirectional iterator, only in reverse.","pos":[735,895]},{"content":"It enables the backward traversal of a range.","pos":[896,941]},{"content":"Syntax","pos":[950,956]},{"content":"Parameters","pos":[1041,1051]},{"content":"RandomIterator","pos":[1055,1069]},{"content":"The type that represents the iterator to be adapted to operate in reverse.","pos":[1073,1147]},{"content":"Remarks","pos":[1156,1163]},{"content":"Existing Standard Template Library containers also define <ph id=\"ph1\">`reverse_iterator`</ph> and <ph id=\"ph2\">`const_reverse_iterator`</ph> types and have member functions <ph id=\"ph3\">`rbegin`</ph> and <ph id=\"ph4\">`rend`</ph> that return reverse iterators.","pos":[1167,1355],"source":"Existing Standard Template Library containers also define `reverse_iterator` and `const_reverse_iterator` types and have member functions `rbegin` and `rend` that return reverse iterators."},{"content":"These iterators have overwrite semantics.","pos":[1356,1397]},{"content":"The <ph id=\"ph1\">`reverse_iterator`</ph> adaptor supplements this functionality as offers insert semantics and can also be used with streams.","pos":[1398,1521],"source":" The `reverse_iterator` adaptor supplements this functionality as offers insert semantics and can also be used with streams."},{"pos":[1528,1755],"content":"The <ph id=\"ph1\">`reverse_iterator`</ph>s that require a bidirectional iterator must not call any of the member functions <ph id=\"ph2\">`operator+=`</ph>, <ph id=\"ph3\">`operator+`</ph>, <ph id=\"ph4\">`operator-=`</ph>, <ph id=\"ph5\">`operator-`</ph>, or <ph id=\"ph6\">`operator[]`</ph>, which may only be used with random-access iterators.","source":"The `reverse_iterator`s that require a bidirectional iterator must not call any of the member functions `operator+=`, `operator+`, `operator-=`, `operator-`, or `operator[]`, which may only be used with random-access iterators."},{"content":"If the range of an iterator is [ <ph id=\"ph1\">` first`</ph>,  last), where the square bracket on the left indicates the inclusion on <ph id=\"ph2\">\\_</ph> <bpt id=\"p1\">*</bpt>First<ept id=\"p1\">*</ept> and the parenthesis on the right indicates the inclusion of elements up to <ph id=\"ph3\">\\_</ph> <bpt id=\"p2\">*</bpt>Left<ept id=\"p2\">*</ept> but excluding <ph id=\"ph4\">\\_</ph> <bpt id=\"p3\">*</bpt>Left<ept id=\"p3\">*</ept> itself.","pos":[1762,2004],"source":"If the range of an iterator is [ ` first`,  last), where the square bracket on the left indicates the inclusion on \\_ *First* and the parenthesis on the right indicates the inclusion of elements up to \\_ *Left* but excluding \\_ *Left* itself."},{"content":"The same elements are included in the reversed sequence [ <bpt id=\"p1\">**</bpt>rev<ept id=\"p1\">**</ept> â€“ <ph id=\"ph1\">` first`</ph>, <bpt id=\"p2\">**</bpt>rev<ept id=\"p2\">**</ept> â€“ <ph id=\"ph2\">\\_</ph> <bpt id=\"p3\">*</bpt>Left<ept id=\"p3\">*</ept>) so that if <ph id=\"ph3\">\\_</ph> <bpt id=\"p4\">*</bpt>Left<ept id=\"p4\">*</ept> is the one-past-the-end element in a sequence, then the first element <bpt id=\"p5\">**</bpt>rev<ept id=\"p5\">**</ept> â€“ <ph id=\"ph4\">\\_</ph> <bpt id=\"p6\">*</bpt>First<ept id=\"p6\">*</ept> in the reversed sequence points to <ph id=\"ph5\">\\*</ph>(<ph id=\"ph6\">\\_</ph> <bpt id=\"p7\">*</bpt>Left<ept id=\"p7\">*</ept> â€“ 1 ).","pos":[2005,2278],"source":" The same elements are included in the reversed sequence [ **rev** â€“ ` first`, **rev** â€“ \\_ *Left*) so that if \\_ *Left* is the one-past-the-end element in a sequence, then the first element **rev** â€“ \\_ *First* in the reversed sequence points to \\*(\\_ *Left* â€“ 1 )."},{"content":"The identity which relates all reverse iterators to their underlying iterators is:","pos":[2279,2361]},{"pos":[2371,2424],"content":"( <bpt id=\"p1\">**</bpt>reverse_iterator<ept id=\"p1\">**</ept> ( <bpt id=\"p2\">*</bpt>i<ept id=\"p2\">*</ept> ) ) == &amp;<ph id=\"ph1\">\\*</ph>( <bpt id=\"p3\">*</bpt>i<ept id=\"p3\">*</ept> â€“ 1 ).","source":"( **reverse_iterator** ( *i* ) ) == &\\*( *i* â€“ 1 )."},{"content":"In practice, this means that in the reversed sequence the reverse_iterator will refer to the element one position beyond (to the right of) the element that the iterator had referred to in the original sequence.","pos":[2431,2641]},{"content":"So if an iterator addressed the element 6 in the sequence (2, 4, 6, 8), then the <ph id=\"ph1\">`reverse_iterator`</ph> will address the element 4 in the reversed sequence (8, 6, 4, 2).","pos":[2642,2807],"source":" So if an iterator addressed the element 6 in the sequence (2, 4, 6, 8), then the `reverse_iterator` will address the element 4 in the reversed sequence (8, 6, 4, 2)."},{"content":"Constructors","pos":[2817,2829]},{"content":"reverse_iterator","pos":[2851,2867]},{"pos":[2906,2998],"content":"Constructs a default <ph id=\"ph1\">`reverse_iterator`</ph> or a <ph id=\"ph2\">`reverse_iterator`</ph> from an underlying iterator.","source":"Constructs a default `reverse_iterator` or a `reverse_iterator` from an underlying iterator."},{"content":"Typedefs","pos":[3009,3017]},{"content":"difference_type","pos":[3039,3054]},{"pos":[3092,3208],"content":"A type that provides the difference between two <ph id=\"ph1\">`reverse_iterator`</ph>s referring to elements within the same container.","source":"A type that provides the difference between two `reverse_iterator`s referring to elements within the same container."},{"content":"iterator_type","pos":[3214,3227]},{"pos":[3263,3333],"content":"A type that provides the underlying iterator for a <ph id=\"ph1\">`reverse_iterator`</ph>.","source":"A type that provides the underlying iterator for a `reverse_iterator`."},{"content":"pointer","pos":[3339,3346]},{"pos":[3376,3455],"content":"A type that provides a pointer to an element addressed by a <ph id=\"ph1\">`reverse_iterator`</ph>.","source":"A type that provides a pointer to an element addressed by a `reverse_iterator`."},{"content":"reference","pos":[3461,3470]},{"pos":[3502,3583],"content":"A type that provides a reference to an element addressed by a <ph id=\"ph1\">`reverse_iterator`</ph>.","source":"A type that provides a reference to an element addressed by a `reverse_iterator`."},{"content":"Member Functions","pos":[3594,3610]},{"content":"base","pos":[3632,3636]},{"pos":[3663,3724],"content":"Recovers the underlying iterator from its <ph id=\"ph1\">`reverse_iterator`</ph>.","source":"Recovers the underlying iterator from its `reverse_iterator`."},{"content":"Operators","pos":[3735,3744]},{"content":"operator_star","pos":[3766,3779]},{"pos":[3815,3871],"content":"Returns the element that a <ph id=\"ph1\">`reverse_iterator`</ph> addresses.","source":"Returns the element that a `reverse_iterator` addresses."},{"content":"operator+","pos":[3877,3886]},{"pos":[3921,4049],"content":"Adds an offset to an iterator and returns the new <ph id=\"ph1\">`reverse_iterator`</ph> addressing the inserted element at the new offset position.","source":"Adds an offset to an iterator and returns the new `reverse_iterator` addressing the inserted element at the new offset position."},{"content":"operator++","pos":[4055,4065]},{"pos":[4104,4158],"content":"Increments the <ph id=\"ph1\">`reverse_iterator`</ph> to the next element.","source":"Increments the `reverse_iterator` to the next element."},{"content":"operator+=","pos":[4164,4174]},{"pos":[4212,4262],"content":"Adds a specified offset from a <ph id=\"ph1\">`reverse_iterator`</ph>.","source":"Adds a specified offset from a `reverse_iterator`."},{"content":"operator-","pos":[4268,4277]},{"pos":[4309,4434],"content":"Subtracts an offset from a <ph id=\"ph1\">`reverse_iterator`</ph> and returns a <ph id=\"ph2\">`reverse_iterator`</ph> addressing the element at the offset position.","source":"Subtracts an offset from a `reverse_iterator` and returns a `reverse_iterator` addressing the element at the offset position."},{"content":"operator--","pos":[4440,4450]},{"pos":[4483,4541],"content":"Decrements the <ph id=\"ph1\">`reverse_iterator`</ph> to the previous element.","source":"Decrements the `reverse_iterator` to the previous element."},{"content":"operator-=","pos":[4547,4557]},{"pos":[4592,4647],"content":"Subtracts a specified offset from a <ph id=\"ph1\">`reverse_iterator`</ph>.","source":"Subtracts a specified offset from a `reverse_iterator`."},{"content":"operator-&gt;","pos":[4653,4663],"source":"operator->"},{"pos":[4699,4768],"content":"Returns a pointer to the element addressed by the <ph id=\"ph1\">`reverse_iterator`</ph>.","source":"Returns a pointer to the element addressed by the `reverse_iterator`."},{"content":"operator&amp;#91;&amp;#93;","pos":[4774,4792],"source":"operator&#91;&#93;"},{"pos":[4826,4953],"content":"Returns a reference to an element offset from the element addressed by a <ph id=\"ph1\">`reverse_iterator`</ph> by a specified number of positions.","source":"Returns a reference to an element offset from the element addressed by a `reverse_iterator` by a specified number of positions."},{"content":"Requirements","pos":[4963,4975]},{"pos":[4979,5002],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>iterator&gt;","source":"**Header:** \\<iterator>"},{"pos":[5009,5027],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[5076,5098],"content":"reverse_iterator::base"},{"pos":[5102,5163],"content":"Recovers the underlying iterator from its <ph id=\"ph1\">`reverse_iterator`</ph>.","source":"Recovers the underlying iterator from its `reverse_iterator`."},{"content":"Return Value","pos":[5218,5230]},{"pos":[5234,5281],"content":"The iterator underlying the <ph id=\"ph1\">`reverse_iterator`</ph>.","source":"The iterator underlying the `reverse_iterator`."},{"content":"Remarks","pos":[5291,5298]},{"content":"The identity that relates all reverse iterators to their underlying iterators is:","pos":[5302,5383]},{"pos":[5393,5444],"content":"( <ph id=\"ph1\">`reverse_iterator`</ph> ( <bpt id=\"p1\">*</bpt>i<ept id=\"p1\">*</ept> ) ) == &amp;<ph id=\"ph2\">\\*</ph>( <bpt id=\"p2\">*</bpt>i<ept id=\"p2\">*</ept> â€“ 1 ).","source":"( `reverse_iterator` ( *i* ) ) == &\\*( *i* â€“ 1 )."},{"content":"In practice, this means that in the reversed sequence the <ph id=\"ph1\">`reverse_iterator`</ph> will refer to the element one position beyond (to the right of) the element that the iterator had referred to in the original sequence.","pos":[5451,5663],"source":"In practice, this means that in the reversed sequence the `reverse_iterator` will refer to the element one position beyond (to the right of) the element that the iterator had referred to in the original sequence."},{"content":"So if an iterator addressed the element 6 in the sequence (2, 4, 6, 8), then the <ph id=\"ph1\">`reverse_iterator`</ph> will address the element 4 in the reversed sequence (8, 6, 4, 2).","pos":[5664,5829],"source":" So if an iterator addressed the element 6 in the sequence (2, 4, 6, 8), then the `reverse_iterator` will address the element 4 in the reversed sequence (8, 6, 4, 2)."},{"content":"Example","pos":[5839,5846]},{"pos":[7189,7222],"content":"reverse_iterator::difference_type"},{"pos":[7226,7342],"content":"A type that provides the difference between two <ph id=\"ph1\">`reverse_iterator`</ph>s referring to elements within the same container.","source":"A type that provides the difference between two `reverse_iterator`s referring to elements within the same container."},{"content":"Remarks","pos":[7453,7460]},{"pos":[7464,7547],"content":"The <ph id=\"ph1\">`reverse_iterator`</ph> difference type is the same as the iterator difference type.","source":"The `reverse_iterator` difference type is the same as the iterator difference type."},{"pos":[7554,7662],"content":"The type is a synonym for the iterator trait typename <ph id=\"ph1\">`iterator_traits`\\&lt;</ph> <bpt id=\"p1\">**</bpt>RandomIterator<ept id=\"p1\">**</ept><ph id=\"ph2\">&gt; </ph><bpt id=\"p2\">**</bpt>::pointer<ept id=\"p2\">**</ept>.","source":"The type is a synonym for the iterator trait typename `iterator_traits`\\< **RandomIterator**> **::pointer**."},{"content":"Example","pos":[7672,7679]},{"pos":[7684,7818],"content":"See <bpt id=\"p1\">[</bpt>reverse_iterator::operator&amp;#91;&amp;#93;<ept id=\"p1\">](#reverse_iterator__operator_at)</ept> for an example of how to declare and use <ph id=\"ph1\">`difference_type`</ph>.","source":"See [reverse_iterator::operator&#91;&#93;](#reverse_iterator__operator_at) for an example of how to declare and use `difference_type`."},{"pos":[7876,7907],"content":"reverse_iterator::iterator_type"},{"pos":[7911,7981],"content":"A type that provides the underlying iterator for a <ph id=\"ph1\">`reverse_iterator`</ph>.","source":"A type that provides the underlying iterator for a `reverse_iterator`."},{"content":"Remarks","pos":[8046,8053]},{"pos":[8057,8117],"content":"The type is a synonym for the template parameter <ph id=\"ph1\">`Iterator`</ph>.","source":"The type is a synonym for the template parameter `Iterator`."},{"content":"Example","pos":[8127,8134]},{"pos":[8139,8250],"content":"See <bpt id=\"p1\">[</bpt>reverse_iterator::base<ept id=\"p1\">](#reverse_iterator__base)</ept> for an example of how to declare and use <ph id=\"ph1\">`iterator_type`</ph>.","source":"See [reverse_iterator::base](#reverse_iterator__base) for an example of how to declare and use `iterator_type`."},{"pos":[8308,8335],"content":"reverse_iterator::operator*"},{"content":"Returns the element that a reverse_iterator addresses.","pos":[8339,8393]},{"content":"Return Value","pos":[8448,8460]},{"content":"The value of the elements addressed by the reverse_iterator.","pos":[8464,8524]},{"content":"Remarks","pos":[8534,8541]},{"pos":[8545,8589],"content":"The operator returns <ph id=\"ph1\">\\*</ph>( <bpt id=\"p1\">**</bpt>current<ept id=\"p1\">**</ept> â€“ 1).","source":"The operator returns \\*( **current** â€“ 1)."},{"content":"Example","pos":[8599,8606]},{"pos":[9745,9772],"content":"reverse_iterator::operator+"},{"pos":[9776,9904],"content":"Adds an offset to an iterator and returns the new <ph id=\"ph1\">`reverse_iterator`</ph> addressing the inserted element at the new offset position.","source":"Adds an offset to an iterator and returns the new `reverse_iterator` addressing the inserted element at the new offset position."},{"content":"Parameters","pos":[10000,10010]},{"content":"The offset to be added to the reverse iterator.","pos":[10023,10070]},{"content":"Return Value","pos":[10080,10092]},{"pos":[10096,10147],"content":"A <ph id=\"ph1\">`reverse_iterator`</ph> addressing the offset element.","source":"A `reverse_iterator` addressing the offset element."},{"content":"Remarks","pos":[10157,10164]},{"pos":[10168,10288],"content":"This member function may only be used if the <ph id=\"ph1\">`reverse_iterator`</ph> satisfies the requirements for a random-access iterator.","source":"This member function may only be used if the `reverse_iterator` satisfies the requirements for a random-access iterator."},{"content":"Example","pos":[10298,10305]},{"pos":[11914,11942],"content":"reverse_iterator::operator++"},{"content":"Increments the reverse_iterator to the previous element.","pos":[11946,12002]},{"content":"Return Value","pos":[12125,12137]},{"pos":[12141,12303],"content":"The first operator returns the preincremented <ph id=\"ph1\">`reverse_iterator`</ph> and the second, the postincrement operator, returns a copy of the incremented <ph id=\"ph2\">`reverse_iterator`</ph>.","source":"The first operator returns the preincremented `reverse_iterator` and the second, the postincrement operator, returns a copy of the incremented `reverse_iterator`."},{"content":"Remarks","pos":[12313,12320]},{"pos":[12324,12444],"content":"This member function may only be used if the <ph id=\"ph1\">`reverse_iterator`</ph> satisfies the requirements for a bidirectional iterator.","source":"This member function may only be used if the `reverse_iterator` satisfies the requirements for a bidirectional iterator."},{"content":"Example","pos":[12454,12461]},{"pos":[14062,14090],"content":"reverse_iterator::operator+="},{"content":"Adds a specified offset from a reverse_iterator.","pos":[14094,14142]},{"content":"Parameters","pos":[14234,14244]},{"content":"The offset by which to increment the iterator.","pos":[14257,14303]},{"content":"Return Value","pos":[14313,14325]},{"pos":[14329,14392],"content":"A reference to the element addressed by the <ph id=\"ph1\">`reverse_iterator`</ph>.","source":"A reference to the element addressed by the `reverse_iterator`."},{"content":"Example","pos":[14402,14409]},{"pos":[15998,16025],"content":"reverse_iterator::operator-"},{"pos":[16029,16154],"content":"Subtracts an offset from a <ph id=\"ph1\">`reverse_iterator`</ph> and returns a <ph id=\"ph2\">`reverse_iterator`</ph> addressing the element at the offset position.","source":"Subtracts an offset from a `reverse_iterator` and returns a `reverse_iterator` addressing the element at the offset position."},{"content":"Parameters","pos":[16250,16260]},{"content":"The offset to be subtracted from the reverse_iterator.","pos":[16273,16327]},{"content":"Return Value","pos":[16337,16349]},{"pos":[16353,16404],"content":"A <ph id=\"ph1\">`reverse_iterator`</ph> addressing the offset element.","source":"A `reverse_iterator` addressing the offset element."},{"content":"Remarks","pos":[16414,16421]},{"pos":[16425,16545],"content":"This member function may only be used if the <ph id=\"ph1\">`reverse_iterator`</ph> satisfies the requirements for a random-access iterator.","source":"This member function may only be used if the `reverse_iterator` satisfies the requirements for a random-access iterator."},{"content":"Example","pos":[16555,16562]},{"pos":[18201,18229],"content":"reverse_iterator::operator--"},{"content":"Decrements the reverse_iterator to the previous element.","pos":[18233,18289]},{"content":"Return Value","pos":[18412,18424]},{"pos":[18428,18590],"content":"The first operator returns the predecremented <ph id=\"ph1\">`reverse_iterator`</ph> and the second, the postdecrement operator, returns a copy of the decremented <ph id=\"ph2\">`reverse_iterator`</ph>.","source":"The first operator returns the predecremented `reverse_iterator` and the second, the postdecrement operator, returns a copy of the decremented `reverse_iterator`."},{"content":"Remarks","pos":[18600,18607]},{"pos":[18611,18731],"content":"This member function may only be used if the <ph id=\"ph1\">`reverse_iterator`</ph> satisfies the requirements for a bidirectional iterator.","source":"This member function may only be used if the `reverse_iterator` satisfies the requirements for a bidirectional iterator."},{"content":"Example","pos":[18741,18748]},{"pos":[20361,20389],"content":"reverse_iterator::operator-="},{"pos":[20393,20448],"content":"Subtracts a specified offset from a <ph id=\"ph1\">`reverse_iterator`</ph>.","source":"Subtracts a specified offset from a `reverse_iterator`."},{"content":"Parameters","pos":[20540,20550]},{"content":"The offset to be subtracted from the <ph id=\"ph1\">`reverse_iterator`</ph>.","pos":[20563,20619],"source":" The offset to be subtracted from the `reverse_iterator`."},{"content":"Remarks","pos":[20629,20636]},{"pos":[20640,20760],"content":"This member function may only be used if the <ph id=\"ph1\">`reverse_iterator`</ph> satisfies the requirements for a random-access iterator.","source":"This member function may only be used if the `reverse_iterator` satisfies the requirements for a random-access iterator."},{"content":"The operator evaluates <bpt id=\"p1\">**</bpt>current<ept id=\"p1\">**</ept> + _ <bpt id=\"p2\">*</bpt>Off<ept id=\"p2\">*</ept>.","pos":[20767,20812],"source":"The operator evaluates **current** + _ *Off*."},{"content":"then returns <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph>this<ept id=\"p1\">**</ept>.","pos":[20813,20837],"source":" then returns **\\*this**."},{"content":"Example","pos":[20847,20854]},{"pos":[22478,22505],"content":"reverse_iterator::operator-"},{"pos":[22513,22582],"content":"Returns a pointer to the element addressed by the <ph id=\"ph1\">`reverse_iterator`</ph>.","source":"Returns a pointer to the element addressed by the `reverse_iterator`."},{"content":"Return Value","pos":[22636,22648]},{"pos":[22652,22713],"content":"A pointer to the element addressed by the <ph id=\"ph1\">`reverse_iterator`</ph>.","source":"A pointer to the element addressed by the `reverse_iterator`."},{"content":"Remarks","pos":[22723,22730]},{"pos":[22734,22769],"content":"The operator returns <bpt id=\"p1\">**</bpt><ph id=\"ph1\">&amp;\\*\\*</ph>this<ept id=\"p1\">**</ept>.","source":"The operator returns **&\\*\\*this**."},{"content":"Example","pos":[22779,22786]},{"pos":[24541,24569],"content":"reverse_iterator::operator[]"},{"pos":[24573,24700],"content":"Returns a reference to an element offset from the element addressed by a <ph id=\"ph1\">`reverse_iterator`</ph> by a specified number of positions.","source":"Returns a reference to an element offset from the element addressed by a `reverse_iterator` by a specified number of positions."},{"content":"Parameters","pos":[24775,24785]},{"content":"The offset from the <ph id=\"ph1\">`reverse_iterator`</ph> address.","pos":[24798,24845],"source":" The offset from the `reverse_iterator` address."},{"content":"Return Value","pos":[24855,24867]},{"content":"The reference to the element offset.","pos":[24871,24907]},{"content":"Remarks","pos":[24917,24924]},{"pos":[24928,24977],"content":"The operator returns <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>( <bpt id=\"p2\">**</bpt><ph id=\"ph2\">\\*</ph>this<ept id=\"p2\">**</ept><ph id=\"ph3\"> + `Off`</ph>).","source":"The operator returns **\\***( **\\*this** + `Off`)."},{"content":"Example","pos":[24987,24994]},{"pos":[26639,26664],"content":"reverse_iterator::pointer"},{"pos":[26668,26747],"content":"A type that provides a pointer to an element addressed by a <ph id=\"ph1\">`reverse_iterator`</ph>.","source":"A type that provides a pointer to an element addressed by a `reverse_iterator`."},{"content":"Remarks","pos":[26841,26848]},{"pos":[26852,26958],"content":"The type is a synonym for the iterator trait typename <ph id=\"ph1\">`iterator_traits`\\&lt;</ph> <bpt id=\"p1\">*</bpt>RandomIterator<ept id=\"p1\">*</ept><ph id=\"ph2\">&gt; </ph><bpt id=\"p2\">**</bpt>::pointer<ept id=\"p2\">**</ept>.","source":"The type is a synonym for the iterator trait typename `iterator_traits`\\< *RandomIterator*> **::pointer**."},{"content":"Example","pos":[26968,26975]},{"pos":[28640,28667],"content":"reverse_iterator::reference"},{"content":"A type that provides a reference to an element addressed by a reverse_iterator.","pos":[28671,28750]},{"content":"Remarks","pos":[28848,28855]},{"pos":[28859,28967],"content":"The type is a synonym for the iterator trait typename <ph id=\"ph1\">`iterator_traits`\\&lt;</ph> <bpt id=\"p1\">*</bpt>RandomIterator<ept id=\"p1\">*</ept><ph id=\"ph2\">&gt; </ph><bpt id=\"p2\">**</bpt>::reference<ept id=\"p2\">**</ept>.","source":"The type is a synonym for the iterator trait typename `iterator_traits`\\< *RandomIterator*> **::reference**."},{"content":"Example","pos":[28977,28984]},{"pos":[28989,29184],"content":"See <bpt id=\"p1\">[</bpt>reverse_iterator::operator&amp;#91;&amp;#93;<ept id=\"p1\">](#reverse_iterator__operator_at)</ept> or <bpt id=\"p2\">[</bpt>reverse_iterator::operator*<ept id=\"p2\">](#reverse_iterator__operator_star)</ept> for examples of how to declare and use <bpt id=\"p3\">**</bpt>reference<ept id=\"p3\">**</ept>.","source":"See [reverse_iterator::operator&#91;&#93;](#reverse_iterator__operator_at) or [reverse_iterator::operator*](#reverse_iterator__operator_star) for examples of how to declare and use **reference**."},{"pos":[29245,29279],"content":"reverse_iterator::reverse_iterator"},{"pos":[29283,29375],"content":"Constructs a default <ph id=\"ph1\">`reverse_iterator`</ph> or a <ph id=\"ph2\">`reverse_iterator`</ph> from an underlying iterator.","source":"Constructs a default `reverse_iterator` or a `reverse_iterator` from an underlying iterator."},{"content":"Parameters","pos":[29552,29562]},{"content":"The iterator that is to be adapted to a <ph id=\"ph1\">`reverse_iterator`</ph>.","pos":[29578,29637],"source":" The iterator that is to be adapted to a `reverse_iterator`."},{"content":"Return Value","pos":[29647,29659]},{"pos":[29663,29748],"content":"A default <ph id=\"ph1\">`reverse_iterator`</ph> or a <ph id=\"ph2\">`reverse_iterator`</ph> adapting an underlying iterator.","source":"A default `reverse_iterator` or a `reverse_iterator` adapting an underlying iterator."},{"content":"Remarks","pos":[29758,29765]},{"content":"The identity which relates all reverse iterators to their underlying iterators is:","pos":[29769,29851]},{"pos":[29861,29912],"content":"( <ph id=\"ph1\">`reverse_iterator`</ph> ( <bpt id=\"p1\">*</bpt>i<ept id=\"p1\">*</ept> ) ) == &amp;<ph id=\"ph2\">\\*</ph>( <bpt id=\"p2\">*</bpt>i<ept id=\"p2\">*</ept> â€“ 1 ).","source":"( `reverse_iterator` ( *i* ) ) == &\\*( *i* â€“ 1 )."},{"content":"In practice, this means that in the reversed sequence the reverse_iterator will refer to the element one position beyond (to the right of) the element that the iterator had referred to in the original sequence.","pos":[29919,30129]},{"content":"So if an iterator addressed the element 6 in the sequence (2, 4, 6, 8), then the <ph id=\"ph1\">`reverse_iterator`</ph> will address the element 4 in the reversed sequence (8, 6, 4, 2).","pos":[30130,30295],"source":" So if an iterator addressed the element 6 in the sequence (2, 4, 6, 8), then the `reverse_iterator` will address the element 4 in the reversed sequence (8, 6, 4, 2)."},{"content":"Example","pos":[30305,30312]},{"content":"See Also","pos":[31359,31367]},{"content":"iterator&gt;","pos":[31374,31383],"source":"iterator>"},{"content":"Thread Safety in the C++ Standard Library","pos":[31423,31464]},{"content":"C++ Standard Library Reference","pos":[31537,31567]}],"content":"---\ntitle: \"reverse_iterator Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"reverse_iterator\"\n  - \"std::reverse_iterator\"\n  - \"std.reverse_iterator\"\n  - \"xutility/std::reverse_iterator\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"reverse_iterator class\"\nms.assetid: c0b34d04-ae9a-4999-9aff-28b313897ffa\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# reverse_iterator Class\nThe template class is an iterator adaptor that describes a reverse iterator object that behaves like a random-access or bidirectional iterator, only in reverse. It enables the backward traversal of a range.  \n  \n## Syntax  \n  \n```  \ntemplate <class RandomIterator>  \nclass reverse_iterator  \n```  \n  \n#### Parameters  \n RandomIterator  \n The type that represents the iterator to be adapted to operate in reverse.  \n  \n## Remarks  \n Existing Standard Template Library containers also define `reverse_iterator` and `const_reverse_iterator` types and have member functions `rbegin` and `rend` that return reverse iterators. These iterators have overwrite semantics. The `reverse_iterator` adaptor supplements this functionality as offers insert semantics and can also be used with streams.  \n  \n The `reverse_iterator`s that require a bidirectional iterator must not call any of the member functions `operator+=`, `operator+`, `operator-=`, `operator-`, or `operator[]`, which may only be used with random-access iterators.  \n  \n If the range of an iterator is [ ` first`,  last), where the square bracket on the left indicates the inclusion on \\_ *First* and the parenthesis on the right indicates the inclusion of elements up to \\_ *Left* but excluding \\_ *Left* itself. The same elements are included in the reversed sequence [ **rev** â€“ ` first`, **rev** â€“ \\_ *Left*) so that if \\_ *Left* is the one-past-the-end element in a sequence, then the first element **rev** â€“ \\_ *First* in the reversed sequence points to \\*(\\_ *Left* â€“ 1 ). The identity which relates all reverse iterators to their underlying iterators is:  \n  \n &\\*( **reverse_iterator** ( *i* ) ) == &\\*( *i* â€“ 1 ).  \n  \n In practice, this means that in the reversed sequence the reverse_iterator will refer to the element one position beyond (to the right of) the element that the iterator had referred to in the original sequence. So if an iterator addressed the element 6 in the sequence (2, 4, 6, 8), then the `reverse_iterator` will address the element 4 in the reversed sequence (8, 6, 4, 2).  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[reverse_iterator](#reverse_iterator__reverse_iterator)|Constructs a default `reverse_iterator` or a `reverse_iterator` from an underlying iterator.|  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|[difference_type](#reverse_iterator__difference_type)|A type that provides the difference between two `reverse_iterator`s referring to elements within the same container.|  \n|[iterator_type](#reverse_iterator__iterator_type)|A type that provides the underlying iterator for a `reverse_iterator`.|  \n|[pointer](#reverse_iterator__pointer)|A type that provides a pointer to an element addressed by a `reverse_iterator`.|  \n|[reference](#reverse_iterator__reference)|A type that provides a reference to an element addressed by a `reverse_iterator`.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[base](#reverse_iterator__base)|Recovers the underlying iterator from its `reverse_iterator`.|  \n  \n### Operators  \n  \n|||  \n|-|-|  \n|[operator_star](#reverse_iterator__operator_star)|Returns the element that a `reverse_iterator` addresses.|  \n|[operator+](#reverse_iterator__operator_add)|Adds an offset to an iterator and returns the new `reverse_iterator` addressing the inserted element at the new offset position.|  \n|[operator++](#reverse_iterator__operator_add_add)|Increments the `reverse_iterator` to the next element.|  \n|[operator+=](#reverse_iterator__operator_add_eq)|Adds a specified offset from a `reverse_iterator`.|  \n|[operator-](#reverse_iterator__operator-)|Subtracts an offset from a `reverse_iterator` and returns a `reverse_iterator` addressing the element at the offset position.|  \n|[operator--](#reverse_iterator__operator--)|Decrements the `reverse_iterator` to the previous element.|  \n|[operator-=](#reverse_iterator__operator-_eq)|Subtracts a specified offset from a `reverse_iterator`.|  \n|[operator->](#reverse_iterator__operator-_gt_)|Returns a pointer to the element addressed by the `reverse_iterator`.|  \n|[operator&#91;&#93;](#reverse_iterator__operator_at)|Returns a reference to an element offset from the element addressed by a `reverse_iterator` by a specified number of positions.|  \n  \n## Requirements  \n **Header:** \\<iterator>  \n  \n **Namespace:** std  \n  \n##  <a name=\"reverse_iterator__base\"></a>  reverse_iterator::base  \n Recovers the underlying iterator from its `reverse_iterator`.  \n  \n```   \nRandomIterator base() const;\n```  \n  \n### Return Value  \n The iterator underlying the `reverse_iterator`.  \n  \n### Remarks  \n The identity that relates all reverse iterators to their underlying iterators is:  \n  \n &\\*( `reverse_iterator` ( *i* ) ) == &\\*( *i* â€“ 1 ).  \n  \n In practice, this means that in the reversed sequence the `reverse_iterator` will refer to the element one position beyond (to the right of) the element that the iterator had referred to in the original sequence. So if an iterator addressed the element 6 in the sequence (2, 4, 6, 8), then the `reverse_iterator` will address the element 4 in the reversed sequence (8, 6, 4, 2).  \n  \n### Example  \n  \n```cpp  \n// reverse_iterator_base.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <algorithm>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   vector<int> vec;  \n   for ( i = 1 ; i < 6 ; ++i )    \n   {  \n      vec.push_back ( 2 * i );  \n   }  \n  \n   vector <int>::iterator vIter;  \n   cout << \"The vector vec is: ( \";  \n   for ( vIter = vec.begin ( ) ; vIter != vec.end ( ); vIter++ )  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n  \n   vector <int>::reverse_iterator rvIter;  \n   cout << \"The vector vec reversed is: ( \";  \n   for ( rvIter = vec.rbegin( ) ; rvIter != vec.rend( ); rvIter++)  \n      cout << *rvIter << \" \";  \n   cout << \").\" << endl;  \n  \n   vector <int>::iterator pos, bpos;  \n   pos = find ( vec.begin ( ), vec.end ( ), 6 );  \n   cout << \"The iterator pos points to: \" << *pos << \".\" << endl;  \n  \n   typedef reverse_iterator<vector<int>::iterator>::iterator_type it_vec_int_type;  \n  \n   reverse_iterator<it_vec_int_type> rpos ( pos );  \n   cout << \"The reverse_iterator rpos points to: \" << *rpos   \n        << \".\" << endl;  \n  \n   bpos = rpos.base ( );  \n   cout << \"The iterator underlying rpos is bpos & it points to: \"   \n        << *bpos << \".\" << endl;  \n}  \n```  \n  \n##  <a name=\"reverse_iterator__difference_type\"></a>  reverse_iterator::difference_type  \n A type that provides the difference between two `reverse_iterator`s referring to elements within the same container.  \n  \n```   \ntypedef typename iterator_traits<RandomIterator>::difference_type  difference_type; \n```  \n  \n### Remarks  \n The `reverse_iterator` difference type is the same as the iterator difference type.  \n  \n The type is a synonym for the iterator trait typename `iterator_traits`\\< **RandomIterator**> **::pointer**.  \n  \n### Example  \n  See [reverse_iterator::operator&#91;&#93;](#reverse_iterator__operator_at) for an example of how to declare and use `difference_type`.  \n  \n##  <a name=\"reverse_iterator__iterator_type\"></a>  reverse_iterator::iterator_type  \n A type that provides the underlying iterator for a `reverse_iterator`.  \n  \n```  \ntypedef RandomIterator iterator_type;  \n```  \n  \n### Remarks  \n The type is a synonym for the template parameter `Iterator`.  \n  \n### Example  \n  See [reverse_iterator::base](#reverse_iterator__base) for an example of how to declare and use `iterator_type`.  \n  \n##  <a name=\"reverse_iterator__operator_star\"></a>  reverse_iterator::operator*  \n Returns the element that a reverse_iterator addresses.  \n  \n```   \nreference operator*() const;\n```  \n  \n### Return Value  \n The value of the elements addressed by the reverse_iterator.  \n  \n### Remarks  \n The operator returns \\*( **current** â€“ 1).  \n  \n### Example  \n  \n```cpp  \n// reverse_iterator_op_ref.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <algorithm>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   vector<int> vec;  \n   for (i = 1 ; i < 6 ; ++i )    \n   {  \n      vec.push_back ( 2 * i );  \n   }  \n  \n   vector <int>::iterator vIter;  \n   cout << \"The vector vec is: ( \";  \n   for ( vIter = vec.begin ( ) ; vIter != vec.end ( ); vIter++ )  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n  \n   vector <int>::reverse_iterator rvIter;  \n   cout << \"The vector vec reversed is: ( \";  \n   for ( rvIter = vec.rbegin( ) ; rvIter != vec.rend( ); rvIter++)  \n      cout << *rvIter << \" \";  \n   cout << \").\" << endl;  \n  \n   vector <int>::iterator pos, bpos;  \n   pos = find ( vec.begin ( ), vec.end ( ), 6 );  \n  \n   // Declare a difference type for a parameter  \n   // declare a reference return type  \n   reverse_iterator<vector<int>::iterator>::reference refpos = *pos;  \n   cout << \"The iterator pos points to: \" << refpos << \".\" << endl;  \n}  \n```  \n  \n##  <a name=\"reverse_iterator__operator_add\"></a>  reverse_iterator::operator+  \n Adds an offset to an iterator and returns the new `reverse_iterator` addressing the inserted element at the new offset position.  \n  \n```  \nreverse_iterator<RandomIterator> operator+(difference_type Off) const;\n```  \n  \n### Parameters  \n `Off`  \n The offset to be added to the reverse iterator.  \n  \n### Return Value  \n A `reverse_iterator` addressing the offset element.  \n  \n### Remarks  \n This member function may only be used if the `reverse_iterator` satisfies the requirements for a random-access iterator.  \n  \n### Example  \n  \n```cpp  \n// reverse_iterator_op_add.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   vector<int> vec;  \n   for (i = 1 ; i < 6 ; ++i )    \n   {  \n      vec.push_back ( 2 * i );  \n   }  \n  \n   vector <int>::iterator vIter;  \n   cout << \"The vector vec is: ( \";  \n   for ( vIter = vec.begin( ) ; vIter != vec.end( ); vIter++)  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n  \n   vector <int>::reverse_iterator rvIter;  \n   cout << \"The vector vec reversed is: ( \";  \n   for ( rvIter = vec.rbegin( ) ; rvIter != vec.rend( ); rvIter++)  \n      cout << *rvIter << \" \";  \n   cout << \").\" << endl;  \n  \n   // Initializing reverse_iterators to the first element  \n   vector <int>::reverse_iterator rVPOS1 = vec.rbegin ( );  \n  \n   cout << \"The iterator rVPOS1 initially points to the first \"  \n        << \"element\\n in the reversed sequence: \"  \n        << *rVPOS1 << \".\" << endl;  \n  \n   vector <int>::reverse_iterator rVPOS2 =rVPOS1 + 2; // offset added  \n   cout << \"After the +2 offset, the iterator rVPOS2 points\\n\"  \n        << \" to the 3rd element in the reversed sequence: \"  \n        << *rVPOS2 << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe vector vec is: ( 2 4 6 8 10 ).  \nThe vector vec reversed is: ( 10 8 6 4 2 ).  \nThe iterator rVPOS1 initially points to the first element  \n in the reversed sequence: 10.  \nAfter the +2 offset, the iterator rVPOS2 points  \n to the 3rd element in the reversed sequence: 6.  \n```  \n  \n##  <a name=\"reverse_iterator__operator_add_add\"></a>  reverse_iterator::operator++  \n Increments the reverse_iterator to the previous element.  \n  \n```  \nreverse_iterator<RandomIterator>& operator++();\nreverse_iterator<RandomIterator> operator++(int);\n```  \n  \n### Return Value  \n The first operator returns the preincremented `reverse_iterator` and the second, the postincrement operator, returns a copy of the incremented `reverse_iterator`.  \n  \n### Remarks  \n This member function may only be used if the `reverse_iterator` satisfies the requirements for a bidirectional iterator.  \n  \n### Example  \n  \n```cpp  \n// reverse_iterator_op_incr.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   vector<int> vec;  \n   for ( i = 1 ; i < 6 ; ++i )    \n   {  \n      vec.push_back ( 2 * i - 1 );  \n   }  \n  \n   vector <int>::iterator vIter;  \n   cout << \"The vector vec is: ( \";  \n   for ( vIter = vec.begin( ) ; vIter != vec.end( ); vIter++)  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n  \n   vector <int>::reverse_iterator rvIter;  \n   cout << \"The vector vec reversed is: ( \";  \n   for ( rvIter = vec.rbegin( ) ; rvIter != vec.rend( ); rvIter++)  \n      cout << *rvIter << \" \";  \n   cout << \").\" << endl;  \n  \n   // Initializing reverse_iterators to the last element  \n   vector <int>::reverse_iterator rVPOS1 = vec.rbegin( );  \n  \n   cout << \"The iterator rVPOS1 initially points to the first \"  \n        << \"element\\n in the reversed sequence: \"  \n        << *rVPOS1 << \".\" << endl;  \n  \n   rVPOS1++;  // postincrement, preincrement: ++rVPSO1  \n  \n   cout << \"After incrementing, the iterator rVPOS1 points\\n\"  \n        << \" to the second element in the reversed sequence: \"  \n        << *rVPOS1 << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe vector vec is: ( 1 3 5 7 9 ).  \nThe vector vec reversed is: ( 9 7 5 3 1 ).  \nThe iterator rVPOS1 initially points to the first element  \n in the reversed sequence: 9.  \nAfter incrementing, the iterator rVPOS1 points  \n to the second element in the reversed sequence: 7.  \n```  \n  \n##  <a name=\"reverse_iterator__operator_add_eq\"></a>  reverse_iterator::operator+=  \n Adds a specified offset from a reverse_iterator.  \n  \n```  \nreverse_iterator<RandomIterator>& operator+=(difference_type Off);\n```  \n  \n### Parameters  \n `Off`  \n The offset by which to increment the iterator.  \n  \n### Return Value  \n A reference to the element addressed by the `reverse_iterator`.  \n  \n### Example  \n  \n```cpp  \n// reverse_iterator_op_addoff.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   vector<int> vec;  \n   for (i = 1 ; i < 6 ; ++i )   \n   {  \n      vec.push_back ( 2 * i );  \n   }  \n  \n   vector <int>::iterator vIter;  \n  \n   cout << \"The vector vec is: ( \";  \n   for ( vIter = vec.begin( ) ; vIter != vec.end( ); vIter++)  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n  \n   vector <int>::reverse_iterator rvIter;  \n   cout << \"The vector vec reversed is: ( \";  \n   for ( rvIter = vec.rbegin( ) ; rvIter != vec.rend( ); rvIter++)  \n      cout << *rvIter << \" \";  \n   cout << \").\" << endl;  \n  \n   // Initializing reverse_iterators to the last element  \n   vector <int>::reverse_iterator rVPOS1 = vec.rbegin ( );  \n  \n   cout << \"The iterator rVPOS1 initially points to the first \"  \n        << \"element\\n in the reversed sequence: \"  \n        << *rVPOS1 << \".\" << endl;  \n  \n   rVPOS1+=2;   // addition of an offset  \n   cout << \"After the +2 offset, the iterator rVPOS1 now points\\n\"  \n        << \" to the third element in the reversed sequence: \"  \n        << *rVPOS1 << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe vector vec is: ( 2 4 6 8 10 ).  \nThe vector vec reversed is: ( 10 8 6 4 2 ).  \nThe iterator rVPOS1 initially points to the first element  \n in the reversed sequence: 10.  \nAfter the +2 offset, the iterator rVPOS1 now points  \n to the third element in the reversed sequence: 6.  \n```  \n  \n##  <a name=\"reverse_iterator__operator-\"></a>  reverse_iterator::operator-  \n Subtracts an offset from a `reverse_iterator` and returns a `reverse_iterator` addressing the element at the offset position.  \n  \n```  \nreverse_iterator<RandomIterator> operator-(difference_type Off) const;\n```  \n  \n### Parameters  \n `Off`  \n The offset to be subtracted from the reverse_iterator.  \n  \n### Return Value  \n A `reverse_iterator` addressing the offset element.  \n  \n### Remarks  \n This member function may only be used if the `reverse_iterator` satisfies the requirements for a random-access iterator.  \n  \n### Example  \n  \n```cpp  \n// reverse_iterator_op_sub.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   vector<int> vec;  \n   for ( i = 1 ; i < 6 ; ++i )  \n   {  \n      vec.push_back ( 3 * i );  \n   }  \n  \n   vector <int>::iterator vIter;  \n  \n   cout << \"The vector vec is: ( \";  \n   for ( vIter = vec.begin( ) ; vIter != vec.end( ); vIter++)  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n  \n   vector <int>::reverse_iterator rvIter;  \n   cout << \"The vector vec reversed is: ( \";  \n   for ( rvIter = vec.rbegin( ) ; rvIter != vec.rend( ); rvIter++)  \n      cout << *rvIter << \" \";  \n   cout << \").\" << endl;  \n  \n   // Initializing reverse_iterators to the first element  \n   vector <int>::reverse_iterator rVPOS1 = vec.rend ( ) - 1;  \n  \n   cout << \"The iterator rVPOS1 initially points to the last \"  \n        << \"element\\n in the reversed sequence: \"  \n        << *rVPOS1 << \".\" << endl;  \n  \n   vector <int>::reverse_iterator rVPOS2 =rVPOS1 - 2; // offset subtracted  \n   cout << \"After the -2 offset, the iterator rVPOS2 points\\n\"  \n        << \" to the 2nd element from the last in the reversed sequence: \"  \n        << *rVPOS2 << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe vector vec is: ( 3 6 9 12 15 ).  \nThe vector vec reversed is: ( 15 12 9 6 3 ).  \nThe iterator rVPOS1 initially points to the last element  \n in the reversed sequence: 3.  \nAfter the -2 offset, the iterator rVPOS2 points  \n to the 2nd element from the last in the reversed sequence: 9.  \n```  \n  \n##  <a name=\"reverse_iterator__operator--\"></a>  reverse_iterator::operator--  \n Decrements the reverse_iterator to the previous element.  \n  \n```  \nreverse_iterator<RandomIterator>& operator--();\nreverse_iterator<RandomIterator> operator--(int);\n```  \n  \n### Return Value  \n The first operator returns the predecremented `reverse_iterator` and the second, the postdecrement operator, returns a copy of the decremented `reverse_iterator`.  \n  \n### Remarks  \n This member function may only be used if the `reverse_iterator` satisfies the requirements for a bidirectional iterator.  \n  \n### Example  \n  \n```cpp  \n// reverse_iterator_op_decr.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   vector<int> vec;  \n   for (i = 1 ; i < 6 ; ++i )    \n   {  \n      vec.push_back ( 2 * i - 1 );  \n   }  \n  \n   vector <int>::iterator vIter;  \n  \n   cout << \"The vector vec is: ( \";  \n   for ( vIter = vec.begin( ) ; vIter != vec.end( ); vIter++)  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n  \n   vector <int>::reverse_iterator rvIter;  \n   cout << \"The vector vec reversed is: ( \";  \n   for ( rvIter = vec.rbegin( ) ; rvIter != vec.rend( ); rvIter++)  \n      cout << *rvIter << \" \";  \n   cout << \").\" << endl;  \n  \n   // Initializing reverse_iterators to the first element  \n   vector <int>::reverse_iterator rVPOS1 = vec.rend ( ) - 1;  \n  \n   cout << \"The iterator rVPOS1 initially points to the last \"  \n        << \"element\\n in the reversed sequence: \"  \n        << *rVPOS1 << \".\" << endl;  \n   rVPOS1--;  // postdecrement, predecrement: --rVPSO1  \n  \n   cout << \"After the decrement, the iterator rVPOS1 points\\n\"  \n        << \" to the next-to-last element in the reversed sequence: \"  \n        << *rVPOS1 << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe vector vec is: ( 1 3 5 7 9 ).  \nThe vector vec reversed is: ( 9 7 5 3 1 ).  \nThe iterator rVPOS1 initially points to the last element  \n in the reversed sequence: 1.  \nAfter the decrement, the iterator rVPOS1 points  \n to the next-to-last element in the reversed sequence: 3.  \n```  \n  \n##  <a name=\"reverse_iterator__operator-_eq\"></a>  reverse_iterator::operator-=  \n Subtracts a specified offset from a `reverse_iterator`.  \n  \n```  \nreverse_iterator<RandomIterator>& operator-=(difference_type Off);\n```  \n  \n### Parameters  \n `Off`  \n The offset to be subtracted from the `reverse_iterator`.  \n  \n### Remarks  \n This member function may only be used if the `reverse_iterator` satisfies the requirements for a random-access iterator.  \n  \n The operator evaluates **current** + _ *Off*. then returns **\\*this**.  \n  \n### Example  \n  \n```cpp  \n// reverse_iterator_op_suboff.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   vector<int> vec;  \n   for (i = 1 ; i < 6 ; ++i )  \n   {  \n      vec.push_back ( 3 * i );  \n   }  \n  \n   vector <int>::iterator vIter;  \n  \n   cout << \"The vector vec is: ( \";  \n   for ( vIter = vec.begin( ) ; vIter != vec.end( ); vIter++)  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n  \n   vector <int>::reverse_iterator rvIter;  \n   cout << \"The vector vec reversed is: ( \";  \n   for ( rvIter = vec.rbegin( ) ; rvIter != vec.rend( ); rvIter++)  \n      cout << *rvIter << \" \";  \n   cout << \").\" << endl;  \n  \n   // Initializing reverse_iterators to the first element  \n   vector <int>::reverse_iterator rVPOS1 = vec.rend ( ) - 1;  \n  \n   cout << \"The iterator rVPOS1 initially points to the last \"  \n        << \"element\\n in the reversed sequence: \"  \n        << *rVPOS1 << \".\" << endl;  \n  \n   rVPOS1-=2;      // Subtraction of an offset  \n   cout << \"After the -2 offset, the iterator rVPOS1 now points\\n\"  \n        << \" to the 2nd element from the last in the reversed sequence: \"  \n        << *rVPOS1 << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe vector vec is: ( 3 6 9 12 15 ).  \nThe vector vec reversed is: ( 15 12 9 6 3 ).  \nThe iterator rVPOS1 initially points to the last element  \n in the reversed sequence: 3.  \nAfter the -2 offset, the iterator rVPOS1 now points  \n to the 2nd element from the last in the reversed sequence: 9.  \n```  \n  \n##  <a name=\"reverse_iterator__operator-_gt_\"></a>  reverse_iterator::operator-&gt;  \n Returns a pointer to the element addressed by the `reverse_iterator`.  \n  \n```   \npointer operator->() const;\n```  \n  \n### Return Value  \n A pointer to the element addressed by the `reverse_iterator`.  \n  \n### Remarks  \n The operator returns **&\\*\\*this**.  \n  \n### Example  \n  \n```cpp  \n// reverse_iterator_ptrto.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <algorithm>  \n#include <vector>  \n#include <utility>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   typedef vector<pair<int,int> > pVector;  \n   pVector vec;  \n   vec.push_back(pVector::value_type(1,2));  \n   vec.push_back(pVector::value_type(3,4));  \n   vec.push_back(pVector::value_type(5,6));  \n  \n   pVector::iterator pvIter;  \n   cout << \"The vector vec of integer pairs is:\\n( \";  \n   for ( pvIter = vec.begin ( ) ; pvIter != vec.end ( ); pvIter++)  \n      cout << \"( \" << pvIter -> first << \", \" << pvIter -> second << \") \";  \n   cout << \")\" << endl << endl;  \n  \n   pVector::reverse_iterator rpvIter;  \n   cout << \"The vector vec reversed is:\\n( \";  \n   for ( rpvIter = vec.rbegin( ) ; rpvIter != vec.rend( ); rpvIter++ )  \n      cout << \"( \" << rpvIter -> first << \", \" << rpvIter -> second << \") \";  \n   cout << \")\" << endl << endl;  \n  \n   pVector::iterator pos = vec.begin ( );  \n   pos++;  \n   cout << \"The iterator pos points to:\\n( \" << pos -> first << \", \"   \n   << pos -> second << \" )\" << endl << endl;  \n  \n   pVector::reverse_iterator rpos (pos);   \n  \n   // Use operator -> with return type: why type int and not int*  \n   int fint = rpos -> first;  \n   int sint = rpos -> second;  \n  \n   cout << \"The reverse_iterator rpos points to:\\n( \" << fint << \", \"   \n   << sint << \" )\" << endl;  \n}  \n```  \n  \n```Output  \nThe vector vec of integer pairs is:  \n( ( 1, 2) ( 3, 4) ( 5, 6) )  \n  \nThe vector vec reversed is:  \n( ( 5, 6) ( 3, 4) ( 1, 2) )  \n  \nThe iterator pos points to:  \n( 3, 4 )  \n  \nThe reverse_iterator rpos points to:  \n( 1, 2 )  \n```  \n  \n##  <a name=\"reverse_iterator__operator_at\"></a>  reverse_iterator::operator[]  \n Returns a reference to an element offset from the element addressed by a `reverse_iterator` by a specified number of positions.  \n  \n```   \nreference operator[](difference_type Off) const;\n```  \n  \n### Parameters  \n `Off`  \n The offset from the `reverse_iterator` address.  \n  \n### Return Value  \n The reference to the element offset.  \n  \n### Remarks  \n The operator returns **\\***( **\\*this** + `Off`).  \n  \n### Example  \n  \n```cpp  \n// reverse_iterator_ret_ref.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <algorithm>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   vector<int> vec;  \n   for (i = 1 ; i < 6 ; ++i )  \n   {  \n      vec.push_back ( 2 * i );  \n   }  \n  \n   vector <int>::iterator vIter;  \n   cout << \"The vector vec is: ( \";  \n   for ( vIter = vec.begin ( ) ; vIter != vec.end ( ); vIter++ )  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n  \n   vector <int>::reverse_iterator rvIter;  \n   cout << \"The vector vec reversed is: ( \";  \n   for ( rvIter = vec.rbegin( ) ; rvIter != vec.rend( ); rvIter++)  \n      cout << *rvIter << \" \";  \n   cout << \").\" << endl;  \n  \n   vector <int>::iterator pos;  \n   pos = find ( vec.begin ( ), vec.end ( ), 8 );  \n   reverse_iterator<vector<int>::iterator> rpos ( pos );  \n  \n   // Declare a difference type for a parameter  \n   reverse_iterator<vector<int>::iterator>::difference_type diff = 2;  \n  \n   cout << \"The iterator pos points to: \" << *pos << \".\" << endl;  \n   cout << \"The iterator rpos points to: \" << *rpos << \".\" << endl;  \n  \n   // Declare a reference return type & use operator[]  \n   reverse_iterator<vector<int>::iterator>::reference refrpos = rpos [diff];  \n   cout << \"The iterator rpos now points to: \" << refrpos << \".\" << endl;     \n}  \n```  \n  \n```Output  \nThe vector vec is: ( 2 4 6 8 10 ).  \nThe vector vec reversed is: ( 10 8 6 4 2 ).  \nThe iterator pos points to: 8.  \nThe iterator rpos points to: 6.  \nThe iterator rpos now points to: 2.  \n```  \n  \n##  <a name=\"reverse_iterator__pointer\"></a>  reverse_iterator::pointer  \n A type that provides a pointer to an element addressed by a `reverse_iterator`.  \n  \n```  \ntypedef typename iterator_traits<RandomIterator>::pointer pointer;  \n```  \n  \n### Remarks  \n The type is a synonym for the iterator trait typename `iterator_traits`\\< *RandomIterator*> **::pointer**.  \n  \n### Example  \n  \n```cpp  \n// reverse_iterator_pointer.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <algorithm>  \n#include <vector>  \n#include <utility>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   typedef vector<pair<int,int> > pVector;  \n   pVector vec;  \n   vec.push_back( pVector::value_type( 1,2 ) );  \n   vec.push_back( pVector::value_type( 3,4 ) );  \n   vec.push_back( pVector::value_type( 5,6 ) );  \n  \n   pVector::iterator pvIter;  \n   cout << \"The vector vec of integer pairs is:\\n\" << \"( \";  \n   for ( pvIter = vec.begin ( ) ; pvIter != vec.end ( ); pvIter++)  \n      cout << \"( \" << pvIter -> first << \", \" << pvIter -> second << \") \";  \n   cout << \")\" << endl;  \n  \n   pVector::reverse_iterator rpvIter;  \n   cout << \"\\nThe vector vec reversed is:\\n\" << \"( \";  \n   for ( rpvIter = vec.rbegin( ) ; rpvIter != vec.rend( ); rpvIter++)  \n      cout << \"( \" << rpvIter -> first << \", \" << rpvIter -> second << \") \";  \n   cout << \")\" << endl;  \n  \n   pVector::iterator pos = vec.begin ( );  \n   pos++;  \n   cout << \"\\nThe iterator pos points to:\\n\"  \n        << \"( \" << pos -> first << \", \"  \n        << pos -> second << \" )\" << endl;  \n  \n   pVector::reverse_iterator rpos (pos);  \n   cout << \"\\nThe iterator rpos points to:\\n\"  \n        << \"( \" << rpos -> first << \", \"  \n        << rpos -> second << \" )\" << endl;  \n}  \n```  \n  \n```Output  \nThe vector vec of integer pairs is:  \n( ( 1, 2) ( 3, 4) ( 5, 6) )  \n  \nThe vector vec reversed is:  \n( ( 5, 6) ( 3, 4) ( 1, 2) )  \n  \nThe iterator pos points to:  \n( 3, 4 )  \n  \nThe iterator rpos points to:  \n( 1, 2 )  \n```  \n  \n##  <a name=\"reverse_iterator__reference\"></a>  reverse_iterator::reference  \n A type that provides a reference to an element addressed by a reverse_iterator.  \n  \n```  \ntypedef typename iterator_traits<RandomIterator>::reference reference;  \n```  \n  \n### Remarks  \n The type is a synonym for the iterator trait typename `iterator_traits`\\< *RandomIterator*> **::reference**.  \n  \n### Example  \n  See [reverse_iterator::operator&#91;&#93;](#reverse_iterator__operator_at) or [reverse_iterator::operator*](#reverse_iterator__operator_star) for examples of how to declare and use **reference**.  \n  \n##  <a name=\"reverse_iterator__reverse_iterator\"></a>  reverse_iterator::reverse_iterator  \n Constructs a default `reverse_iterator` or a `reverse_iterator` from an underlying iterator.  \n  \n```   \nreverse_iterator();  \nexplicit reverse_iterator(RandomIterator right);\n\ntemplate <class Type>  \nreverse_iterator(const reverse_iterator<Type>& right);\n```  \n  \n### Parameters  \n ` right`  \n The iterator that is to be adapted to a `reverse_iterator`.  \n  \n### Return Value  \n A default `reverse_iterator` or a `reverse_iterator` adapting an underlying iterator.  \n  \n### Remarks  \n The identity which relates all reverse iterators to their underlying iterators is:  \n  \n &\\*( `reverse_iterator` ( *i* ) ) == &\\*( *i* â€“ 1 ).  \n  \n In practice, this means that in the reversed sequence the reverse_iterator will refer to the element one position beyond (to the right of) the element that the iterator had referred to in the original sequence. So if an iterator addressed the element 6 in the sequence (2, 4, 6, 8), then the `reverse_iterator` will address the element 4 in the reversed sequence (8, 6, 4, 2).  \n  \n### Example  \n  \n```cpp  \n// reverse_iterator_reverse_iterator.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <algorithm>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   vector<int> vec;  \n   for ( i = 1 ; i < 6 ; ++i )  \n   {  \n      vec.push_back ( i );  \n   }  \n  \n   vector <int>::iterator vIter;  \n   cout << \"The vector vec is: ( \";  \n   for ( vIter = vec.begin ( ) ; vIter != vec.end ( ); vIter++)  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n  \n   vector <int>::reverse_iterator rvIter;  \n   cout << \"The vector vec reversed is: ( \";  \n   for ( rvIter = vec.rbegin( ) ; rvIter != vec.rend( ); rvIter++)  \n      cout << *rvIter << \" \";  \n   cout << \").\" << endl;  \n  \n   vector <int>::iterator pos;  \n   pos = find ( vec.begin ( ), vec.end ( ), 4 );  \n   cout << \"The iterator pos = \" << *pos << \".\" << endl;  \n  \n   vector <int>::reverse_iterator rpos ( pos );  \n   cout << \"The reverse_iterator rpos = \" << *rpos   \n        << \".\" << endl;  \n}  \n```  \n  \n## See Also  \n [\\<iterator>](../standard-library/iterator.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n"}