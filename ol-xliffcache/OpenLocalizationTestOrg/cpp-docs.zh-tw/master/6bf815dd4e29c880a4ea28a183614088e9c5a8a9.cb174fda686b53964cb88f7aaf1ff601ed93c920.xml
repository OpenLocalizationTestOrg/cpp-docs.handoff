{"nodes":[{"pos":[12,51],"content":"return Statement (C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"return Statement (C++) | Microsoft Docs","pos":[0,39]}]},{"content":"return Statement (C++)","pos":[671,693]},{"content":"Terminates the execution of a function and returns control to the calling function (or to the operating system if you transfer control from the <ph id=\"ph1\">`main`</ph> function).","pos":[694,855],"source":"Terminates the execution of a function and returns control to the calling function (or to the operating system if you transfer control from the `main` function)."},{"content":"Execution resumes in the calling function at the point immediately following the call.","pos":[856,942]},{"content":"Syntax","pos":[951,957]},{"content":"Remarks","pos":[1004,1011]},{"content":"The <ph id=\"ph1\">`expression`</ph> clause, if present, is converted to the type specified in the function declaration, as if an initialization were being performed.","pos":[1015,1161],"source":"The `expression` clause, if present, is converted to the type specified in the function declaration, as if an initialization were being performed."},{"content":"Conversion from the type of the expression to the <ph id=\"ph1\">`return`</ph> type of the function can create temporary objects.","pos":[1162,1271],"source":" Conversion from the type of the expression to the `return` type of the function can create temporary objects."},{"content":"For more information about how and when temporaries are created, see <bpt id=\"p1\">[</bpt>Temporary Objects<ept id=\"p1\">](../cpp/temporary-objects.md)</ept>.","pos":[1272,1390],"source":" For more information about how and when temporaries are created, see [Temporary Objects](../cpp/temporary-objects.md)."},{"content":"The value of the <ph id=\"ph1\">`expression`</ph> clause is returned to the calling function.","pos":[1397,1470],"source":"The value of the `expression` clause is returned to the calling function."},{"content":"If the expression is omitted, the return value of the function is undefined.","pos":[1471,1547]},{"content":"Constructors and destructors, and functions of type <ph id=\"ph1\">`void`</ph>,cannot specify an expression in the <ph id=\"ph2\">`return`</ph> statement.","pos":[1548,1662],"source":" Constructors and destructors, and functions of type `void`,cannot specify an expression in the `return` statement."},{"content":"Functions of all other types must specify an expression in the <ph id=\"ph1\">`return`</ph> statement.","pos":[1663,1745],"source":" Functions of all other types must specify an expression in the `return` statement."},{"content":"When the flow of control exits the block enclosing the function definition, the result is the same as it would be if a <ph id=\"ph1\">`return`</ph> statement without an expression had been executed.","pos":[1752,1930],"source":"When the flow of control exits the block enclosing the function definition, the result is the same as it would be if a `return` statement without an expression had been executed."},{"content":"This is invalid for functions that are declared as returning a value.","pos":[1931,2000]},{"pos":[2007,2061],"content":"A function can have any number of <ph id=\"ph1\">`return`</ph> statements.","source":"A function can have any number of `return` statements."},{"pos":[2068,2173],"content":"The following example uses an expression with a <ph id=\"ph1\">`return`</ph> statement to obtain the largest of two integers.","source":"The following example uses an expression with a `return` statement to obtain the largest of two integers."},{"content":"Example","pos":[2182,2189]},{"content":"See Also","pos":[2452,2460]},{"content":"Jump Statements","pos":[2465,2480]},{"content":"Keywords","pos":[2518,2526]}],"content":"---\ntitle: \"return Statement (C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"return\"\n  - \"return_cpp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"return keyword [C++], syntax\"\n  - \"return keyword [C++]\"\nms.assetid: a498903a-056a-4df0-a6cf-72f633a62210\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# return Statement (C++)\nTerminates the execution of a function and returns control to the calling function (or to the operating system if you transfer control from the `main` function). Execution resumes in the calling function at the point immediately following the call.  \n  \n## Syntax  \n  \n```  \nreturn [expression];  \n```  \n  \n## Remarks  \n The `expression` clause, if present, is converted to the type specified in the function declaration, as if an initialization were being performed. Conversion from the type of the expression to the `return` type of the function can create temporary objects. For more information about how and when temporaries are created, see [Temporary Objects](../cpp/temporary-objects.md).  \n  \n The value of the `expression` clause is returned to the calling function. If the expression is omitted, the return value of the function is undefined. Constructors and destructors, and functions of type `void`,cannot specify an expression in the `return` statement. Functions of all other types must specify an expression in the `return` statement.  \n  \n When the flow of control exits the block enclosing the function definition, the result is the same as it would be if a `return` statement without an expression had been executed. This is invalid for functions that are declared as returning a value.  \n  \n A function can have any number of `return` statements.  \n  \n The following example uses an expression with a `return` statement to obtain the largest of two integers.  \n  \n## Example  \n  \n```  \n// return_statement2.cpp  \n#include <stdio.h>  \n  \nint max ( int a, int b )  \n{  \n   return ( a > b ? a : b );  \n}  \n  \nint main()  \n{  \n    int nOne = 5;  \n    int nTwo = 7;  \n  \n    printf_s(\"\\n%d is bigger\\n\", max( nOne, nTwo ));  \n}  \n```  \n  \n## See Also  \n [Jump Statements](../cpp/jump-statements-cpp.md)   \n [Keywords](../cpp/keywords-cpp.md)"}