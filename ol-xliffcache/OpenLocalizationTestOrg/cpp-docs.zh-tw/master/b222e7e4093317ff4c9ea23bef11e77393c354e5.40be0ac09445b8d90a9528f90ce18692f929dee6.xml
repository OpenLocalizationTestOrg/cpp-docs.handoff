{"nodes":[{"pos":[12,45],"content":"is, isw Routines | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"is, isw Routines | Microsoft Docs","pos":[0,33]}]},{"content":"is, isw Routines","pos":[781,797]},{"content":"isalnum, iswalnum, _isalnum_l, _iswalnum_l","pos":[814,856]},{"content":"isgraph, iswgraph, _isgraph_l, _iswgraph_l","pos":[932,974]},{"content":"isalpha, iswalpha, _isalpha_l, _iswalpha_l","pos":[1054,1096]},{"content":"isleadbyte, _isleadbyte_l","pos":[1172,1197]},{"content":"isascii, __isascii, iswascii","pos":[1263,1291]},{"content":"islower, iswlower, _islower_l, _iswlower_l","pos":[1354,1396]},{"content":"isblank, iswblank, _isblank_l, _iswblank_l","pos":[1476,1518]},{"content":"isprint, iswprint, _isprint_l, _iswprint_l","pos":[1594,1636]},{"content":"iscntrl, iswcntrl, _iscntrl_l, _iswcntrl_l","pos":[1716,1758]},{"content":"ispunct, iswpunct, _ispunct_l, _iswpunct_l","pos":[1834,1876]},{"content":"iscsym, iscsymf, __iscsym, <ph id=\"ph1\">\\_</ph>_iswcsym, <ph id=\"ph2\">\\_</ph>_iscsymf, <ph id=\"ph3\">\\_</ph>_iswcsymf, _iscsym_l, _iswcsym_l, _iscsymf_l, _iswcsymf_l","pos":[1956,2066],"source":"iscsym, iscsymf, __iscsym, \\__iswcsym, \\__iscsymf, \\__iswcsymf, _iscsym_l, _iswcsym_l, _iscsymf_l, _iswcsymf_l"},{"content":"isspace, iswspace, _isspace_l, _iswspace_l","pos":[2121,2163]},{"content":"_isctype, iswctype, _isctype_l, _iswctype_l","pos":[2243,2286]},{"content":"isupper, _isupper_l, iswupper, _iswupper_l","pos":[2362,2404]},{"content":"isdigit, iswdigit, _isdigit_l, _iswdigit_l","pos":[2484,2526]},{"content":"isxdigit, iswxdigit, _isxdigit_l, _iswxdigit_l","pos":[2602,2648]},{"content":"Remarks","pos":[2736,2743]},{"content":"These routines test characters for specified conditions.","pos":[2747,2803]},{"content":"The <bpt id=\"p1\">**</bpt>is<ept id=\"p1\">**</ept> routines produce meaningful results for any integer argument from –1 (<ph id=\"ph1\">`EOF`</ph>) to <bpt id=\"p2\">**</bpt>UCHAR_MAX<ept id=\"p2\">**</ept> (0xFF), inclusive.","pos":[2810,2933],"source":"The **is** routines produce meaningful results for any integer argument from –1 (`EOF`) to **UCHAR_MAX** (0xFF), inclusive."},{"content":"The expected argument type is <ph id=\"ph1\">`int`</ph>.","pos":[2934,2970],"source":" The expected argument type is `int`."},{"pos":[2978,3353],"content":"[!CAUTION]\n For the **is** routines, passing an argument of type `char` may yield unpredictable results. An SBCS or MBCS single-byte character of type `char` with a value greater than 0x7F is negative. If a `char` is passed, the compiler may convert the value to a signed `int` or a signed **long**. This value may be sign-extended by the compiler, with unexpected results.","leadings":["","> "],"nodes":[{"content":" For the **is** routines, passing an argument of type `char` may yield unpredictable results. An SBCS or MBCS single-byte character of type `char` with a value greater than 0x7F is negative. If a `char` is passed, the compiler may convert the value to a signed `int` or a signed **long**. This value may be sign-extended by the compiler, with unexpected results.","pos":[11,373],"nodes":[{"content":"For the <bpt id=\"p1\">**</bpt>is<ept id=\"p1\">**</ept> routines, passing an argument of type <ph id=\"ph1\">`char`</ph> may yield unpredictable results.","pos":[1,93],"source":" For the **is** routines, passing an argument of type `char` may yield unpredictable results."},{"content":"An SBCS or MBCS single-byte character of type <ph id=\"ph1\">`char`</ph> with a value greater than 0x7F is negative.","pos":[94,190],"source":" An SBCS or MBCS single-byte character of type `char` with a value greater than 0x7F is negative."},{"content":"If a <ph id=\"ph1\">`char`</ph> is passed, the compiler may convert the value to a signed <ph id=\"ph2\">`int`</ph> or a signed <bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept>.","pos":[191,288],"source":" If a `char` is passed, the compiler may convert the value to a signed `int` or a signed **long**."},{"content":"This value may be sign-extended by the compiler, with unexpected results.","pos":[289,362]}]}]},{"content":"The <bpt id=\"p1\">**</bpt>isw<ept id=\"p1\">**</ept> routines produce meaningful results for any integer value from – 1 (<bpt id=\"p2\">**</bpt>WEOF<ept id=\"p2\">**</ept>) to 0xFFFF, inclusive.","pos":[3360,3471],"source":"The **isw** routines produce meaningful results for any integer value from – 1 (**WEOF**) to 0xFFFF, inclusive."},{"content":"The <bpt id=\"p1\">**</bpt>wint_t<ept id=\"p1\">**</ept> data type is defined in WCHAR.H as an <bpt id=\"p2\">**</bpt>unsigned short<ept id=\"p2\">**</ept>; it can hold any wide character or the wide-character end-of-file (<bpt id=\"p3\">**</bpt>WEOF<ept id=\"p3\">**</ept>) value.","pos":[3472,3627],"source":" The **wint_t** data type is defined in WCHAR.H as an **unsigned short**; it can hold any wide character or the wide-character end-of-file (**WEOF**) value."},{"content":"The output value is affected by the setting of the <ph id=\"ph1\">`LC_CTYPE`</ph> category setting of the locale; see <bpt id=\"p1\">[</bpt>setlocale<ept id=\"p1\">](../c-runtime-library/reference/setlocale-wsetlocale.md)</ept> for more information.","pos":[3634,3821],"source":"The output value is affected by the setting of the `LC_CTYPE` category setting of the locale; see [setlocale](../c-runtime-library/reference/setlocale-wsetlocale.md) for more information."},{"content":"The versions of these functions without the <bpt id=\"p1\">**</bpt>_l<ept id=\"p1\">**</ept> suffix use the current locale for this locale-dependent behavior; the versions with the <bpt id=\"p2\">**</bpt>_l<ept id=\"p2\">**</ept> suffix are identical except that they use the locale parameter passed in instead.","pos":[3822,4049],"source":" The versions of these functions without the **_l** suffix use the current locale for this locale-dependent behavior; the versions with the **_l** suffix are identical except that they use the locale parameter passed in instead."},{"pos":[4056,4134],"content":"In the \"C\" locale, the test conditions for the <bpt id=\"p1\">**</bpt>is<ept id=\"p1\">**</ept> routines are as follows:","source":"In the \"C\" locale, the test conditions for the **is** routines are as follows:"},{"content":"Alphanumeric (A – Z, a – z, or 0 – 9).","pos":[4154,4192]},{"content":"Alphabetic (A – Z or a – z).","pos":[4212,4240]},{"content":"ASCII character (0x00 – 0x7F).","pos":[4262,4292]},{"content":"Horizontal tab or space character (0x09 or 0x20).","pos":[4312,4361]},{"content":"Control character (0x00 – 0x1F or 0x7F).","pos":[4381,4421]},{"content":"Letter, underscore, or digit.","pos":[4442,4471]},{"content":"Letter or underscore.","pos":[4493,4514]},{"content":"isdigit","pos":[4523,4530]},{"content":"Decimal digit (0 – 9).","pos":[4536,4558]},{"content":"Printable character except space ( ).","pos":[4578,4615]},{"content":"Lowercase letter (a – z).","pos":[4635,4660]},{"content":"Printable character including space (0x20 – 0x7E).","pos":[4680,4730]},{"content":"Punctuation character.","pos":[4750,4772]},{"content":"White-space character (0x09 – 0x0D or 0x20).","pos":[4792,4836]},{"content":"Uppercase letter (A – Z).","pos":[4856,4881]},{"content":"Hexadecimal digit (A – F, a – f, or 0 – 9).","pos":[4902,4945]},{"content":"For the <bpt id=\"p1\">**</bpt>isw<ept id=\"p1\">**</ept> routines, the result of the test for the specified condition is independent of locale.","pos":[4952,5054],"source":"For the **isw** routines, the result of the test for the specified condition is independent of locale."},{"content":"The test conditions for the <bpt id=\"p1\">**</bpt>isw<ept id=\"p1\">**</ept> functions are as follows:","pos":[5055,5116],"source":" The test conditions for the **isw** functions are as follows:"},{"content":"or <ph id=\"ph1\">`iswdigit`</ph>.","pos":[5148,5162],"source":" or `iswdigit`."},{"content":"Any wide character that is one of an implementation-defined set for which none of <ph id=\"ph1\">`iswcntrl`</ph>, <ph id=\"ph2\">`iswdigit`</ph>, <ph id=\"ph3\">`iswpunct`</ph>, or <ph id=\"ph4\">`iswspace`</ph> is nonzero.","pos":[5183,5326],"source":" Any wide character that is one of an implementation-defined set for which none of `iswcntrl`, `iswdigit`, `iswpunct`, or `iswspace` is nonzero."},{"content":"returns nonzero only for wide characters for which <ph id=\"ph1\">`iswupper`</ph> or <ph id=\"ph2\">`iswlower`</ph> is nonzero.","pos":[5338,5425],"source":" returns nonzero only for wide characters for which `iswupper` or `iswlower` is nonzero."},{"content":"Wide-character representation of ASCII character (0x0000 – 0x007F).","pos":[5446,5513]},{"content":"Wide character that corresponds to the standard space character or is one of an implementation-defined set of wide characters for which <ph id=\"ph1\">`iswalnum`</ph> is false.","pos":[5534,5690],"source":" Wide character that corresponds to the standard space character or is one of an implementation-defined set of wide characters for which `iswalnum` is false."},{"content":"Standard blank characters are space (L' ') and horizontal tab (L'\\t').","pos":[5691,5761]},{"content":"Control wide character.","pos":[5782,5805]},{"content":"__iswcsym","pos":[5814,5823]},{"content":"Any wide character for which <bpt id=\"p1\">**</bpt>isalnum<ept id=\"p1\">**</ept> is true, or the '_' character.","pos":[5829,5900],"source":" Any wide character for which **isalnum** is true, or the '_' character."},{"content":"__iswcsymf","pos":[5909,5919]},{"content":"Any wide character for which <ph id=\"ph1\">`iswalpha`</ph> is true, or the '_' character.","pos":[5925,5995],"source":" Any wide character for which `iswalpha` is true, or the '_' character."},{"content":"Character has property specified by the <ph id=\"ph1\">`desc`</ph> argument.","pos":[6016,6072],"source":" Character has property specified by the `desc` argument."},{"content":"For each valid value of the <ph id=\"ph1\">`desc`</ph> argument of <ph id=\"ph2\">`iswctype`</ph>, there is an equivalent wide-character classification routine, as shown in the following table:","pos":[6073,6226],"source":" For each valid value of the `desc` argument of `iswctype`, there is an equivalent wide-character classification routine, as shown in the following table:"},{"content":"Equivalence of iswctype(","pos":[6235,6259]},{"content":"<bpt id=\"p1\">*</bpt>c, desc<ept id=\"p1\">*</ept> ) to Other isw Testing Routines","pos":[6268,6309],"source":"*c, desc* ) to Other isw Testing Routines"},{"pos":[6318,6342],"content":"Value of <bpt id=\"p1\">*</bpt>desc<ept id=\"p1\">*</ept> argument","source":"Value of *desc* argument"},{"pos":[6343,6375],"content":"iswctype( <bpt id=\"p1\">*</bpt>c, desc<ept id=\"p1\">*</ept> ) equivalent","source":"iswctype( *c, desc* ) equivalent"},{"content":"_ALPHA","pos":[6458,6464]},{"pos":[6467,6490],"content":"<bpt id=\"p1\">**</bpt>iswalpha(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`c`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept>","source":"**iswalpha(** `c` **)**"},{"pos":[6495,6523],"content":"<bpt id=\"p1\">**</bpt>_ALPHA<ept id=\"p1\">**</ept> &amp;#124; <bpt id=\"p2\">**</bpt>_DIGIT<ept id=\"p2\">**</ept>","source":"**_ALPHA** &#124; **_DIGIT**"},{"pos":[6524,6547],"content":"<bpt id=\"p1\">**</bpt>iswalnum(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`c`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept>","source":"**iswalnum(** `c` **)**"},{"content":"_BLANK","pos":[6554,6560]},{"pos":[6563,6586],"content":"<bpt id=\"p1\">**</bpt>iswblank(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`c`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept>","source":"**iswblank(** `c` **)**"},{"content":"_CONTROL","pos":[6593,6601]},{"pos":[6604,6627],"content":"<bpt id=\"p1\">**</bpt>iswcntrl(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`c`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept>","source":"**iswcntrl(** `c` **)**"},{"content":"_DIGIT","pos":[6634,6640]},{"pos":[6643,6666],"content":"<bpt id=\"p1\">**</bpt>iswdigit(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`c`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept>","source":"**iswdigit(** `c` **)**"},{"pos":[6671,6717],"content":"<bpt id=\"p1\">**</bpt>_ALPHA<ept id=\"p1\">**</ept> &amp;#124; <bpt id=\"p2\">**</bpt>_DIGIT<ept id=\"p2\">**</ept> &amp;#124; <bpt id=\"p3\">**</bpt>_PUNCT<ept id=\"p3\">**</ept>","source":"**_ALPHA** &#124; **_DIGIT** &#124; **_PUNCT**"},{"pos":[6718,6741],"content":"<bpt id=\"p1\">**</bpt>iswgraph(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`c`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept>","source":"**iswgraph(** `c` **)**"},{"content":"_LOWER","pos":[6748,6754]},{"pos":[6757,6780],"content":"<bpt id=\"p1\">**</bpt>iswlower(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`c`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept>","source":"**iswlower(** `c` **)**"},{"pos":[6785,6849],"content":"<bpt id=\"p1\">**</bpt>_ALPHA<ept id=\"p1\">**</ept> &amp;#124; <bpt id=\"p2\">**</bpt>_BLANK<ept id=\"p2\">**</ept> &amp;#124; <bpt id=\"p3\">**</bpt>_DIGIT<ept id=\"p3\">**</ept> &amp;#124; <bpt id=\"p4\">**</bpt>_PUNCT<ept id=\"p4\">**</ept>","source":"**_ALPHA** &#124; **_BLANK** &#124; **_DIGIT** &#124; **_PUNCT**"},{"pos":[6850,6873],"content":"<bpt id=\"p1\">**</bpt>iswprint(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`c`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept>","source":"**iswprint(** `c` **)**"},{"content":"_PUNCT","pos":[6880,6886]},{"pos":[6889,6912],"content":"<bpt id=\"p1\">**</bpt>iswpunct(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`c`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept>","source":"**iswpunct(** `c` **)**"},{"content":"_BLANK","pos":[6919,6925]},{"pos":[6928,6951],"content":"<bpt id=\"p1\">**</bpt>iswblank(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`c`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept>","source":"**iswblank(** `c` **)**"},{"content":"_SPACE","pos":[6958,6964]},{"pos":[6967,6990],"content":"<bpt id=\"p1\">**</bpt>iswspace(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`c`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept>","source":"**iswspace(** `c` **)**"},{"content":"_UPPER","pos":[6997,7003]},{"pos":[7006,7029],"content":"<bpt id=\"p1\">**</bpt>iswupper(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`c`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept>","source":"**iswupper(** `c` **)**"},{"content":"_HEX","pos":[7036,7040]},{"pos":[7043,7067],"content":"<bpt id=\"p1\">**</bpt>iswxdigit(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`c`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept>","source":"**iswxdigit(** `c` **)**"},{"content":"Wide character corresponding to a decimal-digit character.","pos":[7089,7147]},{"content":"Printable wide character except space wide character (L' ').","pos":[7168,7228]},{"content":"Lowercase letter, or one of implementation-defined set of wide characters for which none of <ph id=\"ph1\">`iswcntrl`</ph>, <ph id=\"ph2\">`iswdigit`</ph>, <ph id=\"ph3\">`iswpunct`</ph>, or <ph id=\"ph4\">`iswspace`</ph> is nonzero.","pos":[7249,7402],"source":" Lowercase letter, or one of implementation-defined set of wide characters for which none of `iswcntrl`, `iswdigit`, `iswpunct`, or `iswspace` is nonzero."},{"content":"returns nonzero only for wide characters that correspond to lowercase letters.","pos":[7414,7492]},{"content":"Printable wide character, including space wide character (L' ').","pos":[7513,7577]},{"content":"Printable wide character that is neither space wide character (L' ') nor wide character for which <ph id=\"ph1\">`iswalnum`</ph> is nonzero.","pos":[7598,7718],"source":" Printable wide character that is neither space wide character (L' ') nor wide character for which `iswalnum` is nonzero."},{"content":"Wide character that corresponds to standard white-space character or is one of implementation-defined set of wide characters for which <ph id=\"ph1\">`iswalnum`</ph> is false.","pos":[7739,7894],"source":" Wide character that corresponds to standard white-space character or is one of implementation-defined set of wide characters for which `iswalnum` is false."},{"content":"Standard white-space characters are: space (L' '), formfeed (L'\\f'), newline (L'\\n'), carriage return (L'\\r'), horizontal tab (L'\\t'), and vertical tab (L'\\v').","pos":[7895,8055]},{"content":"Wide character that is uppercase or is one of an implementation-defined set of wide characters for which none of <ph id=\"ph1\">`iswcntrl`</ph>, <ph id=\"ph2\">`iswdigit`</ph>, <ph id=\"ph3\">`iswpunct`</ph>, or <ph id=\"ph4\">`iswspace`</ph> is nonzero.","pos":[8076,8250],"source":" Wide character that is uppercase or is one of an implementation-defined set of wide characters for which none of `iswcntrl`, `iswdigit`, `iswpunct`, or `iswspace` is nonzero."},{"content":"returns nonzero only for wide characters that correspond to uppercase characters.","pos":[8262,8343]},{"content":"Wide character that corresponds to a hexadecimal-digit character.","pos":[8365,8430]},{"content":"Example","pos":[8439,8446]},{"content":"Output","pos":[9654,9660]},{"content":"See Also","pos":[16468,16476]},{"content":"Character Classification","pos":[16481,16505]},{"content":"Locale","pos":[16562,16568]},{"content":"setlocale, _wsetlocale","pos":[16607,16629]},{"content":"Interpretation of Multibyte-Character Sequences","pos":[16692,16739]},{"content":"to Functions","pos":[16819,16831]}],"content":"---\ntitle: \"is, isw Routines | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napilocation: \n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr120.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"isw\"\n  - \"is\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"is routines\"\n  - \"isw routines\"\nms.assetid: 1e171a57-2cde-41f6-a75f-a080fa3c12e5\ncaps.latest.revision: 13\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# is, isw Routines\n|||  \n|-|-|  \n|[isalnum, iswalnum, _isalnum_l, _iswalnum_l](../c-runtime-library/reference/isalnum-iswalnum-isalnum-l-iswalnum-l.md)|[isgraph, iswgraph, _isgraph_l, _iswgraph_l](../c-runtime-library/reference/isgraph-iswgraph-isgraph-l-iswgraph-l.md)|  \n|[isalpha, iswalpha, _isalpha_l, _iswalpha_l](../c-runtime-library/reference/isalpha-iswalpha-isalpha-l-iswalpha-l.md)|[isleadbyte, _isleadbyte_l](../c-runtime-library/reference/isleadbyte-isleadbyte-l.md)|  \n|[isascii, __isascii, iswascii](../c-runtime-library/reference/isascii-isascii-iswascii.md)|[islower, iswlower, _islower_l, _iswlower_l](../c-runtime-library/reference/islower-iswlower-islower-l-iswlower-l.md)|  \n|[isblank, iswblank, _isblank_l, _iswblank_l](../c-runtime-library/reference/isblank-iswblank-isblank-l-iswblank-l.md)|[isprint, iswprint, _isprint_l, _iswprint_l](../c-runtime-library/reference/isprint-iswprint-isprint-l-iswprint-l.md)|  \n|[iscntrl, iswcntrl, _iscntrl_l, _iswcntrl_l](../c-runtime-library/reference/iscntrl-iswcntrl-iscntrl-l-iswcntrl-l.md)|[ispunct, iswpunct, _ispunct_l, _iswpunct_l](../c-runtime-library/reference/ispunct-iswpunct-ispunct-l-iswpunct-l.md)|  \n|[iscsym, iscsymf, __iscsym, \\__iswcsym, \\__iscsymf, \\__iswcsymf, _iscsym_l, _iswcsym_l, _iscsymf_l, _iswcsymf_l](../c-runtime-library/reference/iscsym-functions.md)|[isspace, iswspace, _isspace_l, _iswspace_l](../c-runtime-library/reference/isspace-iswspace-isspace-l-iswspace-l.md)|  \n|[_isctype, iswctype, _isctype_l, _iswctype_l](../c-runtime-library/reference/isctype-iswctype-isctype-l-iswctype-l.md)|[isupper, _isupper_l, iswupper, _iswupper_l](../c-runtime-library/reference/isupper-isupper-l-iswupper-iswupper-l.md)|  \n|[isdigit, iswdigit, _isdigit_l, _iswdigit_l](../c-runtime-library/reference/isdigit-iswdigit-isdigit-l-iswdigit-l.md)|[isxdigit, iswxdigit, _isxdigit_l, _iswxdigit_l](../c-runtime-library/reference/isxdigit-iswxdigit-isxdigit-l-iswxdigit-l.md)|  \n  \n## Remarks  \n These routines test characters for specified conditions.  \n  \n The **is** routines produce meaningful results for any integer argument from –1 (`EOF`) to **UCHAR_MAX** (0xFF), inclusive. The expected argument type is `int`.  \n  \n> [!CAUTION]\n>  For the **is** routines, passing an argument of type `char` may yield unpredictable results. An SBCS or MBCS single-byte character of type `char` with a value greater than 0x7F is negative. If a `char` is passed, the compiler may convert the value to a signed `int` or a signed **long**. This value may be sign-extended by the compiler, with unexpected results.  \n  \n The **isw** routines produce meaningful results for any integer value from – 1 (**WEOF**) to 0xFFFF, inclusive. The **wint_t** data type is defined in WCHAR.H as an **unsigned short**; it can hold any wide character or the wide-character end-of-file (**WEOF**) value.  \n  \n The output value is affected by the setting of the `LC_CTYPE` category setting of the locale; see [setlocale](../c-runtime-library/reference/setlocale-wsetlocale.md) for more information. The versions of these functions without the **_l** suffix use the current locale for this locale-dependent behavior; the versions with the **_l** suffix are identical except that they use the locale parameter passed in instead.  \n  \n In the \"C\" locale, the test conditions for the **is** routines are as follows:  \n  \n `isalnum`  \n Alphanumeric (A – Z, a – z, or 0 – 9).  \n  \n `isalpha`  \n Alphabetic (A – Z or a – z).  \n  \n `__isascii`  \n ASCII character (0x00 – 0x7F).  \n  \n `isblank`  \n Horizontal tab or space character (0x09 or 0x20).  \n  \n `iscntrl`  \n Control character (0x00 – 0x1F or 0x7F).  \n  \n `__iscsym`  \n Letter, underscore, or digit.  \n  \n `__iscsymf`  \n Letter or underscore.  \n  \n **isdigit**  \n Decimal digit (0 – 9).  \n  \n `isgraph`  \n Printable character except space ( ).  \n  \n `islower`  \n Lowercase letter (a – z).  \n  \n `isprint`  \n Printable character including space (0x20 – 0x7E).  \n  \n `ispunct`  \n Punctuation character.  \n  \n `isspace`  \n White-space character (0x09 – 0x0D or 0x20).  \n  \n `isupper`  \n Uppercase letter (A – Z).  \n  \n `isxdigit`  \n Hexadecimal digit (A – F, a – f, or 0 – 9).  \n  \n For the **isw** routines, the result of the test for the specified condition is independent of locale. The test conditions for the **isw** functions are as follows:  \n  \n `iswalnum`  \n `iswalpha` or `iswdigit`.  \n  \n `iswalpha`  \n Any wide character that is one of an implementation-defined set for which none of `iswcntrl`, `iswdigit`, `iswpunct`, or `iswspace` is nonzero. `iswalpha` returns nonzero only for wide characters for which `iswupper` or `iswlower` is nonzero.  \n  \n `iswascii`  \n Wide-character representation of ASCII character (0x0000 – 0x007F).  \n  \n `iswblank`  \n Wide character that corresponds to the standard space character or is one of an implementation-defined set of wide characters for which `iswalnum` is false. Standard blank characters are space (L' ') and horizontal tab (L'\\t').  \n  \n `iswcntrl`  \n Control wide character.  \n  \n **__iswcsym**  \n Any wide character for which **isalnum** is true, or the '_' character.  \n  \n **__iswcsymf**  \n Any wide character for which `iswalpha` is true, or the '_' character.  \n  \n `iswctype`  \n Character has property specified by the `desc` argument. For each valid value of the `desc` argument of `iswctype`, there is an equivalent wide-character classification routine, as shown in the following table:  \n  \n **Equivalence of iswctype(**   \n ***c, desc* ) to Other isw Testing Routines**  \n  \n|Value of *desc* argument|iswctype( *c, desc* ) equivalent|  \n|------------------------------|----------------------------------------|  \n|**_ALPHA**|**iswalpha(** `c` **)**|  \n|**_ALPHA** &#124; **_DIGIT**|**iswalnum(** `c` **)**|  \n|**_BLANK**|**iswblank(** `c` **)**|  \n|**_CONTROL**|**iswcntrl(** `c` **)**|  \n|**_DIGIT**|**iswdigit(** `c` **)**|  \n|**_ALPHA** &#124; **_DIGIT** &#124; **_PUNCT**|**iswgraph(** `c` **)**|  \n|**_LOWER**|**iswlower(** `c` **)**|  \n|**_ALPHA** &#124; **_BLANK** &#124; **_DIGIT** &#124; **_PUNCT**|**iswprint(** `c` **)**|  \n|**_PUNCT**|**iswpunct(** `c` **)**|  \n|**_BLANK**|**iswblank(** `c` **)**|  \n|**_SPACE**|**iswspace(** `c` **)**|  \n|**_UPPER**|**iswupper(** `c` **)**|  \n|**_HEX**|**iswxdigit(** `c` **)**|  \n  \n `iswdigit`  \n Wide character corresponding to a decimal-digit character.  \n  \n `iswgraph`  \n Printable wide character except space wide character (L' ').  \n  \n `iswlower`  \n Lowercase letter, or one of implementation-defined set of wide characters for which none of `iswcntrl`, `iswdigit`, `iswpunct`, or `iswspace` is nonzero. `iswlower` returns nonzero only for wide characters that correspond to lowercase letters.  \n  \n `iswprint`  \n Printable wide character, including space wide character (L' ').  \n  \n `iswpunct`  \n Printable wide character that is neither space wide character (L' ') nor wide character for which `iswalnum` is nonzero.  \n  \n `iswspace`  \n Wide character that corresponds to standard white-space character or is one of implementation-defined set of wide characters for which `iswalnum` is false. Standard white-space characters are: space (L' '), formfeed (L'\\f'), newline (L'\\n'), carriage return (L'\\r'), horizontal tab (L'\\t'), and vertical tab (L'\\v').  \n  \n `iswupper`  \n Wide character that is uppercase or is one of an implementation-defined set of wide characters for which none of `iswcntrl`, `iswdigit`, `iswpunct`, or `iswspace` is nonzero. `iswupper` returns nonzero only for wide characters that correspond to uppercase characters.  \n  \n `iswxdigit`  \n Wide character that corresponds to a hexadecimal-digit character.  \n  \n## Example  \n  \n```  \n// crt_isfam.c  \n/* This program tests all characters between 0x0  \n * and 0x7F, then displays each character with abbreviations  \n * for the character-type codes that apply.  \n */  \n  \n#include <stdio.h>  \n#include <ctype.h>  \n  \nint main( void )  \n{  \n   int ch;  \n   for( ch = 0; ch <= 0x7F; ch++ )  \n   {  \n      printf( \"%.2x  \", ch );  \n      printf( \" %c\", isprint( ch )  ? ch   : ' ' );  \n      printf( \"%4s\", isalnum( ch )  ? \"AN\" : \"\" );  \n      printf( \"%3s\", isalpha( ch )  ? \"A\"  : \"\" );  \n      printf( \"%3s\", __isascii( ch )  ? \"AS\" : \"\" );  \n      printf( \"%3s\", iscntrl( ch )  ? \"C\"  : \"\" );  \n      printf( \"%3s\", __iscsym( ch )  ? \"CS \"  : \"\" );  \n      printf( \"%3s\", __iscsymf( ch )  ? \"CSF\"  : \"\" );  \n      printf( \"%3s\", isdigit( ch )  ? \"D\"  : \"\" );  \n      printf( \"%3s\", isgraph( ch )  ? \"G\"  : \"\" );  \n      printf( \"%3s\", islower( ch )  ? \"L\"  : \"\" );  \n      printf( \"%3s\", ispunct( ch )  ? \"PU\" : \"\" );  \n      printf( \"%3s\", isspace( ch )  ? \"S\"  : \"\" );  \n      printf( \"%3s\", isprint( ch )  ? \"PR\" : \"\" );  \n      printf( \"%3s\", isupper( ch )  ? \"U\"  : \"\" );  \n      printf( \"%3s\", isxdigit( ch ) ? \"X\"  : \"\" );  \n      printf( \".\\n\" );  \n   }  \n}  \n```  \n  \n## Output  \n  \n```  \n00            AS  C                              .  \n01            AS  C                              .  \n02            AS  C                              .  \n03            AS  C                              .  \n04            AS  C                              .  \n05            AS  C                              .  \n06            AS  C                              .  \n07            AS  C                              .  \n08            AS  C                              .  \n09            AS  C                    S         .  \n0a            AS  C                    S         .  \n0b            AS  C                    S         .  \n0c            AS  C                    S         .  \n0d            AS  C                    S         .  \n0e            AS  C                              .  \n0f            AS  C                              .  \n10            AS  C                              .  \n11            AS  C                              .  \n12            AS  C                              .  \n13            AS  C                              .  \n14            AS  C                              .  \n15            AS  C                              .  \n16            AS  C                              .  \n17            AS  C                              .  \n18            AS  C                              .  \n19            AS  C                              .  \n1a            AS  C                              .  \n1b            AS  C                              .  \n1c            AS  C                              .  \n1d            AS  C                              .  \n1e            AS  C                              .  \n1f            AS  C                              .  \n20            AS                       S PR      .  \n21   !        AS              G    PU    PR      .  \n22   \"        AS              G    PU    PR      .  \n23   #        AS              G    PU    PR      .  \n24   $        AS              G    PU    PR      .  \n25   %        AS              G    PU    PR      .  \n26   &        AS              G    PU    PR      .  \n27   '        AS              G    PU    PR      .  \n28   (        AS              G    PU    PR      .  \n29   )        AS              G    PU    PR      .  \n2a   *        AS              G    PU    PR      .  \n2b   +        AS              G    PU    PR      .  \n2c   ,        AS              G    PU    PR      .  \n2d   -        AS              G    PU    PR      .  \n2e   .        AS              G    PU    PR      .  \n2f   /        AS              G    PU    PR      .  \n30   0  AN    AS   CS      D  G          PR     X.  \n31   1  AN    AS   CS      D  G          PR     X.  \n32   2  AN    AS   CS      D  G          PR     X.  \n33   3  AN    AS   CS      D  G          PR     X.  \n34   4  AN    AS   CS      D  G          PR     X.  \n35   5  AN    AS   CS      D  G          PR     X.  \n36   6  AN    AS   CS      D  G          PR     X.  \n37   7  AN    AS   CS      D  G          PR     X.  \n38   8  AN    AS   CS      D  G          PR     X.  \n39   9  AN    AS   CS      D  G          PR     X.  \n3a   :        AS              G    PU    PR      .  \n3b   ;        AS              G    PU    PR      .  \n3c   <        AS              G    PU    PR      .  \n3d   =        AS              G    PU    PR      .  \n3e   >        AS              G    PU    PR      .  \n3f   ?        AS              G    PU    PR      .  \n40   @        AS              G    PU    PR      .  \n41   A  AN  A AS   CS CSF     G          PR  U  X.  \n42   B  AN  A AS   CS CSF     G          PR  U  X.  \n43   C  AN  A AS   CS CSF     G          PR  U  X.  \n44   D  AN  A AS   CS CSF     G          PR  U  X.  \n45   E  AN  A AS   CS CSF     G          PR  U  X.  \n46   F  AN  A AS   CS CSF     G          PR  U  X.  \n47   G  AN  A AS   CS CSF     G          PR  U   .  \n48   H  AN  A AS   CS CSF     G          PR  U   .  \n49   I  AN  A AS   CS CSF     G          PR  U   .  \n4a   J  AN  A AS   CS CSF     G          PR  U   .  \n4b   K  AN  A AS   CS CSF     G          PR  U   .  \n4c   L  AN  A AS   CS CSF     G          PR  U   .  \n4d   M  AN  A AS   CS CSF     G          PR  U   .  \n4e   N  AN  A AS   CS CSF     G          PR  U   .  \n4f   O  AN  A AS   CS CSF     G          PR  U   .  \n50   P  AN  A AS   CS CSF     G          PR  U   .  \n51   Q  AN  A AS   CS CSF     G          PR  U   .  \n52   R  AN  A AS   CS CSF     G          PR  U   .  \n53   S  AN  A AS   CS CSF     G          PR  U   .  \n54   T  AN  A AS   CS CSF     G          PR  U   .  \n55   U  AN  A AS   CS CSF     G          PR  U   .  \n56   V  AN  A AS   CS CSF     G          PR  U   .  \n57   W  AN  A AS   CS CSF     G          PR  U   .  \n58   X  AN  A AS   CS CSF     G          PR  U   .  \n59   Y  AN  A AS   CS CSF     G          PR  U   .  \n5a   Z  AN  A AS   CS CSF     G          PR  U   .  \n5b   [        AS              G    PU    PR      .  \n5c   \\        AS              G    PU    PR      .  \n5d   ]        AS              G    PU    PR      .  \n5e   ^        AS              G    PU    PR      .  \n5f   _        AS   CS CSF     G    PU    PR      .  \n60   `        AS              G    PU    PR      .  \n61   a  AN  A AS   CS CSF     G  L       PR     X.  \n62   b  AN  A AS   CS CSF     G  L       PR     X.  \n63   c  AN  A AS   CS CSF     G  L       PR     X.  \n64   d  AN  A AS   CS CSF     G  L       PR     X.  \n65   e  AN  A AS   CS CSF     G  L       PR     X.  \n66   f  AN  A AS   CS CSF     G  L       PR     X.  \n67   g  AN  A AS   CS CSF     G  L       PR      .  \n68   h  AN  A AS   CS CSF     G  L       PR      .  \n69   i  AN  A AS   CS CSF     G  L       PR      .  \n6a   j  AN  A AS   CS CSF     G  L       PR      .  \n6b   k  AN  A AS   CS CSF     G  L       PR      .  \n6c   l  AN  A AS   CS CSF     G  L       PR      .  \n6d   m  AN  A AS   CS CSF     G  L       PR      .  \n6e   n  AN  A AS   CS CSF     G  L       PR      .  \n6f   o  AN  A AS   CS CSF     G  L       PR      .  \n70   p  AN  A AS   CS CSF     G  L       PR      .  \n71   q  AN  A AS   CS CSF     G  L       PR      .  \n72   r  AN  A AS   CS CSF     G  L       PR      .  \n73   s  AN  A AS   CS CSF     G  L       PR      .  \n74   t  AN  A AS   CS CSF     G  L       PR      .  \n75   u  AN  A AS   CS CSF     G  L       PR      .  \n76   v  AN  A AS   CS CSF     G  L       PR      .  \n77   w  AN  A AS   CS CSF     G  L       PR      .  \n78   x  AN  A AS   CS CSF     G  L       PR      .  \n79   y  AN  A AS   CS CSF     G  L       PR      .  \n7a   z  AN  A AS   CS CSF     G  L       PR      .  \n7b   {        AS              G    PU    PR      .  \n7c   |        AS              G    PU    PR      .  \n7d   }        AS              G    PU    PR      .  \n7e   ~        AS              G    PU    PR      .  \n7f            AS  C                              .  \n```  \n  \n## See Also  \n [Character Classification](../c-runtime-library/character-classification.md)   \n [Locale](../c-runtime-library/locale.md)   \n [setlocale, _wsetlocale](../c-runtime-library/reference/setlocale-wsetlocale.md)   \n [Interpretation of Multibyte-Character Sequences](../c-runtime-library/interpretation-of-multibyte-character-sequences.md)   \n [to Functions](../c-runtime-library/to-functions.md)"}