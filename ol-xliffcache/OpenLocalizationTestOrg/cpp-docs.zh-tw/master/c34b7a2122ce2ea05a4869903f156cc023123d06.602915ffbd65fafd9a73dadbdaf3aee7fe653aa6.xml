{"nodes":[{"pos":[12,45],"content":"Data Type Ranges | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Data Type Ranges | Microsoft Docs","pos":[0,33]}]},{"content":"Data Type Ranges","pos":[1571,1587]},{"content":"Visual C++ 32-bit and 64-bit compilers recognize the types in the table later in this article.","pos":[1588,1682]},{"pos":[1698,1715],"content":"(<ph id=\"ph1\">`unsigned``int`</ph>)","source":" (`unsigned``int`)"},{"pos":[1734,1754],"content":"(<ph id=\"ph1\">`unsigned``__int8`</ph>)","source":" (`unsigned``__int8`)"},{"pos":[1774,1795],"content":"(<ph id=\"ph1\">`unsigned``__int16`</ph>)","source":" (`unsigned``__int16`)"},{"pos":[1815,1836],"content":"(<ph id=\"ph1\">`unsigned``__int32`</ph>)","source":" (`unsigned``__int32`)"},{"pos":[1856,1877],"content":"(<ph id=\"ph1\">`unsigned``__int64`</ph>)","source":" (`unsigned``__int64`)"},{"pos":[1895,1914],"content":"(<ph id=\"ph1\">`unsigned``short`</ph>)","source":" (`unsigned``short`)"},{"pos":[1931,1949],"content":"(<ph id=\"ph1\">`unsigned``long`</ph>)","source":" (`unsigned``long`)"},{"pos":[1973,1997],"content":"(<ph id=\"ph1\">`unsigned``long``long`</ph>)","source":" (`unsigned``long``long`)"},{"pos":[2004,2080],"content":"If its name begins with two underscores (<ph id=\"ph1\">`__`</ph>), a data type is non-standard.","source":"If its name begins with two underscores (`__`), a data type is non-standard."},{"content":"The ranges that are specified in the following table are inclusive-inclusive.","pos":[2087,2164]},{"content":"Type Name","pos":[2171,2180]},{"content":"Bytes","pos":[2181,2186]},{"content":"Other Names","pos":[2187,2198]},{"content":"Range of Values","pos":[2199,2214]},{"content":"int","pos":[2291,2294]},{"content":"4","pos":[2295,2296]},{"content":"signed","pos":[2297,2303]},{"content":"–2,147,483,648 to 2,147,483,647","pos":[2304,2335]},{"content":"unsigned int","pos":[2340,2352]},{"content":"4","pos":[2353,2354]},{"content":"unsigned","pos":[2355,2363]},{"content":"0 to 4,294,967,295","pos":[2364,2382]},{"content":"__int8","pos":[2387,2393]},{"content":"1","pos":[2394,2395]},{"content":"char","pos":[2396,2400]},{"content":"–128 to 127","pos":[2401,2412]},{"content":"unsigned __int8","pos":[2417,2432]},{"content":"1","pos":[2433,2434]},{"content":"unsigned char","pos":[2435,2448]},{"content":"0 to 255","pos":[2449,2457]},{"content":"__int16","pos":[2462,2469]},{"content":"2","pos":[2470,2471]},{"content":"short, short int, signed short int","pos":[2472,2506]},{"content":"–32,768 to 32,767","pos":[2507,2524]},{"content":"unsigned __int16","pos":[2529,2545]},{"content":"2","pos":[2546,2547]},{"content":"unsigned short, unsigned short int","pos":[2548,2582]},{"content":"0 to 65,535","pos":[2583,2594]},{"content":"__int32","pos":[2599,2606]},{"content":"4","pos":[2607,2608]},{"content":"signed, signed int, int","pos":[2609,2632]},{"content":"–2,147,483,648 to 2,147,483,647","pos":[2633,2664]},{"content":"unsigned __int32","pos":[2669,2685]},{"content":"4","pos":[2686,2687]},{"content":"unsigned, unsigned int","pos":[2688,2710]},{"content":"0 to 4,294,967,295","pos":[2711,2729]},{"content":"__int64","pos":[2734,2741]},{"content":"8","pos":[2742,2743]},{"content":"long long, signed long long","pos":[2744,2771]},{"content":"–9,223,372,036,854,775,808 to 9,223,372,036,854,775,807","pos":[2772,2827]},{"content":"unsigned __int64","pos":[2832,2848]},{"content":"8","pos":[2849,2850]},{"content":"unsigned long long","pos":[2851,2869]},{"content":"0 to 18,446,744,073,709,551,615","pos":[2870,2901]},{"content":"bool","pos":[2906,2910]},{"content":"1","pos":[2911,2912]},{"content":"none","pos":[2913,2917]},{"content":"false or true","pos":[2918,2931]},{"content":"char","pos":[2936,2940]},{"content":"1","pos":[2941,2942]},{"content":"none","pos":[2943,2947]},{"content":"–128 to 127 by default","pos":[2948,2970]},{"content":"0 to 255 when compiled by using <bpt id=\"p1\">[</bpt>/J<ept id=\"p1\">](../build/reference/j-default-char-type-is-unsigned.md)</ept>","pos":[2983,3074],"source":" 0 to 255 when compiled by using [/J](../build/reference/j-default-char-type-is-unsigned.md)"},{"content":"signed char","pos":[3079,3090]},{"content":"1","pos":[3091,3092]},{"content":"none","pos":[3093,3097]},{"content":"–128 to 127","pos":[3098,3109]},{"content":"unsigned char","pos":[3114,3127]},{"content":"1","pos":[3128,3129]},{"content":"none","pos":[3130,3134]},{"content":"0 to 255","pos":[3135,3143]},{"content":"short","pos":[3148,3153]},{"content":"2","pos":[3154,3155]},{"content":"short int, signed short int","pos":[3156,3183]},{"content":"–32,768 to 32,767","pos":[3184,3201]},{"content":"unsigned short","pos":[3206,3220]},{"content":"2","pos":[3221,3222]},{"content":"unsigned short int","pos":[3223,3241]},{"content":"0 to 65,535","pos":[3242,3253]},{"content":"long","pos":[3258,3262]},{"content":"4","pos":[3263,3264]},{"content":"long int, signed long int","pos":[3265,3290]},{"content":"–2,147,483,648 to 2,147,483,647","pos":[3291,3322]},{"content":"unsigned long","pos":[3327,3340]},{"content":"4","pos":[3341,3342]},{"content":"unsigned long int","pos":[3343,3360]},{"content":"0 to 4,294,967,295","pos":[3361,3379]},{"content":"long long","pos":[3384,3393]},{"content":"8","pos":[3394,3395]},{"content":"none (but equivalent to __int64)","pos":[3396,3428]},{"content":"–9,223,372,036,854,775,808 to 9,223,372,036,854,775,807","pos":[3429,3484]},{"content":"unsigned long long","pos":[3489,3507]},{"content":"8","pos":[3508,3509]},{"content":"none (but equivalent to unsigned __int64)","pos":[3510,3551]},{"content":"0 to 18,446,744,073,709,551,615","pos":[3552,3583]},{"content":"enum","pos":[3588,3592]},{"content":"varies","pos":[3593,3599]},{"content":"none","pos":[3600,3604]},{"content":"float","pos":[3611,3616]},{"content":"4","pos":[3617,3618]},{"content":"none","pos":[3619,3623]},{"content":"3.4E +/- 38 (7 digits)","pos":[3624,3646]},{"content":"double","pos":[3651,3657]},{"content":"8","pos":[3658,3659]},{"content":"none","pos":[3660,3664]},{"content":"1.7E +/- 308 (15 digits)","pos":[3665,3689]},{"content":"long double","pos":[3694,3705]},{"content":"same as double","pos":[3706,3720]},{"content":"none","pos":[3721,3725]},{"content":"Same as double","pos":[3726,3740]},{"content":"wchar_t","pos":[3745,3752]},{"content":"2","pos":[3753,3754]},{"content":"__wchar_t","pos":[3755,3764]},{"content":"0 to 65,535","pos":[3765,3776]},{"content":"Depending on how it's used, a variable of <ph id=\"ph1\">`__wchar_t`</ph> designates either a wide-character type or multibyte-character type.","pos":[3784,3906],"source":"Depending on how it's used, a variable of `__wchar_t` designates either a wide-character type or multibyte-character type."},{"content":"Use the <ph id=\"ph1\">`L`</ph> prefix before a character or string constant to designate the wide-character-type constant.","pos":[3907,4010],"source":" Use the `L` prefix before a character or string constant to designate the wide-character-type constant."},{"content":"and <ph id=\"ph1\">`unsigned`</ph> are modifiers that you can use with any integral type except <ph id=\"ph2\">`bool`</ph>.","pos":[4026,4109],"source":" and `unsigned` are modifiers that you can use with any integral type except `bool`."},{"content":"Note that <ph id=\"ph1\">`char`</ph>, <ph id=\"ph2\">`signed char`</ph>, and <ph id=\"ph3\">`unsigned char`</ph> are three distinct types for the purposes of mechanisms like overloading and templates.","pos":[4110,4250],"source":" Note that `char`, `signed char`, and `unsigned char` are three distinct types for the purposes of mechanisms like overloading and templates."},{"content":"The <ph id=\"ph1\">`int`</ph> and <ph id=\"ph2\">`unsigned``int`</ph> types have a size of four bytes.","pos":[4257,4319],"source":"The `int` and `unsigned``int` types have a size of four bytes."},{"content":"However, portable code should not depend on the size of <ph id=\"ph1\">`int`</ph> because the language standard allows this to be implementation-specific.","pos":[4320,4454],"source":" However, portable code should not depend on the size of `int` because the language standard allows this to be implementation-specific."},{"content":"C/C++ in Visual Studio also supports sized integer types.","pos":[4461,4518]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>__int8, <ph id=\"ph1\">\\_</ph>_int16, <ph id=\"ph2\">\\_</ph>_int32, <ph id=\"ph3\">\\_</ph>_int64<ept id=\"p1\">](../cpp/int8-int16-int32-int64.md)</ept> and <bpt id=\"p2\">[</bpt>Integer Limits<ept id=\"p2\">](../cpp/integer-limits.md)</ept>.","pos":[4519,4665],"source":" For more information, see [__int8, \\__int16, \\__int32, \\__int64](../cpp/int8-int16-int32-int64.md) and [Integer Limits](../cpp/integer-limits.md)."},{"pos":[4672,4800],"content":"For more information about the restrictions of the sizes of each type, see <bpt id=\"p1\">[</bpt>Fundamental Types<ept id=\"p1\">](../cpp/fundamental-types-cpp.md)</ept>.","source":"For more information about the restrictions of the sizes of each type, see [Fundamental Types](../cpp/fundamental-types-cpp.md)."},{"content":"The range of enumerated types varies depending on the language context and specified compiler flags.","pos":[4807,4907]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>C Enumeration Declarations<ept id=\"p1\">](../c-language/c-enumeration-declarations.md)</ept> and <bpt id=\"p2\">[</bpt>Enumerations<ept id=\"p2\">](../cpp/enumerations-cpp.md)</ept>.","pos":[4908,5055],"source":" For more information, see [C Enumeration Declarations](../c-language/c-enumeration-declarations.md) and [Enumerations](../cpp/enumerations-cpp.md)."},{"content":"See Also","pos":[5064,5072]},{"content":"Keywords","pos":[5077,5085]},{"content":"Fundamental Types","pos":[5116,5133]}],"content":"---\ntitle: \"Data Type Ranges | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"unsigned\"\n  - \"wchar_t\"\n  - \"char\"\n  - \"signed\"\n  - \"short\"\n  - \"long\"\n  - \"double\"\n  - \"float\"\n  - \"int\"\n  - \"long_double\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"float keyword [C++]\"\n  - \"char keyword [C++]\"\n  - \"unsigned long\"\n  - \"__wchar_t keyword [C++]\"\n  - \"unsigned short int\"\n  - \"enum keyword\"\n  - \"unsigned char keyword [C++]\"\n  - \"integer data type, data type ranges\"\n  - \"int data type\"\n  - \"data types [C++], ranges\"\n  - \"unsigned int\"\n  - \"short data type\"\n  - \"short int data\"\n  - \"signed types [C++], data type ranges\"\n  - \"long long keyword [C++]\"\n  - \"long double keyword [C++]\"\n  - \"double data type, data type ranges\"\n  - \"signed short int\"\n  - \"unsigned short\"\n  - \"sized integer types\"\n  - \"signed int\"\n  - \"signed long int\"\n  - \"signed char keyword [C++]\"\n  - \"wchar_t keyword [C++]\"\n  - \"long keyword [C++]\"\n  - \"ranges [C++]\"\n  - \"unsigned types [C++], data type ranges\"\n  - \"floating-point numbers, data type ranges\"\n  - \"ranges [C++], data types\"\n  - \"long int keyword [C++]\"\n  - \"unsigned long int\"\nms.assetid: 3691ceca-05fb-4b82-b1ae-5c4618cda91a\ncaps.latest.revision: 25\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Data Type Ranges\nVisual C++ 32-bit and 64-bit compilers recognize the types in the table later in this article.  \n  \n-   `int` (`unsigned``int`)  \n  \n-   `__int8` (`unsigned``__int8`)  \n  \n-   `__int16` (`unsigned``__int16`)  \n  \n-   `__int32` (`unsigned``__int32`)  \n  \n-   `__int64` (`unsigned``__int64`)  \n  \n-   `short` (`unsigned``short`)  \n  \n-   `long` (`unsigned``long`)  \n  \n-   `long` `long` (`unsigned``long``long`)  \n  \n If its name begins with two underscores (`__`), a data type is non-standard.  \n  \n The ranges that are specified in the following table are inclusive-inclusive.  \n  \n|Type Name|Bytes|Other Names|Range of Values|  \n|---------------|-----------|-----------------|---------------------|  \n|int|4|signed|–2,147,483,648 to 2,147,483,647|  \n|unsigned int|4|unsigned|0 to 4,294,967,295|  \n|__int8|1|char|–128 to 127|  \n|unsigned __int8|1|unsigned char|0 to 255|  \n|__int16|2|short, short int, signed short int|–32,768 to 32,767|  \n|unsigned __int16|2|unsigned short, unsigned short int|0 to 65,535|  \n|__int32|4|signed, signed int, int|–2,147,483,648 to 2,147,483,647|  \n|unsigned __int32|4|unsigned, unsigned int|0 to 4,294,967,295|  \n|__int64|8|long long, signed long long|–9,223,372,036,854,775,808 to 9,223,372,036,854,775,807|  \n|unsigned __int64|8|unsigned long long|0 to 18,446,744,073,709,551,615|  \n|bool|1|none|false or true|  \n|char|1|none|–128 to 127 by default<br /><br /> 0 to 255 when compiled by using [/J](../build/reference/j-default-char-type-is-unsigned.md)|  \n|signed char|1|none|–128 to 127|  \n|unsigned char|1|none|0 to 255|  \n|short|2|short int, signed short int|–32,768 to 32,767|  \n|unsigned short|2|unsigned short int|0 to 65,535|  \n|long|4|long int, signed long int|–2,147,483,648 to 2,147,483,647|  \n|unsigned long|4|unsigned long int|0 to 4,294,967,295|  \n|long long|8|none (but equivalent to __int64)|–9,223,372,036,854,775,808 to 9,223,372,036,854,775,807|  \n|unsigned long long|8|none (but equivalent to unsigned __int64)|0 to 18,446,744,073,709,551,615|  \n|enum|varies|none| |  \n|float|4|none|3.4E +/- 38 (7 digits)|  \n|double|8|none|1.7E +/- 308 (15 digits)|  \n|long double|same as double|none|Same as double|  \n|wchar_t|2|__wchar_t|0 to 65,535|  \n  \n Depending on how it's used, a variable of `__wchar_t` designates either a wide-character type or multibyte-character type. Use the `L` prefix before a character or string constant to designate the wide-character-type constant.  \n  \n `signed` and `unsigned` are modifiers that you can use with any integral type except `bool`. Note that `char`, `signed char`, and `unsigned char` are three distinct types for the purposes of mechanisms like overloading and templates.  \n  \n The `int` and `unsigned``int` types have a size of four bytes. However, portable code should not depend on the size of `int` because the language standard allows this to be implementation-specific.  \n  \n C/C++ in Visual Studio also supports sized integer types. For more information, see [__int8, \\__int16, \\__int32, \\__int64](../cpp/int8-int16-int32-int64.md) and [Integer Limits](../cpp/integer-limits.md).  \n  \n For more information about the restrictions of the sizes of each type, see [Fundamental Types](../cpp/fundamental-types-cpp.md).  \n  \n The range of enumerated types varies depending on the language context and specified compiler flags. For more information, see [C Enumeration Declarations](../c-language/c-enumeration-declarations.md) and [Enumerations](../cpp/enumerations-cpp.md).  \n  \n## See Also  \n [Keywords](../cpp/keywords-cpp.md)   \n [Fundamental Types](../cpp/fundamental-types-cpp.md)"}