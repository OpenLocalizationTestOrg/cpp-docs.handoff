{"nodes":[{"pos":[12,44],"content":"_rotl8, _rotl16 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_rotl8, _rotl16 | Microsoft Docs","pos":[0,32]}]},{"content":"_rotl8, _rotl16","pos":[635,650]},{"content":"Microsoft Specific","pos":[653,671]},{"content":"Rotate the input values to the left to the most significant bit (MSB) by a specified number of bit positions.","pos":[680,789]},{"content":"Syntax","pos":[798,804]},{"content":"Parameters","pos":[999,1009]},{"content":"[in]","pos":[1013,1017]},{"content":"The value to rotate.","pos":[1029,1049]},{"content":"[in]","pos":[1056,1060]},{"content":"The number of bits to rotate.","pos":[1072,1101]},{"content":"Return Value","pos":[1110,1122]},{"content":"The rotated value.","pos":[1126,1144]},{"content":"Requirements","pos":[1153,1165]},{"content":"Intrinsic","pos":[1172,1181]},{"content":"Architecture","pos":[1182,1194]},{"pos":[1247,1256],"content":"x86, ARM,"},{"pos":[1335,1344],"content":"x86, ARM,"},{"pos":[1416,1443],"content":"<bpt id=\"p1\">**</bpt>Header file<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>intrin.h&gt;","source":"**Header file** \\<intrin.h>"},{"content":"Remarks","pos":[1452,1459]},{"content":"Unlike a left-shift operation, when executing a left rotation, the high order bits that fall off the high end are moved into the least significant bit positions.","pos":[1463,1624]},{"content":"Example","pos":[1633,1640]},{"content":"END Microsoft Specific","pos":[2568,2590]},{"content":"See Also","pos":[2599,2607]},{"content":"_rotr8, _rotr16","pos":[2612,2627]},{"content":"Compiler Intrinsics","pos":[2665,2684]}],"content":"---\ntitle: \"_rotl8, _rotl16 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"_rotl8\"\n  - \"_rotl16\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"_rotl8 intrinsic\"\n  - \"_rotl16 intrinsic\"\nms.assetid: 8c519ab6-aef9-4f07-a387-daee8408368f\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _rotl8, _rotl16\n**Microsoft Specific**  \n  \n Rotate the input values to the left to the most significant bit (MSB) by a specified number of bit positions.  \n  \n## Syntax  \n  \n```  \nunsigned char _rotl8(   \n   unsigned char value,   \n   unsigned char shift   \n);  \nunsigned short _rotl16(   \n   unsigned short value,   \n   unsigned char shift   \n);  \n```  \n  \n#### Parameters  \n [in] `value`  \n The value to rotate.  \n  \n [in] `shift`  \n The number of bits to rotate.  \n  \n## Return Value  \n The rotated value.  \n  \n## Requirements  \n  \n|Intrinsic|Architecture|  \n|---------------|------------------|  \n|`_rotl8`|x86, ARM, [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]|  \n|`_rotl16`|x86, ARM, [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]|  \n  \n **Header file** \\<intrin.h>  \n  \n## Remarks  \n Unlike a left-shift operation, when executing a left rotation, the high order bits that fall off the high end are moved into the least significant bit positions.  \n  \n## Example  \n  \n```  \n// rotl.cpp  \n#include <stdio.h>  \n#include <intrin.h>  \n  \n#pragma intrinsic(_rotl8, _rotl16)  \n  \nint main()  \n{  \n    unsigned char c = 'A', c1, c2;  \n  \n    for (int i = 0; i < 8; i++)  \n    {  \n       printf_s(\"Rotating 0x%x left by %d bits gives 0x%x\\n\", c,  \n               i, _rotl8(c, i));  \n    }  \n  \n    unsigned short s = 0x12;  \n    int nBit = 10;  \n  \n    printf_s(\"Rotating unsigned short 0x%x left by %d bits gives 0x%x\\n\",  \n            s, nBit, _rotl16(s, nBit));  \n}  \n```  \n  \n```Output  \nRotating 0x41 left by 0 bits gives 0x41  \nRotating 0x41 left by 1 bits gives 0x82  \nRotating 0x41 left by 2 bits gives 0x5  \nRotating 0x41 left by 3 bits gives 0xa  \nRotating 0x41 left by 4 bits gives 0x14  \nRotating 0x41 left by 5 bits gives 0x28  \nRotating 0x41 left by 6 bits gives 0x50  \nRotating 0x41 left by 7 bits gives 0xa0  \nRotating unsigned short 0x12 left by 10 bits gives 0x4800  \n```  \n  \n## END Microsoft Specific  \n  \n## See Also  \n [_rotr8, _rotr16](../intrinsics/rotr8-rotr16.md)   \n [Compiler Intrinsics](../intrinsics/compiler-intrinsics.md)"}