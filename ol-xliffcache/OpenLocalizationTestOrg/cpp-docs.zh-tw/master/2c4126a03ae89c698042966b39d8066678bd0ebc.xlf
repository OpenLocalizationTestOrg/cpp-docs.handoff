<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2c4126a03ae89c698042966b39d8066678bd0ebc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\assert-macro-assert-wassert.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0af9deab06b48f717640792315ae2c3a01d073ae</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">055a4f82b27c7d41c207faa3682df27bedbf27e7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>assert Macro, _assert, _wassert | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>assert Macro, _assert, _wassert</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Evaluates an expression and, when the result is <ph id="ph1">`false`</ph>, prints a diagnostic message and aborts the program.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A scalar expression (including pointer expressions) that evaluates to nonzero (<ph id="ph1">`true`</ph>) or 0 (<ph id="ph2">`false`</ph>).</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The message to display.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The name of the source file the assertion failed in.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The line number in the source file of the failed assertion.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`assert`</ph> macro is typically used to identify logic errors during program development.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Use it to stop program execution when unexpected conditions occur by implementing the <ph id="ph1">`expression`</ph> argument to evaluate to <ph id="ph2">`false`</ph> only when the program is operating incorrectly.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Assertion checks can be turned off at compile time by defining the macro <ph id="ph1">`NDEBUG`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can turn off the <ph id="ph1">`assert`</ph> macro without modifying your source files by using a <bpt id="p1">**</bpt>/DNDEBUG<ept id="p1">**</ept> command-line option.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can turn off the <ph id="ph1">`assert`</ph> macro in your source code by using a <ph id="ph2">`#define NDEBUG`</ph> directive before <ph id="ph3">\&lt;</ph>assert.h&gt; is included.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`assert`</ph> macro prints a diagnostic message when <ph id="ph2">`expression`</ph> evaluates to <ph id="ph3">`false`</ph> (0) and calls <bpt id="p1">[</bpt>abort<ept id="p1">](../../c-runtime-library/reference/abort.md)</ept> to terminate program execution.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>No action is taken if <ph id="ph1">`expression`</ph> is <ph id="ph2">`true`</ph> (nonzero).</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The diagnostic message includes the failed expression, the name of the source file and line number where the assertion failed.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The diagnostic message is printed in wide characters.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Thus, it will work as expected even if there are Unicode characters in the expression.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The destination of the diagnostic message depends on the type of application that called the routine.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Console applications always receive the message through <ph id="ph1">`stderr`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In a Windows-based application, <ph id="ph1">`assert`</ph> calls the Windows <bpt id="p1">[</bpt>MessageBox<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms645505)</ept> function to create a message box to display the message along with an <bpt id="p2">**</bpt>OK<ept id="p2">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When the user clicks <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>, the program aborts immediately.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When the application is linked with a debug version of the run-time libraries, <ph id="ph1">`assert`</ph> creates a message box with three buttons: <bpt id="p1">**</bpt>Abort<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Retry<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>Ignore<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If the user clicks <bpt id="p1">**</bpt>Abort<ept id="p1">**</ept>, the program aborts immediately.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If the user clicks <bpt id="p1">**</bpt>Retry<ept id="p1">**</ept>, the debugger is called and the user can debug the program if just-in-time (JIT) debugging is enabled.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If the user clicks <bpt id="p1">**</bpt>Ignore<ept id="p1">**</ept>, <ph id="ph1">`assert`</ph> continues with its normal execution: creating the message box with the <bpt id="p2">**</bpt>OK<ept id="p2">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Note that clicking <bpt id="p1">**</bpt>Ignore<ept id="p1">**</ept> when an error condition exists can result in undefined behavior.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information about CRT debugging, see <bpt id="p1">[</bpt>CRT Debugging Techniques<ept id="p1">](/visualstudio/debugger/crt-debugging-techniques)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_assert`</ph> and <ph id="ph2">`_wassert`</ph> functions are internal CRT functions.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>They help minimize the code required in your object files to support assertions.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>We do not recommend that you call these functions directly.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`assert`</ph> macro is enabled in both the release and debug versions of the C run-time libraries when <ph id="ph2">`NDEBUG`</ph> is not defined.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`NDEBUG`</ph> is defined, the macro is available but does not evaluate its argument and has no effect.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When it is enabled, the <ph id="ph1">`assert`</ph> macro calls <ph id="ph2">`_wassert`</ph> for its implementation.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Other assertion macros, <bpt id="p1">[</bpt>_ASSERT<ept id="p1">](../../c-runtime-library/reference/assert-asserte-assert-expr-macros.md)</ept>, <bpt id="p2">[</bpt>_ASSERTE<ept id="p2">](../../c-runtime-library/reference/assert-asserte-assert-expr-macros.md)</ept> and <bpt id="p3">[</bpt>_ASSERT_EXPR<ept id="p3">](../../c-runtime-library/reference/assert-asserte-assert-expr-macros.md)</ept>, are also available, but they only evaluate the expressions passed to them when the <bpt id="p4">[</bpt>_DEBUG<ept id="p4">](../../c-runtime-library/debug.md)</ept> macro has been defined and when they are in code linked with the debug version of the C run-time libraries.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>,</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>assert.h&gt;</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The signature of the <ph id="ph1">`_assert`</ph> function is not available in a header file.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The signature of the <ph id="ph1">`_wassert`</ph> function is only available when the <ph id="ph2">`NDEBUG`</ph> macro is not defined.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In this program, the <ph id="ph1">`analyze_string`</ph> function uses the <ph id="ph2">`assert`</ph> macro to test several conditions related to string and length.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If any of the conditions fails, the program prints a message indicating what caused the failure.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The program generates this output:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>After the assertion failure, depending on the version of the operating system and run-time library, you may see a message box that contains something like the following:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If a debugger is installed, choose the <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept> button to start the debugger, or <bpt id="p2">**</bpt>Close program<ept id="p2">**</ept> to exit.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>System::Diagnostics::Debug::Assert</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Error Handling</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Process and Environment Control</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>abort</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>raise</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>signal</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>_ASSERT, _ASSERTE, _ASSERT_EXPR Macros</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>_DEBUG</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>