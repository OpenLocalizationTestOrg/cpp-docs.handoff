<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2e4ccc5de6d48a0a208cade91b0132d6e93948f6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\wcstombs-s-wcstombs-s-l.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">70613958bdd71ee5f57eb62455be5ec6097c3a4a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9625f011384abc89ba900aebb4bacc25b7e6efeb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>wcstombs_s, _wcstombs_s_l | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>wcstombs_s, _wcstombs_s_l</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Converts a sequence of wide characters to a corresponding sequence of multibyte characters.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A version of <bpt id="p1">[</bpt>wcstombs, _wcstombs_l<ept id="p1">](../../c-runtime-library/reference/wcstombs-wcstombs-l.md)</ept> with security enhancements as described in <bpt id="p2">[</bpt>Security Features in the CRT<ept id="p2">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The number of characters converted.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The address of a buffer for the resulting converted multibyte character string.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The size in bytes of the <ph id="ph1">`mbstr`</ph> buffer.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Points to the wide character string to be converted.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to store in the <ph id="ph1">`mbstr`</ph> buffer, not including the terminating null character, or <bpt id="p1">[</bpt>_TRUNCATE<ept id="p1">](../../c-runtime-library/truncate.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The locale to use.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Zero if successful, an error code on failure.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Error condition</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Return value and</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>is <ph id="ph1">`NULL`</ph> and <ph id="ph2">`sizeInBytes`</ph> &gt; 0</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>is</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The destination buffer is too small to contain the converted string (unless <ph id="ph1">`count`</ph> is <ph id="ph2">`_TRUNCATE`</ph>; see Remarks below)</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If any of these conditions occurs, the invalid parameter exception is invoked as described in <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../../c-runtime-library/parameter-validation.md)</ept> .</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If execution is allowed to continue, the function returns an error code and sets <ph id="ph1">`errno`</ph> as indicated in the table.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`wcstombs_s`</ph> function converts a string of wide characters pointed to by <ph id="ph2">`wcstr`</ph> into multibyte characters stored in the buffer pointed to by <ph id="ph3">`mbstr`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The conversion will continue for each character until one of these conditions is met:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A null wide character is encountered</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A wide character that cannot be converted is encountered</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The number of bytes stored in the <ph id="ph1">`mbstr`</ph> buffer equals <ph id="ph2">`count`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The destination string is always null-terminated (even in the case of an error).</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`count`</ph> is the special value <bpt id="p1">[</bpt>_TRUNCATE<ept id="p1">](../../c-runtime-library/truncate.md)</ept>, then <ph id="ph2">`wcstombs_s`</ph> converts as much of the string as will fit into the destination buffer, while still leaving room for a null terminator.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`wcstombs_s`</ph> successfully converts the source string, it puts the size in bytes of the converted string, including the null terminator, into <ph id="ph2">`*``pReturnValue`</ph> (provided <ph id="ph3">`pReturnValue`</ph> is not <ph id="ph4">`NULL`</ph>).</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This occurs even if the <ph id="ph1">`mbstr`</ph> argument is <ph id="ph2">`NULL`</ph> and provides a way to determine the required buffer size.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Note that if <ph id="ph1">`mbstr`</ph> is <ph id="ph2">`NULL`</ph>, <ph id="ph3">`count`</ph> is ignored.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`wcstombs_s`</ph> encounters a wide character it cannot convert to a multibyte character, it puts 0 in <ph id="ph2">`*``pReturnValue`</ph>, sets the destination buffer to an empty string, sets <ph id="ph3">`errno`</ph> to <ph id="ph4">`EILSEQ`</ph>, and returns <ph id="ph5">`EILSEQ`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If the sequences pointed to by <ph id="ph1">`wcstr`</ph> and <ph id="ph2">`mbstr`</ph> overlap, the behavior of <ph id="ph3">`wcstombs_s`</ph> is undefined.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Ensure that <ph id="ph1">`wcstr`</ph> and <ph id="ph2">`mbstr`</ph> do not overlap, and that <ph id="ph3">`count`</ph> correctly reflects the number of wide characters to convert.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>uses the current locale for any locale-dependent behavior; <ph id="ph1">`_wcstombs_s_l`</ph> is identical to <ph id="ph2">`wcstombs`</ph> except that it uses the locale passed in instead.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Locale<ept id="p1">](../../c-runtime-library/locale.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically (eliminating the need to specify a size argument) and they can automatically replace older, non-secure functions with their newer, secure counterparts.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Secure Template Overloads<ept id="p1">](../../c-runtime-library/secure-template-overloads.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>stdlib.h&gt;</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For additional compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This program illustrates the behavior of the <ph id="ph1">`wcstombs_s`</ph> function.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Data Conversion</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Locale</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>_mbclen, mblen, _mblen_l</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>mbstowcs, _mbstowcs_l</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>mbtowc, _mbtowc_l</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>wctomb_s, _wctomb_s_l</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>WideCharToMultiByte</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>