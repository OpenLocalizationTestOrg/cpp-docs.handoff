<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0dd85049b0682c6a925a0f2570a2c14fae290685</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\dotnet\how-to-use-safe-cast-in-cpp-cli.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e489b8ca8fd5e09b2ae563f12804c3fe512bd8df</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f07ebc37f4a79afb88ace206508c7d8ccc359454</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Use safe_cast in C++-CLI | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Use safe_cast in C++/CLI</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article shows how to use safe_cast in <ph id="ph1">[!INCLUDE[cppcli](../build/reference/includes/cppcli_md.md)]</ph> applications.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For information about safe_cast in <ph id="ph1">[!INCLUDE[cppwrt_short](../build/reference/includes/cppwrt_short_md.md)]</ph>, see <bpt id="p1">[</bpt>safe_cast<ept id="p1">](../windows/safe-cast-cpp-component-extensions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Upcasting</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An upcast is a cast from a derived type to one of its base classes.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This cast is safe and does not require an explicit cast notation.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following sample shows how to perform an upcast, with <ph id="ph1">`safe_cast`</ph> and without it.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Downcasting</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A downcast is a cast from a base class to a class that's derived from the base class.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A downcast is safe only if the object that's addressed at runtime is actually addressing a derived class object.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Unlike <ph id="ph1">`static_cast`</ph>, <ph id="ph2">`safe_cast`</ph> performs a dynamic check and throws &lt;xref:System.InvalidCastException&gt; if the conversion fails.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>safe_cast with user-defined conversions</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The next sample shows how you can use <ph id="ph1">`safe_cast`</ph> to invoke user-defined conversions.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>safe_cast and boxing operations</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Boxing</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Boxing is defined as a compiler-injected, user-defined conversion.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Therefore, you can use <ph id="ph1">`safe_cast`</ph> to box a value on the CLR heap.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following sample shows boxing with simple and user-defined value types.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`safe_cast`</ph> boxes a value type variable that's on the native stack so that it can be assigned to a variable on the garbage-collected heap.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The next sample shows that boxing has priority over a user-defined conversion in a <ph id="ph1">`safe_cast`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Unboxing</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Unboxing is defined as a compiler-injected, user-defined conversion.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Therefore, you can use <ph id="ph1">`safe_cast`</ph> to unbox a value on the CLR heap.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Unboxing is a user-defined conversion, but unlike boxing, unboxing must be explicitâ€”that is, it must be performed by a <ph id="ph1">`static_cast`</ph>, C-style cast, or <ph id="ph2">`safe_cast`</ph>; unboxing cannot be performed implicitly.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following sample shows unboxing with value types and primitive types.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>safe_cast and generic types</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The next sample shows how you can use <ph id="ph1">`safe_cast`</ph> to perform a downcast with a generic type.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>safe_cast</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>