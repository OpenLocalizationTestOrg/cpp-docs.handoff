<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5da3076b1c95e9d0d2c72dfc505f9352d5531d4a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cdaotabledef-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b6fbf9e8b040023a7589780c8260b69f4db62d09</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">272b39910cdbdeae902efadfbf58eff90eb1d940</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CDaoTableDef Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CDaoTableDef Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Represents the stored definition of a base table or an attached table.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::CDaoTableDef</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <bpt id="p1">**</bpt>CDaoTableDef<ept id="p1">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::Append</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Adds a new table to the database.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::CanUpdate</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Returns nonzero if the table can be updated (you can modify the definition of fields or the table properties).</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::Close</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Closes an open tabledef.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::Create</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Creates a table which can be added to the database using <bpt id="p1">[</bpt>Append<ept id="p1">](#cdaotabledef__append)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::CreateField</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Called to create a field for a table.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::CreateIndex</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Called to create an index for a table.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::DeleteField</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Called to delete a field from a table.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::DeleteIndex</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Called to delete an index from a table.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::GetAttributes</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates one or more characteristics of a <ph id="ph1">`CDaoTableDef`</ph> object.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::GetConnect</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Returns a value that provides information about the source of a table.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::GetDateCreated</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Returns the date and time the base table underlying a <ph id="ph1">`CDaoTableDef`</ph> object was created.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::GetDateLastUpdated</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Returns the date and time of the most recent change made to the design of the base table.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::GetFieldCount</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Returns a value that represents the number of fields in the table.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::GetFieldInfo</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Returns specific kinds of information about the fields in the table.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::GetIndexCount</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Returns the number of indexes for the table.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::GetIndexInfo</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Returns specific kinds of information about the indexes for the table.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::GetName</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Returns the user-defined name of the table.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::GetRecordCount</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Returns the number of records in the table.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::GetSourceTableName</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Returns a value that specifies the name of the attached table in the source database.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::GetValidationRule</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Returns a value that validates the data in a field as it is changed or added to a table.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::GetValidationText</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Returns a value that specifies the text of the message that your application displays if the value of a Field object does not satisfy the specified validation rule.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::IsOpen</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Returns nonzero if the table is open.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::Open</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Opens an existing tabledef stored in the database's TableDef's collection.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::RefreshLink</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Updates the connection information for an attached table.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::SetAttributes</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Sets a value that indicates one or more characteristics of a <ph id="ph1">`CDaoTableDef`</ph> object.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::SetConnect</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Sets a value that provides information about the source of a table.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::SetName</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Sets the name of the table.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::SetSourceTableName</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Sets a value that specifies the name of an attached table in the source database.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::SetValidationRule</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Sets a value that validates the data in a field as it is changed or added to a table.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::SetValidationText</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Sets a value that specifies the text of the message that your application displays if the value of a Field object does not satisfy the specified validation rule.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::m_pDAOTableDef</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>A pointer to the DAO interface underlying the tabledef object.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::m_pDatabase</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Source database for this table.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Each DAO database object maintains a collection, called TableDefs, that contains all saved DAO tabledef objects.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>You manipulate a table definition using a <ph id="ph1">`CDaoTableDef`</ph> object.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For example, you can:</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Examine the field and index structure of any local, attached, or external table in a database.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">`SetConnect`</ph> and <ph id="ph2">`SetSourceTableName`</ph> member functions for attached tables, and use the <ph id="ph3">`RefreshLink`</ph> member function to update connections to attached tables.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">`CanUpdate`</ph> member function to determine if you can edit field definitions in the table.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Get or set validation conditions using the <ph id="ph1">`GetValidationRule`</ph> and <ph id="ph2">`SetValidationRule`</ph>, and the <ph id="ph3">`GetValidationText`</ph> and <ph id="ph4">`SetValidationText`</ph> member functions.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> member function to create a table-, dynaset-, or snapshot-type <ph id="ph1">`CDaoRecordset`</ph> object.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The DAO database classes are distinct from the MFC database classes based on Open Database Connectivity (ODBC).</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>All DAO database class names have the "CDao" prefix.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>You can still access ODBC data sources with the DAO classes; the DAO classes generally offer superior capabilities because they are specific to the Microsoft Jet database engine.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>To use tabledef objects either to work with an existing table or to create a new table</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>In all cases, first construct a <ph id="ph1">`CDaoTableDef`</ph> object, supplying a pointer to a <bpt id="p1">[</bpt>CDaoDatabase<ept id="p1">](../../mfc/reference/cdaodatabase-class.md)</ept> object to which the table belongs.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Then do the following, depending on what you want:</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>To use an existing saved table, call the tabledef object's <bpt id="p1">[</bpt>Open<ept id="p1">](#cdaotabledef__open)</ept> member function, supplying the name of the saved table.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>To create a new table, call the tabledef object's <bpt id="p1">[</bpt>Create<ept id="p1">](#cdaotabledef__create)</ept> member function, supplying the name of the table.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>CreateField<ept id="p1">](#cdaotabledef__createfield)</ept> and <bpt id="p2">[</bpt>CreateIndex<ept id="p2">](#cdaotabledef__createindex)</ept> to add fields and indexes to the table.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>Append<ept id="p1">](#cdaotabledef__append)</ept> to save the table by appending it to the database's TableDefs collection.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Create<ept id="p1">**</ept> puts the tabledef into an open state, so after calling <bpt id="p2">**</bpt>Create<ept id="p2">**</ept> you do not call <bpt id="p3">**</bpt>Open<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The easiest way to create saved tables is to create them and store them in your database using Microsoft Access.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Then you can open and use them in your MFC code.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>To use the tabledef object you have opened or created, create and open a <ph id="ph1">`CDaoRecordset`</ph> object, specifying the name of the tabledef with a <bpt id="p1">**</bpt>dbOpenTable<ept id="p1">**</ept> value in the <ph id="ph2">`nOpenType`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>To use a tabledef object to create a <ph id="ph1">`CDaoRecordset`</ph> object, you typically create or open a tabledef as described above, then construct a recordset object, passing a pointer to your tabledef object when you call <bpt id="p1">[</bpt>CDaoRecordset::Open<ept id="p1">](../../mfc/reference/cdaorecordset-class.md#cdaorecordset__open)</ept>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The tabledef you pass must be in an open state.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For more information, see class <bpt id="p1">[</bpt>CDaoRecordset<ept id="p1">](../../mfc/reference/cdaorecordset-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>When you finish using a tabledef object, call its <bpt id="p1">[</bpt>Close<ept id="p1">](../../mfc/reference/cdaorecordset-class.md#cdaorecordset__close)</ept> member function; then destroy the tabledef object.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxdao.h</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::Append</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Call this member function after you call <bpt id="p1">[</bpt>Create<ept id="p1">](#cdaotabledef__create)</ept> to create a new tabledef object to save the tabledef in the database.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The function appends the object to the database's TableDefs collection.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>You can use the tabledef as a temporary object while defining it by not appending it, but if you want to save and use it, you must call <bpt id="p1">**</bpt>Append<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>If you attempt to append an unnamed tabledef (containing a null or empty string), MFC throws an exception.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Append Method" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::CanUpdate</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Call this member function to determine whether the definition of the table underlying a <ph id="ph1">`CDaoTableDef`</ph> object can be changed.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Nonzero if the table structure (schema) can be modified (add or delete fields and indexes), otherwise 0.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>By default, a newly created table underlying a <ph id="ph1">`CDaoTableDef`</ph> object can be updated, and an attached table underlying a <ph id="ph2">`CDaoTableDef`</ph> object cannot be updated.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CDaoTableDef`</ph> object may be updatable, even if the resulting recordset is not updatable.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Updatable Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::CDaoTableDef</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Constructs a <bpt id="p1">**</bpt>CDaoTableDef<ept id="p1">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CDaoDatabase<ept id="p1">](../../mfc/reference/cdaodatabase-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>After constructing the object, you must call the <bpt id="p1">[</bpt>Create<ept id="p1">](#cdaotabledef__create)</ept> or <bpt id="p2">[</bpt>Open<ept id="p2">](#cdaotabledef__open)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>When you finish with the object, you must call its <bpt id="p1">[</bpt>Close<ept id="p1">](#cdaotabledef__close)</ept> member function and destroy the <ph id="ph1">`CDaoTableDef`</ph> object.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::Close</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Call this member function to close and release the tabledef object.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Usually after calling <bpt id="p1">**</bpt>Close<ept id="p1">**</ept>, you delete the tabledef object if it was allocated with <bpt id="p2">**</bpt>new<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>You can call <bpt id="p1">[</bpt>Open<ept id="p1">](#cdaotabledef__open)</ept> again after calling <bpt id="p2">**</bpt>Close<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>This lets you reuse the tabledef object.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Close Method" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::Create</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Call this member function to create a new saved table.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the name of the table.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>A value corresponding to characteristics of the table represented by the tabledef object.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>You can use the bitwise-OR to combine any of the following constants:</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Constant</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>dbAttachExclusive</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>For databases that use the Microsoft Jet database engine, indicates the table is an attached table opened for exclusive use.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>dbAttachSavePWD</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>For databases that use the Microsoft Jet database engine, indicates that the user ID and password for the attached table are saved with the connection information.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>dbSystemObject</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Indicates the table is a system table provided by the Microsoft Jet database engine.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>dbHiddenObject</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Indicates the table is a hidden table provided by the Microsoft Jet database engine.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>lpszSrcTable</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the source table name.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>By default this value is initialized as <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>A pointer to a string containing the default connection string.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>By default this value is initialized as <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Once you have named the tabledef, you can then call <bpt id="p1">[</bpt>Append<ept id="p1">](#cdaotabledef__append)</ept> to save the tabledef in the database's TableDefs collection.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>After calling <bpt id="p1">**</bpt>Append<ept id="p1">**</ept>, the tabledef is in an open state, and you can use it to create a <bpt id="p2">[</bpt>CDaoRecordset<ept id="p2">](../../mfc/reference/cdaorecordset-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "CreateTableDef Method" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::CreateField</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Call this member function to add a field to the table.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>A pointer to a string expression specifying the name of this field.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>A value indicating the data type of the field.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The setting can be one of these values:</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Size (bytes)</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>dbBoolean</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>1 byte</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>BOOL</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>dbByte</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>BYTE</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>dbInteger</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>int</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>dbLong</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>4</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>long</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>dbCurrency</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>8</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Currency ( <bpt id="p1">[</bpt>COleCurrency<ept id="p1">](../../mfc/reference/colecurrency-class.md)</ept>)</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>dbSingle</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>4</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>float</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>dbDouble</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>8</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>double</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>dbDate</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>8</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Date/Time ( <bpt id="p1">[</bpt>COleDateTime<ept id="p1">](../../atl-mfc-shared/reference/coledatetime-class.md)</ept>)</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>dbText</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>1 – 255</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Text ( <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept>)</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>dbLongBinary</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Long Binary (OLE Object), <bpt id="p1">[</bpt>CLongBinary<ept id="p1">](../../mfc/reference/clongbinary-class.md)</ept> or <bpt id="p2">[</bpt>CByteArray<ept id="p2">](../../mfc/reference/cbytearray-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>dbMemo</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Memo ( <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept>)</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>A value that indicates the maximum size, in bytes, of a field that contains text, or the fixed size of a field that contains text or numeric values.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lSize`</ph> parameter is ignored for all but text fields.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>A value corresponding to characteristics of the field and that can be combined using a bitwise-OR.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Constant</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>dbFixedField</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>The field size is fixed (default for Numeric fields).</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>dbVariableField</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The field size is variable (Text fields only).</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>dbAutoIncrField</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>The field value for new records is automatically incremented to a unique long integer that cannot be changed.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Only supported for Microsoft Jet database tables.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>dbUpdatableField</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The field value can be changed.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>dbDescending</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The field is sorted in descending (Z – A or 100 – 0) order (applies only to a Field object in a Fields collection of an Index object).</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>If you omit this constant, the field is sorted in ascending (A – Z or 0 – 100) order (default).</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">[</bpt>CDaoFieldInfo<ept id="p1">](../../mfc/reference/cdaofieldinfo-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>DAOField<ept id="p1">**</ept> (OLE) object is created and appended to the Fields collection of the <bpt id="p2">**</bpt>DAOTableDef<ept id="p2">**</ept> (OLE) object.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Besides its use for examining object properties, you can also use <ph id="ph1">`CDaoFieldInfo`</ph> to construct an input parameter for creating new fields in a tabledef.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The first version of <ph id="ph1">`CreateField`</ph> is simpler to use, but if you want finer control, you can use the second version of <ph id="ph2">`CreateField`</ph>, which takes a <ph id="ph3">`CDaoFieldInfo`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>If you use the version of <ph id="ph1">`CreateField`</ph> that takes a <ph id="ph2">`CDaoFieldInfo`</ph> parameter, you must carefully set each of the following members of the <ph id="ph3">`CDaoFieldInfo`</ph> structure:</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>m_strName</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>m_lSize</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>m_lAttributes</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>m_bAllowZeroLength</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The remaining members of <ph id="ph1">`CDaoFieldInfo`</ph> should be set to <bpt id="p1">**</bpt>0<ept id="p1">**</ept>, <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>, or an empty string, as appropriate for the member, or a <ph id="ph2">`CDaoException`</ph> may occur.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "CreateField Method" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::CreateIndex</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Call this function to add an index to a table.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">[</bpt>CDaoIndexInfo<ept id="p1">](../../mfc/reference/cdaoindexinfo-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Indexes specify the order of records accessed from database tables and whether or not duplicate records are accepted.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Indexes also provide efficient access to data.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>You do not have to create indexes for tables, but in large, unindexed tables, accessing a specific record or creating a recordset can take a long time.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>On the other hand, creating too many indexes slows down update, append, and delete operations as all indexes are automatically updated.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Consider these factors as you decide which indexes to create.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>The following members of the <ph id="ph1">`CDaoIndexInfo`</ph> structure must be set:</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>m_strName<ept id="p1">**</ept> A name must be supplied.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Must point to an array of <ph id="ph1">`CDaoIndexFieldInfo`</ph> structures.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Must specify the number of fields in the array of <ph id="ph1">`CDaoFieldInfo`</ph> structures.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The remaining members will be ignored if set to <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>In addition, the <bpt id="p1">**</bpt>m_lDistinctCount<ept id="p1">**</ept> member is ignored during creation of the index.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::DeleteField</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Call this member function to remove a field and make it inaccessible.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>A pointer to a string expression that is the name of an existing field.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>The index of the field in the table's zero-based Fields collection, for lookup by index.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>You can use this member function on a new object that has not been appended to the database or when <bpt id="p1">[</bpt>CanUpdate<ept id="p1">](#cdaotabledef__canupdate)</ept> returns nonzero.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Delete Method" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::DeleteIndex</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Call this member function to delete an index in an underlying table.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>A pointer to a string expression that is the name of an existing index.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The array index of the index object in the database's zero-based TableDefs collection, for lookup by index.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>You can use this member function on a new object that hasn't been appended to the database or when <bpt id="p1">[</bpt>CanUpdate<ept id="p1">](#cdaotabledef__canupdate)</ept> returns nonzero.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Delete Method" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::GetAttributes</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>For a <ph id="ph1">`CDaoTableDef`</ph> object, the return value specifies characteristics of the table represented by the <ph id="ph2">`CDaoTableDef`</ph> object and can be a sum of these constants:</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates one or more characteristics of a <ph id="ph1">`CDaoTableDef`</ph> object.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Constant</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>dbAttachExclusive</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>For databases that use the Microsoft Jet database engine, indicates the table is an attached table opened for exclusive use.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>dbAttachSavePWD</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>For databases that use the Microsoft Jet database engine, indicates that the user ID and password for the attached table are saved with the connection information.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>dbSystemObject</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Indicates the table is a system table provided by the Microsoft Jet database engine.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>dbHiddenObject</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Indicates the table is a hidden table provided by the Microsoft Jet database engine.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>dbAttachedTable</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Indicates the table is an attached table from a non-ODBC database, such as a Paradox database.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>dbAttachedODBC</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Indicates the table is an attached table from an ODBC database, such as Microsoft SQL Server.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>A system table is a table created by the Microsoft Jet database engine to contain various internal information.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>A hidden table is a table created for temporary use by the Microsoft Jet database engine.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Attributes Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::GetConnect</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Call this member function to obtain the connection string for a data source.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CString`</ph> object containing the path and database type for the table.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>For a <ph id="ph1">`CDaoTableDef`</ph> object that represents an attached table, the <ph id="ph2">`CString`</ph> object consists of one or two parts (a database type specifier and a path to the database).</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>The path as shown in the table below is the full path for the directory containing the database files and must be preceded by the identifier "DATABASE=".</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>In some cases (as with Microsoft Jet and Microsoft Excel databases), a specific filename is included in the database path argument.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The table in <bpt id="p1">[</bpt>CDaoTableDef::SetConnect<ept id="p1">](#cdaotabledef__setconnect)</ept> shows possible database types and their corresponding database specifiers and paths:</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>For Microsoft Jet database base tables, the specifier is a empty string ("").</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>If a password is required but not provided, the ODBC driver displays a login dialog box the first time a table is accessed and again if the connection is closed and reopened.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>If an attached table has the <bpt id="p1">**</bpt>dbAttachSavePWD<ept id="p1">**</ept> attribute, the login prompt will not appear when the table is reopened.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Connect Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::GetDateCreated</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Call this function to determine the date and time the table underlying the <ph id="ph1">`CDaoTableDef`</ph> object was created.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>A value containing the date and time of the creation of the table underlying the <ph id="ph1">`CDaoTableDef`</ph> object.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>The date and time settings are derived from the computer on which the base table was created or last updated.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>In a multiuser environment, users should get these settings directly from the file server to avoid discrepancies; that is, all clients should use a "standard" time source — perhaps from one server.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "DateCreated, LastUpdated Properties" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::GetDateLastUpdated</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Call this function to determine the date and time the table underlying the <bpt id="p1">**</bpt>CDaoTableDef<ept id="p1">**</ept> object was last updated.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>A value that contains the date and time the table underlying the <bpt id="p1">**</bpt>CDaoTableDef<ept id="p1">**</ept> object was last updated.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>The date and time settings are derived from the computer on which the base table was created or last updated.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>In a multiuser environment, users should get these settings directly from the file server to avoid discrepancies; that is, all clients should use a "standard" time source — perhaps from one server.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "DateCreated, LastUpdated Properties" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::GetFieldCount</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the number of fields defined in the table.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>The number of fields in the table.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>If its value is 0, there are no objects in the collection.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Count Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::GetFieldInfo</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Call this member function to obtain various kinds of information about a field defined in the tabledef.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>The index of the field object in the table's zero-based Fields collection, for lookup by index.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">[</bpt>CDaoFieldInfo<ept id="p1">](../../mfc/reference/cdaofieldinfo-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Options that specify which information about the field to retrieve.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>The available options are listed here along with what they cause the function to return:</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>(Default) Name, Type, Size, Attributes.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Use this option for fastest performance.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Primary information, plus: Ordinal Position, Required, Allow Zero Length, Collating Order, Foreign Name, Source Field, Source Table</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Primary and secondary information, plus: Validation Rule, Validation Text, Default Value</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>A pointer to the name of the field object, for lookup by name.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>The name is a string with up to 64 characters that uniquely names the field.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>One version of the function lets you look up a field by index.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>The other version lets you look up a field by name.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>For a description of the information returned, see the <bpt id="p1">[</bpt>CDaoFieldInfo<ept id="p1">](../../mfc/reference/cdaofieldinfo-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>This structure has members that correspond to the items of information listed above in the description of <ph id="ph1">`dwInfoOptions`</ph>.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>When you request information at one level, you get information for any prior levels as well.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Attributes Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::GetIndexCount</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Call this member function to obtain the number of indexes for a table.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>The number of indexes for the table.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>If its value is 0, there are no indexes in the collection.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Count Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::GetIndexInfo</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Call this member function to obtain various kinds of information about an index defined in the tabledef.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>The numeric index of the Index object in the table's zero-based Indexes collection, for lookup by its position in the collection.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">[</bpt>CDaoIndexInfo<ept id="p1">](../../mfc/reference/cdaoindexinfo-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Options that specify which information about the index to retrieve.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>The available options are listed here along with what they cause the function to return:</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Name, Field Info, Fields.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>Use this option for fastest performance.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>Primary information, plus: Primary, Unique, Clustered, Ignore Nulls, Required, Foreign</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Primary and secondary information, plus: Distinct Count</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>A pointer to the name of the index object, for lookup by name.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>One version of the function lets you look up an index by its position in the collection.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>The other version lets you look up an index by name.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>For a description of the information returned, see the <bpt id="p1">[</bpt>CDaoIndexInfo<ept id="p1">](../../mfc/reference/cdaoindexinfo-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>This structure has members that correspond to the items of information listed above in the description of <ph id="ph1">`dwInfoOptions`</ph>.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>When you request information at one level, you get information for any prior levels as well.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Attributes Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::GetName</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Call this member function to obtain the user-defined name of the underlying table.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>A user-defined name for a table.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>This name starts with a letter and can contain a maximum of 64 characters.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>It can include numbers and underscore characters but cannot include punctuation or spaces.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Name Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::GetRecordCount</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Call this member function to find out how many records are in a <ph id="ph1">`CDaoTableDef`</ph> object.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>The number of records accessed in a tabledef object.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">`GetRecordCount`</ph> for a table-type <ph id="ph2">`CDaoTableDef`</ph> object reflects the approximate number of records in the table and is affected immediately as table records are added and deleted.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Rolled back transactions will appear as part of the record count until you call <bpt id="p1">[</bpt>CDaoWorkSpace::CompactDatabase<ept id="p1">](../../mfc/reference/cdaoworkspace-class.md#cdaoworkspace__compactdatabase)</ept>.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CDaoTableDef`</ph> object with no records has a record count property setting of 0.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>When working with attached tables or ODBC databases, <ph id="ph1">`GetRecordCount`</ph> always returns –1.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "RecordCount Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::GetSourceTableName</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the name of an attached table in a source database.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CString`</ph> object that specifies the source name of an attached table, or an empty string if a native data table.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>An attached table is a table in another database linked to a Microsoft Jet database.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Data for attached tables remains in the external database, where it can be manipulated by other applications.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "SourceTableName Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::GetValidationRule</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the validation rule for a tabledef.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>CString<ept id="p1">**</ept> object that validates the data in a field as it is changed or added to a table.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Validation rules are used in connection with update operations.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>If a tabledef contains a validation rule, updates to that tabledef must match predetermined criteria before the data is changed.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>If the change does not match the criteria, an exception containing the value of <bpt id="p1">[</bpt>GetValidationText<ept id="p1">](#cdaotabledef__getvalidationtext)</ept> is thrown.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>For a <ph id="ph1">`CDaoTableDef`</ph> object, this <ph id="ph2">`CString`</ph> is read-only for an attached table and read/write for a base table.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "ValidationRule Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::GetValidationText</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the string to display when a user enters data that does not match the validation rule.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CString`</ph> object that specifies the text displayed if the user enters data that does not match the validation rule.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>For a <ph id="ph1">`CDaoTableDef`</ph> object, this <ph id="ph2">`CString`</ph> is read-only for an attached table and read/write for a base table.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "ValidationText Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::IsOpen</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Call this member function to determine whether the <ph id="ph1">`CDaoTableDef`</ph> object is currently open.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Nonzero if the <ph id="ph1">`CDaoTableDef`</ph> object is open; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::m_pDatabase</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>Contains a pointer to the <bpt id="p1">[</bpt>CDaoDatabase<ept id="p1">](../../mfc/reference/cdaodatabase-class.md)</ept> object for this table.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::m_pDAOTableDef</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>Contains a pointer to the OLE interface for the DAO tabledef object underlying the <ph id="ph1">`CDaoTableDef`</ph> object.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Use this pointer if you need to access the DAO interface directly.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::Open</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>Call this member function to open a tabledef previously saved in the database's TableDef's collection.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>A pointer to a string that specifies a table name.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::RefreshLink</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Call this member function to update the connection information for an attached table.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>You change the connection information for an attached table by calling <bpt id="p1">[</bpt>SetConnect<ept id="p1">](#cdaotabledef__setconnect)</ept> on the corresponding <ph id="ph1">`CDaoTableDef`</ph> object and then using the <ph id="ph2">`RefreshLink`</ph> member function to update the information.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>When you call <ph id="ph1">`RefreshLink`</ph>, the attached table's properties are not changed.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>To force the modified connect information to take effect, all open <bpt id="p1">[</bpt>CDaoRecordset<ept id="p1">](../../mfc/reference/cdaorecordset-class.md)</ept> objects based on this tabledef must be closed.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "RefreshLink Method" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::SetAttributes</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>Sets a value that indicates one or more characteristics of a <ph id="ph1">`CDaoTableDef`</ph> object.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>Characteristics of the table represented by the <ph id="ph1">`CDaoTableDef`</ph> object and can be a sum of these constants:</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Constant</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>dbAttachExclusive</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>For databases that use the Microsoft Jet database engine, indicates the table is an attached table opened for exclusive use.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>dbAttachSavePWD</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>For databases that use the Microsoft Jet database engine, indicates that the user ID and password for the attached table are saved with the connection information.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>dbSystemObject</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Indicates the table is a system table provided by the Microsoft Jet database engine.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>dbHiddenObject</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Indicates the table is a hidden table provided by the Microsoft Jet database engine.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>When setting multiple attributes, you can combine them by summing the appropriate constants using the bitwise-OR operator.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>Setting <bpt id="p1">**</bpt>dbAttachExclusive<ept id="p1">**</ept> on a nonattached table produces an exception.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Combining the following values also produce an exception:</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>dbAttachExclusive &amp;#124; dbAttachedODBC</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>dbAttachSavePWD &amp;#124; dbAttachedTable</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Attributes Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::SetConnect</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>For a <ph id="ph1">`CDaoTableDef`</ph> object that represents an attached table, the string object consists of one or two parts (a database type specifier and a path to the database).</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>A pointer to a string expression that specifies additional parameters to pass to ODBC or installable ISAM drivers.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>The path as shown in the table below is the full path for the directory containing the database files and must be preceded by the identifier "DATABASE=".</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>In some cases (as with Microsoft Jet and Microsoft Excel databases), a specific filename is included in the database path argument.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>Do not include whitespace around the equal sign in path statements of the form "DATABASE=drive:<ph id="ph1">\\</ph>\path".</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>This will result in an exception being thrown and the connection failing.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>The following table shows possible database types and their corresponding database specifiers and paths:</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>Database type</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>Specifier</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>Path</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>Database using the Jet database engine</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>"[ <ph id="ph1">`database`</ph>];"</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>" <ph id="ph1">`drive`</ph>:<ph id="ph2">\\\ </ph><bpt id="p1">*</bpt>path<ept id="p1">*</ept><ph id="ph3">\\\ </ph><bpt id="p2">*</bpt>filename<ept id="p2">*</ept>.MDB"</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>dBASE III</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>"dBASE III;"</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>" <ph id="ph1">`drive`</ph>:<ph id="ph2">\\\ </ph><bpt id="p1">*</bpt>path<ept id="p1">*</ept>"</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>dBASE IV</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>"dBASE IV;"</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>" <ph id="ph1">`drive`</ph>:<ph id="ph2">\\\ </ph><bpt id="p1">*</bpt>path<ept id="p1">*</ept>"</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>dBASE 5</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>"dBASE 5.0;"</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>" <ph id="ph1">`drive`</ph>:<ph id="ph2">\\\ </ph><bpt id="p1">*</bpt>path<ept id="p1">*</ept>"</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>Paradox 3.x</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>"Paradox 3.x;"</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>" <ph id="ph1">`drive`</ph>:<ph id="ph2">\\\ </ph><bpt id="p1">*</bpt>path<ept id="p1">*</ept>"</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>Paradox 4.x</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>"Paradox 4.x;"</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>" <ph id="ph1">`drive`</ph>:<ph id="ph2">\\\ </ph><bpt id="p1">*</bpt>path<ept id="p1">*</ept>"</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>Paradox 5.x</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>"Paradox 5.x;"</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>" <ph id="ph1">`drive`</ph>:<ph id="ph2">\\\ </ph><bpt id="p1">*</bpt>path<ept id="p1">*</ept>"</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>Excel 3.0</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>"Excel 3.0;"</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>" <ph id="ph1">`drive`</ph>:<ph id="ph2">\\\ </ph><bpt id="p1">*</bpt>path<ept id="p1">*</ept><ph id="ph3">\\\ </ph><bpt id="p2">*</bpt>filename<ept id="p2">*</ept>.XLS"</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>Excel 4.0</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>"Excel 4.0;"</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>" <ph id="ph1">`drive`</ph>:<ph id="ph2">\\\ </ph><bpt id="p1">*</bpt>path<ept id="p1">*</ept><ph id="ph3">\\\ </ph><bpt id="p2">*</bpt>filename<ept id="p2">*</ept>.XLS"</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>Excel 5.0 or Excel 95</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>"Excel 5.0;"</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>" <ph id="ph1">`drive`</ph>:<ph id="ph2">\\\ </ph><bpt id="p1">*</bpt>path<ept id="p1">*</ept><ph id="ph3">\\\ </ph><bpt id="p2">*</bpt>filename<ept id="p2">*</ept>.XLS"</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>Excel 97</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>"Excel 8.0;"</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>" <ph id="ph1">`drive`</ph>:<ph id="ph2">\\\ </ph><bpt id="p1">*</bpt>path<ept id="p1">*</ept><ph id="ph3">\ </ph><bpt id="p2">*</bpt>filename<ept id="p2">*</ept>.XLS"</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>HTML Import</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>"HTML Import;"</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>" <ph id="ph1">`drive`</ph>:<ph id="ph2">\\\ </ph><bpt id="p1">*</bpt>path<ept id="p1">*</ept><ph id="ph3">\ </ph><bpt id="p2">*</bpt>filename<ept id="p2">*</ept>"</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>HTML Export</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>"HTML Export;"</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>" <ph id="ph1">`drive`</ph>:<ph id="ph2">\\\ </ph><bpt id="p1">*</bpt>path<ept id="p1">*</ept>"</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>Text</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>"Text;"</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>"drive:<ph id="ph1">\\</ph>\path"</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>ODBC</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>"ODBC; DATABASE= <ph id="ph1">`database`</ph>; UID= <bpt id="p1">*</bpt>user<ept id="p1">*</ept>;PWD= <bpt id="p2">*</bpt>password<ept id="p2">*</ept>; DSN= <bpt id="p3">*</bpt>datasourcename;<ept id="p3">*</ept> LOGINTIMEOUT= <bpt id="p4">*</bpt>seconds;<ept id="p4">*</ept>" (This may not be a complete connection string for all servers; it is just an example.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>It is very important not to have spaces between the parameters.)</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>Exchange</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>"Exchange;</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>MAPILEVEL= <bpt id="p1">*</bpt>folderpath<ept id="p1">*</ept>;</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>[TABLETYPE={ 0 &amp;#124; 1 };]</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>[PROFILE= <bpt id="p1">*</bpt>profile<ept id="p1">*</ept>;]</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>[PWD= <bpt id="p1">*</bpt>password<ept id="p1">*</ept>;]</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>[DATABASE= <ph id="ph1">`database`</ph>;]"</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>"drive<ept id="p1">*</ept>:<ph id="ph1">\\\ </ph><bpt id="p2">*</bpt>path<ept id="p2">*</ept><ph id="ph2">\\\ </ph><bpt id="p3">*</bpt>filename<ept id="p3">*</ept>.MDB"</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>Btrieve is no longer supported as of DAO 3.5.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>You must use a double backslash (<ph id="ph1">\\\\</ph>) in the connection strings.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>If you have modified the properties of an existing connection using <ph id="ph1">`SetConnect`</ph>, you must subsequently call <bpt id="p1">[</bpt>RefreshLink<ept id="p1">](#cdaotabledef__refreshlink)</ept>.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>If you are initializing the connection properties using <ph id="ph1">`SetConnect`</ph>, you need not call <ph id="ph2">`RefreshLink`</ph>, but should you choose to do so, first append the tabledef.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>If a password is required but not provided, the ODBC driver displays a login dialog box the first time a table is accessed and again if the connection is closed and reopened.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>You can set the connection string for a <ph id="ph1">`CDaoTableDef`</ph> object by providing a source argument to the <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> member function.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>You can check the setting to determine the type, path, user ID, password, or ODBC data source of the database.</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>For more information, see the documentation for the specific driver.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Connect Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::SetName</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>Call this member function to set a user-defined name for a table.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>A pointer to a string expression that specifies a name for a table.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>The name must start with a letter and can contain a maximum of 64 characters.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>It can include numbers and underscore characters but cannot include punctuation or spaces.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "Name Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::SetSourceTableName</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>Call this member function to specify the name of an attached table or the name of the base table on which the <ph id="ph1">`CDaoTableDef`</ph> object is based, as it exists in the original source of the data.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>lpszSrcTableName</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>A pointer to a string expression that specifies a table name in the external database.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>For a base table, the setting is an empty string ("").</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>You must then call <bpt id="p1">[</bpt>RefreshLink<ept id="p1">](#cdaotabledef__refreshlink)</ept>.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>This property setting is empty for a base table and read/write for an attached table or an object not appended to a collection.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "SourceTableName Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::SetValidationRule</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>Call this member function to set a validation rule for a tabledef.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>lpszValidationRule</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>A pointer to a string expression that validates an operation.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>Validation rules are used in connection with update operations.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>If a tabledef contains a validation rule, updates to that tabledef must match predetermined criteria before the data is changed.</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>If the change does not match the criteria, an exception containing the text of <bpt id="p1">[</bpt>GetValidationText<ept id="p1">](#cdaotabledef__getvalidationtext)</ept> is displayed.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>Validation is supported only for databases that use the Microsoft Jet database engine.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>The expression cannot refer to user-defined functions, domain aggregate functions, SQL aggregate functions, or queries.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>A validation rule for a <ph id="ph1">`CDaoTableDef`</ph> object can refer to multiple fields in that object.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>For example, for fields named <ph id="ph1">`hire_date`</ph> and <ph id="ph2">`termination_date`</ph>, a validation rule might be:</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>NVC_MFCDatabase#34</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "ValidationRule Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>CDaoTableDef::SetValidationText</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>Call this member function to set the exception text of a validation rule for a <ph id="ph1">`CDaoTableDef`</ph> object with an underlying base table supported by the Microsoft Jet database engine.</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>lpszValidationText</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>A pointer to a string expression that specifies the text displayed if entered data is invalid.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>You cannot set the validation text of an attached table.</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>For related information, see the topic "ValidationText Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>CObject Class</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>CDaoDatabase Class</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>CDaoRecordset Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>