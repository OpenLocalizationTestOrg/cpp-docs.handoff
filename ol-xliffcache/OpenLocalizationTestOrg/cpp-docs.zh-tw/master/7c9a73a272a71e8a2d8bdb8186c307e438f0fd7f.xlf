<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7c9a73a272a71e8a2d8bdb8186c307e438f0fd7f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\ios-base-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3e018e01d198bbd8f8f05d9e3f7187a93b843eb2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ce5fe41019555b7e20db0bcf3553ad6f07a4a9d3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>ios_base Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ios_base Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The class describes the storage and member functions common to both input and output streams that do not depend on the template parameters.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>(The template class <bpt id="p1">[</bpt>basic_ios<ept id="p1">](../standard-library/basic-ios-class.md)</ept> describes what is common and is dependent on template parameters.)</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>An object of class ios_base stores formatting information, which consists of:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Format flags in an object of type <bpt id="p1">[</bpt>fmtflags<ept id="p1">](#ios_base__fmtflags)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>An exception mask in an object of type <bpt id="p1">[</bpt>iostate<ept id="p1">](#ios_base__iostate)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A field width in an object of type <ph id="ph1">`int`</ph><bpt id="p1">*</bpt>.<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A display precision in an object of type <ph id="ph1">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A locale object in an object of type <bpt id="p1">**</bpt>locale<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Two extensible arrays, with elements of type <bpt id="p1">**</bpt>long<ept id="p1">**</ept> and <ph id="ph1">`void`</ph> pointer.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>An object of class ios_base also stores stream state information, in an object of type <bpt id="p1">[</bpt>iostate<ept id="p1">](#ios_base__iostate)</ept>, and a callback stack.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>ios_base</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Constructs <ph id="ph1">`ios_base`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>event_callback</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Describes a function passed to <bpt id="p1">[</bpt>register_call<ept id="p1">](#ios_base__register_callback)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>fmtflags</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Constants to specify the appearance of output.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>iostate</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Defines constants describing the state of a stream.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>openmode</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Describes how to interact with a stream.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>seekdir</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Specifies starting point for offset operations.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Enums</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>event</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Specifies event types.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Constants</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>adjustfield</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A bitmask defined as <ph id="ph1">`internal`</ph> &amp;#124; <ph id="ph2">`left`</ph> &amp;#124; <ph id="ph3">`right`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>app</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Specifies seeking to the end of a stream before each insertion.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>ate</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Specifies seeking to the end of a stream when its controlling object is first created.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>badbit</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Records a loss of integrity of the stream buffer.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>basefield</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A bitmask defined as <ph id="ph1">`dec`</ph> &amp;#124; <ph id="ph2">`hex`</ph> &amp;#124; <ph id="ph3">`oct`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>beg</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Specifies seeking relative to the beginning of a sequence.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>binary</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Specifies that a file should be read as a binary stream, rather than as a text stream.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>boolalpha</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Specifies insertion or extraction of objects of type <ph id="ph1">`bool`</ph> as names (such as <ph id="ph2">`true`</ph> and <ph id="ph3">`false`</ph>) rather than as numeric values.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>cur</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Specifies seeking relative to the current position within a sequence.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>dec</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Specifies insertion or extraction of integer values in decimal format.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>end</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Specifies seeking relative to the end of a sequence.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>eofbit</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Records end-of-file while extracting from a stream.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>failbit</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Records a failure to extract a valid field from a stream.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>fixed</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Specifies insertion of floating-point values in fixed-point format (with no exponent field).</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>floatfield</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A bitmask defined as <ph id="ph1">`fixed`</ph> &amp;#124;</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>goodbit</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>All state bits clear.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>hex</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Specifies insertion or extraction of integer values in hexadecimal format.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>in</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Specifies extraction from a stream.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>internal</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Pads to a field width by inserting fill characters at a point internal to a generated numeric field.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>left</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Specifies left justification.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>oct</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Specifies insertion or extraction of integer values in octal format.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>out</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Specifies insertion to a stream.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>right</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Specifies right justification.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>scientific</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Specifies insertion of floating-point values in scientific format (with an exponent field).</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>showbase</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Specifies insertion of a prefix that reveals the base of a generated integer field.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>showpoint</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Specifies unconditional insertion of a decimal point in a generated floating-point field.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>showpos</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Specifies insertion of a plus sign in a nonnegative generated numeric field.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>skipws</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Specifies skipping leading white space before certain extractions.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>trunc</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Specifies deleting contents of an existing file when its controlling object is created.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>unitbuf</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Causes output to be flushed after each insertion.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>uppercase</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Specifies insertion of uppercase equivalents of lowercase letters in certain insertions.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>failure</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The member class serves as the base class for all exceptions thrown by the member function <bpt id="p1">[</bpt>clear<ept id="p1">](../standard-library/basic-ios-class.md#basic_ios__clear)</ept> in template class <bpt id="p2">[</bpt>basic_ios<ept id="p2">](../standard-library/basic-ios-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>flags</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Sets or returns the current flag settings.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>getloc</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Returns the stored locale object.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>imbue</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Changes the locale.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Init</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Creates the standard iostream objects when constructed.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>iword</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Assigns a value to be stored as an <ph id="ph1">`iword`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>precision</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Specifies the number of digits to display in a floating-point number.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>pword</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Assigns a value to be stored as a <ph id="ph1">`pword`</ph>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>register_callback</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Specifies a callback function.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>setf</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Sets the specified flags.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>sync_with_stdio</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Ensures that iostream and C run-time library operations occur in the order that they appear in source code.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>unsetf</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Causes the specified flags to be off.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>width</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Sets the length of the output stream.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>xalloc</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Specifies that a variable shall be part of the stream.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>operator=</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The assignment operator for <ph id="ph1">`ios_base`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>ios&gt;</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>ios_base::event</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Specifies event types.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The type is an enumerated type that describes an object that can store the callback event used as an argument to a function registered with <bpt id="p1">[</bpt>register_callback<ept id="p1">](#ios_base__register_callback)</ept>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The distinct event values are:</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>copyfmt_event<ept id="p1">**</ept>, to identify a callback that occurs near the end of a call to <bpt id="p2">[</bpt>copyfmt<ept id="p2">](../standard-library/basic-ios-class.md#basic_ios__copyfmt)</ept>, just before the <bpt id="p3">[</bpt>exception mask<ept id="p3">](../standard-library/ios-base-class.md)</ept> is copied.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>erase_event<ept id="p1">**</ept>, to identify a callback that occurs at the beginning of a call to <bpt id="p2">[</bpt>copyfmt<ept id="p2">](../standard-library/basic-ios-class.md#basic_ios__copyfmt)</ept>, or at the beginning of a call to the destructor for <bpt id="p3">**</bpt><ph id="ph1">\*</ph>this<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>imbue_event<ept id="p1">**</ept>, to identify a callback that occurs at the end of a call to <bpt id="p2">[</bpt>imbue<ept id="p2">](#ios_base__imbue)</ept>, just before the function returns.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>register_callback<ept id="p1">](#ios_base__register_callback)</ept> for an example.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>ios_base::event_callback</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Describes a function passed to <bpt id="p1">[</bpt>register_call<ept id="p1">](#ios_base__register_callback)</ept>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>_E</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>event<ept id="p1">](#ios_base__event)</ept>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The stream in which the event was called.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>_I</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>A user-defined number.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The type describes a pointer to a function that can be registered with <bpt id="p1">[</bpt>register_callback<ept id="p1">](#ios_base__register_callback)</ept>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>This type of function must not throw an exception.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>register_call<ept id="p1">](#ios_base__register_callback)</ept> for an example that uses <ph id="ph1">`event_callback`</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>ios_base::failure</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The class <ph id="ph1">`failure`</ph> defines the base class for the types of all objects thrown as exceptions, by functions in the <ph id="ph2">`iostreams`</ph> library, to report errors detected during stream buffer operations.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The value returned by <ph id="ph1">`what``()`</ph> is a copy of <ph id="ph2">`_Message`</ph>, possibly augmented with a test based on <ph id="ph3">`_Code`</ph>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`_Code`</ph> is not specified, the default value is <ph id="ph2">`make_error_code``(io_errc::stream)`</ph>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>ios_base::flags</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Sets or returns the current flag settings.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">`fmtflags`</ph> setting.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The previous or current <ph id="ph1">`fmtflags`</ph> setting.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>ios_base::fmtflags<ept id="p1">](#ios_base__fmtflags)</ept> for a list of the flags.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The first member function returns the stored format flags.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The second member function stores <ph id="ph1">`fmtfl`</ph> in the format flags and returns its previous stored value.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>ios_base::fmtflags</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Constants to specify the appearance of output.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>class ios_base {</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>public:</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>typedef implementation-defined-bitmask-type fmtflags;</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>static const fmtflags boolalpha;</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>static const fmtflags dec;</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>static const fmtflags fixed;</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>static const fmtflags hex;</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>static const fmtflags internal;</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>static const fmtflags left;</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>static const fmtflags oct;</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>static const fmtflags right;</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>static const fmtflags scientific;</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>static const fmtflags showbase;</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>static const fmtflags showpoint;</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>static const fmtflags showpos;</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>static const fmtflags skipws;</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>static const fmtflags unitbuf;</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>static const fmtflags uppercase;</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>static const fmtflags adjustfield;</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>static const fmtflags basefield;</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>static const fmtflags floatfield;</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>...</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>};</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Supports the manipulators in <bpt id="p1">[</bpt>ios<ept id="p1">](../standard-library/ios.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The type is a bitmask type that describes an object that can store format flags.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The distinct flag values (elements) are:</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>, to insert or extract integer values in decimal format.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>, to insert or extract integer values in hexadecimal format.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>, to insert or extract integer values in octal format.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>, to insert a prefix that reveals the base of a generated integer field.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>, to pad to a field width as needed by inserting fill characters at a point internal to a generated numeric field.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>(For information on setting the field width, see <bpt id="p1">[</bpt>setw<ept id="p1">](../standard-library/iomanip-functions.md#setw)</ept>).</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>, to pad to a field width as needed by inserting fill characters at the end of a generated field (left justification).</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>, to pad to a field width as needed by inserting fill characters at the beginning of a generated field (right justification).</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>, to insert or extract objects of type <ph id="ph1">`bool`</ph> as names (such as <ph id="ph2">`true`</ph> and <ph id="ph3">`false`</ph>) rather than as numeric values.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>, to insert floating-point values in fixed-point format (with no exponent field).</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>, to insert floating-point values in scientific format (with an exponent field).</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>, to insert a decimal point unconditionally in a generated floating-point field.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>, to insert a plus sign in a nonnegative generated numeric field.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>, to skip leading white space before certain extractions.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>, to flush output after each insertion.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>, to insert uppercase equivalents of lowercase letters in certain insertions.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>In addition, several useful values are:</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>, a bitmask defined as <ph id="ph1">`internal`</ph> &amp;#124; <ph id="ph2">`left`</ph> &amp;#124;</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>, defined as <ph id="ph1">`dec`</ph> &amp;#124; <ph id="ph2">`hex`</ph> &amp;#124;</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>, defined as <ph id="ph1">`fixed`</ph> &amp;#124;</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>For examples of functions that modify these format flags, see <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>iomanip&gt;<ept id="p1">](../standard-library/iomanip.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>ios_base::getloc</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Returns the stored locale object.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The stored locale object.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>ios_base::imbue</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Changes the locale.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The new locale setting.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The previous locale.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>The member function stores <ph id="ph1">`_Loc`</ph> in the locale object and then reports the callback event and <ph id="ph2">`imbue_event`</ph>.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>It returns the previous stored value.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>basic_ios::imbue<ept id="p1">](../standard-library/basic-ios-class.md#basic_ios__imbue)</ept> for a sample.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>ios_base::Init</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Creates the standard iostream objects when constructed.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>class Init { };</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The nested class describes an object whose construction ensures that the standard iostreams objects are properly constructed, even before the execution of a constructor for an arbitrary static object.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>ios_base::ios_base</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Constructs ios_base objects.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The (protected) constructor does nothing.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>A later call to <bpt id="p1">**</bpt>basic_ios::<ept id="p1">**</ept><bpt id="p2">[</bpt>init<ept id="p2">](../standard-library/basic-ios-class.md#basic_ios__init)</ept> must initialize the object before it can be safely destroyed.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Thus, the only safe use for class ios_base is as a base class for template class <bpt id="p1">[</bpt>basic_ios<ept id="p1">](../standard-library/basic-ios-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>ios_base::iostate</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The type of constants that describe the state of a stream.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>class ios_base {</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>public:</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>typedef implementation-defined-bitmask-type iostate;</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>static const iostate badbit;</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>static const iostate eofbit;</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>static const iostate failbit;</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>static const iostate goodbit;</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>...</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>};</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>The type is a bitmask type that describes an object that can store stream state information.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>The distinct flag values (elements) are:</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>, to record a loss of integrity of the stream buffer.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>, to record end-of-file while extracting from a stream.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>, to record a failure to extract a valid field from a stream.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>In addition, a useful value is <ph id="ph1">`goodbit`</ph>, where none of the previously mentioned bits are set ( <ph id="ph2">`goodbit`</ph> is guaranteed to be zero).</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>ios_base::iword</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Assigns a value to be stored as an <ph id="ph1">`iword`</ph>.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>The index of the value to store as an <ph id="ph1">`iword`</ph>.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>The member function returns a reference to element <ph id="ph1">`idx`</ph> of the extensible array with elements of type <bpt id="p1">**</bpt>long<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>All elements are effectively present and initially store the value zero.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The returned reference is invalid after the next call to <ph id="ph1">`iword`</ph> for the object, after the object is altered by a call to <bpt id="p1">**</bpt>basic_ios::<ept id="p1">**</ept><bpt id="p2">[</bpt>copyfmt<ept id="p2">](../standard-library/basic-ios-class.md#basic_ios__copyfmt)</ept>, or after the object is destroyed.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`idx`</ph> is negative or if unique storage is unavailable for the element, the function calls <bpt id="p1">[</bpt>setstate<ept id="p1">](../standard-library/basic-ios-class.md#basic_ios__setstate)</ept><bpt id="p2">**</bpt>(badbit)<ept id="p2">**</ept> and returns a reference that might not be unique.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>To obtain a unique index, for use across all objects of type <ph id="ph1">`ios_base`</ph>, call <bpt id="p1">[</bpt>xalloc<ept id="p1">](#ios_base__xalloc)</ept>.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>xalloc<ept id="p1">](#ios_base__xalloc)</ept> for a sample of how to use <ph id="ph1">`iword`</ph>.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>ios_base::openmode</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Describes how to interact with a stream.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>class ios_base {</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>public:</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>typedef implementation-defined-bitmask-type iostate;</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>static const iostate badbit;</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>static const iostate eofbit;</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>static const iostate failbit;</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>static const iostate goodbit;</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>...</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>};</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>The type is a <ph id="ph1">`bitmask type`</ph> that describes an object that can store the opening mode for several iostreams objects.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>The distinct flag values (elements) are:</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>app<ept id="p1">**</ept>, to seek to the end of a stream before each insertion.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ate<ept id="p1">**</ept>, to seek to the end of a stream when its controlling object is first created.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>binary<ept id="p1">**</ept>, to read a file as a binary stream, rather than as a text stream.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>in<ept id="p1">**</ept>, to permit extraction from a stream.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>out<ept id="p1">**</ept>, to permit insertion to a stream.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>trunc<ept id="p1">**</ept>, to delete contents of an existing file when its controlling object is created.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>ios_base::operator=</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>The assignment operator for ios_base objects.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>An object of type <ph id="ph1">`ios_base`</ph>.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>The object being assigned to.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>The operator copies the stored formatting information, making a new copy of any extensible arrays.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>It then returns <bpt id="p1">**</bpt><ph id="ph1">\*</ph>this<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Note that the callback stack is not copied.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>This operator is only used by classes derived from <ph id="ph1">`ios_base`</ph>.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>ios_base::precision</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Specifies the number of digits to display in a floating-point number.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>The number of significant digits to display, or the number of digits after the decimal point in fixed notation.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>The first member function returns the stored <bpt id="p1">[</bpt>display precision<ept id="p1">](../standard-library/ios-base-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>The second member function stores <ph id="ph1">`_Prec`</ph> in the display precision and returns its previous stored value.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Floating-point numbers are displayed in fixed notation with <bpt id="p1">[</bpt>fixed<ept id="p1">](../standard-library/ios-functions.md#fixed)</ept>.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>ios_base::pword</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Assigns a value to be stored as a <ph id="ph1">`pword`</ph>.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>The index of the value to store as a <ph id="ph1">`pword`</ph>.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>The member function returns a reference to element _ <bpt id="p1">*</bpt>Idx<ept id="p1">*</ept> of the extensible array with elements of type <ph id="ph1">`void`</ph> pointer.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>All elements are effectively present and initially store the null pointer.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>The returned reference is invalid after the next call to <ph id="ph1">`pword`</ph> for the object, after the object is altered by a call to <bpt id="p1">**</bpt>basic_ios::<ept id="p1">**</ept><bpt id="p2">[</bpt>copyfmt<ept id="p2">](../standard-library/basic-ios-class.md#basic_ios__copyfmt)</ept>, or after the object is destroyed.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>If _ <bpt id="p1">*</bpt>Idx<ept id="p1">*</ept> is negative, or if unique storage is unavailable for the element, the function calls <bpt id="p2">[</bpt>setstate<ept id="p2">](../standard-library/basic-ios-class.md#basic_ios__setstate)</ept><bpt id="p3">**</bpt>(badbit)<ept id="p3">**</ept> and returns a reference that might not be unique.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>To obtain a unique index, for use across all objects of type <ph id="ph1">`ios_base`</ph>, call <bpt id="p1">[</bpt>xalloc<ept id="p1">](#ios_base__xalloc)</ept>.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>xalloc<ept id="p1">](#ios_base__xalloc)</ept> for an example of using <ph id="ph1">`pword`</ph>.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>ios_base::register_callback</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Specifies a callback function.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Pointer to the callback function.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>A user-defined number.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>The member function pushes the pair <ph id="ph1">`{``pfn`</ph>, <ph id="ph2">`idx``}`</ph> onto the stored callback stack <bpt id="p1">[</bpt>callback stack<ept id="p1">](../standard-library/ios-base-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>When a callback event <bpt id="p1">**</bpt>ev<ept id="p1">**</ept> is reported, the functions are called, in reverse order of registry, by the expression ( <bpt id="p2">**</bpt><ph id="ph1">\*</ph><ept id="p2">**</ept><ph id="ph2">`pfn`</ph>)( <bpt id="p3">**</bpt>ev<ept id="p3">**</ept>, ``<bpt id="p4">**</bpt><ph id="ph3">\*</ph>this<ept id="p4">**</ept>, ```idx`).</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>ios_base::seekdir</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>beg<ept id="p1">**</ept>,   to seek (alter the current read or write position) relative to the beginning of a sequence (array,   stream,   or file).</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>cur<ept id="p1">**</ept>,   to seek relative to the current position within a sequence.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>end<ept id="p1">**</ept>,   to seek relative to the end of a sequence.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>ios_base::setf</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>The flags to turn on.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>_Unset<ept id="p1">*</ept><ph id="ph1"> 
</ph>    The flags to turn off.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>ios_base::sync_with_stdio</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Whether all streams are in sync with <bpt id="p1">**</bpt>stdio<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>ios_base::unsetf</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>The flags that you want off.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>ios_base::width</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>The desired size of the output stream.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>ios_base::xalloc</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Thread Safety in the C++ Standard Library</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>iostream Programming</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>iostreams Conventions</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>