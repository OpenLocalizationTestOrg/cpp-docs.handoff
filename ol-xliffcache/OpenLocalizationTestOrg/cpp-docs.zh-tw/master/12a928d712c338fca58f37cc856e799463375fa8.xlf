<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">12a928d712c338fca58f37cc856e799463375fa8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\c-logical-operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9ce21eeac8ad0f5eba2b69281a35e9303f6611b2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c0bd5816d1b889ffe987bb5a7936a9e5f4e30a0d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>C Logical Operators | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>C Logical Operators</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The logical operators perform logical-AND (<bpt id="p1">**</bpt><ph id="ph1">&amp;&amp;</ph><ept id="p1">**</ept>) and logical-OR ( <ph id="ph2">`||`</ph> ) operations.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>logical-AND-expression<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>inclusive-OR-expression</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>logical-AND-expression<ept id="p1">*</ept>  <bpt id="p2">**</bpt><ph id="ph1">&amp;&amp;</ph><ept id="p2">**</ept>  <bpt id="p3">*</bpt>inclusive-OR-expression<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>logical-OR-expression<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>logical-AND-expression</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>logical-OR-expression<ept id="p1">*</ept>  <bpt id="p2">**</bpt>&amp;#124;&amp;#124;<ept id="p2">**</ept>  <bpt id="p3">*</bpt>logical-AND-expression<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Logical operators do not perform the usual arithmetic conversions.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Instead, they evaluate each operand in terms of its equivalence to 0.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The result of a logical operation is either 0 or 1.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The result's type is <ph id="ph1">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The C logical operators are described below:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Operator</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The logical-AND operator produces the value 1 if both operands have nonzero values.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If either operand is equal to 0, the result is 0.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If the first operand of a logical-AND operation is equal to 0, the second operand is not evaluated.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The logical-OR operator performs an inclusive-OR operation on its operands.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The result is 0 if both operands have 0 values.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If either operand has a nonzero value, the result is 1.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If the first operand of a logical-OR operation has a nonzero value, the second operand is not evaluated.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The operands of logical-AND and logical-OR expressions are evaluated from left to right.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If the value of the first operand is sufficient to determine the result of the operation, the second operand is not evaluated.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This is called "short-circuit evaluation."</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>There is a sequence point after the first operand.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Sequence Points<ept id="p1">](../c-language/c-sequence-points.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following examples illustrate the logical operators:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In this example, the <ph id="ph1">`printf`</ph> function is called to print a message if <ph id="ph2">`x`</ph> is less than <ph id="ph3">`y`</ph> and <ph id="ph4">`y`</ph> is less than <ph id="ph5">`z`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`x`</ph> is greater than <ph id="ph2">`y`</ph>, the second operand (<ph id="ph3">`y &lt; z`</ph>) is not evaluated and nothing is printed.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Note that this could cause problems in cases where the second operand has side effects that are being relied on for some other reason.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In this example, if <ph id="ph1">`x`</ph> is equal to either <ph id="ph2">`w`</ph>, <ph id="ph3">`y`</ph>, or <ph id="ph4">`z`</ph>, the second argument to the <ph id="ph5">`printf`</ph> function evaluates to true and the value 1 is printed.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Otherwise, it evaluates to false and the value 0 is printed.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>As soon as one of the conditions evaluates to true, evaluation ceases.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Logical AND Operator: &amp;&amp;</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Logical OR Operator: &amp;#124;&amp;#124;</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>