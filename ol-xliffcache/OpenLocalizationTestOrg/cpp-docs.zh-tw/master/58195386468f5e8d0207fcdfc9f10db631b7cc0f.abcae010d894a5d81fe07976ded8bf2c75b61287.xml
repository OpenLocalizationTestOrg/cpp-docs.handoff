{"nodes":[{"pos":[12,44],"content":"add_const Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"add_const Class | Microsoft Docs","pos":[0,32]}]},{"content":"add_const Class","pos":[745,760]},{"content":"Makes const type from type.","pos":[761,788]},{"content":"Syntax","pos":[797,803]},{"content":"Parameters","pos":[869,879]},{"content":"The type to modify.","pos":[891,910]},{"content":"Remarks","pos":[919,926]},{"pos":[930,1082],"content":"An instance of the type modifier holds a modified-type that is <ph id=\"ph1\">`Ty`</ph> if <ph id=\"ph2\">`Ty`</ph> is a reference, a function, or a const-qualified type, otherwise <ph id=\"ph3\">`const Ty`</ph>.","source":"An instance of the type modifier holds a modified-type that is `Ty` if `Ty` is a reference, a function, or a const-qualified type, otherwise `const Ty`."},{"content":"Example","pos":[1091,1098]},{"content":"Requirements","pos":[1534,1546]},{"pos":[1550,1575],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> &lt;type_traits&gt;","source":"**Header:** <type_traits>"},{"pos":[1582,1600],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"content":"See Also","pos":[1609,1617]},{"content":"&lt;type_traits&gt;","pos":[1622,1635],"source":"<type_traits>"},{"content":"remove_const Class","pos":[1678,1696]}],"content":"---\ntitle: \"add_const Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std::tr1::add_const\"\n  - \"add_const\"\n  - \"std.tr1.add_const\"\n  - \"std.add_const\"\n  - \"std::add_const\"\n  - \"type_traits/std::add_const\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"add_const class [TR1]\"\n  - \"add_const\"\nms.assetid: 1262a1eb-8c9c-4dd6-9f43-88ba280182f1\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# add_const Class\nMakes const type from type.  \n  \n## Syntax  \n  \n```  \ntemplate <class Ty>  \nstruct add_const;\n```  \n  \n#### Parameters  \n `Ty`  \n The type to modify.  \n  \n## Remarks  \n An instance of the type modifier holds a modified-type that is `Ty` if `Ty` is a reference, a function, or a const-qualified type, otherwise `const Ty`.  \n  \n## Example  \n  \n```cpp  \n// std_tr1__type_traits__add_const.cpp   \n// compile with: /EHsc   \n#include <type_traits>   \n#include <iostream>   \n  \nint main()   \n    {   \n    std::add_const<int>::type *p = (const int *)0;   \n  \n    p = p;  // to quiet \"unused\" warning   \n    std::cout << \"add_const<int> == \"   \n        << typeid(*p).name() << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \nadd_const<int> == int  \n```  \n  \n## Requirements  \n **Header:** <type_traits>  \n  \n **Namespace:** std  \n  \n## See Also  \n [<type_traits>](../standard-library/type-traits.md)   \n [remove_const Class](../standard-library/remove-const-class.md)\n"}