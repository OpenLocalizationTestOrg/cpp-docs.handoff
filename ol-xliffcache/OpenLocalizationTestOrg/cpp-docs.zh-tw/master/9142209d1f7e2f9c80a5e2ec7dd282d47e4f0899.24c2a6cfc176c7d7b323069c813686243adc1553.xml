{"nodes":[{"pos":[12,39],"content":"Assignment | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Assignment | Microsoft Docs","pos":[0,27]}]},{"content":"Assignment","pos":[625,635]},{"content":"The assignment operator (<bpt id=\"p1\">**</bpt><ph id=\"ph1\">=</ph><ept id=\"p1\">**</ept>) is, strictly speaking, a binary operator.","pos":[636,709],"source":"The assignment operator (**=**) is, strictly speaking, a binary operator."},{"content":"Its declaration is identical to any other binary operator, with the following exceptions:","pos":[710,799]},{"content":"It must be a nonstatic member function.","pos":[809,848]},{"content":"No <ph id=\"ph1\">`operator=`</ph> can be declared as a nonmember function.","pos":[849,904],"source":" No `operator=` can be declared as a nonmember function."},{"content":"It is not inherited by derived classes.","pos":[914,953]},{"content":"A default <ph id=\"ph1\">`operator=`</ph> function can be generated by the compiler for class types if none exists.","pos":[963,1058],"source":"A default `operator=` function can be generated by the compiler for class types if none exists."},{"content":"(For more information about default <ph id=\"ph1\">`operator=`</ph> functions, see <bpt id=\"p1\">[</bpt>Memberwise Assignment and Initialization<ept id=\"p1\">](http://msdn.microsoft.com/en-us/94048213-8b49-4416-8069-b1b7a6f271f9)</ept>.)","pos":[1059,1236],"source":" (For more information about default `operator=` functions, see [Memberwise Assignment and Initialization](http://msdn.microsoft.com/en-us/94048213-8b49-4416-8069-b1b7a6f271f9).)"},{"content":"The following example illustrates how to declare an assignment operator:","pos":[1243,1315]},{"content":"Note that the supplied argument is the right side of the expression.","pos":[1688,1756]},{"content":"The operator returns the object to preserve the behavior of the assignment operator, which returns the value of the left side after the assignment is complete.","pos":[1757,1916]},{"content":"This allows writing statements such as:","pos":[1917,1956]},{"content":"See Also","pos":[1999,2007]},{"content":"Operator Overloading","pos":[2012,2032]}],"content":"---\ntitle: \"Assignment | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"operators [C++], assignment\"\n  - \"assignment operators, overloaded\"\nms.assetid: d87e4f89-f8f5-42c1-9d3c-184bca9d0e15\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Assignment\nThe assignment operator (**=**) is, strictly speaking, a binary operator. Its declaration is identical to any other binary operator, with the following exceptions:  \n  \n-   It must be a nonstatic member function. No `operator=` can be declared as a nonmember function.  \n  \n-   It is not inherited by derived classes.  \n  \n-   A default `operator=` function can be generated by the compiler for class types if none exists. (For more information about default `operator=` functions, see [Memberwise Assignment and Initialization](http://msdn.microsoft.com/en-us/94048213-8b49-4416-8069-b1b7a6f271f9).)  \n  \n The following example illustrates how to declare an assignment operator:  \n  \n```  \n// assignment.cpp  \nclass Point  \n{  \npublic:  \n   Point &operator=( Point & );  // Right side is the argument.  \n   int _x, _y;  \n};  \n  \n// Define assignment operator.  \nPoint &Point::operator=( Point &ptRHS )  \n{  \n   _x = ptRHS._x;  \n   _y = ptRHS._y;  \n  \n   return *this;  // Assignment operator returns left side.  \n}  \n  \nint main()  \n{  \n}  \n```  \n  \n Note that the supplied argument is the right side of the expression. The operator returns the object to preserve the behavior of the assignment operator, which returns the value of the left side after the assignment is complete. This allows writing statements such as:  \n  \n```  \npt1 = pt2 = pt3;  \n```  \n  \n## See Also  \n [Operator Overloading](../cpp/operator-overloading.md)"}