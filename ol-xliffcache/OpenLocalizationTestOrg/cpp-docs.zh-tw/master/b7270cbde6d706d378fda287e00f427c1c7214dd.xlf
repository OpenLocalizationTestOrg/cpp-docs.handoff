<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b7270cbde6d706d378fda287e00f427c1c7214dd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\how-to-create-a-task-that-completes-after-a-delay.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">82efd4de543aeaa7712ed348c067256f9f331280</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9bcf9c2046ab13e8a3a480d9fa44ccc22d073146</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Create a Task that Completes After a Delay | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Create a Task that Completes After a Delay</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This example shows how to use the <bpt id="p1">[</bpt>concurrency::task<ept id="p1">](../../parallel/concrt/reference/task-class.md)</ept>, <bpt id="p2">[</bpt>concurrency::cancellation_token_source<ept id="p2">](../../parallel/concrt/reference/cancellation-token-source-class.md)</ept>, <bpt id="p3">[</bpt>concurrency::cancellation_token<ept id="p3">](../../parallel/concrt/reference/cancellation-token-class.md)</ept>, <bpt id="p4">[</bpt>concurrency::task_completion_event<ept id="p4">](../../parallel/concrt/reference/task-completion-event-class.md)</ept>, <bpt id="p5">[</bpt>concurrency::timer<ept id="p5">](../../parallel/concrt/reference/timer-class.md)</ept>, and <bpt id="p6">[</bpt>concurrency::call<ept id="p6">](../../parallel/concrt/reference/call-class.md)</ept> classes to create a task that completes after a delay.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can use this method to build loops that occasionally poll for data, introduce timeouts, delay handling of user input for a predetermined time, and so on.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following example shows the <ph id="ph1">`complete_after`</ph> and <ph id="ph2">`cancel_after_timeout`</ph> functions.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`complete_after`</ph> function creates a <ph id="ph2">`task`</ph> object that completes after the specified delay.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It uses a <ph id="ph1">`timer`</ph> object and a <ph id="ph2">`call`</ph> object to set a <ph id="ph3">`task_completion_event`</ph> object after the specified delay.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>By using the <ph id="ph1">`task_completion_event`</ph> class, you can define a task that completes after a thread or another task signals that a value is available.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When the event is set, listener tasks complete and their continuations are scheduled to run.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information about the <ph id="ph1">`timer`</ph> and <ph id="ph2">`call`</ph> classes, which are part of the Asynchronous Agents Library, see <bpt id="p1">[</bpt>Asynchronous Message Blocks<ept id="p1">](../../parallel/concrt/asynchronous-message-blocks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`cancel_after_timeout`</ph> function builds on the <ph id="ph2">`complete_after`</ph> function to cancel a task if that task does not complete before a given timeout.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`cancel_after_timeout`</ph> function creates two tasks.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The first task indicates success and completes after the provided task completes; the second task indicates failure and completes after the specified timeout.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`cancel_after_timeout`</ph> function creates a continuation task that runs when the success or failure task completes.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If the failure task completes first, the continuation cancels the token source to cancel the overall task.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>concrt-task-delay#1</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following example computes the count of prime numbers in the range [0, 100000] multiple times.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The operation fails if it does not complete in a given time limit.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`count_primes`</ph> function demonstrates how to use the <ph id="ph2">`cancel_after_timeout`</ph> function.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>It counts the number of primes in the given range and fails if the task does not complete in the provided time.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`wmain`</ph> function calls the <ph id="ph2">`count_primes`</ph> function multiple times.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Each time, it halves the time limit.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The program finishes after the operation does not complete in the current time limit.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>concrt-task-delay#2</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>When you use this technique to cancel tasks after a delay, any unstarted tasks will not start after the overall task is canceled.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>However, it is important for any long-running tasks to respond to cancellation in a timely manner.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information about task cancellation, see <bpt id="p1">[</bpt>Cancellation in the PPL<ept id="p1">](cancellation-in-the-ppl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Here is the complete code for this example:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>concrt-task-delay#3</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To compile the code, copy it and then paste it in a Visual Studio project, or paste it in a file that is named <ph id="ph1">`task-delay.cpp`</ph> and then run the following command in a Visual Studio Command Prompt window.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>cl.exe /EHsc task-delay.cpp</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Task Parallelism</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>task Class (Concurrency Runtime)</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>cancellation_token_source Class</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>cancellation_token Class</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>task_completion_event Class</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>timer Class</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>call Class</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Asynchronous Message Blocks</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Cancellation in the PPL</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>