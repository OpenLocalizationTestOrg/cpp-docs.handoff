{"nodes":[{"pos":[12,45],"content":"CImageList Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CImageList Class | Microsoft Docs","pos":[0,33]}]},{"content":"CImageList Class","pos":[694,710]},{"content":"Provides the functionality of the Windows common image list control.","pos":[711,779]},{"content":"Syntax","pos":[788,794]},{"content":"Members","pos":[854,861]},{"content":"Public Constructors","pos":[871,890]},{"content":"Name","pos":[897,901]},{"content":"Description","pos":[902,913]},{"content":"CImageList::CImageList","pos":[952,974]},{"pos":[1001,1034],"content":"Constructs a <ph id=\"ph1\">`CImageList`</ph> object.","source":"Constructs a `CImageList` object."},{"content":"Public Methods","pos":[1045,1059]},{"content":"Name","pos":[1066,1070]},{"content":"Description","pos":[1071,1082]},{"content":"CImageList::Add","pos":[1121,1136]},{"content":"Adds an image or images to an image list.","pos":[1156,1197]},{"content":"CImageList::Attach","pos":[1203,1221]},{"pos":[1244,1292],"content":"Attaches an image list to a <ph id=\"ph1\">`CImageList`</ph> object.","source":"Attaches an image list to a `CImageList` object."},{"content":"CImageList::BeginDrag","pos":[1298,1319]},{"content":"Begins dragging an image.","pos":[1345,1370]},{"content":"CImageList::Copy","pos":[1376,1392]},{"pos":[1413,1458],"content":"Copies an image within a <ph id=\"ph1\">`CImageList`</ph> object.","source":"Copies an image within a `CImageList` object."},{"content":"CImageList::Create","pos":[1464,1482]},{"pos":[1505,1572],"content":"Initializes an image list and attaches it to a <ph id=\"ph1\">`CImageList`</ph> object.","source":"Initializes an image list and attaches it to a `CImageList` object."},{"content":"CImageList::DeleteImageList","pos":[1578,1605]},{"content":"Deletes an image list.","pos":[1637,1659]},{"content":"CImageList::DeleteTempMap","pos":[1665,1690]},{"pos":[1720,1868],"content":"Called by the <bpt id=\"p1\">[</bpt>CWinApp<ept id=\"p1\">](../../mfc/reference/cwinapp-class.md)</ept> idle-time handler to delete any temporary <ph id=\"ph1\">`CImageList`</ph> object created by <ph id=\"ph2\">`FromHandle`</ph>.","source":"Called by the [CWinApp](../../mfc/reference/cwinapp-class.md) idle-time handler to delete any temporary `CImageList` object created by `FromHandle`."},{"content":"CImageList::Detach","pos":[1874,1892]},{"pos":[1915,2010],"content":"Detaches an image list object from a <ph id=\"ph1\">`CImageList`</ph> object and returns a handle to an image list.","source":"Detaches an image list object from a `CImageList` object and returns a handle to an image list."},{"content":"CImageList::DragEnter","pos":[2016,2037]},{"content":"Locks updates during a drag operation and displays the drag image at a specified position.","pos":[2063,2153]},{"content":"CImageList::DragLeave","pos":[2159,2180]},{"content":"Unlocks the window and hides the drag image so that the window can be updated.","pos":[2206,2284]},{"content":"CImageList::DragMove","pos":[2290,2310]},{"content":"Moves the image that is being dragged during a drag-and-drop operation.","pos":[2335,2406]},{"content":"CImageList::DragShowNolock","pos":[2412,2438]},{"content":"Shows or hides the drag image during a drag operation, without locking the window.","pos":[2469,2551]},{"content":"CImageList::Draw","pos":[2557,2573]},{"content":"Draws the image that is being dragged during a drag-and-drop operation.","pos":[2594,2665]},{"content":"CImageList::DrawEx","pos":[2671,2689]},{"content":"Draws an image list item in the specified device context.","pos":[2712,2769]},{"content":"The function uses the specified drawing style and blends the image with the specified color.","pos":[2770,2862]},{"content":"CImageList::DrawIndirect","pos":[2868,2892]},{"content":"Draws an image from an image list.","pos":[2921,2955]},{"content":"CImageList::EndDrag","pos":[2961,2980]},{"content":"Ends a drag operation.","pos":[3004,3026]},{"content":"CImageList::ExtractIcon","pos":[3032,3055]},{"content":"Creates an icon based on an image and mask in an image list.","pos":[3083,3143]},{"content":"CImageList::FromHandle","pos":[3149,3171]},{"content":"Returns a pointer to a <ph id=\"ph1\">`CImageList`</ph> object when given a handle to an image list.","pos":[3198,3278],"source":"Returns a pointer to a `CImageList` object when given a handle to an image list."},{"content":"If a <ph id=\"ph1\">`CImageList`</ph> object is not attached to the handle, a temporary <ph id=\"ph2\">`CImageList`</ph> object is created and attached.","pos":[3279,3391],"source":" If a `CImageList` object is not attached to the handle, a temporary `CImageList` object is created and attached."},{"content":"CImageList::FromHandlePermanent","pos":[3397,3428]},{"content":"Returns a pointer to a <ph id=\"ph1\">`CImageList`</ph> object when given a handle to an image list.","pos":[3464,3544],"source":"Returns a pointer to a `CImageList` object when given a handle to an image list."},{"content":"If a <ph id=\"ph1\">`CImageList`</ph> object is not attached to the handle, <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> is returned.","pos":[3545,3622],"source":" If a `CImageList` object is not attached to the handle, **NULL** is returned."},{"content":"CImageList::GetBkColor","pos":[3628,3650]},{"content":"Retrieves the current background color for an image list.","pos":[3677,3734]},{"content":"CImageList::GetDragImage","pos":[3740,3764]},{"content":"Gets the temporary image list that is used for dragging.","pos":[3793,3849]},{"content":"CImageList::GetImageCount","pos":[3855,3880]},{"content":"Retrieves the number of images in an image list.","pos":[3910,3958]},{"content":"CImageList::GetImageInfo","pos":[3964,3988]},{"content":"Retrieves information about an image.","pos":[4017,4054]},{"content":"CImageList::GetSafeHandle","pos":[4060,4085]},{"pos":[4115,4142],"content":"Retrieves <bpt id=\"p1\">**</bpt>m_hImageList<ept id=\"p1\">**</ept>.","source":"Retrieves **m_hImageList**."},{"content":"CImageList::Read","pos":[4148,4164]},{"content":"Reads an image list from an archive.","pos":[4185,4221]},{"content":"CImageList::Remove","pos":[4227,4245]},{"content":"Removes an image from an image list.","pos":[4268,4304]},{"content":"CImageList::Replace","pos":[4310,4329]},{"content":"Replaces an image in an image list with a new image.","pos":[4353,4405]},{"content":"CImageList::SetBkColor","pos":[4411,4433]},{"content":"Sets the background color for an image list.","pos":[4460,4504]},{"content":"CImageList::SetDragCursorImage","pos":[4510,4540]},{"content":"Creates a new drag image.","pos":[4575,4600]},{"content":"CImageList::SetImageCount","pos":[4606,4631]},{"content":"Resets the count of images in an image list.","pos":[4661,4705]},{"content":"CImageList::SetOverlayImage","pos":[4711,4738]},{"content":"Adds the zero-based index of an image to the list of images to be used as overlay masks.","pos":[4770,4858]},{"content":"CImageList::Write","pos":[4864,4881]},{"content":"Writes an image list to an archive.","pos":[4903,4938]},{"content":"Public Operators","pos":[4949,4965]},{"content":"Name","pos":[4972,4976]},{"content":"Description","pos":[4977,4988]},{"content":"CImageList::operator HIMAGELIST","pos":[5027,5058]},{"pos":[5094,5148],"content":"Returns the <ph id=\"ph1\">`HIMAGELIST`</ph> attached to the <ph id=\"ph2\">`CImageList`</ph>.","source":"Returns the `HIMAGELIST` attached to the `CImageList`."},{"content":"Public Data Members","pos":[5159,5178]},{"content":"Name","pos":[5185,5189]},{"content":"Description","pos":[5190,5201]},{"content":"CImageList::m_hImageList","pos":[5240,5264]},{"content":"A handle containing the image list attached to this object.","pos":[5293,5352]},{"content":"Remarks","pos":[5362,5369]},{"content":"An \"image list\" is a collection of same-sized images, each of which can be referred to by its zero-based index.","pos":[5373,5484]},{"content":"Image lists are used to efficiently manage large sets of icons or bitmaps.","pos":[5485,5559]},{"content":"All images in an image list are contained in a single, wide bitmap in screen device format.","pos":[5560,5651]},{"content":"An image list may also include a monochrome bitmap that contains masks used to draw images transparently (icon style).","pos":[5652,5770]},{"content":"The Microsoft Win32 application programming interface (API) provides image list functions that enable you to draw images, create and destroy image lists, add and remove images, replace images, merge images, and drag images.","pos":[5771,5994]},{"pos":[6001,6149],"content":"This control (and therefore the <ph id=\"ph1\">`CImageList`</ph> class) is available only to programs running under Windows 95/98 and Windows NT version 3.51 and later.","source":"This control (and therefore the `CImageList` class) is available only to programs running under Windows 95/98 and Windows NT version 3.51 and later."},{"pos":[6156,6296],"content":"For more information on using <ph id=\"ph1\">`CImageList`</ph>, see <bpt id=\"p1\">[</bpt>Controls<ept id=\"p1\">](../../mfc/controls-mfc.md)</ept> and <bpt id=\"p2\">[</bpt>Using CImageList<ept id=\"p2\">](../../mfc/using-cimagelist.md)</ept>.","source":"For more information on using `CImageList`, see [Controls](../../mfc/controls-mfc.md) and [Using CImageList](../../mfc/using-cimagelist.md)."},{"content":"Inheritance Hierarchy","pos":[6305,6326]},{"content":"CObject","pos":[6331,6338]},{"content":"Requirements","pos":[6405,6417]},{"pos":[6421,6441],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxcmn.h","source":"**Header:** afxcmn.h"},{"pos":[6483,6498],"content":"CImageList::Add"},{"content":"Call this function to add one or more images or an icon to an image list.","pos":[6502,6575]},{"content":"Parameters","pos":[6746,6756]},{"content":"Pointer to the bitmap containing the image or images.","pos":[6774,6827]},{"content":"The number of images is inferred from the width of the bitmap.","pos":[6828,6890]},{"content":"Pointer to the bitmap containing the mask.","pos":[6910,6952]},{"content":"If no mask is used with the image list, this parameter is ignored.","pos":[6953,7019]},{"content":"Color used to generate the mask.","pos":[7038,7070]},{"content":"Each pixel of this color in the given bitmap is changed to black and the corresponding bit in the mask is set to one.","pos":[7071,7188]},{"content":"Handle of the icon that contains the bitmap and mask for the new image.","pos":[7206,7277]},{"content":"Return Value","pos":[7287,7299]},{"content":"Zero-based index of the first new image if successful; otherwise – 1.","pos":[7303,7372]},{"content":"Remarks","pos":[7382,7389]},{"content":"You are responsible for releasing the icon handle when you are done with it.","pos":[7393,7469]},{"content":"Example","pos":[7479,7486]},{"pos":[7501,7521],"content":"NVC_MFC_CImageList#1"},{"pos":[7628,7646],"content":"CImageList::Attach"},{"pos":[7650,7718],"content":"Call this function to attach an image list to a <ph id=\"ph1\">`CImageList`</ph> object.","source":"Call this function to attach an image list to a `CImageList` object."},{"content":"Parameters","pos":[7779,7789]},{"content":"A handle to an image list object.","pos":[7809,7842]},{"content":"Return Value","pos":[7852,7864]},{"content":"Nonzero if the attachment was successful; otherwise 0.","pos":[7868,7922]},{"content":"Example","pos":[7932,7939]},{"pos":[7954,7974],"content":"NVC_MFC_CImageList#2"},{"pos":[8084,8105],"content":"CImageList::BeginDrag"},{"content":"Call this function to begin dragging an image.","pos":[8109,8155]},{"content":"Parameters","pos":[8237,8247]},{"content":"Zero-based index of the image to drag.","pos":[8263,8301]},{"content":"Coordinates of the starting drag position (typically, the cursor position).","pos":[8323,8398]},{"content":"The coordinates are relative to the upper left corner of the image.","pos":[8399,8466]},{"content":"Return Value","pos":[8476,8488]},{"content":"Nonzero if successful; otherwise 0.","pos":[8492,8527]},{"content":"Remarks","pos":[8537,8544]},{"content":"This function creates a temporary image list that is used for dragging.","pos":[8548,8619]},{"content":"The image combines the specified image and its mask with the current cursor.","pos":[8620,8696]},{"content":"In response to subsequent <ph id=\"ph1\">`WM_MOUSEMOVE`</ph> messages, you can move the drag image by using the <ph id=\"ph2\">`DragMove`</ph> member function.","pos":[8697,8816],"source":" In response to subsequent `WM_MOUSEMOVE` messages, you can move the drag image by using the `DragMove` member function."},{"content":"To end the drag operation, you can use the <ph id=\"ph1\">`EndDrag`</ph> member function.","pos":[8817,8886],"source":" To end the drag operation, you can use the `EndDrag` member function."},{"content":"Example","pos":[8896,8903]},{"pos":[8918,8938],"content":"NVC_MFC_CImageList#3"},{"pos":[9049,9071],"content":"CImageList::CImageList"},{"pos":[9075,9108],"content":"Constructs a <ph id=\"ph1\">`CImageList`</ph> object.","source":"Constructs a `CImageList` object."},{"pos":[9180,9196],"content":"CImageList::Copy"},{"pos":[9200,9417],"content":"This member function implements the behavior of the Win32 function <bpt id=\"p1\">[</bpt>ImageList_Copy<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761520)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 function [ImageList_Copy](http://msdn.microsoft.com/library/windows/desktop/bb761520), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Parameters","pos":[9615,9625]},{"content":"iDst","pos":[9630,9634]},{"content":"The zero-based index of the image to be used as the destination of the copy operation.","pos":[9639,9725]},{"content":"The zero-based index of the image to be used as the source of the copy operation.","pos":[9742,9823]},{"content":"The bit flag value that specifies the type of copy operation to be made.","pos":[9842,9914]},{"content":"This parameter can be one of the following values:","pos":[9915,9965]},{"content":"Value","pos":[9972,9977]},{"content":"Meaning","pos":[9978,9985]},{"content":"The source image is copied to the destination image's index.","pos":[10032,10092]},{"content":"This operation results in multiple instances of a given image.","pos":[10093,10155]},{"content":"is the default.","pos":[10168,10183]},{"content":"The source and destination images exchange positions within the image list.","pos":[10200,10275]},{"content":"A pointer to a <ph id=\"ph1\">`CImageList`</ph> object that is the target of the copy operation.","pos":[10293,10369],"source":" A pointer to a `CImageList` object that is the target of the copy operation."},{"content":"Return Value","pos":[10379,10391]},{"content":"Nonzero if successful; otherwise zero.","pos":[10395,10433]},{"content":"Example","pos":[10443,10450]},{"pos":[10465,10485],"content":"NVC_MFC_CImageList#6"},{"pos":[10592,10610],"content":"CImageList::Create"},{"pos":[10614,10722],"content":"Initializes an image list and attaches it to a <bpt id=\"p1\">[</bpt>CImageList<ept id=\"p1\">](../../mfc/reference/cimagelist-class.md)</ept> object.","source":"Initializes an image list and attaches it to a [CImageList](../../mfc/reference/cimagelist-class.md) object."},{"content":"Parameters","pos":[11217,11227]},{"content":"Dimensions of each image, in pixels.","pos":[11239,11275]},{"content":"Dimensions of each image, in pixels.","pos":[11290,11326]},{"content":"Specifies the type of image list to create.","pos":[11345,11388]},{"content":"This parameter can be a combination of the following values, but it can include only one of the <ph id=\"ph1\">`ILC_COLOR`</ph> values.","pos":[11389,11504],"source":" This parameter can be a combination of the following values, but it can include only one of the `ILC_COLOR` values."},{"content":"Value","pos":[11511,11516]},{"content":"Meaning","pos":[11517,11524]},{"content":"Use the default behavior if none of the other <ph id=\"ph1\">`ILC_COLOR`</ph>* flags is specified.","pos":[11571,11649],"source":"Use the default behavior if none of the other `ILC_COLOR`* flags is specified."},{"content":"Typically, the default is <ph id=\"ph1\">`ILC_COLOR4`</ph>; but for older display drivers, the default is <ph id=\"ph2\">`ILC_COLORDDB`</ph>.","pos":[11650,11751],"source":" Typically, the default is `ILC_COLOR4`; but for older display drivers, the default is `ILC_COLORDDB`."},{"content":"Use a 4-bit (16 color) device-independent bitmap (DIB) section as the bitmap for the image list.","pos":[11769,11865]},{"content":"Use an 8-bit DIB section.","pos":[11883,11908]},{"content":"The colors used for the color table are the same colors as the halftone palette.","pos":[11909,11989]},{"content":"Use a 16-bit (32/64k color) DIB section.","pos":[12008,12048]},{"content":"Use a 24-bit DIB section.","pos":[12067,12092]},{"content":"Use a 32-bit DIB section.","pos":[12111,12136]},{"content":"Use a device-dependent bitmap.","pos":[12156,12186]},{"content":"Uses a mask.","pos":[12202,12214]},{"content":"The image list contains two bitmaps, one of which is a monochrome bitmap used as a mask.","pos":[12215,12303]},{"content":"If this value is not included, the image list contains only one bitmap.","pos":[12304,12375]},{"content":"See <bpt id=\"p1\">[</bpt>Drawing Images from an Image List<ept id=\"p1\">](../../mfc/drawing-images-from-an-image-list.md)</ept> for additional information on masked images.","pos":[12376,12508],"source":" See [Drawing Images from an Image List](../../mfc/drawing-images-from-an-image-list.md) for additional information on masked images."},{"content":"Number of images that the image list initially contains.","pos":[12530,12586]},{"content":"Number of images by which the image list can grow when the system needs to resize the list to make room for new images.","pos":[12604,12723]},{"content":"This parameter represents the number of new images the resized image list can contain.","pos":[12724,12810]},{"content":"Resource IDs of the bitmap to be associated with the image list.","pos":[12832,12896]},{"content":"Color used to generate a mask.","pos":[12915,12945]},{"content":"Each pixel of this color in the specified bitmap is changed to black, and the corresponding bit in the mask is set to one.","pos":[12946,13068]},{"content":"A string containing the resource IDs of the images.","pos":[13093,13144]},{"content":"A reference to a <ph id=\"ph1\">`CImageList`</ph> object.","pos":[13167,13204],"source":" A reference to a `CImageList` object."},{"content":"Index of the first existing image.","pos":[13224,13258]},{"content":"A reference to a <ph id=\"ph1\">`CImageList`</ph> object.","pos":[13281,13318],"source":" A reference to a `CImageList` object."},{"content":"Index of the second existing image.","pos":[13338,13373]},{"content":"Offset of the x-axis of the second image in relationship to the first image, in pixels.","pos":[13388,13475]},{"content":"Offset of the y-axis of the second image in relationship to the first image, in pixels.","pos":[13490,13577]},{"content":"A pointer to a <ph id=\"ph1\">`CImageList`</ph> object.","pos":[13600,13635],"source":" A pointer to a `CImageList` object."},{"content":"Return Value","pos":[13645,13657]},{"content":"Nonzero if successful; otherwise 0.","pos":[13661,13696]},{"content":"Remarks","pos":[13706,13713]},{"content":"You construct a <ph id=\"ph1\">`CImageList`</ph> in two steps.","pos":[13717,13759],"source":"You construct a `CImageList` in two steps."},{"content":"First, call the constructor and then call <ph id=\"ph1\">`Create`</ph>, which creates the image list and attaches it to the <ph id=\"ph2\">`CImageList`</ph>object.","pos":[13760,13883],"source":" First, call the constructor and then call `Create`, which creates the image list and attaches it to the `CImageList`object."},{"content":"Example","pos":[13893,13900]},{"pos":[13915,13935],"content":"NVC_MFC_CImageList#7"},{"pos":[14051,14078],"content":"CImageList::DeleteImageList"},{"content":"Call this function to delete an image list.","pos":[14082,14125]},{"content":"Return Value","pos":[14174,14186]},{"content":"Nonzero if successful; otherwise 0.","pos":[14190,14225]},{"content":"Example","pos":[14235,14242]},{"pos":[14257,14277],"content":"NVC_MFC_CImageList#8"},{"pos":[14391,14416],"content":"CImageList::DeleteTempMap"},{"pos":[14420,14689],"content":"Called automatically by the <ph id=\"ph1\">`CWinApp`</ph> idle-time handler, <ph id=\"ph2\">`DeleteTempMap`</ph> deletes any temporary <ph id=\"ph3\">`CImageList`</ph> objects created by <bpt id=\"p1\">[</bpt>FromHandle<ept id=\"p1\">](#cimagelist__fromhandle)</ept>, but does not destroy any handles ( <ph id=\"ph4\">`hImageList`</ph>) temporarily associated with the <bpt id=\"p2\">**</bpt>ImageList<ept id=\"p2\">**</ept> objects.","source":"Called automatically by the `CWinApp` idle-time handler, `DeleteTempMap` deletes any temporary `CImageList` objects created by [FromHandle](#cimagelist__fromhandle), but does not destroy any handles ( `hImageList`) temporarily associated with the **ImageList** objects."},{"content":"Example","pos":[14750,14757]},{"pos":[14772,14792],"content":"NVC_MFC_CImageList#9"},{"pos":[14899,14917],"content":"CImageList::Detach"},{"pos":[14921,14998],"content":"Call this function to detach an image list object from a <ph id=\"ph1\">`CImageList`</ph> object.","source":"Call this function to detach an image list object from a `CImageList` object."},{"content":"Return Value","pos":[15044,15056]},{"content":"A handle to an image list object.","pos":[15060,15093]},{"content":"Remarks","pos":[15103,15110]},{"content":"This function returns a handle to the image list object.","pos":[15114,15170]},{"content":"Example","pos":[15180,15187]},{"pos":[15192,15254],"content":"See the example for <bpt id=\"p1\">[</bpt>CImageList::Attach<ept id=\"p1\">](#cimagelist__attach)</ept>.","source":"See the example for [CImageList::Attach](#cimagelist__attach)."},{"pos":[15302,15323],"content":"CImageList::DragEnter"},{"pos":[15327,15469],"content":"During a drag operation, locks updates to the window specified by <ph id=\"ph1\">`pWndLock`</ph> and displays the drag image at the position specified by <ph id=\"ph2\">`point`</ph>.","source":"During a drag operation, locks updates to the window specified by `pWndLock` and displays the drag image at the position specified by `point`."},{"content":"Parameters","pos":[15565,15575]},{"content":"Pointer to the window that owns the drag image.","pos":[15593,15640]},{"content":"Position at which to display the drag image.","pos":[15658,15702]},{"content":"Coordinates are relative to the upper left corner of the window (not the client area).","pos":[15703,15789]},{"content":"Return Value","pos":[15799,15811]},{"content":"Nonzero if successful; otherwise 0.","pos":[15815,15850]},{"content":"Remarks","pos":[15860,15867]},{"content":"The coordinates are relative to the window's upper left corner, so you must compensate for the widths of window elements, such as the border, title bar, and menu bar, when specifying the coordinates.","pos":[15871,16070]},{"pos":[16077,16261],"content":"If <ph id=\"ph1\">`pWndLock`</ph> is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, this function draws the image in the display context associated with the desktop window, and coordinates are relative to the upper left corner of the screen.","source":"If `pWndLock` is **NULL**, this function draws the image in the display context associated with the desktop window, and coordinates are relative to the upper left corner of the screen."},{"content":"This function locks all other updates to the given window during the drag operation.","pos":[16268,16352]},{"content":"If you need to do any drawing during a drag operation, such as highlighting the target of a drag-and-drop operation, you can temporarily hide the dragged image by using the <bpt id=\"p1\">[</bpt>CImageList::DragLeave<ept id=\"p1\">](#cimagelist__dragleave)</ept> function.","pos":[16353,16583],"source":" If you need to do any drawing during a drag operation, such as highlighting the target of a drag-and-drop operation, you can temporarily hide the dragged image by using the [CImageList::DragLeave](#cimagelist__dragleave) function."},{"content":"Example","pos":[16593,16600]},{"pos":[16605,16673],"content":"See the example for <bpt id=\"p1\">[</bpt>CImageList::BeginDrag<ept id=\"p1\">](#cimagelist__begindrag)</ept>.","source":"See the example for [CImageList::BeginDrag](#cimagelist__begindrag)."},{"pos":[16721,16742],"content":"CImageList::DragLeave"},{"pos":[16746,16849],"content":"Unlocks the window specified by <ph id=\"ph1\">`pWndLock`</ph> and hides the drag image, allowing the window to be updated.","source":"Unlocks the window specified by `pWndLock` and hides the drag image, allowing the window to be updated."},{"content":"Parameters","pos":[16920,16930]},{"content":"Pointer to the window that owns the drag image.","pos":[16948,16995]},{"content":"Return Value","pos":[17005,17017]},{"content":"Nonzero if successful; otherwise 0.","pos":[17021,17056]},{"content":"Example","pos":[17066,17073]},{"pos":[17078,17142],"content":"See the example for <bpt id=\"p1\">[</bpt>CImageList::EndDrag<ept id=\"p1\">](#cimagelist__enddrag)</ept>.","source":"See the example for [CImageList::EndDrag](#cimagelist__enddrag)."},{"pos":[17189,17209],"content":"CImageList::DragMove"},{"content":"Call this function to move the image that is being dragged during a drag-and-drop operation.","pos":[17213,17305]},{"content":"Parameters","pos":[17370,17380]},{"content":"New drag position.","pos":[17392,17410]},{"content":"Return Value","pos":[17420,17432]},{"content":"Nonzero if successful; otherwise 0.","pos":[17436,17471]},{"content":"Remarks","pos":[17481,17488]},{"content":"This function is typically called in response to a <ph id=\"ph1\">`WM_MOUSEMOVE`</ph> message.","pos":[17492,17566],"source":"This function is typically called in response to a `WM_MOUSEMOVE` message."},{"content":"To begin a drag operation, use the <ph id=\"ph1\">`BeginDrag`</ph> member function.","pos":[17567,17630],"source":" To begin a drag operation, use the `BeginDrag` member function."},{"content":"Example","pos":[17640,17647]},{"pos":[17662,17682],"content":"NVC_MFC_CImageList#4"},{"pos":[17797,17823],"content":"CImageList::DragShowNolock"},{"content":"Shows or hides the drag image during a drag operation, without locking the window.","pos":[17827,17909]},{"content":"Parameters","pos":[17981,17991]},{"content":"Specifies whether the drag image is to be shown.","pos":[18006,18054]},{"content":"Return Value","pos":[18064,18076]},{"content":"Nonzero if successful; otherwise 0.","pos":[18080,18115]},{"content":"Remarks","pos":[18125,18132]},{"content":"The <bpt id=\"p1\">[</bpt>CImageList::DragEnter<ept id=\"p1\">](#cimagelist__dragenter)</ept> function locks all updates to the window during a drag operation.","pos":[18136,18253],"source":"The [CImageList::DragEnter](#cimagelist__dragenter) function locks all updates to the window during a drag operation."},{"content":"This function, however, does not lock the window.","pos":[18254,18303]},{"pos":[18346,18362],"content":"CImageList::Draw"},{"content":"Call this function to draw the image that is being dragged during a drag-and-drop operation.","pos":[18366,18458]},{"content":"Parameters","pos":[18562,18572]},{"content":"Pointer to the destination device context.","pos":[18585,18627]},{"content":"Zero-based index of the image to draw.","pos":[18646,18684]},{"content":"Location at which to draw within the specified device context.","pos":[18699,18761]},{"content":"Flag specifying the drawing style.","pos":[18780,18814]},{"content":"It can be one or more of these values:","pos":[18815,18853]},{"content":"Value","pos":[18860,18865]},{"content":"Meaning","pos":[18866,18873]},{"pos":[18921,18936],"content":", <bpt id=\"p1\">**</bpt>ILD_FOCUS<ept id=\"p1\">**</ept>","source":", **ILD_FOCUS**"},{"content":"Draws the image, blending 25 percent with the system highlight color.","pos":[18937,19006]},{"content":"This value has no effect if the image list does not contain a mask.","pos":[19007,19074]},{"pos":[19092,19125],"content":", <bpt id=\"p1\">**</bpt>ILD_SELECTED<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>ILD_BLEND<ept id=\"p2\">**</ept>","source":", **ILD_SELECTED**, **ILD_BLEND**"},{"content":"Draws the image, blending 50 percent with the system highlight color.","pos":[19126,19195]},{"content":"This value has no effect if the image list does not contain a mask.","pos":[19196,19263]},{"content":"ILD_MASK","pos":[19270,19278]},{"content":"Draws the mask.","pos":[19281,19296]},{"content":"Draws the image using the background color for the image list.","pos":[19314,19376]},{"content":"If the background color is the <ph id=\"ph1\">`CLR_NONE`</ph> value, the image is drawn transparently using the mask.","pos":[19377,19474],"source":" If the background color is the `CLR_NONE` value, the image is drawn transparently using the mask."},{"content":"Draws the image transparently using the mask, regardless of the background color.","pos":[19497,19578]},{"content":"Return Value","pos":[19589,19601]},{"content":"Nonzero if successful; otherwise 0.","pos":[19605,19640]},{"content":"Example","pos":[19650,19657]},{"pos":[19662,19742],"content":"See the example for <bpt id=\"p1\">[</bpt>CImageList::SetOverlayImage<ept id=\"p1\">](#cimagelist__setoverlayimage)</ept>.","source":"See the example for [CImageList::SetOverlayImage](#cimagelist__setoverlayimage)."},{"pos":[19787,19805],"content":"CImageList::DrawEx"},{"content":"Draws an image list item in the specified device context.","pos":[19809,19866]},{"content":"Parameters","pos":[20031,20041]},{"content":"Pointer to the destination device context.","pos":[20054,20096]},{"content":"Zero-based index of the image to draw.","pos":[20115,20153]},{"content":"Location at which to draw within the specified device context.","pos":[20168,20230]},{"content":"Size of the portion of the image to draw relative to the upper-left corner of the image.","pos":[20245,20333]},{"content":"See <ph id=\"ph1\">`dx`</ph> and <bpt id=\"p1\">*</bpt>dy<ept id=\"p1\">*</ept> in <bpt id=\"p2\">[</bpt>ImageList_DrawEx<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb761536)</ept> in the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph><bpt id=\"p3\">*</bpt>.<ept id=\"p3\">*</ept>","pos":[20334,20495],"source":" See `dx` and *dy* in [ImageList_DrawEx](http://msdn.microsoft.com/library/windows/desktop/bb761536) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]*.*"},{"content":"clrBk","pos":[20503,20508]},{"content":"Background color of the image.","pos":[20513,20543]},{"content":"See <bpt id=\"p1\">*</bpt>rgbBk<ept id=\"p1\">*</ept> in <bpt id=\"p2\">[</bpt>ImageList_DrawEx<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb761536)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph><bpt id=\"p3\">*</bpt>.<ept id=\"p3\">*</ept>","pos":[20544,20699],"source":" See *rgbBk* in [ImageList_DrawEx](http://msdn.microsoft.com/library/windows/desktop/bb761536) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]*.*"},{"content":"clrFg","pos":[20707,20712]},{"content":"Foreground color of the image.","pos":[20717,20747]},{"content":"See <bpt id=\"p1\">*</bpt>rgbFg<ept id=\"p1\">*</ept> in <bpt id=\"p2\">[</bpt>ImageList_DrawEx<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb761536)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph><bpt id=\"p3\">*</bpt>.<ept id=\"p3\">*</ept>","pos":[20748,20903],"source":" See *rgbFg* in [ImageList_DrawEx](http://msdn.microsoft.com/library/windows/desktop/bb761536) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]*.*"},{"content":"Flag specifying the drawing style.","pos":[20922,20956]},{"content":"See <bpt id=\"p1\">*</bpt>fStyle<ept id=\"p1\">*</ept> in <bpt id=\"p2\">[</bpt>ImageList_DrawEx<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb761536)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph><bpt id=\"p3\">*</bpt>.<ept id=\"p3\">*</ept>","pos":[20957,21113],"source":" See *fStyle* in [ImageList_DrawEx](http://msdn.microsoft.com/library/windows/desktop/bb761536) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]*.*"},{"content":"Return Value","pos":[21123,21135]},{"content":"Nonzero if successful; otherwise 0.","pos":[21139,21174]},{"content":"Remarks","pos":[21184,21191]},{"content":"The function uses the specified drawing style and blends the image with the specified color.","pos":[21195,21287]},{"content":"Example","pos":[21297,21304]},{"pos":[21319,21340],"content":"NVC_MFC_CImageList#10"},{"pos":[21453,21477],"content":"CImageList::DrawIndirect"},{"content":"Call this member function to draw an image from an image list.","pos":[21481,21543]},{"content":"Parameters","pos":[21961,21971]},{"content":"pimldp","pos":[21976,21982]},{"content":"A pointer to an <bpt id=\"p1\">[</bpt>IMAGELISTDRAWPARAMS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761395)</ept> structure that contains information about the draw operation.","pos":[21987,22146],"source":" A pointer to an [IMAGELISTDRAWPARAMS](http://msdn.microsoft.com/library/windows/desktop/bb761395) structure that contains information about the draw operation."},{"content":"A pointer to the destination device context.","pos":[22162,22206]},{"content":"You must delete this <bpt id=\"p1\">[</bpt>CDC<ept id=\"p1\">](../../mfc/reference/cdc-class.md)</ept> object when you are done with it.","pos":[22207,22301],"source":" You must delete this [CDC](../../mfc/reference/cdc-class.md) object when you are done with it."},{"content":"The zero-based index of the image to be drawn.","pos":[22320,22366]},{"content":"A <bpt id=\"p1\">[</bpt>POINT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162805)</ept> structure containing the x– and y– coordinates where the image will be drawn.","pos":[22381,22528],"source":" A [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) structure containing the x– and y– coordinates where the image will be drawn."},{"content":"A <bpt id=\"p1\">[</bpt>SIZE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure indicating the size of the image to be drawn.","pos":[22543,22667],"source":" A [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure indicating the size of the image to be drawn."},{"content":"ptOrigin","pos":[22675,22683]},{"content":"A <bpt id=\"p1\">[</bpt>POINT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162805)</ept> structure containing the x– and y–coordinates specifying the upper left corner of the drawing operation with respect to the image itself.","pos":[22688,22895],"source":" A [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) structure containing the x– and y–coordinates specifying the upper left corner of the drawing operation with respect to the image itself."},{"content":"Pixels of the image that are to the left of the x–coordinate and above the y–coordinate are not drawn.","pos":[22896,22998]},{"content":"Flag specifying the drawing style and, optionally, the overlay image.","pos":[23017,23086]},{"content":"See the Remarks section for information on the overlay image.","pos":[23087,23148]},{"content":"The MFC default implementation, <ph id=\"ph1\">`ILD_NORMAL`</ph>, draws the image using the background color for the image list.","pos":[23149,23257],"source":" The MFC default implementation, `ILD_NORMAL`, draws the image using the background color for the image list."},{"content":"If the background color is the <ph id=\"ph1\">`CLR_NONE`</ph> value, the image is drawn transparently using a mask.","pos":[23258,23353],"source":" If the background color is the `CLR_NONE` value, the image is drawn transparently using a mask."},{"pos":[23360,23523],"content":"Other possible styles are described under the <bpt id=\"p1\">**</bpt>fStyle<ept id=\"p1\">**</ept> member of the <bpt id=\"p2\">[</bpt>IMAGELISTDRAWPARAMS<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb761395)</ept> structure.","source":"Other possible styles are described under the **fStyle** member of the [IMAGELISTDRAWPARAMS](http://msdn.microsoft.com/library/windows/desktop/bb761395) structure."},{"content":"dwRop","pos":[23531,23536]},{"content":"Value specifying a raster-operation code.","pos":[23541,23582]},{"content":"These codes define how the color data for the source rectangle will be combined with the color data for the destination rectangle to achieve the final color.","pos":[23583,23740]},{"content":"MFC's default implementation, <bpt id=\"p1\">**</bpt>SRCCOPY<ept id=\"p1\">**</ept>, copies the source rectangle directly to the destination rectangle.","pos":[23741,23850],"source":" MFC's default implementation, **SRCCOPY**, copies the source rectangle directly to the destination rectangle."},{"content":"This parameter is ignored if the <ph id=\"ph1\">`fStyle`</ph> parameter does not include the <bpt id=\"p1\">**</bpt>ILD_ROP<ept id=\"p1\">**</ept> flag.","pos":[23851,23941],"source":" This parameter is ignored if the `fStyle` parameter does not include the **ILD_ROP** flag."},{"pos":[23948,24110],"content":"Other possible values are described under the <bpt id=\"p1\">**</bpt>dwRop<ept id=\"p1\">**</ept> member of the <bpt id=\"p2\">[</bpt>IMAGELISTDRAWPARAMS<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb761395)</ept> structure.","source":"Other possible values are described under the **dwRop** member of the [IMAGELISTDRAWPARAMS](http://msdn.microsoft.com/library/windows/desktop/bb761395) structure."},{"content":"rgbBack","pos":[24118,24125]},{"content":"The image background color, by default <ph id=\"ph1\">`CLR_DEFAULT`</ph>.","pos":[24130,24183],"source":" The image background color, by default `CLR_DEFAULT`."},{"content":"This parameter can be an application-defined RGB value or one of the following values:","pos":[24184,24270]},{"content":"Value","pos":[24277,24282]},{"content":"Meaning","pos":[24283,24290]},{"content":"Default background color.","pos":[24339,24364]},{"content":"The image is drawn using the image list background color.","pos":[24365,24422]},{"content":"No background color.","pos":[24438,24458]},{"content":"The image is drawn transparently.","pos":[24459,24492]},{"content":"rgbFore","pos":[24501,24508]},{"content":"Image foreground color, by default <ph id=\"ph1\">`CLR_DEFAULT`</ph>.","pos":[24513,24562],"source":" Image foreground color, by default `CLR_DEFAULT`."},{"content":"This parameter can be an application-defined RGB value or one of the following values:","pos":[24563,24649]},{"content":"Value","pos":[24656,24661]},{"content":"Meaning","pos":[24662,24669]},{"content":"Default foreground color.","pos":[24718,24743]},{"content":"The image is drawn using the system highlight color as the foreground color.","pos":[24744,24820]},{"content":"No blend color.","pos":[24836,24851]},{"content":"The image is blended with the color of the destination device context.","pos":[24852,24922]},{"pos":[24930,25019],"content":"This parameter is used only if <ph id=\"ph1\">`fStyle`</ph> includes the <ph id=\"ph2\">`ILD_BLEND25`</ph> or <ph id=\"ph3\">`ILD_BLEND50`</ph> flag.","source":"This parameter is used only if `fStyle` includes the `ILD_BLEND25` or `ILD_BLEND50` flag."},{"content":"fState","pos":[25027,25033]},{"content":"Flag specifying the drawing state.","pos":[25038,25072]},{"content":"This member can contain one or more image list state flags.","pos":[25073,25132]},{"content":"Frame","pos":[25140,25145]},{"content":"Affects the behavior of saturate and alpha-blending effects.","pos":[25150,25210]},{"pos":[25217,25362],"content":"When used with <bpt id=\"p1\">**</bpt>ILS_SATURATE<ept id=\"p1\">**</ept>, this member holds the value that is added to each color component of the RGB triplet for each pixel in the icon.","source":"When used with **ILS_SATURATE**, this member holds the value that is added to each color component of the RGB triplet for each pixel in the icon."},{"content":"When used with <bpt id=\"p1\">**</bpt>ILS_APLHA<ept id=\"p1\">**</ept>, this member holds the value for the alpha channel.","pos":[25369,25449],"source":"When used with **ILS_APLHA**, this member holds the value for the alpha channel."},{"content":"This value can be from 0 to 255, with 0 being completely transparent, and 255 being completely opaque.","pos":[25450,25552]},{"content":"crEffect","pos":[25560,25568]},{"content":"A <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> value used for glow and shadow effects.","pos":[25573,25685],"source":" A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) value used for glow and shadow effects."},{"content":"Return Value","pos":[25695,25707]},{"pos":[25711,25776],"content":"<bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> if the image is successfully drawn; otherwise <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","source":"**TRUE** if the image is successfully drawn; otherwise **FALSE**."},{"content":"Remarks","pos":[25786,25793]},{"content":"Use the first version if you want to fill the Win32 structure yourself.","pos":[25797,25868]},{"content":"Use the second version if you want to take advantage of one or more of MFC's default arguments, or avoid managing the structure.","pos":[25869,25997]},{"content":"An overlay image is an image that is drawn on top of the primary image, specified in this member function by the <ph id=\"ph1\">`nImage`</ph> parameter.","pos":[26004,26136],"source":"An overlay image is an image that is drawn on top of the primary image, specified in this member function by the `nImage` parameter."},{"content":"Draw an overlay mask by using the <bpt id=\"p1\">[</bpt>Draw<ept id=\"p1\">](#cimagelist__draw)</ept> member function with the one-based index of the overlay mask specified by using the <bpt id=\"p2\">[</bpt>INDEXTOOVERLAYMASK<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb761408)</ept> macro.","pos":[26137,26368],"source":" Draw an overlay mask by using the [Draw](#cimagelist__draw) member function with the one-based index of the overlay mask specified by using the [INDEXTOOVERLAYMASK](http://msdn.microsoft.com/library/windows/desktop/bb761408) macro."},{"content":"Example","pos":[26378,26385]},{"pos":[26400,26421],"content":"NVC_MFC_CImageList#11"},{"pos":[26530,26549],"content":"CImageList::EndDrag"},{"content":"Call this function to end a drag operation.","pos":[26553,26596]},{"content":"Remarks","pos":[26651,26658]},{"pos":[26662,26725],"content":"To begin a drag operation, use the <ph id=\"ph1\">`BeginDrag`</ph> member function.","source":"To begin a drag operation, use the `BeginDrag` member function."},{"content":"Example","pos":[26735,26742]},{"pos":[26757,26777],"content":"NVC_MFC_CImageList#5"},{"pos":[26890,26913],"content":"CImageList::ExtractIcon"},{"content":"Call this function to create an icon based on an image and its related mask in an image list.","pos":[26917,27010]},{"content":"Parameters","pos":[27066,27076]},{"content":"Zero-based index of the image.","pos":[27092,27122]},{"content":"Return Value","pos":[27132,27144]},{"pos":[27148,27201],"content":"Handle of the icon if successful; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"Handle of the icon if successful; otherwise **NULL**."},{"content":"Remarks","pos":[27211,27218]},{"content":"This method relies on the behavior of the <bpt id=\"p1\">[</bpt>ImageList_ExtractIcon<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761401)</ept> macro to create the icon.","pos":[27222,27373],"source":"This method relies on the behavior of the [ImageList_ExtractIcon](http://msdn.microsoft.com/library/windows/desktop/bb761401) macro to create the icon."},{"content":"Refer to the <bpt id=\"p1\">[</bpt>ImageList_ExtractIcon<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761401)</ept> macro for more information on icon creation and cleanup.","pos":[27374,27527],"source":" Refer to the [ImageList_ExtractIcon](http://msdn.microsoft.com/library/windows/desktop/bb761401) macro for more information on icon creation and cleanup."},{"content":"Example","pos":[27537,27544]},{"pos":[27559,27580],"content":"NVC_MFC_CImageList#12"},{"pos":[27692,27714],"content":"CImageList::FromHandle"},{"pos":[27718,27798],"content":"Returns a pointer to a <ph id=\"ph1\">`CImageList`</ph> object when given a handle to an image list.","source":"Returns a pointer to a `CImageList` object when given a handle to an image list."},{"content":"Parameters","pos":[27884,27894]},{"content":"Specifies the image list.","pos":[27914,27939]},{"content":"Return Value","pos":[27949,27961]},{"pos":[27965,28034],"content":"A pointer to a <ph id=\"ph1\">`CImageList`</ph> object if successful; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"A pointer to a `CImageList` object if successful; otherwise **NULL**."},{"content":"Remarks","pos":[28044,28051]},{"content":"If a <ph id=\"ph1\">`CImageList`</ph> is not already attached to the handle, a temporary <ph id=\"ph2\">`CImageList`</ph> object is created and attached.","pos":[28055,28168],"source":"If a `CImageList` is not already attached to the handle, a temporary `CImageList` object is created and attached."},{"content":"This temporary <ph id=\"ph1\">`CImageList`</ph> object is valid only until the next time the application has idle time in its event loop, at which time all temporary objects are deleted.","pos":[28169,28335],"source":" This temporary `CImageList` object is valid only until the next time the application has idle time in its event loop, at which time all temporary objects are deleted."},{"content":"Example","pos":[28345,28352]},{"pos":[28367,28388],"content":"NVC_MFC_CImageList#13"},{"pos":[28509,28540],"content":"CImageList::FromHandlePermanent"},{"pos":[28544,28624],"content":"Returns a pointer to a <ph id=\"ph1\">`CImageList`</ph> object when given a handle to an image list.","source":"Returns a pointer to a `CImageList` object when given a handle to an image list."},{"content":"Parameters","pos":[28719,28729]},{"content":"Specifies the image list.","pos":[28749,28774]},{"content":"Return Value","pos":[28784,28796]},{"pos":[28800,28869],"content":"A pointer to a <ph id=\"ph1\">`CImageList`</ph> object if successful; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"A pointer to a `CImageList` object if successful; otherwise **NULL**."},{"content":"Remarks","pos":[28879,28886]},{"pos":[28890,28967],"content":"If a <ph id=\"ph1\">`CImageList`</ph> object is not attached to the handle, <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> is returned.","source":"If a `CImageList` object is not attached to the handle, **NULL** is returned."},{"content":"Example","pos":[28977,28984]},{"pos":[28999,29020],"content":"NVC_MFC_CImageList#14"},{"pos":[29132,29154],"content":"CImageList::GetBkColor"},{"content":"Call this function to retrieve the current background color for an image list.","pos":[29158,29236]},{"content":"Return Value","pos":[29293,29305]},{"pos":[29309,29373],"content":"The RGB color value of the <ph id=\"ph1\">`CImageList`</ph> object background color.","source":"The RGB color value of the `CImageList` object background color."},{"content":"Example","pos":[29383,29390]},{"pos":[29395,29465],"content":"See the example for <bpt id=\"p1\">[</bpt>CImageList::SetBkColor<ept id=\"p1\">](#cimagelist__setbkcolor)</ept>.","source":"See the example for [CImageList::SetBkColor](#cimagelist__setbkcolor)."},{"pos":[29516,29540],"content":"CImageList::GetDragImage"},{"content":"Gets the temporary image list that is used for dragging.","pos":[29544,29600]},{"content":"Parameters","pos":[29717,29727]},{"content":"Address of a <bpt id=\"p1\">[</bpt>POINT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162805)</ept> structure that receives the current drag position.","pos":[29744,29875],"source":" Address of a [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) structure that receives the current drag position."},{"content":"lpPointHotSpot","pos":[29883,29897]},{"content":"Address of a <bpt id=\"p1\">**</bpt>POINT<ept id=\"p1\">**</ept> structure that receives the offset of the drag image relative to the drag position.","pos":[29902,30008],"source":" Address of a **POINT** structure that receives the offset of the drag image relative to the drag position."},{"content":"Return Value","pos":[30018,30030]},{"pos":[30034,30134],"content":"If successful, a pointer to the temporary image list that is used for dragging; otherwise, <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"If successful, a pointer to the temporary image list that is used for dragging; otherwise, **NULL**."},{"pos":[30186,30211],"content":"CImageList::GetImageCount"},{"content":"Call this function to retrieve the number of images in an image list.","pos":[30215,30284]},{"content":"Return Value","pos":[30339,30351]},{"content":"The number of images.","pos":[30355,30376]},{"content":"Example","pos":[30386,30393]},{"pos":[30398,30470],"content":"See the example for <bpt id=\"p1\">[</bpt>CImageList::ExtractIcon<ept id=\"p1\">](#cimagelist__extracticon)</ept>.","source":"See the example for [CImageList::ExtractIcon](#cimagelist__extracticon)."},{"pos":[30521,30545],"content":"CImageList::GetImageInfo"},{"content":"Call this function to retrieve information about an image.","pos":[30549,30607]},{"content":"Parameters","pos":[30706,30716]},{"content":"Zero-based index of the image.","pos":[30732,30762]},{"content":"pImageInfo","pos":[30770,30780]},{"content":"Pointer to an <bpt id=\"p1\">[</bpt>IMAGEINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761393)</ept> structure that receives information about the image.","pos":[30785,30923],"source":" Pointer to an [IMAGEINFO](http://msdn.microsoft.com/library/windows/desktop/bb761393) structure that receives information about the image."},{"content":"The information in this structure can be used to directly manipulate the bitmaps for the image.","pos":[30924,31019]},{"content":"Return Value","pos":[31029,31041]},{"content":"Nonzero if successful; otherwise 0.","pos":[31045,31080]},{"content":"Remarks","pos":[31090,31097]},{"pos":[31101,31180],"content":"The <ph id=\"ph1\">`IMAGEINFO`</ph> structure contains information about an image in an image list.","source":"The `IMAGEINFO` structure contains information about an image in an image list."},{"pos":[31232,31257],"content":"CImageList::GetSafeHandle"},{"pos":[31261,31325],"content":"Call this function to retrieve the <bpt id=\"p1\">**</bpt>m_hImageList<ept id=\"p1\">**</ept> data member.","source":"Call this function to retrieve the **m_hImageList** data member."},{"content":"Return Value","pos":[31387,31399]},{"pos":[31403,31484],"content":"A handle to the attached image list; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if no object is attached.","source":"A handle to the attached image list; otherwise **NULL** if no object is attached."},{"content":"Example","pos":[31494,31501]},{"pos":[31516,31537],"content":"NVC_MFC_CImageList#15"},{"pos":[31651,31675],"content":"CImageList::m_hImageList"},{"content":"A handle of the image list attached to this object.","pos":[31679,31730]},{"content":"HIMAGELIST m_hImageList;","pos":[31739,31763]},{"content":"Remarks","pos":[31775,31782]},{"pos":[31786,31861],"content":"The <bpt id=\"p1\">**</bpt>m_hImageList<ept id=\"p1\">**</ept> data member is a public variable of type <ph id=\"ph1\">`HIMAGELIST`</ph>.","source":"The **m_hImageList** data member is a public variable of type `HIMAGELIST`."},{"content":"Example","pos":[31871,31878]},{"pos":[31893,31914],"content":"NVC_MFC_CImageList#23"},{"pos":[32035,32066],"content":"CImageList::operator HIMAGELIST"},{"pos":[32070,32142],"content":"Use this operator to get the attached handle of the <ph id=\"ph1\">`CImageList`</ph> object.","source":"Use this operator to get the attached handle of the `CImageList` object."},{"content":"Return Value","pos":[32199,32211]},{"pos":[32215,32316],"content":"If successful, a handle to the image list represented by the <ph id=\"ph1\">`CImageList`</ph> object; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"If successful, a handle to the image list represented by the `CImageList` object; otherwise **NULL**."},{"content":"Remarks","pos":[32326,32333]},{"pos":[32337,32426],"content":"This operator is a casting operator, which supports direct use of an <ph id=\"ph1\">`HIMAGELIST`</ph> object.","source":"This operator is a casting operator, which supports direct use of an `HIMAGELIST` object."},{"content":"Example","pos":[32436,32443]},{"pos":[32458,32479],"content":"NVC_MFC_CImageList#16"},{"pos":[32585,32601],"content":"CImageList::Read"},{"content":"Call this function to read an image list from an archive.","pos":[32605,32662]},{"content":"Parameters","pos":[32718,32728]},{"content":"A pointer to a <ph id=\"ph1\">`CArchive`</ph> object from which the image list is to be read.","pos":[32746,32819],"source":" A pointer to a `CArchive` object from which the image list is to be read."},{"content":"Return Value","pos":[32829,32841]},{"content":"Nonzero if successful; otherwise 0.","pos":[32845,32880]},{"content":"Example","pos":[32890,32897]},{"pos":[32912,32933],"content":"NVC_MFC_CImageList#18"},{"pos":[33041,33059],"content":"CImageList::Remove"},{"content":"Call this function to remove an image from an image list object.","pos":[33063,33127]},{"content":"Parameters","pos":[33177,33187]},{"content":"Zero-based index of the image to remove.","pos":[33203,33243]},{"content":"Return Value","pos":[33253,33265]},{"content":"Nonzero if successful; otherwise 0.","pos":[33269,33304]},{"content":"Remarks","pos":[33314,33321]},{"content":"All items following <ph id=\"ph1\">`nImage`</ph> now move down one position.","pos":[33325,33381],"source":"All items following `nImage` now move down one position."},{"content":"For example, if an image list contains two items, deleting the first item will cause the remaining item to now be in the first position.","pos":[33382,33518]},{"content":"=0 for the item in the first position.","pos":[33527,33565]},{"content":"Example","pos":[33575,33582]},{"pos":[33597,33618],"content":"NVC_MFC_CImageList#19"},{"pos":[33727,33746],"content":"CImageList::Replace"},{"content":"Call this function to replace an image in an image list with a new image.","pos":[33750,33823]},{"content":"Parameters","pos":[33980,33990]},{"content":"Zero-based index of the image to replace.","pos":[34006,34047]},{"content":"A pointer to the bitmap containing the image.","pos":[34068,34113]},{"content":"A pointer to the bitmap containing the mask.","pos":[34133,34177]},{"content":"If no mask is used with the image list, this parameter is ignored.","pos":[34178,34244]},{"content":"A handle to the icon that contains the bitmap and mask for the new image.","pos":[34262,34335]},{"content":"Return Value","pos":[34345,34357]},{"pos":[34361,34435],"content":"The version returning <bpt id=\"p1\">**</bpt>BOOL<ept id=\"p1\">**</ept> returns nonzero if successful; otherwise 0.","source":"The version returning **BOOL** returns nonzero if successful; otherwise 0."},{"pos":[34442,34541],"content":"The version returning <ph id=\"ph1\">`int`</ph> returns the zero-based index of the image if successful; otherwise – 1.","source":"The version returning `int` returns the zero-based index of the image if successful; otherwise – 1."},{"content":"Remarks","pos":[34551,34558]},{"pos":[34562,34717],"content":"Call this member function after calling <bpt id=\"p1\">[</bpt>SetImageCount<ept id=\"p1\">](#cimagelist__setimagecount)</ept> to assign the new, valid images to the placeholder image index numbers.","source":"Call this member function after calling [SetImageCount](#cimagelist__setimagecount) to assign the new, valid images to the placeholder image index numbers."},{"content":"Example","pos":[34727,34734]},{"pos":[34739,34815],"content":"See the example for <bpt id=\"p1\">[</bpt>CImageList::SetImageCount<ept id=\"p1\">](#cimagelist__setimagecount)</ept>.","source":"See the example for [CImageList::SetImageCount](#cimagelist__setimagecount)."},{"pos":[34864,34886],"content":"CImageList::SetBkColor"},{"content":"Call this function to set the background color for an image list.","pos":[34890,34955]},{"content":"Parameters","pos":[35014,35024]},{"content":"Background color to set.","pos":[35036,35060]},{"content":"It can be <ph id=\"ph1\">`CLR_NONE`</ph>.","pos":[35061,35082],"source":" It can be `CLR_NONE`."},{"content":"In that case, images are drawn transparently using the mask.","pos":[35083,35143]},{"content":"Return Value","pos":[35153,35165]},{"pos":[35169,35235],"content":"The previous background color if successful; otherwise <ph id=\"ph1\">`CLR_NONE`</ph>.","source":"The previous background color if successful; otherwise `CLR_NONE`."},{"content":"Example","pos":[35245,35252]},{"pos":[35267,35288],"content":"NVC_MFC_CImageList#20"},{"pos":[35408,35438],"content":"CImageList::SetDragCursorImage"},{"content":"Creates a new drag image by combining the given image (typically a mouse cursor image) with the current drag image.","pos":[35442,35557]},{"content":"Parameters","pos":[35647,35657]},{"content":"nDrag","pos":[35662,35667]},{"content":"Index of the new image to be combined with the drag image.","pos":[35672,35730]},{"content":"Position of the hot spot within the new image.","pos":[35752,35798]},{"content":"Return Value","pos":[35808,35820]},{"content":"Nonzero if successful; otherwise 0.","pos":[35824,35859]},{"content":"Remarks","pos":[35869,35876]},{"content":"Because the dragging functions use the new image during a drag operation, you should use the Windows <bpt id=\"p1\">[</bpt>ShowCursor<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms648396)</ept> function to hide the actual mouse cursor after calling <ph id=\"ph1\">`CImageList::SetDragCursorImage`</ph>.","pos":[35880,36142],"source":"Because the dragging functions use the new image during a drag operation, you should use the Windows [ShowCursor](http://msdn.microsoft.com/library/windows/desktop/ms648396) function to hide the actual mouse cursor after calling `CImageList::SetDragCursorImage`."},{"content":"Otherwise, the system may appear to have two mouse cursors for the duration of the drag operation.","pos":[36143,36241]},{"pos":[36293,36318],"content":"CImageList::SetImageCount"},{"pos":[36322,36403],"content":"Call this member function to reset the number of images in a <ph id=\"ph1\">`CImageList`</ph> object.","source":"Call this member function to reset the number of images in a `CImageList` object."},{"content":"Parameters","pos":[36464,36474]},{"content":"uNewCount","pos":[36479,36488]},{"content":"The value specifying the new total number of images in the image list.","pos":[36493,36563]},{"content":"Return Value","pos":[36573,36585]},{"content":"Nonzero if successful; otherwise zero.","pos":[36589,36627]},{"content":"Remarks","pos":[36637,36644]},{"content":"If you call this member function to increase the number of images in the image list, then call <bpt id=\"p1\">[</bpt>Replace<ept id=\"p1\">](#cimagelist__replace)</ept> for each additional image to assign the new indexes to valid images.","pos":[36648,36843],"source":"If you call this member function to increase the number of images in the image list, then call [Replace](#cimagelist__replace) for each additional image to assign the new indexes to valid images."},{"content":"If you fail to assign the indexes to valid images, draw operations that create the new images will be unpredictable.","pos":[36844,36960]},{"content":"If you decrease the size of an image list by using this function, the truncated images are freed.","pos":[36967,37064]},{"content":"Example","pos":[37074,37081]},{"pos":[37096,37117],"content":"NVC_MFC_CImageList#21"},{"pos":[37234,37261],"content":"CImageList::SetOverlayImage"},{"content":"Call this function to add the zero-based index of an image to the list of images to be used as overlay masks.","pos":[37265,37374]},{"content":"Parameters","pos":[37458,37468]},{"content":"Zero-based index of the image to use as an overlay mask.","pos":[37484,37540]},{"content":"nOverlay","pos":[37548,37556]},{"content":"One-based index of the overlay mask.","pos":[37561,37597]},{"content":"Return Value","pos":[37607,37619]},{"content":"Nonzero if successful; otherwise 0.","pos":[37623,37658]},{"content":"Remarks","pos":[37668,37675]},{"content":"Up to four indices can be added to the list.","pos":[37679,37723]},{"content":"An overlay mask is an image drawn transparently over another image.","pos":[37730,37797]},{"content":"Draw an overlay mask over an image by using the <bpt id=\"p1\">[</bpt>CImageList::Draw<ept id=\"p1\">](#cimagelist__draw)</ept> member function with the one-based index of the overlay mask specified by using the <bpt id=\"p2\">**</bpt>INDEXTOOVERLAYMASK<ept id=\"p2\">**</ept> macro.","pos":[37798,37997],"source":" Draw an overlay mask over an image by using the [CImageList::Draw](#cimagelist__draw) member function with the one-based index of the overlay mask specified by using the **INDEXTOOVERLAYMASK** macro."},{"content":"Example","pos":[38007,38014]},{"pos":[38029,38050],"content":"NVC_MFC_CImageList#22"},{"pos":[38157,38174],"content":"CImageList::Write"},{"content":"Call this function to write an image list object to an archive.","pos":[38178,38241]},{"content":"Parameters","pos":[38298,38308]},{"content":"A pointer to a <ph id=\"ph1\">`CArchive`</ph> object in which the image list is to be stored.","pos":[38326,38399],"source":" A pointer to a `CArchive` object in which the image list is to be stored."},{"content":"Return Value","pos":[38409,38421]},{"content":"Nonzero if successful; otherwise 0.","pos":[38425,38460]},{"content":"Example","pos":[38470,38477]},{"pos":[38492,38513],"content":"NVC_MFC_CImageList#17"},{"content":"See Also","pos":[38585,38593]},{"content":"CObject Class","pos":[38598,38611]},{"content":"Hierarchy Chart","pos":[38656,38671]},{"content":"CListCtrl Class","pos":[38708,38723]},{"content":"CTabCtrl Class","pos":[38770,38784]}],"content":"---\ntitle: \"CImageList Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CImageList\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"Windows common controls [C++], CImageList\"\n  - \"image lists [C++], CImageList class\"\n  - \"CImageList class\"\nms.assetid: b6d1a704-1c82-4548-8a8f-77972adc98a5\ncaps.latest.revision: 19\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CImageList Class\nProvides the functionality of the Windows common image list control.  \n  \n## Syntax  \n  \n```  \nclass CImageList : public CObject  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CImageList::CImageList](#cimagelist__cimagelist)|Constructs a `CImageList` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CImageList::Add](#cimagelist__add)|Adds an image or images to an image list.|  \n|[CImageList::Attach](#cimagelist__attach)|Attaches an image list to a `CImageList` object.|  \n|[CImageList::BeginDrag](#cimagelist__begindrag)|Begins dragging an image.|  \n|[CImageList::Copy](#cimagelist__copy)|Copies an image within a `CImageList` object.|  \n|[CImageList::Create](#cimagelist__create)|Initializes an image list and attaches it to a `CImageList` object.|  \n|[CImageList::DeleteImageList](#cimagelist__deleteimagelist)|Deletes an image list.|  \n|[CImageList::DeleteTempMap](#cimagelist__deletetempmap)|Called by the [CWinApp](../../mfc/reference/cwinapp-class.md) idle-time handler to delete any temporary `CImageList` object created by `FromHandle`.|  \n|[CImageList::Detach](#cimagelist__detach)|Detaches an image list object from a `CImageList` object and returns a handle to an image list.|  \n|[CImageList::DragEnter](#cimagelist__dragenter)|Locks updates during a drag operation and displays the drag image at a specified position.|  \n|[CImageList::DragLeave](#cimagelist__dragleave)|Unlocks the window and hides the drag image so that the window can be updated.|  \n|[CImageList::DragMove](#cimagelist__dragmove)|Moves the image that is being dragged during a drag-and-drop operation.|  \n|[CImageList::DragShowNolock](#cimagelist__dragshownolock)|Shows or hides the drag image during a drag operation, without locking the window.|  \n|[CImageList::Draw](#cimagelist__draw)|Draws the image that is being dragged during a drag-and-drop operation.|  \n|[CImageList::DrawEx](#cimagelist__drawex)|Draws an image list item in the specified device context. The function uses the specified drawing style and blends the image with the specified color.|  \n|[CImageList::DrawIndirect](#cimagelist__drawindirect)|Draws an image from an image list.|  \n|[CImageList::EndDrag](#cimagelist__enddrag)|Ends a drag operation.|  \n|[CImageList::ExtractIcon](#cimagelist__extracticon)|Creates an icon based on an image and mask in an image list.|  \n|[CImageList::FromHandle](#cimagelist__fromhandle)|Returns a pointer to a `CImageList` object when given a handle to an image list. If a `CImageList` object is not attached to the handle, a temporary `CImageList` object is created and attached.|  \n|[CImageList::FromHandlePermanent](#cimagelist__fromhandlepermanent)|Returns a pointer to a `CImageList` object when given a handle to an image list. If a `CImageList` object is not attached to the handle, **NULL** is returned.|  \n|[CImageList::GetBkColor](#cimagelist__getbkcolor)|Retrieves the current background color for an image list.|  \n|[CImageList::GetDragImage](#cimagelist__getdragimage)|Gets the temporary image list that is used for dragging.|  \n|[CImageList::GetImageCount](#cimagelist__getimagecount)|Retrieves the number of images in an image list.|  \n|[CImageList::GetImageInfo](#cimagelist__getimageinfo)|Retrieves information about an image.|  \n|[CImageList::GetSafeHandle](#cimagelist__getsafehandle)|Retrieves **m_hImageList**.|  \n|[CImageList::Read](#cimagelist__read)|Reads an image list from an archive.|  \n|[CImageList::Remove](#cimagelist__remove)|Removes an image from an image list.|  \n|[CImageList::Replace](#cimagelist__replace)|Replaces an image in an image list with a new image.|  \n|[CImageList::SetBkColor](#cimagelist__setbkcolor)|Sets the background color for an image list.|  \n|[CImageList::SetDragCursorImage](#cimagelist__setdragcursorimage)|Creates a new drag image.|  \n|[CImageList::SetImageCount](#cimagelist__setimagecount)|Resets the count of images in an image list.|  \n|[CImageList::SetOverlayImage](#cimagelist__setoverlayimage)|Adds the zero-based index of an image to the list of images to be used as overlay masks.|  \n|[CImageList::Write](#cimagelist__write)|Writes an image list to an archive.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CImageList::operator HIMAGELIST](#cimagelist__operator_himagelist)|Returns the `HIMAGELIST` attached to the `CImageList`.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CImageList::m_hImageList](#cimagelist__m_himagelist)|A handle containing the image list attached to this object.|  \n  \n## Remarks  \n An \"image list\" is a collection of same-sized images, each of which can be referred to by its zero-based index. Image lists are used to efficiently manage large sets of icons or bitmaps. All images in an image list are contained in a single, wide bitmap in screen device format. An image list may also include a monochrome bitmap that contains masks used to draw images transparently (icon style). The Microsoft Win32 application programming interface (API) provides image list functions that enable you to draw images, create and destroy image lists, add and remove images, replace images, merge images, and drag images.  \n  \n This control (and therefore the `CImageList` class) is available only to programs running under Windows 95/98 and Windows NT version 3.51 and later.  \n  \n For more information on using `CImageList`, see [Controls](../../mfc/controls-mfc.md) and [Using CImageList](../../mfc/using-cimagelist.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n `CImageList`  \n  \n## Requirements  \n **Header:** afxcmn.h  \n  \n##  <a name=\"cimagelist__add\"></a>  CImageList::Add  \n Call this function to add one or more images or an icon to an image list.  \n  \n```  \nint Add(\n    CBitmap* pbmImage,  \n    CBitmap* pbmMask);\n\n \nint Add(\n    CBitmap* pbmImage,  \n    COLORREF crMask);\n\n \nint Add(\n    HICON hIcon);\n```  \n  \n### Parameters  \n `pbmImage`  \n Pointer to the bitmap containing the image or images. The number of images is inferred from the width of the bitmap.  \n  \n `pbmMask`  \n Pointer to the bitmap containing the mask. If no mask is used with the image list, this parameter is ignored.  \n  \n `crMask`  \n Color used to generate the mask. Each pixel of this color in the given bitmap is changed to black and the corresponding bit in the mask is set to one.  \n  \n `hIcon`  \n Handle of the icon that contains the bitmap and mask for the new image.  \n  \n### Return Value  \n Zero-based index of the first new image if successful; otherwise – 1.  \n  \n### Remarks  \n You are responsible for releasing the icon handle when you are done with it.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CImageList#1](../../mfc/reference/codesnippet/cpp/cimagelist-class_1.cpp)]  \n  \n##  <a name=\"cimagelist__attach\"></a>  CImageList::Attach  \n Call this function to attach an image list to a `CImageList` object.  \n  \n```  \nBOOL Attach(HIMAGELIST hImageList);\n```  \n  \n### Parameters  \n `hImageList`  \n A handle to an image list object.  \n  \n### Return Value  \n Nonzero if the attachment was successful; otherwise 0.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CImageList#2](../../mfc/reference/codesnippet/cpp/cimagelist-class_2.cpp)]  \n  \n##  <a name=\"cimagelist__begindrag\"></a>  CImageList::BeginDrag  \n Call this function to begin dragging an image.  \n  \n```  \nBOOL BeginDrag(\n    int nImage,  \n    CPoint ptHotSpot);\n```  \n  \n### Parameters  \n `nImage`  \n Zero-based index of the image to drag.  \n  \n `ptHotSpot`  \n Coordinates of the starting drag position (typically, the cursor position). The coordinates are relative to the upper left corner of the image.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n This function creates a temporary image list that is used for dragging. The image combines the specified image and its mask with the current cursor. In response to subsequent `WM_MOUSEMOVE` messages, you can move the drag image by using the `DragMove` member function. To end the drag operation, you can use the `EndDrag` member function.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CImageList#3](../../mfc/reference/codesnippet/cpp/cimagelist-class_3.cpp)]  \n  \n##  <a name=\"cimagelist__cimagelist\"></a>  CImageList::CImageList  \n Constructs a `CImageList` object.  \n  \n```  \nCImageList();\n```  \n  \n##  <a name=\"cimagelist__copy\"></a>  CImageList::Copy  \n This member function implements the behavior of the Win32 function [ImageList_Copy](http://msdn.microsoft.com/library/windows/desktop/bb761520), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n```  \nBOOL Copy(\n    int iDst,  \n    int iSrc,  \n    UINT uFlags = ILCF_MOVE);\n\n \nBOOL Copy(\n    int iDst,  \n    CImageList* pSrc,  \n    int iSrc,  \n    UINT uFlags = ILCF_MOVE);\n```  \n  \n### Parameters  \n *iDst*  \n The zero-based index of the image to be used as the destination of the copy operation.  \n  \n `iSrc`  \n The zero-based index of the image to be used as the source of the copy operation.  \n  \n `uFlags`  \n The bit flag value that specifies the type of copy operation to be made. This parameter can be one of the following values:  \n  \n|Value|Meaning|  \n|-----------|-------------|  \n|`ILCF_MOVE`|The source image is copied to the destination image's index. This operation results in multiple instances of a given image. `ILCF_MOVE` is the default.|  \n|`ILCF_SWAP`|The source and destination images exchange positions within the image list.|  \n  \n `pSrc`  \n A pointer to a `CImageList` object that is the target of the copy operation.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CImageList#6](../../mfc/reference/codesnippet/cpp/cimagelist-class_4.cpp)]  \n  \n##  <a name=\"cimagelist__create\"></a>  CImageList::Create  \n Initializes an image list and attaches it to a [CImageList](../../mfc/reference/cimagelist-class.md) object.  \n  \n```  \nBOOL Create(\n    int cx,  \n    int cy,  \n    UINT nFlags,  \n    int nInitial,  \n    int nGrow);\n\n \nBOOL Create(\n    UINT nBitmapID,  \n    int cx,  \n    int nGrow,  \n    COLORREF crMask);\n\n \nBOOL Create(\n    LPCTSTR lpszBitmapID,  \n    int cx,  \n    int nGrow,  \n    COLORREF crMask);\n\n \nBOOL Create(\n    CImageList& imagelist1,  \n    int nImage1,  \n    CImageList& imagelist2,  \n    int nImage2,  \n    int dx,  \n    int dy);\n\n \nBOOL Create(\n    CImageList* pImageList);\n```  \n  \n### Parameters  \n `cx`  \n Dimensions of each image, in pixels.  \n  \n `cy`  \n Dimensions of each image, in pixels.  \n  \n `nFlags`  \n Specifies the type of image list to create. This parameter can be a combination of the following values, but it can include only one of the `ILC_COLOR` values.  \n  \n|Value|Meaning|  \n|-----------|-------------|  \n|`ILC_COLOR`|Use the default behavior if none of the other `ILC_COLOR`* flags is specified. Typically, the default is `ILC_COLOR4`; but for older display drivers, the default is `ILC_COLORDDB`.|  \n|`ILC_COLOR4`|Use a 4-bit (16 color) device-independent bitmap (DIB) section as the bitmap for the image list.|  \n|`ILC_COLOR8`|Use an 8-bit DIB section. The colors used for the color table are the same colors as the halftone palette.|  \n|`ILC_COLOR16`|Use a 16-bit (32/64k color) DIB section.|  \n|`ILC_COLOR24`|Use a 24-bit DIB section.|  \n|`ILC_COLOR32`|Use a 32-bit DIB section.|  \n|`ILC_COLORDDB`|Use a device-dependent bitmap.|  \n|`ILC_MASK`|Uses a mask. The image list contains two bitmaps, one of which is a monochrome bitmap used as a mask. If this value is not included, the image list contains only one bitmap. See [Drawing Images from an Image List](../../mfc/drawing-images-from-an-image-list.md) for additional information on masked images.|  \n  \n `nInitial`  \n Number of images that the image list initially contains.  \n  \n `nGrow`  \n Number of images by which the image list can grow when the system needs to resize the list to make room for new images. This parameter represents the number of new images the resized image list can contain.  \n  \n `nBitmapID`  \n Resource IDs of the bitmap to be associated with the image list.  \n  \n `crMask`  \n Color used to generate a mask. Each pixel of this color in the specified bitmap is changed to black, and the corresponding bit in the mask is set to one.  \n  \n `lpszBitmapID`  \n A string containing the resource IDs of the images.  \n  \n `imagelist1`  \n A reference to a `CImageList` object.  \n  \n `nImage1`  \n Index of the first existing image.  \n  \n `imagelist2`  \n A reference to a `CImageList` object.  \n  \n `nImage2`  \n Index of the second existing image.  \n  \n `dx`  \n Offset of the x-axis of the second image in relationship to the first image, in pixels.  \n  \n `dy`  \n Offset of the y-axis of the second image in relationship to the first image, in pixels.  \n  \n `pImageList`  \n A pointer to a `CImageList` object.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n You construct a `CImageList` in two steps. First, call the constructor and then call `Create`, which creates the image list and attaches it to the `CImageList`object.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CImageList#7](../../mfc/reference/codesnippet/cpp/cimagelist-class_5.cpp)]  \n  \n##  <a name=\"cimagelist__deleteimagelist\"></a>  CImageList::DeleteImageList  \n Call this function to delete an image list.  \n  \n```  \nBOOL DeleteImageList();\n```  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CImageList#8](../../mfc/reference/codesnippet/cpp/cimagelist-class_6.cpp)]  \n  \n##  <a name=\"cimagelist__deletetempmap\"></a>  CImageList::DeleteTempMap  \n Called automatically by the `CWinApp` idle-time handler, `DeleteTempMap` deletes any temporary `CImageList` objects created by [FromHandle](#cimagelist__fromhandle), but does not destroy any handles ( `hImageList`) temporarily associated with the **ImageList** objects.  \n  \n```  \nstatic void PASCAL DeleteTempMap();\n```  \n  \n### Example  \n [!code-cpp[NVC_MFC_CImageList#9](../../mfc/reference/codesnippet/cpp/cimagelist-class_7.cpp)]  \n  \n##  <a name=\"cimagelist__detach\"></a>  CImageList::Detach  \n Call this function to detach an image list object from a `CImageList` object.  \n  \n```  \nHIMAGELIST Detach();\n```  \n  \n### Return Value  \n A handle to an image list object.  \n  \n### Remarks  \n This function returns a handle to the image list object.  \n  \n### Example  \n  See the example for [CImageList::Attach](#cimagelist__attach).  \n  \n##  <a name=\"cimagelist__dragenter\"></a>  CImageList::DragEnter  \n During a drag operation, locks updates to the window specified by `pWndLock` and displays the drag image at the position specified by `point`.  \n  \n```  \nstatic BOOL PASCAL DragEnter(\n    CWnd* pWndLock,  \n    CPoint point);\n```  \n  \n### Parameters  \n `pWndLock`  \n Pointer to the window that owns the drag image.  \n  \n `point`  \n Position at which to display the drag image. Coordinates are relative to the upper left corner of the window (not the client area).  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n The coordinates are relative to the window's upper left corner, so you must compensate for the widths of window elements, such as the border, title bar, and menu bar, when specifying the coordinates.  \n  \n If `pWndLock` is **NULL**, this function draws the image in the display context associated with the desktop window, and coordinates are relative to the upper left corner of the screen.  \n  \n This function locks all other updates to the given window during the drag operation. If you need to do any drawing during a drag operation, such as highlighting the target of a drag-and-drop operation, you can temporarily hide the dragged image by using the [CImageList::DragLeave](#cimagelist__dragleave) function.  \n  \n### Example  \n  See the example for [CImageList::BeginDrag](#cimagelist__begindrag).  \n  \n##  <a name=\"cimagelist__dragleave\"></a>  CImageList::DragLeave  \n Unlocks the window specified by `pWndLock` and hides the drag image, allowing the window to be updated.  \n  \n```  \nstatic BOOL PASCAL DragLeave(CWnd* pWndLock);\n```  \n  \n### Parameters  \n `pWndLock`  \n Pointer to the window that owns the drag image.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Example  \n  See the example for [CImageList::EndDrag](#cimagelist__enddrag).  \n  \n##  <a name=\"cimagelist__dragmove\"></a>  CImageList::DragMove  \n Call this function to move the image that is being dragged during a drag-and-drop operation.  \n  \n```  \nstatic BOOL PASCAL DragMove(CPoint pt);\n```  \n  \n### Parameters  \n `pt`  \n New drag position.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n This function is typically called in response to a `WM_MOUSEMOVE` message. To begin a drag operation, use the `BeginDrag` member function.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CImageList#4](../../mfc/reference/codesnippet/cpp/cimagelist-class_8.cpp)]  \n  \n##  <a name=\"cimagelist__dragshownolock\"></a>  CImageList::DragShowNolock  \n Shows or hides the drag image during a drag operation, without locking the window.  \n  \n```  \nstatic BOOL PASCAL DragShowNolock(BOOL bShow);\n```  \n  \n### Parameters  \n `bShow`  \n Specifies whether the drag image is to be shown.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n The [CImageList::DragEnter](#cimagelist__dragenter) function locks all updates to the window during a drag operation. This function, however, does not lock the window.  \n  \n##  <a name=\"cimagelist__draw\"></a>  CImageList::Draw  \n Call this function to draw the image that is being dragged during a drag-and-drop operation.  \n  \n```  \nBOOL Draw(\n    CDC* pDC,  \n    int nImage,  \n    POINT pt,  \n    UINT nStyle);\n```  \n  \n### Parameters  \n `pDC`  \n Pointer to the destination device context.  \n  \n `nImage`  \n Zero-based index of the image to draw.  \n  \n `pt`  \n Location at which to draw within the specified device context.  \n  \n `nStyle`  \n Flag specifying the drawing style. It can be one or more of these values:  \n  \n|Value|Meaning|  \n|-----------|-------------|  \n|`ILD_BLEND25`, **ILD_FOCUS**|Draws the image, blending 25 percent with the system highlight color. This value has no effect if the image list does not contain a mask.|  \n|`ILD_BLEND50`, **ILD_SELECTED**, **ILD_BLEND**|Draws the image, blending 50 percent with the system highlight color. This value has no effect if the image list does not contain a mask.|  \n|**ILD_MASK**|Draws the mask.|  \n|`ILD_NORMAL`|Draws the image using the background color for the image list. If the background color is the `CLR_NONE` value, the image is drawn transparently using the mask.|  \n|`ILD_TRANSPARENT`|Draws the image transparently using the mask, regardless of the background color.|  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Example  \n  See the example for [CImageList::SetOverlayImage](#cimagelist__setoverlayimage).  \n  \n##  <a name=\"cimagelist__drawex\"></a>  CImageList::DrawEx  \n Draws an image list item in the specified device context.  \n  \n```  \nBOOL DrawEx(\n    CDC* pDC,  \n    int nImage,  \n    POINT pt,  \n    SIZE sz,  \n    COLORREF clrBk,  \n    COLORREF clrFg,  \n    UINT nStyle);\n```  \n  \n### Parameters  \n `pDC`  \n Pointer to the destination device context.  \n  \n `nImage`  \n Zero-based index of the image to draw.  \n  \n `pt`  \n Location at which to draw within the specified device context.  \n  \n `sz`  \n Size of the portion of the image to draw relative to the upper-left corner of the image. See `dx` and *dy* in [ImageList_DrawEx](http://msdn.microsoft.com/library/windows/desktop/bb761536) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]*.*  \n  \n *clrBk*  \n Background color of the image. See *rgbBk* in [ImageList_DrawEx](http://msdn.microsoft.com/library/windows/desktop/bb761536) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]*.*  \n  \n *clrFg*  \n Foreground color of the image. See *rgbFg* in [ImageList_DrawEx](http://msdn.microsoft.com/library/windows/desktop/bb761536) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]*.*  \n  \n `nStyle`  \n Flag specifying the drawing style. See *fStyle* in [ImageList_DrawEx](http://msdn.microsoft.com/library/windows/desktop/bb761536) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]*.*  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n The function uses the specified drawing style and blends the image with the specified color.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CImageList#10](../../mfc/reference/codesnippet/cpp/cimagelist-class_9.cpp)]  \n  \n##  <a name=\"cimagelist__drawindirect\"></a>  CImageList::DrawIndirect  \n Call this member function to draw an image from an image list.  \n  \n```  \nBOOL DrawIndirect(\n    IMAGELISTDRAWPARAMS* pimldp);\n\n \nBOOL DrawIndirect(\n    CDC* pDC,  \n    int nImage,  \n    POINT pt,  \n    SIZE sz,  \n    POINT ptOrigin,  \n    UINT fStyle = ILD_NORMAL,  \n    DWORD dwRop = SRCCOPY,  \n    COLORREF rgbBack = CLR_DEFAULT,  \n    COLORREF rgbFore = CLR_DEFAULT,  \n    DWORD fState = ILS_NORMAL,  \n    DWORD Frame = 0,  \n    COLORREF crEffect = CLR_DEFAULT);\n```  \n  \n### Parameters  \n *pimldp*  \n A pointer to an [IMAGELISTDRAWPARAMS](http://msdn.microsoft.com/library/windows/desktop/bb761395) structure that contains information about the draw operation.  \n  \n `pDC`  \n A pointer to the destination device context. You must delete this [CDC](../../mfc/reference/cdc-class.md) object when you are done with it.  \n  \n `nImage`  \n The zero-based index of the image to be drawn.  \n  \n `pt`  \n A [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) structure containing the x– and y– coordinates where the image will be drawn.  \n  \n `sz`  \n A [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure indicating the size of the image to be drawn.  \n  \n *ptOrigin*  \n A [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) structure containing the x– and y–coordinates specifying the upper left corner of the drawing operation with respect to the image itself. Pixels of the image that are to the left of the x–coordinate and above the y–coordinate are not drawn.  \n  \n `fStyle`  \n Flag specifying the drawing style and, optionally, the overlay image. See the Remarks section for information on the overlay image. The MFC default implementation, `ILD_NORMAL`, draws the image using the background color for the image list. If the background color is the `CLR_NONE` value, the image is drawn transparently using a mask.  \n  \n Other possible styles are described under the **fStyle** member of the [IMAGELISTDRAWPARAMS](http://msdn.microsoft.com/library/windows/desktop/bb761395) structure.  \n  \n *dwRop*  \n Value specifying a raster-operation code. These codes define how the color data for the source rectangle will be combined with the color data for the destination rectangle to achieve the final color. MFC's default implementation, **SRCCOPY**, copies the source rectangle directly to the destination rectangle. This parameter is ignored if the `fStyle` parameter does not include the **ILD_ROP** flag.  \n  \n Other possible values are described under the **dwRop** member of the [IMAGELISTDRAWPARAMS](http://msdn.microsoft.com/library/windows/desktop/bb761395) structure.  \n  \n *rgbBack*  \n The image background color, by default `CLR_DEFAULT`. This parameter can be an application-defined RGB value or one of the following values:  \n  \n|Value|Meaning|  \n|-----------|-------------|  \n|`CLR_DEFAULT`|Default background color. The image is drawn using the image list background color.|  \n|`CLR_NONE`|No background color. The image is drawn transparently.|  \n  \n *rgbFore*  \n Image foreground color, by default `CLR_DEFAULT`. This parameter can be an application-defined RGB value or one of the following values:  \n  \n|Value|Meaning|  \n|-----------|-------------|  \n|`CLR_DEFAULT`|Default foreground color. The image is drawn using the system highlight color as the foreground color.|  \n|`CLR_NONE`|No blend color. The image is blended with the color of the destination device context.|  \n  \n This parameter is used only if `fStyle` includes the `ILD_BLEND25` or `ILD_BLEND50` flag.  \n  \n *fState*  \n Flag specifying the drawing state. This member can contain one or more image list state flags.  \n  \n *Frame*  \n Affects the behavior of saturate and alpha-blending effects.  \n  \n When used with **ILS_SATURATE**, this member holds the value that is added to each color component of the RGB triplet for each pixel in the icon.  \n  \n When used with **ILS_APLHA**, this member holds the value for the alpha channel. This value can be from 0 to 255, with 0 being completely transparent, and 255 being completely opaque.  \n  \n *crEffect*  \n A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) value used for glow and shadow effects.  \n  \n### Return Value  \n **TRUE** if the image is successfully drawn; otherwise **FALSE**.  \n  \n### Remarks  \n Use the first version if you want to fill the Win32 structure yourself. Use the second version if you want to take advantage of one or more of MFC's default arguments, or avoid managing the structure.  \n  \n An overlay image is an image that is drawn on top of the primary image, specified in this member function by the `nImage` parameter. Draw an overlay mask by using the [Draw](#cimagelist__draw) member function with the one-based index of the overlay mask specified by using the [INDEXTOOVERLAYMASK](http://msdn.microsoft.com/library/windows/desktop/bb761408) macro.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CImageList#11](../../mfc/reference/codesnippet/cpp/cimagelist-class_10.cpp)]  \n  \n##  <a name=\"cimagelist__enddrag\"></a>  CImageList::EndDrag  \n Call this function to end a drag operation.  \n  \n```  \nstatic void PASCAL EndDrag();\n```  \n  \n### Remarks  \n To begin a drag operation, use the `BeginDrag` member function.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CImageList#5](../../mfc/reference/codesnippet/cpp/cimagelist-class_11.cpp)]  \n  \n##  <a name=\"cimagelist__extracticon\"></a>  CImageList::ExtractIcon  \n Call this function to create an icon based on an image and its related mask in an image list.  \n  \n```  \nHICON ExtractIcon(int nImage);\n```  \n  \n### Parameters  \n `nImage`  \n Zero-based index of the image.  \n  \n### Return Value  \n Handle of the icon if successful; otherwise **NULL**.  \n  \n### Remarks  \n This method relies on the behavior of the [ImageList_ExtractIcon](http://msdn.microsoft.com/library/windows/desktop/bb761401) macro to create the icon. Refer to the [ImageList_ExtractIcon](http://msdn.microsoft.com/library/windows/desktop/bb761401) macro for more information on icon creation and cleanup.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CImageList#12](../../mfc/reference/codesnippet/cpp/cimagelist-class_12.cpp)]  \n  \n##  <a name=\"cimagelist__fromhandle\"></a>  CImageList::FromHandle  \n Returns a pointer to a `CImageList` object when given a handle to an image list.  \n  \n```  \nstatic CImageList* PASCAL FromHandle(HIMAGELIST hImageList);\n```  \n  \n### Parameters  \n `hImageList`  \n Specifies the image list.  \n  \n### Return Value  \n A pointer to a `CImageList` object if successful; otherwise **NULL**.  \n  \n### Remarks  \n If a `CImageList` is not already attached to the handle, a temporary `CImageList` object is created and attached. This temporary `CImageList` object is valid only until the next time the application has idle time in its event loop, at which time all temporary objects are deleted.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CImageList#13](../../mfc/reference/codesnippet/cpp/cimagelist-class_13.cpp)]  \n  \n##  <a name=\"cimagelist__fromhandlepermanent\"></a>  CImageList::FromHandlePermanent  \n Returns a pointer to a `CImageList` object when given a handle to an image list.  \n  \n```  \nstatic CImageList* PASCAL FromHandlePermanent(HIMAGELIST hImageList);\n```  \n  \n### Parameters  \n `hImageList`  \n Specifies the image list.  \n  \n### Return Value  \n A pointer to a `CImageList` object if successful; otherwise **NULL**.  \n  \n### Remarks  \n If a `CImageList` object is not attached to the handle, **NULL** is returned.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CImageList#14](../../mfc/reference/codesnippet/cpp/cimagelist-class_14.cpp)]  \n  \n##  <a name=\"cimagelist__getbkcolor\"></a>  CImageList::GetBkColor  \n Call this function to retrieve the current background color for an image list.  \n  \n```  \nCOLORREF GetBkColor() const;\n\n \n```  \n  \n### Return Value  \n The RGB color value of the `CImageList` object background color.  \n  \n### Example  \n  See the example for [CImageList::SetBkColor](#cimagelist__setbkcolor).  \n  \n##  <a name=\"cimagelist__getdragimage\"></a>  CImageList::GetDragImage  \n Gets the temporary image list that is used for dragging.  \n  \n```  \nstatic CImageList* PASCAL GetDragImage(\n    LPPOINT lpPoint,  \n    LPPOINT lpPointHotSpot);\n```  \n  \n### Parameters  \n `lpPoint`  \n Address of a [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) structure that receives the current drag position.  \n  \n *lpPointHotSpot*  \n Address of a **POINT** structure that receives the offset of the drag image relative to the drag position.  \n  \n### Return Value  \n If successful, a pointer to the temporary image list that is used for dragging; otherwise, **NULL**.  \n  \n##  <a name=\"cimagelist__getimagecount\"></a>  CImageList::GetImageCount  \n Call this function to retrieve the number of images in an image list.  \n  \n```  \nint GetImageCount() const;\n\n \n```  \n  \n### Return Value  \n The number of images.  \n  \n### Example  \n  See the example for [CImageList::ExtractIcon](#cimagelist__extracticon).  \n  \n##  <a name=\"cimagelist__getimageinfo\"></a>  CImageList::GetImageInfo  \n Call this function to retrieve information about an image.  \n  \n```  \nBOOL GetImageInfo(\n    int nImage,  \n    IMAGEINFO* pImageInfo) const;\n\n \n```  \n  \n### Parameters  \n `nImage`  \n Zero-based index of the image.  \n  \n *pImageInfo*  \n Pointer to an [IMAGEINFO](http://msdn.microsoft.com/library/windows/desktop/bb761393) structure that receives information about the image. The information in this structure can be used to directly manipulate the bitmaps for the image.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n The `IMAGEINFO` structure contains information about an image in an image list.  \n  \n##  <a name=\"cimagelist__getsafehandle\"></a>  CImageList::GetSafeHandle  \n Call this function to retrieve the **m_hImageList** data member.  \n  \n```  \nHIMAGELIST GetSafeHandle() const;\n\n \n```  \n  \n### Return Value  \n A handle to the attached image list; otherwise **NULL** if no object is attached.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CImageList#15](../../mfc/reference/codesnippet/cpp/cimagelist-class_15.cpp)]  \n  \n##  <a name=\"cimagelist__m_himagelist\"></a>  CImageList::m_hImageList  \n A handle of the image list attached to this object.  \n  \n **HIMAGELIST m_hImageList;**  \n  \n### Remarks  \n The **m_hImageList** data member is a public variable of type `HIMAGELIST`.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CImageList#23](../../mfc/reference/codesnippet/cpp/cimagelist-class_16.cpp)]  \n  \n##  <a name=\"cimagelist__operator_himagelist\"></a>  CImageList::operator HIMAGELIST  \n Use this operator to get the attached handle of the `CImageList` object.  \n  \n```  \noperator HIMAGELIST() const;\n\n \n```  \n  \n### Return Value  \n If successful, a handle to the image list represented by the `CImageList` object; otherwise **NULL**.  \n  \n### Remarks  \n This operator is a casting operator, which supports direct use of an `HIMAGELIST` object.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CImageList#16](../../mfc/reference/codesnippet/cpp/cimagelist-class_17.cpp)]  \n  \n##  <a name=\"cimagelist__read\"></a>  CImageList::Read  \n Call this function to read an image list from an archive.  \n  \n```  \nBOOL Read(CArchive* pArchive);\n```  \n  \n### Parameters  \n `pArchive`  \n A pointer to a `CArchive` object from which the image list is to be read.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CImageList#18](../../mfc/reference/codesnippet/cpp/cimagelist-class_18.cpp)]  \n  \n##  <a name=\"cimagelist__remove\"></a>  CImageList::Remove  \n Call this function to remove an image from an image list object.  \n  \n```  \nBOOL Remove(int nImage);\n```  \n  \n### Parameters  \n `nImage`  \n Zero-based index of the image to remove.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n All items following `nImage` now move down one position. For example, if an image list contains two items, deleting the first item will cause the remaining item to now be in the first position. `nImage`=0 for the item in the first position.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CImageList#19](../../mfc/reference/codesnippet/cpp/cimagelist-class_19.cpp)]  \n  \n##  <a name=\"cimagelist__replace\"></a>  CImageList::Replace  \n Call this function to replace an image in an image list with a new image.  \n  \n```  \nBOOL Replace(\n    int nImage,  \n    CBitmap* pbmImage,  \n    CBitmap* pbmMask);\n\n \nint Replace(\n    int nImage,  \n    HICON hIcon);\n```  \n  \n### Parameters  \n `nImage`  \n Zero-based index of the image to replace.  \n  \n `pbmImage`  \n A pointer to the bitmap containing the image.  \n  \n `pbmMask`  \n A pointer to the bitmap containing the mask. If no mask is used with the image list, this parameter is ignored.  \n  \n `hIcon`  \n A handle to the icon that contains the bitmap and mask for the new image.  \n  \n### Return Value  \n The version returning **BOOL** returns nonzero if successful; otherwise 0.  \n  \n The version returning `int` returns the zero-based index of the image if successful; otherwise – 1.  \n  \n### Remarks  \n Call this member function after calling [SetImageCount](#cimagelist__setimagecount) to assign the new, valid images to the placeholder image index numbers.  \n  \n### Example  \n  See the example for [CImageList::SetImageCount](#cimagelist__setimagecount).  \n  \n##  <a name=\"cimagelist__setbkcolor\"></a>  CImageList::SetBkColor  \n Call this function to set the background color for an image list.  \n  \n```  \nCOLORREF SetBkColor(COLORREF cr);\n```  \n  \n### Parameters  \n `cr`  \n Background color to set. It can be `CLR_NONE`. In that case, images are drawn transparently using the mask.  \n  \n### Return Value  \n The previous background color if successful; otherwise `CLR_NONE`.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CImageList#20](../../mfc/reference/codesnippet/cpp/cimagelist-class_20.cpp)]  \n  \n##  <a name=\"cimagelist__setdragcursorimage\"></a>  CImageList::SetDragCursorImage  \n Creates a new drag image by combining the given image (typically a mouse cursor image) with the current drag image.  \n  \n```  \nBOOL SetDragCursorImage(\n    int nDrag,  \n    CPoint ptHotSpot);\n```  \n  \n### Parameters  \n *nDrag*  \n Index of the new image to be combined with the drag image.  \n  \n `ptHotSpot`  \n Position of the hot spot within the new image.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n Because the dragging functions use the new image during a drag operation, you should use the Windows [ShowCursor](http://msdn.microsoft.com/library/windows/desktop/ms648396) function to hide the actual mouse cursor after calling `CImageList::SetDragCursorImage`. Otherwise, the system may appear to have two mouse cursors for the duration of the drag operation.  \n  \n##  <a name=\"cimagelist__setimagecount\"></a>  CImageList::SetImageCount  \n Call this member function to reset the number of images in a `CImageList` object.  \n  \n```  \nBOOL SetImageCount(UINT uNewCount);\n```  \n  \n### Parameters  \n *uNewCount*  \n The value specifying the new total number of images in the image list.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n If you call this member function to increase the number of images in the image list, then call [Replace](#cimagelist__replace) for each additional image to assign the new indexes to valid images. If you fail to assign the indexes to valid images, draw operations that create the new images will be unpredictable.  \n  \n If you decrease the size of an image list by using this function, the truncated images are freed.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CImageList#21](../../mfc/reference/codesnippet/cpp/cimagelist-class_21.cpp)]  \n  \n##  <a name=\"cimagelist__setoverlayimage\"></a>  CImageList::SetOverlayImage  \n Call this function to add the zero-based index of an image to the list of images to be used as overlay masks.  \n  \n```  \nBOOL SetOverlayImage(\n    int nImage,  \n    int nOverlay);\n```  \n  \n### Parameters  \n `nImage`  \n Zero-based index of the image to use as an overlay mask.  \n  \n *nOverlay*  \n One-based index of the overlay mask.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n Up to four indices can be added to the list.  \n  \n An overlay mask is an image drawn transparently over another image. Draw an overlay mask over an image by using the [CImageList::Draw](#cimagelist__draw) member function with the one-based index of the overlay mask specified by using the **INDEXTOOVERLAYMASK** macro.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CImageList#22](../../mfc/reference/codesnippet/cpp/cimagelist-class_22.cpp)]  \n  \n##  <a name=\"cimagelist__write\"></a>  CImageList::Write  \n Call this function to write an image list object to an archive.  \n  \n```  \nBOOL Write(CArchive* pArchive);\n```  \n  \n### Parameters  \n `pArchive`  \n A pointer to a `CArchive` object in which the image list is to be stored.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CImageList#17](../../mfc/reference/codesnippet/cpp/cimagelist-class_23.cpp)]  \n  \n## See Also  \n [CObject Class](../../mfc/reference/cobject-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CListCtrl Class](../../mfc/reference/clistctrl-class.md)   \n [CTabCtrl Class](../../mfc/reference/ctabctrl-class.md)\n"}