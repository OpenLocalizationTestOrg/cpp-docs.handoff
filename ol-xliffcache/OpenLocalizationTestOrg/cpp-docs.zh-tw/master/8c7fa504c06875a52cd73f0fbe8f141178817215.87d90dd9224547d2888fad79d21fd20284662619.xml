{"nodes":[{"pos":[12,91],"content":"Exporting C Functions for Use in C or C++ Language Executables | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Exporting C Functions for Use in C or C++ Language Executables | Microsoft Docs","pos":[0,79]}]},{"content":"Exporting C Functions for Use in C or C++ Language Executables","pos":[817,879]},{"content":"If you have functions in a DLL written in C that you want to access from a C language or C++ language module, you should use the <bpt id=\"p1\">**</bpt>__cplusplus<ept id=\"p1\">**</ept> preprocessor macro to determine which language is being compiled, and then declare these functions with C linkage if being used from a C++ language module.","pos":[880,1180],"source":"If you have functions in a DLL written in C that you want to access from a C language or C++ language module, you should use the **__cplusplus** preprocessor macro to determine which language is being compiled, and then declare these functions with C linkage if being used from a C++ language module."},{"content":"If you use this technique and provide header files for your DLL, these functions can be used by C and C++ users with no change.","pos":[1181,1308]},{"content":"The following code shows a header file that can be used by C and C++ client applications:","pos":[1315,1404]},{"content":"If you need to link C functions to your C++ executable and the function declaration header files have not used the above technique, in the C++ source file, do the following to prevent the compiler from decorating the C function names:","pos":[1698,1932]},{"content":"What do you want to do?","pos":[2000,2023]},{"content":"Export from a DLL using .def files","pos":[2034,2068]},{"content":"Export from a DLL using __declspec(dllexport)","pos":[2130,2175]},{"content":"Export and import using AFX_EXT_CLASS","pos":[2246,2283]},{"content":"Determine which exporting method to use","pos":[2352,2391]},{"content":"Import into an application using __declspec(dllimport)","pos":[2458,2512]},{"content":"Initialize a DLL","pos":[2592,2608]},{"content":"What do you want to know more about?","pos":[2650,2686]},{"content":"Decorated names","pos":[2697,2712]},{"content":"Linkage specifications","pos":[2763,2785]},{"content":"See Also","pos":[2865,2873]},{"content":"Exporting from a DLL","pos":[2878,2898]}],"content":"---\ntitle: \"Exporting C Functions for Use in C or C++ Language Executables | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"functions [C], exporting\"\n  - \"functions [C], C or C++ executables and\"\n  - \"__cplusplus macro\"\n  - \"exporting DLLs [C++], C functions in C++ executables\"\n  - \"exporting functions [C++], C functions in C++ executables\"\nms.assetid: b51d6e5e-37cf-4c1c-b0bf-fcf188c82f00\ncaps.latest.revision: 7\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Exporting C Functions for Use in C or C++ Language Executables\nIf you have functions in a DLL written in C that you want to access from a C language or C++ language module, you should use the **__cplusplus** preprocessor macro to determine which language is being compiled, and then declare these functions with C linkage if being used from a C++ language module. If you use this technique and provide header files for your DLL, these functions can be used by C and C++ users with no change.  \n  \n The following code shows a header file that can be used by C and C++ client applications:  \n  \n```  \n// MyCFuncs.h  \n#ifdef __cplusplus  \nextern \"C\" {  // only need to export C interface if  \n              // used by C++ source code  \n#endif  \n  \n__declspec( dllimport ) void MyCFunc();  \n__declspec( dllimport ) void AnotherCFunc();  \n  \n#ifdef __cplusplus  \n}  \n#endif  \n```  \n  \n If you need to link C functions to your C++ executable and the function declaration header files have not used the above technique, in the C++ source file, do the following to prevent the compiler from decorating the C function names:  \n  \n```  \nextern \"C\" {  \n#include \"MyCHeader.h\"  \n}  \n```  \n  \n## What do you want to do?  \n  \n-   [Export from a DLL using .def files](../build/exporting-from-a-dll-using-def-files.md)  \n  \n-   [Export from a DLL using __declspec(dllexport)](../build/exporting-from-a-dll-using-declspec-dllexport.md)  \n  \n-   [Export and import using AFX_EXT_CLASS](../build/exporting-and-importing-using-afx-ext-class.md)  \n  \n-   [Determine which exporting method to use](../build/determining-which-exporting-method-to-use.md)  \n  \n-   [Import into an application using __declspec(dllimport)](../build/importing-into-an-application-using-declspec-dllimport.md)  \n  \n-   [Initialize a DLL](../build/initializing-a-dll.md)  \n  \n## What do you want to know more about?  \n  \n-   [Decorated names](../build/reference/decorated-names.md)  \n  \n-   [Linkage specifications](http://msdn.microsoft.com/en-us/d2b0cff1-7798-4c38-9ac8-61c3bfe2bfb9)  \n  \n## See Also  \n [Exporting from a DLL](../build/exporting-from-a-dll.md)"}