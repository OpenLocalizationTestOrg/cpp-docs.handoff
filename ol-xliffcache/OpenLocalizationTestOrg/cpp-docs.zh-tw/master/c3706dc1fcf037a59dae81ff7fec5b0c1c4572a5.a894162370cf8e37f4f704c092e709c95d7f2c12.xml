{"nodes":[{"pos":[12,40],"content":"index Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"index Class | Microsoft Docs","pos":[0,28]}]},{"content":"index Class","pos":[608,619]},{"pos":[620,675],"content":"Defines an <bpt id=\"p1\">*</bpt>N<ept id=\"p1\">*</ept>-dimensional index pographics-cpp-amp.md.","source":"Defines an *N*-dimensional index pographics-cpp-amp.md."},{"content":"Syntax","pos":[684,690]},{"content":"Parameters","pos":[754,764]},{"content":"The rank, or number of dimensions.","pos":[779,813]},{"content":"Members","pos":[822,829]},{"content":"Public Constructors","pos":[839,858]},{"content":"Name","pos":[865,869]},{"content":"Description","pos":[870,881]},{"content":"index::index Constructor","pos":[920,944]},{"pos":[953,1001],"content":"Initializes a new instance of the <ph id=\"ph1\">`index`</ph> class.","source":"Initializes a new instance of the `index` class."},{"content":"Public Operators","pos":[1012,1028]},{"content":"Name","pos":[1035,1039]},{"content":"Description","pos":[1040,1051]},{"content":"index::operator-- Operator","pos":[1090,1116]},{"pos":[1131,1177],"content":"Decrements each element of the <ph id=\"ph1\">`index`</ph> object.","source":"Decrements each element of the `index` object."},{"content":"index::operator(mod)= Operator","pos":[1183,1213]},{"pos":[1233,1347],"content":"Calculates the modulus (remainder) of each element in the <ph id=\"ph1\">`index`</ph> object when that element is divided by a number.","source":"Calculates the modulus (remainder) of each element in the `index` object when that element is divided by a number."},{"content":"index::operator*= Operator","pos":[1353,1379]},{"pos":[1400,1458],"content":"Multiplies each element of the <ph id=\"ph1\">`index`</ph> object by a number.","source":"Multiplies each element of the `index` object by a number."},{"content":"index::operator/= Operator","pos":[1464,1490]},{"pos":[1510,1565],"content":"Divides each element of the <ph id=\"ph1\">`index`</ph> object by a number.","source":"Divides each element of the `index` object by a number."},{"content":"index::operator","pos":[1571,1586]},{"content":"Returns the element that's at the specified index.","pos":[1606,1656]},{"content":"index::operator++ Operator","pos":[1662,1688]},{"pos":[1709,1755],"content":"Increments each element of the <ph id=\"ph1\">`index`</ph> object.","source":"Increments each element of the `index` object."},{"content":"index::operator+= Operator","pos":[1761,1787]},{"pos":[1807,1871],"content":"Adds the specified number to each element of the <ph id=\"ph1\">`index`</ph> object.","source":"Adds the specified number to each element of the `index` object."},{"content":"index::operator= Operator","pos":[1877,1902]},{"pos":[1918,1984],"content":"Copies the contents of the specified <ph id=\"ph1\">`index`</ph> object into this one.","source":"Copies the contents of the specified `index` object into this one."},{"content":"index::operator-= Operator","pos":[1990,2016]},{"pos":[2034,2105],"content":"Subtracts the specified number from each element of the <ph id=\"ph1\">`index`</ph> object.","source":"Subtracts the specified number from each element of the `index` object."},{"content":"Public Constants","pos":[2117,2133]},{"content":"Name","pos":[2140,2144]},{"content":"Description","pos":[2145,2156]},{"content":"index::rank Constant","pos":[2195,2215]},{"pos":[2224,2262],"content":"Stores the rank of the <ph id=\"ph1\">`index`</ph> object.","source":"Stores the rank of the `index` object."},{"content":"Inheritance Hierarchy","pos":[2272,2293]},{"content":"Remarks","pos":[2313,2320]},{"content":"The <ph id=\"ph1\">`index`</ph> structure represents a coordinate vector of <bpt id=\"p1\">*</bpt>N<ept id=\"p1\">*</ept> integers that specifies a unique position in an <bpt id=\"p2\">*</bpt>N<ept id=\"p2\">*</ept>-dimensional space.","pos":[2324,2454],"source":"The `index` structure represents a coordinate vector of *N* integers that specifies a unique position in an *N*-dimensional space."},{"content":"The values in the vector are ordered from most significant to least significant.","pos":[2455,2535]},{"content":"You can retrieve the values of the components using <bpt id=\"p1\">[</bpt>index::operator= Operator<ept id=\"p1\">](#operator_eq)</ept>.","pos":[2536,2630],"source":" You can retrieve the values of the components using [index::operator= Operator](#operator_eq)."},{"content":"Requirements","pos":[2639,2651]},{"pos":[2655,2672],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> amp.h","source":"**Header:** amp.h"},{"pos":[2679,2705],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> Concurrency","source":"**Namespace:** Concurrency"},{"pos":[2739,2756],"content":"index Constructor"},{"content":"Initializes a new instance of the index class.","pos":[2757,2803]},{"content":"Parameters","pos":[3136,3146]},{"content":"_Array","pos":[3148,3154]},{"content":"A one-dimensional array with the rank values.","pos":[3157,3202]},{"content":"_I","pos":[3205,3207]},{"content":"The index location in a one-dimensional index.","pos":[3210,3256]},{"content":"_I0","pos":[3259,3262]},{"content":"The length of the most significant dimension.","pos":[3265,3310]},{"content":"_I1","pos":[3313,3316]},{"content":"The length of the next-to-most-significant dimension.","pos":[3319,3372]},{"content":"_I2","pos":[3375,3378]},{"content":"The length of the least significant dimension.","pos":[3381,3427]},{"content":"_Other","pos":[3430,3436]},{"content":"An index object on which the new index object is based.","pos":[3439,3494]},{"pos":[3528,3538],"content":"operator--"},{"content":"Decrements each element of the index object.","pos":[3539,3583]},{"content":"Return values","pos":[3697,3710]},{"content":"For the prefix operator, the index object (*this).","pos":[3711,3761]},{"content":"For the suffix operator, a new index object.","pos":[3762,3806]},{"pos":[3843,3857],"content":"operator(mod)="},{"content":"Calculates the modulus (remainder) of each element in the index object when that element is divided by the specified number.","pos":[3861,3985]},{"content":"Parameters","pos":[4063,4073]},{"content":"_Rhs The number to divide by to find the modulus.","pos":[4074,4123],"source":"_Rhs\nThe number to divide by to find the modulus."},{"content":"Return Value The index object.","pos":[4124,4154],"source":"\nReturn Value\nThe index object."},{"pos":[4192,4202],"content":"operator*="},{"content":"Multiplies each element in the index object by the specified number.","pos":[4206,4274]},{"content":"Parameters","pos":[4347,4357]},{"pos":[4358,4386],"content":"_Rhs The number to multiply.","source":"_Rhs\nThe number to multiply."},{"pos":[4423,4433],"content":"operator/="},{"content":"Divides each element in the index object by the specified number.","pos":[4435,4500]},{"content":"Parameters","pos":[4574,4584]},{"pos":[4585,4614],"content":"_Rhs The number to divide by.","source":"_Rhs\nThe number to divide by."},{"pos":[4647,4655],"content":"operator"},{"content":"Returns the component of the index at the specified location.","pos":[4662,4723]},{"content":"Parameters","pos":[4860,4870]},{"pos":[4871,4921],"content":"_Index An integer from 0 through the rank minus 1.","source":"_Index\nAn integer from 0 through the rank minus 1."},{"content":"Return Value","pos":[4927,4939]},{"content":"The element that's at the specified index.","pos":[4940,4982]},{"content":"Remarks","pos":[4988,4995]},{"content":"This following example displays the component values of the index.","pos":[4996,5062]},{"pos":[5250,5260],"content":"operator++"},{"content":"Increments each element of the index object.","pos":[5264,5308]},{"content":"Return Value","pos":[5425,5437]},{"content":"For the prefix operator, the index object (*this).","pos":[5438,5488]},{"content":"For the suffix operator, a new index object.","pos":[5489,5533]},{"pos":[5570,5580],"content":"operator+="},{"content":"Adds the specified number to each element of the index object.","pos":[5584,5646]},{"content":"Parameters","pos":[5797,5807]},{"pos":[5808,5831],"content":"_Rhs The number to add.","source":"_Rhs\nThe number to add."},{"content":"Return Value","pos":[5837,5849]},{"content":"The index object.","pos":[5850,5867]},{"pos":[5900,5909],"content":"operator="},{"content":"Copies the contents of the specified index object into this one.","pos":[5913,5977]},{"content":"Parameters","pos":[6069,6079]},{"pos":[6080,6117],"content":"_Other The index object to copy from.","source":"_Other\nThe index object to copy from."},{"content":"Return Value","pos":[6123,6135]},{"content":"A reference to this index object.","pos":[6136,6169]},{"pos":[6204,6214],"content":"operator-="},{"content":"Subtracts the specified number from each element of the index object.","pos":[6215,6284]},{"content":"Parameters","pos":[6436,6446]},{"pos":[6447,6475],"content":"_Rhs The number to subtract.","source":"_Rhs\nThe number to subtract."},{"content":"Return Value","pos":[6481,6493]},{"content":"The index object.","pos":[6494,6511]},{"pos":[6540,6544],"content":"Rank"},{"content":"Gets the rank of the index object.","pos":[6549,6583]},{"content":"See Also","pos":[6627,6635]},{"content":"Concurrency Namespace (C++ AMP)","pos":[6640,6671]}],"content":"---\ntitle: \"index Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"amp/Concurrency::index\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"index structure\"\nms.assetid: cbe79b08-0ba7-474c-9828-f1a71da39eb3\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# index Class\nDefines an *N*-dimensional index pographics-cpp-amp.md.  \n  \n## Syntax  \n  \n```  \ntemplate <int _Rank>  \nclass index;  \n```  \n  \n#### Parameters  \n `_Rank`  \n The rank, or number of dimensions.  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[index::index Constructor](#ctor)|Initializes a new instance of the `index` class.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[index::operator-- Operator](#operator--)|Decrements each element of the `index` object.|  \n|[index::operator(mod)= Operator](#operator_mod_eq)|Calculates the modulus (remainder) of each element in the `index` object when that element is divided by a number.|  \n|[index::operator*= Operator](#operator_star_eq)|Multiplies each element of the `index` object by a number.|  \n|[index::operator/= Operator](#operator_div_eq)|Divides each element of the `index` object by a number.|  \n|[index::operator\\[\\]](#operator_at)|Returns the element that's at the specified index.|  \n|[index::operator++ Operator](#operator_add_add)|Increments each element of the `index` object.|  \n|[index::operator+= Operator](#operator_add_eq)|Adds the specified number to each element of the `index` object.|  \n|[index::operator= Operator](#operator_eq)|Copies the contents of the specified `index` object into this one.|  \n|[index::operator-= Operator](#operator_-_eq)|Subtracts the specified number from each element of the `index` object.|  \n\n  \n### Public Constants  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[index::rank Constant](#rank)|Stores the rank of the `index` object.|  \n  \n## Inheritance Hierarchy  \n `index`  \n  \n## Remarks  \n The `index` structure represents a coordinate vector of *N* integers that specifies a unique position in an *N*-dimensional space. The values in the vector are ordered from most significant to least significant. You can retrieve the values of the components using [index::operator= Operator](#operator_eq).  \n  \n## Requirements  \n **Header:** amp.h  \n  \n **Namespace:** Concurrency  \n\n\n## <a name=\"index_ctor\"></a> index Constructor\nInitializes a new instance of the index class.\n\n```  \nindex() restrict(amp,cpu);\n\nindex(\n   const index<_Rank>& _Other\n) restrict(amp,cpu);\n\nexplicit index(\n   int _I\n) restrict(amp,cpu);\n\nindex(\n   int _I0,\n   int _I1\n) restrict(amp,cpu);\n\nindex(\n   int _I0,\n   int _I1,\n   int _I2\n) restrict(amp,cpu);\n\nexplicit index(\n   const int _Array[_Rank]\n) restrict(amp,cpu);\n``` \n\n### Parameters\n\n_Array  \nA one-dimensional array with the rank values.  \n_I  \nThe index location in a one-dimensional index.  \n_I0  \nThe length of the most significant dimension.  \n_I1  \nThe length of the next-to-most-significant dimension.  \n_I2  \nThe length of the least significant dimension.  \n_Other  \nAn index object on which the new index object is based.  \n\n## <a name=\"operator--\"></a>  operator--\nDecrements each element of the index object.  \n```  \nindex<_Rank>& operator--() restrict(amp,cpu);  \n\nindex operator--(\n   int\n) restrict(amp,cpu);\n```  \n### Return values\nFor the prefix operator, the index object (*this). For the suffix operator, a new index object.\n\n## <a name=\"operator_mod_eq\"></a>  operator(mod)=   \nCalculates the modulus (remainder) of each element in the index object when that element is divided by the specified number.\n\n```  \nindex<_Rank>& operator%=(\n   int _Rhs\n) restrict(cpu, amp);\n```  \n### Parameters\n_Rhs\nThe number to divide by to find the modulus.\nReturn Value\nThe index object.\n\n## <a name=\"operator_star_eq\"></a>  operator*=   \nMultiplies each element in the index object by the specified number.\n```\nindex<_Rank>& operator*=(\n   int _Rhs\n) restrict(amp,cpu);\n```\n\n### Parameters\n_Rhs\nThe number to multiply.\n\n## <a name=\"operator_div_eq\"></a>  operator/= \nDivides each element in the index object by the specified number.\n\n```\nindex<_Rank>& operator/=(\n   int _Rhs\n) restrict(amp,cpu);\n``` \n### Parameters\n_Rhs\nThe number to divide by.\n\n## <a name=\"operator_at\"></a>  operator\\[\\]  \nReturns the component of the index at the specified location.\n\n```\nint operator[] (\n   unsigned _Index\n) const restrict(amp,cpu);\n\nint& operator[] (\n   unsigned _Index\n) restrict(amp,cpu);\n```\n\n### Parameters\n_Index\nAn integer from 0 through the rank minus 1.\n\n### Return Value\nThe element that's at the specified index.\n\n### Remarks\nThis following example displays the component values of the index.\n```  \n// Prints 1 2 3.\nconcurrency::index<3> idx(1, 2, 3);\nstd::cout << idx[0] << \"\\n\";\nstd::cout << idx[1] << \"\\n\";\nstd::cout << idx[2] << \"\\n\";\n```\n\n## <a name=\"operator_add_add\"></a>  operator++   \nIncrements each element of the index object.\n```  \nindex<_Rank>& operator++() restrict(amp,cpu);\n\nindex<_Rank> operator++(\n   int\n) restrict(amp,cpu);\n```  \n### Return Value\nFor the prefix operator, the index object (*this). For the suffix operator, a new index object.\n\n## <a name=\"operator_add_eq\"></a>  operator+=   \nAdds the specified number to each element of the index object.\n```  \nindex<_Rank>& operator+=(\n   const index<_Rank>& _Rhs\n) restrict(amp,cpu);\n\nindex<_Rank>& operator+=(\n   int _Rhs\n) restrict(amp,cpu);\n``` \n### Parameters\n_Rhs\nThe number to add.\n\n### Return Value\nThe index object.\n\n## <a name=\"operator_eq\"></a>  operator=   \nCopies the contents of the specified index object into this one.\n```  \nindex<_Rank>& operator=(\n   const index<_Rank>& _Other\n) restrict(amp,cpu);\n``` \n### Parameters\n_Other\nThe index object to copy from.\n\n### Return Value\nA reference to this index object.\n\n## <a name=\"operator_-_eq\"></a>  operator-=\nSubtracts the specified number from each element of the index object.\n```  \nindex<_Rank>& operator-=(\n   const index<_Rank>& _Rhs\n) restrict(amp,cpu);\n\nindex<_Rank>& operator-=(\n   int _Rhs\n) restrict(amp,cpu);\n```  \n### Parameters\n_Rhs\nThe number to subtract.\n\n### Return Value\nThe index object.   \n\n## <a name=\"rank\"></a>  Rank  \n  Gets the rank of the index object.\n```\nstatic const int rank = _Rank;\n``` \n## See Also  \n [Concurrency Namespace (C++ AMP)](concurrency-namespace-cpp-amp.md)\n"}