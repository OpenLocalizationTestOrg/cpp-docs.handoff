<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9ef819233985efa1ea046f46277a20396bcd2d70</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\cdecl.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a7c7d06a7692807bfad945349c52b37062d08aa8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0c498e44acc7fb4595b99877f9d5b3d2eab22bcd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>__cdecl | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>__cdecl</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>is the default calling convention for C and C++ programs.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Because the stack is cleaned up by the caller, it can do <bpt id="p1">**</bpt>vararg<ept id="p1">**</ept> functions.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`__cdecl`</ph> calling convention creates larger executables than <bpt id="p1">[</bpt>__stdcall<ept id="p1">](../cpp/stdcall.md)</ept>, because it requires each function call to include stack cleanup code.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following list shows the implementation of this calling convention.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Implementation</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Argument-passing order</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Right to left.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Stack-maintenance responsibility</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Calling function pops the arguments from the stack.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Name-decoration convention</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Underscore character (_) is prefixed to names, except when <ph id="ph1">\_</ph>_cdecl functions that use C linkage are exported.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Case-translation convention</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>No case translation performed.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For related information, see <bpt id="p1">[</bpt>Decorated Names<ept id="p1">](../build/reference/decorated-names.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Place the <ph id="ph1">`__cdecl`</ph> modifier before a variable or a function name.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Because the C naming and calling conventions are the default, the only time you must use <ph id="ph1">`__cdecl`</ph> in x86 code is when you have specified the <bpt id="p1">**</bpt>/Gv<ept id="p1">**</ept> (vectorcall), <bpt id="p2">**</bpt>/Gz<ept id="p2">**</ept> (stdcall), or <bpt id="p3">**</bpt>/Gr<ept id="p3">**</ept> (fastcall) compiler option.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>/Gd<ept id="p1">](../build/reference/gd-gr-gv-gz-calling-convention.md)</ept> compiler option forces the <ph id="ph1">`__cdecl`</ph> calling convention.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>On ARM and x64 processors, <ph id="ph1">`__cdecl`</ph> is accepted but typically ignored by the compiler.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>By convention on ARM and x64, arguments are passed in registers when possible, and subsequent arguments are passed on the stack.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In x64 code, use <ph id="ph1">`__cdecl`</ph> to override the <bpt id="p1">**</bpt>/Gv<ept id="p1">**</ept> compiler option and use the default x64 calling convention.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For non-static class functions, if the function is defined out-of-line, the calling convention modifier does not have to be specified on the out-of-line definition.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>That is, for class non-static member methods, the calling convention specified during declaration is assumed at the point of definition.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Given this class definition:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>this:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>is equivalent to this:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In the following example, the compiler is instructed to use C naming and calling conventions for the <ph id="ph1">`system`</ph> function.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Argument Passing and Naming Conventions</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Keywords</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>