{"nodes":[{"pos":[12,45],"content":"raw_native_types | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"raw_native_types | Microsoft Docs","pos":[0,33]}]},{"content":"raw_native_types","pos":[625,641]},{"content":"C++ Specific","pos":[644,656]},{"content":"Disables the use of COM support classes in the high-level wrapper functions and forces the use of low-level data types instead.","pos":[665,792]},{"content":"Syntax","pos":[801,807]},{"content":"Remarks","pos":[850,857]},{"content":"By default, the high-level error-handling methods use the COM support classes <bpt id=\"p1\">[</bpt>_bstr_t<ept id=\"p1\">](../cpp/bstr-t-class.md)</ept> and <bpt id=\"p2\">[</bpt>_variant_t<ept id=\"p2\">](../cpp/variant-t-class.md)</ept> in place of the <ph id=\"ph1\">`BSTR`</ph> and <bpt id=\"p3\">**</bpt>VARIANT<ept id=\"p3\">**</ept> data types and raw COM interface pointers.","pos":[861,1098],"source":"By default, the high-level error-handling methods use the COM support classes [_bstr_t](../cpp/bstr-t-class.md) and [_variant_t](../cpp/variant-t-class.md) in place of the `BSTR` and **VARIANT** data types and raw COM interface pointers."},{"content":"These classes encapsulate the details of allocating and deallocating memory storage for these data types, and greatly simplify type casting and conversion operations.","pos":[1099,1265]},{"content":"END C++ Specific","pos":[1274,1290]},{"content":"See Also","pos":[1301,1309]},{"content":"import Attributes","pos":[1315,1332]},{"content":"import Directive","pos":[1387,1403]}],"content":"---\ntitle: \"raw_native_types | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"raw_native_types\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"raw_native_types attribute\"\nms.assetid: 9f38daa8-8dc0-46a5-aff9-f1ff9c1e6f48\ncaps.latest.revision: 5\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# raw_native_types\n**C++ Specific**  \n  \n Disables the use of COM support classes in the high-level wrapper functions and forces the use of low-level data types instead.  \n  \n## Syntax  \n  \n```  \nraw_native_types  \n```  \n  \n## Remarks  \n By default, the high-level error-handling methods use the COM support classes [_bstr_t](../cpp/bstr-t-class.md) and [_variant_t](../cpp/variant-t-class.md) in place of the `BSTR` and **VARIANT** data types and raw COM interface pointers. These classes encapsulate the details of allocating and deallocating memory storage for these data types, and greatly simplify type casting and conversion operations.  \n  \n **END C++ Specific**  \n  \n## See Also  \n [#import Attributes](../preprocessor/hash-import-attributes-cpp.md)   \n [#import Directive](../preprocessor/hash-import-directive-cpp.md)"}