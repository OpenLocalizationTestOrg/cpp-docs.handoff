{"nodes":[{"pos":[12,73],"content":"Exceptions: Catching and Deleting Exceptions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Exceptions: Catching and Deleting Exceptions | Microsoft Docs","pos":[0,61]}]},{"content":"Exceptions: Catching and Deleting Exceptions","pos":[855,899]},{"content":"The following instructions and examples show you how to catch and delete exceptions.","pos":[900,984]},{"content":"For more information on the <bpt id=\"p1\">**</bpt>try<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>catch<ept id=\"p2\">**</ept>, and <ph id=\"ph1\">`throw`</ph> keywords, see <bpt id=\"p3\">[</bpt>C++ Exception Handling<ept id=\"p3\">](../cpp/cpp-exception-handling.md)</ept>.","pos":[985,1118],"source":" For more information on the **try**, **catch**, and `throw` keywords, see [C++ Exception Handling](../cpp/cpp-exception-handling.md)."},{"content":"Your exception handlers must delete exception objects they handle, because failure to delete the exception causes a memory leak whenever that code catches an exception.","pos":[1125,1293]},{"pos":[1300,1351],"content":"Your <bpt id=\"p1\">**</bpt>catch<ept id=\"p1\">**</ept> block must delete an exception when:","source":"Your **catch** block must delete an exception when:"},{"pos":[1361,1404],"content":"The <bpt id=\"p1\">**</bpt>catch<ept id=\"p1\">**</ept> block throws a new exception.","source":"The **catch** block throws a new exception."},{"content":"Of course, you must not delete the exception if you throw the same exception again:","pos":[1415,1498]},{"pos":[1520,1539],"content":"NVC_MFCExceptions#3"},{"pos":[1625,1675],"content":"Execution returns from within the <bpt id=\"p1\">**</bpt>catch<ept id=\"p1\">**</ept> block.","source":"Execution returns from within the **catch** block."},{"pos":[1683,1875],"content":"[!NOTE]\n When deleting a `CException`, use the **Delete** member function to delete the exception. Do not use the **delete** keyword, because it can fail if the exception is not on the heap.","leadings":["","> "],"nodes":[{"content":" When deleting a `CException`, use the **Delete** member function to delete the exception. Do not use the **delete** keyword, because it can fail if the exception is not on the heap.","pos":[8,190],"nodes":[{"content":"When deleting a <ph id=\"ph1\">`CException`</ph>, use the <bpt id=\"p1\">**</bpt>Delete<ept id=\"p1\">**</ept> member function to delete the exception.","pos":[1,90],"source":" When deleting a `CException`, use the **Delete** member function to delete the exception."},{"content":"Do not use the <bpt id=\"p1\">**</bpt>delete<ept id=\"p1\">**</ept> keyword, because it can fail if the exception is not on the heap.","pos":[91,182],"source":" Do not use the **delete** keyword, because it can fail if the exception is not on the heap."}]}]},{"content":"To catch and delete exceptions","pos":[1886,1916]},{"content":"Use the <bpt id=\"p1\">**</bpt>try<ept id=\"p1\">**</ept> keyword to set up a <bpt id=\"p2\">**</bpt>try<ept id=\"p2\">**</ept> block.","pos":[1926,1976],"source":"Use the **try** keyword to set up a **try** block."},{"content":"Execute any program statements that might throw an exception within a <bpt id=\"p1\">**</bpt>try<ept id=\"p1\">**</ept> block.","pos":[1977,2061],"source":" Execute any program statements that might throw an exception within a **try** block."},{"content":"Use the <bpt id=\"p1\">**</bpt>catch<ept id=\"p1\">**</ept> keyword to set up a <bpt id=\"p2\">**</bpt>catch<ept id=\"p2\">**</ept> block.","pos":[2072,2126],"source":"Use the **catch** keyword to set up a **catch** block."},{"content":"Place exception-handling code in a <bpt id=\"p1\">**</bpt>catch<ept id=\"p1\">**</ept> block.","pos":[2127,2178],"source":" Place exception-handling code in a **catch** block."},{"content":"The code in the <bpt id=\"p1\">**</bpt>catch<ept id=\"p1\">**</ept> block is executed only if the code within the <bpt id=\"p2\">**</bpt>try<ept id=\"p2\">**</ept> block throws an exception of the type specified in the <bpt id=\"p3\">**</bpt>catch<ept id=\"p3\">**</ept> statement.","pos":[2179,2334],"source":" The code in the **catch** block is executed only if the code within the **try** block throws an exception of the type specified in the **catch** statement."},{"pos":[2345,2429],"content":"The following skeleton shows how <bpt id=\"p1\">**</bpt>try<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>catch<ept id=\"p2\">**</ept> blocks are normally arranged:","source":"The following skeleton shows how **try** and **catch** blocks are normally arranged:"},{"pos":[2451,2470],"content":"NVC_MFCExceptions#4"},{"content":"When an exception is thrown, control passes to the first <bpt id=\"p1\">**</bpt>catch<ept id=\"p1\">**</ept> block whose exception-declaration matches the type of the exception.","pos":[2557,2692],"source":"When an exception is thrown, control passes to the first **catch** block whose exception-declaration matches the type of the exception."},{"content":"You can selectively handle different types of exceptions with sequential <bpt id=\"p1\">**</bpt>catch<ept id=\"p1\">**</ept> blocks as listed below:","pos":[2693,2799],"source":" You can selectively handle different types of exceptions with sequential **catch** blocks as listed below:"},{"pos":[2821,2840],"content":"NVC_MFCExceptions#5"},{"pos":[2923,3059],"content":"For more information, see <bpt id=\"p1\">[</bpt>Exceptions: Converting from MFC Exception Macros<ept id=\"p1\">](../mfc/exceptions-converting-from-mfc-exception-macros.md)</ept>.","source":"For more information, see [Exceptions: Converting from MFC Exception Macros](../mfc/exceptions-converting-from-mfc-exception-macros.md)."},{"content":"See Also","pos":[3068,3076]},{"content":"Exception Handling","pos":[3081,3099]}],"content":"---\ntitle: \"Exceptions: Catching and Deleting Exceptions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"exceptions, deleting\"\n  - \"AND_CATCH macro\"\n  - \"try-catch exception handling, catching and deleting exceptions\"\n  - \"exception handling, catching and deleting exceptions\"\n  - \"catch blocks, catching and deleting exceptions\"\n  - \"execution, returns from within catch block\"\nms.assetid: 7c233ff0-89de-4de0-a68a-9e9cdb164311\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Exceptions: Catching and Deleting Exceptions\nThe following instructions and examples show you how to catch and delete exceptions. For more information on the **try**, **catch**, and `throw` keywords, see [C++ Exception Handling](../cpp/cpp-exception-handling.md).  \n  \n Your exception handlers must delete exception objects they handle, because failure to delete the exception causes a memory leak whenever that code catches an exception.  \n  \n Your **catch** block must delete an exception when:  \n  \n-   The **catch** block throws a new exception.  \n  \n     Of course, you must not delete the exception if you throw the same exception again:  \n  \n     [!code-cpp[NVC_MFCExceptions#3](../mfc/codesnippet/cpp/exceptions-catching-and-deleting-exceptions_1.cpp)]  \n  \n-   Execution returns from within the **catch** block.  \n  \n> [!NOTE]\n>  When deleting a `CException`, use the **Delete** member function to delete the exception. Do not use the **delete** keyword, because it can fail if the exception is not on the heap.  \n  \n#### To catch and delete exceptions  \n  \n1.  Use the **try** keyword to set up a **try** block. Execute any program statements that might throw an exception within a **try** block.  \n  \n     Use the **catch** keyword to set up a **catch** block. Place exception-handling code in a **catch** block. The code in the **catch** block is executed only if the code within the **try** block throws an exception of the type specified in the **catch** statement.  \n  \n     The following skeleton shows how **try** and **catch** blocks are normally arranged:  \n  \n     [!code-cpp[NVC_MFCExceptions#4](../mfc/codesnippet/cpp/exceptions-catching-and-deleting-exceptions_2.cpp)]  \n  \n     When an exception is thrown, control passes to the first **catch** block whose exception-declaration matches the type of the exception. You can selectively handle different types of exceptions with sequential **catch** blocks as listed below:  \n  \n     [!code-cpp[NVC_MFCExceptions#5](../mfc/codesnippet/cpp/exceptions-catching-and-deleting-exceptions_3.cpp)]  \n  \n For more information, see [Exceptions: Converting from MFC Exception Macros](../mfc/exceptions-converting-from-mfc-exception-macros.md).  \n  \n## See Also  \n [Exception Handling](../mfc/exception-handling-in-mfc.md)\n\n"}