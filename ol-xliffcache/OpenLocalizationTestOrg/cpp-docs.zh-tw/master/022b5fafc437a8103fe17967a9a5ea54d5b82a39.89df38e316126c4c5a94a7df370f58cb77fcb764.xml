{"nodes":[{"pos":[12,52],"content":"scheduler_ptr Structure | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"scheduler_ptr Structure | Microsoft Docs","pos":[0,40]}]},{"content":"scheduler_ptr Structure","pos":[592,615]},{"content":"Represents a pointer to a scheduler.","pos":[616,652]},{"content":"This class exists to allow the the specification of a shared lifetime by using shared_ptr or just a plain reference by using raw pointer.","pos":[653,790]},{"content":"Syntax","pos":[799,805]},{"content":"Members","pos":[849,856]},{"content":"Public Constructors","pos":[866,885]},{"content":"Name","pos":[892,896]},{"content":"Description","pos":[897,908]},{"content":"scheduler_ptr::scheduler_ptr Constructor","pos":[947,987]},{"content":"Overloaded.","pos":[996,1007]},{"content":"Creates a scheduler pointer from shared_ptr to scheduler","pos":[1008,1064]},{"content":"Public Methods","pos":[1075,1089]},{"content":"Name","pos":[1096,1100]},{"content":"Description","pos":[1101,1112]},{"content":"scheduler_ptr::get Method","pos":[1151,1176]},{"content":"Returns the raw pointer to the scheduler","pos":[1184,1224]},{"content":"Public Operators","pos":[1235,1251]},{"content":"Name","pos":[1258,1262]},{"content":"Description","pos":[1263,1274]},{"content":"scheduler_ptr::operator bool Operator","pos":[1313,1350]},{"content":"Test whether the scheduler pointer is non-null","pos":[1368,1414]},{"content":"scheduler_ptr::operator-<ph id=\"ph1\">&amp;gt;</ph> Operator","pos":[1420,1457],"source":"scheduler_ptr::operator-&gt; Operator"},{"content":"Behave like a pointer","pos":[1474,1495]},{"content":"Inheritance Hierarchy","pos":[1505,1526]},{"content":"Requirements","pos":[1554,1566]},{"pos":[1570,1596],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> pplinterface.h","source":"**Header:** pplinterface.h"},{"pos":[1603,1629],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[1659,1684],"content":"scheduler_ptr::get Method"},{"content":"Returns the raw pointer to the scheduler","pos":[1688,1728]},{"content":"Return Value","pos":[1785,1797]},{"pos":[1837,1865],"content":"scheduler_ptr::operator bool"},{"content":"Test whether the scheduler pointer is non-null","pos":[1870,1916]},{"content":"```operator bool() const;","pos":[1922,1947]},{"content":"scheduler_interface* operator-&gt;() const;","pos":[2054,2094],"source":"scheduler_interface* operator->() const;"},{"content":"explicit scheduler_ptr(std::shared_ptr&lt;scheduler_interface&gt; scheduler);","pos":[2261,2332],"source":"explicit scheduler_ptr(std::shared_ptr<scheduler_interface> scheduler);"},{"pos":[2334,2399],"content":"explicit scheduler_ptr(<bpt id=\"p1\">_</bpt>In_opt<ept id=\"p1\">_</ept> scheduler_interface* pScheduler);","source":"explicit scheduler_ptr(_In_opt_ scheduler_interface* pScheduler);"}],"content":"---\ntitle: \"scheduler_ptr Structure | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"pplinterface/concurrency::scheduler_ptr\"\ndev_langs: \n  - \"C++\"\nms.assetid: e88c84af-c306-476d-aef1-f42a0fa0a80f\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# scheduler_ptr Structure\nRepresents a pointer to a scheduler. This class exists to allow the the specification of a shared lifetime by using shared_ptr or just a plain reference by using raw pointer.  \n  \n## Syntax  \n  \n```\nstruct scheduler_ptr;\n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[scheduler_ptr::scheduler_ptr Constructor](#ctor)|Overloaded. Creates a scheduler pointer from shared_ptr to scheduler|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[scheduler_ptr::get Method](#get)|Returns the raw pointer to the scheduler|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[scheduler_ptr::operator bool Operator](#operator_bool)|Test whether the scheduler pointer is non-null|  \n|[scheduler_ptr::operator-&gt; Operator](#operator_ptr)|Behave like a pointer|  \n  \n## Inheritance Hierarchy  \n `scheduler_ptr`  \n  \n## Requirements  \n **Header:** pplinterface.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"get\"></a>  scheduler_ptr::get Method  \n Returns the raw pointer to the scheduler  \n  \n```\nscheduler_interface* get() const;\n```  \n  \n### Return Value  \n  \n##  <a name=\"operator_bool\"></a>  scheduler_ptr::operator bool   \n Test whether the scheduler pointer is non-null  \n  \n```operator bool() const;\n```  \n  \n##  <a name=\"operator_ptr\"></a>  scheduler_ptr::operator-&gt;   \n Behave like a pointer  \n  \n```\nscheduler_interface* operator->() const;\n```  \n  \n### Return Value  \n  \n##  <a name=\"ctor\"></a>  scheduler_ptr::scheduler_ptr Constructor  \n Creates a scheduler pointer from shared_ptr to scheduler  \n  \n```\nexplicit scheduler_ptr(std::shared_ptr<scheduler_interface> scheduler);\n\nexplicit scheduler_ptr(_In_opt_ scheduler_interface* pScheduler);\n```  \n  \n### Parameters  \n `scheduler`  \n `pScheduler`  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)\n"}