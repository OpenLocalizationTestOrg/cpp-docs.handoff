{"nodes":[{"pos":[12,76],"content":"Handlers for Commands and Control Notifications | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Handlers for Commands and Control Notifications | Microsoft Docs","pos":[0,64]}]},{"content":"Handlers for Commands and Control Notifications","pos":[793,840]},{"content":"There are no default handlers for commands or control-notification messages.","pos":[841,917]},{"content":"Therefore, you are bound only by convention in naming your handlers for these categories of messages.","pos":[918,1019]},{"content":"When you map the command or control notification to a handler, the Properties windows proposes a name based on the command ID or control-notification code.","pos":[1020,1175]},{"content":"You can accept the proposed name, change it, or replace it.","pos":[1176,1235]},{"content":"Convention suggests that you name handlers in both categories for the user-interface object they represent.","pos":[1242,1349]},{"content":"Thus a handler for the Cut command on the Edit menu might be named","pos":[1350,1416]},{"pos":[1434,1458],"content":"NVC_MFCMessageHandling#4"},{"content":"Because the Cut command is so commonly implemented in applications, the framework predefines the command ID for the Cut command as <bpt id=\"p1\">**</bpt>ID_EDIT_CUT<ept id=\"p1\">**</ept>.","pos":[1543,1690],"source":"Because the Cut command is so commonly implemented in applications, the framework predefines the command ID for the Cut command as **ID_EDIT_CUT**."},{"content":"For a list of all predefined command IDs, see the file AFXRES.H.","pos":[1691,1755]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Standard Commands<ept id=\"p1\">](../mfc/standard-commands.md)</ept>.","pos":[1756,1831],"source":" For more information, see [Standard Commands](../mfc/standard-commands.md)."},{"pos":[1838,1973],"content":"In addition, convention suggests a handler for the <bpt id=\"p1\">**</bpt>BN_CLICKED<ept id=\"p1\">**</ept> notification message from a button labeled \"My Button\" might be named","source":"In addition, convention suggests a handler for the **BN_CLICKED** notification message from a button labeled \"My Button\" might be named"},{"pos":[1991,2015],"content":"NVC_MFCMessageHandling#5"},{"pos":[2100,2229],"content":"You might assign this command an ID of <ph id=\"ph1\">`IDC_MY_BUTTON`</ph> because it is equivalent to an application-specific user-interface object.","source":"You might assign this command an ID of `IDC_MY_BUTTON` because it is equivalent to an application-specific user-interface object."},{"content":"Both categories of messages take no arguments and return no value.","pos":[2236,2302]},{"content":"See Also","pos":[2311,2319]},{"content":"Declaring Message Handler Functions","pos":[2324,2359]}],"content":"---\ntitle: \"Handlers for Commands and Control Notifications | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"commands, handlers for\"\n  - \"functions [C++], handler\"\n  - \"handlers\"\n  - \"controls [MFC], notifications\"\n  - \"handlers, control notification\"\n  - \"notifications, handlers for control\"\n  - \"handlers, command\"\nms.assetid: 20f57f4a-f577-4c09-80a2-43faf32a1c2e\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Handlers for Commands and Control Notifications\nThere are no default handlers for commands or control-notification messages. Therefore, you are bound only by convention in naming your handlers for these categories of messages. When you map the command or control notification to a handler, the Properties windows proposes a name based on the command ID or control-notification code. You can accept the proposed name, change it, or replace it.  \n  \n Convention suggests that you name handlers in both categories for the user-interface object they represent. Thus a handler for the Cut command on the Edit menu might be named  \n  \n [!code-cpp[NVC_MFCMessageHandling#4](../mfc/codesnippet/cpp/handlers-for-commands-and-control-notifications_1.h)]  \n  \n Because the Cut command is so commonly implemented in applications, the framework predefines the command ID for the Cut command as **ID_EDIT_CUT**. For a list of all predefined command IDs, see the file AFXRES.H. For more information, see [Standard Commands](../mfc/standard-commands.md).  \n  \n In addition, convention suggests a handler for the **BN_CLICKED** notification message from a button labeled \"My Button\" might be named  \n  \n [!code-cpp[NVC_MFCMessageHandling#5](../mfc/codesnippet/cpp/handlers-for-commands-and-control-notifications_2.h)]  \n  \n You might assign this command an ID of `IDC_MY_BUTTON` because it is equivalent to an application-specific user-interface object.  \n  \n Both categories of messages take no arguments and return no value.  \n  \n## See Also  \n [Declaring Message Handler Functions](../mfc/declaring-message-handler-functions.md)\n"}