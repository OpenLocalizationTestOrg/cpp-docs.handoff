{"nodes":[{"pos":[12,65],"content":"Indirection and Address-of Operators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Indirection and Address-of Operators | Microsoft Docs","pos":[0,53]}]},{"content":"Indirection and Address-of Operators","pos":[945,981]},{"content":"The indirection operator (<bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>) accesses a value indirectly, through a pointer.","pos":[982,1063],"source":"The indirection operator (**\\***) accesses a value indirectly, through a pointer."},{"content":"The operand must be a pointer value.","pos":[1064,1100]},{"content":"The result of the operation is the value addressed by the operand; that is, the value at the address to which its operand points.","pos":[1101,1230]},{"content":"The type of the result is the type that the operand addresses.","pos":[1231,1293]},{"content":"If the operand points to a function, the result is a function designator.","pos":[1300,1373]},{"content":"If it points to a storage location, the result is an l-value designating the storage location.","pos":[1374,1468]},{"content":"If the pointer value is invalid, the result is undefined.","pos":[1475,1532]},{"content":"The following list includes some of the most common conditions that invalidate a pointer value.","pos":[1533,1628]},{"content":"The pointer is a null pointer.","pos":[1638,1668]},{"content":"The pointer specifies the address of a local item that is not visible at the time of the reference.","pos":[1678,1777]},{"content":"The pointer specifies an address that is inappropriately aligned for the type of the object pointed to.","pos":[1787,1890]},{"content":"The pointer specifies an address not used by the executing program.","pos":[1900,1967]},{"content":"The address-of operator (<bpt id=\"p1\">**</bpt><ph id=\"ph1\">&amp;</ph><ept id=\"p1\">**</ept>) gives the address of its operand.","pos":[1974,2039],"source":"The address-of operator (**&**) gives the address of its operand."},{"content":"The operand of the address-of operator can be either a function designator or an l-value that designates an object that is not a bit field and is not declared with the <bpt id=\"p1\">**</bpt>register<ept id=\"p1\">**</ept> storage-class specifier.","pos":[2040,2245],"source":" The operand of the address-of operator can be either a function designator or an l-value that designates an object that is not a bit field and is not declared with the **register** storage-class specifier."},{"content":"The result of the address operation is a pointer to the operand.","pos":[2252,2316]},{"content":"The type addressed by the pointer is the type of the operand.","pos":[2317,2378]},{"content":"The address-of operator can only be applied to variables with fundamental, structure, or union types that are declared at the file-scope level, or to subscripted array references.","pos":[2385,2564]},{"content":"In these expressions, a constant expression that does not include the address-of operator can be added to or subtracted from the address expression.","pos":[2565,2713]},{"content":"Examples","pos":[2722,2730]},{"content":"The following examples use these declarations:","pos":[2734,2780]},{"content":"This statement uses the address-of operator:","pos":[2841,2885]},{"content":"The address-of operator (<bpt id=\"p1\">**</bpt><ph id=\"ph1\">&amp;</ph><ept id=\"p1\">**</ept>) takes the address of the sixth element of the array <ph id=\"ph2\">`a`</ph>.","pos":[2921,3009],"source":"The address-of operator (**&**) takes the address of the sixth element of the array `a`."},{"content":"The result is stored in the pointer variable <ph id=\"ph1\">`pa`</ph>.","pos":[3010,3060],"source":" The result is stored in the pointer variable `pa`."},{"content":"The indirection operator (<bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>) is used in this example to access the <ph id=\"ph2\">`int`</ph> value at the address stored in <ph id=\"ph3\">`pa`</ph>.","pos":[3093,3207],"source":"The indirection operator (**\\***) is used in this example to access the `int` value at the address stored in `pa`."},{"content":"The value is assigned to the integer variable <ph id=\"ph1\">`x`</ph>.","pos":[3208,3258],"source":" The value is assigned to the integer variable `x`."},{"pos":[3323,3468],"content":"This example prints the word <ph id=\"ph1\">`True`</ph>, demonstrating that the result of applying the indirection operator to the address of <ph id=\"ph2\">`x`</ph> is the same as <ph id=\"ph3\">`x`</ph>.","source":"This example prints the word `True`, demonstrating that the result of applying the indirection operator to the address of `x` is the same as `x`."},{"content":"Once the function <ph id=\"ph1\">`roundup`</ph> is declared, two pointers to <ph id=\"ph2\">`roundup`</ph> are declared and initialized.","pos":[3604,3700],"source":"Once the function `roundup` is declared, two pointers to `roundup` are declared and initialized."},{"content":"The first pointer, <ph id=\"ph1\">`proundup`</ph>, is initialized using only the name of the function, while the second, <ph id=\"ph2\">`pround`</ph>, uses the address-of operator in the initialization.","pos":[3701,3863],"source":" The first pointer, `proundup`, is initialized using only the name of the function, while the second, `pround`, uses the address-of operator in the initialization."},{"content":"The initializations are equivalent.","pos":[3864,3899]},{"content":"See Also","pos":[3908,3916]},{"content":"Indirection Operator: *","pos":[3921,3944]},{"content":"Address-of Operator: &amp;","pos":[3988,4010],"source":"Address-of Operator: &"}],"content":"---\ntitle: \"Indirection and Address-of Operators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"address-of operator (&)\"\n  - \"* operator\"\n  - \"operators [C++], address-of\"\n  - \"ampersand operator (&)\"\n  - \"* operator, indirection operator\"\n  - \"addresses [C++], indirection\"\n  - \"addresses [C++]\"\n  - \"indirection operator\"\n  - \"& operator, address-of operator\"\n  - \"null pointers [C++]\"\n  - \"* operator, address-of operator\"\n  - \"operators [C++], indirection\"\nms.assetid: 10d62b00-12ba-4ea9-a2d5-09ac29ca2232\ncaps.latest.revision: 6\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Indirection and Address-of Operators\nThe indirection operator (**\\***) accesses a value indirectly, through a pointer. The operand must be a pointer value. The result of the operation is the value addressed by the operand; that is, the value at the address to which its operand points. The type of the result is the type that the operand addresses.  \n  \n If the operand points to a function, the result is a function designator. If it points to a storage location, the result is an l-value designating the storage location.  \n  \n If the pointer value is invalid, the result is undefined. The following list includes some of the most common conditions that invalidate a pointer value.  \n  \n-   The pointer is a null pointer.  \n  \n-   The pointer specifies the address of a local item that is not visible at the time of the reference.  \n  \n-   The pointer specifies an address that is inappropriately aligned for the type of the object pointed to.  \n  \n-   The pointer specifies an address not used by the executing program.  \n  \n The address-of operator (**&**) gives the address of its operand. The operand of the address-of operator can be either a function designator or an l-value that designates an object that is not a bit field and is not declared with the **register** storage-class specifier.  \n  \n The result of the address operation is a pointer to the operand. The type addressed by the pointer is the type of the operand.  \n  \n The address-of operator can only be applied to variables with fundamental, structure, or union types that are declared at the file-scope level, or to subscripted array references. In these expressions, a constant expression that does not include the address-of operator can be added to or subtracted from the address expression.  \n  \n## Examples  \n The following examples use these declarations:  \n  \n```  \nint *pa, x;  \nint a[20];  \ndouble d;  \n```  \n  \n This statement uses the address-of operator:  \n  \n```  \npa = &a[5];  \n```  \n  \n The address-of operator (**&**) takes the address of the sixth element of the array `a`. The result is stored in the pointer variable `pa`.  \n  \n```  \nx = *pa;  \n```  \n  \n The indirection operator (**\\***) is used in this example to access the `int` value at the address stored in `pa`. The value is assigned to the integer variable `x`.  \n  \n```  \nif( x == *&x )  \n    printf( \"True\\n\" );  \n```  \n  \n This example prints the word `True`, demonstrating that the result of applying the indirection operator to the address of `x` is the same as `x`.  \n  \n```  \nint roundup( void );     /* Function declaration */  \n  \nint  *proundup  = roundup;  \nint  *pround  = &roundup;  \n```  \n  \n Once the function `roundup` is declared, two pointers to `roundup` are declared and initialized. The first pointer, `proundup`, is initialized using only the name of the function, while the second, `pround`, uses the address-of operator in the initialization. The initializations are equivalent.  \n  \n## See Also  \n [Indirection Operator: *](../cpp/indirection-operator-star.md)   \n [Address-of Operator: &](../cpp/address-of-operator-amp.md)"}