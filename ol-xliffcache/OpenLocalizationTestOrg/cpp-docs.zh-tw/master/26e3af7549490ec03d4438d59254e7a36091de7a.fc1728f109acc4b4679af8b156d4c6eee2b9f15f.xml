{"nodes":[{"pos":[12,60],"content":"cancellation_token_source Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"cancellation_token_source Class | Microsoft Docs","pos":[0,48]}]},{"content":"cancellation_token_source Class","pos":[682,713]},{"pos":[714,811],"content":"The <ph id=\"ph1\">`cancellation_token_source`</ph> class represents the ability to cancel some cancelable operation.","source":"The `cancellation_token_source` class represents the ability to cancel some cancelable operation."},{"content":"Syntax","pos":[820,826]},{"content":"Members","pos":[881,888]},{"content":"Public Constructors","pos":[898,917]},{"content":"Name","pos":[924,928]},{"content":"Description","pos":[929,940]},{"content":"cancellation_token_source::cancellation_token_source Constructor","pos":[979,1043]},{"content":"Overloaded.","pos":[1052,1063]},{"content":"Constructs a new <ph id=\"ph1\">`cancellation_token_source`</ph>.","pos":[1064,1109],"source":" Constructs a new `cancellation_token_source`."},{"content":"The source can be used to flag cancellation of some cancelable operation.","pos":[1110,1183]},{"content":"cancellation_token_source::~cancellation_token_source Destructor","pos":[1189,1253]},{"content":"Public Methods","pos":[1273,1287]},{"content":"Name","pos":[1294,1298]},{"content":"Description","pos":[1299,1310]},{"content":"cancellation_token_source::cancel Method","pos":[1349,1389]},{"content":"Cancels the token.","pos":[1400,1418]},{"content":"Any <ph id=\"ph1\">`task_group`</ph>, <ph id=\"ph2\">`structured_task_group`</ph>, or <ph id=\"ph3\">`task`</ph> which utilizes the token will be canceled upon this call and throw an exception at the next interruption point.","pos":[1419,1583],"source":" Any `task_group`, `structured_task_group`, or `task` which utilizes the token will be canceled upon this call and throw an exception at the next interruption point."},{"content":"cancellation_token_source::create_linked_source Method","pos":[1589,1643]},{"content":"Overloaded.","pos":[1668,1679]},{"content":"Creates a <ph id=\"ph1\">`cancellation_token_source`</ph> which is canceled when the provided token is canceled.","pos":[1680,1772],"source":" Creates a `cancellation_token_source` which is canceled when the provided token is canceled."},{"content":"cancellation_token_source::get_token Method","pos":[1778,1821]},{"content":"Returns a cancellation token associated with this source.","pos":[1835,1892]},{"content":"The returned token can be polled for cancellation or provide a callback if and when cancellation occurs.","pos":[1893,1997]},{"content":"Public Operators","pos":[2008,2024]},{"content":"Name","pos":[2031,2035]},{"content":"Description","pos":[2036,2047]},{"content":"cancellation_token_source::operator!= Operator","pos":[2086,2132]},{"content":"cancellation_token_source::operator= Operator","pos":[2155,2200]},{"content":"cancellation_token_source::operator== Operator","pos":[2222,2268]},{"content":"Inheritance Hierarchy","pos":[2297,2318]},{"content":"Requirements","pos":[2358,2370]},{"pos":[2374,2409],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> pplcancellation_token.h","source":"**Header:** pplcancellation_token.h"},{"pos":[2416,2442],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[2473,2537],"content":"cancellation_token_source::~cancellation_token_source Destructor"},{"pos":[2613,2653],"content":"cancellation_token_source::cancel Method"},{"content":"Cancels the token.","pos":[2657,2675]},{"content":"Any <ph id=\"ph1\">`task_group`</ph>, <ph id=\"ph2\">`structured_task_group`</ph>, or <ph id=\"ph3\">`task`</ph> which utilizes the token will be canceled upon this call and throw an exception at the next interruption point.","pos":[2676,2840],"source":" Any `task_group`, `structured_task_group`, or `task` which utilizes the token will be canceled upon this call and throw an exception at the next interruption point."},{"pos":[2905,2969],"content":"cancellation_token_source::cancellation_token_source Constructor"},{"content":"Constructs a new <ph id=\"ph1\">`cancellation_token_source`</ph>.","pos":[2973,3018],"source":"Constructs a new `cancellation_token_source`."},{"content":"The source can be used to flag cancellation of some cancelable operation.","pos":[3019,3092]},{"content":"Parameters","pos":[3273,3283]},{"pos":[3340,3394],"content":"cancellation_token_source::create_linked_source Method"},{"pos":[3398,3490],"content":"Creates a <ph id=\"ph1\">`cancellation_token_source`</ph> which is canceled when the provided token is canceled.","source":"Creates a `cancellation_token_source` which is canceled when the provided token is canceled."},{"content":"Parameters","pos":[3706,3716]},{"content":"A token whose cancellation will cause cancellation of the returned token source.","pos":[3741,3821]},{"content":"Note that the returned token source can also be canceled independently of the source contained in this parameter.","pos":[3822,3935]},{"content":"The STL iterator corresponding to the beginning of the range of tokens to listen for cancellation of.","pos":[3954,4055]},{"content":"The STL iterator corresponding to the ending of the range of tokens to listen for cancellation of.","pos":[4072,4170]},{"content":"Return Value","pos":[4180,4192]},{"pos":[4196,4304],"content":"A <ph id=\"ph1\">`cancellation_token_source`</ph> which is canceled when the token provided by the <ph id=\"ph2\">`_Src`</ph> parameter is canceled.","source":"A `cancellation_token_source` which is canceled when the token provided by the `_Src` parameter is canceled."},{"pos":[4340,4383],"content":"cancellation_token_source::get_token Method"},{"content":"Returns a cancellation token associated with this source.","pos":[4387,4444]},{"content":"The returned token can be polled for cancellation or provide a callback if and when cancellation occurs.","pos":[4445,4549]},{"content":"Return Value","pos":[4610,4622]},{"content":"A cancellation token associated with this source.","pos":[4626,4675]},{"pos":[4714,4760],"content":"cancellation_token_source::operator!= Operator"},{"content":"Parameters","pos":[4846,4856]},{"content":"Return Value","pos":[4876,4888]},{"pos":[4926,4971],"content":"cancellation_token_source::operator= Operator"},{"content":"Parameters","pos":[5146,5156]},{"content":"Return Value","pos":[5176,5188]},{"pos":[5229,5275],"content":"cancellation_token_source::operator== Operator"},{"content":"Parameters","pos":[5361,5371]},{"content":"Return Value","pos":[5391,5403]},{"content":"See Also","pos":[5412,5420]},{"content":"concurrency Namespace","pos":[5425,5446]}],"content":"---\ntitle: \"cancellation_token_source Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"pplcancellation_token/concurrency::cancellation_token_source\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"cancellation_token_source class\"\nms.assetid: 3548b1a0-12b0-4334-95db-4bf57141c066\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# cancellation_token_source Class\nThe `cancellation_token_source` class represents the ability to cancel some cancelable operation.  \n  \n## Syntax  \n  \n```\nclass cancellation_token_source;\n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[cancellation_token_source::cancellation_token_source Constructor](#ctor)|Overloaded. Constructs a new `cancellation_token_source`. The source can be used to flag cancellation of some cancelable operation.|  \n|[cancellation_token_source::~cancellation_token_source Destructor](#dtor)||  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[cancellation_token_source::cancel Method](#cancel)|Cancels the token. Any `task_group`, `structured_task_group`, or `task` which utilizes the token will be canceled upon this call and throw an exception at the next interruption point.|  \n|[cancellation_token_source::create_linked_source Method](#create_linked_source)|Overloaded. Creates a `cancellation_token_source` which is canceled when the provided token is canceled.|  \n|[cancellation_token_source::get_token Method](#get_token)|Returns a cancellation token associated with this source. The returned token can be polled for cancellation or provide a callback if and when cancellation occurs.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[cancellation_token_source::operator!= Operator](#operator_neq)||  \n|[cancellation_token_source::operator= Operator](#operator_eq)||  \n|[cancellation_token_source::operator== Operator](#operator_eq_eq)||  \n  \n## Inheritance Hierarchy  \n `cancellation_token_source`  \n  \n## Requirements  \n **Header:** pplcancellation_token.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"dtor\"></a>  cancellation_token_source::~cancellation_token_source Destructor  \n  \n```\n~cancellation_token_source();\n```  \n  \n##  <a name=\"cancel\"></a>  cancellation_token_source::cancel Method  \n Cancels the token. Any `task_group`, `structured_task_group`, or `task` which utilizes the token will be canceled upon this call and throw an exception at the next interruption point.  \n  \n```\nvoid cancel() const;\n```  \n  \n##  <a name=\"ctor\"></a>  cancellation_token_source::cancellation_token_source Constructor  \n Constructs a new `cancellation_token_source`. The source can be used to flag cancellation of some cancelable operation.  \n  \n```\ncancellation_token_source();\n\ncancellation_token_source(const cancellation_token_source& _Src);\n\ncancellation_token_source(cancellation_token_source&& _Src);\n```  \n  \n### Parameters  \n `_Src`  \n  \n##  <a name=\"create_linked_source\"></a>  cancellation_token_source::create_linked_source Method  \n Creates a `cancellation_token_source` which is canceled when the provided token is canceled.  \n  \n```\nstatic cancellation_token_source create_linked_source(\n    cancellation_token& _Src);\n\ntemplate<typename _Iter>\nstatic cancellation_token_source create_linked_source(_Iter _Begin, _Iter _End);\n```  \n  \n### Parameters  \n `_Iter`  \n `_Src`  \n A token whose cancellation will cause cancellation of the returned token source. Note that the returned token source can also be canceled independently of the source contained in this parameter.  \n  \n `_Begin`  \n The STL iterator corresponding to the beginning of the range of tokens to listen for cancellation of.  \n  \n `_End`  \n The STL iterator corresponding to the ending of the range of tokens to listen for cancellation of.  \n  \n### Return Value  \n A `cancellation_token_source` which is canceled when the token provided by the `_Src` parameter is canceled.  \n  \n##  <a name=\"get_token\"></a>  cancellation_token_source::get_token Method  \n Returns a cancellation token associated with this source. The returned token can be polled for cancellation or provide a callback if and when cancellation occurs.  \n  \n```\ncancellation_token get_token() const;\n```  \n  \n### Return Value  \n A cancellation token associated with this source.  \n  \n##  <a name=\"operator_neq\"></a>  cancellation_token_source::operator!= Operator  \n  \n```\nbool operator!= (const cancellation_token_source& _Src) const;\n```  \n  \n### Parameters  \n `_Src`  \n  \n### Return Value  \n  \n##  <a name=\"operator_eq\"></a>  cancellation_token_source::operator= Operator  \n  \n```\ncancellation_token_source& operator= (const cancellation_token_source& _Src);\n\ncancellation_token_source& operator= (cancellation_token_source&& _Src);\n```  \n  \n### Parameters  \n `_Src`  \n  \n### Return Value  \n  \n##  <a name=\"operator_eq_eq\"></a>  cancellation_token_source::operator== Operator  \n  \n```\nbool operator== (const cancellation_token_source& _Src) const;\n```  \n  \n### Parameters  \n `_Src`  \n  \n### Return Value  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)\n"}