{"nodes":[{"pos":[12,62],"content":"FtmBase::GetMarshalSizeMax Method | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"FtmBase::GetMarshalSizeMax Method | Microsoft Docs","pos":[0,50]}]},{"content":"FtmBase::GetMarshalSizeMax Method","pos":[690,723]},{"content":"Get the upper bound on the number of bytes needed to marshal the specified interface pointer on the specified object.","pos":[724,841]},{"content":"Syntax","pos":[850,856]},{"content":"Parameters","pos":[1096,1106]},{"content":"Reference to the identifier of the interface to be marshaled.","pos":[1120,1181]},{"content":"Interface pointer to be marshaled; can be NULL.","pos":[1196,1243]},{"content":"Destination context where the specified interface is to be unmarshaled.","pos":[1269,1340]},{"content":"Specify one or more MSHCTX enumeration values.","pos":[1347,1393]},{"content":"Currently, unmarshaling can occur either in another apartment of the current process (MSHCTX_INPROC) or in another process on the same computer as the current process (MSHCTX_LOCAL).","pos":[1400,1582]},{"content":"Reserved for future use; must be NULL.","pos":[1608,1646]},{"content":"Flag indicating whether the data to be marshaled is to be transmitted back to the client process — the typical case — or written to a global table, where it can be retrieved by multiple clients.","pos":[1668,1862]},{"content":"Specify one or more MSHLFLAGS enumeration values.","pos":[1863,1912]},{"content":"When this operation completes, pointer to the upper bound on the amount of data to be written to the marshaling stream.","pos":[1930,2049]},{"content":"Return Value","pos":[2058,2070]},{"content":"S_OK if successful; otherwise, E_FAIL or E_NOINTERFACE.","pos":[2074,2129]},{"content":"Requirements","pos":[2138,2150]},{"pos":[2154,2171],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> ftm.h","source":"**Header:** ftm.h"},{"pos":[2178,2207],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> Microsoft::WRL","source":"**Namespace:** Microsoft::WRL"},{"content":"See Also","pos":[2216,2224]},{"content":"FtmBase Class","pos":[2229,2242]}],"content":"---\ntitle: \"FtmBase::GetMarshalSizeMax Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ftm/Microsoft::WRL::FtmBase::GetMarshalSizeMax\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"GetMarshalSizeMax method\"\nms.assetid: b416b1bf-c73e-45d5-abb8-04921c1a0c94\ncaps.latest.revision: 3\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# FtmBase::GetMarshalSizeMax Method\nGet the upper bound on the number of bytes needed to marshal the specified interface pointer on the specified object.  \n  \n## Syntax  \n  \n```  \nSTDMETHODIMP GetMarshalSizeMax(  \n   __in REFIID riid,  \n   __in_opt void *pv,  \n   __in DWORD dwDestContext,  \n   __reserved void *pvDestContext,  \n   __in DWORD mshlflags,  \n   __out DWORD *pSize  \n) override;  \n```  \n  \n#### Parameters  \n `riid`  \n Reference to the identifier of the interface to be marshaled.  \n  \n `pv`  \n Interface pointer to be marshaled; can be NULL.  \n  \n `dwDestContext`  \n Destination context where the specified interface is to be unmarshaled.  \n  \n Specify one or more MSHCTX enumeration values.  \n  \n Currently, unmarshaling can occur either in another apartment of the current process (MSHCTX_INPROC) or in another process on the same computer as the current process (MSHCTX_LOCAL).  \n  \n `pvDestContext`  \n Reserved for future use; must be NULL.  \n  \n `mshlflags`  \n Flag indicating whether the data to be marshaled is to be transmitted back to the client process — the typical case — or written to a global table, where it can be retrieved by multiple clients. Specify one or more MSHLFLAGS enumeration values.  \n  \n `pSize`  \n When this operation completes, pointer to the upper bound on the amount of data to be written to the marshaling stream.  \n  \n## Return Value  \n S_OK if successful; otherwise, E_FAIL or E_NOINTERFACE.  \n  \n## Requirements  \n **Header:** ftm.h  \n  \n **Namespace:** Microsoft::WRL  \n  \n## See Also  \n [FtmBase Class](../windows/ftmbase-class.md)"}