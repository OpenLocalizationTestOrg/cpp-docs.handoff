<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3cedf79c1070116ac3fb2cb15612bd854b3bcfa5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\asynchronous-agents-library.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3268ce7514115387bf033b7e31b4999f5d39f18d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5a21de2bc908693fd8da87159e07e4cec94b36f8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Asynchronous Agents Library | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Asynchronous Agents Library</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Asynchronous Agents Library (or just <bpt id="p1">*</bpt>Agents Library<ept id="p1">*</ept>) provides a programming model that lets you increase the robustness of concurrency-enabled application development.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The Agents Library is a C++ template library that promotes an actor-based programming model and in-process message passing for coarse-grained dataflow and pipelining tasks.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The Agents Library builds on the scheduling and resource management components of the Concurrency Runtime.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Programming Model</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The Agents Library provides alternatives to shared state by letting you connect isolated components through an asynchronous communication model that is based on dataflow instead of control flow.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Dataflow<ept id="p1">*</ept> refers to a programming model where computations are made when all required data is available; <bpt id="p2">*</bpt>control flow<ept id="p2">*</ept> refers to a programming model where computations are made in a predetermined order.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The dataflow programming model is related to the concept of <bpt id="p1">*</bpt>message passing<ept id="p1">*</ept>, where independent components of a program communicate with one another by sending messages.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The Agents Library is composed of three components: <bpt id="p1">*</bpt>asynchronous agents<ept id="p1">*</ept>, <bpt id="p2">*</bpt>asynchronous message blocks<ept id="p2">*</ept>, and <bpt id="p3">*</bpt>message-passing functions<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Agents maintain state, and use message blocks and message-passing functions to communicate with one another and with external components.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Message-passing functions enable agents to send and receive messages to and from the external components.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Asynchronous message blocks hold messages and enable agents to communicate in a synchronized manner.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following illustration shows how two agents use message blocks and message-passing functions to communicate.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In this illustration, <ph id="ph1">`agent1`</ph> sends a message to <ph id="ph2">`agent2`</ph> by using the <bpt id="p1">[</bpt>concurrency::send<ept id="p1">](reference/concurrency-namespace-functions.md#send)</ept> function and a <bpt id="p2">[</bpt>concurrency::unbounded_buffer<ept id="p2">](reference/unbounded-buffer-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>uses the <bpt id="p1">[</bpt>concurrency::receive<ept id="p1">](reference/concurrency-namespace-functions.md#receive)</ept> function to read the message.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>uses the same method to send a message to <ph id="ph1">`agent1`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Dashed arrows represent the flow of data between agents.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Solid arrows connect the agents to the message blocks that they write to or read from.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The components of the Agents Library</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A code example that implements this illustration is shown later in this topic.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The agent programming model has several advantages over other concurrency and synchronization mechanisms, for example, events.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>One advantage is that by using message passing to transmit state changes between objects, you can isolate access to shared resources, and thereby improve scalability.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>An advantage to message passing is that it ties synchronization to data instead of tying it to an external synchronization object.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This simplifies data transmission among components and can eliminate programming errors in your applications.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When to Use the Agents Library</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Use the Agents library when you have multiple operations that must communicate with one another asynchronously.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Message blocks and message-passing functions let you write parallel applications without requiring synchronization mechanisms such as locks.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This lets you focus on application logic.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The agent programming model is often used to create <bpt id="p1">*</bpt>data pipelines<ept id="p1">*</ept> or <bpt id="p2">*</bpt>networks<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A data pipeline is a series of components, each of which performs a specific task that contributes to a larger goal.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Every component in a dataflow pipeline performs work when it receives a message from another component.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The result of that work is passed to other components in the pipeline or network.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The components can use more fine-grained concurrency functionality from other libraries, for example, the <bpt id="p1">[</bpt>Parallel Patterns Library (PPL)<ept id="p1">](../../parallel/concrt/parallel-patterns-library-ppl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following example implements the illustration shown earlier in this topic.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>concrt-basic-agents#1</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following topics describe the functionality used in this example.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Related Topics</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Asynchronous Agents</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Describes the role of asynchronous agents in solving larger computing tasks.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Asynchronous Message Blocks</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Describes the various message block types that are provided by the Agents Library.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Message Passing Functions</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Describes the various message passing routines that are provided by the Agents Library.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>How to: Implement Various Producer-Consumer Patterns</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Describes how to implement the producer-consumer pattern in your application.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>How to: Provide Work Functions to the call and transformer Classes</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Illustrates several ways to provide work functions to the <bpt id="p1">[</bpt>concurrency::call<ept id="p1">](../../parallel/concrt/reference/call-class.md)</ept> and <bpt id="p2">[</bpt>concurrency::transformer<ept id="p2">](../../parallel/concrt/reference/transformer-class.md)</ept> classes.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>How to: Use transformer in a Data Pipeline</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Shows how to use the <bpt id="p1">[</bpt>concurrency::transformer<ept id="p1">](../../parallel/concrt/reference/transformer-class.md)</ept> class in a data pipeline.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>How to: Select Among Completed Tasks</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Shows how to use the <bpt id="p1">[</bpt>concurrency::choice<ept id="p1">](../../parallel/concrt/reference/choice-class.md)</ept> and <bpt id="p2">[</bpt>concurrency::join<ept id="p2">](../../parallel/concrt/reference/join-class.md)</ept> classes to select the first task to complete a search algorithm.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>How to: Send a Message at a Regular Interval</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Shows how to use the <bpt id="p1">[</bpt>concurrency::timer<ept id="p1">](../../parallel/concrt/reference/timer-class.md)</ept> class to send a message at a regular interval.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>How to: Use a Message Block Filter</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Demonstrates how to use a filter to enable an asynchronous message block to accept or reject messages.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Parallel Patterns Library (PPL)</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Describes how to use various parallel patterns, such as parallel algorithms, in your applications.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Concurrency Runtime</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Describes the Concurrency Runtime, which simplifies parallel programming, and contains links to related topics.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>