{"nodes":[{"pos":[12,60],"content":"hash_map::lower_bound (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"hash_map::lower_bound (STL-CLR) | Microsoft Docs","pos":[0,48]}]},{"content":"hash_map::lower_bound (STL/CLR)","pos":[650,681]},{"content":"Finds beginning of range that matches a specified key.","pos":[682,736]},{"content":"Syntax","pos":[745,751]},{"content":"Parameters","pos":[815,825]},{"content":"key","pos":[829,832]},{"content":"Key value to search for.","pos":[836,860]},{"content":"Remarks","pos":[869,876]},{"content":"The member function determines the first element <ph id=\"ph1\">`X`</ph> in the controlled sequence that hashes to the same bucket as <ph id=\"ph2\">`key`</ph> and has equivalent ordering to <ph id=\"ph3\">`key`</ph>.","pos":[880,1037],"source":"The member function determines the first element `X` in the controlled sequence that hashes to the same bucket as `key` and has equivalent ordering to `key`."},{"content":"If no such element exists, it returns <bpt id=\"p1\">[</bpt>hash_map::end (STL/CLR)<ept id=\"p1\">](../dotnet/hash-map-end-stl-clr.md)</ept><ph id=\"ph1\">`()`</ph>; otherwise it returns an iterator that designates <ph id=\"ph2\">`X`</ph>.","pos":[1038,1195],"source":" If no such element exists, it returns [hash_map::end (STL/CLR)](../dotnet/hash-map-end-stl-clr.md)`()`; otherwise it returns an iterator that designates `X`."},{"content":"You use it to locate the beginning of a sequence of elements currently in the controlled sequence that match a specified key.","pos":[1196,1321]},{"content":"Example","pos":[1330,1337]},{"content":"Requirements","pos":[2500,2512]},{"pos":[2516,2546],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/hash_map&gt;","source":"**Header:** \\<cliext/hash_map>"},{"pos":[2553,2574],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2583,2591]},{"content":"hash_map (STL/CLR)","pos":[2596,2614]},{"content":"hash_map::count (STL/CLR)","pos":[2652,2677]},{"content":"hash_map::equal_range (STL/CLR)","pos":[2721,2752]},{"content":"hash_map::find (STL/CLR)","pos":[2802,2826]},{"content":"hash_map::upper_bound (STL/CLR)","pos":[2869,2900]}],"content":"---\ntitle: \"hash_map::lower_bound (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::hash_map::lower_bound\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"lower_bound member [STL/CLR]\"\nms.assetid: 7c88987a-9c77-4874-8052-192a148abbf1\ncaps.latest.revision: 15\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# hash_map::lower_bound (STL/CLR)\nFinds beginning of range that matches a specified key.  \n  \n## Syntax  \n  \n```  \niterator lower_bound(key_type key);  \n```  \n  \n#### Parameters  \n key  \n Key value to search for.  \n  \n## Remarks  \n The member function determines the first element `X` in the controlled sequence that hashes to the same bucket as `key` and has equivalent ordering to `key`. If no such element exists, it returns [hash_map::end (STL/CLR)](../dotnet/hash-map-end-stl-clr.md)`()`; otherwise it returns an iterator that designates `X`. You use it to locate the beginning of a sequence of elements currently in the controlled sequence that match a specified key.  \n  \n## Example  \n  \n```  \n// cliext_hash_map_lower_bound.cpp   \n// compile with: /clr   \n#include <cliext/hash_map>   \n  \ntypedef cliext::hash_map<wchar_t, int> Myhash_map;   \nint main()   \n    {   \n    Myhash_map c1;   \n    c1.insert(Myhash_map::make_value(L'a', 1));   \n    c1.insert(Myhash_map::make_value(L'b', 2));   \n    c1.insert(Myhash_map::make_value(L'c', 3));   \n  \n// display contents \" [a 1] [b 2] [c 3]\"   \n    for each (Myhash_map::value_type elem in c1)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n  \n    System::Console::WriteLine(\"lower_bound(L'x')==end() = {0}\",   \n        c1.lower_bound(L'x') == c1.end());   \n  \n    Myhash_map::iterator it = c1.lower_bound(L'a');   \n    System::Console::WriteLine(\"*lower_bound(L'a') = [{0} {1}]\",   \n        it->first, it->second);   \n    it = c1.lower_bound(L'b');   \n    System::Console::WriteLine(\"*lower_bound(L'b') = [{0} {1}]\",   \n        it->first, it->second);   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n [a 1] [b 2] [c 3]  \nlower_bound(L'x')==end() = True  \n*lower_bound(L'a') = [a 1]  \n*lower_bound(L'b') = [b 2]  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/hash_map>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [hash_map (STL/CLR)](../dotnet/hash-map-stl-clr.md)   \n [hash_map::count (STL/CLR)](../dotnet/hash-map-count-stl-clr.md)   \n [hash_map::equal_range (STL/CLR)](../dotnet/hash-map-equal-range-stl-clr.md)   \n [hash_map::find (STL/CLR)](../dotnet/hash-map-find-stl-clr.md)   \n [hash_map::upper_bound (STL/CLR)](../dotnet/hash-map-upper-bound-stl-clr.md)"}