{"nodes":[{"pos":[12,49],"content":"mem_fun1_ref_t Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"mem_fun1_ref_t Class | Microsoft Docs","pos":[0,37]}]},{"content":"mem_fun1_ref_t Class","pos":[703,723]},{"pos":[724,898],"content":"An adapter class that allows a <bpt id=\"p1\">**</bpt>non_const<ept id=\"p1\">**</ept> member function that takes a single argument to be called as a binary function object when initialized with a reference argument.","source":"An adapter class that allows a **non_const** member function that takes a single argument to be called as a binary function object when initialized with a reference argument."},{"content":"Syntax","pos":[907,913]},{"content":"Parameters","pos":[1179,1189]},{"content":"A pointer to the member function of class <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept> to be converted to a function object.","pos":[1202,1290],"source":" A pointer to the member function of class **Type** to be converted to a function object."},{"content":"The object that the <ph id=\"ph1\">`_Pm`</ph> member function is called on.","pos":[1307,1362],"source":" The object that the `_Pm` member function is called on."},{"content":"The argument that is being given to <ph id=\"ph1\">`_Pm`</ph>.","pos":[1380,1422],"source":" The argument that is being given to `_Pm`."},{"content":"Return Value","pos":[1431,1443]},{"content":"An adaptable binary function.","pos":[1447,1476]},{"content":"Remarks","pos":[1485,1492]},{"content":"The template class stores a copy of <ph id=\"ph1\">`_Pm`</ph>, which must be a pointer to a member function of class <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept>, in a private member object.","pos":[1496,1630],"source":"The template class stores a copy of `_Pm`, which must be a pointer to a member function of class **Type**, in a private member object."},{"content":"It defines its member function <ph id=\"ph1\">`operator()`</ph> as returning ( <bpt id=\"p1\">**</bpt>left<ept id=\"p1\">**</ept>.","pos":[1631,1699],"source":" It defines its member function `operator()` as returning ( **left**."},{"content":")( <bpt id=\"p1\">**</bpt>right<ept id=\"p1\">**</ept>).","pos":[1707,1721],"source":")( **right**)."},{"content":"Example","pos":[1730,1737]},{"content":"The constructor of <ph id=\"ph1\">`mem_fun1_ref_t`</ph> is not usually used directly; the helper function <ph id=\"ph2\">`mem_fun_ref`</ph> is used to adapt member functions.","pos":[1741,1875],"source":"The constructor of `mem_fun1_ref_t` is not usually used directly; the helper function `mem_fun_ref` is used to adapt member functions."},{"content":"See <bpt id=\"p1\">[</bpt>mem_fun_ref<ept id=\"p1\">](../standard-library/functional-functions.md#mem_fun_ref_function)</ept> for an example of how to use member function adaptors.","pos":[1876,2014],"source":" See [mem_fun_ref](../standard-library/functional-functions.md#mem_fun_ref_function) for an example of how to use member function adaptors."},{"content":"Requirements","pos":[2023,2035]},{"pos":[2039,2064],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>functional&gt;","source":"**Header:** \\<functional>"},{"pos":[2071,2089],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"content":"See Also","pos":[2098,2106]},{"content":"Thread Safety in the C++ Standard Library","pos":[2111,2152]},{"content":"C++ Standard Library Reference","pos":[2225,2255]}],"content":"---\ntitle: \"mem_fun1_ref_t Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"xfunctional/std::mem_fun1_ref_t\"\n  - \"std::mem_fun1_ref_t\"\n  - \"mem_fun1_ref_t\"\n  - \"std.mem_fun1_ref_t\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"mem_fun1_ref_t class\"\nms.assetid: 7d6742f6-19ba-4523-b3c8-0e5b8f11464f\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# mem_fun1_ref_t Class\nAn adapter class that allows a **non_const** member function that takes a single argument to be called as a binary function object when initialized with a reference argument.  \n  \n## Syntax  \n  \n```\ntemplate <class Result, class Type, class Arg>\nclass mem_fun1_ref_t : public binary_function<Type, Arg, Result> {\n    explicit mem_fun1_ref_t(\n    Result (Type::* _Pm)(Arg));\n\n    Result operator()(\n    Type& left,\n    Arg right) const;\n\n };\n```  \n  \n#### Parameters  \n `_Pm`  \n A pointer to the member function of class **Type** to be converted to a function object.  \n  \n `left`  \n The object that the `_Pm` member function is called on.  \n  \n `right`  \n The argument that is being given to `_Pm`.  \n  \n## Return Value  \n An adaptable binary function.  \n  \n## Remarks  \n The template class stores a copy of `_Pm`, which must be a pointer to a member function of class **Type**, in a private member object. It defines its member function `operator()` as returning ( **left**.\\* `_Pm`)( **right**).  \n  \n## Example  \n The constructor of `mem_fun1_ref_t` is not usually used directly; the helper function `mem_fun_ref` is used to adapt member functions. See [mem_fun_ref](../standard-library/functional-functions.md#mem_fun_ref_function) for an example of how to use member function adaptors.  \n  \n## Requirements  \n **Header:** \\<functional>  \n  \n **Namespace:** std  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}