{"nodes":[{"pos":[12,67],"content":"Resolving ambiguous declarations (C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Resolving ambiguous declarations (C++) | Microsoft Docs","pos":[0,55]}]},{"content":"Resolving ambiguous declarations (C++)","pos":[558,596]},{"content":"To perform explicit conversions from one type to another, you must use casts, specifying the desired type name.","pos":[597,708]},{"content":"Some type casts result in syntactic ambiguity.","pos":[709,755]},{"content":"The following function-style type cast is ambiguous:","pos":[756,808]},{"pos":[860,1181],"content":"It is unclear whether it is a function declaration or an object declaration with a function-style cast as the initializer: It could declare a function returning type <bpt id=\"p1\">**</bpt>char <ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> that takes one argument of type <ph id=\"ph2\">`String`</ph>, or it could declare the object <ph id=\"ph3\">`aName`</ph> and initialize it with the value of <ph id=\"ph4\">`s`</ph> cast to type <ph id=\"ph5\">`String`</ph>.","source":"It is unclear whether it is a function declaration or an object declaration with a function-style cast as the initializer: It could declare a function returning type **char \\*** that takes one argument of type `String`, or it could declare the object `aName` and initialize it with the value of `s` cast to type `String`."},{"content":"If a declaration can be considered a valid function declaration, it is treated as such.","pos":[1188,1275]},{"content":"Only if it cannot possibly be a function declaration — that is, if it would be syntactically incorrect — is a statement examined to see if it is a function-style type cast.","pos":[1276,1448]},{"content":"Therefore, the compiler considers the statement to be a declaration of a function and ignores the parentheses around the identifier <ph id=\"ph1\">`s`</ph>.","pos":[1449,1585],"source":" Therefore, the compiler considers the statement to be a declaration of a function and ignores the parentheses around the identifier `s`."},{"content":"On the other hand, the statements:","pos":[1586,1620]},{"content":"and","pos":[1670,1673]},{"pos":[1724,1882],"content":"are clearly declarations of objects, and a user-defined conversion from type <ph id=\"ph1\">`String`</ph> to type <bpt id=\"p1\">**</bpt>char <ph id=\"ph2\">\\*</ph><ept id=\"p1\">**</ept> is invoked to perform the initialization of <ph id=\"ph3\">`aName`</ph>.","source":"are clearly declarations of objects, and a user-defined conversion from type `String` to type **char \\*** is invoked to perform the initialization of `aName`."},{"content":"See Also","pos":[1891,1899]},{"content":"C++ Abstract Declarators","pos":[1904,1928]}],"content":"---\ntitle: \"Resolving ambiguous declarations (C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nms.assetid: 3d773ee7-bbea-47de-80c2-cb0a9d4ec0b9\ncaps.latest.revision: 6\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Resolving ambiguous declarations (C++)\nTo perform explicit conversions from one type to another, you must use casts, specifying the desired type name. Some type casts result in syntactic ambiguity. The following function-style type cast is ambiguous:  \n  \n```  \nchar *aName( String( s ) );  \n```  \n  \n It is unclear whether it is a function declaration or an object declaration with a function-style cast as the initializer: It could declare a function returning type **char \\*** that takes one argument of type `String`, or it could declare the object `aName` and initialize it with the value of `s` cast to type `String`.  \n  \n If a declaration can be considered a valid function declaration, it is treated as such. Only if it cannot possibly be a function declaration — that is, if it would be syntactically incorrect — is a statement examined to see if it is a function-style type cast. Therefore, the compiler considers the statement to be a declaration of a function and ignores the parentheses around the identifier `s`. On the other hand, the statements:  \n  \n```  \nchar *aName( (String)s );  \n```  \n  \n and  \n  \n```  \nchar *aName = String( s );  \n```  \n  \n are clearly declarations of objects, and a user-defined conversion from type `String` to type **char \\*** is invoked to perform the initialization of `aName`.  \n  \n## See Also  \n [C++ Abstract Declarators](http://msdn.microsoft.com/en-us/e7e18c18-0cad-4450-942b-d27e1d4dd088)"}