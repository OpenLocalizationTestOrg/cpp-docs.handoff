{"nodes":[{"pos":[12,64],"content":"-openmp (Enable OpenMP 2.0 Support) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"-openmp (Enable OpenMP 2.0 Support) | Microsoft Docs","pos":[0,52]}]},{"content":"/openmp (Enable OpenMP 2.0 Support)","pos":[708,743]},{"pos":[744,817],"content":"Causes the compiler to process <ph id=\"ph1\">`#pragma`</ph><bpt id=\"p1\">[</bpt>omp<ept id=\"p1\">](../../preprocessor/omp.md)</ept>.","source":"Causes the compiler to process `#pragma`[omp](../../preprocessor/omp.md)."},{"content":"Syntax","pos":[826,832]},{"content":"Remarks","pos":[866,873]},{"content":"is used to specify <bpt id=\"p1\">[</bpt>Directives<ept id=\"p1\">](../../parallel/openmp/reference/openmp-directives.md)</ept> and <bpt id=\"p2\">[</bpt>Clauses<ept id=\"p2\">](../../parallel/openmp/reference/openmp-clauses.md)</ept>.","pos":[891,1042],"source":" is used to specify [Directives](../../parallel/openmp/reference/openmp-directives.md) and [Clauses](../../parallel/openmp/reference/openmp-clauses.md)."},{"content":"If <bpt id=\"p1\">**</bpt>/openmp<ept id=\"p1\">**</ept> is not specified in a compilation, the compiler ignores OpenMP clauses and directives.","pos":[1043,1144],"source":" If **/openmp** is not specified in a compilation, the compiler ignores OpenMP clauses and directives."},{"content":"<bpt id=\"p1\">[</bpt>OpenMP Function<ept id=\"p1\">](../../parallel/openmp/reference/openmp-functions.md)</ept> calls are processed by the compiler even if <bpt id=\"p2\">**</bpt>/openmp<ept id=\"p2\">**</ept> is not specified.","pos":[1145,1289],"source":"[OpenMP Function](../../parallel/openmp/reference/openmp-functions.md) calls are processed by the compiler even if **/openmp** is not specified."},{"pos":[1296,1475],"content":"An application compiled with <bpt id=\"p1\">**</bpt>/openmp<ept id=\"p1\">**</ept> and using the <bpt id=\"p2\">[</bpt>Libraries<ept id=\"p2\">](../../parallel/openmp/reference/openmp-libraries.md)</ept> can only be run on Windows 2000 or later operating systems.","source":"An application compiled with **/openmp** and using the [Libraries](../../parallel/openmp/reference/openmp-libraries.md) can only be run on Windows 2000 or later operating systems."},{"content":"Applications compiled with <bpt id=\"p1\">**</bpt>/openmp<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>/clr<ept id=\"p2\">**</ept> can only be run in a single application domain process; multiple application domains are not supported.","pos":[1482,1637],"source":"Applications compiled with **/openmp** and **/clr** can only be run in a single application domain process; multiple application domains are not supported."},{"content":"That is, when the module constructor (.cctor) is run, it will detect the process is compiled with <bpt id=\"p1\">**</bpt>/openmp<ept id=\"p1\">**</ept> and if the application is being loaded into a non-default runtime.","pos":[1638,1814],"source":" That is, when the module constructor (.cctor) is run, it will detect the process is compiled with **/openmp** and if the application is being loaded into a non-default runtime."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>appdomain<ept id=\"p1\">](../../cpp/appdomain.md)</ept>, <bpt id=\"p2\">[</bpt>/clr (Common Language Runtime Compilation)<ept id=\"p2\">](../../build/reference/clr-common-language-runtime-compilation.md)</ept>, and <bpt id=\"p3\">[</bpt>Initialization of Mixed Assemblies<ept id=\"p3\">](../../dotnet/initialization-of-mixed-assemblies.md)</ept>.","pos":[1815,2083],"source":" For more information, see [appdomain](../../cpp/appdomain.md), [/clr (Common Language Runtime Compilation)](../../build/reference/clr-common-language-runtime-compilation.md), and [Initialization of Mixed Assemblies](../../dotnet/initialization-of-mixed-assemblies.md)."},{"pos":[2090,2381],"content":"If you attempt to load an application compiled with <bpt id=\"p1\">**</bpt>/openmp<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>/clr<ept id=\"p2\">**</ept> into a non-default application domain, a &lt;xref:System.TypeInitializationException&gt; exception will be thrown outside the debugger and a OpenMPWithMultipleAppdomainsException exception will be thrown in the debugger.","source":"If you attempt to load an application compiled with **/openmp** and **/clr** into a non-default application domain, a <xref:System.TypeInitializationException> exception will be thrown outside the debugger and a OpenMPWithMultipleAppdomainsException exception will be thrown in the debugger."},{"content":"These exceptions can also be raised in the following situations:","pos":[2388,2452]},{"pos":[2462,2661],"content":"If your application compiled with <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept>, but not with <bpt id=\"p2\">**</bpt>/openmp<ept id=\"p2\">**</ept>, is loaded into a non-default application domain but where the process includes an application that was compiled with <bpt id=\"p3\">**</bpt>/openmp<ept id=\"p3\">**</ept>.","source":"If your application compiled with **/clr**, but not with **/openmp**, is loaded into a non-default application domain but where the process includes an application that was compiled with **/openmp**."},{"pos":[2671,2931],"content":"If you pass your <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept> application to a utility, such as regasm.exe (<bpt id=\"p2\">[</bpt>Regasm.exe (Assembly Registration Tool)<ept id=\"p2\">](http://msdn.microsoft.com/Library/e190e342-36ef-4651-a0b4-0e8c2c0281cb)</ept>), which loads its target assemblies into a non-default application domain.","source":"If you pass your **/clr** application to a utility, such as regasm.exe ([Regasm.exe (Assembly Registration Tool)](http://msdn.microsoft.com/Library/e190e342-36ef-4651-a0b4-0e8c2c0281cb)), which loads its target assemblies into a non-default application domain."},{"content":"The common language runtime's code access security doesnâ€™t work in OpenMP regions.","pos":[2938,3020]},{"content":"If you apply a CLR code access security attribute outside a parallel region, it won't be in effect in the parallel region.","pos":[3021,3143]},{"pos":[3150,3365],"content":"Microsoft advises that you do not write <bpt id=\"p1\">**</bpt>/openmp<ept id=\"p1\">**</ept> applications that allows partially trusted callers, using &lt;xref:System.Security.AllowPartiallyTrustedCallersAttribute&gt;, or any CLR code access security attributes.","source":"Microsoft advises that you do not write **/openmp** applications that allows partially trusted callers, using <xref:System.Security.AllowPartiallyTrustedCallersAttribute>, or any CLR code access security attributes."},{"content":"To set this compiler option in the Visual Studio development environment","pos":[3375,3447]},{"content":"Open the project's <bpt id=\"p1\">**</bpt>Property Pages<ept id=\"p1\">**</ept> dialog box.","pos":[3457,3506],"source":"Open the project's **Property Pages** dialog box."},{"content":"For details, see <bpt id=\"p1\">[</bpt>Working with Project Properties<ept id=\"p1\">](../../ide/working-with-project-properties.md)</ept>.","pos":[3507,3604],"source":" For details, see [Working with Project Properties](../../ide/working-with-project-properties.md)."},{"pos":[3614,3659],"content":"Expand the <bpt id=\"p1\">**</bpt>Configuration Properties<ept id=\"p1\">**</ept> node.","source":"Expand the **Configuration Properties** node."},{"pos":[3669,3695],"content":"Expand the <bpt id=\"p1\">**</bpt>C/C++<ept id=\"p1\">**</ept> node.","source":"Expand the **C/C++** node."},{"pos":[3705,3743],"content":"Select the <bpt id=\"p1\">**</bpt>Language<ept id=\"p1\">**</ept> property page.","source":"Select the **Language** property page."},{"pos":[3753,3792],"content":"Modify the <bpt id=\"p1\">**</bpt>OpenMP Support<ept id=\"p1\">**</ept> property.","source":"Modify the **OpenMP Support** property."},{"content":"To set this compiler option programmatically","pos":[3802,3846]},{"content":"See &lt;xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.OpenMP%2A&gt;.","pos":[3856,3933],"source":"See <xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.OpenMP%2A>."},{"content":"Example","pos":[3942,3949]},{"content":"The following sample shows some of the effects of threadpool startup versus using the threadpool after it started up.","pos":[3953,4070]},{"content":"Assuming an x64, single core, dual processor the threadpool takes about 16ms to startup.","pos":[4071,4159]},{"content":"After that though there is very little cost for the threadpool.","pos":[4160,4223]},{"content":"When you compile with <bpt id=\"p1\">**</bpt>/openmp<ept id=\"p1\">**</ept>, the second call to test2 never runs any longer than if you compile with <bpt id=\"p2\">**</bpt>/openmp-<ept id=\"p2\">**</ept>, as there is no threadpool startup.","pos":[4230,4385],"source":"When you compile with **/openmp**, the second call to test2 never runs any longer than if you compile with **/openmp-**, as there is no threadpool startup."},{"content":"At a million iterations the <bpt id=\"p1\">**</bpt>/openmp<ept id=\"p1\">**</ept> version is faster than the <bpt id=\"p2\">**</bpt>/openmp-<ept id=\"p2\">**</ept> version for the second call to test2, and at 25 iterations both <bpt id=\"p3\">**</bpt>/openmp-<ept id=\"p3\">**</ept> and <bpt id=\"p4\">**</bpt>/openmp<ept id=\"p4\">**</ept> versions register less than the clock granularity.","pos":[4386,4609],"source":" At a million iterations the **/openmp** version is faster than the **/openmp-** version for the second call to test2, and at 25 iterations both **/openmp-** and **/openmp** versions register less than the clock granularity."},{"pos":[4616,4868],"content":"So if you have only one loop in your application and it runs in less than 15ms (adjusted for the approximate overhead on your machine), <bpt id=\"p1\">**</bpt>/openmp<ept id=\"p1\">**</ept> may not be appropriate, but if it's anything more than that, you may want to consider using <bpt id=\"p2\">**</bpt>/openmp<ept id=\"p2\">**</ept>.","source":"So if you have only one loop in your application and it runs in less than 15ms (adjusted for the approximate overhead on your machine), **/openmp** may not be appropriate, but if it's anything more than that, you may want to consider using **/openmp**."},{"content":"See Also","pos":[5857,5865]},{"content":"Compiler Options","pos":[5870,5886]},{"content":"Setting Compiler Options","pos":[5936,5960]}],"content":"---\ntitle: \"-openmp (Enable OpenMP 2.0 Support) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"/openmp\"\n  - \"VC.Project.VCCLCompilerTool.OpenMP\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"/openmp compiler option [C++]\"\n  - \"-openmp compiler option [C++]\"\nms.assetid: 9082b175-18d3-4378-86a7-c0eb95664e13\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# /openmp (Enable OpenMP 2.0 Support)\nCauses the compiler to process `#pragma`[omp](../../preprocessor/omp.md).  \n  \n## Syntax  \n  \n```  \n/openmp  \n```  \n  \n## Remarks  \n `#pragma omp` is used to specify [Directives](../../parallel/openmp/reference/openmp-directives.md) and [Clauses](../../parallel/openmp/reference/openmp-clauses.md). If **/openmp** is not specified in a compilation, the compiler ignores OpenMP clauses and directives. [OpenMP Function](../../parallel/openmp/reference/openmp-functions.md) calls are processed by the compiler even if **/openmp** is not specified.  \n  \n An application compiled with **/openmp** and using the [Libraries](../../parallel/openmp/reference/openmp-libraries.md) can only be run on Windows 2000 or later operating systems.  \n  \n Applications compiled with **/openmp** and **/clr** can only be run in a single application domain process; multiple application domains are not supported. That is, when the module constructor (.cctor) is run, it will detect the process is compiled with **/openmp** and if the application is being loaded into a non-default runtime. For more information, see [appdomain](../../cpp/appdomain.md), [/clr (Common Language Runtime Compilation)](../../build/reference/clr-common-language-runtime-compilation.md), and [Initialization of Mixed Assemblies](../../dotnet/initialization-of-mixed-assemblies.md).  \n  \n If you attempt to load an application compiled with **/openmp** and **/clr** into a non-default application domain, a <xref:System.TypeInitializationException> exception will be thrown outside the debugger and a OpenMPWithMultipleAppdomainsException exception will be thrown in the debugger.  \n  \n These exceptions can also be raised in the following situations:  \n  \n-   If your application compiled with **/clr**, but not with **/openmp**, is loaded into a non-default application domain but where the process includes an application that was compiled with **/openmp**.  \n  \n-   If you pass your **/clr** application to a utility, such as regasm.exe ([Regasm.exe (Assembly Registration Tool)](http://msdn.microsoft.com/Library/e190e342-36ef-4651-a0b4-0e8c2c0281cb)), which loads its target assemblies into a non-default application domain.  \n  \n The common language runtime's code access security doesnâ€™t work in OpenMP regions. If you apply a CLR code access security attribute outside a parallel region, it won't be in effect in the parallel region.  \n  \n Microsoft advises that you do not write **/openmp** applications that allows partially trusted callers, using <xref:System.Security.AllowPartiallyTrustedCallersAttribute>, or any CLR code access security attributes.  \n  \n### To set this compiler option in the Visual Studio development environment  \n  \n1.  Open the project's **Property Pages** dialog box. For details, see [Working with Project Properties](../../ide/working-with-project-properties.md).  \n  \n2.  Expand the **Configuration Properties** node.  \n  \n3.  Expand the **C/C++** node.  \n  \n4.  Select the **Language** property page.  \n  \n5.  Modify the **OpenMP Support** property.  \n  \n### To set this compiler option programmatically  \n  \n-   See <xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.OpenMP%2A>.  \n  \n## Example  \n The following sample shows some of the effects of threadpool startup versus using the threadpool after it started up. Assuming an x64, single core, dual processor the threadpool takes about 16ms to startup. After that though there is very little cost for the threadpool.  \n  \n When you compile with **/openmp**, the second call to test2 never runs any longer than if you compile with **/openmp-**, as there is no threadpool startup. At a million iterations the **/openmp** version is faster than the **/openmp-** version for the second call to test2, and at 25 iterations both **/openmp-** and **/openmp** versions register less than the clock granularity.  \n  \n So if you have only one loop in your application and it runs in less than 15ms (adjusted for the approximate overhead on your machine), **/openmp** may not be appropriate, but if it's anything more than that, you may want to consider using **/openmp**.  \n  \n```  \n// cpp_compiler_options_openmp.cpp  \n#include <omp.h>  \n#include <stdio.h>  \n#include <stdlib.h>  \n#include <windows.h>  \n  \nvolatile DWORD dwStart;  \nvolatile int global = 0;  \n  \ndouble test2(int num_steps) {  \n   int i;  \n   global++;  \n   double x, pi, sum = 0.0, step;  \n  \n   step = 1.0 / (double) num_steps;  \n  \n   #pragma omp parallel for reduction(+:sum) private(x)  \n   for (i = 1; i <= num_steps; i++) {  \n      x = (i - 0.5) * step;  \n      sum = sum + 4.0 / (1.0 + x*x);  \n   }  \n  \n   pi = step * sum;  \n   return pi;  \n}  \n  \nint main(int argc, char* argv[]) {  \n   double   d;  \n   int n = 1000000;  \n  \n   if (argc > 1)  \n      n = atoi(argv[1]);  \n  \n   dwStart = GetTickCount();  \n   d = test2(n);  \n   printf_s(\"For %d steps, pi = %.15f, %d milliseconds\\n\", n, d, GetTickCount() - dwStart);  \n  \n   dwStart = GetTickCount();  \n   d = test2(n);  \n   printf_s(\"For %d steps, pi = %.15f, %d milliseconds\\n\", n, d, GetTickCount() - dwStart);  \n}  \n```  \n  \n## See Also  \n [Compiler Options](../../build/reference/compiler-options.md)   \n [Setting Compiler Options](../../build/reference/setting-compiler-options.md)"}