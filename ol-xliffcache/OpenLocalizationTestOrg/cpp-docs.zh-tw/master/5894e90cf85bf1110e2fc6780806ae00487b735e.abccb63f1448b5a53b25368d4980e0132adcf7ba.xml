{"nodes":[{"pos":[12,53],"content":"Overview of C Statements | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Overview of C Statements | Microsoft Docs","pos":[0,41]}]},{"content":"Overview of C Statements","pos":[694,718]},{"content":"C statements consist of tokens, expressions, and other statements.","pos":[719,785]},{"content":"A statement that forms a component of another statement is called the \"body\" of the enclosing statement.","pos":[786,890]},{"content":"Each statement type given by the following syntax is discussed in this section.","pos":[891,970]},{"content":"Syntax","pos":[979,985]},{"content":"<bpt id=\"p1\">*</bpt>statement<ept id=\"p1\">*</ept>:","pos":[989,1001],"source":"*statement*:"},{"content":"labeled-statement","pos":[1006,1023]},{"content":"compound-statement","pos":[1080,1098]},{"content":"expression-statement","pos":[1146,1166]},{"content":"selection-statement","pos":[1216,1235]},{"content":"iteration-statement","pos":[1277,1296]},{"content":"jump-statement","pos":[1344,1358]},{"content":"try-except-statement","pos":[1403,1423]},{"pos":[1472,1585],"content":"/* Microsoft Specific <ph id=\"ph1\">\\*/</ph><bpt id=\"p1\">[</bpt>try-finally-statement<ept id=\"p1\">](../c-language/try-finally-statement-c.md)</ept><ph id=\"ph2\"> /\\*</ph> Microsoft Specific","source":"/* Microsoft Specific \\*/[try-finally-statement](../c-language/try-finally-statement-c.md) /\\* Microsoft Specific "},{"content":"Frequently the statement body is a \"compound statement.\"","pos":[1596,1652]},{"content":"A compound statement consists of other statements that can include keywords.","pos":[1653,1729]},{"content":"The compound statement is delimited by braces (<bpt id=\"p1\">**</bpt>{ }<ept id=\"p1\">**</ept>).","pos":[1730,1786],"source":" The compound statement is delimited by braces (**{ }**)."},{"content":"All other C statements end with a semicolon (<bpt id=\"p1\">**</bpt>;<ept id=\"p1\">**</ept>).","pos":[1787,1839],"source":" All other C statements end with a semicolon (**;**)."},{"content":"The semicolon is a statement terminator.","pos":[1840,1880]},{"content":"The expression statement contains a C expression that can contain the arithmetic or logical operators introduced in <bpt id=\"p1\">[</bpt>Expressions and Assignments<ept id=\"p1\">](../c-language/expressions-and-assignments.md)</ept>.","pos":[1887,2079],"source":"The expression statement contains a C expression that can contain the arithmetic or logical operators introduced in [Expressions and Assignments](../c-language/expressions-and-assignments.md)."},{"content":"The null statement is an empty statement.","pos":[2080,2121]},{"content":"Any C statement can begin with an identifying label consisting of a name and a colon.","pos":[2128,2213]},{"content":"Since only the <ph id=\"ph1\">`goto`</ph> statement recognizes statement labels, statement labels are discussed with <ph id=\"ph2\">`goto`</ph>.","pos":[2214,2318],"source":" Since only the `goto` statement recognizes statement labels, statement labels are discussed with `goto`."},{"content":"See <bpt id=\"p1\">[</bpt>The goto and Labeled Statements<ept id=\"p1\">](../c-language/goto-and-labeled-statements-c.md)</ept> for more information.","pos":[2319,2426],"source":" See [The goto and Labeled Statements](../c-language/goto-and-labeled-statements-c.md) for more information."},{"content":"See Also","pos":[2435,2443]},{"content":"Statements","pos":[2448,2458]}],"content":"---\ntitle: \"Overview of C Statements | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"semicolon, in C statements\"\n  - \"statements, C\"\n  - \"semicolon\"\n  - \"statements, about statements\"\n  - \"Visual C, statements\"\nms.assetid: 0d49837a-5399-4881-b60c-af5f4e9720de\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Overview of C Statements\nC statements consist of tokens, expressions, and other statements. A statement that forms a component of another statement is called the \"body\" of the enclosing statement. Each statement type given by the following syntax is discussed in this section.  \n  \n## Syntax  \n *statement*:  \n [labeled-statement](../c-language/goto-and-labeled-statements-c.md)  \n  \n [compound-statement](../c-language/compound-statement-c.md)  \n  \n [expression-statement](../c-language/expression-statement-c.md)  \n  \n [selection-statement](../c-language/if-statement-c.md)  \n  \n [iteration-statement](../c-language/do-while-statement-c.md)  \n  \n [jump-statement](../c-language/break-statement-c.md)  \n  \n [try-except-statement](../c-language/try-except-statement-c.md)  \n  \n /* Microsoft Specific \\*/[try-finally-statement](../c-language/try-finally-statement-c.md) /\\* Microsoft Specific \\*/  \n  \n Frequently the statement body is a \"compound statement.\" A compound statement consists of other statements that can include keywords. The compound statement is delimited by braces (**{ }**). All other C statements end with a semicolon (**;**). The semicolon is a statement terminator.  \n  \n The expression statement contains a C expression that can contain the arithmetic or logical operators introduced in [Expressions and Assignments](../c-language/expressions-and-assignments.md). The null statement is an empty statement.  \n  \n Any C statement can begin with an identifying label consisting of a name and a colon. Since only the `goto` statement recognizes statement labels, statement labels are discussed with `goto`. See [The goto and Labeled Statements](../c-language/goto-and-labeled-statements-c.md) for more information.  \n  \n## See Also  \n [Statements](../c-language/statements-c.md)"}