{"nodes":[{"pos":[12,48],"content":"Primary Expressions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Primary Expressions | Microsoft Docs","pos":[0,36]}]},{"content":"Primary Expressions","pos":[724,743]},{"content":"Primary expressions are the building blocks of more complex expressions.","pos":[744,816]},{"content":"They are literals, names, and names qualified by the scope-resolution operator (<ph id=\"ph1\">`::`</ph>).","pos":[817,903],"source":" They are literals, names, and names qualified by the scope-resolution operator (`::`)."},{"content":"A primary expression may have any of the following forms:","pos":[905,962]},{"content":"A <bpt id=\"p1\">*</bpt>literal<ept id=\"p1\">*</ept> is a constant primary expression.","pos":[1044,1089],"source":"A *literal* is a constant primary expression."},{"content":"Its type depends on the form of its specification.","pos":[1090,1140]},{"content":"See <bpt id=\"p1\">[</bpt>Literals<ept id=\"p1\">](../cpp/numeric-boolean-and-pointer-literals-cpp.md)</ept> for complete information about specifying literals.","pos":[1141,1259],"source":" See [Literals](../cpp/numeric-boolean-and-pointer-literals-cpp.md) for complete information about specifying literals."},{"content":"The <bpt id=\"p1\">**</bpt>this<ept id=\"p1\">**</ept> keyword is a pointer to a class object.","pos":[1266,1318],"source":"The **this** keyword is a pointer to a class object."},{"content":"It is available within nonstatic member functions and points to the instance of the class for which the function was invoked.","pos":[1319,1444]},{"content":"The <bpt id=\"p1\">**</bpt>this<ept id=\"p1\">**</ept> keyword cannot be used outside the body of a class-member function.","pos":[1445,1525],"source":" The **this** keyword cannot be used outside the body of a class-member function."},{"content":"The type of the <bpt id=\"p1\">**</bpt>this<ept id=\"p1\">**</ept> pointer is <ph id=\"ph1\">`type`</ph> <bpt id=\"p2\">**</bpt><ph id=\"ph2\">\\*</ph>const<ept id=\"p2\">**</ept> (where <ph id=\"ph3\">`type`</ph> is the class name) within functions not specifically modifying the <bpt id=\"p3\">**</bpt>this<ept id=\"p3\">**</ept> pointer.","pos":[1532,1685],"source":"The type of the **this** pointer is `type` **\\*const** (where `type` is the class name) within functions not specifically modifying the **this** pointer."},{"content":"The following example shows member function declarations and the types of <bpt id=\"p1\">**</bpt>this<ept id=\"p1\">**</ept>:","pos":[1686,1769],"source":" The following example shows member function declarations and the types of **this**:"},{"pos":[2034,2140],"content":"See <bpt id=\"p1\">[</bpt>this Pointer<ept id=\"p1\">](this-pointer.md)</ept> for more information about modifying the type of the <bpt id=\"p2\">**</bpt>this<ept id=\"p2\">**</ept> pointer.","source":"See [this Pointer](this-pointer.md) for more information about modifying the type of the **this** pointer."},{"content":"The scope-resolution operator (<ph id=\"ph1\">`::`</ph>) followed by a name constitutes a primary expression.","pos":[2147,2236],"source":"The scope-resolution operator (`::`) followed by a name constitutes a primary expression."},{"content":"Such names must be names at global scope, not member names.","pos":[2238,2297]},{"content":"The type of this expression is determined by the declaration of the name.","pos":[2299,2372]},{"content":"It is an l-value (that is, it can appear on the left hand side of an assignment operator expression) if the declaring name is an l-value.","pos":[2373,2510]},{"content":"The scope-resolution operator allows a global name to be referred to, even if that name is hidden in the current scope.","pos":[2511,2630]},{"content":"See <bpt id=\"p1\">[</bpt>Scope<ept id=\"p1\">](../cpp/scope-visual-cpp.md)</ept> for an example of how to use the scope-resolution operator.","pos":[2631,2730],"source":" See [Scope](../cpp/scope-visual-cpp.md) for an example of how to use the scope-resolution operator."},{"content":"An expression enclosed in parentheses is a primary expression whose type and value are identical to those of the unparenthesized expression.","pos":[2737,2877]},{"content":"It is an l-value if the unparenthesized expression is an l-value.","pos":[2878,2943]},{"content":"In the context of the primary expression syntax given above, <bpt id=\"p1\">*</bpt>name<ept id=\"p1\">*</ept> means anything in the syntax described for <bpt id=\"p2\">[</bpt>Names<ept id=\"p2\">](http://msdn.microsoft.com/en-us/1c49cc24-08d5-4884-b170-ba8ed42d80db)</ept>, although when using the scope-resolution operator before the name, types of names that can only occur in a class are not allowed.","pos":[2950,3269],"source":"In the context of the primary expression syntax given above, *name* means anything in the syntax described for [Names](http://msdn.microsoft.com/en-us/1c49cc24-08d5-4884-b170-ba8ed42d80db), although when using the scope-resolution operator before the name, types of names that can only occur in a class are not allowed."},{"content":"This includes user-defined conversion function names, and destructor names.","pos":[3271,3346]},{"content":"Examples of primary expressions include:","pos":[3353,3393]},{"pos":[3666,3761],"content":"The examples below are all considered <bpt id=\"p1\">*</bpt>names<ept id=\"p1\">*</ept>, and hence primary expressions, in various forms:","source":"The examples below are all considered *names*, and hence primary expressions, in various forms:"},{"content":"See Also","pos":[4029,4037]},{"content":"Types of Expressions","pos":[4042,4062]}],"content":"---\ntitle: \"Primary Expressions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"primary expressions\"\n  - \"expressions [C++], name\"\n  - \"expressions [C++], literal\"\n  - \"expressions [C++], primary\"\n  - \"expressions [C++], qualified names\"\nms.assetid: 8ef9a814-6058-4b93-9b6e-e8eb8350b1ca\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Primary Expressions\nPrimary expressions are the building blocks of more complex expressions. They are literals, names, and names qualified by the scope-resolution operator (`::`).  A primary expression may have any of the following forms:  \n  \n```  \n  \n      literal  \n      this  \n:: namename( expression )  \n```  \n  \n A *literal* is a constant primary expression. Its type depends on the form of its specification. See [Literals](../cpp/numeric-boolean-and-pointer-literals-cpp.md) for complete information about specifying literals.  \n  \n The **this** keyword is a pointer to a class object. It is available within nonstatic member functions and points to the instance of the class for which the function was invoked. The **this** keyword cannot be used outside the body of a class-member function.  \n  \n The type of the **this** pointer is `type` **\\*const** (where `type` is the class name) within functions not specifically modifying the **this** pointer. The following example shows member function declarations and the types of **this**:  \n  \n```  \n// expre_Primary_Expressions.cpp  \n// compile with: /LD  \nclass Example  \n{  \npublic:  \n    void Func();          //  * const this  \n    void Func() const;    //  const * const this  \n    void Func() volatile; //  volatile * const this  \n};  \n```  \n  \n See [this Pointer](this-pointer.md) for more information about modifying the type of the **this** pointer.  \n  \n The scope-resolution operator (`::`) followed by a name constitutes a primary expression.  Such names must be names at global scope, not member names.  The type of this expression is determined by the declaration of the name. It is an l-value (that is, it can appear on the left hand side of an assignment operator expression) if the declaring name is an l-value. The scope-resolution operator allows a global name to be referred to, even if that name is hidden in the current scope. See [Scope](../cpp/scope-visual-cpp.md) for an example of how to use the scope-resolution operator.  \n  \n An expression enclosed in parentheses is a primary expression whose type and value are identical to those of the unparenthesized expression. It is an l-value if the unparenthesized expression is an l-value.  \n  \n In the context of the primary expression syntax given above, *name* means anything in the syntax described for [Names](http://msdn.microsoft.com/en-us/1c49cc24-08d5-4884-b170-ba8ed42d80db), although when using the scope-resolution operator before the name, types of names that can only occur in a class are not allowed.  This includes user-defined conversion function names, and destructor names.  \n  \n Examples of primary expressions include:  \n  \n```  \n100 // literal  \n'c' // literal  \nthis // in a member function, a pointer to the class instance  \n::func // a global function  \n::operator + // a global operator function  \n::A::B // a global qualified name  \n( i + 1 ) // a parenthesized expression  \n```  \n  \n The examples below are all considered *names*, and hence primary expressions, in various forms:  \n  \n```  \nMyClass // a identifier  \nMyClass::f // a qualified name  \noperator = // an operator function name  \noperator char* // a conversion operator function name  \n~MyClass // a destructor name  \nA::B   // a qualified name  \nA<int> // a template id  \n```  \n  \n## See Also  \n [Types of Expressions](../cpp/types-of-expressions.md)"}