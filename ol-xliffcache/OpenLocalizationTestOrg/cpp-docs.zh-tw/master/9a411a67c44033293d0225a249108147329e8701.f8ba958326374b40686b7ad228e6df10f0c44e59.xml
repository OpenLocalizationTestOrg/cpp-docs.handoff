{"nodes":[{"pos":[12,46],"content":"unique_lock Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"unique_lock Class | Microsoft Docs","pos":[0,34]}]},{"content":"unique_lock Class","pos":[570,587]},{"pos":[588,704],"content":"Represents a template that can be instantiated to create objects that manage the locking and unlocking of a <ph id=\"ph1\">`mutex`</ph>.","source":"Represents a template that can be instantiated to create objects that manage the locking and unlocking of a `mutex`."},{"content":"Syntax","pos":[713,719]},{"content":"Remarks","pos":[783,790]},{"pos":[794,849],"content":"The template argument <ph id=\"ph1\">`Mutex`</ph> must name a <bpt id=\"p1\">*</bpt>mutex type<ept id=\"p1\">*</ept>.","source":"The template argument `Mutex` must name a *mutex type*."},{"pos":[856,1005],"content":"Internally, a <ph id=\"ph1\">`unique_lock`</ph> stores a pointer to an associated <ph id=\"ph2\">`mutex`</ph> object and a <ph id=\"ph3\">`bool`</ph> that indicates whether the current thread owns the <ph id=\"ph4\">`mutex`</ph>.","source":"Internally, a `unique_lock` stores a pointer to an associated `mutex` object and a `bool` that indicates whether the current thread owns the `mutex`."},{"content":"Members","pos":[1014,1021]},{"content":"Public Typedefs","pos":[1031,1046]},{"content":"Name","pos":[1053,1057]},{"content":"Description","pos":[1058,1069]},{"pos":[1120,1162],"content":"Synonym for the template argument <ph id=\"ph1\">`Mutex`</ph>.","source":"Synonym for the template argument `Mutex`."},{"content":"Public Constructors","pos":[1173,1192]},{"content":"Name","pos":[1199,1203]},{"content":"Description","pos":[1204,1215]},{"content":"unique_lock Constructor","pos":[1254,1277]},{"pos":[1318,1352],"content":"Constructs a <ph id=\"ph1\">`unique_lock`</ph> object.","source":"Constructs a `unique_lock` object."},{"content":"~unique_lock Destructor","pos":[1358,1381]},{"pos":[1426,1499],"content":"Releases any resources that are associated with the <ph id=\"ph1\">`unique_lock`</ph> object.","source":"Releases any resources that are associated with the `unique_lock` object."},{"content":"Public Methods","pos":[1510,1524]},{"content":"Name","pos":[1531,1535]},{"content":"Description","pos":[1536,1547]},{"content":"lock","pos":[1586,1590]},{"pos":[1619,1706],"content":"Blocks the calling thread until the thread obtains ownership of the associated <ph id=\"ph1\">`mutex`</ph>.","source":"Blocks the calling thread until the thread obtains ownership of the associated `mutex`."},{"content":"mutex","pos":[1712,1717]},{"pos":[1747,1802],"content":"Retrieves the stored pointer to the associated <ph id=\"ph1\">`mutex`</ph>.","source":"Retrieves the stored pointer to the associated `mutex`."},{"content":"owns_lock","pos":[1808,1817]},{"pos":[1851,1916],"content":"Specifies whether the calling thread owns the associated <ph id=\"ph1\">`mutex`</ph>.","source":"Specifies whether the calling thread owns the associated `mutex`."},{"content":"release","pos":[1922,1929]},{"pos":[1961,2035],"content":"Disassociates the <ph id=\"ph1\">`unique_lock`</ph> object from the associated <ph id=\"ph2\">`mutex`</ph> object.","source":"Disassociates the `unique_lock` object from the associated `mutex` object."},{"content":"swap","pos":[2041,2045]},{"pos":[2074,2156],"content":"Swaps the associated <ph id=\"ph1\">`mutex`</ph> and ownership status with that of a specified object.","source":"Swaps the associated `mutex` and ownership status with that of a specified object."},{"content":"try_lock","pos":[2162,2170]},{"pos":[2203,2275],"content":"Attempts to obtain ownership of the associated <ph id=\"ph1\">`mutex`</ph> without blocking.","source":"Attempts to obtain ownership of the associated `mutex` without blocking."},{"content":"try_lock_for","pos":[2281,2293]},{"pos":[2330,2402],"content":"Attempts to obtain ownership of the associated <ph id=\"ph1\">`mutex`</ph> without blocking.","source":"Attempts to obtain ownership of the associated `mutex` without blocking."},{"content":"try_lock_until","pos":[2408,2422]},{"pos":[2461,2533],"content":"Attempts to obtain ownership of the associated <ph id=\"ph1\">`mutex`</ph> without blocking.","source":"Attempts to obtain ownership of the associated `mutex` without blocking."},{"content":"unlock","pos":[2539,2545]},{"pos":[2576,2621],"content":"Releases ownership of the associated <ph id=\"ph1\">`mutex`</ph>.","source":"Releases ownership of the associated `mutex`."},{"content":"Public Operators","pos":[2632,2648]},{"content":"Name","pos":[2655,2659]},{"content":"Description","pos":[2660,2671]},{"content":"operator bool","pos":[2710,2723]},{"pos":[2754,2831],"content":"Specifies whether the calling thread has ownership of the associated <ph id=\"ph1\">`mutex`</ph>.","source":"Specifies whether the calling thread has ownership of the associated `mutex`."},{"content":"operator=","pos":[2837,2846]},{"pos":[2875,2965],"content":"Copies the stored <ph id=\"ph1\">`mutex`</ph> pointer and associated ownership status from a specified object.","source":"Copies the stored `mutex` pointer and associated ownership status from a specified object."},{"content":"Inheritance Hierarchy","pos":[2975,2996]},{"content":"Requirements","pos":[3022,3034]},{"pos":[3038,3055],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> mutex","source":"**Header:** mutex"},{"pos":[3062,3080],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[3131,3135],"content":"lock"},{"pos":[3139,3226],"content":"Blocks the calling thread until the thread obtains ownership of the associated <ph id=\"ph1\">`mutex`</ph>.","source":"Blocks the calling thread until the thread obtains ownership of the associated `mutex`."},{"content":"Remarks","pos":[3265,3272]},{"pos":[3276,3448],"content":"If the stored <ph id=\"ph1\">`mutex`</ph> pointer is <ph id=\"ph2\">`null`</ph>, this method throws a <bpt id=\"p1\">[</bpt>system_error<ept id=\"p1\">](../standard-library/system-error-class.md)</ept> that has an error code of <ph id=\"ph3\">`operation_not_permitted`</ph>.","source":"If the stored `mutex` pointer is `null`, this method throws a [system_error](../standard-library/system-error-class.md) that has an error code of `operation_not_permitted`."},{"pos":[3455,3608],"content":"If the calling thread already owns the associated <ph id=\"ph1\">`mutex`</ph>, this method throws a <ph id=\"ph2\">`system_error`</ph> that has an error code of <ph id=\"ph3\">`resource_deadlock_would_occur`</ph>.","source":"If the calling thread already owns the associated `mutex`, this method throws a `system_error` that has an error code of `resource_deadlock_would_occur`."},{"pos":[3615,3731],"content":"Otherwise, this method calls <ph id=\"ph1\">`lock`</ph> on the associated <ph id=\"ph2\">`mutex`</ph> and sets the internal thread ownership flag to <ph id=\"ph3\">`true`</ph>.","source":"Otherwise, this method calls `lock` on the associated `mutex` and sets the internal thread ownership flag to `true`."},{"pos":[3783,3788],"content":"mutex"},{"pos":[3792,3847],"content":"Retrieves the stored pointer to the associated <ph id=\"ph1\">`mutex`</ph>.","source":"Retrieves the stored pointer to the associated `mutex`."},{"pos":[3952,3965],"content":"operator bool"},{"content":"Specifies whether the calling thread has ownership of the associated mutex.","pos":[3969,4044]},{"content":"Return Value","pos":[4104,4116]},{"pos":[4127,4175],"content":"if the thread owns the mutex; otherwise <ph id=\"ph1\">`false`</ph>.","source":" if the thread owns the mutex; otherwise `false`."},{"pos":[4226,4235],"content":"operator="},{"pos":[4239,4329],"content":"Copies the stored <ph id=\"ph1\">`mutex`</ph> pointer and associated ownership status from a specified object.","source":"Copies the stored `mutex` pointer and associated ownership status from a specified object."},{"content":"Parameters","pos":[4409,4419]},{"content":"A <ph id=\"ph1\">`unique_lock`</ph> object.","pos":[4434,4457],"source":" A `unique_lock` object."},{"content":"Return Value","pos":[4467,4479]},{"content":"Remarks","pos":[4500,4507]},{"pos":[4511,4649],"content":"If the calling thread owns the previously associated <ph id=\"ph1\">`mutex`</ph>, before this method calls <ph id=\"ph2\">`unlock`</ph> on the <ph id=\"ph3\">`mutex`</ph>, it assigns the new values.","source":"If the calling thread owns the previously associated `mutex`, before this method calls `unlock` on the `mutex`, it assigns the new values."},{"pos":[4656,4728],"content":"After the copy, this method sets <ph id=\"ph1\">`Other`</ph> to a default-constructed state.","source":"After the copy, this method sets `Other` to a default-constructed state."},{"pos":[4784,4793],"content":"owns_lock"},{"pos":[4797,4862],"content":"Specifies whether the calling thread owns the associated <ph id=\"ph1\">`mutex`</ph>.","source":"Specifies whether the calling thread owns the associated `mutex`."},{"content":"Return Value","pos":[4921,4933]},{"pos":[4944,4995],"content":"if the thread owns the <ph id=\"ph1\">`mutex`</ph>; otherwise, <ph id=\"ph2\">`false`</ph>.","source":" if the thread owns the `mutex`; otherwise, `false`."},{"pos":[5049,5056],"content":"release"},{"pos":[5060,5134],"content":"Disassociates the <ph id=\"ph1\">`unique_lock`</ph> object from the associated <ph id=\"ph2\">`mutex`</ph> object.","source":"Disassociates the `unique_lock` object from the associated `mutex` object."},{"content":"Return Value","pos":[5192,5204]},{"pos":[5208,5257],"content":"The previous value of the stored <ph id=\"ph1\">`mutex`</ph> pointer.","source":"The previous value of the stored `mutex` pointer."},{"content":"Remarks","pos":[5267,5274]},{"pos":[5278,5396],"content":"This method sets the value of the stored <ph id=\"ph1\">`mutex`</ph> pointer to 0 and sets the internal <ph id=\"ph2\">`mutex`</ph> ownership flag to <ph id=\"ph3\">`false`</ph>.","source":"This method sets the value of the stored `mutex` pointer to 0 and sets the internal `mutex` ownership flag to `false`."},{"pos":[5447,5451],"content":"swap"},{"pos":[5455,5537],"content":"Swaps the associated <ph id=\"ph1\">`mutex`</ph> and ownership status with that of a specified object.","source":"Swaps the associated `mutex` and ownership status with that of a specified object."},{"content":"Parameters","pos":[5600,5610]},{"content":"A <ph id=\"ph1\">`unique_lock`</ph> object.","pos":[5625,5648],"source":" A `unique_lock` object."},{"pos":[5703,5711],"content":"try_lock"},{"pos":[5715,5787],"content":"Attempts to obtain ownership of the associated <ph id=\"ph1\">`mutex`</ph> without blocking.","source":"Attempts to obtain ownership of the associated `mutex` without blocking."},{"content":"Return Value","pos":[5839,5851]},{"pos":[5862,5942],"content":"if the method successfully obtains ownership of the <ph id=\"ph1\">`mutex`</ph>; otherwise, <ph id=\"ph2\">`false`</ph>.","source":" if the method successfully obtains ownership of the `mutex`; otherwise, `false`."},{"content":"Remarks","pos":[5952,5959]},{"pos":[5963,6134],"content":"If the stored <ph id=\"ph1\">`mutex`</ph> pointer is <ph id=\"ph2\">`null`</ph>, the method throws a <bpt id=\"p1\">[</bpt>system_error<ept id=\"p1\">](../standard-library/system-error-class.md)</ept> that has an error code of <ph id=\"ph3\">`operation_not_permitted`</ph>.","source":"If the stored `mutex` pointer is `null`, the method throws a [system_error](../standard-library/system-error-class.md) that has an error code of `operation_not_permitted`."},{"pos":[6141,6282],"content":"If the calling thread already owns the <ph id=\"ph1\">`mutex`</ph>, the method throws a <ph id=\"ph2\">`system_error`</ph> that has an error code of <ph id=\"ph3\">`resource_deadlock_would_occur`</ph>.","source":"If the calling thread already owns the `mutex`, the method throws a `system_error` that has an error code of `resource_deadlock_would_occur`."},{"pos":[6341,6353],"content":"try_lock_for"},{"pos":[6357,6429],"content":"Attempts to obtain ownership of the associated <ph id=\"ph1\">`mutex`</ph> without blocking.","source":"Attempts to obtain ownership of the associated `mutex` without blocking."},{"content":"Parameters","pos":[6558,6568]},{"content":"A <bpt id=\"p1\">[</bpt>chrono::duration<ept id=\"p1\">](../standard-library/duration-class.md)</ept> object that specifies the maximum amount of time that the method attempts to obtain ownership of the <ph id=\"ph1\">`mutex`</ph>.","pos":[6586,6755],"source":" A [chrono::duration](../standard-library/duration-class.md) object that specifies the maximum amount of time that the method attempts to obtain ownership of the `mutex`."},{"content":"Return Value","pos":[6765,6777]},{"pos":[6788,6868],"content":"if the method successfully obtains ownership of the <ph id=\"ph1\">`mutex`</ph>; otherwise, <ph id=\"ph2\">`false`</ph>.","source":" if the method successfully obtains ownership of the `mutex`; otherwise, `false`."},{"content":"Remarks","pos":[6878,6885]},{"pos":[6889,7060],"content":"If the stored <ph id=\"ph1\">`mutex`</ph> pointer is <ph id=\"ph2\">`null`</ph>, the method throws a <bpt id=\"p1\">[</bpt>system_error<ept id=\"p1\">](../standard-library/system-error-class.md)</ept> that has an error code of <ph id=\"ph3\">`operation_not_permitted`</ph>.","source":"If the stored `mutex` pointer is `null`, the method throws a [system_error](../standard-library/system-error-class.md) that has an error code of `operation_not_permitted`."},{"pos":[7067,7208],"content":"If the calling thread already owns the <ph id=\"ph1\">`mutex`</ph>, the method throws a <ph id=\"ph2\">`system_error`</ph> that has an error code of <ph id=\"ph3\">`resource_deadlock_would_occur`</ph>.","source":"If the calling thread already owns the `mutex`, the method throws a `system_error` that has an error code of `resource_deadlock_would_occur`."},{"pos":[7269,7283],"content":"try_lock_until"},{"pos":[7287,7359],"content":"Attempts to obtain ownership of the associated <ph id=\"ph1\">`mutex`</ph> without blocking.","source":"Attempts to obtain ownership of the associated `mutex` without blocking."},{"content":"Parameters","pos":[7543,7553]},{"content":"A point in time that specifies the threshold after which the method no longer attempts to obtain ownership of the <ph id=\"ph1\">`mutex`</ph>.","pos":[7571,7693],"source":" A point in time that specifies the threshold after which the method no longer attempts to obtain ownership of the `mutex`."},{"content":"Return Value","pos":[7703,7715]},{"pos":[7726,7806],"content":"if the method successfully obtains ownership of the <ph id=\"ph1\">`mutex`</ph>; otherwise, <ph id=\"ph2\">`false`</ph>.","source":" if the method successfully obtains ownership of the `mutex`; otherwise, `false`."},{"content":"Remarks","pos":[7816,7823]},{"pos":[7827,7998],"content":"If the stored <ph id=\"ph1\">`mutex`</ph> pointer is <ph id=\"ph2\">`null`</ph>, the method throws a <bpt id=\"p1\">[</bpt>system_error<ept id=\"p1\">](../standard-library/system-error-class.md)</ept> that has an error code of <ph id=\"ph3\">`operation_not_permitted`</ph>.","source":"If the stored `mutex` pointer is `null`, the method throws a [system_error](../standard-library/system-error-class.md) that has an error code of `operation_not_permitted`."},{"pos":[8005,8146],"content":"If the calling thread already owns the <ph id=\"ph1\">`mutex`</ph>, the method throws a <ph id=\"ph2\">`system_error`</ph> that has an error code of <ph id=\"ph3\">`resource_deadlock_would_occur`</ph>.","source":"If the calling thread already owns the `mutex`, the method throws a `system_error` that has an error code of `resource_deadlock_would_occur`."},{"pos":[8209,8232],"content":"unique_lock Constructor"},{"pos":[8236,8270],"content":"Constructs a <ph id=\"ph1\">`unique_lock`</ph> object.","source":"Constructs a `unique_lock` object."},{"content":"Parameters","pos":[8875,8885]},{"content":"A mutex type object.","pos":[8898,8918]},{"content":"A <bpt id=\"p1\">[</bpt>chrono::duration<ept id=\"p1\">](../standard-library/duration-class.md)</ept> object that specifies the maximum amount of time that the method attempts to obtain ownership of the <ph id=\"ph1\">`mutex`</ph>.","pos":[8939,9108],"source":" A [chrono::duration](../standard-library/duration-class.md) object that specifies the maximum amount of time that the method attempts to obtain ownership of the `mutex`."},{"content":"A point in time that specifies the threshold after which the method no longer attempts to obtain ownership of the <ph id=\"ph1\">`mutex`</ph>.","pos":[9129,9251],"source":" A point in time that specifies the threshold after which the method no longer attempts to obtain ownership of the `mutex`."},{"content":"A <ph id=\"ph1\">`unique_lock`</ph> object.","pos":[9269,9292],"source":" A `unique_lock` object."},{"content":"Remarks","pos":[9302,9309]},{"content":"The first constructor constructs an object that has an associated mutex pointer value of 0.","pos":[9313,9404]},{"content":"The second constructor moves the associated mutex status from <ph id=\"ph1\">`Other`</ph>.","pos":[9411,9481],"source":"The second constructor moves the associated mutex status from `Other`."},{"content":"After the move, <ph id=\"ph1\">`Other`</ph> is no longer associated with a mutex.","pos":[9482,9543],"source":" After the move, `Other` is no longer associated with a mutex."},{"content":"The remaining constructors store &amp; <ph id=\"ph1\">`Mtx`</ph> as the stored <ph id=\"ph2\">`mutex`</ph> pointer.","pos":[9550,9621],"source":"The remaining constructors store & `Mtx` as the stored `mutex` pointer."},{"content":"Ownership of the <ph id=\"ph1\">`mutex`</ph> is determined by the second argument, if it exists.","pos":[9622,9698],"source":" Ownership of the `mutex` is determined by the second argument, if it exists."},{"pos":[9733,9817],"content":"Ownership is obtained by calling the <ph id=\"ph1\">`lock`</ph> method on the associated <ph id=\"ph2\">`mutex`</ph> object.","source":"Ownership is obtained by calling the `lock` method on the associated `mutex` object."},{"content":"Ownership is assumed.","pos":[9830,9851]},{"content":"must be locked when the constructor is called.","pos":[9858,9904]},{"content":"The calling thread is assumed not to own the <ph id=\"ph1\">`mutex`</ph> object.","pos":[9917,9977],"source":"The calling thread is assumed not to own the `mutex` object."},{"content":"must not be locked when the constructor is called.","pos":[9984,10034]},{"content":"Ownership is determined by calling <ph id=\"ph1\">`try_lock`</ph> on the associated <ph id=\"ph2\">`mutex`</ph> object.","pos":[10045,10124],"source":"Ownership is determined by calling `try_lock` on the associated `mutex` object."},{"content":"The constructor throws nothing.","pos":[10125,10156]},{"pos":[10172,10232],"content":"Ownership is determined by calling <ph id=\"ph1\">`try_lock_for(Rel_time)`</ph>.","source":"Ownership is determined by calling `try_lock_for(Rel_time)`."},{"pos":[10248,10310],"content":"Ownership is determined by calling <ph id=\"ph1\">`try_lock_until(Abs_time)`</ph>.","source":"Ownership is determined by calling `try_lock_until(Abs_time)`."},{"pos":[10378,10401],"content":"~unique_lock Destructor"},{"pos":[10405,10478],"content":"Releases any resources that are associated with the <ph id=\"ph1\">`unique_lock`</ph> object.","source":"Releases any resources that are associated with the `unique_lock` object."},{"content":"Remarks","pos":[10529,10536]},{"pos":[10540,10665],"content":"If the calling thread owns the associated <ph id=\"ph1\">`mutex`</ph>, the destructor releases ownership by calling unlock on the <ph id=\"ph2\">`mutex`</ph> object.","source":"If the calling thread owns the associated `mutex`, the destructor releases ownership by calling unlock on the `mutex` object."},{"pos":[10718,10724],"content":"unlock"},{"pos":[10728,10773],"content":"Releases ownership of the associated <ph id=\"ph1\">`mutex`</ph>.","source":"Releases ownership of the associated `mutex`."},{"content":"Remarks","pos":[10814,10821]},{"pos":[10825,11014],"content":"If the calling thread doesn't own the associated <ph id=\"ph1\">`mutex`</ph>, this method throws a <bpt id=\"p1\">[</bpt>system_error<ept id=\"p1\">](../standard-library/system-error-class.md)</ept> that has an error code of <ph id=\"ph2\">`operation_not_permitted`</ph>.","source":"If the calling thread doesn't own the associated `mutex`, this method throws a [system_error](../standard-library/system-error-class.md) that has an error code of `operation_not_permitted`."},{"pos":[11021,11140],"content":"Otherwise, this method calls <ph id=\"ph1\">`unlock`</ph> on the associated <ph id=\"ph2\">`mutex`</ph> and sets the internal thread ownership flag to <ph id=\"ph3\">`false`</ph>.","source":"Otherwise, this method calls `unlock` on the associated `mutex` and sets the internal thread ownership flag to `false`."},{"content":"See Also","pos":[11149,11157]},{"content":"Header Files Reference","pos":[11162,11184]},{"content":"mutex&gt;","pos":[11251,11257],"source":"mutex>"}],"content":"---\ntitle: \"unique_lock Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"mutex/std::unique_lock\"\ndev_langs: \n  - \"C++\"\nms.assetid: f4ed8ba9-c8af-446f-8ef0-0b356bad14bd\ncaps.latest.revision: 10\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# unique_lock Class\nRepresents a template that can be instantiated to create objects that manage the locking and unlocking of a `mutex`.  \n  \n## Syntax  \n  \n```\ntemplate <class Mutex>\nclass unique_lock;\n```  \n  \n## Remarks  \n The template argument `Mutex` must name a *mutex type*.  \n  \n Internally, a `unique_lock` stores a pointer to an associated `mutex` object and a `bool` that indicates whether the current thread owns the `mutex`.  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`mutex_type`|Synonym for the template argument `Mutex`.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[unique_lock Constructor](#unique_lock__unique_lock_constructor)|Constructs a `unique_lock` object.|  \n|[~unique_lock Destructor](#unique_lock___dtorunique_lock_destructor)|Releases any resources that are associated with the `unique_lock` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[lock](#unique_lock__lock_method)|Blocks the calling thread until the thread obtains ownership of the associated `mutex`.|  \n|[mutex](#unique_lock__mutex_method)|Retrieves the stored pointer to the associated `mutex`.|  \n|[owns_lock](#unique_lock__owns_lock_method)|Specifies whether the calling thread owns the associated `mutex`.|  \n|[release](#unique_lock__release_method)|Disassociates the `unique_lock` object from the associated `mutex` object.|  \n|[swap](#unique_lock__swap_method)|Swaps the associated `mutex` and ownership status with that of a specified object.|  \n|[try_lock](#unique_lock__try_lock_method)|Attempts to obtain ownership of the associated `mutex` without blocking.|  \n|[try_lock_for](#unique_lock__try_lock_for_method)|Attempts to obtain ownership of the associated `mutex` without blocking.|  \n|[try_lock_until](#unique_lock__try_lock_until_method)|Attempts to obtain ownership of the associated `mutex` without blocking.|  \n|[unlock](#unique_lock__unlock_method)|Releases ownership of the associated `mutex`.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[operator bool](#unique_lock__operator_bool)|Specifies whether the calling thread has ownership of the associated `mutex`.|  \n|[operator=](#unique_lock__operator_eq)|Copies the stored `mutex` pointer and associated ownership status from a specified object.|  \n  \n## Inheritance Hierarchy  \n `unique_lock`  \n  \n## Requirements  \n **Header:** mutex  \n  \n **Namespace:** std  \n  \n##  <a name=\"unique_lock__lock_method\"></a>  lock  \n Blocks the calling thread until the thread obtains ownership of the associated `mutex`.  \n  \n```cpp\nvoid lock();\n```  \n  \n### Remarks  \n If the stored `mutex` pointer is `null`, this method throws a [system_error](../standard-library/system-error-class.md) that has an error code of `operation_not_permitted`.  \n  \n If the calling thread already owns the associated `mutex`, this method throws a `system_error` that has an error code of `resource_deadlock_would_occur`.  \n  \n Otherwise, this method calls `lock` on the associated `mutex` and sets the internal thread ownership flag to `true`.  \n  \n##  <a name=\"unique_lock__mutex_method\"></a>  mutex  \n Retrieves the stored pointer to the associated `mutex`.  \n  \n```cpp\nmutex_type *mutex() const noexcept;\n```  \n  \n##  <a name=\"unique_lock__operator_bool\"></a>  operator bool  \n Specifies whether the calling thread has ownership of the associated mutex.  \n  \n```cpp\nexplicit operator bool() noexcept\n```  \n  \n### Return Value  \n `true` if the thread owns the mutex; otherwise `false`.  \n  \n##  <a name=\"unique_lock__operator_eq\"></a>  operator=  \n Copies the stored `mutex` pointer and associated ownership status from a specified object.  \n  \n```cpp\nunique_lock& operator=(unique_lock&& Other) noexcept;\n```  \n  \n### Parameters  \n `Other`  \n A `unique_lock` object.  \n  \n### Return Value  \n `*this`  \n  \n### Remarks  \n If the calling thread owns the previously associated `mutex`, before this method calls `unlock` on the `mutex`, it assigns the new values.  \n  \n After the copy, this method sets `Other` to a default-constructed state.  \n  \n##  <a name=\"unique_lock__owns_lock_method\"></a>  owns_lock  \n Specifies whether the calling thread owns the associated `mutex`.  \n  \n```cpp\nbool owns_lock() const noexcept;\n```  \n  \n### Return Value  \n `true` if the thread owns the `mutex`; otherwise, `false`.  \n  \n##  <a name=\"unique_lock__release_method\"></a>  release  \n Disassociates the `unique_lock` object from the associated `mutex` object.  \n  \n```cpp\nmutex_type *release() noexcept;\n```  \n  \n### Return Value  \n The previous value of the stored `mutex` pointer.  \n  \n### Remarks  \n This method sets the value of the stored `mutex` pointer to 0 and sets the internal `mutex` ownership flag to `false`.  \n  \n##  <a name=\"unique_lock__swap_method\"></a>  swap  \n Swaps the associated `mutex` and ownership status with that of a specified object.  \n  \n```\nvoid swap(unique_lock& Other) noexcept;\n```  \n  \n### Parameters  \n `Other`  \n A `unique_lock` object.  \n  \n##  <a name=\"unique_lock__try_lock_method\"></a>  try_lock  \n Attempts to obtain ownership of the associated `mutex` without blocking.  \n  \n```cpp\nbool try_lock() noexcept;\n```  \n  \n### Return Value  \n `true` if the method successfully obtains ownership of the `mutex`; otherwise, `false`.  \n  \n### Remarks  \n If the stored `mutex` pointer is `null`, the method throws a [system_error](../standard-library/system-error-class.md) that has an error code of `operation_not_permitted`.  \n  \n If the calling thread already owns the `mutex`, the method throws a `system_error` that has an error code of `resource_deadlock_would_occur`.  \n  \n##  <a name=\"unique_lock__try_lock_for_method\"></a>  try_lock_for  \n Attempts to obtain ownership of the associated `mutex` without blocking.  \n  \n```\ntemplate <class Rep, class Period>\nbool try_lock_for(\n    const chrono::duration<Rep, Period>& Rel_time);\n```  \n  \n### Parameters  \n `Rel_time`  \n A [chrono::duration](../standard-library/duration-class.md) object that specifies the maximum amount of time that the method attempts to obtain ownership of the `mutex`.  \n  \n### Return Value  \n `true` if the method successfully obtains ownership of the `mutex`; otherwise, `false`.  \n  \n### Remarks  \n If the stored `mutex` pointer is `null`, the method throws a [system_error](../standard-library/system-error-class.md) that has an error code of `operation_not_permitted`.  \n  \n If the calling thread already owns the `mutex`, the method throws a `system_error` that has an error code of `resource_deadlock_would_occur`.  \n  \n##  <a name=\"unique_lock__try_lock_until_method\"></a>  try_lock_until  \n Attempts to obtain ownership of the associated `mutex` without blocking.  \n  \n```cpp\ntemplate <class Clock, class Duration>\nbool try_lock_until(const chrono::time_point<Clock, Duration>& Abs_time);\n\nbool try_lock_until(const xtime* Abs_time);\n```  \n  \n### Parameters  \n `Abs_time`  \n A point in time that specifies the threshold after which the method no longer attempts to obtain ownership of the `mutex`.  \n  \n### Return Value  \n `true` if the method successfully obtains ownership of the `mutex`; otherwise, `false`.  \n  \n### Remarks  \n If the stored `mutex` pointer is `null`, the method throws a [system_error](../standard-library/system-error-class.md) that has an error code of `operation_not_permitted`.  \n  \n If the calling thread already owns the `mutex`, the method throws a `system_error` that has an error code of `resource_deadlock_would_occur`.  \n  \n##  <a name=\"unique_lock__unique_lock_constructor\"></a>  unique_lock Constructor  \n Constructs a `unique_lock` object.  \n  \n```cpp\nunique_lock() noexcept;\nunique_lock(unique_lock&& Other) noexcept;\nexplicit unique_lock(mutex_type& Mtx);\n\nunique_lock(mutex_type& Mtx, adopt_lock_t Adopt);\n\nunique_lock(mutex_type& Mtx, defer_lock_t Defer) noexcept;\nunique_lock(mutex_type& Mtx, try_to_lock_t Try);\n\ntemplate <class Rep, class Period>\nunique_lock(mutex_type& Mtx,\n    const chrono::duration<Rep, Period>  \nRel_time);\n\ntemplate <class Clock, class Duration>\nunique_lock(mutex_type& Mtx,\n    const chrono::time_point<Clock, Duration>  \nAbs_time);\n\nunique_lock(mutex_type& Mtx,\n    const xtime* Abs_time) noexcept;\n```  \n  \n### Parameters  \n `Mtx`  \n A mutex type object.  \n  \n `Rel_time`  \n A [chrono::duration](../standard-library/duration-class.md) object that specifies the maximum amount of time that the method attempts to obtain ownership of the `mutex`.  \n  \n `Abs_time`  \n A point in time that specifies the threshold after which the method no longer attempts to obtain ownership of the `mutex`.  \n  \n `Other`  \n A `unique_lock` object.  \n  \n### Remarks  \n The first constructor constructs an object that has an associated mutex pointer value of 0.  \n  \n The second constructor moves the associated mutex status from `Other`. After the move, `Other` is no longer associated with a mutex.  \n  \n The remaining constructors store & `Mtx` as the stored `mutex` pointer. Ownership of the `mutex` is determined by the second argument, if it exists.  \n  \n|||  \n|-|-|  \n|`No argument`|Ownership is obtained by calling the `lock` method on the associated `mutex` object.|  \n|`Adopt`|Ownership is assumed. `Mtx` must be locked when the constructor is called.|  \n|`Defer`|The calling thread is assumed not to own the `mutex` object. `Mtx` must not be locked when the constructor is called.|  \n|`Try`|Ownership is determined by calling `try_lock` on the associated `mutex` object. The constructor throws nothing.|  \n|`Rel_time`|Ownership is determined by calling `try_lock_for(Rel_time)`.|  \n|`Abs_time`|Ownership is determined by calling `try_lock_until(Abs_time)`.|  \n  \n##  <a name=\"unique_lock___dtorunique_lock_destructor\"></a>  ~unique_lock Destructor  \n Releases any resources that are associated with the `unique_lock` object.  \n  \n```cpp\n~unique_lock() noexcept;\n```  \n  \n### Remarks  \n If the calling thread owns the associated `mutex`, the destructor releases ownership by calling unlock on the `mutex` object.  \n  \n##  <a name=\"unique_lock__unlock_method\"></a>  unlock  \n Releases ownership of the associated `mutex`.  \n  \n```cpp\nvoid unlock();\n```  \n  \n### Remarks  \n If the calling thread doesn't own the associated `mutex`, this method throws a [system_error](../standard-library/system-error-class.md) that has an error code of `operation_not_permitted`.  \n  \n Otherwise, this method calls `unlock` on the associated `mutex` and sets the internal thread ownership flag to `false`.  \n  \n## See Also  \n [Header Files Reference](../standard-library/cpp-standard-library-header-files.md)   \n [\\<mutex>](../standard-library/mutex.md)\n\n\n\n"}