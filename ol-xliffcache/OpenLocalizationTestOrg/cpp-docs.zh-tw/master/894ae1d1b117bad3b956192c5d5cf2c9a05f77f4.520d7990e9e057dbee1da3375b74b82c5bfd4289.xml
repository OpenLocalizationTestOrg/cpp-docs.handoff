{"nodes":[{"pos":[12,38],"content":"const_seg | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"const_seg | Microsoft Docs","pos":[0,26]}]},{"content":"const_seg","pos":[657,666]},{"pos":[667,762],"content":"Specifies the segment where <bpt id=\"p1\">[</bpt>const<ept id=\"p1\">](../cpp/const-cpp.md)</ept> variables are stored in the .obj file.","source":"Specifies the segment where [const](../cpp/const-cpp.md) variables are stored in the .obj file."},{"content":"Syntax","pos":[771,777]},{"content":"Remarks","pos":[902,909]},{"pos":[913,996],"content":"The meaning of the terms <bpt id=\"p1\">*</bpt>segment<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>section<ept id=\"p2\">*</ept> are interchangeable in this topic.","source":"The meaning of the terms *segment* and *section* are interchangeable in this topic."},{"content":"OBJ files can be viewed with the <bpt id=\"p1\">[</bpt>dumpbin<ept id=\"p1\">](../build/reference/dumpbin-command-line.md)</ept> application.","pos":[1003,1102],"source":"OBJ files can be viewed with the [dumpbin](../build/reference/dumpbin-command-line.md) application."},{"content":"The default segment in the .obj file for <ph id=\"ph1\">`const`</ph> variables is .rdata.","pos":[1103,1172],"source":" The default segment in the .obj file for `const` variables is .rdata."},{"content":"Some <ph id=\"ph1\">`const`</ph> variables, such as scalars, are automatically inlined into the code stream.","pos":[1173,1261],"source":" Some `const` variables, such as scalars, are automatically inlined into the code stream."},{"content":"Inlined code will not appear in .rdata.","pos":[1262,1301]},{"pos":[1308,1407],"content":"Defining an object requiring dynamic initialization in a <ph id=\"ph1\">`const_seg`</ph> results in undefined behavior.","source":"Defining an object requiring dynamic initialization in a `const_seg` results in undefined behavior."},{"pos":[1434,1482],"content":"with no parameters resets the segment to .rdata."},{"content":"(optional)","pos":[1496,1506]},{"content":"Puts a record on the internal compiler stack.","pos":[1510,1555]},{"content":"A <ph id=\"ph1\">`push`</ph> can have an <ph id=\"ph2\">`identifier`</ph> and <ph id=\"ph3\">`segment-name`</ph>.","pos":[1556,1609],"source":" A `push` can have an `identifier` and `segment-name`."},{"content":"(optional)","pos":[1622,1632]},{"content":"Removes a record from the top of the internal compiler stack.","pos":[1636,1697]},{"content":"(optional)","pos":[1717,1727]},{"content":"When used with <ph id=\"ph1\">`push`</ph>, assigns a name to the record on the internal compiler stack.","pos":[1731,1814],"source":" When used with `push`, assigns a name to the record on the internal compiler stack."},{"content":"When used with <ph id=\"ph1\">`pop`</ph>, pops records off the internal stack until <ph id=\"ph2\">`identifier`</ph> is removed; if <ph id=\"ph3\">`identifier`</ph> is not found on the internal stack, nothing is popped.","pos":[1815,1974],"source":" When used with `pop`, pops records off the internal stack until `identifier` is removed; if `identifier` is not found on the internal stack, nothing is popped."},{"pos":[1981,2066],"content":"Using <ph id=\"ph1\">`identifier`</ph> enables multiple records to be popped with a single <ph id=\"ph2\">`pop`</ph> command.","source":"Using `identifier` enables multiple records to be popped with a single `pop` command."},{"content":"\"<ph id=\"ph1\">`segment-name`</ph>\" (optional)","pos":[2073,2100],"source":"\"`segment-name`\" (optional)"},{"content":"The name of a segment.","pos":[2104,2126]},{"content":"When used with <ph id=\"ph1\">`pop`</ph>, the stack is popped and <ph id=\"ph2\">`segment-name`</ph> becomes the active segment name.","pos":[2127,2220],"source":" When used with `pop`, the stack is popped and `segment-name` becomes the active segment name."},{"content":"\"<ph id=\"ph1\">`segment-class`</ph>\" (optional)","pos":[2227,2255],"source":"\"`segment-class`\" (optional)"},{"content":"Included for compatibility with C++ prior to version 2.0.","pos":[2259,2316]},{"content":"It is ignored.","pos":[2317,2331]},{"content":"Example","pos":[2340,2347]},{"content":"Comments","pos":[3153,3161]},{"pos":[3165,3301],"content":"See <bpt id=\"p1\">[</bpt>/SECTION<ept id=\"p1\">](../build/reference/section-specify-section-attributes.md)</ept> for a list of names you should not use when creating a section.","source":"See [/SECTION](../build/reference/section-specify-section-attributes.md) for a list of names you should not use when creating a section."},{"pos":[3308,3518],"content":"You can also specify sections for initialized data (<bpt id=\"p1\">[</bpt>data_seg<ept id=\"p1\">](../preprocessor/data-seg.md)</ept>), uninitialized data (<bpt id=\"p2\">[</bpt>bss_seg<ept id=\"p2\">](../preprocessor/bss-seg.md)</ept>), and functions (<bpt id=\"p3\">[</bpt>code_seg<ept id=\"p3\">](../preprocessor/code-seg.md)</ept>).","source":"You can also specify sections for initialized data ([data_seg](../preprocessor/data-seg.md)), uninitialized data ([bss_seg](../preprocessor/bss-seg.md)), and functions ([code_seg](../preprocessor/code-seg.md))."},{"content":"See Also","pos":[3527,3535]},{"content":"Pragma Directives and the __Pragma Keyword","pos":[3540,3582]}],"content":"---\ntitle: \"const_seg | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"vc-pragma.const_seg\"\n  - \"const_seg_CPP\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"pragmas, const_seg\"\n  - \"const_seg pragma\"\nms.assetid: 1eb58ee2-fb0e-4a39-9621-699c8f5ef957\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# const_seg\nSpecifies the segment where [const](../cpp/const-cpp.md) variables are stored in the .obj file.  \n  \n## Syntax  \n  \n```  \n#pragma const_seg ( [ [ { push | pop}, ] [ identifier, ] ] [ \"segment-name\" [, \"segment-class\" ] )  \n```  \n  \n## Remarks  \n The meaning of the terms *segment* and *section* are interchangeable in this topic.  \n  \n OBJ files can be viewed with the [dumpbin](../build/reference/dumpbin-command-line.md) application. The default segment in the .obj file for `const` variables is .rdata. Some `const` variables, such as scalars, are automatically inlined into the code stream. Inlined code will not appear in .rdata.  \n  \n Defining an object requiring dynamic initialization in a `const_seg` results in undefined behavior.  \n  \n `#pragma const_seg` with no parameters resets the segment to .rdata.  \n  \n `push` (optional)  \n Puts a record on the internal compiler stack. A `push` can have an `identifier` and `segment-name`.  \n  \n `pop` (optional)  \n Removes a record from the top of the internal compiler stack.  \n  \n `identifier` (optional)  \n When used with `push`, assigns a name to the record on the internal compiler stack. When used with `pop`, pops records off the internal stack until `identifier` is removed; if `identifier` is not found on the internal stack, nothing is popped.  \n  \n Using `identifier` enables multiple records to be popped with a single `pop` command.  \n  \n \"`segment-name`\" (optional)  \n The name of a segment. When used with `pop`, the stack is popped and `segment-name` becomes the active segment name.  \n  \n \"`segment-class`\" (optional)  \n Included for compatibility with C++ prior to version 2.0. It is ignored.  \n  \n## Example  \n  \n```  \n// pragma_directive_const_seg.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \nconst int i = 7;               // inlined, not stored in .rdata  \nconst char sz1[]= \"test1\";     // stored in .rdata  \n  \n#pragma const_seg(\".my_data1\")  \nconst char sz2[]= \"test2\";     // stored in .my_data1  \n  \n#pragma const_seg(push, stack1, \".my_data2\")  \nconst char sz3[]= \"test3\";     // stored in .my_data2  \n  \n#pragma const_seg(pop, stack1) // pop stack1 from stack  \nconst char sz4[]= \"test4\";     // stored in .my_data1  \n  \nint main() {  \n    using namespace std;  \n   // const data must be referenced to be put in .obj  \n   cout << sz1 << endl;  \n   cout << sz2 << endl;  \n   cout << sz3 << endl;  \n   cout << sz4 << endl;  \n}  \n```  \n  \n```Output  \ntest1  \ntest2  \ntest3  \ntest4  \n```  \n  \n## Comments  \n See [/SECTION](../build/reference/section-specify-section-attributes.md) for a list of names you should not use when creating a section.  \n  \n You can also specify sections for initialized data ([data_seg](../preprocessor/data-seg.md)), uninitialized data ([bss_seg](../preprocessor/bss-seg.md)), and functions ([code_seg](../preprocessor/code-seg.md)).  \n  \n## See Also  \n [Pragma Directives and the __Pragma Keyword](../preprocessor/pragma-directives-and-the-pragma-keyword.md)"}