{"nodes":[{"pos":[12,63],"content":"set_symmetric_difference (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"set_symmetric_difference (STL-CLR) | Microsoft Docs","pos":[0,51]}]},{"content":"set_symmetric_difference (STL/CLR)","pos":[670,704]},{"content":"Unites all of the elements that belong to one, but not both, of the sorted source ranges into a single, sorted destination range, where the ordering criterion may be specified by a binary predicate.","pos":[705,903]},{"content":"Syntax","pos":[912,918]},{"content":"Remarks","pos":[1334,1341]},{"content":"This function behaves the same as the STL function <ph id=\"ph1\">`set_symmetric_difference`</ph>.","pos":[1345,1423],"source":"This function behaves the same as the STL function `set_symmetric_difference`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>set_symmetric_difference<ept id=\"p1\">](http://msdn.microsoft.com/Library/39c673df-ea67-4336-a60e-8729e69e2ee4)</ept>.","pos":[1424,1549],"source":" For more information, see [set_symmetric_difference](http://msdn.microsoft.com/Library/39c673df-ea67-4336-a60e-8729e69e2ee4)."},{"content":"Requirements","pos":[1558,1570]},{"pos":[1574,1605],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/algorithm&gt;","source":"**Header:** \\<cliext/algorithm>"},{"pos":[1612,1633],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[1642,1650]},{"content":"algorithm (STL/CLR)","pos":[1655,1674]}],"content":"---\ntitle: \"set_symmetric_difference (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::set_symmetric_difference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"set_symmetric_difference function [STL/CLR]\"\nms.assetid: 4d8997c7-038e-42a8-86d4-81d714ed3775\ncaps.latest.revision: 4\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# set_symmetric_difference (STL/CLR)\nUnites all of the elements that belong to one, but not both, of the sorted source ranges into a single, sorted destination range, where the ordering criterion may be specified by a binary predicate.  \n  \n## Syntax  \n  \n```  \ntemplate<class _InIt1, class _InIt2, class _OutIt> inline  \n    _OutIt set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,  \n        _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest);  \ntemplate<class _InIt1, class _InIt2, class _OutIt, class _Pr> inline  \n    _OutIt set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,  \n        _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred);  \n```  \n  \n## Remarks  \n This function behaves the same as the STL function `set_symmetric_difference`. For more information, see [set_symmetric_difference](http://msdn.microsoft.com/Library/39c673df-ea67-4336-a60e-8729e69e2ee4).  \n  \n## Requirements  \n **Header:** \\<cliext/algorithm>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [algorithm (STL/CLR)](../dotnet/algorithm-stl-clr.md)"}