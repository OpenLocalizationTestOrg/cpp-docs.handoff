<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ef3bc0a260aad5b0ac8e9a3111206e0157c2e4f4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cmfctoolbarscustomizedialog-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5b5dbe174e67de50dab213afdc55c7c5b5e3e7ce</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2ef5d13edcd0a0303e5eb96599094e3028a2b989</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A modeless tab dialog box ( <bpt id="p1">[</bpt>CPropertySheet Class<ept id="p1">](../../mfc/reference/cpropertysheet-class.md)</ept>) that enables the user to customize the toolbars, menus, keyboard shortcuts, user-defined tools, and visual style in an application.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Typically, the user accesses this dialog box by selecting <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>Tools<ept id="p2">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> dialog box has six tabs: <bpt id="p2">**</bpt>Commands<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Toolbars<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Tools<ept id="p4">**</ept>, <bpt id="p5">**</bpt>Keyboard<ept id="p5">**</ept>, <bpt id="p6">**</bpt>Menu<ept id="p6">**</ept>, and <bpt id="p7">**</bpt>Options<ept id="p7">**</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::CMFCToolBarsCustomizeDialog</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CMFCToolBarsCustomizeDialog`</ph> object.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Destructor.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::AddButton</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Inserts a toolbar button into the list of commands on the <bpt id="p1">**</bpt>Commands<ept id="p1">**</ept> page</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::AddMenu</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Loads a menu from the resources and calls <bpt id="p1">[</bpt>CMFCToolBarsCustomizeDialog::AddMenuCommands<ept id="p1">](#cmfctoolbarscustomizedialog__addmenucommands)</ept> to add that menu to the list of commands on the <bpt id="p2">**</bpt>Commands<ept id="p2">**</ept> page.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::AddMenuCommands</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Loads a menu from the resources and calls <bpt id="p1">[</bpt>CMFCToolBarsCustomizeDialog::AddMenuCommands<ept id="p1">](#cmfctoolbarscustomizedialog__addmenucommands)</ept> to add that menu to the list of commands on the <bpt id="p2">**</bpt>Commands<ept id="p2">**</ept> page.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::AddToolBar</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Loads a toolbar from the resources.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Then, for each command in the menu calls the <bpt id="p1">[</bpt>CMFCToolBarsCustomizeDialog::AddButton<ept id="p1">](#cmfctoolbarscustomizedialog__addbutton)</ept> method to insert a button in the list of commands on the <bpt id="p2">**</bpt>Commands<ept id="p2">**</ept> page under the specified category.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::Create</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Displays the <bpt id="p1">**</bpt>Customization<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Reserved for future use.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::EnableUserDefinedToolbars</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Enables or disables creating new toolbars by using the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::FillAllCommandsList</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Populates the provided <ph id="ph1">`CListBox`</ph> object with the commands in the <bpt id="p1">**</bpt>All Commands<ept id="p1">**</ept> category.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::FillCategoriesComboBox</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Populates the provided <ph id="ph1">`CComboBox`</ph> object with the name of each command category in the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::FillCategoriesListBox</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Populates the provided <ph id="ph1">`CListBox`</ph> object with the name of each command category in the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::GetCommandName</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Retrieves the name that is associated with the given command ID.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::GetCountInCategory</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Retrieves the number of items in the provided list that have a given text label.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::GetFlags</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Retrieves the set of flags that affect the behavior of the dialog box.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Used by the framework to obtain a pointer to the <bpt id="p1">[</bpt>CRuntimeClass<ept id="p1">](../../mfc/reference/cruntimeclass-structure.md)</ept> object that is associated with this class type.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::OnEditToolbarMenuImage</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Starts an image editor so that a user can customize a toolbar button or menu item icon.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::OnInitDialog</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Overrides to augment property sheet initialization.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CPropertySheet::OnInitDialog<ept id="p1">](../../mfc/reference/cpropertysheet-class.md#cpropertysheet__oninitdialog)</ept>.)</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::PostNcDestroy</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Called by the framework after the window has been destroyed.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>(Overrides <ph id="ph1">`CPropertySheet::PostNcDestroy`</ph>.)</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::RemoveButton</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Removes the button with the specified command ID from the specified category, or from all categories.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::RenameCategory</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Renames a category in the list box of categories on the <bpt id="p1">**</bpt>Commands<ept id="p1">**</ept> tab.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::ReplaceButton</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Replaces a button in the list of commands on the <bpt id="p1">**</bpt>Commands<ept id="p1">**</ept> tab with a new toolbar button object.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::SetUserCategory</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Adds a category to the list of categories that will be displayed on the <bpt id="p1">**</bpt>Commands<ept id="p1">**</ept> tab.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Protected Methods</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::CheckToolsValidity</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Called by the framework to determine whether the list of user-defined tools is valid.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::OnAfterChangeTool</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Called by the framework when the properties of a user-defined tool change.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::OnAssignKey</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Determines whether a specified keyboard shortcut can be assigned to an action.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::OnBeforeChangeTool</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Determines whether a user-defined tool can be changed.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::OnInitToolsPage</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Called by the framework when the user chooses the <bpt id="p1">**</bpt>Tools<ept id="p1">**</ept> tab is requested.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>To display the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> dialog box, create a <ph id="ph1">`CMFCToolBarsCustomizeDialog`</ph> object and call the <bpt id="p2">[</bpt>CMFCToolBarsCustomizeDialog::Create<ept id="p2">](#cmfctoolbarscustomizedialog__create)</ept> method.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>While the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> dialog box is active, the application works in a special mode that limits the user to customization tasks.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use various methods in the <ph id="ph1">`CMFCToolBarsCustomizeDialog`</ph> class.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The example shows how to replace a toolbar button in the list box of commands on the <bpt id="p1">**</bpt>Commands<ept id="p1">**</ept> page, enable creating new toolbars by using the <bpt id="p2">**</bpt>Customize<ept id="p2">**</ept> dialog box, and display the <bpt id="p3">**</bpt>Customization<ept id="p3">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This code snippet is part of the <bpt id="p1">[</bpt>IE Demo sample<ept id="p1">](../../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>NVC_MFC_IEDemo#4</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>CCmdTarget</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>CWnd</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>CPropertySheet</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxToolBarsCustomizeDialog.h</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::AddButton</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Inserts a toolbar button into the list of commands on the <bpt id="p1">**</bpt>Commands<ept id="p1">**</ept> page.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Specifies the category ID into which to insert the button.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Specifies the button to insert.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Specifies the zero-based index of a toolbar button before which the button is inserted.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Specifies the category string to insert the button.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`AddButton`</ph> method ignores buttons that have the standard command IDs (such as ID_FILE_MRU_FILE1), commands that are not permitted (see <bpt id="p1">[</bpt>CMFCToolBar::IsCommandPermitted<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__iscommandpermitted)</ept>) and dummy buttons.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>This method creates a new object of the same type as <ph id="ph1">`button`</ph> (usually a <bpt id="p1">[</bpt>CMFCToolBarButton Class<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept>) by using the runtime class of the button.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>It then calls <bpt id="p1">[</bpt>CMFCToolBarButton::CopyFrom<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__copyfrom)</ept> to copy the data members of button, and inserts the copy into the specified category.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>When the new button is inserted, it receives the <ph id="ph1">`OnAddToCustomizePage`</ph> notification.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`iInsertBefore`</ph> is -1, the button is appended to the list of categories; otherwise it is inserted before the item with the specified index.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use the <ph id="ph1">`AddButton`</ph> method of the <ph id="ph2">`CMFCToolBarsCustomizeDialog`</ph> class.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>This code snippet is part of the <bpt id="p1">[</bpt>Slider sample<ept id="p1">](../../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>NVC_MFC_Slider#1</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::AddMenu</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Loads a menu from the resources and calls <bpt id="p1">[</bpt>CMFCToolBarsCustomizeDialog::AddMenuCommands<ept id="p1">](#cmfctoolbarscustomizedialog__addmenucommands)</ept> to add that menu to the list of commands on the <bpt id="p2">**</bpt>Commands<ept id="p2">**</ept> page.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Specifies the resource ID of a menu to load.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>if a menu was added successfully; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>In the call to <ph id="ph1">`AddMenuCommands`</ph>, <ph id="ph2">`bPopup`</ph> is <ph id="ph3">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>As a result, that method does not add menu items that contain submenus to the list of commands.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This method does add the menu items in the submenus to the list of commands.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::AddMenuCommands</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Adds items to the list of commands in the <bpt id="p1">**</bpt>Commands<ept id="p1">**</ept> page to represent all the items in the specified menu.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>A pointer to the CMenu object to add.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Specifies whether to insert the popup menu items to the list of commands.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The name of the category to insert the menu.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>A prefix that is added to the name when the command is shown in the <bpt id="p1">**</bpt>All Categories<ept id="p1">**</ept> list.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`AddMenuCommands`</ph> method loops over all menu items of <ph id="ph2">`pMenu`</ph>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>For each menu item that does not contain a submenu, this method creates a <bpt id="p1">[</bpt>CMFCToolBarButton Class<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept> object and calls the <bpt id="p2">[</bpt>CMFCToolBarsCustomizeDialog::AddButton<ept id="p2">](#cmfctoolbarscustomizedialog__addbutton)</ept> method to add the menu item as a toolbar button to the list of commands on the <bpt id="p3">**</bpt>Commands<ept id="p3">**</ept> page.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Separators are ignored in this process.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bPopup`</ph> is <ph id="ph2">`TRUE`</ph>, for each menu item that contains a submenu this method creates a <bpt id="p1">[</bpt>CMFCToolBarMenuButton Class<ept id="p1">](../../mfc/reference/cmfctoolbarmenubutton-class.md)</ept> object and inserts it into the list of commands by calling <ph id="ph3">`AddButton`</ph>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Otherwise menu items that contain submenus are not displayed in the list of commands.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>In either case, when <ph id="ph1">`AddMenuCommands`</ph> encounters a menu item with a submenu it calls itself recursively, passing a pointer to the submenu as the <ph id="ph2">`pMenu`</ph> parameter and appending the label of the submenu to <ph id="ph3">`lpszMenuPath`</ph>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::AddToolBar</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Loads a toolbar from the resources.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Then, for each command in the menu calls the <bpt id="p1">[</bpt>CMFCToolBarsCustomizeDialog::AddButton<ept id="p1">](#cmfctoolbarscustomizedialog__addbutton)</ept> method to insert a button in the list of commands on the <bpt id="p2">**</bpt>Commands<ept id="p2">**</ept> page under the specified category.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Specifies the resource ID of the category to add the toolbar to.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Specifies the resource ID of a toolbar whose commands are inserted into the list of commands.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Specifies the name of the category to which to add the toolbar.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>if the method is successful; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use the <ph id="ph1">`AddToolBar`</ph> method in the <ph id="ph2">`CMFCToolBarsCustomizeDialog`</ph> class.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>This code snippet is part of the <bpt id="p1">[</bpt>Word Pad sample<ept id="p1">](../../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>NVC_MFC_WordPad#11</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The control that is used to represent each command is a <bpt id="p1">[</bpt>CMFCToolBarButton Class<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>After you add the toolbar, you can replace the button with a control of a derived type by calling <bpt id="p1">[</bpt>CMFCToolBarsCustomizeDialog::ReplaceButton<ept id="p1">](#cmfctoolbarscustomizedialog__replacebutton)</ept>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::CheckToolsValidity</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Verifies the validity of the list of user tools.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The list of user-defined tools to check.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`TRUE`</ph> if the list of user-defined tools is valid; otherwise <ph id="ph2">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The default implementation always returns <ph id="ph1">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The framework calls this method to verify the validity of objects that represent user-defined tools returned by <bpt id="p1">[</bpt>CMFCToolBarsCustomizeDialog::CheckToolsValidity<ept id="p1">](#cmfctoolbarscustomizedialog__checktoolsvalidity)</ept>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Override the <ph id="ph1">`CheckToolsValidity`</ph> method in a class derived from <bpt id="p1">[</bpt>CMFCToolBarsCustomizeDialog<ept id="p1">](../../mfc/reference/cmfctoolbarscustomizedialog-class.md)</ept> if you want to validate the user tools before the user closes the dialog box.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>If this method returns <ph id="ph1">`FALSE`</ph> when the user clicks either the <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button in the upper-right corner of the dialog box or the button labeled <bpt id="p2">**</bpt>Close<ept id="p2">**</ept> in the lower-right corner of the dialog box, the dialog box displays the <bpt id="p3">**</bpt>Tools<ept id="p3">**</ept> tab instead of closing.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>If this method returns <ph id="ph1">`FALSE`</ph> when the user clicks a tab to navigate away from the <bpt id="p1">**</bpt>Tools<ept id="p1">**</ept> tab, the navigation does not occur.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>You should display an appropriate message box to inform the user of the problem that caused validation to fail.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::CMFCToolBarsCustomizeDialog</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CMFCToolBarsCustomizeDialog`</ph> object.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>A pointer to the parent frame.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>This parameter must not be <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>A Boolean value that specifies whether to add the menu commands from all menus to the list of commands on the <bpt id="p1">**</bpt>Commands<ept id="p1">**</ept> page.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>If this parameter is <ph id="ph1">`TRUE`</ph>, the menu commands are added.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Otherwise, the menu commands are not added.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>A combination of flags that affect the behavior of the dialog box.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>This parameter can be one or more of the following values:</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>A pointer to a list of <ph id="ph1">`CRuntimeClass`</ph> objects that specify additional custom pages.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`plistCustomPages`</ph> parameter refers to the list of <ph id="ph2">`CRuntimeClass`</ph> objects that specify additional custom pages.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The constructor adds more pages to the dialog box by using the <bpt id="p1">[</bpt>CRuntimeClass::CreateObject<ept id="p1">](../../mfc/reference/cruntimeclass-structure.md#cruntimeclass__createobject)</ept> method.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>See the CustomPages sample for an example that adds more pages to the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>For more information about the values that you can pass in the <ph id="ph1">`uiFlags`</ph> parameter, see <bpt id="p1">[</bpt>CMFCToolBarsCustomizeDialog::GetFlags<ept id="p1">](#cmfctoolbarscustomizedialog__getflags)</ept>.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to construct an object of the <ph id="ph1">`CMFCToolBarsCustomizeDialog`</ph> class.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>This code snippet is part of the <bpt id="p1">[</bpt>Custom Pages sample<ept id="p1">](../../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CustomPages#3</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::Create</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Displays the <bpt id="p1">**</bpt>Customization<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>if the customization property sheet is created successfully; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">`Create`</ph> method only after you fully initialize the class.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::EnableUserDefinedToolbars</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Enables or disables creating new toolbars by using the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>to enable the user-defined toolbars; <ph id="ph1">`FALSE`</ph> to disable the toolbars.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bEnable`</ph> is <ph id="ph2">`TRUE`</ph>, the <bpt id="p1">**</bpt>New<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Rename<ept id="p2">**</ept> and <bpt id="p3">**</bpt>Delete<ept id="p3">**</ept> buttons are displayed on the <bpt id="p4">**</bpt>Toolbars<ept id="p4">**</ept> page.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>By default, or if <ph id="ph1">`bEnable`</ph> is <ph id="ph2">`FALSE`</ph>, these buttons are not displayed and the user cannot define new toolbars.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::FillAllCommandsList</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Populates the provided <ph id="ph1">`CListBox`</ph> object with the commands in the <bpt id="p1">**</bpt>All Commands<ept id="p1">**</ept> category.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>A reference to the <ph id="ph1">`CListBox`</ph> object to populate.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>All Commands<ept id="p1">**</ept> category contains the commands of all categories.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CMFCToolBarsCustomizeDialog::AddButton<ept id="p1">](#cmfctoolbarscustomizedialog__addbutton)</ept> method adds the command that is associated with the provided button to the <bpt id="p2">**</bpt>All Commands<ept id="p2">**</ept> category for you.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>This method clears the contents of the provided <ph id="ph1">`CListBox`</ph> object before populating it with the commands in the <bpt id="p1">**</bpt>All Commands<ept id="p1">**</ept> category.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CMFCMousePropertyPage`</ph> class uses this method to populate the double-click event list box.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::FillCategoriesComboBox</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Populates the provided <ph id="ph1">`CComboBox`</ph> object with the name of each command category in the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>A reference to the <ph id="ph1">`CComboBox`</ph> object to populate.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>A Boolean value that specifies whether to add categories to the combo box that do not have commands.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>If this parameter is <ph id="ph1">`TRUE`</ph>, empty categories are added to the combo box.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Otherwise, empty categories are not added.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>This method is like the <bpt id="p1">[</bpt>CMFCToolBarsCustomizeDialog::FillCategoriesListBox<ept id="p1">](#cmfctoolbarscustomizedialog__fillcategorieslistbox)</ept> method except that this method works with a <ph id="ph1">`CComboBox`</ph> object.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>This method does not clear the contents of the <ph id="ph1">`CComboBox`</ph> object before populating it.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>It guarantees that the <bpt id="p1">**</bpt>All Commands<ept id="p1">**</ept> category is the final item in the combo box.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>You can add new command categories by using the <bpt id="p1">[</bpt>CMFCToolBarsCustomizeDialog::AddButton<ept id="p1">](#cmfctoolbarscustomizedialog__addbutton)</ept> method.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>You can change the name of an existing category by using the <bpt id="p1">[</bpt>CMFCToolBarsCustomizeDialog::RenameCategory<ept id="p1">](#cmfctoolbarscustomizedialog__renamecategory)</ept> method.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CMFCToolBarsKeyboardPropertyPage`</ph> and <ph id="ph2">`CMFCKeyMapDialog`</ph> classes use this method to categorize keyboard mappings.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::FillCategoriesListBox</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Populates the provided <ph id="ph1">`CListBox`</ph> object with the name of each command category in the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>A reference to the <ph id="ph1">`CListBox`</ph> object to populate.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>A Boolean value that specifies whether to add categories to the list box that do not have commands.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>If this parameter is <ph id="ph1">`TRUE`</ph>, empty categories are added to the list box.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Otherwise, empty categories are not added.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>This method is like the <bpt id="p1">[</bpt>CMFCToolBarsCustomizeDialog::FillCategoriesComboBox<ept id="p1">](#cmfctoolbarscustomizedialog__fillcategoriescombobox)</ept> method except that this method works with a <ph id="ph1">`CListBox`</ph> object.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>This method does not clear the contents of the <ph id="ph1">`CListBox`</ph> object before populating it.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>It guarantees that the <bpt id="p1">**</bpt>All Commands<ept id="p1">**</ept> category is the final item in the list box.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>You can add new command categories by using the <bpt id="p1">[</bpt>CMFCToolBarsCustomizeDialog::AddButton<ept id="p1">](#cmfctoolbarscustomizedialog__addbutton)</ept> method.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>You can change the name of an existing category by using the <bpt id="p1">[</bpt>CMFCToolBarsCustomizeDialog::RenameCategory<ept id="p1">](#cmfctoolbarscustomizedialog__renamecategory)</ept> method.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CMFCToolBarsCommandsPropertyPage`</ph> class uses this method to show the list of commands that is associated with each command category.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::GetCommandName</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Retrieves the name that is associated with the given command ID.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>The ID of the command to retrieve.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>The name that is associated with the given command ID, or <ph id="ph1">`NULL`</ph> if the command does not exist.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::GetCountInCategory</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Retrieves the number of items in the provided list that have a given text label.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>The text label to match.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>A reference to a list that contains <ph id="ph1">`CMFCToolBarButton`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The number of items in the provided list whose text label equals <ph id="ph1">`lpszItemName`</ph>.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Each element in the provided object list must be of type <ph id="ph1">`CMFCToolBarButton`</ph>.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>This method compares <ph id="ph1">`lpszItemName`</ph> with the <bpt id="p1">[</bpt>CMFCToolBarButton::m_strText<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__m_strtext)</ept> data member.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::GetFlags</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Retrieves the set of flags that affect the behavior of the dialog box.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>The set of flags that affect the behavior of the dialog box.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>This method retrieves the value of the <ph id="ph1">`uiFlags`</ph> parameter that is passed to the constructor.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The return value can be one or more of the following values:</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Allows the user to specify the shadow appearance of the menu.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Allows the user to specify whether text labels are shown underneath the toolbar button images.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Allows the user to specify the menu animation style.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Removes the help button from the customization dialog box.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Enables the <ph id="ph1">`WS_EX_CONTEXTHELP`</ph> visual style.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Removes the <bpt id="p1">**</bpt>Tools<ept id="p1">**</ept> page from the customization dialog box.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>This flag is valid if your application uses the <ph id="ph1">`CUserToolsManager`</ph> class.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Allows button captions to contain the ampersand ( <bpt id="p1">**</bpt><ph id="ph1">&amp;</ph><ept id="p1">**</ept>) character.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Removes the <bpt id="p1">**</bpt>Large Icons<ept id="p1">**</ept> option from the customization dialog box.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>For more information about the <ph id="ph1">`WS_EX_CONTEXTHELP`</ph> visual style, see <bpt id="p1">[</bpt>Extended Window Styles<ept id="p1">](../../mfc/reference/extended-window-styles.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::OnAfterChangeTool</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Responds to a change in a user tool immediately after it occurs.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>[in, out]</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>A pointer to the user tool object that has been changed.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>This method is called by the framework when a user changes the properties of a user-defined tool.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>The default implementation does nothing.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Override this method in a class derived from <bpt id="p1">[</bpt>CMFCToolBarsCustomizeDialog<ept id="p1">](../../mfc/reference/cmfctoolbarscustomizedialog-class.md)</ept> to perform processing after a change to a user tool occurs.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::OnAssignKey</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Validates keyboard shortcuts as a user defines them.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>[in, out]</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Pointer to the proposed keyboard assigment that is expressed as an <bpt id="p1">[</bpt>ACCEL<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646340)</ept> struct.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>if the key can be assigned, or <ph id="ph1">`FALSE`</ph> if the key cannot be assigned.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>The default implementation always returns <ph id="ph1">`TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Override this method in a derived class to perform extra processing when a user assigns a new keyboard shortcut, or to validate keyboard shortcuts as the user defines them.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>To prevent a shortcut from being assigned, return <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>You should also display a message box or otherwise inform the user of the reason why the keyboard shortcut was rejected.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::OnBeforeChangeTool</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Performs custom processing when a change to a user tool when the user is about to apply a change.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>[in, out]</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>A pointer to the user tool object that is about to be replaced.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>This method is called by the framework when the properties of a user-defined tool is about to change.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>The default implementation does nothing.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Override the <ph id="ph1">`OnBeforeChangeTool`</ph> method in a class derived from <bpt id="p1">[</bpt>CMFCToolBarsCustomizeDialog<ept id="p1">](../../mfc/reference/cmfctoolbarscustomizedialog-class.md)</ept> if you want to perform processing before a change to a user tool occurs, such as releasing resources that <ph id="ph2">`pSelTool`</ph> uses.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::OnEditToolbarMenuImage</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Starts an image editor so that a user can customize a toolbar button or menu item icon.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>A pointer to the parent window.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>A reference to a bitmap object to be edited.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Bitmap color resolution, in bits per pixel.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>if a change is being committed; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>The default implementation displays a dialog box and returns <ph id="ph1">`TRUE`</ph> if the user clicks <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>, or <ph id="ph2">`FALSE`</ph> if the user clicks <bpt id="p2">**</bpt>Cancel<ept id="p2">**</ept> or the <bpt id="p3">**</bpt>Close<ept id="p3">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>This method is called by the framework when the user runs the image editor.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>The default implementation displays <bpt id="p1">[</bpt>CMFCImageEditorDialog Class<ept id="p1">](../../mfc/reference/cmfcimageeditordialog-class.md)</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Override <ph id="ph1">`OnEditToolbarMenuImage`</ph> in a derived class to use a custom image editor.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::OnInitDialog</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Overrides to augment property sheet initialization.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>The result of calling the <bpt id="p1">[</bpt>CPropertySheet::OnInitDialog<ept id="p1">](../../mfc/reference/cpropertysheet-class.md#cpropertysheet__oninitdialog)</ept> method.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>This method extends the base class implementation, <bpt id="p1">[</bpt>CPropertySheet::OnInitDialog<ept id="p1">](../../mfc/reference/cpropertysheet-class.md#cpropertysheet__oninitdialog)</ept>, by displaying the <bpt id="p2">**</bpt>Close<ept id="p2">**</ept> button, by making sure that the dialog box fits the current screen size, and by moving the <bpt id="p3">**</bpt>Help<ept id="p3">**</ept> button to the lower-left corner of the dialog box.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::OnInitToolsPage</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Handles the notification from the framework that the <bpt id="p1">**</bpt>Tools<ept id="p1">**</ept> page is about to be initialized.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>The default implementation does nothing.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Override this method in a derived class to process this notification.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::PostNcDestroy</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Called by the framework after the window has been destroyed.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>This method extends the base class implementation, <ph id="ph1">`CPropertySheet::PostNcDestroy`</ph>, by restoring the application to the previous mode.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CMFCToolBarsCustomizeDialog::Create<ept id="p1">](#cmfctoolbarscustomizedialog__create)</ept> method puts the application in a special mode that limits the user to customization tasks.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::RemoveButton</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Removes the button with the specified command ID from the specified category, or from all categories.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Specifies the category ID from which to remove the button.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Specifies the command ID of the button.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Specifies the name of the category from which to remove the button.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>The zero-based index of the removed button, or -1 if the specified command ID was not found in the specified category.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`uiCategoryId`</ph> is -1, the return value is 0.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>To remove a button from all categories, call the first overload of this method and set <ph id="ph1">`uiCategoryId`</ph> to -1.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::RenameCategory</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Renames a category in the list box of categories on the <bpt id="p1">**</bpt>Commands<ept id="p1">**</ept> page.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>The category name to change.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>The new category name.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>if the method was successful; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>The category name must be unique.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::ReplaceButton</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Replaces a toolbar button in the list box of commands on the <bpt id="p1">**</bpt>Commands<ept id="p1">**</ept> page.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Specifies the command of the button to be replaced.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`const`</ph> reference to the toolbar button object that replaces the old button.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">[</bpt>CMFCToolBarsCustomizeDialog::AddMenu<ept id="p1">](#cmfctoolbarscustomizedialog__addmenu)</ept>, <bpt id="p2">[</bpt>CMFCToolBarsCustomizeDialog::AddMenuCommands<ept id="p2">](#cmfctoolbarscustomizedialog__addmenucommands)</ept>, or <bpt id="p3">[</bpt>CMFCToolBarsCustomizeDialog::AddToolBar<ept id="p3">](#cmfctoolbarscustomizedialog__addtoolbar)</ept> adds a command to the <bpt id="p4">**</bpt>Commands<ept id="p4">**</ept> page, that command is in the form of a <bpt id="p5">[</bpt>CMFCToolBarButton Class<ept id="p5">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept> object (or a <bpt id="p6">[</bpt>CMFCToolBarMenuButton Class<ept id="p6">](../../mfc/reference/cmfctoolbarmenubutton-class.md)</ept> object for a menu item that contains a submenu added by <ph id="ph1">`AddMenuCommands`</ph>).</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>The framework also calls these three methods to add commands automatically.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>If you want a command to be represented by a derived type instead, call <ph id="ph1">`ReplaceButton`</ph> and pass in a button of the derived type.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use the <ph id="ph1">`ReplaceButton`</ph> method in the <ph id="ph2">`CMFCToolBarsCustomizeDialog`</ph> class.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>This code snippet is part of the <bpt id="p1">[</bpt>Visual Studio Demo sample<ept id="p1">](../../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>NVC_MFC_VisualStudioDemo#34</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog::SetUserCategory</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Specifies which category in the list of categories on the <bpt id="p1">**</bpt>Commands<ept id="p1">**</ept> page is the user category.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>You must call this function before you call <bpt id="p1">[</bpt>CMFCToolBarsCustomizeDialog::Create<ept id="p1">](#cmfctoolbarscustomizedialog__create)</ept>.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>The name of the category.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>if the method is successful; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>The user category setting is not currently used by the framework.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Classes</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>CPropertySheet Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>