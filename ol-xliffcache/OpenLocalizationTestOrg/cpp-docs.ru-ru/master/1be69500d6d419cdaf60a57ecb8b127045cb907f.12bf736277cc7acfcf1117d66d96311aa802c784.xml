{"nodes":[{"pos":[12,33],"content":"free | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"free | Microsoft Docs","pos":[0,21]}]},{"pos":[952,956],"content":"free","linkify":"free","nodes":[{"content":"free","pos":[0,4]}]},{"content":"Deallocates or frees a memory block.","pos":[957,993]},{"pos":[1002,1008],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1074,1084],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Previously allocated memory block to be freed.","pos":[1102,1148]},{"pos":[1157,1164],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`free`</ph> function deallocates a memory block (<ph id=\"ph2\">`memblock`</ph>) that was previously allocated by a call to <ph id=\"ph3\">`calloc`</ph>, <ph id=\"ph4\">`malloc`</ph>, or <ph id=\"ph5\">`realloc`</ph>.","pos":[1168,1304],"source":"The `free` function deallocates a memory block (`memblock`) that was previously allocated by a call to `calloc`, `malloc`, or `realloc`."},{"content":"The number of freed bytes is equivalent to the number of bytes requested when the block was allocated (or reallocated, in the case of <ph id=\"ph1\">`realloc`</ph>).","pos":[1305,1450],"source":" The number of freed bytes is equivalent to the number of bytes requested when the block was allocated (or reallocated, in the case of `realloc`)."},{"content":"If <ph id=\"ph1\">`memblock`</ph> is <ph id=\"ph2\">`NULL`</ph>, the pointer is ignored and <ph id=\"ph3\">`free`</ph> immediately returns.","pos":[1451,1530],"source":" If `memblock` is `NULL`, the pointer is ignored and `free` immediately returns."},{"content":"Attempting to free an invalid pointer (a pointer to a memory block that was not allocated by <ph id=\"ph1\">`calloc`</ph>, <ph id=\"ph2\">`malloc`</ph>, or <ph id=\"ph3\">`realloc`</ph>) may affect subsequent allocation requests and cause errors.","pos":[1531,1717],"source":" Attempting to free an invalid pointer (a pointer to a memory block that was not allocated by `calloc`, `malloc`, or `realloc`) may affect subsequent allocation requests and cause errors."},{"content":"If an error occurs in freeing the memory, <ph id=\"ph1\">`errno`</ph> is set with information from the operating system on the nature of the failure.","pos":[1724,1853],"source":"If an error occurs in freeing the memory, `errno` is set with information from the operating system on the nature of the failure."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","pos":[1854,1996],"source":" For more information, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"After a memory block has been freed, <bpt id=\"p1\">[</bpt>_heapmin<ept id=\"p1\">](../../c-runtime-library/reference/heapmin.md)</ept> minimizes the amount of free memory on the heap by coalescing the unused regions and releasing them back to the operating system.","pos":[2003,2226],"source":"After a memory block has been freed, [_heapmin](../../c-runtime-library/reference/heapmin.md) minimizes the amount of free memory on the heap by coalescing the unused regions and releasing them back to the operating system."},{"content":"Freed memory that is not released to the operating system is restored to the free pool and is available for allocation again.","pos":[2227,2352]},{"content":"When the application is linked with a debug version of the C run-time libraries, <ph id=\"ph1\">`free`</ph> resolves to <bpt id=\"p1\">[</bpt>_free_dbg<ept id=\"p1\">](../../c-runtime-library/reference/free-dbg.md)</ept>.","pos":[2359,2518],"source":"When the application is linked with a debug version of the C run-time libraries, `free` resolves to [_free_dbg](../../c-runtime-library/reference/free-dbg.md)."},{"content":"For more information about how the heap is managed during the debugging process, see <bpt id=\"p1\">[</bpt>The CRT Debug Heap<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","pos":[2519,2672],"source":" For more information about how the heap is managed during the debugging process, see [The CRT Debug Heap](/visualstudio/debugger/crt-debug-heap-details)."},{"content":"<ph id=\"ph1\">`free`</ph> is marked <ph id=\"ph2\">`__declspec(noalias)`</ph>, meaning that the function is guaranteed not to modify global variables.","pos":[2679,2790],"source":"`free` is marked `__declspec(noalias)`, meaning that the function is guaranteed not to modify global variables."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>noalias<ept id=\"p1\">](../../cpp/noalias.md)</ept>.","pos":[2791,2849],"source":" For more information, see [noalias](../../cpp/noalias.md)."},{"pos":[2856,3001],"content":"To free memory allocated with <bpt id=\"p1\">[</bpt>_malloca<ept id=\"p1\">](../../c-runtime-library/reference/malloca.md)</ept>, use <bpt id=\"p2\">[</bpt>_freea<ept id=\"p2\">](../../c-runtime-library/reference/freea.md)</ept>.","source":"To free memory allocated with [_malloca](../../c-runtime-library/reference/malloca.md), use [_freea](../../c-runtime-library/reference/freea.md)."},{"pos":[3010,3022],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Function","pos":[3029,3037]},{"content":"Required header","pos":[3038,3053]},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdlib.h&gt; and <ph id=\"ph2\">\\&lt;</ph>malloc.h&gt;","pos":[3106,3133],"source":"\\<stdlib.h> and \\<malloc.h>"},{"pos":[3141,3265],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[3274,3281],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3285,3359],"content":"See the example for <bpt id=\"p1\">[</bpt>malloc<ept id=\"p1\">](../../c-runtime-library/reference/malloc.md)</ept>.","source":"See the example for [malloc](../../c-runtime-library/reference/malloc.md)."},{"pos":[3368,3393],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[3397,3412]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[3413,3460],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[3461,3586],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[3595,3603],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Memory Allocation<ept id=\"p1\">](../../c-runtime-library/memory-allocation.md)</ept><ph id=\"ph1\"> </ph>","pos":[3607,3673],"source":"[Memory Allocation](../../c-runtime-library/memory-allocation.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_alloca<ept id=\"p1\">](../../c-runtime-library/reference/alloca.md)</ept><ph id=\"ph1\"> </ph>","pos":[3676,3732],"source":" [_alloca](../../c-runtime-library/reference/alloca.md) "},{"content":"<bpt id=\"p1\"> [</bpt>calloc<ept id=\"p1\">](../../c-runtime-library/reference/calloc.md)</ept><ph id=\"ph1\"> </ph>","pos":[3735,3790],"source":" [calloc](../../c-runtime-library/reference/calloc.md) "},{"content":"<bpt id=\"p1\"> [</bpt>malloc<ept id=\"p1\">](../../c-runtime-library/reference/malloc.md)</ept><ph id=\"ph1\"> </ph>","pos":[3793,3848],"source":" [malloc](../../c-runtime-library/reference/malloc.md) "},{"content":"<bpt id=\"p1\"> [</bpt>realloc<ept id=\"p1\">](../../c-runtime-library/reference/realloc.md)</ept><ph id=\"ph1\"> </ph>","pos":[3851,3908],"source":" [realloc](../../c-runtime-library/reference/realloc.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_free_dbg<ept id=\"p1\">](../../c-runtime-library/reference/free-dbg.md)</ept><ph id=\"ph1\"> </ph>","pos":[3911,3971],"source":" [_free_dbg](../../c-runtime-library/reference/free-dbg.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_heapmin<ept id=\"p1\">](../../c-runtime-library/reference/heapmin.md)</ept><ph id=\"ph1\"> </ph>","pos":[3974,4032],"source":" [_heapmin](../../c-runtime-library/reference/heapmin.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_freea<ept id=\"p1\">](../../c-runtime-library/reference/freea.md)</ept>","pos":[4035,4088],"source":" [_freea](../../c-runtime-library/reference/freea.md)"}],"content":"---\ntitle: \"free | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"free\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-heap-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"free\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"memory blocks, deallocating\"\n  - \"free function\"\nms.assetid: 74ded9cf-1863-432e-9306-327a42080bb8\ncaps.latest.revision: 14\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# free\nDeallocates or frees a memory block.  \n  \n## Syntax  \n  \n```  \nvoid free(   \n   void *memblock   \n);  \n```  \n  \n#### Parameters  \n `memblock`  \n Previously allocated memory block to be freed.  \n  \n## Remarks  \n The `free` function deallocates a memory block (`memblock`) that was previously allocated by a call to `calloc`, `malloc`, or `realloc`. The number of freed bytes is equivalent to the number of bytes requested when the block was allocated (or reallocated, in the case of `realloc`). If `memblock` is `NULL`, the pointer is ignored and `free` immediately returns. Attempting to free an invalid pointer (a pointer to a memory block that was not allocated by `calloc`, `malloc`, or `realloc`) may affect subsequent allocation requests and cause errors.  \n  \n If an error occurs in freeing the memory, `errno` is set with information from the operating system on the nature of the failure. For more information, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n After a memory block has been freed, [_heapmin](../../c-runtime-library/reference/heapmin.md) minimizes the amount of free memory on the heap by coalescing the unused regions and releasing them back to the operating system. Freed memory that is not released to the operating system is restored to the free pool and is available for allocation again.  \n  \n When the application is linked with a debug version of the C run-time libraries, `free` resolves to [_free_dbg](../../c-runtime-library/reference/free-dbg.md). For more information about how the heap is managed during the debugging process, see [The CRT Debug Heap](/visualstudio/debugger/crt-debug-heap-details).  \n  \n `free` is marked `__declspec(noalias)`, meaning that the function is guaranteed not to modify global variables. For more information, see [noalias](../../cpp/noalias.md).  \n  \n To free memory allocated with [_malloca](../../c-runtime-library/reference/malloca.md), use [_freea](../../c-runtime-library/reference/freea.md).  \n  \n## Requirements  \n  \n|Function|Required header|  \n|--------------|---------------------|  \n|`free`|\\<stdlib.h> and \\<malloc.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n See the example for [malloc](../../c-runtime-library/reference/malloc.md).  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Memory Allocation](../../c-runtime-library/memory-allocation.md)   \n [_alloca](../../c-runtime-library/reference/alloca.md)   \n [calloc](../../c-runtime-library/reference/calloc.md)   \n [malloc](../../c-runtime-library/reference/malloc.md)   \n [realloc](../../c-runtime-library/reference/realloc.md)   \n [_free_dbg](../../c-runtime-library/reference/free-dbg.md)   \n [_heapmin](../../c-runtime-library/reference/heapmin.md)   \n [_freea](../../c-runtime-library/reference/freea.md)"}