{"nodes":[{"pos":[12,49],"content":"bad_typeid Exception | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"bad_typeid Exception | Microsoft Docs","pos":[0,37]}]},{"content":"bad_typeid Exception","pos":[649,669]},{"pos":[670,807],"content":"The <ph id=\"ph1\">`bad_typeid`</ph> exception is thrown by the <bpt id=\"p1\">[</bpt>typeid operator<ept id=\"p1\">](../cpp/typeid-operator.md)</ept> when the operand for <ph id=\"ph2\">`typeid`</ph> is a NULL pointer.","source":"The `bad_typeid` exception is thrown by the [typeid operator](../cpp/typeid-operator.md) when the operand for `typeid` is a NULL pointer."},{"content":"Syntax","pos":[816,822]},{"content":"Remarks","pos":[891,898]},{"pos":[902,936],"content":"The interface for <ph id=\"ph1\">`bad_typeid`</ph> is:","source":"The interface for `bad_typeid` is:"},{"pos":[1135,1219],"content":"The following example shows the <ph id=\"ph1\">`typeid`</ph> operator throwing a <ph id=\"ph2\">`bad_typeid`</ph> exception.","source":"The following example shows the `typeid` operator throwing a `bad_typeid` exception."},{"content":"Output","pos":[1653,1659]},{"content":"See Also","pos":[1700,1708]},{"content":"Run-Time Type Information","pos":[1713,1738]},{"content":"Keywords","pos":[1782,1790]}],"content":"---\ntitle: \"bad_typeid Exception | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"bad_typeid\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"bad_typeid exception\"\n  - \"exceptions, bad_typeid\"\nms.assetid: 5963ed58-4ede-4597-957d-f7bbd06299c2\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# bad_typeid Exception\nThe `bad_typeid` exception is thrown by the [typeid operator](../cpp/typeid-operator.md) when the operand for `typeid` is a NULL pointer.  \n  \n## Syntax  \n  \n```  \n  \n      catch (bad_typeid)  \n   statement  \n```  \n  \n## Remarks  \n The interface for `bad_typeid` is:  \n  \n```  \nclass bad_typeid : public exception  \n{  \npublic:  \n   bad_typeid(const char * _Message = \"bad typeid\");  \n   bad_typeid(const bad_typeid &);  \n   virtual ~bad_typeid();  \n};  \n```  \n  \n The following example shows the `typeid` operator throwing a `bad_typeid` exception.  \n  \n```  \n// expre_bad_typeid.cpp  \n// compile with: /EHsc /GR  \n#include <typeinfo.h>  \n#include <iostream>  \n  \nclass A{  \npublic:  \n   // object for class needs vtable  \n   // for RTTI  \n   virtual ~A();  \n};  \n  \nusing namespace std;  \nint main() {  \nA* a = NULL;  \n  \ntry {  \n   cout << typeid(*a).name() << endl;  // Error condition  \n   }  \ncatch (bad_typeid){  \n   cout << \"Object is NULL\" << endl;  \n   }  \n}  \n```  \n  \n## Output  \n  \n```  \nObject is NULL  \n```  \n  \n## See Also  \n [Run-Time Type Information](../cpp/run-time-type-information.md)   \n [Keywords](../cpp/keywords-cpp.md)"}