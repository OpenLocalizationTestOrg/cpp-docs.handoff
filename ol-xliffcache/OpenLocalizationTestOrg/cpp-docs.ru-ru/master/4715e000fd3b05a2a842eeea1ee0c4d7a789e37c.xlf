<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4715e000fd3b05a2a842eeea1ee0c4d7a789e37c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\mfc-activex-controls-adding-custom-methods.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4f46a9eeecb0b8e4df9e4f01b97229e9bdcd25ec</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0a9918029a215222f3810ab000bea92f87aa3b45</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls: Adding Custom Methods | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls: Adding Custom Methods</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Custom methods differ from stock methods in that they are not already implemented by <ph id="ph1">`COleControl`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You must supply the implementation for each custom method you add to your control.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>An ActiveX control user can call a custom method at any time to perform control-specific actions.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The dispatch map entry for custom methods is of the form <ph id="ph1">`DISP_FUNCTION`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Adding a Custom Method With the Add Method Wizard</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following procedure demonstrates adding the custom method PtInCircle to an ActiveX control's skeleton code.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>PtInCircle determines whether the coordinates passed to the control are inside or outside the circle.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This same procedure can also be used to add other custom methods.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Substitute your custom method name and its parameters for the PtInCircle method name and parameters.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This example uses the <ph id="ph1">`InCircle`</ph> function from the article Events.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information on this function, see the article <bpt id="p1">[</bpt>MFC ActiveX Controls: Adding Custom Events to an ActiveX Control<ept id="p1">](../mfc/mfc-activex-controls-adding-custom-events.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To add the PtInCircle custom method using the Add Method Wizard</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Load the control's project.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In Class View, expand the library node of your control.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Right-click the interface node for your control (the second node of the library node) to open the shortcut menu.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>From the shortcut menu, click <bpt id="p1">**</bpt>Add<ept id="p1">**</ept> and then click <bpt id="p2">**</bpt>Add Method<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This opens the Add Method Wizard.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Method Name<ept id="p1">**</ept> box, type <ph id="ph1">`PtInCircle`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Internal Name<ept id="p1">**</ept> box, type the name of the method's internal function or use the default value (in this case, <ph id="ph1">`PtInCircle`</ph>).</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Return Type<ept id="p1">**</ept> box, click <bpt id="p2">**</bpt>VARIANT_BOOL<ept id="p2">**</ept> for the method's return type.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Using the <bpt id="p1">**</bpt>Parameter Type<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Parameter Name<ept id="p2">**</ept> controls, add a parameter called <ph id="ph1">`xCoord`</ph> (type <bpt id="p3">**</bpt>OLE_XPOS_PIXELS<ept id="p3">**</ept>).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Using the <bpt id="p1">**</bpt>Parameter Type<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Parameter Name<ept id="p2">**</ept> controls, add a parameter called <ph id="ph1">`yCoord`</ph> (type <bpt id="p3">**</bpt>OLE_YPOS_PIXELS<ept id="p3">**</ept>).</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Finish<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Add Method Wizard Changes for Custom Methods</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>When you add a custom method, the Add Method Wizard makes some changes to the control class header (.H) and implementation (.CPP) files.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following line is added to the dispatch map declaration in the control class header (.H) file:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxUI#18</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This code declares a dispatch method handler called <ph id="ph1">`PtInCircle`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This function can be called by the control user using the external name PtInCircle.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following line is added to the control's .IDL file:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxUI#19</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This line assigns the PtInCircle method a specific ID number, the method's position in the Add Method Wizard methods and properties list.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Because the Add Method Wizard was used to add the custom method, the entry for it was added automatically to the project's .IDL file.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In addition, the following line, located in the implementation (.CPP) file of the control class, is added to the control's dispatch map:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxUI#20</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DISP_FUNCTION`</ph> macro maps the method PtInCircle to the control's handler function, <ph id="ph2">`PtInCircle`</ph>, declares the return type to be <bpt id="p1">**</bpt>VARIANT_BOOL<ept id="p1">**</ept>, and declares two parameters of type <bpt id="p2">**</bpt>VTS_XPOS_PIXELS<ept id="p2">**</ept> and <bpt id="p3">**</bpt>VTS_YPOSPIXELS<ept id="p3">**</ept> to be passed to <ph id="ph3">`PtInCircle`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Finally, the Add Method Wizard adds the stub function <ph id="ph1">`CSampleCtrl::PtInCircle`</ph> to the bottom of the control's implementation (.CPP) file.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`PtInCircle`</ph> to function as stated previously, it must be modified as follows:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxUI#21</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Class View and Object Browser Icons</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>