{"nodes":[{"pos":[12,55],"content":"&lt;iterator&gt; operators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"iterator<ph id=\"ph1\">&amp;gt;</ph> operators | Microsoft Docs","pos":[4,43],"source":"iterator&gt; operators | Microsoft Docs"}]},{"content":"iterator<ph id=\"ph1\">&amp;gt;</ph> operators","pos":[262,284],"source":"iterator&gt; operators"},{"content":"operator!=","pos":[304,314]},{"content":"operator","pos":[332,340]},{"content":"operator","pos":[362,370]},{"content":"operator","pos":[400,408]},{"content":"operator","pos":[430,438]},{"content":"operator+","pos":[464,473]},{"content":"operator-","pos":[495,504]},{"content":"operator==","pos":[519,529]},{"pos":[587,597],"content":"operator!="},{"content":"Tests if the iterator object on the left side of the operator is not equal to the iterator object on the right side.","pos":[601,717]},{"content":"Parameters","pos":[1262,1272]},{"content":"An object of type <bpt id=\"p1\">**</bpt>iterator<ept id=\"p1\">**</ept>.","pos":[1287,1318],"source":" An object of type **iterator**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>iterator<ept id=\"p1\">**</ept>.","pos":[1337,1368],"source":" An object of type **iterator**."},{"content":"Return Value","pos":[1378,1390]},{"pos":[1394,1486],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the iterator objects are not equal; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if the iterator objects are equal.","source":"**true** if the iterator objects are not equal; **false** if the iterator objects are equal."},{"content":"Remarks","pos":[1496,1503]},{"content":"One iterator object is equal to another if they address the same elements in a container.","pos":[1507,1596]},{"content":"If two iterators point to different elements in a container, then they are not equal.","pos":[1597,1682]},{"content":"Example","pos":[1692,1699]},{"pos":[3327,3337],"content":"operator=="},{"content":"Tests if the iterator object on the left side of the operator is equal to the iterator object on the right side.","pos":[3341,3453]},{"content":"Parameters","pos":[4233,4243]},{"content":"An object of type iterator.","pos":[4258,4285]},{"content":"An object of type iterator.","pos":[4304,4331]},{"content":"Return Value","pos":[4341,4353]},{"pos":[4364,4445],"content":"if the iterator objects are equal; <ph id=\"ph1\">`false`</ph> if the iterator objects are not equal.","source":" if the iterator objects are equal; `false` if the iterator objects are not equal."},{"content":"Remarks","pos":[4455,4462]},{"content":"One iterator object is equal to another if they address the same elements in a container.","pos":[4466,4555]},{"content":"If two iterators point to different elements in a container, then they are not equal.","pos":[4556,4641]},{"content":"The first two template operators return true only if both <ph id=\"ph1\">` left`</ph> and <ph id=\"ph2\">` right`</ph> store the same iterator.","pos":[4648,4751],"source":"The first two template operators return true only if both ` left` and ` right` store the same iterator."},{"content":"The third template operator returns true only if both <ph id=\"ph1\">` left`</ph> and <ph id=\"ph2\">` right`</ph> store the same stream pointer.","pos":[4752,4857],"source":" The third template operator returns true only if both ` left` and ` right` store the same stream pointer."},{"content":"The fourth template operator returns <ph id=\"ph1\">` left.equal ( right)`</ph>.","pos":[4858,4918],"source":" The fourth template operator returns ` left.equal ( right)`."},{"content":"Example","pos":[4928,4935]},{"pos":[6558,6566],"content":"operator"},{"content":"Tests if the iterator object on the left side of the operator is less than the iterator object on the right side.","pos":[6574,6687]},{"content":"Parameters","pos":[6855,6865]},{"content":"An object of type <bpt id=\"p1\">**</bpt>iterator<ept id=\"p1\">**</ept>.","pos":[6880,6911],"source":" An object of type **iterator**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>iterator<ept id=\"p1\">**</ept>.","pos":[6930,6961],"source":" An object of type **iterator**."},{"content":"Return Value","pos":[6971,6983]},{"pos":[6987,7180],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the iterator on the left side of the expression is less than the iterator on the right side of the expression; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if it is greater than or equal to the iterator on the right.","source":"**true** if the iterator on the left side of the expression is less than the iterator on the right side of the expression; **false** if it is greater than or equal to the iterator on the right."},{"content":"Remarks","pos":[7190,7197]},{"content":"One iterator object is less than another if it addresses an element that occurs earlier in the container than the element addressed by the other iterator object.","pos":[7201,7362]},{"content":"One iterator object is not less than another if it addresses either the same element as the other iterator object or an element that occurs later in the container than the element addressed by the other iterator object.","pos":[7363,7582]},{"content":"Example","pos":[7592,7599]},{"pos":[9531,9539],"content":"operator"},{"content":"Tests if the iterator object on the left side of the operator is less than or equal to the iterator object on the right side.","pos":[9548,9673]},{"content":"Parameters","pos":[9842,9852]},{"content":"An object of type iterator.","pos":[9867,9894]},{"content":"An object of type iterator.","pos":[9913,9940]},{"content":"Return Value","pos":[9950,9962]},{"pos":[9966,10159],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the iterator on the left side of the expression is less than or equal to the iterator on the right side of the expression; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if it is greater than the iterator on the right.","source":"**true** if the iterator on the left side of the expression is less than or equal to the iterator on the right side of the expression; **false** if it is greater than the iterator on the right."},{"content":"Remarks","pos":[10169,10176]},{"content":"One iterator object is less than or equal to another if it addresses the same element or an element that occurs earlier in the container than the element addressed by the other iterator object.","pos":[10180,10373]},{"content":"One iterator object is greater than another if it addresses an element that occurs later in the container than the element addressed by the other iterator object.","pos":[10374,10536]},{"content":"Example","pos":[10546,10553]},{"pos":[12702,12710],"content":"operator"},{"content":"Tests if the iterator object on the left side of the operator is greater than the iterator object on the right side.","pos":[12718,12834]},{"content":"Parameters","pos":[13002,13012]},{"content":"An object of type iterator.","pos":[13027,13054]},{"content":"An object of type iterator.","pos":[13073,13100]},{"content":"Return Value","pos":[13110,13122]},{"pos":[13126,13319],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the iterator on the left side of the expression is greater than the iterator on the right side of the expression; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if it is less than or equal to the iterator on the right.","source":"**true** if the iterator on the left side of the expression is greater than the iterator on the right side of the expression; **false** if it is less than or equal to the iterator on the right."},{"content":"Remarks","pos":[13329,13336]},{"content":"One iterator object is greater than another if it addresses an element that occurs later in the container than the element addressed by the other iterator object.","pos":[13340,13502]},{"content":"One iterator object is not greater than another if it addresses either the same element as the other iterator object or an element that occurs earlier in the container than the element addressed by the other iterator object.","pos":[13503,13727]},{"content":"Example","pos":[13737,13744]},{"pos":[15650,15658],"content":"operator"},{"content":"Tests if the iterator object on the left side of the operator is greater than or equal to the iterator object on the right side.","pos":[15667,15795]},{"content":"Parameters","pos":[15964,15974]},{"content":"An object of type iterator.","pos":[15989,16016]},{"content":"An object of type iterator.","pos":[16035,16062]},{"content":"Return Value","pos":[16072,16084]},{"pos":[16088,16281],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the iterator on the left side of the expression is greater than or equal to the iterator on the right side of the expression; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if it is less than the iterator on the right.","source":"**true** if the iterator on the left side of the expression is greater than or equal to the iterator on the right side of the expression; **false** if it is less than the iterator on the right."},{"content":"Remarks","pos":[16291,16298]},{"content":"One iterator object is greater than or equal to another if it addresses the same element or an element that occurs later in the container than the element addressed by the other iterator object.","pos":[16302,16496]},{"content":"One iterator object is less than another if it addresses an element that occurs earlier in the container than the element addressed by the other iterator object.","pos":[16497,16658]},{"content":"Example","pos":[16668,16675]},{"pos":[18824,18833],"content":"operator+"},{"pos":[18837,18980],"content":"Adds an offset to an iterator and returns a <ph id=\"ph1\">`move_iterator`</ph> or a <ph id=\"ph2\">`reverse_iterator`</ph> addressing the inserted element at the new offset position.","source":"Adds an offset to an iterator and returns a `move_iterator` or a `reverse_iterator` addressing the inserted element at the new offset position."},{"content":"Parameters","pos":[19310,19320]},{"content":"The number of positions the const move_iterator or const reverse_iterator is to be offset.","pos":[19334,19424]},{"content":"The iterator to be offset.","pos":[19443,19469]},{"content":"Return Value","pos":[19479,19491]},{"pos":[19495,19529],"content":"Returns the sum <ph id=\"ph1\">` right` + `_Off`</ph>.","source":"Returns the sum ` right` + `_Off`."},{"content":"Example","pos":[19539,19546]},{"pos":[20800,20809],"content":"operator-"},{"content":"Subtracts one iterator from another and returns the difference.","pos":[20813,20876]},{"content":"Parameters","pos":[21258,21268]},{"content":"An iterator.","pos":[21283,21295]},{"content":"An iterator.","pos":[21314,21326]},{"content":"Return Value","pos":[21336,21348]},{"pos":[21352,21388],"content":"The difference between two iterators"},{"content":"Remarks","pos":[21402,21409]},{"pos":[21413,21480],"content":"The first template operator returns <ph id=\"ph1\">` left.base() -  right.base()`</ph>.","source":"The first template operator returns ` left.base() -  right.base()`."},{"pos":[21487,21557],"content":"The second template operator returns <ph id=\"ph1\">` right.current -  left.current`</ph>.","source":"The second template operator returns ` right.current -  left.current`."},{"content":"is determined by the type of the returned expression.","pos":[21572,21625]},{"content":"Otherwise, it is <ph id=\"ph1\">`RandomIterator1::difference_type`</ph>.","pos":[21626,21678],"source":" Otherwise, it is `RandomIterator1::difference_type`."},{"content":"Example","pos":[21688,21695]},{"content":"See Also","pos":[23136,23144]},{"content":"iterator&gt;","pos":[23151,23160],"source":"iterator>"}],"content":"---\ntitle: \"&lt;iterator&gt; operators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: b7c664f0-49d4-4993-b5d1-9ac4859fdddc\ncaps.latest.revision: 10\nmanager: \"ghogen\"\n---\n# &lt;iterator&gt; operators\n||||  \n|-|-|-|  \n|[operator!=](#operator_neq)|[operator&gt;](#operator_gt_)|[operator&gt;=](#operator_gt__eq)|  \n|[operator&lt;](#operator_lt_)|[operator&lt;=](#operator_lt__eq)|[operator+](#operator_add)|  \n|[operator-](#operator-)|[operator==](#operator_eq_eq)|  \n  \n##  <a name=\"operator_neq\"></a>  operator!=  \n Tests if the iterator object on the left side of the operator is not equal to the iterator object on the right side.  \n  \n```  \ntemplate <class RandomIterator>  \nbool operator!=(const reverse_iterator<RandomIterator>& left, const reverse_iterator<RandomIterator>& right);\n\ntemplate <class Type, class CharType, class Traits, class Distance>  \nbool operator!=(const istream_iterator<Type, CharType, Traits, Distance>& left, const istream_iterator<Type, CharType, Traits, Distance>& right);\n\ntemplate <class CharType, class Tr>  \nbool operator!=(const istreambuf_iterator<CharType, Traits>& left, const istreambuf_iterator<CharType, Traits>& right);\n```  \n  \n### Parameters  \n ` left`  \n An object of type **iterator**.  \n  \n ` right`  \n An object of type **iterator**.  \n  \n### Return Value  \n **true** if the iterator objects are not equal; **false** if the iterator objects are equal.  \n  \n### Remarks  \n One iterator object is equal to another if they address the same elements in a container. If two iterators point to different elements in a container, then they are not equal.  \n  \n### Example  \n  \n```cpp  \n// iterator_op_ne.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   vector<int> vec;  \n   for ( i = 1 ; i < 9 ; ++i )    \n   {  \n      vec.push_back ( i );  \n   }  \n  \n   vector <int>::iterator vIter;  \n  \n   cout << \"The vector vec is: ( \";  \n   for ( vIter = vec.begin( ) ; vIter != vec.end( ); vIter++ )  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n  \n   // Initializing reverse_iterators to the last element  \n   vector <int>::reverse_iterator rVPOS1 = vec.rbegin ( ),   \n           rVPOS2 = vec.rbegin ( );  \n  \n   cout << \"The iterator rVPOS1 initially points to the first \"  \n        << \"element\\n in the reversed sequence: \"  \n        << *rVPOS1 << \".\" << endl;  \n  \n   if ( rVPOS1 != rVPOS2 )  \n      cout << \"The iterators are not equal.\" << endl;  \n   else  \n      cout << \"The iterators are equal.\" << endl;  \n  \n   rVPOS1++;  \n   cout << \"The iterator rVPOS1 now points to the second \"  \n        << \"element\\n in the reversed sequence: \"  \n        << *rVPOS1 << \".\" << endl;  \n  \n   if ( rVPOS1 != rVPOS2 )  \n      cout << \"The iterators are not equal.\" << endl;  \n   else  \n      cout << \"The iterators are equal.\" << endl;  \n}  \n```  \n  \n```Output  \nThe vector vec is: ( 1 2 3 4 5 6 7 8 ).  \nThe iterator rVPOS1 initially points to the first element  \n in the reversed sequence: 8.  \nThe iterators are equal.  \nThe iterator rVPOS1 now points to the second element  \n in the reversed sequence: 7.  \nThe iterators are not equal.  \n```  \n  \n##  <a name=\"operator_eq_eq\"></a>  operator==  \n Tests if the iterator object on the left side of the operator is equal to the iterator object on the right side.  \n  \n```  \ntemplate <class RandomIterator1, class RandomIterator2>  \nbool operator==(\n    const move_iterator<RandomIterator1>& left,  \n    const move_iterator<RandomIterator2>& right);\n\ntemplate <class RandomIterator1, class RandomIterator2>  \nbool operator==(\n    const reverse_iterator<RandomIterator1>& left,  \n    const reverse_iterator<RandomIterator2>& right);\n\ntemplate <class Type, class CharType, class Traits, class Distance>  \nbool operator==(\n    const istream_iterator<Type, CharType, Traits, Distance>& left,  \n    const istream_iterator<Type, CharType, Traits, Distance>& right);\n\ntemplate <class CharType, class Tr>  \nbool operator==(\n    const istreambuf_iterator<CharType, Traits>& left,  \n    const istreambuf_iterator<CharType, Traits>& right);\n```  \n  \n### Parameters  \n ` left`  \n An object of type iterator.  \n  \n ` right`  \n An object of type iterator.  \n  \n### Return Value  \n `true` if the iterator objects are equal; `false` if the iterator objects are not equal.  \n  \n### Remarks  \n One iterator object is equal to another if they address the same elements in a container. If two iterators point to different elements in a container, then they are not equal.  \n  \n The first two template operators return true only if both ` left` and ` right` store the same iterator. The third template operator returns true only if both ` left` and ` right` store the same stream pointer. The fourth template operator returns ` left.equal ( right)`.  \n  \n### Example  \n  \n```cpp  \n// iterator_op_eq.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   vector<int> vec;  \n   for ( i = 1 ; i < 6 ; ++i )  \n   {  \n      vec.push_back ( 2 * i );  \n   }  \n  \n   vector <int>::iterator vIter;  \n  \n   cout << \"The vector vec is: ( \";  \n   for ( vIter = vec.begin( ) ; vIter != vec.end( ); vIter++)  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n  \n   // Initializing reverse_iterators to the last element  \n   vector <int>::reverse_iterator rVPOS1 = vec.rbegin ( ),   \n           rVPOS2 = vec.rbegin ( );  \n  \n   cout << \"The iterator rVPOS1 initially points to the first \"  \n        << \"element\\n in the reversed sequence: \"  \n        << *rVPOS1 << \".\" << endl;  \n  \n   if ( rVPOS1 == rVPOS2 )  \n      cout << \"The iterators are equal.\" << endl;  \n   else  \n      cout << \"The iterators are not equal.\" << endl;  \n  \n   rVPOS1++;  \n   cout << \"The iterator rVPOS1 now points to the second \"  \n        << \"element\\n in the reversed sequence: \"  \n        << *rVPOS1 << \".\" << endl;  \n  \n   if ( rVPOS1 == rVPOS2 )  \n      cout << \"The iterators are equal.\" << endl;  \n   else  \n      cout << \"The iterators are not equal.\" << endl;  \n}  \n```  \n  \n```Output  \nThe vector vec is: ( 2 4 6 8 10 ).  \nThe iterator rVPOS1 initially points to the first element  \n in the reversed sequence: 10.  \nThe iterators are equal.  \nThe iterator rVPOS1 now points to the second element  \n in the reversed sequence: 8.  \nThe iterators are not equal.  \n```  \n  \n##  <a name=\"operator_lt_\"></a>  operator&lt;  \n Tests if the iterator object on the left side of the operator is less than the iterator object on the right side.  \n  \n```  \ntemplate <class RandomIterator>  \nbool operator<(const reverse_iterator<RandomIterator>& left, const reverse_iterator<RandomIterator>& right);\n```  \n  \n### Parameters  \n ` left`  \n An object of type **iterator**.  \n  \n ` right`  \n An object of type **iterator**.  \n  \n### Return Value  \n **true** if the iterator on the left side of the expression is less than the iterator on the right side of the expression; **false** if it is greater than or equal to the iterator on the right.  \n  \n### Remarks  \n One iterator object is less than another if it addresses an element that occurs earlier in the container than the element addressed by the other iterator object. One iterator object is not less than another if it addresses either the same element as the other iterator object or an element that occurs later in the container than the element addressed by the other iterator object.  \n  \n### Example  \n  \n```cpp  \n// iterator_op_lt.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   vector<int> vec;  \n   for ( i = 0 ; i < 6 ; ++i )  \n   {  \n      vec.push_back ( 2 * i );  \n   }  \n  \n   vector <int>::iterator vIter;  \n  \n   cout << \"The initial vector vec is: ( \";  \n   for ( vIter = vec.begin( ) ; vIter != vec.end( ); vIter++)  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n  \n   // Initializing reverse_iterators to the last element  \n   vector <int>::reverse_iterator rVPOS1 = vec.rbegin ( ),   \n           rVPOS2 = vec.rbegin ( );  \n  \n   cout << \"The iterators rVPOS1& rVPOS2 initially point to the \"  \n           << \"first element\\n in the reversed sequence: \"  \n           << *rVPOS1 << \".\" << endl;  \n  \n   if ( rVPOS1 < rVPOS2 )  \n      cout << \"The iterator rVPOS1 is less than\"  \n              << \" the iterator rVPOS2.\" << endl;  \n   else  \n      cout << \"The iterator rVPOS1 is not less than\"  \n              << \" the iterator rVPOS2.\" << endl;  \n  \n   rVPOS2++;  \n   cout << \"The iterator rVPOS2 now points to the second \"  \n           << \"element\\n in the reversed sequence: \"  \n           << *rVPOS2 << \".\" << endl;  \n  \n   if ( rVPOS1 < rVPOS2 )  \n      cout << \"The iterator rVPOS1 is less than\"  \n              << \" the iterator rVPOS2.\" << endl;  \n   else  \n      cout << \"The iterator rVPOS1 is not less than\"  \n              << \" the iterator rVPOS2.\" << endl;  \n}  \n```  \n  \n```Output  \nThe initial vector vec is: ( 0 2 4 6 8 10 ).  \nThe iterators rVPOS1& rVPOS2 initially point to the first element  \n in the reversed sequence: 10.  \nThe iterator rVPOS1 is not less than the iterator rVPOS2.  \nThe iterator rVPOS2 now points to the second element  \n in the reversed sequence: 8.  \nThe iterator rVPOS1 is less than the iterator rVPOS2.  \n```  \n  \n##  <a name=\"operator_lt__eq\"></a>  operator&lt;=  \n Tests if the iterator object on the left side of the operator is less than or equal to the iterator object on the right side.  \n  \n```  \ntemplate <class RandomIterator>  \nbool operator<=(const reverse_iterator<RandomIterator>& left, const reverse_iterator<RandomIterator>& right);\n```  \n  \n### Parameters  \n ` left`  \n An object of type iterator.  \n  \n ` right`  \n An object of type iterator.  \n  \n### Return Value  \n **true** if the iterator on the left side of the expression is less than or equal to the iterator on the right side of the expression; **false** if it is greater than the iterator on the right.  \n  \n### Remarks  \n One iterator object is less than or equal to another if it addresses the same element or an element that occurs earlier in the container than the element addressed by the other iterator object. One iterator object is greater than another if it addresses an element that occurs later in the container than the element addressed by the other iterator object.  \n  \n### Example  \n  \n```cpp  \n// iterator_op_le.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   vector<int> vec;  \n   for (i = 0 ; i < 6 ; ++i )  {  \n      vec.push_back ( 2 * i );  \n      }  \n  \n   vector <int>::iterator vIter;  \n  \n   cout << \"The initial vector vec is: ( \";  \n   for ( vIter = vec.begin( ) ; vIter != vec.end( ); vIter++)  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n  \n   vector <int>::reverse_iterator rVPOS1 = vec.rbegin ( ) + 1,   \n           rVPOS2 = vec.rbegin ( );  \n  \n   cout << \"The iterator rVPOS1 initially points to the \"  \n           << \"second element\\n in the reversed sequence: \"  \n           << *rVPOS1 << \".\" << endl;  \n  \n   cout << \"The iterator rVPOS2 initially points to the \"  \n           << \"first element\\n in the reversed sequence: \"  \n           << *rVPOS2 << \".\" << endl;  \n  \n   if ( rVPOS1 <= rVPOS2 )  \n      cout << \"The iterator rVPOS1 is less than or \"  \n              << \"equal to the iterator rVPOS2.\" << endl;  \n   else  \n      cout << \"The iterator rVPOS1 is greater than \"  \n              << \"the iterator rVPOS2.\" << endl;  \n  \n   rVPOS2++;  \n   cout << \"The iterator rVPOS2 now points to the second \"  \n           << \"element\\n in the reversed sequence: \"  \n           << *rVPOS2 << \".\" << endl;  \n  \n   if ( rVPOS1 <= rVPOS2 )  \n      cout << \"The iterator rVPOS1 is less than or \"  \n              << \"equal to the iterator rVPOS2.\" << endl;  \n   else  \n      cout << \"The iterator rVPOS1 is greater than \"  \n              << \"the iterator rVPOS2.\" << endl;  \n}  \n```  \n  \n```Output  \nThe initial vector vec is: ( 0 2 4 6 8 10 ).  \nThe iterator rVPOS1 initially points to the second element  \n in the reversed sequence: 8.  \nThe iterator rVPOS2 initially points to the first element  \n in the reversed sequence: 10.  \nThe iterator rVPOS1 is greater than the iterator rVPOS2.  \nThe iterator rVPOS2 now points to the second element  \n in the reversed sequence: 8.  \nThe iterator rVPOS1 is less than or equal to the iterator rVPOS2.  \n```  \n  \n##  <a name=\"operator_gt_\"></a>  operator&gt;  \n Tests if the iterator object on the left side of the operator is greater than the iterator object on the right side.  \n  \n```  \ntemplate <class RandomIterator>  \nbool operator>(const reverse_iterator<RandomIterator>& left, const reverse_iterator<RandomIterator>& right);\n```  \n  \n### Parameters  \n ` left`  \n An object of type iterator.  \n  \n ` right`  \n An object of type iterator.  \n  \n### Return Value  \n **true** if the iterator on the left side of the expression is greater than the iterator on the right side of the expression; **false** if it is less than or equal to the iterator on the right.  \n  \n### Remarks  \n One iterator object is greater than another if it addresses an element that occurs later in the container than the element addressed by the other iterator object. One iterator object is not greater than another if it addresses either the same element as the other iterator object or an element that occurs earlier in the container than the element addressed by the other iterator object.  \n  \n### Example  \n  \n```cpp  \n// iterator_op_gt.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   vector<int> vec;  \n   for (i = 0 ; i < 6 ; ++i )  {  \n      vec.push_back ( 2 * i );  \n      }  \n  \n   vector <int>::iterator vIter;  \n  \n   cout << \"The initial vector vec is: ( \";  \n   for ( vIter = vec.begin( ) ; vIter != vec.end( ); vIter++)  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n  \n   vector <int>::reverse_iterator rVPOS1 = vec.rbegin ( ),   \n           rVPOS2 = vec.rbegin ( );  \n  \n   cout << \"The iterators rVPOS1 & rVPOS2 initially point to \"  \n           << \"the first element\\n in the reversed sequence: \"  \n           << *rVPOS1 << \".\" << endl;  \n  \n   if ( rVPOS1 > rVPOS2 )  \n      cout << \"The iterator rVPOS1 is greater than \"  \n              << \"the iterator rVPOS2.\" << endl;  \n   else  \n      cout << \"The iterator rVPOS1 is less than or \"  \n              << \"equal to the iterator rVPOS2.\" << endl;  \n  \n   rVPOS1++;  \n   cout << \"The iterator rVPOS1 now points to the second \"  \n           << \"element\\n in the reversed sequence: \"  \n           << *rVPOS1 << \".\" << endl;  \n  \n   if ( rVPOS1 > rVPOS2 )  \n      cout << \"The iterator rVPOS1 is greater than \"  \n              << \"the iterator rVPOS2.\" << endl;  \n   else  \n      cout << \"The iterator rVPOS1 is less than or \"  \n              << \"equal to the iterator rVPOS2.\" << endl;  \n}  \n```  \n  \n```Output  \nThe initial vector vec is: ( 0 2 4 6 8 10 ).  \nThe iterators rVPOS1 & rVPOS2 initially point to the first element  \n in the reversed sequence: 10.  \nThe iterator rVPOS1 is less than or equal to the iterator rVPOS2.  \nThe iterator rVPOS1 now points to the second element  \n in the reversed sequence: 8.  \nThe iterator rVPOS1 is greater than the iterator rVPOS2.  \n```  \n  \n##  <a name=\"operator_gt__eq\"></a>  operator&gt;=  \n Tests if the iterator object on the left side of the operator is greater than or equal to the iterator object on the right side.  \n  \n```  \ntemplate <class RandomIterator>  \nbool operator>=(const reverse_iterator<RandomIterator>& left, const reverse_iterator<RandomIterator>& right);\n```  \n  \n### Parameters  \n ` left`  \n An object of type iterator.  \n  \n ` right`  \n An object of type iterator.  \n  \n### Return Value  \n **true** if the iterator on the left side of the expression is greater than or equal to the iterator on the right side of the expression; **false** if it is less than the iterator on the right.  \n  \n### Remarks  \n One iterator object is greater than or equal to another if it addresses the same element or an element that occurs later in the container than the element addressed by the other iterator object. One iterator object is less than another if it addresses an element that occurs earlier in the container than the element addressed by the other iterator object.  \n  \n### Example  \n  \n```cpp  \n// iterator_op_ge.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   vector<int> vec;  \n   for (i = 0 ; i < 6 ; ++i )  {  \n      vec.push_back ( 2 * i );  \n      }  \n  \n   vector <int>::iterator vIter;  \n  \n   cout << \"The initial vector vec is: ( \";  \n   for ( vIter = vec.begin( ) ; vIter != vec.end( ); vIter++)  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n  \n   vector <int>::reverse_iterator rVPOS1 = vec.rbegin ( ),   \n           rVPOS2 = vec.rbegin ( ) + 1;  \n  \n   cout << \"The iterator rVPOS1 initially points to the \"  \n           << \"first element\\n in the reversed sequence: \"  \n           << *rVPOS1 << \".\" << endl;  \n  \n   cout << \"The iterator rVPOS2 initially points to the \"  \n           << \"second element\\n in the reversed sequence: \"  \n           << *rVPOS2 << \".\" << endl;  \n  \n   if ( rVPOS1 >= rVPOS2 )  \n      cout << \"The iterator rVPOS1 is greater than or \"  \n              << \"equal to the iterator rVPOS2.\" << endl;  \n   else  \n      cout << \"The iterator rVPOS1 is less than \"  \n              << \"the iterator rVPOS2.\" << endl;  \n  \n   rVPOS1++;  \n   cout << \"The iterator rVPOS1 now points to the second \"  \n           << \"element\\n in the reversed sequence: \"  \n           << *rVPOS1 << \".\" << endl;  \n  \n   if ( rVPOS1 >= rVPOS2 )  \n      cout << \"The iterator rVPOS1 is greater than or \"  \n              << \"equal to the iterator rVPOS2.\" << endl;  \n   else  \n      cout << \"The iterator rVPOS1 is less than \"  \n              << \"the iterator rVPOS2.\" << endl;  \n}  \n```  \n  \n```Output  \nThe initial vector vec is: ( 0 2 4 6 8 10 ).  \nThe iterator rVPOS1 initially points to the first element  \n in the reversed sequence: 10.  \nThe iterator rVPOS2 initially points to the second element  \n in the reversed sequence: 8.  \nThe iterator rVPOS1 is less than the iterator rVPOS2.  \nThe iterator rVPOS1 now points to the second element  \n in the reversed sequence: 8.  \nThe iterator rVPOS1 is greater than or equal to the iterator rVPOS2.  \n```  \n  \n##  <a name=\"operator_add\"></a>  operator+  \n Adds an offset to an iterator and returns a `move_iterator` or a `reverse_iterator` addressing the inserted element at the new offset position.  \n  \n```  \ntemplate <class RandomIterator, class Diff>  \nmove_iterator<RandomIterator>  \noperator+(\n    Diff _Off,  \n    const move_iterator<RandomIterator>& right);\n\ntemplate <class RandomIterator>  \nreverse_iterator<RandomIterator>  \noperator+(\n    Diff _Off,  \n    const reverse_iterator<RandomIterator>& right);\n```  \n  \n### Parameters  \n `_Off`  \n The number of positions the const move_iterator or const reverse_iterator is to be offset.  \n  \n ` right`  \n The iterator to be offset.  \n  \n### Return Value  \n Returns the sum ` right` + `_Off`.  \n  \n### Example  \n  \n```cpp  \n// iterator_op_insert.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   vector<int> vec;  \n   for (i = 0 ; i < 6 ; ++i )  {  \n      vec.push_back ( 2 * i );  \n      }  \n  \n   vector <int>::iterator vIter;  \n  \n   cout << \"The initial vector vec is: ( \";  \n   for ( vIter = vec.begin( ) ; vIter != vec.end( ); vIter++)  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n  \n   vector <int>::reverse_iterator rVPOS1 = vec.rbegin ( );  \n  \n   cout << \"The iterator rVPOS1 initially points to \"  \n           << \"the first element\\n in the reversed sequence: \"  \n           << *rVPOS1 << \".\" << endl;  \n  \n   vector<int>::difference_type diff = 4;  \n   rVPOS1 = diff +rVPOS1;  \n  \n   cout << \"The iterator rVPOS1 now points to the fifth \"  \n           << \"element\\n in the reversed sequence: \"  \n           << *rVPOS1 << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe initial vector vec is: ( 0 2 4 6 8 10 ).  \nThe iterator rVPOS1 initially points to the first element  \n in the reversed sequence: 10.  \nThe iterator rVPOS1 now points to the fifth element  \n in the reversed sequence: 2.  \n```  \n  \n##  <a name=\"operator-\"></a>  operator-  \n Subtracts one iterator from another and returns the difference.  \n  \n```  \ntemplate <class RandomIterator1, class RandomIterator2>  \nTdiff operator-(\n    const move_iterator<RandomIterator1>& left,  \n    const move_iterator<RandomIterator2>& right);\n\ntemplate <class RandomIterator1, class RandomIterator2>  \nTdiff operator-(\n    const reverse_iterator<RandomIterator1>& left,  \n    const reverse_iterator<RandomIterator2>& right);\n```  \n  \n### Parameters  \n ` left`  \n An iterator.  \n  \n ` right`  \n An iterator.  \n  \n### Return Value  \n The difference between two iterators `.`  \n  \n### Remarks  \n The first template operator returns ` left.base() -  right.base()`.  \n  \n The second template operator returns ` right.current -  left.current`.  \n  \n `Tdiff` is determined by the type of the returned expression. Otherwise, it is `RandomIterator1::difference_type`.  \n  \n### Example  \n  \n```cpp  \n// iterator_op_sub.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   vector<int> vec;  \n   for (i = 0 ; i < 6 ; ++i )    \n   {  \n      vec.push_back ( 2 * i );  \n   }  \n  \n   vector <int>::iterator vIter;  \n  \n   cout << \"The initial vector vec is: ( \";  \n   for ( vIter = vec.begin( ) ; vIter != vec.end( ); vIter++)  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n  \n   vector <int>::reverse_iterator rVPOS1 = vec.rbegin ( ),   \n          rVPOS2 = vec.rbegin ( );  \n  \n   cout << \"The iterators rVPOS1 & rVPOS2 initially point to \"  \n        << \"the first element\\n in the reversed sequence: \"  \n        << *rVPOS1 << \".\" << endl;  \n  \n   for (i = 1; i < 5; ++i)    \n   {  \n      rVPOS2++;  \n   }  \n   cout << \"The iterator rVPOS2 now points to the fifth \"  \n        << \"element\\n in the reversed sequence: \"  \n        << *rVPOS2 << \".\" << endl;  \n  \n   vector<int>::difference_type diff = rVPOS2 - rVPOS1;  \n   cout << \"The difference: rVPOS2 - rVPOS1= \"  \n        << diff << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe initial vector vec is: ( 0 2 4 6 8 10 ).  \nThe iterators rVPOS1 & rVPOS2 initially point to the first element  \n in the reversed sequence: 10.  \nThe iterator rVPOS2 now points to the fifth element  \n in the reversed sequence: 2.  \nThe difference: rVPOS2 - rVPOS1= 4.  \n```  \n  \n## See Also  \n [\\<iterator>](../standard-library/iterator.md)\n\n"}