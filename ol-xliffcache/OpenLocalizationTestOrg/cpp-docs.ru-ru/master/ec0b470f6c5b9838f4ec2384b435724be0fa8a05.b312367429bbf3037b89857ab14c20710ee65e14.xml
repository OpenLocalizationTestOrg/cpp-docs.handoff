{"nodes":[{"pos":[12,61],"content":"Compiler Warning (level 4) C4611 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Warning (level 4) C4611 | Microsoft Docs","pos":[0,49]}]},{"content":"Compiler Warning (level 4) C4611","pos":[609,641]},{"content":"interaction between 'function' and C++ object destruction is non-portable","pos":[642,715]},{"pos":[722,844],"content":"On some platforms, functions that include <bpt id=\"p1\">**</bpt>catch<ept id=\"p1\">**</ept> may not support C++ object semantics of destruction when out of scope.","source":"On some platforms, functions that include **catch** may not support C++ object semantics of destruction when out of scope."},{"pos":[851,955],"content":"To avoid unexpected behavior, avoid using <bpt id=\"p1\">**</bpt>catch<ept id=\"p1\">**</ept> in functions that have constructors and destructors.","source":"To avoid unexpected behavior, avoid using **catch** in functions that have constructors and destructors."},{"pos":[962,1048],"content":"This warning is only issued once; see <bpt id=\"p1\">[</bpt>pragma warning<ept id=\"p1\">](../../preprocessor/warning.md)</ept>.","source":"This warning is only issued once; see [pragma warning](../../preprocessor/warning.md)."}],"content":"---\ntitle: \"Compiler Warning (level 4) C4611 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"C4611\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C4611\"\nms.assetid: bd90d0a6-75f9-4e97-968d-dda6773e9fd8\ncaps.latest.revision: 7\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Compiler Warning (level 4) C4611\ninteraction between 'function' and C++ object destruction is non-portable  \n  \n On some platforms, functions that include **catch** may not support C++ object semantics of destruction when out of scope.  \n  \n To avoid unexpected behavior, avoid using **catch** in functions that have constructors and destructors.  \n  \n This warning is only issued once; see [pragma warning](../../preprocessor/warning.md)."}