<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0065fafef59e4817beb364923964a8258e3b2ff9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cframewnd-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d17949efa47334fd6a31cc52f3fd08ae8479c2da</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4941d593574a9ac8adb96cde3204b65e08199c5a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CFrameWnd Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CFrameWnd Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Provides the functionality of a Windows single document interface (SDI) overlapped or pop-up frame window, along with members for managing the window.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CFrameWnd::CFrameWnd</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CFrameWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CFrameWnd::ActivateFrame</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Makes the frame visible and available to the user.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CFrameWnd::BeginModalState</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Sets the frame window to modal.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CFrameWnd::Create</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Call to create and initialize the Windows frame window associated with the <ph id="ph1">`CFrameWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CFrameWnd::CreateView</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Creates a view within a frame that is not derived from <ph id="ph1">`CView`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CFrameWnd::DockControlBar</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Docks a control bar.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CFrameWnd::EnableDocking</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Allows a control bar to be docked.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CFrameWnd::EndModalState</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Ends the frame window's modal state.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Enables all of the windows disabled by <ph id="ph1">`BeginModalState`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>CFrameWnd::FloatControlBar</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Floats a control bar.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>CFrameWnd::GetActiveDocument</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Returns the active <bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>CFrameWnd::GetActiveFrame</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Returns the active <ph id="ph1">`CFrameWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>CFrameWnd::GetActiveView</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Returns the active <ph id="ph1">`CView`</ph> object.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>CFrameWnd::GetControlBar</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Retrieves the control bar.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>CFrameWnd::GetDockState</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Retrieves the dock state of a frame window.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>CFrameWnd::GetMenuBarState</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Retrieves the display state of the menu in the current MFC application.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>CFrameWnd::GetMenuBarVisibility</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Indicates whether the default behavior of the menu in the current MFC application is  either hidden or visible.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>CFrameWnd::GetMessageBar</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the status bar belonging to the frame window.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>CFrameWnd::GetMessageString</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Retrieves message corresponding to a command ID.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>CFrameWnd::GetTitle</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Retrieves the title of the related control bar.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>CFrameWnd::InitialUpdateFrame</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Causes the <ph id="ph1">`OnInitialUpdate`</ph> member function belonging to all views in the frame window to be called.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>CFrameWnd::InModalState</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Returns a value indicating whether or not a frame window is in a modal state.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>CFrameWnd::IsTracking</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Determines if splitter bar is currently being moved.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>CFrameWnd::LoadAccelTable</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Call to load an accelerator table.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>CFrameWnd::LoadBarState</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Call to restore control bar settings.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>CFrameWnd::LoadFrame</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Call to dynamically create a frame window from resource information.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>CFrameWnd::NegotiateBorderSpace</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Negotiates border space in the frame window.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>CFrameWnd::OnBarCheck</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Called whenever an action is performed on the specified control bar.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CFrameWnd::OnContextHelp</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Handles SHIFT+F1 Help for in-place items.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>CFrameWnd::OnSetPreviewMode</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Sets the application's main frame window into and out of print-preview mode.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>CFrameWnd::OnUpdateControlBarMenu</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Called by the framework when the associated menu is updated.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>CFrameWnd::RecalcLayout</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Repositions the control bars of the <ph id="ph1">`CFrameWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>CFrameWnd::SaveBarState</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Call to save control bar settings.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>CFrameWnd::SetActivePreviewView</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Designates the specified view to be the active view for Rich Preview.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>CFrameWnd::SetActiveView</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Sets the active <ph id="ph1">`CView`</ph> object.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>CFrameWnd::SetDockState</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Call to dock the frame window in the main window.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>CFrameWnd::SetMenuBarState</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Sets the display state of the menu in the current MFC application to hidden or displayed.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>CFrameWnd::SetMenuBarVisibility</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Sets the default behavior of the menu in the current MFC application to be either hidden or visible.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>CFrameWnd::SetMessageText</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Sets the text of a standard status bar.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>CFrameWnd::SetProgressBarPosition</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Sets current position for Windows 7 progress bar displayed on taskbar.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>CFrameWnd::SetProgressBarRange</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Sets range for Windows 7 progress bar displayed on taskbar.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>CFrameWnd::SetProgressBarState</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Sets the type and state of the progress indicator displayed on a taskbar button.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>CFrameWnd::SetTaskbarOverlayIcon</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Overloaded.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Applies an overlay to a taskbar button to indicate application status or a notification to the user.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>CFrameWnd::SetTitle</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Sets the title of the related control bar.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>CFrameWnd::ShowControlBar</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Call to show the control bar.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>CFrameWnd::ShowOwnedWindows</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Shows all windows that are descendants of the <ph id="ph1">`CFrameWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Protected Methods</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>CFrameWnd::OnCreateClient</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Creates a client window for the frame.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>CFrameWnd::OnHideMenuBar</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Called before the menu in the current MFC application is hidden.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>CFrameWnd::OnShowMenuBar</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Called before the menu in the current MFC application is displayed.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>CFrameWnd::m_bAutoMenuEnable</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Controls automatic enable and disable functionality for menu items.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>CFrameWnd::rectDefault</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Pass this static <ph id="ph1">`CRect`</ph> as a parameter when creating a <ph id="ph2">`CFrameWnd`</ph> object to allow Windows to choose the window's initial size and position.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>To create a useful frame window for your application, derive a class from <ph id="ph1">`CFrameWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Add member variables to the derived class to store data specific to your application.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Implement message-handler member functions and a message map in the derived class to specify what happens when messages are directed to the window.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>There are three ways to construct a frame window:</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Directly construct it using <bpt id="p1">[</bpt>Create<ept id="p1">](#cframewnd__create)</ept>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Directly construct it using <bpt id="p1">[</bpt>LoadFrame<ept id="p1">](#cframewnd__loadframe)</ept>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Indirectly construct it using a document template.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Before you call either <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> or <ph id="ph1">`LoadFrame`</ph>, you must construct the frame-window object on the heap using the C++ <bpt id="p2">**</bpt>new<ept id="p2">**</ept> operator.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Before calling <bpt id="p1">**</bpt>Create<ept id="p1">**</ept>, you can also register a window class with the <bpt id="p2">[</bpt>AfxRegisterWndClass<ept id="p2">](../../mfc/reference/application-information-and-management.md#afxregisterwndclass)</ept> global function to set the icon and class styles for the frame.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> member function to pass the frame's creation parameters as immediate arguments.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>requires fewer arguments than <bpt id="p1">**</bpt>Create<ept id="p1">**</ept>, and instead retrieves most of its default values from resources, including the frame's caption, icon, accelerator table, and menu.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>To be accessible by <ph id="ph1">`LoadFrame`</ph>, all these resources must have the same resource ID (for example, <bpt id="p1">**</bpt>IDR_MAINFRAME<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`CFrameWnd`</ph> object contains views and documents, they are created indirectly by the framework instead of directly by the programmer.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CDocTemplate`</ph> object orchestrates the creation of the frame, the creation of the containing views, and the connection of the views to the appropriate document.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The parameters of the <ph id="ph1">`CDocTemplate`</ph> constructor specify the <ph id="ph2">`CRuntimeClass`</ph> of the three classes involved (document, frame, and view).</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CRuntimeClass`</ph> object is used by the framework to dynamically create new frames when specified by the user (for example, by using the File New command or the multiple document interface (MDI) Window New command).</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>A frame-window class derived from <ph id="ph1">`CFrameWnd`</ph> must be declared with <ph id="ph2">`DECLARE_DYNCREATE`</ph> in order for the above <ph id="ph3">`RUNTIME_CLASS`</ph> mechanism to work correctly.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CFrameWnd`</ph> contains default implementations to perform the following functions of a main window in a typical application for Windows:</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CFrameWnd`</ph> frame window keeps track of a currently active view that is independent of the Windows active window or the current input focus.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>When the frame is reactivated, the active view is notified by calling <ph id="ph1">`CView::OnActivateView`</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Command messages and many common frame-notification messages, including those handled by the <ph id="ph1">`OnSetFocus`</ph>, <ph id="ph2">`OnHScroll`</ph>, and <ph id="ph3">`OnVScroll`</ph> functions of <ph id="ph4">`CWnd`</ph>, are delegated by a <ph id="ph5">`CFrameWnd`</ph> frame window to the currently active view.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The currently active view (or currently active MDI child frame window in the case of an MDI frame) can determine the caption of the frame window.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>This feature can be disabled by turning off the <bpt id="p1">**</bpt>FWS_ADDTOTITLE<ept id="p1">**</ept> style bit of the frame window.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CFrameWnd`</ph> frame window manages the positioning of the control bars, views, and other child windows inside the frame window's client area.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>A frame window also does idle-time updating of toolbar and other control-bar buttons.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CFrameWnd`</ph> frame window also has default implementations of commands for toggling on and off the toolbar and status bar.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CFrameWnd`</ph> frame window manages the main menu bar.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>When a pop-up menu is displayed, the frame window uses the <bpt id="p1">**</bpt>UPDATE_COMMAND_UI<ept id="p1">**</ept> mechanism to determine which menu items should be enabled, disabled, or checked.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>When the user selects a menu item, the frame window updates the status bar with the message string for that command.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CFrameWnd`</ph> frame window has an optional accelerator table that automatically translates keyboard accelerators.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CFrameWnd`</ph> frame window has an optional help ID set with <ph id="ph2">`LoadFrame`</ph> that is used for context-sensitive help.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>A frame window is the main orchestrator of semimodal states such as context-sensitive help (SHIFT+F1) and print-preview modes.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CFrameWnd`</ph> frame window will open a file dragged from the File Manager and dropped on the frame window.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>If a file extension is registered and associated with the application, the frame window responds to the dynamic data exchange (DDE) open request that occurs when the user opens a data file in the File Manager or when the <bpt id="p1">**</bpt>ShellExecute<ept id="p1">**</ept> Windows function is called.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>If the frame window is the main application window (that is, <ph id="ph1">`CWinThread::m_pMainWnd`</ph>), when the user closes the application, the frame window prompts the user to save any modified documents (for <ph id="ph2">`OnClose`</ph> and <ph id="ph3">`OnQueryEndSession`</ph>).</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>If the frame window is the main application window, the frame window is the context for running WinHelp.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Closing the frame window will shut down WINHELP.EXE if it was launched for help for this application.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Do not use the C++ <bpt id="p1">**</bpt>delete<ept id="p1">**</ept> operator to destroy a frame window.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`CWnd::DestroyWindow`</ph> instead.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CFrameWnd`</ph> implementation of <ph id="ph2">`PostNcDestroy`</ph> will delete the C++ object when the window is destroyed.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>When the user closes the frame window, the default <ph id="ph1">`OnClose`</ph> handler will call <ph id="ph2">`DestroyWindow`</ph>.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`CFrameWnd`</ph>, see <bpt id="p1">[</bpt>Frame Windows<ept id="p1">](../../mfc/frame-windows.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>CCmdTarget</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>CWnd</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxwin.h</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>CFrameWnd::ActivateFrame</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Call this member function to activate and restore the frame window so that it is visible and available to the user.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Specifies the parameter to pass to <bpt id="p1">[</bpt>CWnd::ShowWindow<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__showwindow)</ept>.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>By default, the frame is shown and correctly restored.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>This member function is usually called after a non-user interface event such as a DDE, OLE, or other event that may show the frame window or its contents to the user.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The default implementation activates the frame and brings it to the top of the Z-order and, if necessary, carries out the same steps for the application's main frame window.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Override this member function to change how a frame is activated.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>For example, you can force MDI child windows to be maximized.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Add the appropriate functionality, then call the base class version with an explicit <ph id="ph1">`nCmdShow`</ph>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#1</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>CFrameWnd::BeginModalState</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Call this member function to make a frame window modal.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>CFrameWnd::CFrameWnd</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CFrameWnd`</ph> object, but does not create the visible frame window.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> to create the visible window.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>CFrameWnd::Create</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Call to create and initialize the Windows frame window associated with the <ph id="ph1">`CFrameWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated character string that names the Windows class.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The class name can be any name registered with the <ph id="ph1">`AfxRegisterWndClass`</ph> global function or the <bpt id="p1">**</bpt>RegisterClass<ept id="p1">**</ept> Windows function.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, uses the predefined default <ph id="ph1">`CFrameWnd`</ph> attributes.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated character string that represents the window name.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Used as text for the title bar.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Specifies the window <bpt id="p1">[</bpt>style<ept id="p1">](../../mfc/reference/window-styles.md)</ept> attributes.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Include the <bpt id="p1">**</bpt>FWS_ADDTOTITLE<ept id="p1">**</ept> style if you want the title bar to automatically display the name of the document represented in the window.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Specifies the size and position of the window.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`rectDefault`</ph> value allows Windows to specify the size and position of the new window.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Specifies the parent window of this frame window.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>This parameter should be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> for top-level frame windows.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>lpszMenuName</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Identifies the name of the menu resource to be used with the window.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">**</bpt>MAKEINTRESOURCE<ept id="p1">**</ept> if the menu has an integer ID instead of a string.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>This parameter can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Specifies the window extended <bpt id="p1">[</bpt>style<ept id="p1">](../../mfc/reference/extended-window-styles.md)</ept> attributes.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Specifies a pointer to a <bpt id="p1">[</bpt>CCreateContext<ept id="p1">](../../mfc/reference/ccreatecontext-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>This parameter can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Nonzero if initialization is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Construct a <ph id="ph1">`CFrameWnd`</ph> object in two steps.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>First, invoke the constructor, which constructs the <ph id="ph1">`CFrameWnd`</ph> object, and then call <bpt id="p1">**</bpt>Create<ept id="p1">**</ept>, which creates the Windows frame window and attaches it to the <ph id="ph2">`CFrameWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Create<ept id="p1">**</ept> initializes the window's class name and window name and registers default values for its style, parent, and associated menu.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`LoadFrame`</ph> rather than <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> to load the frame window from a resource instead of specifying its arguments.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>CFrameWnd::CreateView</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`CreateView`</ph> to create a view within a frame.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Specifies the type of view and document.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The ID number of a view.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Pointer to a <ph id="ph1">`CWnd`</ph> object if successful; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Use this member function to create "views" that are not <ph id="ph1">`CView`</ph>-derived within a frame.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>After calling <ph id="ph1">`CreateView`</ph>, you must manually set the view to active and set it to be visible; these tasks are not automatically performed by <ph id="ph2">`CreateView`</ph>.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>CFrameWnd::DockControlBar</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Causes a control bar to be docked to the frame window.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Points to the control bar to be docked.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Determines which sides of the frame window to consider for docking.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>It can be 0, or one or more of the following:</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Dock to the top side of the frame window.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>AFX_IDW_DOCKBAR_BOTTOM<ept id="p1">**</ept> Dock to the bottom side of the frame window.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Dock to the left side of the frame window.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Dock to the right side of the frame window.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>If 0, the control bar can be docked to any side enabled for docking in the destination frame window.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Determines, in screen coordinates, where the control bar will be docked in the nonclient area of the destination frame window.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>The control bar will be docked to one of the sides of the frame window specified in the calls to both <bpt id="p1">[</bpt>CControlBar::EnableDocking<ept id="p1">](../../mfc/reference/ccontrolbar-class.md#ccontrolbar__enabledocking)</ept> and <bpt id="p2">[</bpt>CFrameWnd::EnableDocking<ept id="p2">](#cframewnd__enabledocking)</ept>.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The side chosen is determined by <ph id="ph1">`nDockBarID`</ph>.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>CFrameWnd::EnableDocking</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Call this function to enable dockable control bars in a frame window.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Specifies which sides of the frame window can serve as docking sites for control bars.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>It can be one or more of the following:</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Allows docking at the top of the client area.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Allows docking at the bottom of the client area.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Allows docking on the left side of the client area.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Allows docking on the right side of the client area.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Allows docking on any side of the client area.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>By default, control bars will be docked to a side of the frame window in the following order: top, bottom, left, right.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CToolBar::Create<ept id="p1">](../../mfc/reference/ctoolbar-class.md#ctoolbar__create)</ept>.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>CFrameWnd::EndModalState</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Call this member function to change a frame window from modal to modeless.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>enables all of the windows disabled by <bpt id="p1">[</bpt>BeginModalState<ept id="p1">](#cframewnd__beginmodalstate)</ept>.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>CFrameWnd::FloatControlBar</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Call this function to cause a control bar to not be docked to the frame window.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Points to the control bar to be floated.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>The location, in screen coordinates, where the top left corner of the control bar will be placed.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Specifies whether to align the control bar horizontally or vertically within its new frame window.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>It can be any one of the following:</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Orients the control bar vertically.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Orients the control bar vertically.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Orients the control bar horizontally.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Orients the control bar horizontally.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>If styles are passed specifying both horizontal and vertical orientation, the toolbar will be oriented horizontally.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Typically, this is done at application startup when the program is restoring settings from the previous execution.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>This function is called by the framework when the user causes a drop operation by releasing the left mouse button while dragging the control bar over a location that is not available for docking.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>CFrameWnd::GetActiveDocument</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Call this member function to obtain a pointer to the current <bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept> attached to the current active view.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>A pointer to the current <bpt id="p1">[</bpt>CDocument<ept id="p1">](../../mfc/reference/cdocument-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>If there is no current document, returns <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>CFrameWnd::GetActiveFrame</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Call this member function to obtain a pointer to the active multiple document interface (MDI) child window of an MDI frame window.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>A pointer to the active MDI child window.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>If the application is an SDI application, or the MDI frame window has no active document, the implicit <bpt id="p1">**</bpt>this<ept id="p1">**</ept> pointer will be returned.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>If there is no active MDI child or the application is a single document interface (SDI), the implicit <bpt id="p1">**</bpt>this<ept id="p1">**</ept> pointer is returned.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>CFrameWnd::GetActiveView</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Call this member function to obtain a pointer to the active view (if any) attached to a frame window ( <ph id="ph1">`CFrameWnd`</ph>).</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>A pointer to the current <bpt id="p1">[</bpt>CView<ept id="p1">](../../mfc/reference/cview-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>If there is no current view, returns <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>This function returns <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> when called for an MDI main frame window ( <ph id="ph1">`CMDIFrameWnd`</ph>).</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>In an MDI application, the MDI main frame window does not have a view associated with it.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Instead, each individual child window ( <ph id="ph1">`CMDIChildWnd`</ph>) has one or more associated views.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>The active view in an MDI application can be obtained by first finding the active MDI child window and then finding the active view for that child window.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The active MDI child window can be found by calling the function <ph id="ph1">`MDIGetActive`</ph> or <bpt id="p1">**</bpt>GetActiveFrame<ept id="p1">**</ept> as demonstrated in the following:</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#2</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>CFrameWnd::GetControlBar</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`GetControlBar`</ph> to gain access to the control bar that is associated with the ID.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>The ID number of a control bar.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>A pointer to the control bar that is associated with the ID.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nID`</ph> parameter refers to the unique identifier passed to the <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> method of the control bar.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>For more information on control bars, refer to the topic entitled <bpt id="p1">[</bpt>Control Bars<ept id="p1">](../../mfc/control-bars.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>will return the control bar even if it is floating and thus is not currently a child window of the frame.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>CFrameWnd::GetDockState</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Call this member function to store state information about the frame window's control bars in a <ph id="ph1">`CDockState`</ph> object.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Contains the current state of the frame window's control bars upon return.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>You can then write the contents of <ph id="ph1">`CDockState`</ph> to storage using <ph id="ph2">`CDockState::SaveState`</ph> or <ph id="ph3">`Serialize`</ph>.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>If you later want to restore the control bars to a previous state, load the state with <ph id="ph1">`CDockState::LoadState`</ph> or <ph id="ph2">`Serialize`</ph>, then call <ph id="ph3">`SetDockState`</ph> to apply the previous state to the frame window's control bars.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>CFrameWnd::GetMenuBarState</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Retrieves the display state of the menu in the current MFC application.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>The return value can have the following values:</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>AFX_MBS_VISIBLE (0x01) – The menu is visible.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>AFX_MBS_HIDDEN (0x02) – The menu is hidden.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>If a runtime error occurs, this method asserts in Debug mode and raises an exception derived from the <bpt id="p1">[</bpt>CException<ept id="p1">](../../mfc/reference/cexception-class.md)</ept> class.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>CFrameWnd::GetMenuBarVisibility</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Indicates whether the default state of the menu in the current MFC application is hidden or visible.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>This method returns one of the following values:</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>AFX_MBV_KEEPVISIBLE (0x01) - The menu is displayed at all times, and by default does not have the focus.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>AFX_MBV_DISPLAYONFOCUS (0x02) - The menu is hidden by default.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>If the menu is hidden, press the ALT key to display the menu and give it the focus.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>If the menu is displayed, press the ALT or ESC key to hide it.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>AFX_MBV_ DISPLAYONFOCUS (0x02) &amp;#124; AFX_MBV_DISPLAYONF10 (0x04) (bitwise combination (OR)) - The menu is hidden by default.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>If the menu is hidden, press the F10 key to display the menu and give it the focus.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>If the menu is displayed, press the F10 key to toggle the focus on or off the menu.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>The menu is displayed until you press the ALT or ESC key to hide it.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>If a runtime error occurs, this method asserts in Debug mode and raises an exception derived from the <bpt id="p1">[</bpt>CException<ept id="p1">](../../mfc/reference/cexception-class.md)</ept> class.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>CFrameWnd::GetMessageBar</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Call this member function to get a pointer to the status bar.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Pointer to the status-bar window.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>CFrameWnd::GetMessageString</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Override this function to provide custom strings for command IDs.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Resource ID of the desired message.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>object into which to place the message.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>The default implementation simply loads the string specified by <ph id="ph1">`nID`</ph> from the resource file.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>This function is called by the framework when the message string in the status bar needs updating.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>CFrameWnd::GetTitle</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Retrieves the title of the window object.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> object containing the current title of the window object.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>CFrameWnd::InitialUpdateFrame</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">**</bpt>IntitialUpdateFrame<ept id="p1">**</ept> after creating a new frame with <bpt id="p2">**</bpt>Create<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Points to the document to which the frame window is associated.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, indicates that the frame should become visible and active.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, no descendants are made visible.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>This causes all views in that frame window to receive their <ph id="ph1">`OnInitialUpdate`</ph> calls.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>Also, if there was not previously an active view, the primary view of the frame window is made active.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>The primary view is a view with a child ID of <bpt id="p1">**</bpt>AFX_IDW_PANE_FIRST<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Finally, the frame window is made visible if <ph id="ph1">`bMakeVisible`</ph> is nonzero.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bMakeVisible`</ph> is 0, the current focus and visible state of the frame window will remain unchanged.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>It is not necessary to call this function when using the framework's implementation of File New and File Open.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>CFrameWnd::InModalState</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>Call this member function to check if a frame window is modal or modeless.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Nonzero if yes; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>CFrameWnd::IsTracking</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Call this member function to determine if the splitter bar in the window is currently being moved.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Nonzero if a splitter operation is in progress; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>CFrameWnd::LoadAccelTable</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Call to load the specified accelerator table.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Identifies the name of the accelerator resource.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">**</bpt>MAKEINTRESOURCE<ept id="p1">**</ept> if the resource is identified with an integer ID.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Nonzero if the accelerator table was successfully loaded; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Only one table can be loaded at a time.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Accelerator tables loaded from resources are freed automatically when the application terminates.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>If you call <ph id="ph1">`LoadFrame`</ph> to create the frame window, the framework loads an accelerator table along with the menu and icon resources, and a subsequent call to this member function is then unnecessary.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>CFrameWnd::LoadBarState</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Call this function to restore the settings of each control bar owned by the frame window.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Name of a section in the initialization (INI) file or a key in the Windows registry where state information is stored.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Information restored includes visibility, horizontal/vertical orientation, docking state, and control-bar position.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>The settings you want to restore must be written to the registry before you call <ph id="ph1">`LoadBarState`</ph>.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>Write the information to the registry by calling <bpt id="p1">[</bpt>CWinApp::SetRegistryKey<ept id="p1">](../../mfc/reference/cwinapp-class.md#cwinapp__setregistrykey)</ept>.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Write the information to the INI file by calling <bpt id="p1">[</bpt>SaveBarState<ept id="p1">](#cframewnd__savebarstate)</ept>.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>CFrameWnd::LoadFrame</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Call to dynamically create a frame window from resource information.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>The ID of shared resources associated with the frame window.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>dwDefaultStyle</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>The frame's <bpt id="p1">[</bpt>style<ept id="p1">](../../mfc/reference/window-styles.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Include the <bpt id="p1">**</bpt>FWS_ADDTOTITLE<ept id="p1">**</ept> style if you want the title bar to automatically display the name of the document represented in the window.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>A pointer to the frame's parent.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CCreateContext<ept id="p1">](../../mfc/reference/ccreatecontext-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>This parameter can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Construct a <ph id="ph1">`CFrameWnd`</ph> object in two steps.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>First, invoke the constructor, which constructs the <ph id="ph1">`CFrameWnd`</ph> object, and then call <ph id="ph2">`LoadFrame`</ph>, which loads the Windows frame window and associated resources and attaches the frame window to the <ph id="ph3">`CFrameWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nIDResource`</ph> parameter specifies the menu, the accelerator table, the icon, and the string resource of the title for the frame window.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> member function rather than <ph id="ph1">`LoadFrame`</ph> when you want to specify all of the frame window's creation parameters.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>The framework calls <ph id="ph1">`LoadFrame`</ph> when it creates a frame window using a document template object.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>The framework uses the <ph id="ph1">`pContext`</ph> argument to specify the objects to be connected to the frame window, including any contained view objects.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>You can set the <ph id="ph1">`pContext`</ph> argument to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> when you call <ph id="ph2">`LoadFrame`</ph>.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>CFrameWnd::m_bAutoMenuEnable</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>When this data member is enabled (which is the default), menu items that do not have <ph id="ph1">`ON_UPDATE_COMMAND_UI`</ph> or <ph id="ph2">`ON_COMMAND`</ph> handlers will be automatically disabled when the user pulls down a menu.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>Menu items that have an <ph id="ph1">`ON_COMMAND`</ph> handler but no <ph id="ph2">`ON_UPDATE_COMMAND_UI`</ph> handler will be automatically enabled.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>When this data member is set, menu items are automatically enabled in the same way that toolbar buttons are enabled.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>has no effect on top-level menu items.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>This data member simplifies the implementation of optional commands based on the current selection and reduces the need to write <ph id="ph1">`ON_UPDATE_COMMAND_UI`</ph> handlers for enabling and disabling menu items.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#3</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>CFrameWnd::NegotiateBorderSpace</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Call this member function to negotiate border space in a frame window during OLE inplace activation.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>nBorderCmd</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>Contains one of the following values from the <bpt id="p1">**</bpt>enum BorderCmd<ept id="p1">**</ept>:</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>borderGet<ept id="p1">**</ept> = 1</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>borderRequest<ept id="p1">**</ept> = 2</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>borderSet<ept id="p1">**</ept> = 3</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>RECT<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> structure or a <bpt id="p2">[</bpt>CRect<ept id="p2">](../../atl-mfc-shared/reference/crect-class.md)</ept> object that specifies the coordinates of the border.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>This member function is the <bpt id="p1">**</bpt>CFrameWnd<ept id="p1">**</ept> implementation of OLE border space negotiation.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>CFrameWnd::OnBarCheck</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>Called whenever an action is performed on the specified control bar.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>The ID of the control bar being shown.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>Nonzero if the control bar existed; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>CFrameWnd::OnContextHelp</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>Handles SHIFT+F1 Help for in-place items.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>To enable context-sensitive help, you must add an</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocViewSDI#16</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>statement to your <ph id="ph1">`CFrameWnd`</ph> class message map and also add an accelerator-table entry, typically SHIFT+F1, to enable this member function.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>If your application is an OLE Container, <ph id="ph1">`OnContextHelp`</ph> puts all in-place items contained within the frame window object into Help mode.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>The cursor changes to an arrow and a question mark, and the user can then move the mouse pointer and press the left mouse button to select a dialog box, window, menu, or command button.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>This member function calls the Windows function <ph id="ph1">`WinHelp`</ph> with the Help context of the object under the cursor.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>CFrameWnd::OnCreateClient</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Called by the framework during the execution of <ph id="ph1">`OnCreate`</ph>.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>A pointer to a Windows <bpt id="p1">[</bpt>CREATESTRUCT<ept id="p1">](../../mfc/reference/createstruct-structure.md)</ept> structure <bpt id="p2">*</bpt>.<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CCreateContext<ept id="p1">](../../mfc/reference/ccreatecontext-structure.md)</ept> structure <bpt id="p2">*</bpt>.<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>Never call this function.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>The default implementation of this function creates a <ph id="ph1">`CView`</ph> object from the information provided in <ph id="ph2">`pContext`</ph>, if possible.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Override this function to override values passed in the <ph id="ph1">`CCreateContext`</ph> object or to change the way controls in the main client area of the frame window are created.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CCreateContext`</ph> members you can override are described in the <bpt id="p1">[</bpt>CCreateContext<ept id="p1">](../../mfc/reference/ccreatecontext-structure.md)</ept> class.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>Do not replace values passed in the <ph id="ph1">`CREATESTRUCT`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>They are for informational use only.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>If you want to override the initial window rectangle, for example, override the <ph id="ph1">`CWnd`</ph> member function <bpt id="p1">[</bpt>PreCreateWindow<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__precreatewindow)</ept>.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>CFrameWnd::OnHideMenuBar</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>This function is called when the system is about to hide the menu bar in the current MFC application.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>This event handler enables your application to perform custom actions when the system is about to hide the menu.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>You cannot prevent the menu from being hidden, but you can, for example, call other methods to retrieve the menu style or state.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>CFrameWnd::OnSetPreviewMode</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>Call this member function to set the application's main frame window into and out of print-preview mode.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>bPreview</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>Specifies whether or not to place the application in print-preview mode.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Set to <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> to place in print preview, <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> to cancel preview mode.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">**</bpt>CPrintPreviewState<ept id="p1">**</ept> structure.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>The default implementation disables all standard toolbars and hides the main menu and the main client window.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>This turns MDI frame windows into temporary SDI frame windows.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>Override this member function to customize the hiding and showing of control bars and other frame window parts during print preview.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>Call the base class implementation from within the overridden version.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>CFrameWnd::OnShowMenuBar</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>This function is called when the system is about to display the menu bar in the current MFC application.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>This event handler enables your application to perform custom actions when the menu is about to be displayed.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>You cannot prevent the menu from being displayed, but you can, for example, call other methods to retrieve the menu style or state.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>CFrameWnd::OnUpdateControlBarMenu</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>Called by the framework when the associated menu is updated.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CCmdUI<ept id="p1">](../../mfc/reference/ccmdui-class.md)</ept> object representing the menu that generated the update command.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>The update handler calls the <bpt id="p1">[</bpt>Enable<ept id="p1">](../../mfc/reference/ccmdui-class.md#ccmdui__enable)</ept> member function of the <ph id="ph1">`CCmdUI`</ph> object through <ph id="ph2">`pCmdUI`</ph> to update the user interface.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>CFrameWnd::RecalcLayout</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>Called by the framework when the standard control bars are toggled on or off or when the frame window is resized.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>Determines whether the active in-place item for the frame window receives notification of the layout change.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the item is notified; otherwise <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>The default implementation of this member function calls the <ph id="ph1">`CWnd`</ph> member function <ph id="ph2">`RepositionBars`</ph> to reposition all the control bars in the frame as well as in the main client window (usually a <ph id="ph3">`CView`</ph> or <bpt id="p1">**</bpt>MDICLIENT<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>Override this member function to control the appearance and behavior of control bars after the layout of the frame window has changed.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>For example, call it when you turn control bars on or off or add another control bar.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>CFrameWnd::rectDefault</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>Pass this static <ph id="ph1">`CRect`</ph> as a parameter when creating a window to allow Windows to choose the window's initial size and position.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>CFrameWnd::SaveBarState</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>Call this function to store information about each control bar owned by the frame window.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>Name of a section in the initialization file or a key in the Windows registry where state information is stored.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>This information can be read from the initialization file using <bpt id="p1">[</bpt>LoadBarState<ept id="p1">](#cframewnd__loadbarstate)</ept>.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>Information stored includes visibility, horizontal/vertical orientation, docking state, and control bar position.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>CFrameWnd::SetActivePreviewView</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>Designates the specified view to be the active view for Rich Preview.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>A pointer to a view to be activated.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>CFrameWnd::SetActiveView</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>Call this member function to set the active view.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>pViewNew</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>Specifies a pointer to a <bpt id="p1">[</bpt>CView<ept id="p1">](../../mfc/reference/cview-class.md)</ept> object, or <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> for no active view.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>Specifies whether the view is to be notified of activation.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, <ph id="ph1">`OnActivateView`</ph> is called for the new view; if <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>, it is not.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>The framework will call this function automatically as the user changes the focus to a view within the frame window.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>You can explicitly call <ph id="ph1">`SetActiveView`</ph> to change the focus to the specified view.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>CFrameWnd::SetDockState</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>Call this member function to apply state information stored in a <ph id="ph1">`CDockState`</ph> object to the frame window's control bars.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>Apply the stored state to the frame window's control bars.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>To restore a previous state of the control bars, you can load the stored state with <ph id="ph1">`CDockState::LoadState`</ph> or <ph id="ph2">`Serialize`</ph>, then use <ph id="ph3">`SetDockState`</ph> to apply it to the frame window's control bars.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>The previous state is stored in the <ph id="ph1">`CDockState`</ph> object with</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>CFrameWnd::SetMenuBarState</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>Sets the display state of the menu in the current MFC application to hidden or displayed.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>Specifies whether to display or hide the menu.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nState`</ph> parameter can have the following values:</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>-   AFX_MBS_VISIBLE (0x01) – Displays the menu if it is hidden, but has no effect if it is visible.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>-   AFX_MBS_HIDDEN (0x02) – Hides the menu if it is visible, but has no effect if it is hidden.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>if this method successfully changes the menu state; otherwise, <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>If a runtime error occurs, this method asserts in Debug mode and raises an exception derived from the <bpt id="p1">[</bpt>CException<ept id="p1">](../../mfc/reference/cexception-class.md)</ept> class.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>CFrameWnd::SetMenuBarVisibility</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>Sets the default behavior of the menu in the current MFC application to be either hidden or visible.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>Specifies whether the menu is by default hidden, or is visible and has the focus.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nStyle`</ph> parameter can have the following values:</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>-   AFX_MBV_KEEPVISIBLE (0x01) -</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>The menu is displayed at all times, and by default does not have the focus.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>-   AFX_MBV_DISPLAYONFOCUS (0x02) -</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>The menu is hidden by default.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>If the menu is hidden, press the ALT key to display the menu and give it the focus.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>If the menu is displayed, press the ALT or ESC key to hide menu.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>-   AFX_MBV_ DISPLAYONFOCUS (0x02) &amp;#124; AFX_MBV_DISPLAYONF10 (0x04)</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>(bitwise combination (OR)) - The menu is hidden by default.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>If the menu is hidden, press the F10 key to display the menu and give it the focus.</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>If the menu is displayed, press the F10 key to toggle the focus on or off the menu.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>The menu is displayed until you press the ALT or ESC key to hide it.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>If the value of the <ph id="ph1">`nStyle`</ph> parameter is not valid, this method asserts in Debug mode and raises <bpt id="p1">[</bpt>CInvalidArgException<ept id="p1">](../../mfc/reference/cinvalidargexception-class.md)</ept> in Release mode.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>In case of other runtime errors, this method asserts in Debug mode and raises an exception derived from the <bpt id="p1">[</bpt>CException<ept id="p1">](../../mfc/reference/cexception-class.md)</ept> class.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>This method affects the state of menus in applications written for <ph id="ph1">[!INCLUDE[windowsver](../../build/reference/includes/windowsver_md.md)]</ph> and later.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>CFrameWnd::SetMessageText</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>Call this function to place a string in the status-bar pane that has an ID of 0.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>Points to the string to be placed on the status bar.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>String resource ID of the string to be placed on the status bar.</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>This is typically the leftmost, and longest, pane of the status bar.</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>CFrameWnd::SetProgressBarPosition</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>Sets the current position for the Windows 7 progress bar displayed on the taskbar.</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>Specifies the position to set.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>It must be within the range set by <ph id="ph1">`SetProgressBarRange`</ph>.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>CFrameWnd::SetProgressBarRange</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>Sets the range for the Windows 7 progress bar displayed on the taskbar.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>Minimal value.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>Maximal value.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>CFrameWnd::SetProgressBarState</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>Sets the type and state of the progress indicator displayed on a taskbar button.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>Flags that control the current state of the progress button.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>Specify only one of the following flags because all states are mutually exclusive: TBPF_NOPROGRESS, TBPF_INDETERMINATE, TBPF_NORMAL, TBPF_ERROR, TBPF_PAUSED.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>CFrameWnd::SetTaskbarOverlayIcon</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>Overloaded.</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>Applies an overlay to a taskbar button to indicate application status or to notify the user.</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>Specifies the Resource ID of an icon to use as the overlay.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>See description for <ph id="ph1">`hIcon`</ph> for details.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>A pointer to a string that provides an alt text version of the information conveyed by the overlay, for accessibility purposes.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>The handle of an icon to use as the overlay.</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>This should be a small icon, measuring 16x16 pixels at 96 dots per inch (dpi).</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>If an overlay icon is already applied to the taskbar button, that existing overlay is replaced.</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>This value can be <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>How a <ph id="ph1">`NULL`</ph> value is handled depends on whether the taskbar button represents a single window or a group of windows.</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>It is the responsibility of the calling application to free <ph id="ph1">`hIcon`</ph> when it is no longer needed.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>if successful; <ph id="ph1">`FALSE`</ph> if OS version is less than Windows 7 or if an error occurs setting the icon.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>CFrameWnd::SetTitle</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>Sets the title of the window object.</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>A pointer to a character string containing the title of the window object.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>CFrameWnd::ShowControlBar</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>Call this member function to show or hide the control bar.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>Pointer to the control bar to be shown or hidden.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, specifies that the control bar is to be shown.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, specifies that the control bar is to be hidden.</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>bDelay</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, delay showing the control bar.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, show the control bar immediately.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>CFrameWnd::ShowOwnedWindows</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>Call this member function to show all windows that are descendants of the <ph id="ph1">`CFrameWnd`</ph> object.</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>Specifies whether the owned windows are to be shown or hidden.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>CWnd Class</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>CWnd Class</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>CMDIFrameWnd Class</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>CMDIChildWnd Class</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>CView Class</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>CDocTemplate Class</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>CRuntimeClass Structure</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>