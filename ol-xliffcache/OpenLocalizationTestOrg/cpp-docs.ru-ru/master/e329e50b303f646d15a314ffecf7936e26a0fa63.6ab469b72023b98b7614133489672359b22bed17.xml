{"nodes":[{"pos":[12,43],"content":"CComEnum Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CComEnum Class | Microsoft Docs","pos":[0,31]}]},{"pos":[598,612],"content":"CComEnum Class","linkify":"CComEnum Class","nodes":[{"content":"CComEnum Class","pos":[0,14]}]},{"content":"This class defines a COM enumerator object based on an array.","pos":[613,674]},{"pos":[683,689],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[942,952],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A COM enumerator ( <bpt id=\"p1\">[</bpt>IEnumXXXX<ept id=\"p1\">](https://msdn.microsoft.com/library/ms680089.aspx)</ept>) interface.","pos":[966,1058],"source":" A COM enumerator ( [IEnumXXXX](https://msdn.microsoft.com/library/ms680089.aspx)) interface."},{"content":"A pointer to the interface ID of the enumerator interface.","pos":[1075,1133]},{"content":"The type of item exposed by the enumerator interface.","pos":[1147,1200]},{"content":"A homogeneous <bpt id=\"p1\">[</bpt>copy policy class<ept id=\"p1\">](../../atl/atl-copy-policy-classes.md)</ept>.","pos":[1217,1289],"source":" A homogeneous [copy policy class](../../atl/atl-copy-policy-classes.md)."},{"content":"The threading model of the class.","pos":[1313,1346]},{"content":"This parameter defaults to the global object thread model used in your project.","pos":[1347,1426]},{"pos":[1435,1442],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`CComEnum`</ph> defines a COM enumerator object based on an array.","pos":[1446,1507],"source":"`CComEnum` defines a COM enumerator object based on an array."},{"content":"This class is analogous to <bpt id=\"p1\">[</bpt>CComEnumOnSTL<ept id=\"p1\">](../../atl/reference/ccomenumonstl-class.md)</ept> which implements an enumerator based on an STL container.","pos":[1508,1652],"source":" This class is analogous to [CComEnumOnSTL](../../atl/reference/ccomenumonstl-class.md) which implements an enumerator based on an STL container."},{"content":"Typical steps for using this class are outlined below.","pos":[1653,1707]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>ATL Collections and Enumerators<ept id=\"p1\">](../../atl/atl-collections-and-enumerators.md)</ept>.","pos":[1708,1814],"source":" For more information, see [ATL Collections and Enumerators](../../atl/atl-collections-and-enumerators.md)."},{"pos":[1823,1841],"content":"To use this class:","linkify":"To use this class:","nodes":[{"content":"To use this class:","pos":[0,18]}]},{"pos":[1849,1890],"content":"<ph id=\"ph1\">`typedef`</ph> a specialization of this class.","source":"`typedef` a specialization of this class."},{"pos":[1900,1979],"content":"Use the <ph id=\"ph1\">`typedef`</ph> as the template argument in a specialization of <ph id=\"ph2\">`CComObject`</ph>.","source":"Use the `typedef` as the template argument in a specialization of `CComObject`."},{"pos":[1989,2043],"content":"Create an instance of the <ph id=\"ph1\">`CComObject`</ph> specialization.","source":"Create an instance of the `CComObject` specialization."},{"pos":[2053,2180],"content":"Initialize the enumerator object by calling <bpt id=\"p1\">[</bpt>CComEnumImpl::Init<ept id=\"p1\">](../../atl/reference/ccomenumimpl-class.md#ccomenumimpl__init)</ept>.","source":"Initialize the enumerator object by calling [CComEnumImpl::Init](../../atl/reference/ccomenumimpl-class.md#ccomenumimpl__init)."},{"content":"Return the enumerator interface to the client.","pos":[2190,2236]},{"pos":[2245,2266],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[2310,2375],"content":"<bpt id=\"p1\">[</bpt>CComObjectRootEx<ept id=\"p1\">](../../atl/reference/ccomobjectrootex-class.md)</ept>","source":"[CComObjectRootEx](../../atl/reference/ccomobjectrootex-class.md)"},{"pos":[2382,2439],"content":"<bpt id=\"p1\">[</bpt>CComEnumImpl<ept id=\"p1\">](../../atl/reference/ccomenumimpl-class.md)</ept>","source":"[CComEnumImpl](../../atl/reference/ccomenumimpl-class.md)"},{"pos":[2465,2477],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2481,2501],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlcom.h","source":"**Header:** atlcom.h"},{"pos":[2510,2517],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The code shown below provides a reusable function for creating and initializing an enumerator object.","pos":[2521,2622]},{"pos":[2629,2702],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_COM#32<ept id=\"p2\">](../../atl/codesnippet/cpp/ccomenum-class_1.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_COM#32](../../atl/codesnippet/cpp/ccomenum-class_1.h)]"},{"pos":[2709,2822],"content":"This template function can be used to implement the <ph id=\"ph1\">`_NewEnum`</ph> property of a collection interface as shown below:","source":"This template function can be used to implement the `_NewEnum` property of a collection interface as shown below:"},{"pos":[2829,2902],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_COM#33<ept id=\"p2\">](../../atl/codesnippet/cpp/ccomenum-class_2.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_COM#33](../../atl/codesnippet/cpp/ccomenum-class_2.h)]"},{"content":"This code creates a <ph id=\"ph1\">`typedef`</ph> for <ph id=\"ph2\">`CComEnum`</ph> that exposes a vector of <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept>s through the <bpt id=\"p2\">**</bpt>IEnumVariant<ept id=\"p2\">**</ept> interface.","pos":[2909,3031],"source":"This code creates a `typedef` for `CComEnum` that exposes a vector of **VARIANT**s through the **IEnumVariant** interface."},{"content":"The <bpt id=\"p1\">**</bpt>CVariantArrayCollection<ept id=\"p1\">**</ept> class simply specializes <bpt id=\"p2\">**</bpt>CreateEnumerator<ept id=\"p2\">**</ept> to work with enumerator objects of this type and passes the necessary arguments.","pos":[3032,3190],"source":" The **CVariantArrayCollection** class simply specializes **CreateEnumerator** to work with enumerator objects of this type and passes the necessary arguments."},{"pos":[3199,3207],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Class Overview<ept id=\"p1\">](../../atl/atl-class-overview.md)</ept><ph id=\"ph1\"> </ph>","pos":[3211,3261],"source":"[Class Overview](../../atl/atl-class-overview.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CComObjectThreadModel<ept id=\"p1\">](atl-typedefs.md#ccomobjectthreadmodel)</ept><ph id=\"ph1\"> </ph>","pos":[3264,3328],"source":" [CComObjectThreadModel](atl-typedefs.md#ccomobjectthreadmodel) "},{"content":"<bpt id=\"p1\"> [</bpt>CComEnumImpl Class<ept id=\"p1\">](../../atl/reference/ccomenumimpl-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[3331,3396],"source":" [CComEnumImpl Class](../../atl/reference/ccomenumimpl-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CComObjectRootEx Class<ept id=\"p1\">](../../atl/reference/ccomobjectrootex-class.md)</ept>","pos":[3399,3471],"source":" [CComObjectRootEx Class](../../atl/reference/ccomobjectrootex-class.md)"}],"content":"---\ntitle: \"CComEnum Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CComEnum\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CComEnum class\"\nms.assetid: bff7dd7b-eb6e-4d6e-96ed-2706e66c8b3b\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CComEnum Class\nThis class defines a COM enumerator object based on an array.  \n  \n## Syntax  \n  \n```\ntemplate <class Base,\n    const IID* piid, class T, class Copy, class ThreadModel = CcomObjectThreadModel>  class ATL_NO_VTABLE CComEnum :  public CComEnumImpl<Base,\n    piid,\n T,\n    Copy>,\n public CComObjectRootEx<ThreadModel>\n```  \n  \n#### Parameters  \n `Base`  \n A COM enumerator ( [IEnumXXXX](https://msdn.microsoft.com/library/ms680089.aspx)) interface.  \n  \n `piid`  \n A pointer to the interface ID of the enumerator interface.  \n  \n `T`  \n The type of item exposed by the enumerator interface.  \n  \n `Copy`  \n A homogeneous [copy policy class](../../atl/atl-copy-policy-classes.md).  \n  \n `ThreadModel`  \n The threading model of the class. This parameter defaults to the global object thread model used in your project.  \n  \n## Remarks  \n `CComEnum` defines a COM enumerator object based on an array. This class is analogous to [CComEnumOnSTL](../../atl/reference/ccomenumonstl-class.md) which implements an enumerator based on an STL container. Typical steps for using this class are outlined below. For more information, see [ATL Collections and Enumerators](../../atl/atl-collections-and-enumerators.md).  \n  \n## To use this class:  \n  \n- `typedef` a specialization of this class.  \n  \n-   Use the `typedef` as the template argument in a specialization of `CComObject`.  \n  \n-   Create an instance of the `CComObject` specialization.  \n  \n-   Initialize the enumerator object by calling [CComEnumImpl::Init](../../atl/reference/ccomenumimpl-class.md#ccomenumimpl__init).  \n  \n-   Return the enumerator interface to the client.  \n  \n## Inheritance Hierarchy  \n `CComObjectRootBase`  \n  \n `Base`  \n  \n [CComObjectRootEx](../../atl/reference/ccomobjectrootex-class.md)  \n  \n [CComEnumImpl](../../atl/reference/ccomenumimpl-class.md)  \n  \n `CComEnum`  \n  \n## Requirements  \n **Header:** atlcom.h  \n  \n## Example  \n The code shown below provides a reusable function for creating and initializing an enumerator object.  \n  \n [!code-cpp[NVC_ATL_COM#32](../../atl/codesnippet/cpp/ccomenum-class_1.h)]  \n  \n This template function can be used to implement the `_NewEnum` property of a collection interface as shown below:  \n  \n [!code-cpp[NVC_ATL_COM#33](../../atl/codesnippet/cpp/ccomenum-class_2.h)]  \n  \n This code creates a `typedef` for `CComEnum` that exposes a vector of **VARIANT**s through the **IEnumVariant** interface. The **CVariantArrayCollection** class simply specializes **CreateEnumerator** to work with enumerator objects of this type and passes the necessary arguments.  \n  \n## See Also  \n [Class Overview](../../atl/atl-class-overview.md)   \n [CComObjectThreadModel](atl-typedefs.md#ccomobjectthreadmodel)   \n [CComEnumImpl Class](../../atl/reference/ccomenumimpl-class.md)   \n [CComObjectRootEx Class](../../atl/reference/ccomobjectrootex-class.md)\n"}