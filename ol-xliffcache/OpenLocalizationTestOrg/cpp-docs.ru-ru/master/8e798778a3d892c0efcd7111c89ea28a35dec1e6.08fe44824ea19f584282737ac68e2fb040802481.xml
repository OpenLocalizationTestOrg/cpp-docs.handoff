{"nodes":[{"pos":[12,35],"content":"ferror | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ferror | Microsoft Docs","pos":[0,23]}]},{"content":"ferror","pos":[974,980]},{"content":"Tests for an error on a stream.","pos":[981,1012]},{"content":"Syntax","pos":[1021,1027]},{"content":"Parameters","pos":[1092,1102]},{"content":"Pointer to <ph id=\"ph1\">`FILE`</ph> structure.","pos":[1118,1146],"source":" Pointer to `FILE` structure."},{"content":"Return Value","pos":[1155,1167]},{"content":"If no error has occurred on <ph id=\"ph1\">`stream`</ph>, <ph id=\"ph2\">`ferror`</ph> returns 0.","pos":[1171,1228],"source":"If no error has occurred on `stream`, `ferror` returns 0."},{"content":"Otherwise, it returns a nonzero value.","pos":[1229,1267]},{"content":"If stream is <ph id=\"ph1\">`NULL`</ph>, <ph id=\"ph2\">`ferror`</ph> invokes the invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[1268,1425],"source":" If stream is `NULL`, `ferror` invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, this function sets <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and returns 0.","pos":[1426,1516],"source":" If execution is allowed to continue, this function sets `errno` to `EINVAL` and returns 0."},{"pos":[1523,1697],"content":"See <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept> for more information on these, and other, error codes.","source":"See [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md) for more information on these, and other, error codes."},{"content":"Remarks","pos":[1706,1713]},{"content":"The <ph id=\"ph1\">`ferror`</ph> routine (implemented both as a function and as a macro) tests for a reading or writing error on the file associated with <ph id=\"ph2\">`stream`</ph>.","pos":[1717,1860],"source":"The `ferror` routine (implemented both as a function and as a macro) tests for a reading or writing error on the file associated with `stream`."},{"content":"If an error has occurred, the error indicator for the stream remains set until the stream is closed or rewound, or until <ph id=\"ph1\">`clearerr`</ph> is called against it.","pos":[1861,2014],"source":" If an error has occurred, the error indicator for the stream remains set until the stream is closed or rewound, or until `clearerr` is called against it."},{"content":"Requirements","pos":[2023,2035]},{"content":"Function","pos":[2042,2050]},{"content":"Required header","pos":[2051,2066]},{"content":"stdio.h&gt;","pos":[2123,2131],"source":"stdio.h>"},{"pos":[2139,2263],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[2272,2279]},{"pos":[2283,2353],"content":"See the example for <bpt id=\"p1\">[</bpt>feof<ept id=\"p1\">](../../c-runtime-library/reference/feof.md)</ept>.","source":"See the example for [feof](../../c-runtime-library/reference/feof.md)."},{"content":".NET Framework Equivalent","pos":[2362,2387]},{"content":"Not applicable.","pos":[2391,2406]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[2407,2454],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[2455,2580],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[2589,2597]},{"content":"Error Handling","pos":[2602,2616]},{"content":"Stream I/O","pos":[2670,2680]},{"content":"clearerr","pos":[2726,2734]},{"content":"_eof","pos":[2788,2792]},{"content":"feof","pos":[2841,2845]},{"content":"fopen, _wfopen","pos":[2895,2909]},{"content":"perror, _wperror","pos":[2967,2983]}],"content":"---\ntitle: \"ferror | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"ferror\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-stdio-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"ferror\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"ferror function\"\n  - \"streams, testing for errors\"\n  - \"errors [C++], testing for stream\"\nms.assetid: 528a34bc-f2aa-4c3f-b89a-5b148e6864f7\ncaps.latest.revision: 13\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ferror\nTests for an error on a stream.  \n  \n## Syntax  \n  \n```  \nint ferror(   \n   FILE *stream   \n);  \n```  \n  \n#### Parameters  \n `stream`  \n Pointer to `FILE` structure.  \n  \n## Return Value  \n If no error has occurred on `stream`, `ferror` returns 0. Otherwise, it returns a nonzero value. If stream is `NULL`, `ferror` invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, this function sets `errno` to `EINVAL` and returns 0.  \n  \n See [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md) for more information on these, and other, error codes.  \n  \n## Remarks  \n The `ferror` routine (implemented both as a function and as a macro) tests for a reading or writing error on the file associated with `stream`. If an error has occurred, the error indicator for the stream remains set until the stream is closed or rewound, or until `clearerr` is called against it.  \n  \n## Requirements  \n  \n|Function|Required header|  \n|--------------|---------------------|  \n|`ferror`|\\<stdio.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n See the example for [feof](../../c-runtime-library/reference/feof.md).  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Error Handling](../../c-runtime-library/error-handling-crt.md)   \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [clearerr](../../c-runtime-library/reference/clearerr.md)   \n [_eof](../../c-runtime-library/reference/eof.md)   \n [feof](../../c-runtime-library/reference/feof.md)   \n [fopen, _wfopen](../../c-runtime-library/reference/fopen-wfopen.md)   \n [perror, _wperror](../../c-runtime-library/reference/perror-wperror.md)"}