{"nodes":[{"pos":[12,54],"content":"_getcwd_dbg, _wgetcwd_dbg | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_getcwd_dbg, _wgetcwd_dbg | Microsoft Docs","pos":[0,42]}]},{"pos":[1192,1217],"content":"_getcwd_dbg, _wgetcwd_dbg","linkify":"_getcwd_dbg, _wgetcwd_dbg","nodes":[{"content":"_getcwd_dbg, _wgetcwd_dbg","pos":[0,25]}]},{"pos":[1218,1353],"content":"Debug versions of the <bpt id=\"p1\">[</bpt>_getcwd, _wgetcwd<ept id=\"p1\">](../../c-runtime-library/reference/getcwd-wgetcwd.md)</ept> functions (only available during debug).","source":"Debug versions of the [_getcwd, _wgetcwd](../../c-runtime-library/reference/getcwd-wgetcwd.md) functions (only available during debug)."},{"pos":[1362,1368],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1663,1673],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Storage location for the path.","pos":[1689,1719]},{"content":"Maximum length of the path in characters: <ph id=\"ph1\">`char`</ph> for <ph id=\"ph2\">`_getcwd_dbg`</ph> and <ph id=\"ph3\">`wchar_t`</ph> for <ph id=\"ph4\">`_wgetcwd_dbg`</ph>.","pos":[1738,1838],"source":" Maximum length of the path in characters: `char` for `_getcwd_dbg` and `wchar_t` for `_wgetcwd_dbg`."},{"content":"Requested type of the memory block: <ph id=\"ph1\">`_CLIENT_BLOCK`</ph> or <ph id=\"ph2\">`_NORMAL_BLOCK`</ph>.","pos":[1860,1931],"source":" Requested type of the memory block: `_CLIENT_BLOCK` or `_NORMAL_BLOCK`."},{"content":"Pointer to the name of the source file that requested the allocation operation or <ph id=\"ph1\">`NULL`</ph>.","pos":[1952,2041],"source":" Pointer to the name of the source file that requested the allocation operation or `NULL`."},{"content":"Line number in the source file where the allocation operation was requested or <ph id=\"ph1\">`NULL`</ph>.","pos":[2064,2150],"source":" Line number in the source file where the allocation operation was requested or `NULL`."},{"pos":[2159,2171],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a pointer to <ph id=\"ph1\">`buffer`</ph>.","pos":[2175,2205],"source":"Returns a pointer to `buffer`."},{"content":"A <ph id=\"ph1\">`NULL`</ph> return value indicates an error, and <ph id=\"ph2\">`errno`</ph> is set either to <ph id=\"ph3\">`ENOMEM`</ph>, indicating that there is insufficient memory to allocate <ph id=\"ph4\">`maxlen`</ph> bytes (when a <ph id=\"ph5\">`NULL`</ph> argument is given as <ph id=\"ph6\">`buffer`</ph>), or to <ph id=\"ph7\">`ERANGE`</ph>, indicating that the path is longer than <ph id=\"ph8\">`maxlen`</ph> characters.","pos":[2206,2482],"source":" A `NULL` return value indicates an error, and `errno` is set either to `ENOMEM`, indicating that there is insufficient memory to allocate `maxlen` bytes (when a `NULL` argument is given as `buffer`), or to `ERANGE`, indicating that the path is longer than `maxlen` characters."},{"pos":[2489,2631],"content":"For more information, see <bpt id=\"p1\">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For more information, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"pos":[2640,2647],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_getcwd_dbg`</ph> and <ph id=\"ph2\">`_wgetcwd_dbg`</ph> functions are identical to <ph id=\"ph3\">`_getcwd`</ph> and <ph id=\"ph4\">`_wgetcwd`</ph> except that, when _<ph id=\"ph5\">`DEBUG`</ph> is defined, these functions use the debug version of <ph id=\"ph6\">`malloc`</ph> and <ph id=\"ph7\">`_malloc_dbg`</ph> to allocate memory if <ph id=\"ph8\">`NULL`</ph> is passed as the first parameter.","pos":[2651,2909],"source":"The `_getcwd_dbg` and `_wgetcwd_dbg` functions are identical to `_getcwd` and `_wgetcwd` except that, when _`DEBUG` is defined, these functions use the debug version of `malloc` and `_malloc_dbg` to allocate memory if `NULL` is passed as the first parameter."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>_malloc_dbg<ept id=\"p1\">](../../c-runtime-library/reference/malloc-dbg.md)</ept>.","pos":[2910,2999],"source":" For more information, see [_malloc_dbg](../../c-runtime-library/reference/malloc-dbg.md)."},{"content":"You do not need to call these functions explicitly in most cases.","pos":[3006,3071]},{"content":"Instead, you can define the <ph id=\"ph1\">`_CRTDBG_MAP_ALLOC`</ph> flag.","pos":[3072,3125],"source":" Instead, you can define the `_CRTDBG_MAP_ALLOC` flag."},{"content":"When <ph id=\"ph1\">`_CRTDBG_MAP_ALLOC`</ph> is defined, calls to <ph id=\"ph2\">`_getcwd`</ph>and <ph id=\"ph3\">`_wgetcwd`</ph>are remapped to <ph id=\"ph4\">`_getcwd_dbg`</ph>and <ph id=\"ph5\">`_wgetcwd_dbg`</ph>, respectively, with the <ph id=\"ph6\">`blockType`</ph> set to <ph id=\"ph7\">`_NORMAL_BLOCK`</ph>.","pos":[3126,3302],"source":" When `_CRTDBG_MAP_ALLOC` is defined, calls to `_getcwd`and `_wgetcwd`are remapped to `_getcwd_dbg`and `_wgetcwd_dbg`, respectively, with the `blockType` set to `_NORMAL_BLOCK`."},{"content":"Thus, you do not need to call these functions explicitly unless you want to mark the heap blocks as <ph id=\"ph1\">`_CLIENT_BLOCK`</ph>.","pos":[3303,3419],"source":" Thus, you do not need to call these functions explicitly unless you want to mark the heap blocks as `_CLIENT_BLOCK`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Types of blocks on the debug heap<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","pos":[3420,3529],"source":" For more information, see [Types of blocks on the debug heap](/visualstudio/debugger/crt-debug-heap-details)."},{"pos":[3538,3567],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"Tchar.h routine","pos":[3574,3589]},{"content":"_UNICODE and _MBCS not defined","pos":[3590,3620]},{"content":"_MBCS defined","pos":[3621,3634]},{"content":"_UNICODE defined","pos":[3635,3651]},{"pos":[3833,3845],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[3852,3859]},{"content":"Required header","pos":[3860,3875]},{"content":"<ph id=\"ph1\">\\&lt;</ph>crtdbg.h&gt;","pos":[3934,3945],"source":"\\<crtdbg.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>crtdbg.h&gt;","pos":[3965,3976],"source":"\\<crtdbg.h>"},{"pos":[3984,4102],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[4111,4136],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"&lt;xref:System.Environment.CurrentDirectory%2A&gt;","pos":[4140,4185],"source":"<xref:System.Environment.CurrentDirectory%2A>"},{"pos":[4194,4202],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>_getcwd, _wgetcwd<ept id=\"p1\">](../../c-runtime-library/reference/getcwd-wgetcwd.md)</ept><ph id=\"ph1\"> </ph>","pos":[4206,4279],"source":"[_getcwd, _wgetcwd](../../c-runtime-library/reference/getcwd-wgetcwd.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Directory Control<ept id=\"p1\">](../../c-runtime-library/directory-control.md)</ept><ph id=\"ph1\"> </ph>","pos":[4282,4349],"source":" [Directory Control](../../c-runtime-library/directory-control.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Debug Versions of Heap Allocation Functions<ept id=\"p1\">](/visualstudio/debugger/debug-versions-of-heap-allocation-functions)</ept>","pos":[4352,4466],"source":" [Debug Versions of Heap Allocation Functions](/visualstudio/debugger/debug-versions-of-heap-allocation-functions)"}],"content":"---\ntitle: \"_getcwd_dbg, _wgetcwd_dbg | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_wgetcwd_dbg\"\n  - \"_getcwd_dbg\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-environment-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_getcwd_dbg\"\n  - \"_wgetcwd_dbg\"\n  - \"getcwd_dbg\"\n  - \"wgetcwd_dbg\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"wgetcwd_dbg function\"\n  - \"working directory\"\n  - \"_getcwd_dbg function\"\n  - \"getcwd_dbg function\"\n  - \"current working directory\"\n  - \"_wgetcwd_dbg function\"\n  - \"directories [C++], current working\"\nms.assetid: 8d5d151f-d844-4aa6-a28c-1c11a22dc00d\ncaps.latest.revision: 15\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _getcwd_dbg, _wgetcwd_dbg\nDebug versions of the [_getcwd, _wgetcwd](../../c-runtime-library/reference/getcwd-wgetcwd.md) functions (only available during debug).  \n  \n## Syntax  \n  \n```  \nchar *_getcwd_dbg(   \n   char *buffer,  \n   int maxlen,  \n   int blockType,  \n   const char *filename,  \n   int linenumber   \n);  \nwchar_t *_wgetcwd_dbg(   \n   wchar_t *buffer,  \n   int maxlen,  \n   int blockType,  \n   const char *filename,  \n   int linenumber   \n);  \n```  \n  \n#### Parameters  \n `buffer`  \n Storage location for the path.  \n  \n `maxlen`  \n Maximum length of the path in characters: `char` for `_getcwd_dbg` and `wchar_t` for `_wgetcwd_dbg`.  \n  \n `blockType`  \n Requested type of the memory block: `_CLIENT_BLOCK` or `_NORMAL_BLOCK`.  \n  \n `filename`  \n Pointer to the name of the source file that requested the allocation operation or `NULL`.  \n  \n `linenumber`  \n Line number in the source file where the allocation operation was requested or `NULL`.  \n  \n## Return Value  \n Returns a pointer to `buffer`. A `NULL` return value indicates an error, and `errno` is set either to `ENOMEM`, indicating that there is insufficient memory to allocate `maxlen` bytes (when a `NULL` argument is given as `buffer`), or to `ERANGE`, indicating that the path is longer than `maxlen` characters.  \n  \n For more information, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n The `_getcwd_dbg` and `_wgetcwd_dbg` functions are identical to `_getcwd` and `_wgetcwd` except that, when _`DEBUG` is defined, these functions use the debug version of `malloc` and `_malloc_dbg` to allocate memory if `NULL` is passed as the first parameter. For more information, see [_malloc_dbg](../../c-runtime-library/reference/malloc-dbg.md).  \n  \n You do not need to call these functions explicitly in most cases. Instead, you can define the `_CRTDBG_MAP_ALLOC` flag. When `_CRTDBG_MAP_ALLOC` is defined, calls to `_getcwd`and `_wgetcwd`are remapped to `_getcwd_dbg`and `_wgetcwd_dbg`, respectively, with the `blockType` set to `_NORMAL_BLOCK`. Thus, you do not need to call these functions explicitly unless you want to mark the heap blocks as `_CLIENT_BLOCK`. For more information, see [Types of blocks on the debug heap](/visualstudio/debugger/crt-debug-heap-details).  \n  \n## Generic-Text Routine Mappings  \n  \n|Tchar.h routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_tgetcwd_dbg`|`_getcwd_dbg`|`_getcwd_dbg`|`_wgetcwd_dbg`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_getcwd_dbg`|\\<crtdbg.h>|  \n|`_wgetcwd_dbg`|\\<crtdbg.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## .NET Framework Equivalent  \n <xref:System.Environment.CurrentDirectory%2A>  \n  \n## See Also  \n [_getcwd, _wgetcwd](../../c-runtime-library/reference/getcwd-wgetcwd.md)   \n [Directory Control](../../c-runtime-library/directory-control.md)   \n [Debug Versions of Heap Allocation Functions](/visualstudio/debugger/debug-versions-of-heap-allocation-functions)"}