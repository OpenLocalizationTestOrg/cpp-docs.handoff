{"nodes":[{"pos":[12,42],"content":"threadprivate | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"threadprivate | Microsoft Docs","pos":[0,30]}]},{"content":"threadprivate","pos":[616,629]},{"content":"Specifies that a variable is private to a thread.","pos":[630,679]},{"content":"Syntax","pos":[688,694]},{"content":"Remarks","pos":[751,758]},{"content":"where,","pos":[762,768]},{"content":"A comma-separated list of variables that you want to make private to a thread.","pos":[784,862]},{"content":"must be either a global- or namespace-scoped variable or a local static variable.","pos":[869,950]},{"content":"Remarks","pos":[959,966]},{"pos":[970,1027],"content":"The <ph id=\"ph1\">`threadprivate`</ph> directive supports no OpenMP clauses.","source":"The `threadprivate` directive supports no OpenMP clauses."},{"pos":[1034,1151],"content":"For more information, see <bpt id=\"p1\">[</bpt>2.7.1 threadprivate Directive<ept id=\"p1\">](../../../parallel/openmp/2-7-1-threadprivate-directive.md)</ept>.","source":"For more information, see [2.7.1 threadprivate Directive](../../../parallel/openmp/2-7-1-threadprivate-directive.md)."},{"pos":[1158,1318],"content":"The <ph id=\"ph1\">`threadprivate`</ph> directive is based on the <bpt id=\"p1\">[</bpt>thread<ept id=\"p1\">](../../../cpp/thread.md)</ept><ph id=\"ph2\">`__declspec`</ph> attribute; limits on <bpt id=\"p2\">**</bpt>__declspec(thread)<ept id=\"p2\">**</ept> apply to <ph id=\"ph3\">`threadprivate`</ph>.","source":"The `threadprivate` directive is based on the [thread](../../../cpp/thread.md)`__declspec` attribute; limits on **__declspec(thread)** apply to `threadprivate`."},{"content":"You cannot use <ph id=\"ph1\">`threadprivate`</ph> in any DLL that will be loaded via <bpt id=\"p1\">[</bpt>LoadLibrary<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms684175)</ept>.","pos":[1325,1465],"source":"You cannot use `threadprivate` in any DLL that will be loaded via [LoadLibrary](http://msdn.microsoft.com/library/windows/desktop/ms684175)."},{"content":"This includes DLLs that are loaded with <bpt id=\"p1\">[</bpt>/DELAYLOAD (Delay Load Import)<ept id=\"p1\">](../../../build/reference/delayload-delay-load-import.md)</ept>, which also uses <bpt id=\"p2\">**</bpt>LoadLibrary<ept id=\"p2\">**</ept>.","pos":[1467,1630],"source":"  This includes DLLs that are loaded with [/DELAYLOAD (Delay Load Import)](../../../build/reference/delayload-delay-load-import.md), which also uses **LoadLibrary**."},{"pos":[1637,1719],"content":"You can use <ph id=\"ph1\">`threadprivate`</ph> in a DLL that is statically loaded at process startup.","source":"You can use `threadprivate` in a DLL that is statically loaded at process startup."},{"content":"Because <ph id=\"ph1\">`threadprivate`</ph> is based on <bpt id=\"p1\">**</bpt>__declspec(thread)<ept id=\"p1\">**</ept>, a <ph id=\"ph2\">`threadprivate`</ph> variable will exist in any thread started in the process, not just those threads that are part of a thread team spawned by a parallel region.","pos":[1726,1945],"source":"Because `threadprivate` is based on **__declspec(thread)**, a `threadprivate` variable will exist in any thread started in the process, not just those threads that are part of a thread team spawned by a parallel region."},{"content":"This is an implementation detail that you may want to be aware of, since you may notice, for example, constructors for a <ph id=\"ph1\">`threadprivate`</ph> user-defined type called more often then expected.","pos":[1947,2134],"source":"  This is an implementation detail that you may want to be aware of, since you may notice, for example, constructors for a `threadprivate` user-defined type called more often then expected."},{"content":"A <ph id=\"ph1\">`threadprivate`</ph> variable of a destructable type is not guaranteed to have its destructor called.","pos":[2141,2239],"source":"A `threadprivate` variable of a destructable type is not guaranteed to have its destructor called."},{"content":"For example:","pos":[2241,2253]},{"content":"Users have no control as to when the threads constituting the parallel region will terminate.","pos":[2444,2537]},{"content":"If those threads exist when the process exits, the threads will not be notified about the process exit, and the destructor will not be called for <ph id=\"ph1\">`threaded_var`</ph> on any thread except the one that exits (here, the primary thread).","pos":[2539,2767],"source":"  If those threads exist when the process exits, the threads will not be notified about the process exit, and the destructor will not be called for `threaded_var` on any thread except the one that exits (here, the primary thread)."},{"content":"So code should not count on proper destruction of <ph id=\"ph1\">`threadprivate`</ph> variables.","pos":[2769,2845],"source":"  So code should not count on proper destruction of `threadprivate` variables."},{"content":"Example","pos":[2854,2861]},{"pos":[2865,2972],"content":"For a sample of using <ph id=\"ph1\">`threadprivate`</ph>, see <bpt id=\"p1\">[</bpt>private<ept id=\"p1\">](../../../parallel/openmp/reference/private-openmp.md)</ept>.","source":"For a sample of using `threadprivate`, see [private](../../../parallel/openmp/reference/private-openmp.md)."},{"content":"See Also","pos":[2981,2989]},{"content":"Directives","pos":[2994,3004]}],"content":"---\ntitle: \"threadprivate | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"threadprivate\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"threadprivate OpenMP directive\"\nms.assetid: 3515aaed-6f9d-4d59-85eb-342378bea2d3\ncaps.latest.revision: 11\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# threadprivate\nSpecifies that a variable is private to a thread.  \n  \n## Syntax  \n  \n```  \n#pragma omp threadprivate(var)  \n```  \n  \n## Remarks  \n where,  \n  \n `var`  \n A comma-separated list of variables that you want to make private to a thread. `var` must be either a global- or namespace-scoped variable or a local static variable.  \n  \n## Remarks  \n The `threadprivate` directive supports no OpenMP clauses.  \n  \n For more information, see [2.7.1 threadprivate Directive](../../../parallel/openmp/2-7-1-threadprivate-directive.md).  \n  \n The `threadprivate` directive is based on the [thread](../../../cpp/thread.md)`__declspec` attribute; limits on **__declspec(thread)** apply to `threadprivate`.  \n  \n You cannot use `threadprivate` in any DLL that will be loaded via [LoadLibrary](http://msdn.microsoft.com/library/windows/desktop/ms684175).  This includes DLLs that are loaded with [/DELAYLOAD (Delay Load Import)](../../../build/reference/delayload-delay-load-import.md), which also uses **LoadLibrary**.  \n  \n You can use `threadprivate` in a DLL that is statically loaded at process startup.  \n  \n Because `threadprivate` is based on **__declspec(thread)**, a `threadprivate` variable will exist in any thread started in the process, not just those threads that are part of a thread team spawned by a parallel region.  This is an implementation detail that you may want to be aware of, since you may notice, for example, constructors for a `threadprivate` user-defined type called more often then expected.  \n  \n A `threadprivate` variable of a destructable type is not guaranteed to have its destructor called.  For example:  \n  \n```  \nstruct MyType   \n{  \n    ~MyType();  \n};  \n  \nMyType threaded_var;  \n#pragma omp threadprivate(threaded_var)  \nint main()   \n{  \n    #pragma omp parallel  \n    {}  \n}  \n```  \n  \n Users have no control as to when the threads constituting the parallel region will terminate.  If those threads exist when the process exits, the threads will not be notified about the process exit, and the destructor will not be called for `threaded_var` on any thread except the one that exits (here, the primary thread).  So code should not count on proper destruction of `threadprivate` variables.  \n  \n## Example  \n For a sample of using `threadprivate`, see [private](../../../parallel/openmp/reference/private-openmp.md).  \n  \n## See Also  \n [Directives](../../../parallel/openmp/reference/openmp-directives.md)"}