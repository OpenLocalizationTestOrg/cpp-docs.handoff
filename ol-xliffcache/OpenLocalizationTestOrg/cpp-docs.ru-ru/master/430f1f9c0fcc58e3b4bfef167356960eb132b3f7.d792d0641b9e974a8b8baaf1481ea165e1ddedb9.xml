{"nodes":[{"pos":[12,43],"content":"modulus Struct | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"modulus Struct | Microsoft Docs","pos":[0,31]}]},{"pos":[709,723],"content":"modulus Struct","linkify":"modulus Struct","nodes":[{"content":"modulus Struct","pos":[0,14]}]},{"pos":[724,830],"content":"A predefined function object that performs the modulus division operation ( <ph id=\"ph1\">`operator%`</ph>) on its arguments.","source":"A predefined function object that performs the modulus division operation ( `operator%`) on its arguments."},{"pos":[839,845],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1259,1269],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<ph id=\"ph1\">`Type`</ph>, <ph id=\"ph2\">`T`</ph>, <ph id=\"ph3\">`U`</ph>","pos":[1273,1289],"source":"`Type`, `T`, `U`"},{"content":"Any type that supports an <ph id=\"ph1\">`operator%`</ph> that takes operands of the specified or inferred types.","pos":[1293,1386],"source":" Any type that supports an `operator%` that takes operands of the specified or inferred types."},{"content":"The left operand of the modulus operation.","pos":[1403,1445]},{"content":"The unspecialized template takes an lvalue reference argument of type <ph id=\"ph1\">`Type`</ph>.","pos":[1446,1523],"source":" The unspecialized template takes an lvalue reference argument of type `Type`."},{"content":"The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type <ph id=\"ph1\">`T`</ph>.","pos":[1524,1635],"source":" The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `T`."},{"content":"The right operand of the modulus operation.","pos":[1653,1696]},{"content":"The unspecialized template takes an lvalue reference argument of type <ph id=\"ph1\">`Type`</ph>.","pos":[1697,1774],"source":" The unspecialized template takes an lvalue reference argument of type `Type`."},{"content":"The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type <ph id=\"ph1\">`U`</ph>.","pos":[1775,1886],"source":" The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `U`."},{"pos":[1895,1907],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The result of <ph id=\"ph1\">`Left``%``Right`</ph>.","pos":[1911,1942],"source":"The result of `Left``%``Right`."},{"content":"The specialized template does perfect forwarding of the result, which has the type that's returned by <ph id=\"ph1\">`operator%`</ph>.","pos":[1943,2057],"source":" The specialized template does perfect forwarding of the result, which has the type that's returned by `operator%`."},{"pos":[2066,2073],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2077,2209],"content":"The <ph id=\"ph1\">`modulus`</ph> functor is restricted to integral types for the basic data types, or to user-defined types that implement <ph id=\"ph2\">`operator%`</ph>.","source":"The `modulus` functor is restricted to integral types for the basic data types, or to user-defined types that implement `operator%`."},{"pos":[2218,2225],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3585,3597],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3601,3626],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>functional&gt;","source":"**Header:** \\<functional>"},{"pos":[3633,3651],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[3660,3668],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Thread Safety in the C++ Standard Library<ept id=\"p1\">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept><ph id=\"ph1\"> </ph>","pos":[3672,3782],"source":"[Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C++ Standard Library Reference<ept id=\"p1\">](../standard-library/cpp-standard-library-reference.md)</ept>","pos":[3785,3873],"source":" [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)"}],"content":"---\ntitle: \"modulus Struct | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"modulus\"\n  - \"std::modulus\"\n  - \"xfunctional/std::modulus\"\n  - \"std.modulus\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"modulus class\"\n  - \"modulus struct\"\nms.assetid: 86d342f7-b7b1-46a4-b0bb-6b7ae827369b\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# modulus Struct\nA predefined function object that performs the modulus division operation ( `operator%`) on its arguments.  \n  \n## Syntax  \n  \n```\ntemplate <class Type = void>\nstruct modulus : public binary_function <Type, Type, Type>  \n{\n    Type operator()(const Type& Left, const Type& Right) const;\n};\n\n// specialized transparent functor for operator%\ntemplate <>\nstruct modulus<void>  \n{\n  template <class T, class U>\n  auto operator()(T&& Left, U&& Right) const`\n    -> decltype(std::forward<T>(Left) % std::forward<U>(Right));\n};\n```  \n  \n#### Parameters  \n `Type`, `T`, `U`  \n Any type that supports an `operator%` that takes operands of the specified or inferred types.  \n  \n `Left`  \n The left operand of the modulus operation. The unspecialized template takes an lvalue reference argument of type `Type`. The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `T`.  \n  \n `Right`  \n The right operand of the modulus operation. The unspecialized template takes an lvalue reference argument of type `Type`. The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `U`.  \n  \n## Return Value  \n The result of `Left``%``Right`. The specialized template does perfect forwarding of the result, which has the type that's returned by `operator%`.  \n  \n## Remarks  \n The `modulus` functor is restricted to integral types for the basic data types, or to user-defined types that implement `operator%`.  \n  \n## Example  \n  \n```cpp  \n// functional_modulus.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <functional>  \n#include <algorithm>  \n#include <iostream>  \n  \nusing namespace std;  \n  \nint main( )  \n{  \n   vector <int> v1, v2, v3 ( 6 );  \n   vector <int>::iterator Iter1, Iter2, Iter3;  \n  \n   int i;  \n   for ( i = 1 ; i <= 6 ; i++ )  \n   {  \n      v1.push_back( 5 * i );  \n   }  \n  \n   int j;  \n   for ( j = 1 ; j <= 6 ; j++ )  \n   {  \n      v2.push_back( 3 * j );  \n   }  \n  \n   cout << \"The vector v1 = ( \" ;  \n   for ( Iter1 = v1.begin( ) ; Iter1 != v1.end( ) ; Iter1++ )  \n      cout << *Iter1 << \" \";  \n   cout << \")\" << endl;  \n  \n   cout << \"The vector v2 = ( \" ;  \n   for ( Iter2 = v2.begin( ) ; Iter2 != v2.end( ) ; Iter2++ )  \n      cout << *Iter2 << \" \";  \n   cout << \")\" << endl;  \n  \n   // Finding the element-wise remainders of the elements of v1 & v2  \n   transform (v1.begin( ),  v1.end( ), v2.begin( ), v3.begin ( ),   \n      modulus<int>() );  \n  \n   cout << \"The element-wise remainders of the modular division\\n are: ( \" ;  \n   for ( Iter3 = v3.begin( ) ; Iter3 != v3.end( ) ; Iter3++ )  \n      cout << *Iter3 << \" \";  \n   cout << \")\" << endl;  \n}  \n/* Output:  \nThe vector v1 = ( 5 10 15 20 25 30 )  \nThe vector v2 = ( 3 6 9 12 15 18 )  \nThe element-wise remainders of the modular division  \n are: ( 2 4 6 8 10 12 )  \n */  \n```  \n  \n## Requirements  \n **Header:** \\<functional>  \n  \n **Namespace:** std  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}