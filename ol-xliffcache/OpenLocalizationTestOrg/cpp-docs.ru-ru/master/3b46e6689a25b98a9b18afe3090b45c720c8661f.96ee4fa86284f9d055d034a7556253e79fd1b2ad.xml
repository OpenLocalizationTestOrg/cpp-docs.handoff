{"nodes":[{"pos":[12,90],"content":"Filling a List Box from a Second Recordset  (MFC Data Access) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Filling a List Box from a Second Recordset  (MFC Data Access) | Microsoft Docs","pos":[0,78]}]},{"content":"Filling a List Box from a Second Recordset  (MFC Data Access)","pos":[1119,1180]},{"content":"By default, a record view is associated with a single recordset object, whose fields are mapped to the record view's controls.","pos":[1181,1307]},{"content":"Sometimes you might want to put a list box or combo box control in your record view and fill it with values from a second recordset object.","pos":[1308,1447]},{"content":"The user can use the list box to select a new category of information to display in the record view.","pos":[1448,1548]},{"content":"This topic explains how and when to do that.","pos":[1549,1593]},{"pos":[1601,1789],"content":"[!TIP]\n Be aware that filling a combo box or list box from a data source might be slow. Take precautions against trying to fill a control from a recordset with a large number of records.","leadings":["","> "],"nodes":[{"content":" Be aware that filling a combo box or list box from a data source might be slow. Take precautions against trying to fill a control from a recordset with a large number of records.","pos":[7,186],"nodes":[{"content":"Be aware that filling a combo box or list box from a data source might be slow.","pos":[1,80]},{"content":"Take precautions against trying to fill a control from a recordset with a large number of records.","pos":[81,179]}]}]},{"content":"The model for this topic consists of a primary recordset that fills the controls of your form, while a secondary recordset fills a list box or combo box.","pos":[1796,1949]},{"content":"Selecting a string from the list box causes your program to requery the primary recordset based on what was selected.","pos":[1950,2067]},{"content":"The following procedure uses a combo box but applies equally to a list box.","pos":[2068,2143]},{"content":"To fill a combo box or list box from a second recordset","pos":[2154,2209]},{"pos":[2219,2375],"content":"Create the recordset object (<bpt id=\"p1\">[</bpt>CRecordset<ept id=\"p1\">](../mfc/reference/crecordset-class.md)</ept> for ODBC, <bpt id=\"p2\">[</bpt>CDaoRecordset<ept id=\"p2\">](../mfc/reference/cdaorecordset-class.md)</ept> for DAO).","source":"Create the recordset object ([CRecordset](../mfc/reference/crecordset-class.md) for ODBC, [CDaoRecordset](../mfc/reference/cdaorecordset-class.md) for DAO)."},{"pos":[2385,2491],"content":"Obtain a pointer to the <bpt id=\"p1\">[</bpt>CComboBox<ept id=\"p1\">](../mfc/reference/ccombobox-class.md)</ept> object for the combo box control.","source":"Obtain a pointer to the [CComboBox](../mfc/reference/ccombobox-class.md) object for the combo box control."},{"content":"Empty the combo box of any previous contents.","pos":[2501,2546]},{"pos":[2556,2761],"content":"Move through all records in the recordset, calling <bpt id=\"p1\">[</bpt>CComboBox::AddString<ept id=\"p1\">](../mfc/reference/ccombobox-class.md#ccombobox__addstring)</ept> for each string from the current record you want to add to the combo box.","source":"Move through all records in the recordset, calling [CComboBox::AddString](../mfc/reference/ccombobox-class.md#ccombobox__addstring) for each string from the current record you want to add to the combo box."},{"content":"Initialize the selection in the combo box.","pos":[2771,2813]},{"pos":[3397,3587],"content":"This function uses a second recordset, <ph id=\"ph1\">`m_courseSet`</ph>, which contains a record for each course offered, and a <ph id=\"ph2\">`CComboBox`</ph> control, <ph id=\"ph3\">`m_ctlCourseList`</ph>, which is stored in the record view class.","source":"This function uses a second recordset, `m_courseSet`, which contains a record for each course offered, and a `CComboBox` control, `m_ctlCourseList`, which is stored in the record view class."},{"content":"The function gets <ph id=\"ph1\">`m_courseSet`</ph> from the document and opens it.","pos":[3594,3657],"source":"The function gets `m_courseSet` from the document and opens it."},{"content":"Then it empties <ph id=\"ph1\">`m_ctlCourseList`</ph> and scrolls through <ph id=\"ph2\">`m_courseSet`</ph>.","pos":[3658,3726],"source":" Then it empties `m_ctlCourseList` and scrolls through `m_courseSet`."},{"content":"For each record, the function calls the combo box's <ph id=\"ph1\">`AddString`</ph> member function to add the course ID value from the record.","pos":[3727,3850],"source":" For each record, the function calls the combo box's `AddString` member function to add the course ID value from the record."},{"content":"Finally, the code sets the combo box's selection.","pos":[3851,3900]},{"content":"See Also","pos":[3909,3917]},{"content":"Record Views  (MFC Data Access)","pos":[3922,3953]},{"content":"ODBC Driver List","pos":[4001,4017]}],"content":"---\ntitle: \"Filling a List Box from a Second Recordset  (MFC Data Access) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"DAO recordsets, filling list boxes or combo boxes\"\n  - \"record views, filling list boxes\"\n  - \"list boxes, filling from second recordset\"\n  - \"recordsets [C++], filling list boxes or combo boxes\"\n  - \"CComboBox class, filling object from second rowset\"\n  - \"ODBC recordsets [C++], filling list boxes or combo boxes\"\n  - \"combo boxes [C++], filling from second recordset\"\n  - \"DAO recordsets\"\n  - \"filling lists or combo boxes\"\n  - \"CListCtrl class, filling from second recordset\"\n  - \"multiple recordsets in record views\"\nms.assetid: 360c0834-da6b-4dc0-bcea-80e9acd611f0\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Filling a List Box from a Second Recordset  (MFC Data Access)\nBy default, a record view is associated with a single recordset object, whose fields are mapped to the record view's controls. Sometimes you might want to put a list box or combo box control in your record view and fill it with values from a second recordset object. The user can use the list box to select a new category of information to display in the record view. This topic explains how and when to do that.  \n  \n> [!TIP]\n>  Be aware that filling a combo box or list box from a data source might be slow. Take precautions against trying to fill a control from a recordset with a large number of records.  \n  \n The model for this topic consists of a primary recordset that fills the controls of your form, while a secondary recordset fills a list box or combo box. Selecting a string from the list box causes your program to requery the primary recordset based on what was selected. The following procedure uses a combo box but applies equally to a list box.  \n  \n#### To fill a combo box or list box from a second recordset  \n  \n1.  Create the recordset object ([CRecordset](../mfc/reference/crecordset-class.md) for ODBC, [CDaoRecordset](../mfc/reference/cdaorecordset-class.md) for DAO).  \n  \n2.  Obtain a pointer to the [CComboBox](../mfc/reference/ccombobox-class.md) object for the combo box control.  \n  \n3.  Empty the combo box of any previous contents.  \n  \n4.  Move through all records in the recordset, calling [CComboBox::AddString](../mfc/reference/ccombobox-class.md#ccombobox__addstring) for each string from the current record you want to add to the combo box.  \n  \n5.  Initialize the selection in the combo box.  \n  \n```  \nvoid CSectionForm::OnInitialUpdate()  \n{  \n    // ...  \n  \n    // Fill the combo box with all of the courses  \n    CENROLLDoc* pDoc = GetDocument();  \n    if (!pDoc->m_courseSet.Open())  \n        return;  \n  \n    // ...  \n  \n    m_ctlCourseList.ResetContent();  \n    if (pDoc->m_courseSet.IsOpen())  \n    {   \n        while (!pDoc->m_courseSet.IsEOF() )  \n        {  \n            m_ctlCourseList.AddString(  \n                pDoc->m_courseSet.m_CourseID);  \n            pDoc->m_courseSet.MoveNext();  \n        }  \n    }  \n    m_ctlCourseList.SetCurSel(0);  \n}  \n```  \n  \n This function uses a second recordset, `m_courseSet`, which contains a record for each course offered, and a `CComboBox` control, `m_ctlCourseList`, which is stored in the record view class.  \n  \n The function gets `m_courseSet` from the document and opens it. Then it empties `m_ctlCourseList` and scrolls through `m_courseSet`. For each record, the function calls the combo box's `AddString` member function to add the course ID value from the record. Finally, the code sets the combo box's selection.  \n  \n## See Also  \n [Record Views  (MFC Data Access)](../data/record-views-mfc-data-access.md)   \n [ODBC Driver List](../data/odbc/odbc-driver-list.md)"}