{"nodes":[{"pos":[12,40],"content":"feupdateenv | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"feupdateenv | Microsoft Docs","pos":[0,28]}]},{"content":"feupdateenv","pos":[915,926]},{"content":"Saves the currently raised floating-point exceptions, restores the specified floating-point environment state, and then raises the saved floating-point exceptions.","pos":[927,1090]},{"content":"Syntax","pos":[1099,1105]},{"content":"Parameters","pos":[1179,1189]},{"content":"Pointer to a <ph id=\"ph1\">`fenv_t`</ph> object that contains a floating-point environment as set by a call to <bpt id=\"p1\">[</bpt>fegetenv<ept id=\"p1\">](http://msdn.microsoft.com/Library/61df848d-6ba8-4c6e-be35-216436fe7736)</ept> or <bpt id=\"p2\">[</bpt>feholdexcept<ept id=\"p2\">](http://msdn.microsoft.com/Library/c286ace3-ec39-482a-be8b-f998d31003d9)</ept>.","pos":[1203,1468],"source":" Pointer to a `fenv_t` object that contains a floating-point environment as set by a call to [fegetenv](http://msdn.microsoft.com/Library/61df848d-6ba8-4c6e-be35-216436fe7736) or [feholdexcept](http://msdn.microsoft.com/Library/c286ace3-ec39-482a-be8b-f998d31003d9)."},{"content":"You can also specify the default startup floating-point environment by using the FE_DFL_ENV macro.","pos":[1469,1567]},{"content":"Return Value","pos":[1576,1588]},{"content":"Returns 0 if all actions completed successfully.","pos":[1592,1640]},{"content":"Otherwise, returns a nonzero value.","pos":[1648,1683]},{"content":"Remarks","pos":[1692,1699]},{"content":"The <ph id=\"ph1\">`feupdateenv`</ph> function performs multiple actions.","pos":[1703,1756],"source":"The `feupdateenv` function performs multiple actions."},{"content":"First, it stores the current raised floating-point exception status flags in automatic storage.","pos":[1757,1852]},{"content":"Then, it sets the current floating-point environment from the value stored in the <ph id=\"ph1\">`fenv_t`</ph> object pointed to by <ph id=\"ph2\">`penv`</ph>.","pos":[1853,1972],"source":" Then, it sets the current floating-point environment from the value stored in the `fenv_t` object pointed to by `penv`."},{"content":"If <ph id=\"ph1\">`penv`</ph> is not FE_DFL_ENV or does not point to a valid <ph id=\"ph2\">`fenv_t`</ph> object, subsequent behavior is undefined.","pos":[1973,2080],"source":" If `penv` is not FE_DFL_ENV or does not point to a valid `fenv_t` object, subsequent behavior is undefined."},{"content":"Finally, <ph id=\"ph1\">`feupdateenv`</ph> raises the locally stored floating-point exceptions.","pos":[2081,2156],"source":" Finally, `feupdateenv` raises the locally stored floating-point exceptions."},{"content":"To use this function, you must turn off floating-point optimizations that could prevent access by using the <ph id=\"ph1\">`#pragma fenv_access(on)`</ph> directive prior to the call.","pos":[2163,2325],"source":"To use this function, you must turn off floating-point optimizations that could prevent access by using the `#pragma fenv_access(on)` directive prior to the call."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>fenv_access<ept id=\"p1\">](../../preprocessor/fenv-access.md)</ept>.","pos":[2326,2401],"source":" For more information, see [fenv_access](../../preprocessor/fenv-access.md)."},{"content":"Requirements","pos":[2410,2422]},{"content":"Function","pos":[2429,2437]},{"content":"C header","pos":[2438,2446]},{"content":"C++ header","pos":[2447,2457]},{"content":"fenv.h&gt;","pos":[2531,2538],"source":"fenv.h>"},{"content":"cfenv&gt;","pos":[2541,2547],"source":"cfenv>"},{"pos":[2555,2659],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"See Also","pos":[2668,2676]},{"content":"fegetenv","pos":[2681,2689]},{"content":"feclearexcept","pos":[2744,2757]},{"content":"feholdexcept","pos":[2817,2829]},{"content":"fesetexceptflag","pos":[2888,2903]}],"content":"---\ntitle: \"feupdateenv | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"cpp\"\n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"feupdateenv\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"HeaderDef\"\nf1_keywords: \n  - \"feupdateenv\"\n  - \"fenv/feupdateenv\"\ndev_langs: \n  - \"C\"\n  - \"C++\"\nhelpviewer_keywords: \n  - \"feupdateenv function\"\nms.assetid: 3d170042-dfd5-4e4f-a55f-038cf2296cc9\ncaps.latest.revision: 3\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# feupdateenv\nSaves the currently raised floating-point exceptions, restores the specified floating-point environment state, and then raises the saved floating-point exceptions.  \n  \n## Syntax  \n  \n```  \nint feupdateenv(  \n   const fenv_t* penv  \n);  \n```  \n  \n#### Parameters  \n `penv`  \n Pointer to a `fenv_t` object that contains a floating-point environment as set by a call to [fegetenv](http://msdn.microsoft.com/Library/61df848d-6ba8-4c6e-be35-216436fe7736) or [feholdexcept](http://msdn.microsoft.com/Library/c286ace3-ec39-482a-be8b-f998d31003d9). You can also specify the default startup floating-point environment by using the FE_DFL_ENV macro.  \n  \n## Return Value  \n Returns 0 if all actions completed successfully.        Otherwise, returns a nonzero value.  \n  \n## Remarks  \n The `feupdateenv` function performs multiple actions. First, it stores the current raised floating-point exception status flags in automatic storage. Then, it sets the current floating-point environment from the value stored in the `fenv_t` object pointed to by `penv`. If `penv` is not FE_DFL_ENV or does not point to a valid `fenv_t` object, subsequent behavior is undefined. Finally, `feupdateenv` raises the locally stored floating-point exceptions.  \n  \n To use this function, you must turn off floating-point optimizations that could prevent access by using the `#pragma fenv_access(on)` directive prior to the call. For more information, see [fenv_access](../../preprocessor/fenv-access.md).  \n  \n## Requirements  \n  \n|Function|C header|C++ header|  \n|--------------|--------------|------------------|  \n|`feupdateenv`|\\<fenv.h>|\\<cfenv>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## See Also  \n [fegetenv](../../c-runtime-library/reference/fegetenv1.md)   \n [feclearexcept](../../c-runtime-library/reference/feclearexcept1.md)   \n [feholdexcept](../../c-runtime-library/reference/feholdexcept2.md)   \n [fesetexceptflag](../../c-runtime-library/reference/fesetexceptflag2.md)"}