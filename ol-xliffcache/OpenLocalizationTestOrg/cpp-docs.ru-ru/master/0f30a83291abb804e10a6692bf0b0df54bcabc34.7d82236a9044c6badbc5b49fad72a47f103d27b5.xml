{"nodes":[{"pos":[12,44],"content":"mem_fun_t Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"mem_fun_t Class | Microsoft Docs","pos":[0,32]}]},{"pos":[673,688],"content":"mem_fun_t Class","linkify":"mem_fun_t Class","nodes":[{"content":"mem_fun_t Class","pos":[0,15]}]},{"pos":[689,855],"content":"An adapter class that allows a <bpt id=\"p1\">**</bpt>non_const<ept id=\"p1\">**</ept> member function that takes no arguments to be called as a unary function object when initialized with a pointer argument.","source":"An adapter class that allows a **non_const** member function that takes no arguments to be called as a unary function object when initialized with a pointer argument."},{"pos":[864,870],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1085,1095],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the member function of class <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept> to be converted to a function object.","pos":[1108,1196],"source":" A pointer to the member function of class **Type** to be converted to a function object."},{"content":"The object that the <ph id=\"ph1\">`_Pm`</ph> member function is called on.","pos":[1215,1270],"source":" The object that the `_Pm` member function is called on."},{"pos":[1279,1291],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An adaptable unary function.","pos":[1295,1323]},{"pos":[1332,1339],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template class stores a copy of <ph id=\"ph1\">`_Pm`</ph>, which must be a pointer to a member function of class <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept>, in a private member object.","pos":[1343,1477],"source":"The template class stores a copy of `_Pm`, which must be a pointer to a member function of class **Type**, in a private member object."},{"content":"It defines its member function <ph id=\"ph1\">`operator()`</ph> as returning ( <ph id=\"ph2\">`_Pleft`</ph><ph id=\"ph3\">-&gt;* </ph><ph id=\"ph4\">`_Pm`</ph>)( ).","pos":[1478,1559],"source":" It defines its member function `operator()` as returning ( `_Pleft`->* `_Pm`)( )."},{"pos":[1568,1575],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The constructor of <ph id=\"ph1\">`mem_fun_t`</ph> is not usually used directly; the helper function <ph id=\"ph2\">`mem_fun`</ph> is used to adapt member functions.","pos":[1579,1704],"source":"The constructor of `mem_fun_t` is not usually used directly; the helper function `mem_fun` is used to adapt member functions."},{"content":"See <bpt id=\"p1\">[</bpt>mem_fun<ept id=\"p1\">](../standard-library/functional-functions.md#mem_fun_function)</ept> for an example of how to use member function adaptors.","pos":[1705,1835],"source":" See [mem_fun](../standard-library/functional-functions.md#mem_fun_function) for an example of how to use member function adaptors."},{"pos":[1844,1856],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[1860,1885],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>functional&gt;","source":"**Header:** \\<functional>"},{"pos":[1892,1910],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[1919,1927],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>functional&gt;<ept id=\"p1\">](../standard-library/functional.md)</ept><ph id=\"ph2\"> </ph>","pos":[1931,1982],"source":"[\\<functional>](../standard-library/functional.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Thread Safety in the C++ Standard Library<ept id=\"p1\">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept><ph id=\"ph1\"> </ph>","pos":[1985,2096],"source":" [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C++ Standard Library Reference<ept id=\"p1\">](../standard-library/cpp-standard-library-reference.md)</ept>","pos":[2099,2187],"source":" [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)"}],"content":"---\ntitle: \"mem_fun_t Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"mem_fun_t\"\n  - \"xfunctional/std::mem_fun_t\"\n  - \"std::mem_fun_t\"\n  - \"std.mem_fun_t\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"mem_fun_t class\"\nms.assetid: 242566d4-750c-4c87-9d63-2e2c9d19ca2a\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# mem_fun_t Class\nAn adapter class that allows a **non_const** member function that takes no arguments to be called as a unary function object when initialized with a pointer argument.  \n  \n## Syntax  \n  \n```\ntemplate <class Result, class Type>\nclass mem_fun_t : public unary_function<Type *, Result> {\n    explicit mem_fun_t(Result (Type::* _Pm)());\n\n    Result operator()(Type* _Pleft) const;\n\n };\n```  \n  \n#### Parameters  \n `_Pm`  \n A pointer to the member function of class **Type** to be converted to a function object.  \n  \n `_Pleft`  \n The object that the `_Pm` member function is called on.  \n  \n## Return Value  \n An adaptable unary function.  \n  \n## Remarks  \n The template class stores a copy of `_Pm`, which must be a pointer to a member function of class **Type**, in a private member object. It defines its member function `operator()` as returning ( `_Pleft`->* `_Pm`)( ).  \n  \n## Example  \n The constructor of `mem_fun_t` is not usually used directly; the helper function `mem_fun` is used to adapt member functions. See [mem_fun](../standard-library/functional-functions.md#mem_fun_function) for an example of how to use member function adaptors.  \n  \n## Requirements  \n **Header:** \\<functional>  \n  \n **Namespace:** std  \n  \n## See Also  \n [\\<functional>](../standard-library/functional.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}