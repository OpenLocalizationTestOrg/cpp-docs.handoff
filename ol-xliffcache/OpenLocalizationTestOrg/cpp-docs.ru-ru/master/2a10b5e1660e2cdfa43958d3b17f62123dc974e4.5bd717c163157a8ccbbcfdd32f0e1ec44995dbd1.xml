{"nodes":[{"pos":[12,59],"content":"uniform_int_distribution Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"uniform_int_distribution Class | Microsoft Docs","pos":[0,47]}]},{"content":"uniform_int_distribution Class","pos":[843,873]},{"content":"Generates a uniform (every value is equally probable) integer distribution within an output range that is inclusive-inclusive.","pos":[874,1000]},{"content":"Syntax","pos":[1009,1015]},{"content":"Parameters","pos":[1729,1739]},{"content":"The integer result type, defaults to <ph id=\"ph1\">`int`</ph>.","pos":[1756,1799],"source":" The integer result type, defaults to `int`."},{"content":"For possible types, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","pos":[1800,1867],"source":" For possible types, see [\\<random>](../standard-library/random.md)."},{"content":"Remarks","pos":[1876,1883]},{"content":"The template class describes an inclusive-inclusive distribution that produces values of a user-specified integral type with a distribution so that every value is equally probable.","pos":[1887,2067]},{"content":"The following table links to articles about individual members.","pos":[2068,2131]},{"content":"uniform_int_distribution::uniform_int_distribution","pos":[2156,2206]},{"content":"uniform_int_distribution::param_type","pos":[2399,2435]},{"content":"The property member <ph id=\"ph1\">`a()`</ph> returns the currently stored minimum bound of the distribution, while <ph id=\"ph2\">`b()`</ph> returns the currently stored maximum bound.","pos":[2483,2628],"source":"The property member `a()` returns the currently stored minimum bound of the distribution, while `b()` returns the currently stored maximum bound."},{"content":"For this distribution class, these minimum and maximum values are the same as those returned by the common property functions <ph id=\"ph1\">`min()`</ph> and <ph id=\"ph2\">`max()`</ph> described in the <bpt id=\"p1\">[</bpt><ph id=\"ph3\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept> topic.","pos":[2629,2841],"source":" For this distribution class, these minimum and maximum values are the same as those returned by the common property functions `min()` and `max()` described in the [\\<random>](../standard-library/random.md) topic."},{"pos":[2848,2962],"content":"For more information about distribution classes and their members, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","source":"For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md)."},{"content":"Example","pos":[2971,2978]},{"content":"Output","pos":[4548,4554]},{"content":"Requirements","pos":[5167,5179]},{"pos":[5183,5204],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>random&gt;","source":"**Header:** \\<random>"},{"pos":[5211,5229],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[5306,5356],"content":"uniform_int_distribution::uniform_int_distribution"},{"content":"Constructs the distribution.","pos":[5360,5388]},{"content":"Parameters","pos":[5582,5592]},{"content":"The lower bound for random values, inclusive.","pos":[5603,5648]},{"content":"The upper bound for random values, inclusive.","pos":[5662,5707]},{"content":"The parameter structure used to construct the distribution.","pos":[5724,5783]},{"content":"Remarks","pos":[5793,5800]},{"pos":[5806,5819],"content":"Precondition:"},{"pos":[5836,5969],"content":"The first constructor constructs an object whose stored <ph id=\"ph1\">`a`</ph> value holds the value <ph id=\"ph2\">`a`</ph> and whose stored <ph id=\"ph3\">`b`</ph> value holds the value <ph id=\"ph4\">`b`</ph>.","source":"The first constructor constructs an object whose stored `a` value holds the value `a` and whose stored `b` value holds the value `b`."},{"content":"The second constructor constructs an object whose stored parameters are initialized from <ph id=\"ph1\">`parm`</ph>.","pos":[5976,6072],"source":"The second constructor constructs an object whose stored parameters are initialized from `parm`."},{"content":"You can obtain and set the current parameters of an existing distribution by calling the <ph id=\"ph1\">`param()`</ph> member function.","pos":[6073,6188],"source":" You can obtain and set the current parameters of an existing distribution by calling the `param()` member function."},{"pos":[6251,6287],"content":"uniform_int_distribution::param_type"},{"content":"Stores the parameters of the distribution.","pos":[6291,6333]},{"content":"Parameters","pos":[6695,6705]},{"pos":[6709,6814],"content":"See parent topic <bpt id=\"p1\">[</bpt>uniform_int_distribution Class<ept id=\"p1\">](../standard-library/uniform-int-distribution-class.md)</ept>.","source":"See parent topic [uniform_int_distribution Class](../standard-library/uniform-int-distribution-class.md)."},{"content":"Remarks","pos":[6824,6831]},{"pos":[6837,6850],"content":"Precondition:"},{"pos":[6867,7110],"content":"This structure can be passed to the distribution's class constructor at instantiation, to the <ph id=\"ph1\">`param()`</ph> member function to set the stored parameters of an existing distribution, and to <ph id=\"ph2\">`operator()`</ph> to be used in place of the stored parameters.","source":"This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters."},{"content":"See Also","pos":[7119,7127]},{"content":"random&gt;","pos":[7134,7141],"source":"random>"}],"content":"---\ntitle: \"uniform_int_distribution Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"tr1.uniform_int_distribution\"\n  - \"random/std::tr1::uniform_int_distribution\"\n  - \"uniform_int_distribution\"\n  - \"tr1::uniform_int_distribution\"\n  - \"std.tr1.uniform_int_distribution\"\n  - \"std::tr1::uniform_int_distribution\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"uniform_int_distribution class\"\nms.assetid: a1867dcd-3bd9-4787-afe3-4b62692c1d04\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# uniform_int_distribution Class\nGenerates a uniform (every value is equally probable) integer distribution within an output range that is inclusive-inclusive.  \n  \n## Syntax  \n```  \nclass uniform_int_distribution{public:    // types typedef IntType result_type;    struct param_type;    // constructors and reset functions explicit uniform_int_distribution(IntType a = 0, IntType b = numeric_limits<IntType>::max());\n   explicit uniform_int_distribution(const param_type& parm);\n   void reset();\n   // generating functions template <class URNG>  \n   result_type operator()(URNG& gen);\n   template <class URNG>  \n   result_type operator()(URNG& gen, const param_type& parm);\n   // property functions result_type a() const;\n   result_type b() const;\n   param_type param() const;\n   void param(const param_type& parm);\n   result_type min() const;\n   result_type max() const;};  \n```  \n#### Parameters  \n `IntType`  \n The integer result type, defaults to `int`. For possible types, see [\\<random>](../standard-library/random.md).  \n  \n## Remarks  \n The template class describes an inclusive-inclusive distribution that produces values of a user-specified integral type with a distribution so that every value is equally probable. The following table links to articles about individual members.  \n  \n||||  \n|-|-|-|  \n|[uniform_int_distribution::uniform_int_distribution](#uniform_int_distribution__uniform_int_distribution)|`uniform_int_distribution::a`|`uniform_int_distribution::param`|  \n|`uniform_int_distribution::operator()`|`uniform_int_distribution::b`|[uniform_int_distribution::param_type](#uniform_int_distribution__param_type)|  \n  \n The property member `a()` returns the currently stored minimum bound of the distribution, while `b()` returns the currently stored maximum bound. For this distribution class, these minimum and maximum values are the same as those returned by the common property functions `min()` and `max()` described in the [\\<random>](../standard-library/random.md) topic.  \n  \n For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md).  \n  \n## Example  \n  \n```cpp  \n// compile with: /EHsc /W4  \n#include <random>   \n#include <iostream>  \n#include <iomanip>  \n#include <string>  \n#include <map>  \n  \nvoid test(const int a, const int b, const int s) {  \n  \n    // uncomment to use a non-deterministic seed  \n    //    std::random_device rd;  \n    //    std::mt19937 gen(rd());  \n    std::mt19937 gen(1729);  \n  \n    std::uniform_int_distribution<> distr(a, b);  \n  \n    std::cout << \"lower bound == \" << distr.a() << std::endl;  \n    std::cout << \"upper bound == \" << distr.b() << std::endl;  \n  \n    // generate the distribution as a histogram  \n    std::map<int, int> histogram;  \n    for (int i = 0; i < s; ++i) {  \n        ++histogram[distr(gen)];  \n    }  \n  \n    // print results  \n    std::cout << \"Distribution for \" << s << \" samples:\" << std::endl;  \n    for (const auto& elem : histogram) {  \n        std::cout << std::setw(5) << elem.first << ' ' << std::string(elem.second, ':') << std::endl;  \n    }  \n    std::cout << std::endl;  \n}  \n  \nint main()  \n{  \n    int a_dist = 1;  \n    int b_dist = 10;  \n  \n    int samples = 100;  \n  \n    std::cout << \"Use CTRL-Z to bypass data entry and run using default values.\" << std::endl;  \n    std::cout << \"Enter an integer value for the lower bound of the distribution: \";  \n    std::cin >> a_dist;  \n    std::cout << \"Enter an integer value for the upper bound of the distribution: \";  \n    std::cin >> b_dist;  \n    std::cout << \"Enter an integer value for the sample count: \";  \n    std::cin >> samples;  \n  \n    test(a_dist, b_dist, samples);  \n}  \n  \n```  \n  \n## Output  \n  \n```Output  \nUse CTRL-Z to bypass data entry and run using default values.Enter an integer value for the lower bound of the distribution: 0Enter an integer value for the upper bound of the distribution: 12Enter an integer value for the sample count: 200lower bound == 0upper bound == 12Distribution for 200 samples:    0 :::::::::::::::    1 :::::::::::::::::::::    2 ::::::::::::::::::    3 :::::::::::::::    4 :::::::    5 :::::::::::::::::::::    6 :::::::::::::    7 ::::::::::    8 :::::::::::::::    9 :::::::::::::   10 ::::::::::::::::::::::   11 :::::::::::::   12 :::::::::::::::::  \n```  \n  \n## Requirements  \n **Header:** \\<random>  \n  \n **Namespace:** std  \n  \n##  <a name=\"uniform_int_distribution__uniform_int_distribution\"></a>  uniform_int_distribution::uniform_int_distribution  \n Constructs the distribution.  \n  \n```  \nexplicit uniform_int_distribution(result_type a = 0, result_type b = std::numeric_limits<IntType>::max());\n\n \nexplicit uniform_int_distribution(const param_type& parm);\n```  \n  \n### Parameters  \n `a`  \n The lower bound for random values, inclusive.  \n  \n `b`  \n The upper bound for random values, inclusive.  \n  \n `parm`  \n The parameter structure used to construct the distribution.  \n  \n### Remarks  \n **Precondition:** `a ≤ b`  \n  \n The first constructor constructs an object whose stored `a` value holds the value `a` and whose stored `b` value holds the value `b`.  \n  \n The second constructor constructs an object whose stored parameters are initialized from `parm`. You can obtain and set the current parameters of an existing distribution by calling the `param()` member function.  \n  \n##  <a name=\"uniform_int_distribution__param_type\"></a>  uniform_int_distribution::param_type  \n Stores the parameters of the distribution.  \n```cpp\nstruct param_type {  \n   typedef uniform_int_distribution<IntType> distribution_type;  \n   param_type(IntType a = 0, IntType b = std::numeric_limits<IntType>::max());\n   result_type a() const;\n   result_type b() const;\n   .....  \n   bool operator==(const param_type& right) const;\n   bool operator!=(const param_type& right) const;\n   };  \n```    \n### Parameters  \n See parent topic [uniform_int_distribution Class](../standard-library/uniform-int-distribution-class.md).  \n  \n### Remarks  \n **Precondition:** `a ≤ b`  \n  \n This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters.  \n  \n## See Also  \n [\\<random>](../standard-library/random.md)\n\n\n\n"}