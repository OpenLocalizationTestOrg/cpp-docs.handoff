{"nodes":[{"pos":[12,85],"content":"_snprintf_s, _snprintf_s_l, _snwprintf_s, _snwprintf_s_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_snprintf_s, _snprintf_s_l, _snwprintf_s, _snwprintf_s_l | Microsoft Docs","pos":[0,73]}]},{"pos":[1538,1594],"content":"_snprintf_s, _snprintf_s_l, _snwprintf_s, _snwprintf_s_l","linkify":"_snprintf_s, _snprintf_s_l, _snwprintf_s, _snwprintf_s_l","nodes":[{"content":"_snprintf_s, _snprintf_s_l, _snwprintf_s, _snwprintf_s_l","pos":[0,56]}]},{"content":"Writes formatted data to a string.","pos":[1595,1629]},{"content":"These are versions of <bpt id=\"p1\">[</bpt>snprintf, _snprintf, _snprintf_l, _snwprintf, _snwprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l.md)</ept> with security enhancements as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1630,1933],"source":" These are versions of [snprintf, _snprintf, _snprintf_l, _snwprintf, _snwprintf_l](../../c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"pos":[1942,1948],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[2891,2901],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Storage location for the output.","pos":[2917,2949]},{"content":"The size of the storage location for output.","pos":[2974,3018]},{"content":"Size in <ph id=\"ph1\">`bytes`</ph> for <ph id=\"ph2\">`_snprintf_s`</ph> or size in <ph id=\"ph3\">`words`</ph> for <ph id=\"ph4\">`_snwprintf_s`</ph>.","pos":[3019,3091],"source":" Size in `bytes` for `_snprintf_s` or size in `words` for `_snwprintf_s`."},{"content":"Maximum number of characters to store, or <bpt id=\"p1\">[</bpt>_TRUNCATE<ept id=\"p1\">](../../c-runtime-library/truncate.md)</ept>.","pos":[3109,3200],"source":" Maximum number of characters to store, or [_TRUNCATE](../../c-runtime-library/truncate.md)."},{"content":"Format-control string.","pos":[3219,3241]},{"content":"Optional arguments.","pos":[3262,3281]},{"content":"The locale to use.","pos":[3300,3318]},{"pos":[3327,3339],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`_snprintf_s`</ph> returns the number of characters stored in <ph id=\"ph2\">`buffer`</ph>, not counting the terminating null character.","pos":[3343,3454],"source":"`_snprintf_s` returns the number of characters stored in `buffer`, not counting the terminating null character."},{"content":"<ph id=\"ph1\">`_snwprintf_s`</ph> returns the number of wide characters stored in <ph id=\"ph2\">`buffer`</ph>, not counting the terminating null wide character.","pos":[3455,3577],"source":"`_snwprintf_s` returns the number of wide characters stored in `buffer`, not counting the terminating null wide character."},{"content":"If the storage required to store the data and a terminating null exceeds <ph id=\"ph1\">`sizeOfBuffer`</ph>, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[3584,3803],"source":"If the storage required to store the data and a terminating null exceeds `sizeOfBuffer`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution continues after the invalid parameter handler, these functions set <ph id=\"ph1\">`buffer`</ph> to an empty string, set <ph id=\"ph2\">`errno`</ph> to <ph id=\"ph3\">`ERANGE`</ph>, and return -1.","pos":[3804,3952],"source":" If execution continues after the invalid parameter handler, these functions set `buffer` to an empty string, set `errno` to `ERANGE`, and return -1."},{"content":"If <ph id=\"ph1\">`buffer`</ph> or <ph id=\"ph2\">`format`</ph> is a <ph id=\"ph3\">`NULL`</ph> pointer, or if <ph id=\"ph4\">`count`</ph> is less than or equal to zero, the invalid parameter handler is invoked.","pos":[3959,4090],"source":"If `buffer` or `format` is a `NULL` pointer, or if `count` is less than or equal to zero, the invalid parameter handler is invoked."},{"content":"If execution is allowed to continue, these functions set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and return -1.","pos":[4091,4182],"source":" If execution is allowed to continue, these functions set `errno` to `EINVAL` and return -1."},{"pos":[4189,4360],"content":"For information about these and other error codes, see <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For information about these and other error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"pos":[4369,4376],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_snprintf_s`</ph> function formats and stores <ph id=\"ph2\">`count`</ph> or fewer characters in <ph id=\"ph3\">`buffer`</ph> and appends a terminating null.","pos":[4380,4497],"source":"The `_snprintf_s` function formats and stores `count` or fewer characters in `buffer` and appends a terminating null."},{"content":"Each argument (if any) is converted and output according to the corresponding format specification in <ph id=\"ph1\">`format`</ph>.","pos":[4498,4609],"source":" Each argument (if any) is converted and output according to the corresponding format specification in `format`."},{"content":"The formatting is consistent with the <ph id=\"ph1\">`printf`</ph> family of functions; see <bpt id=\"p1\">[</bpt>Format Specification Syntax: printf and wprintf Functions<ept id=\"p1\">](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)</ept>.","pos":[4610,4827],"source":" The formatting is consistent with the `printf` family of functions; see [Format Specification Syntax: printf and wprintf Functions](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)."},{"content":"If copying occurs between strings that overlap, the behavior is undefined.","pos":[4828,4902]},{"content":"If <ph id=\"ph1\">`count`</ph> is <bpt id=\"p1\">[</bpt>_TRUNCATE<ept id=\"p1\">](../../c-runtime-library/truncate.md)</ept>, then <ph id=\"ph2\">`_snprintf_s`</ph> writes as much of the string as will fit in <ph id=\"ph3\">`buffer`</ph> while leaving room for a terminating null.","pos":[4909,5087],"source":"If `count` is [_TRUNCATE](../../c-runtime-library/truncate.md), then `_snprintf_s` writes as much of the string as will fit in `buffer` while leaving room for a terminating null."},{"content":"If the entire string (with terminating null) fits in <ph id=\"ph1\">`buffer`</ph>, then <ph id=\"ph2\">`_snprintf_s`</ph> returns the number of characters written (not including the terminating null); otherwise, <ph id=\"ph3\">`_snprintf_s`</ph> returns -1 to indicate that truncation occurred.","pos":[5088,5322],"source":" If the entire string (with terminating null) fits in `buffer`, then `_snprintf_s` returns the number of characters written (not including the terminating null); otherwise, `_snprintf_s` returns -1 to indicate that truncation occurred."},{"pos":[5330,5396],"content":"[!IMPORTANT]\n Ensure that `format` is not a user-defined string.","leadings":["","> "],"nodes":[{"content":"Ensure that <ph id=\"ph1\">`format`</ph> is not a user-defined string.","pos":[14,64],"source":" Ensure that `format` is not a user-defined string."}]},{"content":"<ph id=\"ph1\">`_snwprintf_s`</ph> is a wide-character version of <ph id=\"ph2\">`_snprintf_s`</ph>; the pointer arguments to <ph id=\"ph3\">`_snwprintf_s`</ph> are wide-character strings.","pos":[5403,5531],"source":"`_snwprintf_s` is a wide-character version of `_snprintf_s`; the pointer arguments to `_snwprintf_s` are wide-character strings."},{"content":"Detection of encoding errors in <ph id=\"ph1\">`_snwprintf_s`</ph> might differ from that in <ph id=\"ph2\">`_snprintf_s`</ph>.","pos":[5532,5619],"source":" Detection of encoding errors in `_snwprintf_s` might differ from that in `_snprintf_s`."},{"content":"<ph id=\"ph1\">`_snwprintf_s`</ph>, like <ph id=\"ph2\">`swprintf_s`</ph>, writes output to a string rather than to a destination of type <ph id=\"ph3\">`FILE`</ph>.","pos":[5620,5725],"source":"`_snwprintf_s`, like `swprintf_s`, writes output to a string rather than to a destination of type `FILE`."},{"pos":[5732,5888],"content":"The versions of these functions with the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead of the current thread locale.","source":"The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale."},{"content":"In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically (eliminating the need to specify a size argument) and they can automatically replace older, non-secure functions with their newer, secure counterparts.","pos":[5895,6165]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[6166,6274],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"pos":[6284,6313],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"Tchar.h routine","pos":[6320,6335]},{"content":"_UNICODE and _MBCS not defined","pos":[6336,6366]},{"content":"_MBCS defined","pos":[6367,6380]},{"content":"_UNICODE defined","pos":[6381,6397]},{"pos":[6649,6661],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[6668,6675]},{"content":"Required header","pos":[6676,6691]},{"pos":[6736,6766],"content":"<ph id=\"ph1\">`_snprintf_s`</ph>, <ph id=\"ph2\">`_snprintf_s_l`</ph>","source":"`_snprintf_s`, `_snprintf_s_l`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt;","pos":[6767,6777],"source":"\\<stdio.h>"},{"pos":[6782,6814],"content":"<ph id=\"ph1\">`_snwprintf_s`</ph>, <ph id=\"ph2\">`_snwprintf_s_l`</ph>","source":"`_snwprintf_s`, `_snwprintf_s_l`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt; or <ph id=\"ph2\">\\&lt;</ph>wchar.h&gt;","pos":[6815,6839],"source":"\\<stdio.h> or \\<wchar.h>"},{"pos":[6847,6965],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[6974,6981],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10660,10685],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[10689,10704]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[10705,10752],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[10753,10878],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[10887,10895],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Stream I/O<ept id=\"p1\">](../../c-runtime-library/stream-i-o.md)</ept><ph id=\"ph1\"> </ph>","pos":[10899,10951],"source":"[Stream I/O](../../c-runtime-library/stream-i-o.md) "},{"content":"<bpt id=\"p1\"> [</bpt>sprintf, _sprintf_l, swprintf, _swprintf_l, <ph id=\"ph1\">\\_</ph>_swprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)</ept><ph id=\"ph2\"> </ph>","pos":[10954,11102],"source":" [sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>fprintf, _fprintf_l, fwprintf, _fwprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[11105,11227],"source":" [fprintf, _fprintf_l, fwprintf, _fwprintf_l](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>printf, _printf_l, wprintf, _wprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[11230,11344],"source":" [printf, _printf_l, wprintf, _wprintf_l](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>scanf, _scanf_l, wscanf, _wscanf_l<ept id=\"p1\">](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[11347,11453],"source":" [scanf, _scanf_l, wscanf, _wscanf_l](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>sscanf, _sscanf_l, swscanf, _swscanf_l<ept id=\"p1\">](../../c-runtime-library/reference/sscanf-sscanf-l-swscanf-swscanf-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[11456,11570],"source":" [sscanf, _sscanf_l, swscanf, _swscanf_l](../../c-runtime-library/reference/sscanf-sscanf-l-swscanf-swscanf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>vprintf Functions<ept id=\"p1\">](../../c-runtime-library/vprintf-functions.md)</ept>","pos":[11573,11639],"source":" [vprintf Functions](../../c-runtime-library/vprintf-functions.md)"}],"content":"---\ntitle: \"_snprintf_s, _snprintf_s_l, _snwprintf_s, _snwprintf_s_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_snprintf_s\"\n  - \"_snprintf_s_l\"\n  - \"_snwprintf_s\"\n  - \"_snwprintf_s_l\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_snwprintf_s_l\"\n  - \"_sntprintf_s_l\"\n  - \"snprintf_s_l\"\n  - \"_snprintf_s_l\"\n  - \"_sntprintf_s\"\n  - \"_snprintf_s\"\n  - \"snprintf_s\"\n  - \"_snwprintf_s\"\n  - \"snwprintf_s_l\"\n  - \"snwprintf_s\"\n  - \"sntprintf_s\"\n  - \"sntprintf_s_l\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_snprintf_s_l function\"\n  - \"_snwprintf_s_l function\"\n  - \"_sntprintf_s_l function\"\n  - \"snwprintf_s_l function\"\n  - \"snprintf_s function\"\n  - \"_snprintf_s function\"\n  - \"snprintf_s_l function\"\n  - \"_sntprintf_s function\"\n  - \"sntprintf_s_l function\"\n  - \"sntprintf_s function\"\n  - \"snwprintf_s function\"\n  - \"_snwprintf_s function\"\n  - \"formatted text [C++]\"\nms.assetid: 9336ab86-13e5-4a29-a3cd-074adfee6891\ncaps.latest.revision: 32\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _snprintf_s, _snprintf_s_l, _snwprintf_s, _snwprintf_s_l\nWrites formatted data to a string. These are versions of [snprintf, _snprintf, _snprintf_l, _snwprintf, _snwprintf_l](../../c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n## Syntax  \n  \n```  \nint _snprintf_s(  \n   char *buffer,  \n   size_t sizeOfBuffer,  \n   size_t count,  \n   const char *format [,  \n   argument] ...   \n);  \nint _snprintf_s_l(  \n   char *buffer,  \n   size_t sizeOfBuffer,  \n   size_t count,  \n   const char *format,  \n   locale_t locale [,  \n   argument] ...   \n);  \nint _snwprintf_s(  \n   wchar_t *buffer,  \n   size_t sizeOfBuffer,  \n   size_t count,  \n   const wchar_t *format [,  \n   argument] ...   \n);  \nint _snwprintf_s_l(  \n   wchar_t *buffer,  \n   size_t sizeOfBuffer,  \n   size_t count,  \n   const wchar_t *format,  \n   locale_t locale [,  \n   argument] ...   \n);  \ntemplate <size_t size>  \nint _snprintf_s(  \n   char (&buffer)[size],  \n   size_t count,  \n   const char *format [,  \n   argument] ...   \n); // C++ only  \ntemplate <size_t size>  \nint _snwprintf_s(  \n   wchar_t (&buffer)[size],  \n   size_t count,  \n   const wchar_t *format [,  \n   argument] ...   \n); // C++ only  \n```  \n  \n#### Parameters  \n `buffer`  \n Storage location for the output.  \n  \n `sizeOfBuffer`  \n The size of the storage location for output. Size in `bytes` for `_snprintf_s` or size in `words` for `_snwprintf_s`.  \n  \n `Count`  \n Maximum number of characters to store, or [_TRUNCATE](../../c-runtime-library/truncate.md).  \n  \n `format`  \n Format-control string.  \n  \n `argument`  \n Optional arguments.  \n  \n `locale`  \n The locale to use.  \n  \n## Return Value  \n `_snprintf_s` returns the number of characters stored in `buffer`, not counting the terminating null character. `_snwprintf_s` returns the number of wide characters stored in `buffer`, not counting the terminating null wide character.  \n  \n If the storage required to store the data and a terminating null exceeds `sizeOfBuffer`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution continues after the invalid parameter handler, these functions set `buffer` to an empty string, set `errno` to `ERANGE`, and return -1.  \n  \n If `buffer` or `format` is a `NULL` pointer, or if `count` is less than or equal to zero, the invalid parameter handler is invoked. If execution is allowed to continue, these functions set `errno` to `EINVAL` and return -1.  \n  \n For information about these and other error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n The `_snprintf_s` function formats and stores `count` or fewer characters in `buffer` and appends a terminating null. Each argument (if any) is converted and output according to the corresponding format specification in `format`. The formatting is consistent with the `printf` family of functions; see [Format Specification Syntax: printf and wprintf Functions](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md). If copying occurs between strings that overlap, the behavior is undefined.  \n  \n If `count` is [_TRUNCATE](../../c-runtime-library/truncate.md), then `_snprintf_s` writes as much of the string as will fit in `buffer` while leaving room for a terminating null. If the entire string (with terminating null) fits in `buffer`, then `_snprintf_s` returns the number of characters written (not including the terminating null); otherwise, `_snprintf_s` returns -1 to indicate that truncation occurred.  \n  \n> [!IMPORTANT]\n>  Ensure that `format` is not a user-defined string.  \n  \n `_snwprintf_s` is a wide-character version of `_snprintf_s`; the pointer arguments to `_snwprintf_s` are wide-character strings. Detection of encoding errors in `_snwprintf_s` might differ from that in `_snprintf_s`. `_snwprintf_s`, like `swprintf_s`, writes output to a string rather than to a destination of type `FILE`.  \n  \n The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale.  \n  \n In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically (eliminating the need to specify a size argument) and they can automatically replace older, non-secure functions with their newer, secure counterparts. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n### Generic-Text Routine Mappings  \n  \n|Tchar.h routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_sntprintf_s`|`_snprintf_s`|`_snprintf_s`|`_snwprintf_s`|  \n|`_sntprintf_s_l`|`_snprintf_s_l`|`_snprintf_s_l`|`_snwprintf_s_l`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_snprintf_s`, `_snprintf_s_l`|\\<stdio.h>|  \n|`_snwprintf_s`, `_snwprintf_s_l`|\\<stdio.h> or \\<wchar.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_snprintf_s.cpp  \n// compile with: /MTd  \n  \n// These #defines enable secure template overloads  \n// (see last part of Examples() below)  \n#define _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES 1   \n#define _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT 1  \n  \n#include <stdio.h>  \n#include <stdlib.h>  \n#include <string.h>  \n#include <crtdbg.h>  // For _CrtSetReportMode  \n#include <errno.h>  \n  \n// This example uses a 10-byte destination buffer.  \n  \nint snprintf_s_tester( const char * fmt, int x, size_t count )  \n{  \n   char dest[10];  \n  \n   printf( \"\\n\" );  \n  \n   if ( count == _TRUNCATE )  \n      printf( \"%zd-byte buffer; truncation semantics\\n\",  \n               _countof(dest) );  \n   else  \n      printf( \"count = %zd; %zd-byte buffer\\n\",  \n               count, _countof(dest) );  \n  \n   int ret = _snprintf_s( dest, _countof(dest), count, fmt, x );  \n  \n   printf( \"    new contents of dest: '%s'\\n\", dest );  \n  \n   return ret;  \n}  \n  \nvoid Examples()  \n{  \n   // formatted output string is 9 characters long: \"<<<123>>>\"  \n   snprintf_s_tester( \"<<<%d>>>\", 121, 8 );  \n   snprintf_s_tester( \"<<<%d>>>\", 121, 9 );  \n   snprintf_s_tester( \"<<<%d>>>\", 121, 10 );  \n  \n   printf( \"\\nDestination buffer too small:\\n\" );  \n  \n   snprintf_s_tester( \"<<<%d>>>\", 1221, 10 );  \n  \n   printf( \"\\nTruncation examples:\\n\" );  \n  \n   int ret = snprintf_s_tester( \"<<<%d>>>\", 1221, _TRUNCATE );  \n   printf( \"    truncation %s occur\\n\", ret == -1 ? \"did\"  \n                                                  : \"did not\" );  \n  \n   ret = snprintf_s_tester( \"<<<%d>>>\", 121, _TRUNCATE );  \n   printf( \"    truncation %s occur\\n\", ret == -1 ? \"did\"  \n                                                  : \"did not\" );  \n   printf( \"\\nSecure template overload example:\\n\" );  \n  \n   char dest[10];  \n   _snprintf( dest, 10, \"<<<%d>>>\", 12321 );  \n   // With secure template overloads enabled (see #defines  \n   // at top of file), the preceding line is replaced by  \n   //    _snprintf_s( dest, _countof(dest), 10, \"<<<%d>>>\", 12345 );  \n   // Instead of causing a buffer overrun, _snprintf_s invokes  \n   // the invalid parameter handler.  \n   // If secure template overloads were disabled, _snprintf would  \n   // write 10 characters and overrun the dest buffer.  \n   printf( \"    new contents of dest: '%s'\\n\", dest );  \n}  \n  \nvoid myInvalidParameterHandler(  \n   const wchar_t* expression,  \n   const wchar_t* function,   \n   const wchar_t* file,   \n   unsigned int line,   \n   uintptr_t pReserved)  \n{  \n   wprintf(L\"Invalid parameter handler invoked: %s\\n\", expression);  \n}  \n  \nint main( void )  \n{  \n   _invalid_parameter_handler oldHandler, newHandler;  \n  \n   newHandler = myInvalidParameterHandler;  \n   oldHandler = _set_invalid_parameter_handler(newHandler);  \n   // Disable the message box for assertions.  \n   _CrtSetReportMode(_CRT_ASSERT, 0);  \n  \n   Examples();  \n}  \n```  \n  \n```Output  \n  \ncount = 8; 10-byte buffer  \n    new contents of dest: '<<<121>>'  \n  \ncount = 9; 10-byte buffer  \n    new contents of dest: '<<<121>>>'  \n  \ncount = 10; 10-byte buffer  \n    new contents of dest: '<<<121>>>'  \n  \nDestination buffer too small:  \n  \ncount = 10; 10-byte buffer  \nInvalid parameter handler invoked: (\"Buffer too small\", 0)  \n    new contents of dest: ''  \n  \nTruncation examples:  \n  \n10-byte buffer; truncation semantics  \n    new contents of dest: '<<<1221>>'  \n    truncation did occur  \n  \n10-byte buffer; truncation semantics  \n    new contents of dest: '<<<121>>>'  \n    truncation did not occur  \n  \nSecure template overload example:  \nInvalid parameter handler invoked: (\"Buffer too small\", 0)  \n    new contents of dest: ''  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)   \n [fprintf, _fprintf_l, fwprintf, _fwprintf_l](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)   \n [printf, _printf_l, wprintf, _wprintf_l](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)   \n [scanf, _scanf_l, wscanf, _wscanf_l](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md)   \n [sscanf, _sscanf_l, swscanf, _swscanf_l](../../c-runtime-library/reference/sscanf-sscanf-l-swscanf-swscanf-l.md)   \n [vprintf Functions](../../c-runtime-library/vprintf-functions.md)"}