{"nodes":[{"pos":[12,59],"content":"set::const_reference (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"set::const_reference (STL-CLR) | Microsoft Docs","pos":[0,47]}]},{"content":"set::const_reference (STL/CLR)","pos":[652,682]},{"content":"The type of a constant reference to an element.","pos":[683,730]},{"content":"Syntax","pos":[739,745]},{"content":"Remarks","pos":[808,815]},{"content":"The type describes a constant reference to an element.","pos":[819,873]},{"content":"Example","pos":[882,889]},{"content":"Requirements","pos":[1541,1553]},{"pos":[1557,1582],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/set&gt;","source":"**Header:** \\<cliext/set>"},{"pos":[1589,1610],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[1619,1627]},{"content":"set (STL/CLR)","pos":[1632,1645]},{"content":"set::reference (STL/CLR)","pos":[1678,1702]},{"content":"set::value_type (STL/CLR)","pos":[1745,1770]}],"content":"---\ntitle: \"set::const_reference (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::set::const_reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"const_reference member [STL/CLR]\"\nms.assetid: 25326f25-b4d3-4a92-950a-a843cdff7486\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# set::const_reference (STL/CLR)\nThe type of a constant reference to an element.  \n  \n## Syntax  \n  \n```  \ntypedef value_type% const_reference;  \n```  \n  \n## Remarks  \n The type describes a constant reference to an element.  \n  \n## Example  \n  \n```  \n// cliext_set_const_reference.cpp   \n// compile with: /clr   \n#include <cliext/set>   \n  \ntypedef cliext::set<wchar_t> Myset;   \nint main()   \n    {   \n    Myset c1;   \n    c1.insert(L'a');   \n    c1.insert(L'b');   \n    c1.insert(L'c');   \n  \n// display initial contents \" a b c\"   \n    Myset::const_iterator cit = c1.begin();   \n    for (; cit != c1.end(); ++cit)   \n        {   // get a const reference to an element   \n        Myset::const_reference cref = *cit;   \n        System::Console::Write(\" {0}\", cref);   \n        }   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \na b c  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/set>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [set (STL/CLR)](../dotnet/set-stl-clr.md)   \n [set::reference (STL/CLR)](../dotnet/set-reference-stl-clr.md)   \n [set::value_type (STL/CLR)](../dotnet/set-value-type-stl-clr.md)"}