{"nodes":[{"pos":[12,89],"content":"How to: Iterate Over a User-Defined Collection with for each | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Iterate Over a User-Defined Collection with for each | Microsoft Docs","pos":[0,77]}]},{"content":"How to: Iterate Over a User-Defined Collection with for each","pos":[627,687]},{"content":"For a class to be a managed collection, it needs a non-private GetEnumerator function that returns a handle to an Enumerator class or an interface.","pos":[688,835]},{"content":"An enumerator class must contain the declaration for non-static MoveNext function and Current property.","pos":[837,940]},{"content":"Example","pos":[949,956]},{"content":"Simple user defined collection with reference types.","pos":[960,1012]},{"content":"See Also","pos":[2575,2583]},{"content":"for each, in","pos":[2588,2600]}],"content":"---\ntitle: \"How to: Iterate Over a User-Defined Collection with for each | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"collections, iterating over\"\nms.assetid: 0efd9e3c-d7bb-4f6c-9938-e0e65d191433\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Iterate Over a User-Defined Collection with for each\nFor a class to be a managed collection, it needs a non-private GetEnumerator function that returns a handle to an Enumerator class or an interface.  An enumerator class must contain the declaration for non-static MoveNext function and Current property.  \n  \n## Example  \n Simple user defined collection with reference types.  \n  \n```  \n// for_each_user_defined_collections.cpp  \n// compile with: /clr  \nusing namespace System;  \npublic interface struct IMyEnumerator {  \n   bool MoveNext();  \n   property Object^ Current {  \n      Object^ get();  \n   }  \n   void Reset();  \n};  \n  \npublic ref struct MyArray {     \n  \n   MyArray( array<int>^ d ) {  \n      data = d;  \n   }  \n  \n   ref struct enumerator : IMyEnumerator {  \n      enumerator( MyArray^ myArr ) {  \n         colInst = myArr;  \n         currentIndex = -1;  \n      }  \n  \n      virtual bool MoveNext() {  \n         if( currentIndex < colInst->data->Length - 1 ) {  \n            currentIndex++;  \n            return true;  \n         }  \n         return false;  \n      }  \n  \n      property Object^ Current {  \n         virtual Object^ get() {  \n            return colInst->data[currentIndex];  \n         }  \n      };  \n  \n      virtual void Reset() {}  \n      ~enumerator() {}  \n  \n      MyArray^ colInst;  \n      int currentIndex;  \n   };  \n  \n   array<int>^ data;  \n  \n   IMyEnumerator^ GetEnumerator() {  \n      return gcnew enumerator(this);  \n   }  \n};  \n  \nint main() {  \n   int retval = 0;  \n  \n   MyArray^ col = gcnew MyArray( gcnew array<int>{10, 20, 30 } );  \n  \n   for each ( Object^ c in col )  \n      retval += (int)c;  \n  \n   retval -= 10 + 20 + 30;  \n  \n   for each ( int c in gcnew MyArray( gcnew array<int>{10, 20, 30 } ) )  \n      retval += c;  \n  \n   retval -= 10 + 20 + 30;  \n  \n   Console::WriteLine(\"Return Code: {0}\", retval );  \n   return retval;  \n}  \n```  \n  \n```Output  \nReturn Code: 0  \n```  \n  \n## See Also  \n [for each, in](../dotnet/for-each-in.md)"}