{"nodes":[{"content":"Building C-C++ Programs","pos":[3,26]},{"content":"Building C-C++ Isolated Applications and Side-by-side Assemblies","pos":[59,123]},{"content":"Concepts of Isolated Applications and Side-by-side Assemblies","pos":[198,259]},{"content":"Building C-C++ Isolated Applications","pos":[331,367]},{"content":"Building C-C++ Side-by-side Assemblies","pos":[414,452]},{"content":"How to: Build Registration-Free COM Components","pos":[501,547]},{"content":"How to: Build Isolated Applications to Consume COM Components","pos":[603,664]},{"content":"Understanding Manifest Generation for C-C++ Programs","pos":[735,787]},{"content":"Manifest Generation in Visual Studio","pos":[851,887]},{"content":"Manifest Generation at the Command Line","pos":[935,974]},{"content":"How to: Embed a Manifest Inside a C-C++ Application","pos":[1025,1076]},{"content":"Troubleshooting C-C++ Isolated Applications and Side-by-side Assemblies","pos":[1137,1208]},{"content":"Configuring Programs for 64-Bit (Visual C++)","pos":[1289,1333]},{"content":"How to: Configure Visual C++ Projects to Target 64-Bit Platforms","pos":[1386,1450]},{"content":"How to: Enable a 64-Bit Visual C++ Toolset on the Command Line","pos":[1524,1586]},{"content":"Common Visual C++ 64-bit Migration Issues","pos":[1658,1699]},{"content":"x64 Software Conventions","pos":[1751,1775]},{"content":"Overview of x64 Calling Conventions","pos":[1811,1846]},{"content":"Types and Storage","pos":[1893,1910]},{"content":"Scalar Types","pos":[1940,1952]},{"content":"Aggregates and Unions","pos":[1977,1998]},{"content":"Examples of Structure Alignment","pos":[2032,2063]},{"content":"Bitfields","pos":[2107,2116]},{"content":"Conflicts with the x86 Compiler","pos":[2138,2169]},{"content":"Register Usage","pos":[2212,2226]},{"content":"Calling Convention","pos":[2252,2270]},{"content":"Parameter Passing","pos":[2301,2318]},{"content":"Varargs","pos":[2348,2355]},{"content":"Unprototyped Functions","pos":[2375,2397]},{"content":"Return Values (C++)","pos":[2432,2451]},{"content":"Caller-Callee Saved Registers","pos":[2481,2510]},{"content":"Function Pointers","pos":[2552,2569]},{"content":"Floating-Point Support for Older Code (Visual C++)","pos":[2599,2649]},{"content":"FpCsr","pos":[2710,2715]},{"content":"MxCsr","pos":[2733,2738]},{"content":"setjmp-longjump","pos":[2756,2771]},{"content":"Stack Usage","pos":[2798,2809]},{"content":"Stack Allocation","pos":[2833,2849]},{"content":"Dynamic Parameter Stack Area Construction","pos":[2878,2919]},{"content":"Function Types","pos":[2973,2987]},{"content":"malloc Alignment","pos":[3014,3030]},{"content":"alloca","pos":[3059,3065]},{"content":"Prolog and Epilog","pos":[3083,3100]},{"content":"Exception Handling (x64)","pos":[3129,3153]},{"content":"Unwind Data for Exception Handling, Debugger Support","pos":[3188,3240]},{"content":"struct RUNTIME_FUNCTION","pos":[3305,3328]},{"content":"struct UNWIND_INFO","pos":[3365,3383]},{"content":"struct UNWIND_CODE","pos":[3415,3433]},{"content":"Chained Unwind Info Structures","pos":[3465,3495]},{"content":"Unwind Procedure","pos":[3538,3554]},{"content":"Language Specific Handler","pos":[3583,3608]},{"content":"Unwind Helpers for MASM","pos":[3646,3669]},{"content":"Raw Pseudo Operations","pos":[3706,3727]},{"content":"MASM Macros","pos":[3762,3773]},{"content":"Unwind Data Definitions in C","pos":[3797,3825]},{"content":"Intrinsics and Inline Assembly","pos":[3865,3895]},{"content":"Image Format","pos":[3937,3949]},{"content":"Configuring Programs for ARM Processors (Visual C++)","pos":[3971,4023]},{"content":"Common Visual C++ ARM Migration Issues","pos":[4084,4122]},{"content":"Overview of ARM ABI Conventions","pos":[4171,4202]},{"content":"ARM Exception Handling","pos":[4244,4266]},{"content":"DLLs in Visual C++","pos":[4298,4316]},{"content":"Walkthrough: Creating and Using a Dynamic Link Library (C++)","pos":[4345,4405]},{"content":"Differences Between Applications and DLLs","pos":[4473,4514]},{"content":"Advantages of Using DLLs","pos":[4566,4590]},{"content":"Kinds of DLLs","pos":[4625,4638]},{"content":"Non-MFC DLLs: Overview","pos":[4663,4685]},{"content":"Regular DLLs Statically Linked to MFC","pos":[4718,4755]},{"content":"Regular DLLs Dynamically Linked to MFC","pos":[4804,4842]},{"content":"Extension DLLs: Overview","pos":[4892,4916]},{"content":"DLL Frequently Asked Questions","pos":[4950,4980]},{"content":"Can a multithreaded application access an MFC DLL in different threads?","pos":[5022,5093]},{"content":"Can an MFC DLL create multiple threads?","pos":[5177,5216]},{"content":"Are there any MFC classes or functions that cannot be used in an MFC DLL?","pos":[5268,5341]},{"content":"What optimization techniques should I use to improve the client application's performance when loading?","pos":[5427,5530]},{"content":"There's a memory leak in my regular DLL, but my code looks fine.","pos":[5583,5647]},{"content":"How can I find the memory leak?","pos":[5648,5679]},{"content":"Linking an Executable to a DLL","pos":[5711,5741]},{"content":"Determining Which Linking Method to Use","pos":[5783,5822]},{"content":"Linking Implicitly","pos":[5873,5891]},{"content":"Linking Explicitly","pos":[5921,5939]},{"content":"Initializing a DLL","pos":[5968,5986]},{"content":"Initializing Regular DLLs","pos":[6016,6041]},{"content":"Initializing Extension DLLs","pos":[6078,6105]},{"content":"Initializing Non-MFC DLLs","pos":[6144,6169]},{"content":"Run-Time Library Behavior","pos":[6205,6230]},{"content":"LoadLibrary and AfxLoadLibrary","pos":[6266,6296]},{"content":"GetProcAddress","pos":[6337,6351]},{"content":"FreeLibrary and AfxFreeLibrary","pos":[6376,6406]},{"content":"Search Path Used by Windows to Locate a DLL","pos":[6447,6490]},{"content":"Module States of a Regular DLL Dynamically Linked to MFC","pos":[6544,6600]},{"content":"Extension DLLs","pos":[6667,6681]},{"content":"Using Database, OLE, and Sockets Extension DLLs in Regular DLLs","pos":[6707,6770]},{"content":"Creating a Resource-Only DLL","pos":[6842,6870]},{"content":"Localized Resources in MFC Applications: Satellite DLLs","pos":[6909,6964]},{"content":"Importing and Exporting","pos":[7029,7052]},{"content":"Importing into an Application","pos":[7087,7116]},{"content":"Importing into an Application Using __declspec(dllimport)","pos":[7158,7215]},{"content":"Importing Function Calls Using __declspec(dllimport)","pos":[7282,7334]},{"content":"Importing Data Using __declspec(dllimport)","pos":[7396,7438]},{"content":"Importing Using DEF Files","pos":[7490,7515]},{"content":"Exporting from a DLL","pos":[7552,7572]},{"content":"Exporting from a DLL Using DEF Files","pos":[7605,7641]},{"content":"Exporting from a DLL Using __declspec(dllexport)","pos":[7690,7738]},{"content":"Exporting and Importing Using AFX_EXT_CLASS","pos":[7796,7839]},{"content":"Exporting C++ Functions for Use in C-Language Executables","pos":[7895,7952]},{"content":"Exporting C Functions for Use in C or C++ Language Executables","pos":[8022,8084]},{"content":"Determining Which Exporting Method to Use","pos":[8159,8200]},{"content":"Exporting Functions from a DLL by Ordinal Rather Than by Name","pos":[8254,8315]},{"content":"Mutual Imports","pos":[8388,8402]},{"content":"Importing and Exporting Inline Functions","pos":[8428,8468]},{"content":"Active Technology and DLLs","pos":[8519,8545]},{"content":"Automation in a DLL","pos":[8582,8601]},{"content":"Naming Conventions for MFC DLLs","pos":[8631,8662]},{"content":"Calling DLL Functions from Visual Basic Applications","pos":[8704,8756]},{"content":"Compiler Intrinsics and Assembly Language","pos":[8818,8859]},{"content":"Building on the Command Line","pos":[8886,8914]},{"content":"Walkthrough: Compiling a Native C++ Program on the Command Line","pos":[8953,9016]},{"content":"Walkthrough: Compile a C program on the command line","pos":[9089,9141]},{"content":"Walkthrough: Compiling a C++-CLI Program on the Command Line","pos":[9203,9263]},{"content":"Walkthrough: Compiling a C++-CX Program on the Command Line","pos":[9333,9392]},{"content":"Setting the Path and Environment Variables for Command-Line Builds","pos":[9461,9527]},{"content":"NMAKE Reference","pos":[9604,9619]},{"content":"Running NMAKE","pos":[9646,9659]},{"content":"NMAKE Options","pos":[9685,9698]},{"content":"Tools.ini and NMAKE","pos":[9724,9743]},{"content":"Exit Codes from NMAKE","pos":[9775,9796]},{"content":"Contents of a Makefile","pos":[9829,9851]},{"content":"Wildcards and NMAKE","pos":[9886,9905]},{"content":"Long Filenames in a Makefile","pos":[9937,9965]},{"content":"Comments in a Makefile","pos":[10006,10028]},{"content":"Special Characters in a Makefile","pos":[10063,10095]},{"content":"Sample Makefile","pos":[10140,10155]},{"content":"Description Blocks","pos":[10182,10200]},{"content":"Targets","pos":[10231,10238]},{"content":"Pseudotargets","pos":[10259,10272]},{"content":"Multiple Targets","pos":[10299,10315]},{"content":"Cumulative Dependencies","pos":[10345,10368]},{"content":"Targets in Multiple Description Blocks","pos":[10405,10443]},{"content":"Dependency Side Effects","pos":[10495,10518]},{"content":"Dependents","pos":[10554,10564]},{"content":"Inferred Dependents","pos":[10588,10607]},{"content":"Search Paths for Dependents","pos":[10640,10667]},{"content":"Commands in a Makefile","pos":[10706,10728]},{"content":"Command Modifiers","pos":[10763,10780]},{"content":"Filename-Parts Syntax","pos":[10810,10831]},{"content":"Inline Files in a Makefile","pos":[10865,10891]},{"content":"Specifying an Inline File","pos":[10931,10956]},{"content":"Creating Inline File Text","pos":[10995,11020]},{"content":"Reusing Inline Files","pos":[11059,11079]},{"content":"Multiple Inline Files","pos":[11113,11134]},{"content":"Macros and NMAKE","pos":[11167,11183]},{"content":"Defining an NMAKE Macro","pos":[11212,11235]},{"content":"Special Characters in Macros","pos":[11272,11300]},{"content":"Null and Undefined Macros","pos":[11342,11367]},{"content":"Where to Define Macros","pos":[11406,11428]},{"content":"Precedence in Macro Definitions","pos":[11464,11495]},{"content":"Using an NMAKE Macro","pos":[11539,11559]},{"content":"Macro Substitution","pos":[11593,11611]},{"content":"Special NMAKE Macros","pos":[11642,11662]},{"content":"Filename Macros","pos":[11696,11711]},{"content":"Recursion Macros","pos":[11740,11756]},{"content":"Command Macros and Options Macros","pos":[11786,11819]},{"content":"Environment-Variable Macros","pos":[11866,11893]},{"content":"Inference Rules","pos":[11932,11947]},{"content":"Defining a Rule","pos":[11975,11990]},{"content":"Search Paths in Rules","pos":[12019,12040]},{"content":"Batch-Mode Rules","pos":[12074,12090]},{"content":"Predefined Rules","pos":[12119,12135]},{"content":"Inferred Dependents and Rules","pos":[12164,12193]},{"content":"Precedence in Inference Rules","pos":[12235,12264]},{"content":"Dot Directives","pos":[12305,12319]},{"content":"Makefile Preprocessing","pos":[12345,12367]},{"content":"Makefile Preprocessing Directives","pos":[12402,12435]},{"content":"Expressions in Makefile Preprocessing","pos":[12481,12518]},{"content":"Makefile Preprocessing Operators","pos":[12569,12601]},{"content":"Executing a Program in Preprocessing","pos":[12647,12683]},{"content":"MSBuild (Visual C++)","pos":[12730,12750]},{"content":"MSBuild (Visual C++) Overview","pos":[12780,12809]},{"content":"Build System Changes","pos":[12848,12868]},{"content":"Walkthrough: Using MSBuild to Create a Visual C++ Project","pos":[12900,12957]},{"content":"How to: Use Build Events in MSBuild Projects","pos":[13025,13069]},{"content":"How to: Add a Custom Build Step to MSBuild Projects","pos":[13124,13175]},{"content":"How to: Add Custom Build Tools to MSBuild Projects","pos":[13237,13287]},{"content":"How to: Integrate Custom Tools into the Project Properties","pos":[13348,13406]},{"content":"How to: Modify the Target Framework and Platform Toolset","pos":[13475,13531]},{"content":"Configuring Programs for Windows XP","pos":[13596,13631]},{"content":"C/C++ Building Reference","pos":[13676,13700]}],"content":"# [Building C-C++ Programs](building-c-cpp-programs.md)\n# [Building C-C++ Isolated Applications and Side-by-side Assemblies](building-c-cpp-isolated-applications-and-side-by-side-assemblies.md)\n## [Concepts of Isolated Applications and Side-by-side Assemblies](concepts-of-isolated-applications-and-side-by-side-assemblies.md)\n## [Building C-C++ Isolated Applications](building-c-cpp-isolated-applications.md)\n## [Building C-C++ Side-by-side Assemblies](building-c-cpp-side-by-side-assemblies.md)\n## [How to: Build Registration-Free COM Components](how-to-build-registration-free-com-components.md)\n## [How to: Build Isolated Applications to Consume COM Components](how-to-build-isolated-applications-to-consume-com-components.md)\n## [Understanding Manifest Generation for C-C++ Programs](understanding-manifest-generation-for-c-cpp-programs.md)\n### [Manifest Generation in Visual Studio](manifest-generation-in-visual-studio.md)\n### [Manifest Generation at the Command Line](manifest-generation-at-the-command-line.md)\n### [How to: Embed a Manifest Inside a C-C++ Application](how-to-embed-a-manifest-inside-a-c-cpp-application.md)\n## [Troubleshooting C-C++ Isolated Applications and Side-by-side Assemblies](troubleshooting-c-cpp-isolated-applications-and-side-by-side-assemblies.md)\n# [Configuring Programs for 64-Bit (Visual C++)](configuring-programs-for-64-bit-visual-cpp.md)\n## [How to: Configure Visual C++ Projects to Target 64-Bit Platforms](how-to-configure-visual-cpp-projects-to-target-64-bit-platforms.md)\n## [How to: Enable a 64-Bit Visual C++ Toolset on the Command Line](how-to-enable-a-64-bit-visual-cpp-toolset-on-the-command-line.md)\n## [Common Visual C++ 64-bit Migration Issues](common-visual-cpp-64-bit-migration-issues.md)\n## [x64 Software Conventions](x64-software-conventions.md)\n### [Overview of x64 Calling Conventions](overview-of-x64-calling-conventions.md)\n### [Types and Storage](types-and-storage.md)\n#### [Scalar Types](scalar-types.md)\n#### [Aggregates and Unions](aggregates-and-unions.md)\n#### [Examples of Structure Alignment](examples-of-structure-alignment.md)\n#### [Bitfields](bitfields.md)\n#### [Conflicts with the x86 Compiler](conflicts-with-the-x86-compiler.md)\n### [Register Usage](register-usage.md)\n### [Calling Convention](calling-convention.md)\n#### [Parameter Passing](parameter-passing.md)\n#### [Varargs](varargs.md)\n#### [Unprototyped Functions](unprototyped-functions.md)\n#### [Return Values (C++)](return-values-cpp.md)\n#### [Caller-Callee Saved Registers](caller-callee-saved-registers.md)\n#### [Function Pointers](function-pointers.md)\n#### [Floating-Point Support for Older Code (Visual C++)](floating-point-support-for-older-code-visual-cpp.md)\n#### [FpCsr](fpcsr.md)\n#### [MxCsr](mxcsr.md)\n#### [setjmp-longjump](setjmp-longjump.md)\n### [Stack Usage](stack-usage.md)\n#### [Stack Allocation](stack-allocation.md)\n#### [Dynamic Parameter Stack Area Construction](dynamic-parameter-stack-area-construction.md)\n#### [Function Types](function-types.md)\n#### [malloc Alignment](malloc-alignment.md)\n#### [alloca](alloca.md)\n### [Prolog and Epilog](prolog-and-epilog.md)\n### [Exception Handling (x64)](exception-handling-x64.md)\n#### [Unwind Data for Exception Handling, Debugger Support](unwind-data-for-exception-handling-debugger-support.md)\n##### [struct RUNTIME_FUNCTION](struct-runtime-function.md)\n##### [struct UNWIND_INFO](struct-unwind-info.md)\n##### [struct UNWIND_CODE](struct-unwind-code.md)\n##### [Chained Unwind Info Structures](chained-unwind-info-structures.md)\n#### [Unwind Procedure](unwind-procedure.md)\n#### [Language Specific Handler](language-specific-handler.md)\n#### [Unwind Helpers for MASM](unwind-helpers-for-masm.md)\n##### [Raw Pseudo Operations](raw-pseudo-operations.md)\n##### [MASM Macros](masm-macros.md)\n#### [Unwind Data Definitions in C](unwind-data-definitions-in-c.md)\n### [Intrinsics and Inline Assembly](intrinsics-and-inline-assembly.md)\n### [Image Format](image-format.md)\n# [Configuring Programs for ARM Processors (Visual C++)](configuring-programs-for-arm-processors-visual-cpp.md)\n## [Common Visual C++ ARM Migration Issues](common-visual-cpp-arm-migration-issues.md)\n## [Overview of ARM ABI Conventions](overview-of-arm-abi-conventions.md)\n## [ARM Exception Handling](arm-exception-handling.md)\n# [DLLs in Visual C++](dlls-in-visual-cpp.md)\n## [Walkthrough: Creating and Using a Dynamic Link Library (C++)](walkthrough-creating-and-using-a-dynamic-link-library-cpp.md)\n## [Differences Between Applications and DLLs](differences-between-applications-and-dlls.md)\n## [Advantages of Using DLLs](advantages-of-using-dlls.md)\n## [Kinds of DLLs](kinds-of-dlls.md)\n### [Non-MFC DLLs: Overview](non-mfc-dlls-overview.md)\n### [Regular DLLs Statically Linked to MFC](regular-dlls-statically-linked-to-mfc.md)\n### [Regular DLLs Dynamically Linked to MFC](regular-dlls-dynamically-linked-to-mfc.md)\n### [Extension DLLs: Overview](extension-dlls-overview.md)\n## [DLL Frequently Asked Questions](dll-frequently-asked-questions.md)\n### [Can a multithreaded application access an MFC DLL in different threads?](can-a-multithreaded-application-access-an-mfc-dll-in-different-threads-q.md)\n### [Can an MFC DLL create multiple threads?](can-an-mfc-dll-create-multiple-threads-q.md)\n### [Are there any MFC classes or functions that cannot be used in an MFC DLL?](are-there-any-mfc-classes-or-functions-that-cannot-be-used-in-an-mfc-dll-q.md)\n### [What optimization techniques should I use to improve the client application's performance when loading?](what-optimization-techniques-should-i-use.md)\n### [There's a memory leak in my regular DLL, but my code looks fine. How can I find the memory leak?](memory-leak-in-my-dll.md)\n## [Linking an Executable to a DLL](linking-an-executable-to-a-dll.md)\n### [Determining Which Linking Method to Use](determining-which-linking-method-to-use.md)\n### [Linking Implicitly](linking-implicitly.md)\n### [Linking Explicitly](linking-explicitly.md)\n## [Initializing a DLL](initializing-a-dll.md)\n### [Initializing Regular DLLs](initializing-regular-dlls.md)\n### [Initializing Extension DLLs](initializing-extension-dlls.md)\n### [Initializing Non-MFC DLLs](initializing-non-mfc-dlls.md)\n## [Run-Time Library Behavior](run-time-library-behavior.md)\n## [LoadLibrary and AfxLoadLibrary](loadlibrary-and-afxloadlibrary.md)\n## [GetProcAddress](getprocaddress.md)\n## [FreeLibrary and AfxFreeLibrary](freelibrary-and-afxfreelibrary.md)\n## [Search Path Used by Windows to Locate a DLL](search-path-used-by-windows-to-locate-a-dll.md)\n## [Module States of a Regular DLL Dynamically Linked to MFC](module-states-of-a-regular-dll-dynamically-linked-to-mfc.md)\n## [Extension DLLs](extension-dlls.md)\n### [Using Database, OLE, and Sockets Extension DLLs in Regular DLLs](using-database-ole-and-sockets-extension-dlls-in-regular-dlls.md)\n## [Creating a Resource-Only DLL](creating-a-resource-only-dll.md)\n## [Localized Resources in MFC Applications: Satellite DLLs](localized-resources-in-mfc-applications-satellite-dlls.md)\n## [Importing and Exporting](importing-and-exporting.md)\n### [Importing into an Application](importing-into-an-application.md)\n#### [Importing into an Application Using __declspec(dllimport)](importing-into-an-application-using-declspec-dllimport.md)\n#### [Importing Function Calls Using __declspec(dllimport)](importing-function-calls-using-declspec-dllimport.md)\n#### [Importing Data Using __declspec(dllimport)](importing-data-using-declspec-dllimport.md)\n#### [Importing Using DEF Files](importing-using-def-files.md)\n### [Exporting from a DLL](exporting-from-a-dll.md)\n#### [Exporting from a DLL Using DEF Files](exporting-from-a-dll-using-def-files.md)\n#### [Exporting from a DLL Using __declspec(dllexport)](exporting-from-a-dll-using-declspec-dllexport.md)\n#### [Exporting and Importing Using AFX_EXT_CLASS](exporting-and-importing-using-afx-ext-class.md)\n#### [Exporting C++ Functions for Use in C-Language Executables](exporting-cpp-functions-for-use-in-c-language-executables.md)\n#### [Exporting C Functions for Use in C or C++ Language Executables](exporting-c-functions-for-use-in-c-or-cpp-language-executables.md)\n#### [Determining Which Exporting Method to Use](determining-which-exporting-method-to-use.md)\n#### [Exporting Functions from a DLL by Ordinal Rather Than by Name](exporting-functions-from-a-dll-by-ordinal-rather-than-by-name.md)\n### [Mutual Imports](mutual-imports.md)\n### [Importing and Exporting Inline Functions](importing-and-exporting-inline-functions.md)\n## [Active Technology and DLLs](active-technology-and-dlls.md)\n## [Automation in a DLL](automation-in-a-dll.md)\n## [Naming Conventions for MFC DLLs](naming-conventions-for-mfc-dlls.md)\n## [Calling DLL Functions from Visual Basic Applications](calling-dll-functions-from-visual-basic-applications.md)\n# [Compiler Intrinsics and Assembly Language](../intrinsics/TOC.md)\n# [Building on the Command Line](building-on-the-command-line.md)\n## [Walkthrough: Compiling a Native C++ Program on the Command Line](walkthrough-compiling-a-native-cpp-program-on-the-command-line.md)\n## [Walkthrough: Compile a C program on the command line](walkthrough-compile-a-c-program-on-the-command-line.md)\n## [Walkthrough: Compiling a C++-CLI Program on the Command Line](walkthrough-compiling-a-cpp-cli-program-on-the-command-line.md)\n## [Walkthrough: Compiling a C++-CX Program on the Command Line](walkthrough-compiling-a-cpp-cx-program-on-the-command-line.md)\n## [Setting the Path and Environment Variables for Command-Line Builds](setting-the-path-and-environment-variables-for-command-line-builds.md)\n## [NMAKE Reference](nmake-reference.md)\n### [Running NMAKE](running-nmake.md)\n#### [NMAKE Options](nmake-options.md)\n#### [Tools.ini and NMAKE](tools-ini-and-nmake.md)\n#### [Exit Codes from NMAKE](exit-codes-from-nmake.md)\n### [Contents of a Makefile](contents-of-a-makefile.md)\n#### [Wildcards and NMAKE](wildcards-and-nmake.md)\n#### [Long Filenames in a Makefile](long-filenames-in-a-makefile.md)\n#### [Comments in a Makefile](comments-in-a-makefile.md)\n#### [Special Characters in a Makefile](special-characters-in-a-makefile.md)\n#### [Sample Makefile](sample-makefile.md)\n### [Description Blocks](description-blocks.md)\n#### [Targets](targets.md)\n##### [Pseudotargets](pseudotargets.md)\n##### [Multiple Targets](multiple-targets.md)\n##### [Cumulative Dependencies](cumulative-dependencies.md)\n##### [Targets in Multiple Description Blocks](targets-in-multiple-description-blocks.md)\n##### [Dependency Side Effects](dependency-side-effects.md)\n#### [Dependents](dependents.md)\n##### [Inferred Dependents](inferred-dependents.md)\n##### [Search Paths for Dependents](search-paths-for-dependents.md)\n### [Commands in a Makefile](commands-in-a-makefile.md)\n#### [Command Modifiers](command-modifiers.md)\n#### [Filename-Parts Syntax](filename-parts-syntax.md)\n#### [Inline Files in a Makefile](inline-files-in-a-makefile.md)\n##### [Specifying an Inline File](specifying-an-inline-file.md)\n##### [Creating Inline File Text](creating-inline-file-text.md)\n##### [Reusing Inline Files](reusing-inline-files.md)\n##### [Multiple Inline Files](multiple-inline-files.md)\n### [Macros and NMAKE](macros-and-nmake.md)\n#### [Defining an NMAKE Macro](defining-an-nmake-macro.md)\n##### [Special Characters in Macros](special-characters-in-macros.md)\n##### [Null and Undefined Macros](null-and-undefined-macros.md)\n##### [Where to Define Macros](where-to-define-macros.md)\n##### [Precedence in Macro Definitions](precedence-in-macro-definitions.md)\n#### [Using an NMAKE Macro](using-an-nmake-macro.md)\n##### [Macro Substitution](macro-substitution.md)\n#### [Special NMAKE Macros](special-nmake-macros.md)\n##### [Filename Macros](filename-macros.md)\n##### [Recursion Macros](recursion-macros.md)\n##### [Command Macros and Options Macros](command-macros-and-options-macros.md)\n##### [Environment-Variable Macros](environment-variable-macros.md)\n### [Inference Rules](inference-rules.md)\n#### [Defining a Rule](defining-a-rule.md)\n##### [Search Paths in Rules](search-paths-in-rules.md)\n#### [Batch-Mode Rules](batch-mode-rules.md)\n#### [Predefined Rules](predefined-rules.md)\n#### [Inferred Dependents and Rules](inferred-dependents-and-rules.md)\n#### [Precedence in Inference Rules](precedence-in-inference-rules.md)\n### [Dot Directives](dot-directives.md)\n### [Makefile Preprocessing](makefile-preprocessing.md)\n#### [Makefile Preprocessing Directives](makefile-preprocessing-directives.md)\n#### [Expressions in Makefile Preprocessing](expressions-in-makefile-preprocessing.md)\n##### [Makefile Preprocessing Operators](makefile-preprocessing-operators.md)\n##### [Executing a Program in Preprocessing](executing-a-program-in-preprocessing.md)\n## [MSBuild (Visual C++)](msbuild-visual-cpp.md)\n### [MSBuild (Visual C++) Overview](msbuild-visual-cpp-overview.md)\n### [Build System Changes](build-system-changes.md)\n### [Walkthrough: Using MSBuild to Create a Visual C++ Project](walkthrough-using-msbuild-to-create-a-visual-cpp-project.md)\n### [How to: Use Build Events in MSBuild Projects](how-to-use-build-events-in-msbuild-projects.md)\n### [How to: Add a Custom Build Step to MSBuild Projects](how-to-add-a-custom-build-step-to-msbuild-projects.md)\n### [How to: Add Custom Build Tools to MSBuild Projects](how-to-add-custom-build-tools-to-msbuild-projects.md)\n### [How to: Integrate Custom Tools into the Project Properties](how-to-integrate-custom-tools-into-the-project-properties.md)\n### [How to: Modify the Target Framework and Platform Toolset](how-to-modify-the-target-framework-and-platform-toolset.md)\n# [Configuring Programs for Windows XP](configuring-programs-for-windows-xp.md)\n# [C/C++ Building Reference](reference/TOC.md)"}