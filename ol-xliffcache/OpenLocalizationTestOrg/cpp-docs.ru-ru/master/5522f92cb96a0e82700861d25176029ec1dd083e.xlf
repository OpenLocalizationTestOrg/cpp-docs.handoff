<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5522f92cb96a0e82700861d25176029ec1dd083e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\registry-scripting-examples.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">af2f5cba0705e82885f341cabc7cebdd2e17ef73</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">72dc8d6290e927e003aa6a2506e22899b7cb2fac</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Registry Scripting Examples | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Registry Scripting Examples</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The scripting examples in this topic demonstrate how to add a key to the system registry, register the Registrar COM server, and specify multiple parse trees.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Add a Key to HKEY_CURRENT_USER</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following parse tree illustrates a simple script that adds a single key to the system registry.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In particular, the script adds the key, <ph id="ph1">`MyVeryOwnKey`</ph>, to <ph id="ph2">`HKEY_CURRENT_USER`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It also assigns the default string value of <ph id="ph1">`HowGoesIt`</ph> to the new key:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This script can easily be extended to define multiple subkeys as follows:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Now, the script adds a subkey, <ph id="ph1">`HasASubkey`</ph>, to <ph id="ph2">`MyVeryOwnKey`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To this subkey, it adds both the <ph id="ph1">`PrettyCool`</ph> subkey (with a default <ph id="ph2">`DWORD`</ph> value of 55) and the <ph id="ph3">`ANameValue`</ph> named value (with a string value of <ph id="ph4">`WithANamedValue`</ph>).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Register the Registrar COM Server</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following script registers the Registrar COM server itself.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>At run time, this parse tree adds the <ph id="ph1">`ATL.Registrar`</ph> key to <ph id="ph2">`HKEY_CLASSES_ROOT`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To this new key, it then:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Specifies <ph id="ph1">`ATL Registrar Class`</ph> as the key's default string value.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Adds <ph id="ph1">`CLSID`</ph> as a subkey.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Specifies <ph id="ph1">`{44EC053A-400F-11D0-9DCD-00A0C90391D3}`</ph> for <ph id="ph2">`CLSID`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>(This value is the Registrar's CLSID for use with <ph id="ph1">`CoCreateInstance`</ph>.)</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Since <ph id="ph1">`CLSID`</ph> is shared, it should not be removed in Unregister mode.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The statement, <ph id="ph1">`NoRemove CLSID`</ph>, does this by indicating that <ph id="ph2">`CLSID`</ph> should be opened in Register mode and ignored in Unregister mode.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ForceRemove`</ph> statement provides a housekeeping function by removing a key and all of its subkeys before re-creating the key.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This can be useful if the names of the subkeys have changed.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In this scripting example, <ph id="ph1">`ForceRemove`</ph> checks to see if <ph id="ph2">`{44EC053A-400F-11D0-9DCD-00A0C90391D3}`</ph> already exists.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If it does, <ph id="ph1">`ForceRemove`</ph>:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Recursively deletes <ph id="ph1">`{44EC053A-400F-11D0-9DCD-00A0C90391D3}`</ph> and all of its subkeys.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Re-creates <ph id="ph1">`{44EC053A-400F-11D0-9DCD-00A0C90391D3}`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Adds <ph id="ph1">`ATL Registrar Class`</ph> as the default string value for <ph id="ph2">`{44EC053A-400F-11D0-9DCD-00A0C90391D3}`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The parse tree now adds two new subkeys to <ph id="ph1">`{44EC053A-400F-11D0-9DCD-00A0C90391D3}`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The first key, <ph id="ph1">`ProgID`</ph>, gets a default string value that is the ProgID.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The second key, <ph id="ph1">`InprocServer32`</ph>, gets a default string value, <ph id="ph2">`%MODULE%`</ph>, that is a preprocessor value explained in the section, <bpt id="p1">[</bpt>Using Replaceable Parameters (The Registrar's Preprocessor)<ept id="p1">](../atl/using-replaceable-parameters-the-registrar-s-preprocessor.md)</ept>, of this article.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>also gets a named value, <ph id="ph1">`ThreadingModel`</ph>, with a string value of <ph id="ph2">`Apartment`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Specify Multiple Parse Trees</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To specify more than one parse tree in a script, simply place one tree at the end of another.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For example, the following script adds the key, <ph id="ph1">`MyVeryOwnKey`</ph>, to the parse trees for both <ph id="ph2">`HKEY_CLASSES_ROOT`</ph> and <ph id="ph3">`HKEY_CURRENT_USER`</ph>:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In a Registrar script, 4K is the maximum token size.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>(A token is any recognizable element in the syntax.) In the previous scripting example, <ph id="ph1">`HKCR`</ph>, <ph id="ph2">`HKEY_CURRENT_USER`</ph>, <ph id="ph3">`'MyVeryOwnKey'`</ph>, and <ph id="ph4">`'HowGoesIt'`</ph> are all tokens.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Creating Registrar Scripts</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>