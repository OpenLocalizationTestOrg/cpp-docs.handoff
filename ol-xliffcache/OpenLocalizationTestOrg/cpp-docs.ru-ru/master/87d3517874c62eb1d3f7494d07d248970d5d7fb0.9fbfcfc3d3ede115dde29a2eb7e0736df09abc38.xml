{"nodes":[{"pos":[12,59],"content":"tuple_size Class &lt;array&gt; | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"tuple_size Class <ph id=\"ph1\">&amp;lt;</ph>array<ph id=\"ph2\">&amp;gt;</ph> | Microsoft Docs","pos":[0,47],"source":"tuple_size Class &lt;array&gt; | Microsoft Docs"}]},{"content":"tuple_size Class <ph id=\"ph1\">&amp;lt;</ph>array","pos":[682,708],"source":"tuple_size Class &lt;array"},{"content":"Wraps the size of an array.","pos":[713,740]},{"content":"Syntax","pos":[749,755]},{"content":"Template Parameters","pos":[1269,1288]},{"content":"The type of an element.","pos":[1299,1322]},{"content":"The size of the array.","pos":[1339,1361]},{"content":"Remarks","pos":[1370,1377]},{"content":"This template is a specialization of the template class <bpt id=\"p1\">[</bpt>tuple_size Class<ept id=\"p1\">](../standard-library/tuple-size-class-tuple.md)</ept>.","pos":[1381,1503],"source":"This template is a specialization of the template class [tuple_size Class](../standard-library/tuple-size-class-tuple.md)."},{"content":"It has a member <ph id=\"ph1\">`value`</ph> that is an integral constant expression whose value is <ph id=\"ph2\">`N`</ph>, which is the size of the array.","pos":[1504,1619],"source":" It has a member `value` that is an integral constant expression whose value is `N`, which is the size of the array."},{"content":"Example","pos":[1628,1635]},{"content":"Requirements","pos":[2075,2087]},{"pos":[2091,2111],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>array&gt;","source":"**Header:** \\<array>"},{"pos":[2118,2136],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"content":"See Also","pos":[2145,2153]},{"content":"array&gt;","pos":[2160,2166],"source":"array>"},{"content":"tuple&gt;","pos":[2205,2211],"source":"tuple>"},{"content":"tuple_size Class","pos":[2248,2264]}],"content":"---\ntitle: \"tuple_size Class &lt;array&gt; | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"tuple_size\"\n  - \"std::tr1::tuple_size\"\n  - \"std.tr1.tuple_size\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"tuple_size Class <array> (TR1)\"\nms.assetid: ef95ffee-59b4-4396-817f-487d4486772d\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# tuple_size Class &lt;array&gt;\nWraps the size of an array.  \n  \n## Syntax  \n  \n```  \ntemplate <class Tuple>  \nstruct tuple_size;  \n \n// struct to determine number of elements in array  \ntemplate <class T, size_t Size>  \nstruct tuple_size<array<T, Size>>  \n: integral_constant<size_t, Size>;  \n \n// size of const tuple  \ntemplate <class Tuple>  \nstruct tuple_size<const Tuple>;  \n \n// size of volatile tuple  \ntemplate <class Tuple>  \nstruct tuple_size<volatile Tuple>;  \n \n// size of const volatile tuple  \ntemplate <class Tuple>  \nstruct tuple_size<const volatile Tuple>;  \n```  \n  \n## Template Parameters  \n `T`  \n The type of an element.  \n  \n `Size`  \n The size of the array.  \n  \n## Remarks  \n This template is a specialization of the template class [tuple_size Class](../standard-library/tuple-size-class-tuple.md). It has a member `value` that is an integral constant expression whose value is `N`, which is the size of the array.  \n  \n## Example  \n  \n```cpp  \n#include <array>   \n#include <iostream>   \n  \nusing namespace std;  \n  \ntypedef array<int, 4> MyArray;  \n  \nint main()  \n{  \n    MyArray c0 { 0, 1, 2, 3 };  \n  \n    // display contents \" 0 1 2 3\"   \n    for (const auto& e : c0)  \n    {  \n        cout << e;  \n    }  \n    cout << endl;  \n  \n    // display size \" 4\"   \n    cout << \" \" << tuple_size<MyArray>::value << endl;  \n}  \n/*  \nOutput:  \n0123  \n4  \n*/  \n  \n```  \n  \n## Requirements  \n **Header:** \\<array>  \n  \n **Namespace:** std  \n  \n## See Also  \n [\\<array>](../standard-library/array.md)   \n [\\<tuple>](../standard-library/tuple.md)   \n [tuple_size Class](../standard-library/tuple-size-class-tuple.md)\n"}