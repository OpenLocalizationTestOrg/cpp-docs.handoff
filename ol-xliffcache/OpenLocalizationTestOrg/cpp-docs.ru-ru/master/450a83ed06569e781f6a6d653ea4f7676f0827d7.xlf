<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">450a83ed06569e781f6a6d653ea4f7676f0827d7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\clist-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8ddbdeb36e67367be436f75303ae89af82f99e77</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8331f4c296701aa15231538c7e2edfff19476ac5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CList Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CList Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Supports ordered lists of nonunique objects accessible sequentially or by value.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CList::CList</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs an empty ordered list.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CList::AddHead</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Adds an element (or all the elements in another list) to the head of the list (makes a new head).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CList::AddTail</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Adds an element (or all the elements in another list) to the tail of the list (makes a new tail).</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CList::Find</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Gets the position of an element specified by pointer value.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CList::FindIndex</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gets the position of an element specified by a zero-based index.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CList::GetAt</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Gets the element at a given position.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CList::GetCount</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in this list.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CList::GetHead</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Returns the head element of the list (cannot be empty).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CList::GetHeadPosition</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Returns the position of the head element of the list.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CList::GetNext</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Gets the next element for iterating.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CList::GetPrev</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Gets the previous element for iterating.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CList::GetSize</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in this list.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>CList::GetTail</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Returns the tail element of the list (cannot be empty).</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>CList::GetTailPosition</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Returns the position of the tail element of the list.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>CList::InsertAfter</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Inserts a new element after a given position.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>CList::InsertBefore</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Inserts a new element before a given position.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>CList::IsEmpty</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Tests for the empty list condition (no elements).</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>CList::RemoveAll</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Removes all the elements from this list.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>CList::RemoveAt</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Removes an element from this list, specified by position.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>CList::RemoveHead</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Removes the element from the head of the list.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>CList::RemoveTail</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Removes the element from the tail of the list.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>CList::SetAt</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Sets the element at a given position.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Type of object stored in the list.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>_</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Type used to reference objects stored in the list.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Can be a reference.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>lists behave like doubly-linked lists.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A variable of type <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> is a key for the list.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You can use a <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> variable as an iterator to traverse a list sequentially and as a bookmark to hold a place.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A position is not the same as an index, however.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Element insertion is very fast at the list head, at the tail, and at a known <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A sequential search is necessary to look up an element by value or index.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This search can be slow if the list is long.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If you need a dump of individual elements in the list, you must set the depth of the dump context to 1 or greater.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Certain member functions of this class call global helper functions that must be customized for most uses of the <ph id="ph1">`CList`</ph> class.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Collection Class Helpers<ept id="p1">](../../mfc/reference/collection-class-helpers.md)</ept> in the "Macros and Globals" section.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For more information on using <ph id="ph1">`CList`</ph>, see the article <bpt id="p1">[</bpt>Collections<ept id="p1">](../../mfc/collections.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#35</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxtempl.h</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>CList::AddHead</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Adds a new element or list of elements to the head of this list.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Template parameter specifying the type of the list element (can be a reference).</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The new element.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A pointer to another <ph id="ph1">`CList`</ph> list.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The elements in <ph id="ph1">`pNewList`</ph> will be added to this list.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The first version returns the <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value of the newly inserted element.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The list can be empty before the operation.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#36</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>CList::AddTail</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Adds a new element or list of elements to the tail of this list.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Template parameter specifying the type of the list element (can be a reference).</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The element to be added to this list.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>A pointer to another <ph id="ph1">`CList`</ph> list.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The elements in <ph id="ph1">`pNewList`</ph> will be added to this list.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The first version returns the <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value of the newly inserted element.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The list can be empty before the operation.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#37</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>CList::CList</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Constructs an empty ordered list.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The memory-allocation granularity for extending the list.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>As the list grows, memory is allocated in units of <ph id="ph1">`nBlockSize`</ph> entries.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#38</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>CList::Find</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Searches the list sequentially to find the first element matching the specified <ph id="ph1">`searchValue`</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Template parameter specifying the type of the list element (can be a reference).</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The value to be found in the list.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The start position for the search.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>If no value is specified, the search begins with the head element.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value that can be used for iteration or object pointer retrieval; <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> if the object is not found.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#39</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>CList::FindIndex</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Uses the value of <ph id="ph1">`nIndex`</ph> as an index into the list.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The zero-based index of the list element to be found.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value that can be used for iteration or object pointer retrieval; <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> if <ph id="ph1">`nIndex`</ph> is negative or too large.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>It starts a sequential scan from the head of the list, stopping on the <bpt id="p1">*</bpt>n<ept id="p1">*</ept>th element.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#40</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>CList::GetAt</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Gets the list element at a given position.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>TYPE</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Template parameter specifying the type of object in the list.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>position</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The position in the list of the element to get.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>See the return value description for <ph id="ph1">`GetHead`</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>returns the element (or a reference to the element) associated with a given position.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>It is not the same as an index, and you cannot operate on a <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value yourself.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>A variable of type <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> is a key for the list.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>You must ensure that your <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value represents a valid position in the list.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CList::GetHeadPosition<ept id="p1">](#clist__getheadposition)</ept>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>CList::GetCount</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Gets the number of elements in this list.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>An integer value containing the element count.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Calling this method will generate the same result as the <bpt id="p1">[</bpt>CList::GetSize<ept id="p1">](#clist__getsize)</ept> method.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CList::RemoveHead<ept id="p1">](#clist__removehead)</ept>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>CList::GetHead</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Gets the head element (or a reference to the head element) of this list.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>TYPE</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Template parameter specifying the type of object in the list.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>If the list is <bpt id="p1">**</bpt>const<ept id="p1">**</ept>, <ph id="ph1">`GetHead`</ph> returns a copy of the element at the head of the list.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>This allows the function to be used only on the right side of an assignment statement and protects the list from modification.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>If the list is not <bpt id="p1">**</bpt>const<ept id="p1">**</ept>, <ph id="ph1">`GetHead`</ph> returns a reference to the element at the head of the list.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>This allows the function to be used on either side of an assignment statement and thus allows the list entries to be modified.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>You must ensure that the list is not empty before calling <ph id="ph1">`GetHead`</ph>.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>If the list is empty, then the Debug version of the Microsoft Foundation Class Library asserts.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>IsEmpty<ept id="p1">](#clist__isempty)</ept> to verify that the list contains elements.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#41</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>CList::GetHeadPosition</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Gets the position of the head element of this list.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value that can be used for iteration or object pointer retrieval; <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> if the list is empty.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#42</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>CList::GetNext</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Gets the list element identified by <ph id="ph1">`rPosition`</ph>, then sets <ph id="ph2">`rPosition`</ph> to the <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value of the next entry in the list.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>TYPE</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Template parameter specifying the type of the elements in the list.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value returned by a previous <ph id="ph1">`GetNext`</ph>, <bpt id="p2">[</bpt>GetHeadPosition<ept id="p2">](#clist__getheadposition)</ept>, or other member function call.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>If the list is <bpt id="p1">**</bpt>const<ept id="p1">**</ept>, <ph id="ph1">`GetNext`</ph> returns a copy of an element of the list.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>This allows the function to be used only on the right side of an assignment statement and protects the list from modification.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>If the list is not <bpt id="p1">**</bpt>const<ept id="p1">**</ept>, <ph id="ph1">`GetNext`</ph> returns a reference to an element of the list.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>This allows the function to be used on either side of an assignment statement and thus allows the list entries to be modified.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`GetNext`</ph> in a forward iteration loop if you establish the initial position with a call to <ph id="ph2">`GetHeadPosition`</ph> or <bpt id="p1">**</bpt>Find<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>You must ensure that your <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value represents a valid position in the list.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>If the retrieved element is the last in the list, then the new value of <ph id="ph1">`rPosition`</ph> is set to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#43</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>CList::GetPrev</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Gets the list element identified by <ph id="ph1">`rPosition`</ph>, then sets <ph id="ph2">`rPosition`</ph> to the <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value of the previous entry in the list.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>TYPE</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Template parameter specifying the type of the elements in the list.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value returned by a previous <ph id="ph1">`GetPrev`</ph> or other member function call.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>If the list is <bpt id="p1">**</bpt>const<ept id="p1">**</ept>, <ph id="ph1">`GetPrev`</ph> returns a copy of the element at the head of the list.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>This allows the function to be used only on the right side of an assignment statement and protects the list from modification.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>If the list is not <bpt id="p1">**</bpt>const<ept id="p1">**</ept>, <ph id="ph1">`GetPrev`</ph> returns a reference to an element of the list.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>This allows the function to be used on either side of an assignment statement and thus allows the list entries to be modified.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`GetPrev`</ph> in a reverse iteration loop if you establish the initial position with a call to <ph id="ph2">`GetTailPosition`</ph> or <bpt id="p1">**</bpt>Find<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>You must ensure that your <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value represents a valid position in the list.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>If the retrieved element is the first in the list, then the new value of <ph id="ph1">`rPosition`</ph> is set to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#44</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>CList::GetSize</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Returns the number of list elements.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The number of items in the list.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Call this method to retrieve the number of elements in the list.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Calling this method will generate the same result as the <bpt id="p1">[</bpt>CList::GetCount<ept id="p1">](#clist__getcount)</ept> method.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#45</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>CList::GetTail</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">`CObject`</ph> pointer that represents the tail element of this list.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>TYPE</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Template parameter specifying the type of elements in the list.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>See the return value description for <bpt id="p1">[</bpt>GetHead<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__gethead)</ept>.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>You must ensure that the list is not empty before calling <ph id="ph1">`GetTail`</ph>.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>If the list is empty, then the Debug version of the Microsoft Foundation Class Library asserts.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>IsEmpty<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__isempty)</ept> to verify that the list contains elements.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#46</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>CList::GetTailPosition</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Gets the position of the tail element of this list; <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if the list is empty.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value that can be used for iteration or object pointer retrieval; <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> if the list is empty.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#47</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>CList::InsertAfter</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Adds an element to this list after the element at the specified position.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>position</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value returned by a previous <ph id="ph1">`GetNext`</ph>, <ph id="ph2">`GetPrev`</ph>, or <bpt id="p2">**</bpt>Find<ept id="p2">**</ept> member function call.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Template parameter specifying the type of the list element.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The element to be added to this list.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value that can be used for iteration or list element retrieval.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#48</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>CList::InsertBefore</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Adds an element to this list before the element at the specified position.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>position</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value returned by a previous <ph id="ph1">`GetNext`</ph>, <ph id="ph2">`GetPrev`</ph>, or <bpt id="p2">**</bpt>Find<ept id="p2">**</ept> member function call.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Template parameter specifying the type of the list element (can be a reference).</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>The element to be added to this list.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value that can be used for iteration or list element retrieval.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>position<ept id="p1">*</ept> is <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept>, the element is inserted at the head of the list.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#49</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>CList::IsEmpty</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Indicates whether this list contains no elements.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Nonzero if this list is empty; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#50</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>CList::RemoveAll</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Removes all the elements from this list and frees the associated memory.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>No error is generated if the list is already empty.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#51</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>CList::RemoveAt</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Removes the specified element from this list.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>position</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>The position of the element to be removed from the list.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>You must ensure that your <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value represents a valid position in the list.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#52</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>CList::RemoveHead</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Removes the element from the head of the list and returns a pointer to it.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>TYPE</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Template parameter specifying the type of elements in the list.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>The element previously at the head of the list.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>You must ensure that the list is not empty before calling <ph id="ph1">`RemoveHead`</ph>.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>If the list is empty, then the Debug version of the Microsoft Foundation Class Library asserts.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>IsEmpty<ept id="p1">](#clist__isempty)</ept> to verify that the list contains elements.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#53</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>CList::RemoveTail</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Removes the element from the tail of the list and returns a pointer to it.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>TYPE</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Template parameter specifying the type of elements in the list.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>The element that was at the tail of the list.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>You must ensure that the list is not empty before calling <ph id="ph1">`RemoveTail`</ph>.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>If the list is empty, then the Debug version of the Microsoft Foundation Class Library asserts.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>IsEmpty<ept id="p1">](#clist__isempty)</ept> to verify that the list contains elements.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#54</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>CList::SetAt</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>A variable of type <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> is a key for the list.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> of the element to be set.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Template parameter specifying the type of the list element (can be a reference).</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>The element to be added to the list.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>It is not the same as an index, and you cannot operate on a <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value yourself.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>writes the element to the specified position in the list.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>You must ensure that your <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value represents a valid position in the list.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#55</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>MFC Sample COLLECT</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>CObject Class</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>CMap Class</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>CArray Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>