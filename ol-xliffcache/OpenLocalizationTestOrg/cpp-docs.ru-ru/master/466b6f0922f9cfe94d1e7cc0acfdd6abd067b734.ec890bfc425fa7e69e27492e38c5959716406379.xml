{"nodes":[{"pos":[12,57],"content":"gmtime, _gmtime32, _gmtime64 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"gmtime, _gmtime32, _gmtime64 | Microsoft Docs","pos":[0,45]}]},{"content":"gmtime, _gmtime32, _gmtime64","pos":[1137,1165]},{"content":"Converts a time value to a structure.","pos":[1166,1203]},{"content":"More secure versions of these functions are available; see <bpt id=\"p1\">[</bpt>gmtime_s, _gmtime32_s, _gmtime64_s<ept id=\"p1\">](../../c-runtime-library/reference/gmtime-s-gmtime32-s-gmtime64-s.md)</ept>.","pos":[1204,1369],"source":" More secure versions of these functions are available; see [gmtime_s, _gmtime32_s, _gmtime64_s](../../c-runtime-library/reference/gmtime-s-gmtime32-s-gmtime64-s.md)."},{"content":"Syntax","pos":[1378,1384]},{"content":"Parameters","pos":[1583,1593]},{"content":"Pointer to the stored time.","pos":[1608,1635]},{"content":"The time is represented as seconds elapsed since midnight (00:00:00), January 1, 1970, coordinated universal time (UTC).","pos":[1636,1756]},{"content":"Return Value","pos":[1765,1777]},{"content":"A pointer to a structure of type <bpt id=\"p1\">[</bpt>tm<ept id=\"p1\">](../../c-runtime-library/standard-types.md)</ept>.","pos":[1781,1862],"source":"A pointer to a structure of type [tm](../../c-runtime-library/standard-types.md)."},{"content":"The fields of the returned structure hold the evaluated value of the <ph id=\"ph1\">`timer`</ph> argument in UTC rather than in local time.","pos":[1863,1982],"source":" The fields of the returned structure hold the evaluated value of the `timer` argument in UTC rather than in local time."},{"content":"Each of the structure fields is of type <ph id=\"ph1\">`int`</ph>, as follows:","pos":[1983,2041],"source":" Each of the structure fields is of type `int`, as follows:"},{"content":"Seconds after minute (0 – 59).","pos":[2060,2090]},{"content":"Minutes after hour (0 – 59).","pos":[2109,2137]},{"content":"Hours since midnight (0 – 23).","pos":[2157,2187]},{"content":"Day of month (1 – 31).","pos":[2207,2229]},{"content":"Month (0 – 11; January = 0).","pos":[2248,2276]},{"content":"Year (current year minus 1900).","pos":[2296,2327]},{"content":"Day of week (0 – 6; Sunday = 0).","pos":[2347,2379]},{"content":"Day of year (0 – 365; January 1 = 0).","pos":[2399,2436]},{"content":"Always 0 for <ph id=\"ph1\">`gmtime`</ph>.","pos":[2457,2479],"source":" Always 0 for `gmtime`."},{"content":"Both the 32-bit and 64-bit versions of <ph id=\"ph1\">`gmtime`</ph>, <ph id=\"ph2\">`mktime`</ph>, <ph id=\"ph3\">`mkgmtime`</ph>, and <ph id=\"ph4\">`localtime`</ph> all use one common <ph id=\"ph5\">`tm`</ph> structure per thread for the conversion.","pos":[2486,2637],"source":"Both the 32-bit and 64-bit versions of `gmtime`, `mktime`, `mkgmtime`, and `localtime` all use one common `tm` structure per thread for the conversion."},{"content":"Each call to one of these functions destroys the result of any previous call.","pos":[2638,2715]},{"content":"If <ph id=\"ph1\">`timer`</ph> represents a date before midnight, January 1, 1970, <ph id=\"ph2\">`gmtime`</ph> returns <ph id=\"ph3\">`NULL`</ph>.","pos":[2716,2803],"source":" If `timer` represents a date before midnight, January 1, 1970, `gmtime` returns `NULL`."},{"content":"There is no error return.","pos":[2804,2829]},{"content":", which uses the <ph id=\"ph1\">`__time64_t`</ph> structure, enables dates to be expressed up through 23:59:59, December 31, 3000, UTC, whereas <ph id=\"ph2\">`_gmtime32`</ph> only represent dates through 23:59:59 January 18, 2038, UTC.","pos":[2847,3043],"source":", which uses the `__time64_t` structure, enables dates to be expressed up through 23:59:59, December 31, 3000, UTC, whereas `_gmtime32` only represent dates through 23:59:59 January 18, 2038, UTC."},{"content":"Midnight, January 1, 1970, is the lower bound of the date range for both functions.","pos":[3044,3127]},{"content":"is an inline function that evaluates to <ph id=\"ph1\">`_gmtime64`</ph>, and <ph id=\"ph2\">`time_t`</ph> is equivalent to <ph id=\"ph3\">`__time64_t`</ph> unless <ph id=\"ph4\">`_USE_32BIT_TIME_T`</ph> is defined.","pos":[3143,3277],"source":" is an inline function that evaluates to `_gmtime64`, and `time_t` is equivalent to `__time64_t` unless `_USE_32BIT_TIME_T` is defined."},{"content":"If you must force the compiler to interpret <ph id=\"ph1\">`time_t`</ph> as the old 32-bit <ph id=\"ph2\">`time_t`</ph>, you can define <ph id=\"ph3\">`_USE_32BIT_TIME_T`</ph>, but doing so causes <ph id=\"ph4\">`gmtime`</ph> to be in-lined to <ph id=\"ph5\">`_gmtime32`</ph> and <ph id=\"ph6\">`time_t`</ph> to be defined as <ph id=\"ph7\">`__time32_t`</ph>.","pos":[3278,3497],"source":" If you must force the compiler to interpret `time_t` as the old 32-bit `time_t`, you can define `_USE_32BIT_TIME_T`, but doing so causes `gmtime` to be in-lined to `_gmtime32` and `time_t` to be defined as `__time32_t`."},{"content":"We recommend that you do not do this, because it is not allowed on 64-bit platforms and in any case your application may fail after January 18, 2038.","pos":[3498,3647]},{"content":"These functions validate their parameters.","pos":[3654,3696]},{"content":"If <ph id=\"ph1\">`timer`</ph> is a null pointer, or if the timer value is negative, these functions invoke an invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[3697,3903],"source":" If `timer` is a null pointer, or if the timer value is negative, these functions invoke an invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, the functions return <ph id=\"ph1\">`NULL`</ph> and set <ph id=\"ph2\">`errno`</ph> to <ph id=\"ph3\">`EINVAL`</ph>.","pos":[3904,3997],"source":" If execution is allowed to continue, the functions return `NULL` and set `errno` to `EINVAL`."},{"content":"Remarks","pos":[4006,4013]},{"content":"The <ph id=\"ph1\">`_gmtime32`</ph> function breaks down the <ph id=\"ph2\">`timer`</ph> value and stores it in a statically allocated structure of type <ph id=\"ph3\">`tm`</ph>, defined in TIME.H.","pos":[4017,4154],"source":"The `_gmtime32` function breaks down the `timer` value and stores it in a statically allocated structure of type `tm`, defined in TIME.H."},{"content":"The value of <ph id=\"ph1\">`timer`</ph> is typically obtained from a call to the <ph id=\"ph2\">`time`</ph> function.","pos":[4155,4233],"source":" The value of `timer` is typically obtained from a call to the `time` function."},{"pos":[4241,4485],"content":"[!NOTE]\n In most cases, the target environment tries to determine whether daylight savings time is in effect. The C run-time library assumes that the United States rules for implementing the calculation of Daylight Saving Time (DST) are used.","leadings":["","> "],"nodes":[{"content":" In most cases, the target environment tries to determine whether daylight savings time is in effect. The C run-time library assumes that the United States rules for implementing the calculation of Daylight Saving Time (DST) are used.","pos":[8,242],"nodes":[{"content":"In most cases, the target environment tries to determine whether daylight savings time is in effect.","pos":[1,101]},{"content":"The C run-time library assumes that the United States rules for implementing the calculation of Daylight Saving Time (DST) are used.","pos":[102,234]}]}]},{"content":"Requirements","pos":[4494,4506]},{"content":"Routine","pos":[4513,4520]},{"content":"Required header","pos":[4521,4536]},{"content":"time.h&gt;","pos":[4592,4599],"source":"time.h>"},{"content":"time.h&gt;","pos":[4618,4625],"source":"time.h>"},{"content":"time.h&gt;","pos":[4644,4651],"source":"time.h>"},{"pos":[4659,4763],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"Example","pos":[4772,4779]},{"content":".NET Framework Equivalent","pos":[5575,5600]},{"content":"System::DateTime::UtcNow","pos":[5611,5635]},{"content":"System::DateTime::ToUniversalTime","pos":[5717,5750]},{"content":"See Also","pos":[5839,5847]},{"content":"Time Management","pos":[5852,5867]},{"content":"asctime, _wasctime","pos":[5918,5936]},{"content":"ctime, _ctime32, _ctime64, _wctime, _wctime32, _wctime64","pos":[5998,6054]},{"content":"_ftime, _ftime32, _ftime64","pos":[6146,6172]},{"content":"gmtime_s, _gmtime32_s, _gmtime64_s","pos":[6239,6273]},{"content":"localtime, _localtime32, _localtime64","pos":[6349,6386]},{"content":"_mkgmtime, _mkgmtime32, _mkgmtime64","pos":[6465,6500]},{"content":"mktime, _mktime32, _mktime64","pos":[6576,6604]},{"content":"time, _time32, _time64","pos":[6674,6696]}],"content":"---\ntitle: \"gmtime, _gmtime32, _gmtime64 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_gmtime32\"\n  - \"gmtime\"\n  - \"_gmtime64\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-time-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"gmtime\"\n  - \"_gmtime32\"\n  - \"_gmtime64\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"gmtime32 function\"\n  - \"_gmtime64 function\"\n  - \"gmtime function\"\n  - \"time functions\"\n  - \"_gmtime32 function\"\n  - \"gmtime64 function\"\n  - \"time structure conversion\"\nms.assetid: 315501f3-477e-475d-a414-ef100ee0db27\ncaps.latest.revision: 30\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# gmtime, _gmtime32, _gmtime64\nConverts a time value to a structure. More secure versions of these functions are available; see [gmtime_s, _gmtime32_s, _gmtime64_s](../../c-runtime-library/reference/gmtime-s-gmtime32-s-gmtime64-s.md).  \n  \n## Syntax  \n  \n```  \nstruct tm *gmtime(   \n   const time_t *timer   \n);  \nstruct tm *_gmtime32(   \n   const __time32_t *timer   \n);  \nstruct tm *_gmtime64(   \n   const __time64_t *timer   \n);  \n```  \n  \n#### Parameters  \n `timer`  \n Pointer to the stored time. The time is represented as seconds elapsed since midnight (00:00:00), January 1, 1970, coordinated universal time (UTC).  \n  \n## Return Value  \n A pointer to a structure of type [tm](../../c-runtime-library/standard-types.md). The fields of the returned structure hold the evaluated value of the `timer` argument in UTC rather than in local time. Each of the structure fields is of type `int`, as follows:  \n  \n `tm_sec`  \n Seconds after minute (0 – 59).  \n  \n `tm_min`  \n Minutes after hour (0 – 59).  \n  \n `tm_hour`  \n Hours since midnight (0 – 23).  \n  \n `tm_mday`  \n Day of month (1 – 31).  \n  \n `tm_mon`  \n Month (0 – 11; January = 0).  \n  \n `tm_year`  \n Year (current year minus 1900).  \n  \n `tm_wday`  \n Day of week (0 – 6; Sunday = 0).  \n  \n `tm_yday`  \n Day of year (0 – 365; January 1 = 0).  \n  \n `tm_isdst`  \n Always 0 for `gmtime`.  \n  \n Both the 32-bit and 64-bit versions of `gmtime`, `mktime`, `mkgmtime`, and `localtime` all use one common `tm` structure per thread for the conversion. Each call to one of these functions destroys the result of any previous call. If `timer` represents a date before midnight, January 1, 1970, `gmtime` returns `NULL`. There is no error return.  \n  \n `_gmtime64`, which uses the `__time64_t` structure, enables dates to be expressed up through 23:59:59, December 31, 3000, UTC, whereas `_gmtime32` only represent dates through 23:59:59 January 18, 2038, UTC. Midnight, January 1, 1970, is the lower bound of the date range for both functions.  \n  \n `gmtime` is an inline function that evaluates to `_gmtime64`, and `time_t` is equivalent to `__time64_t` unless `_USE_32BIT_TIME_T` is defined. If you must force the compiler to interpret `time_t` as the old 32-bit `time_t`, you can define `_USE_32BIT_TIME_T`, but doing so causes `gmtime` to be in-lined to `_gmtime32` and `time_t` to be defined as `__time32_t`. We recommend that you do not do this, because it is not allowed on 64-bit platforms and in any case your application may fail after January 18, 2038.  \n  \n These functions validate their parameters. If `timer` is a null pointer, or if the timer value is negative, these functions invoke an invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, the functions return `NULL` and set `errno` to `EINVAL`.  \n  \n## Remarks  \n The `_gmtime32` function breaks down the `timer` value and stores it in a statically allocated structure of type `tm`, defined in TIME.H. The value of `timer` is typically obtained from a call to the `time` function.  \n  \n> [!NOTE]\n>  In most cases, the target environment tries to determine whether daylight savings time is in effect. The C run-time library assumes that the United States rules for implementing the calculation of Daylight Saving Time (DST) are used.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`gmtime`|\\<time.h>|  \n|`_gmtime32`|\\<time.h>|  \n|`_gmtime64`|\\<time.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n  \n      // crt_gmtime.c  \n// compile with: /W3  \n// This program uses _gmtime64 to convert a long-  \n// integer representation of coordinated universal time  \n// to a structure named newtime, then uses asctime to  \n// convert this structure to an output string.  \n  \n#include <time.h>  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   struct tm *newtime;  \n   __int64 ltime;  \n   char buff[80];  \n  \n   _time64( &ltime );  \n  \n   // Obtain coordinated universal time:  \n   newtime = _gmtime64( &ltime ); // C4996  \n   // Note: _gmtime64 is deprecated; consider using _gmtime64_s  \n   asctime_s( buff, sizeof(buff), newtime );  \n   printf( \"Coordinated universal time is %s\\n\", buff );  \n}  \n```  \n  \n```Output  \nCoordinated universal time is Tue Feb 12 23:11:31 2002  \n```  \n  \n## .NET Framework Equivalent  \n  \n-   [System::DateTime::UtcNow](https://msdn.microsoft.com/en-us/library/system.datetime.utcnow.aspx)  \n  \n-   [System::DateTime::ToUniversalTime](https://msdn.microsoft.com/en-us/library/system.datetime.touniversaltime.aspx)  \n  \n## See Also  \n [Time Management](../../c-runtime-library/time-management.md)   \n [asctime, _wasctime](../../c-runtime-library/reference/asctime-wasctime.md)   \n [ctime, _ctime32, _ctime64, _wctime, _wctime32, _wctime64](../../c-runtime-library/reference/ctime-ctime32-ctime64-wctime-wctime32-wctime64.md)   \n [_ftime, _ftime32, _ftime64](../../c-runtime-library/reference/ftime-ftime32-ftime64.md)   \n [gmtime_s, _gmtime32_s, _gmtime64_s](../../c-runtime-library/reference/gmtime-s-gmtime32-s-gmtime64-s.md)   \n [localtime, _localtime32, _localtime64](../../c-runtime-library/reference/localtime-localtime32-localtime64.md)   \n [_mkgmtime, _mkgmtime32, _mkgmtime64](../../c-runtime-library/reference/mkgmtime-mkgmtime32-mkgmtime64.md)   \n [mktime, _mktime32, _mktime64](../../c-runtime-library/reference/mktime-mktime32-mktime64.md)   \n [time, _time32, _time64](../../c-runtime-library/reference/time-time32-time64.md)"}