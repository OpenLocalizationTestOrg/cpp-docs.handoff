{"nodes":[{"pos":[12,43],"content":"_CrtSetDbgFlag | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_CrtSetDbgFlag | Microsoft Docs","pos":[0,31]}]},{"content":"_CrtSetDbgFlag","pos":[1894,1908]},{"pos":[1909,2051],"content":"Retrieves or modifies the state of the <bpt id=\"p1\">**</bpt>_crtDbgFlag<ept id=\"p1\">**</ept> flag to control the allocation behavior of the debug heap manager (debug version only).","source":"Retrieves or modifies the state of the **_crtDbgFlag** flag to control the allocation behavior of the debug heap manager (debug version only)."},{"content":"Syntax","pos":[2060,2066]},{"content":"Parameters","pos":[2147,2157]},{"content":"New state for <bpt id=\"p1\">**</bpt>_crtDbgFlag<ept id=\"p1\">**</ept>.","pos":[2174,2204],"source":" New state for **_crtDbgFlag**."},{"content":"Return Value","pos":[2213,2225]},{"pos":[2229,2275],"content":"Returns the previous state of <bpt id=\"p1\">**</bpt>_crtDbgFlag<ept id=\"p1\">**</ept>.","source":"Returns the previous state of **_crtDbgFlag**."},{"content":"Remarks","pos":[2284,2291]},{"content":"The <ph id=\"ph1\">`_CrtSetDbgFlag`</ph> function allows the application to control how the debug heap manager tracks memory allocations by modifying the bit fields of the <bpt id=\"p1\">**</bpt>_crtDbgFlag<ept id=\"p1\">**</ept> flag.","pos":[2295,2468],"source":"The `_CrtSetDbgFlag` function allows the application to control how the debug heap manager tracks memory allocations by modifying the bit fields of the **_crtDbgFlag** flag."},{"content":"By setting the bits (turning on), the application can instruct the debug heap manager to perform special debugging operations, including checking for memory leaks when the application exits and reporting if any are found, simulating low-memory conditions by specifying that freed memory blocks should remain in the heap's linked list, and verifying the integrity of the heap by inspecting each memory block at every allocation request.","pos":[2469,2904]},{"content":"When <bpt id=\"p1\">[</bpt>_DEBUG<ept id=\"p1\">](../../c-runtime-library/debug.md)</ept> is not defined, calls to <ph id=\"ph1\">`_CrtSetDbgFlag`</ph> are removed during preprocessing.","pos":[2905,3028],"source":" When [_DEBUG](../../c-runtime-library/debug.md) is not defined, calls to `_CrtSetDbgFlag` are removed during preprocessing."},{"content":"The following table lists the bit fields for <bpt id=\"p1\">**</bpt>_crtDbgFlag<ept id=\"p1\">**</ept> and describes their behavior.","pos":[3035,3125],"source":"The following table lists the bit fields for **_crtDbgFlag** and describes their behavior."},{"content":"Because setting the bits results in increased diagnostic output and reduced program execution speed, these bits are not set (turned off) by default.","pos":[3126,3274]},{"content":"For more information about these bit fields, see <bpt id=\"p1\">[</bpt>Heap State Reporting Functions<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","pos":[3275,3404],"source":" For more information about these bit fields, see [Heap State Reporting Functions](/visualstudio/debugger/crt-debug-heap-details)."},{"content":"Bit field","pos":[3411,3420]},{"content":"Default","pos":[3421,3428]},{"content":"Description","pos":[3429,3440]},{"content":"_CRTDBG_ALLOC_MEM_DF","pos":[3499,3519]},{"content":"ON","pos":[3522,3524]},{"content":"ON: Enable debug heap allocations and use of memory block type identifiers, such as <ph id=\"ph1\">`_CLIENT_BLOCK`</ph>.","pos":[3525,3625],"source":"ON: Enable debug heap allocations and use of memory block type identifiers, such as `_CLIENT_BLOCK`."},{"content":"OFF: Add new allocations to heap's linked list, but set block type to <bpt id=\"p1\">**</bpt>_IGNORE_BLOCK<ept id=\"p1\">**</ept>.","pos":[3626,3714],"source":" OFF: Add new allocations to heap's linked list, but set block type to **_IGNORE_BLOCK**."},{"content":"Can also be combined with any of the heap-frequency check macros.","pos":[3727,3792]},{"content":"_CRTDBG_CHECK_ALWAYS_DF","pos":[3799,3822]},{"content":"OFF","pos":[3825,3828]},{"content":"ON: Call <bpt id=\"p1\">[</bpt>_CrtCheckMemory<ept id=\"p1\">](../../c-runtime-library/reference/crtcheckmemory.md)</ept> at every allocation and deallocation request.","pos":[3829,3954],"source":"ON: Call [_CrtCheckMemory](../../c-runtime-library/reference/crtcheckmemory.md) at every allocation and deallocation request."},{"content":"OFF: <ph id=\"ph1\">`_CrtCheckMemory`</ph> must be called explicitly.","pos":[3955,4004],"source":" OFF: `_CrtCheckMemory` must be called explicitly."},{"content":"Heap-frequency check macros have no effect when this flag is set.","pos":[4017,4082]},{"content":"OFF","pos":[4110,4113]},{"content":"ON: Include <ph id=\"ph1\">`_CRT_BLOCK`</ph> types in leak detection and memory state difference operations.","pos":[4114,4202],"source":"ON: Include `_CRT_BLOCK` types in leak detection and memory state difference operations."},{"content":"OFF: Memory used internally by the run-time library is ignored by these operations.","pos":[4203,4286]},{"content":"Can also be combined with any of the heap-frequency check macros.","pos":[4299,4364]},{"content":"_CRTDBG_DELAY_FREE_MEM_DF","pos":[4371,4396]},{"content":"OFF","pos":[4399,4402]},{"content":"ON: Keep freed memory blocks in the heap's linked list, assign them the <bpt id=\"p1\">**</bpt>_FREE_BLOCK<ept id=\"p1\">**</ept> type, and fill them with the byte value 0xDD.","pos":[4403,4536],"source":"ON: Keep freed memory blocks in the heap's linked list, assign them the **_FREE_BLOCK** type, and fill them with the byte value 0xDD."},{"content":"OFF: Do not keep freed blocks in the heap's linked list.","pos":[4537,4593]},{"content":"Can also be combined with any of the heap-frequency check macros.","pos":[4606,4671]},{"content":"OFF","pos":[4700,4703]},{"content":"ON: Perform automatic leak checking at program exit through a call to <bpt id=\"p1\">[</bpt>_CrtDumpMemoryLeaks<ept id=\"p1\">](../../c-runtime-library/reference/crtdumpmemoryleaks.md)</ept> and generate an error report if the application failed to free all the memory it allocated.","pos":[4704,4944],"source":"ON: Perform automatic leak checking at program exit through a call to [_CrtDumpMemoryLeaks](../../c-runtime-library/reference/crtdumpmemoryleaks.md) and generate an error report if the application failed to free all the memory it allocated."},{"content":"OFF: Do not automatically perform leak checking at program exit.","pos":[4945,5009]},{"content":"Can also be combined with any of the heap-frequency check macros.","pos":[5022,5087]},{"content":"Heap-Check Frequency Macros","pos":[5097,5124]},{"pos":[5133,5316],"content":"You can specify how often the C run-time library performs validation of the debug heap (<ph id=\"ph1\">`_CrtCheckMemory`</ph>) based on the number of calls to <ph id=\"ph2\">`malloc`</ph>, <ph id=\"ph3\">`realloc`</ph>, <bpt id=\"p1\">**</bpt>free<ept id=\"p1\">**</ept>, and <ph id=\"ph4\">`_msize`</ph>.","source":"You can specify how often the C run-time library performs validation of the debug heap (`_CrtCheckMemory`) based on the number of calls to `malloc`, `realloc`, **free**, and `_msize`."},{"content":"then inspects the upper 16 bits of the <ph id=\"ph1\">`newFlag`</ph> parameter for a value.","pos":[5340,5411],"source":" then inspects the upper 16 bits of the `newFlag` parameter for a value."},{"content":"The value specified is the number of <ph id=\"ph1\">`malloc`</ph>, <ph id=\"ph2\">`realloc`</ph>, <bpt id=\"p1\">**</bpt>free<ept id=\"p1\">**</ept>, and <ph id=\"ph3\">`_msize`</ph> calls between <ph id=\"ph4\">`_CrtCheckMemory`</ph> calls.","pos":[5412,5531],"source":" The value specified is the number of `malloc`, `realloc`, **free**, and `_msize` calls between `_CrtCheckMemory` calls."},{"content":"Four predefined macros are provided for this purpose.","pos":[5532,5585]},{"content":"Macro","pos":[5592,5597]},{"content":"Number of malloc, realloc, free, and _msize calls between calls to _CrtCheckMemory","pos":[5598,5680]},{"content":"_CRTDBG_CHECK_EVERY_16_DF","pos":[5792,5817]},{"content":"16","pos":[5818,5820]},{"content":"_CRTDBG_CHECK_EVERY_128_DF","pos":[5825,5851]},{"content":"128","pos":[5852,5855]},{"content":"_CRTDBG_CHECK_EVERY_1024_DF","pos":[5860,5887]},{"content":"1024","pos":[5888,5892]},{"content":"_CRTDBG_CHECK_DEFAULT_DF","pos":[5897,5921]},{"content":"0 (by default, no heap checks)","pos":[5922,5952]},{"pos":[5960,6076],"content":"By default, <ph id=\"ph1\">`_CrtCheckMemory`</ph> is called once every 1,024 times you call <ph id=\"ph2\">`malloc`</ph>, <ph id=\"ph3\">`realloc`</ph>, <bpt id=\"p1\">**</bpt>free<ept id=\"p1\">**</ept>, and <ph id=\"ph4\">`_msize`</ph>.","source":"By default, `_CrtCheckMemory` is called once every 1,024 times you call `malloc`, `realloc`, **free**, and `_msize`."},{"pos":[6083,6215],"content":"For example, you could specify a heap check every 16 <ph id=\"ph1\">`malloc`</ph>, <ph id=\"ph2\">`realloc`</ph>, <bpt id=\"p1\">**</bpt>free<ept id=\"p1\">**</ept>, and <ph id=\"ph3\">`_msize`</ph> operations with the following code:","source":"For example, you could specify a heap check every 16 `malloc`, `realloc`, **free**, and `_msize` operations with the following code:"},{"content":"The upper 16 bits of the <ph id=\"ph1\">`newFlag`</ph> parameter are ignored when _CRTDBG_CHECK_ALWAYS_DF is specified.","pos":[6533,6632],"source":"The upper 16 bits of the `newFlag` parameter are ignored when _CRTDBG_CHECK_ALWAYS_DF is specified."},{"content":"In this case, <ph id=\"ph1\">`_CrtCheckMemory`</ph> is called each time you call <ph id=\"ph2\">`malloc`</ph>, <ph id=\"ph3\">`realloc`</ph>, <bpt id=\"p1\">**</bpt>free<ept id=\"p1\">**</ept>, and <ph id=\"ph4\">`_msize`</ph>.","pos":[6633,6738],"source":" In this case, `_CrtCheckMemory` is called each time you call `malloc`, `realloc`, **free**, and `_msize`."},{"pos":[6755,6866],"content":"is the new state to apply to the <bpt id=\"p1\">**</bpt>_crtDbgFlag<ept id=\"p1\">**</ept> and is a combination of the values for each of the bit fields.","source":" is the new state to apply to the **_crtDbgFlag** and is a combination of the values for each of the bit fields."},{"content":"To change one or more of these bit fields and create a new state for the flag","pos":[6876,6953]},{"pos":[6963,7128],"content":"Call <ph id=\"ph1\">`_CrtSetDbgFlag`</ph> with <ph id=\"ph2\">`newFlag`</ph> equal to <ph id=\"ph3\">`_CRTDBG_REPORT_FLAG`</ph> to obtain the current <bpt id=\"p1\">**</bpt>_crtDbgFlag<ept id=\"p1\">**</ept> state and store the returned value in a temporary variable.","source":"Call `_CrtSetDbgFlag` with `newFlag` equal to `_CRTDBG_REPORT_FLAG` to obtain the current **_crtDbgFlag** state and store the returned value in a temporary variable."},{"pos":[7138,7282],"content":"Turn on any bits by <ph id=\"ph1\">`OR`</ph>-ing the temporary variable with the corresponding bitmasks (represented in the application code by manifest constants).","source":"Turn on any bits by `OR`-ing the temporary variable with the corresponding bitmasks (represented in the application code by manifest constants)."},{"pos":[7292,7395],"content":"Turn off the other bits by <bpt id=\"p1\">**</bpt>AND<ept id=\"p1\">**</ept>-ing the variable with a bitwise <bpt id=\"p2\">**</bpt>NOT<ept id=\"p2\">**</ept> of the appropriate bitmasks.","source":"Turn off the other bits by **AND**-ing the variable with a bitwise **NOT** of the appropriate bitmasks."},{"pos":[7405,7535],"content":"Call <ph id=\"ph1\">`_CrtSetDbgFlag`</ph> with <ph id=\"ph2\">`newFlag`</ph> equal to the value stored in the temporary variable to set the new state for <bpt id=\"p1\">**</bpt>_crtDbgFlag<ept id=\"p1\">**</ept>.","source":"Call `_CrtSetDbgFlag` with `newFlag` equal to the value stored in the temporary variable to set the new state for **_crtDbgFlag**."},{"pos":[7542,7745],"content":"The following code demonstrates how to simulate low-memory conditions by keeping freed memory blocks in the heap's linked list and prevent <ph id=\"ph1\">`_CrtCheckMemory`</ph> from being called at every allocation request:","source":"The following code demonstrates how to simulate low-memory conditions by keeping freed memory blocks in the heap's linked list and prevent `_CrtCheckMemory` from being called at every allocation request:"},{"pos":[8252,8385],"content":"For an overview of memory management and the debug heap, see <bpt id=\"p1\">[</bpt>CRT Debug Heap Details<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","source":"For an overview of memory management and the debug heap, see [CRT Debug Heap Details](/visualstudio/debugger/crt-debug-heap-details)."},{"pos":[8392,8518],"content":"To disable a flag with the <ph id=\"ph1\">`_CrtSetDbgFlag`</ph> function, you should <bpt id=\"p1\">**</bpt>AND<ept id=\"p1\">**</ept> the variable with the bitwise <bpt id=\"p2\">**</bpt>NOT<ept id=\"p2\">**</ept> of the bitmask.","source":"To disable a flag with the `_CrtSetDbgFlag` function, you should **AND** the variable with the bitwise **NOT** of the bitmask."},{"content":"If <ph id=\"ph1\">`newFlag`</ph> is not a valid value, this function invokes the invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[8525,8701],"source":"If `newFlag` is not a valid value, this function invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, this function sets <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and returns the previous state of <ph id=\"ph3\">`_crtDbgFlag`</ph>.","pos":[8702,8826],"source":" If execution is allowed to continue, this function sets `errno` to `EINVAL` and returns the previous state of `_crtDbgFlag`."},{"content":"Requirements","pos":[8835,8847]},{"content":"Routine","pos":[8854,8861]},{"content":"Required header","pos":[8862,8877]},{"content":"crtdbg.h&gt;","pos":[8941,8950],"source":"crtdbg.h>"},{"pos":[8958,9076],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Libraries","pos":[9085,9094]},{"pos":[9098,9193],"content":"Debug versions of <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept> only.","source":"Debug versions of [C run-time libraries](../../c-runtime-library/crt-library-features.md) only."},{"content":"Example","pos":[9202,9209]},{"content":".NET Framework Equivalent","pos":[11765,11790]},{"content":"Not applicable.","pos":[11794,11809]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[11810,11857],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[11858,11983],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[11992,12000]},{"content":"Debug Routines","pos":[12005,12019]},{"content":"_crtDbgFlag","pos":[12069,12080]},{"content":"_CrtCheckMemory","pos":[12126,12141]}],"content":"---\ntitle: \"_CrtSetDbgFlag | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_CrtSetDbgFlag\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_CRTDBG_REPORT_FLAG\"\n  - \"_CRTDBG_CHECK_EVERY_16_DF\"\n  - \"_CRTDBG_CHECK_DEFAULT_DF\"\n  - \"CRTDBG_CHECK_DEFAULT_DF\"\n  - \"CRTDBG_CHECK_EVERY_128_DF\"\n  - \"CRTDBG_CHECK_EVERY_1024_DF\"\n  - \"_CRTDBG_CHECK_EVERY_128_DF\"\n  - \"CrtSetDbgFlag\"\n  - \"CRTDBG_CHECK_EVERY_16_DF\"\n  - \"_CRTDBG_CHECK_EVERY_1024_DF\"\n  - \"_CrtSetDbgFlag\"\n  - \"CRTDBG_REPORT_FLAG\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_CRTDBG_CHECK_EVERY_16_DF macro\"\n  - \"CRTDBG_CHECK_EVERY_16_DF macro\"\n  - \"_CRTDBG_CHECK_ALWAYS_DF macro\"\n  - \"_CRTDBG_CHECK_DEFAULT_DF macro\"\n  - \"CRTDBG_ALLOC_MEM_DF macro\"\n  - \"CRTDBG_CHECK_ALWAYS_DF macro\"\n  - \"_CRTDBG_ALLOC_MEM_DF macro\"\n  - \"_CRTDBG_REPORT_FLAG macro\"\n  - \"_CRTDBG_CHECK_EVERY_128_DF macro\"\n  - \"CRTDBG_REPORT_FLAG macro\"\n  - \"_CRTDBG_CHECK_EVERY_1024_DF macro\"\n  - \"CRTDBG_CHECK_DEFAULT_DF macro\"\n  - \"CRTDBG_CHECK_EVERY_1024_DF macro\"\n  - \"_CrtSetDbgFlag function\"\n  - \"CrtSetDbgFlag function\"\n  - \"_CRTDBG_DELAY_FREE_MEM_DF macro\"\n  - \"CRTDBG_CHECK_EVERY_128_DF macro\"\n  - \"CRTDBG_DELAY_FREE_MEM_DF macro\"\n  - \"CRTDBG_CHECK_CRT_DF macro\"\n  - \"_CRTDBG_CHECK_CRT_DF macro\"\nms.assetid: b5657ffb-6178-4cbf-9886-1af904ede94c\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _CrtSetDbgFlag\nRetrieves or modifies the state of the **_crtDbgFlag** flag to control the allocation behavior of the debug heap manager (debug version only).  \n  \n## Syntax  \n  \n```  \n  \n      int _CrtSetDbgFlag(   \n   int newFlag   \n);  \n```  \n  \n#### Parameters  \n `newFlag`  \n New state for **_crtDbgFlag**.  \n  \n## Return Value  \n Returns the previous state of **_crtDbgFlag**.  \n  \n## Remarks  \n The `_CrtSetDbgFlag` function allows the application to control how the debug heap manager tracks memory allocations by modifying the bit fields of the **_crtDbgFlag** flag. By setting the bits (turning on), the application can instruct the debug heap manager to perform special debugging operations, including checking for memory leaks when the application exits and reporting if any are found, simulating low-memory conditions by specifying that freed memory blocks should remain in the heap's linked list, and verifying the integrity of the heap by inspecting each memory block at every allocation request. When [_DEBUG](../../c-runtime-library/debug.md) is not defined, calls to `_CrtSetDbgFlag` are removed during preprocessing.  \n  \n The following table lists the bit fields for **_crtDbgFlag** and describes their behavior. Because setting the bits results in increased diagnostic output and reduced program execution speed, these bits are not set (turned off) by default. For more information about these bit fields, see [Heap State Reporting Functions](/visualstudio/debugger/crt-debug-heap-details).  \n  \n|Bit field|Default|Description|  \n|---------------|-------------|-----------------|  \n|**_CRTDBG_ALLOC_MEM_DF**|ON|ON: Enable debug heap allocations and use of memory block type identifiers, such as `_CLIENT_BLOCK`. OFF: Add new allocations to heap's linked list, but set block type to **_IGNORE_BLOCK**.<br /><br /> Can also be combined with any of the heap-frequency check macros.|  \n|**_CRTDBG_CHECK_ALWAYS_DF**|OFF|ON: Call [_CrtCheckMemory](../../c-runtime-library/reference/crtcheckmemory.md) at every allocation and deallocation request. OFF: `_CrtCheckMemory` must be called explicitly.<br /><br /> Heap-frequency check macros have no effect when this flag is set.|  \n|`_CRTDBG_CHECK_CRT_DF`|OFF|ON: Include `_CRT_BLOCK` types in leak detection and memory state difference operations. OFF: Memory used internally by the run-time library is ignored by these operations.<br /><br /> Can also be combined with any of the heap-frequency check macros.|  \n|**_CRTDBG_DELAY_FREE_MEM_DF**|OFF|ON: Keep freed memory blocks in the heap's linked list, assign them the **_FREE_BLOCK** type, and fill them with the byte value 0xDD. OFF: Do not keep freed blocks in the heap's linked list.<br /><br /> Can also be combined with any of the heap-frequency check macros.|  \n|`_CRTDBG_LEAK_CHECK_DF`|OFF|ON: Perform automatic leak checking at program exit through a call to [_CrtDumpMemoryLeaks](../../c-runtime-library/reference/crtdumpmemoryleaks.md) and generate an error report if the application failed to free all the memory it allocated. OFF: Do not automatically perform leak checking at program exit.<br /><br /> Can also be combined with any of the heap-frequency check macros.|  \n  \n **Heap-Check Frequency Macros**  \n  \n You can specify how often the C run-time library performs validation of the debug heap (`_CrtCheckMemory`) based on the number of calls to `malloc`, `realloc`, **free**, and `_msize`.  \n  \n `_CrtSetDbgFlag` then inspects the upper 16 bits of the `newFlag` parameter for a value. The value specified is the number of `malloc`, `realloc`, **free**, and `_msize` calls between `_CrtCheckMemory` calls. Four predefined macros are provided for this purpose.  \n  \n|Macro|Number of malloc, realloc, free, and _msize calls between calls to _CrtCheckMemory|  \n|-----------|------------------------------------------------------------------------------------------|  \n|_CRTDBG_CHECK_EVERY_16_DF|16|  \n|_CRTDBG_CHECK_EVERY_128_DF|128|  \n|_CRTDBG_CHECK_EVERY_1024_DF|1024|  \n|_CRTDBG_CHECK_DEFAULT_DF|0 (by default, no heap checks)|  \n  \n By default, `_CrtCheckMemory` is called once every 1,024 times you call `malloc`, `realloc`, **free**, and `_msize`.  \n  \n For example, you could specify a heap check every 16 `malloc`, `realloc`, **free**, and `_msize` operations with the following code:  \n  \n```  \n#include <crtdbg.h>  \nint main( )  \n{  \nint tmp;  \n  \n// Get the current bits  \ntmp = _CrtSetDbgFlag(_CRTDBG_REPORT_FLAG);  \n  \n// Clear the upper 16 bits and OR in the desired freqency  \ntmp = (tmp & 0x0000FFFF) | _CRTDBG_CHECK_EVERY_16_DF;  \n  \n// Set the new bits  \n_CrtSetDbgFlag(tmp);  \n}  \n```  \n  \n The upper 16 bits of the `newFlag` parameter are ignored when _CRTDBG_CHECK_ALWAYS_DF is specified. In this case, `_CrtCheckMemory` is called each time you call `malloc`, `realloc`, **free**, and `_msize`.  \n  \n `newFlag` is the new state to apply to the **_crtDbgFlag** and is a combination of the values for each of the bit fields.  \n  \n### To change one or more of these bit fields and create a new state for the flag  \n  \n1.  Call `_CrtSetDbgFlag` with `newFlag` equal to `_CRTDBG_REPORT_FLAG` to obtain the current **_crtDbgFlag** state and store the returned value in a temporary variable.  \n  \n2.  Turn on any bits by `OR`-ing the temporary variable with the corresponding bitmasks (represented in the application code by manifest constants).  \n  \n3.  Turn off the other bits by **AND**-ing the variable with a bitwise **NOT** of the appropriate bitmasks.  \n  \n4.  Call `_CrtSetDbgFlag` with `newFlag` equal to the value stored in the temporary variable to set the new state for **_crtDbgFlag**.  \n  \n The following code demonstrates how to simulate low-memory conditions by keeping freed memory blocks in the heap's linked list and prevent `_CrtCheckMemory` from being called at every allocation request:  \n  \n```  \n// Get the current state of the flag  \n// and store it in a temporary variable  \nint tmpFlag = _CrtSetDbgFlag( _CRTDBG_REPORT_FLAG );  \n  \n// Turn On (OR) - Keep freed memory blocks in the  \n// heap's linked list and mark them as freed  \ntmpFlag |= _CRTDBG_DELAY_FREE_MEM_DF;  \n  \n// Turn Off (AND) - prevent _CrtCheckMemory from  \n// being called at every allocation request  \ntmpFlag &= ~_CRTDBG_CHECK_ALWAYS_DF;  \n  \n// Set the new state for the flag  \n_CrtSetDbgFlag( tmpFlag );  \n```  \n  \n For an overview of memory management and the debug heap, see [CRT Debug Heap Details](/visualstudio/debugger/crt-debug-heap-details).  \n  \n To disable a flag with the `_CrtSetDbgFlag` function, you should **AND** the variable with the bitwise **NOT** of the bitmask.  \n  \n If `newFlag` is not a valid value, this function invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, this function sets `errno` to `EINVAL` and returns the previous state of `_crtDbgFlag`.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_CrtSetDbgFlag`|\\<crtdbg.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Libraries  \n Debug versions of [C run-time libraries](../../c-runtime-library/crt-library-features.md) only.  \n  \n## Example  \n  \n```  \n// crt_crtsetdflag.c  \n// compile with: /c -D_DEBUG /MTd -Od -Zi -W3 /link -verbose:lib /debug  \n/*  \n * This program concentrates on allocating and freeing memory  \n * blocks to test the functionality of the _crtDbgFlag flag..  \n */  \n  \n#include <string.h>  \n#include <malloc.h>  \n#include <crtdbg.h>  \n  \nint main( )  \n{  \n        char *p1, *p2;  \n        int tmpDbgFlag;  \n  \n        _CrtSetReportMode( _CRT_ERROR, _CRTDBG_MODE_FILE );  \n        _CrtSetReportFile( _CRT_ERROR, _CRTDBG_FILE_STDERR );  \n        /*  \n         * Set the debug-heap flag to keep freed blocks in the  \n         * heap's linked list - This will allow us to catch any  \n         * inadvertent use of freed memory  \n         */  \n        tmpDbgFlag = _CrtSetDbgFlag(_CRTDBG_REPORT_FLAG);  \n        tmpDbgFlag |= _CRTDBG_DELAY_FREE_MEM_DF;  \n        tmpDbgFlag |= _CRTDBG_LEAK_CHECK_DF;  \n        _CrtSetDbgFlag(tmpDbgFlag);  \n  \n        /*  \n         * Allocate 2 memory blocks and store a string in each  \n         */  \n        p1 = malloc( 34 );  \n        p2 = malloc( 38 );  \n        strcpy_s( p1, 34, \"p1 points to a Normal allocation block\" );  \n        strcpy_s( p2, 38, \"p2 points to a Client allocation block\" );  \n  \n        /*  \n         * Free both memory blocks  \n         */  \n        free( p2 );  \n        free( p1 );  \n  \n        /*  \n         * Set the debug-heap flag to no longer keep freed blocks in the  \n         * heap's linked list and turn on Debug type allocations (CLIENT)  \n         */  \n        tmpDbgFlag = _CrtSetDbgFlag(_CRTDBG_REPORT_FLAG);  \n        tmpDbgFlag |= _CRTDBG_ALLOC_MEM_DF;  \n        tmpDbgFlag &= ~_CRTDBG_DELAY_FREE_MEM_DF;  \n        _CrtSetDbgFlag(tmpDbgFlag);  \n  \n        /*  \n         * Explicitly call _malloc_dbg to obtain the filename and   \n         * line number of our allocation request and also so we can   \n         * allocate CLIENT type blocks specifically for tracking  \n         */  \n        p1 = _malloc_dbg( 40, _NORMAL_BLOCK, __FILE__, __LINE__ );  \n        p2 = _malloc_dbg( 40, _CLIENT_BLOCK, __FILE__, __LINE__ );  \n        strcpy_s( p1, 40, \"p1 points to a Normal allocation block\" );  \n        strcpy_s( p2, 40, \"p2 points to a Client allocation block\" );  \n  \n        /*  \n         * _free_dbg must be called to free the CLIENT block  \n         */  \n        _free_dbg( p2, _CLIENT_BLOCK );  \n        free( p1 );  \n  \n        /*  \n         * Allocate p1 again and then exit - this will leave unfreed  \n         * memory on the heap  \n         */  \n        p1 = malloc( 10 );  \n}  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Debug Routines](../../c-runtime-library/debug-routines.md)   \n [_crtDbgFlag](../../c-runtime-library/crtdbgflag.md)   \n [_CrtCheckMemory](../../c-runtime-library/reference/crtcheckmemory.md)"}