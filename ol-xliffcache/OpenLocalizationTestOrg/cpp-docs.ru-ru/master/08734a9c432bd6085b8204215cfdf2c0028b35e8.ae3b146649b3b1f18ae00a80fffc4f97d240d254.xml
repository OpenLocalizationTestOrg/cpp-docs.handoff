{"nodes":[{"pos":[12,56],"content":"ATL Text Encoding Functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ATL Text Encoding Functions | Microsoft Docs","pos":[0,44]}]},{"pos":[240,267],"content":"ATL Text Encoding Functions","linkify":"ATL Text Encoding Functions","nodes":[{"content":"ATL Text Encoding Functions","pos":[0,27]}]},{"content":"These functions support text encoding and decoding.","pos":[268,319]},{"pos":[336,369],"content":"<bpt id=\"p1\">[</bpt>AtlGetHexValue<ept id=\"p1\">](#atlgethexvalue)</ept>","source":"[AtlGetHexValue](#atlgethexvalue)"},{"content":"Call this function to get the numeric value of a hexadecimal digit.","pos":[370,437]},{"pos":[443,474],"content":"<bpt id=\"p1\">[</bpt>AtlGetVersion<ept id=\"p1\">](#atlgetversion)</ept>","source":"[AtlGetVersion](#atlgetversion)"},{"content":"Call this function to get the version of the ATL library that you are using.","pos":[475,551]},{"pos":[558,587],"content":"<bpt id=\"p1\">[</bpt>AtlHexDecode<ept id=\"p1\">](#atlhexdecode)</ept>","source":"[AtlHexDecode](#atlhexdecode)"},{"pos":[588,715],"content":"Decodes a string of data that has been encoded as hexadecimal text such as by a previous call to <bpt id=\"p1\">[</bpt>AtlHexEncode<ept id=\"p1\">](#atlhexencode)</ept>.","source":"Decodes a string of data that has been encoded as hexadecimal text such as by a previous call to [AtlHexEncode](#atlhexencode)."},{"pos":[718,781],"content":"<bpt id=\"p1\">[</bpt>AtlHexDecodeGetRequiredLength<ept id=\"p1\">](#atlhexdecodegetrequiredlength)</ept>","source":"[AtlHexDecodeGetRequiredLength](#atlhexdecodegetrequiredlength)"},{"content":"Call this function to get the size in bytes of a buffer that could contain data decoded from a hex-encoded string of the specified length.","pos":[782,920]},{"pos":[923,952],"content":"<bpt id=\"p1\">[</bpt>AtlHexEncode<ept id=\"p1\">](#atlhexencode)</ept>","source":"[AtlHexEncode](#atlhexencode)"},{"content":"Call this function to encode some data as a string of hexadecimal text.","pos":[953,1024]},{"pos":[1027,1090],"content":"<bpt id=\"p1\">[</bpt>AtlHexEncodeGetRequiredLength<ept id=\"p1\">](#atlhexencodegetrequiredlength)</ept>","source":"[AtlHexEncodeGetRequiredLength](#atlhexencodegetrequiredlength)"},{"content":"Call this function to get the size in characters of a buffer that could contain a string encoded from data of the specified size.","pos":[1091,1220]},{"pos":[1223,1250],"content":"<bpt id=\"p1\">[</bpt>AtlHexValue<ept id=\"p1\">](#atlhexvalue)</ept>","source":"[AtlHexValue](#atlhexvalue)"},{"content":"Call this function to get the numeric value of a hexadecimal digit.","pos":[1251,1318]},{"pos":[1322,1359],"content":"<bpt id=\"p1\">[</bpt>AtlUnicodeToUTF8<ept id=\"p1\">](#atlunicodetoutf8)</ept>","source":"[AtlUnicodeToUTF8](#atlunicodetoutf8)"},{"content":"Call this function to convert a Unicode string to UTF-8.","pos":[1360,1416]},{"pos":[1420,1439],"content":"<bpt id=\"p1\">[</bpt>BEncode<ept id=\"p1\">](#bencode)</ept>","source":"[BEncode](#bencode)"},{"content":"Call this function to convert some data using the \"B\" encoding.","pos":[1440,1503]},{"pos":[1506,1560],"content":"<bpt id=\"p1\">[</bpt>BEncodeGetRequiredLength<ept id=\"p1\">](#beencodegetrequiredlength)</ept>","source":"[BEncodeGetRequiredLength](#beencodegetrequiredlength)"},{"content":"Call this function to get the size in characters of a buffer that could contain a string encoded from data of the specified size.","pos":[1561,1690]},{"pos":[1693,1716],"content":"<bpt id=\"p1\">[</bpt>EscapeXML<ept id=\"p1\">](#escapexml)</ept>","source":"[EscapeXML](#escapexml)"},{"content":"Call this function to convert characters that are unsafe for use in XML to their safe equivalents.","pos":[1717,1815]},{"pos":[1818,1855],"content":"<bpt id=\"p1\">[</bpt>GetExtendedChars<ept id=\"p1\">](#getextendedchars)</ept>","source":"[GetExtendedChars](#getextendedchars)"},{"content":"Call this function to get the number of extended characters in a string.","pos":[1856,1928]},{"pos":[1931,1964],"content":"<bpt id=\"p1\">[</bpt>IsExtendedChar<ept id=\"p1\">](#isextendedchar)</ept>","source":"[IsExtendedChar](#isextendedchar)"},{"content":"Call this function to find out if a given character is an extended character (less than 32, greater than 126, and not a tab, linefeed or carriage return)","pos":[1965,2118]},{"pos":[2121,2140],"content":"<bpt id=\"p1\">[</bpt>QEncode<ept id=\"p1\">](#qencode)</ept>","source":"[QEncode](#qencode)"},{"content":"Call this function to convert some data using the \"Q\" encoding.","pos":[2141,2204]},{"pos":[2209,2262],"content":"<bpt id=\"p1\">[</bpt>QEncodeGetRequiredLength<ept id=\"p1\">](#qencodegetrequiredlength)</ept>","source":"[QEncodeGetRequiredLength](#qencodegetrequiredlength)"},{"content":"Call this function to get the size in characters of a buffer that could contain a string encoded from data of the specified size.","pos":[2263,2392]},{"pos":[2395,2416],"content":"<bpt id=\"p1\">[</bpt>QPDecode<ept id=\"p1\">](#qpdecode)</ept>","source":"[QPDecode](#qpdecode)"},{"pos":[2417,2543],"content":"Decodes a string of data that has been encoded in quoted-printable format such as by a previous call to <bpt id=\"p1\">[</bpt>QPEncode<ept id=\"p1\">](#qpencode)</ept>.","source":"Decodes a string of data that has been encoded in quoted-printable format such as by a previous call to [QPEncode](#qpencode)."},{"pos":[2546,2601],"content":"<bpt id=\"p1\">[</bpt>QPDecodeGetRequiredLength<ept id=\"p1\">](#qpdecodegetrequiredlength)</ept>","source":"[QPDecodeGetRequiredLength](#qpdecodegetrequiredlength)"},{"content":"Call this function to get the size in bytes of a buffer that could contain data decoded from quoted-printable-encoded string of the specified length.","pos":[2602,2751]},{"pos":[2754,2775],"content":"<bpt id=\"p1\">[</bpt>QPEncode<ept id=\"p1\">](#qpencode)</ept>","source":"[QPEncode](#qpencode)"},{"content":"Call this function to encode some data in quoted-printable format.","pos":[2776,2842]},{"pos":[2845,2900],"content":"<bpt id=\"p1\">[</bpt>QPEncodeGetRequiredLength<ept id=\"p1\">](#qpencodegetrequiredlength)</ept>","source":"[QPEncodeGetRequiredLength](#qpencodegetrequiredlength)"},{"content":"Call this function to get the size in characters of a buffer that could contain a string encoded from data of the specified size.","pos":[2901,3030]},{"pos":[3033,3054],"content":"<bpt id=\"p1\">[</bpt>UUDecode<ept id=\"p1\">](#uudecode)</ept>","source":"[UUDecode](#uudecode)"},{"pos":[3055,3156],"content":"Decodes a string of data that has been uuencoded such as by a previous call to <bpt id=\"p1\">[</bpt>UUEncode<ept id=\"p1\">](#uuencode)</ept>.","source":"Decodes a string of data that has been uuencoded such as by a previous call to [UUEncode](#uuencode)."},{"pos":[3159,3214],"content":"<bpt id=\"p1\">[</bpt>UUDecodeGetRequiredLength<ept id=\"p1\">](#uudecodegetrequiredlength)</ept>","source":"[UUDecodeGetRequiredLength](#uudecodegetrequiredlength)"},{"content":"Call this function to get the size in bytes of a buffer that could contain data decoded from a uuencoded string of the specified length.","pos":[3215,3351]},{"pos":[3354,3375],"content":"<bpt id=\"p1\">[</bpt>UUEncode<ept id=\"p1\">](#uuencode)</ept>","source":"[UUEncode](#uuencode)"},{"content":"Call this function to uuencode some data.","pos":[3376,3417]},{"pos":[3421,3476],"content":"<bpt id=\"p1\">[</bpt>UUEncodeGetRequiredLength<ept id=\"p1\">](#uuencodegetrequiredlength)</ept>","source":"[UUEncodeGetRequiredLength](#uuencodegetrequiredlength)"},{"content":"Call this function to get the size in characters of a buffer that could contain a string encoded from data of the specified size.","pos":[3477,3606]},{"pos":[3613,3657],"content":"<bpt id=\"p1\">&lt;a name=\"atlgethexvalue\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> AtlGetHexValue","linkify":"<a name=\"atlgethexvalue\"></a> AtlGetHexValue","source":"<a name=\"atlgethexvalue\"></a> AtlGetHexValue"},{"content":"Call this function to get the numeric value of a hexadecimal digit.","pos":[3658,3725]},{"pos":[3735,3741],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[3817,3827],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The hexadecimal character '0'-'9', 'A'-'F', or 'a'-'f'.","pos":[3841,3896]},{"pos":[3906,3918],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The numeric value of the input character interpreted as a hexadecimal digit.","pos":[3922,3998]},{"content":"For example, an input of '0' returns a value of 0 and an input of 'A' returns a value of 10.","pos":[3999,4091]},{"content":"If the input character is not a hexadecimal digit, this function returns -1.","pos":[4092,4168]},{"pos":[4178,4190],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[4194,4214],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlenc.h","source":"**Header:** atlenc.h"},{"pos":[4222,4264],"content":"<bpt id=\"p1\">&lt;a name=\"atlgetversion\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> AtlGetVersion","linkify":"<a name=\"atlgetversion\"></a> AtlGetVersion","source":"<a name=\"atlgetversion\"></a> AtlGetVersion"},{"content":"Call this function to get the version of the ATL library that you are using.","pos":[4265,4341]},{"pos":[4351,4357],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[4431,4441],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reserved pointer.","pos":[4460,4479]},{"pos":[4489,4501],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4505,4605],"content":"Returns a <ph id=\"ph1\">`DWORD`</ph> integer value of the version of the ATL library that you are compiling or running.","source":"Returns a `DWORD` integer value of the version of the ATL library that you are compiling or running."},{"pos":[4614,4621],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The function should be called as follows.","pos":[4625,4666]},{"pos":[4673,4767],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#95<ept id=\"p2\">](../../atl/codesnippet/cpp/atl-text-encoding-functions_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#95](../../atl/codesnippet/cpp/atl-text-encoding-functions_1.cpp)]"},{"pos":[4777,4789],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[4793,4814],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlbase.h","source":"**Header:** atlbase.h"},{"pos":[4821,4861],"content":"<bpt id=\"p1\">&lt;a name=\"atlhexdecode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> AtlHexDecode","linkify":"<a name=\"atlhexdecode\"></a> AtlHexDecode","source":"<a name=\"atlhexdecode\"></a> AtlHexDecode"},{"pos":[4862,4989],"content":"Decodes a string of data that has been encoded as hexadecimal text such as by a previous call to <bpt id=\"p1\">[</bpt>AtlHexEncode<ept id=\"p1\">](#atlhexencode)</ept>.","source":"Decodes a string of data that has been encoded as hexadecimal text such as by a previous call to [AtlHexEncode](#atlhexencode)."},{"pos":[4999,5005],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[5150,5160],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The string containing the data to be decoded.","pos":[5178,5223]},{"content":"The length in characters of <ph id=\"ph1\">`pSrcData`</ph>.","pos":[5243,5282],"source":" The length in characters of `pSrcData`."},{"content":"Caller-allocated buffer to receive the decoded data.","pos":[5301,5353]},{"content":"Pointer to a variable that contains the length in bytes of <ph id=\"ph1\">`pbDest`</ph>.","pos":[5375,5443],"source":" Pointer to a variable that contains the length in bytes of `pbDest`."},{"content":"If the function succeeds, the variable receives the number of bytes written to the buffer.","pos":[5444,5534]},{"content":"If the function fails, the variable receives the required length in bytes of the buffer.","pos":[5535,5623]},{"pos":[5633,5645],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5649,5699],"content":"Returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> on success, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> on failure.","source":"Returns **TRUE** on success, **FALSE** on failure."},{"pos":[5709,5721],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[5725,5745],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlenc.h","source":"**Header:** atlenc.h"},{"pos":[5752,5826],"content":"<bpt id=\"p1\">&lt;a name=\"atlhexdecodegetrequiredlength\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> AtlHexDecodeGetRequiredLength","linkify":"<a name=\"atlhexdecodegetrequiredlength\"></a> AtlHexDecodeGetRequiredLength","source":"<a name=\"atlhexdecodegetrequiredlength\"></a> AtlHexDecodeGetRequiredLength"},{"content":"Call this function to get the size in bytes of a buffer that could contain data decoded from a hex-encoded string of the specified length.","pos":[5827,5965]},{"pos":[5975,5981],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[6071,6081],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of characters in the encoded string.","pos":[6098,6145]},{"pos":[6155,6167],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6171,6270],"content":"The number of bytes required for a buffer that could hold a decoded string of <ph id=\"ph1\">`nSrcLen`</ph> characters.","source":"The number of bytes required for a buffer that could hold a decoded string of `nSrcLen` characters."},{"pos":[6280,6292],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[6296,6316],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlenc.h","source":"**Header:** atlenc.h"},{"pos":[6322,6362],"content":"<bpt id=\"p1\">&lt;a name=\"atlhexencode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> AtlHexEncode","linkify":"<a name=\"atlhexencode\"></a> AtlHexEncode","source":"<a name=\"atlhexencode\"></a> AtlHexEncode"},{"content":"Call this function to encode some data as a string of hexadecimal text.","pos":[6363,6434]},{"pos":[6444,6450],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[6597,6607],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The buffer containing the data to be encoded.","pos":[6626,6671]},{"content":"The length in bytes of the data to be encoded.","pos":[6691,6737]},{"content":"Caller-allocated buffer to receive the encoded data.","pos":[6756,6808]},{"content":"Pointer to a variable that contains the length in characters of <ph id=\"ph1\">`szDest`</ph>.","pos":[6830,6903],"source":" Pointer to a variable that contains the length in characters of `szDest`."},{"content":"If the function succeeds, the variable receives the number of characters written to the buffer.","pos":[6904,6999]},{"content":"If the function fails, the variable receives the required length in characters of the buffer.","pos":[7000,7093]},{"pos":[7103,7115],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7119,7169],"content":"Returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> on success, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> on failure.","source":"Returns **TRUE** on success, **FALSE** on failure."},{"pos":[7179,7186],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Each byte of source data is encoded as 2 hexadecimal characters.","pos":[7190,7254]},{"pos":[7264,7276],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[7280,7300],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlenc.h","source":"**Header:** atlenc.h"},{"pos":[7309,7383],"content":"<bpt id=\"p1\">&lt;a name=\"atlhexencodegetrequiredlength\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> AtlHexEncodeGetRequiredLength","linkify":"<a name=\"atlhexencodegetrequiredlength\"></a> AtlHexEncodeGetRequiredLength","source":"<a name=\"atlhexencodegetrequiredlength\"></a> AtlHexEncodeGetRequiredLength"},{"content":"Call this function to get the size in characters of a buffer that could contain a string encoded from data of the specified size.","pos":[7384,7513]},{"pos":[7523,7529],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[7619,7629],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of bytes of data to be encoded.","pos":[7646,7688]},{"pos":[7698,7710],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7714,7809],"content":"The number of characters required for a buffer that could hold encoded data of <ph id=\"ph1\">`nSrcLen`</ph> bytes.","source":"The number of characters required for a buffer that could hold encoded data of `nSrcLen` bytes."},{"pos":[7819,7831],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[7835,7855],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlenc.h","source":"**Header:** atlenc.h"},{"pos":[7862,7900],"content":"<bpt id=\"p1\">&lt;a name=\"atlhexvalue\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> AtlHexValue","linkify":"<a name=\"atlhexvalue\"></a> AtlHexValue","source":"<a name=\"atlhexvalue\"></a> AtlHexValue"},{"content":"Call this function to get the numeric value of a hexadecimal digit.","pos":[7901,7968]},{"pos":[7978,7984],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[8056,8066],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The hexadecimal character '0'-'9', 'A'-'F', or 'a'-'f'.","pos":[8080,8135]},{"pos":[8145,8157],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The numeric value of the input character interpreted as a hexadecimal digit.","pos":[8161,8237]},{"content":"For example, an input of '0' returns a value of 0 and an input of 'A' returns a value of 10.","pos":[8238,8330]},{"content":"If the input character is not a hexadecimal digit, this function returns -1.","pos":[8331,8407]},{"pos":[8417,8429],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[8433,8454],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlutil.h","source":"**Header:** atlutil.h"},{"pos":[8461,8509],"content":"<bpt id=\"p1\">&lt;a name=\"atlunicodetoutf8\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> AtlUnicodeToUTF8","linkify":"<a name=\"atlunicodetoutf8\"></a> AtlUnicodeToUTF8","source":"<a name=\"atlunicodetoutf8\"></a> AtlUnicodeToUTF8"},{"content":"Call this function to convert a Unicode string to UTF-8.","pos":[8510,8566]},{"pos":[8576,8582],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[8731,8741],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>wszSrc<ept id=\"p1\">*</ept>","pos":[8745,8753],"source":"*wszSrc*"},{"content":"The Unicode string to be converted","pos":[8757,8791]},{"content":"The length in characters of the Unicode string.","pos":[8808,8855]},{"content":"Caller-allocated buffer to receive the converted string.","pos":[8874,8930]},{"content":"The length in bytes of the buffer.","pos":[8948,8982]},{"pos":[8992,9004],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the number of characters for the converted string.","pos":[9008,9066]},{"pos":[9076,9083],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9087,9212],"content":"To determine the size of the buffer required for the converted string, call this function passing 0 for <ph id=\"ph1\">`szDest`</ph> and <ph id=\"ph2\">`nDest`</ph>.","source":"To determine the size of the buffer required for the converted string, call this function passing 0 for `szDest` and `nDest`."},{"pos":[9222,9234],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[9238,9258],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlenc.h","source":"**Header:** atlenc.h"},{"pos":[9265,9295],"content":"<bpt id=\"p1\">&lt;a name=\"bencode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> BEncode","linkify":"<a name=\"bencode\"></a> BEncode","source":"<a name=\"bencode\"></a> BEncode"},{"content":"Call this function to convert some data using the \"B\" encoding.","pos":[9298,9361]},{"pos":[9371,9377],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[9538,9548],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The buffer containing the data to be encoded.","pos":[9567,9612]},{"content":"The length in bytes of the data to be encoded.","pos":[9632,9678]},{"content":"Caller-allocated buffer to receive the encoded data.","pos":[9697,9749]},{"content":"Pointer to a variable that contains the length in characters of <ph id=\"ph1\">`szDest`</ph>.","pos":[9771,9844],"source":" Pointer to a variable that contains the length in characters of `szDest`."},{"content":"If the function succeeds, the variable receives the number of characters written to the buffer.","pos":[9845,9940]},{"content":"If the function fails, the variable receives the required length in characters of the buffer.","pos":[9941,10034]},{"content":"The character set to use for the conversion.","pos":[10057,10101]},{"pos":[10111,10123],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10127,10177],"content":"Returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> on success, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> on failure.","source":"Returns **TRUE** on success, **FALSE** on failure."},{"pos":[10187,10194],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[10198,10324],"content":"The \"B\" encoding scheme is described in RFC 2047 (<bpt id=\"p1\">[</bpt>http://www.ietf.org/rfc/rfc2047.txt<ept id=\"p1\">](http://www.ietf.org/rfc/rfc2047.txt)</ept>).","source":"The \"B\" encoding scheme is described in RFC 2047 ([http://www.ietf.org/rfc/rfc2047.txt](http://www.ietf.org/rfc/rfc2047.txt))."},{"pos":[10334,10346],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[10350,10370],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlenc.h","source":"**Header:** atlenc.h"},{"pos":[10377,10442],"content":"<bpt id=\"p1\">&lt;a name=\"beencodegetrequiredlength\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> BEncodeGetRequiredLength","linkify":"<a name=\"beencodegetrequiredlength\"></a> BEncodeGetRequiredLength","source":"<a name=\"beencodegetrequiredlength\"></a> BEncodeGetRequiredLength"},{"content":"Call this function to get the size in characters of a buffer that could contain a string encoded from data of the specified size.","pos":[10444,10573]},{"pos":[10583,10589],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[10702,10712],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of bytes of data to be encoded.","pos":[10729,10771]},{"content":"The length in characters of the character set to use for the conversion.","pos":[10795,10867]},{"pos":[10877,10889],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10893,10988],"content":"The number of characters required for a buffer that could hold encoded data of <ph id=\"ph1\">`nSrcLen`</ph> bytes.","source":"The number of characters required for a buffer that could hold encoded data of `nSrcLen` bytes."},{"pos":[10998,11005],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11009,11135],"content":"The \"B\" encoding scheme is described in RFC 2047 (<bpt id=\"p1\">[</bpt>http://www.ietf.org/rfc/rfc2047.txt<ept id=\"p1\">](http://www.ietf.org/rfc/rfc2047.txt)</ept>).","source":"The \"B\" encoding scheme is described in RFC 2047 ([http://www.ietf.org/rfc/rfc2047.txt](http://www.ietf.org/rfc/rfc2047.txt))."},{"pos":[11145,11157],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[11161,11181],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlenc.h","source":"**Header:** atlenc.h"},{"pos":[11187,11221],"content":"<bpt id=\"p1\">&lt;a name=\"escapexml\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> EscapeXML","linkify":"<a name=\"escapexml\"></a> EscapeXML","source":"<a name=\"escapexml\"></a> EscapeXML"},{"content":"Call this function to convert characters that are unsafe for use in XML to their safe equivalents.","pos":[11222,11320]},{"pos":[11330,11336],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[11520,11530],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The string to be converted.","pos":[11544,11571]},{"content":"<bpt id=\"p1\">*</bpt>nSrclen<ept id=\"p1\">*</ept>","pos":[11578,11587],"source":"*nSrclen*"},{"content":"The length in characters of the string to be converted.","pos":[11591,11646]},{"content":"<bpt id=\"p1\">*</bpt>szEsc<ept id=\"p1\">*</ept>","pos":[11653,11660],"source":"*szEsc*"},{"content":"Caller-allocated buffer to receive the converted string.","pos":[11664,11720]},{"content":"<bpt id=\"p1\">*</bpt>nDestLen<ept id=\"p1\">*</ept>","pos":[11727,11737],"source":"*nDestLen*"},{"content":"The length in characters of the caller-allocated buffer.","pos":[11741,11797]},{"content":"Flags describing how the conversion is to be performed.","pos":[11817,11872]},{"content":"See <bpt id=\"p1\">[</bpt>ATL_ESC Flags<ept id=\"p1\">](http://msdn.microsoft.com/library/daf3aa3c-7498-4d63-9fb6-e05b4815c2b8)</ept>.","pos":[11873,11965],"source":" See [ATL_ESC Flags](http://msdn.microsoft.com/library/daf3aa3c-7498-4d63-9fb6-e05b4815c2b8)."},{"pos":[11975,11987],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The length in characters of the converted string.","pos":[11991,12040]},{"pos":[12050,12057],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Possible conversions performed by this function are shown in the table:","pos":[12061,12132]},{"content":"Source","pos":[12139,12145]},{"content":"Destination","pos":[12146,12157]},{"content":"'","pos":[12232,12233]},{"content":"\"","pos":[12245,12246]},{"pos":[12264,12276],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[12280,12300],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlenc.h","source":"**Header:** atlenc.h"},{"pos":[12307,12355],"content":"<bpt id=\"p1\">&lt;a name=\"getextendedchars\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> GetExtendedChars","linkify":"<a name=\"getextendedchars\"></a> GetExtendedChars","source":"<a name=\"getextendedchars\"></a> GetExtendedChars"},{"content":"Call this function to get the number of extended characters in a string.","pos":[12356,12428]},{"pos":[12438,12444],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[12535,12545],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The string to be analyzed.","pos":[12560,12586]},{"content":"The length of the string in characters.","pos":[12606,12645]},{"pos":[12655,12667],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[12671,12788],"content":"Returns the number of extended characters found within the string as determined by <bpt id=\"p1\">[</bpt>IsExtendedChar<ept id=\"p1\">](#isextendedchar)</ept>.","source":"Returns the number of extended characters found within the string as determined by [IsExtendedChar](#isextendedchar)."},{"pos":[12798,12810],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[12814,12834],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlenc.h","source":"**Header:** atlenc.h"},{"pos":[12840,12884],"content":"<bpt id=\"p1\">&lt;a name=\"isextendedchar\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> IsExtendedChar","linkify":"<a name=\"isextendedchar\"></a> IsExtendedChar","source":"<a name=\"isextendedchar\"></a> IsExtendedChar"},{"content":"Call this function to find out if a given character is an extended character (less than 32, greater than 126, and not a tab, linefeed or carriage return)","pos":[12885,13038]},{"pos":[13048,13054],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[13125,13135],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>ch<ept id=\"p1\">*</ept>","pos":[13139,13143],"source":"*ch*"},{"content":"The character to be tested","pos":[13147,13173]},{"pos":[13183,13195],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[13199,13258],"content":"<bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> if the character is extended, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> otherwise.","source":"**TRUE** if the character is extended, **FALSE** otherwise."},{"pos":[13268,13280],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[13284,13304],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlenc.h","source":"**Header:** atlenc.h"},{"pos":[13311,13341],"content":"<bpt id=\"p1\">&lt;a name=\"qencode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> QEncode","linkify":"<a name=\"qencode\"></a> QEncode","source":"<a name=\"qencode\"></a> QEncode"},{"content":"Call this function to convert some data using the \"Q\" encoding.","pos":[13342,13405]},{"pos":[13415,13421],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[13613,13623],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The buffer containing the data to be encoded.","pos":[13642,13687]},{"content":"The length in bytes of the data to be encoded.","pos":[13707,13753]},{"content":"Caller-allocated buffer to receive the encoded data.","pos":[13772,13824]},{"content":"Pointer to a variable that contains the length in characters of <ph id=\"ph1\">`szDest`</ph>.","pos":[13846,13919],"source":" Pointer to a variable that contains the length in characters of `szDest`."},{"content":"If the function succeeds, the variable receives the number of characters written to the buffer.","pos":[13920,14015]},{"content":"If the function fails, the variable receives the required length in characters of the buffer.","pos":[14016,14109]},{"content":"The character set to use for the conversion.","pos":[14132,14176]},{"content":"<bpt id=\"p1\">*</bpt>pnNumEncoded<ept id=\"p1\">*</ept>","pos":[14183,14197],"source":"*pnNumEncoded*"},{"content":"A pointer to a variable that on return contains the number of unsafe characters that had to be converted.","pos":[14201,14306]},{"pos":[14316,14328],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[14332,14382],"content":"Returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> on success, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> on failure.","source":"Returns **TRUE** on success, **FALSE** on failure."},{"pos":[14392,14399],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[14403,14529],"content":"The \"Q\" encoding scheme is described in RFC 2047 (<bpt id=\"p1\">[</bpt>http://www.ietf.org/rfc/rfc2047.txt<ept id=\"p1\">](http://www.ietf.org/rfc/rfc2047.txt)</ept>).","source":"The \"Q\" encoding scheme is described in RFC 2047 ([http://www.ietf.org/rfc/rfc2047.txt](http://www.ietf.org/rfc/rfc2047.txt))."},{"pos":[14539,14551],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[14555,14575],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlenc.h","source":"**Header:** atlenc.h"},{"pos":[14582,14646],"content":"<bpt id=\"p1\">&lt;a name=\"qencodegetrequiredlength\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> QEncodeGetRequiredLength","linkify":"<a name=\"qencodegetrequiredlength\"></a> QEncodeGetRequiredLength","source":"<a name=\"qencodegetrequiredlength\"></a> QEncodeGetRequiredLength"},{"content":"Call this function to get the size in characters of a buffer that could contain a string encoded from data of the specified size.","pos":[14648,14777]},{"pos":[14787,14793],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[14906,14916],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of bytes of data to be encoded.","pos":[14933,14975]},{"content":"The length in characters of the character set to use for the conversion.","pos":[14999,15071]},{"pos":[15081,15093],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[15097,15192],"content":"The number of characters required for a buffer that could hold encoded data of <ph id=\"ph1\">`nSrcLen`</ph> bytes.","source":"The number of characters required for a buffer that could hold encoded data of `nSrcLen` bytes."},{"pos":[15202,15209],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[15213,15339],"content":"The \"Q\" encoding scheme is described in RFC 2047 (<bpt id=\"p1\">[</bpt>http://www.ietf.org/rfc/rfc2047.txt<ept id=\"p1\">](http://www.ietf.org/rfc/rfc2047.txt)</ept>).","source":"The \"Q\" encoding scheme is described in RFC 2047 ([http://www.ietf.org/rfc/rfc2047.txt](http://www.ietf.org/rfc/rfc2047.txt))."},{"pos":[15349,15361],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[15365,15385],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlenc.h","source":"**Header:** atlenc.h"},{"pos":[15391,15423],"content":"<bpt id=\"p1\">&lt;a name=\"qpdecode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> QPDecode","linkify":"<a name=\"qpdecode\"></a> QPDecode","source":"<a name=\"qpdecode\"></a> QPDecode"},{"pos":[15424,15550],"content":"Decodes a string of data that has been encoded in quoted-printable format such as by a previous call to <bpt id=\"p1\">[</bpt>QPEncode<ept id=\"p1\">](#qpencode)</ept>.","source":"Decodes a string of data that has been encoded in quoted-printable format such as by a previous call to [QPEncode](#qpencode)."},{"pos":[15560,15566],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[15728,15738],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pbSrcData`</ph>","pos":[15742,15758],"source":"[in] `pbSrcData`"},{"content":"The buffer containing the data to be decoded.","pos":[15762,15807]},{"content":"[in] <ph id=\"ph1\">`nSrcLen`</ph>","pos":[15814,15828],"source":"[in] `nSrcLen`"},{"content":"The length in bytes of <ph id=\"ph1\">`pbSrcData`</ph>.","pos":[15832,15867],"source":" The length in bytes of `pbSrcData`."},{"content":"[out] <ph id=\"ph1\">`szDest`</ph>","pos":[15874,15888],"source":"[out] `szDest`"},{"content":"Caller-allocated buffer to receive the decoded data.","pos":[15892,15944]},{"content":"[out] <ph id=\"ph1\">`pnDestLen`</ph>","pos":[15951,15968],"source":"[out] `pnDestLen`"},{"content":"Pointer to a variable that contains the length in bytes of <ph id=\"ph1\">`szDest`</ph>.","pos":[15972,16040],"source":" Pointer to a variable that contains the length in bytes of `szDest`."},{"content":"If the function succeeds, the variable receives the number of bytes written to the buffer.","pos":[16041,16131]},{"content":"If the function fails, the variable receives the required length in bytes of the buffer.","pos":[16132,16220]},{"content":"[in] <ph id=\"ph1\">`dwFlags`</ph>","pos":[16227,16241],"source":"[in] `dwFlags`"},{"content":"Flags describing how the conversion is to be performed.","pos":[16245,16300]},{"content":"See <bpt id=\"p1\">[</bpt>ATLSMTP_QPENCODE Flags<ept id=\"p1\">](http://msdn.microsoft.com/library/6b15a3ab-8e57-49e4-8104-09b26ebb96c4)</ept>.","pos":[16301,16402],"source":" See [ATLSMTP_QPENCODE Flags](http://msdn.microsoft.com/library/6b15a3ab-8e57-49e4-8104-09b26ebb96c4)."},{"pos":[16412,16424],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16428,16474],"content":"Returns <ph id=\"ph1\">`TRUE`</ph> on success, <ph id=\"ph2\">`FALSE`</ph> on failure.","source":"Returns `TRUE` on success, `FALSE` on failure."},{"pos":[16484,16491],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[16495,16634],"content":"The quoted-printable encoding scheme is described in RFC 2045 (<bpt id=\"p1\">[</bpt>http://www.ietf.org/rfc/rfc2045.txt<ept id=\"p1\">](http://www.ietf.org/rfc/rfc2045.txt)</ept>).","source":"The quoted-printable encoding scheme is described in RFC 2045 ([http://www.ietf.org/rfc/rfc2045.txt](http://www.ietf.org/rfc/rfc2045.txt))."},{"pos":[16644,16656],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[16660,16680],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlenc.h","source":"**Header:** atlenc.h"},{"pos":[16687,16753],"content":"<bpt id=\"p1\">&lt;a name=\"qpdecodegetrequiredlength\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> QPDecodeGetRequiredLength","linkify":"<a name=\"qpdecodegetrequiredlength\"></a> QPDecodeGetRequiredLength","source":"<a name=\"qpdecodegetrequiredlength\"></a> QPDecodeGetRequiredLength"},{"content":"Call this function to get the size in bytes of a buffer that could contain data decoded from quoted-printable-encoded string of the specified length.","pos":[16754,16903]},{"pos":[16913,16919],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[17005,17015],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of characters in the encoded string.","pos":[17032,17079]},{"pos":[17089,17101],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[17105,17204],"content":"The number of bytes required for a buffer that could hold a decoded string of <ph id=\"ph1\">`nSrcLen`</ph> characters.","source":"The number of bytes required for a buffer that could hold a decoded string of `nSrcLen` characters."},{"pos":[17214,17221],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17225,17364],"content":"The quoted-printable encoding scheme is described in RFC 2045 (<bpt id=\"p1\">[</bpt>http://www.ietf.org/rfc/rfc2045.txt<ept id=\"p1\">](http://www.ietf.org/rfc/rfc2045.txt)</ept>).","source":"The quoted-printable encoding scheme is described in RFC 2045 ([http://www.ietf.org/rfc/rfc2045.txt](http://www.ietf.org/rfc/rfc2045.txt))."},{"pos":[17374,17386],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[17390,17410],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlenc.h","source":"**Header:** atlenc.h"},{"pos":[17417,17449],"content":"<bpt id=\"p1\">&lt;a name=\"qpencode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> QPEncode","linkify":"<a name=\"qpencode\"></a> QPEncode","source":"<a name=\"qpencode\"></a> QPEncode"},{"content":"Call this function to encode some data in quoted-printable format.","pos":[17450,17516]},{"pos":[17526,17532],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[17695,17705],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The buffer containing the data to be encoded.","pos":[17724,17769]},{"content":"The length in bytes of the data to be encoded.","pos":[17789,17835]},{"content":"Caller-allocated buffer to receive the encoded data.","pos":[17854,17906]},{"content":"Pointer to a variable that contains the length in characters of <ph id=\"ph1\">`szDest`</ph>.","pos":[17928,18001],"source":" Pointer to a variable that contains the length in characters of `szDest`."},{"content":"If the function succeeds, the variable receives the number of characters written to the buffer.","pos":[18002,18097]},{"content":"If the function fails, the variable receives the required length in characters of the buffer.","pos":[18098,18191]},{"content":"Flags describing how the conversion is to be performed.","pos":[18211,18266]},{"content":"See <bpt id=\"p1\">[</bpt>ATLSMTP_QPENCODE Flags<ept id=\"p1\">](http://msdn.microsoft.com/library/6b15a3ab-8e57-49e4-8104-09b26ebb96c4)</ept>.","pos":[18267,18368],"source":" See [ATLSMTP_QPENCODE Flags](http://msdn.microsoft.com/library/6b15a3ab-8e57-49e4-8104-09b26ebb96c4)."},{"pos":[18378,18390],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[18394,18444],"content":"Returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> on success, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> on failure.","source":"Returns **TRUE** on success, **FALSE** on failure."},{"pos":[18454,18461],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[18465,18604],"content":"The quoted-printable encoding scheme is described in RFC 2045 (<bpt id=\"p1\">[</bpt>http://www.ietf.org/rfc/rfc2045.txt<ept id=\"p1\">](http://www.ietf.org/rfc/rfc2045.txt)</ept>).","source":"The quoted-printable encoding scheme is described in RFC 2045 ([http://www.ietf.org/rfc/rfc2045.txt](http://www.ietf.org/rfc/rfc2045.txt))."},{"pos":[18614,18626],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[18630,18650],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlenc.h","source":"**Header:** atlenc.h"},{"pos":[18656,18722],"content":"<bpt id=\"p1\">&lt;a name=\"qpencodegetrequiredlength\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> QPEncodeGetRequiredLength","linkify":"<a name=\"qpencodegetrequiredlength\"></a> QPEncodeGetRequiredLength","source":"<a name=\"qpencodegetrequiredlength\"></a> QPEncodeGetRequiredLength"},{"content":"Call this function to get the size in characters of a buffer that could contain a string encoded from data of the specified size.","pos":[18723,18852]},{"pos":[18862,18868],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[18955,18965],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of bytes of data to be encoded.","pos":[18982,19024]},{"pos":[19034,19046],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19050,19145],"content":"The number of characters required for a buffer that could hold encoded data of <ph id=\"ph1\">`nSrcLen`</ph> bytes.","source":"The number of characters required for a buffer that could hold encoded data of `nSrcLen` bytes."},{"pos":[19155,19162],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[19166,19305],"content":"The quoted-printable encoding scheme is described in RFC 2045 (<bpt id=\"p1\">[</bpt>http://www.ietf.org/rfc/rfc2045.txt<ept id=\"p1\">](http://www.ietf.org/rfc/rfc2045.txt)</ept>).","source":"The quoted-printable encoding scheme is described in RFC 2045 ([http://www.ietf.org/rfc/rfc2045.txt](http://www.ietf.org/rfc/rfc2045.txt))."},{"pos":[19315,19327],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[19331,19351],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlenc.h","source":"**Header:** atlenc.h"},{"pos":[19357,19389],"content":"<bpt id=\"p1\">&lt;a name=\"uudecode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> UUDecode","linkify":"<a name=\"uudecode\"></a> UUDecode","source":"<a name=\"uudecode\"></a> UUDecode"},{"pos":[19390,19491],"content":"Decodes a string of data that has been uuencoded such as by a previous call to <bpt id=\"p1\">[</bpt>UUEncode<ept id=\"p1\">](#uuencode)</ept>.","source":"Decodes a string of data that has been uuencoded such as by a previous call to [UUEncode](#uuencode)."},{"pos":[19501,19507],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[19646,19656],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The string containing the data to be decoded.","pos":[19675,19720]},{"content":"The length in bytes of <ph id=\"ph1\">`pbSrcData`</ph>.","pos":[19740,19775],"source":" The length in bytes of `pbSrcData`."},{"content":"Caller-allocated buffer to receive the decoded data.","pos":[19794,19846]},{"content":"Pointer to a variable that contains the length in bytes of <ph id=\"ph1\">`pbDest`</ph>.","pos":[19868,19936],"source":" Pointer to a variable that contains the length in bytes of `pbDest`."},{"content":"If the function succeeds, the variable receives the number of bytes written to the buffer.","pos":[19937,20027]},{"content":"If the function fails, the variable receives the required length in bytes of the buffer.","pos":[20028,20116]},{"pos":[20126,20138],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20142,20192],"content":"Returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> on success, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> on failure.","source":"Returns **TRUE** on success, **FALSE** on failure."},{"pos":[20202,20209],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This uuencoding implementation follows the POSIX P1003.2b/D11 specification.","pos":[20213,20289]},{"pos":[20299,20311],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[20315,20335],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlenc.h","source":"**Header:** atlenc.h"},{"pos":[20342,20408],"content":"<bpt id=\"p1\">&lt;a name=\"uudecodegetrequiredlength\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> UUDecodeGetRequiredLength","linkify":"<a name=\"uudecodegetrequiredlength\"></a> UUDecodeGetRequiredLength","source":"<a name=\"uudecodegetrequiredlength\"></a> UUDecodeGetRequiredLength"},{"content":"Call this function to get the size in bytes of a buffer that could contain data decoded from a uuencoded string of the specified length.","pos":[20409,20545]},{"pos":[20555,20561],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[20648,20658],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of characters in the encoded string.","pos":[20675,20722]},{"pos":[20732,20744],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20748,20847],"content":"The number of bytes required for a buffer that could hold a decoded string of <ph id=\"ph1\">`nSrcLen`</ph> characters.","source":"The number of bytes required for a buffer that could hold a decoded string of `nSrcLen` characters."},{"pos":[20857,20864],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This uuencoding implementation follows the POSIX P1003.2b/D11 specification.","pos":[20868,20944]},{"pos":[20954,20966],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[20970,20990],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlenc.h","source":"**Header:** atlenc.h"},{"pos":[21000,21032],"content":"<bpt id=\"p1\">&lt;a name=\"uuencode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> UUEncode","linkify":"<a name=\"uuencode\"></a> UUEncode","source":"<a name=\"uuencode\"></a> UUEncode"},{"content":"Call this function to uuencode some data.","pos":[21033,21074]},{"pos":[21084,21090],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[21295,21305],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The buffer containing the data to be encoded.","pos":[21324,21369]},{"content":"The length in bytes of the data to be encoded.","pos":[21389,21435]},{"content":"Caller-allocated buffer to receive the encoded data.","pos":[21454,21506]},{"content":"Pointer to a variable that contains the length in characters of <ph id=\"ph1\">`szDest`</ph>.","pos":[21528,21601],"source":" Pointer to a variable that contains the length in characters of `szDest`."},{"content":"If the function succeeds, the variable receives the number of characters written to the buffer.","pos":[21602,21697]},{"content":"If the function fails, the variable receives the required length in characters of the buffer.","pos":[21698,21791]},{"content":"<bpt id=\"p1\">*</bpt>lpszFile<ept id=\"p1\">*</ept>","pos":[21798,21808],"source":"*lpszFile*"},{"content":"The file to be added to the header when ATLSMTP_UUENCODE_HEADER is specified in <ph id=\"ph1\">`dwFlags`</ph>.","pos":[21812,21902],"source":" The file to be added to the header when ATLSMTP_UUENCODE_HEADER is specified in `dwFlags`."},{"content":"Flags controlling the behavior of this function.","pos":[21922,21970]},{"content":"See <bpt id=\"p1\">[</bpt>ATLSMTP_UUENCODE Flags<ept id=\"p1\">](http://msdn.microsoft.com/library/ecb79b81-b764-4a48-a05c-a9dee6e7bbce)</ept>.","pos":[21971,22072],"source":" See [ATLSMTP_UUENCODE Flags](http://msdn.microsoft.com/library/ecb79b81-b764-4a48-a05c-a9dee6e7bbce)."},{"pos":[22082,22094],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22098,22148],"content":"Returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> on success, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> on failure.","source":"Returns **TRUE** on success, **FALSE** on failure."},{"pos":[22158,22165],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This uuencoding implementation follows the POSIX P1003.2b/D11 specification.","pos":[22169,22245]},{"pos":[22255,22267],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[22271,22291],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlenc.h","source":"**Header:** atlenc.h"},{"pos":[22298,22364],"content":"<bpt id=\"p1\">&lt;a name=\"uuencodegetrequiredlength\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> UUEncodeGetRequiredLength","linkify":"<a name=\"uuencodegetrequiredlength\"></a> UUEncodeGetRequiredLength","source":"<a name=\"uuencodegetrequiredlength\"></a> UUEncodeGetRequiredLength"},{"content":"Call this function to get the size in characters of a buffer that could contain a string encoded from data of the specified size.","pos":[22365,22494]},{"pos":[22504,22510],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[22597,22607],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of bytes of data to be encoded.","pos":[22624,22666]},{"pos":[22676,22688],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22692,22787],"content":"The number of characters required for a buffer that could hold encoded data of <ph id=\"ph1\">`nSrcLen`</ph> bytes.","source":"The number of characters required for a buffer that could hold encoded data of `nSrcLen` bytes."},{"pos":[22797,22804],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This uuencoding implementation follows the POSIX P1003.2b/D11 specification.","pos":[22808,22884]},{"pos":[22894,22906],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[22910,22930],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlenc.h","source":"**Header:** atlenc.h"},{"pos":[22938,22946],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Concepts<ept id=\"p1\">](../../atl/active-template-library-atl-concepts.md)</ept><ph id=\"ph1\"> </ph>","pos":[22950,23012],"source":"[Concepts](../../atl/active-template-library-atl-concepts.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ATL COM Desktop Components<ept id=\"p1\">](../../atl/atl-com-desktop-components.md)</ept>","pos":[23015,23085],"source":" [ATL COM Desktop Components](../../atl/atl-com-desktop-components.md)"}],"content":"---\ntitle: \"ATL Text Encoding Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 2ae1648b-2b87-4112-92aa-0069fcfd23da\ncaps.latest.revision: 3\n---\n# ATL Text Encoding Functions\nThese functions support text encoding and decoding.\n\n|||  \n|-|-|  \n|[AtlGetHexValue](#atlgethexvalue)|Call this function to get the numeric value of a hexadecimal digit.|   \n|[AtlGetVersion](#atlgetversion)|Call this function to get the version of the ATL library that you are using.  |  \n|[AtlHexDecode](#atlhexdecode)|Decodes a string of data that has been encoded as hexadecimal text such as by a previous call to [AtlHexEncode](#atlhexencode).|\n|[AtlHexDecodeGetRequiredLength](#atlhexdecodegetrequiredlength)|Call this function to get the size in bytes of a buffer that could contain data decoded from a hex-encoded string of the specified length.|\n|[AtlHexEncode](#atlhexencode)|Call this function to encode some data as a string of hexadecimal text.|\n|[AtlHexEncodeGetRequiredLength](#atlhexencodegetrequiredlength)|Call this function to get the size in characters of a buffer that could contain a string encoded from data of the specified size.|\n|[AtlHexValue](#atlhexvalue)|Call this function to get the numeric value of a hexadecimal digit. |\n|[AtlUnicodeToUTF8](#atlunicodetoutf8)|Call this function to convert a Unicode string to UTF-8. |\n|[BEncode](#bencode)|Call this function to convert some data using the \"B\" encoding.|\n|[BEncodeGetRequiredLength](#beencodegetrequiredlength)|Call this function to get the size in characters of a buffer that could contain a string encoded from data of the specified size.|\n|[EscapeXML](#escapexml)|Call this function to convert characters that are unsafe for use in XML to their safe equivalents.|\n|[GetExtendedChars](#getextendedchars)|Call this function to get the number of extended characters in a string.|\n|[IsExtendedChar](#isextendedchar)|Call this function to find out if a given character is an extended character (less than 32, greater than 126, and not a tab, linefeed or carriage return)|\n|[QEncode](#qencode)|Call this function to convert some data using the \"Q\" encoding.  |\n|[QEncodeGetRequiredLength](#qencodegetrequiredlength)|Call this function to get the size in characters of a buffer that could contain a string encoded from data of the specified size.|\n|[QPDecode](#qpdecode)|Decodes a string of data that has been encoded in quoted-printable format such as by a previous call to [QPEncode](#qpencode).|\n|[QPDecodeGetRequiredLength](#qpdecodegetrequiredlength)|Call this function to get the size in bytes of a buffer that could contain data decoded from quoted-printable-encoded string of the specified length.|\n|[QPEncode](#qpencode)|Call this function to encode some data in quoted-printable format.|\n|[QPEncodeGetRequiredLength](#qpencodegetrequiredlength)|Call this function to get the size in characters of a buffer that could contain a string encoded from data of the specified size.|\n|[UUDecode](#uudecode)|Decodes a string of data that has been uuencoded such as by a previous call to [UUEncode](#uuencode).|\n|[UUDecodeGetRequiredLength](#uudecodegetrequiredlength)|Call this function to get the size in bytes of a buffer that could contain data decoded from a uuencoded string of the specified length.|\n|[UUEncode](#uuencode)|Call this function to uuencode some data. |\n|[UUEncodeGetRequiredLength](#uuencodegetrequiredlength)|Call this function to get the size in characters of a buffer that could contain a string encoded from data of the specified size.|\n\n\n## <a name=\"atlgethexvalue\"></a> AtlGetHexValue\nCall this function to get the numeric value of a hexadecimal digit.  \n  \n### Syntax  \n  \n```    \ninline char AtlGetHexValue(char chIn) throw();  \n```  \n  \n### Parameters  \n `chIn`  \n The hexadecimal character '0'-'9', 'A'-'F', or 'a'-'f'.  \n  \n### Return Value  \n The numeric value of the input character interpreted as a hexadecimal digit. For example, an input of '0' returns a value of 0 and an input of 'A' returns a value of 10. If the input character is not a hexadecimal digit, this function returns -1.  \n  \n### Requirements  \n **Header:** atlenc.h  \n \n## <a name=\"atlgetversion\"></a> AtlGetVersion\nCall this function to get the version of the ATL library that you are using.  \n  \n### Syntax  \n  \n```  \nATLAPI_(DWORD) AtlGetVersion(void* pReserved);  \n```  \n  \n### Parameters  \n `pReserved`  \n A reserved pointer.  \n  \n### Return Value  \n Returns a `DWORD` integer value of the version of the ATL library that you are compiling or running.  \n  \n## Example  \n The function should be called as follows.  \n  \n [!code-cpp[NVC_ATL_Utilities#95](../../atl/codesnippet/cpp/atl-text-encoding-functions_1.cpp)]  \n  \n### Requirements  \n **Header:** atlbase.h  \n\n## <a name=\"atlhexdecode\"></a> AtlHexDecode\nDecodes a string of data that has been encoded as hexadecimal text such as by a previous call to [AtlHexEncode](#atlhexencode).  \n  \n### Syntax  \n  \n```    \ninline BOOL AtlHexDecode(  \n   LPCSTR pSrcData,  \n   int nSrcLen,  \n   LPBYTE pbDest,  \n   int* pnDestLen) throw();  \n```  \n  \n### Parameters  \n `pSrcData`  \n The string containing the data to be decoded.  \n  \n `nSrcLen`  \n The length in characters of `pSrcData`.  \n  \n `pbDest`  \n Caller-allocated buffer to receive the decoded data.  \n  \n `pnDestLen`  \n Pointer to a variable that contains the length in bytes of `pbDest`. If the function succeeds, the variable receives the number of bytes written to the buffer. If the function fails, the variable receives the required length in bytes of the buffer.  \n  \n### Return Value  \n Returns **TRUE** on success, **FALSE** on failure.  \n  \n### Requirements  \n **Header:** atlenc.h  \n\n## <a name=\"atlhexdecodegetrequiredlength\"></a> AtlHexDecodeGetRequiredLength\nCall this function to get the size in bytes of a buffer that could contain data decoded from a hex-encoded string of the specified length.  \n  \n### Syntax  \n  \n```  \ninline int AtlHexDecodeGetRequiredLength(int nSrcLen) throw();  \n```  \n  \n### Parameters  \n `nSrcLen`  \n The number of characters in the encoded string.  \n  \n### Return Value  \n The number of bytes required for a buffer that could hold a decoded string of `nSrcLen` characters.  \n  \n### Requirements  \n **Header:** atlenc.h \n\n## <a name=\"atlhexencode\"></a> AtlHexEncode\nCall this function to encode some data as a string of hexadecimal text.  \n  \n### Syntax  \n  \n```  \ninline BOOL AtlHexEncode(  \n   const BYTE * pbSrcData,  \n   int nSrcLen,  \n   LPSTR szDest,  \nint * pnDestLen) throw();  \n```  \n  \n### Parameters  \n `pbSrcData`  \n The buffer containing the data to be encoded.  \n  \n `nSrcLen`  \n The length in bytes of the data to be encoded.  \n  \n `szDest`  \n Caller-allocated buffer to receive the encoded data.  \n  \n `pnDestLen`  \n Pointer to a variable that contains the length in characters of `szDest`. If the function succeeds, the variable receives the number of characters written to the buffer. If the function fails, the variable receives the required length in characters of the buffer.  \n  \n### Return Value  \n Returns **TRUE** on success, **FALSE** on failure.  \n  \n### Remarks  \n Each byte of source data is encoded as 2 hexadecimal characters.  \n  \n### Requirements  \n **Header:** atlenc.h  \n  \n## <a name=\"atlhexencodegetrequiredlength\"></a> AtlHexEncodeGetRequiredLength\nCall this function to get the size in characters of a buffer that could contain a string encoded from data of the specified size.  \n  \n### Syntax  \n  \n```  \ninline int AtlHexEncodeGetRequiredLength(int nSrcLen) throw();  \n```  \n  \n### Parameters  \n `nSrcLen`  \n The number of bytes of data to be encoded.  \n  \n### Return Value  \n The number of characters required for a buffer that could hold encoded data of `nSrcLen` bytes.  \n  \n### Requirements  \n **Header:** atlenc.h  \n\n## <a name=\"atlhexvalue\"></a> AtlHexValue\nCall this function to get the numeric value of a hexadecimal digit.  \n  \n### Syntax  \n  \n```  \ninline short AtlHexValue(char chIn) throw();  \n```  \n  \n### Parameters  \n `chIn`  \n The hexadecimal character '0'-'9', 'A'-'F', or 'a'-'f'.  \n  \n### Return Value  \n The numeric value of the input character interpreted as a hexadecimal digit. For example, an input of '0' returns a value of 0 and an input of 'A' returns a value of 10. If the input character is not a hexadecimal digit, this function returns -1.  \n  \n### Requirements  \n **Header:** atlutil.h  \n\n## <a name=\"atlunicodetoutf8\"></a> AtlUnicodeToUTF8\nCall this function to convert a Unicode string to UTF-8.  \n  \n### Syntax  \n  \n```  \nATL_NOINLINE inline int AtlUnicodeToUTF8(  \n   LPCWSTR wszSrc,  \n   int nSrc,  \n   LPSTR szDest,  \n   int nDest) throw();  \n```  \n  \n### Parameters  \n *wszSrc*  \n The Unicode string to be converted  \n  \n `nSrc`  \n The length in characters of the Unicode string.  \n  \n `szDest`  \n Caller-allocated buffer to receive the converted string.  \n  \n `nDest`  \n The length in bytes of the buffer.  \n  \n### Return Value  \n Returns the number of characters for the converted string.  \n  \n### Remarks  \n To determine the size of the buffer required for the converted string, call this function passing 0 for `szDest` and `nDest`.  \n  \n### Requirements  \n **Header:** atlenc.h  \n\n## <a name=\"bencode\"></a> BEncode  \nCall this function to convert some data using the \"B\" encoding.  \n  \n### Syntax  \n  \n```  \ninline BOOL BEncode(  \n   BYTE* pbSrcData,  \n   int nSrcLen,  \n   LPSTR szDest,  \n   int* pnDestLen,  \n   LPCSTR pszCharSet) throw();  \n```  \n  \n### Parameters  \n `pbSrcData`  \n The buffer containing the data to be encoded.  \n  \n `nSrcLen`  \n The length in bytes of the data to be encoded.  \n  \n `szDest`  \n Caller-allocated buffer to receive the encoded data.  \n  \n `pnDestLen`  \n Pointer to a variable that contains the length in characters of `szDest`. If the function succeeds, the variable receives the number of characters written to the buffer. If the function fails, the variable receives the required length in characters of the buffer.  \n  \n `pszCharSet`  \n The character set to use for the conversion.  \n  \n### Return Value  \n Returns **TRUE** on success, **FALSE** on failure.  \n  \n### Remarks  \n The \"B\" encoding scheme is described in RFC 2047 ([http://www.ietf.org/rfc/rfc2047.txt](http://www.ietf.org/rfc/rfc2047.txt)).  \n  \n### Requirements  \n **Header:** atlenc.h  \n\n## <a name=\"beencodegetrequiredlength\"></a> BEncodeGetRequiredLength \nCall this function to get the size in characters of a buffer that could contain a string encoded from data of the specified size.  \n  \n### Syntax  \n  \n```  \ninline int BEncodeGetRequiredLength(  \n   int nSrcLen,  \n   int nCharsetLen) throw();  \n```  \n  \n### Parameters  \n `nSrcLen`  \n The number of bytes of data to be encoded.  \n  \n `nCharsetLen`  \n The length in characters of the character set to use for the conversion.  \n  \n### Return Value  \n The number of characters required for a buffer that could hold encoded data of `nSrcLen` bytes.  \n  \n### Remarks  \n The \"B\" encoding scheme is described in RFC 2047 ([http://www.ietf.org/rfc/rfc2047.txt](http://www.ietf.org/rfc/rfc2047.txt)).  \n  \n### Requirements  \n **Header:** atlenc.h \n\n## <a name=\"escapexml\"></a> EscapeXML\nCall this function to convert characters that are unsafe for use in XML to their safe equivalents.  \n  \n### Syntax  \n  \n```  \ninline int EscapeXML(  \n   const wchar_t * szIn,  \n   int nSrcLen,  \n   wchar_t * szEsc,  \n   int nDestLen,  \n   DWORD dwFlags = ATL_ESC_FLAG_NONE) throw();  \n```  \n  \n### Parameters  \n `szIn`  \n The string to be converted.  \n  \n *nSrclen*  \n The length in characters of the string to be converted.  \n  \n *szEsc*  \n Caller-allocated buffer to receive the converted string.  \n  \n *nDestLen*  \n The length in characters of the caller-allocated buffer.  \n  \n `dwFlags`  \n Flags describing how the conversion is to be performed. See [ATL_ESC Flags](http://msdn.microsoft.com/library/daf3aa3c-7498-4d63-9fb6-e05b4815c2b8).  \n  \n### Return Value  \n The length in characters of the converted string.  \n  \n### Remarks  \n Possible conversions performed by this function are shown in the table:  \n  \n|Source|Destination|  \n|------------|-----------------|  \n|\\<|&lt;|  \n|>|&gt;|  \n|&|&amp;|  \n|'|&apos;|  \n|\"|&quot;|  \n  \n### Requirements  \n **Header:** atlenc.h  \n\n## <a name=\"getextendedchars\"></a> GetExtendedChars\nCall this function to get the number of extended characters in a string.  \n  \n### Syntax  \n  \n```  \ninline int GetExtendedChars(LPCSTR szSrc, int nSrcLen) throw();  \n```  \n  \n### Parameters  \n `szSrc`  \n The string to be analyzed.  \n  \n `nSrcLen`  \n The length of the string in characters.  \n  \n### Return Value  \n Returns the number of extended characters found within the string as determined by [IsExtendedChar](#isextendedchar).  \n  \n### Requirements  \n **Header:** atlenc.h \n\n## <a name=\"isextendedchar\"></a> IsExtendedChar\nCall this function to find out if a given character is an extended character (less than 32, greater than 126, and not a tab, linefeed or carriage return)  \n  \n### Syntax  \n  \n```  \ninline int IsExtendedChar(char ch) throw();  \n```  \n  \n### Parameters  \n *ch*  \n The character to be tested  \n  \n### Return Value  \n **TRUE** if the character is extended, **FALSE** otherwise.  \n  \n### Requirements  \n **Header:** atlenc.h  \n\n## <a name=\"qencode\"></a> QEncode\nCall this function to convert some data using the \"Q\" encoding.  \n  \n### Syntax  \n  \n```  \ninline BOOL QEncode(  \n   BYTE* pbSrcData,  \n   int nSrcLen,  \n   LPSTR szDest,  \n   int* pnDestLen,  \n   LPCSTR pszCharSet,  \n   int* pnNumEncoded = NULL) throw();  \n```  \n  \n### Parameters  \n `pbSrcData`  \n The buffer containing the data to be encoded.  \n  \n `nSrcLen`  \n The length in bytes of the data to be encoded.  \n  \n `szDest`  \n Caller-allocated buffer to receive the encoded data.  \n  \n `pnDestLen`  \n Pointer to a variable that contains the length in characters of `szDest`. If the function succeeds, the variable receives the number of characters written to the buffer. If the function fails, the variable receives the required length in characters of the buffer.  \n  \n `pszCharSet`  \n The character set to use for the conversion.  \n  \n *pnNumEncoded*  \n A pointer to a variable that on return contains the number of unsafe characters that had to be converted.  \n  \n### Return Value  \n Returns **TRUE** on success, **FALSE** on failure.  \n  \n### Remarks  \n The \"Q\" encoding scheme is described in RFC 2047 ([http://www.ietf.org/rfc/rfc2047.txt](http://www.ietf.org/rfc/rfc2047.txt)).  \n  \n### Requirements  \n **Header:** atlenc.h  \n\n## <a name=\"qencodegetrequiredlength\"></a> QEncodeGetRequiredLength \nCall this function to get the size in characters of a buffer that could contain a string encoded from data of the specified size.  \n  \n### Syntax  \n  \n```  \ninline int QEncodeGetRequiredLength(  \n   int nSrcLen,  \n   int nCharsetLen) throw();  \n```  \n  \n### Parameters  \n `nSrcLen`  \n The number of bytes of data to be encoded.  \n  \n `nCharsetLen`  \n The length in characters of the character set to use for the conversion.  \n  \n### Return Value  \n The number of characters required for a buffer that could hold encoded data of `nSrcLen` bytes.  \n  \n### Remarks  \n The \"Q\" encoding scheme is described in RFC 2047 ([http://www.ietf.org/rfc/rfc2047.txt](http://www.ietf.org/rfc/rfc2047.txt)).  \n  \n### Requirements  \n **Header:** atlenc.h \n\n## <a name=\"qpdecode\"></a> QPDecode\nDecodes a string of data that has been encoded in quoted-printable format such as by a previous call to [QPEncode](#qpencode).  \n  \n### Syntax  \n  \n```  \ninline BOOL QPDecode(  \n   BYTE* pbSrcData,  \n   int nSrcLen,  \n   LPSTR szDest,  \n   int* pnDestLen,  \n   DWORD dwFlags = 0) throw();  \n```  \n  \n### Parameters  \n [in] `pbSrcData`  \n The buffer containing the data to be decoded.  \n  \n [in] `nSrcLen`  \n The length in bytes of `pbSrcData`.  \n  \n [out] `szDest`  \n Caller-allocated buffer to receive the decoded data.  \n  \n [out] `pnDestLen`  \n Pointer to a variable that contains the length in bytes of `szDest`. If the function succeeds, the variable receives the number of bytes written to the buffer. If the function fails, the variable receives the required length in bytes of the buffer.  \n  \n [in] `dwFlags`  \n Flags describing how the conversion is to be performed. See [ATLSMTP_QPENCODE Flags](http://msdn.microsoft.com/library/6b15a3ab-8e57-49e4-8104-09b26ebb96c4).  \n  \n### Return Value  \n Returns `TRUE` on success, `FALSE` on failure.  \n  \n### Remarks  \n The quoted-printable encoding scheme is described in RFC 2045 ([http://www.ietf.org/rfc/rfc2045.txt](http://www.ietf.org/rfc/rfc2045.txt)).  \n  \n### Requirements  \n **Header:** atlenc.h  \n\n## <a name=\"qpdecodegetrequiredlength\"></a> QPDecodeGetRequiredLength\nCall this function to get the size in bytes of a buffer that could contain data decoded from quoted-printable-encoded string of the specified length.  \n  \n### Syntax  \n  \n```  \ninline int QPDecodeGetRequiredLength(int nSrcLen) throw();  \n```  \n  \n### Parameters  \n `nSrcLen`  \n The number of characters in the encoded string.  \n  \n### Return Value  \n The number of bytes required for a buffer that could hold a decoded string of `nSrcLen` characters.  \n  \n### Remarks  \n The quoted-printable encoding scheme is described in RFC 2045 ([http://www.ietf.org/rfc/rfc2045.txt](http://www.ietf.org/rfc/rfc2045.txt)).  \n  \n### Requirements  \n **Header:** atlenc.h  \n\n## <a name=\"qpencode\"></a> QPEncode\nCall this function to encode some data in quoted-printable format.  \n  \n### Syntax  \n  \n```  \ninline BOOL QPEncode(  \n   BYTE* pbSrcData,  \n   int nSrcLen,  \n   LPSTR szDest,  \n   int* pnDestLen,  \n   DWORD dwFlags = 0) throw ();  \n```  \n  \n### Parameters  \n `pbSrcData`  \n The buffer containing the data to be encoded.  \n  \n `nSrcLen`  \n The length in bytes of the data to be encoded.  \n  \n `szDest`  \n Caller-allocated buffer to receive the encoded data.  \n  \n `pnDestLen`  \n Pointer to a variable that contains the length in characters of `szDest`. If the function succeeds, the variable receives the number of characters written to the buffer. If the function fails, the variable receives the required length in characters of the buffer.  \n  \n `dwFlags`  \n Flags describing how the conversion is to be performed. See [ATLSMTP_QPENCODE Flags](http://msdn.microsoft.com/library/6b15a3ab-8e57-49e4-8104-09b26ebb96c4).  \n  \n### Return Value  \n Returns **TRUE** on success, **FALSE** on failure.  \n  \n### Remarks  \n The quoted-printable encoding scheme is described in RFC 2045 ([http://www.ietf.org/rfc/rfc2045.txt](http://www.ietf.org/rfc/rfc2045.txt)).  \n  \n### Requirements  \n **Header:** atlenc.h \n\n## <a name=\"qpencodegetrequiredlength\"></a> QPEncodeGetRequiredLength\nCall this function to get the size in characters of a buffer that could contain a string encoded from data of the specified size.  \n  \n### Syntax  \n  \n```  \ninline int QPEncodeGetRequiredLength(int nSrcLen) throw ();  \n```  \n  \n### Parameters  \n `nSrcLen`  \n The number of bytes of data to be encoded.  \n  \n### Return Value  \n The number of characters required for a buffer that could hold encoded data of `nSrcLen` bytes.  \n  \n### Remarks  \n The quoted-printable encoding scheme is described in RFC 2045 ([http://www.ietf.org/rfc/rfc2045.txt](http://www.ietf.org/rfc/rfc2045.txt)).  \n  \n### Requirements  \n **Header:** atlenc.h \n\n## <a name=\"uudecode\"></a> UUDecode\nDecodes a string of data that has been uuencoded such as by a previous call to [UUEncode](#uuencode).  \n  \n### Syntax  \n  \n```  \ninline BOOL UUDecode(  \n   BYTE* pbSrcData,  \n   int nSrcLen,  \n   BYTE* pbDest,  \n   int* pnDestLen) throw ();  \n```  \n  \n### Parameters  \n `pbSrcData`  \n The string containing the data to be decoded.  \n  \n `nSrcLen`  \n The length in bytes of `pbSrcData`.  \n  \n `pbDest`  \n Caller-allocated buffer to receive the decoded data.  \n  \n `pnDestLen`  \n Pointer to a variable that contains the length in bytes of `pbDest`. If the function succeeds, the variable receives the number of bytes written to the buffer. If the function fails, the variable receives the required length in bytes of the buffer.  \n  \n### Return Value  \n Returns **TRUE** on success, **FALSE** on failure.  \n  \n### Remarks  \n This uuencoding implementation follows the POSIX P1003.2b/D11 specification.  \n  \n### Requirements  \n **Header:** atlenc.h  \n\n## <a name=\"uudecodegetrequiredlength\"></a> UUDecodeGetRequiredLength\nCall this function to get the size in bytes of a buffer that could contain data decoded from a uuencoded string of the specified length.  \n  \n### Syntax  \n  \n```  \ninline int UUDecodeGetRequiredLength(int nSrcLen) throw ();  \n```  \n  \n### Parameters  \n `nSrcLen`  \n The number of characters in the encoded string.  \n  \n### Return Value  \n The number of bytes required for a buffer that could hold a decoded string of `nSrcLen` characters.  \n  \n### Remarks  \n This uuencoding implementation follows the POSIX P1003.2b/D11 specification.  \n  \n### Requirements  \n **Header:** atlenc.h  \n  \n\n## <a name=\"uuencode\"></a> UUEncode\nCall this function to uuencode some data.  \n  \n### Syntax  \n  \n```  \ninline BOOL UUEncode(  \n   const BYTE* pbSrcData,  \n   int nSrcLen,  \n   LPSTR szDest,  \n   int* pnDestLen,  \n   LPCTSTR lpszFile = _T(\"file\"),  \n   DWORD dwFlags = 0) throw ();  \n```  \n  \n### Parameters  \n `pbSrcData`  \n The buffer containing the data to be encoded.  \n  \n `nSrcLen`  \n The length in bytes of the data to be encoded.  \n  \n `szDest`  \n Caller-allocated buffer to receive the encoded data.  \n  \n `pnDestLen`  \n Pointer to a variable that contains the length in characters of `szDest`. If the function succeeds, the variable receives the number of characters written to the buffer. If the function fails, the variable receives the required length in characters of the buffer.  \n  \n *lpszFile*  \n The file to be added to the header when ATLSMTP_UUENCODE_HEADER is specified in `dwFlags`.  \n  \n `dwFlags`  \n Flags controlling the behavior of this function. See [ATLSMTP_UUENCODE Flags](http://msdn.microsoft.com/library/ecb79b81-b764-4a48-a05c-a9dee6e7bbce).  \n  \n### Return Value  \n Returns **TRUE** on success, **FALSE** on failure.  \n  \n### Remarks  \n This uuencoding implementation follows the POSIX P1003.2b/D11 specification.  \n  \n### Requirements  \n **Header:** atlenc.h  \n\n## <a name=\"uuencodegetrequiredlength\"></a> UUEncodeGetRequiredLength\nCall this function to get the size in characters of a buffer that could contain a string encoded from data of the specified size.  \n  \n### Syntax  \n  \n```  \ninline int UUEncodeGetRequiredLength(int nSrcLen) throw ();  \n```  \n  \n### Parameters  \n `nSrcLen`  \n The number of bytes of data to be encoded.  \n  \n### Return Value  \n The number of characters required for a buffer that could hold encoded data of `nSrcLen` bytes.  \n  \n### Remarks  \n This uuencoding implementation follows the POSIX P1003.2b/D11 specification.  \n  \n### Requirements  \n **Header:** atlenc.h  \n\n### See Also  \n [Concepts](../../atl/active-template-library-atl-concepts.md)   \n [ATL COM Desktop Components](../../atl/atl-com-desktop-components.md)   "}