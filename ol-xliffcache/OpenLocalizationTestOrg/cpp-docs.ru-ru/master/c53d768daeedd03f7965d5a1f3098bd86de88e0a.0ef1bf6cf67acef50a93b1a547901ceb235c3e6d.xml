{"nodes":[{"pos":[12,47],"content":"CComCurrency Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CComCurrency Class | Microsoft Docs","pos":[0,35]}]},{"pos":[657,675],"content":"CComCurrency Class","linkify":"CComCurrency Class","nodes":[{"content":"CComCurrency Class","pos":[0,18]}]},{"pos":[676,761],"content":"<ph id=\"ph1\">`CComCurrency`</ph> has methods and operators for creating and managing a CURRENCY object.","source":"`CComCurrency` has methods and operators for creating and managing a CURRENCY object."},{"pos":[770,776],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[817,824],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[834,853],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[860,864]},{"content":"Description","pos":[865,876]},{"pos":[914,971],"content":"<bpt id=\"p1\">[</bpt>CComCurrency::CComCurrency<ept id=\"p1\">](#ccomcurrency__ccomcurrency)</ept>","source":"[CComCurrency::CComCurrency](#ccomcurrency__ccomcurrency)"},{"pos":[972,1016],"content":"The constructor for a <ph id=\"ph1\">`CComCurrency`</ph> object.","source":"The constructor for a `CComCurrency` object."},{"pos":[1027,1041],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1048,1052]},{"content":"Description","pos":[1053,1064]},{"pos":[1102,1163],"content":"<bpt id=\"p1\">[</bpt>CComCurrency::GetCurrencyPtr<ept id=\"p1\">](#ccomcurrency__getcurrencyptr)</ept>","source":"[CComCurrency::GetCurrencyPtr](#ccomcurrency__getcurrencyptr)"},{"pos":[1164,1215],"content":"Returns the address of an <ph id=\"ph1\">`m_currency`</ph> data member.","source":"Returns the address of an `m_currency` data member."},{"pos":[1220,1275],"content":"<bpt id=\"p1\">[</bpt>CComCurrency::GetFraction<ept id=\"p1\">](#ccomcurrency__getfraction)</ept>","source":"[CComCurrency::GetFraction](#ccomcurrency__getfraction)"},{"pos":[1276,1355],"content":"Call this method to return the fractional component of a <ph id=\"ph1\">`CComCurrency`</ph> object.","source":"Call this method to return the fractional component of a `CComCurrency` object."},{"pos":[1360,1413],"content":"<bpt id=\"p1\">[</bpt>CComCurrency::GetInteger<ept id=\"p1\">](#ccomcurrency__getinteger)</ept>","source":"[CComCurrency::GetInteger](#ccomcurrency__getinteger)"},{"pos":[1414,1490],"content":"Call this method to return the integer component of a <ph id=\"ph1\">`CComCurrency`</ph> object.","source":"Call this method to return the integer component of a `CComCurrency` object."},{"pos":[1495,1538],"content":"<bpt id=\"p1\">[</bpt>CComCurrency::Round<ept id=\"p1\">](#ccomcurrency__round)</ept>","source":"[CComCurrency::Round](#ccomcurrency__round)"},{"pos":[1539,1618],"content":"Call this method to round a <ph id=\"ph1\">`CComCurrency`</ph> object to the nearest integer value.","source":"Call this method to round a `CComCurrency` object to the nearest integer value."},{"pos":[1623,1678],"content":"<bpt id=\"p1\">[</bpt>CComCurrency::SetFraction<ept id=\"p1\">](#ccomcurrency__setfraction)</ept>","source":"[CComCurrency::SetFraction](#ccomcurrency__setfraction)"},{"pos":[1679,1755],"content":"Call this method to set the fractional component of a <ph id=\"ph1\">`CComCurrency`</ph> object.","source":"Call this method to set the fractional component of a `CComCurrency` object."},{"pos":[1760,1813],"content":"<bpt id=\"p1\">[</bpt>CComCurrency::SetInteger<ept id=\"p1\">](#ccomcurrency__setinteger)</ept>","source":"[CComCurrency::SetInteger](#ccomcurrency__setinteger)"},{"pos":[1814,1887],"content":"Call this method to set the integer component of a <ph id=\"ph1\">`CComCurrency`</ph> object.","source":"Call this method to set the integer component of a `CComCurrency` object."},{"pos":[1898,1914],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[1921,1925]},{"content":"Description","pos":[1926,1937]},{"pos":[1975,2028],"content":"<bpt id=\"p1\">[</bpt>CComCurrency::operator -<ept id=\"p1\">](#ccomcurrency__operator_-)</ept>","source":"[CComCurrency::operator -](#ccomcurrency__operator_-)"},{"pos":[2029,2101],"content":"This operator is used to perform subtraction on a <ph id=\"ph1\">`CComCurrency`</ph> object.","source":"This operator is used to perform subtraction on a `CComCurrency` object."},{"pos":[2106,2162],"content":"<bpt id=\"p1\">[</bpt>CComCurrency::operator !=<ept id=\"p1\">](#ccomcurrency__operator_neq)</ept>","source":"[CComCurrency::operator !=](#ccomcurrency__operator_neq)"},{"pos":[2163,2214],"content":"Compares two <ph id=\"ph1\">`CComCurrency`</ph> objects for inequality.","source":"Compares two `CComCurrency` objects for inequality."},{"pos":[2219,2275],"content":"<bpt id=\"p1\">[</bpt>CComCurrency::operator *<ept id=\"p1\">](#ccomcurrency__operator_star)</ept>","source":"[CComCurrency::operator *](#ccomcurrency__operator_star)"},{"pos":[2276,2351],"content":"This operator is used to perform multiplication on a <ph id=\"ph1\">`CComCurrency`</ph> object.","source":"This operator is used to perform multiplication on a `CComCurrency` object."},{"pos":[2356,2416],"content":"<bpt id=\"p1\">[</bpt>CComCurrency::operator *=<ept id=\"p1\">](#ccomcurrency__operator_star_eq)</ept>","source":"[CComCurrency::operator *=](#ccomcurrency__operator_star_eq)"},{"pos":[2417,2517],"content":"This operator is used to perform multiplication on a <ph id=\"ph1\">`CComCurrency`</ph> object and assign it the result.","source":"This operator is used to perform multiplication on a `CComCurrency` object and assign it the result."},{"pos":[2522,2577],"content":"<bpt id=\"p1\">[</bpt>CComCurrency::operator /<ept id=\"p1\">](#ccomcurrency__operator_div)</ept>","source":"[CComCurrency::operator /](#ccomcurrency__operator_div)"},{"pos":[2578,2647],"content":"This operator is used to perform division on a <ph id=\"ph1\">`CComCurrency`</ph> object.","source":"This operator is used to perform division on a `CComCurrency` object."},{"pos":[2652,2711],"content":"<bpt id=\"p1\">[</bpt>CComCurrency::operator /=<ept id=\"p1\">](#ccomcurrency__operator_div_eq)</ept>","source":"[CComCurrency::operator /=](#ccomcurrency__operator_div_eq)"},{"pos":[2712,2806],"content":"This operator is used to perform division on a <ph id=\"ph1\">`CComCurrency`</ph> object and assign it the result.","source":"This operator is used to perform division on a `CComCurrency` object and assign it the result."},{"pos":[2811,2866],"content":"<bpt id=\"p1\">[</bpt>CComCurrency::operator +<ept id=\"p1\">](#ccomcurrency__operator_add)</ept>","source":"[CComCurrency::operator +](#ccomcurrency__operator_add)"},{"pos":[2867,2936],"content":"This operator is used to perform addition on a <ph id=\"ph1\">`CComCurrency`</ph> object.","source":"This operator is used to perform addition on a `CComCurrency` object."},{"pos":[2941,3000],"content":"<bpt id=\"p1\">[</bpt>CComCurrency::operator +=<ept id=\"p1\">](#ccomcurrency__operator_add_eq)</ept>","source":"[CComCurrency::operator +=](#ccomcurrency__operator_add_eq)"},{"pos":[3001,3114],"content":"This operator is used to perform addition on a <ph id=\"ph1\">`CComCurrency`</ph> object and assign the result to the current object.","source":"This operator is used to perform addition on a `CComCurrency` object and assign the result to the current object."},{"pos":[3119,3173],"content":"<bpt id=\"p1\">[</bpt>CComCurrency::operator &lt;<ept id=\"p1\">](#ccomcurrency__operator_lt)</ept>","source":"[CComCurrency::operator <](#ccomcurrency__operator_lt)"},{"pos":[3174,3248],"content":"This operator compares two <ph id=\"ph1\">`CComCurrency`</ph> objects to determine the lesser.","source":"This operator compares two `CComCurrency` objects to determine the lesser."},{"pos":[3253,3311],"content":"<bpt id=\"p1\">[</bpt>CComCurrency::operator &lt;=<ept id=\"p1\">](#ccomcurrency__operator_lt_eq)</ept>","source":"[CComCurrency::operator <=](#ccomcurrency__operator_lt_eq)"},{"pos":[3312,3398],"content":"This operator compares two <ph id=\"ph1\">`CComCurrency`</ph> objects to determine equality or the lesser.","source":"This operator compares two `CComCurrency` objects to determine equality or the lesser."},{"pos":[3403,3457],"content":"<bpt id=\"p1\">[</bpt>CComCurrency::operator =<ept id=\"p1\">](#ccomcurrency__operator_eq)</ept>","source":"[CComCurrency::operator =](#ccomcurrency__operator_eq)"},{"pos":[3458,3521],"content":"This operator assigns the <ph id=\"ph1\">`CComCurrency`</ph> object to a new value.","source":"This operator assigns the `CComCurrency` object to a new value."},{"pos":[3526,3583],"content":"<bpt id=\"p1\">[</bpt>CComCurrency::operator -=<ept id=\"p1\">](#ccomcurrency__operator_-_eq)</ept>","source":"[CComCurrency::operator -=](#ccomcurrency__operator_-_eq)"},{"pos":[3584,3681],"content":"This operator is used to perform subtraction on a <ph id=\"ph1\">`CComCurrency`</ph> object and assign it the result.","source":"This operator is used to perform subtraction on a `CComCurrency` object and assign it the result."},{"pos":[3686,3744],"content":"<bpt id=\"p1\">[</bpt>CComCurrency::operator ==<ept id=\"p1\">](#ccomcurrency__operator_eq_eq)</ept>","source":"[CComCurrency::operator ==](#ccomcurrency__operator_eq_eq)"},{"pos":[3745,3808],"content":"This operator compares two <ph id=\"ph1\">`CComCurrency`</ph> objects for equality.","source":"This operator compares two `CComCurrency` objects for equality."},{"pos":[3813,3867],"content":"<bpt id=\"p1\">[</bpt>CComCurrency::operator &gt;<ept id=\"p1\">](#ccomcurrency__operator_gt)</ept>","source":"[CComCurrency::operator >](#ccomcurrency__operator_gt)"},{"pos":[3868,3942],"content":"This operator compares two <ph id=\"ph1\">`CComCurrency`</ph> objects to determine the larger.","source":"This operator compares two `CComCurrency` objects to determine the larger."},{"pos":[3947,4005],"content":"<bpt id=\"p1\">[</bpt>CComCurrency::operator &gt;=<ept id=\"p1\">](#ccomcurrency__operator_gt_eq)</ept>","source":"[CComCurrency::operator >=](#ccomcurrency__operator_gt_eq)"},{"pos":[4006,4092],"content":"This operator compares two <ph id=\"ph1\">`CComCurrency`</ph> objects to determine equality or the larger.","source":"This operator compares two `CComCurrency` objects to determine equality or the larger."},{"pos":[4097,4164],"content":"<bpt id=\"p1\">[</bpt>CComCurrency::operator CURRENCY<ept id=\"p1\">](#ccomcurrency__operator_currency)</ept>","source":"[CComCurrency::operator CURRENCY](#ccomcurrency__operator_currency)"},{"pos":[4165,4191],"content":"Casts a <ph id=\"ph1\">`CURRENCY`</ph> object.","source":"Casts a `CURRENCY` object."},{"pos":[4202,4221],"content":"Public Data Members","linkify":"Public Data Members","nodes":[{"content":"Public Data Members","pos":[0,19]}]},{"content":"Name","pos":[4228,4232]},{"content":"Description","pos":[4233,4244]},{"pos":[4282,4335],"content":"<bpt id=\"p1\">[</bpt>CComCurrency::m_currency<ept id=\"p1\">](#ccomcurrency__m_currency)</ept>","source":"[CComCurrency::m_currency](#ccomcurrency__m_currency)"},{"pos":[4336,4391],"content":"The <ph id=\"ph1\">`CURRENCY`</ph> variable created by your class instance.","source":"The `CURRENCY` variable created by your class instance."},{"pos":[4401,4408],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`CComCurrency`</ph> is a wrapper for the <bpt id=\"p1\">**</bpt>CURRENCY<ept id=\"p1\">**</ept> data type.","pos":[4412,4471],"source":"`CComCurrency` is a wrapper for the **CURRENCY** data type."},{"content":"<bpt id=\"p1\">**</bpt>CURRENCY<ept id=\"p1\">**</ept> is implemented as an 8-byte two's-complement integer value scaled by 10,000.","pos":[4472,4561],"source":"**CURRENCY** is implemented as an 8-byte two's-complement integer value scaled by 10,000."},{"content":"This gives a fixed-point number with 15 digits to the left of the decimal point and 4 digits to the right.","pos":[4562,4668]},{"content":"The <bpt id=\"p1\">**</bpt>CURRENCY<ept id=\"p1\">**</ept> data type is extremely useful for calculations involving money, or for any fixed-point calculations where accuracy is important.","pos":[4669,4814],"source":" The **CURRENCY** data type is extremely useful for calculations involving money, or for any fixed-point calculations where accuracy is important."},{"content":"The <bpt id=\"p1\">**</bpt>CComCurrency<ept id=\"p1\">**</ept> wrapper implements arithmetic, assignment, and comparison operations for this fixed-point type.","pos":[4821,4937],"source":"The **CComCurrency** wrapper implements arithmetic, assignment, and comparison operations for this fixed-point type."},{"content":"The supported applications have been selected to control the rounding errors that can occur during fixed-point calculations.","pos":[4938,5062]},{"content":"The <ph id=\"ph1\">`CComCurrency`</ph> object provides access to the numbers on either side of the decimal point in the form of two components: an integer component which stores the value to the left of the decimal point, and a fractional component which stores the value to the right of the decimal point.","pos":[5069,5355],"source":"The `CComCurrency` object provides access to the numbers on either side of the decimal point in the form of two components: an integer component which stores the value to the left of the decimal point, and a fractional component which stores the value to the right of the decimal point."},{"content":"The fractional component is stored internally as an integer value between -9999 ( <bpt id=\"p1\">**</bpt>CY_MIN_FRACTION<ept id=\"p1\">**</ept>) and +9999 ( <bpt id=\"p2\">**</bpt>CY_MAX_FRACTION<ept id=\"p2\">**</ept>).","pos":[5356,5492],"source":" The fractional component is stored internally as an integer value between -9999 ( **CY_MIN_FRACTION**) and +9999 ( **CY_MAX_FRACTION**)."},{"content":"The method <bpt id=\"p1\">[</bpt>CComCurrency::GetFraction<ept id=\"p1\">](#ccomcurrency__getfraction)</ept> returns a value scaled by a factor of 10000 ( <bpt id=\"p2\">**</bpt>CY_SCALE<ept id=\"p2\">**</ept>).","pos":[5493,5620],"source":" The method [CComCurrency::GetFraction](#ccomcurrency__getfraction) returns a value scaled by a factor of 10000 ( **CY_SCALE**)."},{"content":"When specifying the integer and fractional components of a <bpt id=\"p1\">**</bpt>CComCurrency<ept id=\"p1\">**</ept> object, remember that the fractional component is a number in the range 0 to 9999.","pos":[5627,5785],"source":"When specifying the integer and fractional components of a **CComCurrency** object, remember that the fractional component is a number in the range 0 to 9999."},{"content":"This is important when dealing with a currency such as the US dollar that expresses amounts using only two significant digits after the decimal point.","pos":[5786,5936]},{"content":"Even though the last two digits are not displayed, they must be taken into account.","pos":[5937,6020]},{"content":"Value","pos":[6027,6032]},{"content":"Possible CComCurrency assignments","pos":[6033,6066]},{"content":"$10.50","pos":[6127,6133]},{"pos":[6134,6180],"content":"CComCurrency(10,5000) <bpt id=\"p1\">*</bpt>or<ept id=\"p1\">*</ept> CComCurrency(10.50)","source":"CComCurrency(10,5000) *or* CComCurrency(10.50)"},{"content":"$10.05","pos":[6185,6191]},{"pos":[6192,6237],"content":"CComCurrency(10,500) <bpt id=\"p1\">*</bpt>or<ept id=\"p1\">*</ept> CComCurrency(10.05)","source":"CComCurrency(10,500) *or* CComCurrency(10.05)"},{"pos":[6245,6339],"content":"The values <bpt id=\"p1\">**</bpt>CY_MIN_FRACTION<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>CY_MAX_FRACTION<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>CY_SCALE<ept id=\"p3\">**</ept> are defined in atlcur.h.","source":"The values **CY_MIN_FRACTION**, **CY_MAX_FRACTION**, and **CY_SCALE** are defined in atlcur.h."},{"pos":[6348,6360],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[6364,6384],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlcur.h","source":"**Header:** atlcur.h"},{"pos":[6394,6463],"content":"<bpt id=\"p1\">&lt;a name=\"ccomcurrency__ccomcurrency\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComCurrency::CComCurrency","linkify":"<a name=\"ccomcurrency__ccomcurrency\"></a>  CComCurrency::CComCurrency","source":"<a name=\"ccomcurrency__ccomcurrency\"></a>  CComCurrency::CComCurrency"},{"content":"The constructor.","pos":[6467,6483]},{"pos":[7194,7204],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An existing <ph id=\"ph1\">`CComCurrency`</ph> object.","pos":[7220,7254],"source":" An existing `CComCurrency` object."},{"content":"A variable of type <bpt id=\"p1\">**</bpt>CURRENCY<ept id=\"p1\">**</ept>.","pos":[7272,7304],"source":" A variable of type **CURRENCY**."},{"content":"<ph id=\"ph1\">`bSrc`</ph>, <ph id=\"ph2\">`dSrc`</ph>, <ph id=\"ph3\">`fSrc`</ph>, <ph id=\"ph4\">`lSrc`</ph>, <bpt id=\"p1\">*</bpt>sSrc<ept id=\"p1\">*</ept>, <bpt id=\"p2\">*</bpt>ulSrc, usSrc<ept id=\"p2\">*</ept>","pos":[7311,7365],"source":"`bSrc`, `dSrc`, `fSrc`, `lSrc`, *sSrc*, *ulSrc, usSrc*"},{"content":"The initial value given to the member variable <ph id=\"ph1\">`m_currency`</ph>.","pos":[7369,7429],"source":" The initial value given to the member variable `m_currency`."},{"content":"A character containing the initial value given to the member variable <ph id=\"ph1\">`m_currency`</ph>.","pos":[7446,7529],"source":" A character containing the initial value given to the member variable `m_currency`."},{"content":"<ph id=\"ph1\">`nInteger`</ph>, <bpt id=\"p1\">*</bpt>nFraction<ept id=\"p1\">*</ept>","pos":[7536,7559],"source":"`nInteger`, *nFraction*"},{"content":"The integer and fractional components of the initial monetary value.","pos":[7563,7631]},{"content":"See the <bpt id=\"p1\">[</bpt>CComCurrency<ept id=\"p1\">](../../atl/reference/ccomcurrency-class.md)</ept> overview for more information.","pos":[7632,7728],"source":" See the [CComCurrency](../../atl/reference/ccomcurrency-class.md) overview for more information."},{"content":"An <ph id=\"ph1\">`IDispatch`</ph> pointer.","pos":[7749,7772],"source":" An `IDispatch` pointer."},{"content":"<bpt id=\"p1\">*</bpt>varSrc<ept id=\"p1\">*</ept>","pos":[7779,7787],"source":"*varSrc*"},{"content":"A variable of type <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept>.","pos":[7791,7822],"source":" A variable of type **VARIANT**."},{"content":"The locale of the current thread is used to perform the conversion.","pos":[7823,7890]},{"content":"A Unicode or ANSI string containing the initial value.","pos":[7908,7962]},{"content":"The locale of the current thread is used to perform the conversion.","pos":[7963,8030]},{"pos":[8040,8047],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The constructor sets the initial value of <bpt id=\"p1\">[</bpt>CComCurrency::m_currency<ept id=\"p1\">](#ccomcurrency__m_currency)</ept>, and accepts a wide range of data types, including integers, strings, floating-point numbers, <bpt id=\"p2\">**</bpt>CURRENCY<ept id=\"p2\">**</ept> variables, and other <ph id=\"ph1\">`CComCurrency`</ph> objects.","pos":[8051,8298],"source":"The constructor sets the initial value of [CComCurrency::m_currency](#ccomcurrency__m_currency), and accepts a wide range of data types, including integers, strings, floating-point numbers, **CURRENCY** variables, and other `CComCurrency` objects."},{"content":"If no value is provided, <ph id=\"ph1\">`m_currency`</ph> is set to 0.","pos":[8299,8349],"source":" If no value is provided, `m_currency` is set to 0."},{"pos":[8356,8529],"content":"In the event of an error, such as an overflow, the constructors lacking an empty exception specification ( <bpt id=\"p1\">**</bpt>throw()<ept id=\"p1\">**</ept>) call <ph id=\"ph1\">`AtlThrow`</ph> with an HRESULT describing the error.","source":"In the event of an error, such as an overflow, the constructors lacking an empty exception specification ( **throw()**) call `AtlThrow` with an HRESULT describing the error."},{"pos":[8536,8707],"content":"When using floating-point or double values to assign a value, note that <bpt id=\"p1\">**</bpt>CComCurrency(10.50)<ept id=\"p1\">**</ept> is equivalent to <bpt id=\"p2\">**</bpt>CComCurrency(10,5000)<ept id=\"p2\">**</ept> and not <bpt id=\"p3\">**</bpt>CComCurrency(10,50)<ept id=\"p3\">**</ept>.","source":"When using floating-point or double values to assign a value, note that **CComCurrency(10.50)** is equivalent to **CComCurrency(10,5000)** and not **CComCurrency(10,50)**."},{"pos":[8717,8790],"content":"<bpt id=\"p1\">&lt;a name=\"ccomcurrency__getcurrencyptr\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComCurrency::GetCurrencyPtr","linkify":"<a name=\"ccomcurrency__getcurrencyptr\"></a>  CComCurrency::GetCurrencyPtr","source":"<a name=\"ccomcurrency__getcurrencyptr\"></a>  CComCurrency::GetCurrencyPtr"},{"pos":[8794,8845],"content":"Returns the address of an <ph id=\"ph1\">`m_currency`</ph> data member.","source":"Returns the address of an `m_currency` data member."},{"pos":[8904,8916],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8920,8970],"content":"Returns the address of an <ph id=\"ph1\">`m_currency`</ph> data member","source":"Returns the address of an `m_currency` data member"},{"pos":[8980,9047],"content":"<bpt id=\"p1\">&lt;a name=\"ccomcurrency__getfraction\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComCurrency::GetFraction","linkify":"<a name=\"ccomcurrency__getfraction\"></a>  CComCurrency::GetFraction","source":"<a name=\"ccomcurrency__getfraction\"></a>  CComCurrency::GetFraction"},{"pos":[9051,9132],"content":"Call this method to return the fractional component of the <ph id=\"ph1\">`CComCurrency`</ph> object.","source":"Call this method to return the fractional component of the `CComCurrency` object."},{"pos":[9182,9194],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[9198,9263],"content":"Returns the fractional component of the <ph id=\"ph1\">`m_currency`</ph> data member.","source":"Returns the fractional component of the `m_currency` data member."},{"pos":[9273,9280],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The fractional component is a 4-digit integer value between -9999 ( <bpt id=\"p1\">**</bpt>CY_MIN_FRACTION<ept id=\"p1\">**</ept>) and +9999 ( <bpt id=\"p2\">**</bpt>CY_MAX_FRACTION<ept id=\"p2\">**</ept>).","pos":[9284,9406],"source":"The fractional component is a 4-digit integer value between -9999 ( **CY_MIN_FRACTION**) and +9999 ( **CY_MAX_FRACTION**)."},{"content":"<ph id=\"ph1\">`GetFraction`</ph> returns this value scaled by 10000 ( <bpt id=\"p1\">**</bpt>CY_SCALE<ept id=\"p1\">**</ept>).","pos":[9407,9472],"source":"`GetFraction` returns this value scaled by 10000 ( **CY_SCALE**)."},{"content":"The values of <bpt id=\"p1\">**</bpt>CY_MIN_FRACTION<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>CY_MAX_FRACTION<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>CY_SCALE<ept id=\"p3\">**</ept> are defined in atlcur.h.","pos":[9473,9570],"source":" The values of **CY_MIN_FRACTION**, **CY_MAX_FRACTION**, and **CY_SCALE** are defined in atlcur.h."},{"pos":[9580,9587],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9591,9676],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#50<ept id=\"p2\">](../../atl/codesnippet/cpp/ccomcurrency-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#50](../../atl/codesnippet/cpp/ccomcurrency-class_1.cpp)]"},{"pos":[9686,9751],"content":"<bpt id=\"p1\">&lt;a name=\"ccomcurrency__getinteger\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComCurrency::GetInteger","linkify":"<a name=\"ccomcurrency__getinteger\"></a>  CComCurrency::GetInteger","source":"<a name=\"ccomcurrency__getinteger\"></a>  CComCurrency::GetInteger"},{"pos":[9755,9828],"content":"Call this method to get the integer component of a <ph id=\"ph1\">`CComCurrency`</ph> object.","source":"Call this method to get the integer component of a `CComCurrency` object."},{"pos":[9880,9892],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[9896,9958],"content":"Returns the integer component of the <ph id=\"ph1\">`m_currency`</ph> data member.","source":"Returns the integer component of the `m_currency` data member."},{"pos":[9968,9975],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9979,10064],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#51<ept id=\"p2\">](../../atl/codesnippet/cpp/ccomcurrency-class_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#51](../../atl/codesnippet/cpp/ccomcurrency-class_2.cpp)]"},{"pos":[10074,10139],"content":"<bpt id=\"p1\">&lt;a name=\"ccomcurrency__m_currency\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComCurrency::m_currency","linkify":"<a name=\"ccomcurrency__m_currency\"></a>  CComCurrency::m_currency","source":"<a name=\"ccomcurrency__m_currency\"></a>  CComCurrency::m_currency"},{"pos":[10143,10172],"content":"The <bpt id=\"p1\">**</bpt>CURRENCY<ept id=\"p1\">**</ept> data member.","source":"The **CURRENCY** data member."},{"pos":[10216,10223],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This member holds the currency accessed and manipulated by the methods of this class.","pos":[10227,10312]},{"pos":[10322,10387],"content":"<bpt id=\"p1\">&lt;a name=\"ccomcurrency__operator_-\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComCurrency::operator -","linkify":"<a name=\"ccomcurrency__operator_-\"></a>  CComCurrency::operator -","source":"<a name=\"ccomcurrency__operator_-\"></a>  CComCurrency::operator -"},{"pos":[10391,10463],"content":"This operator is used to perform subtraction on a <ph id=\"ph1\">`CComCurrency`</ph> object.","source":"This operator is used to perform subtraction on a `CComCurrency` object."},{"pos":[10578,10588],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <ph id=\"ph1\">`CComCurrency`</ph> object.","pos":[10601,10625],"source":" A `CComCurrency` object."},{"pos":[10635,10647],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a <ph id=\"ph1\">`CComCurrency`</ph> object representing the result of the subtraction.","pos":[10651,10726],"source":"Returns a `CComCurrency` object representing the result of the subtraction."},{"content":"In the event of an error, such as an overflow, this operator calls <ph id=\"ph1\">`AtlThrow`</ph> with an HRESULT describing the error.","pos":[10727,10842],"source":" In the event of an error, such as an overflow, this operator calls `AtlThrow` with an HRESULT describing the error."},{"pos":[10852,10859],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10863,10948],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#55<ept id=\"p2\">](../../atl/codesnippet/cpp/ccomcurrency-class_3.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#55](../../atl/codesnippet/cpp/ccomcurrency-class_3.cpp)]"},{"pos":[10958,11026],"content":"<bpt id=\"p1\">&lt;a name=\"ccomcurrency__operator_neq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComCurrency::operator !=","linkify":"<a name=\"ccomcurrency__operator_neq\"></a>  CComCurrency::operator !=","source":"<a name=\"ccomcurrency__operator_neq\"></a>  CComCurrency::operator !="},{"content":"This operator compares two objects for inequality.","pos":[11030,11080]},{"pos":[11152,11162],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`CComCurrency`</ph> object to be compared.","pos":[11175,11216],"source":" The `CComCurrency` object to be compared."},{"pos":[11226,11238],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[11242,11350],"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the item being compared is not equal to the <ph id=\"ph1\">`CComCurrency`</ph> object; otherwise, <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"Returns **true** if the item being compared is not equal to the `CComCurrency` object; otherwise, **false**."},{"pos":[11360,11367],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11371,11456],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#56<ept id=\"p2\">](../../atl/codesnippet/cpp/ccomcurrency-class_4.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#56](../../atl/codesnippet/cpp/ccomcurrency-class_4.cpp)]"},{"pos":[11466,11534],"content":"<bpt id=\"p1\">&lt;a name=\"ccomcurrency__operator_star\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComCurrency::operator *","linkify":"<a name=\"ccomcurrency__operator_star\"></a>  CComCurrency::operator *","source":"<a name=\"ccomcurrency__operator_star\"></a>  CComCurrency::operator *"},{"pos":[11538,11613],"content":"This operator is used to perform multiplication on a <ph id=\"ph1\">`CComCurrency`</ph> object.","source":"This operator is used to perform multiplication on a `CComCurrency` object."},{"pos":[11741,11751],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The multiplier.","pos":[11769,11784]},{"content":"The <ph id=\"ph1\">`CComCurrency`</ph> object used as the multiplier.","pos":[11800,11849],"source":" The `CComCurrency` object used as the multiplier."},{"pos":[11859,11871],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a <ph id=\"ph1\">`CComCurrency`</ph> object representing the result of the multiplication.","pos":[11875,11953],"source":"Returns a `CComCurrency` object representing the result of the multiplication."},{"content":"In the event of an error, such as an overflow, this operator calls <ph id=\"ph1\">`AtlThrow`</ph> with an HRESULT describing the error.","pos":[11954,12069],"source":" In the event of an error, such as an overflow, this operator calls `AtlThrow` with an HRESULT describing the error."},{"pos":[12079,12086],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12090,12175],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#57<ept id=\"p2\">](../../atl/codesnippet/cpp/ccomcurrency-class_5.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#57](../../atl/codesnippet/cpp/ccomcurrency-class_5.cpp)]"},{"pos":[12185,12257],"content":"<bpt id=\"p1\">&lt;a name=\"ccomcurrency__operator_star_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComCurrency::operator *=","linkify":"<a name=\"ccomcurrency__operator_star_eq\"></a>  CComCurrency::operator *=","source":"<a name=\"ccomcurrency__operator_star_eq\"></a>  CComCurrency::operator *="},{"pos":[12261,12361],"content":"This operator is used to perform multiplication on a <ph id=\"ph1\">`CComCurrency`</ph> object and assign it the result.","source":"This operator is used to perform multiplication on a `CComCurrency` object and assign it the result."},{"pos":[12491,12501],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The multiplier.","pos":[12519,12534]},{"content":"The <ph id=\"ph1\">`CComCurrency`</ph> object used as the multiplier.","pos":[12550,12599],"source":" The `CComCurrency` object used as the multiplier."},{"pos":[12609,12621],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the updated <ph id=\"ph1\">`CComCurrency`</ph> object.","pos":[12625,12667],"source":"Returns the updated `CComCurrency` object."},{"content":"In the event of an error, such as an overflow, this operator calls <ph id=\"ph1\">`AtlThrow`</ph> with an HRESULT describing the error.","pos":[12668,12783],"source":" In the event of an error, such as an overflow, this operator calls `AtlThrow` with an HRESULT describing the error."},{"pos":[12793,12800],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12804,12889],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#58<ept id=\"p2\">](../../atl/codesnippet/cpp/ccomcurrency-class_6.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#58](../../atl/codesnippet/cpp/ccomcurrency-class_6.cpp)]"},{"pos":[12899,12966],"content":"<bpt id=\"p1\">&lt;a name=\"ccomcurrency__operator_div\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComCurrency::operator /","linkify":"<a name=\"ccomcurrency__operator_div\"></a>  CComCurrency::operator /","source":"<a name=\"ccomcurrency__operator_div\"></a>  CComCurrency::operator /"},{"pos":[12970,13039],"content":"This operator is used to perform division on a <ph id=\"ph1\">`CComCurrency`</ph> object.","source":"This operator is used to perform division on a `CComCurrency` object."},{"pos":[13107,13117],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The divisor.","pos":[13135,13147]},{"pos":[13157,13169],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a <ph id=\"ph1\">`CComCurrency`</ph> object representing the result of the division.","pos":[13173,13245],"source":"Returns a `CComCurrency` object representing the result of the division."},{"content":"If the divisor is 0, an assert failure will occur.","pos":[13246,13296]},{"pos":[13306,13313],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13317,13402],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#59<ept id=\"p2\">](../../atl/codesnippet/cpp/ccomcurrency-class_7.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#59](../../atl/codesnippet/cpp/ccomcurrency-class_7.cpp)]"},{"pos":[13412,13483],"content":"<bpt id=\"p1\">&lt;a name=\"ccomcurrency__operator_div_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComCurrency::operator /=","linkify":"<a name=\"ccomcurrency__operator_div_eq\"></a>  CComCurrency::operator /=","source":"<a name=\"ccomcurrency__operator_div_eq\"></a>  CComCurrency::operator /="},{"pos":[13487,13581],"content":"This operator is used to perform division on a <ph id=\"ph1\">`CComCurrency`</ph> object and assign it the result.","source":"This operator is used to perform division on a `CComCurrency` object and assign it the result."},{"pos":[13652,13662],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The divisor.","pos":[13680,13692]},{"pos":[13702,13714],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the updated <ph id=\"ph1\">`CComCurrency`</ph> object.","pos":[13718,13760],"source":"Returns the updated `CComCurrency` object."},{"content":"If the divisor is 0, an assert failure will occur.","pos":[13761,13811]},{"pos":[13821,13828],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13832,13917],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#60<ept id=\"p2\">](../../atl/codesnippet/cpp/ccomcurrency-class_8.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#60](../../atl/codesnippet/cpp/ccomcurrency-class_8.cpp)]"},{"pos":[13927,13994],"content":"<bpt id=\"p1\">&lt;a name=\"ccomcurrency__operator_add\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComCurrency::operator +","linkify":"<a name=\"ccomcurrency__operator_add\"></a>  CComCurrency::operator +","source":"<a name=\"ccomcurrency__operator_add\"></a>  CComCurrency::operator +"},{"pos":[13998,14067],"content":"This operator is used to perform addition on a <ph id=\"ph1\">`CComCurrency`</ph> object.","source":"This operator is used to perform addition on a `CComCurrency` object."},{"pos":[14145,14155],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`CComCurrency`</ph> object to be added to the original object.","pos":[14168,14229],"source":" The `CComCurrency` object to be added to the original object."},{"pos":[14239,14251],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a <ph id=\"ph1\">`CComCurrency`</ph> object representing the result of the addition.","pos":[14255,14327],"source":"Returns a `CComCurrency` object representing the result of the addition."},{"content":"In the event of an error, such as an overflow, this operator calls <ph id=\"ph1\">`AtlThrow`</ph> with an HRESULT describing the error.","pos":[14328,14443],"source":" In the event of an error, such as an overflow, this operator calls `AtlThrow` with an HRESULT describing the error."},{"pos":[14453,14460],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[14464,14549],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#61<ept id=\"p2\">](../../atl/codesnippet/cpp/ccomcurrency-class_9.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#61](../../atl/codesnippet/cpp/ccomcurrency-class_9.cpp)]"},{"pos":[14559,14630],"content":"<bpt id=\"p1\">&lt;a name=\"ccomcurrency__operator_add_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComCurrency::operator +=","linkify":"<a name=\"ccomcurrency__operator_add_eq\"></a>  CComCurrency::operator +=","source":"<a name=\"ccomcurrency__operator_add_eq\"></a>  CComCurrency::operator +="},{"pos":[14634,14747],"content":"This operator is used to perform addition on a <ph id=\"ph1\">`CComCurrency`</ph> object and assign the result to the current object.","source":"This operator is used to perform addition on a `CComCurrency` object and assign the result to the current object."},{"pos":[14828,14838],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`CComCurrency`</ph> object.","pos":[14851,14877],"source":" The `CComCurrency` object."},{"pos":[14887,14899],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the updated <ph id=\"ph1\">`CComCurrency`</ph> object.","pos":[14903,14945],"source":"Returns the updated `CComCurrency` object."},{"content":"In the event of an error, such as an overflow, this operator calls <ph id=\"ph1\">`AtlThrow`</ph> with an HRESULT describing the error.","pos":[14946,15061],"source":" In the event of an error, such as an overflow, this operator calls `AtlThrow` with an HRESULT describing the error."},{"pos":[15071,15078],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[15082,15168],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#62<ept id=\"p2\">](../../atl/codesnippet/cpp/ccomcurrency-class_10.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#62](../../atl/codesnippet/cpp/ccomcurrency-class_10.cpp)]"},{"pos":[15178,15247],"content":"<bpt id=\"p1\">&lt;a name=\"ccomcurrency__operator_lt\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComCurrency::operator <ph id=\"ph1\">&amp;lt;</ph>","linkify":"<a name=\"ccomcurrency__operator_lt\"></a>  CComCurrency::operator &lt;","source":"<a name=\"ccomcurrency__operator_lt\"></a>  CComCurrency::operator &lt;"},{"pos":[15251,15325],"content":"This operator compares two <ph id=\"ph1\">`CComCurrency`</ph> objects to determine the lesser.","source":"This operator compares two `CComCurrency` objects to determine the lesser."},{"pos":[15395,15405],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <ph id=\"ph1\">`CComCurrency`</ph> object.","pos":[15418,15442],"source":" A `CComCurrency` object."},{"pos":[15452,15464],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[15468,15550],"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the first object is less than the second, <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> otherwise.","source":"Returns **true** if the first object is less than the second, **false** otherwise."},{"pos":[15560,15567],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[15571,15657],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#63<ept id=\"p2\">](../../atl/codesnippet/cpp/ccomcurrency-class_11.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#63](../../atl/codesnippet/cpp/ccomcurrency-class_11.cpp)]"},{"pos":[15667,15740],"content":"<bpt id=\"p1\">&lt;a name=\"ccomcurrency__operator_lt_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComCurrency::operator <ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">=</ph>","linkify":"<a name=\"ccomcurrency__operator_lt_eq\"></a>  CComCurrency::operator &lt;=","source":"<a name=\"ccomcurrency__operator_lt_eq\"></a>  CComCurrency::operator &lt;="},{"pos":[15744,15830],"content":"This operator compares two <ph id=\"ph1\">`CComCurrency`</ph> objects to determine equality or the lesser.","source":"This operator compares two `CComCurrency` objects to determine equality or the lesser."},{"pos":[15902,15912],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <ph id=\"ph1\">`CComCurrency`</ph> object.","pos":[15925,15949],"source":" A `CComCurrency` object."},{"pos":[15959,15971],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[15975,16069],"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the first object is less than or equal to the second, <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> otherwise.","source":"Returns **true** if the first object is less than or equal to the second, **false** otherwise."},{"pos":[16079,16086],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[16090,16176],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#64<ept id=\"p2\">](../../atl/codesnippet/cpp/ccomcurrency-class_12.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#64](../../atl/codesnippet/cpp/ccomcurrency-class_12.cpp)]"},{"pos":[16186,16252],"content":"<bpt id=\"p1\">&lt;a name=\"ccomcurrency__operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComCurrency::operator =","linkify":"<a name=\"ccomcurrency__operator_eq\"></a>  CComCurrency::operator =","source":"<a name=\"ccomcurrency__operator_eq\"></a>  CComCurrency::operator ="},{"pos":[16256,16319],"content":"This operator assigns the <ph id=\"ph1\">`CComCurrency`</ph> object to a new value.","source":"This operator assigns the `CComCurrency` object to a new value."},{"pos":[16875,16885],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <bpt id=\"p1\">**</bpt>CComCurrency<ept id=\"p1\">**</ept> object.","pos":[16901,16927],"source":" A **CComCurrency** object."},{"content":"A variable of type <bpt id=\"p1\">**</bpt>CURRENCY<ept id=\"p1\">**</ept>.","pos":[16945,16977],"source":" A variable of type **CURRENCY**."},{"content":"<bpt id=\"p1\">*</bpt>sSrc<ept id=\"p1\">*</ept>, <ph id=\"ph1\">`fSrc`</ph>, <ph id=\"ph2\">`lSrc`</ph>, <bpt id=\"p2\">*</bpt>bSrc<ept id=\"p2\">*</ept>, <bpt id=\"p3\">*</bpt>usSrc<ept id=\"p3\">*</ept>, <ph id=\"ph3\">`dSrc`</ph>, <bpt id=\"p4\">*</bpt>cSrc<ept id=\"p4\">*</ept>, <bpt id=\"p5\">*</bpt>ulSrc<ept id=\"p5\">*</ept>, <ph id=\"ph4\">`dSrc`</ph>","pos":[16984,17056],"source":"*sSrc*, `fSrc`, `lSrc`, *bSrc*, *usSrc*, `dSrc`, *cSrc*, *ulSrc*, `dSrc`"},{"content":"The numeric value to assign to the <ph id=\"ph1\">`CComCurrency`</ph> object.","pos":[17060,17117],"source":" The numeric value to assign to the `CComCurrency` object."},{"pos":[17127,17139],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the updated <ph id=\"ph1\">`CComCurrency`</ph> object.","pos":[17143,17185],"source":"Returns the updated `CComCurrency` object."},{"content":"In the event of an error, such as an overflow, this operator calls <ph id=\"ph1\">`AtlThrow`</ph> with an HRESULT describing the error.","pos":[17186,17301],"source":" In the event of an error, such as an overflow, this operator calls `AtlThrow` with an HRESULT describing the error."},{"pos":[17311,17318],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[17322,17408],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#65<ept id=\"p2\">](../../atl/codesnippet/cpp/ccomcurrency-class_13.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#65](../../atl/codesnippet/cpp/ccomcurrency-class_13.cpp)]"},{"pos":[17418,17487],"content":"<bpt id=\"p1\">&lt;a name=\"ccomcurrency__operator_-_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComCurrency::operator -=","linkify":"<a name=\"ccomcurrency__operator_-_eq\"></a>  CComCurrency::operator -=","source":"<a name=\"ccomcurrency__operator_-_eq\"></a>  CComCurrency::operator -="},{"pos":[17491,17588],"content":"This operator is used to perform subtraction on a <ph id=\"ph1\">`CComCurrency`</ph> object and assign it the result.","source":"This operator is used to perform subtraction on a `CComCurrency` object and assign it the result."},{"pos":[17669,17679],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <ph id=\"ph1\">`CComCurrency`</ph> object.","pos":[17692,17716],"source":" A `CComCurrency` object."},{"pos":[17726,17738],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the updated <ph id=\"ph1\">`CComCurrency`</ph> object.","pos":[17742,17784],"source":"Returns the updated `CComCurrency` object."},{"content":"In the event of an error, such as an overflow, this operator calls <ph id=\"ph1\">`AtlThrow`</ph> with an HRESULT describing the error.","pos":[17785,17900],"source":" In the event of an error, such as an overflow, this operator calls `AtlThrow` with an HRESULT describing the error."},{"pos":[17910,17917],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[17921,18007],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#66<ept id=\"p2\">](../../atl/codesnippet/cpp/ccomcurrency-class_14.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#66](../../atl/codesnippet/cpp/ccomcurrency-class_14.cpp)]"},{"pos":[18017,18087],"content":"<bpt id=\"p1\">&lt;a name=\"ccomcurrency__operator_eq_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComCurrency::operator ==","linkify":"<a name=\"ccomcurrency__operator_eq_eq\"></a>  CComCurrency::operator ==","source":"<a name=\"ccomcurrency__operator_eq_eq\"></a>  CComCurrency::operator =="},{"pos":[18091,18154],"content":"This operator compares two <ph id=\"ph1\">`CComCurrency`</ph> objects for equality.","source":"This operator compares two `CComCurrency` objects for equality."},{"pos":[18226,18236],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`CComCurrency`</ph> object to compare.","pos":[18249,18286],"source":" The `CComCurrency` object to compare."},{"pos":[18296,18308],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[18312,18482],"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the objects are equal (that is, the <ph id=\"ph1\">`m_currency`</ph> data members, both integer and fractional, in both objects have the same value), <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> otherwise.","source":"Returns **true** if the objects are equal (that is, the `m_currency` data members, both integer and fractional, in both objects have the same value), **false** otherwise."},{"pos":[18492,18499],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[18503,18589],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#67<ept id=\"p2\">](../../atl/codesnippet/cpp/ccomcurrency-class_15.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#67](../../atl/codesnippet/cpp/ccomcurrency-class_15.cpp)]"},{"pos":[18599,18668],"content":"<bpt id=\"p1\">&lt;a name=\"ccomcurrency__operator_gt\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComCurrency::operator <ph id=\"ph1\">&amp;gt;</ph>","linkify":"<a name=\"ccomcurrency__operator_gt\"></a>  CComCurrency::operator &gt;","source":"<a name=\"ccomcurrency__operator_gt\"></a>  CComCurrency::operator &gt;"},{"pos":[18672,18746],"content":"This operator compares two <ph id=\"ph1\">`CComCurrency`</ph> objects to determine the larger.","source":"This operator compares two `CComCurrency` objects to determine the larger."},{"pos":[18816,18826],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <ph id=\"ph1\">`CComCurrency`</ph> object.","pos":[18839,18863],"source":" A `CComCurrency` object."},{"pos":[18873,18885],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[18889,18974],"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the first object is greater than the second, <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> otherwise.","source":"Returns **true** if the first object is greater than the second, **false** otherwise."},{"pos":[18984,18991],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[18995,19081],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#68<ept id=\"p2\">](../../atl/codesnippet/cpp/ccomcurrency-class_16.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#68](../../atl/codesnippet/cpp/ccomcurrency-class_16.cpp)]"},{"pos":[19091,19164],"content":"<bpt id=\"p1\">&lt;a name=\"ccomcurrency__operator_gt_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComCurrency::operator <ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">=</ph>","linkify":"<a name=\"ccomcurrency__operator_gt_eq\"></a>  CComCurrency::operator &gt;=","source":"<a name=\"ccomcurrency__operator_gt_eq\"></a>  CComCurrency::operator &gt;="},{"pos":[19168,19254],"content":"This operator compares two <ph id=\"ph1\">`CComCurrency`</ph> objects to determine equality or the larger.","source":"This operator compares two `CComCurrency` objects to determine equality or the larger."},{"pos":[19326,19336],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <ph id=\"ph1\">`CComCurrency`</ph> object.","pos":[19349,19373],"source":" A `CComCurrency` object."},{"pos":[19383,19395],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19399,19496],"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the first object is greater than or equal to the second, <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> otherwise.","source":"Returns **true** if the first object is greater than or equal to the second, **false** otherwise."},{"pos":[19506,19513],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[19517,19603],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#69<ept id=\"p2\">](../../atl/codesnippet/cpp/ccomcurrency-class_17.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#69](../../atl/codesnippet/cpp/ccomcurrency-class_17.cpp)]"},{"pos":[19613,19692],"content":"<bpt id=\"p1\">&lt;a name=\"ccomcurrency__operator_currency\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComCurrency::operator CURRENCY","linkify":"<a name=\"ccomcurrency__operator_currency\"></a>  CComCurrency::operator CURRENCY","source":"<a name=\"ccomcurrency__operator_currency\"></a>  CComCurrency::operator CURRENCY"},{"pos":[19696,19781],"content":"These operators are used to cast a <ph id=\"ph1\">`CComCurrency`</ph> object to a <bpt id=\"p1\">**</bpt>CURRENCY<ept id=\"p1\">**</ept> data type.","source":"These operators are used to cast a `CComCurrency` object to a **CURRENCY** data type."},{"pos":[19787,19861],"content":"```operator CURRENCY&amp;() throw(); operator const CURRENCY&amp;() const throw();","source":"```operator CURRENCY&() throw();\noperator const CURRENCY&() const throw();"},{"content":"HRESULT Round(int nDecimals);","pos":[20201,20230]},{"content":"HRESULT SetFraction(SHORT nFraction);","pos":[20713,20750]},{"content":"HRESULT SetInteger(LONGLONG nInteger);","pos":[21403,21441]}],"content":"---\ntitle: \"CComCurrency Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CComCurrency\"\n  - \"ATL.CComCurrency\"\n  - \"ATL::CComCurrency\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CComCurrency class\"\nms.assetid: a1c3d10a-bba6-40cc-8bcf-aed9023c8a9e\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CComCurrency Class\n`CComCurrency` has methods and operators for creating and managing a CURRENCY object.  \n  \n## Syntax  \n  \n```\nclass CComCurrency\n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComCurrency::CComCurrency](#ccomcurrency__ccomcurrency)|The constructor for a `CComCurrency` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComCurrency::GetCurrencyPtr](#ccomcurrency__getcurrencyptr)|Returns the address of an `m_currency` data member.|  \n|[CComCurrency::GetFraction](#ccomcurrency__getfraction)|Call this method to return the fractional component of a `CComCurrency` object.|  \n|[CComCurrency::GetInteger](#ccomcurrency__getinteger)|Call this method to return the integer component of a `CComCurrency` object.|  \n|[CComCurrency::Round](#ccomcurrency__round)|Call this method to round a `CComCurrency` object to the nearest integer value.|  \n|[CComCurrency::SetFraction](#ccomcurrency__setfraction)|Call this method to set the fractional component of a `CComCurrency` object.|  \n|[CComCurrency::SetInteger](#ccomcurrency__setinteger)|Call this method to set the integer component of a `CComCurrency` object.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComCurrency::operator -](#ccomcurrency__operator_-)|This operator is used to perform subtraction on a `CComCurrency` object.|  \n|[CComCurrency::operator !=](#ccomcurrency__operator_neq)|Compares two `CComCurrency` objects for inequality.|  \n|[CComCurrency::operator *](#ccomcurrency__operator_star)|This operator is used to perform multiplication on a `CComCurrency` object.|  \n|[CComCurrency::operator *=](#ccomcurrency__operator_star_eq)|This operator is used to perform multiplication on a `CComCurrency` object and assign it the result.|  \n|[CComCurrency::operator /](#ccomcurrency__operator_div)|This operator is used to perform division on a `CComCurrency` object.|  \n|[CComCurrency::operator /=](#ccomcurrency__operator_div_eq)|This operator is used to perform division on a `CComCurrency` object and assign it the result.|  \n|[CComCurrency::operator +](#ccomcurrency__operator_add)|This operator is used to perform addition on a `CComCurrency` object.|  \n|[CComCurrency::operator +=](#ccomcurrency__operator_add_eq)|This operator is used to perform addition on a `CComCurrency` object and assign the result to the current object.|  \n|[CComCurrency::operator <](#ccomcurrency__operator_lt)|This operator compares two `CComCurrency` objects to determine the lesser.|  \n|[CComCurrency::operator <=](#ccomcurrency__operator_lt_eq)|This operator compares two `CComCurrency` objects to determine equality or the lesser.|  \n|[CComCurrency::operator =](#ccomcurrency__operator_eq)|This operator assigns the `CComCurrency` object to a new value.|  \n|[CComCurrency::operator -=](#ccomcurrency__operator_-_eq)|This operator is used to perform subtraction on a `CComCurrency` object and assign it the result.|  \n|[CComCurrency::operator ==](#ccomcurrency__operator_eq_eq)|This operator compares two `CComCurrency` objects for equality.|  \n|[CComCurrency::operator >](#ccomcurrency__operator_gt)|This operator compares two `CComCurrency` objects to determine the larger.|  \n|[CComCurrency::operator >=](#ccomcurrency__operator_gt_eq)|This operator compares two `CComCurrency` objects to determine equality or the larger.|  \n|[CComCurrency::operator CURRENCY](#ccomcurrency__operator_currency)|Casts a `CURRENCY` object.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComCurrency::m_currency](#ccomcurrency__m_currency)|The `CURRENCY` variable created by your class instance.|  \n  \n## Remarks  \n `CComCurrency` is a wrapper for the **CURRENCY** data type. **CURRENCY** is implemented as an 8-byte two's-complement integer value scaled by 10,000. This gives a fixed-point number with 15 digits to the left of the decimal point and 4 digits to the right. The **CURRENCY** data type is extremely useful for calculations involving money, or for any fixed-point calculations where accuracy is important.  \n  \n The **CComCurrency** wrapper implements arithmetic, assignment, and comparison operations for this fixed-point type. The supported applications have been selected to control the rounding errors that can occur during fixed-point calculations.  \n  \n The `CComCurrency` object provides access to the numbers on either side of the decimal point in the form of two components: an integer component which stores the value to the left of the decimal point, and a fractional component which stores the value to the right of the decimal point. The fractional component is stored internally as an integer value between -9999 ( **CY_MIN_FRACTION**) and +9999 ( **CY_MAX_FRACTION**). The method [CComCurrency::GetFraction](#ccomcurrency__getfraction) returns a value scaled by a factor of 10000 ( **CY_SCALE**).  \n  \n When specifying the integer and fractional components of a **CComCurrency** object, remember that the fractional component is a number in the range 0 to 9999. This is important when dealing with a currency such as the US dollar that expresses amounts using only two significant digits after the decimal point. Even though the last two digits are not displayed, they must be taken into account.  \n  \n|Value|Possible CComCurrency assignments|  \n|-----------|---------------------------------------|  \n|$10.50|CComCurrency(10,5000) *or* CComCurrency(10.50)|  \n|$10.05|CComCurrency(10,500) *or* CComCurrency(10.05)|  \n  \n The values **CY_MIN_FRACTION**, **CY_MAX_FRACTION**, and **CY_SCALE** are defined in atlcur.h.  \n  \n## Requirements  \n **Header:** atlcur.h  \n  \n##  <a name=\"ccomcurrency__ccomcurrency\"></a>  CComCurrency::CComCurrency  \n The constructor.  \n  \n```\nCComCurrency() throw();\nCComCurrency(\n const CComCurrency& curSrc) throw();\nCComCurrency(\n CURRENCY  cySrc) throw();\nCComCurrency(\n DECIMAL  dSrc);\n\n    CComCurrency(\n ULONG  ulSrc);\n\n    CComCurrency(\n USHORT  usSrc);\n\n    CComCurrency(\n CHAR  cSrc);\n\n    CComCurrency(\n DOUBLE  dSrc);\n\n    CComCurrency(\n FLOAT  fSrc);\n\n    CComCurrency(\n LONG  lSrc);\n\n    CComCurrency(\n SHORT  sSrc);\n\n    CComCurrency(\n BYTE  bSrc);\n\n    CComCurrency(\n LONGLONG  nInteger,\n    SHORT nFraction);\n\n    explicit CComCurrency(\n    LPDISPATCH pDispSrc);\n\n    explicit CComCurrency(\n    const VARIANT& varSrc);\n\n    explicit CComCurrency(\n    LPCWSTR szSrc);\n\n    explicit CComCurrency(\n    LPCSTR szSrc);\n```  \n  \n### Parameters  \n `curSrc`  \n An existing `CComCurrency` object.  \n  \n `cySrc`  \n A variable of type **CURRENCY**.  \n  \n `bSrc`, `dSrc`, `fSrc`, `lSrc`, *sSrc*, *ulSrc, usSrc*  \n The initial value given to the member variable `m_currency`.  \n  \n `cSrc`  \n A character containing the initial value given to the member variable `m_currency`.  \n  \n `nInteger`, *nFraction*  \n The integer and fractional components of the initial monetary value. See the [CComCurrency](../../atl/reference/ccomcurrency-class.md) overview for more information.  \n  \n `pDispSrc`  \n An `IDispatch` pointer.  \n  \n *varSrc*  \n A variable of type **VARIANT**. The locale of the current thread is used to perform the conversion.  \n  \n `szSrc`  \n A Unicode or ANSI string containing the initial value. The locale of the current thread is used to perform the conversion.  \n  \n### Remarks  \n The constructor sets the initial value of [CComCurrency::m_currency](#ccomcurrency__m_currency), and accepts a wide range of data types, including integers, strings, floating-point numbers, **CURRENCY** variables, and other `CComCurrency` objects. If no value is provided, `m_currency` is set to 0.  \n  \n In the event of an error, such as an overflow, the constructors lacking an empty exception specification ( **throw()**) call `AtlThrow` with an HRESULT describing the error.  \n  \n When using floating-point or double values to assign a value, note that **CComCurrency(10.50)** is equivalent to **CComCurrency(10,5000)** and not **CComCurrency(10,50)**.  \n  \n##  <a name=\"ccomcurrency__getcurrencyptr\"></a>  CComCurrency::GetCurrencyPtr  \n Returns the address of an `m_currency` data member.  \n  \n```\nCURRENCY* GetCurrencyPtr() throw();\n```  \n  \n### Return Value  \n Returns the address of an `m_currency` data member  \n  \n##  <a name=\"ccomcurrency__getfraction\"></a>  CComCurrency::GetFraction  \n Call this method to return the fractional component of the `CComCurrency` object.  \n  \n```\nSHORT GetFraction() const;\n```  \n  \n### Return Value  \n Returns the fractional component of the `m_currency` data member.  \n  \n### Remarks  \n The fractional component is a 4-digit integer value between -9999 ( **CY_MIN_FRACTION**) and +9999 ( **CY_MAX_FRACTION**). `GetFraction` returns this value scaled by 10000 ( **CY_SCALE**). The values of **CY_MIN_FRACTION**, **CY_MAX_FRACTION**, and **CY_SCALE** are defined in atlcur.h.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#50](../../atl/codesnippet/cpp/ccomcurrency-class_1.cpp)]  \n  \n##  <a name=\"ccomcurrency__getinteger\"></a>  CComCurrency::GetInteger  \n Call this method to get the integer component of a `CComCurrency` object.  \n  \n```\nLONGLONG GetInteger() const;\n```  \n  \n### Return Value  \n Returns the integer component of the `m_currency` data member.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#51](../../atl/codesnippet/cpp/ccomcurrency-class_2.cpp)]  \n  \n##  <a name=\"ccomcurrency__m_currency\"></a>  CComCurrency::m_currency  \n The **CURRENCY** data member.  \n  \n```\nCURRENCY m_currency;\n```  \n  \n### Remarks  \n This member holds the currency accessed and manipulated by the methods of this class.  \n  \n##  <a name=\"ccomcurrency__operator_-\"></a>  CComCurrency::operator -  \n This operator is used to perform subtraction on a `CComCurrency` object.  \n  \n```\nCComCurrency operator-() const;\n\n    CComCurrency operator-(const CComCurrency& cur) const;\n```  \n  \n### Parameters  \n `cur`  \n A `CComCurrency` object.  \n  \n### Return Value  \n Returns a `CComCurrency` object representing the result of the subtraction. In the event of an error, such as an overflow, this operator calls `AtlThrow` with an HRESULT describing the error.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#55](../../atl/codesnippet/cpp/ccomcurrency-class_3.cpp)]  \n  \n##  <a name=\"ccomcurrency__operator_neq\"></a>  CComCurrency::operator !=  \n This operator compares two objects for inequality.  \n  \n```\nbool operator!= (const CComCurrency& cur) const;\n```  \n  \n### Parameters  \n `cur`  \n The `CComCurrency` object to be compared.  \n  \n### Return Value  \n Returns **true** if the item being compared is not equal to the `CComCurrency` object; otherwise, **false**.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#56](../../atl/codesnippet/cpp/ccomcurrency-class_4.cpp)]  \n  \n##  <a name=\"ccomcurrency__operator_star\"></a>  CComCurrency::operator *  \n This operator is used to perform multiplication on a `CComCurrency` object.  \n  \n```\nCComCurrency operator*(long nOperand) const;\n\n    CComCurrency operator*(const CComCurrency& cur) const;\n```  \n  \n### Parameters  \n `nOperand`  \n The multiplier.  \n  \n `cur`  \n The `CComCurrency` object used as the multiplier.  \n  \n### Return Value  \n Returns a `CComCurrency` object representing the result of the multiplication. In the event of an error, such as an overflow, this operator calls `AtlThrow` with an HRESULT describing the error.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#57](../../atl/codesnippet/cpp/ccomcurrency-class_5.cpp)]  \n  \n##  <a name=\"ccomcurrency__operator_star_eq\"></a>  CComCurrency::operator *=  \n This operator is used to perform multiplication on a `CComCurrency` object and assign it the result.  \n  \n```\nconst CComCurrency& operator*= (long nOperand);\n\nconst CComCurrency& operator*= (const CComCurrency& cur);\n```  \n  \n### Parameters  \n `nOperand`  \n The multiplier.  \n  \n `cur`  \n The `CComCurrency` object used as the multiplier.  \n  \n### Return Value  \n Returns the updated `CComCurrency` object. In the event of an error, such as an overflow, this operator calls `AtlThrow` with an HRESULT describing the error.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#58](../../atl/codesnippet/cpp/ccomcurrency-class_6.cpp)]  \n  \n##  <a name=\"ccomcurrency__operator_div\"></a>  CComCurrency::operator /  \n This operator is used to perform division on a `CComCurrency` object.  \n  \n```\nCComCurrency operator/(long nOperand) const;\n```  \n  \n### Parameters  \n `nOperand`  \n The divisor.  \n  \n### Return Value  \n Returns a `CComCurrency` object representing the result of the division. If the divisor is 0, an assert failure will occur.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#59](../../atl/codesnippet/cpp/ccomcurrency-class_7.cpp)]  \n  \n##  <a name=\"ccomcurrency__operator_div_eq\"></a>  CComCurrency::operator /=  \n This operator is used to perform division on a `CComCurrency` object and assign it the result.  \n  \n```\nconst CComCurrency& operator/= (long nOperand);\n```  \n  \n### Parameters  \n `nOperand`  \n The divisor.  \n  \n### Return Value  \n Returns the updated `CComCurrency` object. If the divisor is 0, an assert failure will occur.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#60](../../atl/codesnippet/cpp/ccomcurrency-class_8.cpp)]  \n  \n##  <a name=\"ccomcurrency__operator_add\"></a>  CComCurrency::operator +  \n This operator is used to perform addition on a `CComCurrency` object.  \n  \n```\nCComCurrency operator+(const CComCurrency& cur) const;\n```  \n  \n### Parameters  \n `cur`  \n The `CComCurrency` object to be added to the original object.  \n  \n### Return Value  \n Returns a `CComCurrency` object representing the result of the addition. In the event of an error, such as an overflow, this operator calls `AtlThrow` with an HRESULT describing the error.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#61](../../atl/codesnippet/cpp/ccomcurrency-class_9.cpp)]  \n  \n##  <a name=\"ccomcurrency__operator_add_eq\"></a>  CComCurrency::operator +=  \n This operator is used to perform addition on a `CComCurrency` object and assign the result to the current object.  \n  \n```\nconst CComCurrency& operator+= (const CComCurrency& cur);\n```  \n  \n### Parameters  \n `cur`  \n The `CComCurrency` object.  \n  \n### Return Value  \n Returns the updated `CComCurrency` object. In the event of an error, such as an overflow, this operator calls `AtlThrow` with an HRESULT describing the error.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#62](../../atl/codesnippet/cpp/ccomcurrency-class_10.cpp)]  \n  \n##  <a name=\"ccomcurrency__operator_lt\"></a>  CComCurrency::operator &lt;  \n This operator compares two `CComCurrency` objects to determine the lesser.  \n  \n```\nbool operator<(const CComCurrency& cur) const;\n```  \n  \n### Parameters  \n `cur`  \n A `CComCurrency` object.  \n  \n### Return Value  \n Returns **true** if the first object is less than the second, **false** otherwise.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#63](../../atl/codesnippet/cpp/ccomcurrency-class_11.cpp)]  \n  \n##  <a name=\"ccomcurrency__operator_lt_eq\"></a>  CComCurrency::operator &lt;=  \n This operator compares two `CComCurrency` objects to determine equality or the lesser.  \n  \n```\nbool operator<= (const CComCurrency& cur) const;\n```  \n  \n### Parameters  \n `cur`  \n A `CComCurrency` object.  \n  \n### Return Value  \n Returns **true** if the first object is less than or equal to the second, **false** otherwise.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#64](../../atl/codesnippet/cpp/ccomcurrency-class_12.cpp)]  \n  \n##  <a name=\"ccomcurrency__operator_eq\"></a>  CComCurrency::operator =  \n This operator assigns the `CComCurrency` object to a new value.  \n  \n```\nconst CComCurrency& operator= (const CComCurrency& curSrc) throw();\n\nconst CComCurrency& operator= (CURRENCY cySrc) throw();\n\nconst CComCurrency& operator= (FLOAT fSrc);\n\nconst CComCurrency& operator= (SHORT sSrc);\n\nconst CComCurrency& operator= (LONG lSrc);\n\nconst CComCurrency& operator= (BYTE bSrc);\n\nconst CComCurrency& operator= (USHORT usSrc);\n\nconst CComCurrency& operator= (DOUBLE dSrc);\n\nconst CComCurrency& operator= (CHAR cSrc);\n\nconst CComCurrency& operator= (ULONG ulSrc);\n\nconst CComCurrency& operator= (DECIMAL dSrc);\n```  \n  \n### Parameters  \n `curSrc`  \n A **CComCurrency** object.  \n  \n `cySrc`  \n A variable of type **CURRENCY**.  \n  \n *sSrc*, `fSrc`, `lSrc`, *bSrc*, *usSrc*, `dSrc`, *cSrc*, *ulSrc*, `dSrc`  \n The numeric value to assign to the `CComCurrency` object.  \n  \n### Return Value  \n Returns the updated `CComCurrency` object. In the event of an error, such as an overflow, this operator calls `AtlThrow` with an HRESULT describing the error.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#65](../../atl/codesnippet/cpp/ccomcurrency-class_13.cpp)]  \n  \n##  <a name=\"ccomcurrency__operator_-_eq\"></a>  CComCurrency::operator -=  \n This operator is used to perform subtraction on a `CComCurrency` object and assign it the result.  \n  \n```\nconst CComCurrency& operator-= (const CComCurrency& cur);\n```  \n  \n### Parameters  \n `cur`  \n A `CComCurrency` object.  \n  \n### Return Value  \n Returns the updated `CComCurrency` object. In the event of an error, such as an overflow, this operator calls `AtlThrow` with an HRESULT describing the error.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#66](../../atl/codesnippet/cpp/ccomcurrency-class_14.cpp)]  \n  \n##  <a name=\"ccomcurrency__operator_eq_eq\"></a>  CComCurrency::operator ==  \n This operator compares two `CComCurrency` objects for equality.  \n  \n```\nbool operator== (const CComCurrency& cur) const;\n```  \n  \n### Parameters  \n `cur`  \n The `CComCurrency` object to compare.  \n  \n### Return Value  \n Returns **true** if the objects are equal (that is, the `m_currency` data members, both integer and fractional, in both objects have the same value), **false** otherwise.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#67](../../atl/codesnippet/cpp/ccomcurrency-class_15.cpp)]  \n  \n##  <a name=\"ccomcurrency__operator_gt\"></a>  CComCurrency::operator &gt;  \n This operator compares two `CComCurrency` objects to determine the larger.  \n  \n```\nbool operator>(const CComCurrency& cur) const;\n```  \n  \n### Parameters  \n `cur`  \n A `CComCurrency` object.  \n  \n### Return Value  \n Returns **true** if the first object is greater than the second, **false** otherwise.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#68](../../atl/codesnippet/cpp/ccomcurrency-class_16.cpp)]  \n  \n##  <a name=\"ccomcurrency__operator_gt_eq\"></a>  CComCurrency::operator &gt;=  \n This operator compares two `CComCurrency` objects to determine equality or the larger.  \n  \n```\nbool operator>= (const CComCurrency& cur) const;\n```  \n  \n### Parameters  \n `cur`  \n A `CComCurrency` object.  \n  \n### Return Value  \n Returns **true** if the first object is greater than or equal to the second, **false** otherwise.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#69](../../atl/codesnippet/cpp/ccomcurrency-class_17.cpp)]  \n  \n##  <a name=\"ccomcurrency__operator_currency\"></a>  CComCurrency::operator CURRENCY  \n These operators are used to cast a `CComCurrency` object to a **CURRENCY** data type.  \n  \n```operator CURRENCY&() throw();\noperator const CURRENCY&() const throw();\n```  \n  \n### Return Value  \n Returns a reference to a **CURRENCY** object.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#70](../../atl/codesnippet/cpp/ccomcurrency-class_18.cpp)]  \n  \n##  <a name=\"ccomcurrency__round\"></a>  CComCurrency::Round  \n Call this method to round the currency to a specified number of decimal places.  \n  \n```\nHRESULT Round(int nDecimals);\n```  \n  \n### Parameters  \n *nDecimals*  \n The number of digits to which `m_currency` will be rounded, in the range 0 to 4.  \n  \n### Return Value  \n Returns `S_OK` on success, or an error `HRESULT` on failure.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#52](../../atl/codesnippet/cpp/ccomcurrency-class_19.cpp)]  \n  \n##  <a name=\"ccomcurrency__setfraction\"></a>  CComCurrency::SetFraction  \n Call this method to set the fractional component of a `CComCurrency` object.  \n  \n```\nHRESULT SetFraction(SHORT nFraction);\n```  \n  \n### Parameters  \n *nFraction*  \n The value to be assigned to the fractional component of the `m_currency` data member. The sign of the fractional component must the same as the integer component, and the value must be in range -9999 ( **CY_MIN_FRACTION**) to +9999 ( **CY_MAX_FRACTION**).  \n  \n### Return Value  \n Returns `S_OK` on success, or an error `HRESULT` on failure.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#53](../../atl/codesnippet/cpp/ccomcurrency-class_20.cpp)]  \n  \n##  <a name=\"ccomcurrency__setinteger\"></a>  CComCurrency::SetInteger  \n Call this method to set the integer component of a `CComCurrency` object.  \n  \n```\nHRESULT SetInteger(LONGLONG nInteger);\n```  \n  \n### Parameters  \n `nInteger`  \n The value to be assigned to the integer component of the `m_currency` data member. The sign of the integer component must match the sign of the existing fractional component.  \n  \n `nInteger` must be in the range **CY_MIN_INTEGER** to **CY_MAX_INTEGER** inclusive. These values are defined in atlcur.h.  \n  \n### Return Value  \n Returns `S_OK` on success, or an error `HRESULT` on failure.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#54](../../atl/codesnippet/cpp/ccomcurrency-class_21.cpp)]  \n  \n## See Also  \n [COleCurrency Class](../../mfc/reference/colecurrency-class.md)   \n [CURRENCY](http://msdn.microsoft.com/en-us/5e81273c-7289-45c7-93c0-32c1553f708e)   \n [Class Overview](../../atl/atl-class-overview.md)\n"}