{"nodes":[{"pos":[12,53],"content":"_endthread, _endthreadex | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_endthread, _endthreadex | Microsoft Docs","pos":[0,41]}]},{"pos":[1154,1178],"content":"_endthread, _endthreadex","linkify":"_endthread, _endthreadex","nodes":[{"content":"_endthread, _endthreadex","pos":[0,24]}]},{"pos":[1179,1340],"content":"Terminates a thread; <ph id=\"ph1\">`_endthread`</ph> terminates a thread that's created by <ph id=\"ph2\">`_beginthread`</ph> and  <ph id=\"ph3\">`_endthreadex`</ph> terminates a thread that's created by<ph id=\"ph4\">`_beginthreadex`</ph>.","source":"Terminates a thread; `_endthread` terminates a thread that's created by `_beginthread` and  `_endthreadex` terminates a thread that's created by`_beginthreadex`."},{"pos":[1349,1355],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1457,1467],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Thread exit code.","pos":[1483,1500]},{"pos":[1509,1516],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can call <ph id=\"ph1\">`_endthread`</ph> or <ph id=\"ph2\">`_endthreadex`</ph> explicitly to terminate a thread; however, <ph id=\"ph3\">`_endthread`</ph> or <ph id=\"ph4\">`_endthreadex`</ph> is called automatically when the thread returns from the routine passed as a parameter to <ph id=\"ph5\">`_beginthread`</ph> or <ph id=\"ph6\">`_beginthreadex`</ph>.","pos":[1520,1763],"source":"You can call `_endthread` or `_endthreadex` explicitly to terminate a thread; however, `_endthread` or `_endthreadex` is called automatically when the thread returns from the routine passed as a parameter to `_beginthread` or `_beginthreadex`."},{"content":"Terminating a thread with a call to <ph id=\"ph1\">`endthread`</ph> or <ph id=\"ph2\">`_endthreadex`</ph> helps ensure proper recovery of resources allocated for the thread.","pos":[1764,1897],"source":" Terminating a thread with a call to `endthread` or `_endthreadex` helps ensure proper recovery of resources allocated for the thread."},{"pos":[1905,2233],"content":"[!NOTE]\n For an executable file linked with Libcmt.lib, do not call the Win32 [ExitThread](http://msdn.microsoft.com/library/windows/desktop/ms682659.aspx) API; this prevents the run-time system from reclaiming allocated resources. `_endthread` and `_endthreadex` reclaim allocated thread resources and then call `ExitThread`.","leadings":["","> "],"nodes":[{"content":" For an executable file linked with Libcmt.lib, do not call the Win32 [ExitThread](http://msdn.microsoft.com/library/windows/desktop/ms682659.aspx) API; this prevents the run-time system from reclaiming allocated resources. `_endthread` and `_endthreadex` reclaim allocated thread resources and then call `ExitThread`.","pos":[8,326],"nodes":[{"content":"For an executable file linked with Libcmt.lib, do not call the Win32 <bpt id=\"p1\">[</bpt>ExitThread<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms682659.aspx)</ept> API; this prevents the run-time system from reclaiming allocated resources.","pos":[1,223],"source":" For an executable file linked with Libcmt.lib, do not call the Win32 [ExitThread](http://msdn.microsoft.com/library/windows/desktop/ms682659.aspx) API; this prevents the run-time system from reclaiming allocated resources."},{"content":"<ph id=\"ph1\">`_endthread`</ph> and <ph id=\"ph2\">`_endthreadex`</ph> reclaim allocated thread resources and then call <ph id=\"ph3\">`ExitThread`</ph>.","pos":[224,318],"source":"`_endthread` and `_endthreadex` reclaim allocated thread resources and then call `ExitThread`."}]}]},{"content":"<ph id=\"ph1\">`_endthread`</ph> automatically closes the thread handle.","pos":[2240,2292],"source":"`_endthread` automatically closes the thread handle."},{"content":"(This behavior differs from the Win32 <ph id=\"ph1\">`ExitThread`</ph> API.) Therefore, when you use <ph id=\"ph2\">`_beginthread`</ph> and <ph id=\"ph3\">`_endthread`</ph>, do not explicitly close the thread handle by calling the Win32 <bpt id=\"p1\">[</bpt>CloseHandle<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms724211.aspx)</ept> API.","pos":[2293,2553],"source":" (This behavior differs from the Win32 `ExitThread` API.) Therefore, when you use `_beginthread` and `_endthread`, do not explicitly close the thread handle by calling the Win32 [CloseHandle](http://msdn.microsoft.com/library/windows/desktop/ms724211.aspx) API."},{"content":"Like the Win32 <ph id=\"ph1\">`ExitThread`</ph> API, <ph id=\"ph2\">`_endthreadex`</ph> does not close the thread handle.","pos":[2560,2641],"source":"Like the Win32 `ExitThread` API, `_endthreadex` does not close the thread handle."},{"content":"Therefore, when you use <ph id=\"ph1\">`_beginthreadex`</ph> and <ph id=\"ph2\">`_endthreadex`</ph>, you must close the thread handle by calling the Win32 <ph id=\"ph3\">`CloseHandle`</ph> API.","pos":[2642,2775],"source":" Therefore, when you use `_beginthreadex` and `_endthreadex`, you must close the thread handle by calling the Win32 `CloseHandle` API."},{"pos":[2783,2887],"content":"[!NOTE]\n `_endthread` and `_endthreadex` cause C++ destructors pending in the thread not to be called.","leadings":["","> "],"nodes":[{"content":"<ph id=\"ph1\"> `_endthread`</ph> and <ph id=\"ph2\">`_endthreadex`</ph> cause C++ destructors pending in the thread not to be called.","pos":[8,102],"source":" `_endthread` and `_endthreadex` cause C++ destructors pending in the thread not to be called."}]},{"pos":[2896,2908],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Function","pos":[2915,2923]},{"content":"Required header","pos":[2924,2939]},{"content":"<ph id=\"ph1\">\\&lt;</ph>process.h&gt;","pos":[2998,3010],"source":"\\<process.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>process.h&gt;","pos":[3030,3042],"source":"\\<process.h>"},{"pos":[3050,3148],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"pos":[3157,3166],"content":"Libraries","linkify":"Libraries","nodes":[{"content":"Libraries","pos":[0,9]}]},{"pos":[3170,3277],"content":"Multithreaded versions of the <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept> only.","source":"Multithreaded versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md) only."},{"pos":[3286,3293],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3297,3396],"content":"See the example for <bpt id=\"p1\">[</bpt>_beginthread<ept id=\"p1\">](../../c-runtime-library/reference/beginthread-beginthreadex.md)</ept>.","source":"See the example for [_beginthread](../../c-runtime-library/reference/beginthread-beginthreadex.md)."},{"pos":[3405,3430],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[3434,3449]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[3450,3497],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[3498,3623],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[3632,3640],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Process and Environment Control<ept id=\"p1\">](../../c-runtime-library/process-and-environment-control.md)</ept><ph id=\"ph1\"> </ph>","pos":[3644,3738],"source":"[Process and Environment Control](../../c-runtime-library/process-and-environment-control.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_beginthread, _beginthreadex<ept id=\"p1\">](../../c-runtime-library/reference/beginthread-beginthreadex.md)</ept>","pos":[3741,3836],"source":" [_beginthread, _beginthreadex](../../c-runtime-library/reference/beginthread-beginthreadex.md)"}],"content":"---\ntitle: \"_endthread, _endthreadex | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_endthread\"\n  - \"_endthreadex\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-runtime-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_endthread\"\n  - \"endthreadex\"\n  - \"_endthreadex\"\n  - \"endthread\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_endthread function\"\n  - \"endthread function\"\n  - \"terminating threads\"\n  - \"endthreadex function\"\n  - \"_endthreadex function\"\n  - \"threading [C++], terminating threads\"\nms.assetid: 18a91f2f-659e-40b4-b266-ec12dcf2abf5\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _endthread, _endthreadex\nTerminates a thread; `_endthread` terminates a thread that's created by `_beginthread` and  `_endthreadex` terminates a thread that's created by`_beginthreadex`.  \n  \n## Syntax  \n  \n```  \nvoid _endthread( void );  \nvoid _endthreadex(   \n   unsigned retval   \n);  \n```  \n  \n#### Parameters  \n `retval`  \n Thread exit code.  \n  \n## Remarks  \n You can call `_endthread` or `_endthreadex` explicitly to terminate a thread; however, `_endthread` or `_endthreadex` is called automatically when the thread returns from the routine passed as a parameter to `_beginthread` or `_beginthreadex`. Terminating a thread with a call to `endthread` or `_endthreadex` helps ensure proper recovery of resources allocated for the thread.  \n  \n> [!NOTE]\n>  For an executable file linked with Libcmt.lib, do not call the Win32 [ExitThread](http://msdn.microsoft.com/library/windows/desktop/ms682659.aspx) API; this prevents the run-time system from reclaiming allocated resources. `_endthread` and `_endthreadex` reclaim allocated thread resources and then call `ExitThread`.  \n  \n `_endthread` automatically closes the thread handle. (This behavior differs from the Win32 `ExitThread` API.) Therefore, when you use `_beginthread` and `_endthread`, do not explicitly close the thread handle by calling the Win32 [CloseHandle](http://msdn.microsoft.com/library/windows/desktop/ms724211.aspx) API.  \n  \n Like the Win32 `ExitThread` API, `_endthreadex` does not close the thread handle. Therefore, when you use `_beginthreadex` and `_endthreadex`, you must close the thread handle by calling the Win32 `CloseHandle` API.  \n  \n> [!NOTE]\n>  `_endthread` and `_endthreadex` cause C++ destructors pending in the thread not to be called.  \n  \n## Requirements  \n  \n|Function|Required header|  \n|--------------|---------------------|  \n|`_endthread`|\\<process.h>|  \n|`_endthreadex`|\\<process.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Libraries  \n Multithreaded versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md) only.  \n  \n## Example  \n See the example for [_beginthread](../../c-runtime-library/reference/beginthread-beginthreadex.md).  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Process and Environment Control](../../c-runtime-library/process-and-environment-control.md)   \n [_beginthread, _beginthreadex](../../c-runtime-library/reference/beginthread-beginthreadex.md)"}