{"nodes":[{"pos":[12,51],"content":"allocator_traits Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"allocator_traits Class | Microsoft Docs","pos":[0,39]}]},{"pos":[1189,1211],"content":"allocator_traits Class","linkify":"allocator_traits Class","nodes":[{"content":"allocator_traits Class","pos":[0,22]}]},{"content":"The template class describes an object that supplements an <bpt id=\"p1\">*</bpt>allocator type<ept id=\"p1\">*</ept>.","pos":[1212,1288],"source":"The template class describes an object that supplements an *allocator type*."},{"content":"An allocator type is any type that describes an allocator object that is used for managing allocated storage.","pos":[1289,1398]},{"content":"Specifically, for any allocator type <ph id=\"ph1\">`Alloc`</ph>, you can use <ph id=\"ph2\">`allocator_traits&lt;Alloc&gt;`</ph> to determine all the information that is needed by an allocator-enabled container.","pos":[1399,1565],"source":" Specifically, for any allocator type `Alloc`, you can use `allocator_traits<Alloc>` to determine all the information that is needed by an allocator-enabled container."},{"content":"For more information, see the default <bpt id=\"p1\">[</bpt>allocator Class<ept id=\"p1\">](../standard-library/allocator-class.md)</ept>.","pos":[1566,1662],"source":" For more information, see the default [allocator Class](../standard-library/allocator-class.md)."},{"pos":[1671,1677],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1750,1758],"content":"Typedefs","linkify":"Typedefs","nodes":[{"content":"Typedefs","pos":[0,8]}]},{"content":"Name","pos":[1765,1769]},{"content":"Description","pos":[1770,1781]},{"pos":[1854,1912],"content":"This type is a synonym for the template parameter <ph id=\"ph1\">`Alloc`</ph>.","source":"This type is a synonym for the template parameter `Alloc`."},{"pos":[1951,2093],"content":"This type is <ph id=\"ph1\">`Alloc::const_pointer`</ph>, if that type is well-formed; otherwise, this type is <ph id=\"ph2\">`pointer_traits&lt;pointer&gt;::rebind&lt;const value_type&gt;`</ph>.","source":"This type is `Alloc::const_pointer`, if that type is well-formed; otherwise, this type is `pointer_traits<pointer>::rebind<const value_type>`."},{"pos":[2137,2278],"content":"This type is <ph id=\"ph1\">`Alloc::const_void_pointer`</ph>, if that type is well-formed; otherwise, this type is <ph id=\"ph2\">`pointer_traits&lt;pointer&gt;::rebind&lt;const void&gt;`</ph>.","source":"This type is `Alloc::const_void_pointer`, if that type is well-formed; otherwise, this type is `pointer_traits<pointer>::rebind<const void>`."},{"pos":[2319,2454],"content":"This type is <ph id=\"ph1\">`Alloc::difference_type`</ph>, if that type is well-formed; otherwise, this type is <ph id=\"ph2\">`pointer_traits&lt;pointer&gt;::difference_type`</ph>.","source":"This type is `Alloc::difference_type`, if that type is well-formed; otherwise, this type is `pointer_traits<pointer>::difference_type`."},{"pos":[2487,2586],"content":"This type is <ph id=\"ph1\">`Alloc::pointer`</ph>, if that type is well-formed; otherwise, this type is <ph id=\"ph2\">`value_type *`</ph>.","source":"This type is `Alloc::pointer`, if that type is well-formed; otherwise, this type is `value_type *`."},{"pos":[2650,2778],"content":"This type is <ph id=\"ph1\">`Alloc::propagate_on_container_copy_assignment`</ph>, if that type is well-formed; otherwise, this type is <ph id=\"ph2\">`false_type`</ph>.","source":"This type is `Alloc::propagate_on_container_copy_assignment`, if that type is well-formed; otherwise, this type is `false_type`."},{"content":"This type is <ph id=\"ph1\">`Alloc::propagate_on_container_move_assignment`</ph>, if that type is well-formed; otherwise, this type is <ph id=\"ph2\">`false_type`</ph>.","pos":[2842,2970],"source":"This type is `Alloc::propagate_on_container_move_assignment`, if that type is well-formed; otherwise, this type is `false_type`."},{"content":"If the type holds true, an allocator-enabled container copies its stored allocator on a move assignment.","pos":[2971,3075]},{"content":"This type is <ph id=\"ph1\">`Alloc::propagate_on_container_swap`</ph>, if that type is well-formed; otherwise, this type is <ph id=\"ph2\">`false_type`</ph>.","pos":[3128,3245],"source":"This type is `Alloc::propagate_on_container_swap`, if that type is well-formed; otherwise, this type is `false_type`."},{"content":"If the type holds true, an allocator-enabled container swaps its stored allocator on a swap.","pos":[3246,3338]},{"pos":[3373,3498],"content":"This type is <ph id=\"ph1\">`Alloc::size_type`</ph>, if that type is well-formed; otherwise, this type is <ph id=\"ph2\">`make_unsigned&lt;difference_type&gt;::type`</ph>.","source":"This type is `Alloc::size_type`, if that type is well-formed; otherwise, this type is `make_unsigned<difference_type>::type`."},{"pos":[3534,3581],"content":"This type is a synonym for <ph id=\"ph1\">`Alloc::value_type`</ph>.","source":"This type is a synonym for `Alloc::value_type`."},{"pos":[3619,3748],"content":"This type is <ph id=\"ph1\">`Alloc::void_pointer`</ph>, if that type is well-formed; otherwise, this type is <ph id=\"ph2\">`pointer_traits&lt;pointer&gt;::rebind&lt;void&gt;`</ph>.","source":"This type is `Alloc::void_pointer`, if that type is well-formed; otherwise, this type is `pointer_traits<pointer>::rebind<void>`."},{"pos":[3759,3773],"content":"Static Methods","linkify":"Static Methods","nodes":[{"content":"Static Methods","pos":[0,14]}]},{"content":"The following static methods call the corresponding method on a given allocator parameter.","pos":[3777,3867]},{"content":"Name","pos":[3874,3878]},{"content":"Description","pos":[3879,3890]},{"pos":[3928,3999],"content":"<bpt id=\"p1\">[</bpt>allocator_traits::allocate Method<ept id=\"p1\">](#allocator_traits__allocate_method)</ept>","source":"[allocator_traits::allocate Method](#allocator_traits__allocate_method)"},{"content":"Static method that allocates memory by using the given allocator parameter.","pos":[4000,4075]},{"pos":[4080,4153],"content":"<bpt id=\"p1\">[</bpt>allocator_traits::construct Method<ept id=\"p1\">](#allocator_traits__construct_method)</ept>","source":"[allocator_traits::construct Method](#allocator_traits__construct_method)"},{"content":"Static method that uses a specified allocator to construct an object.","pos":[4154,4223]},{"pos":[4228,4303],"content":"<bpt id=\"p1\">[</bpt>allocator_traits::deallocate Method<ept id=\"p1\">](#allocator_traits__deallocate_method)</ept>","source":"[allocator_traits::deallocate Method](#allocator_traits__deallocate_method)"},{"content":"Static method that uses a specified allocator to deallocate a specified number of objects.","pos":[4304,4394]},{"pos":[4399,4468],"content":"<bpt id=\"p1\">[</bpt>allocator_traits::destroy Method<ept id=\"p1\">](#allocator_traits__destroy_method)</ept>","source":"[allocator_traits::destroy Method](#allocator_traits__destroy_method)"},{"content":"Static method that uses a specified allocator to call the destructor on an object without deallocating its memory.","pos":[4469,4583]},{"pos":[4588,4659],"content":"<bpt id=\"p1\">[</bpt>allocator_traits::max_size Method<ept id=\"p1\">](#allocator_traits__max_size_method)</ept>","source":"[allocator_traits::max_size Method](#allocator_traits__max_size_method)"},{"content":"Static method that uses a specified allocator to determine the maximum number of objects that can be allocated.","pos":[4660,4771]},{"pos":[4776,4905],"content":"<bpt id=\"p1\">[</bpt>allocator_traits::select_on_container_copy_construction Method<ept id=\"p1\">](#allocator_traits__select_on_container_copy_construction_method)</ept>","source":"[allocator_traits::select_on_container_copy_construction Method](#allocator_traits__select_on_container_copy_construction_method)"},{"pos":[4906,4998],"content":"Static method that calls <ph id=\"ph1\">`select_on_container_copy_construction`</ph> on the specified allocator.","source":"Static method that calls `select_on_container_copy_construction` on the specified allocator."},{"pos":[5008,5020],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[5024,5045],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>memory&gt;","source":"**Header:** \\<memory>"},{"pos":[5052,5070],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[5080,5163],"content":"<bpt id=\"p1\">&lt;a name=\"allocator_traits__allocate_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  allocator_traits::allocate Method","linkify":"<a name=\"allocator_traits__allocate_method\"></a>  allocator_traits::allocate Method","source":"<a name=\"allocator_traits__allocate_method\"></a>  allocator_traits::allocate Method"},{"content":"Static method that allocates memory by using the given allocator parameter.","pos":[5167,5242]},{"pos":[5433,5443],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An allocator object.","pos":[5455,5475]},{"content":"The number of elements to allocate.","pos":[5493,5528]},{"content":"A <ph id=\"ph1\">`const_pointer`</ph> that might assist the allocator object in satisfying the request for storage by locating the address of an allocated object prior to the request.","pos":[5545,5708],"source":" A `const_pointer` that might assist the allocator object in satisfying the request for storage by locating the address of an allocated object prior to the request."},{"content":"A null pointer is treated as no hint.","pos":[5709,5746]},{"pos":[5756,5768],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Each method returns a pointer to the allocated object.","pos":[5772,5826]},{"pos":[5833,5886],"content":"The first static method returns <ph id=\"ph1\">`al.allocate(count)`</ph>.","source":"The first static method returns `al.allocate(count)`."},{"pos":[5893,6024],"content":"The second method returns <ph id=\"ph1\">`al.allocate(count, hint)`</ph>, if that expression is well formed; otherwise it returns <ph id=\"ph2\">`al.allocate(count)`</ph>.","source":"The second method returns `al.allocate(count, hint)`, if that expression is well formed; otherwise it returns `al.allocate(count)`."},{"pos":[6034,6119],"content":"<bpt id=\"p1\">&lt;a name=\"allocator_traits__construct_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  allocator_traits::construct Method","linkify":"<a name=\"allocator_traits__construct_method\"></a>  allocator_traits::construct Method","source":"<a name=\"allocator_traits__construct_method\"></a>  allocator_traits::construct Method"},{"content":"Static method that uses a specified allocator to construct an object.","pos":[6123,6192]},{"pos":[6313,6323],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An allocator object.","pos":[6335,6355]},{"content":"A pointer to the location where the object is to be constructed.","pos":[6371,6435]},{"content":"A list of arguments that is passed to the object constructor.","pos":[6452,6513]},{"pos":[6523,6530],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6534,6724],"content":"The static member function calls <ph id=\"ph1\">`al.construct(ptr, args...)`</ph>, if that expression is well formed; otherwise it evaluates <ph id=\"ph2\">`::new (static_cast&lt;void *&gt;(ptr)) Uty(std::forward&lt;Types&gt;(args)...)`</ph>.","source":"The static member function calls `al.construct(ptr, args...)`, if that expression is well formed; otherwise it evaluates `::new (static_cast<void *>(ptr)) Uty(std::forward<Types>(args)...)`."},{"pos":[6734,6821],"content":"<bpt id=\"p1\">&lt;a name=\"allocator_traits__deallocate_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  allocator_traits::deallocate Method","linkify":"<a name=\"allocator_traits__deallocate_method\"></a>  allocator_traits::deallocate Method","source":"<a name=\"allocator_traits__deallocate_method\"></a>  allocator_traits::deallocate Method"},{"content":"Static method that uses a specified allocator to deallocate a specified number of objects.","pos":[6825,6915]},{"pos":[7013,7023],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An allocator object.","pos":[7035,7055]},{"content":"A pointer to the starting location of the objects to be deallocated.","pos":[7071,7139]},{"content":"The number of objects to deallocate.","pos":[7157,7193]},{"pos":[7203,7210],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7214,7260],"content":"This method calls <ph id=\"ph1\">`al.deallocate(ptr, count)`</ph>.","source":"This method calls `al.deallocate(ptr, count)`."},{"content":"This method throws nothing.","pos":[7267,7294]},{"pos":[7304,7385],"content":"<bpt id=\"p1\">&lt;a name=\"allocator_traits__destroy_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  allocator_traits::destroy Method","linkify":"<a name=\"allocator_traits__destroy_method\"></a>  allocator_traits::destroy Method","source":"<a name=\"allocator_traits__destroy_method\"></a>  allocator_traits::destroy Method"},{"content":"Static method that uses a specified allocator to call the destructor on an object without deallocating its memory.","pos":[7389,7503]},{"pos":[7592,7602],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An allocator object.","pos":[7614,7634]},{"content":"A pointer to the location of the object.","pos":[7650,7690]},{"pos":[7700,7707],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7711,7820],"content":"This method calls <ph id=\"ph1\">`al.destroy(ptr)`</ph>, if that expression is well formed; otherwise it evaluates <ph id=\"ph2\">`ptr-&gt;~Uty()`</ph>.","source":"This method calls `al.destroy(ptr)`, if that expression is well formed; otherwise it evaluates `ptr->~Uty()`."},{"pos":[7830,7913],"content":"<bpt id=\"p1\">&lt;a name=\"allocator_traits__max_size_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  allocator_traits::max_size Method","linkify":"<a name=\"allocator_traits__max_size_method\"></a>  allocator_traits::max_size Method","source":"<a name=\"allocator_traits__max_size_method\"></a>  allocator_traits::max_size Method"},{"content":"Static method that uses a specified allocator to determine the maximum number of objects that can be allocated.","pos":[7917,8028]},{"pos":[8098,8108],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An allocator object.","pos":[8120,8140]},{"pos":[8150,8157],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8161,8289],"content":"This method returns <ph id=\"ph1\">`al.max_size()`</ph>, if that expression is well formed; otherwise it returns <ph id=\"ph2\">`numeric_limits&lt;size_type&gt;::max()`</ph>.","source":"This method returns `al.max_size()`, if that expression is well formed; otherwise it returns `numeric_limits<size_type>::max()`."},{"pos":[8299,8440],"content":"<bpt id=\"p1\">&lt;a name=\"allocator_traits__select_on_container_copy_construction_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  allocator_traits::select_on_container_copy_construction Method","linkify":"<a name=\"allocator_traits__select_on_container_copy_construction_method\"></a>  allocator_traits::select_on_container_copy_construction Method","source":"<a name=\"allocator_traits__select_on_container_copy_construction_method\"></a>  allocator_traits::select_on_container_copy_construction Method"},{"pos":[8444,8536],"content":"Static method that calls <ph id=\"ph1\">`select_on_container_copy_construction`</ph> on the specified allocator.","source":"Static method that calls `select_on_container_copy_construction` on the specified allocator."},{"pos":[8631,8641],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An allocator object.","pos":[8653,8673]},{"pos":[8683,8695],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8699,8820],"content":"This method returns <ph id=\"ph1\">`al.select_on_container_copy_construction()`</ph>, if that type is well formed; otherwise it returns <ph id=\"ph2\">`al`</ph>.","source":"This method returns `al.select_on_container_copy_construction()`, if that type is well formed; otherwise it returns `al`."},{"pos":[8830,8837],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used to specify an allocator when the associated container is copy-constructed.","pos":[8841,8935]},{"pos":[8944,8952],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>memory&gt;<ept id=\"p1\">](../standard-library/memory.md)</ept><ph id=\"ph2\"> </ph>","pos":[8956,8999],"source":"[\\<memory>](../standard-library/memory.md) "},{"content":"<bpt id=\"p1\"> [</bpt>pointer_traits Struct<ept id=\"p1\">](../standard-library/pointer-traits-struct.md)</ept><ph id=\"ph1\"> </ph>","pos":[9002,9073],"source":" [pointer_traits Struct](../standard-library/pointer-traits-struct.md) "},{"content":"<bpt id=\"p1\"> [</bpt>scoped_allocator_adaptor Class<ept id=\"p1\">](../standard-library/scoped-allocator-adaptor-class.md)</ept>","pos":[9076,9164],"source":" [scoped_allocator_adaptor Class](../standard-library/scoped-allocator-adaptor-class.md)"}],"content":"---\ntitle: \"allocator_traits Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"memory/std::allocator_traits\"\n  - \"memory/std::allocator_traits::propagate_on_container_move_assignment\"\n  - \"memory/std::allocator_traits::const_pointer\"\n  - \"memory/std::allocator_traits::propagate_on_container_swap\"\n  - \"memory/std::allocator_traits::propagate_on_container_copy_assignment\"\n  - \"memory/std::allocator_traits::difference_type\"\n  - \"memory/std::allocator_traits::allocator_type\"\n  - \"memory/std::allocator_traits::value_type\"\n  - \"memory/std::allocator_traits::pointer\"\n  - \"memory/std::allocator_traits::size_type\"\n  - \"memory/std::allocator_traits::const_void_pointer\"\n  - \"memory/std::allocator_traits::void_pointer\"\ndev_langs: \n  - \"C++\"\nms.assetid: 612974b8-b5d4-4668-82fb-824bff6821d6\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# allocator_traits Class\nThe template class describes an object that supplements an *allocator type*. An allocator type is any type that describes an allocator object that is used for managing allocated storage. Specifically, for any allocator type `Alloc`, you can use `allocator_traits<Alloc>` to determine all the information that is needed by an allocator-enabled container. For more information, see the default [allocator Class](../standard-library/allocator-class.md).  \n  \n## Syntax  \n  \n```cpp\ntemplate <class Alloc>\nclass allocator_traits;\n```  \n  \n### Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`allocator_traits::allocator_type`|This type is a synonym for the template parameter `Alloc`.|  \n|`allocator_traits::const_pointer`|This type is `Alloc::const_pointer`, if that type is well-formed; otherwise, this type is `pointer_traits<pointer>::rebind<const value_type>`.|  \n|`allocator_traits::const_void_pointer`|This type is `Alloc::const_void_pointer`, if that type is well-formed; otherwise, this type is `pointer_traits<pointer>::rebind<const void>`.|  \n|`allocator_traits::difference_type`|This type is `Alloc::difference_type`, if that type is well-formed; otherwise, this type is `pointer_traits<pointer>::difference_type`.|  \n|`allocator_traits::pointer`|This type is `Alloc::pointer`, if that type is well-formed; otherwise, this type is `value_type *`.|  \n|`allocator_traits::propagate_on_container_copy_assignment`|This type is `Alloc::propagate_on_container_copy_assignment`, if that type is well-formed; otherwise, this type is `false_type`.|  \n|`allocator_traits::propagate_on_container_move_assignment`|This type is `Alloc::propagate_on_container_move_assignment`, if that type is well-formed; otherwise, this type is `false_type`. If the type holds true, an allocator-enabled container copies its stored allocator on a move assignment.|  \n|`allocator_traits::propagate_on_container_swap`|This type is `Alloc::propagate_on_container_swap`, if that type is well-formed; otherwise, this type is `false_type`. If the type holds true, an allocator-enabled container swaps its stored allocator on a swap.|  \n|`allocator_traits::size_type`|This type is `Alloc::size_type`, if that type is well-formed; otherwise, this type is `make_unsigned<difference_type>::type`.|  \n|`allocator_traits::value_type`|This type is a synonym for `Alloc::value_type`.|  \n|`allocator_traits::void_pointer`|This type is `Alloc::void_pointer`, if that type is well-formed; otherwise, this type is `pointer_traits<pointer>::rebind<void>`.|  \n  \n### Static Methods  \n The following static methods call the corresponding method on a given allocator parameter.  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[allocator_traits::allocate Method](#allocator_traits__allocate_method)|Static method that allocates memory by using the given allocator parameter.|  \n|[allocator_traits::construct Method](#allocator_traits__construct_method)|Static method that uses a specified allocator to construct an object.|  \n|[allocator_traits::deallocate Method](#allocator_traits__deallocate_method)|Static method that uses a specified allocator to deallocate a specified number of objects.|  \n|[allocator_traits::destroy Method](#allocator_traits__destroy_method)|Static method that uses a specified allocator to call the destructor on an object without deallocating its memory.|  \n|[allocator_traits::max_size Method](#allocator_traits__max_size_method)|Static method that uses a specified allocator to determine the maximum number of objects that can be allocated.|  \n|[allocator_traits::select_on_container_copy_construction Method](#allocator_traits__select_on_container_copy_construction_method)|Static method that calls `select_on_container_copy_construction` on the specified allocator.|  \n  \n## Requirements  \n **Header:** \\<memory>  \n  \n **Namespace:** std  \n  \n##  <a name=\"allocator_traits__allocate_method\"></a>  allocator_traits::allocate Method  \n Static method that allocates memory by using the given allocator parameter.  \n  \n```cpp\nstatic pointer allocate(Alloc& al, size_type count);\n\nstatic pointer allocate(Alloc& al, size_type count,\n    typename allocator_traits<void>::const_pointer* hint);\n```  \n  \n### Parameters  \n `al`  \n An allocator object.  \n  \n `count`  \n The number of elements to allocate.  \n  \n `hint`  \n A `const_pointer` that might assist the allocator object in satisfying the request for storage by locating the address of an allocated object prior to the request. A null pointer is treated as no hint.  \n  \n### Return Value  \n Each method returns a pointer to the allocated object.  \n  \n The first static method returns `al.allocate(count)`.  \n  \n The second method returns `al.allocate(count, hint)`, if that expression is well formed; otherwise it returns `al.allocate(count)`.  \n  \n##  <a name=\"allocator_traits__construct_method\"></a>  allocator_traits::construct Method  \n Static method that uses a specified allocator to construct an object.  \n  \n```cpp\ntemplate <class Uty, class Types>\nstatic void construct(Alloc& al, Uty* ptr, Types&&... args);\n```  \n  \n### Parameters  \n `al`  \n An allocator object.  \n  \n `ptr`  \n A pointer to the location where the object is to be constructed.  \n  \n `args`  \n A list of arguments that is passed to the object constructor.  \n  \n### Remarks  \n The static member function calls `al.construct(ptr, args...)`, if that expression is well formed; otherwise it evaluates `::new (static_cast<void *>(ptr)) Uty(std::forward<Types>(args)...)`.  \n  \n##  <a name=\"allocator_traits__deallocate_method\"></a>  allocator_traits::deallocate Method  \n Static method that uses a specified allocator to deallocate a specified number of objects.  \n  \n```cpp\nstatic void deallocate(Alloc al,\n    pointer ptr,\n    size_type count);\n```  \n  \n### Parameters  \n `al`  \n An allocator object.  \n  \n `ptr`  \n A pointer to the starting location of the objects to be deallocated.  \n  \n `count`  \n The number of objects to deallocate.  \n  \n### Remarks  \n This method calls `al.deallocate(ptr, count)`.  \n  \n This method throws nothing.  \n  \n##  <a name=\"allocator_traits__destroy_method\"></a>  allocator_traits::destroy Method  \n Static method that uses a specified allocator to call the destructor on an object without deallocating its memory.  \n  \n```cpp\ntemplate <class Uty>\nstatic void destroy(Alloc& al, Uty* ptr);\n```  \n  \n### Parameters  \n `al`  \n An allocator object.  \n  \n `ptr`  \n A pointer to the location of the object.  \n  \n### Remarks  \n This method calls `al.destroy(ptr)`, if that expression is well formed; otherwise it evaluates `ptr->~Uty()`.  \n  \n##  <a name=\"allocator_traits__max_size_method\"></a>  allocator_traits::max_size Method  \n Static method that uses a specified allocator to determine the maximum number of objects that can be allocated.  \n  \n```cpp\nstatic size_type max_size(const Alloc& al);\n```  \n  \n### Parameters  \n `al`  \n An allocator object.  \n  \n### Remarks  \n This method returns `al.max_size()`, if that expression is well formed; otherwise it returns `numeric_limits<size_type>::max()`.  \n  \n##  <a name=\"allocator_traits__select_on_container_copy_construction_method\"></a>  allocator_traits::select_on_container_copy_construction Method  \n Static method that calls `select_on_container_copy_construction` on the specified allocator.  \n  \n```cpp\nstatic Alloc select_on_container_copy_construction(const Alloc& al);\n```  \n  \n### Parameters  \n `al`  \n An allocator object.  \n  \n### Return Value  \n This method returns `al.select_on_container_copy_construction()`, if that type is well formed; otherwise it returns `al`.  \n  \n### Remarks  \n This method is used to specify an allocator when the associated container is copy-constructed.  \n  \n## See Also  \n [\\<memory>](../standard-library/memory.md)   \n [pointer_traits Struct](../standard-library/pointer-traits-struct.md)   \n [scoped_allocator_adaptor Class](../standard-library/scoped-allocator-adaptor-class.md)\n"}