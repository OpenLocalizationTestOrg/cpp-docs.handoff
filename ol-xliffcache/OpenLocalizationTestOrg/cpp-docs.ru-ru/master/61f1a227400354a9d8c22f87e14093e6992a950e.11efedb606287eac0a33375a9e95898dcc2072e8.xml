{"nodes":[{"pos":[12,47],"content":"omp_test_nest_lock | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"omp_test_nest_lock | Microsoft Docs","pos":[0,35]}]},{"content":"omp_test_nest_lock","pos":[630,648]},{"content":"Attempts to set a nestable lock but does not block thread execution.","pos":[649,717]},{"content":"Syntax","pos":[726,732]},{"content":"Remarks","pos":[814,821]},{"content":"where,","pos":[825,831]},{"content":"A variable of type <bpt id=\"p1\">[</bpt>omp_nest_lock_t<ept id=\"p1\">](../../../parallel/openmp/reference/omp-nest-lock-t.md)</ept> that was initialized with <bpt id=\"p2\">[</bpt>omp_init_nest_lock<ept id=\"p2\">](../../../parallel/openmp/reference/omp-init-nest-lock.md)</ept>.","pos":[848,1045],"source":" A variable of type [omp_nest_lock_t](../../../parallel/openmp/reference/omp-nest-lock-t.md) that was initialized with [omp_init_nest_lock](../../../parallel/openmp/reference/omp-init-nest-lock.md)."},{"content":"Remarks","pos":[1054,1061]},{"pos":[1065,1228],"content":"For more information, see <bpt id=\"p1\">[</bpt>3.2.5 omp_test_lock and omp_test_nest_lock Functions<ept id=\"p1\">](../../../parallel/openmp/3-2-5-omp-test-lock-and-omp-test-nest-lock-functions.md)</ept>.","source":"For more information, see [3.2.5 omp_test_lock and omp_test_nest_lock Functions](../../../parallel/openmp/3-2-5-omp-test-lock-and-omp-test-nest-lock-functions.md)."},{"content":"Example","pos":[1237,1244]},{"content":"See Also","pos":[3515,3523]},{"content":"Functions","pos":[3528,3537]}],"content":"---\ntitle: \"omp_test_nest_lock | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"omp_test_nest_lock\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"omp_test_nest_lock OpenMP function\"\nms.assetid: 4c909bbe-80e0-4100-aca6-d415d7dc5294\ncaps.latest.revision: 12\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# omp_test_nest_lock\nAttempts to set a nestable lock but does not block thread execution.  \n  \n## Syntax  \n  \n```  \nint omp_test_nest_lock(  \n   omp_nest_lock_t *lock  \n);  \n```  \n  \n## Remarks  \n where,  \n  \n `lock`  \n A variable of type [omp_nest_lock_t](../../../parallel/openmp/reference/omp-nest-lock-t.md) that was initialized with [omp_init_nest_lock](../../../parallel/openmp/reference/omp-init-nest-lock.md).  \n  \n## Remarks  \n For more information, see [3.2.5 omp_test_lock and omp_test_nest_lock Functions](../../../parallel/openmp/3-2-5-omp-test-lock-and-omp-test-nest-lock-functions.md).  \n  \n## Example  \n  \n```  \n// omp_test_nest_lock.cpp  \n// compile with: /openmp  \n#include <stdio.h>  \n#include <omp.h>  \n  \nomp_nest_lock_t nestable_lock;      \n  \nint main() {  \n   omp_init_nest_lock(&nestable_lock);  \n  \n   #pragma omp parallel num_threads(4)  \n   {  \n      int tid = omp_get_thread_num();  \n      while (!omp_test_nest_lock(&nestable_lock))  \n         printf_s(\"Thread %d - failed to acquire nestable_lock\\n\",  \n                tid);  \n  \n      printf_s(\"Thread %d - acquired nestable_lock\\n\", tid);  \n  \n      if (omp_test_nest_lock(&nestable_lock)) {  \n         printf_s(\"Thread %d - acquired nestable_lock again\\n\",  \n                tid);  \n         printf_s(\"Thread %d - released nestable_lock\\n\",   \n                tid);  \n         omp_unset_nest_lock(&nestable_lock);  \n      }  \n  \n      printf_s(\"Thread %d - released nestable_lock\\n\", tid);  \n      omp_unset_nest_lock(&nestable_lock);  \n   }  \n  \n   omp_destroy_nest_lock(&nestable_lock);  \n}  \n```  \n  \n```Output  \nThread 1 - acquired nestable_lock  \nThread 0 - failed to acquire nestable_lock  \nThread 1 - acquired nestable_lock again  \nThread 0 - failed to acquire nestable_lock  \nThread 1 - released nestable_lock  \nThread 0 - failed to acquire nestable_lock  \nThread 1 - released nestable_lock  \nThread 0 - failed to acquire nestable_lock  \nThread 3 - acquired nestable_lock  \nThread 0 - failed to acquire nestable_lock  \nThread 3 - acquired nestable_lock again  \nThread 0 - failed to acquire nestable_lock  \nThread 2 - failed to acquire nestable_lock  \nThread 3 - released nestable_lock  \nThread 2 - failed to acquire nestable_lock  \nThread 3 - released nestable_lock  \nThread 2 - failed to acquire nestable_lock  \nThread 0 - acquired nestable_lock  \nThread 2 - failed to acquire nestable_lock  \nThread 2 - failed to acquire nestable_lock  \nThread 2 - failed to acquire nestable_lock  \nThread 0 - acquired nestable_lock again  \nThread 2 - failed to acquire nestable_lock  \nThread 0 - released nestable_lock  \nThread 2 - failed to acquire nestable_lock  \nThread 0 - released nestable_lock  \nThread 2 - failed to acquire nestable_lock  \nThread 2 - acquired nestable_lock  \nThread 2 - acquired nestable_lock again  \nThread 2 - released nestable_lock  \nThread 2 - released nestable_lock  \n```  \n  \n## See Also  \n [Functions](../../../parallel/openmp/reference/openmp-functions.md)"}