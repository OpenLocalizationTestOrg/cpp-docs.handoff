{"nodes":[{"pos":[12,45],"content":"perror, _wperror | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"perror, _wperror | Microsoft Docs","pos":[0,33]}]},{"content":"perror, _wperror","pos":[1113,1129]},{"content":"Print an error message.","pos":[1130,1153]},{"content":"Syntax","pos":[1162,1168]},{"content":"Parameters","pos":[1298,1308]},{"content":"String message to print.","pos":[1324,1348]},{"content":"Remarks","pos":[1357,1364]},{"content":"The <ph id=\"ph1\">`perror`</ph> function prints an error message to <ph id=\"ph2\">`stderr`</ph>.","pos":[1368,1426],"source":"The `perror` function prints an error message to `stderr`."},{"content":"is a wide-character version of <bpt id=\"p1\">**</bpt>_perror<ept id=\"p1\">**</ept>; the <ph id=\"ph1\">`string`</ph> argument to <ph id=\"ph2\">`_wperror`</ph> is a wide-character string.","pos":[1438,1545],"source":" is a wide-character version of **_perror**; the `string` argument to `_wperror` is a wide-character string."},{"content":"and <bpt id=\"p1\">**</bpt>_perror<ept id=\"p1\">**</ept> behave identically otherwise.","pos":[1557,1602],"source":" and **_perror** behave identically otherwise."},{"content":"Generic-Text Routine Mappings","pos":[1612,1641]},{"content":"TCHAR.H routine","pos":[1648,1663]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[1664,1692],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[1693,1706]},{"content":"_UNICODE defined","pos":[1707,1723]},{"content":"is printed first, followed by a colon, then by the system error message for the last library call that produced the error, and finally by a newline character.","pos":[1892,2050]},{"content":"If <ph id=\"ph1\">`string`</ph> is a null pointer or a pointer to a null string, <ph id=\"ph2\">`perror`</ph> prints only the system error message.","pos":[2051,2158],"source":" If `string` is a null pointer or a pointer to a null string, `perror` prints only the system error message."},{"content":"The error number is stored in the variable <bpt id=\"p1\">[</bpt>errno<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept> (defined in ERRNO.H).","pos":[2165,2305],"source":"The error number is stored in the variable [errno](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md) (defined in ERRNO.H)."},{"content":"The system error messages are accessed through the variable <bpt id=\"p1\">[</bpt>_sys_errlist<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>, which is an array of messages ordered by error number.","pos":[2306,2504],"source":" The system error messages are accessed through the variable [_sys_errlist](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md), which is an array of messages ordered by error number."},{"content":"prints the appropriate error message using the <ph id=\"ph1\">`errno`</ph> value as an index to <ph id=\"ph2\">`_sys_errlist`</ph>.","pos":[2514,2605],"source":" prints the appropriate error message using the `errno` value as an index to `_sys_errlist`."},{"content":"The value of the variable <bpt id=\"p1\">[</bpt>_sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept> is defined as the maximum number of elements in the <ph id=\"ph1\">`_sys_errlist`</ph> array.","pos":[2606,2785],"source":" The value of the variable [_sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md) is defined as the maximum number of elements in the `_sys_errlist` array."},{"content":"For accurate results, call <ph id=\"ph1\">`perror`</ph> immediately after a library routine returns with an error.","pos":[2792,2886],"source":"For accurate results, call `perror` immediately after a library routine returns with an error."},{"content":"Otherwise, subsequent calls can overwrite the <ph id=\"ph1\">`errno`</ph> value.","pos":[2887,2947],"source":" Otherwise, subsequent calls can overwrite the `errno` value."},{"content":"In the Windows operating system, some <ph id=\"ph1\">`errno`</ph> values listed in ERRNO.H are unused.","pos":[2954,3036],"source":"In the Windows operating system, some `errno` values listed in ERRNO.H are unused."},{"content":"These values are reserved for use by the UNIX operating system.","pos":[3037,3100]},{"content":"See <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept> for a listing of <ph id=\"ph1\">`errno`</ph> values used by the Windows operating system.","pos":[3101,3290],"source":" See [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md) for a listing of `errno` values used by the Windows operating system."},{"content":"prints an empty string for any <ph id=\"ph1\">`errno`</ph> value not used by these platforms.","pos":[3300,3373],"source":" prints an empty string for any `errno` value not used by these platforms."},{"content":"Requirements","pos":[3382,3394]},{"content":"Routine","pos":[3401,3408]},{"content":"Required header","pos":[3409,3424]},{"content":"stdio.h&gt; or <ph id=\"ph1\">\\&lt;</ph>stdlib.h&gt;","pos":[3480,3503],"source":"stdio.h> or \\<stdlib.h>"},{"content":"stdio.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[3521,3543],"source":"stdio.h> or \\<wchar.h>"},{"pos":[3551,3675],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Libraries","pos":[3684,3693]},{"pos":[3697,3789],"content":"All versions of the <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept>.","source":"All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md)."},{"content":"Example","pos":[3798,3805]},{"content":"Output","pos":[4876,4882]},{"content":".NET Framework Equivalent","pos":[5070,5095]},{"content":"Not applicable.","pos":[5099,5114]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[5115,5162],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[5163,5288],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[5297,5305]},{"content":"Process and Environment Control","pos":[5310,5341]},{"content":"clearerr","pos":[5408,5416]},{"content":"ferror","pos":[5470,5476]},{"content":"strerror, _strerror, _wcserror, <ph id=\"ph1\">\\_</ph>_wcserror","pos":[5528,5571],"source":"strerror, _strerror, _wcserror, \\__wcserror"}],"content":"---\ntitle: \"perror, _wperror | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_wperror\"\n  - \"perror\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-runtime-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_wperror\"\n  - \"_tperror\"\n  - \"perror\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_tperror function\"\n  - \"tperror function\"\n  - \"wperror function\"\n  - \"error messages, printing\"\n  - \"printing error messages\"\n  - \"_wperror function\"\n  - \"perror function\"\nms.assetid: 34fce792-16fd-4673-9849-cd88b54b6cd5\ncaps.latest.revision: 14\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# perror, _wperror\nPrint an error message.  \n  \n## Syntax  \n  \n```  \n  \n      void perror(  \n   const char *string   \n);  \nvoid _wperror(  \n   const wchar_t *string   \n);  \n```  \n  \n#### Parameters  \n `string`  \n String message to print.  \n  \n## Remarks  \n The `perror` function prints an error message to `stderr`. `_wperror` is a wide-character version of **_perror**; the `string` argument to `_wperror` is a wide-character string. `_wperror` and **_perror** behave identically otherwise.  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_tperror`|`perror`|`perror`|`_wperror`|  \n  \n `string` is printed first, followed by a colon, then by the system error message for the last library call that produced the error, and finally by a newline character. If `string` is a null pointer or a pointer to a null string, `perror` prints only the system error message.  \n  \n The error number is stored in the variable [errno](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md) (defined in ERRNO.H). The system error messages are accessed through the variable [_sys_errlist](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md), which is an array of messages ordered by error number. `perror` prints the appropriate error message using the `errno` value as an index to `_sys_errlist`. The value of the variable [_sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md) is defined as the maximum number of elements in the `_sys_errlist` array.  \n  \n For accurate results, call `perror` immediately after a library routine returns with an error. Otherwise, subsequent calls can overwrite the `errno` value.  \n  \n In the Windows operating system, some `errno` values listed in ERRNO.H are unused. These values are reserved for use by the UNIX operating system. See [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md) for a listing of `errno` values used by the Windows operating system. `perror` prints an empty string for any `errno` value not used by these platforms.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`perror`|\\<stdio.h> or \\<stdlib.h>|  \n|`_wperror`|\\<stdio.h> or \\<wchar.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Libraries  \n All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md).  \n  \n## Example  \n  \n```  \n// crt_perror.c  \n// compile with: /W3  \n/* This program attempts to open a file named  \n * NOSUCHF.ILE. Because this file probably doesn't exist,  \n * an error message is displayed. The same message is  \n * created using perror, strerror, and _strerror.  \n */  \n  \n#include <fcntl.h>  \n#include <sys/types.h>  \n#include <sys/stat.h>  \n#include <io.h>  \n#include <stdlib.h>  \n#include <stdio.h>  \n#include <string.h>  \n#include <share.h>  \n  \nint main( void )  \n{  \n   int  fh;  \n  \n   if( _sopen_s( &fh, \"NOSUCHF.ILE\", _O_RDONLY, _SH_DENYNO, 0 ) != 0 )  \n   {  \n      /* Three ways to create error message: */  \n      perror( \"perror says open failed\" );  \n      printf( \"strerror says open failed: %s\\n\",  \n         strerror( errno ) ); // C4996  \n      printf( _strerror( \"_strerror says open failed\" ) ); // C4996  \n      // Note: strerror and _strerror are deprecated; consider  \n      // using strerror_s and _strerror_s instead.  \n   }  \n   else  \n   {  \n      printf( \"open succeeded on input file\\n\" );  \n      _close( fh );  \n   }  \n}  \n```  \n  \n## Output  \n  \n```  \nperror says open failed: No such file or directory  \nstrerror says open failed: No such file or directory  \n_strerror says open failed: No such file or directory  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Process and Environment Control](../../c-runtime-library/process-and-environment-control.md)   \n [clearerr](../../c-runtime-library/reference/clearerr.md)   \n [ferror](../../c-runtime-library/reference/ferror.md)   \n [strerror, _strerror, _wcserror, \\__wcserror](../../c-runtime-library/reference/strerror-strerror-wcserror-wcserror.md)"}