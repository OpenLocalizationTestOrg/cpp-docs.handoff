{"nodes":[{"pos":[12,37],"content":"_memccpy | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_memccpy | Microsoft Docs","pos":[0,25]}]},{"pos":[933,941],"content":"_memccpy","linkify":"_memccpy","nodes":[{"content":"_memccpy","pos":[0,8]}]},{"content":"Copies characters from a buffer.","pos":[942,974]},{"pos":[983,989],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1117,1127],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>dest<ept id=\"p1\">*</ept>","pos":[1131,1137],"source":"*dest*"},{"content":"Pointer to the destination.","pos":[1141,1168]},{"content":"<bpt id=\"p1\">*</bpt>src<ept id=\"p1\">*</ept>","pos":[1175,1180],"source":"*src*"},{"content":"Pointer to the source.","pos":[1184,1206]},{"content":"Last character to copy.","pos":[1220,1243]},{"content":"<bpt id=\"p1\">*</bpt>count<ept id=\"p1\">*</ept>","pos":[1250,1257],"source":"*count*"},{"content":"Number of characters.","pos":[1261,1282]},{"pos":[1291,1303],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If the character <ph id=\"ph1\">`c`</ph> is copied, <ph id=\"ph2\">`_memccpy`</ph> returns a pointer to the char in <bpt id=\"p1\">*</bpt>dest<ept id=\"p1\">*</ept> that immediately follows the character.","pos":[1307,1429],"source":"If the character `c` is copied, `_memccpy` returns a pointer to the char in *dest* that immediately follows the character."},{"content":"If <ph id=\"ph1\">`c`</ph> is not copied, it returns <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[1430,1472],"source":" If `c` is not copied, it returns **NULL**."},{"pos":[1481,1488],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1492,1678],"content":"The <ph id=\"ph1\">`_memccpy`</ph> function copies 0 or more characters of <bpt id=\"p1\">*</bpt>src<ept id=\"p1\">*</ept> to <bpt id=\"p2\">*</bpt>dest<ept id=\"p2\">*</ept>, halting when the character <ph id=\"ph2\">`c`</ph> has been copied or when <bpt id=\"p3\">*</bpt>count<ept id=\"p3\">*</ept> characters have been copied, whichever comes first.","source":"The `_memccpy` function copies 0 or more characters of *src* to *dest*, halting when the character `c` has been copied or when *count* characters have been copied, whichever comes first."},{"content":"<bpt id=\"p1\">**</bpt>Security Note<ept id=\"p1\">**</ept> Make sure that the destination buffer is the same size or larger than the source buffer.","pos":[1685,1791],"source":"**Security Note** Make sure that the destination buffer is the same size or larger than the source buffer."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Avoiding Buffer Overruns<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms717795)</ept>.","pos":[1792,1905],"source":" For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795)."},{"pos":[1914,1926],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[1933,1940]},{"content":"Required header","pos":[1941,1956]},{"content":"<ph id=\"ph1\">\\&lt;</ph>memory.h&gt; or <ph id=\"ph2\">\\&lt;</ph>string.h&gt;","pos":[2012,2038],"source":"\\<memory.h> or \\<string.h>"},{"pos":[2046,2164],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[2173,2182],"content":"Libraries","linkify":"Libraries","nodes":[{"content":"Libraries","pos":[0,9]}]},{"pos":[2186,2278],"content":"All versions of the <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept>.","source":"All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md)."},{"pos":[2287,2294],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2832,2838],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"pos":[3031,3056],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[3066,3164],"content":"<bpt id=\"p1\">[</bpt>System::Buffer::BlockCopy<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.buffer.blockcopy.aspx)</ept>","source":"[System::Buffer::BlockCopy](https://msdn.microsoft.com/en-us/library/system.buffer.blockcopy.aspx)"},{"pos":[3174,3262],"content":"<bpt id=\"p1\">[</bpt>System::String::Copy<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.string.copy.aspx)</ept>","source":"[System::String::Copy](https://msdn.microsoft.com/en-us/library/system.string.copy.aspx)"},{"pos":[3271,3279],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Buffer Manipulation<ept id=\"p1\">](../../c-runtime-library/buffer-manipulation.md)</ept><ph id=\"ph1\"> </ph>","pos":[3283,3353],"source":"[Buffer Manipulation](../../c-runtime-library/buffer-manipulation.md) "},{"content":"<bpt id=\"p1\"> [</bpt>memchr, wmemchr<ept id=\"p1\">](../../c-runtime-library/reference/memchr-wmemchr.md)</ept><ph id=\"ph1\"> </ph>","pos":[3356,3428],"source":" [memchr, wmemchr](../../c-runtime-library/reference/memchr-wmemchr.md) "},{"content":"<bpt id=\"p1\"> [</bpt>memcmp, wmemcmp<ept id=\"p1\">](../../c-runtime-library/reference/memcmp-wmemcmp.md)</ept><ph id=\"ph1\"> </ph>","pos":[3431,3503],"source":" [memcmp, wmemcmp](../../c-runtime-library/reference/memcmp-wmemcmp.md) "},{"content":"<bpt id=\"p1\"> [</bpt>memcpy, wmemcpy<ept id=\"p1\">](../../c-runtime-library/reference/memcpy-wmemcpy.md)</ept><ph id=\"ph1\"> </ph>","pos":[3506,3578],"source":" [memcpy, wmemcpy](../../c-runtime-library/reference/memcpy-wmemcpy.md) "},{"content":"<bpt id=\"p1\"> [</bpt>memset, wmemset<ept id=\"p1\">](../../c-runtime-library/reference/memset-wmemset.md)</ept>","pos":[3581,3652],"source":" [memset, wmemset](../../c-runtime-library/reference/memset-wmemset.md)"}],"content":"---\ntitle: \"_memccpy | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_memccpy\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-string-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_memccpy\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_memccpy function\"\n  - \"memccpy function\"\nms.assetid: 9a2337df-6e85-4eba-b247-dd0532f45ddb\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _memccpy\nCopies characters from a buffer.  \n  \n## Syntax  \n  \n```  \n  \n      void *_memccpy(  \n   void *dest,  \n   const void *src,  \n   int c,  \n   size_t count   \n);  \n```  \n  \n#### Parameters  \n *dest*  \n Pointer to the destination.  \n  \n *src*  \n Pointer to the source.  \n  \n `c`  \n Last character to copy.  \n  \n *count*  \n Number of characters.  \n  \n## Return Value  \n If the character `c` is copied, `_memccpy` returns a pointer to the char in *dest* that immediately follows the character. If `c` is not copied, it returns **NULL**.  \n  \n## Remarks  \n The `_memccpy` function copies 0 or more characters of *src* to *dest*, halting when the character `c` has been copied or when *count* characters have been copied, whichever comes first.  \n  \n **Security Note** Make sure that the destination buffer is the same size or larger than the source buffer. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_memccpy`|\\<memory.h> or \\<string.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Libraries  \n All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md).  \n  \n## Example  \n  \n```  \n// crt_memccpy.c  \n  \n#include <memory.h>  \n#include <stdio.h>  \n#include <string.h>  \n  \nchar string1[60] = \"The quick brown dog jumps over the lazy fox\";  \n  \nint main( void )  \n{  \n   char buffer[61];  \n   char *pdest;  \n  \n   printf( \"Function: _memccpy 60 characters or to character 's'\\n\" );  \n   printf( \"Source: %s\\n\", string1 );  \n   pdest = _memccpy( buffer, string1, 's', 60 );  \n   *pdest = '\\0';  \n   printf( \"Result: %s\\n\", buffer );  \n   printf( \"Length: %d characters\\n\", strlen( buffer ) );  \n}  \n```  \n  \n## Output  \n  \n```  \nFunction: _memccpy 60 characters or to character 's'  \nSource: The quick brown dog jumps over the lazy fox  \nResult: The quick brown dog jumps  \nLength: 25 characters  \n```  \n  \n## .NET Framework Equivalent  \n  \n-   [System::Buffer::BlockCopy](https://msdn.microsoft.com/en-us/library/system.buffer.blockcopy.aspx)  \n  \n-   [System::String::Copy](https://msdn.microsoft.com/en-us/library/system.string.copy.aspx)  \n  \n## See Also  \n [Buffer Manipulation](../../c-runtime-library/buffer-manipulation.md)   \n [memchr, wmemchr](../../c-runtime-library/reference/memchr-wmemchr.md)   \n [memcmp, wmemcmp](../../c-runtime-library/reference/memcmp-wmemcmp.md)   \n [memcpy, wmemcpy](../../c-runtime-library/reference/memcpy-wmemcpy.md)   \n [memset, wmemset](../../c-runtime-library/reference/memset-wmemset.md)"}