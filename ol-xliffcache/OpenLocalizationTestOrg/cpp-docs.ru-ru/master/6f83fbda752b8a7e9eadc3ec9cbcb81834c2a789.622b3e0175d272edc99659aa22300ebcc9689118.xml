{"nodes":[{"pos":[12,36],"content":"wcrtomb | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"wcrtomb | Microsoft Docs","pos":[0,24]}]},{"pos":[997,1004],"content":"wcrtomb","linkify":"wcrtomb","nodes":[{"content":"wcrtomb","pos":[0,7]}]},{"content":"Convert a wide character into its multibyte character representation.","pos":[1005,1074]},{"content":"A more secure version of this function is available; see <bpt id=\"p1\">[</bpt>wcrtomb_s<ept id=\"p1\">](../../c-runtime-library/reference/wcrtomb-s.md)</ept>.","pos":[1075,1192],"source":" A more secure version of this function is available; see [wcrtomb_s](../../c-runtime-library/reference/wcrtomb-s.md)."},{"pos":[1201,1207],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1450,1460],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[out] <ph id=\"ph1\">`mbchar`</ph>","pos":[1464,1478],"source":"[out] `mbchar`"},{"content":"The resulting multibyte converted character.","pos":[1482,1526]},{"content":"[in] <ph id=\"ph1\">`wchar`</ph>","pos":[1533,1545],"source":"[in] `wchar`"},{"content":"A wide character to convert.","pos":[1549,1577]},{"content":"[in] <ph id=\"ph1\">`mbstate`</ph>","pos":[1584,1598],"source":"[in] `mbstate`"},{"content":"A pointer to an <ph id=\"ph1\">`mbstate_t`</ph> object.","pos":[1602,1637],"source":" A pointer to an `mbstate_t` object."},{"pos":[1646,1658],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the number of bytes required to represent the converted multibyte character, otherwise a -1 if an error occurs.","pos":[1662,1781]},{"pos":[1790,1797],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`wcrtomb`</ph> function converts a wide character, beginning in the specified conversion state contained in <ph id=\"ph2\">`mbstate`</ph>, from the value contained in <ph id=\"ph3\">`wchar`</ph>, into the address represented by <ph id=\"ph4\">`mbchar`</ph>.","pos":[1801,1997],"source":"The `wcrtomb` function converts a wide character, beginning in the specified conversion state contained in `mbstate`, from the value contained in `wchar`, into the address represented by `mbchar`."},{"content":"The return value is the number of bytes required to represent the corresponding multibyte character, but it will not return more than <ph id=\"ph1\">`MB_CUR_MAX`</ph> bytes.","pos":[1998,2151],"source":" The return value is the number of bytes required to represent the corresponding multibyte character, but it will not return more than `MB_CUR_MAX` bytes."},{"content":"If <ph id=\"ph1\">`mbstate`</ph> is null, the internal <ph id=\"ph2\">`mbstate_t`</ph> object containing the conversion state of <ph id=\"ph3\">`mbchar`</ph> is used.","pos":[2158,2264],"source":"If `mbstate` is null, the internal `mbstate_t` object containing the conversion state of `mbchar` is used."},{"content":"If the character sequence <ph id=\"ph1\">`wchar`</ph> does not have a corresponding multibyte character representation, a -1 is returned and the <ph id=\"ph2\">`errno`</ph> is set to <ph id=\"ph3\">`EILSEQ`</ph>.","pos":[2265,2417],"source":" If the character sequence `wchar` does not have a corresponding multibyte character representation, a -1 is returned and the `errno` is set to `EILSEQ`."},{"content":"The <ph id=\"ph1\">`wcrtomb`</ph> function differs from <bpt id=\"p1\">[</bpt>wctomb, _wctomb_l<ept id=\"p1\">](../../c-runtime-library/reference/wctomb-wctomb-l.md)</ept> by its restartability.","pos":[2424,2556],"source":"The `wcrtomb` function differs from [wctomb, _wctomb_l](../../c-runtime-library/reference/wctomb-wctomb-l.md) by its restartability."},{"content":"The conversion state is stored in <ph id=\"ph1\">`mbstate`</ph> for subsequent calls to the same or other restartable functions.","pos":[2557,2665],"source":" The conversion state is stored in `mbstate` for subsequent calls to the same or other restartable functions."},{"content":"Results are undefined when mixing the use of restartable and nonrestartable functions.","pos":[2666,2752]},{"content":"For example, an application would use <ph id=\"ph1\">`wcsrlen`</ph> rather than <ph id=\"ph2\">`wcsnlen`</ph>, if a subsequent call to <ph id=\"ph3\">`wcsrtombs`</ph> were used instead of <ph id=\"ph4\">`wcstombs`</ph>.","pos":[2753,2892],"source":" For example, an application would use `wcsrlen` rather than `wcsnlen`, if a subsequent call to `wcsrtombs` were used instead of `wcstombs`."},{"content":"In C++, this function has a template overload that invokes the newer, secure counterparts of this function.","pos":[2899,3006]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[3007,3115],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"pos":[3124,3134],"content":"Exceptions","linkify":"Exceptions","nodes":[{"content":"Exceptions","pos":[0,10]}]},{"pos":[3138,3309],"content":"The <ph id=\"ph1\">`wcrtomb`</ph> function is multithread safe as long as no function in the current thread calls <ph id=\"ph2\">`setlocale`</ph> while this function is executing and while the <ph id=\"ph3\">`mbstate`</ph> is null.","source":"The `wcrtomb` function is multithread safe as long as no function in the current thread calls `setlocale` while this function is executing and while the `mbstate` is null."},{"pos":[3318,3325],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4403,4428],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[4432,4447]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[4448,4495],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[4496,4621],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[4630,4642],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[4649,4656]},{"content":"Required header","pos":[4657,4672]},{"content":"<ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[4727,4737],"source":"\\<wchar.h>"},{"pos":[4747,4755],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Data Conversion<ept id=\"p1\">](../../c-runtime-library/data-conversion.md)</ept><ph id=\"ph1\"> </ph>","pos":[4759,4821],"source":"[Data Conversion](../../c-runtime-library/data-conversion.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Locale<ept id=\"p1\">](../../c-runtime-library/locale.md)</ept><ph id=\"ph1\"> </ph>","pos":[4824,4869],"source":" [Locale](../../c-runtime-library/locale.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Interpretation of Multibyte-Character Sequences<ept id=\"p1\">](../../c-runtime-library/interpretation-of-multibyte-character-sequences.md)</ept><ph id=\"ph1\"> </ph>","pos":[4872,4999],"source":" [Interpretation of Multibyte-Character Sequences](../../c-runtime-library/interpretation-of-multibyte-character-sequences.md) "},{"content":"<bpt id=\"p1\"> [</bpt>mbsinit<ept id=\"p1\">](../../c-runtime-library/reference/mbsinit.md)</ept>","pos":[5002,5058],"source":" [mbsinit](../../c-runtime-library/reference/mbsinit.md)"}],"content":"---\ntitle: \"wcrtomb | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"wcrtomb\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-convert-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"wcrtomb\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"wide characters, converting\"\n  - \"wcrtomb function\"\n  - \"multibyte characters\"\n  - \"characters, converting\"\nms.assetid: 717f1b21-2705-4b7f-b6d0-82adc5224340\ncaps.latest.revision: 26\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# wcrtomb\nConvert a wide character into its multibyte character representation. A more secure version of this function is available; see [wcrtomb_s](../../c-runtime-library/reference/wcrtomb-s.md).  \n  \n## Syntax  \n  \n```  \nsize_t wcrtomb(  \n   char *mbchar,  \n   wchar_t wchar,  \n   mbstate_t *mbstate  \n);  \ntemplate <size_t size>  \nsize_t wcrtomb(  \n   char (&mbchar)[size],  \n   wchar_t wchar,  \n   mbstate_t *mbstate  \n); // C++ only  \n```  \n  \n#### Parameters  \n [out] `mbchar`  \n The resulting multibyte converted character.  \n  \n [in] `wchar`  \n A wide character to convert.  \n  \n [in] `mbstate`  \n A pointer to an `mbstate_t` object.  \n  \n## Return Value  \n Returns the number of bytes required to represent the converted multibyte character, otherwise a -1 if an error occurs.  \n  \n## Remarks  \n The `wcrtomb` function converts a wide character, beginning in the specified conversion state contained in `mbstate`, from the value contained in `wchar`, into the address represented by `mbchar`. The return value is the number of bytes required to represent the corresponding multibyte character, but it will not return more than `MB_CUR_MAX` bytes.  \n  \n If `mbstate` is null, the internal `mbstate_t` object containing the conversion state of `mbchar` is used. If the character sequence `wchar` does not have a corresponding multibyte character representation, a -1 is returned and the `errno` is set to `EILSEQ`.  \n  \n The `wcrtomb` function differs from [wctomb, _wctomb_l](../../c-runtime-library/reference/wctomb-wctomb-l.md) by its restartability. The conversion state is stored in `mbstate` for subsequent calls to the same or other restartable functions. Results are undefined when mixing the use of restartable and nonrestartable functions. For example, an application would use `wcsrlen` rather than `wcsnlen`, if a subsequent call to `wcsrtombs` were used instead of `wcstombs`.  \n  \n In C++, this function has a template overload that invokes the newer, secure counterparts of this function. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n## Exceptions  \n The `wcrtomb` function is multithread safe as long as no function in the current thread calls `setlocale` while this function is executing and while the `mbstate` is null.  \n  \n## Example  \n  \n```  \n// crt_wcrtomb.c  \n// compile with: /W3  \n// This program converts a wide character  \n// to its corresponding multibyte character.  \n  \n#include <string.h>  \n#include <stdio.h>  \n#include <wchar.h>  \n  \nint main( void )  \n{  \n    size_t      sizeOfCovertion = 0;  \n    mbstate_t   mbstate;  \n    char        mbStr = 0;  \n    wchar_t*    wcStr = L\"Q\";  \n  \n    // Reset to initial conversion state  \n    memset(&mbstate, 0, sizeof(mbstate));  \n  \n    sizeOfCovertion = wcrtomb(&mbStr, *wcStr, &mbstate); // C4996  \n    // Note: wcrtomb is deprecated; consider using wcrtomb_s instead  \n    if (sizeOfCovertion > 0)  \n    {  \n        printf(\"The corresponding wide character \\\"\");  \n        wprintf(L\"%s\\\"\", wcStr);  \n        printf(\" was converted to the \\\"%c\\\" \", mbStr);  \n        printf(\"multibyte character.\\n\");  \n    }  \n    else  \n    {  \n        printf(\"No corresponding multibyte character \"  \n               \"was found.\\n\");  \n    }  \n}  \n```  \n  \n```Output  \nThe corresponding wide character \"Q\" was converted to the \"Q\" multibyte character.  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`wcrtomb`|\\<wchar.h>|  \n  \n## See Also  \n [Data Conversion](../../c-runtime-library/data-conversion.md)   \n [Locale](../../c-runtime-library/locale.md)   \n [Interpretation of Multibyte-Character Sequences](../../c-runtime-library/interpretation-of-multibyte-character-sequences.md)   \n [mbsinit](../../c-runtime-library/reference/mbsinit.md)"}