<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7dd9d5905443bdc576df467e3fe05d476423ac14</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\alternatives-to-the-document-view-architecture.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">439020296bf23ba3cc92a3208de9a785fd712d7d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3076817ca20352a88dc3c64cbb3f297ad1198109</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Alternatives to the Document-View Architecture | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Alternatives to the Document/View Architecture</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>MFC applications normally use the document/view architecture to manage information, file formats, and the visual representation of data to users.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For the majority of desktop applications, the document/view architecture is an appropriate and efficient application architecture.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This architecture separates data from viewing and, in most cases, simplifies your application and reduces redundant code.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>However, the document/view architecture is not appropriate for some situations.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Consider these examples:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If you are porting an application written in C for Windows, you might want to complete your port before adding document/view support to your application.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you are writing a lightweight utility, you might find that you can do without the document/view architecture.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If your original code already mixes data management with data viewing, moving the code to the document/view model is not worth the effort because you must separate the two.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You might prefer to leave the code as is.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To create an application that does not use the document/view architecture, clear the <bpt id="p1">**</bpt>Document/View architecture support<ept id="p1">**</ept> check box in step 1 of the MFC Application Wizard.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>MFC Application Wizard<ept id="p1">](../mfc/reference/mfc-application-wizard.md)</ept> for details.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Dialog-based applications produced by the MFC Application Wizard do not use the document/view architecture, so the <bpt id="p1">**</bpt>Document/View architecture support<ept id="p1">**</ept> check box is disabled if you select the dialog application type.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The Visual C++ wizards, as well as the source and dialog editors, work with the generated application just as they would with any other Wizard-generated application.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The application can support toolbars, scrollbars, and a status bar, and has an <bpt id="p1">**</bpt>About<ept id="p1">**</ept> box.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Your application will not register any document templates, and it will not contain a document class.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Note that your generated application has a view class, <bpt id="p1">**</bpt>CChildView<ept id="p1">**</ept>, derived from <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>MFC creates and positions one instance of the view class within the frame windows created by your application.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>MFC still enforces using a view window, because it simplifies positioning and managing the application's content.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can add painting code to the <ph id="ph1">`OnPaint`</ph> member of this class.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Your code should add scrollbars to the view rather than to the frame.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Because the document/view architecture provided by MFC is responsible for implementing many of an application's basic features, its absence in your project means that you are responsible for implementing many important features of your application:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>As provided by the MFC Application Wizard, the menu for your application contains only <ph id="ph1">`New`</ph> and <ph id="ph2">`Exit`</ph> commands on the <bpt id="p1">**</bpt>File<ept id="p1">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>(The <ph id="ph1">`New`</ph> command is supported only for MDI applications, not SDI applications without Document/View support.) The generated menu resource will not support an MRU (most recently used) list.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You must add handler functions and implementations for any commands that your application will support, including <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Save<ept id="p2">**</ept> on the <bpt id="p3">**</bpt>File<ept id="p3">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>MFC normally provides code to support these features, but that support is tightly bound to the document/view architecture.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The toolbar for your application, if you requested one, will be minimal.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>It is strongly recommended that you use the MFC Application Wizard to create applications without the document/view architecture, because the wizard guarantees a correct MFC architecture.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>However, if you must avoid using the wizard, here are several approaches for bypassing the document/view architecture in your code:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Treat the document as an unused appendage and implement your data management code in the view class, as suggested above.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Overhead for the document is relatively low.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A single <bpt id="p1">[</bpt>CDocument<ept id="p1">](../mfc/reference/cdocument-class.md)</ept> object incurs a small amount of overhead by itself, plus the small overhead of <bpt id="p2">**</bpt>CDocument<ept id="p2">**</ept>'s base classes, <bpt id="p3">[</bpt>CCmdTarget<ept id="p3">](../mfc/reference/ccmdtarget-class.md)</ept> and <bpt id="p4">[</bpt>CObject<ept id="p4">](../mfc/reference/cobject-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Both of the latter classes are small.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Declared in <bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept>:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Two <ph id="ph1">`CString`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Three <bpt id="p1">**</bpt>BOOL<ept id="p1">**</ept>s.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>One <ph id="ph1">`CDocTemplate`</ph> pointer.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>One <ph id="ph1">`CPtrList`</ph> object, which contains a list of the document's views.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Additionally, the document requires the amount of time to create the document object, its view objects, a frame window, and a document template object.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Treat both the document and view as unused appendages.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Put your data management and drawing code in the frame window rather than the view.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This approach is closer to the C-language programming model.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Override the parts of the MFC framework that create the document and view to eliminate creating them at all.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The document creation process begins with a call to <ph id="ph1">`CWinApp::AddDocTemplate`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Eliminate that call from your application class's <ph id="ph1">`InitInstance`</ph> member function and, instead, create a frame window in <ph id="ph2">`InitInstance`</ph> yourself.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Put your data management code in your frame window class.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The document/view creation process is illustrated in <bpt id="p1">[</bpt>Document/View Creation<ept id="p1">](../mfc/document-view-creation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This is more work and requires a deeper understanding of the framework, but it frees you entirely of the document/view overhead.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The article <bpt id="p1">[</bpt>MFC: Using Database Classes Without Documents and Views<ept id="p1">](../data/mfc-using-database-classes-without-documents-and-views.md)</ept> gives more concrete examples of document/view alternatives in the context of database applications.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Document/View Architecture</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>