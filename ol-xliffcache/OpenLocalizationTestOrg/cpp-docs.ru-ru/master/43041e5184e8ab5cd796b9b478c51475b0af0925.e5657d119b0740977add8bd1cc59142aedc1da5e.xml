{"nodes":[{"pos":[12,53],"content":"map::size_type (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"map::size_type (STL-CLR) | Microsoft Docs","pos":[0,41]}]},{"content":"map::size_type (STL/CLR)","pos":[634,658]},{"content":"The type of a signed distance between two element.","pos":[659,709]},{"content":"Syntax","pos":[718,724]},{"content":"Remarks","pos":[773,780]},{"content":"The type describes a non-negative element count.","pos":[784,832]},{"content":"Example","pos":[841,848]},{"content":"Requirements","pos":[1698,1710]},{"pos":[1714,1739],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/map&gt;","source":"**Header:** \\<cliext/map>"},{"pos":[1746,1767],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[1776,1784]},{"content":"map (STL/CLR)","pos":[1789,1802]},{"content":"map::empty (STL/CLR)","pos":[1835,1855]}],"content":"---\ntitle: \"map::size_type (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::map::size_type\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"size_type member [STL/CLR]\"\nms.assetid: 6204685d-caf8-4d9e-9359-0768c74e2e6d\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# map::size_type (STL/CLR)\nThe type of a signed distance between two element.  \n  \n## Syntax  \n  \n```  \ntypedef int size_type;  \n```  \n  \n## Remarks  \n The type describes a non-negative element count.  \n  \n## Example  \n  \n```  \n// cliext_map_size_type.cpp   \n// compile with: /clr   \n#include <cliext/map>   \n  \ntypedef cliext::map<wchar_t, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n    c1.insert(Mymap::make_value(L'a', 1));   \n    c1.insert(Mymap::make_value(L'b', 2));   \n    c1.insert(Mymap::make_value(L'c', 3));   \n  \n// display contents \" [a 1] [b 2] [c 3]\"   \n    for each (Mymap::value_type elem in c1)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n  \n// compute positive difference   \n    Mymap::size_type diff = 0;   \n    for (Mymap::iterator it = c1.begin(); it != c1.end(); ++it)   \n        ++diff;   \n    System::Console::WriteLine(\"end()-begin() = {0}\", diff);   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n [a 1] [b 2] [c 3]  \nend()-begin() = 3  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/map>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [map (STL/CLR)](../dotnet/map-stl-clr.md)   \n [map::empty (STL/CLR)](../dotnet/map-empty-stl-clr.md)"}