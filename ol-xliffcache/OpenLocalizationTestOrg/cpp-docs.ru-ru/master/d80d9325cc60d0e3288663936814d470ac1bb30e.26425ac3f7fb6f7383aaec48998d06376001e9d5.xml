{"nodes":[{"pos":[12,52],"content":"CMFCVisualManager Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMFCVisualManager Class | Microsoft Docs","pos":[0,40]}]},{"pos":[625,648],"content":"CMFCVisualManager Class","linkify":"CMFCVisualManager Class","nodes":[{"content":"CMFCVisualManager Class","pos":[0,23]}]},{"content":"Provides support for changing the appearance of your application at a global level.","pos":[649,732]},{"content":"The <ph id=\"ph1\">`CMFCVisualManager`</ph> class works together with a class that provides instructions to draw the GUI controls of your application using a consistent style.","pos":[733,888],"source":" The `CMFCVisualManager` class works together with a class that provides instructions to draw the GUI controls of your application using a consistent style."},{"content":"These other classes are referred to as visual managers and they inherit from <ph id=\"ph1\">`CMFCBaseVisualManager`</ph>.","pos":[889,990],"source":" These other classes are referred to as visual managers and they inherit from `CMFCBaseVisualManager`."},{"pos":[999,1005],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1086,1093],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1103,1122],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1129,1133]},{"content":"Description","pos":[1134,1145]},{"content":"Default constructor.","pos":[1222,1242]},{"pos":[1253,1267],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1274,1278]},{"content":"Description","pos":[1279,1290]},{"pos":[1328,1395],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::AdjustFrames<ept id=\"p1\">](#cmfcvisualmanager__adjustframes)</ept>","source":"[CMFCVisualManager::AdjustFrames](#cmfcvisualmanager__adjustframes)"},{"pos":[1401,1472],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::AdjustToolbars<ept id=\"p1\">](#cmfcvisualmanager__adjusttoolbars)</ept>","source":"[CMFCVisualManager::AdjustToolbars](#cmfcvisualmanager__adjusttoolbars)"},{"pos":[1478,1563],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::AlwaysHighlight3DTabs<ept id=\"p1\">](#cmfcvisualmanager__alwayshighlight3dtabs)</ept>","source":"[CMFCVisualManager::AlwaysHighlight3DTabs](#cmfcvisualmanager__alwayshighlight3dtabs)"},{"content":"Called by the framework to determine whether 3D tabs should always be drawn by using a highlight color.","pos":[1564,1667]},{"pos":[1672,1745],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::DestroyInstance<ept id=\"p1\">](#cmfcvisualmanager__destroyinstance)</ept>","source":"[CMFCVisualManager::DestroyInstance](#cmfcvisualmanager__destroyinstance)"},{"pos":[1751,1836],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::DoDrawHeaderSortArrow<ept id=\"p1\">](#cmfcvisualmanager__dodrawheadersortarrow)</ept>","source":"[CMFCVisualManager::DoDrawHeaderSortArrow](#cmfcvisualmanager__dodrawheadersortarrow)"},{"pos":[1842,1933],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::DrawComboDropButtonWinXP<ept id=\"p1\">](#cmfcvisualmanager__drawcombodropbuttonwinxp)</ept>","source":"[CMFCVisualManager::DrawComboDropButtonWinXP](#cmfcvisualmanager__drawcombodropbuttonwinxp)"},{"pos":[1939,2020],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::DrawPushButtonWinXP<ept id=\"p1\">](#cmfcvisualmanager__drawpushbuttonwinxp)</ept>","source":"[CMFCVisualManager::DrawPushButtonWinXP](#cmfcvisualmanager__drawpushbuttonwinxp)"},{"pos":[2026,2099],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::DrawTextOnGlass<ept id=\"p1\">](#cmfcvisualmanager__drawtextonglass)</ept>","source":"[CMFCVisualManager::DrawTextOnGlass](#cmfcvisualmanager__drawtextonglass)"},{"pos":[2105,2200],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::GetAutoHideButtonTextColor<ept id=\"p1\">](#cmfcvisualmanager__getautohidebuttontextcolor)</ept>","source":"[CMFCVisualManager::GetAutoHideButtonTextColor](#cmfcvisualmanager__getautohidebuttontextcolor)"},{"content":"Called by the framework to retrieve the text color for an auto-hide button.","pos":[2201,2276]},{"pos":[2281,2364],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::GetButtonExtraBorder<ept id=\"p1\">](#cmfcvisualmanager__getbuttonextraborder)</ept>","source":"[CMFCVisualManager::GetButtonExtraBorder](#cmfcvisualmanager__getbuttonextraborder)"},{"content":"Called by the framework to retrieve the increased button size that the current visual manager requires to draw a button.","pos":[2365,2485]},{"pos":[2490,2577],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::GetCaptionBarTextColor<ept id=\"p1\">](#cmfcvisualmanager__getcaptionbartextcolor)</ept>","source":"[CMFCVisualManager::GetCaptionBarTextColor](#cmfcvisualmanager__getcaptionbartextcolor)"},{"content":"Called by the framework to retrieve the text color of a caption bar.","pos":[2578,2646]},{"pos":[2651,2744],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::GetDockingTabsBordersSize<ept id=\"p1\">](#cmfcvisualmanager__getdockingtabsborderssize)</ept>","source":"[CMFCVisualManager::GetDockingTabsBordersSize](#cmfcvisualmanager__getdockingtabsborderssize)"},{"content":"Called by the framework to retrieve the size for the border of a docked tabbed bar.","pos":[2745,2828]},{"pos":[2833,2938],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::GetHighlightedMenuItemTextColor<ept id=\"p1\">](#cmfcvisualmanager__gethighlightedmenuitemtextcolor)</ept>","source":"[CMFCVisualManager::GetHighlightedMenuItemTextColor](#cmfcvisualmanager__gethighlightedmenuitemtextcolor)"},{"pos":[2944,3009],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::GetInstance<ept id=\"p1\">](#cmfcvisualmanager__getinstance)</ept>","source":"[CMFCVisualManager::GetInstance](#cmfcvisualmanager__getinstance)"},{"pos":[3010,3062],"content":"Returns a pointer to the <ph id=\"ph1\">`CMFCVisualManager`</ph> object.","source":"Returns a pointer to the `CMFCVisualManager` object."},{"pos":[3067,3152],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::GetMDITabsBordersSize<ept id=\"p1\">](#cmfcvisualmanager__getmditabsborderssize)</ept>","source":"[CMFCVisualManager::GetMDITabsBordersSize](#cmfcvisualmanager__getmditabsborderssize)"},{"content":"Called by the framework to retrieve the border size of the MDITabs window.","pos":[3153,3227]},{"pos":[3232,3315],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::GetMenuItemTextColor<ept id=\"p1\">](#cmfcvisualmanager__getmenuitemtextcolor)</ept>","source":"[CMFCVisualManager::GetMenuItemTextColor](#cmfcvisualmanager__getmenuitemtextcolor)"},{"pos":[3321,3400],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::GetMenuShadowDepth<ept id=\"p1\">](#cmfcvisualmanager__getmenushadowdepth)</ept>","source":"[CMFCVisualManager::GetMenuShadowDepth](#cmfcvisualmanager__getmenushadowdepth)"},{"content":"Returns a value that determines the width and height of a menu shadow.","pos":[3401,3471]},{"pos":[3476,3543],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::GetNcBtnSize<ept id=\"p1\">](#cmfcvisualmanager__getncbtnsize)</ept>","source":"[CMFCVisualManager::GetNcBtnSize](#cmfcvisualmanager__getncbtnsize)"},{"content":"Called by the framework to determine the size of the system buttons based on the current visual manager.","pos":[3544,3648]},{"content":"The system buttons are the buttons in the caption of the main frame that map to the commands <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Minimize<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Maximize<ept id=\"p3\">**</ept>, and <bpt id=\"p4\">**</bpt>Restore<ept id=\"p4\">**</ept>.","pos":[3649,3797],"source":" The system buttons are the buttons in the caption of the main frame that map to the commands **Close**, **Minimize**, **Maximize**, and **Restore**."},{"pos":[3802,3889],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::GetPopupMenuBorderSize<ept id=\"p1\">](#cmfcvisualmanager__getpopupmenubordersize)</ept>","source":"[CMFCVisualManager::GetPopupMenuBorderSize](#cmfcvisualmanager__getpopupmenubordersize)"},{"content":"Called by the framework to retrieve the size of the border for a popup menu.","pos":[3890,3966]},{"pos":[3971,4064],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::GetPropertyGridGroupColor<ept id=\"p1\">](#cmfcvisualmanager__getpropertygridgroupcolor)</ept>","source":"[CMFCVisualManager::GetPropertyGridGroupColor](#cmfcvisualmanager__getpropertygridgroupcolor)"},{"content":"Called by the framework to retrieve the background color of a property list.","pos":[4065,4141]},{"pos":[4146,4247],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::GetPropertyGridGroupTextColor<ept id=\"p1\">](#cmfcvisualmanager__getpropertygridgrouptextcolor)</ept>","source":"[CMFCVisualManager::GetPropertyGridGroupTextColor](#cmfcvisualmanager__getpropertygridgrouptextcolor)"},{"content":"Called by the framework to retrieve the text color of a property list.","pos":[4248,4318]},{"pos":[4323,4420],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::GetRibbonHyperlinkTextColor<ept id=\"p1\">](#cmfcvisualmanager__getribbonhyperlinktextcolor)</ept>","source":"[CMFCVisualManager::GetRibbonHyperlinkTextColor](#cmfcvisualmanager__getribbonhyperlinktextcolor)"},{"pos":[4426,4517],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::GetRibbonPopupBorderSize<ept id=\"p1\">](#cmfcvisualmanager__getribbonpopupbordersize)</ept>","source":"[CMFCVisualManager::GetRibbonPopupBorderSize](#cmfcvisualmanager__getribbonpopupbordersize)"},{"pos":[4523,4638],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::GetRibbonQuickAccessToolBarTextColor<ept id=\"p1\">](#cmfcvisualmanager__getribbonquickaccesstoolbartextcolor)</ept>","source":"[CMFCVisualManager::GetRibbonQuickAccessToolBarTextColor](#cmfcvisualmanager__getribbonquickaccesstoolbartextcolor)"},{"pos":[4644,4729],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::GetRibbonSliderColors<ept id=\"p1\">](#cmfcvisualmanager__getribbonslidercolors)</ept>","source":"[CMFCVisualManager::GetRibbonSliderColors](#cmfcvisualmanager__getribbonslidercolors)"},{"pos":[4735,4828],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::GetShowAllMenuItemsHeight<ept id=\"p1\">](#cmfcvisualmanager__getshowallmenuitemsheight)</ept>","source":"[CMFCVisualManager::GetShowAllMenuItemsHeight](#cmfcvisualmanager__getshowallmenuitemsheight)"},{"pos":[4834,4937],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::GetSmartDockingBaseGuideColors<ept id=\"p1\">](#cmfcvisualmanager__getsmartdockingbaseguidecolors)</ept>","source":"[CMFCVisualManager::GetSmartDockingBaseGuideColors](#cmfcvisualmanager__getsmartdockingbaseguidecolors)"},{"pos":[4943,5052],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::GetSmartDockingHighlightToneColor<ept id=\"p1\">](#cmfcvisualmanager__getsmartdockinghighlighttonecolor)</ept>","source":"[CMFCVisualManager::GetSmartDockingHighlightToneColor](#cmfcvisualmanager__getsmartdockinghighlighttonecolor)"},{"pos":[5058,5141],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::GetSmartDockingTheme<ept id=\"p1\">](#cmfcvisualmanager__getsmartdockingtheme)</ept>","source":"[CMFCVisualManager::GetSmartDockingTheme](#cmfcvisualmanager__getsmartdockingtheme)"},{"content":"Returns a theme used to display smart docking markers.","pos":[5142,5196]},{"pos":[5201,5294],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::GetStatusBarPaneTextColor<ept id=\"p1\">](#cmfcvisualmanager__getstatusbarpanetextcolor)</ept>","source":"[CMFCVisualManager::GetStatusBarPaneTextColor](#cmfcvisualmanager__getstatusbarpanetextcolor)"},{"pos":[5300,5377],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::GetTabFrameColors<ept id=\"p1\">](#cmfcvisualmanager__gettabframecolors)</ept>","source":"[CMFCVisualManager::GetTabFrameColors](#cmfcvisualmanager__gettabframecolors)"},{"content":"Called by the framework to retrieve the set of colors to use when it draws a tab frame.","pos":[5378,5465]},{"pos":[5470,5543],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::GetTabTextColor<ept id=\"p1\">](#cmfcvisualmanager__gettabtextcolor)</ept>","source":"[CMFCVisualManager::GetTabTextColor](#cmfcvisualmanager__gettabtextcolor)"},{"pos":[5549,5642],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::GetToolbarButtonTextColor<ept id=\"p1\">](#cmfcvisualmanager__gettoolbarbuttontextcolor)</ept>","source":"[CMFCVisualManager::GetToolbarButtonTextColor](#cmfcvisualmanager__gettoolbarbuttontextcolor)"},{"content":"Called by the framework to retrieve the current color of the text on the toolbar button.","pos":[5643,5731]},{"content":"This color varies based on the current visual manager and the button state.","pos":[5732,5807]},{"pos":[5812,5909],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::GetToolbarDisabledTextColor<ept id=\"p1\">](#cmfcvisualmanager__gettoolbardisabledtextcolor)</ept>","source":"[CMFCVisualManager::GetToolbarDisabledTextColor](#cmfcvisualmanager__gettoolbardisabledtextcolor)"},{"content":"Called by the framework to determine the color of the text that is displayed on disabled toolbar elements.","pos":[5910,6016]},{"pos":[6021,6112],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::GetToolbarHighlightColor<ept id=\"p1\">](#cmfcvisualmanager__gettoolbarhighlightcolor)</ept>","source":"[CMFCVisualManager::GetToolbarHighlightColor](#cmfcvisualmanager__gettoolbarhighlightcolor)"},{"pos":[6118,6189],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::GetToolTipInfo<ept id=\"p1\">](#cmfcvisualmanager__gettooltipinfo)</ept>","source":"[CMFCVisualManager::GetToolTipInfo](#cmfcvisualmanager__gettooltipinfo)"},{"pos":[6195,6294],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::HasOverlappedAutoHideButtons<ept id=\"p1\">](#cmfcvisualmanager__hasoverlappedautohidebuttons)</ept>","source":"[CMFCVisualManager::HasOverlappedAutoHideButtons](#cmfcvisualmanager__hasoverlappedautohidebuttons)"},{"content":"Specifies whether auto-hide buttons overlap.","pos":[6295,6339]},{"pos":[6344,6429],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::IsDockingTabHasBorder<ept id=\"p1\">](#cmfcvisualmanager__isdockingtabhasborder)</ept>","source":"[CMFCVisualManager::IsDockingTabHasBorder](#cmfcvisualmanager__isdockingtabhasborder)"},{"content":"Specifies whether the current visual manager draws a border around tabbed docking bars.","pos":[6430,6517]},{"pos":[6522,6607],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::IsEmbossDisabledImage<ept id=\"p1\">](#cmfcvisualmanager__isembossdisabledimage)</ept>","source":"[CMFCVisualManager::IsEmbossDisabledImage](#cmfcvisualmanager__isembossdisabledimage)"},{"content":"Specifies whether disabled images should be embossed.","pos":[6608,6661]},{"pos":[6666,6747],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::IsFadeInactiveImage<ept id=\"p1\">](#cmfcvisualmanager__isfadeinactiveimage)</ept>","source":"[CMFCVisualManager::IsFadeInactiveImage](#cmfcvisualmanager__isfadeinactiveimage)"},{"content":"Called by the framework to determine whether inactive images on a toolbar or menu appear dimmed.","pos":[6748,6844]},{"pos":[6849,6920],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::IsMenuFlatLook<ept id=\"p1\">](#cmfcvisualmanager__ismenuflatlook)</ept>","source":"[CMFCVisualManager::IsMenuFlatLook](#cmfcvisualmanager__ismenuflatlook)"},{"content":"Specifies whether menu buttons have a flattened appearance.","pos":[6921,6980]},{"pos":[6985,7068],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::IsOfficeXPStyleMenus<ept id=\"p1\">](#cmfcvisualmanager__isofficexpstylemenus)</ept>","source":"[CMFCVisualManager::IsOfficeXPStyleMenus](#cmfcvisualmanager__isofficexpstylemenus)"},{"content":"Specifies whether the visual manager implements Office XP-style menus.","pos":[7069,7139]},{"pos":[7144,7223],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::IsOwnerDrawCaption<ept id=\"p1\">](#cmfcvisualmanager__isownerdrawcaption)</ept>","source":"[CMFCVisualManager::IsOwnerDrawCaption](#cmfcvisualmanager__isownerdrawcaption)"},{"content":"Specifies whether the current visual manager implements owner-drawn captions of a frame window.","pos":[7224,7319]},{"pos":[7324,7415],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::IsShadowHighlightedImage<ept id=\"p1\">](#cmfcvisualmanager__isshadowhighlightedimage)</ept>","source":"[CMFCVisualManager::IsShadowHighlightedImage](#cmfcvisualmanager__isshadowhighlightedimage)"},{"content":"Specifies whether a highlighted image has a shadow.","pos":[7416,7467]},{"pos":[7472,7567],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawAutoHideButtonBorder<ept id=\"p1\">](#cmfcvisualmanager__ondrawautohidebuttonborder)</ept>","source":"[CMFCVisualManager::OnDrawAutoHideButtonBorder](#cmfcvisualmanager__ondrawautohidebuttonborder)"},{"content":"Called by the framework when it draws the border for an auto-hide button.","pos":[7568,7641]},{"pos":[7646,7721],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawBarGripper<ept id=\"p1\">](#cmfcvisualmanager__ondrawbargripper)</ept>","source":"[CMFCVisualManager::OnDrawBarGripper](#cmfcvisualmanager__ondrawbargripper)"},{"content":"Called by the framework when it draws the gripper of a control bar.","pos":[7722,7789]},{"content":"The user must click the gripper in order to move the control bar.","pos":[7790,7855]},{"pos":[7860,7939],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawBrowseButton<ept id=\"p1\">](#cmfcvisualmanager__ondrawbrowsebutton)</ept>","source":"[CMFCVisualManager::OnDrawBrowseButton](#cmfcvisualmanager__ondrawbrowsebutton)"},{"pos":[7940,8105],"content":"Called by the framework when it draws a browse button that belongs to an edit control ( <bpt id=\"p1\">[</bpt>CMFCEditBrowseCtrl Class<ept id=\"p1\">](../../mfc/reference/cmfceditbrowsectrl-class.md)</ept>).","source":"Called by the framework when it draws a browse button that belongs to an edit control ( [CMFCEditBrowseCtrl Class](../../mfc/reference/cmfceditbrowsectrl-class.md))."},{"pos":[8110,8189],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawButtonBorder<ept id=\"p1\">](#cmfcvisualmanager__ondrawbuttonborder)</ept>","source":"[CMFCVisualManager::OnDrawButtonBorder](#cmfcvisualmanager__ondrawbuttonborder)"},{"content":"Called by the framework when it draws the border of a toolbar button.","pos":[8190,8259]},{"pos":[8264,8349],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawButtonSeparator<ept id=\"p1\">](#cmfcvisualmanager__ondrawbuttonseparator)</ept>","source":"[CMFCVisualManager::OnDrawButtonSeparator](#cmfcvisualmanager__ondrawbuttonseparator)"},{"pos":[8355,8442],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawCaptionBarBorder<ept id=\"p1\">](#cmfcvisualmanager__ondrawcaptionbarborder)</ept>","source":"[CMFCVisualManager::OnDrawCaptionBarBorder](#cmfcvisualmanager__ondrawcaptionbarborder)"},{"content":"Called by the framework when it draws the caption bar border.","pos":[8443,8504]},{"pos":[8509,8608],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawCaptionBarButtonBorder<ept id=\"p1\">](#cmfcvisualmanager__ondrawcaptionbarbuttonborder)</ept>","source":"[CMFCVisualManager::OnDrawCaptionBarButtonBorder](#cmfcvisualmanager__ondrawcaptionbarbuttonborder)"},{"pos":[8614,8705],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawCaptionBarInfoArea<ept id=\"p1\">](#cmfcvisualmanager__ondrawcaptionbarinfoarea)</ept>","source":"[CMFCVisualManager::OnDrawCaptionBarInfoArea](#cmfcvisualmanager__ondrawcaptionbarinfoarea)"},{"pos":[8711,8792],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawCaptionButton<ept id=\"p1\">](#cmfcvisualmanager__ondrawcaptionbutton)</ept>","source":"[CMFCVisualManager::OnDrawCaptionButton](#cmfcvisualmanager__ondrawcaptionbutton)"},{"content":"Called by the framework when it draws a caption button.","pos":[8793,8848]},{"pos":[8853,8924],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawCheckBox<ept id=\"p1\">](#cmfcvisualmanager__ondrawcheckbox)</ept>","source":"[CMFCVisualManager::OnDrawCheckBox](#cmfcvisualmanager__ondrawcheckbox)"},{"pos":[8930,9005],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawCheckBoxEx<ept id=\"p1\">](#cmfcvisualmanager__ondrawcheckboxex)</ept>","source":"[CMFCVisualManager::OnDrawCheckBoxEx](#cmfcvisualmanager__ondrawcheckboxex)"},{"pos":[9011,9088],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawComboBorder<ept id=\"p1\">](#cmfcvisualmanager__ondrawcomboborder)</ept>","source":"[CMFCVisualManager::OnDrawComboBorder](#cmfcvisualmanager__ondrawcomboborder)"},{"content":"Called by the framework when it draws the border of a combo box button.","pos":[9089,9160]},{"pos":[9165,9250],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawComboDropButton<ept id=\"p1\">](#cmfcvisualmanager__ondrawcombodropbutton)</ept>","source":"[CMFCVisualManager::OnDrawComboDropButton](#cmfcvisualmanager__ondrawcombodropbutton)"},{"content":"Called by the framework when it draws a combo box drop button.","pos":[9251,9313]},{"pos":[9318,9399],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawControlBorder<ept id=\"p1\">](#cmfcvisualmanager__ondrawcontrolborder)</ept>","source":"[CMFCVisualManager::OnDrawControlBorder](#cmfcvisualmanager__ondrawcontrolborder)"},{"pos":[9405,9496],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawDefaultRibbonImage<ept id=\"p1\">](#cmfcvisualmanager__ondrawdefaultribbonimage)</ept>","source":"[CMFCVisualManager::OnDrawDefaultRibbonImage](#cmfcvisualmanager__ondrawdefaultribbonimage)"},{"content":"Called by the framework when it draws the default ribbon image.","pos":[9497,9560]},{"pos":[9565,9640],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawEditBorder<ept id=\"p1\">](#cmfcvisualmanager__ondraweditborder)</ept>","source":"[CMFCVisualManager::OnDrawEditBorder](#cmfcvisualmanager__ondraweditborder)"},{"pos":[9641,9786],"content":"Called by the framework when it draws a border around a <bpt id=\"p1\">[</bpt>CMFCToolBarEditBoxButton<ept id=\"p1\">](../../mfc/reference/cmfctoolbareditboxbutton-class.md)</ept> object.","source":"Called by the framework when it draws a border around a [CMFCToolBarEditBoxButton](../../mfc/reference/cmfctoolbareditboxbutton-class.md) object."},{"pos":[9791,9870],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawExpandingBox<ept id=\"p1\">](#cmfcvisualmanager__ondrawexpandingbox)</ept>","source":"[CMFCVisualManager::OnDrawExpandingBox](#cmfcvisualmanager__ondrawexpandingbox)"},{"pos":[9876,9973],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawFloatingToolbarBorder<ept id=\"p1\">](#cmfcvisualmanager__ondrawfloatingtoolbarborder)</ept>","source":"[CMFCVisualManager::OnDrawFloatingToolbarBorder](#cmfcvisualmanager__ondrawfloatingtoolbarborder)"},{"content":"Called by the framework when it draws the borders of a floating toolbar.","pos":[9974,10046]},{"content":"The floating toolbar is a toolbar that appears as a mini-frame window.","pos":[10047,10117]},{"pos":[10122,10209],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawHeaderCtrlBorder<ept id=\"p1\">](#cmfcvisualmanager__ondrawheaderctrlborder)</ept>","source":"[CMFCVisualManager::OnDrawHeaderCtrlBorder](#cmfcvisualmanager__ondrawheaderctrlborder)"},{"content":"Called by the framework when it draws the border that contains the header control.","pos":[10210,10292]},{"pos":[10297,10390],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawHeaderCtrlSortArrow<ept id=\"p1\">](#cmfcvisualmanager__ondrawheaderctrlsortarrow)</ept>","source":"[CMFCVisualManager::OnDrawHeaderCtrlSortArrow](#cmfcvisualmanager__ondrawheaderctrlsortarrow)"},{"content":"Called by the framework when it draws the header control sort arrow.","pos":[10391,10459]},{"pos":[10464,10567],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawMenuArrowOnCustomizeList<ept id=\"p1\">](#cmfcvisualmanager__ondrawmenuarrowoncustomizelist)</ept>","source":"[CMFCVisualManager::OnDrawMenuArrowOnCustomizeList](#cmfcvisualmanager__ondrawmenuarrowoncustomizelist)"},{"pos":[10573,10648],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawMenuBorder<ept id=\"p1\">](#cmfcvisualmanager__ondrawmenuborder)</ept>","source":"[CMFCVisualManager::OnDrawMenuBorder](#cmfcvisualmanager__ondrawmenuborder)"},{"content":"Called by the framework when it draws a menu border.","pos":[10649,10701]},{"pos":[10706,10779],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawMenuCheck<ept id=\"p1\">](#cmfcvisualmanager__ondrawmenucheck)</ept>","source":"[CMFCVisualManager::OnDrawMenuCheck](#cmfcvisualmanager__ondrawmenucheck)"},{"pos":[10785,10868],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawMenuItemButton<ept id=\"p1\">](#cmfcvisualmanager__ondrawmenuitembutton)</ept>","source":"[CMFCVisualManager::OnDrawMenuItemButton](#cmfcvisualmanager__ondrawmenuitembutton)"},{"pos":[10874,10947],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawMenuLabel<ept id=\"p1\">](#cmfcvisualmanager__ondrawmenulabel)</ept>","source":"[CMFCVisualManager::OnDrawMenuLabel](#cmfcvisualmanager__ondrawmenulabel)"},{"pos":[10953,11034],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawMenuResizeBar<ept id=\"p1\">](#cmfcvisualmanager__ondrawmenuresizebar)</ept>","source":"[CMFCVisualManager::OnDrawMenuResizeBar](#cmfcvisualmanager__ondrawmenuresizebar)"},{"pos":[11040,11127],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawMenuScrollButton<ept id=\"p1\">](#cmfcvisualmanager__ondrawmenuscrollbutton)</ept>","source":"[CMFCVisualManager::OnDrawMenuScrollButton](#cmfcvisualmanager__ondrawmenuscrollbutton)"},{"content":"Called by the framework when it draws a menu scroll button.","pos":[11128,11187]},{"pos":[11192,11267],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawMenuShadow<ept id=\"p1\">](#cmfcvisualmanager__ondrawmenushadow)</ept>","source":"[CMFCVisualManager::OnDrawMenuShadow](#cmfcvisualmanager__ondrawmenushadow)"},{"pos":[11273,11360],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawMenuSystemButton<ept id=\"p1\">](#cmfcvisualmanager__ondrawmenusystembutton)</ept>","source":"[CMFCVisualManager::OnDrawMenuSystemButton](#cmfcvisualmanager__ondrawmenusystembutton)"},{"pos":[11361,11478],"content":"Called by the framework when it draws the menu system buttons <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Minimize<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Maximize<ept id=\"p3\">**</ept>, and <bpt id=\"p4\">**</bpt>Restore<ept id=\"p4\">**</ept>.","source":"Called by the framework when it draws the menu system buttons **Close**, **Minimize**, **Maximize**, and **Restore**."},{"pos":[11483,11568],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawMiniFrameBorder<ept id=\"p1\">](#cmfcvisualmanager__ondrawminiframeborder)</ept>","source":"[CMFCVisualManager::OnDrawMiniFrameBorder](#cmfcvisualmanager__ondrawminiframeborder)"},{"pos":[11574,11665],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawOutlookBarSplitter<ept id=\"p1\">](#cmfcvisualmanager__ondrawoutlookbarsplitter)</ept>","source":"[CMFCVisualManager::OnDrawOutlookBarSplitter](#cmfcvisualmanager__ondrawoutlookbarsplitter)"},{"content":"Called by the framework when it draws the splitter for an Outlook bar.","pos":[11666,11736]},{"content":"The splitter is a horizontal bar used to group controls.","pos":[11737,11793]},{"pos":[11798,11899],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawOutlookPageButtonBorder<ept id=\"p1\">](#cmfcvisualmanager__ondrawoutlookpagebuttonborder)</ept>","source":"[CMFCVisualManager::OnDrawOutlookPageButtonBorder](#cmfcvisualmanager__ondrawoutlookpagebuttonborder)"},{"content":"Called by the framework when it draws the border of an Outlook page button.","pos":[11900,11975]},{"content":"Outlook page buttons appear if the Outlook bar pane contains more buttons than it can display.","pos":[11976,12070]},{"pos":[12075,12150],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawPaneBorder<ept id=\"p1\">](#cmfcvisualmanager__ondrawpaneborder)</ept>","source":"[CMFCVisualManager::OnDrawPaneBorder](#cmfcvisualmanager__ondrawpaneborder)"},{"pos":[12151,12255],"content":"Called by the framework when it draws the border of a <bpt id=\"p1\">[</bpt>CPane Class<ept id=\"p1\">](../../mfc/reference/cpane-class.md)</ept>.","source":"Called by the framework when it draws the border of a [CPane Class](../../mfc/reference/cpane-class.md)."},{"pos":[12260,12337],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawPaneCaption<ept id=\"p1\">](#cmfcvisualmanager__ondrawpanecaption)</ept>","source":"[CMFCVisualManager::OnDrawPaneCaption](#cmfcvisualmanager__ondrawpanecaption)"},{"pos":[12338,12402],"content":"Called by the framework when it draws the caption for a <ph id=\"ph1\">`CPane`</ph>.","source":"Called by the framework when it draws the caption for a `CPane`."},{"pos":[12407,12484],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawPaneDivider<ept id=\"p1\">](#cmfcvisualmanager__ondrawpanedivider)</ept>","source":"[CMFCVisualManager::OnDrawPaneDivider](#cmfcvisualmanager__ondrawpanedivider)"},{"pos":[12490,12579],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawPopupWindowBorder<ept id=\"p1\">](#cmfcvisualmanager__ondrawpopupwindowborder)</ept>","source":"[CMFCVisualManager::OnDrawPopupWindowBorder](#cmfcvisualmanager__ondrawpopupwindowborder)"},{"pos":[12585,12686],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawPopupWindowButtonBorder<ept id=\"p1\">](#cmfcvisualmanager__ondrawpopupwindowbuttonborder)</ept>","source":"[CMFCVisualManager::OnDrawPopupWindowButtonBorder](#cmfcvisualmanager__ondrawpopupwindowbuttonborder)"},{"pos":[12692,12783],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawPopupWindowCaption<ept id=\"p1\">](#cmfcvisualmanager__ondrawpopupwindowcaption)</ept>","source":"[CMFCVisualManager::OnDrawPopupWindowCaption](#cmfcvisualmanager__ondrawpopupwindowcaption)"},{"pos":[12789,12890],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawRibbonApplicationButton<ept id=\"p1\">](#cmfcvisualmanager__ondrawribbonapplicationbutton)</ept>","source":"[CMFCVisualManager::OnDrawRibbonApplicationButton](#cmfcvisualmanager__ondrawribbonapplicationbutton)"},{"pos":[12891,12963],"content":"Called by the framework when it draws the <bpt id=\"p1\">**</bpt>Main Button<ept id=\"p1\">**</ept> on the ribbon.","source":"Called by the framework when it draws the **Main Button** on the ribbon."},{"pos":[12968,13059],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawRibbonButtonBorder<ept id=\"p1\">](#cmfcvisualmanager__ondrawribbonbuttonborder)</ept>","source":"[CMFCVisualManager::OnDrawRibbonButtonBorder](#cmfcvisualmanager__ondrawribbonbuttonborder)"},{"content":"Called by the framework when it draws the border of a ribbon button.","pos":[13060,13128]},{"pos":[13133,13224],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawRibbonButtonsGroup<ept id=\"p1\">](#cmfcvisualmanager__ondrawribbonbuttonsgroup)</ept>","source":"[CMFCVisualManager::OnDrawRibbonButtonsGroup](#cmfcvisualmanager__ondrawribbonbuttonsgroup)"},{"content":"Called by the framework when it draws a group of buttons on the ribbon.","pos":[13225,13296]},{"pos":[13301,13382],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawRibbonCaption<ept id=\"p1\">](#cmfcvisualmanager__ondrawribboncaption)</ept>","source":"[CMFCVisualManager::OnDrawRibbonCaption](#cmfcvisualmanager__ondrawribboncaption)"},{"content":"Called by the framework when it draws the caption of the main frame, but only if the ribbon bar is integrated with the frame.","pos":[13383,13508]},{"pos":[13513,13606],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawRibbonCaptionButton<ept id=\"p1\">](#cmfcvisualmanager__ondrawribboncaptionbutton)</ept>","source":"[CMFCVisualManager::OnDrawRibbonCaptionButton](#cmfcvisualmanager__ondrawribboncaptionbutton)"},{"content":"Called by the framework when it draws a caption button located on the ribbon bar.","pos":[13607,13688]},{"pos":[13693,13776],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawRibbonCategory<ept id=\"p1\">](#cmfcvisualmanager__ondrawribboncategory)</ept>","source":"[CMFCVisualManager::OnDrawRibbonCategory](#cmfcvisualmanager__ondrawribboncategory)"},{"content":"Called by the framework when it draws a ribbon category.","pos":[13777,13833]},{"pos":[13838,13935],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawRibbonCategoryCaption<ept id=\"p1\">](#cmfcvisualmanager__ondrawribboncategorycaption)</ept>","source":"[CMFCVisualManager::OnDrawRibbonCategoryCaption](#cmfcvisualmanager__ondrawribboncategorycaption)"},{"content":"Called by the framework when it draws the caption for a ribbon category.","pos":[13936,14008]},{"pos":[14013,14108],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawRibbonCategoryScroll<ept id=\"p1\">](#cmfcvisualmanager__ondrawribboncategoryscroll)</ept>","source":"[CMFCVisualManager::OnDrawRibbonCategoryScroll](#cmfcvisualmanager__ondrawribboncategoryscroll)"},{"pos":[14114,14203],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawRibbonCategoryTab<ept id=\"p1\">](#cmfcvisualmanager__ondrawribboncategorytab)</ept>","source":"[CMFCVisualManager::OnDrawRibbonCategoryTab](#cmfcvisualmanager__ondrawribboncategorytab)"},{"content":"Called by the framework when it draws the tab for a ribbon category.","pos":[14204,14272]},{"pos":[14277,14372],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawRibbonCheckBoxOnList<ept id=\"p1\">](#cmfcvisualmanager__ondrawribboncheckboxonlist)</ept>","source":"[CMFCVisualManager::OnDrawRibbonCheckBoxOnList](#cmfcvisualmanager__ondrawribboncheckboxonlist)"},{"pos":[14378,14475],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawRibbonColorPaletteBox<ept id=\"p1\">](#cmfcvisualmanager__ondrawribboncolorpalettebox)</ept>","source":"[CMFCVisualManager::OnDrawRibbonColorPaletteBox](#cmfcvisualmanager__ondrawribboncolorpalettebox)"},{"pos":[14481,14596],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawRibbonDefaultPaneButtonContext<ept id=\"p1\">](#cmfcvisualmanager__ondrawribbondefaultpanebuttoncontext)</ept>","source":"[CMFCVisualManager::OnDrawRibbonDefaultPaneButtonContext](#cmfcvisualmanager__ondrawribbondefaultpanebuttoncontext)"},{"pos":[14602,14703],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawRibbonDefaultPaneButton<ept id=\"p1\">](#cmfcvisualmanager__ondrawribbondefaultpanebutton)</ept>","source":"[CMFCVisualManager::OnDrawRibbonDefaultPaneButton](#cmfcvisualmanager__ondrawribbondefaultpanebutton)"},{"content":"Called by the framework when it draws the ribbon pane default button.","pos":[14704,14773]},{"content":"The default button appears when the user shrinks a ribbon panel so that it is too small to display the ribbon elements.","pos":[14774,14893]},{"content":"The default button is drawn instead and the ribbon elements are added as items on a drop down menu.","pos":[14894,14993]},{"pos":[14998,15117],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawRibbonDefaultPaneButtonIndicator<ept id=\"p1\">](#cmfcvisualmanager__ondrawribbondefaultpanebuttonindicator)</ept>","source":"[CMFCVisualManager::OnDrawRibbonDefaultPaneButtonIndicator](#cmfcvisualmanager__ondrawribbondefaultpanebuttonindicator)"},{"pos":[15123,15216],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawRibbonGalleryBorder<ept id=\"p1\">](#cmfcvisualmanager__ondrawribbongalleryborder)</ept>","source":"[CMFCVisualManager::OnDrawRibbonGalleryBorder](#cmfcvisualmanager__ondrawribbongalleryborder)"},{"pos":[15222,15315],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawRibbonGalleryButton<ept id=\"p1\">](#cmfcvisualmanager__ondrawribbongallerybutton)</ept>","source":"[CMFCVisualManager::OnDrawRibbonGalleryButton](#cmfcvisualmanager__ondrawribbongallerybutton)"},{"pos":[15321,15400],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawRibbonKeyTip<ept id=\"p1\">](#cmfcvisualmanager__ondrawribbonkeytip)</ept>","source":"[CMFCVisualManager::OnDrawRibbonKeyTip](#cmfcvisualmanager__ondrawribbonkeytip)"},{"pos":[15406,15483],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawRibbonLabel<ept id=\"p1\">](#cmfcvisualmanager__ondrawribbonlabel)</ept>","source":"[CMFCVisualManager::OnDrawRibbonLabel](#cmfcvisualmanager__ondrawribbonlabel)"},{"content":"Called by the framework when it draws the ribbon label.","pos":[15484,15539]},{"pos":[15544,15653],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawRibbonMainPanelButtonBorder<ept id=\"p1\">](#cmfcvisualmanager__ondrawribbonmainpanelbuttonborder)</ept>","source":"[CMFCVisualManager::OnDrawRibbonMainPanelButtonBorder](#cmfcvisualmanager__ondrawribbonmainpanelbuttonborder)"},{"content":"Called by the framework when it draws the border of a ribbon button that is positioned on the <bpt id=\"p1\">**</bpt>Main<ept id=\"p1\">**</ept> panel.","pos":[15654,15763],"source":"Called by the framework when it draws the border of a ribbon button that is positioned on the **Main** panel."},{"content":"The <bpt id=\"p1\">**</bpt>Main<ept id=\"p1\">**</ept> panel is the panel that appears when a user clicks the <bpt id=\"p2\">**</bpt>Main Button<ept id=\"p2\">**</ept>.","pos":[15764,15848],"source":" The **Main** panel is the panel that appears when a user clicks the **Main Button**."},{"pos":[15853,15948],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawRibbonMainPanelFrame<ept id=\"p1\">](#cmfcvisualmanager__ondrawribbonmainpanelframe)</ept>","source":"[CMFCVisualManager::OnDrawRibbonMainPanelFrame](#cmfcvisualmanager__ondrawribbonmainpanelframe)"},{"pos":[15949,16023],"content":"Called by the framework when it draws the frame around the <bpt id=\"p1\">**</bpt>Main<ept id=\"p1\">**</ept> panel.","source":"Called by the framework when it draws the frame around the **Main** panel."},{"pos":[16028,16123],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawRibbonMenuCheckFrame<ept id=\"p1\">](#cmfcvisualmanager__ondrawribbonmenucheckframe)</ept>","source":"[CMFCVisualManager::OnDrawRibbonMenuCheckFrame](#cmfcvisualmanager__ondrawribbonmenucheckframe)"},{"pos":[16129,16206],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawRibbonPanel<ept id=\"p1\">](#cmfcvisualmanager__ondrawribbonpanel)</ept>","source":"[CMFCVisualManager::OnDrawRibbonPanel](#cmfcvisualmanager__ondrawribbonpanel)"},{"content":"Called by the framework when it draws a ribbon panel.","pos":[16207,16260]},{"pos":[16265,16356],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawRibbonPanelCaption<ept id=\"p1\">](#cmfcvisualmanager__ondrawribbonpanelcaption)</ept>","source":"[CMFCVisualManager::OnDrawRibbonPanelCaption](#cmfcvisualmanager__ondrawribbonpanelcaption)"},{"content":"Called by the framework when it draws the caption of a ribbon panel.","pos":[16357,16425]},{"pos":[16430,16519],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawRibbonProgressBar<ept id=\"p1\">](#cmfcvisualmanager__ondrawribbonprogressbar)</ept>","source":"[CMFCVisualManager::OnDrawRibbonProgressBar](#cmfcvisualmanager__ondrawribbonprogressbar)"},{"pos":[16520,16643],"content":"Called by the framework when it draws a <bpt id=\"p1\">[</bpt>CMFCRibbonProgressBar<ept id=\"p1\">](../../mfc/reference/cmfcribbonprogressbar-class.md)</ept> object.","source":"Called by the framework when it draws a [CMFCRibbonProgressBar](../../mfc/reference/cmfcribbonprogressbar-class.md) object."},{"pos":[16648,16769],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawRibbonQuickAccessToolBarSeparator<ept id=\"p1\">](#cmfcvisualmanager__ondrawribbonquickaccesstoolbarseparator)</ept>","source":"[CMFCVisualManager::OnDrawRibbonQuickAccessToolBarSeparator](#cmfcvisualmanager__ondrawribbonquickaccesstoolbarseparator)"},{"pos":[16770,16859],"content":"Called by the framework when it draws a separator on a ribbon's <bpt id=\"p1\">**</bpt>Quick Access Toolbar<ept id=\"p1\">**</ept>.","source":"Called by the framework when it draws a separator on a ribbon's **Quick Access Toolbar**."},{"pos":[16864,16963],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawRibbonRecentFilesFrame<ept id=\"p1\">](#cmfcvisualmanager__ondrawribbonrecentfilesframe)</ept>","source":"[CMFCVisualManager::OnDrawRibbonRecentFilesFrame](#cmfcvisualmanager__ondrawribbonrecentfilesframe)"},{"content":"Called by the framework when it draws a frame around a recent files list.","pos":[16964,17037]},{"pos":[17042,17135],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawRibbonSliderChannel<ept id=\"p1\">](#cmfcvisualmanager__ondrawribbonsliderchannel)</ept>","source":"[CMFCVisualManager::OnDrawRibbonSliderChannel](#cmfcvisualmanager__ondrawribbonsliderchannel)"},{"pos":[17136,17264],"content":"Called by the framework when it draws the channel of a <bpt id=\"p1\">[</bpt>CMFCRibbonSlider<ept id=\"p1\">](../../mfc/reference/cmfcribbonslider-class.md)</ept> object.","source":"Called by the framework when it draws the channel of a [CMFCRibbonSlider](../../mfc/reference/cmfcribbonslider-class.md) object."},{"pos":[17269,17358],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawRibbonSliderThumb<ept id=\"p1\">](#cmfcvisualmanager__ondrawribbonsliderthumb)</ept>","source":"[CMFCVisualManager::OnDrawRibbonSliderThumb](#cmfcvisualmanager__ondrawribbonsliderthumb)"},{"pos":[17359,17438],"content":"Called by the framework when it draws the thumb of a <ph id=\"ph1\">`CMFCRibbonSlider`</ph> object.","source":"Called by the framework when it draws the thumb of a `CMFCRibbonSlider` object."},{"pos":[17443,17542],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawRibbonSliderZoomButton<ept id=\"p1\">](#cmfcvisualmanager__ondrawribbonsliderzoombutton)</ept>","source":"[CMFCVisualManager::OnDrawRibbonSliderZoomButton](#cmfcvisualmanager__ondrawribbonsliderzoombutton)"},{"pos":[17543,17629],"content":"Called by the framework when it draws the zoom buttons of a <ph id=\"ph1\">`CMFCRibbonSlider`</ph> object.","source":"Called by the framework when it draws the zoom buttons of a `CMFCRibbonSlider` object."},{"pos":[17634,17727],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawRibbonStatusBarPane<ept id=\"p1\">](#cmfcvisualmanager__ondrawribbonstatusbarpane)</ept>","source":"[CMFCVisualManager::OnDrawRibbonStatusBarPane](#cmfcvisualmanager__ondrawribbonstatusbarpane)"},{"content":"Called by the framework when it draws the status-bar pane of a ribbon.","pos":[17728,17798]},{"pos":[17803,17888],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawRibbonTabsFrame<ept id=\"p1\">](#cmfcvisualmanager__ondrawribbontabsframe)</ept>","source":"[CMFCVisualManager::OnDrawRibbonTabsFrame](#cmfcvisualmanager__ondrawribbontabsframe)"},{"content":"Called by the framework when it draws a frame around a set of ribbon tabs.","pos":[17889,17963]},{"pos":[17968,18049],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawScrollButtons<ept id=\"p1\">](#cmfcvisualmanager__ondrawscrollbuttons)</ept>","source":"[CMFCVisualManager::OnDrawScrollButtons](#cmfcvisualmanager__ondrawscrollbuttons)"},{"pos":[18055,18128],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawSeparator<ept id=\"p1\">](#cmfcvisualmanager__ondrawseparator)</ept>","source":"[CMFCVisualManager::OnDrawSeparator](#cmfcvisualmanager__ondrawseparator)"},{"content":"Called by the framework when it draws a separator.","pos":[18129,18179]},{"content":"The separator is typically used on a control bar to separate groups of icons.","pos":[18180,18257]},{"pos":[18262,18349],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawShowAllMenuItems<ept id=\"p1\">](#cmfcvisualmanager__ondrawshowallmenuitems)</ept>","source":"[CMFCVisualManager::OnDrawShowAllMenuItems](#cmfcvisualmanager__ondrawshowallmenuitems)"},{"pos":[18355,18432],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawSpinButtons<ept id=\"p1\">](#cmfcvisualmanager__ondrawspinbuttons)</ept>","source":"[CMFCVisualManager::OnDrawSpinButtons](#cmfcvisualmanager__ondrawspinbuttons)"},{"content":"Called by the framework when it draws spin buttons.","pos":[18433,18484]},{"pos":[18489,18572],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawSplitterBorder<ept id=\"p1\">](#cmfcvisualmanager__ondrawsplitterborder)</ept>","source":"[CMFCVisualManager::OnDrawSplitterBorder](#cmfcvisualmanager__ondrawsplitterborder)"},{"content":"Called by the framework when it draws the border of a split window.","pos":[18573,18640]},{"pos":[18645,18722],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawSplitterBox<ept id=\"p1\">](#cmfcvisualmanager__ondrawsplitterbox)</ept>","source":"[CMFCVisualManager::OnDrawSplitterBox](#cmfcvisualmanager__ondrawsplitterbox)"},{"content":"Called by the framework when it draws the splitter drag box for a split window.","pos":[18723,18802]},{"pos":[18807,18900],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawStatusBarPaneBorder<ept id=\"p1\">](#cmfcvisualmanager__ondrawstatusbarpaneborder)</ept>","source":"[CMFCVisualManager::OnDrawStatusBarPaneBorder](#cmfcvisualmanager__ondrawstatusbarpaneborder)"},{"content":"Called by the framework when it draws the border for a status-bar pane.","pos":[18901,18972]},{"pos":[18977,19066],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawStatusBarProgress<ept id=\"p1\">](#cmfcvisualmanager__ondrawstatusbarprogress)</ept>","source":"[CMFCVisualManager::OnDrawStatusBarProgress](#cmfcvisualmanager__ondrawstatusbarprogress)"},{"content":"Called by the framework when it draws the status-bar progress indicator.","pos":[19067,19139]},{"pos":[19144,19231],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawStatusBarSizeBox<ept id=\"p1\">](#cmfcvisualmanager__ondrawstatusbarsizebox)</ept>","source":"[CMFCVisualManager::OnDrawStatusBarSizeBox](#cmfcvisualmanager__ondrawstatusbarsizebox)"},{"content":"Called by the framework when it draws the status-bar size box.","pos":[19232,19294]},{"pos":[19299,19360],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawTab<ept id=\"p1\">](#cmfcvisualmanager__ondrawtab)</ept>","source":"[CMFCVisualManager::OnDrawTab](#cmfcvisualmanager__ondrawtab)"},{"pos":[19361,19464],"content":"Called by the framework when it draws a <bpt id=\"p1\">[</bpt>CMFCTabCtrl<ept id=\"p1\">](../../mfc/reference/cmfctabctrl-class.md)</ept> object.","source":"Called by the framework when it draws a [CMFCTabCtrl](../../mfc/reference/cmfctabctrl-class.md) object."},{"pos":[19469,19552],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawTabCloseButton<ept id=\"p1\">](#cmfcvisualmanager__ondrawtabclosebutton)</ept>","source":"[CMFCVisualManager::OnDrawTabCloseButton](#cmfcvisualmanager__ondrawtabclosebutton)"},{"pos":[19553,19630],"content":"Called by the framework when it draws the <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> button on the active tab.","source":"Called by the framework when it draws the **Close** button on the active tab."},{"pos":[19635,19710],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawTabContent<ept id=\"p1\">](#cmfcvisualmanager__ondrawtabcontent)</ept>","source":"[CMFCVisualManager::OnDrawTabContent](#cmfcvisualmanager__ondrawtabcontent)"},{"content":"Called by the framework when it draws the tab interior (images, texts).","pos":[19711,19782]},{"pos":[19787,19874],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawTabsButtonBorder<ept id=\"p1\">](#cmfcvisualmanager__ondrawtabsbuttonborder)</ept>","source":"[CMFCVisualManager::OnDrawTabsButtonBorder](#cmfcvisualmanager__ondrawtabsbuttonborder)"},{"content":"Called by the framework when it draws the border of a tab button.","pos":[19875,19940]},{"pos":[19945,20008],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawTask<ept id=\"p1\">](#cmfcvisualmanager__ondrawtask)</ept>","source":"[CMFCVisualManager::OnDrawTask](#cmfcvisualmanager__ondrawtask)"},{"content":"Called by the framework when it draws a task on the task pane.","pos":[20009,20071]},{"pos":[20076,20171],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawTasksGroupAreaBorder<ept id=\"p1\">](#cmfcvisualmanager__ondrawtasksgroupareaborder)</ept>","source":"[CMFCVisualManager::OnDrawTasksGroupAreaBorder](#cmfcvisualmanager__ondrawtasksgroupareaborder)"},{"content":"Called by the framework when it draws a border around a group area on the task pane.","pos":[20172,20256]},{"pos":[20261,20350],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawTasksGroupCaption<ept id=\"p1\">](#cmfcvisualmanager__ondrawtasksgroupcaption)</ept>","source":"[CMFCVisualManager::OnDrawTasksGroupCaption](#cmfcvisualmanager__ondrawtasksgroupcaption)"},{"content":"Called by the framework when it draws the caption for a task group on the task pane.","pos":[20351,20435]},{"pos":[20440,20523],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawTasksGroupIcon<ept id=\"p1\">](#cmfcvisualmanager__ondrawtasksgroupicon)</ept>","source":"[CMFCVisualManager::OnDrawTasksGroupIcon](#cmfcvisualmanager__ondrawtasksgroupicon)"},{"pos":[20529,20612],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawTearOffCaption<ept id=\"p1\">](#cmfcvisualmanager__ondrawtearoffcaption)</ept>","source":"[CMFCVisualManager::OnDrawTearOffCaption](#cmfcvisualmanager__ondrawtearoffcaption)"},{"content":"Called by the framework when it draws the tear-off caption for a tear-off bar.","pos":[20613,20691]},{"pos":[20696,20775],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawToolBoxFrame<ept id=\"p1\">](#cmfcvisualmanager__ondrawtoolboxframe)</ept>","source":"[CMFCVisualManager::OnDrawToolBoxFrame](#cmfcvisualmanager__ondrawtoolboxframe)"},{"pos":[20781,20864],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnEraseMDIClientArea<ept id=\"p1\">](#cmfcvisualmanager__onerasemdiclientarea)</ept>","source":"[CMFCVisualManager::OnEraseMDIClientArea](#cmfcvisualmanager__onerasemdiclientarea)"},{"content":"Called by the framework when it erases the MDI client area.","pos":[20865,20924]},{"pos":[20929,21020],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnErasePopupWindowButton<ept id=\"p1\">](#cmfcvisualmanager__onerasepopupwindowbutton)</ept>","source":"[CMFCVisualManager::OnErasePopupWindowButton](#cmfcvisualmanager__onerasepopupwindowbutton)"},{"pos":[21026,21099],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnEraseTabsArea<ept id=\"p1\">](#cmfcvisualmanager__onerasetabsarea)</ept>","source":"[CMFCVisualManager::OnEraseTabsArea](#cmfcvisualmanager__onerasetabsarea)"},{"content":"Called by the framework when it erases the tab area in a tab window.","pos":[21100,21168]},{"pos":[21173,21250],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnEraseTabsButton<ept id=\"p1\">](#cmfcvisualmanager__onerasetabsbutton)</ept>","source":"[CMFCVisualManager::OnEraseTabsButton](#cmfcvisualmanager__onerasetabsbutton)"},{"content":"Called by the framework when it erases the icon and text of a tab button.","pos":[21251,21324]},{"pos":[21329,21404],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnEraseTabsFrame<ept id=\"p1\">](#cmfcvisualmanager__onerasetabsframe)</ept>","source":"[CMFCVisualManager::OnEraseTabsFrame](#cmfcvisualmanager__onerasetabsframe)"},{"content":"Called by the framework when it erases a tab frame.","pos":[21405,21456]},{"pos":[21461,21564],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnFillAutoHideButtonBackground<ept id=\"p1\">](#cmfcvisualmanager__onfillautohidebuttonbackground)</ept>","source":"[CMFCVisualManager::OnFillAutoHideButtonBackground](#cmfcvisualmanager__onfillautohidebuttonbackground)"},{"content":"Called by the framework when it fills the background of an auto-hide button.","pos":[21565,21641]},{"pos":[21646,21727],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnFillBarBackground<ept id=\"p1\">](#cmfcvisualmanager__onfillbarbackground)</ept>","source":"[CMFCVisualManager::OnFillBarBackground](#cmfcvisualmanager__onfillbarbackground)"},{"content":"Called by the framework when it fills the background of a control bar.","pos":[21728,21798]},{"pos":[21803,21886],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnFillButtonInterior<ept id=\"p1\">](#cmfcvisualmanager__onfillbuttoninterior)</ept>","source":"[CMFCVisualManager::OnFillButtonInterior](#cmfcvisualmanager__onfillbuttoninterior)"},{"content":"Called by the framework when it fills the background of a toolbar button.","pos":[21887,21960]},{"pos":[21965,22052],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnFillCaptionBarButton<ept id=\"p1\">](#cmfcvisualmanager__onfillcaptionbarbutton)</ept>","source":"[CMFCVisualManager::OnFillCaptionBarButton](#cmfcvisualmanager__onfillcaptionbarbutton)"},{"pos":[22058,22157],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnFillCommandsListBackground<ept id=\"p1\">](#cmfcvisualmanager__onfillcommandslistbackground)</ept>","source":"[CMFCVisualManager::OnFillCommandsListBackground](#cmfcvisualmanager__onfillcommandslistbackground)"},{"content":"Called by the framework when it fills the background of a toolbar button that belongs to a command list that, in turn, is part of a customization dialog box.","pos":[22158,22315]},{"pos":[22320,22415],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnFillHeaderCtrlBackground<ept id=\"p1\">](#cmfcvisualmanager__onfillheaderctrlbackground)</ept>","source":"[CMFCVisualManager::OnFillHeaderCtrlBackground](#cmfcvisualmanager__onfillheaderctrlbackground)"},{"content":"Called by the framework when it fills the background of a header control.","pos":[22416,22489]},{"pos":[22494,22581],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnFillMiniFrameCaption<ept id=\"p1\">](#cmfcvisualmanager__onfillminiframecaption)</ept>","source":"[CMFCVisualManager::OnFillMiniFrameCaption](#cmfcvisualmanager__onfillminiframecaption)"},{"content":"Called by the framework when it fills the caption of a mini frame window.","pos":[22582,22655]},{"pos":[22660,22749],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnFillOutlookBarCaption<ept id=\"p1\">](#cmfcvisualmanager__onfilloutlookbarcaption)</ept>","source":"[CMFCVisualManager::OnFillOutlookBarCaption](#cmfcvisualmanager__onfilloutlookbarcaption)"},{"content":"Called by the framework when it fills the background of an Outlook bar caption.","pos":[22750,22829]},{"pos":[22834,22923],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnFillOutlookPageButton<ept id=\"p1\">](#cmfcvisualmanager__onfilloutlookpagebutton)</ept>","source":"[CMFCVisualManager::OnFillOutlookPageButton](#cmfcvisualmanager__onfilloutlookpagebutton)"},{"content":"Called by the framework when it fills the interior of an Outlook page button.","pos":[22924,23001]},{"pos":[23006,23103],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnFillPopupWindowBackground<ept id=\"p1\">](#cmfcvisualmanager__onfillpopupwindowbackground)</ept>","source":"[CMFCVisualManager::OnFillPopupWindowBackground](#cmfcvisualmanager__onfillpopupwindowbackground)"},{"content":"Called by the framework when it fills the background of a popup window.","pos":[23104,23175]},{"pos":[23180,23259],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnFillRibbonButton<ept id=\"p1\">](#cmfcvisualmanager__onfillribbonbutton)</ept>","source":"[CMFCVisualManager::OnFillRibbonButton](#cmfcvisualmanager__onfillribbonbutton)"},{"content":"Called by the framework when it fills the interior of a ribbon button.","pos":[23260,23330]},{"pos":[23335,23410],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnFillRibbonEdit<ept id=\"p1\">](#cmfcvisualmanager__onfillribbonedit)</ept>","source":"[CMFCVisualManager::OnFillRibbonEdit](#cmfcvisualmanager__onfillribbonedit)"},{"content":"Called by the framework when it fills the interior of a ribbon edit control.","pos":[23411,23487]},{"pos":[23492,23589],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnFillRibbonMainPanelButton<ept id=\"p1\">](#cmfcvisualmanager__onfillribbonmainpanelbutton)</ept>","source":"[CMFCVisualManager::OnFillRibbonMainPanelButton](#cmfcvisualmanager__onfillribbonmainpanelbutton)"},{"pos":[23590,23690],"content":"Called by the framework when it fills the interior of a ribbon button located on the <bpt id=\"p1\">**</bpt>Main<ept id=\"p1\">**</ept> panel.","source":"Called by the framework when it fills the interior of a ribbon button located on the **Main** panel."},{"pos":[23695,23780],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnFillRibbonMenuFrame<ept id=\"p1\">](#cmfcvisualmanager__onfillribbonmenuframe)</ept>","source":"[CMFCVisualManager::OnFillRibbonMenuFrame](#cmfcvisualmanager__onfillribbonmenuframe)"},{"content":"Called by the framework when it fills the menu frame of the main ribbon panel.","pos":[23781,23859]},{"pos":[23864,23977],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnFillRibbonQuickAccessToolBarPopup<ept id=\"p1\">](#cmfcvisualmanager__onfillribbonquickaccesstoolbarpopup)</ept>","source":"[CMFCVisualManager::OnFillRibbonQuickAccessToolBarPopup](#cmfcvisualmanager__onfillribbonquickaccesstoolbarpopup)"},{"pos":[23983,24074],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnFillSplitterBackground<ept id=\"p1\">](#cmfcvisualmanager__onfillsplitterbackground)</ept>","source":"[CMFCVisualManager::OnFillSplitterBackground](#cmfcvisualmanager__onfillsplitterbackground)"},{"content":"Called by the framework when it fills the background of a split window.","pos":[24075,24146]},{"pos":[24151,24212],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnFillTab<ept id=\"p1\">](#cmfcvisualmanager__onfilltab)</ept>","source":"[CMFCVisualManager::OnFillTab](#cmfcvisualmanager__onfilltab)"},{"content":"Called by the framework when it fills the background of a tab.","pos":[24213,24275]},{"pos":[24280,24371],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnFillTasksGroupInterior<ept id=\"p1\">](#cmfcvisualmanager__onfilltasksgroupinterior)</ept>","source":"[CMFCVisualManager::OnFillTasksGroupInterior](#cmfcvisualmanager__onfilltasksgroupinterior)"},{"pos":[24372,24580],"content":"Called by the framework when it fills the interior of a <bpt id=\"p1\">[</bpt>CMFCTasksPaneTaskGroup<ept id=\"p1\">](../../mfc/reference/cmfctaskspanetaskgroup-class.md)</ept> object on the <bpt id=\"p2\">[</bpt>CMFCTasksPane<ept id=\"p2\">](../../mfc/reference/cmfctaskspane-class.md)</ept>.","source":"Called by the framework when it fills the interior of a [CMFCTasksPaneTaskGroup](../../mfc/reference/cmfctaskspanetaskgroup-class.md) object on the [CMFCTasksPane](../../mfc/reference/cmfctaskspane-class.md)."},{"pos":[24585,24678],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnFillTasksPaneBackground<ept id=\"p1\">](#cmfcvisualmanager__onfilltaskspanebackground)</ept>","source":"[CMFCVisualManager::OnFillTasksPaneBackground](#cmfcvisualmanager__onfilltaskspanebackground)"},{"pos":[24679,24761],"content":"Called by the framework when it fills the background of a <ph id=\"ph1\">`CMFCTasksPane`</ph> control.","source":"Called by the framework when it fills the background of a `CMFCTasksPane` control."},{"pos":[24766,24847],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnHighlightMenuItem<ept id=\"p1\">](#cmfcvisualmanager__onhighlightmenuitem)</ept>","source":"[CMFCVisualManager::OnHighlightMenuItem](#cmfcvisualmanager__onhighlightmenuitem)"},{"content":"Called by the framework when it draws a highlighted menu item.","pos":[24848,24910]},{"pos":[24915,25018],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnHighlightRarelyUsedMenuItems<ept id=\"p1\">](#cmfcvisualmanager__onhighlightrarelyusedmenuitems)</ept>","source":"[CMFCVisualManager::OnHighlightRarelyUsedMenuItems](#cmfcvisualmanager__onhighlightrarelyusedmenuitems)"},{"content":"Called by the framework when it draws a highlighted and rarely used menu item.","pos":[25019,25097]},{"pos":[25102,25163],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnNcPaint<ept id=\"p1\">](#cmfcvisualmanager__onncpaint)</ept>","source":"[CMFCVisualManager::OnNcPaint](#cmfcvisualmanager__onncpaint)"},{"content":"Called by the framework when it draws the non-client area.","pos":[25164,25222]},{"pos":[25227,25304],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnSetWindowRegion<ept id=\"p1\">](#cmfcvisualmanager__onsetwindowregion)</ept>","source":"[CMFCVisualManager::OnSetWindowRegion](#cmfcvisualmanager__onsetwindowregion)"},{"content":"Called by the framework when it sets a region that contains frames and popup menus.","pos":[25305,25388]},{"pos":[25393,25476],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::OnUpdateSystemColors<ept id=\"p1\">](#cmfcvisualmanager__onupdatesystemcolors)</ept>","source":"[CMFCVisualManager::OnUpdateSystemColors](#cmfcvisualmanager__onupdatesystemcolors)"},{"content":"Called by the framework when it changes the system color setting.","pos":[25477,25542]},{"pos":[25547,25608],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::RedrawAll<ept id=\"p1\">](#cmfcvisualmanager__redrawall)</ept>","source":"[CMFCVisualManager::RedrawAll](#cmfcvisualmanager__redrawall)"},{"content":"Redraws all control bars in the application.","pos":[25609,25653]},{"pos":[25658,25749],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::RibbonCategoryColorToRGB<ept id=\"p1\">](#cmfcvisualmanager__ribboncategorycolortorgb)</ept>","source":"[CMFCVisualManager::RibbonCategoryColorToRGB](#cmfcvisualmanager__ribboncategorycolortorgb)"},{"pos":[25755,25832],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::SetDefaultManager<ept id=\"p1\">](#cmfcvisualmanager__setdefaultmanager)</ept>","source":"[CMFCVisualManager::SetDefaultManager](#cmfcvisualmanager__setdefaultmanager)"},{"content":"Sets the default visual manager.","pos":[25833,25865]},{"pos":[25870,25957],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::SetEmbossDisabledImage<ept id=\"p1\">](#cmfcvisualmanager__setembossdisabledimage)</ept>","source":"[CMFCVisualManager::SetEmbossDisabledImage](#cmfcvisualmanager__setembossdisabledimage)"},{"content":"Enables or disables the embossed mode for disabled toolbar images.","pos":[25958,26024]},{"pos":[26029,26112],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::SetFadeInactiveImage<ept id=\"p1\">](#cmfcvisualmanager__setfadeinactiveimage)</ept>","source":"[CMFCVisualManager::SetFadeInactiveImage](#cmfcvisualmanager__setfadeinactiveimage)"},{"content":"Enables or disables the lighting effect for inactive images on a menu or toolbar.","pos":[26113,26194]},{"pos":[26199,26272],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::SetMenuFlatLook<ept id=\"p1\">](#cmfcvisualmanager__setmenuflatlook)</ept>","source":"[CMFCVisualManager::SetMenuFlatLook](#cmfcvisualmanager__setmenuflatlook)"},{"content":"Sets a flag indicating whether the application menu buttons have a flattened appearance.","pos":[26273,26361]},{"pos":[26366,26445],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::SetMenuShadowDepth<ept id=\"p1\">](#cmfcvisualmanager__setmenushadowdepth)</ept>","source":"[CMFCVisualManager::SetMenuShadowDepth](#cmfcvisualmanager__setmenushadowdepth)"},{"content":"Sets the width and height of the menu shadow.","pos":[26446,26491]},{"pos":[26496,26589],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager::SetShadowHighlightedImage<ept id=\"p1\">](#cmfcvisualmanager__setshadowhighlightedimage)</ept>","source":"[CMFCVisualManager::SetShadowHighlightedImage](#cmfcvisualmanager__setshadowhighlightedimage)"},{"content":"Sets a flag that indicates whether to display the shadow when rendering highlighted images.","pos":[26590,26681]},{"pos":[26691,26698],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Because the <ph id=\"ph1\">`CMFCVisualManager`</ph> class controls the application's GUI, each application can have either one instance of a <ph id=\"ph2\">`CMFCVisualManager`</ph>, or one instance of a class derived from <ph id=\"ph3\">`CMFCVisualManager`</ph>.","pos":[26702,26904],"source":"Because the `CMFCVisualManager` class controls the application's GUI, each application can have either one instance of a `CMFCVisualManager`, or one instance of a class derived from `CMFCVisualManager`."},{"content":"Your application can also function without a <ph id=\"ph1\">`CMFCVisualManager`</ph>.","pos":[26905,26970],"source":" Your application can also function without a `CMFCVisualManager`."},{"content":"Use the static method <ph id=\"ph1\">`GetInstance`</ph> to obtain a pointer to the current <ph id=\"ph2\">`CMFCVisualManager`</ph>-derived object.","pos":[26971,27077],"source":" Use the static method `GetInstance` to obtain a pointer to the current `CMFCVisualManager`-derived object."},{"content":"To change the appearance of your application you must use other classes that provide methods for drawing all of the visual elements of your application.","pos":[27084,27236]},{"content":"Some examples of these classes are <bpt id=\"p1\">[</bpt>CMFCVisualManagerOfficeXP Class<ept id=\"p1\">](../../mfc/reference/cmfcvisualmanagerofficexp-class.md)</ept>, <bpt id=\"p2\">[</bpt>CMFCVisualManagerOffice2003 Class<ept id=\"p2\">](../../mfc/reference/cmfcvisualmanageroffice2003-class.md)</ept>, and <bpt id=\"p3\">[</bpt>CMFCVisualManagerOffice2007 Class<ept id=\"p3\">](../../mfc/reference/cmfcvisualmanageroffice2007-class.md)</ept>.","pos":[27237,27556],"source":" Some examples of these classes are [CMFCVisualManagerOfficeXP Class](../../mfc/reference/cmfcvisualmanagerofficexp-class.md), [CMFCVisualManagerOffice2003 Class](../../mfc/reference/cmfcvisualmanageroffice2003-class.md), and [CMFCVisualManagerOffice2007 Class](../../mfc/reference/cmfcvisualmanageroffice2007-class.md)."},{"content":"When you want to change the appearance of your application, pass one of these visual managers into the method <ph id=\"ph1\">`SetDefaultManager`</ph>.","pos":[27557,27687],"source":" When you want to change the appearance of your application, pass one of these visual managers into the method `SetDefaultManager`."},{"content":"For an example that demonstrates how your application can mimic the appearance of Microsoft Office 2003, see <bpt id=\"p1\">[</bpt>CMFCVisualManagerOffice2003 Class<ept id=\"p1\">](../../mfc/reference/cmfcvisualmanageroffice2003-class.md)</ept>.","pos":[27688,27891],"source":" For an example that demonstrates how your application can mimic the appearance of Microsoft Office 2003, see [CMFCVisualManagerOffice2003 Class](../../mfc/reference/cmfcvisualmanageroffice2003-class.md)."},{"content":"All of the drawing methods are virtual.","pos":[27898,27937]},{"content":"This enables you to create a custom visual style for the GUI of your application.","pos":[27938,28019]},{"content":"If you want to create your own visual style, derive a class from one of the visual manager classes and override the drawing methods that you want to change.","pos":[28020,28176]},{"pos":[28185,28192],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[28196,28292],"content":"This sample demonstrates how to instantiate the standard and custom <ph id=\"ph1\">`CMFCVisualManager`</ph> objects.","source":"This sample demonstrates how to instantiate the standard and custom `CMFCVisualManager` objects."},{"pos":[28999,29006],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates how to retrieve the default values of a <ph id=\"ph1\">`CMFCVisualManager`</ph> object.","pos":[29010,29112],"source":"The following example demonstrates how to retrieve the default values of a `CMFCVisualManager` object."},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>Tasks Pane sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[29113,29195],"source":" This code snippet is part of the [Tasks Pane sample](../../visual-cpp-samples.md)."},{"pos":[29202,29299],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_TasksPane#1<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cmfcvisualmanager-class_1.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_TasksPane#1](../../mfc/reference/codesnippet/cpp/cmfcvisualmanager-class_1.h)]"},{"pos":[29308,29329],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[29333,29380],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[29387,29462],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseVisualManager<ept id=\"p1\">](../../mfc/reference/cmfcbasevisualmanager-class.md)</ept>","source":"[CMFCBaseVisualManager](../../mfc/reference/cmfcbasevisualmanager-class.md)"},{"pos":[29469,29536],"content":"<bpt id=\"p1\">[</bpt>CMFCVisualManager<ept id=\"p1\">](../../mfc/reference/cmfcvisualmanager-class.md)</ept>","source":"[CMFCVisualManager](../../mfc/reference/cmfcvisualmanager-class.md)"},{"pos":[29545,29557],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[29561,29591],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxvisualmanager.h","source":"**Header:** afxvisualmanager.h"},{"pos":[29601,29680],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__adjustframes\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::AdjustFrames","linkify":"<a name=\"cmfcvisualmanager__adjustframes\"></a>  CMFCVisualManager::AdjustFrames","source":"<a name=\"cmfcvisualmanager__adjustframes\"></a>  CMFCVisualManager::AdjustFrames"},{"pos":[29846,29853],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[29863,29946],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__adjusttoolbars\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::AdjustToolbars","linkify":"<a name=\"cmfcvisualmanager__adjusttoolbars\"></a>  CMFCVisualManager::AdjustToolbars","source":"<a name=\"cmfcvisualmanager__adjusttoolbars\"></a>  CMFCVisualManager::AdjustToolbars"},{"pos":[30114,30121],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[30131,30228],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__alwayshighlight3dtabs\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::AlwaysHighlight3DTabs","linkify":"<a name=\"cmfcvisualmanager__alwayshighlight3dtabs\"></a>  CMFCVisualManager::AlwaysHighlight3DTabs","source":"<a name=\"cmfcvisualmanager__alwayshighlight3dtabs\"></a>  CMFCVisualManager::AlwaysHighlight3DTabs"},{"content":"The framework calls this method to determine whether 3D tabs should always be highlighted in the application.","pos":[30232,30341]},{"pos":[30413,30425],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[30429,30469],"content":"<ph id=\"ph1\">`TRUE`</ph> if 3D tabs should be highlighted.","source":"`TRUE` if 3D tabs should be highlighted."},{"pos":[30479,30486],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this function in a derived visual manager and return <ph id=\"ph1\">`TRUE`</ph> if 3D tabs should always be highlighted.","pos":[30490,30599],"source":"Override this function in a derived visual manager and return `TRUE` if 3D tabs should always be highlighted."},{"content":"The default implementation of this method returns <ph id=\"ph1\">`FALSE`</ph>.","pos":[30600,30658],"source":" The default implementation of this method returns `FALSE`."},{"pos":[30668,30757],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__cmfcvisualmanager\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::CMFCVisualManager","linkify":"<a name=\"cmfcvisualmanager__cmfcvisualmanager\"></a>  CMFCVisualManager::CMFCVisualManager","source":"<a name=\"cmfcvisualmanager__cmfcvisualmanager\"></a>  CMFCVisualManager::CMFCVisualManager"},{"pos":[30929,30939],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[30943,30960],"content":"[in] <ph id=\"ph1\">`bTemporary`</ph>","source":"[in] `bTemporary`"},{"pos":[30970,30977],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[30987,31072],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__destroyinstance\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::DestroyInstance","linkify":"<a name=\"cmfcvisualmanager__destroyinstance\"></a>  CMFCVisualManager::DestroyInstance","source":"<a name=\"cmfcvisualmanager__destroyinstance\"></a>  CMFCVisualManager::DestroyInstance"},{"pos":[31270,31280],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[31284,31307],"content":"[in] <ph id=\"ph1\">`bAutoDestroyOnly`</ph>","source":"[in] `bAutoDestroyOnly`"},{"pos":[31317,31324],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[31334,31431],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__dodrawheadersortarrow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::DoDrawHeaderSortArrow","linkify":"<a name=\"cmfcvisualmanager__dodrawheadersortarrow\"></a>  CMFCVisualManager::DoDrawHeaderSortArrow","source":"<a name=\"cmfcvisualmanager__dodrawheadersortarrow\"></a>  CMFCVisualManager::DoDrawHeaderSortArrow"},{"pos":[31659,31669],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[31673,31683],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[31687,31698],"source":" [in] `rect`"},{"content":"[in] <ph id=\"ph1\">`bIsUp`</ph>","pos":[31702,31714],"source":" [in] `bIsUp`"},{"content":"[in] <ph id=\"ph1\">`bDlgCtrl`</ph>","pos":[31718,31733],"source":" [in] `bDlgCtrl`"},{"pos":[31743,31750],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[31760,31855],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__drawcomboborderwinxp\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::DrawComboBorderWinXP","linkify":"<a name=\"cmfcvisualmanager__drawcomboborderwinxp\"></a>  CMFCVisualManager::DrawComboBorderWinXP","source":"<a name=\"cmfcvisualmanager__drawcomboborderwinxp\"></a>  CMFCVisualManager::DrawComboBorderWinXP"},{"pos":[32065,32075],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`CDC*`</ph>","pos":[32079,32090],"source":"[in] `CDC*`"},{"content":"[in] <ph id=\"ph1\">`CRect`</ph>","pos":[32094,32106],"source":" [in] `CRect`"},{"content":"[in] <ph id=\"ph1\">`BOOL`</ph>","pos":[32110,32121],"source":" [in] `BOOL`"},{"pos":[32131,32143],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[32153,32160],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[32170,32273],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__drawcombodropbuttonwinxp\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::DrawComboDropButtonWinXP","linkify":"<a name=\"cmfcvisualmanager__drawcombodropbuttonwinxp\"></a>  CMFCVisualManager::DrawComboDropButtonWinXP","source":"<a name=\"cmfcvisualmanager__drawcombodropbuttonwinxp\"></a>  CMFCVisualManager::DrawComboDropButtonWinXP"},{"pos":[32487,32497],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`CDC*`</ph>","pos":[32501,32512],"source":"[in] `CDC*`"},{"content":"[in] <ph id=\"ph1\">`CRect`</ph>","pos":[32516,32528],"source":" [in] `CRect`"},{"content":"[in] <ph id=\"ph1\">`BOOL`</ph>","pos":[32532,32543],"source":" [in] `BOOL`"},{"pos":[32553,32565],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[32575,32582],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[32592,32685],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__drawpushbuttonwinxp\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::DrawPushButtonWinXP","linkify":"<a name=\"cmfcvisualmanager__drawpushbuttonwinxp\"></a>  CMFCVisualManager::DrawPushButtonWinXP","source":"<a name=\"cmfcvisualmanager__drawpushbuttonwinxp\"></a>  CMFCVisualManager::DrawPushButtonWinXP"},{"pos":[32891,32901],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`CDC*`</ph>","pos":[32905,32916],"source":"[in] `CDC*`"},{"content":"[in] <ph id=\"ph1\">`CRect`</ph>","pos":[32920,32932],"source":" [in] `CRect`"},{"content":"[in] <ph id=\"ph1\">`CMFCButton*`</ph>","pos":[32936,32954],"source":" [in] `CMFCButton*`"},{"content":"[in] <ph id=\"ph1\">`UINT`</ph>","pos":[32958,32969],"source":" [in] `UINT`"},{"pos":[32979,32991],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[33001,33008],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[33018,33103],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__drawtextonglass\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::DrawTextOnGlass","linkify":"<a name=\"cmfcvisualmanager__drawtextonglass\"></a>  CMFCVisualManager::DrawTextOnGlass","source":"<a name=\"cmfcvisualmanager__drawtextonglass\"></a>  CMFCVisualManager::DrawTextOnGlass"},{"pos":[33402,33412],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[33416,33426],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`strText`</ph>","pos":[33430,33444],"source":" [in] `strText`"},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[33448,33459],"source":" [in] `rect`"},{"content":"[in] <ph id=\"ph1\">`dwFlags`</ph>","pos":[33463,33477],"source":" [in] `dwFlags`"},{"content":"[in] <ph id=\"ph1\">`nGlowSize`</ph>","pos":[33481,33497],"source":" [in] `nGlowSize`"},{"content":"[in] <ph id=\"ph1\">`clrText`</ph>","pos":[33501,33515],"source":" [in] `clrText`"},{"pos":[33525,33537],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[33547,33554],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[33564,33665],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__enabletoolbarbuttonfill\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::EnableToolbarButtonFill","linkify":"<a name=\"cmfcvisualmanager__enabletoolbarbuttonfill\"></a>  CMFCVisualManager::EnableToolbarButtonFill","source":"<a name=\"cmfcvisualmanager__enabletoolbarbuttonfill\"></a>  CMFCVisualManager::EnableToolbarButtonFill"},{"pos":[33844,33854],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[33858,33872],"content":"[in] <ph id=\"ph1\">`bEnable`</ph>","source":"[in] `bEnable`"},{"pos":[33882,33889],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[33899,34006],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__getautohidebuttontextcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetAutoHideButtonTextColor","linkify":"<a name=\"cmfcvisualmanager__getautohidebuttontextcolor\"></a>  CMFCVisualManager::GetAutoHideButtonTextColor","source":"<a name=\"cmfcvisualmanager__getautohidebuttontextcolor\"></a>  CMFCVisualManager::GetAutoHideButtonTextColor"},{"content":"The framework calls this method to retrieve the text color of an auto-hide button.","pos":[34010,34092]},{"pos":[34191,34201],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[34205,34219],"source":"[in] `pButton`"},{"content":"A pointer to an auto-hide button.","pos":[34223,34256]},{"pos":[34266,34278],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34282,34408],"content":"A <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> parameter that specifies the text color of <ph id=\"ph1\">`pButton`</ph>.","source":"A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter that specifies the text color of `pButton`."},{"pos":[34418,34425],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived class to customize the text color of an auto-hide button in your application.","pos":[34429,34540]},{"content":"To do this, return the color that you want your application to use as the text color.","pos":[34541,34626]},{"pos":[34636,34731],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__getbuttonextraborder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetButtonExtraBorder","linkify":"<a name=\"cmfcvisualmanager__getbuttonextraborder\"></a>  CMFCVisualManager::GetButtonExtraBorder","source":"<a name=\"cmfcvisualmanager__getbuttonextraborder\"></a>  CMFCVisualManager::GetButtonExtraBorder"},{"content":"The framework calls this method when it draws a toolbar button.","pos":[34735,34798]},{"pos":[34870,34882],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34886,35013],"content":"A <bpt id=\"p1\">[</bpt>CSize<ept id=\"p1\">](../../atl-mfc-shared/reference/csize-class.md)</ept> object that contains the extra size of the border for toolbar buttons.","source":"A [CSize](../../atl-mfc-shared/reference/csize-class.md) object that contains the extra size of the border for toolbar buttons."},{"pos":[35023,35030],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Some skins have to extend the borders of toolbar buttons.","pos":[35034,35091]},{"content":"Override this method in a custom visual manager to extend the borders of toolbar buttons in your application.","pos":[35092,35201]},{"content":"The default implementation of this method returns an empty size.","pos":[35202,35266]},{"pos":[35276,35375],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__getcaptionbartextcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetCaptionBarTextColor","linkify":"<a name=\"cmfcvisualmanager__getcaptionbartextcolor\"></a>  CMFCVisualManager::GetCaptionBarTextColor","source":"<a name=\"cmfcvisualmanager__getcaptionbartextcolor\"></a>  CMFCVisualManager::GetCaptionBarTextColor"},{"content":"The framework calls this method to retrieve the color of the text in the caption bar.","pos":[35379,35464]},{"pos":[35552,35562],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pBar`</ph>","pos":[35566,35577],"source":"[in] `pBar`"},{"content":"A pointer to a caption bar.","pos":[35581,35608]},{"pos":[35618,35630],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[35634,35764],"content":"A <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> parameter that indicates the color of the text in <ph id=\"ph1\">`pBar`</ph>.","source":"A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter that indicates the color of the text in `pBar`."},{"pos":[35774,35781],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in your derived class to customize the text color for a caption bar.","pos":[35785,35874]},{"content":"In your overridden method, return the desired color.","pos":[35875,35927]},{"pos":[35937,36046],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__getcaptionbuttonextraborder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetCaptionButtonExtraBorder","linkify":"<a name=\"cmfcvisualmanager__getcaptionbuttonextraborder\"></a>  CMFCVisualManager::GetCaptionButtonExtraBorder","source":"<a name=\"cmfcvisualmanager__getcaptionbuttonextraborder\"></a>  CMFCVisualManager::GetCaptionButtonExtraBorder"},{"pos":[36228,36240],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[36250,36257],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[36267,36386],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__getdockingpanecaptionextraheight\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetDockingPaneCaptionExtraHeight","linkify":"<a name=\"cmfcvisualmanager__getdockingpanecaptionextraheight\"></a>  CMFCVisualManager::GetDockingPaneCaptionExtraHeight","source":"<a name=\"cmfcvisualmanager__getdockingpanecaptionextraheight\"></a>  CMFCVisualManager::GetDockingPaneCaptionExtraHeight"},{"pos":[36571,36583],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[36593,36600],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[36610,36715],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__getdockingtabsborderssize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetDockingTabsBordersSize","linkify":"<a name=\"cmfcvisualmanager__getdockingtabsborderssize\"></a>  CMFCVisualManager::GetDockingTabsBordersSize","source":"<a name=\"cmfcvisualmanager__getdockingtabsborderssize\"></a>  CMFCVisualManager::GetDockingTabsBordersSize"},{"content":"The framework calls this method when it draws a pane that is docked and tabbed.","pos":[36719,36798]},{"pos":[36864,36876],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that indicates the border size of a pane that is docked and tabbed.","pos":[36880,36958]},{"pos":[36968,36975],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A docked pane becomes tabbed when the user docks multiple panes to the same location in your application.","pos":[36979,37084]},{"content":"Override this method in a custom visual manager to change the border size of docked tabbed control bars.","pos":[37091,37195]},{"content":"The default implementation returns -1.","pos":[37196,37234]},{"pos":[37244,37361],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__gethighlightedmenuitemtextcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetHighlightedMenuItemTextColor","linkify":"<a name=\"cmfcvisualmanager__gethighlightedmenuitemtextcolor\"></a>  CMFCVisualManager::GetHighlightedMenuItemTextColor","source":"<a name=\"cmfcvisualmanager__gethighlightedmenuitemtextcolor\"></a>  CMFCVisualManager::GetHighlightedMenuItemTextColor"},{"pos":[37571,37581],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[37585,37599],"content":"[in] <ph id=\"ph1\">`pButton`</ph>","source":"[in] `pButton`"},{"pos":[37609,37621],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[37631,37638],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[37648,37725],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__getinstance\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetInstance","linkify":"<a name=\"cmfcvisualmanager__getinstance\"></a>  CMFCVisualManager::GetInstance","source":"<a name=\"cmfcvisualmanager__getinstance\"></a>  CMFCVisualManager::GetInstance"},{"pos":[37729,37863],"content":"Returns a pointer to the current <bpt id=\"p1\">[</bpt>CMFCVisualManager Class<ept id=\"p1\">](../../mfc/reference/cmfcvisualmanager-class.md)</ept> object for the application.","source":"Returns a pointer to the current [CMFCVisualManager Class](../../mfc/reference/cmfcvisualmanager-class.md) object for the application."},{"pos":[37929,37941],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[37945,37987],"content":"A pointer to a <ph id=\"ph1\">`CMFCVisualManager`</ph> object.","source":"A pointer to a `CMFCVisualManager` object."},{"pos":[37997,38004],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An application can only have one <ph id=\"ph1\">`CMFCVisualManager`</ph> object associated with it.","pos":[38008,38087],"source":"An application can only have one `CMFCVisualManager` object associated with it."},{"content":"This includes any object derived from the <ph id=\"ph1\">`CMFCVisualManager`</ph> class.","pos":[38088,38156],"source":" This includes any object derived from the `CMFCVisualManager` class."},{"content":"This method returns a pointer to the associated <ph id=\"ph1\">`CMFCVisualManager`</ph> object.","pos":[38157,38232],"source":" This method returns a pointer to the associated `CMFCVisualManager` object."},{"content":"If the application does not have an associated <ph id=\"ph1\">`CMFCVisualManager`</ph> object, this method will create one and associate it with the application.","pos":[38233,38374],"source":" If the application does not have an associated `CMFCVisualManager` object, this method will create one and associate it with the application."},{"pos":[38384,38481],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__getmditabsborderssize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetMDITabsBordersSize","linkify":"<a name=\"cmfcvisualmanager__getmditabsborderssize\"></a>  CMFCVisualManager::GetMDITabsBordersSize","source":"<a name=\"cmfcvisualmanager__getmditabsborderssize\"></a>  CMFCVisualManager::GetMDITabsBordersSize"},{"content":"The framework calls this method to determine the border size of a MDITabs window before it draws the window.","pos":[38485,38593]},{"pos":[38655,38667],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The border size of the MDITabs window.","pos":[38671,38709]},{"pos":[38719,38726],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this function in a derived class to customize the border size of the MDITabs window.","pos":[38730,38823]},{"pos":[38833,38924],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__getmenuimagemargin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetMenuImageMargin","linkify":"<a name=\"cmfcvisualmanager__getmenuimagemargin\"></a>  CMFCVisualManager::GetMenuImageMargin","source":"<a name=\"cmfcvisualmanager__getmenuimagemargin\"></a>  CMFCVisualManager::GetMenuImageMargin"},{"pos":[39095,39107],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39117,39124],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[39134,39229],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__getmenuitemtextcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetMenuItemTextColor","linkify":"<a name=\"cmfcvisualmanager__getmenuitemtextcolor\"></a>  CMFCVisualManager::GetMenuItemTextColor","source":"<a name=\"cmfcvisualmanager__getmenuitemtextcolor\"></a>  CMFCVisualManager::GetMenuItemTextColor"},{"pos":[39480,39490],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[39494,39508],"source":"[in] `pButton`"},{"content":"[in] <ph id=\"ph1\">`bHighlighted`</ph>","pos":[39512,39531],"source":" [in] `bHighlighted`"},{"content":"[in] <ph id=\"ph1\">`bDisabled`</ph>","pos":[39535,39551],"source":" [in] `bDisabled`"},{"pos":[39561,39573],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39583,39590],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[39600,39691],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__getmenushadowdepth\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetMenuShadowDepth","linkify":"<a name=\"cmfcvisualmanager__getmenushadowdepth\"></a>  CMFCVisualManager::GetMenuShadowDepth","source":"<a name=\"cmfcvisualmanager__getmenushadowdepth\"></a>  CMFCVisualManager::GetMenuShadowDepth"},{"content":"Retrieves the width and height of the menu shadow.","pos":[39695,39745]},{"pos":[39805,39817],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width and height of the menu shadow in pixels.","pos":[39821,39871]},{"pos":[39881,39888],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The width and height of the menu shadow are equivalent.","pos":[39892,39947]},{"content":"The default value is 7 pixels.","pos":[39948,39978]},{"pos":[39988,40067],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__getncbtnsize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetNcBtnSize","linkify":"<a name=\"cmfcvisualmanager__getncbtnsize\"></a>  CMFCVisualManager::GetNcBtnSize","source":"<a name=\"cmfcvisualmanager__getncbtnsize\"></a>  CMFCVisualManager::GetNcBtnSize"},{"content":"Called by the framework when it has to retrieve the size of the system buttons.","pos":[40071,40150]},{"pos":[40225,40235],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bSmall`</ph>","pos":[40239,40252],"source":"[in] `bSmall`"},{"content":"A Boolean parameter that indicates whether <ph id=\"ph1\">`GetNcBtnSize`</ph> should retrieve the size of a small or large system button.","pos":[40256,40373],"source":" A Boolean parameter that indicates whether `GetNcBtnSize` should retrieve the size of a small or large system button."},{"content":"If <ph id=\"ph1\">`bSmall`</ph> is <ph id=\"ph2\">`TRUE`</ph>, <ph id=\"ph3\">`GetNcBtnSize`</ph> returns the size of a small system button.","pos":[40374,40454],"source":" If `bSmall` is `TRUE`, `GetNcBtnSize` returns the size of a small system button."},{"content":"Otherwise, it returns the size of a large system button.","pos":[40455,40511]},{"pos":[40521,40533],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[40537,40649],"content":"A <bpt id=\"p1\">[</bpt>CSize<ept id=\"p1\">](../../atl-mfc-shared/reference/csize-class.md)</ept> parameter that indicate the size of the system buttons.","source":"A [CSize](../../atl-mfc-shared/reference/csize-class.md) parameter that indicate the size of the system buttons."},{"pos":[40659,40666],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The system buttons are the buttons in the caption of the frame window that map to the commands <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Minimize<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Maximize<ept id=\"p3\">**</ept>, and <bpt id=\"p4\">**</bpt>Restore<ept id=\"p4\">**</ept>.","pos":[40670,40820],"source":"The system buttons are the buttons in the caption of the frame window that map to the commands **Close**, **Minimize**, **Maximize**, and **Restore**."},{"content":"The size of these buttons depends on the current visual manager.","pos":[40821,40885]},{"content":"Override this method if you want to customize the size of the system buttons in your application.","pos":[40886,40983]},{"pos":[40993,41092],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__getpopupmenubordersize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetPopupMenuBorderSize","linkify":"<a name=\"cmfcvisualmanager__getpopupmenubordersize\"></a>  CMFCVisualManager::GetPopupMenuBorderSize","source":"<a name=\"cmfcvisualmanager__getpopupmenubordersize\"></a>  CMFCVisualManager::GetPopupMenuBorderSize"},{"content":"The framework calls this method to obtain the border size of pop-up menus.","pos":[41096,41170]},{"pos":[41242,41254],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that specifies the border size of pop-up menus.","pos":[41258,41316]},{"pos":[41326,41333],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method to customize the border size of pop-up menus in your application.","pos":[41337,41423]},{"pos":[41433,41518],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__getpopupmenugap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetPopupMenuGap","linkify":"<a name=\"cmfcvisualmanager__getpopupmenugap\"></a>  CMFCVisualManager::GetPopupMenuGap","source":"<a name=\"cmfcvisualmanager__getpopupmenugap\"></a>  CMFCVisualManager::GetPopupMenuGap"},{"pos":[41686,41698],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[41708,41715],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[41725,41830],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__getpropertygridgroupcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetPropertyGridGroupColor","linkify":"<a name=\"cmfcvisualmanager__getpropertygridgroupcolor\"></a>  CMFCVisualManager::GetPropertyGridGroupColor","source":"<a name=\"cmfcvisualmanager__getpropertygridgroupcolor\"></a>  CMFCVisualManager::GetPropertyGridGroupColor"},{"content":"The framework calls this method to get the background color of a property list.","pos":[41834,41913]},{"pos":[42015,42025],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pPropList`</ph>","pos":[42029,42045],"source":"[in] `pPropList`"},{"content":"A pointer to the property list that the framework is drawing.","pos":[42049,42110]},{"pos":[42120,42132],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[42136,42270],"content":"A <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> parameter that indicates the background color of <ph id=\"ph1\">`pPropList`</ph>.","source":"A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter that indicates the background color of `pPropList`."},{"pos":[42280,42287],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this function to customize the background color of a property list in your application.","pos":[42291,42387]},{"pos":[42397,42510],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__getpropertygridgrouptextcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetPropertyGridGroupTextColor","linkify":"<a name=\"cmfcvisualmanager__getpropertygridgrouptextcolor\"></a>  CMFCVisualManager::GetPropertyGridGroupTextColor","source":"<a name=\"cmfcvisualmanager__getpropertygridgrouptextcolor\"></a>  CMFCVisualManager::GetPropertyGridGroupTextColor"},{"content":"The framework calls this method to retrieve the text color of a property list.","pos":[42514,42592]},{"pos":[42698,42708],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pPropList`</ph>","pos":[42712,42728],"source":"[in] `pPropList`"},{"content":"A pointer to the property list.","pos":[42732,42763]},{"pos":[42773,42785],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[42789,42923],"content":"A <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> parameter that indicates the text color of the property list.","source":"A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter that indicates the text color of the property list."},{"pos":[42933,42940],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this function to customize the text color of a property list in your application.","pos":[42944,43034]},{"pos":[43044,43153],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__getribbonhyperlinktextcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetRibbonHyperlinkTextColor","linkify":"<a name=\"cmfcvisualmanager__getribbonhyperlinktextcolor\"></a>  CMFCVisualManager::GetRibbonHyperlinkTextColor","source":"<a name=\"cmfcvisualmanager__getribbonhyperlinktextcolor\"></a>  CMFCVisualManager::GetRibbonHyperlinkTextColor"},{"pos":[43359,43369],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[43373,43390],"content":"[in] <ph id=\"ph1\">`pHyperLink`</ph>","source":"[in] `pHyperLink`"},{"pos":[43400,43412],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[43422,43429],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[43439,43542],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__getribbonpopupbordersize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetRibbonPopupBorderSize","linkify":"<a name=\"cmfcvisualmanager__getribbonpopupbordersize\"></a>  CMFCVisualManager::GetRibbonPopupBorderSize","source":"<a name=\"cmfcvisualmanager__getribbonpopupbordersize\"></a>  CMFCVisualManager::GetRibbonPopupBorderSize"},{"pos":[43745,43755],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[43759,43786],"content":"[in] <ph id=\"ph1\">`CMFCRibbonPanelMenu*`</ph>","source":"[in] `CMFCRibbonPanelMenu*`"},{"pos":[43796,43808],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[43818,43825],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[43835,43970],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__getribbonquickaccesstoolbarchevronoffset\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetRibbonQuickAccessToolBarChevronOffset","linkify":"<a name=\"cmfcvisualmanager__getribbonquickaccesstoolbarchevronoffset\"></a>  CMFCVisualManager::GetRibbonQuickAccessToolBarChevronOffset","source":"<a name=\"cmfcvisualmanager__getribbonquickaccesstoolbarchevronoffset\"></a>  CMFCVisualManager::GetRibbonQuickAccessToolBarChevronOffset"},{"pos":[44154,44166],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[44176,44183],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[44193,44324],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__getribbonquickaccesstoolbarrightmargin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetRibbonQuickAccessToolBarRightMargin","linkify":"<a name=\"cmfcvisualmanager__getribbonquickaccesstoolbarrightmargin\"></a>  CMFCVisualManager::GetRibbonQuickAccessToolBarRightMargin","source":"<a name=\"cmfcvisualmanager__getribbonquickaccesstoolbarrightmargin\"></a>  CMFCVisualManager::GetRibbonQuickAccessToolBarRightMargin"},{"pos":[44506,44518],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[44528,44535],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[44545,44672],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__getribbonquickaccesstoolbartextcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetRibbonQuickAccessToolBarTextColor","linkify":"<a name=\"cmfcvisualmanager__getribbonquickaccesstoolbartextcolor\"></a>  CMFCVisualManager::GetRibbonQuickAccessToolBarTextColor","source":"<a name=\"cmfcvisualmanager__getribbonquickaccesstoolbartextcolor\"></a>  CMFCVisualManager::GetRibbonQuickAccessToolBarTextColor"},{"pos":[44879,44889],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[44893,44909],"content":"[in] <ph id=\"ph1\">`bDisabled`</ph>","source":"[in] `bDisabled`"},{"pos":[44919,44931],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[44941,44948],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[44958,45055],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__getribbonslidercolors\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetRibbonSliderColors","linkify":"<a name=\"cmfcvisualmanager__getribbonslidercolors\"></a>  CMFCVisualManager::GetRibbonSliderColors","source":"<a name=\"cmfcvisualmanager__getribbonslidercolors\"></a>  CMFCVisualManager::GetRibbonSliderColors"},{"pos":[45375,45385],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pSlider`</ph>","pos":[45389,45403],"source":"[in] `pSlider`"},{"content":"[in] <ph id=\"ph1\">`bIsHighlighted`</ph>","pos":[45407,45428],"source":" [in] `bIsHighlighted`"},{"content":"[in] <ph id=\"ph1\">`bIsPressed`</ph>","pos":[45432,45449],"source":" [in] `bIsPressed`"},{"content":"[in] <ph id=\"ph1\">`bIsDisabled`</ph>","pos":[45453,45471],"source":" [in] `bIsDisabled`"},{"content":"[in] <ph id=\"ph1\">`clrLine`</ph>","pos":[45475,45489],"source":" [in] `clrLine`"},{"content":"[in] <ph id=\"ph1\">`clrFill`</ph>","pos":[45493,45507],"source":" [in] `clrFill`"},{"pos":[45517,45524],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[45534,45643],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__getribbonstatusbartextcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetRibbonStatusBarTextColor","linkify":"<a name=\"cmfcvisualmanager__getribbonstatusbartextcolor\"></a>  CMFCVisualManager::GetRibbonStatusBarTextColor","source":"<a name=\"cmfcvisualmanager__getribbonstatusbartextcolor\"></a>  CMFCVisualManager::GetRibbonStatusBarTextColor"},{"pos":[45850,45860],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[45864,45881],"content":"[in] <ph id=\"ph1\">`pStatusBar`</ph>","source":"[in] `pStatusBar`"},{"pos":[45891,45903],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[45913,45920],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[45930,46035],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__getshowallmenuitemsheight\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetShowAllMenuItemsHeight","linkify":"<a name=\"cmfcvisualmanager__getshowallmenuitemsheight\"></a>  CMFCVisualManager::GetShowAllMenuItemsHeight","source":"<a name=\"cmfcvisualmanager__getshowallmenuitemsheight\"></a>  CMFCVisualManager::GetShowAllMenuItemsHeight"},{"pos":[46249,46259],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[46263,46273],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`sizeDefault`</ph>","pos":[46277,46295],"source":" [in] `sizeDefault`"},{"pos":[46305,46317],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[46327,46334],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[46344,46459],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__getsmartdockingbaseguidecolors\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetSmartDockingBaseGuideColors","linkify":"<a name=\"cmfcvisualmanager__getsmartdockingbaseguidecolors\"></a>  CMFCVisualManager::GetSmartDockingBaseGuideColors","source":"<a name=\"cmfcvisualmanager__getsmartdockingbaseguidecolors\"></a>  CMFCVisualManager::GetSmartDockingBaseGuideColors"},{"pos":[46707,46717],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`clrBaseGroupBackground`</ph>","pos":[46721,46750],"source":"[in] `clrBaseGroupBackground`"},{"content":"[in] <ph id=\"ph1\">`clrBaseGroupBorder`</ph>","pos":[46754,46779],"source":" [in] `clrBaseGroupBorder`"},{"pos":[46789,46796],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[46806,46927],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__getsmartdockinghighlighttonecolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetSmartDockingHighlightToneColor","linkify":"<a name=\"cmfcvisualmanager__getsmartdockinghighlighttonecolor\"></a>  CMFCVisualManager::GetSmartDockingHighlightToneColor","source":"<a name=\"cmfcvisualmanager__getsmartdockinghighlighttonecolor\"></a>  CMFCVisualManager::GetSmartDockingHighlightToneColor"},{"pos":[47109,47121],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[47131,47138],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[47148,47243],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__getsmartdockingtheme\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetSmartDockingTheme","linkify":"<a name=\"cmfcvisualmanager__getsmartdockingtheme\"></a>  CMFCVisualManager::GetSmartDockingTheme","source":"<a name=\"cmfcvisualmanager__getsmartdockingtheme\"></a>  CMFCVisualManager::GetSmartDockingTheme"},{"content":"Returns a theme used to display smart docking markers.","pos":[47247,47301]},{"pos":[47378,47390],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns one of the following enumerated values: AFX_SDT_DEFAULT, AFX_SDT_VS2005, AFX_SDT_VS2008.","pos":[47394,47490]},{"pos":[47500,47507],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[47517,47622],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__getstatusbarpanetextcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetStatusBarPaneTextColor","linkify":"<a name=\"cmfcvisualmanager__getstatusbarpanetextcolor\"></a>  CMFCVisualManager::GetStatusBarPaneTextColor","source":"<a name=\"cmfcvisualmanager__getstatusbarpanetextcolor\"></a>  CMFCVisualManager::GetStatusBarPaneTextColor"},{"pos":[47862,47872],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pStatusBar`</ph>","pos":[47876,47893],"source":"[in] `pStatusBar`"},{"content":"[in] <ph id=\"ph1\">`pPane`</ph>","pos":[47897,47909],"source":" [in] `pPane`"},{"pos":[47919,47931],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[47941,47948],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[47958,48047],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__gettabframecolors\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetTabFrameColors","linkify":"<a name=\"cmfcvisualmanager__gettabframecolors\"></a>  CMFCVisualManager::GetTabFrameColors","source":"<a name=\"cmfcvisualmanager__gettabframecolors\"></a>  CMFCVisualManager::GetTabFrameColors"},{"content":"The framework calls this function when it has to retrieve the set of colors for drawing a tab window.","pos":[48051,48152]},{"pos":[48458,48468],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pTabWnd`</ph>","pos":[48472,48486],"source":"[in] `pTabWnd`"},{"content":"A pointer to the tabbed window where the frame is drawing a tab.","pos":[48490,48554]},{"content":"[out] <ph id=\"ph1\">`clrDark`</ph>","pos":[48561,48576],"source":"[out] `clrDark`"},{"content":"A reference to a <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> parameter where this method stores the color for the dark border of a tab.","pos":[48580,48742],"source":" A reference to a [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter where this method stores the color for the dark border of a tab."},{"content":"[out] <ph id=\"ph1\">`clrBlack`</ph>","pos":[48749,48765],"source":"[out] `clrBlack`"},{"content":"A reference to a <ph id=\"ph1\">`COLORREF`</ph> parameter where this method stores the color for the border of the tab window.","pos":[48769,48875],"source":" A reference to a `COLORREF` parameter where this method stores the color for the border of the tab window."},{"content":"The default color for the border is black.","pos":[48876,48918]},{"content":"[out] <ph id=\"ph1\">`clrHighlight`</ph>","pos":[48925,48945],"source":"[out] `clrHighlight`"},{"content":"A reference to a <ph id=\"ph1\">`COLORREF`</ph> parameter where this method stores the color for the highlight state of the tab window.","pos":[48949,49064],"source":" A reference to a `COLORREF` parameter where this method stores the color for the highlight state of the tab window."},{"content":"[out] <ph id=\"ph1\">`clrFace`</ph>","pos":[49071,49086],"source":"[out] `clrFace`"},{"content":"A reference to a <ph id=\"ph1\">`COLORREF`</ph> parameter where this method stores the color for face of the tab window.","pos":[49090,49190],"source":" A reference to a `COLORREF` parameter where this method stores the color for face of the tab window."},{"content":"[out] <ph id=\"ph1\">`clrDarkShadow`</ph>","pos":[49197,49218],"source":"[out] `clrDarkShadow`"},{"content":"A reference to a <ph id=\"ph1\">`COLORREF`</ph> parameter where this method stores the color for the shadow of the tab window.","pos":[49222,49328],"source":" A reference to a `COLORREF` parameter where this method stores the color for the shadow of the tab window."},{"content":"[out] <ph id=\"ph1\">`clrLight`</ph>","pos":[49335,49351],"source":"[out] `clrLight`"},{"content":"A reference to a <ph id=\"ph1\">`COLORREF`</ph> parameter where this method stores the color for the light edge of the tab window.","pos":[49355,49465],"source":" A reference to a `COLORREF` parameter where this method stores the color for the light edge of the tab window."},{"content":"[out] <ph id=\"ph1\">`pbrFace`</ph>","pos":[49472,49487],"source":"[out] `pbrFace`"},{"content":"A pointer to a reference for a brush.","pos":[49491,49528]},{"content":"This method stores the brush that it uses to fill the face of the tab window in this parameter.","pos":[49529,49624]},{"content":"[out] <ph id=\"ph1\">`pbrBlack`</ph>","pos":[49631,49647],"source":"[out] `pbrBlack`"},{"content":"A pointer to a reference for a brush.","pos":[49651,49688]},{"content":"This method stores the brush it uses to fill the black edge of the tab window in this parameter.","pos":[49689,49785]},{"pos":[49795,49802],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this function in a derived class if you want to customize the set of colors that the framework uses when it draws a tab window.","pos":[49806,49942]},{"pos":[49952,50039],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__gettabhorzmargin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetTabHorzMargin","linkify":"<a name=\"cmfcvisualmanager__gettabhorzmargin\"></a>  CMFCVisualManager::GetTabHorzMargin","source":"<a name=\"cmfcvisualmanager__gettabhorzmargin\"></a>  CMFCVisualManager::GetTabHorzMargin"},{"pos":[50221,50231],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[50235,50258],"content":"[in] <ph id=\"ph1\">`CMFCBaseTabCtrl*`</ph>","source":"[in] `CMFCBaseTabCtrl*`"},{"pos":[50268,50280],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[50290,50297],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[50307,50392],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__gettabtextcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetTabTextColor","linkify":"<a name=\"cmfcvisualmanager__gettabtextcolor\"></a>  CMFCVisualManager::GetTabTextColor","source":"<a name=\"cmfcvisualmanager__gettabtextcolor\"></a>  CMFCVisualManager::GetTabTextColor"},{"pos":[50602,50612],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`CMFCBaseTabCtrl*`</ph>","pos":[50616,50639],"source":"[in] `CMFCBaseTabCtrl*`"},{"content":"[in] <ph id=\"ph1\">`int`</ph>","pos":[50643,50653],"source":" [in] `int`"},{"content":"[in] <ph id=\"ph1\">`BOOL`</ph>","pos":[50657,50668],"source":" [in] `BOOL`"},{"pos":[50678,50690],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[50700,50707],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[50717,50832],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__gettaskspanegroupcaptionheight\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetTasksPaneGroupCaptionHeight","linkify":"<a name=\"cmfcvisualmanager__gettaskspanegroupcaptionheight\"></a>  CMFCVisualManager::GetTasksPaneGroupCaptionHeight","source":"<a name=\"cmfcvisualmanager__gettaskspanegroupcaptionheight\"></a>  CMFCVisualManager::GetTasksPaneGroupCaptionHeight"},{"pos":[51007,51019],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[51029,51036],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[51046,51169],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__gettaskspanegroupcaptionhorzoffset\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetTasksPaneGroupCaptionHorzOffset","linkify":"<a name=\"cmfcvisualmanager__gettaskspanegroupcaptionhorzoffset\"></a>  CMFCVisualManager::GetTasksPaneGroupCaptionHorzOffset","source":"<a name=\"cmfcvisualmanager__gettaskspanegroupcaptionhorzoffset\"></a>  CMFCVisualManager::GetTasksPaneGroupCaptionHorzOffset"},{"pos":[51348,51360],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[51370,51377],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[51387,51510],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__gettaskspanegroupcaptionvertoffset\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetTasksPaneGroupCaptionVertOffset","linkify":"<a name=\"cmfcvisualmanager__gettaskspanegroupcaptionvertoffset\"></a>  CMFCVisualManager::GetTasksPaneGroupCaptionVertOffset","source":"<a name=\"cmfcvisualmanager__gettaskspanegroupcaptionvertoffset\"></a>  CMFCVisualManager::GetTasksPaneGroupCaptionVertOffset"},{"pos":[51689,51701],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[51711,51718],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[51728,51837],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__gettaskspanegroupvertoffset\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetTasksPaneGroupVertOffset","linkify":"<a name=\"cmfcvisualmanager__gettaskspanegroupvertoffset\"></a>  CMFCVisualManager::GetTasksPaneGroupVertOffset","source":"<a name=\"cmfcvisualmanager__gettaskspanegroupvertoffset\"></a>  CMFCVisualManager::GetTasksPaneGroupVertOffset"},{"pos":[52009,52021],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[52031,52038],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[52048,52147],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__gettaskspanehorzmargin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetTasksPaneHorzMargin","linkify":"<a name=\"cmfcvisualmanager__gettaskspanehorzmargin\"></a>  CMFCVisualManager::GetTasksPaneHorzMargin","source":"<a name=\"cmfcvisualmanager__gettaskspanehorzmargin\"></a>  CMFCVisualManager::GetTasksPaneHorzMargin"},{"pos":[52314,52326],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[52336,52343],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[52353,52460],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__gettaskspaneiconhorzoffset\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetTasksPaneIconHorzOffset","linkify":"<a name=\"cmfcvisualmanager__gettaskspaneiconhorzoffset\"></a>  CMFCVisualManager::GetTasksPaneIconHorzOffset","source":"<a name=\"cmfcvisualmanager__gettaskspaneiconhorzoffset\"></a>  CMFCVisualManager::GetTasksPaneIconHorzOffset"},{"pos":[52631,52643],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[52653,52660],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[52670,52777],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__gettaskspaneiconvertoffset\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetTasksPaneIconVertOffset","linkify":"<a name=\"cmfcvisualmanager__gettaskspaneiconvertoffset\"></a>  CMFCVisualManager::GetTasksPaneIconVertOffset","source":"<a name=\"cmfcvisualmanager__gettaskspaneiconvertoffset\"></a>  CMFCVisualManager::GetTasksPaneIconVertOffset"},{"pos":[52948,52960],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[52970,52977],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[52987,53094],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__gettaskspanetaskhorzoffset\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetTasksPaneTaskHorzOffset","linkify":"<a name=\"cmfcvisualmanager__gettaskspanetaskhorzoffset\"></a>  CMFCVisualManager::GetTasksPaneTaskHorzOffset","source":"<a name=\"cmfcvisualmanager__gettaskspanetaskhorzoffset\"></a>  CMFCVisualManager::GetTasksPaneTaskHorzOffset"},{"pos":[53265,53277],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[53287,53294],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[53304,53403],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__gettaskspanevertmargin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetTasksPaneVertMargin","linkify":"<a name=\"cmfcvisualmanager__gettaskspanevertmargin\"></a>  CMFCVisualManager::GetTasksPaneVertMargin","source":"<a name=\"cmfcvisualmanager__gettaskspanevertmargin\"></a>  CMFCVisualManager::GetTasksPaneVertMargin"},{"pos":[53570,53582],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[53592,53599],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[53609,53714],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__gettoolbarbuttontextcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetToolbarButtonTextColor","linkify":"<a name=\"cmfcvisualmanager__gettoolbarbuttontextcolor\"></a>  CMFCVisualManager::GetToolbarButtonTextColor","source":"<a name=\"cmfcvisualmanager__gettoolbarbuttontextcolor\"></a>  CMFCVisualManager::GetToolbarButtonTextColor"},{"content":"The framework calls this method to determine the text color of a toolbar button.","pos":[53718,53798]},{"pos":[53949,53959],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[53963,53977],"source":"[in] `pButton`"},{"content":"A pointer to the toolbar button.","pos":[53981,54013]},{"content":"[in] <ph id=\"ph1\">`state`</ph>","pos":[54020,54032],"source":"[in] `state`"},{"content":"The state of the toolbar button.","pos":[54036,54068]},{"pos":[54078,54090],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[54094,54165],"content":"The text color of <ph id=\"ph1\">`pButton`</ph> when it has the state indicated by <ph id=\"ph2\">`state`</ph>.","source":"The text color of `pButton` when it has the state indicated by `state`."},{"pos":[54175,54182],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The text color of a <bpt id=\"p1\">[</bpt>CMFCToolBarButton Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept> object depends on the state of the button.","pos":[54186,54322],"source":"The text color of a [CMFCToolBarButton Class](../../mfc/reference/cmfctoolbarbutton-class.md) object depends on the state of the button."},{"content":"The possible states of a toolbar button are <ph id=\"ph1\">`ButtonsIsRegular`</ph>, <ph id=\"ph2\">`ButtonsIsPressed`</ph>, or <ph id=\"ph3\">`ButtonsIsHighlighted`</ph>.","pos":[54323,54433],"source":" The possible states of a toolbar button are `ButtonsIsRegular`, `ButtonsIsPressed`, or `ButtonsIsHighlighted`."},{"content":"Override this function to customize the text color of a toolbar button in your application.","pos":[54440,54531]},{"pos":[54541,54658],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__gettoolbarcustomizebuttonmargin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetToolBarCustomizeButtonMargin","linkify":"<a name=\"cmfcvisualmanager__gettoolbarcustomizebuttonmargin\"></a>  CMFCVisualManager::GetToolBarCustomizeButtonMargin","source":"<a name=\"cmfcvisualmanager__gettoolbarcustomizebuttonmargin\"></a>  CMFCVisualManager::GetToolBarCustomizeButtonMargin"},{"pos":[54842,54854],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[54864,54871],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[54881,54982],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__gettoolbardisabledcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetToolbarDisabledColor","linkify":"<a name=\"cmfcvisualmanager__gettoolbardisabledcolor\"></a>  CMFCVisualManager::GetToolbarDisabledColor","source":"<a name=\"cmfcvisualmanager__gettoolbardisabledcolor\"></a>  CMFCVisualManager::GetToolbarDisabledColor"},{"pos":[55163,55175],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[55185,55192],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[55202,55311],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__gettoolbardisabledtextcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetToolbarDisabledTextColor","linkify":"<a name=\"cmfcvisualmanager__gettoolbardisabledtextcolor\"></a>  CMFCVisualManager::GetToolbarDisabledTextColor","source":"<a name=\"cmfcvisualmanager__gettoolbardisabledtextcolor\"></a>  CMFCVisualManager::GetToolbarDisabledTextColor"},{"content":"The framework calls this function to determine the text color of toolbar buttons that are unavailable.","pos":[55315,55417]},{"pos":[55490,55502],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The color that the framework uses for the text color of toolbar buttons that are unavailable.","pos":[55506,55599]},{"pos":[55609,55616],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a custom visual manager to set the text color of toolbar buttons that are unavailable .","pos":[55620,55731]},{"pos":[55741,55844],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__gettoolbarhighlightcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetToolbarHighlightColor","linkify":"<a name=\"cmfcvisualmanager__gettoolbarhighlightcolor\"></a>  CMFCVisualManager::GetToolbarHighlightColor","source":"<a name=\"cmfcvisualmanager__gettoolbarhighlightcolor\"></a>  CMFCVisualManager::GetToolbarHighlightColor"},{"pos":[56017,56029],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[56039,56046],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[56056,56139],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__gettooltipinfo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::GetToolTipInfo","linkify":"<a name=\"cmfcvisualmanager__gettooltipinfo\"></a>  CMFCVisualManager::GetToolTipInfo","source":"<a name=\"cmfcvisualmanager__gettooltipinfo\"></a>  CMFCVisualManager::GetToolTipInfo"},{"pos":[56357,56367],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`params`</ph>","pos":[56371,56384],"source":"[in] `params`"},{"content":"[in] <ph id=\"ph1\">`nType`</ph>","pos":[56388,56400],"source":" [in] `nType`"},{"pos":[56410,56422],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[56432,56439],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[56449,56560],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__hasoverlappedautohidebuttons\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::HasOverlappedAutoHideButtons","linkify":"<a name=\"cmfcvisualmanager__hasoverlappedautohidebuttons\"></a>  CMFCVisualManager::HasOverlappedAutoHideButtons","source":"<a name=\"cmfcvisualmanager__hasoverlappedautohidebuttons\"></a>  CMFCVisualManager::HasOverlappedAutoHideButtons"},{"content":"Returns whether auto-hide buttons overlap in the current visual manager.","pos":[56564,56636]},{"pos":[56715,56727],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[56731,56791],"content":"<ph id=\"ph1\">`TRUE`</ph> if auto-hide buttons overlap; <ph id=\"ph2\">`FALSE`</ph> if they do not.","source":"`TRUE` if auto-hide buttons overlap; `FALSE` if they do not."},{"pos":[56801,56882],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__isautodestroy\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::IsAutoDestroy","linkify":"<a name=\"cmfcvisualmanager__isautodestroy\"></a>  CMFCVisualManager::IsAutoDestroy","source":"<a name=\"cmfcvisualmanager__isautodestroy\"></a>  CMFCVisualManager::IsAutoDestroy"},{"pos":[57041,57053],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[57063,57070],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[57080,57185],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__isdefaultwinxppopupbutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::IsDefaultWinXPPopupButton","linkify":"<a name=\"cmfcvisualmanager__isdefaultwinxppopupbutton\"></a>  CMFCVisualManager::IsDefaultWinXPPopupButton","source":"<a name=\"cmfcvisualmanager__isdefaultwinxppopupbutton\"></a>  CMFCVisualManager::IsDefaultWinXPPopupButton"},{"pos":[57390,57400],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[57404,57437],"content":"[in] <ph id=\"ph1\">`CMFCDesktopAlertWndButton*`</ph>","source":"[in] `CMFCDesktopAlertWndButton*`"},{"pos":[57447,57459],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[57469,57476],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[57486,57583],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__isdockingtabhasborder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::IsDockingTabHasBorder","linkify":"<a name=\"cmfcvisualmanager__isdockingtabhasborder\"></a>  CMFCVisualManager::IsDockingTabHasBorder","source":"<a name=\"cmfcvisualmanager__isdockingtabhasborder\"></a>  CMFCVisualManager::IsDockingTabHasBorder"},{"content":"Returns whether the current visual manager draws borders around panes that are docked and tabbed.","pos":[57587,57684]},{"pos":[57747,57759],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[57763,57865],"content":"<ph id=\"ph1\">`TRUE`</ph> if the visual manager draws borders around panes that are docked and tabbed; <ph id=\"ph2\">`FALSE`</ph> otherwise.","source":"`TRUE` if the visual manager draws borders around panes that are docked and tabbed; `FALSE` otherwise."},{"pos":[57875,57882],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Docked panes become tabbed when multiple panes are docked to the same location.","pos":[57886,57965]},{"pos":[57975,58072],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__isembossdisabledimage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::IsEmbossDisabledImage","linkify":"<a name=\"cmfcvisualmanager__isembossdisabledimage\"></a>  CMFCVisualManager::IsEmbossDisabledImage","source":"<a name=\"cmfcvisualmanager__isembossdisabledimage\"></a>  CMFCVisualManager::IsEmbossDisabledImage"},{"content":"Specifies whether the framework embosses images that are unavailable.","pos":[58076,58145]},{"pos":[58209,58221],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the framework embosses images that are unavailable; otherwise 0.","pos":[58225,58300]},{"pos":[58310,58317],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[58321,58502],"content":"This method is called by <bpt id=\"p1\">[</bpt>CMFCToolBarImages::Draw<ept id=\"p1\">](../../mfc/reference/cmfctoolbarimages-class.md#cmfctoolbarimages__draw)</ept> when it draws an image on the toolbar that is unavailable.","source":"This method is called by [CMFCToolBarImages::Draw](../../mfc/reference/cmfctoolbarimages-class.md#cmfctoolbarimages__draw) when it draws an image on the toolbar that is unavailable."},{"pos":[58512,58605],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__isfadeinactiveimage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::IsFadeInactiveImage","linkify":"<a name=\"cmfcvisualmanager__isfadeinactiveimage\"></a>  CMFCVisualManager::IsFadeInactiveImage","source":"<a name=\"cmfcvisualmanager__isfadeinactiveimage\"></a>  CMFCVisualManager::IsFadeInactiveImage"},{"content":"The framework calls this method when it draws inactive images on the toolbar or in a menu.","pos":[58609,58699]},{"pos":[58761,58773],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the framework uses the lighting effect when it draws inactive images on the toolbar or in a menu; otherwise 0.","pos":[58777,58898]},{"pos":[58908,58915],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can activate or deactivate the lighting effect by calling <bpt id=\"p1\">[</bpt>CMFCVisualManager::SetFadeInactiveImage<ept id=\"p1\">](#cmfcvisualmanager__setfadeinactiveimage)</ept>.","pos":[58919,59065],"source":"You can activate or deactivate the lighting effect by calling [CMFCVisualManager::SetFadeInactiveImage](#cmfcvisualmanager__setfadeinactiveimage)."},{"content":"The lighting effect is what makes unavailable images appear faded.","pos":[59066,59132]},{"pos":[59142,59243],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__isframemenucheckeditems\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::IsFrameMenuCheckedItems","linkify":"<a name=\"cmfcvisualmanager__isframemenucheckeditems\"></a>  CMFCVisualManager::IsFrameMenuCheckedItems","source":"<a name=\"cmfcvisualmanager__isframemenucheckeditems\"></a>  CMFCVisualManager::IsFrameMenuCheckedItems"},{"pos":[59412,59424],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[59434,59441],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[59451,59550],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ishighlightonenotetabs\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::IsHighlightOneNoteTabs","linkify":"<a name=\"cmfcvisualmanager__ishighlightonenotetabs\"></a>  CMFCVisualManager::IsHighlightOneNoteTabs","source":"<a name=\"cmfcvisualmanager__ishighlightonenotetabs\"></a>  CMFCVisualManager::IsHighlightOneNoteTabs"},{"pos":[59726,59738],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[59748,59755],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[59765,59868],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ishighlightwholemenuitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::IsHighlightWholeMenuItem","linkify":"<a name=\"cmfcvisualmanager__ishighlightwholemenuitem\"></a>  CMFCVisualManager::IsHighlightWholeMenuItem","source":"<a name=\"cmfcvisualmanager__ishighlightwholemenuitem\"></a>  CMFCVisualManager::IsHighlightWholeMenuItem"},{"pos":[60037,60049],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[60059,60066],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[60076,60173],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__islayeredribbonkeytip\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::IsLayeredRibbonKeyTip","linkify":"<a name=\"cmfcvisualmanager__islayeredribbonkeytip\"></a>  CMFCVisualManager::IsLayeredRibbonKeyTip","source":"<a name=\"cmfcvisualmanager__islayeredribbonkeytip\"></a>  CMFCVisualManager::IsLayeredRibbonKeyTip"},{"pos":[60348,60360],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[60370,60377],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[60387,60470],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ismenuflatlook\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::IsMenuFlatLook","linkify":"<a name=\"cmfcvisualmanager__ismenuflatlook\"></a>  CMFCVisualManager::IsMenuFlatLook","source":"<a name=\"cmfcvisualmanager__ismenuflatlook\"></a>  CMFCVisualManager::IsMenuFlatLook"},{"content":"Indicates whether menu buttons appear flat.","pos":[60474,60517]},{"pos":[60574,60586],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if menu buttons appear flat; 0 otherwise.","pos":[60590,60639]},{"pos":[60649,60656],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, menu buttons do not appear flat.","pos":[60660,60704]},{"content":"Use the <bpt id=\"p1\">[</bpt>CMFCVisualManager::SetMenuFlatLook<ept id=\"p1\">](#cmfcvisualmanager__setmenuflatlook)</ept> method to change this behavior.","pos":[60705,60818],"source":" Use the [CMFCVisualManager::SetMenuFlatLook](#cmfcvisualmanager__setmenuflatlook) method to change this behavior."},{"content":"When menu buttons appear flat, they do not change appearance when the user clicks on them.","pos":[60819,60909]},{"pos":[60919,61014],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__isofficexpstylemenus\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::IsOfficeXPStyleMenus","linkify":"<a name=\"cmfcvisualmanager__isofficexpstylemenus\"></a>  CMFCVisualManager::IsOfficeXPStyleMenus","source":"<a name=\"cmfcvisualmanager__isofficexpstylemenus\"></a>  CMFCVisualManager::IsOfficeXPStyleMenus"},{"content":"Indicates whether the visual manager implements Office XP-style menus.","pos":[61018,61088]},{"pos":[61159,61171],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the visual manager displays Office XP-style menus; otherwise 0.","pos":[61175,61249]},{"pos":[61259,61266],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <bpt id=\"p1\">[</bpt>CMFCPopupMenu Class<ept id=\"p1\">](../../mfc/reference/cmfcpopupmenu-class.md)</ept> calls this method when it has to draw the menu and shadow.","pos":[61270,61398],"source":"The [CMFCPopupMenu Class](../../mfc/reference/cmfcpopupmenu-class.md) calls this method when it has to draw the menu and shadow."},{"content":"By default, this method returns <ph id=\"ph1\">`FALSE`</ph>.","pos":[61399,61439],"source":" By default, this method returns `FALSE`."},{"content":"If you want to use pop-up menus similar to the pop-up menus in Office XP, override this method in a custom visual manager and return <ph id=\"ph1\">`TRUE`</ph>.","pos":[61440,61580],"source":" If you want to use pop-up menus similar to the pop-up menus in Office XP, override this method in a custom visual manager and return `TRUE`."},{"pos":[61590,61687],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__isoffsetpressedbutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::IsOffsetPressedButton","linkify":"<a name=\"cmfcvisualmanager__isoffsetpressedbutton\"></a>  CMFCVisualManager::IsOffsetPressedButton","source":"<a name=\"cmfcvisualmanager__isoffsetpressedbutton\"></a>  CMFCVisualManager::IsOffsetPressedButton"},{"pos":[61862,61874],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[61884,61891],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[61901,61992],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__isownerdrawcaption\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::IsOwnerDrawCaption","linkify":"<a name=\"cmfcvisualmanager__isownerdrawcaption\"></a>  CMFCVisualManager::IsOwnerDrawCaption","source":"<a name=\"cmfcvisualmanager__isownerdrawcaption\"></a>  CMFCVisualManager::IsOwnerDrawCaption"},{"content":"Indicates whether the current visual manager implements owner-drawn captions.","pos":[61996,62073]},{"pos":[62133,62145],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[62149,62244],"content":"<ph id=\"ph1\">`TRUE`</ph> if all the frame windows in the application have owner-draw captions; <ph id=\"ph2\">`FALSE`</ph> otherwise.","source":"`TRUE` if all the frame windows in the application have owner-draw captions; `FALSE` otherwise."},{"pos":[62254,62349],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__isownerdrawmenucheck\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::IsOwnerDrawMenuCheck","linkify":"<a name=\"cmfcvisualmanager__isownerdrawmenucheck\"></a>  CMFCVisualManager::IsOwnerDrawMenuCheck","source":"<a name=\"cmfcvisualmanager__isownerdrawmenucheck\"></a>  CMFCVisualManager::IsOwnerDrawMenuCheck"},{"pos":[62514,62526],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[62536,62543],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[62553,62656],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__isshadowhighlightedimage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::IsShadowHighlightedImage","linkify":"<a name=\"cmfcvisualmanager__isshadowhighlightedimage\"></a>  CMFCVisualManager::IsShadowHighlightedImage","source":"<a name=\"cmfcvisualmanager__isshadowhighlightedimage\"></a>  CMFCVisualManager::IsShadowHighlightedImage"},{"content":"Indicates whether the visual manager displays shadows when rendering highlighted images.","pos":[62660,62748]},{"pos":[62815,62827],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero when the visual manager displays shadows under highlighted images; 0 otherwise.","pos":[62831,62918]},{"pos":[62928,63035],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__istoolbarbuttonfillenabled\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::IsToolbarButtonFillEnabled","linkify":"<a name=\"cmfcvisualmanager__istoolbarbuttonfillenabled\"></a>  CMFCVisualManager::IsToolbarButtonFillEnabled","source":"<a name=\"cmfcvisualmanager__istoolbarbuttonfillenabled\"></a>  CMFCVisualManager::IsToolbarButtonFillEnabled"},{"pos":[63207,63219],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[63229,63236],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[63246,63339],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__istoolbarroundshape\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::IsToolbarRoundShape","linkify":"<a name=\"cmfcvisualmanager__istoolbarroundshape\"></a>  CMFCVisualManager::IsToolbarRoundShape","source":"<a name=\"cmfcvisualmanager__istoolbarroundshape\"></a>  CMFCVisualManager::IsToolbarRoundShape"},{"pos":[63515,63525],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[63529,63548],"content":"[in] <ph id=\"ph1\">`CMFCToolBar*`</ph>","source":"[in] `CMFCToolBar*`"},{"pos":[63558,63570],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[63580,63587],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[63597,63702],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__iswindowsthemingsupported\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::IsWindowsThemingSupported","linkify":"<a name=\"cmfcvisualmanager__iswindowsthemingsupported\"></a>  CMFCVisualManager::IsWindowsThemingSupported","source":"<a name=\"cmfcvisualmanager__iswindowsthemingsupported\"></a>  CMFCVisualManager::IsWindowsThemingSupported"},{"pos":[63881,63893],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[63903,63910],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[63920,64001],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__onactivateapp\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnActivateApp","linkify":"<a name=\"cmfcvisualmanager__onactivateapp\"></a>  CMFCVisualManager::OnActivateApp","source":"<a name=\"cmfcvisualmanager__onactivateapp\"></a>  CMFCVisualManager::OnActivateApp"},{"pos":[64194,64204],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pWnd`</ph>","pos":[64208,64219],"source":"[in] `pWnd`"},{"content":"[in] <ph id=\"ph1\">`bActive`</ph>","pos":[64223,64237],"source":" [in] `bActive`"},{"pos":[64247,64254],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[64264,64371],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawautohidebuttonborder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawAutoHideButtonBorder","linkify":"<a name=\"cmfcvisualmanager__ondrawautohidebuttonborder\"></a>  CMFCVisualManager::OnDrawAutoHideButtonBorder","source":"<a name=\"cmfcvisualmanager__ondrawautohidebuttonborder\"></a>  CMFCVisualManager::OnDrawAutoHideButtonBorder"},{"content":"The framework calls this method when it draws the border of an auto-hide button.","pos":[64375,64455]},{"pos":[64623,64633],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[64637,64647],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[64651,64681]},{"content":"[in] <ph id=\"ph1\">`rectBounds`</ph>","pos":[64688,64705],"source":"[in] `rectBounds`"},{"content":"The size and location of the auto-hide button.","pos":[64709,64755]},{"content":"[in] <ph id=\"ph1\">`rectBorderSize`</ph>","pos":[64762,64783],"source":"[in] `rectBorderSize`"},{"content":"A <bpt id=\"p1\">[</bpt>CRect<ept id=\"p1\">](../../atl-mfc-shared/reference/crect-class.md)</ept> parameter that contains the sizes of the borders.","pos":[64787,64893],"source":" A [CRect](../../atl-mfc-shared/reference/crect-class.md) parameter that contains the sizes of the borders."},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[64900,64914],"source":"[in] `pButton`"},{"content":"A pointer to the auto-hide button.","pos":[64918,64952]},{"content":"The framework is drawing the border for this button.","pos":[64953,65005]},{"pos":[65015,65022],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived class if you want to customize the appearance of the border of an auto-hide button.","pos":[65026,65143]},{"content":"By default, this method fills a flat border with the default shadow color for your application.","pos":[65144,65239]},{"content":"The <ph id=\"ph1\">`rectBorderSize`</ph> parameter does not contain the coordinates of the border.","pos":[65246,65324],"source":"The `rectBorderSize` parameter does not contain the coordinates of the border."},{"content":"It contains the size of the border in the <ph id=\"ph1\">`top`</ph>, <ph id=\"ph2\">`bottom`</ph>, <ph id=\"ph3\">`left`</ph>, and <ph id=\"ph4\">`right`</ph> data members.","pos":[65325,65417],"source":" It contains the size of the border in the `top`, `bottom`, `left`, and `right` data members."},{"content":"A value less than or equal to 0 indicates no border on that side of the auto-hide button.","pos":[65418,65507]},{"pos":[65517,65604],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawbargripper\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawBarGripper","linkify":"<a name=\"cmfcvisualmanager__ondrawbargripper\"></a>  CMFCVisualManager::OnDrawBarGripper","source":"<a name=\"cmfcvisualmanager__ondrawbargripper\"></a>  CMFCVisualManager::OnDrawBarGripper"},{"content":"Called by the framework when it draws the gripper for a control bar.","pos":[65608,65676]},{"pos":[65813,65823],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[65827,65837],"source":"[in] `pDC`"},{"content":"A pointer to the device context for a control bar.","pos":[65841,65891]},{"content":"[in] <ph id=\"ph1\">`rectGripper`</ph>","pos":[65898,65916],"source":"[in] `rectGripper`"},{"content":"The bounding rectangle for the control bar.","pos":[65920,65963]},{"content":"[in] <ph id=\"ph1\">`bHorz`</ph>","pos":[65970,65982],"source":"[in] `bHorz`"},{"content":"A Boolean parameter that specifies whether the control bar is docked horizontally or vertically.","pos":[65986,66082]},{"content":"[in] <ph id=\"ph1\">`pBar`</ph>","pos":[66089,66100],"source":"[in] `pBar`"},{"content":"A pointer to a control bar.","pos":[66104,66131]},{"content":"The visual manager draws the gripper of this control bar.","pos":[66132,66189]},{"pos":[66199,66206],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation of this method displays the standard gripper.","pos":[66210,66282]},{"content":"To customize the appearance of the gripper, override this method in a custom class derived from the <bpt id=\"p1\">[</bpt>CMFCVisualManager Class<ept id=\"p1\">](../../mfc/reference/cmfcvisualmanager-class.md)</ept>.","pos":[66283,66457],"source":" To customize the appearance of the gripper, override this method in a custom class derived from the [CMFCVisualManager Class](../../mfc/reference/cmfcvisualmanager-class.md)."},{"pos":[66467,66558],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawbrowsebutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawBrowseButton","linkify":"<a name=\"cmfcvisualmanager__ondrawbrowsebutton\"></a>  CMFCVisualManager::OnDrawBrowseButton","source":"<a name=\"cmfcvisualmanager__ondrawbrowsebutton\"></a>  CMFCVisualManager::OnDrawBrowseButton"},{"content":"The framework calls this method when it draws the browse button for an edit control.","pos":[66562,66646]},{"pos":[66844,66854],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[66858,66868],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[66872,66902]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[66909,66920],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundary for the browse button.","pos":[66924,66986]},{"content":"[in] <ph id=\"ph1\">`pEdit`</ph>","pos":[66993,67005],"source":"[in] `pEdit`"},{"content":"A pointer to an edit control.","pos":[67009,67038]},{"content":"The visual manager draws the browse button for this edit control.","pos":[67039,67104]},{"content":"[in] <ph id=\"ph1\">`state`</ph>","pos":[67111,67123],"source":"[in] `state`"},{"content":"An enumerated value that specifies the state of the button.","pos":[67127,67186]},{"content":"[out] <ph id=\"ph1\">`clrText`</ph>","pos":[67193,67208],"source":"[out] `clrText`"},{"content":"A reference to a <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> parameter.","pos":[67212,67310],"source":" A reference to a [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter."},{"content":"This is a reserved value and is currently unused.","pos":[67311,67360]},{"pos":[67370,67382],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[67386,67426],"content":"<ph id=\"ph1\">`TRUE`</ph> if successful; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if successful; otherwise `FALSE`."},{"pos":[67436,67443],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this function in a derived class if you want to customize the appearance of browse buttons in instances of the <bpt id=\"p1\">[</bpt>CMFCEditBrowseCtrl Class<ept id=\"p1\">](../../mfc/reference/cmfceditbrowsectrl-class.md)</ept>.","pos":[67447,67643],"source":"Override this function in a derived class if you want to customize the appearance of browse buttons in instances of the [CMFCEditBrowseCtrl Class](../../mfc/reference/cmfceditbrowsectrl-class.md)."},{"content":"The possible values for the state of the button are <ph id=\"ph1\">`ButtonsIsRegular`</ph>, <ph id=\"ph2\">`ButtonsIsPressed`</ph>, and <ph id=\"ph3\">`ButtonsIsHighlighted`</ph>.","pos":[67644,67763],"source":" The possible values for the state of the button are `ButtonsIsRegular`, `ButtonsIsPressed`, and `ButtonsIsHighlighted`."},{"pos":[67773,67864],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawbuttonborder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawButtonBorder","linkify":"<a name=\"cmfcvisualmanager__ondrawbuttonborder\"></a>  CMFCVisualManager::OnDrawButtonBorder","source":"<a name=\"cmfcvisualmanager__ondrawbuttonborder\"></a>  CMFCVisualManager::OnDrawButtonBorder"},{"content":"The framework calls this method when it draws the border of a toolbar button.","pos":[67868,67945]},{"pos":[68119,68129],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[68133,68143],"source":"[in] `pDC`"},{"content":"A pointer to the device context of a toolbar button.","pos":[68147,68199]},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[68206,68220],"source":"[in] `pButton`"},{"content":"A pointer to a toolbar button.","pos":[68224,68254]},{"content":"The framework draws the border of this button.","pos":[68255,68301]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[68308,68319],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the toolbar button.","pos":[68323,68387]},{"content":"[in] <ph id=\"ph1\">`state`</ph>","pos":[68394,68406],"source":"[in] `state`"},{"content":"An enumerated data type that specifies the current state of the toolbar button.","pos":[68410,68489]},{"pos":[68499,68506],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation of this method displays the standard border.","pos":[68510,68581]},{"content":"Override this method in a derived visual manager to customize the appearance of the border of a toolbar button.","pos":[68582,68693]},{"pos":[68700,68810],"content":"The possible states of a toolbar button are <ph id=\"ph1\">`ButtonsIsRegular`</ph>, <ph id=\"ph2\">`ButtonsIsPressed`</ph>, or <ph id=\"ph3\">`ButtonsIsHighlighted`</ph>.","source":"The possible states of a toolbar button are `ButtonsIsRegular`, `ButtonsIsPressed`, or `ButtonsIsHighlighted`."},{"pos":[68820,68917],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawbuttonseparator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawButtonSeparator","linkify":"<a name=\"cmfcvisualmanager__ondrawbuttonseparator\"></a>  CMFCVisualManager::OnDrawButtonSeparator","source":"<a name=\"cmfcvisualmanager__ondrawbuttonseparator\"></a>  CMFCVisualManager::OnDrawButtonSeparator"},{"pos":[69215,69225],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[69229,69239],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[69243,69257],"source":" [in] `pButton`"},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[69261,69272],"source":" [in] `rect`"},{"content":"[in] <ph id=\"ph1\">`state`</ph>","pos":[69276,69288],"source":" [in] `state`"},{"content":"[in] <ph id=\"ph1\">`bHorz`</ph>","pos":[69292,69304],"source":" [in] `bHorz`"},{"pos":[69314,69321],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[69331,69430],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawcaptionbarborder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawCaptionBarBorder","linkify":"<a name=\"cmfcvisualmanager__ondrawcaptionbarborder\"></a>  CMFCVisualManager::OnDrawCaptionBarBorder","source":"<a name=\"cmfcvisualmanager__ondrawcaptionbarborder\"></a>  CMFCVisualManager::OnDrawCaptionBarBorder"},{"pos":[69434,69571],"content":"The framework calls this method when it draws the border of a <bpt id=\"p1\">[</bpt>CMFCCaptionBar Class<ept id=\"p1\">](../../mfc/reference/cmfccaptionbar-class.md)</ept> object.","source":"The framework calls this method when it draws the border of a [CMFCCaptionBar Class](../../mfc/reference/cmfccaptionbar-class.md) object."},{"pos":[69747,69757],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[69761,69771],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[69775,69805]},{"content":"[in] <ph id=\"ph1\">`pBar`</ph>","pos":[69812,69823],"source":"[in] `pBar`"},{"content":"A pointer to a <ph id=\"ph1\">`CMFCCaptionBar`</ph> object.","pos":[69827,69866],"source":" A pointer to a `CMFCCaptionBar` object."},{"content":"The framework draws this caption bar.","pos":[69867,69904]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[69911,69922],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the caption bar.","pos":[69926,69987]},{"content":"[in] <ph id=\"ph1\">`clrBarBorder`</ph>","pos":[69994,70013],"source":"[in] `clrBarBorder`"},{"content":"The color of the border.","pos":[70017,70041]},{"content":"[in] <ph id=\"ph1\">`bFlatBorder`</ph>","pos":[70048,70066],"source":"[in] `bFlatBorder`"},{"content":"A Boolean parameter that specifies whether the border has a flat, 2D appearance.","pos":[70070,70150]},{"pos":[70160,70167],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived class to customize the appearance of the border of a caption bar.","pos":[70171,70270]},{"pos":[70280,70391],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawcaptionbarbuttonborder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawCaptionBarButtonBorder","linkify":"<a name=\"cmfcvisualmanager__ondrawcaptionbarbuttonborder\"></a>  CMFCVisualManager::OnDrawCaptionBarButtonBorder","source":"<a name=\"cmfcvisualmanager__ondrawcaptionbarbuttonborder\"></a>  CMFCVisualManager::OnDrawCaptionBarButtonBorder"},{"pos":[70752,70762],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[70766,70776],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`pBar`</ph>","pos":[70780,70791],"source":" [in] `pBar`"},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[70795,70806],"source":" [in] `rect`"},{"content":"[in] <ph id=\"ph1\">`bIsPressed`</ph>","pos":[70810,70827],"source":" [in] `bIsPressed`"},{"content":"[in] <ph id=\"ph1\">`bIsHighlighted`</ph>","pos":[70831,70852],"source":" [in] `bIsHighlighted`"},{"content":"[in] <ph id=\"ph1\">`bIsDisabled`</ph>","pos":[70856,70874],"source":" [in] `bIsDisabled`"},{"content":"[in] <ph id=\"ph1\">`bHasDropDownArrow`</ph>","pos":[70878,70902],"source":" [in] `bHasDropDownArrow`"},{"content":"[in] <ph id=\"ph1\">`bIsSysButton`</ph>","pos":[70906,70925],"source":" [in] `bIsSysButton`"},{"pos":[70935,70942],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[70952,71055],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawcaptionbarinfoarea\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawCaptionBarInfoArea","linkify":"<a name=\"cmfcvisualmanager__ondrawcaptionbarinfoarea\"></a>  CMFCVisualManager::OnDrawCaptionBarInfoArea","source":"<a name=\"cmfcvisualmanager__ondrawcaptionbarinfoarea\"></a>  CMFCVisualManager::OnDrawCaptionBarInfoArea"},{"pos":[71283,71293],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[71297,71307],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`pBar`</ph>","pos":[71311,71322],"source":" [in] `pBar`"},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[71326,71337],"source":" [in] `rect`"},{"pos":[71347,71354],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[71364,71457],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawcaptionbutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawCaptionButton","linkify":"<a name=\"cmfcvisualmanager__ondrawcaptionbutton\"></a>  CMFCVisualManager::OnDrawCaptionButton","source":"<a name=\"cmfcvisualmanager__ondrawcaptionbutton\"></a>  CMFCVisualManager::OnDrawCaptionButton"},{"pos":[71461,71584],"content":"The framework calls this method when it draws a <bpt id=\"p1\">[</bpt>CMFCCaptionButton<ept id=\"p1\">](../../mfc/reference/cmfccaptionbutton-class.md)</ept> object.","source":"The framework calls this method when it draws a [CMFCCaptionButton](../../mfc/reference/cmfccaptionbutton-class.md) object."},{"pos":[71801,71811],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[71815,71825],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[71829,71859]},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[71866,71880],"source":"[in] `pButton`"},{"content":"A pointer to a <ph id=\"ph1\">`CMFCCaptionButton`</ph> object.","pos":[71884,71926],"source":" A pointer to a `CMFCCaptionButton` object."},{"content":"The framework draws this caption button.","pos":[71927,71967]},{"content":"[in] <ph id=\"ph1\">`bActive`</ph>","pos":[71974,71988],"source":"[in] `bActive`"},{"content":"A Boolean parameter that specifies whether the button is active.","pos":[71992,72056]},{"content":"[in] <ph id=\"ph1\">`bHorz`</ph>","pos":[72063,72075],"source":"[in] `bHorz`"},{"content":"A Boolean parameter that specifies whether the caption is horizontal.","pos":[72079,72148]},{"content":"[in] <ph id=\"ph1\">`bMaximized`</ph>","pos":[72155,72172],"source":"[in] `bMaximized`"},{"content":"A Boolean parameter that specifies whether the parent pane is maximized.","pos":[72176,72248]},{"content":"[in] <ph id=\"ph1\">`bDisabled`</ph>","pos":[72255,72271],"source":"[in] `bDisabled`"},{"content":"A Boolean parameter that specifies whether the caption button is disabled.","pos":[72275,72349]},{"content":"[in] <ph id=\"ph1\">`nImageID`</ph>","pos":[72356,72371],"source":"[in] `nImageID`"},{"content":"The image index for the icon to use for the button.","pos":[72375,72426]},{"content":"If <ph id=\"ph1\">`nImageID`</ph> is -1, this method uses the image index recorded in <ph id=\"ph2\">`pButton`</ph>.","pos":[72427,72503],"source":" If `nImageID` is -1, this method uses the image index recorded in `pButton`."},{"pos":[72513,72520],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation of this method displays a small button from the global instance of the <ph id=\"ph1\">`CMenuImages`</ph> class.","pos":[72524,72642],"source":"The default implementation of this method displays a small button from the global instance of the `CMenuImages` class."},{"content":"The buttons are listed in the header file for <ph id=\"ph1\">`CMenuImages`</ph>.","pos":[72643,72703],"source":" The buttons are listed in the header file for `CMenuImages`."},{"content":"Some examples include <ph id=\"ph1\">`CMenuImages::IdClose`</ph>, <ph id=\"ph2\">`CMenuImages::IdArowLeft`</ph>, <ph id=\"ph3\">`CMenuImages::IdArowRight`</ph>, <ph id=\"ph4\">`CMenuImages::IdArowDown`</ph>, <ph id=\"ph5\">`CMenuImages::IdArowUp`</ph>, and <ph id=\"ph6\">`CMenuImages::IdPinHorz`</ph>.","pos":[72704,72886],"source":" Some examples include `CMenuImages::IdClose`, `CMenuImages::IdArowLeft`, `CMenuImages::IdArowRight`, `CMenuImages::IdArowDown`, `CMenuImages::IdArowUp`, and `CMenuImages::IdPinHorz`."},{"content":"Override this method in a derived class to customize the appearance of caption buttons.","pos":[72893,72980]},{"pos":[72990,73073],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawcheckbox\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawCheckBox","linkify":"<a name=\"cmfcvisualmanager__ondrawcheckbox\"></a>  CMFCVisualManager::OnDrawCheckBox","source":"<a name=\"cmfcvisualmanager__ondrawcheckbox\"></a>  CMFCVisualManager::OnDrawCheckBox"},{"pos":[73330,73340],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[73344,73354],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[73358,73369],"source":" [in] `rect`"},{"content":"[in] <ph id=\"ph1\">`bHighlighted`</ph>","pos":[73373,73392],"source":" [in] `bHighlighted`"},{"content":"[in] <ph id=\"ph1\">`bChecked`</ph>","pos":[73396,73411],"source":" [in] `bChecked`"},{"content":"[in] <ph id=\"ph1\">`bEnabled`</ph>","pos":[73415,73430],"source":" [in] `bEnabled`"},{"pos":[73440,73447],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[73457,73544],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawcheckboxex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawCheckBoxEx","linkify":"<a name=\"cmfcvisualmanager__ondrawcheckboxex\"></a>  CMFCVisualManager::OnDrawCheckBoxEx","source":"<a name=\"cmfcvisualmanager__ondrawcheckboxex\"></a>  CMFCVisualManager::OnDrawCheckBoxEx"},{"pos":[73821,73831],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[73835,73845],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[73849,73860],"source":" [in] `rect`"},{"content":"[in] <ph id=\"ph1\">`nState`</ph>","pos":[73864,73877],"source":" [in] `nState`"},{"content":"[in] <ph id=\"ph1\">`bHighlighted`</ph>","pos":[73881,73900],"source":" [in] `bHighlighted`"},{"content":"[in] <ph id=\"ph1\">`bPressed`</ph>","pos":[73904,73919],"source":" [in] `bPressed`"},{"content":"[in] <ph id=\"ph1\">`bEnabled`</ph>","pos":[73923,73938],"source":" [in] `bEnabled`"},{"pos":[73948,73955],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[73965,74054],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawcomboborder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawComboBorder","linkify":"<a name=\"cmfcvisualmanager__ondrawcomboborder\"></a>  CMFCVisualManager::OnDrawComboBorder","source":"<a name=\"cmfcvisualmanager__ondrawcomboborder\"></a>  CMFCVisualManager::OnDrawComboBorder"},{"pos":[74058,74231],"content":"The framework calls this method when it draws the border around an instance of the <bpt id=\"p1\">[</bpt>CMFCToolBarComboBoxButton Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbarcomboboxbutton-class.md)</ept>.","source":"The framework calls this method when it draws the border around an instance of the [CMFCToolBarComboBoxButton Class](../../mfc/reference/cmfctoolbarcomboboxbutton-class.md)."},{"pos":[74435,74445],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[74449,74459],"source":"[in] `pDC`"},{"content":"A pointer to the device context of a combo box button.","pos":[74463,74517]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[74524,74535],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the combo box button.","pos":[74539,74605]},{"content":"[in] <ph id=\"ph1\">`bDisabled`</ph>","pos":[74612,74628],"source":"[in] `bDisabled`"},{"content":"A Boolean parameter that indicates whether the combo box button is unavailable.","pos":[74632,74711]},{"content":"[in] <ph id=\"ph1\">`bIsDropped`</ph>","pos":[74718,74735],"source":"[in] `bIsDropped`"},{"content":"A Boolean parameter that indicates whether the combo box is dropped down.","pos":[74739,74812]},{"content":"[in] <ph id=\"ph1\">`bIsHighlighted`</ph>","pos":[74819,74840],"source":"[in] `bIsHighlighted`"},{"content":"A Boolean parameter that indicates whether the combo box button is highlighted.","pos":[74844,74923]},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[74930,74944],"source":"[in] `pButton`"},{"content":"A pointer to a <ph id=\"ph1\">`CMFCToolBarComboBoxButton`</ph> object.","pos":[74948,74998],"source":" A pointer to a `CMFCToolBarComboBoxButton` object."},{"content":"The framework draws this combo box button.","pos":[74999,75041]},{"pos":[75051,75058],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in your derived visual manager to customize the appearance of the border of the combo box.","pos":[75062,75173]},{"pos":[75183,75280],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawcombodropbutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawComboDropButton","linkify":"<a name=\"cmfcvisualmanager__ondrawcombodropbutton\"></a>  CMFCVisualManager::OnDrawComboDropButton","source":"<a name=\"cmfcvisualmanager__ondrawcombodropbutton\"></a>  CMFCVisualManager::OnDrawComboDropButton"},{"pos":[75284,75435],"content":"The framework calls this method when it draws the drop button of a <bpt id=\"p1\">[</bpt>CMFCToolBarComboBoxButton<ept id=\"p1\">](../../mfc/reference/cmfctoolbarcomboboxbutton-class.md)</ept>.","source":"The framework calls this method when it draws the drop button of a [CMFCToolBarComboBoxButton](../../mfc/reference/cmfctoolbarcomboboxbutton-class.md)."},{"pos":[75643,75653],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[75657,75667],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[75671,75701]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[75708,75719],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the drop button.","pos":[75723,75784]},{"content":"[in] <ph id=\"ph1\">`bDisabled`</ph>","pos":[75791,75807],"source":"[in] `bDisabled`"},{"content":"A Boolean parameter that indicates whether the drop button is unavailable.","pos":[75811,75885]},{"content":"[in] <ph id=\"ph1\">`bIsDropped`</ph>","pos":[75892,75909],"source":"[in] `bIsDropped`"},{"content":"A Boolean parameter that indicates whether the combo box is dropped down.","pos":[75913,75986]},{"content":"[in] <ph id=\"ph1\">`bIsHighlighted`</ph>","pos":[75993,76014],"source":"[in] `bIsHighlighted`"},{"content":"A Boolean parameter that indicates whether the drop button is highlighted.","pos":[76018,76092]},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[76099,76113],"source":"[in] `pButton`"},{"content":"A pointer to a <ph id=\"ph1\">`CMFCToolBarComboBoxButton`</ph> object.","pos":[76117,76167],"source":" A pointer to a `CMFCToolBarComboBoxButton` object."},{"content":"The framework draws the drop button for this combo box button.","pos":[76168,76230]},{"pos":[76240,76247],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in your derived visual manager to customize the appearance of the drop button of a combo box button.","pos":[76251,76372]},{"pos":[76382,76475],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawcontrolborder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawControlBorder","linkify":"<a name=\"cmfcvisualmanager__ondrawcontrolborder\"></a>  CMFCVisualManager::OnDrawControlBorder","source":"<a name=\"cmfcvisualmanager__ondrawcontrolborder\"></a>  CMFCVisualManager::OnDrawControlBorder"},{"pos":[76653,76663],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[76667,76682],"content":"[in] <ph id=\"ph1\">`pWndCtrl`</ph>","source":"[in] `pWndCtrl`"},{"pos":[76692,76699],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[76709,76812],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawdefaultribbonimage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawDefaultRibbonImage","linkify":"<a name=\"cmfcvisualmanager__ondrawdefaultribbonimage\"></a>  CMFCVisualManager::OnDrawDefaultRibbonImage","source":"<a name=\"cmfcvisualmanager__ondrawdefaultribbonimage\"></a>  CMFCVisualManager::OnDrawDefaultRibbonImage"},{"content":"The framework calls this method when it draws the default image that is used for the ribbon button.","pos":[76816,76915]},{"pos":[77115,77125],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[77129,77139],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[77143,77173]},{"content":"[in] <ph id=\"ph1\">`rectImage`</ph>","pos":[77180,77196],"source":"[in] `rectImage`"},{"content":"A rectangle that specifies the boundaries of the default image.","pos":[77200,77263]},{"content":"[in] <ph id=\"ph1\">`bIsDisabled`</ph>","pos":[77270,77288],"source":"[in] `bIsDisabled`"},{"content":"A Boolean parameter that indicates whether the ribbon button is unavailable.","pos":[77292,77368]},{"content":"[in] <ph id=\"ph1\">`bIsPressed`</ph>","pos":[77375,77392],"source":"[in] `bIsPressed`"},{"content":"A Boolean parameter that indicates whether the ribbon button is pressed.","pos":[77396,77468]},{"content":"[in] <ph id=\"ph1\">`bIsHighlighted`</ph>","pos":[77475,77496],"source":"[in] `bIsHighlighted`"},{"content":"A Boolean parameter that indicates whether the ribbon button is highlighted.","pos":[77500,77576]},{"pos":[77586,77593],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived visual manager if you want to customize the image that is used for the ribbon button.","pos":[77597,77716]},{"pos":[77726,77813],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondraweditborder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawEditBorder","linkify":"<a name=\"cmfcvisualmanager__ondraweditborder\"></a>  CMFCVisualManager::OnDrawEditBorder","source":"<a name=\"cmfcvisualmanager__ondraweditborder\"></a>  CMFCVisualManager::OnDrawEditBorder"},{"pos":[77817,77988],"content":"The framework calls this method when it draws the border around an instance of the <bpt id=\"p1\">[</bpt>CMFCToolBarEditBoxButton Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbareditboxbutton-class.md)</ept>.","source":"The framework calls this method when it draws the border around an instance of the [CMFCToolBarEditBoxButton Class](../../mfc/reference/cmfctoolbareditboxbutton-class.md)."},{"pos":[78167,78177],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[78181,78191],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[78195,78225]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[78232,78243],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the <ph id=\"ph1\">`CMFCToolBarEditBoxButton`</ph> object.","pos":[78247,78330],"source":" A rectangle that specifies the boundaries of the `CMFCToolBarEditBoxButton` object."},{"content":"[in] <ph id=\"ph1\">`bDisabled`</ph>","pos":[78337,78353],"source":"[in] `bDisabled`"},{"content":"A Boolean parameter that indicates whether the button is unavailable.","pos":[78357,78426]},{"content":"[in] <ph id=\"ph1\">`bIsHighlighted`</ph>","pos":[78433,78454],"source":"[in] `bIsHighlighted`"},{"content":"A Boolean parameter that indicates whether the button is highlighted.","pos":[78458,78527]},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[78534,78548],"source":"[in] `pButton`"},{"content":"A pointer to a <ph id=\"ph1\">`CMFCToolBarEditBoxButton`</ph> object.","pos":[78552,78601],"source":" A pointer to a `CMFCToolBarEditBoxButton` object."},{"content":"The framework draws the border of this edit box button.","pos":[78602,78657]},{"pos":[78667,78674],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[78678,78790],"content":"Override this method in a derived visual manager to customize the border of a <ph id=\"ph1\">`CMFCToolBarEditBoxButton`</ph> object.","source":"Override this method in a derived visual manager to customize the border of a `CMFCToolBarEditBoxButton` object."},{"pos":[78800,78891],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawexpandingbox\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawExpandingBox","linkify":"<a name=\"cmfcvisualmanager__ondrawexpandingbox\"></a>  CMFCVisualManager::OnDrawExpandingBox","source":"<a name=\"cmfcvisualmanager__ondrawexpandingbox\"></a>  CMFCVisualManager::OnDrawExpandingBox"},{"pos":[79132,79142],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[79146,79156],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[79160,79171],"source":" [in] `rect`"},{"content":"[in] <ph id=\"ph1\">`bIsOpened`</ph>","pos":[79175,79191],"source":" [in] `bIsOpened`"},{"content":"[in] <ph id=\"ph1\">`colorBox`</ph>","pos":[79195,79210],"source":" [in] `colorBox`"},{"pos":[79220,79227],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[79237,79346],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawfloatingtoolbarborder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawFloatingToolbarBorder","linkify":"<a name=\"cmfcvisualmanager__ondrawfloatingtoolbarborder\"></a>  CMFCVisualManager::OnDrawFloatingToolbarBorder","source":"<a name=\"cmfcvisualmanager__ondrawfloatingtoolbarborder\"></a>  CMFCVisualManager::OnDrawFloatingToolbarBorder"},{"content":"The framework calls this method when it draws the border of a floating toolbar.","pos":[79350,79429]},{"pos":[79596,79606],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[79610,79620],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[79624,79654]},{"content":"[in] <ph id=\"ph1\">`pToolBar`</ph>","pos":[79661,79676],"source":"[in] `pToolBar`"},{"content":"A pointer to the floating toolbar.","pos":[79680,79714]},{"content":"[in] <ph id=\"ph1\">`rectBorder`</ph>","pos":[79721,79738],"source":"[in] `rectBorder`"},{"content":"A rectangle that specifies the boundaries of the floating toolbar.","pos":[79742,79808]},{"content":"[in] <ph id=\"ph1\">`rectBorderSize`</ph>","pos":[79815,79836],"source":"[in] `rectBorderSize`"},{"content":"A rectangle that specifies the border size of the toolbar.","pos":[79840,79898]},{"pos":[79908,79915],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A floating toolbar is a toolbar that appears as a mini-frame window.","pos":[79919,79987]},{"content":"Usually, this occurs when a user drags a toolbar so that it is no longer docked.","pos":[79988,80068]},{"content":"The size of the border is specified by the corresponding parameter in <ph id=\"ph1\">`rectBorderSize`</ph>.","pos":[80075,80162],"source":"The size of the border is specified by the corresponding parameter in `rectBorderSize`."},{"content":"For example, the width of the top border of the toolbar is specified by <ph id=\"ph1\">`rectBorderSize.top`</ph>.","pos":[80163,80256],"source":" For example, the width of the top border of the toolbar is specified by `rectBorderSize.top`."},{"content":"Override this method in a derived visual manager to customize the appearance of the border of a floating toolbar.","pos":[80263,80376]},{"pos":[80386,80485],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawheaderctrlborder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawHeaderCtrlBorder","linkify":"<a name=\"cmfcvisualmanager__ondrawheaderctrlborder\"></a>  CMFCVisualManager::OnDrawHeaderCtrlBorder","source":"<a name=\"cmfcvisualmanager__ondrawheaderctrlborder\"></a>  CMFCVisualManager::OnDrawHeaderCtrlBorder"},{"pos":[80489,80640],"content":"The framework calls this method when it draws the border around an instance of the <bpt id=\"p1\">[</bpt>CMFCHeaderCtrl Class<ept id=\"p1\">](../../mfc/reference/cmfcheaderctrl-class.md)</ept>.","source":"The framework calls this method when it draws the border around an instance of the [CMFCHeaderCtrl Class](../../mfc/reference/cmfcheaderctrl-class.md)."},{"pos":[80815,80825],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pCtrl`</ph>","pos":[80829,80841],"source":"[in] `pCtrl`"},{"content":"A pointer to a <ph id=\"ph1\">`CMFCHeaderCtrl`</ph> object.","pos":[80845,80884],"source":" A pointer to a `CMFCHeaderCtrl` object."},{"content":"The framework draws the border of this header control.","pos":[80885,80939]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[80946,80956],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[80960,80990]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[80997,81008],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the header control.","pos":[81012,81076]},{"content":"[in] <ph id=\"ph1\">`bIsPressed`</ph>","pos":[81083,81100],"source":"[in] `bIsPressed`"},{"content":"A Boolean parameter that indicates whether the header control is pressed.","pos":[81104,81177]},{"content":"[in] <ph id=\"ph1\">`bIsHighlighted`</ph>","pos":[81184,81205],"source":"[in] `bIsHighlighted`"},{"content":"A Boolean parameter that indicates whether the header control is highlighted.","pos":[81209,81286]},{"pos":[81296,81303],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived visual manager to customize the border of the header control.","pos":[81307,81402]},{"pos":[81412,81517],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawheaderctrlsortarrow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawHeaderCtrlSortArrow","linkify":"<a name=\"cmfcvisualmanager__ondrawheaderctrlsortarrow\"></a>  CMFCVisualManager::OnDrawHeaderCtrlSortArrow","source":"<a name=\"cmfcvisualmanager__ondrawheaderctrlsortarrow\"></a>  CMFCVisualManager::OnDrawHeaderCtrlSortArrow"},{"content":"The framework calls this function when it draws the sort arrow of a header control.","pos":[81521,81604]},{"pos":[81750,81760],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pCtrl`</ph>","pos":[81764,81776],"source":"[in] `pCtrl`"},{"content":"A pointer to a header control.","pos":[81780,81810]},{"content":"The visual manager draws the sort arrow of this <bpt id=\"p1\">[</bpt>CMFCHeaderCtrl Class<ept id=\"p1\">](../../mfc/reference/cmfcheaderctrl-class.md)</ept> object.","pos":[81811,81934],"source":" The visual manager draws the sort arrow of this [CMFCHeaderCtrl Class](../../mfc/reference/cmfcheaderctrl-class.md) object."},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[81941,81951],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[81955,81985]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[81992,82003],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the sort arrow.","pos":[82007,82067]},{"content":"[in] <ph id=\"ph1\">`bIsUp`</ph>","pos":[82074,82086],"source":"[in] `bIsUp`"},{"content":"A Boolean that specifies the direction of the sort arrow.","pos":[82090,82147]},{"pos":[82157,82164],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If <ph id=\"ph1\">`bIsUp`</ph> is <ph id=\"ph2\">`TRUE`</ph>, the visual manager draws an up sort arrow.","pos":[82168,82232],"source":"If `bIsUp` is `TRUE`, the visual manager draws an up sort arrow."},{"content":"If it is <ph id=\"ph1\">`FALSE`</ph>, the visual manager draws a down sort arrow.","pos":[82233,82294],"source":" If it is `FALSE`, the visual manager draws a down sort arrow."},{"content":"Override <ph id=\"ph1\">`OnDrawHeaderCtrlSortArrow`</ph> in a derived class to customize the appearance of the sort button.","pos":[82295,82398],"source":" Override `OnDrawHeaderCtrlSortArrow` in a derived class to customize the appearance of the sort button."},{"pos":[82408,82523],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawmenuarrowoncustomizelist\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawMenuArrowOnCustomizeList","linkify":"<a name=\"cmfcvisualmanager__ondrawmenuarrowoncustomizelist\"></a>  CMFCVisualManager::OnDrawMenuArrowOnCustomizeList","source":"<a name=\"cmfcvisualmanager__ondrawmenuarrowoncustomizelist\"></a>  CMFCVisualManager::OnDrawMenuArrowOnCustomizeList"},{"pos":[82758,82768],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[82772,82782],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`rectCommand`</ph>","pos":[82786,82804],"source":" [in] `rectCommand`"},{"content":"[in] <ph id=\"ph1\">`bSelected`</ph>","pos":[82808,82824],"source":" [in] `bSelected`"},{"pos":[82834,82841],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[82851,82938],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawmenuborder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawMenuBorder","linkify":"<a name=\"cmfcvisualmanager__ondrawmenuborder\"></a>  CMFCVisualManager::OnDrawMenuBorder","source":"<a name=\"cmfcvisualmanager__ondrawmenuborder\"></a>  CMFCVisualManager::OnDrawMenuBorder"},{"pos":[82942,83064],"content":"The framework calls this method when it draws the border of a <bpt id=\"p1\">[</bpt>CMFCPopupMenu<ept id=\"p1\">](../../mfc/reference/cmfcpopupmenu-class.md)</ept>.","source":"The framework calls this method when it draws the border of a [CMFCPopupMenu](../../mfc/reference/cmfcpopupmenu-class.md)."},{"pos":[83181,83191],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[83195,83205],"source":"[in] `pDC`"},{"content":"A pointer to the device context for a <ph id=\"ph1\">`CMFCPopupMenu`</ph> object.","pos":[83209,83270],"source":" A pointer to the device context for a `CMFCPopupMenu` object."},{"content":"[in] <ph id=\"ph1\">`pMenu`</ph>","pos":[83277,83289],"source":"[in] `pMenu`"},{"content":"A pointer to a <ph id=\"ph1\">`CMFCPopupMenu`</ph> object.","pos":[83293,83331],"source":" A pointer to a `CMFCPopupMenu` object."},{"content":"The framework draws a border around this popup menu.","pos":[83332,83384]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[83391,83402],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the popup menu.","pos":[83406,83466]},{"pos":[83476,83483],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation of this method displays the standard menu border.","pos":[83487,83563]},{"content":"Override this method in a derived visual manager to customize the appearance of the menu border.","pos":[83564,83660]},{"pos":[83670,83755],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawmenucheck\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawMenuCheck","linkify":"<a name=\"cmfcvisualmanager__ondrawmenucheck\"></a>  CMFCVisualManager::OnDrawMenuCheck","source":"<a name=\"cmfcvisualmanager__ondrawmenucheck\"></a>  CMFCVisualManager::OnDrawMenuCheck"},{"pos":[84028,84038],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[84042,84052],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[84056,84070],"source":" [in] `pButton`"},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[84074,84085],"source":" [in] `rect`"},{"content":"[in] <ph id=\"ph1\">`bHighlight`</ph>","pos":[84089,84106],"source":" [in] `bHighlight`"},{"content":"[in] <ph id=\"ph1\">`bIsRadio`</ph>","pos":[84110,84125],"source":" [in] `bIsRadio`"},{"pos":[84135,84142],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[84152,84247],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawmenuitembutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawMenuItemButton","linkify":"<a name=\"cmfcvisualmanager__ondrawmenuitembutton\"></a>  CMFCVisualManager::OnDrawMenuItemButton","source":"<a name=\"cmfcvisualmanager__ondrawmenuitembutton\"></a>  CMFCVisualManager::OnDrawMenuItemButton"},{"pos":[84532,84542],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[84546,84556],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[84560,84574],"source":" [in] `pButton`"},{"content":"[in] <ph id=\"ph1\">`rectButton`</ph>","pos":[84578,84595],"source":" [in] `rectButton`"},{"content":"[in] <ph id=\"ph1\">`bHighlight`</ph>","pos":[84599,84616],"source":" [in] `bHighlight`"},{"content":"[in] <ph id=\"ph1\">`bDisabled`</ph>","pos":[84620,84636],"source":" [in] `bDisabled`"},{"pos":[84646,84653],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[84663,84748],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawmenulabel\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawMenuLabel","linkify":"<a name=\"cmfcvisualmanager__ondrawmenulabel\"></a>  CMFCVisualManager::OnDrawMenuLabel","source":"<a name=\"cmfcvisualmanager__ondrawmenulabel\"></a>  CMFCVisualManager::OnDrawMenuLabel"},{"pos":[84943,84953],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[84957,84967],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[84971,84982],"source":" [in] `rect`"},{"pos":[84992,85004],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[85014,85021],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[85031,85124],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawmenuresizebar\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawMenuResizeBar","linkify":"<a name=\"cmfcvisualmanager__ondrawmenuresizebar\"></a>  CMFCVisualManager::OnDrawMenuResizeBar","source":"<a name=\"cmfcvisualmanager__ondrawmenuresizebar\"></a>  CMFCVisualManager::OnDrawMenuResizeBar"},{"pos":[85343,85353],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[85357,85367],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[85371,85382],"source":" [in] `rect`"},{"content":"[in] <ph id=\"ph1\">`nResizeFlags`</ph>","pos":[85386,85405],"source":" [in] `nResizeFlags`"},{"pos":[85415,85422],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[85432,85531],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawmenuscrollbutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawMenuScrollButton","linkify":"<a name=\"cmfcvisualmanager__ondrawmenuscrollbutton\"></a>  CMFCVisualManager::OnDrawMenuScrollButton","source":"<a name=\"cmfcvisualmanager__ondrawmenuscrollbutton\"></a>  CMFCVisualManager::OnDrawMenuScrollButton"},{"content":"The framework calls this method when it draws a menu scroll button.","pos":[85535,85602]},{"pos":[85795,85805],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[85809,85819],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[85823,85853]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[85860,85871],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the scroll button.","pos":[85875,85938]},{"content":"[in] <ph id=\"ph1\">`bIsScrollDown`</ph>","pos":[85945,85965],"source":"[in] `bIsScrollDown`"},{"content":"A Boolean that indicates which type of button the visual manager draws.","pos":[85969,86040]},{"content":"A value of <ph id=\"ph1\">`TRUE`</ph> indicates the visual manager draws a down button.","pos":[86041,86108],"source":" A value of `TRUE` indicates the visual manager draws a down button."},{"content":"[in] <ph id=\"ph1\">`bIsHighlited`</ph>","pos":[86115,86134],"source":"[in] `bIsHighlited`"},{"content":"A Boolean that indicates whether the button is highlighted.","pos":[86138,86197]},{"content":"[in] <ph id=\"ph1\">`bIsPressed`</ph>","pos":[86204,86221],"source":"[in] `bIsPressed`"},{"content":"A Boolean that indicates whether the button is pressed.","pos":[86225,86280]},{"content":"[in] <ph id=\"ph1\">`bIsDisabled`</ph>","pos":[86287,86305],"source":"[in] `bIsDisabled`"},{"content":"A Boolean that indicates whether the button is disabled.","pos":[86309,86365]},{"pos":[86375,86382],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived visual manager to customize the appearance of menu scroll buttons.","pos":[86386,86486]},{"content":"Menu scroll buttons appear on the edge of pop-up menus when the total height of the menu items exceeds the height of the pop-up menu.","pos":[86487,86620]},{"pos":[86630,86717],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawmenushadow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawMenuShadow","linkify":"<a name=\"cmfcvisualmanager__ondrawmenushadow\"></a>  CMFCVisualManager::OnDrawMenuShadow","source":"<a name=\"cmfcvisualmanager__ondrawmenushadow\"></a>  CMFCVisualManager::OnDrawMenuShadow"},{"pos":[87102,87112],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[87116,87126],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`rectClient`</ph>","pos":[87130,87147],"source":" [in] `rectClient`"},{"content":"[in] <ph id=\"ph1\">`rectExclude`</ph>","pos":[87151,87169],"source":" [in] `rectExclude`"},{"content":"[in] <ph id=\"ph1\">`nDepth`</ph>","pos":[87173,87186],"source":" [in] `nDepth`"},{"content":"[in] <ph id=\"ph1\">`iMinBrightness`</ph>","pos":[87190,87211],"source":" [in] `iMinBrightness`"},{"content":"[in] <ph id=\"ph1\">`iMaxBrightness`</ph>","pos":[87215,87236],"source":" [in] `iMaxBrightness`"},{"content":"[in] <ph id=\"ph1\">`pBmpSaveBottom`</ph>","pos":[87240,87261],"source":" [in] `pBmpSaveBottom`"},{"content":"[in] <ph id=\"ph1\">`pBmpSaveRight`</ph>","pos":[87265,87285],"source":" [in] `pBmpSaveRight`"},{"content":"[in] <ph id=\"ph1\">`bRTL`</ph>","pos":[87289,87300],"source":" [in] `bRTL`"},{"pos":[87310,87317],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[87327,87426],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawmenusystembutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawMenuSystemButton","linkify":"<a name=\"cmfcvisualmanager__ondrawmenusystembutton\"></a>  CMFCVisualManager::OnDrawMenuSystemButton","source":"<a name=\"cmfcvisualmanager__ondrawmenusystembutton\"></a>  CMFCVisualManager::OnDrawMenuSystemButton"},{"content":"The framework calls this method when it draws a menu system button for the application.","pos":[87430,87517]},{"pos":[87682,87692],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[87696,87706],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[87710,87740]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[87747,87758],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the button.","pos":[87762,87818]},{"content":"[in] <ph id=\"ph1\">`uiSystemCommand`</ph>","pos":[87825,87847],"source":"[in] `uiSystemCommand`"},{"content":"A flag that specifies which system command is associated with the button.","pos":[87851,87924]},{"content":"Possible values are SC_CLOSE, SC_MINIMIZE, and SC_RESTORE.","pos":[87925,87983]},{"content":"[in] <ph id=\"ph1\">`nStyle`</ph>","pos":[87990,88003],"source":"[in] `nStyle`"},{"content":"A flag that specifies the current style of the button.","pos":[88007,88061]},{"content":"Possible values are TBBS_PRESSED, TBBS_DISABLED, and 0.","pos":[88062,88117]},{"content":"[in] <ph id=\"ph1\">`bHighlight`</ph>","pos":[88124,88141],"source":"[in] `bHighlight`"},{"content":"A Boolean parameter that specifies whether the button is highlighted.","pos":[88145,88214]},{"pos":[88224,88231],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[88235,88355],"content":"The menu system buttons are the <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Minimize<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Maximize<ept id=\"p3\">**</ept>, and <bpt id=\"p4\">**</bpt>Restore<ept id=\"p4\">**</ept> buttons located on the title bar.","source":"The menu system buttons are the **Close**, **Minimize**, **Maximize**, and **Restore** buttons located on the title bar."},{"content":"The default implementation for this method calls <bpt id=\"p1\">[</bpt>CDC::DrawFrameControl<ept id=\"p1\">](../../mfc/reference/cdc-class.md#cdc__drawframecontrol)</ept> with the <ph id=\"ph1\">`DFC_CAPTION`</ph> type.","pos":[88362,88519],"source":"The default implementation for this method calls [CDC::DrawFrameControl](../../mfc/reference/cdc-class.md#cdc__drawframecontrol) with the `DFC_CAPTION` type."},{"content":"Override this method in your derived visual manager class to customize the appearance of system buttons.","pos":[88520,88624]},{"pos":[88634,88731],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawminiframeborder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawMiniFrameBorder","linkify":"<a name=\"cmfcvisualmanager__ondrawminiframeborder\"></a>  CMFCVisualManager::OnDrawMiniFrameBorder","source":"<a name=\"cmfcvisualmanager__ondrawminiframeborder\"></a>  CMFCVisualManager::OnDrawMiniFrameBorder"},{"pos":[88994,89004],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[89008,89018],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`pFrameWnd`</ph>","pos":[89022,89038],"source":" [in] `pFrameWnd`"},{"content":"[in] <ph id=\"ph1\">`rectBorder`</ph>","pos":[89042,89059],"source":" [in] `rectBorder`"},{"content":"[in] <ph id=\"ph1\">`rectBorderSize`</ph>","pos":[89063,89084],"source":" [in] `rectBorderSize`"},{"pos":[89094,89101],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[89111,89214],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawoutlookbarsplitter\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawOutlookBarSplitter","linkify":"<a name=\"cmfcvisualmanager__ondrawoutlookbarsplitter\"></a>  CMFCVisualManager::OnDrawOutlookBarSplitter","source":"<a name=\"cmfcvisualmanager__ondrawoutlookbarsplitter\"></a>  CMFCVisualManager::OnDrawOutlookBarSplitter"},{"content":"The framework calls this method when it draws the splitter for an Outlook bar.","pos":[89218,89296]},{"pos":[89401,89411],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[89415,89425],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[89429,89459]},{"content":"[in] <ph id=\"ph1\">`rectSplitter`</ph>","pos":[89466,89485],"source":"[in] `rectSplitter`"},{"content":"A rectangle that specifies the boundaries of the splitter.","pos":[89489,89547]},{"pos":[89557,89564],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived visual manager to customize the appearance of splitters on an Outlook bar.","pos":[89568,89676]},{"pos":[89686,89799],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawoutlookpagebuttonborder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawOutlookPageButtonBorder","linkify":"<a name=\"cmfcvisualmanager__ondrawoutlookpagebuttonborder\"></a>  CMFCVisualManager::OnDrawOutlookPageButtonBorder","source":"<a name=\"cmfcvisualmanager__ondrawoutlookpagebuttonborder\"></a>  CMFCVisualManager::OnDrawOutlookPageButtonBorder"},{"content":"Called by the framework when it draws the border of an Outlook page button.","pos":[89803,89878]},{"pos":[90034,90044],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[90048,90058],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[90062,90092]},{"content":"[in] <ph id=\"ph1\">`rectBtn`</ph>","pos":[90099,90113],"source":"[in] `rectBtn`"},{"content":"A rectangle that specifies the boundary of the Outlook page button.","pos":[90117,90184]},{"content":"[in] <ph id=\"ph1\">`bIsHighlighted`</ph>","pos":[90191,90212],"source":"[in] `bIsHighlighted`"},{"content":"A Boolean that specifies whether the button is highlighted.","pos":[90216,90275]},{"content":"[in] <ph id=\"ph1\">`bIsPressed`</ph>","pos":[90282,90299],"source":"[in] `bIsPressed`"},{"content":"A Boolean that specifies whether the button is pressed.","pos":[90303,90358]},{"pos":[90368,90375],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a custom visual manager to change the appearance of the Outlook page button.","pos":[90379,90479]},{"pos":[90489,90576],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawpaneborder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawPaneBorder","linkify":"<a name=\"cmfcvisualmanager__ondrawpaneborder\"></a>  CMFCVisualManager::OnDrawPaneBorder","source":"<a name=\"cmfcvisualmanager__ondrawpaneborder\"></a>  CMFCVisualManager::OnDrawPaneBorder"},{"pos":[90580,90699],"content":"The framework calls this method when it draws the border of a <bpt id=\"p1\">[</bpt>CPane Class<ept id=\"p1\">](../../mfc/reference/cpane-class.md)</ept> object.","source":"The framework calls this method when it draws the border of a [CPane Class](../../mfc/reference/cpane-class.md) object."},{"pos":[90812,90822],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[90826,90836],"source":"[in] `pDC`"},{"content":"A pointer to the device context of a control bar.","pos":[90840,90889]},{"content":"[in] <ph id=\"ph1\">`pBar`</ph>","pos":[90896,90907],"source":"[in] `pBar`"},{"content":"A pointer to a pane.","pos":[90911,90931]},{"content":"The visual manager draws the border of this pane.","pos":[90932,90981]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[90988,90999],"source":"[in] `rect`"},{"content":"A rectangle that indicates the boundaries of the pane.","pos":[91003,91057]},{"pos":[91067,91074],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation of this method displays the standard border.","pos":[91078,91149]},{"content":"Override this method in a derived class to customize the appearance of the border.","pos":[91150,91232]},{"pos":[91242,91331],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawpanecaption\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawPaneCaption","linkify":"<a name=\"cmfcvisualmanager__ondrawpanecaption\"></a>  CMFCVisualManager::OnDrawPaneCaption","source":"<a name=\"cmfcvisualmanager__ondrawpanecaption\"></a>  CMFCVisualManager::OnDrawPaneCaption"},{"pos":[91335,91480],"content":"The framework calls this method when it draws a caption for an instance of the <bpt id=\"p1\">[</bpt>CDockablePane Class<ept id=\"p1\">](../../mfc/reference/cdockablepane-class.md)</ept>.","source":"The framework calls this method when it draws a caption for an instance of the [CDockablePane Class](../../mfc/reference/cdockablepane-class.md)."},{"pos":[91653,91663],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[91667,91677],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[91681,91711]},{"content":"[in] <ph id=\"ph1\">`pBar`</ph>","pos":[91718,91729],"source":"[in] `pBar`"},{"content":"A pointer to a <ph id=\"ph1\">`CDockablePane`</ph> object.","pos":[91733,91771],"source":" A pointer to a `CDockablePane` object."},{"content":"The framework draws the caption for this pane.","pos":[91772,91818]},{"content":"[in] <ph id=\"ph1\">`bActive`</ph>","pos":[91825,91839],"source":"[in] `bActive`"},{"content":"A Boolean parameter that indicates whether the control bar is active.","pos":[91843,91912]},{"content":"[in] <ph id=\"ph1\">`rectCaption`</ph>","pos":[91919,91937],"source":"[in] `rectCaption`"},{"content":"A rectangle that specifies the boundaries of the caption.","pos":[91941,91998]},{"content":"[in] <ph id=\"ph1\">`rectButtons`</ph>","pos":[92005,92023],"source":"[in] `rectButtons`"},{"content":"A rectangle that specifies the boundaries of the caption buttons.","pos":[92027,92092]},{"pos":[92102,92114],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[92118,92246],"content":"A <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> parameter that indicates the text color of the caption.","source":"A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter that indicates the text color of the caption."},{"pos":[92256,92263],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived visual manager to customize the appearance of pane captions.","pos":[92267,92361]},{"pos":[92371,92460],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawpanedivider\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawPaneDivider","linkify":"<a name=\"cmfcvisualmanager__ondrawpanedivider\"></a>  CMFCVisualManager::OnDrawPaneDivider","source":"<a name=\"cmfcvisualmanager__ondrawpanedivider\"></a>  CMFCVisualManager::OnDrawPaneDivider"},{"pos":[92708,92718],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[92722,92732],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`pSlider`</ph>","pos":[92736,92750],"source":" [in] `pSlider`"},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[92754,92765],"source":" [in] `rect`"},{"content":"[in] <ph id=\"ph1\">`bAutoHideMode`</ph>","pos":[92769,92789],"source":" [in] `bAutoHideMode`"},{"pos":[92799,92806],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[92816,92917],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawpopupwindowborder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawPopupWindowBorder","linkify":"<a name=\"cmfcvisualmanager__ondrawpopupwindowborder\"></a>  CMFCVisualManager::OnDrawPopupWindowBorder","source":"<a name=\"cmfcvisualmanager__ondrawpopupwindowborder\"></a>  CMFCVisualManager::OnDrawPopupWindowBorder"},{"pos":[93116,93126],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[93130,93140],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[93144,93155],"source":" [in] `rect`"},{"pos":[93165,93172],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[93182,93295],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawpopupwindowbuttonborder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawPopupWindowButtonBorder","linkify":"<a name=\"cmfcvisualmanager__ondrawpopupwindowbuttonborder\"></a>  CMFCVisualManager::OnDrawPopupWindowButtonBorder","source":"<a name=\"cmfcvisualmanager__ondrawpopupwindowbuttonborder\"></a>  CMFCVisualManager::OnDrawPopupWindowButtonBorder"},{"pos":[93548,93558],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[93562,93572],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`rectClient`</ph>","pos":[93576,93593],"source":" [in] `rectClient`"},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[93597,93611],"source":" [in] `pButton`"},{"pos":[93621,93628],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[93638,93741],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawpopupwindowcaption\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawPopupWindowCaption","linkify":"<a name=\"cmfcvisualmanager__ondrawpopupwindowcaption\"></a>  CMFCVisualManager::OnDrawPopupWindowCaption","source":"<a name=\"cmfcvisualmanager__ondrawpopupwindowcaption\"></a>  CMFCVisualManager::OnDrawPopupWindowCaption"},{"pos":[93990,94000],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[94004,94014],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`rectCaption`</ph>","pos":[94018,94036],"source":" [in] `rectCaption`"},{"content":"[in] <ph id=\"ph1\">`pPopupWnd`</ph>","pos":[94040,94056],"source":" [in] `pPopupWnd`"},{"pos":[94066,94078],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[94088,94095],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[94105,94218],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawribbonapplicationbutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawRibbonApplicationButton","linkify":"<a name=\"cmfcvisualmanager__ondrawribbonapplicationbutton\"></a>  CMFCVisualManager::OnDrawRibbonApplicationButton","source":"<a name=\"cmfcvisualmanager__ondrawribbonapplicationbutton\"></a>  CMFCVisualManager::OnDrawRibbonApplicationButton"},{"pos":[94222,94302],"content":"The framework calls this method when it draws the <bpt id=\"p1\">**</bpt>Main Button<ept id=\"p1\">**</ept> on the ribbon.","source":"The framework calls this method when it draws the **Main Button** on the ribbon."},{"pos":[94419,94429],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[94433,94443],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[94447,94477]},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[94484,94498],"source":"[in] `pButton`"},{"content":"A pointer to the <bpt id=\"p1\">**</bpt>Main Button<ept id=\"p1\">**</ept> on the ribbon.","pos":[94502,94549],"source":" A pointer to the **Main Button** on the ribbon."},{"pos":[94559,94566],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[94570,94682],"content":"Override this method in a derived visual manager if you want to customize the appearance of the <bpt id=\"p1\">**</bpt>Main Button<ept id=\"p1\">**</ept>.","source":"Override this method in a derived visual manager if you want to customize the appearance of the **Main Button**."},{"pos":[94692,94795],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawribbonbuttonborder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawRibbonButtonBorder","linkify":"<a name=\"cmfcvisualmanager__ondrawribbonbuttonborder\"></a>  CMFCVisualManager::OnDrawRibbonButtonBorder","source":"<a name=\"cmfcvisualmanager__ondrawribbonbuttonborder\"></a>  CMFCVisualManager::OnDrawRibbonButtonBorder"},{"content":"The framework calls this method when it draws the border of a button on the ribbon.","pos":[94799,94882]},{"pos":[94994,95004],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[95008,95018],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[95022,95052]},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[95059,95073],"source":"[in] `pButton`"},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>CMFCRibbonButton<ept id=\"p1\">](../../mfc/reference/cmfcribbonbutton-class.md)</ept> object.","pos":[95077,95165],"source":" A pointer to a [CMFCRibbonButton](../../mfc/reference/cmfcribbonbutton-class.md) object."},{"content":"The framework draws the border for this ribbon button.","pos":[95166,95220]},{"pos":[95230,95237],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[95241,95342],"content":"Override this method in a derived visual manager to customize the appearance of a <ph id=\"ph1\">`CMFCRibbonButton`</ph>.","source":"Override this method in a derived visual manager to customize the appearance of a `CMFCRibbonButton`."},{"pos":[95352,95455],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawribbonbuttonsgroup\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawRibbonButtonsGroup","linkify":"<a name=\"cmfcvisualmanager__ondrawribbonbuttonsgroup\"></a>  CMFCVisualManager::OnDrawRibbonButtonsGroup","source":"<a name=\"cmfcvisualmanager__ondrawribbonbuttonsgroup\"></a>  CMFCVisualManager::OnDrawRibbonButtonsGroup"},{"content":"The framework calls this method when it draws a group of buttons on the ribbon.","pos":[95459,95538]},{"pos":[95682,95692],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[95696,95706],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[95710,95740]},{"content":"[in] <ph id=\"ph1\">`pGroup`</ph>","pos":[95747,95760],"source":"[in] `pGroup`"},{"content":"A pointer to a group of buttons on the ribbon.","pos":[95764,95810]},{"content":"The framework draws this group of buttons.","pos":[95811,95853]},{"content":"[in] <ph id=\"ph1\">`rectGroup`</ph>","pos":[95860,95876],"source":"[in] `rectGroup`"},{"content":"A rectangle that specifies the boundaries of the group.","pos":[95880,95935]},{"pos":[95945,95957],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reserved value.","pos":[95961,95978]},{"content":"The default implementation returns -1.","pos":[95979,96017]},{"pos":[96027,96034],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived visual manager to customize the appearance of a group of buttons on the ribbon.","pos":[96038,96151]},{"pos":[96161,96254],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawribboncaption\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawRibbonCaption","linkify":"<a name=\"cmfcvisualmanager__ondrawribboncaption\"></a>  CMFCVisualManager::OnDrawRibbonCaption","source":"<a name=\"cmfcvisualmanager__ondrawribboncaption\"></a>  CMFCVisualManager::OnDrawRibbonCaption"},{"content":"The framework calls this method when it draws the caption bar of the main frame window.","pos":[96258,96345]},{"content":"The framework calls this method only if the ribbon is integrated with the main frame.","pos":[96346,96431]},{"pos":[96572,96582],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[96586,96596],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[96600,96630]},{"content":"[in] <ph id=\"ph1\">`pBar`</ph>","pos":[96637,96648],"source":"[in] `pBar`"},{"content":"A pointer to a ribbon bar.","pos":[96652,96678]},{"content":"The visual manager draws this ribbon bar.","pos":[96679,96720]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[96727,96738],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the ribbon bar.","pos":[96742,96802]},{"content":"[in] <ph id=\"ph1\">`rectText`</ph>","pos":[96809,96824],"source":"[in] `rectText`"},{"content":"A rectangle that specifies the boundaries for the text of the caption bar.","pos":[96828,96902]},{"pos":[96912,96919],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this function in a derived visual manager to customize the appearance of the caption bar.","pos":[96923,97021]},{"content":"This method affects the caption bar only if the ribbon is integrated with the main frame window.","pos":[97022,97118]},{"pos":[97128,97233],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawribboncaptionbutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawRibbonCaptionButton","linkify":"<a name=\"cmfcvisualmanager__ondrawribboncaptionbutton\"></a>  CMFCVisualManager::OnDrawRibbonCaptionButton","source":"<a name=\"cmfcvisualmanager__ondrawribboncaptionbutton\"></a>  CMFCVisualManager::OnDrawRibbonCaptionButton"},{"content":"The framework calls this method when it draws a caption button located on the ribbon bar.","pos":[97237,97326]},{"pos":[97446,97456],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a device context.","pos":[97469,97499]},{"content":"A pointer to a <ph id=\"ph1\">`CMFCRibbonCaptionButton`</ph> class.","pos":[97519,97566],"source":" A pointer to a `CMFCRibbonCaptionButton` class."},{"content":"The framework draws this caption button.","pos":[97567,97607]},{"pos":[97617,97624],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived visual manager to customize the appearance of a caption button on the ribbon.","pos":[97628,97739]},{"pos":[97749,97844],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawribboncategory\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawRibbonCategory","linkify":"<a name=\"cmfcvisualmanager__ondrawribboncategory\"></a>  CMFCVisualManager::OnDrawRibbonCategory","source":"<a name=\"cmfcvisualmanager__ondrawribboncategory\"></a>  CMFCVisualManager::OnDrawRibbonCategory"},{"pos":[97848,97973],"content":"The framework calls this method when it draws a <bpt id=\"p1\">[</bpt>CMFCRibbonCategory<ept id=\"p1\">](../../mfc/reference/cmfcribboncategory-class.md)</ept> object.","source":"The framework calls this method when it draws a [CMFCRibbonCategory](../../mfc/reference/cmfcribboncategory-class.md) object."},{"pos":[98111,98121],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[98125,98135],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[98139,98169]},{"content":"[in] <ph id=\"ph1\">`pCategory`</ph>","pos":[98176,98192],"source":"[in] `pCategory`"},{"content":"A pointer to a <ph id=\"ph1\">`CMFCRibbonCategory`</ph> object.","pos":[98196,98239],"source":" A pointer to a `CMFCRibbonCategory` object."},{"content":"The framework draws this ribbon category.","pos":[98240,98281]},{"content":"[in] <ph id=\"ph1\">`rectCategory`</ph>","pos":[98288,98307],"source":"[in] `rectCategory`"},{"content":"A rectangle that specifies the boundary of all the category panels on the ribbon.","pos":[98311,98392]},{"pos":[98402,98409],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A ribbon category is a logical grouping of menu commands.","pos":[98413,98470]},{"content":"For more information about ribbon categories, see <bpt id=\"p1\">[</bpt>CMFCRibbonCategory Class<ept id=\"p1\">](../../mfc/reference/cmfcribboncategory-class.md)</ept>.","pos":[98471,98597],"source":" For more information about ribbon categories, see [CMFCRibbonCategory Class](../../mfc/reference/cmfcribboncategory-class.md)."},{"content":"Override this method in a derived visual manager to customize the appearance of a ribbon category.","pos":[98604,98702]},{"pos":[98712,98821],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawribboncategorycaption\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawRibbonCategoryCaption","linkify":"<a name=\"cmfcvisualmanager__ondrawribboncategorycaption\"></a>  CMFCVisualManager::OnDrawRibbonCategoryCaption","source":"<a name=\"cmfcvisualmanager__ondrawribboncategorycaption\"></a>  CMFCVisualManager::OnDrawRibbonCategoryCaption"},{"content":"The framework calls this method when it draws the caption bar for a ribbon category.","pos":[98825,98909]},{"pos":[99044,99054],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[99058,99068],"source":"[in] `pDC`"},{"content":"The drawing context.","pos":[99072,99092]},{"content":"[in] <ph id=\"ph1\">`pContextCaption`</ph>","pos":[99099,99121],"source":"[in] `pContextCaption`"},{"content":"A pointer to a caption bar.","pos":[99125,99152]},{"content":"The visual manager draws this <bpt id=\"p1\">[</bpt>CMFCRibbonContextCaption Class<ept id=\"p1\">](../../mfc/reference/cmfcribboncontextcaption-class.md)</ept> object.","pos":[99153,99278],"source":" The visual manager draws this [CMFCRibbonContextCaption Class](../../mfc/reference/cmfcribboncontextcaption-class.md) object."},{"pos":[99288,99300],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[99304,99443],"content":"A <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> parameter that indicates the color of the text on the caption bar.","source":"A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter that indicates the color of the text on the caption bar."},{"pos":[99453,99460],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived class to customize the appearance of the caption bar for a ribbon category.","pos":[99464,99573]},{"content":"For more information about the caption bar, see <bpt id=\"p1\">[</bpt>CMFCRibbonContextCaption Class<ept id=\"p1\">](../../mfc/reference/cmfcribboncontextcaption-class.md)</ept>.","pos":[99574,99710],"source":" For more information about the caption bar, see [CMFCRibbonContextCaption Class](../../mfc/reference/cmfcribboncontextcaption-class.md)."},{"pos":[99720,99827],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawribboncategoryscroll\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawRibbonCategoryScroll","linkify":"<a name=\"cmfcvisualmanager__ondrawribboncategoryscroll\"></a>  CMFCVisualManager::OnDrawRibbonCategoryScroll","source":"<a name=\"cmfcvisualmanager__ondrawribboncategoryscroll\"></a>  CMFCVisualManager::OnDrawRibbonCategoryScroll"},{"pos":[100049,100059],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[100063,100073],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`pScroll`</ph>","pos":[100077,100091],"source":" [in] `pScroll`"},{"pos":[100101,100108],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[100118,100219],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawribboncategorytab\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawRibbonCategoryTab","linkify":"<a name=\"cmfcvisualmanager__ondrawribboncategorytab\"></a>  CMFCVisualManager::OnDrawRibbonCategoryTab","source":"<a name=\"cmfcvisualmanager__ondrawribboncategorytab\"></a>  CMFCVisualManager::OnDrawRibbonCategoryTab"},{"content":"The framework calls this method when it draws the tab for a ribbon category.","pos":[100223,100299]},{"pos":[100430,100440],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[100444,100454],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[100458,100488]},{"content":"[in] <ph id=\"ph1\">`pTab`</ph>","pos":[100495,100506],"source":"[in] `pTab`"},{"content":"A pointer to an instance of the <ph id=\"ph1\">`CMFCRibbonTab`</ph> class.","pos":[100510,100564],"source":" A pointer to an instance of the `CMFCRibbonTab` class."},{"content":"The framework draws this tab.","pos":[100565,100594]},{"content":"[in] <ph id=\"ph1\">`bIsActive`</ph>","pos":[100601,100617],"source":"[in] `bIsActive`"},{"content":"A Boolean parameter that indicates whether the tab is active.","pos":[100621,100682]},{"pos":[100692,100704],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The color that is used for text on the ribbon category tab.","pos":[100708,100767]},{"pos":[100777,100784],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived visual manager to customize the appearance of a ribbon category tab.","pos":[100788,100890]},{"content":"For more information about ribbon categories, see <bpt id=\"p1\">[</bpt>CMFCRibbonCategory Class<ept id=\"p1\">](../../mfc/reference/cmfcribboncategory-class.md)</ept>.","pos":[100891,101017],"source":" For more information about ribbon categories, see [CMFCRibbonCategory Class](../../mfc/reference/cmfcribboncategory-class.md)."},{"pos":[101027,101134],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawribboncheckboxonlist\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawRibbonCheckBoxOnList","linkify":"<a name=\"cmfcvisualmanager__ondrawribboncheckboxonlist\"></a>  CMFCVisualManager::OnDrawRibbonCheckBoxOnList","source":"<a name=\"cmfcvisualmanager__ondrawribboncheckboxonlist\"></a>  CMFCVisualManager::OnDrawRibbonCheckBoxOnList"},{"pos":[101422,101432],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[101436,101446],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`pCheckBox`</ph>","pos":[101450,101466],"source":" [in] `pCheckBox`"},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[101470,101481],"source":" [in] `rect`"},{"content":"[in] <ph id=\"ph1\">`bIsSelected`</ph>","pos":[101485,101503],"source":" [in] `bIsSelected`"},{"content":"[in] <ph id=\"ph1\">`bHighlighted`</ph>","pos":[101507,101526],"source":" [in] `bHighlighted`"},{"pos":[101536,101543],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[101553,101662],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawribboncolorpalettebox\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawRibbonColorPaletteBox","linkify":"<a name=\"cmfcvisualmanager__ondrawribboncolorpalettebox\"></a>  CMFCVisualManager::OnDrawRibbonColorPaletteBox","source":"<a name=\"cmfcvisualmanager__ondrawribboncolorpalettebox\"></a>  CMFCVisualManager::OnDrawRibbonColorPaletteBox"},{"pos":[102093,102103],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[102107,102117],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`pColorButton`</ph>","pos":[102121,102140],"source":" [in] `pColorButton`"},{"content":"[in] <ph id=\"ph1\">`pIcon`</ph>","pos":[102144,102156],"source":" [in] `pIcon`"},{"content":"[in] <ph id=\"ph1\">`color`</ph>","pos":[102160,102172],"source":" [in] `color`"},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[102176,102187],"source":" [in] `rect`"},{"content":"[in] <ph id=\"ph1\">`bDrawTopEdge`</ph>","pos":[102191,102210],"source":" [in] `bDrawTopEdge`"},{"content":"[in] <ph id=\"ph1\">`bDrawBottomEdge`</ph>","pos":[102214,102236],"source":" [in] `bDrawBottomEdge`"},{"content":"[in] <ph id=\"ph1\">`bIsHighlighted`</ph>","pos":[102240,102261],"source":" [in] `bIsHighlighted`"},{"content":"[in] <ph id=\"ph1\">`bIsChecked`</ph>","pos":[102265,102282],"source":" [in] `bIsChecked`"},{"content":"[in] <ph id=\"ph1\">`bIsDisabled`</ph>","pos":[102286,102304],"source":" [in] `bIsDisabled`"},{"pos":[102314,102321],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[102331,102444],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawribbondefaultpanebutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawRibbonDefaultPaneButton","linkify":"<a name=\"cmfcvisualmanager__ondrawribbondefaultpanebutton\"></a>  CMFCVisualManager::OnDrawRibbonDefaultPaneButton","source":"<a name=\"cmfcvisualmanager__ondrawribbondefaultpanebutton\"></a>  CMFCVisualManager::OnDrawRibbonDefaultPaneButton"},{"content":"The framework calls this method when it draws the default button for the ribbon pane.","pos":[102448,102533]},{"pos":[102650,102660],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[102664,102674],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[102678,102708]},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[102715,102729],"source":"[in] `pButton`"},{"content":"A pointer to the default button for the ribbon pane.","pos":[102733,102785]},{"pos":[102795,102802],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework displays the default button when a ribbon pane is resized to its minimal size and there is no area to display the content for the panel.","pos":[102806,102956]},{"content":"When the user clicks on the default button, the framework displays a drop down menu that contains the content for the panel.","pos":[102957,103081]},{"content":"Override this method in a derived visual manager to customize the appearance of the default button.","pos":[103088,103187]},{"pos":[103197,103324],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawribbondefaultpanebuttoncontext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawRibbonDefaultPaneButtonContext","linkify":"<a name=\"cmfcvisualmanager__ondrawribbondefaultpanebuttoncontext\"></a>  CMFCVisualManager::OnDrawRibbonDefaultPaneButtonContext","source":"<a name=\"cmfcvisualmanager__ondrawribbondefaultpanebuttoncontext\"></a>  CMFCVisualManager::OnDrawRibbonDefaultPaneButtonContext"},{"pos":[103551,103561],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[103565,103575],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[103579,103593],"source":" [in] `pButton`"},{"pos":[103603,103610],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[103620,103751],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawribbondefaultpanebuttonindicator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawRibbonDefaultPaneButtonIndicator","linkify":"<a name=\"cmfcvisualmanager__ondrawribbondefaultpanebuttonindicator\"></a>  CMFCVisualManager::OnDrawRibbonDefaultPaneButtonIndicator","source":"<a name=\"cmfcvisualmanager__ondrawribbondefaultpanebuttonindicator\"></a>  CMFCVisualManager::OnDrawRibbonDefaultPaneButtonIndicator"},{"pos":[104047,104057],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[104061,104071],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[104075,104089],"source":" [in] `pButton`"},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[104093,104104],"source":" [in] `rect`"},{"content":"[in] <ph id=\"ph1\">`bIsSelected`</ph>","pos":[104108,104126],"source":" [in] `bIsSelected`"},{"content":"[in] <ph id=\"ph1\">`bHighlighted`</ph>","pos":[104130,104149],"source":" [in] `bHighlighted`"},{"pos":[104159,104166],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[104176,104281],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawribbongalleryborder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawRibbonGalleryBorder","linkify":"<a name=\"cmfcvisualmanager__ondrawribbongalleryborder\"></a>  CMFCVisualManager::OnDrawRibbonGalleryBorder","source":"<a name=\"cmfcvisualmanager__ondrawribbongalleryborder\"></a>  CMFCVisualManager::OnDrawRibbonGalleryBorder"},{"pos":[104522,104532],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[104536,104546],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[104550,104564],"source":" [in] `pButton`"},{"content":"[in] <ph id=\"ph1\">`rectBorder`</ph>","pos":[104568,104585],"source":" [in] `rectBorder`"},{"pos":[104595,104602],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[104612,104717],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawribbongallerybutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawRibbonGalleryButton","linkify":"<a name=\"cmfcvisualmanager__ondrawribbongallerybutton\"></a>  CMFCVisualManager::OnDrawRibbonGalleryButton","source":"<a name=\"cmfcvisualmanager__ondrawribbongallerybutton\"></a>  CMFCVisualManager::OnDrawRibbonGalleryButton"},{"pos":[104938,104948],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[104952,104962],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[104966,104980],"source":" [in] `pButton`"},{"pos":[104990,104997],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[105007,105098],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawribbonkeytip\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawRibbonKeyTip","linkify":"<a name=\"cmfcvisualmanager__ondrawribbonkeytip\"></a>  CMFCVisualManager::OnDrawRibbonKeyTip","source":"<a name=\"cmfcvisualmanager__ondrawribbonkeytip\"></a>  CMFCVisualManager::OnDrawRibbonKeyTip"},{"pos":[105350,105360],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[105364,105374],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`pElement`</ph>","pos":[105378,105393],"source":" [in] `pElement`"},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[105397,105408],"source":" [in] `rect`"},{"content":"[in] <ph id=\"ph1\">`str`</ph>","pos":[105412,105422],"source":" [in] `str`"},{"pos":[105432,105439],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[105449,105538],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawribbonlabel\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawRibbonLabel","linkify":"<a name=\"cmfcvisualmanager__ondrawribbonlabel\"></a>  CMFCVisualManager::OnDrawRibbonLabel","source":"<a name=\"cmfcvisualmanager__ondrawribbonlabel\"></a>  CMFCVisualManager::OnDrawRibbonLabel"},{"content":"The framework calls this method when it draws the label of the ribbon.","pos":[105542,105612]},{"pos":[105733,105743],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[105747,105757],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[105761,105791]},{"content":"[in] <ph id=\"ph1\">`pLabel`</ph>","pos":[105798,105811],"source":"[in] `pLabel`"},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>CMFCRibbonLabel<ept id=\"p1\">](../../mfc/reference/cmfcribbonlabel-class.md)</ept> object.","pos":[105815,105901],"source":" A pointer to a [CMFCRibbonLabel](../../mfc/reference/cmfcribbonlabel-class.md) object."},{"content":"The framework draws this ribbon label.","pos":[105902,105940]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[105947,105958],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the ribbon panel.","pos":[105962,106024]},{"pos":[106034,106041],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived class to customize the ribbon label.","pos":[106045,106115]},{"pos":[106125,106246],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawribbonmainpanelbuttonborder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawRibbonMainPanelButtonBorder","linkify":"<a name=\"cmfcvisualmanager__ondrawribbonmainpanelbuttonborder\"></a>  CMFCVisualManager::OnDrawRibbonMainPanelButtonBorder","source":"<a name=\"cmfcvisualmanager__ondrawribbonmainpanelbuttonborder\"></a>  CMFCVisualManager::OnDrawRibbonMainPanelButtonBorder"},{"pos":[106250,106419],"content":"The framework calls this method when it draws the border of a <bpt id=\"p1\">[</bpt>CMFCRibbonButton<ept id=\"p1\">](../../mfc/reference/cmfcribbonbutton-class.md)</ept> that is positioned on the <bpt id=\"p2\">**</bpt>Main<ept id=\"p2\">**</ept> panel.","source":"The framework calls this method when it draws the border of a [CMFCRibbonButton](../../mfc/reference/cmfcribbonbutton-class.md) that is positioned on the **Main** panel."},{"pos":[106540,106550],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[106554,106564],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[106568,106598]},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[106605,106619],"source":"[in] `pButton`"},{"content":"A pointer to a <ph id=\"ph1\">`CMFCRibbonButton`</ph> located on the main panel of the ribbon.","pos":[106623,106697],"source":" A pointer to a `CMFCRibbonButton` located on the main panel of the ribbon."},{"content":"The framework draws the border for this button.","pos":[106698,106745]},{"pos":[106755,106762],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[106766,106904],"content":"Override this method in a derived visual manager to customize the appearance of the border for a <ph id=\"ph1\">`CMFCRibbonButton`</ph> on the <bpt id=\"p1\">**</bpt>Main<ept id=\"p1\">**</ept> panel.","source":"Override this method in a derived visual manager to customize the appearance of the border for a `CMFCRibbonButton` on the **Main** panel."},{"pos":[106914,107021],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawribbonmainpanelframe\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawRibbonMainPanelFrame","linkify":"<a name=\"cmfcvisualmanager__ondrawribbonmainpanelframe\"></a>  CMFCVisualManager::OnDrawRibbonMainPanelFrame","source":"<a name=\"cmfcvisualmanager__ondrawribbonmainpanelframe\"></a>  CMFCVisualManager::OnDrawRibbonMainPanelFrame"},{"pos":[107025,107164],"content":"The framework calls this method when it draws the frame around the <bpt id=\"p1\">[</bpt>CMFCRibbonMainPanel<ept id=\"p1\">](../../mfc/reference/cmfcribbonmainpanel-class.md)</ept>.","source":"The framework calls this method when it draws the frame around the [CMFCRibbonMainPanel](../../mfc/reference/cmfcribbonmainpanel-class.md)."},{"pos":[107298,107308],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[107312,107322],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[107326,107356]},{"content":"[in] <ph id=\"ph1\">`pPanel`</ph>","pos":[107363,107376],"source":"[in] `pPanel`"},{"content":"A pointer to the <ph id=\"ph1\">`CMFCRibbonMainPanel`</ph>.","pos":[107380,107419],"source":" A pointer to the `CMFCRibbonMainPanel`."},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[107426,107437],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the <ph id=\"ph1\">`CMFCRibbonMainPanel`</ph>.","pos":[107441,107512],"source":" A rectangle that specifies the boundaries of the `CMFCRibbonMainPanel`."},{"pos":[107522,107529],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[107533,107653],"content":"Override this method in a derived visual manager to customize the appearance of the frame for the <ph id=\"ph1\">`CMFCRibbonMainPanel`</ph>.","source":"Override this method in a derived visual manager to customize the appearance of the frame for the `CMFCRibbonMainPanel`."},{"pos":[107663,107770],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawribbonmenucheckframe\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawRibbonMenuCheckFrame","linkify":"<a name=\"cmfcvisualmanager__ondrawribbonmenucheckframe\"></a>  CMFCVisualManager::OnDrawRibbonMenuCheckFrame","source":"<a name=\"cmfcvisualmanager__ondrawribbonmenucheckframe\"></a>  CMFCVisualManager::OnDrawRibbonMenuCheckFrame"},{"pos":[108005,108015],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[108019,108029],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[108033,108047],"source":" [in] `pButton`"},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[108051,108062],"source":" [in] `rect`"},{"pos":[108072,108079],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[108089,108178],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawribbonpanel\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawRibbonPanel","linkify":"<a name=\"cmfcvisualmanager__ondrawribbonpanel\"></a>  CMFCVisualManager::OnDrawRibbonPanel","source":"<a name=\"cmfcvisualmanager__ondrawribbonpanel\"></a>  CMFCVisualManager::OnDrawRibbonPanel"},{"pos":[108182,108301],"content":"The framework calls this method when it draws a <bpt id=\"p1\">[</bpt>CMFCRibbonPanel<ept id=\"p1\">](../../mfc/reference/cmfcribbonpanel-class.md)</ept> object.","source":"The framework calls this method when it draws a [CMFCRibbonPanel](../../mfc/reference/cmfcribbonpanel-class.md) object."},{"pos":[108456,108466],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[108470,108480],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[108484,108514]},{"content":"[in] <ph id=\"ph1\">`pPanel`</ph>","pos":[108521,108534],"source":"[in] `pPanel`"},{"content":"A pointer to a <ph id=\"ph1\">`CMFCRibbonPanel`</ph> object.","pos":[108538,108578],"source":" A pointer to a `CMFCRibbonPanel` object."},{"content":"The framework draws this ribbon panel.","pos":[108579,108617]},{"content":"[in] <ph id=\"ph1\">`rectPanel`</ph>","pos":[108624,108640],"source":"[in] `rectPanel`"},{"content":"A rectangle that specifies the boundaries of the panel.","pos":[108644,108699]},{"content":"[in] <ph id=\"ph1\">`rectCaption`</ph>","pos":[108706,108724],"source":"[in] `rectCaption`"},{"content":"A rectangle that specifies the boundaries of the caption for the panel.","pos":[108728,108799]},{"pos":[108809,108821],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The color of text on the ribbon panel.","pos":[108825,108863]},{"pos":[108873,108880],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived class to customize the appearance of a ribbon panel.","pos":[108884,108970]},{"pos":[108980,109083],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawribbonpanelcaption\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawRibbonPanelCaption","linkify":"<a name=\"cmfcvisualmanager__ondrawribbonpanelcaption\"></a>  CMFCVisualManager::OnDrawRibbonPanelCaption","source":"<a name=\"cmfcvisualmanager__ondrawribbonpanelcaption\"></a>  CMFCVisualManager::OnDrawRibbonPanelCaption"},{"pos":[109087,109220],"content":"The framework calls this method when it draws the caption of a <bpt id=\"p1\">[</bpt>CMFCRibbonPanel Class<ept id=\"p1\">](../../mfc/reference/cmfcribbonpanel-class.md)</ept>.","source":"The framework calls this method when it draws the caption of a [CMFCRibbonPanel Class](../../mfc/reference/cmfcribbonpanel-class.md)."},{"pos":[109355,109365],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[109369,109379],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[109383,109413]},{"content":"[in] <ph id=\"ph1\">`pPanel`</ph>","pos":[109420,109433],"source":"[in] `pPanel`"},{"content":"A pointer to a <ph id=\"ph1\">`CMFCRibbonPanel`</ph> object.","pos":[109437,109477],"source":" A pointer to a `CMFCRibbonPanel` object."},{"content":"The framework draws the caption for this ribbon panel.","pos":[109478,109532]},{"content":"[in] <ph id=\"ph1\">`rectCaption`</ph>","pos":[109539,109557],"source":"[in] `rectCaption`"},{"content":"A rectangle that specifies the boundaries of the caption for the ribbon panel.","pos":[109561,109639]},{"pos":[109649,109656],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived class to customize the appearance of captions for ribbon panels.","pos":[109660,109758]},{"pos":[109768,109869],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawribbonprogressbar\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawRibbonProgressBar","linkify":"<a name=\"cmfcvisualmanager__ondrawribbonprogressbar\"></a>  CMFCVisualManager::OnDrawRibbonProgressBar","source":"<a name=\"cmfcvisualmanager__ondrawribbonprogressbar\"></a>  CMFCVisualManager::OnDrawRibbonProgressBar"},{"pos":[109873,110003],"content":"The framework calls this method when it draws a <bpt id=\"p1\">[</bpt>CMFCRibbonProgressBar Class<ept id=\"p1\">](../../mfc/reference/cmfcribbonprogressbar-class.md)</ept>.","source":"The framework calls this method when it draws a [CMFCRibbonProgressBar Class](../../mfc/reference/cmfcribbonprogressbar-class.md)."},{"pos":[110196,110206],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[110210,110220],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[110224,110254]},{"content":"[in] <ph id=\"ph1\">`pProgress`</ph>","pos":[110261,110277],"source":"[in] `pProgress`"},{"content":"A pointer to a <ph id=\"ph1\">`CMFCRibbonProgressBar`</ph> object.","pos":[110281,110327],"source":" A pointer to a `CMFCRibbonProgressBar` object."},{"content":"The framework draws this progress bar.","pos":[110328,110366]},{"content":"[in] <ph id=\"ph1\">`rectProgress`</ph>","pos":[110373,110392],"source":"[in] `rectProgress`"},{"content":"A rectangle that specifies the boundaries of the progress bar.","pos":[110396,110458]},{"content":"[in] <ph id=\"ph1\">`rectChunk`</ph>","pos":[110465,110481],"source":"[in] `rectChunk`"},{"content":"A rectangle that specifies the boundaries of the area surrounding the progress bar.","pos":[110485,110568]},{"content":"[in] <ph id=\"ph1\">`bInfiniteMode`</ph>","pos":[110575,110595],"source":"[in] `bInfiniteMode`"},{"content":"A Boolean parameter that indicates the mode of the progress bar.","pos":[110599,110663]},{"content":"A value of <ph id=\"ph1\">`TRUE`</ph> means the bar is in infinite mode.","pos":[110664,110716],"source":" A value of `TRUE` means the bar is in infinite mode."},{"content":"The default implementation does not use this parameter.","pos":[110717,110772]},{"pos":[110782,110789],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived class to customize the appearance of a progress bar.","pos":[110793,110879]},{"pos":[110889,111022],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawribbonquickaccesstoolbarseparator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawRibbonQuickAccessToolBarSeparator","linkify":"<a name=\"cmfcvisualmanager__ondrawribbonquickaccesstoolbarseparator\"></a>  CMFCVisualManager::OnDrawRibbonQuickAccessToolBarSeparator","source":"<a name=\"cmfcvisualmanager__ondrawribbonquickaccesstoolbarseparator\"></a>  CMFCVisualManager::OnDrawRibbonQuickAccessToolBarSeparator"},{"pos":[111026,111128],"content":"The framework calls this method when it draws a separator on the <bpt id=\"p1\">**</bpt>Quick Access Toolbar<ept id=\"p1\">**</ept> of a ribbon.","source":"The framework calls this method when it draws a separator on the **Quick Access Toolbar** of a ribbon."},{"pos":[111279,111289],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[111293,111303],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[111307,111337]},{"content":"[in] <ph id=\"ph1\">`pSeparator`</ph>","pos":[111344,111361],"source":"[in] `pSeparator`"},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>CMFCRibbonSeparator<ept id=\"p1\">](../../mfc/reference/cmfcribbonseparator-class.md)</ept> object.","pos":[111365,111459],"source":" A pointer to a [CMFCRibbonSeparator](../../mfc/reference/cmfcribbonseparator-class.md) object."},{"content":"The framework draws this ribbon separator.","pos":[111460,111502]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[111509,111520],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the separator.","pos":[111524,111583]},{"pos":[111593,111600],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[111604,111725],"content":"Override this method in a derived class to customize the appearance of ribbon separators on the <bpt id=\"p1\">**</bpt>Quick Access Toolbar<ept id=\"p1\">**</ept>.","source":"Override this method in a derived class to customize the appearance of ribbon separators on the **Quick Access Toolbar**."},{"pos":[111735,111846],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawribbonrecentfilesframe\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawRibbonRecentFilesFrame","linkify":"<a name=\"cmfcvisualmanager__ondrawribbonrecentfilesframe\"></a>  CMFCVisualManager::OnDrawRibbonRecentFilesFrame","source":"<a name=\"cmfcvisualmanager__ondrawribbonrecentfilesframe\"></a>  CMFCVisualManager::OnDrawRibbonRecentFilesFrame"},{"content":"The framework calls this method when it draws a frame around a list of recent files.","pos":[111850,111934]},{"pos":[112070,112080],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[112084,112094],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[112098,112128]},{"content":"[in] <ph id=\"ph1\">`pPanel`</ph>","pos":[112135,112148],"source":"[in] `pPanel`"},{"content":"A pointer to the <bpt id=\"p1\">**</bpt>Main<ept id=\"p1\">**</ept> panel on the ribbon.","pos":[112152,112198],"source":" A pointer to the **Main** panel on the ribbon."},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[112205,112216],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the frame for the list of recent files.","pos":[112220,112304]},{"pos":[112314,112321],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived visual manager to customize the appearance of the list of recent files.","pos":[112325,112430]},{"pos":[112440,112545],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawribbonsliderchannel\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawRibbonSliderChannel","linkify":"<a name=\"cmfcvisualmanager__ondrawribbonsliderchannel\"></a>  CMFCVisualManager::OnDrawRibbonSliderChannel","source":"<a name=\"cmfcvisualmanager__ondrawribbonsliderchannel\"></a>  CMFCVisualManager::OnDrawRibbonSliderChannel"},{"pos":[112549,112684],"content":"The framework calls this method when it draws the channel of a <bpt id=\"p1\">[</bpt>CMFCRibbonSlider Class<ept id=\"p1\">](../../mfc/reference/cmfcribbonslider-class.md)</ept>.","source":"The framework calls this method when it draws the channel of a [CMFCRibbonSlider Class](../../mfc/reference/cmfcribbonslider-class.md)."},{"pos":[112815,112825],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[112829,112839],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[112843,112873]},{"content":"[in] <ph id=\"ph1\">`pSlider`</ph>","pos":[112880,112894],"source":"[in] `pSlider`"},{"content":"A pointer to a CMFCRibbonSlider object.","pos":[112898,112937]},{"content":"The framework draws the channel for this ribbon slider.","pos":[112938,112993]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[113000,113011],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries for the channel of the ribbon slider.","pos":[113015,113094]},{"pos":[113104,113111],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived class to customize the appearance of the channel of the ribbon slider.","pos":[113115,113219]},{"pos":[113229,113330],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawribbonsliderthumb\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawRibbonSliderThumb","linkify":"<a name=\"cmfcvisualmanager__ondrawribbonsliderthumb\"></a>  CMFCVisualManager::OnDrawRibbonSliderThumb","source":"<a name=\"cmfcvisualmanager__ondrawribbonsliderthumb\"></a>  CMFCVisualManager::OnDrawRibbonSliderThumb"},{"pos":[113334,113468],"content":"The framework calls this method when it draws the thumb of a <bpt id=\"p1\">[</bpt>CMFCRibbonSlider<ept id=\"p1\">](../../mfc/reference/cmfcribbonslider-class.md)</ept> object.","source":"The framework calls this method when it draws the thumb of a [CMFCRibbonSlider](../../mfc/reference/cmfcribbonslider-class.md) object."},{"pos":[113671,113681],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[113685,113695],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[113699,113729]},{"content":"[in] <ph id=\"ph1\">`pSlider`</ph>","pos":[113736,113750],"source":"[in] `pSlider`"},{"content":"A pointer to a <ph id=\"ph1\">`CMFCRibbonSlider`</ph>.","pos":[113754,113788],"source":" A pointer to a `CMFCRibbonSlider`."},{"content":"The framework draws the thumb for this ribbon slider.","pos":[113789,113842]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[113849,113860],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the thumb for the ribbon slider.","pos":[113864,113941]},{"content":"[in] <ph id=\"ph1\">`bIsHighlighted`</ph>","pos":[113948,113969],"source":"[in] `bIsHighlighted`"},{"content":"A Boolean parameter that indicates if the thumb is highlighted.","pos":[113973,114036]},{"content":"[in] <ph id=\"ph1\">`bIsPressed`</ph>","pos":[114043,114060],"source":"[in] `bIsPressed`"},{"content":"A Boolean parameter that indicates if the thumb is pressed.","pos":[114064,114123]},{"content":"[in] <ph id=\"ph1\">`bIsDisabled`</ph>","pos":[114130,114148],"source":"[in] `bIsDisabled`"},{"content":"A Boolean parameter that indicates if the thumb is unavailable.","pos":[114152,114215]},{"pos":[114225,114232],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[114236,114351],"content":"Override this method in a derived visual manager to customize the appearance of the thumb for a <ph id=\"ph1\">`CMFCRibbonSlider`</ph>.","source":"Override this method in a derived visual manager to customize the appearance of the thumb for a `CMFCRibbonSlider`."},{"pos":[114361,114472],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawribbonsliderzoombutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawRibbonSliderZoomButton","linkify":"<a name=\"cmfcvisualmanager__ondrawribbonsliderzoombutton\"></a>  CMFCVisualManager::OnDrawRibbonSliderZoomButton","source":"<a name=\"cmfcvisualmanager__ondrawribbonsliderzoombutton\"></a>  CMFCVisualManager::OnDrawRibbonSliderZoomButton"},{"pos":[114476,114618],"content":"The framework calls this method when it draws the zoom buttons for a <bpt id=\"p1\">[</bpt>CMFCRibbonSlider<ept id=\"p1\">](../../mfc/reference/cmfcribbonslider-class.md)</ept> object.","source":"The framework calls this method when it draws the zoom buttons for a [CMFCRibbonSlider](../../mfc/reference/cmfcribbonslider-class.md) object."},{"pos":[114849,114859],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[114863,114873],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[114877,114907]},{"content":"[in] <ph id=\"ph1\">`pSlider`</ph>","pos":[114914,114928],"source":"[in] `pSlider`"},{"content":"A pointer to a <ph id=\"ph1\">`CMFCRibbonSlider`</ph> object.","pos":[114932,114973],"source":" A pointer to a `CMFCRibbonSlider` object."},{"content":"The framework draws this ribbon slider.","pos":[114974,115013]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[115020,115031],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the zoom buttons on the ribbon slider.","pos":[115035,115118]},{"content":"[in] <ph id=\"ph1\">`bIsZoomOut`</ph>","pos":[115125,115142],"source":"[in] `bIsZoomOut`"},{"content":"A Boolean parameter that indicates which button the framework draws.","pos":[115146,115214]},{"content":"A value of <ph id=\"ph1\">`TRUE`</ph> indicates the left button with a \"-\" for zoom out.","pos":[115215,115283],"source":" A value of `TRUE` indicates the left button with a \"-\" for zoom out."},{"content":"A value of <ph id=\"ph1\">`FALSE`</ph> indicates the right button with a \"+\" for zoom in.","pos":[115284,115353],"source":" A value of `FALSE` indicates the right button with a \"+\" for zoom in."},{"content":"[in] <ph id=\"ph1\">`bIsHighlighted`</ph>","pos":[115360,115381],"source":"[in] `bIsHighlighted`"},{"content":"A Boolean parameter that indicates whether the button is highlighted.","pos":[115385,115454]},{"content":"[in] <ph id=\"ph1\">`bIsPressed`</ph>","pos":[115461,115478],"source":"[in] `bIsPressed`"},{"content":"A Boolean parameter that indicates whether the button is pressed.","pos":[115482,115547]},{"content":"[in] <ph id=\"ph1\">`bIsDisabled`</ph>","pos":[115554,115572],"source":"[in] `bIsDisabled`"},{"content":"A Boolean parameter that indicates whether the button is unavailable.","pos":[115576,115645]},{"pos":[115655,115662],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, the zoom buttons on the ribbon slider are a circle with either a + or - sign in the center.","pos":[115666,115769]},{"content":"To customize the appearance of zoom buttons, override this method in a derived visual manager.","pos":[115770,115864]},{"pos":[115874,115979],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawribbonstatusbarpane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawRibbonStatusBarPane","linkify":"<a name=\"cmfcvisualmanager__ondrawribbonstatusbarpane\"></a>  CMFCVisualManager::OnDrawRibbonStatusBarPane","source":"<a name=\"cmfcvisualmanager__ondrawribbonstatusbarpane\"></a>  CMFCVisualManager::OnDrawRibbonStatusBarPane"},{"content":"The framework calls this method when it draws a pane on the status bar.","pos":[115983,116054]},{"pos":[116209,116219],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[116223,116233],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[116237,116267]},{"content":"[in] <ph id=\"ph1\">`pBar`</ph>","pos":[116274,116285],"source":"[in] `pBar`"},{"content":"A pointer to the status bar that contains the pane.","pos":[116289,116340]},{"content":"[in] <ph id=\"ph1\">`pPane`</ph>","pos":[116347,116359],"source":"[in] `pPane`"},{"content":"A pointer to a status bar pane.","pos":[116363,116394]},{"content":"The framework draws this <bpt id=\"p1\">[</bpt>CMFCRibbonStatusBarPane<ept id=\"p1\">](../../mfc/reference/cmfcribbonstatusbarpane-class.md)</ept> object.","pos":[116395,116507],"source":" The framework draws this [CMFCRibbonStatusBarPane](../../mfc/reference/cmfcribbonstatusbarpane-class.md) object."},{"pos":[116517,116529],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reserved value.","pos":[116533,116550]},{"content":"The default implementation returns -1.","pos":[116551,116589]},{"pos":[116599,116606],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived visual manager to customize the appearance of a pane on the status bar.","pos":[116610,116715]},{"pos":[116725,116822],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawribbontabsframe\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawRibbonTabsFrame","linkify":"<a name=\"cmfcvisualmanager__ondrawribbontabsframe\"></a>  CMFCVisualManager::OnDrawRibbonTabsFrame","source":"<a name=\"cmfcvisualmanager__ondrawribbontabsframe\"></a>  CMFCVisualManager::OnDrawRibbonTabsFrame"},{"content":"The framework calls this method when it draws the frame around a set of ribbon tabs.","pos":[116826,116910]},{"pos":[117047,117057],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a device context.","pos":[117070,117100]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>CMFCRibbonBar<ept id=\"p1\">](../../mfc/reference/cmfcribbonbar-class.md)</ept> object.","pos":[117126,117208],"source":" A pointer to a [CMFCRibbonBar](../../mfc/reference/cmfcribbonbar-class.md) object."},{"content":"The framework draws the frame for this ribbon bar.","pos":[117209,117259]},{"content":"A rectangle that specifies the boundaries of the ribbon tabs.","pos":[117279,117340]},{"pos":[117350,117362],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reserved value.","pos":[117366,117383]},{"content":"By default, this method returns -1.","pos":[117384,117419]},{"pos":[117429,117436],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived visual manager to customize the frame around a set of tabs on the ribbon.","pos":[117440,117547]},{"pos":[117557,117650],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawscrollbuttons\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawScrollButtons","linkify":"<a name=\"cmfcvisualmanager__ondrawscrollbuttons\"></a>  CMFCVisualManager::OnDrawScrollButtons","source":"<a name=\"cmfcvisualmanager__ondrawscrollbuttons\"></a>  CMFCVisualManager::OnDrawScrollButtons"},{"pos":[117920,117930],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[117934,117944],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[117948,117959],"source":" [in] `rect`"},{"content":"[in] <ph id=\"ph1\">`nBorderSize`</ph>","pos":[117963,117981],"source":" [in] `nBorderSize`"},{"content":"[in] <ph id=\"ph1\">`iImage`</ph>","pos":[117985,117998],"source":" [in] `iImage`"},{"content":"[in] <ph id=\"ph1\">`bHilited`</ph>","pos":[118002,118017],"source":" [in] `bHilited`"},{"pos":[118027,118034],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[118044,118129],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawseparator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawSeparator","linkify":"<a name=\"cmfcvisualmanager__ondrawseparator\"></a>  CMFCVisualManager::OnDrawSeparator","source":"<a name=\"cmfcvisualmanager__ondrawseparator\"></a>  CMFCVisualManager::OnDrawSeparator"},{"content":"The framework calls this method when it draws a separator.","pos":[118133,118191]},{"pos":[118323,118333],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[118337,118347],"source":"[in] `pDC`"},{"content":"A pointer to the device context for a control bar.","pos":[118351,118401]},{"content":"[in] <ph id=\"ph1\">`pBar`</ph>","pos":[118408,118419],"source":"[in] `pBar`"},{"content":"A pointer to a pane that contains the separator.","pos":[118423,118471]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[118478,118489],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the separator.","pos":[118493,118552]},{"content":"[in] <ph id=\"ph1\">`bIsHoriz`</ph>","pos":[118559,118574],"source":"[in] `bIsHoriz`"},{"content":"A Boolean parameter that indicates the orientation of a docked pane.","pos":[118578,118646]},{"content":"A value of <ph id=\"ph1\">`TRUE`</ph> indicates that the pane is docked horizontally.","pos":[118647,118712],"source":" A value of `TRUE` indicates that the pane is docked horizontally."},{"content":"A value of <ph id=\"ph1\">`FALSE`</ph> indicates that the pane is docked vertically.","pos":[118713,118777],"source":" A value of `FALSE` indicates that the pane is docked vertically."},{"pos":[118787,118794],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Separators are used on control bars to separate groups of related icons.","pos":[118798,118870]},{"content":"The default implementation for this method displays the standard separator.","pos":[118871,118946]},{"content":"Override this method in a derived visual manager to customize the appearance of the separator.","pos":[118947,119041]},{"pos":[119051,119150],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawshowallmenuitems\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawShowAllMenuItems","linkify":"<a name=\"cmfcvisualmanager__ondrawshowallmenuitems\"></a>  CMFCVisualManager::OnDrawShowAllMenuItems","source":"<a name=\"cmfcvisualmanager__ondrawshowallmenuitems\"></a>  CMFCVisualManager::OnDrawShowAllMenuItems"},{"pos":[119397,119407],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[119411,119421],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[119425,119436],"source":" [in] `rect`"},{"content":"[in] <ph id=\"ph1\">`state`</ph>","pos":[119440,119452],"source":" [in] `state`"},{"pos":[119462,119469],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[119479,119568],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawspinbuttons\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawSpinButtons","linkify":"<a name=\"cmfcvisualmanager__ondrawspinbuttons\"></a>  CMFCVisualManager::OnDrawSpinButtons","source":"<a name=\"cmfcvisualmanager__ondrawspinbuttons\"></a>  CMFCVisualManager::OnDrawSpinButtons"},{"pos":[119572,119713],"content":"The framework calls this method when it draws an instance of the <bpt id=\"p1\">[</bpt>CMFCSpinButtonCtrl Class<ept id=\"p1\">](../../mfc/reference/cmfcspinbuttonctrl-class.md)</ept>.","source":"The framework calls this method when it draws an instance of the [CMFCSpinButtonCtrl Class](../../mfc/reference/cmfcspinbuttonctrl-class.md)."},{"pos":[119887,119897],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[119901,119911],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[119915,119945]},{"content":"[in] <ph id=\"ph1\">`rectSpin`</ph>","pos":[119952,119967],"source":"[in] `rectSpin`"},{"content":"A rectangle that specifies the boundaries of the spin control.","pos":[119971,120033]},{"content":"[in] <ph id=\"ph1\">`nState`</ph>","pos":[120040,120053],"source":"[in] `nState`"},{"content":"A flag that indicates the state of the spin control.","pos":[120057,120109]},{"content":"See the Remarks section for more information.","pos":[120110,120155]},{"content":"[in] <ph id=\"ph1\">`bOrientation`</ph>","pos":[120162,120181],"source":"[in] `bOrientation`"},{"content":"A Boolean parameter that specifies the orientation of the spin control.","pos":[120185,120256]},{"content":"A value of <ph id=\"ph1\">`TRUE`</ph> indicates the spin control is horizontal.","pos":[120257,120316],"source":" A value of `TRUE` indicates the spin control is horizontal."},{"content":"Otherwise, it is vertical.","pos":[120317,120343]},{"content":"[in] <ph id=\"ph1\">`pSpinCtrl`</ph>","pos":[120350,120366],"source":"[in] `pSpinCtrl`"},{"content":"A pointer to a spin control.","pos":[120370,120398]},{"content":"The framework draws the buttons for this control.","pos":[120399,120448]},{"pos":[120458,120465],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`nState`</ph> parameter indicates the state of the spin control.","pos":[120469,120532],"source":"The `nState` parameter indicates the state of the spin control."},{"content":"The parameter is one of the following values:","pos":[120533,120578]},{"content":"AFX_SPIN_PRESSEDUP","pos":[120588,120606]},{"content":"AFX_SPIN_PRESSEDDOWN","pos":[120616,120636]},{"content":"AFX_SPIN_HIGHLIGHTEDUP","pos":[120646,120668]},{"content":"AFX_SPIN_HIGHLIGHTEDDOWN","pos":[120678,120702]},{"content":"AFX_SPIN_DISABLED","pos":[120712,120729]},{"content":"Override this method in a derived visual manager to customize the appearance of a spin control.","pos":[120736,120831]},{"pos":[120841,120936],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawsplitterborder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawSplitterBorder","linkify":"<a name=\"cmfcvisualmanager__ondrawsplitterborder\"></a>  CMFCVisualManager::OnDrawSplitterBorder","source":"<a name=\"cmfcvisualmanager__ondrawsplitterborder\"></a>  CMFCVisualManager::OnDrawSplitterBorder"},{"pos":[120940,121071],"content":"The framework calls this method when it draws the border around an instance of the <bpt id=\"p1\">[</bpt>CSplitterWndEx Class<ept id=\"p1\">](csplitterwndex-class.md)</ept>.","source":"The framework calls this method when it draws the border around an instance of the [CSplitterWndEx Class](csplitterwndex-class.md)."},{"pos":[121200,121210],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[121214,121224],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[121228,121258]},{"content":"[in] <ph id=\"ph1\">`pSplitterWnd`</ph>","pos":[121265,121284],"source":"[in] `pSplitterWnd`"},{"content":"A pointer to a splitter window.","pos":[121288,121319]},{"content":"The framework draws the border for this window.","pos":[121320,121367]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[121374,121385],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the splitter window.","pos":[121389,121454]},{"pos":[121464,121471],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived visual manager to customize the appearance of the border for a splitter window.","pos":[121475,121588]},{"pos":[121598,121687],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawsplitterbox\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawSplitterBox","linkify":"<a name=\"cmfcvisualmanager__ondrawsplitterbox\"></a>  CMFCVisualManager::OnDrawSplitterBox","source":"<a name=\"cmfcvisualmanager__ondrawsplitterbox\"></a>  CMFCVisualManager::OnDrawSplitterBox"},{"content":"The framework calls this method when it draws the drag box for an instance of the <bpt id=\"p1\">[</bpt>CSplitterWndEx Class<ept id=\"p1\">](csplitterwndex-class.md)</ept>.","pos":[121691,121821],"source":"The framework calls this method when it draws the drag box for an instance of the [CSplitterWndEx Class](csplitterwndex-class.md)."},{"content":"The drag box appears when the user selects the splitter bar and changes the dimensions of the child windows.","pos":[121822,121930]},{"pos":[122057,122067],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[122071,122081],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[122085,122115]},{"content":"[in] <ph id=\"ph1\">`pSplitterWnd`</ph>","pos":[122122,122141],"source":"[in] `pSplitterWnd`"},{"content":"A pointer to a splitter window.","pos":[122145,122176]},{"content":"The framework draws the box for this splitter window.","pos":[122177,122230]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[122237,122248],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the splitter window.","pos":[122252,122317]},{"pos":[122327,122334],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived visual manager to customize the appearance of the drag box for a splitter window.","pos":[122338,122453]},{"pos":[122463,122568],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawstatusbarpaneborder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawStatusBarPaneBorder","linkify":"<a name=\"cmfcvisualmanager__ondrawstatusbarpaneborder\"></a>  CMFCVisualManager::OnDrawStatusBarPaneBorder","source":"<a name=\"cmfcvisualmanager__ondrawstatusbarpaneborder\"></a>  CMFCVisualManager::OnDrawStatusBarPaneBorder"},{"pos":[122572,122702],"content":"The framework calls this method when it draws the border for a <bpt id=\"p1\">[</bpt>CMFCStatusBar<ept id=\"p1\">](../../mfc/reference/cmfcstatusbar-class.md)</ept> object.","source":"The framework calls this method when it draws the border for a [CMFCStatusBar](../../mfc/reference/cmfcstatusbar-class.md) object."},{"pos":[122867,122877],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[122881,122891],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[122895,122925]},{"content":"[in] <ph id=\"ph1\">`pBar`</ph>","pos":[122932,122943],"source":"[in] `pBar`"},{"content":"A pointer to a <ph id=\"ph1\">`CMFCStatusBar`</ph> object.","pos":[122947,122985],"source":" A pointer to a `CMFCStatusBar` object."},{"content":"The framework draws this status bar object.","pos":[122986,123029]},{"content":"[in] <ph id=\"ph1\">`rectPane`</ph>","pos":[123036,123051],"source":"[in] `rectPane`"},{"content":"A rectangle that specifies the boundaries of the status bar.","pos":[123055,123115]},{"content":"[in] <ph id=\"ph1\">`uiID`</ph>","pos":[123122,123133],"source":"[in] `uiID`"},{"content":"The ID of the status bar.","pos":[123137,123162]},{"content":"[in] <ph id=\"ph1\">`nStyle`</ph>","pos":[123169,123182],"source":"[in] `nStyle`"},{"content":"The style of the status bar.","pos":[123186,123214]},{"pos":[123224,123231],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[123235,123355],"content":"Override this method in a derived visual manager to customize the appearance of the border for a <ph id=\"ph1\">`CMFCStatusBar`</ph> object.","source":"Override this method in a derived visual manager to customize the appearance of the border for a `CMFCStatusBar` object."},{"pos":[123365,123466],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawstatusbarprogress\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawStatusBarProgress","linkify":"<a name=\"cmfcvisualmanager__ondrawstatusbarprogress\"></a>  CMFCVisualManager::OnDrawStatusBarProgress","source":"<a name=\"cmfcvisualmanager__ondrawstatusbarprogress\"></a>  CMFCVisualManager::OnDrawStatusBarProgress"},{"pos":[123470,123613],"content":"The framework calls this method when it draws the progress indicator on the <bpt id=\"p1\">[</bpt>CMFCStatusBar<ept id=\"p1\">](../../mfc/reference/cmfcstatusbar-class.md)</ept> object.","source":"The framework calls this method when it draws the progress indicator on the [CMFCStatusBar](../../mfc/reference/cmfcstatusbar-class.md) object."},{"pos":[123917,123927],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[123931,123941],"source":"[in] `pDC`"},{"content":"A pointer to the device context for the status bar.","pos":[123945,123996]},{"content":"[in] <ph id=\"ph1\">`pStatusBar`</ph>","pos":[124003,124020],"source":"[in] `pStatusBar`"},{"content":"The <ph id=\"ph1\">`CMFCStatusBar`</ph> object that contains the progress bar.","pos":[124024,124082],"source":" The `CMFCStatusBar` object that contains the progress bar."},{"content":"[in] <ph id=\"ph1\">`rectProgress`</ph>","pos":[124089,124108],"source":"[in] `rectProgress`"},{"content":"A rectangle that specifies the boundaries of the progress bar.","pos":[124112,124174]},{"content":"[in] <ph id=\"ph1\">`nProgressTotal`</ph>","pos":[124181,124202],"source":"[in] `nProgressTotal`"},{"content":"The total number for the progress bar.","pos":[124206,124244]},{"content":"[in] <ph id=\"ph1\">`nProgressCurr`</ph>","pos":[124251,124271],"source":"[in] `nProgressCurr`"},{"content":"The current progress for the progress bar.","pos":[124275,124317]},{"content":"[in] <ph id=\"ph1\">`clrBar`</ph>","pos":[124324,124337],"source":"[in] `clrBar`"},{"content":"A <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> parameter that indicates the initial color for the progress bar.","pos":[124341,124478],"source":" A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter that indicates the initial color for the progress bar."},{"content":"The value is either the start of a color gradient or the complete color of the progress bar.","pos":[124479,124571]},{"content":"[in] <ph id=\"ph1\">`clrProgressBarDest`</ph>","pos":[124578,124603],"source":"[in] `clrProgressBarDest`"},{"content":"A <ph id=\"ph1\">`COLORREF`</ph> parameter that indicates the end of a color gradient for the progress bar.","pos":[124607,124694],"source":" A `COLORREF` parameter that indicates the end of a color gradient for the progress bar."},{"content":"If <ph id=\"ph1\">`clrProgressBarDest`</ph> is -1, the framework does not draw the progress bar as a color gradient.","pos":[124695,124791],"source":" If `clrProgressBarDest` is -1, the framework does not draw the progress bar as a color gradient."},{"content":"Instead, it fills the whole progress bar with the color specified by <ph id=\"ph1\">`clrBar`</ph>.","pos":[124792,124870],"source":" Instead, it fills the whole progress bar with the color specified by `clrBar`."},{"content":"[in] <ph id=\"ph1\">`clrProgressText`</ph>","pos":[124877,124899],"source":"[in] `clrProgressText`"},{"content":"A <ph id=\"ph1\">`COLORREF`</ph> parameter that indicates the text color for the textual representation of the current progress.","pos":[124903,125011],"source":" A `COLORREF` parameter that indicates the text color for the textual representation of the current progress."},{"content":"This parameter is ignored if <ph id=\"ph1\">`bProgressText`</ph> is set to <ph id=\"ph2\">`FALSE`</ph>.","pos":[125012,125075],"source":" This parameter is ignored if `bProgressText` is set to `FALSE`."},{"content":"[in] <ph id=\"ph1\">`bProgressText`</ph>","pos":[125082,125102],"source":"[in] `bProgressText`"},{"content":"A Boolean parameter that indicates whether to display the textual representation of the current progress.","pos":[125106,125211]},{"pos":[125221,125228],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[125232,125339],"content":"Override this method in a derived visual manager to customize the appearance of the <ph id=\"ph1\">`CMFCStatusBar`</ph> object.","source":"Override this method in a derived visual manager to customize the appearance of the `CMFCStatusBar` object."},{"pos":[125349,125448],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawstatusbarsizebox\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawStatusBarSizeBox","linkify":"<a name=\"cmfcvisualmanager__ondrawstatusbarsizebox\"></a>  CMFCVisualManager::OnDrawStatusBarSizeBox","source":"<a name=\"cmfcvisualmanager__ondrawstatusbarsizebox\"></a>  CMFCVisualManager::OnDrawStatusBarSizeBox"},{"pos":[125452,125577],"content":"The framework calls this method when it draws the size box for a <bpt id=\"p1\">[</bpt>CMFCStatusBar<ept id=\"p1\">](../../mfc/reference/cmfcstatusbar-class.md)</ept>.","source":"The framework calls this method when it draws the size box for a [CMFCStatusBar](../../mfc/reference/cmfcstatusbar-class.md)."},{"pos":[125710,125720],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[125724,125734],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[125738,125768]},{"content":"[in] <ph id=\"ph1\">`pStatBar`</ph>","pos":[125775,125790],"source":"[in] `pStatBar`"},{"content":"A pointer to a status bar.","pos":[125794,125820]},{"content":"The framework draws the size box for this status bar.","pos":[125821,125874]},{"content":"[in] <ph id=\"ph1\">`rectSizeBox`</ph>","pos":[125881,125899],"source":"[in] `rectSizeBox`"},{"content":"A rectangle that specifies the boundaries of the size box.","pos":[125903,125961]},{"pos":[125971,125978],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[125982,126096],"content":"Override this method in a derived visual manager to customize the appearance of the size box on a <ph id=\"ph1\">`CMFCStatusBar`</ph>.","source":"Override this method in a derived visual manager to customize the appearance of the size box on a `CMFCStatusBar`."},{"pos":[126106,126179],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawtab\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawTab","linkify":"<a name=\"cmfcvisualmanager__ondrawtab\"></a>  CMFCVisualManager::OnDrawTab","source":"<a name=\"cmfcvisualmanager__ondrawtab\"></a>  CMFCVisualManager::OnDrawTab"},{"pos":[126183,126315],"content":"The framework calls this method when it draws the tabs for a <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl<ept id=\"p1\">](../../mfc/reference/cmfcbasetabctrl-class.md)</ept> object.","source":"The framework calls this method when it draws the tabs for a [CMFCBaseTabCtrl](../../mfc/reference/cmfcbasetabctrl-class.md) object."},{"pos":[126476,126486],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[126490,126500],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[126504,126534]},{"content":"[in] <ph id=\"ph1\">`rectTab`</ph>","pos":[126541,126555],"source":"[in] `rectTab`"},{"content":"A rectangle that specifies the boundaries of the tab control.","pos":[126559,126620]},{"content":"[in] <ph id=\"ph1\">`iTab`</ph>","pos":[126627,126638],"source":"[in] `iTab`"},{"content":"The index of the tab that the framework draws.","pos":[126642,126688]},{"content":"[in] <ph id=\"ph1\">`bIsActive`</ph>","pos":[126695,126711],"source":"[in] `bIsActive`"},{"content":"A Boolean parameter that specifies whether the tab is active.","pos":[126715,126776]},{"content":"[in] <ph id=\"ph1\">`pTabWnd`</ph>","pos":[126783,126797],"source":"[in] `pTabWnd`"},{"content":"A pointer to a <ph id=\"ph1\">`CMFCBaseTabCtrl`</ph> object.","pos":[126801,126841],"source":" A pointer to a `CMFCBaseTabCtrl` object."},{"content":"The framework draws this tab control.","pos":[126842,126879]},{"pos":[126889,126896],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[126900,126984],"content":"A <ph id=\"ph1\">`CMFCBaseTabCtrl`</ph> object calls this method when it processes the WM_PAINT message.","source":"A `CMFCBaseTabCtrl` object calls this method when it processes the WM_PAINT message."},{"content":"Override this method in a derived class to customize the look of tabs.","pos":[126991,127061]},{"pos":[127071,127166],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawtabclosebutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawTabCloseButton","linkify":"<a name=\"cmfcvisualmanager__ondrawtabclosebutton\"></a>  CMFCVisualManager::OnDrawTabCloseButton","source":"<a name=\"cmfcvisualmanager__ondrawtabclosebutton\"></a>  CMFCVisualManager::OnDrawTabCloseButton"},{"pos":[127170,127255],"content":"The framework calls this method when it draws the <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> button on the active tab.","source":"The framework calls this method when it draws the **Close** button on the active tab."},{"pos":[127460,127470],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[127474,127484],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[127488,127518]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[127525,127536],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> button.","pos":[127540,127606],"source":" A rectangle that specifies the boundaries of the **Close** button."},{"content":"[in] <ph id=\"ph1\">`pTabWnd`</ph>","pos":[127613,127627],"source":"[in] `pTabWnd`"},{"content":"A pointer to a tab control.","pos":[127631,127658]},{"content":"The framework draws the <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> button for this tab control.","pos":[127659,127721],"source":" The framework draws the **Close** button for this tab control."},{"content":"[in] <ph id=\"ph1\">`bIsHighlighted`</ph>","pos":[127728,127749],"source":"[in] `bIsHighlighted`"},{"content":"A Boolean parameter that indicates whether the <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> button is highlighted.","pos":[127753,127832],"source":" A Boolean parameter that indicates whether the **Close** button is highlighted."},{"content":"[in] <ph id=\"ph1\">`bIsPressed`</ph>","pos":[127839,127856],"source":"[in] `bIsPressed`"},{"content":"A Boolean parameter that indicates whether the <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> button is pressed.","pos":[127860,127935],"source":" A Boolean parameter that indicates whether the **Close** button is pressed."},{"content":"[in] <ph id=\"ph1\">`bIsDisabled`</ph>","pos":[127942,127960],"source":"[in] `bIsDisabled`"},{"content":"A Boolean parameter that indicates whether the <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> button is disabled.","pos":[127964,128040],"source":" A Boolean parameter that indicates whether the **Close** button is disabled."},{"pos":[128050,128057],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[128061,128193],"content":"Override this method in a derived visual manager to customize the appearance of the <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> button on the active tab of <ph id=\"ph1\">`pTabWnd`</ph>.","source":"Override this method in a derived visual manager to customize the appearance of the **Close** button on the active tab of `pTabWnd`."},{"pos":[128203,128290],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawtabcontent\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawTabContent","linkify":"<a name=\"cmfcvisualmanager__ondrawtabcontent\"></a>  CMFCVisualManager::OnDrawTabContent","source":"<a name=\"cmfcvisualmanager__ondrawtabcontent\"></a>  CMFCVisualManager::OnDrawTabContent"},{"pos":[128294,128469],"content":"The framework calls this method when it draws the contents located on the interior of an instance of the <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl Class<ept id=\"p1\">](../../mfc/reference/cmfcbasetabctrl-class.md)</ept>.","source":"The framework calls this method when it draws the contents located on the interior of an instance of the [CMFCBaseTabCtrl Class](../../mfc/reference/cmfcbasetabctrl-class.md)."},{"pos":[128661,128671],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[128675,128685],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[128689,128719]},{"content":"[in] <ph id=\"ph1\">`rectTab`</ph>","pos":[128726,128740],"source":"[in] `rectTab`"},{"content":"A rectangle that specifies the boundaries of the tab interior.","pos":[128744,128806]},{"content":"[in] <ph id=\"ph1\">`iTab`</ph>","pos":[128813,128824],"source":"[in] `iTab`"},{"content":"The zero-based index of the tab.","pos":[128828,128860]},{"content":"The framework draws the interior of this tab.","pos":[128861,128906]},{"content":"[in] <ph id=\"ph1\">`bIsActive`</ph>","pos":[128913,128929],"source":"[in] `bIsActive`"},{"content":"A Boolean parameter that indicates whether a tab is active.","pos":[128933,128992]},{"content":"[in] <ph id=\"ph1\">`pTabWnd`</ph>","pos":[128999,129013],"source":"[in] `pTabWnd`"},{"content":"A pointer to the tabbed control that contains the tab being drawn.","pos":[129017,129083]},{"content":"[in] <ph id=\"ph1\">`clrText`</ph>","pos":[129090,129104],"source":"[in] `clrText`"},{"content":"The color of text on the interior of the tab.","pos":[129108,129153]},{"pos":[129163,129170],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The interior of a tab contains the text and icons of the tab.","pos":[129174,129235]},{"content":"Override this method in a derived visual manager to customize the appearance of tabs.","pos":[129236,129321]},{"pos":[129331,129430],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawtabsbuttonborder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawTabsButtonBorder","linkify":"<a name=\"cmfcvisualmanager__ondrawtabsbuttonborder\"></a>  CMFCVisualManager::OnDrawTabsButtonBorder","source":"<a name=\"cmfcvisualmanager__ondrawtabsbuttonborder\"></a>  CMFCVisualManager::OnDrawTabsButtonBorder"},{"content":"The framework calls this method when it draws the border of a tab button.","pos":[129434,129507]},{"pos":[129682,129692],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[129696,129706],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[129710,129740]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[129747,129758],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the tab button.","pos":[129762,129822]},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[129829,129843],"source":"[in] `pButton`"},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>CMFCButton<ept id=\"p1\">](../../mfc/reference/cmfcbutton-class.md)</ept> object.","pos":[129847,129923],"source":" A pointer to a [CMFCButton](../../mfc/reference/cmfcbutton-class.md) object."},{"content":"The framework draws the border for this <ph id=\"ph1\">`CMFCButton`</ph> instance.","pos":[129924,129986],"source":" The framework draws the border for this `CMFCButton` instance."},{"content":"[in] <ph id=\"ph1\">`uiState`</ph>","pos":[129993,130007],"source":"[in] `uiState`"},{"content":"An unsigned integer that specifies the state of the button.","pos":[130011,130070]},{"content":"[in] <ph id=\"ph1\">`pWndTab`</ph>","pos":[130077,130091],"source":"[in] `pWndTab`"},{"content":"A pointer to the parent tab window.","pos":[130095,130130]},{"pos":[130140,130147],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived visual manager to customize the appearance of the border of the tab button.","pos":[130151,130260]},{"pos":[130270,130345],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawtask\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawTask","linkify":"<a name=\"cmfcvisualmanager__ondrawtask\"></a>  CMFCVisualManager::OnDrawTask","source":"<a name=\"cmfcvisualmanager__ondrawtask\"></a>  CMFCVisualManager::OnDrawTask"},{"pos":[130349,130464],"content":"The framework calls this method when it draws a <bpt id=\"p1\">[</bpt>CMFCTasksPane<ept id=\"p1\">](../../mfc/reference/cmfctaskspane-class.md)</ept> object.","source":"The framework calls this method when it draws a [CMFCTasksPane](../../mfc/reference/cmfctaskspane-class.md) object."},{"pos":[130654,130664],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[130668,130678],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[130682,130712]},{"content":"[in] <ph id=\"ph1\">`pTask`</ph>","pos":[130719,130731],"source":"[in] `pTask`"},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>CMFCTasksPaneTask<ept id=\"p1\">](../../mfc/reference/cmfctaskspanetask-class.md)</ept> object.","pos":[130735,130825],"source":" A pointer to a [CMFCTasksPaneTask](../../mfc/reference/cmfctaskspanetask-class.md) object."},{"content":"The framework draws this task.","pos":[130826,130856]},{"content":"[in] <ph id=\"ph1\">`pIcons`</ph>","pos":[130863,130876],"source":"[in] `pIcons`"},{"content":"A pointer to the image list associated with the task pane.","pos":[130880,130938]},{"content":"Each task contains an index for an image in this list.","pos":[130939,130993]},{"content":"[in] <ph id=\"ph1\">`bIsHighlighted`</ph>","pos":[131000,131021],"source":"[in] `bIsHighlighted`"},{"content":"A Boolean parameter that specifies whether the displayed task is highlighted.","pos":[131025,131102]},{"content":"[in] <ph id=\"ph1\">`bIsSelected`</ph>","pos":[131109,131127],"source":"[in] `bIsSelected`"},{"content":"A Boolean parameter that specifies whether the displayed task is selected.","pos":[131131,131205]},{"pos":[131215,131222],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework displays tasks on the task bar as both an icon and text.","pos":[131226,131296]},{"content":"The <ph id=\"ph1\">`pIcons`</ph> parameter contains the icon for the task indicated by <ph id=\"ph2\">`pTask`</ph>.","pos":[131297,131372],"source":" The `pIcons` parameter contains the icon for the task indicated by `pTask`."},{"content":"Override this method in a derived class to customize the appearance of tasks on the task bar.","pos":[131379,131472]},{"pos":[131482,131589],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawtasksgroupareaborder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawTasksGroupAreaBorder","linkify":"<a name=\"cmfcvisualmanager__ondrawtasksgroupareaborder\"></a>  CMFCVisualManager::OnDrawTasksGroupAreaBorder","source":"<a name=\"cmfcvisualmanager__ondrawtasksgroupareaborder\"></a>  CMFCVisualManager::OnDrawTasksGroupAreaBorder"},{"pos":[131593,131734],"content":"The framework calls this method when it draws a border around a group on a <bpt id=\"p1\">[</bpt>CMFCTasksPane Class<ept id=\"p1\">](../../mfc/reference/cmfctaskspane-class.md)</ept>.","source":"The framework calls this method when it draws a border around a group on a [CMFCTasksPane Class](../../mfc/reference/cmfctaskspane-class.md)."},{"pos":[131891,131901],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[131905,131915],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[131919,131949]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[131956,131967],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the group area on the task pane.","pos":[131971,132048]},{"content":"[in] <ph id=\"ph1\">`bSpecial`</ph>","pos":[132055,132070],"source":"[in] `bSpecial`"},{"content":"A Boolean parameter that specifies if the border is highlighted.","pos":[132074,132138]},{"content":"A value of <ph id=\"ph1\">`TRUE`</ph> indicates that the border is highlighted.","pos":[132139,132198],"source":" A value of `TRUE` indicates that the border is highlighted."},{"content":"[in] <ph id=\"ph1\">`bNoTitle`</ph>","pos":[132205,132220],"source":"[in] `bNoTitle`"},{"content":"A Boolean parameter that specifies whether the group area has a title.","pos":[132224,132294]},{"content":"A value of <ph id=\"ph1\">`TRUE`</ph> indicates that the group area does not have a title.","pos":[132295,132365],"source":" A value of `TRUE` indicates that the group area does not have a title."},{"pos":[132375,132382],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this function in a derived class to customize the border around a group area on the task pane.","pos":[132386,132489]},{"pos":[132499,132600],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawtasksgroupcaption\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawTasksGroupCaption","linkify":"<a name=\"cmfcvisualmanager__ondrawtasksgroupcaption\"></a>  CMFCVisualManager::OnDrawTasksGroupCaption","source":"<a name=\"cmfcvisualmanager__ondrawtasksgroupcaption\"></a>  CMFCVisualManager::OnDrawTasksGroupCaption"},{"pos":[132604,132753],"content":"The framework calls this method when it draws the caption for a <bpt id=\"p1\">[</bpt>CMFCTasksPaneTaskGroup<ept id=\"p1\">](../../mfc/reference/cmfctaskspanetaskgroup-class.md)</ept> object.","source":"The framework calls this method when it draws the caption for a [CMFCTasksPaneTaskGroup](../../mfc/reference/cmfctaskspanetaskgroup-class.md) object."},{"pos":[132969,132979],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[132983,132993],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[132997,133027]},{"content":"[in] <ph id=\"ph1\">`pGroup`</ph>","pos":[133034,133047],"source":"[in] `pGroup`"},{"content":"A pointer to a <ph id=\"ph1\">`CMFCTasksPaneTaskGroup`</ph> object.","pos":[133051,133098],"source":" A pointer to a `CMFCTasksPaneTaskGroup` object."},{"content":"The framework draws the caption for this group.","pos":[133099,133146]},{"content":"[in] <ph id=\"ph1\">`bIsHighlighted`</ph>","pos":[133153,133174],"source":"[in] `bIsHighlighted`"},{"content":"A Boolean parameter that indicates whether the group is highlighted.","pos":[133178,133246]},{"content":"[in] <ph id=\"ph1\">`bIsSelected`</ph>","pos":[133253,133271],"source":"[in] `bIsSelected`"},{"content":"A Boolean parameter that indicates whether the group is currently selected.","pos":[133275,133350]},{"content":"[in] <ph id=\"ph1\">`bCanCollapse`</ph>","pos":[133357,133376],"source":"[in] `bCanCollapse`"},{"content":"A Boolean parameter that indicates whether the group can be collapsed.","pos":[133380,133450]},{"pos":[133460,133467],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[133471,133568],"content":"The task groups appear on the <bpt id=\"p1\">[</bpt>CMFCTasksPane<ept id=\"p1\">](../../mfc/reference/cmfctaskspane-class.md)</ept> object.","source":"The task groups appear on the [CMFCTasksPane](../../mfc/reference/cmfctaskspane-class.md) object."},{"pos":[133575,133671],"content":"Override this method in a derived class to customize the caption for a <ph id=\"ph1\">`CMFCTasksPaneTaskGroup`</ph>.","source":"Override this method in a derived class to customize the caption for a `CMFCTasksPaneTaskGroup`."},{"pos":[133681,133776],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawtasksgroupicon\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawTasksGroupIcon","linkify":"<a name=\"cmfcvisualmanager__ondrawtasksgroupicon\"></a>  CMFCVisualManager::OnDrawTasksGroupIcon","source":"<a name=\"cmfcvisualmanager__ondrawtasksgroupicon\"></a>  CMFCVisualManager::OnDrawTasksGroupIcon"},{"pos":[134120,134130],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[134134,134144],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`pGroup`</ph>","pos":[134148,134161],"source":" [in] `pGroup`"},{"content":"[in] <ph id=\"ph1\">`nIconHOffset`</ph>","pos":[134165,134184],"source":" [in] `nIconHOffset`"},{"content":"[in] <ph id=\"ph1\">`bIsHighlighted`</ph>","pos":[134188,134209],"source":" [in] `bIsHighlighted`"},{"content":"[in] <ph id=\"ph1\">`bIsSelected`</ph>","pos":[134213,134231],"source":" [in] `bIsSelected`"},{"content":"[in] <ph id=\"ph1\">`bCanCollapse`</ph>","pos":[134235,134254],"source":" [in] `bCanCollapse`"},{"pos":[134264,134271],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[134281,134376],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawtearoffcaption\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawTearOffCaption","linkify":"<a name=\"cmfcvisualmanager__ondrawtearoffcaption\"></a>  CMFCVisualManager::OnDrawTearOffCaption","source":"<a name=\"cmfcvisualmanager__ondrawtearoffcaption\"></a>  CMFCVisualManager::OnDrawTearOffCaption"},{"pos":[134380,134510],"content":"The framework calls this method when it draws the caption for a <bpt id=\"p1\">[</bpt>CMFCPopupMenu Class<ept id=\"p1\">](../../mfc/reference/cmfcpopupmenu-class.md)</ept>.","source":"The framework calls this method when it draws the caption for a [CMFCPopupMenu Class](../../mfc/reference/cmfcpopupmenu-class.md)."},{"pos":[134625,134635],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[134639,134649],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[134653,134683]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[134690,134701],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the caption.","pos":[134705,134762]},{"content":"[in] <ph id=\"ph1\">`bIsActive`</ph>","pos":[134769,134785],"source":"[in] `bIsActive`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> if the caption is active; <ph id=\"ph2\">`FALSE`</ph> otherwise.","pos":[134788,134840],"source":" `TRUE` if the caption is active; `FALSE` otherwise."},{"pos":[134850,134857],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[134861,134994],"content":"This function is called by the framework when a <ph id=\"ph1\">`CMFCPopupMenu`</ph> object processes a WM_PAINT message and must draw a tear-off caption.","source":"This function is called by the framework when a `CMFCPopupMenu` object processes a WM_PAINT message and must draw a tear-off caption."},{"content":"Override this method in a derived class to customize the look of captions for tear-off bars.","pos":[135001,135093]},{"pos":[135103,135194],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ondrawtoolboxframe\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnDrawToolBoxFrame","linkify":"<a name=\"cmfcvisualmanager__ondrawtoolboxframe\"></a>  CMFCVisualManager::OnDrawToolBoxFrame","source":"<a name=\"cmfcvisualmanager__ondrawtoolboxframe\"></a>  CMFCVisualManager::OnDrawToolBoxFrame"},{"pos":[135395,135405],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[135409,135419],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[135423,135434],"source":" [in] `rect`"},{"pos":[135444,135451],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[135461,135556],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__onerasemdiclientarea\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnEraseMDIClientArea","linkify":"<a name=\"cmfcvisualmanager__onerasemdiclientarea\"></a>  CMFCVisualManager::OnEraseMDIClientArea","source":"<a name=\"cmfcvisualmanager__onerasemdiclientarea\"></a>  CMFCVisualManager::OnEraseMDIClientArea"},{"content":"The framework calls this method when it erases the MDI client area.","pos":[135560,135627]},{"pos":[135726,135736],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[135740,135750],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[135754,135784]},{"content":"[in] <ph id=\"ph1\">`rectClient`</ph>","pos":[135791,135808],"source":"[in] `rectClient`"},{"content":"A rectangle that specifies the boundaries of the MDI client area.","pos":[135812,135877]},{"pos":[135887,135899],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reserved value.","pos":[135903,135920]},{"content":"The default implementation returns <ph id=\"ph1\">`FALSE`</ph>.","pos":[135921,135964],"source":" The default implementation returns `FALSE`."},{"pos":[135974,135981],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method to execute custom code when the visual manager erases the MDI client area.","pos":[135985,136080]},{"pos":[136090,136193],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__onerasepopupwindowbutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnErasePopupWindowButton","linkify":"<a name=\"cmfcvisualmanager__onerasepopupwindowbutton\"></a>  CMFCVisualManager::OnErasePopupWindowButton","source":"<a name=\"cmfcvisualmanager__onerasepopupwindowbutton\"></a>  CMFCVisualManager::OnErasePopupWindowButton"},{"pos":[136441,136451],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[136455,136465],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`rectClient`</ph>","pos":[136469,136486],"source":" [in] `rectClient`"},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[136490,136504],"source":" [in] `pButton`"},{"pos":[136514,136521],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[136531,136616],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__onerasetabsarea\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnEraseTabsArea","linkify":"<a name=\"cmfcvisualmanager__onerasetabsarea\"></a>  CMFCVisualManager::OnEraseTabsArea","source":"<a name=\"cmfcvisualmanager__onerasetabsarea\"></a>  CMFCVisualManager::OnEraseTabsArea"},{"content":"The framework calls this method when it erases the tab area of a tab window.","pos":[136620,136696]},{"pos":[136822,136832],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[136836,136846],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[136850,136880]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[136887,136898],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the tab area.","pos":[136902,136960]},{"content":"[in] <ph id=\"ph1\">`pTabWnd`</ph>","pos":[136967,136981],"source":"[in] `pTabWnd`"},{"content":"A pointer to a tab window.","pos":[136985,137011]},{"content":"The framework erases the tab area for the specified tab window.","pos":[137012,137075]},{"pos":[137085,137092],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[137096,137276],"content":"This function is called by the framework when a <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl Class<ept id=\"p1\">](../../mfc/reference/cmfcbasetabctrl-class.md)</ept> object processes a <ph id=\"ph1\">`WM_PAINT`</ph> message and erases the tab area.","source":"This function is called by the framework when a [CMFCBaseTabCtrl Class](../../mfc/reference/cmfcbasetabctrl-class.md) object processes a `WM_PAINT` message and erases the tab area."},{"content":"Override this method in a derived visual manager to customize the appearance of tabs.","pos":[137283,137368]},{"pos":[137378,137467],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__onerasetabsbutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnEraseTabsButton","linkify":"<a name=\"cmfcvisualmanager__onerasetabsbutton\"></a>  CMFCVisualManager::OnEraseTabsButton","source":"<a name=\"cmfcvisualmanager__onerasetabsbutton\"></a>  CMFCVisualManager::OnEraseTabsButton"},{"content":"The framework calls this method when it erases the text and icon of a tab button.","pos":[137471,137552]},{"pos":[137701,137711],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[137715,137725],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[137729,137759]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[137766,137777],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the tab button.","pos":[137781,137841]},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[137848,137862],"source":"[in] `pButton`"},{"content":"A pointer to a tab button.","pos":[137866,137892]},{"content":"The framework erases the text and icon for this button.","pos":[137893,137948]},{"content":"[in] <ph id=\"ph1\">`pWndTab`</ph>","pos":[137955,137969],"source":"[in] `pWndTab`"},{"content":"A pointer to the tab control that contains the tab button.","pos":[137973,138031]},{"pos":[138041,138048],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[138052,138220],"content":"The framework erases the text and icon for a button when a <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl<ept id=\"p1\">](../../mfc/reference/cmfcbasetabctrl-class.md)</ept> object processes the <ph id=\"ph1\">`WM_ERASEBKGND`</ph> message.","source":"The framework erases the text and icon for a button when a [CMFCBaseTabCtrl](../../mfc/reference/cmfcbasetabctrl-class.md) object processes the `WM_ERASEBKGND` message."},{"content":"Override this method in a derived visual manager to customize the appearance of tab buttons.","pos":[138227,138319]},{"pos":[138329,138416],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__onerasetabsframe\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnEraseTabsFrame","linkify":"<a name=\"cmfcvisualmanager__onerasetabsframe\"></a>  CMFCVisualManager::OnEraseTabsFrame","source":"<a name=\"cmfcvisualmanager__onerasetabsframe\"></a>  CMFCVisualManager::OnEraseTabsFrame"},{"pos":[138420,138550],"content":"The framework calls this method when it erases a frame on a <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl Class<ept id=\"p1\">](../../mfc/reference/cmfcbasetabctrl-class.md)</ept>.","source":"The framework calls this method when it erases a frame on a [CMFCBaseTabCtrl Class](../../mfc/reference/cmfcbasetabctrl-class.md)."},{"pos":[138677,138687],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[138691,138701],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[138705,138735]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[138742,138753],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the tab window.","pos":[138757,138817]},{"content":"[in] <ph id=\"ph1\">`pTabWnd`</ph>","pos":[138824,138838],"source":"[in] `pTabWnd`"},{"content":"A pointer to a tab window.","pos":[138842,138868]},{"content":"The framework erases a frame for this <ph id=\"ph1\">`CMFCBaseTabCtrl`</ph>.","pos":[138869,138925],"source":" The framework erases a frame for this `CMFCBaseTabCtrl`."},{"pos":[138935,138947],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[138951,139005],"content":"<ph id=\"ph1\">`TRUE`</ph> if the method is successful; <ph id=\"ph2\">`FALSE`</ph> otherwise.","source":"`TRUE` if the method is successful; `FALSE` otherwise."},{"pos":[139015,139022],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method fills the area indicated by <ph id=\"ph1\">`rect`</ph> with the background color of the active tab.","pos":[139026,139117],"source":"This method fills the area indicated by `rect` with the background color of the active tab."},{"content":"It is called when a <ph id=\"ph1\">`CMFCBaseTabCtrl`</ph> object processes a <ph id=\"ph2\">`WM_PAINT`</ph> message and erases a tab frame.","pos":[139118,139217],"source":" It is called when a `CMFCBaseTabCtrl` object processes a `WM_PAINT` message and erases a tab frame."},{"pos":[139227,139342],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__onfillautohidebuttonbackground\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnFillAutoHideButtonBackground","linkify":"<a name=\"cmfcvisualmanager__onfillautohidebuttonbackground\"></a>  CMFCVisualManager::OnFillAutoHideButtonBackground","source":"<a name=\"cmfcvisualmanager__onfillautohidebuttonbackground\"></a>  CMFCVisualManager::OnFillAutoHideButtonBackground"},{"content":"The framework calls this method when it fills the background of an auto-hide button.","pos":[139346,139430]},{"pos":[139568,139578],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[139582,139592],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[139596,139626]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[139633,139644],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the auto-hide button.","pos":[139648,139714]},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[139721,139735],"source":"[in] `pButton`"},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>CMFCAutoHideButton<ept id=\"p1\">](../../mfc/reference/cmfcautohidebutton-class.md)</ept> object.","pos":[139739,139831],"source":" A pointer to a [CMFCAutoHideButton](../../mfc/reference/cmfcautohidebutton-class.md) object."},{"content":"The framework fills the background for this auto-hide button.","pos":[139832,139893]},{"pos":[139903,139910],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived visual manager to customize the appearance of an auto-hide button.","pos":[139914,140014]},{"pos":[140024,140117],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__onfillbarbackground\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnFillBarBackground","linkify":"<a name=\"cmfcvisualmanager__onfillbarbackground\"></a>  CMFCVisualManager::OnFillBarBackground","source":"<a name=\"cmfcvisualmanager__onfillbarbackground\"></a>  CMFCVisualManager::OnFillBarBackground"},{"pos":[140121,140246],"content":"The framework calls this method when it fills the background of a <bpt id=\"p1\">[</bpt>CBasePane<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md)</ept> object.","source":"The framework calls this method when it fills the background of a [CBasePane](../../mfc/reference/cbasepane-class.md) object."},{"pos":[140417,140427],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[140431,140441],"source":"[in] `pDC`"},{"content":"A pointer to the device context for a control bar.","pos":[140445,140495]},{"content":"[in] <ph id=\"ph1\">`pBar`</ph>","pos":[140502,140513],"source":"[in] `pBar`"},{"content":"A pointer to a <ph id=\"ph1\">`CBasePane`</ph> object.","pos":[140517,140551],"source":" A pointer to a `CBasePane` object."},{"content":"The framework fills the background of this pane.","pos":[140552,140600]},{"content":"[in] <ph id=\"ph1\">`rectClient`</ph>","pos":[140607,140624],"source":"[in] `rectClient`"},{"content":"A rectangle that specifies the boundaries of the pane.","pos":[140628,140682]},{"content":"[in] <ph id=\"ph1\">`rectClip`</ph>","pos":[140689,140704],"source":"[in] `rectClip`"},{"content":"A rectangle that specifies the clipping area of the pane.","pos":[140708,140765]},{"content":"[in] <ph id=\"ph1\">`bNCArea`</ph>","pos":[140772,140786],"source":"[in] `bNCArea`"},{"content":"A reserved value.","pos":[140790,140807]},{"pos":[140817,140824],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation of this method fills the background of the bar with the 3d background color from the global variable <ph id=\"ph1\">`afxGlobalData`</ph>.","pos":[140828,140972],"source":"The default implementation of this method fills the background of the bar with the 3d background color from the global variable `afxGlobalData`."},{"content":"Override this method in a derived visual manager to customize the background of a pane.","pos":[140973,141060]},{"pos":[141070,141077],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates how to use the <ph id=\"ph1\">`OnFillBarBackground`</ph> in the <ph id=\"ph2\">`CMFCVisualManager`</ph> class.","pos":[141081,141186],"source":"The following example demonstrates how to use the `OnFillBarBackground` in the `CMFCVisualManager` class."},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>Outlook Demo sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[141187,141271],"source":" This code snippet is part of the [Outlook Demo sample](../../visual-cpp-samples.md)."},{"pos":[141278,141379],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_OutlookDemo#4<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cmfcvisualmanager-class_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_OutlookDemo#4](../../mfc/reference/codesnippet/cpp/cmfcvisualmanager-class_2.cpp)]"},{"pos":[141389,141484],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__onfillbuttoninterior\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnFillButtonInterior","linkify":"<a name=\"cmfcvisualmanager__onfillbuttoninterior\"></a>  CMFCVisualManager::OnFillButtonInterior","source":"<a name=\"cmfcvisualmanager__onfillbuttoninterior\"></a>  CMFCVisualManager::OnFillButtonInterior"},{"content":"The framework calls this method when it fills the background of a toolbar button.","pos":[141488,141569]},{"pos":[141745,141755],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[141759,141769],"source":"[in] `pDC`"},{"content":"A pointer to the device context of a toolbar button.","pos":[141773,141825]},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[141832,141846],"source":"[in] `pButton`"},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>CMFCToolBarButton<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept>.","pos":[141850,141933],"source":" A pointer to a [CMFCToolBarButton](../../mfc/reference/cmfctoolbarbutton-class.md)."},{"content":"The framework fills the background for this button.","pos":[141934,141985]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[141992,142003],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the toolbar button.","pos":[142007,142071]},{"content":"[in] <ph id=\"ph1\">`state`</ph>","pos":[142078,142090],"source":"[in] `state`"},{"content":"The state of the toolbar button.","pos":[142094,142126]},{"pos":[142136,142143],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation of this method uses the default color to fill the background.","pos":[142147,142235]},{"content":"Override this method in a derived visual manager to customize the background of a toolbar button.","pos":[142236,142333]},{"pos":[142340,142450],"content":"The possible states of a toolbar button are <ph id=\"ph1\">`ButtonsIsRegular`</ph>, <ph id=\"ph2\">`ButtonsIsPressed`</ph>, or <ph id=\"ph3\">`ButtonsIsHighlighted`</ph>.","source":"The possible states of a toolbar button are `ButtonsIsRegular`, `ButtonsIsPressed`, or `ButtonsIsHighlighted`."},{"pos":[142460,142559],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__onfillcaptionbarbutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnFillCaptionBarButton","linkify":"<a name=\"cmfcvisualmanager__onfillcaptionbarbutton\"></a>  CMFCVisualManager::OnFillCaptionBarButton","source":"<a name=\"cmfcvisualmanager__onfillcaptionbarbutton\"></a>  CMFCVisualManager::OnFillCaptionBarButton"},{"pos":[142918,142928],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[142932,142942],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`pBar`</ph>","pos":[142946,142957],"source":" [in] `pBar`"},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[142961,142972],"source":" [in] `rect`"},{"content":"[in] <ph id=\"ph1\">`bIsPressed`</ph>","pos":[142976,142993],"source":" [in] `bIsPressed`"},{"content":"[in] <ph id=\"ph1\">`bIsHighlighted`</ph>","pos":[142997,143018],"source":" [in] `bIsHighlighted`"},{"content":"[in] <ph id=\"ph1\">`bIsDisabled`</ph>","pos":[143022,143040],"source":" [in] `bIsDisabled`"},{"content":"[in] <ph id=\"ph1\">`bHasDropDownArrow`</ph>","pos":[143044,143068],"source":" [in] `bHasDropDownArrow`"},{"content":"[in] <ph id=\"ph1\">`bIsSysButton`</ph>","pos":[143072,143091],"source":" [in] `bIsSysButton`"},{"pos":[143101,143113],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[143123,143130],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[143140,143251],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__onfillcommandslistbackground\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnFillCommandsListBackground","linkify":"<a name=\"cmfcvisualmanager__onfillcommandslistbackground\"></a>  CMFCVisualManager::OnFillCommandsListBackground","source":"<a name=\"cmfcvisualmanager__onfillcommandslistbackground\"></a>  CMFCVisualManager::OnFillCommandsListBackground"},{"content":"The framework calls this method when it fills the background of a toolbar button that belongs to a command list.","pos":[143255,143367]},{"content":"This command list is part of the customization dialog.","pos":[143368,143422]},{"pos":[143559,143569],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[143573,143583],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[143587,143617]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[143624,143635],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the button.","pos":[143639,143695]},{"content":"[in] <ph id=\"ph1\">`bIsSelected`</ph>","pos":[143702,143720],"source":"[in] `bIsSelected`"},{"content":"A Boolean parameter that indicates whether the button is selected.","pos":[143724,143790]},{"pos":[143800,143812],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text color for the toolbar button.","pos":[143816,143854]},{"pos":[143864,143871],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For more information about the customization list, see <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnDrawOnCustomizeList<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__ondrawoncustomizelist)</ept>.","pos":[143875,144062],"source":"For more information about the customization list, see [CMFCToolBarButton::OnDrawOnCustomizeList](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__ondrawoncustomizelist)."},{"content":"The default implementation for this method fills the background based on the color scheme of the currently selected skin.","pos":[144063,144184]},{"pos":[144194,144301],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__onfillheaderctrlbackground\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnFillHeaderCtrlBackground","linkify":"<a name=\"cmfcvisualmanager__onfillheaderctrlbackground\"></a>  CMFCVisualManager::OnFillHeaderCtrlBackground","source":"<a name=\"cmfcvisualmanager__onfillheaderctrlbackground\"></a>  CMFCVisualManager::OnFillHeaderCtrlBackground"},{"content":"The framework calls this method when it fills the background of a header control.","pos":[144305,144386]},{"pos":[144514,144524],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pCtrl`</ph>","pos":[144528,144540],"source":"[in] `pCtrl`"},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>CMFCHeaderCtrl<ept id=\"p1\">](../../mfc/reference/cmfcheaderctrl-class.md)</ept> object.","pos":[144544,144628],"source":" A pointer to a [CMFCHeaderCtrl](../../mfc/reference/cmfcheaderctrl-class.md) object."},{"content":"The framework fills the background for this header control.","pos":[144629,144688]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[144695,144705],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[144709,144739]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[144746,144757],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the header control.","pos":[144761,144825]},{"pos":[144835,144842],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived visual manager to customize the appearance of a header control.","pos":[144846,144943]},{"pos":[144953,145052],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__onfillminiframecaption\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnFillMiniFrameCaption","linkify":"<a name=\"cmfcvisualmanager__onfillminiframecaption\"></a>  CMFCVisualManager::OnFillMiniFrameCaption","source":"<a name=\"cmfcvisualmanager__onfillminiframecaption\"></a>  CMFCVisualManager::OnFillMiniFrameCaption"},{"content":"The framework calls this method when it fills the caption bar of a mini frame window.","pos":[145056,145141]},{"pos":[145299,145309],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[145313,145323],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[145327,145357]},{"content":"[in] <ph id=\"ph1\">`rectCaption`</ph>","pos":[145364,145382],"source":"[in] `rectCaption`"},{"content":"A rectangle that specifies the boundaries of the caption bar.","pos":[145386,145447]},{"content":"[in] <ph id=\"ph1\">`pFrameWnd`</ph>","pos":[145454,145470],"source":"[in] `pFrameWnd`"},{"content":"A pointer to a mini frame window.","pos":[145474,145507]},{"content":"The framework draws the caption bar for this window.","pos":[145508,145560]},{"content":"[in] <ph id=\"ph1\">`bActive`</ph>","pos":[145567,145581],"source":"[in] `bActive`"},{"content":"A Boolean parameter that indicates if the window is active.","pos":[145585,145644]},{"pos":[145654,145666],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The color that is used to fill the background of the caption bar.","pos":[145670,145735]},{"pos":[145745,145752],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation for this method fills the caption bar with the current caption color for the active skin.","pos":[145756,145872]},{"pos":[145882,145983],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__onfilloutlookbarcaption\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnFillOutlookBarCaption","linkify":"<a name=\"cmfcvisualmanager__onfilloutlookbarcaption\"></a>  CMFCVisualManager::OnFillOutlookBarCaption","source":"<a name=\"cmfcvisualmanager__onfilloutlookbarcaption\"></a>  CMFCVisualManager::OnFillOutlookBarCaption"},{"content":"The framework calls this method when it fills the background of an Outlook caption bar.","pos":[145987,146074]},{"pos":[146202,146212],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[146216,146226],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[146230,146260]},{"content":"[in] <ph id=\"ph1\">`rectCaption`</ph>","pos":[146267,146285],"source":"[in] `rectCaption`"},{"content":"A rectangle that specifies the boundaries of the caption bar.","pos":[146289,146350]},{"content":"[out] <ph id=\"ph1\">`clrText`</ph>","pos":[146357,146372],"source":"[out] `clrText`"},{"content":"A reference to a <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> parameter.","pos":[146376,146474],"source":" A reference to a [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter."},{"content":"The method writes the color of text on the caption bar to this parameter.","pos":[146475,146548]},{"pos":[146558,146565],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation of this method fills the caption bar with the color for shadows based on the current skin.","pos":[146569,146686]},{"content":"Override this method in a derived visual manager to customize the color of the Outlook caption bar.","pos":[146687,146786]},{"pos":[146796,146897],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__onfilloutlookpagebutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnFillOutlookPageButton","linkify":"<a name=\"cmfcvisualmanager__onfilloutlookpagebutton\"></a>  CMFCVisualManager::OnFillOutlookPageButton","source":"<a name=\"cmfcvisualmanager__onfilloutlookpagebutton\"></a>  CMFCVisualManager::OnFillOutlookPageButton"},{"content":"The framework calls this method when it fills the interior of an Outlook page button.","pos":[146901,146986]},{"pos":[147164,147174],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[147178,147188],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[147192,147222]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[147229,147240],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the Outlook page button.","pos":[147244,147313]},{"content":"[in] <ph id=\"ph1\">`bIsHighlighted`</ph>","pos":[147320,147341],"source":"[in] `bIsHighlighted`"},{"content":"A Boolean parameter that specifies whether the button is highlighted.","pos":[147345,147414]},{"content":"[in] <ph id=\"ph1\">`bIsPressed`</ph>","pos":[147421,147438],"source":"[in] `bIsPressed`"},{"content":"A Boolean parameter that specifies whether the button is pressed.","pos":[147442,147507]},{"content":"[out] <ph id=\"ph1\">`clrText`</ph>","pos":[147514,147529],"source":"[out] `clrText`"},{"content":"A reference to a <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> parameter.","pos":[147533,147631],"source":" A reference to a [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter."},{"content":"This method stores the text color of the outlook page button in this parameter.","pos":[147632,147711]},{"pos":[147721,147728],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this function in a derived visual manager to customize the appearance of Outlook page buttons.","pos":[147732,147835]},{"pos":[147845,147954],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__onfillpopupwindowbackground\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnFillPopupWindowBackground","linkify":"<a name=\"cmfcvisualmanager__onfillpopupwindowbackground\"></a>  CMFCVisualManager::OnFillPopupWindowBackground","source":"<a name=\"cmfcvisualmanager__onfillpopupwindowbackground\"></a>  CMFCVisualManager::OnFillPopupWindowBackground"},{"content":"The framework calls this method when it fills the background of a pop-up window.","pos":[147958,148038]},{"pos":[148138,148148],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[148152,148162],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[148166,148196]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[148203,148214],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the popup window.","pos":[148218,148280]},{"pos":[148290,148297],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived visual manager to customize the appearance of pop-up windows.","pos":[148301,148396]},{"pos":[148406,148497],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__onfillribbonbutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnFillRibbonButton","linkify":"<a name=\"cmfcvisualmanager__onfillribbonbutton\"></a>  CMFCVisualManager::OnFillRibbonButton","source":"<a name=\"cmfcvisualmanager__onfillribbonbutton\"></a>  CMFCVisualManager::OnFillRibbonButton"},{"content":"The framework calls this method when it fills the interior of a ribbon button.","pos":[148501,148579]},{"pos":[148689,148699],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[148703,148713],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[148717,148747]},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[148754,148768],"source":"[in] `pButton`"},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>CMFCRibbonButton<ept id=\"p1\">](../../mfc/reference/cmfcribbonbutton-class.md)</ept> object.","pos":[148772,148860],"source":" A pointer to a [CMFCRibbonButton](../../mfc/reference/cmfcribbonbutton-class.md) object."},{"content":"The framework fills the interior of this ribbon button.","pos":[148861,148916]},{"pos":[148926,148938],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The color of text for the ribbon button specified by <ph id=\"ph1\">`pButton`</ph> if the ribbon button supports text.","pos":[148942,149040],"source":"The color of text for the ribbon button specified by `pButton` if the ribbon button supports text."},{"content":"A value of -1 if text is invalid for the ribbon button.","pos":[149041,149096]},{"pos":[149106,149113],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived visual manager to customize the appearance of ribbon buttons.","pos":[149117,149212]},{"pos":[149222,149309],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__onfillribbonedit\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnFillRibbonEdit","linkify":"<a name=\"cmfcvisualmanager__onfillribbonedit\"></a>  CMFCVisualManager::OnFillRibbonEdit","source":"<a name=\"cmfcvisualmanager__onfillribbonedit\"></a>  CMFCVisualManager::OnFillRibbonEdit"},{"pos":[149313,149425],"content":"The framework calls this method when it fills the interior of an instance of the <ph id=\"ph1\">`CMFCRibbonRichEditCtrl`</ph> class.","source":"The framework calls this method when it fills the interior of an instance of the `CMFCRibbonRichEditCtrl` class."},{"pos":[149720,149730],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[149734,149744],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[149748,149778]},{"content":"[in] <ph id=\"ph1\">`pEdit`</ph>","pos":[149785,149797],"source":"[in] `pEdit`"},{"content":"A pointer to a <ph id=\"ph1\">`CMFCRibbonRichEditCtrl`</ph> object.","pos":[149801,149848],"source":" A pointer to a `CMFCRibbonRichEditCtrl` object."},{"content":"The framework fills the interior of this edit control.","pos":[149849,149903]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[149910,149921],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the edit control.","pos":[149925,149987]},{"content":"[in] <ph id=\"ph1\">`bIsHighlighted`</ph>","pos":[149994,150015],"source":"[in] `bIsHighlighted`"},{"content":"A Boolean parameter that indicates whether the edit control is highlighted.","pos":[150019,150094]},{"content":"[in] <ph id=\"ph1\">`bIsPaneHighlighted`</ph>","pos":[150101,150126],"source":"[in] `bIsPaneHighlighted`"},{"content":"A Boolean parameter that indicates whether the parent pane is highlighted.","pos":[150130,150204]},{"content":"[in] <ph id=\"ph1\">`bIsDisabled`</ph>","pos":[150211,150229],"source":"[in] `bIsDisabled`"},{"content":"A Boolean parameter that indicates whether the edit control is unavailable.","pos":[150233,150308]},{"content":"[in] <ph id=\"ph1\">`clrText`</ph>","pos":[150315,150329],"source":"[in] `clrText`"},{"content":"A reference to the text color of the edit control.","pos":[150333,150383]},{"content":"[in] <ph id=\"ph1\">`clrSelBackground`</ph>","pos":[150390,150413],"source":"[in] `clrSelBackground`"},{"content":"A reference to the background color of the edit control when it is highlighted.","pos":[150417,150496]},{"content":"[in] <ph id=\"ph1\">`clrSelText`</ph>","pos":[150503,150520],"source":"[in] `clrSelText`"},{"content":"A reference to the color of selected text on the edit control.","pos":[150524,150586]},{"pos":[150596,150603],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[150607,150707],"content":"The <ph id=\"ph1\">`CMFCRibbonRichEditCtrl`</ph> indicated by <ph id=\"ph2\">`pEdit`</ph> can be a part of a combo box button on the ribbon.","source":"The `CMFCRibbonRichEditCtrl` indicated by `pEdit` can be a part of a combo box button on the ribbon."},{"pos":[150714,150821],"content":"Override this method in a derived visual manager to customize the appearance of a <ph id=\"ph1\">`CMFCRibbonRichEditCtrl`</ph>.","source":"Override this method in a derived visual manager to customize the appearance of a `CMFCRibbonRichEditCtrl`."},{"pos":[150831,150940],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__onfillribbonmainpanelbutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnFillRibbonMainPanelButton","linkify":"<a name=\"cmfcvisualmanager__onfillribbonmainpanelbutton\"></a>  CMFCVisualManager::OnFillRibbonMainPanelButton","source":"<a name=\"cmfcvisualmanager__onfillribbonmainpanelbutton\"></a>  CMFCVisualManager::OnFillRibbonMainPanelButton"},{"pos":[150944,151052],"content":"The framework calls this method when it fills the interior of a ribbon button located on the <bpt id=\"p1\">**</bpt>Main<ept id=\"p1\">**</ept> panel.","source":"The framework calls this method when it fills the interior of a ribbon button located on the **Main** panel."},{"pos":[151171,151181],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[151185,151195],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[151199,151229]},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[151236,151250],"source":"[in] `pButton`"},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>CMFCRibbonButton Class<ept id=\"p1\">](../../mfc/reference/cmfcribbonbutton-class.md)</ept> object.","pos":[151254,151348],"source":" A pointer to a [CMFCRibbonButton Class](../../mfc/reference/cmfcribbonbutton-class.md) object."},{"content":"The framework fills this ribbon button.","pos":[151349,151388]},{"pos":[151398,151410],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The color of text for the ribbon button specified by <ph id=\"ph1\">`pButton`</ph> if the ribbon button supports text.","pos":[151414,151512],"source":"The color of text for the ribbon button specified by `pButton` if the ribbon button supports text."},{"content":"A value of -1 if text is invalid for the ribbon button.","pos":[151513,151568]},{"pos":[151578,151585],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[151589,151706],"content":"Override this method in a derived visual manager to customize the appearance of ribbon buttons on the <bpt id=\"p1\">**</bpt>Main<ept id=\"p1\">**</ept> panel.","source":"Override this method in a derived visual manager to customize the appearance of ribbon buttons on the **Main** panel."},{"pos":[151716,151813],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__onfillribbonmenuframe\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnFillRibbonMenuFrame","linkify":"<a name=\"cmfcvisualmanager__onfillribbonmenuframe\"></a>  CMFCVisualManager::OnFillRibbonMenuFrame","source":"<a name=\"cmfcvisualmanager__onfillribbonmenuframe\"></a>  CMFCVisualManager::OnFillRibbonMenuFrame"},{"content":"The framework calls this method when it fills the menu frame of the ribbon panel.","pos":[151817,151898]},{"pos":[152027,152037],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[152041,152051],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[152055,152085]},{"content":"[in] <ph id=\"ph1\">`pPanel`</ph>","pos":[152092,152105],"source":"[in] `pPanel`"},{"content":"A pointer to an instance of the <bpt id=\"p1\">[</bpt>CMFCRibbonMainPanel Class<ept id=\"p1\">](../../mfc/reference/cmfcribbonmainpanel-class.md)</ept>.","pos":[152109,152219],"source":" A pointer to an instance of the [CMFCRibbonMainPanel Class](../../mfc/reference/cmfcribbonmainpanel-class.md)."},{"content":"The framework fills the menu frame for this ribbon panel.","pos":[152220,152277]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[152284,152295],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the menu frame.","pos":[152299,152359]},{"pos":[152369,152376],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[152380,152503],"content":"Override this method in a derived visual manager to customize the appearance of the menu bar for the <ph id=\"ph1\">`CMFCRibbonMainPanel`</ph>.","source":"Override this method in a derived visual manager to customize the appearance of the menu bar for the `CMFCRibbonMainPanel`."},{"pos":[152513,152638],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__onfillribbonquickaccesstoolbarpopup\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnFillRibbonQuickAccessToolBarPopup","linkify":"<a name=\"cmfcvisualmanager__onfillribbonquickaccesstoolbarpopup\"></a>  CMFCVisualManager::OnFillRibbonQuickAccessToolBarPopup","source":"<a name=\"cmfcvisualmanager__onfillribbonquickaccesstoolbarpopup\"></a>  CMFCVisualManager::OnFillRibbonQuickAccessToolBarPopup"},{"pos":[152889,152899],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[152903,152913],"source":"[in] `pDC`"},{"content":"[in] <ph id=\"ph1\">`pMenuBar`</ph>","pos":[152917,152932],"source":" [in] `pMenuBar`"},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[152936,152947],"source":" [in] `rect`"},{"pos":[152957,152964],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[152974,153077],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__onfillsplitterbackground\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnFillSplitterBackground","linkify":"<a name=\"cmfcvisualmanager__onfillsplitterbackground\"></a>  CMFCVisualManager::OnFillSplitterBackground","source":"<a name=\"cmfcvisualmanager__onfillsplitterbackground\"></a>  CMFCVisualManager::OnFillSplitterBackground"},{"content":"The framework calls this method when it fills the background of a splitter window.","pos":[153081,153163]},{"pos":[153296,153306],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[153310,153320],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[153324,153354]},{"content":"[in] <ph id=\"ph1\">`pSplitterWnd`</ph>","pos":[153361,153380],"source":"[in] `pSplitterWnd`"},{"content":"A pointer to an instance of the <bpt id=\"p1\">[</bpt>CSplitterWndEx Class<ept id=\"p1\">](csplitterwndex-class.md)</ept>.","pos":[153384,153464],"source":" A pointer to an instance of the [CSplitterWndEx Class](csplitterwndex-class.md)."},{"content":"The framework fills the background for this splitter window.","pos":[153465,153525]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[153532,153543],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the splitter window.","pos":[153547,153612]},{"pos":[153622,153629],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived visual manager to customize the appearance of a splitter window.","pos":[153633,153731]},{"pos":[153741,153814],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__onfilltab\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnFillTab","linkify":"<a name=\"cmfcvisualmanager__onfilltab\"></a>  CMFCVisualManager::OnFillTab","source":"<a name=\"cmfcvisualmanager__onfilltab\"></a>  CMFCVisualManager::OnFillTab"},{"content":"The framework calls this method when it fills the background of a tab window.","pos":[153818,153895]},{"pos":[154080,154090],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[154094,154104],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[154108,154138]},{"content":"[in] <ph id=\"ph1\">`rectFill`</ph>","pos":[154145,154160],"source":"[in] `rectFill`"},{"content":"A rectangle that specifies the boundaries for the tab window.","pos":[154164,154225]},{"content":"[in] <ph id=\"ph1\">`pbrFill`</ph>","pos":[154232,154246],"source":"[in] `pbrFill`"},{"content":"A pointer to a brush.","pos":[154250,154271]},{"content":"The framework uses this brush to fill the tab window.","pos":[154272,154325]},{"content":"[in] <ph id=\"ph1\">`iTab`</ph>","pos":[154332,154343],"source":"[in] `iTab`"},{"content":"The zero-based tab index of a tab for which the framework fills the background.","pos":[154347,154426]},{"content":"[in] <ph id=\"ph1\">`bIsActive`</ph>","pos":[154433,154449],"source":"[in] `bIsActive`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> if the tab is active; otherwise <ph id=\"ph2\">`FALSE`</ph>.","pos":[154452,154500],"source":" `TRUE` if the tab is active; otherwise `FALSE`."},{"content":"[in] <ph id=\"ph1\">`pTabWnd`</ph>","pos":[154507,154521],"source":"[in] `pTabWnd`"},{"content":"A pointer to the parent tab control.","pos":[154525,154561]},{"pos":[154571,154578],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived visual manager to customize the appearance of tabs.","pos":[154582,154667]},{"pos":[154677,154780],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__onfilltasksgroupinterior\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnFillTasksGroupInterior","linkify":"<a name=\"cmfcvisualmanager__onfilltasksgroupinterior\"></a>  CMFCVisualManager::OnFillTasksGroupInterior","source":"<a name=\"cmfcvisualmanager__onfilltasksgroupinterior\"></a>  CMFCVisualManager::OnFillTasksGroupInterior"},{"pos":[154784,154933],"content":"The framework calls this method when it fills the interior of a <bpt id=\"p1\">[</bpt>CMFCTasksPaneTaskGroup<ept id=\"p1\">](../../mfc/reference/cmfctaskspanetaskgroup-class.md)</ept> object.","source":"The framework calls this method when it fills the interior of a [CMFCTasksPaneTaskGroup](../../mfc/reference/cmfctaskspanetaskgroup-class.md) object."},{"pos":[155059,155069],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[155073,155083],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[155087,155117]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[155124,155135],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the task group.","pos":[155139,155199]},{"content":"[in] <ph id=\"ph1\">`bSpecial`</ph>","pos":[155206,155221],"source":"[in] `bSpecial`"},{"content":"A Boolean that indicates if the interior is filled with a special color.","pos":[155225,155297]},{"pos":[155307,155314],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived visual manager to customize the appearance of a task group.","pos":[155318,155411]},{"pos":[155421,155526],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__onfilltaskspanebackground\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnFillTasksPaneBackground","linkify":"<a name=\"cmfcvisualmanager__onfilltaskspanebackground\"></a>  CMFCVisualManager::OnFillTasksPaneBackground","source":"<a name=\"cmfcvisualmanager__onfilltaskspanebackground\"></a>  CMFCVisualManager::OnFillTasksPaneBackground"},{"pos":[155530,155664],"content":"The framework calls this method when it fills the background of a <bpt id=\"p1\">[</bpt>CMFCTasksPane<ept id=\"p1\">](../../mfc/reference/cmfctaskspane-class.md)</ept> control.","source":"The framework calls this method when it fills the background of a [CMFCTasksPane](../../mfc/reference/cmfctaskspane-class.md) control."},{"pos":[155770,155780],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[155784,155794],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[155798,155828]},{"content":"[in] <ph id=\"ph1\">`rectWorkArea`</ph>","pos":[155835,155854],"source":"[in] `rectWorkArea`"},{"content":"A rectangle that specifies the boundaries of the task pane.","pos":[155858,155917]},{"pos":[155927,155934],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[155938,156043],"content":"Override this method in a derived visual manager to customize the appearance of a <ph id=\"ph1\">`CMFCTasksPane`</ph> object.","source":"Override this method in a derived visual manager to customize the appearance of a `CMFCTasksPane` object."},{"pos":[156053,156146],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__onhighlightmenuitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnHighlightMenuItem","linkify":"<a name=\"cmfcvisualmanager__onhighlightmenuitem\"></a>  CMFCVisualManager::OnHighlightMenuItem","source":"<a name=\"cmfcvisualmanager__onhighlightmenuitem\"></a>  CMFCVisualManager::OnHighlightMenuItem"},{"content":"The framework calls this method when it draws a highlighted menu item.","pos":[156150,156220]},{"pos":[156375,156385],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[156389,156399],"source":"[in] `pDC`"},{"content":"A pointer to the device context for a menu.","pos":[156403,156446]},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[156453,156467],"source":"[in] `pButton`"},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton<ept id=\"p1\">](../../mfc/reference/cmfctoolbarmenubutton-class.md)</ept> object to display.","pos":[156471,156580],"source":" A pointer to a [CMFCToolBarMenuButton](../../mfc/reference/cmfctoolbarmenubutton-class.md) object to display."},{"content":"The default implementation does not use this parameter.","pos":[156581,156636]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[156643,156654],"source":"[in] `rect`"},{"content":"A rectangle that specifies the boundaries of the menu item.","pos":[156658,156717]},{"content":"[in] <ph id=\"ph1\">`clrText`</ph>","pos":[156724,156738],"source":"[in] `clrText`"},{"content":"The current text color of highlighted menu items.","pos":[156742,156791]},{"content":"The default implementation does not use this parameter.","pos":[156792,156847]},{"pos":[156857,156864],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation of this method does not use the parameters <ph id=\"ph1\">`pButton`</ph> or <ph id=\"ph2\">`clrText`</ph>.","pos":[156868,156961],"source":"The default implementation of this method does not use the parameters `pButton` or `clrText`."},{"content":"It fills the rectangle specified by <ph id=\"ph1\">`rect`</ph> with the standard background color.","pos":[156962,157040],"source":" It fills the rectangle specified by `rect` with the standard background color."},{"content":"Override this method in a derived visual manager to customize the appearance of highlighted menu items.","pos":[157047,157150]},{"content":"Use the <ph id=\"ph1\">`clrText`</ph> parameter to modify the text color of a highlighted menu item.","pos":[157151,157231],"source":" Use the `clrText` parameter to modify the text color of a highlighted menu item."},{"pos":[157241,157356],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__onhighlightrarelyusedmenuitems\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnHighlightRarelyUsedMenuItems","linkify":"<a name=\"cmfcvisualmanager__onhighlightrarelyusedmenuitems\"></a>  CMFCVisualManager::OnHighlightRarelyUsedMenuItems","source":"<a name=\"cmfcvisualmanager__onhighlightrarelyusedmenuitems\"></a>  CMFCVisualManager::OnHighlightRarelyUsedMenuItems"},{"content":"The framework calls this method when it draws a highlighted menu command.","pos":[157360,157433]},{"pos":[157546,157556],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[157560,157570],"source":"[in] `pDC`"},{"content":"A pointer to a device context.","pos":[157574,157604]},{"content":"[in] <ph id=\"ph1\">`rectRarelyUsed`</ph>","pos":[157611,157632],"source":"[in] `rectRarelyUsed`"},{"content":"A rectangle that specifies the boundaries of the highlighted command.","pos":[157636,157705]},{"pos":[157715,157722],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived visual manager to customize the appearance of highlighted menu commands.","pos":[157726,157832]},{"pos":[157842,157921],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__onncactivate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnNcActivate","linkify":"<a name=\"cmfcvisualmanager__onncactivate\"></a>  CMFCVisualManager::OnNcActivate","source":"<a name=\"cmfcvisualmanager__onncactivate\"></a>  CMFCVisualManager::OnNcActivate"},{"pos":[158113,158123],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pWnd`</ph>","pos":[158127,158138],"source":"[in] `pWnd`"},{"content":"[in] <ph id=\"ph1\">`bActive`</ph>","pos":[158142,158156],"source":" [in] `bActive`"},{"pos":[158166,158178],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[158188,158195],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[158205,158278],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__onncpaint\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnNcPaint","linkify":"<a name=\"cmfcvisualmanager__onncpaint\"></a>  CMFCVisualManager::OnNcPaint","source":"<a name=\"cmfcvisualmanager__onncpaint\"></a>  CMFCVisualManager::OnNcPaint"},{"content":"The framework calls this method when it draws the non-client area.","pos":[158282,158348]},{"pos":[158474,158484],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pWnd`</ph>","pos":[158488,158499],"source":"[in] `pWnd`"},{"content":"A pointer to the window whose non-client area the framework draws.","pos":[158503,158569]},{"content":"[in] <ph id=\"ph1\">`lstSysButtons`</ph>","pos":[158576,158596],"source":"[in] `lstSysButtons`"},{"content":"A list of system buttons.","pos":[158600,158625]},{"content":"These are also known as caption buttons.","pos":[158626,158666]},{"content":"[in] <ph id=\"ph1\">`rectRedraw`</ph>","pos":[158673,158690],"source":"[in] `rectRedraw`"},{"content":"A rectangle that specifies the boundaries of the non-client area.","pos":[158694,158759]},{"pos":[158769,158781],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reserved value.","pos":[158785,158802]},{"content":"The default implementation returns <ph id=\"ph1\">`FALSE`</ph>.","pos":[158803,158846],"source":" The default implementation returns `FALSE`."},{"pos":[158856,158863],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived visual manager to customize the appearance of the window frame and caption buttons.","pos":[158867,158984]},{"pos":[158994,159083],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__onsetwindowregion\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnSetWindowRegion","linkify":"<a name=\"cmfcvisualmanager__onsetwindowregion\"></a>  CMFCVisualManager::OnSetWindowRegion","source":"<a name=\"cmfcvisualmanager__onsetwindowregion\"></a>  CMFCVisualManager::OnSetWindowRegion"},{"content":"The framework calls this method after it sets a region that contains frames and pop-up menus.","pos":[159087,159180]},{"pos":[159278,159288],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pWnd`</ph>","pos":[159292,159303],"source":"[in] `pWnd`"},{"content":"A pointer to the window with the region that changed.","pos":[159307,159360]},{"content":"[in] <ph id=\"ph1\">`sizeWindow`</ph>","pos":[159367,159384],"source":"[in] `sizeWindow`"},{"content":"The size of the window.","pos":[159388,159411]},{"pos":[159421,159433],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[159437,159491],"content":"<ph id=\"ph1\">`TRUE`</ph> if the method is successful; <ph id=\"ph2\">`FALSE`</ph> otherwise.","source":"`TRUE` if the method is successful; `FALSE` otherwise."},{"pos":[159501,159508],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework calls this method to notify the visual manager that a region has been set for frames and pop-up menus.","pos":[159512,159628]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CWindow::SetWindowRgn<ept id=\"p1\">](../../atl/reference/cwindow-class.md#cwindow__setwindowrgn)</ept>.","pos":[159629,159739],"source":" For more information, see [CWindow::SetWindowRgn](../../atl/reference/cwindow-class.md#cwindow__setwindowrgn)."},{"pos":[159749,159844],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__onupdatesystemcolors\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::OnUpdateSystemColors","linkify":"<a name=\"cmfcvisualmanager__onupdatesystemcolors\"></a>  CMFCVisualManager::OnUpdateSystemColors","source":"<a name=\"cmfcvisualmanager__onupdatesystemcolors\"></a>  CMFCVisualManager::OnUpdateSystemColors"},{"content":"The framework calls this function when it changes the system colors.","pos":[159848,159916]},{"pos":[159978,159985],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework calls this method as a part of processing the <ph id=\"ph1\">`WM_SYSCOLORCHANGE`</ph> message.","pos":[159989,160077],"source":"The framework calls this method as a part of processing the `WM_SYSCOLORCHANGE` message."},{"content":"The default implementation does nothing.","pos":[160078,160118]},{"content":"Override this method in a derived visual manager if you want to execute custom code when the colors change in your application.","pos":[160119,160246]},{"pos":[160256,160329],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__redrawall\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::RedrawAll","linkify":"<a name=\"cmfcvisualmanager__redrawall\"></a>  CMFCVisualManager::RedrawAll","source":"<a name=\"cmfcvisualmanager__redrawall\"></a>  CMFCVisualManager::RedrawAll"},{"content":"Immediately redraws all the control bars in the application.","pos":[160333,160393]},{"pos":[160443,160546],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__ribboncategorycolortorgb\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::RibbonCategoryColorToRGB","linkify":"<a name=\"cmfcvisualmanager__ribboncategorycolortorgb\"></a>  CMFCVisualManager::RibbonCategoryColorToRGB","source":"<a name=\"cmfcvisualmanager__ribboncategorycolortorgb\"></a>  CMFCVisualManager::RibbonCategoryColorToRGB"},{"pos":[160748,160758],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[160762,160774],"content":"[in] <ph id=\"ph1\">`color`</ph>","source":"[in] `color`"},{"pos":[160784,160796],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[160806,160813],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[160823,160912],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__setdefaultmanager\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::SetDefaultManager","linkify":"<a name=\"cmfcvisualmanager__setdefaultmanager\"></a>  CMFCVisualManager::SetDefaultManager","source":"<a name=\"cmfcvisualmanager__setdefaultmanager\"></a>  CMFCVisualManager::SetDefaultManager"},{"content":"Sets the default manager.","pos":[160916,160941]},{"pos":[161018,161028],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pRTI`</ph>","pos":[161032,161043],"source":"[in] `pRTI`"},{"content":"A pointer to the runtime information for a visual manager.","pos":[161047,161105]},{"pos":[161115,161122],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the <bpt id=\"p1\">[</bpt>CMFCVisualManager Class<ept id=\"p1\">](../../mfc/reference/cmfcvisualmanager-class.md)</ept> and any derived visual managers to customize the appearance of your application.","pos":[161126,161288],"source":"Use the [CMFCVisualManager Class](../../mfc/reference/cmfcvisualmanager-class.md) and any derived visual managers to customize the appearance of your application."},{"content":"After you set the default visual manager, this method redraws your application by using the new visual manager.","pos":[161289,161400]},{"content":"For more information about how to use visual managers, see <bpt id=\"p1\">[</bpt>Visualization Manager<ept id=\"p1\">](../../mfc/visualization-manager.md)</ept>.","pos":[161401,161520],"source":" For more information about how to use visual managers, see [Visualization Manager](../../mfc/visualization-manager.md)."},{"content":"Use this method to change the visual manager that your application uses.","pos":[161527,161599]},{"pos":[161609,161708],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__setembossdisabledimage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::SetEmbossDisabledImage","linkify":"<a name=\"cmfcvisualmanager__setembossdisabledimage\"></a>  CMFCVisualManager::SetEmbossDisabledImage","source":"<a name=\"cmfcvisualmanager__setembossdisabledimage\"></a>  CMFCVisualManager::SetEmbossDisabledImage"},{"content":"Enables or disables the embossed mode for disabled toolbar images.","pos":[161712,161778]},{"pos":[161854,161864],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bEmboss`</ph>","pos":[161868,161882],"source":"[in] `bEmboss`"},{"content":"A Boolean parameter that indicates whether to enable embossed mode for disabled toolbar images.","pos":[161886,161981]},{"pos":[161991,161998],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[162002,162151],"content":"Use the function <bpt id=\"p1\">[</bpt>CMFCVisualManager::IsEmbossDisabledImage<ept id=\"p1\">](#cmfcvisualmanager__isembossdisabledimage)</ept> to determine whether embossed mode is enabled.","source":"Use the function [CMFCVisualManager::IsEmbossDisabledImage](#cmfcvisualmanager__isembossdisabledimage) to determine whether embossed mode is enabled."},{"pos":[162161,162256],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__setfadeinactiveimage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::SetFadeInactiveImage","linkify":"<a name=\"cmfcvisualmanager__setfadeinactiveimage\"></a>  CMFCVisualManager::SetFadeInactiveImage","source":"<a name=\"cmfcvisualmanager__setfadeinactiveimage\"></a>  CMFCVisualManager::SetFadeInactiveImage"},{"content":"Enables or disables the lighting effect for inactive images on a menu or toolbar.","pos":[162260,162341]},{"pos":[162412,162422],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bFade`</ph>","pos":[162426,162438],"source":"[in] `bFade`"},{"content":"A Boolean parameter that specifies whether to enable the lighting effect.","pos":[162442,162515]},{"pos":[162525,162532],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This feature controls whether inactive images appear faded on a menu or toolbar.","pos":[162536,162616]},{"content":"Use the method <bpt id=\"p1\">[</bpt>CMFCVisualManager::IsFadeInactiveImage<ept id=\"p1\">](#cmfcvisualmanager__isfadeinactiveimage)</ept> to determine whether this feature is enabled.","pos":[162617,162759],"source":" Use the method [CMFCVisualManager::IsFadeInactiveImage](#cmfcvisualmanager__isfadeinactiveimage) to determine whether this feature is enabled."},{"pos":[162769,162854],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__setmenuflatlook\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::SetMenuFlatLook","linkify":"<a name=\"cmfcvisualmanager__setmenuflatlook\"></a>  CMFCVisualManager::SetMenuFlatLook","source":"<a name=\"cmfcvisualmanager__setmenuflatlook\"></a>  CMFCVisualManager::SetMenuFlatLook"},{"content":"Sets a flag that indicates whether the menu buttons appear flat.","pos":[162858,162922]},{"content":"Otherwise, they appear three-dimensional.","pos":[162923,162964]},{"pos":[163038,163048],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bMenuFlatLook`</ph>","pos":[163052,163072],"source":"[in] `bMenuFlatLook`"},{"content":"A Boolean parameter that indicates whether the menu buttons appear flat.","pos":[163076,163148]},{"pos":[163158,163165],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, this feature is not enabled.","pos":[163169,163209]},{"pos":[163219,163310],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__setmenushadowdepth\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::SetMenuShadowDepth","linkify":"<a name=\"cmfcvisualmanager__setmenushadowdepth\"></a>  CMFCVisualManager::SetMenuShadowDepth","source":"<a name=\"cmfcvisualmanager__setmenushadowdepth\"></a>  CMFCVisualManager::SetMenuShadowDepth"},{"content":"Sets the width and height of the menu shadow.","pos":[163314,163359]},{"pos":[163421,163431],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nDepth`</ph>","pos":[163435,163448],"source":"[in] `nDepth`"},{"content":"An integer that specifies the depth of the menu shadow in pixels.","pos":[163452,163517]},{"pos":[163527,163534],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height and width of the menu shadow must be identical.","pos":[163538,163596]},{"content":"The default value is 7 pixels.","pos":[163597,163627]},{"pos":[163637,163742],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcvisualmanager__setshadowhighlightedimage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCVisualManager::SetShadowHighlightedImage","linkify":"<a name=\"cmfcvisualmanager__setshadowhighlightedimage\"></a>  CMFCVisualManager::SetShadowHighlightedImage","source":"<a name=\"cmfcvisualmanager__setshadowhighlightedimage\"></a>  CMFCVisualManager::SetShadowHighlightedImage"},{"pos":[163746,163893],"content":"Sets a flag that indicates whether the <bpt id=\"p1\">[</bpt>CMFCVisualManager<ept id=\"p1\">](../../mfc/reference/cmfcvisualmanager-class.md)</ept> displays shadows for highlighted images.","source":"Sets a flag that indicates whether the [CMFCVisualManager](../../mfc/reference/cmfcvisualmanager-class.md) displays shadows for highlighted images."},{"pos":[163971,163981],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bShadow`</ph>","pos":[163985,163999],"source":"[in] `bShadow`"},{"content":"A Boolean parameter that indicates whether the visual manager displays a shadow under highlighted images.","pos":[164003,164108]},{"pos":[164118,164125],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, this feature is disabled.","pos":[164129,164166]},{"pos":[164175,164183],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[164187,164235],"source":"[Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Classes<ept id=\"p1\">](../../mfc/reference/mfc-classes.md)</ept><ph id=\"ph1\"> </ph>","pos":[164238,164285],"source":" [Classes](../../mfc/reference/mfc-classes.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CMFCVisualManager::GetInstance<ept id=\"p1\">](#cmfcvisualmanager__getinstance)</ept><ph id=\"ph1\"> </ph>","pos":[164288,164355],"source":" [CMFCVisualManager::GetInstance](#cmfcvisualmanager__getinstance) "},{"content":"<bpt id=\"p1\"> [</bpt>Visualization Manager<ept id=\"p1\">](../../mfc/visualization-manager.md)</ept>","pos":[164358,164418],"source":" [Visualization Manager](../../mfc/visualization-manager.md)"}],"content":"---\ntitle: \"CMFCVisualManager Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CMFCVisualManager\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CMFCVisualManager class\"\nms.assetid: beed80f7-36a2-4d64-9f09-e807cfefc3fe\ncaps.latest.revision: 58\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMFCVisualManager Class\nProvides support for changing the appearance of your application at a global level. The `CMFCVisualManager` class works together with a class that provides instructions to draw the GUI controls of your application using a consistent style. These other classes are referred to as visual managers and they inherit from `CMFCBaseVisualManager`.  \n  \n## Syntax  \n  \n```  \nclass CMFCVisualManager : public CMFCBaseVisualManager  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`CMFCVisualManager::CMFCVisualManager`|Default constructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCVisualManager::AdjustFrames](#cmfcvisualmanager__adjustframes)||  \n|[CMFCVisualManager::AdjustToolbars](#cmfcvisualmanager__adjusttoolbars)||  \n|[CMFCVisualManager::AlwaysHighlight3DTabs](#cmfcvisualmanager__alwayshighlight3dtabs)|Called by the framework to determine whether 3D tabs should always be drawn by using a highlight color.|  \n|[CMFCVisualManager::DestroyInstance](#cmfcvisualmanager__destroyinstance)||  \n|[CMFCVisualManager::DoDrawHeaderSortArrow](#cmfcvisualmanager__dodrawheadersortarrow)||  \n|[CMFCVisualManager::DrawComboDropButtonWinXP](#cmfcvisualmanager__drawcombodropbuttonwinxp)||  \n|[CMFCVisualManager::DrawPushButtonWinXP](#cmfcvisualmanager__drawpushbuttonwinxp)||  \n|[CMFCVisualManager::DrawTextOnGlass](#cmfcvisualmanager__drawtextonglass)||  \n|[CMFCVisualManager::GetAutoHideButtonTextColor](#cmfcvisualmanager__getautohidebuttontextcolor)|Called by the framework to retrieve the text color for an auto-hide button.|  \n|[CMFCVisualManager::GetButtonExtraBorder](#cmfcvisualmanager__getbuttonextraborder)|Called by the framework to retrieve the increased button size that the current visual manager requires to draw a button.|  \n|[CMFCVisualManager::GetCaptionBarTextColor](#cmfcvisualmanager__getcaptionbartextcolor)|Called by the framework to retrieve the text color of a caption bar.|  \n|[CMFCVisualManager::GetDockingTabsBordersSize](#cmfcvisualmanager__getdockingtabsborderssize)|Called by the framework to retrieve the size for the border of a docked tabbed bar.|  \n|[CMFCVisualManager::GetHighlightedMenuItemTextColor](#cmfcvisualmanager__gethighlightedmenuitemtextcolor)||  \n|[CMFCVisualManager::GetInstance](#cmfcvisualmanager__getinstance)|Returns a pointer to the `CMFCVisualManager` object.|  \n|[CMFCVisualManager::GetMDITabsBordersSize](#cmfcvisualmanager__getmditabsborderssize)|Called by the framework to retrieve the border size of the MDITabs window.|  \n|[CMFCVisualManager::GetMenuItemTextColor](#cmfcvisualmanager__getmenuitemtextcolor)||  \n|[CMFCVisualManager::GetMenuShadowDepth](#cmfcvisualmanager__getmenushadowdepth)|Returns a value that determines the width and height of a menu shadow.|  \n|[CMFCVisualManager::GetNcBtnSize](#cmfcvisualmanager__getncbtnsize)|Called by the framework to determine the size of the system buttons based on the current visual manager. The system buttons are the buttons in the caption of the main frame that map to the commands **Close**, **Minimize**, **Maximize**, and **Restore**.|  \n|[CMFCVisualManager::GetPopupMenuBorderSize](#cmfcvisualmanager__getpopupmenubordersize)|Called by the framework to retrieve the size of the border for a popup menu.|  \n|[CMFCVisualManager::GetPropertyGridGroupColor](#cmfcvisualmanager__getpropertygridgroupcolor)|Called by the framework to retrieve the background color of a property list.|  \n|[CMFCVisualManager::GetPropertyGridGroupTextColor](#cmfcvisualmanager__getpropertygridgrouptextcolor)|Called by the framework to retrieve the text color of a property list.|  \n|[CMFCVisualManager::GetRibbonHyperlinkTextColor](#cmfcvisualmanager__getribbonhyperlinktextcolor)||  \n|[CMFCVisualManager::GetRibbonPopupBorderSize](#cmfcvisualmanager__getribbonpopupbordersize)||  \n|[CMFCVisualManager::GetRibbonQuickAccessToolBarTextColor](#cmfcvisualmanager__getribbonquickaccesstoolbartextcolor)||  \n|[CMFCVisualManager::GetRibbonSliderColors](#cmfcvisualmanager__getribbonslidercolors)||  \n|[CMFCVisualManager::GetShowAllMenuItemsHeight](#cmfcvisualmanager__getshowallmenuitemsheight)||  \n|[CMFCVisualManager::GetSmartDockingBaseGuideColors](#cmfcvisualmanager__getsmartdockingbaseguidecolors)||  \n|[CMFCVisualManager::GetSmartDockingHighlightToneColor](#cmfcvisualmanager__getsmartdockinghighlighttonecolor)||  \n|[CMFCVisualManager::GetSmartDockingTheme](#cmfcvisualmanager__getsmartdockingtheme)|Returns a theme used to display smart docking markers.|  \n|[CMFCVisualManager::GetStatusBarPaneTextColor](#cmfcvisualmanager__getstatusbarpanetextcolor)||  \n|[CMFCVisualManager::GetTabFrameColors](#cmfcvisualmanager__gettabframecolors)|Called by the framework to retrieve the set of colors to use when it draws a tab frame.|  \n|[CMFCVisualManager::GetTabTextColor](#cmfcvisualmanager__gettabtextcolor)||  \n|[CMFCVisualManager::GetToolbarButtonTextColor](#cmfcvisualmanager__gettoolbarbuttontextcolor)|Called by the framework to retrieve the current color of the text on the toolbar button. This color varies based on the current visual manager and the button state.|  \n|[CMFCVisualManager::GetToolbarDisabledTextColor](#cmfcvisualmanager__gettoolbardisabledtextcolor)|Called by the framework to determine the color of the text that is displayed on disabled toolbar elements.|  \n|[CMFCVisualManager::GetToolbarHighlightColor](#cmfcvisualmanager__gettoolbarhighlightcolor)||  \n|[CMFCVisualManager::GetToolTipInfo](#cmfcvisualmanager__gettooltipinfo)||  \n|[CMFCVisualManager::HasOverlappedAutoHideButtons](#cmfcvisualmanager__hasoverlappedautohidebuttons)|Specifies whether auto-hide buttons overlap.|  \n|[CMFCVisualManager::IsDockingTabHasBorder](#cmfcvisualmanager__isdockingtabhasborder)|Specifies whether the current visual manager draws a border around tabbed docking bars.|  \n|[CMFCVisualManager::IsEmbossDisabledImage](#cmfcvisualmanager__isembossdisabledimage)|Specifies whether disabled images should be embossed.|  \n|[CMFCVisualManager::IsFadeInactiveImage](#cmfcvisualmanager__isfadeinactiveimage)|Called by the framework to determine whether inactive images on a toolbar or menu appear dimmed.|  \n|[CMFCVisualManager::IsMenuFlatLook](#cmfcvisualmanager__ismenuflatlook)|Specifies whether menu buttons have a flattened appearance.|  \n|[CMFCVisualManager::IsOfficeXPStyleMenus](#cmfcvisualmanager__isofficexpstylemenus)|Specifies whether the visual manager implements Office XP-style menus.|  \n|[CMFCVisualManager::IsOwnerDrawCaption](#cmfcvisualmanager__isownerdrawcaption)|Specifies whether the current visual manager implements owner-drawn captions of a frame window.|  \n|[CMFCVisualManager::IsShadowHighlightedImage](#cmfcvisualmanager__isshadowhighlightedimage)|Specifies whether a highlighted image has a shadow.|  \n|[CMFCVisualManager::OnDrawAutoHideButtonBorder](#cmfcvisualmanager__ondrawautohidebuttonborder)|Called by the framework when it draws the border for an auto-hide button.|  \n|[CMFCVisualManager::OnDrawBarGripper](#cmfcvisualmanager__ondrawbargripper)|Called by the framework when it draws the gripper of a control bar. The user must click the gripper in order to move the control bar.|  \n|[CMFCVisualManager::OnDrawBrowseButton](#cmfcvisualmanager__ondrawbrowsebutton)|Called by the framework when it draws a browse button that belongs to an edit control ( [CMFCEditBrowseCtrl Class](../../mfc/reference/cmfceditbrowsectrl-class.md)).|  \n|[CMFCVisualManager::OnDrawButtonBorder](#cmfcvisualmanager__ondrawbuttonborder)|Called by the framework when it draws the border of a toolbar button.|  \n|[CMFCVisualManager::OnDrawButtonSeparator](#cmfcvisualmanager__ondrawbuttonseparator)||  \n|[CMFCVisualManager::OnDrawCaptionBarBorder](#cmfcvisualmanager__ondrawcaptionbarborder)|Called by the framework when it draws the caption bar border.|  \n|[CMFCVisualManager::OnDrawCaptionBarButtonBorder](#cmfcvisualmanager__ondrawcaptionbarbuttonborder)||  \n|[CMFCVisualManager::OnDrawCaptionBarInfoArea](#cmfcvisualmanager__ondrawcaptionbarinfoarea)||  \n|[CMFCVisualManager::OnDrawCaptionButton](#cmfcvisualmanager__ondrawcaptionbutton)|Called by the framework when it draws a caption button.|  \n|[CMFCVisualManager::OnDrawCheckBox](#cmfcvisualmanager__ondrawcheckbox)||  \n|[CMFCVisualManager::OnDrawCheckBoxEx](#cmfcvisualmanager__ondrawcheckboxex)||  \n|[CMFCVisualManager::OnDrawComboBorder](#cmfcvisualmanager__ondrawcomboborder)|Called by the framework when it draws the border of a combo box button.|  \n|[CMFCVisualManager::OnDrawComboDropButton](#cmfcvisualmanager__ondrawcombodropbutton)|Called by the framework when it draws a combo box drop button.|  \n|[CMFCVisualManager::OnDrawControlBorder](#cmfcvisualmanager__ondrawcontrolborder)||  \n|[CMFCVisualManager::OnDrawDefaultRibbonImage](#cmfcvisualmanager__ondrawdefaultribbonimage)|Called by the framework when it draws the default ribbon image.|  \n|[CMFCVisualManager::OnDrawEditBorder](#cmfcvisualmanager__ondraweditborder)|Called by the framework when it draws a border around a [CMFCToolBarEditBoxButton](../../mfc/reference/cmfctoolbareditboxbutton-class.md) object.|  \n|[CMFCVisualManager::OnDrawExpandingBox](#cmfcvisualmanager__ondrawexpandingbox)||  \n|[CMFCVisualManager::OnDrawFloatingToolbarBorder](#cmfcvisualmanager__ondrawfloatingtoolbarborder)|Called by the framework when it draws the borders of a floating toolbar. The floating toolbar is a toolbar that appears as a mini-frame window.|  \n|[CMFCVisualManager::OnDrawHeaderCtrlBorder](#cmfcvisualmanager__ondrawheaderctrlborder)|Called by the framework when it draws the border that contains the header control.|  \n|[CMFCVisualManager::OnDrawHeaderCtrlSortArrow](#cmfcvisualmanager__ondrawheaderctrlsortarrow)|Called by the framework when it draws the header control sort arrow.|  \n|[CMFCVisualManager::OnDrawMenuArrowOnCustomizeList](#cmfcvisualmanager__ondrawmenuarrowoncustomizelist)||  \n|[CMFCVisualManager::OnDrawMenuBorder](#cmfcvisualmanager__ondrawmenuborder)|Called by the framework when it draws a menu border.|  \n|[CMFCVisualManager::OnDrawMenuCheck](#cmfcvisualmanager__ondrawmenucheck)||  \n|[CMFCVisualManager::OnDrawMenuItemButton](#cmfcvisualmanager__ondrawmenuitembutton)||  \n|[CMFCVisualManager::OnDrawMenuLabel](#cmfcvisualmanager__ondrawmenulabel)||  \n|[CMFCVisualManager::OnDrawMenuResizeBar](#cmfcvisualmanager__ondrawmenuresizebar)||  \n|[CMFCVisualManager::OnDrawMenuScrollButton](#cmfcvisualmanager__ondrawmenuscrollbutton)|Called by the framework when it draws a menu scroll button.|  \n|[CMFCVisualManager::OnDrawMenuShadow](#cmfcvisualmanager__ondrawmenushadow)||  \n|[CMFCVisualManager::OnDrawMenuSystemButton](#cmfcvisualmanager__ondrawmenusystembutton)|Called by the framework when it draws the menu system buttons **Close**, **Minimize**, **Maximize**, and **Restore**.|  \n|[CMFCVisualManager::OnDrawMiniFrameBorder](#cmfcvisualmanager__ondrawminiframeborder)||  \n|[CMFCVisualManager::OnDrawOutlookBarSplitter](#cmfcvisualmanager__ondrawoutlookbarsplitter)|Called by the framework when it draws the splitter for an Outlook bar. The splitter is a horizontal bar used to group controls.|  \n|[CMFCVisualManager::OnDrawOutlookPageButtonBorder](#cmfcvisualmanager__ondrawoutlookpagebuttonborder)|Called by the framework when it draws the border of an Outlook page button. Outlook page buttons appear if the Outlook bar pane contains more buttons than it can display.|  \n|[CMFCVisualManager::OnDrawPaneBorder](#cmfcvisualmanager__ondrawpaneborder)|Called by the framework when it draws the border of a [CPane Class](../../mfc/reference/cpane-class.md).|  \n|[CMFCVisualManager::OnDrawPaneCaption](#cmfcvisualmanager__ondrawpanecaption)|Called by the framework when it draws the caption for a `CPane`.|  \n|[CMFCVisualManager::OnDrawPaneDivider](#cmfcvisualmanager__ondrawpanedivider)||  \n|[CMFCVisualManager::OnDrawPopupWindowBorder](#cmfcvisualmanager__ondrawpopupwindowborder)||  \n|[CMFCVisualManager::OnDrawPopupWindowButtonBorder](#cmfcvisualmanager__ondrawpopupwindowbuttonborder)||  \n|[CMFCVisualManager::OnDrawPopupWindowCaption](#cmfcvisualmanager__ondrawpopupwindowcaption)||  \n|[CMFCVisualManager::OnDrawRibbonApplicationButton](#cmfcvisualmanager__ondrawribbonapplicationbutton)|Called by the framework when it draws the **Main Button** on the ribbon.|  \n|[CMFCVisualManager::OnDrawRibbonButtonBorder](#cmfcvisualmanager__ondrawribbonbuttonborder)|Called by the framework when it draws the border of a ribbon button.|  \n|[CMFCVisualManager::OnDrawRibbonButtonsGroup](#cmfcvisualmanager__ondrawribbonbuttonsgroup)|Called by the framework when it draws a group of buttons on the ribbon.|  \n|[CMFCVisualManager::OnDrawRibbonCaption](#cmfcvisualmanager__ondrawribboncaption)|Called by the framework when it draws the caption of the main frame, but only if the ribbon bar is integrated with the frame.|  \n|[CMFCVisualManager::OnDrawRibbonCaptionButton](#cmfcvisualmanager__ondrawribboncaptionbutton)|Called by the framework when it draws a caption button located on the ribbon bar.|  \n|[CMFCVisualManager::OnDrawRibbonCategory](#cmfcvisualmanager__ondrawribboncategory)|Called by the framework when it draws a ribbon category.|  \n|[CMFCVisualManager::OnDrawRibbonCategoryCaption](#cmfcvisualmanager__ondrawribboncategorycaption)|Called by the framework when it draws the caption for a ribbon category.|  \n|[CMFCVisualManager::OnDrawRibbonCategoryScroll](#cmfcvisualmanager__ondrawribboncategoryscroll)||  \n|[CMFCVisualManager::OnDrawRibbonCategoryTab](#cmfcvisualmanager__ondrawribboncategorytab)|Called by the framework when it draws the tab for a ribbon category.|  \n|[CMFCVisualManager::OnDrawRibbonCheckBoxOnList](#cmfcvisualmanager__ondrawribboncheckboxonlist)||  \n|[CMFCVisualManager::OnDrawRibbonColorPaletteBox](#cmfcvisualmanager__ondrawribboncolorpalettebox)||  \n|[CMFCVisualManager::OnDrawRibbonDefaultPaneButtonContext](#cmfcvisualmanager__ondrawribbondefaultpanebuttoncontext)||  \n|[CMFCVisualManager::OnDrawRibbonDefaultPaneButton](#cmfcvisualmanager__ondrawribbondefaultpanebutton)|Called by the framework when it draws the ribbon pane default button. The default button appears when the user shrinks a ribbon panel so that it is too small to display the ribbon elements. The default button is drawn instead and the ribbon elements are added as items on a drop down menu.|  \n|[CMFCVisualManager::OnDrawRibbonDefaultPaneButtonIndicator](#cmfcvisualmanager__ondrawribbondefaultpanebuttonindicator)||  \n|[CMFCVisualManager::OnDrawRibbonGalleryBorder](#cmfcvisualmanager__ondrawribbongalleryborder)||  \n|[CMFCVisualManager::OnDrawRibbonGalleryButton](#cmfcvisualmanager__ondrawribbongallerybutton)||  \n|[CMFCVisualManager::OnDrawRibbonKeyTip](#cmfcvisualmanager__ondrawribbonkeytip)||  \n|[CMFCVisualManager::OnDrawRibbonLabel](#cmfcvisualmanager__ondrawribbonlabel)|Called by the framework when it draws the ribbon label.|  \n|[CMFCVisualManager::OnDrawRibbonMainPanelButtonBorder](#cmfcvisualmanager__ondrawribbonmainpanelbuttonborder)|Called by the framework when it draws the border of a ribbon button that is positioned on the **Main** panel. The **Main** panel is the panel that appears when a user clicks the **Main Button**.|  \n|[CMFCVisualManager::OnDrawRibbonMainPanelFrame](#cmfcvisualmanager__ondrawribbonmainpanelframe)|Called by the framework when it draws the frame around the **Main** panel.|  \n|[CMFCVisualManager::OnDrawRibbonMenuCheckFrame](#cmfcvisualmanager__ondrawribbonmenucheckframe)||  \n|[CMFCVisualManager::OnDrawRibbonPanel](#cmfcvisualmanager__ondrawribbonpanel)|Called by the framework when it draws a ribbon panel.|  \n|[CMFCVisualManager::OnDrawRibbonPanelCaption](#cmfcvisualmanager__ondrawribbonpanelcaption)|Called by the framework when it draws the caption of a ribbon panel.|  \n|[CMFCVisualManager::OnDrawRibbonProgressBar](#cmfcvisualmanager__ondrawribbonprogressbar)|Called by the framework when it draws a [CMFCRibbonProgressBar](../../mfc/reference/cmfcribbonprogressbar-class.md) object.|  \n|[CMFCVisualManager::OnDrawRibbonQuickAccessToolBarSeparator](#cmfcvisualmanager__ondrawribbonquickaccesstoolbarseparator)|Called by the framework when it draws a separator on a ribbon's **Quick Access Toolbar**.|  \n|[CMFCVisualManager::OnDrawRibbonRecentFilesFrame](#cmfcvisualmanager__ondrawribbonrecentfilesframe)|Called by the framework when it draws a frame around a recent files list.|  \n|[CMFCVisualManager::OnDrawRibbonSliderChannel](#cmfcvisualmanager__ondrawribbonsliderchannel)|Called by the framework when it draws the channel of a [CMFCRibbonSlider](../../mfc/reference/cmfcribbonslider-class.md) object.|  \n|[CMFCVisualManager::OnDrawRibbonSliderThumb](#cmfcvisualmanager__ondrawribbonsliderthumb)|Called by the framework when it draws the thumb of a `CMFCRibbonSlider` object.|  \n|[CMFCVisualManager::OnDrawRibbonSliderZoomButton](#cmfcvisualmanager__ondrawribbonsliderzoombutton)|Called by the framework when it draws the zoom buttons of a `CMFCRibbonSlider` object.|  \n|[CMFCVisualManager::OnDrawRibbonStatusBarPane](#cmfcvisualmanager__ondrawribbonstatusbarpane)|Called by the framework when it draws the status-bar pane of a ribbon.|  \n|[CMFCVisualManager::OnDrawRibbonTabsFrame](#cmfcvisualmanager__ondrawribbontabsframe)|Called by the framework when it draws a frame around a set of ribbon tabs.|  \n|[CMFCVisualManager::OnDrawScrollButtons](#cmfcvisualmanager__ondrawscrollbuttons)||  \n|[CMFCVisualManager::OnDrawSeparator](#cmfcvisualmanager__ondrawseparator)|Called by the framework when it draws a separator. The separator is typically used on a control bar to separate groups of icons.|  \n|[CMFCVisualManager::OnDrawShowAllMenuItems](#cmfcvisualmanager__ondrawshowallmenuitems)||  \n|[CMFCVisualManager::OnDrawSpinButtons](#cmfcvisualmanager__ondrawspinbuttons)|Called by the framework when it draws spin buttons.|  \n|[CMFCVisualManager::OnDrawSplitterBorder](#cmfcvisualmanager__ondrawsplitterborder)|Called by the framework when it draws the border of a split window.|  \n|[CMFCVisualManager::OnDrawSplitterBox](#cmfcvisualmanager__ondrawsplitterbox)|Called by the framework when it draws the splitter drag box for a split window.|  \n|[CMFCVisualManager::OnDrawStatusBarPaneBorder](#cmfcvisualmanager__ondrawstatusbarpaneborder)|Called by the framework when it draws the border for a status-bar pane.|  \n|[CMFCVisualManager::OnDrawStatusBarProgress](#cmfcvisualmanager__ondrawstatusbarprogress)|Called by the framework when it draws the status-bar progress indicator.|  \n|[CMFCVisualManager::OnDrawStatusBarSizeBox](#cmfcvisualmanager__ondrawstatusbarsizebox)|Called by the framework when it draws the status-bar size box.|  \n|[CMFCVisualManager::OnDrawTab](#cmfcvisualmanager__ondrawtab)|Called by the framework when it draws a [CMFCTabCtrl](../../mfc/reference/cmfctabctrl-class.md) object.|  \n|[CMFCVisualManager::OnDrawTabCloseButton](#cmfcvisualmanager__ondrawtabclosebutton)|Called by the framework when it draws the **Close** button on the active tab.|  \n|[CMFCVisualManager::OnDrawTabContent](#cmfcvisualmanager__ondrawtabcontent)|Called by the framework when it draws the tab interior (images, texts).|  \n|[CMFCVisualManager::OnDrawTabsButtonBorder](#cmfcvisualmanager__ondrawtabsbuttonborder)|Called by the framework when it draws the border of a tab button.|  \n|[CMFCVisualManager::OnDrawTask](#cmfcvisualmanager__ondrawtask)|Called by the framework when it draws a task on the task pane.|  \n|[CMFCVisualManager::OnDrawTasksGroupAreaBorder](#cmfcvisualmanager__ondrawtasksgroupareaborder)|Called by the framework when it draws a border around a group area on the task pane.|  \n|[CMFCVisualManager::OnDrawTasksGroupCaption](#cmfcvisualmanager__ondrawtasksgroupcaption)|Called by the framework when it draws the caption for a task group on the task pane.|  \n|[CMFCVisualManager::OnDrawTasksGroupIcon](#cmfcvisualmanager__ondrawtasksgroupicon)||  \n|[CMFCVisualManager::OnDrawTearOffCaption](#cmfcvisualmanager__ondrawtearoffcaption)|Called by the framework when it draws the tear-off caption for a tear-off bar.|  \n|[CMFCVisualManager::OnDrawToolBoxFrame](#cmfcvisualmanager__ondrawtoolboxframe)||  \n|[CMFCVisualManager::OnEraseMDIClientArea](#cmfcvisualmanager__onerasemdiclientarea)|Called by the framework when it erases the MDI client area.|  \n|[CMFCVisualManager::OnErasePopupWindowButton](#cmfcvisualmanager__onerasepopupwindowbutton)||  \n|[CMFCVisualManager::OnEraseTabsArea](#cmfcvisualmanager__onerasetabsarea)|Called by the framework when it erases the tab area in a tab window.|  \n|[CMFCVisualManager::OnEraseTabsButton](#cmfcvisualmanager__onerasetabsbutton)|Called by the framework when it erases the icon and text of a tab button.|  \n|[CMFCVisualManager::OnEraseTabsFrame](#cmfcvisualmanager__onerasetabsframe)|Called by the framework when it erases a tab frame.|  \n|[CMFCVisualManager::OnFillAutoHideButtonBackground](#cmfcvisualmanager__onfillautohidebuttonbackground)|Called by the framework when it fills the background of an auto-hide button.|  \n|[CMFCVisualManager::OnFillBarBackground](#cmfcvisualmanager__onfillbarbackground)|Called by the framework when it fills the background of a control bar.|  \n|[CMFCVisualManager::OnFillButtonInterior](#cmfcvisualmanager__onfillbuttoninterior)|Called by the framework when it fills the background of a toolbar button.|  \n|[CMFCVisualManager::OnFillCaptionBarButton](#cmfcvisualmanager__onfillcaptionbarbutton)||  \n|[CMFCVisualManager::OnFillCommandsListBackground](#cmfcvisualmanager__onfillcommandslistbackground)|Called by the framework when it fills the background of a toolbar button that belongs to a command list that, in turn, is part of a customization dialog box.|  \n|[CMFCVisualManager::OnFillHeaderCtrlBackground](#cmfcvisualmanager__onfillheaderctrlbackground)|Called by the framework when it fills the background of a header control.|  \n|[CMFCVisualManager::OnFillMiniFrameCaption](#cmfcvisualmanager__onfillminiframecaption)|Called by the framework when it fills the caption of a mini frame window.|  \n|[CMFCVisualManager::OnFillOutlookBarCaption](#cmfcvisualmanager__onfilloutlookbarcaption)|Called by the framework when it fills the background of an Outlook bar caption.|  \n|[CMFCVisualManager::OnFillOutlookPageButton](#cmfcvisualmanager__onfilloutlookpagebutton)|Called by the framework when it fills the interior of an Outlook page button.|  \n|[CMFCVisualManager::OnFillPopupWindowBackground](#cmfcvisualmanager__onfillpopupwindowbackground)|Called by the framework when it fills the background of a popup window.|  \n|[CMFCVisualManager::OnFillRibbonButton](#cmfcvisualmanager__onfillribbonbutton)|Called by the framework when it fills the interior of a ribbon button.|  \n|[CMFCVisualManager::OnFillRibbonEdit](#cmfcvisualmanager__onfillribbonedit)|Called by the framework when it fills the interior of a ribbon edit control.|  \n|[CMFCVisualManager::OnFillRibbonMainPanelButton](#cmfcvisualmanager__onfillribbonmainpanelbutton)|Called by the framework when it fills the interior of a ribbon button located on the **Main** panel.|  \n|[CMFCVisualManager::OnFillRibbonMenuFrame](#cmfcvisualmanager__onfillribbonmenuframe)|Called by the framework when it fills the menu frame of the main ribbon panel.|  \n|[CMFCVisualManager::OnFillRibbonQuickAccessToolBarPopup](#cmfcvisualmanager__onfillribbonquickaccesstoolbarpopup)||  \n|[CMFCVisualManager::OnFillSplitterBackground](#cmfcvisualmanager__onfillsplitterbackground)|Called by the framework when it fills the background of a split window.|  \n|[CMFCVisualManager::OnFillTab](#cmfcvisualmanager__onfilltab)|Called by the framework when it fills the background of a tab.|  \n|[CMFCVisualManager::OnFillTasksGroupInterior](#cmfcvisualmanager__onfilltasksgroupinterior)|Called by the framework when it fills the interior of a [CMFCTasksPaneTaskGroup](../../mfc/reference/cmfctaskspanetaskgroup-class.md) object on the [CMFCTasksPane](../../mfc/reference/cmfctaskspane-class.md).|  \n|[CMFCVisualManager::OnFillTasksPaneBackground](#cmfcvisualmanager__onfilltaskspanebackground)|Called by the framework when it fills the background of a `CMFCTasksPane` control.|  \n|[CMFCVisualManager::OnHighlightMenuItem](#cmfcvisualmanager__onhighlightmenuitem)|Called by the framework when it draws a highlighted menu item.|  \n|[CMFCVisualManager::OnHighlightRarelyUsedMenuItems](#cmfcvisualmanager__onhighlightrarelyusedmenuitems)|Called by the framework when it draws a highlighted and rarely used menu item.|  \n|[CMFCVisualManager::OnNcPaint](#cmfcvisualmanager__onncpaint)|Called by the framework when it draws the non-client area.|  \n|[CMFCVisualManager::OnSetWindowRegion](#cmfcvisualmanager__onsetwindowregion)|Called by the framework when it sets a region that contains frames and popup menus.|  \n|[CMFCVisualManager::OnUpdateSystemColors](#cmfcvisualmanager__onupdatesystemcolors)|Called by the framework when it changes the system color setting.|  \n|[CMFCVisualManager::RedrawAll](#cmfcvisualmanager__redrawall)|Redraws all control bars in the application.|  \n|[CMFCVisualManager::RibbonCategoryColorToRGB](#cmfcvisualmanager__ribboncategorycolortorgb)||  \n|[CMFCVisualManager::SetDefaultManager](#cmfcvisualmanager__setdefaultmanager)|Sets the default visual manager.|  \n|[CMFCVisualManager::SetEmbossDisabledImage](#cmfcvisualmanager__setembossdisabledimage)|Enables or disables the embossed mode for disabled toolbar images.|  \n|[CMFCVisualManager::SetFadeInactiveImage](#cmfcvisualmanager__setfadeinactiveimage)|Enables or disables the lighting effect for inactive images on a menu or toolbar.|  \n|[CMFCVisualManager::SetMenuFlatLook](#cmfcvisualmanager__setmenuflatlook)|Sets a flag indicating whether the application menu buttons have a flattened appearance.|  \n|[CMFCVisualManager::SetMenuShadowDepth](#cmfcvisualmanager__setmenushadowdepth)|Sets the width and height of the menu shadow.|  \n|[CMFCVisualManager::SetShadowHighlightedImage](#cmfcvisualmanager__setshadowhighlightedimage)|Sets a flag that indicates whether to display the shadow when rendering highlighted images.|  \n  \n## Remarks  \n Because the `CMFCVisualManager` class controls the application's GUI, each application can have either one instance of a `CMFCVisualManager`, or one instance of a class derived from `CMFCVisualManager`. Your application can also function without a `CMFCVisualManager`. Use the static method `GetInstance` to obtain a pointer to the current `CMFCVisualManager`-derived object.  \n  \n To change the appearance of your application you must use other classes that provide methods for drawing all of the visual elements of your application. Some examples of these classes are [CMFCVisualManagerOfficeXP Class](../../mfc/reference/cmfcvisualmanagerofficexp-class.md), [CMFCVisualManagerOffice2003 Class](../../mfc/reference/cmfcvisualmanageroffice2003-class.md), and [CMFCVisualManagerOffice2007 Class](../../mfc/reference/cmfcvisualmanageroffice2007-class.md). When you want to change the appearance of your application, pass one of these visual managers into the method `SetDefaultManager`. For an example that demonstrates how your application can mimic the appearance of Microsoft Office 2003, see [CMFCVisualManagerOffice2003 Class](../../mfc/reference/cmfcvisualmanageroffice2003-class.md).  \n  \n All of the drawing methods are virtual. This enables you to create a custom visual style for the GUI of your application. If you want to create your own visual style, derive a class from one of the visual manager classes and override the drawing methods that you want to change.  \n  \n## Example  \n This sample demonstrates how to instantiate the standard and custom `CMFCVisualManager` objects.  \n  \n```  \nvoid CMFCSkinsApp::SetSkin (int iIndex)  \n{   // destroy the current visual manager  \n    if (CMFCVisualManager::GetInstance () != NULL)  \n {  \n    delete CMFCVisualManager::GetInstance ();\n\n }  \n    switch (iIndex)  \n {  \n    case 0:  \n    CMFCVisualManager::GetInstance ();\n\n// create the standard visual manager  \n    break; \n    case 1:  \n    new CMyVisualManager ();\n\n// create the first custom visual manager  \n    break; \n    case 2:  \n    new CMacStyle ();\n*// create the second custom visual manager  \n    break; \n }  \n *// access the manager and set it properly  \n    CMFCVisualManager::GetInstance ()->SetLook2000 ();\nCMFCVisualManager::GetInstance ()->RedrawAll ();\n\n}  \n```  \n  \n## Example  \n The following example demonstrates how to retrieve the default values of a `CMFCVisualManager` object. This code snippet is part of the [Tasks Pane sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_TasksPane#1](../../mfc/reference/codesnippet/cpp/cmfcvisualmanager-class_1.h)]  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CMFCBaseVisualManager](../../mfc/reference/cmfcbasevisualmanager-class.md)  \n  \n [CMFCVisualManager](../../mfc/reference/cmfcvisualmanager-class.md)  \n  \n## Requirements  \n **Header:** afxvisualmanager.h  \n  \n##  <a name=\"cmfcvisualmanager__adjustframes\"></a>  CMFCVisualManager::AdjustFrames  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nstatic void __stdcall AdjustFrames();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__adjusttoolbars\"></a>  CMFCVisualManager::AdjustToolbars  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nstatic void __stdcall AdjustToolbars();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__alwayshighlight3dtabs\"></a>  CMFCVisualManager::AlwaysHighlight3DTabs  \n The framework calls this method to determine whether 3D tabs should always be highlighted in the application.  \n  \n```  \nvirtual BOOL AlwaysHighlight3DTabs() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if 3D tabs should be highlighted.  \n  \n### Remarks  \n Override this function in a derived visual manager and return `TRUE` if 3D tabs should always be highlighted. The default implementation of this method returns `FALSE`.  \n  \n##  <a name=\"cmfcvisualmanager__cmfcvisualmanager\"></a>  CMFCVisualManager::CMFCVisualManager  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCMFCVisualManager(BOOL bTemporary = FALSE);\n```  \n  \n### Parameters  \n [in] `bTemporary`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__destroyinstance\"></a>  CMFCVisualManager::DestroyInstance  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nstatic void __stdcall DestroyInstance(BOOL bAutoDestroyOnly = FALSE);\n```  \n  \n### Parameters  \n [in] `bAutoDestroyOnly`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__dodrawheadersortarrow\"></a>  CMFCVisualManager::DoDrawHeaderSortArrow  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid DoDrawHeaderSortArrow(\n    CDC* pDC,  \n    CRect rect,  \n    BOOL bIsUp,  \n    BOOL bDlgCtrl);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `rect`  \n [in] `bIsUp`  \n [in] `bDlgCtrl`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__drawcomboborderwinxp\"></a>  CMFCVisualManager::DrawComboBorderWinXP  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL DrawComboBorderWinXP(CDC*,\n    CRect,\n    BOOL,\n    BOOL,\n    BOOL);\n```  \n  \n### Parameters  \n [in] `CDC*`  \n [in] `CRect`  \n [in] `BOOL`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__drawcombodropbuttonwinxp\"></a>  CMFCVisualManager::DrawComboDropButtonWinXP  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL DrawComboDropButtonWinXP(CDC*,\n    CRect,\n    BOOL,\n    BOOL,\n    BOOL);\n```  \n  \n### Parameters  \n [in] `CDC*`  \n [in] `CRect`  \n [in] `BOOL`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__drawpushbuttonwinxp\"></a>  CMFCVisualManager::DrawPushButtonWinXP  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL DrawPushButtonWinXP(CDC*,\n    CRect,\n    CMFCButton*,\n    UINT);\n```  \n  \n### Parameters  \n [in] `CDC*`  \n [in] `CRect`  \n [in] `CMFCButton*`  \n [in] `UINT`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__drawtextonglass\"></a>  CMFCVisualManager::DrawTextOnGlass  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL DrawTextOnGlass(\n    CDC* pDC,  \n    CString strText,  \n    CRect rect,  \n    DWORD dwFlags,  \n    int nGlowSize = 0,  \n    COLORREF clrText = (COLORREF)-1);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `strText`  \n [in] `rect`  \n [in] `dwFlags`  \n [in] `nGlowSize`  \n [in] `clrText`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__enabletoolbarbuttonfill\"></a>  CMFCVisualManager::EnableToolbarButtonFill  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid EnableToolbarButtonFill(BOOL bEnable = TRUE);\n```  \n  \n### Parameters  \n [in] `bEnable`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__getautohidebuttontextcolor\"></a>  CMFCVisualManager::GetAutoHideButtonTextColor  \n The framework calls this method to retrieve the text color of an auto-hide button.  \n  \n```  \nvirtual COLORREF GetAutoHideButtonTextColor(CMFCAutoHideButton* pButton);\n```  \n  \n### Parameters  \n [in] `pButton`  \n A pointer to an auto-hide button.  \n  \n### Return Value  \n A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter that specifies the text color of `pButton`.  \n  \n### Remarks  \n Override this method in a derived class to customize the text color of an auto-hide button in your application. To do this, return the color that you want your application to use as the text color.  \n  \n##  <a name=\"cmfcvisualmanager__getbuttonextraborder\"></a>  CMFCVisualManager::GetButtonExtraBorder  \n The framework calls this method when it draws a toolbar button.  \n  \n```  \nvirtual CSize GetButtonExtraBorder() const;\n\n \n```  \n  \n### Return Value  \n A [CSize](../../atl-mfc-shared/reference/csize-class.md) object that contains the extra size of the border for toolbar buttons.  \n  \n### Remarks  \n Some skins have to extend the borders of toolbar buttons. Override this method in a custom visual manager to extend the borders of toolbar buttons in your application. The default implementation of this method returns an empty size.  \n  \n##  <a name=\"cmfcvisualmanager__getcaptionbartextcolor\"></a>  CMFCVisualManager::GetCaptionBarTextColor  \n The framework calls this method to retrieve the color of the text in the caption bar.  \n  \n```  \nvirtual COLORREF GetCaptionBarTextColor(CMFCCaptionBar* pBar);\n```  \n  \n### Parameters  \n [in] `pBar`  \n A pointer to a caption bar.  \n  \n### Return Value  \n A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter that indicates the color of the text in `pBar`.  \n  \n### Remarks  \n Override this method in your derived class to customize the text color for a caption bar. In your overridden method, return the desired color.  \n  \n##  <a name=\"cmfcvisualmanager__getcaptionbuttonextraborder\"></a>  CMFCVisualManager::GetCaptionButtonExtraBorder  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual CSize GetCaptionButtonExtraBorder() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__getdockingpanecaptionextraheight\"></a>  CMFCVisualManager::GetDockingPaneCaptionExtraHeight  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual int GetDockingPaneCaptionExtraHeight() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__getdockingtabsborderssize\"></a>  CMFCVisualManager::GetDockingTabsBordersSize  \n The framework calls this method when it draws a pane that is docked and tabbed.  \n  \n```  \nvirtual int GetDockingTabsBordersSize();\n```  \n  \n### Return Value  \n An integer that indicates the border size of a pane that is docked and tabbed.  \n  \n### Remarks  \n A docked pane becomes tabbed when the user docks multiple panes to the same location in your application.  \n  \n Override this method in a custom visual manager to change the border size of docked tabbed control bars. The default implementation returns -1.  \n  \n##  <a name=\"cmfcvisualmanager__gethighlightedmenuitemtextcolor\"></a>  CMFCVisualManager::GetHighlightedMenuItemTextColor  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual COLORREF GetHighlightedMenuItemTextColor(CMFCToolBarMenuButton* pButton);\n```  \n  \n### Parameters  \n [in] `pButton`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__getinstance\"></a>  CMFCVisualManager::GetInstance  \n Returns a pointer to the current [CMFCVisualManager Class](../../mfc/reference/cmfcvisualmanager-class.md) object for the application.  \n  \n```  \nstatic CMFCVisualManager* GetInstance();\n```  \n  \n### Return Value  \n A pointer to a `CMFCVisualManager` object.  \n  \n### Remarks  \n An application can only have one `CMFCVisualManager` object associated with it. This includes any object derived from the `CMFCVisualManager` class. This method returns a pointer to the associated `CMFCVisualManager` object. If the application does not have an associated `CMFCVisualManager` object, this method will create one and associate it with the application.  \n  \n##  <a name=\"cmfcvisualmanager__getmditabsborderssize\"></a>  CMFCVisualManager::GetMDITabsBordersSize  \n The framework calls this method to determine the border size of a MDITabs window before it draws the window.  \n  \n```  \nvirtual int GetMDITabsBordersSize();\n```  \n  \n### Return Value  \n The border size of the MDITabs window.  \n  \n### Remarks  \n Override this function in a derived class to customize the border size of the MDITabs window.  \n  \n##  <a name=\"cmfcvisualmanager__getmenuimagemargin\"></a>  CMFCVisualManager::GetMenuImageMargin  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual int GetMenuImageMargin() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__getmenuitemtextcolor\"></a>  CMFCVisualManager::GetMenuItemTextColor  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual COLORREF GetMenuItemTextColor(\n    CMFCToolBarMenuButton* pButton,  \n    BOOL bHighlighted,  \n    BOOL bDisabled);\n```  \n  \n### Parameters  \n [in] `pButton`  \n [in] `bHighlighted`  \n [in] `bDisabled`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__getmenushadowdepth\"></a>  CMFCVisualManager::GetMenuShadowDepth  \n Retrieves the width and height of the menu shadow.  \n  \n```  \nint GetMenuShadowDepth() const;\n\n \n```  \n  \n### Return Value  \n The width and height of the menu shadow in pixels.  \n  \n### Remarks  \n The width and height of the menu shadow are equivalent. The default value is 7 pixels.  \n  \n##  <a name=\"cmfcvisualmanager__getncbtnsize\"></a>  CMFCVisualManager::GetNcBtnSize  \n Called by the framework when it has to retrieve the size of the system buttons.  \n  \n```  \nvirtual CSize GetNcBtnSize(BOOL bSmall) const;\n\n \n```  \n  \n### Parameters  \n [in] `bSmall`  \n A Boolean parameter that indicates whether `GetNcBtnSize` should retrieve the size of a small or large system button. If `bSmall` is `TRUE`, `GetNcBtnSize` returns the size of a small system button. Otherwise, it returns the size of a large system button.  \n  \n### Return Value  \n A [CSize](../../atl-mfc-shared/reference/csize-class.md) parameter that indicate the size of the system buttons.  \n  \n### Remarks  \n The system buttons are the buttons in the caption of the frame window that map to the commands **Close**, **Minimize**, **Maximize**, and **Restore**. The size of these buttons depends on the current visual manager. Override this method if you want to customize the size of the system buttons in your application.  \n  \n##  <a name=\"cmfcvisualmanager__getpopupmenubordersize\"></a>  CMFCVisualManager::GetPopupMenuBorderSize  \n The framework calls this method to obtain the border size of pop-up menus.  \n  \n```  \nvirtual int GetPopupMenuBorderSize() const;\n\n \n```  \n  \n### Return Value  \n An integer that specifies the border size of pop-up menus.  \n  \n### Remarks  \n Override this method to customize the border size of pop-up menus in your application.  \n  \n##  <a name=\"cmfcvisualmanager__getpopupmenugap\"></a>  CMFCVisualManager::GetPopupMenuGap  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual int GetPopupMenuGap() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__getpropertygridgroupcolor\"></a>  CMFCVisualManager::GetPropertyGridGroupColor  \n The framework calls this method to get the background color of a property list.  \n  \n```  \nvirtual COLORREF GetPropertyGridGroupColor(CMFCPropertyGridCtrl* pPropList);\n```  \n  \n### Parameters  \n [in] `pPropList`  \n A pointer to the property list that the framework is drawing.  \n  \n### Return Value  \n A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter that indicates the background color of `pPropList`.  \n  \n### Remarks  \n Override this function to customize the background color of a property list in your application.  \n  \n##  <a name=\"cmfcvisualmanager__getpropertygridgrouptextcolor\"></a>  CMFCVisualManager::GetPropertyGridGroupTextColor  \n The framework calls this method to retrieve the text color of a property list.  \n  \n```  \nvirtual COLORREF GetPropertyGridGroupTextColor(CMFCPropertyGridCtrl* pPropList);\n```  \n  \n### Parameters  \n [in] `pPropList`  \n A pointer to the property list.  \n  \n### Return Value  \n A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter that indicates the text color of the property list.  \n  \n### Remarks  \n Override this function to customize the text color of a property list in your application.  \n  \n##  <a name=\"cmfcvisualmanager__getribbonhyperlinktextcolor\"></a>  CMFCVisualManager::GetRibbonHyperlinkTextColor  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual COLORREF GetRibbonHyperlinkTextColor(CMFCRibbonLinkCtrl* pHyperLink);\n```  \n  \n### Parameters  \n [in] `pHyperLink`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__getribbonpopupbordersize\"></a>  CMFCVisualManager::GetRibbonPopupBorderSize  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual int GetRibbonPopupBorderSize(const CMFCRibbonPanelMenu*) const;\n\n \n```  \n  \n### Parameters  \n [in] `CMFCRibbonPanelMenu*`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__getribbonquickaccesstoolbarchevronoffset\"></a>  CMFCVisualManager::GetRibbonQuickAccessToolBarChevronOffset  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual int GetRibbonQuickAccessToolBarChevronOffset();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__getribbonquickaccesstoolbarrightmargin\"></a>  CMFCVisualManager::GetRibbonQuickAccessToolBarRightMargin  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual int GetRibbonQuickAccessToolBarRightMargin();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__getribbonquickaccesstoolbartextcolor\"></a>  CMFCVisualManager::GetRibbonQuickAccessToolBarTextColor  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual COLORREF GetRibbonQuickAccessToolBarTextColor(BOOL bDisabled = FALSE);\n```  \n  \n### Parameters  \n [in] `bDisabled`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__getribbonslidercolors\"></a>  CMFCVisualManager::GetRibbonSliderColors  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void GetRibbonSliderColors(\n    CMFCRibbonSlider* pSlider,  \n    BOOL bIsHighlighted,  \n    BOOL bIsPressed,  \n    BOOL bIsDisabled,  \n    COLORREF& clrLine,  \n    COLORREF& clrFill);\n```  \n  \n### Parameters  \n [in] `pSlider`  \n [in] `bIsHighlighted`  \n [in] `bIsPressed`  \n [in] `bIsDisabled`  \n [in] `clrLine`  \n [in] `clrFill`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__getribbonstatusbartextcolor\"></a>  CMFCVisualManager::GetRibbonStatusBarTextColor  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual COLORREF GetRibbonStatusBarTextColor(CMFCRibbonStatusBar* pStatusBar);\n```  \n  \n### Parameters  \n [in] `pStatusBar`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__getshowallmenuitemsheight\"></a>  CMFCVisualManager::GetShowAllMenuItemsHeight  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual int GetShowAllMenuItemsHeight(\n    CDC* pDC,  \n    const CSize& sizeDefault);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `sizeDefault`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__getsmartdockingbaseguidecolors\"></a>  CMFCVisualManager::GetSmartDockingBaseGuideColors  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void GetSmartDockingBaseGuideColors(\n    COLORREF& clrBaseGroupBackground,  \n    COLORREF& clrBaseGroupBorder);\n```  \n  \n### Parameters  \n [in] `clrBaseGroupBackground`  \n [in] `clrBaseGroupBorder`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__getsmartdockinghighlighttonecolor\"></a>  CMFCVisualManager::GetSmartDockingHighlightToneColor  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual COLORREF GetSmartDockingHighlightToneColor();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__getsmartdockingtheme\"></a>  CMFCVisualManager::GetSmartDockingTheme  \n Returns a theme used to display smart docking markers.  \n  \n```  \nvirtual AFX_SMARTDOCK_THEME GetSmartDockingTheme();\n```  \n  \n### Return Value  \n Returns one of the following enumerated values: AFX_SDT_DEFAULT, AFX_SDT_VS2005, AFX_SDT_VS2008.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__getstatusbarpanetextcolor\"></a>  CMFCVisualManager::GetStatusBarPaneTextColor  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual COLORREF GetStatusBarPaneTextColor(\n    CMFCStatusBar* pStatusBar,  \n    CMFCStatusBarPaneInfo* pPane);\n```  \n  \n### Parameters  \n [in] `pStatusBar`  \n [in] `pPane`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__gettabframecolors\"></a>  CMFCVisualManager::GetTabFrameColors  \n The framework calls this function when it has to retrieve the set of colors for drawing a tab window.  \n  \n```  \nvirtual void GetTabFrameColors(\n    const CMFCBaseTabCtrl* pTabWnd,  \n    COLORREF& clrDark,  \n    COLORREF& clrBlack,  \n    COLORREF& clrHighlight,  \n    COLORREF& clrFace,  \n    COLORREF& clrDarkShadow,  \n    COLORREF& clrLight,  \n    CBrush*& pbrFace,  \n    CBrush*& pbrBlack);\n```  \n  \n### Parameters  \n [in] `pTabWnd`  \n A pointer to the tabbed window where the frame is drawing a tab.  \n  \n [out] `clrDark`  \n A reference to a [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter where this method stores the color for the dark border of a tab.  \n  \n [out] `clrBlack`  \n A reference to a `COLORREF` parameter where this method stores the color for the border of the tab window. The default color for the border is black.  \n  \n [out] `clrHighlight`  \n A reference to a `COLORREF` parameter where this method stores the color for the highlight state of the tab window.  \n  \n [out] `clrFace`  \n A reference to a `COLORREF` parameter where this method stores the color for face of the tab window.  \n  \n [out] `clrDarkShadow`  \n A reference to a `COLORREF` parameter where this method stores the color for the shadow of the tab window.  \n  \n [out] `clrLight`  \n A reference to a `COLORREF` parameter where this method stores the color for the light edge of the tab window.  \n  \n [out] `pbrFace`  \n A pointer to a reference for a brush. This method stores the brush that it uses to fill the face of the tab window in this parameter.  \n  \n [out] `pbrBlack`  \n A pointer to a reference for a brush. This method stores the brush it uses to fill the black edge of the tab window in this parameter.  \n  \n### Remarks  \n Override this function in a derived class if you want to customize the set of colors that the framework uses when it draws a tab window.  \n  \n##  <a name=\"cmfcvisualmanager__gettabhorzmargin\"></a>  CMFCVisualManager::GetTabHorzMargin  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual int GetTabHorzMargin(const CMFCBaseTabCtrl*);\n```  \n  \n### Parameters  \n [in] `CMFCBaseTabCtrl*`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__gettabtextcolor\"></a>  CMFCVisualManager::GetTabTextColor  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual COLORREF GetTabTextColor(\n    const CMFCBaseTabCtrl*,\n    int,\n    BOOL);\n```  \n  \n### Parameters  \n [in] `CMFCBaseTabCtrl*`  \n [in] `int`  \n [in] `BOOL`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__gettaskspanegroupcaptionheight\"></a>  CMFCVisualManager::GetTasksPaneGroupCaptionHeight  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nint GetTasksPaneGroupCaptionHeight() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__gettaskspanegroupcaptionhorzoffset\"></a>  CMFCVisualManager::GetTasksPaneGroupCaptionHorzOffset  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nint GetTasksPaneGroupCaptionHorzOffset() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__gettaskspanegroupcaptionvertoffset\"></a>  CMFCVisualManager::GetTasksPaneGroupCaptionVertOffset  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nint GetTasksPaneGroupCaptionVertOffset() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__gettaskspanegroupvertoffset\"></a>  CMFCVisualManager::GetTasksPaneGroupVertOffset  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nint GetTasksPaneGroupVertOffset() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__gettaskspanehorzmargin\"></a>  CMFCVisualManager::GetTasksPaneHorzMargin  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nint GetTasksPaneHorzMargin() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__gettaskspaneiconhorzoffset\"></a>  CMFCVisualManager::GetTasksPaneIconHorzOffset  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nint GetTasksPaneIconHorzOffset() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__gettaskspaneiconvertoffset\"></a>  CMFCVisualManager::GetTasksPaneIconVertOffset  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nint GetTasksPaneIconVertOffset() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__gettaskspanetaskhorzoffset\"></a>  CMFCVisualManager::GetTasksPaneTaskHorzOffset  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nint GetTasksPaneTaskHorzOffset() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__gettaskspanevertmargin\"></a>  CMFCVisualManager::GetTasksPaneVertMargin  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nint GetTasksPaneVertMargin() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__gettoolbarbuttontextcolor\"></a>  CMFCVisualManager::GetToolbarButtonTextColor  \n The framework calls this method to determine the text color of a toolbar button.  \n  \n```  \nvirtual COLORREF GetToolbarButtonTextColor(\n    CMFCToolBarButton* pButton,  \n    CMFCVisualManager::AFX_BUTTON_STATE state);\n```  \n  \n### Parameters  \n [in] `pButton`  \n A pointer to the toolbar button.  \n  \n [in] `state`  \n The state of the toolbar button.  \n  \n### Return Value  \n The text color of `pButton` when it has the state indicated by `state`.  \n  \n### Remarks  \n The text color of a [CMFCToolBarButton Class](../../mfc/reference/cmfctoolbarbutton-class.md) object depends on the state of the button. The possible states of a toolbar button are `ButtonsIsRegular`, `ButtonsIsPressed`, or `ButtonsIsHighlighted`.  \n  \n Override this function to customize the text color of a toolbar button in your application.  \n  \n##  <a name=\"cmfcvisualmanager__gettoolbarcustomizebuttonmargin\"></a>  CMFCVisualManager::GetToolBarCustomizeButtonMargin  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual int GetToolBarCustomizeButtonMargin() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__gettoolbardisabledcolor\"></a>  CMFCVisualManager::GetToolbarDisabledColor  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual COLORREF GetToolbarDisabledColor() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__gettoolbardisabledtextcolor\"></a>  CMFCVisualManager::GetToolbarDisabledTextColor  \n The framework calls this function to determine the text color of toolbar buttons that are unavailable.  \n  \n```  \nvirtual COLORREF GetToolbarDisabledTextColor();\n```  \n  \n### Return Value  \n The color that the framework uses for the text color of toolbar buttons that are unavailable.  \n  \n### Remarks  \n Override this method in a custom visual manager to set the text color of toolbar buttons that are unavailable .  \n  \n##  <a name=\"cmfcvisualmanager__gettoolbarhighlightcolor\"></a>  CMFCVisualManager::GetToolbarHighlightColor  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual COLORREF GetToolbarHighlightColor();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__gettooltipinfo\"></a>  CMFCVisualManager::GetToolTipInfo  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL GetToolTipInfo(\n    CMFCToolTipInfo& params,  \n    UINT nType = (UINT)(-1));\n```  \n  \n### Parameters  \n [in] `params`  \n [in] `nType`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__hasoverlappedautohidebuttons\"></a>  CMFCVisualManager::HasOverlappedAutoHideButtons  \n Returns whether auto-hide buttons overlap in the current visual manager.  \n  \n```  \nvirtual BOOL HasOverlappedAutoHideButtons() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if auto-hide buttons overlap; `FALSE` if they do not.  \n  \n##  <a name=\"cmfcvisualmanager__isautodestroy\"></a>  CMFCVisualManager::IsAutoDestroy  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsAutoDestroy() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__isdefaultwinxppopupbutton\"></a>  CMFCVisualManager::IsDefaultWinXPPopupButton  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL IsDefaultWinXPPopupButton(CMFCDesktopAlertWndButton*) const;\n\n \n```  \n  \n### Parameters  \n [in] `CMFCDesktopAlertWndButton*`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__isdockingtabhasborder\"></a>  CMFCVisualManager::IsDockingTabHasBorder  \n Returns whether the current visual manager draws borders around panes that are docked and tabbed.  \n  \n```  \nvirtual BOOL IsDockingTabHasBorder();\n```  \n  \n### Return Value  \n `TRUE` if the visual manager draws borders around panes that are docked and tabbed; `FALSE` otherwise.  \n  \n### Remarks  \n Docked panes become tabbed when multiple panes are docked to the same location.  \n  \n##  <a name=\"cmfcvisualmanager__isembossdisabledimage\"></a>  CMFCVisualManager::IsEmbossDisabledImage  \n Specifies whether the framework embosses images that are unavailable.  \n  \n```  \nBOOL IsEmbossDisabledImage() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if the framework embosses images that are unavailable; otherwise 0.  \n  \n### Remarks  \n This method is called by [CMFCToolBarImages::Draw](../../mfc/reference/cmfctoolbarimages-class.md#cmfctoolbarimages__draw) when it draws an image on the toolbar that is unavailable.  \n  \n##  <a name=\"cmfcvisualmanager__isfadeinactiveimage\"></a>  CMFCVisualManager::IsFadeInactiveImage  \n The framework calls this method when it draws inactive images on the toolbar or in a menu.  \n  \n```  \nBOOL IsFadeInactiveImage() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if the framework uses the lighting effect when it draws inactive images on the toolbar or in a menu; otherwise 0.  \n  \n### Remarks  \n You can activate or deactivate the lighting effect by calling [CMFCVisualManager::SetFadeInactiveImage](#cmfcvisualmanager__setfadeinactiveimage). The lighting effect is what makes unavailable images appear faded.  \n  \n##  <a name=\"cmfcvisualmanager__isframemenucheckeditems\"></a>  CMFCVisualManager::IsFrameMenuCheckedItems  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsFrameMenuCheckedItems() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ishighlightonenotetabs\"></a>  CMFCVisualManager::IsHighlightOneNoteTabs  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL IsHighlightOneNoteTabs() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ishighlightwholemenuitem\"></a>  CMFCVisualManager::IsHighlightWholeMenuItem  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL IsHighlightWholeMenuItem();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__islayeredribbonkeytip\"></a>  CMFCVisualManager::IsLayeredRibbonKeyTip  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL IsLayeredRibbonKeyTip() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ismenuflatlook\"></a>  CMFCVisualManager::IsMenuFlatLook  \n Indicates whether menu buttons appear flat.  \n  \n```  \nBOOL IsMenuFlatLook() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if menu buttons appear flat; 0 otherwise.  \n  \n### Remarks  \n By default, menu buttons do not appear flat. Use the [CMFCVisualManager::SetMenuFlatLook](#cmfcvisualmanager__setmenuflatlook) method to change this behavior. When menu buttons appear flat, they do not change appearance when the user clicks on them.  \n  \n##  <a name=\"cmfcvisualmanager__isofficexpstylemenus\"></a>  CMFCVisualManager::IsOfficeXPStyleMenus  \n Indicates whether the visual manager implements Office XP-style menus.  \n  \n```  \nvirtual BOOL IsOfficeXPStyleMenus() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if the visual manager displays Office XP-style menus; otherwise 0.  \n  \n### Remarks  \n The [CMFCPopupMenu Class](../../mfc/reference/cmfcpopupmenu-class.md) calls this method when it has to draw the menu and shadow. By default, this method returns `FALSE`. If you want to use pop-up menus similar to the pop-up menus in Office XP, override this method in a custom visual manager and return `TRUE`.  \n  \n##  <a name=\"cmfcvisualmanager__isoffsetpressedbutton\"></a>  CMFCVisualManager::IsOffsetPressedButton  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL IsOffsetPressedButton() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__isownerdrawcaption\"></a>  CMFCVisualManager::IsOwnerDrawCaption  \n Indicates whether the current visual manager implements owner-drawn captions.  \n  \n```  \nvirtual BOOL IsOwnerDrawCaption();\n```  \n  \n### Return Value  \n `TRUE` if all the frame windows in the application have owner-draw captions; `FALSE` otherwise.  \n  \n##  <a name=\"cmfcvisualmanager__isownerdrawmenucheck\"></a>  CMFCVisualManager::IsOwnerDrawMenuCheck  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL IsOwnerDrawMenuCheck();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__isshadowhighlightedimage\"></a>  CMFCVisualManager::IsShadowHighlightedImage  \n Indicates whether the visual manager displays shadows when rendering highlighted images.  \n  \n```  \nBOOL IsShadowHighlightedImage() const;\n\n \n```  \n  \n### Return Value  \n Nonzero when the visual manager displays shadows under highlighted images; 0 otherwise.  \n  \n##  <a name=\"cmfcvisualmanager__istoolbarbuttonfillenabled\"></a>  CMFCVisualManager::IsToolbarButtonFillEnabled  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsToolbarButtonFillEnabled() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__istoolbarroundshape\"></a>  CMFCVisualManager::IsToolbarRoundShape  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL IsToolbarRoundShape(CMFCToolBar*);\n```  \n  \n### Parameters  \n [in] `CMFCToolBar*`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__iswindowsthemingsupported\"></a>  CMFCVisualManager::IsWindowsThemingSupported  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL IsWindowsThemingSupported() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__onactivateapp\"></a>  CMFCVisualManager::OnActivateApp  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnActivateApp(\n    CWnd* pWnd,  \n    BOOL bActive);\n```  \n  \n### Parameters  \n [in] `pWnd`  \n [in] `bActive`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ondrawautohidebuttonborder\"></a>  CMFCVisualManager::OnDrawAutoHideButtonBorder  \n The framework calls this method when it draws the border of an auto-hide button.  \n  \n```  \nvirtual void OnDrawAutoHideButtonBorder(\n    CDC* pDC,  \n    CRect rectBounds,  \n    CRect rectBorderSize,  \n    CMFCAutoHideButton* pButton);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rectBounds`  \n The size and location of the auto-hide button.  \n  \n [in] `rectBorderSize`  \n A [CRect](../../atl-mfc-shared/reference/crect-class.md) parameter that contains the sizes of the borders.  \n  \n [in] `pButton`  \n A pointer to the auto-hide button. The framework is drawing the border for this button.  \n  \n### Remarks  \n Override this method in a derived class if you want to customize the appearance of the border of an auto-hide button. By default, this method fills a flat border with the default shadow color for your application.  \n  \n The `rectBorderSize` parameter does not contain the coordinates of the border. It contains the size of the border in the `top`, `bottom`, `left`, and `right` data members. A value less than or equal to 0 indicates no border on that side of the auto-hide button.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawbargripper\"></a>  CMFCVisualManager::OnDrawBarGripper  \n Called by the framework when it draws the gripper for a control bar.  \n  \n```  \nvirtual void OnDrawBarGripper(\n    CDC* pDC,  \n    CRect rectGripper,  \n    BOOL bHorz,  \n    CBasePane* pBar);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to the device context for a control bar.  \n  \n [in] `rectGripper`  \n The bounding rectangle for the control bar.  \n  \n [in] `bHorz`  \n A Boolean parameter that specifies whether the control bar is docked horizontally or vertically.  \n  \n [in] `pBar`  \n A pointer to a control bar. The visual manager draws the gripper of this control bar.  \n  \n### Remarks  \n The default implementation of this method displays the standard gripper. To customize the appearance of the gripper, override this method in a custom class derived from the [CMFCVisualManager Class](../../mfc/reference/cmfcvisualmanager-class.md).  \n  \n##  <a name=\"cmfcvisualmanager__ondrawbrowsebutton\"></a>  CMFCVisualManager::OnDrawBrowseButton  \n The framework calls this method when it draws the browse button for an edit control.  \n  \n```  \nvirtual BOOL OnDrawBrowseButton(\n    CDC* pDC,  \n    CRect rect,  \n    CMFCEditBrowseCtrl* pEdit,  \n    CMFCVisualManager::AFX_BUTTON_STATE state,  \n    COLORREF& clrText);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n A rectangle that specifies the boundary for the browse button.  \n  \n [in] `pEdit`  \n A pointer to an edit control. The visual manager draws the browse button for this edit control.  \n  \n [in] `state`  \n An enumerated value that specifies the state of the button.  \n  \n [out] `clrText`  \n A reference to a [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter. This is a reserved value and is currently unused.  \n  \n### Return Value  \n `TRUE` if successful; otherwise `FALSE`.  \n  \n### Remarks  \n Override this function in a derived class if you want to customize the appearance of browse buttons in instances of the [CMFCEditBrowseCtrl Class](../../mfc/reference/cmfceditbrowsectrl-class.md). The possible values for the state of the button are `ButtonsIsRegular`, `ButtonsIsPressed`, and `ButtonsIsHighlighted`.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawbuttonborder\"></a>  CMFCVisualManager::OnDrawButtonBorder  \n The framework calls this method when it draws the border of a toolbar button.  \n  \n```  \nvirtual void OnDrawButtonBorder(\n    CDC* pDC,  \n    CMFCToolBarButton* pButton,  \n    CRect rect,  \n    CMFCVisualManager::AFX_BUTTON_STATE state);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to the device context of a toolbar button.  \n  \n [in] `pButton`  \n A pointer to a toolbar button. The framework draws the border of this button.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the toolbar button.  \n  \n [in] `state`  \n An enumerated data type that specifies the current state of the toolbar button.  \n  \n### Remarks  \n The default implementation of this method displays the standard border. Override this method in a derived visual manager to customize the appearance of the border of a toolbar button.  \n  \n The possible states of a toolbar button are `ButtonsIsRegular`, `ButtonsIsPressed`, or `ButtonsIsHighlighted`.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawbuttonseparator\"></a>  CMFCVisualManager::OnDrawButtonSeparator  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDrawButtonSeparator(\n    CDC* pDC,  \n    CMFCToolBarButton* pButton,  \n    CRect rect,  \n    CMFCVisualManager::AFX_BUTTON_STATE state,  \n    BOOL bHorz);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `pButton`  \n [in] `rect`  \n [in] `state`  \n [in] `bHorz`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ondrawcaptionbarborder\"></a>  CMFCVisualManager::OnDrawCaptionBarBorder  \n The framework calls this method when it draws the border of a [CMFCCaptionBar Class](../../mfc/reference/cmfccaptionbar-class.md) object.  \n  \n```  \nvirtual void OnDrawCaptionBarBorder(\n    CDC* pDC,  \n    CMFCCaptionBar* pBar,  \n    CRect rect,  \n    COLORREF clrBarBorder,  \n    BOOL bFlatBorder);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pBar`  \n A pointer to a `CMFCCaptionBar` object. The framework draws this caption bar.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the caption bar.  \n  \n [in] `clrBarBorder`  \n The color of the border.  \n  \n [in] `bFlatBorder`  \n A Boolean parameter that specifies whether the border has a flat, 2D appearance.  \n  \n### Remarks  \n Override this method in a derived class to customize the appearance of the border of a caption bar.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawcaptionbarbuttonborder\"></a>  CMFCVisualManager::OnDrawCaptionBarButtonBorder  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDrawCaptionBarButtonBorder(\n    CDC* pDC,  \n    CMFCCaptionBar* pBar,  \n    CRect rect,  \n    BOOL bIsPressed,  \n    BOOL bIsHighlighted,  \n    BOOL bIsDisabled,  \n    BOOL bHasDropDownArrow,  \n    BOOL bIsSysButton);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `pBar`  \n [in] `rect`  \n [in] `bIsPressed`  \n [in] `bIsHighlighted`  \n [in] `bIsDisabled`  \n [in] `bHasDropDownArrow`  \n [in] `bIsSysButton`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ondrawcaptionbarinfoarea\"></a>  CMFCVisualManager::OnDrawCaptionBarInfoArea  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDrawCaptionBarInfoArea(\n    CDC* pDC,  \n    CMFCCaptionBar* pBar,  \n    CRect rect);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `pBar`  \n [in] `rect`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ondrawcaptionbutton\"></a>  CMFCVisualManager::OnDrawCaptionButton  \n The framework calls this method when it draws a [CMFCCaptionButton](../../mfc/reference/cmfccaptionbutton-class.md) object.  \n  \n```  \nvirtual void OnDrawCaptionButton (\n    CDC* pDC,  \n    CMFCCaptionButton* pButton,  \n    BOOL bActive,  \n    BOOL bHorz,  \n    BOOL bMaximized,  \n    BOOL bDisabled,  \n    int nImageID = -1);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pButton`  \n A pointer to a `CMFCCaptionButton` object. The framework draws this caption button.  \n  \n [in] `bActive`  \n A Boolean parameter that specifies whether the button is active.  \n  \n [in] `bHorz`  \n A Boolean parameter that specifies whether the caption is horizontal.  \n  \n [in] `bMaximized`  \n A Boolean parameter that specifies whether the parent pane is maximized.  \n  \n [in] `bDisabled`  \n A Boolean parameter that specifies whether the caption button is disabled.  \n  \n [in] `nImageID`  \n The image index for the icon to use for the button. If `nImageID` is -1, this method uses the image index recorded in `pButton`.  \n  \n### Remarks  \n The default implementation of this method displays a small button from the global instance of the `CMenuImages` class. The buttons are listed in the header file for `CMenuImages`. Some examples include `CMenuImages::IdClose`, `CMenuImages::IdArowLeft`, `CMenuImages::IdArowRight`, `CMenuImages::IdArowDown`, `CMenuImages::IdArowUp`, and `CMenuImages::IdPinHorz`.  \n  \n Override this method in a derived class to customize the appearance of caption buttons.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawcheckbox\"></a>  CMFCVisualManager::OnDrawCheckBox  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDrawCheckBox(\n    CDC* pDC,  \n    CRect rect,  \n    BOOL bHighlighted,  \n    BOOL bChecked,  \n    BOOL bEnabled);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `rect`  \n [in] `bHighlighted`  \n [in] `bChecked`  \n [in] `bEnabled`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ondrawcheckboxex\"></a>  CMFCVisualManager::OnDrawCheckBoxEx  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDrawCheckBoxEx(\n    CDC* pDC,  \n    CRect rect,  \n    int nState,  \n    BOOL bHighlighted,  \n    BOOL bPressed,  \n    BOOL bEnabled);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `rect`  \n [in] `nState`  \n [in] `bHighlighted`  \n [in] `bPressed`  \n [in] `bEnabled`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ondrawcomboborder\"></a>  CMFCVisualManager::OnDrawComboBorder  \n The framework calls this method when it draws the border around an instance of the [CMFCToolBarComboBoxButton Class](../../mfc/reference/cmfctoolbarcomboboxbutton-class.md).  \n  \n```  \nvirtual void OnDrawComboBorder(\n    CDC* pDC,  \n    CRect rect,  \n    BOOL bDisabled,  \n    BOOL bIsDropped,  \n    BOOL bIsHighlighted,  \n    CMFCToolBarComboBoxButton* pButton);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to the device context of a combo box button.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the combo box button.  \n  \n [in] `bDisabled`  \n A Boolean parameter that indicates whether the combo box button is unavailable.  \n  \n [in] `bIsDropped`  \n A Boolean parameter that indicates whether the combo box is dropped down.  \n  \n [in] `bIsHighlighted`  \n A Boolean parameter that indicates whether the combo box button is highlighted.  \n  \n [in] `pButton`  \n A pointer to a `CMFCToolBarComboBoxButton` object. The framework draws this combo box button.  \n  \n### Remarks  \n Override this method in your derived visual manager to customize the appearance of the border of the combo box.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawcombodropbutton\"></a>  CMFCVisualManager::OnDrawComboDropButton  \n The framework calls this method when it draws the drop button of a [CMFCToolBarComboBoxButton](../../mfc/reference/cmfctoolbarcomboboxbutton-class.md).  \n  \n```  \nvirtual void OnDrawComboDropButton(\n    CDC* pDC,  \n    CRect rect,  \n    BOOL bDisabled,  \n    BOOL bIsDropped,  \n    BOOL bIsHighlighted,  \n    CMFCToolBarComboBoxButton* pButton);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the drop button.  \n  \n [in] `bDisabled`  \n A Boolean parameter that indicates whether the drop button is unavailable.  \n  \n [in] `bIsDropped`  \n A Boolean parameter that indicates whether the combo box is dropped down.  \n  \n [in] `bIsHighlighted`  \n A Boolean parameter that indicates whether the drop button is highlighted.  \n  \n [in] `pButton`  \n A pointer to a `CMFCToolBarComboBoxButton` object. The framework draws the drop button for this combo box button.  \n  \n### Remarks  \n Override this method in your derived visual manager to customize the appearance of the drop button of a combo box button.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawcontrolborder\"></a>  CMFCVisualManager::OnDrawControlBorder  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDrawControlBorder(CWnd* pWndCtrl);\n```  \n  \n### Parameters  \n [in] `pWndCtrl`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ondrawdefaultribbonimage\"></a>  CMFCVisualManager::OnDrawDefaultRibbonImage  \n The framework calls this method when it draws the default image that is used for the ribbon button.  \n  \n```  \nvirtual void OnDrawDefaultRibbonImage(\n    CDC* pDC,  \n    CRect rectImage,  \n    BOOL bIsDisabled = FALSE,  \n    BOOL bIsPressed = FALSE,  \n    BOOL bIsHighlighted = FALSE);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rectImage`  \n A rectangle that specifies the boundaries of the default image.  \n  \n [in] `bIsDisabled`  \n A Boolean parameter that indicates whether the ribbon button is unavailable.  \n  \n [in] `bIsPressed`  \n A Boolean parameter that indicates whether the ribbon button is pressed.  \n  \n [in] `bIsHighlighted`  \n A Boolean parameter that indicates whether the ribbon button is highlighted.  \n  \n### Remarks  \n Override this method in a derived visual manager if you want to customize the image that is used for the ribbon button.  \n  \n##  <a name=\"cmfcvisualmanager__ondraweditborder\"></a>  CMFCVisualManager::OnDrawEditBorder  \n The framework calls this method when it draws the border around an instance of the [CMFCToolBarEditBoxButton Class](../../mfc/reference/cmfctoolbareditboxbutton-class.md).  \n  \n```  \nvirtual void OnDrawEditBorder(\n    CDC* pDC,  \n    CRect rect,  \n    BOOL bDisabled,  \n    BOOL bIsHighlighted,  \n    CMFCToolBarEditBoxButton* pButton);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the `CMFCToolBarEditBoxButton` object.  \n  \n [in] `bDisabled`  \n A Boolean parameter that indicates whether the button is unavailable.  \n  \n [in] `bIsHighlighted`  \n A Boolean parameter that indicates whether the button is highlighted.  \n  \n [in] `pButton`  \n A pointer to a `CMFCToolBarEditBoxButton` object. The framework draws the border of this edit box button.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the border of a `CMFCToolBarEditBoxButton` object.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawexpandingbox\"></a>  CMFCVisualManager::OnDrawExpandingBox  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDrawExpandingBox(\n    CDC* pDC,  \n    CRect rect,  \n    BOOL bIsOpened,  \n    COLORREF colorBox);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `rect`  \n [in] `bIsOpened`  \n [in] `colorBox`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ondrawfloatingtoolbarborder\"></a>  CMFCVisualManager::OnDrawFloatingToolbarBorder  \n The framework calls this method when it draws the border of a floating toolbar.  \n  \n```  \nvirtual void OnDrawFloatingToolbarBorder(\n    CDC* pDC,  \n    CMFCBaseToolBar* pToolBar,  \n    CRect rectBorder,  \n    CRect rectBorderSize);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pToolBar`  \n A pointer to the floating toolbar.  \n  \n [in] `rectBorder`  \n A rectangle that specifies the boundaries of the floating toolbar.  \n  \n [in] `rectBorderSize`  \n A rectangle that specifies the border size of the toolbar.  \n  \n### Remarks  \n A floating toolbar is a toolbar that appears as a mini-frame window. Usually, this occurs when a user drags a toolbar so that it is no longer docked.  \n  \n The size of the border is specified by the corresponding parameter in `rectBorderSize`. For example, the width of the top border of the toolbar is specified by `rectBorderSize.top`.  \n  \n Override this method in a derived visual manager to customize the appearance of the border of a floating toolbar.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawheaderctrlborder\"></a>  CMFCVisualManager::OnDrawHeaderCtrlBorder  \n The framework calls this method when it draws the border around an instance of the [CMFCHeaderCtrl Class](../../mfc/reference/cmfcheaderctrl-class.md).  \n  \n```  \nvirtual void OnDrawHeaderCtrlBorder(\n    CMFCHeaderCtrl* pCtrl,  \n    CDC* pDC,  \n    CRect& rect,  \n    BOOL bIsPressed,  \n    BOOL bIsHighlighted);\n```  \n  \n### Parameters  \n [in] `pCtrl`  \n A pointer to a `CMFCHeaderCtrl` object. The framework draws the border of this header control.  \n  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the header control.  \n  \n [in] `bIsPressed`  \n A Boolean parameter that indicates whether the header control is pressed.  \n  \n [in] `bIsHighlighted`  \n A Boolean parameter that indicates whether the header control is highlighted.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the border of the header control.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawheaderctrlsortarrow\"></a>  CMFCVisualManager::OnDrawHeaderCtrlSortArrow  \n The framework calls this function when it draws the sort arrow of a header control.  \n  \n```  \nvirtual void OnDrawHeaderCtrlSortArrow(\n    CMFCHeaderCtrl* pCtrl,  \n    CDC* pDC,  \n    CRect& rect,  \n    BOOL bIsUp);\n```  \n  \n### Parameters  \n [in] `pCtrl`  \n A pointer to a header control. The visual manager draws the sort arrow of this [CMFCHeaderCtrl Class](../../mfc/reference/cmfcheaderctrl-class.md) object.  \n  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the sort arrow.  \n  \n [in] `bIsUp`  \n A Boolean that specifies the direction of the sort arrow.  \n  \n### Remarks  \n If `bIsUp` is `TRUE`, the visual manager draws an up sort arrow. If it is `FALSE`, the visual manager draws a down sort arrow. Override `OnDrawHeaderCtrlSortArrow` in a derived class to customize the appearance of the sort button.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawmenuarrowoncustomizelist\"></a>  CMFCVisualManager::OnDrawMenuArrowOnCustomizeList  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDrawMenuArrowOnCustomizeList(\n    CDC* pDC,  \n    CRect rectCommand,  \n    BOOL bSelected);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `rectCommand`  \n [in] `bSelected`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ondrawmenuborder\"></a>  CMFCVisualManager::OnDrawMenuBorder  \n The framework calls this method when it draws the border of a [CMFCPopupMenu](../../mfc/reference/cmfcpopupmenu-class.md).  \n  \n```  \nvirtual void OnDrawMenuBorder(\n    CDC* pDC,  \n    CMFCPopupMenu* pMenu,  \n    CRect rect);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to the device context for a `CMFCPopupMenu` object.  \n  \n [in] `pMenu`  \n A pointer to a `CMFCPopupMenu` object. The framework draws a border around this popup menu.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the popup menu.  \n  \n### Remarks  \n The default implementation of this method displays the standard menu border. Override this method in a derived visual manager to customize the appearance of the menu border.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawmenucheck\"></a>  CMFCVisualManager::OnDrawMenuCheck  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDrawMenuCheck(\n    CDC* pDC,  \n    CMFCToolBarMenuButton* pButton,  \n    CRect rect,  \n    BOOL bHighlight,  \n    BOOL bIsRadio);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `pButton`  \n [in] `rect`  \n [in] `bHighlight`  \n [in] `bIsRadio`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ondrawmenuitembutton\"></a>  CMFCVisualManager::OnDrawMenuItemButton  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDrawMenuItemButton(\n    CDC* pDC,  \n    CMFCToolBarMenuButton* pButton,  \n    CRect rectButton,  \n    BOOL bHighlight,  \n    BOOL bDisabled);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `pButton`  \n [in] `rectButton`  \n [in] `bHighlight`  \n [in] `bDisabled`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ondrawmenulabel\"></a>  CMFCVisualManager::OnDrawMenuLabel  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual COLORREF OnDrawMenuLabel(\n    CDC* pDC,  \n    CRect rect);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `rect`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ondrawmenuresizebar\"></a>  CMFCVisualManager::OnDrawMenuResizeBar  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDrawMenuResizeBar(\n    CDC* pDC,  \n    CRect rect,  \n    int nResizeFlags);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `rect`  \n [in] `nResizeFlags`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ondrawmenuscrollbutton\"></a>  CMFCVisualManager::OnDrawMenuScrollButton  \n The framework calls this method when it draws a menu scroll button.  \n  \n```  \nvirtual void OnDrawMenuScrollButton(\n    CDC* pDC,  \n    CRect rect,  \n    BOOL bIsScrollDown,  \n    BOOL bIsHighlited,  \n    BOOL bIsPressed,  \n    BOOL bIsDisabled);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the scroll button.  \n  \n [in] `bIsScrollDown`  \n A Boolean that indicates which type of button the visual manager draws. A value of `TRUE` indicates the visual manager draws a down button.  \n  \n [in] `bIsHighlited`  \n A Boolean that indicates whether the button is highlighted.  \n  \n [in] `bIsPressed`  \n A Boolean that indicates whether the button is pressed.  \n  \n [in] `bIsDisabled`  \n A Boolean that indicates whether the button is disabled.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the appearance of menu scroll buttons. Menu scroll buttons appear on the edge of pop-up menus when the total height of the menu items exceeds the height of the pop-up menu.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawmenushadow\"></a>  CMFCVisualManager::OnDrawMenuShadow  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDrawMenuShadow(\n    CDC* pDC,  \n    const CRect& rectClient,  \n    const CRect& rectExclude,  \n    int nDepth,  \n    int iMinBrightness,  \n    int iMaxBrightness,  \n    CBitmap* pBmpSaveBottom,  \n    CBitmap* pBmpSaveRight,  \n    BOOL bRTL);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `rectClient`  \n [in] `rectExclude`  \n [in] `nDepth`  \n [in] `iMinBrightness`  \n [in] `iMaxBrightness`  \n [in] `pBmpSaveBottom`  \n [in] `pBmpSaveRight`  \n [in] `bRTL`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ondrawmenusystembutton\"></a>  CMFCVisualManager::OnDrawMenuSystemButton  \n The framework calls this method when it draws a menu system button for the application.  \n  \n```  \nvirtual void OnDrawMenuSystemButton(\n    CDC* pDC,  \n    CRect rect,  \n    UINT uiSystemCommand,  \n    UINT nStyle,  \n    BOOL bHighlight);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the button.  \n  \n [in] `uiSystemCommand`  \n A flag that specifies which system command is associated with the button. Possible values are SC_CLOSE, SC_MINIMIZE, and SC_RESTORE.  \n  \n [in] `nStyle`  \n A flag that specifies the current style of the button. Possible values are TBBS_PRESSED, TBBS_DISABLED, and 0.  \n  \n [in] `bHighlight`  \n A Boolean parameter that specifies whether the button is highlighted.  \n  \n### Remarks  \n The menu system buttons are the **Close**, **Minimize**, **Maximize**, and **Restore** buttons located on the title bar.  \n  \n The default implementation for this method calls [CDC::DrawFrameControl](../../mfc/reference/cdc-class.md#cdc__drawframecontrol) with the `DFC_CAPTION` type. Override this method in your derived visual manager class to customize the appearance of system buttons.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawminiframeborder\"></a>  CMFCVisualManager::OnDrawMiniFrameBorder  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDrawMiniFrameBorder(\n    CDC* pDC,  \n    CPaneFrameWnd* pFrameWnd,  \n    CRect rectBorder,  \n    CRect rectBorderSize);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `pFrameWnd`  \n [in] `rectBorder`  \n [in] `rectBorderSize`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ondrawoutlookbarsplitter\"></a>  CMFCVisualManager::OnDrawOutlookBarSplitter  \n The framework calls this method when it draws the splitter for an Outlook bar.  \n  \n```  \nvirtual void OnDrawOutlookBarSplitter(\n    CDC* pDC,  \n    CRect rectSplitter);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rectSplitter`  \n A rectangle that specifies the boundaries of the splitter.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the appearance of splitters on an Outlook bar.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawoutlookpagebuttonborder\"></a>  CMFCVisualManager::OnDrawOutlookPageButtonBorder  \n Called by the framework when it draws the border of an Outlook page button.  \n  \n```  \nvirtual void OnDrawOutlookPageButtonBorder(\n    CDC* pDC,  \n    CRect& rectBtn,  \n    BOOL bIsHighlighted,  \n    BOOL bIsPressed);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rectBtn`  \n A rectangle that specifies the boundary of the Outlook page button.  \n  \n [in] `bIsHighlighted`  \n A Boolean that specifies whether the button is highlighted.  \n  \n [in] `bIsPressed`  \n A Boolean that specifies whether the button is pressed.  \n  \n### Remarks  \n Override this method in a custom visual manager to change the appearance of the Outlook page button.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawpaneborder\"></a>  CMFCVisualManager::OnDrawPaneBorder  \n The framework calls this method when it draws the border of a [CPane Class](../../mfc/reference/cpane-class.md) object.  \n  \n```  \nvirtual void OnDrawPaneBorder(\n    CDC* pDC,  \n    CBasePane* pBar,  \n    CRect& rect);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to the device context of a control bar.  \n  \n [in] `pBar`  \n A pointer to a pane. The visual manager draws the border of this pane.  \n  \n [in] `rect`  \n A rectangle that indicates the boundaries of the pane.  \n  \n### Remarks  \n The default implementation of this method displays the standard border. Override this method in a derived class to customize the appearance of the border.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawpanecaption\"></a>  CMFCVisualManager::OnDrawPaneCaption  \n The framework calls this method when it draws a caption for an instance of the [CDockablePane Class](../../mfc/reference/cdockablepane-class.md).  \n  \n```  \nvirtual COLORREF OnDrawPaneCaption(\n    CDC* pDC,  \n    CDockablePane* pBar,  \n    BOOL bActive,  \n    CRect rectCaption,  \n    CRect rectButtons);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pBar`  \n A pointer to a `CDockablePane` object. The framework draws the caption for this pane.  \n  \n [in] `bActive`  \n A Boolean parameter that indicates whether the control bar is active.  \n  \n [in] `rectCaption`  \n A rectangle that specifies the boundaries of the caption.  \n  \n [in] `rectButtons`  \n A rectangle that specifies the boundaries of the caption buttons.  \n  \n### Return Value  \n A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter that indicates the text color of the caption.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the appearance of pane captions.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawpanedivider\"></a>  CMFCVisualManager::OnDrawPaneDivider  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDrawPaneDivider(\n    CDC* pDC,  \n    CPaneDivider* pSlider,  \n    CRect rect,  \n    BOOL bAutoHideMode);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `pSlider`  \n [in] `rect`  \n [in] `bAutoHideMode`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ondrawpopupwindowborder\"></a>  CMFCVisualManager::OnDrawPopupWindowBorder  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDrawPopupWindowBorder(\n    CDC* pDC,  \n    CRect rect);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `rect`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ondrawpopupwindowbuttonborder\"></a>  CMFCVisualManager::OnDrawPopupWindowButtonBorder  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDrawPopupWindowButtonBorder(\n    CDC* pDC,  \n    CRect rectClient,  \n    CMFCDesktopAlertWndButton* pButton);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `rectClient`  \n [in] `pButton`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ondrawpopupwindowcaption\"></a>  CMFCVisualManager::OnDrawPopupWindowCaption  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual COLORREF OnDrawPopupWindowCaption(\n    CDC* pDC,  \n    CRect rectCaption,  \n    CMFCDesktopAlertWnd* pPopupWnd);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `rectCaption`  \n [in] `pPopupWnd`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ondrawribbonapplicationbutton\"></a>  CMFCVisualManager::OnDrawRibbonApplicationButton  \n The framework calls this method when it draws the **Main Button** on the ribbon.  \n  \n```  \nvirtual void OnDrawRibbonApplicationButton(\n    CDC* pDC,  \n    CMFCRibbonButton* pButton);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pButton`  \n A pointer to the **Main Button** on the ribbon.  \n  \n### Remarks  \n Override this method in a derived visual manager if you want to customize the appearance of the **Main Button**.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawribbonbuttonborder\"></a>  CMFCVisualManager::OnDrawRibbonButtonBorder  \n The framework calls this method when it draws the border of a button on the ribbon.  \n  \n```  \nvirtual void OnDrawRibbonButtonBorder(\n    CDC* pDC,  \n    CMFCRibbonButton* pButton);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pButton`  \n A pointer to a [CMFCRibbonButton](../../mfc/reference/cmfcribbonbutton-class.md) object. The framework draws the border for this ribbon button.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the appearance of a `CMFCRibbonButton`.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawribbonbuttonsgroup\"></a>  CMFCVisualManager::OnDrawRibbonButtonsGroup  \n The framework calls this method when it draws a group of buttons on the ribbon.  \n  \n```  \nvirtual COLORREF OnDrawRibbonButtonsGroup(\n    CDC* pDC,  \n    CMFCRibbonButtonsGroup* pGroup,  \n    CRect rectGroup);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pGroup`  \n A pointer to a group of buttons on the ribbon. The framework draws this group of buttons.  \n  \n [in] `rectGroup`  \n A rectangle that specifies the boundaries of the group.  \n  \n### Return Value  \n A reserved value. The default implementation returns -1.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the appearance of a group of buttons on the ribbon.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawribboncaption\"></a>  CMFCVisualManager::OnDrawRibbonCaption  \n The framework calls this method when it draws the caption bar of the main frame window. The framework calls this method only if the ribbon is integrated with the main frame.  \n  \n```  \nvirtual void OnDrawRibbonCaption(\n    CDC* pDC,  \n    CMFCRibbonBar* pBar,  \n    CRect rect,  \n    CRect rectText);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pBar`  \n A pointer to a ribbon bar. The visual manager draws this ribbon bar.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the ribbon bar.  \n  \n [in] `rectText`  \n A rectangle that specifies the boundaries for the text of the caption bar.  \n  \n### Remarks  \n Override this function in a derived visual manager to customize the appearance of the caption bar. This method affects the caption bar only if the ribbon is integrated with the main frame window.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawribboncaptionbutton\"></a>  CMFCVisualManager::OnDrawRibbonCaptionButton  \n The framework calls this method when it draws a caption button located on the ribbon bar.  \n  \n```  \nvirtual void OnDrawRibbonCaptionButton(\n    CDC* pDC,  \n    CMFCRibbonCaptionButton* pButton);\n```  \n  \n### Parameters  \n `pDC`  \n A pointer to a device context.  \n  \n `pButton`  \n A pointer to a `CMFCRibbonCaptionButton` class. The framework draws this caption button.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the appearance of a caption button on the ribbon.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawribboncategory\"></a>  CMFCVisualManager::OnDrawRibbonCategory  \n The framework calls this method when it draws a [CMFCRibbonCategory](../../mfc/reference/cmfcribboncategory-class.md) object.  \n  \n```  \nvirtual void OnDrawRibbonCategory(\n    CDC* pDC,  \n    CMFCRibbonCategory* pCategory,  \n    CRect rectCategory);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pCategory`  \n A pointer to a `CMFCRibbonCategory` object. The framework draws this ribbon category.  \n  \n [in] `rectCategory`  \n A rectangle that specifies the boundary of all the category panels on the ribbon.  \n  \n### Remarks  \n A ribbon category is a logical grouping of menu commands. For more information about ribbon categories, see [CMFCRibbonCategory Class](../../mfc/reference/cmfcribboncategory-class.md).  \n  \n Override this method in a derived visual manager to customize the appearance of a ribbon category.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawribboncategorycaption\"></a>  CMFCVisualManager::OnDrawRibbonCategoryCaption  \n The framework calls this method when it draws the caption bar for a ribbon category.  \n  \n```  \nvirtual COLORREF OnDrawRibbonCategoryCaption(\n    CDC* pDC,  \n    CMFCRibbonContextCaption* pContextCaption);\n```  \n  \n### Parameters  \n [in] `pDC`  \n The drawing context.  \n  \n [in] `pContextCaption`  \n A pointer to a caption bar. The visual manager draws this [CMFCRibbonContextCaption Class](../../mfc/reference/cmfcribboncontextcaption-class.md) object.  \n  \n### Return Value  \n A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter that indicates the color of the text on the caption bar.  \n  \n### Remarks  \n Override this method in a derived class to customize the appearance of the caption bar for a ribbon category. For more information about the caption bar, see [CMFCRibbonContextCaption Class](../../mfc/reference/cmfcribboncontextcaption-class.md).  \n  \n##  <a name=\"cmfcvisualmanager__ondrawribboncategoryscroll\"></a>  CMFCVisualManager::OnDrawRibbonCategoryScroll  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDrawRibbonCategoryScroll(\n    CDC* pDC,  \n    CRibbonCategoryScroll* pScroll);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `pScroll`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ondrawribboncategorytab\"></a>  CMFCVisualManager::OnDrawRibbonCategoryTab  \n The framework calls this method when it draws the tab for a ribbon category.  \n  \n```  \nvirtual COLORREF OnDrawRibbonCategoryTab(\n    CDC* pDC,  \n    CMFCRibbonTab* pTab,  \n    BOOL bIsActive);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pTab`  \n A pointer to an instance of the `CMFCRibbonTab` class. The framework draws this tab.  \n  \n [in] `bIsActive`  \n A Boolean parameter that indicates whether the tab is active.  \n  \n### Return Value  \n The color that is used for text on the ribbon category tab.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the appearance of a ribbon category tab. For more information about ribbon categories, see [CMFCRibbonCategory Class](../../mfc/reference/cmfcribboncategory-class.md).  \n  \n##  <a name=\"cmfcvisualmanager__ondrawribboncheckboxonlist\"></a>  CMFCVisualManager::OnDrawRibbonCheckBoxOnList  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDrawRibbonCheckBoxOnList(\n    CDC* pDC,  \n    CMFCRibbonCheckBox* pCheckBox,  \n    CRect rect,  \n    BOOL bIsSelected,  \n    BOOL bHighlighted);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `pCheckBox`  \n [in] `rect`  \n [in] `bIsSelected`  \n [in] `bHighlighted`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ondrawribboncolorpalettebox\"></a>  CMFCVisualManager::OnDrawRibbonColorPaletteBox  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDrawRibbonColorPaletteBox(\n    CDC* pDC,  \n    CMFCRibbonColorButton* pColorButton,  \n    CMFCRibbonGalleryIcon* pIcon,  \n    COLORREF color,  \n    CRect rect,  \n    BOOL bDrawTopEdge,  \n    BOOL bDrawBottomEdge,  \n    BOOL bIsHighlighted,  \n    BOOL bIsChecked,  \n    BOOL bIsDisabled);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `pColorButton`  \n [in] `pIcon`  \n [in] `color`  \n [in] `rect`  \n [in] `bDrawTopEdge`  \n [in] `bDrawBottomEdge`  \n [in] `bIsHighlighted`  \n [in] `bIsChecked`  \n [in] `bIsDisabled`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ondrawribbondefaultpanebutton\"></a>  CMFCVisualManager::OnDrawRibbonDefaultPaneButton  \n The framework calls this method when it draws the default button for the ribbon pane.  \n  \n```  \nvirtual void OnDrawRibbonDefaultPaneButton(\n    CDC* pDC,  \n    CMFCRibbonButton* pButton);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pButton`  \n A pointer to the default button for the ribbon pane.  \n  \n### Remarks  \n The framework displays the default button when a ribbon pane is resized to its minimal size and there is no area to display the content for the panel. When the user clicks on the default button, the framework displays a drop down menu that contains the content for the panel.  \n  \n Override this method in a derived visual manager to customize the appearance of the default button.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawribbondefaultpanebuttoncontext\"></a>  CMFCVisualManager::OnDrawRibbonDefaultPaneButtonContext  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDrawRibbonDefaultPaneButtonContext(\n    CDC* pDC,  \n    CMFCRibbonButton* pButton);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `pButton`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ondrawribbondefaultpanebuttonindicator\"></a>  CMFCVisualManager::OnDrawRibbonDefaultPaneButtonIndicator  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDrawRibbonDefaultPaneButtonIndicator(\n    CDC* pDC,  \n    CMFCRibbonButton* pButton,  \n    CRect rect,  \n    BOOL bIsSelected,  \n    BOOL bHighlighted);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `pButton`  \n [in] `rect`  \n [in] `bIsSelected`  \n [in] `bHighlighted`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ondrawribbongalleryborder\"></a>  CMFCVisualManager::OnDrawRibbonGalleryBorder  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDrawRibbonGalleryBorder(\n    CDC* pDC,  \n    CMFCRibbonGallery* pButton,  \n    CRect rectBorder);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `pButton`  \n [in] `rectBorder`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ondrawribbongallerybutton\"></a>  CMFCVisualManager::OnDrawRibbonGalleryButton  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDrawRibbonGalleryButton(\n    CDC* pDC,  \n    CMFCRibbonGalleryIcon* pButton);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `pButton`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ondrawribbonkeytip\"></a>  CMFCVisualManager::OnDrawRibbonKeyTip  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDrawRibbonKeyTip(\n    CDC* pDC,  \n    CMFCRibbonBaseElement* pElement,  \n    CRect rect,  \n    CString str);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `pElement`  \n [in] `rect`  \n [in] `str`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ondrawribbonlabel\"></a>  CMFCVisualManager::OnDrawRibbonLabel  \n The framework calls this method when it draws the label of the ribbon.  \n  \n```  \nvirtual void OnDrawRibbonLabel(\n    CDC* pDC,  \n    CMFCRibbonLabel* pLabel,  \n    CRect rect);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pLabel`  \n A pointer to a [CMFCRibbonLabel](../../mfc/reference/cmfcribbonlabel-class.md) object. The framework draws this ribbon label.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the ribbon panel.  \n  \n### Remarks  \n Override this method in a derived class to customize the ribbon label.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawribbonmainpanelbuttonborder\"></a>  CMFCVisualManager::OnDrawRibbonMainPanelButtonBorder  \n The framework calls this method when it draws the border of a [CMFCRibbonButton](../../mfc/reference/cmfcribbonbutton-class.md) that is positioned on the **Main** panel.  \n  \n```  \nvirtual void OnDrawRibbonMainPanelButtonBorder(\n    CDC* pDC,  \n    CMFCRibbonButton* pButton);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pButton`  \n A pointer to a `CMFCRibbonButton` located on the main panel of the ribbon. The framework draws the border for this button.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the appearance of the border for a `CMFCRibbonButton` on the **Main** panel.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawribbonmainpanelframe\"></a>  CMFCVisualManager::OnDrawRibbonMainPanelFrame  \n The framework calls this method when it draws the frame around the [CMFCRibbonMainPanel](../../mfc/reference/cmfcribbonmainpanel-class.md).  \n  \n```  \nvirtual void OnDrawRibbonMainPanelFrame(\n    CDC* pDC,  \n    CMFCRibbonMainPanel* pPanel,  \n    CRect rect);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pPanel`  \n A pointer to the `CMFCRibbonMainPanel`.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the `CMFCRibbonMainPanel`.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the appearance of the frame for the `CMFCRibbonMainPanel`.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawribbonmenucheckframe\"></a>  CMFCVisualManager::OnDrawRibbonMenuCheckFrame  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDrawRibbonMenuCheckFrame(\n    CDC* pDC,  \n    CMFCRibbonButton* pButton,  \n    CRect rect);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `pButton`  \n [in] `rect`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ondrawribbonpanel\"></a>  CMFCVisualManager::OnDrawRibbonPanel  \n The framework calls this method when it draws a [CMFCRibbonPanel](../../mfc/reference/cmfcribbonpanel-class.md) object.  \n  \n```  \nvirtual COLORREF OnDrawRibbonPanel(\n    CDC* pDC,  \n    CMFCRibbonPanel* pPanel,  \n    CRect rectPanel,  \n    CRect rectCaption);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pPanel`  \n A pointer to a `CMFCRibbonPanel` object. The framework draws this ribbon panel.  \n  \n [in] `rectPanel`  \n A rectangle that specifies the boundaries of the panel.  \n  \n [in] `rectCaption`  \n A rectangle that specifies the boundaries of the caption for the panel.  \n  \n### Return Value  \n The color of text on the ribbon panel.  \n  \n### Remarks  \n Override this method in a derived class to customize the appearance of a ribbon panel.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawribbonpanelcaption\"></a>  CMFCVisualManager::OnDrawRibbonPanelCaption  \n The framework calls this method when it draws the caption of a [CMFCRibbonPanel Class](../../mfc/reference/cmfcribbonpanel-class.md).  \n  \n```  \nvirtual void OnDrawRibbonPanelCaption(\n    CDC* pDC,  \n    CMFCRibbonPanel* pPanel,  \n    CRect rectCaption);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pPanel`  \n A pointer to a `CMFCRibbonPanel` object. The framework draws the caption for this ribbon panel.  \n  \n [in] `rectCaption`  \n A rectangle that specifies the boundaries of the caption for the ribbon panel.  \n  \n### Remarks  \n Override this method in a derived class to customize the appearance of captions for ribbon panels.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawribbonprogressbar\"></a>  CMFCVisualManager::OnDrawRibbonProgressBar  \n The framework calls this method when it draws a [CMFCRibbonProgressBar Class](../../mfc/reference/cmfcribbonprogressbar-class.md).  \n  \n```  \nvirtual void OnDrawRibbonProgressBar(\n    CDC* pDC,  \n    CMFCRibbonProgressBar* pProgress,  \n    CRect rectProgress,  \n    CRect rectChunk,  \n    BOOL bInfiniteMode);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pProgress`  \n A pointer to a `CMFCRibbonProgressBar` object. The framework draws this progress bar.  \n  \n [in] `rectProgress`  \n A rectangle that specifies the boundaries of the progress bar.  \n  \n [in] `rectChunk`  \n A rectangle that specifies the boundaries of the area surrounding the progress bar.  \n  \n [in] `bInfiniteMode`  \n A Boolean parameter that indicates the mode of the progress bar. A value of `TRUE` means the bar is in infinite mode. The default implementation does not use this parameter.  \n  \n### Remarks  \n Override this method in a derived class to customize the appearance of a progress bar.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawribbonquickaccesstoolbarseparator\"></a>  CMFCVisualManager::OnDrawRibbonQuickAccessToolBarSeparator  \n The framework calls this method when it draws a separator on the **Quick Access Toolbar** of a ribbon.  \n  \n```  \nvirtual void OnDrawRibbonQuickAccessToolBarSeparator(\n    CDC* pDC,  \n    CMFCRibbonSeparator* pSeparator,  \n    CRect rect);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pSeparator`  \n A pointer to a [CMFCRibbonSeparator](../../mfc/reference/cmfcribbonseparator-class.md) object. The framework draws this ribbon separator.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the separator.  \n  \n### Remarks  \n Override this method in a derived class to customize the appearance of ribbon separators on the **Quick Access Toolbar**.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawribbonrecentfilesframe\"></a>  CMFCVisualManager::OnDrawRibbonRecentFilesFrame  \n The framework calls this method when it draws a frame around a list of recent files.  \n  \n```  \nvirtual void OnDrawRibbonRecentFilesFrame(\n    CDC* pDC,  \n    CMFCRibbonMainPanel* pPanel,  \n    CRect rect);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pPanel`  \n A pointer to the **Main** panel on the ribbon.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the frame for the list of recent files.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the appearance of the list of recent files.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawribbonsliderchannel\"></a>  CMFCVisualManager::OnDrawRibbonSliderChannel  \n The framework calls this method when it draws the channel of a [CMFCRibbonSlider Class](../../mfc/reference/cmfcribbonslider-class.md).  \n  \n```  \nvirtual void OnDrawRibbonSliderChannel(\n    CDC* pDC,  \n    CMFCRibbonSlider* pSlider,  \n    CRect rect);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pSlider`  \n A pointer to a CMFCRibbonSlider object. The framework draws the channel for this ribbon slider.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries for the channel of the ribbon slider.  \n  \n### Remarks  \n Override this method in a derived class to customize the appearance of the channel of the ribbon slider.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawribbonsliderthumb\"></a>  CMFCVisualManager::OnDrawRibbonSliderThumb  \n The framework calls this method when it draws the thumb of a [CMFCRibbonSlider](../../mfc/reference/cmfcribbonslider-class.md) object.  \n  \n```  \nvirtual void OnDrawRibbonSliderThumb(\n    CDC* pDC,  \n    CMFCRibbonSlider* pSlider,  \n    CRect rect,  \n    BOOL bIsHighlighted,  \n    BOOL bIsPressed,  \n    BOOL bIsDisabled);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pSlider`  \n A pointer to a `CMFCRibbonSlider`. The framework draws the thumb for this ribbon slider.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the thumb for the ribbon slider.  \n  \n [in] `bIsHighlighted`  \n A Boolean parameter that indicates if the thumb is highlighted.  \n  \n [in] `bIsPressed`  \n A Boolean parameter that indicates if the thumb is pressed.  \n  \n [in] `bIsDisabled`  \n A Boolean parameter that indicates if the thumb is unavailable.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the appearance of the thumb for a `CMFCRibbonSlider`.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawribbonsliderzoombutton\"></a>  CMFCVisualManager::OnDrawRibbonSliderZoomButton  \n The framework calls this method when it draws the zoom buttons for a [CMFCRibbonSlider](../../mfc/reference/cmfcribbonslider-class.md) object.  \n  \n```  \nvirtual void OnDrawRibbonSliderZoomButton(\n    CDC* pDC,  \n    CMFCRibbonSlider* pSlider,  \n    CRect rect,  \n    BOOL bIsZoomOut,  \n    BOOL bIsHighlighted,  \n    BOOL bIsPressed,  \n    BOOL bIsDisabled);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pSlider`  \n A pointer to a `CMFCRibbonSlider` object. The framework draws this ribbon slider.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the zoom buttons on the ribbon slider.  \n  \n [in] `bIsZoomOut`  \n A Boolean parameter that indicates which button the framework draws. A value of `TRUE` indicates the left button with a \"-\" for zoom out. A value of `FALSE` indicates the right button with a \"+\" for zoom in.  \n  \n [in] `bIsHighlighted`  \n A Boolean parameter that indicates whether the button is highlighted.  \n  \n [in] `bIsPressed`  \n A Boolean parameter that indicates whether the button is pressed.  \n  \n [in] `bIsDisabled`  \n A Boolean parameter that indicates whether the button is unavailable.  \n  \n### Remarks  \n By default, the zoom buttons on the ribbon slider are a circle with either a + or - sign in the center. To customize the appearance of zoom buttons, override this method in a derived visual manager.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawribbonstatusbarpane\"></a>  CMFCVisualManager::OnDrawRibbonStatusBarPane  \n The framework calls this method when it draws a pane on the status bar.  \n  \n```  \nvirtual COLORREF OnDrawRibbonStatusBarPane(\n    CDC* pDC,  \n    CMFCRibbonStatusBar* pBar,  \n    CMFCRibbonStatusBarPane* pPane);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pBar`  \n A pointer to the status bar that contains the pane.  \n  \n [in] `pPane`  \n A pointer to a status bar pane. The framework draws this [CMFCRibbonStatusBarPane](../../mfc/reference/cmfcribbonstatusbarpane-class.md) object.  \n  \n### Return Value  \n A reserved value. The default implementation returns -1.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the appearance of a pane on the status bar.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawribbontabsframe\"></a>  CMFCVisualManager::OnDrawRibbonTabsFrame  \n The framework calls this method when it draws the frame around a set of ribbon tabs.  \n  \n```  \nvirtual COLORREF OnDrawRibbonTabsFrame(\n    CDC* pDC,  \n    CMFCRibbonBar* pWndRibbonBar,  \n    CRect rectTab);\n```  \n  \n### Parameters  \n `pDC`  \n A pointer to a device context.  \n  \n `pWndRibbonBar`  \n A pointer to a [CMFCRibbonBar](../../mfc/reference/cmfcribbonbar-class.md) object. The framework draws the frame for this ribbon bar.  \n  \n `rectTab`  \n A rectangle that specifies the boundaries of the ribbon tabs.  \n  \n### Return Value  \n A reserved value. By default, this method returns -1.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the frame around a set of tabs on the ribbon.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawscrollbuttons\"></a>  CMFCVisualManager::OnDrawScrollButtons  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDrawScrollButtons(\n    CDC* pDC,  \n    const CRect& rect,  \n    const int nBorderSize,  \n    int iImage,  \n    BOOL bHilited);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `rect`  \n [in] `nBorderSize`  \n [in] `iImage`  \n [in] `bHilited`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ondrawseparator\"></a>  CMFCVisualManager::OnDrawSeparator  \n The framework calls this method when it draws a separator.  \n  \n```  \nvirtual void OnDrawSeparator(\n    CDC* pDC,  \n    CBasePane* pBar,  \n    CRect rect,  \n    BOOL bIsHoriz);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to the device context for a control bar.  \n  \n [in] `pBar`  \n A pointer to a pane that contains the separator.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the separator.  \n  \n [in] `bIsHoriz`  \n A Boolean parameter that indicates the orientation of a docked pane. A value of `TRUE` indicates that the pane is docked horizontally. A value of `FALSE` indicates that the pane is docked vertically.  \n  \n### Remarks  \n Separators are used on control bars to separate groups of related icons. The default implementation for this method displays the standard separator. Override this method in a derived visual manager to customize the appearance of the separator.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawshowallmenuitems\"></a>  CMFCVisualManager::OnDrawShowAllMenuItems  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDrawShowAllMenuItems(\n    CDC* pDC,  \n    CRect rect,  \n    CMFCVisualManager::AFX_BUTTON_STATE state);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `rect`  \n [in] `state`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ondrawspinbuttons\"></a>  CMFCVisualManager::OnDrawSpinButtons  \n The framework calls this method when it draws an instance of the [CMFCSpinButtonCtrl Class](../../mfc/reference/cmfcspinbuttonctrl-class.md).  \n  \n```  \nvirtual void OnDrawSpinButtons(\n    CDC* pDC,  \n    CRect rectSpin,  \n    int nState,  \n    BOOL bOrientation,  \n    CMFCSpinButtonCtrl* pSpinCtrl);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rectSpin`  \n A rectangle that specifies the boundaries of the spin control.  \n  \n [in] `nState`  \n A flag that indicates the state of the spin control. See the Remarks section for more information.  \n  \n [in] `bOrientation`  \n A Boolean parameter that specifies the orientation of the spin control. A value of `TRUE` indicates the spin control is horizontal. Otherwise, it is vertical.  \n  \n [in] `pSpinCtrl`  \n A pointer to a spin control. The framework draws the buttons for this control.  \n  \n### Remarks  \n The `nState` parameter indicates the state of the spin control. The parameter is one of the following values:  \n  \n-   AFX_SPIN_PRESSEDUP  \n  \n-   AFX_SPIN_PRESSEDDOWN  \n  \n-   AFX_SPIN_HIGHLIGHTEDUP  \n  \n-   AFX_SPIN_HIGHLIGHTEDDOWN  \n  \n-   AFX_SPIN_DISABLED  \n  \n Override this method in a derived visual manager to customize the appearance of a spin control.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawsplitterborder\"></a>  CMFCVisualManager::OnDrawSplitterBorder  \n The framework calls this method when it draws the border around an instance of the [CSplitterWndEx Class](csplitterwndex-class.md).  \n  \n```  \nvirtual void OnDrawSplitterBorder(\n    CDC* pDC,  \n    CSplitterWndEx* pSplitterWnd,  \n    CRect rect);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pSplitterWnd`  \n A pointer to a splitter window. The framework draws the border for this window.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the splitter window.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the appearance of the border for a splitter window.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawsplitterbox\"></a>  CMFCVisualManager::OnDrawSplitterBox  \n The framework calls this method when it draws the drag box for an instance of the [CSplitterWndEx Class](csplitterwndex-class.md). The drag box appears when the user selects the splitter bar and changes the dimensions of the child windows.  \n  \n```  \nvirtual void OnDrawSplitterBox(\n    CDC* pDC,  \n    CSplitterWndEx* pSplitterWnd,  \n    CRect& rect);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pSplitterWnd`  \n A pointer to a splitter window. The framework draws the box for this splitter window.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the splitter window.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the appearance of the drag box for a splitter window.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawstatusbarpaneborder\"></a>  CMFCVisualManager::OnDrawStatusBarPaneBorder  \n The framework calls this method when it draws the border for a [CMFCStatusBar](../../mfc/reference/cmfcstatusbar-class.md) object.  \n  \n```  \nvirtual void OnDrawStatusBarPaneBorder(\n    CDC* pDC,  \n    CMFCStatusBar* pBar,  \n    CRect rectPane,  \n    UINT uiID,  \n    UINT nStyle);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pBar`  \n A pointer to a `CMFCStatusBar` object. The framework draws this status bar object.  \n  \n [in] `rectPane`  \n A rectangle that specifies the boundaries of the status bar.  \n  \n [in] `uiID`  \n The ID of the status bar.  \n  \n [in] `nStyle`  \n The style of the status bar.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the appearance of the border for a `CMFCStatusBar` object.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawstatusbarprogress\"></a>  CMFCVisualManager::OnDrawStatusBarProgress  \n The framework calls this method when it draws the progress indicator on the [CMFCStatusBar](../../mfc/reference/cmfcstatusbar-class.md) object.  \n  \n```  \nvirtual void OnDrawStatusBarProgress(\n    CDC* pDC,  \n    CMFCStatusBar* pStatusBar,  \n    CRect rectProgress,  \n    int nProgressTotal,  \n    int nProgressCurr,  \n    COLORREF clrBar,  \n    COLORREF clrProgressBarDest,  \n    COLORREF clrProgressText,  \n    BOOL bProgressText);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to the device context for the status bar.  \n  \n [in] `pStatusBar`  \n The `CMFCStatusBar` object that contains the progress bar.  \n  \n [in] `rectProgress`  \n A rectangle that specifies the boundaries of the progress bar.  \n  \n [in] `nProgressTotal`  \n The total number for the progress bar.  \n  \n [in] `nProgressCurr`  \n The current progress for the progress bar.  \n  \n [in] `clrBar`  \n A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter that indicates the initial color for the progress bar. The value is either the start of a color gradient or the complete color of the progress bar.  \n  \n [in] `clrProgressBarDest`  \n A `COLORREF` parameter that indicates the end of a color gradient for the progress bar. If `clrProgressBarDest` is -1, the framework does not draw the progress bar as a color gradient. Instead, it fills the whole progress bar with the color specified by `clrBar`.  \n  \n [in] `clrProgressText`  \n A `COLORREF` parameter that indicates the text color for the textual representation of the current progress. This parameter is ignored if `bProgressText` is set to `FALSE`.  \n  \n [in] `bProgressText`  \n A Boolean parameter that indicates whether to display the textual representation of the current progress.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the appearance of the `CMFCStatusBar` object.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawstatusbarsizebox\"></a>  CMFCVisualManager::OnDrawStatusBarSizeBox  \n The framework calls this method when it draws the size box for a [CMFCStatusBar](../../mfc/reference/cmfcstatusbar-class.md).  \n  \n```  \nvirtual void OnDrawStatusBarSizeBox(\n    CDC* pDC,  \n    CMFCStatusBar* pStatBar,  \n    CRect rectSizeBox);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pStatBar`  \n A pointer to a status bar. The framework draws the size box for this status bar.  \n  \n [in] `rectSizeBox`  \n A rectangle that specifies the boundaries of the size box.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the appearance of the size box on a `CMFCStatusBar`.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawtab\"></a>  CMFCVisualManager::OnDrawTab  \n The framework calls this method when it draws the tabs for a [CMFCBaseTabCtrl](../../mfc/reference/cmfcbasetabctrl-class.md) object.  \n  \n```  \nvirtual void OnDrawTab(\n    CDC* pDC,  \n    CRect rectTab,  \n    int iTab,  \n    BOOL bIsActive,  \n    const CMFCBaseTabCtrl* pTabWnd);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rectTab`  \n A rectangle that specifies the boundaries of the tab control.  \n  \n [in] `iTab`  \n The index of the tab that the framework draws.  \n  \n [in] `bIsActive`  \n A Boolean parameter that specifies whether the tab is active.  \n  \n [in] `pTabWnd`  \n A pointer to a `CMFCBaseTabCtrl` object. The framework draws this tab control.  \n  \n### Remarks  \n A `CMFCBaseTabCtrl` object calls this method when it processes the WM_PAINT message.  \n  \n Override this method in a derived class to customize the look of tabs.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawtabclosebutton\"></a>  CMFCVisualManager::OnDrawTabCloseButton  \n The framework calls this method when it draws the **Close** button on the active tab.  \n  \n```  \nvirtual void OnDrawTabCloseButton(\n    CDC* pDC,  \n    CRect rect,  \n    const CMFCBaseTabCtrl* pTabWnd,  \n    BOOL bIsHighlighted,  \n    BOOL bIsPressed,  \n    BOOL bIsDisabled);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the **Close** button.  \n  \n [in] `pTabWnd`  \n A pointer to a tab control. The framework draws the **Close** button for this tab control.  \n  \n [in] `bIsHighlighted`  \n A Boolean parameter that indicates whether the **Close** button is highlighted.  \n  \n [in] `bIsPressed`  \n A Boolean parameter that indicates whether the **Close** button is pressed.  \n  \n [in] `bIsDisabled`  \n A Boolean parameter that indicates whether the **Close** button is disabled.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the appearance of the **Close** button on the active tab of `pTabWnd`.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawtabcontent\"></a>  CMFCVisualManager::OnDrawTabContent  \n The framework calls this method when it draws the contents located on the interior of an instance of the [CMFCBaseTabCtrl Class](../../mfc/reference/cmfcbasetabctrl-class.md).  \n  \n```  \nvirtual void OnDrawTabContent(\n    CDC* pDC,  \n    CRect rectTab,  \n    int iTab,  \n    BOOL bIsActive,  \n    const CMFCBaseTabCtrl* pTabWnd,  \n    COLORREF clrText);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rectTab`  \n A rectangle that specifies the boundaries of the tab interior.  \n  \n [in] `iTab`  \n The zero-based index of the tab. The framework draws the interior of this tab.  \n  \n [in] `bIsActive`  \n A Boolean parameter that indicates whether a tab is active.  \n  \n [in] `pTabWnd`  \n A pointer to the tabbed control that contains the tab being drawn.  \n  \n [in] `clrText`  \n The color of text on the interior of the tab.  \n  \n### Remarks  \n The interior of a tab contains the text and icons of the tab. Override this method in a derived visual manager to customize the appearance of tabs.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawtabsbuttonborder\"></a>  CMFCVisualManager::OnDrawTabsButtonBorder  \n The framework calls this method when it draws the border of a tab button.  \n  \n```  \nvirtual void OnDrawTabsButtonBorder(\n    CDC* pDC,  \n    CRect& rect,  \n    CMFCButton* pButton,  \n    UINT uiState,  \n    CMFCBaseTabCtrl* pWndTab);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the tab button.  \n  \n [in] `pButton`  \n A pointer to a [CMFCButton](../../mfc/reference/cmfcbutton-class.md) object. The framework draws the border for this `CMFCButton` instance.  \n  \n [in] `uiState`  \n An unsigned integer that specifies the state of the button.  \n  \n [in] `pWndTab`  \n A pointer to the parent tab window.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the appearance of the border of the tab button.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawtask\"></a>  CMFCVisualManager::OnDrawTask  \n The framework calls this method when it draws a [CMFCTasksPane](../../mfc/reference/cmfctaskspane-class.md) object.  \n  \n```  \nvirtual void OnDrawTask(\n    CDC* pDC,  \n    CMFCTasksPaneTask* pTask,  \n    CImageList* pIcons,  \n    BOOL bIsHighlighted = FALSE,  \n    BOOL bIsSelected = FALSE);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pTask`  \n A pointer to a [CMFCTasksPaneTask](../../mfc/reference/cmfctaskspanetask-class.md) object. The framework draws this task.  \n  \n [in] `pIcons`  \n A pointer to the image list associated with the task pane. Each task contains an index for an image in this list.  \n  \n [in] `bIsHighlighted`  \n A Boolean parameter that specifies whether the displayed task is highlighted.  \n  \n [in] `bIsSelected`  \n A Boolean parameter that specifies whether the displayed task is selected.  \n  \n### Remarks  \n The framework displays tasks on the task bar as both an icon and text. The `pIcons` parameter contains the icon for the task indicated by `pTask`.  \n  \n Override this method in a derived class to customize the appearance of tasks on the task bar.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawtasksgroupareaborder\"></a>  CMFCVisualManager::OnDrawTasksGroupAreaBorder  \n The framework calls this method when it draws a border around a group on a [CMFCTasksPane Class](../../mfc/reference/cmfctaskspane-class.md).  \n  \n```  \nvirtual void OnDrawTasksGroupAreaBorder(\n    CDC* pDC,  \n    CRect rect,  \n    BOOL bSpecial = FALSE,  \n    BOOL bNoTitle = FALSE);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the group area on the task pane.  \n  \n [in] `bSpecial`  \n A Boolean parameter that specifies if the border is highlighted. A value of `TRUE` indicates that the border is highlighted.  \n  \n [in] `bNoTitle`  \n A Boolean parameter that specifies whether the group area has a title. A value of `TRUE` indicates that the group area does not have a title.  \n  \n### Remarks  \n Override this function in a derived class to customize the border around a group area on the task pane.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawtasksgroupcaption\"></a>  CMFCVisualManager::OnDrawTasksGroupCaption  \n The framework calls this method when it draws the caption for a [CMFCTasksPaneTaskGroup](../../mfc/reference/cmfctaskspanetaskgroup-class.md) object.  \n  \n```  \nvirtual void OnDrawTasksGroupCaption(\n    CDC* pDC,  \n    CMFCTasksPaneTaskGroup* pGroup,  \n    BOOL bIsHighlighted = FALSE,  \n    BOOL bIsSelected = FALSE,  \n    BOOL bCanCollapse = FALSE);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pGroup`  \n A pointer to a `CMFCTasksPaneTaskGroup` object. The framework draws the caption for this group.  \n  \n [in] `bIsHighlighted`  \n A Boolean parameter that indicates whether the group is highlighted.  \n  \n [in] `bIsSelected`  \n A Boolean parameter that indicates whether the group is currently selected.  \n  \n [in] `bCanCollapse`  \n A Boolean parameter that indicates whether the group can be collapsed.  \n  \n### Remarks  \n The task groups appear on the [CMFCTasksPane](../../mfc/reference/cmfctaskspane-class.md) object.  \n  \n Override this method in a derived class to customize the caption for a `CMFCTasksPaneTaskGroup`.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawtasksgroupicon\"></a>  CMFCVisualManager::OnDrawTasksGroupIcon  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDrawTasksGroupIcon(\n    CDC* pDC,  \n    CMFCTasksPaneTaskGroup* pGroup,  \n    int nIconHOffset = 5,  \n    BOOL bIsHighlighted = FALSE,  \n    BOOL bIsSelected = FALSE,  \n    BOOL bCanCollapse = FALSE);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `pGroup`  \n [in] `nIconHOffset`  \n [in] `bIsHighlighted`  \n [in] `bIsSelected`  \n [in] `bCanCollapse`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__ondrawtearoffcaption\"></a>  CMFCVisualManager::OnDrawTearOffCaption  \n The framework calls this method when it draws the caption for a [CMFCPopupMenu Class](../../mfc/reference/cmfcpopupmenu-class.md).  \n  \n```  \nvirtual void OnDrawTearOffCaption(\n    CDC* pDC,  \n    CRect rect,  \n    BOOL bIsActive);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the caption.  \n  \n [in] `bIsActive`  \n `TRUE` if the caption is active; `FALSE` otherwise.  \n  \n### Remarks  \n This function is called by the framework when a `CMFCPopupMenu` object processes a WM_PAINT message and must draw a tear-off caption.  \n  \n Override this method in a derived class to customize the look of captions for tear-off bars.  \n  \n##  <a name=\"cmfcvisualmanager__ondrawtoolboxframe\"></a>  CMFCVisualManager::OnDrawToolBoxFrame  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDrawToolBoxFrame(\n    CDC* pDC,  \n    const CRect& rect);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `rect`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__onerasemdiclientarea\"></a>  CMFCVisualManager::OnEraseMDIClientArea  \n The framework calls this method when it erases the MDI client area.  \n  \n```  \nvirtual BOOL OnEraseMDIClientArea(\n    CDC* pDC,  \n    CRect rectClient);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rectClient`  \n A rectangle that specifies the boundaries of the MDI client area.  \n  \n### Return Value  \n A reserved value. The default implementation returns `FALSE`.  \n  \n### Remarks  \n Override this method to execute custom code when the visual manager erases the MDI client area.  \n  \n##  <a name=\"cmfcvisualmanager__onerasepopupwindowbutton\"></a>  CMFCVisualManager::OnErasePopupWindowButton  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnErasePopupWindowButton(\n    CDC* pDC,  \n    CRect rectClient,  \n    CMFCDesktopAlertWndButton* pButton);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `rectClient`  \n [in] `pButton`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__onerasetabsarea\"></a>  CMFCVisualManager::OnEraseTabsArea  \n The framework calls this method when it erases the tab area of a tab window.  \n  \n```  \nvirtual void OnEraseTabsArea(\n    CDC* pDC,  \n    CRect rect,  \n    const CMFCBaseTabCtrl* pTabWnd);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the tab area.  \n  \n [in] `pTabWnd`  \n A pointer to a tab window. The framework erases the tab area for the specified tab window.  \n  \n### Remarks  \n This function is called by the framework when a [CMFCBaseTabCtrl Class](../../mfc/reference/cmfcbasetabctrl-class.md) object processes a `WM_PAINT` message and erases the tab area.  \n  \n Override this method in a derived visual manager to customize the appearance of tabs.  \n  \n##  <a name=\"cmfcvisualmanager__onerasetabsbutton\"></a>  CMFCVisualManager::OnEraseTabsButton  \n The framework calls this method when it erases the text and icon of a tab button.  \n  \n```  \nvirtual void OnEraseTabsButton(\n    CDC* pDC,  \n    CRect rect,  \n    CMFCButton* pButton,  \n    CMFCBaseTabCtrl* pWndTab);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the tab button.  \n  \n [in] `pButton`  \n A pointer to a tab button. The framework erases the text and icon for this button.  \n  \n [in] `pWndTab`  \n A pointer to the tab control that contains the tab button.  \n  \n### Remarks  \n The framework erases the text and icon for a button when a [CMFCBaseTabCtrl](../../mfc/reference/cmfcbasetabctrl-class.md) object processes the `WM_ERASEBKGND` message.  \n  \n Override this method in a derived visual manager to customize the appearance of tab buttons.  \n  \n##  <a name=\"cmfcvisualmanager__onerasetabsframe\"></a>  CMFCVisualManager::OnEraseTabsFrame  \n The framework calls this method when it erases a frame on a [CMFCBaseTabCtrl Class](../../mfc/reference/cmfcbasetabctrl-class.md).  \n  \n```  \nvirtual BOOL OnEraseTabsFrame(\n    CDC* pDC,  \n    CRect rect,  \n    const CMFCBaseTabCtrl* pTabWnd);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the tab window.  \n  \n [in] `pTabWnd`  \n A pointer to a tab window. The framework erases a frame for this `CMFCBaseTabCtrl`.  \n  \n### Return Value  \n `TRUE` if the method is successful; `FALSE` otherwise.  \n  \n### Remarks  \n This method fills the area indicated by `rect` with the background color of the active tab. It is called when a `CMFCBaseTabCtrl` object processes a `WM_PAINT` message and erases a tab frame.  \n  \n##  <a name=\"cmfcvisualmanager__onfillautohidebuttonbackground\"></a>  CMFCVisualManager::OnFillAutoHideButtonBackground  \n The framework calls this method when it fills the background of an auto-hide button.  \n  \n```  \nvirtual void OnFillAutoHideButtonBackground(\n    CDC* pDC,  \n    CRect rect,  \n    CMFCAutoHideButton* pButton);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the auto-hide button.  \n  \n [in] `pButton`  \n A pointer to a [CMFCAutoHideButton](../../mfc/reference/cmfcautohidebutton-class.md) object. The framework fills the background for this auto-hide button.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the appearance of an auto-hide button.  \n  \n##  <a name=\"cmfcvisualmanager__onfillbarbackground\"></a>  CMFCVisualManager::OnFillBarBackground  \n The framework calls this method when it fills the background of a [CBasePane](../../mfc/reference/cbasepane-class.md) object.  \n  \n```  \nvirtual void OnFillBarBackground(\n    CDC* pDC,  \n    CBasePane* pBar,  \n    CRect rectClient,  \n    CRect rectClip,  \n    BOOL bNCArea = FALSE);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to the device context for a control bar.  \n  \n [in] `pBar`  \n A pointer to a `CBasePane` object. The framework fills the background of this pane.  \n  \n [in] `rectClient`  \n A rectangle that specifies the boundaries of the pane.  \n  \n [in] `rectClip`  \n A rectangle that specifies the clipping area of the pane.  \n  \n [in] `bNCArea`  \n A reserved value.  \n  \n### Remarks  \n The default implementation of this method fills the background of the bar with the 3d background color from the global variable `afxGlobalData`. Override this method in a derived visual manager to customize the background of a pane.  \n  \n### Example  \n The following example demonstrates how to use the `OnFillBarBackground` in the `CMFCVisualManager` class. This code snippet is part of the [Outlook Demo sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_OutlookDemo#4](../../mfc/reference/codesnippet/cpp/cmfcvisualmanager-class_2.cpp)]  \n  \n##  <a name=\"cmfcvisualmanager__onfillbuttoninterior\"></a>  CMFCVisualManager::OnFillButtonInterior  \n The framework calls this method when it fills the background of a toolbar button.  \n  \n```  \nvirtual void OnFillButtonInterior(\n    CDC* pDC,  \n    CMFCToolBarButton* pButton,  \n    CRect rect,  \n    CMFCVisualManager::AFX_BUTTON_STATE state);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to the device context of a toolbar button.  \n  \n [in] `pButton`  \n A pointer to a [CMFCToolBarButton](../../mfc/reference/cmfctoolbarbutton-class.md). The framework fills the background for this button.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the toolbar button.  \n  \n [in] `state`  \n The state of the toolbar button.  \n  \n### Remarks  \n The default implementation of this method uses the default color to fill the background. Override this method in a derived visual manager to customize the background of a toolbar button.  \n  \n The possible states of a toolbar button are `ButtonsIsRegular`, `ButtonsIsPressed`, or `ButtonsIsHighlighted`.  \n  \n##  <a name=\"cmfcvisualmanager__onfillcaptionbarbutton\"></a>  CMFCVisualManager::OnFillCaptionBarButton  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual COLORREF OnFillCaptionBarButton(\n    CDC* pDC,  \n    CMFCCaptionBar* pBar,  \n    CRect rect,  \n    BOOL bIsPressed,  \n    BOOL bIsHighlighted,  \n    BOOL bIsDisabled,  \n    BOOL bHasDropDownArrow,  \n    BOOL bIsSysButton);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `pBar`  \n [in] `rect`  \n [in] `bIsPressed`  \n [in] `bIsHighlighted`  \n [in] `bIsDisabled`  \n [in] `bHasDropDownArrow`  \n [in] `bIsSysButton`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__onfillcommandslistbackground\"></a>  CMFCVisualManager::OnFillCommandsListBackground  \n The framework calls this method when it fills the background of a toolbar button that belongs to a command list. This command list is part of the customization dialog.  \n  \n```  \nvirtual COLORREF OnFillCommandsListBackground(\n    CDC* pDC,  \n    CRect rect,  \n    BOOL bIsSelected = FALSE);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the button.  \n  \n [in] `bIsSelected`  \n A Boolean parameter that indicates whether the button is selected.  \n  \n### Return Value  \n The text color for the toolbar button.  \n  \n### Remarks  \n For more information about the customization list, see [CMFCToolBarButton::OnDrawOnCustomizeList](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__ondrawoncustomizelist). The default implementation for this method fills the background based on the color scheme of the currently selected skin.  \n  \n##  <a name=\"cmfcvisualmanager__onfillheaderctrlbackground\"></a>  CMFCVisualManager::OnFillHeaderCtrlBackground  \n The framework calls this method when it fills the background of a header control.  \n  \n```  \nvirtual void OnFillHeaderCtrlBackground(\n    CMFCHeaderCtrl* pCtrl,  \n    CDC* pDC,  \n    CRect rect);\n```  \n  \n### Parameters  \n [in] `pCtrl`  \n A pointer to a [CMFCHeaderCtrl](../../mfc/reference/cmfcheaderctrl-class.md) object. The framework fills the background for this header control.  \n  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the header control.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the appearance of a header control.  \n  \n##  <a name=\"cmfcvisualmanager__onfillminiframecaption\"></a>  CMFCVisualManager::OnFillMiniFrameCaption  \n The framework calls this method when it fills the caption bar of a mini frame window.  \n  \n```  \nvirtual COLORREF OnFillMiniFrameCaption(\n    CDC* pDC,  \n    CRect rectCaption,  \n    CPaneFrameWnd* pFrameWnd,  \n    BOOL bActive);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rectCaption`  \n A rectangle that specifies the boundaries of the caption bar.  \n  \n [in] `pFrameWnd`  \n A pointer to a mini frame window. The framework draws the caption bar for this window.  \n  \n [in] `bActive`  \n A Boolean parameter that indicates if the window is active.  \n  \n### Return Value  \n The color that is used to fill the background of the caption bar.  \n  \n### Remarks  \n The default implementation for this method fills the caption bar with the current caption color for the active skin.  \n  \n##  <a name=\"cmfcvisualmanager__onfilloutlookbarcaption\"></a>  CMFCVisualManager::OnFillOutlookBarCaption  \n The framework calls this method when it fills the background of an Outlook caption bar.  \n  \n```  \nvirtual void OnFillOutlookBarCaption(\n    CDC* pDC,  \n    CRect rectCaption,  \n    COLORREF& clrText);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rectCaption`  \n A rectangle that specifies the boundaries of the caption bar.  \n  \n [out] `clrText`  \n A reference to a [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter. The method writes the color of text on the caption bar to this parameter.  \n  \n### Remarks  \n The default implementation of this method fills the caption bar with the color for shadows based on the current skin. Override this method in a derived visual manager to customize the color of the Outlook caption bar.  \n  \n##  <a name=\"cmfcvisualmanager__onfilloutlookpagebutton\"></a>  CMFCVisualManager::OnFillOutlookPageButton  \n The framework calls this method when it fills the interior of an Outlook page button.  \n  \n```  \nvirtual void OnFillOutlookPageButton(\n    CDC* pDC,  \n    const CRect& rect,  \n    BOOL bIsHighlighted,  \n    BOOL bIsPressed,  \n    COLORREF& clrText);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the Outlook page button.  \n  \n [in] `bIsHighlighted`  \n A Boolean parameter that specifies whether the button is highlighted.  \n  \n [in] `bIsPressed`  \n A Boolean parameter that specifies whether the button is pressed.  \n  \n [out] `clrText`  \n A reference to a [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter. This method stores the text color of the outlook page button in this parameter.  \n  \n### Remarks  \n Override this function in a derived visual manager to customize the appearance of Outlook page buttons.  \n  \n##  <a name=\"cmfcvisualmanager__onfillpopupwindowbackground\"></a>  CMFCVisualManager::OnFillPopupWindowBackground  \n The framework calls this method when it fills the background of a pop-up window.  \n  \n```  \nvirtual void OnFillPopupWindowBackground(\n    CDC* pDC,  \n    CRect rect);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the popup window.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the appearance of pop-up windows.  \n  \n##  <a name=\"cmfcvisualmanager__onfillribbonbutton\"></a>  CMFCVisualManager::OnFillRibbonButton  \n The framework calls this method when it fills the interior of a ribbon button.  \n  \n```  \nvirtual COLORREF OnFillRibbonButton(\n    CDC* pDC,  \n    CMFCRibbonButton* pButton);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pButton`  \n A pointer to a [CMFCRibbonButton](../../mfc/reference/cmfcribbonbutton-class.md) object. The framework fills the interior of this ribbon button.  \n  \n### Return Value  \n The color of text for the ribbon button specified by `pButton` if the ribbon button supports text. A value of -1 if text is invalid for the ribbon button.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the appearance of ribbon buttons.  \n  \n##  <a name=\"cmfcvisualmanager__onfillribbonedit\"></a>  CMFCVisualManager::OnFillRibbonEdit  \n The framework calls this method when it fills the interior of an instance of the `CMFCRibbonRichEditCtrl` class.  \n  \n```  \nvirtual void OnFillRibbonEdit(\n    CDC* pDC,  \n    CMFCRibbonRichEditCtrl* pEdit,  \n    CRect rect,  \n    BOOL bIsHighlighted,  \n    BOOL bIsPaneHighlighted,  \n    BOOL bIsDisabled,  \n    COLORREF& clrText,  \n    COLORREF& clrSelBackground,  \n    COLORREF& clrSelText);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pEdit`  \n A pointer to a `CMFCRibbonRichEditCtrl` object. The framework fills the interior of this edit control.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the edit control.  \n  \n [in] `bIsHighlighted`  \n A Boolean parameter that indicates whether the edit control is highlighted.  \n  \n [in] `bIsPaneHighlighted`  \n A Boolean parameter that indicates whether the parent pane is highlighted.  \n  \n [in] `bIsDisabled`  \n A Boolean parameter that indicates whether the edit control is unavailable.  \n  \n [in] `clrText`  \n A reference to the text color of the edit control.  \n  \n [in] `clrSelBackground`  \n A reference to the background color of the edit control when it is highlighted.  \n  \n [in] `clrSelText`  \n A reference to the color of selected text on the edit control.  \n  \n### Remarks  \n The `CMFCRibbonRichEditCtrl` indicated by `pEdit` can be a part of a combo box button on the ribbon.  \n  \n Override this method in a derived visual manager to customize the appearance of a `CMFCRibbonRichEditCtrl`.  \n  \n##  <a name=\"cmfcvisualmanager__onfillribbonmainpanelbutton\"></a>  CMFCVisualManager::OnFillRibbonMainPanelButton  \n The framework calls this method when it fills the interior of a ribbon button located on the **Main** panel.  \n  \n```  \nvirtual COLORREF OnFillRibbonMainPanelButton(\n    CDC* pDC,  \n    CMFCRibbonButton* pButton);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pButton`  \n A pointer to a [CMFCRibbonButton Class](../../mfc/reference/cmfcribbonbutton-class.md) object. The framework fills this ribbon button.  \n  \n### Return Value  \n The color of text for the ribbon button specified by `pButton` if the ribbon button supports text. A value of -1 if text is invalid for the ribbon button.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the appearance of ribbon buttons on the **Main** panel.  \n  \n##  <a name=\"cmfcvisualmanager__onfillribbonmenuframe\"></a>  CMFCVisualManager::OnFillRibbonMenuFrame  \n The framework calls this method when it fills the menu frame of the ribbon panel.  \n  \n```  \nvirtual void OnFillRibbonMenuFrame(\n    CDC* pDC,  \n    CMFCRibbonMainPanel* pPanel,  \n    CRect rect);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pPanel`  \n A pointer to an instance of the [CMFCRibbonMainPanel Class](../../mfc/reference/cmfcribbonmainpanel-class.md). The framework fills the menu frame for this ribbon panel.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the menu frame.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the appearance of the menu bar for the `CMFCRibbonMainPanel`.  \n  \n##  <a name=\"cmfcvisualmanager__onfillribbonquickaccesstoolbarpopup\"></a>  CMFCVisualManager::OnFillRibbonQuickAccessToolBarPopup  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnFillRibbonQuickAccessToolBarPopup(\n    CDC* pDC,  \n    CMFCRibbonPanelMenuBar* pMenuBar,  \n    CRect rect);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `pMenuBar`  \n [in] `rect`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__onfillsplitterbackground\"></a>  CMFCVisualManager::OnFillSplitterBackground  \n The framework calls this method when it fills the background of a splitter window.  \n  \n```  \nvirtual void OnFillSplitterBackground(\n    CDC* pDC,  \n    CSplitterWndEx* pSplitterWnd,  \n    CRect rect);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pSplitterWnd`  \n A pointer to an instance of the [CSplitterWndEx Class](csplitterwndex-class.md). The framework fills the background for this splitter window.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the splitter window.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the appearance of a splitter window.  \n  \n##  <a name=\"cmfcvisualmanager__onfilltab\"></a>  CMFCVisualManager::OnFillTab  \n The framework calls this method when it fills the background of a tab window.  \n  \n```  \nvirtual void OnFillTab(\n    CDC* pDC,  \n    CRect rectFill,  \n    CBrush* pbrFill,  \n    int iTab,  \n    BOOL bIsActive,  \n    const CMFCBaseTabCtrl* pTabWnd);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rectFill`  \n A rectangle that specifies the boundaries for the tab window.  \n  \n [in] `pbrFill`  \n A pointer to a brush. The framework uses this brush to fill the tab window.  \n  \n [in] `iTab`  \n The zero-based tab index of a tab for which the framework fills the background.  \n  \n [in] `bIsActive`  \n `TRUE` if the tab is active; otherwise `FALSE`.  \n  \n [in] `pTabWnd`  \n A pointer to the parent tab control.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the appearance of tabs.  \n  \n##  <a name=\"cmfcvisualmanager__onfilltasksgroupinterior\"></a>  CMFCVisualManager::OnFillTasksGroupInterior  \n The framework calls this method when it fills the interior of a [CMFCTasksPaneTaskGroup](../../mfc/reference/cmfctaskspanetaskgroup-class.md) object.  \n  \n```  \nvirtual void OnFillTasksGroupInterior(\n    CDC* pDC,  \n    CRect rect,  \n    BOOL bSpecial = FALSE);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the task group.  \n  \n [in] `bSpecial`  \n A Boolean that indicates if the interior is filled with a special color.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the appearance of a task group.  \n  \n##  <a name=\"cmfcvisualmanager__onfilltaskspanebackground\"></a>  CMFCVisualManager::OnFillTasksPaneBackground  \n The framework calls this method when it fills the background of a [CMFCTasksPane](../../mfc/reference/cmfctaskspane-class.md) control.  \n  \n```  \nvirtual void OnFillTasksPaneBackground(\n    CDC* pDC,  \n    CRect rectWorkArea);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rectWorkArea`  \n A rectangle that specifies the boundaries of the task pane.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the appearance of a `CMFCTasksPane` object.  \n  \n##  <a name=\"cmfcvisualmanager__onhighlightmenuitem\"></a>  CMFCVisualManager::OnHighlightMenuItem  \n The framework calls this method when it draws a highlighted menu item.  \n  \n```  \nvirtual void OnHighlightMenuItem(\n    CDC* pDC,  \n    CMFCToolBarMenuButton* pButton,  \n    CRect rect,  \n    COLORREF& clrText);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to the device context for a menu.  \n  \n [in] `pButton`  \n A pointer to a [CMFCToolBarMenuButton](../../mfc/reference/cmfctoolbarmenubutton-class.md) object to display. The default implementation does not use this parameter.  \n  \n [in] `rect`  \n A rectangle that specifies the boundaries of the menu item.  \n  \n [in] `clrText`  \n The current text color of highlighted menu items. The default implementation does not use this parameter.  \n  \n### Remarks  \n The default implementation of this method does not use the parameters `pButton` or `clrText`. It fills the rectangle specified by `rect` with the standard background color.  \n  \n Override this method in a derived visual manager to customize the appearance of highlighted menu items. Use the `clrText` parameter to modify the text color of a highlighted menu item.  \n  \n##  <a name=\"cmfcvisualmanager__onhighlightrarelyusedmenuitems\"></a>  CMFCVisualManager::OnHighlightRarelyUsedMenuItems  \n The framework calls this method when it draws a highlighted menu command.  \n  \n```  \nvirtual void OnHighlightRarelyUsedMenuItems(\n    CDC* pDC,  \n    CRect rectRarelyUsed);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rectRarelyUsed`  \n A rectangle that specifies the boundaries of the highlighted command.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the appearance of highlighted menu commands.  \n  \n##  <a name=\"cmfcvisualmanager__onncactivate\"></a>  CMFCVisualManager::OnNcActivate  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL OnNcActivate(\n    CWnd* pWnd,  \n    BOOL bActive);\n```  \n  \n### Parameters  \n [in] `pWnd`  \n [in] `bActive`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__onncpaint\"></a>  CMFCVisualManager::OnNcPaint  \n The framework calls this method when it draws the non-client area.  \n  \n```  \nvirtual BOOL OnNcPaint(\n    CWnd* pWnd,  \n    const CObList& lstSysButtons,  \n    CRect rectRedraw);\n```  \n  \n### Parameters  \n [in] `pWnd`  \n A pointer to the window whose non-client area the framework draws.  \n  \n [in] `lstSysButtons`  \n A list of system buttons. These are also known as caption buttons.  \n  \n [in] `rectRedraw`  \n A rectangle that specifies the boundaries of the non-client area.  \n  \n### Return Value  \n A reserved value. The default implementation returns `FALSE`.  \n  \n### Remarks  \n Override this method in a derived visual manager to customize the appearance of the window frame and caption buttons.  \n  \n##  <a name=\"cmfcvisualmanager__onsetwindowregion\"></a>  CMFCVisualManager::OnSetWindowRegion  \n The framework calls this method after it sets a region that contains frames and pop-up menus.  \n  \n```  \nvirtual BOOL OnSetWindowRegion(\n    CWnd* pWnd,  \n    CSize sizeWindow);\n```  \n  \n### Parameters  \n [in] `pWnd`  \n A pointer to the window with the region that changed.  \n  \n [in] `sizeWindow`  \n The size of the window.  \n  \n### Return Value  \n `TRUE` if the method is successful; `FALSE` otherwise.  \n  \n### Remarks  \n The framework calls this method to notify the visual manager that a region has been set for frames and pop-up menus. For more information, see [CWindow::SetWindowRgn](../../atl/reference/cwindow-class.md#cwindow__setwindowrgn).  \n  \n##  <a name=\"cmfcvisualmanager__onupdatesystemcolors\"></a>  CMFCVisualManager::OnUpdateSystemColors  \n The framework calls this function when it changes the system colors.  \n  \n```  \nvirtual void OnUpdateSystemColors();\n```  \n  \n### Remarks  \n The framework calls this method as a part of processing the `WM_SYSCOLORCHANGE` message. The default implementation does nothing. Override this method in a derived visual manager if you want to execute custom code when the colors change in your application.  \n  \n##  <a name=\"cmfcvisualmanager__redrawall\"></a>  CMFCVisualManager::RedrawAll  \n Immediately redraws all the control bars in the application.  \n  \n```  \nstatic void RedrawAll();\n```  \n  \n##  <a name=\"cmfcvisualmanager__ribboncategorycolortorgb\"></a>  CMFCVisualManager::RibbonCategoryColorToRGB  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual COLORREF RibbonCategoryColorToRGB(AFX_RibbonCategoryColor color);\n```  \n  \n### Parameters  \n [in] `color`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcvisualmanager__setdefaultmanager\"></a>  CMFCVisualManager::SetDefaultManager  \n Sets the default manager.  \n  \n```  \nstatic void SetDefaultManager(CRuntimeClass* pRTI);\n```  \n  \n### Parameters  \n [in] `pRTI`  \n A pointer to the runtime information for a visual manager.  \n  \n### Remarks  \n Use the [CMFCVisualManager Class](../../mfc/reference/cmfcvisualmanager-class.md) and any derived visual managers to customize the appearance of your application. After you set the default visual manager, this method redraws your application by using the new visual manager. For more information about how to use visual managers, see [Visualization Manager](../../mfc/visualization-manager.md).  \n  \n Use this method to change the visual manager that your application uses.  \n  \n##  <a name=\"cmfcvisualmanager__setembossdisabledimage\"></a>  CMFCVisualManager::SetEmbossDisabledImage  \n Enables or disables the embossed mode for disabled toolbar images.  \n  \n```  \nvoid SetEmbossDisabledImage (BOOL bEmboss = TRUE);\n```  \n  \n### Parameters  \n [in] `bEmboss`  \n A Boolean parameter that indicates whether to enable embossed mode for disabled toolbar images.  \n  \n### Remarks  \n Use the function [CMFCVisualManager::IsEmbossDisabledImage](#cmfcvisualmanager__isembossdisabledimage) to determine whether embossed mode is enabled.  \n  \n##  <a name=\"cmfcvisualmanager__setfadeinactiveimage\"></a>  CMFCVisualManager::SetFadeInactiveImage  \n Enables or disables the lighting effect for inactive images on a menu or toolbar.  \n  \n```  \nvoid SetFadeInactiveImage(BOOL bFade = TRUE);\n```  \n  \n### Parameters  \n [in] `bFade`  \n A Boolean parameter that specifies whether to enable the lighting effect.  \n  \n### Remarks  \n This feature controls whether inactive images appear faded on a menu or toolbar. Use the method [CMFCVisualManager::IsFadeInactiveImage](#cmfcvisualmanager__isfadeinactiveimage) to determine whether this feature is enabled.  \n  \n##  <a name=\"cmfcvisualmanager__setmenuflatlook\"></a>  CMFCVisualManager::SetMenuFlatLook  \n Sets a flag that indicates whether the menu buttons appear flat. Otherwise, they appear three-dimensional.  \n  \n```  \nvoid SetMenuFlatLook(BOOL bMenuFlatLook = TRUE);\n```  \n  \n### Parameters  \n [in] `bMenuFlatLook`  \n A Boolean parameter that indicates whether the menu buttons appear flat.  \n  \n### Remarks  \n By default, this feature is not enabled.  \n  \n##  <a name=\"cmfcvisualmanager__setmenushadowdepth\"></a>  CMFCVisualManager::SetMenuShadowDepth  \n Sets the width and height of the menu shadow.  \n  \n```  \nvoid SetMenuShadowDepth(int nDepth);\n```  \n  \n### Parameters  \n [in] `nDepth`  \n An integer that specifies the depth of the menu shadow in pixels.  \n  \n### Remarks  \n The height and width of the menu shadow must be identical. The default value is 7 pixels.  \n  \n##  <a name=\"cmfcvisualmanager__setshadowhighlightedimage\"></a>  CMFCVisualManager::SetShadowHighlightedImage  \n Sets a flag that indicates whether the [CMFCVisualManager](../../mfc/reference/cmfcvisualmanager-class.md) displays shadows for highlighted images.  \n  \n```  \nvoid SetShadowHighlightedImage(BOOL bShadow = TRUE);\n```  \n  \n### Parameters  \n [in] `bShadow`  \n A Boolean parameter that indicates whether the visual manager displays a shadow under highlighted images.  \n  \n### Remarks  \n By default, this feature is disabled.  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CMFCVisualManager::GetInstance](#cmfcvisualmanager__getinstance)   \n [Visualization Manager](../../mfc/visualization-manager.md)\n\n\n"}