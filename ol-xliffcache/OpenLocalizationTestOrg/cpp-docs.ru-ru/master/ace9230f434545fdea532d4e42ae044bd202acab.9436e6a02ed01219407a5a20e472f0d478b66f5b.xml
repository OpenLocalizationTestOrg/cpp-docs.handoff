{"nodes":[{"pos":[12,53],"content":"vector&lt;bool&gt; Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"vector<ph id=\"ph1\">&amp;lt;</ph>bool<ph id=\"ph2\">&amp;gt;</ph> Class | Microsoft Docs","pos":[0,41],"source":"vector&lt;bool&gt; Class | Microsoft Docs"}]},{"pos":[661,685],"content":"vector&lt;bool&gt; Class","linkify":"vector&lt;bool&gt; Class","nodes":[{"content":"vector<ph id=\"ph1\">&amp;lt;</ph>bool<ph id=\"ph2\">&amp;gt;</ph> Class","pos":[0,24],"source":"vector&lt;bool&gt; Class"}]},{"content":"The <ph id=\"ph1\">`vector&lt;bool&gt;`</ph> class is a partial specialization of <bpt id=\"p1\">[</bpt>vector<ept id=\"p1\">](../standard-library/vector-class.md)</ept> for elements of type <ph id=\"ph2\">`bool`</ph>.","pos":[686,816],"source":"The `vector<bool>` class is a partial specialization of [vector](../standard-library/vector-class.md) for elements of type `bool`."},{"content":"It has an allocator for the underlying type that's used by the specialization, which provides space optimization by storing one <ph id=\"ph1\">`bool`</ph> value per bit.","pos":[817,966],"source":" It has an allocator for the underlying type that's used by the specialization, which provides space optimization by storing one `bool` value per bit."},{"pos":[975,981],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1084,1091],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This class template specialization behaves like vector, except for the differences explained in this article.","pos":[1095,1204]},{"content":"Operations that deal with the <ph id=\"ph1\">`bool`</ph> type correspond to values in the container storage.","pos":[1211,1299],"source":"Operations that deal with the `bool` type correspond to values in the container storage."},{"content":"<ph id=\"ph1\">`allocator_traits::construct`</ph> is not used to construct these values.","pos":[1300,1368],"source":"`allocator_traits::construct` is not used to construct these values."},{"pos":[1378,1386],"content":"Typedefs","linkify":"Typedefs","nodes":[{"content":"Typedefs","pos":[0,8]}]},{"pos":[1407,1458],"content":"<bpt id=\"p1\">[</bpt>const_pointer<ept id=\"p1\">](#vector_lt_bool_gt___const_pointer)</ept>","source":"[const_pointer](#vector_lt_bool_gt___const_pointer)"},{"pos":[1459,1571],"content":"A typedef to a <ph id=\"ph1\">`const_iterator`</ph> that can serve as a constant pointer to a Boolean element of the <ph id=\"ph2\">`vector&lt;bool&gt;`</ph>.","source":"A typedef to a `const_iterator` that can serve as a constant pointer to a Boolean element of the `vector<bool>`."},{"pos":[1576,1631],"content":"<bpt id=\"p1\">[</bpt>const_reference<ept id=\"p1\">](#vector_lt_bool_gt___const_reference)</ept>","source":"[const_reference](#vector_lt_bool_gt___const_reference)"},{"content":"A typedef for <ph id=\"ph1\">`bool`</ph>.","pos":[1632,1653],"source":"A typedef for `bool`."},{"content":"After initialization, it does not observe updates to the original value.","pos":[1654,1726]},{"pos":[1731,1770],"content":"<bpt id=\"p1\">[</bpt>pointer<ept id=\"p1\">](#vector_lt_bool_gt___pointer)</ept>","source":"[pointer](#vector_lt_bool_gt___pointer)"},{"pos":[1771,1869],"content":"A typedef to an <ph id=\"ph1\">`iterator`</ph> that can serve as a pointer to a Boolean element of the <ph id=\"ph2\">`vector&lt;bool&gt;`</ph>.","source":"A typedef to an `iterator` that can serve as a pointer to a Boolean element of the `vector<bool>`."},{"pos":[1880,1896],"content":"Member Functions","linkify":"Member Functions","nodes":[{"content":"Member Functions","pos":[0,16]}]},{"pos":[1917,1950],"content":"<bpt id=\"p1\">[</bpt>flip<ept id=\"p1\">](#vector_lt_bool_gt___flip)</ept>","source":"[flip](#vector_lt_bool_gt___flip)"},{"pos":[1951,1991],"content":"Reverses all bits in the <ph id=\"ph1\">`vector&lt;bool&gt;`</ph>.","source":"Reverses all bits in the `vector<bool>`."},{"pos":[1996,2029],"content":"<bpt id=\"p1\">[</bpt>swap<ept id=\"p1\">](#vector_lt_bool_gt___swap)</ept>","source":"[swap](#vector_lt_bool_gt___swap)"},{"pos":[2030,2076],"content":"Exchanges the elements of two <ph id=\"ph1\">`vector&lt;bool&gt;`</ph>s.","source":"Exchanges the elements of two `vector<bool>`s."},{"pos":[2081,2135],"content":"<bpt id=\"p1\">[</bpt>operator&amp;#91;&amp;#93;<ept id=\"p1\">](#vector_lt_bool_gt___operator_at)</ept>","source":"[operator&#91;&#93;](#vector_lt_bool_gt___operator_at)"},{"pos":[2136,2220],"content":"Returns a simulated reference to the <ph id=\"ph1\">`vector&lt;bool&gt;`</ph> element at a specified position.","source":"Returns a simulated reference to the `vector<bool>` element at a specified position."},{"content":"Functions the same as the unspecialized <bpt id=\"p1\">[</bpt>vector<ept id=\"p1\">](../standard-library/vector-class.md)</ept>::at function, except that it uses the proxy class <bpt id=\"p2\">[</bpt>vector<ph id=\"ph1\">\\&lt;</ph>bool&gt;::reference<ept id=\"p2\">](#vector_lt_bool_gt___reference_class)</ept>.","pos":[2230,2431],"source":"Functions the same as the unspecialized [vector](../standard-library/vector-class.md)::at function, except that it uses the proxy class [vector\\<bool>::reference](#vector_lt_bool_gt___reference_class)."},{"content":"Also see <bpt id=\"p1\">[</bpt>operator&amp;#91;&amp;#93;<ept id=\"p1\">](#vector_lt_bool_gt___operator_at)</ept>.","pos":[2432,2496],"source":" Also see [operator&#91;&#93;](#vector_lt_bool_gt___operator_at)."},{"content":"Functions the same as the unspecialized <bpt id=\"p1\">[</bpt>vector<ept id=\"p1\">](../standard-library/vector-class.md)</ept>::front function, except that it uses the proxy class <bpt id=\"p2\">[</bpt>vector<ph id=\"ph1\">\\&lt;</ph>bool&gt;::reference<ept id=\"p2\">](#vector_lt_bool_gt___reference_class)</ept>.","pos":[2509,2713],"source":"Functions the same as the unspecialized [vector](../standard-library/vector-class.md)::front function, except that it uses the proxy class [vector\\<bool>::reference](#vector_lt_bool_gt___reference_class)."},{"content":"Also see <bpt id=\"p1\">[</bpt>operator&amp;#91;&amp;#93;<ept id=\"p1\">](#vector_lt_bool_gt___operator_at)</ept>.","pos":[2714,2778],"source":" Also see [operator&#91;&#93;](#vector_lt_bool_gt___operator_at)."},{"content":"Functions the same as the unspecialized <bpt id=\"p1\">[</bpt>vector<ept id=\"p1\">](../standard-library/vector-class.md)</ept>::back function, except that it uses the proxy class <bpt id=\"p2\">[</bpt>vector<ph id=\"ph1\">\\&lt;</ph>bool&gt;::reference<ept id=\"p2\">](#vector_lt_bool_gt___reference_class)</ept>.","pos":[2790,2993],"source":"Functions the same as the unspecialized [vector](../standard-library/vector-class.md)::back function, except that it uses the proxy class [vector\\<bool>::reference](#vector_lt_bool_gt___reference_class)."},{"content":"Also see <bpt id=\"p1\">[</bpt>operator&amp;#91;&amp;#93;<ept id=\"p1\">](#vector_lt_bool_gt___operator_at)</ept>.","pos":[2994,3058],"source":" Also see [operator&#91;&#93;](#vector_lt_bool_gt___operator_at)."},{"pos":[3069,3080],"content":"Proxy Class","linkify":"Proxy Class","nodes":[{"content":"Proxy Class","pos":[0,11]}]},{"pos":[3101,3170],"content":"<bpt id=\"p1\">[</bpt>vector<ph id=\"ph1\">\\&lt;</ph>bool&gt; reference Class<ept id=\"p1\">](#vector_lt_bool_gt___reference_class)</ept>","source":"[vector\\<bool> reference Class](#vector_lt_bool_gt___reference_class)"},{"pos":[3171,3328],"content":"A class that acts as a proxy to simulate <ph id=\"ph1\">`bool&amp;`</ph> behavior, and whose objects can provide references to elements (single bits) within a <ph id=\"ph2\">`vector&lt;bool&gt;`</ph> object.","source":"A class that acts as a proxy to simulate `bool&` behavior, and whose objects can provide references to elements (single bits) within a `vector<bool>` object."},{"pos":[3338,3350],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3354,3375],"content":"<bpt id=\"p1\">**</bpt>Header<ept id=\"p1\">**</ept>: <ph id=\"ph1\">\\&lt;</ph>vector&gt;","source":"**Header**: \\<vector>"},{"pos":[3382,3400],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[3410,3488],"content":"<bpt id=\"p1\">&lt;a name=\"vector_lt_bool_gt___const_pointer\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector<ph id=\"ph1\">\\&lt;</ph>bool&gt;::const_pointer","linkify":"<a name=\"vector_lt_bool_gt___const_pointer\"></a>  vector\\<bool>::const_pointer","source":"<a name=\"vector_lt_bool_gt___const_pointer\"></a>  vector\\<bool>::const_pointer"},{"pos":[3492,3637],"content":"A type that describes an object that can serve as a constant pointer to a Boolean element of the sequence contained by the <ph id=\"ph1\">`vector&lt;bool&gt;`</ph> object.","source":"A type that describes an object that can serve as a constant pointer to a Boolean element of the sequence contained by the `vector<bool>` object."},{"pos":[3702,3784],"content":"<bpt id=\"p1\">&lt;a name=\"vector_lt_bool_gt___const_reference\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector<ph id=\"ph1\">\\&lt;</ph>bool&gt;::const_reference","linkify":"<a name=\"vector_lt_bool_gt___const_reference\"></a>  vector\\<bool>::const_reference","source":"<a name=\"vector_lt_bool_gt___const_reference\"></a>  vector\\<bool>::const_reference"},{"pos":[3788,3935],"content":"A type that describes an object that can serve as a constant reference to a Boolean element of the sequence contained by the <ph id=\"ph1\">`vector&lt;bool&gt;`</ph> object.","source":"A type that describes an object that can serve as a constant reference to a Boolean element of the sequence contained by the `vector<bool>` object."},{"pos":[3992,3999],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4003,4134],"content":"For more information and code examples, see <bpt id=\"p1\">[</bpt>vector<ph id=\"ph1\">&amp;lt;</ph>bool<ph id=\"ph2\">&amp;gt;</ph>::reference::operator=<ept id=\"p1\">](#vector_lt_bool_gt___reference_operator_eq)</ept>.","source":"For more information and code examples, see [vector&lt;bool&gt;::reference::operator=](#vector_lt_bool_gt___reference_operator_eq)."},{"pos":[4144,4204],"content":"<bpt id=\"p1\">&lt;a name=\"vector_lt_bool_gt___flip\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector<ph id=\"ph1\">\\&lt;</ph>bool&gt;::flip","linkify":"<a name=\"vector_lt_bool_gt___flip\"></a>  vector\\<bool>::flip","source":"<a name=\"vector_lt_bool_gt___flip\"></a>  vector\\<bool>::flip"},{"pos":[4208,4246],"content":"Reverses all bits in a <ph id=\"ph1\">`vector&lt;bool&gt;`</ph>.","source":"Reverses all bits in a `vector<bool>`."},{"pos":[4284,4291],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4904,4977],"content":"<bpt id=\"p1\">&lt;a name=\"vector_lt_bool_gt___operator_at\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector<ph id=\"ph1\">\\&lt;</ph>bool&gt;::operator[]","linkify":"<a name=\"vector_lt_bool_gt___operator_at\"></a>  vector\\<bool>::operator[]","source":"<a name=\"vector_lt_bool_gt___operator_at\"></a>  vector\\<bool>::operator[]"},{"pos":[4981,5065],"content":"Returns a simulated reference to the <ph id=\"ph1\">`vector&lt;bool&gt;`</ph> element at a specified position.","source":"Returns a simulated reference to the `vector<bool>` element at a specified position."},{"pos":[5207,5217],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[5238,5247]},{"content":"Description","pos":[5248,5259]},{"pos":[5270,5313],"content":"The position of the <ph id=\"ph1\">`vector&lt;bool&gt;`</ph> element.","source":"The position of the `vector<bool>` element."},{"pos":[5324,5336],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5340,5535],"content":"A <bpt id=\"p1\">[</bpt>vector<ph id=\"ph1\">\\&lt;</ph>bool&gt;::reference<ept id=\"p1\">](#vector_lt_bool_gt___reference_class)</ept> or <bpt id=\"p2\">[</bpt>vector<ph id=\"ph2\">\\&lt;</ph>bool&gt;::const_reference<ept id=\"p2\">](#vector_lt_bool_gt___const_reference)</ept> object that contains the value of the indexed element.","source":"A [vector\\<bool>::reference](#vector_lt_bool_gt___reference_class) or [vector\\<bool>::const_reference](#vector_lt_bool_gt___const_reference) object that contains the value of the indexed element."},{"content":"If the position specified is greater than or equal to the size of the container, the result is undefined.","pos":[5542,5647]},{"pos":[5657,5664],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you compile with <ph id=\"ph1\">`_ITERATOR_DEBUG_LEVEL`</ph> set, a run-time error occurs if you attempt to access an element outside the bounds of the vector.","pos":[5668,5810],"source":"If you compile with `_ITERATOR_DEBUG_LEVEL` set, a run-time error occurs if you attempt to access an element outside the bounds of the vector."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Checked Iterators<ept id=\"p1\">](../standard-library/checked-iterators.md)</ept>.","pos":[5812,5900],"source":"  For more information, see [Checked Iterators](../standard-library/checked-iterators.md)."},{"pos":[5910,5917],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This code example shows the correct use of <ph id=\"ph1\">`vector&lt;bool&gt;::operator[]`</ph> and two common coding mistakes, which are commented out.","pos":[5922,6048],"source":"This code example shows the correct use of `vector<bool>::operator[]` and two common coding mistakes, which are commented out."},{"content":"These mistakes cause errors because the address of the <ph id=\"ph1\">`vector&lt;bool&gt;::reference`</ph> object that <ph id=\"ph2\">`vector&lt;bool&gt;::operator[]`</ph> returns cannot be taken.","pos":[6049,6193],"source":" These mistakes cause errors because the address of the `vector<bool>::reference` object that `vector<bool>::operator[]` returns cannot be taken."},{"pos":[7020,7086],"content":"<bpt id=\"p1\">&lt;a name=\"vector_lt_bool_gt___pointer\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector<ph id=\"ph1\">\\&lt;</ph>bool&gt;::pointer","linkify":"<a name=\"vector_lt_bool_gt___pointer\"></a>  vector\\<bool>::pointer","source":"<a name=\"vector_lt_bool_gt___pointer\"></a>  vector\\<bool>::pointer"},{"pos":[7090,7226],"content":"A type that describes an object that can serve as a pointer to a Boolean element of the sequence contained by the <ph id=\"ph1\">`vector&lt;bool&gt;`</ph> object.","source":"A type that describes an object that can serve as a pointer to a Boolean element of the sequence contained by the `vector<bool>` object."},{"pos":[7279,7361],"content":"<bpt id=\"p1\">&lt;a name=\"vector_lt_bool_gt___reference_class\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector<ph id=\"ph1\">\\&lt;</ph>bool&gt;::reference Class","linkify":"<a name=\"vector_lt_bool_gt___reference_class\"></a>  vector\\<bool>::reference Class","source":"<a name=\"vector_lt_bool_gt___reference_class\"></a>  vector\\<bool>::reference Class"},{"pos":[7365,7518],"content":"The <ph id=\"ph1\">`vector&lt;bool&gt;::reference`</ph> class is a proxy class provided by the <bpt id=\"p1\">[</bpt>vector<ph id=\"ph2\">\\&lt;</ph>bool&gt; Class<ept id=\"p1\">](../standard-library/vector-bool-class.md)</ept> to simulate <ph id=\"ph3\">`bool&amp;`</ph>.","source":"The `vector<bool>::reference` class is a proxy class provided by the [vector\\<bool> Class](../standard-library/vector-bool-class.md) to simulate `bool&`."},{"pos":[7528,7535],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A simulated reference is required because C++ does not natively allow direct references to bits.","pos":[7539,7635]},{"content":"<ph id=\"ph1\">`vector&lt;bool&gt;`</ph> uses only one bit per element, which can be referenced by using this proxy class.","pos":[7636,7732],"source":"`vector<bool>` uses only one bit per element, which can be referenced by using this proxy class."},{"content":"However, the reference simulation is not complete because certain assignments are not valid.","pos":[7733,7825]},{"content":"For example, because the address of the <ph id=\"ph1\">`vector&lt;bool&gt;::reference`</ph> object cannot be taken, the following code that uses <bpt id=\"p1\">[</bpt>vector<ph id=\"ph2\">\\&lt;</ph>bool&gt;::operator&amp;#91;&amp;#93;<ept id=\"p1\">](#vector_lt_bool_gt___operator_at)</ept> is not correct:","pos":[7826,8030],"source":" For example, because the address of the `vector<bool>::reference` object cannot be taken, the following code that uses [vector\\<bool>::operator&#91;&#93;](#vector_lt_bool_gt___operator_at) is not correct:"},{"pos":[8223,8304],"content":"<bpt id=\"p1\">&lt;a name=\"vector_lt_bool_gt___reference_flip\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector<ph id=\"ph1\">\\&lt;</ph>bool&gt;::reference::flip","linkify":"<a name=\"vector_lt_bool_gt___reference_flip\"></a>  vector\\<bool>::reference::flip","source":"<a name=\"vector_lt_bool_gt___reference_flip\"></a>  vector\\<bool>::reference::flip"},{"pos":[8308,8416],"content":"Inverts the Boolean value of a referenced <bpt id=\"p1\">[</bpt>vector<ph id=\"ph1\">\\&lt;</ph>bool&gt;<ept id=\"p1\">](../standard-library/vector-bool-class.md)</ept> element.","source":"Inverts the Boolean value of a referenced [vector\\<bool>](../standard-library/vector-bool-class.md) element."},{"pos":[8455,8462],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8473,8480],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9288,9387],"content":"<bpt id=\"p1\">&lt;a name=\"vector_lt_bool_gt___reference_operator_bool\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector<ph id=\"ph1\">\\&lt;</ph>bool&gt;::reference::operator bool","linkify":"<a name=\"vector_lt_bool_gt___reference_operator_bool\"></a>  vector\\<bool>::reference::operator bool","source":"<a name=\"vector_lt_bool_gt___reference_operator_bool\"></a>  vector\\<bool>::reference::operator bool"},{"pos":[9391,9464],"content":"Provides an implicit conversion from <ph id=\"ph1\">`vector&lt;bool&gt;::reference`</ph> to <ph id=\"ph2\">`bool`</ph>.","source":"Provides an implicit conversion from `vector<bool>::reference` to `bool`."},{"content":"```  operator bool() const;","pos":[9470,9497]},{"content":"reference&amp; operator=(const reference&amp; Right);","pos":[9878,9923],"source":"reference& operator=(const reference& Right);"},{"content":"reference&amp; operator=(bool Val);","pos":[9925,9956],"source":"reference& operator=(bool Val);"},{"pos":[12453,12513],"content":"<bpt id=\"p1\">&lt;a name=\"vector_lt_bool_gt___swap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  vector<ph id=\"ph1\">\\&lt;</ph>bool&gt;::swap","linkify":"<a name=\"vector_lt_bool_gt___swap\"></a>  vector\\<bool>::swap","source":"<a name=\"vector_lt_bool_gt___swap\"></a>  vector\\<bool>::swap"},{"pos":[12517,12695],"content":"Static member function that exchanges two elements of Boolean vectors ( <ph id=\"ph1\">`vector&lt;bool&gt;`</ph>) by using the proxy class <bpt id=\"p1\">[</bpt>vector<ph id=\"ph2\">\\&lt;</ph>bool&gt;::reference<ept id=\"p1\">](#vector_lt_bool_gt___reference_class)</ept>.","source":"Static member function that exchanges two elements of Boolean vectors ( `vector<bool>`) by using the proxy class [vector\\<bool>::reference](#vector_lt_bool_gt___reference_class)."},{"pos":[12784,12794],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The element to be exchanged with the <ph id=\"ph1\">`Right`</ph> element.","pos":[12808,12861],"source":" The element to be exchanged with the `Right` element."},{"content":"The element to be exchanged with the <ph id=\"ph1\">`Left`</ph> element.","pos":[12879,12931],"source":" The element to be exchanged with the `Left` element."},{"pos":[12941,12948],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This overload supports the special proxy requirements of <ph id=\"ph1\">`vector&lt;bool&gt;`</ph>.","pos":[12952,13024],"source":"This overload supports the special proxy requirements of `vector<bool>`."},{"content":"<bpt id=\"p1\">[</bpt>vector<ept id=\"p1\">](../standard-library/vector-class.md)</ept>::swap has the same functionality as the single-argument overload of <ph id=\"ph1\">`vector&lt;bool&gt;::swap()`</ph>.","pos":[13025,13162],"source":"[vector](../standard-library/vector-class.md)::swap has the same functionality as the single-argument overload of `vector<bool>::swap()`."},{"pos":[13171,13179],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Thread Safety in the C++ Standard Library<ept id=\"p1\">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept><ph id=\"ph1\"> </ph>","pos":[13183,13293],"source":"[Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C++ Standard Library Reference<ept id=\"p1\">](../standard-library/cpp-standard-library-reference.md)</ept>","pos":[13296,13384],"source":" [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)"}],"content":"---\ntitle: \"vector&lt;bool&gt; Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"vector<bool>\"\n  - \"std.vector<bool>\"\n  - \"std::vector<bool>\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"vector<bool> class\"\nms.assetid: 8028c8ed-ac9c-4f06-aba1-5de45c00aafb\ncaps.latest.revision: 29\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# vector&lt;bool&gt; Class\nThe `vector<bool>` class is a partial specialization of [vector](../standard-library/vector-class.md) for elements of type `bool`. It has an allocator for the underlying type that's used by the specialization, which provides space optimization by storing one `bool` value per bit.  \n  \n## Syntax  \n  \n```  \ntemplate <class Allocator = allocator<bool>>  \nclass vector<bool, Allocator>  \n```  \n  \n## Remarks  \n This class template specialization behaves like vector, except for the differences explained in this article.  \n  \n Operations that deal with the `bool` type correspond to values in the container storage. `allocator_traits::construct` is not used to construct these values.  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|[const_pointer](#vector_lt_bool_gt___const_pointer)|A typedef to a `const_iterator` that can serve as a constant pointer to a Boolean element of the `vector<bool>`.|  \n|[const_reference](#vector_lt_bool_gt___const_reference)|A typedef for `bool`. After initialization, it does not observe updates to the original value.|  \n|[pointer](#vector_lt_bool_gt___pointer)|A typedef to an `iterator` that can serve as a pointer to a Boolean element of the `vector<bool>`.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[flip](#vector_lt_bool_gt___flip)|Reverses all bits in the `vector<bool>`.|  \n|[swap](#vector_lt_bool_gt___swap)|Exchanges the elements of two `vector<bool>`s.|  \n|[operator&#91;&#93;](#vector_lt_bool_gt___operator_at)|Returns a simulated reference to the `vector<bool>` element at a specified position.|  \n|`at`|Functions the same as the unspecialized [vector](../standard-library/vector-class.md)::at function, except that it uses the proxy class [vector\\<bool>::reference](#vector_lt_bool_gt___reference_class). Also see [operator&#91;&#93;](#vector_lt_bool_gt___operator_at).|  \n|`front`|Functions the same as the unspecialized [vector](../standard-library/vector-class.md)::front function, except that it uses the proxy class [vector\\<bool>::reference](#vector_lt_bool_gt___reference_class). Also see [operator&#91;&#93;](#vector_lt_bool_gt___operator_at).|  \n|`back`|Functions the same as the unspecialized [vector](../standard-library/vector-class.md)::back function, except that it uses the proxy class [vector\\<bool>::reference](#vector_lt_bool_gt___reference_class). Also see [operator&#91;&#93;](#vector_lt_bool_gt___operator_at).|  \n  \n### Proxy Class  \n  \n|||  \n|-|-|  \n|[vector\\<bool> reference Class](#vector_lt_bool_gt___reference_class)|A class that acts as a proxy to simulate `bool&` behavior, and whose objects can provide references to elements (single bits) within a `vector<bool>` object.|  \n  \n## Requirements  \n **Header**: \\<vector>  \n  \n **Namespace:** std  \n  \n##  <a name=\"vector_lt_bool_gt___const_pointer\"></a>  vector\\<bool>::const_pointer  \n A type that describes an object that can serve as a constant pointer to a Boolean element of the sequence contained by the `vector<bool>` object.  \n  \n```  \ntypedef const_iterator const_pointer;  \n```  \n  \n##  <a name=\"vector_lt_bool_gt___const_reference\"></a>  vector\\<bool>::const_reference  \n A type that describes an object that can serve as a constant reference to a Boolean element of the sequence contained by the `vector<bool>` object.  \n  \n```  \ntypedef bool const_reference;  \n```  \n  \n### Remarks  \n For more information and code examples, see [vector&lt;bool&gt;::reference::operator=](#vector_lt_bool_gt___reference_operator_eq).  \n  \n##  <a name=\"vector_lt_bool_gt___flip\"></a>  vector\\<bool>::flip  \n Reverses all bits in a `vector<bool>`.  \n  \n```  \nvoid flip();\n```  \n  \n### Example  \n  \n```cpp  \n// vector_bool_flip.cpp  \n// compile with: /EHsc /W4  \n#include <vector>  \n#include <iostream>  \n  \nint main()  \n{  \n    using namespace std;  \n    cout << boolalpha; // format output for subsequent code  \n  \n    vector<bool> vb = { true, false, false, true, true };  \n    cout << \"The vector is:\" << endl << \"    \";  \n    for (const auto& b : vb) {  \n        cout << b << \" \";  \n    }  \n    cout << endl;  \n  \n    vb.flip();  \n  \n    cout << \"The flipped vector is:\" << endl << \"    \";  \n    for (const auto& b : vb) {  \n        cout << b << \" \";  \n    }  \n    cout << endl;  \n}  \n  \n```  \n  \n##  <a name=\"vector_lt_bool_gt___operator_at\"></a>  vector\\<bool>::operator[]  \n Returns a simulated reference to the `vector<bool>` element at a specified position.  \n  \n```  \nvector<bool>::reference operator[](size_type Pos);\n\nvector&<bool&>::const_reference operator[](size_type Pos) const;\n```  \n  \n### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|`Pos`|The position of the `vector<bool>` element.|  \n  \n### Return Value  \n A [vector\\<bool>::reference](#vector_lt_bool_gt___reference_class) or [vector\\<bool>::const_reference](#vector_lt_bool_gt___const_reference) object that contains the value of the indexed element.  \n  \n If the position specified is greater than or equal to the size of the container, the result is undefined.  \n  \n### Remarks  \n If you compile with `_ITERATOR_DEBUG_LEVEL` set, a run-time error occurs if you attempt to access an element outside the bounds of the vector.  For more information, see [Checked Iterators](../standard-library/checked-iterators.md).  \n  \n### Example  \n  This code example shows the correct use of `vector<bool>::operator[]` and two common coding mistakes, which are commented out. These mistakes cause errors because the address of the `vector<bool>::reference` object that `vector<bool>::operator[]` returns cannot be taken.  \n  \n```cpp  \n  \n// cl.exe /EHsc /nologo /W4 /MTd   \n#include <vector>  \n#include <iostream>  \n  \nint main()  \n{  \n    using namespace std;  \n    cout << boolalpha;  \n    vector<bool> vb;  \n  \n    vb.push_back(true);  \n    vb.push_back(false);  \n  \n    //    bool* pb = &vb[1]; // conversion error -                         do not use  \n    //    bool& refb = vb[1];   // conversion error -                         do not use  \n    bool hold = vb[1];  \n    cout << \"The second element of vb is \" << vb[1] << endl;  \n    cout << \"The held value from the second element of vb is \" << hold << endl;  \n  \n    // Note this doesn't modify hold.  \n    vb[1] = true;  \n    cout << \"The second element of vb is \" << vb[1] << endl;  \n    cout << \"The held value from the second element of vb is \" << hold << endl;  \n}  \n  \n```  \n  \n##  <a name=\"vector_lt_bool_gt___pointer\"></a>  vector\\<bool>::pointer  \n A type that describes an object that can serve as a pointer to a Boolean element of the sequence contained by the `vector<bool>` object.  \n  \n```  \ntypedef iterator pointer;  \n```  \n  \n##  <a name=\"vector_lt_bool_gt___reference_class\"></a>  vector\\<bool>::reference Class  \n The `vector<bool>::reference` class is a proxy class provided by the [vector\\<bool> Class](../standard-library/vector-bool-class.md) to simulate `bool&`.  \n  \n### Remarks  \n A simulated reference is required because C++ does not natively allow direct references to bits. `vector<bool>` uses only one bit per element, which can be referenced by using this proxy class. However, the reference simulation is not complete because certain assignments are not valid. For example, because the address of the `vector<bool>::reference` object cannot be taken, the following code that uses [vector\\<bool>::operator&#91;&#93;](#vector_lt_bool_gt___operator_at) is not correct:  \n  \n```cpp  \n    vector<bool> vb;  \n...  \n    bool* pb = &vb[1]; // conversion error -         do not use  \n    bool& refb = vb[1];   // conversion error -         do not use  \n```  \n  \n###  <a name=\"vector_lt_bool_gt___reference_flip\"></a>  vector\\<bool>::reference::flip  \n Inverts the Boolean value of a referenced [vector\\<bool>](../standard-library/vector-bool-class.md) element.  \n  \n```  \nvoid flip();\n```  \n  \n#### Remarks  \n  \n#### Example  \n  \n```cpp  \n// vector_bool_ref_flip.cpp  \n// compile with: /EHsc /W4  \n#include <vector>  \n#include <iostream>  \n  \nint main()  \n{  \n    using namespace std;  \n    cout << boolalpha;  \n  \n    vector<bool> vb = { true, false, false, true, true };  \n  \n    cout << \"The vector is: \" << endl << \"    \";  \n    for (const auto& b : vb) {  \n        cout << b << \" \";  \n    }  \n    cout << endl;  \n  \n    vector<bool>::reference vbref = vb.front();  \n    vbref.flip();  \n  \n    cout << \"The vector with first element flipped is: \" << endl << \"    \";  \n    for (const auto& b : vb) {  \n        cout << b << \" \";  \n    }  \n    cout << endl;  \n}  \n/* Output:  \nThe vector is:  \n    true false false true true  \nThe vector with first element flipped is:  \n    false false false true true  \n    */  \n  \n```  \n  \n###  <a name=\"vector_lt_bool_gt___reference_operator_bool\"></a>  vector\\<bool>::reference::operator bool  \n Provides an implicit conversion from `vector<bool>::reference` to `bool`.  \n  \n```  operator bool() const;\n```  \n  \n#### Return Value  \n The Boolean value of the element of the vector\\<bool> object.  \n  \n#### Remarks  \n The `vector<bool>` object cannot be modified by this operator.  \n  \n###  <a name=\"vector_lt_bool_gt___reference_operator_eq\"></a>  vector\\<bool>::reference::operator=  \n Assigns a Boolean value to a bit, or the value held by a referenced element to a bit.  \n  \n```  \nreference& operator=(const reference& Right);\n\nreference& operator=(bool Val);\n```  \n  \n#### Parameters  \n `Right`  \n The element reference whose value is to be assigned to the bit.  \n  \n `Val`  \n The Boolean value to be assigned to the bit.  \n  \n#### Example  \n  \n```cpp  \n// vector_bool_ref_op_assign.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n#include <string>  \n  \nusing namespace std;  \n  \ntemplate <typename C> void print(const string& s, const C& c) {  \n    cout << s;  \n  \n    for (const auto& e : c) {  \n        cout << e << \" \";  \n    }  \n  \n    cout << endl;  \n}  \n  \nint main()  \n{  \n    cout << boolalpha;  \n  \n    vector<bool> vb = { true, false, false, true, true };  \n  \n    print(\"The vector is: \", vb);  \n  \n    // Invoke vector<bool>::reference::operator=()  \n    vector<bool>::reference refelem1 = vb[0];  \n    vector<bool>::reference refelem2 = vb[1];  \n    vector<bool>::reference refelem3 = vb[2];  \n  \n    bool b1 = refelem1;  \n    bool b2 = refelem2;  \n    bool b3 = refelem3;  \n    cout << \"The original value of the 1st element stored in a bool: \" << b1 << endl;  \n    cout << \"The original value of the 2nd element stored in a bool: \" << b2 << endl;  \n    cout << \"The original value of the 3rd element stored in a bool: \" << b3 << endl;  \n    cout << endl;  \n  \n    refelem2 = refelem1;  \n  \n    print(\"The vector after assigning refelem1 to refelem2 is now: \", vb);  \n  \n    refelem3 = true;  \n  \n    print(\"The vector after assigning false to refelem1 is now: \", vb);  \n  \n    // The initial values are still stored in the bool variables and remained unchanged  \n    cout << \"The original value of the 1st element still stored in a bool: \" << b1 << endl;  \n    cout << \"The original value of the 2nd element still stored in a bool: \" << b2 << endl;  \n    cout << \"The original value of the 3rd element still stored in a bool: \" << b3 << endl;  \n    cout << endl;  \n}  \n/* Output:  \nThe vector is: true false false true true  \nThe original value of the 1st element stored in a bool: true  \nThe original value of the 2nd element stored in a bool: false  \nThe original value of the 3rd element stored in a bool: false  \n  \nThe vector after assigning refelem1 to refelem2 is now: true true false true true  \nThe vector after assigning false to refelem1 is now: true true true true true  \nThe original value of the 1st element still stored in a bool: true  \nThe original value of the 2nd element still stored in a bool: false  \nThe original value of the 3rd element still stored in a bool: false  \n*/  \n  \n```  \n  \n##  <a name=\"vector_lt_bool_gt___swap\"></a>  vector\\<bool>::swap  \n Static member function that exchanges two elements of Boolean vectors ( `vector<bool>`) by using the proxy class [vector\\<bool>::reference](#vector_lt_bool_gt___reference_class).  \n  \n```  \n \nstatic void swap(\n    reference Left,  \n    reference Right);\n```  \n  \n### Parameters  \n `Left`  \n The element to be exchanged with the `Right` element.  \n  \n `Right`  \n The element to be exchanged with the `Left` element.  \n  \n### Remarks  \n This overload supports the special proxy requirements of `vector<bool>`. [vector](../standard-library/vector-class.md)::swap has the same functionality as the single-argument overload of `vector<bool>::swap()`.  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n"}