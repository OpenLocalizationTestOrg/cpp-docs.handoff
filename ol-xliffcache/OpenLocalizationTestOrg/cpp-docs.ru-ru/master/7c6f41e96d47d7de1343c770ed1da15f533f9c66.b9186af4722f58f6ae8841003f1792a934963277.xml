{"nodes":[{"pos":[12,44],"content":"1. Introduction | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"1. Introduction | Microsoft Docs","pos":[0,32]}]},{"content":"1. Introduction","pos":[524,539]},{"content":"This document specifies a collection of compiler directives, library functions, and environment variables that can be used to specify shared-memory parallelism in C and C++ programs.","pos":[540,722]},{"content":"The functionality described in this document is collectively known as the <bpt id=\"p1\">*</bpt>OpenMP C/C++ Application Program Interface (API)<ept id=\"p1\">*</ept>.","pos":[723,848],"source":" The functionality described in this document is collectively known as the *OpenMP C/C++ Application Program Interface (API)*."},{"content":"The goal of this specification is to provide a model for parallel programming that allows a program to be portable across shared-memory architectures from different vendors.","pos":[849,1022]},{"content":"The OpenMP C/C++ API will be supported by compilers from numerous vendors.","pos":[1023,1097]},{"content":"More information about OpenMP, including the <bpt id=\"p1\">*</bpt>OpenMP Fortran Application Program Interface<ept id=\"p1\">*</ept>, can be found at the following web site:","pos":[1098,1230],"source":" More information about OpenMP, including the *OpenMP Fortran Application Program Interface*, can be found at the following web site:"},{"content":"http://www.openmp.org","pos":[1238,1259]},{"content":"The directives, library functions, and environment variables defined in this document will allow users to create and manage parallel programs while permitting portability.","pos":[1290,1461]},{"content":"The directives extend the C and C++ sequential programming model with single program multiple data (SPMD) constructs, work-sharing constructs, and synchronization constructs, and they provide support for the sharing and privatization of data.","pos":[1462,1704]},{"content":"Compilers that support the OpenMP C and C++ API will include a command-line option to the compiler that activates and allows interpretation of all OpenMP compiler directives.","pos":[1705,1879]}],"content":"---\ntitle: \"1. Introduction | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: c42e72bc-0e31-4b1c-b670-cd82673c0c5a\ncaps.latest.revision: 6\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# 1. Introduction\nThis document specifies a collection of compiler directives, library functions, and environment variables that can be used to specify shared-memory parallelism in C and C++ programs. The functionality described in this document is collectively known as the *OpenMP C/C++ Application Program Interface (API)*. The goal of this specification is to provide a model for parallel programming that allows a program to be portable across shared-memory architectures from different vendors. The OpenMP C/C++ API will be supported by compilers from numerous vendors. More information about OpenMP, including the *OpenMP Fortran Application Program Interface*, can be found at the following web site:  \n  \n [http://www.openmp.org](http://www.openmp.org)  \n  \n The directives, library functions, and environment variables defined in this document will allow users to create and manage parallel programs while permitting portability. The directives extend the C and C++ sequential programming model with single program multiple data (SPMD) constructs, work-sharing constructs, and synchronization constructs, and they provide support for the sharing and privatization of data. Compilers that support the OpenMP C and C++ API will include a command-line option to the compiler that activates and allows interpretation of all OpenMP compiler directives."}