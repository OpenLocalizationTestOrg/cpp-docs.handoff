{"nodes":[{"pos":[12,46],"content":"common_type Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"common_type Class | Microsoft Docs","pos":[0,34]}]},{"pos":[762,779],"content":"common_type Class","linkify":"common_type Class","nodes":[{"content":"common_type Class","pos":[0,17]}]},{"content":"Determines the common type of one or more types.","pos":[780,828]},{"pos":[837,843],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1314,1324],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[1328,1418],"content":"List of types that are either <bpt id=\"p1\">[</bpt>complete types<ept id=\"p1\">](../c-language/incomplete-types.md)</ept> or void.","source":"List of types that are either [complete types](../c-language/incomplete-types.md) or void."},{"pos":[1427,1434],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1438,1533],"content":"The <ph id=\"ph1\">`type`</ph> member is the common type to which all types in the parameter list can be converted.","source":"The `type` member is the common type to which all types in the parameter list can be converted."},{"pos":[1542,1549],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following program demonstrates some correct usage scenarios and tests for results.","pos":[1553,1639]},{"pos":[3672,3678],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"pos":[4095,4107],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[4111,4136],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> &lt;type_traits&gt;","source":"**Header:** <type_traits>"},{"pos":[4143,4161],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[4170,4178],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[4182,4233],"content":"<bpt id=\"p1\">[</bpt>&lt;type_traits&gt;<ept id=\"p1\">](../standard-library/type-traits.md)</ept>","source":"[<type_traits>](../standard-library/type-traits.md)"}],"content":"---\ntitle: \"common_type Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.tr1.common_type\"\n  - \"common_type\"\n  - \"std::tr1::common_type\"\n  - \"std.common_type\"\n  - \"std::common_type\"\n  - \"type_traits/std::common_type\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"common_type class[TR1]\"\n  - \"common_type\"\nms.assetid: 02bc4e7b-c63d-49de-9f8a-511d3a5c1e7f\ncaps.latest.revision: 22\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# common_type Class\nDetermines the common type of one or more types.  \n  \n## Syntax  \n  \n```\ntemplate <class... T>  \nstruct common_type;\n\ntemplate <class T>  \nstruct common_type<T> {\n    typedef typename decay<T>::type type;\n};\n\ntemplate <class T, class U>  \nstruct common_type<T, U> {\n    typedef typename decay<decltype(true declval<T>() :\n    declval<U>())>::type type;\n};\n\ntemplate <class T, class U, class... V>  \nstruct common_type<T, U, V...> {\n    typedef typename common_type<typename common_type<T, U>::type, V...>::type type;\n};\n```  \n  \n#### Parameters  \n List of types that are either [complete types](../c-language/incomplete-types.md) or void.  \n  \n## Remarks  \n The `type` member is the common type to which all types in the parameter list can be converted.  \n  \n## Example  \n The following program demonstrates some correct usage scenarios and tests for results.  \n  \n```cpp  \n// Compile using cl.exe /EHsc  \n// common_type sample  \n#include <iostream>  \n#include <type_traits>  \n  \nstruct Base {};  \nstruct Derived : Base {};  \n  \nint main()   \n{  \n    typedef std::common_type<unsigned char, short, int>::type NumericType;  \n    typedef std::common_type<float, double>::type FloatType;  \n    typedef std::common_type<const int, volatile int>::type ModifiedIntType;  \n    typedef std::common_type<Base, Derived>::type ClassType;  \n  \n    std::cout << std::boolalpha;  \n    std::cout << \"Test for typedefs of common_type int\" << std::endl;  \n    std::cout << \"NumericType: \"     << std::is_same<int, NumericType>::value << std::endl;  \n    std::cout << \"FloatType: \"       << std::is_same<int, FloatType>::value << std::endl;  \n    std::cout << \"ModifiedIntType: \" << std::is_same<int, ModifiedIntType>::value << std::endl;  \n    std::cout << \"ClassType: \"       << std::is_same<int, ClassType>::value << std::endl;  \n    std::cout << \"---------------------------\" << std::endl;  \n    std::cout << \"Test for typedefs of common_type double\" << std::endl;  \n    std::cout << \"NumericType: \"     << std::is_same<double, NumericType>::value << std::endl;  \n    std::cout << \"FloatType: \"       << std::is_same<double, FloatType>::value << std::endl;  \n    std::cout << \"ModifiedIntType: \" << std::is_same<double, ModifiedIntType>::value << std::endl;  \n    std::cout << \"ClassType: \"       << std::is_same<double, ClassType>::value << std::endl;  \n    std::cout << \"---------------------------\" << std::endl;  \n    std::cout << \"Test for typedefs of common_type Base\" << std::endl;  \n    std::cout << \"NumericType: \"     << std::is_same<Base, NumericType>::value << std::endl;  \n    std::cout << \"FloatType: \"       << std::is_same<Base, FloatType>::value << std::endl;  \n    std::cout << \"ModifiedIntType: \" << std::is_same<Base, ModifiedIntType>::value << std::endl;  \n    std::cout << \"ClassType: \"       << std::is_same<Base, ClassType>::value << std::endl;  \n  \n    return 0;  \n}  \n```  \n  \n## Output  \n  \n```\nTest for typedefs of common_type int\nNumericType: true\nFloatType: false\nModifiedIntType: true\nClassType: false\n---------------------------\nTest for typedefs of common_type double\nNumericType: false\nFloatType: true\nModifiedIntType: false\nClassType: false\n---------------------------\nTest for typedefs of common_type Base\nNumericType: false\nFloatType: false\nModifiedIntType: false\nClassType: true\n```  \n  \n## Requirements  \n **Header:** <type_traits>  \n  \n **Namespace:** std  \n  \n## See Also  \n [<type_traits>](../standard-library/type-traits.md)\n\n\n\n"}