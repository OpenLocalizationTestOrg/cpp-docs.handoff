{"nodes":[{"pos":[12,53],"content":"Message Map Macros (ATL) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Message Map Macros (ATL) | Microsoft Docs","pos":[0,41]}]},{"pos":[536,560],"content":"Message Map Macros (ATL)","linkify":"Message Map Macros (ATL)","nodes":[{"content":"Message Map Macros (ATL)","pos":[0,24]}]},{"content":"These macros define message maps and entries.","pos":[561,606]},{"pos":[627,654],"content":"<bpt id=\"p1\">[</bpt>ALT_MSG_MAP<ept id=\"p1\">](#alt_msg_map)</ept>","source":"[ALT_MSG_MAP](#alt_msg_map)"},{"content":"Marks the beginning of an alternate message map.","pos":[655,703]},{"pos":[708,739],"content":"<bpt id=\"p1\">[</bpt>BEGIN_MSG_MAP<ept id=\"p1\">](#begin_msg_map)</ept>","source":"[BEGIN_MSG_MAP](#begin_msg_map)"},{"content":"Marks the beginning of the default message map.","pos":[740,787]},{"pos":[792,831],"content":"<bpt id=\"p1\">[</bpt>CHAIN_MSG_MAP_ALT<ept id=\"p1\">](#chain_msg_map_alt)</ept>","source":"[CHAIN_MSG_MAP_ALT](#chain_msg_map_alt)"},{"content":"Chains to an alternate message map in the base class.","pos":[832,885]},{"pos":[890,943],"content":"<bpt id=\"p1\">[</bpt>CHAIN_MSG_MAP_ALT_MEMBER<ept id=\"p1\">](#chain_msg_map_alt_member)</ept>","source":"[CHAIN_MSG_MAP_ALT_MEMBER](#chain_msg_map_alt_member)"},{"content":"Chains to an alternate message map in a data member of the class.","pos":[944,1009]},{"pos":[1014,1045],"content":"<bpt id=\"p1\">[</bpt>CHAIN_MSG_MAP<ept id=\"p1\">](#chain_msg_map)</ept>","source":"[CHAIN_MSG_MAP](#chain_msg_map)"},{"content":"Chains to the default message map in the base class.","pos":[1046,1098]},{"pos":[1103,1150],"content":"<bpt id=\"p1\">[</bpt>CHAIN_MSG_MAP_DYNAMIC<ept id=\"p1\">](#chain_msg_map_dynamic)</ept>","source":"[CHAIN_MSG_MAP_DYNAMIC](#chain_msg_map_dynamic)"},{"content":"Chains to the message map in another class at run time.","pos":[1151,1206]},{"pos":[1211,1256],"content":"<bpt id=\"p1\">[</bpt>CHAIN_MSG_MAP_MEMBER<ept id=\"p1\">](#chain_msg_map_member)</ept>","source":"[CHAIN_MSG_MAP_MEMBER](#chain_msg_map_member)"},{"content":"Chains to the default message map in a data member of the class.","pos":[1257,1321]},{"pos":[1326,1371],"content":"<bpt id=\"p1\">[</bpt>COMMAND_CODE_HANDLER<ept id=\"p1\">](#command_code_handler)</ept>","source":"[COMMAND_CODE_HANDLER](#command_code_handler)"},{"pos":[1372,1456],"content":"Maps a <bpt id=\"p1\">**</bpt>WM_COMMAND<ept id=\"p1\">**</ept> message to a handler function, based on the notification code.","source":"Maps a **WM_COMMAND** message to a handler function, based on the notification code."},{"pos":[1461,1496],"content":"<bpt id=\"p1\">[</bpt>COMMAND_HANDLER<ept id=\"p1\">](#command_handler)</ept>","source":"[COMMAND_HANDLER](#command_handler)"},{"pos":[1497,1642],"content":"Maps a <bpt id=\"p1\">**</bpt>WM_COMMAND<ept id=\"p1\">**</ept> message to a handler function, based on the notification code and the identifier of the menu item, control, or accelerator.","source":"Maps a **WM_COMMAND** message to a handler function, based on the notification code and the identifier of the menu item, control, or accelerator."},{"pos":[1647,1688],"content":"<bpt id=\"p1\">[</bpt>COMMAND_ID_HANDLER<ept id=\"p1\">](#command_id_handler)</ept>","source":"[COMMAND_ID_HANDLER](#command_id_handler)"},{"pos":[1689,1808],"content":"Maps a <bpt id=\"p1\">**</bpt>WM_COMMAND<ept id=\"p1\">**</ept> message to a handler function, based on the identifier of the menu item, control, or accelerator.","source":"Maps a **WM_COMMAND** message to a handler function, based on the identifier of the menu item, control, or accelerator."},{"pos":[1813,1870],"content":"<bpt id=\"p1\">[</bpt>COMMAND_RANGE_CODE_HANDLER<ept id=\"p1\">](#command_range_code_handler)</ept>","source":"[COMMAND_RANGE_CODE_HANDLER](#command_range_code_handler)"},{"pos":[1871,2001],"content":"Maps a <bpt id=\"p1\">**</bpt>WM_COMMAND<ept id=\"p1\">**</ept> message to a handler function, based on the notification code and a contiguous range of control identifiers.","source":"Maps a **WM_COMMAND** message to a handler function, based on the notification code and a contiguous range of control identifiers."},{"pos":[2006,2053],"content":"<bpt id=\"p1\">[</bpt>COMMAND_RANGE_HANDLER<ept id=\"p1\">](#command_range_handler)</ept>","source":"[COMMAND_RANGE_HANDLER](#command_range_handler)"},{"pos":[2054,2158],"content":"Maps a <bpt id=\"p1\">**</bpt>WM_COMMAND<ept id=\"p1\">**</ept> message to a handler function, based on a contiguous range of control identifiers.","source":"Maps a **WM_COMMAND** message to a handler function, based on a contiguous range of control identifiers."},{"pos":[2163,2210],"content":"<bpt id=\"p1\">[</bpt>DECLARE_EMPTY_MSG_MAP<ept id=\"p1\">](#declare_empty_msg_map)</ept>","source":"[DECLARE_EMPTY_MSG_MAP](#declare_empty_msg_map)"},{"content":"Implements an empty message map.","pos":[2211,2243]},{"pos":[2248,2305],"content":"<bpt id=\"p1\">[</bpt>DEFAULT_REFLECTION_HANDLER<ept id=\"p1\">](#default_reflection_handler)</ept>","source":"[DEFAULT_REFLECTION_HANDLER](#default_reflection_handler)"},{"content":"Provides a default handler for reflected messages that are not handled otherwise.","pos":[2306,2387]},{"pos":[2392,2419],"content":"<bpt id=\"p1\">[</bpt>END_MSG_MAP<ept id=\"p1\">](#end_msg_map)</ept>","source":"[END_MSG_MAP](#end_msg_map)"},{"content":"Marks the end of a message map.","pos":[2420,2451]},{"pos":[2456,2503],"content":"<bpt id=\"p1\">[</bpt>FORWARD_NOTIFICATIONS<ept id=\"p1\">](#forward_notifications)</ept>","source":"[FORWARD_NOTIFICATIONS](#forward_notifications)"},{"content":"Forwards notification messages to the parent window.","pos":[2504,2556]},{"pos":[2561,2596],"content":"<bpt id=\"p1\">[</bpt>MESSAGE_HANDLER<ept id=\"p1\">](#message_handler)</ept>","source":"[MESSAGE_HANDLER](#message_handler)"},{"content":"Maps a Windows message to a handler function.","pos":[2597,2642]},{"pos":[2647,2694],"content":"<bpt id=\"p1\">[</bpt>MESSAGE_RANGE_HANDLER<ept id=\"p1\">](#message_range_handler)</ept>","source":"[MESSAGE_RANGE_HANDLER](#message_range_handler)"},{"content":"Maps a contiguous range of Windows messages to a handler function.","pos":[2695,2761]},{"pos":[2766,2809],"content":"<bpt id=\"p1\">[</bpt>NOTIFY_CODE_HANDLER<ept id=\"p1\">](#notify_code_handler)</ept>","source":"[NOTIFY_CODE_HANDLER](#notify_code_handler)"},{"pos":[2810,2893],"content":"Maps a <bpt id=\"p1\">**</bpt>WM_NOTIFY<ept id=\"p1\">**</ept> message to a handler function, based on the notification code.","source":"Maps a **WM_NOTIFY** message to a handler function, based on the notification code."},{"pos":[2898,2931],"content":"<bpt id=\"p1\">[</bpt>NOTIFY_HANDLER<ept id=\"p1\">](#notify_handler)</ept>","source":"[NOTIFY_HANDLER](#notify_handler)"},{"pos":[2932,3042],"content":"Maps a <bpt id=\"p1\">**</bpt>WM_NOTIFY<ept id=\"p1\">**</ept> message to a handler function, based on the notification code and the control identifier.","source":"Maps a **WM_NOTIFY** message to a handler function, based on the notification code and the control identifier."},{"pos":[3047,3086],"content":"<bpt id=\"p1\">[</bpt>NOTIFY_ID_HANDLER<ept id=\"p1\">](#notify_id_handler)</ept>","source":"[NOTIFY_ID_HANDLER](#notify_id_handler)"},{"pos":[3087,3171],"content":"Maps a <bpt id=\"p1\">**</bpt>WM_NOTIFY<ept id=\"p1\">**</ept> message to a handler function, based on the control identifier.","source":"Maps a **WM_NOTIFY** message to a handler function, based on the control identifier."},{"pos":[3176,3231],"content":"<bpt id=\"p1\">[</bpt>NOTIFY_RANGE_CODE_HANDLER<ept id=\"p1\">](#notify_range_code_handler)</ept>","source":"[NOTIFY_RANGE_CODE_HANDLER](#notify_range_code_handler)"},{"pos":[3232,3361],"content":"Maps a <bpt id=\"p1\">**</bpt>WM_NOTIFY<ept id=\"p1\">**</ept> message to a handler function, based on the notification code and a contiguous range of control identifiers.","source":"Maps a **WM_NOTIFY** message to a handler function, based on the notification code and a contiguous range of control identifiers."},{"pos":[3366,3411],"content":"<bpt id=\"p1\">[</bpt>NOTIFY_RANGE_HANDLER<ept id=\"p1\">](#notify_range_handler)</ept>","source":"[NOTIFY_RANGE_HANDLER](#notify_range_handler)"},{"pos":[3412,3515],"content":"Maps a <bpt id=\"p1\">**</bpt>WM_NOTIFY<ept id=\"p1\">**</ept> message to a handler function, based on a contiguous range of control identifiers.","source":"Maps a **WM_NOTIFY** message to a handler function, based on a contiguous range of control identifiers."},{"pos":[3520,3567],"content":"<bpt id=\"p1\">[</bpt>REFLECT_NOTIFICATIONS<ept id=\"p1\">](#reflect_notifications)</ept>","source":"[REFLECT_NOTIFICATIONS](#reflect_notifications)"},{"content":"Reflects notification messages back to the window that sent them.","pos":[3568,3633]},{"pos":[3638,3703],"content":"<bpt id=\"p1\">[</bpt>REFLECTED_COMMAND_CODE_HANDLER<ept id=\"p1\">](#reflected_command_code_handler)</ept>","source":"[REFLECTED_COMMAND_CODE_HANDLER](#reflected_command_code_handler)"},{"pos":[3704,3798],"content":"Maps a reflected <bpt id=\"p1\">**</bpt>WM_COMMAND<ept id=\"p1\">**</ept> message to a handler function, based on the notification code.","source":"Maps a reflected **WM_COMMAND** message to a handler function, based on the notification code."},{"pos":[3803,3858],"content":"<bpt id=\"p1\">[</bpt>REFLECTED_COMMAND_HANDLER<ept id=\"p1\">](#reflected_command_handler)</ept>","source":"[REFLECTED_COMMAND_HANDLER](#reflected_command_handler)"},{"pos":[3859,4014],"content":"Maps a reflected <bpt id=\"p1\">**</bpt>WM_COMMAND<ept id=\"p1\">**</ept> message to a handler function, based on the notification code and the identifier of the menu item, control, or accelerator.","source":"Maps a reflected **WM_COMMAND** message to a handler function, based on the notification code and the identifier of the menu item, control, or accelerator."},{"pos":[4019,4080],"content":"<bpt id=\"p1\">[</bpt>REFLECTED_COMMAND_ID_HANDLER<ept id=\"p1\">](#reflected_command_id_handler)</ept>","source":"[REFLECTED_COMMAND_ID_HANDLER](#reflected_command_id_handler)"},{"pos":[4081,4210],"content":"Maps a reflected <bpt id=\"p1\">**</bpt>WM_COMMAND<ept id=\"p1\">**</ept> message to a handler function, based on the identifier of the menu item, control, or accelerator.","source":"Maps a reflected **WM_COMMAND** message to a handler function, based on the identifier of the menu item, control, or accelerator."},{"pos":[4215,4292],"content":"<bpt id=\"p1\">[</bpt>REFLECTED_COMMAND_RANGE_CODE_HANDLER<ept id=\"p1\">](#reflected_command_range_code_handler)</ept>","source":"[REFLECTED_COMMAND_RANGE_CODE_HANDLER](#reflected_command_range_code_handler)"},{"pos":[4293,4433],"content":"Maps a reflected <bpt id=\"p1\">**</bpt>WM_COMMAND<ept id=\"p1\">**</ept> message to a handler function, based on the notification code and a contiguous range of control identifiers.","source":"Maps a reflected **WM_COMMAND** message to a handler function, based on the notification code and a contiguous range of control identifiers."},{"pos":[4438,4505],"content":"<bpt id=\"p1\">[</bpt>REFLECTED_COMMAND_RANGE_HANDLER<ept id=\"p1\">](#reflected_command_range_handler)</ept>","source":"[REFLECTED_COMMAND_RANGE_HANDLER](#reflected_command_range_handler)"},{"pos":[4506,4620],"content":"Maps a reflected <bpt id=\"p1\">**</bpt>WM_COMMAND<ept id=\"p1\">**</ept> message to a handler function, based on a contiguous range of control identifiers.","source":"Maps a reflected **WM_COMMAND** message to a handler function, based on a contiguous range of control identifiers."},{"pos":[4625,4688],"content":"<bpt id=\"p1\">[</bpt>REFLECTED_NOTIFY_CODE_HANDLER<ept id=\"p1\">](#reflected_notify_code_handler)</ept>","source":"[REFLECTED_NOTIFY_CODE_HANDLER](#reflected_notify_code_handler)"},{"pos":[4689,4782],"content":"Maps a reflected <bpt id=\"p1\">**</bpt>WM_NOTIFY<ept id=\"p1\">**</ept> message to a handler function, based on the notification code.","source":"Maps a reflected **WM_NOTIFY** message to a handler function, based on the notification code."},{"pos":[4787,4840],"content":"<bpt id=\"p1\">[</bpt>REFLECTED_NOTIFY_HANDLER<ept id=\"p1\">](#reflected_notify_handler)</ept>","source":"[REFLECTED_NOTIFY_HANDLER](#reflected_notify_handler)"},{"pos":[4841,4961],"content":"Maps a reflected <bpt id=\"p1\">**</bpt>WM_NOTIFY<ept id=\"p1\">**</ept> message to a handler function, based on the notification code and the control identifier.","source":"Maps a reflected **WM_NOTIFY** message to a handler function, based on the notification code and the control identifier."},{"pos":[4966,5025],"content":"<bpt id=\"p1\">[</bpt>REFLECTED_NOTIFY_ID_HANDLER<ept id=\"p1\">](#reflected_notify_id_handler)</ept>","source":"[REFLECTED_NOTIFY_ID_HANDLER](#reflected_notify_id_handler)"},{"pos":[5026,5120],"content":"Maps a reflected <bpt id=\"p1\">**</bpt>WM_NOTIFY<ept id=\"p1\">**</ept> message to a handler function, based on the control identifier.","source":"Maps a reflected **WM_NOTIFY** message to a handler function, based on the control identifier."},{"pos":[5125,5200],"content":"<bpt id=\"p1\">[</bpt>REFLECTED_NOTIFY_RANGE_CODE_HANDLER<ept id=\"p1\">](#reflected_notify_range_code_handler)</ept>","source":"[REFLECTED_NOTIFY_RANGE_CODE_HANDLER](#reflected_notify_range_code_handler)"},{"pos":[5201,5340],"content":"Maps a reflected <bpt id=\"p1\">**</bpt>WM_NOTIFY<ept id=\"p1\">**</ept> message to a handler function, based on the notification code and a contiguous range of control identifiers.","source":"Maps a reflected **WM_NOTIFY** message to a handler function, based on the notification code and a contiguous range of control identifiers."},{"pos":[5345,5410],"content":"<bpt id=\"p1\">[</bpt>REFLECTED_NOTIFY_RANGE_HANDLER<ept id=\"p1\">](#reflected_notify_range_handler)</ept>","source":"[REFLECTED_NOTIFY_RANGE_HANDLER](#reflected_notify_range_handler)"},{"pos":[5411,5524],"content":"Maps a reflected <bpt id=\"p1\">**</bpt>WM_NOTIFY<ept id=\"p1\">**</ept> message to a handler function, based on a contiguous range of control identifiers.","source":"Maps a reflected **WM_NOTIFY** message to a handler function, based on a contiguous range of control identifiers."},{"pos":[5535,5574],"content":"<bpt id=\"p1\">&lt;a name=\"alt_msg_map\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ALT_MSG_MAP","linkify":"<a name=\"alt_msg_map\"></a>  ALT_MSG_MAP","source":"<a name=\"alt_msg_map\"></a>  ALT_MSG_MAP"},{"content":"Marks the beginning of an alternate message map.","pos":[5578,5626]},{"pos":[5671,5681],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The message map identifier.","pos":[5699,5731]},{"pos":[5741,5748],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"ATL identifies each message map by a number.","pos":[5752,5796]},{"content":"The default message map (declared with the <ph id=\"ph1\">`BEGIN_MSG_MAP`</ph> macro) is identified by 0.","pos":[5797,5882],"source":" The default message map (declared with the `BEGIN_MSG_MAP` macro) is identified by 0."},{"content":"An alternate message map is identified by <ph id=\"ph1\">`msgMapID`</ph>.","pos":[5883,5936],"source":" An alternate message map is identified by `msgMapID`."},{"content":"Message maps are used to process messages sent to a window.","pos":[5943,6002]},{"content":"For example, <bpt id=\"p1\">[</bpt>CContainedWindow<ept id=\"p1\">](../../atl/reference/ccontainedwindowt-class.md)</ept> allows you to specify the identifier of a message map in the containing object.","pos":[6003,6162],"source":" For example, [CContainedWindow](../../atl/reference/ccontainedwindowt-class.md) allows you to specify the identifier of a message map in the containing object."},{"content":"<bpt id=\"p1\">[</bpt>CContainedWindow::WindowProc<ept id=\"p1\">](ccontainedwindowt-class.md#ccontainedwindowt__windowproc)</ept> then uses this message map to direct the contained window's messages either to the appropriate handler function or to another message map.","pos":[6163,6390],"source":"[CContainedWindow::WindowProc](ccontainedwindowt-class.md#ccontainedwindowt__windowproc) then uses this message map to direct the contained window's messages either to the appropriate handler function or to another message map."},{"content":"For a list of macros that declare handler functions, see <bpt id=\"p1\">[</bpt>BEGIN_MSG_MAP<ept id=\"p1\">](#begin_msg_map)</ept>.","pos":[6391,6480],"source":" For a list of macros that declare handler functions, see [BEGIN_MSG_MAP](#begin_msg_map)."},{"content":"Always begin a message map with <ph id=\"ph1\">`BEGIN_MSG_MAP`</ph>.","pos":[6487,6535],"source":"Always begin a message map with `BEGIN_MSG_MAP`."},{"content":"You can then declare subsequent alternate message maps.","pos":[6536,6591]},{"content":"The <bpt id=\"p1\">[</bpt>END_MSG_MAP<ept id=\"p1\">](#end_msg_map)</ept> macro marks the end of the message map.","pos":[6598,6669],"source":"The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map."},{"content":"Note that there is always exactly one instance of <ph id=\"ph1\">`BEGIN_MSG_MAP`</ph> and <ph id=\"ph2\">`END_MSG_MAP`</ph>.","pos":[6670,6754],"source":" Note that there is always exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`."},{"pos":[6761,6865],"content":"For more information about using message maps in ATL, see <bpt id=\"p1\">[</bpt>Message Maps<ept id=\"p1\">](../../atl/message-maps-atl.md)</ept>.","source":"For more information about using message maps in ATL, see [Message Maps](../../atl/message-maps-atl.md)."},{"pos":[6875,6882],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows the default message map and one alternate message map, each containing one handler function:","pos":[6886,7006]},{"pos":[7013,7100],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#98<ept id=\"p2\">](../../atl/codesnippet/cpp/message-map-macros-atl_1.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#98](../../atl/codesnippet/cpp/message-map-macros-atl_1.h)]"},{"content":"The next example shows two alternate message maps.","pos":[7107,7157]},{"content":"The default message map is empty.","pos":[7158,7191]},{"pos":[7198,7285],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#99<ept id=\"p2\">](../../atl/codesnippet/cpp/message-map-macros-atl_2.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#99](../../atl/codesnippet/cpp/message-map-macros-atl_2.h)]"},{"pos":[7295,7338],"content":"<bpt id=\"p1\">&lt;a name=\"begin_msg_map\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  BEGIN_MSG_MAP","linkify":"<a name=\"begin_msg_map\"></a>  BEGIN_MSG_MAP","source":"<a name=\"begin_msg_map\"></a>  BEGIN_MSG_MAP"},{"content":"Marks the beginning of the default message map.","pos":[7342,7389]},{"pos":[7436,7446],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The name of the class containing the message map.","pos":[7464,7518]},{"pos":[7528,7535],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<bpt id=\"p1\">[</bpt>CWindowImpl::WindowProc<ept id=\"p1\">](cwindowimpl-class.md#cwindowimpl__windowproc)</ept> uses the default message map to process messages sent to the window.","pos":[7539,7679],"source":"[CWindowImpl::WindowProc](cwindowimpl-class.md#cwindowimpl__windowproc) uses the default message map to process messages sent to the window."},{"content":"The message map directs messages either to the appropriate handler function or to another message map.","pos":[7680,7782]},{"content":"The following macros map a message to a handler function.","pos":[7790,7847]},{"content":"This function must be defined in <ph id=\"ph1\">`theClass`</ph>.","pos":[7848,7892],"source":" This function must be defined in `theClass`."},{"content":"Macro","pos":[7899,7904]},{"content":"Description","pos":[7905,7916]},{"pos":[7955,7990],"content":"<bpt id=\"p1\">[</bpt>MESSAGE_HANDLER<ept id=\"p1\">](#message_handler)</ept>","source":"[MESSAGE_HANDLER](#message_handler)"},{"content":"Maps a Windows message to a handler function.","pos":[7991,8036]},{"pos":[8041,8088],"content":"<bpt id=\"p1\">[</bpt>MESSAGE_RANGE_HANDLER<ept id=\"p1\">](#message_range_handler)</ept>","source":"[MESSAGE_RANGE_HANDLER](#message_range_handler)"},{"content":"Maps a contiguous range of Windows messages to a handler function.","pos":[8089,8155]},{"pos":[8160,8195],"content":"<bpt id=\"p1\">[</bpt>COMMAND_HANDLER<ept id=\"p1\">](#command_handler)</ept>","source":"[COMMAND_HANDLER](#command_handler)"},{"pos":[8196,8341],"content":"Maps a <bpt id=\"p1\">**</bpt>WM_COMMAND<ept id=\"p1\">**</ept> message to a handler function, based on the notification code and the identifier of the menu item, control, or accelerator.","source":"Maps a **WM_COMMAND** message to a handler function, based on the notification code and the identifier of the menu item, control, or accelerator."},{"pos":[8346,8387],"content":"<bpt id=\"p1\">[</bpt>COMMAND_ID_HANDLER<ept id=\"p1\">](#command_id_handler)</ept>","source":"[COMMAND_ID_HANDLER](#command_id_handler)"},{"pos":[8388,8507],"content":"Maps a <bpt id=\"p1\">**</bpt>WM_COMMAND<ept id=\"p1\">**</ept> message to a handler function, based on the identifier of the menu item, control, or accelerator.","source":"Maps a **WM_COMMAND** message to a handler function, based on the identifier of the menu item, control, or accelerator."},{"pos":[8512,8552],"content":"<bpt id=\"p1\">[</bpt>COMMAND_CODE_HANDLER<ept id=\"p1\">](#command_handler)</ept>","source":"[COMMAND_CODE_HANDLER](#command_handler)"},{"pos":[8553,8637],"content":"Maps a <bpt id=\"p1\">**</bpt>WM_COMMAND<ept id=\"p1\">**</ept> message to a handler function, based on the notification code.","source":"Maps a **WM_COMMAND** message to a handler function, based on the notification code."},{"pos":[8642,8689],"content":"<bpt id=\"p1\">[</bpt>COMMAND_RANGE_HANDLER<ept id=\"p1\">](#command_range_handler)</ept>","source":"[COMMAND_RANGE_HANDLER](#command_range_handler)"},{"pos":[8690,8830],"content":"Maps a contiguous range of <bpt id=\"p1\">**</bpt>WM_COMMAND<ept id=\"p1\">**</ept> messages to a handler function, based on the identifier of the menu item, control, or accelerator.","source":"Maps a contiguous range of **WM_COMMAND** messages to a handler function, based on the identifier of the menu item, control, or accelerator."},{"pos":[8835,8868],"content":"<bpt id=\"p1\">[</bpt>NOTIFY_HANDLER<ept id=\"p1\">](#notify_handler)</ept>","source":"[NOTIFY_HANDLER](#notify_handler)"},{"pos":[8869,8979],"content":"Maps a <bpt id=\"p1\">**</bpt>WM_NOTIFY<ept id=\"p1\">**</ept> message to a handler function, based on the notification code and the control identifier.","source":"Maps a **WM_NOTIFY** message to a handler function, based on the notification code and the control identifier."},{"pos":[8984,9023],"content":"<bpt id=\"p1\">[</bpt>NOTIFY_ID_HANDLER<ept id=\"p1\">](#notify_id_handler)</ept>","source":"[NOTIFY_ID_HANDLER](#notify_id_handler)"},{"pos":[9024,9108],"content":"Maps a <bpt id=\"p1\">**</bpt>WM_NOTIFY<ept id=\"p1\">**</ept> message to a handler function, based on the control identifier.","source":"Maps a **WM_NOTIFY** message to a handler function, based on the control identifier."},{"pos":[9113,9156],"content":"<bpt id=\"p1\">[</bpt>NOTIFY_CODE_HANDLER<ept id=\"p1\">](#notify_code_handler)</ept>","source":"[NOTIFY_CODE_HANDLER](#notify_code_handler)"},{"pos":[9157,9240],"content":"Maps a <bpt id=\"p1\">**</bpt>WM_NOTIFY<ept id=\"p1\">**</ept> message to a handler function, based on the notification code.","source":"Maps a **WM_NOTIFY** message to a handler function, based on the notification code."},{"pos":[9245,9290],"content":"<bpt id=\"p1\">[</bpt>NOTIFY_RANGE_HANDLER<ept id=\"p1\">](#notify_range_handler)</ept>","source":"[NOTIFY_RANGE_HANDLER](#notify_range_handler)"},{"pos":[9291,9396],"content":"Maps a contiguous range of <bpt id=\"p1\">**</bpt>WM_NOTIFY<ept id=\"p1\">**</ept> messages to a handler function, based on the control identifier.","source":"Maps a contiguous range of **WM_NOTIFY** messages to a handler function, based on the control identifier."},{"content":"The following macros direct messages to another message map.","pos":[9404,9464]},{"content":"This process is called \"chaining.\"","pos":[9465,9499]},{"content":"Macro","pos":[9506,9511]},{"content":"Description","pos":[9512,9523]},{"pos":[9562,9593],"content":"<bpt id=\"p1\">[</bpt>CHAIN_MSG_MAP<ept id=\"p1\">](#chain_msg_map)</ept>","source":"[CHAIN_MSG_MAP](#chain_msg_map)"},{"content":"Chains to the default message map in the base class.","pos":[9594,9646]},{"pos":[9651,9696],"content":"<bpt id=\"p1\">[</bpt>CHAIN_MSG_MAP_MEMBER<ept id=\"p1\">](#chain_msg_map_member)</ept>","source":"[CHAIN_MSG_MAP_MEMBER](#chain_msg_map_member)"},{"content":"Chains to the default message map in a data member of the class.","pos":[9697,9761]},{"pos":[9766,9805],"content":"<bpt id=\"p1\">[</bpt>CHAIN_MSG_MAP_ALT<ept id=\"p1\">](#chain_msg_map_alt)</ept>","source":"[CHAIN_MSG_MAP_ALT](#chain_msg_map_alt)"},{"content":"Chains to an alternate message map in the base class.","pos":[9806,9859]},{"pos":[9864,9917],"content":"<bpt id=\"p1\">[</bpt>CHAIN_MSG_MAP_ALT_MEMBER<ept id=\"p1\">](#chain_msg_map_alt_member)</ept>","source":"[CHAIN_MSG_MAP_ALT_MEMBER](#chain_msg_map_alt_member)"},{"content":"Chains to an alternate message map in a data member of the class.","pos":[9918,9983]},{"pos":[9988,10035],"content":"<bpt id=\"p1\">[</bpt>CHAIN_MSG_MAP_DYNAMIC<ept id=\"p1\">](#chain_msg_map_dynamic)</ept>","source":"[CHAIN_MSG_MAP_DYNAMIC](#chain_msg_map_dynamic)"},{"content":"Chains to the default message map in another class at run time.","pos":[10036,10099]},{"content":"The following macros direct \"reflected\" messages from the parent window.","pos":[10107,10179]},{"content":"For example, a control normally sends notification messages to its parent window for processing, but the parent window can reflect the message back to the control.","pos":[10180,10343]},{"content":"Macro","pos":[10350,10355]},{"content":"Description","pos":[10356,10367]},{"pos":[10406,10461],"content":"<bpt id=\"p1\">[</bpt>REFLECTED_COMMAND_HANDLER<ept id=\"p1\">](#reflected_command_handler)</ept>","source":"[REFLECTED_COMMAND_HANDLER](#reflected_command_handler)"},{"pos":[10462,10617],"content":"Maps a reflected <bpt id=\"p1\">**</bpt>WM_COMMAND<ept id=\"p1\">**</ept> message to a handler function, based on the notification code and the identifier of the menu item, control, or accelerator.","source":"Maps a reflected **WM_COMMAND** message to a handler function, based on the notification code and the identifier of the menu item, control, or accelerator."},{"pos":[10622,10683],"content":"<bpt id=\"p1\">[</bpt>REFLECTED_COMMAND_ID_HANDLER<ept id=\"p1\">](#reflected_command_id_handler)</ept>","source":"[REFLECTED_COMMAND_ID_HANDLER](#reflected_command_id_handler)"},{"pos":[10684,10813],"content":"Maps a reflected <bpt id=\"p1\">**</bpt>WM_COMMAND<ept id=\"p1\">**</ept> message to a handler function, based on the identifier of the menu item, control, or accelerator.","source":"Maps a reflected **WM_COMMAND** message to a handler function, based on the identifier of the menu item, control, or accelerator."},{"pos":[10818,10883],"content":"<bpt id=\"p1\">[</bpt>REFLECTED_COMMAND_CODE_HANDLER<ept id=\"p1\">](#reflected_command_code_handler)</ept>","source":"[REFLECTED_COMMAND_CODE_HANDLER](#reflected_command_code_handler)"},{"pos":[10884,10978],"content":"Maps a reflected <bpt id=\"p1\">**</bpt>WM_COMMAND<ept id=\"p1\">**</ept> message to a handler function, based on the notification code.","source":"Maps a reflected **WM_COMMAND** message to a handler function, based on the notification code."},{"pos":[10983,11050],"content":"<bpt id=\"p1\">[</bpt>REFLECTED_COMMAND_RANGE_HANDLER<ept id=\"p1\">](#reflected_command_range_handler)</ept>","source":"[REFLECTED_COMMAND_RANGE_HANDLER](#reflected_command_range_handler)"},{"pos":[11051,11165],"content":"Maps a reflected <bpt id=\"p1\">**</bpt>WM_COMMAND<ept id=\"p1\">**</ept> message to a handler function, based on a contiguous range of control identifiers.","source":"Maps a reflected **WM_COMMAND** message to a handler function, based on a contiguous range of control identifiers."},{"pos":[11170,11247],"content":"<bpt id=\"p1\">[</bpt>REFLECTED_COMMAND_RANGE_CODE_HANDLER<ept id=\"p1\">](#reflected_command_range_code_handler)</ept>","source":"[REFLECTED_COMMAND_RANGE_CODE_HANDLER](#reflected_command_range_code_handler)"},{"pos":[11248,11388],"content":"Maps a reflected <bpt id=\"p1\">**</bpt>WM_COMMAND<ept id=\"p1\">**</ept> message to a handler function, based on the notification code and a contiguous range of control identifiers.","source":"Maps a reflected **WM_COMMAND** message to a handler function, based on the notification code and a contiguous range of control identifiers."},{"pos":[11393,11446],"content":"<bpt id=\"p1\">[</bpt>REFLECTED_NOTIFY_HANDLER<ept id=\"p1\">](#reflected_notify_handler)</ept>","source":"[REFLECTED_NOTIFY_HANDLER](#reflected_notify_handler)"},{"pos":[11447,11567],"content":"Maps a reflected <bpt id=\"p1\">**</bpt>WM_NOTIFY<ept id=\"p1\">**</ept> message to a handler function, based on the notification code and the control identifier.","source":"Maps a reflected **WM_NOTIFY** message to a handler function, based on the notification code and the control identifier."},{"pos":[11572,11631],"content":"<bpt id=\"p1\">[</bpt>REFLECTED_NOTIFY_ID_HANDLER<ept id=\"p1\">](#reflected_notify_id_handler)</ept>","source":"[REFLECTED_NOTIFY_ID_HANDLER](#reflected_notify_id_handler)"},{"pos":[11632,11726],"content":"Maps a reflected <bpt id=\"p1\">**</bpt>WM_NOTIFY<ept id=\"p1\">**</ept> message to a handler function, based on the control identifier.","source":"Maps a reflected **WM_NOTIFY** message to a handler function, based on the control identifier."},{"pos":[11731,11794],"content":"<bpt id=\"p1\">[</bpt>REFLECTED_NOTIFY_CODE_HANDLER<ept id=\"p1\">](#reflected_notify_code_handler)</ept>","source":"[REFLECTED_NOTIFY_CODE_HANDLER](#reflected_notify_code_handler)"},{"pos":[11795,11888],"content":"Maps a reflected <bpt id=\"p1\">**</bpt>WM_NOTIFY<ept id=\"p1\">**</ept> message to a handler function, based on the notification code.","source":"Maps a reflected **WM_NOTIFY** message to a handler function, based on the notification code."},{"pos":[11893,11958],"content":"<bpt id=\"p1\">[</bpt>REFLECTED_NOTIFY_RANGE_HANDLER<ept id=\"p1\">](#reflected_notify_range_handler)</ept>","source":"[REFLECTED_NOTIFY_RANGE_HANDLER](#reflected_notify_range_handler)"},{"pos":[11959,12072],"content":"Maps a reflected <bpt id=\"p1\">**</bpt>WM_NOTIFY<ept id=\"p1\">**</ept> message to a handler function, based on a contiguous range of control identifiers.","source":"Maps a reflected **WM_NOTIFY** message to a handler function, based on a contiguous range of control identifiers."},{"pos":[12077,12152],"content":"<bpt id=\"p1\">[</bpt>REFLECTED_NOTIFY_RANGE_CODE_HANDLER<ept id=\"p1\">](#reflected_notify_range_code_handler)</ept>","source":"[REFLECTED_NOTIFY_RANGE_CODE_HANDLER](#reflected_notify_range_code_handler)"},{"pos":[12153,12292],"content":"Maps a reflected <bpt id=\"p1\">**</bpt>WM_NOTIFY<ept id=\"p1\">**</ept> message to a handler function, based on the notification code and a contiguous range of control identifiers.","source":"Maps a reflected **WM_NOTIFY** message to a handler function, based on the notification code and a contiguous range of control identifiers."},{"pos":[12303,12310],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12314,12402],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#102<ept id=\"p2\">](../../atl/codesnippet/cpp/message-map-macros-atl_3.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#102](../../atl/codesnippet/cpp/message-map-macros-atl_3.h)]"},{"content":"When a <ph id=\"ph1\">`CMyExtWindow`</ph> object receives a <ph id=\"ph2\">`WM_PAINT`</ph> message, the message is directed to <ph id=\"ph3\">`CMyExtWindow::OnPaint`</ph> for the actual processing.","pos":[12409,12546],"source":"When a `CMyExtWindow` object receives a `WM_PAINT` message, the message is directed to `CMyExtWindow::OnPaint` for the actual processing."},{"content":"If <ph id=\"ph1\">`OnPaint`</ph> indicates the message requires further processing, the message will then be directed to the default message map in <ph id=\"ph2\">`CMyBaseWindow`</ph>.","pos":[12547,12691],"source":" If `OnPaint` indicates the message requires further processing, the message will then be directed to the default message map in `CMyBaseWindow`."},{"content":"In addition to the default message map, you can define an alternate message map with <bpt id=\"p1\">[</bpt>ALT_MSG_MAP<ept id=\"p1\">](#alt_msg_map)</ept>.","pos":[12698,12811],"source":"In addition to the default message map, you can define an alternate message map with [ALT_MSG_MAP](#alt_msg_map)."},{"content":"Always begin a message map with <ph id=\"ph1\">`BEGIN_MSG_MAP`</ph>.","pos":[12812,12860],"source":" Always begin a message map with `BEGIN_MSG_MAP`."},{"content":"You can then declare subsequent alternate message maps.","pos":[12861,12916]},{"content":"The following example shows the default message map and one alternate message map, each containing one handler function:","pos":[12917,13037]},{"pos":[13044,13131],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#98<ept id=\"p2\">](../../atl/codesnippet/cpp/message-map-macros-atl_1.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#98](../../atl/codesnippet/cpp/message-map-macros-atl_1.h)]"},{"content":"The next example shows two alternate message maps.","pos":[13138,13188]},{"content":"The default message map is empty.","pos":[13189,13222]},{"pos":[13229,13316],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#99<ept id=\"p2\">](../../atl/codesnippet/cpp/message-map-macros-atl_2.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#99](../../atl/codesnippet/cpp/message-map-macros-atl_2.h)]"},{"content":"The <bpt id=\"p1\">[</bpt>END_MSG_MAP<ept id=\"p1\">](#end_msg_map)</ept> macro marks the end of the message map.","pos":[13323,13394],"source":"The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map."},{"content":"Note that there is always exactly one instance of <ph id=\"ph1\">`BEGIN_MSG_MAP`</ph> and <ph id=\"ph2\">`END_MSG_MAP`</ph>.","pos":[13395,13479],"source":" Note that there is always exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`."},{"pos":[13486,13590],"content":"For more information about using message maps in ATL, see <bpt id=\"p1\">[</bpt>Message Maps<ept id=\"p1\">](../../atl/message-maps-atl.md)</ept>.","source":"For more information about using message maps in ATL, see [Message Maps](../../atl/message-maps-atl.md)."},{"pos":[13600,13651],"content":"<bpt id=\"p1\">&lt;a name=\"chain_msg_map_alt\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CHAIN_MSG_MAP_ALT","linkify":"<a name=\"chain_msg_map_alt\"></a>  CHAIN_MSG_MAP_ALT","source":"<a name=\"chain_msg_map_alt\"></a>  CHAIN_MSG_MAP_ALT"},{"content":"Defines an entry in a message map.","pos":[13655,13689]},{"pos":[13758,13768],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The name of the base class containing the message map.","pos":[13791,13850]},{"content":"[in] The message map identifier.","pos":[13871,13903]},{"pos":[13913,13920],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`CHAIN_MSG_MAP_ALT`</ph> directs messages to an alternate message map in a base class.","pos":[13924,14005],"source":"`CHAIN_MSG_MAP_ALT` directs messages to an alternate message map in a base class."},{"content":"You must have declared this alternate message map with <bpt id=\"p1\">[</bpt>ALT_MSG_MAP(msgMapID)<ept id=\"p1\">](#alt_msg_map)</ept>.","pos":[14006,14099],"source":" You must have declared this alternate message map with [ALT_MSG_MAP(msgMapID)](#alt_msg_map)."},{"content":"To direct messages to a base class's default message map (declared with <bpt id=\"p1\">[</bpt>BEGIN_MSG_MAP<ept id=\"p1\">](#begin_msg_map)</ept>), use <ph id=\"ph1\">`CHAIN_MSG_MAP`</ph>.","pos":[14100,14226],"source":" To direct messages to a base class's default message map (declared with [BEGIN_MSG_MAP](#begin_msg_map)), use `CHAIN_MSG_MAP`."},{"content":"For an example, see <bpt id=\"p1\">[</bpt>CHAIN_MSG_MAP<ept id=\"p1\">](#chain_msg_map)</ept>.","pos":[14227,14279],"source":" For an example, see [CHAIN_MSG_MAP](#chain_msg_map)."},{"pos":[14287,14580],"content":"[!NOTE]\n Always begin a message map with `BEGIN_MSG_MAP`. You can then declare subsequent alternate message maps with `ALT_MSG_MAP`. The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map. Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`.","leadings":["","> "],"nodes":[{"content":" Always begin a message map with `BEGIN_MSG_MAP`. You can then declare subsequent alternate message maps with `ALT_MSG_MAP`. The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map. Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`.","pos":[8,291],"nodes":[{"content":"Always begin a message map with <ph id=\"ph1\">`BEGIN_MSG_MAP`</ph>.","pos":[1,49],"source":" Always begin a message map with `BEGIN_MSG_MAP`."},{"content":"You can then declare subsequent alternate message maps with <ph id=\"ph1\">`ALT_MSG_MAP`</ph>.","pos":[50,124],"source":" You can then declare subsequent alternate message maps with `ALT_MSG_MAP`."},{"content":"The <bpt id=\"p1\">[</bpt>END_MSG_MAP<ept id=\"p1\">](#end_msg_map)</ept> macro marks the end of the message map.","pos":[125,196],"source":" The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map."},{"content":"Every message map must have exactly one instance of <ph id=\"ph1\">`BEGIN_MSG_MAP`</ph> and <ph id=\"ph2\">`END_MSG_MAP`</ph>.","pos":[197,283],"source":" Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`."}]}]},{"pos":[14587,14691],"content":"For more information about using message maps in ATL, see <bpt id=\"p1\">[</bpt>Message Maps<ept id=\"p1\">](../../atl/message-maps-atl.md)</ept>.","source":"For more information about using message maps in ATL, see [Message Maps](../../atl/message-maps-atl.md)."},{"pos":[14701,14766],"content":"<bpt id=\"p1\">&lt;a name=\"chain_msg_map_alt_member\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CHAIN_MSG_MAP_ALT_MEMBER","linkify":"<a name=\"chain_msg_map_alt_member\"></a>  CHAIN_MSG_MAP_ALT_MEMBER","source":"<a name=\"chain_msg_map_alt_member\"></a>  CHAIN_MSG_MAP_ALT_MEMBER"},{"content":"Defines an entry in a message map.","pos":[14770,14804]},{"pos":[14881,14891],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The name of the data member containing the message map.","pos":[14915,14975]},{"content":"[in] The message map identifier.","pos":[14996,15028]},{"pos":[15038,15045],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`CHAIN_MSG_MAP_ALT_MEMBER`</ph> directs messages to an alternate message map in a data member.","pos":[15049,15138],"source":"`CHAIN_MSG_MAP_ALT_MEMBER` directs messages to an alternate message map in a data member."},{"content":"You must have declared this alternate message map with <bpt id=\"p1\">[</bpt>ALT_MSG_MAP(msgMapID)<ept id=\"p1\">](#alt_msg_map)</ept>.","pos":[15139,15232],"source":" You must have declared this alternate message map with [ALT_MSG_MAP(msgMapID)](#alt_msg_map)."},{"content":"To direct messages to a data member's default message map (declared with <bpt id=\"p1\">[</bpt>BEGIN_MSG_MAP<ept id=\"p1\">](#begin_msg_map)</ept>), use <ph id=\"ph1\">`CHAIN_MSG_MAP_MEMBER`</ph>.","pos":[15233,15367],"source":" To direct messages to a data member's default message map (declared with [BEGIN_MSG_MAP](#begin_msg_map)), use `CHAIN_MSG_MAP_MEMBER`."},{"content":"For an example, see <bpt id=\"p1\">[</bpt>CHAIN_MSG_MAP_MEMBER<ept id=\"p1\">](#chain_msg_map_member)</ept>.","pos":[15368,15434],"source":" For an example, see [CHAIN_MSG_MAP_MEMBER](#chain_msg_map_member)."},{"pos":[15442,15735],"content":"[!NOTE]\n Always begin a message map with `BEGIN_MSG_MAP`. You can then declare subsequent alternate message maps with `ALT_MSG_MAP`. The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map. Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`.","leadings":["","> "],"nodes":[{"content":" Always begin a message map with `BEGIN_MSG_MAP`. You can then declare subsequent alternate message maps with `ALT_MSG_MAP`. The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map. Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`.","pos":[8,291],"nodes":[{"content":"Always begin a message map with <ph id=\"ph1\">`BEGIN_MSG_MAP`</ph>.","pos":[1,49],"source":" Always begin a message map with `BEGIN_MSG_MAP`."},{"content":"You can then declare subsequent alternate message maps with <ph id=\"ph1\">`ALT_MSG_MAP`</ph>.","pos":[50,124],"source":" You can then declare subsequent alternate message maps with `ALT_MSG_MAP`."},{"content":"The <bpt id=\"p1\">[</bpt>END_MSG_MAP<ept id=\"p1\">](#end_msg_map)</ept> macro marks the end of the message map.","pos":[125,196],"source":" The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map."},{"content":"Every message map must have exactly one instance of <ph id=\"ph1\">`BEGIN_MSG_MAP`</ph> and <ph id=\"ph2\">`END_MSG_MAP`</ph>.","pos":[197,283],"source":" Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`."}]}]},{"pos":[15742,15846],"content":"For more information about using message maps in ATL, see <bpt id=\"p1\">[</bpt>Message Maps<ept id=\"p1\">](../../atl/message-maps-atl.md)</ept>.","source":"For more information about using message maps in ATL, see [Message Maps](../../atl/message-maps-atl.md)."},{"pos":[15856,15899],"content":"<bpt id=\"p1\">&lt;a name=\"chain_msg_map\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CHAIN_MSG_MAP","linkify":"<a name=\"chain_msg_map\"></a>  CHAIN_MSG_MAP","source":"<a name=\"chain_msg_map\"></a>  CHAIN_MSG_MAP"},{"content":"Defines an entry in a message map.","pos":[15903,15937]},{"pos":[15989,15999],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The name of the base class containing the message map.","pos":[16022,16081]},{"pos":[16091,16098],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`CHAIN_MSG_MAP`</ph> directs messages to a base class's default message map (declared with <bpt id=\"p1\">[</bpt>BEGIN_MSG_MAP<ept id=\"p1\">](#begin_msg_map)</ept>).","pos":[16102,16221],"source":"`CHAIN_MSG_MAP` directs messages to a base class's default message map (declared with [BEGIN_MSG_MAP](#begin_msg_map))."},{"content":"To direct messages to a base class's alternate message map (declared with <bpt id=\"p1\">[</bpt>ALT_MSG_MAP<ept id=\"p1\">](#alt_msg_map)</ept>), use <bpt id=\"p2\">[</bpt>CHAIN_MSG_MAP_ALT<ept id=\"p2\">](#chain_msg_map_alt)</ept>.","pos":[16222,16370],"source":" To direct messages to a base class's alternate message map (declared with [ALT_MSG_MAP](#alt_msg_map)), use [CHAIN_MSG_MAP_ALT](#chain_msg_map_alt)."},{"pos":[16378,16671],"content":"[!NOTE]\n Always begin a message map with `BEGIN_MSG_MAP`. You can then declare subsequent alternate message maps with `ALT_MSG_MAP`. The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map. Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`.","leadings":["","> "],"nodes":[{"content":" Always begin a message map with `BEGIN_MSG_MAP`. You can then declare subsequent alternate message maps with `ALT_MSG_MAP`. The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map. Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`.","pos":[8,291],"nodes":[{"content":"Always begin a message map with <ph id=\"ph1\">`BEGIN_MSG_MAP`</ph>.","pos":[1,49],"source":" Always begin a message map with `BEGIN_MSG_MAP`."},{"content":"You can then declare subsequent alternate message maps with <ph id=\"ph1\">`ALT_MSG_MAP`</ph>.","pos":[50,124],"source":" You can then declare subsequent alternate message maps with `ALT_MSG_MAP`."},{"content":"The <bpt id=\"p1\">[</bpt>END_MSG_MAP<ept id=\"p1\">](#end_msg_map)</ept> macro marks the end of the message map.","pos":[125,196],"source":" The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map."},{"content":"Every message map must have exactly one instance of <ph id=\"ph1\">`BEGIN_MSG_MAP`</ph> and <ph id=\"ph2\">`END_MSG_MAP`</ph>.","pos":[197,283],"source":" Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`."}]}]},{"pos":[16678,16782],"content":"For more information about using message maps in ATL, see <bpt id=\"p1\">[</bpt>Message Maps<ept id=\"p1\">](../../atl/message-maps-atl.md)</ept>.","source":"For more information about using message maps in ATL, see [Message Maps](../../atl/message-maps-atl.md)."},{"pos":[16792,16799],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[16803,16891],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#107<ept id=\"p2\">](../../atl/codesnippet/cpp/message-map-macros-atl_4.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#107](../../atl/codesnippet/cpp/message-map-macros-atl_4.h)]"},{"content":"This example illustrates the following:","pos":[16898,16937]},{"pos":[16947,17131],"content":"If a window procedure is using <ph id=\"ph1\">`CMyClass`</ph>'s default message map and <ph id=\"ph2\">`OnPaint`</ph> does not handle a message, the message is directed to <ph id=\"ph3\">`CMyBaseClass`</ph>'s default message map for processing.","source":"If a window procedure is using `CMyClass`'s default message map and `OnPaint` does not handle a message, the message is directed to `CMyBaseClass`'s default message map for processing."},{"pos":[17141,17285],"content":"If a window procedure is using the first alternate message map in <ph id=\"ph1\">`CMyClass`</ph>, all messages are directed to <ph id=\"ph2\">`CMyBaseClass`</ph>'s default message map.","source":"If a window procedure is using the first alternate message map in `CMyClass`, all messages are directed to `CMyBaseClass`'s default message map."},{"content":"If a window procedure is using <ph id=\"ph1\">`CMyClass`</ph>'s second alternate message map and <ph id=\"ph2\">`OnChar`</ph> does not handle a message, the message is directed to the specified alternate message map in <ph id=\"ph3\">`CMyBaseClass`</ph>.","pos":[17295,17489],"source":"If a window procedure is using `CMyClass`'s second alternate message map and `OnChar` does not handle a message, the message is directed to the specified alternate message map in `CMyBaseClass`."},{"content":"<ph id=\"ph1\">`CMyBaseClass`</ph> must have declared this message map with <ph id=\"ph2\">`ALT_MSG_MAP(1)`</ph>.","pos":[17490,17563],"source":"`CMyBaseClass` must have declared this message map with `ALT_MSG_MAP(1)`."},{"pos":[17573,17632],"content":"<bpt id=\"p1\">&lt;a name=\"chain_msg_map_dynamic\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CHAIN_MSG_MAP_DYNAMIC","linkify":"<a name=\"chain_msg_map_dynamic\"></a>  CHAIN_MSG_MAP_DYNAMIC","source":"<a name=\"chain_msg_map_dynamic\"></a>  CHAIN_MSG_MAP_DYNAMIC"},{"content":"Defines an entry in a message map.","pos":[17636,17670]},{"pos":[17728,17738],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>dynaChainID<ept id=\"p1\">*</ept>","pos":[17742,17755],"source":"*dynaChainID*"},{"content":"[in] The unique identifier for an object's message map.","pos":[17759,17814]},{"pos":[17824,17831],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`CHAIN_MSG_MAP_DYNAMIC`</ph> directs messages, at run time, to the default message map in another object.","pos":[17835,17935],"source":"`CHAIN_MSG_MAP_DYNAMIC` directs messages, at run time, to the default message map in another object."},{"content":"The object and its message map are associated with <bpt id=\"p1\">*</bpt>dynaChainID<ept id=\"p1\">*</ept>, which you define through <bpt id=\"p2\">[</bpt>CDynamicChain::SetChainEntry<ept id=\"p2\">](cdynamicchain-class.md#cdynamicchain__setchainentry)</ept>.","pos":[17936,18111],"source":" The object and its message map are associated with *dynaChainID*, which you define through [CDynamicChain::SetChainEntry](cdynamicchain-class.md#cdynamicchain__setchainentry)."},{"content":"You must derive your class from <ph id=\"ph1\">`CDynamicChain`</ph> in order to use <ph id=\"ph2\">`CHAIN_MSG_MAP_DYNAMIC`</ph>.","pos":[18112,18200],"source":" You must derive your class from `CDynamicChain` in order to use `CHAIN_MSG_MAP_DYNAMIC`."},{"content":"For an example, see the <bpt id=\"p1\">[</bpt>CDynamicChain<ept id=\"p1\">](../../atl/reference/cdynamicchain-class.md)</ept> overview.","pos":[18201,18294],"source":" For an example, see the [CDynamicChain](../../atl/reference/cdynamicchain-class.md) overview."},{"pos":[18303,18612],"content":"[!NOTE]\n Always begin a message map with [BEGIN_MSG_MAP](#begin_msg_map). You can then declare subsequent alternate message maps with `ALT_MSG_MAP`. The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map. Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`.","leadings":["","> "],"nodes":[{"content":" Always begin a message map with [BEGIN_MSG_MAP](#begin_msg_map). You can then declare subsequent alternate message maps with `ALT_MSG_MAP`. The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map. Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`.","pos":[8,307],"nodes":[{"content":"Always begin a message map with <bpt id=\"p1\">[</bpt>BEGIN_MSG_MAP<ept id=\"p1\">](#begin_msg_map)</ept>.","pos":[1,65],"source":" Always begin a message map with [BEGIN_MSG_MAP](#begin_msg_map)."},{"content":"You can then declare subsequent alternate message maps with <ph id=\"ph1\">`ALT_MSG_MAP`</ph>.","pos":[66,140],"source":" You can then declare subsequent alternate message maps with `ALT_MSG_MAP`."},{"content":"The <bpt id=\"p1\">[</bpt>END_MSG_MAP<ept id=\"p1\">](#end_msg_map)</ept> macro marks the end of the message map.","pos":[141,212],"source":" The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map."},{"content":"Every message map must have exactly one instance of <ph id=\"ph1\">`BEGIN_MSG_MAP`</ph> and <ph id=\"ph2\">`END_MSG_MAP`</ph>.","pos":[213,299],"source":" Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`."}]}]},{"pos":[18619,18723],"content":"For more information about using message maps in ATL, see <bpt id=\"p1\">[</bpt>Message Maps<ept id=\"p1\">](../../atl/message-maps-atl.md)</ept>.","source":"For more information about using message maps in ATL, see [Message Maps](../../atl/message-maps-atl.md)."},{"pos":[18733,18790],"content":"<bpt id=\"p1\">&lt;a name=\"chain_msg_map_member\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CHAIN_MSG_MAP_MEMBER","linkify":"<a name=\"chain_msg_map_member\"></a>  CHAIN_MSG_MAP_MEMBER","source":"<a name=\"chain_msg_map_member\"></a>  CHAIN_MSG_MAP_MEMBER"},{"content":"Defines an entry in a message map.","pos":[18794,18828]},{"pos":[18888,18898],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The name of the data member containing the message map.","pos":[18922,18982]},{"pos":[18992,18999],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`CHAIN_MSG_MAP_MEMBER`</ph> directs messages to a data member's default message map (declared with <bpt id=\"p1\">[</bpt>BEGIN_MSG_MAP<ept id=\"p1\">](#begin_msg_map)</ept>).","pos":[19003,19130],"source":"`CHAIN_MSG_MAP_MEMBER` directs messages to a data member's default message map (declared with [BEGIN_MSG_MAP](#begin_msg_map))."},{"content":"To direct messages to a data member's alternate message map (declared with <bpt id=\"p1\">[</bpt>ALT_MSG_MAP<ept id=\"p1\">](#alt_msg_map)</ept>), use <bpt id=\"p2\">[</bpt>CHAIN_MSG_MAP_ALT_MEMBER<ept id=\"p2\">](#chain_msg_map_alt_member)</ept>.","pos":[19131,19294],"source":" To direct messages to a data member's alternate message map (declared with [ALT_MSG_MAP](#alt_msg_map)), use [CHAIN_MSG_MAP_ALT_MEMBER](#chain_msg_map_alt_member)."},{"pos":[19302,19595],"content":"[!NOTE]\n Always begin a message map with `BEGIN_MSG_MAP`. You can then declare subsequent alternate message maps with `ALT_MSG_MAP`. The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map. Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`.","leadings":["","> "],"nodes":[{"content":" Always begin a message map with `BEGIN_MSG_MAP`. You can then declare subsequent alternate message maps with `ALT_MSG_MAP`. The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map. Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`.","pos":[8,291],"nodes":[{"content":"Always begin a message map with <ph id=\"ph1\">`BEGIN_MSG_MAP`</ph>.","pos":[1,49],"source":" Always begin a message map with `BEGIN_MSG_MAP`."},{"content":"You can then declare subsequent alternate message maps with <ph id=\"ph1\">`ALT_MSG_MAP`</ph>.","pos":[50,124],"source":" You can then declare subsequent alternate message maps with `ALT_MSG_MAP`."},{"content":"The <bpt id=\"p1\">[</bpt>END_MSG_MAP<ept id=\"p1\">](#end_msg_map)</ept> macro marks the end of the message map.","pos":[125,196],"source":" The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map."},{"content":"Every message map must have exactly one instance of <ph id=\"ph1\">`BEGIN_MSG_MAP`</ph> and <ph id=\"ph2\">`END_MSG_MAP`</ph>.","pos":[197,283],"source":" Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`."}]}]},{"pos":[19602,19706],"content":"For more information about using message maps in ATL, see <bpt id=\"p1\">[</bpt>Message Maps<ept id=\"p1\">](../../atl/message-maps-atl.md)</ept>.","source":"For more information about using message maps in ATL, see [Message Maps](../../atl/message-maps-atl.md)."},{"pos":[19716,19723],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[19727,19815],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#108<ept id=\"p2\">](../../atl/codesnippet/cpp/message-map-macros-atl_5.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#108](../../atl/codesnippet/cpp/message-map-macros-atl_5.h)]"},{"content":"This example illustrates the following:","pos":[19822,19861]},{"pos":[19871,20048],"content":"If a window procedure is using <ph id=\"ph1\">`CMyClass`</ph>'s default message map and <ph id=\"ph2\">`OnPaint`</ph> does not handle a message, the message is directed to <ph id=\"ph3\">`m_obj`</ph>'s default message map for processing.","source":"If a window procedure is using `CMyClass`'s default message map and `OnPaint` does not handle a message, the message is directed to `m_obj`'s default message map for processing."},{"pos":[20058,20195],"content":"If a window procedure is using the first alternate message map in <ph id=\"ph1\">`CMyClass`</ph>, all messages are directed to <ph id=\"ph2\">`m_obj`</ph>'s default message map.","source":"If a window procedure is using the first alternate message map in `CMyClass`, all messages are directed to `m_obj`'s default message map."},{"content":"If a window procedure is using <ph id=\"ph1\">`CMyClass`</ph>'s second alternate message map and <ph id=\"ph2\">`OnChar`</ph> does not handle a message, the message is directed to the specified alternate message map of <ph id=\"ph3\">`m_obj`</ph>.","pos":[20205,20392],"source":"If a window procedure is using `CMyClass`'s second alternate message map and `OnChar` does not handle a message, the message is directed to the specified alternate message map of `m_obj`."},{"content":"Class <ph id=\"ph1\">`CMyContainedClass`</ph> must have declared this message map with <ph id=\"ph2\">`ALT_MSG_MAP(1)`</ph>.","pos":[20393,20477],"source":" Class `CMyContainedClass` must have declared this message map with `ALT_MSG_MAP(1)`."},{"pos":[20487,20544],"content":"<bpt id=\"p1\">&lt;a name=\"command_code_handler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COMMAND_CODE_HANDLER","linkify":"<a name=\"command_code_handler\"></a>  COMMAND_CODE_HANDLER","source":"<a name=\"command_code_handler\"></a>  COMMAND_CODE_HANDLER"},{"pos":[20548,20724],"content":"Similar to <bpt id=\"p1\">[</bpt>COMMAND_HANDLER<ept id=\"p1\">](#command_handler)</ept>, but maps a <bpt id=\"p2\">[</bpt>WM_COMMAND<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms647591)</ept> message based only on the notification code.","source":"Similar to [COMMAND_HANDLER](#command_handler), but maps a [WM_COMMAND](http://msdn.microsoft.com/library/windows/desktop/ms647591) message based only on the notification code."},{"pos":[20783,20793],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The notification code.","pos":[20807,20834]},{"content":"[in] The name of the message-handler function.","pos":[20851,20897]},{"pos":[20907,20954],"content":"<bpt id=\"p1\">&lt;a name=\"command_handler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COMMAND_HANDLER","linkify":"<a name=\"command_handler\"></a>  COMMAND_HANDLER","source":"<a name=\"command_handler\"></a>  COMMAND_HANDLER"},{"content":"Defines an entry in a message map.","pos":[20958,20992]},{"pos":[21054,21064],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The identifier of the menu item, control, or accelerator.","pos":[21076,21138]},{"content":"[in] The notification code.","pos":[21155,21182]},{"content":"[in] The name of the message-handler function.","pos":[21199,21245]},{"pos":[21255,21262],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`COMMAND_HANDLER`</ph> maps a <bpt id=\"p1\">[</bpt>WM_COMMAND<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms647591)</ept> message to the specified handler function, based on the notification code and the control identifier.","pos":[21266,21465],"source":"`COMMAND_HANDLER` maps a [WM_COMMAND](http://msdn.microsoft.com/library/windows/desktop/ms647591) message to the specified handler function, based on the notification code and the control identifier."},{"content":"For example:","pos":[21466,21478]},{"pos":[21485,21573],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#119<ept id=\"p2\">](../../atl/codesnippet/cpp/message-map-macros-atl_6.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#119](../../atl/codesnippet/cpp/message-map-macros-atl_6.h)]"},{"pos":[21580,21659],"content":"Any function specified in a <ph id=\"ph1\">`COMMAND_HANDLER`</ph> macro must be defined as follows:","source":"Any function specified in a `COMMAND_HANDLER` macro must be defined as follows:"},{"content":"The message map sets <ph id=\"ph1\">`bHandled`</ph> to <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> before <ph id=\"ph2\">`CommandHandler`</ph> is called.","pos":[21756,21834],"source":"The message map sets `bHandled` to **TRUE** before `CommandHandler` is called."},{"content":"If <ph id=\"ph1\">`CommandHandler`</ph> does not fully handle the message, it should set <ph id=\"ph2\">`bHandled`</ph> to <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept> to indicate the message needs further processing.","pos":[21835,21977],"source":" If `CommandHandler` does not fully handle the message, it should set `bHandled` to **FALSE** to indicate the message needs further processing."},{"pos":[21985,22308],"content":"[!NOTE]\n Always begin a message map with [BEGIN_MSG_MAP](#begin_msg_map). You can then declare subsequent alternate message maps with [ALT_MSG_MAP](#alt_msg_map). The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map. Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`.","leadings":["","> "],"nodes":[{"content":" Always begin a message map with [BEGIN_MSG_MAP](#begin_msg_map). You can then declare subsequent alternate message maps with [ALT_MSG_MAP](#alt_msg_map). The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map. Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`.","pos":[8,321],"nodes":[{"content":"Always begin a message map with <bpt id=\"p1\">[</bpt>BEGIN_MSG_MAP<ept id=\"p1\">](#begin_msg_map)</ept>.","pos":[1,65],"source":" Always begin a message map with [BEGIN_MSG_MAP](#begin_msg_map)."},{"content":"You can then declare subsequent alternate message maps with <bpt id=\"p1\">[</bpt>ALT_MSG_MAP<ept id=\"p1\">](#alt_msg_map)</ept>.","pos":[66,154],"source":" You can then declare subsequent alternate message maps with [ALT_MSG_MAP](#alt_msg_map)."},{"content":"The <bpt id=\"p1\">[</bpt>END_MSG_MAP<ept id=\"p1\">](#end_msg_map)</ept> macro marks the end of the message map.","pos":[155,226],"source":" The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map."},{"content":"Every message map must have exactly one instance of <ph id=\"ph1\">`BEGIN_MSG_MAP`</ph> and <ph id=\"ph2\">`END_MSG_MAP`</ph>.","pos":[227,313],"source":" Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`."}]}]},{"content":"In addition to <ph id=\"ph1\">`COMMAND_HANDLER`</ph>, you can use <bpt id=\"p1\">[</bpt>MESSAGE_HANDLER<ept id=\"p1\">](#message_handler)</ept> to map a <bpt id=\"p2\">**</bpt>WM_COMMAND<ept id=\"p2\">**</ept> message without regard to an identifier or code.","pos":[22315,22469],"source":"In addition to `COMMAND_HANDLER`, you can use [MESSAGE_HANDLER](#message_handler) to map a **WM_COMMAND** message without regard to an identifier or code."},{"content":"In this case, <ph id=\"ph1\">`MESSAGE_HANDLER(WM_COMMAND, OnHandlerFunction)`</ph> will direct all <bpt id=\"p1\">**</bpt>WM_COMMAND<ept id=\"p1\">**</ept> messages to <ph id=\"ph2\">`OnHandlerFunction`</ph>.","pos":[22470,22596],"source":" In this case, `MESSAGE_HANDLER(WM_COMMAND, OnHandlerFunction)` will direct all **WM_COMMAND** messages to `OnHandlerFunction`."},{"pos":[22603,22707],"content":"For more information about using message maps in ATL, see <bpt id=\"p1\">[</bpt>Message Maps<ept id=\"p1\">](../../atl/message-maps-atl.md)</ept>.","source":"For more information about using message maps in ATL, see [Message Maps](../../atl/message-maps-atl.md)."},{"pos":[22717,22770],"content":"<bpt id=\"p1\">&lt;a name=\"command_id_handler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COMMAND_ID_HANDLER","linkify":"<a name=\"command_id_handler\"></a>  COMMAND_ID_HANDLER","source":"<a name=\"command_id_handler\"></a>  COMMAND_ID_HANDLER"},{"pos":[22774,22985],"content":"Similar to <bpt id=\"p1\">[</bpt>COMMAND_HANDLER<ept id=\"p1\">](#command_handler)</ept>, but maps a <bpt id=\"p2\">[</bpt>WM_COMMAND<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms647591)</ept> message based only on the identifier of the menu item, control, or accelerator.","source":"Similar to [COMMAND_HANDLER](#command_handler), but maps a [WM_COMMAND](http://msdn.microsoft.com/library/windows/desktop/ms647591) message based only on the identifier of the menu item, control, or accelerator."},{"pos":[23040,23050],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The identifier of the menu item, control, or accelerator sending the message.","pos":[23062,23144]},{"content":"[in] The name of the message-handler function.","pos":[23161,23207]},{"pos":[23217,23286],"content":"<bpt id=\"p1\">&lt;a name=\"command_range_code_handler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COMMAND_RANGE_CODE_HANDLER","linkify":"<a name=\"command_range_code_handler\"></a>  COMMAND_RANGE_CODE_HANDLER","source":"<a name=\"command_range_code_handler\"></a>  COMMAND_RANGE_CODE_HANDLER"},{"pos":[23290,23529],"content":"Similar to <bpt id=\"p1\">[</bpt>COMMAND_RANGE_HANDLER<ept id=\"p1\">](#command_range_handler)</ept>, but maps <bpt id=\"p2\">[</bpt>WM_COMMAND<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms647591)</ept> messages with a specific notification code from a range of controls to a single handler function.","source":"Similar to [COMMAND_RANGE_HANDLER](#command_range_handler), but maps [WM_COMMAND](http://msdn.microsoft.com/library/windows/desktop/ms647591) messages with a specific notification code from a range of controls to a single handler function."},{"pos":[23615,23625],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] Marks the beginning of a contiguous range of control identifiers.","pos":[23642,23712]},{"content":"[in] Marks the end of a contiguous range of control identifiers.","pos":[23731,23795]},{"content":"[in] The notification code.","pos":[23812,23839]},{"content":"[in] The name of the message-handler function.","pos":[23856,23902]},{"pos":[23912,23919],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This range is based on the identifier of the menu item, control, or accelerator sending the message.","pos":[23923,24023]},{"pos":[24033,24092],"content":"<bpt id=\"p1\">&lt;a name=\"command_range_handler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COMMAND_RANGE_HANDLER","linkify":"<a name=\"command_range_handler\"></a>  COMMAND_RANGE_HANDLER","source":"<a name=\"command_range_handler\"></a>  COMMAND_RANGE_HANDLER"},{"pos":[24096,24289],"content":"Similar to <bpt id=\"p1\">[</bpt>COMMAND_HANDLER<ept id=\"p1\">](#command_handler)</ept>, but maps <bpt id=\"p2\">[</bpt>WM_COMMAND<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms647591)</ept> messages from a range of controls to a single handler function.","source":"Similar to [COMMAND_HANDLER](#command_handler), but maps [WM_COMMAND](http://msdn.microsoft.com/library/windows/desktop/ms647591) messages from a range of controls to a single handler function."},{"pos":[24364,24374],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] Marks the beginning of a contiguous range of control identifiers.","pos":[24391,24461]},{"content":"[in] Marks the end of a contiguous range of control identifiers.","pos":[24480,24544]},{"content":"[in] The name of the message-handler function.","pos":[24561,24607]},{"pos":[24617,24624],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This range is based on the identifier of the menu item, control, or accelerator sending the message.","pos":[24628,24728]},{"pos":[24738,24797],"content":"<bpt id=\"p1\">&lt;a name=\"declare_empty_msg_map\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  DECLARE_EMPTY_MSG_MAP","linkify":"<a name=\"declare_empty_msg_map\"></a>  DECLARE_EMPTY_MSG_MAP","source":"<a name=\"declare_empty_msg_map\"></a>  DECLARE_EMPTY_MSG_MAP"},{"content":"Declares an empty message map.","pos":[24801,24831]},{"pos":[24878,24885],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[24889,25053],"content":"<ph id=\"ph1\">`DECLARE_EMPTY_MSG_MAP`</ph> is a convenience macro that calls the macros <bpt id=\"p1\">[</bpt>BEGIN_MSG_MAP<ept id=\"p1\">](#begin_msg_map)</ept> and <bpt id=\"p2\">[</bpt>END_MSG_MAP<ept id=\"p2\">](#end_msg_map)</ept> to create an empty message map:","source":"`DECLARE_EMPTY_MSG_MAP` is a convenience macro that calls the macros [BEGIN_MSG_MAP](#begin_msg_map) and [END_MSG_MAP](#end_msg_map) to create an empty message map:"},{"pos":[25060,25148],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#122<ept id=\"p2\">](../../atl/codesnippet/cpp/message-map-macros-atl_7.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#122](../../atl/codesnippet/cpp/message-map-macros-atl_7.h)]"},{"pos":[25158,25227],"content":"<bpt id=\"p1\">&lt;a name=\"default_reflection_handler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  DEFAULT_REFLECTION_HANDLER","linkify":"<a name=\"default_reflection_handler\"></a>  DEFAULT_REFLECTION_HANDLER","source":"<a name=\"default_reflection_handler\"></a>  DEFAULT_REFLECTION_HANDLER"},{"pos":[25231,25396],"content":"Provides a default handler for the child window (control) that will receive reflected messages; the handler will properly pass unhandled messages to <ph id=\"ph1\">`DefWindowProc`</ph>.","source":"Provides a default handler for the child window (control) that will receive reflected messages; the handler will properly pass unhandled messages to `DefWindowProc`."},{"pos":[25448,25487],"content":"<bpt id=\"p1\">&lt;a name=\"end_msg_map\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  END_MSG_MAP","linkify":"<a name=\"end_msg_map\"></a>  END_MSG_MAP","source":"<a name=\"end_msg_map\"></a>  END_MSG_MAP"},{"content":"Marks the end of a message map.","pos":[25491,25522]},{"pos":[25559,25566],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Always use the <bpt id=\"p1\">[</bpt>BEGIN_MSG_MAP<ept id=\"p1\">](#begin_msg_map)</ept> macro to mark the beginning of a message map.","pos":[25570,25662],"source":"Always use the [BEGIN_MSG_MAP](#begin_msg_map) macro to mark the beginning of a message map."},{"content":"Use <bpt id=\"p1\">[</bpt>ALT_MSG_MAP<ept id=\"p1\">](#alt_msg_map)</ept> to declare subsequent alternate message maps.","pos":[25663,25740],"source":" Use [ALT_MSG_MAP](#alt_msg_map) to declare subsequent alternate message maps."},{"pos":[25747,25831],"content":"Note that there is always exactly one instance of <ph id=\"ph1\">`BEGIN_MSG_MAP`</ph> and <ph id=\"ph2\">`END_MSG_MAP`</ph>.","source":"Note that there is always exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`."},{"pos":[25838,25942],"content":"For more information about using message maps in ATL, see <bpt id=\"p1\">[</bpt>Message Maps<ept id=\"p1\">](../../atl/message-maps-atl.md)</ept>.","source":"For more information about using message maps in ATL, see [Message Maps](../../atl/message-maps-atl.md)."},{"pos":[25952,25959],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows the default message map and one alternate message map, each containing one handler function:","pos":[25963,26083]},{"pos":[26090,26177],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#98<ept id=\"p2\">](../../atl/codesnippet/cpp/message-map-macros-atl_1.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#98](../../atl/codesnippet/cpp/message-map-macros-atl_1.h)]"},{"content":"The next example shows two alternate message maps.","pos":[26184,26234]},{"content":"The default message map is empty.","pos":[26235,26268]},{"pos":[26275,26362],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#99<ept id=\"p2\">](../../atl/codesnippet/cpp/message-map-macros-atl_2.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#99](../../atl/codesnippet/cpp/message-map-macros-atl_2.h)]"},{"pos":[26372,26431],"content":"<bpt id=\"p1\">&lt;a name=\"forward_notifications\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  FORWARD_NOTIFICATIONS","linkify":"<a name=\"forward_notifications\"></a>  FORWARD_NOTIFICATIONS","source":"<a name=\"forward_notifications\"></a>  FORWARD_NOTIFICATIONS"},{"content":"Forwards notification messages to the parent window.","pos":[26435,26487]},{"pos":[26534,26541],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Specify this macro as part of your message map.","pos":[26545,26592]},{"pos":[26602,26649],"content":"<bpt id=\"p1\">&lt;a name=\"message_handler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  MESSAGE_HANDLER","linkify":"<a name=\"message_handler\"></a>  MESSAGE_HANDLER","source":"<a name=\"message_handler\"></a>  MESSAGE_HANDLER"},{"content":"Defines an entry in a message map.","pos":[26653,26687]},{"pos":[26751,26761],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The Windows message.","pos":[26774,26799]},{"content":"[in] The name of the message-handler function.","pos":[26816,26862]},{"pos":[26872,26879],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[26883,26958],"content":"<ph id=\"ph1\">`MESSAGE_HANDLER`</ph> maps a Windows message to the specified handler function.","source":"`MESSAGE_HANDLER` maps a Windows message to the specified handler function."},{"pos":[26965,27044],"content":"Any function specified in a <ph id=\"ph1\">`MESSAGE_HANDLER`</ph> macro must be defined as follows:","source":"Any function specified in a `MESSAGE_HANDLER` macro must be defined as follows:"},{"content":"The message map sets <ph id=\"ph1\">`bHandled`</ph> to <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> before <ph id=\"ph2\">`MessageHandler`</ph> is called.","pos":[27140,27218],"source":"The message map sets `bHandled` to **TRUE** before `MessageHandler` is called."},{"content":"If <ph id=\"ph1\">`MessageHandler`</ph> does not fully handle the message, it should set <ph id=\"ph2\">`bHandled`</ph> to <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept> to indicate the message needs further processing.","pos":[27219,27361],"source":" If `MessageHandler` does not fully handle the message, it should set `bHandled` to **FALSE** to indicate the message needs further processing."},{"pos":[27369,27692],"content":"[!NOTE]\n Always begin a message map with [BEGIN_MSG_MAP](#begin_msg_map). You can then declare subsequent alternate message maps with [ALT_MSG_MAP](#alt_msg_map). The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map. Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`.","leadings":["","> "],"nodes":[{"content":" Always begin a message map with [BEGIN_MSG_MAP](#begin_msg_map). You can then declare subsequent alternate message maps with [ALT_MSG_MAP](#alt_msg_map). The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map. Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`.","pos":[8,321],"nodes":[{"content":"Always begin a message map with <bpt id=\"p1\">[</bpt>BEGIN_MSG_MAP<ept id=\"p1\">](#begin_msg_map)</ept>.","pos":[1,65],"source":" Always begin a message map with [BEGIN_MSG_MAP](#begin_msg_map)."},{"content":"You can then declare subsequent alternate message maps with <bpt id=\"p1\">[</bpt>ALT_MSG_MAP<ept id=\"p1\">](#alt_msg_map)</ept>.","pos":[66,154],"source":" You can then declare subsequent alternate message maps with [ALT_MSG_MAP](#alt_msg_map)."},{"content":"The <bpt id=\"p1\">[</bpt>END_MSG_MAP<ept id=\"p1\">](#end_msg_map)</ept> macro marks the end of the message map.","pos":[155,226],"source":" The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map."},{"content":"Every message map must have exactly one instance of <ph id=\"ph1\">`BEGIN_MSG_MAP`</ph> and <ph id=\"ph2\">`END_MSG_MAP`</ph>.","pos":[227,313],"source":" Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`."}]}]},{"pos":[27699,27998],"content":"In addition to <ph id=\"ph1\">`MESSAGE_HANDLER`</ph>, you can use <bpt id=\"p1\">[</bpt>COMMAND_HANDLER<ept id=\"p1\">](#command_handler)</ept> and <bpt id=\"p2\">[</bpt>NOTIFY_HANDLER<ept id=\"p2\">](#notify_handler)</ept> to map <bpt id=\"p3\">[</bpt>WM_COMMAND<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/ms647591)</ept> and <bpt id=\"p4\">[</bpt>WM_NOTIFY<ept id=\"p4\">](http://msdn.microsoft.com/library/windows/desktop/bb775583)</ept> messages, respectively.","source":"In addition to `MESSAGE_HANDLER`, you can use [COMMAND_HANDLER](#command_handler) and [NOTIFY_HANDLER](#notify_handler) to map [WM_COMMAND](http://msdn.microsoft.com/library/windows/desktop/ms647591) and [WM_NOTIFY](http://msdn.microsoft.com/library/windows/desktop/bb775583) messages, respectively."},{"pos":[28005,28109],"content":"For more information about using message maps in ATL, see <bpt id=\"p1\">[</bpt>Message Maps<ept id=\"p1\">](../../atl/message-maps-atl.md)</ept>.","source":"For more information about using message maps in ATL, see [Message Maps](../../atl/message-maps-atl.md)."},{"pos":[28119,28126],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[28130,28218],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#129<ept id=\"p2\">](../../atl/codesnippet/cpp/message-map-macros-atl_8.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#129](../../atl/codesnippet/cpp/message-map-macros-atl_8.h)]"},{"pos":[28228,28287],"content":"<bpt id=\"p1\">&lt;a name=\"message_range_handler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  MESSAGE_RANGE_HANDLER","linkify":"<a name=\"message_range_handler\"></a>  MESSAGE_RANGE_HANDLER","source":"<a name=\"message_range_handler\"></a>  MESSAGE_RANGE_HANDLER"},{"pos":[28291,28405],"content":"Similar to <bpt id=\"p1\">[</bpt>MESSAGE_HANDLER<ept id=\"p1\">](#message_handler)</ept>, but maps a range of Windows messages to a single handler function.","source":"Similar to [MESSAGE_HANDLER](#message_handler), but maps a range of Windows messages to a single handler function."},{"pos":[28495,28505],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>msgFirst<ept id=\"p1\">*</ept>","pos":[28509,28519],"source":"*msgFirst*"},{"content":"[in] Marks the beginning of a contiguous range of messages.","pos":[28523,28582]},{"content":"<bpt id=\"p1\">*</bpt>msgLast<ept id=\"p1\">*</ept>","pos":[28589,28598],"source":"*msgLast*"},{"content":"[in] Marks the end of a contiguous range of messages.","pos":[28602,28655]},{"content":"[in] The name of the message-handler function.","pos":[28672,28718]},{"pos":[28728,28783],"content":"<bpt id=\"p1\">&lt;a name=\"notify_code_handler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  NOTIFY_CODE_HANDLER","linkify":"<a name=\"notify_code_handler\"></a>  NOTIFY_CODE_HANDLER","source":"<a name=\"notify_code_handler\"></a>  NOTIFY_CODE_HANDLER"},{"pos":[28787,28960],"content":"Similar to <bpt id=\"p1\">[</bpt>NOTIFY_HANDLER<ept id=\"p1\">](#notify_handler)</ept>, but maps a <bpt id=\"p2\">[</bpt>WM_NOTIFY<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb775583)</ept> message based only on the notification code.","source":"Similar to [NOTIFY_HANDLER](#notify_handler), but maps a [WM_NOTIFY](http://msdn.microsoft.com/library/windows/desktop/bb775583) message based only on the notification code."},{"pos":[29027,29037],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The notification code.","pos":[29049,29076]},{"content":"[in] The name of the message-handler function.","pos":[29093,29139]},{"pos":[29149,29194],"content":"<bpt id=\"p1\">&lt;a name=\"notify_handler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  NOTIFY_HANDLER","linkify":"<a name=\"notify_handler\"></a>  NOTIFY_HANDLER","source":"<a name=\"notify_handler\"></a>  NOTIFY_HANDLER"},{"content":"Defines an entry in a message map.","pos":[29198,29232]},{"pos":[29304,29314],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The identifier of the control sending the message.","pos":[29326,29381]},{"content":"[in] The notification code.","pos":[29396,29423]},{"content":"[in] The name of the message-handler function.","pos":[29440,29486]},{"pos":[29496,29503],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[29507,29704],"content":"<ph id=\"ph1\">`NOTIFY_HANDLER`</ph> maps a <bpt id=\"p1\">[</bpt>WM_NOTIFY<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775583)</ept> message to the specified handler function, based on the notification code and the control identifier.","source":"`NOTIFY_HANDLER` maps a [WM_NOTIFY](http://msdn.microsoft.com/library/windows/desktop/bb775583) message to the specified handler function, based on the notification code and the control identifier."},{"pos":[29711,29789],"content":"Any function specified in a <ph id=\"ph1\">`NOTIFY_HANDLER`</ph> macro must be defined as follows:","source":"Any function specified in a `NOTIFY_HANDLER` macro must be defined as follows:"},{"content":"The message map sets <ph id=\"ph1\">`bHandled`</ph> to <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> before <ph id=\"ph2\">`NotifyHandler`</ph> is called.","pos":[29869,29946],"source":"The message map sets `bHandled` to **TRUE** before `NotifyHandler` is called."},{"content":"If <ph id=\"ph1\">`NotifyHandler`</ph> does not fully handle the message, it should set <ph id=\"ph2\">`bHandled`</ph> to <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept> to indicate the message needs further processing.","pos":[29947,30088],"source":" If `NotifyHandler` does not fully handle the message, it should set `bHandled` to **FALSE** to indicate the message needs further processing."},{"pos":[30096,30419],"content":"[!NOTE]\n Always begin a message map with [BEGIN_MSG_MAP](#begin_msg_map). You can then declare subsequent alternate message maps with [ALT_MSG_MAP](#alt_msg_map). The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map. Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`.","leadings":["","> "],"nodes":[{"content":" Always begin a message map with [BEGIN_MSG_MAP](#begin_msg_map). You can then declare subsequent alternate message maps with [ALT_MSG_MAP](#alt_msg_map). The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map. Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`.","pos":[8,321],"nodes":[{"content":"Always begin a message map with <bpt id=\"p1\">[</bpt>BEGIN_MSG_MAP<ept id=\"p1\">](#begin_msg_map)</ept>.","pos":[1,65],"source":" Always begin a message map with [BEGIN_MSG_MAP](#begin_msg_map)."},{"content":"You can then declare subsequent alternate message maps with <bpt id=\"p1\">[</bpt>ALT_MSG_MAP<ept id=\"p1\">](#alt_msg_map)</ept>.","pos":[66,154],"source":" You can then declare subsequent alternate message maps with [ALT_MSG_MAP](#alt_msg_map)."},{"content":"The <bpt id=\"p1\">[</bpt>END_MSG_MAP<ept id=\"p1\">](#end_msg_map)</ept> macro marks the end of the message map.","pos":[155,226],"source":" The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map."},{"content":"Every message map must have exactly one instance of <ph id=\"ph1\">`BEGIN_MSG_MAP`</ph> and <ph id=\"ph2\">`END_MSG_MAP`</ph>.","pos":[227,313],"source":" Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`."}]}]},{"content":"In addition to <ph id=\"ph1\">`NOTIFY_HANDLER`</ph>, you can use <bpt id=\"p1\">[</bpt>MESSAGE_HANDLER<ept id=\"p1\">](#message_handler)</ept> to map a <bpt id=\"p2\">**</bpt>WM_NOTIFY<ept id=\"p2\">**</ept> message without regard to an identifier or code.","pos":[30426,30578],"source":"In addition to `NOTIFY_HANDLER`, you can use [MESSAGE_HANDLER](#message_handler) to map a **WM_NOTIFY** message without regard to an identifier or code."},{"content":"In this case, <ph id=\"ph1\">`MESSAGE_HANDLER(WM_NOTIFY, OnHandlerFunction)`</ph> will direct all <bpt id=\"p1\">**</bpt>WM_NOTIFY<ept id=\"p1\">**</ept> messages to <ph id=\"ph2\">`OnHandlerFunction`</ph>.","pos":[30579,30703],"source":" In this case, `MESSAGE_HANDLER(WM_NOTIFY, OnHandlerFunction)` will direct all **WM_NOTIFY** messages to `OnHandlerFunction`."},{"pos":[30710,30814],"content":"For more information about using message maps in ATL, see <bpt id=\"p1\">[</bpt>Message Maps<ept id=\"p1\">](../../atl/message-maps-atl.md)</ept>.","source":"For more information about using message maps in ATL, see [Message Maps](../../atl/message-maps-atl.md)."},{"pos":[30824,30831],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[30835,30923],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#130<ept id=\"p2\">](../../atl/codesnippet/cpp/message-map-macros-atl_9.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#130](../../atl/codesnippet/cpp/message-map-macros-atl_9.h)]"},{"pos":[30933,30984],"content":"<bpt id=\"p1\">&lt;a name=\"notify_id_handler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  NOTIFY_ID_HANDLER","linkify":"<a name=\"notify_id_handler\"></a>  NOTIFY_ID_HANDLER","source":"<a name=\"notify_id_handler\"></a>  NOTIFY_ID_HANDLER"},{"pos":[30988,31162],"content":"Similar to <bpt id=\"p1\">[</bpt>NOTIFY_HANDLER<ept id=\"p1\">](#notify_handler)</ept>, but maps a <bpt id=\"p2\">[</bpt>WM_NOTIFY<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb775583)</ept> message based only on the control identifier.","source":"Similar to [NOTIFY_HANDLER](#notify_handler), but maps a [WM_NOTIFY](http://msdn.microsoft.com/library/windows/desktop/bb775583) message based only on the control identifier."},{"pos":[31227,31237],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The identifier of the control sending the message.","pos":[31249,31304]},{"content":"[in] The name of the message-handler function.","pos":[31321,31367]},{"pos":[31377,31444],"content":"<bpt id=\"p1\">&lt;a name=\"notify_range_code_handler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  NOTIFY_RANGE_CODE_HANDLER","linkify":"<a name=\"notify_range_code_handler\"></a>  NOTIFY_RANGE_CODE_HANDLER","source":"<a name=\"notify_range_code_handler\"></a>  NOTIFY_RANGE_CODE_HANDLER"},{"pos":[31448,31684],"content":"Similar to <bpt id=\"p1\">[</bpt>NOTIFY_RANGE_HANDLER<ept id=\"p1\">](#notify_range_handler)</ept>, but maps <bpt id=\"p2\">[</bpt>WM_NOTIFY<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb775583)</ept> messages with a specific notification code from a range of controls to a single handler function.","source":"Similar to [NOTIFY_RANGE_HANDLER](#notify_range_handler), but maps [WM_NOTIFY](http://msdn.microsoft.com/library/windows/desktop/bb775583) messages with a specific notification code from a range of controls to a single handler function."},{"pos":[31786,31796],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] Marks the beginning of a contiguous range of control identifiers.","pos":[31813,31883]},{"content":"[in] Marks the end of a contiguous range of control identifiers.","pos":[31902,31966]},{"content":"[in] The notification code.","pos":[31981,32008]},{"content":"[in] The name of the message-handler function.","pos":[32025,32071]},{"pos":[32081,32088],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This range is based on the identifier of the control sending the message.","pos":[32092,32165]},{"pos":[32175,32232],"content":"<bpt id=\"p1\">&lt;a name=\"notify_range_handler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  NOTIFY_RANGE_HANDLER","linkify":"<a name=\"notify_range_handler\"></a>  NOTIFY_RANGE_HANDLER","source":"<a name=\"notify_range_handler\"></a>  NOTIFY_RANGE_HANDLER"},{"pos":[32236,32426],"content":"Similar to <bpt id=\"p1\">[</bpt>NOTIFY_HANDLER<ept id=\"p1\">](#notify_handler)</ept>, but maps <bpt id=\"p2\">[</bpt>WM_NOTIFY<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb775583)</ept> messages from a range of controls to a single handler function.","source":"Similar to [NOTIFY_HANDLER](#notify_handler), but maps [WM_NOTIFY](http://msdn.microsoft.com/library/windows/desktop/bb775583) messages from a range of controls to a single handler function."},{"pos":[32513,32523],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] Marks the beginning of a contiguous range of control identifiers.","pos":[32540,32610]},{"content":"[in] Marks the end of a contiguous range of control identifiers.","pos":[32629,32693]},{"content":"[in] The name of the message-handler function.","pos":[32710,32756]},{"pos":[32766,32773],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This range is based on the identifier of the control sending the message.","pos":[32777,32850]},{"pos":[32860,32919],"content":"<bpt id=\"p1\">&lt;a name=\"reflect_notifications\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  REFLECT_NOTIFICATIONS","linkify":"<a name=\"reflect_notifications\"></a>  REFLECT_NOTIFICATIONS","source":"<a name=\"reflect_notifications\"></a>  REFLECT_NOTIFICATIONS"},{"content":"Reflects notification messages back to the child window (control) that sent them.","pos":[32923,33004]},{"pos":[33051,33058],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Specify this macro as part of the parent window's message map.","pos":[33062,33124]},{"pos":[33134,33211],"content":"<bpt id=\"p1\">&lt;a name=\"reflected_command_code_handler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  REFLECTED_COMMAND_CODE_HANDLER","linkify":"<a name=\"reflected_command_code_handler\"></a>  REFLECTED_COMMAND_CODE_HANDLER","source":"<a name=\"reflected_command_code_handler\"></a>  REFLECTED_COMMAND_CODE_HANDLER"},{"pos":[33215,33324],"content":"Similar to <bpt id=\"p1\">[</bpt>COMMAND_CODE_HANDLER<ept id=\"p1\">](#command_code_handler)</ept>, but maps commands reflected from the parent window.","source":"Similar to [COMMAND_CODE_HANDLER](#command_code_handler), but maps commands reflected from the parent window."},{"pos":[33404,33414],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The notification code.","pos":[33428,33455]},{"content":"[in] The name of the message-handler function.","pos":[33472,33518]},{"pos":[33528,33595],"content":"<bpt id=\"p1\">&lt;a name=\"reflected_command_handler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  REFLECTED_COMMAND_HANDLER","linkify":"<a name=\"reflected_command_handler\"></a>  REFLECTED_COMMAND_HANDLER","source":"<a name=\"reflected_command_handler\"></a>  REFLECTED_COMMAND_HANDLER"},{"pos":[33599,33698],"content":"Similar to <bpt id=\"p1\">[</bpt>COMMAND_HANDLER<ept id=\"p1\">](#command_handler)</ept>, but maps commands reflected from the parent window.","source":"Similar to [COMMAND_HANDLER](#command_handler), but maps commands reflected from the parent window."},{"pos":[33783,33793],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The identifier of the menu item, control, or accelerator.","pos":[33805,33867]},{"content":"[in] The notification code.","pos":[33884,33911]},{"content":"[in] The name of the message-handler function.","pos":[33928,33974]},{"pos":[33984,34057],"content":"<bpt id=\"p1\">&lt;a name=\"reflected_command_id_handler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  REFLECTED_COMMAND_ID_HANDLER","linkify":"<a name=\"reflected_command_id_handler\"></a>  REFLECTED_COMMAND_ID_HANDLER","source":"<a name=\"reflected_command_id_handler\"></a>  REFLECTED_COMMAND_ID_HANDLER"},{"pos":[34061,34166],"content":"Similar to <bpt id=\"p1\">[</bpt>COMMAND_ID_HANDLER<ept id=\"p1\">](#command_id_handler)</ept>, but maps commands reflected from the parent window.","source":"Similar to [COMMAND_ID_HANDLER](#command_id_handler), but maps commands reflected from the parent window."},{"pos":[34242,34252],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The identifier of the menu item, control, or accelerator.","pos":[34264,34326]},{"content":"[in] The name of the message-handler function.","pos":[34343,34389]},{"pos":[34399,34488],"content":"<bpt id=\"p1\">&lt;a name=\"reflected_command_range_code_handler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  REFLECTED_COMMAND_RANGE_CODE_HANDLER","linkify":"<a name=\"reflected_command_range_code_handler\"></a>  REFLECTED_COMMAND_RANGE_CODE_HANDLER","source":"<a name=\"reflected_command_range_code_handler\"></a>  REFLECTED_COMMAND_RANGE_CODE_HANDLER"},{"pos":[34492,34613],"content":"Similar to <bpt id=\"p1\">[</bpt>COMMAND_RANGE_CODE_HANDLER<ept id=\"p1\">](#command_range_code_handler)</ept>, but maps commands reflected from the parent window.","source":"Similar to [COMMAND_RANGE_CODE_HANDLER](#command_range_code_handler), but maps commands reflected from the parent window."},{"pos":[34728,34738],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] Marks the beginning of a contiguous range of control identifiers.","pos":[34755,34825]},{"content":"[in] Marks the end of a contiguous range of control identifiers.","pos":[34844,34908]},{"content":"[in] The notification code.","pos":[34925,34952]},{"content":"[in] The name of the message-handler function.","pos":[34969,35015]},{"pos":[35025,35104],"content":"<bpt id=\"p1\">&lt;a name=\"reflected_command_range_handler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  REFLECTED_COMMAND_RANGE_HANDLER","linkify":"<a name=\"reflected_command_range_handler\"></a>  REFLECTED_COMMAND_RANGE_HANDLER","source":"<a name=\"reflected_command_range_handler\"></a>  REFLECTED_COMMAND_RANGE_HANDLER"},{"pos":[35108,35219],"content":"Similar to <bpt id=\"p1\">[</bpt>COMMAND_RANGE_HANDLER<ept id=\"p1\">](#command_range_handler)</ept>, but maps commands reflected from the parent window.","source":"Similar to [COMMAND_RANGE_HANDLER](#command_range_handler), but maps commands reflected from the parent window."},{"pos":[35317,35327],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] Marks the beginning of a contiguous range of control identifiers.","pos":[35344,35414]},{"content":"[in] Marks the end of a contiguous range of control identifiers.","pos":[35433,35497]},{"content":"[in] The name of the message-handler function.","pos":[35514,35560]},{"pos":[35570,35645],"content":"<bpt id=\"p1\">&lt;a name=\"reflected_notify_code_handler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  REFLECTED_NOTIFY_CODE_HANDLER","linkify":"<a name=\"reflected_notify_code_handler\"></a>  REFLECTED_NOTIFY_CODE_HANDLER","source":"<a name=\"reflected_notify_code_handler\"></a>  REFLECTED_NOTIFY_CODE_HANDLER"},{"pos":[35649,35761],"content":"Similar to <bpt id=\"p1\">[</bpt>NOTIFY_CODE_HANDLER<ept id=\"p1\">](#notify_code_handler)</ept>, but maps notifications reflected from the parent window.","source":"Similar to [NOTIFY_CODE_HANDLER](#notify_code_handler), but maps notifications reflected from the parent window."},{"pos":[35841,35851],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The notification code.","pos":[35863,35890]},{"content":"[in] The name of the message-handler function.","pos":[35907,35953]},{"pos":[35963,36028],"content":"<bpt id=\"p1\">&lt;a name=\"reflected_notify_handler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  REFLECTED_NOTIFY_HANDLER","linkify":"<a name=\"reflected_notify_handler\"></a>  REFLECTED_NOTIFY_HANDLER","source":"<a name=\"reflected_notify_handler\"></a>  REFLECTED_NOTIFY_HANDLER"},{"pos":[36032,36134],"content":"Similar to <bpt id=\"p1\">[</bpt>NOTIFY_HANDLER<ept id=\"p1\">](#notify_handler)</ept>, but maps notifications reflected from the parent window.","source":"Similar to [NOTIFY_HANDLER](#notify_handler), but maps notifications reflected from the parent window."},{"pos":[36216,36226],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The identifier of the menu item, control, or accelerator.","pos":[36238,36300]},{"content":"[in] The notification code.","pos":[36315,36342]},{"content":"[in] The name of the message-handler function.","pos":[36359,36405]},{"pos":[36415,36486],"content":"<bpt id=\"p1\">&lt;a name=\"reflected_notify_id_handler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  REFLECTED_NOTIFY_ID_HANDLER","linkify":"<a name=\"reflected_notify_id_handler\"></a>  REFLECTED_NOTIFY_ID_HANDLER","source":"<a name=\"reflected_notify_id_handler\"></a>  REFLECTED_NOTIFY_ID_HANDLER"},{"pos":[36490,36598],"content":"Similar to <bpt id=\"p1\">[</bpt>NOTIFY_ID_HANDLER<ept id=\"p1\">](#notify_id_handler)</ept>, but maps notifications reflected from the parent window.","source":"Similar to [NOTIFY_ID_HANDLER](#notify_id_handler), but maps notifications reflected from the parent window."},{"pos":[36673,36683],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The identifier of the menu item, control, or accelerator.","pos":[36695,36757]},{"content":"[in] The name of the message-handler function.","pos":[36774,36820]},{"pos":[36830,36917],"content":"<bpt id=\"p1\">&lt;a name=\"reflected_notify_range_code_handler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  REFLECTED_NOTIFY_RANGE_CODE_HANDLER","linkify":"<a name=\"reflected_notify_range_code_handler\"></a>  REFLECTED_NOTIFY_RANGE_CODE_HANDLER","source":"<a name=\"reflected_notify_range_code_handler\"></a>  REFLECTED_NOTIFY_RANGE_CODE_HANDLER"},{"pos":[36921,37045],"content":"Similar to <bpt id=\"p1\">[</bpt>NOTIFY_RANGE_CODE_HANDLER<ept id=\"p1\">](#notify_range_code_handler)</ept>, but maps notifications reflected from the parent window.","source":"Similar to [NOTIFY_RANGE_CODE_HANDLER](#notify_range_code_handler), but maps notifications reflected from the parent window."},{"pos":[37151,37161],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] Marks the beginning of a contiguous range of control identifiers.","pos":[37178,37248]},{"content":"[in] Marks the end of a contiguous range of control identifiers.","pos":[37267,37331]},{"content":"[in] The notification code.","pos":[37346,37373]},{"content":"[in] The name of the message-handler function.","pos":[37390,37436]},{"pos":[37446,37523],"content":"<bpt id=\"p1\">&lt;a name=\"reflected_notify_range_handler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  REFLECTED_NOTIFY_RANGE_HANDLER","linkify":"<a name=\"reflected_notify_range_handler\"></a>  REFLECTED_NOTIFY_RANGE_HANDLER","source":"<a name=\"reflected_notify_range_handler\"></a>  REFLECTED_NOTIFY_RANGE_HANDLER"},{"pos":[37527,37641],"content":"Similar to <bpt id=\"p1\">[</bpt>NOTIFY_RANGE_HANDLER<ept id=\"p1\">](#notify_range_handler)</ept>, but maps notifications reflected from the parent window.","source":"Similar to [NOTIFY_RANGE_HANDLER](#notify_range_handler), but maps notifications reflected from the parent window."},{"pos":[37738,37748],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] Marks the beginning of a contiguous range of control identifiers.","pos":[37765,37835]},{"content":"[in] Marks the end of a contiguous range of control identifiers.","pos":[37854,37918]},{"content":"[in] The name of the message-handler function.","pos":[37935,37981]},{"pos":[37990,37998],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[38002,38045],"content":"<bpt id=\"p1\">[</bpt>Macros<ept id=\"p1\">](../../atl/reference/atl-macros.md)</ept>","source":"[Macros](../../atl/reference/atl-macros.md)"}],"content":"---\ntitle: \"Message Map Macros (ATL) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\ndev_langs: \n  - \"C++\"\nms.assetid: eefdd546-8934-4a30-b263-9c06a8addcbd\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Message Map Macros (ATL)\nThese macros define message maps and entries.  \n  \n|||  \n|-|-|  \n|[ALT_MSG_MAP](#alt_msg_map)|Marks the beginning of an alternate message map.|  \n|[BEGIN_MSG_MAP](#begin_msg_map)|Marks the beginning of the default message map.|  \n|[CHAIN_MSG_MAP_ALT](#chain_msg_map_alt)|Chains to an alternate message map in the base class.|  \n|[CHAIN_MSG_MAP_ALT_MEMBER](#chain_msg_map_alt_member)|Chains to an alternate message map in a data member of the class.|  \n|[CHAIN_MSG_MAP](#chain_msg_map)|Chains to the default message map in the base class.|  \n|[CHAIN_MSG_MAP_DYNAMIC](#chain_msg_map_dynamic)|Chains to the message map in another class at run time.|  \n|[CHAIN_MSG_MAP_MEMBER](#chain_msg_map_member)|Chains to the default message map in a data member of the class.|  \n|[COMMAND_CODE_HANDLER](#command_code_handler)|Maps a **WM_COMMAND** message to a handler function, based on the notification code.|  \n|[COMMAND_HANDLER](#command_handler)|Maps a **WM_COMMAND** message to a handler function, based on the notification code and the identifier of the menu item, control, or accelerator.|  \n|[COMMAND_ID_HANDLER](#command_id_handler)|Maps a **WM_COMMAND** message to a handler function, based on the identifier of the menu item, control, or accelerator.|  \n|[COMMAND_RANGE_CODE_HANDLER](#command_range_code_handler)|Maps a **WM_COMMAND** message to a handler function, based on the notification code and a contiguous range of control identifiers.|  \n|[COMMAND_RANGE_HANDLER](#command_range_handler)|Maps a **WM_COMMAND** message to a handler function, based on a contiguous range of control identifiers.|  \n|[DECLARE_EMPTY_MSG_MAP](#declare_empty_msg_map)|Implements an empty message map.|  \n|[DEFAULT_REFLECTION_HANDLER](#default_reflection_handler)|Provides a default handler for reflected messages that are not handled otherwise.|  \n|[END_MSG_MAP](#end_msg_map)|Marks the end of a message map.|  \n|[FORWARD_NOTIFICATIONS](#forward_notifications)|Forwards notification messages to the parent window.|  \n|[MESSAGE_HANDLER](#message_handler)|Maps a Windows message to a handler function.|  \n|[MESSAGE_RANGE_HANDLER](#message_range_handler)|Maps a contiguous range of Windows messages to a handler function.|  \n|[NOTIFY_CODE_HANDLER](#notify_code_handler)|Maps a **WM_NOTIFY** message to a handler function, based on the notification code.|  \n|[NOTIFY_HANDLER](#notify_handler)|Maps a **WM_NOTIFY** message to a handler function, based on the notification code and the control identifier.|  \n|[NOTIFY_ID_HANDLER](#notify_id_handler)|Maps a **WM_NOTIFY** message to a handler function, based on the control identifier.|  \n|[NOTIFY_RANGE_CODE_HANDLER](#notify_range_code_handler)|Maps a **WM_NOTIFY** message to a handler function, based on the notification code and a contiguous range of control identifiers.|  \n|[NOTIFY_RANGE_HANDLER](#notify_range_handler)|Maps a **WM_NOTIFY** message to a handler function, based on a contiguous range of control identifiers.|  \n|[REFLECT_NOTIFICATIONS](#reflect_notifications)|Reflects notification messages back to the window that sent them.|  \n|[REFLECTED_COMMAND_CODE_HANDLER](#reflected_command_code_handler)|Maps a reflected **WM_COMMAND** message to a handler function, based on the notification code.|  \n|[REFLECTED_COMMAND_HANDLER](#reflected_command_handler)|Maps a reflected **WM_COMMAND** message to a handler function, based on the notification code and the identifier of the menu item, control, or accelerator.|  \n|[REFLECTED_COMMAND_ID_HANDLER](#reflected_command_id_handler)|Maps a reflected **WM_COMMAND** message to a handler function, based on the identifier of the menu item, control, or accelerator.|  \n|[REFLECTED_COMMAND_RANGE_CODE_HANDLER](#reflected_command_range_code_handler)|Maps a reflected **WM_COMMAND** message to a handler function, based on the notification code and a contiguous range of control identifiers.|  \n|[REFLECTED_COMMAND_RANGE_HANDLER](#reflected_command_range_handler)|Maps a reflected **WM_COMMAND** message to a handler function, based on a contiguous range of control identifiers.|  \n|[REFLECTED_NOTIFY_CODE_HANDLER](#reflected_notify_code_handler)|Maps a reflected **WM_NOTIFY** message to a handler function, based on the notification code.|  \n|[REFLECTED_NOTIFY_HANDLER](#reflected_notify_handler)|Maps a reflected **WM_NOTIFY** message to a handler function, based on the notification code and the control identifier.|  \n|[REFLECTED_NOTIFY_ID_HANDLER](#reflected_notify_id_handler)|Maps a reflected **WM_NOTIFY** message to a handler function, based on the control identifier.|  \n|[REFLECTED_NOTIFY_RANGE_CODE_HANDLER](#reflected_notify_range_code_handler)|Maps a reflected **WM_NOTIFY** message to a handler function, based on the notification code and a contiguous range of control identifiers.|  \n|[REFLECTED_NOTIFY_RANGE_HANDLER](#reflected_notify_range_handler)|Maps a reflected **WM_NOTIFY** message to a handler function, based on a contiguous range of control identifiers.|  \n  \n##  <a name=\"alt_msg_map\"></a>  ALT_MSG_MAP  \n Marks the beginning of an alternate message map.  \n  \n```\nALT_MSG_MAP(msgMapID)\n```  \n  \n### Parameters  \n `msgMapID`  \n [in] The message map identifier.  \n  \n### Remarks  \n ATL identifies each message map by a number. The default message map (declared with the `BEGIN_MSG_MAP` macro) is identified by 0. An alternate message map is identified by `msgMapID`.  \n  \n Message maps are used to process messages sent to a window. For example, [CContainedWindow](../../atl/reference/ccontainedwindowt-class.md) allows you to specify the identifier of a message map in the containing object. [CContainedWindow::WindowProc](ccontainedwindowt-class.md#ccontainedwindowt__windowproc) then uses this message map to direct the contained window's messages either to the appropriate handler function or to another message map. For a list of macros that declare handler functions, see [BEGIN_MSG_MAP](#begin_msg_map).  \n  \n Always begin a message map with `BEGIN_MSG_MAP`. You can then declare subsequent alternate message maps.  \n  \n The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map. Note that there is always exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`.  \n  \n For more information about using message maps in ATL, see [Message Maps](../../atl/message-maps-atl.md).  \n  \n### Example  \n The following example shows the default message map and one alternate message map, each containing one handler function:  \n  \n [!code-cpp[NVC_ATL_Windowing#98](../../atl/codesnippet/cpp/message-map-macros-atl_1.h)]  \n  \n The next example shows two alternate message maps. The default message map is empty.  \n  \n [!code-cpp[NVC_ATL_Windowing#99](../../atl/codesnippet/cpp/message-map-macros-atl_2.h)]  \n  \n##  <a name=\"begin_msg_map\"></a>  BEGIN_MSG_MAP  \n Marks the beginning of the default message map.  \n  \n```\nBEGIN_MSG_MAP(theClass)\n```  \n  \n### Parameters  \n `theClass`  \n [in] The name of the class containing the message map.  \n  \n### Remarks  \n [CWindowImpl::WindowProc](cwindowimpl-class.md#cwindowimpl__windowproc) uses the default message map to process messages sent to the window. The message map directs messages either to the appropriate handler function or to another message map.  \n\n  \n The following macros map a message to a handler function. This function must be defined in `theClass`.  \n  \n|Macro|Description|  \n|-----------|-----------------|  \n|[MESSAGE_HANDLER](#message_handler)|Maps a Windows message to a handler function.|  \n|[MESSAGE_RANGE_HANDLER](#message_range_handler)|Maps a contiguous range of Windows messages to a handler function.|  \n|[COMMAND_HANDLER](#command_handler)|Maps a **WM_COMMAND** message to a handler function, based on the notification code and the identifier of the menu item, control, or accelerator.|  \n|[COMMAND_ID_HANDLER](#command_id_handler)|Maps a **WM_COMMAND** message to a handler function, based on the identifier of the menu item, control, or accelerator.|  \n|[COMMAND_CODE_HANDLER](#command_handler)|Maps a **WM_COMMAND** message to a handler function, based on the notification code.|  \n|[COMMAND_RANGE_HANDLER](#command_range_handler)|Maps a contiguous range of **WM_COMMAND** messages to a handler function, based on the identifier of the menu item, control, or accelerator.|  \n|[NOTIFY_HANDLER](#notify_handler)|Maps a **WM_NOTIFY** message to a handler function, based on the notification code and the control identifier.|  \n|[NOTIFY_ID_HANDLER](#notify_id_handler)|Maps a **WM_NOTIFY** message to a handler function, based on the control identifier.|  \n|[NOTIFY_CODE_HANDLER](#notify_code_handler)|Maps a **WM_NOTIFY** message to a handler function, based on the notification code.|  \n|[NOTIFY_RANGE_HANDLER](#notify_range_handler)|Maps a contiguous range of **WM_NOTIFY** messages to a handler function, based on the control identifier.|  \n  \n The following macros direct messages to another message map. This process is called \"chaining.\"  \n  \n|Macro|Description|  \n|-----------|-----------------|  \n|[CHAIN_MSG_MAP](#chain_msg_map)|Chains to the default message map in the base class.|  \n|[CHAIN_MSG_MAP_MEMBER](#chain_msg_map_member)|Chains to the default message map in a data member of the class.|  \n|[CHAIN_MSG_MAP_ALT](#chain_msg_map_alt)|Chains to an alternate message map in the base class.|  \n|[CHAIN_MSG_MAP_ALT_MEMBER](#chain_msg_map_alt_member)|Chains to an alternate message map in a data member of the class.|  \n|[CHAIN_MSG_MAP_DYNAMIC](#chain_msg_map_dynamic)|Chains to the default message map in another class at run time.|  \n  \n The following macros direct \"reflected\" messages from the parent window. For example, a control normally sends notification messages to its parent window for processing, but the parent window can reflect the message back to the control.  \n  \n|Macro|Description|  \n|-----------|-----------------|  \n|[REFLECTED_COMMAND_HANDLER](#reflected_command_handler)|Maps a reflected **WM_COMMAND** message to a handler function, based on the notification code and the identifier of the menu item, control, or accelerator.|  \n|[REFLECTED_COMMAND_ID_HANDLER](#reflected_command_id_handler)|Maps a reflected **WM_COMMAND** message to a handler function, based on the identifier of the menu item, control, or accelerator.|  \n|[REFLECTED_COMMAND_CODE_HANDLER](#reflected_command_code_handler)|Maps a reflected **WM_COMMAND** message to a handler function, based on the notification code.|  \n|[REFLECTED_COMMAND_RANGE_HANDLER](#reflected_command_range_handler)|Maps a reflected **WM_COMMAND** message to a handler function, based on a contiguous range of control identifiers.|  \n|[REFLECTED_COMMAND_RANGE_CODE_HANDLER](#reflected_command_range_code_handler)|Maps a reflected **WM_COMMAND** message to a handler function, based on the notification code and a contiguous range of control identifiers.|  \n|[REFLECTED_NOTIFY_HANDLER](#reflected_notify_handler)|Maps a reflected **WM_NOTIFY** message to a handler function, based on the notification code and the control identifier.|  \n|[REFLECTED_NOTIFY_ID_HANDLER](#reflected_notify_id_handler)|Maps a reflected **WM_NOTIFY** message to a handler function, based on the control identifier.|  \n|[REFLECTED_NOTIFY_CODE_HANDLER](#reflected_notify_code_handler)|Maps a reflected **WM_NOTIFY** message to a handler function, based on the notification code.|  \n|[REFLECTED_NOTIFY_RANGE_HANDLER](#reflected_notify_range_handler)|Maps a reflected **WM_NOTIFY** message to a handler function, based on a contiguous range of control identifiers.|  \n|[REFLECTED_NOTIFY_RANGE_CODE_HANDLER](#reflected_notify_range_code_handler)|Maps a reflected **WM_NOTIFY** message to a handler function, based on the notification code and a contiguous range of control identifiers.|  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#102](../../atl/codesnippet/cpp/message-map-macros-atl_3.h)]  \n  \n When a `CMyExtWindow` object receives a `WM_PAINT` message, the message is directed to `CMyExtWindow::OnPaint` for the actual processing. If `OnPaint` indicates the message requires further processing, the message will then be directed to the default message map in `CMyBaseWindow`.  \n  \n In addition to the default message map, you can define an alternate message map with [ALT_MSG_MAP](#alt_msg_map). Always begin a message map with `BEGIN_MSG_MAP`. You can then declare subsequent alternate message maps. The following example shows the default message map and one alternate message map, each containing one handler function:  \n  \n [!code-cpp[NVC_ATL_Windowing#98](../../atl/codesnippet/cpp/message-map-macros-atl_1.h)]  \n  \n The next example shows two alternate message maps. The default message map is empty.  \n  \n [!code-cpp[NVC_ATL_Windowing#99](../../atl/codesnippet/cpp/message-map-macros-atl_2.h)]  \n  \n The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map. Note that there is always exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`.  \n  \n For more information about using message maps in ATL, see [Message Maps](../../atl/message-maps-atl.md).  \n  \n##  <a name=\"chain_msg_map_alt\"></a>  CHAIN_MSG_MAP_ALT  \n Defines an entry in a message map.  \n  \n```\nCHAIN_MSG_MAP_ALT(\ntheChainClass,   msgMapID)\n```  \n  \n### Parameters  \n `theChainClass`  \n [in] The name of the base class containing the message map.  \n  \n `msgMapID`  \n [in] The message map identifier.  \n  \n### Remarks  \n `CHAIN_MSG_MAP_ALT` directs messages to an alternate message map in a base class. You must have declared this alternate message map with [ALT_MSG_MAP(msgMapID)](#alt_msg_map). To direct messages to a base class's default message map (declared with [BEGIN_MSG_MAP](#begin_msg_map)), use `CHAIN_MSG_MAP`. For an example, see [CHAIN_MSG_MAP](#chain_msg_map).  \n  \n> [!NOTE]\n>  Always begin a message map with `BEGIN_MSG_MAP`. You can then declare subsequent alternate message maps with `ALT_MSG_MAP`. The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map. Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`.  \n  \n For more information about using message maps in ATL, see [Message Maps](../../atl/message-maps-atl.md).  \n  \n##  <a name=\"chain_msg_map_alt_member\"></a>  CHAIN_MSG_MAP_ALT_MEMBER  \n Defines an entry in a message map.  \n  \n```\nCHAIN_MSG_MAP_ALT_MEMBER(\ntheChainMember,   msgMapID)\n```  \n  \n### Parameters  \n `theChainMember`  \n [in] The name of the data member containing the message map.  \n  \n `msgMapID`  \n [in] The message map identifier.  \n  \n### Remarks  \n `CHAIN_MSG_MAP_ALT_MEMBER` directs messages to an alternate message map in a data member. You must have declared this alternate message map with [ALT_MSG_MAP(msgMapID)](#alt_msg_map). To direct messages to a data member's default message map (declared with [BEGIN_MSG_MAP](#begin_msg_map)), use `CHAIN_MSG_MAP_MEMBER`. For an example, see [CHAIN_MSG_MAP_MEMBER](#chain_msg_map_member).  \n  \n> [!NOTE]\n>  Always begin a message map with `BEGIN_MSG_MAP`. You can then declare subsequent alternate message maps with `ALT_MSG_MAP`. The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map. Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`.  \n  \n For more information about using message maps in ATL, see [Message Maps](../../atl/message-maps-atl.md).  \n  \n##  <a name=\"chain_msg_map\"></a>  CHAIN_MSG_MAP  \n Defines an entry in a message map.  \n  \n```\nCHAIN_MSG_MAP(theChainClass)\n```  \n  \n### Parameters  \n `theChainClass`  \n [in] The name of the base class containing the message map.  \n  \n### Remarks  \n `CHAIN_MSG_MAP` directs messages to a base class's default message map (declared with [BEGIN_MSG_MAP](#begin_msg_map)). To direct messages to a base class's alternate message map (declared with [ALT_MSG_MAP](#alt_msg_map)), use [CHAIN_MSG_MAP_ALT](#chain_msg_map_alt).  \n  \n> [!NOTE]\n>  Always begin a message map with `BEGIN_MSG_MAP`. You can then declare subsequent alternate message maps with `ALT_MSG_MAP`. The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map. Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`.  \n  \n For more information about using message maps in ATL, see [Message Maps](../../atl/message-maps-atl.md).  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#107](../../atl/codesnippet/cpp/message-map-macros-atl_4.h)]  \n  \n This example illustrates the following:  \n  \n-   If a window procedure is using `CMyClass`'s default message map and `OnPaint` does not handle a message, the message is directed to `CMyBaseClass`'s default message map for processing.  \n  \n-   If a window procedure is using the first alternate message map in `CMyClass`, all messages are directed to `CMyBaseClass`'s default message map.  \n  \n-   If a window procedure is using `CMyClass`'s second alternate message map and `OnChar` does not handle a message, the message is directed to the specified alternate message map in `CMyBaseClass`. `CMyBaseClass` must have declared this message map with `ALT_MSG_MAP(1)`.  \n  \n##  <a name=\"chain_msg_map_dynamic\"></a>  CHAIN_MSG_MAP_DYNAMIC  \n Defines an entry in a message map.  \n  \n```\nCHAIN_MSG_MAP_DYNAMIC(dynaChainID)\n```  \n  \n### Parameters  \n *dynaChainID*  \n [in] The unique identifier for an object's message map.  \n  \n### Remarks  \n `CHAIN_MSG_MAP_DYNAMIC` directs messages, at run time, to the default message map in another object. The object and its message map are associated with *dynaChainID*, which you define through [CDynamicChain::SetChainEntry](cdynamicchain-class.md#cdynamicchain__setchainentry). You must derive your class from `CDynamicChain` in order to use `CHAIN_MSG_MAP_DYNAMIC`. For an example, see the [CDynamicChain](../../atl/reference/cdynamicchain-class.md) overview.  \n\n  \n> [!NOTE]\n>  Always begin a message map with [BEGIN_MSG_MAP](#begin_msg_map). You can then declare subsequent alternate message maps with `ALT_MSG_MAP`. The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map. Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`.  \n  \n For more information about using message maps in ATL, see [Message Maps](../../atl/message-maps-atl.md).  \n  \n##  <a name=\"chain_msg_map_member\"></a>  CHAIN_MSG_MAP_MEMBER  \n Defines an entry in a message map.  \n  \n```\nCHAIN_MSG_MAP_MEMBER(theChainMember)\n```  \n  \n### Parameters  \n `theChainMember`  \n [in] The name of the data member containing the message map.  \n  \n### Remarks  \n `CHAIN_MSG_MAP_MEMBER` directs messages to a data member's default message map (declared with [BEGIN_MSG_MAP](#begin_msg_map)). To direct messages to a data member's alternate message map (declared with [ALT_MSG_MAP](#alt_msg_map)), use [CHAIN_MSG_MAP_ALT_MEMBER](#chain_msg_map_alt_member).  \n  \n> [!NOTE]\n>  Always begin a message map with `BEGIN_MSG_MAP`. You can then declare subsequent alternate message maps with `ALT_MSG_MAP`. The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map. Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`.  \n  \n For more information about using message maps in ATL, see [Message Maps](../../atl/message-maps-atl.md).  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#108](../../atl/codesnippet/cpp/message-map-macros-atl_5.h)]  \n  \n This example illustrates the following:  \n  \n-   If a window procedure is using `CMyClass`'s default message map and `OnPaint` does not handle a message, the message is directed to `m_obj`'s default message map for processing.  \n  \n-   If a window procedure is using the first alternate message map in `CMyClass`, all messages are directed to `m_obj`'s default message map.  \n  \n-   If a window procedure is using `CMyClass`'s second alternate message map and `OnChar` does not handle a message, the message is directed to the specified alternate message map of `m_obj`. Class `CMyContainedClass` must have declared this message map with `ALT_MSG_MAP(1)`.  \n  \n##  <a name=\"command_code_handler\"></a>  COMMAND_CODE_HANDLER  \n Similar to [COMMAND_HANDLER](#command_handler), but maps a [WM_COMMAND](http://msdn.microsoft.com/library/windows/desktop/ms647591) message based only on the notification code.  \n  \n```\nCOMMAND_CODE_HANDLER(\ncode,   func)\n```  \n  \n### Parameters  \n `code`  \n [in] The notification code.  \n  \n `func`  \n [in] The name of the message-handler function.  \n  \n##  <a name=\"command_handler\"></a>  COMMAND_HANDLER  \n Defines an entry in a message map.  \n  \n```\nCOMMAND_HANDLER(\nid,\ncode,\n    func)\n```    \n  \n### Parameters  \n `id`  \n [in] The identifier of the menu item, control, or accelerator.  \n  \n `code`  \n [in] The notification code.  \n  \n `func`  \n [in] The name of the message-handler function.  \n  \n### Remarks  \n `COMMAND_HANDLER` maps a [WM_COMMAND](http://msdn.microsoft.com/library/windows/desktop/ms647591) message to the specified handler function, based on the notification code and the control identifier. For example:  \n  \n [!code-cpp[NVC_ATL_Windowing#119](../../atl/codesnippet/cpp/message-map-macros-atl_6.h)]  \n  \n Any function specified in a `COMMAND_HANDLER` macro must be defined as follows:  \n  \n `LRESULT CommandHandler(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL& bHandled);`  \n  \n The message map sets `bHandled` to **TRUE** before `CommandHandler` is called. If `CommandHandler` does not fully handle the message, it should set `bHandled` to **FALSE** to indicate the message needs further processing.  \n  \n> [!NOTE]\n>  Always begin a message map with [BEGIN_MSG_MAP](#begin_msg_map). You can then declare subsequent alternate message maps with [ALT_MSG_MAP](#alt_msg_map). The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map. Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`.  \n  \n In addition to `COMMAND_HANDLER`, you can use [MESSAGE_HANDLER](#message_handler) to map a **WM_COMMAND** message without regard to an identifier or code. In this case, `MESSAGE_HANDLER(WM_COMMAND, OnHandlerFunction)` will direct all **WM_COMMAND** messages to `OnHandlerFunction`.  \n  \n For more information about using message maps in ATL, see [Message Maps](../../atl/message-maps-atl.md).  \n  \n##  <a name=\"command_id_handler\"></a>  COMMAND_ID_HANDLER  \n Similar to [COMMAND_HANDLER](#command_handler), but maps a [WM_COMMAND](http://msdn.microsoft.com/library/windows/desktop/ms647591) message based only on the identifier of the menu item, control, or accelerator.  \n  \n```\nCOMMAND_ID_HANDLER(\nid,   func)\n```  \n  \n### Parameters  \n `id`  \n [in] The identifier of the menu item, control, or accelerator sending the message.  \n  \n `func`  \n [in] The name of the message-handler function.  \n  \n##  <a name=\"command_range_code_handler\"></a>  COMMAND_RANGE_CODE_HANDLER  \n Similar to [COMMAND_RANGE_HANDLER](#command_range_handler), but maps [WM_COMMAND](http://msdn.microsoft.com/library/windows/desktop/ms647591) messages with a specific notification code from a range of controls to a single handler function.  \n  \n```\nCOMMAND_RANGE_CODE_HANDLER(\nidFirst,\nidLast,\ncode,\n    func)\n```    \n  \n### Parameters  \n `idFirst`  \n [in] Marks the beginning of a contiguous range of control identifiers.  \n  \n `idLast`  \n [in] Marks the end of a contiguous range of control identifiers.  \n  \n `code`  \n [in] The notification code.  \n  \n `func`  \n [in] The name of the message-handler function.  \n  \n### Remarks  \n This range is based on the identifier of the menu item, control, or accelerator sending the message.  \n  \n##  <a name=\"command_range_handler\"></a>  COMMAND_RANGE_HANDLER  \n Similar to [COMMAND_HANDLER](#command_handler), but maps [WM_COMMAND](http://msdn.microsoft.com/library/windows/desktop/ms647591) messages from a range of controls to a single handler function.  \n  \n```\nCOMMAND_RANGE_HANDLER(\nidFirst,\nidLast,\n    func)\n```    \n  \n### Parameters  \n `idFirst`  \n [in] Marks the beginning of a contiguous range of control identifiers.  \n  \n `idLast`  \n [in] Marks the end of a contiguous range of control identifiers.  \n  \n `func`  \n [in] The name of the message-handler function.  \n  \n### Remarks  \n This range is based on the identifier of the menu item, control, or accelerator sending the message.  \n  \n##  <a name=\"declare_empty_msg_map\"></a>  DECLARE_EMPTY_MSG_MAP  \n Declares an empty message map.  \n  \n```\nDECLARE_EMPTY_MSG_MAP()\n```  \n  \n### Remarks  \n `DECLARE_EMPTY_MSG_MAP` is a convenience macro that calls the macros [BEGIN_MSG_MAP](#begin_msg_map) and [END_MSG_MAP](#end_msg_map) to create an empty message map:  \n  \n [!code-cpp[NVC_ATL_Windowing#122](../../atl/codesnippet/cpp/message-map-macros-atl_7.h)]  \n  \n##  <a name=\"default_reflection_handler\"></a>  DEFAULT_REFLECTION_HANDLER  \n Provides a default handler for the child window (control) that will receive reflected messages; the handler will properly pass unhandled messages to `DefWindowProc`.  \n  \n```\nDEFAULT_REFLECTION_HANDLER()\n```  \n  \n##  <a name=\"end_msg_map\"></a>  END_MSG_MAP  \n Marks the end of a message map.  \n  \n```\nEND_MSG_MAP()\n```  \n  \n### Remarks  \n Always use the [BEGIN_MSG_MAP](#begin_msg_map) macro to mark the beginning of a message map. Use [ALT_MSG_MAP](#alt_msg_map) to declare subsequent alternate message maps.  \n  \n Note that there is always exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`.  \n  \n For more information about using message maps in ATL, see [Message Maps](../../atl/message-maps-atl.md).  \n  \n### Example  \n The following example shows the default message map and one alternate message map, each containing one handler function:  \n  \n [!code-cpp[NVC_ATL_Windowing#98](../../atl/codesnippet/cpp/message-map-macros-atl_1.h)]  \n  \n The next example shows two alternate message maps. The default message map is empty.  \n  \n [!code-cpp[NVC_ATL_Windowing#99](../../atl/codesnippet/cpp/message-map-macros-atl_2.h)]  \n  \n##  <a name=\"forward_notifications\"></a>  FORWARD_NOTIFICATIONS  \n Forwards notification messages to the parent window.  \n  \n```\nFORWARD_NOTIFICATIONS()\n```  \n  \n### Remarks  \n Specify this macro as part of your message map.  \n  \n##  <a name=\"message_handler\"></a>  MESSAGE_HANDLER  \n Defines an entry in a message map.  \n  \n```\nMESSAGE_HANDLER(Â\n    msg, Â\n    func Â)\n```  \n  \n### Parameters  \n `msg`  \n [in] The Windows message.  \n  \n `func`  \n [in] The name of the message-handler function.  \n  \n### Remarks  \n `MESSAGE_HANDLER` maps a Windows message to the specified handler function.  \n  \n Any function specified in a `MESSAGE_HANDLER` macro must be defined as follows:  \n  \n `LRESULT MessageHandler(UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL& bHandled);`  \n  \n The message map sets `bHandled` to **TRUE** before `MessageHandler` is called. If `MessageHandler` does not fully handle the message, it should set `bHandled` to **FALSE** to indicate the message needs further processing.  \n  \n> [!NOTE]\n>  Always begin a message map with [BEGIN_MSG_MAP](#begin_msg_map). You can then declare subsequent alternate message maps with [ALT_MSG_MAP](#alt_msg_map). The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map. Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`.  \n  \n In addition to `MESSAGE_HANDLER`, you can use [COMMAND_HANDLER](#command_handler) and [NOTIFY_HANDLER](#notify_handler) to map [WM_COMMAND](http://msdn.microsoft.com/library/windows/desktop/ms647591) and [WM_NOTIFY](http://msdn.microsoft.com/library/windows/desktop/bb775583) messages, respectively.  \n  \n For more information about using message maps in ATL, see [Message Maps](../../atl/message-maps-atl.md).  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#129](../../atl/codesnippet/cpp/message-map-macros-atl_8.h)]  \n  \n##  <a name=\"message_range_handler\"></a>  MESSAGE_RANGE_HANDLER  \n Similar to [MESSAGE_HANDLER](#message_handler), but maps a range of Windows messages to a single handler function.  \n  \n```\nMESSAGE_RANGE_HANDLER(Â\n    msgFirst, Â\n    msgLast, Â\n    func Â)\n```  \n  \n### Parameters  \n *msgFirst*  \n [in] Marks the beginning of a contiguous range of messages.  \n  \n *msgLast*  \n [in] Marks the end of a contiguous range of messages.  \n  \n `func`  \n [in] The name of the message-handler function.  \n  \n##  <a name=\"notify_code_handler\"></a>  NOTIFY_CODE_HANDLER  \n Similar to [NOTIFY_HANDLER](#notify_handler), but maps a [WM_NOTIFY](http://msdn.microsoft.com/library/windows/desktop/bb775583) message based only on the notification code.  \n  \n```\nNOTIFY_CODE_HANDLER(Â\n    cd, Â\n    func Â)\n```  \n  \n### Parameters  \n `cd`  \n [in] The notification code.  \n  \n `func`  \n [in] The name of the message-handler function.  \n  \n##  <a name=\"notify_handler\"></a>  NOTIFY_HANDLER  \n Defines an entry in a message map.  \n  \n```\nNOTIFY_HANDLER(Â\n    id, Â\n    cd, Â\n    func Â)\n```  \n  \n### Parameters  \n `id`  \n [in] The identifier of the control sending the message.  \n  \n `cd`  \n [in] The notification code.  \n  \n `func`  \n [in] The name of the message-handler function.  \n  \n### Remarks  \n `NOTIFY_HANDLER` maps a [WM_NOTIFY](http://msdn.microsoft.com/library/windows/desktop/bb775583) message to the specified handler function, based on the notification code and the control identifier.  \n  \n Any function specified in a `NOTIFY_HANDLER` macro must be defined as follows:  \n  \n `LRESULT NotifyHandler(int idCtrl, LPNMHDR pnmh, BOOL& bHandled);`  \n  \n The message map sets `bHandled` to **TRUE** before `NotifyHandler` is called. If `NotifyHandler` does not fully handle the message, it should set `bHandled` to **FALSE** to indicate the message needs further processing.  \n  \n> [!NOTE]\n>  Always begin a message map with [BEGIN_MSG_MAP](#begin_msg_map). You can then declare subsequent alternate message maps with [ALT_MSG_MAP](#alt_msg_map). The [END_MSG_MAP](#end_msg_map) macro marks the end of the message map. Every message map must have exactly one instance of `BEGIN_MSG_MAP` and `END_MSG_MAP`.  \n  \n In addition to `NOTIFY_HANDLER`, you can use [MESSAGE_HANDLER](#message_handler) to map a **WM_NOTIFY** message without regard to an identifier or code. In this case, `MESSAGE_HANDLER(WM_NOTIFY, OnHandlerFunction)` will direct all **WM_NOTIFY** messages to `OnHandlerFunction`.  \n  \n For more information about using message maps in ATL, see [Message Maps](../../atl/message-maps-atl.md).  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#130](../../atl/codesnippet/cpp/message-map-macros-atl_9.h)]  \n  \n##  <a name=\"notify_id_handler\"></a>  NOTIFY_ID_HANDLER  \n Similar to [NOTIFY_HANDLER](#notify_handler), but maps a [WM_NOTIFY](http://msdn.microsoft.com/library/windows/desktop/bb775583) message based only on the control identifier.  \n  \n```\nNOTIFY_ID_HANDLER(Â\n    id, Â\n    func Â)\n```  \n  \n### Parameters  \n `id`  \n [in] The identifier of the control sending the message.  \n  \n `func`  \n [in] The name of the message-handler function.  \n  \n##  <a name=\"notify_range_code_handler\"></a>  NOTIFY_RANGE_CODE_HANDLER  \n Similar to [NOTIFY_RANGE_HANDLER](#notify_range_handler), but maps [WM_NOTIFY](http://msdn.microsoft.com/library/windows/desktop/bb775583) messages with a specific notification code from a range of controls to a single handler function.  \n  \n```\nNOTIFY_RANGE_CODE_HANDLER(Â\n    idFirst, Â\n    idLast, Â\n    cd, Â\n    func Â)\n```  \n  \n### Parameters  \n `idFirst`  \n [in] Marks the beginning of a contiguous range of control identifiers.  \n  \n `idLast`  \n [in] Marks the end of a contiguous range of control identifiers.  \n  \n `cd`  \n [in] The notification code.  \n  \n `func`  \n [in] The name of the message-handler function.  \n  \n### Remarks  \n This range is based on the identifier of the control sending the message.  \n  \n##  <a name=\"notify_range_handler\"></a>  NOTIFY_RANGE_HANDLER  \n Similar to [NOTIFY_HANDLER](#notify_handler), but maps [WM_NOTIFY](http://msdn.microsoft.com/library/windows/desktop/bb775583) messages from a range of controls to a single handler function.  \n  \n```\nNOTIFY_RANGE_HANDLER(Â\n    idFirst, Â\n    idLast, Â\n    func Â)\n```  \n  \n### Parameters  \n `idFirst`  \n [in] Marks the beginning of a contiguous range of control identifiers.  \n  \n `idLast`  \n [in] Marks the end of a contiguous range of control identifiers.  \n  \n `func`  \n [in] The name of the message-handler function.  \n  \n### Remarks  \n This range is based on the identifier of the control sending the message.  \n  \n##  <a name=\"reflect_notifications\"></a>  REFLECT_NOTIFICATIONS  \n Reflects notification messages back to the child window (control) that sent them.  \n  \n```\nREFLECT_NOTIFICATIONS()\n```  \n  \n### Remarks  \n Specify this macro as part of the parent window's message map.  \n  \n##  <a name=\"reflected_command_code_handler\"></a>  REFLECTED_COMMAND_CODE_HANDLER  \n Similar to [COMMAND_CODE_HANDLER](#command_code_handler), but maps commands reflected from the parent window.  \n  \n```\nREFLECTED_COMMAND_CODE_HANDLER(Â\n    code, Â\n    func Â)\n```  \n  \n### Parameters  \n `code`  \n [in] The notification code.  \n  \n `func`  \n [in] The name of the message-handler function.  \n  \n##  <a name=\"reflected_command_handler\"></a>  REFLECTED_COMMAND_HANDLER  \n Similar to [COMMAND_HANDLER](#command_handler), but maps commands reflected from the parent window.  \n  \n```\nREFLECTED_COMMAND_HANDLER(Â\n    id, Â\n    code, Â\n    func Â)\n```  \n  \n### Parameters  \n `id`  \n [in] The identifier of the menu item, control, or accelerator.  \n  \n `code`  \n [in] The notification code.  \n  \n `func`  \n [in] The name of the message-handler function.  \n  \n##  <a name=\"reflected_command_id_handler\"></a>  REFLECTED_COMMAND_ID_HANDLER  \n Similar to [COMMAND_ID_HANDLER](#command_id_handler), but maps commands reflected from the parent window.  \n  \n```\nREFLECTED_COMMAND_ID_HANDLER(Â\n    id, Â\n    func Â)\n```  \n  \n### Parameters  \n `id`  \n [in] The identifier of the menu item, control, or accelerator.  \n  \n `func`  \n [in] The name of the message-handler function.  \n  \n##  <a name=\"reflected_command_range_code_handler\"></a>  REFLECTED_COMMAND_RANGE_CODE_HANDLER  \n Similar to [COMMAND_RANGE_CODE_HANDLER](#command_range_code_handler), but maps commands reflected from the parent window.  \n  \n```\nREFLECTED_COMMAND_RANGE_CODE_HANDLER(Â\n    idFirst, Â\n    idLast, Â\n    code, Â\n    func Â)\n```  \n  \n### Parameters  \n `idFirst`  \n [in] Marks the beginning of a contiguous range of control identifiers.  \n  \n `idLast`  \n [in] Marks the end of a contiguous range of control identifiers.  \n  \n `code`  \n [in] The notification code.  \n  \n `func`  \n [in] The name of the message-handler function.  \n  \n##  <a name=\"reflected_command_range_handler\"></a>  REFLECTED_COMMAND_RANGE_HANDLER  \n Similar to [COMMAND_RANGE_HANDLER](#command_range_handler), but maps commands reflected from the parent window.  \n  \n```\nREFLECTED_COMMAND_RANGE_HANDLER(Â\n    idFirst, Â\n    idLast, Â\n    func Â)\n```  \n  \n### Parameters  \n `idFirst`  \n [in] Marks the beginning of a contiguous range of control identifiers.  \n  \n `idLast`  \n [in] Marks the end of a contiguous range of control identifiers.  \n  \n `func`  \n [in] The name of the message-handler function.  \n  \n##  <a name=\"reflected_notify_code_handler\"></a>  REFLECTED_NOTIFY_CODE_HANDLER  \n Similar to [NOTIFY_CODE_HANDLER](#notify_code_handler), but maps notifications reflected from the parent window.  \n  \n```\nREFLECTED_NOTIFY_CODE_HANDLER_EX(Â\n    cd, Â\n    func Â)\n```  \n  \n### Parameters  \n `cd`  \n [in] The notification code.  \n  \n `func`  \n [in] The name of the message-handler function.  \n  \n##  <a name=\"reflected_notify_handler\"></a>  REFLECTED_NOTIFY_HANDLER  \n Similar to [NOTIFY_HANDLER](#notify_handler), but maps notifications reflected from the parent window.  \n  \n```\nREFLECTED_NOTIFY_HANDLER(Â\n    id, Â\n    cd, Â\n    func Â)\n```  \n  \n### Parameters  \n `id`  \n [in] The identifier of the menu item, control, or accelerator.  \n  \n `cd`  \n [in] The notification code.  \n  \n `func`  \n [in] The name of the message-handler function.  \n  \n##  <a name=\"reflected_notify_id_handler\"></a>  REFLECTED_NOTIFY_ID_HANDLER  \n Similar to [NOTIFY_ID_HANDLER](#notify_id_handler), but maps notifications reflected from the parent window.  \n  \n```\nREFLECTED_NOTIFY_ID_HANDLER(Â\n    id, Â\n    func Â)\n```  \n  \n### Parameters  \n `id`  \n [in] The identifier of the menu item, control, or accelerator.  \n  \n `func`  \n [in] The name of the message-handler function.  \n  \n##  <a name=\"reflected_notify_range_code_handler\"></a>  REFLECTED_NOTIFY_RANGE_CODE_HANDLER  \n Similar to [NOTIFY_RANGE_CODE_HANDLER](#notify_range_code_handler), but maps notifications reflected from the parent window.  \n  \n```\nREFLECTED_NOTIFY_RANGE_CODE_HANDLER(\nidFirst,Â\n    idLast, Â\n    cd, Â\n    func)\n```    \n  \n### Parameters  \n `idFirst`  \n [in] Marks the beginning of a contiguous range of control identifiers.  \n  \n `idLast`  \n [in] Marks the end of a contiguous range of control identifiers.  \n  \n `cd`  \n [in] The notification code.  \n  \n `func`  \n [in] The name of the message-handler function.  \n  \n##  <a name=\"reflected_notify_range_handler\"></a>  REFLECTED_NOTIFY_RANGE_HANDLER  \n Similar to [NOTIFY_RANGE_HANDLER](#notify_range_handler), but maps notifications reflected from the parent window.  \n  \n```\nREFLECTED_NOTIFY_RANGE_HANDLER(Â\n    idFirst, Â\n    idLast, Â\n    func Â)\n```  \n  \n### Parameters  \n `idFirst`  \n [in] Marks the beginning of a contiguous range of control identifiers.  \n  \n `idLast`  \n [in] Marks the end of a contiguous range of control identifiers.  \n  \n `func`  \n [in] The name of the message-handler function.  \n  \n## See Also  \n [Macros](../../atl/reference/atl-macros.md)\n"}