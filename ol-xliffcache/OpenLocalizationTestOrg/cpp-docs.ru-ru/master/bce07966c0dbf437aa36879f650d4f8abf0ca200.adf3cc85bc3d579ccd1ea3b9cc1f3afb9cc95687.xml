{"nodes":[{"pos":[12,57],"content":"Consuming Generics (C++-CLI) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Consuming Generics (C++-CLI) | Microsoft Docs","pos":[0,45]}]},{"content":"Consuming Generics (C++/CLI)","pos":[623,651]},{"content":"Generics authored in one .NET language may be used in other .NET languages.","pos":[652,727]},{"content":"Unlike templates, a generic in a compiled assembly still remains generic.","pos":[728,801]},{"content":"Thus, one may instantiate the generic type in a different assembly and even in a different language than the assembly in which the generic type was defined.","pos":[802,958]},{"content":"Example","pos":[967,974]},{"content":"Description","pos":[984,995]},{"content":"This example shows a generic class defined in C#.","pos":[999,1048]},{"content":"Code","pos":[1058,1062]},{"content":"Example","pos":[2459,2466]},{"content":"Description","pos":[2476,2487]},{"content":"This example consumes the assembly authored in C#.","pos":[2491,2541]},{"content":"Code","pos":[2551,2555]},{"content":"Output","pos":[3060,3066]},{"content":"See Also","pos":[3130,3138]},{"content":"Generics","pos":[3143,3151]}],"content":"---\ntitle: \"Consuming Generics (C++-CLI) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"generics [C++], consuming from .NET languages\"\nms.assetid: e6330ef5-e907-432e-b527-7a22f5899639\ncaps.latest.revision: 14\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Consuming Generics (C++/CLI)\nGenerics authored in one .NET language may be used in other .NET languages. Unlike templates, a generic in a compiled assembly still remains generic. Thus, one may instantiate the generic type in a different assembly and even in a different language than the assembly in which the generic type was defined.  \n  \n## Example  \n  \n### Description  \n This example shows a generic class defined in C#.  \n  \n### Code  \n  \n```  \n// consuming_generics_from_other_NET_languages.cs  \n// compile with: /target:library  \n// a C# program  \npublic class CircularList<ItemType> {  \n   class ListNode    {  \n      public ItemType m_item;  \n      public ListNode next;  \n      public ListNode(ItemType item) {  \n         m_item = item;  \n      }  \n   }  \n  \n   ListNode first, last;  \n  \n   public CircularList() {}  \n  \n   public void Add(ItemType item) {  \n      ListNode newnode = new ListNode(item);  \n      if (first == null) {  \n         first = last = newnode;  \n         first.next = newnode;  \n         last.next = first;  \n      }  \n      else {  \n         newnode.next = first;  \n         first = newnode;  \n         last.next = first;  \n      }   \n   }  \n  \n   public void Remove(ItemType item) {  \n      ListNode iter = first;  \n      if (first.m_item.Equals( item )) {  \n         first =   \n         last.next = first.next;  \n      }  \n      for ( ; iter != last ; iter = iter.next )  \n         if (iter.next.m_item.Equals( item )) {  \n              if (iter.next == last)  \n                  last = iter;  \n              iter.next = iter.next.next;  \n              return;  \n          }  \n   }  \n  \n   public void PrintAll() {  \n      ListNode iter = first;  \n      do {  \n         System.Console.WriteLine( iter.m_item );  \n         iter = iter.next;  \n      } while (iter != last);  \n   }  \n}  \n```  \n  \n## Example  \n  \n### Description  \n This example consumes the assembly authored in C#.  \n  \n### Code  \n  \n```  \n// consuming_generics_from_other_NET_languages_2.cpp  \n// compile with: /clr  \n#using <consuming_generics_from_other_NET_languages.dll>  \nusing namespace System;  \nclass NativeClass {};  \nref class MgdClass {};  \n  \nint main() {  \n   CircularList<int>^ circ1 = gcnew CircularList<int>();  \n   CircularList<MgdClass^>^ circ2 = gcnew CircularList<MgdClass^>();  \n  \n   for (int i = 0 ; i < 100 ; i += 10)  \n      circ1->Add(i);  \n   circ1->Remove(50);  \n   circ1->PrintAll();  \n}  \n```  \n  \n### Output  \n  \n```  \n90  \n80  \n70  \n60  \n40  \n30  \n20  \n10  \n```  \n  \n## See Also  \n [Generics](../windows/generics-cpp-component-extensions.md)"}