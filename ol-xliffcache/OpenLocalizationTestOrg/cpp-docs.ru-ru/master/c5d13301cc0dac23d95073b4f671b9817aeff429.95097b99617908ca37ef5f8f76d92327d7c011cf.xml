{"nodes":[{"pos":[12,60],"content":"CUtlProps::OnInterfaceRequested | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CUtlProps::OnInterfaceRequested | Microsoft Docs","pos":[0,48]}]},{"content":"CUtlProps::OnInterfaceRequested","pos":[626,657]},{"content":"Handles requests for an optional interface when a consumer calls a method on one of the object creation interfaces.","pos":[658,773]},{"content":"Syntax","pos":[782,788]},{"content":"Parameters","pos":[900,910]},{"content":"[in] The IID for the requested interface.","pos":[924,965]},{"content":"For more details, see the description of the <ph id=\"ph1\">`riid`</ph> parameter of <ph id=\"ph2\">`ICommand::Execute`</ph> in the <bpt id=\"p1\">*</bpt>OLE DB Programmer's Reference<ept id=\"p1\">*</ept> (in the <bpt id=\"p2\">*</bpt>MDAC SDK<ept id=\"p2\">*</ept>).","pos":[966,1110],"source":" For more details, see the description of the `riid` parameter of `ICommand::Execute` in the *OLE DB Programmer's Reference* (in the *MDAC SDK*)."},{"content":"Remarks","pos":[1119,1126]},{"content":"<bpt id=\"p1\">**</bpt>OnInterfaceRequested<ept id=\"p1\">**</ept> handles consumer requests for an optional interface when a consumer calls a method on one of the object creation interfaces (such as <bpt id=\"p2\">**</bpt>IDBCreateSession<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>IDBCreateCommand<ept id=\"p3\">**</ept>, <ph id=\"ph1\">`IOpenRowset`</ph>, or <ph id=\"ph2\">`ICommand`</ph>).","pos":[1130,1362],"source":"**OnInterfaceRequested** handles consumer requests for an optional interface when a consumer calls a method on one of the object creation interfaces (such as **IDBCreateSession**, **IDBCreateCommand**, `IOpenRowset`, or `ICommand`)."},{"content":"It sets the corresponding OLE DB property for the requested interface.","pos":[1363,1433]},{"content":"For example, if the consumer requests <bpt id=\"p1\">**</bpt>IID_IRowsetLocate<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>OnInterfaceRequested<ept id=\"p2\">**</ept> sets the <bpt id=\"p3\">**</bpt>DBPROP_IRowsetLocate<ept id=\"p3\">**</ept> interface.","pos":[1434,1564],"source":" For example, if the consumer requests **IID_IRowsetLocate**, **OnInterfaceRequested** sets the **DBPROP_IRowsetLocate** interface."},{"content":"Doing so maintains the correct state during rowset creation.","pos":[1565,1625]},{"pos":[1632,1729],"content":"This method is called when the consumer calls <bpt id=\"p1\">**</bpt>IOpenRowset::OpenRowset<ept id=\"p1\">**</ept> or <ph id=\"ph1\">`ICommand::Execute`</ph>.","source":"This method is called when the consumer calls **IOpenRowset::OpenRowset** or `ICommand::Execute`."},{"content":"If a consumer opens an object and requests an optional interface, the provider should set the property associated with that interface to <ph id=\"ph1\">`VARIANT_TRUE`</ph>.","pos":[1736,1888],"source":"If a consumer opens an object and requests an optional interface, the provider should set the property associated with that interface to `VARIANT_TRUE`."},{"content":"To allow property-specific processing, <bpt id=\"p1\">**</bpt>OnInterfaceRequested<ept id=\"p1\">**</ept> is called before the provider's <bpt id=\"p2\">**</bpt>Execute<ept id=\"p2\">**</ept> method is called.","pos":[1889,2014],"source":" To allow property-specific processing, **OnInterfaceRequested** is called before the provider's **Execute** method is called."},{"content":"By default, <bpt id=\"p1\">**</bpt>OnInterfaceRequested<ept id=\"p1\">**</ept> handles the following interfaces:","pos":[2015,2085],"source":" By default, **OnInterfaceRequested** handles the following interfaces:"},{"content":"IConnectionPointContainer","pos":[2172,2197]},{"content":"If you wish to handle other interfaces, override this function in your data source, session, command, or rowset class to process functions.","pos":[2231,2370]},{"content":"Your override should go through the normal set/get properties interfaces to ensure that setting properties also sets any chained properties (see <bpt id=\"p1\">[</bpt>OnPropertyChanged<ept id=\"p1\">](../../data/oledb/cutlprops-onpropertychanged.md)</ept>).","pos":[2371,2586],"source":" Your override should go through the normal set/get properties interfaces to ensure that setting properties also sets any chained properties (see [OnPropertyChanged](../../data/oledb/cutlprops-onpropertychanged.md))."},{"content":"Requirements","pos":[2595,2607]},{"pos":[2611,2630],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atldb.h","source":"**Header:** atldb.h"},{"content":"See Also","pos":[2639,2647]},{"content":"CUtlProps Class","pos":[2652,2667]}],"content":"---\ntitle: \"CUtlProps::OnInterfaceRequested | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"CUtlProps\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"OnInterfaceRequested method\"\nms.assetid: a5e1a879-cff3-4e01-b902-2249a152984f\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CUtlProps::OnInterfaceRequested\nHandles requests for an optional interface when a consumer calls a method on one of the object creation interfaces.  \n  \n## Syntax  \n  \n```  \n  \n      virtual HRESULT CUtlPropsBase::OnInterfaceRequested(  \n   REFIID riid  \n);  \n```  \n  \n#### Parameters  \n `riid`  \n [in] The IID for the requested interface. For more details, see the description of the `riid` parameter of `ICommand::Execute` in the *OLE DB Programmer's Reference* (in the *MDAC SDK*).  \n  \n## Remarks  \n **OnInterfaceRequested** handles consumer requests for an optional interface when a consumer calls a method on one of the object creation interfaces (such as **IDBCreateSession**, **IDBCreateCommand**, `IOpenRowset`, or `ICommand`). It sets the corresponding OLE DB property for the requested interface. For example, if the consumer requests **IID_IRowsetLocate**, **OnInterfaceRequested** sets the **DBPROP_IRowsetLocate** interface. Doing so maintains the correct state during rowset creation.  \n  \n This method is called when the consumer calls **IOpenRowset::OpenRowset** or `ICommand::Execute`.  \n  \n If a consumer opens an object and requests an optional interface, the provider should set the property associated with that interface to `VARIANT_TRUE`. To allow property-specific processing, **OnInterfaceRequested** is called before the provider's **Execute** method is called. By default, **OnInterfaceRequested** handles the following interfaces:  \n  \n-   `IRowsetLocate`  \n  \n-   `IRowsetChange`  \n  \n-   `IRowsetUpdate`  \n  \n-   **IConnectionPointContainer**  \n  \n-   `IRowsetScroll`  \n  \n If you wish to handle other interfaces, override this function in your data source, session, command, or rowset class to process functions. Your override should go through the normal set/get properties interfaces to ensure that setting properties also sets any chained properties (see [OnPropertyChanged](../../data/oledb/cutlprops-onpropertychanged.md)).  \n  \n## Requirements  \n **Header:** atldb.h  \n  \n## See Also  \n [CUtlProps Class](../../data/oledb/cutlprops-class.md)"}