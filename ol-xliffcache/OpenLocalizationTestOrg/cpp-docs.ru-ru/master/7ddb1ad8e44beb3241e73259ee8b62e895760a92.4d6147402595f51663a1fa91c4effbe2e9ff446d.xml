{"nodes":[{"pos":[12,73],"content":"How to: Send a Message at a Regular Interval | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Send a Message at a Regular Interval | Microsoft Docs","pos":[0,61]}]},{"content":"How to: Send a Message at a Regular Interval","pos":[695,739]},{"pos":[740,889],"content":"This example shows how to use the concurrency::<bpt id=\"p1\">[</bpt>timer class<ept id=\"p1\">](../../parallel/concrt/reference/timer-class.md)</ept> to send a message at a regular interval.","source":"This example shows how to use the concurrency::[timer class](../../parallel/concrt/reference/timer-class.md) to send a message at a regular interval."},{"content":"Example","pos":[898,905]},{"content":"The following example uses a <ph id=\"ph1\">`timer`</ph> object to report progress during a lengthy operation.","pos":[910,1000],"source":"The following example uses a `timer` object to report progress during a lengthy operation."},{"content":"This example links the <ph id=\"ph1\">`timer`</ph> object to a <bpt id=\"p1\">[</bpt>concurrency::call<ept id=\"p1\">](../../parallel/concrt/reference/call-class.md)</ept> object.","pos":[1001,1118],"source":" This example links the `timer` object to a [concurrency::call](../../parallel/concrt/reference/call-class.md) object."},{"content":"The <ph id=\"ph1\">`call`</ph> object prints a progress indicator to the console at a regular interval.","pos":[1119,1202],"source":" The `call` object prints a progress indicator to the console at a regular interval."},{"content":"The <bpt id=\"p1\">[</bpt>concurrency::timer::start<ept id=\"p1\">](reference/timer-class.md#start)</ept> method runs the timer on a separate context.","pos":[1203,1311],"source":" The [concurrency::timer::start](reference/timer-class.md#start) method runs the timer on a separate context."},{"content":"The <ph id=\"ph1\">`perform_lengthy_operation`</ph> function calls the <bpt id=\"p1\">[</bpt>concurrency::wait<ept id=\"p1\">](reference/concurrency-namespace-functions.md#wait)</ept> function on the main context to simulate a time-consuming operation.","pos":[1312,1502],"source":" The `perform_lengthy_operation` function calls the [concurrency::wait](reference/concurrency-namespace-functions.md#wait) function on the main context to simulate a time-consuming operation."},{"pos":[1521,1545],"content":"concrt-report-progress#1"},{"content":"This example produces the following sample output:","pos":[1643,1693]},{"content":"Compiling the Code","pos":[1771,1789]},{"pos":[1793,1990],"content":"Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named <ph id=\"ph1\">`report-progress.cpp`</ph> and then run the following command in a Visual Studio Command Prompt window.","source":"Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named `report-progress.cpp` and then run the following command in a Visual Studio Command Prompt window."},{"content":"cl.exe /EHsc report-progress.cpp","pos":[1999,2031]},{"content":"See Also","pos":[2042,2050]},{"content":"Asynchronous Agents Library","pos":[2055,2082]},{"content":"Asynchronous Message Blocks","pos":[2143,2170]},{"content":"Message Passing Functions","pos":[2231,2256]}],"content":"---\ntitle: \"How to: Send a Message at a Regular Interval | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"timer class, example\"\n  - \"sending messages at regular intervals [Concurrency Runtime]\"\nms.assetid: 4b60ea6c-97c8-4d69-9f7b-ad79f3548026\ncaps.latest.revision: 19\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# How to: Send a Message at a Regular Interval\nThis example shows how to use the concurrency::[timer class](../../parallel/concrt/reference/timer-class.md) to send a message at a regular interval.  \n  \n## Example  \n\n The following example uses a `timer` object to report progress during a lengthy operation. This example links the `timer` object to a [concurrency::call](../../parallel/concrt/reference/call-class.md) object. The `call` object prints a progress indicator to the console at a regular interval. The [concurrency::timer::start](reference/timer-class.md#start) method runs the timer on a separate context. The `perform_lengthy_operation` function calls the [concurrency::wait](reference/concurrency-namespace-functions.md#wait) function on the main context to simulate a time-consuming operation.  \n\n  \n [!code-cpp[concrt-report-progress#1](../../parallel/concrt/codesnippet/cpp/how-to-send-a-message-at-a-regular-interval_1.cpp)]  \n  \n This example produces the following sample output:  \n  \n```Output  \nPerforming a lengthy operation..........done.  \n```  \n  \n## Compiling the Code  \n Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named `report-progress.cpp` and then run the following command in a Visual Studio Command Prompt window.  \n  \n **cl.exe /EHsc report-progress.cpp**  \n  \n## See Also  \n [Asynchronous Agents Library](../../parallel/concrt/asynchronous-agents-library.md)   \n [Asynchronous Message Blocks](../../parallel/concrt/asynchronous-message-blocks.md)   \n [Message Passing Functions](../../parallel/concrt/message-passing-functions.md)\n"}