{"nodes":[{"pos":[12,62],"content":"value_compare Class (&lt;map&gt;) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"value_compare Class (<ph id=\"ph1\">&amp;lt;</ph>map<ph id=\"ph2\">&amp;gt;</ph>) | Microsoft Docs","pos":[0,50],"source":"value_compare Class (&lt;map&gt;) | Microsoft Docs"}]},{"content":"value_compare Class (<ph id=\"ph1\">&amp;lt;</ph>map<ph id=\"ph2\">&amp;gt;</ph>)","pos":[703,736],"source":"value_compare Class (&lt;map&gt;)"},{"content":"Provides a function object that can compare the elements of a map by comparing the values of their keys to determine their relative order in the map.","pos":[737,886]},{"content":"Syntax","pos":[895,901]},{"content":"Remarks","pos":[1170,1177]},{"content":"The comparison criterion provided by <ph id=\"ph1\">`value_compare`</ph> between <bpt id=\"p1\">**</bpt>value_types<ept id=\"p1\">**</ept> of whole elements contained by a map is induced from a comparison between the keys of the respective elements by the auxiliary class construction.","pos":[1181,1404],"source":"The comparison criterion provided by `value_compare` between **value_types** of whole elements contained by a map is induced from a comparison between the keys of the respective elements by the auxiliary class construction."},{"content":"The member function operator uses the object <bpt id=\"p1\">**</bpt>comp<ept id=\"p1\">**</ept> of type <ph id=\"ph1\">`key_compare`</ph> stored in the function object provided by <ph id=\"ph2\">`value_compare`</ph> to compare the sort-key components of two elements.","pos":[1405,1590],"source":" The member function operator uses the object **comp** of type `key_compare` stored in the function object provided by `value_compare` to compare the sort-key components of two elements."},{"pos":[1597,1884],"content":"For sets and multisets, which are simple containers where the key values are identical to the element values, <ph id=\"ph1\">`value_compare`</ph> is equivalent to <ph id=\"ph2\">`key_compare`</ph>; for maps and multimaps they are not, as the value of the type <ph id=\"ph3\">`pair`</ph> elements is not identical to the value of the element's key.","source":"For sets and multisets, which are simple containers where the key values are identical to the element values, `value_compare` is equivalent to `key_compare`; for maps and multimaps they are not, as the value of the type `pair` elements is not identical to the value of the element's key."},{"content":"Example","pos":[1893,1900]},{"pos":[1905,2041],"content":"See example for <bpt id=\"p1\">[</bpt>value_comp<ept id=\"p1\">](../standard-library/map-class.md#map__value_comp)</ept> for an example of how to declare and use <ph id=\"ph1\">`value_compare`</ph>.","source":"See example for [value_comp](../standard-library/map-class.md#map__value_comp) for an example of how to declare and use `value_compare`."},{"content":"Requirements","pos":[2050,2062]},{"pos":[2066,2084],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>map&gt;","source":"**Header:** \\<map>"},{"pos":[2091,2109],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"content":"See Also","pos":[2118,2126]},{"content":"binary_function Struct","pos":[2131,2153]},{"content":"Thread Safety in the C++ Standard Library","pos":[2207,2248]},{"content":"C++ Standard Library Reference","pos":[2321,2351]}],"content":"---\ntitle: \"value_compare Class (&lt;map&gt;) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std::value_compare\"\n  - \"std.value_compare\"\n  - \"map/std::value_compare\"\n  - \"value_compare\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"value_compare class\"\nms.assetid: ea97c1d0-04b2-4d42-8d96-23522c04cc41\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# value_compare Class (&lt;map&gt;)\nProvides a function object that can compare the elements of a map by comparing the values of their keys to determine their relative order in the map.  \n  \n## Syntax  \n  \n```\nclass value_compare : public binary_function<value_type, value_type, bool>\n{\npublic:\n    bool operator()(const value_type& left, const value_type& right) const;\n    value_compare(key_compare pred) : comp(pred);\nprotected:\n    key_compare comp;\n};\n```  \n  \n## Remarks  \n The comparison criterion provided by `value_compare` between **value_types** of whole elements contained by a map is induced from a comparison between the keys of the respective elements by the auxiliary class construction. The member function operator uses the object **comp** of type `key_compare` stored in the function object provided by `value_compare` to compare the sort-key components of two elements.  \n  \n For sets and multisets, which are simple containers where the key values are identical to the element values, `value_compare` is equivalent to `key_compare`; for maps and multimaps they are not, as the value of the type `pair` elements is not identical to the value of the element's key.  \n  \n## Example  \n  See example for [value_comp](../standard-library/map-class.md#map__value_comp) for an example of how to declare and use `value_compare`.  \n  \n## Requirements  \n **Header:** \\<map>  \n  \n **Namespace:** std  \n  \n## See Also  \n [binary_function Struct](../standard-library/binary-function-struct.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}