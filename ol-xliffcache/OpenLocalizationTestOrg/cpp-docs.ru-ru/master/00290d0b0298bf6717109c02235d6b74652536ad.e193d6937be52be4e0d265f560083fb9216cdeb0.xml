{"nodes":[{"pos":[12,61],"content":"Compiler Warning (level 4) C4938 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Warning (level 4) C4938 | Microsoft Docs","pos":[0,49]}]},{"content":"Compiler Warning (level 4) C4938","pos":[630,662]},{"content":"'var' : Floating point reduction variable may cause inconsistent results under /fp:strict or #pragma fenv_access","pos":[663,775]},{"content":"You should not use <bpt id=\"p1\">[</bpt>/fp:strict<ept id=\"p1\">](../../build/reference/fp-specify-floating-point-behavior.md)</ept> or <bpt id=\"p2\">[</bpt>fenv_access<ept id=\"p2\">](../../preprocessor/fenv-access.md)</ept> with OpenMP floating-point reductions, because the sum is computed in a different order.","pos":[782,1015],"source":"You should not use [/fp:strict](../../build/reference/fp-specify-floating-point-behavior.md) or [fenv_access](../../preprocessor/fenv-access.md) with OpenMP floating-point reductions, because the sum is computed in a different order."},{"content":"Thus, results can differ from the results without /openmp.","pos":[1016,1074]},{"content":"The following sample generates C4938:","pos":[1081,1118]},{"content":"Without explicit parallelization, the sum is computed as follows:","pos":[1462,1527]},{"content":"With explicit parallelization (and two threads), the sum is computed as follows:","pos":[1599,1679]}],"content":"---\ntitle: \"Compiler Warning (level 4) C4938 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"C4938\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C4938\"\nms.assetid: 6acac81a-9d23-465e-b700-ed4b6e8edcd0\ncaps.latest.revision: 8\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Compiler Warning (level 4) C4938\n'var' : Floating point reduction variable may cause inconsistent results under /fp:strict or #pragma fenv_access  \n  \n You should not use [/fp:strict](../../build/reference/fp-specify-floating-point-behavior.md) or [fenv_access](../../preprocessor/fenv-access.md) with OpenMP floating-point reductions, because the sum is computed in a different order. Thus, results can differ from the results without /openmp.  \n  \n The following sample generates C4938:  \n  \n```  \n// C4938.cpp  \n// compile with: /openmp /W4 /fp:strict /c  \n// #pragma fenv_access(on)  \nextern double *a;   \n  \ndouble test(int first, int last) {   \n   double sum = 0.0;   \n   #pragma omp parallel for reduction(+: sum)   // C4938  \n   for (int i = first ; i <= last ; ++i)   \n      sum += a[i];   \n   return sum;   \n}  \n```  \n  \n Without explicit parallelization, the sum is computed as follows:  \n  \n```  \nsum = a[first] + a[first + 1] + ... + a[last];   \n```  \n  \n With explicit parallelization (and two threads), the sum is computed as follows:  \n  \n```  \nsum1 = a[first] + ... a[first + last / 2];   \nsum2 = a[(first + last / 2) + 1] + ... a[last];   \nsum = sum1 + sum2;  \n```"}