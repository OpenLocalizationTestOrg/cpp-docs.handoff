{"nodes":[{"pos":[12,43],"content":"duration Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"duration Class | Microsoft Docs","pos":[0,31]}]},{"pos":[573,587],"content":"duration Class","linkify":"duration Class","nodes":[{"content":"duration Class","pos":[0,14]}]},{"pos":[588,684],"content":"Describes a type that holds a <bpt id=\"p1\">*</bpt>time interval<ept id=\"p1\">*</ept>, which is an elapsed time between two time points.","source":"Describes a type that holds a *time interval*, which is an elapsed time between two time points."},{"pos":[693,699],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[949,956],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template argument <ph id=\"ph1\">`Rep`</ph> describes the type that is used to hold the number of clock ticks in the interval.","pos":[960,1070],"source":"The template argument `Rep` describes the type that is used to hold the number of clock ticks in the interval."},{"content":"The template argument <ph id=\"ph1\">`Period`</ph> is an instantiation of <bpt id=\"p1\">[</bpt>ratio<ept id=\"p1\">](../standard-library/ratio.md)</ept> that describes the size of the interval that each tick represents.","pos":[1071,1229],"source":" The template argument `Period` is an instantiation of [ratio](../standard-library/ratio.md) that describes the size of the interval that each tick represents."},{"pos":[1238,1245],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1255,1270],"content":"Public Typedefs","linkify":"Public Typedefs","nodes":[{"content":"Public Typedefs","pos":[0,15]}]},{"content":"Name","pos":[1277,1281]},{"content":"Description","pos":[1282,1293]},{"content":"duration::period Typedef","pos":[1331,1355]},{"pos":[1356,1413],"content":"Represents a synonym for the template parameter <ph id=\"ph1\">`Period`</ph>.","source":"Represents a synonym for the template parameter `Period`."},{"content":"duration::rep Typedef","pos":[1418,1439]},{"pos":[1440,1494],"content":"Represents a synonym for the template parameter <ph id=\"ph1\">`Rep`</ph>.","source":"Represents a synonym for the template parameter `Rep`."},{"pos":[1505,1524],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1531,1535]},{"content":"Description","pos":[1536,1547]},{"pos":[1585,1650],"content":"<bpt id=\"p1\">[</bpt>duration::duration Constructor<ept id=\"p1\">](#duration__duration_constructor)</ept>","source":"[duration::duration Constructor](#duration__duration_constructor)"},{"pos":[1651,1682],"content":"Constructs a <ph id=\"ph1\">`duration`</ph> object.","source":"Constructs a `duration` object."},{"pos":[1693,1707],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1714,1718]},{"content":"Description","pos":[1719,1730]},{"pos":[1768,1810],"content":"<bpt id=\"p1\">[</bpt>duration::count<ept id=\"p1\">](#duration__count_method)</ept>","source":"[duration::count](#duration__count_method)"},{"content":"Returns the number of clock ticks in the time interval.","pos":[1811,1866]},{"pos":[1871,1909],"content":"<bpt id=\"p1\">[</bpt>duration::max<ept id=\"p1\">](#duration__max_method)</ept>","source":"[duration::max](#duration__max_method)"},{"content":"Static.","pos":[1910,1917]},{"content":"Returns the maximum allowable value of template parameter <ph id=\"ph1\">`Ref`</ph>.","pos":[1918,1982],"source":" Returns the maximum allowable value of template parameter `Ref`."},{"pos":[1987,2025],"content":"<bpt id=\"p1\">[</bpt>duration::min<ept id=\"p1\">](#duration__min_method)</ept>","source":"[duration::min](#duration__min_method)"},{"content":"Static.","pos":[2026,2033]},{"content":"Returns the lowest allowable value of template parameter <ph id=\"ph1\">`Ref`</ph>.","pos":[2034,2097],"source":" Returns the lowest allowable value of template parameter `Ref`."},{"pos":[2102,2142],"content":"<bpt id=\"p1\">[</bpt>duration::zero<ept id=\"p1\">](#duration__zero_method)</ept>","source":"[duration::zero](#duration__zero_method)"},{"content":"Static.","pos":[2143,2150]},{"content":"In effect, returns <ph id=\"ph1\">`Rep`</ph>(0).","pos":[2151,2179],"source":" In effect, returns `Rep`(0)."},{"pos":[2190,2206],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[2213,2217]},{"content":"Description","pos":[2218,2229]},{"pos":[2267,2310],"content":"<bpt id=\"p1\">[</bpt>duration::operator-<ept id=\"p1\">](#duration__operator-)</ept>","source":"[duration::operator-](#duration__operator-)"},{"pos":[2311,2386],"content":"Returns a copy of the <ph id=\"ph1\">`duration`</ph> object together with a negated tick count.","source":"Returns a copy of the `duration` object together with a negated tick count."},{"pos":[2391,2436],"content":"<bpt id=\"p1\">[</bpt>duration::operator--<ept id=\"p1\">](#duration__operator--)</ept>","source":"[duration::operator--](#duration__operator--)"},{"content":"Decrements the stored tick count.","pos":[2437,2470]},{"pos":[2475,2520],"content":"<bpt id=\"p1\">[</bpt>duration::operator=<ept id=\"p1\">](#duration__operator_eq)</ept>","source":"[duration::operator=](#duration__operator_eq)"},{"content":"Reduces the stored tick count modulo a specified value.","pos":[2521,2576]},{"pos":[2581,2632],"content":"<bpt id=\"p1\">[</bpt>duration::operator*=<ept id=\"p1\">](#duration__operator_star_eq)</ept>","source":"[duration::operator*=](#duration__operator_star_eq)"},{"content":"Multiplies the stored tick count by a specified value.","pos":[2633,2687]},{"pos":[2692,2739],"content":"<bpt id=\"p1\">[</bpt>duration::operator/=<ept id=\"p1\">](#duration__operator__eq)</ept>","source":"[duration::operator/=](#duration__operator__eq)"},{"pos":[2740,2821],"content":"Divides the stored tick count by the tick count of a specified <ph id=\"ph1\">`duration`</ph> object.","source":"Divides the stored tick count by the tick count of a specified `duration` object."},{"pos":[2826,2872],"content":"<bpt id=\"p1\">[</bpt>duration::operator+<ept id=\"p1\">](#duration__operator_add)</ept>","source":"[duration::operator+](#duration__operator_add)"},{"pos":[2873,2889],"content":"Returns <ph id=\"ph1\">`*this`</ph>.","source":"Returns `*this`."},{"pos":[2894,2945],"content":"<bpt id=\"p1\">[</bpt>duration::operator++<ept id=\"p1\">](#duration__operator_add_add)</ept>","source":"[duration::operator++](#duration__operator_add_add)"},{"content":"Increments the stored tick count.","pos":[2946,2979]},{"pos":[2984,3034],"content":"<bpt id=\"p1\">[</bpt>duration::operator+=<ept id=\"p1\">](#duration__operator_add_eq)</ept>","source":"[duration::operator+=](#duration__operator_add_eq)"},{"pos":[3035,3113],"content":"Adds the tick count of a specified <ph id=\"ph1\">`duration`</ph> object to the stored tick count.","source":"Adds the tick count of a specified `duration` object to the stored tick count."},{"pos":[3118,3165],"content":"<bpt id=\"p1\">[</bpt>duration::operator-=<ept id=\"p1\">](#duration__operator-_eq)</ept>","source":"[duration::operator-=](#duration__operator-_eq)"},{"pos":[3166,3251],"content":"Subtracts the tick count of a specified <ph id=\"ph1\">`duration`</ph> object from the stored tick count.","source":"Subtracts the tick count of a specified `duration` object from the stored tick count."},{"pos":[3261,3273],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3277,3295],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> chrono","source":"**Header:** chrono"},{"pos":[3302,3328],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std::chrono","source":"**Namespace:** std::chrono"},{"pos":[3338,3392],"content":"<bpt id=\"p1\">&lt;a name=\"duration__count_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  duration::count","linkify":"<a name=\"duration__count_method\"></a>  duration::count","source":"<a name=\"duration__count_method\"></a>  duration::count"},{"content":"Retrieves the number of clock ticks in the time interval.","pos":[3396,3453]},{"pos":[3507,3519],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of clock ticks in the time interval.","pos":[3523,3570]},{"pos":[3580,3657],"content":"<bpt id=\"p1\">&lt;a name=\"duration__duration_constructor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  duration::duration Constructor","linkify":"<a name=\"duration__duration_constructor\"></a>  duration::duration Constructor","source":"<a name=\"duration__duration_constructor\"></a>  duration::duration Constructor"},{"pos":[3661,3692],"content":"Constructs a <ph id=\"ph1\">`duration`</ph> object.","source":"Constructs a `duration` object."},{"pos":[3919,3929],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An arithmetic type to represent the number of ticks.","pos":[3943,3995]},{"content":"A <ph id=\"ph1\">`std::ratio`</ph> template specialization to represent the tick period in units of seconds.","pos":[4015,4103],"source":" A `std::ratio` template specialization to represent the tick period in units of seconds."},{"content":"The number of ticks of default period.","pos":[4117,4155]},{"content":"The number of ticks of period specified by <ph id=\"ph1\">`Period2`</ph>.","pos":[4171,4224],"source":" The number of ticks of period specified by `Period2`."},{"pos":[4234,4241],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default constructor constructs an object that is uninitialized.","pos":[4245,4312]},{"content":"Value initialization by using empty braces initializes an object that represents a time interval of zero clock ticks.","pos":[4313,4430]},{"content":"The second, one template argument constructor constructs an object that represents a time interval of <ph id=\"ph1\">`R`</ph> clock ticks using a default period of <ph id=\"ph2\">`std::ratio&lt;1&gt;`</ph>.","pos":[4437,4597],"source":"The second, one template argument constructor constructs an object that represents a time interval of `R` clock ticks using a default period of `std::ratio<1>`."},{"content":"To avoid round-off of tick counts, it is an error to construct a duration object from a representation type <ph id=\"ph1\">`Rep2`</ph> that can be treated as a floating-point type when <ph id=\"ph2\">`duration::rep`</ph> cannot be treated as a floating-point type.","pos":[4598,4822],"source":" To avoid round-off of tick counts, it is an error to construct a duration object from a representation type `Rep2` that can be treated as a floating-point type when `duration::rep` cannot be treated as a floating-point type."},{"content":"The third, two template argument constructor constructs an object that represents a time interval whose length is the time interval that is specified by <ph id=\"ph1\">`Dur`</ph>.","pos":[4829,4988],"source":"The third, two template argument constructor constructs an object that represents a time interval whose length is the time interval that is specified by `Dur`."},{"content":"To avoid truncation of tick counts, it is an error to construct a duration object from another duration object whose type is <bpt id=\"p1\">*</bpt>incommensurable<ept id=\"p1\">*</ept> with the target type.","pos":[4989,5153],"source":" To avoid truncation of tick counts, it is an error to construct a duration object from another duration object whose type is *incommensurable* with the target type."},{"pos":[5160,5379],"content":"A duration type <ph id=\"ph1\">`D1`</ph> is <bpt id=\"p1\">*</bpt>incommensurable<ept id=\"p1\">*</ept> with another duration type <ph id=\"ph2\">`D2`</ph> if <ph id=\"ph3\">`D2`</ph> cannot be treated as a floating-point type and <bpt id=\"p2\">[</bpt>ratio_divide<ph id=\"ph4\">\\&lt;</ph>D1::period, D2::period&gt;::type::den<ept id=\"p2\">](../standard-library/ratio.md)</ept> is not 1.","source":"A duration type `D1` is *incommensurable* with another duration type `D2` if `D2` cannot be treated as a floating-point type and [ratio_divide\\<D1::period, D2::period>::type::den](../standard-library/ratio.md) is not 1."},{"content":"Unless <ph id=\"ph1\">`Rep2`</ph> is implicitly convertible to <ph id=\"ph2\">`rep`</ph> and either <ph id=\"ph3\">`treat_as_floating_point&lt;rep&gt;`</ph><bpt id=\"p1\">*</bpt>holds true<ept id=\"p1\">*</ept> or <ph id=\"ph4\">`treat_as_floating_point&lt;Rep2&gt;`</ph><bpt id=\"p2\">*</bpt>holds false<ept id=\"p2\">*</ept>, the second constructor does not participate in overload resolution.","pos":[5386,5605],"source":"Unless `Rep2` is implicitly convertible to `rep` and either `treat_as_floating_point<rep>`*holds true* or `treat_as_floating_point<Rep2>`*holds false*, the second constructor does not participate in overload resolution."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>&lt;type_traits&gt;<ept id=\"p1\">](../standard-library/type-traits.md)</ept>.","pos":[5606,5684],"source":" For more information, see [<type_traits>](../standard-library/type-traits.md)."},{"content":"Unless no overflow is induced in the conversion and <ph id=\"ph1\">`treat_as_floating_point&lt;rep&gt;`</ph><bpt id=\"p1\">*</bpt>holds true<ept id=\"p1\">*</ept>,  or both <ph id=\"ph2\">`ratio_divide&lt;Period2, period&gt;::den`</ph> equals 1 and <ph id=\"ph3\">`treat_as_floating_point&lt;Rep2&gt;`</ph><bpt id=\"p2\">*</bpt>holds false<ept id=\"p2\">*</ept>, the third constructor does not participate in overload resolution.","pos":[5691,5958],"source":"Unless no overflow is induced in the conversion and `treat_as_floating_point<rep>`*holds true*,  or both `ratio_divide<Period2, period>::den` equals 1 and `treat_as_floating_point<Rep2>`*holds false*, the third constructor does not participate in overload resolution."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>&lt;type_traits&gt;<ept id=\"p1\">](../standard-library/type-traits.md)</ept>.","pos":[5959,6037],"source":" For more information, see [<type_traits>](../standard-library/type-traits.md)."},{"pos":[6047,6097],"content":"<bpt id=\"p1\">&lt;a name=\"duration__max_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  duration::max","linkify":"<a name=\"duration__max_method\"></a>  duration::max","source":"<a name=\"duration__max_method\"></a>  duration::max"},{"pos":[6101,6188],"content":"Static method that returns the upper bound for values of template parameter type <ph id=\"ph1\">`Ref`</ph>.","source":"Static method that returns the upper bound for values of template parameter type `Ref`."},{"pos":[6246,6258],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6262,6321],"content":"In effect, returns <ph id=\"ph1\">`duration(duration_values&lt;rep&gt;::max())`</ph>.","source":"In effect, returns `duration(duration_values<rep>::max())`."},{"pos":[6331,6381],"content":"<bpt id=\"p1\">&lt;a name=\"duration__min_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  duration::min","linkify":"<a name=\"duration__min_method\"></a>  duration::min","source":"<a name=\"duration__min_method\"></a>  duration::min"},{"pos":[6385,6472],"content":"Static method that returns the lower bound for values of template parameter type <ph id=\"ph1\">`Ref`</ph>.","source":"Static method that returns the lower bound for values of template parameter type `Ref`."},{"pos":[6530,6542],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6546,6605],"content":"In effect, returns <ph id=\"ph1\">`duration(duration_values&lt;rep&gt;::min())`</ph>.","source":"In effect, returns `duration(duration_values<rep>::min())`."},{"pos":[6615,6670],"content":"<bpt id=\"p1\">&lt;a name=\"duration__operator-\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  duration::operator-","linkify":"<a name=\"duration__operator-\"></a>  duration::operator-","source":"<a name=\"duration__operator-\"></a>  duration::operator-"},{"pos":[6674,6749],"content":"Returns a copy of the <ph id=\"ph1\">`duration`</ph> object together with a negated tick count.","source":"Returns a copy of the `duration` object together with a negated tick count."},{"pos":[6812,6869],"content":"<bpt id=\"p1\">&lt;a name=\"duration__operator--\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  duration::operator--","linkify":"<a name=\"duration__operator--\"></a>  duration::operator--","source":"<a name=\"duration__operator--\"></a>  duration::operator--"},{"content":"Decrements the stored tick count.","pos":[6873,6906]},{"pos":[6982,6994],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6998,7031],"content":"The first method returns <ph id=\"ph1\">`*this`</ph>.","source":"The first method returns `*this`."},{"pos":[7038,7116],"content":"The second method returns a copy of <ph id=\"ph1\">`*this`</ph> that is made before the decrement.","source":"The second method returns a copy of `*this` that is made before the decrement."},{"pos":[7126,7183],"content":"<bpt id=\"p1\">&lt;a name=\"duration__operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  duration::operator=","linkify":"<a name=\"duration__operator_eq\"></a>  duration::operator=","source":"<a name=\"duration__operator_eq\"></a>  duration::operator="},{"content":"Reduces the stored tick count modulo a specified value.","pos":[7187,7242]},{"pos":[7349,7359],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"For the first method, <ph id=\"ph1\">`Div`</ph> represents a tick count.","pos":[7372,7424],"source":" For the first method, `Div` represents a tick count."},{"content":"For the second method, <ph id=\"ph1\">`Div`</ph> is a <ph id=\"ph2\">`duration`</ph> object that contains a tick count.","pos":[7425,7504],"source":" For the second method, `Div` is a `duration` object that contains a tick count."},{"pos":[7514,7526],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7530,7592],"content":"The <ph id=\"ph1\">`duration`</ph> object after the modulo operation is performed.","source":"The `duration` object after the modulo operation is performed."},{"pos":[7602,7665],"content":"<bpt id=\"p1\">&lt;a name=\"duration__operator_star_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  duration::operator*=","linkify":"<a name=\"duration__operator_star_eq\"></a>  duration::operator*=","source":"<a name=\"duration__operator_star_eq\"></a>  duration::operator*="},{"content":"Multiplies the stored tick count by a specified value.","pos":[7669,7723]},{"pos":[7787,7797],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A value of the type that is specified by <ph id=\"ph1\">`duration::rep`</ph>.","pos":[7811,7868],"source":" A value of the type that is specified by `duration::rep`."},{"pos":[7878,7890],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7894,7954],"content":"The <ph id=\"ph1\">`duration`</ph> object after the multiplication is performed.","source":"The `duration` object after the multiplication is performed."},{"pos":[7964,8023],"content":"<bpt id=\"p1\">&lt;a name=\"duration__operator__eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  duration::operator/=","linkify":"<a name=\"duration__operator__eq\"></a>  duration::operator/=","source":"<a name=\"duration__operator__eq\"></a>  duration::operator/="},{"content":"Divides the stored tick count by a specified value.","pos":[8027,8078]},{"pos":[8141,8151],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A value of the type that is specified by <ph id=\"ph1\">`duration::rep`</ph>.","pos":[8164,8221],"source":" A value of the type that is specified by `duration::rep`."},{"pos":[8231,8243],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8247,8301],"content":"The <ph id=\"ph1\">`duration`</ph> object after the division is performed.","source":"The `duration` object after the division is performed."},{"pos":[8311,8369],"content":"<bpt id=\"p1\">&lt;a name=\"duration__operator_add\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  duration::operator+","linkify":"<a name=\"duration__operator_add\"></a>  duration::operator+","source":"<a name=\"duration__operator_add\"></a>  duration::operator+"},{"pos":[8373,8389],"content":"Returns <ph id=\"ph1\">`*this`</ph>.","source":"Returns `*this`."},{"pos":[8452,8515],"content":"<bpt id=\"p1\">&lt;a name=\"duration__operator_add_add\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  duration::operator++","linkify":"<a name=\"duration__operator_add_add\"></a>  duration::operator++","source":"<a name=\"duration__operator_add_add\"></a>  duration::operator++"},{"content":"Increments the stored tick count.","pos":[8519,8552]},{"pos":[8628,8640],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8644,8677],"content":"The first method returns <ph id=\"ph1\">`*this`</ph>.","source":"The first method returns `*this`."},{"pos":[8684,8762],"content":"The second method returns a copy of <ph id=\"ph1\">`*this`</ph> that is made before the increment.","source":"The second method returns a copy of `*this` that is made before the increment."},{"pos":[8772,8834],"content":"<bpt id=\"p1\">&lt;a name=\"duration__operator_add_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  duration::operator+=","linkify":"<a name=\"duration__operator_add_eq\"></a>  duration::operator+=","source":"<a name=\"duration__operator_add_eq\"></a>  duration::operator+="},{"pos":[8838,8916],"content":"Adds the tick count of a specified <ph id=\"ph1\">`duration`</ph> object to the stored tick count.","source":"Adds the tick count of a specified `duration` object to the stored tick count."},{"pos":[8984,8994],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <ph id=\"ph1\">`duration`</ph> object.","pos":[9007,9027],"source":" A `duration` object."},{"pos":[9037,9049],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[9053,9107],"content":"The <ph id=\"ph1\">`duration`</ph> object after the addition is performed.","source":"The `duration` object after the addition is performed."},{"pos":[9117,9176],"content":"<bpt id=\"p1\">&lt;a name=\"duration__operator-_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  duration::operator-=","linkify":"<a name=\"duration__operator-_eq\"></a>  duration::operator-=","source":"<a name=\"duration__operator-_eq\"></a>  duration::operator-="},{"pos":[9180,9265],"content":"Subtracts the tick count of a specified <ph id=\"ph1\">`duration`</ph> object from the stored tick count.","source":"Subtracts the tick count of a specified `duration` object from the stored tick count."},{"pos":[9333,9343],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <ph id=\"ph1\">`duration`</ph> object.","pos":[9356,9376],"source":" A `duration` object."},{"pos":[9386,9398],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[9402,9459],"content":"The <ph id=\"ph1\">`duration`</ph> object after the subtraction is performed.","source":"The `duration` object after the subtraction is performed."},{"pos":[9469,9521],"content":"<bpt id=\"p1\">&lt;a name=\"duration__zero_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  duration::zero","linkify":"<a name=\"duration__zero_method\"></a>  duration::zero","source":"<a name=\"duration__zero_method\"></a>  duration::zero"},{"pos":[9525,9574],"content":"Returns <ph id=\"ph1\">`duration(duration_values&lt;rep&gt;::zero())`</ph>.","source":"Returns `duration(duration_values<rep>::zero())`."},{"pos":[9633,9698],"content":"<bpt id=\"p1\">&lt;a name=\"duration__operator_mod_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  duration::operator mod=","linkify":"<a name=\"duration__operator_mod_eq\"></a>  duration::operator mod=","source":"<a name=\"duration__operator_mod_eq\"></a>  duration::operator mod="},{"content":"Reduces the stored tick count modulo Div or Div.count().","pos":[9702,9758]},{"pos":[9863,9873],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The divisor, which is either a duration object or a value that represents tick counts.","pos":[9886,9972]},{"pos":[9982,9989],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The first member function reduces the stored tick count modulo Div and returns *this.","pos":[9993,10078]},{"content":"The second member function reduces the stored tick count modulo Div.count() and returns <ph id=\"ph1\">\\*</ph>this.","pos":[10079,10174],"source":" The second member function reduces the stored tick count modulo Div.count() and returns \\*this."},{"pos":[10183,10191],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Header Files Reference<ept id=\"p1\">](../standard-library/cpp-standard-library-header-files.md)</ept><ph id=\"ph1\"> </ph>","pos":[10195,10278],"source":"[Header Files Reference](../standard-library/cpp-standard-library-header-files.md) "},{"content":"<bpt id=\"p1\"> [</bpt><ph id=\"ph1\">\\&lt;</ph>chrono&gt;<ept id=\"p1\">](../standard-library/chrono.md)</ept><ph id=\"ph2\"> </ph>","pos":[10281,10325],"source":" [\\<chrono>](../standard-library/chrono.md) "},{"content":"<bpt id=\"p1\"> [</bpt>duration_values Structure<ept id=\"p1\">](../standard-library/duration-values-structure.md)</ept>","pos":[10328,10406],"source":" [duration_values Structure](../standard-library/duration-values-structure.md)"}],"content":"---\ntitle: \"duration Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"chrono/std::chrono::duration\"\ndev_langs: \n  - \"C++\"\nms.assetid: 06b863b3-65be-4ded-a72e-6e1eb1531077\ncaps.latest.revision: 10\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# duration Class\nDescribes a type that holds a *time interval*, which is an elapsed time between two time points.  \n  \n## Syntax  \n  \n```  \ntemplate <class Rep, class Period = ratio<1>>  \nclass duration;  \ntemplate <class Rep, class Period>  \nclass duration;  \ntemplate <class Rep, class Period1, class Period2>  \nclass duration <duration<Rep, Period1>, Period2>;  \n```  \n  \n## Remarks  \n The template argument `Rep` describes the type that is used to hold the number of clock ticks in the interval. The template argument `Period` is an instantiation of [ratio](../standard-library/ratio.md) that describes the size of the interval that each tick represents.  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|duration::period Typedef|Represents a synonym for the template parameter `Period`.|  \n|duration::rep Typedef|Represents a synonym for the template parameter `Rep`.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[duration::duration Constructor](#duration__duration_constructor)|Constructs a `duration` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[duration::count](#duration__count_method)|Returns the number of clock ticks in the time interval.|  \n|[duration::max](#duration__max_method)|Static. Returns the maximum allowable value of template parameter `Ref`.|  \n|[duration::min](#duration__min_method)|Static. Returns the lowest allowable value of template parameter `Ref`.|  \n|[duration::zero](#duration__zero_method)|Static. In effect, returns `Rep`(0).|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[duration::operator-](#duration__operator-)|Returns a copy of the `duration` object together with a negated tick count.|  \n|[duration::operator--](#duration__operator--)|Decrements the stored tick count.|  \n|[duration::operator=](#duration__operator_eq)|Reduces the stored tick count modulo a specified value.|  \n|[duration::operator*=](#duration__operator_star_eq)|Multiplies the stored tick count by a specified value.|  \n|[duration::operator/=](#duration__operator__eq)|Divides the stored tick count by the tick count of a specified `duration` object.|  \n|[duration::operator+](#duration__operator_add)|Returns `*this`.|  \n|[duration::operator++](#duration__operator_add_add)|Increments the stored tick count.|  \n|[duration::operator+=](#duration__operator_add_eq)|Adds the tick count of a specified `duration` object to the stored tick count.|  \n|[duration::operator-=](#duration__operator-_eq)|Subtracts the tick count of a specified `duration` object from the stored tick count.|  \n  \n## Requirements  \n **Header:** chrono  \n  \n **Namespace:** std::chrono  \n  \n##  <a name=\"duration__count_method\"></a>  duration::count  \n Retrieves the number of clock ticks in the time interval.  \n  \n```  \nconstexpr Rep count() const;\n```  \n  \n### Return Value  \n The number of clock ticks in the time interval.  \n  \n##  <a name=\"duration__duration_constructor\"></a>  duration::duration Constructor  \n Constructs a `duration` object.  \n  \n```  \nconstexpr duration() = default;  \n \ntemplate <class Rep2>  \nconstexpr explicit duration(const Rep2& R);\n\n \ntemplate <class Rep2, class Period2>  \nconstexpr duration(const duration<Rep2, Period2>& Dur);\n```  \n  \n### Parameters  \n `Rep2`  \n An arithmetic type to represent the number of ticks.  \n  \n `Period2`  \n A `std::ratio` template specialization to represent the tick period in units of seconds.  \n  \n `R`  \n The number of ticks of default period.  \n  \n `Dur`  \n The number of ticks of period specified by `Period2`.  \n  \n### Remarks  \n The default constructor constructs an object that is uninitialized. Value initialization by using empty braces initializes an object that represents a time interval of zero clock ticks.  \n  \n The second, one template argument constructor constructs an object that represents a time interval of `R` clock ticks using a default period of `std::ratio<1>`. To avoid round-off of tick counts, it is an error to construct a duration object from a representation type `Rep2` that can be treated as a floating-point type when `duration::rep` cannot be treated as a floating-point type.  \n  \n The third, two template argument constructor constructs an object that represents a time interval whose length is the time interval that is specified by `Dur`. To avoid truncation of tick counts, it is an error to construct a duration object from another duration object whose type is *incommensurable* with the target type.  \n  \n A duration type `D1` is *incommensurable* with another duration type `D2` if `D2` cannot be treated as a floating-point type and [ratio_divide\\<D1::period, D2::period>::type::den](../standard-library/ratio.md) is not 1.  \n  \n Unless `Rep2` is implicitly convertible to `rep` and either `treat_as_floating_point<rep>`*holds true* or `treat_as_floating_point<Rep2>`*holds false*, the second constructor does not participate in overload resolution. For more information, see [<type_traits>](../standard-library/type-traits.md).  \n  \n Unless no overflow is induced in the conversion and `treat_as_floating_point<rep>`*holds true*,  or both `ratio_divide<Period2, period>::den` equals 1 and `treat_as_floating_point<Rep2>`*holds false*, the third constructor does not participate in overload resolution. For more information, see [<type_traits>](../standard-library/type-traits.md).  \n  \n##  <a name=\"duration__max_method\"></a>  duration::max  \n Static method that returns the upper bound for values of template parameter type `Ref`.  \n  \n```  \nstatic constexpr duration max();\n```  \n  \n### Return Value  \n In effect, returns `duration(duration_values<rep>::max())`.  \n  \n##  <a name=\"duration__min_method\"></a>  duration::min  \n Static method that returns the lower bound for values of template parameter type `Ref`.  \n  \n```  \nstatic constexpr duration min();\n```  \n  \n### Return Value  \n In effect, returns `duration(duration_values<rep>::min())`.  \n  \n##  <a name=\"duration__operator-\"></a>  duration::operator-  \n Returns a copy of the `duration` object together with a negated tick count.  \n  \n```  \nconstexpr duration operator-() const;\n```  \n  \n##  <a name=\"duration__operator--\"></a>  duration::operator--  \n Decrements the stored tick count.  \n  \n```  \nduration& operator--();\n\nduration operator--(int);\n```  \n  \n### Return Value  \n The first method returns `*this`.  \n  \n The second method returns a copy of `*this` that is made before the decrement.  \n  \n##  <a name=\"duration__operator_eq\"></a>  duration::operator=  \n Reduces the stored tick count modulo a specified value.  \n  \n```  \nduration& operator%=(const rep& Div);\n\nduration& operator%=(const duration& Div);\n```  \n  \n### Parameters  \n `Div`  \n For the first method, `Div` represents a tick count. For the second method, `Div` is a `duration` object that contains a tick count.  \n  \n### Return Value  \n The `duration` object after the modulo operation is performed.  \n  \n##  <a name=\"duration__operator_star_eq\"></a>  duration::operator*=  \n Multiplies the stored tick count by a specified value.  \n  \n```  \nduration& operator*=(const rep& Mult);\n```  \n  \n### Parameters  \n `Mult`  \n A value of the type that is specified by `duration::rep`.  \n  \n### Return Value  \n The `duration` object after the multiplication is performed.  \n  \n##  <a name=\"duration__operator__eq\"></a>  duration::operator/=  \n Divides the stored tick count by a specified value.  \n  \n```  \nduration& operator/=(const rep& Div);\n```  \n  \n### Parameters  \n `Div`  \n A value of the type that is specified by `duration::rep`.  \n  \n### Return Value  \n The `duration` object after the division is performed.  \n  \n##  <a name=\"duration__operator_add\"></a>  duration::operator+  \n Returns `*this`.  \n  \n```  \nconstexpr duration operator+() const;\n```  \n  \n##  <a name=\"duration__operator_add_add\"></a>  duration::operator++  \n Increments the stored tick count.  \n  \n```  \nduration& operator++();\n\nduration operator++(int);\n```  \n  \n### Return Value  \n The first method returns `*this`.  \n  \n The second method returns a copy of `*this` that is made before the increment.  \n  \n##  <a name=\"duration__operator_add_eq\"></a>  duration::operator+=  \n Adds the tick count of a specified `duration` object to the stored tick count.  \n  \n```  \nduration& operator+=(const duration& Dur);\n```  \n  \n### Parameters  \n `Dur`  \n A `duration` object.  \n  \n### Return Value  \n The `duration` object after the addition is performed.  \n  \n##  <a name=\"duration__operator-_eq\"></a>  duration::operator-=  \n Subtracts the tick count of a specified `duration` object from the stored tick count.  \n  \n```  \nduration& operator-=(const duration& Dur);\n```  \n  \n### Parameters  \n `Dur`  \n A `duration` object.  \n  \n### Return Value  \n The `duration` object after the subtraction is performed.  \n  \n##  <a name=\"duration__zero_method\"></a>  duration::zero  \n Returns `duration(duration_values<rep>::zero())`.  \n  \n```  \nstatic constexpr duration zero();\n```  \n  \n##  <a name=\"duration__operator_mod_eq\"></a>  duration::operator mod=  \n Reduces the stored tick count modulo Div or Div.count().  \n  \n```  \nduration& operator%=(const rep& Div);duration& operator%=(const duration& Div);\n```  \n  \n### Parameters  \n `Div`  \n The divisor, which is either a duration object or a value that represents tick counts.  \n  \n### Remarks  \n The first member function reduces the stored tick count modulo Div and returns *this. The second member function reduces the stored tick count modulo Div.count() and returns \\*this.  \n  \n## See Also  \n [Header Files Reference](../standard-library/cpp-standard-library-header-files.md)   \n [\\<chrono>](../standard-library/chrono.md)   \n [duration_values Structure](../standard-library/duration-values-structure.md)\n"}