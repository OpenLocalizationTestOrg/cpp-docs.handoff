{"nodes":[{"pos":[12,70],"content":"Rules and Limitations for Naked Functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Rules and Limitations for Naked Functions | Microsoft Docs","pos":[0,58]}]},{"content":"Rules and Limitations for Naked Functions","pos":[605,646]},{"content":"Microsoft Specific","pos":[650,668]},{"content":"The following rules and limitations apply to naked functions:","pos":[672,733]},{"pos":[743,783],"content":"The <ph id=\"ph1\">`return`</ph> statement is not permitted.","source":"The `return` statement is not permitted."},{"content":"Structured Exception Handling and C++ Exception Handling constructs are not permitted because they must unwind across the stack frame.","pos":[793,927]},{"pos":[937,993],"content":"For the same reason, any form of <ph id=\"ph1\">`setjmp`</ph> is prohibited.","source":"For the same reason, any form of `setjmp` is prohibited."},{"pos":[1003,1047],"content":"Use of the <ph id=\"ph1\">`_alloca`</ph> function is prohibited.","source":"Use of the `_alloca` function is prohibited."},{"content":"To ensure that no initialization code for local variables appears before the prolog sequence, initialized local variables are not permitted at function scope.","pos":[1057,1215]},{"content":"In particular, the declaration of C++ objects is not permitted at function scope.","pos":[1216,1297]},{"content":"There may, however, be initialized data in a nested scope.","pos":[1298,1356]},{"content":"Frame pointer optimization (the /Oy compiler option) is not recommended, but it is automatically suppressed for a naked function.","pos":[1366,1495]},{"content":"You cannot declare C++ class objects at the function lexical scope.","pos":[1505,1572]},{"content":"You can, however, declare objects in a nested block.","pos":[1573,1625]},{"pos":[1635,1756],"content":"The <ph id=\"ph1\">`naked`</ph> keyword is ignored when compiling with <bpt id=\"p1\">[</bpt>/clr<ept id=\"p1\">](../build/reference/clr-common-language-runtime-compilation.md)</ept>.","source":"The `naked` keyword is ignored when compiling with [/clr](../build/reference/clr-common-language-runtime-compilation.md)."},{"content":"For <bpt id=\"p1\">[</bpt>__fastcall<ept id=\"p1\">](../cpp/fastcall.md)</ept> naked functions, whenever there is a reference in C/C++ code to one of the register arguments, the prolog code should store the values of that register into the stack location for that variable.","pos":[1766,1997],"source":"For [__fastcall](../cpp/fastcall.md) naked functions, whenever there is a reference in C/C++ code to one of the register arguments, the prolog code should store the values of that register into the stack location for that variable."},{"content":"For example:","pos":[1998,2010]},{"content":"END Microsoft Specific","pos":[2650,2672]},{"content":"See Also","pos":[2681,2689]},{"content":"Naked Function Calls","pos":[2694,2714]}],"content":"---\ntitle: \"Rules and Limitations for Naked Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"naked functions\"\nms.assetid: ff203858-2dd3-4a76-8a57-d0d06817adef\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Rules and Limitations for Naked Functions\n## Microsoft Specific  \n The following rules and limitations apply to naked functions:  \n  \n-   The `return` statement is not permitted.  \n  \n-   Structured Exception Handling and C++ Exception Handling constructs are not permitted because they must unwind across the stack frame.  \n  \n-   For the same reason, any form of `setjmp` is prohibited.  \n  \n-   Use of the `_alloca` function is prohibited.  \n  \n-   To ensure that no initialization code for local variables appears before the prolog sequence, initialized local variables are not permitted at function scope. In particular, the declaration of C++ objects is not permitted at function scope. There may, however, be initialized data in a nested scope.  \n  \n-   Frame pointer optimization (the /Oy compiler option) is not recommended, but it is automatically suppressed for a naked function.  \n  \n-   You cannot declare C++ class objects at the function lexical scope. You can, however, declare objects in a nested block.  \n  \n-   The `naked` keyword is ignored when compiling with [/clr](../build/reference/clr-common-language-runtime-compilation.md).  \n  \n-   For [__fastcall](../cpp/fastcall.md) naked functions, whenever there is a reference in C/C++ code to one of the register arguments, the prolog code should store the values of that register into the stack location for that variable. For example:  \n  \n```  \n// nkdfastcl.cpp  \n// compile with: /c  \n// processor: x86  \n__declspec(naked) int __fastcall  power(int i, int j) {  \n   // calculates i^j, assumes that j >= 0  \n  \n   // prolog  \n   __asm {  \n      push ebp  \n      mov ebp, esp  \n      sub esp, __LOCAL_SIZE  \n     // store ECX and EDX into stack locations allocated for i and j  \n     mov i, ecx  \n     mov j, edx  \n   }  \n  \n   {  \n      int k = 1;   // return value  \n      while (j-- > 0)   \n         k *= i;  \n      __asm {   \n         mov eax, k   \n      };  \n   }  \n  \n   // epilog  \n   __asm {  \n      mov esp, ebp  \n      pop ebp  \n      ret  \n   }  \n}  \n```  \n  \n## END Microsoft Specific  \n  \n## See Also  \n [Naked Function Calls](../cpp/naked-function-calls.md)"}