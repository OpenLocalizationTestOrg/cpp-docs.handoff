{"nodes":[{"pos":[12,40],"content":"CRect Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CRect Class | Microsoft Docs","pos":[0,28]}]},{"content":"CRect Class","pos":[656,667]},{"pos":[668,746],"content":"Similar to a Windows <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](../../mfc/reference/rect-structure1.md)</ept> structure.","source":"Similar to a Windows [RECT](../../mfc/reference/rect-structure1.md) structure."},{"content":"Syntax","pos":[755,761]},{"content":"Members","pos":[816,823]},{"content":"Public Constructors","pos":[833,852]},{"content":"Name","pos":[859,863]},{"content":"Description","pos":[864,875]},{"content":"CRect::CRect","pos":[914,926]},{"pos":[943,971],"content":"Constructs a <ph id=\"ph1\">`CRect`</ph> object.","source":"Constructs a `CRect` object."},{"content":"Public Methods","pos":[982,996]},{"content":"Name","pos":[1003,1007]},{"content":"Description","pos":[1008,1019]},{"content":"CRect::BottomRight","pos":[1058,1076]},{"pos":[1099,1141],"content":"Returns the bottom-right point of <ph id=\"ph1\">`CRect`</ph>.","source":"Returns the bottom-right point of `CRect`."},{"content":"CRect::CenterPoint","pos":[1147,1165]},{"pos":[1188,1223],"content":"Returns the centerpoint of <ph id=\"ph1\">`CRect`</ph>.","source":"Returns the centerpoint of `CRect`."},{"content":"CRect::CopyRect","pos":[1229,1244]},{"pos":[1264,1319],"content":"Copies the dimensions of a source rectangle to <ph id=\"ph1\">`CRect`</ph>.","source":"Copies the dimensions of a source rectangle to `CRect`."},{"content":"CRect::DeflateRect","pos":[1325,1343]},{"pos":[1366,1408],"content":"Decreases the width and height of <ph id=\"ph1\">`CRect`</ph>.","source":"Decreases the width and height of `CRect`."},{"content":"CRect::EqualRect","pos":[1414,1430]},{"pos":[1451,1510],"content":"Determines whether <ph id=\"ph1\">`CRect`</ph> is equal to the given rectangle.","source":"Determines whether `CRect` is equal to the given rectangle."},{"content":"CRect::Height","pos":[1516,1529]},{"pos":[1547,1580],"content":"Calculates the height of <ph id=\"ph1\">`CRect`</ph>.","source":"Calculates the height of `CRect`."},{"content":"CRect::InflateRect","pos":[1586,1604]},{"pos":[1627,1669],"content":"Increases the width and height of <ph id=\"ph1\">`CRect`</ph>.","source":"Increases the width and height of `CRect`."},{"content":"CRect::IntersectRect","pos":[1675,1695]},{"pos":[1720,1777],"content":"Sets <ph id=\"ph1\">`CRect`</ph> equal to the intersection of two rectangles.","source":"Sets `CRect` equal to the intersection of two rectangles."},{"content":"CRect::IsRectEmpty","pos":[1783,1801]},{"content":"Determines whether <ph id=\"ph1\">`CRect`</ph> is empty.","pos":[1824,1860],"source":"Determines whether `CRect` is empty."},{"content":"is empty if the width and/or height are 0.","pos":[1869,1911]},{"content":"CRect::IsRectNull","pos":[1917,1934]},{"pos":[1956,2060],"content":"Determines whether the <bpt id=\"p1\">**</bpt>top<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>bottom<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>left<ept id=\"p3\">**</ept>, and <bpt id=\"p4\">**</bpt>right<ept id=\"p4\">**</ept> member variables are all equal to 0.","source":"Determines whether the **top**, **bottom**, **left**, and **right** member variables are all equal to 0."},{"content":"CRect::MoveToX","pos":[2066,2080]},{"pos":[2099,2143],"content":"Moves <ph id=\"ph1\">`CRect`</ph> to the specified x-coordinate.","source":"Moves `CRect` to the specified x-coordinate."},{"content":"CRect::MoveToXY","pos":[2149,2164]},{"pos":[2184,2236],"content":"Moves <ph id=\"ph1\">`CRect`</ph> to the specified x- and y-coordinates.","source":"Moves `CRect` to the specified x- and y-coordinates."},{"content":"CRect::MoveToY","pos":[2242,2256]},{"pos":[2275,2319],"content":"Moves <ph id=\"ph1\">`CRect`</ph> to the specified y-coordinate.","source":"Moves `CRect` to the specified y-coordinate."},{"content":"CRect::NormalizeRect","pos":[2325,2345]},{"pos":[2370,2415],"content":"Standardizes the height and width of <ph id=\"ph1\">`CRect`</ph>.","source":"Standardizes the height and width of `CRect`."},{"content":"CRect::OffsetRect","pos":[2421,2438]},{"pos":[2460,2499],"content":"Moves <ph id=\"ph1\">`CRect`</ph> by the specified offsets.","source":"Moves `CRect` by the specified offsets."},{"content":"CRect::PtInRect","pos":[2505,2520]},{"pos":[2540,2599],"content":"Determines whether the specified point lies within <ph id=\"ph1\">`CRect`</ph>.","source":"Determines whether the specified point lies within `CRect`."},{"content":"CRect::SetRect","pos":[2605,2619]},{"pos":[2638,2669],"content":"Sets the dimensions of <ph id=\"ph1\">`CRect`</ph>.","source":"Sets the dimensions of `CRect`."},{"content":"CRect::SetRectEmpty","pos":[2675,2694]},{"pos":[2718,2782],"content":"Sets <ph id=\"ph1\">`CRect`</ph> to an empty rectangle (all coordinates equal to 0).","source":"Sets `CRect` to an empty rectangle (all coordinates equal to 0)."},{"content":"CRect::Size","pos":[2788,2799]},{"pos":[2815,2846],"content":"Calculates the size of <ph id=\"ph1\">`CRect`</ph>.","source":"Calculates the size of `CRect`."},{"content":"CRect::SubtractRect","pos":[2852,2871]},{"content":"Subtracts one rectangle from another.","pos":[2895,2932]},{"content":"CRect::TopLeft","pos":[2938,2952]},{"pos":[2971,3009],"content":"Returns the top-left point of <ph id=\"ph1\">`CRect`</ph>.","source":"Returns the top-left point of `CRect`."},{"content":"CRect::UnionRect","pos":[3015,3031]},{"pos":[3052,3102],"content":"Sets <ph id=\"ph1\">`CRect`</ph> equal to the union of two rectangles.","source":"Sets `CRect` equal to the union of two rectangles."},{"content":"CRect::Width","pos":[3108,3120]},{"pos":[3137,3169],"content":"Calculates the width of <ph id=\"ph1\">`CRect`</ph>.","source":"Calculates the width of `CRect`."},{"content":"Public Operators","pos":[3180,3196]},{"content":"Name","pos":[3203,3207]},{"content":"Description","pos":[3208,3219]},{"content":"CRect::operator -","pos":[3258,3275]},{"pos":[3297,3392],"content":"Subtracts the given offsets from <ph id=\"ph1\">`CRect`</ph> or deflates <ph id=\"ph2\">`CRect`</ph> and returns the resulting <ph id=\"ph3\">`CRect`</ph>.","source":"Subtracts the given offsets from `CRect` or deflates `CRect` and returns the resulting `CRect`."},{"content":"CRect::operator LPCRECT","pos":[3398,3421]},{"pos":[3449,3486],"content":"Converts a <ph id=\"ph1\">`CRect`</ph> to an <bpt id=\"p1\">**</bpt>LPCRECT<ept id=\"p1\">**</ept>.","source":"Converts a `CRect` to an **LPCRECT**."},{"content":"CRect::operator LPRECT","pos":[3492,3514]},{"pos":[3541,3575],"content":"Converts a <ph id=\"ph1\">`CRect`</ph> to an <ph id=\"ph2\">`LPRECT`</ph>.","source":"Converts a `CRect` to an `LPRECT`."},{"content":"CRect::operator !=","pos":[3581,3599]},{"pos":[3624,3679],"content":"Determines whether <ph id=\"ph1\">`CRect`</ph> is not equal to a rectangle.","source":"Determines whether `CRect` is not equal to a rectangle."},{"content":"CRect::operator","pos":[3685,3700]},{"pos":[3732,3818],"content":"Creates the intersection of <ph id=\"ph1\">`CRect`</ph> and a rectangle and returns the resulting <ph id=\"ph2\">`CRect`</ph>.","source":"Creates the intersection of `CRect` and a rectangle and returns the resulting `CRect`."},{"content":"CRect::operator","pos":[3824,3839]},{"pos":[3875,3941],"content":"Sets <ph id=\"ph1\">`CRect`</ph> equal to the intersection of <ph id=\"ph2\">`CRect`</ph> and a rectangle.","source":"Sets `CRect` equal to the intersection of `CRect` and a rectangle."},{"content":"[CRect::operator","pos":[3946,3962]},{"content":"](#crect__operator__or)","pos":[3964,3987]},{"pos":[3988,4067],"content":"Creates the union of <ph id=\"ph1\">`CRect`</ph> and a rectangle and returns the resulting <ph id=\"ph2\">`CRect`</ph>.","source":"Creates the union of `CRect` and a rectangle and returns the resulting `CRect`."},{"content":"[CRect::operator","pos":[4072,4088]},{"content":"=](#crect__operator__or_eq)","pos":[4090,4117]},{"pos":[4118,4177],"content":"Sets <ph id=\"ph1\">`CRect`</ph> equal to the union of <ph id=\"ph2\">`CRect`</ph> and a rectangle.","source":"Sets `CRect` equal to the union of `CRect` and a rectangle."},{"content":"CRect::operator +","pos":[4183,4200]},{"pos":[4225,4313],"content":"Adds the given offsets to <ph id=\"ph1\">`CRect`</ph> or inflates <ph id=\"ph2\">`CRect`</ph> and returns the resulting <ph id=\"ph3\">`CRect`</ph>.","source":"Adds the given offsets to `CRect` or inflates `CRect` and returns the resulting `CRect`."},{"content":"CRect::operator +=","pos":[4319,4337]},{"pos":[4365,4423],"content":"Adds the specified offsets to <ph id=\"ph1\">`CRect`</ph> or inflates <ph id=\"ph2\">`CRect`</ph>.","source":"Adds the specified offsets to `CRect` or inflates `CRect`."},{"content":"CRect::operator =","pos":[4429,4446]},{"pos":[4470,4518],"content":"Copies the dimensions of a rectangle to <ph id=\"ph1\">`CRect`</ph>.","source":"Copies the dimensions of a rectangle to `CRect`."},{"content":"CRect::operator -=","pos":[4524,4542]},{"pos":[4567,4632],"content":"Subtracts the specified offsets from <ph id=\"ph1\">`CRect`</ph> or deflates <ph id=\"ph2\">`CRect`</ph>.","source":"Subtracts the specified offsets from `CRect` or deflates `CRect`."},{"content":"CRect::operator ==","pos":[4638,4656]},{"pos":[4683,4734],"content":"Determines whether <ph id=\"ph1\">`CRect`</ph> is equal to a rectangle.","source":"Determines whether `CRect` is equal to a rectangle."},{"content":"Remarks","pos":[4744,4751]},{"pos":[4763,4854],"content":"also includes member functions to manipulate <ph id=\"ph1\">`CRect`</ph> objects and Windows <ph id=\"ph2\">`RECT`</ph> structures.","source":" also includes member functions to manipulate `CRect` objects and Windows `RECT` structures."},{"pos":[4861,4984],"content":"A <ph id=\"ph1\">`CRect`</ph> object can be passed as a function parameter wherever a <ph id=\"ph2\">`RECT`</ph> structure, <bpt id=\"p1\">**</bpt>LPCRECT<ept id=\"p1\">**</ept>, or <ph id=\"ph3\">`LPRECT`</ph> can be passed.","source":"A `CRect` object can be passed as a function parameter wherever a `RECT` structure, **LPCRECT**, or `LPRECT` can be passed."},{"pos":[4992,5279],"content":"[!NOTE]\n This class is derived from the **tagRECT** structure. (The name **tagRECT** is a less-commonly-used name for the `RECT` structure.) This means that the data members ( **left**, **top**, **right**, and **bottom**) of the `RECT` structure are accessible data members of `CRect`.","leadings":["","> "],"nodes":[{"content":" This class is derived from the **tagRECT** structure. (The name **tagRECT** is a less-commonly-used name for the `RECT` structure.) This means that the data members ( **left**, **top**, **right**, and **bottom**) of the `RECT` structure are accessible data members of `CRect`.","pos":[8,285],"nodes":[{"content":"This class is derived from the <bpt id=\"p1\">**</bpt>tagRECT<ept id=\"p1\">**</ept> structure.","pos":[1,54],"source":" This class is derived from the **tagRECT** structure."},{"content":"(The name <bpt id=\"p1\">**</bpt>tagRECT<ept id=\"p1\">**</ept> is a less-commonly-used name for the <ph id=\"ph1\">`RECT`</ph> structure.) This means that the data members ( <bpt id=\"p2\">**</bpt>left<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>top<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>right<ept id=\"p4\">**</ept>, and <bpt id=\"p5\">**</bpt>bottom<ept id=\"p5\">**</ept>) of the <ph id=\"ph2\">`RECT`</ph> structure are accessible data members of <ph id=\"ph3\">`CRect`</ph>.","pos":[55,277],"source":" (The name **tagRECT** is a less-commonly-used name for the `RECT` structure.) This means that the data members ( **left**, **top**, **right**, and **bottom**) of the `RECT` structure are accessible data members of `CRect`."}]}]},{"pos":[5286,5386],"content":"A <ph id=\"ph1\">`CRect`</ph> contains member variables that define the top-left and bottom-right points of a rectangle.","source":"A `CRect` contains member variables that define the top-left and bottom-right points of a rectangle."},{"content":"When specifying a <ph id=\"ph1\">`CRect`</ph>, you must be careful to construct it so that it is normalized — in other words, such that the value of the left coordinate is less than the right and the top is less than the bottom.","pos":[5393,5601],"source":"When specifying a `CRect`, you must be careful to construct it so that it is normalized — in other words, such that the value of the left coordinate is less than the right and the top is less than the bottom."},{"content":"For example, a top left of (10,10) and bottom right of (20,20) defines a normalized rectangle but a top left of (20,20) and bottom right of (10,10) defines a non-normalized rectangle.","pos":[5602,5785]},{"content":"If the rectangle is not normalized, many <ph id=\"ph1\">`CRect`</ph> member functions may return incorrect results.","pos":[5786,5881],"source":" If the rectangle is not normalized, many `CRect` member functions may return incorrect results."},{"content":"(See <bpt id=\"p1\">[</bpt>CRect::NormalizeRect<ept id=\"p1\">](#crect__normalizerect)</ept> for a list of these functions.) Before you call a function that requires normalized rectangles, you can normalize non-normalized rectangles by calling the <ph id=\"ph1\">`NormalizeRect`</ph> function.","pos":[5882,6113],"source":" (See [CRect::NormalizeRect](#crect__normalizerect) for a list of these functions.) Before you call a function that requires normalized rectangles, you can normalize non-normalized rectangles by calling the `NormalizeRect` function."},{"content":"Use caution when manipulating a <ph id=\"ph1\">`CRect`</ph> with the <bpt id=\"p1\">[</bpt>CDC::DPtoLP<ept id=\"p1\">](../../mfc/reference/cdc-class.md#cdc__dptolp)</ept> and <bpt id=\"p2\">[</bpt>CDC::LPtoDP<ept id=\"p2\">](../../mfc/reference/cdc-class.md#cdc__lptodp)</ept> member functions.","pos":[6120,6310],"source":"Use caution when manipulating a `CRect` with the [CDC::DPtoLP](../../mfc/reference/cdc-class.md#cdc__dptolp) and [CDC::LPtoDP](../../mfc/reference/cdc-class.md#cdc__lptodp) member functions."},{"content":"If the mapping mode of a display context is such that the y-extent is negative, as in <ph id=\"ph1\">`MM_LOENGLISH`</ph>, then <ph id=\"ph2\">`CDC::DPtoLP`</ph> will transform the <ph id=\"ph3\">`CRect`</ph> so that its top is greater than the bottom.","pos":[6311,6502],"source":" If the mapping mode of a display context is such that the y-extent is negative, as in `MM_LOENGLISH`, then `CDC::DPtoLP` will transform the `CRect` so that its top is greater than the bottom."},{"content":"Functions such as <bpt id=\"p1\">**</bpt>Height<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Size<ept id=\"p2\">**</ept> will then return negative values for the height of the transformed <ph id=\"ph1\">`CRect`</ph>, and the rectangle will be non-normalized.","pos":[6503,6662],"source":" Functions such as **Height** and **Size** will then return negative values for the height of the transformed `CRect`, and the rectangle will be non-normalized."},{"pos":[6670,6852],"content":"When using overloaded <ph id=\"ph1\">`CRect`</ph> operators, the first operand must be a <ph id=\"ph2\">`CRect`</ph>; the second can be either a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](../../mfc/reference/rect-structure1.md)</ept> structure or a <ph id=\"ph3\">`CRect`</ph> object.","source":"When using overloaded `CRect` operators, the first operand must be a `CRect`; the second can be either a [RECT](../../mfc/reference/rect-structure1.md) structure or a `CRect` object."},{"content":"Inheritance Hierarchy","pos":[6861,6882]},{"content":"Requirements","pos":[6918,6930]},{"pos":[6934,6956],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atltypes.h","source":"**Header:** atltypes.h"},{"pos":[7001,7019],"content":"CRect::BottomRight"},{"pos":[7023,7134],"content":"The coordinates are returned as a reference to a <bpt id=\"p1\">[</bpt>CPoint<ept id=\"p1\">](cpoint-class.md)</ept> object that is contained in <ph id=\"ph1\">`CRect`</ph>.","source":"The coordinates are returned as a reference to a [CPoint](cpoint-class.md) object that is contained in `CRect`."},{"content":"Return Value","pos":[7239,7251]},{"content":"The coordinates of the bottom-right corner of the rectangle.","pos":[7255,7315]},{"content":"Remarks","pos":[7325,7332]},{"content":"You can use this function to either get or set the bottom-right corner of the rectangle.","pos":[7336,7424]},{"content":"Set the corner by using this function on the left side of the assignment operator.","pos":[7425,7507]},{"content":"Example","pos":[7517,7524]},{"pos":[8057,8075],"content":"CRect::CenterPoint"},{"pos":[8079,8231],"content":"Calculates the centerpoint of <ph id=\"ph1\">`CRect`</ph> by adding the left and right values and dividing by two, and adding the top and bottom values and dividing by two.","source":"Calculates the centerpoint of `CRect` by adding the left and right values and dividing by two, and adding the top and bottom values and dividing by two."},{"content":"Return Value","pos":[8292,8304]},{"pos":[8308,8361],"content":"A <ph id=\"ph1\">`CPoint`</ph> object that is the centerpoint of <ph id=\"ph2\">`CRect`</ph>.","source":"A `CPoint` object that is the centerpoint of `CRect`."},{"content":"Example","pos":[8371,8378]},{"pos":[10006,10021],"content":"CRect::CopyRect"},{"pos":[10025,10071],"content":"Copies the <ph id=\"ph1\">`lpSrcRect`</ph> rectangle into <ph id=\"ph2\">`CRect`</ph>.","source":"Copies the `lpSrcRect` rectangle into `CRect`."},{"content":"Parameters","pos":[10147,10157]},{"content":"Points to the <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](../../mfc/reference/rect-structure1.md)</ept> structure or <ph id=\"ph1\">`CRect`</ph> object that is to be copied.","pos":[10176,10286],"source":" Points to the [RECT](../../mfc/reference/rect-structure1.md) structure or `CRect` object that is to be copied."},{"content":"Example","pos":[10296,10303]},{"pos":[10753,10765],"content":"CRect::CRect"},{"pos":[10769,10797],"content":"Constructs a <ph id=\"ph1\">`CRect`</ph> object.","source":"Constructs a `CRect` object."},{"content":"Parameters","pos":[11156,11166]},{"content":"l","pos":[11171,11172]},{"content":"Specifies the left position of <ph id=\"ph1\">`CRect`</ph>.","pos":[11177,11216],"source":" Specifies the left position of `CRect`."},{"content":"t","pos":[11224,11225]},{"content":"Specifies the top of <ph id=\"ph1\">`CRect`</ph>.","pos":[11230,11259],"source":" Specifies the top of `CRect`."},{"content":"r","pos":[11267,11268]},{"content":"Specifies the right position of <ph id=\"ph1\">`CRect`</ph>.","pos":[11273,11313],"source":" Specifies the right position of `CRect`."},{"content":"b","pos":[11321,11322]},{"content":"Specifies the bottom of <ph id=\"ph1\">`CRect`</ph>.","pos":[11327,11359],"source":" Specifies the bottom of `CRect`."},{"content":"srcRect","pos":[11367,11374]},{"content":"Refers to the <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](../../mfc/reference/rect-structure1.md)</ept> structure with the coordinates for <ph id=\"ph1\">`CRect`</ph>.","pos":[11379,11483],"source":" Refers to the [RECT](../../mfc/reference/rect-structure1.md) structure with the coordinates for `CRect`."},{"content":"Points to the <ph id=\"ph1\">`RECT`</ph> structure with the coordinates for <ph id=\"ph2\">`CRect`</ph>.","pos":[11505,11569],"source":" Points to the `RECT` structure with the coordinates for `CRect`."},{"content":"Specifies the origin point for the rectangle to be constructed.","pos":[11587,11650]},{"content":"Corresponds to the top-left corner.","pos":[11651,11686]},{"content":"Specifies the displacement from the top-left corner to the bottom-right corner of the rectangle to be constructed.","pos":[11703,11817]},{"content":"topLeft","pos":[11825,11832]},{"content":"Specifies the top-left position of <ph id=\"ph1\">`CRect`</ph>.","pos":[11837,11880],"source":" Specifies the top-left position of `CRect`."},{"content":"bottomRight","pos":[11888,11899]},{"content":"Specifies the bottom-right position of <ph id=\"ph1\">`CRect`</ph>.","pos":[11904,11951],"source":" Specifies the bottom-right position of `CRect`."},{"content":"Remarks","pos":[11961,11968]},{"pos":[11972,12072],"content":"If no arguments are given, <bpt id=\"p1\">**</bpt>left<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>top<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>right<ept id=\"p3\">**</ept>, and <bpt id=\"p4\">**</bpt>bottom<ept id=\"p4\">**</ept> members are not initialized.","source":"If no arguments are given, **left**, **top**, **right**, and **bottom** members are not initialized."},{"content":"The <ph id=\"ph1\">`CRect`</ph>( <bpt id=\"p1\">**</bpt>const RECT&amp;<ept id=\"p1\">**</ept>) and <ph id=\"ph2\">`CRect`</ph>( <bpt id=\"p2\">**</bpt>LPCRECT<ept id=\"p2\">**</ept>) constructors perform a <bpt id=\"p3\">[</bpt>CopyRect<ept id=\"p3\">](#crect__copyrect)</ept>.","pos":[12079,12187],"source":"The `CRect`( **const RECT&**) and `CRect`( **LPCRECT**) constructors perform a [CopyRect](#crect__copyrect)."},{"content":"The other constructors initialize the member variables of the object directly.","pos":[12188,12266]},{"content":"Example","pos":[12276,12283]},{"pos":[13081,13099],"content":"CRect::DeflateRect"},{"pos":[13117,13172],"content":"deflates <ph id=\"ph1\">`CRect`</ph> by moving its sides toward its center.","source":" deflates `CRect` by moving its sides toward its center."},{"content":"Parameters","pos":[13467,13477]},{"content":"x","pos":[13482,13483]},{"content":"Specifies the number of units to deflate the left and right sides of <ph id=\"ph1\">`CRect`</ph>.","pos":[13488,13565],"source":" Specifies the number of units to deflate the left and right sides of `CRect`."},{"content":"y","pos":[13573,13574]},{"content":"Specifies the number of units to deflate the top and bottom of <ph id=\"ph1\">`CRect`</ph>.","pos":[13579,13650],"source":" Specifies the number of units to deflate the top and bottom of `CRect`."},{"content":"A <bpt id=\"p1\">[</bpt>SIZE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> or <bpt id=\"p2\">[</bpt>CSize<ept id=\"p2\">](csize-class.md)</ept> that specifies the number of units to deflate <ph id=\"ph1\">`CRect`</ph>.","pos":[13667,13817],"source":" A [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) or [CSize](csize-class.md) that specifies the number of units to deflate `CRect`."},{"content":"The <ph id=\"ph1\">`cx`</ph> value specifies the number of units to deflate the left and right sides and the <ph id=\"ph2\">`cy`</ph> value specifies the number of units to deflate the top and bottom.","pos":[13818,13978],"source":" The `cx` value specifies the number of units to deflate the left and right sides and the `cy` value specifies the number of units to deflate the top and bottom."},{"content":"Points to a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](../../mfc/reference/rect-structure1.md)</ept> structure or <ph id=\"ph1\">`CRect`</ph> that specifies the number of units to deflate each side.","pos":[13997,14133],"source":" Points to a [RECT](../../mfc/reference/rect-structure1.md) structure or `CRect` that specifies the number of units to deflate each side."},{"content":"l","pos":[14141,14142]},{"content":"Specifies the number of units to deflate the left side of <ph id=\"ph1\">`CRect`</ph>.","pos":[14147,14213],"source":" Specifies the number of units to deflate the left side of `CRect`."},{"content":"t","pos":[14221,14222]},{"content":"Specifies the number of units to deflate the top of <ph id=\"ph1\">`CRect`</ph>.","pos":[14227,14287],"source":" Specifies the number of units to deflate the top of `CRect`."},{"content":"r","pos":[14295,14296]},{"content":"Specifies the number of units to deflate the right side of <ph id=\"ph1\">`CRect`</ph>.","pos":[14301,14368],"source":" Specifies the number of units to deflate the right side of `CRect`."},{"content":"b","pos":[14376,14377]},{"content":"Specifies the number of units to deflate the bottom of <ph id=\"ph1\">`CRect`</ph>.","pos":[14382,14445],"source":" Specifies the number of units to deflate the bottom of `CRect`."},{"content":"Remarks","pos":[14455,14462]},{"content":"To do this, <ph id=\"ph1\">`DeflateRect`</ph> adds units to the left and top and subtracts units from the right and bottom.","pos":[14466,14569],"source":"To do this, `DeflateRect` adds units to the left and top and subtracts units from the right and bottom."},{"content":"The parameters of <ph id=\"ph1\">`DeflateRect`</ph> are signed values; positive values deflate <ph id=\"ph2\">`CRect`</ph> and negative values inflate it.","pos":[14570,14684],"source":" The parameters of `DeflateRect` are signed values; positive values deflate `CRect` and negative values inflate it."},{"content":"The first two overloads deflate both pairs of opposite sides of <ph id=\"ph1\">`CRect`</ph> so that its total width is decreased by two times <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept> (or <ph id=\"ph2\">`cx`</ph>) and its total height is decreased by two times <bpt id=\"p2\">*</bpt>y<ept id=\"p2\">*</ept> (or <ph id=\"ph3\">`cy`</ph>).","pos":[14691,14888],"source":"The first two overloads deflate both pairs of opposite sides of `CRect` so that its total width is decreased by two times *x* (or `cx`) and its total height is decreased by two times *y* (or `cy`)."},{"content":"The other two overloads deflate each side of <ph id=\"ph1\">`CRect`</ph> independently of the others.","pos":[14889,14970],"source":" The other two overloads deflate each side of `CRect` independently of the others."},{"content":"Example","pos":[14980,14987]},{"pos":[15404,15420],"content":"CRect::EqualRect"},{"pos":[15424,15483],"content":"Determines whether <ph id=\"ph1\">`CRect`</ph> is equal to the given rectangle.","source":"Determines whether `CRect` is equal to the given rectangle."},{"content":"Parameters","pos":[15563,15573]},{"content":"Points to a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](../../mfc/reference/rect-structure1.md)</ept> structure or <ph id=\"ph1\">`CRect`</ph> object that contains the upper-left and lower-right corner coordinates of a rectangle.","pos":[15589,15755],"source":" Points to a [RECT](../../mfc/reference/rect-structure1.md) structure or `CRect` object that contains the upper-left and lower-right corner coordinates of a rectangle."},{"content":"Return Value","pos":[15765,15777]},{"content":"Nonzero if the two rectangles have the same top, left, bottom, and right values; otherwise 0.","pos":[15781,15874]},{"pos":[15882,16071],"content":"[!NOTE]\n Both of the rectangles must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function.","leadings":["","> "],"nodes":[{"content":" Both of the rectangles must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function.","pos":[8,187],"nodes":[{"content":"Both of the rectangles must be normalized or this function may fail.","pos":[1,69]},{"content":"You can call <bpt id=\"p1\">[</bpt>NormalizeRect<ept id=\"p1\">](#crect__normalizerect)</ept> to normalize the rectangles before calling this function.","pos":[70,179],"source":" You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function."}]}]},{"content":"Example","pos":[16081,16088]},{"pos":[16487,16500],"content":"CRect::Height"},{"pos":[16504,16588],"content":"Calculates the height of <ph id=\"ph1\">`CRect`</ph> by subtracting the top value from the bottom value.","source":"Calculates the height of `CRect` by subtracting the top value from the bottom value."},{"content":"Return Value","pos":[16641,16653]},{"pos":[16657,16679],"content":"The height of <ph id=\"ph1\">`CRect`</ph>.","source":"The height of `CRect`."},{"content":"Remarks","pos":[16689,16696]},{"content":"The resulting value can be negative.","pos":[16700,16736]},{"pos":[16744,16923],"content":"[!NOTE]\n The rectangle must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangle before calling this function.","leadings":["","> "],"nodes":[{"content":" The rectangle must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangle before calling this function.","pos":[8,177],"nodes":[{"content":"The rectangle must be normalized or this function may fail.","pos":[1,60]},{"content":"You can call <bpt id=\"p1\">[</bpt>NormalizeRect<ept id=\"p1\">](#crect__normalizerect)</ept> to normalize the rectangle before calling this function.","pos":[61,169],"source":" You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangle before calling this function."}]}]},{"content":"Example","pos":[16933,16940]},{"pos":[17104,17122],"content":"CRect::InflateRect"},{"pos":[17140,17198],"content":"inflates <ph id=\"ph1\">`CRect`</ph> by moving its sides away from its center.","source":" inflates `CRect` by moving its sides away from its center."},{"content":"Parameters","pos":[17493,17503]},{"content":"x","pos":[17508,17509]},{"content":"Specifies the number of units to inflate the left and right sides of <ph id=\"ph1\">`CRect`</ph>.","pos":[17514,17591],"source":" Specifies the number of units to inflate the left and right sides of `CRect`."},{"content":"y","pos":[17599,17600]},{"content":"Specifies the number of units to inflate the top and bottom of <ph id=\"ph1\">`CRect`</ph>.","pos":[17605,17676],"source":" Specifies the number of units to inflate the top and bottom of `CRect`."},{"content":"A <bpt id=\"p1\">[</bpt>SIZE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> or <bpt id=\"p2\">[</bpt>CSize<ept id=\"p2\">](csize-class.md)</ept> that specifies the number of units to inflate <ph id=\"ph1\">`CRect`</ph>.","pos":[17693,17843],"source":" A [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) or [CSize](csize-class.md) that specifies the number of units to inflate `CRect`."},{"content":"The <ph id=\"ph1\">`cx`</ph> value specifies the number of units to inflate the left and right sides and the <ph id=\"ph2\">`cy`</ph> value specifies the number of units to inflate the top and bottom.","pos":[17844,18004],"source":" The `cx` value specifies the number of units to inflate the left and right sides and the `cy` value specifies the number of units to inflate the top and bottom."},{"content":"Points to a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](../../mfc/reference/rect-structure1.md)</ept> structure or <ph id=\"ph1\">`CRect`</ph> that specifies the number of units to inflate each side.","pos":[18023,18159],"source":" Points to a [RECT](../../mfc/reference/rect-structure1.md) structure or `CRect` that specifies the number of units to inflate each side."},{"content":"l","pos":[18167,18168]},{"content":"Specifies the number of units to inflate the left side of <ph id=\"ph1\">`CRect`</ph>.","pos":[18173,18239],"source":" Specifies the number of units to inflate the left side of `CRect`."},{"content":"t","pos":[18247,18248]},{"content":"Specifies the number of units to inflate the top of <ph id=\"ph1\">`CRect`</ph>.","pos":[18253,18313],"source":" Specifies the number of units to inflate the top of `CRect`."},{"content":"r","pos":[18321,18322]},{"content":"Specifies the number of units to inflate the right side of <ph id=\"ph1\">`CRect`</ph>.","pos":[18327,18394],"source":" Specifies the number of units to inflate the right side of `CRect`."},{"content":"b","pos":[18402,18403]},{"content":"Specifies the number of units to inflate the bottom of <ph id=\"ph1\">`CRect`</ph>.","pos":[18408,18471],"source":" Specifies the number of units to inflate the bottom of `CRect`."},{"content":"Remarks","pos":[18481,18488]},{"content":"To do this, <ph id=\"ph1\">`InflateRect`</ph> subtracts units from the left and top and adds units to the right and bottom.","pos":[18492,18595],"source":"To do this, `InflateRect` subtracts units from the left and top and adds units to the right and bottom."},{"content":"The parameters of <ph id=\"ph1\">`InflateRect`</ph> are signed values; positive values inflate <ph id=\"ph2\">`CRect`</ph> and negative values deflate it.","pos":[18596,18710],"source":" The parameters of `InflateRect` are signed values; positive values inflate `CRect` and negative values deflate it."},{"content":"The first two overloads inflate both pairs of opposite sides of <ph id=\"ph1\">`CRect`</ph> so that its total width is increased by two times <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept> (or <ph id=\"ph2\">`cx`</ph>) and its total height is increased by two times <bpt id=\"p2\">*</bpt>y<ept id=\"p2\">*</ept> (or <ph id=\"ph3\">`cy`</ph>).","pos":[18717,18914],"source":"The first two overloads inflate both pairs of opposite sides of `CRect` so that its total width is increased by two times *x* (or `cx`) and its total height is increased by two times *y* (or `cy`)."},{"content":"The other two overloads inflate each side of <ph id=\"ph1\">`CRect`</ph> independently of the others.","pos":[18915,18996],"source":" The other two overloads inflate each side of `CRect` independently of the others."},{"content":"Example","pos":[19006,19013]},{"pos":[19224,19244],"content":"CRect::IntersectRect"},{"pos":[19248,19317],"content":"Makes a <ph id=\"ph1\">`CRect`</ph> equal to the intersection of two existing rectangles.","source":"Makes a `CRect` equal to the intersection of two existing rectangles."},{"content":"Parameters","pos":[19435,19445]},{"content":"Points to a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](../../mfc/reference/rect-structure1.md)</ept> structure or <ph id=\"ph1\">`CRect`</ph> object that contains a source rectangle.","pos":[19462,19582],"source":" Points to a [RECT](../../mfc/reference/rect-structure1.md) structure or `CRect` object that contains a source rectangle."},{"content":"Points to a <ph id=\"ph1\">`RECT`</ph> structure or <ph id=\"ph2\">`CRect`</ph> object that contains a source rectangle.","pos":[19602,19682],"source":" Points to a `RECT` structure or `CRect` object that contains a source rectangle."},{"content":"Return Value","pos":[19692,19704]},{"content":"Nonzero if the intersection is not empty; 0 if the intersection is empty.","pos":[19708,19781]},{"content":"Remarks","pos":[19791,19798]},{"content":"The intersection is the largest rectangle contained in both existing rectangles.","pos":[19802,19882]},{"pos":[19890,20079],"content":"[!NOTE]\n Both of the rectangles must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function.","leadings":["","> "],"nodes":[{"content":" Both of the rectangles must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function.","pos":[8,187],"nodes":[{"content":"Both of the rectangles must be normalized or this function may fail.","pos":[1,69]},{"content":"You can call <bpt id=\"p1\">[</bpt>NormalizeRect<ept id=\"p1\">](#crect__normalizerect)</ept> to normalize the rectangles before calling this function.","pos":[70,179],"source":" You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function."}]}]},{"content":"Example","pos":[20089,20096]},{"pos":[20539,20557],"content":"CRect::IsRectEmpty"},{"pos":[20561,20597],"content":"Determines whether <ph id=\"ph1\">`CRect`</ph> is empty.","source":"Determines whether `CRect` is empty."},{"content":"Return Value","pos":[20656,20668]},{"pos":[20672,20727],"content":"Nonzero if <ph id=\"ph1\">`CRect`</ph> is empty; 0 if <ph id=\"ph2\">`CRect`</ph> is not empty.","source":"Nonzero if `CRect` is empty; 0 if `CRect` is not empty."},{"content":"Remarks","pos":[20737,20744]},{"content":"A rectangle is empty if the width and/or height are 0 or negative.","pos":[20748,20814]},{"content":"Differs from <ph id=\"ph1\">`IsRectNull`</ph>, which determines whether all coordinates of the rectangle are zero.","pos":[20815,20909],"source":" Differs from `IsRectNull`, which determines whether all coordinates of the rectangle are zero."},{"pos":[20917,21096],"content":"[!NOTE]\n The rectangle must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangle before calling this function.","leadings":["","> "],"nodes":[{"content":" The rectangle must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangle before calling this function.","pos":[8,177],"nodes":[{"content":"The rectangle must be normalized or this function may fail.","pos":[1,60]},{"content":"You can call <bpt id=\"p1\">[</bpt>NormalizeRect<ept id=\"p1\">](#crect__normalizerect)</ept> to normalize the rectangle before calling this function.","pos":[61,169],"source":" You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangle before calling this function."}]}]},{"content":"Example","pos":[21106,21113]},{"pos":[21386,21403],"content":"CRect::IsRectNull"},{"pos":[21407,21496],"content":"Determines whether the top, left, bottom, and right values of <ph id=\"ph1\">`CRect`</ph> are all equal to 0.","source":"Determines whether the top, left, bottom, and right values of `CRect` are all equal to 0."},{"content":"Return Value","pos":[21554,21566]},{"pos":[21570,21659],"content":"Nonzero if <ph id=\"ph1\">`CRect`</ph>'s top, left, bottom, and right values are all equal to 0; otherwise 0.","source":"Nonzero if `CRect`'s top, left, bottom, and right values are all equal to 0; otherwise 0."},{"content":"Remarks","pos":[21669,21676]},{"pos":[21680,21756],"content":"Differs from <ph id=\"ph1\">`IsRectEmpty`</ph>, which determines whether the rectangle is empty.","source":"Differs from `IsRectEmpty`, which determines whether the rectangle is empty."},{"content":"Example","pos":[21766,21773]},{"pos":[22082,22096],"content":"CRect::MoveToX"},{"pos":[22100,22187],"content":"Call this function to move the rectangle to the absolute x-coordinate specified by <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept>.","source":"Call this function to move the rectangle to the absolute x-coordinate specified by *x*."},{"content":"Parameters","pos":[22250,22260]},{"content":"x","pos":[22265,22266]},{"content":"The absolute x-coordinate for the upper-left corner of the rectangle.","pos":[22271,22340]},{"content":"Example","pos":[22350,22357]},{"pos":[22548,22563],"content":"CRect::MoveToXY"},{"content":"Call this function to move the rectangle to the absolute x- and y-coordinates specified.","pos":[22567,22655]},{"content":"Parameters","pos":[22794,22804]},{"content":"x","pos":[22809,22810]},{"content":"The absolute x-coordinate for the upper-left corner of the rectangle.","pos":[22815,22884]},{"content":"y","pos":[22892,22893]},{"content":"The absolute y-coordinate for the upper-left corner of the rectangle.","pos":[22898,22967]},{"content":"A <bpt id=\"p1\">**</bpt>POINT<ept id=\"p1\">**</ept> structure specifying the absolute upper-left corner of the rectangle.","pos":[22985,23066],"source":" A **POINT** structure specifying the absolute upper-left corner of the rectangle."},{"content":"Example","pos":[23076,23083]},{"pos":[23281,23295],"content":"CRect::MoveToY"},{"pos":[23299,23386],"content":"Call this function to move the rectangle to the absolute y-coordinate specified by <bpt id=\"p1\">*</bpt>y<ept id=\"p1\">*</ept>.","source":"Call this function to move the rectangle to the absolute y-coordinate specified by *y*."},{"content":"Parameters","pos":[23449,23459]},{"content":"y","pos":[23464,23465]},{"content":"The absolute y-coordinate for the upper-left corner of the rectangle.","pos":[23470,23539]},{"content":"Example","pos":[23549,23556]},{"pos":[23753,23773],"content":"CRect::NormalizeRect"},{"pos":[23777,23843],"content":"Normalizes <ph id=\"ph1\">`CRect`</ph> so that both the height and width are positive.","source":"Normalizes `CRect` so that both the height and width are positive."},{"content":"Remarks","pos":[23898,23905]},{"content":"The rectangle is normalized for fourth-quadrant positioning, which Windows typically uses for coordinates.","pos":[23909,24015]},{"content":"compares the top and bottom values, and swaps them if the top is greater than the bottom.","pos":[24032,24121]},{"content":"Similarly, it swaps the left and right values if the left is greater than the right.","pos":[24122,24206]},{"content":"This function is useful when dealing with different mapping modes and inverted rectangles.","pos":[24207,24297]},{"pos":[24305,24939],"content":"[!NOTE]\n The following `CRect` member functions require normalized rectangles in order to work properly: [Height](#crect__height), [Width](#crect__width), [Size](#crect__size), [IsRectEmpty](#crect__isrectempty), [PtInRect](#crect__ptinrect), [EqualRect](#crect__equalrect), [UnionRect](#crect__unionrect), [IntersectRect](#crect__intersectrect), [SubtractRect](#crect__subtractrect), [operator ==](#crect__operator__eq_eq), [operator !=](#crect__operator__neq), [operator &#124;](#crect__operator__or), [operator &#124;=](#crect__operator__or_eq), [operator &](#crect__operator__amp_), and [operator &=](#crect__operator__amp__eq).","leadings":["","> "],"nodes":[{"content":"The following <ph id=\"ph1\">`CRect`</ph> member functions require normalized rectangles in order to work properly: <bpt id=\"p1\">[</bpt>Height<ept id=\"p1\">](#crect__height)</ept>, <bpt id=\"p2\">[</bpt>Width<ept id=\"p2\">](#crect__width)</ept>, <bpt id=\"p3\">[</bpt>Size<ept id=\"p3\">](#crect__size)</ept>, <bpt id=\"p4\">[</bpt>IsRectEmpty<ept id=\"p4\">](#crect__isrectempty)</ept>, <bpt id=\"p5\">[</bpt>PtInRect<ept id=\"p5\">](#crect__ptinrect)</ept>, <bpt id=\"p6\">[</bpt>EqualRect<ept id=\"p6\">](#crect__equalrect)</ept>, <bpt id=\"p7\">[</bpt>UnionRect<ept id=\"p7\">](#crect__unionrect)</ept>, <bpt id=\"p8\">[</bpt>IntersectRect<ept id=\"p8\">](#crect__intersectrect)</ept>, <bpt id=\"p9\">[</bpt>SubtractRect<ept id=\"p9\">](#crect__subtractrect)</ept>, <bpt id=\"p10\">[</bpt>operator ==<ept id=\"p10\">](#crect__operator__eq_eq)</ept>, <bpt id=\"p11\">[</bpt>operator !=<ept id=\"p11\">](#crect__operator__neq)</ept>, <bpt id=\"p12\">[</bpt>operator &amp;#124;<ept id=\"p12\">](#crect__operator__or)</ept>, <bpt id=\"p13\">[</bpt>operator &amp;#124;=<ept id=\"p13\">](#crect__operator__or_eq)</ept>, <bpt id=\"p14\">[</bpt>operator &amp;<ept id=\"p14\">](#crect__operator__amp_)</ept>, and <bpt id=\"p15\">[</bpt>operator &amp;=<ept id=\"p15\">](#crect__operator__amp__eq)</ept>.","pos":[9,632],"source":" The following `CRect` member functions require normalized rectangles in order to work properly: [Height](#crect__height), [Width](#crect__width), [Size](#crect__size), [IsRectEmpty](#crect__isrectempty), [PtInRect](#crect__ptinrect), [EqualRect](#crect__equalrect), [UnionRect](#crect__unionrect), [IntersectRect](#crect__intersectrect), [SubtractRect](#crect__subtractrect), [operator ==](#crect__operator__eq_eq), [operator !=](#crect__operator__neq), [operator &#124;](#crect__operator__or), [operator &#124;=](#crect__operator__or_eq), [operator &](#crect__operator__amp_), and [operator &=](#crect__operator__amp__eq)."}]},{"content":"Example","pos":[24949,24956]},{"pos":[25242,25259],"content":"CRect::OffsetRect"},{"pos":[25263,25302],"content":"Moves <ph id=\"ph1\">`CRect`</ph> by the specified offsets.","source":"Moves `CRect` by the specified offsets."},{"content":"Parameters","pos":[25491,25501]},{"content":"x","pos":[25506,25507]},{"content":"Specifies the amount to move left or right.","pos":[25512,25555]},{"content":"It must be negative to move left.","pos":[25556,25589]},{"content":"y","pos":[25597,25598]},{"content":"Specifies the amount to move up or down.","pos":[25603,25643]},{"content":"It must be negative to move up.","pos":[25644,25675]},{"content":"Contains a <bpt id=\"p1\">[</bpt>POINT<ept id=\"p1\">](../../mfc/reference/point-structure1.md)</ept> structure or <bpt id=\"p2\">[</bpt>CPoint<ept id=\"p2\">](cpoint-class.md)</ept> object specifying both dimensions by which to move.","pos":[25693,25843],"source":" Contains a [POINT](../../mfc/reference/point-structure1.md) structure or [CPoint](cpoint-class.md) object specifying both dimensions by which to move."},{"content":"Contains a <bpt id=\"p1\">[</bpt>SIZE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure or <bpt id=\"p2\">[</bpt>CSize<ept id=\"p2\">](csize-class.md)</ept> object specifying both dimensions by which to move.","pos":[25860,26026],"source":" Contains a [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure or [CSize](csize-class.md) object specifying both dimensions by which to move."},{"content":"Remarks","pos":[26036,26043]},{"content":"Moves <ph id=\"ph1\">`CRect`</ph><bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept> units along the x-axis and <bpt id=\"p2\">*</bpt>y<ept id=\"p2\">*</ept> units along the y-axis.","pos":[26047,26118],"source":"Moves `CRect`*x* units along the x-axis and *y* units along the y-axis."},{"content":"The <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>y<ept id=\"p2\">*</ept> parameters are signed values, so <ph id=\"ph1\">`CRect`</ph> can be moved left or right and up or down.","pos":[26119,26218],"source":" The *x* and *y* parameters are signed values, so `CRect` can be moved left or right and up or down."},{"content":"Example","pos":[26228,26235]},{"pos":[26447,26470],"content":"CRect::operator LPCRECT"},{"pos":[26474,26548],"content":"Converts a <ph id=\"ph1\">`CRect`</ph> to an <bpt id=\"p1\">[</bpt>LPCRECT<ept id=\"p1\">](../../mfc/reference/data-types-mfc.md)</ept>.","source":"Converts a `CRect` to an [LPCRECT](../../mfc/reference/data-types-mfc.md)."},{"content":"```  operator LPCRECT() const throw();","pos":[26555,26593]},{"content":"Remarks","pos":[27119,27126]},{"content":"When you use this function, you don't need the address-of ( <bpt id=\"p1\">**</bpt><ph id=\"ph1\">&amp;</ph><ept id=\"p1\">**</ept>) operator.","pos":[27130,27206],"source":"When you use this function, you don't need the address-of ( **&**) operator."},{"content":"This operator will be automatically used when you pass a <ph id=\"ph1\">`CRect`</ph> object to a function that expects an <ph id=\"ph2\">`LPRECT`</ph>.","pos":[27207,27318],"source":" This operator will be automatically used when you pass a `CRect` object to a function that expects an `LPRECT`."},{"content":"Example","pos":[27328,27335]},{"pos":[27339,27411],"content":"See the example for <bpt id=\"p1\">[</bpt>CRect::operator LPCRECT<ept id=\"p1\">](#crect__operator_lpcrect)</ept>.","source":"See the example for [CRect::operator LPCRECT](#crect__operator_lpcrect)."},{"pos":[27457,27474],"content":"CRect::operator ="},{"pos":[27478,27507],"content":"Assigns <bpt id=\"p1\">*</bpt>srcRect<ept id=\"p1\">*</ept> to <ph id=\"ph1\">`CRect`</ph>.","source":"Assigns *srcRect* to `CRect`."},{"content":"Parameters","pos":[27584,27594]},{"content":"srcRect","pos":[27599,27606]},{"content":"Refers to a source rectangle.","pos":[27611,27640]},{"content":"Can be a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](../../mfc/reference/rect-structure1.md)</ept> or <ph id=\"ph1\">`CRect`</ph>.","pos":[27641,27708],"source":" Can be a [RECT](../../mfc/reference/rect-structure1.md) or `CRect`."},{"content":"Example","pos":[27718,27725]},{"pos":[27899,27917],"content":"CRect::operator =="},{"pos":[27921,28040],"content":"Determines whether <ph id=\"ph1\">`rect`</ph> is equal to <ph id=\"ph2\">`CRect`</ph> by comparing the coordinates of their upper-left and lower-right corners.","source":"Determines whether `rect` is equal to `CRect` by comparing the coordinates of their upper-left and lower-right corners."},{"content":"Parameters","pos":[28121,28131]},{"content":"Refers to a source rectangle.","pos":[28145,28174]},{"content":"Can be a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](../../mfc/reference/rect-structure1.md)</ept> or <ph id=\"ph1\">`CRect`</ph>.","pos":[28175,28242],"source":" Can be a [RECT](../../mfc/reference/rect-structure1.md) or `CRect`."},{"content":"Return Value","pos":[28252,28264]},{"content":"Nonzero if equal; otherwise 0.","pos":[28268,28298]},{"content":"Remarks","pos":[28308,28315]},{"pos":[28323,28512],"content":"[!NOTE]\n Both of the rectangles must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function.","leadings":["","> "],"nodes":[{"content":" Both of the rectangles must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function.","pos":[8,187],"nodes":[{"content":"Both of the rectangles must be normalized or this function may fail.","pos":[1,69]},{"content":"You can call <bpt id=\"p1\">[</bpt>NormalizeRect<ept id=\"p1\">](#crect__normalizerect)</ept> to normalize the rectangles before calling this function.","pos":[70,179],"source":" You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function."}]}]},{"content":"Example","pos":[28522,28529]},{"pos":[28886,28904],"content":"CRect::operator !="},{"pos":[28908,29031],"content":"Determines whether <ph id=\"ph1\">`rect`</ph> is not equal to <ph id=\"ph2\">`CRect`</ph> by comparing the coordinates of their upper-left and lower-right corners.","source":"Determines whether `rect` is not equal to `CRect` by comparing the coordinates of their upper-left and lower-right corners."},{"content":"Parameters","pos":[29112,29122]},{"content":"Refers to a source rectangle.","pos":[29136,29165]},{"content":"Can be a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](../../mfc/reference/rect-structure1.md)</ept> or <ph id=\"ph1\">`CRect`</ph>.","pos":[29166,29233],"source":" Can be a [RECT](../../mfc/reference/rect-structure1.md) or `CRect`."},{"content":"Return Value","pos":[29243,29255]},{"content":"Nonzero if not equal; otherwise 0.","pos":[29259,29293]},{"content":"Remarks","pos":[29303,29310]},{"pos":[29318,29507],"content":"[!NOTE]\n Both of the rectangles must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function.","leadings":["","> "],"nodes":[{"content":" Both of the rectangles must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function.","pos":[8,187],"nodes":[{"content":"Both of the rectangles must be normalized or this function may fail.","pos":[1,69]},{"content":"You can call <bpt id=\"p1\">[</bpt>NormalizeRect<ept id=\"p1\">](#crect__normalizerect)</ept> to normalize the rectangles before calling this function.","pos":[70,179],"source":" You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function."}]}]},{"content":"Example","pos":[29517,29524]},{"pos":[29883,29901],"content":"CRect::operator +="},{"pos":[29905,29967],"content":"The first two overloads move <ph id=\"ph1\">`CRect`</ph> by the specified offsets.","source":"The first two overloads move `CRect` by the specified offsets."},{"content":"Parameters","pos":[30126,30136]},{"content":"A <bpt id=\"p1\">[</bpt>POINT<ept id=\"p1\">](../../mfc/reference/point-structure1.md)</ept> structure or <bpt id=\"p2\">[</bpt>CPoint<ept id=\"p2\">](cpoint-class.md)</ept> object that specifies the number of units to move the rectangle.","pos":[30151,30305],"source":" A [POINT](../../mfc/reference/point-structure1.md) structure or [CPoint](cpoint-class.md) object that specifies the number of units to move the rectangle."},{"content":"A <bpt id=\"p1\">[</bpt>SIZE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure or <bpt id=\"p2\">[</bpt>CSize<ept id=\"p2\">](csize-class.md)</ept> object that specifies the number of units to move the rectangle.","pos":[30322,30492],"source":" A [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure or [CSize](csize-class.md) object that specifies the number of units to move the rectangle."},{"content":"Points to a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](../../mfc/reference/rect-structure1.md)</ept> structure or <ph id=\"ph1\">`CRect`</ph> object that contains the number of units to inflate each side of <ph id=\"ph2\">`CRect`</ph>.","pos":[30511,30664],"source":" Points to a [RECT](../../mfc/reference/rect-structure1.md) structure or `CRect` object that contains the number of units to inflate each side of `CRect`."},{"content":"Remarks","pos":[30674,30681]},{"pos":[30685,30760],"content":"The parameter's <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>y<ept id=\"p2\">*</ept> (or <ph id=\"ph1\">`cx`</ph> and <ph id=\"ph2\">`cy`</ph>) values are added to <ph id=\"ph3\">`CRect`</ph>.","source":"The parameter's *x* and *y* (or `cx` and `cy`) values are added to `CRect`."},{"pos":[30767,30867],"content":"The third overload inflates <ph id=\"ph1\">`CRect`</ph> by the number of units specifed in each member of the parameter.","source":"The third overload inflates `CRect` by the number of units specifed in each member of the parameter."},{"content":"Example","pos":[30877,30884]},{"pos":[31091,31109],"content":"CRect::operator -="},{"pos":[31113,31175],"content":"The first two overloads move <ph id=\"ph1\">`CRect`</ph> by the specified offsets.","source":"The first two overloads move `CRect` by the specified offsets."},{"content":"Parameters","pos":[31334,31344]},{"content":"A <bpt id=\"p1\">[</bpt>POINT<ept id=\"p1\">](../../mfc/reference/point-structure1.md)</ept> structure or <bpt id=\"p2\">[</bpt>CPoint<ept id=\"p2\">](cpoint-class.md)</ept> object that specifies the number of units to move the rectangle.","pos":[31359,31513],"source":" A [POINT](../../mfc/reference/point-structure1.md) structure or [CPoint](cpoint-class.md) object that specifies the number of units to move the rectangle."},{"content":"A <bpt id=\"p1\">[</bpt>SIZE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure or <bpt id=\"p2\">[</bpt>CSize<ept id=\"p2\">](csize-class.md)</ept> object that specifies the number of units to move the rectangle.","pos":[31530,31700],"source":" A [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure or [CSize](csize-class.md) object that specifies the number of units to move the rectangle."},{"content":"Points to a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](../../mfc/reference/rect-structure1.md)</ept> structure or <ph id=\"ph1\">`CRect`</ph> object that contains the number of units to deflate each side of <ph id=\"ph2\">`CRect`</ph>.","pos":[31719,31872],"source":" Points to a [RECT](../../mfc/reference/rect-structure1.md) structure or `CRect` object that contains the number of units to deflate each side of `CRect`."},{"content":"Remarks","pos":[31882,31889]},{"pos":[31893,31975],"content":"The parameter's <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>y<ept id=\"p2\">*</ept> (or <ph id=\"ph1\">`cx`</ph> and <ph id=\"ph2\">`cy`</ph>) values are subtracted from <ph id=\"ph3\">`CRect`</ph>.","source":"The parameter's *x* and *y* (or `cx` and `cy`) values are subtracted from `CRect`."},{"content":"The third overload deflates <ph id=\"ph1\">`CRect`</ph> by the number of units specifed in each member of the parameter.","pos":[31982,32082],"source":"The third overload deflates `CRect` by the number of units specifed in each member of the parameter."},{"content":"Note that this overload functions like <bpt id=\"p1\">[</bpt>DeflateRect<ept id=\"p1\">](#crect__deflaterect)</ept>.","pos":[32083,32157],"source":" Note that this overload functions like [DeflateRect](#crect__deflaterect)."},{"content":"Example","pos":[32167,32174]},{"pos":[32394,32409],"content":"CRect::operator"},{"pos":[32420,32481],"content":"Sets <ph id=\"ph1\">`CRect`</ph> equal to the intersection of <ph id=\"ph2\">`CRect`</ph> and <ph id=\"ph3\">`rect`</ph>.","source":"Sets `CRect` equal to the intersection of `CRect` and `rect`."},{"content":"Parameters","pos":[32556,32566]},{"content":"Contains a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](../../mfc/reference/rect-structure1.md)</ept> or <ph id=\"ph1\">`CRect`</ph>.","pos":[32580,32649],"source":" Contains a [RECT](../../mfc/reference/rect-structure1.md) or `CRect`."},{"content":"Remarks","pos":[32659,32666]},{"content":"The intersection is the largest rectangle that is contained in both rectangles.","pos":[32670,32749]},{"pos":[32757,32946],"content":"[!NOTE]\n Both of the rectangles must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function.","leadings":["","> "],"nodes":[{"content":" Both of the rectangles must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function.","pos":[8,187],"nodes":[{"content":"Both of the rectangles must be normalized or this function may fail.","pos":[1,69]},{"content":"You can call <bpt id=\"p1\">[</bpt>NormalizeRect<ept id=\"p1\">](#crect__normalizerect)</ept> to normalize the rectangles before calling this function.","pos":[70,179],"source":" You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function."}]}]},{"content":"Example","pos":[32956,32963]},{"pos":[32967,33033],"content":"See the example for <bpt id=\"p1\">[</bpt>CRect::IntersectRect<ept id=\"p1\">](#crect__intersectrect)</ept>.","source":"See the example for [CRect::IntersectRect](#crect__intersectrect)."},{"pos":[33082,33105],"content":"CRect::operator &amp;#124;=","source":"  CRect::operator &#124;="},{"pos":[33109,33163],"content":"Sets <ph id=\"ph1\">`CRect`</ph> equal to the union of <ph id=\"ph2\">`CRect`</ph> and <ph id=\"ph3\">`rect`</ph>.","source":"Sets `CRect` equal to the union of `CRect` and `rect`."},{"content":"Parameters","pos":[33238,33248]},{"content":"Contains a <ph id=\"ph1\">`CRect`</ph> or <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](../../mfc/reference/rect-structure1.md)</ept>.","pos":[33262,33331],"source":" Contains a `CRect` or [RECT](../../mfc/reference/rect-structure1.md)."},{"content":"Remarks","pos":[33341,33348]},{"content":"The union is the smallest rectangle that contains both source rectangles.","pos":[33352,33425]},{"pos":[33433,33622],"content":"[!NOTE]\n Both of the rectangles must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function.","leadings":["","> "],"nodes":[{"content":" Both of the rectangles must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function.","pos":[8,187],"nodes":[{"content":"Both of the rectangles must be normalized or this function may fail.","pos":[1,69]},{"content":"You can call <bpt id=\"p1\">[</bpt>NormalizeRect<ept id=\"p1\">](#crect__normalizerect)</ept> to normalize the rectangles before calling this function.","pos":[70,179],"source":" You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function."}]}]},{"content":"Example","pos":[33632,33639]},{"pos":[33869,33886],"content":"CRect::operator +"},{"pos":[33890,33998],"content":"The first two overloads return a <ph id=\"ph1\">`CRect`</ph> object that is equal to <ph id=\"ph2\">`CRect`</ph> displaced by the specified offsets.","source":"The first two overloads return a `CRect` object that is equal to `CRect` displaced by the specified offsets."},{"content":"Parameters","pos":[34175,34185]},{"content":"A <bpt id=\"p1\">[</bpt>POINT<ept id=\"p1\">](../../mfc/reference/point-structure1.md)</ept> structure or <bpt id=\"p2\">[</bpt>CPoint<ept id=\"p2\">](cpoint-class.md)</ept> object that specifies the number of units to move the return value.","pos":[34200,34357],"source":" A [POINT](../../mfc/reference/point-structure1.md) structure or [CPoint](cpoint-class.md) object that specifies the number of units to move the return value."},{"content":"A <bpt id=\"p1\">[</bpt>SIZE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure or <bpt id=\"p2\">[</bpt>CSize<ept id=\"p2\">](csize-class.md)</ept> object that specifies the number of units to move the return value.","pos":[34374,34547],"source":" A [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure or [CSize](csize-class.md) object that specifies the number of units to move the return value."},{"content":"Points to a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](../../mfc/reference/rect-structure1.md)</ept> structure or <ph id=\"ph1\">`CRect`</ph> object that contains the number of units to inflate each side of the return value.","pos":[34566,34728],"source":" Points to a [RECT](../../mfc/reference/rect-structure1.md) structure or `CRect` object that contains the number of units to inflate each side of the return value."},{"content":"Return Value","pos":[34738,34750]},{"pos":[34754,34859],"content":"The <ph id=\"ph1\">`CRect`</ph> resulting from moving or inflating <ph id=\"ph2\">`CRect`</ph> by the number of units specified in the parameter.","source":"The `CRect` resulting from moving or inflating `CRect` by the number of units specified in the parameter."},{"content":"Remarks","pos":[34869,34876]},{"pos":[34880,34970],"content":"The parameter's <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>y<ept id=\"p2\">*</ept> (or <ph id=\"ph1\">`cx`</ph> and <ph id=\"ph2\">`cy`</ph>) parameters are added to <ph id=\"ph3\">`CRect`</ph>'s position.","source":"The parameter's *x* and *y* (or `cx` and `cy`) parameters are added to `CRect`'s position."},{"pos":[34977,35116],"content":"The third overload returns a new <ph id=\"ph1\">`CRect`</ph> that is equal to <ph id=\"ph2\">`CRect`</ph> inflated by the number of units specifed in each member of the parameter.","source":"The third overload returns a new `CRect` that is equal to `CRect` inflated by the number of units specifed in each member of the parameter."},{"content":"Example","pos":[35126,35133]},{"pos":[35374,35391],"content":"CRect::operator -"},{"pos":[35395,35503],"content":"The first two overloads return a <ph id=\"ph1\">`CRect`</ph> object that is equal to <ph id=\"ph2\">`CRect`</ph> displaced by the specified offsets.","source":"The first two overloads return a `CRect` object that is equal to `CRect` displaced by the specified offsets."},{"content":"Parameters","pos":[35680,35690]},{"content":"A <bpt id=\"p1\">[</bpt>POINT<ept id=\"p1\">](../../mfc/reference/point-structure1.md)</ept> structure or <ph id=\"ph1\">`CPoint`</ph> object that specifies the number of units to move the return value.","pos":[35705,35845],"source":" A [POINT](../../mfc/reference/point-structure1.md) structure or `CPoint` object that specifies the number of units to move the return value."},{"content":"A <bpt id=\"p1\">[</bpt>SIZE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure or <ph id=\"ph1\">`CSize`</ph> object that specifies the number of units to move the return value.","pos":[35862,36019],"source":" A [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure or `CSize` object that specifies the number of units to move the return value."},{"content":"Points to a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](../../mfc/reference/rect-structure1.md)</ept> structure or <ph id=\"ph1\">`CRect`</ph> object that contains the number of units to deflate each side of the return value.","pos":[36038,36200],"source":" Points to a [RECT](../../mfc/reference/rect-structure1.md) structure or `CRect` object that contains the number of units to deflate each side of the return value."},{"content":"Return Value","pos":[36210,36222]},{"pos":[36226,36331],"content":"The <ph id=\"ph1\">`CRect`</ph> resulting from moving or deflating <ph id=\"ph2\">`CRect`</ph> by the number of units specified in the parameter.","source":"The `CRect` resulting from moving or deflating `CRect` by the number of units specified in the parameter."},{"content":"Remarks","pos":[36341,36348]},{"pos":[36352,36449],"content":"The parameter's <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>y<ept id=\"p2\">*</ept> (or <ph id=\"ph1\">`cx`</ph> and <ph id=\"ph2\">`cy`</ph>) parameters are subtracted from <ph id=\"ph3\">`CRect`</ph>'s position.","source":"The parameter's *x* and *y* (or `cx` and `cy`) parameters are subtracted from `CRect`'s position."},{"content":"The third overload returns a new <ph id=\"ph1\">`CRect`</ph> that is equal to <ph id=\"ph2\">`CRect`</ph> deflated by the number of units specifed in each member of the parameter.","pos":[36456,36595],"source":"The third overload returns a new `CRect` that is equal to `CRect` deflated by the number of units specifed in each member of the parameter."},{"content":"Note that this overload functions like <bpt id=\"p1\">[</bpt>DeflateRect<ept id=\"p1\">](#crect__deflaterect)</ept>, not <bpt id=\"p2\">[</bpt>SubtractRect<ept id=\"p2\">](#crect__subtractrect)</ept>.","pos":[36596,36712],"source":" Note that this overload functions like [DeflateRect](#crect__deflaterect), not [SubtractRect](#crect__subtractrect)."},{"content":"Example","pos":[36722,36729]},{"pos":[36973,36988],"content":"CRect::operator"},{"pos":[36998,37064],"content":"Returns a <ph id=\"ph1\">`CRect`</ph> that is the intersection of <ph id=\"ph2\">`CRect`</ph> and <bpt id=\"p1\">*</bpt>rect2<ept id=\"p1\">*</ept>.","source":"Returns a `CRect` that is the intersection of `CRect` and *rect2*."},{"content":"Parameters","pos":[37146,37156]},{"content":"rect2","pos":[37161,37166]},{"content":"Contains a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](../../mfc/reference/rect-structure1.md)</ept> or <ph id=\"ph1\">`CRect`</ph>.","pos":[37171,37240],"source":" Contains a [RECT](../../mfc/reference/rect-structure1.md) or `CRect`."},{"content":"Return Value","pos":[37250,37262]},{"pos":[37266,37324],"content":"A <ph id=\"ph1\">`CRect`</ph> that is the intersection of <ph id=\"ph2\">`CRect`</ph> and <bpt id=\"p1\">*</bpt>rect2<ept id=\"p1\">*</ept>.","source":"A `CRect` that is the intersection of `CRect` and *rect2*."},{"content":"Remarks","pos":[37334,37341]},{"content":"The intersection is the largest rectangle that is contained in both rectangles.","pos":[37345,37424]},{"pos":[37432,37621],"content":"[!NOTE]\n Both of the rectangles must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function.","leadings":["","> "],"nodes":[{"content":" Both of the rectangles must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function.","pos":[8,187],"nodes":[{"content":"Both of the rectangles must be normalized or this function may fail.","pos":[1,69]},{"content":"You can call <bpt id=\"p1\">[</bpt>NormalizeRect<ept id=\"p1\">](#crect__normalizerect)</ept> to normalize the rectangles before calling this function.","pos":[70,179],"source":" You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function."}]}]},{"content":"Example","pos":[37631,37638]},{"pos":[37896,37918],"content":"CRect::operator &amp;#124;","source":"  CRect::operator &#124;"},{"pos":[37922,37981],"content":"Returns a <ph id=\"ph1\">`CRect`</ph> that is the union of <ph id=\"ph2\">`CRect`</ph> and <bpt id=\"p1\">*</bpt>rect2<ept id=\"p1\">*</ept>.","source":"Returns a `CRect` that is the union of `CRect` and *rect2*."},{"content":"Parameters","pos":[38063,38073]},{"content":"rect2","pos":[38078,38083]},{"content":"Contains a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](../../mfc/reference/rect-structure1.md)</ept> or <ph id=\"ph1\">`CRect`</ph>.","pos":[38088,38157],"source":" Contains a [RECT](../../mfc/reference/rect-structure1.md) or `CRect`."},{"content":"Return Value","pos":[38167,38179]},{"pos":[38183,38234],"content":"A <ph id=\"ph1\">`CRect`</ph> that is the union of <ph id=\"ph2\">`CRect`</ph> and <bpt id=\"p1\">*</bpt>rect2<ept id=\"p1\">*</ept>.","source":"A `CRect` that is the union of `CRect` and *rect2*."},{"content":"Remarks","pos":[38244,38251]},{"content":"The union is the smallest rectangle that contains both rectangles.","pos":[38255,38321]},{"pos":[38329,38518],"content":"[!NOTE]\n Both of the rectangles must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function.","leadings":["","> "],"nodes":[{"content":" Both of the rectangles must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function.","pos":[8,187],"nodes":[{"content":"Both of the rectangles must be normalized or this function may fail.","pos":[1,69]},{"content":"You can call <bpt id=\"p1\">[</bpt>NormalizeRect<ept id=\"p1\">](#crect__normalizerect)</ept> to normalize the rectangles before calling this function.","pos":[70,179],"source":" You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function."}]}]},{"content":"Example","pos":[38528,38535]},{"pos":[38785,38800],"content":"CRect::PtInRect"},{"pos":[38804,38863],"content":"Determines whether the specified point lies within <ph id=\"ph1\">`CRect`</ph>.","source":"Determines whether the specified point lies within `CRect`."},{"content":"Parameters","pos":[38939,38949]},{"content":"Contains a <bpt id=\"p1\">[</bpt>POINT<ept id=\"p1\">](../../mfc/reference/point-structure1.md)</ept> structure or <bpt id=\"p2\">[</bpt>CPoint<ept id=\"p2\">](cpoint-class.md)</ept> object.","pos":[38964,39070],"source":" Contains a [POINT](../../mfc/reference/point-structure1.md) structure or [CPoint](cpoint-class.md) object."},{"content":"Return Value","pos":[39080,39092]},{"pos":[39096,39150],"content":"Nonzero if the point lies within <ph id=\"ph1\">`CRect`</ph>; otherwise 0.","source":"Nonzero if the point lies within `CRect`; otherwise 0."},{"content":"Remarks","pos":[39160,39167]},{"content":"A point is within <ph id=\"ph1\">`CRect`</ph> if it lies on the left or top side or is within all four sides.","pos":[39171,39260],"source":"A point is within `CRect` if it lies on the left or top side or is within all four sides."},{"content":"A point on the right or bottom side is outside <ph id=\"ph1\">`CRect`</ph>.","pos":[39261,39316],"source":" A point on the right or bottom side is outside `CRect`."},{"pos":[39324,39503],"content":"[!NOTE]\n The rectangle must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangle before calling this function.","leadings":["","> "],"nodes":[{"content":" The rectangle must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangle before calling this function.","pos":[8,177],"nodes":[{"content":"The rectangle must be normalized or this function may fail.","pos":[1,60]},{"content":"You can call <bpt id=\"p1\">[</bpt>NormalizeRect<ept id=\"p1\">](#crect__normalizerect)</ept> to normalize the rectangle before calling this function.","pos":[61,169],"source":" You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangle before calling this function."}]}]},{"content":"Example","pos":[39513,39520]},{"pos":[40231,40245],"content":"CRect::SetRect"},{"pos":[40249,40309],"content":"Sets the dimensions of <ph id=\"ph1\">`CRect`</ph> to the specified coordinates.","source":"Sets the dimensions of `CRect` to the specified coordinates."},{"content":"Parameters","pos":[40443,40453]},{"content":"Specifies the x-coordinate of the upper-left corner.","pos":[40465,40517]},{"content":"Specifies the y-coordinate of the upper-left corner.","pos":[40532,40584]},{"content":"Specifies the x-coordinate of the lower-right corner.","pos":[40599,40652]},{"content":"Specifies the y-coordinate of the lower-right corner.","pos":[40667,40720]},{"content":"Example","pos":[40730,40737]},{"pos":[40898,40917],"content":"CRect::SetRectEmpty"},{"pos":[40921,40987],"content":"Makes <ph id=\"ph1\">`CRect`</ph> a null rectangle by setting all coordinates to zero.","source":"Makes `CRect` a null rectangle by setting all coordinates to zero."},{"content":"Example","pos":[41041,41048]},{"pos":[41190,41201],"content":"CRect::Size"},{"pos":[41205,41291],"content":"The <ph id=\"ph1\">`cx`</ph> and <ph id=\"ph2\">`cy`</ph> members of the return value contain the height and width of <ph id=\"ph3\">`CRect`</ph>.","source":"The `cx` and `cy` members of the return value contain the height and width of `CRect`."},{"content":"Return Value","pos":[41344,41356]},{"pos":[41360,41427],"content":"A <bpt id=\"p1\">[</bpt>CSize<ept id=\"p1\">](csize-class.md)</ept> object that contains the size of <ph id=\"ph1\">`CRect`</ph>.","source":"A [CSize](csize-class.md) object that contains the size of `CRect`."},{"content":"Remarks","pos":[41437,41444]},{"content":"Either the height or width can be negative.","pos":[41448,41491]},{"pos":[41499,41678],"content":"[!NOTE]\n The rectangle must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangle before calling this function.","leadings":["","> "],"nodes":[{"content":" The rectangle must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangle before calling this function.","pos":[8,177],"nodes":[{"content":"The rectangle must be normalized or this function may fail.","pos":[1,60]},{"content":"You can call <bpt id=\"p1\">[</bpt>NormalizeRect<ept id=\"p1\">](#crect__normalizerect)</ept> to normalize the rectangle before calling this function.","pos":[61,169],"source":" You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangle before calling this function."}]}]},{"content":"Example","pos":[41688,41695]},{"content":"master","pos":[41817,41823]},{"pos":[41867,41886],"content":"CRect::SubtractRect"},{"pos":[41890,41987],"content":"Makes the dimensions of the <bpt id=\"p1\">**</bpt>CRect<ept id=\"p1\">**</ept> equal to the subtraction of <ph id=\"ph1\">`lpRectSrc2`</ph> from <ph id=\"ph2\">`lpRectSrc1`</ph>.","source":"Makes the dimensions of the **CRect** equal to the subtraction of `lpRectSrc2` from `lpRectSrc1`."},{"content":"Parameters","pos":[42110,42120]},{"content":"Points to the <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](../../mfc/reference/rect-structure1.md)</ept> structure or <ph id=\"ph1\">`CRect`</ph> object from which a rectangle is to be subtracted.","pos":[42140,42272],"source":" Points to the [RECT](../../mfc/reference/rect-structure1.md) structure or `CRect` object from which a rectangle is to be subtracted."},{"content":"Points to the <ph id=\"ph1\">`RECT`</ph> structure or <ph id=\"ph2\">`CRect`</ph> object that is to be subtracted from the rectangle pointed to by the <ph id=\"ph3\">`lpRectSrc1`</ph> parameter.","pos":[42295,42429],"source":" Points to the `RECT` structure or `CRect` object that is to be subtracted from the rectangle pointed to by the `lpRectSrc1` parameter."},{"content":"Return Value","pos":[42439,42451]},{"content":"Nonzero if the function is successful; otherwise 0.","pos":[42455,42506]},{"content":"Remarks","pos":[42516,42523]},{"pos":[42527,42683],"content":"The subtraction is the smallest rectangle that contains all of the points in <ph id=\"ph1\">`lpRectScr1`</ph> that are not in the intersection of <ph id=\"ph2\">`lpRectScr1`</ph> and <bpt id=\"p1\">*</bpt>lpRectScr2<ept id=\"p1\">*</ept>.","source":"The subtraction is the smallest rectangle that contains all of the points in `lpRectScr1` that are not in the intersection of `lpRectScr1` and *lpRectScr2*."},{"pos":[42690,42900],"content":"The rectangle specified by <ph id=\"ph1\">`lpRectSrc1`</ph> will be unchanged if the rectangle specified by <ph id=\"ph2\">`lpRectSrc2`</ph> doesn't completely overlap the rectangle specified by <bpt id=\"p1\">*</bpt>lpRectSrc1<ept id=\"p1\">*</ept> in at least one of the x- or y-directions.","source":"The rectangle specified by `lpRectSrc1` will be unchanged if the rectangle specified by `lpRectSrc2` doesn't completely overlap the rectangle specified by *lpRectSrc1* in at least one of the x- or y-directions."},{"content":"For example, if <ph id=\"ph1\">`lpRectSrc1`</ph> were (10,10, 100,100) and <ph id=\"ph2\">`lpRectSrc2`</ph> were (50,50, 150,150), the rectangle pointed to by <ph id=\"ph3\">`lpRectSrc1`</ph> would be unchanged when the function returned.","pos":[42907,43085],"source":"For example, if `lpRectSrc1` were (10,10, 100,100) and `lpRectSrc2` were (50,50, 150,150), the rectangle pointed to by `lpRectSrc1` would be unchanged when the function returned."},{"content":"If <ph id=\"ph1\">`lpRectSrc1`</ph> were (10,10, 100,100) and <ph id=\"ph2\">`lpRectSrc2`</ph> were (50,10, 150,150), however, the rectangle pointed to by <ph id=\"ph3\">`lpRectSrc1`</ph> would contain the coordinates (10,10, 50,100) when the function returned.","pos":[43086,43287],"source":" If `lpRectSrc1` were (10,10, 100,100) and `lpRectSrc2` were (50,10, 150,150), however, the rectangle pointed to by `lpRectSrc1` would contain the coordinates (10,10, 50,100) when the function returned."},{"content":"is not the same as <bpt id=\"p1\">[</bpt>operator -<ept id=\"p1\">](#crect__operator_-)</ept> nor <bpt id=\"p2\">[</bpt>operator -=<ept id=\"p2\">](#crect__operator_-_eq)</ept>.","pos":[43309,43402],"source":" is not the same as [operator -](#crect__operator_-) nor [operator -=](#crect__operator_-_eq)."},{"content":"Neither of these operators ever calls <ph id=\"ph1\">`SubtractRect`</ph>.","pos":[43403,43456],"source":" Neither of these operators ever calls `SubtractRect`."},{"pos":[43464,43653],"content":"[!NOTE]\n Both of the rectangles must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function.","leadings":["","> "],"nodes":[{"content":" Both of the rectangles must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function.","pos":[8,187],"nodes":[{"content":"Both of the rectangles must be normalized or this function may fail.","pos":[1,69]},{"content":"You can call <bpt id=\"p1\">[</bpt>NormalizeRect<ept id=\"p1\">](#crect__normalizerect)</ept> to normalize the rectangles before calling this function.","pos":[70,179],"source":" You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function."}]}]},{"content":"Example","pos":[43663,43670]},{"pos":[44343,44357],"content":"CRect::TopLeft"},{"pos":[44361,44472],"content":"The coordinates are returned as a reference to a <bpt id=\"p1\">[</bpt>CPoint<ept id=\"p1\">](cpoint-class.md)</ept> object that is contained in <ph id=\"ph1\">`CRect`</ph>.","source":"The coordinates are returned as a reference to a [CPoint](cpoint-class.md) object that is contained in `CRect`."},{"content":"Return Value","pos":[44569,44581]},{"content":"The coordinates of the top-left corner of the rectangle.","pos":[44585,44641]},{"content":"Remarks","pos":[44651,44658]},{"content":"You can use this function to either get or set the top-left corner of the rectangle.","pos":[44662,44746]},{"content":"Set the corner by using this function on the left side of the assignment operator.","pos":[44747,44829]},{"content":"Example","pos":[44839,44846]},{"pos":[44850,44912],"content":"See the example for <bpt id=\"p1\">[</bpt>CRect::CenterPoint<ept id=\"p1\">](#crect__centerpoint)</ept>.","source":"See the example for [CRect::CenterPoint](#crect__centerpoint)."},{"pos":[44955,44971],"content":"CRect::UnionRect"},{"pos":[44975,45055],"content":"Makes the dimensions of <ph id=\"ph1\">`CRect`</ph> equal to the union of the two source rectangles.","source":"Makes the dimensions of `CRect` equal to the union of the two source rectangles."},{"content":"Parameters","pos":[45169,45179]},{"content":"Points to a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](../../mfc/reference/rect-structure1.md)</ept> or <ph id=\"ph1\">`CRect`</ph> that contains a source rectangle.","pos":[45196,45299],"source":" Points to a [RECT](../../mfc/reference/rect-structure1.md) or `CRect` that contains a source rectangle."},{"content":"Points to a <ph id=\"ph1\">`RECT`</ph> or <ph id=\"ph2\">`CRect`</ph> that contains a source rectangle.","pos":[45319,45382],"source":" Points to a `RECT` or `CRect` that contains a source rectangle."},{"content":"Return Value","pos":[45392,45404]},{"content":"Nonzero if the union is not empty; 0 if the union is empty.","pos":[45408,45467]},{"content":"Remarks","pos":[45477,45484]},{"content":"The union is the smallest rectangle that contains both source rectangles.","pos":[45488,45561]},{"content":"Windows ignores the dimensions of an empty rectangle; that is, a rectangle that has no height or has no width.","pos":[45568,45678]},{"pos":[45686,45875],"content":"[!NOTE]\n Both of the rectangles must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function.","leadings":["","> "],"nodes":[{"content":" Both of the rectangles must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function.","pos":[8,187],"nodes":[{"content":"Both of the rectangles must be normalized or this function may fail.","pos":[1,69]},{"content":"You can call <bpt id=\"p1\">[</bpt>NormalizeRect<ept id=\"p1\">](#crect__normalizerect)</ept> to normalize the rectangles before calling this function.","pos":[70,179],"source":" You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function."}]}]},{"content":"Example","pos":[45885,45892]},{"content":"master","pos":[46118,46124]},{"pos":[46161,46173],"content":"CRect::Width"},{"pos":[46177,46260],"content":"Calculates the width of <ph id=\"ph1\">`CRect`</ph> by subtracting the left value from the right value.","source":"Calculates the width of `CRect` by subtracting the left value from the right value."},{"content":"Return Value","pos":[46312,46324]},{"pos":[46328,46349],"content":"The width of <ph id=\"ph1\">`CRect`</ph>.","source":"The width of `CRect`."},{"content":"Remarks","pos":[46359,46366]},{"content":"The width can be negative.","pos":[46370,46396]},{"pos":[46404,46583],"content":"[!NOTE]\n The rectangle must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangle before calling this function.","leadings":["","> "],"nodes":[{"content":" The rectangle must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangle before calling this function.","pos":[8,177],"nodes":[{"content":"The rectangle must be normalized or this function may fail.","pos":[1,60]},{"content":"You can call <bpt id=\"p1\">[</bpt>NormalizeRect<ept id=\"p1\">](#crect__normalizerect)</ept> to normalize the rectangle before calling this function.","pos":[61,169],"source":" You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangle before calling this function."}]}]},{"content":"Example","pos":[46593,46600]},{"content":"master","pos":[46731,46737]},{"content":"See Also","pos":[46744,46752]},{"content":"CPoint Class","pos":[46757,46769]},{"content":"CSize Class","pos":[46793,46804]},{"content":"RECT","pos":[46827,46831]}],"content":"---\ntitle: \"CRect Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CRect\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"LPCRECT data type\"\n  - \"CRect class\"\n  - \"LPRECT operator\"\n  - \"RECT structure\"\nms.assetid: dee4e752-15d6-4db4-b68f-1ad65b2ed6ca\ncaps.latest.revision: 24\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CRect Class\nSimilar to a Windows [RECT](../../mfc/reference/rect-structure1.md) structure.  \n  \n## Syntax  \n  \n```  \nclass CRect : public tagRECT  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CRect::CRect](#crect__crect)|Constructs a `CRect` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CRect::BottomRight](#crect__bottomright)|Returns the bottom-right point of `CRect`.|  \n|[CRect::CenterPoint](#crect__centerpoint)|Returns the centerpoint of `CRect`.|  \n|[CRect::CopyRect](#crect__copyrect)|Copies the dimensions of a source rectangle to `CRect`.|  \n|[CRect::DeflateRect](#crect__deflaterect)|Decreases the width and height of `CRect`.|  \n|[CRect::EqualRect](#crect__equalrect)|Determines whether `CRect` is equal to the given rectangle.|  \n|[CRect::Height](#crect__height)|Calculates the height of `CRect`.|  \n|[CRect::InflateRect](#crect__inflaterect)|Increases the width and height of `CRect`.|  \n|[CRect::IntersectRect](#crect__intersectrect)|Sets `CRect` equal to the intersection of two rectangles.|  \n|[CRect::IsRectEmpty](#crect__isrectempty)|Determines whether `CRect` is empty. `CRect` is empty if the width and/or height are 0.|  \n|[CRect::IsRectNull](#crect__isrectnull)|Determines whether the **top**, **bottom**, **left**, and **right** member variables are all equal to 0.|  \n|[CRect::MoveToX](#crect__movetox)|Moves `CRect` to the specified x-coordinate.|  \n|[CRect::MoveToXY](#crect__movetoxy)|Moves `CRect` to the specified x- and y-coordinates.|  \n|[CRect::MoveToY](#crect__movetoy)|Moves `CRect` to the specified y-coordinate.|  \n|[CRect::NormalizeRect](#crect__normalizerect)|Standardizes the height and width of `CRect`.|  \n|[CRect::OffsetRect](#crect__offsetrect)|Moves `CRect` by the specified offsets.|  \n|[CRect::PtInRect](#crect__ptinrect)|Determines whether the specified point lies within `CRect`.|  \n|[CRect::SetRect](#crect__setrect)|Sets the dimensions of `CRect`.|  \n|[CRect::SetRectEmpty](#crect__setrectempty)|Sets `CRect` to an empty rectangle (all coordinates equal to 0).|  \n|[CRect::Size](#crect__size)|Calculates the size of `CRect`.|  \n|[CRect::SubtractRect](#crect__subtractrect)|Subtracts one rectangle from another.|  \n|[CRect::TopLeft](#crect__topleft)|Returns the top-left point of `CRect`.|  \n|[CRect::UnionRect](#crect__unionrect)|Sets `CRect` equal to the union of two rectangles.|  \n|[CRect::Width](#crect__width)|Calculates the width of `CRect`.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CRect::operator -](#crect__operator_-)|Subtracts the given offsets from `CRect` or deflates `CRect` and returns the resulting `CRect`.|  \n|[CRect::operator LPCRECT](#crect__operator_lpcrect)|Converts a `CRect` to an **LPCRECT**.|  \n|[CRect::operator LPRECT](#crect__operator_lprect)|Converts a `CRect` to an `LPRECT`.|  \n|[CRect::operator !=](#crect__operator__neq)|Determines whether `CRect` is not equal to a rectangle.|  \n|[CRect::operator &amp;](#crect__operator__amp_)|Creates the intersection of `CRect` and a rectangle and returns the resulting `CRect`.|  \n|[CRect::operator &amp;=](#crect__operator__amp__eq)|Sets `CRect` equal to the intersection of `CRect` and a rectangle.|  \n|[CRect::operator |](#crect__operator__or)|Creates the union of `CRect` and a rectangle and returns the resulting `CRect`.|  \n|[CRect::operator |=](#crect__operator__or_eq)|Sets `CRect` equal to the union of `CRect` and a rectangle.|  \n|[CRect::operator +](#crect__operator__add)|Adds the given offsets to `CRect` or inflates `CRect` and returns the resulting `CRect`.|  \n|[CRect::operator +=](#crect__operator__add_eq)|Adds the specified offsets to `CRect` or inflates `CRect`.|  \n|[CRect::operator =](#crect__operator__eq)|Copies the dimensions of a rectangle to `CRect`.|  \n|[CRect::operator -=](#crect__operator_-_eq)|Subtracts the specified offsets from `CRect` or deflates `CRect`.|  \n|[CRect::operator ==](#crect__operator__eq_eq)|Determines whether `CRect` is equal to a rectangle.|  \n  \n## Remarks  \n `CRect` also includes member functions to manipulate `CRect` objects and Windows `RECT` structures.  \n  \n A `CRect` object can be passed as a function parameter wherever a `RECT` structure, **LPCRECT**, or `LPRECT` can be passed.  \n  \n> [!NOTE]\n>  This class is derived from the **tagRECT** structure. (The name **tagRECT** is a less-commonly-used name for the `RECT` structure.) This means that the data members ( **left**, **top**, **right**, and **bottom**) of the `RECT` structure are accessible data members of `CRect`.  \n  \n A `CRect` contains member variables that define the top-left and bottom-right points of a rectangle.  \n  \n When specifying a `CRect`, you must be careful to construct it so that it is normalized — in other words, such that the value of the left coordinate is less than the right and the top is less than the bottom. For example, a top left of (10,10) and bottom right of (20,20) defines a normalized rectangle but a top left of (20,20) and bottom right of (10,10) defines a non-normalized rectangle. If the rectangle is not normalized, many `CRect` member functions may return incorrect results. (See [CRect::NormalizeRect](#crect__normalizerect) for a list of these functions.) Before you call a function that requires normalized rectangles, you can normalize non-normalized rectangles by calling the `NormalizeRect` function.  \n  \n Use caution when manipulating a `CRect` with the [CDC::DPtoLP](../../mfc/reference/cdc-class.md#cdc__dptolp) and [CDC::LPtoDP](../../mfc/reference/cdc-class.md#cdc__lptodp) member functions. If the mapping mode of a display context is such that the y-extent is negative, as in `MM_LOENGLISH`, then `CDC::DPtoLP` will transform the `CRect` so that its top is greater than the bottom. Functions such as **Height** and **Size** will then return negative values for the height of the transformed `CRect`, and the rectangle will be non-normalized.  \n\n  \n When using overloaded `CRect` operators, the first operand must be a `CRect`; the second can be either a [RECT](../../mfc/reference/rect-structure1.md) structure or a `CRect` object.  \n  \n## Inheritance Hierarchy  \n `tagRECT`  \n  \n `CRect`  \n  \n## Requirements  \n **Header:** atltypes.h  \n  \n##  <a name=\"crect__bottomright\"></a>  CRect::BottomRight  \n The coordinates are returned as a reference to a [CPoint](cpoint-class.md) object that is contained in `CRect`.  \n  \n```  \n \nCPoint& BottomRight() throw();\n\nconst CPoint& BottomRight() const throw();\n\n \n```  \n  \n### Return Value  \n The coordinates of the bottom-right corner of the rectangle.  \n  \n### Remarks  \n You can use this function to either get or set the bottom-right corner of the rectangle. Set the corner by using this function on the left side of the assignment operator.  \n  \n### Example  \n```cpp\n   // use BottomRight() to retrieve the bottom\n   // right point\n\n   CRect rect(210, 150, 350, 900);\n   CPoint ptDown;\n\n   ptDown = rect.BottomRight();\n\n   // ptDown is now set to (350, 900)\n   ASSERT(ptDown == CPoint(350, 900));\n\n   // or, use BottomRight() to set the bottom\n   // right point\n\n   CRect rect2(10, 10, 350, 350);\n   CPoint ptLow(180, 180);\n\n   rect2.BottomRight() = ptLow;\n\n   // rect2 is now (10, 10, 180, 180)\n   ASSERT(rect2 == CRect(10, 10, 180, 180));   \n```\n  \n##  <a name=\"crect__centerpoint\"></a>  CRect::CenterPoint  \n Calculates the centerpoint of `CRect` by adding the left and right values and dividing by two, and adding the top and bottom values and dividing by two.  \n  \n```  \nCPoint CenterPoint() const throw();\n```  \n  \n### Return Value  \n A `CPoint` object that is the centerpoint of `CRect`.  \n  \n### Example  \n```cpp\n// Code from this OnPaint() implementation can be pasted into your own application\n// to draw lines that would look like a letter \"Y\" within your dialog. \nvoid CMyDlg::OnPaint()\n{\n   CPaintDC dc(this); // device context for painting\n\n   // get the size and position of the client area of \n   // your window\n\n   CRect rect;\n   GetClientRect(&rect);\n\n   // Move the current pen to the top left of the window. We call the\n   // TopLeft() member of CRect here and it returns a CPoint object we\n   // pass to the override of CDC::MoveTo() that accepts a CPoint.\n\n   dc.MoveTo(rect.TopLeft());\n\n   // Draw a line from the top left to the center of the window.\n   // CenterPoint() gives us the middle point of the window as a\n   // CPoint, and since CDC::LineTo() has an override that accepts a\n   // CPoint, we can just pass it along.\n\n   dc.LineTo(rect.CenterPoint());\n\n   // Now, draw a line to the top right of the window. There's no\n   // CRect member which returns a CPoint for the top right of the\n   // window, so we'll reference the CPoint members directly and call\n   // the CDC::LineTo() override which takes two integers.\n\n   dc.LineTo(rect.right, rect.top);\n\n   // The top part of the \"Y\" is drawn. Now, we'll draw the stem. We\n   // start from the center point.\n\n   dc.MoveTo(rect.CenterPoint());\n\n   // and then draw to the middle of the bottom edge of the window.\n   // We'll get the x-coordinate from the x member of the CPoint\n   // returned by CenterPoint(), and the y value comes directly from\n   // the rect.\n\n   dc.LineTo(rect.CenterPoint().x, rect.bottom);\n}\n```\n  \n##  <a name=\"crect__copyrect\"></a>  CRect::CopyRect  \n Copies the `lpSrcRect` rectangle into `CRect`.  \n  \n```  \n \nvoid CopyRect(\nLPCRECT   \nlpSrcRect) throw();\n\n \n```  \n  \n### Parameters  \n `lpSrcRect`  \n Points to the [RECT](../../mfc/reference/rect-structure1.md) structure or `CRect` object that is to be copied.  \n  \n### Example  \n\n```cpp\n   CRect rectSource(35, 10, 125, 10);\n   CRect rectDest;\n\n   rectDest.CopyRect(&rectSource);\n\n   // rectDest is now set to (35, 10, 125, 10)\n\n   RECT rectSource2;\n   rectSource2.left = 0;\n   rectSource2.top = 0;\n   rectSource2.bottom = 480;\n   rectSource2.right = 640;\n\n   rectDest.CopyRect(&rectSource2);\n\n   // works against RECT structures, too!\n   // rectDest is now set to (0, 0, 640, 480)   \n```\n\n  \n##  <a name=\"crect__crect\"></a>  CRect::CRect  \n Constructs a `CRect` object.  \n  \n```  \n \n    CRect() throw();\nCRect(\n int    \n    l ,  \n    int \n    t ,  \n    int \n    r ,  \n    int \n    b) throw();\nCRect(\n const RECT& \n    srcRect) throw();\nCRect(\n LPCRECT    \n    lpSrcRect) throw();\nCRect(\n POINT    \n    point ,  \n    SIZE \n    size) throw();\nCRect(\n POINT    \n    topLeft ,  \n    POINT \n    bottomRight) throw();\n\n \n```  \n  \n### Parameters  \n *l*  \n Specifies the left position of `CRect`.  \n  \n *t*  \n Specifies the top of `CRect`.  \n  \n *r*  \n Specifies the right position of `CRect`.  \n  \n *b*  \n Specifies the bottom of `CRect`.  \n  \n *srcRect*  \n Refers to the [RECT](../../mfc/reference/rect-structure1.md) structure with the coordinates for `CRect`.  \n  \n `lpSrcRect`  \n Points to the `RECT` structure with the coordinates for `CRect`.  \n  \n `point`  \n Specifies the origin point for the rectangle to be constructed. Corresponds to the top-left corner.  \n  \n `size`  \n Specifies the displacement from the top-left corner to the bottom-right corner of the rectangle to be constructed.  \n  \n *topLeft*  \n Specifies the top-left position of `CRect`.  \n  \n *bottomRight*  \n Specifies the bottom-right position of `CRect`.  \n  \n### Remarks  \n If no arguments are given, **left**, **top**, **right**, and **bottom** members are not initialized.  \n  \n The `CRect`( **const RECT&**) and `CRect`( **LPCRECT**) constructors perform a [CopyRect](#crect__copyrect). The other constructors initialize the member variables of the object directly.  \n  \n### Example  \n```cpp\n   // default constructor doesn't initialize!\n   CRect rectUnknown;\n\n   // four-integers are left, top, right, and bottom\n   CRect rect(0, 0, 100, 50);\n   ASSERT(rect.Width() == 100);\n   ASSERT(rect.Height() == 50);\n\n   // Initialize from RECT stucture\n   RECT sdkRect;\n   sdkRect.left = 0;\n   sdkRect.top = 0;\n   sdkRect.right = 100;\n   sdkRect.bottom = 50;\n\n   CRect rect2(sdkRect);   // by reference\n   CRect rect3(&sdkRect);  // by address\n   ASSERT(rect2 == rect);\n   ASSERT(rect3 == rect);\n\n   // from a point and a size\n   CPoint pt(0, 0);\n   CSize sz(100, 50);\n   CRect rect4(pt, sz);\n   ASSERT(rect4 == rect2);\n\n   // from two points\n   CPoint ptBottomRight(100, 50);\n   CRect rect5(pt, ptBottomRight);\n   ASSERT(rect5 == rect4);   \n```\n  \n##  <a name=\"crect__deflaterect\"></a>  CRect::DeflateRect  \n `DeflateRect` deflates `CRect` by moving its sides toward its center.  \n  \n```  \n \n    void DeflateRect(\n    int \n    x ,  \n    int \n    y) throw();\nvoid DeflateRect(\n    SIZE \n    size) throw();\nvoid DeflateRect(\n    LPCRECT \n    lpRect) throw();\nvoid DeflateRect(\n    int \n    l ,  \n    int \n    t ,  \n    int \n    r ,  \n    int \n    b) throw();\n\n \n```  \n  \n### Parameters  \n *x*  \n Specifies the number of units to deflate the left and right sides of `CRect`.  \n  \n *y*  \n Specifies the number of units to deflate the top and bottom of `CRect`.  \n  \n `size`  \n A [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) or [CSize](csize-class.md) that specifies the number of units to deflate `CRect`. The `cx` value specifies the number of units to deflate the left and right sides and the `cy` value specifies the number of units to deflate the top and bottom.  \n  \n `lpRect`  \n Points to a [RECT](../../mfc/reference/rect-structure1.md) structure or `CRect` that specifies the number of units to deflate each side.  \n  \n *l*  \n Specifies the number of units to deflate the left side of `CRect`.  \n  \n *t*  \n Specifies the number of units to deflate the top of `CRect`.  \n  \n *r*  \n Specifies the number of units to deflate the right side of `CRect`.  \n  \n *b*  \n Specifies the number of units to deflate the bottom of `CRect`.  \n  \n### Remarks  \n To do this, `DeflateRect` adds units to the left and top and subtracts units from the right and bottom. The parameters of `DeflateRect` are signed values; positive values deflate `CRect` and negative values inflate it.  \n  \n The first two overloads deflate both pairs of opposite sides of `CRect` so that its total width is decreased by two times *x* (or `cx`) and its total height is decreased by two times *y* (or `cy`). The other two overloads deflate each side of `CRect` independently of the others.  \n  \n### Example  \n```cpp\n   CRect rect(10, 10, 50, 50);\n\n   rect.DeflateRect(1, 2);\n\n   ASSERT(rect.left == 11 && rect.right == 49);\n   ASSERT(rect.top == 12 && rect.bottom == 48);\n\n   CRect rect2(10, 10, 50, 50);\n   CRect rectDeflate(1, 2, 3, 4);\n\n   rect2.DeflateRect(&rectDeflate);\n   ASSERT(rect2.left == 11 && rect2.right == 47);\n   ASSERT(rect2.top == 12 && rect2.bottom == 46);   \n```\n  \n##  <a name=\"crect__equalrect\"></a>  CRect::EqualRect  \n Determines whether `CRect` is equal to the given rectangle.  \n  \n```  \n \nBOOL EqualRect(\nLPCRECT   \nlpRect) const throw();\n\n \n```  \n  \n### Parameters  \n `lpRect`  \n Points to a [RECT](../../mfc/reference/rect-structure1.md) structure or `CRect` object that contains the upper-left and lower-right corner coordinates of a rectangle.  \n  \n### Return Value  \n Nonzero if the two rectangles have the same top, left, bottom, and right values; otherwise 0.  \n  \n> [!NOTE]\n>  Both of the rectangles must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function.  \n  \n### Example  \n```cpp\n   CRect rect1(35, 150, 10, 25);\n   CRect rect2(35, 150, 10, 25);\n   CRect rect3(98, 999,  6,  3);\n\n   ASSERT(rect1.EqualRect(rect2));\n   ASSERT(!rect1.EqualRect(rect3));\n\n   // works just fine against RECTs, as well\n\n   RECT test;\n   test.left = 35;\n   test.top = 150;\n   test.right = 10;\n   test.bottom = 25;\n\n   ASSERT(rect1.EqualRect(&test));   \n```\n\n##  <a name=\"crect__height\"></a>  CRect::Height  \n Calculates the height of `CRect` by subtracting the top value from the bottom value.  \n  \n```  \nint Height() const throw();\n```  \n  \n### Return Value  \n The height of `CRect`.  \n  \n### Remarks  \n The resulting value can be negative.  \n  \n> [!NOTE]\n>  The rectangle must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangle before calling this function.  \n  \n### Example  \n\n```cpp\n   CRect rect(20, 30, 80, 70);\n\n   int nHt = rect.Height();\n\n   // nHt is now 40\n   ASSERT(nHt == 40);   \n```\n\n  \n##  <a name=\"crect__inflaterect\"></a>  CRect::InflateRect  \n `InflateRect` inflates `CRect` by moving its sides away from its center.  \n  \n```  \n \n    void InflateRect(\n    int \n    x ,  \n    int \n    y) throw();\nvoid InflateRect(\n    SIZE \n    size) throw();\nvoid InflateRect(\n    LPCRECT \n    lpRect) throw();\nvoid InflateRect(\n    int \n    l ,  \n    int \n    t ,  \n    int \n    r ,  \n    int \n    b) throw();\n\n \n```  \n  \n### Parameters  \n *x*  \n Specifies the number of units to inflate the left and right sides of `CRect`.  \n  \n *y*  \n Specifies the number of units to inflate the top and bottom of `CRect`.  \n  \n `size`  \n A [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) or [CSize](csize-class.md) that specifies the number of units to inflate `CRect`. The `cx` value specifies the number of units to inflate the left and right sides and the `cy` value specifies the number of units to inflate the top and bottom.  \n  \n `lpRect`  \n Points to a [RECT](../../mfc/reference/rect-structure1.md) structure or `CRect` that specifies the number of units to inflate each side.  \n  \n *l*  \n Specifies the number of units to inflate the left side of `CRect`.  \n  \n *t*  \n Specifies the number of units to inflate the top of `CRect`.  \n  \n *r*  \n Specifies the number of units to inflate the right side of `CRect`.  \n  \n *b*  \n Specifies the number of units to inflate the bottom of `CRect`.  \n  \n### Remarks  \n To do this, `InflateRect` subtracts units from the left and top and adds units to the right and bottom. The parameters of `InflateRect` are signed values; positive values inflate `CRect` and negative values deflate it.  \n  \n The first two overloads inflate both pairs of opposite sides of `CRect` so that its total width is increased by two times *x* (or `cx`) and its total height is increased by two times *y* (or `cy`). The other two overloads inflate each side of `CRect` independently of the others.  \n  \n### Example  \n\n```cpp\n   CRect rect(0, 0, 300, 300);\n   rect.InflateRect(50, 200);\n\n   // rect is now (-50, -200, 350, 500)\n   ASSERT(rect == CRect(-50, -200, 350, 500));   \n```\n  \n##  <a name=\"crect__intersectrect\"></a>  CRect::IntersectRect  \n Makes a `CRect` equal to the intersection of two existing rectangles.  \n  \n```  \n \n    BOOL IntersectRect(\n    LPCRECT \n    lpRect1 ,  \n    LPCRECT \n    lpRect2) throw();\n\n \n```  \n  \n### Parameters  \n `lpRect1`  \n Points to a [RECT](../../mfc/reference/rect-structure1.md) structure or `CRect` object that contains a source rectangle.  \n  \n `lpRect2`  \n Points to a `RECT` structure or `CRect` object that contains a source rectangle.  \n  \n### Return Value  \n Nonzero if the intersection is not empty; 0 if the intersection is empty.  \n  \n### Remarks  \n The intersection is the largest rectangle contained in both existing rectangles.  \n  \n> [!NOTE]\n>  Both of the rectangles must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function.  \n  \n### Example  \n\n```cpp\n   CRect rectOne(125,   0, 150, 200);\n   CRect rectTwo(0,  75, 350,  95);\n   CRect rectInter;\n\n   rectInter.IntersectRect(rectOne, rectTwo);\n\n   // rectInter is now (125, 75, 150, 95)\n\n   ASSERT(rectInter == CRect(125, 75, 150, 95));\n\n   // operator &= can do the same task:\n\n   CRect rectInter2 = rectOne;\n   rectInter2 &= rectTwo;\n   ASSERT(rectInter2 == CRect(125, 75, 150, 95));   \n```\n  \n##  <a name=\"crect__isrectempty\"></a>  CRect::IsRectEmpty  \n Determines whether `CRect` is empty.  \n  \n```  \nBOOL IsRectEmpty() const throw();\n```  \n  \n### Return Value  \n Nonzero if `CRect` is empty; 0 if `CRect` is not empty.  \n  \n### Remarks  \n A rectangle is empty if the width and/or height are 0 or negative. Differs from `IsRectNull`, which determines whether all coordinates of the rectangle are zero.  \n  \n> [!NOTE]\n>  The rectangle must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangle before calling this function.  \n  \n### Example  \n\n```cpp\n   CRect rectNone(0, 0, 0, 0);\n   CRect rectSome(35, 50, 135, 150);\n\n   ASSERT(rectNone.IsRectEmpty());\n   ASSERT(!rectSome.IsRectEmpty());\n\n   CRect rectEmpty(35, 35, 35, 35);\n   ASSERT(rectEmpty.IsRectEmpty());   \n```\n\n  \n##  <a name=\"crect__isrectnull\"></a>  CRect::IsRectNull  \n Determines whether the top, left, bottom, and right values of `CRect` are all equal to 0.  \n  \n```  \nBOOL IsRectNull() const throw();\n```  \n  \n### Return Value  \n Nonzero if `CRect`'s top, left, bottom, and right values are all equal to 0; otherwise 0.  \n  \n### Remarks  \n Differs from `IsRectEmpty`, which determines whether the rectangle is empty.  \n  \n### Example  \n\n```cpp\n   CRect rectNone(0, 0, 0, 0);\n   CRect rectSome(35, 50, 135, 150);\n\n   ASSERT(rectNone.IsRectNull());\n   ASSERT(!rectSome.IsRectNull());\n\n   // note that null means _all_ zeros\n\n   CRect rectNotNull(0, 0, 35, 50);\n   ASSERT(!rectNotNull.IsRectNull());   \n```\n  \n##  <a name=\"crect__movetox\"></a>  CRect::MoveToX  \n Call this function to move the rectangle to the absolute x-coordinate specified by *x*.  \n  \n```  \n \nvoid MoveToX(\nint   \nx) throw();\n\n \n```  \n  \n### Parameters  \n *x*  \n The absolute x-coordinate for the upper-left corner of the rectangle.  \n  \n### Example  \n\n```cpp\n   CRect rect(0, 0, 100, 100);\n\n   rect.MoveToX(10);\n\n   // rect is now (10, 0, 110, 100);\n   ASSERT(rect == CRect(10, 0, 110, 100));   \n```\n  \n##  <a name=\"crect__movetoxy\"></a>  CRect::MoveToXY  \n Call this function to move the rectangle to the absolute x- and y-coordinates specified.  \n  \n```  \n \n    void MoveToXY(\n    int \n    x ,  \n    int \n    y) throw();\nvoid MoveToXY(\n    POINT \n    point) throw();\n\n \n```  \n  \n### Parameters  \n *x*  \n The absolute x-coordinate for the upper-left corner of the rectangle.  \n  \n *y*  \n The absolute y-coordinate for the upper-left corner of the rectangle.  \n  \n `point`  \n A **POINT** structure specifying the absolute upper-left corner of the rectangle.  \n  \n### Example  \n\n```cpp\n   CRect rect(0, 0, 100, 100);\n\n   rect.MoveToXY(10, 10);\n\n   // rect is now (10, 10, 110, 110);\n   ASSERT(rect == CRect(10, 10, 110, 110));   \n```\n\n  \n##  <a name=\"crect__movetoy\"></a>  CRect::MoveToY  \n Call this function to move the rectangle to the absolute y-coordinate specified by *y*.  \n  \n```  \n \nvoid MoveToY(\nint   \ny) throw();\n\n \n```  \n  \n### Parameters  \n *y*  \n The absolute y-coordinate for the upper-left corner of the rectangle.  \n  \n### Example  \n\n```cpp\n   CRect rect(0, 0, 100, 100);\n\n   rect.MoveToY(10);\n\n   // rect is now (0, 10, 100, 110);\n   ASSERT(rect == CRect(0, 10, 100, 110));   \n```\n\n  \n##  <a name=\"crect__normalizerect\"></a>  CRect::NormalizeRect  \n Normalizes `CRect` so that both the height and width are positive.  \n  \n```  \nvoid NormalizeRect() throw();\n```  \n  \n### Remarks  \n The rectangle is normalized for fourth-quadrant positioning, which Windows typically uses for coordinates. `NormalizeRect` compares the top and bottom values, and swaps them if the top is greater than the bottom. Similarly, it swaps the left and right values if the left is greater than the right. This function is useful when dealing with different mapping modes and inverted rectangles.  \n  \n> [!NOTE]\n>  The following `CRect` member functions require normalized rectangles in order to work properly: [Height](#crect__height), [Width](#crect__width), [Size](#crect__size), [IsRectEmpty](#crect__isrectempty), [PtInRect](#crect__ptinrect), [EqualRect](#crect__equalrect), [UnionRect](#crect__unionrect), [IntersectRect](#crect__intersectrect), [SubtractRect](#crect__subtractrect), [operator ==](#crect__operator__eq_eq), [operator !=](#crect__operator__neq), [operator &#124;](#crect__operator__or), [operator &#124;=](#crect__operator__or_eq), [operator &](#crect__operator__amp_), and [operator &=](#crect__operator__amp__eq).  \n  \n### Example  \n\n```cpp\n   CRect rect1(110, 100, 250, 310);\n   CRect rect2(250, 310, 110, 100);\n\n   rect1.NormalizeRect();\n   rect2.NormalizeRect();\n\n   // rect1 should be unchanged\n   // rect2 becomes (110, 100, 250, 310)\n\n   ASSERT(rect1 == rect2);   \n```\n  \n##  <a name=\"crect__offsetrect\"></a>  CRect::OffsetRect  \n Moves `CRect` by the specified offsets.  \n  \n```  \n \n    void OffsetRect(\n    int \n    x ,  \n    int \n    y) throw();\nvoid OffsetRect(\n    POINT \n    point) throw();\nvoid OffsetRect(\n    SIZE \n    size) throw();\n\n \n```  \n  \n### Parameters  \n *x*  \n Specifies the amount to move left or right. It must be negative to move left.  \n  \n *y*  \n Specifies the amount to move up or down. It must be negative to move up.  \n  \n `point`  \n Contains a [POINT](../../mfc/reference/point-structure1.md) structure or [CPoint](cpoint-class.md) object specifying both dimensions by which to move.  \n  \n `size`  \n Contains a [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure or [CSize](csize-class.md) object specifying both dimensions by which to move.  \n  \n### Remarks  \n Moves `CRect`*x* units along the x-axis and *y* units along the y-axis. The *x* and *y* parameters are signed values, so `CRect` can be moved left or right and up or down.  \n  \n### Example  \n\n```cpp\n   CRect rect(0, 0, 35, 35);\n\n   rect.OffsetRect(230, 230);\n\n   // rect is now (230, 230, 265, 265)\n   ASSERT(rect == CRect(230, 230, 265, 265));   \n```\n\n  \n##  <a name=\"crect__operator_lpcrect\"></a>  CRect::operator LPCRECT  \n Converts a `CRect` to an [LPCRECT](../../mfc/reference/data-types-mfc.md).  \n\n  \n```  operator LPCRECT() const throw();\n```  \n  \n### Remarks  \n When you use this function, you don't need the address-of ( **&**) operator. This operator will be automatically used when you pass a `CRect` object to a function that expects an **LPCRECT**.  \n  \n### Example  \n [!CODE [NVC_ATLMFC_Utilities#58](../codesnippet/vs_snippets_cpp/nvc_atlmfc_utilities#58)]  \n  \n##  <a name=\"crect__operator_lprect\"></a>  CRect::operator LPRECT  \n Converts a `CRect` to an [LPRECT](../../mfc/reference/data-types-mfc.md).  \n\n  \n```  operator LPRECT() throw();\n```  \n  \n### Remarks  \n When you use this function, you don't need the address-of ( **&**) operator. This operator will be automatically used when you pass a `CRect` object to a function that expects an `LPRECT`.  \n  \n### Example  \n See the example for [CRect::operator LPCRECT](#crect__operator_lpcrect).  \n  \n##  <a name=\"crect__operator__eq\"></a>  CRect::operator =  \n Assigns *srcRect* to `CRect`.  \n  \n```  \n \nvoid operator=(\nconst RECT& \nsrcRect) throw();\n\n \n```  \n  \n### Parameters  \n *srcRect*  \n Refers to a source rectangle. Can be a [RECT](../../mfc/reference/rect-structure1.md) or `CRect`.  \n  \n### Example  \n\n```cpp\n   CRect rect(0, 0, 127, 168);\n   CRect rect2;\n\n   rect2 = rect;\n\n   ASSERT(rect2 == CRect(0, 0, 127, 168));   \n```\n\n  \n##  <a name=\"crect__operator__eq_eq\"></a>  CRect::operator ==  \n Determines whether `rect` is equal to `CRect` by comparing the coordinates of their upper-left and lower-right corners.  \n  \n```  \n \nBOOL operator==(\nconst RECT& \nrect) const throw();\n\n \n```  \n  \n### Parameters  \n `rect`  \n Refers to a source rectangle. Can be a [RECT](../../mfc/reference/rect-structure1.md) or `CRect`.  \n  \n### Return Value  \n Nonzero if equal; otherwise 0.  \n  \n### Remarks  \n  \n> [!NOTE]\n>  Both of the rectangles must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function.  \n  \n### Example  \n\n```cpp\n   CRect rect1(35, 150, 10, 25);\n   CRect rect2(35, 150, 10, 25);\n   CRect rect3(98, 999,  6,  3);\n\n   ASSERT(rect1 == rect2);\n\n   // works just fine against RECTs, as well\n\n   RECT test;\n   test.left = 35;\n   test.top = 150;\n   test.right = 10;\n   test.bottom = 25;\n\n   ASSERT(rect1 == test);   \n```\n\n  \n##  <a name=\"crect__operator__neq\"></a>  CRect::operator !=  \n Determines whether `rect` is not equal to `CRect` by comparing the coordinates of their upper-left and lower-right corners.  \n  \n```  \n \nBOOL operator!=(\nconst RECT& \nrect) const throw();\n\n \n```  \n  \n### Parameters  \n `rect`  \n Refers to a source rectangle. Can be a [RECT](../../mfc/reference/rect-structure1.md) or `CRect`.  \n  \n### Return Value  \n Nonzero if not equal; otherwise 0.  \n  \n### Remarks  \n  \n> [!NOTE]\n>  Both of the rectangles must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function.  \n  \n### Example  \n\n```cpp\n   CRect rect1(35, 150, 10, 25);\n   CRect rect2(35, 150, 10, 25);\n   CRect rect3(98, 999,  6,  3);\n\n   ASSERT(rect1 != rect3);\n\n   // works just fine against RECTs, as well\n\n   RECT test;\n   test.left = 35;\n   test.top = 150;\n   test.right = 10;\n   test.bottom = 25;\n\n   ASSERT(rect3 != test);   \n```\n  \n##  <a name=\"crect__operator__add_eq\"></a>  CRect::operator +=  \n The first two overloads move `CRect` by the specified offsets.  \n  \n```  \n \nvoid operator+=(\nPOINT   \npoint) throw();\n\nvoid operator+=(\nSIZE   \nsize) throw();\n\nvoid operator+=(\nLPCRECT   \nlpRect) throw();\n\n \n```  \n  \n### Parameters  \n `point`  \n A [POINT](../../mfc/reference/point-structure1.md) structure or [CPoint](cpoint-class.md) object that specifies the number of units to move the rectangle.  \n  \n `size`  \n A [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure or [CSize](csize-class.md) object that specifies the number of units to move the rectangle.  \n  \n `lpRect`  \n Points to a [RECT](../../mfc/reference/rect-structure1.md) structure or `CRect` object that contains the number of units to inflate each side of `CRect`.  \n  \n### Remarks  \n The parameter's *x* and *y* (or `cx` and `cy`) values are added to `CRect`.  \n  \n The third overload inflates `CRect` by the number of units specifed in each member of the parameter.  \n  \n### Example  \n\n```cpp\n   CRect   rect1(100, 235, 200, 335);\n   CPoint   pt(35, 65);\n   CRect   rect2(135, 300, 235, 400);\n\n   rect1 += pt;\n\n   ASSERT(rect1 == rect2);   \n```\n  \n##  <a name=\"crect__operator_-_eq\"></a>  CRect::operator -=  \n The first two overloads move `CRect` by the specified offsets.  \n  \n```  \n \nvoid operator-=(\nPOINT   \npoint) throw();\n\nvoid operator-=(\nSIZE   \nsize) throw();\n\nvoid operator-=(\nLPCRECT   \nlpRect) throw();\n\n \n```  \n  \n### Parameters  \n `point`  \n A [POINT](../../mfc/reference/point-structure1.md) structure or [CPoint](cpoint-class.md) object that specifies the number of units to move the rectangle.  \n  \n `size`  \n A [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure or [CSize](csize-class.md) object that specifies the number of units to move the rectangle.  \n  \n `lpRect`  \n Points to a [RECT](../../mfc/reference/rect-structure1.md) structure or `CRect` object that contains the number of units to deflate each side of `CRect`.  \n  \n### Remarks  \n The parameter's *x* and *y* (or `cx` and `cy`) values are subtracted from `CRect`.  \n  \n The third overload deflates `CRect` by the number of units specifed in each member of the parameter. Note that this overload functions like [DeflateRect](#crect__deflaterect).  \n  \n### Example  \n\n```cpp\n   CRect   rect1(100, 235, 200, 335);\n   CPoint   pt(35, 65);\n\n   rect1 -= pt;\n\n   CRect   rectResult(65, 170, 165, 270);\n   ASSERT(rect1 == rectResult);   \n```\n  \n##  <a name=\"crect__operator__amp__eq\"></a>  CRect::operator &amp;=  \n Sets `CRect` equal to the intersection of `CRect` and `rect`.  \n  \n```  \n \nvoid operator&=(\nconst RECT& \nrect) throw();\n\n \n```  \n  \n### Parameters  \n `rect`  \n Contains a [RECT](../../mfc/reference/rect-structure1.md) or `CRect`.  \n  \n### Remarks  \n The intersection is the largest rectangle that is contained in both rectangles.  \n  \n> [!NOTE]\n>  Both of the rectangles must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function.  \n  \n### Example  \n See the example for [CRect::IntersectRect](#crect__intersectrect).  \n  \n##  <a name=\"crect__operator__or_eq\"></a>  CRect::operator &#124;=  \n Sets `CRect` equal to the union of `CRect` and `rect`.  \n  \n```  \n \nvoid operator|=(\nconst RECT& \nrect) throw();\n\n \n```  \n  \n### Parameters  \n `rect`  \n Contains a `CRect` or [RECT](../../mfc/reference/rect-structure1.md).  \n  \n### Remarks  \n The union is the smallest rectangle that contains both source rectangles.  \n  \n> [!NOTE]\n>  Both of the rectangles must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function.  \n  \n### Example  \n\n```cpp\n   CRect   rect1(100,   0, 200, 300);\n   CRect   rect2( 0, 100, 300, 200);\n\n   rect1 |= rect2;\n\n   CRect   rectResult(0, 0, 300, 300);\n   ASSERT(rectResult == rect1);   \n```\n\n  \n##  <a name=\"crect__operator__add\"></a>  CRect::operator +  \n The first two overloads return a `CRect` object that is equal to `CRect` displaced by the specified offsets.  \n  \n```  \n \nCRect operator+(\nPOINT   \npoint) const throw();\n\nCRect operator+(\nLPCRECT   \nlpRect) const throw();\n\nCRect operator+(\nSIZE   \nsize) const throw();\n\n \n```  \n  \n### Parameters  \n `point`  \n A [POINT](../../mfc/reference/point-structure1.md) structure or [CPoint](cpoint-class.md) object that specifies the number of units to move the return value.  \n  \n `size`  \n A [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure or [CSize](csize-class.md) object that specifies the number of units to move the return value.  \n  \n `lpRect`  \n Points to a [RECT](../../mfc/reference/rect-structure1.md) structure or `CRect` object that contains the number of units to inflate each side of the return value.  \n  \n### Return Value  \n The `CRect` resulting from moving or inflating `CRect` by the number of units specified in the parameter.  \n  \n### Remarks  \n The parameter's *x* and *y* (or `cx` and `cy`) parameters are added to `CRect`'s position.  \n  \n The third overload returns a new `CRect` that is equal to `CRect` inflated by the number of units specifed in each member of the parameter.  \n  \n### Example  \n\n```cpp\n   CRect   rect1(100, 235, 200, 335);\n   CPoint   pt(35, 65);\n   CRect   rect2;\n\n   rect2 = rect1 + pt;\n\n   CRect   rectResult(135, 300, 235, 400);\n\n   ASSERT(rectResult == rect2);   \n```\n\n  \n##  <a name=\"crect__operator_-\"></a>  CRect::operator -  \n The first two overloads return a `CRect` object that is equal to `CRect` displaced by the specified offsets.  \n  \n```  \n \nCRect operator-(\nPOINT   \npoint) const throw();\n\nCRect operator-(\nSIZE   \nsize) const throw();\n\nCRect operator-(\nLPCRECT   \nlpRect) const throw();\n\n \n```  \n  \n### Parameters  \n `point`  \n A [POINT](../../mfc/reference/point-structure1.md) structure or `CPoint` object that specifies the number of units to move the return value.  \n  \n `size`  \n A [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure or `CSize` object that specifies the number of units to move the return value.  \n  \n `lpRect`  \n Points to a [RECT](../../mfc/reference/rect-structure1.md) structure or `CRect` object that contains the number of units to deflate each side of the return value.  \n  \n### Return Value  \n The `CRect` resulting from moving or deflating `CRect` by the number of units specified in the parameter.  \n  \n### Remarks  \n The parameter's *x* and *y* (or `cx` and `cy`) parameters are subtracted from `CRect`'s position.  \n  \n The third overload returns a new `CRect` that is equal to `CRect` deflated by the number of units specifed in each member of the parameter. Note that this overload functions like [DeflateRect](#crect__deflaterect), not [SubtractRect](#crect__subtractrect).  \n  \n### Example  \n\n```cpp\n   CRect   rect1(100, 235, 200, 335);\n   CPoint   pt(35, 65);\n   CRect   rect2;\n\n   rect2 = rect1 - pt;\n\n   CRect   rectResult(65, 170, 165, 270);\n\n   ASSERT(rect2 == rectResult);   \n```\n\n  \n##  <a name=\"crect__operator__amp_\"></a>  CRect::operator &amp;  \n Returns a `CRect` that is the intersection of `CRect` and *rect2*.  \n  \n```  \n \nCRect operator&(\nconst RECT& \nrect2) const throw();\n\n \n```  \n  \n### Parameters  \n *rect2*  \n Contains a [RECT](../../mfc/reference/rect-structure1.md) or `CRect`.  \n  \n### Return Value  \n A `CRect` that is the intersection of `CRect` and *rect2*.  \n  \n### Remarks  \n The intersection is the largest rectangle that is contained in both rectangles.  \n  \n> [!NOTE]\n>  Both of the rectangles must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function.  \n  \n### Example  \n\n```cpp\n   CRect   rect1(100,   0, 200, 300);\n   CRect   rect2( 0, 100, 300, 200);\n   CRect   rect3;\n\n   rect3 = rect1 & rect2;\n\n   CRect   rectResult(100, 100, 200, 200);\n   ASSERT(rectResult == rect3);   \n```\n\n  \n##  <a name=\"crect__operator__or\"></a>  CRect::operator &#124;  \n Returns a `CRect` that is the union of `CRect` and *rect2*.  \n  \n```  \n \nCRect operator|(\nconst RECT& \nrect2) const throw();\n\n \n```  \n  \n### Parameters  \n *rect2*  \n Contains a [RECT](../../mfc/reference/rect-structure1.md) or `CRect`.  \n  \n### Return Value  \n A `CRect` that is the union of `CRect` and *rect2*.  \n  \n### Remarks  \n The union is the smallest rectangle that contains both rectangles.  \n  \n> [!NOTE]\n>  Both of the rectangles must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function.  \n  \n### Example  \n\n```cpp\n   CRect   rect1(100,   0, 200, 300);\n   CRect   rect2( 0, 100, 300, 200);\n   CRect   rect3;\n\n   rect3 = rect1 | rect2;\n\n   CRect   rectResult(0, 0, 300, 300);\n   ASSERT(rectResult == rect3);   \n```\n\n  \n##  <a name=\"crect__ptinrect\"></a>  CRect::PtInRect  \n Determines whether the specified point lies within `CRect`.  \n  \n```  \n \nBOOL PtInRect(\nPOINT   \npoint) const throw();\n\n \n```  \n  \n### Parameters  \n `point`  \n Contains a [POINT](../../mfc/reference/point-structure1.md) structure or [CPoint](cpoint-class.md) object.  \n  \n### Return Value  \n Nonzero if the point lies within `CRect`; otherwise 0.  \n  \n### Remarks  \n A point is within `CRect` if it lies on the left or top side or is within all four sides. A point on the right or bottom side is outside `CRect`.  \n  \n> [!NOTE]\n>  The rectangle must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangle before calling this function.  \n  \n### Example  \n\n```cpp\n   CRect rect(5, 5, 100, 100);\n   CPoint pt1(35, 50);\n   CPoint pt2(125, 298);\n\n   // this is true, because pt1 is inside the rectangle\n   ASSERT(rect.PtInRect(pt1));\n\n   // this is NOT true, because pt2 is outside the rectangle\n   ASSERT(!rect.PtInRect(pt2));\n\n   // note that the right and the bottom aren't inside\n   ASSERT(!rect.PtInRect(CPoint(35, 100)));\n   ASSERT(!rect.PtInRect(CPoint(100, 98)));\n\n   // but the top and the left are inside\n   ASSERT(rect.PtInRect(CPoint(5, 65)));\n   ASSERT(rect.PtInRect(CPoint(88, 5)));\n\n   // and that PtInRect() works against a POINT, too\n   POINT pt;\n   pt.x = 35;\n   pt.y = 50;\n   ASSERT(rect.PtInRect(pt));   \n```\n  \n##  <a name=\"crect__setrect\"></a>  CRect::SetRect  \n Sets the dimensions of `CRect` to the specified coordinates.  \n  \n```  \n \n    void SetRect(\n    int \n    x1 ,  \n    int \n    y1 ,  \n    int \n    x2 ,  \n    int \n    y2) throw();\n\n \n```  \n  \n### Parameters  \n `x1`  \n Specifies the x-coordinate of the upper-left corner.  \n  \n `y1`  \n Specifies the y-coordinate of the upper-left corner.  \n  \n `x2`  \n Specifies the x-coordinate of the lower-right corner.  \n  \n `y2`  \n Specifies the y-coordinate of the lower-right corner.  \n  \n### Example  \n\n```cpp\n   CRect rect;\n   rect.SetRect(256, 256, 512, 512);\n\n   ASSERT(rect == CRect(256, 256, 512, 512));   \n```\n\n  \n##  <a name=\"crect__setrectempty\"></a>  CRect::SetRectEmpty  \n Makes `CRect` a null rectangle by setting all coordinates to zero.  \n  \n```  \nvoid SetRectEmpty() throw();\n```  \n  \n### Example  \n```cpp\nCRect rect;\nrect.SetRectEmpty();\n\n// rect is now (0, 0, 0, 0)\nASSERT(rect.IsRectEmpty());   \n```\n  \n##  <a name=\"crect__size\"></a>  CRect::Size  \n The `cx` and `cy` members of the return value contain the height and width of `CRect`.  \n  \n```  \nCSize Size() const throw();\n```  \n  \n### Return Value  \n A [CSize](csize-class.md) object that contains the size of `CRect`.  \n  \n### Remarks  \n Either the height or width can be negative.  \n  \n> [!NOTE]\n>  The rectangle must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangle before calling this function.  \n  \n### Example  \n```cpp\n   CRect rect(10, 10, 50, 50);\n   CSize sz = rect.Size();\n   ASSERT(sz.cx == 40 && sz.cy == 40);   \n```\n>>>>>>> master\n  \n##  <a name=\"crect__subtractrect\"></a>  CRect::SubtractRect  \n Makes the dimensions of the **CRect** equal to the subtraction of `lpRectSrc2` from `lpRectSrc1`.  \n  \n```  \n \n    BOOL SubtractRect(\n    LPCRECT \n    lpRectSrc1 ,  \n    LPCRECT \n    lpRectSrc2) throw();\n\n \n```  \n  \n### Parameters  \n `lpRectSrc1`  \n Points to the [RECT](../../mfc/reference/rect-structure1.md) structure or `CRect` object from which a rectangle is to be subtracted.  \n  \n `lpRectSrc2`  \n Points to the `RECT` structure or `CRect` object that is to be subtracted from the rectangle pointed to by the `lpRectSrc1` parameter.  \n  \n### Return Value  \n Nonzero if the function is successful; otherwise 0.  \n  \n### Remarks  \n The subtraction is the smallest rectangle that contains all of the points in `lpRectScr1` that are not in the intersection of `lpRectScr1` and *lpRectScr2*.  \n  \n The rectangle specified by `lpRectSrc1` will be unchanged if the rectangle specified by `lpRectSrc2` doesn't completely overlap the rectangle specified by *lpRectSrc1* in at least one of the x- or y-directions.  \n  \n For example, if `lpRectSrc1` were (10,10, 100,100) and `lpRectSrc2` were (50,50, 150,150), the rectangle pointed to by `lpRectSrc1` would be unchanged when the function returned. If `lpRectSrc1` were (10,10, 100,100) and `lpRectSrc2` were (50,10, 150,150), however, the rectangle pointed to by `lpRectSrc1` would contain the coordinates (10,10, 50,100) when the function returned.  \n  \n `SubtractRect` is not the same as [operator -](#crect__operator_-) nor [operator -=](#crect__operator_-_eq). Neither of these operators ever calls `SubtractRect`.  \n  \n> [!NOTE]\n>  Both of the rectangles must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function.  \n  \n### Example  \n```cpp\n   RECT   rectOne;\n   RECT   rectTwo;\n\n   rectOne.left = 10;\n   rectOne.top = 10;\n   rectOne.bottom = 100;\n   rectOne.right = 100;\n\n   rectTwo.left = 50;\n   rectTwo.top = 10;\n   rectTwo.bottom = 150;\n   rectTwo.right = 150;\n\n   CRect   rectDiff;\n\n   rectDiff.SubtractRect(&rectOne, &rectTwo);\n\n   CRect   rectResult(10, 10, 50, 100);\n\n   ASSERT(rectDiff == rectResult);\n\n   // works for CRect, too, since there is\n   // implicit CRect -> LPCRECT conversion\n\n   CRect rect1(10, 10, 100, 100);\n   CRect rect2(50, 10, 150, 150);\n   CRect rectOut;\n\n   rectOut.SubtractRect(rect1, rect2);\n   ASSERT(rectResult == rectOut);   \n```\n  \n##  <a name=\"crect__topleft\"></a>  CRect::TopLeft  \n The coordinates are returned as a reference to a [CPoint](cpoint-class.md) object that is contained in `CRect`.  \n  \n```  \n \nCPoint& TopLeft() throw();\n\nconst CPoint& TopLeft() const throw();\n\n \n```  \n  \n### Return Value  \n The coordinates of the top-left corner of the rectangle.  \n  \n### Remarks  \n You can use this function to either get or set the top-left corner of the rectangle. Set the corner by using this function on the left side of the assignment operator.  \n  \n### Example  \n See the example for [CRect::CenterPoint](#crect__centerpoint).  \n  \n##  <a name=\"crect__unionrect\"></a>  CRect::UnionRect  \n Makes the dimensions of `CRect` equal to the union of the two source rectangles.  \n  \n```  \n \n    BOOL UnionRect(\n    LPCRECT \n    lpRect1 ,  \n    LPCRECT \n    lpRect2) throw();\n\n \n```  \n  \n### Parameters  \n `lpRect1`  \n Points to a [RECT](../../mfc/reference/rect-structure1.md) or `CRect` that contains a source rectangle.  \n  \n `lpRect2`  \n Points to a `RECT` or `CRect` that contains a source rectangle.  \n  \n### Return Value  \n Nonzero if the union is not empty; 0 if the union is empty.  \n  \n### Remarks  \n The union is the smallest rectangle that contains both source rectangles.  \n  \n Windows ignores the dimensions of an empty rectangle; that is, a rectangle that has no height or has no width.  \n  \n> [!NOTE]\n>  Both of the rectangles must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangles before calling this function.  \n  \n### Example  \n```cpp\n   CRect   rect1(100,   0, 200, 300);\n   CRect   rect2(0, 100, 300, 200);\n   CRect   rect3;\n\n   rect3.UnionRect(&rect1, &rect2);\n\n   CRect   rectResult(0, 0, 300, 300);\n   ASSERT(rectResult == rect3);   \n```\n>>>>>>> master\n  \n##  <a name=\"crect__width\"></a>  CRect::Width  \n Calculates the width of `CRect` by subtracting the left value from the right value.  \n  \n```  \nint Width() const throw();\n```  \n  \n### Return Value  \n The width of `CRect`.  \n  \n### Remarks  \n The width can be negative.  \n  \n> [!NOTE]\n>  The rectangle must be normalized or this function may fail. You can call [NormalizeRect](#crect__normalizerect) to normalize the rectangle before calling this function.  \n  \n### Example  \n\n```cpp\n   CRect rect(20, 30, 80, 70);\n\n   int nWid = rect.Width();\n\n   // nWid is now 60\n   ASSERT(nWid == 60);   \n```\n>>>>>>> master\n  \n## See Also  \n [CPoint Class](cpoint-class.md)   \n [CSize Class](csize-class.md)   \n [RECT](../../mfc/reference/rect-structure1.md)\n\n\n"}