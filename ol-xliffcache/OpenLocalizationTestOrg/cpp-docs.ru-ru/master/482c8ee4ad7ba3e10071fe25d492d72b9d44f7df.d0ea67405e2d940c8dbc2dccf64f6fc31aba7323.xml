{"nodes":[{"pos":[12,58],"content":"operator== (vector) (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"operator== (vector) (STL-CLR) | Microsoft Docs","pos":[0,46]}]},{"content":"operator== (vector) (STL/CLR)","pos":[644,673]},{"content":"Vector equal comparison.","pos":[674,698]},{"content":"Syntax","pos":[707,713]},{"content":"Parameters","pos":[842,852]},{"content":"left","pos":[856,860]},{"content":"Left container to compare.","pos":[864,890]},{"content":"right","pos":[897,902]},{"content":"Right container to compare.","pos":[906,933]},{"content":"Remarks","pos":[942,949]},{"content":"The operator function returns true only if the sequences controlled by <ph id=\"ph1\">`left`</ph> and <ph id=\"ph2\">`right`</ph> have the same length and, for each position <ph id=\"ph3\">`i`</ph>, <ph id=\"ph4\">`left``[i] ==`</ph> <ph id=\"ph5\">`right``[i]`</ph>.","pos":[953,1120],"source":"The operator function returns true only if the sequences controlled by `left` and `right` have the same length and, for each position `i`, `left``[i] ==` `right``[i]`."},{"content":"You use it to test whether <ph id=\"ph1\">`left`</ph> is ordered the same as <ph id=\"ph2\">`right`</ph> when the two vectors are compared element by element.","pos":[1121,1239],"source":" You use it to test whether `left` is ordered the same as `right` when the two vectors are compared element by element."},{"content":"Example","pos":[1248,1255]},{"content":"Requirements","pos":[2278,2290]},{"pos":[2294,2322],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/vector&gt;","source":"**Header:** \\<cliext/vector>"},{"pos":[2329,2350],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2359,2367]},{"content":"vector (STL/CLR)","pos":[2372,2388]},{"content":"operator!= (vector) (STL/CLR)","pos":[2424,2453]},{"content":"operator<ph id=\"ph1\">\\&lt;</ph> (vector) (STL/CLR)","pos":[2509,2538],"source":"operator\\< (vector) (STL/CLR)"},{"content":"operator&gt;= (vector) (STL/CLR)","pos":[2593,2622],"source":"operator>= (vector) (STL/CLR)"},{"content":"operator&gt; (vector) (STL/CLR)","pos":[2684,2712],"source":"operator> (vector) (STL/CLR)"},{"content":"operator&lt;= (vector) (STL/CLR)","pos":[2770,2799],"source":"operator<= (vector) (STL/CLR)"}],"content":"---\ntitle: \"operator== (vector) (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::vector::operator==\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"operator== member [STL/CLR]\"\nms.assetid: b552c9a1-8d06-4090-b394-d08a84947594\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# operator== (vector) (STL/CLR)\nVector equal comparison.  \n  \n## Syntax  \n  \n```  \ntemplate<typename Value>  \n    bool operator==(vector<Value>% left,  \n        vector<Value>% right);  \n```  \n  \n#### Parameters  \n left  \n Left container to compare.  \n  \n right  \n Right container to compare.  \n  \n## Remarks  \n The operator function returns true only if the sequences controlled by `left` and `right` have the same length and, for each position `i`, `left``[i] ==` `right``[i]`. You use it to test whether `left` is ordered the same as `right` when the two vectors are compared element by element.  \n  \n## Example  \n  \n```  \n// cliext_vector_operator_eq.cpp   \n// compile with: /clr   \n#include <cliext/vector>   \n  \nint main()   \n    {   \n    cliext::vector<wchar_t> c1;   \n    c1.push_back(L'a');   \n    c1.push_back(L'b');   \n    c1.push_back(L'c');   \n  \n// display contents \" a b c\"   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// assign to a new container   \n    cliext::vector<wchar_t> c2;   \n    c2.push_back(L'a');   \n    c2.push_back(L'b');   \n    c2.push_back(L'd');   \n  \n// display contents \" a b d\"   \n    for each (wchar_t elem in c2)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n    System::Console::WriteLine(\"[a b c] == [a b c] is {0}\",   \n        c1 == c1);   \n    System::Console::WriteLine(\"[a b c] == [a b d] is {0}\",   \n        c1 == c2);   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n a b c  \n a b d  \n[a b c] == [a b c] is True  \n[a b c] == [a b d] is False  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/vector>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [vector (STL/CLR)](../dotnet/vector-stl-clr.md)   \n [operator!= (vector) (STL/CLR)](../dotnet/operator-inequality-vector-stl-clr.md)   \n [operator\\< (vector) (STL/CLR)](../dotnet/operator-less-than-vector-stl-clr.md)   \n [operator>= (vector) (STL/CLR)](../dotnet/operator-greater-or-equal-vector-stl-clr.md)   \n [operator> (vector) (STL/CLR)](../dotnet/operator-greater-than-vector-stl-clr.md)   \n [operator<= (vector) (STL/CLR)](../dotnet/operator-less-or-equal-vector-stl-clr.md)"}