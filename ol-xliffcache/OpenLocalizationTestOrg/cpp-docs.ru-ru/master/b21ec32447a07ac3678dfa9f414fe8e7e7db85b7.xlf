<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b21ec32447a07ac3678dfa9f414fe8e7e7db85b7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\reference\crbtree-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">825fd7af00f189024bcdbfc14ddb62aaf75af9a1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">01fd75e5bdfe92774e3c86192598d6c7941dc94b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CRBTree Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CRBTree Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This class provides methods for creating and utilizing a Red-Black tree.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The key element type.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>V</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The value element type.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The code used to copy or move key elements.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CElementTraits Class<ept id="p1">](../../atl/reference/celementtraits-class.md)</ept> for more details.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The code used to copy or move value elements.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Public Typedefs</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CRBTree::KINARGTYPE</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Type used when a key is passed as an input argument.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CRBTree::KOUTARGTYPE</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Type used when a key is returned as an output argument.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CRBTree::VINARGTYPE</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Type used when a value is passed as an input argument.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CRBTree::VOUTARGTYPE</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Type used when a value is passed as an output argument.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Public Classes</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>CRBTree::CPair Class</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A class containing the key and value elements.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CRBTree::~CRBTree</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The destructor.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>CRBTree::FindFirstKeyAfter</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Call this method to find the position of the element that uses the next available key.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>CRBTree::GetAt</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Call this method to get the element at a given position in the tree.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>CRBTree::GetCount</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Call this method to get the number of elements in the tree.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>CRBTree::GetHeadPosition</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Call this method to get the position value for the element at the head of the tree.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>CRBTree::GetKeyAt</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Call this method to get the key from a given position in the tree.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>CRBTree::GetNext</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Call this method to obtain a pointer to an element stored in the <ph id="ph1">`CRBTree`</ph> object, and advance the position to the next element.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>CRBTree::GetNextAssoc</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Call this method to get the key and value of an element stored in the map and advance the position to the next element.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>CRBTree::GetNextKey</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Call this method to get the key of an element stored in the tree and advance the position to the next element.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>CRBTree::GetNextValue</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Call this method to get the value of an element stored in the tree and advance the position to the next element.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>CRBTree::GetPrev</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Call this method to obtain a pointer to an element stored in the <ph id="ph1">`CRBTree`</ph> object, and then update the position to the previous element.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>CRBTree::GetTailPosition</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Call this method to get the position value for the element at the tail of the tree.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>CRBTree::GetValueAt</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Call this method to retrieve the value stored at a given position in the <ph id="ph1">`CRBTree`</ph> object.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>CRBTree::IsEmpty</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Call this method to test for an empty tree object.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>CRBTree::RemoveAll</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Call this method to remove all elements from the <bpt id="p1">**</bpt>CRBTree<ept id="p1">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>CRBTree::RemoveAt</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Call this method to remove the element at the given position in the <bpt id="p1">**</bpt>CRBTree<ept id="p1">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CRBTree::SetValueAt</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Call this method to change the value stored at a given position in the <ph id="ph1">`CRBTree`</ph> object.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A Red-Black tree is a binary search tree that uses an extra bit of information per node to ensure that it remains "balanced," that is, the tree height doesn't grow disproportionately large and affect performance.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This template class is designed to be used by <bpt id="p1">[</bpt>CRBMap<ept id="p1">](../../atl/reference/crbmap-class.md)</ept> and <bpt id="p2">[</bpt>CRBMultiMap<ept id="p2">](../../atl/reference/crbmultimap-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The bulk of the methods that make up these derived classes are provided by <ph id="ph1">`CRBTree`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For a more complete discussion of the various collection classes and their features and performance characteristics, see <bpt id="p1">[</bpt>ATL Collection Classes<ept id="p1">](../../atl/atl-collection-classes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlcoll.h</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>CRBTree::CPair Class</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A class containing the key and value elements.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This class is used by the methods <bpt id="p1">[</bpt>CRBTree::GetAt<ept id="p1">](#crbtree__getat)</ept>, <bpt id="p2">[</bpt>CRBTree::GetNext<ept id="p2">](#crbtree__getnext)</ept>, and <bpt id="p3">[</bpt>CRBTree::GetPrev<ept id="p3">](#crbtree__getprev)</ept> to access the key and value elements stored in the tree structure.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The members are as follows:</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The data member storing the key element.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The data member storing the value element.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>CRBTree::~CRBTree</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The destructor.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Frees any allocated resources.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Calls <bpt id="p1">[</bpt>CRBTree::RemoveAll<ept id="p1">](#crbtree__removeall)</ept> to delete all elements.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>CRBTree::FindFirstKeyAfter</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Call this method to find the position of the element that uses the next available key.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A key value.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Returns the position value of the element that uses the next available key.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>If there are no more elements, NULL is returned.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This method makes it easy to traverse the tree without having to calculate position values beforehand.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>CRBTree::GetAt</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Call this method to get the element at a given position in the tree.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The position value.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The variable that receives the key.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>value</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The variable that receives the value.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The first two forms return a pointer to a <bpt id="p1">[</bpt>CPair<ept id="p1">](#crbtree__cpair_class)</ept>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The third form obtains a key and a value for the given position.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The position value can be previously determined with a call to a method such as <bpt id="p1">[</bpt>CRBTree::GetHeadPosition<ept id="p1">](#crbtree__getheadposition)</ept> or <bpt id="p2">[</bpt>CRBTree::GetTailPosition<ept id="p2">](#crbtree__gettailposition)</ept>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>In debug builds, an assertion failure will occur if <ph id="ph1">`pos`</ph> is equal to NULL.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>CRBTree::GetCount</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Call this method to get the number of elements in the tree.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Returns the number of elements (each key/value pair is one element) stored in the tree.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>CRBTree::GetHeadPosition</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Call this method to get the position value for the element at the head of the tree.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Returns the position value for the element at the head of the tree.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The value returned by <ph id="ph1">`GetHeadPosition`</ph> can be used with methods such as <bpt id="p1">[</bpt>CRBTree::GetKeyAt<ept id="p1">](#crbtree__getkeyat)</ept> or <bpt id="p2">[</bpt>CRBTree::GetNext<ept id="p2">](#crbtree__getnext)</ept> to traverse the tree and retrieve values.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>CRBTree::GetKeyAt</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Call this method to get the key from a given position in the tree.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The position value.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Returns the key stored at position <ph id="ph1">`pos`</ph> in the tree.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`pos`</ph> is not a valid position value, results are unpredictable.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>In debug builds, an assertion failure will occur if <ph id="ph1">`pos`</ph> is equal to NULL.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>CRBTree::GetNext</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Call this method to obtain a pointer to an element stored in the <ph id="ph1">`CRBTree`</ph> object, and advance the position to the next element.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The position counter, returned by a previous call to methods such as <bpt id="p1">[</bpt>CRBTree::GetHeadPosition<ept id="p1">](#crbtree__getheadposition)</ept> or <bpt id="p2">[</bpt>CRBTree::FindFirstKeyAfter<ept id="p2">](#crbtree__findfirstkeyafter)</ept>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the next <bpt id="p1">[</bpt>CPair<ept id="p1">](#crbtree__cpair_class)</ept> value in the tree.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`pos`</ph> position counter is updated after each call.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>If the retrieved element is the last in the tree, <ph id="ph1">`pos`</ph> is set to NULL.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>CRBTree::GetNextAssoc</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Call this method to get the key and value of an element stored in the map and advance the position to the next element.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The position counter, returned by a previous call to methods such as <bpt id="p1">[</bpt>CRBTree::GetHeadPosition<ept id="p1">](#crbtree__getheadposition)</ept> or <bpt id="p2">[</bpt>CRBTree::FindFirstKeyAfter<ept id="p2">](#crbtree__findfirstkeyafter)</ept>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Template parameter specifying the type of the tree's key.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>value</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Template parameter specifying the type of the tree's value.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`pos`</ph> position counter is updated after each call.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>If the retrieved element is the last in the tree, <ph id="ph1">`pos`</ph> is set to NULL.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>CRBTree::GetNextKey</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Call this method to get the key of an element stored in the tree and advance the position to the next element.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The position counter, returned by a previous call to methods such as <bpt id="p1">[</bpt>CRBTree::GetHeadPosition<ept id="p1">](#crbtree__getheadposition)</ept> or <bpt id="p2">[</bpt>CRBTree::FindFirstKeyAfter<ept id="p2">](#crbtree__findfirstkeyafter)</ept>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Returns a reference to the next key in the tree.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Updates the current position counter, <ph id="ph1">`pos`</ph>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>If there are no more entries in the tree, the position counter is set to NULL.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>CRBTree::GetNextValue</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Call this method to get the value of an element stored in the tree and advance the position to the next element.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The position counter, returned by a previous call to methods such as <bpt id="p1">[</bpt>CRBTree::GetHeadPosition<ept id="p1">](#crbtree__getheadposition)</ept> or <bpt id="p2">[</bpt>CRBTree::FindFirstKeyAfter<ept id="p2">](#crbtree__findfirstkeyafter)</ept>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Returns a reference to the next value in the tree.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Updates the current position counter, <ph id="ph1">`pos`</ph>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>If there are no more entries in the tree, the position counter is set to NULL.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>CRBTree::GetPrev</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Call this method to obtain a pointer to an element stored in the <ph id="ph1">`CRBTree`</ph> object, and then update the position to the previous element.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The position counter, returned by a previous call to methods such as <bpt id="p1">[</bpt>CRBTree::GetHeadPosition<ept id="p1">](#crbtree__getheadposition)</ept> or <bpt id="p2">[</bpt>CRBTree::FindFirstKeyAfter<ept id="p2">](#crbtree__findfirstkeyafter)</ept>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the previous <bpt id="p1">[</bpt>CPair<ept id="p1">](#crbtree__cpair_class)</ept> value stored in the tree.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Updates the current position counter, <ph id="ph1">`pos`</ph>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>If there are no more entries in the tree, the position counter is set to NULL.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>CRBTree::GetTailPosition</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Call this method to get the position value for the element at the tail of the tree.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Returns the position value for the element at the tail of the tree.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The value returned by <ph id="ph1">`GetTailPosition`</ph> can be used with methods such as <bpt id="p1">[</bpt>CRBTree::GetKeyAt<ept id="p1">](#crbtree__getkeyat)</ept> or <bpt id="p2">[</bpt>CRBTree::GetPrev<ept id="p2">](#crbtree__getprev)</ept> to traverse the tree and retrieve values.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>CRBTree::GetValueAt</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Call this method to retrieve the value stored at a given position in the <ph id="ph1">`CRBTree`</ph> object.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The position counter, returned by a previous call to methods such as <bpt id="p1">[</bpt>CRBTree::GetHeadPosition<ept id="p1">](#crbtree__getheadposition)</ept> or <bpt id="p2">[</bpt>CRBTree::FindFirstKeyAfter<ept id="p2">](#crbtree__findfirstkeyafter)</ept>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Returns a reference to the value stored at the given position in the <ph id="ph1">`CRBTree`</ph> object.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>CRBTree::IsEmpty</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Call this method to test for an empty tree object.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the tree is empty, <bpt id="p2">**</bpt>false<ept id="p2">**</ept> otherwise.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>CRBTree::KINARGTYPE</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Type used when a key is passed as an input argument.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>CRBTree::KOUTARGTYPE</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Type used when a key is returned as an output argument.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>CRBTree::RemoveAll</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Call this method to remove all elements from the <ph id="ph1">`CRBTree`</ph> object.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Clears out the <ph id="ph1">`CRBTree`</ph> object, freeing the memory used to store the elements.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>CRBTree::RemoveAt</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Call this method to remove the element at the given position in the <bpt id="p1">**</bpt>CRBTree<ept id="p1">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The position counter, returned by a previous call to methods such as <bpt id="p1">[</bpt>CRBTree::GetHeadPosition<ept id="p1">](#crbtree__getheadposition)</ept> or <bpt id="p2">[</bpt>CRBTree::FindFirstKeyAfter<ept id="p2">](#crbtree__findfirstkeyafter)</ept>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Removes the key/value pair stored at the specified position.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The memory used to store the element is freed.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The POSITION referenced by <ph id="ph1">`pos`</ph> becomes invalid, and while the POSITION of any other elements in the tree remains valid, they do not necessarily retain the same order.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>CRBTree::SetValueAt</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Call this method to change the value stored at a given position in the <ph id="ph1">`CRBTree`</ph> object.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The position counter, returned by a previous call to methods such as <bpt id="p1">[</bpt>CRBTree::GetHeadPosition<ept id="p1">](#crbtree__getheadposition)</ept> or <bpt id="p2">[</bpt>CRBTree::FindFirstKeyAfter<ept id="p2">](#crbtree__findfirstkeyafter)</ept>.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>value</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>The value to add to the <ph id="ph1">`CRBTree`</ph> object.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Changes the value element stored at the given position in the <ph id="ph1">`CRBTree`</ph> object.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>CRBTree::VINARGTYPE</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Type used when a value is passed as an input argument.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>CRBTree::VOUTARGTYPE</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Type used when a value is passed as an output argument.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Class Overview</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>