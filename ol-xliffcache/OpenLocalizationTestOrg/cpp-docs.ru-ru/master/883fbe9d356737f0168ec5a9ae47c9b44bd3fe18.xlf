<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">883fbe9d356737f0168ec5a9ae47c9b44bd3fe18</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\build\reference\clr-common-language-runtime-compilation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">250773f62bef0498168a69b13461ba4a85663a79</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9d2ade3501a299e73837ac4d6e79ba0c3f988618</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>-clr (Common Language Runtime Compilation) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>/clr (Common Language Runtime Compilation)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Enables applications and components to use features from the common language runtime (CLR).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>One or more of the following switches, comma-separated.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>/clr</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Creates metadata for the application.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The metadata can be consumed by other CLR applications, and enables the application to consume types and data in the metadata of other CLR components.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information, see</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Mixed (Native and Managed) Assemblies<ept id="p1">](../../dotnet/mixed-native-and-managed-assemblies.md)</ept> and</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Migrate to /clr<ept id="p1">](../../dotnet/how-to-migrate-to-clr.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>/clr:pure</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Produces a Microsoft Intermediate Language (MSIL)-only output file that has no native executable code.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>However, it can contain native types compiled to MSIL.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Pure and Verifiable Code (C++/CLI)<ept id="p1">](../../dotnet/pure-and-verifiable-code-cpp-cli.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>/clr:pure is deprecated.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A future version of the compiler may not support this option.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>We recommend that you port code that must be pure MSIL to C#.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>/clr:safe</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Produces an MSIL-only (no native executable code), verifiable output file.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/clr:safe<ept id="p1">**</ept> enables verification diagnostics (<bpt id="p2">[</bpt>PEVerify Tool (Peverify.exe)<ept id="p2">](http://msdn.microsoft.com/Library/f4f46f9e-8d08-4e66-a94b-0c69c9b0bbfa)</ept>).</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>NIB: Writing Verifiably Type-Safe Code<ept id="p1">](http://msdn.microsoft.com/en-us/d18f10ef-3b48-4f47-8726-96714021547b)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>/clr:safe is deprecated.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A future version of the compiler may not support this option.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>We recommend that you port code that must be pure, verifiable MSIL to C#.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>/clr:noAssembly</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Specifies that an assembly manifest should not be inserted into the output file.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>By default, the <bpt id="p1">**</bpt>noAssembly<ept id="p1">**</ept> option is not in effect.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>noAssembly<ept id="p1">**</ept> option is deprecated.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>/LN (Create MSIL Module)<ept id="p1">](../../build/reference/ln-create-msil-module.md)</ept> instead.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A managed program that does not have assembly metadata in the manifest is known as a <bpt id="p1">*</bpt>module<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>noAssembly<ept id="p1">**</ept> option can be used only to produce a module.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If you compile by using <bpt id="p1">[</bpt>/c<ept id="p1">](../../build/reference/c-compile-without-linking.md)</ept> and <bpt id="p2">**</bpt>/clr:noAssembly<ept id="p2">**</ept>, then specify the <bpt id="p3">[</bpt>/NOASSEMBLY<ept id="p3">](../../build/reference/noassembly-create-a-msil-module.md)</ept> option in the linker phase to create a module.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Before Visual C++ 2005, <bpt id="p1">**</bpt>/clr:noAssembly<ept id="p1">**</ept> required <bpt id="p2">**</bpt>/LD<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/LD<ept id="p1">**</ept> is now implied when you specify <bpt id="p2">**</bpt>/clr:noAssembly<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>/clr:initialAppDomain</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Enables a <ph id="ph1">[!INCLUDE[vcprvc](../../build/includes/vcprvc_md.md)]</ph> application to run on version 1 of the CLR.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you use <bpt id="p1">**</bpt>initialAppDomain<ept id="p1">**</ept>, then you may see some of the problems that are discussed in <bpt id="p2">[</bpt>BUG: AppDomainUnloaded exception when you use managed extensions for Visual C++ components<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=169465)</ept> on the Microsoft Support Web site.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>An application that is compiled by using <bpt id="p1">**</bpt>initialAppDomain<ept id="p1">**</ept> should not be used by an application that uses ASP.NET because it is not supported in version 1 of the CLR.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>/clr:nostdlib</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Instructs the compiler to ignore the default \clr directory.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The compiler produces errors if you are including multiple versions of a DLL such as System.dll.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Using this option lets you specify the specific framework to use during compilation.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Managed code is code that can be inspected and managed by the CLR.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Managed code can access managed objects.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>/clr Restrictions<ept id="p1">](../../build/reference/clr-restrictions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For information about how to develop applications that define and consume managed types, see <bpt id="p1">[</bpt>Component Extensions for Runtime Platforms<ept id="p1">](../../windows/component-extensions-for-runtime-platforms.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>An application compiled by using <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept> may or may not contain managed data.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>To enable debugging on a managed application, see <bpt id="p1">[</bpt>/ASSEMBLYDEBUG (Add DebuggableAttribute)<ept id="p1">](../../build/reference/assemblydebug-add-debuggableattribute.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Only CLR types will be instantiated on the garbage-collected heap.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Classes and Structs<ept id="p1">](../../windows/classes-and-structs-cpp-component-extensions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To compile a function to native code, use the <ph id="ph1">`unmanaged`</ph> pragma.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>managed, unmanaged<ept id="p1">](../../preprocessor/managed-unmanaged.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>By default, <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept> is not in effect.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept> is in effect, <bpt id="p2">**</bpt>/MD<ept id="p2">**</ept> is also in effect.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>/MD, /MT, /LD (Use Run-Time Library)<ept id="p1">](../../build/reference/md-mt-ld-use-run-time-library.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/MD<ept id="p1">**</ept> ensures that the dynamically linked, multithreaded versions of the runtime routines are selected from the standard header (.h) files.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Multithreading is required for managed programming because the CLR garbage collector runs finalizers in an auxiliary thread.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If you compile by using <bpt id="p1">**</bpt>/c<ept id="p1">**</ept>, you can specify the CLR type (IJW, safe, or pure) of the resulting output file with <bpt id="p2">[</bpt>/CLRIMAGETYPE<ept id="p2">](../../build/reference/clrimagetype-specify-type-of-clr-image.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/clr<ept id="p1">**</ept> implies <bpt id="p2">**</bpt>/EHa<ept id="p2">**</ept>, and no other <bpt id="p3">**</bpt>/EH<ept id="p3">**</ept> options are supported for <bpt id="p4">**</bpt>/clr<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>/EH (Exception Handling Model)<ept id="p1">](../../build/reference/eh-exception-handling-model.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For information about how to determine the CLR image type of a file, see <bpt id="p1">[</bpt>/CLRHEADER<ept id="p1">](../../build/reference/clrheader.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>All modules passed to a given invocation of the linker must be compiled by using the same run-time library compiler option (<bpt id="p1">**</bpt>/MD<ept id="p1">**</ept> or <bpt id="p2">**</bpt>/LD<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>/ASSEMBLYRESOURCE<ept id="p1">](../../build/reference/assemblyresource-embed-a-managed-resource.md)</ept> linker option to embed a resource in an assembly.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>/DELAYSIGN<ept id="p1">](../../build/reference/delaysign-partially-sign-an-assembly.md)</ept>, <bpt id="p2">[</bpt>/KEYCONTAINER<ept id="p2">](../../build/reference/keycontainer-specify-a-key-container-to-sign-an-assembly.md)</ept>, and <bpt id="p3">[</bpt>/KEYFILE<ept id="p3">](../../build/reference/keyfile-specify-key-or-key-pair-to-sign-an-assembly.md)</ept> linker options also let you customize how an assembly is created.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept> is used, the <ph id="ph1">`_MANAGED`</ph> symbol is defined to be 1.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Predefined Macros<ept id="p1">](../../preprocessor/predefined-macros.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The global variables in a native object file are initialized first (during DllMain if the executable is a DLL), and then the global variables in the managed section are initialized (before any managed code is run).</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>init_seg<ept id="p1">](../../preprocessor/init-seg.md)</ept> only affects the order of initialization in the managed and unmanaged categories.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Compiling by using <bpt id="p1">**</bpt>/clr:safe<ept id="p1">**</ept> is analogous to compiling by using <bpt id="p2">[</bpt>/platform:anycpu<ept id="p2">](/dotnet/articles/csharp/language-reference/compiler-options/platform-compiler-option)</ept> in languages such as C#.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Safe and Pure Images</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A pure image uses a CLR version of the C run-time (CRT) library.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>However, the CRT is not verifiable, so you cannot use the CRT when you compile by using <bpt id="p1">**</bpt>/clr:safe<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CRT Library Features<ept id="p1">](../../c-runtime-library/crt-library-features.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Examples of native code that cannot appear in a pure image include inline assembly, <bpt id="p1">[</bpt>setjmp<ept id="p1">](../../c-runtime-library/reference/setjmp.md)</ept>, and <bpt id="p2">[</bpt>longjmp<ept id="p2">](../../c-runtime-library/reference/longjmp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Every entry point of a pure or safe image is managed.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>When you compile by using <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept>, the entry point is native.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>__clrcall<ept id="p1">](../../cpp/clrcall.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>When you compile by using <bpt id="p1">**</bpt>/clr:safe<ept id="p1">**</ept>, by default, variables are <bpt id="p2">[</bpt>appdomain<ept id="p2">](../../cpp/appdomain.md)</ept> and cannot be per-process.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For <bpt id="p1">**</bpt>/clr:pure<ept id="p1">**</ept>, although <bpt id="p2">**</bpt>appdomain<ept id="p2">**</ept> is the default, you can use <bpt id="p3">[</bpt>process<ept id="p3">](../../cpp/process.md)</ept> variables.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>When running a 32-bit .exe file that was compiled by using <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept> or <bpt id="p2">**</bpt>/clr:pure<ept id="p2">**</ept> on a 64-bit operating system, the application will be run under WOW64, which enables a 32-bit application to run on the 32-bit CLR on a 64-bit operating system.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>By default, an .exe file that is compiled by using <bpt id="p1">**</bpt>/clr:safe<ept id="p1">**</ept> will be run on the 64-bit CLR on a computer that is running a 64-bit operating system.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>(On a 32-bit operating system, the same .exe file would run on the 32-bit CLR.) However, a safe application could load a 32-bit component.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>In that case, a safe image running under operating system 64-bit support will fail when it loads the 32-bit application (BadFormatException).</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>To ensure that a safe image continues to run when it loads a 32-bit image on a 64-bit operating system, you must use <bpt id="p1">[</bpt>/CLRIMAGETYPE<ept id="p1">](../../build/reference/clrimagetype-specify-type-of-clr-image.md)</ept> to change the metadata (.corflags), and mark it to be run under WOW64.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The following command line is an example.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>(Substitute your own entry symbol.)</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>cl /clr:safe t.cpp /link /clrimagetype:pure /entry:?main@@$$HYMHXZ /subsystem:console</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>For information about how to get a decorated name, see <bpt id="p1">[</bpt>Decorated Names<ept id="p1">](../../build/reference/decorated-names.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For more information about 64-bit programming, see <bpt id="p1">[</bpt>Configuring Programs for 64-Bit<ept id="p1">](../../build/configuring-programs-for-64-bit-visual-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>For information about using pure CLR code, see <bpt id="p1">[</bpt>How to: Migrate to /clr:pure (C++/CLI)<ept id="p1">](../../dotnet/how-to-migrate-to-clr-pure-cpp-cli.md)</ept> and <bpt id="p2">[</bpt>Pure and Verifiable Code (C++/CLI)<ept id="p2">](../../dotnet/pure-and-verifiable-code-cpp-cli.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Metadata and Unnamed Classes</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Unnamed classes will appear in metadata named as follows: <ph id="ph1">`$UnnamedClass$`</ph><bpt id="p1">*</bpt>crc-of-current-file-name<ept id="p1">*</ept><ph id="ph2">`$`</ph><bpt id="p2">*</bpt>index<ept id="p2">*</ept><ph id="ph3">`$`</ph>, where <bpt id="p3">*</bpt>index<ept id="p3">*</ept> is a sequential count of the unnamed classes in the compilation.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For example, the following code sample generates an unnamed class in metadata.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Use ildasm.exe to view metadata.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Managed Extensions for C++</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Visual C++ no longer supports the <bpt id="p1">**</bpt>/clr:oldsyntax<ept id="p1">**</ept> option.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>This option was deprecated in Visual Studio 2005.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The supported syntax for writing managed code in C++ is C++/CLI.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Component Extensions for Runtime Platforms<ept id="p1">](../../windows/component-extensions-for-runtime-platforms.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>If you have code that uses Managed Extensions for C++, we recommend that you port it to use C++/CLI syntax.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>For information on how to port your code, see <bpt id="p1">[</bpt>C++/CLI Migration Primer<ept id="p1">](../../dotnet/cpp-cli-migration-primer.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>To set this compiler option in Visual Studio</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the project name, and then click <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept> to open the project <bpt id="p3">**</bpt>Property Pages<ept id="p3">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>Configuration Properties<ept id="p1">**</ept> folder.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>General<ept id="p1">**</ept> property page, modify the <bpt id="p2">**</bpt>Common Language Runtime support<ept id="p2">**</ept> property.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept> is enabled in the <bpt id="p2">**</bpt>Property Pages<ept id="p2">**</ept> dialog box, compiler option properties that are not compatible with <bpt id="p3">**</bpt>/clr<ept id="p3">**</ept> are also adjusted, as required.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>For example, if <bpt id="p1">**</bpt>/RTC<ept id="p1">**</ept> is set and then <bpt id="p2">**</bpt>/clr<ept id="p2">**</ept> is enabled, <bpt id="p3">**</bpt>/RTC<ept id="p3">**</ept> will be turned off.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Also, when you debug a <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept> application, set the <bpt id="p2">**</bpt>Debugger Type<ept id="p2">**</ept> property to <bpt id="p3">**</bpt>Mixed<ept id="p3">**</ept> or <bpt id="p4">**</bpt>Managed only<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Project Settings for a C++ Debug Configuration<ept id="p1">](/visualstudio/debugger/project-settings-for-a-cpp-debug-configuration)</ept>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>For information about how the create a module, see <bpt id="p1">[</bpt>/NOASSEMBLY (Create a MSIL Module)<ept id="p1">](../../build/reference/noassembly-create-a-msil-module.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>To set this compiler option programmatically</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>See &lt;xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.CompileAsManaged%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Compiler Options</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Setting Compiler Options</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>