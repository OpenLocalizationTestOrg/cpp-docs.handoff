{"nodes":[{"pos":[12,65],"content":"hash_multiset::upper_bound (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"hash_multiset::upper_bound (STL-CLR) | Microsoft Docs","pos":[0,53]}]},{"content":"hash_multiset::upper_bound (STL/CLR)","pos":[660,696]},{"content":"Finds end of range that matches a specified key.","pos":[697,745]},{"content":"Syntax","pos":[754,760]},{"content":"Parameters","pos":[824,834]},{"content":"key","pos":[838,841]},{"content":"Key value to search for.","pos":[845,869]},{"content":"Remarks","pos":[878,885]},{"content":"The member function determines the last element <ph id=\"ph1\">`X`</ph> in the controlled sequence that hashes to the same bucket as <ph id=\"ph2\">`key`</ph> and has equivalent ordering to <ph id=\"ph3\">`key`</ph>.","pos":[889,1045],"source":"The member function determines the last element `X` in the controlled sequence that hashes to the same bucket as `key` and has equivalent ordering to `key`."},{"content":"If no such element exists, or if <ph id=\"ph1\">`X`</ph> is the last element in the controlled sequence, it returns <bpt id=\"p1\">[</bpt>hash_multiset::end (STL/CLR)<ept id=\"p1\">](../dotnet/hash-multiset-end-stl-clr.md)</ept><ph id=\"ph2\">`()`</ph>; otherwise it returns an iterator that designates the first element beyond <ph id=\"ph3\">`X`</ph>.","pos":[1046,1296],"source":" If no such element exists, or if `X` is the last element in the controlled sequence, it returns [hash_multiset::end (STL/CLR)](../dotnet/hash-multiset-end-stl-clr.md)`()`; otherwise it returns an iterator that designates the first element beyond `X`."},{"content":"You use it to locate the end of a sequence of elements currently in the controlled sequence that match a specified key.","pos":[1297,1416]},{"content":"Example","pos":[1425,1432]},{"content":"Requirements","pos":[2362,2374]},{"pos":[2378,2408],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/hash_set&gt;","source":"**Header:** \\<cliext/hash_set>"},{"pos":[2415,2436],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2445,2453]},{"content":"hash_multiset (STL/CLR)","pos":[2458,2481]},{"content":"hash_multiset::count (STL/CLR)","pos":[2524,2554]},{"content":"hash_multiset::equal_range (STL/CLR)","pos":[2603,2639]},{"content":"hash_multiset::find (STL/CLR)","pos":[2694,2723]},{"content":"hash_multiset::lower_bound (STL/CLR)","pos":[2771,2807]}],"content":"---\ntitle: \"hash_multiset::upper_bound (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::hash_multiset::upper_bound\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"upper_bound member [STL/CLR]\"\nms.assetid: d5be0d79-ae60-42bb-8a53-051bc374407d\ncaps.latest.revision: 15\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# hash_multiset::upper_bound (STL/CLR)\nFinds end of range that matches a specified key.  \n  \n## Syntax  \n  \n```  \niterator upper_bound(key_type key);  \n```  \n  \n#### Parameters  \n key  \n Key value to search for.  \n  \n## Remarks  \n The member function determines the last element `X` in the controlled sequence that hashes to the same bucket as `key` and has equivalent ordering to `key`. If no such element exists, or if `X` is the last element in the controlled sequence, it returns [hash_multiset::end (STL/CLR)](../dotnet/hash-multiset-end-stl-clr.md)`()`; otherwise it returns an iterator that designates the first element beyond `X`. You use it to locate the end of a sequence of elements currently in the controlled sequence that match a specified key.  \n  \n## Example  \n  \n```  \n// cliext_hash_multiset_upper_bound.cpp   \n// compile with: /clr   \n#include <cliext/hash_set>   \n  \ntypedef cliext::hash_multiset<wchar_t> Myhash_multiset;   \nint main()   \n    {   \n    Myhash_multiset c1;   \n    c1.insert(L'a');   \n    c1.insert(L'b');   \n    c1.insert(L'c');   \n  \n// display initial contents \" a b c\"   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n    System::Console::WriteLine(\"upper_bound(L'x')==end() = {0}\",   \n        c1.upper_bound(L'x') == c1.end());   \n  \n    System::Console::WriteLine(\"*upper_bound(L'a') = {0}\",   \n        *c1.upper_bound(L'a'));   \n    System::Console::WriteLine(\"*upper_bound(L'b') = {0}\",   \n        *c1.upper_bound(L'b'));   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n a b c  \nupper_bound(L'x')==end() = True  \n*upper_bound(L'a') = b  \n*upper_bound(L'b') = c  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/hash_set>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [hash_multiset (STL/CLR)](../dotnet/hash-multiset-stl-clr.md)   \n [hash_multiset::count (STL/CLR)](../dotnet/hash-multiset-count-stl-clr.md)   \n [hash_multiset::equal_range (STL/CLR)](../dotnet/hash-multiset-equal-range-stl-clr.md)   \n [hash_multiset::find (STL/CLR)](../dotnet/hash-multiset-find-stl-clr.md)   \n [hash_multiset::lower_bound (STL/CLR)](../dotnet/hash-multiset-lower-bound-stl-clr.md)"}