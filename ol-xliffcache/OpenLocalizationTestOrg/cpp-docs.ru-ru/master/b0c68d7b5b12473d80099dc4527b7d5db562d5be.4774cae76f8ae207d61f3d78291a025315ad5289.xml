{"nodes":[{"pos":[12,42],"content":"texture Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"texture Class | Microsoft Docs","pos":[0,30]}]},{"content":"texture Class","pos":[586,599]},{"content":"A texture is a data aggregate on an <ph id=\"ph1\">`accelerator_view`</ph> in the extent domain.","pos":[600,676],"source":"A texture is a data aggregate on an `accelerator_view` in the extent domain."},{"content":"It is a collection of variables, one for each element in an extent domain.","pos":[677,751]},{"content":"Each variable holds a value corresponding to C++ primitive type ( <ph id=\"ph1\">`unsigned int`</ph>, <ph id=\"ph2\">`int`</ph>, <ph id=\"ph3\">`float`</ph>, <ph id=\"ph4\">`double`</ph>), a scalar type ( <ph id=\"ph5\">`norm`</ph>, or <ph id=\"ph6\">`unorm`</ph>), or a short vector type.","pos":[752,921],"source":" Each variable holds a value corresponding to C++ primitive type ( `unsigned int`, `int`, `float`, `double`), a scalar type ( `norm`, or `unorm`), or a short vector type."},{"content":"Syntax","pos":[930,936]},{"content":"Parameters","pos":[1037,1047]},{"content":"The type of the elements in the texture.","pos":[1067,1107]},{"content":"The rank of the texture.","pos":[1125,1149]},{"content":"Members","pos":[1158,1165]},{"content":"Public Typedefs","pos":[1175,1190]},{"content":"Name","pos":[1197,1201]},{"content":"Description","pos":[1202,1213]},{"content":"Scalar types.","pos":[1265,1278]},{"content":"Value types.","pos":[1296,1308]},{"content":"Public Constructors","pos":[1319,1338]},{"content":"Name","pos":[1345,1349]},{"content":"Description","pos":[1350,1361]},{"content":"texture::texture Constructor","pos":[1400,1428]},{"pos":[1437,1505],"content":"Initializes a new instance of the <bpt id=\"p1\">[</bpt>texture<ept id=\"p1\">](texture-class.md)</ept> class.","source":"Initializes a new instance of the [texture](texture-class.md) class."},{"content":"texture::~texture Destructor","pos":[1511,1539]},{"pos":[1548,1596],"content":"Destroys the <bpt id=\"p1\">[</bpt>texture<ept id=\"p1\">](texture-class.md)</ept> object.","source":"Destroys the [texture](texture-class.md) object."},{"content":"Public Methods","pos":[1607,1621]},{"content":"Name","pos":[1628,1632]},{"content":"Description","pos":[1633,1644]},{"content":"texture::copy_to Method","pos":[1683,1706]},{"pos":[1718,1805],"content":"Copies the <bpt id=\"p1\">[</bpt>texture<ept id=\"p1\">](texture-class.md)</ept> object to the destination, by doing a deep copy.","source":"Copies the [texture](texture-class.md) object to the destination, by doing a deep copy."},{"content":"texture::data Method","pos":[1811,1831]},{"content":"Returns a CPU pointer to the raw data of this texture.","pos":[1840,1894]},{"content":"texture::get Method","pos":[1900,1919]},{"content":"Returns the value of the element at the specified index.","pos":[1927,1983]},{"content":"texture::get_associated_accelerator_view Method","pos":[1989,2036]},{"pos":[2072,2192],"content":"Returns the <bpt id=\"p1\">[</bpt>accelerator_view<ept id=\"p1\">](accelerator-view-class.md)</ept> that is the preferred target for this texture to be copied to.","source":"Returns the [accelerator_view](accelerator-view-class.md) that is the preferred target for this texture to be copied to."},{"content":"texture::get_depth_pitch Method","pos":[2198,2229]},{"content":"Returns the number of bytes between each depth slice in a 3D staging texture on the CPU.","pos":[2249,2337]},{"content":"texture::get_row_pitch Method","pos":[2343,2372]},{"content":"Returns the number of bytes between each row in a 2D or 3D staging texture on the CPU.","pos":[2390,2476]},{"content":"texture::set Method","pos":[2482,2501]},{"content":"Sets the value of the element at the specified index.","pos":[2509,2562]},{"content":"Public Operators","pos":[2573,2589]},{"content":"Name","pos":[2596,2600]},{"content":"Description","pos":[2601,2612]},{"content":"texture::operator() Operator","pos":[2651,2679]},{"content":"Returns the element value that is specified by the parameters.","pos":[2706,2768]},{"content":"texture::operator[] Operator","pos":[2774,2802]},{"content":"Returns the element that is at the specified index.","pos":[2827,2878]},{"content":"texture::operator= Operator","pos":[2884,2911]},{"pos":[2936,3004],"content":"Copies the specified <bpt id=\"p1\">[</bpt>texture<ept id=\"p1\">](texture-class.md)</ept> object to this one.","source":"Copies the specified [texture](texture-class.md) object to this one."},{"content":"Public Constants","pos":[3015,3031]},{"content":"Name","pos":[3038,3042]},{"content":"Description","pos":[3043,3054]},{"content":"texture::rank Constant","pos":[3093,3115]},{"pos":[3124,3180],"content":"Gets the rank of the <bpt id=\"p1\">[</bpt>texture<ept id=\"p1\">](texture-class.md)</ept> object.","source":"Gets the rank of the [texture](texture-class.md) object."},{"content":"Public Data Members","pos":[3191,3210]},{"content":"Name","pos":[3217,3221]},{"content":"Description","pos":[3222,3233]},{"content":"texture::associated_accelerator_view Data Member","pos":[3272,3320]},{"pos":[3352,3469],"content":"Gets the <bpt id=\"p1\">[</bpt>accelerator_view<ept id=\"p1\">](accelerator-view-class.md)</ept> that is the preferred target for this texture to be copied to.","source":"Gets the [accelerator_view](accelerator-view-class.md) that is the preferred target for this texture to be copied to."},{"content":"texture::depth_pitch Data Member","pos":[3475,3507]},{"content":"Gets the number of bytes between each depth slice in a 3D staging texture on the CPU.","pos":[3523,3608]},{"content":"texture::row_pitch Data Member","pos":[3614,3644]},{"content":"Gets the number of bytes between each row in a 2D or 3D staging texture on the CPU.","pos":[3658,3741]},{"content":"Inheritance Hierarchy","pos":[3751,3772]},{"content":"Requirements","pos":[3816,3828]},{"pos":[3832,3858],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> amp_graphics.h","source":"**Header:** amp_graphics.h"},{"pos":[3865,3901],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> Concurrency::graphics","source":"**Namespace:** Concurrency::graphics"},{"pos":[3932,3960],"content":"texture::~texture Destructor"},{"pos":[3964,4012],"content":"Destroys the <bpt id=\"p1\">[</bpt>texture<ept id=\"p1\">](texture-class.md)</ept> object.","source":"Destroys the [texture](texture-class.md) object."},{"pos":[4107,4155],"content":"texture::associated_accelerator_view Data Member"},{"pos":[4159,4276],"content":"Gets the <bpt id=\"p1\">[</bpt>accelerator_view<ept id=\"p1\">](accelerator-view-class.md)</ept> that is the preferred target for this texture to be copied to.","source":"Gets the [accelerator_view](accelerator-view-class.md) that is the preferred target for this texture to be copied to."},{"pos":[4445,4468],"content":"texture::copy_to Method"},{"pos":[4472,4559],"content":"Copies the <bpt id=\"p1\">[</bpt>texture<ept id=\"p1\">](texture-class.md)</ept> object to the destination, by doing a deep copy.","source":"Copies the [texture](texture-class.md) object to the destination, by doing a deep copy."},{"content":"Parameters","pos":[4708,4718]},{"content":"The object to copy to.","pos":[4733,4755]},{"content":"The rank of the texture.","pos":[4773,4797]},{"content":"The type of the elements in the texture.","pos":[4820,4860]},{"pos":[4891,4911],"content":"texture::data Method"},{"content":"Returns a CPU pointer to the raw data of this texture.","pos":[4915,4969]},{"content":"Return Value","pos":[5065,5077]},{"content":"A pointer to the raw data of the texture.","pos":[5081,5122]},{"pos":[5160,5192],"content":"texture::depth_pitch Data Member"},{"content":"Gets the number of bytes between each depth slice in a 3D staging texture on the CPU.","pos":[5196,5281]},{"pos":[5397,5416],"content":"texture::get Method"},{"content":"Returns the value of the element at the specified index.","pos":[5420,5476]},{"content":"Parameters","pos":[5571,5581]},{"content":"The index of the element.","pos":[5597,5622]},{"content":"Return Value","pos":[5632,5644]},{"content":"The value of the element at the specified index.","pos":[5648,5696]},{"pos":[5754,5801],"content":"texture::get_associated_accelerator_view Method"},{"content":"Returns the accelerator_view that is the preferred target for this texture to be copied to.","pos":[5805,5896]},{"content":"Return Value","pos":[6006,6018]},{"pos":[6022,6134],"content":"The <bpt id=\"p1\">[</bpt>accelerator_view<ept id=\"p1\">](accelerator-view-class.md)</ept> that is the preferred target for this texture to be copied to.","source":"The [accelerator_view](accelerator-view-class.md) that is the preferred target for this texture to be copied to."},{"pos":[6176,6207],"content":"texture::get_depth_pitch Method"},{"content":"Returns the number of bytes between each depth slice in a 3D staging texture on the CPU.","pos":[6211,6299]},{"content":"Return Value","pos":[6376,6388]},{"content":"The number of bytes between each depth slice in a 3D staging texture on the CPU.","pos":[6392,6472]},{"pos":[6512,6541],"content":"texture::get_row_pitch Method"},{"content":"Returns the number of bytes between each row in a 2-dimensional staging texture, or between each row of a depth slice in 3-dimensional staging texture.","pos":[6545,6696]},{"content":"Return Value","pos":[6771,6783]},{"content":"The number of bytes between each row in a 2-dimensional staging texture, or between each row of a depth slice in 3-dimensional staging texture.","pos":[6787,6930]},{"pos":[6979,7007],"content":"texture::operator() Operator"},{"content":"Returns the element value that is specified by the parameters.","pos":[7011,7073]},{"content":"Parameters","pos":[7427,7437]},{"content":"The index.","pos":[7453,7463]},{"content":"The most-significant component of the index.","pos":[7479,7523]},{"content":"The next-to-most-significant component of the index.","pos":[7539,7591]},{"content":"The least-significant component of the index.","pos":[7607,7652]},{"content":"The rank of the index.","pos":[7670,7692]},{"content":"Return Value","pos":[7702,7714]},{"content":"The element value that is specified by the parameters.","pos":[7718,7772]},{"pos":[7819,7847],"content":"texture::operator[] Operator"},{"content":"Returns the element that is at the specified index.","pos":[7851,7902]},{"content":"Parameters","pos":[8067,8077]},{"content":"The index.","pos":[8093,8103]},{"content":"The index.","pos":[8119,8129]},{"content":"Return Value","pos":[8139,8151]},{"content":"The element that is at the specified index.","pos":[8155,8198]},{"pos":[8245,8272],"content":"texture::operator= Operator"},{"pos":[8276,8344],"content":"Copies the specified <bpt id=\"p1\">[</bpt>texture<ept id=\"p1\">](texture-class.md)</ept> object to this one.","source":"Copies the specified [texture](texture-class.md) object to this one."},{"content":"Parameters","pos":[8484,8494]},{"content":"The <bpt id=\"p1\">[</bpt>texture<ept id=\"p1\">](texture-class.md)</ept> object to copy from.","pos":[8510,8562],"source":" The [texture](texture-class.md) object to copy from."},{"content":"Return Value","pos":[8572,8584]},{"pos":[8588,8643],"content":"A reference to this <bpt id=\"p1\">[</bpt>texture<ept id=\"p1\">](texture-class.md)</ept> object.","source":"A reference to this [texture](texture-class.md) object."},{"pos":[8674,8696],"content":"texture::rank Constant"},{"pos":[8700,8756],"content":"Gets the rank of the <bpt id=\"p1\">[</bpt>texture<ept id=\"p1\">](texture-class.md)</ept> object.","source":"Gets the rank of the [texture](texture-class.md) object."},{"pos":[8840,8870],"content":"texture::row_pitch Data Member"},{"content":"Gets the number of bytes between each row in a 2D or 3D staging texture on the CPU.","pos":[8874,8957]},{"pos":[9069,9088],"content":"texture::set Method"},{"content":"Sets the value of the element at the specified index.","pos":[9092,9145]},{"content":"Parameters","pos":[9258,9268]},{"content":"The index of the element.","pos":[9284,9309]},{"content":"The rank of the index.","pos":[9327,9349]},{"content":"The new value of the element.","pos":[9367,9396]},{"pos":[9427,9455],"content":"texture::texture Constructor"},{"pos":[9459,9527],"content":"Initializes a new instance of the <bpt id=\"p1\">[</bpt>texture<ept id=\"p1\">](texture-class.md)</ept> class.","source":"Initializes a new instance of the [texture](texture-class.md) class."},{"content":"Parameters","pos":[14396,14406]},{"content":"The <bpt id=\"p1\">[</bpt>accelerator_view<ept id=\"p1\">](accelerator-view-class.md)</ept> that specifies the location of the texture.","pos":[14425,14518],"source":" The [accelerator_view](accelerator-view-class.md) that specifies the location of the texture."},{"content":"The <bpt id=\"p1\">[</bpt>accelerator_view<ept id=\"p1\">](accelerator-view-class.md)</ept> that specifies the location of the texture.","pos":[14534,14627],"source":" The [accelerator_view](accelerator-view-class.md) that specifies the location of the texture."},{"content":"An accelerator_view that specifies the preferred target for copies to or from this texture.","pos":[14654,14745]},{"content":"The number of bits per each scalar element in the underlying scalar type of the texture.","pos":[14782,14870]},{"content":"In general, supported value are 8, 16, 32, and 64.","pos":[14871,14921]},{"content":"If 0 is specified, the number of bits is the same as the underlying scalar_type.","pos":[14922,15002]},{"content":"64 is only valid for double-based textures.","pos":[15003,15046]},{"content":"The extent in each dimension of the texture.","pos":[15063,15107]},{"content":"The most significant component of the texture.","pos":[15123,15169]},{"content":"The next-to-most-significant component of the texture.","pos":[15185,15239]},{"content":"The least significant component of the extent of the texture.","pos":[15255,15316]},{"content":"The type of the input interator.","pos":[15344,15376]},{"content":"The number of mipmap levels in the underlying texture.","pos":[15403,15457]},{"content":"If 0 is specified, the texture will have the full range of mipmap levels down to the smallest possible size for the specified extent.","pos":[15458,15591]},{"content":"The rank of the extent.","pos":[15609,15632]},{"content":"A pointer to a host buffer.","pos":[15652,15679]},{"content":"To texture to copy.","pos":[15696,15715]},{"content":"The number of bytes in the source buffer.","pos":[15742,15783]},{"content":"A beginning iterator into the source container.","pos":[15806,15853]},{"content":"An ending iterator into the source container.","pos":[15875,15920]},{"content":"Other data source.","pos":[15939,15957]},{"content":"The rank of the section.","pos":[15975,15999]},{"content":"See Also","pos":[16008,16016]},{"content":"Concurrency::graphics Namespace","pos":[16021,16052]}],"content":"---\ntitle: \"texture Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"amp_graphics/Concurrency::graphics::texture\"\ndev_langs: \n  - \"C++\"\nms.assetid: 16e85d4d-e80a-474a-995d-8bf63fbdf34c\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# texture Class\nA texture is a data aggregate on an `accelerator_view` in the extent domain. It is a collection of variables, one for each element in an extent domain. Each variable holds a value corresponding to C++ primitive type ( `unsigned int`, `int`, `float`, `double`), a scalar type ( `norm`, or `unorm`), or a short vector type.  \n  \n## Syntax  \n  \n```  \ntemplate <\n    typename value_type,  \n    int _Rank  \n>  \nclass texture;  \n```  \n  \n#### Parameters  \n `value_type`  \n The type of the elements in the texture.  \n  \n `_Rank`  \n The rank of the texture.  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`scalar_type`|Scalar types.|  \n|`value_type`|Value types.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[texture::texture Constructor](#ctor)|Initializes a new instance of the [texture](texture-class.md) class.|  \n|[texture::~texture Destructor](#ctor)|Destroys the [texture](texture-class.md) object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[texture::copy_to Method](#copy_to)|Copies the [texture](texture-class.md) object to the destination, by doing a deep copy.|  \n|[texture::data Method](#data)|Returns a CPU pointer to the raw data of this texture.|  \n|[texture::get Method](#get)|Returns the value of the element at the specified index.|  \n|[texture::get_associated_accelerator_view Method](#get_associated_accelerator_view)|Returns the [accelerator_view](accelerator-view-class.md) that is the preferred target for this texture to be copied to.|  \n|[texture::get_depth_pitch Method](#get_depth_pitch)|Returns the number of bytes between each depth slice in a 3D staging texture on the CPU.|  \n|[texture::get_row_pitch Method](#get_row_pitch)|Returns the number of bytes between each row in a 2D or 3D staging texture on the CPU.|  \n|[texture::set Method](#set)|Sets the value of the element at the specified index.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[texture::operator() Operator](#texture__operator_call)|Returns the element value that is specified by the parameters.|  \n|[texture::operator[] Operator](#texture__operator_at)|Returns the element that is at the specified index.|  \n|[texture::operator= Operator](#texture__operator_eq)|Copies the specified [texture](texture-class.md) object to this one.|  \n  \n### Public Constants  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[texture::rank Constant](#rank)|Gets the rank of the [texture](texture-class.md) object.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[texture::associated_accelerator_view Data Member](#associated_accelerator_view)|Gets the [accelerator_view](accelerator-view-class.md) that is the preferred target for this texture to be copied to.|  \n|[texture::depth_pitch Data Member](#depth_pitch)|Gets the number of bytes between each depth slice in a 3D staging texture on the CPU.|  \n|[texture::row_pitch Data Member](#row_pitch)|Gets the number of bytes between each row in a 2D or 3D staging texture on the CPU.|  \n  \n## Inheritance Hierarchy  \n `_Texture_base`  \n  \n `texture`  \n  \n## Requirements  \n **Header:** amp_graphics.h  \n  \n **Namespace:** Concurrency::graphics  \n  \n##  <a name=\"dtor\"></a>  texture::~texture Destructor  \n Destroys the [texture](texture-class.md) object.  \n  \n```  \n~texture() restrict(cpu);\n```  \n  \n##  <a name=\"associated_accelerator_view\"></a>  texture::associated_accelerator_view Data Member  \n Gets the [accelerator_view](accelerator-view-class.md) that is the preferred target for this texture to be copied to.  \n  \n```  \n__declspec(property(get= get_associated_accelerator_view)) Concurrency::accelerator_view associated_accelerator_view;  \n```  \n  \n##  <a name=\"copy_to\"></a>  texture::copy_to Method  \n Copies the [texture](texture-class.md) object to the destination, by doing a deep copy.  \n  \n```  \nvoid copy_to(\n    texture& _Dest) const;\n\n \n \nvoid copy_to(\n    writeonly_texture_view<value_type, _Rank>& _Dest) const;\n\n \n```  \n  \n### Parameters  \n `_Dest`  \n The object to copy to.  \n  \n `_Rank`  \n The rank of the texture.  \n  \n `value_type`  \n The type of the elements in the texture.  \n  \n##  <a name=\"data\"></a>  texture::data Method  \n Returns a CPU pointer to the raw data of this texture.  \n  \n```  \nvoid* data() restrict(cpu);\n\n \nconst void* data() const restrict(cpu);\n```  \n  \n### Return Value  \n A pointer to the raw data of the texture.  \n  \n##  <a name=\"depth_pitch\"></a>  texture::depth_pitch Data Member  \n Gets the number of bytes between each depth slice in a 3D staging texture on the CPU.  \n  \n```  \n__declspec(property(get= get_depth_pitch)) unsigned int depth_pitch;  \n```  \n  \n##  <a name=\"get\"></a>  texture::get Method  \n Returns the value of the element at the specified index.  \n  \n```  \nconst value_type get(const index<_Rank>& _Index) const restrict(amp);\n```  \n  \n### Parameters  \n `_Index`  \n The index of the element.  \n  \n### Return Value  \n The value of the element at the specified index.  \n  \n##  <a name=\"get_associated_accelerator_view\"></a>  texture::get_associated_accelerator_view Method  \n Returns the accelerator_view that is the preferred target for this texture to be copied to.  \n  \n```  \nConcurrency::accelerator_view get_associated_accelerator_view() const restrict(cpu);\n```  \n  \n### Return Value  \n The [accelerator_view](accelerator-view-class.md) that is the preferred target for this texture to be copied to.  \n  \n##  <a name=\"get_depth_pitch\"></a>  texture::get_depth_pitch Method  \n Returns the number of bytes between each depth slice in a 3D staging texture on the CPU.  \n  \n```  \nunsigned int get_depth_pitch() const restrict(cpu);\n```  \n  \n### Return Value  \n The number of bytes between each depth slice in a 3D staging texture on the CPU.  \n  \n##  <a name=\"get_row_pitch\"></a>  texture::get_row_pitch Method  \n Returns the number of bytes between each row in a 2-dimensional staging texture, or between each row of a depth slice in 3-dimensional staging texture.  \n  \n```  \nunsigned int get_row_pitch() const restrict(cpu);\n```  \n  \n### Return Value  \n The number of bytes between each row in a 2-dimensional staging texture, or between each row of a depth slice in 3-dimensional staging texture.  \n  \n##  <a name=\"texture__operator_call\"></a>  texture::operator() Operator  \n Returns the element value that is specified by the parameters.  \n  \n```  \nconst value_type operator() (\n    const index<_Rank>& _Index) const restrict(amp);\n\n \nconst value_type operator() (\n    int _I0) const restrict(amp);\n\n \nconst value_type operator() (\n    int _I0,  \n    int _I1) const restrict(amp);\n\n \nconst value_type operator() (\n    int _I0,  \n    int _I1,  \n    int _I2) const restrict(amp);\n```  \n  \n### Parameters  \n `_Index`  \n The index.  \n  \n `_I0`  \n The most-significant component of the index.  \n  \n `_I1`  \n The next-to-most-significant component of the index.  \n  \n `_I2`  \n The least-significant component of the index.  \n  \n `_Rank`  \n The rank of the index.  \n  \n### Return Value  \n The element value that is specified by the parameters.  \n  \n##  <a name=\"texture__operator_at\"></a>  texture::operator[] Operator  \n Returns the element that is at the specified index.  \n  \n```  \nconst value_type operator[] (const index<_Rank>& _Index) const restrict(amp);\n\n \nconst value_type operator[] (int _I0) const restrict(amp);\n```  \n  \n### Parameters  \n `_Index`  \n The index.  \n  \n `_I0`  \n The index.  \n  \n### Return Value  \n The element that is at the specified index.  \n  \n##  <a name=\"texture__operator_eq\"></a>  texture::operator= Operator  \n Copies the specified [texture](texture-class.md) object to this one.  \n  \n```  \ntexture& operator= (\n    const texture& _Other);\n\n \ntexture& operator= (\n    texture<value_type, _Rank>&& _Other);\n```  \n  \n### Parameters  \n `_Other`  \n The [texture](texture-class.md) object to copy from.  \n  \n### Return Value  \n A reference to this [texture](texture-class.md) object.  \n  \n##  <a name=\"rank\"></a>  texture::rank Constant  \n Gets the rank of the [texture](texture-class.md) object.  \n  \n```  \nstatic const int rank = _Rank;  \n```  \n  \n##  <a name=\"row_pitch\"></a>  texture::row_pitch Data Member  \n Gets the number of bytes between each row in a 2D or 3D staging texture on the CPU.  \n  \n```  \n__declspec(property(get= get_row_pitch)) unsigned int row_pitch;  \n```  \n  \n##  <a name=\"set\"></a>  texture::set Method  \n Sets the value of the element at the specified index.  \n  \n```  \nvoid set(\n    const index<_Rank>& _Index,  \n    const value_type& value) restrict(amp);\n```  \n  \n### Parameters  \n `_Index`  \n The index of the element.  \n  \n `_Rank`  \n The rank of the index.  \n  \n `value`  \n The new value of the element.  \n  \n##  <a name=\"ctor\"></a>  texture::texture Constructor  \n Initializes a new instance of the [texture](texture-class.md) class.  \n  \n```  \ntexture(\n    const Concurrency::extent<_Rank>& _Ext) restrict(cpu);\n\n \ntexture(\n    int _E0) restrict(cpu);\n\n \ntexture(\n    int _E0,  \n    int _E1) restrict(cpu);\n\n \ntexture(\n    int _E0,  \n    int _E1,  \n    int _E2) restrict(cpu);\n\n \ntexture(\n    const Concurrency::extent<_Rank>& _Ext,  \n    const Concurrency::accelerator_view& _Av) restrict(cpu);\n\n \ntexture(\n    int _E0,  \n    const Concurrency::accelerator_view& _Av) restrict(cpu);\n\n \ntexture(\n    int _E0,  \n    int _E1,  \n    const Concurrency::accelerator_view& _Av) restrict(cpu);\n\n \ntexture(\n    int _E0,  \n    int _E1,  \n    int _E2,  \n    const Concurrency::accelerator_view& _Av) restrict(cpu);\n\n \ntemplate<\n    typename _Input_iterator  \n>  \ntexture(\n    const Concurrency::extent<_Rank>& _Ext, _Input_iterator _Src_first, _Input_iterator _Src_last) restrict(cpu);\n\n \ntemplate<\n    typename _Input_iterator  \n>  \ntexture(\n    int _E0, _Input_iterator _Src_first, _Input_iterator _Src_last) restrict(cpu);\n\n \ntemplate<\n    typename _Input_iterator  \n>  \ntexture(\n    int _E0,  \n    int _E1, _Input_iterator _Src_first, _Input_iterator _Src_last) restrict(cpu);\n\n \ntemplate<\n    typename _Input_iterator  \n>  \ntexture(\n    int _E0,  \n    int _E1,  \n    int _E2, _Input_iterator _Src_first, _Input_iterator _Src_last) restrict(cpu);\n\n \ntemplate<\n    typename _Input_iterator  \n>  \ntexture(\n    const Concurrency::extent<_Rank>& _Ext, _Input_iterator _Src_first, _Input_iterator _Src_last,  \n    const Concurrency::accelerator_view& _Av) restrict(cpu);\n\n \ntemplate<\n    typename _Input_iterator  \n>  \ntexture(\n    int _E0, _Input_iterator _Src_first, _Input_iterator _Src_last,  \n    const Concurrency::accelerator_view& _Av) restrict(cpu);\n\n \ntemplate<\n    typename _Input_iterator  \n>  \ntexture(\n    int _E0,  \n    int _E1, _Input_iterator _Src_first, _Input_iterator _Src_last,  \n    const Concurrency::accelerator_view& _Av) restrict(cpu);\n\n \ntemplate<\n    typename _Input_iterator  \n>  \ntexture(\n    int _E0,  \n    int _E1,  \n    int _E2, _Input_iterator _Src_first, _Input_iterator _Src_last,  \n    const Concurrency::accelerator_view& _Av) restrict(cpu))  ;  \n \ntexture(\n    int _E0,  \n    unsigned int _Bits_per_scalar_element) restrict(cpu);\n\n \ntexture(\n    int _E0,  \n    int _E1,  \n    unsigned int _Bits_per_scalar_element) restrict(cpu);\n\n \ntexture(\n    int _E0,  \n    int _E1,  \n    int _E2,  \n    unsigned int _Bits_per_scalar_element) restrict(cpu);\n\n \ntexture(\n    const Concurrency::extent<_Rank>& _Ext,  \n    unsigned int _Bits_per_scalar_element,  \n    const Concurrency::accelerator_view& _Av) restrict(cpu);\n\n \ntexture(\n    int _E0,  \n    unsigned int _Bits_per_scalar_element,  \n    const Concurrency::accelerator_view& _Av)  ;  \n \ntexture(\n    int _E0,  \n    int _E1,  \n    unsigned int _Bits_per_scalar_element,  \n    const Concurrency::accelerator_view& _Av) restrict(cpu);\n\n \ntexture(\n    int _E0,  \n    int _E1,  \n    int _E2,  \n    unsigned int _Bits_per_scalar_element,  \n    const Concurrency::accelerator_view& _Av) restrict(cpu);\n\n \ntexture(\n    const Concurrency::extent<_Rank>& _Ext,  \n    _In_ void* _Source,  \n    unsigned int _Src_byte_size,  \n    unsigned int _Bits_per_scalar_element) restrict(cpu);\n\n \ntexture(\n    int _E0,  \n    _In_ void* _Source,  \n    unsigned int _Src_byte_size,  \n    unsigned int _Bits_per_scalar_element) restrict(cpu);\n\n \ntexture(\n    int _E0,  \n    int _E1,  \n    _In_ void* _Source,  \n    unsigned int _Src_byte_size,  \n    unsigned int _Bits_per_scalar_element) restrict(cpu);\n\n \ntexture(\n    int _E0,  \n    int _E1,  \n    int _E2,  \n    _In_ void* _Source,  \n    unsigned int _Src_byte_size,  \n    unsigned int _Bits_per_scalar_element) restrict(cpu);\n\n \ntexture(\n    const Concurrency::extent<_Rank>& _Ext,  \n    _In_ void* _Source,  \n    unsigned int _Src_byte_size,  \n    unsigned int _Bits_per_scalar_element,  \n    const Concurrency::accelerator_view& _Av)  ;  \n \ntexture(\n    int _E0,  \n    _In_ void* _Source,  \n    unsigned int _Src_byte_size,  \n    unsigned int _Bits_per_scalar_element,  \n    const Concurrency::accelerator_view& _Av) restrict(cpu);\n\n \ntexture(\n    int _E0,  \n    int _E1,  \n    _In_ void* _Source,  \n    unsigned int _Src_byte_size,  \n    unsigned int _Bits_per_scalar_element,  \n    const Concurrency::accelerator_view& _Av) restrict(cpu);\n\n \ntexture(\n    int _E0,  \n    int _E1,  \n    int _E2,  \n    _In_ void* _Source,  \n    unsigned int _Src_byte_size,  \n    unsigned int _Bits_per_scalar_element,  \n    const Concurrency::accelerator_view& _Av) restrict(cpu);\n\n \ntexture(\n    const texture& _Src,  \n    const Concurrency::accelerator_view& _Acc_view);\n\n \ntexture(\n    texture&& _Other);\n\n \ntexture(\n    const Concurrency::extent<_Rank>& _Ext,   \n    unsigned int _Bits_per_scalar_element,   \n    const Concurrency::accelerator_view& _Av);\n\n \ntexture(\n    const texture& _Src);\n```  \n  \n### Parameters  \n `_Acc_view`  \n The [accelerator_view](accelerator-view-class.md) that specifies the location of the texture.  \n  \n `_Av`  \n The [accelerator_view](accelerator-view-class.md) that specifies the location of the texture.  \n  \n `_Associated_av`  \n An accelerator_view that specifies the preferred target for copies to or from this texture.  \n  \n `_Bits_per_scalar_element`  \n The number of bits per each scalar element in the underlying scalar type of the texture. In general, supported value are 8, 16, 32, and 64. If 0 is specified, the number of bits is the same as the underlying scalar_type. 64 is only valid for double-based textures.  \n  \n `_Ext`  \n The extent in each dimension of the texture.  \n  \n `_E0`  \n The most significant component of the texture.  \n  \n `_E1`  \n The next-to-most-significant component of the texture.  \n  \n `_E2`  \n The least significant component of the extent of the texture.  \n  \n `_Input_iterator`  \n The type of the input interator.  \n  \n `_Mipmap_levels`  \n The number of mipmap levels in the underlying texture. If 0 is specified, the texture will have the full range of mipmap levels down to the smallest possible size for the specified extent.  \n  \n `_Rank`  \n The rank of the extent.  \n  \n `_Source`  \n A pointer to a host buffer.  \n  \n `_Src`  \n To texture to copy.  \n  \n `_Src_byte_size`  \n The number of bytes in the source buffer.  \n  \n `_Src_first`  \n A beginning iterator into the source container.  \n  \n `_Src_last`  \n An ending iterator into the source container.  \n  \n `_Other`  \n Other data source.  \n  \n `_Rank`  \n The rank of the section.  \n  \n## See Also  \n [Concurrency::graphics Namespace](concurrency-graphics-namespace.md)\n"}