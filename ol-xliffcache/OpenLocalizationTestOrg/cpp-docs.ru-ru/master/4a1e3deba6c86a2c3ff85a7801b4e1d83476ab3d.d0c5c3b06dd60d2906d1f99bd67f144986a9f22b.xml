{"nodes":[{"pos":[12,42],"content":"is_enum Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"is_enum Class | Microsoft Docs","pos":[0,30]}]},{"pos":[727,740],"content":"is_enum Class","linkify":"is_enum Class","nodes":[{"content":"is_enum Class","pos":[0,13]}]},{"content":"Tests if type is an enumeration.","pos":[741,773]},{"pos":[782,788],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[854,864],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type to query.","pos":[876,894]},{"pos":[903,910],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[914,1073],"content":"An instance of the type predicate holds true if the type <ph id=\"ph1\">`Ty`</ph> is an enumeration type or a <ph id=\"ph2\">`cv-qualified`</ph> form of an enumeration type, otherwise it holds false.","source":"An instance of the type predicate holds true if the type `Ty` is an enumeration type or a `cv-qualified` form of an enumeration type, otherwise it holds false."},{"pos":[1082,1089],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1831,1843],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[1847,1872],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> &lt;type_traits&gt;","source":"**Header:** <type_traits>"},{"pos":[1879,1897],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[1906,1914],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>&lt;type_traits&gt;<ept id=\"p1\">](../standard-library/type-traits.md)</ept><ph id=\"ph1\"> </ph>","pos":[1918,1970],"source":"[<type_traits>](../standard-library/type-traits.md) "},{"content":"<bpt id=\"p1\"> [</bpt>is_integral Class<ept id=\"p1\">](../standard-library/is-integral-class.md)</ept>","pos":[1973,2035],"source":" [is_integral Class](../standard-library/is-integral-class.md)"}],"content":"---\ntitle: \"is_enum Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"is_enum\"\n  - \"std.tr1.is_enum\"\n  - \"std::tr1::is_enum\"\n  - \"std.is_enum\"\n  - \"std::is_enum\"\n  - \"type_traits/std::is_enum\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"is_enum class [TR1]\"\n  - \"is_enum\"\nms.assetid: df3b00b7-4f98-4b3a-96ce-10ad958ee69c\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# is_enum Class\nTests if type is an enumeration.  \n  \n## Syntax  \n  \n```  \ntemplate <class Ty>  \nstruct is_enum;  \n```  \n  \n#### Parameters  \n `Ty`  \n The type to query.  \n  \n## Remarks  \n An instance of the type predicate holds true if the type `Ty` is an enumeration type or a `cv-qualified` form of an enumeration type, otherwise it holds false.  \n  \n## Example  \n  \n```cpp  \n// std_tr1__type_traits__is_enum.cpp   \n// compile with: /EHsc   \n#include <type_traits>   \n#include <iostream>   \n  \nstruct trivial   \n    {   \n    int val;   \n    };   \n  \nenum color {   \n    red, greed, blue};   \n  \nint main()   \n    {   \n    std::cout << \"is_enum<trivial> == \" << std::boolalpha   \n        << std::is_enum<trivial>::value << std::endl;   \n    std::cout << \"is_enum<color> == \" << std::boolalpha   \n        << std::is_enum<color>::value << std::endl;   \n    std::cout << \"is_enum<int> == \" << std::boolalpha   \n        << std::is_enum<int>::value << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \nis_enum<trivial> == false  \nis_enum<color> == true  \nis_enum<int> == false  \n```  \n  \n## Requirements  \n **Header:** <type_traits>  \n  \n **Namespace:** std  \n  \n## See Also  \n [<type_traits>](../standard-library/type-traits.md)   \n [is_integral Class](../standard-library/is-integral-class.md)\n"}