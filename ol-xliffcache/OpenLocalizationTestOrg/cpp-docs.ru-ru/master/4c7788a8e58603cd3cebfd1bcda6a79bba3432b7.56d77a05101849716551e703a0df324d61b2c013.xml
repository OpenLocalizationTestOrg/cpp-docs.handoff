{"nodes":[{"pos":[12,43],"content":"CObArray Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CObArray Class | Microsoft Docs","pos":[0,31]}]},{"pos":[695,709],"content":"CObArray Class","linkify":"CObArray Class","nodes":[{"content":"CObArray Class","pos":[0,14]}]},{"pos":[710,748],"content":"Supports arrays of <ph id=\"ph1\">`CObject`</ph> pointers.","source":"Supports arrays of `CObject` pointers."},{"pos":[757,763],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[821,828],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[838,857],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[864,868]},{"content":"Description","pos":[869,880]},{"pos":[918,959],"content":"<bpt id=\"p1\">[</bpt>CObArray::CObArray<ept id=\"p1\">](#cobarray__cobarray)</ept>","source":"[CObArray::CObArray](#cobarray__cobarray)"},{"pos":[960,1009],"content":"Constructs an empty array for <ph id=\"ph1\">`CObject`</ph> pointers.","source":"Constructs an empty array for `CObject` pointers."},{"pos":[1020,1034],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1041,1045]},{"content":"Description","pos":[1046,1057]},{"pos":[1095,1126],"content":"<bpt id=\"p1\">[</bpt>CObArray::Add<ept id=\"p1\">](#cobarray__add)</ept>","source":"[CObArray::Add](#cobarray__add)"},{"content":"Adds an element to the end of the array; grows the array if necessary.","pos":[1127,1197]},{"pos":[1202,1239],"content":"<bpt id=\"p1\">[</bpt>CObArray::Append<ept id=\"p1\">](#cobarray__append)</ept>","source":"[CObArray::Append](#cobarray__append)"},{"content":"Appends another array to the array; grows the array if necessary.","pos":[1240,1305]},{"pos":[1310,1343],"content":"<bpt id=\"p1\">[</bpt>CObArray::Copy<ept id=\"p1\">](#cobarray__copy)</ept>","source":"[CObArray::Copy](#cobarray__copy)"},{"content":"Copies another array to the array; grows the array if necessary.","pos":[1344,1408]},{"pos":[1413,1456],"content":"<bpt id=\"p1\">[</bpt>CObArray::ElementAt<ept id=\"p1\">](#cobarray__elementat)</ept>","source":"[CObArray::ElementAt](#cobarray__elementat)"},{"content":"Returns a temporary reference to the element pointer within the array.","pos":[1457,1527]},{"pos":[1532,1575],"content":"<bpt id=\"p1\">[</bpt>CObArray::FreeExtra<ept id=\"p1\">](#cobarray__freeextra)</ept>","source":"[CObArray::FreeExtra](#cobarray__freeextra)"},{"content":"Frees all unused memory above the current upper bound.","pos":[1576,1630]},{"pos":[1635,1670],"content":"<bpt id=\"p1\">[</bpt>CObArray::GetAt<ept id=\"p1\">](#cobarray__getat)</ept>","source":"[CObArray::GetAt](#cobarray__getat)"},{"content":"Returns the value at a given index.","pos":[1671,1706]},{"pos":[1711,1752],"content":"<bpt id=\"p1\">[</bpt>CObArray::GetCount<ept id=\"p1\">](#cobarray__getcount)</ept>","source":"[CObArray::GetCount](#cobarray__getcount)"},{"content":"Gets the number of elements in this array.","pos":[1753,1795]},{"pos":[1800,1839],"content":"<bpt id=\"p1\">[</bpt>CObArray::GetData<ept id=\"p1\">](#cobarray__getdata)</ept>","source":"[CObArray::GetData](#cobarray__getdata)"},{"content":"Allows access to elements in the array.","pos":[1840,1879]},{"content":"Can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[1880,1896],"source":" Can be **NULL**."},{"pos":[1901,1940],"content":"<bpt id=\"p1\">[</bpt>CObArray::GetSize<ept id=\"p1\">](#cobarray__getsize)</ept>","source":"[CObArray::GetSize](#cobarray__getsize)"},{"content":"Gets the number of elements in this array.","pos":[1941,1983]},{"pos":[1988,2039],"content":"<bpt id=\"p1\">[</bpt>CObArray::GetUpperBound<ept id=\"p1\">](#cobarray__getupperbound)</ept>","source":"[CObArray::GetUpperBound](#cobarray__getupperbound)"},{"content":"Returns the largest valid index.","pos":[2040,2072]},{"pos":[2077,2118],"content":"<bpt id=\"p1\">[</bpt>CObArray::InsertAt<ept id=\"p1\">](#cobarray__insertat)</ept>","source":"[CObArray::InsertAt](#cobarray__insertat)"},{"content":"Inserts an element (or all the elements in another array) at a specified index.","pos":[2119,2198]},{"pos":[2203,2242],"content":"<bpt id=\"p1\">[</bpt>CObArray::IsEmpty<ept id=\"p1\">](#cobarray__isempty)</ept>","source":"[CObArray::IsEmpty](#cobarray__isempty)"},{"content":"Determines if the array is empty.","pos":[2243,2276]},{"pos":[2281,2324],"content":"<bpt id=\"p1\">[</bpt>CObArray::RemoveAll<ept id=\"p1\">](#cobarray__removeall)</ept>","source":"[CObArray::RemoveAll](#cobarray__removeall)"},{"content":"Removes all the elements from this array.","pos":[2325,2366]},{"pos":[2371,2412],"content":"<bpt id=\"p1\">[</bpt>CObArray::RemoveAt<ept id=\"p1\">](#cobarray__removeat)</ept>","source":"[CObArray::RemoveAt](#cobarray__removeat)"},{"content":"Removes an element at a specific index.","pos":[2413,2452]},{"pos":[2457,2492],"content":"<bpt id=\"p1\">[</bpt>CObArray::SetAt<ept id=\"p1\">](#cobarray__setat)</ept>","source":"[CObArray::SetAt](#cobarray__setat)"},{"content":"Sets the value for a given index; array not allowed to grow.","pos":[2493,2553]},{"pos":[2558,2601],"content":"<bpt id=\"p1\">[</bpt>CObArray::SetAtGrow<ept id=\"p1\">](#cobarray__setatgrow)</ept>","source":"[CObArray::SetAtGrow](#cobarray__setatgrow)"},{"content":"Sets the value for a given index; grows the array if necessary.","pos":[2602,2665]},{"pos":[2670,2709],"content":"<bpt id=\"p1\">[</bpt>CObArray::SetSize<ept id=\"p1\">](#cobarray__setsize)</ept>","source":"[CObArray::SetSize](#cobarray__setsize)"},{"content":"Sets the number of elements to be contained in this array.","pos":[2710,2768]},{"pos":[2779,2795],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[2802,2806]},{"content":"Description","pos":[2807,2818]},{"pos":[2856,2904],"content":"<bpt id=\"p1\">[</bpt>CObArray::operator [ ]<ept id=\"p1\">](#cobarray__operator_at)</ept>","source":"[CObArray::operator [ ]](#cobarray__operator_at)"},{"content":"Sets or gets the element at the specified index.","pos":[2905,2953]},{"pos":[2963,2970],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"These object arrays are similar to C arrays, but they can dynamically shrink and grow as necessary.","pos":[2974,3073]},{"content":"Array indexes always start at position 0.","pos":[3080,3121]},{"content":"You can decide whether to fix the upper bound or allow the array to expand when you add elements past the current bound.","pos":[3122,3242]},{"content":"Memory is allocated contiguously to the upper bound, even if some elements are null.","pos":[3243,3327]},{"pos":[3334,3415],"content":"Under Win32, the size of a <ph id=\"ph1\">`CObArray`</ph> object is limited only to available memory.","source":"Under Win32, the size of a `CObArray` object is limited only to available memory."},{"pos":[3422,3539],"content":"As with a C array, the access time for a <ph id=\"ph1\">`CObArray`</ph> indexed element is constant and is independent of the array size.","source":"As with a C array, the access time for a `CObArray` indexed element is constant and is independent of the array size."},{"content":"<ph id=\"ph1\">`CObArray`</ph> incorporates the <ph id=\"ph2\">`IMPLEMENT_SERIAL`</ph> macro to support serialization and dumping of its elements.","pos":[3546,3652],"source":"`CObArray` incorporates the `IMPLEMENT_SERIAL` macro to support serialization and dumping of its elements."},{"content":"If an array of <ph id=\"ph1\">`CObject`</ph> pointers is stored to an archive, either with the overloaded insertion operator or with the <ph id=\"ph2\">`Serialize`</ph> member function, each <ph id=\"ph3\">`CObject`</ph> element is, in turn, serialized along with its array index.","pos":[3653,3873],"source":" If an array of `CObject` pointers is stored to an archive, either with the overloaded insertion operator or with the `Serialize` member function, each `CObject` element is, in turn, serialized along with its array index."},{"pos":[3880,4013],"content":"If you need a dump of individual <ph id=\"ph1\">`CObject`</ph> elements in an array, you must set the depth of the <ph id=\"ph2\">`CDumpContext`</ph> object to 1 or greater.","source":"If you need a dump of individual `CObject` elements in an array, you must set the depth of the `CDumpContext` object to 1 or greater."},{"pos":[4020,4163],"content":"When a <ph id=\"ph1\">`CObArray`</ph> object is deleted, or when its elements are removed, only the <ph id=\"ph2\">`CObject`</ph> pointers are removed, not the objects they reference.","source":"When a `CObArray` object is deleted, or when its elements are removed, only the `CObject` pointers are removed, not the objects they reference."},{"pos":[4171,4453],"content":"[!NOTE]\n Before using an array, use `SetSize` to establish its size and allocate memory for it. If you do not use `SetSize`, adding elements to your array causes it to be frequently reallocated and copied. Frequent reallocation and copying are inefficient and can fragment memory.","leadings":["","> "],"nodes":[{"content":" Before using an array, use `SetSize` to establish its size and allocate memory for it. If you do not use `SetSize`, adding elements to your array causes it to be frequently reallocated and copied. Frequent reallocation and copying are inefficient and can fragment memory.","pos":[8,280],"nodes":[{"content":"Before using an array, use <ph id=\"ph1\">`SetSize`</ph> to establish its size and allocate memory for it.","pos":[1,87],"source":" Before using an array, use `SetSize` to establish its size and allocate memory for it."},{"content":"If you do not use <ph id=\"ph1\">`SetSize`</ph>, adding elements to your array causes it to be frequently reallocated and copied.","pos":[88,197],"source":" If you do not use `SetSize`, adding elements to your array causes it to be frequently reallocated and copied."},{"content":"Frequent reallocation and copying are inefficient and can fragment memory.","pos":[198,272]}]}]},{"content":"Array class derivation is similar to list derivation.","pos":[4460,4513]},{"content":"For details on the derivation of a special-purpose list class, see the article <bpt id=\"p1\">[</bpt>Collections<ept id=\"p1\">](../../mfc/collections.md)</ept>.","pos":[4514,4633],"source":" For details on the derivation of a special-purpose list class, see the article [Collections](../../mfc/collections.md)."},{"pos":[4641,4775],"content":"[!NOTE]\n You must use the `IMPLEMENT_SERIAL` macro in the implementation of your derived class if you intend to serialize the array.","leadings":["","> "],"nodes":[{"content":"You must use the <ph id=\"ph1\">`IMPLEMENT_SERIAL`</ph> macro in the implementation of your derived class if you intend to serialize the array.","pos":[9,132],"source":" You must use the `IMPLEMENT_SERIAL` macro in the implementation of your derived class if you intend to serialize the array."}]},{"pos":[4784,4805],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[4809,4856],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[4882,4894],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[4898,4919],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxcoll.h","source":"**Header:** afxcoll.h"},{"pos":[4929,4972],"content":"<bpt id=\"p1\">&lt;a name=\"cobarray__add\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CObArray::Add","linkify":"<a name=\"cobarray__add\"></a>  CObArray::Add","source":"<a name=\"cobarray__add\"></a>  CObArray::Add"},{"content":"Adds a new element to the end of an array, growing the array by 1.","pos":[4976,5042]},{"pos":[5101,5111],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`CObject`</ph> pointer to be added to this array.","pos":[5131,5179],"source":" The `CObject` pointer to be added to this array."},{"pos":[5189,5201],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The index of the added element.","pos":[5205,5236]},{"pos":[5246,5253],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If <bpt id=\"p1\">[</bpt>SetSize<ept id=\"p1\">](#cobarray__setsize)</ept> has been used with an <ph id=\"ph1\">`nGrowBy`</ph> value greater than 1, then extra memory may be allocated.","pos":[5257,5379],"source":"If [SetSize](#cobarray__setsize) has been used with an `nGrowBy` value greater than 1, then extra memory may be allocated."},{"content":"However, the upper bound will increase by only 1.","pos":[5380,5429]},{"pos":[5436,5521],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObArray::Add`</ph>.","source":"The following table shows other member functions that are similar to `CObArray::Add`."},{"content":"Class","pos":[5528,5533]},{"content":"Member Function","pos":[5534,5549]},{"pos":[5592,5645],"content":"<bpt id=\"p1\">[</bpt>CByteArray<ept id=\"p1\">](../../mfc/reference/cbytearray-class.md)</ept>","source":"[CByteArray](../../mfc/reference/cbytearray-class.md)"},{"content":"<bpt id=\"p1\">**</bpt>INT_PTR Add( BYTE<ept id=\"p1\">**</ept> <ph id=\"ph1\">`newElement`</ph> <bpt id=\"p2\">**</bpt>);<ept id=\"p2\">**</ept>","pos":[5646,5687],"source":"**INT_PTR Add( BYTE** `newElement` **);**"},{"content":"<bpt id=\"p1\">**</bpt>throw( CMemoryException<ph id=\"ph1\">\\*</ph> );<ept id=\"p1\">**</ept>","pos":[5700,5732],"source":"**throw( CMemoryException\\* );**"},{"pos":[5737,5792],"content":"<bpt id=\"p1\">[</bpt>CDWordArray<ept id=\"p1\">](../../mfc/reference/cdwordarray-class.md)</ept>","source":"[CDWordArray](../../mfc/reference/cdwordarray-class.md)"},{"content":"<bpt id=\"p1\">**</bpt>INT_PTR Add( DWORD<ept id=\"p1\">**</ept> <ph id=\"ph1\">`newElement`</ph> <bpt id=\"p2\">**</bpt>);<ept id=\"p2\">**</ept>","pos":[5793,5835],"source":"**INT_PTR Add( DWORD** `newElement` **);**"},{"content":"<bpt id=\"p1\">**</bpt>throw( CMemoryException<ph id=\"ph1\">\\*</ph> );<ept id=\"p1\">**</ept>","pos":[5848,5880],"source":"**throw( CMemoryException\\* );**"},{"pos":[5885,5936],"content":"<bpt id=\"p1\">[</bpt>CPtrArray<ept id=\"p1\">](../../mfc/reference/cptrarray-class.md)</ept>","source":"[CPtrArray](../../mfc/reference/cptrarray-class.md)"},{"content":"<bpt id=\"p1\">**</bpt>INT_PTR Add( void<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> <ph id=\"ph2\">`newElement`</ph> <bpt id=\"p2\">**</bpt>);<ept id=\"p2\">**</ept>","pos":[5937,5980],"source":"**INT_PTR Add( void\\*** `newElement` **);**"},{"content":"<bpt id=\"p1\">**</bpt>throw( CMemoryException<ph id=\"ph1\">\\*</ph> );<ept id=\"p1\">**</ept>","pos":[5993,6025],"source":"**throw( CMemoryException\\* );**"},{"pos":[6030,6087],"content":"<bpt id=\"p1\">[</bpt>CStringArray<ept id=\"p1\">](../../mfc/reference/cstringarray-class.md)</ept>","source":"[CStringArray](../../mfc/reference/cstringarray-class.md)"},{"content":"<bpt id=\"p1\">**</bpt>INT_PTR Add( LPCTSTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`newElement`</ph> <bpt id=\"p2\">**</bpt>); throw( CMemoryException<ph id=\"ph2\">\\*</ph> );<ept id=\"p2\">**</ept>","pos":[6088,6161],"source":"**INT_PTR Add( LPCTSTR** `newElement` **); throw( CMemoryException\\* );**"},{"content":"<bpt id=\"p1\">**</bpt>INT_PTR Add(const CString&amp;<ept id=\"p1\">**</ept> <ph id=\"ph1\">`newElement`</ph> <bpt id=\"p2\">**</bpt>);<ept id=\"p2\">**</ept>","pos":[6174,6224],"source":"**INT_PTR Add(const CString&** `newElement` **);**"},{"pos":[6229,6282],"content":"<bpt id=\"p1\">[</bpt>CUIntArray<ept id=\"p1\">](../../mfc/reference/cuintarray-class.md)</ept>","source":"[CUIntArray](../../mfc/reference/cuintarray-class.md)"},{"content":"<bpt id=\"p1\">**</bpt>INT_PTR Add( UINT<ept id=\"p1\">**</ept> <ph id=\"ph1\">`newElement`</ph> <bpt id=\"p2\">**</bpt>);<ept id=\"p2\">**</ept>","pos":[6283,6324],"source":"**INT_PTR Add( UINT** `newElement` **);**"},{"content":"<bpt id=\"p1\">**</bpt>throw( CMemoryException<ph id=\"ph1\">\\*</ph> );<ept id=\"p1\">**</ept>","pos":[6337,6369],"source":"**throw( CMemoryException\\* );**"},{"pos":[6374,6427],"content":"<bpt id=\"p1\">[</bpt>CWordArray<ept id=\"p1\">](../../mfc/reference/cwordarray-class.md)</ept>","source":"[CWordArray](../../mfc/reference/cwordarray-class.md)"},{"content":"<bpt id=\"p1\">**</bpt>INT_PTR Add( WORD<ept id=\"p1\">**</ept> <ph id=\"ph1\">`newElement`</ph> <bpt id=\"p2\">**</bpt>);<ept id=\"p2\">**</ept>","pos":[6428,6469],"source":"**INT_PTR Add( WORD** `newElement` **);**"},{"content":"<bpt id=\"p1\">**</bpt>throw( CMemoryException<ph id=\"ph1\">\\*</ph> );<ept id=\"p1\">**</ept>","pos":[6482,6514],"source":"**throw( CMemoryException\\* );**"},{"pos":[6525,6532],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6537,6681],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class used in all collection examples.","source":"See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples."},{"pos":[6688,6770],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#75<ept id=\"p2\">](../../mfc/codesnippet/cpp/cobarray-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#75](../../mfc/codesnippet/cpp/cobarray-class_1.cpp)]"},{"content":"The results from this program are as follows:","pos":[6777,6822]},{"pos":[6946,6995],"content":"<bpt id=\"p1\">&lt;a name=\"cobarray__append\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CObArray::Append","linkify":"<a name=\"cobarray__append\"></a>  CObArray::Append","source":"<a name=\"cobarray__append\"></a>  CObArray::Append"},{"content":"Call this member function to add the contents of another array to the end of the given array.","pos":[6999,7092]},{"pos":[7154,7164],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>src<ept id=\"p1\">*</ept>","pos":[7168,7173],"source":"*src*"},{"content":"Source of the elements to be appended to the array.","pos":[7177,7228]},{"pos":[7238,7250],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The index of the first appended element.","pos":[7254,7294]},{"pos":[7304,7311],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The arrays must be of the same type.","pos":[7315,7351]},{"pos":[7358,7459],"content":"If necessary, <bpt id=\"p1\">**</bpt>Append<ept id=\"p1\">**</ept> may allocate extra memory to accommodate the elements appended to the array.","source":"If necessary, **Append** may allocate extra memory to accommodate the elements appended to the array."},{"pos":[7466,7554],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObArray::Append`</ph>.","source":"The following table shows other member functions that are similar to `CObArray::Append`."},{"content":"Class","pos":[7561,7566]},{"content":"Member Function","pos":[7567,7582]},{"pos":[7625,7678],"content":"<bpt id=\"p1\">[</bpt>CByteArray<ept id=\"p1\">](../../mfc/reference/cbytearray-class.md)</ept>","source":"[CByteArray](../../mfc/reference/cbytearray-class.md)"},{"pos":[7679,7729],"content":"<bpt id=\"p1\">**</bpt>INT_PTR Append( const CByteArray&amp;<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>src<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**INT_PTR Append( const CByteArray&** *src* **);**"},{"pos":[7734,7789],"content":"<bpt id=\"p1\">[</bpt>CDWordArray<ept id=\"p1\">](../../mfc/reference/cdwordarray-class.md)</ept>","source":"[CDWordArray](../../mfc/reference/cdwordarray-class.md)"},{"pos":[7790,7841],"content":"<bpt id=\"p1\">**</bpt>INT_PTR Append( const CDWordArray&amp;<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>src<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**INT_PTR Append( const CDWordArray&** *src* **);**"},{"pos":[7846,7897],"content":"<bpt id=\"p1\">[</bpt>CPtrArray<ept id=\"p1\">](../../mfc/reference/cptrarray-class.md)</ept>","source":"[CPtrArray](../../mfc/reference/cptrarray-class.md)"},{"pos":[7898,7947],"content":"<bpt id=\"p1\">**</bpt>INT_PTR Append( const CPtrArray&amp;<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>src<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**INT_PTR Append( const CPtrArray&** *src* **);**"},{"pos":[7952,8009],"content":"<bpt id=\"p1\">[</bpt>CStringArray<ept id=\"p1\">](../../mfc/reference/cstringarray-class.md)</ept>","source":"[CStringArray](../../mfc/reference/cstringarray-class.md)"},{"pos":[8010,8062],"content":"<bpt id=\"p1\">**</bpt>INT_PTR Append( const CStringArray&amp;<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>src<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**INT_PTR Append( const CStringArray&** *src* **);**"},{"pos":[8067,8120],"content":"<bpt id=\"p1\">[</bpt>CUIntArray<ept id=\"p1\">](../../mfc/reference/cuintarray-class.md)</ept>","source":"[CUIntArray](../../mfc/reference/cuintarray-class.md)"},{"pos":[8121,8171],"content":"<bpt id=\"p1\">**</bpt>INT_PTR Append( const CUIntArray&amp;<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>src<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**INT_PTR Append( const CUIntArray&** *src* **);**"},{"pos":[8176,8229],"content":"<bpt id=\"p1\">[</bpt>CWordArray<ept id=\"p1\">](../../mfc/reference/cwordarray-class.md)</ept>","source":"[CWordArray](../../mfc/reference/cwordarray-class.md)"},{"pos":[8230,8280],"content":"<bpt id=\"p1\">**</bpt>INT_PTR Append( const CWordArray&amp;<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>src<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**INT_PTR Append( const CWordArray&** *src* **);**"},{"pos":[8291,8298],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8302,8446],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class used in all collection examples.","source":"See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples."},{"pos":[8453,8535],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#76<ept id=\"p2\">](../../mfc/codesnippet/cpp/cobarray-class_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#76](../../mfc/codesnippet/cpp/cobarray-class_2.cpp)]"},{"pos":[8545,8590],"content":"<bpt id=\"p1\">&lt;a name=\"cobarray__copy\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CObArray::Copy","linkify":"<a name=\"cobarray__copy\"></a>  CObArray::Copy","source":"<a name=\"cobarray__copy\"></a>  CObArray::Copy"},{"content":"Call this member function to overwrite the elements of the given array with the elements of another array of the same type.","pos":[8594,8717]},{"pos":[8774,8784],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>src<ept id=\"p1\">*</ept>","pos":[8788,8793],"source":"*src*"},{"content":"Source of the elements to be copied to the array.","pos":[8797,8846]},{"pos":[8856,8863],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8867,9004],"content":"<bpt id=\"p1\">**</bpt>Copy<ept id=\"p1\">**</ept> does not free memory; however, if necessary, <bpt id=\"p2\">**</bpt>Copy<ept id=\"p2\">**</ept> may allocate extra memory to accommodate the elements copied to the array.","source":"**Copy** does not free memory; however, if necessary, **Copy** may allocate extra memory to accommodate the elements copied to the array."},{"pos":[9011,9097],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObArray::Copy`</ph>.","source":"The following table shows other member functions that are similar to `CObArray::Copy`."},{"content":"Class","pos":[9104,9109]},{"content":"Member Function","pos":[9110,9125]},{"pos":[9168,9221],"content":"<bpt id=\"p1\">[</bpt>CByteArray<ept id=\"p1\">](../../mfc/reference/cbytearray-class.md)</ept>","source":"[CByteArray](../../mfc/reference/cbytearray-class.md)"},{"pos":[9222,9267],"content":"<bpt id=\"p1\">**</bpt>void Copy( const CByteArray&amp;<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>src<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**void Copy( const CByteArray&** *src* **);**"},{"pos":[9272,9327],"content":"<bpt id=\"p1\">[</bpt>CDWordArray<ept id=\"p1\">](../../mfc/reference/cdwordarray-class.md)</ept>","source":"[CDWordArray](../../mfc/reference/cdwordarray-class.md)"},{"pos":[9328,9374],"content":"<bpt id=\"p1\">**</bpt>void Copy( const CDWordArray&amp;<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>src<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**void Copy( const CDWordArray&** *src* **);**"},{"pos":[9379,9430],"content":"<bpt id=\"p1\">[</bpt>CPtrArray<ept id=\"p1\">](../../mfc/reference/cptrarray-class.md)</ept>","source":"[CPtrArray](../../mfc/reference/cptrarray-class.md)"},{"pos":[9431,9475],"content":"<bpt id=\"p1\">**</bpt>void Copy( const CPtrArray&amp;<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>src<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**void Copy( const CPtrArray&** *src* **);**"},{"pos":[9480,9537],"content":"<bpt id=\"p1\">[</bpt>CStringArray<ept id=\"p1\">](../../mfc/reference/cstringarray-class.md)</ept>","source":"[CStringArray](../../mfc/reference/cstringarray-class.md)"},{"pos":[9538,9585],"content":"<bpt id=\"p1\">**</bpt>void Copy( const CStringArray&amp;<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>src<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**void Copy( const CStringArray&** *src* **);**"},{"pos":[9590,9643],"content":"<bpt id=\"p1\">[</bpt>CUIntArray<ept id=\"p1\">](../../mfc/reference/cuintarray-class.md)</ept>","source":"[CUIntArray](../../mfc/reference/cuintarray-class.md)"},{"pos":[9644,9689],"content":"<bpt id=\"p1\">**</bpt>void Copy( const CUIntArray&amp;<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>src<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**void Copy( const CUIntArray&** *src* **);**"},{"pos":[9694,9747],"content":"<bpt id=\"p1\">[</bpt>CWordArray<ept id=\"p1\">](../../mfc/reference/cwordarray-class.md)</ept>","source":"[CWordArray](../../mfc/reference/cwordarray-class.md)"},{"pos":[9748,9793],"content":"<bpt id=\"p1\">**</bpt>void Copy( const CWordArray&amp;<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>src<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**void Copy( const CWordArray&** *src* **);**"},{"pos":[9804,9811],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9815,9959],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class used in all collection examples.","source":"See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples."},{"pos":[9966,10048],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#77<ept id=\"p2\">](../../mfc/codesnippet/cpp/cobarray-class_3.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#77](../../mfc/codesnippet/cpp/cobarray-class_3.cpp)]"},{"pos":[10058,10111],"content":"<bpt id=\"p1\">&lt;a name=\"cobarray__cobarray\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CObArray::CObArray","linkify":"<a name=\"cobarray__cobarray\"></a>  CObArray::CObArray","source":"<a name=\"cobarray__cobarray\"></a>  CObArray::CObArray"},{"pos":[10115,10159],"content":"Constructs an empty <ph id=\"ph1\">`CObject`</ph> pointer array.","source":"Constructs an empty `CObject` pointer array."},{"pos":[10196,10203],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The array grows one element at a time.","pos":[10207,10245]},{"pos":[10252,10338],"content":"The following table shows other constructors that are similar to <ph id=\"ph1\">`CObArray::CObArray`</ph>.","source":"The following table shows other constructors that are similar to `CObArray::CObArray`."},{"content":"Class","pos":[10345,10350]},{"content":"Constructor","pos":[10351,10362]},{"pos":[10401,10454],"content":"<bpt id=\"p1\">[</bpt>CByteArray<ept id=\"p1\">](../../mfc/reference/cbytearray-class.md)</ept>","source":"[CByteArray](../../mfc/reference/cbytearray-class.md)"},{"pos":[10455,10473],"content":"<bpt id=\"p1\">**</bpt>CByteArray( );<ept id=\"p1\">**</ept>","source":"**CByteArray( );**"},{"pos":[10478,10533],"content":"<bpt id=\"p1\">[</bpt>CDWordArray<ept id=\"p1\">](../../mfc/reference/cdwordarray-class.md)</ept>","source":"[CDWordArray](../../mfc/reference/cdwordarray-class.md)"},{"pos":[10534,10553],"content":"<bpt id=\"p1\">**</bpt>CDWordArray( );<ept id=\"p1\">**</ept>","source":"**CDWordArray( );**"},{"pos":[10558,10609],"content":"<bpt id=\"p1\">[</bpt>CPtrArray<ept id=\"p1\">](../../mfc/reference/cptrarray-class.md)</ept>","source":"[CPtrArray](../../mfc/reference/cptrarray-class.md)"},{"pos":[10610,10627],"content":"<bpt id=\"p1\">**</bpt>CPtrArray( );<ept id=\"p1\">**</ept>","source":"**CPtrArray( );**"},{"pos":[10632,10689],"content":"<bpt id=\"p1\">[</bpt>CStringArray<ept id=\"p1\">](../../mfc/reference/cstringarray-class.md)</ept>","source":"[CStringArray](../../mfc/reference/cstringarray-class.md)"},{"pos":[10690,10710],"content":"<bpt id=\"p1\">**</bpt>CStringArray( );<ept id=\"p1\">**</ept>","source":"**CStringArray( );**"},{"pos":[10715,10768],"content":"<bpt id=\"p1\">[</bpt>CUIntArray<ept id=\"p1\">](../../mfc/reference/cuintarray-class.md)</ept>","source":"[CUIntArray](../../mfc/reference/cuintarray-class.md)"},{"pos":[10769,10787],"content":"<bpt id=\"p1\">**</bpt>CUIntArray( );<ept id=\"p1\">**</ept>","source":"**CUIntArray( );**"},{"pos":[10792,10845],"content":"<bpt id=\"p1\">[</bpt>CWordArray<ept id=\"p1\">](../../mfc/reference/cwordarray-class.md)</ept>","source":"[CWordArray](../../mfc/reference/cwordarray-class.md)"},{"pos":[10846,10864],"content":"<bpt id=\"p1\">**</bpt>CWordArray( );<ept id=\"p1\">**</ept>","source":"**CWordArray( );**"},{"pos":[10875,10882],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10886,10968],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#78<ept id=\"p2\">](../../mfc/codesnippet/cpp/cobarray-class_4.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#78](../../mfc/codesnippet/cpp/cobarray-class_4.cpp)]"},{"pos":[10978,11033],"content":"<bpt id=\"p1\">&lt;a name=\"cobarray__elementat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CObArray::ElementAt","linkify":"<a name=\"cobarray__elementat\"></a>  CObArray::ElementAt","source":"<a name=\"cobarray__elementat\"></a>  CObArray::ElementAt"},{"content":"Returns a temporary reference to the element pointer within the array.","pos":[11037,11107]},{"pos":[11169,11179],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An integer index that is greater than or equal to 0 and less than or equal to the value returned by <ph id=\"ph1\">`GetUpperBound`</ph>.","pos":[11195,11311],"source":" An integer index that is greater than or equal to 0 and less than or equal to the value returned by `GetUpperBound`."},{"pos":[11321,11333],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[11337,11372],"content":"A reference to a <ph id=\"ph1\">`CObject`</ph> pointer.","source":"A reference to a `CObject` pointer."},{"pos":[11382,11389],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"It is used to implement the left-side assignment operator for arrays.","pos":[11393,11462]},{"content":"Note that this is an advanced function that should be used only to implement special array operators.","pos":[11463,11564]},{"pos":[11571,11662],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObArray::ElementAt`</ph>.","source":"The following table shows other member functions that are similar to `CObArray::ElementAt`."},{"content":"Class","pos":[11669,11674]},{"content":"Member Function","pos":[11675,11690]},{"pos":[11733,11786],"content":"<bpt id=\"p1\">[</bpt>CByteArray<ept id=\"p1\">](../../mfc/reference/cbytearray-class.md)</ept>","source":"[CByteArray](../../mfc/reference/cbytearray-class.md)"},{"pos":[11787,11831],"content":"<bpt id=\"p1\">**</bpt>BYTE&amp; ElementAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>);<ept id=\"p2\">**</ept>","source":"**BYTE& ElementAt( INT_PTR** `nIndex` **);**"},{"pos":[11836,11891],"content":"<bpt id=\"p1\">[</bpt>CDWordArray<ept id=\"p1\">](../../mfc/reference/cdwordarray-class.md)</ept>","source":"[CDWordArray](../../mfc/reference/cdwordarray-class.md)"},{"pos":[11892,11937],"content":"<bpt id=\"p1\">**</bpt>DWORD&amp; ElementAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>);<ept id=\"p2\">**</ept>","source":"**DWORD& ElementAt( INT_PTR** `nIndex` **);**"},{"pos":[11942,11993],"content":"<bpt id=\"p1\">[</bpt>CPtrArray<ept id=\"p1\">](../../mfc/reference/cptrarray-class.md)</ept>","source":"[CPtrArray](../../mfc/reference/cptrarray-class.md)"},{"pos":[11994,12040],"content":"<bpt id=\"p1\">**</bpt>void<ph id=\"ph1\">\\*</ph>&amp; ElementAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph2\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>);<ept id=\"p2\">**</ept>","source":"**void\\*& ElementAt( INT_PTR** `nIndex` **);**"},{"pos":[12045,12102],"content":"<bpt id=\"p1\">[</bpt>CStringArray<ept id=\"p1\">](../../mfc/reference/cstringarray-class.md)</ept>","source":"[CStringArray](../../mfc/reference/cstringarray-class.md)"},{"pos":[12103,12150],"content":"<bpt id=\"p1\">**</bpt>CString&amp; ElementAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>);<ept id=\"p2\">**</ept>","source":"**CString& ElementAt( INT_PTR** `nIndex` **);**"},{"pos":[12155,12208],"content":"<bpt id=\"p1\">[</bpt>CUIntArray<ept id=\"p1\">](../../mfc/reference/cuintarray-class.md)</ept>","source":"[CUIntArray](../../mfc/reference/cuintarray-class.md)"},{"pos":[12209,12253],"content":"<bpt id=\"p1\">**</bpt>UINT&amp; ElementAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>);<ept id=\"p2\">**</ept>","source":"**UINT& ElementAt( INT_PTR** `nIndex` **);**"},{"pos":[12258,12311],"content":"<bpt id=\"p1\">[</bpt>CWordArray<ept id=\"p1\">](../../mfc/reference/cwordarray-class.md)</ept>","source":"[CWordArray](../../mfc/reference/cwordarray-class.md)"},{"pos":[12312,12356],"content":"<bpt id=\"p1\">**</bpt>WORD&amp; ElementAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>);<ept id=\"p2\">**</ept>","source":"**WORD& ElementAt( INT_PTR** `nIndex` **);**"},{"pos":[12367,12374],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12379,12439],"content":"See the example for <bpt id=\"p1\">[</bpt>CObArray::GetSize<ept id=\"p1\">](#cobarray__getsize)</ept>.","source":"See the example for [CObArray::GetSize](#cobarray__getsize)."},{"pos":[12449,12504],"content":"<bpt id=\"p1\">&lt;a name=\"cobarray__freeextra\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CObArray::FreeExtra","linkify":"<a name=\"cobarray__freeextra\"></a>  CObArray::FreeExtra","source":"<a name=\"cobarray__freeextra\"></a>  CObArray::FreeExtra"},{"content":"Frees any extra memory that was allocated while the array was grown.","pos":[12508,12576]},{"pos":[12619,12626],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function has no effect on the size or upper bound of the array.","pos":[12630,12698]},{"pos":[12705,12796],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObArray::FreeExtra`</ph>.","source":"The following table shows other member functions that are similar to `CObArray::FreeExtra`."},{"content":"Class","pos":[12803,12808]},{"content":"Member Function","pos":[12809,12824]},{"pos":[12867,12920],"content":"<bpt id=\"p1\">[</bpt>CByteArray<ept id=\"p1\">](../../mfc/reference/cbytearray-class.md)</ept>","source":"[CByteArray](../../mfc/reference/cbytearray-class.md)"},{"pos":[12921,12943],"content":"<bpt id=\"p1\">**</bpt>void FreeExtra( );<ept id=\"p1\">**</ept>","source":"**void FreeExtra( );**"},{"pos":[12948,13003],"content":"<bpt id=\"p1\">[</bpt>CDWordArray<ept id=\"p1\">](../../mfc/reference/cdwordarray-class.md)</ept>","source":"[CDWordArray](../../mfc/reference/cdwordarray-class.md)"},{"pos":[13004,13026],"content":"<bpt id=\"p1\">**</bpt>void FreeExtra( );<ept id=\"p1\">**</ept>","source":"**void FreeExtra( );**"},{"pos":[13031,13082],"content":"<bpt id=\"p1\">[</bpt>CPtrArray<ept id=\"p1\">](../../mfc/reference/cptrarray-class.md)</ept>","source":"[CPtrArray](../../mfc/reference/cptrarray-class.md)"},{"pos":[13083,13105],"content":"<bpt id=\"p1\">**</bpt>void FreeExtra( );<ept id=\"p1\">**</ept>","source":"**void FreeExtra( );**"},{"pos":[13110,13167],"content":"<bpt id=\"p1\">[</bpt>CStringArray<ept id=\"p1\">](../../mfc/reference/cstringarray-class.md)</ept>","source":"[CStringArray](../../mfc/reference/cstringarray-class.md)"},{"pos":[13168,13190],"content":"<bpt id=\"p1\">**</bpt>void FreeExtra( );<ept id=\"p1\">**</ept>","source":"**void FreeExtra( );**"},{"pos":[13195,13248],"content":"<bpt id=\"p1\">[</bpt>CUIntArray<ept id=\"p1\">](../../mfc/reference/cuintarray-class.md)</ept>","source":"[CUIntArray](../../mfc/reference/cuintarray-class.md)"},{"pos":[13249,13271],"content":"<bpt id=\"p1\">**</bpt>void FreeExtra( );<ept id=\"p1\">**</ept>","source":"**void FreeExtra( );**"},{"pos":[13276,13329],"content":"<bpt id=\"p1\">[</bpt>CWordArray<ept id=\"p1\">](../../mfc/reference/cwordarray-class.md)</ept>","source":"[CWordArray](../../mfc/reference/cwordarray-class.md)"},{"pos":[13330,13352],"content":"<bpt id=\"p1\">**</bpt>void FreeExtra( );<ept id=\"p1\">**</ept>","source":"**void FreeExtra( );**"},{"pos":[13363,13370],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13375,13435],"content":"See the example for <bpt id=\"p1\">[</bpt>CObArray::GetData<ept id=\"p1\">](#cobarray__getdata)</ept>.","source":"See the example for [CObArray::GetData](#cobarray__getdata)."},{"pos":[13445,13492],"content":"<bpt id=\"p1\">&lt;a name=\"cobarray__getat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CObArray::GetAt","linkify":"<a name=\"cobarray__getat\"></a>  CObArray::GetAt","source":"<a name=\"cobarray__getat\"></a>  CObArray::GetAt"},{"content":"Returns the array element at the specified index.","pos":[13496,13545]},{"pos":[13611,13621],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An integer index that is greater than or equal to 0 and less than or equal to the value returned by <ph id=\"ph1\">`GetUpperBound`</ph>.","pos":[13637,13753],"source":" An integer index that is greater than or equal to 0 and less than or equal to the value returned by `GetUpperBound`."},{"pos":[13763,13775],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[13779,13833],"content":"The <ph id=\"ph1\">`CObject`</ph> pointer element currently at this index.","source":"The `CObject` pointer element currently at this index."},{"pos":[13843,13850],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[13858,13990],"content":"[!NOTE]\n Passing a negative value or a value greater than the value returned by `GetUpperBound` will result in a failed assertion.","leadings":["","> "],"nodes":[{"content":"Passing a negative value or a value greater than the value returned by <ph id=\"ph1\">`GetUpperBound`</ph> will result in a failed assertion.","pos":[9,130],"source":" Passing a negative value or a value greater than the value returned by `GetUpperBound` will result in a failed assertion."}]},{"pos":[13997,14084],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObArray::GetAt`</ph>.","source":"The following table shows other member functions that are similar to `CObArray::GetAt`."},{"content":"Class","pos":[14091,14096]},{"content":"Member Function","pos":[14097,14112]},{"pos":[14155,14208],"content":"<bpt id=\"p1\">[</bpt>CByteArray<ept id=\"p1\">](../../mfc/reference/cbytearray-class.md)</ept>","source":"[CByteArray](../../mfc/reference/cbytearray-class.md)"},{"pos":[14209,14254],"content":"<bpt id=\"p1\">**</bpt>BYTE GetAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>) const;<ept id=\"p2\">**</ept>","source":"**BYTE GetAt( INT_PTR** `nIndex` **) const;**"},{"pos":[14259,14314],"content":"<bpt id=\"p1\">[</bpt>CDWordArray<ept id=\"p1\">](../../mfc/reference/cdwordarray-class.md)</ept>","source":"[CDWordArray](../../mfc/reference/cdwordarray-class.md)"},{"pos":[14315,14361],"content":"<bpt id=\"p1\">**</bpt>DWORD GetAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>) const;<ept id=\"p2\">**</ept>","source":"**DWORD GetAt( INT_PTR** `nIndex` **) const;**"},{"pos":[14366,14417],"content":"<bpt id=\"p1\">[</bpt>CPtrArray<ept id=\"p1\">](../../mfc/reference/cptrarray-class.md)</ept>","source":"[CPtrArray](../../mfc/reference/cptrarray-class.md)"},{"pos":[14418,14465],"content":"<bpt id=\"p1\">**</bpt>void<ph id=\"ph1\">\\*</ph> GetAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph2\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>) const;<ept id=\"p2\">**</ept>","source":"**void\\* GetAt( INT_PTR** `nIndex` **) const;**"},{"pos":[14470,14527],"content":"<bpt id=\"p1\">[</bpt>CStringArray<ept id=\"p1\">](../../mfc/reference/cstringarray-class.md)</ept>","source":"[CStringArray](../../mfc/reference/cstringarray-class.md)"},{"pos":[14528,14576],"content":"<bpt id=\"p1\">**</bpt>CString GetAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>) const;<ept id=\"p2\">**</ept>","source":"**CString GetAt( INT_PTR** `nIndex` **) const;**"},{"pos":[14581,14634],"content":"<bpt id=\"p1\">[</bpt>CUIntArray<ept id=\"p1\">](../../mfc/reference/cuintarray-class.md)</ept>","source":"[CUIntArray](../../mfc/reference/cuintarray-class.md)"},{"pos":[14635,14680],"content":"<bpt id=\"p1\">**</bpt>UINT GetAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>) const;<ept id=\"p2\">**</ept>","source":"**UINT GetAt( INT_PTR** `nIndex` **) const;**"},{"pos":[14685,14738],"content":"<bpt id=\"p1\">[</bpt>CWordArray<ept id=\"p1\">](../../mfc/reference/cwordarray-class.md)</ept>","source":"[CWordArray](../../mfc/reference/cwordarray-class.md)"},{"pos":[14739,14784],"content":"<bpt id=\"p1\">**</bpt>WORD GetAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>) const;<ept id=\"p2\">**</ept>","source":"**WORD GetAt( INT_PTR** `nIndex` **) const;**"},{"pos":[14795,14802],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[14806,14950],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class used in all collection examples.","source":"See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples."},{"pos":[14957,15039],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#79<ept id=\"p2\">](../../mfc/codesnippet/cpp/cobarray-class_5.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#79](../../mfc/codesnippet/cpp/cobarray-class_5.cpp)]"},{"pos":[15049,15102],"content":"<bpt id=\"p1\">&lt;a name=\"cobarray__getcount\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CObArray::GetCount","linkify":"<a name=\"cobarray__getcount\"></a>  CObArray::GetCount","source":"<a name=\"cobarray__getcount\"></a>  CObArray::GetCount"},{"content":"Returns the number of array elements.","pos":[15106,15143]},{"pos":[15197,15209],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of items in the array.","pos":[15213,15246]},{"pos":[15256,15263],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to retrieve the number of elements in the array.","pos":[15267,15332]},{"content":"Because indexes are zero-based, the size is 1 greater than the largest index.","pos":[15333,15410]},{"pos":[15417,15507],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObArray::GetCount`</ph>.","source":"The following table shows other member functions that are similar to `CObArray::GetCount`."},{"content":"Class","pos":[15514,15519]},{"content":"Member Function","pos":[15520,15535]},{"pos":[15578,15631],"content":"<bpt id=\"p1\">[</bpt>CByteArray<ept id=\"p1\">](../../mfc/reference/cbytearray-class.md)</ept>","source":"[CByteArray](../../mfc/reference/cbytearray-class.md)"},{"pos":[15632,15662],"content":"<bpt id=\"p1\">**</bpt>INT_PTR GetCount( ) const;<ept id=\"p1\">**</ept>","source":"**INT_PTR GetCount( ) const;**"},{"pos":[15667,15722],"content":"<bpt id=\"p1\">[</bpt>CDWordArray<ept id=\"p1\">](../../mfc/reference/cdwordarray-class.md)</ept>","source":"[CDWordArray](../../mfc/reference/cdwordarray-class.md)"},{"pos":[15723,15753],"content":"<bpt id=\"p1\">**</bpt>INT_PTR GetCount( ) const;<ept id=\"p1\">**</ept>","source":"**INT_PTR GetCount( ) const;**"},{"pos":[15758,15809],"content":"<bpt id=\"p1\">[</bpt>CPtrArray<ept id=\"p1\">](../../mfc/reference/cptrarray-class.md)</ept>","source":"[CPtrArray](../../mfc/reference/cptrarray-class.md)"},{"pos":[15810,15840],"content":"<bpt id=\"p1\">**</bpt>INT_PTR GetCount( ) const;<ept id=\"p1\">**</ept>","source":"**INT_PTR GetCount( ) const;**"},{"pos":[15845,15902],"content":"<bpt id=\"p1\">[</bpt>CStringArray<ept id=\"p1\">](../../mfc/reference/cstringarray-class.md)</ept>","source":"[CStringArray](../../mfc/reference/cstringarray-class.md)"},{"pos":[15903,15933],"content":"<bpt id=\"p1\">**</bpt>INT_PTR GetCount( ) const;<ept id=\"p1\">**</ept>","source":"**INT_PTR GetCount( ) const;**"},{"pos":[15938,15991],"content":"<bpt id=\"p1\">[</bpt>CUIntArray<ept id=\"p1\">](../../mfc/reference/cuintarray-class.md)</ept>","source":"[CUIntArray](../../mfc/reference/cuintarray-class.md)"},{"pos":[15992,16022],"content":"<bpt id=\"p1\">**</bpt>INT_PTR GetCount( ) const;<ept id=\"p1\">**</ept>","source":"**INT_PTR GetCount( ) const;**"},{"pos":[16027,16080],"content":"<bpt id=\"p1\">[</bpt>CWordArray<ept id=\"p1\">](../../mfc/reference/cwordarray-class.md)</ept>","source":"[CWordArray](../../mfc/reference/cwordarray-class.md)"},{"pos":[16081,16111],"content":"<bpt id=\"p1\">**</bpt>INT_PTR GetCount( ) const;<ept id=\"p1\">**</ept>","source":"**INT_PTR GetCount( ) const;**"},{"pos":[16122,16129],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[16133,16277],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class used in all collection examples.","source":"See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples."},{"pos":[16284,16366],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#80<ept id=\"p2\">](../../mfc/codesnippet/cpp/cobarray-class_6.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#80](../../mfc/codesnippet/cpp/cobarray-class_6.cpp)]"},{"pos":[16376,16427],"content":"<bpt id=\"p1\">&lt;a name=\"cobarray__getdata\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CObArray::GetData","linkify":"<a name=\"cobarray__getdata\"></a>  CObArray::GetData","source":"<a name=\"cobarray__getdata\"></a>  CObArray::GetData"},{"content":"Use this member function to gain direct access to the elements in the array.","pos":[16431,16507]},{"pos":[16595,16607],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16611,16656],"content":"A pointer to the array of <ph id=\"ph1\">`CObject`</ph> pointers.","source":"A pointer to the array of `CObject` pointers."},{"pos":[16666,16673],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[16677,16738],"content":"If no elements are available, <ph id=\"ph1\">`GetData`</ph> returns a null value.","source":"If no elements are available, `GetData` returns a null value."},{"pos":[16745,16924],"content":"While direct access to the elements of an array can help you work more quickly, use caution when calling <ph id=\"ph1\">`GetData`</ph>; any errors you make directly affect the elements of your array.","source":"While direct access to the elements of an array can help you work more quickly, use caution when calling `GetData`; any errors you make directly affect the elements of your array."},{"pos":[16931,17020],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObArray::GetData`</ph>.","source":"The following table shows other member functions that are similar to `CObArray::GetData`."},{"content":"Class","pos":[17027,17032]},{"content":"Member Function","pos":[17033,17048]},{"pos":[17091,17144],"content":"<bpt id=\"p1\">[</bpt>CByteArray<ept id=\"p1\">](../../mfc/reference/cbytearray-class.md)</ept>","source":"[CByteArray](../../mfc/reference/cbytearray-class.md)"},{"pos":[17145,17197],"content":"<bpt id=\"p1\">**</bpt>const BYTE<ph id=\"ph1\">\\*</ph> GetData( ) const;BYTE<ph id=\"ph2\">\\*</ph> GetData( );<ept id=\"p1\">**</ept>","source":"**const BYTE\\* GetData( ) const;BYTE\\* GetData( );**"},{"pos":[17202,17257],"content":"<bpt id=\"p1\">[</bpt>CDWordArray<ept id=\"p1\">](../../mfc/reference/cdwordarray-class.md)</ept>","source":"[CDWordArray](../../mfc/reference/cdwordarray-class.md)"},{"pos":[17258,17312],"content":"<bpt id=\"p1\">**</bpt>const DWORD<ph id=\"ph1\">\\*</ph> GetData( ) const;DWORD<ph id=\"ph2\">\\*</ph> GetData( );<ept id=\"p1\">**</ept>","source":"**const DWORD\\* GetData( ) const;DWORD\\* GetData( );**"},{"pos":[17317,17368],"content":"<bpt id=\"p1\">[</bpt>CPtrArray<ept id=\"p1\">](../../mfc/reference/cptrarray-class.md)</ept>","source":"[CPtrArray](../../mfc/reference/cptrarray-class.md)"},{"pos":[17369,17425],"content":"<bpt id=\"p1\">**</bpt>const void<ph id=\"ph1\">\\*</ph><ph id=\"ph2\">\\*</ph> GetData( ) const;void<ph id=\"ph3\">\\*</ph><ph id=\"ph4\">\\*</ph> GetData( );<ept id=\"p1\">**</ept>","source":"**const void\\*\\* GetData( ) const;void\\*\\* GetData( );**"},{"pos":[17430,17487],"content":"<bpt id=\"p1\">[</bpt>CStringArray<ept id=\"p1\">](../../mfc/reference/cstringarray-class.md)</ept>","source":"[CStringArray](../../mfc/reference/cstringarray-class.md)"},{"pos":[17488,17546],"content":"<bpt id=\"p1\">**</bpt>const CString<ph id=\"ph1\">\\*</ph> GetData( ) const;CString<ph id=\"ph2\">\\*</ph> GetData( );<ept id=\"p1\">**</ept>","source":"**const CString\\* GetData( ) const;CString\\* GetData( );**"},{"pos":[17551,17604],"content":"<bpt id=\"p1\">[</bpt>CUIntArray<ept id=\"p1\">](../../mfc/reference/cuintarray-class.md)</ept>","source":"[CUIntArray](../../mfc/reference/cuintarray-class.md)"},{"pos":[17605,17657],"content":"<bpt id=\"p1\">**</bpt>const UINT<ph id=\"ph1\">\\*</ph> GetData( ) const;UINT<ph id=\"ph2\">\\*</ph> GetData( );<ept id=\"p1\">**</ept>","source":"**const UINT\\* GetData( ) const;UINT\\* GetData( );**"},{"pos":[17662,17715],"content":"<bpt id=\"p1\">[</bpt>CWordArray<ept id=\"p1\">](../../mfc/reference/cwordarray-class.md)</ept>","source":"[CWordArray](../../mfc/reference/cwordarray-class.md)"},{"pos":[17716,17768],"content":"<bpt id=\"p1\">**</bpt>const WORD<ph id=\"ph1\">\\*</ph> GetData( ) const;WORD<ph id=\"ph2\">\\*</ph> GetData( );<ept id=\"p1\">**</ept>","source":"**const WORD\\* GetData( ) const;WORD\\* GetData( );**"},{"pos":[17779,17786],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[17790,17934],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class used in all collection examples.","source":"See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples."},{"pos":[17941,18023],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#81<ept id=\"p2\">](../../mfc/codesnippet/cpp/cobarray-class_7.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#81](../../mfc/codesnippet/cpp/cobarray-class_7.cpp)]"},{"pos":[18033,18084],"content":"<bpt id=\"p1\">&lt;a name=\"cobarray__getsize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CObArray::GetSize","linkify":"<a name=\"cobarray__getsize\"></a>  CObArray::GetSize","source":"<a name=\"cobarray__getsize\"></a>  CObArray::GetSize"},{"content":"Returns the size of the array.","pos":[18088,18118]},{"pos":[18171,18178],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Since indexes are zero-based, the size is 1 greater than the largest index.","pos":[18182,18257]},{"pos":[18264,18353],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObArray::GetSize`</ph>.","source":"The following table shows other member functions that are similar to `CObArray::GetSize`."},{"content":"Class","pos":[18360,18365]},{"content":"Member Function","pos":[18366,18381]},{"pos":[18424,18477],"content":"<bpt id=\"p1\">[</bpt>CByteArray<ept id=\"p1\">](../../mfc/reference/cbytearray-class.md)</ept>","source":"[CByteArray](../../mfc/reference/cbytearray-class.md)"},{"pos":[18478,18507],"content":"<bpt id=\"p1\">**</bpt>INT_PTR GetSize( ) const;<ept id=\"p1\">**</ept>","source":"**INT_PTR GetSize( ) const;**"},{"pos":[18512,18567],"content":"<bpt id=\"p1\">[</bpt>CDWordArray<ept id=\"p1\">](../../mfc/reference/cdwordarray-class.md)</ept>","source":"[CDWordArray](../../mfc/reference/cdwordarray-class.md)"},{"pos":[18568,18597],"content":"<bpt id=\"p1\">**</bpt>INT_PTR GetSize( ) const;<ept id=\"p1\">**</ept>","source":"**INT_PTR GetSize( ) const;**"},{"pos":[18602,18653],"content":"<bpt id=\"p1\">[</bpt>CPtrArray<ept id=\"p1\">](../../mfc/reference/cptrarray-class.md)</ept>","source":"[CPtrArray](../../mfc/reference/cptrarray-class.md)"},{"pos":[18654,18683],"content":"<bpt id=\"p1\">**</bpt>INT_PTR GetSize( ) const;<ept id=\"p1\">**</ept>","source":"**INT_PTR GetSize( ) const;**"},{"pos":[18688,18745],"content":"<bpt id=\"p1\">[</bpt>CStringArray<ept id=\"p1\">](../../mfc/reference/cstringarray-class.md)</ept>","source":"[CStringArray](../../mfc/reference/cstringarray-class.md)"},{"pos":[18746,18775],"content":"<bpt id=\"p1\">**</bpt>INT_PTR GetSize( ) const;<ept id=\"p1\">**</ept>","source":"**INT_PTR GetSize( ) const;**"},{"pos":[18780,18833],"content":"<bpt id=\"p1\">[</bpt>CUIntArray<ept id=\"p1\">](../../mfc/reference/cuintarray-class.md)</ept>","source":"[CUIntArray](../../mfc/reference/cuintarray-class.md)"},{"pos":[18834,18863],"content":"<bpt id=\"p1\">**</bpt>INT_PTR GetSize( ) const;<ept id=\"p1\">**</ept>","source":"**INT_PTR GetSize( ) const;**"},{"pos":[18868,18921],"content":"<bpt id=\"p1\">[</bpt>CWordArray<ept id=\"p1\">](../../mfc/reference/cwordarray-class.md)</ept>","source":"[CWordArray](../../mfc/reference/cwordarray-class.md)"},{"pos":[18922,18951],"content":"<bpt id=\"p1\">**</bpt>INT_PTR GetSize( ) const;<ept id=\"p1\">**</ept>","source":"**INT_PTR GetSize( ) const;**"},{"pos":[18962,18969],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[18973,19117],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class used in all collection examples.","source":"See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples."},{"pos":[19124,19206],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#82<ept id=\"p2\">](../../mfc/codesnippet/cpp/cobarray-class_8.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#82](../../mfc/codesnippet/cpp/cobarray-class_8.cpp)]"},{"pos":[19216,19279],"content":"<bpt id=\"p1\">&lt;a name=\"cobarray__getupperbound\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CObArray::GetUpperBound","linkify":"<a name=\"cobarray__getupperbound\"></a>  CObArray::GetUpperBound","source":"<a name=\"cobarray__getupperbound\"></a>  CObArray::GetUpperBound"},{"content":"Returns the current upper bound of this array.","pos":[19283,19329]},{"pos":[19388,19400],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The index of the upper bound (zero-based).","pos":[19404,19446]},{"pos":[19456,19463],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[19467,19557],"content":"Because array indexes are zero-based, this function returns a value 1 less than <ph id=\"ph1\">`GetSize`</ph>.","source":"Because array indexes are zero-based, this function returns a value 1 less than `GetSize`."},{"pos":[19564,19650],"content":"The condition <bpt id=\"p1\">**</bpt>GetUpperBound( )<ept id=\"p1\">**</ept> = –1 indicates that the array contains no elements.","source":"The condition **GetUpperBound( )** = –1 indicates that the array contains no elements."},{"pos":[19657,19752],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObArray::GetUpperBound`</ph>.","source":"The following table shows other member functions that are similar to `CObArray::GetUpperBound`."},{"content":"Class","pos":[19759,19764]},{"content":"Member Function","pos":[19765,19780]},{"pos":[19823,19876],"content":"<bpt id=\"p1\">[</bpt>CByteArray<ept id=\"p1\">](../../mfc/reference/cbytearray-class.md)</ept>","source":"[CByteArray](../../mfc/reference/cbytearray-class.md)"},{"pos":[19877,19912],"content":"<bpt id=\"p1\">**</bpt>INT_PTR GetUpperBound( ) const;<ept id=\"p1\">**</ept>","source":"**INT_PTR GetUpperBound( ) const;**"},{"pos":[19917,19972],"content":"<bpt id=\"p1\">[</bpt>CDWordArray<ept id=\"p1\">](../../mfc/reference/cdwordarray-class.md)</ept>","source":"[CDWordArray](../../mfc/reference/cdwordarray-class.md)"},{"pos":[19973,20008],"content":"<bpt id=\"p1\">**</bpt>INT_PTR GetUpperBound( ) const;<ept id=\"p1\">**</ept>","source":"**INT_PTR GetUpperBound( ) const;**"},{"pos":[20013,20064],"content":"<bpt id=\"p1\">[</bpt>CPtrArray<ept id=\"p1\">](../../mfc/reference/cptrarray-class.md)</ept>","source":"[CPtrArray](../../mfc/reference/cptrarray-class.md)"},{"pos":[20065,20100],"content":"<bpt id=\"p1\">**</bpt>INT_PTR GetUpperBound( ) const;<ept id=\"p1\">**</ept>","source":"**INT_PTR GetUpperBound( ) const;**"},{"pos":[20105,20162],"content":"<bpt id=\"p1\">[</bpt>CStringArray<ept id=\"p1\">](../../mfc/reference/cstringarray-class.md)</ept>","source":"[CStringArray](../../mfc/reference/cstringarray-class.md)"},{"pos":[20163,20198],"content":"<bpt id=\"p1\">**</bpt>INT_PTR GetUpperBound( ) const;<ept id=\"p1\">**</ept>","source":"**INT_PTR GetUpperBound( ) const;**"},{"pos":[20203,20256],"content":"<bpt id=\"p1\">[</bpt>CUIntArray<ept id=\"p1\">](../../mfc/reference/cuintarray-class.md)</ept>","source":"[CUIntArray](../../mfc/reference/cuintarray-class.md)"},{"pos":[20257,20292],"content":"<bpt id=\"p1\">**</bpt>INT_PTR GetUpperBound( ) const;<ept id=\"p1\">**</ept>","source":"**INT_PTR GetUpperBound( ) const;**"},{"pos":[20297,20350],"content":"<bpt id=\"p1\">[</bpt>CWordArray<ept id=\"p1\">](../../mfc/reference/cwordarray-class.md)</ept>","source":"[CWordArray](../../mfc/reference/cwordarray-class.md)"},{"pos":[20351,20386],"content":"<bpt id=\"p1\">**</bpt>INT_PTR GetUpperBound( ) const;<ept id=\"p1\">**</ept>","source":"**INT_PTR GetUpperBound( ) const;**"},{"pos":[20397,20404],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[20408,20552],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class used in all collection examples.","source":"See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples."},{"pos":[20559,20641],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#83<ept id=\"p2\">](../../mfc/codesnippet/cpp/cobarray-class_9.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#83](../../mfc/codesnippet/cpp/cobarray-class_9.cpp)]"},{"pos":[20651,20704],"content":"<bpt id=\"p1\">&lt;a name=\"cobarray__insertat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CObArray::InsertAt","linkify":"<a name=\"cobarray__insertat\"></a>  CObArray::InsertAt","source":"<a name=\"cobarray__insertat\"></a>  CObArray::InsertAt"},{"content":"Inserts an element (or all the elements in another array) at a specified index.","pos":[20708,20787]},{"pos":[20972,20982],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An integer index that may be greater than the value returned by <ph id=\"ph1\">`GetUpperBound`</ph>.","pos":[20998,21078],"source":" An integer index that may be greater than the value returned by `GetUpperBound`."},{"content":"The <ph id=\"ph1\">`CObject`</ph> pointer to be placed in this array.","pos":[21101,21150],"source":" The `CObject` pointer to be placed in this array."},{"content":"A <ph id=\"ph1\">`newElement`</ph> of value <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> is allowed.","pos":[21151,21195],"source":" A `newElement` of value **NULL** is allowed."},{"content":"The number of times this element should be inserted (defaults to 1).","pos":[21214,21282]},{"content":"An integer index that may be greater than the value returned by <ph id=\"ph1\">`GetUpperBound`</ph>.","pos":[21306,21386],"source":" An integer index that may be greater than the value returned by `GetUpperBound`."},{"content":"Another array that contains elements to be added to this array.","pos":[21408,21471]},{"pos":[21481,21488],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The first version of <ph id=\"ph1\">`InsertAt`</ph> inserts one element (or multiple copies of an element) at a specified index in an array.","pos":[21492,21612],"source":"The first version of `InsertAt` inserts one element (or multiple copies of an element) at a specified index in an array."},{"content":"In the process, it shifts up (by incrementing the index) the existing element at this index, and it shifts up all the elements above it.","pos":[21613,21749]},{"pos":[21756,21875],"content":"The second version inserts all the elements from another <ph id=\"ph1\">`CObArray`</ph> collection, starting at the <ph id=\"ph2\">`nStartIndex`</ph> position.","source":"The second version inserts all the elements from another `CObArray` collection, starting at the `nStartIndex` position."},{"pos":[21882,21986],"content":"The <ph id=\"ph1\">`SetAt`</ph> function, in contrast, replaces one specified array element and does not shift any elements.","source":"The `SetAt` function, in contrast, replaces one specified array element and does not shift any elements."},{"pos":[21993,22083],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObArray::InsertAt`</ph>.","source":"The following table shows other member functions that are similar to `CObArray::InsertAt`."},{"content":"Class","pos":[22090,22095]},{"content":"Member Function","pos":[22096,22111]},{"pos":[22154,22207],"content":"<bpt id=\"p1\">[</bpt>CByteArray<ept id=\"p1\">](../../mfc/reference/cbytearray-class.md)</ept>","source":"[CByteArray](../../mfc/reference/cbytearray-class.md)"},{"content":"<bpt id=\"p1\">**</bpt>void InsertAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>, BYTE<ept id=\"p2\">**</ept> <ph id=\"ph2\">`newElement`</ph> <bpt id=\"p3\">**</bpt>, int<ept id=\"p3\">**</ept> <ph id=\"ph3\">`nCount`</ph> <bpt id=\"p4\">**</bpt>= 1 );<ept id=\"p4\">**</ept>","pos":[22208,22297],"source":"**void InsertAt( INT_PTR** `nIndex` **, BYTE** `newElement` **, int** `nCount` **= 1 );**"},{"content":"<bpt id=\"p1\">**</bpt>throw( CMemoryException<ph id=\"ph1\">\\*</ph> );<ept id=\"p1\">**</ept>","pos":[22310,22342],"source":"**throw( CMemoryException\\* );**"},{"content":"<bpt id=\"p1\">**</bpt>void InsertAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nStartIndex`</ph> <bpt id=\"p2\">**</bpt>, CByteArray<ph id=\"ph2\">\\*</ph><ept id=\"p2\">**</ept> <ph id=\"ph3\">`pNewArray`</ph> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","pos":[22355,22433],"source":"**void InsertAt( INT_PTR** `nStartIndex` **, CByteArray\\*** `pNewArray` **);**"},{"content":"<bpt id=\"p1\">**</bpt>throw( CMemoryException<ph id=\"ph1\">\\*</ph> );<ept id=\"p1\">**</ept>","pos":[22446,22478],"source":"**throw( CMemoryException\\* );**"},{"pos":[22483,22538],"content":"<bpt id=\"p1\">[</bpt>CDWordArray<ept id=\"p1\">](../../mfc/reference/cdwordarray-class.md)</ept>","source":"[CDWordArray](../../mfc/reference/cdwordarray-class.md)"},{"content":"<bpt id=\"p1\">**</bpt>void InsertAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>, DWORD<ept id=\"p2\">**</ept> <ph id=\"ph2\">`newElement`</ph> <bpt id=\"p3\">**</bpt>, int<ept id=\"p3\">**</ept> <ph id=\"ph3\">`nCount`</ph> <bpt id=\"p4\">**</bpt>= 1 );<ept id=\"p4\">**</ept>","pos":[22539,22629],"source":"**void InsertAt( INT_PTR** `nIndex` **, DWORD** `newElement` **, int** `nCount` **= 1 );**"},{"content":"<bpt id=\"p1\">**</bpt>throw( CMemoryException<ph id=\"ph1\">\\*</ph> );<ept id=\"p1\">**</ept>","pos":[22642,22674],"source":"**throw( CMemoryException\\* );**"},{"content":"<bpt id=\"p1\">**</bpt>void InsertAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nStartIndex`</ph> <bpt id=\"p2\">**</bpt>, CDWordArray<ph id=\"ph2\">\\*</ph><ept id=\"p2\">**</ept> <ph id=\"ph3\">`pNewArray`</ph> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","pos":[22687,22766],"source":"**void InsertAt( INT_PTR** `nStartIndex` **, CDWordArray\\*** `pNewArray` **);**"},{"content":"<bpt id=\"p1\">**</bpt>throw( CMemoryException<ph id=\"ph1\">\\*</ph> );<ept id=\"p1\">**</ept>","pos":[22779,22811],"source":"**throw( CMemoryException\\* );**"},{"pos":[22816,22867],"content":"<bpt id=\"p1\">[</bpt>CPtrArray<ept id=\"p1\">](../../mfc/reference/cptrarray-class.md)</ept>","source":"[CPtrArray](../../mfc/reference/cptrarray-class.md)"},{"content":"<bpt id=\"p1\">**</bpt>void InsertAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>, void<ph id=\"ph2\">\\*</ph><ept id=\"p2\">**</ept> <ph id=\"ph3\">`newElement`</ph> <bpt id=\"p3\">**</bpt>, int<ept id=\"p3\">**</ept> <ph id=\"ph4\">`nCount`</ph> <bpt id=\"p4\">**</bpt>= 1 );<ept id=\"p4\">**</ept>","pos":[22868,22959],"source":"**void InsertAt( INT_PTR** `nIndex` **, void\\*** `newElement` **, int** `nCount` **= 1 );**"},{"content":"<bpt id=\"p1\">**</bpt>throw( CMemoryException<ph id=\"ph1\">\\*</ph> );<ept id=\"p1\">**</ept>","pos":[22972,23004],"source":"**throw( CMemoryException\\* );**"},{"content":"<bpt id=\"p1\">**</bpt>void InsertAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nStartIndex`</ph> <bpt id=\"p2\">**</bpt>, CPtrArray<ph id=\"ph2\">\\*</ph><ept id=\"p2\">**</ept> <ph id=\"ph3\">`pNewArray`</ph> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","pos":[23017,23094],"source":"**void InsertAt( INT_PTR** `nStartIndex` **, CPtrArray\\*** `pNewArray` **);**"},{"content":"<bpt id=\"p1\">**</bpt>throw( CMemoryException<ph id=\"ph1\">\\*</ph> );<ept id=\"p1\">**</ept>","pos":[23107,23139],"source":"**throw( CMemoryException\\* );**"},{"pos":[23144,23201],"content":"<bpt id=\"p1\">[</bpt>CStringArray<ept id=\"p1\">](../../mfc/reference/cstringarray-class.md)</ept>","source":"[CStringArray](../../mfc/reference/cstringarray-class.md)"},{"content":"<bpt id=\"p1\">**</bpt>void InsertAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>, LPCTSTR<ept id=\"p2\">**</ept> <ph id=\"ph2\">`newElement`</ph> <bpt id=\"p3\">**</bpt>, int<ept id=\"p3\">**</ept> <ph id=\"ph3\">`nCount`</ph> <bpt id=\"p4\">**</bpt>= 1 );<ept id=\"p4\">**</ept>","pos":[23202,23294],"source":"**void InsertAt( INT_PTR** `nIndex` **, LPCTSTR** `newElement` **, int** `nCount` **= 1 );**"},{"content":"<bpt id=\"p1\">**</bpt>throw( CMemoryException<ph id=\"ph1\">\\*</ph> );<ept id=\"p1\">**</ept>","pos":[23307,23339],"source":"**throw( CMemoryException\\* );**"},{"content":"<bpt id=\"p1\">**</bpt>void InsertAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nStartIndex`</ph> <bpt id=\"p2\">**</bpt>, CStringArray<ph id=\"ph2\">\\*</ph><ept id=\"p2\">**</ept> <ph id=\"ph3\">`pNewArray`</ph> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","pos":[23352,23432],"source":"**void InsertAt( INT_PTR** `nStartIndex` **, CStringArray\\*** `pNewArray` **);**"},{"content":"<bpt id=\"p1\">**</bpt>throw( CMemoryException<ph id=\"ph1\">\\*</ph> );<ept id=\"p1\">**</ept>","pos":[23445,23477],"source":"**throw( CMemoryException\\* );**"},{"pos":[23482,23535],"content":"<bpt id=\"p1\">[</bpt>CUIntArray<ept id=\"p1\">](../../mfc/reference/cuintarray-class.md)</ept>","source":"[CUIntArray](../../mfc/reference/cuintarray-class.md)"},{"content":"<bpt id=\"p1\">**</bpt>void InsertAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>, UINT<ept id=\"p2\">**</ept> <ph id=\"ph2\">`newElement`</ph> <bpt id=\"p3\">**</bpt>, int<ept id=\"p3\">**</ept> <ph id=\"ph3\">`nCount`</ph> <bpt id=\"p4\">**</bpt>= 1 );<ept id=\"p4\">**</ept>","pos":[23536,23625],"source":"**void InsertAt( INT_PTR** `nIndex` **, UINT** `newElement` **, int** `nCount` **= 1 );**"},{"content":"<bpt id=\"p1\">**</bpt>throw( CMemoryException<ph id=\"ph1\">\\*</ph> );<ept id=\"p1\">**</ept>","pos":[23638,23670],"source":"**throw( CMemoryException\\* );**"},{"content":"<bpt id=\"p1\">**</bpt>void InsertAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nStartIndex`</ph> <bpt id=\"p2\">**</bpt>, CUIntArray<ph id=\"ph2\">\\*</ph><ept id=\"p2\">**</ept> <ph id=\"ph3\">`pNewArray`</ph> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","pos":[23683,23761],"source":"**void InsertAt( INT_PTR** `nStartIndex` **, CUIntArray\\*** `pNewArray` **);**"},{"content":"<bpt id=\"p1\">**</bpt>throw( CMemoryException<ph id=\"ph1\">\\*</ph> );<ept id=\"p1\">**</ept>","pos":[23774,23806],"source":"**throw( CMemoryException\\* );**"},{"pos":[23811,23864],"content":"<bpt id=\"p1\">[</bpt>CWordArray<ept id=\"p1\">](../../mfc/reference/cwordarray-class.md)</ept>","source":"[CWordArray](../../mfc/reference/cwordarray-class.md)"},{"content":"<bpt id=\"p1\">**</bpt>void InsertAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>, WORD<ept id=\"p2\">**</ept> <ph id=\"ph2\">`newElement`</ph> <bpt id=\"p3\">**</bpt>, int<ept id=\"p3\">**</ept> <ph id=\"ph3\">`nCount`</ph> <bpt id=\"p4\">**</bpt>= 1 );<ept id=\"p4\">**</ept>","pos":[23865,23954],"source":"**void InsertAt( INT_PTR** `nIndex` **, WORD** `newElement` **, int** `nCount` **= 1 );**"},{"content":"<bpt id=\"p1\">**</bpt>throw( CMemoryException<ph id=\"ph1\">\\*</ph> );<ept id=\"p1\">**</ept>","pos":[23967,23999],"source":"**throw( CMemoryException\\* );**"},{"content":"<bpt id=\"p1\">**</bpt>void InsertAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nStartIndex`</ph> <bpt id=\"p2\">**</bpt>, CWordArray<ph id=\"ph2\">\\*</ph><ept id=\"p2\">**</ept> <ph id=\"ph3\">`pNewArray`</ph> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","pos":[24012,24090],"source":"**void InsertAt( INT_PTR** `nStartIndex` **, CWordArray\\*** `pNewArray` **);**"},{"content":"<bpt id=\"p1\">**</bpt>throw( CMemoryException<ph id=\"ph1\">\\*</ph> );<ept id=\"p1\">**</ept>","pos":[24103,24135],"source":"**throw( CMemoryException\\* );**"},{"pos":[24146,24153],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[24158,24302],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class used in all collection examples.","source":"See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples."},{"pos":[24309,24392],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#84<ept id=\"p2\">](../../mfc/codesnippet/cpp/cobarray-class_10.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#84](../../mfc/codesnippet/cpp/cobarray-class_10.cpp)]"},{"content":"The results from this program are as follows:","pos":[24399,24444]},{"pos":[24606,24657],"content":"<bpt id=\"p1\">&lt;a name=\"cobarray__isempty\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CObArray::IsEmpty","linkify":"<a name=\"cobarray__isempty\"></a>  CObArray::IsEmpty","source":"<a name=\"cobarray__isempty\"></a>  CObArray::IsEmpty"},{"content":"Determines if the array is empty.","pos":[24661,24694]},{"pos":[24744,24756],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the array is empty; otherwise 0.","pos":[24760,24803]},{"pos":[24813,24873],"content":"<bpt id=\"p1\">&lt;a name=\"cobarray__operator_at\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CObArray::operator [ ]","linkify":"<a name=\"cobarray__operator_at\"></a>  CObArray::operator [ ]","source":"<a name=\"cobarray__operator_at\"></a>  CObArray::operator [ ]"},{"pos":[24877,24969],"content":"These subscript operators are a convenient substitute for the <ph id=\"ph1\">`SetAt`</ph> and <ph id=\"ph2\">`GetAt`</ph> functions.","source":"These subscript operators are a convenient substitute for the `SetAt` and `GetAt` functions."},{"pos":[25081,25088],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The first operator, called for arrays that are not <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept>, may be used on either the right (r-value) or the left (l-value) of an assignment statement.","pos":[25092,25245],"source":"The first operator, called for arrays that are not **const**, may be used on either the right (r-value) or the left (l-value) of an assignment statement."},{"content":"The second, called for <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> arrays, may be used only on the right.","pos":[25246,25317],"source":" The second, called for **const** arrays, may be used only on the right."},{"content":"The Debug version of the library asserts if the subscript (either on the left or right side of an assignment statement) is out of bounds.","pos":[25324,25461]},{"pos":[25468,25556],"content":"The following table shows other operators that are similar to <bpt id=\"p1\">**</bpt>CObArray::operator []<ept id=\"p1\">**</ept>.","source":"The following table shows other operators that are similar to **CObArray::operator []**."},{"content":"Class","pos":[25563,25568]},{"content":"Operator","pos":[25569,25577]},{"pos":[25613,25666],"content":"<bpt id=\"p1\">[</bpt>CByteArray<ept id=\"p1\">](../../mfc/reference/cbytearray-class.md)</ept>","source":"[CByteArray](../../mfc/reference/cbytearray-class.md)"},{"content":"<bpt id=\"p1\">**</bpt>BYTE&amp; operator [](int_ptr<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nindex`</ph> <bpt id=\"p2\">**</bpt><ph id=\"ph2\">\\)</ph>;<ept id=\"p2\">**</ept>","pos":[25667,25713],"source":"**BYTE& operator [](int_ptr** `nindex` **\\);**"},{"content":"<bpt id=\"p1\">**</bpt>BYTE operator [](int_ptr<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nindex`</ph> <bpt id=\"p2\">**</bpt><ph id=\"ph2\">\\)</ph> const;<ept id=\"p2\">**</ept>","pos":[25726,25777],"source":"**BYTE operator [](int_ptr** `nindex` **\\) const;**"},{"pos":[25782,25837],"content":"<bpt id=\"p1\">[</bpt>CDWordArray<ept id=\"p1\">](../../mfc/reference/cdwordarray-class.md)</ept>","source":"[CDWordArray](../../mfc/reference/cdwordarray-class.md)"},{"content":"<bpt id=\"p1\">**</bpt>DWORD&amp; operator [](int_ptr<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nindex`</ph> <bpt id=\"p2\">**</bpt><ph id=\"ph2\">\\)</ph>;<ept id=\"p2\">**</ept>","pos":[25838,25885],"source":"**DWORD& operator [](int_ptr** `nindex` **\\);**"},{"content":"<bpt id=\"p1\">**</bpt>DWORD operator [](int_ptr<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nindex`</ph> <bpt id=\"p2\">**</bpt><ph id=\"ph2\">\\)</ph> const;<ept id=\"p2\">**</ept>","pos":[25898,25950],"source":"**DWORD operator [](int_ptr** `nindex` **\\) const;**"},{"pos":[25955,26006],"content":"<bpt id=\"p1\">[</bpt>CPtrArray<ept id=\"p1\">](../../mfc/reference/cptrarray-class.md)</ept>","source":"[CPtrArray](../../mfc/reference/cptrarray-class.md)"},{"content":"<bpt id=\"p1\">**</bpt>void<ph id=\"ph1\">\\*</ph>&amp; operator [](int_ptr<ept id=\"p1\">**</ept> <ph id=\"ph2\">`nindex`</ph> <bpt id=\"p2\">**</bpt><ph id=\"ph3\">\\)</ph>;<ept id=\"p2\">**</ept>","pos":[26007,26055],"source":"**void\\*& operator [](int_ptr** `nindex` **\\);**"},{"content":"<bpt id=\"p1\">**</bpt>void<ph id=\"ph1\">\\*</ph> operator [](int_ptr<ept id=\"p1\">**</ept> <ph id=\"ph2\">`nindex`</ph> <bpt id=\"p2\">**</bpt><ph id=\"ph3\">\\)</ph> const;<ept id=\"p2\">**</ept>","pos":[26068,26121],"source":"**void\\* operator [](int_ptr** `nindex` **\\) const;**"},{"pos":[26126,26183],"content":"<bpt id=\"p1\">[</bpt>CStringArray<ept id=\"p1\">](../../mfc/reference/cstringarray-class.md)</ept>","source":"[CStringArray](../../mfc/reference/cstringarray-class.md)"},{"content":"<bpt id=\"p1\">**</bpt>CString&amp; operator [](int_ptr<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nindex`</ph> <bpt id=\"p2\">**</bpt><ph id=\"ph2\">\\)</ph>;<ept id=\"p2\">**</ept>","pos":[26184,26233],"source":"**CString& operator [](int_ptr** `nindex` **\\);**"},{"content":"<bpt id=\"p1\">**</bpt>CString operator [](int_ptr<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nindex`</ph> <bpt id=\"p2\">**</bpt><ph id=\"ph2\">\\)</ph> const;<ept id=\"p2\">**</ept>","pos":[26246,26300],"source":"**CString operator [](int_ptr** `nindex` **\\) const;**"},{"pos":[26305,26358],"content":"<bpt id=\"p1\">[</bpt>CUIntArray<ept id=\"p1\">](../../mfc/reference/cuintarray-class.md)</ept>","source":"[CUIntArray](../../mfc/reference/cuintarray-class.md)"},{"content":"<bpt id=\"p1\">**</bpt>UINT&amp; operator [](int_ptr<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nindex`</ph> <bpt id=\"p2\">**</bpt><ph id=\"ph2\">\\)</ph>;<ept id=\"p2\">**</ept>","pos":[26359,26405],"source":"**UINT& operator [](int_ptr** `nindex` **\\);**"},{"content":"<bpt id=\"p1\">**</bpt>UINT operator [](int_ptr<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nindex`</ph> <bpt id=\"p2\">**</bpt><ph id=\"ph2\">\\)</ph> const;<ept id=\"p2\">**</ept>","pos":[26418,26469],"source":"**UINT operator [](int_ptr** `nindex` **\\) const;**"},{"pos":[26474,26527],"content":"<bpt id=\"p1\">[</bpt>CWordArray<ept id=\"p1\">](../../mfc/reference/cwordarray-class.md)</ept>","source":"[CWordArray](../../mfc/reference/cwordarray-class.md)"},{"content":"<bpt id=\"p1\">**</bpt>WORD&amp; operator [](int_ptr<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nindex`</ph> <bpt id=\"p2\">**</bpt><ph id=\"ph2\">\\)</ph>;<ept id=\"p2\">**</ept>","pos":[26528,26574],"source":"**WORD& operator [](int_ptr** `nindex` **\\);**"},{"content":"<bpt id=\"p1\">**</bpt>WORD operator [](int_ptr<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nindex`</ph> <bpt id=\"p2\">**</bpt><ph id=\"ph2\">\\)</ph> const;<ept id=\"p2\">**</ept>","pos":[26587,26638],"source":"**WORD operator [](int_ptr** `nindex` **\\) const;**"},{"pos":[26649,26656],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[26660,26804],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class used in all collection examples.","source":"See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples."},{"pos":[26811,26894],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#88<ept id=\"p2\">](../../mfc/codesnippet/cpp/cobarray-class_11.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#88](../../mfc/codesnippet/cpp/cobarray-class_11.cpp)]"},{"pos":[26904,26959],"content":"<bpt id=\"p1\">&lt;a name=\"cobarray__removeall\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CObArray::RemoveAll","linkify":"<a name=\"cobarray__removeall\"></a>  CObArray::RemoveAll","source":"<a name=\"cobarray__removeall\"></a>  CObArray::RemoveAll"},{"pos":[26963,27055],"content":"Removes all the pointers from this array but does not actually delete the <ph id=\"ph1\">`CObject`</ph> objects.","source":"Removes all the pointers from this array but does not actually delete the `CObject` objects."},{"pos":[27098,27105],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the array is already empty, the function still works.","pos":[27109,27165]},{"pos":[27172,27239],"content":"The <ph id=\"ph1\">`RemoveAll`</ph> function frees all memory used for pointer storage.","source":"The `RemoveAll` function frees all memory used for pointer storage."},{"pos":[27246,27337],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObArray::RemoveAll`</ph>.","source":"The following table shows other member functions that are similar to `CObArray::RemoveAll`."},{"content":"Class","pos":[27344,27349]},{"content":"Member Function","pos":[27350,27365]},{"pos":[27408,27461],"content":"<bpt id=\"p1\">[</bpt>CByteArray<ept id=\"p1\">](../../mfc/reference/cbytearray-class.md)</ept>","source":"[CByteArray](../../mfc/reference/cbytearray-class.md)"},{"pos":[27462,27484],"content":"<bpt id=\"p1\">**</bpt>void RemoveAll( );<ept id=\"p1\">**</ept>","source":"**void RemoveAll( );**"},{"pos":[27489,27544],"content":"<bpt id=\"p1\">[</bpt>CDWordArray<ept id=\"p1\">](../../mfc/reference/cdwordarray-class.md)</ept>","source":"[CDWordArray](../../mfc/reference/cdwordarray-class.md)"},{"pos":[27545,27567],"content":"<bpt id=\"p1\">**</bpt>void RemoveAll( );<ept id=\"p1\">**</ept>","source":"**void RemoveAll( );**"},{"pos":[27572,27623],"content":"<bpt id=\"p1\">[</bpt>CPtrArray<ept id=\"p1\">](../../mfc/reference/cptrarray-class.md)</ept>","source":"[CPtrArray](../../mfc/reference/cptrarray-class.md)"},{"pos":[27624,27646],"content":"<bpt id=\"p1\">**</bpt>void RemoveAll( );<ept id=\"p1\">**</ept>","source":"**void RemoveAll( );**"},{"pos":[27651,27708],"content":"<bpt id=\"p1\">[</bpt>CStringArray<ept id=\"p1\">](../../mfc/reference/cstringarray-class.md)</ept>","source":"[CStringArray](../../mfc/reference/cstringarray-class.md)"},{"pos":[27709,27731],"content":"<bpt id=\"p1\">**</bpt>void RemoveAll( );<ept id=\"p1\">**</ept>","source":"**void RemoveAll( );**"},{"pos":[27736,27789],"content":"<bpt id=\"p1\">[</bpt>CUIntArray<ept id=\"p1\">](../../mfc/reference/cuintarray-class.md)</ept>","source":"[CUIntArray](../../mfc/reference/cuintarray-class.md)"},{"pos":[27790,27812],"content":"<bpt id=\"p1\">**</bpt>void RemoveAll( );<ept id=\"p1\">**</ept>","source":"**void RemoveAll( );**"},{"pos":[27817,27870],"content":"<bpt id=\"p1\">[</bpt>CWordArray<ept id=\"p1\">](../../mfc/reference/cwordarray-class.md)</ept>","source":"[CWordArray](../../mfc/reference/cwordarray-class.md)"},{"pos":[27871,27893],"content":"<bpt id=\"p1\">**</bpt>void RemoveAll( );<ept id=\"p1\">**</ept>","source":"**void RemoveAll( );**"},{"pos":[27904,27911],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[27915,28059],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class used in all collection examples.","source":"See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples."},{"pos":[28066,28149],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#85<ept id=\"p2\">](../../mfc/codesnippet/cpp/cobarray-class_12.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#85](../../mfc/codesnippet/cpp/cobarray-class_12.cpp)]"},{"pos":[28159,28212],"content":"<bpt id=\"p1\">&lt;a name=\"cobarray__removeat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CObArray::RemoveAt","linkify":"<a name=\"cobarray__removeat\"></a>  CObArray::RemoveAt","source":"<a name=\"cobarray__removeat\"></a>  CObArray::RemoveAt"},{"content":"Removes one or more elements starting at a specified index in an array.","pos":[28216,28287]},{"pos":[28374,28384],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An integer index that is greater than or equal to 0 and less than or equal to the value returned by <ph id=\"ph1\">`GetUpperBound`</ph>.","pos":[28400,28516],"source":" An integer index that is greater than or equal to 0 and less than or equal to the value returned by `GetUpperBound`."},{"content":"The number of elements to remove.","pos":[28535,28568]},{"pos":[28578,28585],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In the process, it shifts down all the elements above the removed element(s).","pos":[28589,28666]},{"content":"It decrements the upper bound of the array but does not free memory.","pos":[28667,28735]},{"content":"If you try to remove more elements than are contained in the array above the removal point, then the Debug version of the library asserts.","pos":[28742,28880]},{"pos":[28887,28998],"content":"The <ph id=\"ph1\">`RemoveAt`</ph> function removes the <ph id=\"ph2\">`CObject`</ph> pointer from the array, but it does not delete the object itself.","source":"The `RemoveAt` function removes the `CObject` pointer from the array, but it does not delete the object itself."},{"pos":[29005,29095],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObArray::RemoveAt`</ph>.","source":"The following table shows other member functions that are similar to `CObArray::RemoveAt`."},{"content":"Class","pos":[29102,29107]},{"content":"Member Function","pos":[29108,29123]},{"pos":[29166,29219],"content":"<bpt id=\"p1\">[</bpt>CByteArray<ept id=\"p1\">](../../mfc/reference/cbytearray-class.md)</ept>","source":"[CByteArray](../../mfc/reference/cbytearray-class.md)"},{"pos":[29220,29289],"content":"<bpt id=\"p1\">**</bpt>void RemoveAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>, INT_PTR<ept id=\"p2\">**</ept> <ph id=\"ph2\">`nCount`</ph> <bpt id=\"p3\">**</bpt>= 1 );<ept id=\"p3\">**</ept>","source":"**void RemoveAt( INT_PTR** `nIndex` **, INT_PTR** `nCount` **= 1 );**"},{"pos":[29294,29349],"content":"<bpt id=\"p1\">[</bpt>CDWordArray<ept id=\"p1\">](../../mfc/reference/cdwordarray-class.md)</ept>","source":"[CDWordArray](../../mfc/reference/cdwordarray-class.md)"},{"pos":[29350,29419],"content":"<bpt id=\"p1\">**</bpt>void RemoveAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>, INT_PTR<ept id=\"p2\">**</ept> <ph id=\"ph2\">`nCount`</ph> <bpt id=\"p3\">**</bpt>= 1 );<ept id=\"p3\">**</ept>","source":"**void RemoveAt( INT_PTR** `nIndex` **, INT_PTR** `nCount` **= 1 );**"},{"pos":[29424,29475],"content":"<bpt id=\"p1\">[</bpt>CPtrArray<ept id=\"p1\">](../../mfc/reference/cptrarray-class.md)</ept>","source":"[CPtrArray](../../mfc/reference/cptrarray-class.md)"},{"pos":[29476,29545],"content":"<bpt id=\"p1\">**</bpt>void RemoveAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>, INT_PTR<ept id=\"p2\">**</ept> <ph id=\"ph2\">`nCount`</ph> <bpt id=\"p3\">**</bpt>= 1 );<ept id=\"p3\">**</ept>","source":"**void RemoveAt( INT_PTR** `nIndex` **, INT_PTR** `nCount` **= 1 );**"},{"pos":[29550,29607],"content":"<bpt id=\"p1\">[</bpt>CStringArray<ept id=\"p1\">](../../mfc/reference/cstringarray-class.md)</ept>","source":"[CStringArray](../../mfc/reference/cstringarray-class.md)"},{"pos":[29608,29677],"content":"<bpt id=\"p1\">**</bpt>void RemoveAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>, INT_PTR<ept id=\"p2\">**</ept> <ph id=\"ph2\">`nCount`</ph> <bpt id=\"p3\">**</bpt>= 1 );<ept id=\"p3\">**</ept>","source":"**void RemoveAt( INT_PTR** `nIndex` **, INT_PTR** `nCount` **= 1 );**"},{"pos":[29682,29735],"content":"<bpt id=\"p1\">[</bpt>CUIntArray<ept id=\"p1\">](../../mfc/reference/cuintarray-class.md)</ept>","source":"[CUIntArray](../../mfc/reference/cuintarray-class.md)"},{"pos":[29736,29805],"content":"<bpt id=\"p1\">**</bpt>void RemoveAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>, INT_PTR<ept id=\"p2\">**</ept> <ph id=\"ph2\">`nCount`</ph> <bpt id=\"p3\">**</bpt>= 1 );<ept id=\"p3\">**</ept>","source":"**void RemoveAt( INT_PTR** `nIndex` **, INT_PTR** `nCount` **= 1 );**"},{"pos":[29810,29863],"content":"<bpt id=\"p1\">[</bpt>CWordArray<ept id=\"p1\">](../../mfc/reference/cwordarray-class.md)</ept>","source":"[CWordArray](../../mfc/reference/cwordarray-class.md)"},{"pos":[29864,29933],"content":"<bpt id=\"p1\">**</bpt>void RemoveAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>, INT_PTR<ept id=\"p2\">**</ept> <bpt id=\"p3\">*</bpt>nCount<ept id=\"p3\">*</ept> <bpt id=\"p4\">**</bpt>= 1 );<ept id=\"p4\">**</ept>","source":"**void RemoveAt( INT_PTR** `nIndex` **, INT_PTR** *nCount* **= 1 );**"},{"pos":[29944,29951],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[29956,30100],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class used in all collection examples.","source":"See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples."},{"pos":[30107,30191],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#112<ept id=\"p2\">](../../mfc/codesnippet/cpp/cobarray-class_13.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#112](../../mfc/codesnippet/cpp/cobarray-class_13.cpp)]"},{"content":"The results from this program are as follows:","pos":[30198,30243]},{"pos":[30339,30386],"content":"<bpt id=\"p1\">&lt;a name=\"cobarray__setat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CObArray::SetAt","linkify":"<a name=\"cobarray__setat\"></a>  CObArray::SetAt","source":"<a name=\"cobarray__setat\"></a>  CObArray::SetAt"},{"content":"Sets the array element at the specified index.","pos":[30390,30436]},{"pos":[30521,30531],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An integer index that is greater than or equal to 0 and less than or equal to the value returned by <ph id=\"ph1\">`GetUpperBound`</ph>.","pos":[30547,30663],"source":" An integer index that is greater than or equal to 0 and less than or equal to the value returned by `GetUpperBound`."},{"content":"The object pointer to be inserted in this array.","pos":[30686,30734]},{"content":"A <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> value is allowed.","pos":[30735,30763],"source":" A **NULL** value is allowed."},{"pos":[30773,30780],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`SetAt`</ph> will not cause the array to grow.","pos":[30784,30825],"source":"`SetAt` will not cause the array to grow."},{"content":"Use <ph id=\"ph1\">`SetAtGrow`</ph> if you want the array to grow automatically.","pos":[30826,30886],"source":" Use `SetAtGrow` if you want the array to grow automatically."},{"content":"You must ensure that your index value represents a valid position in the array.","pos":[30893,30972]},{"content":"If it is out of bounds, then the Debug version of the library asserts.","pos":[30973,31043]},{"pos":[31050,31137],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObArray::SetAt`</ph>.","source":"The following table shows other member functions that are similar to `CObArray::SetAt`."},{"content":"Class","pos":[31144,31149]},{"content":"Member Function","pos":[31150,31165]},{"pos":[31208,31261],"content":"<bpt id=\"p1\">[</bpt>CByteArray<ept id=\"p1\">](../../mfc/reference/cbytearray-class.md)</ept>","source":"[CByteArray](../../mfc/reference/cbytearray-class.md)"},{"pos":[31262,31325],"content":"<bpt id=\"p1\">**</bpt>void SetAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>, BYTE<ept id=\"p2\">**</ept> <ph id=\"ph2\">`newElement`</ph> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**void SetAt( INT_PTR** `nIndex` **, BYTE** `newElement` **);**"},{"pos":[31330,31385],"content":"<bpt id=\"p1\">[</bpt>CDWordArray<ept id=\"p1\">](../../mfc/reference/cdwordarray-class.md)</ept>","source":"[CDWordArray](../../mfc/reference/cdwordarray-class.md)"},{"pos":[31386,31450],"content":"<bpt id=\"p1\">**</bpt>void SetAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>, DWORD<ept id=\"p2\">**</ept> <ph id=\"ph2\">`newElement`</ph> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**void SetAt( INT_PTR** `nIndex` **, DWORD** `newElement` **);**"},{"pos":[31455,31506],"content":"<bpt id=\"p1\">[</bpt>CPtrArray<ept id=\"p1\">](../../mfc/reference/cptrarray-class.md)</ept>","source":"[CPtrArray](../../mfc/reference/cptrarray-class.md)"},{"pos":[31507,31572],"content":"<bpt id=\"p1\">**</bpt>void SetAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>, void<ph id=\"ph2\">\\*</ph><ept id=\"p2\">**</ept> <ph id=\"ph3\">`newElement`</ph> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**void SetAt( INT_PTR** `nIndex` **, void\\*** `newElement` **);**"},{"pos":[31577,31634],"content":"<bpt id=\"p1\">[</bpt>CStringArray<ept id=\"p1\">](../../mfc/reference/cstringarray-class.md)</ept>","source":"[CStringArray](../../mfc/reference/cstringarray-class.md)"},{"pos":[31635,31701],"content":"<bpt id=\"p1\">**</bpt>void SetAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>, LPCTSTR<ept id=\"p2\">**</ept> <ph id=\"ph2\">`newElement`</ph> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**void SetAt( INT_PTR** `nIndex` **, LPCTSTR** `newElement` **);**"},{"pos":[31706,31759],"content":"<bpt id=\"p1\">[</bpt>CUIntArray<ept id=\"p1\">](../../mfc/reference/cuintarray-class.md)</ept>","source":"[CUIntArray](../../mfc/reference/cuintarray-class.md)"},{"pos":[31760,31823],"content":"<bpt id=\"p1\">**</bpt>void SetAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>, UINT<ept id=\"p2\">**</ept> <ph id=\"ph2\">`newElement`</ph> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**void SetAt( INT_PTR** `nIndex` **, UINT** `newElement` **);**"},{"pos":[31828,31881],"content":"<bpt id=\"p1\">[</bpt>CWordArray<ept id=\"p1\">](../../mfc/reference/cwordarray-class.md)</ept>","source":"[CWordArray](../../mfc/reference/cwordarray-class.md)"},{"pos":[31882,31945],"content":"<bpt id=\"p1\">**</bpt>void SetAt( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>, WORD<ept id=\"p2\">**</ept> <ph id=\"ph2\">`newElement`</ph> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**void SetAt( INT_PTR** `nIndex` **, WORD** `newElement` **);**"},{"pos":[31956,31963],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[31968,32112],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class used in all collection examples.","source":"See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples."},{"pos":[32119,32202],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#86<ept id=\"p2\">](../../mfc/codesnippet/cpp/cobarray-class_14.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#86](../../mfc/codesnippet/cpp/cobarray-class_14.cpp)]"},{"content":"The results from this program are as follows:","pos":[32209,32254]},{"pos":[32380,32435],"content":"<bpt id=\"p1\">&lt;a name=\"cobarray__setatgrow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CObArray::SetAtGrow","linkify":"<a name=\"cobarray__setatgrow\"></a>  CObArray::SetAtGrow","source":"<a name=\"cobarray__setatgrow\"></a>  CObArray::SetAtGrow"},{"content":"Sets the array element at the specified index.","pos":[32439,32485]},{"pos":[32574,32584],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An integer index that is greater than or equal to 0.","pos":[32600,32652]},{"content":"The object pointer to be added to this array.","pos":[32675,32720]},{"content":"A <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> value is allowed.","pos":[32721,32749],"source":" A **NULL** value is allowed."},{"pos":[32759,32766],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The array grows automatically if necessary (that is, the upper bound is adjusted to accommodate the new element).","pos":[32770,32883]},{"pos":[32890,32981],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObArray::SetAtGrow`</ph>.","source":"The following table shows other member functions that are similar to `CObArray::SetAtGrow`."},{"content":"Class","pos":[32988,32993]},{"content":"Member Function","pos":[32994,33009]},{"pos":[33052,33105],"content":"<bpt id=\"p1\">[</bpt>CByteArray<ept id=\"p1\">](../../mfc/reference/cbytearray-class.md)</ept>","source":"[CByteArray](../../mfc/reference/cbytearray-class.md)"},{"content":"<bpt id=\"p1\">**</bpt>void SetAtGrow( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>, BYTE<ept id=\"p2\">**</ept> <ph id=\"ph2\">`newElement`</ph> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","pos":[33106,33173],"source":"**void SetAtGrow( INT_PTR** `nIndex` **, BYTE** `newElement` **);**"},{"content":"<bpt id=\"p1\">**</bpt>throw( CMemoryException<ph id=\"ph1\">\\*</ph> );<ept id=\"p1\">**</ept>","pos":[33186,33218],"source":"**throw( CMemoryException\\* );**"},{"pos":[33223,33278],"content":"<bpt id=\"p1\">[</bpt>CDWordArray<ept id=\"p1\">](../../mfc/reference/cdwordarray-class.md)</ept>","source":"[CDWordArray](../../mfc/reference/cdwordarray-class.md)"},{"content":"<bpt id=\"p1\">**</bpt>void SetAtGrow( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>, DWORD<ept id=\"p2\">**</ept> <ph id=\"ph2\">`newElement`</ph> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","pos":[33279,33347],"source":"**void SetAtGrow( INT_PTR** `nIndex` **, DWORD** `newElement` **);**"},{"content":"<bpt id=\"p1\">**</bpt>throw( CMemoryException<ph id=\"ph1\">\\*</ph> );<ept id=\"p1\">**</ept>","pos":[33360,33392],"source":"**throw( CMemoryException\\* );**"},{"pos":[33397,33448],"content":"<bpt id=\"p1\">[</bpt>CPtrArray<ept id=\"p1\">](../../mfc/reference/cptrarray-class.md)</ept>","source":"[CPtrArray](../../mfc/reference/cptrarray-class.md)"},{"content":"<bpt id=\"p1\">**</bpt>void SetAtGrow( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>, void<ph id=\"ph2\">\\*</ph><ept id=\"p2\">**</ept> <ph id=\"ph3\">`newElement`</ph> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","pos":[33449,33518],"source":"**void SetAtGrow( INT_PTR** `nIndex` **, void\\*** `newElement` **);**"},{"content":"<bpt id=\"p1\">**</bpt>throw( CMemoryException<ph id=\"ph1\">\\*</ph> );<ept id=\"p1\">**</ept>","pos":[33531,33563],"source":"**throw( CMemoryException\\* );**"},{"pos":[33568,33625],"content":"<bpt id=\"p1\">[</bpt>CStringArray<ept id=\"p1\">](../../mfc/reference/cstringarray-class.md)</ept>","source":"[CStringArray](../../mfc/reference/cstringarray-class.md)"},{"content":"<bpt id=\"p1\">**</bpt>void SetAtGrow( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>, LPCTSTR<ept id=\"p2\">**</ept> <ph id=\"ph2\">`newElement`</ph> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","pos":[33626,33696],"source":"**void SetAtGrow( INT_PTR** `nIndex` **, LPCTSTR** `newElement` **);**"},{"content":"<bpt id=\"p1\">**</bpt>throw( CMemoryException<ph id=\"ph1\">\\*</ph> );<ept id=\"p1\">**</ept>","pos":[33709,33741],"source":"**throw( CMemoryException\\* );**"},{"pos":[33746,33799],"content":"<bpt id=\"p1\">[</bpt>CUIntArray<ept id=\"p1\">](../../mfc/reference/cuintarray-class.md)</ept>","source":"[CUIntArray](../../mfc/reference/cuintarray-class.md)"},{"content":"<bpt id=\"p1\">**</bpt>void SetAtGrow( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>, UINT<ept id=\"p2\">**</ept> <ph id=\"ph2\">`newElement`</ph> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","pos":[33800,33867],"source":"**void SetAtGrow( INT_PTR** `nIndex` **, UINT** `newElement` **);**"},{"content":"<bpt id=\"p1\">**</bpt>throw( CMemoryException<ph id=\"ph1\">\\*</ph> );<ept id=\"p1\">**</ept>","pos":[33880,33912],"source":"**throw( CMemoryException\\* );**"},{"pos":[33917,33970],"content":"<bpt id=\"p1\">[</bpt>CWordArray<ept id=\"p1\">](../../mfc/reference/cwordarray-class.md)</ept>","source":"[CWordArray](../../mfc/reference/cwordarray-class.md)"},{"content":"<bpt id=\"p1\">**</bpt>void SetAtGrow( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nIndex`</ph> <bpt id=\"p2\">**</bpt>, WORD<ept id=\"p2\">**</ept> <ph id=\"ph2\">`newElement`</ph> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","pos":[33971,34038],"source":"**void SetAtGrow( INT_PTR** `nIndex` **, WORD** `newElement` **);**"},{"content":"<bpt id=\"p1\">**</bpt>throw( CMemoryException<ph id=\"ph1\">\\*</ph> );<ept id=\"p1\">**</ept>","pos":[34051,34083],"source":"**throw( CMemoryException\\* );**"},{"pos":[34094,34101],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[34106,34250],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class used in all collection examples.","source":"See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples."},{"pos":[34257,34340],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#87<ept id=\"p2\">](../../mfc/codesnippet/cpp/cobarray-class_15.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#87](../../mfc/codesnippet/cpp/cobarray-class_15.cpp)]"},{"content":"The results from this program are as follows:","pos":[34347,34392]},{"pos":[34574,34625],"content":"<bpt id=\"p1\">&lt;a name=\"cobarray__setsize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CObArray::SetSize","linkify":"<a name=\"cobarray__setsize\"></a>  CObArray::SetSize","source":"<a name=\"cobarray__setsize\"></a>  CObArray::SetSize"},{"content":"Establishes the size of an empty or existing array; allocates memory if necessary.","pos":[34629,34711]},{"pos":[34801,34811],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The new array size (number of elements).","pos":[34829,34869]},{"content":"Must be greater than or equal to 0.","pos":[34870,34905]},{"content":"The minimum number of element slots to allocate if a size increase is necessary.","pos":[34925,35005]},{"pos":[35015,35022],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the new size is smaller than the old size, then the array is truncated and all unused memory is released.","pos":[35026,35134]},{"content":"For efficiency, call <ph id=\"ph1\">`SetSize`</ph> to set the size of the array before using it.","pos":[35135,35211],"source":" For efficiency, call `SetSize` to set the size of the array before using it."},{"content":"This prevents the need to reallocate and copy the array each time an item is added.","pos":[35212,35295]},{"content":"The <ph id=\"ph1\">`nGrowBy`</ph> parameter affects internal memory allocation while the array is growing.","pos":[35302,35388],"source":"The `nGrowBy` parameter affects internal memory allocation while the array is growing."},{"content":"Its use never affects the array size as reported by <ph id=\"ph1\">`GetSize`</ph> and <ph id=\"ph2\">`GetUpperBound`</ph>.","pos":[35389,35471],"source":" Its use never affects the array size as reported by `GetSize` and `GetUpperBound`."},{"pos":[35478,35574],"content":"If the size of the array has grown, all newly allocated <bpt id=\"p1\">**</bpt>CObject <ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> pointers are set to NULL.","source":"If the size of the array has grown, all newly allocated **CObject \\*** pointers are set to NULL."},{"pos":[35581,35670],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CObArray::SetSize`</ph>.","source":"The following table shows other member functions that are similar to `CObArray::SetSize`."},{"content":"Class","pos":[35677,35682]},{"content":"Member Function","pos":[35683,35698]},{"pos":[35741,35794],"content":"<bpt id=\"p1\">[</bpt>CByteArray<ept id=\"p1\">](../../mfc/reference/cbytearray-class.md)</ept>","source":"[CByteArray](../../mfc/reference/cbytearray-class.md)"},{"content":"<bpt id=\"p1\">**</bpt>void SetSize( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nNewSize`</ph> <bpt id=\"p2\">**</bpt>, int<ept id=\"p2\">**</ept> <ph id=\"ph2\">`nGrowBy`</ph> <bpt id=\"p3\">**</bpt>= -1 );<ept id=\"p3\">**</ept>","pos":[35795,35863],"source":"**void SetSize( INT_PTR** `nNewSize` **, int** `nGrowBy` **= -1 );**"},{"content":"<bpt id=\"p1\">**</bpt>throw( CMemoryException<ph id=\"ph1\">\\*</ph> );<ept id=\"p1\">**</ept>","pos":[35876,35908],"source":"**throw( CMemoryException\\* );**"},{"pos":[35913,35968],"content":"<bpt id=\"p1\">[</bpt>CDWordArray<ept id=\"p1\">](../../mfc/reference/cdwordarray-class.md)</ept>","source":"[CDWordArray](../../mfc/reference/cdwordarray-class.md)"},{"content":"<bpt id=\"p1\">**</bpt>void SetSize( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nNewSize`</ph> <bpt id=\"p2\">**</bpt>, int<ept id=\"p2\">**</ept> <ph id=\"ph2\">`nGrowBy`</ph> <bpt id=\"p3\">**</bpt>= -1 );<ept id=\"p3\">**</ept>","pos":[35969,36037],"source":"**void SetSize( INT_PTR** `nNewSize` **, int** `nGrowBy` **= -1 );**"},{"content":"<bpt id=\"p1\">**</bpt>throw( CMemoryException<ph id=\"ph1\">\\*</ph> );<ept id=\"p1\">**</ept>","pos":[36050,36082],"source":"**throw( CMemoryException\\* );**"},{"pos":[36087,36138],"content":"<bpt id=\"p1\">[</bpt>CPtrArray<ept id=\"p1\">](../../mfc/reference/cptrarray-class.md)</ept>","source":"[CPtrArray](../../mfc/reference/cptrarray-class.md)"},{"content":"<bpt id=\"p1\">**</bpt>void SetSize( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nNewSize`</ph> <bpt id=\"p2\">**</bpt>, int<ept id=\"p2\">**</ept> <ph id=\"ph2\">`nGrowBy`</ph> <bpt id=\"p3\">**</bpt>= -1 );<ept id=\"p3\">**</ept>","pos":[36139,36207],"source":"**void SetSize( INT_PTR** `nNewSize` **, int** `nGrowBy` **= -1 );**"},{"content":"<bpt id=\"p1\">**</bpt>throw( CMemoryException<ph id=\"ph1\">\\*</ph> );<ept id=\"p1\">**</ept>","pos":[36220,36252],"source":"**throw( CMemoryException\\* );**"},{"pos":[36257,36314],"content":"<bpt id=\"p1\">[</bpt>CStringArray<ept id=\"p1\">](../../mfc/reference/cstringarray-class.md)</ept>","source":"[CStringArray](../../mfc/reference/cstringarray-class.md)"},{"content":"<bpt id=\"p1\">**</bpt>void SetSize( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nNewSize`</ph> <bpt id=\"p2\">**</bpt>, int<ept id=\"p2\">**</ept> <ph id=\"ph2\">`nGrowBy`</ph> <bpt id=\"p3\">**</bpt>= -1 );<ept id=\"p3\">**</ept>","pos":[36315,36383],"source":"**void SetSize( INT_PTR** `nNewSize` **, int** `nGrowBy` **= -1 );**"},{"content":"<bpt id=\"p1\">**</bpt>throw( CMemoryException<ph id=\"ph1\">\\*</ph> );<ept id=\"p1\">**</ept>","pos":[36396,36428],"source":"**throw( CMemoryException\\* );**"},{"pos":[36433,36486],"content":"<bpt id=\"p1\">[</bpt>CUIntArray<ept id=\"p1\">](../../mfc/reference/cuintarray-class.md)</ept>","source":"[CUIntArray](../../mfc/reference/cuintarray-class.md)"},{"content":"<bpt id=\"p1\">**</bpt>void SetSize( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nNewSize`</ph> <bpt id=\"p2\">**</bpt>, int<ept id=\"p2\">**</ept> <ph id=\"ph2\">`nGrowBy`</ph> <bpt id=\"p3\">**</bpt>= -1 );<ept id=\"p3\">**</ept>","pos":[36487,36555],"source":"**void SetSize( INT_PTR** `nNewSize` **, int** `nGrowBy` **= -1 );**"},{"content":"<bpt id=\"p1\">**</bpt>throw( CMemoryException<ph id=\"ph1\">\\*</ph> );<ept id=\"p1\">**</ept>","pos":[36568,36600],"source":"**throw( CMemoryException\\* );**"},{"pos":[36605,36658],"content":"<bpt id=\"p1\">[</bpt>CWordArray<ept id=\"p1\">](../../mfc/reference/cwordarray-class.md)</ept>","source":"[CWordArray](../../mfc/reference/cwordarray-class.md)"},{"content":"<bpt id=\"p1\">**</bpt>void SetSize( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nNewSize`</ph> <bpt id=\"p2\">**</bpt>, int<ept id=\"p2\">**</ept> <ph id=\"ph2\">`nGrowBy`</ph> <bpt id=\"p3\">**</bpt>= -1 );<ept id=\"p3\">**</ept>","pos":[36659,36727],"source":"**void SetSize( INT_PTR** `nNewSize` **, int** `nGrowBy` **= -1 );**"},{"content":"<bpt id=\"p1\">**</bpt>throw( CMemoryException<ph id=\"ph1\">\\*</ph> );<ept id=\"p1\">**</ept>","pos":[36740,36772],"source":"**throw( CMemoryException\\* );**"},{"pos":[36783,36790],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[36795,36855],"content":"See the example for <bpt id=\"p1\">[</bpt>CObArray::GetData<ept id=\"p1\">](#cobarray__getdata)</ept>.","source":"See the example for [CObArray::GetData](#cobarray__getdata)."},{"pos":[36864,36872],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>CObject Class<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[36876,36930],"source":"[CObject Class](../../mfc/reference/cobject-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[36933,36982],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CStringArray Class<ept id=\"p1\">](../../mfc/reference/cstringarray-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[36985,37050],"source":" [CStringArray Class](../../mfc/reference/cstringarray-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CPtrArray Class<ept id=\"p1\">](../../mfc/reference/cptrarray-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[37053,37112],"source":" [CPtrArray Class](../../mfc/reference/cptrarray-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CByteArray Class<ept id=\"p1\">](../../mfc/reference/cbytearray-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[37115,37176],"source":" [CByteArray Class](../../mfc/reference/cbytearray-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CWordArray Class<ept id=\"p1\">](../../mfc/reference/cwordarray-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[37179,37240],"source":" [CWordArray Class](../../mfc/reference/cwordarray-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CDWordArray Class<ept id=\"p1\">](../../mfc/reference/cdwordarray-class.md)</ept>","pos":[37243,37305],"source":" [CDWordArray Class](../../mfc/reference/cdwordarray-class.md)"}],"content":"---\ntitle: \"CObArray Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CObArray\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"arrays [C++], pointers\"\n  - \"CObArray class\"\n  - \"arrays [C++], Object type\"\n  - \"object arrays, CObArray class\"\nms.assetid: 27894efd-2370-4776-9ed9-24a98492af17\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CObArray Class\nSupports arrays of `CObject` pointers.  \n  \n## Syntax  \n  \n```  \nclass CObArray : public CObject  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CObArray::CObArray](#cobarray__cobarray)|Constructs an empty array for `CObject` pointers.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CObArray::Add](#cobarray__add)|Adds an element to the end of the array; grows the array if necessary.|  \n|[CObArray::Append](#cobarray__append)|Appends another array to the array; grows the array if necessary.|  \n|[CObArray::Copy](#cobarray__copy)|Copies another array to the array; grows the array if necessary.|  \n|[CObArray::ElementAt](#cobarray__elementat)|Returns a temporary reference to the element pointer within the array.|  \n|[CObArray::FreeExtra](#cobarray__freeextra)|Frees all unused memory above the current upper bound.|  \n|[CObArray::GetAt](#cobarray__getat)|Returns the value at a given index.|  \n|[CObArray::GetCount](#cobarray__getcount)|Gets the number of elements in this array.|  \n|[CObArray::GetData](#cobarray__getdata)|Allows access to elements in the array. Can be **NULL**.|  \n|[CObArray::GetSize](#cobarray__getsize)|Gets the number of elements in this array.|  \n|[CObArray::GetUpperBound](#cobarray__getupperbound)|Returns the largest valid index.|  \n|[CObArray::InsertAt](#cobarray__insertat)|Inserts an element (or all the elements in another array) at a specified index.|  \n|[CObArray::IsEmpty](#cobarray__isempty)|Determines if the array is empty.|  \n|[CObArray::RemoveAll](#cobarray__removeall)|Removes all the elements from this array.|  \n|[CObArray::RemoveAt](#cobarray__removeat)|Removes an element at a specific index.|  \n|[CObArray::SetAt](#cobarray__setat)|Sets the value for a given index; array not allowed to grow.|  \n|[CObArray::SetAtGrow](#cobarray__setatgrow)|Sets the value for a given index; grows the array if necessary.|  \n|[CObArray::SetSize](#cobarray__setsize)|Sets the number of elements to be contained in this array.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CObArray::operator [ ]](#cobarray__operator_at)|Sets or gets the element at the specified index.|  \n  \n## Remarks  \n These object arrays are similar to C arrays, but they can dynamically shrink and grow as necessary.  \n  \n Array indexes always start at position 0. You can decide whether to fix the upper bound or allow the array to expand when you add elements past the current bound. Memory is allocated contiguously to the upper bound, even if some elements are null.  \n  \n Under Win32, the size of a `CObArray` object is limited only to available memory.  \n  \n As with a C array, the access time for a `CObArray` indexed element is constant and is independent of the array size.  \n  \n `CObArray` incorporates the `IMPLEMENT_SERIAL` macro to support serialization and dumping of its elements. If an array of `CObject` pointers is stored to an archive, either with the overloaded insertion operator or with the `Serialize` member function, each `CObject` element is, in turn, serialized along with its array index.  \n  \n If you need a dump of individual `CObject` elements in an array, you must set the depth of the `CDumpContext` object to 1 or greater.  \n  \n When a `CObArray` object is deleted, or when its elements are removed, only the `CObject` pointers are removed, not the objects they reference.  \n  \n> [!NOTE]\n>  Before using an array, use `SetSize` to establish its size and allocate memory for it. If you do not use `SetSize`, adding elements to your array causes it to be frequently reallocated and copied. Frequent reallocation and copying are inefficient and can fragment memory.  \n  \n Array class derivation is similar to list derivation. For details on the derivation of a special-purpose list class, see the article [Collections](../../mfc/collections.md).  \n  \n> [!NOTE]\n>  You must use the `IMPLEMENT_SERIAL` macro in the implementation of your derived class if you intend to serialize the array.  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n `CObArray`  \n  \n## Requirements  \n **Header:** afxcoll.h  \n  \n##  <a name=\"cobarray__add\"></a>  CObArray::Add  \n Adds a new element to the end of an array, growing the array by 1.  \n  \n```  \nINT_PTR Add(CObject* newElement);\n```  \n  \n### Parameters  \n `newElement`  \n The `CObject` pointer to be added to this array.  \n  \n### Return Value  \n The index of the added element.  \n  \n### Remarks  \n If [SetSize](#cobarray__setsize) has been used with an `nGrowBy` value greater than 1, then extra memory may be allocated. However, the upper bound will increase by only 1.  \n  \n The following table shows other member functions that are similar to `CObArray::Add`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CByteArray](../../mfc/reference/cbytearray-class.md)|**INT_PTR Add( BYTE** `newElement` **);**<br /><br /> **throw( CMemoryException\\* );**|  \n|[CDWordArray](../../mfc/reference/cdwordarray-class.md)|**INT_PTR Add( DWORD** `newElement` **);**<br /><br /> **throw( CMemoryException\\* );**|  \n|[CPtrArray](../../mfc/reference/cptrarray-class.md)|**INT_PTR Add( void\\*** `newElement` **);**<br /><br /> **throw( CMemoryException\\* );**|  \n|[CStringArray](../../mfc/reference/cstringarray-class.md)|**INT_PTR Add( LPCTSTR** `newElement` **); throw( CMemoryException\\* );**<br /><br /> **INT_PTR Add(const CString&** `newElement` **);**|  \n|[CUIntArray](../../mfc/reference/cuintarray-class.md)|**INT_PTR Add( UINT** `newElement` **);**<br /><br /> **throw( CMemoryException\\* );**|  \n|[CWordArray](../../mfc/reference/cwordarray-class.md)|**INT_PTR Add( WORD** `newElement` **);**<br /><br /> **throw( CMemoryException\\* );**|  \n  \n### Example  \n  See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples.  \n  \n [!code-cpp[NVC_MFCCollections#75](../../mfc/codesnippet/cpp/cobarray-class_1.cpp)]  \n  \n The results from this program are as follows:  \n  \n `Add example: A CObArray with 2 elements`  \n  \n `[0] = a CAge at $442A 21`  \n  \n `[1] = a CAge at $4468 40`  \n  \n##  <a name=\"cobarray__append\"></a>  CObArray::Append  \n Call this member function to add the contents of another array to the end of the given array.  \n  \n```  \nINT_PTR Append(const CObArray& src);\n```  \n  \n### Parameters  \n *src*  \n Source of the elements to be appended to the array.  \n  \n### Return Value  \n The index of the first appended element.  \n  \n### Remarks  \n The arrays must be of the same type.  \n  \n If necessary, **Append** may allocate extra memory to accommodate the elements appended to the array.  \n  \n The following table shows other member functions that are similar to `CObArray::Append`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CByteArray](../../mfc/reference/cbytearray-class.md)|**INT_PTR Append( const CByteArray&** *src* **);**|  \n|[CDWordArray](../../mfc/reference/cdwordarray-class.md)|**INT_PTR Append( const CDWordArray&** *src* **);**|  \n|[CPtrArray](../../mfc/reference/cptrarray-class.md)|**INT_PTR Append( const CPtrArray&** *src* **);**|  \n|[CStringArray](../../mfc/reference/cstringarray-class.md)|**INT_PTR Append( const CStringArray&** *src* **);**|  \n|[CUIntArray](../../mfc/reference/cuintarray-class.md)|**INT_PTR Append( const CUIntArray&** *src* **);**|  \n|[CWordArray](../../mfc/reference/cwordarray-class.md)|**INT_PTR Append( const CWordArray&** *src* **);**|  \n  \n### Example  \n See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples.  \n  \n [!code-cpp[NVC_MFCCollections#76](../../mfc/codesnippet/cpp/cobarray-class_2.cpp)]  \n  \n##  <a name=\"cobarray__copy\"></a>  CObArray::Copy  \n Call this member function to overwrite the elements of the given array with the elements of another array of the same type.  \n  \n```  \nvoid Copy(const CObArray& src);\n```  \n  \n### Parameters  \n *src*  \n Source of the elements to be copied to the array.  \n  \n### Remarks  \n **Copy** does not free memory; however, if necessary, **Copy** may allocate extra memory to accommodate the elements copied to the array.  \n  \n The following table shows other member functions that are similar to `CObArray::Copy`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CByteArray](../../mfc/reference/cbytearray-class.md)|**void Copy( const CByteArray&** *src* **);**|  \n|[CDWordArray](../../mfc/reference/cdwordarray-class.md)|**void Copy( const CDWordArray&** *src* **);**|  \n|[CPtrArray](../../mfc/reference/cptrarray-class.md)|**void Copy( const CPtrArray&** *src* **);**|  \n|[CStringArray](../../mfc/reference/cstringarray-class.md)|**void Copy( const CStringArray&** *src* **);**|  \n|[CUIntArray](../../mfc/reference/cuintarray-class.md)|**void Copy( const CUIntArray&** *src* **);**|  \n|[CWordArray](../../mfc/reference/cwordarray-class.md)|**void Copy( const CWordArray&** *src* **);**|  \n  \n### Example  \n See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples.  \n  \n [!code-cpp[NVC_MFCCollections#77](../../mfc/codesnippet/cpp/cobarray-class_3.cpp)]  \n  \n##  <a name=\"cobarray__cobarray\"></a>  CObArray::CObArray  \n Constructs an empty `CObject` pointer array.  \n  \n```  \nCObArray();\n```  \n  \n### Remarks  \n The array grows one element at a time.  \n  \n The following table shows other constructors that are similar to `CObArray::CObArray`.  \n  \n|Class|Constructor|  \n|-----------|-----------------|  \n|[CByteArray](../../mfc/reference/cbytearray-class.md)|**CByteArray( );**|  \n|[CDWordArray](../../mfc/reference/cdwordarray-class.md)|**CDWordArray( );**|  \n|[CPtrArray](../../mfc/reference/cptrarray-class.md)|**CPtrArray( );**|  \n|[CStringArray](../../mfc/reference/cstringarray-class.md)|**CStringArray( );**|  \n|[CUIntArray](../../mfc/reference/cuintarray-class.md)|**CUIntArray( );**|  \n|[CWordArray](../../mfc/reference/cwordarray-class.md)|**CWordArray( );**|  \n  \n### Example  \n [!code-cpp[NVC_MFCCollections#78](../../mfc/codesnippet/cpp/cobarray-class_4.cpp)]  \n  \n##  <a name=\"cobarray__elementat\"></a>  CObArray::ElementAt  \n Returns a temporary reference to the element pointer within the array.  \n  \n```  \nCObject*& ElementAt(INT_PTR nIndex);\n```  \n  \n### Parameters  \n `nIndex`  \n An integer index that is greater than or equal to 0 and less than or equal to the value returned by `GetUpperBound`.  \n  \n### Return Value  \n A reference to a `CObject` pointer.  \n  \n### Remarks  \n It is used to implement the left-side assignment operator for arrays. Note that this is an advanced function that should be used only to implement special array operators.  \n  \n The following table shows other member functions that are similar to `CObArray::ElementAt`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CByteArray](../../mfc/reference/cbytearray-class.md)|**BYTE& ElementAt( INT_PTR** `nIndex` **);**|  \n|[CDWordArray](../../mfc/reference/cdwordarray-class.md)|**DWORD& ElementAt( INT_PTR** `nIndex` **);**|  \n|[CPtrArray](../../mfc/reference/cptrarray-class.md)|**void\\*& ElementAt( INT_PTR** `nIndex` **);**|  \n|[CStringArray](../../mfc/reference/cstringarray-class.md)|**CString& ElementAt( INT_PTR** `nIndex` **);**|  \n|[CUIntArray](../../mfc/reference/cuintarray-class.md)|**UINT& ElementAt( INT_PTR** `nIndex` **);**|  \n|[CWordArray](../../mfc/reference/cwordarray-class.md)|**WORD& ElementAt( INT_PTR** `nIndex` **);**|  \n  \n### Example  \n  See the example for [CObArray::GetSize](#cobarray__getsize).  \n  \n##  <a name=\"cobarray__freeextra\"></a>  CObArray::FreeExtra  \n Frees any extra memory that was allocated while the array was grown.  \n  \n```  \nvoid FreeExtra();\n```  \n  \n### Remarks  \n This function has no effect on the size or upper bound of the array.  \n  \n The following table shows other member functions that are similar to `CObArray::FreeExtra`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CByteArray](../../mfc/reference/cbytearray-class.md)|**void FreeExtra( );**|  \n|[CDWordArray](../../mfc/reference/cdwordarray-class.md)|**void FreeExtra( );**|  \n|[CPtrArray](../../mfc/reference/cptrarray-class.md)|**void FreeExtra( );**|  \n|[CStringArray](../../mfc/reference/cstringarray-class.md)|**void FreeExtra( );**|  \n|[CUIntArray](../../mfc/reference/cuintarray-class.md)|**void FreeExtra( );**|  \n|[CWordArray](../../mfc/reference/cwordarray-class.md)|**void FreeExtra( );**|  \n  \n### Example  \n  See the example for [CObArray::GetData](#cobarray__getdata).  \n  \n##  <a name=\"cobarray__getat\"></a>  CObArray::GetAt  \n Returns the array element at the specified index.  \n  \n```  \nCObject* GetAt(INT_PTR nIndex) const;\n\n \n```  \n  \n### Parameters  \n `nIndex`  \n An integer index that is greater than or equal to 0 and less than or equal to the value returned by `GetUpperBound`.  \n  \n### Return Value  \n The `CObject` pointer element currently at this index.  \n  \n### Remarks  \n  \n> [!NOTE]\n>  Passing a negative value or a value greater than the value returned by `GetUpperBound` will result in a failed assertion.  \n  \n The following table shows other member functions that are similar to `CObArray::GetAt`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CByteArray](../../mfc/reference/cbytearray-class.md)|**BYTE GetAt( INT_PTR** `nIndex` **) const;**|  \n|[CDWordArray](../../mfc/reference/cdwordarray-class.md)|**DWORD GetAt( INT_PTR** `nIndex` **) const;**|  \n|[CPtrArray](../../mfc/reference/cptrarray-class.md)|**void\\* GetAt( INT_PTR** `nIndex` **) const;**|  \n|[CStringArray](../../mfc/reference/cstringarray-class.md)|**CString GetAt( INT_PTR** `nIndex` **) const;**|  \n|[CUIntArray](../../mfc/reference/cuintarray-class.md)|**UINT GetAt( INT_PTR** `nIndex` **) const;**|  \n|[CWordArray](../../mfc/reference/cwordarray-class.md)|**WORD GetAt( INT_PTR** `nIndex` **) const;**|  \n  \n### Example  \n See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples.  \n  \n [!code-cpp[NVC_MFCCollections#79](../../mfc/codesnippet/cpp/cobarray-class_5.cpp)]  \n  \n##  <a name=\"cobarray__getcount\"></a>  CObArray::GetCount  \n Returns the number of array elements.  \n  \n```  \nINT_PTR GetCount() const;\n\n \n```  \n  \n### Return Value  \n The number of items in the array.  \n  \n### Remarks  \n Call this method to retrieve the number of elements in the array. Because indexes are zero-based, the size is 1 greater than the largest index.  \n  \n The following table shows other member functions that are similar to `CObArray::GetCount`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CByteArray](../../mfc/reference/cbytearray-class.md)|**INT_PTR GetCount( ) const;**|  \n|[CDWordArray](../../mfc/reference/cdwordarray-class.md)|**INT_PTR GetCount( ) const;**|  \n|[CPtrArray](../../mfc/reference/cptrarray-class.md)|**INT_PTR GetCount( ) const;**|  \n|[CStringArray](../../mfc/reference/cstringarray-class.md)|**INT_PTR GetCount( ) const;**|  \n|[CUIntArray](../../mfc/reference/cuintarray-class.md)|**INT_PTR GetCount( ) const;**|  \n|[CWordArray](../../mfc/reference/cwordarray-class.md)|**INT_PTR GetCount( ) const;**|  \n  \n### Example  \n See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples.  \n  \n [!code-cpp[NVC_MFCCollections#80](../../mfc/codesnippet/cpp/cobarray-class_6.cpp)]  \n  \n##  <a name=\"cobarray__getdata\"></a>  CObArray::GetData  \n Use this member function to gain direct access to the elements in the array.  \n  \n```  \nconst CObject** GetData() const;\n\n \n \n    CObject** GetData();\n```  \n  \n### Return Value  \n A pointer to the array of `CObject` pointers.  \n  \n### Remarks  \n If no elements are available, `GetData` returns a null value.  \n  \n While direct access to the elements of an array can help you work more quickly, use caution when calling `GetData`; any errors you make directly affect the elements of your array.  \n  \n The following table shows other member functions that are similar to `CObArray::GetData`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CByteArray](../../mfc/reference/cbytearray-class.md)|**const BYTE\\* GetData( ) const;BYTE\\* GetData( );**|  \n|[CDWordArray](../../mfc/reference/cdwordarray-class.md)|**const DWORD\\* GetData( ) const;DWORD\\* GetData( );**|  \n|[CPtrArray](../../mfc/reference/cptrarray-class.md)|**const void\\*\\* GetData( ) const;void\\*\\* GetData( );**|  \n|[CStringArray](../../mfc/reference/cstringarray-class.md)|**const CString\\* GetData( ) const;CString\\* GetData( );**|  \n|[CUIntArray](../../mfc/reference/cuintarray-class.md)|**const UINT\\* GetData( ) const;UINT\\* GetData( );**|  \n|[CWordArray](../../mfc/reference/cwordarray-class.md)|**const WORD\\* GetData( ) const;WORD\\* GetData( );**|  \n  \n### Example  \n See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples.  \n  \n [!code-cpp[NVC_MFCCollections#81](../../mfc/codesnippet/cpp/cobarray-class_7.cpp)]  \n  \n##  <a name=\"cobarray__getsize\"></a>  CObArray::GetSize  \n Returns the size of the array.  \n  \n```  \nINT_PTR GetSize() const;\n\n \n```  \n  \n### Remarks  \n Since indexes are zero-based, the size is 1 greater than the largest index.  \n  \n The following table shows other member functions that are similar to `CObArray::GetSize`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CByteArray](../../mfc/reference/cbytearray-class.md)|**INT_PTR GetSize( ) const;**|  \n|[CDWordArray](../../mfc/reference/cdwordarray-class.md)|**INT_PTR GetSize( ) const;**|  \n|[CPtrArray](../../mfc/reference/cptrarray-class.md)|**INT_PTR GetSize( ) const;**|  \n|[CStringArray](../../mfc/reference/cstringarray-class.md)|**INT_PTR GetSize( ) const;**|  \n|[CUIntArray](../../mfc/reference/cuintarray-class.md)|**INT_PTR GetSize( ) const;**|  \n|[CWordArray](../../mfc/reference/cwordarray-class.md)|**INT_PTR GetSize( ) const;**|  \n  \n### Example  \n See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples.  \n  \n [!code-cpp[NVC_MFCCollections#82](../../mfc/codesnippet/cpp/cobarray-class_8.cpp)]  \n  \n##  <a name=\"cobarray__getupperbound\"></a>  CObArray::GetUpperBound  \n Returns the current upper bound of this array.  \n  \n```  \nINT_PTR GetUpperBound() const;\n\n \n```  \n  \n### Return Value  \n The index of the upper bound (zero-based).  \n  \n### Remarks  \n Because array indexes are zero-based, this function returns a value 1 less than `GetSize`.  \n  \n The condition **GetUpperBound( )** = –1 indicates that the array contains no elements.  \n  \n The following table shows other member functions that are similar to `CObArray::GetUpperBound`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CByteArray](../../mfc/reference/cbytearray-class.md)|**INT_PTR GetUpperBound( ) const;**|  \n|[CDWordArray](../../mfc/reference/cdwordarray-class.md)|**INT_PTR GetUpperBound( ) const;**|  \n|[CPtrArray](../../mfc/reference/cptrarray-class.md)|**INT_PTR GetUpperBound( ) const;**|  \n|[CStringArray](../../mfc/reference/cstringarray-class.md)|**INT_PTR GetUpperBound( ) const;**|  \n|[CUIntArray](../../mfc/reference/cuintarray-class.md)|**INT_PTR GetUpperBound( ) const;**|  \n|[CWordArray](../../mfc/reference/cwordarray-class.md)|**INT_PTR GetUpperBound( ) const;**|  \n  \n### Example  \n See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples.  \n  \n [!code-cpp[NVC_MFCCollections#83](../../mfc/codesnippet/cpp/cobarray-class_9.cpp)]  \n  \n##  <a name=\"cobarray__insertat\"></a>  CObArray::InsertAt  \n Inserts an element (or all the elements in another array) at a specified index.  \n  \n```  \nvoid InsertAt(\n    INT_PTR nIndex,  \n    CObject* newElement,  \n    INT_PTR nCount = 1);\n\n \nvoid InsertAt(\n    INT_PTR nStartIndex,  \n    CObArray* pNewArray);\n```  \n  \n### Parameters  \n `nIndex`  \n An integer index that may be greater than the value returned by `GetUpperBound`.  \n  \n `newElement`  \n The `CObject` pointer to be placed in this array. A `newElement` of value **NULL** is allowed.  \n  \n `nCount`  \n The number of times this element should be inserted (defaults to 1).  \n  \n `nStartIndex`  \n An integer index that may be greater than the value returned by `GetUpperBound`.  \n  \n `pNewArray`  \n Another array that contains elements to be added to this array.  \n  \n### Remarks  \n The first version of `InsertAt` inserts one element (or multiple copies of an element) at a specified index in an array. In the process, it shifts up (by incrementing the index) the existing element at this index, and it shifts up all the elements above it.  \n  \n The second version inserts all the elements from another `CObArray` collection, starting at the `nStartIndex` position.  \n  \n The `SetAt` function, in contrast, replaces one specified array element and does not shift any elements.  \n  \n The following table shows other member functions that are similar to `CObArray::InsertAt`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CByteArray](../../mfc/reference/cbytearray-class.md)|**void InsertAt( INT_PTR** `nIndex` **, BYTE** `newElement` **, int** `nCount` **= 1 );**<br /><br /> **throw( CMemoryException\\* );**<br /><br /> **void InsertAt( INT_PTR** `nStartIndex` **, CByteArray\\*** `pNewArray` **);**<br /><br /> **throw( CMemoryException\\* );**|  \n|[CDWordArray](../../mfc/reference/cdwordarray-class.md)|**void InsertAt( INT_PTR** `nIndex` **, DWORD** `newElement` **, int** `nCount` **= 1 );**<br /><br /> **throw( CMemoryException\\* );**<br /><br /> **void InsertAt( INT_PTR** `nStartIndex` **, CDWordArray\\*** `pNewArray` **);**<br /><br /> **throw( CMemoryException\\* );**|  \n|[CPtrArray](../../mfc/reference/cptrarray-class.md)|**void InsertAt( INT_PTR** `nIndex` **, void\\*** `newElement` **, int** `nCount` **= 1 );**<br /><br /> **throw( CMemoryException\\* );**<br /><br /> **void InsertAt( INT_PTR** `nStartIndex` **, CPtrArray\\*** `pNewArray` **);**<br /><br /> **throw( CMemoryException\\* );**|  \n|[CStringArray](../../mfc/reference/cstringarray-class.md)|**void InsertAt( INT_PTR** `nIndex` **, LPCTSTR** `newElement` **, int** `nCount` **= 1 );**<br /><br /> **throw( CMemoryException\\* );**<br /><br /> **void InsertAt( INT_PTR** `nStartIndex` **, CStringArray\\*** `pNewArray` **);**<br /><br /> **throw( CMemoryException\\* );**|  \n|[CUIntArray](../../mfc/reference/cuintarray-class.md)|**void InsertAt( INT_PTR** `nIndex` **, UINT** `newElement` **, int** `nCount` **= 1 );**<br /><br /> **throw( CMemoryException\\* );**<br /><br /> **void InsertAt( INT_PTR** `nStartIndex` **, CUIntArray\\*** `pNewArray` **);**<br /><br /> **throw( CMemoryException\\* );**|  \n|[CWordArray](../../mfc/reference/cwordarray-class.md)|**void InsertAt( INT_PTR** `nIndex` **, WORD** `newElement` **, int** `nCount` **= 1 );**<br /><br /> **throw( CMemoryException\\* );**<br /><br /> **void InsertAt( INT_PTR** `nStartIndex` **, CWordArray\\*** `pNewArray` **);**<br /><br /> **throw( CMemoryException\\* );**|  \n  \n### Example  \n  See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples.  \n  \n [!code-cpp[NVC_MFCCollections#84](../../mfc/codesnippet/cpp/cobarray-class_10.cpp)]  \n  \n The results from this program are as follows:  \n  \n `InsertAt example: A CObArray with 3 elements`  \n  \n `[0] = a CAge at $45C8 21`  \n  \n `[1] = a CAge at $4646 30`  \n  \n `[2] = a CAge at $4606 40`  \n  \n##  <a name=\"cobarray__isempty\"></a>  CObArray::IsEmpty  \n Determines if the array is empty.  \n  \n```  \nBOOL IsEmpty() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if the array is empty; otherwise 0.  \n  \n##  <a name=\"cobarray__operator_at\"></a>  CObArray::operator [ ]  \n These subscript operators are a convenient substitute for the `SetAt` and `GetAt` functions.  \n  \n```  \nCObject*& operator[](int_ptr nindex);\n\n \nCObject* operator[](int_ptr nindex) const;\n\n \n```  \n  \n### Remarks  \n The first operator, called for arrays that are not **const**, may be used on either the right (r-value) or the left (l-value) of an assignment statement. The second, called for **const** arrays, may be used only on the right.  \n  \n The Debug version of the library asserts if the subscript (either on the left or right side of an assignment statement) is out of bounds.  \n  \n The following table shows other operators that are similar to **CObArray::operator []**.  \n  \n|Class|Operator|  \n|-----------|--------------|  \n|[CByteArray](../../mfc/reference/cbytearray-class.md)|**BYTE& operator [](int_ptr** `nindex` **\\);**<br /><br /> **BYTE operator [](int_ptr** `nindex` **\\) const;**|  \n|[CDWordArray](../../mfc/reference/cdwordarray-class.md)|**DWORD& operator [](int_ptr** `nindex` **\\);**<br /><br /> **DWORD operator [](int_ptr** `nindex` **\\) const;**|  \n|[CPtrArray](../../mfc/reference/cptrarray-class.md)|**void\\*& operator [](int_ptr** `nindex` **\\);**<br /><br /> **void\\* operator [](int_ptr** `nindex` **\\) const;**|  \n|[CStringArray](../../mfc/reference/cstringarray-class.md)|**CString& operator [](int_ptr** `nindex` **\\);**<br /><br /> **CString operator [](int_ptr** `nindex` **\\) const;**|  \n|[CUIntArray](../../mfc/reference/cuintarray-class.md)|**UINT& operator [](int_ptr** `nindex` **\\);**<br /><br /> **UINT operator [](int_ptr** `nindex` **\\) const;**|  \n|[CWordArray](../../mfc/reference/cwordarray-class.md)|**WORD& operator [](int_ptr** `nindex` **\\);**<br /><br /> **WORD operator [](int_ptr** `nindex` **\\) const;**|  \n  \n### Example  \n See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples.  \n  \n [!code-cpp[NVC_MFCCollections#88](../../mfc/codesnippet/cpp/cobarray-class_11.cpp)]  \n  \n##  <a name=\"cobarray__removeall\"></a>  CObArray::RemoveAll  \n Removes all the pointers from this array but does not actually delete the `CObject` objects.  \n  \n```  \nvoid RemoveAll();\n```  \n  \n### Remarks  \n If the array is already empty, the function still works.  \n  \n The `RemoveAll` function frees all memory used for pointer storage.  \n  \n The following table shows other member functions that are similar to `CObArray::RemoveAll`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CByteArray](../../mfc/reference/cbytearray-class.md)|**void RemoveAll( );**|  \n|[CDWordArray](../../mfc/reference/cdwordarray-class.md)|**void RemoveAll( );**|  \n|[CPtrArray](../../mfc/reference/cptrarray-class.md)|**void RemoveAll( );**|  \n|[CStringArray](../../mfc/reference/cstringarray-class.md)|**void RemoveAll( );**|  \n|[CUIntArray](../../mfc/reference/cuintarray-class.md)|**void RemoveAll( );**|  \n|[CWordArray](../../mfc/reference/cwordarray-class.md)|**void RemoveAll( );**|  \n  \n### Example  \n See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples.  \n  \n [!code-cpp[NVC_MFCCollections#85](../../mfc/codesnippet/cpp/cobarray-class_12.cpp)]  \n  \n##  <a name=\"cobarray__removeat\"></a>  CObArray::RemoveAt  \n Removes one or more elements starting at a specified index in an array.  \n  \n```  \nvoid RemoveAt(\n    INT_PTR nIndex,  \n    INT_PTR nCount = 1);\n```  \n  \n### Parameters  \n `nIndex`  \n An integer index that is greater than or equal to 0 and less than or equal to the value returned by `GetUpperBound`.  \n  \n `nCount`  \n The number of elements to remove.  \n  \n### Remarks  \n In the process, it shifts down all the elements above the removed element(s). It decrements the upper bound of the array but does not free memory.  \n  \n If you try to remove more elements than are contained in the array above the removal point, then the Debug version of the library asserts.  \n  \n The `RemoveAt` function removes the `CObject` pointer from the array, but it does not delete the object itself.  \n  \n The following table shows other member functions that are similar to `CObArray::RemoveAt`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CByteArray](../../mfc/reference/cbytearray-class.md)|**void RemoveAt( INT_PTR** `nIndex` **, INT_PTR** `nCount` **= 1 );**|  \n|[CDWordArray](../../mfc/reference/cdwordarray-class.md)|**void RemoveAt( INT_PTR** `nIndex` **, INT_PTR** `nCount` **= 1 );**|  \n|[CPtrArray](../../mfc/reference/cptrarray-class.md)|**void RemoveAt( INT_PTR** `nIndex` **, INT_PTR** `nCount` **= 1 );**|  \n|[CStringArray](../../mfc/reference/cstringarray-class.md)|**void RemoveAt( INT_PTR** `nIndex` **, INT_PTR** `nCount` **= 1 );**|  \n|[CUIntArray](../../mfc/reference/cuintarray-class.md)|**void RemoveAt( INT_PTR** `nIndex` **, INT_PTR** `nCount` **= 1 );**|  \n|[CWordArray](../../mfc/reference/cwordarray-class.md)|**void RemoveAt( INT_PTR** `nIndex` **, INT_PTR** *nCount* **= 1 );**|  \n  \n### Example  \n  See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples.  \n  \n [!code-cpp[NVC_MFCCollections#112](../../mfc/codesnippet/cpp/cobarray-class_13.cpp)]  \n  \n The results from this program are as follows:  \n  \n `RemoveAt example: A CObArray with 1 elements`  \n  \n `[0] = a CAge at $4606 40`  \n  \n##  <a name=\"cobarray__setat\"></a>  CObArray::SetAt  \n Sets the array element at the specified index.  \n  \n```  \nvoid SetAt(\n    INT_PTR nIndex,  \n    CObject* newElement);\n```  \n  \n### Parameters  \n `nIndex`  \n An integer index that is greater than or equal to 0 and less than or equal to the value returned by `GetUpperBound`.  \n  \n `newElement`  \n The object pointer to be inserted in this array. A **NULL** value is allowed.  \n  \n### Remarks  \n `SetAt` will not cause the array to grow. Use `SetAtGrow` if you want the array to grow automatically.  \n  \n You must ensure that your index value represents a valid position in the array. If it is out of bounds, then the Debug version of the library asserts.  \n  \n The following table shows other member functions that are similar to `CObArray::SetAt`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CByteArray](../../mfc/reference/cbytearray-class.md)|**void SetAt( INT_PTR** `nIndex` **, BYTE** `newElement` **);**|  \n|[CDWordArray](../../mfc/reference/cdwordarray-class.md)|**void SetAt( INT_PTR** `nIndex` **, DWORD** `newElement` **);**|  \n|[CPtrArray](../../mfc/reference/cptrarray-class.md)|**void SetAt( INT_PTR** `nIndex` **, void\\*** `newElement` **);**|  \n|[CStringArray](../../mfc/reference/cstringarray-class.md)|**void SetAt( INT_PTR** `nIndex` **, LPCTSTR** `newElement` **);**|  \n|[CUIntArray](../../mfc/reference/cuintarray-class.md)|**void SetAt( INT_PTR** `nIndex` **, UINT** `newElement` **);**|  \n|[CWordArray](../../mfc/reference/cwordarray-class.md)|**void SetAt( INT_PTR** `nIndex` **, WORD** `newElement` **);**|  \n  \n### Example  \n  See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples.  \n  \n [!code-cpp[NVC_MFCCollections#86](../../mfc/codesnippet/cpp/cobarray-class_14.cpp)]  \n  \n The results from this program are as follows:  \n  \n `SetAt example: A CObArray with 2 elements`  \n  \n `[0] = a CAge at $47E0 30`  \n  \n `[1] = a CAge at $47A0 40`  \n  \n##  <a name=\"cobarray__setatgrow\"></a>  CObArray::SetAtGrow  \n Sets the array element at the specified index.  \n  \n```  \nvoid SetAtGrow(\n    INT_PTR nIndex,  \n    CObject* newElement);\n```  \n  \n### Parameters  \n `nIndex`  \n An integer index that is greater than or equal to 0.  \n  \n `newElement`  \n The object pointer to be added to this array. A **NULL** value is allowed.  \n  \n### Remarks  \n The array grows automatically if necessary (that is, the upper bound is adjusted to accommodate the new element).  \n  \n The following table shows other member functions that are similar to `CObArray::SetAtGrow`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CByteArray](../../mfc/reference/cbytearray-class.md)|**void SetAtGrow( INT_PTR** `nIndex` **, BYTE** `newElement` **);**<br /><br /> **throw( CMemoryException\\* );**|  \n|[CDWordArray](../../mfc/reference/cdwordarray-class.md)|**void SetAtGrow( INT_PTR** `nIndex` **, DWORD** `newElement` **);**<br /><br /> **throw( CMemoryException\\* );**|  \n|[CPtrArray](../../mfc/reference/cptrarray-class.md)|**void SetAtGrow( INT_PTR** `nIndex` **, void\\*** `newElement` **);**<br /><br /> **throw( CMemoryException\\* );**|  \n|[CStringArray](../../mfc/reference/cstringarray-class.md)|**void SetAtGrow( INT_PTR** `nIndex` **, LPCTSTR** `newElement` **);**<br /><br /> **throw( CMemoryException\\* );**|  \n|[CUIntArray](../../mfc/reference/cuintarray-class.md)|**void SetAtGrow( INT_PTR** `nIndex` **, UINT** `newElement` **);**<br /><br /> **throw( CMemoryException\\* );**|  \n|[CWordArray](../../mfc/reference/cwordarray-class.md)|**void SetAtGrow( INT_PTR** `nIndex` **, WORD** `newElement` **);**<br /><br /> **throw( CMemoryException\\* );**|  \n  \n### Example  \n  See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples.  \n  \n [!code-cpp[NVC_MFCCollections#87](../../mfc/codesnippet/cpp/cobarray-class_15.cpp)]  \n  \n The results from this program are as follows:  \n  \n `SetAtGrow example: A CObArray with 4 elements`  \n  \n `[0] = a CAge at $47C0 21`  \n  \n `[1] = a CAge at $4800 40`  \n  \n `[2] = NULL`  \n  \n `[3] = a CAge at $4840 65`  \n  \n##  <a name=\"cobarray__setsize\"></a>  CObArray::SetSize  \n Establishes the size of an empty or existing array; allocates memory if necessary.  \n  \n```  \nvoid SetSize(\n    INT_PTR nNewSize,  \n    INT_PTR nGrowBy = -1);\n```  \n  \n### Parameters  \n `nNewSize`  \n The new array size (number of elements). Must be greater than or equal to 0.  \n  \n `nGrowBy`  \n The minimum number of element slots to allocate if a size increase is necessary.  \n  \n### Remarks  \n If the new size is smaller than the old size, then the array is truncated and all unused memory is released. For efficiency, call `SetSize` to set the size of the array before using it. This prevents the need to reallocate and copy the array each time an item is added.  \n  \n The `nGrowBy` parameter affects internal memory allocation while the array is growing. Its use never affects the array size as reported by `GetSize` and `GetUpperBound`.  \n  \n If the size of the array has grown, all newly allocated **CObject \\*** pointers are set to NULL.  \n  \n The following table shows other member functions that are similar to `CObArray::SetSize`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CByteArray](../../mfc/reference/cbytearray-class.md)|**void SetSize( INT_PTR** `nNewSize` **, int** `nGrowBy` **= -1 );**<br /><br /> **throw( CMemoryException\\* );**|  \n|[CDWordArray](../../mfc/reference/cdwordarray-class.md)|**void SetSize( INT_PTR** `nNewSize` **, int** `nGrowBy` **= -1 );**<br /><br /> **throw( CMemoryException\\* );**|  \n|[CPtrArray](../../mfc/reference/cptrarray-class.md)|**void SetSize( INT_PTR** `nNewSize` **, int** `nGrowBy` **= -1 );**<br /><br /> **throw( CMemoryException\\* );**|  \n|[CStringArray](../../mfc/reference/cstringarray-class.md)|**void SetSize( INT_PTR** `nNewSize` **, int** `nGrowBy` **= -1 );**<br /><br /> **throw( CMemoryException\\* );**|  \n|[CUIntArray](../../mfc/reference/cuintarray-class.md)|**void SetSize( INT_PTR** `nNewSize` **, int** `nGrowBy` **= -1 );**<br /><br /> **throw( CMemoryException\\* );**|  \n|[CWordArray](../../mfc/reference/cwordarray-class.md)|**void SetSize( INT_PTR** `nNewSize` **, int** `nGrowBy` **= -1 );**<br /><br /> **throw( CMemoryException\\* );**|  \n  \n### Example  \n  See the example for [CObArray::GetData](#cobarray__getdata).  \n  \n## See Also  \n [CObject Class](../../mfc/reference/cobject-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CStringArray Class](../../mfc/reference/cstringarray-class.md)   \n [CPtrArray Class](../../mfc/reference/cptrarray-class.md)   \n [CByteArray Class](../../mfc/reference/cbytearray-class.md)   \n [CWordArray Class](../../mfc/reference/cwordarray-class.md)   \n [CDWordArray Class](../../mfc/reference/cdwordarray-class.md)\n"}