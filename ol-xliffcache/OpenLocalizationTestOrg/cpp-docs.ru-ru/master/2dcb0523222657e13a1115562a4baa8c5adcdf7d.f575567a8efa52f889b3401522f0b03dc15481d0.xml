{"nodes":[{"pos":[12,48],"content":"OLE Control Classes | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"OLE Control Classes | Microsoft Docs","pos":[0,36]}]},{"content":"OLE Control Classes","pos":[835,854]},{"content":"These are the primary classes you use when writing OLE controls.","pos":[855,919]},{"content":"The <ph id=\"ph1\">`COleControlModule`</ph> class in an OLE control module is like the <bpt id=\"p1\">[</bpt>CWinApp<ept id=\"p1\">](../mfc/reference/cwinapp-class.md)</ept> class in an application.","pos":[920,1056],"source":" The `COleControlModule` class in an OLE control module is like the [CWinApp](../mfc/reference/cwinapp-class.md) class in an application."},{"content":"Each module implements one or more OLE controls; these controls are represented by <ph id=\"ph1\">`COleControl`</ph> objects.","pos":[1057,1162],"source":" Each module implements one or more OLE controls; these controls are represented by `COleControl` objects."},{"content":"These controls communicate with their containers using <ph id=\"ph1\">`CConnectionPoint`</ph> objects.","pos":[1163,1245],"source":" These controls communicate with their containers using `CConnectionPoint` objects."},{"pos":[1252,1483],"content":"The <ph id=\"ph1\">`CPictureHolder`</ph> and <ph id=\"ph2\">`CFontHolder`</ph> classes encapsulate COM interfaces for pictures and fonts, while the <ph id=\"ph3\">`COlePropertyPage`</ph> and <ph id=\"ph4\">`CPropExchange`</ph> classes help you implement property pages and property persistence for your control.","source":"The `CPictureHolder` and `CFontHolder` classes encapsulate COM interfaces for pictures and fonts, while the `COlePropertyPage` and `CPropExchange` classes help you implement property pages and property persistence for your control."},{"content":"COleControlModule","pos":[1491,1508]},{"content":"Replaces the <ph id=\"ph1\">`CWinApp`</ph> class for your OLE control module.","pos":[1558,1615],"source":" Replaces the `CWinApp` class for your OLE control module."},{"content":"Derive from the <ph id=\"ph1\">`COleControlModule`</ph> class to develop an OLE control module object.","pos":[1616,1698],"source":" Derive from the `COleControlModule` class to develop an OLE control module object."},{"content":"It provides member functions for initializing your OLE control's module.","pos":[1699,1771]},{"content":"COleControl","pos":[1779,1790]},{"content":"Derive from the <ph id=\"ph1\">`COleControl`</ph> class to develop an OLE control.","pos":[1834,1896],"source":" Derive from the `COleControl` class to develop an OLE control."},{"content":"Derived from <ph id=\"ph1\">`CWnd`</ph>, this class inherits all the functionality of a Windows window object plus additional OLE-specific functionality, such as event firing and the ability to support methods and properties.","pos":[1897,2102],"source":" Derived from `CWnd`, this class inherits all the functionality of a Windows window object plus additional OLE-specific functionality, such as event firing and the ability to support methods and properties."},{"content":"CConnectionPoint","pos":[2110,2126]},{"content":"The <ph id=\"ph1\">`CConnectionPoint`</ph> class defines a special type of interface used to communicate with other OLE objects, called a connection point.","pos":[2175,2310],"source":" The `CConnectionPoint` class defines a special type of interface used to communicate with other OLE objects, called a connection point."},{"content":"A connection point implements an outgoing interface that is able to initiate actions on other objects, such as firing events and change notifications.","pos":[2311,2461]},{"content":"CPictureHolder","pos":[2469,2483]},{"content":"Encapsulates the functionality of a Windows picture object and the <ph id=\"ph1\">`IPicture`</ph> COM interface; used to implement the custom Picture property of an OLE control.","pos":[2530,2687],"source":" Encapsulates the functionality of a Windows picture object and the `IPicture` COM interface; used to implement the custom Picture property of an OLE control."},{"content":"CFontHolder","pos":[2695,2706]},{"content":"Encapsulates the functionality of a Windows font object and the <ph id=\"ph1\">`IFont`</ph> COM interface; used to implement the stock Font property of an OLE control.","pos":[2750,2897],"source":" Encapsulates the functionality of a Windows font object and the `IFont` COM interface; used to implement the stock Font property of an OLE control."},{"content":"COlePropertyPage","pos":[2905,2921]},{"content":"Displays the properties of an OLE control in a graphical interface, similar to a dialog box.","pos":[2970,3062]},{"content":"CPropExchange","pos":[3070,3083]},{"content":"Supports the implementation of property persistence for your OLE controls.","pos":[3129,3203]},{"content":"Analogous to <bpt id=\"p1\">[</bpt>CDataExchange<ept id=\"p1\">](../mfc/reference/cdataexchange-class.md)</ept> for dialog boxes.","pos":[3204,3291],"source":" Analogous to [CDataExchange](../mfc/reference/cdataexchange-class.md) for dialog boxes."},{"content":"CMonikerFile","pos":[3299,3311]},{"content":"Takes a moniker, or a string representation that it can make into a moniker, and binds it synchronously to the stream for which the moniker is a name.","pos":[3356,3506]},{"content":"CAsyncMonikerFile","pos":[3514,3531]},{"content":"Works similarly to <ph id=\"ph1\">`CMonikerFile`</ph>; however, it binds the moniker asynchronously to the stream for which the moniker is a name.","pos":[3581,3707],"source":" Works similarly to `CMonikerFile`; however, it binds the moniker asynchronously to the stream for which the moniker is a name."},{"content":"CDataPathProperty","pos":[3715,3732]},{"content":"Implements an OLE control property that can be loaded asynchronously.","pos":[3782,3851]},{"content":"CCachedDataPathProperty","pos":[3859,3882]},{"content":"Implements an OLE control property transferred asynchronously and cached in a memory file.","pos":[3938,4028]},{"content":"COleCmdUI","pos":[4036,4045]},{"content":"Allows an Active document to receive commands that originate in its container's user interface (such as FileNew, Open, Print, and so on), and allows a container to receive commands that originate in the Active document's user interface.","pos":[4087,4323]},{"content":"COleSafeArray","pos":[4331,4344]},{"content":"Works with arrays of arbitrary type and dimension.","pos":[4390,4440]},{"content":"See Also","pos":[4449,4457]},{"content":"Class Overview","pos":[4462,4476]}],"content":"---\ntitle: \"OLE Control Classes | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"vc.classes.ole\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ActiveX classes [C++]\"\n  - \"custom controls [MFC], classes\"\n  - \"ActiveX controls [C++], OLE control classes\"\n  - \"ActiveX control classes [C++]\"\n  - \"OLE controls [C++], classes\"\n  - \"OLE control classes [C++]\"\n  - \"reusable component classes\"\nms.assetid: 96495ec3-319e-4163-b839-1af0428ed9dd\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# OLE Control Classes\nThese are the primary classes you use when writing OLE controls. The `COleControlModule` class in an OLE control module is like the [CWinApp](../mfc/reference/cwinapp-class.md) class in an application. Each module implements one or more OLE controls; these controls are represented by `COleControl` objects. These controls communicate with their containers using `CConnectionPoint` objects.  \n  \n The `CPictureHolder` and `CFontHolder` classes encapsulate COM interfaces for pictures and fonts, while the `COlePropertyPage` and `CPropExchange` classes help you implement property pages and property persistence for your control.  \n  \n [COleControlModule](../mfc/reference/colecontrolmodule-class.md)  \n Replaces the `CWinApp` class for your OLE control module. Derive from the `COleControlModule` class to develop an OLE control module object. It provides member functions for initializing your OLE control's module.  \n  \n [COleControl](../mfc/reference/colecontrol-class.md)  \n Derive from the `COleControl` class to develop an OLE control. Derived from `CWnd`, this class inherits all the functionality of a Windows window object plus additional OLE-specific functionality, such as event firing and the ability to support methods and properties.  \n  \n [CConnectionPoint](../mfc/reference/cconnectionpoint-class.md)  \n The `CConnectionPoint` class defines a special type of interface used to communicate with other OLE objects, called a connection point. A connection point implements an outgoing interface that is able to initiate actions on other objects, such as firing events and change notifications.  \n  \n [CPictureHolder](../mfc/reference/cpictureholder-class.md)  \n Encapsulates the functionality of a Windows picture object and the `IPicture` COM interface; used to implement the custom Picture property of an OLE control.  \n  \n [CFontHolder](../mfc/reference/cfontholder-class.md)  \n Encapsulates the functionality of a Windows font object and the `IFont` COM interface; used to implement the stock Font property of an OLE control.  \n  \n [COlePropertyPage](../mfc/reference/colepropertypage-class.md)  \n Displays the properties of an OLE control in a graphical interface, similar to a dialog box.  \n  \n [CPropExchange](../mfc/reference/cpropexchange-class.md)  \n Supports the implementation of property persistence for your OLE controls. Analogous to [CDataExchange](../mfc/reference/cdataexchange-class.md) for dialog boxes.  \n  \n [CMonikerFile](../mfc/reference/cmonikerfile-class.md)  \n Takes a moniker, or a string representation that it can make into a moniker, and binds it synchronously to the stream for which the moniker is a name.  \n  \n [CAsyncMonikerFile](../mfc/reference/casyncmonikerfile-class.md)  \n Works similarly to `CMonikerFile`; however, it binds the moniker asynchronously to the stream for which the moniker is a name.  \n  \n [CDataPathProperty](../mfc/reference/cdatapathproperty-class.md)  \n Implements an OLE control property that can be loaded asynchronously.  \n  \n [CCachedDataPathProperty](../mfc/reference/ccacheddatapathproperty-class.md)  \n Implements an OLE control property transferred asynchronously and cached in a memory file.  \n  \n [COleCmdUI](../mfc/reference/colecmdui-class.md)  \n Allows an Active document to receive commands that originate in its container's user interface (such as FileNew, Open, Print, and so on), and allows a container to receive commands that originate in the Active document's user interface.  \n  \n [COleSafeArray](../mfc/reference/colesafearray-class.md)  \n Works with arrays of arbitrary type and dimension.  \n  \n## See Also  \n [Class Overview](../mfc/class-library-overview.md)\n\n"}