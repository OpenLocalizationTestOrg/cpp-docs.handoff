{"nodes":[{"pos":[12,59],"content":"_rotl, _rotl64, _rotr, _rotr64 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_rotl, _rotl64, _rotr, _rotr64 | Microsoft Docs","pos":[0,47]}]},{"pos":[1244,1274],"content":"_rotl, _rotl64, _rotr, _rotr64","linkify":"_rotl, _rotl64, _rotr, _rotr64","nodes":[{"content":"_rotl, _rotl64, _rotr, _rotr64","pos":[0,30]}]},{"pos":[1275,1329],"content":"Rotates bits to the left (<ph id=\"ph1\">`_rotl`</ph>) or right (<ph id=\"ph2\">`_rotr`</ph>).","source":"Rotates bits to the left (`_rotl`) or right (`_rotr`)."},{"pos":[1338,1344],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1670,1680],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>value<ept id=\"p1\">*</ept>","pos":[1684,1691],"source":"*value*"},{"content":"Value to be rotated.","pos":[1695,1715]},{"content":"Number of bits to shift.","pos":[1733,1757]},{"pos":[1766,1778],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The rotated value.","pos":[1782,1800]},{"content":"There is no error return.","pos":[1801,1826]},{"pos":[1835,1842],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_rotl`</ph> and <ph id=\"ph2\">`_rotr`</ph> functions rotate the unsigned <bpt id=\"p1\">*</bpt>value<ept id=\"p1\">*</ept> by <ph id=\"ph3\">`shift`</ph> bits.","pos":[1846,1924],"source":"The `_rotl` and `_rotr` functions rotate the unsigned *value* by `shift` bits."},{"content":"<ph id=\"ph1\">`_rotl`</ph> rotates the value left.","pos":[1925,1956],"source":"`_rotl` rotates the value left."},{"content":"<ph id=\"ph1\">`_rotr`</ph> rotates the value right.","pos":[1957,1989],"source":"`_rotr` rotates the value right."},{"content":"Both functions wrap bits rotated off one end of <bpt id=\"p1\">*</bpt>value<ept id=\"p1\">*</ept> to the other end.","pos":[1990,2063],"source":" Both functions wrap bits rotated off one end of *value* to the other end."},{"pos":[2072,2084],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[2091,2098]},{"content":"Required header","pos":[2099,2114]},{"pos":[2159,2177],"content":"<bpt id=\"p1\">**</bpt>_rotl, _rotl64<ept id=\"p1\">**</ept>","source":"**_rotl, _rotl64**"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdlib.h&gt;","pos":[2178,2189],"source":"\\<stdlib.h>"},{"pos":[2194,2212],"content":"<bpt id=\"p1\">**</bpt>_rotr, _rotr64<ept id=\"p1\">**</ept>","source":"**_rotr, _rotr64**"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdlib.h&gt;","pos":[2213,2224],"source":"\\<stdlib.h>"},{"pos":[2232,2350],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[2359,2368],"content":"Libraries","linkify":"Libraries","nodes":[{"content":"Libraries","pos":[0,9]}]},{"pos":[2372,2464],"content":"All versions of the <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept>.","source":"All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md)."},{"pos":[2473,2480],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3129,3135],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"pos":[3377,3402],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[3406,3421]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[3422,3469],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[3470,3595],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[3604,3612],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Floating-Point Support<ept id=\"p1\">](../../c-runtime-library/floating-point-support.md)</ept><ph id=\"ph1\"> </ph>","pos":[3616,3692],"source":"[Floating-Point Support](../../c-runtime-library/floating-point-support.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_lrotl, _lrotr<ept id=\"p1\">](../../c-runtime-library/reference/lrotl-lrotr.md)</ept>","pos":[3695,3762],"source":" [_lrotl, _lrotr](../../c-runtime-library/reference/lrotl-lrotr.md)"}],"content":"---\ntitle: \"_rotl, _rotl64, _rotr, _rotr64 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_rotr64\"\n  - \"_rotl\"\n  - \"_rotr\"\n  - \"_rotl64\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-utility-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_rotr64\"\n  - \"rotl64\"\n  - \"_rotl64\"\n  - \"rotr64\"\n  - \"rotr\"\n  - \"_rotr\"\n  - \"_rotl\"\n  - \"rotl\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"rotl64 function\"\n  - \"_rotl function\"\n  - \"rotr function\"\n  - \"rotr64 function\"\n  - \"_rotr function\"\n  - \"rotl function\"\n  - \"_rotl64 function\"\n  - \"rotating bits\"\n  - \"_rotr64 function\"\n  - \"bits, rotating\"\nms.assetid: cfce439b-366f-4584-8ab1-d527b13fcfc6\ncaps.latest.revision: 11\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _rotl, _rotl64, _rotr, _rotr64\nRotates bits to the left (`_rotl`) or right (`_rotr`).  \n  \n## Syntax  \n  \n```  \n  \n      unsigned int _rotl(  \n   unsigned int value,  \n   int shift   \n);  \nunsigned __int64 _rotl64(  \n   unsigned __int64 value,   \n   int shift  \n);  \nunsigned int _rotr(  \n   unsigned int value,  \n   int shift   \n);  \nunsigned __int64 _rotr64(  \n   unsigned __int64 value,  \n   int shift  \n);  \n```  \n  \n#### Parameters  \n *value*  \n Value to be rotated.  \n  \n `shift`  \n Number of bits to shift.  \n  \n## Return Value  \n The rotated value. There is no error return.  \n  \n## Remarks  \n The `_rotl` and `_rotr` functions rotate the unsigned *value* by `shift` bits. `_rotl` rotates the value left. `_rotr` rotates the value right. Both functions wrap bits rotated off one end of *value* to the other end.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|**_rotl, _rotl64**|\\<stdlib.h>|  \n|**_rotr, _rotr64**|\\<stdlib.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Libraries  \n All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md).  \n  \n## Example  \n  \n```  \n// crt_rot.c  \n/* This program shifts values to rotate an integer.  \n */  \n  \n#include <stdlib.h>  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   unsigned val = 0x0fd93;  \n   __int64 val2 = 0x0101010101010101;  \n  \n   printf( \"0x%4.4x rotated left three times is 0x%4.4x\\n\",   \n           val, _rotl( val, 3 ) );  \n   printf( \"0x%4.4x rotated right four times is 0x%4.4x\\n\",   \n           val, _rotr( val, 4 ) );  \n  \n   printf( \"%I64x rotated left three times is %I64x\\n\",  \n           val2, _rotl64( val2, 3 ) );  \n   printf( \"%I64x rotated right four times is %I64x\\n\",   \n           val2, _rotr64( val2, 4 ) );  \n}  \n```  \n  \n## Output  \n  \n```  \n0xfd93 rotated left three times is 0x7ec98  \n0xfd93 rotated right four times is 0x30000fd9  \n101010101010101 rotated left three times is 808080808080808  \n101010101010101 rotated right four times is 1010101010101010  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [_lrotl, _lrotr](../../c-runtime-library/reference/lrotl-lrotr.md)"}