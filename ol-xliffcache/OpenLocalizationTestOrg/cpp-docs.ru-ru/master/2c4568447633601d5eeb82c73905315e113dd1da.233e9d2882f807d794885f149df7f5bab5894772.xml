{"nodes":[{"pos":[12,41],"content":"CPathT Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CPathT Class | Microsoft Docs","pos":[0,29]}]},{"content":"CPathT Class","pos":[686,698]},{"content":"This class represents a path.","pos":[699,728]},{"pos":[736,846],"content":"[!IMPORTANT]\n This class and its members cannot be used in applications that execute in the Windows Runtime.","leadings":["","> "],"nodes":[{"content":"This class and its members cannot be used in applications that execute in the Windows Runtime.","pos":[14,108]}]},{"content":"Syntax","pos":[855,861]},{"content":"Parameters","pos":[929,939]},{"content":"The ATL/MFC string class to use for the path (see <bpt id=\"p1\">[</bpt>CStringT<ept id=\"p1\">](../../atl-mfc-shared/reference/cstringt-class.md)</ept>).","pos":[959,1071],"source":" The ATL/MFC string class to use for the path (see [CStringT](../../atl-mfc-shared/reference/cstringt-class.md))."},{"content":"Members","pos":[1080,1087]},{"content":"Public Typedefs","pos":[1097,1112]},{"content":"Name","pos":[1119,1123]},{"content":"Description","pos":[1124,1135]},{"content":"CPathT::PCXSTR","pos":[1174,1188]},{"content":"A constant string type.","pos":[1207,1230]},{"content":"CPathT::PXSTR","pos":[1236,1249]},{"content":"A string type.","pos":[1267,1281]},{"content":"CPathT::XCHAR","pos":[1287,1300]},{"content":"A character type.","pos":[1318,1335]},{"content":"Public Constructors","pos":[1346,1365]},{"content":"Name","pos":[1372,1376]},{"content":"Description","pos":[1377,1388]},{"content":"CPathT::CPathT","pos":[1427,1441]},{"content":"The constructor for the path.","pos":[1460,1489]},{"content":"Public Methods","pos":[1500,1514]},{"content":"Name","pos":[1521,1525]},{"content":"Description","pos":[1526,1537]},{"content":"CPathT::AddBackslash","pos":[1576,1596]},{"content":"Call this method to add a backslash to the end of a string to create the correct syntax for a path.","pos":[1621,1720]},{"content":"CPathT::AddExtension","pos":[1726,1746]},{"content":"Call this method to add a file extension to a path.","pos":[1771,1822]},{"content":"CPathT::Append","pos":[1828,1842]},{"content":"Call this method to append a string to the current path.","pos":[1861,1917]},{"content":"CPathT::BuildRoot","pos":[1923,1940]},{"content":"Call this method to create a root path from a given drive number.","pos":[1962,2027]},{"content":"CPathT::Canonicalize","pos":[2033,2053]},{"content":"Call this method to convert the path to canonical form.","pos":[2078,2133]},{"content":"CPathT::Combine","pos":[2139,2154]},{"content":"Call this method to concatenate a string representing a directory name and a string representing a file path name into one path.","pos":[2174,2302]},{"content":"CPathT::CommonPrefix","pos":[2308,2328]},{"content":"Call this method to determine whether the specified path shares a common prefix with the current path.","pos":[2353,2455]},{"content":"CPathT::CompactPath","pos":[2461,2480]},{"content":"Call this method to truncate a file path to fit within a given pixel width by replacing path components with ellipses.","pos":[2504,2622]},{"content":"CPathT::CompactPathEx","pos":[2628,2649]},{"content":"Call this method to truncate a file path to fit within a given number of characters by replacing path components with ellipses.","pos":[2675,2802]},{"content":"CPathT::FileExists","pos":[2808,2826]},{"content":"Call this method to check whether the file at this path name exists.","pos":[2849,2917]},{"content":"CPathT::FindExtension","pos":[2923,2944]},{"content":"Call this method to find the position of the file extension within the path.","pos":[2970,3046]},{"content":"CPathT::FindFileName","pos":[3052,3072]},{"content":"Call this method to find the position of the file name within the path.","pos":[3097,3168]},{"content":"CPathT::GetDriveNumber","pos":[3174,3196]},{"content":"Call this method to search the path for a drive letter within the range of 'A' to 'Z' and return the corresponding drive number.","pos":[3223,3351]},{"content":"CPathT::GetExtension","pos":[3357,3377]},{"content":"Call this method to get the file extension from the path.","pos":[3402,3459]},{"content":"CPathT::IsDirectory","pos":[3465,3484]},{"content":"Call this method to check whether the path is a valid directory.","pos":[3508,3572]},{"content":"CPathT::IsFileSpec","pos":[3578,3596]},{"content":"Call this method to search a path for any path-delimiting characters (for example, ':' or '<ph id=\"ph1\">\\\\</ph>' ).","pos":[3619,3716],"source":"Call this method to search a path for any path-delimiting characters (for example, ':' or '\\\\' )."},{"content":"If there are no path-delimiting characters present, the path is considered to be a File Spec path.","pos":[3717,3815]},{"content":"CPathT::IsPrefix","pos":[3821,3837]},{"pos":[3858,3961],"content":"Call this method to determine whether a path contains a valid prefix of the type passed by <ph id=\"ph1\">`pszPrefix`</ph>.","source":"Call this method to determine whether a path contains a valid prefix of the type passed by `pszPrefix`."},{"content":"CPathT::IsRelative","pos":[3967,3985]},{"content":"Call this method to determine if the path is relative.","pos":[4008,4062]},{"content":"CPathT::IsRoot","pos":[4068,4082]},{"content":"Call this method to determine if the path is a directory root.","pos":[4101,4163]},{"content":"CPathT::IsSameRoot","pos":[4169,4187]},{"content":"Call this method to determine whether another path has a common root component with the current path.","pos":[4210,4311]},{"content":"CPathT::IsUNC","pos":[4317,4330]},{"content":"Call this method to determine whether the path is a valid UNC (universal naming convention) path for a server and share.","pos":[4348,4468]},{"content":"CPathT::IsUNCServer","pos":[4474,4493]},{"content":"Call this method to determine whether the path is a valid UNC (universal naming convention) path for a server only.","pos":[4517,4632]},{"content":"CPathT::IsUNCServerShare","pos":[4638,4662]},{"pos":[4691,4817],"content":"Call this method to determine whether the path is a valid UNC (universal naming convention) share path, <ph id=\"ph1\">\\\\\\ </ph><bpt id=\"p1\">*</bpt>server<ept id=\"p1\">*</ept><ph id=\"ph2\">\\ </ph><bpt id=\"p2\">*</bpt>share<ept id=\"p2\">*</ept>.","source":"Call this method to determine whether the path is a valid UNC (universal naming convention) share path, \\\\\\ *server*\\ *share*."},{"content":"CPathT::MakePretty","pos":[4823,4841]},{"content":"Call this method to convert a path to all lowercase characters to give the path a consistent appearance.","pos":[4864,4968]},{"content":"CPathT::MatchSpec","pos":[4974,4991]},{"content":"Call this method to search the path for a string containing a wildcard match type.","pos":[5013,5095]},{"content":"CPathT::QuoteSpaces","pos":[5101,5120]},{"content":"Call this method to enclose the path in quotation marks if it contains any spaces.","pos":[5144,5226]},{"content":"CPathT::RelativePathTo","pos":[5232,5254]},{"content":"Call this method to create a relative path from one file or folder to another.","pos":[5281,5359]},{"content":"CPathT::RemoveArgs","pos":[5365,5383]},{"content":"Call this method to remove any command-line arguments from the path.","pos":[5406,5474]},{"content":"CPathT::RemoveBackslash","pos":[5480,5503]},{"content":"Call this method to remove the trailing backslash from the path.","pos":[5531,5595]},{"content":"CPathT::RemoveBlanks","pos":[5601,5621]},{"content":"Call this method to remove all leading and trailing spaces from the path.","pos":[5646,5719]},{"content":"CPathT::RemoveExtension","pos":[5725,5748]},{"content":"Call this method to remove the file extension from the path, if there is one.","pos":[5776,5853]},{"content":"CPathT::RemoveFileSpec","pos":[5859,5881]},{"content":"Call this method to remove the trailing file name and backslash from the path, if it has them.","pos":[5908,6002]},{"content":"CPathT::RenameExtension","pos":[6008,6031]},{"content":"Call this method to replace the file name extension in the path with a new extension.","pos":[6059,6144]},{"content":"If the file name does not contain an extension, the extension will be attached to the end of the string.","pos":[6145,6249]},{"content":"CPathT::SkipRoot","pos":[6255,6271]},{"content":"Call this method to parse a path, ignoring the drive letter or UNC server/share path parts.","pos":[6292,6383]},{"content":"CPathT::StripPath","pos":[6389,6406]},{"content":"Call this method to remove the path portion of a fully qualified path and file name.","pos":[6428,6512]},{"content":"CPathT::StripToRoot","pos":[6518,6537]},{"content":"Call this method to remove all parts of the path except for the root information.","pos":[6561,6642]},{"content":"CPathT::UnquoteSpaces","pos":[6648,6669]},{"content":"Call this method to remove quotation marks from the beginning and end of a path.","pos":[6695,6775]},{"content":"Public Operators","pos":[6786,6802]},{"content":"Name","pos":[6809,6813]},{"content":"Description","pos":[6814,6825]},{"content":"CPathT::operator const StringType &amp;","pos":[6864,6899],"source":"CPathT::operator const StringType &"},{"content":"This operator allows the object to be treated like a string.","pos":[6941,7001]},{"content":"CPathT::operator CPathT::PCXSTR","pos":[7007,7038]},{"content":"This operator allows the object to be treated like a string.","pos":[7074,7134]},{"content":"CPathT::operator StringType &amp;","pos":[7140,7169],"source":"CPathT::operator StringType &"},{"content":"This operator allows the object to be treated like a string.","pos":[7201,7261]},{"content":"CPathT::operator +=","pos":[7267,7286]},{"content":"This operator appends a string to the path.","pos":[7314,7357]},{"content":"Public Data Members","pos":[7368,7387]},{"content":"Name","pos":[7394,7398]},{"content":"Description","pos":[7399,7410]},{"content":"CPathT::m_strPath","pos":[7449,7466]},{"content":"The path.","pos":[7488,7497]},{"content":"Remarks","pos":[7507,7514]},{"pos":[7525,7600],"content":", <ph id=\"ph1\">`CPathA`</ph>, and <ph id=\"ph2\">`CPathW`</ph> are instantiations of <ph id=\"ph3\">`CPathT`</ph> defined as follows:","source":", `CPathA`, and `CPathW` are instantiations of `CPathT` defined as follows:"},{"content":"Requirements","pos":[7736,7748]},{"pos":[7752,7773],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlpath.h","source":"**Header:** atlpath.h"},{"pos":[7820,7840],"content":"CPathT::AddBackslash"},{"content":"Call this method to add a backslash to the end of a string to create the correct syntax for a path.","pos":[7844,7943]},{"content":"If the path already has a trailing backslash, no backslash will be added.","pos":[7944,8017]},{"content":"Remarks","pos":[8061,8068]},{"pos":[8072,8177],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathAddBackSlash<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773561)</ept>.","source":"For more information, see [PathAddBackSlash](http://msdn.microsoft.com/library/windows/desktop/bb773561)."},{"pos":[8224,8244],"content":"CPathT::AddExtension"},{"content":"Call this method to add a file extension to a path.","pos":[8248,8299]},{"content":"Parameters","pos":[8365,8375]},{"content":"The file extension to add.","pos":[8397,8423]},{"content":"Return Value","pos":[8433,8445]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[8449,8491]},{"content":"Remarks","pos":[8501,8508]},{"pos":[8512,8617],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathAddExtension<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773563)</ept>.","source":"For more information, see [PathAddExtension](http://msdn.microsoft.com/library/windows/desktop/bb773563)."},{"pos":[8658,8672],"content":"CPathT::Append"},{"content":"Call this method to append a string to the current path.","pos":[8676,8732]},{"content":"Parameters","pos":[8787,8797]},{"content":"The string to append.","pos":[8814,8835]},{"content":"Return Value","pos":[8845,8857]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[8861,8903]},{"content":"Remarks","pos":[8913,8920]},{"pos":[8924,9023],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathAppend<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773565)</ept>.","source":"For more information, see [PathAppend](http://msdn.microsoft.com/library/windows/desktop/bb773565)."},{"pos":[9067,9084],"content":"CPathT::BuildRoot"},{"content":"Call this method to create a root path from a given drive number.","pos":[9088,9153]},{"content":"Parameters","pos":[9207,9217]},{"content":"iDrive","pos":[9222,9228]},{"content":"The drive number (0 is A:, 1 is B:, and so on).","pos":[9233,9280]},{"content":"Remarks","pos":[9290,9297]},{"pos":[9301,9403],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathBuildRoot<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773567)</ept>.","source":"For more information, see [PathBuildRoot](http://msdn.microsoft.com/library/windows/desktop/bb773567)."},{"pos":[9450,9470],"content":"CPathT::Canonicalize"},{"content":"Call this method to convert the path to canonical form.","pos":[9474,9529]},{"content":"Remarks","pos":[9573,9580]},{"pos":[9584,9689],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathCanonicalize<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773569)</ept>.","source":"For more information, see [PathCanonicalize](http://msdn.microsoft.com/library/windows/desktop/bb773569)."},{"pos":[9731,9746],"content":"CPathT::Combine"},{"content":"Call this method to concatenate a string representing a directory name and a string representing a file path name into one path.","pos":[9750,9878]},{"content":"Parameters","pos":[9954,9964]},{"content":"The directory path.","pos":[9980,9999]},{"content":"pszFile","pos":[10007,10014]},{"content":"The file path.","pos":[10019,10033]},{"content":"Remarks","pos":[10043,10050]},{"pos":[10054,10154],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathCombine<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773571)</ept>.","source":"For more information, see [PathCombine](http://msdn.microsoft.com/library/windows/desktop/bb773571)."},{"pos":[10201,10221],"content":"CPathT::CommonPrefix"},{"content":"Call this method to determine whether the specified path shares a common prefix with the current path.","pos":[10225,10327]},{"content":"Parameters","pos":[10403,10413]},{"content":"The path to compare to the current one.","pos":[10431,10470]},{"content":"Return Value","pos":[10480,10492]},{"content":"Returns the common prefix.","pos":[10496,10522]},{"content":"Remarks","pos":[10532,10539]},{"content":"A prefix is one of these types: \"C:<ph id=\"ph1\">\\\\\\\\</ph>\", \".\", \"..\", \"..<ph id=\"ph2\">\\\\\\\\</ph>\".","pos":[10543,10605],"source":"A prefix is one of these types: \"C:\\\\\\\\\", \".\", \"..\", \"..\\\\\\\\\"."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>PathCommonPrefix<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773574)</ept>.","pos":[10606,10711],"source":" For more information, see [PathCommonPrefix](http://msdn.microsoft.com/library/windows/desktop/bb773574)."},{"pos":[10757,10776],"content":"CPathT::CompactPath"},{"content":"Call this method to truncate a file path to fit within a given pixel width by replacing path components with ellipses.","pos":[10780,10898]},{"content":"Parameters","pos":[10969,10979]},{"content":"The device context used for font metrics.","pos":[10992,11033]},{"content":"The width, in pixels, that the string will be forced to fit in.","pos":[11052,11115]},{"content":"Return Value","pos":[11125,11137]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[11141,11183]},{"content":"Remarks","pos":[11193,11200]},{"pos":[11204,11308],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathCompactPath<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773575)</ept>.","source":"For more information, see [PathCompactPath](http://msdn.microsoft.com/library/windows/desktop/bb773575)."},{"pos":[11356,11377],"content":"CPathT::CompactPathEx"},{"content":"Call this method to truncate a file path to fit within a given number of characters by replacing path components with ellipses.","pos":[11381,11508]},{"content":"Parameters","pos":[11592,11602]},{"content":"The maximum number of characters to be contained in the new string, including the terminating NULL character.","pos":[11621,11730]},{"content":"Reserved.","pos":[11750,11759]},{"content":"Return Value","pos":[11769,11781]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[11785,11827]},{"content":"Remarks","pos":[11837,11844]},{"pos":[11848,11954],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathCompactPathEx<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773578)</ept>.","source":"For more information, see [PathCompactPathEx](http://msdn.microsoft.com/library/windows/desktop/bb773578)."},{"pos":[11995,12009],"content":"CPathT::CPathT"},{"content":"The constructor.","pos":[12013,12029]},{"content":"Parameters","pos":[12139,12149]},{"content":"pszPath","pos":[12154,12161]},{"content":"The pointer to a path string.","pos":[12166,12195]},{"content":"path","pos":[12203,12207]},{"content":"The path string.","pos":[12212,12228]},{"pos":[12273,12291],"content":"CPathT::FileExists"},{"content":"Call this method to check whether the file at this path name exists.","pos":[12295,12363]},{"content":"Return Value","pos":[12411,12423]},{"content":"Returns TRUE if the file exists, FALSE otherwise.","pos":[12427,12476]},{"content":"Remarks","pos":[12486,12493]},{"pos":[12497,12600],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathFileExists<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773584)</ept>.","source":"For more information, see [PathFileExists](http://msdn.microsoft.com/library/windows/desktop/bb773584)."},{"pos":[12648,12669],"content":"CPathT::FindExtension"},{"content":"Call this method to find the position of the file extension within the path.","pos":[12673,12749]},{"content":"Return Value","pos":[12799,12811]},{"content":"Returns the position of the \".\" preceding the extension.","pos":[12815,12871]},{"content":"If no extension is found, returns –1.","pos":[12872,12909]},{"content":"Remarks","pos":[12919,12926]},{"pos":[12930,13036],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathFindExtension<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773587)</ept>.","source":"For more information, see [PathFindExtension](http://msdn.microsoft.com/library/windows/desktop/bb773587)."},{"pos":[13083,13103],"content":"CPathT::FindFileName"},{"content":"Call this method to find the position of the file name within the path.","pos":[13107,13178]},{"content":"Return Value","pos":[13227,13239]},{"content":"Returns the position of the file name.","pos":[13243,13281]},{"content":"If no file name is found, returns –1.","pos":[13282,13319]},{"content":"Remarks","pos":[13329,13336]},{"pos":[13340,13445],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathFindFileName<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773589)</ept>.","source":"For more information, see [PathFindFileName](http://msdn.microsoft.com/library/windows/desktop/bb773589)."},{"pos":[13494,13516],"content":"CPathT::GetDriveNumber"},{"content":"Call this method to search the path for a drive letter within the range of 'A' to 'Z' and return the corresponding drive number.","pos":[13520,13648]},{"content":"Return Value","pos":[13699,13711]},{"content":"Returns the drive number as an integer from 0 through 25 (corresponding to 'A' through 'Z') if the path has a drive letter, or -1 otherwise.","pos":[13715,13855]},{"content":"Remarks","pos":[13865,13872]},{"pos":[13876,13983],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathGetDriveNumber<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773612)</ept>.","source":"For more information, see [PathGetDriveNumber](http://msdn.microsoft.com/library/windows/desktop/bb773612)."},{"pos":[14030,14050],"content":"CPathT::GetExtension"},{"content":"Call this method to get the file extension from the path.","pos":[14054,14111]},{"content":"Return Value","pos":[14167,14179]},{"content":"Returns the file extension.","pos":[14183,14210]},{"pos":[14256,14275],"content":"CPathT::IsDirectory"},{"content":"Call this method to check whether the path is a valid directory.","pos":[14279,14343]},{"content":"Return Value","pos":[14392,14404]},{"pos":[14408,14484],"content":"Returns a non-zero value (16) if the path is a directory, <ph id=\"ph1\">`FALSE`</ph> otherwise.","source":"Returns a non-zero value (16) if the path is a directory, `FALSE` otherwise."},{"content":"Remarks","pos":[14494,14501]},{"pos":[14505,14609],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathIsDirectory<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773621)</ept>.","source":"For more information, see [PathIsDirectory](http://msdn.microsoft.com/library/windows/desktop/bb773621)."},{"pos":[14654,14672],"content":"CPathT::IsFileSpec"},{"content":"Call this method to search a path for any path-delimiting characters (for example, ':' or '<ph id=\"ph1\">\\\\</ph>' ).","pos":[14676,14773],"source":"Call this method to search a path for any path-delimiting characters (for example, ':' or '\\\\' )."},{"content":"If there are no path-delimiting characters present, the path is considered to be a File Spec path.","pos":[14774,14872]},{"content":"Return Value","pos":[14920,14932]},{"content":"Returns TRUE if there are no path-delimiting characters within the path, or FALSE if there are path-delimiting characters.","pos":[14936,15058]},{"content":"Remarks","pos":[15068,15075]},{"pos":[15079,15182],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathIsFileSpec<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773627)</ept>.","source":"For more information, see [PathIsFileSpec](http://msdn.microsoft.com/library/windows/desktop/bb773627)."},{"pos":[15225,15241],"content":"CPathT::IsPrefix"},{"pos":[15245,15348],"content":"Call this method to determine whether a path contains a valid prefix of the type passed by <ph id=\"ph1\">`pszPrefix`</ph>.","source":"Call this method to determine whether a path contains a valid prefix of the type passed by `pszPrefix`."},{"content":"Parameters","pos":[15413,15423]},{"content":"The prefix for which to search.","pos":[15442,15473]},{"content":"A prefix is one of these types: \"C:<ph id=\"ph1\">\\\\\\\\</ph>\", \".\", \"..\", \"..<ph id=\"ph2\">\\\\\\\\</ph>\".","pos":[15474,15536],"source":" A prefix is one of these types: \"C:\\\\\\\\\", \".\", \"..\", \"..\\\\\\\\\"."},{"content":"Return Value","pos":[15546,15558]},{"content":"Returns TRUE if the path contains the prefix, or FALSE otherwise.","pos":[15562,15627]},{"content":"Remarks","pos":[15637,15644]},{"pos":[15648,15749],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathIsPrefix<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773650)</ept>.","source":"For more information, see [PathIsPrefix](http://msdn.microsoft.com/library/windows/desktop/bb773650)."},{"pos":[15794,15812],"content":"CPathT::IsRelative"},{"content":"Call this method to determine if the path is relative.","pos":[15816,15870]},{"content":"Return Value","pos":[15918,15930]},{"content":"Returns TRUE if the path is relative, or FALSE if it is absolute.","pos":[15934,15999]},{"content":"Remarks","pos":[16009,16016]},{"pos":[16020,16123],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathIsRelative<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773660)</ept>.","source":"For more information, see [PathIsRelative](http://msdn.microsoft.com/library/windows/desktop/bb773660)."},{"pos":[16164,16178],"content":"CPathT::IsRoot"},{"content":"Call this method to determine if the path is a directory root.","pos":[16182,16244]},{"content":"Return Value","pos":[16288,16300]},{"content":"Returns TRUE if the path is a root, or FALSE otherwise.","pos":[16304,16359]},{"content":"Remarks","pos":[16369,16376]},{"pos":[16380,16479],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathIsRoot<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773674)</ept>.","source":"For more information, see [PathIsRoot](http://msdn.microsoft.com/library/windows/desktop/bb773674)."},{"pos":[16524,16542],"content":"CPathT::IsSameRoot"},{"content":"Call this method to determine whether another path has a common root component with the current path.","pos":[16546,16647]},{"content":"Parameters","pos":[16713,16723]},{"content":"The other path.","pos":[16741,16756]},{"content":"Return Value","pos":[16766,16778]},{"content":"Returns TRUE if both strings have the same root component, or FALSE otherwise.","pos":[16782,16860]},{"content":"Remarks","pos":[16870,16877]},{"pos":[16881,16984],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathIsSameRoot<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773687)</ept>.","source":"For more information, see [PathIsSameRoot](http://msdn.microsoft.com/library/windows/desktop/bb773687)."},{"pos":[17024,17037],"content":"CPathT::IsUNC"},{"content":"Call this method to determine whether the path is a valid UNC (universal naming convention) path for a server and share.","pos":[17041,17161]},{"content":"Return Value","pos":[17204,17216]},{"content":"Returns TRUE if the path is a valid UNC path, or FALSE otherwise.","pos":[17220,17285]},{"content":"Remarks","pos":[17295,17302]},{"pos":[17306,17404],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathIsUNC<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773712)</ept>.","source":"For more information, see [PathIsUNC](http://msdn.microsoft.com/library/windows/desktop/bb773712)."},{"pos":[17450,17469],"content":"CPathT::IsUNCServer"},{"content":"Call this method to determine whether the path is a valid UNC (universal naming convention) path for a server only.","pos":[17473,17588]},{"content":"Return Value","pos":[17637,17649]},{"content":"Returns TRUE if the string is a valid UNC path for a server only (no share name), or FALSE otherwise.","pos":[17653,17754]},{"content":"Remarks","pos":[17764,17771]},{"pos":[17775,17879],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathIsUNCServer<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773722)</ept>.","source":"For more information, see [PathIsUNCServer](http://msdn.microsoft.com/library/windows/desktop/bb773722)."},{"pos":[17930,17954],"content":"CPathT::IsUNCServerShare"},{"pos":[17958,18084],"content":"Call this method to determine whether the path is a valid UNC (universal naming convention) share path, <ph id=\"ph1\">\\\\\\ </ph><bpt id=\"p1\">*</bpt>server<ept id=\"p1\">*</ept><ph id=\"ph2\">\\ </ph><bpt id=\"p2\">*</bpt>share<ept id=\"p2\">*</ept>.","source":"Call this method to determine whether the path is a valid UNC (universal naming convention) share path, \\\\\\ *server*\\ *share*."},{"content":"Return Value","pos":[18138,18150]},{"pos":[18154,18236],"content":"Returns TRUE if the path is in the form <ph id=\"ph1\">\\\\\\ </ph><bpt id=\"p1\">*</bpt>server<ept id=\"p1\">*</ept><ph id=\"ph2\">\\ </ph><bpt id=\"p2\">*</bpt>share<ept id=\"p2\">*</ept>, or FALSE otherwise.","source":"Returns TRUE if the path is in the form \\\\\\ *server*\\ *share*, or FALSE otherwise."},{"content":"Remarks","pos":[18246,18253]},{"pos":[18257,18366],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathIsUNCServerShare<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773723)</ept>.","source":"For more information, see [PathIsUNCServerShare](http://msdn.microsoft.com/library/windows/desktop/bb773723)."},{"pos":[18410,18427],"content":"CPathT::m_strPath"},{"content":"The path.","pos":[18431,18440]},{"content":"Remarks","pos":[18485,18492]},{"pos":[18509,18547],"content":"is the template parameter to <ph id=\"ph1\">`CPathT`</ph>.","source":" is the template parameter to `CPathT`."},{"pos":[18592,18610],"content":"CPathT::MakePretty"},{"content":"Call this method to convert a path to all lowercase characters to give the path a consistent appearance.","pos":[18614,18718]},{"content":"Return Value","pos":[18760,18772]},{"content":"Returns TRUE if the path has been converted, or FALSE otherwise.","pos":[18776,18840]},{"content":"Remarks","pos":[18850,18857]},{"pos":[18861,18964],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathMakePretty<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773725)</ept>.","source":"For more information, see [PathMakePretty](http://msdn.microsoft.com/library/windows/desktop/bb773725)."},{"pos":[19008,19025],"content":"CPathT::MatchSpec"},{"content":"Call this method to search the path for a string containing a wildcard match type.","pos":[19029,19111]},{"content":"Parameters","pos":[19175,19185]},{"content":"Pointer to a null-terminated string with the file type for which to search.","pos":[19202,19277]},{"content":"For example, to test whether the file at the current path is a DOC file, <ph id=\"ph1\">`pszSpec`</ph> should be set to \"*.doc\".","pos":[19278,19386],"source":" For example, to test whether the file at the current path is a DOC file, `pszSpec` should be set to \"*.doc\"."},{"content":"Return Value","pos":[19396,19408]},{"content":"Returns TRUE if the string matches, or FALSE otherwise.","pos":[19412,19467]},{"content":"Remarks","pos":[19477,19484]},{"pos":[19488,19590],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathMatchSpec<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773727)</ept>.","source":"For more information, see [PathMatchSpec](http://msdn.microsoft.com/library/windows/desktop/bb773727)."},{"pos":[19640,19659],"content":"CPathT::operator +="},{"content":"This operator appends a string to the path.","pos":[19663,19706]},{"content":"Parameters","pos":[19780,19790]},{"content":"The string to append.","pos":[19807,19828]},{"content":"Return Value","pos":[19838,19850]},{"content":"Returns the updated path.","pos":[19854,19879]},{"pos":[19943,19976],"content":"CPathT::operator const StringType"},{"content":"This operator allows the object to be treated like a string.","pos":[19986,20046]},{"content":"Return Value","pos":[20116,20128]},{"content":"Returns a string representing the current path managed by this object.","pos":[20132,20202]},{"pos":[20260,20291],"content":"CPathT::operator CPathT::PCXSTR"},{"content":"This operator allows the object to be treated like a string.","pos":[20295,20355]},{"content":"Return Value","pos":[20414,20426]},{"content":"Returns a string representing the current path managed by this object.","pos":[20430,20500]},{"pos":[20559,20586],"content":"CPathT::operator StringType"},{"content":"This operator allows the object to be treated like a string.","pos":[20596,20656]},{"content":"Return Value","pos":[20714,20726]},{"content":"Returns a string representing the current path managed by this object.","pos":[20730,20800]},{"pos":[20841,20855],"content":"CPathT::PCXSTR"},{"content":"A constant string type.","pos":[20859,20882]},{"content":"Remarks","pos":[20940,20947]},{"pos":[20964,21002],"content":"is the template parameter to <ph id=\"ph1\">`CPathT`</ph>.","source":" is the template parameter to `CPathT`."},{"pos":[21042,21055],"content":"CPathT::PXSTR"},{"content":"A string type.","pos":[21059,21073]},{"content":"Remarks","pos":[21129,21136]},{"pos":[21153,21191],"content":"is the template parameter to <ph id=\"ph1\">`CPathT`</ph>.","source":" is the template parameter to `CPathT`."},{"pos":[21237,21256],"content":"CPathT::QuoteSpaces"},{"content":"Call this method to enclose the path in quotation marks if it contains any spaces.","pos":[21260,21342]},{"content":"Remarks","pos":[21385,21392]},{"pos":[21396,21500],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathQuoteSpaces<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773739)</ept>.","source":"For more information, see [PathQuoteSpaces](http://msdn.microsoft.com/library/windows/desktop/bb773739)."},{"pos":[21549,21571],"content":"CPathT::RelativePathTo"},{"content":"Call this method to create a relative path from one file or folder to another.","pos":[21575,21653]},{"content":"Parameters","pos":[21774,21784]},{"content":"The start of the relative path.","pos":[21801,21832]},{"content":"dwAttrFrom","pos":[21840,21850]},{"content":"The File attributes of <ph id=\"ph1\">`pszFrom`</ph>.","pos":[21855,21888],"source":" The File attributes of `pszFrom`."},{"content":"If this value contains FILE_ATTRIBUTE_DIRECTORY, <ph id=\"ph1\">`pszFrom`</ph> is assumed to be a directory; otherwise, <ph id=\"ph2\">`pszFrom`</ph> is assumed to be a file.","pos":[21889,22023],"source":" If this value contains FILE_ATTRIBUTE_DIRECTORY, `pszFrom` is assumed to be a directory; otherwise, `pszFrom` is assumed to be a file."},{"content":"The end point of the relative path.","pos":[22041,22076]},{"content":"dwAttrTo","pos":[22084,22092]},{"content":"The File attributes of <ph id=\"ph1\">`pszTo`</ph>.","pos":[22097,22128],"source":" The File attributes of `pszTo`."},{"content":"If this value contains FILE_ATTRIBUTE_DIRECTORY, <ph id=\"ph1\">`pszTo`</ph> is assumed to be a directory; otherwise, <ph id=\"ph2\">`pszTo`</ph> is assumed to be a file.","pos":[22129,22259],"source":" If this value contains FILE_ATTRIBUTE_DIRECTORY, `pszTo` is assumed to be a directory; otherwise, `pszTo` is assumed to be a file."},{"content":"Return Value","pos":[22269,22281]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[22285,22327]},{"content":"Remarks","pos":[22337,22344]},{"pos":[22348,22455],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathRelativePathTo<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773740)</ept>.","source":"For more information, see [PathRelativePathTo](http://msdn.microsoft.com/library/windows/desktop/bb773740)."},{"pos":[22500,22518],"content":"CPathT::RemoveArgs"},{"content":"Call this method to remove any command-line arguments from the path.","pos":[22522,22590]},{"content":"Remarks","pos":[22632,22639]},{"pos":[22643,22746],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathRemoveArgs<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773742)</ept>.","source":"For more information, see [PathRemoveArgs](http://msdn.microsoft.com/library/windows/desktop/bb773742)."},{"pos":[22796,22819],"content":"CPathT::RemoveBackslash"},{"content":"Call this method to remove the trailing backslash from the path.","pos":[22823,22887]},{"content":"Remarks","pos":[22934,22941]},{"pos":[22945,23053],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathRemoveBackslash<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773743)</ept>.","source":"For more information, see [PathRemoveBackslash](http://msdn.microsoft.com/library/windows/desktop/bb773743)."},{"pos":[23100,23120],"content":"CPathT::RemoveBlanks"},{"content":"Call this method to remove all leading and trailing spaces from the path.","pos":[23124,23197]},{"content":"Remarks","pos":[23241,23248]},{"pos":[23252,23357],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathRemoveBlanks<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773745)</ept>.","source":"For more information, see [PathRemoveBlanks](http://msdn.microsoft.com/library/windows/desktop/bb773745)."},{"pos":[23407,23430],"content":"CPathT::RemoveExtension"},{"content":"Call this method to remove the file extension from the path, if there is one.","pos":[23434,23511]},{"content":"Remarks","pos":[23558,23565]},{"pos":[23569,23677],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathRemoveExtension<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773746)</ept>.","source":"For more information, see [PathRemoveExtension](http://msdn.microsoft.com/library/windows/desktop/bb773746)."},{"pos":[23726,23748],"content":"CPathT::RemoveFileSpec"},{"content":"Call this method to remove the trailing file name and backslash from the path, if it has them.","pos":[23752,23846]},{"content":"Return Value","pos":[23892,23904]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[23908,23950]},{"content":"Remarks","pos":[23960,23967]},{"pos":[23971,24078],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathRemoveFileSpec<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773748)</ept>.","source":"For more information, see [PathRemoveFileSpec](http://msdn.microsoft.com/library/windows/desktop/bb773748)."},{"pos":[24128,24151],"content":"CPathT::RenameExtension"},{"content":"Call this method to replace the file name extension in the path with a new extension.","pos":[24155,24240]},{"content":"If the file name does not contain an extension, the extension will be attached to the end of the path.","pos":[24241,24343]},{"content":"Parameters","pos":[24412,24422]},{"content":"The new file name extension, preceded by a \".\" character.","pos":[24444,24501]},{"content":"Return Value","pos":[24511,24523]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[24527,24569]},{"content":"Remarks","pos":[24579,24586]},{"pos":[24590,24698],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathRenameExtension<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773749)</ept>.","source":"For more information, see [PathRenameExtension](http://msdn.microsoft.com/library/windows/desktop/bb773749)."},{"pos":[24741,24757],"content":"CPathT::SkipRoot"},{"content":"Call this method to parse a path, ignoring the drive letter or UNC (universal naming convention) server/share path parts.","pos":[24761,24882]},{"content":"Return Value","pos":[24927,24939]},{"content":"Returns the position of the beginning of the subpath that follows the root (drive letter or UNC server/share).","pos":[24943,25053]},{"content":"Remarks","pos":[25063,25070]},{"pos":[25074,25175],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathSkipRoot<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773754)</ept>.","source":"For more information, see [PathSkipRoot](http://msdn.microsoft.com/library/windows/desktop/bb773754)."},{"pos":[25219,25236],"content":"CPathT::StripPath"},{"content":"Call this method to remove the path portion of a fully qualified path and file name.","pos":[25240,25324]},{"content":"Remarks","pos":[25365,25372]},{"pos":[25376,25478],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathStripPath<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773756)</ept>.","source":"For more information, see [PathStripPath](http://msdn.microsoft.com/library/windows/desktop/bb773756)."},{"pos":[25524,25543],"content":"CPathT::StripToRoot"},{"content":"Call this method to remove all parts of the path except for the root information.","pos":[25547,25628]},{"content":"Return Value","pos":[25671,25683]},{"content":"Returns TRUE if a valid drive letter was found in the path, or FALSE otherwise.","pos":[25687,25766]},{"content":"Remarks","pos":[25776,25783]},{"pos":[25787,25891],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathStripToRoot<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773757)</ept>.","source":"For more information, see [PathStripToRoot](http://msdn.microsoft.com/library/windows/desktop/bb773757)."},{"pos":[25939,25960],"content":"CPathT::UnquoteSpaces"},{"content":"Call this method to remove quotation marks from the beginning and end of a path.","pos":[25964,26044]},{"content":"Remarks","pos":[26089,26096]},{"pos":[26100,26206],"content":"For more information, see <bpt id=\"p1\">[</bpt>PathUnquoteSpaces<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773763)</ept>.","source":"For more information, see [PathUnquoteSpaces](http://msdn.microsoft.com/library/windows/desktop/bb773763)."},{"pos":[26246,26259],"content":"CPathT::XCHAR"},{"content":"A character type.","pos":[26263,26280]},{"content":"Remarks","pos":[26336,26343]},{"pos":[26360,26398],"content":"is the template parameter to <ph id=\"ph1\">`CPathT`</ph>.","source":" is the template parameter to `CPathT`."},{"content":"See Also","pos":[26407,26415]},{"content":"Classes","pos":[26420,26427]},{"content":"CStringT Class","pos":[26470,26484]}],"content":"---\ntitle: \"CPathT Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL.CPathT\"\n  - \"CPathT\"\n  - \"ATL::CPathT<StringType>\"\n  - \"ATL::CPathT\"\n  - \"ATL.CPathT<StringType>\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CPathT class\"\nms.assetid: eba4137d-1fd2-4b44-a2e1-0944db64df3c\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CPathT Class\nThis class represents a path.  \n  \n> [!IMPORTANT]\n>  This class and its members cannot be used in applications that execute in the Windows Runtime.  \n  \n## Syntax  \n  \n```\ntemplate <typename StringType>\nclass CPathT\n```  \n  \n#### Parameters  \n `StringType`  \n The ATL/MFC string class to use for the path (see [CStringT](../../atl-mfc-shared/reference/cstringt-class.md)).  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPathT::PCXSTR](#cpatht__pcxstr)|A constant string type.|  \n|[CPathT::PXSTR](#cpatht__pxstr)|A string type.|  \n|[CPathT::XCHAR](#cpatht__xchar)|A character type.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPathT::CPathT](#cpatht__cpatht)|The constructor for the path.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPathT::AddBackslash](#cpatht__addbackslash)|Call this method to add a backslash to the end of a string to create the correct syntax for a path.|  \n|[CPathT::AddExtension](#cpatht__addextension)|Call this method to add a file extension to a path.|  \n|[CPathT::Append](#cpatht__append)|Call this method to append a string to the current path.|  \n|[CPathT::BuildRoot](#cpatht__buildroot)|Call this method to create a root path from a given drive number.|  \n|[CPathT::Canonicalize](#cpatht__canonicalize)|Call this method to convert the path to canonical form.|  \n|[CPathT::Combine](#cpatht__combine)|Call this method to concatenate a string representing a directory name and a string representing a file path name into one path.|  \n|[CPathT::CommonPrefix](#cpatht__commonprefix)|Call this method to determine whether the specified path shares a common prefix with the current path.|  \n|[CPathT::CompactPath](#cpatht__compactpath)|Call this method to truncate a file path to fit within a given pixel width by replacing path components with ellipses.|  \n|[CPathT::CompactPathEx](#cpatht__compactpathex)|Call this method to truncate a file path to fit within a given number of characters by replacing path components with ellipses.|  \n|[CPathT::FileExists](#cpatht__fileexists)|Call this method to check whether the file at this path name exists.|  \n|[CPathT::FindExtension](#cpatht__findextension)|Call this method to find the position of the file extension within the path.|  \n|[CPathT::FindFileName](#cpatht__findfilename)|Call this method to find the position of the file name within the path.|  \n|[CPathT::GetDriveNumber](#cpatht__getdrivenumber)|Call this method to search the path for a drive letter within the range of 'A' to 'Z' and return the corresponding drive number.|  \n|[CPathT::GetExtension](#cpatht__getextension)|Call this method to get the file extension from the path.|  \n|[CPathT::IsDirectory](#cpatht__isdirectory)|Call this method to check whether the path is a valid directory.|  \n|[CPathT::IsFileSpec](#cpatht__isfilespec)|Call this method to search a path for any path-delimiting characters (for example, ':' or '\\\\' ). If there are no path-delimiting characters present, the path is considered to be a File Spec path.|  \n|[CPathT::IsPrefix](#cpatht__isprefix)|Call this method to determine whether a path contains a valid prefix of the type passed by `pszPrefix`.|  \n|[CPathT::IsRelative](#cpatht__isrelative)|Call this method to determine if the path is relative.|  \n|[CPathT::IsRoot](#cpatht__isroot)|Call this method to determine if the path is a directory root.|  \n|[CPathT::IsSameRoot](#cpatht__issameroot)|Call this method to determine whether another path has a common root component with the current path.|  \n|[CPathT::IsUNC](#cpatht__isunc)|Call this method to determine whether the path is a valid UNC (universal naming convention) path for a server and share.|  \n|[CPathT::IsUNCServer](#cpatht__isuncserver)|Call this method to determine whether the path is a valid UNC (universal naming convention) path for a server only.|  \n|[CPathT::IsUNCServerShare](#cpatht__isuncservershare)|Call this method to determine whether the path is a valid UNC (universal naming convention) share path, \\\\\\ *server*\\ *share*.|  \n|[CPathT::MakePretty](#cpatht__makepretty)|Call this method to convert a path to all lowercase characters to give the path a consistent appearance.|  \n|[CPathT::MatchSpec](#cpatht__matchspec)|Call this method to search the path for a string containing a wildcard match type.|  \n|[CPathT::QuoteSpaces](#cpatht__quotespaces)|Call this method to enclose the path in quotation marks if it contains any spaces.|  \n|[CPathT::RelativePathTo](#cpatht__relativepathto)|Call this method to create a relative path from one file or folder to another.|  \n|[CPathT::RemoveArgs](#cpatht__removeargs)|Call this method to remove any command-line arguments from the path.|  \n|[CPathT::RemoveBackslash](#cpatht__removebackslash)|Call this method to remove the trailing backslash from the path.|  \n|[CPathT::RemoveBlanks](#cpatht__removeblanks)|Call this method to remove all leading and trailing spaces from the path.|  \n|[CPathT::RemoveExtension](#cpatht__removeextension)|Call this method to remove the file extension from the path, if there is one.|  \n|[CPathT::RemoveFileSpec](#cpatht__removefilespec)|Call this method to remove the trailing file name and backslash from the path, if it has them.|  \n|[CPathT::RenameExtension](#cpatht__renameextension)|Call this method to replace the file name extension in the path with a new extension. If the file name does not contain an extension, the extension will be attached to the end of the string.|  \n|[CPathT::SkipRoot](#cpatht__skiproot)|Call this method to parse a path, ignoring the drive letter or UNC server/share path parts.|  \n|[CPathT::StripPath](#cpatht__strippath)|Call this method to remove the path portion of a fully qualified path and file name.|  \n|[CPathT::StripToRoot](#cpatht__striptoroot)|Call this method to remove all parts of the path except for the root information.|  \n|[CPathT::UnquoteSpaces](#cpatht__unquotespaces)|Call this method to remove quotation marks from the beginning and end of a path.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPathT::operator const StringType &](#cpatht__operator_const_stringtype_amp)|This operator allows the object to be treated like a string.|  \n|[CPathT::operator CPathT::PCXSTR](#cpatht__operator_cpatht__pcxstr)|This operator allows the object to be treated like a string.|  \n|[CPathT::operator StringType &](#cpatht__operator_stringtype)|This operator allows the object to be treated like a string.|  \n|[CPathT::operator +=](#cpatht__operator_add_eq)|This operator appends a string to the path.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPathT::m_strPath](#cpatht__m_strpath)|The path.|  \n  \n## Remarks  \n `CPath`, `CPathA`, and `CPathW` are instantiations of `CPathT` defined as follows:  \n  \n `typedef CPathT< CString > CPath;`  \n  \n `typedef CPathT< CStringA > CPathA;`  \n  \n `typedef CPathT< CStringW > CPathW;`  \n  \n## Requirements  \n **Header:** atlpath.h  \n  \n##  <a name=\"cpatht__addbackslash\"></a>  CPathT::AddBackslash  \n Call this method to add a backslash to the end of a string to create the correct syntax for a path. If the path already has a trailing backslash, no backslash will be added.  \n  \n```\nvoid AddBackslash();\n```  \n  \n### Remarks  \n For more information, see [PathAddBackSlash](http://msdn.microsoft.com/library/windows/desktop/bb773561).  \n  \n##  <a name=\"cpatht__addextension\"></a>  CPathT::AddExtension  \n Call this method to add a file extension to a path.  \n  \n```\nBOOL AddExtension(PCXSTR    pszExtension);\n```  \n  \n### Parameters  \n `pszExtension`  \n The file extension to add.  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n### Remarks  \n For more information, see [PathAddExtension](http://msdn.microsoft.com/library/windows/desktop/bb773563).  \n  \n##  <a name=\"cpatht__append\"></a>  CPathT::Append  \n Call this method to append a string to the current path.  \n  \n```\nBOOL Append(PCXSTR    pszMore);\n```  \n  \n### Parameters  \n `pszMore`  \n The string to append.  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n### Remarks  \n For more information, see [PathAppend](http://msdn.microsoft.com/library/windows/desktop/bb773565).  \n  \n##  <a name=\"cpatht__buildroot\"></a>  CPathT::BuildRoot  \n Call this method to create a root path from a given drive number.  \n  \n```\nvoid BuildRoot(int    iDrive);\n```  \n  \n### Parameters  \n *iDrive*  \n The drive number (0 is A:, 1 is B:, and so on).  \n  \n### Remarks  \n For more information, see [PathBuildRoot](http://msdn.microsoft.com/library/windows/desktop/bb773567).  \n  \n##  <a name=\"cpatht__canonicalize\"></a>  CPathT::Canonicalize  \n Call this method to convert the path to canonical form.  \n  \n```\nvoid Canonicalize();\n```  \n  \n### Remarks  \n For more information, see [PathCanonicalize](http://msdn.microsoft.com/library/windows/desktop/bb773569).  \n  \n##  <a name=\"cpatht__combine\"></a>  CPathT::Combine  \n Call this method to concatenate a string representing a directory name and a string representing a file path name into one path.  \n  \n```\nvoid Combine(\n    PCXSTR\npszDir,\n PCXSTR   pszFile);\n```  \n  \n### Parameters  \n `pszDir`  \n The directory path.  \n  \n *pszFile*  \n The file path.  \n  \n### Remarks  \n For more information, see [PathCombine](http://msdn.microsoft.com/library/windows/desktop/bb773571).  \n  \n##  <a name=\"cpatht__commonprefix\"></a>  CPathT::CommonPrefix  \n Call this method to determine whether the specified path shares a common prefix with the current path.  \n  \n```\nCPathT<StringType> CommonPrefix(PCXSTR    pszOther);\n```  \n  \n### Parameters  \n `pszOther`  \n The path to compare to the current one.  \n  \n### Return Value  \n Returns the common prefix.  \n  \n### Remarks  \n A prefix is one of these types: \"C:\\\\\\\\\", \".\", \"..\", \"..\\\\\\\\\". For more information, see [PathCommonPrefix](http://msdn.microsoft.com/library/windows/desktop/bb773574).  \n  \n##  <a name=\"cpatht__compactpath\"></a>  CPathT::CompactPath  \n Call this method to truncate a file path to fit within a given pixel width by replacing path components with ellipses.  \n  \n```\nBOOL CompactPath(\n    HDC\nhDC,\n UINT   nWidth);\n```  \n  \n### Parameters  \n `hDC`  \n The device context used for font metrics.  \n  \n `nWidth`  \n The width, in pixels, that the string will be forced to fit in.  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n### Remarks  \n For more information, see [PathCompactPath](http://msdn.microsoft.com/library/windows/desktop/bb773575).  \n  \n##  <a name=\"cpatht__compactpathex\"></a>  CPathT::CompactPathEx  \n Call this method to truncate a file path to fit within a given number of characters by replacing path components with ellipses.  \n  \n```\nBOOL CompactPathEx(\n    UINT\nnMaxChars,\n DWORD\ndwFlags = 0);\n```  \n  \n### Parameters  \n `nMaxChars`  \n The maximum number of characters to be contained in the new string, including the terminating NULL character.  \n  \n `dwFlags`  \n Reserved.  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n### Remarks  \n For more information, see [PathCompactPathEx](http://msdn.microsoft.com/library/windows/desktop/bb773578).  \n  \n##  <a name=\"cpatht__cpatht\"></a>  CPathT::CPathT  \n The constructor.  \n  \n```\nCPathT(PCXSTR    pszPath);\n\nCPathT(const CPathT<StringType>& path);\n\nCPathT() throw();\n```  \n  \n### Parameters  \n *pszPath*  \n The pointer to a path string.  \n  \n *path*  \n The path string.  \n  \n##  <a name=\"cpatht__fileexists\"></a>  CPathT::FileExists  \n Call this method to check whether the file at this path name exists.  \n  \n```\nBOOL FileExists() const;\n```  \n  \n### Return Value  \n Returns TRUE if the file exists, FALSE otherwise.  \n  \n### Remarks  \n For more information, see [PathFileExists](http://msdn.microsoft.com/library/windows/desktop/bb773584).  \n  \n##  <a name=\"cpatht__findextension\"></a>  CPathT::FindExtension  \n Call this method to find the position of the file extension within the path.  \n  \n```\nint FindExtension() const;\n```  \n  \n### Return Value  \n Returns the position of the \".\" preceding the extension. If no extension is found, returns –1.  \n  \n### Remarks  \n For more information, see [PathFindExtension](http://msdn.microsoft.com/library/windows/desktop/bb773587).  \n  \n##  <a name=\"cpatht__findfilename\"></a>  CPathT::FindFileName  \n Call this method to find the position of the file name within the path.  \n  \n```\nint FindFileName() const;\n```  \n  \n### Return Value  \n Returns the position of the file name. If no file name is found, returns –1.  \n  \n### Remarks  \n For more information, see [PathFindFileName](http://msdn.microsoft.com/library/windows/desktop/bb773589).  \n  \n##  <a name=\"cpatht__getdrivenumber\"></a>  CPathT::GetDriveNumber  \n Call this method to search the path for a drive letter within the range of 'A' to 'Z' and return the corresponding drive number.  \n  \n```\nint GetDriveNumber() const;\n```  \n  \n### Return Value  \n Returns the drive number as an integer from 0 through 25 (corresponding to 'A' through 'Z') if the path has a drive letter, or -1 otherwise.  \n  \n### Remarks  \n For more information, see [PathGetDriveNumber](http://msdn.microsoft.com/library/windows/desktop/bb773612).  \n  \n##  <a name=\"cpatht__getextension\"></a>  CPathT::GetExtension  \n Call this method to get the file extension from the path.  \n  \n```\nStringType GetExtension() const;\n```  \n  \n### Return Value  \n Returns the file extension.  \n  \n##  <a name=\"cpatht__isdirectory\"></a>  CPathT::IsDirectory  \n Call this method to check whether the path is a valid directory.  \n  \n```\nBOOL IsDirectory() const;\n```  \n  \n### Return Value  \n Returns a non-zero value (16) if the path is a directory, `FALSE` otherwise.  \n  \n### Remarks  \n For more information, see [PathIsDirectory](http://msdn.microsoft.com/library/windows/desktop/bb773621).  \n  \n##  <a name=\"cpatht__isfilespec\"></a>  CPathT::IsFileSpec  \n Call this method to search a path for any path-delimiting characters (for example, ':' or '\\\\' ). If there are no path-delimiting characters present, the path is considered to be a File Spec path.  \n  \n```\nBOOL IsFileSpec() const;\n```  \n  \n### Return Value  \n Returns TRUE if there are no path-delimiting characters within the path, or FALSE if there are path-delimiting characters.  \n  \n### Remarks  \n For more information, see [PathIsFileSpec](http://msdn.microsoft.com/library/windows/desktop/bb773627).  \n  \n##  <a name=\"cpatht__isprefix\"></a>  CPathT::IsPrefix  \n Call this method to determine whether a path contains a valid prefix of the type passed by `pszPrefix`.  \n  \n```\nBOOL IsPrefix(PCXSTR    pszPrefix) const;\n```  \n  \n### Parameters  \n `pszPrefix`  \n The prefix for which to search. A prefix is one of these types: \"C:\\\\\\\\\", \".\", \"..\", \"..\\\\\\\\\".  \n  \n### Return Value  \n Returns TRUE if the path contains the prefix, or FALSE otherwise.  \n  \n### Remarks  \n For more information, see [PathIsPrefix](http://msdn.microsoft.com/library/windows/desktop/bb773650).  \n  \n##  <a name=\"cpatht__isrelative\"></a>  CPathT::IsRelative  \n Call this method to determine if the path is relative.  \n  \n```\nBOOL IsRelative() const;\n```  \n  \n### Return Value  \n Returns TRUE if the path is relative, or FALSE if it is absolute.  \n  \n### Remarks  \n For more information, see [PathIsRelative](http://msdn.microsoft.com/library/windows/desktop/bb773660).  \n  \n##  <a name=\"cpatht__isroot\"></a>  CPathT::IsRoot  \n Call this method to determine if the path is a directory root.  \n  \n```\nBOOL IsRoot() const;\n```  \n  \n### Return Value  \n Returns TRUE if the path is a root, or FALSE otherwise.  \n  \n### Remarks  \n For more information, see [PathIsRoot](http://msdn.microsoft.com/library/windows/desktop/bb773674).  \n  \n##  <a name=\"cpatht__issameroot\"></a>  CPathT::IsSameRoot  \n Call this method to determine whether another path has a common root component with the current path.  \n  \n```\nBOOL IsSameRoot(PCXSTR    pszOther) const;\n```  \n  \n### Parameters  \n `pszOther`  \n The other path.  \n  \n### Return Value  \n Returns TRUE if both strings have the same root component, or FALSE otherwise.  \n  \n### Remarks  \n For more information, see [PathIsSameRoot](http://msdn.microsoft.com/library/windows/desktop/bb773687).  \n  \n##  <a name=\"cpatht__isunc\"></a>  CPathT::IsUNC  \n Call this method to determine whether the path is a valid UNC (universal naming convention) path for a server and share.  \n  \n```\nBOOL IsUNC() const;\n```  \n  \n### Return Value  \n Returns TRUE if the path is a valid UNC path, or FALSE otherwise.  \n  \n### Remarks  \n For more information, see [PathIsUNC](http://msdn.microsoft.com/library/windows/desktop/bb773712).  \n  \n##  <a name=\"cpatht__isuncserver\"></a>  CPathT::IsUNCServer  \n Call this method to determine whether the path is a valid UNC (universal naming convention) path for a server only.  \n  \n```\nBOOL IsUNCServer() const;\n```  \n  \n### Return Value  \n Returns TRUE if the string is a valid UNC path for a server only (no share name), or FALSE otherwise.  \n  \n### Remarks  \n For more information, see [PathIsUNCServer](http://msdn.microsoft.com/library/windows/desktop/bb773722).  \n  \n##  <a name=\"cpatht__isuncservershare\"></a>  CPathT::IsUNCServerShare  \n Call this method to determine whether the path is a valid UNC (universal naming convention) share path, \\\\\\ *server*\\ *share*.  \n  \n```\nBOOL IsUNCServerShare() const;\n```  \n  \n### Return Value  \n Returns TRUE if the path is in the form \\\\\\ *server*\\ *share*, or FALSE otherwise.  \n  \n### Remarks  \n For more information, see [PathIsUNCServerShare](http://msdn.microsoft.com/library/windows/desktop/bb773723).  \n  \n##  <a name=\"cpatht__m_strpath\"></a>  CPathT::m_strPath  \n The path.  \n  \n```\nStringType m_strPath;\n```  \n  \n### Remarks  \n `StringType` is the template parameter to `CPathT`.  \n  \n##  <a name=\"cpatht__makepretty\"></a>  CPathT::MakePretty  \n Call this method to convert a path to all lowercase characters to give the path a consistent appearance.  \n  \n```\nBOOL MakePretty();\n```  \n  \n### Return Value  \n Returns TRUE if the path has been converted, or FALSE otherwise.  \n  \n### Remarks  \n For more information, see [PathMakePretty](http://msdn.microsoft.com/library/windows/desktop/bb773725).  \n  \n##  <a name=\"cpatht__matchspec\"></a>  CPathT::MatchSpec  \n Call this method to search the path for a string containing a wildcard match type.  \n  \n```\nBOOL MatchSpec(PCXSTR    pszSpec) const;\n```  \n  \n### Parameters  \n `pszSpec`  \n Pointer to a null-terminated string with the file type for which to search. For example, to test whether the file at the current path is a DOC file, `pszSpec` should be set to \"*.doc\".  \n  \n### Return Value  \n Returns TRUE if the string matches, or FALSE otherwise.  \n  \n### Remarks  \n For more information, see [PathMatchSpec](http://msdn.microsoft.com/library/windows/desktop/bb773727).  \n  \n##  <a name=\"cpatht__operator_add_eq\"></a>  CPathT::operator +=  \n This operator appends a string to the path.  \n  \n```\nCPathT<StringType>& operator+=(PCXSTR    pszMore);\n```  \n  \n### Parameters  \n `pszMore`  \n The string to append.  \n  \n### Return Value  \n Returns the updated path.  \n  \n##  <a name=\"cpatht__operator_const_stringtype_amp\"></a>  CPathT::operator const StringType &amp;  \n This operator allows the object to be treated like a string.  \n  \n```\n    operatorconst StringType&() const throw();\n```  \n  \n### Return Value  \n Returns a string representing the current path managed by this object.  \n  \n##  <a name=\"cpatht__operator_cpatht__pcxstr\"></a>  CPathT::operator CPathT::PCXSTR  \n This operator allows the object to be treated like a string.  \n  \n```\n    operatorPCXSTR() const throw();\n```  \n  \n### Return Value  \n Returns a string representing the current path managed by this object.  \n  \n##  <a name=\"cpatht__operator_stringtype__amp\"></a>  CPathT::operator StringType &amp;  \n This operator allows the object to be treated like a string.  \n  \n```\n    operatorStringType&() throw();\n```  \n  \n### Return Value  \n Returns a string representing the current path managed by this object.  \n  \n##  <a name=\"cpatht__pcxstr\"></a>  CPathT::PCXSTR  \n A constant string type.  \n  \n```\ntypedef StringType::PCXSTR PCXSTR;\n```  \n  \n### Remarks  \n `StringType` is the template parameter to `CPathT`.  \n  \n##  <a name=\"cpatht__pxstr\"></a>  CPathT::PXSTR  \n A string type.  \n  \n```\ntypedef StringType::PXSTR PXSTR;\n```  \n  \n### Remarks  \n `StringType` is the template parameter to `CPathT`.  \n  \n##  <a name=\"cpatht__quotespaces\"></a>  CPathT::QuoteSpaces  \n Call this method to enclose the path in quotation marks if it contains any spaces.  \n  \n```\nvoid QuoteSpaces();\n```  \n  \n### Remarks  \n For more information, see [PathQuoteSpaces](http://msdn.microsoft.com/library/windows/desktop/bb773739).  \n  \n##  <a name=\"cpatht__relativepathto\"></a>  CPathT::RelativePathTo  \n Call this method to create a relative path from one file or folder to another.  \n  \n```\nBOOL RelativePathTo(\n    PCXSTR\npszFrom,\n DWORD\ndwAttrFrom,\n    PCXSTR\npszTo,\n DWORD   dwAttrTo);\n```  \n  \n### Parameters  \n `pszFrom`  \n The start of the relative path.  \n  \n *dwAttrFrom*  \n The File attributes of `pszFrom`. If this value contains FILE_ATTRIBUTE_DIRECTORY, `pszFrom` is assumed to be a directory; otherwise, `pszFrom` is assumed to be a file.  \n  \n `pszTo`  \n The end point of the relative path.  \n  \n *dwAttrTo*  \n The File attributes of `pszTo`. If this value contains FILE_ATTRIBUTE_DIRECTORY, `pszTo` is assumed to be a directory; otherwise, `pszTo` is assumed to be a file.  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n### Remarks  \n For more information, see [PathRelativePathTo](http://msdn.microsoft.com/library/windows/desktop/bb773740).  \n  \n##  <a name=\"cpatht__removeargs\"></a>  CPathT::RemoveArgs  \n Call this method to remove any command-line arguments from the path.  \n  \n```\nvoid RemoveArgs();\n```  \n  \n### Remarks  \n For more information, see [PathRemoveArgs](http://msdn.microsoft.com/library/windows/desktop/bb773742).  \n  \n##  <a name=\"cpatht__removebackslash\"></a>  CPathT::RemoveBackslash  \n Call this method to remove the trailing backslash from the path.  \n  \n```\nvoid RemoveBackslash();\n```  \n  \n### Remarks  \n For more information, see [PathRemoveBackslash](http://msdn.microsoft.com/library/windows/desktop/bb773743).  \n  \n##  <a name=\"cpatht__removeblanks\"></a>  CPathT::RemoveBlanks  \n Call this method to remove all leading and trailing spaces from the path.  \n  \n```\nvoid RemoveBlanks();\n```  \n  \n### Remarks  \n For more information, see [PathRemoveBlanks](http://msdn.microsoft.com/library/windows/desktop/bb773745).  \n  \n##  <a name=\"cpatht__removeextension\"></a>  CPathT::RemoveExtension  \n Call this method to remove the file extension from the path, if there is one.  \n  \n```\nvoid RemoveExtension();\n```  \n  \n### Remarks  \n For more information, see [PathRemoveExtension](http://msdn.microsoft.com/library/windows/desktop/bb773746).  \n  \n##  <a name=\"cpatht__removefilespec\"></a>  CPathT::RemoveFileSpec  \n Call this method to remove the trailing file name and backslash from the path, if it has them.  \n  \n```\nBOOL RemoveFileSpec();\n```  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n### Remarks  \n For more information, see [PathRemoveFileSpec](http://msdn.microsoft.com/library/windows/desktop/bb773748).  \n  \n##  <a name=\"cpatht__renameextension\"></a>  CPathT::RenameExtension  \n Call this method to replace the file name extension in the path with a new extension. If the file name does not contain an extension, the extension will be attached to the end of the path.  \n  \n```\nBOOL RenameExtension(PCXSTR    pszExtension);\n```  \n  \n### Parameters  \n `pszExtension`  \n The new file name extension, preceded by a \".\" character.  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n### Remarks  \n For more information, see [PathRenameExtension](http://msdn.microsoft.com/library/windows/desktop/bb773749).  \n  \n##  <a name=\"cpatht__skiproot\"></a>  CPathT::SkipRoot  \n Call this method to parse a path, ignoring the drive letter or UNC (universal naming convention) server/share path parts.  \n  \n```\nint SkipRoot() const;\n```  \n  \n### Return Value  \n Returns the position of the beginning of the subpath that follows the root (drive letter or UNC server/share).  \n  \n### Remarks  \n For more information, see [PathSkipRoot](http://msdn.microsoft.com/library/windows/desktop/bb773754).  \n  \n##  <a name=\"cpatht__strippath\"></a>  CPathT::StripPath  \n Call this method to remove the path portion of a fully qualified path and file name.  \n  \n```\nvoid StripPath();\n```  \n  \n### Remarks  \n For more information, see [PathStripPath](http://msdn.microsoft.com/library/windows/desktop/bb773756).  \n  \n##  <a name=\"cpatht__striptoroot\"></a>  CPathT::StripToRoot  \n Call this method to remove all parts of the path except for the root information.  \n  \n```\nBOOL StripToRoot();\n```  \n  \n### Return Value  \n Returns TRUE if a valid drive letter was found in the path, or FALSE otherwise.  \n  \n### Remarks  \n For more information, see [PathStripToRoot](http://msdn.microsoft.com/library/windows/desktop/bb773757).  \n  \n##  <a name=\"cpatht__unquotespaces\"></a>  CPathT::UnquoteSpaces  \n Call this method to remove quotation marks from the beginning and end of a path.  \n  \n```\nvoid UnquoteSpaces();\n```  \n  \n### Remarks  \n For more information, see [PathUnquoteSpaces](http://msdn.microsoft.com/library/windows/desktop/bb773763).  \n  \n##  <a name=\"cpatht__xchar\"></a>  CPathT::XCHAR  \n A character type.  \n  \n```\ntypedef StringType::XCHAR XCHAR;\n```  \n  \n### Remarks  \n `StringType` is the template parameter to `CPathT`.  \n  \n## See Also  \n [Classes](../../atl/reference/atl-classes.md)   \n [CStringT Class](../../atl-mfc-shared/reference/cstringt-class.md)"}