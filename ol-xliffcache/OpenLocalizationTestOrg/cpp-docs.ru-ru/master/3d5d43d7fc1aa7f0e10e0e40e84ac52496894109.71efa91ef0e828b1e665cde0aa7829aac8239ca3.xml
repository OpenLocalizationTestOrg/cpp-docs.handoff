{"nodes":[{"pos":[12,56],"content":"operator== (pair) (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"operator== (pair) (STL-CLR) | Microsoft Docs","pos":[0,44]}]},{"content":"operator== (pair) (STL/CLR)","pos":[639,666]},{"content":"Pair equal comparison.","pos":[667,689]},{"content":"Syntax","pos":[698,704]},{"content":"Parameters","pos":[871,881]},{"content":"left","pos":[885,889]},{"content":"Left pair to compare.","pos":[893,914]},{"content":"right","pos":[921,926]},{"content":"Right pair to compare.","pos":[930,952]},{"content":"Remarks","pos":[961,968]},{"content":"The operator function returns <ph id=\"ph1\">`left``.first ==`</ph> <ph id=\"ph2\">`right``.first &amp;&amp;`</ph> <ph id=\"ph3\">`left``.second ==`</ph> <ph id=\"ph4\">`right``.second`</ph>.","pos":[972,1075],"source":"The operator function returns `left``.first ==` `right``.first &&` `left``.second ==` `right``.second`."},{"content":"You use it to test whether <ph id=\"ph1\">`left`</ph> is ordered the same as <ph id=\"ph2\">`right`</ph> when the two pairs are compared element by element.","pos":[1076,1192],"source":" You use it to test whether `left` is ordered the same as `right` when the two pairs are compared element by element."},{"content":"Example","pos":[1201,1208]},{"content":"Requirements","pos":[1865,1877]},{"pos":[1881,1910],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/utility&gt;","source":"**Header:** \\<cliext/utility>"},{"pos":[1917,1938],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[1947,1955]},{"content":"pair (STL/CLR)","pos":[1960,1974]},{"content":"operator!= (pair) (STL/CLR)","pos":[2008,2035]},{"content":"operator<ph id=\"ph1\">\\&lt;</ph> (pair) (STL/CLR)","pos":[2089,2116],"source":"operator\\< (pair) (STL/CLR)"},{"content":"operator&gt;= (pair) (STL/CLR)","pos":[2169,2196],"source":"operator>= (pair) (STL/CLR)"},{"content":"operator&gt; (pair) (STL/CLR)","pos":[2256,2282],"source":"operator> (pair) (STL/CLR)"},{"content":"operator&lt;= (pair) (STL/CLR)","pos":[2338,2365],"source":"operator<= (pair) (STL/CLR)"}],"content":"---\ntitle: \"operator== (pair) (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::pair::operator==\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"operator== member [STL/CLR]\"\nms.assetid: 2b4879a1-f326-4fb3-b113-bd8d457f9802\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# operator== (pair) (STL/CLR)\nPair equal comparison.  \n  \n## Syntax  \n  \n```  \ntemplate<typename Value1,  \n    typename Value2>  \n    bool operator==(pair<Value1, Value2>% left,  \n        pair<Value1, Value2>% right);  \n```  \n  \n#### Parameters  \n left  \n Left pair to compare.  \n  \n right  \n Right pair to compare.  \n  \n## Remarks  \n The operator function returns `left``.first ==` `right``.first &&` `left``.second ==` `right``.second`. You use it to test whether `left` is ordered the same as `right` when the two pairs are compared element by element.  \n  \n## Example  \n  \n```  \n// cliext_pair_operator_eq.cpp   \n// compile with: /clr   \n#include <cliext/utility>   \n  \nint main()   \n    {   \n    cliext::pair<wchar_t, int> c1(L'x', 3);   \n    System::Console::WriteLine(\"[{0}, {1}]\", c1.first, c1.second);   \n    cliext::pair<wchar_t, int> c2(L'x', 4);   \n    System::Console::WriteLine(\"[{0}, {1}]\", c2.first, c2.second);   \n  \n    System::Console::WriteLine(\"[x 3] == [x 3] is {0}\",   \n        c1 == c1);   \n    System::Console::WriteLine(\"[x 3] == [x 4] is {0}\",   \n        c1 == c2);   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n[x, 3]  \n[x, 4]  \n[x 3] == [x 3] is True  \n[x 3] == [x 4] is False  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/utility>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [pair (STL/CLR)](../dotnet/pair-stl-clr.md)   \n [operator!= (pair) (STL/CLR)](../dotnet/operator-inequality-pair-stl-clr.md)   \n [operator\\< (pair) (STL/CLR)](../dotnet/operator-less-than-pair-stl-clr.md)   \n [operator>= (pair) (STL/CLR)](../dotnet/operator-greater-or-equal-pair-stl-clr.md)   \n [operator> (pair) (STL/CLR)](../dotnet/operator-greater-than-pair-stl-clr.md)   \n [operator<= (pair) (STL/CLR)](../dotnet/operator-less-or-equal-pair-stl-clr.md)"}