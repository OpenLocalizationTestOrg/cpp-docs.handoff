{"nodes":[{"pos":[12,85],"content":"A.25   Examples of the copyprivate Data Attribute Clause | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"A.25   Examples of the copyprivate Data Attribute Clause | Microsoft Docs","pos":[0,73]}]},{"content":"A.25   Examples of the copyprivate Data Attribute Clause","pos":[565,621]},{"pos":[622,871],"content":"<bpt id=\"p1\">**</bpt>Example 1:<ept id=\"p1\">**</ept> The <ph id=\"ph1\">`copyprivate`</ph> clause (<bpt id=\"p2\">[</bpt>Section 2.7.2.8<ept id=\"p2\">](../../parallel/openmp/2-7-2-8-copyprivate.md)</ept> on page 32) can be used to broadcast values acquired by a single thread directly to all instances of the private variables in the other threads.","source":"**Example 1:** The `copyprivate` clause ([Section 2.7.2.8](../../parallel/openmp/2-7-2-8-copyprivate.md) on page 32) can be used to broadcast values acquired by a single thread directly to all instances of the private variables in the other threads."},{"content":"If routine <bpt id=\"p1\">*</bpt>init<ept id=\"p1\">*</ept> is called from a serial region, its behavior is not affected by the presence of the directives.","pos":[1127,1240],"source":"If routine *init* is called from a serial region, its behavior is not affected by the presence of the directives."},{"content":"After the call to the <bpt id=\"p1\">*</bpt>get_values<ept id=\"p1\">*</ept> routine has been executed by one thread, no thread leaves the construct until the private objects designated by <bpt id=\"p2\">*</bpt>a<ept id=\"p2\">*</ept>, <bpt id=\"p3\">*</bpt>b<ept id=\"p3\">*</ept>, <bpt id=\"p4\">*</bpt>x<ept id=\"p4\">*</ept>, and <bpt id=\"p5\">*</bpt>y<ept id=\"p5\">*</ept> in all threads have become defined with the values read.","pos":[1241,1467],"source":" After the call to the *get_values* routine has been executed by one thread, no thread leaves the construct until the private objects designated by *a*, *b*, *x*, and *y* in all threads have become defined with the values read."},{"content":"<bpt id=\"p1\">**</bpt>Example 2:<ept id=\"p1\">**</ept> In contrast to the previous example, suppose the read must be performed by a particular thread, say the master thread.","pos":[1474,1607],"source":"**Example 2:** In contrast to the previous example, suppose the read must be performed by a particular thread, say the master thread."},{"content":"In this case, the <ph id=\"ph1\">`copyprivate`</ph> clause cannot be used to do the broadcast directly, but it can be used to provide access to a temporary shared object.","pos":[1608,1758],"source":" In this case, the `copyprivate` clause cannot be used to do the broadcast directly, but it can be used to provide access to a temporary shared object."},{"content":"<bpt id=\"p1\">**</bpt>Example 3:<ept id=\"p1\">**</ept> Suppose that the number of lock objects required within a parallel region cannot easily be determined prior to entering it.","pos":[2207,2345],"source":"**Example 3:** Suppose that the number of lock objects required within a parallel region cannot easily be determined prior to entering it."},{"content":"The <ph id=\"ph1\">`copyprivate`</ph> clause can be used to provide access to shared lock objects that are allocated within that parallel region.","pos":[2346,2471],"source":" The `copyprivate` clause can be used to provide access to shared lock objects that are allocated within that parallel region."}],"content":"---\ntitle: \"A.25   Examples of the copyprivate Data Attribute Clause | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: 7b1cb6a5-5691-4b95-b3ac-d7543ede6405\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# A.25   Examples of the copyprivate Data Attribute Clause\n**Example 1:** The `copyprivate` clause ([Section 2.7.2.8](../../parallel/openmp/2-7-2-8-copyprivate.md) on page 32) can be used to broadcast values acquired by a single thread directly to all instances of the private variables in the other threads.  \n  \n```  \nfloat x, y;  \n#pragma omp threadprivate(x, y)  \n  \nvoid init( )   \n{  \n    float a;  \n    float b;  \n  \n    #pragma omp single copyprivate(a,b,x,y)  \n    {  \n        get_values(a,b,x,y);  \n    }  \n  \n    use_values(a, b, x, y);  \n}  \n```  \n  \n If routine *init* is called from a serial region, its behavior is not affected by the presence of the directives. After the call to the *get_values* routine has been executed by one thread, no thread leaves the construct until the private objects designated by *a*, *b*, *x*, and *y* in all threads have become defined with the values read.  \n  \n **Example 2:** In contrast to the previous example, suppose the read must be performed by a particular thread, say the master thread. In this case, the `copyprivate` clause cannot be used to do the broadcast directly, but it can be used to provide access to a temporary shared object.  \n  \n```  \nfloat read_next( )   \n{  \n    float * tmp;  \n    float return_val;  \n  \n    #pragma omp single copyprivate(tmp)  \n    {  \n        tmp = (float *) malloc(sizeof(float));  \n    }  \n  \n    #pragma omp master  \n    {  \n        get_float( tmp );  \n    }  \n  \n    #pragma omp barrier  \n    return_val = *tmp;  \n    #pragma omp barrier  \n  \n    #pragma omp single  \n    {  \n       free(tmp);  \n    }  \n  \n    return return_val;  \n}  \n```  \n  \n **Example 3:** Suppose that the number of lock objects required within a parallel region cannot easily be determined prior to entering it. The `copyprivate` clause can be used to provide access to shared lock objects that are allocated within that parallel region.  \n  \n```  \n#include <omp.h>  \n  \nomp_lock_t *new_lock()  \n{  \n    omp_lock_t *lock_ptr;  \n  \n    #pragma omp single copyprivate(lock_ptr)  \n    {  \n        lock_ptr = (omp_lock_t *) malloc(sizeof(omp_lock_t));  \n        omp_init_lock( lock_ptr );  \n    }  \n  \n    return lock_ptr;  \n}  \n```"}