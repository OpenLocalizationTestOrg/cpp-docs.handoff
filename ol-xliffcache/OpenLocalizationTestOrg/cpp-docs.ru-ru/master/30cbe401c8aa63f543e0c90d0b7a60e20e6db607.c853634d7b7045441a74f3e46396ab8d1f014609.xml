{"nodes":[{"pos":[12,56],"content":"fisher_f_distribution Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"fisher_f_distribution Class | Microsoft Docs","pos":[0,44]}]},{"content":"fisher_f_distribution Class","pos":[819,846]},{"content":"Generates a Fisher F distribution.","pos":[847,881]},{"content":"Syntax","pos":[890,896]},{"content":"Parameters","pos":[1606,1616]},{"content":"The floating-point result type, defaults to <ph id=\"ph1\">`double`</ph>.","pos":[1634,1687],"source":" The floating-point result type, defaults to `double`."},{"content":"For possible types, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","pos":[1688,1755],"source":" For possible types, see [\\<random>](../standard-library/random.md)."},{"content":"Remarks","pos":[1764,1771]},{"content":"The template class describes a distribution that produces values of a user-specified integral type, or type <ph id=\"ph1\">`double`</ph> if none is provided, distributed according to the Fisher's F-Distribution.","pos":[1775,1966],"source":"The template class describes a distribution that produces values of a user-specified integral type, or type `double` if none is provided, distributed according to the Fisher's F-Distribution."},{"content":"The following table links to articles about individual members.","pos":[1967,2030]},{"content":"fisher_f_distribution::fisher_f_distribution","pos":[2055,2099]},{"content":"fisher_f_distribution::param_type","pos":[2274,2307]},{"pos":[2352,2473],"content":"The property functions <ph id=\"ph1\">`m()`</ph> and <ph id=\"ph2\">`n()`</ph> return the values for the stored distribution parameters <ph id=\"ph3\">`m`</ph> and <ph id=\"ph4\">`n`</ph> respectively.","source":"The property functions `m()` and `n()` return the values for the stored distribution parameters `m` and `n` respectively."},{"pos":[2480,2594],"content":"For more information about distribution classes and their members, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","source":"For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md)."},{"pos":[2601,2750],"content":"For detailed information about the F- distribution, see the Wolfram MathWorld article <bpt id=\"p1\">[</bpt>F-Distribution<ept id=\"p1\">](http://go.microsoft.com/fwlink/LinkId=400899)</ept>.","source":"For detailed information about the F- distribution, see the Wolfram MathWorld article [F-Distribution](http://go.microsoft.com/fwlink/LinkId=400899)."},{"content":"Example","pos":[2759,2766]},{"content":"Output","pos":[4726,4732]},{"content":"First run:","pos":[4736,4746]},{"content":"Second run:","pos":[5347,5358]},{"content":"Third run:","pos":[5988,5998]},{"content":"Requirements","pos":[6602,6614]},{"pos":[6618,6639],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>random&gt;","source":"**Header:** \\<random>"},{"pos":[6646,6664],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[6735,6779],"content":"fisher_f_distribution::fisher_f_distribution"},{"content":"Constructs the distribution.","pos":[6783,6811]},{"content":"Parameters","pos":[6963,6973]},{"content":"The <ph id=\"ph1\">`m`</ph> distribution parameter.","pos":[6984,7015],"source":" The `m` distribution parameter."},{"content":"The <ph id=\"ph1\">`n`</ph> distribution parameter.","pos":[7029,7060],"source":" The `n` distribution parameter."},{"content":"The parameter structure used to construct the distribution.","pos":[7077,7136]},{"content":"Remarks","pos":[7146,7153]},{"pos":[7157,7188],"content":"<bpt id=\"p1\">**</bpt>Precondition:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`0.0 &lt; m`</ph> and","source":"**Precondition:** `0.0 < m` and "},{"pos":[7205,7338],"content":"The first constructor constructs an object whose stored <ph id=\"ph1\">`m`</ph> value holds the value <ph id=\"ph2\">`m`</ph> and whose stored <ph id=\"ph3\">`n`</ph> value holds the value <ph id=\"ph4\">`n`</ph>.","source":"The first constructor constructs an object whose stored `m` value holds the value `m` and whose stored `n` value holds the value `n`."},{"content":"The second constructor constructs an object whose stored parameters are initialized from <ph id=\"ph1\">`parm`</ph>.","pos":[7345,7441],"source":"The second constructor constructs an object whose stored parameters are initialized from `parm`."},{"content":"You can obtain and set the current parameters of an existing distribution by calling the <ph id=\"ph1\">`param()`</ph> member function.","pos":[7442,7557],"source":" You can obtain and set the current parameters of an existing distribution by calling the `param()` member function."},{"pos":[7617,7650],"content":"fisher_f_distribution::param_type"},{"content":"Stores the parameters of the distribution.","pos":[7654,7696]},{"content":"Parameters","pos":[8023,8033]},{"pos":[8037,8146],"content":"See parent topic <bpt id=\"p1\">[</bpt>extreme_value_distribution Class<ept id=\"p1\">](../standard-library/extreme-value-distribution-class.md)</ept>.","source":"See parent topic [extreme_value_distribution Class](../standard-library/extreme-value-distribution-class.md)."},{"content":"Remarks","pos":[8156,8163]},{"pos":[8167,8198],"content":"<bpt id=\"p1\">**</bpt>Precondition:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`0.0 &lt; m`</ph> and","source":"**Precondition:** `0.0 < m` and "},{"pos":[8215,8458],"content":"This structure can be passed to the distribution's class constructor at instantiation, to the <ph id=\"ph1\">`param()`</ph> member function to set the stored parameters of an existing distribution, and to <ph id=\"ph2\">`operator()`</ph> to be used in place of the stored parameters.","source":"This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters."},{"content":"See Also","pos":[8467,8475]},{"content":"random&gt;","pos":[8482,8489],"source":"random>"}],"content":"---\ntitle: \"fisher_f_distribution Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.tr1.fisher_f_distribution\"\n  - \"tr1.fisher_f_distribution\"\n  - \"std::tr1::fisher_f_distribution\"\n  - \"fisher_f_distribution\"\n  - \"random/std::tr1::fisher_f_distribution\"\n  - \"tr1::fisher_f_distribution\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"fisher_f_distribution class\"\nms.assetid: 9513b6ce-3309-4be1-829b-f504bca35bbf\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# fisher_f_distribution Class\nGenerates a Fisher F distribution.  \n  \n## Syntax  \n```  \nclass fisher_f_distribution  \n   {  \n   public:  // types  \n   typedef RealType result_type;  \n   struct param_type;  // constructor and reset functions  \n   explicit fisher_f_distribution(RealType m = 1.0, RealType n = 1.0);\n   explicit fisher_f_distribution(const param_type& parm);\n   void reset();\n   // generating functions  \n   template <class URNG>  \n   result_type operator()(URNG& gen);\n   template <class URNG>  \n   result_type operator()(URNG& gen, const param_type& parm);\n   // property functions  \n   RealType m() const;\n   RealType n() const;\n   param_type param() const;\n   void param(const param_type& parm);\n   result_type min() const;\n   result_type max() const;\n   };  \n```  \n#### Parameters  \n `RealType`  \n The floating-point result type, defaults to `double`. For possible types, see [\\<random>](../standard-library/random.md).  \n  \n## Remarks  \n The template class describes a distribution that produces values of a user-specified integral type, or type `double` if none is provided, distributed according to the Fisher's F-Distribution. The following table links to articles about individual members.  \n  \n||||  \n|-|-|-|  \n|[fisher_f_distribution::fisher_f_distribution](#fisher_f_distribution__fisher_f_distribution)|`fisher_f_distribution::m`|`fisher_f_distribution::param`|  \n|`fisher_f_distribution::operator()`|`fisher_f_distribution::n`|[fisher_f_distribution::param_type](#fisher_f_distribution__param_type)|  \n  \n The property functions `m()` and `n()` return the values for the stored distribution parameters `m` and `n` respectively.  \n  \n For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md).  \n  \n For detailed information about the F- distribution, see the Wolfram MathWorld article [F-Distribution](http://go.microsoft.com/fwlink/LinkId=400899).  \n  \n## Example  \n  \n```cpp  \n// compile with: /EHsc /W4  \n#include <random>   \n#include <iostream>  \n#include <iomanip>  \n#include <string>  \n#include <map>  \n  \nvoid test(const double m, const double n, const int s) {  \n  \n    // uncomment to use a non-deterministic seed  \n    //    std::random_device rd;  \n    //    std::mt19937 gen(rd());  \n    std::mt19937 gen(1701);  \n  \n    std::fisher_f_distribution<> distr(m, n);  \n  \n    std::cout << std::endl;  \n    std::cout << \"min() == \" << distr.min() << std::endl;  \n    std::cout << \"max() == \" << distr.max() << std::endl;  \n    std::cout << \"m() == \" << std::fixed << std::setw(11) << std::setprecision(10) << distr.m() << std::endl;  \n    std::cout << \"n() == \" << std::fixed << std::setw(11) << std::setprecision(10) << distr.n() << std::endl;  \n  \n    // generate the distribution as a histogram  \n    std::map<double, int> histogram;  \n    for (int i = 0; i < s; ++i) {  \n        ++histogram[distr(gen)];  \n    }  \n  \n    // print results  \n    std::cout << \"Distribution for \" << s << \" samples:\" << std::endl;  \n    int counter = 0;  \n    for (const auto& elem : histogram) {  \n        std::cout << std::fixed << std::setw(11) << ++counter << \": \"  \n            << std::setw(14) << std::setprecision(10) << elem.first << std::endl;  \n    }  \n    std::cout << std::endl;  \n}  \n  \nint main()  \n{  \n    double m_dist = 1;  \n    double n_dist = 1;  \n    int samples = 10;  \n  \n    std::cout << \"Use CTRL-Z to bypass data entry and run using default values.\" << std::endl;  \n    std::cout << \"Enter a floating point value for the \\'m\\' distribution parameter (must be greater than zero): \";  \n    std::cin >> m_dist;  \n    std::cout << \"Enter a floating point value for the \\'n\\' distribution parameter (must be greater than zero): \";  \n    std::cin >> n_dist;  \n    std::cout << \"Enter an integer value for the sample count: \";  \n    std::cin >> samples;  \n  \n    test(m_dist, n_dist, samples);  \n}  \n  \n```  \n  \n## Output  \n First run:  \n  \n```  \nEnter a floating point value for the 'm' distribution parameter (must be greater than zero): 1  \nEnter a floating point value for the 'n' distribution parameter (must be greater than zero): 1  \nEnter an integer value for the sample count: 10  \n \nmin() == 0  \nmax() == 1.79769e+308  \nm() == 1.0000000000  \nn() == 1.0000000000  \nDistribution for 10 samples:  \n    1: 0.0204569549  \n    2: 0.0221376644  \n    3: 0.0297234962  \n    4: 0.1600937252  \n    5: 0.2775342196  \n    6: 0.3950701700  \n    7: 0.8363200295  \n    8: 0.9512500702  \n    9: 2.7844815974  \n    10: 3.4320929653  \n```  \n  \n Second run:  \n  \n```  \nEnter a floating point value for the 'm' distribution parameter (must be greater than zero): 1  \nEnter a floating point value for the 'n' distribution parameter (must be greater than zero): .1  \nEnter an integer value for the sample count: 10  \n \nmin() == 0  \nmax() == 1.79769e+308  \nm() == 1.0000000000  \nn() == 0.1000000000  \nDistribution for 10 samples:  \n    1: 0.0977725649  \n    2: 0.5304122767  \n    3: 4.9468518084  \n    4: 25.1012074939  \n    5: 48.8082121613  \n    6: 401.8075539377  \n    7: 8199.5947873699  \n    8: 226492.6855335717  \n    9: 2782062.6639740225  \n    10: 20829747131.7185860000  \n```  \n  \n Third run:  \n  \n```  \nEnter a floating point value for the 'm' distribution parameter (must be greater than zero): .1  \nEnter a floating point value for the 'n' distribution parameter (must be greater than zero): 1  \nEnter an integer value for the sample count: 10  \n \nmin() == 0  \nmax() == 1.79769e+308  \nm() == 0.1000000000  \nn() == 1.0000000000  \nDistribution for 10 samples:  \n    1: 0.0000000000  \n    2: 0.0000000000  \n    3: 0.0000000000  \n    4: 0.0000000000  \n    5: 0.0000000033  \n    6: 0.0000073975  \n    7: 0.0000703800  \n    8: 0.0280427735  \n    9: 0.2660239949  \n    10: 3.4363333954  \n```  \n  \n## Requirements  \n **Header:** \\<random>  \n  \n **Namespace:** std  \n  \n##  <a name=\"fisher_f_distribution__fisher_f_distribution\"></a>  fisher_f_distribution::fisher_f_distribution  \n Constructs the distribution.  \n  \n```  \nexplicit fisher_f_distribution(RealType m = 1.0, RealType n = 1.0);\n\n \nexplicit fisher_f_distribution(const param_type& parm);\n```  \n  \n### Parameters  \n `m`  \n The `m` distribution parameter.  \n  \n `n`  \n The `n` distribution parameter.  \n  \n `parm`  \n The parameter structure used to construct the distribution.  \n  \n### Remarks  \n **Precondition:** `0.0 < m` and `0.0 < n`  \n  \n The first constructor constructs an object whose stored `m` value holds the value `m` and whose stored `n` value holds the value `n`.  \n  \n The second constructor constructs an object whose stored parameters are initialized from `parm`. You can obtain and set the current parameters of an existing distribution by calling the `param()` member function.  \n  \n##  <a name=\"fisher_f_distribution__param_type\"></a>  fisher_f_distribution::param_type  \n Stores the parameters of the distribution.  \n```cpp  \nstruct param_type {  \n   typedef fisher_f_distribution<RealType> distribution_type;  \n   param_type(RealType m = 1.0, RealType n = 1.0);\n   RealType m() const;\n   RealType n() const;\n   ......  \n   bool operator==(const param_type& right) const;\n   bool operator!=(const param_type& right) const;\n   };  \n```  \n### Parameters  \n See parent topic [extreme_value_distribution Class](../standard-library/extreme-value-distribution-class.md).  \n  \n### Remarks  \n **Precondition:** `0.0 < m` and `0.0 < n`  \n  \n This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters.  \n  \n## See Also  \n [\\<random>](../standard-library/random.md)\n\n\n\n"}