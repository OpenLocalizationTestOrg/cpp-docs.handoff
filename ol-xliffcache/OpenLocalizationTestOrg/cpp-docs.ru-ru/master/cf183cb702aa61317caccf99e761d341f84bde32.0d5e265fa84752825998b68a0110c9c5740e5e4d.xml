{"nodes":[{"pos":[12,46],"content":"modulus (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"modulus (STL-CLR) | Microsoft Docs","pos":[0,34]}]},{"content":"modulus (STL/CLR)","pos":[620,637]},{"content":"The template class describes a functor that, when called, returns the first argument modulo the second.","pos":[638,741]},{"content":"You use it specify a function object in terms of its argument type.","pos":[742,809]},{"content":"Syntax","pos":[818,824]},{"content":"Parameters","pos":[1390,1400]},{"content":"Arg","pos":[1404,1407]},{"content":"The type of the arguments and return value.","pos":[1411,1454]},{"content":"Member Functions","pos":[1463,1479]},{"content":"Type Definition","pos":[1486,1501]},{"content":"Description","pos":[1502,1513]},{"content":"delegate_type","pos":[1562,1575]},{"content":"The type of the generic delegate.","pos":[1576,1609]},{"content":"first_argument_type","pos":[1614,1633]},{"content":"The type of the functor first argument.","pos":[1634,1673]},{"content":"result_type","pos":[1678,1689]},{"content":"The type of the functor result.","pos":[1690,1721]},{"content":"second_argument_type","pos":[1726,1746]},{"content":"The type of the functor second argument.","pos":[1747,1787]},{"content":"Member","pos":[1795,1801]},{"content":"Description","pos":[1802,1813]},{"content":"modulus","pos":[1853,1860]},{"content":"Constructs the functor.","pos":[1861,1884]},{"content":"Operator","pos":[1892,1900]},{"content":"Description","pos":[1901,1912]},{"content":"operator()","pos":[1954,1964]},{"content":"Computes the desired function.","pos":[1965,1995]},{"content":"operator delegate_type^","pos":[2000,2023]},{"content":"Casts the functor to a delegate.","pos":[2024,2056]},{"content":"Remarks","pos":[2066,2073]},{"content":"The template class describes a two-argument functor.","pos":[2077,2129]},{"content":"It defines the member operator <ph id=\"ph1\">`operator()`</ph> so that, when the object is called as a function, it returns the first argument modulo the second.","pos":[2130,2272],"source":" It defines the member operator `operator()` so that, when the object is called as a function, it returns the first argument modulo the second."},{"pos":[2279,2401],"content":"You can also pass the object as a function argument whose type is <ph id=\"ph1\">`delegate_type^`</ph> and it will be converted appropriately.","source":"You can also pass the object as a function argument whose type is `delegate_type^` and it will be converted appropriately."},{"content":"Example","pos":[2410,2417]},{"content":"Requirements","pos":[3436,3448]},{"pos":[3452,3484],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/functional&gt;","source":"**Header:** \\<cliext/functional>"},{"pos":[3491,3512],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[3521,3529]},{"content":"divides (STL/CLR)","pos":[3534,3551]},{"content":"multiplies (STL/CLR)","pos":[3588,3608]}],"content":"---\ntitle: \"modulus (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::modulus\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"modulus function [STL/CLR]\"\nms.assetid: 49907edd-6e32-4c81-8ef2-e9c6f512437f\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# modulus (STL/CLR)\nThe template class describes a functor that, when called, returns the first argument modulo the second. You use it specify a function object in terms of its argument type.  \n  \n## Syntax  \n  \n```  \ntemplate<typename Arg>  \n    ref class modulus  \n    { // wrap operator()  \npublic:  \n    typedef Arg first_argument_type;  \n    typedef Arg second_argument_type;  \n    typedef Arg result_type;  \n    typedef Microsoft::VisualC::StlClr::BinaryDelegate<  \n        first_argument_type, second_argument_type, result_type>  \n        delegate_type;  \n  \n    modulus();  \n    modulus(modulus<Arg>% right);  \n  \n    result_type operator()(first_argument_type left,  \n        second_argument_type right);  \n    operator delegate_type^();  \n    };  \n```  \n  \n#### Parameters  \n Arg  \n The type of the arguments and return value.  \n  \n## Member Functions  \n  \n|Type Definition|Description|  \n|---------------------|-----------------|  \n|delegate_type|The type of the generic delegate.|  \n|first_argument_type|The type of the functor first argument.|  \n|result_type|The type of the functor result.|  \n|second_argument_type|The type of the functor second argument.|  \n  \n|Member|Description|  \n|------------|-----------------|  \n|modulus|Constructs the functor.|  \n  \n|Operator|Description|  \n|--------------|-----------------|  \n|operator()|Computes the desired function.|  \n|operator delegate_type^|Casts the functor to a delegate.|  \n  \n## Remarks  \n The template class describes a two-argument functor. It defines the member operator `operator()` so that, when the object is called as a function, it returns the first argument modulo the second.  \n  \n You can also pass the object as a function argument whose type is `delegate_type^` and it will be converted appropriately.  \n  \n## Example  \n  \n```  \n// cliext_modulus.cpp   \n// compile with: /clr   \n#include <cliext/algorithm>   \n#include <cliext/functional>   \n#include <cliext/vector>   \n  \ntypedef cliext::vector<int> Myvector;   \nint main()   \n    {   \n    Myvector c1;   \n    c1.push_back(4);   \n    c1.push_back(2);   \n    Myvector c2;   \n    c2.push_back(3);   \n    c2.push_back(1);   \n    Myvector c3(2, 0);   \n  \n// display initial contents \" 4 2\" and \" 3 1\"   \n    for each (int elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n    for each (int elem in c2)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// transform and display   \n    cliext::transform(c1.begin(), c1.begin() + 2,   \n        c2.begin(), c3.begin(), cliext::modulus<int>());   \n    for each (int elem in c3)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n4 2  \n3 1  \n1 0  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/functional>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [divides (STL/CLR)](../dotnet/divides-stl-clr.md)   \n [multiplies (STL/CLR)](../dotnet/multiplies-stl-clr.md)"}