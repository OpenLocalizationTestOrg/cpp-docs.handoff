<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e742e7490a049dd6c0fd6e5b496c4fffd88aa599</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\memory-management-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e4ce3ee5529b9fad07052517751b0ab5c768e96</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">386e6a03bf7df1d08c8cf797d90012ea1d47e06e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Memory Management Functions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Memory Management Functions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This document describes the memory management functions that the Concurrency Runtime provides to help you allocate and free memory in a concurrent manner.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The Concurrency Runtime provides a default scheduler, and therefore you are not required to create one in your application.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Because the Task Scheduler helps you fine-tune the performance of your applications, we recommend that you start with the <bpt id="p1">[</bpt>Parallel Patterns Library (PPL)<ept id="p1">](../../parallel/concrt/parallel-patterns-library-ppl.md)</ept> or the <bpt id="p2">[</bpt>Asynchronous Agents Library<ept id="p2">](../../parallel/concrt/asynchronous-agents-library.md)</ept> if you are new to the Concurrency Runtime.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The Concurrency Runtime provides two memory management functions that are optimized for allocating and freeing blocks of memory in a concurrent manner.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>concurrency::Alloc<ept id="p1">](reference/concurrency-namespace-functions.md#alloc)</ept> function allocates a block of memory by using the specified size.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>concurrency::Free<ept id="p1">](reference/concurrency-namespace-functions.md#free)</ept> function frees the memory that was allocated by <ph id="ph1">`Alloc`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Alloc`</ph> and <ph id="ph2">`Free`</ph> functions rely on each other.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`Free`</ph> function only to release memory that you allocate by using the <ph id="ph2">`Alloc`</ph> function.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Also, when you use the <ph id="ph1">`Alloc`</ph> function to allocate memory, use only the <ph id="ph2">`Free`</ph> function to release that memory.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`Alloc`</ph> and <ph id="ph2">`Free`</ph> functions when you allocate and free a fixed set of allocation sizes from different threads or tasks.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The Concurrency Runtime caches memory that it allocates from the C Runtime heap.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The Concurrency Runtime holds a separate memory cache for each running thread; therefore, the runtime manages memory without the use of locks or memory barriers.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>An application benefits more from the <ph id="ph1">`Alloc`</ph> and <ph id="ph2">`Free`</ph> functions when the memory cache is accessed more frequently.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, a thread that frequently calls both <ph id="ph1">`Alloc`</ph> and <ph id="ph2">`Free`</ph> benefits more than a thread that primarily calls <ph id="ph3">`Alloc`</ph> or <ph id="ph4">`Free`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When you use these memory management functions, and your application uses lots of memory, the application may enter a low-memory condition sooner than you expect.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Because the memory blocks that are cached by one thread are not available to any other thread, if one thread holds lots of memory, that memory is not available.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For an example that uses the <ph id="ph1">`Alloc`</ph> and <ph id="ph2">`Free`</ph> functions to improve memory performance, see <bpt id="p1">[</bpt>How to: Use Alloc and Free to Improve Memory Performance<ept id="p1">](../../parallel/concrt/how-to-use-alloc-and-free-to-improve-memory-performance.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Task Scheduler</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>How to: Use Alloc and Free to Improve Memory Performance</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>