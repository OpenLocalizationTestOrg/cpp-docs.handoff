{"nodes":[{"pos":[12,45],"content":"is_base_of Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"is_base_of Class | Microsoft Docs","pos":[0,33]}]},{"pos":[754,770],"content":"is_base_of Class","linkify":"is_base_of Class","nodes":[{"content":"is_base_of Class","pos":[0,16]}]},{"content":"Tests whether one type is base of another.","pos":[771,813]},{"pos":[822,828],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[914,924],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The base class to test for.","pos":[938,965]},{"content":"The derived type to test for.","pos":[985,1014]},{"pos":[1023,1030],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1034,1162],"content":"An instance of the type predicate holds true if the type <ph id=\"ph1\">`Base`</ph> is a base class of the type <ph id=\"ph2\">`Derived`</ph>, otherwise it holds false.","source":"An instance of the type predicate holds true if the type `Base` is a base class of the type `Derived`, otherwise it holds false."},{"pos":[1171,1178],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1959,1971],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[1975,2000],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> &lt;type_traits&gt;","source":"**Header:** <type_traits>"},{"pos":[2007,2025],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[2034,2042],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>&lt;type_traits&gt;<ept id=\"p1\">](../standard-library/type-traits.md)</ept><ph id=\"ph1\"> </ph>","pos":[2046,2098],"source":"[<type_traits>](../standard-library/type-traits.md) "},{"content":"<bpt id=\"p1\"> [</bpt>is_convertible Class<ept id=\"p1\">](../standard-library/is-convertible-class.md)</ept>","pos":[2101,2169],"source":" [is_convertible Class](../standard-library/is-convertible-class.md)"}],"content":"---\ntitle: \"is_base_of Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.tr1.is_base_of\"\n  - \"is_base_of\"\n  - \"std::tr1::is_base_of\"\n  - \"std.is_base_of\"\n  - \"std::is_base_of\"\n  - \"type_traits/std::is_base_of\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"is_base_of class [TR1]\"\n  - \"is_base_of\"\nms.assetid: 436f6213-1d4c-4ffc-a588-fc7c4887dd86\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# is_base_of Class\nTests whether one type is base of another.  \n  \n## Syntax  \n  \n```  \ntemplate <class Base, class Derived>  \nstruct is_base_of;  \n```  \n  \n#### Parameters  \n `Base`  \n The base class to test for.  \n  \n `Derived`  \n The derived type to test for.  \n  \n## Remarks  \n An instance of the type predicate holds true if the type `Base` is a base class of the type `Derived`, otherwise it holds false.  \n  \n## Example  \n  \n```cpp  \n  \n#include <type_traits>   \n#include <iostream>   \n  \nstruct base   \n    {   \n    int val;   \n    };   \n  \nstruct derived   \n    : public base   \n    {   \n    };   \n  \nint main()   \n    {   \n    std::cout << \"is_base_of<base, base> == \" << std::boolalpha   \n        << std::is_base_of<base, base>::value << std::endl;   \n    std::cout << \"is_base_of<base, derived> == \" << std::boolalpha   \n        << std::is_base_of<base, derived>::value << std::endl;   \n    std::cout << \"is_base_of<derived, base> == \" << std::boolalpha   \n        << std::is_base_of<derived, base>::value << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \nis_base_of<base, base> == true  \nis_base_of<base, derived> == true  \nis_base_of<derived, base> == false  \n```  \n  \n## Requirements  \n **Header:** <type_traits>  \n  \n **Namespace:** std  \n  \n## See Also  \n [<type_traits>](../standard-library/type-traits.md)   \n [is_convertible Class](../standard-library/is-convertible-class.md)\n"}