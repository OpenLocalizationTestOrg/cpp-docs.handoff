{"nodes":[{"pos":[12,37],"content":"restrict | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"restrict | Microsoft Docs","pos":[0,25]}]},{"content":"restrict","pos":[673,681]},{"content":"Microsoft Specific","pos":[684,702]},{"content":"Applied to a function declaration or definition that returns a pointer type and tells the compiler that the function returns an object that will not be aliased with any other pointers.","pos":[711,895]},{"content":"Syntax","pos":[904,910]},{"content":"Remarks","pos":[974,981]},{"content":"The compiler will propagate <ph id=\"ph1\">`__declspec(restrict)`</ph>.","pos":[985,1036],"source":"The compiler will propagate `__declspec(restrict)`."},{"content":"For example, the CRT <ph id=\"ph1\">`malloc`</ph> function is decorated with <ph id=\"ph2\">`__declspec(restrict)`</ph> and therefore, pointers initialized to memory locations with <ph id=\"ph3\">`malloc`</ph> are also implied to not be aliased.","pos":[1037,1222],"source":" For example, the CRT `malloc` function is decorated with `__declspec(restrict)` and therefore, pointers initialized to memory locations with `malloc` are also implied to not be aliased."},{"content":"The compiler does not check that the pointer is actually not aliased.","pos":[1229,1298]},{"content":"It is the developer's responsibility to ensure the program does not alias a pointer marked with the <ph id=\"ph1\">`restrict __declspec`</ph> modifier.","pos":[1299,1430],"source":" It is the developer's responsibility to ensure the program does not alias a pointer marked with the `restrict __declspec` modifier."},{"pos":[1437,1520],"content":"For similar semantics on variables, see <bpt id=\"p1\">[</bpt>__restrict<ept id=\"p1\">](../cpp/extension-restrict.md)</ept>.","source":"For similar semantics on variables, see [__restrict](../cpp/extension-restrict.md)."},{"content":"Example","pos":[1529,1536]},{"pos":[1540,1605],"content":"See <bpt id=\"p1\">[</bpt>noalias<ept id=\"p1\">](../cpp/noalias.md)</ept> for an example using <ph id=\"ph1\">`restrict`</ph>.","source":"See [noalias](../cpp/noalias.md) for an example using `restrict`."},{"pos":[1612,1733],"content":"For information about the restrict keyword that is part of C++ AMP, see <bpt id=\"p1\">[</bpt>restrict (C++ AMP)<ept id=\"p1\">](../cpp/restrict-cpp-amp.md)</ept>.","source":"For information about the restrict keyword that is part of C++ AMP, see [restrict (C++ AMP)](../cpp/restrict-cpp-amp.md)."},{"content":"END Microsoft Specific","pos":[1742,1764]},{"content":"See Also","pos":[1775,1783]},{"content":"__declspec","pos":[1788,1798]},{"content":"Keywords","pos":[1825,1833]}],"content":"---\ntitle: \"restrict | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"restrict\"\n  - \"restrict_cpp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"__declspec keyword [C++], restrict\"\n  - \"restrict __declspec keyword\"\nms.assetid: f39cf632-68d8-4362-a497-2d4c15693689\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# restrict\n**Microsoft Specific**  \n  \n Applied to a function declaration or definition that returns a pointer type and tells the compiler that the function returns an object that will not be aliased with any other pointers.  \n  \n## Syntax  \n  \n```  \n__declspec(restrict) return_type f();  \n```  \n  \n## Remarks  \n The compiler will propagate `__declspec(restrict)`. For example, the CRT `malloc` function is decorated with `__declspec(restrict)` and therefore, pointers initialized to memory locations with `malloc` are also implied to not be aliased.  \n  \n The compiler does not check that the pointer is actually not aliased. It is the developer's responsibility to ensure the program does not alias a pointer marked with the `restrict __declspec` modifier.  \n  \n For similar semantics on variables, see [__restrict](../cpp/extension-restrict.md).  \n  \n## Example  \n See [noalias](../cpp/noalias.md) for an example using `restrict`.  \n  \n For information about the restrict keyword that is part of C++ AMP, see [restrict (C++ AMP)](../cpp/restrict-cpp-amp.md).  \n  \n **END Microsoft Specific**  \n  \n## See Also  \n [__declspec](../cpp/declspec.md)   \n [Keywords](../cpp/keywords-cpp.md)"}