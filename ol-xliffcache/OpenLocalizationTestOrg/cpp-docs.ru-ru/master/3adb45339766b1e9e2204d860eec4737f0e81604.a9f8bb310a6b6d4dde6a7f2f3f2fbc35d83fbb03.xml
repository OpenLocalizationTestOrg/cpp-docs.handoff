{"nodes":[{"pos":[12,79],"content":"vprintf_s, _vprintf_s_l, vwprintf_s, _vwprintf_s_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"vprintf_s, _vprintf_s_l, vwprintf_s, _vwprintf_s_l | Microsoft Docs","pos":[0,67]}]},{"content":"vprintf_s, _vprintf_s_l, vwprintf_s, _vwprintf_s_l","pos":[1282,1332]},{"content":"Writes formatted output by using a pointer to a list of arguments.","pos":[1333,1399]},{"content":"These versions of <bpt id=\"p1\">[</bpt>vprintf, _vprintf_l, vwprintf, _vwprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/vprintf-vprintf-l-vwprintf-vwprintf-l.md)</ept> have security enhancements, as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1400,1671],"source":" These versions of [vprintf, _vprintf_l, vwprintf, _vwprintf_l](../../c-runtime-library/reference/vprintf-vprintf-l-vwprintf-vwprintf-l.md) have security enhancements, as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"content":"Syntax","pos":[1680,1686]},{"content":"Parameters","pos":[2042,2052]},{"content":"Format specification.","pos":[2068,2089]},{"content":"Pointer to list of arguments.","pos":[2108,2137]},{"content":"The locale to use.","pos":[2156,2174]},{"pos":[2181,2316],"content":"For more information, see <bpt id=\"p1\">[</bpt>Format Specifications<ept id=\"p1\">](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)</ept>.","source":"For more information, see [Format Specifications](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)."},{"content":"Return Value","pos":[2325,2337]},{"content":"and <ph id=\"ph1\">`vwprintf_s`</ph> return the number of characters written, not including the terminating null character, or a negative value if an output error occurs.","pos":[2353,2503],"source":" and `vwprintf_s` return the number of characters written, not including the terminating null character, or a negative value if an output error occurs."},{"content":"If <ph id=\"ph1\">`format`</ph> is a null pointer, or if the format string contains invalid formatting characters, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2504,2729],"source":" If `format` is a null pointer, or if the format string contains invalid formatting characters, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, the functions return -1 and set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph>.","pos":[2730,2819],"source":" If execution is allowed to continue, the functions return -1 and set `errno` to `EINVAL`."},{"pos":[2826,2994],"content":"For information on these and other error codes, see <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For information on these and other error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"Remarks","pos":[3003,3010]},{"pos":[3014,3126],"content":"Each of these functions takes a pointer to an argument list, then formats and writes the given data to <ph id=\"ph1\">`stdout`</ph>.","source":"Each of these functions takes a pointer to an argument list, then formats and writes the given data to `stdout`."},{"pos":[3133,3308],"content":"The secure versions of these functions differ from <ph id=\"ph1\">`vprintf`</ph> and <ph id=\"ph2\">`vwprintf`</ph> only in that the secure versions check that the format string contains valid formatting characters.","source":"The secure versions of these functions differ from `vprintf` and `vwprintf` only in that the secure versions check that the format string contains valid formatting characters."},{"content":"is the wide-character version of <ph id=\"ph1\">`vprintf_s`</ph>; the two functions behave identically if the stream is opened in ANSI mode.","pos":[3328,3448],"source":" is the wide-character version of `vprintf_s`; the two functions behave identically if the stream is opened in ANSI mode."},{"content":"doesn't currently support output into a UNICODE stream.","pos":[3461,3516]},{"pos":[3523,3679],"content":"The versions of these functions with the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead of the current thread locale.","source":"The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale."},{"pos":[3687,3867],"content":"[!IMPORTANT]\n Ensure that `format` is not a user-defined string. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).","leadings":["","> "],"nodes":[{"content":" Ensure that `format` is not a user-defined string. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).","pos":[13,178],"nodes":[{"content":"Ensure that <ph id=\"ph1\">`format`</ph> is not a user-defined string.","pos":[1,51],"source":" Ensure that `format` is not a user-defined string."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Avoiding Buffer Overruns<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms717795)</ept>.","pos":[52,165],"source":" For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795)."}]}]},{"content":"Generic-Text Routine Mappings","pos":[3877,3906]},{"content":"TCHAR.H routine","pos":[3913,3928]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[3929,3957],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[3958,3971]},{"content":"_UNICODE defined","pos":[3972,3988]},{"content":"Requirements","pos":[4227,4239]},{"content":"Routine","pos":[4246,4253]},{"content":"Required header","pos":[4254,4269]},{"content":"Optional headers","pos":[4270,4286]},{"pos":[4365,4366],"content":","},{"content":"stdio.h&gt; and <ph id=\"ph1\">\\&lt;</ph>stdarg.h&gt;","pos":[4384,4408],"source":"stdio.h> and \\<stdarg.h>"},{"content":"varargs.h&gt;*","pos":[4411,4422],"source":"varargs.h>*"},{"pos":[4439,4440],"content":","},{"content":"stdio.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;, and <ph id=\"ph2\">\\&lt;</ph>stdarg.h&gt;","pos":[4459,4498],"source":"stdio.h> or \\<wchar.h>, and \\<stdarg.h>"},{"content":"varargs.h&gt;*","pos":[4501,4512],"source":"varargs.h>*"},{"content":"Required for UNIX V compatibility.","pos":[4523,4557]},{"content":"The console is not supported in <ph id=\"ph1\">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> apps.","pos":[4564,4677],"source":"The console is not supported in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps."},{"content":"The standard stream handles that are associated with the console—<ph id=\"ph1\">`stdin`</ph>, <ph id=\"ph2\">`stdout`</ph>, and <ph id=\"ph3\">`stderr`</ph>—must be redirected before C run-time functions can use them in <ph id=\"ph4\">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> apps.","pos":[4678,4919],"source":" The standard stream handles that are associated with the console—`stdin`, `stdout`, and `stderr`—must be redirected before C run-time functions can use them in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps."},{"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","pos":[4920,5024],"source":" For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":".NET Framework Equivalent","pos":[5033,5058]},{"content":"System::Console::Write","pos":[5063,5085]},{"content":"See Also","pos":[5163,5171]},{"content":"Stream I/O","pos":[5176,5186]},{"content":"vprintf Functions","pos":[5232,5249]},{"content":"fprintf, _fprintf_l, fwprintf, _fwprintf_l","pos":[5302,5344]},{"content":"printf, _printf_l, wprintf, _wprintf_l","pos":[5427,5465]},{"content":"sprintf, _sprintf_l, swprintf, _swprintf_l, <ph id=\"ph1\">\\_</ph>_swprintf_l","pos":[5544,5601],"source":"sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l"},{"content":"va_arg, va_copy, va_end, va_start","pos":[5695,5728]}],"content":"---\ntitle: \"vprintf_s, _vprintf_s_l, vwprintf_s, _vwprintf_s_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_vwprintf_s_l\"\n  - \"vwprintf_s\"\n  - \"_vprintf_s_l\"\n  - \"vprintf_s\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"vprintf_s\"\n  - \"vwprintf_s\"\n  - \"_vtprintf_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"vwprintf_s_l function\"\n  - \"_vwprintf_s_l function\"\n  - \"vwprintf_s function\"\n  - \"_vtprintf_s_l function\"\n  - \"vprintf_s_l function\"\n  - \"vtprintf_s_l function\"\n  - \"_vtprintf_s function\"\n  - \"vtprintf_s function\"\n  - \"_vprintf_s_l function\"\n  - \"formatted text [C++]\"\n  - \"vprintf_s function\"\nms.assetid: cf864996-a530-4b40-9c30-54c4cef439c8\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# vprintf_s, _vprintf_s_l, vwprintf_s, _vwprintf_s_l\nWrites formatted output by using a pointer to a list of arguments. These versions of [vprintf, _vprintf_l, vwprintf, _vwprintf_l](../../c-runtime-library/reference/vprintf-vprintf-l-vwprintf-vwprintf-l.md) have security enhancements, as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n## Syntax  \n  \n```  \nint vprintf_s(  \n   const char *format,  \n   va_list argptr   \n);  \nint _vprintf_s_l(  \n   const char *format,  \n   locale_t locale,  \n   va_list argptr   \n);  \nint vwprintf_s(  \n   const wchar_t *format,  \n   va_list argptr   \n);  \nint _vwprintf_s_l(  \n   const wchar_t *format,  \n   locale_t locale,  \n   va_list argptr   \n);  \n```  \n  \n#### Parameters  \n `format`  \n Format specification.  \n  \n `argptr`  \n Pointer to list of arguments.  \n  \n `locale`  \n The locale to use.  \n  \n For more information, see [Format Specifications](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md).  \n  \n## Return Value  \n `vprintf_s` and `vwprintf_s` return the number of characters written, not including the terminating null character, or a negative value if an output error occurs. If `format` is a null pointer, or if the format string contains invalid formatting characters, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, the functions return -1 and set `errno` to `EINVAL`.  \n  \n For information on these and other error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n Each of these functions takes a pointer to an argument list, then formats and writes the given data to `stdout`.  \n  \n The secure versions of these functions differ from `vprintf` and `vwprintf` only in that the secure versions check that the format string contains valid formatting characters.  \n  \n `vwprintf_s` is the wide-character version of `vprintf_s`; the two functions behave identically if the stream is opened in ANSI mode. `vprintf_s` doesn't currently support output into a UNICODE stream.  \n  \n The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale.  \n  \n> [!IMPORTANT]\n>  Ensure that `format` is not a user-defined string. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_vtprintf_s`|`vprintf_s`|`vprintf_s`|`vwprintf_s`|  \n|`_vtprintf_s_l`|`_vprintf_s_l`|`_vprintf_s_l`|`_vwprintf_s_l`|  \n  \n## Requirements  \n  \n|Routine|Required header|Optional headers|  \n|-------------|---------------------|----------------------|  \n|`vprintf_s`, `_vprintf_s_l`|\\<stdio.h> and \\<stdarg.h>|\\<varargs.h>*|  \n|`vwprintf_s`, `_vwprintf_s_l`|\\<stdio.h> or \\<wchar.h>, and \\<stdarg.h>|\\<varargs.h>*|  \n  \n \\* Required for UNIX V compatibility.  \n  \n The console is not supported in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps. The standard stream handles that are associated with the console—`stdin`, `stdout`, and `stderr`—must be redirected before C run-time functions can use them in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps. For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## .NET Framework Equivalent  \n [System::Console::Write](https://msdn.microsoft.com/en-us/library/system.console.write.aspx)  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [vprintf Functions](../../c-runtime-library/vprintf-functions.md)   \n [fprintf, _fprintf_l, fwprintf, _fwprintf_l](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)   \n [printf, _printf_l, wprintf, _wprintf_l](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)   \n [sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)   \n [va_arg, va_copy, va_end, va_start](../../c-runtime-library/reference/va-arg-va-copy-va-end-va-start.md)"}