<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e209fdbc0ca8f41cb3444b890986924857ecb261</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\address-of-operator-amp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fcbbf3354ce52a163a7778bef55146af365e4ec0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">12878f3ed011df05f949911367f43b5414ad65f7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Address-of Operator: <ph id="ph1">&amp;amp;</ph> | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Address-of Operator:</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The unary address-of operator (<bpt id="p1">**</bpt><ph id="ph1">&amp;</ph><ept id="p1">**</ept>) takes the address of its operand.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The operand of the address-of operator can be either a function designator or an l-value that designates an object that is not a bit field and is not declared with the <bpt id="p1">**</bpt>register<ept id="p1">**</ept> storage-class specifier.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The address-of operator can only be applied to variables with fundamental, structure, class, or union types that are declared at the file-scope level, or to subscripted array references.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In these expressions, a constant expression that does not include the address-of operator can be added to or subtracted from the address-of expression.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When applied to functions or l-values, the result of the expression is a pointer type (an r-value) derived from the type of the operand.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, if the operand is of type <ph id="ph1">`char`</ph>, the result of the expression is of type pointer to <ph id="ph2">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The address-of operator, applied to <bpt id="p1">**</bpt>const<ept id="p1">**</ept> or <ph id="ph1">`volatile`</ph> objects, evaluates to <bpt id="p2">**</bpt>const<ept id="p2">**</ept> <ph id="ph2">`type`</ph> <bpt id="p3">**</bpt><ph id="ph3">\*</ph><ept id="p3">**</ept> or <ph id="ph4">`volatile`</ph> <ph id="ph5">`type`</ph> <bpt id="p4">**</bpt><ph id="ph6">\*</ph><ept id="p4">**</ept>, where <ph id="ph7">`type`</ph> is the type of the original object.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When the address-of operator is applied to a <bpt id="p1">[</bpt>qualified name<ept id="p1">](http://msdn.microsoft.com/en-us/3fefb16d-8120-4627-8b3f-3d90fbdcd1df)</ept>, the result depends on whether the <bpt id="p2">*</bpt>qualified-name<ept id="p2">*</ept> specifies a static member.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If so, the result is a pointer to the type specified in the declaration of the member.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If the member is not static, the result is a pointer to the member <bpt id="p1">*</bpt>name<ept id="p1">*</ept> of the class indicated by <bpt id="p2">*</bpt>qualified-class-name<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>(See <bpt id="p1">[</bpt>Primary Expressions<ept id="p1">](../cpp/primary-expressions.md)</ept> for more about <bpt id="p2">*</bpt>qualified-class-name<ept id="p2">*</ept>.) The following code fragment shows how the result differs, depending on whether the member is static:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In this example, the expression <ph id="ph1">`&amp;PTM::fValue`</ph> yields type <ph id="ph2">`float *`</ph> instead of type <ph id="ph3">`float PTM::*`</ph> because <ph id="ph4">`fValue`</ph> is a static member.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The address of an overloaded function can be taken only when it is clear which version of the function is being referenced.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Function Overloading<ept id="p1">](function-overloading.md)</ept> for information about how to obtain the address of a particular overloaded function.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Applying the address-of operator to a reference type gives the same result as applying the operator to the object to which the reference is bound.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following example uses the address-of operator to pass a pointer argument to a function:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Expressions with Unary Operators</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>C++ Built-in Operators, Precedence and Associativity</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Lvalue Reference Declarator: &amp;</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Indirection and Address-of Operators</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>