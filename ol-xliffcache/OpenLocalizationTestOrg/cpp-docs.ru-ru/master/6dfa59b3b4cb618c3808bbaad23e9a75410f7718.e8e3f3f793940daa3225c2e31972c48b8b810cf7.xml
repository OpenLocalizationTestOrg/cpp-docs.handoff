{"nodes":[{"pos":[12,42],"content":"_get_timezone | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_get_timezone | Microsoft Docs","pos":[0,30]}]},{"pos":[1018,1031],"content":"_get_timezone","linkify":"_get_timezone","nodes":[{"content":"_get_timezone","pos":[0,13]}]},{"content":"Retrieves the difference in seconds between coordinated universal time (UTC) and local time.","pos":[1032,1124]},{"pos":[1133,1139],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1225,1235],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The difference in seconds between UTC and local time.","pos":[1252,1305]},{"pos":[1314,1326],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[1330,1388],"content":"Zero if successful or an <ph id=\"ph1\">`errno`</ph> value if an error occurs.","source":"Zero if successful or an `errno` value if an error occurs."},{"pos":[1397,1404],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_get_timezone`</ph> function retrieves the difference in seconds between UTC and local time as an integer.","pos":[1408,1514],"source":"The `_get_timezone` function retrieves the difference in seconds between UTC and local time as an integer."},{"content":"The default value is 28,800 seconds, for Pacific Standard Time (eight hours behind UTC).","pos":[1515,1603]},{"content":"If <ph id=\"ph1\">`seconds`</ph> is <ph id=\"ph2\">`NULL`</ph>, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[1610,1764],"source":"If `seconds` is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, this function sets <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and returns <ph id=\"ph3\">`EINVAL`</ph>.","pos":[1765,1862],"source":" If execution is allowed to continue, this function sets `errno` to `EINVAL` and returns `EINVAL`."},{"pos":[1871,1883],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[1890,1897]},{"content":"Required header","pos":[1898,1913]},{"content":"<ph id=\"ph1\">\\&lt;</ph>time.h&gt;","pos":[1974,1983],"source":"\\<time.h>"},{"pos":[1991,2075],"content":"For more information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For more information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"pos":[2084,2109],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[2113,2128]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[2129,2176],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[2177,2302],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[2311,2319],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Time Management<ept id=\"p1\">](../../c-runtime-library/time-management.md)</ept><ph id=\"ph1\"> </ph>","pos":[2323,2385],"source":"[Time Management](../../c-runtime-library/time-management.md) "},{"content":"<bpt id=\"p1\"> [</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept><ph id=\"ph1\"> </ph>","pos":[2388,2505],"source":" [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_get_daylight<ept id=\"p1\">](../../c-runtime-library/reference/get-daylight.md)</ept><ph id=\"ph1\"> </ph>","pos":[2508,2576],"source":" [_get_daylight](../../c-runtime-library/reference/get-daylight.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_get_dstbias<ept id=\"p1\">](../../c-runtime-library/reference/get-dstbias.md)</ept><ph id=\"ph1\"> </ph>","pos":[2579,2645],"source":" [_get_dstbias](../../c-runtime-library/reference/get-dstbias.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_get_tzname<ept id=\"p1\">](../../c-runtime-library/reference/get-tzname.md)</ept>","pos":[2648,2711],"source":" [_get_tzname](../../c-runtime-library/reference/get-tzname.md)"}],"content":"---\ntitle: \"_get_timezone | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_get_timezone\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-time-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_get_timezone\"\n  - \"get_timezone\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"time zones\"\n  - \"get_timezone function\"\n  - \"_get_timezone function\"\nms.assetid: 30ab0838-0ae9-4a2f-bfe6-a49ee443b21e\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# _get_timezone\nRetrieves the difference in seconds between coordinated universal time (UTC) and local time.  \n  \n## Syntax  \n  \n```  \n  \n      error_t _get_timezone(   \n    long* seconds  \n);  \n```  \n  \n#### Parameters  \n `seconds`  \n The difference in seconds between UTC and local time.  \n  \n## Return Value  \n Zero if successful or an `errno` value if an error occurs.  \n  \n## Remarks  \n The `_get_timezone` function retrieves the difference in seconds between UTC and local time as an integer. The default value is 28,800 seconds, for Pacific Standard Time (eight hours behind UTC).  \n  \n If `seconds` is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, this function sets `errno` to `EINVAL` and returns `EINVAL`.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_get_timezone`|\\<time.h>|  \n  \n For more information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Time Management](../../c-runtime-library/time-management.md)   \n [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)   \n [_get_daylight](../../c-runtime-library/reference/get-daylight.md)   \n [_get_dstbias](../../c-runtime-library/reference/get-dstbias.md)   \n [_get_tzname](../../c-runtime-library/reference/get-tzname.md)"}