{"nodes":[{"pos":[12,48],"content":"binary_negate Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"binary_negate Class | Microsoft Docs","pos":[0,36]}]},{"content":"binary_negate Class","pos":[697,716]},{"content":"A template class providing a member function that negates the return value of a specified binary function.","pos":[717,823]},{"content":"Syntax","pos":[832,838]},{"content":"Parameters","pos":[1280,1290]},{"content":"The binary function to be negated.","pos":[1304,1338]},{"content":"The left operand of the binary function to be negated.","pos":[1355,1409]},{"content":"The right operand of the binary function to be negated.","pos":[1427,1482]},{"content":"Return Value","pos":[1491,1503]},{"content":"The negation of the binary function.","pos":[1507,1543]},{"content":"Remarks","pos":[1552,1559]},{"content":"The template class stores a copy of a binary function object _ <bpt id=\"p1\">*</bpt>Func<ept id=\"p1\">*</ept>.","pos":[1563,1633],"source":"The template class stores a copy of a binary function object _ *Func*."},{"content":"It defines its member function <ph id=\"ph1\">`operator()`</ph> as returning <bpt id=\"p1\">**</bpt>!<ept id=\"p1\">**</ept>","pos":[1634,1696],"source":" It defines its member function `operator()` as returning **!**"},{"content":"Func(left, right).","pos":[1700,1718]},{"content":"The constructor of <ph id=\"ph1\">`binary_negate`</ph> is rarely used directly.","pos":[1726,1785],"source":"The constructor of `binary_negate` is rarely used directly."},{"content":"The helper function <bpt id=\"p1\">[</bpt>not2<ept id=\"p1\">](../standard-library/functional-functions.md#not2_function)</ept> is usually preferred to declare and use the <bpt id=\"p2\">**</bpt>binary_negator<ept id=\"p2\">**</ept> adaptor predicate.","pos":[1786,1953],"source":" The helper function [not2](../standard-library/functional-functions.md#not2_function) is usually preferred to declare and use the **binary_negator** adaptor predicate."},{"content":"Example","pos":[1962,1969]},{"content":"Requirements","pos":[3827,3839]},{"pos":[3843,3868],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>functional&gt;","source":"**Header:** \\<functional>"},{"content":"std","pos":[3875,3878]},{"content":"See Also","pos":[3887,3895]},{"content":"Thread Safety in the C++ Standard Library","pos":[3900,3941]},{"content":"C++ Standard Library Reference","pos":[4014,4044]}],"content":"---\ntitle: \"binary_negate Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"xfunctional/std::binary_negate\"\n  - \"std::binary_negate\"\n  - \"binary_negate\"\n  - \"std.binary_negate\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"binary_negate class\"\nms.assetid: 7b86f02c-af7e-4c7f-9df1-08addae4dd65\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# binary_negate Class\nA template class providing a member function that negates the return value of a specified binary function.  \n  \n## Syntax  \n  \n```\ntemplate <class Operation>\nclass binary_negate\n    : public binaryFunction <typename Operation::first_argument_type,\n                              typename Operation::second_argument_type, bool>\n{\npublic:    \n    explicit binary_negate(const Operation& Func);\n    bool operator()(const typename Operation::first_argument_type& left,\n                    const typename Operation::second_argument_type& right) const;\n};\n```  \n  \n#### Parameters  \n `Func`  \n The binary function to be negated.  \n  \n `left`  \n The left operand of the binary function to be negated.  \n  \n `right`  \n The right operand of the binary function to be negated.  \n  \n## Return Value  \n The negation of the binary function.  \n  \n## Remarks  \n The template class stores a copy of a binary function object _ *Func*. It defines its member function `operator()` as returning **!**\\_ *Func(left, right).*  \n  \n The constructor of `binary_negate` is rarely used directly. The helper function [not2](../standard-library/functional-functions.md#not2_function) is usually preferred to declare and use the **binary_negator** adaptor predicate.  \n  \n## Example  \n  \n```cpp  \n// functional_binary_negate.cpp  \n// compile with: /EHsc  \n#define _CRT_RAND_S  \n#include <stdlib.h>  \n  \n#include <vector>  \n#include <algorithm>  \n#include <functional>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   vector <unsigned int> v1;  \n   vector <unsigned int>::iterator Iter1;  \n  \n   unsigned int i;  \n   v1.push_back( 6262 );  \n   v1.push_back( 6262 );  \n   unsigned int randVal = 0;  \n   for ( i = 0 ; i < 5 ; i++ )  \n   {  \n      rand_s(&randVal);  \n      v1.push_back( randVal );  \n   }  \n  \n   cout << \"Original vector v1 = ( \" ;  \n   for ( Iter1 = v1.begin( ) ; Iter1 != v1.end( ) ; Iter1++ )  \n      cout << *Iter1 << \" \";  \n   cout << \")\" << endl;  \n  \n   // To sort in ascending order,  \n   // use default binary predicate less<unsigned int>( )  \n   sort( v1.begin( ), v1.end( ) );  \n   cout << \"Sorted vector v1 = ( \" ;  \n   for ( Iter1 = v1.begin( ) ; Iter1 != v1.end( ) ; Iter1++ )  \n      cout << *Iter1 << \" \";  \n   cout << \")\" << endl;  \n  \n   // To sort in descending order,  \n   // use the binary_negate function  \n   sort( v1.begin( ), v1.end( ),  \n   binary_negate<less<unsigned int> >(less<unsigned int>( ) ) );  \n  \n   // The helper function not2 could also have been used  \n   // in the above line and is usually preferred for convenience  \n   // sort( v1.begin( ), v1.end( ), not2(less<unsigned int>( ) ) );  \n  \n   cout << \"Resorted vector v1 = ( \" ;  \n   for ( Iter1 = v1.begin( ) ; Iter1 != v1.end( ) ; Iter1++ )  \n      cout << *Iter1 << \" \";  \n   cout << \")\" << endl;  \n}  \n\\* Output:   \nOriginal vector v1 = ( 6262 6262 2233879413 2621500314 580942933 3715465425 3739828298 )  \nSorted vector v1 = ( 6262 6262 580942933 2233879413 2621500314 3715465425 3739828298 )  \nResorted vector v1 = ( 3739828298 3715465425 2621500314 2233879413 580942933 6262 6262 )  \n*\\  \n```  \n  \n## Requirements  \n **Header:** \\<functional>  \n  \n std  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}