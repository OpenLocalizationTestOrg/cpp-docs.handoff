{"nodes":[{"pos":[12,56],"content":"CComSingleThreadModel Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CComSingleThreadModel Class | Microsoft Docs","pos":[0,44]}]},{"content":"CComSingleThreadModel Class","pos":[777,804]},{"content":"This class provides methods for incrementing and decrementing the value of a variable.","pos":[805,891]},{"content":"Syntax","pos":[900,906]},{"content":"Members","pos":[956,963]},{"content":"Public Typedefs","pos":[973,988]},{"content":"Name","pos":[995,999]},{"content":"Description","pos":[1000,1011]},{"content":"CComSingleThreadModel::AutoCriticalSection","pos":[1050,1092]},{"pos":[1139,1236],"content":"References class <bpt id=\"p1\">[</bpt>CComFakeCriticalSection<ept id=\"p1\">](../../atl/reference/ccomfakecriticalsection-class.md)</ept>.","source":"References class [CComFakeCriticalSection](../../atl/reference/ccomfakecriticalsection-class.md)."},{"content":"CComSingleThreadModel::CriticalSection","pos":[1242,1280]},{"pos":[1323,1366],"content":"References class <ph id=\"ph1\">`CComFakeCriticalSection`</ph>.","source":"References class `CComFakeCriticalSection`."},{"content":"CComSingleThreadModel::ThreadModelNoCS","pos":[1372,1410]},{"pos":[1453,1488],"content":"References <ph id=\"ph1\">`CComSingleThreadModel`</ph>.","source":"References `CComSingleThreadModel`."},{"content":"Public Methods","pos":[1499,1513]},{"content":"Name","pos":[1520,1524]},{"content":"Description","pos":[1525,1536]},{"content":"CComSingleThreadModel::Decrement","pos":[1575,1607]},{"content":"Decrements the value of the specified variable.","pos":[1644,1691]},{"content":"This implementation is not thread-safe.","pos":[1692,1731]},{"content":"CComSingleThreadModel::Increment","pos":[1737,1769]},{"content":"Increments the value of the specified variable.","pos":[1806,1853]},{"content":"This implementation is not thread-safe.","pos":[1854,1893]},{"content":"Remarks","pos":[1903,1910]},{"content":"provides methods for incrementing and decrementing the value of a variable.","pos":[1938,2013]},{"content":"Unlike <bpt id=\"p1\">[</bpt>CComMultiThreadModel<ept id=\"p1\">](../../atl/reference/ccommultithreadmodel-class.md)</ept> and <bpt id=\"p2\">[</bpt>CComMultiThreadModelNoCS<ept id=\"p2\">](../../atl/reference/ccommultithreadmodelnocs-class.md)</ept>, these methods are not thread-safe.","pos":[2014,2216],"source":" Unlike [CComMultiThreadModel](../../atl/reference/ccommultithreadmodel-class.md) and [CComMultiThreadModelNoCS](../../atl/reference/ccommultithreadmodelnocs-class.md), these methods are not thread-safe."},{"content":"Typically, you use <ph id=\"ph1\">`CComSingleThreadModel`</ph> through one of two <ph id=\"ph2\">`typedef`</ph> names, either <bpt id=\"p1\">[</bpt>CComObjectThreadModel<ept id=\"p1\">](atl-typedefs.md#ccomobjectthreadmodel)</ept> or <bpt id=\"p2\">[</bpt>CComGlobalsThreadModel<ept id=\"p2\">](atl-typedefs.md#ccomglobalsthreadmodel)</ept>.","pos":[2221,2438],"source":"Typically, you use `CComSingleThreadModel` through one of two `typedef` names, either [CComObjectThreadModel](atl-typedefs.md#ccomobjectthreadmodel) or [CComGlobalsThreadModel](atl-typedefs.md#ccomglobalsthreadmodel)."},{"content":"The class referenced by each <ph id=\"ph1\">`typedef`</ph> depends on the threading model used, as shown in the following table:","pos":[2439,2547],"source":" The class referenced by each `typedef` depends on the threading model used, as shown in the following table:"},{"content":"typedef","pos":[2555,2562]},{"content":"Single threading model","pos":[2563,2585]},{"content":"Apartment threading model","pos":[2586,2611]},{"content":"Free threading model","pos":[2612,2632]},{"content":"S","pos":[2767,2768]},{"content":"S","pos":[2769,2770]},{"content":"M","pos":[2771,2772]},{"content":"S","pos":[2802,2803]},{"content":"M","pos":[2804,2805]},{"content":"M","pos":[2806,2807]},{"pos":[2815,2845],"content":"S= <ph id=\"ph1\">`CComSingleThreadModel`</ph>; M=","source":"S= `CComSingleThreadModel`; M= "},{"content":"itself defines three <ph id=\"ph1\">`typedef`</ph> names.","pos":[2899,2936],"source":" itself defines three `typedef` names."},{"content":"references <ph id=\"ph1\">`CComSingleThreadModel`</ph>.","pos":[2955,2990],"source":" references `CComSingleThreadModel`."},{"content":"and <ph id=\"ph1\">`CriticalSection`</ph> reference class <bpt id=\"p1\">[</bpt>CComFakeCriticalSection<ept id=\"p1\">](../../atl/reference/ccomfakecriticalsection-class.md)</ept>, which provides empty methods associated with obtaining and releasing ownership of a critical section.","pos":[3013,3233],"source":" and `CriticalSection` reference class [CComFakeCriticalSection](../../atl/reference/ccomfakecriticalsection-class.md), which provides empty methods associated with obtaining and releasing ownership of a critical section."},{"content":"Requirements","pos":[3242,3254]},{"pos":[3258,3279],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlbase.h","source":"**Header:** atlbase.h"},{"pos":[3348,3390],"content":"CComSingleThreadModel::AutoCriticalSection"},{"pos":[3394,3568],"content":"When using <ph id=\"ph1\">`CComSingleThreadModel`</ph>, the <ph id=\"ph2\">`typedef`</ph> name <ph id=\"ph3\">`AutoCriticalSection`</ph> references class <bpt id=\"p1\">[</bpt>CComFakeCriticalSection<ept id=\"p1\">](../../atl/reference/ccomfakecriticalsection-class.md)</ept>.","source":"When using `CComSingleThreadModel`, the `typedef` name `AutoCriticalSection` references class [CComFakeCriticalSection](../../atl/reference/ccomfakecriticalsection-class.md)."},{"content":"Remarks","pos":[3644,3651]},{"pos":[3655,3749],"content":"Because <ph id=\"ph1\">`CComFakeCriticalSection`</ph> does not provide a critical section, its methods do nothing.","source":"Because `CComFakeCriticalSection` does not provide a critical section, its methods do nothing."},{"content":"<bpt id=\"p1\">[</bpt>CComMultiThreadModel<ept id=\"p1\">](../../atl/reference/ccommultithreadmodel-class.md)</ept> and <bpt id=\"p2\">[</bpt>CComMultiThreadModelNoCS<ept id=\"p2\">](../../atl/reference/ccommultithreadmodelnocs-class.md)</ept> contain definitions for <ph id=\"ph1\">`AutoCriticalSection`</ph>.","pos":[3756,3962],"source":"[CComMultiThreadModel](../../atl/reference/ccommultithreadmodel-class.md) and [CComMultiThreadModelNoCS](../../atl/reference/ccommultithreadmodelnocs-class.md) contain definitions for `AutoCriticalSection`."},{"content":"The following table shows the relationship between the threading model class and the critical section class referenced by <ph id=\"ph1\">`AutoCriticalSection`</ph>:","pos":[3963,4107],"source":" The following table shows the relationship between the threading model class and the critical section class referenced by `AutoCriticalSection`:"},{"content":"Class defined in","pos":[4114,4130]},{"content":"Class referenced","pos":[4131,4147]},{"content":"In addition to <ph id=\"ph1\">`AutoCriticalSection`</ph>, you can use the <ph id=\"ph2\">`typedef`</ph> name <bpt id=\"p1\">[</bpt>CriticalSection<ept id=\"p1\">](#ccomsinglethreadmodel__criticalsection)</ept>.","pos":[4369,4497],"source":"In addition to `AutoCriticalSection`, you can use the `typedef` name [CriticalSection](#ccomsinglethreadmodel__criticalsection)."},{"content":"You should not specify <ph id=\"ph1\">`AutoCriticalSection`</ph> in global objects or static class members if you want to eliminate the CRT startup code.","pos":[4498,4631],"source":" You should not specify `AutoCriticalSection` in global objects or static class members if you want to eliminate the CRT startup code."},{"content":"Example","pos":[4641,4648]},{"pos":[4652,4793],"content":"See <bpt id=\"p1\">[</bpt>CComMultiThreadModel::AutoCriticalSection<ept id=\"p1\">](../../atl/reference/ccommultithreadmodel-class.md#ccommultithreadmodel__autocriticalsection)</ept>.","source":"See [CComMultiThreadModel::AutoCriticalSection](../../atl/reference/ccommultithreadmodel-class.md#ccommultithreadmodel__autocriticalsection)."},{"pos":[4858,4896],"content":"CComSingleThreadModel::CriticalSection"},{"pos":[4900,5070],"content":"When using <ph id=\"ph1\">`CComSingleThreadModel`</ph>, the <ph id=\"ph2\">`typedef`</ph> name <ph id=\"ph3\">`CriticalSection`</ph> references class <bpt id=\"p1\">[</bpt>CComFakeCriticalSection<ept id=\"p1\">](../../atl/reference/ccomfakecriticalsection-class.md)</ept>.","source":"When using `CComSingleThreadModel`, the `typedef` name `CriticalSection` references class [CComFakeCriticalSection](../../atl/reference/ccomfakecriticalsection-class.md)."},{"content":"Remarks","pos":[5142,5149]},{"pos":[5153,5247],"content":"Because <ph id=\"ph1\">`CComFakeCriticalSection`</ph> does not provide a critical section, its methods do nothing.","source":"Because `CComFakeCriticalSection` does not provide a critical section, its methods do nothing."},{"content":"<bpt id=\"p1\">[</bpt>CComMultiThreadModel<ept id=\"p1\">](../../atl/reference/ccommultithreadmodel-class.md)</ept> and <bpt id=\"p2\">[</bpt>CComMultiThreadModelNoCS<ept id=\"p2\">](../../atl/reference/ccommultithreadmodelnocs-class.md)</ept> contain definitions for <ph id=\"ph1\">`CriticalSection`</ph>.","pos":[5254,5456],"source":"[CComMultiThreadModel](../../atl/reference/ccommultithreadmodel-class.md) and [CComMultiThreadModelNoCS](../../atl/reference/ccommultithreadmodelnocs-class.md) contain definitions for `CriticalSection`."},{"content":"The following table shows the relationship between the threading model class and the critical section class referenced by <ph id=\"ph1\">`CriticalSection`</ph>:","pos":[5457,5597],"source":" The following table shows the relationship between the threading model class and the critical section class referenced by `CriticalSection`:"},{"content":"Class defined in","pos":[5604,5620]},{"content":"Class referenced","pos":[5621,5637]},{"content":"In addition to <ph id=\"ph1\">`CriticalSection`</ph>, you can use the <ph id=\"ph2\">`typedef`</ph> name <bpt id=\"p1\">[</bpt>AutoCriticalSection<ept id=\"p1\">](#ccomsinglethreadmodel__autocriticalsection)</ept>.","pos":[5855,5987],"source":"In addition to `CriticalSection`, you can use the `typedef` name [AutoCriticalSection](#ccomsinglethreadmodel__autocriticalsection)."},{"content":"You should not specify <ph id=\"ph1\">`AutoCriticalSection`</ph> in global objects or static class members if you want to eliminate the CRT startup code.","pos":[5988,6121],"source":" You should not specify `AutoCriticalSection` in global objects or static class members if you want to eliminate the CRT startup code."},{"content":"Example","pos":[6131,6138]},{"pos":[6142,6283],"content":"See <bpt id=\"p1\">[</bpt>CComMultiThreadModel::AutoCriticalSection<ept id=\"p1\">](../../atl/reference/ccommultithreadmodel-class.md#ccommultithreadmodel__autocriticalsection)</ept>.","source":"See [CComMultiThreadModel::AutoCriticalSection](../../atl/reference/ccommultithreadmodel-class.md#ccommultithreadmodel__autocriticalsection)."},{"pos":[6342,6374],"content":"CComSingleThreadModel::Decrement"},{"pos":[6378,6454],"content":"This static function decrements the value of the variable pointed to by <ph id=\"ph1\">`p`</ph>.","source":"This static function decrements the value of the variable pointed to by `p`."},{"content":"Parameters","pos":[6526,6536]},{"content":"[in] Pointer to the variable to be decremented.","pos":[6547,6594]},{"content":"Return Value","pos":[6604,6616]},{"content":"The result of the decrement.","pos":[6620,6648]},{"pos":[6707,6739],"content":"CComSingleThreadModel::Increment"},{"pos":[6743,6819],"content":"This static function decrements the value of the variable pointed to by <ph id=\"ph1\">`p`</ph>.","source":"This static function decrements the value of the variable pointed to by `p`."},{"content":"Parameters","pos":[6891,6901]},{"content":"[in] Pointer to the variable to be incremented.","pos":[6912,6959]},{"content":"Return Value","pos":[6969,6981]},{"content":"The result of the increment.","pos":[6985,7013]},{"pos":[7078,7116],"content":"CComSingleThreadModel::ThreadModelNoCS"},{"pos":[7120,7235],"content":"When using <ph id=\"ph1\">`CComSingleThreadModel`</ph>, the <ph id=\"ph2\">`typedef`</ph> name <ph id=\"ph3\">`ThreadModelNoCS`</ph> simply references <ph id=\"ph4\">`CComSingleThreadModel`</ph>.","source":"When using `CComSingleThreadModel`, the `typedef` name `ThreadModelNoCS` simply references `CComSingleThreadModel`."},{"content":"Remarks","pos":[7305,7312]},{"content":"<bpt id=\"p1\">[</bpt>CComMultiThreadModel<ept id=\"p1\">](../../atl/reference/ccommultithreadmodel-class.md)</ept> and <bpt id=\"p2\">[</bpt>CComMultiThreadModelNoCS<ept id=\"p2\">](../../atl/reference/ccommultithreadmodelnocs-class.md)</ept> contain definitions for <ph id=\"ph1\">`ThreadModelNoCS`</ph>.","pos":[7316,7518],"source":"[CComMultiThreadModel](../../atl/reference/ccommultithreadmodel-class.md) and [CComMultiThreadModelNoCS](../../atl/reference/ccommultithreadmodelnocs-class.md) contain definitions for `ThreadModelNoCS`."},{"content":"The following table shows the relationship between the threading model class and the class referenced by <ph id=\"ph1\">`ThreadModelNoCS`</ph>:","pos":[7519,7642],"source":" The following table shows the relationship between the threading model class and the class referenced by `ThreadModelNoCS`:"},{"content":"Class defined in","pos":[7649,7665]},{"content":"Class referenced","pos":[7666,7682]},{"content":"Example","pos":[7907,7914]},{"pos":[7918,8059],"content":"See <bpt id=\"p1\">[</bpt>CComMultiThreadModel::AutoCriticalSection<ept id=\"p1\">](../../atl/reference/ccommultithreadmodel-class.md#ccommultithreadmodel__autocriticalsection)</ept>.","source":"See [CComMultiThreadModel::AutoCriticalSection](../../atl/reference/ccommultithreadmodel-class.md#ccommultithreadmodel__autocriticalsection)."},{"content":"See Also","pos":[8068,8076]},{"content":"Class Overview","pos":[8081,8095]}],"content":"---\ntitle: \"CComSingleThreadModel Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL.CComSingleThreadModel\"\n  - \"CComSingleThreadModel\"\n  - \"ATL::CComSingleThreadModel\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"single-threaded applications\"\n  - \"CComSingleThreadModel class\"\n  - \"single-threaded applications, ATL\"\nms.assetid: e5dc30c7-405a-4ba4-8ae9-51937243fce8\ncaps.latest.revision: 19\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CComSingleThreadModel Class\nThis class provides methods for incrementing and decrementing the value of a variable.  \n  \n## Syntax  \n  \n```\nclass CComSingleThreadModel\n```  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComSingleThreadModel::AutoCriticalSection](#ccomsinglethreadmodel__autocriticalsection)|References class [CComFakeCriticalSection](../../atl/reference/ccomfakecriticalsection-class.md).|  \n|[CComSingleThreadModel::CriticalSection](#ccomsinglethreadmodel__criticalsection)|References class `CComFakeCriticalSection`.|  \n|[CComSingleThreadModel::ThreadModelNoCS](#ccomsinglethreadmodel__threadmodelnocs)|References `CComSingleThreadModel`.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComSingleThreadModel::Decrement](#ccomsinglethreadmodel__decrement)|Decrements the value of the specified variable. This implementation is not thread-safe.|  \n|[CComSingleThreadModel::Increment](#ccomsinglethreadmodel__increment)|Increments the value of the specified variable. This implementation is not thread-safe.|  \n  \n## Remarks  \n `CComSingleThreadModel` provides methods for incrementing and decrementing the value of a variable. Unlike [CComMultiThreadModel](../../atl/reference/ccommultithreadmodel-class.md) and [CComMultiThreadModelNoCS](../../atl/reference/ccommultithreadmodelnocs-class.md), these methods are not thread-safe.  \n\n Typically, you use `CComSingleThreadModel` through one of two `typedef` names, either [CComObjectThreadModel](atl-typedefs.md#ccomobjectthreadmodel) or [CComGlobalsThreadModel](atl-typedefs.md#ccomglobalsthreadmodel). The class referenced by each `typedef` depends on the threading model used, as shown in the following table:  \n\n  \n|typedef|Single threading model|Apartment threading model|Free threading model|  \n|-------------|----------------------------|-------------------------------|--------------------------|  \n|`CComObjectThreadModel`|S|S|M|  \n|`CComGlobalsThreadModel`|S|M|M|  \n  \n S= `CComSingleThreadModel`; M= `CComMultiThreadModel`  \n  \n `CComSingleThreadModel` itself defines three `typedef` names. `ThreadModelNoCS` references `CComSingleThreadModel`. `AutoCriticalSection` and `CriticalSection` reference class [CComFakeCriticalSection](../../atl/reference/ccomfakecriticalsection-class.md), which provides empty methods associated with obtaining and releasing ownership of a critical section.  \n  \n## Requirements  \n **Header:** atlbase.h  \n  \n##  <a name=\"ccomsinglethreadmodel__autocriticalsection\"></a>  CComSingleThreadModel::AutoCriticalSection  \n When using `CComSingleThreadModel`, the `typedef` name `AutoCriticalSection` references class [CComFakeCriticalSection](../../atl/reference/ccomfakecriticalsection-class.md).  \n  \n```\ntypedef CComFakeCriticalSection AutoCriticalSection;\n```  \n  \n### Remarks  \n Because `CComFakeCriticalSection` does not provide a critical section, its methods do nothing.  \n  \n [CComMultiThreadModel](../../atl/reference/ccommultithreadmodel-class.md) and [CComMultiThreadModelNoCS](../../atl/reference/ccommultithreadmodelnocs-class.md) contain definitions for `AutoCriticalSection`. The following table shows the relationship between the threading model class and the critical section class referenced by `AutoCriticalSection`:  \n  \n|Class defined in|Class referenced|  \n|----------------------|----------------------|  \n|`CComSingleThreadModel`|`CComFakeCriticalSection`|  \n|`CComMultiThreadModel`|`CComAutoCriticalSection`|  \n|`CComMultiThreadModelNoCS`|`CComFakeCriticalSection`|  \n  \n In addition to `AutoCriticalSection`, you can use the `typedef` name [CriticalSection](#ccomsinglethreadmodel__criticalsection). You should not specify `AutoCriticalSection` in global objects or static class members if you want to eliminate the CRT startup code.  \n  \n### Example  \n See [CComMultiThreadModel::AutoCriticalSection](../../atl/reference/ccommultithreadmodel-class.md#ccommultithreadmodel__autocriticalsection).  \n  \n##  <a name=\"ccomsinglethreadmodel__criticalsection\"></a>  CComSingleThreadModel::CriticalSection  \n When using `CComSingleThreadModel`, the `typedef` name `CriticalSection` references class [CComFakeCriticalSection](../../atl/reference/ccomfakecriticalsection-class.md).  \n  \n```\ntypedef CComFakeCriticalSection CriticalSection;\n```  \n  \n### Remarks  \n Because `CComFakeCriticalSection` does not provide a critical section, its methods do nothing.  \n  \n [CComMultiThreadModel](../../atl/reference/ccommultithreadmodel-class.md) and [CComMultiThreadModelNoCS](../../atl/reference/ccommultithreadmodelnocs-class.md) contain definitions for `CriticalSection`. The following table shows the relationship between the threading model class and the critical section class referenced by `CriticalSection`:  \n  \n|Class defined in|Class referenced|  \n|----------------------|----------------------|  \n|`CComSingleThreadModel`|`CComFakeCriticalSection`|  \n|`CComMultiThreadModel`|`CComCriticalSection`|  \n|`CComMultiThreadModelNoCS`|`CComFakeCriticalSection`|  \n  \n In addition to `CriticalSection`, you can use the `typedef` name [AutoCriticalSection](#ccomsinglethreadmodel__autocriticalsection). You should not specify `AutoCriticalSection` in global objects or static class members if you want to eliminate the CRT startup code.  \n  \n### Example  \n See [CComMultiThreadModel::AutoCriticalSection](../../atl/reference/ccommultithreadmodel-class.md#ccommultithreadmodel__autocriticalsection).  \n  \n##  <a name=\"ccomsinglethreadmodel__decrement\"></a>  CComSingleThreadModel::Decrement  \n This static function decrements the value of the variable pointed to by `p`.  \n  \n```\nstatic ULONG WINAPI Decrement(LPLONG p) throw();\n```  \n  \n### Parameters  \n `p`  \n [in] Pointer to the variable to be decremented.  \n  \n### Return Value  \n The result of the decrement.  \n  \n##  <a name=\"ccomsinglethreadmodel__increment\"></a>  CComSingleThreadModel::Increment  \n This static function decrements the value of the variable pointed to by `p`.  \n  \n```\nstatic ULONG WINAPI Increment(LPLONG p) throw();\n```  \n  \n### Parameters  \n `p`  \n [in] Pointer to the variable to be incremented.  \n  \n### Return Value  \n The result of the increment.  \n  \n##  <a name=\"ccomsinglethreadmodel__threadmodelnocs\"></a>  CComSingleThreadModel::ThreadModelNoCS  \n When using `CComSingleThreadModel`, the `typedef` name `ThreadModelNoCS` simply references `CComSingleThreadModel`.  \n  \n```\ntypedef CComSingleThreadModel ThreadModelNoCS;\n```  \n  \n### Remarks  \n [CComMultiThreadModel](../../atl/reference/ccommultithreadmodel-class.md) and [CComMultiThreadModelNoCS](../../atl/reference/ccommultithreadmodelnocs-class.md) contain definitions for `ThreadModelNoCS`. The following table shows the relationship between the threading model class and the class referenced by `ThreadModelNoCS`:  \n  \n|Class defined in|Class referenced|  \n|----------------------|----------------------|  \n|`CComSingleThreadModel`|`CComSingleThreadModel`|  \n|`CComMultiThreadModel`|`CComMultiThreadModelNoCS`|  \n|`CComMultiThreadModelNoCS`|`CComMultiThreadModelNoCS`|  \n  \n### Example  \n See [CComMultiThreadModel::AutoCriticalSection](../../atl/reference/ccommultithreadmodel-class.md#ccommultithreadmodel__autocriticalsection).  \n  \n## See Also  \n [Class Overview](../../atl/atl-class-overview.md)\n"}