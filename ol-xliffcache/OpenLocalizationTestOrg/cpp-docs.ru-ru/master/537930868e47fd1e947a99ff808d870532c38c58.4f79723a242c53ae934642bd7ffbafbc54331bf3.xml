{"nodes":[{"pos":[12,49],"content":"cache_suballoc Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"cache_suballoc Class | Microsoft Docs","pos":[0,37]}]},{"pos":[711,731],"content":"cache_suballoc Class","linkify":"cache_suballoc Class","nodes":[{"content":"cache_suballoc Class","pos":[0,20]}]},{"pos":[732,864],"content":"Defines a <bpt id=\"p1\">[</bpt>block allocator<ept id=\"p1\">](../standard-library/allocators-header.md)</ept> that allocates and deallocates memory blocks of a single size.","source":"Defines a [block allocator](../standard-library/allocators-header.md) that allocates and deallocates memory blocks of a single size."},{"pos":[873,879],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[971,981],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[988,997]},{"content":"Description","pos":[998,1009]},{"content":"The number of elements in the array to be allocated.","pos":[1057,1109]},{"pos":[1119,1126],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1130,1391],"content":"The cache_suballoc template class stores deallocated memory blocks in a free list with unbounded length, using <ph id=\"ph1\">`freelist&lt;sizeof(Type), max_unbounded&gt;`</ph>, and suballocates memory blocks from a larger chunk allocated with <ph id=\"ph2\">`operator new`</ph> when the free list is empty.","source":"The cache_suballoc template class stores deallocated memory blocks in a free list with unbounded length, using `freelist<sizeof(Type), max_unbounded>`, and suballocates memory blocks from a larger chunk allocated with `operator new` when the free list is empty."},{"content":"Each chunk holds <ph id=\"ph1\">`Sz * Nelts`</ph> bytes of usable memory and the data that <ph id=\"ph2\">`operator new`</ph> and <ph id=\"ph3\">`operator delete`</ph> require.","pos":[1398,1514],"source":"Each chunk holds `Sz * Nelts` bytes of usable memory and the data that `operator new` and `operator delete` require."},{"content":"Allocated chunks are never freed.","pos":[1515,1548]},{"pos":[1558,1570],"content":"Constructors","linkify":"Constructors","nodes":[{"content":"Constructors","pos":[0,12]}]},{"pos":[1591,1640],"content":"<bpt id=\"p1\">[</bpt>cache_suballoc<ept id=\"p1\">](#cache_suballoc__cache_suballoc)</ept>","source":"[cache_suballoc](#cache_suballoc__cache_suballoc)"},{"pos":[1641,1687],"content":"Constructs an object of type <ph id=\"ph1\">`cache_suballoc`</ph>.","source":"Constructs an object of type `cache_suballoc`."},{"pos":[1698,1714],"content":"Member Functions","linkify":"Member Functions","nodes":[{"content":"Member Functions","pos":[0,16]}]},{"pos":[1735,1772],"content":"<bpt id=\"p1\">[</bpt>allocate<ept id=\"p1\">](#cache_suballoc__allocate)</ept>","source":"[allocate](#cache_suballoc__allocate)"},{"content":"Allocates a block of memory.","pos":[1773,1801]},{"pos":[1806,1847],"content":"<bpt id=\"p1\">[</bpt>deallocate<ept id=\"p1\">](#cache_suballoc__deallocate)</ept>","source":"[deallocate](#cache_suballoc__deallocate)"},{"content":"Frees a specified number of objects from storage beginning at a specified position.","pos":[1848,1931]},{"pos":[1941,1953],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[1957,1982],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>allocators&gt;","source":"**Header:** \\<allocators>"},{"pos":[1989,2010],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> stdext","source":"**Namespace:** stdext"},{"pos":[2020,2085],"content":"<bpt id=\"p1\">&lt;a name=\"cache_suballoc__allocate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  cache_suballoc::allocate","linkify":"<a name=\"cache_suballoc__allocate\"></a>  cache_suballoc::allocate","source":"<a name=\"cache_suballoc__allocate\"></a>  cache_suballoc::allocate"},{"content":"Allocates a block of memory.","pos":[2089,2117]},{"pos":[2175,2185],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[2192,2201]},{"content":"Description","pos":[2202,2213]},{"content":"The number of elements in the array to be allocated.","pos":[2264,2316]},{"pos":[2327,2339],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to the allocated object.","pos":[2343,2377]},{"pos":[2387,2394],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2404,2481],"content":"<bpt id=\"p1\">&lt;a name=\"cache_suballoc__cache_suballoc\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  cache_suballoc::cache_suballoc","linkify":"<a name=\"cache_suballoc__cache_suballoc\"></a>  cache_suballoc::cache_suballoc","source":"<a name=\"cache_suballoc__cache_suballoc\"></a>  cache_suballoc::cache_suballoc"},{"pos":[2485,2531],"content":"Constructs an object of type <ph id=\"ph1\">`cache_suballoc`</ph>.","source":"Constructs an object of type `cache_suballoc`."},{"pos":[2572,2579],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2589,2658],"content":"<bpt id=\"p1\">&lt;a name=\"cache_suballoc__deallocate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  cache_suballoc::deallocate","linkify":"<a name=\"cache_suballoc__deallocate\"></a>  cache_suballoc::deallocate","source":"<a name=\"cache_suballoc__deallocate\"></a>  cache_suballoc::deallocate"},{"content":"Frees a specified number of objects from storage beginning at a specified position.","pos":[2662,2745]},{"pos":[2815,2825],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[2832,2841]},{"content":"Description","pos":[2842,2853]},{"content":"A pointer to the first object to be deallocated from storage.","pos":[2902,2963]},{"content":"The number of objects to be deallocated from storage.","pos":[2976,3029]},{"pos":[3040,3047],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3056,3064],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[3068,3125],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>allocators&gt;<ept id=\"p1\">](../standard-library/allocators-header.md)</ept>","source":"[\\<allocators>](../standard-library/allocators-header.md)"}],"content":"---\ntitle: \"cache_suballoc Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"stdext.cache_suballoc\"\n  - \"allocators/stdext::cache_suballoc\"\n  - \"stdext::cache_suballoc\"\n  - \"cache_suballoc\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"cache_suballoc class\"\nms.assetid: 9ea9c5e9-1dcc-45d0-b3a7-a56a93d88898\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# cache_suballoc Class\nDefines a [block allocator](../standard-library/allocators-header.md) that allocates and deallocates memory blocks of a single size.  \n  \n## Syntax  \n  \n```\ntemplate <std::size_t Sz, size_t Nelts = 20>  \nclass cache_suballoc\n```  \n  \n#### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`Sz`|The number of elements in the array to be allocated.|  \n  \n## Remarks  \n The cache_suballoc template class stores deallocated memory blocks in a free list with unbounded length, using `freelist<sizeof(Type), max_unbounded>`, and suballocates memory blocks from a larger chunk allocated with `operator new` when the free list is empty.  \n  \n Each chunk holds `Sz * Nelts` bytes of usable memory and the data that `operator new` and `operator delete` require. Allocated chunks are never freed.  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[cache_suballoc](#cache_suballoc__cache_suballoc)|Constructs an object of type `cache_suballoc`.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[allocate](#cache_suballoc__allocate)|Allocates a block of memory.|  \n|[deallocate](#cache_suballoc__deallocate)|Frees a specified number of objects from storage beginning at a specified position.|  \n  \n## Requirements  \n **Header:** \\<allocators>  \n  \n **Namespace:** stdext  \n  \n##  <a name=\"cache_suballoc__allocate\"></a>  cache_suballoc::allocate  \n Allocates a block of memory.  \n  \n```\nvoid *allocate(std::size_t count);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`count`|The number of elements in the array to be allocated.|  \n  \n### Return Value  \n A pointer to the allocated object.  \n  \n### Remarks  \n  \n##  <a name=\"cache_suballoc__cache_suballoc\"></a>  cache_suballoc::cache_suballoc  \n Constructs an object of type `cache_suballoc`.  \n  \n```\ncache_suballoc();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cache_suballoc__deallocate\"></a>  cache_suballoc::deallocate  \n Frees a specified number of objects from storage beginning at a specified position.  \n  \n```\nvoid deallocate(void* ptr, std::size_t count);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`ptr`|A pointer to the first object to be deallocated from storage.|  \n|`count`|The number of objects to be deallocated from storage.|  \n  \n### Remarks  \n  \n## See Also  \n [\\<allocators>](../standard-library/allocators-header.md)\n\n\n\n"}