{"nodes":[{"pos":[12,47],"content":"CMapPtrToPtr Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMapPtrToPtr Class | Microsoft Docs","pos":[0,35]}]},{"content":"CMapPtrToPtr Class","pos":[680,698]},{"content":"Supports maps of void pointers keyed by void pointers.","pos":[699,753]},{"content":"Syntax","pos":[762,768]},{"content":"Members","pos":[830,837]},{"content":"The member functions of <ph id=\"ph1\">`CMapPtrToPtr`</ph> are similar to the member functions of class <bpt id=\"p1\">[</bpt>CMapStringToOb<ept id=\"p1\">](../../mfc/reference/cmapstringtoob-class.md)</ept>.","pos":[841,987],"source":"The member functions of `CMapPtrToPtr` are similar to the member functions of class [CMapStringToOb](../../mfc/reference/cmapstringtoob-class.md)."},{"content":"Because of this similarity, you can use the <ph id=\"ph1\">`CMapStringToOb`</ph> reference documentation for member function specifics.","pos":[988,1103],"source":" Because of this similarity, you can use the `CMapStringToOb` reference documentation for member function specifics."},{"content":"Wherever you see a <ph id=\"ph1\">`CObject`</ph> pointer as a function parameter or return value, substitute a pointer to <ph id=\"ph2\">`void`</ph>.","pos":[1104,1213],"source":" Wherever you see a `CObject` pointer as a function parameter or return value, substitute a pointer to `void`."},{"content":"Wherever you see a <ph id=\"ph1\">`CString`</ph> or a <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> pointer to <ph id=\"ph2\">`char`</ph> as a function parameter or return value, substitute a pointer to <ph id=\"ph3\">`void`</ph>.","pos":[1214,1348],"source":" Wherever you see a `CString` or a **const** pointer to `char` as a function parameter or return value, substitute a pointer to `void`."},{"content":"for example, translates to","pos":[1447,1473]},{"content":"Public Constructors","pos":[1556,1575]},{"content":"Name","pos":[1582,1586]},{"content":"Description","pos":[1587,1598]},{"content":"CMapStringToOb::CMapStringToOb","pos":[1637,1667]},{"content":"Constructor.","pos":[1745,1757]},{"content":"Public Methods","pos":[1768,1782]},{"content":"Name","pos":[1789,1793]},{"content":"Description","pos":[1794,1805]},{"content":"CMapStringToOb::GetCount","pos":[1844,1868]},{"content":"Returns the number of elements in this map.","pos":[1940,1983]},{"content":"CMapStringToOb::GetHashTableSize","pos":[1989,2021]},{"content":"Determines the current number of elements in the hash table.","pos":[2101,2161]},{"content":"CMapStringToOb::GetNextAssoc","pos":[2167,2195]},{"content":"Gets the next element for iterating.","pos":[2271,2307]},{"content":"CMapStringToOb::GetSize","pos":[2313,2336]},{"content":"Returns the number of elements in this map.","pos":[2407,2450]},{"content":"CMapStringToOb::GetStartPosition","pos":[2456,2488]},{"content":"Returns the position of the first element.","pos":[2568,2610]},{"content":"CMapStringToOb::HashKey","pos":[2616,2639]},{"content":"Calculates the hash value of a specified key.","pos":[2710,2755]},{"content":"CMapStringToOb::InitHashTable","pos":[2761,2790]},{"content":"Initializes the hash table.","pos":[2867,2894]},{"content":"CMapStringToOb::IsEmpty","pos":[2900,2923]},{"content":"Tests for the empty-map condition (no elements).","pos":[2994,3042]},{"content":"CMapStringToOb::Lookup","pos":[3048,3070]},{"content":"Looks up a void pointer based on the void pointer key.","pos":[3140,3194]},{"content":"The pointer value, not the entity it points to, is used for the key comparison.","pos":[3195,3274]},{"content":"CMapStringToOb::LookupKey","pos":[3280,3305]},{"content":"Returns a reference to the key associated with the specified key value.","pos":[3378,3449]},{"content":"CMapStringToOb::RemoveAll","pos":[3455,3480]},{"content":"Removes all the elements from this map.","pos":[3553,3592]},{"content":"CMapStringToOb::RemoveKey","pos":[3598,3623]},{"content":"Removes an element specified by a key.","pos":[3696,3734]},{"content":"CMapStringToOb::SetAt","pos":[3740,3761]},{"content":"Inserts an element into the map; replaces an existing element if a matching key is found.","pos":[3830,3919]},{"content":"Public Operators","pos":[3930,3946]},{"content":"Name","pos":[3953,3957]},{"content":"Description","pos":[3958,3969]},{"content":"CMapStringToOb::operator [ ]","pos":[4008,4036]},{"pos":[4111,4179],"content":"Inserts an element into the map — operator substitution for <ph id=\"ph1\">`SetAt`</ph>.","source":"Inserts an element into the map — operator substitution for `SetAt`."},{"content":"Remarks","pos":[4189,4196]},{"content":"incorporates the <ph id=\"ph1\">`IMPLEMENT_DYNAMIC`</ph> macro to support run-time type access and dumping to a <ph id=\"ph2\">`CDumpContext`</ph> object.","pos":[4215,4329],"source":" incorporates the `IMPLEMENT_DYNAMIC` macro to support run-time type access and dumping to a `CDumpContext` object."},{"content":"If you need a dump of individual map elements (pointer values), you must set the depth of the dump context to 1 or greater.","pos":[4330,4453]},{"content":"Pointer-to-pointer maps may not be serialized.","pos":[4460,4506]},{"pos":[4513,4651],"content":"When a <ph id=\"ph1\">`CMapPtrToPtr`</ph> object is deleted, or when its elements are removed, only the pointers are removed, not the entities they reference.","source":"When a `CMapPtrToPtr` object is deleted, or when its elements are removed, only the pointers are removed, not the entities they reference."},{"pos":[4658,4754],"content":"For more information on <ph id=\"ph1\">`CMapPtrToPtr`</ph>, see the article <bpt id=\"p1\">[</bpt>Collections<ept id=\"p1\">](../../mfc/collections.md)</ept>.","source":"For more information on `CMapPtrToPtr`, see the article [Collections](../../mfc/collections.md)."},{"content":"Inheritance Hierarchy","pos":[4763,4784]},{"content":"CObject","pos":[4789,4796]},{"content":"Requirements","pos":[4865,4877]},{"pos":[4881,4902],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxcoll.h","source":"**Header:** afxcoll.h"},{"content":"See Also","pos":[4911,4919]},{"content":"CObject Class","pos":[4924,4937]},{"content":"Hierarchy Chart","pos":[4982,4997]}],"content":"---\ntitle: \"CMapPtrToPtr Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CMapPtrToPtr\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CMapPtrToPtr class\"\n  - \"pointer mapping class\"\n  - \"collection classes, pointer mapping\"\nms.assetid: 23cbbaec-9d64-48f2-92ae-5e24fa64b926\ncaps.latest.revision: 22\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMapPtrToPtr Class\nSupports maps of void pointers keyed by void pointers.  \n  \n## Syntax  \n  \n```  \nclass CMapPtrToPtr : public CObject  \n```  \n  \n## Members  \n The member functions of `CMapPtrToPtr` are similar to the member functions of class [CMapStringToOb](../../mfc/reference/cmapstringtoob-class.md). Because of this similarity, you can use the `CMapStringToOb` reference documentation for member function specifics. Wherever you see a `CObject` pointer as a function parameter or return value, substitute a pointer to `void`. Wherever you see a `CString` or a **const** pointer to `char` as a function parameter or return value, substitute a pointer to `void`.  \n  \n `BOOL CMapStringToOb::Lookup( const char* <key>,`  \n  \n `CObject*& <rValue> ) const;`  \n  \n for example, translates to  \n  \n `BOOL CMapPtrToPtr::Lookup( void* <key>, void*& <rValue> ) const;`  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMapStringToOb::CMapStringToOb](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__cmapstringtoob)|Constructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMapStringToOb::GetCount](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__getcount)|Returns the number of elements in this map.|  \n|[CMapStringToOb::GetHashTableSize](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__gethashtablesize)|Determines the current number of elements in the hash table.|  \n|[CMapStringToOb::GetNextAssoc](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__getnextassoc)|Gets the next element for iterating.|  \n|[CMapStringToOb::GetSize](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__getsize)|Returns the number of elements in this map.|  \n|[CMapStringToOb::GetStartPosition](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__getstartposition)|Returns the position of the first element.|  \n|[CMapStringToOb::HashKey](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__hashkey)|Calculates the hash value of a specified key.|  \n|[CMapStringToOb::InitHashTable](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__inithashtable)|Initializes the hash table.|  \n|[CMapStringToOb::IsEmpty](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__isempty)|Tests for the empty-map condition (no elements).|  \n|[CMapStringToOb::Lookup](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__lookup)|Looks up a void pointer based on the void pointer key. The pointer value, not the entity it points to, is used for the key comparison.|  \n|[CMapStringToOb::LookupKey](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__lookupkey)|Returns a reference to the key associated with the specified key value.|  \n|[CMapStringToOb::RemoveAll](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__removeall)|Removes all the elements from this map.|  \n|[CMapStringToOb::RemoveKey](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__removekey)|Removes an element specified by a key.|  \n|[CMapStringToOb::SetAt](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__setat)|Inserts an element into the map; replaces an existing element if a matching key is found.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMapStringToOb::operator [ ]](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__operator_at)|Inserts an element into the map — operator substitution for `SetAt`.|  \n  \n## Remarks  \n `CMapPtrToPtr` incorporates the `IMPLEMENT_DYNAMIC` macro to support run-time type access and dumping to a `CDumpContext` object. If you need a dump of individual map elements (pointer values), you must set the depth of the dump context to 1 or greater.  \n  \n Pointer-to-pointer maps may not be serialized.  \n  \n When a `CMapPtrToPtr` object is deleted, or when its elements are removed, only the pointers are removed, not the entities they reference.  \n  \n For more information on `CMapPtrToPtr`, see the article [Collections](../../mfc/collections.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n `CMapPtrToPtr`  \n  \n## Requirements  \n **Header:** afxcoll.h  \n  \n## See Also  \n [CObject Class](../../mfc/reference/cobject-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)\n\n\n\n"}