{"nodes":[{"pos":[12,61],"content":"Compiler Warning (level 1) C4291 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Warning (level 1) C4291 | Microsoft Docs","pos":[0,49]}]},{"pos":[609,641],"content":"Compiler Warning (level 1) C4291","linkify":"Compiler Warning (level 1) C4291","nodes":[{"content":"Compiler Warning (level 1) C4291","pos":[0,32]}]},{"content":"'declaration' : no matching operator delete found; memory will not be freed if initialization throws an exception","pos":[642,755]},{"pos":[762,894],"content":"A placement <bpt id=\"p1\">[</bpt>new<ept id=\"p1\">](../../cpp/new-operator-cpp.md)</ept> is used for which there is no placement <bpt id=\"p2\">[</bpt>delete<ept id=\"p2\">](../../cpp/delete-operator-cpp.md)</ept>.","source":"A placement [new](../../cpp/new-operator-cpp.md) is used for which there is no placement [delete](../../cpp/delete-operator-cpp.md)."},{"content":"When memory is allocated for an object with operator <bpt id=\"p1\">**</bpt>new<ept id=\"p1\">**</ept>, the object's constructor is called.","pos":[901,998],"source":"When memory is allocated for an object with operator **new**, the object's constructor is called."},{"content":"If the constructor throws an exception, any memory that was allocated for the object should be deallocated.","pos":[999,1106]},{"content":"This cannot take place unless an operator <bpt id=\"p1\">**</bpt>delete<ept id=\"p1\">**</ept> function exists that matches the operator <bpt id=\"p2\">**</bpt>new<ept id=\"p2\">**</ept>.","pos":[1107,1210],"source":" This cannot take place unless an operator **delete** function exists that matches the operator **new**."},{"pos":[1217,1563],"content":"If you use the operator <bpt id=\"p1\">**</bpt>new<ept id=\"p1\">**</ept> without any extra arguments and compile with <bpt id=\"p2\">[</bpt>/GX<ept id=\"p2\">](../../build/reference/gx-enable-exception-handling.md)</ept>, <bpt id=\"p3\">[</bpt>/EHs<ept id=\"p3\">](../../build/reference/eh-exception-handling-model.md)</ept>, or /EHa options to enable exception handling, the compiler will generate code to call operator <bpt id=\"p4\">**</bpt>delete<ept id=\"p4\">**</ept> if the constructor throws an exception.","source":"If you use the operator **new** without any extra arguments and compile with [/GX](../../build/reference/gx-enable-exception-handling.md), [/EHs](../../build/reference/eh-exception-handling-model.md), or /EHa options to enable exception handling, the compiler will generate code to call operator **delete** if the constructor throws an exception."},{"content":"If you use the placement form of the <bpt id=\"p1\">**</bpt>new<ept id=\"p1\">**</ept> operator (the form with arguments in addition to the size of the allocation) and the object's constructor throws an exception, the compiler will still generate code to call operator <bpt id=\"p2\">**</bpt>delete<ept id=\"p2\">**</ept>; but it will only do so if a placement form of operator <bpt id=\"p3\">**</bpt>delete<ept id=\"p3\">**</ept> exists matching the placement form of the operator <bpt id=\"p4\">**</bpt>new<ept id=\"p4\">**</ept> that allocated the memory.","pos":[1570,1960],"source":"If you use the placement form of the **new** operator (the form with arguments in addition to the size of the allocation) and the object's constructor throws an exception, the compiler will still generate code to call operator **delete**; but it will only do so if a placement form of operator **delete** exists matching the placement form of the operator **new** that allocated the memory."},{"content":"For example:","pos":[1961,1973]},{"content":"The above example generates warning C4291 because no placement form of operator <bpt id=\"p1\">**</bpt>delete<ept id=\"p1\">**</ept> has been defined that matches the placement form of operator <bpt id=\"p2\">**</bpt>new<ept id=\"p2\">**</ept>.","pos":[3189,3349],"source":"The above example generates warning C4291 because no placement form of operator **delete** has been defined that matches the placement form of operator **new**."},{"content":"To solve the problem, insert the following code above <bpt id=\"p1\">**</bpt>main<ept id=\"p1\">**</ept>.","pos":[3350,3413],"source":" To solve the problem, insert the following code above **main**."},{"content":"Notice that all of the overloaded operator <bpt id=\"p1\">**</bpt>delete<ept id=\"p1\">**</ept> function parameters match those of the overloaded operator <bpt id=\"p2\">**</bpt>new<ept id=\"p2\">**</ept>, except for the first parameter.","pos":[3414,3567],"source":" Notice that all of the overloaded operator **delete** function parameters match those of the overloaded operator **new**, except for the first parameter."}],"content":"---\ntitle: \"Compiler Warning (level 1) C4291 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"C4291\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C4291\"\nms.assetid: c2b95dea-38f2-4609-9104-707c30798da4\ncaps.latest.revision: 7\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Compiler Warning (level 1) C4291\n'declaration' : no matching operator delete found; memory will not be freed if initialization throws an exception  \n  \n A placement [new](../../cpp/new-operator-cpp.md) is used for which there is no placement [delete](../../cpp/delete-operator-cpp.md).  \n  \n When memory is allocated for an object with operator **new**, the object's constructor is called. If the constructor throws an exception, any memory that was allocated for the object should be deallocated. This cannot take place unless an operator **delete** function exists that matches the operator **new**.  \n  \n If you use the operator **new** without any extra arguments and compile with [/GX](../../build/reference/gx-enable-exception-handling.md), [/EHs](../../build/reference/eh-exception-handling-model.md), or /EHa options to enable exception handling, the compiler will generate code to call operator **delete** if the constructor throws an exception.  \n  \n If you use the placement form of the **new** operator (the form with arguments in addition to the size of the allocation) and the object's constructor throws an exception, the compiler will still generate code to call operator **delete**; but it will only do so if a placement form of operator **delete** exists matching the placement form of the operator **new** that allocated the memory. For example:  \n  \n```  \n// C4291.cpp  \n// compile with: /EHsc /W1  \n#include <malloc.h>  \n  \nclass CList  \n{  \npublic:  \n   CList(int)  \n   {  \n      throw \"Fail!\";  \n   }  \n};  \n  \nvoid* operator new(size_t size, char* pszFilename, int nLine)  \n{  \n   return malloc(size);  \n}  \n  \nint main(void)  \n{  \n   try  \n   {  \n      // This will call ::operator new(unsigned int) to allocate heap  \n      // memory. Heap memory pointed to by pList1 will automatically be  \n      // deallocated by a call to ::operator delete(void*) when  \n      // CList::CList(int) throws an exception.  \n      CList* pList1 = new CList(10);  \n   }  \n   catch (...)  \n   {  \n   }  \n  \n   try  \n   {  \n      // This will call the overloaded ::operator new(size_t, char*, int)  \n      // to allocate heap memory. When CList::CList(int) throws an  \n      // exception, ::operator delete(void*, char*, int) should be called  \n      // to deallocate the memory pointed to by pList2. Since  \n      // ::operator delete(void*, char*, int) has not been implemented,  \n      // memory will be leaked when the deallocation cannot occur.  \n      CList* pList2 = new(__FILE__, __LINE__) CList(20);   // C4291  \n   }  \n   catch (...)  \n   {  \n   }  \n}  \n```  \n  \n The above example generates warning C4291 because no placement form of operator **delete** has been defined that matches the placement form of operator **new**. To solve the problem, insert the following code above **main**. Notice that all of the overloaded operator **delete** function parameters match those of the overloaded operator **new**, except for the first parameter.  \n  \n```  \nvoid operator delete(void* pMem, char* pszFilename, int nLine)  \n{  \n   free(pMem);  \n}  \n```"}