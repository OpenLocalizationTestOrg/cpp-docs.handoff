{"nodes":[{"pos":[12,76],"content":"Concurrency::direct3d namespace functions (AMP) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Concurrency::direct3d namespace functions (AMP) | Microsoft Docs","pos":[0,64]}]},{"content":"Concurrency::direct3d namespace functions (AMP)","pos":[318,365]},{"content":"abs Function","pos":[385,397]},{"content":"clamp Function","pos":[415,429]},{"content":"countbits Function","pos":[449,467]},{"content":"create_accelerator_view Function","pos":[493,525]},{"content":"d3d_access_lock Function","pos":[567,591]},{"content":"d3d_access_try_lock Function","pos":[621,649]},{"content":"d3d_access_unlock Function","pos":[683,709]},{"content":"firstbithigh Function","pos":[745,766]},{"content":"firstbitlow Function","pos":[793,813]},{"content":"get_buffer Function","pos":[839,858]},{"content":"imax Function","pos":[887,900]},{"content":"imin Function","pos":[919,932]},{"content":"is_timeout_disabled Function","pos":[951,979]},{"content":"mad Function","pos":[1017,1029]},{"content":"make_array Function","pos":[1047,1066]},{"content":"noise Function","pos":[1091,1105]},{"content":"radians Function","pos":[1129,1145]},{"content":"rcp Function","pos":[1167,1179]},{"content":"reversebits Function","pos":[1197,1217]},{"content":"saturate Function","pos":[1247,1264]},{"content":"sign Function","pos":[1287,1300]},{"content":"smoothstep Function","pos":[1319,1338]},{"content":"step Function","pos":[1367,1380]},{"content":"umax Function","pos":[1399,1412]},{"content":"umin Function","pos":[1431,1444]},{"pos":[1501,1513],"content":"abs Function"},{"content":"Returns the absolute value of the argument","pos":[1517,1559]},{"content":"Parameters","pos":[1622,1632]},{"content":"Integer value","pos":[1644,1657]},{"content":"Return Value","pos":[1667,1679]},{"content":"Returns the absolute value of the argument.","pos":[1683,1726]},{"pos":[1767,1781],"content":"clamp Function"},{"content":"Computes the value of the first specified argument clamped to a range defined by the second and third specified arguments.","pos":[1785,1907]},{"content":"Parameters","pos":[2097,2107]},{"content":"The value to be clamped","pos":[2119,2142]},{"content":"The lower bound of the clamping range.","pos":[2159,2197]},{"content":"The upper bound of the clamping range.","pos":[2214,2252]},{"content":"Return Value","pos":[2262,2274]},{"pos":[2278,2304],"content":"The clamped value of <ph id=\"ph1\">`_X`</ph>.","source":"The clamped value of `_X`."},{"pos":[2349,2367],"content":"countbits Function"},{"content":"Counts the number of set bits in _X","pos":[2371,2406]},{"content":"Parameters","pos":[2493,2503]},{"content":"Unsigned integer value","pos":[2515,2537]},{"content":"Return Value","pos":[2547,2559]},{"content":"Returns the number of set bits in _X","pos":[2563,2599]},{"pos":[2654,2686],"content":"create_accelerator_view Function"},{"pos":[2687,2797],"content":"Creates an <bpt id=\"p1\">[</bpt>accelerator_view<ept id=\"p1\">](accelerator-view-class.md)</ept> object from a pointer to a Direct3D device interface.","source":"Creates an [accelerator_view](accelerator-view-class.md) object from a pointer to a Direct3D device interface."},{"content":"Syntax","pos":[2806,2812]},{"content":"Parameters","pos":[3125,3135]},{"content":"The accelerator on which the new accelerator_view is to be created.","pos":[3157,3224]},{"content":"The pointer to the Direct3D device interface.","pos":[3248,3293]},{"content":"A Boolean parameter that specifies whether timeout should be disabled for the newly created accelerator_view.","pos":[3322,3431]},{"content":"This corresponds to the D3D11_CREATE_DEVICE_DISABLE_GPU_TIMEOUT flag for Direct3D device creation and is used to indicate if the operating system should allow workloads that take more than 2 seconds to execute without resetting the device per the Windows timeout detection and recovery mechanism.","pos":[3432,3728]},{"content":"Use of this flag is recommended if you need to perform time consuming tasks on the accelerator_view.","pos":[3729,3829]},{"content":"The <bpt id=\"p1\">[</bpt>queuing_mode<ept id=\"p1\">](concurrency-namespace-enums-amp.md#queuing_mode)</ept> to be used for the newly created accelerator_view.","pos":[3848,3966],"source":" The [queuing_mode](concurrency-namespace-enums-amp.md#queuing_mode) to be used for the newly created accelerator_view."},{"content":"This parameter has a default value of <ph id=\"ph1\">`queuing_mode_automatic`</ph>.","pos":[3967,4030],"source":" This parameter has a default value of `queuing_mode_automatic`."},{"content":"Return Value","pos":[4039,4051]},{"pos":[4055,4135],"content":"The <ph id=\"ph1\">`accelerator_view`</ph> object created from the passed Direct3D device interface.","source":"The `accelerator_view` object created from the passed Direct3D device interface."},{"content":"Remarks","pos":[4144,4151]},{"content":"This function creates a new <ph id=\"ph1\">`accelerator_view`</ph> object from an existing pointer to a Direct3D device interface.","pos":[4155,4265],"source":"This function creates a new `accelerator_view` object from an existing pointer to a Direct3D device interface."},{"content":"If the function call succeeds, the reference count of the parameter is incremented by means of an <ph id=\"ph1\">`AddRef`</ph> call to the interface.","pos":[4266,4395],"source":" If the function call succeeds, the reference count of the parameter is incremented by means of an `AddRef` call to the interface."},{"content":"You can safely release the object when it is no longer required in your DirectX code.","pos":[4396,4481]},{"content":"If the method call fails, a <bpt id=\"p1\">[</bpt>runtime_exception<ept id=\"p1\">](runtime-exception-class.md)</ept> is thrown.","pos":[4482,4568],"source":" If the method call fails, a [runtime_exception](runtime-exception-class.md) is thrown."},{"content":"The <ph id=\"ph1\">`accelerator_view`</ph> object that you create by using this function is thread safe.","pos":[4575,4659],"source":"The `accelerator_view` object that you create by using this function is thread safe."},{"content":"You must synchronize concurrent use of the <ph id=\"ph1\">`accelerator_view`</ph> object.","pos":[4660,4729],"source":" You must synchronize concurrent use of the `accelerator_view` object."},{"content":"Unsynchronized concurrent usage of the <ph id=\"ph1\">`accelerator_view`</ph> object and the raw ID3D11Device interface causes undefined behavior.","pos":[4730,4856],"source":" Unsynchronized concurrent usage of the `accelerator_view` object and the raw ID3D11Device interface causes undefined behavior."},{"pos":[4863,5010],"content":"The C++ AMP runtime provides detailed error information in debug mode by using the D3D Debug layer if you use the <ph id=\"ph1\">`D3D11_CREATE_DEVICE_DEBUG`</ph> flag.","source":"The C++ AMP runtime provides detailed error information in debug mode by using the D3D Debug layer if you use the `D3D11_CREATE_DEVICE_DEBUG` flag."},{"pos":[5064,5088],"content":"d3d_access_lock Function"},{"content":"Acquire a lock on an accelerator_view for the purpose of safely performing D3D operations on resources shared with the accelerator_view.","pos":[5092,5228]},{"content":"The accelerator_view and all C++ AMP resources associated with this accelerator_view internally take this lock when performing operations and will block while another thread holds the D3D access lock.","pos":[5229,5429]},{"content":"This lock is non-recursive: It is undefined behavior to call this function from a thread that already holds the lock.","pos":[5430,5547]},{"content":"It is undefined behavior to perform operations on the accelerator_view or any data container associated with the accelerator_view from the thread that holds the D3D access lock.","pos":[5548,5725]},{"content":"See also scoped_d3d_access_lock, a RAII-style class for a scope-based D3D access lock.","pos":[5726,5812]},{"content":"Parameters","pos":[5890,5900]},{"content":"The accelerator_view to lock.","pos":[5913,5942]},{"pos":[5997,6025],"content":"d3d_access_try_lock Function"},{"content":"Attempt to acquire the D3D access lock on an accelerator_view without blocking.","pos":[6029,6108]},{"content":"Parameters","pos":[6190,6200]},{"content":"The accelerator_view to lock.","pos":[6213,6242]},{"content":"Return Value","pos":[6252,6264]},{"content":"true if the lock was acquired, or false if it is currently held by another thread.","pos":[6268,6350]},{"pos":[6403,6429],"content":"d3d_access_unlock Function"},{"content":"Release the D3D access lock on the given accelerator_view.","pos":[6433,6491]},{"content":"If the calling thread does not hold the lock on the accelerator_view the results are undefined.","pos":[6492,6587]},{"content":"Parameters","pos":[6667,6677]},{"content":"The accelerator_view for which the lock is to be released.","pos":[6690,6748]},{"pos":[6796,6817],"content":"firstbithigh Function"},{"content":"Gets the location of the first set bit in _X, beginning with the highest-order bit and moving towards the lowest-order bit.","pos":[6821,6944]},{"content":"Parameters","pos":[7016,7026]},{"content":"Integer value","pos":[7038,7051]},{"content":"Return Value","pos":[7061,7073]},{"content":"The location of the first set bit","pos":[7077,7110]},{"pos":[7157,7177],"content":"firstbitlow Function"},{"content":"Gets the location of the first set bit in _X, beginning with the lowest-order bit and working toward the highest-order bit.","pos":[7181,7304]},{"content":"Parameters","pos":[7375,7385]},{"content":"Integer value","pos":[7397,7410]},{"content":"Return Value","pos":[7420,7432]},{"content":"Returns The location of the first set bit","pos":[7436,7477]},{"pos":[7523,7542],"content":"get_buffer Function"},{"content":"Get the Direct3D buffer interface underlying the specified array.","pos":[7546,7611]},{"content":"Parameters","pos":[7764,7774]},{"content":"The type of elements in the array.","pos":[7794,7828]},{"content":"The rank of the array.","pos":[7846,7868]},{"content":"An array on a Direct3D accelerator_view for which the underlying Direct3D buffer interface is returned.","pos":[7887,7990]},{"content":"Return Value","pos":[8000,8012]},{"content":"The IUnknown interface pointer corresponding to the Direct3D buffer underlying the array.","pos":[8016,8105]},{"pos":[8145,8158],"content":"imax Function"},{"content":"Determine the maximum numeric value of the arguments","pos":[8162,8214]},{"content":"Parameters","pos":[8297,8307]},{"content":"Integer value","pos":[8319,8332]},{"content":"Integer value","pos":[8347,8360]},{"content":"Return Value","pos":[8370,8382]},{"content":"Return the maximum numeric value of the arguments","pos":[8386,8435]},{"pos":[8475,8488],"content":"imin Function"},{"content":"Determine the minimum numeric value of the arguments","pos":[8492,8544]},{"content":"Parameters","pos":[8627,8637]},{"content":"Integer value","pos":[8649,8662]},{"content":"Integer value","pos":[8677,8690]},{"content":"Return Value","pos":[8700,8712]},{"content":"Return the minimum numeric value of the arguments","pos":[8716,8765]},{"pos":[8820,8848],"content":"is_timeout_disabled Function"},{"content":"Returns a boolean flag indicating if timeout is disabled for the specified accelerator_view.","pos":[8852,8944]},{"content":"This corresponds to the D3D11_CREATE_DEVICE_DISABLE_GPU_TIMEOUT flag for Direct3D device creation.","pos":[8945,9043]},{"content":"Parameters","pos":[9145,9155]},{"content":"The accelerator_view for which the timeout disabled setting is to be queried.","pos":[9182,9259]},{"content":"Return Value","pos":[9269,9281]},{"content":"A boolean flag indicating if timeout is disabled for the specified accelerator_view.","pos":[9285,9369]},{"pos":[9408,9420],"content":"mad Function"},{"content":"Computes the product of the first and second specified argument, then adds the third specified argument.","pos":[9424,9528]},{"content":"Parameters","pos":[9902,9912]},{"content":"The first specified argument.","pos":[9924,9953]},{"content":"The second specified argument.","pos":[9968,9998]},{"content":"The third specified argument.","pos":[10013,10042]},{"content":"Return Value","pos":[10052,10064]},{"pos":[10068,10101],"content":"The result of <ph id=\"ph1\">`_X` * `_Y` + `_Z`</ph>.","source":"The result of `_X` * `_Y` + `_Z`."},{"pos":[10147,10166],"content":"make_array Function"},{"content":"Create an array from a Direct3D buffer interface pointer.","pos":[10170,10227]},{"content":"Parameters","pos":[10462,10472]},{"content":"The element type of the array to be created.","pos":[10492,10536]},{"content":"The rank of the array to be created.","pos":[10554,10590]},{"content":"An extent that describes the shape of the array aggregate.","pos":[10610,10668]},{"content":"A D3D accelerator view on which the array is to be created.","pos":[10684,10743]},{"content":"IUnknown interface pointer of the D3D buffer to create the array from.","pos":[10767,10837]},{"content":"Return Value","pos":[10847,10859]},{"content":"An array created using the provided Direct3D buffer.","pos":[10863,10915]},{"pos":[10956,10970],"content":"noise Function"},{"content":"Generates a random value using the Perlin noise algorithm","pos":[10974,11031]},{"content":"Parameters","pos":[11100,11110]},{"content":"Floating-point value from which to generate Perlin noise","pos":[11122,11178]},{"content":"Return Value","pos":[11188,11200]},{"content":"Returns The Perlin noise value within a range between -1 and 1","pos":[11204,11266]},{"pos":[11309,11325],"content":"radians Function"},{"content":"Converts _X from degrees to radians","pos":[11329,11364]},{"content":"Parameters","pos":[11435,11445]},{"content":"Floating-point value","pos":[11457,11477]},{"content":"Return Value","pos":[11487,11499]},{"content":"Returns _X converted from degrees to radians","pos":[11503,11547]},{"pos":[11586,11598],"content":"rcp Function"},{"content":"Computes the reciprocal of the specified argument by using a fast approximation.","pos":[11602,11682]},{"content":"Parameters","pos":[11796,11806]},{"content":"The value for which to compute the reciprocal.","pos":[11818,11864]},{"content":"Return Value","pos":[11874,11886]},{"content":"The reciprocal of the specified argument.","pos":[11890,11931]},{"pos":[11978,11998],"content":"reversebits Function"},{"content":"Reverses the order of the bits in _X","pos":[12002,12038]},{"content":"Parameters","pos":[12127,12137]},{"content":"Unsigned integer value","pos":[12149,12171]},{"content":"Return Value","pos":[12181,12193]},{"content":"Returns the value with the bit order reversed in _X","pos":[12197,12248]},{"pos":[12292,12309],"content":"saturate Function"},{"content":"Clamps _X within the range of 0 to 1","pos":[12313,12349]},{"content":"Parameters","pos":[12421,12431]},{"content":"Floating-point value","pos":[12443,12463]},{"content":"Return Value","pos":[12473,12485]},{"content":"Returns _X clamped within the range of 0 to 1","pos":[12489,12534]},{"pos":[12574,12587],"content":"sign Function"},{"content":"Determines the sign of the specified argument.","pos":[12591,12637]},{"content":"Parameters","pos":[12701,12711]},{"content":"Integer value","pos":[12723,12736]},{"content":"Return Value","pos":[12746,12758]},{"content":"The sign of the argument.","pos":[12762,12787]},{"pos":[12833,12852],"content":"smoothstep Function"},{"content":"Returns a smooth Hermite interpolation between 0 and 1, if _X is in the range [_Min, _Max].","pos":[12856,12947]},{"content":"Parameters","pos":[13062,13072]},{"content":"Floating-point value","pos":[13086,13106]},{"content":"Floating-point value","pos":[13123,13143]},{"content":"Floating-point value","pos":[13158,13178]},{"content":"Return Value","pos":[13188,13200]},{"content":"Returns 0 if _X is less than _Min; 1 if _X is greater than _Max; otherwise, a value between 0 and 1 if _X is in the range [_Min, _Max]","pos":[13204,13338]},{"pos":[13378,13391],"content":"step Function"},{"content":"Compares two values, returning 0 or 1 based on which value is greater","pos":[13395,13464]},{"content":"Parameters","pos":[13553,13563]},{"content":"Floating-point value","pos":[13575,13595]},{"content":"Floating-point value","pos":[13610,13630]},{"content":"Return Value","pos":[13640,13652]},{"content":"Returns 1 if the _X is greater than or equal to _Y; otherwise, 0","pos":[13656,13720]},{"pos":[13760,13773],"content":"umax Function"},{"content":"Determine the maximum numeric value of the arguments","pos":[13777,13829]},{"content":"Parameters","pos":[13939,13949]},{"content":"Integer value","pos":[13961,13974]},{"content":"Integer value","pos":[13989,14002]},{"content":"Return Value","pos":[14012,14024]},{"content":"Return the maximum numeric value of the arguments","pos":[14028,14077]},{"pos":[14117,14130],"content":"umin Function"},{"content":"Determine the minimum numeric value of the arguments","pos":[14134,14186]},{"content":"Parameters","pos":[14296,14306]},{"content":"Integer value","pos":[14318,14331]},{"content":"Integer value","pos":[14346,14359]},{"content":"Return Value","pos":[14369,14381]},{"content":"Return the minimum numeric value of the arguments","pos":[14385,14434]},{"content":"See Also","pos":[14443,14451]},{"content":"Concurrency::direct3d Namespace","pos":[14456,14487]}],"content":"---\ntitle: \"Concurrency::direct3d namespace functions (AMP) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 28943b62-52c9-42dc-baf1-ca7b095c1a19\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\n---\n# Concurrency::direct3d namespace functions (AMP)\n||||  \n|-|-|-|  \n|[abs Function](#abs_function)|[clamp Function](#clamp_function)|[countbits Function](#countbits_function)|\n|[create_accelerator_view Function](#create_accelerator_view_function)|||\n|[d3d_access_lock Function](#d3d_access_lock_function)|[d3d_access_try_lock Function](#d3d_access_try_lock_function)|[d3d_access_unlock Function](#d3d_access_unlock_function)|  \n|[firstbithigh Function](#firstbithigh_function)|[firstbitlow Function](#firstbitlow_function)|[get_buffer Function](#get_buffer_function)|  \n|[imax Function](#imax_function)|[imin Function](#imin_function)|[is_timeout_disabled Function](#is_timeout_disabled_function)|  \n|[mad Function](#mad_function)|[make_array Function](#make_array_function)|[noise Function](#noise_function)|  \n|[radians Function](#radians_function)|[rcp Function](#rcp_function)|[reversebits Function](#reversebits_function)|  \n|[saturate Function](#saturate_function)|[sign Function](#sign_function)|[smoothstep Function](#smoothstep_function)|  \n|[step Function](#step_function)|[umax Function](#umax_function)|[umin Function](#umin_function)|  \n  \n##  <a name=\"abs_function\"></a>  abs Function  \n Returns the absolute value of the argument  \n  \n```  \ninline int abs(int _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Integer value  \n  \n### Return Value  \n Returns the absolute value of the argument.  \n  \n##  <a name=\"clamp_function\"></a>  clamp Function  \n Computes the value of the first specified argument clamped to a range defined by the second and third specified arguments.  \n  \n```  \ninline float clamp(\n    float _X,  \n    float _Min,  \n    float _Max) restrict(amp);\n\n \ninline int clamp(\n    int _X,  \n    int _Min,  \n    int _Max) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n The value to be clamped  \n  \n `_Min`  \n The lower bound of the clamping range.  \n  \n `_Max`  \n The upper bound of the clamping range.  \n  \n### Return Value  \n The clamped value of `_X`.  \n  \n##  <a name=\"countbits_function\"></a>  countbits Function  \n Counts the number of set bits in _X  \n  \n```  \ninline unsigned int countbits(unsigned int _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Unsigned integer value  \n  \n### Return Value  \n Returns the number of set bits in _X  \n\n## <a name=\"create_accelerator_view_function\"></a> create_accelerator_view Function\nCreates an [accelerator_view](accelerator-view-class.md) object from a pointer to a Direct3D device interface.  \n  \n## Syntax  \n  \n```  \naccelerator_view create_accelerator_view(  \n    IUnknown * _D3D_device  \n    queuing_mode _Qmode = queuing_mode_automatic);  \n  \naccelerator_view create_accelerator_view(  \n    accelerator& _Accelerator,  \n    bool _Disable_timeout  \n    queuing_mode _Qmode = queuing_mode_automatic);  \n```  \n  \n#### Parameters  \n `_Accelerator`  \n The accelerator on which the new accelerator_view is to be created.  \n  \n `_D3D_device`  \n The pointer to the Direct3D device interface.  \n  \n `_Disable_timeout`  \n A Boolean parameter that specifies whether timeout should be disabled for the newly created accelerator_view. This corresponds to the D3D11_CREATE_DEVICE_DISABLE_GPU_TIMEOUT flag for Direct3D device creation and is used to indicate if the operating system should allow workloads that take more than 2 seconds to execute without resetting the device per the Windows timeout detection and recovery mechanism. Use of this flag is recommended if you need to perform time consuming tasks on the accelerator_view.  \n  \n `_Qmode`  \n The [queuing_mode](concurrency-namespace-enums-amp.md#queuing_mode) to be used for the newly created accelerator_view. This parameter has a default value of `queuing_mode_automatic`.  \n  \n## Return Value  \n The `accelerator_view` object created from the passed Direct3D device interface.  \n  \n## Remarks  \n This function creates a new `accelerator_view` object from an existing pointer to a Direct3D device interface. If the function call succeeds, the reference count of the parameter is incremented by means of an `AddRef` call to the interface. You can safely release the object when it is no longer required in your DirectX code. If the method call fails, a [runtime_exception](runtime-exception-class.md) is thrown.  \n  \n The `accelerator_view` object that you create by using this function is thread safe. You must synchronize concurrent use of the `accelerator_view` object. Unsynchronized concurrent usage of the `accelerator_view` object and the raw ID3D11Device interface causes undefined behavior.  \n  \n The C++ AMP runtime provides detailed error information in debug mode by using the D3D Debug layer if you use the `D3D11_CREATE_DEVICE_DEBUG` flag.  \n  \n  \n##  <a name=\"d3d_access_lock_function\"></a>  d3d_access_lock Function  \n Acquire a lock on an accelerator_view for the purpose of safely performing D3D operations on resources shared with the accelerator_view. The accelerator_view and all C++ AMP resources associated with this accelerator_view internally take this lock when performing operations and will block while another thread holds the D3D access lock. This lock is non-recursive: It is undefined behavior to call this function from a thread that already holds the lock. It is undefined behavior to perform operations on the accelerator_view or any data container associated with the accelerator_view from the thread that holds the D3D access lock. See also scoped_d3d_access_lock, a RAII-style class for a scope-based D3D access lock.  \n  \n```  \nvoid __cdecl d3d_access_lock(accelerator_view& _Av);\n```  \n  \n### Parameters  \n `_Av`  \n The accelerator_view to lock.  \n  \n##  <a name=\"d3d_access_try_lock_function\"></a>  d3d_access_try_lock Function  \n Attempt to acquire the D3D access lock on an accelerator_view without blocking.  \n  \n```  \nbool __cdecl d3d_access_try_lock(accelerator_view& _Av);\n```  \n  \n### Parameters  \n `_Av`  \n The accelerator_view to lock.  \n  \n### Return Value  \n true if the lock was acquired, or false if it is currently held by another thread.  \n  \n##  <a name=\"d3d_access_unlock_function\"></a>  d3d_access_unlock Function  \n Release the D3D access lock on the given accelerator_view. If the calling thread does not hold the lock on the accelerator_view the results are undefined.  \n  \n```  \nvoid __cdecl d3d_access_unlock(accelerator_view& _Av);\n```  \n  \n### Parameters  \n `_Av`  \n The accelerator_view for which the lock is to be released.  \n  \n##  <a name=\"firstbithigh_function\"></a>  firstbithigh Function  \n Gets the location of the first set bit in _X, beginning with the highest-order bit and moving towards the lowest-order bit.  \n  \n```  \ninline int firstbithigh(int _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Integer value  \n  \n### Return Value  \n The location of the first set bit  \n  \n##  <a name=\"firstbitlow_function\"></a>  firstbitlow Function  \n Gets the location of the first set bit in _X, beginning with the lowest-order bit and working toward the highest-order bit.  \n  \n```  \ninline int firstbitlow(int _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Integer value  \n  \n### Return Value  \n Returns The location of the first set bit  \n  \n##  <a name=\"get_buffer_function\"></a>  get_buffer Function  \n Get the Direct3D buffer interface underlying the specified array.  \n  \n```  \ntemplate<\n    typename value_type,  \n    int _Rank  \n>  \nIUnknown *get_buffer(\n    const array<value_type, _Rank>& _Array)  ;  \n```  \n  \n### Parameters  \n `value_type`  \n The type of elements in the array.  \n  \n `_Rank`  \n The rank of the array.  \n  \n `_Array`  \n An array on a Direct3D accelerator_view for which the underlying Direct3D buffer interface is returned.  \n  \n### Return Value  \n The IUnknown interface pointer corresponding to the Direct3D buffer underlying the array.  \n  \n##  <a name=\"imax_function\"></a>  imax Function  \n Determine the maximum numeric value of the arguments  \n  \n```  \ninline int imax(\n    int _X,  \n    int _Y) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Integer value  \n  \n `_Y`  \n Integer value  \n  \n### Return Value  \n Return the maximum numeric value of the arguments  \n  \n##  <a name=\"imin_function\"></a>  imin Function  \n Determine the minimum numeric value of the arguments  \n  \n```  \ninline int imin(\n    int _X,  \n    int _Y) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Integer value  \n  \n `_Y`  \n Integer value  \n  \n### Return Value  \n Return the minimum numeric value of the arguments  \n  \n##  <a name=\"is_timeout_disabled_function\"></a>  is_timeout_disabled Function  \n Returns a boolean flag indicating if timeout is disabled for the specified accelerator_view. This corresponds to the D3D11_CREATE_DEVICE_DISABLE_GPU_TIMEOUT flag for Direct3D device creation.  \n  \n```  \nbool __cdecl is_timeout_disabled(const accelerator_view& _Accelerator_view);\n```  \n  \n### Parameters  \n `_Accelerator_view`  \n The accelerator_view for which the timeout disabled setting is to be queried.  \n  \n### Return Value  \n A boolean flag indicating if timeout is disabled for the specified accelerator_view.  \n  \n##  <a name=\"mad_function\"></a>  mad Function  \n Computes the product of the first and second specified argument, then adds the third specified argument.  \n  \n```  \ninline float mad(\n    float _X,  \n    float _Y,  \n    float _Z) restrict(amp);\n\n \ninline double mad(\n    double _X,  \n    double _Y,  \n    double _Z) restrict(amp);\n\n \ninline int mad(\n    int _X,  \n    int _Y,  \n    int _Z) restrict(amp);\n\n \ninline unsigned int mad(\n    unsigned int _X,  \n    unsigned int _Y,  \n    unsigned int _Z) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n The first specified argument.  \n  \n `_Y`  \n The second specified argument.  \n  \n `_Z`  \n The third specified argument.  \n  \n### Return Value  \n The result of `_X` * `_Y` + `_Z`.  \n  \n##  <a name=\"make_array_function\"></a>  make_array Function  \n Create an array from a Direct3D buffer interface pointer.  \n  \n```  \ntemplate<\n    typename value_type,  \n    int _Rank  \n>  \narray<value_type, _Rank> make_array(\n    const extent<_Rank>& _Extent,  \n    const Concurrency::accelerator_view& _Rv,  \n    IUnknown* _D3D_buffer)  ;  \n```  \n  \n### Parameters  \n `value_type`  \n The element type of the array to be created.  \n  \n `_Rank`  \n The rank of the array to be created.  \n  \n `_Extent`  \n An extent that describes the shape of the array aggregate.  \n  \n `_Rv`  \n A D3D accelerator view on which the array is to be created.  \n  \n `_D3D_buffer`  \n IUnknown interface pointer of the D3D buffer to create the array from.  \n  \n### Return Value  \n An array created using the provided Direct3D buffer.  \n  \n##  <a name=\"noise_function\"></a>  noise Function  \n Generates a random value using the Perlin noise algorithm  \n  \n```  \ninline float noise(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value from which to generate Perlin noise  \n  \n### Return Value  \n Returns The Perlin noise value within a range between -1 and 1  \n  \n##  <a name=\"radians_function\"></a>  radians Function  \n Converts _X from degrees to radians  \n  \n```  \ninline float radians(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns _X converted from degrees to radians  \n  \n##  <a name=\"rcp_function\"></a>  rcp Function  \n Computes the reciprocal of the specified argument by using a fast approximation.  \n  \n```  \ninline float rcp(float _X) restrict(amp);\n\n \ninline double rcp(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n The value for which to compute the reciprocal.  \n  \n### Return Value  \n The reciprocal of the specified argument.  \n  \n##  <a name=\"reversebits_function\"></a>  reversebits Function  \n Reverses the order of the bits in _X  \n  \n```  \ninline unsigned int reversebits(unsigned int _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Unsigned integer value  \n  \n### Return Value  \n Returns the value with the bit order reversed in _X  \n  \n##  <a name=\"saturate_function\"></a>  saturate Function  \n Clamps _X within the range of 0 to 1  \n  \n```  \ninline float saturate(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns _X clamped within the range of 0 to 1  \n  \n##  <a name=\"sign_function\"></a>  sign Function  \n Determines the sign of the specified argument.  \n  \n```  \ninline int sign(int _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Integer value  \n  \n### Return Value  \n The sign of the argument.  \n  \n##  <a name=\"smoothstep_function\"></a>  smoothstep Function  \n Returns a smooth Hermite interpolation between 0 and 1, if _X is in the range [_Min, _Max].  \n  \n```  \ninline float smoothstep(\n    float _Min,  \n    float _Max,  \n    float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_Min`  \n Floating-point value  \n  \n `_Max`  \n Floating-point value  \n  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns 0 if _X is less than _Min; 1 if _X is greater than _Max; otherwise, a value between 0 and 1 if _X is in the range [_Min, _Max]  \n  \n##  <a name=\"step_function\"></a>  step Function  \n Compares two values, returning 0 or 1 based on which value is greater  \n  \n```  \ninline float step(\n    float _Y,  \n    float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_Y`  \n Floating-point value  \n  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns 1 if the _X is greater than or equal to _Y; otherwise, 0  \n  \n##  <a name=\"umax_function\"></a>  umax Function  \n Determine the maximum numeric value of the arguments  \n  \n```  \ninline unsigned int umax(\n    unsigned int _X,  \n    unsigned int _Y) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Integer value  \n  \n `_Y`  \n Integer value  \n  \n### Return Value  \n Return the maximum numeric value of the arguments  \n  \n##  <a name=\"umin_function\"></a>  umin Function  \n Determine the minimum numeric value of the arguments  \n  \n```  \ninline unsigned int umin(\n    unsigned int _X,  \n    unsigned int _Y) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Integer value  \n  \n `_Y`  \n Integer value  \n  \n### Return Value  \n Return the minimum numeric value of the arguments  \n  \n## See Also  \n [Concurrency::direct3d Namespace](concurrency-direct3d-namespace.md)\n"}