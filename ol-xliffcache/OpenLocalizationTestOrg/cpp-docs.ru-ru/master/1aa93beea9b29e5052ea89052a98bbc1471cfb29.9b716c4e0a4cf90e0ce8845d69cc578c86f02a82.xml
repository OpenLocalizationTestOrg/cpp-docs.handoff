{"nodes":[{"pos":[12,47],"content":"CDumpContext Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CDumpContext Class | Microsoft Docs","pos":[0,35]}]},{"pos":[730,748],"content":"CDumpContext Class","linkify":"CDumpContext Class","nodes":[{"content":"CDumpContext Class","pos":[0,18]}]},{"content":"Supports stream-oriented diagnostic output in the form of human-readable text.","pos":[749,827]},{"pos":[836,842],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[887,894],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[904,923],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[930,934]},{"content":"Description","pos":[935,946]},{"pos":[984,1041],"content":"<bpt id=\"p1\">[</bpt>CDumpContext::CDumpContext<ept id=\"p1\">](#cdumpcontext__cdumpcontext)</ept>","source":"[CDumpContext::CDumpContext](#cdumpcontext__cdumpcontext)"},{"pos":[1042,1077],"content":"Constructs a <ph id=\"ph1\">`CDumpContext`</ph> object.","source":"Constructs a `CDumpContext` object."},{"pos":[1088,1102],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1109,1113]},{"content":"Description","pos":[1114,1125]},{"pos":[1163,1214],"content":"<bpt id=\"p1\">[</bpt>CDumpContext::DumpAsHex<ept id=\"p1\">](#cdumpcontext__dumpashex)</ept>","source":"[CDumpContext::DumpAsHex](#cdumpcontext__dumpashex)"},{"content":"Dumps the indicated item in hexadecimal format.","pos":[1215,1262]},{"pos":[1267,1310],"content":"<bpt id=\"p1\">[</bpt>CDumpContext::Flush<ept id=\"p1\">](#cdumpcontext__flush)</ept>","source":"[CDumpContext::Flush](#cdumpcontext__flush)"},{"content":"Flushes any data in the dump context buffer.","pos":[1311,1355]},{"pos":[1360,1409],"content":"<bpt id=\"p1\">[</bpt>CDumpContext::GetDepth<ept id=\"p1\">](#cdumpcontext__getdepth)</ept>","source":"[CDumpContext::GetDepth](#cdumpcontext__getdepth)"},{"content":"Gets an integer corresponding to the depth of the dump.","pos":[1410,1465]},{"pos":[1470,1517],"content":"<bpt id=\"p1\">[</bpt>CDumpContext::HexDump<ept id=\"p1\">](#cdumpcontext__hexdump)</ept>","source":"[CDumpContext::HexDump](#cdumpcontext__hexdump)"},{"content":"Dumps bytes contained in an array in hexadecimal format.","pos":[1518,1574]},{"pos":[1579,1628],"content":"<bpt id=\"p1\">[</bpt>CDumpContext::SetDepth<ept id=\"p1\">](#cdumpcontext__setdepth)</ept>","source":"[CDumpContext::SetDepth](#cdumpcontext__setdepth)"},{"content":"Sets the depth of the dump.","pos":[1629,1656]},{"pos":[1667,1683],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[1690,1694]},{"content":"Description","pos":[1695,1706]},{"pos":[1744,1811],"content":"<bpt id=\"p1\">[</bpt>CDumpContext::operator <ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">&amp;lt;</ph><ept id=\"p1\">](#cdumpcontext__operator__lt__lt_)</ept>","source":"[CDumpContext::operator &lt;&lt;](#cdumpcontext__operator__lt__lt_)"},{"content":"Inserts variables and objects into the dump context.","pos":[1812,1864]},{"pos":[1874,1881],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1885,1927],"content":"<ph id=\"ph1\">`CDumpContext`</ph> does not have a base class.","source":"`CDumpContext` does not have a base class."},{"content":"You can use <bpt id=\"p1\">[</bpt>afxDump<ept id=\"p1\">](http://msdn.microsoft.com/library/4b3cfa3f-fb75-456a-9d99-a5601acbcb11)</ept>, a predeclared <ph id=\"ph1\">`CDumpContext`</ph> object, for most of your dumping.","pos":[1934,2091],"source":"You can use [afxDump](http://msdn.microsoft.com/library/4b3cfa3f-fb75-456a-9d99-a5601acbcb11), a predeclared `CDumpContext` object, for most of your dumping."},{"content":"The <ph id=\"ph1\">`afxDump`</ph> object is available only in the Debug version of the Microsoft Foundation Class Library.","pos":[2092,2194],"source":" The `afxDump` object is available only in the Debug version of the Microsoft Foundation Class Library."},{"pos":[2201,2320],"content":"Several of the memory <bpt id=\"p1\">[</bpt>diagnostic services<ept id=\"p1\">](../../mfc/reference/diagnostic-services.md)</ept> use <ph id=\"ph1\">`afxDump`</ph> for their output.","source":"Several of the memory [diagnostic services](../../mfc/reference/diagnostic-services.md) use `afxDump` for their output."},{"pos":[2327,2523],"content":"Under the Windows environment, the output from the predefined <ph id=\"ph1\">`afxDump`</ph> object, conceptually similar to the <ph id=\"ph2\">`cerr`</ph> stream, is routed to the debugger via the Windows function <bpt id=\"p1\">**</bpt>OutputDebugString<ept id=\"p1\">**</ept>.","source":"Under the Windows environment, the output from the predefined `afxDump` object, conceptually similar to the `cerr` stream, is routed to the debugger via the Windows function **OutputDebugString**."},{"content":"The <ph id=\"ph1\">`CDumpContext`</ph> class has an overloaded insertion ( <bpt id=\"p1\">**</bpt><ph id=\"ph2\">&lt;&lt;</ph><ept id=\"p1\">**</ept>) operator for <ph id=\"ph3\">`CObject`</ph> pointers that dumps the object's data.","pos":[2530,2654],"source":"The `CDumpContext` class has an overloaded insertion ( **<<**) operator for `CObject` pointers that dumps the object's data."},{"content":"If you need a custom dump format for a derived object, override <bpt id=\"p1\">[</bpt>CObject::Dump<ept id=\"p1\">](../../mfc/reference/cobject-class.md#cobject__dump)</ept>.","pos":[2655,2787],"source":" If you need a custom dump format for a derived object, override [CObject::Dump](../../mfc/reference/cobject-class.md#cobject__dump)."},{"content":"Most Microsoft Foundation classes implement an overridden <ph id=\"ph1\">`Dump`</ph> member function.","pos":[2788,2869],"source":" Most Microsoft Foundation classes implement an overridden `Dump` member function."},{"pos":[2876,3103],"content":"Classes that are not derived from <ph id=\"ph1\">`CObject`</ph>, such as <ph id=\"ph2\">`CString`</ph>, <ph id=\"ph3\">`CTime`</ph>, and <ph id=\"ph4\">`CTimeSpan`</ph>, have their own overloaded <ph id=\"ph5\">`CDumpContext`</ph> insertion operators, as do often-used structures such as <bpt id=\"p1\">**</bpt>CFileStatus<ept id=\"p1\">**</ept>, <ph id=\"ph6\">`CPoint`</ph>, and <ph id=\"ph7\">`CRect`</ph>.","source":"Classes that are not derived from `CObject`, such as `CString`, `CTime`, and `CTimeSpan`, have their own overloaded `CDumpContext` insertion operators, as do often-used structures such as **CFileStatus**, `CPoint`, and `CRect`."},{"content":"If you use the <bpt id=\"p1\">[</bpt>IMPLEMENT_DYNAMIC<ept id=\"p1\">](../../mfc/reference/run-time-object-model-services.md#implement_dynamic)</ept> or <bpt id=\"p2\">[</bpt>IMPLEMENT_SERIAL<ept id=\"p2\">](../../mfc/reference/run-time-object-model-services.md#implement_serial)</ept> macro in the implementation of your class, then <ph id=\"ph1\">`CObject::Dump`</ph> will print the name of your <ph id=\"ph2\">`CObject`</ph>-derived class.","pos":[3110,3428],"source":"If you use the [IMPLEMENT_DYNAMIC](../../mfc/reference/run-time-object-model-services.md#implement_dynamic) or [IMPLEMENT_SERIAL](../../mfc/reference/run-time-object-model-services.md#implement_serial) macro in the implementation of your class, then `CObject::Dump` will print the name of your `CObject`-derived class."},{"content":"Otherwise, it will print <ph id=\"ph1\">`CObject`</ph>.","pos":[3429,3464],"source":" Otherwise, it will print `CObject`."},{"content":"The <ph id=\"ph1\">`CDumpContext`</ph> class is available with both the Debug and Release versions of the library, but the <ph id=\"ph2\">`Dump`</ph> member function is defined only in the Debug version.","pos":[3471,3634],"source":"The `CDumpContext` class is available with both the Debug and Release versions of the library, but the `Dump` member function is defined only in the Debug version."},{"content":"Use <bpt id=\"p1\">**</bpt>#ifdef _DEBUG<ept id=\"p1\">**</ept><ph id=\"ph1\"> / </ph><ph id=\"ph2\">`#endif`</ph> statements to bracket your diagnostic code, including your custom <ph id=\"ph3\">`Dump`</ph> member functions.","pos":[3635,3758],"source":" Use **#ifdef _DEBUG** / `#endif` statements to bracket your diagnostic code, including your custom `Dump` member functions."},{"pos":[3765,3884],"content":"Before you create your own <ph id=\"ph1\">`CDumpContext`</ph> object, you must create a <ph id=\"ph2\">`CFile`</ph> object that serves as the dump destination.","source":"Before you create your own `CDumpContext` object, you must create a `CFile` object that serves as the dump destination."},{"pos":[3891,4013],"content":"For more information on <ph id=\"ph1\">`CDumpContext`</ph>, see <bpt id=\"p1\">[</bpt>Debugging MFC Applications<ept id=\"p1\">](/visualstudio/debugger/mfc-debugging-techniques)</ept>.","source":"For more information on `CDumpContext`, see [Debugging MFC Applications](/visualstudio/debugger/mfc-debugging-techniques)."},{"pos":[4020,4038],"content":"<bpt id=\"p1\">**</bpt>#define _DEBUG<ept id=\"p1\">**</ept>","source":"**#define _DEBUG**"},{"pos":[4047,4068],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[4095,4107],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[4111,4128],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afx.h","source":"**Header:** afx.h"},{"pos":[4138,4207],"content":"<bpt id=\"p1\">&lt;a name=\"cdumpcontext__cdumpcontext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDumpContext::CDumpContext","linkify":"<a name=\"cdumpcontext__cdumpcontext\"></a>  CDumpContext::CDumpContext","source":"<a name=\"cdumpcontext__cdumpcontext\"></a>  CDumpContext::CDumpContext"},{"pos":[4211,4256],"content":"Constructs an object of class <ph id=\"ph1\">`CDumpContext`</ph>.","source":"Constructs an object of class `CDumpContext`."},{"pos":[4316,4326],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the <ph id=\"ph1\">`CFile`</ph> object that is the dump destination.","pos":[4341,4402],"source":" A pointer to the `CFile` object that is the dump destination."},{"pos":[4412,4419],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4423,4473],"content":"The <ph id=\"ph1\">`afxDump`</ph> object is constructed automatically.","source":"The `afxDump` object is constructed automatically."},{"content":"Do not write to the underlying <ph id=\"ph1\">`CFile`</ph> while the dump context is active; otherwise, you will interfere with the dump.","pos":[4480,4597],"source":"Do not write to the underlying `CFile` while the dump context is active; otherwise, you will interfere with the dump."},{"content":"Under the Windows environment, the output is routed to the debugger via the Windows function <bpt id=\"p1\">**</bpt>OutputDebugString<ept id=\"p1\">**</ept>.","pos":[4598,4713],"source":" Under the Windows environment, the output is routed to the debugger via the Windows function **OutputDebugString**."},{"pos":[4723,4730],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4734,4819],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_Utilities#12<ept id=\"p2\">](../../mfc/codesnippet/cpp/cdumpcontext-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_Utilities#12](../../mfc/codesnippet/cpp/cdumpcontext-class_1.cpp)]"},{"pos":[4829,4892],"content":"<bpt id=\"p1\">&lt;a name=\"cdumpcontext__dumpashex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDumpContext::DumpAsHex","linkify":"<a name=\"cdumpcontext__dumpashex\"></a>  CDumpContext::DumpAsHex","source":"<a name=\"cdumpcontext__dumpashex\"></a>  CDumpContext::DumpAsHex"},{"content":"Dumps the specified type formatted as hexadecimal numbers.","pos":[4896,4954]},{"pos":[5274,5286],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5290,5329],"content":"A reference to a <ph id=\"ph1\">`CDumpContext`</ph> object.","source":"A reference to a `CDumpContext` object."},{"pos":[5339,5346],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this member function to dump the item of the specified type as a hexadecimal number.","pos":[5350,5439]},{"content":"To dump an array, call <bpt id=\"p1\">[</bpt>CDumpContext::HexDump<ept id=\"p1\">](#cdumpcontext__hexdump)</ept>.","pos":[5440,5511],"source":" To dump an array, call [CDumpContext::HexDump](#cdumpcontext__hexdump)."},{"pos":[5521,5528],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5532,5617],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_Utilities#13<ept id=\"p2\">](../../mfc/codesnippet/cpp/cdumpcontext-class_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_Utilities#13](../../mfc/codesnippet/cpp/cdumpcontext-class_2.cpp)]"},{"pos":[5627,5682],"content":"<bpt id=\"p1\">&lt;a name=\"cdumpcontext__flush\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDumpContext::Flush","linkify":"<a name=\"cdumpcontext__flush\"></a>  CDumpContext::Flush","source":"<a name=\"cdumpcontext__flush\"></a>  CDumpContext::Flush"},{"content":"Forces any data remaining in buffers to be written to the file attached to the dump context.","pos":[5686,5778]},{"pos":[5817,5824],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5828,5913],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_Utilities#14<ept id=\"p2\">](../../mfc/codesnippet/cpp/cdumpcontext-class_3.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_Utilities#14](../../mfc/codesnippet/cpp/cdumpcontext-class_3.cpp)]"},{"pos":[5923,5984],"content":"<bpt id=\"p1\">&lt;a name=\"cdumpcontext__getdepth\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDumpContext::GetDepth","linkify":"<a name=\"cdumpcontext__getdepth\"></a>  CDumpContext::GetDepth","source":"<a name=\"cdumpcontext__getdepth\"></a>  CDumpContext::GetDepth"},{"content":"Determines whether a deep or shallow dump is in process.","pos":[5988,6044]},{"pos":[6094,6106],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6110,6153],"content":"The depth of the dump as set by <ph id=\"ph1\">`SetDepth`</ph>.","source":"The depth of the dump as set by `SetDepth`."},{"pos":[6163,6170],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6175,6231],"content":"See the example for <bpt id=\"p1\">[</bpt>SetDepth<ept id=\"p1\">](#cdumpcontext__setdepth)</ept>.","source":"See the example for [SetDepth](#cdumpcontext__setdepth)."},{"pos":[6241,6300],"content":"<bpt id=\"p1\">&lt;a name=\"cdumpcontext__hexdump\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDumpContext::HexDump","linkify":"<a name=\"cdumpcontext__hexdump\"></a>  CDumpContext::HexDump","source":"<a name=\"cdumpcontext__hexdump\"></a>  CDumpContext::HexDump"},{"content":"Dumps an array of bytes formatted as hexadecimal numbers.","pos":[6304,6361]},{"pos":[6476,6486],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>lpszLine<ept id=\"p1\">*</ept>","pos":[6490,6500],"source":"*lpszLine*"},{"content":"A string to output at the start of a new line.","pos":[6504,6550]},{"content":"<bpt id=\"p1\">*</bpt>pby<ept id=\"p1\">*</ept>","pos":[6557,6562],"source":"*pby*"},{"content":"A pointer to a buffer containing the bytes to dump.","pos":[6566,6617]},{"content":"The number of bytes to dump.","pos":[6636,6664]},{"content":"Maximum number of bytes dumped per line (not the width of the output line).","pos":[6683,6758]},{"pos":[6768,6775],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6779,6898],"content":"To dump a single, specific item type as a hexadecimal number, call <bpt id=\"p1\">[</bpt>CDumpContext::DumpAsHex<ept id=\"p1\">](#cdumpcontext__dumpashex)</ept>.","source":"To dump a single, specific item type as a hexadecimal number, call [CDumpContext::DumpAsHex](#cdumpcontext__dumpashex)."},{"pos":[6908,6915],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6919,7004],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_Utilities#15<ept id=\"p2\">](../../mfc/codesnippet/cpp/cdumpcontext-class_4.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_Utilities#15](../../mfc/codesnippet/cpp/cdumpcontext-class_4.cpp)]"},{"pos":[7014,7093],"content":"<bpt id=\"p1\">&lt;a name=\"cdumpcontext__operator__lt__lt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDumpContext::operator <ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">&amp;lt;</ph>","linkify":"<a name=\"cdumpcontext__operator__lt__lt_\"></a>  CDumpContext::operator &lt;&lt;","source":"<a name=\"cdumpcontext__operator__lt__lt_\"></a>  CDumpContext::operator &lt;&lt;"},{"content":"Outputs the specified data to the dump context.","pos":[7097,7144]},{"pos":[8386,8398],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A <ph id=\"ph1\">`CDumpContext`</ph> reference.","pos":[8402,8429],"source":"A `CDumpContext` reference."},{"content":"Using the return value, you can write multiple insertions on a single line of source code.","pos":[8430,8520]},{"pos":[8530,8537],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The insertion operator is overloaded for <ph id=\"ph1\">`CObject`</ph> pointers as well as for most primitive types.","pos":[8541,8637],"source":"The insertion operator is overloaded for `CObject` pointers as well as for most primitive types."},{"content":"A pointer to character results in a dump of string contents; a pointer to <ph id=\"ph1\">`void`</ph> results in a hexadecimal dump of the address only.","pos":[8638,8769],"source":" A pointer to character results in a dump of string contents; a pointer to `void` results in a hexadecimal dump of the address only."},{"content":"A <bpt id=\"p1\">**</bpt>LONGLONG<ept id=\"p1\">**</ept> results in a dump of a 64-bit signed integer; A <bpt id=\"p2\">**</bpt>ULONGLONG<ept id=\"p2\">**</ept> results in a dump of a 64-bit unsigned integer.","pos":[8770,8894],"source":" A **LONGLONG** results in a dump of a 64-bit signed integer; A **ULONGLONG** results in a dump of a 64-bit unsigned integer."},{"content":"If you use the <ph id=\"ph1\">`IMPLEMENT_DYNAMIC`</ph> or <ph id=\"ph2\">`IMPLEMENT_SERIAL`</ph> macro in the implementation of your class, then the insertion operator, through <ph id=\"ph3\">`CObject::Dump`</ph>, will print the name of your <ph id=\"ph4\">`CObject`</ph>-derived class.","pos":[8901,9107],"source":"If you use the `IMPLEMENT_DYNAMIC` or `IMPLEMENT_SERIAL` macro in the implementation of your class, then the insertion operator, through `CObject::Dump`, will print the name of your `CObject`-derived class."},{"content":"Otherwise, it will print <ph id=\"ph1\">`CObject`</ph>.","pos":[9108,9143],"source":" Otherwise, it will print `CObject`."},{"content":"If you override the <ph id=\"ph1\">`Dump`</ph> function of the class, then you can provide a more meaningful output of the object's contents instead of a hexadecimal dump.","pos":[9144,9295],"source":" If you override the `Dump` function of the class, then you can provide a more meaningful output of the object's contents instead of a hexadecimal dump."},{"pos":[9305,9312],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9316,9401],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_Utilities#17<ept id=\"p2\">](../../mfc/codesnippet/cpp/cdumpcontext-class_5.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_Utilities#17](../../mfc/codesnippet/cpp/cdumpcontext-class_5.cpp)]"},{"pos":[9411,9472],"content":"<bpt id=\"p1\">&lt;a name=\"cdumpcontext__setdepth\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDumpContext::SetDepth","linkify":"<a name=\"cdumpcontext__setdepth\"></a>  CDumpContext::SetDepth","source":"<a name=\"cdumpcontext__setdepth\"></a>  CDumpContext::SetDepth"},{"content":"Sets the depth for the dump.","pos":[9476,9504]},{"pos":[9559,9569],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>nNewDepth<ept id=\"p1\">*</ept>","pos":[9573,9584],"source":"*nNewDepth*"},{"content":"The new depth value.","pos":[9588,9608]},{"pos":[9618,9625],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you are dumping a primitive type or simple <ph id=\"ph1\">`CObject`</ph> that contains no pointers to other objects, then a value of 0 is sufficient.","pos":[9629,9761],"source":"If you are dumping a primitive type or simple `CObject` that contains no pointers to other objects, then a value of 0 is sufficient."},{"content":"A value greater than 0 specifies a deep dump where all objects are dumped recursively.","pos":[9762,9848]},{"content":"For example, a deep dump of a collection will dump all elements of the collection.","pos":[9849,9931]},{"content":"You may use other specific depth values in your derived classes.","pos":[9932,9996]},{"pos":[10004,10099],"content":"[!NOTE]\n Circular references are not detected in deep dumps and can result in infinite loops.","leadings":["","> "],"nodes":[{"content":"Circular references are not detected in deep dumps and can result in infinite loops.","pos":[9,93]}]},{"pos":[10109,10116],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10120,10205],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_Utilities#16<ept id=\"p2\">](../../mfc/codesnippet/cpp/cdumpcontext-class_6.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_Utilities#16](../../mfc/codesnippet/cpp/cdumpcontext-class_6.cpp)]"},{"pos":[10214,10222],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[10226,10274],"source":"[Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CFile Class<ept id=\"p1\">](../../mfc/reference/cfile-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[10277,10328],"source":" [CFile Class](../../mfc/reference/cfile-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CObject Class<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","pos":[10331,10385],"source":" [CObject Class](../../mfc/reference/cobject-class.md)"}],"content":"---\ntitle: \"CDumpContext Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CDumpContext\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CDumpContext class\"\n  - \"AfxDump object\"\n  - \"diagnostics, diagnostic classes\"\n  - \"diagnostic classes\"\n  - \"diagnosis, diagnostic classes\"\nms.assetid: 98c52b2d-14b5-48ed-b423-479a4d1c60fa\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CDumpContext Class\nSupports stream-oriented diagnostic output in the form of human-readable text.  \n  \n## Syntax  \n  \n```  \nclass CDumpContext  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CDumpContext::CDumpContext](#cdumpcontext__cdumpcontext)|Constructs a `CDumpContext` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CDumpContext::DumpAsHex](#cdumpcontext__dumpashex)|Dumps the indicated item in hexadecimal format.|  \n|[CDumpContext::Flush](#cdumpcontext__flush)|Flushes any data in the dump context buffer.|  \n|[CDumpContext::GetDepth](#cdumpcontext__getdepth)|Gets an integer corresponding to the depth of the dump.|  \n|[CDumpContext::HexDump](#cdumpcontext__hexdump)|Dumps bytes contained in an array in hexadecimal format.|  \n|[CDumpContext::SetDepth](#cdumpcontext__setdepth)|Sets the depth of the dump.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CDumpContext::operator &lt;&lt;](#cdumpcontext__operator__lt__lt_)|Inserts variables and objects into the dump context.|  \n  \n## Remarks  \n `CDumpContext` does not have a base class.  \n  \n You can use [afxDump](http://msdn.microsoft.com/library/4b3cfa3f-fb75-456a-9d99-a5601acbcb11), a predeclared `CDumpContext` object, for most of your dumping. The `afxDump` object is available only in the Debug version of the Microsoft Foundation Class Library.  \n  \n Several of the memory [diagnostic services](../../mfc/reference/diagnostic-services.md) use `afxDump` for their output.  \n  \n Under the Windows environment, the output from the predefined `afxDump` object, conceptually similar to the `cerr` stream, is routed to the debugger via the Windows function **OutputDebugString**.  \n  \n The `CDumpContext` class has an overloaded insertion ( **<<**) operator for `CObject` pointers that dumps the object's data. If you need a custom dump format for a derived object, override [CObject::Dump](../../mfc/reference/cobject-class.md#cobject__dump). Most Microsoft Foundation classes implement an overridden `Dump` member function.  \n  \n Classes that are not derived from `CObject`, such as `CString`, `CTime`, and `CTimeSpan`, have their own overloaded `CDumpContext` insertion operators, as do often-used structures such as **CFileStatus**, `CPoint`, and `CRect`.  \n  \n If you use the [IMPLEMENT_DYNAMIC](../../mfc/reference/run-time-object-model-services.md#implement_dynamic) or [IMPLEMENT_SERIAL](../../mfc/reference/run-time-object-model-services.md#implement_serial) macro in the implementation of your class, then `CObject::Dump` will print the name of your `CObject`-derived class. Otherwise, it will print `CObject`.  \n  \n The `CDumpContext` class is available with both the Debug and Release versions of the library, but the `Dump` member function is defined only in the Debug version. Use **#ifdef _DEBUG** / `#endif` statements to bracket your diagnostic code, including your custom `Dump` member functions.  \n  \n Before you create your own `CDumpContext` object, you must create a `CFile` object that serves as the dump destination.  \n  \n For more information on `CDumpContext`, see [Debugging MFC Applications](/visualstudio/debugger/mfc-debugging-techniques).  \n  \n **#define _DEBUG**  \n  \n## Inheritance Hierarchy  \n `CDumpContext`  \n  \n## Requirements  \n **Header:** afx.h  \n  \n##  <a name=\"cdumpcontext__cdumpcontext\"></a>  CDumpContext::CDumpContext  \n Constructs an object of class `CDumpContext`.  \n  \n```  \nCDumpContext(CFile* pFile = NULL);\n```  \n  \n### Parameters  \n `pFile`  \n A pointer to the `CFile` object that is the dump destination.  \n  \n### Remarks  \n The `afxDump` object is constructed automatically.  \n  \n Do not write to the underlying `CFile` while the dump context is active; otherwise, you will interfere with the dump. Under the Windows environment, the output is routed to the debugger via the Windows function **OutputDebugString**.  \n  \n### Example  \n [!code-cpp[NVC_MFC_Utilities#12](../../mfc/codesnippet/cpp/cdumpcontext-class_1.cpp)]  \n  \n##  <a name=\"cdumpcontext__dumpashex\"></a>  CDumpContext::DumpAsHex  \n Dumps the specified type formatted as hexadecimal numbers.  \n  \n```  \nCDumpContext& DumpAsHex(BYTE b);\n\n \nCDumpContext& DumpAsHex(DWORD dw);\n\n \nCDumpContext& DumpAsHex(int n);\n\n \nCDumpContext& DumpAsHex(LONG l);\n\n \nCDumpContext& DumpAsHex(LONGLONG n);\n\n \nCDumpContext& DumpAsHex(UINT u);\n\n \nCDumpContext& DumpAsHex(ULONGLONG n);\n\n \nCDumpContext& DumpAsHex(WORD w);\n```  \n  \n### Return Value  \n A reference to a `CDumpContext` object.  \n  \n### Remarks  \n Call this member function to dump the item of the specified type as a hexadecimal number. To dump an array, call [CDumpContext::HexDump](#cdumpcontext__hexdump).  \n  \n### Example  \n [!code-cpp[NVC_MFC_Utilities#13](../../mfc/codesnippet/cpp/cdumpcontext-class_2.cpp)]  \n  \n##  <a name=\"cdumpcontext__flush\"></a>  CDumpContext::Flush  \n Forces any data remaining in buffers to be written to the file attached to the dump context.  \n  \n```  \nvoid Flush();\n```  \n  \n### Example  \n [!code-cpp[NVC_MFC_Utilities#14](../../mfc/codesnippet/cpp/cdumpcontext-class_3.cpp)]  \n  \n##  <a name=\"cdumpcontext__getdepth\"></a>  CDumpContext::GetDepth  \n Determines whether a deep or shallow dump is in process.  \n  \n```  \nint GetDepth() const;\n\n \n```  \n  \n### Return Value  \n The depth of the dump as set by `SetDepth`.  \n  \n### Example  \n  See the example for [SetDepth](#cdumpcontext__setdepth).  \n  \n##  <a name=\"cdumpcontext__hexdump\"></a>  CDumpContext::HexDump  \n Dumps an array of bytes formatted as hexadecimal numbers.  \n  \n```  \nvoid HexDump(\n    LPCTSTR lpszLine,  \n    BYTE* pby,  \n    int nBytes,  \n    int nWidth);\n```  \n  \n### Parameters  \n *lpszLine*  \n A string to output at the start of a new line.  \n  \n *pby*  \n A pointer to a buffer containing the bytes to dump.  \n  \n `nBytes`  \n The number of bytes to dump.  \n  \n `nWidth`  \n Maximum number of bytes dumped per line (not the width of the output line).  \n  \n### Remarks  \n To dump a single, specific item type as a hexadecimal number, call [CDumpContext::DumpAsHex](#cdumpcontext__dumpashex).  \n  \n### Example  \n [!code-cpp[NVC_MFC_Utilities#15](../../mfc/codesnippet/cpp/cdumpcontext-class_4.cpp)]  \n  \n##  <a name=\"cdumpcontext__operator__lt__lt_\"></a>  CDumpContext::operator &lt;&lt;  \n Outputs the specified data to the dump context.  \n  \n```  \nCDumpContext& operator<<(const CObject* pOb);\n\n \nthrow(CFileException*);\n\n \nCDumpContext& operator<<(const CObject& ob);\n\n \nthrow(CFileException*);\n\n \nCDumpContext& operator<<(LPCTSTR lpsz);\n\n \nthrow(CFileException*);\n\n \nCDumpContext& operator<<(const void* lp);\n\n \nthrow(CFileException*);\n\n \nCDumpContext& operator<<(BYTE by);\n\n \nthrow(CFileException*);\n\n \nCDumpContext& operator<<(WORD w);\n\n \nthrow(CFileException*);\n\n \nCDumpContext& operator<<(DWORD dw);\n\n \nthrow(CFileException*);\n\n \nCDumpContext& operator<<(int n);\n\n \nthrow(CFileException*);\n\n \nCDumpContext& operator<<(double d);\n\n \nthrow(CFileException*);\n\n \nCDumpContext& operator<<(float f);\n\n \nthrow(CFileException*);\n\n \nCDumpContext& operator<<(LONG l);\n\n \nthrow(CFileException*);\n\n \nCDumpContext& operator<<(UINT u);\n\n \nthrow(CFileException*);\n\n \nCDumpContext& operator<<(LPCWSTR lpsz);\n\n \nthrow(CFileException*);\n\n \nCDumpContext& operator<<(LPCSTR lpsz);\n\n \nthrow(CFileException*);\n\n \nCDumpContext& operator<<(LONGLONG n);\n\n \nCDumpContext& operator<<(ULONGLONG n);\n\n \nCDumpContext& operator<<(HWND h);\n\n \nCDumpContext& operator<<(HDC h);\n\n \nCDumpContext& operator<<(HMENU h);\n\n \nCDumpContext& operator<<(HACCEL h);\n\n \nCDumpContext& operator<<(HFONT h);\n```  \n  \n### Return Value  \n A `CDumpContext` reference. Using the return value, you can write multiple insertions on a single line of source code.  \n  \n### Remarks  \n The insertion operator is overloaded for `CObject` pointers as well as for most primitive types. A pointer to character results in a dump of string contents; a pointer to `void` results in a hexadecimal dump of the address only. A **LONGLONG** results in a dump of a 64-bit signed integer; A **ULONGLONG** results in a dump of a 64-bit unsigned integer.  \n  \n If you use the `IMPLEMENT_DYNAMIC` or `IMPLEMENT_SERIAL` macro in the implementation of your class, then the insertion operator, through `CObject::Dump`, will print the name of your `CObject`-derived class. Otherwise, it will print `CObject`. If you override the `Dump` function of the class, then you can provide a more meaningful output of the object's contents instead of a hexadecimal dump.  \n  \n### Example  \n [!code-cpp[NVC_MFC_Utilities#17](../../mfc/codesnippet/cpp/cdumpcontext-class_5.cpp)]  \n  \n##  <a name=\"cdumpcontext__setdepth\"></a>  CDumpContext::SetDepth  \n Sets the depth for the dump.  \n  \n```  \nvoid SetDepth(int nNewDepth);\n```  \n  \n### Parameters  \n *nNewDepth*  \n The new depth value.  \n  \n### Remarks  \n If you are dumping a primitive type or simple `CObject` that contains no pointers to other objects, then a value of 0 is sufficient. A value greater than 0 specifies a deep dump where all objects are dumped recursively. For example, a deep dump of a collection will dump all elements of the collection. You may use other specific depth values in your derived classes.  \n  \n> [!NOTE]\n>  Circular references are not detected in deep dumps and can result in infinite loops.  \n  \n### Example  \n [!code-cpp[NVC_MFC_Utilities#16](../../mfc/codesnippet/cpp/cdumpcontext-class_6.cpp)]  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CFile Class](../../mfc/reference/cfile-class.md)   \n [CObject Class](../../mfc/reference/cobject-class.md)\n"}