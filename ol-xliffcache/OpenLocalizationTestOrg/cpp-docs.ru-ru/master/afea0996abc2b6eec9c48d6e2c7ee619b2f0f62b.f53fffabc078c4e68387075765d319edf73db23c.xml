{"nodes":[{"pos":[12,55],"content":"CAnimationController Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CAnimationController Class | Microsoft Docs","pos":[0,43]}]},{"content":"CAnimationController Class","pos":[684,710]},{"content":"Implements the animation controller, which provides a central interface for creating and managing animations.","pos":[711,820]},{"content":"Syntax","pos":[829,835]},{"content":"Members","pos":[906,913]},{"content":"Public Constructors","pos":[923,942]},{"content":"Name","pos":[949,953]},{"content":"Description","pos":[954,965]},{"content":"CAnimationController::CAnimationController","pos":[1004,1046]},{"content":"Constructs an animation controller.","pos":[1093,1128]},{"content":"CAnimationController::~CAnimationController","pos":[1134,1177]},{"content":"The destructor.","pos":[1225,1240]},{"content":"Called when animation controller object is being destroyed.","pos":[1241,1300]},{"content":"Public Methods","pos":[1311,1325]},{"content":"Name","pos":[1332,1336]},{"content":"Description","pos":[1337,1348]},{"content":"CAnimationController::AddAnimationObject","pos":[1387,1427]},{"content":"Adds an animation object to a group that belongs to the animation controller.","pos":[1472,1549]},{"content":"CAnimationController::AddKeyframeToGroup","pos":[1555,1595]},{"content":"Adds a keyframe to group.","pos":[1640,1665]},{"content":"CAnimationController::AnimateGroup","pos":[1671,1705]},{"content":"Prepares a group to run animation and optionally schedules it.","pos":[1744,1806]},{"content":"CAnimationController::CleanUpGroup","pos":[1812,1846]},{"content":"Overloaded.","pos":[1885,1896]},{"content":"Called by the framework to clean up the group when animation has been scheduled.","pos":[1897,1977]},{"content":"CAnimationController::CreateKeyframe","pos":[1983,2019]},{"content":"Overloaded.","pos":[2060,2071]},{"content":"Creates a keyframe that depends on transition and adds it to the specified group.","pos":[2072,2153]},{"content":"CAnimationController::EnableAnimationManagerEvent","pos":[2159,2208]},{"content":"Sets or releases a handler to call when animation manager's status changes.","pos":[2262,2337]},{"content":"CAnimationController::EnableAnimationTimerEventHandler","pos":[2343,2397]},{"content":"Sets or releases a handler for timing events and handler for timing updates.","pos":[2456,2532]},{"content":"CAnimationController::EnablePriorityComparisonHandler","pos":[2538,2591]},{"content":"Sets or releases the priority comparison handler to call to determine whether a scheduled storyboard can be cancelled, concluded, trimmed or compressed.","pos":[2649,2801]},{"content":"CAnimationController::EnableStoryboardEventHandler","pos":[2807,2857]},{"content":"Sets or releases a handler for storyboard status and update events.","pos":[2912,2979]},{"content":"CAnimationController::FindAnimationGroup","pos":[2985,3025]},{"content":"Overloaded.","pos":[3070,3081]},{"content":"Finds an animation group by its storyboard.","pos":[3082,3125]},{"content":"CAnimationController::FindAnimationObject","pos":[3131,3172]},{"content":"Finds animation object containing a specified animation variable.","pos":[3218,3283]},{"content":"CAnimationController::GetKeyframeStoryboardStart","pos":[3289,3337]},{"content":"Returns a keyframe that identifies start of storyboard.","pos":[3390,3445]},{"content":"CAnimationController::GetUIAnimationManager","pos":[3451,3494]},{"content":"Provides access to encapsulated IUIAnimationManager object.","pos":[3542,3601]},{"content":"CAnimationController::GetUIAnimationTimer","pos":[3607,3648]},{"content":"Provides access to encapsulated IUIAnimationTimer object.","pos":[3694,3751]},{"content":"CAnimationController::GetUITransitionFactory","pos":[3757,3801]},{"content":"A pointer to IUIAnimationTransitionFactory interface or NULL, if creation of transition library failed.","pos":[3850,3953]},{"content":"CAnimationController::GetUITransitionLibrary","pos":[3959,4003]},{"content":"Provides access to encapsulated IUIAnimationTransitionLibrary object.","pos":[4052,4121]},{"content":"CAnimationController::IsAnimationInProgress","pos":[4127,4170]},{"content":"Tells whether at least one group is playing animation.","pos":[4218,4272]},{"content":"CAnimationController::IsValid","pos":[4278,4307]},{"content":"Tells whether animation controller is valid.","pos":[4341,4385]},{"content":"CAnimationController::OnAnimationIntegerValueChanged","pos":[4391,4443]},{"content":"Called by the framework when integer value of animation variable has changed.","pos":[4500,4577]},{"content":"CAnimationController::OnAnimationManagerStatusChanged","pos":[4583,4636]},{"content":"Called by the framework in response to StatusChanged event from animation manager.","pos":[4694,4776]},{"content":"CAnimationController::OnAnimationTimerPostUpdate","pos":[4782,4830]},{"content":"Called by the framework after an animation update is finished.","pos":[4883,4945]},{"content":"CAnimationController::OnAnimationTimerPreUpdate","pos":[4951,4998]},{"content":"Called by the framework before an animation update begins.","pos":[5050,5108]},{"content":"CAnimationController::OnAnimationTimerRenderingTooSlow","pos":[5114,5168]},{"content":"Called by the framework when the rendering frame rate for an animation falls below a minimum desirable frame rate.","pos":[5227,5341]},{"content":"CAnimationController::OnAnimationValueChanged","pos":[5347,5392]},{"content":"Called by the framework when value of animation variable has changed.","pos":[5442,5511]},{"content":"CAnimationController::OnBeforeAnimationStart","pos":[5517,5561]},{"content":"Called by the framework right before the animation is scheduled.","pos":[5610,5674]},{"content":"CAnimationController::OnHasPriorityCancel","pos":[5680,5721]},{"content":"Called by the framework to resolve scheduling conflicts.","pos":[5767,5823]},{"content":"CAnimationController::OnHasPriorityCompress","pos":[5829,5872]},{"content":"Called by the framework to resolve scheduling conflicts.","pos":[5920,5976]},{"content":"CAnimationController::OnHasPriorityConclude","pos":[5982,6025]},{"content":"Called by the framework to resolve scheduling conflicts.","pos":[6073,6129]},{"content":"CAnimationController::OnHasPriorityTrim","pos":[6135,6174]},{"content":"Called by the framework to resolve scheduling conflicts.","pos":[6218,6274]},{"content":"CAnimationController::OnStoryboardStatusChanged","pos":[6280,6327]},{"content":"Called by the framework when storyboard status has changed.","pos":[6379,6438]},{"content":"CAnimationController::OnStoryboardUpdated","pos":[6444,6485]},{"content":"Called by the framework when storyboard has been updated.","pos":[6531,6588]},{"content":"CAnimationController::RemoveAllAnimationGroups","pos":[6594,6640]},{"content":"Removes all animation groups from animation controller.","pos":[6691,6746]},{"content":"CAnimationController::RemoveAnimationGroup","pos":[6752,6794]},{"content":"Removes an animation group with specified ID from animation controller.","pos":[6841,6912]},{"content":"CAnimationController::RemoveAnimationObject","pos":[6918,6961]},{"content":"Remove an animation object from animation controller.","pos":[7009,7062]},{"content":"CAnimationController::RemoveTransitions","pos":[7068,7107]},{"content":"Removes transitions from animation objects that belong to the specified group.","pos":[7151,7229]},{"content":"CAnimationController::ScheduleGroup","pos":[7235,7270]},{"content":"Schedules an animation.","pos":[7310,7333]},{"content":"CAnimationController::SetRelatedWnd","pos":[7339,7374]},{"content":"Establishes a relationship between animation controller and a window.","pos":[7414,7483]},{"content":"CAnimationController::UpdateAnimationManager","pos":[7489,7533]},{"content":"Directs the animation manager to update the values of all animation variables.","pos":[7582,7660]},{"content":"Protected Methods","pos":[7671,7688]},{"content":"Name","pos":[7695,7699]},{"content":"Description","pos":[7700,7711]},{"content":"CAnimationController::CleanUpGroup","pos":[7750,7784]},{"content":"Overloaded.","pos":[7823,7834]},{"content":"A helper that cleans up the group.","pos":[7835,7869]},{"content":"CAnimationController::OnAfterSchedule","pos":[7875,7912]},{"content":"Called by the framework when an animation for the specified group has just been scheduled.","pos":[7954,8044]},{"content":"Protected Data Members","pos":[8055,8077]},{"content":"Name","pos":[8084,8088]},{"content":"Description","pos":[8089,8100]},{"content":"CAnimationController::gkeyframeStoryboardStart","pos":[8139,8185]},{"content":"A keyframe that represents start of storyboard.","pos":[8237,8284]},{"content":"CAnimationController::m_bIsValid","pos":[8290,8322]},{"content":"Specifies whether an animation controller is valid or not.","pos":[8359,8417]},{"content":"This member is set to FALSE if current OS does not support Windows Animation API.","pos":[8418,8499]},{"content":"CAnimationController::m_lstAnimationGroups","pos":[8505,8547]},{"content":"A list of animation groups that belong to this animation controller.","pos":[8594,8662]},{"content":"CAnimationController::m_pAnimationManager","pos":[8668,8709]},{"content":"Stores a pointer to Animation Manager COM object.","pos":[8755,8804]},{"content":"CAnimationController::m_pAnimationTimer","pos":[8810,8849]},{"content":"Stores a pointer to Animation Timer COM object.","pos":[8893,8940]},{"content":"CAnimationController::m_pRelatedWnd","pos":[8946,8981]},{"content":"A pointer to a related CWnd object, which can be automatically redrawn when the status of animation manager has changed, or post update event has occurred.","pos":[9021,9176]},{"content":"Can be NULL.","pos":[9177,9189]},{"content":"CAnimationController::m_pTransitionFactory","pos":[9195,9237]},{"content":"Stores a pointer to Transition Factory COM object.","pos":[9284,9334]},{"content":"CAnimationController::m_pTransitionLibrary","pos":[9340,9382]},{"content":"Stores a pointer to Transition Library COM object.","pos":[9429,9479]},{"content":"Remarks","pos":[9489,9496]},{"content":"The CAnimationController class is the key class that manages animations.","pos":[9500,9572]},{"content":"You may create one or more instances of animation controller in an application and, optionally, connect an instance of animation controller to a CWnd object using CAnimationController::SetRelatedWnd.","pos":[9573,9772]},{"content":"This connection is required to send WM_PAINT messages to the related window automatically when animation manager status has changed or animation timer has been updated.","pos":[9773,9941]},{"content":"If you do not enable this relation, you must redraw a window that displays an animation manually.","pos":[9942,10039]},{"content":"For this purpose you can derive a class from CAnimationController and override OnAnimationManagerStatusChanged and/or OnAnimationTimerPostUpdate and invalidate one or more windows when necessary.","pos":[10040,10235]},{"content":"Inheritance Hierarchy","pos":[10244,10265]},{"content":"CObject","pos":[10270,10277]},{"content":"CAnimationController","pos":[10324,10344]},{"content":"Requirements","pos":[10405,10417]},{"pos":[10421,10457],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxanimationcontroller.h","source":"**Header:** afxanimationcontroller.h"},{"pos":[10531,10574],"content":"CAnimationController::~CAnimationController"},{"content":"The destructor.","pos":[10578,10593]},{"content":"Called when animation controller object is being destroyed.","pos":[10594,10653]},{"pos":[10773,10813],"content":"CAnimationController::AddAnimationObject"},{"content":"Adds an animation object to a group that belongs to the animation controller.","pos":[10817,10894]},{"content":"Parameters","pos":[10987,10997]},{"content":"A pointer to an animation object.","pos":[11014,11047]},{"content":"Return Value","pos":[11057,11069]},{"content":"A pointer to existing or new animation group where pObject has been added if function succeeds; NULL if pObject has already been added to a group that belongs to another animation controller.","pos":[11073,11264]},{"content":"Remarks","pos":[11274,11281]},{"content":"Call this method to add an animation object to the animation controller.","pos":[11285,11357]},{"content":"An object will be added to a group according to object's GroupID (see CAnimationBaseObject::SetID).","pos":[11358,11457]},{"content":"The animation controller will create a new group if it's the first object being added with the specified GroupID.","pos":[11458,11571]},{"content":"An animation object can be added to one animation controller only.","pos":[11572,11638]},{"content":"If you need to add an object to another controller, call RemoveAnimationObject first.","pos":[11639,11724]},{"content":"If you call SetID with new GroupID for an object that has been already added to a group, the object will be removed from the old group and added to another group with specified ID.","pos":[11725,11905]},{"pos":[11972,12012],"content":"CAnimationController::AddKeyframeToGroup"},{"content":"Adds a keyframe to group.","pos":[12016,12041]},{"content":"Parameters","pos":[12145,12155]},{"content":"Specifies Group ID.","pos":[12173,12192]},{"content":"A pointer to a keyframe.","pos":[12214,12238]},{"content":"Return Value","pos":[12248,12260]},{"content":"TRUE if the function succeeds; otherwise FALSE.","pos":[12264,12311]},{"content":"Remarks","pos":[12321,12328]},{"content":"Usually you don't need to call this method, use CAnimationController::CreateKeyframe instead, which creates and adds the created keyframe to a group automatically.","pos":[12332,12495]},{"pos":[12556,12590],"content":"CAnimationController::AnimateGroup"},{"content":"Prepares a group to run animation and optionally schedules it.","pos":[12594,12656]},{"content":"Parameters","pos":[12754,12764]},{"content":"Specifies GroupID.","pos":[12782,12800]},{"content":"Specifies whether to run animation right away.","pos":[12825,12871]},{"content":"Return Value","pos":[12881,12893]},{"content":"TRUE if animation was successfully scheduled and run.","pos":[12897,12950]},{"content":"Remarks","pos":[12960,12967]},{"content":"This method does the actual work creating storyboard, adding animation variables, applying transitions and setting keyframes.","pos":[12971,13096]},{"content":"It's possible to delay scheduling if you set bScheduleNow to FALSE.","pos":[13097,13164]},{"content":"In this case the specified group will hold a storyboard that has been set up for animation.","pos":[13165,13256]},{"content":"At that point you can setup events for the storyboard and animation variables.","pos":[13257,13335]},{"content":"When you actually need to run the animation call CAnimationController::ScheduleGroup.","pos":[13336,13421]},{"pos":[13490,13532],"content":"CAnimationController::CAnimationController"},{"content":"Constructs an animation controller.","pos":[13536,13571]},{"pos":[13676,13710],"content":"CAnimationController::CleanUpGroup"},{"content":"Called by the framework to clean up the group when animation has been scheduled.","pos":[13714,13794]},{"content":"Parameters","pos":[13902,13912]},{"content":"Specifies GroupID.","pos":[13930,13948]},{"content":"A pointer to animation group to clean.","pos":[13967,14005]},{"content":"Remarks","pos":[14015,14022]},{"content":"This method removes all transitions and keyframes from the specified group, because they are not relevant after an animation has been scheduled.","pos":[14026,14170]},{"pos":[14233,14269],"content":"CAnimationController::CreateKeyframe"},{"content":"Creates a keyframe that depends on transition and adds it to the specified group.","pos":[14273,14354]},{"content":"Parameters","pos":[14589,14599]},{"content":"Specifies Group ID for which keyframe is created.","pos":[14617,14666]},{"content":"A pointer to transition.","pos":[14690,14714]},{"content":"Keyframe will be inserted to storyboard after this transition.","pos":[14715,14777]},{"content":"A pointer to base keyframe for this keyframe.","pos":[14799,14844]},{"content":"Offset in seconds from the base keyframe specified by pKeyframe.","pos":[14863,14927]},{"content":"Return Value","pos":[14937,14949]},{"content":"A pointer to newly created keyframe if the function succeeds.","pos":[14953,15014]},{"content":"Remarks","pos":[15024,15031]},{"content":"You can store the returned pointer and base other keyframes on the newly created keyframe (see the second overload).","pos":[15035,15151]},{"content":"It's possible to begin transitions at keyframes - see CBaseTransition::SetKeyframes.","pos":[15152,15236]},{"content":"You don't need to delete keyframes created in this way, because they are deleted automatically by animation groups.","pos":[15237,15352]},{"content":"Be careful when creating keyframes based on other keyframes and transitions and avoid circular references.","pos":[15353,15459]},{"pos":[15535,15584],"content":"CAnimationController::EnableAnimationManagerEvent"},{"content":"Sets or releases a handler to call when animation manager's status changes.","pos":[15588,15663]},{"content":"Parameters","pos":[15751,15761]},{"content":"Specifies whether to set or release a handler.","pos":[15778,15824]},{"content":"Return Value","pos":[15834,15846]},{"content":"TRUE if the handler was successfully set or released.","pos":[15850,15903]},{"content":"Remarks","pos":[15913,15920]},{"content":"When a handler is set (enabled) Windows Animation calls OnAnimationManagerStatusChanged when animation manager's status changes.","pos":[15924,16052]},{"pos":[16133,16187],"content":"CAnimationController::EnableAnimationTimerEventHandler"},{"content":"Sets or releases a handler for timing events and handler for timing updates.","pos":[16191,16267]},{"content":"Parameters","pos":[16449,16459]},{"content":"Specifies whether to set or release the handlers.","pos":[16476,16525]},{"content":"Specifies idle behavior for timer update handler.","pos":[16550,16599]},{"content":"Return Value","pos":[16609,16621]},{"content":"TRUE if handlers were successfully set or released; FALSE if this method is called for a second time without releasing the handlers first, or if any other error occurs.","pos":[16625,16793]},{"content":"Remarks","pos":[16803,16810]},{"content":"When the handlers are set (enabled) Windows Animation API calls OnAnimationTimerPreUpdate, OnAnimationTimerPostUpdate, OnRenderingTooSlow methods.","pos":[16814,16960]},{"content":"You need to enable animation timers to allow Windows Animation API update storyboards.","pos":[16961,17047]},{"content":"Otherwise you'll need to call CAnimationController::UpdateAnimationManager in order to direct the animation manager to update the values of all animation variables.","pos":[17048,17212]},{"pos":[17292,17345],"content":"CAnimationController::EnablePriorityComparisonHandler"},{"content":"Sets or releases the priority comparison handler to call to determine whether a scheduled storyboard can be cancelled, concluded, trimmed or compressed.","pos":[17349,17501]},{"content":"Parameters","pos":[17593,17603]},{"content":"A combination of UI_ANIMATION_PHT_ flags (see remarks), which specifies what handlers to set or release.","pos":[17626,17730]},{"content":"Return Value","pos":[17740,17752]},{"content":"TRUE if the handler was successfully set or released.","pos":[17756,17809]},{"content":"Remarks","pos":[17819,17826]},{"content":"When a handler is set (enabled) Windows Animation calls the following virtual methods depending on dwHandlerType: OnHasPriorityCancel, OnHasPriorityConclude, OnHasPriorityTrim, OnHasPriorityCompress.","pos":[17830,18029]},{"content":"dwHandler can be a combination of the following flags: UI_ANIMATION_PHT_NONE - release all handlers UI_ANIMATION_PHT_CANCEL - set Cancel comparison handler UI_ANIMATION_PHT_CONCLUDE - set Conclude comparison handler UI_ANIMATION_PHT_COMPRESS - set Compress comparison handler UI_ANIMATION_PHT_TRIM - set Trim comparison handler UI_ANIMATION_PHT_CANCEL_REMOVE - remove Cancel comparison handler UI_ANIMATION_PHT_CONCLUDE_REMOVE - remove Conclude comparison handler UI_ANIMATION_PHT_COMPRESS_REMOVE - remove Compress comparison handler UI_ANIMATION_PHT_TRIM_REMOVE - remove Trim comparison handler","pos":[18030,18625]},{"pos":[18702,18752],"content":"CAnimationController::EnableStoryboardEventHandler"},{"content":"Sets or releases a handler for storyboard status and update events.","pos":[18756,18823]},{"content":"Parameters","pos":[18940,18950]},{"content":"Specifies Group ID.","pos":[18968,18987]},{"content":"Specifies whether to set or release a handler.","pos":[19007,19053]},{"content":"Return Value","pos":[19063,19075]},{"content":"TRUE if the handler was successfully set or released; FALSE if the specified animation group is now found or animation for the specified group has not been initiated and its internal storyboard is NULL.","pos":[19079,19281]},{"content":"Remarks","pos":[19291,19298]},{"content":"When a handler is set (enabled) Windows Animation API calls OnStoryboardStatusChanges and OnStoryboardUpdated virtual methods.","pos":[19302,19428]},{"content":"A handler must be set after CAnimationController::Animate has been called for the specified animation group, because it creates encapsulated IUIAnimationStoryboard object.","pos":[19429,19600]},{"pos":[19667,19707],"content":"CAnimationController::FindAnimationGroup"},{"content":"Finds an animation group by its Group ID.","pos":[19711,19752]},{"content":"Parameters","pos":[19908,19918]},{"content":"Specifies a GroupID.","pos":[19936,19956]},{"content":"A pointer to a storyboard.","pos":[19980,20006]},{"content":"Return Value","pos":[20016,20028]},{"content":"A pointer to animation group or NULL if the group with specified ID is not found.","pos":[20032,20113]},{"content":"Remarks","pos":[20123,20130]},{"content":"Use this method to find an animation group at runtime.","pos":[20134,20188]},{"content":"A group is created and added to the internal list of animation groups when a first animation object with particular GroupID is being added to animation controller.","pos":[20189,20352]},{"pos":[20420,20461],"content":"CAnimationController::FindAnimationObject"},{"content":"Finds animation object containing a specified animation variable.","pos":[20465,20530]},{"content":"Parameters","pos":[20691,20701]},{"content":"A pointer to animation variable.","pos":[20720,20752]},{"content":"Output.","pos":[20773,20780]},{"content":"Contains a pointer to animation object or NULL.","pos":[20781,20828]},{"content":"Output.","pos":[20848,20855]},{"content":"Contains a pointer to animation group that holds the animation object, or NULL.","pos":[20856,20935]},{"content":"Return Value","pos":[20945,20957]},{"content":"TRUE if object was found; otherwise FALSE.","pos":[20961,21003]},{"content":"Remarks","pos":[21013,21020]},{"content":"Called from event handlers when it's required to find an animation object from incoming animation variable.","pos":[21024,21131]},{"pos":[21205,21251],"content":"CAnimationController::gkeyframeStoryboardStart"},{"content":"A keyframe that represents start of storyboard.","pos":[21255,21302]},{"pos":[21441,21489],"content":"CAnimationController::GetKeyframeStoryboardStart"},{"content":"Returns a keyframe that identifies start of storyboard.","pos":[21493,21548]},{"content":"Return Value","pos":[21625,21637]},{"content":"A pointer to base keyframe, which identifies start of storyboard.","pos":[21641,21706]},{"content":"Remarks","pos":[21716,21723]},{"content":"Obtain this keyframe to base any other keyframes or transitions on the moment in time when a storyboard starts.","pos":[21727,21838]},{"pos":[21908,21951],"content":"CAnimationController::GetUIAnimationManager"},{"content":"Provides access to encapsulated IUIAnimationManager object.","pos":[21955,22014]},{"content":"Return Value","pos":[22085,22097]},{"content":"A pointer to IUIAnimationManager interface or NULL, if creation of animation manager failed.","pos":[22101,22193]},{"content":"Remarks","pos":[22203,22210]},{"content":"If current OS does not support Windows Animation API, this method returns NULL and after that all subsequent calls on CAnimationController::IsValid return FALSE.","pos":[22214,22375]},{"content":"You may need to access IUIAnimationManager in order to call its interface methods, which are not wrapped by animation controller.","pos":[22376,22505]},{"pos":[22573,22614],"content":"CAnimationController::GetUIAnimationTimer"},{"content":"Provides access to encapsulated IUIAnimationTimer object.","pos":[22618,22675]},{"content":"Return Value","pos":[22742,22754]},{"content":"A pointer to IUIAnimationTimer interface or NULL, if creation of animation timer failed.","pos":[22758,22846]},{"content":"Remarks","pos":[22856,22863]},{"content":"If current OS does not support Windows Animation API, this method returns NULL and after that all subsequent calls on CAnimationController::IsValid return FALSE.","pos":[22867,23028]},{"pos":[23099,23143],"content":"CAnimationController::GetUITransitionFactory"},{"content":"A pointer to IUIAnimationTransitionFactory interface or NULL, if creation of transition library failed.","pos":[23147,23250]},{"content":"Return Value","pos":[23332,23344]},{"content":"A pointer to IUIAnimationTransitionFactory or NULL, if creation of transition factory failed.","pos":[23348,23441]},{"content":"Remarks","pos":[23451,23458]},{"content":"If current OS does not support Windows Animation API, this method returns NULL and after that all subsequent calls on CAnimationController::IsValid return FALSE.","pos":[23462,23623]},{"pos":[23694,23738],"content":"CAnimationController::GetUITransitionLibrary"},{"content":"Provides access to encapsulated IUIAnimationTransitionLibrary object.","pos":[23742,23811]},{"content":"Return Value","pos":[23893,23905]},{"content":"A pointer to IUIAnimationTransitionLibrary interface or NULL, if creation of transition library failed.","pos":[23909,24012]},{"content":"Remarks","pos":[24022,24029]},{"content":"If current OS does not support Windows Animation API, this method returns NULL and after that all subsequent calls on CAnimationController::IsValid return FALSE.","pos":[24033,24194]},{"pos":[24264,24307],"content":"CAnimationController::IsAnimationInProgress"},{"content":"Tells whether at least one group is playing animation.","pos":[24311,24365]},{"content":"Return Value","pos":[24428,24440]},{"content":"TRUE if there is an animation in progress for this animation controller; otherwise FALSE.","pos":[24444,24533]},{"content":"Remarks","pos":[24543,24550]},{"content":"Checks status of animation manager and returns TRUE if the status is UI_ANIMATION_MANAGER_BUSY.","pos":[24554,24649]},{"pos":[24705,24734],"content":"CAnimationController::IsValid"},{"content":"Tells whether animation controller is valid.","pos":[24738,24782]},{"content":"Return Value","pos":[24832,24844]},{"content":"TRUE if animation controller is valid; otherwise FALSE.","pos":[24848,24903]},{"content":"Remarks","pos":[24913,24920]},{"content":"This method returns FALSE only if Windows Animation API is not supported on the current OS and creation of animation manager failed because it's not registered.","pos":[24924,25084]},{"content":"You need to call GetUIAnimationManager at least once after initialization of COM libraries to cause setting of this flag.","pos":[25085,25206]},{"pos":[25265,25297],"content":"CAnimationController::m_bIsValid"},{"content":"Specifies whether an animation controller is valid or not.","pos":[25301,25359]},{"content":"This member is set to FALSE if current OS does not support Windows Animation API.","pos":[25360,25441]},{"pos":[25544,25586],"content":"CAnimationController::m_lstAnimationGroups"},{"content":"A list of animation groups that belong to this animation controller.","pos":[25590,25658]},{"pos":[25807,25848],"content":"CAnimationController::m_pAnimationManager"},{"content":"Stores a pointer to Animation Manager COM object.","pos":[25852,25901]},{"pos":[26039,26078],"content":"CAnimationController::m_pAnimationTimer"},{"content":"Stores a pointer to Animation Timer COM object.","pos":[26082,26129]},{"pos":[26259,26294],"content":"CAnimationController::m_pRelatedWnd"},{"content":"A pointer to a related CWnd object, which can be automatically redrawn when the status of animation manager has changed, or post update event has occurred.","pos":[26298,26453]},{"content":"Can be NULL.","pos":[26454,26466]},{"pos":[26573,26615],"content":"CAnimationController::m_pTransitionFactory"},{"content":"Stores a pointer to Transition Factory COM object.","pos":[26619,26669]},{"pos":[26821,26863],"content":"CAnimationController::m_pTransitionLibrary"},{"content":"Stores a pointer to Transition Library COM object.","pos":[26867,26917]},{"pos":[27064,27101],"content":"CAnimationController::OnAfterSchedule"},{"content":"Called by the framework when an animation for the specified group has just been scheduled.","pos":[27105,27195]},{"content":"Parameters","pos":[27275,27285]},{"content":"A pointer to an animation group, which has been scheduled.","pos":[27301,27359]},{"content":"Remarks","pos":[27369,27376]},{"content":"The default implementation removes keyframes from the specified group and transitions from animation variables that belong to the specified group.","pos":[27380,27526]},{"content":"Can be overridden in a derived class to take any additional actions upon animation schedule.","pos":[27527,27619]},{"pos":[27698,27750],"content":"CAnimationController::OnAnimationIntegerValueChanged"},{"content":"Called by the framework when integer value of animation variable has changed.","pos":[27754,27831]},{"content":"Parameters","pos":[28051,28061]},{"content":"A pointer to an animation group that holds an animation object whose value has changed.","pos":[28077,28164]},{"content":"A pointer to an animation object that contains an animation variable whose value has changed.","pos":[28184,28277]},{"content":"A pointer to an animation variable.","pos":[28298,28333]},{"content":"Specifies new value.","pos":[28354,28374]},{"content":"Specifies previous value.","pos":[28396,28421]},{"content":"Remarks","pos":[28431,28438]},{"content":"This method is called if you enable animation variable events with EnableIntegerValueChangedEvent called for a specific animation variable or animation object.","pos":[28442,28601]},{"content":"It can be overridden in a derived class to take application-specific actions.","pos":[28602,28679]},{"pos":[28759,28812],"content":"CAnimationController::OnAnimationManagerStatusChanged"},{"content":"Called by the framework in response to StatusChanged event from animation manager.","pos":[28816,28898]},{"content":"Parameters","pos":[29063,29073]},{"content":"New animation manager status.","pos":[29092,29121]},{"content":"Previous animation manager status.","pos":[29148,29182]},{"content":"Remarks","pos":[29192,29199]},{"content":"This method is called if you enable animation manager events with EnableAnimationManagerEvent.","pos":[29203,29297]},{"content":"It can be overridden in a derived class to take application-specific actions.","pos":[29298,29375]},{"content":"The default implementation updates a related window if it has been set with SetRelatedWnd.","pos":[29376,29466]},{"pos":[29541,29589],"content":"CAnimationController::OnAnimationTimerPostUpdate"},{"content":"Called by the framework after an animation update is finished.","pos":[29593,29655]},{"content":"Remarks","pos":[29723,29730]},{"content":"This method is called if you enable timer event handlers using EnableAnimationTimerEventHandler.","pos":[29734,29830]},{"content":"It can be overridden in a derived class to take application-specific actions.","pos":[29831,29908]},{"pos":[29982,30029],"content":"CAnimationController::OnAnimationTimerPreUpdate"},{"content":"Called by the framework before an animation update begins.","pos":[30033,30091]},{"content":"Remarks","pos":[30158,30165]},{"content":"This method is called if you enable timer event handlers using EnableAnimationTimerEventHandler.","pos":[30169,30265]},{"content":"It can be overridden in a derived class to take application-specific actions.","pos":[30266,30343]},{"pos":[30424,30478],"content":"CAnimationController::OnAnimationTimerRenderingTooSlow"},{"content":"Called by the framework when the rendering frame rate for an animation falls below a minimum desirable frame rate.","pos":[30482,30596]},{"content":"Parameters","pos":[30680,30690]},{"content":"The current frame rate in frames per second.","pos":[30703,30747]},{"content":"Remarks","pos":[30757,30764]},{"content":"This method is called if you enable timer event handlers using EnableAnimationTimerEventHandler.","pos":[30768,30864]},{"content":"It can be overridden in a derived class to take application-specific actions.","pos":[30865,30942]},{"content":"The minimum desirable frame rate is specified by calling IUIAnimationTimer::SetFrameRateThreshold.","pos":[30943,31041]},{"pos":[31113,31158],"content":"CAnimationController::OnAnimationValueChanged"},{"content":"Called by the framework when value of animation variable has changed.","pos":[31162,31231]},{"content":"Parameters","pos":[31446,31456]},{"content":"A pointer to an animation group that holds an animation object whose value has changed.","pos":[31472,31559]},{"content":"A pointer to an animation object that contains an animation variable whose value has changed.","pos":[31579,31672]},{"content":"A pointer to an animation variable.","pos":[31693,31728]},{"content":"Specifies new value.","pos":[31749,31769]},{"content":"Specifies previous value.","pos":[31791,31816]},{"content":"Remarks","pos":[31826,31833]},{"content":"This method is called if you enable animation variable events with EnableValueChangedEvent called for a specific animation variable or animation object.","pos":[31837,31989]},{"content":"It can be overridden in a derived class to take application-specific actions.","pos":[31990,32067]},{"pos":[32138,32182],"content":"CAnimationController::OnBeforeAnimationStart"},{"content":"Called by the framework right before the animation is scheduled.","pos":[32186,32250]},{"content":"Parameters","pos":[32337,32347]},{"content":"A pointer to an animation group whose animation is about to start.","pos":[32363,32429]},{"content":"Remarks","pos":[32439,32446]},{"content":"This call is routed to related CWnd and can be overridden in a derived class to perform any additional actions before the animation starts for the specified group.","pos":[32450,32613]},{"pos":[32681,32722],"content":"CAnimationController::OnHasPriorityCancel"},{"content":"Called by the framework to resolve scheduling conflicts.","pos":[32726,32782]},{"content":"Parameters","pos":[32965,32975]},{"content":"The group that owns the currently scheduled storyboard.","pos":[33000,33055]},{"content":"The group that owns the new storyboard that is in scheduling conflict with the scheduled storyboard owned by pGroupScheduled.","pos":[33077,33202]},{"content":"The potential effect on pGroupNew if pGroupScheduled has a higher priority.","pos":[33229,33304]},{"content":"Return Value","pos":[33314,33326]},{"content":"Should return TRUE if storyboard owned by pGroupNew has priority.","pos":[33330,33395]},{"content":"Should return FALSE if storyboard owned by pGroupScheduled has priority.","pos":[33396,33468]},{"content":"Remarks","pos":[33478,33485]},{"content":"This method is called if you enable priority comparison events using CAnimationController::EnablePriorityComparisonHandler and specify UI_ANIMATION_PHT_CANCEL.","pos":[33489,33648]},{"content":"It can be overridden in a derived class to take application-specific actions.","pos":[33649,33726]},{"content":"Read Windows Animation API documentation for more information about Conflict Management (http://msdn.microsoft.com/library/dd371759(VS.85).aspx).","pos":[33727,33872]},{"pos":[33942,33985],"content":"CAnimationController::OnHasPriorityCompress"},{"content":"Called by the framework to resolve scheduling conflicts.","pos":[33989,34045]},{"content":"Parameters","pos":[34230,34240]},{"content":"The group that owns the currently scheduled storyboard.","pos":[34265,34320]},{"content":"The group that owns the new storyboard that is in scheduling conflict with the scheduled storyboard owned by pGroupScheduled.","pos":[34342,34467]},{"content":"The potential effect on pGroupNew if pGroupScheduled has a higher priority.","pos":[34494,34569]},{"content":"Return Value","pos":[34579,34591]},{"content":"Should return TRUE if storyboard owned by pGroupNew has priority.","pos":[34595,34660]},{"content":"Should return FALSE if storyboard owned by pGroupScheduled has priority.","pos":[34661,34733]},{"content":"Remarks","pos":[34743,34750]},{"content":"This method is called if you enable priority comparison events using CAnimationController::EnablePriorityComparisonHandler and specify UI_ANIMATION_PHT_COMPRESS.","pos":[34754,34915]},{"content":"It can be overridden in a derived class to take application-specific actions.","pos":[34916,34993]},{"content":"Read Windows Animation API documentation for more information about Conflict Management (http://msdn.microsoft.com/library/dd371759(VS.85).aspx).","pos":[34994,35139]},{"pos":[35209,35252],"content":"CAnimationController::OnHasPriorityConclude"},{"content":"Called by the framework to resolve scheduling conflicts.","pos":[35256,35312]},{"content":"Parameters","pos":[35497,35507]},{"content":"The group that owns the currently scheduled storyboard.","pos":[35532,35587]},{"content":"The group that owns the new storyboard that is in scheduling conflict with the scheduled storyboard owned by pGroupScheduled.","pos":[35609,35734]},{"content":"The potential effect on pGroupNew if pGroupScheduled has a higher priority.","pos":[35761,35836]},{"content":"Return Value","pos":[35846,35858]},{"content":"Should return TRUE if storyboard owned by pGroupNew has priority.","pos":[35862,35927]},{"content":"Should return FALSE if storyboard owned by pGroupScheduled has priority.","pos":[35928,36000]},{"content":"Remarks","pos":[36010,36017]},{"content":"This method is called if you enable priority comparison events using CAnimationController::EnablePriorityComparisonHandler and specify UI_ANIMATION_PHT_CONCLUDE.","pos":[36021,36182]},{"content":"It can be overridden in a derived class to take application-specific actions.","pos":[36183,36260]},{"content":"Read Windows Animation API documentation for more information about Conflict Management (http://msdn.microsoft.com/library/dd371759(VS.85).aspx).","pos":[36261,36406]},{"pos":[36472,36511],"content":"CAnimationController::OnHasPriorityTrim"},{"content":"Called by the framework to resolve scheduling conflicts.","pos":[36515,36571]},{"content":"Parameters","pos":[36752,36762]},{"content":"The group that owns the currently scheduled storyboard.","pos":[36787,36842]},{"content":"The group that owns the new storyboard that is in scheduling conflict with the scheduled storyboard owned by pGroupScheduled.","pos":[36864,36989]},{"content":"The potential effect on pGroupNew if pGroupScheduled has a higher priority.","pos":[37016,37091]},{"content":"Return Value","pos":[37101,37113]},{"content":"Should return TRUE if storyboard owned by pGroupNew has priority.","pos":[37117,37182]},{"content":"Should return FALSE if storyboard owned by pGroupScheduled has priority.","pos":[37183,37255]},{"content":"Remarks","pos":[37265,37272]},{"content":"This method is called if you enable priority comparison events using CAnimationController::EnablePriorityComparisonHandler and specify UI_ANIMATION_PHT_TRIM.","pos":[37276,37433]},{"content":"It can be overridden in a derived class to take application-specific actions.","pos":[37434,37511]},{"content":"Read Windows Animation API documentation for more information about Conflict Management (http://msdn.microsoft.com/library/dd371759(VS.85).aspx).","pos":[37512,37657]},{"pos":[37731,37778],"content":"CAnimationController::OnStoryboardStatusChanged"},{"content":"Called by the framework when storyboard status has changed.","pos":[37782,37841]},{"content":"Parameters","pos":[38037,38047]},{"content":"A pointer to an animation group that owns the storyboard whose status has changed.","pos":[38063,38145]},{"content":"Specifies the new status.","pos":[38167,38192]},{"content":"Specifies the previous status.","pos":[38219,38249]},{"content":"Remarks","pos":[38259,38266]},{"content":"This method is called if you enable storyboard events using CAnimationController::EnableStoryboardEventHandler.","pos":[38270,38381]},{"content":"It can be overridden in a derived class to take application-specific actions.","pos":[38382,38459]},{"pos":[38527,38568],"content":"CAnimationController::OnStoryboardUpdated"},{"content":"Called by the framework when storyboard has been updated.","pos":[38572,38629]},{"content":"Parameters","pos":[38713,38723]},{"content":"A pointer to a group that owns the storyboard.","pos":[38739,38785]},{"content":"Remarks","pos":[38795,38802]},{"content":"This method is called if you enable storyboard events using CAnimationController::EnableStoryboardEventHandler.","pos":[38806,38917]},{"content":"It can be overridden in a derived class to take application-specific actions.","pos":[38918,38995]},{"pos":[39068,39114],"content":"CAnimationController::RemoveAllAnimationGroups"},{"content":"Removes all animation groups from animation controller.","pos":[39118,39173]},{"content":"Remarks","pos":[39231,39238]},{"content":"All groups will be deleted, their pointer, if stored at the application level, must be invalidated.","pos":[39242,39341]},{"content":"If CAnimationGroup::m_bAutodestroyAnimationObjects for a group being deleted is TRUE, all animation objects that belong to that group will be deleted; otherwise their references to parent animation controller will be set to NULL and they can be added to another controller.","pos":[39342,39615]},{"pos":[39684,39726],"content":"CAnimationController::RemoveAnimationGroup"},{"content":"Removes an animation group with specified ID from animation controller.","pos":[39730,39801]},{"content":"Parameters","pos":[39870,39880]},{"content":"Specifies animation group ID.","pos":[39898,39927]},{"content":"Remarks","pos":[39937,39944]},{"content":"This method removes an animation group from the internal list of groups and deletes it, therefore if you stored a pointer to that animation group, it must be invalidated.","pos":[39948,40118]},{"content":"If CAnimationGroup::m_bAutodestroyAnimationObjects is TRUE, all animation objects that belong to that group will be deleted; otherwise their references to parent animation controller will be set to NULL and they can be added to another controller.","pos":[40119,40366]},{"pos":[40436,40479],"content":"CAnimationController::RemoveAnimationObject"},{"content":"Remove an animation object from animation controller.","pos":[40483,40536]},{"content":"Parameters","pos":[40655,40665]},{"content":"A pointer to an animation object.","pos":[40682,40715]},{"content":"If this parameter is TRUE the object will not be deleted upon remove.","pos":[40737,40806]},{"content":"Remarks","pos":[40816,40823]},{"content":"Removes an animation object from animation controller and animation group.","pos":[40827,40901]},{"content":"Call this function if a particular object should not be animated anymore, or if you need to move the object to another animation controller.","pos":[40902,41042]},{"content":"In the last case bNoDelete must be TRUE.","pos":[41043,41083]},{"pos":[41149,41188],"content":"CAnimationController::RemoveTransitions"},{"content":"Removes transitions from animation objects that belong to the specified group.","pos":[41192,41270]},{"content":"Parameters","pos":[41336,41346]},{"content":"Specifies Group ID.","pos":[41364,41383]},{"content":"Remarks","pos":[41393,41400]},{"content":"The group loops over its animation objects and calls ClearTransitions(FALSE) for each animation object.","pos":[41404,41507]},{"content":"This method is called by the framework after animation has been scheduled.","pos":[41508,41582]},{"pos":[41644,41679],"content":"CAnimationController::ScheduleGroup"},{"content":"Schedules an animation.","pos":[41683,41706]},{"content":"Parameters","pos":[41812,41822]},{"content":"Specifies animation Group ID to schedule.","pos":[41840,41881]},{"content":"Specifies time to schedule.","pos":[41898,41925]},{"content":"Return Value","pos":[41935,41947]},{"content":"TRUE if animation was scheduled successfully.","pos":[41951,41996]},{"content":"FALSE if storyboard has not been created, or other error occurs.","pos":[41997,42061]},{"content":"Remarks","pos":[42071,42078]},{"content":"You must call AnimateGroup with parameter bScheduleNow set to FALSE prior ScheduleGroup.","pos":[42082,42170]},{"content":"You can specify the desired animation time obtained from IUIAnimationTimer::GetTime.","pos":[42171,42255]},{"content":"If the time parameter is 0.0, the animation is scheduled for the current time.","pos":[42256,42334]},{"pos":[42396,42431],"content":"CAnimationController::SetRelatedWnd"},{"content":"Establishes a relationship between animation controller and a window.","pos":[42435,42504]},{"content":"Parameters","pos":[42561,42571]},{"content":"A pointer to window object to set.","pos":[42585,42619]},{"content":"Remarks","pos":[42629,42636]},{"content":"If a related CWnd object is set, the animation controller can automatically update it (send WM_PAINT message) when the status of animation manager has changed or timer post update event has occurred.","pos":[42640,42839]},{"pos":[42910,42954],"content":"CAnimationController::UpdateAnimationManager"},{"content":"Directs the animation manager to update the values of all animation variables.","pos":[42958,43036]},{"content":"Remarks","pos":[43100,43107]},{"content":"Calling this method advances the animation manager to current time, changing statuses of storyboards as necessary and updating any animation variables to appropriate interpolated values.","pos":[43111,43297]},{"content":"Internally this method calls IUIAnimationTimer::GetTime(timeNow) and IUIAnimationManager::Update(timeNow).","pos":[43298,43404]},{"content":"Override this method in a derived class to customize this behavior.","pos":[43405,43472]},{"content":"See Also","pos":[43481,43489]},{"content":"Classes","pos":[43494,43501]}],"content":"---\ntitle: \"CAnimationController Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CAnimationController\"\n  - \"afxanimationcontroller/CAnimationController\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CAnimationController class\"\nms.assetid: ed294c98-695e-40a6-b940-33ef1d40aa6b\ncaps.latest.revision: 18\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CAnimationController Class\nImplements the animation controller, which provides a central interface for creating and managing animations.  \n  \n## Syntax  \n  \n```  \nclass CAnimationController : public CObject;  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAnimationController::CAnimationController](#canimationcontroller__canimationcontroller)|Constructs an animation controller.|  \n|[CAnimationController::~CAnimationController](#canimationcontroller__~canimationcontroller)|The destructor. Called when animation controller object is being destroyed.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAnimationController::AddAnimationObject](#canimationcontroller__addanimationobject)|Adds an animation object to a group that belongs to the animation controller.|  \n|[CAnimationController::AddKeyframeToGroup](#canimationcontroller__addkeyframetogroup)|Adds a keyframe to group.|  \n|[CAnimationController::AnimateGroup](#canimationcontroller__animategroup)|Prepares a group to run animation and optionally schedules it.|  \n|[CAnimationController::CleanUpGroup](#canimationcontroller__cleanupgroup)|Overloaded. Called by the framework to clean up the group when animation has been scheduled.|  \n|[CAnimationController::CreateKeyframe](#canimationcontroller__createkeyframe)|Overloaded. Creates a keyframe that depends on transition and adds it to the specified group.|  \n|[CAnimationController::EnableAnimationManagerEvent](#canimationcontroller__enableanimationmanagerevent)|Sets or releases a handler to call when animation manager's status changes.|  \n|[CAnimationController::EnableAnimationTimerEventHandler](#canimationcontroller__enableanimationtimereventhandler)|Sets or releases a handler for timing events and handler for timing updates.|  \n|[CAnimationController::EnablePriorityComparisonHandler](#canimationcontroller__enableprioritycomparisonhandler)|Sets or releases the priority comparison handler to call to determine whether a scheduled storyboard can be cancelled, concluded, trimmed or compressed.|  \n|[CAnimationController::EnableStoryboardEventHandler](#canimationcontroller__enablestoryboardeventhandler)|Sets or releases a handler for storyboard status and update events.|  \n|[CAnimationController::FindAnimationGroup](#canimationcontroller__findanimationgroup)|Overloaded. Finds an animation group by its storyboard.|  \n|[CAnimationController::FindAnimationObject](#canimationcontroller__findanimationobject)|Finds animation object containing a specified animation variable.|  \n|[CAnimationController::GetKeyframeStoryboardStart](#canimationcontroller__getkeyframestoryboardstart)|Returns a keyframe that identifies start of storyboard.|  \n|[CAnimationController::GetUIAnimationManager](#canimationcontroller__getuianimationmanager)|Provides access to encapsulated IUIAnimationManager object.|  \n|[CAnimationController::GetUIAnimationTimer](#canimationcontroller__getuianimationtimer)|Provides access to encapsulated IUIAnimationTimer object.|  \n|[CAnimationController::GetUITransitionFactory](#canimationcontroller__getuitransitionfactory)|A pointer to IUIAnimationTransitionFactory interface or NULL, if creation of transition library failed.|  \n|[CAnimationController::GetUITransitionLibrary](#canimationcontroller__getuitransitionlibrary)|Provides access to encapsulated IUIAnimationTransitionLibrary object.|  \n|[CAnimationController::IsAnimationInProgress](#canimationcontroller__isanimationinprogress)|Tells whether at least one group is playing animation.|  \n|[CAnimationController::IsValid](#canimationcontroller__isvalid)|Tells whether animation controller is valid.|  \n|[CAnimationController::OnAnimationIntegerValueChanged](#canimationcontroller__onanimationintegervaluechanged)|Called by the framework when integer value of animation variable has changed.|  \n|[CAnimationController::OnAnimationManagerStatusChanged](#canimationcontroller__onanimationmanagerstatuschanged)|Called by the framework in response to StatusChanged event from animation manager.|  \n|[CAnimationController::OnAnimationTimerPostUpdate](#canimationcontroller__onanimationtimerpostupdate)|Called by the framework after an animation update is finished.|  \n|[CAnimationController::OnAnimationTimerPreUpdate](#canimationcontroller__onanimationtimerpreupdate)|Called by the framework before an animation update begins.|  \n|[CAnimationController::OnAnimationTimerRenderingTooSlow](#canimationcontroller__onanimationtimerrenderingtooslow)|Called by the framework when the rendering frame rate for an animation falls below a minimum desirable frame rate.|  \n|[CAnimationController::OnAnimationValueChanged](#canimationcontroller__onanimationvaluechanged)|Called by the framework when value of animation variable has changed.|  \n|[CAnimationController::OnBeforeAnimationStart](#canimationcontroller__onbeforeanimationstart)|Called by the framework right before the animation is scheduled.|  \n|[CAnimationController::OnHasPriorityCancel](#canimationcontroller__onhasprioritycancel)|Called by the framework to resolve scheduling conflicts.|  \n|[CAnimationController::OnHasPriorityCompress](#canimationcontroller__onhasprioritycompress)|Called by the framework to resolve scheduling conflicts.|  \n|[CAnimationController::OnHasPriorityConclude](#canimationcontroller__onhaspriorityconclude)|Called by the framework to resolve scheduling conflicts.|  \n|[CAnimationController::OnHasPriorityTrim](#canimationcontroller__onhasprioritytrim)|Called by the framework to resolve scheduling conflicts.|  \n|[CAnimationController::OnStoryboardStatusChanged](#canimationcontroller__onstoryboardstatuschanged)|Called by the framework when storyboard status has changed.|  \n|[CAnimationController::OnStoryboardUpdated](#canimationcontroller__onstoryboardupdated)|Called by the framework when storyboard has been updated.|  \n|[CAnimationController::RemoveAllAnimationGroups](#canimationcontroller__removeallanimationgroups)|Removes all animation groups from animation controller.|  \n|[CAnimationController::RemoveAnimationGroup](#canimationcontroller__removeanimationgroup)|Removes an animation group with specified ID from animation controller.|  \n|[CAnimationController::RemoveAnimationObject](#canimationcontroller__removeanimationobject)|Remove an animation object from animation controller.|  \n|[CAnimationController::RemoveTransitions](#canimationcontroller__removetransitions)|Removes transitions from animation objects that belong to the specified group.|  \n|[CAnimationController::ScheduleGroup](#canimationcontroller__schedulegroup)|Schedules an animation.|  \n|[CAnimationController::SetRelatedWnd](#canimationcontroller__setrelatedwnd)|Establishes a relationship between animation controller and a window.|  \n|[CAnimationController::UpdateAnimationManager](#canimationcontroller__updateanimationmanager)|Directs the animation manager to update the values of all animation variables.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAnimationController::CleanUpGroup](#canimationcontroller__cleanupgroup)|Overloaded. A helper that cleans up the group.|  \n|[CAnimationController::OnAfterSchedule](#canimationcontroller__onafterschedule)|Called by the framework when an animation for the specified group has just been scheduled.|  \n  \n### Protected Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAnimationController::gkeyframeStoryboardStart](#canimationcontroller__g_keyframestoryboardstart)|A keyframe that represents start of storyboard.|  \n|[CAnimationController::m_bIsValid](#canimationcontroller__m_bisvalid)|Specifies whether an animation controller is valid or not. This member is set to FALSE if current OS does not support Windows Animation API.|  \n|[CAnimationController::m_lstAnimationGroups](#canimationcontroller__m_lstanimationgroups)|A list of animation groups that belong to this animation controller.|  \n|[CAnimationController::m_pAnimationManager](#canimationcontroller__m_panimationmanager)|Stores a pointer to Animation Manager COM object.|  \n|[CAnimationController::m_pAnimationTimer](#canimationcontroller__m_panimationtimer)|Stores a pointer to Animation Timer COM object.|  \n|[CAnimationController::m_pRelatedWnd](#canimationcontroller__m_prelatedwnd)|A pointer to a related CWnd object, which can be automatically redrawn when the status of animation manager has changed, or post update event has occurred. Can be NULL.|  \n|[CAnimationController::m_pTransitionFactory](#canimationcontroller__m_ptransitionfactory)|Stores a pointer to Transition Factory COM object.|  \n|[CAnimationController::m_pTransitionLibrary](#canimationcontroller__m_ptransitionlibrary)|Stores a pointer to Transition Library COM object.|  \n  \n## Remarks  \n The CAnimationController class is the key class that manages animations. You may create one or more instances of animation controller in an application and, optionally, connect an instance of animation controller to a CWnd object using CAnimationController::SetRelatedWnd. This connection is required to send WM_PAINT messages to the related window automatically when animation manager status has changed or animation timer has been updated. If you do not enable this relation, you must redraw a window that displays an animation manually. For this purpose you can derive a class from CAnimationController and override OnAnimationManagerStatusChanged and/or OnAnimationTimerPostUpdate and invalidate one or more windows when necessary.  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CAnimationController](../../mfc/reference/canimationcontroller-class.md)  \n  \n## Requirements  \n **Header:** afxanimationcontroller.h  \n  \n##  <a name=\"canimationcontroller___dtorcanimationcontroller\"></a>  CAnimationController::~CAnimationController  \n The destructor. Called when animation controller object is being destroyed.  \n  \n```  \nvirtual ~CAnimationController(void);\n```   \n  \n##  <a name=\"canimationcontroller__addanimationobject\"></a>  CAnimationController::AddAnimationObject  \n Adds an animation object to a group that belongs to the animation controller.  \n  \n```  \nCAnimationGroup* AddAnimationObject(CAnimationBaseObject* pObject);\n```  \n  \n### Parameters  \n `pObject`  \n A pointer to an animation object.  \n  \n### Return Value  \n A pointer to existing or new animation group where pObject has been added if function succeeds; NULL if pObject has already been added to a group that belongs to another animation controller.  \n  \n### Remarks  \n Call this method to add an animation object to the animation controller. An object will be added to a group according to object's GroupID (see CAnimationBaseObject::SetID). The animation controller will create a new group if it's the first object being added with the specified GroupID. An animation object can be added to one animation controller only. If you need to add an object to another controller, call RemoveAnimationObject first. If you call SetID with new GroupID for an object that has been already added to a group, the object will be removed from the old group and added to another group with specified ID.  \n  \n##  <a name=\"canimationcontroller__addkeyframetogroup\"></a>  CAnimationController::AddKeyframeToGroup  \n Adds a keyframe to group.  \n  \n```  \nBOOL AddKeyframeToGroup(\n    UINT32 nGroupID,  \n    CBaseKeyFrame* pKeyframe);\n```  \n  \n### Parameters  \n `nGroupID`  \n Specifies Group ID.  \n  \n `pKeyframe`  \n A pointer to a keyframe.  \n  \n### Return Value  \n TRUE if the function succeeds; otherwise FALSE.  \n  \n### Remarks  \n Usually you don't need to call this method, use CAnimationController::CreateKeyframe instead, which creates and adds the created keyframe to a group automatically.  \n  \n##  <a name=\"canimationcontroller__animategroup\"></a>  CAnimationController::AnimateGroup  \n Prepares a group to run animation and optionally schedules it.  \n  \n```  \nBOOL AnimateGroup(\n    UINT32 nGroupID,  \n    BOOL bScheduleNow = TRUE);\n```  \n  \n### Parameters  \n `nGroupID`  \n Specifies GroupID.  \n  \n `bScheduleNow`  \n Specifies whether to run animation right away.  \n  \n### Return Value  \n TRUE if animation was successfully scheduled and run.  \n  \n### Remarks  \n This method does the actual work creating storyboard, adding animation variables, applying transitions and setting keyframes. It's possible to delay scheduling if you set bScheduleNow to FALSE. In this case the specified group will hold a storyboard that has been set up for animation. At that point you can setup events for the storyboard and animation variables. When you actually need to run the animation call CAnimationController::ScheduleGroup.  \n  \n##  <a name=\"canimationcontroller__canimationcontroller\"></a>  CAnimationController::CAnimationController  \n Constructs an animation controller.  \n  \n```  \nCAnimationController(void);\n```   \n  \n##  <a name=\"canimationcontroller__cleanupgroup\"></a>  CAnimationController::CleanUpGroup  \n Called by the framework to clean up the group when animation has been scheduled.  \n  \n```  \nvoid CleanUpGroup(UINT32 nGroupID);\n\n \nvoid CleanUpGroup(CAnimationGroup* pGroup);\n```  \n  \n### Parameters  \n `nGroupID`  \n Specifies GroupID.  \n  \n `pGroup`  \n A pointer to animation group to clean.  \n  \n### Remarks  \n This method removes all transitions and keyframes from the specified group, because they are not relevant after an animation has been scheduled.  \n  \n##  <a name=\"canimationcontroller__createkeyframe\"></a>  CAnimationController::CreateKeyframe  \n Creates a keyframe that depends on transition and adds it to the specified group.  \n  \n```  \nCKeyFrame* CreateKeyframe(\n    UINT32 nGroupID,  \n    CBaseTransition* pTransition);\n\n \nCKeyFrame* CreateKeyframe(\n    UINT32 nGroupID,  \n    CBaseKeyFrame* pKeyframe,  \n    UI_ANIMATION_SECONDS offset = 0.0);\n```  \n  \n### Parameters  \n `nGroupID`  \n Specifies Group ID for which keyframe is created.  \n  \n `pTransition`  \n A pointer to transition. Keyframe will be inserted to storyboard after this transition.  \n  \n `pKeyframe`  \n A pointer to base keyframe for this keyframe.  \n  \n `offset`  \n Offset in seconds from the base keyframe specified by pKeyframe.  \n  \n### Return Value  \n A pointer to newly created keyframe if the function succeeds.  \n  \n### Remarks  \n You can store the returned pointer and base other keyframes on the newly created keyframe (see the second overload). It's possible to begin transitions at keyframes - see CBaseTransition::SetKeyframes. You don't need to delete keyframes created in this way, because they are deleted automatically by animation groups. Be careful when creating keyframes based on other keyframes and transitions and avoid circular references.  \n  \n##  <a name=\"canimationcontroller__enableanimationmanagerevent\"></a>  CAnimationController::EnableAnimationManagerEvent  \n Sets or releases a handler to call when animation manager's status changes.  \n  \n```  \nvirtual BOOL EnableAnimationManagerEvent(BOOL bEnable = TRUE);\n```  \n  \n### Parameters  \n `bEnable`  \n Specifies whether to set or release a handler.  \n  \n### Return Value  \n TRUE if the handler was successfully set or released.  \n  \n### Remarks  \n When a handler is set (enabled) Windows Animation calls OnAnimationManagerStatusChanged when animation manager's status changes.  \n  \n##  <a name=\"canimationcontroller__enableanimationtimereventhandler\"></a>  CAnimationController::EnableAnimationTimerEventHandler  \n Sets or releases a handler for timing events and handler for timing updates.  \n  \n```  \nvirtual BOOL EnableAnimationTimerEventHandler(\n    BOOL bEnable = TRUE,  \n    UI_ANIMATION_IDLE_BEHAVIOR idleBehavior = UI_ANIMATION_IDLE_BEHAVIOR_DISABLE);\n```  \n  \n### Parameters  \n `bEnable`  \n Specifies whether to set or release the handlers.  \n  \n `idleBehavior`  \n Specifies idle behavior for timer update handler.  \n  \n### Return Value  \n TRUE if handlers were successfully set or released; FALSE if this method is called for a second time without releasing the handlers first, or if any other error occurs.  \n  \n### Remarks  \n When the handlers are set (enabled) Windows Animation API calls OnAnimationTimerPreUpdate, OnAnimationTimerPostUpdate, OnRenderingTooSlow methods. You need to enable animation timers to allow Windows Animation API update storyboards. Otherwise you'll need to call CAnimationController::UpdateAnimationManager in order to direct the animation manager to update the values of all animation variables.  \n  \n##  <a name=\"canimationcontroller__enableprioritycomparisonhandler\"></a>  CAnimationController::EnablePriorityComparisonHandler  \n Sets or releases the priority comparison handler to call to determine whether a scheduled storyboard can be cancelled, concluded, trimmed or compressed.  \n  \n```  \nvirtual BOOL EnablePriorityComparisonHandler(DWORD dwHandlerType);\n```  \n  \n### Parameters  \n `dwHandlerType`  \n A combination of UI_ANIMATION_PHT_ flags (see remarks), which specifies what handlers to set or release.  \n  \n### Return Value  \n TRUE if the handler was successfully set or released.  \n  \n### Remarks  \n When a handler is set (enabled) Windows Animation calls the following virtual methods depending on dwHandlerType: OnHasPriorityCancel, OnHasPriorityConclude, OnHasPriorityTrim, OnHasPriorityCompress. dwHandler can be a combination of the following flags: UI_ANIMATION_PHT_NONE - release all handlers UI_ANIMATION_PHT_CANCEL - set Cancel comparison handler UI_ANIMATION_PHT_CONCLUDE - set Conclude comparison handler UI_ANIMATION_PHT_COMPRESS - set Compress comparison handler UI_ANIMATION_PHT_TRIM - set Trim comparison handler UI_ANIMATION_PHT_CANCEL_REMOVE - remove Cancel comparison handler UI_ANIMATION_PHT_CONCLUDE_REMOVE - remove Conclude comparison handler UI_ANIMATION_PHT_COMPRESS_REMOVE - remove Compress comparison handler UI_ANIMATION_PHT_TRIM_REMOVE - remove Trim comparison handler  \n  \n##  <a name=\"canimationcontroller__enablestoryboardeventhandler\"></a>  CAnimationController::EnableStoryboardEventHandler  \n Sets or releases a handler for storyboard status and update events.  \n  \n```  \nvirtual BOOL EnableStoryboardEventHandler(\n    UINT32 nGroupID,  \n    BOOL bEnable = TRUE);\n```  \n  \n### Parameters  \n `nGroupID`  \n Specifies Group ID.  \n  \n `bEnable`  \n Specifies whether to set or release a handler.  \n  \n### Return Value  \n TRUE if the handler was successfully set or released; FALSE if the specified animation group is now found or animation for the specified group has not been initiated and its internal storyboard is NULL.  \n  \n### Remarks  \n When a handler is set (enabled) Windows Animation API calls OnStoryboardStatusChanges and OnStoryboardUpdated virtual methods. A handler must be set after CAnimationController::Animate has been called for the specified animation group, because it creates encapsulated IUIAnimationStoryboard object.  \n  \n##  <a name=\"canimationcontroller__findanimationgroup\"></a>  CAnimationController::FindAnimationGroup  \n Finds an animation group by its Group ID.  \n  \n```  \nCAnimationGroup* FindAnimationGroup(UINT32 nGroupID);\n\n \nCAnimationGroup* FindAnimationGroup(IUIAnimationStoryboard* pStoryboard);\n```  \n  \n### Parameters  \n `nGroupID`  \n Specifies a GroupID.  \n  \n `pStoryboard`  \n A pointer to a storyboard.  \n  \n### Return Value  \n A pointer to animation group or NULL if the group with specified ID is not found.  \n  \n### Remarks  \n Use this method to find an animation group at runtime. A group is created and added to the internal list of animation groups when a first animation object with particular GroupID is being added to animation controller.  \n  \n##  <a name=\"canimationcontroller__findanimationobject\"></a>  CAnimationController::FindAnimationObject  \n Finds animation object containing a specified animation variable.  \n  \n```  \nBOOL FindAnimationObject(\n    IUIAnimationVariable* pVariable,  \n    CAnimationBaseObject** ppObject,  \n    CAnimationGroup** ppGroup);\n```  \n  \n### Parameters  \n `pVariable`  \n A pointer to animation variable.  \n  \n `ppObject`  \n Output. Contains a pointer to animation object or NULL.  \n  \n `ppGroup`  \n Output. Contains a pointer to animation group that holds the animation object, or NULL.  \n  \n### Return Value  \n TRUE if object was found; otherwise FALSE.  \n  \n### Remarks  \n Called from event handlers when it's required to find an animation object from incoming animation variable.  \n  \n##  <a name=\"canimationcontroller__g_keyframestoryboardstart\"></a>  CAnimationController::gkeyframeStoryboardStart  \n A keyframe that represents start of storyboard.  \n  \n```  \nstatic CBaseKeyFrame gkeyframeStoryboardStart;  \n```  \n  \n##  <a name=\"canimationcontroller__getkeyframestoryboardstart\"></a>  CAnimationController::GetKeyframeStoryboardStart  \n Returns a keyframe that identifies start of storyboard.  \n  \n```  \nstatic CBaseKeyFrame* GetKeyframeStoryboardStart();\n```  \n  \n### Return Value  \n A pointer to base keyframe, which identifies start of storyboard.  \n  \n### Remarks  \n Obtain this keyframe to base any other keyframes or transitions on the moment in time when a storyboard starts.  \n  \n##  <a name=\"canimationcontroller__getuianimationmanager\"></a>  CAnimationController::GetUIAnimationManager  \n Provides access to encapsulated IUIAnimationManager object.  \n  \n```  \nIUIAnimationManager* GetUIAnimationManager();\n```  \n  \n### Return Value  \n A pointer to IUIAnimationManager interface or NULL, if creation of animation manager failed.  \n  \n### Remarks  \n If current OS does not support Windows Animation API, this method returns NULL and after that all subsequent calls on CAnimationController::IsValid return FALSE. You may need to access IUIAnimationManager in order to call its interface methods, which are not wrapped by animation controller.  \n  \n##  <a name=\"canimationcontroller__getuianimationtimer\"></a>  CAnimationController::GetUIAnimationTimer  \n Provides access to encapsulated IUIAnimationTimer object.  \n  \n```  \nIUIAnimationTimer* GetUIAnimationTimer();\n```  \n  \n### Return Value  \n A pointer to IUIAnimationTimer interface or NULL, if creation of animation timer failed.  \n  \n### Remarks  \n If current OS does not support Windows Animation API, this method returns NULL and after that all subsequent calls on CAnimationController::IsValid return FALSE.  \n  \n##  <a name=\"canimationcontroller__getuitransitionfactory\"></a>  CAnimationController::GetUITransitionFactory  \n A pointer to IUIAnimationTransitionFactory interface or NULL, if creation of transition library failed.  \n  \n```  \nIUIAnimationTransitionFactory* GetUITransitionFactory();\n```  \n  \n### Return Value  \n A pointer to IUIAnimationTransitionFactory or NULL, if creation of transition factory failed.  \n  \n### Remarks  \n If current OS does not support Windows Animation API, this method returns NULL and after that all subsequent calls on CAnimationController::IsValid return FALSE.  \n  \n##  <a name=\"canimationcontroller__getuitransitionlibrary\"></a>  CAnimationController::GetUITransitionLibrary  \n Provides access to encapsulated IUIAnimationTransitionLibrary object.  \n  \n```  \nIUIAnimationTransitionLibrary* GetUITransitionLibrary();\n```  \n  \n### Return Value  \n A pointer to IUIAnimationTransitionLibrary interface or NULL, if creation of transition library failed.  \n  \n### Remarks  \n If current OS does not support Windows Animation API, this method returns NULL and after that all subsequent calls on CAnimationController::IsValid return FALSE.  \n  \n##  <a name=\"canimationcontroller__isanimationinprogress\"></a>  CAnimationController::IsAnimationInProgress  \n Tells whether at least one group is playing animation.  \n  \n```  \nvirtual BOOL IsAnimationInProgress();\n```  \n  \n### Return Value  \n TRUE if there is an animation in progress for this animation controller; otherwise FALSE.  \n  \n### Remarks  \n Checks status of animation manager and returns TRUE if the status is UI_ANIMATION_MANAGER_BUSY.  \n  \n##  <a name=\"canimationcontroller__isvalid\"></a>  CAnimationController::IsValid  \n Tells whether animation controller is valid.  \n  \n```  \nBOOL IsValid() const;\n\n \n```  \n  \n### Return Value  \n TRUE if animation controller is valid; otherwise FALSE.  \n  \n### Remarks  \n This method returns FALSE only if Windows Animation API is not supported on the current OS and creation of animation manager failed because it's not registered. You need to call GetUIAnimationManager at least once after initialization of COM libraries to cause setting of this flag.  \n  \n##  <a name=\"canimationcontroller__m_bisvalid\"></a>  CAnimationController::m_bIsValid  \n Specifies whether an animation controller is valid or not. This member is set to FALSE if current OS does not support Windows Animation API.  \n  \n```  \nBOOL m_bIsValid;  \n```  \n  \n##  <a name=\"canimationcontroller__m_lstanimationgroups\"></a>  CAnimationController::m_lstAnimationGroups  \n A list of animation groups that belong to this animation controller.  \n  \n```  \nCList<CAnimationGroup*, CAnimationGroup*> m_lstAnimationGroups;  \n```  \n  \n##  <a name=\"canimationcontroller__m_panimationmanager\"></a>  CAnimationController::m_pAnimationManager  \n Stores a pointer to Animation Manager COM object.  \n  \n```  \nATL::CComPtr<IUIAnimationManager> m_pAnimationManager;  \n```  \n  \n##  <a name=\"canimationcontroller__m_panimationtimer\"></a>  CAnimationController::m_pAnimationTimer  \n Stores a pointer to Animation Timer COM object.  \n  \n```  \nATL::CComPtr<IUIAnimationTimer> m_pAnimationTimer;  \n```  \n  \n##  <a name=\"canimationcontroller__m_prelatedwnd\"></a>  CAnimationController::m_pRelatedWnd  \n A pointer to a related CWnd object, which can be automatically redrawn when the status of animation manager has changed, or post update event has occurred. Can be NULL.  \n  \n```  \nCWnd* m_pRelatedWnd;  \n```  \n  \n##  <a name=\"canimationcontroller__m_ptransitionfactory\"></a>  CAnimationController::m_pTransitionFactory  \n Stores a pointer to Transition Factory COM object.  \n  \n```  \nATL::CComPtr<IUIAnimationTransitionFactory> m_pTransitionFactory;  \n```  \n  \n##  <a name=\"canimationcontroller__m_ptransitionlibrary\"></a>  CAnimationController::m_pTransitionLibrary  \n Stores a pointer to Transition Library COM object.  \n  \n```  \nATL::CComPtr<IUIAnimationTransitionLibrary> m_pTransitionLibrary;  \n```  \n  \n##  <a name=\"canimationcontroller__onafterschedule\"></a>  CAnimationController::OnAfterSchedule  \n Called by the framework when an animation for the specified group has just been scheduled.  \n  \n```  \nvirtual void OnAfterSchedule(CAnimationGroup* pGroup);\n```  \n  \n### Parameters  \n `pGroup`  \n A pointer to an animation group, which has been scheduled.  \n  \n### Remarks  \n The default implementation removes keyframes from the specified group and transitions from animation variables that belong to the specified group. Can be overridden in a derived class to take any additional actions upon animation schedule.  \n  \n##  <a name=\"canimationcontroller__onanimationintegervaluechanged\"></a>  CAnimationController::OnAnimationIntegerValueChanged  \n Called by the framework when integer value of animation variable has changed.  \n  \n```  \nvirtual void OnAnimationIntegerValueChanged(\n    CAnimationGroup* pGroup,  \n    CAnimationBaseObject* pObject,  \n    IUIAnimationVariable* variable,  \n    INT32 newValue,  \n    INT32 prevValue);\n```  \n  \n### Parameters  \n `pGroup`  \n A pointer to an animation group that holds an animation object whose value has changed.  \n  \n `pObject`  \n A pointer to an animation object that contains an animation variable whose value has changed.  \n  \n `variable`  \n A pointer to an animation variable.  \n  \n `newValue`  \n Specifies new value.  \n  \n `prevValue`  \n Specifies previous value.  \n  \n### Remarks  \n This method is called if you enable animation variable events with EnableIntegerValueChangedEvent called for a specific animation variable or animation object. It can be overridden in a derived class to take application-specific actions.  \n  \n##  <a name=\"canimationcontroller__onanimationmanagerstatuschanged\"></a>  CAnimationController::OnAnimationManagerStatusChanged  \n Called by the framework in response to StatusChanged event from animation manager.  \n  \n```  \nvirtual void OnAnimationManagerStatusChanged(\n    UI_ANIMATION_MANAGER_STATUS newStatus,  \n    UI_ANIMATION_MANAGER_STATUS previousStatus);\n```  \n  \n### Parameters  \n `newStatus`  \n New animation manager status.  \n  \n `previousStatus`  \n Previous animation manager status.  \n  \n### Remarks  \n This method is called if you enable animation manager events with EnableAnimationManagerEvent. It can be overridden in a derived class to take application-specific actions. The default implementation updates a related window if it has been set with SetRelatedWnd.  \n  \n##  <a name=\"canimationcontroller__onanimationtimerpostupdate\"></a>  CAnimationController::OnAnimationTimerPostUpdate  \n Called by the framework after an animation update is finished.  \n  \n```  \nvirtual void OnAnimationTimerPostUpdate();\n```  \n  \n### Remarks  \n This method is called if you enable timer event handlers using EnableAnimationTimerEventHandler. It can be overridden in a derived class to take application-specific actions.  \n  \n##  <a name=\"canimationcontroller__onanimationtimerpreupdate\"></a>  CAnimationController::OnAnimationTimerPreUpdate  \n Called by the framework before an animation update begins.  \n  \n```  \nvirtual void OnAnimationTimerPreUpdate();\n```  \n  \n### Remarks  \n This method is called if you enable timer event handlers using EnableAnimationTimerEventHandler. It can be overridden in a derived class to take application-specific actions.  \n  \n##  <a name=\"canimationcontroller__onanimationtimerrenderingtooslow\"></a>  CAnimationController::OnAnimationTimerRenderingTooSlow  \n Called by the framework when the rendering frame rate for an animation falls below a minimum desirable frame rate.  \n  \n```  \nvirtual void OnAnimationTimerRenderingTooSlow(UINT32 fps);\n```  \n  \n### Parameters  \n `fps`  \n The current frame rate in frames per second.  \n  \n### Remarks  \n This method is called if you enable timer event handlers using EnableAnimationTimerEventHandler. It can be overridden in a derived class to take application-specific actions. The minimum desirable frame rate is specified by calling IUIAnimationTimer::SetFrameRateThreshold.  \n  \n##  <a name=\"canimationcontroller__onanimationvaluechanged\"></a>  CAnimationController::OnAnimationValueChanged  \n Called by the framework when value of animation variable has changed.  \n  \n```  \nvirtual void OnAnimationValueChanged(\n    CAnimationGroup* pGroup,  \n    CAnimationBaseObject* pObject,  \n    IUIAnimationVariable* variable,  \n    DOUBLE newValue,  \n    DOUBLE prevValue);\n```  \n  \n### Parameters  \n `pGroup`  \n A pointer to an animation group that holds an animation object whose value has changed.  \n  \n `pObject`  \n A pointer to an animation object that contains an animation variable whose value has changed.  \n  \n `variable`  \n A pointer to an animation variable.  \n  \n `newValue`  \n Specifies new value.  \n  \n `prevValue`  \n Specifies previous value.  \n  \n### Remarks  \n This method is called if you enable animation variable events with EnableValueChangedEvent called for a specific animation variable or animation object. It can be overridden in a derived class to take application-specific actions.  \n  \n##  <a name=\"canimationcontroller__onbeforeanimationstart\"></a>  CAnimationController::OnBeforeAnimationStart  \n Called by the framework right before the animation is scheduled.  \n  \n```  \nvirtual void OnBeforeAnimationStart(CAnimationGroup* pGroup);\n```  \n  \n### Parameters  \n `pGroup`  \n A pointer to an animation group whose animation is about to start.  \n  \n### Remarks  \n This call is routed to related CWnd and can be overridden in a derived class to perform any additional actions before the animation starts for the specified group.  \n  \n##  <a name=\"canimationcontroller__onhasprioritycancel\"></a>  CAnimationController::OnHasPriorityCancel  \n Called by the framework to resolve scheduling conflicts.  \n  \n```  \nvirtual BOOL OnHasPriorityCancel(\n    CAnimationGroup* pGroupScheduled,  \n    CAnimationGroup* pGroupNew,  \n    UI_ANIMATION_PRIORITY_EFFECT priorityEffect);\n```  \n  \n### Parameters  \n `pGroupScheduled`  \n The group that owns the currently scheduled storyboard.  \n  \n `pGroupNew`  \n The group that owns the new storyboard that is in scheduling conflict with the scheduled storyboard owned by pGroupScheduled.  \n  \n `priorityEffect`  \n The potential effect on pGroupNew if pGroupScheduled has a higher priority.  \n  \n### Return Value  \n Should return TRUE if storyboard owned by pGroupNew has priority. Should return FALSE if storyboard owned by pGroupScheduled has priority.  \n  \n### Remarks  \n This method is called if you enable priority comparison events using CAnimationController::EnablePriorityComparisonHandler and specify UI_ANIMATION_PHT_CANCEL. It can be overridden in a derived class to take application-specific actions. Read Windows Animation API documentation for more information about Conflict Management (http://msdn.microsoft.com/library/dd371759(VS.85).aspx).  \n  \n##  <a name=\"canimationcontroller__onhasprioritycompress\"></a>  CAnimationController::OnHasPriorityCompress  \n Called by the framework to resolve scheduling conflicts.  \n  \n```  \nvirtual BOOL OnHasPriorityCompress(\n    CAnimationGroup* pGroupScheduled,  \n    CAnimationGroup* pGroupNew,  \n    UI_ANIMATION_PRIORITY_EFFECT priorityEffect);\n```  \n  \n### Parameters  \n `pGroupScheduled`  \n The group that owns the currently scheduled storyboard.  \n  \n `pGroupNew`  \n The group that owns the new storyboard that is in scheduling conflict with the scheduled storyboard owned by pGroupScheduled.  \n  \n `priorityEffect`  \n The potential effect on pGroupNew if pGroupScheduled has a higher priority.  \n  \n### Return Value  \n Should return TRUE if storyboard owned by pGroupNew has priority. Should return FALSE if storyboard owned by pGroupScheduled has priority.  \n  \n### Remarks  \n This method is called if you enable priority comparison events using CAnimationController::EnablePriorityComparisonHandler and specify UI_ANIMATION_PHT_COMPRESS. It can be overridden in a derived class to take application-specific actions. Read Windows Animation API documentation for more information about Conflict Management (http://msdn.microsoft.com/library/dd371759(VS.85).aspx).  \n  \n##  <a name=\"canimationcontroller__onhaspriorityconclude\"></a>  CAnimationController::OnHasPriorityConclude  \n Called by the framework to resolve scheduling conflicts.  \n  \n```  \nvirtual BOOL OnHasPriorityConclude(\n    CAnimationGroup* pGroupScheduled,  \n    CAnimationGroup* pGroupNew,  \n    UI_ANIMATION_PRIORITY_EFFECT priorityEffect);\n```  \n  \n### Parameters  \n `pGroupScheduled`  \n The group that owns the currently scheduled storyboard.  \n  \n `pGroupNew`  \n The group that owns the new storyboard that is in scheduling conflict with the scheduled storyboard owned by pGroupScheduled.  \n  \n `priorityEffect`  \n The potential effect on pGroupNew if pGroupScheduled has a higher priority.  \n  \n### Return Value  \n Should return TRUE if storyboard owned by pGroupNew has priority. Should return FALSE if storyboard owned by pGroupScheduled has priority.  \n  \n### Remarks  \n This method is called if you enable priority comparison events using CAnimationController::EnablePriorityComparisonHandler and specify UI_ANIMATION_PHT_CONCLUDE. It can be overridden in a derived class to take application-specific actions. Read Windows Animation API documentation for more information about Conflict Management (http://msdn.microsoft.com/library/dd371759(VS.85).aspx).  \n  \n##  <a name=\"canimationcontroller__onhasprioritytrim\"></a>  CAnimationController::OnHasPriorityTrim  \n Called by the framework to resolve scheduling conflicts.  \n  \n```  \nvirtual BOOL OnHasPriorityTrim(\n    CAnimationGroup* pGroupScheduled,  \n    CAnimationGroup* pGroupNew,  \n    UI_ANIMATION_PRIORITY_EFFECT priorityEffect);\n```  \n  \n### Parameters  \n `pGroupScheduled`  \n The group that owns the currently scheduled storyboard.  \n  \n `pGroupNew`  \n The group that owns the new storyboard that is in scheduling conflict with the scheduled storyboard owned by pGroupScheduled.  \n  \n `priorityEffect`  \n The potential effect on pGroupNew if pGroupScheduled has a higher priority.  \n  \n### Return Value  \n Should return TRUE if storyboard owned by pGroupNew has priority. Should return FALSE if storyboard owned by pGroupScheduled has priority.  \n  \n### Remarks  \n This method is called if you enable priority comparison events using CAnimationController::EnablePriorityComparisonHandler and specify UI_ANIMATION_PHT_TRIM. It can be overridden in a derived class to take application-specific actions. Read Windows Animation API documentation for more information about Conflict Management (http://msdn.microsoft.com/library/dd371759(VS.85).aspx).  \n  \n##  <a name=\"canimationcontroller__onstoryboardstatuschanged\"></a>  CAnimationController::OnStoryboardStatusChanged  \n Called by the framework when storyboard status has changed.  \n  \n```  \nvirtual void OnStoryboardStatusChanged(\n    CAnimationGroup* pGroup,  \n    UI_ANIMATION_STORYBOARD_STATUS newStatus,  \n    UI_ANIMATION_STORYBOARD_STATUS previousStatus);\n```  \n  \n### Parameters  \n `pGroup`  \n A pointer to an animation group that owns the storyboard whose status has changed.  \n  \n `newStatus`  \n Specifies the new status.  \n  \n `previousStatus`  \n Specifies the previous status.  \n  \n### Remarks  \n This method is called if you enable storyboard events using CAnimationController::EnableStoryboardEventHandler. It can be overridden in a derived class to take application-specific actions.  \n  \n##  <a name=\"canimationcontroller__onstoryboardupdated\"></a>  CAnimationController::OnStoryboardUpdated  \n Called by the framework when storyboard has been updated.  \n  \n```  \nvirtual void OnStoryboardUpdated(CAnimationGroup* pGroup);\n```  \n  \n### Parameters  \n `pGroup`  \n A pointer to a group that owns the storyboard.  \n  \n### Remarks  \n This method is called if you enable storyboard events using CAnimationController::EnableStoryboardEventHandler. It can be overridden in a derived class to take application-specific actions.  \n  \n##  <a name=\"canimationcontroller__removeallanimationgroups\"></a>  CAnimationController::RemoveAllAnimationGroups  \n Removes all animation groups from animation controller.  \n  \n```  \nvoid RemoveAllAnimationGroups();\n```  \n  \n### Remarks  \n All groups will be deleted, their pointer, if stored at the application level, must be invalidated. If CAnimationGroup::m_bAutodestroyAnimationObjects for a group being deleted is TRUE, all animation objects that belong to that group will be deleted; otherwise their references to parent animation controller will be set to NULL and they can be added to another controller.  \n  \n##  <a name=\"canimationcontroller__removeanimationgroup\"></a>  CAnimationController::RemoveAnimationGroup  \n Removes an animation group with specified ID from animation controller.  \n  \n```  \nvoid RemoveAnimationGroup(UINT32 nGroupID);\n```  \n  \n### Parameters  \n `nGroupID`  \n Specifies animation group ID.  \n  \n### Remarks  \n This method removes an animation group from the internal list of groups and deletes it, therefore if you stored a pointer to that animation group, it must be invalidated. If CAnimationGroup::m_bAutodestroyAnimationObjects is TRUE, all animation objects that belong to that group will be deleted; otherwise their references to parent animation controller will be set to NULL and they can be added to another controller.  \n  \n##  <a name=\"canimationcontroller__removeanimationobject\"></a>  CAnimationController::RemoveAnimationObject  \n Remove an animation object from animation controller.  \n  \n```  \nvoid RemoveAnimationObject(\n    CAnimationBaseObject* pObject,  \n    BOOL bNoDelete = FALSE);\n```  \n  \n### Parameters  \n `pObject`  \n A pointer to an animation object.  \n  \n `bNoDelete`  \n If this parameter is TRUE the object will not be deleted upon remove.  \n  \n### Remarks  \n Removes an animation object from animation controller and animation group. Call this function if a particular object should not be animated anymore, or if you need to move the object to another animation controller. In the last case bNoDelete must be TRUE.  \n  \n##  <a name=\"canimationcontroller__removetransitions\"></a>  CAnimationController::RemoveTransitions  \n Removes transitions from animation objects that belong to the specified group.  \n  \n```  \nvoid RemoveTransitions(UINT32 nGroupID);\n```  \n  \n### Parameters  \n `nGroupID`  \n Specifies Group ID.  \n  \n### Remarks  \n The group loops over its animation objects and calls ClearTransitions(FALSE) for each animation object. This method is called by the framework after animation has been scheduled.  \n  \n##  <a name=\"canimationcontroller__schedulegroup\"></a>  CAnimationController::ScheduleGroup  \n Schedules an animation.  \n  \n```  \nBOOL ScheduleGroup(\n    UINT32 nGroupID,  \n    UI_ANIMATION_SECONDS time = 0.0);\n```  \n  \n### Parameters  \n `nGroupID`  \n Specifies animation Group ID to schedule.  \n  \n `time`  \n Specifies time to schedule.  \n  \n### Return Value  \n TRUE if animation was scheduled successfully. FALSE if storyboard has not been created, or other error occurs.  \n  \n### Remarks  \n You must call AnimateGroup with parameter bScheduleNow set to FALSE prior ScheduleGroup. You can specify the desired animation time obtained from IUIAnimationTimer::GetTime. If the time parameter is 0.0, the animation is scheduled for the current time.  \n  \n##  <a name=\"canimationcontroller__setrelatedwnd\"></a>  CAnimationController::SetRelatedWnd  \n Establishes a relationship between animation controller and a window.  \n  \n```  \nvoid SetRelatedWnd(CWnd* pWnd);\n```  \n  \n### Parameters  \n `pWnd`  \n A pointer to window object to set.  \n  \n### Remarks  \n If a related CWnd object is set, the animation controller can automatically update it (send WM_PAINT message) when the status of animation manager has changed or timer post update event has occurred.  \n  \n##  <a name=\"canimationcontroller__updateanimationmanager\"></a>  CAnimationController::UpdateAnimationManager  \n Directs the animation manager to update the values of all animation variables.  \n  \n```  \nvirtual void UpdateAnimationManager();\n```  \n  \n### Remarks  \n Calling this method advances the animation manager to current time, changing statuses of storyboards as necessary and updating any animation variables to appropriate interpolated values. Internally this method calls IUIAnimationTimer::GetTime(timeNow) and IUIAnimationManager::Update(timeNow). Override this method in a derived class to customize this behavior.  \n  \n## See Also  \n [Classes](../../mfc/reference/mfc-classes.md)\n"}