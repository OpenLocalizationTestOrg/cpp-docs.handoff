<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e91b8dd81105d7a76605a6d2d9c50cb13837fa17</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\casyncmonikerfile-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">503a24412a9bf2fafe6eeafd1dd48f1b2945f833</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">308984f6d4e29a13fddf231f3cad753963f6d482</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CAsyncMonikerFile Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CAsyncMonikerFile Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Provides functionality for the use of asynchronous monikers in ActiveX controls (formerly OLE controls).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CAsyncMonikerFile::CAsyncMonikerFile</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CAsyncMonikerFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CAsyncMonikerFile::Close</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Closes and releases all resources.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CAsyncMonikerFile::GetBinding</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the asynchronous transfer binding.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CAsyncMonikerFile::GetFormatEtc</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Retrieves the format of the data in the stream.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CAsyncMonikerFile::Open</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Opens a file asynchronously.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Protected Methods</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>CAsyncMonikerFile::CreateBindStatusCallback</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Creates a COM object that implements <ph id="ph1">`IBindStatusCallback`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>CAsyncMonikerFile::GetBindInfo</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Called by the OLE system library to request information on the type of bind to be created.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>CAsyncMonikerFile::GetPriority</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Called by the OLE system library to get the priority of the binding.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>CAsyncMonikerFile::OnDataAvailable</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Called to provide data as it becomes available to the client during asynchronous bind operations.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>CAsyncMonikerFile::OnLowResource</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Called when resources are low.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>CAsyncMonikerFile::OnProgress</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Called to indicate progress on the data downloading process.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>CAsyncMonikerFile::OnStartBinding</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Called when binding is starting up.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>CAsyncMonikerFile::OnStopBinding</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Called when asynchronous transfer is stopped.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Derived from <bpt id="p1">[</bpt>CMonikerFile<ept id="p1">](../../mfc/reference/cmonikerfile-class.md)</ept>, which in turn is derived from <bpt id="p2">[</bpt>COleStreamFile<ept id="p2">](../../mfc/reference/colestreamfile-class.md)</ept>, <ph id="ph1">`CAsyncMonikerFile`</ph> uses the <bpt id="p3">[</bpt>IMoniker<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms679705)</ept> interface to access any data stream asynchronously, including loading files asynchronously from a URL.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The files can be datapath properties of ActiveX controls.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Asynchronous monikers are used primarily in Internet-enabled applications and ActiveX controls to provide a responsive user-interface during file transfers.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A prime example of this is the use of <bpt id="p1">[</bpt>CDataPathProperty<ept id="p1">](../../mfc/reference/cdatapathproperty-class.md)</ept> to provide asynchronous properties for ActiveX controls.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CDataPathProperty`</ph> object will repeatedly get a callback to indicate availability of new data during a lengthy property exchange process.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information about how to use asynchronous monikers and ActiveX controls in Internet applications, see the following articles:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Internet First Steps: Asynchronous Monikers</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Internet First Steps: ActiveX Controls</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>CFile</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>COleStreamFile</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>CMonikerFile</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxole.h</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>CAsyncMonikerFile::CAsyncMonikerFile</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CAsyncMonikerFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>It does not create the <ph id="ph1">`IBindHost`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>is used only if you provide it in the <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> member function.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For a description of the <ph id="ph1">`IBindHost`</ph> interface, see the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>CAsyncMonikerFile::Close</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Call this function to close and release all resources.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Can be called on unopened or already closed files.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CAsyncMonikerFile::CreateBindStatusCallback</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Creates a COM object that implements <ph id="ph1">`IBindStatusCallback`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A pointer to the controlling unknown (the outer <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept>) or <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> if aggregation is not being used.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`pUnkControlling`</ph> is not <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the function returns a pointer to the inner <bpt id="p2">**</bpt>IUnknown<ept id="p2">**</ept> on a new COM object supporting <ph id="ph2">`IBindStatusCallback`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`pUnkControlling`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the function returns a pointer to an <bpt id="p2">**</bpt>IUnknown<ept id="p2">**</ept> on a new COM object supporting <ph id="ph2">`IBindStatusCallback`</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>requires a COM object that implements <ph id="ph1">`IBindStatusCallback`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>MFC implements such an object, and it is aggregatable.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You can override <ph id="ph1">`CreateBindStatusCallback`</ph> to return your own COM object.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Your COM object can aggregate MFC's implementation by calling <ph id="ph1">`CreateBindStatusCallback`</ph> with the controlling unknown of your COM object.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>COM objects implemented using the <ph id="ph1">`CCmdTarget`</ph> COM support can retrieve the controlling unknown using <bpt id="p1">**</bpt>CCmdTarget::GetControllingUnknown<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Alternately, your COM object can delegate to MFC's implementation by calling <bpt id="p1">**</bpt>CreateBindStatusCallback( NULL )<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CAsyncMonikerFile::Open<ept id="p1">](#casyncmonikerfile__open)</ept> calls <ph id="ph1">`CreateBindStatusCallback`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For more information about asynchronous monikers and asynchronous binding, see the <bpt id="p1">[</bpt>IBindStatusCallback<ept id="p1">](http://msdn.microsoft.com/library/ie/ms775060)</ept> interface and <bpt id="p2">[</bpt>How Asynchronous Binding and Storage Work<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/aa379152)</ept>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For a discussion of aggregation, see <bpt id="p1">[</bpt>Aggregation<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686558)</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>All three topics are in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>CAsyncMonikerFile::GetBindInfo</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Called from the client of an asynchronous moniker to tell the asynchronous moniker how it wants to bind.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Retrieves the settings for <bpt id="p1">**</bpt>IBindStatusCallBack<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>For a description of the <ph id="ph1">`IBindStatusCallback`</ph> interface, see the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The default implementation sets the binding to be asynchronous, to use a storage medium (a stream), and to use the data-push model.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Override this function if you want to change the behavior of the binding.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>One reason for doing this would be to bind using the data-pull model instead of the data-push model.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>In a data-pull model, the client drives the bind operation, and the moniker only provides data to the client when it is read.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>In a data-push model, the moniker drives the asynchronous bind operation and continuously notifies the client whenever new data is available.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>CAsyncMonikerFile::GetBinding</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve a pointer to the asynchronous transfer binding.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>A pointer to the <ph id="ph1">`IBinding`</ph> interface provided when asynchronous transfer begins.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if for any reason the transfer cannot be made asynchronously.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>This allows you to control the data transfer process through the <ph id="ph1">`IBinding`</ph> interface, for example, with <bpt id="p1">**</bpt>IBinding::Abort<ept id="p1">**</ept>, <bpt id="p2">**</bpt>IBinding::Pause<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>IBinding::Resume<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>For a description of the <ph id="ph1">`IBinding`</ph> interface, see the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>CAsyncMonikerFile::GetFormatEtc</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the format of the data in the stream.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A pointer to the Windows structure <bpt id="p1">[</bpt>FORMATETC<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms682177)</ept> for the currently opened stream.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if the moniker has not been bound, if it is not asynchronous, or if the asynchronous operation has not begun.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>CAsyncMonikerFile::GetPriority</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Called from the client of an asynchronous moniker as the binding process starts to receive the priority given to the thread for the binding operation.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The priority at which the asynchronous transfer will take place.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>One of the standard thread priority flags: <bpt id="p1">**</bpt>THREAD_PRIORITY_ABOVE_NORMAL<ept id="p1">**</ept>, <bpt id="p2">**</bpt>THREAD_PRIORITY_BELOW_NORMAL<ept id="p2">**</ept>, <bpt id="p3">**</bpt>THREAD_PRIORITY_HIGHEST<ept id="p3">**</ept>, <bpt id="p4">**</bpt>THREAD_PRIORITY_IDLE<ept id="p4">**</ept>, <bpt id="p5">**</bpt>THREAD_PRIORITY_LOWEST<ept id="p5">**</ept>, <bpt id="p6">**</bpt>THREAD_PRIORITY_NORMAL<ept id="p6">**</ept>, and <bpt id="p7">**</bpt>THREAD_PRIORITY_TIME_CRITICAL<ept id="p7">**</ept>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>See the Windows function <bpt id="p1">[</bpt>SetThreadPriority<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686277)</ept> for a description of these values.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>should not be called directly.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>THREAD_PRIORITY_NORMAL<ept id="p1">**</ept> is returned by the default implementation.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>CAsyncMonikerFile::OnDataAvailable</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>An asynchronous moniker calls <ph id="ph1">`OnDataAvailable`</ph> to provide data to the client as it becomes available, during asynchronous bind operations.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The cumulative amount (in bytes) of data available since the beginning of the binding.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Can be zero, indicating that the amount of data is not relevant to the operation, or that no specific amount became available.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>bscfFlag</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>BSCF<ept id="p1">**</ept> enumeration value.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Can be one or more of the following values:</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BSCF_FIRSTDATANOTIFICATION<ept id="p1">**</ept> Identifies the first call to <ph id="ph1">`OnDataAvailable`</ph> for a given bind operation.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BSCF_INTERMEDIATEDATANOTIFICATION<ept id="p1">**</ept> Identifies an intermediary call to <ph id="ph1">`OnDataAvailable`</ph> for a bind operation.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BSCF_LASTDATANOTIFICATION<ept id="p1">**</ept> Identifies the last call to <ph id="ph1">`OnDataAvailable`</ph> for a bind operation.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The default implementation of this function does nothing.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>See the following example for a sample implementation.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>NVC_MFCWinInet#5</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>CAsyncMonikerFile::OnLowResource</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Called by the moniker when resources are low.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The default implementation calls <ph id="ph1">`GetBinding( )-&gt; Abort( )`</ph>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>CAsyncMonikerFile::OnProgress</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Called by the moniker repeatedly to indicate the current progress of this bind operation, typically at reasonable intervals during a lengthy operation.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Indicates the current progress of the bind operation relative to the expected maximum indicated in <ph id="ph1">`ulProgressMax`</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Indicates the expected maximum value of <ph id="ph1">`ulProgress`</ph> for the duration of calls to <ph id="ph2">`OnProgress`</ph> for this operation.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Provides additional information regarding the progress of the bind operation.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Valid values are taken from the <ph id="ph1">`BINDSTATUS`</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>See Remarks for possible values.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Information about the current progress, depending on the value of <ph id="ph1">`ulStatusCode`</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>See Remarks for possible values.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Possible values for <ph id="ph1">`ulStatusCode`</ph> (and the <ph id="ph2">`szStatusText`</ph> for each value) are:</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>BINDSTATUS_FINDINGRESOURCE</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The bind operation is finding the resource that holds the object or storage being bound to.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`szStatusText`</ph> provides the display name of the resource being searched for (for example, "www.microsoft.com").</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>BINDSTATUS_CONNECTING</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The bind operation is connecting to the resource that holds the object or storage being bound to.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`szStatusText`</ph> provides the display name of the resource being connected to (for example, an IP address).</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>BINDSTATUS_SENDINGREQUEST</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The bind operation is requesting the object or storage being bound to.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`szStatusText`</ph> provides the display name of the object (for example, a file name).</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>BINDSTATUS_REDIRECTING</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The bind operation has been redirected to a different data location.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`szStatusText`</ph> provides the display name of the new data location.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>BINDSTATUS_USINGCACHEDCOPY</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The bind operation is retrieving the requested object or storage from a cached copy.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`szStatusText`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>BINDSTATUS_BEGINDOWNLOADDATA</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The bind operation has begun receiving the object or storage being bound to.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`szStatusText`</ph> provides the display name of the data location.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>BINDSTATUS_DOWNLOADINGDATA</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The bind operation continues to receive the object or storage being bound to.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`szStatusText`</ph> provides the display name of the data location.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>BINDSTATUS_ENDDOWNLOADDATA</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The bind operation has finished receiving the object or storage being bound to.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`szStatusText`</ph> provides the display name of the data location.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>BINDSTATUS_CLASSIDAVAILABLE</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>An instance of the object being bound to is just about to be created.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`szStatusText`</ph> provides the CLSID of the new object in string format, allowing the client an opportunity to cancel the bind operation, if desired.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>CAsyncMonikerFile::OnStartBinding</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Override this function in your derived classes to perform actions when binding is starting up.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>This function is called back by the moniker.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The default implementation does nothing.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>CAsyncMonikerFile::OnStopBinding</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Called by the moniker at the end of the bind operation.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`HRESULT`</ph> that is the error or warning value.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>szErrort</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>A character string describing the error.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Override this function to perform actions when the transfer is stopped.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>By default, the function releases <ph id="ph1">`IBinding`</ph>.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>For a description of the <ph id="ph1">`IBinding`</ph> interface, see the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>CAsyncMonikerFile::Open</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Call this member function to open a file asynchronously.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>A pointer to file to be opened asynchronously.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The file can be any valid URL or filename.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>A pointer to the file exceptions.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>In the event of an error, it will be set to the cause.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>A pointer to the asynchronous moniker interface <ph id="ph1">`IMoniker`</ph>, a precise moniker that is the combination of the document's own moniker, which you can retrieve with <bpt id="p1">**</bpt>IOleClientSite::GetMoniker(<ept id="p1">**</ept> <bpt id="p2">*</bpt>OLEWHICHMK_CONTAINER<ept id="p2">*</ept> <bpt id="p3">**</bpt>)<ept id="p3">**</ept>, and a moniker created from the path name.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The control can use this moniker to bind, but this is not the moniker the control should save.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>pBindHost</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>A pointer to the <ph id="ph1">`IBindHost`</ph> interface that will be used to create the moniker from a potentially relative pathname.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>If the bind host is invalid or does not provide a moniker, the call defaults to <bpt id="p1">**</bpt>Open(<ept id="p1">**</ept> <ph id="ph1">`lpszFileName`</ph><bpt id="p2">**</bpt>,<ept id="p2">**</ept><ph id="ph2">`pError`</ph><bpt id="p3">**</bpt>)<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>For a description of the <ph id="ph1">`IBindHost`</ph> interface, see the <ph id="ph2">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>A pointer to the <ph id="ph1">`IServiceProvider`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>If the service provider is invalid or fails to provide the service for <ph id="ph1">`IBindHost`</ph>, the call defaults to <bpt id="p1">**</bpt>Open(<ept id="p1">**</ept> <ph id="ph2">`lpszFileName`</ph><bpt id="p2">**</bpt>,<ept id="p2">**</ept><ph id="ph3">`pError`</ph><bpt id="p3">**</bpt>)<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>pUnknown</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>A pointer to the <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> interface.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`IServiceProvider`</ph> is found, the function queries for <ph id="ph2">`IBindHost`</ph>.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>If the service provider is invalid or fails to provide the service for <ph id="ph1">`IBindHost`</ph>, the call defaults to <bpt id="p1">**</bpt>Open(<ept id="p1">**</ept> <ph id="ph2">`lpszFileName`</ph><bpt id="p2">**</bpt>,<ept id="p2">**</ept><ph id="ph3">`pError`</ph><bpt id="p3">**</bpt>)<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Nonzero if the file is opened successfully; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>This call initiates the binding process.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>You can use a URL or a filename for the <ph id="ph1">`lpszURL`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>NVC_MFCWinInet#6</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>– or –</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>NVC_MFCWinInet#7</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>CMonikerFile Class</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>CMonikerFile Class</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>CDataPathProperty Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>