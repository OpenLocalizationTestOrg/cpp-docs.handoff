{"nodes":[{"pos":[12,52],"content":"Containers (Modern C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Containers (Modern C++) | Microsoft Docs","pos":[0,40]}]},{"content":"Containers (Modern C++)","pos":[559,582]},{"content":"By default, use <bpt id=\"p1\">[</bpt>vector<ept id=\"p1\">](../standard-library/vector-class.md)</ept> as the default sequential container in C++.","pos":[583,688],"source":"By default, use [vector](../standard-library/vector-class.md) as the default sequential container in C++."},{"content":"This is the equivalent of List<ph id=\"ph1\">\\&lt;</ph>T&gt; in other languages.","pos":[689,743],"source":" This is the equivalent of List\\<T> in other languages."},{"content":"Use <bpt id=\"p1\">[</bpt>map<ept id=\"p1\">](../standard-library/map-class.md)</ept> (not unordered_map) as the default associative container.","pos":[821,922],"source":"Use [map](../standard-library/map-class.md) (not unordered_map) as the default associative container."},{"content":"Use <bpt id=\"p1\">[</bpt>set<ept id=\"p1\">](../standard-library/set-class.md)</ept>, <bpt id=\"p2\">[</bpt>multimap<ept id=\"p2\">](../standard-library/multimap-class.md)</ept>, <bpt id=\"p3\">[</bpt>multiset<ept id=\"p3\">](../standard-library/multiset-class.md)</ept> for degenerate &amp; multi cases.","pos":[923,1098],"source":" Use [set](../standard-library/set-class.md), [multimap](../standard-library/multimap-class.md), [multiset](../standard-library/multiset-class.md) for degenerate & multi cases."},{"content":"When performance optimization is needed, consider using:","pos":[1221,1277]},{"content":"the array type when embedding is important - for example, as a class member.","pos":[1287,1363]},{"content":"unordered associative containers (unordered_map, et al.): Lower per-element overhead (major) and constant-time lookup (potentially major, sometimes minor).","pos":[1373,1528]},{"content":"Harder to use correctly and efficiently, because of inconveniences and sharp edges.","pos":[1529,1612]},{"content":"sorted vector.","pos":[1622,1636]},{"content":"(See: <bpt id=\"p1\">[</bpt>Algorithms<ept id=\"p1\">](../cpp/algorithms-modern-cpp.md)</ept>.)","pos":[1637,1690],"source":" (See: [Algorithms](../cpp/algorithms-modern-cpp.md).)"},{"content":"Donâ€™t use C arrays.","pos":[1697,1716]},{"content":"(For older APIs, use <ph id=\"ph1\">`f( vec.data(), vec.size() );`</ph> .)","pos":[1717,1771],"source":" (For older APIs, use `f( vec.data(), vec.size() );` .)"},{"pos":[1778,1876],"content":"For another article about containers, see <bpt id=\"p1\">[</bpt>STL Containers<ept id=\"p1\">](../standard-library/stl-containers.md)</ept>.","source":"For another article about containers, see [STL Containers](../standard-library/stl-containers.md)."},{"content":"Container Sizes","pos":[1885,1900]},{"content":"The following tables show the container sizes, in bytes, for x86 and x64 platforms.","pos":[1904,1987]},{"content":"(For these purposes, 32-bit ARM is equivalent to x86.)  These tables cover release mode, because debug mode contains checking machinery that consumes space and time.","pos":[1989,2154]},{"content":"The separate columns are for <ph id=\"ph1\">[!INCLUDE[cpp_orcas_long](../cpp/includes/cpp_orcas_long_md.md)]</ph> SP1, where <ph id=\"ph2\">`_SECURE_SCL`</ph> defaulted to 1, and for <ph id=\"ph3\">[!INCLUDE[cpp_orcas_long](../cpp/includes/cpp_orcas_long_md.md)]</ph> SP1 with <ph id=\"ph4\">`_SECURE_SCL`</ph> manually set to 0 for maximum speed.","pos":[2156,2423],"source":"  The separate columns are for [!INCLUDE[cpp_orcas_long](../cpp/includes/cpp_orcas_long_md.md)] SP1, where `_SECURE_SCL` defaulted to 1, and for [!INCLUDE[cpp_orcas_long](../cpp/includes/cpp_orcas_long_md.md)] SP1 with `_SECURE_SCL` manually set to 0 for maximum speed."},{"content":"Visual C++ in Visual Studio 2010, <ph id=\"ph1\">[!INCLUDE[cpp_dev11_long](../build/includes/cpp_dev11_long_md.md)]</ph>, and <ph id=\"ph2\">[!INCLUDE[cpp_dev12_long](../build/reference/includes/cpp_dev12_long_md.md)]</ph> default <ph id=\"ph3\">`_SECURE_SCL`</ph> to 0 (now known as <ph id=\"ph4\">`_ITERATOR_DEBUG_LEVEL`</ph>).","pos":[2425,2674],"source":"  Visual C++ in Visual Studio 2010, [!INCLUDE[cpp_dev11_long](../build/includes/cpp_dev11_long_md.md)], and [!INCLUDE[cpp_dev12_long](../build/reference/includes/cpp_dev12_long_md.md)] default `_SECURE_SCL` to 0 (now known as `_ITERATOR_DEBUG_LEVEL`)."},{"content":"x86 Container Sizes (Bytes)","pos":[2681,2708]},{"content":"VC9 SP1","pos":[2709,2716]},{"content":"VC9 SP1","pos":[2717,2724]},{"content":"SCL=0","pos":[2737,2742]},{"content":"VC10","pos":[2743,2747]},{"content":"VC11","pos":[2748,2752]},{"content":"vector<ph id=\"ph1\">\\&lt;</ph>int&gt;","pos":[2858,2870],"source":"vector\\<int>"},{"content":"24","pos":[2871,2873]},{"content":"16","pos":[2874,2876]},{"content":"16","pos":[2877,2879]},{"content":"12","pos":[2880,2882]},{"content":"array<ph id=\"ph1\">\\&lt;</ph>int, 5&gt;","pos":[2887,2901],"source":"array\\<int, 5>"},{"content":"20","pos":[2902,2904]},{"content":"20","pos":[2905,2907]},{"content":"20","pos":[2908,2910]},{"content":"20","pos":[2911,2913]},{"content":"deque<ph id=\"ph1\">\\&lt;</ph>int&gt;","pos":[2918,2929],"source":"deque\\<int>"},{"content":"32","pos":[2930,2932]},{"content":"32","pos":[2933,2935]},{"content":"24","pos":[2936,2938]},{"content":"20","pos":[2939,2941]},{"content":"forward_list<ph id=\"ph1\">\\&lt;</ph>int&gt;","pos":[2946,2964],"source":"forward_list\\<int>"},{"content":"N/A","pos":[2965,2968]},{"content":"N/A","pos":[2969,2972]},{"content":"8","pos":[2973,2974]},{"content":"4","pos":[2975,2976]},{"content":"list<ph id=\"ph1\">\\&lt;</ph>int&gt;","pos":[2981,2991],"source":"list\\<int>"},{"content":"28","pos":[2992,2994]},{"content":"12","pos":[2995,2997]},{"content":"12","pos":[2998,3000]},{"content":"8","pos":[3001,3002]},{"content":"priority_queue<ph id=\"ph1\">\\&lt;</ph>int&gt;","pos":[3007,3027],"source":"priority_queue\\<int>"},{"content":"28","pos":[3028,3030]},{"content":"20","pos":[3031,3033]},{"content":"20","pos":[3034,3036]},{"content":"16","pos":[3037,3039]},{"content":"queue<ph id=\"ph1\">\\&lt;</ph>int&gt;","pos":[3044,3055],"source":"queue\\<int>"},{"content":"32","pos":[3056,3058]},{"content":"32","pos":[3059,3061]},{"content":"24","pos":[3062,3064]},{"content":"20","pos":[3065,3067]},{"content":"stack<ph id=\"ph1\">\\&lt;</ph>int&gt;","pos":[3072,3083],"source":"stack\\<int>"},{"content":"32","pos":[3084,3086]},{"content":"32","pos":[3087,3089]},{"content":"24","pos":[3090,3092]},{"content":"20","pos":[3093,3095]},{"content":"pair<ph id=\"ph1\">\\&lt;</ph>int, int&gt;","pos":[3100,3115],"source":"pair\\<int, int>"},{"content":"8","pos":[3116,3117]},{"content":"8","pos":[3118,3119]},{"content":"8","pos":[3120,3121]},{"content":"8","pos":[3122,3123]},{"content":"tuple<ph id=\"ph1\">\\&lt;</ph>int, int, int&gt;","pos":[3128,3149],"source":"tuple\\<int, int, int>"},{"content":"16","pos":[3150,3152]},{"content":"16","pos":[3153,3155]},{"content":"16","pos":[3156,3158]},{"content":"12","pos":[3159,3161]},{"content":"map<ph id=\"ph1\">\\&lt;</ph>int, int&gt;","pos":[3166,3180],"source":"map\\<int, int>"},{"content":"32","pos":[3181,3183]},{"content":"12","pos":[3184,3186]},{"content":"16","pos":[3187,3189]},{"content":"8","pos":[3190,3191]},{"content":"multimap<ph id=\"ph1\">\\&lt;</ph>int, int&gt;","pos":[3196,3215],"source":"multimap\\<int, int>"},{"content":"32","pos":[3216,3218]},{"content":"12","pos":[3219,3221]},{"content":"16","pos":[3222,3224]},{"content":"8","pos":[3225,3226]},{"content":"set<ph id=\"ph1\">\\&lt;</ph>int&gt;","pos":[3231,3240],"source":"set\\<int>"},{"content":"32","pos":[3241,3243]},{"content":"12","pos":[3244,3246]},{"content":"16","pos":[3247,3249]},{"content":"8","pos":[3250,3251]},{"content":"multiset<ph id=\"ph1\">\\&lt;</ph>int&gt;","pos":[3256,3270],"source":"multiset\\<int>"},{"content":"32","pos":[3271,3273]},{"content":"12","pos":[3274,3276]},{"content":"16","pos":[3277,3279]},{"content":"8","pos":[3280,3281]},{"content":"hash_map<ph id=\"ph1\">\\&lt;</ph>int, int&gt;","pos":[3286,3305],"source":"hash_map\\<int, int>"},{"content":"72","pos":[3306,3308]},{"content":"44","pos":[3309,3311]},{"content":"44","pos":[3312,3314]},{"content":"32","pos":[3315,3317]},{"content":"hash_multimap<ph id=\"ph1\">\\&lt;</ph>int, int&gt;","pos":[3322,3346],"source":"hash_multimap\\<int, int>"},{"content":"72","pos":[3347,3349]},{"content":"44","pos":[3350,3352]},{"content":"44","pos":[3353,3355]},{"content":"32","pos":[3356,3358]},{"content":"hash_set<ph id=\"ph1\">\\&lt;</ph>int&gt;","pos":[3363,3377],"source":"hash_set\\<int>"},{"content":"72","pos":[3378,3380]},{"content":"44","pos":[3381,3383]},{"content":"44","pos":[3384,3386]},{"content":"32","pos":[3387,3389]},{"content":"hash_multiset<ph id=\"ph1\">\\&lt;</ph>int&gt;","pos":[3394,3413],"source":"hash_multiset\\<int>"},{"content":"72","pos":[3414,3416]},{"content":"44","pos":[3417,3419]},{"content":"44","pos":[3420,3422]},{"content":"32","pos":[3423,3425]},{"content":"unordered_map<ph id=\"ph1\">\\&lt;</ph>int, int&gt;","pos":[3430,3454],"source":"unordered_map\\<int, int>"},{"content":"72","pos":[3455,3457]},{"content":"44","pos":[3458,3460]},{"content":"44","pos":[3461,3463]},{"content":"32","pos":[3464,3466]},{"content":"unordered_multimap<ph id=\"ph1\">\\&lt;</ph>int, int&gt;","pos":[3471,3500],"source":"unordered_multimap\\<int, int>"},{"content":"72","pos":[3501,3503]},{"content":"44","pos":[3504,3506]},{"content":"44","pos":[3507,3509]},{"content":"32","pos":[3510,3512]},{"content":"unordered_set<ph id=\"ph1\">\\&lt;</ph>int&gt;","pos":[3517,3536],"source":"unordered_set\\<int>"},{"content":"72","pos":[3537,3539]},{"content":"44","pos":[3540,3542]},{"content":"44","pos":[3543,3545]},{"content":"32","pos":[3546,3548]},{"content":"ordered_multiset<ph id=\"ph1\">\\&lt;</ph>int&gt;","pos":[3552,3574],"source":"ordered_multiset\\<int>"},{"content":"72","pos":[3575,3577]},{"content":"44","pos":[3578,3580]},{"content":"44","pos":[3581,3583]},{"content":"32","pos":[3584,3586]},{"content":"string","pos":[3591,3597]},{"content":"28","pos":[3598,3600]},{"content":"28","pos":[3601,3603]},{"content":"28","pos":[3604,3606]},{"content":"24","pos":[3607,3609]},{"content":"wstring","pos":[3614,3621]},{"content":"28","pos":[3622,3624]},{"content":"28","pos":[3625,3627]},{"content":"28","pos":[3628,3630]},{"content":"24","pos":[3631,3633]},{"content":"x64 Container Sizes (Bytes)","pos":[3641,3668]},{"content":"VC9 SP1","pos":[3669,3676]},{"content":"VC9 SP1","pos":[3677,3684]},{"content":"SCL=0","pos":[3697,3702]},{"content":"VC10","pos":[3703,3707]},{"content":"VC11","pos":[3708,3712]},{"content":"vector<ph id=\"ph1\">\\&lt;</ph>int&gt;","pos":[3818,3830],"source":"vector\\<int>"},{"content":"48","pos":[3831,3833]},{"content":"32","pos":[3834,3836]},{"content":"32","pos":[3837,3839]},{"content":"24","pos":[3840,3842]},{"content":"array<ph id=\"ph1\">\\&lt;</ph>int, 5&gt;","pos":[3847,3861],"source":"array\\<int, 5>"},{"content":"20","pos":[3862,3864]},{"content":"20","pos":[3865,3867]},{"content":"20","pos":[3868,3870]},{"content":"20","pos":[3871,3873]},{"content":"deque<ph id=\"ph1\">\\&lt;</ph>int&gt;","pos":[3878,3889],"source":"deque\\<int>"},{"content":"64","pos":[3890,3892]},{"content":"64","pos":[3893,3895]},{"content":"48","pos":[3896,3898]},{"content":"40","pos":[3899,3901]},{"content":"forward_list<ph id=\"ph1\">\\&lt;</ph>int&gt;","pos":[3906,3924],"source":"forward_list\\<int>"},{"content":"N/A","pos":[3925,3928]},{"content":"N/A","pos":[3929,3932]},{"content":"16","pos":[3933,3935]},{"content":"8","pos":[3936,3937]},{"content":"list<ph id=\"ph1\">\\&lt;</ph>int&gt;","pos":[3942,3952],"source":"list\\<int>"},{"content":"56","pos":[3953,3955]},{"content":"24","pos":[3956,3958]},{"content":"24","pos":[3959,3961]},{"content":"16","pos":[3962,3964]},{"content":"priority_queue<ph id=\"ph1\">\\&lt;</ph>int&gt;","pos":[3969,3989],"source":"priority_queue\\<int>"},{"content":"56","pos":[3990,3992]},{"content":"40","pos":[3993,3995]},{"content":"40","pos":[3996,3998]},{"content":"32","pos":[3999,4001]},{"content":"queue<ph id=\"ph1\">\\&lt;</ph>int&gt;","pos":[4006,4017],"source":"queue\\<int>"},{"content":"64","pos":[4018,4020]},{"content":"64","pos":[4021,4023]},{"content":"48","pos":[4024,4026]},{"content":"40","pos":[4027,4029]},{"content":"stack<ph id=\"ph1\">\\&lt;</ph>int&gt;","pos":[4034,4045],"source":"stack\\<int>"},{"content":"64","pos":[4046,4048]},{"content":"64","pos":[4049,4051]},{"content":"48","pos":[4052,4054]},{"content":"40","pos":[4055,4057]},{"content":"pair<ph id=\"ph1\">\\&lt;</ph>int, int&gt;","pos":[4062,4077],"source":"pair\\<int, int>"},{"content":"8","pos":[4078,4079]},{"content":"8","pos":[4080,4081]},{"content":"8","pos":[4082,4083]},{"content":"8","pos":[4084,4085]},{"content":"tuple<ph id=\"ph1\">\\&lt;</ph>int, int, int&gt;","pos":[4090,4111],"source":"tuple\\<int, int, int>"},{"content":"16","pos":[4112,4114]},{"content":"16","pos":[4115,4117]},{"content":"16","pos":[4118,4120]},{"content":"12","pos":[4121,4123]},{"content":"map<ph id=\"ph1\">\\&lt;</ph>int, int&gt;","pos":[4128,4142],"source":"map\\<int, int>"},{"content":"64","pos":[4143,4145]},{"content":"24","pos":[4146,4148]},{"content":"32","pos":[4149,4151]},{"content":"16","pos":[4152,4154]},{"content":"multimap<ph id=\"ph1\">\\&lt;</ph>int, int&gt;","pos":[4159,4178],"source":"multimap\\<int, int>"},{"content":"64","pos":[4179,4181]},{"content":"24","pos":[4182,4184]},{"content":"32","pos":[4185,4187]},{"content":"16","pos":[4188,4190]},{"content":"set<ph id=\"ph1\">\\&lt;</ph>int&gt;","pos":[4195,4204],"source":"set\\<int>"},{"content":"64","pos":[4205,4207]},{"content":"24","pos":[4208,4210]},{"content":"32","pos":[4211,4213]},{"content":"16","pos":[4214,4216]},{"content":"multiset<ph id=\"ph1\">\\&lt;</ph>int&gt;","pos":[4221,4235],"source":"multiset\\<int>"},{"content":"64","pos":[4236,4238]},{"content":"24","pos":[4239,4241]},{"content":"32","pos":[4242,4244]},{"content":"16","pos":[4245,4247]},{"content":"hash_map<ph id=\"ph1\">\\&lt;</ph>int, int&gt;","pos":[4252,4271],"source":"hash_map\\<int, int>"},{"content":"144","pos":[4272,4275]},{"content":"88","pos":[4276,4278]},{"content":"88","pos":[4279,4281]},{"content":"64","pos":[4282,4284]},{"content":"hash_multimap<ph id=\"ph1\">\\&lt;</ph>int, int&gt;","pos":[4289,4313],"source":"hash_multimap\\<int, int>"},{"content":"144","pos":[4314,4317]},{"content":"88","pos":[4318,4320]},{"content":"88","pos":[4321,4323]},{"content":"64","pos":[4324,4326]},{"content":"hash_set<ph id=\"ph1\">\\&lt;</ph>int&gt;","pos":[4331,4345],"source":"hash_set\\<int>"},{"content":"144","pos":[4346,4349]},{"content":"88","pos":[4350,4352]},{"content":"88","pos":[4353,4355]},{"content":"64","pos":[4356,4358]},{"content":"hash_multiset<ph id=\"ph1\">\\&lt;</ph>int&gt;","pos":[4363,4382],"source":"hash_multiset\\<int>"},{"content":"144","pos":[4383,4386]},{"content":"88","pos":[4387,4389]},{"content":"88","pos":[4390,4392]},{"content":"64","pos":[4393,4395]},{"content":"unordered_map<ph id=\"ph1\">\\&lt;</ph>int, int&gt;","pos":[4400,4424],"source":"unordered_map\\<int, int>"},{"content":"144","pos":[4425,4428]},{"content":"88","pos":[4429,4431]},{"content":"88","pos":[4432,4434]},{"content":"64","pos":[4435,4437]},{"content":"unordered_multimap<ph id=\"ph1\">\\&lt;</ph>int, int&gt;","pos":[4442,4471],"source":"unordered_multimap\\<int, int>"},{"content":"144","pos":[4472,4475]},{"content":"88","pos":[4476,4478]},{"content":"88","pos":[4479,4481]},{"content":"64","pos":[4482,4484]},{"content":"unordered_set<ph id=\"ph1\">\\&lt;</ph>int&gt;","pos":[4489,4508],"source":"unordered_set\\<int>"},{"content":"144","pos":[4509,4512]},{"content":"88","pos":[4513,4515]},{"content":"88","pos":[4516,4518]},{"content":"64","pos":[4519,4521]},{"content":"ordered_multiset<ph id=\"ph1\">\\&lt;</ph>int&gt;","pos":[4525,4547],"source":"ordered_multiset\\<int>"},{"content":"144","pos":[4548,4551]},{"content":"88","pos":[4552,4554]},{"content":"88","pos":[4555,4557]},{"content":"64","pos":[4558,4560]},{"content":"string","pos":[4565,4571]},{"content":"40","pos":[4572,4574]},{"content":"40","pos":[4575,4577]},{"content":"40","pos":[4578,4580]},{"content":"32","pos":[4581,4583]},{"content":"wstring","pos":[4588,4595]},{"content":"40","pos":[4596,4598]},{"content":"40","pos":[4599,4601]},{"content":"40","pos":[4602,4604]},{"content":"32","pos":[4605,4607]},{"content":"See Also","pos":[4617,4625]},{"content":"Welcome Back to C++","pos":[4630,4649]},{"content":"C++ Language Reference","pos":[4698,4720]},{"content":"C++ Standard Library","pos":[4761,4781]}],"content":"---\ntitle: \"Containers (Modern C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: 6e10b758-e928-4827-9c3f-86cafe54bf5b\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Containers (Modern C++)\nBy default, use [vector](../standard-library/vector-class.md) as the default sequential container in C++. This is the equivalent of List\\<T> in other languages.  \n  \n```cpp  \nvector<string> v;  \nv.push_back( \"Geddy Lee\" );  \n  \n```  \n  \n Use [map](../standard-library/map-class.md) (not unordered_map) as the default associative container. Use [set](../standard-library/set-class.md), [multimap](../standard-library/multimap-class.md), [multiset](../standard-library/multiset-class.md) for degenerate & multi cases.  \n  \n```cpp  \nmap<string, string> phone_book;  \n// ...  \nphone_book[\"Alex Lifeson\"] = \"+1 (416) 555-1212\";  \n  \n```  \n  \n When performance optimization is needed, consider using:  \n  \n1.  the array type when embedding is important - for example, as a class member.  \n  \n2.  unordered associative containers (unordered_map, et al.): Lower per-element overhead (major) and constant-time lookup (potentially major, sometimes minor). Harder to use correctly and efficiently, because of inconveniences and sharp edges.  \n  \n3.  sorted vector. (See: [Algorithms](../cpp/algorithms-modern-cpp.md).)  \n  \n Donâ€™t use C arrays. (For older APIs, use `f( vec.data(), vec.size() );` .)  \n  \n For another article about containers, see [STL Containers](../standard-library/stl-containers.md).  \n  \n## Container Sizes  \n The following tables show the container sizes, in bytes, for x86 and x64 platforms.  (For these purposes, 32-bit ARM is equivalent to x86.)  These tables cover release mode, because debug mode contains checking machinery that consumes space and time.  The separate columns are for [!INCLUDE[cpp_orcas_long](../cpp/includes/cpp_orcas_long_md.md)] SP1, where `_SECURE_SCL` defaulted to 1, and for [!INCLUDE[cpp_orcas_long](../cpp/includes/cpp_orcas_long_md.md)] SP1 with `_SECURE_SCL` manually set to 0 for maximum speed.  Visual C++ in Visual Studio 2010, [!INCLUDE[cpp_dev11_long](../build/includes/cpp_dev11_long_md.md)], and [!INCLUDE[cpp_dev12_long](../build/reference/includes/cpp_dev12_long_md.md)] default `_SECURE_SCL` to 0 (now known as `_ITERATOR_DEBUG_LEVEL`).  \n  \n|x86 Container Sizes (Bytes)|VC9 SP1|VC9 SP1<br /><br /> SCL=0|VC10|VC11|  \n|-----------------------------------|-------------|------------------------|----------|----------|  \n|vector\\<int>|24|16|16|12|  \n|array\\<int, 5>|20|20|20|20|  \n|deque\\<int>|32|32|24|20|  \n|forward_list\\<int>|N/A|N/A|8|4|  \n|list\\<int>|28|12|12|8|  \n|priority_queue\\<int>|28|20|20|16|  \n|queue\\<int>|32|32|24|20|  \n|stack\\<int>|32|32|24|20|  \n|pair\\<int, int>|8|8|8|8|  \n|tuple\\<int, int, int>|16|16|16|12|  \n|map\\<int, int>|32|12|16|8|  \n|multimap\\<int, int>|32|12|16|8|  \n|set\\<int>|32|12|16|8|  \n|multiset\\<int>|32|12|16|8|  \n|hash_map\\<int, int>|72|44|44|32|  \n|hash_multimap\\<int, int>|72|44|44|32|  \n|hash_set\\<int>|72|44|44|32|  \n|hash_multiset\\<int>|72|44|44|32|  \n|unordered_map\\<int, int>|72|44|44|32|  \n|unordered_multimap\\<int, int>|72|44|44|32|  \n|unordered_set\\<int>|72|44|44|32|  \nordered_multiset\\<int>|72|44|44|32|  \n|string|28|28|28|24|  \n|wstring|28|28|28|24|  \n  \n|x64 Container Sizes (Bytes)|VC9 SP1|VC9 SP1<br /><br /> SCL=0|VC10|VC11|  \n|-----------------------------------|-------------|------------------------|----------|----------|  \n|vector\\<int>|48|32|32|24|  \n|array\\<int, 5>|20|20|20|20|  \n|deque\\<int>|64|64|48|40|  \n|forward_list\\<int>|N/A|N/A|16|8|  \n|list\\<int>|56|24|24|16|  \n|priority_queue\\<int>|56|40|40|32|  \n|queue\\<int>|64|64|48|40|  \n|stack\\<int>|64|64|48|40|  \n|pair\\<int, int>|8|8|8|8|  \n|tuple\\<int, int, int>|16|16|16|12|  \n|map\\<int, int>|64|24|32|16|  \n|multimap\\<int, int>|64|24|32|16|  \n|set\\<int>|64|24|32|16|  \n|multiset\\<int>|64|24|32|16|  \n|hash_map\\<int, int>|144|88|88|64|  \n|hash_multimap\\<int, int>|144|88|88|64|  \n|hash_set\\<int>|144|88|88|64|  \n|hash_multiset\\<int>|144|88|88|64|  \n|unordered_map\\<int, int>|144|88|88|64|  \n|unordered_multimap\\<int, int>|144|88|88|64|  \n|unordered_set\\<int>|144|88|88|64|  \nordered_multiset\\<int>|144|88|88|64|  \n|string|40|40|40|32|  \n|wstring|40|40|40|32|  \n  \n## See Also  \n [Welcome Back to C++](../cpp/welcome-back-to-cpp-modern-cpp.md)   \n [C++ Language Reference](../cpp/cpp-language-reference.md)   \n [C++ Standard Library](../standard-library/cpp-standard-library-reference.md)"}