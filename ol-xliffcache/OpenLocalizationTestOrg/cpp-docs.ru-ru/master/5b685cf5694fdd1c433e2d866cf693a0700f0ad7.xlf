<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5b685cf5694fdd1c433e2d866cf693a0700f0ad7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl-mfc-shared\cstring-argument-passing.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3fb4c2319483d837114c975b9bd85f167bccf4e7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6e5649dd454ebb5f42139b5eda8ecdd1caf2f216</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CString Argument Passing | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CString Argument Passing</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article explains how to pass <bpt id="p1">[</bpt>CString<ept id="p1">](../atl-mfc-shared/reference/cstringt-class.md)</ept> objects to functions and how to return <ph id="ph1">`CString`</ph> objects from functions.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>CString Argument-Passing Conventions</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When you define a class interface, you must determine the argument-passing convention for your member functions.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>There are some standard rules for passing and returning <ph id="ph1">`CString`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you follow the rules described in <bpt id="p1">[</bpt>Strings as Function Inputs<ept id="p1">](#_core_strings_as_function_inputs)</ept> and <bpt id="p2">[</bpt>Strings as Function Outputs<ept id="p2">](#_core_strings_as_function_outputs)</ept>, you will have efficient, correct code.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Strings as Function Inputs</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The most efficient and secure way to use a <ph id="ph1">`CString`</ph> object in called functions is to pass a <ph id="ph2">`CString`</ph> object to the function.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Despite the name, a <ph id="ph1">`CString`</ph> object does not store a string internally as a C-style string that has a null terminator.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Instead, a <ph id="ph1">`CString`</ph> object keeps careful track of the number of characters it has.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Having <ph id="ph1">`CString`</ph> provide a <ph id="ph2">`LPCTSTR`</ph> pointer to a null-terminated string is a small amount of work that can become significant if your code has to do it constantly.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The result is temporary because any change to the <ph id="ph1">`CString`</ph> contents invalidates old copies of the <ph id="ph2">`LPCTSTR`</ph> pointer.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It does make sense in some cases to provide a C-style string.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, there can be a situation where a called function is written in C and does not support objects.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In this case, coerce the <ph id="ph1">`CString`</ph> parameter to <ph id="ph2">`LPCTSTR`</ph>, and the function will get a C-style null-terminated string.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can also go the other direction and create a <ph id="ph1">`CString`</ph> object by using the <ph id="ph2">`CString`</ph> constructor that accepts a C-style string parameter.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If the string contents are to be changed by a function, declare the parameter as a nonconstant <ph id="ph1">`CString`</ph> reference (<bpt id="p1">**</bpt>CString&amp;<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Strings as Function Outputs</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Typically you can return <ph id="ph1">`CString`</ph> objects from functions because <ph id="ph2">`CString`</ph> objects follow value semantics like primitive types.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To return a read-only string, use a constant <ph id="ph1">`CString`</ph> reference (<bpt id="p1">**</bpt>const CString&amp;<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following example illustrates the use of <ph id="ph1">`CString`</ph> parameters and return types:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#197</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#198</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Strings (ATL/MFC)</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>