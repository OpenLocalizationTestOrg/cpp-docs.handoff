<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">358db7ca50ae8999ab66b6ef9eba73430ec3dc1c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\exceptions-changes-to-exception-macros-in-version-3-0.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">710c218c2a95b3a908f006abea3877873706352e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5525e7a526df945d945ae392f0ae9ceb764704e3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Exceptions: Changes to Exception Macros in Version 3.0 | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Exceptions: Changes to Exception Macros in Version 3.0</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This is an advanced topic.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In MFC version 3.0 and later, the exception-handling macros have been changed to use C++ exceptions.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This article tells how those changes can affect the behavior of existing code that uses the macros.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This article covers the following topics:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Exception types and the CATCH macro</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Re-throwing exceptions</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Exception Types and the CATCH Macro</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In earlier versions of MFC, the <bpt id="p1">**</bpt>CATCH<ept id="p1">**</ept> macro used MFC run-time type information to determine an exception's type; the exception's type is determined, in other words, at the catch site.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>With C++ exceptions, however, the exception's type is always determined at the throw site by the type of the exception object that is thrown.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This will cause incompatibilities in the rare case where the type of the pointer to the thrown object differs from the type of the thrown object.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following example illustrates the consequence of this difference between MFC version 3.0 and earlier versions:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>NVC_MFCExceptions#1</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This code behaves differently in version 3.0 because control always passes to the first <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> block with a matching exception-declaration.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The result of the throw expression</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>NVC_MFCExceptions#19</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>is thrown as a <bpt id="p1">**</bpt>CException<ph id="ph1">\*</ph><ept id="p1">**</ept>, even though it is constructed as a <bpt id="p2">**</bpt>CCustomException<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CATCH<ept id="p1">**</ept> macro in MFC versions 2.5 and earlier uses <ph id="ph1">`CObject::IsKindOf`</ph> to test the type at run time.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Because the expression</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>NVC_MFCExceptions#20</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>is true, the first catch block catches the exception.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In version 3.0, which uses C++ exceptions to implement many of the exception-handling macros, the second catch block matches the thrown <ph id="ph1">`CException`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Code like this is uncommon.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>It usually appears when an exception object is passed to another function that accepts a generic <bpt id="p1">**</bpt>CException<ph id="ph1">\*</ph><ept id="p1">**</ept>, performs "pre-throw" processing, and finally throws the exception.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To work around this problem, move the throw expression from the function to the calling code and throw an exception of the actual type known to the compiler at the time the exception is generated.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Re-Throwing Exceptions</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A catch block cannot throw the same exception pointer that it caught.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example, this code was valid in previous versions, but will have unexpected results with version 3.0:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>NVC_MFCExceptions#2</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Using <bpt id="p1">**</bpt>THROW<ept id="p1">**</ept> in the catch block causes the pointer <ph id="ph1">`e`</ph> to be deleted, so that the outer catch site will receive an invalid pointer.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`THROW_LAST`</ph> to re-throw <ph id="ph2">`e`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Exceptions: Catching and Deleting Exceptions<ept id="p1">](../mfc/exceptions-catching-and-deleting-exceptions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Exception Handling</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>