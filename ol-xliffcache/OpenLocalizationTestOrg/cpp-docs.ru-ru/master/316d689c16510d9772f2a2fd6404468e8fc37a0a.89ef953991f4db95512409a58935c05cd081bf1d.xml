{"nodes":[{"pos":[12,60],"content":"Reference-Type Function Returns | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Reference-Type Function Returns | Microsoft Docs","pos":[0,48]}]},{"content":"Reference-Type Function Returns","pos":[699,730]},{"content":"Functions can be declared to return a reference type.","pos":[731,784]},{"content":"There are two reasons to make such a declaration:","pos":[785,834]},{"content":"The information being returned is a large enough object that returning a reference is more efficient than returning a copy.","pos":[844,967]},{"content":"The type of the function must be an l-value.","pos":[977,1021]},{"content":"The referred-to object will not go out of scope when the function returns.","pos":[1031,1105]},{"content":"Just as it can be more efficient to pass large objects <bpt id=\"p1\">*</bpt>to<ept id=\"p1\">*</ept> functions by reference, it also can be more efficient to return large objects <bpt id=\"p2\">*</bpt>from<ept id=\"p2\">*</ept> functions by reference.","pos":[1112,1280],"source":"Just as it can be more efficient to pass large objects *to* functions by reference, it also can be more efficient to return large objects *from* functions by reference."},{"content":"Reference-return protocol eliminates the necessity of copying the object to a temporary location prior to returning.","pos":[1281,1397]},{"content":"Reference-return types can also be useful when the function must evaluate to an l-value.","pos":[1404,1492]},{"content":"Most overloaded operators fall into this category, particularly the assignment operator.","pos":[1493,1581]},{"content":"Overloaded operators are covered in <bpt id=\"p1\">[</bpt>Overloaded Operators<ept id=\"p1\">](../cpp/operator-overloading.md)</ept>.","pos":[1582,1673],"source":" Overloaded operators are covered in [Overloaded Operators](../cpp/operator-overloading.md)."},{"content":"Example","pos":[1682,1689]},{"pos":[1693,1722],"content":"Consider the <ph id=\"ph1\">`Point`</ph> example:","source":"Consider the `Point` example:"},{"content":"Output","pos":[2413,2419]},{"content":"Notice that the functions <ph id=\"ph1\">`x`</ph> and <ph id=\"ph2\">`y`</ph> are declared as returning reference types.","pos":[2457,2537],"source":"Notice that the functions `x` and `y` are declared as returning reference types."},{"content":"These functions can be used on either side of an assignment statement.","pos":[2538,2608]},{"content":"Note also that in main, ThePoint object remains in scope, and therefore its reference members are still alive and can be safely accessed.","pos":[2615,2752]},{"content":"Declarations of reference types must contain initializers except in the following cases:","pos":[2759,2847]},{"pos":[2857,2886],"content":"Explicit <ph id=\"ph1\">`extern`</ph> declaration","source":"Explicit `extern` declaration"},{"content":"Declaration of a class member","pos":[2896,2925]},{"content":"Declaration within a class","pos":[2935,2961]},{"content":"Declaration of an argument to a function or the return type for a function","pos":[2971,3045]},{"content":"Caution returning address of local","pos":[3054,3088]},{"content":"If you declare an object at local scope, that object will be destroyed when the function returns.","pos":[3092,3189]},{"content":"If the function returns a reference to that object, that reference will probably cause an access violation at runtime if the caller attempts to use the null reference.","pos":[3190,3357]},{"content":"The compiler issues a warning in this case: <ph id=\"ph1\">`warning C4172: returning address of local variable or temporary`</ph>.","pos":[3499,3609],"source":"The compiler issues a warning in this case: `warning C4172: returning address of local variable or temporary`."},{"content":"In simple programs it is possible that occasionally no access violation will occur if the reference is accessed by the caller before the memory location is overwritten.","pos":[3610,3778]},{"content":"This is due to sheer luck.","pos":[3779,3805]},{"content":"Heed the warning.","pos":[3806,3823]},{"content":"See Also","pos":[3832,3840]},{"content":"References","pos":[3845,3855]}],"content":"---\ntitle: \"Reference-Type Function Returns | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"function return types, reference type\"\n  - \"data types [C++], function return types\"\n  - \"functions [C++], return types\"\nms.assetid: 5b73be1d-2dc7-41df-ab0a-adcba36f2ad1\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Reference-Type Function Returns\nFunctions can be declared to return a reference type. There are two reasons to make such a declaration:  \n  \n-   The information being returned is a large enough object that returning a reference is more efficient than returning a copy.  \n  \n-   The type of the function must be an l-value.  \n  \n-   The referred-to object will not go out of scope when the function returns.  \n  \n Just as it can be more efficient to pass large objects *to* functions by reference, it also can be more efficient to return large objects *from* functions by reference. Reference-return protocol eliminates the necessity of copying the object to a temporary location prior to returning.  \n  \n Reference-return types can also be useful when the function must evaluate to an l-value. Most overloaded operators fall into this category, particularly the assignment operator. Overloaded operators are covered in [Overloaded Operators](../cpp/operator-overloading.md).  \n  \n## Example  \n Consider the `Point` example:  \n  \n```  \n// refType_function_returns.cpp  \n// compile with: /EHsc  \n  \n#include <iostream>  \nusing namespace std;  \n  \nclass Point  \n{  \npublic:  \n// Define \"accessor\" functions as  \n//  reference types.  \nunsigned& x();  \nunsigned& y();  \nprivate:  \n// Note that these are declared at class scope:  \nunsigned obj_x;   \nunsigned obj_y;   \n};  \n  \nunsigned& Point :: x()  \n{  \nreturn obj_x;  \n}  \nunsigned& Point :: y()  \n{  \nreturn obj_y;  \n}  \n  \nint main()  \n{  \nPoint ThePoint;  \n// Use x() and y() as l-values.  \nThePoint.x() = 7;  \nThePoint.y() = 9;  \n  \n// Use x() and y() as r-values.  \ncout << \"x = \" << ThePoint.x() << \"\\n\"  \n<< \"y = \" << ThePoint.y() << \"\\n\";  \n}  \n```  \n  \n## Output  \n  \n```  \nx = 7  \ny = 9  \n```  \n  \n Notice that the functions `x` and `y` are declared as returning reference types. These functions can be used on either side of an assignment statement.  \n  \n Note also that in main, ThePoint object remains in scope, and therefore its reference members are still alive and can be safely accessed.  \n  \n Declarations of reference types must contain initializers except in the following cases:  \n  \n-   Explicit `extern` declaration  \n  \n-   Declaration of a class member  \n  \n-   Declaration within a class  \n  \n-   Declaration of an argument to a function or the return type for a function  \n  \n## Caution returning address of local  \n If you declare an object at local scope, that object will be destroyed when the function returns. If the function returns a reference to that object, that reference will probably cause an access violation at runtime if the caller attempts to use the null reference.  \n  \n```  \n// C4172 means Donâ€™t do this!!!  \nFoo& GetFoo()  \n{  \n    Foo f;  \n    ...  \n    return f;  \n} // f is destroyed here  \n```  \n  \n The compiler issues a warning in this case: `warning C4172: returning address of local variable or temporary`. In simple programs it is possible that occasionally no access violation will occur if the reference is accessed by the caller before the memory location is overwritten. This is due to sheer luck. Heed the warning.  \n  \n## See Also  \n [References](../cpp/references-cpp.md)"}