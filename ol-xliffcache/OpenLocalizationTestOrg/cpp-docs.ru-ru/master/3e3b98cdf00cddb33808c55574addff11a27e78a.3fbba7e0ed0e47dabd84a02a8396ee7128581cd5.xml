{"nodes":[{"pos":[12,70],"content":"TN025: Document, View, and Frame Creation | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"TN025: Document, View, and Frame Creation | Microsoft Docs","pos":[0,58]}]},{"content":"TN025: Document, View, and Frame Creation","pos":[657,698]},{"pos":[701,1016],"content":"[!NOTE]\n The following technical note has not been updated since it was first included in the online documentation. As a result, some procedures and topics might be out of date or incorrect. For the latest information, it is recommended that you search for the topic of interest in the online documentation index.","leadings":["","> "],"nodes":[{"content":" The following technical note has not been updated since it was first included in the online documentation. As a result, some procedures and topics might be out of date or incorrect. For the latest information, it is recommended that you search for the topic of interest in the online documentation index.","pos":[8,313],"nodes":[{"content":"The following technical note has not been updated since it was first included in the online documentation.","pos":[1,107]},{"content":"As a result, some procedures and topics might be out of date or incorrect.","pos":[108,182]},{"content":"For the latest information, it is recommended that you search for the topic of interest in the online documentation index.","pos":[183,305]}]}]},{"content":"This note describes the creation and ownership issues for WinApps, DocTemplates, Documents, Frames and Views.","pos":[1023,1132]},{"content":"WinApp","pos":[1141,1147]},{"pos":[1151,1195],"content":"There is one <ph id=\"ph1\">`CWinApp`</ph> object in the system.","source":"There is one `CWinApp` object in the system."},{"content":"It is statically constructed and initialized by the framework's internal implementation of <ph id=\"ph1\">`WinMain`</ph>.","pos":[1202,1303],"source":"It is statically constructed and initialized by the framework's internal implementation of `WinMain`."},{"content":"You must derive from <ph id=\"ph1\">`CWinApp`</ph> to do anything useful (exception: extension DLLs should not have a <ph id=\"ph2\">`CWinApp`</ph> instance — initialization is done in <ph id=\"ph3\">`DllMain`</ph> instead).","pos":[1304,1468],"source":" You must derive from `CWinApp` to do anything useful (exception: extension DLLs should not have a `CWinApp` instance — initialization is done in `DllMain` instead)."},{"content":"The one <ph id=\"ph1\">`CWinApp`</ph> object owns a list of document templates (a <ph id=\"ph2\">`CPtrList`</ph>).","pos":[1475,1549],"source":"The one `CWinApp` object owns a list of document templates (a `CPtrList`)."},{"content":"There is one or more document template per application.","pos":[1550,1605]},{"content":"DocTemplates are usually loaded from the resource file (that is, a string array) in <ph id=\"ph1\">`CWinApp::InitInstance`</ph>.","pos":[1606,1714],"source":" DocTemplates are usually loaded from the resource file (that is, a string array) in `CWinApp::InitInstance`."},{"content":"The one <ph id=\"ph1\">`CWinApp`</ph> object owns all frame windows in the application.","pos":[1815,1882],"source":"The one `CWinApp` object owns all frame windows in the application."},{"content":"The main frame window for the application should be stored in <bpt id=\"p1\">**</bpt>CWinApp::m_pMainWnd<ept id=\"p1\">**</ept>; usually you set <ph id=\"ph1\">`m_pMainWnd`</ph> in the <ph id=\"ph2\">`InitInstance`</ph> implementation if you have not let AppWizard do it for you.","pos":[1883,2080],"source":" The main frame window for the application should be stored in **CWinApp::m_pMainWnd**; usually you set `m_pMainWnd` in the `InitInstance` implementation if you have not let AppWizard do it for you."},{"content":"For single document interface (SDI) this is one <ph id=\"ph1\">`CFrameWnd`</ph> that serves as the main application frame window as well as the only document frame window.","pos":[2081,2232],"source":" For single document interface (SDI) this is one `CFrameWnd` that serves as the main application frame window as well as the only document frame window."},{"content":"For multiple document interface (MDI) this is an MDI-Frame (class <ph id=\"ph1\">`CMDIFrameWnd`</ph>) that serves as the main application frame window that contains all the child <ph id=\"ph2\">`CFrameWnd`</ph>s.","pos":[2233,2405],"source":" For multiple document interface (MDI) this is an MDI-Frame (class `CMDIFrameWnd`) that serves as the main application frame window that contains all the child `CFrameWnd`s."},{"content":"Each child window is of class <ph id=\"ph1\">`CMDIChildWnd`</ph> (derived from <ph id=\"ph2\">`CFrameWnd`</ph>) and serves as one of potentially many document frame windows.","pos":[2406,2539],"source":" Each child window is of class `CMDIChildWnd` (derived from `CFrameWnd`) and serves as one of potentially many document frame windows."},{"content":"DocTemplates","pos":[2548,2560]},{"content":"The <ph id=\"ph1\">`CDocTemplate`</ph> is the creator and manager of documents.","pos":[2564,2623],"source":"The `CDocTemplate` is the creator and manager of documents."},{"content":"It owns the documents that it creates.","pos":[2624,2662]},{"content":"If your application uses the resource-based approach described below, it will not need to derive from <ph id=\"ph1\">`CDocTemplate`</ph>.","pos":[2663,2780],"source":" If your application uses the resource-based approach described below, it will not need to derive from `CDocTemplate`."},{"content":"For an SDI application, the class <ph id=\"ph1\">`CSingleDocTemplate`</ph> keeps track of one open document.","pos":[2787,2875],"source":"For an SDI application, the class `CSingleDocTemplate` keeps track of one open document."},{"content":"For an MDI application, the class <ph id=\"ph1\">`CMultiDocTemplate`</ph> keeps a list (a <ph id=\"ph2\">`CPtrList`</ph>) of all the currently open documents created from that template.","pos":[2876,3021],"source":" For an MDI application, the class `CMultiDocTemplate` keeps a list (a `CPtrList`) of all the currently open documents created from that template."},{"content":"and <ph id=\"ph1\">`CDocTemplate::RemoveDocument`</ph> provide the virtual member functions for adding or removing a document from the template.","pos":[3050,3174],"source":" and `CDocTemplate::RemoveDocument` provide the virtual member functions for adding or removing a document from the template."},{"content":"is a friend of <bpt id=\"p1\">**</bpt>CDocument<ept id=\"p1\">**</ept> so we can set the protected <bpt id=\"p2\">**</bpt>CDocument::m_pDocTemplate<ept id=\"p2\">**</ept> back pointer to point back to the doc template that created the document.","pos":[3190,3350],"source":" is a friend of **CDocument** so we can set the protected **CDocument::m_pDocTemplate** back pointer to point back to the doc template that created the document."},{"content":"handles the default <ph id=\"ph1\">`OnFileOpen`</ph> implementation, which will in turn query all the doc templates.","pos":[3367,3463],"source":" handles the default `OnFileOpen` implementation, which will in turn query all the doc templates."},{"content":"The implementation includes looking for already open documents and deciding what format to open new documents in.","pos":[3464,3577]},{"pos":[3599,3647],"content":"manages the UI binding for documents and frames."},{"pos":[3669,3718],"content":"keeps a count of the number of unnamed documents."},{"content":"CDocument","pos":[3727,3736]},{"pos":[3740,3785],"content":"A <bpt id=\"p1\">**</bpt>CDocument<ept id=\"p1\">**</ept> is owned by a <ph id=\"ph1\">`CDocTemplate`</ph>.","source":"A **CDocument** is owned by a `CDocTemplate`."},{"pos":[3792,3906],"content":"Documents have a list of currently open views (derived from <ph id=\"ph1\">`CView`</ph>) that are viewing the document (a <ph id=\"ph2\">`CPtrList`</ph>).","source":"Documents have a list of currently open views (derived from `CView`) that are viewing the document (a `CPtrList`)."},{"content":"Documents do not create/destroy the views, but they are attached to each other after they are created.","pos":[3913,4015]},{"content":"When a document is closed (that is, through File/Close), all attached views will be closed.","pos":[4016,4107]},{"content":"When the last view on a document is closed (that is, Window/Close) the document will be closed.","pos":[4108,4203]},{"content":"The <ph id=\"ph1\">`CDocument::AddView`</ph>, <ph id=\"ph2\">`RemoveView`</ph> interface is used to maintain the view list.","pos":[4210,4293],"source":"The `CDocument::AddView`, `RemoveView` interface is used to maintain the view list."},{"content":"<bpt id=\"p1\">**</bpt>CDocument<ept id=\"p1\">**</ept> is a friend of <ph id=\"ph1\">`CView`</ph> so we can set the <bpt id=\"p2\">**</bpt>CView::m_pDocument<ept id=\"p2\">**</ept> back pointer.","pos":[4294,4385],"source":"**CDocument** is a friend of `CView` so we can set the **CView::m_pDocument** back pointer."},{"content":"CFrameWnd","pos":[4394,4403]},{"content":"A <ph id=\"ph1\">`CFrameWnd`</ph> (also known as a frame) plays the same role as in MFC 1.0, but now the <ph id=\"ph2\">`CFrameWnd`</ph> class is designed to be used in many cases without deriving a new class.","pos":[4407,4576],"source":"A `CFrameWnd` (also known as a frame) plays the same role as in MFC 1.0, but now the `CFrameWnd` class is designed to be used in many cases without deriving a new class."},{"content":"The derived classes <ph id=\"ph1\">`CMDIFrameWnd`</ph> and <ph id=\"ph2\">`CMDIChildWnd`</ph> are also enhanced so many standard commands are already implemented.","pos":[4577,4699],"source":" The derived classes `CMDIFrameWnd` and `CMDIChildWnd` are also enhanced so many standard commands are already implemented."},{"content":"The <ph id=\"ph1\">`CFrameWnd`</ph> is responsible for creating windows in the client area of the frame.","pos":[4706,4790],"source":"The `CFrameWnd` is responsible for creating windows in the client area of the frame."},{"content":"Normally there is one main window filling the client area of the frame.","pos":[4791,4862]},{"content":"For an MDI-Frame window, the client area is filled with the MDICLIENT control which is in turn the parent of all the MDI-Child frame windows.","pos":[4869,5010]},{"content":"For an SDI-Frame window or an MDI-Child frame window, the client area is usually filled with a <ph id=\"ph1\">`CView`</ph>-derived window object.","pos":[5011,5136],"source":" For an SDI-Frame window or an MDI-Child frame window, the client area is usually filled with a `CView`-derived window object."},{"content":"In the case of <ph id=\"ph1\">`CSplitterWnd`</ph>, the client area of the view is filled with the <ph id=\"ph2\">`CSplitterWnd`</ph> window object, and the <ph id=\"ph3\">`CView`</ph>-derived window objects (one per split pane) are created as child windows of the <ph id=\"ph4\">`CSplitterWnd`</ph>.","pos":[5137,5356],"source":" In the case of `CSplitterWnd`, the client area of the view is filled with the `CSplitterWnd` window object, and the `CView`-derived window objects (one per split pane) are created as child windows of the `CSplitterWnd`."},{"content":"See Also","pos":[5365,5373]},{"content":"Technical Notes by Number","pos":[5378,5403]},{"content":"Technical Notes by Category","pos":[5447,5474]}],"content":"---\ntitle: \"TN025: Document, View, and Frame Creation | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"vc.creation\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"documents, view and frame creation\"\n  - \"TN025\"\nms.assetid: 09254d72-6e1d-43db-80e9-693887dbeda2\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# TN025: Document, View, and Frame Creation\n> [!NOTE]\n>  The following technical note has not been updated since it was first included in the online documentation. As a result, some procedures and topics might be out of date or incorrect. For the latest information, it is recommended that you search for the topic of interest in the online documentation index.  \n  \n This note describes the creation and ownership issues for WinApps, DocTemplates, Documents, Frames and Views.  \n  \n## WinApp  \n There is one `CWinApp` object in the system.  \n  \n It is statically constructed and initialized by the framework's internal implementation of `WinMain`. You must derive from `CWinApp` to do anything useful (exception: extension DLLs should not have a `CWinApp` instance — initialization is done in `DllMain` instead).  \n  \n The one `CWinApp` object owns a list of document templates (a `CPtrList`). There is one or more document template per application. DocTemplates are usually loaded from the resource file (that is, a string array) in `CWinApp::InitInstance`.  \n  \n```  \npTemplate = new CDocTemplate(IDR_MYDOCUMENT, ...);\n\nAddDocTemplate(pTemplate);\n```  \n  \n The one `CWinApp` object owns all frame windows in the application. The main frame window for the application should be stored in **CWinApp::m_pMainWnd**; usually you set `m_pMainWnd` in the `InitInstance` implementation if you have not let AppWizard do it for you. For single document interface (SDI) this is one `CFrameWnd` that serves as the main application frame window as well as the only document frame window. For multiple document interface (MDI) this is an MDI-Frame (class `CMDIFrameWnd`) that serves as the main application frame window that contains all the child `CFrameWnd`s. Each child window is of class `CMDIChildWnd` (derived from `CFrameWnd`) and serves as one of potentially many document frame windows.  \n  \n## DocTemplates  \n The `CDocTemplate` is the creator and manager of documents. It owns the documents that it creates. If your application uses the resource-based approach described below, it will not need to derive from `CDocTemplate`.  \n  \n For an SDI application, the class `CSingleDocTemplate` keeps track of one open document. For an MDI application, the class `CMultiDocTemplate` keeps a list (a `CPtrList`) of all the currently open documents created from that template. `CDocTemplate::AddDocument` and `CDocTemplate::RemoveDocument` provide the virtual member functions for adding or removing a document from the template. `CDocTemplate` is a friend of **CDocument** so we can set the protected **CDocument::m_pDocTemplate** back pointer to point back to the doc template that created the document.  \n  \n `CWinApp` handles the default `OnFileOpen` implementation, which will in turn query all the doc templates. The implementation includes looking for already open documents and deciding what format to open new documents in.  \n  \n `CDocTemplate` manages the UI binding for documents and frames.  \n  \n `CDocTemplate` keeps a count of the number of unnamed documents.  \n  \n## CDocument  \n A **CDocument** is owned by a `CDocTemplate`.  \n  \n Documents have a list of currently open views (derived from `CView`) that are viewing the document (a `CPtrList`).  \n  \n Documents do not create/destroy the views, but they are attached to each other after they are created. When a document is closed (that is, through File/Close), all attached views will be closed. When the last view on a document is closed (that is, Window/Close) the document will be closed.  \n  \n The `CDocument::AddView`, `RemoveView` interface is used to maintain the view list. **CDocument** is a friend of `CView` so we can set the **CView::m_pDocument** back pointer.  \n  \n## CFrameWnd  \n A `CFrameWnd` (also known as a frame) plays the same role as in MFC 1.0, but now the `CFrameWnd` class is designed to be used in many cases without deriving a new class. The derived classes `CMDIFrameWnd` and `CMDIChildWnd` are also enhanced so many standard commands are already implemented.  \n  \n The `CFrameWnd` is responsible for creating windows in the client area of the frame. Normally there is one main window filling the client area of the frame.  \n  \n For an MDI-Frame window, the client area is filled with the MDICLIENT control which is in turn the parent of all the MDI-Child frame windows. For an SDI-Frame window or an MDI-Child frame window, the client area is usually filled with a `CView`-derived window object. In the case of `CSplitterWnd`, the client area of the view is filled with the `CSplitterWnd` window object, and the `CView`-derived window objects (one per split pane) are created as child windows of the `CSplitterWnd`.  \n  \n## See Also  \n [Technical Notes by Number](../mfc/technical-notes-by-number.md)   \n [Technical Notes by Category](../mfc/technical-notes-by-category.md)\n\n"}