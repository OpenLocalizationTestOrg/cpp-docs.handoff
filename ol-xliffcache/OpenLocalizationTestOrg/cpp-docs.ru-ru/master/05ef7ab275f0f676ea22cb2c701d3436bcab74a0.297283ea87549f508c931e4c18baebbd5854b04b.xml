{"nodes":[{"pos":[12,55],"content":"back_insert_iterator Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"back_insert_iterator Class | Microsoft Docs","pos":[0,43]}]},{"pos":[736,762],"content":"back_insert_iterator Class","linkify":"back_insert_iterator Class","nodes":[{"content":"back_insert_iterator Class","pos":[0,26]}]},{"content":"Describes an iterator adaptor that satisfies the requirements of an output iterator.","pos":[763,847]},{"content":"It inserts, rather than overwrites, elements into the back end of a sequence and thus provides semantics that are different from the overwrite semantics provided by the iterators of the C++ sequence containers.","pos":[848,1058]},{"content":"The <ph id=\"ph1\">`back_insert_iterator`</ph> class is templatized on the type of container.","pos":[1059,1132],"source":" The `back_insert_iterator` class is templatized on the type of container."},{"pos":[1141,1147],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1232,1242],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type of container into the back of which elements are to be inserted by a <ph id=\"ph1\">`back_insert_iterator`</ph>.","pos":[1261,1362],"source":" The type of container into the back of which elements are to be inserted by a `back_insert_iterator`."},{"pos":[1371,1378],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The container must satisfy the requirements for a back insertion sequence where is it possible to insert elements at the end of the sequence in amortized constant time.","pos":[1382,1550]},{"content":"STL sequence containers defined by the <bpt id=\"p1\">[</bpt>deque Class<ept id=\"p1\">](../standard-library/deque-class.md)</ept>, <bpt id=\"p2\">[</bpt>list Class<ept id=\"p2\">](../standard-library/list-class.md)</ept> and <bpt id=\"p3\">[</bpt>vector Class<ept id=\"p3\">](../standard-library/vector-class.md)</ept> provide the needed <ph id=\"ph1\">`push_back`</ph> member function and satisfy these requirements.","pos":[1551,1823],"source":" STL sequence containers defined by the [deque Class](../standard-library/deque-class.md), [list Class](../standard-library/list-class.md) and [vector Class](../standard-library/vector-class.md) provide the needed `push_back` member function and satisfy these requirements."},{"content":"These three containers as well as strings may each be adapted to use with <ph id=\"ph1\">`back_insert_iterator`</ph>s.","pos":[1824,1922],"source":" These three containers as well as strings may each be adapted to use with `back_insert_iterator`s."},{"content":"A <ph id=\"ph1\">`back_insert_iterator`</ph> must always be initialized with its container.","pos":[1923,1994],"source":" A `back_insert_iterator` must always be initialized with its container."},{"pos":[2004,2016],"content":"Constructors","linkify":"Constructors","nodes":[{"content":"Constructors","pos":[0,12]}]},{"pos":[2037,2104],"content":"<bpt id=\"p1\">[</bpt>back_insert_iterator<ept id=\"p1\">](#back_insert_iterator__back_insert_iterator)</ept>","source":"[back_insert_iterator](#back_insert_iterator__back_insert_iterator)"},{"pos":[2105,2201],"content":"Constructs a <ph id=\"ph1\">`back_insert_iterator`</ph> that inserts elements after the last element in a container.","source":"Constructs a `back_insert_iterator` that inserts elements after the last element in a container."},{"pos":[2212,2220],"content":"Typedefs","linkify":"Typedefs","nodes":[{"content":"Typedefs","pos":[0,8]}]},{"pos":[2241,2296],"content":"<bpt id=\"p1\">[</bpt>container_type<ept id=\"p1\">](#back_insert_iterator__container_type)</ept>","source":"[container_type](#back_insert_iterator__container_type)"},{"pos":[2297,2361],"content":"A type that provides a container for the <ph id=\"ph1\">`back_insert_iterator`</ph>.","source":"A type that provides a container for the `back_insert_iterator`."},{"pos":[2366,2411],"content":"<bpt id=\"p1\">[</bpt>reference<ept id=\"p1\">](#back_insert_iterator__reference)</ept>","source":"[reference](#back_insert_iterator__reference)"},{"pos":[2412,2476],"content":"A type that provides a reference for the <ph id=\"ph1\">`back_insert_iterator`</ph>.","source":"A type that provides a reference for the `back_insert_iterator`."},{"pos":[2487,2496],"content":"Operators","linkify":"Operators","nodes":[{"content":"Operators","pos":[0,9]}]},{"pos":[2517,2566],"content":"<bpt id=\"p1\">[</bpt>operator*<ept id=\"p1\">](#back_insert_iterator__operator_star)</ept>","source":"[operator*](#back_insert_iterator__operator_star)"},{"pos":[2567,2672],"content":"Dereferencing operator used to implement the output iterator expression * <ph id=\"ph1\">`i`</ph><ph id=\"ph2\"> = </ph><ph id=\"ph3\">`x`</ph> for a back insertion.","source":"Dereferencing operator used to implement the output iterator expression * `i` = `x` for a back insertion."},{"pos":[2677,2730],"content":"<bpt id=\"p1\">[</bpt>operator++<ept id=\"p1\">](#back_insert_iterator__operator_add_add)</ept>","source":"[operator++](#back_insert_iterator__operator_add_add)"},{"pos":[2731,2823],"content":"Increments the <ph id=\"ph1\">`back_insert_iterator`</ph> to the next location into which a value may be stored.","source":"Increments the `back_insert_iterator` to the next location into which a value may be stored."},{"pos":[2828,2875],"content":"<bpt id=\"p1\">[</bpt>operator=<ept id=\"p1\">](#back_insert_iterator__operator_eq)</ept>","source":"[operator=](#back_insert_iterator__operator_eq)"},{"pos":[2876,2978],"content":"Assignment operator used to implement the output iterator expression * <ph id=\"ph1\">`i`</ph><ph id=\"ph2\"> = </ph><ph id=\"ph3\">`x`</ph> for a back insertion.","source":"Assignment operator used to implement the output iterator expression * `i` = `x` for a back insertion."},{"pos":[2988,3000],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3004,3027],"content":"<bpt id=\"p1\">**</bpt>Header<ept id=\"p1\">**</ept>: <ph id=\"ph1\">\\&lt;</ph>iterator&gt;","source":"**Header**: \\<iterator>"},{"pos":[3034,3052],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[3062,3163],"content":"<bpt id=\"p1\">&lt;a name=\"back_insert_iterator__back_insert_iterator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  back_insert_iterator::back_insert_iterator","linkify":"<a name=\"back_insert_iterator__back_insert_iterator\"></a>  back_insert_iterator::back_insert_iterator","source":"<a name=\"back_insert_iterator__back_insert_iterator\"></a>  back_insert_iterator::back_insert_iterator"},{"pos":[3167,3263],"content":"Constructs a <ph id=\"ph1\">`back_insert_iterator`</ph> that inserts elements after the last element in a container.","source":"Constructs a `back_insert_iterator` that inserts elements after the last element in a container."},{"pos":[3338,3348],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The container that the <ph id=\"ph1\">`back_insert_iterator`</ph> is to insert an element into.","pos":[3363,3438],"source":" The container that the `back_insert_iterator` is to insert an element into."},{"pos":[3448,3460],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3464,3517],"content":"A <ph id=\"ph1\">`back_insert_iterator`</ph> for the parameter container.","source":"A `back_insert_iterator` for the parameter container."},{"pos":[3527,3534],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4688,4777],"content":"<bpt id=\"p1\">&lt;a name=\"back_insert_iterator__container_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  back_insert_iterator::container_type","linkify":"<a name=\"back_insert_iterator__container_type\"></a>  back_insert_iterator::container_type","source":"<a name=\"back_insert_iterator__container_type\"></a>  back_insert_iterator::container_type"},{"pos":[4781,4845],"content":"A type that provides a container for the <ph id=\"ph1\">`back_insert_iterator`</ph>.","source":"A type that provides a container for the `back_insert_iterator`."},{"pos":[4909,4916],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4920,4983],"content":"The type is a synonym for the template parameter <bpt id=\"p1\">**</bpt>Container<ept id=\"p1\">**</ept>.","source":"The type is a synonym for the template parameter **Container**."},{"pos":[4993,5000],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5940,6023],"content":"<bpt id=\"p1\">&lt;a name=\"back_insert_iterator__operator_star\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  back_insert_iterator::operator*","linkify":"<a name=\"back_insert_iterator__operator_star\"></a>  back_insert_iterator::operator*","source":"<a name=\"back_insert_iterator__operator_star\"></a>  back_insert_iterator::operator*"},{"pos":[6027,6112],"content":"Dereferencing operator used to implement the output iterator expression <ph id=\"ph1\">\\*</ph> <bpt id=\"p1\">*</bpt>i<ept id=\"p1\">*</ept><ph id=\"ph2\"> = </ph><bpt id=\"p2\">*</bpt>x<ept id=\"p2\">*</ept>.","source":"Dereferencing operator used to implement the output iterator expression \\* *i* = *x*."},{"pos":[6183,6195],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reference to the element inserted at the back of the container.","pos":[6199,6264]},{"pos":[6274,6281],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Used to implement the output iterator expression <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph>Iter<ept id=\"p1\">**</ept><ph id=\"ph2\"> = </ph><bpt id=\"p2\">**</bpt>value<ept id=\"p2\">**</ept>.","pos":[6285,6357],"source":"Used to implement the output iterator expression **\\*Iter** = **value**."},{"content":"If <bpt id=\"p1\">**</bpt>Iter<ept id=\"p1\">**</ept> is an iterator that addresses an element in a sequence, then <bpt id=\"p2\">**</bpt><ph id=\"ph1\">\\*</ph>Iter<ept id=\"p2\">**</ept><ph id=\"ph2\"> = </ph><bpt id=\"p3\">**</bpt>value<ept id=\"p3\">**</ept> replaces that element with value and does not change the total number of elements in the sequence.","pos":[6358,6552],"source":" If **Iter** is an iterator that addresses an element in a sequence, then **\\*Iter** = **value** replaces that element with value and does not change the total number of elements in the sequence."},{"pos":[6562,6569],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7574,7661],"content":"<bpt id=\"p1\">&lt;a name=\"back_insert_iterator__operator_add_add\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  back_insert_iterator::operator++","linkify":"<a name=\"back_insert_iterator__operator_add_add\"></a>  back_insert_iterator::operator++","source":"<a name=\"back_insert_iterator__operator_add_add\"></a>  back_insert_iterator::operator++"},{"pos":[7665,7757],"content":"Increments the <ph id=\"ph1\">`back_insert_iterator`</ph> to the next location into which a value may be stored.","source":"Increments the `back_insert_iterator` to the next location into which a value may be stored."},{"pos":[7878,7890],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7894,7981],"content":"A <ph id=\"ph1\">`back_insert_iterator`</ph> addressing the next location into which a value may be stored.","source":"A `back_insert_iterator` addressing the next location into which a value may be stored."},{"pos":[7991,7998],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Both preincrementation and postincrementation operators return the same result.","pos":[8002,8081]},{"pos":[8091,8098],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9105,9186],"content":"<bpt id=\"p1\">&lt;a name=\"back_insert_iterator__operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  back_insert_iterator::operator=","linkify":"<a name=\"back_insert_iterator__operator_eq\"></a>  back_insert_iterator::operator=","source":"<a name=\"back_insert_iterator__operator_eq\"></a>  back_insert_iterator::operator="},{"content":"Appends or pushes a value onto the back end of a container.","pos":[9190,9249]},{"pos":[9441,9451],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The value to be inserted into the container.","pos":[9465,9509]},{"pos":[9519,9531],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reference to the last element inserted at the back of the container.","pos":[9535,9605]},{"pos":[9615,9622],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9626,9690],"content":"The first member operator evaluates <ph id=\"ph1\">`Container.push_back( val)`</ph>,","source":"The first member operator evaluates `Container.push_back( val)`,"},{"content":"then returns <ph id=\"ph1\">`*this`</ph>.","pos":[9697,9718],"source":"then returns `*this`."},{"content":"The second member operator evaluates","pos":[9719,9755]},{"pos":[9762,9824],"content":"<ph id=\"ph1\">`container-&gt;push_back((typename Container::value_type&amp;&amp;)val)`</ph>,","source":"`container->push_back((typename Container::value_type&&)val)`,"},{"pos":[9831,9852],"content":"then returns <ph id=\"ph1\">`*this`</ph>.","source":"then returns `*this`."},{"pos":[9862,9869],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10754,10833],"content":"<bpt id=\"p1\">&lt;a name=\"back_insert_iterator__reference\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  back_insert_iterator::reference","linkify":"<a name=\"back_insert_iterator__reference\"></a>  back_insert_iterator::reference","source":"<a name=\"back_insert_iterator__reference\"></a>  back_insert_iterator::reference"},{"pos":[10837,10901],"content":"A type that provides a reference for the <ph id=\"ph1\">`back_insert_iterator`</ph>.","source":"A type that provides a reference for the `back_insert_iterator`."},{"pos":[10977,10984],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The type describes a reference to an element of the sequence controlled by the associated container.","pos":[10988,11088]},{"pos":[11098,11105],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11912,11920],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>iterator&gt;<ept id=\"p1\">](../standard-library/iterator.md)</ept><ph id=\"ph2\"> </ph>","pos":[11924,11971],"source":"[\\<iterator>](../standard-library/iterator.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Thread Safety in the C++ Standard Library<ept id=\"p1\">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept><ph id=\"ph1\"> </ph>","pos":[11974,12085],"source":" [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C++ Standard Library Reference<ept id=\"p1\">](../standard-library/cpp-standard-library-reference.md)</ept>","pos":[12088,12176],"source":" [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)"}],"content":"---\ntitle: \"back_insert_iterator Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"iterator/std::back_insert_iterator\"\n  - \"std::back_insert_iterator\"\n  - \"back_insert_iterator\"\n  - \"std.back_insert_iterator\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"back_insert_iterator class\"\nms.assetid: a1ee07f2-cf9f-46a1-8608-cfaf207f9713\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# back_insert_iterator Class\nDescribes an iterator adaptor that satisfies the requirements of an output iterator. It inserts, rather than overwrites, elements into the back end of a sequence and thus provides semantics that are different from the overwrite semantics provided by the iterators of the C++ sequence containers. The `back_insert_iterator` class is templatized on the type of container.  \n  \n## Syntax  \n  \n```  \ntemplate <class Container>  \nclass back_insert_iterator;  \n```  \n  \n#### Parameters  \n `Container`  \n The type of container into the back of which elements are to be inserted by a `back_insert_iterator`.  \n  \n## Remarks  \n The container must satisfy the requirements for a back insertion sequence where is it possible to insert elements at the end of the sequence in amortized constant time. STL sequence containers defined by the [deque Class](../standard-library/deque-class.md), [list Class](../standard-library/list-class.md) and [vector Class](../standard-library/vector-class.md) provide the needed `push_back` member function and satisfy these requirements. These three containers as well as strings may each be adapted to use with `back_insert_iterator`s. A `back_insert_iterator` must always be initialized with its container.  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[back_insert_iterator](#back_insert_iterator__back_insert_iterator)|Constructs a `back_insert_iterator` that inserts elements after the last element in a container.|  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|[container_type](#back_insert_iterator__container_type)|A type that provides a container for the `back_insert_iterator`.|  \n|[reference](#back_insert_iterator__reference)|A type that provides a reference for the `back_insert_iterator`.|  \n  \n### Operators  \n  \n|||  \n|-|-|  \n|[operator*](#back_insert_iterator__operator_star)|Dereferencing operator used to implement the output iterator expression * `i` = `x` for a back insertion.|  \n|[operator++](#back_insert_iterator__operator_add_add)|Increments the `back_insert_iterator` to the next location into which a value may be stored.|  \n|[operator=](#back_insert_iterator__operator_eq)|Assignment operator used to implement the output iterator expression * `i` = `x` for a back insertion.|  \n  \n## Requirements  \n **Header**: \\<iterator>  \n  \n **Namespace:** std  \n  \n##  <a name=\"back_insert_iterator__back_insert_iterator\"></a>  back_insert_iterator::back_insert_iterator  \n Constructs a `back_insert_iterator` that inserts elements after the last element in a container.  \n  \n```   \nexplicit back_insert_iterator(Container& _Cont);\n```  \n  \n### Parameters  \n `_Cont`  \n The container that the `back_insert_iterator` is to insert an element into.  \n  \n### Return Value  \n A `back_insert_iterator` for the parameter container.  \n  \n### Example  \n  \n```cpp  \n// back_insert_iterator_back_insert_iterator.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   vector<int> vec;  \n   for ( i = 1 ; i < 4 ; ++i )    \n   {  \n      vec.push_back ( i );  \n   }  \n  \n   vector <int>::iterator vIter;  \n   cout << \"The initial vector vec is: ( \";  \n   for ( vIter = vec.begin ( ) ; vIter != vec.end ( ); vIter++)  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n  \n   // Insertions with member function  \n   back_inserter ( vec ) = 40;  \n   back_inserter ( vec ) = 50;  \n  \n   // Alternatively, insertions can be done with template function  \n   back_insert_iterator<vector<int> > backiter ( vec );  \n *backiter = 600;  \n   backiter++;  \n *backiter = 700;  \n  \n   cout << \"After the insertions, the vector vec is: ( \";  \n   for ( vIter = vec.begin ( ) ; vIter != vec.end ( ); vIter++)  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n}  \n```  \n  \n```Output  \nThe initial vector vec is: ( 1 2 3 ).  \nAfter the insertions, the vector vec is: ( 1 2 3 40 50 600 700 ).  \n```  \n  \n##  <a name=\"back_insert_iterator__container_type\"></a>  back_insert_iterator::container_type  \n A type that provides a container for the `back_insert_iterator`.  \n  \n```   \ntypedef Container  \ncontainer_type;  \n```  \n  \n### Remarks  \n The type is a synonym for the template parameter **Container**.  \n  \n### Example  \n  \n```cpp  \n// back_insert_iterator_container_type.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   vector<int> vec;  \n   for (i = 1 ; i < 4 ; ++i )    \n   {  \n      vec.push_back (  i );  \n   }  \n  \n   vector <int>::iterator vIter;  \n   cout << \"The original vector vec is: ( \";  \n   for ( vIter = vec.begin ( ) ; vIter != vec.end ( ); vIter++)  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n  \n   back_insert_iterator<vector<int> >::container_type vec1 = vec;  \n   back_inserter ( vec1 ) = 40;  \n  \n   cout << \"After the insertion, the vector is: ( \";  \n   for ( vIter = vec1.begin ( ) ; vIter != vec1.end ( ); vIter++)  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n}  \n```  \n  \n```Output  \nThe original vector vec is: ( 1 2 3 ).  \nAfter the insertion, the vector is: ( 1 2 3 40 ).  \n```  \n  \n##  <a name=\"back_insert_iterator__operator_star\"></a>  back_insert_iterator::operator*  \n Dereferencing operator used to implement the output iterator expression \\* *i* = *x*.  \n  \n```  \nback_insert_iterator<Container>& operator*();\n```  \n  \n### Return Value  \n A reference to the element inserted at the back of the container.  \n  \n### Remarks  \n Used to implement the output iterator expression **\\*Iter** = **value**. If **Iter** is an iterator that addresses an element in a sequence, then **\\*Iter** = **value** replaces that element with value and does not change the total number of elements in the sequence.  \n  \n### Example  \n  \n```cpp  \n// back_insert_iterator_back_insert.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   vector<int> vec;  \n   for (i = 1 ; i < 4 ; ++i )    \n   {  \n      vec.push_back ( i );  \n   }  \n  \n   vector <int>::iterator vIter;  \n   cout << \"The vector vec is: ( \";  \n   for ( vIter = vec.begin ( ) ; vIter != vec.end ( ); vIter++)  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n  \n   back_insert_iterator<vector<int> > backiter ( vec );  \n *backiter = 10;  \n   backiter++;      // Increment to the next element  \n *backiter = 20;  \n   backiter++;  \n  \n   cout << \"After the insertions, the vector vec becomes: ( \";  \n   for ( vIter = vec.begin ( ) ; vIter != vec.end ( ); vIter++)  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n}  \n```  \n  \n```Output  \nThe vector vec is: ( 1 2 3 ).  \nAfter the insertions, the vector vec becomes: ( 1 2 3 10 20 ).  \n```  \n  \n##  <a name=\"back_insert_iterator__operator_add_add\"></a>  back_insert_iterator::operator++  \n Increments the `back_insert_iterator` to the next location into which a value may be stored.  \n  \n```  \nback_insert_iterator<Container>& operator++();\nback_insert_iterator<Container> operator++(int);\n```  \n  \n### Return Value  \n A `back_insert_iterator` addressing the next location into which a value may be stored.  \n  \n### Remarks  \n Both preincrementation and postincrementation operators return the same result.  \n  \n### Example  \n  \n```cpp  \n// back_insert_iterator_op_incre.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   vector<int> vec;  \n   for (i = 1 ; i < 3 ; ++i )    \n   {  \n      vec.push_back ( 10 * i );  \n   }  \n  \n   vector <int>::iterator vIter;  \n   cout << \"The vector vec is: ( \";  \n   for ( vIter = vec.begin ( ) ; vIter != vec.end ( ); vIter++)  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n  \n   back_insert_iterator<vector<int> > backiter ( vec );  \n *backiter = 30;  \n   backiter++;      // Increment to the next element  \n *backiter = 40;  \n   backiter++;  \n  \n   cout << \"After the insertions, the vector vec becomes: ( \";  \n   for ( vIter = vec.begin ( ) ; vIter != vec.end ( ); vIter++)  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n}  \n```  \n  \n```Output  \nThe vector vec is: ( 10 20 ).  \nAfter the insertions, the vector vec becomes: ( 10 20 30 40 ).  \n```  \n  \n##  <a name=\"back_insert_iterator__operator_eq\"></a>  back_insert_iterator::operator=  \n Appends or pushes a value onto the back end of a container.  \n  \n```  \nback_insert_iterator<Container>& operator=(typename Container::const_reference val);\nback_insert_iterator<Container>& operator=(typename Container::value_type&& val);\n```  \n  \n### Parameters  \n ` val`  \n The value to be inserted into the container.  \n  \n### Return Value  \n A reference to the last element inserted at the back of the container.  \n  \n### Remarks  \n The first member operator evaluates `Container.push_back( val)`,  \n  \n then returns `*this`. The second member operator evaluates  \n  \n `container->push_back((typename Container::value_type&&)val)`,  \n  \n then returns `*this`.  \n  \n### Example  \n  \n```cpp  \n// back_insert_iterator_op_assign.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   vector<int> vec;  \n   for (i = 1 ; i < 4 ; ++i )    \n   {  \n      vec.push_back ( i );  \n   }  \n  \n   vector <int>::iterator vIter;  \n   cout << \"The vector vec is: ( \";  \n   for ( vIter = vec.begin ( ) ; vIter != vec.end ( ); vIter++)  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n  \n   back_insert_iterator<vector<int> > backiter ( vec );  \n *backiter = 10;  \n   backiter++;      // Increment to the next element  \n *backiter = 20;  \n   backiter++;  \n  \n   cout << \"After the insertions, the vector vec becomes: ( \";  \n   for ( vIter = vec.begin ( ) ; vIter != vec.end ( ); vIter++)  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n}  \n```  \n  \n##  <a name=\"back_insert_iterator__reference\"></a>  back_insert_iterator::reference  \n A type that provides a reference for the `back_insert_iterator`.  \n  \n```  \ntypedef typename Container::reference reference;  \n```  \n  \n### Remarks  \n The type describes a reference to an element of the sequence controlled by the associated container.  \n  \n### Example  \n  \n```cpp  \n// back_insert_iterator_reference.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   int i;  \n  \n   vector<int> vec;  \n   for (i = 1 ; i < 4 ; ++i )    \n   {  \n      vec.push_back ( i );  \n   }  \n  \n   vector <int>::iterator vIter;  \n   cout << \"The vector vec is: ( \";  \n   for ( vIter = vec.begin ( ) ; vIter != vec.end ( ); vIter++)  \n      cout << *vIter << \" \";  \n   cout << \").\" << endl;  \n  \n   back_insert_iterator<vector<int> >::reference   \n        RefLast = *(vec.end ( ) - 1 );  \n   cout << \"The last element in the vector vec is: \"   \n        << RefLast << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe vector vec is: ( 1 2 3 ).  \nThe last element in the vector vec is: 3.  \n```  \n  \n## See Also  \n [\\<iterator>](../standard-library/iterator.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n"}