{"nodes":[{"pos":[12,50],"content":"list::merge (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"list::merge (STL-CLR) | Microsoft Docs","pos":[0,38]}]},{"content":"list::merge (STL/CLR)","pos":[624,645]},{"content":"Merges two ordered controlled sequences.","pos":[646,686]},{"content":"Syntax","pos":[695,701]},{"content":"Parameters","pos":[838,848]},{"content":"pred","pos":[852,856]},{"content":"Comparer for element pairs.","pos":[860,887]},{"content":"right","pos":[894,899]},{"content":"Container to merge in.","pos":[903,925]},{"content":"Remarks","pos":[934,941]},{"content":"The first member function removes all elements from the sequence controlled by <ph id=\"ph1\">`right`</ph> and insert them in the controlled sequence.","pos":[945,1075],"source":"The first member function removes all elements from the sequence controlled by `right` and insert them in the controlled sequence."},{"content":"Both sequences must be previously ordered by <ph id=\"ph1\">`operator&lt;`</ph> -- elements must not decrease in value as you progress through either sequence.","pos":[1076,1212],"source":" Both sequences must be previously ordered by `operator<` -- elements must not decrease in value as you progress through either sequence."},{"content":"The resulting sequence is also ordered by <ph id=\"ph1\">`operator&lt;`</ph>.","pos":[1213,1267],"source":" The resulting sequence is also ordered by `operator<`."},{"content":"You use this member function to merge two sequences that increase in value into a sequence that also increases in value.","pos":[1268,1388]},{"content":"The second member function behaves the same as the first, except that the sequences are ordered by <ph id=\"ph1\">`pred` -- `pred``(X, Y)`</ph> must be false for any element <ph id=\"ph2\">`X`</ph> that follows element <ph id=\"ph3\">`Y`</ph> in the sequence.","pos":[1395,1594],"source":"The second member function behaves the same as the first, except that the sequences are ordered by `pred` -- `pred``(X, Y)` must be false for any element `X` that follows element `Y` in the sequence."},{"content":"You use it to merge two sequences ordered by a predicate function or delegate that you specify.","pos":[1595,1690]},{"content":"Both functions perform a stable merge -- no pair of elements in either of the original controlled sequences is reversed in the resulting controlled sequence.","pos":[1697,1854]},{"content":"Also, if a pair of elements <ph id=\"ph1\">`X`</ph> and <ph id=\"ph2\">`Y`</ph> in the resulting controlled sequence has equivalent ordering -- <ph id=\"ph3\">`!(X &lt; Y) &amp;&amp; !(X &lt; Y)`</ph> -- an element from the original controlled sequence appears before an element from the sequence controlled by <ph id=\"ph4\">`right`</ph>.","pos":[1855,2100],"source":" Also, if a pair of elements `X` and `Y` in the resulting controlled sequence has equivalent ordering -- `!(X < Y) && !(X < Y)` -- an element from the original controlled sequence appears before an element from the sequence controlled by `right`."},{"content":"Example","pos":[2109,2116]},{"content":"Requirements","pos":[3918,3930]},{"pos":[3934,3960],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/list&gt;","source":"**Header:** \\<cliext/list>"},{"pos":[3967,3988],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[3997,4005]},{"content":"list (STL/CLR)","pos":[4010,4024]},{"content":"list::sort (STL/CLR)","pos":[4058,4078]},{"content":"list::splice (STL/CLR)","pos":[4117,4139]}],"content":"---\ntitle: \"list::merge (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::list::merge\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"merge member [STL/CLR]\"\nms.assetid: f8e93cd3-bd08-4086-859b-08a2899cc9a6\ncaps.latest.revision: 17\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# list::merge (STL/CLR)\nMerges two ordered controlled sequences.  \n  \n## Syntax  \n  \n```  \nvoid merge(list<Value>% right);  \ntemplate<typename Pred2>  \n    void merge(list<Value>% right, Pred2 pred);  \n```  \n  \n#### Parameters  \n pred  \n Comparer for element pairs.  \n  \n right  \n Container to merge in.  \n  \n## Remarks  \n The first member function removes all elements from the sequence controlled by `right` and insert them in the controlled sequence. Both sequences must be previously ordered by `operator<` -- elements must not decrease in value as you progress through either sequence. The resulting sequence is also ordered by `operator<`. You use this member function to merge two sequences that increase in value into a sequence that also increases in value.  \n  \n The second member function behaves the same as the first, except that the sequences are ordered by `pred` -- `pred``(X, Y)` must be false for any element `X` that follows element `Y` in the sequence. You use it to merge two sequences ordered by a predicate function or delegate that you specify.  \n  \n Both functions perform a stable merge -- no pair of elements in either of the original controlled sequences is reversed in the resulting controlled sequence. Also, if a pair of elements `X` and `Y` in the resulting controlled sequence has equivalent ordering -- `!(X < Y) && !(X < Y)` -- an element from the original controlled sequence appears before an element from the sequence controlled by `right`.  \n  \n## Example  \n  \n```  \n// cliext_list_merge.cpp   \n// compile with: /clr   \n#include <cliext/list>   \n  \ntypedef cliext::list<wchar_t> Mylist;   \nint main()   \n    {   \n    cliext::list<wchar_t> c1;   \n    c1.push_back(L'a');   \n    c1.push_back(L'c');   \n    c1.push_back(L'e');   \n  \n// display initial contents \" a c e\"   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n    cliext::list<wchar_t> c2;   \n    c2.push_back(L'b');   \n    c2.push_back(L'd');   \n    c2.push_back(L'f');   \n  \n// display initial contents \" b d f\"   \n    for each (wchar_t elem in c2)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// merge and display   \n    cliext::list<wchar_t> c3(c1);   \n    c3.merge(c2);   \n    for each (wchar_t elem in c3)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n    System::Console::WriteLine(\"c2.size() = {0}\", c2.size());   \n  \n// sort descending, merge descending, and redisplay   \n    c1.sort(cliext::greater<wchar_t>());   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n    c3.sort(cliext::greater<wchar_t>());   \n    for each (wchar_t elem in c3)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n    c3.merge(c1, cliext::greater<wchar_t>());   \n    for each (wchar_t elem in c3)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n    System::Console::WriteLine(\"c1.size() = {0}\", c1.size());   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n a c e  \n b d f  \n a b c d e f  \nc2.size() = 0  \n e c a  \n f e d c b a  \n f e e d c c b a a  \nc1.size() = 0  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/list>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [list (STL/CLR)](../dotnet/list-stl-clr.md)   \n [list::sort (STL/CLR)](../dotnet/list-sort-stl-clr.md)   \n [list::splice (STL/CLR)](../dotnet/list-splice-stl-clr.md)"}