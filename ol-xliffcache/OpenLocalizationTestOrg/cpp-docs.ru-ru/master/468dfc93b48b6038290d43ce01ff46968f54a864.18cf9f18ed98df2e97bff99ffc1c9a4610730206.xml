{"nodes":[{"pos":[12,50],"content":"main: Program Startup | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"main: Program Startup | Microsoft Docs","pos":[0,38]}]},{"content":"main: Program Startup","pos":[782,803]},{"content":"A special function named <ph id=\"ph1\">`main`</ph> is the starting point of execution for all C and <ph id=\"ph2\">[!INCLUDE[TLA#tla_cpp](../cpp/includes/tlasharptla_cpp_md.md)]</ph> programs.","pos":[804,957],"source":"A special function named `main` is the starting point of execution for all C and [!INCLUDE[TLA#tla_cpp](../cpp/includes/tlasharptla_cpp_md.md)] programs."},{"content":"If you are writing code that adheres to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_unicode](../atl-mfc-shared/reference/includes/tlasharptla_unicode_md.md)]</ph> programming model, you can use <ph id=\"ph2\">`wmain`</ph>, which is the wide-character version of <ph id=\"ph3\">`main`</ph>.","pos":[958,1180],"source":" If you are writing code that adheres to the [!INCLUDE[TLA#tla_unicode](../atl-mfc-shared/reference/includes/tlasharptla_unicode_md.md)] programming model, you can use `wmain`, which is the wide-character version of `main`."},{"content":"The <ph id=\"ph1\">`main`</ph> function is not predefined by the compiler.","pos":[1187,1241],"source":"The `main` function is not predefined by the compiler."},{"content":"It must be supplied in the program text.","pos":[1242,1282]},{"pos":[1289,1325],"content":"The declaration syntax for <ph id=\"ph1\">`main`</ph> is","source":"The declaration syntax for `main` is"},{"content":"or, optionally,","pos":[1361,1376]},{"content":"Microsoft Specific","pos":[1450,1468]},{"pos":[1472,1521],"content":"The declaration syntax for <ph id=\"ph1\">`wmain`</ph> is as follows:","source":"The declaration syntax for `wmain` is as follows:"},{"content":"or, optionally,","pos":[1559,1574]},{"content":"You can also use <ph id=\"ph1\">`_tmain`</ph>, which is defined in TCHAR.h.","pos":[1653,1708],"source":"You can also use `_tmain`, which is defined in TCHAR.h."},{"content":"resolves to <ph id=\"ph1\">`main`</ph> unless _UNICODE is defined.","pos":[1718,1764],"source":" resolves to `main` unless _UNICODE is defined."},{"content":"In that case, <ph id=\"ph1\">`_tmain`</ph> resolves to <ph id=\"ph2\">`wmain`</ph>.","pos":[1765,1808],"source":" In that case, `_tmain` resolves to `wmain`."},{"content":"Alternatively, the <ph id=\"ph1\">`main`</ph> and <ph id=\"ph2\">`wmain`</ph> functions can be declared as returning <ph id=\"ph3\">`void`</ph> (no return value).","pos":[1815,1917],"source":"Alternatively, the `main` and `wmain` functions can be declared as returning `void` (no return value)."},{"content":"If you declare <ph id=\"ph1\">`main`</ph> or <ph id=\"ph2\">`wmain`</ph> as returning <ph id=\"ph3\">`void`</ph>, you cannot return an exit code to the parent process or operating system by using a <bpt id=\"p1\">[</bpt>return<ept id=\"p1\">](../cpp/return-statement-in-program-termination-cpp.md)</ept> statement.","pos":[1918,2130],"source":" If you declare `main` or `wmain` as returning `void`, you cannot return an exit code to the parent process or operating system by using a [return](../cpp/return-statement-in-program-termination-cpp.md) statement."},{"content":"To return an exit code when <ph id=\"ph1\">`main`</ph> or <ph id=\"ph2\">`wmain`</ph> is declared as <ph id=\"ph3\">`void`</ph>, you must use the <bpt id=\"p1\">[</bpt>exit<ept id=\"p1\">](../cpp/exit-function.md)</ept> function.","pos":[2131,2258],"source":" To return an exit code when `main` or `wmain` is declared as `void`, you must use the [exit](../cpp/exit-function.md) function."},{"content":"END Microsoft Specific","pos":[2267,2289]},{"content":"The types for <ph id=\"ph1\">`argc`</ph> and <ph id=\"ph2\">`argv`</ph> are defined by the language.","pos":[2293,2353],"source":"The types for `argc` and `argv` are defined by the language."},{"content":"The names <ph id=\"ph1\">`argc`</ph>, <ph id=\"ph2\">`argv`</ph>, and <ph id=\"ph3\">`envp`</ph> are traditional, but are not required by the compiler.","pos":[2354,2445],"source":" The names `argc`, `argv`, and `envp` are traditional, but are not required by the compiler."},{"content":"For more information and an example, see <bpt id=\"p1\">[</bpt>Argument Definitions<ept id=\"p1\">](../cpp/argument-definitions.md)</ept>.","pos":[2446,2542],"source":" For more information and an example, see [Argument Definitions](../cpp/argument-definitions.md)."},{"content":"See Also","pos":[2551,2559]},{"content":"Keywords","pos":[2564,2572]},{"content":"Using wmain Instead of main","pos":[2603,2630]},{"content":"main Function Restrictions","pos":[2676,2702]}],"content":"---\ntitle: \"main: Program Startup | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"vc.main.startup\"\n  - \"_tmain\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"program startup [C++]\"\n  - \"entry points, program\"\n  - \"wmain function\"\n  - \"_tmain function\"\n  - \"startup code, main function\"\n  - \"main function, program startup\"\nms.assetid: f9581cd6-93f7-4bcd-99ec-d07c3c107dd4\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# main: Program Startup\nA special function named `main` is the starting point of execution for all C and [!INCLUDE[TLA#tla_cpp](../cpp/includes/tlasharptla_cpp_md.md)] programs. If you are writing code that adheres to the [!INCLUDE[TLA#tla_unicode](../atl-mfc-shared/reference/includes/tlasharptla_unicode_md.md)] programming model, you can use `wmain`, which is the wide-character version of `main`.  \n  \n The `main` function is not predefined by the compiler. It must be supplied in the program text.  \n  \n The declaration syntax for `main` is  \n  \n```  \nint main();  \n```  \n  \n or, optionally,  \n  \n```  \nint main(int argc, char *argv[], char *envp[]);  \n```  \n  \n## Microsoft Specific  \n The declaration syntax for `wmain` is as follows:  \n  \n```  \nint wmain( );  \n```  \n  \n or, optionally,  \n  \n```  \nint wmain(int argc, wchar_t *argv[], wchar_t *envp[]);  \n```  \n  \n You can also use `_tmain`, which is defined in TCHAR.h. `_tmain` resolves to `main` unless _UNICODE is defined. In that case, `_tmain` resolves to `wmain`.  \n  \n Alternatively, the `main` and `wmain` functions can be declared as returning `void` (no return value). If you declare `main` or `wmain` as returning `void`, you cannot return an exit code to the parent process or operating system by using a [return](../cpp/return-statement-in-program-termination-cpp.md) statement. To return an exit code when `main` or `wmain` is declared as `void`, you must use the [exit](../cpp/exit-function.md) function.  \n  \n## END Microsoft Specific  \n The types for `argc` and `argv` are defined by the language. The names `argc`, `argv`, and `envp` are traditional, but are not required by the compiler. For more information and an example, see [Argument Definitions](../cpp/argument-definitions.md).  \n  \n## See Also  \n [Keywords](../cpp/keywords-cpp.md)   \n [Using wmain Instead of main](../cpp/using-wmain-instead-of-main.md)   \n [main Function Restrictions](../cpp/main-function-restrictions.md)"}