{"nodes":[{"pos":[12,76],"content":"hypot, hypotf, hypotl, _hypot, _hypotf, _hypotl | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"hypot, hypotf, hypotl, _hypot, _hypotf, _hypotl | Microsoft Docs","pos":[0,64]}]},{"content":"hypot, hypotf, hypotl, _hypot, _hypotf, _hypotl","pos":[1237,1284]},{"content":"Calculates the hypotenuse.","pos":[1285,1311]},{"content":"Syntax","pos":[1320,1326]},{"content":"Parameters","pos":[1691,1701]},{"content":",","pos":[1708,1709]},{"content":"Floating-point values.","pos":[1717,1739]},{"content":"Return Value","pos":[1748,1760]},{"content":"If successful, <ph id=\"ph1\">`hypot`</ph> returns the length of the hypotenuse; on overflow, <ph id=\"ph2\">`hypot`</ph> returns INF (infinity) and the <ph id=\"ph3\">`errno`</ph> variable is set to <ph id=\"ph4\">`ERANGE`</ph>.","pos":[1764,1913],"source":"If successful, `hypot` returns the length of the hypotenuse; on overflow, `hypot` returns INF (infinity) and the `errno` variable is set to `ERANGE`."},{"content":"You can use <ph id=\"ph1\">`_matherr`</ph> to modify error handling.","pos":[1914,1962],"source":" You can use `_matherr` to modify error handling."},{"pos":[1969,2130],"content":"For more information about return codes, see <bpt id=\"p1\">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For more information about return codes, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"Remarks","pos":[2139,2146]},{"pos":[2150,2349],"content":"The <ph id=\"ph1\">`hypot`</ph> functions calculate the length of the hypotenuse of a right triangle, given the length of the two sides <ph id=\"ph2\">`x`</ph> and <ph id=\"ph3\">`y`</ph> (in other words, the square root of <ph id=\"ph4\">`x`&lt;sup&gt;</ph>2<ph id=\"ph5\">&lt;/sup&gt; + `y`&lt;sup&gt;</ph>2<ph id=\"ph6\">&lt;/sup&gt;</ph>).","source":"The `hypot` functions calculate the length of the hypotenuse of a right triangle, given the length of the two sides `x` and `y` (in other words, the square root of `x`<sup>2</sup> + `y`<sup>2</sup>)."},{"content":"The versions of the functions that have leading underscores are provided for compatibility with earlier standards.","pos":[2356,2470]},{"content":"Their behavior is identical to the versions that don't have leading underscores.","pos":[2471,2551]},{"content":"We recommend using the versions without leading underscores for new code.","pos":[2552,2625]},{"content":"Requirements","pos":[2634,2646]},{"content":"Routine","pos":[2653,2660]},{"content":"Required header","pos":[2661,2676]},{"pos":[2728,2770],"content":", <ph id=\"ph1\">`hypotf`</ph>, <ph id=\"ph2\">`hypotl`</ph>, <ph id=\"ph3\">`_hypot`</ph>, <ph id=\"ph4\">`_hypotf`</ph>,","source":", `hypotf`, `hypotl`, `_hypot`, `_hypotf`, "},{"content":"math.h&gt;","pos":[2783,2790],"source":"math.h>"},{"pos":[2798,2896],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"Example","pos":[2905,2912]},{"content":".NET Framework Equivalent","pos":[3338,3363]},{"content":"Not applicable.","pos":[3367,3382]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[3383,3430],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[3431,3556],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[3565,3573]},{"content":"Floating-Point Support","pos":[3578,3600]},{"content":"_cabs","pos":[3658,3663]},{"content":"_matherr","pos":[3713,3721]}],"content":"---\ntitle: \"hypot, hypotf, hypotl, _hypot, _hypotf, _hypotl | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_hypotf\"\n  - \"hypot\"\n  - \"hypotf\"\n  - \"_hypot\"\n  - \"_hypotl\"\n  - \"hypotl\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-math-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"hypotf\"\n  - \"hypotl\"\n  - \"_hypotl\"\n  - \"hypot\"\n  - \"_hypot\"\n  - \"_hypotf\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"hypotenuse calculation\"\n  - \"hypot function\"\n  - \"hypotf function\"\n  - \"triangles, calculating hypotenuse\"\n  - \"hypotl function\"\n  - \"calculating hypotenuses\"\n  - \"_hypot function\"\nms.assetid: 6a13887f-bd53-43fc-9d77-5b42d6e49925\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# hypot, hypotf, hypotl, _hypot, _hypotf, _hypotl\nCalculates the hypotenuse.  \n  \n## Syntax  \n  \n```  \ndouble hypot(   \n   double x,  \n   double y   \n);  \nfloat hypotf(   \n   float x,  \n   float y   \n);  \nlong double hypotl(  \n   long double x,  \n   long double y  \n);  \ndouble _hypot(   \n   double x,  \n   double y   \n);  \nfloat _hypotf(   \n   float x,  \n   float y   \n);  \nlong double _hypotl(  \n   long double x,  \n   long double y  \n);  \n```  \n  \n#### Parameters  \n `x`, `y`  \n Floating-point values.  \n  \n## Return Value  \n If successful, `hypot` returns the length of the hypotenuse; on overflow, `hypot` returns INF (infinity) and the `errno` variable is set to `ERANGE`. You can use `_matherr` to modify error handling.  \n  \n For more information about return codes, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n The `hypot` functions calculate the length of the hypotenuse of a right triangle, given the length of the two sides `x` and `y` (in other words, the square root of `x`<sup>2</sup> + `y`<sup>2</sup>).  \n  \n The versions of the functions that have leading underscores are provided for compatibility with earlier standards. Their behavior is identical to the versions that don't have leading underscores. We recommend using the versions without leading underscores for new code.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`hypot`, `hypotf`, `hypotl`, `_hypot`, `_hypotf`, `_hypotl`|\\<math.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n// crt_hypot.c  \n// This program prints the hypotenuse of a right triangle.  \n  \n#include <math.h>  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   double x = 3.0, y = 4.0;  \n  \n   printf( \"If a right triangle has sides %2.1f and %2.1f, \"  \n           \"its hypotenuse is %2.1f\\n\", x, y, _hypot( x, y ) );  \n}  \n```  \n  \n```Output  \nIf a right triangle has sides 3.0 and 4.0, its hypotenuse is 5.0  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [_cabs](../../c-runtime-library/reference/cabs.md)   \n [_matherr](../../c-runtime-library/reference/matherr.md)"}