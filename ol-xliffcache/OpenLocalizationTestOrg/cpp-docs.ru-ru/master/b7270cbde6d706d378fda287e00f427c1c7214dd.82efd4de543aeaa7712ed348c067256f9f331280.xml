{"nodes":[{"pos":[12,79],"content":"How to: Create a Task that Completes After a Delay | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Create a Task that Completes After a Delay | Microsoft Docs","pos":[0,67]}]},{"content":"How to: Create a Task that Completes After a Delay","pos":[688,738]},{"content":"This example shows how to use the <bpt id=\"p1\">[</bpt>concurrency::task<ept id=\"p1\">](../../parallel/concrt/reference/task-class.md)</ept>, <bpt id=\"p2\">[</bpt>concurrency::cancellation_token_source<ept id=\"p2\">](../../parallel/concrt/reference/cancellation-token-source-class.md)</ept>, <bpt id=\"p3\">[</bpt>concurrency::cancellation_token<ept id=\"p3\">](../../parallel/concrt/reference/cancellation-token-class.md)</ept>, <bpt id=\"p4\">[</bpt>concurrency::task_completion_event<ept id=\"p4\">](../../parallel/concrt/reference/task-completion-event-class.md)</ept>, <bpt id=\"p5\">[</bpt>concurrency::timer<ept id=\"p5\">](../../parallel/concrt/reference/timer-class.md)</ept>, and <bpt id=\"p6\">[</bpt>concurrency::call<ept id=\"p6\">](../../parallel/concrt/reference/call-class.md)</ept> classes to create a task that completes after a delay.","pos":[739,1344],"source":"This example shows how to use the [concurrency::task](../../parallel/concrt/reference/task-class.md), [concurrency::cancellation_token_source](../../parallel/concrt/reference/cancellation-token-source-class.md), [concurrency::cancellation_token](../../parallel/concrt/reference/cancellation-token-class.md), [concurrency::task_completion_event](../../parallel/concrt/reference/task-completion-event-class.md), [concurrency::timer](../../parallel/concrt/reference/timer-class.md), and [concurrency::call](../../parallel/concrt/reference/call-class.md) classes to create a task that completes after a delay."},{"content":"You can use this method to build loops that occasionally poll for data, introduce timeouts, delay handling of user input for a predetermined time, and so on.","pos":[1345,1502]},{"content":"Example","pos":[1511,1518]},{"content":"The following example shows the <ph id=\"ph1\">`complete_after`</ph> and <ph id=\"ph2\">`cancel_after_timeout`</ph> functions.","pos":[1522,1608],"source":"The following example shows the `complete_after` and `cancel_after_timeout` functions."},{"content":"The <ph id=\"ph1\">`complete_after`</ph> function creates a <ph id=\"ph2\">`task`</ph> object that completes after the specified delay.","pos":[1609,1704],"source":" The `complete_after` function creates a `task` object that completes after the specified delay."},{"content":"It uses a <ph id=\"ph1\">`timer`</ph> object and a <ph id=\"ph2\">`call`</ph> object to set a <ph id=\"ph3\">`task_completion_event`</ph> object after the specified delay.","pos":[1705,1816],"source":" It uses a `timer` object and a `call` object to set a `task_completion_event` object after the specified delay."},{"content":"By using the <ph id=\"ph1\">`task_completion_event`</ph> class, you can define a task that completes after a thread or another task signals that a value is available.","pos":[1817,1963],"source":" By using the `task_completion_event` class, you can define a task that completes after a thread or another task signals that a value is available."},{"content":"When the event is set, listener tasks complete and their continuations are scheduled to run.","pos":[1964,2056]},{"pos":[2064,2272],"content":"[!TIP]\n For more information about the `timer` and `call` classes, which are part of the Asynchronous Agents Library, see [Asynchronous Message Blocks](../../parallel/concrt/asynchronous-message-blocks.md).","leadings":["","> "],"nodes":[{"content":"For more information about the <ph id=\"ph1\">`timer`</ph> and <ph id=\"ph2\">`call`</ph> classes, which are part of the Asynchronous Agents Library, see <bpt id=\"p1\">[</bpt>Asynchronous Message Blocks<ept id=\"p1\">](../../parallel/concrt/asynchronous-message-blocks.md)</ept>.","pos":[8,206],"source":" For more information about the `timer` and `call` classes, which are part of the Asynchronous Agents Library, see [Asynchronous Message Blocks](../../parallel/concrt/asynchronous-message-blocks.md)."}]},{"content":"The <ph id=\"ph1\">`cancel_after_timeout`</ph> function builds on the <ph id=\"ph2\">`complete_after`</ph> function to cancel a task if that task does not complete before a given timeout.","pos":[2279,2426],"source":"The `cancel_after_timeout` function builds on the `complete_after` function to cancel a task if that task does not complete before a given timeout."},{"content":"The <ph id=\"ph1\">`cancel_after_timeout`</ph> function creates two tasks.","pos":[2427,2481],"source":" The `cancel_after_timeout` function creates two tasks."},{"content":"The first task indicates success and completes after the provided task completes; the second task indicates failure and completes after the specified timeout.","pos":[2482,2640]},{"content":"The <ph id=\"ph1\">`cancel_after_timeout`</ph> function creates a continuation task that runs when the success or failure task completes.","pos":[2641,2758],"source":" The `cancel_after_timeout` function creates a continuation task that runs when the success or failure task completes."},{"content":"If the failure task completes first, the continuation cancels the token source to cancel the overall task.","pos":[2759,2865]},{"pos":[2883,2902],"content":"concrt-task-delay#1"},{"content":"Example","pos":[3008,3015]},{"content":"The following example computes the count of prime numbers in the range [0, 100000] multiple times.","pos":[3019,3117]},{"content":"The operation fails if it does not complete in a given time limit.","pos":[3118,3184]},{"content":"The <ph id=\"ph1\">`count_primes`</ph> function demonstrates how to use the <ph id=\"ph2\">`cancel_after_timeout`</ph> function.","pos":[3185,3273],"source":" The `count_primes` function demonstrates how to use the `cancel_after_timeout` function."},{"content":"It counts the number of primes in the given range and fails if the task does not complete in the provided time.","pos":[3274,3385]},{"content":"The <ph id=\"ph1\">`wmain`</ph> function calls the <ph id=\"ph2\">`count_primes`</ph> function multiple times.","pos":[3386,3456],"source":" The `wmain` function calls the `count_primes` function multiple times."},{"content":"Each time, it halves the time limit.","pos":[3457,3493]},{"content":"The program finishes after the operation does not complete in the current time limit.","pos":[3494,3579]},{"pos":[3597,3616],"content":"concrt-task-delay#2"},{"content":"When you use this technique to cancel tasks after a delay, any unstarted tasks will not start after the overall task is canceled.","pos":[3720,3849]},{"content":"However, it is important for any long-running tasks to respond to cancellation in a timely manner.","pos":[3850,3948]},{"content":"For more information about task cancellation, see <bpt id=\"p1\">[</bpt>Cancellation in the PPL<ept id=\"p1\">](cancellation-in-the-ppl.md)</ept>.","pos":[3949,4053],"source":" For more information about task cancellation, see [Cancellation in the PPL](cancellation-in-the-ppl.md)."},{"content":"Example","pos":[4062,4069]},{"content":"Here is the complete code for this example:","pos":[4073,4116]},{"pos":[4134,4153],"content":"concrt-task-delay#3"},{"content":"Compiling the Code","pos":[4259,4277]},{"pos":[4281,4485],"content":"To compile the code, copy it and then paste it in a Visual Studio project, or paste it in a file that is named <ph id=\"ph1\">`task-delay.cpp`</ph> and then run the following command in a Visual Studio Command Prompt window.","source":"To compile the code, copy it and then paste it in a Visual Studio project, or paste it in a file that is named `task-delay.cpp` and then run the following command in a Visual Studio Command Prompt window."},{"content":"cl.exe /EHsc task-delay.cpp","pos":[4494,4521]},{"content":"See Also","pos":[4532,4540]},{"content":"Task Parallelism","pos":[4545,4561]},{"content":"task Class (Concurrency Runtime)","pos":[4631,4663]},{"content":"cancellation_token_source Class","pos":[4717,4748]},{"content":"cancellation_token Class","pos":[4823,4847]},{"content":"task_completion_event Class","pos":[4915,4942]},{"content":"timer Class","pos":[5013,5024]},{"content":"call Class","pos":[5079,5089]},{"content":"Asynchronous Message Blocks","pos":[5143,5170]},{"content":"Cancellation in the PPL","pos":[5231,5254]}],"content":"---\ntitle: \"How to: Create a Task that Completes After a Delay | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"task_completion_event class, example\"\n  - \"create a task that completes after a delay, example [C++]\"\nms.assetid: 3fc0a194-3fdb-4eba-8b8a-b890981a985d\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Create a Task that Completes After a Delay\nThis example shows how to use the [concurrency::task](../../parallel/concrt/reference/task-class.md), [concurrency::cancellation_token_source](../../parallel/concrt/reference/cancellation-token-source-class.md), [concurrency::cancellation_token](../../parallel/concrt/reference/cancellation-token-class.md), [concurrency::task_completion_event](../../parallel/concrt/reference/task-completion-event-class.md), [concurrency::timer](../../parallel/concrt/reference/timer-class.md), and [concurrency::call](../../parallel/concrt/reference/call-class.md) classes to create a task that completes after a delay. You can use this method to build loops that occasionally poll for data, introduce timeouts, delay handling of user input for a predetermined time, and so on.  \n  \n## Example  \n The following example shows the `complete_after` and `cancel_after_timeout` functions. The `complete_after` function creates a `task` object that completes after the specified delay. It uses a `timer` object and a `call` object to set a `task_completion_event` object after the specified delay. By using the `task_completion_event` class, you can define a task that completes after a thread or another task signals that a value is available. When the event is set, listener tasks complete and their continuations are scheduled to run.  \n  \n> [!TIP]\n>  For more information about the `timer` and `call` classes, which are part of the Asynchronous Agents Library, see [Asynchronous Message Blocks](../../parallel/concrt/asynchronous-message-blocks.md).  \n  \n The `cancel_after_timeout` function builds on the `complete_after` function to cancel a task if that task does not complete before a given timeout. The `cancel_after_timeout` function creates two tasks. The first task indicates success and completes after the provided task completes; the second task indicates failure and completes after the specified timeout. The `cancel_after_timeout` function creates a continuation task that runs when the success or failure task completes. If the failure task completes first, the continuation cancels the token source to cancel the overall task.  \n  \n [!code-cpp[concrt-task-delay#1](../../parallel/concrt/codesnippet/cpp/how-to-create-a-task-that-completes-after-a-delay_1.cpp)]  \n  \n## Example  \n The following example computes the count of prime numbers in the range [0, 100000] multiple times. The operation fails if it does not complete in a given time limit. The `count_primes` function demonstrates how to use the `cancel_after_timeout` function. It counts the number of primes in the given range and fails if the task does not complete in the provided time. The `wmain` function calls the `count_primes` function multiple times. Each time, it halves the time limit. The program finishes after the operation does not complete in the current time limit.  \n  \n [!code-cpp[concrt-task-delay#2](../../parallel/concrt/codesnippet/cpp/how-to-create-a-task-that-completes-after-a-delay_2.cpp)]  \n  \n When you use this technique to cancel tasks after a delay, any unstarted tasks will not start after the overall task is canceled. However, it is important for any long-running tasks to respond to cancellation in a timely manner. For more information about task cancellation, see [Cancellation in the PPL](cancellation-in-the-ppl.md).  \n  \n## Example  \n Here is the complete code for this example:  \n  \n [!code-cpp[concrt-task-delay#3](../../parallel/concrt/codesnippet/cpp/how-to-create-a-task-that-completes-after-a-delay_3.cpp)]  \n  \n## Compiling the Code  \n To compile the code, copy it and then paste it in a Visual Studio project, or paste it in a file that is named `task-delay.cpp` and then run the following command in a Visual Studio Command Prompt window.  \n  \n **cl.exe /EHsc task-delay.cpp**  \n  \n## See Also  \n [Task Parallelism](../../parallel/concrt/task-parallelism-concurrency-runtime.md)   \n [task Class (Concurrency Runtime)](../../parallel/concrt/reference/task-class.md)   \n [cancellation_token_source Class](../../parallel/concrt/reference/cancellation-token-source-class.md)   \n [cancellation_token Class](../../parallel/concrt/reference/cancellation-token-class.md)   \n [task_completion_event Class](../../parallel/concrt/reference/task-completion-event-class.md)   \n [timer Class](../../parallel/concrt/reference/timer-class.md)   \n [call Class](../../parallel/concrt/reference/call-class.md)   \n [Asynchronous Message Blocks](../../parallel/concrt/asynchronous-message-blocks.md)   \n [Cancellation in the PPL](cancellation-in-the-ppl.md)\n\n"}