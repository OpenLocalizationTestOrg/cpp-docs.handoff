{"nodes":[{"pos":[12,74],"content":"Concurrency::precise_math namespace functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Concurrency::precise_math namespace functions | Microsoft Docs","pos":[0,62]}]},{"pos":[316,361],"content":"Concurrency::precise_math namespace functions","linkify":"Concurrency::precise_math namespace functions","nodes":[{"content":"Concurrency::precise_math namespace functions","pos":[0,45]}]},{"pos":[380,411],"content":"<bpt id=\"p1\">[</bpt>acos Function<ept id=\"p1\">](#acos_function)</ept>","source":"[acos Function](#acos_function)"},{"pos":[412,445],"content":"<bpt id=\"p1\">[</bpt>acosf Function<ept id=\"p1\">](#acosf_function)</ept>","source":"[acosf Function](#acosf_function)"},{"pos":[446,479],"content":"<bpt id=\"p1\">[</bpt>acosh Function<ept id=\"p1\">](#acosh_function)</ept>","source":"[acosh Function](#acosh_function)"},{"pos":[484,519],"content":"<bpt id=\"p1\">[</bpt>acoshf Function<ept id=\"p1\">](#acoshf_function)</ept>","source":"[acoshf Function](#acoshf_function)"},{"pos":[520,551],"content":"<bpt id=\"p1\">[</bpt>asin Function<ept id=\"p1\">](#asin_function)</ept>","source":"[asin Function](#asin_function)"},{"pos":[552,585],"content":"<bpt id=\"p1\">[</bpt>asinf Function<ept id=\"p1\">](#asinf_function)</ept>","source":"[asinf Function](#asinf_function)"},{"pos":[590,623],"content":"<bpt id=\"p1\">[</bpt>asinh Function<ept id=\"p1\">](#asinh_function)</ept>","source":"[asinh Function](#asinh_function)"},{"pos":[624,659],"content":"<bpt id=\"p1\">[</bpt>asinhf Function<ept id=\"p1\">](#asinhf_function)</ept>","source":"[asinhf Function](#asinhf_function)"},{"pos":[660,691],"content":"<bpt id=\"p1\">[</bpt>atan Function<ept id=\"p1\">](#atan_function)</ept>","source":"[atan Function](#atan_function)"},{"pos":[696,729],"content":"<bpt id=\"p1\">[</bpt>atan2 Function<ept id=\"p1\">](#atan2_function)</ept>","source":"[atan2 Function](#atan2_function)"},{"pos":[730,765],"content":"<bpt id=\"p1\">[</bpt>atan2f Function<ept id=\"p1\">](#atan2f_function)</ept>","source":"[atan2f Function](#atan2f_function)"},{"pos":[766,799],"content":"<bpt id=\"p1\">[</bpt>atanf Function<ept id=\"p1\">](#atanf_function)</ept>","source":"[atanf Function](#atanf_function)"},{"pos":[804,837],"content":"<bpt id=\"p1\">[</bpt>atanh Function<ept id=\"p1\">](#atanh_function)</ept>","source":"[atanh Function](#atanh_function)"},{"pos":[838,873],"content":"<bpt id=\"p1\">[</bpt>atanhf Function<ept id=\"p1\">](#atanhf_function)</ept>","source":"[atanhf Function](#atanhf_function)"},{"pos":[874,905],"content":"<bpt id=\"p1\">[</bpt>cbrt Function<ept id=\"p1\">](#cbrt_function)</ept>","source":"[cbrt Function](#cbrt_function)"},{"pos":[910,943],"content":"<bpt id=\"p1\">[</bpt>cbrtf Function<ept id=\"p1\">](#cbrtf_function)</ept>","source":"[cbrtf Function](#cbrtf_function)"},{"pos":[944,975],"content":"<bpt id=\"p1\">[</bpt>ceil Function<ept id=\"p1\">](#ceil_function)</ept>","source":"[ceil Function](#ceil_function)"},{"pos":[976,1009],"content":"<bpt id=\"p1\">[</bpt>ceilf Function<ept id=\"p1\">](#ceilf_function)</ept>","source":"[ceilf Function](#ceilf_function)"},{"pos":[1014,1053],"content":"<bpt id=\"p1\">[</bpt>copysign Function<ept id=\"p1\">](#copysign_function)</ept>","source":"[copysign Function](#copysign_function)"},{"pos":[1054,1095],"content":"<bpt id=\"p1\">[</bpt>copysignf Function<ept id=\"p1\">](#copysignf_function)</ept>","source":"[copysignf Function](#copysignf_function)"},{"pos":[1096,1125],"content":"<bpt id=\"p1\">[</bpt>cos Function<ept id=\"p1\">](#cos_function)</ept>","source":"[cos Function](#cos_function)"},{"pos":[1130,1161],"content":"<bpt id=\"p1\">[</bpt>cosf Function<ept id=\"p1\">](#cosf_function)</ept>","source":"[cosf Function](#cosf_function)"},{"pos":[1162,1193],"content":"<bpt id=\"p1\">[</bpt>cosh Function<ept id=\"p1\">](#cosh_function)</ept>","source":"[cosh Function](#cosh_function)"},{"pos":[1194,1227],"content":"<bpt id=\"p1\">[</bpt>coshf Function<ept id=\"p1\">](#coshf_function)</ept>","source":"[coshf Function](#coshf_function)"},{"pos":[1232,1265],"content":"<bpt id=\"p1\">[</bpt>cospi Function<ept id=\"p1\">](#cospi_function)</ept>","source":"[cospi Function](#cospi_function)"},{"pos":[1266,1301],"content":"<bpt id=\"p1\">[</bpt>cospif Function<ept id=\"p1\">](#cospif_function)</ept>","source":"[cospif Function](#cospif_function)"},{"pos":[1302,1331],"content":"<bpt id=\"p1\">[</bpt>erf Function<ept id=\"p1\">](#erf_function)</ept>","source":"[erf Function](#erf_function)"},{"pos":[1336,1367],"content":"<bpt id=\"p1\">[</bpt>erfc Function<ept id=\"p1\">](#erfc_function)</ept>","source":"[erfc Function](#erfc_function)"},{"pos":[1368,1401],"content":"<bpt id=\"p1\">[</bpt>erfcf Function<ept id=\"p1\">](#erfcf_function)</ept>","source":"[erfcf Function](#erfcf_function)"},{"pos":[1402,1439],"content":"<bpt id=\"p1\">[</bpt>erfcinv Function<ept id=\"p1\">](#erfcinv_function)</ept>","source":"[erfcinv Function](#erfcinv_function)"},{"pos":[1444,1483],"content":"<bpt id=\"p1\">[</bpt>erfcinvf Function<ept id=\"p1\">](#erfcinvf_function)</ept>","source":"[erfcinvf Function](#erfcinvf_function)"},{"pos":[1484,1515],"content":"<bpt id=\"p1\">[</bpt>erff Function<ept id=\"p1\">](#erff_function)</ept>","source":"[erff Function](#erff_function)"},{"pos":[1516,1551],"content":"<bpt id=\"p1\">[</bpt>erfinv Function<ept id=\"p1\">](#erfinv_function)</ept>","source":"[erfinv Function](#erfinv_function)"},{"pos":[1556,1593],"content":"<bpt id=\"p1\">[</bpt>erfinvf Function<ept id=\"p1\">](#erfinvf_function)</ept>","source":"[erfinvf Function](#erfinvf_function)"},{"pos":[1594,1623],"content":"<bpt id=\"p1\">[</bpt>exp Function<ept id=\"p1\">](#exp_function)</ept>","source":"[exp Function](#exp_function)"},{"pos":[1624,1657],"content":"<bpt id=\"p1\">[</bpt>exp10 Function<ept id=\"p1\">](#exp10_function)</ept>","source":"[exp10 Function](#exp10_function)"},{"pos":[1662,1697],"content":"<bpt id=\"p1\">[</bpt>exp10f Function<ept id=\"p1\">](#exp10f_function)</ept>","source":"[exp10f Function](#exp10f_function)"},{"pos":[1698,1729],"content":"<bpt id=\"p1\">[</bpt>exp2 Function<ept id=\"p1\">](#exp2_function)</ept>","source":"[exp2 Function](#exp2_function)"},{"pos":[1730,1763],"content":"<bpt id=\"p1\">[</bpt>exp2f Function<ept id=\"p1\">](#exp2f_function)</ept>","source":"[exp2f Function](#exp2f_function)"},{"pos":[1768,1799],"content":"<bpt id=\"p1\">[</bpt>expf Function<ept id=\"p1\">](#expf_function)</ept>","source":"[expf Function](#expf_function)"},{"pos":[1800,1833],"content":"<bpt id=\"p1\">[</bpt>expm1 Function<ept id=\"p1\">](#expm1_function)</ept>","source":"[expm1 Function](#expm1_function)"},{"pos":[1834,1869],"content":"<bpt id=\"p1\">[</bpt>expm1f Function<ept id=\"p1\">](#expm1f_function)</ept>","source":"[expm1f Function](#expm1f_function)"},{"pos":[1874,1905],"content":"<bpt id=\"p1\">[</bpt>fabs Function<ept id=\"p1\">](#fabs_function)</ept>","source":"[fabs Function](#fabs_function)"},{"pos":[1906,1939],"content":"<bpt id=\"p1\">[</bpt>fabsf Function<ept id=\"p1\">](#fabsf_function)</ept>","source":"[fabsf Function](#fabsf_function)"},{"pos":[1940,1973],"content":"<bpt id=\"p1\">[</bpt>floor Function<ept id=\"p1\">](#floor_function)</ept>","source":"[floor Function](#floor_function)"},{"pos":[1977,2008],"content":"<bpt id=\"p1\">[</bpt>fdim Function<ept id=\"p1\">](#fdim_function)</ept>","source":"[fdim Function](#fdim_function)"},{"pos":[2009,2042],"content":"<bpt id=\"p1\">[</bpt>fdimf Function<ept id=\"p1\">](#fdimf_function)</ept>","source":"[fdimf Function](#fdimf_function)"},{"pos":[2047,2082],"content":"<bpt id=\"p1\">[</bpt>floorf Function<ept id=\"p1\">](#floorf_function)</ept>","source":"[floorf Function](#floorf_function)"},{"pos":[2083,2112],"content":"<bpt id=\"p1\">[</bpt>fma Function<ept id=\"p1\">](#fma_function)</ept>","source":"[fma Function](#fma_function)"},{"pos":[2113,2144],"content":"<bpt id=\"p1\">[</bpt>fmaf Function<ept id=\"p1\">](#fmaf_function)</ept>","source":"[fmaf Function](#fmaf_function)"},{"pos":[2146,2177],"content":"<bpt id=\"p1\">[</bpt>fmax Function<ept id=\"p1\">](#fmax_function)</ept>","source":"[fmax Function](#fmax_function)"},{"pos":[2178,2211],"content":"<bpt id=\"p1\">[</bpt>fmaxf Function<ept id=\"p1\">](#fmaxf_function)</ept>","source":"[fmaxf Function](#fmaxf_function)"},{"pos":[2216,2247],"content":"<bpt id=\"p1\">[</bpt>fmin Function<ept id=\"p1\">](#fmin_function)</ept>","source":"[fmin Function](#fmin_function)"},{"pos":[2248,2281],"content":"<bpt id=\"p1\">[</bpt>fminf Function<ept id=\"p1\">](#fminf_function)</ept>","source":"[fminf Function](#fminf_function)"},{"pos":[2282,2313],"content":"<bpt id=\"p1\">[</bpt>fmod Function<ept id=\"p1\">](#fmod_function)</ept>","source":"[fmod Function](#fmod_function)"},{"pos":[2318,2351],"content":"<bpt id=\"p1\">[</bpt>fmodf Function<ept id=\"p1\">](#fmodf_function)</ept>","source":"[fmodf Function](#fmodf_function)"},{"pos":[2352,2395],"content":"<bpt id=\"p1\">[</bpt>fpclassify Function<ept id=\"p1\">](#fpclassify_function)</ept>","source":"[fpclassify Function](#fpclassify_function)"},{"pos":[2396,2429],"content":"<bpt id=\"p1\">[</bpt>frexp Function<ept id=\"p1\">](#frexp_function)</ept>","source":"[frexp Function](#frexp_function)"},{"pos":[2434,2469],"content":"<bpt id=\"p1\">[</bpt>frexpf Function<ept id=\"p1\">](#frexpf_function)</ept>","source":"[frexpf Function](#frexpf_function)"},{"pos":[2470,2503],"content":"<bpt id=\"p1\">[</bpt>hypot Function<ept id=\"p1\">](#hypot_function)</ept>","source":"[hypot Function](#hypot_function)"},{"pos":[2504,2539],"content":"<bpt id=\"p1\">[</bpt>hypotf Function<ept id=\"p1\">](#hypotf_function)</ept>","source":"[hypotf Function](#hypotf_function)"},{"pos":[2544,2577],"content":"<bpt id=\"p1\">[</bpt>ilogb Function<ept id=\"p1\">](#ilogb_function)</ept>","source":"[ilogb Function](#ilogb_function)"},{"pos":[2578,2613],"content":"<bpt id=\"p1\">[</bpt>ilogbf Function<ept id=\"p1\">](#ilogbf_function)</ept>","source":"[ilogbf Function](#ilogbf_function)"},{"pos":[2614,2653],"content":"<bpt id=\"p1\">[</bpt>isfinite Function<ept id=\"p1\">](#isfinite_function)</ept>","source":"[isfinite Function](#isfinite_function)"},{"pos":[2658,2691],"content":"<bpt id=\"p1\">[</bpt>isinf Function<ept id=\"p1\">](#isinf_function)</ept>","source":"[isinf Function](#isinf_function)"},{"pos":[2692,2725],"content":"<bpt id=\"p1\">[</bpt>isnan Function<ept id=\"p1\">](#isnan_function)</ept>","source":"[isnan Function](#isnan_function)"},{"pos":[2726,2765],"content":"<bpt id=\"p1\">[</bpt>isnormal Function<ept id=\"p1\">](#isnormal_function)</ept>","source":"[isnormal Function](#isnormal_function)"},{"pos":[2770,2803],"content":"<bpt id=\"p1\">[</bpt>ldexp Function<ept id=\"p1\">](#ldexp_function)</ept>","source":"[ldexp Function](#ldexp_function)"},{"pos":[2804,2839],"content":"<bpt id=\"p1\">[</bpt>ldexpf Function<ept id=\"p1\">](#ldexpf_function)</ept>","source":"[ldexpf Function](#ldexpf_function)"},{"pos":[2840,2875],"content":"<bpt id=\"p1\">[</bpt>lgamma Function<ept id=\"p1\">](#lgamma_function)</ept>","source":"[lgamma Function](#lgamma_function)"},{"pos":[2880,2917],"content":"<bpt id=\"p1\">[</bpt>lgammaf Function<ept id=\"p1\">](#lgammaf_function)</ept>","source":"[lgammaf Function](#lgammaf_function)"},{"pos":[2918,2947],"content":"<bpt id=\"p1\">[</bpt>log Function<ept id=\"p1\">](#log_function)</ept>","source":"[log Function](#log_function)"},{"pos":[2948,2981],"content":"<bpt id=\"p1\">[</bpt>log10 Function<ept id=\"p1\">](#log10_function)</ept>","source":"[log10 Function](#log10_function)"},{"pos":[2986,3021],"content":"<bpt id=\"p1\">[</bpt>log10f Function<ept id=\"p1\">](#log10f_function)</ept>","source":"[log10f Function](#log10f_function)"},{"pos":[3022,3055],"content":"<bpt id=\"p1\">[</bpt>log1p Function<ept id=\"p1\">](#log1p_function)</ept>","source":"[log1p Function](#log1p_function)"},{"pos":[3056,3091],"content":"<bpt id=\"p1\">[</bpt>log1pf Function<ept id=\"p1\">](#log1pf_function)</ept>","source":"[log1pf Function](#log1pf_function)"},{"pos":[3096,3127],"content":"<bpt id=\"p1\">[</bpt>log2 Function<ept id=\"p1\">](#log2_function)</ept>","source":"[log2 Function](#log2_function)"},{"pos":[3128,3161],"content":"<bpt id=\"p1\">[</bpt>log2f Function<ept id=\"p1\">](#log2f_function)</ept>","source":"[log2f Function](#log2f_function)"},{"pos":[3162,3193],"content":"<bpt id=\"p1\">[</bpt>logb Function<ept id=\"p1\">](#logb_function)</ept>","source":"[logb Function](#logb_function)"},{"pos":[3198,3231],"content":"<bpt id=\"p1\">[</bpt>logbf Function<ept id=\"p1\">](#logbf_function)</ept>","source":"[logbf Function](#logbf_function)"},{"pos":[3232,3263],"content":"<bpt id=\"p1\">[</bpt>logf Function<ept id=\"p1\">](#logf_function)</ept>","source":"[logf Function](#logf_function)"},{"pos":[3264,3295],"content":"<bpt id=\"p1\">[</bpt>modf Function<ept id=\"p1\">](#modf_function)</ept>","source":"[modf Function](#modf_function)"},{"pos":[3300,3333],"content":"<bpt id=\"p1\">[</bpt>modff Function<ept id=\"p1\">](#modff_function)</ept>","source":"[modff Function](#modff_function)"},{"pos":[3334,3363],"content":"<bpt id=\"p1\">[</bpt>nan Function<ept id=\"p1\">](#nan_function)</ept>","source":"[nan Function](#nan_function)"},{"pos":[3364,3395],"content":"<bpt id=\"p1\">[</bpt>nanf Function<ept id=\"p1\">](#nanf_function)</ept>","source":"[nanf Function](#nanf_function)"},{"pos":[3400,3441],"content":"<bpt id=\"p1\">[</bpt>nearbyint Function<ept id=\"p1\">](#nearbyint_function)</ept>","source":"[nearbyint Function](#nearbyint_function)"},{"pos":[3442,3485],"content":"<bpt id=\"p1\">[</bpt>nearbyintf Function<ept id=\"p1\">](#nearbyintf_function)</ept>","source":"[nearbyintf Function](#nearbyintf_function)"},{"pos":[3486,3527],"content":"<bpt id=\"p1\">[</bpt>nextafter Function<ept id=\"p1\">](#nextafter_function)</ept>","source":"[nextafter Function](#nextafter_function)"},{"pos":[3532,3575],"content":"<bpt id=\"p1\">[</bpt>nextafterf Function<ept id=\"p1\">](#nextafterf_function)</ept>","source":"[nextafterf Function](#nextafterf_function)"},{"pos":[3576,3605],"content":"<bpt id=\"p1\">[</bpt>phi Function<ept id=\"p1\">](#phi_function)</ept>","source":"[phi Function](#phi_function)"},{"pos":[3606,3637],"content":"<bpt id=\"p1\">[</bpt>phif Function<ept id=\"p1\">](#phif_function)</ept>","source":"[phif Function](#phif_function)"},{"pos":[3642,3671],"content":"<bpt id=\"p1\">[</bpt>pow Function<ept id=\"p1\">](#pow_function)</ept>","source":"[pow Function](#pow_function)"},{"pos":[3672,3703],"content":"<bpt id=\"p1\">[</bpt>powf Function<ept id=\"p1\">](#powf_function)</ept>","source":"[powf Function](#powf_function)"},{"pos":[3704,3739],"content":"<bpt id=\"p1\">[</bpt>probit Function<ept id=\"p1\">](#probit_function)</ept>","source":"[probit Function](#probit_function)"},{"pos":[3744,3781],"content":"<bpt id=\"p1\">[</bpt>probitf Function<ept id=\"p1\">](#probitf_function)</ept>","source":"[probitf Function](#probitf_function)"},{"pos":[3782,3815],"content":"<bpt id=\"p1\">[</bpt>rcbrt Function<ept id=\"p1\">](#rcbrt_function)</ept>","source":"[rcbrt Function](#rcbrt_function)"},{"pos":[3816,3851],"content":"<bpt id=\"p1\">[</bpt>rcbrtf Function<ept id=\"p1\">](#rcbrtf_function)</ept>","source":"[rcbrtf Function](#rcbrtf_function)"},{"pos":[3856,3897],"content":"<bpt id=\"p1\">[</bpt>remainder Function<ept id=\"p1\">](#remainder_function)</ept>","source":"[remainder Function](#remainder_function)"},{"pos":[3898,3941],"content":"<bpt id=\"p1\">[</bpt>remainderf Function<ept id=\"p1\">](#remainderf_function)</ept>","source":"[remainderf Function](#remainderf_function)"},{"pos":[3942,3977],"content":"<bpt id=\"p1\">[</bpt>remquo Function<ept id=\"p1\">](#remquo_function)</ept>","source":"[remquo Function](#remquo_function)"},{"pos":[3982,4019],"content":"<bpt id=\"p1\">[</bpt>remquof Function<ept id=\"p1\">](#remquof_function)</ept>","source":"[remquof Function](#remquof_function)"},{"pos":[4020,4053],"content":"<bpt id=\"p1\">[</bpt>round Function<ept id=\"p1\">](#round_function)</ept>","source":"[round Function](#round_function)"},{"pos":[4054,4089],"content":"<bpt id=\"p1\">[</bpt>roundf Function<ept id=\"p1\">](#roundf_function)</ept>","source":"[roundf Function](#roundf_function)"},{"pos":[4094,4127],"content":"<bpt id=\"p1\">[</bpt>rsqrt Function<ept id=\"p1\">](#rsqrt_function)</ept>","source":"[rsqrt Function](#rsqrt_function)"},{"pos":[4128,4163],"content":"<bpt id=\"p1\">[</bpt>rsqrtf Function<ept id=\"p1\">](#rsqrtf_function)</ept>","source":"[rsqrtf Function](#rsqrtf_function)"},{"pos":[4164,4197],"content":"<bpt id=\"p1\">[</bpt>scalb Function<ept id=\"p1\">](#scalb_function)</ept>","source":"[scalb Function](#scalb_function)"},{"pos":[4202,4237],"content":"<bpt id=\"p1\">[</bpt>scalbf Function<ept id=\"p1\">](#scalbf_function)</ept>","source":"[scalbf Function](#scalbf_function)"},{"pos":[4238,4273],"content":"<bpt id=\"p1\">[</bpt>scalbn Function<ept id=\"p1\">](#scalbn_function)</ept>","source":"[scalbn Function](#scalbn_function)"},{"pos":[4274,4311],"content":"<bpt id=\"p1\">[</bpt>scalbnf Function<ept id=\"p1\">](#scalbnf_function)</ept>","source":"[scalbnf Function](#scalbnf_function)"},{"pos":[4316,4353],"content":"<bpt id=\"p1\">[</bpt>signbit Function<ept id=\"p1\">](#signbit_function)</ept>","source":"[signbit Function](#signbit_function)"},{"pos":[4354,4393],"content":"<bpt id=\"p1\">[</bpt>signbitf Function<ept id=\"p1\">](#signbitf_function)</ept>","source":"[signbitf Function](#signbitf_function)"},{"pos":[4394,4423],"content":"<bpt id=\"p1\">[</bpt>sin Function<ept id=\"p1\">](#sin_function)</ept>","source":"[sin Function](#sin_function)"},{"pos":[4428,4463],"content":"<bpt id=\"p1\">[</bpt>sincos Function<ept id=\"p1\">](#sincos_function)</ept>","source":"[sincos Function](#sincos_function)"},{"pos":[4464,4501],"content":"<bpt id=\"p1\">[</bpt>sincosf Function<ept id=\"p1\">](#sincosf_function)</ept>","source":"[sincosf Function](#sincosf_function)"},{"pos":[4502,4533],"content":"<bpt id=\"p1\">[</bpt>sinf Function<ept id=\"p1\">](#sinf_function)</ept>","source":"[sinf Function](#sinf_function)"},{"pos":[4538,4569],"content":"<bpt id=\"p1\">[</bpt>sinh Function<ept id=\"p1\">](#sinh_function)</ept>","source":"[sinh Function](#sinh_function)"},{"pos":[4570,4603],"content":"<bpt id=\"p1\">[</bpt>sinhf Function<ept id=\"p1\">](#sinhf_function)</ept>","source":"[sinhf Function](#sinhf_function)"},{"pos":[4604,4637],"content":"<bpt id=\"p1\">[</bpt>sinpi Function<ept id=\"p1\">](#sinpi_function)</ept>","source":"[sinpi Function](#sinpi_function)"},{"pos":[4642,4677],"content":"<bpt id=\"p1\">[</bpt>sinpif Function<ept id=\"p1\">](#sinpif_function)</ept>","source":"[sinpif Function](#sinpif_function)"},{"pos":[4678,4709],"content":"<bpt id=\"p1\">[</bpt>sqrt Function<ept id=\"p1\">](#sqrt_function)</ept>","source":"[sqrt Function](#sqrt_function)"},{"pos":[4710,4743],"content":"<bpt id=\"p1\">[</bpt>sqrtf Function<ept id=\"p1\">](#sqrtf_function)</ept>","source":"[sqrtf Function](#sqrtf_function)"},{"pos":[4748,4777],"content":"<bpt id=\"p1\">[</bpt>tan Function<ept id=\"p1\">](#tan_function)</ept>","source":"[tan Function](#tan_function)"},{"pos":[4778,4809],"content":"<bpt id=\"p1\">[</bpt>tanf Function<ept id=\"p1\">](#tanf_function)</ept>","source":"[tanf Function](#tanf_function)"},{"pos":[4810,4841],"content":"<bpt id=\"p1\">[</bpt>tanh Function<ept id=\"p1\">](#tanh_function)</ept>","source":"[tanh Function](#tanh_function)"},{"pos":[4846,4879],"content":"<bpt id=\"p1\">[</bpt>tanhf Function<ept id=\"p1\">](#tanhf_function)</ept>","source":"[tanhf Function](#tanhf_function)"},{"pos":[4880,4913],"content":"<bpt id=\"p1\">[</bpt>tanpi Function<ept id=\"p1\">](#tanpi_function)</ept>","source":"[tanpi Function](#tanpi_function)"},{"pos":[4914,4949],"content":"<bpt id=\"p1\">[</bpt>tanpif Function<ept id=\"p1\">](#tanpif_function)</ept>","source":"[tanpif Function](#tanpif_function)"},{"pos":[4954,4989],"content":"<bpt id=\"p1\">[</bpt>tgamma Function<ept id=\"p1\">](#tgamma_function)</ept>","source":"[tgamma Function](#tgamma_function)"},{"pos":[4990,5027],"content":"<bpt id=\"p1\">[</bpt>tgammaf Function<ept id=\"p1\">](#tgammaf_function)</ept>","source":"[tgammaf Function](#tgammaf_function)"},{"pos":[5028,5061],"content":"<bpt id=\"p1\">[</bpt>trunc Function<ept id=\"p1\">](#trunc_function)</ept>","source":"[trunc Function](#trunc_function)"},{"pos":[5066,5101],"content":"<bpt id=\"p1\">[</bpt>truncf Function<ept id=\"p1\">](#truncf_function)</ept>","source":"[truncf Function](#truncf_function)"},{"pos":[5112,5155],"content":"<bpt id=\"p1\">&lt;a name=\"acos_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  acos Function","linkify":"<a name=\"acos_function\"></a>  acos Function","source":"<a name=\"acos_function\"></a>  acos Function"},{"content":"Calculates the arccosine of the argument","pos":[5159,5199]},{"pos":[5315,5325],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[5337,5357]},{"pos":[5367,5379],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the arccosine value of the argument","pos":[5383,5426]},{"pos":[5436,5481],"content":"<bpt id=\"p1\">&lt;a name=\"acosf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  acosf Function","linkify":"<a name=\"acosf_function\"></a>  acosf Function","source":"<a name=\"acosf_function\"></a>  acosf Function"},{"content":"Calculates the arccosine of the argument","pos":[5485,5525]},{"pos":[5594,5604],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[5616,5636]},{"pos":[5646,5658],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the arccosine value of the argument","pos":[5662,5705]},{"pos":[5715,5760],"content":"<bpt id=\"p1\">&lt;a name=\"acosh_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  acosh Function","linkify":"<a name=\"acosh_function\"></a>  acosh Function","source":"<a name=\"acosh_function\"></a>  acosh Function"},{"content":"Calculates the inverse hyperbolic cosine of the argument","pos":[5764,5820]},{"pos":[5938,5948],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[5960,5980]},{"pos":[5990,6002],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the inverse hyperbolic cosine value of the argument","pos":[6006,6065]},{"pos":[6075,6122],"content":"<bpt id=\"p1\">&lt;a name=\"acoshf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  acoshf Function","linkify":"<a name=\"acoshf_function\"></a>  acoshf Function","source":"<a name=\"acoshf_function\"></a>  acoshf Function"},{"content":"Calculates the inverse hyperbolic cosine of the argument","pos":[6126,6182]},{"pos":[6252,6262],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[6274,6294]},{"pos":[6304,6316],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the inverse hyperbolic cosine value of the argument","pos":[6320,6379]},{"pos":[6389,6432],"content":"<bpt id=\"p1\">&lt;a name=\"asin_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  asin Function","linkify":"<a name=\"asin_function\"></a>  asin Function","source":"<a name=\"asin_function\"></a>  asin Function"},{"content":"Calculates the arcsine of the argument","pos":[6436,6474]},{"pos":[6590,6600],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[6612,6632]},{"pos":[6642,6654],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the arcsine value of the argument","pos":[6658,6699]},{"pos":[6709,6754],"content":"<bpt id=\"p1\">&lt;a name=\"asinf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  asinf Function","linkify":"<a name=\"asinf_function\"></a>  asinf Function","source":"<a name=\"asinf_function\"></a>  asinf Function"},{"content":"Calculates the arcsine of the argument","pos":[6758,6796]},{"pos":[6865,6875],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[6887,6907]},{"pos":[6917,6929],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the arcsine value of the argument","pos":[6933,6974]},{"pos":[6984,7029],"content":"<bpt id=\"p1\">&lt;a name=\"asinh_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  asinh Function","linkify":"<a name=\"asinh_function\"></a>  asinh Function","source":"<a name=\"asinh_function\"></a>  asinh Function"},{"content":"Calculates the inverse hyperbolic sine of the argument","pos":[7033,7087]},{"pos":[7205,7215],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[7227,7247]},{"pos":[7257,7269],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the inverse hyperbolic sine value of the argument","pos":[7273,7330]},{"pos":[7340,7387],"content":"<bpt id=\"p1\">&lt;a name=\"asinhf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  asinhf Function","linkify":"<a name=\"asinhf_function\"></a>  asinhf Function","source":"<a name=\"asinhf_function\"></a>  asinhf Function"},{"content":"Calculates the inverse hyperbolic sine of the argument","pos":[7391,7445]},{"pos":[7515,7525],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[7537,7557]},{"pos":[7567,7579],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the inverse hyperbolic sine value of the argument","pos":[7583,7640]},{"pos":[7650,7693],"content":"<bpt id=\"p1\">&lt;a name=\"atan_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atan Function","linkify":"<a name=\"atan_function\"></a>  atan Function","source":"<a name=\"atan_function\"></a>  atan Function"},{"content":"Calculates the arctangent of the argument","pos":[7697,7738]},{"pos":[7854,7864],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[7876,7896]},{"pos":[7906,7918],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the arctangent value of the argument","pos":[7922,7966]},{"pos":[7976,8021],"content":"<bpt id=\"p1\">&lt;a name=\"atan2_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atan2 Function","linkify":"<a name=\"atan2_function\"></a>  atan2 Function","source":"<a name=\"atan2_function\"></a>  atan2 Function"},{"content":"Calculates the arctangent of _Y/_X","pos":[8025,8059]},{"pos":[8220,8230],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[8242,8262]},{"content":"Floating-point value","pos":[8277,8297]},{"pos":[8307,8319],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the arctangent value of _Y/_X","pos":[8323,8360]},{"pos":[8370,8417],"content":"<bpt id=\"p1\">&lt;a name=\"atan2f_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atan2f Function","linkify":"<a name=\"atan2f_function\"></a>  atan2f Function","source":"<a name=\"atan2f_function\"></a>  atan2f Function"},{"content":"Calculates the arctangent of _Y/_X","pos":[8421,8455]},{"pos":[8546,8556],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[8568,8588]},{"content":"Floating-point value","pos":[8603,8623]},{"pos":[8633,8645],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the arctangent value of _Y/_X","pos":[8649,8686]},{"pos":[8696,8741],"content":"<bpt id=\"p1\">&lt;a name=\"atanf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atanf Function","linkify":"<a name=\"atanf_function\"></a>  atanf Function","source":"<a name=\"atanf_function\"></a>  atanf Function"},{"content":"Calculates the arctangent of the argument","pos":[8745,8786]},{"pos":[8855,8865],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[8877,8897]},{"pos":[8907,8919],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the arctangent value of the argument","pos":[8923,8967]},{"pos":[8977,9022],"content":"<bpt id=\"p1\">&lt;a name=\"atanh_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atanh Function","linkify":"<a name=\"atanh_function\"></a>  atanh Function","source":"<a name=\"atanh_function\"></a>  atanh Function"},{"content":"Calculates the inverse hyperbolic tangent of the argument","pos":[9026,9083]},{"pos":[9201,9211],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[9223,9243]},{"pos":[9253,9265],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the inverse hyperbolic tangent value of the argument","pos":[9269,9329]},{"pos":[9339,9386],"content":"<bpt id=\"p1\">&lt;a name=\"atanhf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  atanhf Function","linkify":"<a name=\"atanhf_function\"></a>  atanhf Function","source":"<a name=\"atanhf_function\"></a>  atanhf Function"},{"content":"Calculates the inverse hyperbolic tangent of the argument","pos":[9390,9447]},{"pos":[9517,9527],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[9539,9559]},{"pos":[9569,9581],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the inverse hyperbolic tangent value of the argument","pos":[9585,9645]},{"pos":[9655,9698],"content":"<bpt id=\"p1\">&lt;a name=\"cbrt_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  cbrt Function","linkify":"<a name=\"cbrt_function\"></a>  cbrt Function","source":"<a name=\"cbrt_function\"></a>  cbrt Function"},{"content":"Computes the real cube root of the argument","pos":[9702,9745]},{"pos":[9861,9871],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[9883,9903]},{"pos":[9913,9925],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the real cube root of the argument","pos":[9929,9971]},{"pos":[9981,10026],"content":"<bpt id=\"p1\">&lt;a name=\"cbrtf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  cbrtf Function","linkify":"<a name=\"cbrtf_function\"></a>  cbrtf Function","source":"<a name=\"cbrtf_function\"></a>  cbrtf Function"},{"content":"Computes the real cube root of the argument","pos":[10030,10073]},{"pos":[10142,10152],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[10164,10184]},{"pos":[10194,10206],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the real cube root of the argument","pos":[10210,10252]},{"pos":[10262,10305],"content":"<bpt id=\"p1\">&lt;a name=\"ceil_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ceil Function","linkify":"<a name=\"ceil_function\"></a>  ceil Function","source":"<a name=\"ceil_function\"></a>  ceil Function"},{"content":"Calculates the ceiling of the argument","pos":[10309,10347]},{"pos":[10463,10473],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[10485,10505]},{"pos":[10515,10527],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the ceiling of the argument","pos":[10531,10566]},{"pos":[10576,10621],"content":"<bpt id=\"p1\">&lt;a name=\"ceilf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ceilf Function","linkify":"<a name=\"ceilf_function\"></a>  ceilf Function","source":"<a name=\"ceilf_function\"></a>  ceilf Function"},{"content":"Calculates the ceiling of the argument","pos":[10625,10663]},{"pos":[10732,10742],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[10754,10774]},{"pos":[10784,10796],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the ceiling of the argument","pos":[10800,10835]},{"pos":[10845,10896],"content":"<bpt id=\"p1\">&lt;a name=\"copysign_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  copysign Function","linkify":"<a name=\"copysign_function\"></a>  copysign Function","source":"<a name=\"copysign_function\"></a>  copysign Function"},{"content":"Produces a value with the magnitude of _X and the sign of _Y","pos":[10900,10960]},{"pos":[11127,11137],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[11149,11169]},{"content":"Floating-point value","pos":[11184,11204]},{"pos":[11214,11226],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a value with the magnitude of _X and the sign of _Y","pos":[11230,11289]},{"pos":[11299,11352],"content":"<bpt id=\"p1\">&lt;a name=\"copysignf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  copysignf Function","linkify":"<a name=\"copysignf_function\"></a>  copysignf Function","source":"<a name=\"copysignf_function\"></a>  copysignf Function"},{"content":"Produces a value with the magnitude of _X and the sign of _Y","pos":[11356,11416]},{"pos":[11510,11520],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[11532,11552]},{"content":"Floating-point value","pos":[11567,11587]},{"pos":[11597,11609],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a value with the magnitude of _X and the sign of _Y","pos":[11613,11672]},{"pos":[11682,11723],"content":"<bpt id=\"p1\">&lt;a name=\"cos_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  cos Function","linkify":"<a name=\"cos_function\"></a>  cos Function","source":"<a name=\"cos_function\"></a>  cos Function"},{"content":"Calculates the cosine of the argument","pos":[11727,11764]},{"pos":[11878,11888],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[11900,11920]},{"pos":[11930,11942],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the cosine value of the argument","pos":[11946,11986]},{"pos":[11996,12039],"content":"<bpt id=\"p1\">&lt;a name=\"cosf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  cosf Function","linkify":"<a name=\"cosf_function\"></a>  cosf Function","source":"<a name=\"cosf_function\"></a>  cosf Function"},{"content":"Calculates the cosine of the argument","pos":[12043,12080]},{"pos":[12148,12158],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[12170,12190]},{"pos":[12200,12212],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the cosine value of the argument","pos":[12216,12256]},{"pos":[12266,12309],"content":"<bpt id=\"p1\">&lt;a name=\"cosh_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  cosh Function","linkify":"<a name=\"cosh_function\"></a>  cosh Function","source":"<a name=\"cosh_function\"></a>  cosh Function"},{"content":"Calculates the hyperbolic cosine value of the argument","pos":[12313,12367]},{"pos":[12483,12493],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[12505,12525]},{"pos":[12535,12547],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the hyperbolic cosine value of the argument","pos":[12551,12602]},{"pos":[12612,12657],"content":"<bpt id=\"p1\">&lt;a name=\"coshf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  coshf Function","linkify":"<a name=\"coshf_function\"></a>  coshf Function","source":"<a name=\"coshf_function\"></a>  coshf Function"},{"content":"Calculates the hyperbolic cosine value of the argument","pos":[12661,12715]},{"pos":[12784,12794],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[12806,12826]},{"pos":[12836,12848],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the hyperbolic cosine value of the argument","pos":[12852,12903]},{"pos":[12913,12958],"content":"<bpt id=\"p1\">&lt;a name=\"cospi_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  cospi Function","linkify":"<a name=\"cospi_function\"></a>  cospi Function","source":"<a name=\"cospi_function\"></a>  cospi Function"},{"content":"Calculates the cosine value of pi * _X","pos":[12962,13000]},{"pos":[13118,13128],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[13140,13160]},{"pos":[13170,13182],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the cosine value of pi * _X","pos":[13186,13221]},{"pos":[13231,13278],"content":"<bpt id=\"p1\">&lt;a name=\"cospif_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  cospif Function","linkify":"<a name=\"cospif_function\"></a>  cospif Function","source":"<a name=\"cospif_function\"></a>  cospif Function"},{"content":"Calculates the cosine value of pi * _X","pos":[13282,13320]},{"pos":[13390,13400],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[13412,13432]},{"pos":[13442,13454],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the cosine value of pi * _X","pos":[13458,13493]},{"pos":[13503,13544],"content":"<bpt id=\"p1\">&lt;a name=\"erf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  erf Function","linkify":"<a name=\"erf_function\"></a>  erf Function","source":"<a name=\"erf_function\"></a>  erf Function"},{"content":"Computes the error function of _X","pos":[13548,13581]},{"pos":[13695,13705],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[13717,13737]},{"pos":[13747,13759],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the error function of _X","pos":[13763,13795]},{"pos":[13805,13848],"content":"<bpt id=\"p1\">&lt;a name=\"erfc_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  erfc Function","linkify":"<a name=\"erfc_function\"></a>  erfc Function","source":"<a name=\"erfc_function\"></a>  erfc Function"},{"content":"Computes the complementary error function of _X","pos":[13852,13899]},{"pos":[14015,14025],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[14037,14057]},{"pos":[14067,14079],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the complementary error function of _X","pos":[14083,14129]},{"pos":[14139,14184],"content":"<bpt id=\"p1\">&lt;a name=\"erfcf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  erfcf Function","linkify":"<a name=\"erfcf_function\"></a>  erfcf Function","source":"<a name=\"erfcf_function\"></a>  erfcf Function"},{"content":"Computes the complementary error function of _X","pos":[14188,14235]},{"pos":[14304,14314],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[14326,14346]},{"pos":[14356,14368],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the complementary error function of _X","pos":[14372,14418]},{"pos":[14428,14477],"content":"<bpt id=\"p1\">&lt;a name=\"erfcinv_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  erfcinv Function","linkify":"<a name=\"erfcinv_function\"></a>  erfcinv Function","source":"<a name=\"erfcinv_function\"></a>  erfcinv Function"},{"content":"Computes the inverse complementary error function of _X","pos":[14481,14536]},{"pos":[14658,14668],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[14680,14700]},{"pos":[14710,14722],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the inverse complementary error function of _X","pos":[14726,14780]},{"pos":[14790,14841],"content":"<bpt id=\"p1\">&lt;a name=\"erfcinvf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  erfcinvf Function","linkify":"<a name=\"erfcinvf_function\"></a>  erfcinvf Function","source":"<a name=\"erfcinvf_function\"></a>  erfcinvf Function"},{"content":"Computes the inverse complementary error function of _X","pos":[14845,14900]},{"pos":[14972,14982],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[14994,15014]},{"pos":[15024,15036],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the inverse complementary error function of _X","pos":[15040,15094]},{"pos":[15104,15147],"content":"<bpt id=\"p1\">&lt;a name=\"erff_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  erff Function","linkify":"<a name=\"erff_function\"></a>  erff Function","source":"<a name=\"erff_function\"></a>  erff Function"},{"content":"Computes the error function of _X","pos":[15151,15184]},{"pos":[15252,15262],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[15274,15294]},{"pos":[15304,15316],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the error function of _X","pos":[15320,15352]},{"pos":[15362,15409],"content":"<bpt id=\"p1\">&lt;a name=\"erfinv_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  erfinv Function","linkify":"<a name=\"erfinv_function\"></a>  erfinv Function","source":"<a name=\"erfinv_function\"></a>  erfinv Function"},{"content":"Computes the inverse error function of _X","pos":[15413,15454]},{"pos":[15574,15584],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[15596,15616]},{"pos":[15626,15638],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the inverse error function of _X","pos":[15642,15682]},{"pos":[15692,15741],"content":"<bpt id=\"p1\">&lt;a name=\"erfinvf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  erfinvf Function","linkify":"<a name=\"erfinvf_function\"></a>  erfinvf Function","source":"<a name=\"erfinvf_function\"></a>  erfinvf Function"},{"content":"Computes the inverse error function of _X","pos":[15745,15786]},{"pos":[15857,15867],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[15879,15899]},{"pos":[15909,15921],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the inverse error function of _X","pos":[15925,15965]},{"pos":[15975,16020],"content":"<bpt id=\"p1\">&lt;a name=\"exp10_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  exp10 Function","linkify":"<a name=\"exp10_function\"></a>  exp10 Function","source":"<a name=\"exp10_function\"></a>  exp10 Function"},{"content":"Calculates the base-10 exponential of the argument","pos":[16024,16074]},{"pos":[16192,16202],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[16214,16234]},{"pos":[16244,16256],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the base-10 exponential of the argument","pos":[16260,16307]},{"pos":[16317,16364],"content":"<bpt id=\"p1\">&lt;a name=\"exp10f_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  exp10f Function","linkify":"<a name=\"exp10f_function\"></a>  exp10f Function","source":"<a name=\"exp10f_function\"></a>  exp10f Function"},{"content":"Calculates the base-10 exponential of the argument","pos":[16368,16418]},{"pos":[16488,16498],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[16510,16530]},{"pos":[16540,16552],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the base-10 exponential of the argument","pos":[16556,16603]},{"pos":[16613,16658],"content":"<bpt id=\"p1\">&lt;a name=\"expm1_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  expm1 Function","linkify":"<a name=\"expm1_function\"></a>  expm1 Function","source":"<a name=\"expm1_function\"></a>  expm1 Function"},{"content":"Calculates the base-e exponential of the argument, minus 1","pos":[16662,16720]},{"pos":[16850,16860],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The exponential term <bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept> of the mathematical expression <ph id=\"ph1\">`e`</ph><bpt id=\"p2\">&lt;sup&gt;</bpt>n<ept id=\"p2\">&lt;/sup&gt;</ept>, where <ph id=\"ph2\">`e`</ph> is the base of the natural logarithm.","pos":[16878,16998],"source":" The exponential term *n* of the mathematical expression `e`<sup>n</sup>, where `e` is the base of the natural logarithm."},{"pos":[17008,17020],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the base-e exponential of the argument, minus 1","pos":[17024,17079]},{"pos":[17089,17136],"content":"<bpt id=\"p1\">&lt;a name=\"expm1f_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  expm1f Function","linkify":"<a name=\"expm1f_function\"></a>  expm1f Function","source":"<a name=\"expm1f_function\"></a>  expm1f Function"},{"content":"Calculates the base-e exponential of the argument, minus 1","pos":[17140,17198]},{"pos":[17274,17284],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The exponential term <bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept> of the mathematical expression <ph id=\"ph1\">`e`</ph><bpt id=\"p2\">&lt;sup&gt;</bpt>n<ept id=\"p2\">&lt;/sup&gt;</ept>, where <ph id=\"ph2\">`e`</ph> is the base of the natural logarithm.","pos":[17302,17422],"source":" The exponential term *n* of the mathematical expression `e`<sup>n</sup>, where `e` is the base of the natural logarithm."},{"pos":[17432,17444],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the base-e exponential of the argument, minus 1","pos":[17448,17503]},{"pos":[17513,17554],"content":"<bpt id=\"p1\">&lt;a name=\"exp_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  exp Function","linkify":"<a name=\"exp_function\"></a>  exp Function","source":"<a name=\"exp_function\"></a>  exp Function"},{"content":"Calculates the base-e exponential of the argument","pos":[17558,17607]},{"pos":[17721,17731],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[17743,17763]},{"pos":[17773,17785],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the base-e exponential of the argument","pos":[17789,17835]},{"pos":[17845,17888],"content":"<bpt id=\"p1\">&lt;a name=\"expf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  expf Function","linkify":"<a name=\"expf_function\"></a>  expf Function","source":"<a name=\"expf_function\"></a>  expf Function"},{"content":"Calculates the base-e exponential of the argument","pos":[17892,17941]},{"pos":[18009,18019],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[18031,18051]},{"pos":[18061,18073],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the base-e exponential of the argument","pos":[18077,18123]},{"pos":[18133,18176],"content":"<bpt id=\"p1\">&lt;a name=\"exp2_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  exp2 Function","linkify":"<a name=\"exp2_function\"></a>  exp2 Function","source":"<a name=\"exp2_function\"></a>  exp2 Function"},{"content":"Calculates the base-2 exponential of the argument","pos":[18180,18229]},{"pos":[18345,18355],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[18367,18387]},{"pos":[18397,18409],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the base-2 exponential of the argument","pos":[18413,18459]},{"pos":[18469,18514],"content":"<bpt id=\"p1\">&lt;a name=\"exp2f_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  exp2f Function","linkify":"<a name=\"exp2f_function\"></a>  exp2f Function","source":"<a name=\"exp2f_function\"></a>  exp2f Function"},{"content":"Calculates the base-2 exponential of the argument","pos":[18518,18567]},{"pos":[18636,18646],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[18658,18678]},{"pos":[18688,18700],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the base-2 exponential of the argument","pos":[18704,18750]},{"pos":[18760,18803],"content":"<bpt id=\"p1\">&lt;a name=\"fabs_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  fabs Function","linkify":"<a name=\"fabs_function\"></a>  fabs Function","source":"<a name=\"fabs_function\"></a>  fabs Function"},{"content":"Returns the absolute value of the argument","pos":[18807,18849]},{"pos":[18965,18975],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[18987,19007]},{"pos":[19017,19029],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the absolute value of the argument","pos":[19033,19075]},{"pos":[19085,19130],"content":"<bpt id=\"p1\">&lt;a name=\"fabsf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  fabsf Function","linkify":"<a name=\"fabsf_function\"></a>  fabsf Function","source":"<a name=\"fabsf_function\"></a>  fabsf Function"},{"content":"Returns the absolute value of the argument","pos":[19134,19176]},{"pos":[19245,19255],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[19267,19287]},{"pos":[19297,19309],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the absolute value of the argument","pos":[19313,19355]},{"pos":[19362,19404],"content":"<bpt id=\"p1\">&lt;a name=\"fdim_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> fdim Function","linkify":"<a name=\"fdim_function\"></a> fdim Function","source":"<a name=\"fdim_function\"></a> fdim Function"},{"content":"Computes the positive difference between the arguments.","pos":[19407,19462]},{"pos":[19603,19613],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[19614,19665],"content":"<ph id=\"ph1\">`_X`</ph> Floating-point value <ph id=\"ph2\">`_Y`</ph> Floating-point value","source":"`_X`\nFloating-point value\n`_Y`\nFloating-point value"},{"pos":[19672,19684],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The difference between _X and _Y if _X is greater than _Y; otherwise, +0.","pos":[19685,19758]},{"pos":[19764,19808],"content":"<bpt id=\"p1\">&lt;a name=\"fdimf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> fdimf Function","linkify":"<a name=\"fdimf_function\"></a> fdimf Function","source":"<a name=\"fdimf_function\"></a> fdimf Function"},{"content":"Computes the positive difference between the arguments.","pos":[19809,19864]},{"pos":[19939,19949],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[19950,20001],"content":"<ph id=\"ph1\">`_X`</ph> Floating-point value <ph id=\"ph2\">`_Y`</ph> Floating-point value","source":"`_X`\nFloating-point value\n`_Y`\nFloating-point value"},{"pos":[20007,20019],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The difference between _X and _Y if _X is greater than _Y; otherwise, +0.","pos":[20020,20093]},{"pos":[20102,20147],"content":"<bpt id=\"p1\">&lt;a name=\"floor_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  floor Function","linkify":"<a name=\"floor_function\"></a>  floor Function","source":"<a name=\"floor_function\"></a>  floor Function"},{"content":"Calculates the floor of the argument","pos":[20151,20187]},{"pos":[20305,20315],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[20327,20347]},{"pos":[20357,20369],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the floor of the argument","pos":[20373,20406]},{"pos":[20416,20463],"content":"<bpt id=\"p1\">&lt;a name=\"floorf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  floorf Function","linkify":"<a name=\"floorf_function\"></a>  floorf Function","source":"<a name=\"floorf_function\"></a>  floorf Function"},{"content":"Calculates the floor of the argument","pos":[20467,20503]},{"pos":[20573,20583],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[20595,20615]},{"pos":[20625,20637],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the floor of the argument","pos":[20641,20674]},{"pos":[20681,20717],"content":"<ph id=\"ph1\">&lt;a name=\"fma_function\"&gt;</ph> fma Function","linkify":"<a name=\"fma_function\"> fma Function","source":"<a name=\"fma_function\"> fma Function"},{"content":"Computes the product of the first and second specified arguments, then adds the third specified argument to the result; the entire computation is performed as a single operation.","pos":[20720,20898]},{"pos":[21062,21072],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<ph id=\"ph1\">`_X`</ph> The first floating-point argument.","pos":[21073,21112],"source":"`_X`\nThe first floating-point argument."},{"content":"<ph id=\"ph1\">`_Y`</ph> The second floating-point argument.","pos":[21113,21153],"source":"`_Y`\nThe second floating-point argument."},{"content":"<ph id=\"ph1\">`_Z`</ph> The third floating-point argument.","pos":[21154,21193],"source":"`_Z`\nThe third floating-point argument."},{"pos":[21199,21211],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The result of the expression (_X * _Y) + _Z.","pos":[21212,21256]},{"content":"The entire computation is performed as a single operation; that is, the sub-expressions are calculated to infinite precision, and only the final result is rounded.","pos":[21257,21420]},{"pos":[21426,21468],"content":"<bpt id=\"p1\">&lt;a name=\"fmaf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> fmaf Function","linkify":"<a name=\"fmaf_function\"></a> fmaf Function","source":"<a name=\"fmaf_function\"></a> fmaf Function"},{"content":"Computes the product of the first and second specified arguments, then adds the third specified argument to the result; the entire computation is performed as a single operation.","pos":[21471,21649]},{"pos":[21738,21748],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<ph id=\"ph1\">`_X`</ph> The first floating-point argument.","pos":[21749,21788],"source":"`_X`\nThe first floating-point argument."},{"content":"<ph id=\"ph1\">`_Y`</ph> The second floating-point argument.","pos":[21789,21829],"source":"`_Y`\nThe second floating-point argument."},{"content":"<ph id=\"ph1\">`_Z`</ph> The third floating-point argument.","pos":[21830,21869],"source":"`_Z`\nThe third floating-point argument."},{"pos":[21875,21887],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The result of the expression (_X * _Y) + _Z.","pos":[21888,21932]},{"content":"The entire computation is performed as a single operation; that is, the sub-expressions are calculated to infinite precision, and only the final result is rounded.","pos":[21933,22096]},{"pos":[22104,22147],"content":"<bpt id=\"p1\">&lt;a name=\"fmax_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  fmax Function","linkify":"<a name=\"fmax_function\"></a>  fmax Function","source":"<a name=\"fmax_function\"></a>  fmax Function"},{"content":"Determine the maximum numeric value of the arguments","pos":[22151,22203]},{"pos":[22362,22372],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[22384,22404]},{"content":"Floating-point value","pos":[22419,22439]},{"pos":[22449,22461],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Return the maximum numeric value of the arguments","pos":[22465,22514]},{"pos":[22524,22569],"content":"<bpt id=\"p1\">&lt;a name=\"fmaxf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  fmaxf Function","linkify":"<a name=\"fmaxf_function\"></a>  fmaxf Function","source":"<a name=\"fmaxf_function\"></a>  fmaxf Function"},{"content":"Determine the maximum numeric value of the arguments","pos":[22573,22625]},{"pos":[22715,22725],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[22737,22757]},{"content":"Floating-point value","pos":[22772,22792]},{"pos":[22802,22814],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Return the maximum numeric value of the arguments","pos":[22818,22867]},{"pos":[22877,22920],"content":"<bpt id=\"p1\">&lt;a name=\"fmin_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  fmin Function","linkify":"<a name=\"fmin_function\"></a>  fmin Function","source":"<a name=\"fmin_function\"></a>  fmin Function"},{"content":"Determine the minimum numeric value of the arguments","pos":[22924,22976]},{"pos":[23135,23145],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[23157,23177]},{"content":"Floating-point value","pos":[23192,23212]},{"pos":[23222,23234],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Return the minimum numeric value of the arguments","pos":[23238,23287]},{"pos":[23297,23342],"content":"<bpt id=\"p1\">&lt;a name=\"fminf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  fminf Function","linkify":"<a name=\"fminf_function\"></a>  fminf Function","source":"<a name=\"fminf_function\"></a>  fminf Function"},{"content":"Determine the minimum numeric value of the arguments","pos":[23346,23398]},{"pos":[23488,23498],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[23510,23530]},{"content":"Floating-point value","pos":[23545,23565]},{"pos":[23575,23587],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Return the minimum numeric value of the arguments","pos":[23591,23640]},{"pos":[23650,23703],"content":"<bpt id=\"p1\">&lt;a name=\"fmod_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  fmod Function (C++ AMP)","linkify":"<a name=\"fmod_function\"></a>  fmod Function (C++ AMP)","source":"<a name=\"fmod_function\"></a>  fmod Function (C++ AMP)"},{"content":"Computes the remainder of the first specified argument divided by the second specified argument.","pos":[23707,23803]},{"pos":[23962,23972],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The first floating-point argument.","pos":[23984,24018]},{"content":"The second floating-point argument.","pos":[24033,24068]},{"pos":[24078,24090],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[24094,24277],"content":"The remainder of <ph id=\"ph1\">`_X`</ph> divided by <ph id=\"ph2\">`_Y`</ph>; that is, the value of <ph id=\"ph3\">`_X`</ph><ph id=\"ph4\"> - </ph><ph id=\"ph5\">`_Y`</ph><bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept>, where <bpt id=\"p2\">*</bpt>n<ept id=\"p2\">*</ept> is a whole integer such that the magnitude of <ph id=\"ph6\">`_X`</ph><ph id=\"ph7\"> - </ph><ph id=\"ph8\">`_Y`</ph><bpt id=\"p3\">*</bpt>n<ept id=\"p3\">*</ept> is less than the magnitude of <ph id=\"ph9\">`_Y`</ph>.","source":"The remainder of `_X` divided by `_Y`; that is, the value of `_X` - `_Y`*n*, where *n* is a whole integer such that the magnitude of `_X` - `_Y`*n* is less than the magnitude of `_Y`."},{"pos":[24287,24332],"content":"<bpt id=\"p1\">&lt;a name=\"fmodf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  fmodf Function","linkify":"<a name=\"fmodf_function\"></a>  fmodf Function","source":"<a name=\"fmodf_function\"></a>  fmodf Function"},{"content":"Computes the remainder of the first specified argument divided by the second specified argument.","pos":[24336,24432]},{"pos":[24522,24532],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The first floating-point argument.","pos":[24544,24578]},{"content":"The second floating-point argument.","pos":[24593,24628]},{"pos":[24638,24650],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[24654,24837],"content":"The remainder of <ph id=\"ph1\">`_X`</ph> divided by <ph id=\"ph2\">`_Y`</ph>; that is, the value of <ph id=\"ph3\">`_X`</ph><ph id=\"ph4\"> - </ph><ph id=\"ph5\">`_Y`</ph><bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept>, where <bpt id=\"p2\">*</bpt>n<ept id=\"p2\">*</ept> is a whole integer such that the magnitude of <ph id=\"ph6\">`_X`</ph><ph id=\"ph7\"> - </ph><ph id=\"ph8\">`_Y`</ph><bpt id=\"p3\">*</bpt>n<ept id=\"p3\">*</ept> is less than the magnitude of <ph id=\"ph9\">`_Y`</ph>.","source":"The remainder of `_X` divided by `_Y`; that is, the value of `_X` - `_Y`*n*, where *n* is a whole integer such that the magnitude of `_X` - `_Y`*n* is less than the magnitude of `_Y`."},{"pos":[24847,24902],"content":"<bpt id=\"p1\">&lt;a name=\"fpclassify_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  fpclassify Function","linkify":"<a name=\"fpclassify_function\"></a>  fpclassify Function","source":"<a name=\"fpclassify_function\"></a>  fpclassify Function"},{"content":"Classifies the argument value as NaN, infinite, normal, subnormal, zero","pos":[24906,24977]},{"pos":[25100,25110],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[25122,25142]},{"pos":[25152,25164],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the value of the number classification macro appropriate to the value of the argument.","pos":[25168,25262]},{"pos":[25272,25317],"content":"<bpt id=\"p1\">&lt;a name=\"frexp_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  frexp Function","linkify":"<a name=\"frexp_function\"></a>  frexp Function","source":"<a name=\"frexp_function\"></a>  frexp Function"},{"content":"Gets the mantissa and exponent of _X","pos":[25321,25357]},{"pos":[25531,25541],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[25553,25573]},{"content":"Returns the integer exponent of _X in floating-point value","pos":[25590,25648]},{"pos":[25658,25670],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the mantissa _X","pos":[25674,25697]},{"pos":[25707,25754],"content":"<bpt id=\"p1\">&lt;a name=\"frexpf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  frexpf Function","linkify":"<a name=\"frexpf_function\"></a>  frexpf Function","source":"<a name=\"frexpf_function\"></a>  frexpf Function"},{"content":"Gets the mantissa and exponent of _X","pos":[25758,25794]},{"pos":[25892,25902],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[25914,25934]},{"content":"Returns the integer exponent of _X in floating-point value","pos":[25951,26009]},{"pos":[26019,26031],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the mantissa _X","pos":[26035,26058]},{"pos":[26068,26113],"content":"<bpt id=\"p1\">&lt;a name=\"hypot_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hypot Function","linkify":"<a name=\"hypot_function\"></a>  hypot Function","source":"<a name=\"hypot_function\"></a>  hypot Function"},{"content":"Computes the square root of the sum of the squares of _X and _Y","pos":[26117,26180]},{"pos":[26341,26351],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[26363,26383]},{"content":"Floating-point value","pos":[26398,26418]},{"pos":[26428,26440],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the square root of the sum of the squares of _X and _Y","pos":[26444,26506]},{"pos":[26516,26563],"content":"<bpt id=\"p1\">&lt;a name=\"hypotf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hypotf Function","linkify":"<a name=\"hypotf_function\"></a>  hypotf Function","source":"<a name=\"hypotf_function\"></a>  hypotf Function"},{"content":"Computes the square root of the sum of the squares of _X and _Y","pos":[26567,26630]},{"pos":[26721,26731],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[26743,26763]},{"content":"Floating-point value","pos":[26778,26798]},{"pos":[26808,26820],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the square root of the sum of the squares of _X and _Y","pos":[26824,26886]},{"pos":[26896,26941],"content":"<bpt id=\"p1\">&lt;a name=\"ilogb_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ilogb Function","linkify":"<a name=\"ilogb_function\"></a>  ilogb Function","source":"<a name=\"ilogb_function\"></a>  ilogb Function"},{"content":"Extract the exponent of _X as a signed int value","pos":[26945,26993]},{"pos":[27106,27116],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[27128,27148]},{"pos":[27158,27170],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the exponent of _X as a signed int value","pos":[27174,27222]},{"pos":[27232,27279],"content":"<bpt id=\"p1\">&lt;a name=\"ilogbf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ilogbf Function","linkify":"<a name=\"ilogbf_function\"></a>  ilogbf Function","source":"<a name=\"ilogbf_function\"></a>  ilogbf Function"},{"content":"Extract the exponent of _X as a signed int value","pos":[27283,27331]},{"pos":[27399,27409],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[27421,27441]},{"pos":[27451,27463],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the exponent of _X as a signed int value","pos":[27467,27515]},{"pos":[27525,27576],"content":"<bpt id=\"p1\">&lt;a name=\"isfinite_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  isfinite Function","linkify":"<a name=\"isfinite_function\"></a>  isfinite Function","source":"<a name=\"isfinite_function\"></a>  isfinite Function"},{"content":"Determines whether the argument has a finite value","pos":[27580,27630]},{"pos":[27749,27759],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[27771,27791]},{"pos":[27801,27813],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a nonzero value if and only if the argument has a finite value","pos":[27817,27887]},{"pos":[27897,27942],"content":"<bpt id=\"p1\">&lt;a name=\"isinf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  isinf Function","linkify":"<a name=\"isinf_function\"></a>  isinf Function","source":"<a name=\"isinf_function\"></a>  isinf Function"},{"content":"Determines whether the argument is an infinity","pos":[27946,27992]},{"pos":[28105,28115],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[28127,28147]},{"pos":[28157,28169],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a nonzero value if and only if the argument has an infinite value","pos":[28173,28246]},{"pos":[28256,28301],"content":"<bpt id=\"p1\">&lt;a name=\"isnan_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  isnan Function","linkify":"<a name=\"isnan_function\"></a>  isnan Function","source":"<a name=\"isnan_function\"></a>  isnan Function"},{"content":"Determines whether the argument is a NaN","pos":[28305,28345]},{"pos":[28458,28468],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[28480,28500]},{"pos":[28510,28522],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a nonzero value if and only if the argument has a NaN value","pos":[28526,28593]},{"pos":[28603,28654],"content":"<bpt id=\"p1\">&lt;a name=\"isnormal_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  isnormal Function","linkify":"<a name=\"isnormal_function\"></a>  isnormal Function","source":"<a name=\"isnormal_function\"></a>  isnormal Function"},{"content":"Determines whether the argument is a normal","pos":[28658,28701]},{"pos":[28820,28830],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[28842,28862]},{"pos":[28872,28884],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a nonzero value if and only if the argument has a normal value","pos":[28888,28958]},{"pos":[28968,29013],"content":"<bpt id=\"p1\">&lt;a name=\"ldexp_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ldexp Function","linkify":"<a name=\"ldexp_function\"></a>  ldexp Function","source":"<a name=\"ldexp_function\"></a>  ldexp Function"},{"content":"Computes a real number from the specified mantissa and exponent.","pos":[29017,29081]},{"pos":[29244,29254],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value, mantissa","pos":[29266,29296]},{"content":"Integer value, exponent","pos":[29313,29336]},{"pos":[29346,29358],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns _X * 2^_Exp","pos":[29362,29381]},{"pos":[29391,29438],"content":"<bpt id=\"p1\">&lt;a name=\"ldexpf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ldexpf Function","linkify":"<a name=\"ldexpf_function\"></a>  ldexpf Function","source":"<a name=\"ldexpf_function\"></a>  ldexpf Function"},{"content":"Computes a real number from the specified mantissa and exponent.","pos":[29442,29506]},{"pos":[29597,29607],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value, mantissa","pos":[29619,29649]},{"content":"Integer value, exponent","pos":[29666,29689]},{"pos":[29699,29711],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns _X * 2^_Exp","pos":[29715,29734]},{"pos":[29744,29791],"content":"<bpt id=\"p1\">&lt;a name=\"lgamma_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  lgamma Function","linkify":"<a name=\"lgamma_function\"></a>  lgamma Function","source":"<a name=\"lgamma_function\"></a>  lgamma Function"},{"content":"Computes the natural logarithm of the absolute value of gamma of the argument","pos":[29795,29872]},{"pos":[30050,30060],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[30072,30092]},{"content":"Returns the sign","pos":[30110,30126]},{"pos":[30136,30148],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the natural logarithm of the absolute value of gamma of the argument","pos":[30152,30228]},{"pos":[30238,30287],"content":"<bpt id=\"p1\">&lt;a name=\"lgammaf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  lgammaf Function","linkify":"<a name=\"lgammaf_function\"></a>  lgammaf Function","source":"<a name=\"lgammaf_function\"></a>  lgammaf Function"},{"content":"Computes the natural logarithm of the absolute value of gamma of the argument","pos":[30291,30368]},{"pos":[30468,30478],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[30490,30510]},{"content":"Returns the sign","pos":[30528,30544]},{"pos":[30554,30566],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the natural logarithm of the absolute value of gamma of the argument","pos":[30570,30646]},{"pos":[30656,30697],"content":"<bpt id=\"p1\">&lt;a name=\"log_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  log Function","linkify":"<a name=\"log_function\"></a>  log Function","source":"<a name=\"log_function\"></a>  log Function"},{"content":"Calculates the base-e logarithm of the argument","pos":[30701,30748]},{"pos":[30862,30872],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[30884,30904]},{"pos":[30914,30926],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the base-e logarithm of the argument","pos":[30930,30974]},{"pos":[30984,31029],"content":"<bpt id=\"p1\">&lt;a name=\"log10_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  log10 Function","linkify":"<a name=\"log10_function\"></a>  log10 Function","source":"<a name=\"log10_function\"></a>  log10 Function"},{"content":"Calculates the base-10 logarithm of the argument","pos":[31033,31081]},{"pos":[31199,31209],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[31221,31241]},{"pos":[31251,31263],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the base-10 logarithm of the argument","pos":[31267,31312]},{"pos":[31322,31369],"content":"<bpt id=\"p1\">&lt;a name=\"log10f_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  log10f Function","linkify":"<a name=\"log10f_function\"></a>  log10f Function","source":"<a name=\"log10f_function\"></a>  log10f Function"},{"content":"Calculates the base-10 logarithm of the argument","pos":[31373,31421]},{"pos":[31491,31501],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[31513,31533]},{"pos":[31543,31555],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the base-10 logarithm of the argument","pos":[31559,31604]},{"pos":[31614,31659],"content":"<bpt id=\"p1\">&lt;a name=\"log1p_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  log1p Function","linkify":"<a name=\"log1p_function\"></a>  log1p Function","source":"<a name=\"log1p_function\"></a>  log1p Function"},{"content":"Calculates the base-e logarithm of 1 plus the argument","pos":[31663,31717]},{"pos":[31835,31845],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[31857,31877]},{"pos":[31887,31899],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the base-e logarithm of 1 plus the argument","pos":[31903,31954]},{"pos":[31964,32011],"content":"<bpt id=\"p1\">&lt;a name=\"log1pf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  log1pf Function","linkify":"<a name=\"log1pf_function\"></a>  log1pf Function","source":"<a name=\"log1pf_function\"></a>  log1pf Function"},{"content":"Calculates the base-e logarithm of 1 plus the argument","pos":[32015,32069]},{"pos":[32139,32149],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[32161,32181]},{"pos":[32191,32203],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the base-e logarithm of 1 plus the argument","pos":[32207,32258]},{"pos":[32268,32311],"content":"<bpt id=\"p1\">&lt;a name=\"log2_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  log2 Function","linkify":"<a name=\"log2_function\"></a>  log2 Function","source":"<a name=\"log2_function\"></a>  log2 Function"},{"content":"Calculates the base-2 logarithm of the argument","pos":[32315,32362]},{"pos":[32478,32488],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[32500,32520]},{"pos":[32530,32542],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the base-10 logarithm of the argument","pos":[32546,32591]},{"pos":[32601,32646],"content":"<bpt id=\"p1\">&lt;a name=\"log2f_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  log2f Function","linkify":"<a name=\"log2f_function\"></a>  log2f Function","source":"<a name=\"log2f_function\"></a>  log2f Function"},{"content":"Calculates the base-2 logarithm of the argument","pos":[32650,32697]},{"pos":[32766,32776],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[32788,32808]},{"pos":[32818,32830],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the base-10 logarithm of the argument","pos":[32834,32879]},{"pos":[32889,32932],"content":"<bpt id=\"p1\">&lt;a name=\"logb_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  logb Function","linkify":"<a name=\"logb_function\"></a>  logb Function","source":"<a name=\"logb_function\"></a>  logb Function"},{"content":"Extracts the exponent of _X, as a signed integer value in floating-point format","pos":[32936,33015]},{"pos":[33131,33141],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[33153,33173]},{"pos":[33183,33195],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the signed exponent of _X","pos":[33199,33232]},{"pos":[33242,33287],"content":"<bpt id=\"p1\">&lt;a name=\"logbf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  logbf Function","linkify":"<a name=\"logbf_function\"></a>  logbf Function","source":"<a name=\"logbf_function\"></a>  logbf Function"},{"content":"Extracts the exponent of _X, as a signed integer value in floating-point format","pos":[33291,33370]},{"pos":[33439,33449],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[33461,33481]},{"pos":[33491,33503],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the signed exponent of _X","pos":[33507,33540]},{"pos":[33550,33593],"content":"<bpt id=\"p1\">&lt;a name=\"logf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  logf Function","linkify":"<a name=\"logf_function\"></a>  logf Function","source":"<a name=\"logf_function\"></a>  logf Function"},{"content":"Calculates the base-e logarithm of the argument","pos":[33597,33644]},{"pos":[33712,33722],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[33734,33754]},{"pos":[33764,33776],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the base-e logarithm of the argument","pos":[33780,33824]},{"pos":[33834,33877],"content":"<bpt id=\"p1\">&lt;a name=\"modf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  modf Function","linkify":"<a name=\"modf_function\"></a>  modf Function","source":"<a name=\"modf_function\"></a>  modf Function"},{"content":"Splits the specified argument into fractional and integer parts.","pos":[33881,33945]},{"pos":[34124,34134],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[34146,34166]},{"content":"<ph id=\"ph1\">`_Iptr`</ph> (out parameter)","pos":[34173,34196],"source":"`_Iptr` (out parameter)"},{"content":"The integer portion of <ph id=\"ph1\">`_X`</ph>, as a floating-point value.","pos":[34200,34255],"source":" The integer portion of `_X`, as a floating-point value."},{"pos":[34265,34277],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34281,34319],"content":"The signed fractional portion of <ph id=\"ph1\">`_X`</ph>.","source":"The signed fractional portion of `_X`."},{"pos":[34329,34374],"content":"<bpt id=\"p1\">&lt;a name=\"modff_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  modff Function","linkify":"<a name=\"modff_function\"></a>  modff Function","source":"<a name=\"modff_function\"></a>  modff Function"},{"content":"Splits the specified argument into fractional and integer parts.","pos":[34378,34442]},{"pos":[34542,34552],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[34564,34584]},{"content":"The integer portion of <ph id=\"ph1\">`_X`</ph>, as a floating-point value.","pos":[34602,34657],"source":" The integer portion of `_X`, as a floating-point value."},{"pos":[34667,34679],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34683,34729],"content":"Returns the signed fractional portion of <ph id=\"ph1\">`_X`</ph>.","source":"Returns the signed fractional portion of `_X`."},{"pos":[34739,34780],"content":"<bpt id=\"p1\">&lt;a name=\"nan_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  nan Function","linkify":"<a name=\"nan_function\"></a>  nan Function","source":"<a name=\"nan_function\"></a>  nan Function"},{"content":"Returns a quiet NaN","pos":[34784,34803]},{"pos":[34869,34879],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Integer value","pos":[34891,34904]},{"pos":[34914,34926],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a quiet NaN, if available, with the content indicated in _X","pos":[34930,34997]},{"pos":[35007,35050],"content":"<bpt id=\"p1\">&lt;a name=\"nanf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  nanf Function","linkify":"<a name=\"nanf_function\"></a>  nanf Function","source":"<a name=\"nanf_function\"></a>  nanf Function"},{"content":"Returns a quiet NaN","pos":[35054,35073]},{"pos":[35139,35149],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Integer value","pos":[35161,35174]},{"pos":[35184,35196],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a quiet NaN, if available, with the content indicated in _X","pos":[35200,35267]},{"pos":[35277,35330],"content":"<bpt id=\"p1\">&lt;a name=\"nearbyint_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  nearbyint Function","linkify":"<a name=\"nearbyint_function\"></a>  nearbyint Function","source":"<a name=\"nearbyint_function\"></a>  nearbyint Function"},{"content":"Rounds the argument to an integer value in floating-point format, using the current rounding direction.","pos":[35334,35437]},{"pos":[35563,35573],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[35585,35605]},{"pos":[35615,35627],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the rounded integer value.","pos":[35631,35665]},{"pos":[35675,35730],"content":"<bpt id=\"p1\">&lt;a name=\"nearbyintf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  nearbyintf Function","linkify":"<a name=\"nearbyintf_function\"></a>  nearbyintf Function","source":"<a name=\"nearbyintf_function\"></a>  nearbyintf Function"},{"content":"Rounds the argument to an integer value in floating-point format, using the current rounding direction.","pos":[35734,35837]},{"pos":[35911,35921],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[35933,35953]},{"pos":[35963,35975],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the rounded integer value.","pos":[35979,36013]},{"pos":[36023,36076],"content":"<bpt id=\"p1\">&lt;a name=\"nextafter_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  nextafter Function","linkify":"<a name=\"nextafter_function\"></a>  nextafter Function","source":"<a name=\"nextafter_function\"></a>  nextafter Function"},{"content":"Determine the next representable value, in the type of the function, after _X in the direction of _Y","pos":[36080,36180]},{"pos":[36349,36359],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[36371,36391]},{"content":"Floating-point value","pos":[36406,36426]},{"pos":[36436,36448],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the next representable value, in the type of the function, after _X in the direction of _Y","pos":[36452,36550]},{"pos":[36560,36615],"content":"<bpt id=\"p1\">&lt;a name=\"nextafterf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  nextafterf Function","linkify":"<a name=\"nextafterf_function\"></a>  nextafterf Function","source":"<a name=\"nextafterf_function\"></a>  nextafterf Function"},{"content":"Determine the next representable value, in the type of the function, after _X in the direction of _Y","pos":[36619,36719]},{"pos":[36814,36824],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[36836,36856]},{"content":"Floating-point value","pos":[36871,36891]},{"pos":[36901,36913],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the next representable value, in the type of the function, after _X in the direction of _Y","pos":[36917,37015]},{"pos":[37025,37066],"content":"<bpt id=\"p1\">&lt;a name=\"phi_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  phi Function","linkify":"<a name=\"phi_function\"></a>  phi Function","source":"<a name=\"phi_function\"></a>  phi Function"},{"content":"Returns the cumulative distribution function of the argument","pos":[37070,37130]},{"pos":[37244,37254],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[37266,37286]},{"pos":[37296,37308],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the cumulative distribution function of the argument","pos":[37312,37372]},{"pos":[37382,37425],"content":"<bpt id=\"p1\">&lt;a name=\"phif_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  phif Function","linkify":"<a name=\"phif_function\"></a>  phif Function","source":"<a name=\"phif_function\"></a>  phif Function"},{"content":"Returns the cumulative distribution function of the argument","pos":[37429,37489]},{"pos":[37557,37567],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[37579,37599]},{"pos":[37609,37621],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the cumulative distribution function of the argument","pos":[37625,37685]},{"pos":[37695,37736],"content":"<bpt id=\"p1\">&lt;a name=\"pow_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  pow Function","linkify":"<a name=\"pow_function\"></a>  pow Function","source":"<a name=\"pow_function\"></a>  pow Function"},{"content":"Calculates _X raised to the power of _Y","pos":[37740,37779]},{"pos":[37936,37946],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value, base","pos":[37958,37984]},{"content":"Floating-point value, exponent","pos":[37999,38029]},{"pos":[38039,38051],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38061,38104],"content":"<bpt id=\"p1\">&lt;a name=\"powf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  powf Function","linkify":"<a name=\"powf_function\"></a>  powf Function","source":"<a name=\"powf_function\"></a>  powf Function"},{"content":"Calculates _X raised to the power of _Y","pos":[38108,38147]},{"pos":[38236,38246],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value, base","pos":[38258,38284]},{"content":"Floating-point value, exponent","pos":[38299,38329]},{"pos":[38339,38351],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38361,38408],"content":"<bpt id=\"p1\">&lt;a name=\"probit_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  probit Function","linkify":"<a name=\"probit_function\"></a>  probit Function","source":"<a name=\"probit_function\"></a>  probit Function"},{"content":"Returns the inverse cumulative distribution function of the argument","pos":[38412,38480]},{"pos":[38600,38610],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[38622,38642]},{"pos":[38652,38664],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the inverse cumulative distribution function of the argument","pos":[38668,38736]},{"pos":[38746,38795],"content":"<bpt id=\"p1\">&lt;a name=\"probitf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  probitf Function","linkify":"<a name=\"probitf_function\"></a>  probitf Function","source":"<a name=\"probitf_function\"></a>  probitf Function"},{"content":"Returns the inverse cumulative distribution function of the argument","pos":[38799,38867]},{"pos":[38938,38948],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[38960,38980]},{"pos":[38990,39002],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the inverse cumulative distribution function of the argument","pos":[39006,39074]},{"pos":[39084,39129],"content":"<bpt id=\"p1\">&lt;a name=\"rcbrt_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  rcbrt Function","linkify":"<a name=\"rcbrt_function\"></a>  rcbrt Function","source":"<a name=\"rcbrt_function\"></a>  rcbrt Function"},{"content":"Returns the reciprocal of the cube root of the argument","pos":[39133,39188]},{"pos":[39306,39316],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[39328,39348]},{"pos":[39358,39370],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the reciprocal of the cube root of the argument","pos":[39374,39429]},{"pos":[39439,39486],"content":"<bpt id=\"p1\">&lt;a name=\"rcbrtf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  rcbrtf Function","linkify":"<a name=\"rcbrtf_function\"></a>  rcbrtf Function","source":"<a name=\"rcbrtf_function\"></a>  rcbrtf Function"},{"content":"Returns the reciprocal of the cube root of the argument","pos":[39490,39545]},{"pos":[39615,39625],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[39637,39657]},{"pos":[39667,39679],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the reciprocal of the cube root of the argument","pos":[39683,39738]},{"pos":[39748,39801],"content":"<bpt id=\"p1\">&lt;a name=\"remainder_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  remainder Function","linkify":"<a name=\"remainder_function\"></a>  remainder Function","source":"<a name=\"remainder_function\"></a>  remainder Function"},{"content":"Computes the remainder: _X REM _Y","pos":[39805,39838]},{"pos":[40007,40017],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[40029,40049]},{"content":"Floating-point value","pos":[40064,40084]},{"pos":[40094,40106],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns _X REM _Y","pos":[40110,40127]},{"pos":[40137,40192],"content":"<bpt id=\"p1\">&lt;a name=\"remainderf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  remainderf Function","linkify":"<a name=\"remainderf_function\"></a>  remainderf Function","source":"<a name=\"remainderf_function\"></a>  remainderf Function"},{"content":"Computes the remainder: _X REM _Y","pos":[40196,40229]},{"pos":[40324,40334],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[40346,40366]},{"content":"Floating-point value","pos":[40381,40401]},{"pos":[40411,40423],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns _X REM _Y","pos":[40427,40444]},{"pos":[40454,40501],"content":"<bpt id=\"p1\">&lt;a name=\"remquo_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  remquo Function","linkify":"<a name=\"remquo_function\"></a>  remquo Function","source":"<a name=\"remquo_function\"></a>  remquo Function"},{"content":"Computes the remainder of the first specified argument divided by the second specified argument.","pos":[40505,40601]},{"content":"Also computes the quotient of the significand of the first specified argument divided by the significand of the second specified argument, and returns the quotient using the location specified in the third argument.","pos":[40602,40817]},{"pos":[41026,41036],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The first floating-point argument.","pos":[41048,41082]},{"content":"The second floating-point argument.","pos":[41097,41132]},{"content":"<ph id=\"ph1\">`_Quo`</ph> (out parameter)","pos":[41139,41161],"source":"`_Quo` (out parameter)"},{"content":"The address of an integer that’s used to return the quotient of the fractional bits of <ph id=\"ph1\">`_X`</ph> divided by the fractional bits of <ph id=\"ph2\">`_Y`</ph>.","pos":[41165,41296],"source":" The address of an integer that’s used to return the quotient of the fractional bits of `_X` divided by the fractional bits of `_Y`."},{"pos":[41306,41318],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[41322,41368],"content":"Returns the remainder of <ph id=\"ph1\">`_X`</ph> divided by <ph id=\"ph2\">`_Y`</ph>.","source":"Returns the remainder of `_X` divided by `_Y`."},{"pos":[41378,41427],"content":"<bpt id=\"p1\">&lt;a name=\"remquof_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  remquof Function","linkify":"<a name=\"remquof_function\"></a>  remquof Function","source":"<a name=\"remquof_function\"></a>  remquof Function"},{"content":"Computes the remainder of the first specified argument divided by the second specified argument.","pos":[41431,41527]},{"content":"Also computes the quotient of the significand of the first specified argument divided by the significand of the second specified argument, and returns the quotient using the location specified in the third argument.","pos":[41528,41743]},{"pos":[41858,41868],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The first floating-point argument.","pos":[41880,41914]},{"content":"The second floating-point argument.","pos":[41929,41964]},{"content":"<ph id=\"ph1\">`_Quo`</ph> (out parameter)","pos":[41971,41993],"source":"`_Quo` (out parameter)"},{"content":"The address of an integer that’s used to return the quotient of the fractional bits of <ph id=\"ph1\">`_X`</ph> divided by the fractional bits of <ph id=\"ph2\">`_Y`</ph>.","pos":[41997,42128],"source":" The address of an integer that’s used to return the quotient of the fractional bits of `_X` divided by the fractional bits of `_Y`."},{"pos":[42138,42150],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[42154,42200],"content":"Returns the remainder of <ph id=\"ph1\">`_X`</ph> divided by <ph id=\"ph2\">`_Y`</ph>.","source":"Returns the remainder of `_X` divided by `_Y`."},{"pos":[42210,42255],"content":"<bpt id=\"p1\">&lt;a name=\"round_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  round Function","linkify":"<a name=\"round_function\"></a>  round Function","source":"<a name=\"round_function\"></a>  round Function"},{"content":"Rounds _X to the nearest integer","pos":[42259,42291]},{"pos":[42409,42419],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[42431,42451]},{"pos":[42461,42473],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the nearest integer of _X","pos":[42477,42510]},{"pos":[42520,42567],"content":"<bpt id=\"p1\">&lt;a name=\"roundf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  roundf Function","linkify":"<a name=\"roundf_function\"></a>  roundf Function","source":"<a name=\"roundf_function\"></a>  roundf Function"},{"content":"Rounds _X to the nearest integer","pos":[42571,42603]},{"pos":[42673,42683],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[42695,42715]},{"pos":[42725,42737],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the nearest integer of _X","pos":[42741,42774]},{"pos":[42784,42829],"content":"<bpt id=\"p1\">&lt;a name=\"rsqrt_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  rsqrt Function","linkify":"<a name=\"rsqrt_function\"></a>  rsqrt Function","source":"<a name=\"rsqrt_function\"></a>  rsqrt Function"},{"content":"Returns the reciprocal of the square root of the argument","pos":[42833,42890]},{"pos":[43008,43018],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[43030,43050]},{"pos":[43060,43072],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the reciprocal of the square root of the argument","pos":[43076,43133]},{"pos":[43143,43190],"content":"<bpt id=\"p1\">&lt;a name=\"rsqrtf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  rsqrtf Function","linkify":"<a name=\"rsqrtf_function\"></a>  rsqrtf Function","source":"<a name=\"rsqrtf_function\"></a>  rsqrtf Function"},{"content":"Returns the reciprocal of the square root of the argument","pos":[43194,43251]},{"pos":[43321,43331],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[43343,43363]},{"pos":[43373,43385],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the reciprocal of the square root of the argument","pos":[43389,43446]},{"pos":[43456,43501],"content":"<bpt id=\"p1\">&lt;a name=\"scalb_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  scalb Function","linkify":"<a name=\"scalb_function\"></a>  scalb Function","source":"<a name=\"scalb_function\"></a>  scalb Function"},{"content":"Multiplies _X by FLT_RADIX to the power _Y","pos":[43505,43547]},{"pos":[43708,43718],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[43730,43750]},{"content":"Floating-point value","pos":[43765,43785]},{"pos":[43795,43807],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns _X * (FLT_RADIX ^ _Y)","pos":[43811,43840]},{"pos":[43850,43897],"content":"<bpt id=\"p1\">&lt;a name=\"scalbf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  scalbf Function","linkify":"<a name=\"scalbf_function\"></a>  scalbf Function","source":"<a name=\"scalbf_function\"></a>  scalbf Function"},{"content":"Multiplies _X by FLT_RADIX to the power _Y","pos":[43901,43943]},{"pos":[44034,44044],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[44056,44076]},{"content":"Floating-point value","pos":[44091,44111]},{"pos":[44121,44133],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns _X * (FLT_RADIX ^ _Y)","pos":[44137,44166]},{"pos":[44176,44223],"content":"<bpt id=\"p1\">&lt;a name=\"scalbn_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  scalbn Function","linkify":"<a name=\"scalbn_function\"></a>  scalbn Function","source":"<a name=\"scalbn_function\"></a>  scalbn Function"},{"content":"Multiplies _X by FLT_RADIX to the power _Y","pos":[44227,44269]},{"pos":[44427,44437],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[44449,44469]},{"content":"Integer value","pos":[44484,44497]},{"pos":[44507,44519],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns _X * (FLT_RADIX ^ _Y)","pos":[44523,44552]},{"pos":[44562,44611],"content":"<bpt id=\"p1\">&lt;a name=\"scalbnf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  scalbnf Function","linkify":"<a name=\"scalbnf_function\"></a>  scalbnf Function","source":"<a name=\"scalbnf_function\"></a>  scalbnf Function"},{"content":"Multiplies _X by FLT_RADIX to the power _Y","pos":[44615,44657]},{"pos":[44747,44757],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[44769,44789]},{"content":"Integer value","pos":[44804,44817]},{"pos":[44827,44839],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns _X * (FLT_RADIX ^ _Y)","pos":[44843,44872]},{"pos":[44882,44931],"content":"<bpt id=\"p1\">&lt;a name=\"signbit_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  signbit Function","linkify":"<a name=\"signbit_function\"></a>  signbit Function","source":"<a name=\"signbit_function\"></a>  signbit Function"},{"content":"Determines whether the sign of _X is negative","pos":[44935,44980]},{"pos":[45097,45107],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[45119,45139]},{"pos":[45149,45161],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a nonzero value if and only if the sign of _X is negative","pos":[45165,45230]},{"pos":[45240,45291],"content":"<bpt id=\"p1\">&lt;a name=\"signbitf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  signbitf Function","linkify":"<a name=\"signbitf_function\"></a>  signbitf Function","source":"<a name=\"signbitf_function\"></a>  signbitf Function"},{"content":"Determines whether the sign of _X is negative","pos":[45295,45340]},{"pos":[45410,45420],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[45432,45452]},{"pos":[45462,45474],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a nonzero value if and only if the sign of _X is negative","pos":[45478,45543]},{"pos":[45553,45594],"content":"<bpt id=\"p1\">&lt;a name=\"sin_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  sin Function","linkify":"<a name=\"sin_function\"></a>  sin Function","source":"<a name=\"sin_function\"></a>  sin Function"},{"content":"Calculates the sine value of the argument","pos":[45598,45639]},{"pos":[45753,45763],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[45775,45795]},{"pos":[45805,45817],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the sine value of the argument","pos":[45821,45859]},{"pos":[45869,45912],"content":"<bpt id=\"p1\">&lt;a name=\"sinf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  sinf Function","linkify":"<a name=\"sinf_function\"></a>  sinf Function","source":"<a name=\"sinf_function\"></a>  sinf Function"},{"content":"Calculates the sine value of the argument","pos":[45916,45957]},{"pos":[46025,46035],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[46047,46067]},{"pos":[46077,46089],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the sine value of the argument","pos":[46093,46131]},{"pos":[46141,46188],"content":"<bpt id=\"p1\">&lt;a name=\"sincos_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  sincos Function","linkify":"<a name=\"sincos_function\"></a>  sincos Function","source":"<a name=\"sincos_function\"></a>  sincos Function"},{"content":"Calculates sine and cosine value of _X","pos":[46192,46230]},{"pos":[46451,46461],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[46473,46493]},{"content":"Returns the sine value of _X","pos":[46508,46536]},{"content":"Returns the cosine value of _X","pos":[46551,46581]},{"pos":[46591,46640],"content":"<bpt id=\"p1\">&lt;a name=\"sincosf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  sincosf Function","linkify":"<a name=\"sincosf_function\"></a>  sincosf Function","source":"<a name=\"sincosf_function\"></a>  sincosf Function"},{"content":"Calculates sine and cosine value of _X","pos":[46644,46682]},{"pos":[46803,46813],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[46825,46845]},{"content":"Returns the sine value of _X","pos":[46860,46888]},{"content":"Returns the cosine value of _X","pos":[46903,46933]},{"pos":[46943,46986],"content":"<bpt id=\"p1\">&lt;a name=\"sinh_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  sinh Function","linkify":"<a name=\"sinh_function\"></a>  sinh Function","source":"<a name=\"sinh_function\"></a>  sinh Function"},{"content":"Calculates the hyperbolic sine value of the argument","pos":[46990,47042]},{"pos":[47158,47168],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[47180,47200]},{"pos":[47210,47222],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the hyperbolic sine value of the argument","pos":[47226,47275]},{"pos":[47285,47330],"content":"<bpt id=\"p1\">&lt;a name=\"sinhf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  sinhf Function","linkify":"<a name=\"sinhf_function\"></a>  sinhf Function","source":"<a name=\"sinhf_function\"></a>  sinhf Function"},{"content":"Calculates the hyperbolic sine value of the argument","pos":[47334,47386]},{"pos":[47455,47465],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[47477,47497]},{"pos":[47507,47519],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the hyperbolic sine value of the argument","pos":[47523,47572]},{"pos":[47582,47627],"content":"<bpt id=\"p1\">&lt;a name=\"sinpi_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  sinpi Function","linkify":"<a name=\"sinpi_function\"></a>  sinpi Function","source":"<a name=\"sinpi_function\"></a>  sinpi Function"},{"content":"Calculates the sine value of pi * _X","pos":[47631,47667]},{"pos":[47785,47795],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[47807,47827]},{"pos":[47837,47849],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the sine value of pi * _X","pos":[47853,47886]},{"pos":[47896,47943],"content":"<bpt id=\"p1\">&lt;a name=\"sinpif_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  sinpif Function","linkify":"<a name=\"sinpif_function\"></a>  sinpif Function","source":"<a name=\"sinpif_function\"></a>  sinpif Function"},{"content":"Calculates the sine value of pi * _X","pos":[47947,47983]},{"pos":[48053,48063],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[48075,48095]},{"pos":[48105,48117],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the sine value of pi * _X","pos":[48121,48154]},{"pos":[48164,48207],"content":"<bpt id=\"p1\">&lt;a name=\"sqrt_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  sqrt Function","linkify":"<a name=\"sqrt_function\"></a>  sqrt Function","source":"<a name=\"sqrt_function\"></a>  sqrt Function"},{"content":"Calculates the squre root of the argument","pos":[48211,48252]},{"pos":[48368,48378],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[48390,48410]},{"pos":[48420,48432],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the squre root of the argument","pos":[48436,48474]},{"pos":[48484,48529],"content":"<bpt id=\"p1\">&lt;a name=\"sqrtf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  sqrtf Function","linkify":"<a name=\"sqrtf_function\"></a>  sqrtf Function","source":"<a name=\"sqrtf_function\"></a>  sqrtf Function"},{"content":"Calculates the squre root of the argument","pos":[48533,48574]},{"pos":[48643,48653],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[48665,48685]},{"pos":[48695,48707],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the squre root of the argument","pos":[48711,48749]},{"pos":[48759,48800],"content":"<bpt id=\"p1\">&lt;a name=\"tan_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  tan Function","linkify":"<a name=\"tan_function\"></a>  tan Function","source":"<a name=\"tan_function\"></a>  tan Function"},{"content":"Calculates the tangent value of the argument","pos":[48804,48848]},{"pos":[48962,48972],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[48984,49004]},{"pos":[49014,49026],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the tangent value of the argument","pos":[49030,49071]},{"pos":[49081,49124],"content":"<bpt id=\"p1\">&lt;a name=\"tanf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  tanf Function","linkify":"<a name=\"tanf_function\"></a>  tanf Function","source":"<a name=\"tanf_function\"></a>  tanf Function"},{"content":"Calculates the tangent value of the argument","pos":[49128,49172]},{"pos":[49240,49250],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[49262,49282]},{"pos":[49292,49304],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the tangent value of the argument","pos":[49308,49349]},{"pos":[49359,49402],"content":"<bpt id=\"p1\">&lt;a name=\"tanh_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  tanh Function","linkify":"<a name=\"tanh_function\"></a>  tanh Function","source":"<a name=\"tanh_function\"></a>  tanh Function"},{"content":"Calculates the hyperbolic tangent value of the argument","pos":[49406,49461]},{"pos":[49577,49587],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[49599,49619]},{"pos":[49629,49641],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the hyperbolic tangent value of the argument","pos":[49645,49697]},{"pos":[49707,49752],"content":"<bpt id=\"p1\">&lt;a name=\"tanhf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  tanhf Function","linkify":"<a name=\"tanhf_function\"></a>  tanhf Function","source":"<a name=\"tanhf_function\"></a>  tanhf Function"},{"content":"Calculates the hyperbolic tangent value of the argument","pos":[49756,49811]},{"pos":[49880,49890],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[49902,49922]},{"pos":[49932,49944],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the hyperbolic tangent value of the argument","pos":[49948,50000]},{"pos":[50010,50055],"content":"<bpt id=\"p1\">&lt;a name=\"tanpi_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  tanpi Function","linkify":"<a name=\"tanpi_function\"></a>  tanpi Function","source":"<a name=\"tanpi_function\"></a>  tanpi Function"},{"content":"Calculates the tangent value of pi * _X","pos":[50059,50098]},{"pos":[50216,50226],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[50238,50258]},{"pos":[50268,50280],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the tangent value of pi * _X","pos":[50284,50320]},{"pos":[50330,50377],"content":"<bpt id=\"p1\">&lt;a name=\"tanpif_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  tanpif Function","linkify":"<a name=\"tanpif_function\"></a>  tanpif Function","source":"<a name=\"tanpif_function\"></a>  tanpif Function"},{"content":"Calculates the tangent value of pi * _X","pos":[50381,50420]},{"pos":[50490,50500],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[50512,50532]},{"pos":[50542,50554],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the tangent value of pi * _X","pos":[50558,50594]},{"pos":[50604,50651],"content":"<bpt id=\"p1\">&lt;a name=\"tgamma_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  tgamma Function","linkify":"<a name=\"tgamma_function\"></a>  tgamma Function","source":"<a name=\"tgamma_function\"></a>  tgamma Function"},{"content":"Computes the gamma function of _X","pos":[50655,50688]},{"pos":[50808,50818],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[50830,50850]},{"pos":[50860,50872],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the result of gamma function of _X","pos":[50876,50918]},{"pos":[50928,50977],"content":"<bpt id=\"p1\">&lt;a name=\"tgammaf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  tgammaf Function","linkify":"<a name=\"tgammaf_function\"></a>  tgammaf Function","source":"<a name=\"tgammaf_function\"></a>  tgammaf Function"},{"content":"Computes the gamma function of _X","pos":[50981,51014]},{"pos":[51085,51095],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[51107,51127]},{"pos":[51137,51149],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the result of gamma function of _X","pos":[51153,51195]},{"pos":[51205,51250],"content":"<bpt id=\"p1\">&lt;a name=\"trunc_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  trunc Function","linkify":"<a name=\"trunc_function\"></a>  trunc Function","source":"<a name=\"trunc_function\"></a>  trunc Function"},{"content":"Truncates the argument to the integer component","pos":[51254,51301]},{"pos":[51419,51429],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[51441,51461]},{"pos":[51471,51483],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the integer component of the argument","pos":[51487,51532]},{"pos":[51542,51589],"content":"<bpt id=\"p1\">&lt;a name=\"truncf_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  truncf Function","linkify":"<a name=\"truncf_function\"></a>  truncf Function","source":"<a name=\"truncf_function\"></a>  truncf Function"},{"content":"Truncates the argument to the integer component","pos":[51593,51640]},{"pos":[51710,51720],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value","pos":[51732,51752]},{"pos":[51762,51774],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the integer component of the argument","pos":[51778,51823]},{"pos":[51832,51840],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[51844,51920],"content":"<bpt id=\"p1\">[</bpt>Concurrency::precise_math Namespace<ept id=\"p1\">](concurrency-precise-math-namespace.md)</ept>","source":"[Concurrency::precise_math Namespace](concurrency-precise-math-namespace.md)"}],"content":"---\ntitle: \"Concurrency::precise_math namespace functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: fae53ab4-d1c5-45bb-a6a0-a74258e9aea3\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\n---\n# Concurrency::precise_math namespace functions\n||||  \n|-|-|-|  \n|[acos Function](#acos_function)|[acosf Function](#acosf_function)|[acosh Function](#acosh_function)|  \n|[acoshf Function](#acoshf_function)|[asin Function](#asin_function)|[asinf Function](#asinf_function)|  \n|[asinh Function](#asinh_function)|[asinhf Function](#asinhf_function)|[atan Function](#atan_function)|  \n|[atan2 Function](#atan2_function)|[atan2f Function](#atan2f_function)|[atanf Function](#atanf_function)|  \n|[atanh Function](#atanh_function)|[atanhf Function](#atanhf_function)|[cbrt Function](#cbrt_function)|  \n|[cbrtf Function](#cbrtf_function)|[ceil Function](#ceil_function)|[ceilf Function](#ceilf_function)|  \n|[copysign Function](#copysign_function)|[copysignf Function](#copysignf_function)|[cos Function](#cos_function)|  \n|[cosf Function](#cosf_function)|[cosh Function](#cosh_function)|[coshf Function](#coshf_function)|  \n|[cospi Function](#cospi_function)|[cospif Function](#cospif_function)|[erf Function](#erf_function)|  \n|[erfc Function](#erfc_function)|[erfcf Function](#erfcf_function)|[erfcinv Function](#erfcinv_function)|  \n|[erfcinvf Function](#erfcinvf_function)|[erff Function](#erff_function)|[erfinv Function](#erfinv_function)|  \n|[erfinvf Function](#erfinvf_function)|[exp Function](#exp_function)|[exp10 Function](#exp10_function)|  \n|[exp10f Function](#exp10f_function)|[exp2 Function](#exp2_function)|[exp2f Function](#exp2f_function)|  \n|[expf Function](#expf_function)|[expm1 Function](#expm1_function)|[expm1f Function](#expm1f_function)|  \n|[fabs Function](#fabs_function)|[fabsf Function](#fabsf_function)|[floor Function](#floor_function)| \n|[fdim Function](#fdim_function)|[fdimf Function](#fdimf_function)|| \n|[floorf Function](#floorf_function)|[fma Function](#fma_function)|[fmaf Function](#fmaf_function)|\n[fmax Function](#fmax_function)|[fmaxf Function](#fmaxf_function)|| \n|[fmin Function](#fmin_function)|[fminf Function](#fminf_function)|[fmod Function](#fmod_function)|  \n|[fmodf Function](#fmodf_function)|[fpclassify Function](#fpclassify_function)|[frexp Function](#frexp_function)|  \n|[frexpf Function](#frexpf_function)|[hypot Function](#hypot_function)|[hypotf Function](#hypotf_function)|  \n|[ilogb Function](#ilogb_function)|[ilogbf Function](#ilogbf_function)|[isfinite Function](#isfinite_function)|  \n|[isinf Function](#isinf_function)|[isnan Function](#isnan_function)|[isnormal Function](#isnormal_function)|  \n|[ldexp Function](#ldexp_function)|[ldexpf Function](#ldexpf_function)|[lgamma Function](#lgamma_function)|  \n|[lgammaf Function](#lgammaf_function)|[log Function](#log_function)|[log10 Function](#log10_function)|  \n|[log10f Function](#log10f_function)|[log1p Function](#log1p_function)|[log1pf Function](#log1pf_function)|  \n|[log2 Function](#log2_function)|[log2f Function](#log2f_function)|[logb Function](#logb_function)|  \n|[logbf Function](#logbf_function)|[logf Function](#logf_function)|[modf Function](#modf_function)|  \n|[modff Function](#modff_function)|[nan Function](#nan_function)|[nanf Function](#nanf_function)|  \n|[nearbyint Function](#nearbyint_function)|[nearbyintf Function](#nearbyintf_function)|[nextafter Function](#nextafter_function)|  \n|[nextafterf Function](#nextafterf_function)|[phi Function](#phi_function)|[phif Function](#phif_function)|  \n|[pow Function](#pow_function)|[powf Function](#powf_function)|[probit Function](#probit_function)|  \n|[probitf Function](#probitf_function)|[rcbrt Function](#rcbrt_function)|[rcbrtf Function](#rcbrtf_function)|  \n|[remainder Function](#remainder_function)|[remainderf Function](#remainderf_function)|[remquo Function](#remquo_function)|  \n|[remquof Function](#remquof_function)|[round Function](#round_function)|[roundf Function](#roundf_function)|  \n|[rsqrt Function](#rsqrt_function)|[rsqrtf Function](#rsqrtf_function)|[scalb Function](#scalb_function)|  \n|[scalbf Function](#scalbf_function)|[scalbn Function](#scalbn_function)|[scalbnf Function](#scalbnf_function)|  \n|[signbit Function](#signbit_function)|[signbitf Function](#signbitf_function)|[sin Function](#sin_function)|  \n|[sincos Function](#sincos_function)|[sincosf Function](#sincosf_function)|[sinf Function](#sinf_function)|  \n|[sinh Function](#sinh_function)|[sinhf Function](#sinhf_function)|[sinpi Function](#sinpi_function)|  \n|[sinpif Function](#sinpif_function)|[sqrt Function](#sqrt_function)|[sqrtf Function](#sqrtf_function)|  \n|[tan Function](#tan_function)|[tanf Function](#tanf_function)|[tanh Function](#tanh_function)|  \n|[tanhf Function](#tanhf_function)|[tanpi Function](#tanpi_function)|[tanpif Function](#tanpif_function)|  \n|[tgamma Function](#tgamma_function)|[tgammaf Function](#tgammaf_function)|[trunc Function](#trunc_function)|  \n|[truncf Function](#truncf_function)|  \n  \n##  <a name=\"acos_function\"></a>  acos Function  \n Calculates the arccosine of the argument  \n  \n```  \ninline float acos(float _X) restrict(amp);\n\n \ninline double acos(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the arccosine value of the argument  \n  \n##  <a name=\"acosf_function\"></a>  acosf Function  \n Calculates the arccosine of the argument  \n  \n```  \ninline float acosf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the arccosine value of the argument  \n  \n##  <a name=\"acosh_function\"></a>  acosh Function  \n Calculates the inverse hyperbolic cosine of the argument  \n  \n```  \ninline float acosh(float _X) restrict(amp);\n\n \ninline double acosh(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the inverse hyperbolic cosine value of the argument  \n  \n##  <a name=\"acoshf_function\"></a>  acoshf Function  \n Calculates the inverse hyperbolic cosine of the argument  \n  \n```  \ninline float acoshf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the inverse hyperbolic cosine value of the argument  \n  \n##  <a name=\"asin_function\"></a>  asin Function  \n Calculates the arcsine of the argument  \n  \n```  \ninline float asin(float _X) restrict(amp);\n\n \ninline double asin(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the arcsine value of the argument  \n  \n##  <a name=\"asinf_function\"></a>  asinf Function  \n Calculates the arcsine of the argument  \n  \n```  \ninline float asinf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the arcsine value of the argument  \n  \n##  <a name=\"asinh_function\"></a>  asinh Function  \n Calculates the inverse hyperbolic sine of the argument  \n  \n```  \ninline float asinh(float _X) restrict(amp);\n\n \ninline double asinh(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the inverse hyperbolic sine value of the argument  \n  \n##  <a name=\"asinhf_function\"></a>  asinhf Function  \n Calculates the inverse hyperbolic sine of the argument  \n  \n```  \ninline float asinhf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the inverse hyperbolic sine value of the argument  \n  \n##  <a name=\"atan_function\"></a>  atan Function  \n Calculates the arctangent of the argument  \n  \n```  \ninline float atan(float _X) restrict(amp);\n\n \ninline double atan(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the arctangent value of the argument  \n  \n##  <a name=\"atan2_function\"></a>  atan2 Function  \n Calculates the arctangent of _Y/_X  \n  \n```  \ninline float atan2(\n    float _Y,  \n    float _X) restrict(amp);\n\n \ninline double atan2(\n    double _Y,  \n    double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_Y`  \n Floating-point value  \n  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the arctangent value of _Y/_X  \n  \n##  <a name=\"atan2f_function\"></a>  atan2f Function  \n Calculates the arctangent of _Y/_X  \n  \n```  \ninline float atan2f(\n    float _Y,  \n    float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_Y`  \n Floating-point value  \n  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the arctangent value of _Y/_X  \n  \n##  <a name=\"atanf_function\"></a>  atanf Function  \n Calculates the arctangent of the argument  \n  \n```  \ninline float atanf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the arctangent value of the argument  \n  \n##  <a name=\"atanh_function\"></a>  atanh Function  \n Calculates the inverse hyperbolic tangent of the argument  \n  \n```  \ninline float atanh(float _X) restrict(amp);\n\n \ninline double atanh(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the inverse hyperbolic tangent value of the argument  \n  \n##  <a name=\"atanhf_function\"></a>  atanhf Function  \n Calculates the inverse hyperbolic tangent of the argument  \n  \n```  \ninline float atanhf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the inverse hyperbolic tangent value of the argument  \n  \n##  <a name=\"cbrt_function\"></a>  cbrt Function  \n Computes the real cube root of the argument  \n  \n```  \ninline float cbrt(float _X) restrict(amp);\n\n \ninline double cbrt(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the real cube root of the argument  \n  \n##  <a name=\"cbrtf_function\"></a>  cbrtf Function  \n Computes the real cube root of the argument  \n  \n```  \ninline float cbrtf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the real cube root of the argument  \n  \n##  <a name=\"ceil_function\"></a>  ceil Function  \n Calculates the ceiling of the argument  \n  \n```  \ninline float ceil(float _X) restrict(amp);\n\n \ninline double ceil(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the ceiling of the argument  \n  \n##  <a name=\"ceilf_function\"></a>  ceilf Function  \n Calculates the ceiling of the argument  \n  \n```  \ninline float ceilf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the ceiling of the argument  \n  \n##  <a name=\"copysign_function\"></a>  copysign Function  \n Produces a value with the magnitude of _X and the sign of _Y  \n  \n```  \ninline float copysign(\n    float _X,  \n    float _Y) restrict(amp);\n\n \ninline double copysign(\n    double _X,  \n    double _Y) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n `_Y`  \n Floating-point value  \n  \n### Return Value  \n Returns a value with the magnitude of _X and the sign of _Y  \n  \n##  <a name=\"copysignf_function\"></a>  copysignf Function  \n Produces a value with the magnitude of _X and the sign of _Y  \n  \n```  \ninline float copysignf(\n    float _X,  \n    float _Y) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n `_Y`  \n Floating-point value  \n  \n### Return Value  \n Returns a value with the magnitude of _X and the sign of _Y  \n  \n##  <a name=\"cos_function\"></a>  cos Function  \n Calculates the cosine of the argument  \n  \n```  \ninline float cos(float _X) restrict(amp);\n\n \ninline double cos(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the cosine value of the argument  \n  \n##  <a name=\"cosf_function\"></a>  cosf Function  \n Calculates the cosine of the argument  \n  \n```  \ninline float cosf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the cosine value of the argument  \n  \n##  <a name=\"cosh_function\"></a>  cosh Function  \n Calculates the hyperbolic cosine value of the argument  \n  \n```  \ninline float cosh(float _X) restrict(amp);\n\n \ninline double cosh(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the hyperbolic cosine value of the argument  \n  \n##  <a name=\"coshf_function\"></a>  coshf Function  \n Calculates the hyperbolic cosine value of the argument  \n  \n```  \ninline float coshf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the hyperbolic cosine value of the argument  \n  \n##  <a name=\"cospi_function\"></a>  cospi Function  \n Calculates the cosine value of pi * _X  \n  \n```  \ninline float cospi(float _X) restrict(amp);\n\n \ninline double cospi(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the cosine value of pi * _X  \n  \n##  <a name=\"cospif_function\"></a>  cospif Function  \n Calculates the cosine value of pi * _X  \n  \n```  \ninline float cospif(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the cosine value of pi * _X  \n  \n##  <a name=\"erf_function\"></a>  erf Function  \n Computes the error function of _X  \n  \n```  \ninline float erf(float _X) restrict(amp);\n\n \ninline double erf(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the error function of _X  \n  \n##  <a name=\"erfc_function\"></a>  erfc Function  \n Computes the complementary error function of _X  \n  \n```  \ninline float erfc(float _X) restrict(amp);\n\n \ninline double erfc(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the complementary error function of _X  \n  \n##  <a name=\"erfcf_function\"></a>  erfcf Function  \n Computes the complementary error function of _X  \n  \n```  \ninline float erfcf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the complementary error function of _X  \n  \n##  <a name=\"erfcinv_function\"></a>  erfcinv Function  \n Computes the inverse complementary error function of _X  \n  \n```  \ninline float erfcinv(float _X) restrict(amp);\n\n \ninline double erfcinv(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the inverse complementary error function of _X  \n  \n##  <a name=\"erfcinvf_function\"></a>  erfcinvf Function  \n Computes the inverse complementary error function of _X  \n  \n```  \ninline float erfcinvf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the inverse complementary error function of _X  \n  \n##  <a name=\"erff_function\"></a>  erff Function  \n Computes the error function of _X  \n  \n```  \ninline float erff(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the error function of _X  \n  \n##  <a name=\"erfinv_function\"></a>  erfinv Function  \n Computes the inverse error function of _X  \n  \n```  \ninline float erfinv(float _X) restrict(amp);\n\n \ninline double erfinv(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the inverse error function of _X  \n  \n##  <a name=\"erfinvf_function\"></a>  erfinvf Function  \n Computes the inverse error function of _X  \n  \n```  \ninline float erfinvf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the inverse error function of _X  \n  \n##  <a name=\"exp10_function\"></a>  exp10 Function  \n Calculates the base-10 exponential of the argument  \n  \n```  \ninline float exp10(float _X) restrict(amp);\n\n \ninline double exp10(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the base-10 exponential of the argument  \n  \n##  <a name=\"exp10f_function\"></a>  exp10f Function  \n Calculates the base-10 exponential of the argument  \n  \n```  \ninline float exp10f(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the base-10 exponential of the argument  \n  \n##  <a name=\"expm1_function\"></a>  expm1 Function  \n Calculates the base-e exponential of the argument, minus 1  \n  \n```  \ninline float expm1(float exponent) restrict(amp);\n\n \ninline double expm1(double exponent) restrict(amp);\n```  \n  \n### Parameters  \n `exponent`  \n The exponential term *n* of the mathematical expression `e`<sup>n</sup>, where `e` is the base of the natural logarithm.  \n  \n### Return Value  \n Returns the base-e exponential of the argument, minus 1  \n  \n##  <a name=\"expm1f_function\"></a>  expm1f Function  \n Calculates the base-e exponential of the argument, minus 1  \n  \n```  \ninline float expm1f(float exponent) restrict(amp);\n```  \n  \n### Parameters  \n `exponent`  \n The exponential term *n* of the mathematical expression `e`<sup>n</sup>, where `e` is the base of the natural logarithm.  \n  \n### Return Value  \n Returns the base-e exponential of the argument, minus 1  \n  \n##  <a name=\"exp_function\"></a>  exp Function  \n Calculates the base-e exponential of the argument  \n  \n```  \ninline float exp(float _X) restrict(amp);\n\n \ninline double exp(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the base-e exponential of the argument  \n  \n##  <a name=\"expf_function\"></a>  expf Function  \n Calculates the base-e exponential of the argument  \n  \n```  \ninline float expf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the base-e exponential of the argument  \n  \n##  <a name=\"exp2_function\"></a>  exp2 Function  \n Calculates the base-2 exponential of the argument  \n  \n```  \ninline float exp2(float _X) restrict(amp);\n\n \ninline double exp2(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the base-2 exponential of the argument  \n  \n##  <a name=\"exp2f_function\"></a>  exp2f Function  \n Calculates the base-2 exponential of the argument  \n  \n```  \ninline float exp2f(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the base-2 exponential of the argument  \n  \n##  <a name=\"fabs_function\"></a>  fabs Function  \n Returns the absolute value of the argument  \n  \n```  \ninline float fabs(float _X) restrict(amp);\n\n \ninline double fabs(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the absolute value of the argument  \n  \n##  <a name=\"fabsf_function\"></a>  fabsf Function  \n Returns the absolute value of the argument  \n  \n```  \ninline float fabsf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the absolute value of the argument  \n\n## <a name=\"fdim_function\"></a> fdim Function  \nComputes the positive difference between the arguments.\n```  \ninline float fdim(\n   float _X,\n   float _Y\n) restrict(amp);\ninline double fdim(\n   double _X,\n   double _Y\n) restrict(amp);\n``` \n### Parameters\n`_X`\nFloating-point value\n`_Y`\nFloating-point value\n\n\n### Return Value\nThe difference between _X and _Y if _X is greater than _Y; otherwise, +0.\n \n## <a name=\"fdimf_function\"></a> fdimf Function\nComputes the positive difference between the arguments.\n```\ninline float fdimf(\n   float _X,\n   float _Y\n) restrict(amp);\n```\n### Parameters\n`_X`\nFloating-point value\n`_Y`\nFloating-point value\n\n### Return Value\nThe difference between _X and _Y if _X is greater than _Y; otherwise, +0. \n  \n##  <a name=\"floor_function\"></a>  floor Function  \n Calculates the floor of the argument  \n  \n```  \ninline float floor(float _X) restrict(amp);\n\n \ninline double floor(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the floor of the argument  \n  \n##  <a name=\"floorf_function\"></a>  floorf Function  \n Calculates the floor of the argument  \n  \n```  \ninline float floorf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the floor of the argument  \n\n## <a name=\"fma_function\"> fma Function  \nComputes the product of the first and second specified arguments, then adds the third specified argument to the result; the entire computation is performed as a single operation.\n```\ninline float fma(\n   float _X,\n   float _Y,\n   float _Z\n) restrict(amp);\n\ninline double fma(\n   double _X,\n   double _Y,\n   double _Z\n) restrict(amp);\n```\n### Parameters\n`_X`\nThe first floating-point argument.\n`_Y`\nThe second floating-point argument.\n`_Z`\nThe third floating-point argument.\n\n### Return Value\nThe result of the expression (_X * _Y) + _Z. The entire computation is performed as a single operation; that is, the sub-expressions are calculated to infinite precision, and only the final result is rounded. \n\n## <a name=\"fmaf_function\"></a> fmaf Function  \nComputes the product of the first and second specified arguments, then adds the third specified argument to the result; the entire computation is performed as a single operation.\n```\ninline float fmaf(\n   float _X,\n   float _Y,\n   float _Z\n) restrict(amp);\n```  \n### Parameters\n`_X`\nThe first floating-point argument.\n`_Y`\nThe second floating-point argument.\n`_Z`\nThe third floating-point argument.\n\n### Return Value\nThe result of the expression (_X * _Y) + _Z. The entire computation is performed as a single operation; that is, the sub-expressions are calculated to infinite precision, and only the final result is rounded.\n  \n##  <a name=\"fmax_function\"></a>  fmax Function  \n Determine the maximum numeric value of the arguments  \n  \n```  \ninline float fmax(\n    float _X,  \n    float _Y) restrict(amp);\n\n \ninline double fmax(\n    double _X,  \n    double _Y) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n `_Y`  \n Floating-point value  \n  \n### Return Value  \n Return the maximum numeric value of the arguments  \n  \n##  <a name=\"fmaxf_function\"></a>  fmaxf Function  \n Determine the maximum numeric value of the arguments  \n  \n```  \ninline float fmaxf(\n    float _X,  \n    float _Y) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n `_Y`  \n Floating-point value  \n  \n### Return Value  \n Return the maximum numeric value of the arguments  \n  \n##  <a name=\"fmin_function\"></a>  fmin Function  \n Determine the minimum numeric value of the arguments  \n  \n```  \ninline float fmin(\n    float _X,  \n    float _Y) restrict(amp);\n\n \ninline double fmin(\n    double _X,  \n    double _Y) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n `_Y`  \n Floating-point value  \n  \n### Return Value  \n Return the minimum numeric value of the arguments  \n  \n##  <a name=\"fminf_function\"></a>  fminf Function  \n Determine the minimum numeric value of the arguments  \n  \n```  \ninline float fminf(\n    float _X,  \n    float _Y) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n `_Y`  \n Floating-point value  \n  \n### Return Value  \n Return the minimum numeric value of the arguments  \n  \n##  <a name=\"fmod_function\"></a>  fmod Function (C++ AMP)  \n Computes the remainder of the first specified argument divided by the second specified argument.  \n  \n```  \ninline float fmod(\n    float _X,  \n    float _Y) restrict(amp);\n\n \ninline double fmod(\n    double _X,  \n    double _Y) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n The first floating-point argument.  \n  \n `_Y`  \n The second floating-point argument.  \n  \n### Return Value  \n The remainder of `_X` divided by `_Y`; that is, the value of `_X` - `_Y`*n*, where *n* is a whole integer such that the magnitude of `_X` - `_Y`*n* is less than the magnitude of `_Y`.  \n  \n##  <a name=\"fmodf_function\"></a>  fmodf Function  \n Computes the remainder of the first specified argument divided by the second specified argument.  \n  \n```  \ninline float fmodf(\n    float _X,  \n    float _Y) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n The first floating-point argument.  \n  \n `_Y`  \n The second floating-point argument.  \n  \n### Return Value  \n The remainder of `_X` divided by `_Y`; that is, the value of `_X` - `_Y`*n*, where *n* is a whole integer such that the magnitude of `_X` - `_Y`*n* is less than the magnitude of `_Y`.  \n  \n##  <a name=\"fpclassify_function\"></a>  fpclassify Function  \n Classifies the argument value as NaN, infinite, normal, subnormal, zero  \n  \n```  \ninline int fpclassify(float _X) restrict(amp);\n\n \ninline int fpclassify(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the value of the number classification macro appropriate to the value of the argument.  \n  \n##  <a name=\"frexp_function\"></a>  frexp Function  \n Gets the mantissa and exponent of _X  \n  \n```  \ninline float frexp(\n    float _X,  \n    _Out_ int* _Exp) restrict(amp);\n\n \ninline double frexp(\n    double _X,  \n    _Out_ int* _Exp) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n `_Exp`  \n Returns the integer exponent of _X in floating-point value  \n  \n### Return Value  \n Returns the mantissa _X  \n  \n##  <a name=\"frexpf_function\"></a>  frexpf Function  \n Gets the mantissa and exponent of _X  \n  \n```  \ninline float frexpf(\n    float _X,  \n    _Out_ int* _Exp) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n `_Exp`  \n Returns the integer exponent of _X in floating-point value  \n  \n### Return Value  \n Returns the mantissa _X  \n  \n##  <a name=\"hypot_function\"></a>  hypot Function  \n Computes the square root of the sum of the squares of _X and _Y  \n  \n```  \ninline float hypot(\n    float _X,  \n    float _Y) restrict(amp);\n\n \ninline double hypot(\n    double _X,  \n    double _Y) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n `_Y`  \n Floating-point value  \n  \n### Return Value  \n Returns the square root of the sum of the squares of _X and _Y  \n  \n##  <a name=\"hypotf_function\"></a>  hypotf Function  \n Computes the square root of the sum of the squares of _X and _Y  \n  \n```  \ninline float hypotf(\n    float _X,  \n    float _Y) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n `_Y`  \n Floating-point value  \n  \n### Return Value  \n Returns the square root of the sum of the squares of _X and _Y  \n  \n##  <a name=\"ilogb_function\"></a>  ilogb Function  \n Extract the exponent of _X as a signed int value  \n  \n```  \ninline int ilogb(float _X) restrict(amp);\n\n \ninline int ilogb(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the exponent of _X as a signed int value  \n  \n##  <a name=\"ilogbf_function\"></a>  ilogbf Function  \n Extract the exponent of _X as a signed int value  \n  \n```  \ninline int ilogbf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the exponent of _X as a signed int value  \n  \n##  <a name=\"isfinite_function\"></a>  isfinite Function  \n Determines whether the argument has a finite value  \n  \n```  \ninline int isfinite(float _X) restrict(amp);\n\n \ninline int isfinite(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns a nonzero value if and only if the argument has a finite value  \n  \n##  <a name=\"isinf_function\"></a>  isinf Function  \n Determines whether the argument is an infinity  \n  \n```  \ninline int isinf(float _X) restrict(amp);\n\n \ninline int isinf(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns a nonzero value if and only if the argument has an infinite value  \n  \n##  <a name=\"isnan_function\"></a>  isnan Function  \n Determines whether the argument is a NaN  \n  \n```  \ninline int isnan(float _X) restrict(amp);\n\n \ninline int isnan(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns a nonzero value if and only if the argument has a NaN value  \n  \n##  <a name=\"isnormal_function\"></a>  isnormal Function  \n Determines whether the argument is a normal  \n  \n```  \ninline int isnormal(float _X) restrict(amp);\n\n \ninline int isnormal(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns a nonzero value if and only if the argument has a normal value  \n  \n##  <a name=\"ldexp_function\"></a>  ldexp Function  \n Computes a real number from the specified mantissa and exponent.  \n  \n```  \ninline float ldexp(\n    float _X,  \n    int _Exp) restrict(amp);\n\n \ninline double ldexp(\n    double _X,  \n    double _Exp) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value, mantissa  \n  \n `_Exp`  \n Integer value, exponent  \n  \n### Return Value  \n Returns _X * 2^_Exp  \n  \n##  <a name=\"ldexpf_function\"></a>  ldexpf Function  \n Computes a real number from the specified mantissa and exponent.  \n  \n```  \ninline float ldexpf(\n    float _X,  \n    int _Exp) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value, mantissa  \n  \n `_Exp`  \n Integer value, exponent  \n  \n### Return Value  \n Returns _X * 2^_Exp  \n  \n##  <a name=\"lgamma_function\"></a>  lgamma Function  \n Computes the natural logarithm of the absolute value of gamma of the argument  \n  \n```  \ninline float lgamma(\n    float _X,  \n    _Out_ int* _Sign) restrict(amp);\n\n \ninline double lgamma(\n    double _X,  \n    _Out_ int* _Sign) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n `_Sign`  \n Returns the sign  \n  \n### Return Value  \n Returns the natural logarithm of the absolute value of gamma of the argument  \n  \n##  <a name=\"lgammaf_function\"></a>  lgammaf Function  \n Computes the natural logarithm of the absolute value of gamma of the argument  \n  \n```  \ninline float lgammaf(\n    float _X,  \n    _Out_ int* _Sign) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n `_Sign`  \n Returns the sign  \n  \n### Return Value  \n Returns the natural logarithm of the absolute value of gamma of the argument  \n  \n##  <a name=\"log_function\"></a>  log Function  \n Calculates the base-e logarithm of the argument  \n  \n```  \ninline float log(float _X) restrict(amp);\n\n \ninline double log(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the base-e logarithm of the argument  \n  \n##  <a name=\"log10_function\"></a>  log10 Function  \n Calculates the base-10 logarithm of the argument  \n  \n```  \ninline float log10(float _X) restrict(amp);\n\n \ninline double log10(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the base-10 logarithm of the argument  \n  \n##  <a name=\"log10f_function\"></a>  log10f Function  \n Calculates the base-10 logarithm of the argument  \n  \n```  \ninline float log10f(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the base-10 logarithm of the argument  \n  \n##  <a name=\"log1p_function\"></a>  log1p Function  \n Calculates the base-e logarithm of 1 plus the argument  \n  \n```  \ninline float log1p(float _X) restrict(amp);\n\n \ninline double log1p(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the base-e logarithm of 1 plus the argument  \n  \n##  <a name=\"log1pf_function\"></a>  log1pf Function  \n Calculates the base-e logarithm of 1 plus the argument  \n  \n```  \ninline float log1pf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the base-e logarithm of 1 plus the argument  \n  \n##  <a name=\"log2_function\"></a>  log2 Function  \n Calculates the base-2 logarithm of the argument  \n  \n```  \ninline float log2(float _X) restrict(amp);\n\n \ninline double log2(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the base-10 logarithm of the argument  \n  \n##  <a name=\"log2f_function\"></a>  log2f Function  \n Calculates the base-2 logarithm of the argument  \n  \n```  \ninline float log2f(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the base-10 logarithm of the argument  \n  \n##  <a name=\"logb_function\"></a>  logb Function  \n Extracts the exponent of _X, as a signed integer value in floating-point format  \n  \n```  \ninline float logb(float _X) restrict(amp);\n\n \ninline double logb(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the signed exponent of _X  \n  \n##  <a name=\"logbf_function\"></a>  logbf Function  \n Extracts the exponent of _X, as a signed integer value in floating-point format  \n  \n```  \ninline float logbf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the signed exponent of _X  \n  \n##  <a name=\"logf_function\"></a>  logf Function  \n Calculates the base-e logarithm of the argument  \n  \n```  \ninline float logf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the base-e logarithm of the argument  \n  \n##  <a name=\"modf_function\"></a>  modf Function  \n Splits the specified argument into fractional and integer parts.  \n  \n```  \ninline float modf(\n    float _X,  \n    _Out_ float* _Iptr) restrict(amp);\n\n \ninline double modf(\n    double _X,  \n    _Out_ double* _Iptr) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n `_Iptr` (out parameter)  \n The integer portion of `_X`, as a floating-point value.  \n  \n### Return Value  \n The signed fractional portion of `_X`.  \n  \n##  <a name=\"modff_function\"></a>  modff Function  \n Splits the specified argument into fractional and integer parts.  \n  \n```  \ninline float modff(\n    float _X,  \n    _Out_ float* _Iptr) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n `_Iptr`  \n The integer portion of `_X`, as a floating-point value.  \n  \n### Return Value  \n Returns the signed fractional portion of `_X`.  \n  \n##  <a name=\"nan_function\"></a>  nan Function  \n Returns a quiet NaN  \n  \n```  \ninline double nan(int _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Integer value  \n  \n### Return Value  \n Returns a quiet NaN, if available, with the content indicated in _X  \n  \n##  <a name=\"nanf_function\"></a>  nanf Function  \n Returns a quiet NaN  \n  \n```  \ninline float nanf(int _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Integer value  \n  \n### Return Value  \n Returns a quiet NaN, if available, with the content indicated in _X  \n  \n##  <a name=\"nearbyint_function\"></a>  nearbyint Function  \n Rounds the argument to an integer value in floating-point format, using the current rounding direction.  \n  \n```  \ninline float nearbyint(float _X) restrict(amp);\n\n \ninline double nearbyint(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the rounded integer value.  \n  \n##  <a name=\"nearbyintf_function\"></a>  nearbyintf Function  \n Rounds the argument to an integer value in floating-point format, using the current rounding direction.  \n  \n```  \ninline float nearbyintf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the rounded integer value.  \n  \n##  <a name=\"nextafter_function\"></a>  nextafter Function  \n Determine the next representable value, in the type of the function, after _X in the direction of _Y  \n  \n```  \ninline float nextafter(\n    float _X,  \n    float _Y) restrict(amp);\n\n \ninline double nextafter(\n    double _X,  \n    double _Y) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n `_Y`  \n Floating-point value  \n  \n### Return Value  \n Returns the next representable value, in the type of the function, after _X in the direction of _Y  \n  \n##  <a name=\"nextafterf_function\"></a>  nextafterf Function  \n Determine the next representable value, in the type of the function, after _X in the direction of _Y  \n  \n```  \ninline float nextafterf(\n    float _X,  \n    float _Y) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n `_Y`  \n Floating-point value  \n  \n### Return Value  \n Returns the next representable value, in the type of the function, after _X in the direction of _Y  \n  \n##  <a name=\"phi_function\"></a>  phi Function  \n Returns the cumulative distribution function of the argument  \n  \n```  \ninline float phi(float _X) restrict(amp);\n\n \ninline double phi(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the cumulative distribution function of the argument  \n  \n##  <a name=\"phif_function\"></a>  phif Function  \n Returns the cumulative distribution function of the argument  \n  \n```  \ninline float phif(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the cumulative distribution function of the argument  \n  \n##  <a name=\"pow_function\"></a>  pow Function  \n Calculates _X raised to the power of _Y  \n  \n```  \ninline float pow(\n    float _X,  \n    float _Y) restrict(amp);\n\n \ninline double pow(\n    double _X,  \n    double _Y) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value, base  \n  \n `_Y`  \n Floating-point value, exponent  \n  \n### Return Value  \n  \n##  <a name=\"powf_function\"></a>  powf Function  \n Calculates _X raised to the power of _Y  \n  \n```  \ninline float powf(\n    float _X,  \n    float _Y) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value, base  \n  \n `_Y`  \n Floating-point value, exponent  \n  \n### Return Value  \n  \n##  <a name=\"probit_function\"></a>  probit Function  \n Returns the inverse cumulative distribution function of the argument  \n  \n```  \ninline float probit(float _X) restrict(amp);\n\n \ninline double probit(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the inverse cumulative distribution function of the argument  \n  \n##  <a name=\"probitf_function\"></a>  probitf Function  \n Returns the inverse cumulative distribution function of the argument  \n  \n```  \ninline float probitf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the inverse cumulative distribution function of the argument  \n  \n##  <a name=\"rcbrt_function\"></a>  rcbrt Function  \n Returns the reciprocal of the cube root of the argument  \n  \n```  \ninline float rcbrt(float _X) restrict(amp);\n\n \ninline double rcbrt(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the reciprocal of the cube root of the argument  \n  \n##  <a name=\"rcbrtf_function\"></a>  rcbrtf Function  \n Returns the reciprocal of the cube root of the argument  \n  \n```  \ninline float rcbrtf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the reciprocal of the cube root of the argument  \n  \n##  <a name=\"remainder_function\"></a>  remainder Function  \n Computes the remainder: _X REM _Y  \n  \n```  \ninline float remainder(\n    float _X,  \n    float _Y) restrict(amp);\n\n \ninline double remainder(\n    double _X,  \n    double _Y) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n `_Y`  \n Floating-point value  \n  \n### Return Value  \n Returns _X REM _Y  \n  \n##  <a name=\"remainderf_function\"></a>  remainderf Function  \n Computes the remainder: _X REM _Y  \n  \n```  \ninline float remainderf(\n    float _X,  \n    float _Y) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n `_Y`  \n Floating-point value  \n  \n### Return Value  \n Returns _X REM _Y  \n  \n##  <a name=\"remquo_function\"></a>  remquo Function  \n Computes the remainder of the first specified argument divided by the second specified argument. Also computes the quotient of the significand of the first specified argument divided by the significand of the second specified argument, and returns the quotient using the location specified in the third argument.  \n  \n```  \ninline float remquo(\n    float _X,  \n    float _Y,  \n    _Out_ int* _Quo) restrict(amp);\n\n \ninline double remquo(\n    double _X,  \n    double _Y,  \n    _Out_ int* _Quo) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n The first floating-point argument.  \n  \n `_Y`  \n The second floating-point argument.  \n  \n `_Quo` (out parameter)  \n The address of an integer that’s used to return the quotient of the fractional bits of `_X` divided by the fractional bits of `_Y`.  \n  \n### Return Value  \n Returns the remainder of `_X` divided by `_Y`.  \n  \n##  <a name=\"remquof_function\"></a>  remquof Function  \n Computes the remainder of the first specified argument divided by the second specified argument. Also computes the quotient of the significand of the first specified argument divided by the significand of the second specified argument, and returns the quotient using the location specified in the third argument.  \n  \n```  \ninline float remquof(\n    float _X,  \n    float _Y,  \n    _Out_ int* _Quo) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n The first floating-point argument.  \n  \n `_Y`  \n The second floating-point argument.  \n  \n `_Quo` (out parameter)  \n The address of an integer that’s used to return the quotient of the fractional bits of `_X` divided by the fractional bits of `_Y`.  \n  \n### Return Value  \n Returns the remainder of `_X` divided by `_Y`.  \n  \n##  <a name=\"round_function\"></a>  round Function  \n Rounds _X to the nearest integer  \n  \n```  \ninline float round(float _X) restrict(amp);\n\n \ninline double round(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the nearest integer of _X  \n  \n##  <a name=\"roundf_function\"></a>  roundf Function  \n Rounds _X to the nearest integer  \n  \n```  \ninline float roundf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the nearest integer of _X  \n  \n##  <a name=\"rsqrt_function\"></a>  rsqrt Function  \n Returns the reciprocal of the square root of the argument  \n  \n```  \ninline float rsqrt(float _X) restrict(amp);\n\n \ninline double rsqrt(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the reciprocal of the square root of the argument  \n  \n##  <a name=\"rsqrtf_function\"></a>  rsqrtf Function  \n Returns the reciprocal of the square root of the argument  \n  \n```  \ninline float rsqrtf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the reciprocal of the square root of the argument  \n  \n##  <a name=\"scalb_function\"></a>  scalb Function  \n Multiplies _X by FLT_RADIX to the power _Y  \n  \n```  \ninline float scalb(\n    float _X,  \n    float _Y) restrict(amp);\n\n \ninline double scalb(\n    double _X,  \n    double _Y) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n `_Y`  \n Floating-point value  \n  \n### Return Value  \n Returns _X * (FLT_RADIX ^ _Y)  \n  \n##  <a name=\"scalbf_function\"></a>  scalbf Function  \n Multiplies _X by FLT_RADIX to the power _Y  \n  \n```  \ninline float scalbf(\n    float _X,  \n    float _Y) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n `_Y`  \n Floating-point value  \n  \n### Return Value  \n Returns _X * (FLT_RADIX ^ _Y)  \n  \n##  <a name=\"scalbn_function\"></a>  scalbn Function  \n Multiplies _X by FLT_RADIX to the power _Y  \n  \n```  \ninline float scalbn(\n    float _X,  \n    int _Y) restrict(amp);\n\n \ninline double scalbn(\n    double _X,  \n    int _Y) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n `_Y`  \n Integer value  \n  \n### Return Value  \n Returns _X * (FLT_RADIX ^ _Y)  \n  \n##  <a name=\"scalbnf_function\"></a>  scalbnf Function  \n Multiplies _X by FLT_RADIX to the power _Y  \n  \n```  \ninline float scalbnf(\n    float _X,  \n    int _Y) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n `_Y`  \n Integer value  \n  \n### Return Value  \n Returns _X * (FLT_RADIX ^ _Y)  \n  \n##  <a name=\"signbit_function\"></a>  signbit Function  \n Determines whether the sign of _X is negative  \n  \n```  \ninline int signbit(float _X) restrict(amp);\n\n \ninline int signbit(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns a nonzero value if and only if the sign of _X is negative  \n  \n##  <a name=\"signbitf_function\"></a>  signbitf Function  \n Determines whether the sign of _X is negative  \n  \n```  \ninline int signbitf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns a nonzero value if and only if the sign of _X is negative  \n  \n##  <a name=\"sin_function\"></a>  sin Function  \n Calculates the sine value of the argument  \n  \n```  \ninline float sin(float _X) restrict(amp);\n\n \ninline double sin(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the sine value of the argument  \n  \n##  <a name=\"sinf_function\"></a>  sinf Function  \n Calculates the sine value of the argument  \n  \n```  \ninline float sinf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the sine value of the argument  \n  \n##  <a name=\"sincos_function\"></a>  sincos Function  \n Calculates sine and cosine value of _X  \n  \n```  \ninline void sincos(\n    float _X,  \n    _Out_ float* _S,  \n    _Out_ float* _C) restrict(amp);\n\n \ninline void sincos(\n    double _X,  \n    _Out_ double* _S,  \n    _Out_ double* _C) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n `_S`  \n Returns the sine value of _X  \n  \n `_C`  \n Returns the cosine value of _X  \n  \n##  <a name=\"sincosf_function\"></a>  sincosf Function  \n Calculates sine and cosine value of _X  \n  \n```  \ninline void sincosf(\n    float _X,  \n    _Out_ float* _S,  \n    _Out_ float* _C) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n `_S`  \n Returns the sine value of _X  \n  \n `_C`  \n Returns the cosine value of _X  \n  \n##  <a name=\"sinh_function\"></a>  sinh Function  \n Calculates the hyperbolic sine value of the argument  \n  \n```  \ninline float sinh(float _X) restrict(amp);\n\n \ninline double sinh(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the hyperbolic sine value of the argument  \n  \n##  <a name=\"sinhf_function\"></a>  sinhf Function  \n Calculates the hyperbolic sine value of the argument  \n  \n```  \ninline float sinhf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the hyperbolic sine value of the argument  \n  \n##  <a name=\"sinpi_function\"></a>  sinpi Function  \n Calculates the sine value of pi * _X  \n  \n```  \ninline float sinpi(float _X) restrict(amp);\n\n \ninline double sinpi(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the sine value of pi * _X  \n  \n##  <a name=\"sinpif_function\"></a>  sinpif Function  \n Calculates the sine value of pi * _X  \n  \n```  \ninline float sinpif(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the sine value of pi * _X  \n  \n##  <a name=\"sqrt_function\"></a>  sqrt Function  \n Calculates the squre root of the argument  \n  \n```  \ninline float sqrt(float _X) restrict(amp);\n\n \ninline double sqrt(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the squre root of the argument  \n  \n##  <a name=\"sqrtf_function\"></a>  sqrtf Function  \n Calculates the squre root of the argument  \n  \n```  \ninline float sqrtf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the squre root of the argument  \n  \n##  <a name=\"tan_function\"></a>  tan Function  \n Calculates the tangent value of the argument  \n  \n```  \ninline float tan(float _X) restrict(amp);\n\n \ninline double tan(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the tangent value of the argument  \n  \n##  <a name=\"tanf_function\"></a>  tanf Function  \n Calculates the tangent value of the argument  \n  \n```  \ninline float tanf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the tangent value of the argument  \n  \n##  <a name=\"tanh_function\"></a>  tanh Function  \n Calculates the hyperbolic tangent value of the argument  \n  \n```  \ninline float tanh(float _X) restrict(amp);\n\n \ninline double tanh(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the hyperbolic tangent value of the argument  \n  \n##  <a name=\"tanhf_function\"></a>  tanhf Function  \n Calculates the hyperbolic tangent value of the argument  \n  \n```  \ninline float tanhf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the hyperbolic tangent value of the argument  \n  \n##  <a name=\"tanpi_function\"></a>  tanpi Function  \n Calculates the tangent value of pi * _X  \n  \n```  \ninline float tanpi(float _X) restrict(amp);\n\n \ninline double tanpi(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the tangent value of pi * _X  \n  \n##  <a name=\"tanpif_function\"></a>  tanpif Function  \n Calculates the tangent value of pi * _X  \n  \n```  \ninline float tanpif(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the tangent value of pi * _X  \n  \n##  <a name=\"tgamma_function\"></a>  tgamma Function  \n Computes the gamma function of _X  \n  \n```  \ninline float tgamma(float _X) restrict(amp);\n\n \ninline double tgamma(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the result of gamma function of _X  \n  \n##  <a name=\"tgammaf_function\"></a>  tgammaf Function  \n Computes the gamma function of _X  \n  \n```  \ninline float tgammaf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the result of gamma function of _X  \n  \n##  <a name=\"trunc_function\"></a>  trunc Function  \n Truncates the argument to the integer component  \n  \n```  \ninline float trunc(float _X) restrict(amp);\n\n \ninline double trunc(double _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the integer component of the argument  \n  \n##  <a name=\"truncf_function\"></a>  truncf Function  \n Truncates the argument to the integer component  \n  \n```  \ninline float truncf(float _X) restrict(amp);\n```  \n  \n### Parameters  \n `_X`  \n Floating-point value  \n  \n### Return Value  \n Returns the integer component of the argument  \n  \n## See Also  \n [Concurrency::precise_math Namespace](concurrency-precise-math-namespace.md)\n"}