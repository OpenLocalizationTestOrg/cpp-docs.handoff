{"nodes":[{"pos":[12,42],"content":"Opening Files | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Opening Files | Microsoft Docs","pos":[0,30]}]},{"content":"Opening Files","pos":[956,969]},{"content":"In MFC, the most common way to open a file is a two-stage process.","pos":[970,1036]},{"content":"To open a file","pos":[1047,1061]},{"content":"Create the file object without specifying a path or permission flags.","pos":[1071,1140]},{"pos":[1151,1268],"content":"You usually create a file object by declaring a <bpt id=\"p1\">[</bpt>CFile<ept id=\"p1\">](../mfc/reference/cfile-class.md)</ept> variable on the stack frame.","source":"You usually create a file object by declaring a [CFile](../mfc/reference/cfile-class.md) variable on the stack frame."},{"pos":[1278,1414],"content":"Call the <bpt id=\"p1\">[</bpt>Open<ept id=\"p1\">](../mfc/reference/cfile-class.md#cfile__open)</ept> member function for the file object, supplying a path and permission flags.","source":"Call the [Open](../mfc/reference/cfile-class.md#cfile__open) member function for the file object, supplying a path and permission flags."},{"content":"The return value for <ph id=\"ph1\">`Open`</ph> will be nonzero if the file was opened successfully or 0 if the specified file could not be opened.","pos":[1425,1552],"source":"The return value for `Open` will be nonzero if the file was opened successfully or 0 if the specified file could not be opened."},{"content":"The <ph id=\"ph1\">`Open`</ph> member function is prototyped as follows:","pos":[1553,1605],"source":" The `Open` member function is prototyped as follows:"},{"content":"The open flags specify which permissions, such as read-only, you want for the file.","pos":[1719,1802]},{"content":"The possible flag values are defined as enumerated constants within the <ph id=\"ph1\">`CFile`</ph> class, so they are qualified with \"<ph id=\"ph2\">`CFile::`</ph>\" as in <ph id=\"ph3\">`CFile::modeRead`</ph>.","pos":[1803,1953],"source":" The possible flag values are defined as enumerated constants within the `CFile` class, so they are qualified with \"`CFile::`\" as in `CFile::modeRead`."},{"content":"Use the <ph id=\"ph1\">`CFile::modeCreate`</ph> flag if you want to create the file.","pos":[1954,2018],"source":" Use the `CFile::modeCreate` flag if you want to create the file."},{"content":"The following example shows how to create a new file with read/write permission (replacing any previous file with the same path):","pos":[2025,2154]},{"pos":[2172,2186],"content":"NVC_MFCFiles#1"},{"pos":[2261,2610],"content":"[!NOTE]\n This example creates and opens a file. If there are problems, the `Open` call can return a `CFileException` object in its last parameter, as shown here. The `TRACE` macro prints both the file name and a code indicating the reason for failure. You can call the `AfxThrowFileException` function if you require more detailed error reporting.","leadings":["","> "],"nodes":[{"content":" This example creates and opens a file. If there are problems, the `Open` call can return a `CFileException` object in its last parameter, as shown here. The `TRACE` macro prints both the file name and a code indicating the reason for failure. You can call the `AfxThrowFileException` function if you require more detailed error reporting.","pos":[8,347],"nodes":[{"content":"This example creates and opens a file.","pos":[1,39]},{"content":"If there are problems, the <ph id=\"ph1\">`Open`</ph> call can return a <ph id=\"ph2\">`CFileException`</ph> object in its last parameter, as shown here.","pos":[40,153],"source":" If there are problems, the `Open` call can return a `CFileException` object in its last parameter, as shown here."},{"content":"The <ph id=\"ph1\">`TRACE`</ph> macro prints both the file name and a code indicating the reason for failure.","pos":[154,243],"source":" The `TRACE` macro prints both the file name and a code indicating the reason for failure."},{"content":"You can call the <ph id=\"ph1\">`AfxThrowFileException`</ph> function if you require more detailed error reporting.","pos":[244,339],"source":" You can call the `AfxThrowFileException` function if you require more detailed error reporting."}]}]},{"content":"See Also","pos":[2619,2627]},{"content":"CFile Class","pos":[2632,2643]},{"content":"CFile::Open","pos":[2683,2694]},{"content":"Files","pos":[2746,2751]}],"content":"---\ntitle: \"Opening Files | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"Open member functions\"\n  - \"CFile class, variable\"\n  - \"opening files, in MFC\"\n  - \"Open calls\"\n  - \"Open method, CFile class\"\n  - \"examples [MFC], opening files\"\n  - \"opening files, handling exceptions\"\n  - \"exception handling [C++], when opening files\"\n  - \"files [C++], opening\"\n  - \"file objects [C++]\"\n  - \"MFC [C++], file operations\"\n  - \"opening files\"\n  - \"exception handling [C++], opening files\"\nms.assetid: a991b8ec-b04a-4766-b47e-7485b5dd0b01\ncaps.latest.revision: 11\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Opening Files\nIn MFC, the most common way to open a file is a two-stage process.  \n  \n#### To open a file  \n  \n1.  Create the file object without specifying a path or permission flags.  \n  \n     You usually create a file object by declaring a [CFile](../mfc/reference/cfile-class.md) variable on the stack frame.  \n  \n2.  Call the [Open](../mfc/reference/cfile-class.md#cfile__open) member function for the file object, supplying a path and permission flags.  \n  \n     The return value for `Open` will be nonzero if the file was opened successfully or 0 if the specified file could not be opened. The `Open` member function is prototyped as follows:  \n  \n     `virtual BOOL Open( LPCTSTR lpszFileName, UINT nOpenFlags, CFileException* pError = NULL );`  \n  \n     The open flags specify which permissions, such as read-only, you want for the file. The possible flag values are defined as enumerated constants within the `CFile` class, so they are qualified with \"`CFile::`\" as in `CFile::modeRead`. Use the `CFile::modeCreate` flag if you want to create the file.  \n  \n The following example shows how to create a new file with read/write permission (replacing any previous file with the same path):  \n  \n [!code-cpp[NVC_MFCFiles#1](../atl-mfc-shared/reference/codesnippet/cpp/opening-files_1.cpp)]  \n  \n> [!NOTE]\n>  This example creates and opens a file. If there are problems, the `Open` call can return a `CFileException` object in its last parameter, as shown here. The `TRACE` macro prints both the file name and a code indicating the reason for failure. You can call the `AfxThrowFileException` function if you require more detailed error reporting.  \n  \n## See Also  \n [CFile Class](../mfc/reference/cfile-class.md)   \n [CFile::Open](../mfc/reference/cfile-class.md#cfile__open)   \n [Files](../mfc/files-in-mfc.md)\n\n"}