{"nodes":[{"pos":[12,55],"content":"Sealing a Virtual Function | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Sealing a Virtual Function | Microsoft Docs","pos":[0,43]}]},{"content":"Sealing a Virtual Function","pos":[707,733]},{"pos":[734,895],"content":"The syntax for sealing a virtual function has changed from Managed Extensions for C++ to <ph id=\"ph1\">[!INCLUDE[cpp_current_long](../dotnet/includes/cpp_current_long_md.md)]</ph>.","source":"The syntax for sealing a virtual function has changed from Managed Extensions for C++ to [!INCLUDE[cpp_current_long](../dotnet/includes/cpp_current_long_md.md)]."},{"content":"The <ph id=\"ph1\">`__sealed`</ph> keyword is used in Managed Extensions to modify either a reference type, disallowing subsequent derivation from it (see <bpt id=\"p1\">[</bpt>Declaration of a Managed Class Type<ept id=\"p1\">](../dotnet/declaration-of-a-managed-class-type.md)</ept>), or to modify a virtual function, disallowing subsequent overriding of the method in a derived class.","pos":[902,1227],"source":"The `__sealed` keyword is used in Managed Extensions to modify either a reference type, disallowing subsequent derivation from it (see [Declaration of a Managed Class Type](../dotnet/declaration-of-a-managed-class-type.md)), or to modify a virtual function, disallowing subsequent overriding of the method in a derived class."},{"content":"For example:","pos":[1228,1240]},{"content":"In this example, <ph id=\"ph1\">`derived::f()`</ph> overrides the <ph id=\"ph2\">`base::f()`</ph> instance based on the exact match of the function prototype.","pos":[1387,1505],"source":"In this example, `derived::f()` overrides the `base::f()` instance based on the exact match of the function prototype."},{"content":"The <ph id=\"ph1\">`__sealed`</ph> keyword indicates that a subsequent class inherited from the derived class cannot provide an override of <ph id=\"ph2\">`derived::f()`</ph>.","pos":[1506,1641],"source":" The `__sealed` keyword indicates that a subsequent class inherited from the derived class cannot provide an override of `derived::f()`."},{"content":"In the new syntax, <ph id=\"ph1\">`sealed`</ph> is placed after the signature rather than being allowed to appear anywhere before the actual function prototype, as was previously allowed.","pos":[1648,1815],"source":"In the new syntax, `sealed` is placed after the signature rather than being allowed to appear anywhere before the actual function prototype, as was previously allowed."},{"content":"In addition, the use of <ph id=\"ph1\">`sealed`</ph> requires an explicit use of the <ph id=\"ph2\">`virtual`</ph> keyword as well.","pos":[1816,1907],"source":" In addition, the use of `sealed` requires an explicit use of the `virtual` keyword as well."},{"content":"That is, the correct translation of <ph id=\"ph1\">`derived`</ph>, above, is as follows:","pos":[1908,1976],"source":" That is, the correct translation of `derived`, above, is as follows:"},{"content":"The absence of the <ph id=\"ph1\">`virtual`</ph> keyword in this instance results in an error.","pos":[2087,2161],"source":"The absence of the `virtual` keyword in this instance results in an error."},{"content":"In the new syntax, the contextual keyword <ph id=\"ph1\">`abstract`</ph> can be used in place of the <ph id=\"ph2\">`=0`</ph> to indicate a pure virtual function.","pos":[2162,2284],"source":" In the new syntax, the contextual keyword `abstract` can be used in place of the `=0` to indicate a pure virtual function."},{"content":"This was not supported within Managed Extensions.","pos":[2285,2334]},{"content":"For example:","pos":[2335,2347]},{"content":"can be rewritten as","pos":[2420,2439]},{"content":"See Also","pos":[2520,2528]},{"content":"Member Declarations within a Class or Interface (C++/CLI)","pos":[2533,2590]},{"content":"sealed","pos":[2667,2673]}],"content":"---\ntitle: \"Sealing a Virtual Function | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"sealed keyword [C++]\"\n  - \"derived classes, virtual functions\"\n  - \"virtual functions, sealing\"\n  - \"__sealed keyword\"\nms.assetid: 0e9fae03-6425-4512-9a24-8ccb6dc8a0d4\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Sealing a Virtual Function\nThe syntax for sealing a virtual function has changed from Managed Extensions for C++ to [!INCLUDE[cpp_current_long](../dotnet/includes/cpp_current_long_md.md)].  \n  \n The `__sealed` keyword is used in Managed Extensions to modify either a reference type, disallowing subsequent derivation from it (see [Declaration of a Managed Class Type](../dotnet/declaration-of-a-managed-class-type.md)), or to modify a virtual function, disallowing subsequent overriding of the method in a derived class. For example:  \n  \n```  \n__gc class base { public: virtual void f(); };  \n__gc class derived : public base {  \npublic:  \n   __sealed void f();  \n};  \n```  \n  \n In this example, `derived::f()` overrides the `base::f()` instance based on the exact match of the function prototype. The `__sealed` keyword indicates that a subsequent class inherited from the derived class cannot provide an override of `derived::f()`.  \n  \n In the new syntax, `sealed` is placed after the signature rather than being allowed to appear anywhere before the actual function prototype, as was previously allowed. In addition, the use of `sealed` requires an explicit use of the `virtual` keyword as well. That is, the correct translation of `derived`, above, is as follows:  \n  \n```  \nref class derived: public base {  \npublic:  \n   virtual void f() override sealed;  \n};  \n```  \n  \n The absence of the `virtual` keyword in this instance results in an error. In the new syntax, the contextual keyword `abstract` can be used in place of the `=0` to indicate a pure virtual function. This was not supported within Managed Extensions. For example:  \n  \n```  \n__gc class base { public: virtual void f()=0; };  \n```  \n  \n can be rewritten as  \n  \n```  \nref class base { public: virtual void f() abstract; };  \n```  \n  \n## See Also  \n [Member Declarations within a Class or Interface (C++/CLI)](../dotnet/member-declarations-within-a-class-or-interface-cpp-cli.md)   \n [sealed](../windows/sealed-cpp-component-extensions.md)"}