{"nodes":[{"pos":[12,43],"content":"Using a Window | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Using a Window | Microsoft Docs","pos":[0,31]}]},{"content":"Using a Window","pos":[631,645]},{"content":"Class <bpt id=\"p1\">[</bpt>CWindow<ept id=\"p1\">](../atl/reference/cwindow-class.md)</ept> allows you to use a window.","pos":[646,724],"source":"Class [CWindow](../atl/reference/cwindow-class.md) allows you to use a window."},{"content":"Once you attach a window to a <ph id=\"ph1\">`CWindow`</ph> object, you can then call <ph id=\"ph2\">`CWindow`</ph> methods to manipulate the window.","pos":[725,834],"source":" Once you attach a window to a `CWindow` object, you can then call `CWindow` methods to manipulate the window."},{"content":"also contains an <ph id=\"ph1\">`HWND`</ph> operator to convert a <ph id=\"ph2\">`CWindow`</ph> object to an <ph id=\"ph3\">`HWND`</ph>.","pos":[845,921],"source":" also contains an `HWND` operator to convert a `CWindow` object to an `HWND`."},{"content":"Thus you can pass a <ph id=\"ph1\">`CWindow`</ph> object to any function that requires a handle to a window.","pos":[922,1010],"source":" Thus you can pass a `CWindow` object to any function that requires a handle to a window."},{"content":"You can easily mix <ph id=\"ph1\">`CWindow`</ph> method calls and Win32 function calls, without creating any temporary objects.","pos":[1011,1118],"source":" You can easily mix `CWindow` method calls and Win32 function calls, without creating any temporary objects."},{"content":"Because <ph id=\"ph1\">`CWindow`</ph> has only two data member (a window handle and the default dimensions), it does not impose an overhead on your code.","pos":[1125,1258],"source":"Because `CWindow` has only two data member (a window handle and the default dimensions), it does not impose an overhead on your code."},{"content":"In addition, many of the <ph id=\"ph1\">`CWindow`</ph> methods simply wrap corresponding Win32 API functions.","pos":[1259,1348],"source":" In addition, many of the `CWindow` methods simply wrap corresponding Win32 API functions."},{"content":"By using <ph id=\"ph1\">`CWindow`</ph>, the <ph id=\"ph2\">`HWND`</ph> member is automatically passed to the Win32 function.","pos":[1349,1433],"source":" By using `CWindow`, the `HWND` member is automatically passed to the Win32 function."},{"content":"In addition to using <ph id=\"ph1\">`CWindow`</ph> directly, you can also derive from it to add data or code to your class.","pos":[1440,1543],"source":"In addition to using `CWindow` directly, you can also derive from it to add data or code to your class."},{"content":"ATL itself derives three classes from <ph id=\"ph1\">`CWindow`</ph>: <bpt id=\"p1\">[</bpt>CWindowImpl<ept id=\"p1\">](../atl/implementing-a-window.md)</ept>, <bpt id=\"p2\">[</bpt>CDialogImpl<ept id=\"p2\">](../atl/implementing-a-dialog-box.md)</ept>, and <bpt id=\"p3\">[</bpt>CContainedWindowT<ept id=\"p3\">](../atl/using-contained-windows.md)</ept>.","pos":[1544,1752],"source":" ATL itself derives three classes from `CWindow`: [CWindowImpl](../atl/implementing-a-window.md), [CDialogImpl](../atl/implementing-a-dialog-box.md), and [CContainedWindowT](../atl/using-contained-windows.md)."},{"content":"See Also","pos":[1761,1769]},{"content":"Window Classes","pos":[1774,1788]}],"content":"---\ntitle: \"Using a Window | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ATL, windows\"\n  - \"CWindow class, about CWindow class\"\n  - \"windows [C++], ATL\"\nms.assetid: b3b9cc8e-4287-486b-b080-38852bc2943a\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Using a Window\nClass [CWindow](../atl/reference/cwindow-class.md) allows you to use a window. Once you attach a window to a `CWindow` object, you can then call `CWindow` methods to manipulate the window. `CWindow` also contains an `HWND` operator to convert a `CWindow` object to an `HWND`. Thus you can pass a `CWindow` object to any function that requires a handle to a window. You can easily mix `CWindow` method calls and Win32 function calls, without creating any temporary objects.  \n  \n Because `CWindow` has only two data member (a window handle and the default dimensions), it does not impose an overhead on your code. In addition, many of the `CWindow` methods simply wrap corresponding Win32 API functions. By using `CWindow`, the `HWND` member is automatically passed to the Win32 function.  \n  \n In addition to using `CWindow` directly, you can also derive from it to add data or code to your class. ATL itself derives three classes from `CWindow`: [CWindowImpl](../atl/implementing-a-window.md), [CDialogImpl](../atl/implementing-a-dialog-box.md), and [CContainedWindowT](../atl/using-contained-windows.md).  \n  \n## See Also  \n [Window Classes](../atl/atl-window-classes.md)\n\n"}