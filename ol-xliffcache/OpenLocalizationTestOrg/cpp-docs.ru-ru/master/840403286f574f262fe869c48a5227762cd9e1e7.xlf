<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">840403286f574f262fe869c48a5227762cd9e1e7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\dotnet\how-to-marshal-a-variant-for-adonet-cpp-cli.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7c6fc79196fbdfe2c43c4eb8392430d18d7a5c76</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">276942ebbeb0c1d37a0a4986d6cedcc780838d65</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Marshal a VARIANT for ADO.NET (C++-CLI) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Marshal a VARIANT for ADO.NET (C++/CLI)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Demonstrates how to add a native <ph id="ph1">`VARIANT`</ph> to a database and how to marshal a &lt;xref:System.Object?displayProperty=fullName&gt; from a database to a native <ph id="ph2">`VARIANT`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In this example, the class DatabaseClass is created to interact with an ADO.NET &lt;xref:System.Data.DataTable&gt; object.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Note that this class is a native C++ <ph id="ph1">`class`</ph> (as compared to a <ph id="ph2">`ref class`</ph> or <ph id="ph3">`value class`</ph>).</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This is necessary because we want to use this class from native code, and you cannot use managed types in native code.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This class will be compiled to target the CLR, as is indicated by the <ph id="ph1">`#pragma managed`</ph> directive preceding the class declaration.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information on this directive, see <bpt id="p1">[</bpt>managed, unmanaged<ept id="p1">](../preprocessor/managed-unmanaged.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Note the private member of the DatabaseClass class: <ph id="ph1">`gcroot&lt;DataTable ^&gt; table`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Since native types cannot contain managed types, the <ph id="ph1">`gcroot`</ph> keyword is necessary.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`gcroot`</ph>, see <bpt id="p1">[</bpt>How to: Declare Handles in Native Types<ept id="p1">](../dotnet/how-to-declare-handles-in-native-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The rest of the code in this example is native C++ code, as is indicated by the <ph id="ph1">`#pragma unmanaged`</ph> directive preceding <ph id="ph2">`main`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In this example, we are creating a new instance of DatabaseClass and calling its methods to create a table and populate some rows in the table.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Note that native <ph id="ph1">`VARIANT`</ph> types are being passed as values for the database column ObjectCol.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Inside DatabaseClass, these <ph id="ph1">`VARIANT`</ph> types are marshaled to managed objects using the marshaling functionality found in the &lt;xref:System.Runtime.InteropServices?displayProperty=fullName&gt; namespace.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Specifically, the method &lt;xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%2A&gt; is used to marshal a <ph id="ph1">`VARIANT`</ph> to an &lt;xref:System.Object&gt;, and the method &lt;xref:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject%2A&gt; is used to marshal an &lt;xref:System.Object&gt; to a <ph id="ph2">`VARIANT`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To compile the code from the command line, save the code example in a file named adonet_marshal_variant.cpp and enter the following statement:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>.NET Framework Security</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For information on security issues involving ADO.NET, see <bpt id="p1">[</bpt>Securing ADO.NET Applications<ept id="p1">](http://msdn.microsoft.com/Library/005a1d43-6ee5-471e-ad98-1d30a44d49d5)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Runtime.InteropServices&gt;</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Data Access Using ADO.NET (C++/CLI)</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>ADO.NET</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Interoperability</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Native and .NET Interoperability</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>