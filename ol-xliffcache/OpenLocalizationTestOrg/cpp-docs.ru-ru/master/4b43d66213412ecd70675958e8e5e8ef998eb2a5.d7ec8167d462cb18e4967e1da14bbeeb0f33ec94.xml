{"nodes":[{"pos":[12,65],"content":"Member Access Operators: . and -&gt; | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Member Access Operators: . and -&gt; | Microsoft Docs","pos":[0,53],"nodes":[{"content":"Member Access Operators: .","pos":[0,26]},{"content":"and -<ph id=\"ph1\">&amp;gt;</ph> | Microsoft Docs","pos":[27,53],"source":" and -&gt; | Microsoft Docs"}]}]},{"content":"Member Access Operators: .","pos":[813,839]},{"content":"and -","pos":[840,845]},{"content":"Syntax","pos":[853,859]},{"content":"Remarks","pos":[940,947]},{"content":"The member access operators <bpt id=\"p1\">**</bpt>.<ept id=\"p1\">**</ept>","pos":[951,984],"source":"The member access operators **.**"},{"content":"and <bpt id=\"p1\">**</bpt><ph id=\"ph1\">-&gt;</ph><ept id=\"p1\">**</ept> are used to refer to members of structures, unions, and classes.","pos":[985,1060],"source":" and **->** are used to refer to members of structures, unions, and classes."},{"content":"Member access expressions have the value and type of the selected member.","pos":[1061,1134]},{"content":"There are two forms of member access expressions:","pos":[1141,1190]},{"content":"In the first form, <bpt id=\"p1\">*</bpt>postfix-expression<ept id=\"p1\">*</ept> represents a value of struct, class, or union type, and <bpt id=\"p2\">*</bpt>name<ept id=\"p2\">*</ept> names a member of the specified structure, union, or class.","pos":[1200,1362],"source":"In the first form, *postfix-expression* represents a value of struct, class, or union type, and *name* names a member of the specified structure, union, or class."},{"content":"The value of the operation is that of <bpt id=\"p1\">*</bpt>name<ept id=\"p1\">*</ept> and is an l-value if <bpt id=\"p2\">*</bpt>postfix-expression<ept id=\"p2\">*</ept> is an l-value.","pos":[1363,1464],"source":" The value of the operation is that of *name* and is an l-value if *postfix-expression* is an l-value."},{"content":"In the second form, <bpt id=\"p1\">*</bpt>postfix-expression<ept id=\"p1\">*</ept> represents a pointer to a structure, union, or class, and <bpt id=\"p2\">*</bpt>name<ept id=\"p2\">*</ept> names a member of the specified structure, union, or class.","pos":[1474,1639],"source":"In the second form, *postfix-expression* represents a pointer to a structure, union, or class, and *name* names a member of the specified structure, union, or class."},{"content":"The value is that of <bpt id=\"p1\">*</bpt>name<ept id=\"p1\">*</ept> and is an l-value.","pos":[1640,1686],"source":" The value is that of *name* and is an l-value."},{"content":"The <bpt id=\"p1\">**</bpt>–&gt;<ept id=\"p1\">**</ept> operator dereferences the pointer.","pos":[1687,1732],"source":" The **–>** operator dereferences the pointer."},{"content":"Therefore, the expressions <bpt id=\"p1\">*</bpt>e<ept id=\"p1\">*</ept><bpt id=\"p2\">**</bpt>–&gt;<ept id=\"p2\">**</ept><ph id=\"ph1\">`member`</ph> and <bpt id=\"p3\">**</bpt>(<ph id=\"ph2\">\\*</ph><ept id=\"p3\">**</ept><bpt id=\"p4\">*</bpt>e<ept id=\"p4\">*</ept><bpt id=\"p5\">**</bpt>)<ept id=\"p5\">**</ept>.","pos":[1733,1798],"source":" Therefore, the expressions *e***–>**`member` and **(\\****e***)**."},{"content":"(where <bpt id=\"p1\">*</bpt>e<ept id=\"p1\">*</ept> represents a pointer) yield identical results (except when the operators <bpt id=\"p2\">**</bpt>–&gt;<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt><ph id=\"ph1\">\\*</ph><ept id=\"p3\">**</ept> are overloaded).","pos":[1807,1924],"source":" (where *e* represents a pointer) yield identical results (except when the operators **–>** or **\\*** are overloaded)."},{"content":"Example","pos":[1933,1940]},{"content":"The following example demonstrates both forms of the member access operator.","pos":[1944,2020]},{"content":"See Also","pos":[2673,2681]},{"content":"Postfix Expressions","pos":[2686,2705]},{"content":"C++ Built-in Operators, Precedence and Associativity","pos":[2743,2795]},{"content":"Classes and Structs","pos":[2865,2884]},{"content":"Structure and Union Members","pos":[2926,2953]}],"content":"---\ntitle: \"Member Access Operators: . and -&gt; | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \".\"\n  - \"->\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"member access, expressions\"\n  - \"operators [C++], member access\"\n  - \"dot operator (.)\"\n  - \"-> operator\"\n  - \"member access, operators\"\n  - \"postfix operators\"\n  - \". operator\"\n  - \"member access\"\nms.assetid: f8fc3df9-d728-40c5-b384-276927f5f1b3\ncaps.latest.revision: 11\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Member Access Operators: . and -&gt;\n## Syntax  \n  \n```  \npostfix-expression . name  \npostfix-expression –> name  \n```  \n  \n## Remarks  \n The member access operators **.** and **->** are used to refer to members of structures, unions, and classes. Member access expressions have the value and type of the selected member.  \n  \n There are two forms of member access expressions:  \n  \n1.  In the first form, *postfix-expression* represents a value of struct, class, or union type, and *name* names a member of the specified structure, union, or class. The value of the operation is that of *name* and is an l-value if *postfix-expression* is an l-value.  \n  \n2.  In the second form, *postfix-expression* represents a pointer to a structure, union, or class, and *name* names a member of the specified structure, union, or class. The value is that of *name* and is an l-value. The **–>** operator dereferences the pointer. Therefore, the expressions *e***–>**`member` and **(\\****e***)**.`member` (where *e* represents a pointer) yield identical results (except when the operators **–>** or **\\*** are overloaded).  \n  \n## Example  \n The following example demonstrates both forms of the member access operator.  \n  \n```  \n// expre_Selection_Operator.cpp  \n// compile with: /EHsc  \n#include <iostream>  \nusing namespace std;  \n  \nstruct Date {  \n   Date(int i, int j, int k) : day(i), month(j), year(k){}  \n   int month;  \n   int day;  \n   int year;  \n};  \n  \nint main() {  \n   Date mydate(1,1,1900);  \n   mydate.month = 2;     \n   cout  << mydate.month << \"/\" << mydate.day  \n         << \"/\" << mydate.year << endl;  \n  \n   Date *mydate2 = new Date(1,1,2000);  \n   mydate2->month = 2;  \n   cout  << mydate2->month << \"/\" << mydate2->day  \n         << \"/\" << mydate2->year << endl;  \n   delete mydate2;  \n}  \n```  \n  \n```Output  \n2/1/1900  \n2/1/2000  \n```  \n  \n## See Also  \n [Postfix Expressions](../cpp/postfix-expressions.md)   \n [C++ Built-in Operators, Precedence and Associativity](../cpp/cpp-built-in-operators-precedence-and-associativity.md)   \n [Classes and Structs](../cpp/classes-and-structs-cpp.md)   \n [Structure and Union Members](../c-language/structure-and-union-members.md)"}