{"nodes":[{"pos":[12,53],"content":"&lt;vector&gt; operators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"vector<ph id=\"ph1\">&amp;gt;</ph> operators | Microsoft Docs","pos":[4,41],"source":"vector&gt; operators | Microsoft Docs"}]},{"content":"vector<ph id=\"ph1\">&amp;gt;</ph> operators","pos":[260,280],"source":"vector&gt; operators"},{"content":"operator!=","pos":[300,310]},{"content":"operator","pos":[328,336]},{"content":"operator","pos":[358,366]},{"content":"operator","pos":[396,404]},{"content":"operator","pos":[426,434]},{"content":"operator==","pos":[460,470]},{"pos":[528,538],"content":"operator!="},{"content":"Tests if the object on the left side of the operator is not equal to the object on the right side.","pos":[542,640]},{"content":"Parameters","pos":[757,767]},{"content":"An object of type <bpt id=\"p1\">**</bpt>vector<ept id=\"p1\">**</ept>.","pos":[782,811],"source":" An object of type **vector**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>vector<ept id=\"p1\">**</ept>.","pos":[830,859],"source":" An object of type **vector**."},{"content":"Return Value","pos":[869,881]},{"pos":[885,959],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the vectors are not equal; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if the vectors are equal.","source":"**true** if the vectors are not equal; **false** if the vectors are equal."},{"content":"Remarks","pos":[969,976]},{"content":"Two vectors are equal if they have the same number of elements and their respective elements have the same values.","pos":[980,1094]},{"content":"Otherwise, they are unequal.","pos":[1095,1123]},{"content":"Example","pos":[1133,1140]},{"pos":[1582,1590],"content":"operator"},{"content":"Tests if the object on the left side of the operator is less than the object on the right side.","pos":[1598,1693]},{"content":"Parameters","pos":[1809,1819]},{"content":"An object of type <bpt id=\"p1\">**</bpt>vector<ept id=\"p1\">**</ept>.","pos":[1834,1863],"source":" An object of type **vector**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>vector<ept id=\"p1\">**</ept>.","pos":[1882,1911],"source":" An object of type **vector**."},{"content":"Return Value","pos":[1921,1933]},{"pos":[1937,2072],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the vector on the left side of the operator is less than the vector on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the vector on the left side of the operator is less than the vector on the right side of the operator; otherwise **false**."},{"content":"Example","pos":[2082,2089]},{"pos":[2658,2666],"content":"operator"},{"content":"Tests if the object on the left side of the operator is less than or equal to the object on the right side.","pos":[2675,2782]},{"content":"Parameters","pos":[2899,2909]},{"content":"An object of type <bpt id=\"p1\">**</bpt>vector<ept id=\"p1\">**</ept>.","pos":[2924,2953],"source":" An object of type **vector**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>vector<ept id=\"p1\">**</ept>.","pos":[2972,3001],"source":" An object of type **vector**."},{"content":"Return Value","pos":[3011,3023]},{"pos":[3027,3174],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the vector on the left side of the operator is less than or equal to the vector on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the vector on the left side of the operator is less than or equal to the vector on the right side of the operator; otherwise **false**."},{"content":"Example","pos":[3184,3191]},{"pos":[3783,3793],"content":"operator=="},{"content":"Tests if the object on the left side of the operator is equal to the object on the right side.","pos":[3797,3891]},{"content":"Parameters","pos":[4008,4018]},{"content":"An object of type <bpt id=\"p1\">**</bpt>vector<ept id=\"p1\">**</ept>.","pos":[4033,4062],"source":" An object of type **vector**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>vector<ept id=\"p1\">**</ept>.","pos":[4081,4110],"source":" An object of type **vector**."},{"content":"Return Value","pos":[4120,4132]},{"pos":[4136,4270],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the vector on the left side of the operator is equal to the vector on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the vector on the left side of the operator is equal to the vector on the right side of the operator; otherwise **false**."},{"content":"Remarks","pos":[4280,4287]},{"content":"Two vectors are equal if they have the same number of elements and their respective elements have the same values.","pos":[4291,4405]},{"content":"Otherwise, they are unequal.","pos":[4406,4434]},{"content":"Example","pos":[4444,4451]},{"pos":[4886,4894],"content":"operator"},{"content":"Tests if the object on the left side of the operator is greater than the object on the right side.","pos":[4902,5000]},{"content":"Parameters","pos":[5116,5126]},{"content":"An object of type <bpt id=\"p1\">**</bpt>vector<ept id=\"p1\">**</ept>.","pos":[5141,5170],"source":" An object of type **vector**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>vector<ept id=\"p1\">**</ept>.","pos":[5189,5218],"source":" An object of type **vector**."},{"content":"Return Value","pos":[5228,5240]},{"pos":[5244,5382],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the vector on the left side of the operator is greater than the vector on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the vector on the left side of the operator is greater than the vector on the right side of the operator; otherwise **false**."},{"content":"Example","pos":[5392,5399]},{"pos":[6001,6009],"content":"operator"},{"content":"Tests if the object on the left side of the operator is greater than or equal to the object on the right side.","pos":[6018,6128]},{"content":"Parameters","pos":[6245,6255]},{"content":"An object of type <bpt id=\"p1\">**</bpt>vector<ept id=\"p1\">**</ept>.","pos":[6270,6299],"source":" An object of type **vector**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>vector<ept id=\"p1\">**</ept>.","pos":[6318,6347],"source":" An object of type **vector**."},{"content":"Return Value","pos":[6357,6369]},{"pos":[6373,6521],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the vector on the left side of the operator is greater than or equal to the vector on the right side of the vector; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the vector on the left side of the operator is greater than or equal to the vector on the right side of the vector; otherwise **false**."},{"content":"Example","pos":[6531,6538]},{"content":"See Also","pos":[7127,7135]},{"content":"vector&gt;","pos":[7142,7149],"source":"vector>"}],"content":"---\ntitle: \"&lt;vector&gt; operators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 1d14f312-6f59-4ec7-88ae-95f89a558823\ncaps.latest.revision: 13\nmanager: \"ghogen\"\n---\n# &lt;vector&gt; operators\n||||  \n|-|-|-|  \n|[operator!=](#operator_neq)|[operator&gt;](#operator_gt_)|[operator&gt;=](#operator_gt__eq)|  \n|[operator&lt;](#operator_lt_)|[operator&lt;=](#operator_lt__eq)|[operator==](#operator_eq_eq)|  \n  \n##  <a name=\"operator_neq\"></a>  operator!=  \n Tests if the object on the left side of the operator is not equal to the object on the right side.  \n  \n```  \nbool operator!=(const vector<Type, Allocator>& left, const vector<Type, Allocator>& right);\n```  \n  \n### Parameters  \n ` left`  \n An object of type **vector**.  \n  \n ` right`  \n An object of type **vector**.  \n  \n### Return Value  \n **true** if the vectors are not equal; **false** if the vectors are equal.  \n  \n### Remarks  \n Two vectors are equal if they have the same number of elements and their respective elements have the same values. Otherwise, they are unequal.  \n  \n### Example  \n  \n```cpp  \n// vector_op_ne.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )   \n{  \n   using namespace std;   \n  \n   vector <int> v1, v2;  \n   v1.push_back( 1 );  \n     v2.push_back( 2 );  \n  \n   if ( v1 != v2 )  \n      cout << \"Vectors not equal.\" << endl;  \n   else  \n      cout << \"Vectors equal.\" << endl;  \n}  \n```  \n  \n```Output  \nVectors not equal.  \n```  \n  \n##  <a name=\"operator_lt_\"></a>  operator&lt;  \n Tests if the object on the left side of the operator is less than the object on the right side.  \n  \n```  \nbool operator<(const vector<Type, Allocator>& left, const vector<Type, Allocator>& right);\n```  \n  \n### Parameters  \n ` left`  \n An object of type **vector**.  \n  \n ` right`  \n An object of type **vector**.  \n  \n### Return Value  \n **true** if the vector on the left side of the operator is less than the vector on the right side of the operator; otherwise **false**.  \n  \n### Example  \n  \n```cpp  \n// vector_op_lt.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;   \n  \n   vector <int> v1, v2;  \n   v1.push_back( 1 );  \n   v1.push_back( 2 );  \n   v1.push_back( 4 );  \n  \n   v2.push_back( 1 );  \n   v2.push_back( 3 );  \n  \n   if ( v1 < v2 )  \n      cout << \"Vector v1 is less than vector v2.\" << endl;  \n   else  \n      cout << \"Vector v1 is not less than vector v2.\" << endl;  \n}  \n```  \n  \n```Output  \nVector v1 is less than vector v2.  \n```  \n  \n##  <a name=\"operator_lt__eq\"></a>  operator&lt;=  \n Tests if the object on the left side of the operator is less than or equal to the object on the right side.  \n  \n```  \nbool operator<=(const vector<Type, Allocator>& left, const vector<Type, Allocator>& right);\n```  \n  \n### Parameters  \n ` left`  \n An object of type **vector**.  \n  \n ` right`  \n An object of type **vector**.  \n  \n### Return Value  \n **true** if the vector on the left side of the operator is less than or equal to the vector on the right side of the operator; otherwise **false**.  \n  \n### Example  \n  \n```cpp  \n// vector_op_le.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;   \n  \n   vector <int> v1, v2;  \n   v1.push_back( 1 );  \n   v1.push_back( 2 );  \n   v1.push_back( 4 );  \n  \n   v2.push_back( 1 );  \n   v2.push_back( 3 );  \n  \n   if ( v1 <= v2 )  \n      cout << \"Vector v1 is less than or equal to vector v2.\" << endl;  \n   else  \n      cout << \"Vector v1 is greater than vector v2.\" << endl;  \n}  \n```  \n  \n```Output  \nVector v1 is less than or equal to vector v2.  \n```  \n  \n##  <a name=\"operator_eq_eq\"></a>  operator==  \n Tests if the object on the left side of the operator is equal to the object on the right side.  \n  \n```  \nbool operator==(const vector<Type, Allocator>& left, const vector<Type, Allocator>& right);\n```  \n  \n### Parameters  \n ` left`  \n An object of type **vector**.  \n  \n ` right`  \n An object of type **vector**.  \n  \n### Return Value  \n **true** if the vector on the left side of the operator is equal to the vector on the right side of the operator; otherwise **false**.  \n  \n### Remarks  \n Two vectors are equal if they have the same number of elements and their respective elements have the same values. Otherwise, they are unequal.  \n  \n### Example  \n  \n```cpp  \n// vector_op_eq.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;   \n  \n   vector <int> v1, v2;  \n   v1.push_back( 1 );  \n   v2.push_back( 1 );  \n  \n   if ( v1 == v2 )  \n      cout << \"Vectors equal.\" << endl;  \n   else  \n      cout << \"Vectors not equal.\" << endl;  \n}  \n```  \n  \n```Output  \nVectors equal.  \n```  \n  \n##  <a name=\"operator_gt_\"></a>  operator&gt;  \n Tests if the object on the left side of the operator is greater than the object on the right side.  \n  \n```  \nbool operator>(const vector<Type, Allocator>& left, const vector<Type, Allocator>& right);\n```  \n  \n### Parameters  \n ` left`  \n An object of type **vector**.  \n  \n ` right`  \n An object of type **vector**.  \n  \n### Return Value  \n **true** if the vector on the left side of the operator is greater than the vector on the right side of the operator; otherwise **false**.  \n  \n### Example  \n  \n```cpp  \n// vector_op_gt.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;   \n  \n   vector <int> v1, v2;  \n   v1.push_back( 1 );  \n   v1.push_back( 3 );  \n   v1.push_back( 1 );  \n  \n   v2.push_back( 1 );  \n   v2.push_back( 2 );  \n   v2.push_back( 2 );  \n  \n   if ( v1 > v2 )  \n      cout << \"Vector v1 is greater than vector v2.\" << endl;  \n   else  \n      cout << \"Vector v1 is not greater than vector v2.\" << endl;  \n}  \n```  \n  \n```Output  \nVector v1 is greater than vector v2.  \n```  \n  \n##  <a name=\"operator_gt__eq\"></a>  operator&gt;=  \n Tests if the object on the left side of the operator is greater than or equal to the object on the right side.  \n  \n```  \nbool operator>=(const vector<Type, Allocator>& left, const vector<Type, Allocator>& right);\n```  \n  \n### Parameters  \n ` left`  \n An object of type **vector**.  \n  \n ` right`  \n An object of type **vector**.  \n  \n### Return Value  \n **true** if the vector on the left side of the operator is greater than or equal to the vector on the right side of the vector; otherwise **false**.  \n  \n### Example  \n  \n```cpp  \n// vector_op_ge.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;   \n  \n   vector <int> v1, v2;  \n   v1.push_back( 1 );  \n   v1.push_back( 3 );  \n   v1.push_back( 1 );  \n  \n     v2.push_back( 1 );  \n   v2.push_back( 2 );  \n   v2.push_back( 2 );  \n  \n   if ( v1 >= v2 )  \n      cout << \"Vector v1 is greater than or equal to vector v2.\" << endl;  \n   else  \n      cout << \"Vector v1 is less than vector v2.\" << endl;  \n}  \n```  \n  \n```Output  \nVector v1 is greater than or equal to vector v2.  \n```  \n  \n## See Also  \n [\\<vector>](../standard-library/vector.md)\n\n"}