{"nodes":[{"pos":[12,44],"content":"Example Program | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Example Program | Microsoft Docs","pos":[0,32]}]},{"content":"Example Program","pos":[532,547]},{"content":"The following C source program consists of two source files.","pos":[548,608]},{"content":"It gives an overview of some of the various declarations and definitions possible in a C program.","pos":[609,706]},{"content":"Later sections in this book describe how to write these declarations, definitions, and initializations, and how to use C keywords such as <bpt id=\"p1\">**</bpt>static<ept id=\"p1\">**</ept> and <ph id=\"ph1\">`extern`</ph>.","pos":[707,869],"source":" Later sections in this book describe how to write these declarations, definitions, and initializations, and how to use C keywords such as **static** and `extern`."},{"content":"The <ph id=\"ph1\">`printf`</ph> function is declared in the C header file STDIO.H.","pos":[870,933],"source":" The `printf` function is declared in the C header file STDIO.H."},{"content":"The <ph id=\"ph1\">`main`</ph> and <ph id=\"ph2\">`max`</ph> functions are assumed to be in separate files, and execution of the program begins with the <ph id=\"ph3\">`main`</ph> function.","pos":[940,1069],"source":"The `main` and `max` functions are assumed to be in separate files, and execution of the program begins with the `main` function."},{"content":"No explicit user functions are executed before <ph id=\"ph1\">`main`</ph>.","pos":[1070,1124],"source":" No explicit user functions are executed before `main`."},{"content":"FILE1.C contains the prototype for the <ph id=\"ph1\">`max`</ph> function.","pos":[2861,2915],"source":"FILE1.C contains the prototype for the `max` function."},{"content":"This kind of declaration is sometimes called a \"forward declaration\" because the function is declared before it is used.","pos":[2916,3036]},{"content":"The definition for the <ph id=\"ph1\">`main`</ph> function includes calls to <ph id=\"ph2\">`max`</ph>.","pos":[3037,3100],"source":" The definition for the `main` function includes calls to `max`."},{"content":"The lines beginning with <ph id=\"ph1\">`#define`</ph> are preprocessor directives.","pos":[3107,3170],"source":"The lines beginning with `#define` are preprocessor directives."},{"content":"These directives tell the preprocessor to replace the identifiers <ph id=\"ph1\">`ONE`</ph>, <ph id=\"ph2\">`TWO`</ph>, and <ph id=\"ph3\">`THREE`</ph> with the numbers <ph id=\"ph4\">`1`</ph>, <ph id=\"ph5\">`2`</ph>, and <ph id=\"ph6\">`3`</ph>, respectively, throughout FILE1.C.","pos":[3171,3332],"source":" These directives tell the preprocessor to replace the identifiers `ONE`, `TWO`, and `THREE` with the numbers `1`, `2`, and `3`, respectively, throughout FILE1.C."},{"content":"However, the directives do not apply to FILE2.C, which is compiled separately and then linked with FILE1.C.","pos":[3333,3440]},{"content":"The line beginning with <ph id=\"ph1\">`#include`</ph> tells the compiler to include the file STDIO.H, which contains the prototype for the <ph id=\"ph2\">`printf`</ph> function.","pos":[3441,3579],"source":" The line beginning with `#include` tells the compiler to include the file STDIO.H, which contains the prototype for the `printf` function."},{"content":"<bpt id=\"p1\">[</bpt>Preprocessor directives<ept id=\"p1\">](../preprocessor/preprocessor-directives.md)</ept> are explained in the <bpt id=\"p2\">*</bpt>Preprocessor Reference<ept id=\"p2\">*</ept>.","pos":[3580,3696],"source":"[Preprocessor directives](../preprocessor/preprocessor-directives.md) are explained in the *Preprocessor Reference*."},{"content":"FILE1.C uses defining declarations to initialize the global variables <ph id=\"ph1\">`a`</ph> and <ph id=\"ph2\">`b`</ph>.","pos":[3703,3785],"source":"FILE1.C uses defining declarations to initialize the global variables `a` and `b`."},{"content":"The local variables <ph id=\"ph1\">`c`</ph> and <ph id=\"ph2\">`d`</ph> are declared but not initialized.","pos":[3786,3851],"source":" The local variables `c` and `d` are declared but not initialized."},{"content":"Storage is allocated for all these variables.","pos":[3852,3897]},{"content":"The static and external variables, <ph id=\"ph1\">`u`</ph> and <ph id=\"ph2\">`v`</ph>, are automatically initialized to 0.","pos":[3898,3981],"source":" The static and external variables, `u` and `v`, are automatically initialized to 0."},{"content":"Therefore only <ph id=\"ph1\">`a`</ph>, <ph id=\"ph2\">`b`</ph>, <ph id=\"ph3\">`u`</ph>, and <ph id=\"ph4\">`v`</ph> contain meaningful values when declared because they are initialized, either explicitly or implicitly.","pos":[3982,4122],"source":" Therefore only `a`, `b`, `u`, and `v` contain meaningful values when declared because they are initialized, either explicitly or implicitly."},{"content":"FILE2.C contains the function definition for <ph id=\"ph1\">`max`</ph>.","pos":[4123,4174],"source":" FILE2.C contains the function definition for `max`."},{"content":"This definition satisfies the calls to <ph id=\"ph1\">`max`</ph> in FILE1.C.","pos":[4175,4231],"source":" This definition satisfies the calls to `max` in FILE1.C."},{"content":"The lifetime and visibility of identifiers are discussed in <bpt id=\"p1\">[</bpt>Lifetime, Scope, Visibility, and Linkage<ept id=\"p1\">](../c-language/lifetime-scope-visibility-and-linkage.md)</ept>.","pos":[4238,4397],"source":"The lifetime and visibility of identifiers are discussed in [Lifetime, Scope, Visibility, and Linkage](../c-language/lifetime-scope-visibility-and-linkage.md)."},{"content":"For more information on functions, see <bpt id=\"p1\">[</bpt>Functions<ept id=\"p1\">](../c-language/functions-c.md)</ept>.","pos":[4398,4479],"source":" For more information on functions, see [Functions](../c-language/functions-c.md)."},{"content":"See Also","pos":[4488,4496]},{"content":"Source Files and Source Programs","pos":[4501,4533]}],"content":"---\ntitle: \"Example Program | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nms.assetid: fc22ef82-9caa-425f-b201-2891bc123d1f\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Example Program\nThe following C source program consists of two source files. It gives an overview of some of the various declarations and definitions possible in a C program. Later sections in this book describe how to write these declarations, definitions, and initializations, and how to use C keywords such as **static** and `extern`. The `printf` function is declared in the C header file STDIO.H.  \n  \n The `main` and `max` functions are assumed to be in separate files, and execution of the program begins with the `main` function. No explicit user functions are executed before `main`.  \n  \n```  \n/*****************************************************************  \n                    FILE1.C - main function  \n*****************************************************************/  \n  \n#define ONE     1  \n#define TWO     2  \n#define THREE   3  \n#include <stdio.h>  \n  \nint a = 1;                       // Defining declarations      \nint b = 2;                       //  of external variables      \n  \nextern int max( int a, int b );  // Function prototype          \n  \nint main()                       // Function definition         \n{                                //  for main function          \n    int c;                       // Definitions for      \n    int d;                       //  two uninitialized  \n                                 //  local variables  \n  \n    extern int u;                // Referencing declaration     \n                                 //  of external variable       \n                                 //  defined elsewhere          \n    static int v;                // Definition of variable      \n                                 //  with continuous lifetime   \n  \n    int w = ONE, x = TWO, y = THREE;  \n    int z = 0;  \n  \n    z = max( x, y );             // Executable statements      \n    w = max( z, w );  \n    printf_s( \"%d %d\\n\", z, w );  \n    return 0;  \n}  \n  \n/****************************************************************  \n            FILE2.C - definition of max function  \n****************************************************************/  \n  \nint max( int a, int b )          // Note formal parameters are     \n                                 //  included in function header   \n{  \n    if( a > b )  \n        return( a );  \n    else  \n        return( b );  \n}  \n```  \n  \n FILE1.C contains the prototype for the `max` function. This kind of declaration is sometimes called a \"forward declaration\" because the function is declared before it is used. The definition for the `main` function includes calls to `max`.  \n  \n The lines beginning with `#define` are preprocessor directives. These directives tell the preprocessor to replace the identifiers `ONE`, `TWO`, and `THREE` with the numbers `1`, `2`, and `3`, respectively, throughout FILE1.C. However, the directives do not apply to FILE2.C, which is compiled separately and then linked with FILE1.C. The line beginning with `#include` tells the compiler to include the file STDIO.H, which contains the prototype for the `printf` function. [Preprocessor directives](../preprocessor/preprocessor-directives.md) are explained in the *Preprocessor Reference*.  \n  \n FILE1.C uses defining declarations to initialize the global variables `a` and `b`. The local variables `c` and `d` are declared but not initialized. Storage is allocated for all these variables. The static and external variables, `u` and `v`, are automatically initialized to 0. Therefore only `a`, `b`, `u`, and `v` contain meaningful values when declared because they are initialized, either explicitly or implicitly. FILE2.C contains the function definition for `max`. This definition satisfies the calls to `max` in FILE1.C.  \n  \n The lifetime and visibility of identifiers are discussed in [Lifetime, Scope, Visibility, and Linkage](../c-language/lifetime-scope-visibility-and-linkage.md). For more information on functions, see [Functions](../c-language/functions-c.md).  \n  \n## See Also  \n [Source Files and Source Programs](../c-language/source-files-and-source-programs.md)"}