{"nodes":[{"pos":[12,57],"content":"operator&gt; (map) (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"operator<ph id=\"ph1\">&amp;gt;</ph> (map) (STL-CLR) | Microsoft Docs","pos":[0,45],"source":"operator&gt; (map) (STL-CLR) | Microsoft Docs"}]},{"content":"operator<ph id=\"ph1\">&amp;gt;</ph> (map) (STL/CLR)","pos":[638,666],"source":"operator&gt; (map) (STL/CLR)"},{"content":"List greater than comparison.","pos":[667,696]},{"content":"Syntax","pos":[705,711]},{"content":"Parameters","pos":[866,876]},{"content":"left","pos":[880,884]},{"content":"Left container to compare.","pos":[888,914]},{"content":"right","pos":[921,926]},{"content":"Right container to compare.","pos":[930,957]},{"content":"Remarks","pos":[966,973]},{"content":"The operator function returns <ph id=\"ph1\">`right`</ph> <ph id=\"ph2\">`&lt;`</ph> <ph id=\"ph3\">`left`</ph>.","pos":[977,1026],"source":"The operator function returns `right` `<` `left`."},{"content":"You use it to test whether <ph id=\"ph1\">`left`</ph> is ordered after <ph id=\"ph2\">`right`</ph> when the two maps are compared element by element.","pos":[1027,1136],"source":" You use it to test whether `left` is ordered after `right` when the two maps are compared element by element."},{"content":"Example","pos":[1145,1152]},{"content":"Requirements","pos":[2407,2419]},{"pos":[2423,2448],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/map&gt;","source":"**Header:** \\<cliext/map>"},{"pos":[2455,2476],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2485,2493]},{"content":"map (STL/CLR)","pos":[2498,2511]},{"content":"operator== (map) (STL/CLR)","pos":[2544,2570]},{"content":"operator!= (map) (STL/CLR)","pos":[2621,2647]},{"content":"operator<ph id=\"ph1\">\\&lt;</ph> (map) (STL/CLR)","pos":[2700,2726],"source":"operator\\< (map) (STL/CLR)"},{"content":"operator&gt;= (map) (STL/CLR)","pos":[2778,2804],"source":"operator>= (map) (STL/CLR)"},{"content":"operator&lt;= (map) (STL/CLR)","pos":[2863,2889],"source":"operator<= (map) (STL/CLR)"}],"content":"---\ntitle: \"operator&gt; (map) (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::map::operator>\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"operator> member [STL/CLR]\"\nms.assetid: f57da93f-6bd7-4589-ac69-4869b055ba4b\ncaps.latest.revision: 15\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# operator&gt; (map) (STL/CLR)\nList greater than comparison.  \n  \n## Syntax  \n  \n```  \ntemplate<typename Key,  \n    typename Mapped>  \n    bool operator>(map<Key, Mapped>% left,  \n        map<Key, Mapped>% right);  \n```  \n  \n#### Parameters  \n left  \n Left container to compare.  \n  \n right  \n Right container to compare.  \n  \n## Remarks  \n The operator function returns `right` `<` `left`. You use it to test whether `left` is ordered after `right` when the two maps are compared element by element.  \n  \n## Example  \n  \n```  \n// cliext_map_operator_gt.cpp   \n// compile with: /clr   \n#include <cliext/map>   \n  \ntypedef cliext::map<wchar_t, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n    c1.insert(Mymap::make_value(L'a', 1));   \n    c1.insert(Mymap::make_value(L'b', 2));   \n    c1.insert(Mymap::make_value(L'c', 3));   \n  \n// display contents \" [a 1] [b 2] [c 3]\"   \n    for each (Mymap::value_type elem in c1)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n  \n// assign to a new container   \n    Mymap c2;   \n    c2.insert(Mymap::make_value(L'a', 1));   \n    c2.insert(Mymap::make_value(L'b', 2));   \n    c2.insert(Mymap::make_value(L'd', 4));   \n  \n// display contents \" [a 1] [b 2] [d 4]\"   \n    for each (Mymap::value_type elem in c2)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n  \n    System::Console::WriteLine(\"[a b c] > [a b c] is {0}\",   \n        c1 > c1);   \n    System::Console::WriteLine(\"[a b d] > [a b c] is {0}\",   \n        c2 > c1);   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n [a 1] [b 2] [c 3]  \n [a 1] [b 2] [d 4]  \n[a b c] > [a b c] is False  \n[a b d] > [a b c] is True  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/map>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [map (STL/CLR)](../dotnet/map-stl-clr.md)   \n [operator== (map) (STL/CLR)](../dotnet/operator-equality-map-stl-clr.md)   \n [operator!= (map) (STL/CLR)](../dotnet/operator-inequality-map-stl-clr.md)   \n [operator\\< (map) (STL/CLR)](../dotnet/operator-less-than-map-stl-clr.md)   \n [operator>= (map) (STL/CLR)](../dotnet/operator-greater-or-equal-map-stl-clr.md)   \n [operator<= (map) (STL/CLR)](../dotnet/operator-less-or-equal-map-stl-clr.md)"}