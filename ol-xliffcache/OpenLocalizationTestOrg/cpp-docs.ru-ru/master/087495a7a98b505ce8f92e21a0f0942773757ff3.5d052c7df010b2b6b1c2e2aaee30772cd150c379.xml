{"nodes":[{"pos":[12,42],"content":"SafeNotEquals | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"SafeNotEquals | Microsoft Docs","pos":[0,30]}]},{"content":"SafeNotEquals","pos":[615,628]},{"content":"Determines if two numbers are not equal.","pos":[629,669]},{"content":"Syntax","pos":[678,684]},{"content":"Parameters","pos":[820,830]},{"content":"[in]","pos":[834,838]},{"content":"The first number to compare.","pos":[846,874]},{"content":"This must be of type T.","pos":[875,898]},{"content":"[in]","pos":[905,909]},{"content":"The second number to compare.","pos":[917,946]},{"content":"This must be of type U.","pos":[947,970]},{"content":"Return Value","pos":[979,991]},{"pos":[1002,1050],"content":"if <ph id=\"ph1\">`t`</ph> and <ph id=\"ph2\">`u`</ph> are not equal; otherwise <ph id=\"ph3\">`false`</ph>.","source":" if `t` and `u` are not equal; otherwise `false`."},{"content":"Remarks","pos":[1059,1066]},{"pos":[1070,1173],"content":"The method enhances <ph id=\"ph1\">`!=`</ph> because <ph id=\"ph2\">`SafeNotEquals`</ph> enables you to compare two different types of numbers.","source":"The method enhances `!=` because `SafeNotEquals` enables you to compare two different types of numbers."},{"pos":[1180,1383],"content":"This method is part of <bpt id=\"p1\">[</bpt>SafeInt Library<ept id=\"p1\">](../windows/safeint-library.md)</ept> and is designed for a single comparison operation without creating an instance of the <bpt id=\"p2\">[</bpt>SafeInt Class<ept id=\"p2\">](../windows/safeint-class.md)</ept>.","source":"This method is part of [SafeInt Library](../windows/safeint-library.md) and is designed for a single comparison operation without creating an instance of the [SafeInt Class](../windows/safeint-class.md)."},{"pos":[1391,1615],"content":"[!NOTE]\n This method should only be used when a single mathematical operation must be protected. If there are multiple operations, you should use the `SafeInt` class instead of calling the individual stand-alone functions.","leadings":["","> "],"nodes":[{"content":" This method should only be used when a single mathematical operation must be protected. If there are multiple operations, you should use the `SafeInt` class instead of calling the individual stand-alone functions.","pos":[8,222],"nodes":[{"content":"This method should only be used when a single mathematical operation must be protected.","pos":[1,88]},{"content":"If there are multiple operations, you should use the <ph id=\"ph1\">`SafeInt`</ph> class instead of calling the individual stand-alone functions.","pos":[89,214],"source":" If there are multiple operations, you should use the `SafeInt` class instead of calling the individual stand-alone functions."}]}]},{"pos":[1622,1734],"content":"For more information about the template types T and U, see <bpt id=\"p1\">[</bpt>SafeInt Functions<ept id=\"p1\">](../windows/safeint-functions.md)</ept>.","source":"For more information about the template types T and U, see [SafeInt Functions](../windows/safeint-functions.md)."},{"content":"Requirements","pos":[1743,1755]},{"pos":[1759,1780],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> safeint.h","source":"**Header:** safeint.h"},{"pos":[1787,1822],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> Microsoft::Utilities","source":"**Namespace:** Microsoft::Utilities"},{"content":"See Also","pos":[1831,1839]},{"content":"SafeInt Functions","pos":[1844,1861]},{"content":"SafeInt Library","pos":[1901,1916]},{"content":"SafeInt Class","pos":[1954,1967]},{"content":"SafeEquals","pos":[2003,2013]}],"content":"---\ntitle: \"SafeNotEquals | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"SafeNotEquals\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"SafeNotEquals function\"\nms.assetid: 032e45a8-4159-4b55-b7cc-ecd27f4e4788\ncaps.latest.revision: 6\nauthor: \"ghogen\"\nms.author: \"ghogen\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# SafeNotEquals\nDetermines if two numbers are not equal.  \n  \n## Syntax  \n  \n```  \ntemplate<typename T, typename U>  \ninline bool SafeNotEquals (  \n   const T t,  \n   const U u  \n) throw ();  \n```  \n  \n#### Parameters  \n [in] `t`  \n The first number to compare. This must be of type T.  \n  \n [in] `u`  \n The second number to compare. This must be of type U.  \n  \n## Return Value  \n `true` if `t` and `u` are not equal; otherwise `false`.  \n  \n## Remarks  \n The method enhances `!=` because `SafeNotEquals` enables you to compare two different types of numbers.  \n  \n This method is part of [SafeInt Library](../windows/safeint-library.md) and is designed for a single comparison operation without creating an instance of the [SafeInt Class](../windows/safeint-class.md).  \n  \n> [!NOTE]\n>  This method should only be used when a single mathematical operation must be protected. If there are multiple operations, you should use the `SafeInt` class instead of calling the individual stand-alone functions.  \n  \n For more information about the template types T and U, see [SafeInt Functions](../windows/safeint-functions.md).  \n  \n## Requirements  \n **Header:** safeint.h  \n  \n **Namespace:** Microsoft::Utilities  \n  \n## See Also  \n [SafeInt Functions](../windows/safeint-functions.md)   \n [SafeInt Library](../windows/safeint-library.md)   \n [SafeInt Class](../windows/safeint-class.md)   \n [SafeEquals](../windows/safeequals.md)"}