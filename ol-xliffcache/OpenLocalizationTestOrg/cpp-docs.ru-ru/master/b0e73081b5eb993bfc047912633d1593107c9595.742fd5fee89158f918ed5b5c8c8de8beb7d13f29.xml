{"nodes":[{"pos":[12,43],"content":"CAtlList Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CAtlList Class | Microsoft Docs","pos":[0,31]}]},{"pos":[637,651],"content":"CAtlList Class","linkify":"CAtlList Class","nodes":[{"content":"CAtlList Class","pos":[0,14]}]},{"content":"This class provides methods for creating and managing a list object.","pos":[652,720]},{"pos":[729,735],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[832,842],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The element type.","pos":[853,870]},{"content":"The code used to copy or move elements.","pos":[890,929]},{"content":"See <bpt id=\"p1\">[</bpt>CElementTraits Class<ept id=\"p1\">](../../atl/reference/celementtraits-class.md)</ept> for more details.","pos":[930,1019],"source":" See [CElementTraits Class](../../atl/reference/celementtraits-class.md) for more details."},{"pos":[1028,1035],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1045,1060],"content":"Public Typedefs","linkify":"Public Typedefs","nodes":[{"content":"Public Typedefs","pos":[0,15]}]},{"content":"Name","pos":[1067,1071]},{"content":"Description","pos":[1072,1083]},{"pos":[1121,1164],"content":"<bpt id=\"p1\">[</bpt>CAtlList::INARGTYPE<ept id=\"p1\">](#catllist__inargtype)</ept>","source":"[CAtlList::INARGTYPE](#catllist__inargtype)"},{"pos":[1176,1195],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1202,1206]},{"content":"Description","pos":[1207,1218]},{"pos":[1256,1297],"content":"<bpt id=\"p1\">[</bpt>CAtlList::CAtlList<ept id=\"p1\">](#catllist__catllist)</ept>","source":"[CAtlList::CAtlList](#catllist__catllist)"},{"content":"The constructor.","pos":[1298,1314]},{"pos":[1319,1366],"content":"<bpt id=\"p1\">[</bpt>CAtlList::~CAtlList<ept id=\"p1\">](#catllist___dtorcatllist)</ept>","source":"[CAtlList::~CAtlList](#catllist___dtorcatllist)"},{"content":"The destructor.","pos":[1367,1382]},{"pos":[1393,1407],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1414,1418]},{"content":"Description","pos":[1419,1430]},{"pos":[1468,1507],"content":"<bpt id=\"p1\">[</bpt>CAtlList::AddHead<ept id=\"p1\">](#catllist__addhead)</ept>","source":"[CAtlList::AddHead](#catllist__addhead)"},{"content":"Call this method to add an element to the head of the list.","pos":[1508,1567]},{"pos":[1572,1619],"content":"<bpt id=\"p1\">[</bpt>CAtlList::AddHeadList<ept id=\"p1\">](#catllist__addheadlist)</ept>","source":"[CAtlList::AddHeadList](#catllist__addheadlist)"},{"content":"Call this method to add an existing list to the head of the list.","pos":[1620,1685]},{"pos":[1690,1729],"content":"<bpt id=\"p1\">[</bpt>CAtlList::AddTail<ept id=\"p1\">](#catllist__addtail)</ept>","source":"[CAtlList::AddTail](#catllist__addtail)"},{"content":"Call this method to add an element to the tail of this list.","pos":[1730,1790]},{"pos":[1795,1842],"content":"<bpt id=\"p1\">[</bpt>CAtlList::AddTailList<ept id=\"p1\">](#catllist__addtaillist)</ept>","source":"[CAtlList::AddTailList](#catllist__addtaillist)"},{"content":"Call this method to add an existing list to the tail of this list.","pos":[1843,1909]},{"pos":[1914,1961],"content":"<bpt id=\"p1\">[</bpt>CAtlList::AssertValid<ept id=\"p1\">](#catllist__assertvalid)</ept>","source":"[CAtlList::AssertValid](#catllist__assertvalid)"},{"content":"Call this method to confirm the list is valid.","pos":[1962,2008]},{"pos":[2013,2046],"content":"<bpt id=\"p1\">[</bpt>CAtlList::Find<ept id=\"p1\">](#catllist__find)</ept>","source":"[CAtlList::Find](#catllist__find)"},{"content":"Call this method to search the list for the specified element.","pos":[2047,2109]},{"pos":[2114,2157],"content":"<bpt id=\"p1\">[</bpt>CAtlList::FindIndex<ept id=\"p1\">](#catllist__findindex)</ept>","source":"[CAtlList::FindIndex](#catllist__findindex)"},{"content":"Call this method to obtain the position of an element, given an index value.","pos":[2158,2234]},{"pos":[2239,2274],"content":"<bpt id=\"p1\">[</bpt>CAtlList::GetAt<ept id=\"p1\">](#catllist__getat)</ept>","source":"[CAtlList::GetAt](#catllist__getat)"},{"content":"Call this method to return the element at a specified position in the list.","pos":[2275,2350]},{"pos":[2355,2396],"content":"<bpt id=\"p1\">[</bpt>CAtlList::GetCount<ept id=\"p1\">](#catllist__getcount)</ept>","source":"[CAtlList::GetCount](#catllist__getcount)"},{"content":"Call this method to return the number of objects in the list.","pos":[2397,2458]},{"pos":[2463,2502],"content":"<bpt id=\"p1\">[</bpt>CAtlList::GetHead<ept id=\"p1\">](#catllist__gethead)</ept>","source":"[CAtlList::GetHead](#catllist__gethead)"},{"content":"Call this method to return the element at the head of the list.","pos":[2503,2566]},{"pos":[2571,2626],"content":"<bpt id=\"p1\">[</bpt>CAtlList::GetHeadPosition<ept id=\"p1\">](#catllist__getheadposition)</ept>","source":"[CAtlList::GetHeadPosition](#catllist__getheadposition)"},{"content":"Call this method to obtain the position of the head of the list.","pos":[2627,2691]},{"pos":[2696,2735],"content":"<bpt id=\"p1\">[</bpt>CAtlList::GetNext<ept id=\"p1\">](#catllist__getnext)</ept>","source":"[CAtlList::GetNext](#catllist__getnext)"},{"content":"Call this method to return the next element from the list.","pos":[2736,2794]},{"pos":[2799,2838],"content":"<bpt id=\"p1\">[</bpt>CAtlList::GetPrev<ept id=\"p1\">](#catllist__getprev)</ept>","source":"[CAtlList::GetPrev](#catllist__getprev)"},{"content":"Call this method to return the previous element from the list.","pos":[2839,2901]},{"pos":[2906,2945],"content":"<bpt id=\"p1\">[</bpt>CAtlList::GetTail<ept id=\"p1\">](#catllist__gettail)</ept>","source":"[CAtlList::GetTail](#catllist__gettail)"},{"content":"Call this method to return the element at the tail of the list.","pos":[2946,3009]},{"pos":[3014,3069],"content":"<bpt id=\"p1\">[</bpt>CAtlList::GetTailPosition<ept id=\"p1\">](#catllist__gettailposition)</ept>","source":"[CAtlList::GetTailPosition](#catllist__gettailposition)"},{"content":"Call this method to obtain the position of the tail of the list.","pos":[3070,3134]},{"pos":[3139,3186],"content":"<bpt id=\"p1\">[</bpt>CAtlList::InsertAfter<ept id=\"p1\">](#catllist__insertafter)</ept>","source":"[CAtlList::InsertAfter](#catllist__insertafter)"},{"content":"Call this method to insert a new element into the list after the specified position.","pos":[3187,3271]},{"pos":[3276,3325],"content":"<bpt id=\"p1\">[</bpt>CAtlList::InsertBefore<ept id=\"p1\">](#catllist__insertbefore)</ept>","source":"[CAtlList::InsertBefore](#catllist__insertbefore)"},{"content":"Call this method to insert a new element into the list before the specified position.","pos":[3326,3411]},{"pos":[3416,3455],"content":"<bpt id=\"p1\">[</bpt>CAtlList::IsEmpty<ept id=\"p1\">](#catllist__isempty)</ept>","source":"[CAtlList::IsEmpty](#catllist__isempty)"},{"content":"Call this method to determine if the list is empty.","pos":[3456,3507]},{"pos":[3512,3557],"content":"<bpt id=\"p1\">[</bpt>CAtlList::MoveToHead<ept id=\"p1\">](#catllist__movetohead)</ept>","source":"[CAtlList::MoveToHead](#catllist__movetohead)"},{"content":"Call this method to move the specified element to the head of the list.","pos":[3558,3629]},{"pos":[3634,3679],"content":"<bpt id=\"p1\">[</bpt>CAtlList::MoveToTail<ept id=\"p1\">](#catllist__movetotail)</ept>","source":"[CAtlList::MoveToTail](#catllist__movetotail)"},{"content":"Call this method to move the specified element to the tail of the list.","pos":[3680,3751]},{"pos":[3756,3799],"content":"<bpt id=\"p1\">[</bpt>CAtlList::RemoveAll<ept id=\"p1\">](#catllist__removeall)</ept>","source":"[CAtlList::RemoveAll](#catllist__removeall)"},{"content":"Call this method to remove all of the elements from the list.","pos":[3800,3861]},{"pos":[3866,3907],"content":"<bpt id=\"p1\">[</bpt>CAtlList::RemoveAt<ept id=\"p1\">](#catllist__removeat)</ept>","source":"[CAtlList::RemoveAt](#catllist__removeat)"},{"content":"Call this method to remove a single element from the list.","pos":[3908,3966]},{"pos":[3971,4016],"content":"<bpt id=\"p1\">[</bpt>CAtlList::RemoveHead<ept id=\"p1\">](#catllist__removehead)</ept>","source":"[CAtlList::RemoveHead](#catllist__removehead)"},{"content":"Call this method to remove the element at the head of the list.","pos":[4017,4080]},{"pos":[4085,4146],"content":"<bpt id=\"p1\">[</bpt>CAtlList::RemoveHeadNoReturn<ept id=\"p1\">](#catllist__removeheadnoreturn)</ept>","source":"[CAtlList::RemoveHeadNoReturn](#catllist__removeheadnoreturn)"},{"content":"Call this method to remove the element at the head of the list without returning a value.","pos":[4147,4236]},{"pos":[4241,4286],"content":"<bpt id=\"p1\">[</bpt>CAtlList::RemoveTail<ept id=\"p1\">](#catllist__removetail)</ept>","source":"[CAtlList::RemoveTail](#catllist__removetail)"},{"content":"Call this method to remove the element at the tail of the list.","pos":[4287,4350]},{"pos":[4355,4416],"content":"<bpt id=\"p1\">[</bpt>CAtlList::RemoveTailNoReturn<ept id=\"p1\">](#catllist__removetailnoreturn)</ept>","source":"[CAtlList::RemoveTailNoReturn](#catllist__removetailnoreturn)"},{"content":"Call this method to remove the element at the tail of the list without returning a value.","pos":[4417,4506]},{"pos":[4511,4546],"content":"<bpt id=\"p1\">[</bpt>CAtlList::SetAt<ept id=\"p1\">](#catllist__setat)</ept>","source":"[CAtlList::SetAt](#catllist__setat)"},{"content":"Call this method to set the value of the element at a given position in the list.","pos":[4547,4628]},{"pos":[4633,4682],"content":"<bpt id=\"p1\">[</bpt>CAtlList::SwapElements<ept id=\"p1\">](#catllist__swapelements)</ept>","source":"[CAtlList::SwapElements](#catllist__swapelements)"},{"content":"Call this method to swap elements in the list.","pos":[4683,4729]},{"pos":[4739,4746],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`CAtlList`</ph> class supports ordered lists of nonunique objects accessible sequentially or by value.","pos":[4750,4851],"source":"The `CAtlList` class supports ordered lists of nonunique objects accessible sequentially or by value."},{"content":"<ph id=\"ph1\">`CAtlList`</ph> lists behave like doubly linked lists.","pos":[4852,4901],"source":"`CAtlList` lists behave like doubly linked lists."},{"content":"Each list has a head and a tail, and new elements (or lists in some cases) can be added to either end of the list, or inserted before or after specific elements.","pos":[4902,5063]},{"content":"Most of the <ph id=\"ph1\">`CAtlList`</ph> methods make use of a position value.","pos":[5070,5130],"source":"Most of the `CAtlList` methods make use of a position value."},{"content":"This value is used by the methods to reference the actual memory location where the elements are stored, and should not be calculated or predicted directly.","pos":[5131,5287]},{"content":"If it is necessary to access the <bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept>th element in the list, the method <bpt id=\"p2\">[</bpt>CAtlList::FindIndex<ept id=\"p2\">](#catllist__findindex)</ept> will return the corresponding position value for a given index.","pos":[5288,5466],"source":" If it is necessary to access the *n*th element in the list, the method [CAtlList::FindIndex](#catllist__findindex) will return the corresponding position value for a given index."},{"content":"The methods <bpt id=\"p1\">[</bpt>CAtlList::GetNext<ept id=\"p1\">](#catllist__getnext)</ept> and <bpt id=\"p2\">[</bpt>CAtlList::GetPrev<ept id=\"p2\">](#catllist__getprev)</ept> can be used to iterate through the objects in the list.","pos":[5467,5618],"source":" The methods [CAtlList::GetNext](#catllist__getnext) and [CAtlList::GetPrev](#catllist__getprev) can be used to iterate through the objects in the list."},{"pos":[5625,5765],"content":"For more information regarding the collection classes available with ATL, see <bpt id=\"p1\">[</bpt>ATL Collection Classes<ept id=\"p1\">](../../atl/atl-collection-classes.md)</ept>.","source":"For more information regarding the collection classes available with ATL, see [ATL Collection Classes](../../atl/atl-collection-classes.md)."},{"pos":[5774,5786],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[5790,5811],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlcoll.h","source":"**Header:** atlcoll.h"},{"pos":[5821,5872],"content":"<bpt id=\"p1\">&lt;a name=\"catllist__addhead\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlList::AddHead","linkify":"<a name=\"catllist__addhead\"></a>  CAtlList::AddHead","source":"<a name=\"catllist__addhead\"></a>  CAtlList::AddHead"},{"content":"Call this method to add an element to the head of the list.","pos":[5876,5935]},{"pos":[6017,6027],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The new element.","pos":[6044,6060]},{"pos":[6070,6082],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the position of the newly added element.","pos":[6086,6134]},{"pos":[6144,6151],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the first version is used, an empty element is created using its default constructor, rather than its copy constructor.","pos":[6155,6277]},{"pos":[6287,6294],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6298,6379],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#13<ept id=\"p2\">](../../atl/codesnippet/cpp/catllist-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#13](../../atl/codesnippet/cpp/catllist-class_1.cpp)]"},{"pos":[6389,6448],"content":"<bpt id=\"p1\">&lt;a name=\"catllist__addheadlist\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlList::AddHeadList","linkify":"<a name=\"catllist__addheadlist\"></a>  CAtlList::AddHeadList","source":"<a name=\"catllist__addheadlist\"></a>  CAtlList::AddHeadList"},{"content":"Call this method to add an existing list to the head of the list.","pos":[6452,6517]},{"pos":[6593,6603],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The list to be added.","pos":[6618,6639]},{"pos":[6649,6656],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The list pointed to by <ph id=\"ph1\">`plNew`</ph> is inserted at the start of the existing list.","pos":[6660,6737],"source":"The list pointed to by `plNew` is inserted at the start of the existing list."},{"content":"In debug builds, an assertion failure will occur if <ph id=\"ph1\">`plNew`</ph> is equal to NULL.","pos":[6738,6815],"source":" In debug builds, an assertion failure will occur if `plNew` is equal to NULL."},{"pos":[6825,6832],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6836,6917],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#14<ept id=\"p2\">](../../atl/codesnippet/cpp/catllist-class_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#14](../../atl/codesnippet/cpp/catllist-class_2.cpp)]"},{"pos":[6927,6978],"content":"<bpt id=\"p1\">&lt;a name=\"catllist__addtail\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlList::AddTail","linkify":"<a name=\"catllist__addtail\"></a>  CAtlList::AddTail","source":"<a name=\"catllist__addtail\"></a>  CAtlList::AddTail"},{"content":"Call this method to add an element to the tail of this list.","pos":[6982,7042]},{"pos":[7124,7134],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The element to add.","pos":[7151,7170]},{"pos":[7180,7192],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the POSITION of the newly added element.","pos":[7196,7244]},{"pos":[7254,7261],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the first version is used, an empty element is created using its default constructor, rather than its copy constructor.","pos":[7265,7387]},{"content":"The element is added to the end of the list, and so it now becomes the tail.","pos":[7388,7464]},{"content":"This method can be used with an empty list.","pos":[7465,7508]},{"pos":[7518,7525],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7529,7610],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#15<ept id=\"p2\">](../../atl/codesnippet/cpp/catllist-class_3.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#15](../../atl/codesnippet/cpp/catllist-class_3.cpp)]"},{"pos":[7620,7679],"content":"<bpt id=\"p1\">&lt;a name=\"catllist__addtaillist\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlList::AddTailList","linkify":"<a name=\"catllist__addtaillist\"></a>  CAtlList::AddTailList","source":"<a name=\"catllist__addtaillist\"></a>  CAtlList::AddTailList"},{"content":"Call this method to add an existing list to the tail of this list.","pos":[7683,7749]},{"pos":[7825,7835],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The list to be added.","pos":[7850,7871]},{"pos":[7881,7888],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The list pointed to by <ph id=\"ph1\">`plNew`</ph> is inserted after the last element (if any) in the list object.","pos":[7892,7986],"source":"The list pointed to by `plNew` is inserted after the last element (if any) in the list object."},{"content":"The last element in the <ph id=\"ph1\">`plNew`</ph> list therefore becomes the tail.","pos":[7987,8051],"source":" The last element in the `plNew` list therefore becomes the tail."},{"content":"In debug builds, an assertion failure will occur if <bpt id=\"p1\">*</bpt>plNew<ept id=\"p1\">*</ept> is equal to NULL.","pos":[8052,8129],"source":" In debug builds, an assertion failure will occur if *plNew* is equal to NULL."},{"pos":[8139,8146],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8150,8231],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#16<ept id=\"p2\">](../../atl/codesnippet/cpp/catllist-class_4.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#16](../../atl/codesnippet/cpp/catllist-class_4.cpp)]"},{"pos":[8241,8300],"content":"<bpt id=\"p1\">&lt;a name=\"catllist__assertvalid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlList::AssertValid","linkify":"<a name=\"catllist__assertvalid\"></a>  CAtlList::AssertValid","source":"<a name=\"catllist__assertvalid\"></a>  CAtlList::AssertValid"},{"content":"Call this method to confirm the list is valid.","pos":[8304,8350]},{"pos":[8399,8406],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In debug builds, an assertion failure will occur if the list object is not valid.","pos":[8410,8491]},{"content":"To be valid, an empty list must have both the head and tail pointing to NULL, and a list that is not empty must have both the head and tail pointing to valid addresses.","pos":[8492,8660]},{"pos":[8670,8677],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8681,8762],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#17<ept id=\"p2\">](../../atl/codesnippet/cpp/catllist-class_5.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#17](../../atl/codesnippet/cpp/catllist-class_5.cpp)]"},{"pos":[8772,8825],"content":"<bpt id=\"p1\">&lt;a name=\"catllist__catllist\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlList::CAtlList","linkify":"<a name=\"catllist__catllist\"></a>  CAtlList::CAtlList","source":"<a name=\"catllist__catllist\"></a>  CAtlList::CAtlList"},{"content":"The constructor.","pos":[8829,8845]},{"pos":[8908,8918],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The block size.","pos":[8938,8953]},{"pos":[8963,8970],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The constructor for the <ph id=\"ph1\">`CAtlList`</ph> object.","pos":[8974,9016],"source":"The constructor for the `CAtlList` object."},{"content":"The block size is a measure of the amount of memory allocated when a new element is required.","pos":[9017,9110]},{"content":"Larger block sizes reduce calls to memory allocation routines, but use more resources.","pos":[9111,9197]},{"pos":[9207,9214],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9218,9299],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#18<ept id=\"p2\">](../../atl/codesnippet/cpp/catllist-class_6.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#18](../../atl/codesnippet/cpp/catllist-class_6.cpp)]"},{"pos":[9309,9368],"content":"<bpt id=\"p1\">&lt;a name=\"catllist___dtorcatllist\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlList::~CAtlList","linkify":"<a name=\"catllist___dtorcatllist\"></a>  CAtlList::~CAtlList","source":"<a name=\"catllist___dtorcatllist\"></a>  CAtlList::~CAtlList"},{"content":"The destructor.","pos":[9372,9387]},{"pos":[9431,9438],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9442,9574],"content":"Frees all allocated resources, including a call to <bpt id=\"p1\">[</bpt>CAtlList::RemoveAll<ept id=\"p1\">](#catllist__removeall)</ept> to remove all elements from the list.","source":"Frees all allocated resources, including a call to [CAtlList::RemoveAll](#catllist__removeall) to remove all elements from the list."},{"pos":[9581,9701],"content":"In debug builds, an assertion failure will occur if the list still contains some elements after the call to <ph id=\"ph1\">`RemoveAll`</ph>.","source":"In debug builds, an assertion failure will occur if the list still contains some elements after the call to `RemoveAll`."},{"pos":[9711,9756],"content":"<bpt id=\"p1\">&lt;a name=\"catllist__find\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlList::Find","linkify":"<a name=\"catllist__find\"></a>  CAtlList::Find","source":"<a name=\"catllist__find\"></a>  CAtlList::Find"},{"content":"Call this method to search the list for the specified element.","pos":[9760,9822]},{"pos":[9925,9935],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The element to be found in the list.","pos":[9952,9988]},{"content":"The start position for the search.","pos":[10014,10048]},{"content":"If no value is specified, the search begins with the head element.","pos":[10049,10115]},{"pos":[10125,10137],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the POSITION value of the element if found, otherwise returns NULL.","pos":[10141,10216]},{"pos":[10226,10233],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[10237,10367],"content":"In debug builds, an assertion failure will occur if the list object is not valid, or if the <ph id=\"ph1\">`posStartAfter`</ph> value is out of range.","source":"In debug builds, an assertion failure will occur if the list object is not valid, or if the `posStartAfter` value is out of range."},{"pos":[10377,10384],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10388,10469],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#19<ept id=\"p2\">](../../atl/codesnippet/cpp/catllist-class_7.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#19](../../atl/codesnippet/cpp/catllist-class_7.cpp)]"},{"pos":[10479,10534],"content":"<bpt id=\"p1\">&lt;a name=\"catllist__findindex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlList::FindIndex","linkify":"<a name=\"catllist__findindex\"></a>  CAtlList::FindIndex","source":"<a name=\"catllist__findindex\"></a>  CAtlList::FindIndex"},{"content":"Call this method to obtain the position of an element, given an index value.","pos":[10538,10614]},{"pos":[10688,10698],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The zero-based index of the required list element.","pos":[10716,10766]},{"pos":[10776,10788],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10792,10872],"content":"Returns the corresponding POSITION value, or NULL if <ph id=\"ph1\">`iElement`</ph> is out of range.","source":"Returns the corresponding POSITION value, or NULL if `iElement` is out of range."},{"pos":[10882,10889],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[10893,11013],"content":"This method returns the POSITION corresponding to a given index value, allowing access to the <bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept>th element in the list.","source":"This method returns the POSITION corresponding to a given index value, allowing access to the *n*th element in the list."},{"content":"In debug builds, an assertion failure will occur if the list object is not valid.","pos":[11020,11101]},{"pos":[11111,11118],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11122,11203],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#20<ept id=\"p2\">](../../atl/codesnippet/cpp/catllist-class_8.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#20](../../atl/codesnippet/cpp/catllist-class_8.cpp)]"},{"pos":[11213,11260],"content":"<bpt id=\"p1\">&lt;a name=\"catllist__getat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlList::GetAt","linkify":"<a name=\"catllist__getat\"></a>  CAtlList::GetAt","source":"<a name=\"catllist__getat\"></a>  CAtlList::GetAt"},{"content":"Call this method to return the element at a specified position in the list.","pos":[11264,11339]},{"pos":[11439,11449],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The POSITION value specifying a particular element.","pos":[11462,11513]},{"pos":[11523,11535],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reference to, or copy of, the element.","pos":[11539,11579]},{"pos":[11589,11596],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the list is <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`GetAt`</ph> returns a copy of the element.","pos":[11600,11664],"source":"If the list is **const**, `GetAt` returns a copy of the element."},{"content":"This allows the method to be used only on the right side of an assignment statement and protects the list from modification.","pos":[11665,11789]},{"content":"If the list is not <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`GetAt`</ph> returns a reference to the element.","pos":[11796,11869],"source":"If the list is not **const**, `GetAt` returns a reference to the element."},{"content":"This allows the method to be used on either side of an assignment statement and thus allows the list entries to be modified.","pos":[11870,11994]},{"pos":[12001,12076],"content":"In debug builds, an assertion failure will occur if <ph id=\"ph1\">`pos`</ph> is equal to NULL.","source":"In debug builds, an assertion failure will occur if `pos` is equal to NULL."},{"pos":[12086,12093],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12097,12161],"content":"See the example for <bpt id=\"p1\">[</bpt>CAtlList::FindIndex<ept id=\"p1\">](#catllist__findindex)</ept>.","source":"See the example for [CAtlList::FindIndex](#catllist__findindex)."},{"pos":[12171,12224],"content":"<bpt id=\"p1\">&lt;a name=\"catllist__getcount\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlList::GetCount","linkify":"<a name=\"catllist__getcount\"></a>  CAtlList::GetCount","source":"<a name=\"catllist__getcount\"></a>  CAtlList::GetCount"},{"content":"Call this method to return the number of objects in the list.","pos":[12228,12289]},{"pos":[12345,12357],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the number of elements in the list.","pos":[12361,12404]},{"pos":[12414,12421],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12425,12479],"content":"See the example for <bpt id=\"p1\">[</bpt>CAtlList::Find<ept id=\"p1\">](#catllist__find)</ept>.","source":"See the example for [CAtlList::Find](#catllist__find)."},{"pos":[12489,12540],"content":"<bpt id=\"p1\">&lt;a name=\"catllist__gethead\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlList::GetHead","linkify":"<a name=\"catllist__gethead\"></a>  CAtlList::GetHead","source":"<a name=\"catllist__gethead\"></a>  CAtlList::GetHead"},{"content":"Call this method to return the element at the head of the list.","pos":[12544,12607]},{"pos":[12687,12699],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a reference to, or a copy of, the element at the head of the list.","pos":[12703,12777]},{"pos":[12787,12794],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the list is <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`GetHead`</ph> returns a copy of the element at the head of the list.","pos":[12798,12888],"source":"If the list is **const**, `GetHead` returns a copy of the element at the head of the list."},{"content":"This allows the method to be used only on the right side of an assignment statement and protects the list from modification.","pos":[12889,13013]},{"content":"If the list is not <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`GetHead`</ph> returns a reference to the element at the head of the list.","pos":[13020,13119],"source":"If the list is not **const**, `GetHead` returns a reference to the element at the head of the list."},{"content":"This allows the method to be used on either side of an assignment statement and thus allows the list entries to be modified.","pos":[13120,13244]},{"content":"In debug builds, an assertion failure will occur if the head of the list points to NULL.","pos":[13251,13339]},{"pos":[13349,13356],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13360,13420],"content":"See the example for <bpt id=\"p1\">[</bpt>CAtlList::AddHead<ept id=\"p1\">](#catllist__addhead)</ept>.","source":"See the example for [CAtlList::AddHead](#catllist__addhead)."},{"pos":[13430,13497],"content":"<bpt id=\"p1\">&lt;a name=\"catllist__getheadposition\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlList::GetHeadPosition","linkify":"<a name=\"catllist__getheadposition\"></a>  CAtlList::GetHeadPosition","source":"<a name=\"catllist__getheadposition\"></a>  CAtlList::GetHeadPosition"},{"content":"Call this method to obtain the position of the head of the list.","pos":[13501,13565]},{"pos":[13630,13642],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the POSITION value corresponding to the element at the head of the list.","pos":[13646,13726]},{"pos":[13736,13743],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the list is empty, the value returned is NULL.","pos":[13747,13796]},{"pos":[13806,13813],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13817,13898],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#21<ept id=\"p2\">](../../atl/codesnippet/cpp/catllist-class_9.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#21](../../atl/codesnippet/cpp/catllist-class_9.cpp)]"},{"pos":[13908,13959],"content":"<bpt id=\"p1\">&lt;a name=\"catllist__getnext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlList::GetNext","linkify":"<a name=\"catllist__getnext\"></a>  CAtlList::GetNext","source":"<a name=\"catllist__getnext\"></a>  CAtlList::GetNext"},{"content":"Call this method to return the next element from the list.","pos":[13963,14021]},{"pos":[14127,14137],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A POSITION value, returned by a previous call to <ph id=\"ph1\">`GetNext`</ph>, <bpt id=\"p1\">[</bpt>CAtlList::GetHeadPosition<ept id=\"p1\">](#catllist__getheadposition)</ept>, or other <ph id=\"ph2\">`CAtlList`</ph> method.","pos":[14150,14294],"source":" A POSITION value, returned by a previous call to `GetNext`, [CAtlList::GetHeadPosition](#catllist__getheadposition), or other `CAtlList` method."},{"pos":[14304,14316],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If the list is <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`GetNext`</ph> returns a copy of the next element of the list.","pos":[14320,14403],"source":"If the list is **const**, `GetNext` returns a copy of the next element of the list."},{"content":"This allows the method to be used only on the right side of an assignment statement and protects the list from modification.","pos":[14404,14528]},{"content":"If the list is not <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`GetNext`</ph> returns a reference to the next element of the list.","pos":[14535,14627],"source":"If the list is not **const**, `GetNext` returns a reference to the next element of the list."},{"content":"This allows the method to be used on either side of an assignment statement and thus allows the list entries to be modified.","pos":[14628,14752]},{"pos":[14762,14769],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The POSITION counter, <ph id=\"ph1\">`pos`</ph>, is updated to point to the next element in the list, or NULL if there are no more elements.","pos":[14773,14893],"source":"The POSITION counter, `pos`, is updated to point to the next element in the list, or NULL if there are no more elements."},{"content":"In debug builds, an assertion failure will occur if <ph id=\"ph1\">`pos`</ph> is equal to NULL.","pos":[14894,14969],"source":" In debug builds, an assertion failure will occur if `pos` is equal to NULL."},{"pos":[14979,14986],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[14990,15066],"content":"See the example for <bpt id=\"p1\">[</bpt>CAtlList::GetHeadPosition<ept id=\"p1\">](#catllist__getheadposition)</ept>.","source":"See the example for [CAtlList::GetHeadPosition](#catllist__getheadposition)."},{"pos":[15076,15127],"content":"<bpt id=\"p1\">&lt;a name=\"catllist__getprev\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlList::GetPrev","linkify":"<a name=\"catllist__getprev\"></a>  CAtlList::GetPrev","source":"<a name=\"catllist__getprev\"></a>  CAtlList::GetPrev"},{"content":"Call this method to return the previous element from the list.","pos":[15131,15193]},{"pos":[15299,15309],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A POSITION value, returned by a previous call to <ph id=\"ph1\">`GetPrev`</ph>, <bpt id=\"p1\">[</bpt>CAtlList::GetTailPosition<ept id=\"p1\">](#catllist__gettailposition)</ept>, or other <ph id=\"ph2\">`CAtlList`</ph> method.","pos":[15322,15466],"source":" A POSITION value, returned by a previous call to `GetPrev`, [CAtlList::GetTailPosition](#catllist__gettailposition), or other `CAtlList` method."},{"pos":[15476,15488],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If the list is <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`GetPrev`</ph> returns a copy of an element of the list.","pos":[15492,15569],"source":"If the list is **const**, `GetPrev` returns a copy of an element of the list."},{"content":"This allows the method to be used only on the right side of an assignment statement and protects the list from modification.","pos":[15570,15694]},{"content":"If the list is not <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`GetPrev`</ph> returns a reference to an element of the list.","pos":[15701,15787],"source":"If the list is not **const**, `GetPrev` returns a reference to an element of the list."},{"content":"This allows the method to be used on either side of an assignment statement and thus allows the list entries to be modified.","pos":[15788,15912]},{"pos":[15922,15929],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The POSITION counter, <ph id=\"ph1\">`pos`</ph>, is updated to point to the previous element in the list, or NULL if there are no more elements.","pos":[15933,16057],"source":"The POSITION counter, `pos`, is updated to point to the previous element in the list, or NULL if there are no more elements."},{"content":"In debug builds, an assertion failure will occur if <ph id=\"ph1\">`pos`</ph> is equal to NULL.","pos":[16058,16133],"source":" In debug builds, an assertion failure will occur if `pos` is equal to NULL."},{"pos":[16143,16150],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[16154,16230],"content":"See the example for <bpt id=\"p1\">[</bpt>CAtlList::GetTailPosition<ept id=\"p1\">](#catllist__gettailposition)</ept>.","source":"See the example for [CAtlList::GetTailPosition](#catllist__gettailposition)."},{"pos":[16240,16291],"content":"<bpt id=\"p1\">&lt;a name=\"catllist__gettail\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlList::GetTail","linkify":"<a name=\"catllist__gettail\"></a>  CAtlList::GetTail","source":"<a name=\"catllist__gettail\"></a>  CAtlList::GetTail"},{"content":"Call this method to return the element at the tail of the list.","pos":[16295,16358]},{"pos":[16438,16450],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a reference to, or a copy of, the element at the tail of the list.","pos":[16454,16528]},{"pos":[16538,16545],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the list is <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`GetTail`</ph> returns a copy of the element at the head of the list.","pos":[16549,16639],"source":"If the list is **const**, `GetTail` returns a copy of the element at the head of the list."},{"content":"This allows the method to be used only on the right side of an assignment statement and protects the list from modification.","pos":[16640,16764]},{"content":"If the list is not <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`GetTail`</ph> returns a reference to the element at the head of the list.","pos":[16771,16870],"source":"If the list is not **const**, `GetTail` returns a reference to the element at the head of the list."},{"content":"This allows the method to be used on either side of an assignment statement and thus allows the list entries to be modified.","pos":[16871,16995]},{"content":"In debug builds, an assertion failure will occur if the tail of the list points to NULL.","pos":[17002,17090]},{"pos":[17100,17107],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[17111,17171],"content":"See the example for <bpt id=\"p1\">[</bpt>CAtlList::AddTail<ept id=\"p1\">](#catllist__addtail)</ept>.","source":"See the example for [CAtlList::AddTail](#catllist__addtail)."},{"pos":[17181,17248],"content":"<bpt id=\"p1\">&lt;a name=\"catllist__gettailposition\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlList::GetTailPosition","linkify":"<a name=\"catllist__gettailposition\"></a>  CAtlList::GetTailPosition","source":"<a name=\"catllist__gettailposition\"></a>  CAtlList::GetTailPosition"},{"content":"Call this method to obtain the position of the tail of the list.","pos":[17252,17316]},{"pos":[17381,17393],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the POSITION value corresponding to the element at the tail of the list.","pos":[17397,17477]},{"pos":[17487,17494],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the list is empty, the value returned is NULL.","pos":[17498,17547]},{"pos":[17557,17564],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[17568,17650],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#22<ept id=\"p2\">](../../atl/codesnippet/cpp/catllist-class_10.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#22](../../atl/codesnippet/cpp/catllist-class_10.cpp)]"},{"pos":[17660,17715],"content":"<bpt id=\"p1\">&lt;a name=\"catllist__inargtype\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlList::INARGTYPE","linkify":"<a name=\"catllist__inargtype\"></a>  CAtlList::INARGTYPE","source":"<a name=\"catllist__inargtype\"></a>  CAtlList::INARGTYPE"},{"content":"Type used when an element is passed as an input argument.","pos":[17719,17776]},{"pos":[17837,17896],"content":"<bpt id=\"p1\">&lt;a name=\"catllist__insertafter\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlList::InsertAfter","linkify":"<a name=\"catllist__insertafter\"></a>  CAtlList::InsertAfter","source":"<a name=\"catllist__insertafter\"></a>  CAtlList::InsertAfter"},{"content":"Call this method to insert a new element into the list after the specified position.","pos":[17900,17984]},{"pos":[18063,18073],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The POSITION value after which the new element will be inserted.","pos":[18086,18150]},{"content":"The element to be inserted.","pos":[18170,18197]},{"pos":[18207,18219],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the POSITION value of the new element.","pos":[18223,18269]},{"pos":[18279,18286],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In debug builds, an assertion failure will occur if the list isn't valid, if the insert fails, or if an attempt is made to insert the element after the tail.","pos":[18290,18447]},{"pos":[18457,18464],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[18468,18550],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#23<ept id=\"p2\">](../../atl/codesnippet/cpp/catllist-class_11.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#23](../../atl/codesnippet/cpp/catllist-class_11.cpp)]"},{"pos":[18560,18621],"content":"<bpt id=\"p1\">&lt;a name=\"catllist__insertbefore\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlList::InsertBefore","linkify":"<a name=\"catllist__insertbefore\"></a>  CAtlList::InsertBefore","source":"<a name=\"catllist__insertbefore\"></a>  CAtlList::InsertBefore"},{"content":"Call this method to insert a new element into the list before the specified position.","pos":[18625,18710]},{"pos":[18790,18800],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The new element will be inserted into the list before this POSITION value.","pos":[18813,18887]},{"content":"The element to be inserted.","pos":[18907,18934]},{"pos":[18944,18956],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the POSITION value of the new element.","pos":[18960,19006]},{"pos":[19016,19023],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In debug builds, an assertion failure will occur if the list isn't valid, if the insert fails, or if an attempt is made to insert the element before the head.","pos":[19027,19185]},{"pos":[19195,19202],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[19206,19288],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#24<ept id=\"p2\">](../../atl/codesnippet/cpp/catllist-class_12.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#24](../../atl/codesnippet/cpp/catllist-class_12.cpp)]"},{"pos":[19298,19349],"content":"<bpt id=\"p1\">&lt;a name=\"catllist__isempty\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlList::IsEmpty","linkify":"<a name=\"catllist__isempty\"></a>  CAtlList::IsEmpty","source":"<a name=\"catllist__isempty\"></a>  CAtlList::IsEmpty"},{"content":"Call this method to determine if the list is empty.","pos":[19353,19404]},{"pos":[19457,19469],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns true if the list contains no objects, otherwise false.","pos":[19473,19535]},{"pos":[19545,19552],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[19556,19638],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#25<ept id=\"p2\">](../../atl/codesnippet/cpp/catllist-class_13.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#25](../../atl/codesnippet/cpp/catllist-class_13.cpp)]"},{"pos":[19648,19705],"content":"<bpt id=\"p1\">&lt;a name=\"catllist__movetohead\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlList::MoveToHead","linkify":"<a name=\"catllist__movetohead\"></a>  CAtlList::MoveToHead","source":"<a name=\"catllist__movetohead\"></a>  CAtlList::MoveToHead"},{"content":"Call this method to move the specified element to the head of the list.","pos":[19709,19780]},{"pos":[19842,19852],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The POSITION value of the element to move.","pos":[19865,19907]},{"pos":[19917,19924],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The specified element is moved from its current position to the head of the list.","pos":[19928,20009]},{"content":"In debug builds, an assertion failure will occur if <ph id=\"ph1\">`pos`</ph> is equal to NULL.","pos":[20010,20085],"source":" In debug builds, an assertion failure will occur if `pos` is equal to NULL."},{"pos":[20095,20102],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[20106,20188],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#26<ept id=\"p2\">](../../atl/codesnippet/cpp/catllist-class_14.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#26](../../atl/codesnippet/cpp/catllist-class_14.cpp)]"},{"pos":[20198,20255],"content":"<bpt id=\"p1\">&lt;a name=\"catllist__movetotail\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlList::MoveToTail","linkify":"<a name=\"catllist__movetotail\"></a>  CAtlList::MoveToTail","source":"<a name=\"catllist__movetotail\"></a>  CAtlList::MoveToTail"},{"content":"Call this method to move the specified element to the tail of the list.","pos":[20259,20330]},{"pos":[20392,20402],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The POSITION value of the element to move.","pos":[20415,20457]},{"pos":[20467,20474],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The specified element is moved from its current position to the tail of the list.","pos":[20478,20559]},{"content":"In debug builds, an assertion failure will occur if <ph id=\"ph1\">`pos`</ph> is equal to NULL.","pos":[20560,20635],"source":" In debug builds, an assertion failure will occur if `pos` is equal to NULL."},{"pos":[20645,20652],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[20656,20722],"content":"See the example for <bpt id=\"p1\">[</bpt>CAtlList::MoveToHead<ept id=\"p1\">](#catllist__movetohead)</ept>.","source":"See the example for [CAtlList::MoveToHead](#catllist__movetohead)."},{"pos":[20732,20787],"content":"<bpt id=\"p1\">&lt;a name=\"catllist__removeall\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlList::RemoveAll","linkify":"<a name=\"catllist__removeall\"></a>  CAtlList::RemoveAll","source":"<a name=\"catllist__removeall\"></a>  CAtlList::RemoveAll"},{"content":"Call this method to remove all of the elements from the list.","pos":[20791,20852]},{"pos":[20901,20908],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method removes all of the elements from the list and frees the allocated memory.","pos":[20912,20997]},{"content":"In debugs builds, an ATLASSERT will be raised if all elements aren't deleted or if the list structure has become corrupted.","pos":[20998,21121]},{"pos":[21131,21138],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[21142,21202],"content":"See the example for <bpt id=\"p1\">[</bpt>CAtlList::IsEmpty<ept id=\"p1\">](#catllist__isempty)</ept>.","source":"See the example for [CAtlList::IsEmpty](#catllist__isempty)."},{"pos":[21212,21265],"content":"<bpt id=\"p1\">&lt;a name=\"catllist__removeat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlList::RemoveAt","linkify":"<a name=\"catllist__removeat\"></a>  CAtlList::RemoveAt","source":"<a name=\"catllist__removeat\"></a>  CAtlList::RemoveAt"},{"content":"Call this method to remove a single element from the list.","pos":[21269,21327]},{"pos":[21387,21397],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The POSITION value of the element to remove.","pos":[21410,21454]},{"pos":[21464,21471],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The element referenced by <ph id=\"ph1\">`pos`</ph> is removed, and memory is freed.","pos":[21475,21539],"source":"The element referenced by `pos` is removed, and memory is freed."},{"content":"It is acceptable to use <ph id=\"ph1\">`RemoveAt`</ph> to remove the head or tail of the list.","pos":[21540,21614],"source":" It is acceptable to use `RemoveAt` to remove the head or tail of the list."},{"content":"In debug builds, an assertion failure will occur if the list is not valid or if removing the element causes the list to access memory which isn't part of the list structure.","pos":[21621,21794]},{"pos":[21804,21811],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[21815,21897],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#27<ept id=\"p2\">](../../atl/codesnippet/cpp/catllist-class_15.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#27](../../atl/codesnippet/cpp/catllist-class_15.cpp)]"},{"pos":[21907,21964],"content":"<bpt id=\"p1\">&lt;a name=\"catllist__removehead\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlList::RemoveHead","linkify":"<a name=\"catllist__removehead\"></a>  CAtlList::RemoveHead","source":"<a name=\"catllist__removehead\"></a>  CAtlList::RemoveHead"},{"content":"Call this method to remove the element at the head of the list.","pos":[21968,22031]},{"pos":[22070,22082],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the element at the head of the list.","pos":[22086,22130]},{"pos":[22140,22147],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The head element is deleted from the list, and memory is freed.","pos":[22151,22214]},{"content":"A copy of the element is returned.","pos":[22215,22249]},{"content":"In debug builds, an assertion failure will occur if the list is empty.","pos":[22250,22320]},{"pos":[22330,22337],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[22341,22423],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#28<ept id=\"p2\">](../../atl/codesnippet/cpp/catllist-class_16.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#28](../../atl/codesnippet/cpp/catllist-class_16.cpp)]"},{"pos":[22433,22506],"content":"<bpt id=\"p1\">&lt;a name=\"catllist__removeheadnoreturn\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlList::RemoveHeadNoReturn","linkify":"<a name=\"catllist__removeheadnoreturn\"></a>  CAtlList::RemoveHeadNoReturn","source":"<a name=\"catllist__removeheadnoreturn\"></a>  CAtlList::RemoveHeadNoReturn"},{"content":"Call this method to remove the element at the head of the list without returning a value.","pos":[22510,22599]},{"pos":[22657,22664],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The head element is deleted from the list, and memory is freed.","pos":[22668,22731]},{"content":"In debug builds, an assertion failure will occur if the list is empty.","pos":[22732,22802]},{"pos":[22812,22819],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[22823,22883],"content":"See the example for <bpt id=\"p1\">[</bpt>CAtlList::IsEmpty<ept id=\"p1\">](#catllist__isempty)</ept>.","source":"See the example for [CAtlList::IsEmpty](#catllist__isempty)."},{"pos":[22893,22950],"content":"<bpt id=\"p1\">&lt;a name=\"catllist__removetail\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlList::RemoveTail","linkify":"<a name=\"catllist__removetail\"></a>  CAtlList::RemoveTail","source":"<a name=\"catllist__removetail\"></a>  CAtlList::RemoveTail"},{"content":"Call this method to remove the element at the tail of the list.","pos":[22954,23017]},{"pos":[23056,23068],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the element at the tail of the list.","pos":[23072,23116]},{"pos":[23126,23133],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The tail element is deleted from the list, and memory is freed.","pos":[23137,23200]},{"content":"A copy of the element is returned.","pos":[23201,23235]},{"content":"In debug builds, an assertion failure will occur if the list is empty.","pos":[23236,23306]},{"pos":[23316,23323],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[23327,23409],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#29<ept id=\"p2\">](../../atl/codesnippet/cpp/catllist-class_17.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#29](../../atl/codesnippet/cpp/catllist-class_17.cpp)]"},{"pos":[23419,23492],"content":"<bpt id=\"p1\">&lt;a name=\"catllist__removetailnoreturn\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlList::RemoveTailNoReturn","linkify":"<a name=\"catllist__removetailnoreturn\"></a>  CAtlList::RemoveTailNoReturn","source":"<a name=\"catllist__removetailnoreturn\"></a>  CAtlList::RemoveTailNoReturn"},{"content":"Call this method to remove the element at the tail of the list without returning a value.","pos":[23496,23585]},{"pos":[23643,23650],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The tail element is deleted from the list, and memory is freed.","pos":[23654,23717]},{"content":"In debug builds, an assertion failure will occur if the list is empty.","pos":[23718,23788]},{"pos":[23798,23805],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[23809,23869],"content":"See the example for <bpt id=\"p1\">[</bpt>CAtlList::IsEmpty<ept id=\"p1\">](#catllist__isempty)</ept>.","source":"See the example for [CAtlList::IsEmpty](#catllist__isempty)."},{"pos":[23879,23926],"content":"<bpt id=\"p1\">&lt;a name=\"catllist__setat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlList::SetAt","linkify":"<a name=\"catllist__setat\"></a>  CAtlList::SetAt","source":"<a name=\"catllist__setat\"></a>  CAtlList::SetAt"},{"content":"Call this method to set the value of the element at a given position in the list.","pos":[23930,24011]},{"pos":[24080,24090],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The POSITION value corresponding to the element to change.","pos":[24103,24161]},{"content":"The new element value.","pos":[24181,24203]},{"pos":[24213,24220],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Replaces the existing value with <ph id=\"ph1\">`element`</ph>.","pos":[24224,24267],"source":"Replaces the existing value with `element`."},{"content":"In debug builds, an assertion failure will occur if <ph id=\"ph1\">`pos`</ph> is equal to NULL.","pos":[24268,24343],"source":" In debug builds, an assertion failure will occur if `pos` is equal to NULL."},{"pos":[24353,24360],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[24364,24446],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#30<ept id=\"p2\">](../../atl/codesnippet/cpp/catllist-class_18.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#30](../../atl/codesnippet/cpp/catllist-class_18.cpp)]"},{"pos":[24456,24517],"content":"<bpt id=\"p1\">&lt;a name=\"catllist__swapelements\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlList::SwapElements","linkify":"<a name=\"catllist__swapelements\"></a>  CAtlList::SwapElements","source":"<a name=\"catllist__swapelements\"></a>  CAtlList::SwapElements"},{"content":"Call this method to swap elements in the list.","pos":[24521,24567]},{"pos":[24648,24658],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>pos1<ept id=\"p1\">*</ept>","pos":[24662,24668],"source":"*pos1*"},{"content":"The first POSITION value.","pos":[24672,24697]},{"content":"<bpt id=\"p1\">*</bpt>pos2<ept id=\"p1\">*</ept>","pos":[24704,24710],"source":"*pos2*"},{"content":"The second POSITION value.","pos":[24714,24740]},{"pos":[24750,24757],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Swaps the elements at the two positions specified.","pos":[24761,24811]},{"content":"In debug builds, an assertion failure will occur if either position value is equal to NULL.","pos":[24812,24903]},{"pos":[24913,24920],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[24924,25006],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#31<ept id=\"p2\">](../../atl/codesnippet/cpp/catllist-class_19.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#31](../../atl/codesnippet/cpp/catllist-class_19.cpp)]"},{"pos":[25015,25023],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>CList Class<ept id=\"p1\">](../../mfc/reference/clist-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[25027,25077],"source":"[CList Class](../../mfc/reference/clist-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Class Overview<ept id=\"p1\">](../../atl/atl-class-overview.md)</ept>","pos":[25080,25130],"source":" [Class Overview](../../atl/atl-class-overview.md)"}],"content":"---\ntitle: \"CAtlList Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL.CAtlList\"\n  - \"CAtlList\"\n  - \"ATL::CAtlList\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CAtlList class\"\nms.assetid: 09e98053-64b2-4efa-99ab-d0542caaf981\ncaps.latest.revision: 19\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CAtlList Class\nThis class provides methods for creating and managing a list object.  \n  \n## Syntax  \n  \n```\ntemplate<typename E,  class ETraits = CElementTraits<E>>  class CAtlList\n```  \n  \n#### Parameters  \n `E`  \n The element type.  \n  \n `ETraits`  \n The code used to copy or move elements. See [CElementTraits Class](../../atl/reference/celementtraits-class.md) for more details.  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAtlList::INARGTYPE](#catllist__inargtype)||  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAtlList::CAtlList](#catllist__catllist)|The constructor.|  \n|[CAtlList::~CAtlList](#catllist___dtorcatllist)|The destructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAtlList::AddHead](#catllist__addhead)|Call this method to add an element to the head of the list.|  \n|[CAtlList::AddHeadList](#catllist__addheadlist)|Call this method to add an existing list to the head of the list.|  \n|[CAtlList::AddTail](#catllist__addtail)|Call this method to add an element to the tail of this list.|  \n|[CAtlList::AddTailList](#catllist__addtaillist)|Call this method to add an existing list to the tail of this list.|  \n|[CAtlList::AssertValid](#catllist__assertvalid)|Call this method to confirm the list is valid.|  \n|[CAtlList::Find](#catllist__find)|Call this method to search the list for the specified element.|  \n|[CAtlList::FindIndex](#catllist__findindex)|Call this method to obtain the position of an element, given an index value.|  \n|[CAtlList::GetAt](#catllist__getat)|Call this method to return the element at a specified position in the list.|  \n|[CAtlList::GetCount](#catllist__getcount)|Call this method to return the number of objects in the list.|  \n|[CAtlList::GetHead](#catllist__gethead)|Call this method to return the element at the head of the list.|  \n|[CAtlList::GetHeadPosition](#catllist__getheadposition)|Call this method to obtain the position of the head of the list.|  \n|[CAtlList::GetNext](#catllist__getnext)|Call this method to return the next element from the list.|  \n|[CAtlList::GetPrev](#catllist__getprev)|Call this method to return the previous element from the list.|  \n|[CAtlList::GetTail](#catllist__gettail)|Call this method to return the element at the tail of the list.|  \n|[CAtlList::GetTailPosition](#catllist__gettailposition)|Call this method to obtain the position of the tail of the list.|  \n|[CAtlList::InsertAfter](#catllist__insertafter)|Call this method to insert a new element into the list after the specified position.|  \n|[CAtlList::InsertBefore](#catllist__insertbefore)|Call this method to insert a new element into the list before the specified position.|  \n|[CAtlList::IsEmpty](#catllist__isempty)|Call this method to determine if the list is empty.|  \n|[CAtlList::MoveToHead](#catllist__movetohead)|Call this method to move the specified element to the head of the list.|  \n|[CAtlList::MoveToTail](#catllist__movetotail)|Call this method to move the specified element to the tail of the list.|  \n|[CAtlList::RemoveAll](#catllist__removeall)|Call this method to remove all of the elements from the list.|  \n|[CAtlList::RemoveAt](#catllist__removeat)|Call this method to remove a single element from the list.|  \n|[CAtlList::RemoveHead](#catllist__removehead)|Call this method to remove the element at the head of the list.|  \n|[CAtlList::RemoveHeadNoReturn](#catllist__removeheadnoreturn)|Call this method to remove the element at the head of the list without returning a value.|  \n|[CAtlList::RemoveTail](#catllist__removetail)|Call this method to remove the element at the tail of the list.|  \n|[CAtlList::RemoveTailNoReturn](#catllist__removetailnoreturn)|Call this method to remove the element at the tail of the list without returning a value.|  \n|[CAtlList::SetAt](#catllist__setat)|Call this method to set the value of the element at a given position in the list.|  \n|[CAtlList::SwapElements](#catllist__swapelements)|Call this method to swap elements in the list.|  \n  \n## Remarks  \n The `CAtlList` class supports ordered lists of nonunique objects accessible sequentially or by value. `CAtlList` lists behave like doubly linked lists. Each list has a head and a tail, and new elements (or lists in some cases) can be added to either end of the list, or inserted before or after specific elements.  \n  \n Most of the `CAtlList` methods make use of a position value. This value is used by the methods to reference the actual memory location where the elements are stored, and should not be calculated or predicted directly. If it is necessary to access the *n*th element in the list, the method [CAtlList::FindIndex](#catllist__findindex) will return the corresponding position value for a given index. The methods [CAtlList::GetNext](#catllist__getnext) and [CAtlList::GetPrev](#catllist__getprev) can be used to iterate through the objects in the list.  \n  \n For more information regarding the collection classes available with ATL, see [ATL Collection Classes](../../atl/atl-collection-classes.md).  \n  \n## Requirements  \n **Header:** atlcoll.h  \n  \n##  <a name=\"catllist__addhead\"></a>  CAtlList::AddHead  \n Call this method to add an element to the head of the list.  \n  \n```\nPOSITION AddHead();\nPOSITION AddHead(INARGTYPE   element);\n```  \n  \n### Parameters  \n `element`  \n The new element.  \n  \n### Return Value  \n Returns the position of the newly added element.  \n  \n### Remarks  \n If the first version is used, an empty element is created using its default constructor, rather than its copy constructor.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#13](../../atl/codesnippet/cpp/catllist-class_1.cpp)]  \n  \n##  <a name=\"catllist__addheadlist\"></a>  CAtlList::AddHeadList  \n Call this method to add an existing list to the head of the list.  \n  \n```\nvoid AddHeadList(const CAtlList<E, ETraits>* plNew);\n```  \n  \n### Parameters  \n `plNew`  \n The list to be added.  \n  \n### Remarks  \n The list pointed to by `plNew` is inserted at the start of the existing list. In debug builds, an assertion failure will occur if `plNew` is equal to NULL.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#14](../../atl/codesnippet/cpp/catllist-class_2.cpp)]  \n  \n##  <a name=\"catllist__addtail\"></a>  CAtlList::AddTail  \n Call this method to add an element to the tail of this list.  \n  \n```\nPOSITION AddTail();\nPOSITION AddTail(INARGTYPE   element);\n```  \n  \n### Parameters  \n `element`  \n The element to add.  \n  \n### Return Value  \n Returns the POSITION of the newly added element.  \n  \n### Remarks  \n If the first version is used, an empty element is created using its default constructor, rather than its copy constructor. The element is added to the end of the list, and so it now becomes the tail. This method can be used with an empty list.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#15](../../atl/codesnippet/cpp/catllist-class_3.cpp)]  \n  \n##  <a name=\"catllist__addtaillist\"></a>  CAtlList::AddTailList  \n Call this method to add an existing list to the tail of this list.  \n  \n```\nvoid AddTailList(const CAtlList<E, ETraits>* plNew);\n```  \n  \n### Parameters  \n `plNew`  \n The list to be added.  \n  \n### Remarks  \n The list pointed to by `plNew` is inserted after the last element (if any) in the list object. The last element in the `plNew` list therefore becomes the tail. In debug builds, an assertion failure will occur if *plNew* is equal to NULL.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#16](../../atl/codesnippet/cpp/catllist-class_4.cpp)]  \n  \n##  <a name=\"catllist__assertvalid\"></a>  CAtlList::AssertValid  \n Call this method to confirm the list is valid.  \n  \n```\nvoid AssertValid() const;\n```  \n  \n### Remarks  \n In debug builds, an assertion failure will occur if the list object is not valid. To be valid, an empty list must have both the head and tail pointing to NULL, and a list that is not empty must have both the head and tail pointing to valid addresses.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#17](../../atl/codesnippet/cpp/catllist-class_5.cpp)]  \n  \n##  <a name=\"catllist__catllist\"></a>  CAtlList::CAtlList  \n The constructor.  \n  \n```\nCAtlList(UINT nBlockSize = 10) throw();\n```  \n  \n### Parameters  \n `nBlockSize`  \n The block size.  \n  \n### Remarks  \n The constructor for the `CAtlList` object. The block size is a measure of the amount of memory allocated when a new element is required. Larger block sizes reduce calls to memory allocation routines, but use more resources.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#18](../../atl/codesnippet/cpp/catllist-class_6.cpp)]  \n  \n##  <a name=\"catllist___dtorcatllist\"></a>  CAtlList::~CAtlList  \n The destructor.  \n  \n```\n~CAtlList() throw();\n```  \n  \n### Remarks  \n Frees all allocated resources, including a call to [CAtlList::RemoveAll](#catllist__removeall) to remove all elements from the list.  \n  \n In debug builds, an assertion failure will occur if the list still contains some elements after the call to `RemoveAll`.  \n  \n##  <a name=\"catllist__find\"></a>  CAtlList::Find  \n Call this method to search the list for the specified element.  \n  \n```\nPOSITION Find(INARGTYPE element,  POSITION posStartAfter = NULL) const throw();\n```  \n  \n### Parameters  \n `element`  \n The element to be found in the list.  \n  \n `posStartAfter`  \n The start position for the search. If no value is specified, the search begins with the head element.  \n  \n### Return Value  \n Returns the POSITION value of the element if found, otherwise returns NULL.  \n  \n### Remarks  \n In debug builds, an assertion failure will occur if the list object is not valid, or if the `posStartAfter` value is out of range.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#19](../../atl/codesnippet/cpp/catllist-class_7.cpp)]  \n  \n##  <a name=\"catllist__findindex\"></a>  CAtlList::FindIndex  \n Call this method to obtain the position of an element, given an index value.  \n  \n```\nPOSITION FindIndex(size_t iElement) const throw();\n```  \n  \n### Parameters  \n `iElement`  \n The zero-based index of the required list element.  \n  \n### Return Value  \n Returns the corresponding POSITION value, or NULL if `iElement` is out of range.  \n  \n### Remarks  \n This method returns the POSITION corresponding to a given index value, allowing access to the *n*th element in the list.  \n  \n In debug builds, an assertion failure will occur if the list object is not valid.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#20](../../atl/codesnippet/cpp/catllist-class_8.cpp)]  \n  \n##  <a name=\"catllist__getat\"></a>  CAtlList::GetAt  \n Call this method to return the element at a specified position in the list.  \n  \n```\nE& GetAt(POSITION pos) throw();\n\nconst E& GetAt(POSITION pos) const throw();\n```  \n  \n### Parameters  \n `pos`  \n The POSITION value specifying a particular element.  \n  \n### Return Value  \n A reference to, or copy of, the element.  \n  \n### Remarks  \n If the list is **const**, `GetAt` returns a copy of the element. This allows the method to be used only on the right side of an assignment statement and protects the list from modification.  \n  \n If the list is not **const**, `GetAt` returns a reference to the element. This allows the method to be used on either side of an assignment statement and thus allows the list entries to be modified.  \n  \n In debug builds, an assertion failure will occur if `pos` is equal to NULL.  \n  \n### Example  \n See the example for [CAtlList::FindIndex](#catllist__findindex).  \n  \n##  <a name=\"catllist__getcount\"></a>  CAtlList::GetCount  \n Call this method to return the number of objects in the list.  \n  \n```\nsize_t GetCount() const throw();\n```  \n  \n### Return Value  \n Returns the number of elements in the list.  \n  \n### Example  \n See the example for [CAtlList::Find](#catllist__find).  \n  \n##  <a name=\"catllist__gethead\"></a>  CAtlList::GetHead  \n Call this method to return the element at the head of the list.  \n  \n```\nE& GetHead() throw();\n\nconst E& GetHead() const throw();\n```  \n  \n### Return Value  \n Returns a reference to, or a copy of, the element at the head of the list.  \n  \n### Remarks  \n If the list is **const**, `GetHead` returns a copy of the element at the head of the list. This allows the method to be used only on the right side of an assignment statement and protects the list from modification.  \n  \n If the list is not **const**, `GetHead` returns a reference to the element at the head of the list. This allows the method to be used on either side of an assignment statement and thus allows the list entries to be modified.  \n  \n In debug builds, an assertion failure will occur if the head of the list points to NULL.  \n  \n### Example  \n See the example for [CAtlList::AddHead](#catllist__addhead).  \n  \n##  <a name=\"catllist__getheadposition\"></a>  CAtlList::GetHeadPosition  \n Call this method to obtain the position of the head of the list.  \n  \n```\nPOSITION GetHeadPosition() const throw();\n```  \n  \n### Return Value  \n Returns the POSITION value corresponding to the element at the head of the list.  \n  \n### Remarks  \n If the list is empty, the value returned is NULL.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#21](../../atl/codesnippet/cpp/catllist-class_9.cpp)]  \n  \n##  <a name=\"catllist__getnext\"></a>  CAtlList::GetNext  \n Call this method to return the next element from the list.  \n  \n```\nE& GetNext(POSITION& pos) throw();\n\nconst E& GetNext(POSITION& pos) const throw();\n```  \n  \n### Parameters  \n `pos`  \n A POSITION value, returned by a previous call to `GetNext`, [CAtlList::GetHeadPosition](#catllist__getheadposition), or other `CAtlList` method.  \n  \n### Return Value  \n If the list is **const**, `GetNext` returns a copy of the next element of the list. This allows the method to be used only on the right side of an assignment statement and protects the list from modification.  \n  \n If the list is not **const**, `GetNext` returns a reference to the next element of the list. This allows the method to be used on either side of an assignment statement and thus allows the list entries to be modified.  \n  \n### Remarks  \n The POSITION counter, `pos`, is updated to point to the next element in the list, or NULL if there are no more elements. In debug builds, an assertion failure will occur if `pos` is equal to NULL.  \n  \n### Example  \n See the example for [CAtlList::GetHeadPosition](#catllist__getheadposition).  \n  \n##  <a name=\"catllist__getprev\"></a>  CAtlList::GetPrev  \n Call this method to return the previous element from the list.  \n  \n```\nE& GetPrev(POSITION& pos) throw();\n\nconst E& GetPrev(POSITION& pos) const throw();\n```  \n  \n### Parameters  \n `pos`  \n A POSITION value, returned by a previous call to `GetPrev`, [CAtlList::GetTailPosition](#catllist__gettailposition), or other `CAtlList` method.  \n  \n### Return Value  \n If the list is **const**, `GetPrev` returns a copy of an element of the list. This allows the method to be used only on the right side of an assignment statement and protects the list from modification.  \n  \n If the list is not **const**, `GetPrev` returns a reference to an element of the list. This allows the method to be used on either side of an assignment statement and thus allows the list entries to be modified.  \n  \n### Remarks  \n The POSITION counter, `pos`, is updated to point to the previous element in the list, or NULL if there are no more elements. In debug builds, an assertion failure will occur if `pos` is equal to NULL.  \n  \n### Example  \n See the example for [CAtlList::GetTailPosition](#catllist__gettailposition).  \n  \n##  <a name=\"catllist__gettail\"></a>  CAtlList::GetTail  \n Call this method to return the element at the tail of the list.  \n  \n```\nE& GetTail() throw();\n\nconst E& GetTail() const throw();\n```  \n  \n### Return Value  \n Returns a reference to, or a copy of, the element at the tail of the list.  \n  \n### Remarks  \n If the list is **const**, `GetTail` returns a copy of the element at the head of the list. This allows the method to be used only on the right side of an assignment statement and protects the list from modification.  \n  \n If the list is not **const**, `GetTail` returns a reference to the element at the head of the list. This allows the method to be used on either side of an assignment statement and thus allows the list entries to be modified.  \n  \n In debug builds, an assertion failure will occur if the tail of the list points to NULL.  \n  \n### Example  \n See the example for [CAtlList::AddTail](#catllist__addtail).  \n  \n##  <a name=\"catllist__gettailposition\"></a>  CAtlList::GetTailPosition  \n Call this method to obtain the position of the tail of the list.  \n  \n```\nPOSITION GetTailPosition() const throw();\n```  \n  \n### Return Value  \n Returns the POSITION value corresponding to the element at the tail of the list.  \n  \n### Remarks  \n If the list is empty, the value returned is NULL.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#22](../../atl/codesnippet/cpp/catllist-class_10.cpp)]  \n  \n##  <a name=\"catllist__inargtype\"></a>  CAtlList::INARGTYPE  \n Type used when an element is passed as an input argument.  \n  \n```\ntypedef ETraits::INARGTYPE INARGTYPE;\n```  \n  \n##  <a name=\"catllist__insertafter\"></a>  CAtlList::InsertAfter  \n Call this method to insert a new element into the list after the specified position.  \n  \n```\nPOSITION InsertAfter(POSITION pos,  INARGTYPE element);\n```  \n  \n### Parameters  \n `pos`  \n The POSITION value after which the new element will be inserted.  \n  \n `element`  \n The element to be inserted.  \n  \n### Return Value  \n Returns the POSITION value of the new element.  \n  \n### Remarks  \n In debug builds, an assertion failure will occur if the list isn't valid, if the insert fails, or if an attempt is made to insert the element after the tail.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#23](../../atl/codesnippet/cpp/catllist-class_11.cpp)]  \n  \n##  <a name=\"catllist__insertbefore\"></a>  CAtlList::InsertBefore  \n Call this method to insert a new element into the list before the specified position.  \n  \n```\nPOSITION InsertBefore(POSITION pos,  INARGTYPE element);\n```  \n  \n### Parameters  \n `pos`  \n The new element will be inserted into the list before this POSITION value.  \n  \n `element`  \n The element to be inserted.  \n  \n### Return Value  \n Returns the POSITION value of the new element.  \n  \n### Remarks  \n In debug builds, an assertion failure will occur if the list isn't valid, if the insert fails, or if an attempt is made to insert the element before the head.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#24](../../atl/codesnippet/cpp/catllist-class_12.cpp)]  \n  \n##  <a name=\"catllist__isempty\"></a>  CAtlList::IsEmpty  \n Call this method to determine if the list is empty.  \n  \n```\nbool IsEmpty() const throw();\n```  \n  \n### Return Value  \n Returns true if the list contains no objects, otherwise false.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#25](../../atl/codesnippet/cpp/catllist-class_13.cpp)]  \n  \n##  <a name=\"catllist__movetohead\"></a>  CAtlList::MoveToHead  \n Call this method to move the specified element to the head of the list.  \n  \n```\nvoid MoveToHead(POSITION pos) throw();\n```  \n  \n### Parameters  \n `pos`  \n The POSITION value of the element to move.  \n  \n### Remarks  \n The specified element is moved from its current position to the head of the list. In debug builds, an assertion failure will occur if `pos` is equal to NULL.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#26](../../atl/codesnippet/cpp/catllist-class_14.cpp)]  \n  \n##  <a name=\"catllist__movetotail\"></a>  CAtlList::MoveToTail  \n Call this method to move the specified element to the tail of the list.  \n  \n```\nvoid MoveToTail(POSITION pos) throw();\n```  \n  \n### Parameters  \n `pos`  \n The POSITION value of the element to move.  \n  \n### Remarks  \n The specified element is moved from its current position to the tail of the list. In debug builds, an assertion failure will occur if `pos` is equal to NULL.  \n  \n### Example  \n See the example for [CAtlList::MoveToHead](#catllist__movetohead).  \n  \n##  <a name=\"catllist__removeall\"></a>  CAtlList::RemoveAll  \n Call this method to remove all of the elements from the list.  \n  \n```\nvoid RemoveAll() throw();\n```  \n  \n### Remarks  \n This method removes all of the elements from the list and frees the allocated memory. In debugs builds, an ATLASSERT will be raised if all elements aren't deleted or if the list structure has become corrupted.  \n  \n### Example  \n See the example for [CAtlList::IsEmpty](#catllist__isempty).  \n  \n##  <a name=\"catllist__removeat\"></a>  CAtlList::RemoveAt  \n Call this method to remove a single element from the list.  \n  \n```\nvoid RemoveAt(POSITION pos) throw();\n```  \n  \n### Parameters  \n `pos`  \n The POSITION value of the element to remove.  \n  \n### Remarks  \n The element referenced by `pos` is removed, and memory is freed. It is acceptable to use `RemoveAt` to remove the head or tail of the list.  \n  \n In debug builds, an assertion failure will occur if the list is not valid or if removing the element causes the list to access memory which isn't part of the list structure.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#27](../../atl/codesnippet/cpp/catllist-class_15.cpp)]  \n  \n##  <a name=\"catllist__removehead\"></a>  CAtlList::RemoveHead  \n Call this method to remove the element at the head of the list.  \n  \n```\nE RemoveHead();\n```  \n  \n### Return Value  \n Returns the element at the head of the list.  \n  \n### Remarks  \n The head element is deleted from the list, and memory is freed. A copy of the element is returned. In debug builds, an assertion failure will occur if the list is empty.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#28](../../atl/codesnippet/cpp/catllist-class_16.cpp)]  \n  \n##  <a name=\"catllist__removeheadnoreturn\"></a>  CAtlList::RemoveHeadNoReturn  \n Call this method to remove the element at the head of the list without returning a value.  \n  \n```\nvoid RemoveHeadNoReturn() throw();\n```  \n  \n### Remarks  \n The head element is deleted from the list, and memory is freed. In debug builds, an assertion failure will occur if the list is empty.  \n  \n### Example  \n See the example for [CAtlList::IsEmpty](#catllist__isempty).  \n  \n##  <a name=\"catllist__removetail\"></a>  CAtlList::RemoveTail  \n Call this method to remove the element at the tail of the list.  \n  \n```\nE RemoveTail();\n```  \n  \n### Return Value  \n Returns the element at the tail of the list.  \n  \n### Remarks  \n The tail element is deleted from the list, and memory is freed. A copy of the element is returned. In debug builds, an assertion failure will occur if the list is empty.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#29](../../atl/codesnippet/cpp/catllist-class_17.cpp)]  \n  \n##  <a name=\"catllist__removetailnoreturn\"></a>  CAtlList::RemoveTailNoReturn  \n Call this method to remove the element at the tail of the list without returning a value.  \n  \n```\nvoid RemoveTailNoReturn() throw();\n```  \n  \n### Remarks  \n The tail element is deleted from the list, and memory is freed. In debug builds, an assertion failure will occur if the list is empty.  \n  \n### Example  \n See the example for [CAtlList::IsEmpty](#catllist__isempty).  \n  \n##  <a name=\"catllist__setat\"></a>  CAtlList::SetAt  \n Call this method to set the value of the element at a given position in the list.  \n  \n```\nvoid SetAt(POSITION pos,  INARGTYPE element);\n```  \n  \n### Parameters  \n `pos`  \n The POSITION value corresponding to the element to change.  \n  \n `element`  \n The new element value.  \n  \n### Remarks  \n Replaces the existing value with `element`. In debug builds, an assertion failure will occur if `pos` is equal to NULL.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#30](../../atl/codesnippet/cpp/catllist-class_18.cpp)]  \n  \n##  <a name=\"catllist__swapelements\"></a>  CAtlList::SwapElements  \n Call this method to swap elements in the list.  \n  \n```\nvoid SwapElements(POSITION pos1,  POSITION pos2) throw();\n```  \n  \n### Parameters  \n *pos1*  \n The first POSITION value.  \n  \n *pos2*  \n The second POSITION value.  \n  \n### Remarks  \n Swaps the elements at the two positions specified. In debug builds, an assertion failure will occur if either position value is equal to NULL.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#31](../../atl/codesnippet/cpp/catllist-class_19.cpp)]  \n  \n## See Also  \n [CList Class](../../mfc/reference/clist-class.md)   \n [Class Overview](../../atl/atl-class-overview.md)\n"}