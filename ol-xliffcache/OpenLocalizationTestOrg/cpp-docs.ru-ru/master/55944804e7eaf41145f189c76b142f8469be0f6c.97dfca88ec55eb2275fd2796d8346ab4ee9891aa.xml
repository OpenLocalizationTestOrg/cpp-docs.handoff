{"nodes":[{"pos":[12,41],"content":"CBrush Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CBrush Class | Microsoft Docs","pos":[0,29]}]},{"pos":[620,632],"content":"CBrush Class","linkify":"CBrush Class","nodes":[{"content":"CBrush Class","pos":[0,12]}]},{"content":"Encapsulates a Windows graphics device interface (GDI) brush.","pos":[633,694]},{"pos":[703,709],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[768,775],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[785,804],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[811,815]},{"content":"Description","pos":[816,827]},{"pos":[865,898],"content":"<bpt id=\"p1\">[</bpt>CBrush::CBrush<ept id=\"p1\">](#cbrush__cbrush)</ept>","source":"[CBrush::CBrush](#cbrush__cbrush)"},{"pos":[899,928],"content":"Constructs a <ph id=\"ph1\">`CBrush`</ph> object.","source":"Constructs a `CBrush` object."},{"pos":[939,953],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[960,964]},{"content":"Description","pos":[965,976]},{"pos":[1014,1073],"content":"<bpt id=\"p1\">[</bpt>CBrush::CreateBrushIndirect<ept id=\"p1\">](#cbrush__createbrushindirect)</ept>","source":"[CBrush::CreateBrushIndirect](#cbrush__createbrushindirect)"},{"pos":[1074,1225],"content":"Initializes a brush with the style, color, and pattern specified in a <bpt id=\"p1\">[</bpt>LOGBRUSH<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145035)</ept> structure.","source":"Initializes a brush with the style, color, and pattern specified in a [LOGBRUSH](http://msdn.microsoft.com/library/windows/desktop/dd145035) structure."},{"pos":[1230,1293],"content":"<bpt id=\"p1\">[</bpt>CBrush::CreateDIBPatternBrush<ept id=\"p1\">](#cbrush__createdibpatternbrush)</ept>","source":"[CBrush::CreateDIBPatternBrush](#cbrush__createdibpatternbrush)"},{"content":"Initializes a brush with a pattern specified by a device-independent bitmap (DIB).","pos":[1294,1376]},{"pos":[1381,1434],"content":"<bpt id=\"p1\">[</bpt>CBrush::CreateHatchBrush<ept id=\"p1\">](#cbrush__createhatchbrush)</ept>","source":"[CBrush::CreateHatchBrush](#cbrush__createhatchbrush)"},{"content":"Initializes a brush with the specified hatched pattern and color.","pos":[1435,1500]},{"pos":[1505,1562],"content":"<bpt id=\"p1\">[</bpt>CBrush::CreatePatternBrush<ept id=\"p1\">](#cbrush__createpatternbrush)</ept>","source":"[CBrush::CreatePatternBrush](#cbrush__createpatternbrush)"},{"content":"Initializes a brush with a pattern specified by a bitmap.","pos":[1563,1620]},{"pos":[1625,1678],"content":"<bpt id=\"p1\">[</bpt>CBrush::CreateSolidBrush<ept id=\"p1\">](#cbrush__createsolidbrush)</ept>","source":"[CBrush::CreateSolidBrush](#cbrush__createsolidbrush)"},{"content":"Initializes a brush with the specified solid color.","pos":[1679,1730]},{"pos":[1735,1794],"content":"<bpt id=\"p1\">[</bpt>CBrush::CreateSysColorBrush<ept id=\"p1\">](#cbrush__createsyscolorbrush)</ept>","source":"[CBrush::CreateSysColorBrush](#cbrush__createsyscolorbrush)"},{"content":"Creates a brush that is the default system color.","pos":[1795,1844]},{"pos":[1849,1890],"content":"<bpt id=\"p1\">[</bpt>CBrush::FromHandle<ept id=\"p1\">](#cbrush__fromhandle)</ept>","source":"[CBrush::FromHandle](#cbrush__fromhandle)"},{"pos":[1891,1979],"content":"Returns a pointer to a <ph id=\"ph1\">`CBrush`</ph> object when given a handle to a Windows <ph id=\"ph2\">`HBRUSH`</ph> object.","source":"Returns a pointer to a `CBrush` object when given a handle to a Windows `HBRUSH` object."},{"pos":[1984,2027],"content":"<bpt id=\"p1\">[</bpt>CBrush::GetLogBrush<ept id=\"p1\">](#cbrush__getlogbrush)</ept>","source":"[CBrush::GetLogBrush](#cbrush__getlogbrush)"},{"pos":[2028,2116],"content":"Gets a <bpt id=\"p1\">[</bpt>LOGBRUSH<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145035)</ept> structure.","source":"Gets a [LOGBRUSH](http://msdn.microsoft.com/library/windows/desktop/dd145035) structure."},{"pos":[2127,2143],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[2150,2154]},{"content":"Description","pos":[2155,2166]},{"pos":[2204,2255],"content":"<bpt id=\"p1\">[</bpt>CBrush::operator HBRUSH<ept id=\"p1\">](#cbrush__operator_hbrush)</ept>","source":"[CBrush::operator HBRUSH](#cbrush__operator_hbrush)"},{"pos":[2256,2315],"content":"Returns the Windows handle attached to the <ph id=\"ph1\">`CBrush`</ph> object.","source":"Returns the Windows handle attached to the `CBrush` object."},{"pos":[2325,2332],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2336,2453],"content":"To use a <ph id=\"ph1\">`CBrush`</ph> object, construct a <ph id=\"ph2\">`CBrush`</ph> object and pass it to any <ph id=\"ph3\">`CDC`</ph> member function that requires a brush.","source":"To use a `CBrush` object, construct a `CBrush` object and pass it to any `CDC` member function that requires a brush."},{"content":"Brushes can be solid, hatched, or patterned.","pos":[2460,2504]},{"pos":[2511,2597],"content":"For more information on <ph id=\"ph1\">`CBrush`</ph>, see <bpt id=\"p1\">[</bpt>Graphic Objects<ept id=\"p1\">](../../mfc/graphic-objects.md)</ept>.","source":"For more information on `CBrush`, see [Graphic Objects](../../mfc/graphic-objects.md)."},{"pos":[2606,2627],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[2631,2678],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[2685,2738],"content":"<bpt id=\"p1\">[</bpt>CGdiObject<ept id=\"p1\">](../../mfc/reference/cgdiobject-class.md)</ept>","source":"[CGdiObject](../../mfc/reference/cgdiobject-class.md)"},{"pos":[2762,2774],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2778,2798],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxwin.h","source":"**Header:** afxwin.h"},{"pos":[2808,2853],"content":"<bpt id=\"p1\">&lt;a name=\"cbrush__cbrush\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CBrush::CBrush","linkify":"<a name=\"cbrush__cbrush\"></a>  CBrush::CBrush","source":"<a name=\"cbrush__cbrush\"></a>  CBrush::CBrush"},{"pos":[2857,2886],"content":"Constructs a <ph id=\"ph1\">`CBrush`</ph> object.","source":"Constructs a `CBrush` object."},{"pos":[3050,3060],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the foreground color of the brush as an RGB color.","pos":[3077,3137]},{"content":"If the brush is hatched, this parameter specifies the color of the hatching.","pos":[3138,3214]},{"content":"Specifies the hatch style of the brush.","pos":[3233,3272]},{"content":"It can be any one of the following values:","pos":[3273,3315]},{"pos":[3323,3382],"content":"<ph id=\"ph1\">`HS_BDIAGONAL`</ph> Downward hatch (left to right) at 45 degrees","source":"`HS_BDIAGONAL` Downward hatch (left to right) at 45 degrees"},{"pos":[3390,3435],"content":"<ph id=\"ph1\">`HS_CROSS`</ph> Horizontal and vertical crosshatch","source":"`HS_CROSS` Horizontal and vertical crosshatch"},{"pos":[3443,3482],"content":"<ph id=\"ph1\">`HS_DIAGCROSS`</ph> Crosshatch at 45 degrees","source":"`HS_DIAGCROSS` Crosshatch at 45 degrees"},{"pos":[3490,3547],"content":"<ph id=\"ph1\">`HS_FDIAGONAL`</ph> Upward hatch (left to right) at 45 degrees","source":"`HS_FDIAGONAL` Upward hatch (left to right) at 45 degrees"},{"pos":[3555,3587],"content":"<ph id=\"ph1\">`HS_HORIZONTAL`</ph> Horizontal hatch","source":"`HS_HORIZONTAL` Horizontal hatch"},{"pos":[3595,3623],"content":"<ph id=\"ph1\">`HS_VERTICAL`</ph> Vertical hatch","source":"`HS_VERTICAL` Vertical hatch"},{"pos":[3630,3724],"content":"`pBitmap`  \nPoints to a `CBitmap` object that specifies a bitmap with which the brush paints.","leadings":[""," "],"nodes":[{"content":"Points to a <ph id=\"ph1\">`CBitmap`</ph> object that specifies a bitmap with which the brush paints.","pos":[12,93],"source":"Points to a `CBitmap` object that specifies a bitmap with which the brush paints."}]},{"pos":[3734,3741],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3745,3912],"content":"<ph id=\"ph1\">`CBrush`</ph> has four overloaded constructors.The constructor with no arguments constructs an uninitialized <ph id=\"ph2\">`CBrush`</ph> object that must be initialized before it can be used.","source":"`CBrush` has four overloaded constructors.The constructor with no arguments constructs an uninitialized `CBrush` object that must be initialized before it can be used."},{"content":"If you use the constructor with no arguments, you must initialize the resulting <ph id=\"ph1\">`CBrush`</ph> object with <bpt id=\"p1\">[</bpt>CreateSolidBrush<ept id=\"p1\">](#cbrush__createsolidbrush)</ept>, <bpt id=\"p2\">[</bpt>CreateHatchBrush<ept id=\"p2\">](#cbrush__createhatchbrush)</ept>, <bpt id=\"p3\">[</bpt>CreateBrushIndirect<ept id=\"p3\">](#cbrush__createbrushindirect)</ept>, <bpt id=\"p4\">[</bpt>CreatePatternBrush<ept id=\"p4\">](#cbrush__createpatternbrush)</ept>, or <bpt id=\"p5\">[</bpt>CreateDIBPatternBrush<ept id=\"p5\">](#cbrush__createdibpatternbrush)</ept>.","pos":[3919,4277],"source":"If you use the constructor with no arguments, you must initialize the resulting `CBrush` object with [CreateSolidBrush](#cbrush__createsolidbrush), [CreateHatchBrush](#cbrush__createhatchbrush), [CreateBrushIndirect](#cbrush__createbrushindirect), [CreatePatternBrush](#cbrush__createpatternbrush), or [CreateDIBPatternBrush](#cbrush__createdibpatternbrush)."},{"content":"If you use one of the constructors that takes arguments, then no further initialization is necessary.","pos":[4278,4379]},{"content":"The constructors with arguments can throw an exception if errors are encountered, while the constructor with no arguments will always succeed.","pos":[4380,4522]},{"content":"The constructor with a single <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> parameter constructs a solid brush with the specified color.","pos":[4529,4690],"source":"The constructor with a single [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter constructs a solid brush with the specified color."},{"content":"The color specifies an RGB value and can be constructed with the <ph id=\"ph1\">`RGB`</ph> macro in WINDOWS.H.","pos":[4691,4781],"source":" The color specifies an RGB value and can be constructed with the `RGB` macro in WINDOWS.H."},{"content":"The constructor with two parameters constructs a hatch brush.","pos":[4788,4849]},{"content":"The <ph id=\"ph1\">`nIndex`</ph> parameter specifies the index of a hatched pattern.","pos":[4850,4914],"source":" The `nIndex` parameter specifies the index of a hatched pattern."},{"content":"The <ph id=\"ph1\">`crColor`</ph> parameter specifies the color.","pos":[4915,4959],"source":" The `crColor` parameter specifies the color."},{"content":"The constructor with a <ph id=\"ph1\">`CBitmap`</ph> parameter constructs a patterned brush.","pos":[4966,5038],"source":"The constructor with a `CBitmap` parameter constructs a patterned brush."},{"content":"The parameter identifies a bitmap.","pos":[5039,5073]},{"content":"The bitmap is assumed to have been created by using <bpt id=\"p1\">[</bpt>CBitmap::CreateBitmap<ept id=\"p1\">](../../mfc/reference/cbitmap-class.md#cbitmap__createbitmap)</ept>, <bpt id=\"p2\">[</bpt>CBitmap::CreateBitmapIndirect<ept id=\"p2\">](../../mfc/reference/cbitmap-class.md#cbitmap__createbitmapindirect)</ept>, <bpt id=\"p3\">[</bpt>CBitmap::LoadBitmap<ept id=\"p3\">](../../mfc/reference/cbitmap-class.md#cbitmap__loadbitmap)</ept>, or <bpt id=\"p4\">[</bpt>CBitmap::CreateCompatibleBitmap<ept id=\"p4\">](../../mfc/reference/cbitmap-class.md#cbitmap__createcompatiblebitmap)</ept>.","pos":[5074,5500],"source":" The bitmap is assumed to have been created by using [CBitmap::CreateBitmap](../../mfc/reference/cbitmap-class.md#cbitmap__createbitmap), [CBitmap::CreateBitmapIndirect](../../mfc/reference/cbitmap-class.md#cbitmap__createbitmapindirect), [CBitmap::LoadBitmap](../../mfc/reference/cbitmap-class.md#cbitmap__loadbitmap), or [CBitmap::CreateCompatibleBitmap](../../mfc/reference/cbitmap-class.md#cbitmap__createcompatiblebitmap)."},{"content":"The minimum size for a bitmap to be used in a fill pattern is 8 pixels by 8 pixels.","pos":[5501,5584]},{"pos":[5594,5601],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5605,5681],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#21<ept id=\"p2\">](../../mfc/codesnippet/cpp/cbrush-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#21](../../mfc/codesnippet/cpp/cbrush-class_1.cpp)]"},{"pos":[5691,5762],"content":"<bpt id=\"p1\">&lt;a name=\"cbrush__createbrushindirect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CBrush::CreateBrushIndirect","linkify":"<a name=\"cbrush__createbrushindirect\"></a>  CBrush::CreateBrushIndirect","source":"<a name=\"cbrush__createbrushindirect\"></a>  CBrush::CreateBrushIndirect"},{"pos":[5766,5915],"content":"Initializes a brush with a style, color, and pattern specified in a <bpt id=\"p1\">[</bpt>LOGBRUSH<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145035)</ept> structure.","source":"Initializes a brush with a style, color, and pattern specified in a [LOGBRUSH](http://msdn.microsoft.com/library/windows/desktop/dd145035) structure."},{"pos":[5994,6004],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>lpLogBrush<ept id=\"p1\">*</ept>","pos":[6008,6020],"source":"*lpLogBrush*"},{"content":"Points to a <bpt id=\"p1\">[</bpt>LOGBRUSH<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145035)</ept> structure that contains information about the brush.","pos":[6024,6159],"source":" Points to a [LOGBRUSH](http://msdn.microsoft.com/library/windows/desktop/dd145035) structure that contains information about the brush."},{"pos":[6169,6181],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the function is successful; otherwise 0.","pos":[6185,6236]},{"pos":[6246,6253],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The brush can subsequently be selected as the current brush for any device context.","pos":[6257,6340]},{"content":"A brush created using a monochrome (1 plane, 1 bit per pixel) bitmap is drawn using the current text and background colors.","pos":[6347,6470]},{"content":"Pixels represented by a bit set to 0 will be drawn with the current text color.","pos":[6471,6550]},{"content":"Pixels represented by a bit set to 1 will be drawn with the current background color.","pos":[6551,6636]},{"pos":[6646,6653],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6657,6733],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#22<ept id=\"p2\">](../../mfc/codesnippet/cpp/cbrush-class_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#22](../../mfc/codesnippet/cpp/cbrush-class_2.cpp)]"},{"pos":[6743,6818],"content":"<bpt id=\"p1\">&lt;a name=\"cbrush__createdibpatternbrush\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CBrush::CreateDIBPatternBrush","linkify":"<a name=\"cbrush__createdibpatternbrush\"></a>  CBrush::CreateDIBPatternBrush","source":"<a name=\"cbrush__createdibpatternbrush\"></a>  CBrush::CreateDIBPatternBrush"},{"content":"Initializes a brush with the pattern specified by a device-independent bitmap (DIB).","pos":[6822,6906]},{"pos":[7083,7093],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>hPackedDIB<ept id=\"p1\">*</ept>","pos":[7097,7109],"source":"*hPackedDIB*"},{"content":"Identifies a global-memory object containing a packed device-independent bitmap (DIB).","pos":[7113,7199]},{"content":"<bpt id=\"p1\">*</bpt>nUsage<ept id=\"p1\">*</ept>","pos":[7206,7214],"source":"*nUsage*"},{"content":"Specifies whether the <bpt id=\"p1\">**</bpt>bmiColors[]<ept id=\"p1\">**</ept> fields of the <bpt id=\"p2\">[</bpt>BITMAPINFO<ept id=\"p2\">](../../mfc/reference/bitmapinfo-structure.md)</ept> data structure (a part of the \"packed DIB\") contain explicit RGB values or indices into the currently realized logical palette.","pos":[7218,7455],"source":" Specifies whether the **bmiColors[]** fields of the [BITMAPINFO](../../mfc/reference/bitmapinfo-structure.md) data structure (a part of the \"packed DIB\") contain explicit RGB values or indices into the currently realized logical palette."},{"content":"The parameter must be one of the following values:","pos":[7456,7506]},{"pos":[7514,7588],"content":"<bpt id=\"p1\">**</bpt>DIB_PAL_COLORS<ept id=\"p1\">**</ept> The color table consists of an array of 16-bit indexes.","source":"**DIB_PAL_COLORS** The color table consists of an array of 16-bit indexes."},{"pos":[7596,7659],"content":"<bpt id=\"p1\">**</bpt>DIB_RGB_COLORS<ept id=\"p1\">**</ept> The color table contains literal RGB values.","source":"**DIB_RGB_COLORS** The color table contains literal RGB values."},{"pos":[7666,7821],"content":"*lpPackedDIB*  \nPoints to a packed DIB consisting of a `BITMAPINFO` structure immediately followed by an array of bytes defining the pixels of the bitmap.","leadings":[""," "],"nodes":[{"content":"<bpt id=\"p1\">*</bpt>lpPackedDIB<ept id=\"p1\">*</ept>","pos":[0,13],"source":"*lpPackedDIB*"},{"content":"Points to a packed DIB consisting of a <ph id=\"ph1\">`BITMAPINFO`</ph> structure immediately followed by an array of bytes defining the pixels of the bitmap.","pos":[16,154],"source":"Points to a packed DIB consisting of a `BITMAPINFO` structure immediately followed by an array of bytes defining the pixels of the bitmap."}]},{"pos":[7831,7843],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[7847,7882]},{"pos":[7892,7899],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The brush can subsequently be selected for any device context that supports raster operations.","pos":[7903,7997]},{"content":"The two versions differ in the way you handle the DIB:","pos":[8004,8058]},{"pos":[8068,8248],"content":"In the first version, to obtain a handle to the DIB you call the Windows <bpt id=\"p1\">**</bpt>GlobalAlloc<ept id=\"p1\">**</ept> function to allocate a block of global memory and then fill the memory with the packed DIB.","source":"In the first version, to obtain a handle to the DIB you call the Windows **GlobalAlloc** function to allocate a block of global memory and then fill the memory with the packed DIB."},{"pos":[8258,8363],"content":"In the second version, it is not necessary to call <bpt id=\"p1\">**</bpt>GlobalAlloc<ept id=\"p1\">**</ept> to allocate memory for the packed DIB.","source":"In the second version, it is not necessary to call **GlobalAlloc** to allocate memory for the packed DIB."},{"content":"A packed DIB consists of a <ph id=\"ph1\">`BITMAPINFO`</ph> data structure immediately followed by the array of bytes that defines the pixels of the bitmap.","pos":[8370,8506],"source":"A packed DIB consists of a `BITMAPINFO` data structure immediately followed by the array of bytes that defines the pixels of the bitmap."},{"content":"Bitmaps used as fill patterns should be 8 pixels by 8 pixels.","pos":[8507,8568]},{"content":"If the bitmap is larger, Windows creates a fill pattern using only the bits corresponding to the first 8 rows and 8 columns of pixels in the upper-left corner of the bitmap.","pos":[8569,8742]},{"content":"When an application selects a two-color DIB pattern brush into a monochrome device context, Windows ignores the colors specified in the DIB and instead displays the pattern brush using the current text and background colors of the device context.","pos":[8749,8995]},{"content":"Pixels mapped to the first color (at offset 0 in the DIB color table) of the DIB are displayed using the text color.","pos":[8996,9112]},{"content":"Pixels mapped to the second color (at offset 1 in the color table) are displayed using the background color.","pos":[9113,9221]},{"pos":[9228,9349],"content":"For information about using the following Windows functions, see the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>:","source":"For information about using the following Windows functions, see the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]:"},{"pos":[9357,9605],"content":"<bpt id=\"p1\">[</bpt>CreateDIBPatternBrush<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183492)</ept> (This function is provided only for compatibility with applications written for versions of Windows earlier than 3.0; use the <bpt id=\"p2\">**</bpt>CreateDIBPatternBrushPt<ept id=\"p2\">**</ept> function.)","source":"[CreateDIBPatternBrush](http://msdn.microsoft.com/library/windows/desktop/dd183492) (This function is provided only for compatibility with applications written for versions of Windows earlier than 3.0; use the **CreateDIBPatternBrushPt** function.)"},{"pos":[9613,9759],"content":"<bpt id=\"p1\">[</bpt>CreateDIBPatternBrushPt<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183493)</ept> (This function should be used for Win32-based applications.)","source":"[CreateDIBPatternBrushPt](http://msdn.microsoft.com/library/windows/desktop/dd183493) (This function should be used for Win32-based applications.)"},{"pos":[9767,9840],"content":"<bpt id=\"p1\">[</bpt>GlobalAlloc<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa366574)</ept>","source":"[GlobalAlloc](http://msdn.microsoft.com/library/windows/desktop/aa366574)"},{"pos":[9850,9857],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9861,9937],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#23<ept id=\"p2\">](../../mfc/codesnippet/cpp/cbrush-class_3.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#23](../../mfc/codesnippet/cpp/cbrush-class_3.cpp)]"},{"pos":[9947,10012],"content":"<bpt id=\"p1\">&lt;a name=\"cbrush__createhatchbrush\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CBrush::CreateHatchBrush","linkify":"<a name=\"cbrush__createhatchbrush\"></a>  CBrush::CreateHatchBrush","source":"<a name=\"cbrush__createhatchbrush\"></a>  CBrush::CreateHatchBrush"},{"content":"Initializes a brush with the specified hatched pattern and color.","pos":[10016,10081]},{"pos":[10170,10180],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the hatch style of the brush.","pos":[10196,10235]},{"content":"It can be any one of the following values:","pos":[10236,10278]},{"pos":[10286,10345],"content":"<ph id=\"ph1\">`HS_BDIAGONAL`</ph> Downward hatch (left to right) at 45 degrees","source":"`HS_BDIAGONAL` Downward hatch (left to right) at 45 degrees"},{"pos":[10353,10398],"content":"<ph id=\"ph1\">`HS_CROSS`</ph> Horizontal and vertical crosshatch","source":"`HS_CROSS` Horizontal and vertical crosshatch"},{"pos":[10406,10445],"content":"<ph id=\"ph1\">`HS_DIAGCROSS`</ph> Crosshatch at 45 degrees","source":"`HS_DIAGCROSS` Crosshatch at 45 degrees"},{"pos":[10453,10510],"content":"<ph id=\"ph1\">`HS_FDIAGONAL`</ph> Upward hatch (left to right) at 45 degrees","source":"`HS_FDIAGONAL` Upward hatch (left to right) at 45 degrees"},{"pos":[10518,10550],"content":"<ph id=\"ph1\">`HS_HORIZONTAL`</ph> Horizontal hatch","source":"`HS_HORIZONTAL` Horizontal hatch"},{"pos":[10558,10586],"content":"<ph id=\"ph1\">`HS_VERTICAL`</ph> Vertical hatch","source":"`HS_VERTICAL` Vertical hatch"},{"pos":[10593,10849],"content":"`crColor`  \nSpecifies the foreground color of the brush as an RGB color (the color of the hatches). See [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for more information.","leadings":[""," "],"nodes":[{"content":"Specifies the foreground color of the brush as an RGB color (the color of the hatches). See [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for more information.","pos":[12,255],"nodes":[{"content":"Specifies the foreground color of the brush as an RGB color (the color of the hatches).","pos":[0,87]},{"content":"See <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for more information.","pos":[88,243],"source":" See [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for more information."}]}]},{"pos":[10859,10871],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[10875,10910]},{"pos":[10920,10927],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The brush can subsequently be selected as the current brush for any device context.","pos":[10931,11014]},{"pos":[11024,11031],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11035,11111],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#24<ept id=\"p2\">](../../mfc/codesnippet/cpp/cbrush-class_4.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#24](../../mfc/codesnippet/cpp/cbrush-class_4.cpp)]"},{"pos":[11121,11190],"content":"<bpt id=\"p1\">&lt;a name=\"cbrush__createpatternbrush\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CBrush::CreatePatternBrush","linkify":"<a name=\"cbrush__createpatternbrush\"></a>  CBrush::CreatePatternBrush","source":"<a name=\"cbrush__createpatternbrush\"></a>  CBrush::CreatePatternBrush"},{"content":"Initializes a brush with a pattern specified by a bitmap.","pos":[11194,11251]},{"pos":[11319,11329],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Identifies a bitmap.","pos":[11346,11366]},{"pos":[11376,11388],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[11392,11427]},{"pos":[11437,11444],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The brush can subsequently be selected for any device context that supports raster operations.","pos":[11448,11542]},{"content":"The bitmap identified by <ph id=\"ph1\">`pBitmap`</ph> is typically initialized by using the <bpt id=\"p1\">[</bpt>CBitmap::CreateBitmap<ept id=\"p1\">](../../mfc/reference/cbitmap-class.md#cbitmap__createbitmap)</ept>, <bpt id=\"p2\">[</bpt>CBitmap::CreateBitmapIndirect<ept id=\"p2\">](../../mfc/reference/cbitmap-class.md#cbitmap__createbitmapindirect)</ept>, <bpt id=\"p3\">[</bpt>CBitmap::LoadBitmap<ept id=\"p3\">](../../mfc/reference/cbitmap-class.md#cbitmap__loadbitmap)</ept>, or <bpt id=\"p4\">[</bpt>CBitmap::CreateCompatibleBitmap<ept id=\"p4\">](../../mfc/reference/cbitmap-class.md#cbitmap__createcompatiblebitmap)</ept> function.","pos":[11543,11999],"source":" The bitmap identified by `pBitmap` is typically initialized by using the [CBitmap::CreateBitmap](../../mfc/reference/cbitmap-class.md#cbitmap__createbitmap), [CBitmap::CreateBitmapIndirect](../../mfc/reference/cbitmap-class.md#cbitmap__createbitmapindirect), [CBitmap::LoadBitmap](../../mfc/reference/cbitmap-class.md#cbitmap__loadbitmap), or [CBitmap::CreateCompatibleBitmap](../../mfc/reference/cbitmap-class.md#cbitmap__createcompatiblebitmap) function."},{"content":"Bitmaps used as fill patterns should be 8 pixels by 8 pixels.","pos":[12006,12067]},{"content":"If the bitmap is larger, Windows will only use the bits corresponding to the first 8 rows and columns of pixels in the upper-left corner of the bitmap.","pos":[12068,12219]},{"content":"A pattern brush can be deleted without affecting the associated bitmap.","pos":[12226,12297]},{"content":"This means the bitmap can be used to create any number of pattern brushes.","pos":[12298,12372]},{"content":"A brush created using a monochrome bitmap (1 color plane, 1 bit per pixel) is drawn using the current text and background colors.","pos":[12379,12508]},{"content":"Pixels represented by a bit set to 0 are drawn with the current text color.","pos":[12509,12584]},{"content":"Pixels represented by a bit set to 1 are drawn with the current background color.","pos":[12585,12666]},{"pos":[12673,12863],"content":"For information about using <bpt id=\"p1\">[</bpt>CreatePatternBrush<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183508)</ept>, a Windows function, see the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For information about using [CreatePatternBrush](http://msdn.microsoft.com/library/windows/desktop/dd183508), a Windows function, see the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[12873,12880],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12884,12960],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#25<ept id=\"p2\">](../../mfc/codesnippet/cpp/cbrush-class_5.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#25](../../mfc/codesnippet/cpp/cbrush-class_5.cpp)]"},{"pos":[12970,13035],"content":"<bpt id=\"p1\">&lt;a name=\"cbrush__createsolidbrush\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CBrush::CreateSolidBrush","linkify":"<a name=\"cbrush__createsolidbrush\"></a>  CBrush::CreateSolidBrush","source":"<a name=\"cbrush__createsolidbrush\"></a>  CBrush::CreateSolidBrush"},{"content":"Initializes a brush with a specified solid color.","pos":[13039,13088]},{"pos":[13154,13164],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> structure that specifies the color of the brush.","pos":[13181,13302],"source":" A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) structure that specifies the color of the brush."},{"content":"The color specifies an RGB value and can be constructed with the <ph id=\"ph1\">`RGB`</ph> macro in WINDOWS.H.","pos":[13303,13393],"source":" The color specifies an RGB value and can be constructed with the `RGB` macro in WINDOWS.H."},{"pos":[13403,13415],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[13419,13454]},{"pos":[13464,13471],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The brush can subsequently be selected as the current brush for any device context.","pos":[13475,13558]},{"pos":[13565,13698],"content":"When an application has finished using the brush created by <ph id=\"ph1\">`CreateSolidBrush`</ph>, it should select the brush out of the device context.","source":"When an application has finished using the brush created by `CreateSolidBrush`, it should select the brush out of the device context."},{"pos":[13708,13715],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13720,13774],"content":"See the example for <bpt id=\"p1\">[</bpt>CBrush::CBrush<ept id=\"p1\">](#cbrush__cbrush)</ept>.","source":"See the example for [CBrush::CBrush](#cbrush__cbrush)."},{"pos":[13784,13855],"content":"<bpt id=\"p1\">&lt;a name=\"cbrush__createsyscolorbrush\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CBrush::CreateSysColorBrush","linkify":"<a name=\"cbrush__createsyscolorbrush\"></a>  CBrush::CreateSysColorBrush","source":"<a name=\"cbrush__createsyscolorbrush\"></a>  CBrush::CreateSysColorBrush"},{"content":"Initializes a brush color.","pos":[13859,13885]},{"pos":[13948,13958],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies a color index.","pos":[13974,13998]},{"content":"This value corresponds to the color used to paint one of the 21 window elements.","pos":[13999,14079]},{"content":"See <bpt id=\"p1\">[</bpt>GetSysColor<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms724371)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for a list of values.","pos":[14080,14238],"source":" See [GetSysColor](http://msdn.microsoft.com/library/windows/desktop/ms724371) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for a list of values."},{"pos":[14248,14260],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[14264,14299]},{"pos":[14309,14316],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The brush can subsequently be selected as the current brush for any device context.","pos":[14320,14403]},{"pos":[14410,14546],"content":"When an application has finished using the brush created by <ph id=\"ph1\">`CreateSysColorBrush`</ph>, it should select the brush out of the device context.","source":"When an application has finished using the brush created by `CreateSysColorBrush`, it should select the brush out of the device context."},{"pos":[14556,14563],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[14567,14643],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#26<ept id=\"p2\">](../../mfc/codesnippet/cpp/cbrush-class_6.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#26](../../mfc/codesnippet/cpp/cbrush-class_6.cpp)]"},{"pos":[14653,14706],"content":"<bpt id=\"p1\">&lt;a name=\"cbrush__fromhandle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CBrush::FromHandle","linkify":"<a name=\"cbrush__fromhandle\"></a>  CBrush::FromHandle","source":"<a name=\"cbrush__fromhandle\"></a>  CBrush::FromHandle"},{"pos":[14710,14824],"content":"Returns a pointer to a <ph id=\"ph1\">`CBrush`</ph> object when given a handle to a Windows <bpt id=\"p1\">[</bpt>HBRUSH<ept id=\"p1\">](#cbrush__operator_hbrush)</ept> object.","source":"Returns a pointer to a `CBrush` object when given a handle to a Windows [HBRUSH](#cbrush__operator_hbrush) object."},{"pos":[14898,14908],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<ph id=\"ph1\"> `HANDLE`</ph> to a Windows GDI brush.","pos":[14923,14956],"source":" `HANDLE` to a Windows GDI brush."},{"pos":[14966,14978],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[14982,15047],"content":"A pointer to a <ph id=\"ph1\">`CBrush`</ph> object if successful; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"A pointer to a `CBrush` object if successful; otherwise **NULL**."},{"pos":[15057,15064],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If a <ph id=\"ph1\">`CBrush`</ph> object is not already attached to the handle, a temporary <ph id=\"ph2\">`CBrush`</ph> object is created and attached.","pos":[15068,15180],"source":"If a `CBrush` object is not already attached to the handle, a temporary `CBrush` object is created and attached."},{"content":"This temporary <ph id=\"ph1\">`CBrush`</ph> object is valid only until the next time the application has idle time in its event loop.","pos":[15181,15294],"source":" This temporary `CBrush` object is valid only until the next time the application has idle time in its event loop."},{"content":"At this time, all temporary graphic objects are deleted.","pos":[15295,15351]},{"content":"In other words, the temporary object is valid only during the processing of one window message.","pos":[15352,15447]},{"pos":[15454,15645],"content":"For more information about using graphic objects, see <bpt id=\"p1\">[</bpt>Graphic Objects<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd144962)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information about using graphic objects, see [Graphic Objects](http://msdn.microsoft.com/library/windows/desktop/dd144962) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[15655,15662],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[15667,15721],"content":"See the example for <bpt id=\"p1\">[</bpt>CBrush::CBrush<ept id=\"p1\">](#cbrush__cbrush)</ept>.","source":"See the example for [CBrush::CBrush](#cbrush__cbrush)."},{"pos":[15731,15786],"content":"<bpt id=\"p1\">&lt;a name=\"cbrush__getlogbrush\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CBrush::GetLogBrush","linkify":"<a name=\"cbrush__getlogbrush\"></a>  CBrush::GetLogBrush","source":"<a name=\"cbrush__getlogbrush\"></a>  CBrush::GetLogBrush"},{"pos":[15790,15853],"content":"Call this member function to retrieve the <ph id=\"ph1\">`LOGBRUSH`</ph> structure.","source":"Call this member function to retrieve the `LOGBRUSH` structure."},{"pos":[15916,15926],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to a <bpt id=\"p1\">[</bpt>LOGBRUSH<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145035)</ept> structure that contains information about the brush.","pos":[15945,16080],"source":" Points to a [LOGBRUSH](http://msdn.microsoft.com/library/windows/desktop/dd145035) structure that contains information about the brush."},{"pos":[16090,16102],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16106,16231],"content":"If the function succeeds, and <ph id=\"ph1\">`pLogBrush`</ph> is a valid pointer, the return value is the number of bytes stored into the buffer.","source":"If the function succeeds, and `pLogBrush` is a valid pointer, the return value is the number of bytes stored into the buffer."},{"pos":[16238,16407],"content":"If the function succeeds, and <ph id=\"ph1\">`pLogBrush`</ph> is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the return value is the number of bytes required to hold the information the function would store into the buffer.","source":"If the function succeeds, and `pLogBrush` is **NULL**, the return value is the number of bytes required to hold the information the function would store into the buffer."},{"content":"If the function fails, the return value is 0.","pos":[16414,16459]},{"pos":[16469,16476],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[16480,16554],"content":"The <ph id=\"ph1\">`LOGBRUSH`</ph> structure defines the style, color, and pattern of a brush.","source":"The `LOGBRUSH` structure defines the style, color, and pattern of a brush."},{"pos":[16561,16646],"content":"For example, call <ph id=\"ph1\">`GetLogBrush`</ph> to match the particular color or pattern of a bitmap.","source":"For example, call `GetLogBrush` to match the particular color or pattern of a bitmap."},{"pos":[16656,16663],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[16667,16743],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#27<ept id=\"p2\">](../../mfc/codesnippet/cpp/cbrush-class_7.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#27](../../mfc/codesnippet/cpp/cbrush-class_7.cpp)]"},{"pos":[16753,16816],"content":"<bpt id=\"p1\">&lt;a name=\"cbrush__operator_hbrush\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CBrush::operator HBRUSH","linkify":"<a name=\"cbrush__operator_hbrush\"></a>  CBrush::operator HBRUSH","source":"<a name=\"cbrush__operator_hbrush\"></a>  CBrush::operator HBRUSH"},{"pos":[16820,16900],"content":"Use this operator to get the attached Windows GDI handle of the <ph id=\"ph1\">`CBrush`</ph> object.","source":"Use this operator to get the attached Windows GDI handle of the `CBrush` object."},{"pos":[16953,16965],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16969,17074],"content":"If successful, a handle to the Windows GDI object represented by the <ph id=\"ph1\">`CBrush`</ph> object; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"If successful, a handle to the Windows GDI object represented by the `CBrush` object; otherwise **NULL**."},{"pos":[17084,17091],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17095,17180],"content":"This operator is a casting operator, which supports direct use of an <ph id=\"ph1\">`HBRUSH`</ph> object.","source":"This operator is a casting operator, which supports direct use of an `HBRUSH` object."},{"pos":[17187,17378],"content":"For more information about using graphic objects, see <bpt id=\"p1\">[</bpt>Graphic Objects<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd144962)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information about using graphic objects, see [Graphic Objects](http://msdn.microsoft.com/library/windows/desktop/dd144962) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[17388,17395],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[17399,17475],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#28<ept id=\"p2\">](../../mfc/codesnippet/cpp/cbrush-class_8.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#28](../../mfc/codesnippet/cpp/cbrush-class_8.cpp)]"},{"pos":[17484,17492],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>MFC Sample PROPDLG<ept id=\"p1\">](../../visual-cpp-samples.md)</ept><ph id=\"ph1\"> </ph>","pos":[17496,17546],"source":"[MFC Sample PROPDLG](../../visual-cpp-samples.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CGdiObject Class<ept id=\"p1\">](../../mfc/reference/cgdiobject-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[17549,17610],"source":" [CGdiObject Class](../../mfc/reference/cgdiobject-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[17613,17662],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CBitmap Class<ept id=\"p1\">](../../mfc/reference/cbitmap-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[17665,17720],"source":" [CBitmap Class](../../mfc/reference/cbitmap-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CDC Class<ept id=\"p1\">](../../mfc/reference/cdc-class.md)</ept>","pos":[17723,17769],"source":" [CDC Class](../../mfc/reference/cdc-class.md)"}],"content":"---\ntitle: \"CBrush Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CBrush\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"brushes, CBrush class\"\n  - \"CBrush class\"\nms.assetid: e5ef2c62-dd95-4973-9090-f52f605900e1\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CBrush Class\nEncapsulates a Windows graphics device interface (GDI) brush.  \n  \n## Syntax  \n  \n```  \nclass CBrush : public CGdiObject  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CBrush::CBrush](#cbrush__cbrush)|Constructs a `CBrush` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CBrush::CreateBrushIndirect](#cbrush__createbrushindirect)|Initializes a brush with the style, color, and pattern specified in a [LOGBRUSH](http://msdn.microsoft.com/library/windows/desktop/dd145035) structure.|  \n|[CBrush::CreateDIBPatternBrush](#cbrush__createdibpatternbrush)|Initializes a brush with a pattern specified by a device-independent bitmap (DIB).|  \n|[CBrush::CreateHatchBrush](#cbrush__createhatchbrush)|Initializes a brush with the specified hatched pattern and color.|  \n|[CBrush::CreatePatternBrush](#cbrush__createpatternbrush)|Initializes a brush with a pattern specified by a bitmap.|  \n|[CBrush::CreateSolidBrush](#cbrush__createsolidbrush)|Initializes a brush with the specified solid color.|  \n|[CBrush::CreateSysColorBrush](#cbrush__createsyscolorbrush)|Creates a brush that is the default system color.|  \n|[CBrush::FromHandle](#cbrush__fromhandle)|Returns a pointer to a `CBrush` object when given a handle to a Windows `HBRUSH` object.|  \n|[CBrush::GetLogBrush](#cbrush__getlogbrush)|Gets a [LOGBRUSH](http://msdn.microsoft.com/library/windows/desktop/dd145035) structure.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CBrush::operator HBRUSH](#cbrush__operator_hbrush)|Returns the Windows handle attached to the `CBrush` object.|  \n  \n## Remarks  \n To use a `CBrush` object, construct a `CBrush` object and pass it to any `CDC` member function that requires a brush.  \n  \n Brushes can be solid, hatched, or patterned.  \n  \n For more information on `CBrush`, see [Graphic Objects](../../mfc/graphic-objects.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CGdiObject](../../mfc/reference/cgdiobject-class.md)  \n  \n `CBrush`  \n  \n## Requirements  \n **Header:** afxwin.h  \n  \n##  <a name=\"cbrush__cbrush\"></a>  CBrush::CBrush  \n Constructs a `CBrush` object.  \n  \n```  \nCBrush();\n\n \nCBrush(\n    COLORREF crColor);\n\n \nCBrush(\n    int nIndex,  \n    COLORREF crColor);\n\n \nexplicit CBrush(\n    CBitmap* pBitmap);\n```  \n  \n### Parameters  \n `crColor`  \n Specifies the foreground color of the brush as an RGB color. If the brush is hatched, this parameter specifies the color of the hatching.  \n  \n `nIndex`  \n Specifies the hatch style of the brush. It can be any one of the following values:  \n  \n- `HS_BDIAGONAL` Downward hatch (left to right) at 45 degrees  \n  \n- `HS_CROSS` Horizontal and vertical crosshatch  \n  \n- `HS_DIAGCROSS` Crosshatch at 45 degrees  \n  \n- `HS_FDIAGONAL` Upward hatch (left to right) at 45 degrees  \n  \n- `HS_HORIZONTAL` Horizontal hatch  \n  \n- `HS_VERTICAL` Vertical hatch  \n  \n `pBitmap`  \n Points to a `CBitmap` object that specifies a bitmap with which the brush paints.  \n  \n### Remarks  \n `CBrush` has four overloaded constructors.The constructor with no arguments constructs an uninitialized `CBrush` object that must be initialized before it can be used.  \n  \n If you use the constructor with no arguments, you must initialize the resulting `CBrush` object with [CreateSolidBrush](#cbrush__createsolidbrush), [CreateHatchBrush](#cbrush__createhatchbrush), [CreateBrushIndirect](#cbrush__createbrushindirect), [CreatePatternBrush](#cbrush__createpatternbrush), or [CreateDIBPatternBrush](#cbrush__createdibpatternbrush). If you use one of the constructors that takes arguments, then no further initialization is necessary. The constructors with arguments can throw an exception if errors are encountered, while the constructor with no arguments will always succeed.  \n  \n The constructor with a single [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter constructs a solid brush with the specified color. The color specifies an RGB value and can be constructed with the `RGB` macro in WINDOWS.H.  \n  \n The constructor with two parameters constructs a hatch brush. The `nIndex` parameter specifies the index of a hatched pattern. The `crColor` parameter specifies the color.  \n  \n The constructor with a `CBitmap` parameter constructs a patterned brush. The parameter identifies a bitmap. The bitmap is assumed to have been created by using [CBitmap::CreateBitmap](../../mfc/reference/cbitmap-class.md#cbitmap__createbitmap), [CBitmap::CreateBitmapIndirect](../../mfc/reference/cbitmap-class.md#cbitmap__createbitmapindirect), [CBitmap::LoadBitmap](../../mfc/reference/cbitmap-class.md#cbitmap__loadbitmap), or [CBitmap::CreateCompatibleBitmap](../../mfc/reference/cbitmap-class.md#cbitmap__createcompatiblebitmap). The minimum size for a bitmap to be used in a fill pattern is 8 pixels by 8 pixels.  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#21](../../mfc/codesnippet/cpp/cbrush-class_1.cpp)]  \n  \n##  <a name=\"cbrush__createbrushindirect\"></a>  CBrush::CreateBrushIndirect  \n Initializes a brush with a style, color, and pattern specified in a [LOGBRUSH](http://msdn.microsoft.com/library/windows/desktop/dd145035) structure.  \n  \n```  \nBOOL CreateBrushIndirect(const LOGBRUSH* lpLogBrush);\n```  \n  \n### Parameters  \n *lpLogBrush*  \n Points to a [LOGBRUSH](http://msdn.microsoft.com/library/windows/desktop/dd145035) structure that contains information about the brush.  \n  \n### Return Value  \n Nonzero if the function is successful; otherwise 0.  \n  \n### Remarks  \n The brush can subsequently be selected as the current brush for any device context.  \n  \n A brush created using a monochrome (1 plane, 1 bit per pixel) bitmap is drawn using the current text and background colors. Pixels represented by a bit set to 0 will be drawn with the current text color. Pixels represented by a bit set to 1 will be drawn with the current background color.  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#22](../../mfc/codesnippet/cpp/cbrush-class_2.cpp)]  \n  \n##  <a name=\"cbrush__createdibpatternbrush\"></a>  CBrush::CreateDIBPatternBrush  \n Initializes a brush with the pattern specified by a device-independent bitmap (DIB).  \n  \n```  \nBOOL CreateDIBPatternBrush(\n    HGLOBAL hPackedDIB,  \n    UINT nUsage);\n\n \nBOOL CreateDIBPatternBrush(\n    const void* lpPackedDIB,  \n    UINT nUsage);\n```  \n  \n### Parameters  \n *hPackedDIB*  \n Identifies a global-memory object containing a packed device-independent bitmap (DIB).  \n  \n *nUsage*  \n Specifies whether the **bmiColors[]** fields of the [BITMAPINFO](../../mfc/reference/bitmapinfo-structure.md) data structure (a part of the \"packed DIB\") contain explicit RGB values or indices into the currently realized logical palette. The parameter must be one of the following values:  \n  \n- **DIB_PAL_COLORS** The color table consists of an array of 16-bit indexes.  \n  \n- **DIB_RGB_COLORS** The color table contains literal RGB values.  \n  \n *lpPackedDIB*  \n Points to a packed DIB consisting of a `BITMAPINFO` structure immediately followed by an array of bytes defining the pixels of the bitmap.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n The brush can subsequently be selected for any device context that supports raster operations.  \n  \n The two versions differ in the way you handle the DIB:  \n  \n-   In the first version, to obtain a handle to the DIB you call the Windows **GlobalAlloc** function to allocate a block of global memory and then fill the memory with the packed DIB.  \n  \n-   In the second version, it is not necessary to call **GlobalAlloc** to allocate memory for the packed DIB.  \n  \n A packed DIB consists of a `BITMAPINFO` data structure immediately followed by the array of bytes that defines the pixels of the bitmap. Bitmaps used as fill patterns should be 8 pixels by 8 pixels. If the bitmap is larger, Windows creates a fill pattern using only the bits corresponding to the first 8 rows and 8 columns of pixels in the upper-left corner of the bitmap.  \n  \n When an application selects a two-color DIB pattern brush into a monochrome device context, Windows ignores the colors specified in the DIB and instead displays the pattern brush using the current text and background colors of the device context. Pixels mapped to the first color (at offset 0 in the DIB color table) of the DIB are displayed using the text color. Pixels mapped to the second color (at offset 1 in the color table) are displayed using the background color.  \n  \n For information about using the following Windows functions, see the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]:  \n  \n- [CreateDIBPatternBrush](http://msdn.microsoft.com/library/windows/desktop/dd183492) (This function is provided only for compatibility with applications written for versions of Windows earlier than 3.0; use the **CreateDIBPatternBrushPt** function.)  \n  \n- [CreateDIBPatternBrushPt](http://msdn.microsoft.com/library/windows/desktop/dd183493) (This function should be used for Win32-based applications.)  \n  \n- [GlobalAlloc](http://msdn.microsoft.com/library/windows/desktop/aa366574)  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#23](../../mfc/codesnippet/cpp/cbrush-class_3.cpp)]  \n  \n##  <a name=\"cbrush__createhatchbrush\"></a>  CBrush::CreateHatchBrush  \n Initializes a brush with the specified hatched pattern and color.  \n  \n```  \nBOOL CreateHatchBrush(\n    int nIndex,  \n    COLORREF crColor);\n```  \n  \n### Parameters  \n `nIndex`  \n Specifies the hatch style of the brush. It can be any one of the following values:  \n  \n- `HS_BDIAGONAL` Downward hatch (left to right) at 45 degrees  \n  \n- `HS_CROSS` Horizontal and vertical crosshatch  \n  \n- `HS_DIAGCROSS` Crosshatch at 45 degrees  \n  \n- `HS_FDIAGONAL` Upward hatch (left to right) at 45 degrees  \n  \n- `HS_HORIZONTAL` Horizontal hatch  \n  \n- `HS_VERTICAL` Vertical hatch  \n  \n `crColor`  \n Specifies the foreground color of the brush as an RGB color (the color of the hatches). See [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for more information.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n The brush can subsequently be selected as the current brush for any device context.  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#24](../../mfc/codesnippet/cpp/cbrush-class_4.cpp)]  \n  \n##  <a name=\"cbrush__createpatternbrush\"></a>  CBrush::CreatePatternBrush  \n Initializes a brush with a pattern specified by a bitmap.  \n  \n```  \nBOOL CreatePatternBrush(CBitmap* pBitmap);\n```  \n  \n### Parameters  \n `pBitmap`  \n Identifies a bitmap.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n The brush can subsequently be selected for any device context that supports raster operations. The bitmap identified by `pBitmap` is typically initialized by using the [CBitmap::CreateBitmap](../../mfc/reference/cbitmap-class.md#cbitmap__createbitmap), [CBitmap::CreateBitmapIndirect](../../mfc/reference/cbitmap-class.md#cbitmap__createbitmapindirect), [CBitmap::LoadBitmap](../../mfc/reference/cbitmap-class.md#cbitmap__loadbitmap), or [CBitmap::CreateCompatibleBitmap](../../mfc/reference/cbitmap-class.md#cbitmap__createcompatiblebitmap) function.  \n  \n Bitmaps used as fill patterns should be 8 pixels by 8 pixels. If the bitmap is larger, Windows will only use the bits corresponding to the first 8 rows and columns of pixels in the upper-left corner of the bitmap.  \n  \n A pattern brush can be deleted without affecting the associated bitmap. This means the bitmap can be used to create any number of pattern brushes.  \n  \n A brush created using a monochrome bitmap (1 color plane, 1 bit per pixel) is drawn using the current text and background colors. Pixels represented by a bit set to 0 are drawn with the current text color. Pixels represented by a bit set to 1 are drawn with the current background color.  \n  \n For information about using [CreatePatternBrush](http://msdn.microsoft.com/library/windows/desktop/dd183508), a Windows function, see the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#25](../../mfc/codesnippet/cpp/cbrush-class_5.cpp)]  \n  \n##  <a name=\"cbrush__createsolidbrush\"></a>  CBrush::CreateSolidBrush  \n Initializes a brush with a specified solid color.  \n  \n```  \nBOOL CreateSolidBrush(COLORREF crColor);\n```  \n  \n### Parameters  \n `crColor`  \n A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) structure that specifies the color of the brush. The color specifies an RGB value and can be constructed with the `RGB` macro in WINDOWS.H.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n The brush can subsequently be selected as the current brush for any device context.  \n  \n When an application has finished using the brush created by `CreateSolidBrush`, it should select the brush out of the device context.  \n  \n### Example  \n  See the example for [CBrush::CBrush](#cbrush__cbrush).  \n  \n##  <a name=\"cbrush__createsyscolorbrush\"></a>  CBrush::CreateSysColorBrush  \n Initializes a brush color.  \n  \n```  \nBOOL CreateSysColorBrush(int nIndex);\n```  \n  \n### Parameters  \n `nIndex`  \n Specifies a color index. This value corresponds to the color used to paint one of the 21 window elements. See [GetSysColor](http://msdn.microsoft.com/library/windows/desktop/ms724371) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for a list of values.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n The brush can subsequently be selected as the current brush for any device context.  \n  \n When an application has finished using the brush created by `CreateSysColorBrush`, it should select the brush out of the device context.  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#26](../../mfc/codesnippet/cpp/cbrush-class_6.cpp)]  \n  \n##  <a name=\"cbrush__fromhandle\"></a>  CBrush::FromHandle  \n Returns a pointer to a `CBrush` object when given a handle to a Windows [HBRUSH](#cbrush__operator_hbrush) object.  \n  \n```  \nstatic CBrush* PASCAL FromHandle(HBRUSH hBrush);\n```  \n  \n### Parameters  \n `hBrush`  \n `HANDLE` to a Windows GDI brush.  \n  \n### Return Value  \n A pointer to a `CBrush` object if successful; otherwise **NULL**.  \n  \n### Remarks  \n If a `CBrush` object is not already attached to the handle, a temporary `CBrush` object is created and attached. This temporary `CBrush` object is valid only until the next time the application has idle time in its event loop. At this time, all temporary graphic objects are deleted. In other words, the temporary object is valid only during the processing of one window message.  \n  \n For more information about using graphic objects, see [Graphic Objects](http://msdn.microsoft.com/library/windows/desktop/dd144962) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CBrush::CBrush](#cbrush__cbrush).  \n  \n##  <a name=\"cbrush__getlogbrush\"></a>  CBrush::GetLogBrush  \n Call this member function to retrieve the `LOGBRUSH` structure.  \n  \n```  \nint GetLogBrush(LOGBRUSH* pLogBrush);\n```  \n  \n### Parameters  \n `pLogBrush`  \n Points to a [LOGBRUSH](http://msdn.microsoft.com/library/windows/desktop/dd145035) structure that contains information about the brush.  \n  \n### Return Value  \n If the function succeeds, and `pLogBrush` is a valid pointer, the return value is the number of bytes stored into the buffer.  \n  \n If the function succeeds, and `pLogBrush` is **NULL**, the return value is the number of bytes required to hold the information the function would store into the buffer.  \n  \n If the function fails, the return value is 0.  \n  \n### Remarks  \n The `LOGBRUSH` structure defines the style, color, and pattern of a brush.  \n  \n For example, call `GetLogBrush` to match the particular color or pattern of a bitmap.  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#27](../../mfc/codesnippet/cpp/cbrush-class_7.cpp)]  \n  \n##  <a name=\"cbrush__operator_hbrush\"></a>  CBrush::operator HBRUSH  \n Use this operator to get the attached Windows GDI handle of the `CBrush` object.  \n  \n```  \noperator HBRUSH() const;\n\n \n```  \n  \n### Return Value  \n If successful, a handle to the Windows GDI object represented by the `CBrush` object; otherwise **NULL**.  \n  \n### Remarks  \n This operator is a casting operator, which supports direct use of an `HBRUSH` object.  \n  \n For more information about using graphic objects, see [Graphic Objects](http://msdn.microsoft.com/library/windows/desktop/dd144962) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#28](../../mfc/codesnippet/cpp/cbrush-class_8.cpp)]  \n  \n## See Also  \n [MFC Sample PROPDLG](../../visual-cpp-samples.md)   \n [CGdiObject Class](../../mfc/reference/cgdiobject-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CBitmap Class](../../mfc/reference/cbitmap-class.md)   \n [CDC Class](../../mfc/reference/cdc-class.md)\n"}