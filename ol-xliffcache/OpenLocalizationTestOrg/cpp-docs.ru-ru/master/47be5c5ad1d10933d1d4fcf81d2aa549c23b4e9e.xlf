<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">47be5c5ad1d10933d1d4fcf81d2aa549c23b4e9e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\error-messages\compiler-errors-1\compiler-error-c2059.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7fc18e6551220ebfa796c906a924c159ea13eced</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc249990d245ffb5e10fa4bbb03be49845bc68f4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Compiler Error C2059 | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Compiler Error C2059</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>syntax error : 'token'</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The token caused a syntax error.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following example generates an error message for the line that declares <ph id="ph1">`j`</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To determine the cause of the error, examine not only the line that's listed in the error message, but also the lines above it.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If examining the lines yields no clue about the problem, try commenting out the line that's listed in the error message and perhaps several lines above it.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If the error message occurs on a symbol that immediately follows a <ph id="ph1">`typedef`</ph> variable, make sure that the variable is defined in the source code.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You may get C2059 if a symbol evaluates to nothing, as can occur when <bpt id="p1">**</bpt>/D<ept id="p1">**</ept><ph id="ph1">`symbol`</ph><bpt id="p2">**</bpt><ph id="ph2">=</ph><ept id="p2">**</ept> is used to compile.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Another case in which C2059 can occur is when you compile an application that specifies a structure in the default arguments for a function.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The default value for an argument must be an expression.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>An initializer list—for example, one that used to initialize a structure—is not an expression.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To resolve this problem, define a constructor to perform the required initialization.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following example generates C2059:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can also get C2059 if you define a member template class or function outside the class.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For information, see <bpt id="p1">[</bpt>Knowledge Base article 241949<ept id="p1">](http://support.microsoft.com/kb/241949)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>C2059 can occur for an ill-formed cast.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following sample generates C2059:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>C2059 can also occur if you attempt to create a namespace name that contains a period.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following sample generates C2059:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>C2059 can occur when an operator that can qualify a name (<ph id="ph1">`::`</ph>, <ph id="ph2">`-&gt;`</ph>, and <ph id="ph3">`.`</ph>) must be followed by the keyword <ph id="ph4">`template`</ph>, as shown in this example:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>By default, C++ assumes that <ph id="ph1">`AY::Rebind`</ph> isn't a template; therefore, the following <ph id="ph2">`&lt;`</ph> is interpreted as a less-than sign.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You must tell the compiler explicitly that <ph id="ph1">`Rebind`</ph> is a template so that it can correctly parse the angle bracket.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To correct this error, use the <ph id="ph1">`template`</ph> keyword on the dependent type's name, as shown here:</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>