{"nodes":[{"pos":[12,42],"content":"Input Streams | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Input Streams | Microsoft Docs","pos":[0,30]}]},{"content":"Input Streams","pos":[681,694]},{"content":"An input stream object is a source of bytes.","pos":[695,739]},{"content":"The three most important input stream classes are <bpt id=\"p1\">[</bpt>istream<ept id=\"p1\">](../standard-library/basic-istream-class.md)</ept>, <bpt id=\"p2\">[</bpt>ifstream<ept id=\"p2\">](../standard-library/basic-ifstream-class.md)</ept>, and <bpt id=\"p3\">[</bpt>istringstream<ept id=\"p3\">](../standard-library/basic-istringstream-class.md)</ept>.","pos":[740,972],"source":" The three most important input stream classes are [istream](../standard-library/basic-istream-class.md), [ifstream](../standard-library/basic-ifstream-class.md), and [istringstream](../standard-library/basic-istringstream-class.md)."},{"content":"The <ph id=\"ph1\">`istream`</ph> class is best used for sequential text-mode input.","pos":[979,1043],"source":"The `istream` class is best used for sequential text-mode input."},{"content":"You can configure objects of class <ph id=\"ph1\">`istream`</ph> for buffered or unbuffered operation.","pos":[1044,1126],"source":" You can configure objects of class `istream` for buffered or unbuffered operation."},{"content":"All functionality of the base class, <ph id=\"ph1\">`ios`</ph>, is included in <ph id=\"ph2\">`istream`</ph>.","pos":[1127,1196],"source":" All functionality of the base class, `ios`, is included in `istream`."},{"content":"You will rarely construct objects from class <ph id=\"ph1\">`istream`</ph>.","pos":[1197,1252],"source":" You will rarely construct objects from class `istream`."},{"content":"Instead, you will generally use the predefined <ph id=\"ph1\">`cin`</ph> object, which is actually an object of class <bpt id=\"p1\">[</bpt>ostream<ept id=\"p1\">](../standard-library/basic-ostream-class.md)</ept>.","pos":[1253,1405],"source":" Instead, you will generally use the predefined `cin` object, which is actually an object of class [ostream](../standard-library/basic-ostream-class.md)."},{"content":"In some cases, you can assign <ph id=\"ph1\">`cin`</ph> to other stream objects after program startup.","pos":[1406,1488],"source":" In some cases, you can assign `cin` to other stream objects after program startup."},{"content":"The <ph id=\"ph1\">`ifstream`</ph> class supports disk file input.","pos":[1495,1541],"source":"The `ifstream` class supports disk file input."},{"content":"If you need an input-only disk file, construct an object of class <ph id=\"ph1\">`ifstream`</ph>.","pos":[1542,1619],"source":" If you need an input-only disk file, construct an object of class `ifstream`."},{"content":"You can specify binary or text-mode data.","pos":[1620,1661]},{"content":"If you specify a filename in the constructor, the file is automatically opened when the object is constructed.","pos":[1662,1772]},{"content":"Otherwise, you can use the <ph id=\"ph1\">`open`</ph> function after invoking the default constructor.","pos":[1773,1855],"source":" Otherwise, you can use the `open` function after invoking the default constructor."},{"content":"Many formatting options and member functions apply to <ph id=\"ph1\">`ifstream`</ph> objects.","pos":[1856,1929],"source":" Many formatting options and member functions apply to `ifstream` objects."},{"content":"All functionality of the base classes <ph id=\"ph1\">`ios`</ph> and <ph id=\"ph2\">`istream`</ph> is included in <ph id=\"ph3\">`ifstream`</ph>.","pos":[1930,2014],"source":" All functionality of the base classes `ios` and `istream` is included in `ifstream`."},{"content":"Like the library function <ph id=\"ph1\">`sscanf_s`</ph>, the <ph id=\"ph2\">`istringstream`</ph> class supports input from in-memory strings.","pos":[2021,2123],"source":"Like the library function `sscanf_s`, the `istringstream` class supports input from in-memory strings."},{"content":"To extract data from a character array that has a null terminator, allocate and initialize the string, then construct an object of class <ph id=\"ph1\">`istringstream`</ph>.","pos":[2124,2277],"source":" To extract data from a character array that has a null terminator, allocate and initialize the string, then construct an object of class `istringstream`."},{"content":"In This Section","pos":[2286,2301]},{"content":"Constructing Input Stream Objects","pos":[2306,2339]},{"content":"Using Extraction Operators","pos":[2406,2432]},{"content":"Testing for Extraction Errors","pos":[2492,2521]},{"content":"Input Stream Manipulators","pos":[2584,2609]},{"content":"Input Stream Member Functions","pos":[2668,2697]},{"content":"Overloading the &gt;&gt; Operator for Your Own Classes","pos":[2760,2808],"source":"Overloading the >> Operator for Your Own Classes"},{"content":"See Also","pos":[2894,2902]},{"content":"iostream Programming","pos":[2907,2927]}],"content":"---\ntitle: \"Input Streams | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"reading data [C++], from input streams\"\n  - \"data [C++], reading from input stream\"\n  - \"input streams\"\n  - \"input stream objects\"\nms.assetid: f14d8954-8f8c-4c3c-8b99-14ddb3683f94\ncaps.latest.revision: 11\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Input Streams\nAn input stream object is a source of bytes. The three most important input stream classes are [istream](../standard-library/basic-istream-class.md), [ifstream](../standard-library/basic-ifstream-class.md), and [istringstream](../standard-library/basic-istringstream-class.md).  \n  \n The `istream` class is best used for sequential text-mode input. You can configure objects of class `istream` for buffered or unbuffered operation. All functionality of the base class, `ios`, is included in `istream`. You will rarely construct objects from class `istream`. Instead, you will generally use the predefined `cin` object, which is actually an object of class [ostream](../standard-library/basic-ostream-class.md). In some cases, you can assign `cin` to other stream objects after program startup.  \n  \n The `ifstream` class supports disk file input. If you need an input-only disk file, construct an object of class `ifstream`. You can specify binary or text-mode data. If you specify a filename in the constructor, the file is automatically opened when the object is constructed. Otherwise, you can use the `open` function after invoking the default constructor. Many formatting options and member functions apply to `ifstream` objects. All functionality of the base classes `ios` and `istream` is included in `ifstream`.  \n  \n Like the library function `sscanf_s`, the `istringstream` class supports input from in-memory strings. To extract data from a character array that has a null terminator, allocate and initialize the string, then construct an object of class `istringstream`.  \n  \n## In This Section  \n [Constructing Input Stream Objects](../standard-library/constructing-input-stream-objects.md)  \n  \n [Using Extraction Operators](../standard-library/using-extraction-operators.md)  \n  \n [Testing for Extraction Errors](../standard-library/testing-for-extraction-errors.md)  \n  \n [Input Stream Manipulators](../standard-library/input-stream-manipulators.md)  \n  \n [Input Stream Member Functions](../standard-library/input-stream-member-functions.md)  \n  \n [Overloading the >> Operator for Your Own Classes](../standard-library/overloading-the-input-operator-for-your-own-classes.md)  \n  \n## See Also  \n [iostream Programming](../standard-library/iostream-programming.md)\n"}