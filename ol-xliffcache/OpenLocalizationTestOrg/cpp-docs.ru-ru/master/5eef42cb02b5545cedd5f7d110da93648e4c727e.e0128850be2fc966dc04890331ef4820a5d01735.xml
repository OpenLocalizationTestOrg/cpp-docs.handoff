{"nodes":[{"pos":[12,37],"content":"Contexts | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Contexts | Microsoft Docs","pos":[0,25]}]},{"content":"Contexts","pos":[577,585]},{"content":"This document describes the role of contexts in the Concurrency Runtime.","pos":[587,659]},{"content":"A thread that is attached to a scheduler is known as an <bpt id=\"p1\">*</bpt>execution context<ept id=\"p1\">*</ept>, or just <bpt id=\"p2\">*</bpt>context<ept id=\"p2\">*</ept>.","pos":[660,755],"source":" A thread that is attached to a scheduler is known as an *execution context*, or just *context*."},{"content":"The <bpt id=\"p1\">[</bpt>concurrency::wait<ept id=\"p1\">](reference/concurrency-namespace-functions.md#wait)</ept> function and the concurrency::<bpt id=\"p2\">[</bpt>Context class<ept id=\"p2\">](../../parallel/concrt/reference/context-class.md)</ept> enable you to control the behavior of contexts.","pos":[756,974],"source":" The [concurrency::wait](reference/concurrency-namespace-functions.md#wait) function and the concurrency::[Context class](../../parallel/concrt/reference/context-class.md) enable you to control the behavior of contexts."},{"content":"Use the <ph id=\"ph1\">`wait`</ph> function to suspend the current context for a specified time.","pos":[975,1051],"source":" Use the `wait` function to suspend the current context for a specified time."},{"content":"Use the <ph id=\"ph1\">`Context`</ph> class when you need more control over when contexts block, unblock, and yield, or when you want to oversubscribe the current context.","pos":[1052,1203],"source":" Use the `Context` class when you need more control over when contexts block, unblock, and yield, or when you want to oversubscribe the current context."},{"pos":[1211,1690],"content":"[!TIP]\n The Concurrency Runtime provides a default scheduler, and therefore you are not required to create one in your application. Because the Task Scheduler helps you fine-tune the performance of your applications, we recommend that you start with the [Parallel Patterns Library (PPL)](../../parallel/concrt/parallel-patterns-library-ppl.md) or the [Asynchronous Agents Library](../../parallel/concrt/asynchronous-agents-library.md) if you are new to the Concurrency Runtime.","leadings":["","> "],"nodes":[{"content":" The Concurrency Runtime provides a default scheduler, and therefore you are not required to create one in your application. Because the Task Scheduler helps you fine-tune the performance of your applications, we recommend that you start with the [Parallel Patterns Library (PPL)](../../parallel/concrt/parallel-patterns-library-ppl.md) or the [Asynchronous Agents Library](../../parallel/concrt/asynchronous-agents-library.md) if you are new to the Concurrency Runtime.","pos":[7,477],"nodes":[{"content":"The Concurrency Runtime provides a default scheduler, and therefore you are not required to create one in your application.","pos":[1,124]},{"content":"Because the Task Scheduler helps you fine-tune the performance of your applications, we recommend that you start with the <bpt id=\"p1\">[</bpt>Parallel Patterns Library (PPL)<ept id=\"p1\">](../../parallel/concrt/parallel-patterns-library-ppl.md)</ept> or the <bpt id=\"p2\">[</bpt>Asynchronous Agents Library<ept id=\"p2\">](../../parallel/concrt/asynchronous-agents-library.md)</ept> if you are new to the Concurrency Runtime.","pos":[125,470],"source":" Because the Task Scheduler helps you fine-tune the performance of your applications, we recommend that you start with the [Parallel Patterns Library (PPL)](../../parallel/concrt/parallel-patterns-library-ppl.md) or the [Asynchronous Agents Library](../../parallel/concrt/asynchronous-agents-library.md) if you are new to the Concurrency Runtime."}]}]},{"content":"The wait Function","pos":[1699,1716]},{"content":"The <bpt id=\"p1\">[</bpt>concurrency::wait<ept id=\"p1\">](reference/concurrency-namespace-functions.md#wait)</ept> function cooperatively yields the execution of the current context for a specified number of milliseconds.","pos":[1721,1902],"source":"The [concurrency::wait](reference/concurrency-namespace-functions.md#wait) function cooperatively yields the execution of the current context for a specified number of milliseconds."},{"content":"The runtime uses the yield time to perform other tasks.","pos":[1903,1958]},{"content":"After the specified time has elapsed, the runtime reschedules the context for execution.","pos":[1959,2047]},{"content":"Therefore, the <ph id=\"ph1\">`wait`</ph> function might suspend the current context longer than the value provided for the <ph id=\"ph2\">`milliseconds`</ph> parameter.","pos":[2048,2177],"source":" Therefore, the `wait` function might suspend the current context longer than the value provided for the `milliseconds` parameter."},{"content":"Passing 0 (zero) for the <ph id=\"ph1\">`milliseconds`</ph> parameter causes the runtime to suspend the current context until all other active contexts are given the opportunity to perform work.","pos":[2184,2358],"source":"Passing 0 (zero) for the `milliseconds` parameter causes the runtime to suspend the current context until all other active contexts are given the opportunity to perform work."},{"content":"This lets you yield a task to all other active tasks.","pos":[2359,2412]},{"content":"Example","pos":[2422,2429]},{"pos":[2433,2701],"content":"For an example that uses the <ph id=\"ph1\">`wait`</ph> function to yield the current context, and thus allow for other contexts to run, see <bpt id=\"p1\">[</bpt>How to: Use Schedule Groups to Influence Order of Execution<ept id=\"p1\">](../../parallel/concrt/how-to-use-schedule-groups-to-influence-order-of-execution.md)</ept>.","source":"For an example that uses the `wait` function to yield the current context, and thus allow for other contexts to run, see [How to: Use Schedule Groups to Influence Order of Execution](../../parallel/concrt/how-to-use-schedule-groups-to-influence-order-of-execution.md)."},{"content":"The Context Class","pos":[2710,2727]},{"pos":[2731,3038],"content":"The concurrency::<bpt id=\"p1\">[</bpt>Context class<ept id=\"p1\">](../../parallel/concrt/reference/context-class.md)</ept> provides a programming abstraction for an execution context and offers two important features: the ability to cooperatively block, unblock, and yield the current context, and the ability to oversubscribe the current context.","source":"The concurrency::[Context class](../../parallel/concrt/reference/context-class.md) provides a programming abstraction for an execution context and offers two important features: the ability to cooperatively block, unblock, and yield the current context, and the ability to oversubscribe the current context."},{"content":"Cooperative Blocking","pos":[3048,3068]},{"content":"The <ph id=\"ph1\">`Context`</ph> class lets you block or yield the current execution context.","pos":[3072,3146],"source":"The `Context` class lets you block or yield the current execution context."},{"content":"Blocking or yielding is useful when the current context cannot continue because a resource is not available.","pos":[3147,3255]},{"content":"The <bpt id=\"p1\">[</bpt>concurrency::Context::Block<ept id=\"p1\">](reference/context-class.md#block)</ept> method blocks the current context.","pos":[3263,3365],"source":"The [concurrency::Context::Block](reference/context-class.md#block) method blocks the current context."},{"content":"A context that is blocked yields its processing resources so that the runtime can perform other tasks.","pos":[3366,3468]},{"content":"The <bpt id=\"p1\">[</bpt>concurrency::Context::Unblock<ept id=\"p1\">](reference/context-class.md#unblock)</ept> method unblocks a blocked context.","pos":[3469,3575],"source":" The [concurrency::Context::Unblock](reference/context-class.md#unblock) method unblocks a blocked context."},{"content":"The <ph id=\"ph1\">`Context::Unblock`</ph> method must be called from a different context than the one that called <ph id=\"ph2\">`Context::Block`</ph>.","pos":[3576,3688],"source":" The `Context::Unblock` method must be called from a different context than the one that called `Context::Block`."},{"content":"The runtime throws <bpt id=\"p1\">[</bpt>concurrency::context_self_unblock<ept id=\"p1\">](../../parallel/concrt/reference/context-self-unblock-class.md)</ept> if a context attempts to unblock itself.","pos":[3689,3847],"source":" The runtime throws [concurrency::context_self_unblock](../../parallel/concrt/reference/context-self-unblock-class.md) if a context attempts to unblock itself."},{"content":"To cooperatively block and unblock a context, you typically call <bpt id=\"p1\">[</bpt>concurrency::Context::CurrentContext<ept id=\"p1\">](reference/context-class.md#currentcontext)</ept> to retrieve a pointer to the <ph id=\"ph1\">`Context`</ph> object that is associated with the current thread and save the result.","pos":[3854,4110],"source":"To cooperatively block and unblock a context, you typically call [concurrency::Context::CurrentContext](reference/context-class.md#currentcontext) to retrieve a pointer to the `Context` object that is associated with the current thread and save the result."},{"content":"You then call the <ph id=\"ph1\">`Context::Block`</ph> method to block the current context.","pos":[4111,4182],"source":" You then call the `Context::Block` method to block the current context."},{"content":"Later, call <ph id=\"ph1\">`Context::Unblock`</ph> from a separate context to unblock the blocked context.","pos":[4183,4269],"source":" Later, call `Context::Unblock` from a separate context to unblock the blocked context."},{"content":"You must match each pair of calls to <ph id=\"ph1\">`Context::Block`</ph> and <ph id=\"ph2\">`Context::Unblock`</ph>.","pos":[4276,4353],"source":"You must match each pair of calls to `Context::Block` and `Context::Unblock`."},{"content":"The runtime throws <bpt id=\"p1\">[</bpt>concurrency::context_unblock_unbalanced<ept id=\"p1\">](../../parallel/concrt/reference/context-unblock-unbalanced-class.md)</ept> when the <ph id=\"ph1\">`Context::Block`</ph> or <ph id=\"ph2\">`Context::Unblock`</ph> method is called consecutively without a matching call to the other method.","pos":[4354,4607],"source":" The runtime throws [concurrency::context_unblock_unbalanced](../../parallel/concrt/reference/context-unblock-unbalanced-class.md) when the `Context::Block` or `Context::Unblock` method is called consecutively without a matching call to the other method."},{"content":"However, you do not have to call <ph id=\"ph1\">`Context::Block`</ph> before you call <ph id=\"ph2\">`Context::Unblock`</ph>.","pos":[4608,4693],"source":" However, you do not have to call `Context::Block` before you call `Context::Unblock`."},{"content":"For example, if one context calls <ph id=\"ph1\">`Context::Unblock`</ph> before another context calls <ph id=\"ph2\">`Context::Block`</ph> for the same context, that context remains unblocked.","pos":[4694,4846],"source":" For example, if one context calls `Context::Unblock` before another context calls `Context::Block` for the same context, that context remains unblocked."},{"content":"The <bpt id=\"p1\">[</bpt>concurrency::Context::Yield<ept id=\"p1\">](reference/context-class.md#yield)</ept> method yields execution so that the runtime can perform other tasks and then reschedule the context for execution.","pos":[4853,5035],"source":"The [concurrency::Context::Yield](reference/context-class.md#yield) method yields execution so that the runtime can perform other tasks and then reschedule the context for execution."},{"content":"When you call the <ph id=\"ph1\">`Context::Block`</ph> method, the runtime does not reschedule the context.","pos":[5036,5123],"source":" When you call the `Context::Block` method, the runtime does not reschedule the context."},{"content":"Example","pos":[5135,5142]},{"pos":[5146,5451],"content":"For an example that uses the <ph id=\"ph1\">`Context::Block`</ph>, <ph id=\"ph2\">`Context::Unblock`</ph>, and <ph id=\"ph3\">`Context::Yield`</ph> methods to implement a cooperative semaphore class, see <bpt id=\"p1\">[</bpt>How to: Use the Context Class to Implement a Cooperative Semaphore<ept id=\"p1\">](../../parallel/concrt/how-to-use-the-context-class-to-implement-a-cooperative-semaphore.md)</ept>.","source":"For an example that uses the `Context::Block`, `Context::Unblock`, and `Context::Yield` methods to implement a cooperative semaphore class, see [How to: Use the Context Class to Implement a Cooperative Semaphore](../../parallel/concrt/how-to-use-the-context-class-to-implement-a-cooperative-semaphore.md)."},{"content":"Oversubscription","pos":[5463,5479]},{"content":"The default scheduler creates the same number of threads as there are available hardware threads.","pos":[5483,5580]},{"content":"You can use <bpt id=\"p1\">*</bpt>oversubscription<ept id=\"p1\">*</ept> to create additional threads for a given hardware thread.","pos":[5581,5669],"source":" You can use *oversubscription* to create additional threads for a given hardware thread."},{"content":"For computationally intensive operations, oversubscription typically does not scale because it introduces additional overhead.","pos":[5676,5802]},{"content":"However, for tasks that have a high amount of latency, for example, reading data from disk or from a network connection, oversubscription can improve the overall efficiency of some applications.","pos":[5803,5997]},{"pos":[6005,6231],"content":"[!NOTE]\n Enable oversubscription only from a thread that was created by the Concurrency Runtime. Oversubscription has no effect when it is called from a thread that was not created by the runtime (including the main thread).","leadings":["","> "],"nodes":[{"content":" Enable oversubscription only from a thread that was created by the Concurrency Runtime. Oversubscription has no effect when it is called from a thread that was not created by the runtime (including the main thread).","pos":[8,224],"nodes":[{"content":"Enable oversubscription only from a thread that was created by the Concurrency Runtime.","pos":[1,88]},{"content":"Oversubscription has no effect when it is called from a thread that was not created by the runtime (including the main thread).","pos":[89,216]}]}]},{"content":"To enable oversubscription in the current context, call the <bpt id=\"p1\">[</bpt>concurrency::Context::Oversubscribe<ept id=\"p1\">](reference/context-class.md#oversubscribe)</ept> method with the <ph id=\"ph1\">`_BeginOversubscription`</ph> parameter set to <ph id=\"ph2\">`true`</ph>.","pos":[6238,6443],"source":"To enable oversubscription in the current context, call the [concurrency::Context::Oversubscribe](reference/context-class.md#oversubscribe) method with the `_BeginOversubscription` parameter set to `true`."},{"content":"When you enable oversubscription on a thread that was created by the Concurrency Runtime, it causes the runtime to create one additional thread.","pos":[6444,6588]},{"content":"After all tasks that require oversubscription finish, call <ph id=\"ph1\">`Context::Oversubscribe`</ph> with the <ph id=\"ph2\">`_BeginOversubscription`</ph> parameter set to <ph id=\"ph3\">`false`</ph>.","pos":[6589,6732],"source":" After all tasks that require oversubscription finish, call `Context::Oversubscribe` with the `_BeginOversubscription` parameter set to `false`."},{"content":"You can enable oversubscription multiple times from the current context, but you must disable it the same number of times that you enable it.","pos":[6740,6881]},{"content":"Oversubscription can also be nested; that is, a task that is created by another task that uses oversubscription can also oversubscribe its context.","pos":[6882,7029]},{"content":"However, if both a nested task and its parent belong to the same context, only the outermost call to <ph id=\"ph1\">`Context::Oversubscribe`</ph> causes the creation of an additional thread.","pos":[7030,7200],"source":" However, if both a nested task and its parent belong to the same context, only the outermost call to `Context::Oversubscribe` causes the creation of an additional thread."},{"pos":[7208,7412],"content":"[!NOTE]\n The runtime throws [concurrency::invalid_oversubscribe_operation](../../parallel/concrt/reference/invalid-oversubscribe-operation-class.md) if oversubscription is disabled before it is enabled.","leadings":["","> "],"nodes":[{"content":"The runtime throws <bpt id=\"p1\">[</bpt>concurrency::invalid_oversubscribe_operation<ept id=\"p1\">](../../parallel/concrt/reference/invalid-oversubscribe-operation-class.md)</ept> if oversubscription is disabled before it is enabled.","pos":[9,202],"source":" The runtime throws [concurrency::invalid_oversubscribe_operation](../../parallel/concrt/reference/invalid-oversubscribe-operation-class.md) if oversubscription is disabled before it is enabled."}]},{"content":"Example","pos":[7425,7432]},{"pos":[7436,7683],"content":"For an example that uses oversubscription to offset the latency that is caused by reading data from a network connection, see <bpt id=\"p1\">[</bpt>How to: Use Oversubscription to Offset Latency<ept id=\"p1\">](../../parallel/concrt/how-to-use-oversubscription-to-offset-latency.md)</ept>.","source":"For an example that uses oversubscription to offset the latency that is caused by reading data from a network connection, see [How to: Use Oversubscription to Offset Latency](../../parallel/concrt/how-to-use-oversubscription-to-offset-latency.md)."},{"content":"See Also","pos":[7692,7700]},{"content":"Task Scheduler","pos":[7705,7719]},{"content":"How to: Use Schedule Groups to Influence Order of Execution","pos":[7787,7846]},{"content":"How to: Use the Context Class to Implement a Cooperative Semaphore","pos":[7938,8004]},{"content":"How to: Use Oversubscription to Offset Latency","pos":[8103,8149]}],"content":"---\ntitle: \"Contexts | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"contexts [Concurrency Runtime]\"\nms.assetid: 10c1d861-8fbb-4ba0-b2ec-61876b11176e\ncaps.latest.revision: 11\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Contexts\n\nThis document describes the role of contexts in the Concurrency Runtime. A thread that is attached to a scheduler is known as an *execution context*, or just *context*. The [concurrency::wait](reference/concurrency-namespace-functions.md#wait) function and the concurrency::[Context class](../../parallel/concrt/reference/context-class.md) enable you to control the behavior of contexts. Use the `wait` function to suspend the current context for a specified time. Use the `Context` class when you need more control over when contexts block, unblock, and yield, or when you want to oversubscribe the current context.  \n  \n> [!TIP]\n>  The Concurrency Runtime provides a default scheduler, and therefore you are not required to create one in your application. Because the Task Scheduler helps you fine-tune the performance of your applications, we recommend that you start with the [Parallel Patterns Library (PPL)](../../parallel/concrt/parallel-patterns-library-ppl.md) or the [Asynchronous Agents Library](../../parallel/concrt/asynchronous-agents-library.md) if you are new to the Concurrency Runtime.  \n  \n## The wait Function  \n\n The [concurrency::wait](reference/concurrency-namespace-functions.md#wait) function cooperatively yields the execution of the current context for a specified number of milliseconds. The runtime uses the yield time to perform other tasks. After the specified time has elapsed, the runtime reschedules the context for execution. Therefore, the `wait` function might suspend the current context longer than the value provided for the `milliseconds` parameter.  \n  \n Passing 0 (zero) for the `milliseconds` parameter causes the runtime to suspend the current context until all other active contexts are given the opportunity to perform work. This lets you yield a task to all other active tasks.  \n  \n### Example  \n For an example that uses the `wait` function to yield the current context, and thus allow for other contexts to run, see [How to: Use Schedule Groups to Influence Order of Execution](../../parallel/concrt/how-to-use-schedule-groups-to-influence-order-of-execution.md).  \n  \n## The Context Class  \n The concurrency::[Context class](../../parallel/concrt/reference/context-class.md) provides a programming abstraction for an execution context and offers two important features: the ability to cooperatively block, unblock, and yield the current context, and the ability to oversubscribe the current context.  \n  \n### Cooperative Blocking  \n The `Context` class lets you block or yield the current execution context. Blocking or yielding is useful when the current context cannot continue because a resource is not available.  \n  \n\n The [concurrency::Context::Block](reference/context-class.md#block) method blocks the current context. A context that is blocked yields its processing resources so that the runtime can perform other tasks. The [concurrency::Context::Unblock](reference/context-class.md#unblock) method unblocks a blocked context. The `Context::Unblock` method must be called from a different context than the one that called `Context::Block`. The runtime throws [concurrency::context_self_unblock](../../parallel/concrt/reference/context-self-unblock-class.md) if a context attempts to unblock itself.  \n  \n To cooperatively block and unblock a context, you typically call [concurrency::Context::CurrentContext](reference/context-class.md#currentcontext) to retrieve a pointer to the `Context` object that is associated with the current thread and save the result. You then call the `Context::Block` method to block the current context. Later, call `Context::Unblock` from a separate context to unblock the blocked context.  \n  \n You must match each pair of calls to `Context::Block` and `Context::Unblock`. The runtime throws [concurrency::context_unblock_unbalanced](../../parallel/concrt/reference/context-unblock-unbalanced-class.md) when the `Context::Block` or `Context::Unblock` method is called consecutively without a matching call to the other method. However, you do not have to call `Context::Block` before you call `Context::Unblock`. For example, if one context calls `Context::Unblock` before another context calls `Context::Block` for the same context, that context remains unblocked.  \n  \n The [concurrency::Context::Yield](reference/context-class.md#yield) method yields execution so that the runtime can perform other tasks and then reschedule the context for execution. When you call the `Context::Block` method, the runtime does not reschedule the context.  \n\n  \n#### Example  \n For an example that uses the `Context::Block`, `Context::Unblock`, and `Context::Yield` methods to implement a cooperative semaphore class, see [How to: Use the Context Class to Implement a Cooperative Semaphore](../../parallel/concrt/how-to-use-the-context-class-to-implement-a-cooperative-semaphore.md).  \n  \n##### Oversubscription  \n The default scheduler creates the same number of threads as there are available hardware threads. You can use *oversubscription* to create additional threads for a given hardware thread.  \n  \n For computationally intensive operations, oversubscription typically does not scale because it introduces additional overhead. However, for tasks that have a high amount of latency, for example, reading data from disk or from a network connection, oversubscription can improve the overall efficiency of some applications.  \n  \n> [!NOTE]\n>  Enable oversubscription only from a thread that was created by the Concurrency Runtime. Oversubscription has no effect when it is called from a thread that was not created by the runtime (including the main thread).  \n  \n To enable oversubscription in the current context, call the [concurrency::Context::Oversubscribe](reference/context-class.md#oversubscribe) method with the `_BeginOversubscription` parameter set to `true`. When you enable oversubscription on a thread that was created by the Concurrency Runtime, it causes the runtime to create one additional thread. After all tasks that require oversubscription finish, call `Context::Oversubscribe` with the `_BeginOversubscription` parameter set to `false`.  \n\n  \n You can enable oversubscription multiple times from the current context, but you must disable it the same number of times that you enable it. Oversubscription can also be nested; that is, a task that is created by another task that uses oversubscription can also oversubscribe its context. However, if both a nested task and its parent belong to the same context, only the outermost call to `Context::Oversubscribe` causes the creation of an additional thread.  \n  \n> [!NOTE]\n>  The runtime throws [concurrency::invalid_oversubscribe_operation](../../parallel/concrt/reference/invalid-oversubscribe-operation-class.md) if oversubscription is disabled before it is enabled.  \n  \n###### Example  \n For an example that uses oversubscription to offset the latency that is caused by reading data from a network connection, see [How to: Use Oversubscription to Offset Latency](../../parallel/concrt/how-to-use-oversubscription-to-offset-latency.md).  \n  \n## See Also  \n [Task Scheduler](../../parallel/concrt/task-scheduler-concurrency-runtime.md)   \n [How to: Use Schedule Groups to Influence Order of Execution](../../parallel/concrt/how-to-use-schedule-groups-to-influence-order-of-execution.md)   \n [How to: Use the Context Class to Implement a Cooperative Semaphore](../../parallel/concrt/how-to-use-the-context-class-to-implement-a-cooperative-semaphore.md)   \n [How to: Use Oversubscription to Offset Latency](../../parallel/concrt/how-to-use-oversubscription-to-offset-latency.md)\n\n"}