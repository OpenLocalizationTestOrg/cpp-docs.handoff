{"nodes":[{"pos":[12,46],"content":"_ReadWriteBarrier | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_ReadWriteBarrier | Microsoft Docs","pos":[0,34]}]},{"content":"_ReadWriteBarrier","pos":[654,671]},{"content":"Microsoft Specific","pos":[674,692]},{"content":"Limits the compiler optimizations that can reorder memory accesses across the point of the call.","pos":[701,797]},{"pos":[805,1466],"content":"[!CAUTION]\n The `_ReadBarrier`, `_WriteBarrier`, and `_ReadWriteBarrier` compiler intrinsics and the `MemoryBarrier` macro are all deprecated and should not be used. For inter-thread communication, use mechanisms such as [atomic_thread_fence](http://msdn.microsoft.com/Library/14d2d5fc-e490-4160-9b1e-4711d78b0577) and [std::atomic\\<T>](../standard-library/atomic.md), which are defined in the [C++ Standard Library](../standard-library/cpp-standard-library-reference.md). For hardware access, use the [/volatile:iso](../build/reference/volatile-volatile-keyword-interpretation.md) compiler option together with the [volatile](../cpp/volatile-cpp.md) keyword.","leadings":["","> "],"nodes":[{"content":" The `_ReadBarrier`, `_WriteBarrier`, and `_ReadWriteBarrier` compiler intrinsics and the `MemoryBarrier` macro are all deprecated and should not be used. For inter-thread communication, use mechanisms such as [atomic_thread_fence](http://msdn.microsoft.com/Library/14d2d5fc-e490-4160-9b1e-4711d78b0577) and [std::atomic\\<T>](../standard-library/atomic.md), which are defined in the [C++ Standard Library](../standard-library/cpp-standard-library-reference.md). For hardware access, use the [/volatile:iso](../build/reference/volatile-volatile-keyword-interpretation.md) compiler option together with the [volatile](../cpp/volatile-cpp.md) keyword.","pos":[11,659],"nodes":[{"content":"The <ph id=\"ph1\">`_ReadBarrier`</ph>, <ph id=\"ph2\">`_WriteBarrier`</ph>, and <ph id=\"ph3\">`_ReadWriteBarrier`</ph> compiler intrinsics and the <ph id=\"ph4\">`MemoryBarrier`</ph> macro are all deprecated and should not be used.","pos":[1,154],"source":" The `_ReadBarrier`, `_WriteBarrier`, and `_ReadWriteBarrier` compiler intrinsics and the `MemoryBarrier` macro are all deprecated and should not be used."},{"content":"For inter-thread communication, use mechanisms such as <bpt id=\"p1\">[</bpt>atomic_thread_fence<ept id=\"p1\">](http://msdn.microsoft.com/Library/14d2d5fc-e490-4160-9b1e-4711d78b0577)</ept> and <bpt id=\"p2\">[</bpt>std::atomic<ph id=\"ph1\">\\&lt;</ph>T&gt;<ept id=\"p2\">](../standard-library/atomic.md)</ept>, which are defined in the <bpt id=\"p3\">[</bpt>C++ Standard Library<ept id=\"p3\">](../standard-library/cpp-standard-library-reference.md)</ept>.","pos":[155,461],"source":" For inter-thread communication, use mechanisms such as [atomic_thread_fence](http://msdn.microsoft.com/Library/14d2d5fc-e490-4160-9b1e-4711d78b0577) and [std::atomic\\<T>](../standard-library/atomic.md), which are defined in the [C++ Standard Library](../standard-library/cpp-standard-library-reference.md)."},{"content":"For hardware access, use the <bpt id=\"p1\">[</bpt>/volatile:iso<ept id=\"p1\">](../build/reference/volatile-volatile-keyword-interpretation.md)</ept> compiler option together with the <bpt id=\"p2\">[</bpt>volatile<ept id=\"p2\">](../cpp/volatile-cpp.md)</ept> keyword.","pos":[462,648],"source":" For hardware access, use the [/volatile:iso](../build/reference/volatile-volatile-keyword-interpretation.md) compiler option together with the [volatile](../cpp/volatile-cpp.md) keyword."}]}]},{"content":"Syntax","pos":[1475,1481]},{"content":"Requirements","pos":[1537,1549]},{"content":"Intrinsic","pos":[1556,1565]},{"content":"Architecture","pos":[1566,1578]},{"pos":[1642,1646],"content":"x86,"},{"pos":[1718,1745],"content":"<bpt id=\"p1\">**</bpt>Header file<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>intrin.h&gt;","source":"**Header file** \\<intrin.h>"},{"content":"Remarks","pos":[1754,1761]},{"pos":[1765,1905],"content":"The <ph id=\"ph1\">`_ReadWriteBarrier`</ph> intrinsic limits the compiler optimizations that can remove or reorder memory accesses across the point of the call.","source":"The `_ReadWriteBarrier` intrinsic limits the compiler optimizations that can remove or reorder memory accesses across the point of the call."},{"content":"END Microsoft Specific","pos":[1914,1936]},{"content":"See Also","pos":[1945,1953]},{"content":"_ReadBarrier","pos":[1958,1970]},{"content":"_WriteBarrier","pos":[2007,2020]},{"content":"Compiler Intrinsics","pos":[2058,2077]},{"content":"Keywords","pos":[2122,2130]}],"content":"---\ntitle: \"_ReadWriteBarrier | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"_ReadWriteBarrier\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ReadWriteBarrier intrinsic\"\n  - \"_ReadWriteBarrier intrinsic\"\nms.assetid: dd9f58b5-8bb6-494e-bb0f-9fe184f3908d\ncaps.latest.revision: 27\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _ReadWriteBarrier\n**Microsoft Specific**  \n  \n Limits the compiler optimizations that can reorder memory accesses across the point of the call.  \n  \n> [!CAUTION]\n>  The `_ReadBarrier`, `_WriteBarrier`, and `_ReadWriteBarrier` compiler intrinsics and the `MemoryBarrier` macro are all deprecated and should not be used. For inter-thread communication, use mechanisms such as [atomic_thread_fence](http://msdn.microsoft.com/Library/14d2d5fc-e490-4160-9b1e-4711d78b0577) and [std::atomic\\<T>](../standard-library/atomic.md), which are defined in the [C++ Standard Library](../standard-library/cpp-standard-library-reference.md). For hardware access, use the [/volatile:iso](../build/reference/volatile-volatile-keyword-interpretation.md) compiler option together with the [volatile](../cpp/volatile-cpp.md) keyword.  \n  \n## Syntax  \n  \n```  \nvoid _ReadWriteBarrier(void);  \n```  \n  \n## Requirements  \n  \n|Intrinsic|Architecture|  \n|---------------|------------------|  \n|`_ReadWriteBarrier`|x86, [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]|  \n  \n **Header file** \\<intrin.h>  \n  \n## Remarks  \n The `_ReadWriteBarrier` intrinsic limits the compiler optimizations that can remove or reorder memory accesses across the point of the call.  \n  \n## END Microsoft Specific  \n  \n## See Also  \n [_ReadBarrier](../intrinsics/readbarrier.md)   \n [_WriteBarrier](../intrinsics/writebarrier.md)   \n [Compiler Intrinsics](../intrinsics/compiler-intrinsics.md)   \n [Keywords](../cpp/keywords-cpp.md)"}