{"nodes":[{"pos":[12,71],"content":"fprintf, _fprintf_l, fwprintf, _fwprintf_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"fprintf, _fprintf_l, fwprintf, _fwprintf_l | Microsoft Docs","pos":[0,59]}]},{"content":"fprintf, _fprintf_l, fwprintf, _fwprintf_l","pos":[1277,1319]},{"content":"Print formatted data to a stream.","pos":[1320,1353]},{"content":"More secure versions of these functions are available; see <bpt id=\"p1\">[</bpt>fprintf_s, _fprintf_s_l, fwprintf_s, _fwprintf_s_l<ept id=\"p1\">](../../c-runtime-library/reference/fprintf-s-fprintf-s-l-fwprintf-s-fwprintf-s-l.md)</ept>.","pos":[1354,1550],"source":" More secure versions of these functions are available; see [fprintf_s, _fprintf_s_l, fwprintf_s, _fwprintf_s_l](../../c-runtime-library/reference/fprintf-s-fprintf-s-l-fwprintf-s-fwprintf-s-l.md)."},{"content":"Syntax","pos":[1559,1565]},{"content":"Parameters","pos":[1993,2003]},{"content":"Pointer to <ph id=\"ph1\">`FILE`</ph> structure.","pos":[2019,2047],"source":" Pointer to `FILE` structure."},{"content":"Format-control string.","pos":[2066,2088]},{"content":"Optional arguments.","pos":[2109,2128]},{"content":"The locale to use.","pos":[2147,2165]},{"content":"Return Value","pos":[2174,2186]},{"content":"returns the number of bytes written.","pos":[2200,2236]},{"content":"returns the number of wide characters written.","pos":[2248,2294]},{"content":"Each of these functions returns a negative value instead when an output error occurs.","pos":[2295,2380]},{"content":"If <ph id=\"ph1\">`stream`</ph> or <ph id=\"ph2\">`format`</ph> is <ph id=\"ph3\">`NULL`</ph>, these functions invoke the invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2381,2558],"source":" If `stream` or `format` is `NULL`, these functions invoke the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, the functions return -1 and set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph>.","pos":[2559,2648],"source":" If execution is allowed to continue, the functions return -1 and set `errno` to `EINVAL`."},{"content":"The format string is not checked for valid formatting characters as it is when using <ph id=\"ph1\">`fprintf_s`</ph> or <ph id=\"ph2\">`fwprintf_s`</ph>.","pos":[2649,2762],"source":" The format string is not checked for valid formatting characters as it is when using `fprintf_s` or `fwprintf_s`."},{"pos":[2769,2943],"content":"See <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept> for more information on these, and other, error codes.","source":"See [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md) for more information on these, and other, error codes."},{"content":"Remarks","pos":[2952,2959]},{"content":"formats and prints a series of characters and values to the output <ph id=\"ph1\">`stream`</ph><bpt id=\"p1\">*</bpt>.<ept id=\"p1\">*</ept>","pos":[2973,3051],"source":" formats and prints a series of characters and values to the output `stream`*.*"},{"content":"Each function <ph id=\"ph1\">`argument`</ph> (if any) is converted and output according to the corresponding format specification in <ph id=\"ph2\">`format`</ph><bpt id=\"p1\">*</bpt>.<ept id=\"p1\">*</ept>","pos":[3052,3176],"source":" Each function `argument` (if any) is converted and output according to the corresponding format specification in `format`*.*"},{"content":"For <ph id=\"ph1\">`fprintf`</ph>, the <ph id=\"ph2\">`format`</ph> argument has the same syntax and use that it has in <ph id=\"ph3\">`printf`</ph>.","pos":[3177,3266],"source":" For `fprintf`, the `format` argument has the same syntax and use that it has in `printf`."},{"content":"is a wide-character version of <ph id=\"ph1\">`fprintf`</ph>; in <ph id=\"ph2\">`fwprintf`</ph>, <ph id=\"ph3\">`format`</ph> is a wide-character string.","pos":[3284,3377],"source":" is a wide-character version of `fprintf`; in `fwprintf`, `format` is a wide-character string."},{"content":"These functions behave identically if the stream is opened in ANSI mode.","pos":[3378,3450]},{"content":"does not currently support output into a UNICODE stream.","pos":[3461,3517]},{"pos":[3524,3680],"content":"The versions of these functions with the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead of the current thread locale.","source":"The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale."},{"pos":[3688,3754],"content":"[!IMPORTANT]\n Ensure that `format` is not a user-defined string.","leadings":["","> "],"nodes":[{"content":"Ensure that <ph id=\"ph1\">`format`</ph> is not a user-defined string.","pos":[14,64],"source":" Ensure that `format` is not a user-defined string."}]},{"content":"Generic-Text Routine Mappings","pos":[3764,3793]},{"content":"TCHAR.H routine","pos":[3800,3815]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[3816,3844],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[3845,3858]},{"content":"_UNICODE defined","pos":[3859,3875]},{"pos":[4096,4231],"content":"For more information, see <bpt id=\"p1\">[</bpt>Format Specifications<ept id=\"p1\">](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)</ept>.","source":"For more information, see [Format Specifications](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)."},{"content":"Requirements","pos":[4240,4252]},{"content":"Function","pos":[4259,4267]},{"content":"Required header","pos":[4268,4283]},{"pos":[4338,4339],"content":","},{"content":"stdio.h&gt;","pos":[4355,4363],"source":"stdio.h>"},{"pos":[4378,4379],"content":","},{"content":"stdio.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[4396,4418],"source":"stdio.h> or \\<wchar.h>"},{"pos":[4426,4550],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[4559,4566]},{"content":".NET Framework Equivalent","pos":[5311,5336]},{"content":"System::IO::StreamWriter::Write","pos":[5341,5372]},{"content":"See Also","pos":[5458,5466]},{"content":"Stream I/O","pos":[5471,5481]},{"content":"_cprintf, _cprintf_l, _cwprintf, _cwprintf_l","pos":[5527,5571]},{"content":"fscanf, _fscanf_l, fwscanf, _fwscanf_l","pos":[5654,5692]},{"content":"sprintf, _sprintf_l, swprintf, _swprintf_l, <ph id=\"ph1\">\\_</ph>_swprintf_l","pos":[5771,5828],"source":"sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l"},{"content":"Format Specification Syntax: printf and wprintf Functions","pos":[5922,5979]}],"content":"---\ntitle: \"fprintf, _fprintf_l, fwprintf, _fwprintf_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"fwprintf\"\n  - \"fprintf\"\n  - \"_fprintf_l\"\n  - \"_fwprintf_l\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"fprintf\"\n  - \"fwprintf\"\n  - \"_ftprintf\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_fwprintf_l function\"\n  - \"fprintf function\"\n  - \"fprintf_l function\"\n  - \"_fprintf_l function\"\n  - \"_ftprintf function\"\n  - \"fwprintf function\"\n  - \"ftprintf_l function\"\n  - \"ftprintf function\"\n  - \"_ftprintf_l function\"\n  - \"print formatted data to streams\"\n  - \"fwprintf_l function\"\nms.assetid: 34a87e1c-6e4d-4d48-a611-58314dd4dc4b\ncaps.latest.revision: 24\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# fprintf, _fprintf_l, fwprintf, _fwprintf_l\nPrint formatted data to a stream. More secure versions of these functions are available; see [fprintf_s, _fprintf_s_l, fwprintf_s, _fwprintf_s_l](../../c-runtime-library/reference/fprintf-s-fprintf-s-l-fwprintf-s-fwprintf-s-l.md).  \n  \n## Syntax  \n  \n```  \nint fprintf(   \n   FILE *stream,  \n   const char *format [,  \n   argument ]...  \n);  \nint _fprintf_l(   \n   FILE *stream,  \n   const char *format,  \n   locale_t locale [,  \n   argument ]...  \n);  \nint fwprintf(   \n   FILE *stream,  \n   const wchar_t *format [,  \n   argument ]...  \n);  \nint _fwprintf_l(   \n   FILE *stream,  \n   const wchar_t *format,  \n   locale_t locale [,  \n   argument ]...  \n);  \n```  \n  \n#### Parameters  \n `stream`  \n Pointer to `FILE` structure.  \n  \n `format`  \n Format-control string.  \n  \n `argument`  \n Optional arguments.  \n  \n `locale`  \n The locale to use.  \n  \n## Return Value  \n `fprintf` returns the number of bytes written. `fwprintf` returns the number of wide characters written. Each of these functions returns a negative value instead when an output error occurs. If `stream` or `format` is `NULL`, these functions invoke the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, the functions return -1 and set `errno` to `EINVAL`. The format string is not checked for valid formatting characters as it is when using `fprintf_s` or `fwprintf_s`.  \n  \n See [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md) for more information on these, and other, error codes.  \n  \n## Remarks  \n `fprintf` formats and prints a series of characters and values to the output `stream`*.* Each function `argument` (if any) is converted and output according to the corresponding format specification in `format`*.* For `fprintf`, the `format` argument has the same syntax and use that it has in `printf`.  \n  \n `fwprintf` is a wide-character version of `fprintf`; in `fwprintf`, `format` is a wide-character string. These functions behave identically if the stream is opened in ANSI mode. `fprintf` does not currently support output into a UNICODE stream.  \n  \n The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale.  \n  \n> [!IMPORTANT]\n>  Ensure that `format` is not a user-defined string.  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_ftprintf`|`fprintf`|`fprintf`|`fwprintf`|  \n|`_ftprintf_l`|`_fprintf_l`|`_fprintf_l`|`_fwprintf_l`|  \n  \n For more information, see [Format Specifications](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md).  \n  \n## Requirements  \n  \n|Function|Required header|  \n|--------------|---------------------|  \n|`fprintf`, `_fprintf_l`|\\<stdio.h>|  \n|`fwprintf`, `_fwprintf_l`|\\<stdio.h> or \\<wchar.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_fprintf.c  \n/* This program uses fprintf to format various  \n * data and print it to the file named FPRINTF.OUT. It  \n * then displays FPRINTF.OUT on the screen using the system  \n * function to invoke the operating-system TYPE command.  \n */  \n  \n#include <stdio.h>  \n#include <process.h>  \n  \nFILE *stream;  \n  \nint main( void )  \n{  \n   int    i = 10;  \n   double fp = 1.5;  \n   char   s[] = \"this is a string\";  \n   char   c = '\\n';  \n  \n   fopen_s( &stream, \"fprintf.out\", \"w\" );  \n   fprintf( stream, \"%s%c\", s, c );  \n   fprintf( stream, \"%d\\n\", i );  \n   fprintf( stream, \"%f\\n\", fp );  \n   fclose( stream );  \n   system( \"type fprintf.out\" );  \n}  \n```  \n  \n```Output  \nthis is a string  \n10  \n1.500000  \n```  \n  \n## .NET Framework Equivalent  \n [System::IO::StreamWriter::Write](https://msdn.microsoft.com/en-us/library/system.io.streamwriter.write.aspx)  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [_cprintf, _cprintf_l, _cwprintf, _cwprintf_l](../../c-runtime-library/reference/cprintf-cprintf-l-cwprintf-cwprintf-l.md)   \n [fscanf, _fscanf_l, fwscanf, _fwscanf_l](../../c-runtime-library/reference/fscanf-fscanf-l-fwscanf-fwscanf-l.md)   \n [sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)   \n [Format Specification Syntax: printf and wprintf Functions](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)"}