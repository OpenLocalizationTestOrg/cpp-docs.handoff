{"nodes":[{"pos":[12,36],"content":"longjmp | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"longjmp | Microsoft Docs","pos":[0,24]}]},{"pos":[921,928],"content":"longjmp","linkify":"longjmp","nodes":[{"content":"longjmp","pos":[0,7]}]},{"content":"Restores stack environment and execution locale.","pos":[929,977]},{"pos":[986,992],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1082,1092],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Variable in which environment is stored.","pos":[1105,1145]},{"content":"<bpt id=\"p1\">*</bpt>value<ept id=\"p1\">*</ept>","pos":[1152,1159],"source":"*value*"},{"content":"Value to be returned to <ph id=\"ph1\">`setjmp`</ph> call.","pos":[1163,1201],"source":" Value to be returned to `setjmp` call."},{"pos":[1210,1217],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`longjmp`</ph> function restores a stack environment and execution locale previously saved in <ph id=\"ph2\">`env`</ph> by <ph id=\"ph3\">`setjmp`</ph>.","pos":[1221,1332],"source":"The `longjmp` function restores a stack environment and execution locale previously saved in `env` by `setjmp`."},{"content":"<ph id=\"ph1\">`setjmp`</ph> and <ph id=\"ph2\">`longjmp`</ph> provide a way to execute a nonlocal <ph id=\"ph3\">`goto`</ph>; they are typically used to pass execution control to error-handling or recovery code in a previously called routine without using the normal call and return conventions.","pos":[1333,1569],"source":"`setjmp` and `longjmp` provide a way to execute a nonlocal `goto`; they are typically used to pass execution control to error-handling or recovery code in a previously called routine without using the normal call and return conventions."},{"content":"A call to <ph id=\"ph1\">`setjmp`</ph> causes the current stack environment to be saved in <ph id=\"ph2\">`env`</ph>.","pos":[1576,1653],"source":"A call to `setjmp` causes the current stack environment to be saved in `env`."},{"content":"A subsequent call to <ph id=\"ph1\">`longjmp`</ph> restores the saved environment and returns control to the point immediately following the corresponding <ph id=\"ph2\">`setjmp`</ph> call.","pos":[1654,1803],"source":" A subsequent call to `longjmp` restores the saved environment and returns control to the point immediately following the corresponding `setjmp` call."},{"content":"Execution resumes as if <bpt id=\"p1\">*</bpt>value<ept id=\"p1\">*</ept> had just been returned by the <ph id=\"ph1\">`setjmp`</ph> call.","pos":[1804,1880],"source":" Execution resumes as if *value* had just been returned by the `setjmp` call."},{"content":"The values of all variables (except register variables) that are accessible to the routine receiving control contain the values they had when <ph id=\"ph1\">`longjmp`</ph> was called.","pos":[1881,2044],"source":" The values of all variables (except register variables) that are accessible to the routine receiving control contain the values they had when `longjmp` was called."},{"content":"The values of register variables are unpredictable.","pos":[2045,2096]},{"content":"The value returned by <ph id=\"ph1\">`setjmp`</ph> must be nonzero.","pos":[2097,2144],"source":" The value returned by `setjmp` must be nonzero."},{"content":"If <bpt id=\"p1\">*</bpt>value<ept id=\"p1\">*</ept> is passed as 0, the value 1 is substituted in the actual return.","pos":[2145,2220],"source":" If *value* is passed as 0, the value 1 is substituted in the actual return."},{"pos":[2227,2332],"content":"Call <ph id=\"ph1\">`longjmp`</ph> before the function that called <ph id=\"ph2\">`setjmp`</ph> returns; otherwise the results are unpredictable.","source":"Call `longjmp` before the function that called `setjmp` returns; otherwise the results are unpredictable."},{"pos":[2339,2395],"content":"Observe the following restrictions when using <ph id=\"ph1\">`longjmp`</ph>:","source":"Observe the following restrictions when using `longjmp`:"},{"content":"Do not assume that the values of the register variables will remain the same.","pos":[2405,2482]},{"content":"The values of register variables in the routine calling <ph id=\"ph1\">`setjmp`</ph> may not be restored to the proper values after <ph id=\"ph2\">`longjmp`</ph> is executed.","pos":[2483,2617],"source":" The values of register variables in the routine calling `setjmp` may not be restored to the proper values after `longjmp` is executed."},{"content":"Do not use <ph id=\"ph1\">`longjmp`</ph> to transfer control out of an interrupt-handling routine unless the interrupt is caused by a floating-point exception.","pos":[2627,2766],"source":"Do not use `longjmp` to transfer control out of an interrupt-handling routine unless the interrupt is caused by a floating-point exception."},{"content":"In this case, a program may return from an interrupt handler via <ph id=\"ph1\">`longjmp`</ph> if it first reinitializes the floating-point math package by calling <ph id=\"ph2\">`_fpreset`</ph>.","pos":[2767,2922],"source":" In this case, a program may return from an interrupt handler via `longjmp` if it first reinitializes the floating-point math package by calling `_fpreset`."},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> Be careful when using <ph id=\"ph1\">`setjmp`</ph> and <ph id=\"ph2\">`longjmp`</ph> in C++ programs.","pos":[2933,3003],"source":"**Note** Be careful when using `setjmp` and `longjmp` in C++ programs."},{"content":"Because these functions do not support C++ object semantics, it is safer to use the C++ exception-handling mechanism.","pos":[3004,3121]},{"pos":[3128,3216],"content":"For more information, see <bpt id=\"p1\">[</bpt>Using setjmp and longjmp<ept id=\"p1\">](../../cpp/using-setjmp-longjmp.md)</ept>.","source":"For more information, see [Using setjmp and longjmp](../../cpp/using-setjmp-longjmp.md)."},{"pos":[3225,3237],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[3244,3251]},{"content":"Required header","pos":[3252,3267]},{"content":"<ph id=\"ph1\">\\&lt;</ph>setjmp.h&gt;","pos":[3322,3333],"source":"\\<setjmp.h>"},{"pos":[3341,3465],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[3474,3483],"content":"Libraries","linkify":"Libraries","nodes":[{"content":"Libraries","pos":[0,9]}]},{"pos":[3487,3579],"content":"All versions of the <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept>.","source":"All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md)."},{"pos":[3588,3595],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3599,3676],"content":"See the example for <bpt id=\"p1\">[</bpt>_fpreset<ept id=\"p1\">](../../c-runtime-library/reference/fpreset.md)</ept>.","source":"See the example for [_fpreset](../../c-runtime-library/reference/fpreset.md)."},{"pos":[3685,3710],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[3714,3729]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[3730,3777],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[3778,3903],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[3912,3920],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Process and Environment Control<ept id=\"p1\">](../../c-runtime-library/process-and-environment-control.md)</ept><ph id=\"ph1\"> </ph>","pos":[3924,4018],"source":"[Process and Environment Control](../../c-runtime-library/process-and-environment-control.md) "},{"content":"<bpt id=\"p1\"> [</bpt>setjmp<ept id=\"p1\">](../../c-runtime-library/reference/setjmp.md)</ept>","pos":[4021,4075],"source":" [setjmp](../../c-runtime-library/reference/setjmp.md)"}],"content":"---\ntitle: \"longjmp | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"longjmp\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"longjmp\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"restoring stack environment and execution locale\"\n  - \"longjmp function\"\nms.assetid: 0e13670a-5130-45c1-ad69-6862505b7a2f\ncaps.latest.revision: 9\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# longjmp\nRestores stack environment and execution locale.  \n  \n## Syntax  \n  \n```  \n  \n      void longjmp(  \n   jmp_buf env,  \n   int value   \n);  \n```  \n  \n#### Parameters  \n `env`  \n Variable in which environment is stored.  \n  \n *value*  \n Value to be returned to `setjmp` call.  \n  \n## Remarks  \n The `longjmp` function restores a stack environment and execution locale previously saved in `env` by `setjmp`. `setjmp` and `longjmp` provide a way to execute a nonlocal `goto`; they are typically used to pass execution control to error-handling or recovery code in a previously called routine without using the normal call and return conventions.  \n  \n A call to `setjmp` causes the current stack environment to be saved in `env`. A subsequent call to `longjmp` restores the saved environment and returns control to the point immediately following the corresponding `setjmp` call. Execution resumes as if *value* had just been returned by the `setjmp` call. The values of all variables (except register variables) that are accessible to the routine receiving control contain the values they had when `longjmp` was called. The values of register variables are unpredictable. The value returned by `setjmp` must be nonzero. If *value* is passed as 0, the value 1 is substituted in the actual return.  \n  \n Call `longjmp` before the function that called `setjmp` returns; otherwise the results are unpredictable.  \n  \n Observe the following restrictions when using `longjmp`:  \n  \n-   Do not assume that the values of the register variables will remain the same. The values of register variables in the routine calling `setjmp` may not be restored to the proper values after `longjmp` is executed.  \n  \n-   Do not use `longjmp` to transfer control out of an interrupt-handling routine unless the interrupt is caused by a floating-point exception. In this case, a program may return from an interrupt handler via `longjmp` if it first reinitializes the floating-point math package by calling `_fpreset`.  \n  \n     **Note** Be careful when using `setjmp` and `longjmp` in C++ programs. Because these functions do not support C++ object semantics, it is safer to use the C++ exception-handling mechanism.  \n  \n For more information, see [Using setjmp and longjmp](../../cpp/using-setjmp-longjmp.md).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`longjmp`|\\<setjmp.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Libraries  \n All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md).  \n  \n## Example  \n See the example for [_fpreset](../../c-runtime-library/reference/fpreset.md).  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Process and Environment Control](../../c-runtime-library/process-and-environment-control.md)   \n [setjmp](../../c-runtime-library/reference/setjmp.md)"}