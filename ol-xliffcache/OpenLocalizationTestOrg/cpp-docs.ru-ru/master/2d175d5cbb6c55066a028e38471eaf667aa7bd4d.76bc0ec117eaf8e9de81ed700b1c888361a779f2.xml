{"nodes":[{"pos":[12,42],"content":"CComPtr Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CComPtr Class | Microsoft Docs","pos":[0,30]}]},{"pos":[595,608],"content":"CComPtr Class","linkify":"CComPtr Class","nodes":[{"content":"CComPtr Class","pos":[0,13]}]},{"content":"A smart pointer class for managing COM interface pointers.","pos":[609,667]},{"pos":[676,682],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[739,749],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A COM interface specifying the type of pointer to be stored.","pos":[760,820]},{"pos":[829,836],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[846,865],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[872,876]},{"content":"Description","pos":[877,888]},{"pos":[926,963],"content":"<bpt id=\"p1\">[</bpt>CComPtr::CComPtr<ept id=\"p1\">](#ccomptr__ccomptr)</ept>","source":"[CComPtr::CComPtr](#ccomptr__ccomptr)"},{"content":"The constructor.","pos":[964,980]},{"pos":[991,1007],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[1014,1018]},{"content":"Description","pos":[1019,1030]},{"pos":[1068,1112],"content":"<bpt id=\"p1\">[</bpt>CComPtr::operator =<ept id=\"p1\">](#ccomptr__operator_eq)</ept>","source":"[CComPtr::operator =](#ccomptr__operator_eq)"},{"content":"Assigns a pointer to the member pointer.","pos":[1113,1153]},{"pos":[1163,1170],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"ATL uses <ph id=\"ph1\">`CComPtr`</ph> and <bpt id=\"p1\">[</bpt>CComQIPtr<ept id=\"p1\">](../../atl/reference/ccomqiptr-class.md)</ept> to manage COM interface pointers.","pos":[1174,1282],"source":"ATL uses `CComPtr` and [CComQIPtr](../../atl/reference/ccomqiptr-class.md) to manage COM interface pointers."},{"content":"Both are derived from <bpt id=\"p1\">[</bpt>CComPtrBase<ept id=\"p1\">](../../atl/reference/ccomptrbase-class.md)</ept>, and both perform automatic reference counting.","pos":[1283,1408],"source":" Both are derived from [CComPtrBase](../../atl/reference/ccomptrbase-class.md), and both perform automatic reference counting."},{"content":"The <bpt id=\"p1\">**</bpt>CComPtr<ept id=\"p1\">**</ept> and <bpt id=\"p2\">[</bpt>CComQIPtr<ept id=\"p2\">](../../atl/reference/ccomqiptr-class.md)</ept> classes can help eliminate memory leaks by performing automatic reference counting.","pos":[1415,1570],"source":"The **CComPtr** and [CComQIPtr](../../atl/reference/ccomqiptr-class.md) classes can help eliminate memory leaks by performing automatic reference counting."},{"content":"The following functions both perform the same logical operations; however, note how the second version may be less error-prone by using the <bpt id=\"p1\">**</bpt>CComPtr<ept id=\"p1\">**</ept> class:","pos":[1572,1730],"source":"  The following functions both perform the same logical operations; however, note how the second version may be less error-prone by using the **CComPtr** class:"},{"pos":[1737,1818],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#130<ept id=\"p2\">](../../atl/codesnippet/cpp/ccomptr-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#130](../../atl/codesnippet/cpp/ccomptr-class_1.cpp)]"},{"pos":[1825,1906],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#131<ept id=\"p2\">](../../atl/codesnippet/cpp/ccomptr-class_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#131](../../atl/codesnippet/cpp/ccomptr-class_2.cpp)]"},{"content":"In Debug builds, link atlsd.lib for code tracing.","pos":[1913,1962]},{"pos":[1971,1992],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[1996,2051],"content":"<bpt id=\"p1\">[</bpt>CComPtrBase<ept id=\"p1\">](../../atl/reference/ccomptrbase-class.md)</ept>","source":"[CComPtrBase](../../atl/reference/ccomptrbase-class.md)"},{"pos":[2076,2088],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2092,2113],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlbase.h","source":"**Header:** atlbase.h"},{"pos":[2123,2172],"content":"<bpt id=\"p1\">&lt;a name=\"ccomptr__ccomptr\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComPtr::CComPtr","linkify":"<a name=\"ccomptr__ccomptr\"></a>  CComPtr::CComPtr","source":"<a name=\"ccomptr__ccomptr\"></a>  CComPtr::CComPtr"},{"content":"The constructor.","pos":[2176,2192]},{"pos":[2301,2311],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Used to initialize the interface pointer.","pos":[2323,2364]},{"content":"A COM interface.","pos":[2378,2394]},{"pos":[2404,2460],"content":"<bpt id=\"p1\">&lt;a name=\"ccomptr__operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComPtr::operator =","linkify":"<a name=\"ccomptr__operator_eq\"></a>  CComPtr::operator =","source":"<a name=\"ccomptr__operator_eq\"></a>  CComPtr::operator ="},{"content":"Assignment operator.","pos":[2464,2484]},{"pos":[2585,2597],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[2601,2650],"content":"Returns a pointer to the updated <ph id=\"ph1\">`CComPtr`</ph> object","source":"Returns a pointer to the updated `CComPtr` object"},{"pos":[2660,2667],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This operation AddRefs the new object and releases the existing object, if one exists.","pos":[2671,2757]},{"pos":[2766,2774],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>CComPtr::CComPtr<ept id=\"p1\">](#ccomptr__ccomptr)</ept><ph id=\"ph1\"> </ph>","pos":[2778,2816],"source":"[CComPtr::CComPtr](#ccomptr__ccomptr) "},{"content":"<bpt id=\"p1\"> [</bpt>CComQIPtr::CComQIPtr<ept id=\"p1\">](../../atl/reference/ccomqiptr-class.md#ccomqiptr__ccomqiptr)</ept><ph id=\"ph1\"> </ph>","pos":[2819,2904],"source":" [CComQIPtr::CComQIPtr](../../atl/reference/ccomqiptr-class.md#ccomqiptr__ccomqiptr) "},{"content":"<bpt id=\"p1\"> [</bpt>Class Overview<ept id=\"p1\">](../../atl/atl-class-overview.md)</ept>","pos":[2907,2957],"source":" [Class Overview](../../atl/atl-class-overview.md)"}],"content":"---\ntitle: \"CComPtr Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CComPtr\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CComPtr class\"\nms.assetid: 22d9ea8d-ed66-4c34-940f-141db11e83bd\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CComPtr Class\nA smart pointer class for managing COM interface pointers.  \n  \n## Syntax  \n  \n```\ntemplate<class T>  class CComPtr\n```  \n  \n#### Parameters  \n `T`  \n A COM interface specifying the type of pointer to be stored.  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComPtr::CComPtr](#ccomptr__ccomptr)|The constructor.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComPtr::operator =](#ccomptr__operator_eq)|Assigns a pointer to the member pointer.|  \n  \n## Remarks  \n ATL uses `CComPtr` and [CComQIPtr](../../atl/reference/ccomqiptr-class.md) to manage COM interface pointers. Both are derived from [CComPtrBase](../../atl/reference/ccomptrbase-class.md), and both perform automatic reference counting.  \n  \n The **CComPtr** and [CComQIPtr](../../atl/reference/ccomqiptr-class.md) classes can help eliminate memory leaks by performing automatic reference counting.  The following functions both perform the same logical operations; however, note how the second version may be less error-prone by using the **CComPtr** class:  \n  \n [!code-cpp[NVC_ATL_Utilities#130](../../atl/codesnippet/cpp/ccomptr-class_1.cpp)]  \n  \n [!code-cpp[NVC_ATL_Utilities#131](../../atl/codesnippet/cpp/ccomptr-class_2.cpp)]  \n  \n In Debug builds, link atlsd.lib for code tracing.  \n  \n## Inheritance Hierarchy  \n [CComPtrBase](../../atl/reference/ccomptrbase-class.md)  \n  \n `CComPtr`  \n  \n## Requirements  \n **Header:** atlbase.h  \n  \n##  <a name=\"ccomptr__ccomptr\"></a>  CComPtr::CComPtr  \n The constructor.  \n  \n```\nCComPtr() throw ();\nCComPtr(T* lp) throw ();\nCComPtr (const CComPtr<T>& lp) throw ();\n```  \n  \n### Parameters  \n `lp`  \n Used to initialize the interface pointer.  \n  \n `T`  \n A COM interface.  \n  \n##  <a name=\"ccomptr__operator_eq\"></a>  CComPtr::operator =  \n Assignment operator.  \n  \n```\nT* operator= (T* lp) throw ();\n\nT* operator= (const CComPtr<T>& lp) throw ();\n```  \n  \n### Return Value  \n Returns a pointer to the updated `CComPtr` object  \n  \n### Remarks  \n This operation AddRefs the new object and releases the existing object, if one exists.  \n  \n## See Also  \n [CComPtr::CComPtr](#ccomptr__ccomptr)   \n [CComQIPtr::CComQIPtr](../../atl/reference/ccomqiptr-class.md#ccomqiptr__ccomqiptr)   \n [Class Overview](../../atl/atl-class-overview.md)\n"}