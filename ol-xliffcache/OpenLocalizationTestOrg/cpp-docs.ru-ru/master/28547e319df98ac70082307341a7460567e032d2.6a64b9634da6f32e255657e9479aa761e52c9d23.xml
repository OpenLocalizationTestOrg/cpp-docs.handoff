{"nodes":[{"pos":[12,70],"content":"Drag and Drop: Implementing a Drop Source | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Drag and Drop: Implementing a Drop Source | Microsoft Docs","pos":[0,58]}]},{"content":"Drag and Drop: Implementing a Drop Source","pos":[827,868]},{"content":"This article explains how to get your application to provide data to a drag-and-drop operation.","pos":[869,964]},{"content":"Basic implementation of a drop source is relatively simple.","pos":[971,1030]},{"content":"The first step is to determine what events begin a drag operation.","pos":[1031,1097]},{"content":"Recommended user interface guidelines define the beginning of a drag operation as the selection of data and a <ph id=\"ph1\">`WM_LBUTTONDOWN`</ph> event occurring on a point inside the selected data.","pos":[1098,1277],"source":" Recommended user interface guidelines define the beginning of a drag operation as the selection of data and a `WM_LBUTTONDOWN` event occurring on a point inside the selected data."},{"content":"The MFC OLE samples <bpt id=\"p1\">[</bpt>OCLIENT<ept id=\"p1\">](../visual-cpp-samples.md)</ept> and <bpt id=\"p2\">[</bpt>HIERSVR<ept id=\"p2\">](../visual-cpp-samples.md)</ept> follow these guidelines.","pos":[1278,1398],"source":" The MFC OLE samples [OCLIENT](../visual-cpp-samples.md) and [HIERSVR](../visual-cpp-samples.md) follow these guidelines."},{"content":"If your application is a container and the selected data is a linked or an embedded object of type <ph id=\"ph1\">`COleClientItem`</ph>, call its <ph id=\"ph2\">`DoDragDrop`</ph> member function.","pos":[1405,1560],"source":"If your application is a container and the selected data is a linked or an embedded object of type `COleClientItem`, call its `DoDragDrop` member function."},{"content":"Otherwise, construct a <ph id=\"ph1\">`COleDataSource`</ph> object, initialize it with the selection, and call the data source object's <ph id=\"ph2\">`DoDragDrop`</ph> member function.","pos":[1561,1706],"source":" Otherwise, construct a `COleDataSource` object, initialize it with the selection, and call the data source object's `DoDragDrop` member function."},{"content":"If your application is a server, use <ph id=\"ph1\">`COleServerItem::DoDragDrop`</ph>.","pos":[1707,1773],"source":" If your application is a server, use `COleServerItem::DoDragDrop`."},{"content":"For information about customizing standard drag-and-drop behavior, see the article <bpt id=\"p1\">[</bpt>Drag and Drop: Customizing<ept id=\"p1\">](../mfc/drag-and-drop-customizing.md)</ept>.","pos":[1774,1923],"source":" For information about customizing standard drag-and-drop behavior, see the article [Drag and Drop: Customizing](../mfc/drag-and-drop-customizing.md)."},{"content":"If <ph id=\"ph1\">`DoDragDrop`</ph> returns <ph id=\"ph2\">`DROPEFFECT_MOVE`</ph>, delete the source data from the source document immediately.","pos":[1930,2033],"source":"If `DoDragDrop` returns `DROPEFFECT_MOVE`, delete the source data from the source document immediately."},{"content":"No other return value from <ph id=\"ph1\">`DoDragDrop`</ph> has any effect on a drop source.","pos":[2034,2106],"source":" No other return value from `DoDragDrop` has any effect on a drop source."},{"content":"For more information, see:","pos":[2113,2139]},{"content":"Implementing a Drop Target","pos":[2150,2176]},{"content":"Customizing Drag and Drop","pos":[2240,2265]},{"content":"Creating and Destroying OLE Data Objects and Data Sources","pos":[2314,2371]},{"content":"Manipulating OLE Data Objects and Data Sources","pos":[2449,2495]},{"content":"See Also","pos":[2559,2567]},{"content":"Drag and Drop (OLE)","pos":[2572,2591]},{"content":"COleDataSource::DoDragDrop","pos":[2627,2653]},{"content":"COleClientItem::DoDragDrop","pos":[2729,2755]},{"content":"CView::OnDragLeave","pos":[2831,2849]}],"content":"---\ntitle: \"Drag and Drop: Implementing a Drop Source | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"OLE drag and drop, initiating drag operations\"\n  - \"drag and drop, calling DoDragDrop\"\n  - \"OLE drag and drop, drop source\"\n  - \"OLE drag and drop, calling DoDragDrop\"\n  - \"drag and drop, initiating drag operations\"\n  - \"drag and drop, drop source\"\nms.assetid: 0ed2fda0-63fa-4b1e-b398-f1f142f40035\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Drag and Drop: Implementing a Drop Source\nThis article explains how to get your application to provide data to a drag-and-drop operation.  \n  \n Basic implementation of a drop source is relatively simple. The first step is to determine what events begin a drag operation. Recommended user interface guidelines define the beginning of a drag operation as the selection of data and a `WM_LBUTTONDOWN` event occurring on a point inside the selected data. The MFC OLE samples [OCLIENT](../visual-cpp-samples.md) and [HIERSVR](../visual-cpp-samples.md) follow these guidelines.  \n  \n If your application is a container and the selected data is a linked or an embedded object of type `COleClientItem`, call its `DoDragDrop` member function. Otherwise, construct a `COleDataSource` object, initialize it with the selection, and call the data source object's `DoDragDrop` member function. If your application is a server, use `COleServerItem::DoDragDrop`. For information about customizing standard drag-and-drop behavior, see the article [Drag and Drop: Customizing](../mfc/drag-and-drop-customizing.md).  \n  \n If `DoDragDrop` returns `DROPEFFECT_MOVE`, delete the source data from the source document immediately. No other return value from `DoDragDrop` has any effect on a drop source.  \n  \n For more information, see:  \n  \n-   [Implementing a Drop Target](../mfc/drag-and-drop-implementing-a-drop-target.md)  \n  \n-   [Customizing Drag and Drop](../mfc/drag-and-drop-customizing.md)  \n  \n-   [Creating and Destroying OLE Data Objects and Data Sources](../mfc/data-objects-and-data-sources-creation-and-destruction.md)  \n  \n-   [Manipulating OLE Data Objects and Data Sources](../mfc/data-objects-and-data-sources-manipulation.md)  \n  \n## See Also  \n [Drag and Drop (OLE)](../mfc/drag-and-drop-ole.md)   \n [COleDataSource::DoDragDrop](../mfc/reference/coledatasource-class.md#coledatasource__dodragdrop)   \n [COleClientItem::DoDragDrop](../mfc/reference/coleclientitem-class.md#coleclientitem__dodragdrop)   \n [CView::OnDragLeave](../mfc/reference/cview-class.md#cview__ondragleave)\n\n"}