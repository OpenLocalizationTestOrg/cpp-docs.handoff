{"nodes":[{"pos":[12,42],"content":"Member Access | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Member Access | Microsoft Docs","pos":[0,30]}]},{"content":"Member Access","pos":[758,771]},{"content":"Class member access can be controlled by overloading the member access operator (<bpt id=\"p1\">**</bpt>–&gt;<ept id=\"p1\">**</ept>).","pos":[772,861],"source":"Class member access can be controlled by overloading the member access operator (**–>**)."},{"content":"This operator is considered a unary operator in this usage, and the overloaded operator function must be a class member function.","pos":[862,991]},{"content":"Therefore, the declaration for such a function is:","pos":[992,1042]},{"content":"Syntax","pos":[1051,1057]},{"content":"Remarks","pos":[1111,1118]},{"content":"where <bpt id=\"p1\">*</bpt>class-type<ept id=\"p1\">*</ept> is the name of the class to which this operator belongs.","pos":[1122,1197],"source":"where *class-type* is the name of the class to which this operator belongs."},{"content":"The member access operator function must be a nonstatic member function.","pos":[1198,1270]},{"content":"This operator is used (often in conjunction with the pointer-dereference operator) to implement \"smart pointers\" that validate pointers prior to dereference or count usage.","pos":[1277,1449]},{"content":"The <bpt id=\"p1\">**</bpt>.<ept id=\"p1\">**</ept>","pos":[1456,1465],"source":"The **.**"},{"content":"member access operator cannot be overloaded.","pos":[1466,1510]},{"content":"See Also","pos":[1519,1527]},{"content":"Operator Overloading","pos":[1532,1552]}],"content":"---\ntitle: \"Member Access | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"member-selection operators\"\n  - \"pointers, smart\"\n  - \"member access, overloaded operators\"\n  - \"operator overloading, member access operators\"\n  - \"smart pointers, definition\"\n  - \"smart pointers\"\nms.assetid: 8c7b2c43-eb92-4d42-9a8e-61aa37d71333\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Member Access\nClass member access can be controlled by overloading the member access operator (**–>**). This operator is considered a unary operator in this usage, and the overloaded operator function must be a class member function. Therefore, the declaration for such a function is:  \n  \n## Syntax  \n  \n```  \n  \nclass-type *operator–>()  \n```  \n  \n## Remarks  \n where *class-type* is the name of the class to which this operator belongs. The member access operator function must be a nonstatic member function.  \n  \n This operator is used (often in conjunction with the pointer-dereference operator) to implement \"smart pointers\" that validate pointers prior to dereference or count usage.  \n  \n The **.** member access operator cannot be overloaded.  \n  \n## See Also  \n [Operator Overloading](../cpp/operator-overloading.md)"}