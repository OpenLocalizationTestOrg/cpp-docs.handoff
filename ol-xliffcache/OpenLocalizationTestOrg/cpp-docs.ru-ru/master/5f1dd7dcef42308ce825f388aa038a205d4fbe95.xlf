<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5f1dd7dcef42308ce825f388aa038a205d4fbe95</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\mfc-activex-controls-using-data-binding-in-an-activex-control.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0cf203d006ce5d1e0d5b7d4734623e2ea00805ae</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8ead0e44f0ca835655f47cb35b6c8748bc367ddd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls: Using Data Binding in an ActiveX Control | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls: Using Data Binding in an ActiveX Control</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>One of the more powerful uses of ActiveX controls is data binding, which allows a property of the control to bind with a specific field in a database.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>When a user modifies data in this bound property, the control notifies the database and requests that the record field be updated.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The database then notifies the control of the success or failure of the request.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This article covers the control side of your task.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Implementing the data binding interactions with the database is the responsibility of the control container.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>How you manage the database interactions in your container is beyond the scope of this documentation.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>How you prepare the control for data binding is explained in the rest of this article.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Conceptual diagram of a data&amp;#45;bound control</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Conceptual Diagram of a Data-Bound Control</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`COleControl`</ph> class provides two member functions that make data binding an easy process to implement.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The first function, <bpt id="p1">[</bpt>BoundPropertyRequestEdit<ept id="p1">](../mfc/reference/colecontrol-class.md#colecontrol__boundpropertyrequestedit)</ept>, is used to request permission to change the property value.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>BoundPropertyChanged<ept id="p1">](../mfc/reference/colecontrol-class.md#colecontrol__boundpropertychanged)</ept>, the second function, is called after the property value has been successfully changed.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This article covers the following topics:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Creating a Bindable Stock Property</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Creating a Bindable Get/Set Method</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Creating a Bindable Stock Property</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It is possible to create a data-bound stock property, although it is more likely that you will want a <bpt id="p1">[</bpt>bindable get/set method<ept id="p1">](#vchowcreatingbindablegetsetmethod)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Stock properties have the <bpt id="p1">**</bpt>bindable<ept id="p1">**</ept> and <bpt id="p2">**</bpt>requestedit<ept id="p2">**</ept> attributes by default.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To add a bindable stock property using the Add Property Wizard</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Begin a project using the <bpt id="p1">[</bpt>MFC ActiveX Control Wizard<ept id="p1">](../mfc/reference/mfc-activex-control-wizard.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Right-click the interface node for your control.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This opens the shortcut menu.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>From the shortcut menu, click <bpt id="p1">**</bpt>Add<ept id="p1">**</ept> and then click <bpt id="p2">**</bpt>Add Property<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Select one of the entries from the <bpt id="p1">**</bpt>Property Name<ept id="p1">**</ept> drop-down list.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, you can select <bpt id="p1">**</bpt>Text<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Because <bpt id="p1">**</bpt>Text<ept id="p1">**</ept> is a stock property, the <bpt id="p2">**</bpt>bindable<ept id="p2">**</ept> and <bpt id="p3">**</bpt>requestedit<ept id="p3">**</ept> attributes are already checked.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Select the following check boxes from the <bpt id="p1">**</bpt>IDL Attributes<ept id="p1">**</ept> tab: <bpt id="p2">**</bpt>displaybind<ept id="p2">**</ept> and <bpt id="p3">**</bpt>defaultbind<ept id="p3">**</ept> to add the attributes to the property definition in the project's .IDL file.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>These attributes make the control visible to the user and make the stock property the default bindable property.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>At this point, your control can display data from a data source, but the user will not be able to update data fields.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If you want your control to also be able to update data, change the <ph id="ph1">`OnOcmCommand`</ph> <bpt id="p1">[</bpt>OnOcmCommand<ept id="p1">](../mfc/mfc-activex-controls-subclassing-a-windows-control.md)</ept> function to look as follows:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxData#1</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can now build the project, which will register the control.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When you insert the control in a dialog box, the <bpt id="p1">**</bpt>Data Field<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Data Source<ept id="p2">**</ept> properties will have been added and you can now select a data source and field to display in the control.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Creating a Bindable Get/Set Method</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In addition to a data-bound get/set method, you can also create a <bpt id="p1">[</bpt>bindable stock property<ept id="p1">](#vchowcreatingbindablestockproperty)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This procedure assumes you have an ActiveX control project that subclasses a Windows control.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To add a bindable get/set method using the Add Property Wizard</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Load your control's project.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Control Settings<ept id="p1">**</ept> page, select a window class for the control to subclass.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For example, you may want to subclass an EDIT control.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Load your control's project.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Right-click the interface node for your control.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This opens the shortcut menu.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>From the shortcut menu, click <bpt id="p1">**</bpt>Add<ept id="p1">**</ept> and then click <bpt id="p2">**</bpt>Add Property<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Type the property name in the <bpt id="p1">**</bpt>Property Name<ept id="p1">**</ept> box.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`MyProp`</ph> for this example.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Select a data type from the <bpt id="p1">**</bpt>Property Type<ept id="p1">**</ept> drop-down list box.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">**</bpt>short<ept id="p1">**</ept> for this example.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For <bpt id="p1">**</bpt>Implementation Type<ept id="p1">**</ept>, click <bpt id="p2">**</bpt>Get/Set Methods<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Select the following check boxes from the IDL Attributes tab: <bpt id="p1">**</bpt>bindable<ept id="p1">**</ept>, <bpt id="p2">**</bpt>requestedit<ept id="p2">**</ept>, <bpt id="p3">**</bpt>displaybind<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>defaultbind<ept id="p4">**</ept> to add the attributes to the property definition in the project's .IDL file.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>These attributes make the control visible to the user and make the stock property the default bindable property.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Finish<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Modify the body of the <ph id="ph1">`SetMyProp`</ph> function so that it contains the following code:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxData#2</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The parameter passed to the <ph id="ph1">`BoundPropertyChanged`</ph> and <ph id="ph2">`BoundPropertyRequestEdit`</ph> functions is the dispid of the property, which is the parameter passed to the id() attribute for the property in the .IDL file.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Modify the <bpt id="p1">[</bpt>OnOcmCommand<ept id="p1">](../mfc/mfc-activex-controls-subclassing-a-windows-control.md)</ept> function so it contains the following code:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxData#1</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Modify the <ph id="ph1">`OnDraw`</ph> function so that it contains the following code:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxData#3</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To the public section of the header file the header file for your control class, add the following definitions (constructors) for member variables:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxData#4</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Make the following line the last line in the <ph id="ph1">`DoPropExchange`</ph> function:</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxData#5</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Modify the <ph id="ph1">`OnResetState`</ph> function so that it contains the following code:</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxData#6</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Modify the <ph id="ph1">`GetMyProp`</ph> function so that it contains the following code:</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxData#7</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You can now build the project, which will register the control.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>When you insert the control in a dialog box, the <bpt id="p1">**</bpt>Data Field<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Data Source<ept id="p2">**</ept> properties will have been added and you can now select a data source and field to display in the control.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Data-Bound Controls (ADO and RDO)</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>