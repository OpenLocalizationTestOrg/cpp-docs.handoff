{"nodes":[{"pos":[12,77],"content":"Using Insertion Operators and Controlling Format | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Using Insertion Operators and Controlling Format | Microsoft Docs","pos":[0,65]}]},{"content":"Using Insertion Operators and Controlling Format","pos":[605,653]},{"content":"This topic shows how to control format and how to create insertion operators for your own classes.","pos":[654,752]},{"content":"The insertion (<bpt id=\"p1\">**</bpt><ph id=\"ph1\">&lt;&lt;</ph><ept id=\"p1\">**</ept>) operator, which is preprogrammed for all standard C++ data types, sends bytes to an output stream object.","pos":[753,881],"source":" The insertion (**<<**) operator, which is preprogrammed for all standard C++ data types, sends bytes to an output stream object."},{"content":"Insertion operators work with predefined \"manipulators,\" which are elements that change the default format of integer arguments.","pos":[882,1010]},{"content":"You can control the format with the following options:","pos":[1017,1071]},{"content":"Output Width","pos":[1080,1092]},{"content":"Alignment","pos":[1128,1137]},{"content":"Precision","pos":[1171,1180]},{"content":"Radix","pos":[1214,1219]},{"pos":[1289,1301],"content":"Output Width"},{"content":"To align output, you specify the output width for each item by placing the <ph id=\"ph1\">`setw`</ph> manipulator in the stream or by calling the <bpt id=\"p1\">**</bpt>width<ept id=\"p1\">**</ept> member function.","pos":[1305,1457],"source":"To align output, you specify the output width for each item by placing the `setw` manipulator in the stream or by calling the **width** member function."},{"content":"This example right-aligns the values in a column at least 10 characters wide:","pos":[1458,1535]},{"content":"Output","pos":[1840,1846]},{"content":"Leading blanks are added to any value fewer than 10 characters wide.","pos":[1910,1978]},{"content":"To pad a field, use the <bpt id=\"p1\">**</bpt>fill<ept id=\"p1\">**</ept> member function, which sets the value of the padding character for fields that have a specified width.","pos":[1985,2120],"source":"To pad a field, use the **fill** member function, which sets the value of the padding character for fields that have a specified width."},{"content":"The default is a blank.","pos":[2121,2144]},{"content":"To pad the column of numbers with asterisks, modify the previous <bpt id=\"p1\">**</bpt>for<ept id=\"p1\">**</ept> loop as follows:","pos":[2145,2234],"source":" To pad the column of numbers with asterisks, modify the previous **for** loop as follows:"},{"content":"The <ph id=\"ph1\">`endl`</ph> manipulator replaces the newline character (<ph id=\"ph2\">`'\\n'`</ph>).","pos":[2362,2425],"source":"The `endl` manipulator replaces the newline character (`'\\n'`)."},{"content":"The output looks like this:","pos":[2426,2453]},{"pos":[2527,2608],"content":"To specify widths for data elements in the same line, use the <ph id=\"ph1\">`setw`</ph> manipulator:","source":"To specify widths for data elements in the same line, use the `setw` manipulator:"},{"content":"Output","pos":[2997,3003]},{"content":"The <bpt id=\"p1\">**</bpt>width<ept id=\"p1\">**</ept> member function is declared in <ph id=\"ph1\">\\&lt;</ph>iostream&gt;.","pos":[3007,3064],"source":"The **width** member function is declared in \\<iostream>."},{"content":"If you use <ph id=\"ph1\">`setw`</ph> or any other manipulator with arguments, you must include <ph id=\"ph2\">\\&lt;</ph>iomanip&gt;.","pos":[3065,3152],"source":" If you use `setw` or any other manipulator with arguments, you must include \\<iomanip>."},{"content":"In the output, strings are printed in a field of width 6 and integers in a field of width 10:","pos":[3153,3246]},{"content":"Neither <ph id=\"ph1\">`setw`</ph> nor <bpt id=\"p1\">**</bpt>width<ept id=\"p1\">**</ept> truncates values.","pos":[3336,3382],"source":"Neither `setw` nor **width** truncates values."},{"content":"If formatted output exceeds the width, the entire value prints, subject to the stream's precision setting.","pos":[3383,3489]},{"content":"Both <ph id=\"ph1\">`setw`</ph> and <bpt id=\"p1\">**</bpt>width<ept id=\"p1\">**</ept> affect the following field only.","pos":[3490,3548],"source":" Both `setw` and **width** affect the following field only."},{"content":"Field width reverts to its default behavior (the necessary width) after one field has been printed.","pos":[3549,3648]},{"content":"However, the other stream format options remain in effect until changed.","pos":[3649,3721]},{"pos":[3768,3777],"content":"Alignment"},{"content":"Output streams default to right-aligned text.","pos":[3781,3826]},{"content":"To left-align the names in the previous example and right-align the numbers, replace the <bpt id=\"p1\">**</bpt>for<ept id=\"p1\">**</ept> loop as follows:","pos":[3827,3940],"source":" To left-align the names in the previous example and right-align the numbers, replace the **for** loop as follows:"},{"content":"The output looks like this:","pos":[4116,4143]},{"content":"The left-align flag is set by using the <bpt id=\"p1\">[</bpt>setiosflags<ept id=\"p1\">](../standard-library/iomanip-functions.md#setiosflags)</ept> manipulator with the <ph id=\"ph1\">`left`</ph> enumerator.","pos":[4241,4388],"source":"The left-align flag is set by using the [setiosflags](../standard-library/iomanip-functions.md#setiosflags) manipulator with the `left` enumerator."},{"content":"This enumerator is defined in the <bpt id=\"p1\">[</bpt>ios<ept id=\"p1\">](../standard-library/basic-ios-class.md)</ept> class, so its reference must include the <bpt id=\"p2\">**</bpt>ios::<ept id=\"p2\">**</ept> prefix.","pos":[4389,4527],"source":" This enumerator is defined in the [ios](../standard-library/basic-ios-class.md) class, so its reference must include the **ios::** prefix."},{"content":"The <bpt id=\"p1\">[</bpt>resetiosflags<ept id=\"p1\">](../standard-library/iomanip-functions.md#resetiosflags)</ept> manipulator turns off the left-align flag.","pos":[4528,4646],"source":" The [resetiosflags](../standard-library/iomanip-functions.md#resetiosflags) manipulator turns off the left-align flag."},{"content":"Unlike <bpt id=\"p1\">**</bpt>width<ept id=\"p1\">**</ept> and <ph id=\"ph1\">`setw`</ph>, the effect of <ph id=\"ph2\">`setiosflags`</ph> and <ph id=\"ph3\">`resetiosflags`</ph> is permanent.","pos":[4647,4737],"source":" Unlike **width** and `setw`, the effect of `setiosflags` and `resetiosflags` is permanent."},{"pos":[4784,4793],"content":"Precision"},{"content":"The default value for floating-point precision is six.","pos":[4797,4851]},{"content":"For example, the number 3466.9768 prints as 3466.98.","pos":[4852,4904]},{"content":"To change the way this value prints, use the <bpt id=\"p1\">[</bpt>setprecision<ept id=\"p1\">](../standard-library/iomanip-functions.md#setprecision)</ept> manipulator.","pos":[4905,5032],"source":" To change the way this value prints, use the [setprecision](../standard-library/iomanip-functions.md#setprecision) manipulator."},{"content":"The manipulator has two flags: <bpt id=\"p1\">[</bpt>fixed<ept id=\"p1\">](../standard-library/ios-functions.md#fixed)</ept> and <bpt id=\"p2\">[</bpt>scientific<ept id=\"p2\">](../standard-library/ios-functions.md#scientific)</ept>.","pos":[5033,5182],"source":" The manipulator has two flags: [fixed](../standard-library/ios-functions.md#fixed) and [scientific](../standard-library/ios-functions.md#scientific)."},{"content":"If <bpt id=\"p1\">[</bpt>fixed<ept id=\"p1\">](../standard-library/ios-functions.md#fixed)</ept> is set, the number prints as 3466.976800.","pos":[5183,5279],"source":" If [fixed](../standard-library/ios-functions.md#fixed) is set, the number prints as 3466.976800."},{"content":"If <bpt id=\"p1\">**</bpt>scientific<ept id=\"p1\">**</ept> is set, it prints as 3.4669773+003.","pos":[5280,5333],"source":" If **scientific** is set, it prints as 3.4669773+003."},{"pos":[5340,5487],"content":"To display the floating-point numbers shown in <bpt id=\"p1\">[</bpt>Alignment<ept id=\"p1\">](#vclrfalignmentanchor4)</ept> with one significant digit, replace the <bpt id=\"p2\">**</bpt>for<ept id=\"p2\">**</ept> loop as follows:","source":"To display the floating-point numbers shown in [Alignment](#vclrfalignmentanchor4) with one significant digit, replace the **for** loop as follows:"},{"content":"The program prints this list:","pos":[5696,5725]},{"pos":[5822,5902],"content":"To eliminate scientific notation, insert this statement before the <bpt id=\"p1\">**</bpt>for<ept id=\"p1\">**</ept> loop:","source":"To eliminate scientific notation, insert this statement before the **for** loop:"},{"content":"With fixed notation, the program prints with one digit after the decimal point.","pos":[5956,6035]},{"pos":[6133,6219],"content":"If you change the <bpt id=\"p1\">**</bpt>ios::fixed<ept id=\"p1\">**</ept> flag to <bpt id=\"p2\">**</bpt>ios::scientific<ept id=\"p2\">**</ept>, the program prints this:","source":"If you change the **ios::fixed** flag to **ios::scientific**, the program prints this:"},{"content":"Again, the program prints one digit after the decimal point.","pos":[6317,6377]},{"content":"If either <bpt id=\"p1\">**</bpt>ios::fixed<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>ios::scientific<ept id=\"p2\">**</ept> is set, the precision value determines the number of digits after the decimal point.","pos":[6378,6510],"source":" If either **ios::fixed** or **ios::scientific** is set, the precision value determines the number of digits after the decimal point."},{"content":"If neither flag is set, the precision value determines the total number of significant digits.","pos":[6511,6605]},{"content":"The <ph id=\"ph1\">`resetiosflags`</ph> manipulator clears these flags.","pos":[6606,6657],"source":" The `resetiosflags` manipulator clears these flags."},{"pos":[6700,6705],"content":"Radix"},{"content":"The <bpt id=\"p1\">**</bpt>dec<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>oct<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>hex<ept id=\"p3\">**</ept> manipulators set the default radix for input and output.","pos":[6709,6799],"source":"The **dec**, **oct**, and **hex** manipulators set the default radix for input and output."},{"content":"For example, if you insert the <bpt id=\"p1\">**</bpt>hex<ept id=\"p1\">**</ept> manipulator into the output stream, the object correctly translates the internal data representation of integers into a hexadecimal output format.","pos":[6800,6985],"source":" For example, if you insert the **hex** manipulator into the output stream, the object correctly translates the internal data representation of integers into a hexadecimal output format."},{"content":"The numbers are displayed with digits a through f in lower case if the <bpt id=\"p1\">[</bpt>uppercase<ept id=\"p1\">](../standard-library/ios-functions.md#uppercase)</ept> flag is clear (the default); otherwise, they are displayed in upper case.","pos":[6986,7190],"source":" The numbers are displayed with digits a through f in lower case if the [uppercase](../standard-library/ios-functions.md#uppercase) flag is clear (the default); otherwise, they are displayed in upper case."},{"content":"The default radix is <bpt id=\"p1\">**</bpt>dec<ept id=\"p1\">**</ept> (decimal).","pos":[7191,7230],"source":" The default radix is **dec** (decimal)."},{"content":"Quoted strings (C++14)","pos":[7239,7261]},{"content":"When you insert a string into a stream, you can easily retrieve the same string back by calling the stringstream::str() member function.","pos":[7265,7401]},{"content":"However, if you want to use the extraction operator to insert the stream into a new string at a later point, you may get an unexpected result because the &gt;&gt; operator by default will stop when it encounters the first whitespace character.","pos":[7402,7639],"source":" However, if you want to use the extraction operator to insert the stream into a new string at a later point, you may get an unexpected result because the >> operator by default will stop when it encounters the first whitespace character."},{"content":"This behavior can be overcome manually, but to make string round-tripping more convenient, C++14 adds the <ph id=\"ph1\">`std::quoted`</ph> stream manipulator in <ph id=\"ph2\">`&lt;iomanip&gt;`</ph>.","pos":[7888,8042],"source":"This behavior can be overcome manually, but to make string round-tripping more convenient, C++14 adds the `std::quoted` stream manipulator in `<iomanip>`."},{"content":"Upon insertion, <ph id=\"ph1\">`quoted()`</ph> surrounds the string with a delimiter (double quote ' \" ' by default) and upon extraction manipulates the stream to extract all characters until the final delimiter is encountered.","pos":[8043,8250],"source":" Upon insertion, `quoted()` surrounds the string with a delimiter (double quote ' \" ' by default) and upon extraction manipulates the stream to extract all characters until the final delimiter is encountered."},{"content":"Any embedded quotes are escaped with an escape character ('<ph id=\"ph1\">\\\\\\\\</ph>' by default).","pos":[8251,8328],"source":" Any embedded quotes are escaped with an escape character ('\\\\\\\\' by default)."},{"pos":[8335,8582],"content":"The delimiters are present only in the stream object; they are not present in the extracted string but they are present in the string returned by <bpt id=\"p1\">[</bpt>basic_stringstream::str<ept id=\"p1\">](../standard-library/basic-stringstream-class.md#basic_stringstream__str)</ept>().","source":"The delimiters are present only in the stream object; they are not present in the extracted string but they are present in the string returned by [basic_stringstream::str](../standard-library/basic-stringstream-class.md#basic_stringstream__str)()."},{"content":"The whitespace behavior of the insertion and extraction operations is independent of how a string is represented in code, so the quoted operator is useful regardless of whether the input string is a raw string literal or a regular string.","pos":[8589,8827]},{"content":"The input string, whatever its format, can have embedded quotes, line breaks, tabs, and so on and all these will be preserved by the quoted() manipulator.","pos":[8828,8982]},{"content":"For more information and full code examples, see [quoted]--brokenlink--(../Topic/%3Cios%3E%20functions.md#quoted).","pos":[8989,9103]},{"content":"See Also","pos":[9112,9120]},{"content":"Output Streams","pos":[9125,9139]}],"content":"---\ntitle: \"Using Insertion Operators and Controlling Format | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"insertion operators\"\nms.assetid: cdefe986-6548-4cd1-8a67-b431d7d36a1c\ncaps.latest.revision: 8\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Using Insertion Operators and Controlling Format\nThis topic shows how to control format and how to create insertion operators for your own classes. The insertion (**<<**) operator, which is preprogrammed for all standard C++ data types, sends bytes to an output stream object. Insertion operators work with predefined \"manipulators,\" which are elements that change the default format of integer arguments.  \n  \n You can control the format with the following options:  \n  \n- [Output Width](#vclrfoutputwidthanchor3)  \n  \n- [Alignment](#vclrfalignmentanchor4)  \n  \n- [Precision](#vclrfprecisionanchor5)  \n  \n- [Radix](#vclrfradixanchor6)  \n  \n##  <a name=\"vclrfoutputwidthanchor3\"></a> Output Width  \n To align output, you specify the output width for each item by placing the `setw` manipulator in the stream or by calling the **width** member function. This example right-aligns the values in a column at least 10 characters wide:  \n  \n```  \n// output_width.cpp  \n// compile with: /EHsc  \n#include <iostream>  \nusing namespace std;  \n  \nint main( )  \n{  \n   double values[] = { 1.23, 35.36, 653.7, 4358.24 };  \n   for( int i = 0; i < 4; i++ )  \n   {  \n      cout.width(10);  \n      cout << values[i] << '\\n';  \n   }  \n}  \n```  \n  \n### Output  \n  \n```  \n    1.23 \n    35.36 \n    653.7 \n4358.24  \n```  \n  \n Leading blanks are added to any value fewer than 10 characters wide.  \n  \n To pad a field, use the **fill** member function, which sets the value of the padding character for fields that have a specified width. The default is a blank. To pad the column of numbers with asterisks, modify the previous **for** loop as follows:  \n  \n```  \nfor(int i = 0; i <4; i++)  \n{  \n    cout.width(10);\n\n cout.fill('*');\n\n    cout <<values[i] <<endl;  \n}  \n```  \n  \n The `endl` manipulator replaces the newline character (`'\\n'`). The output looks like this:  \n  \n```  \n******1.23  \n*****35.36  \n*****653.7  \n***4358.24  \n```  \n  \n To specify widths for data elements in the same line, use the `setw` manipulator:  \n  \n```  \n// setw.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <iomanip>  \nusing namespace std;  \n  \nint main( )  \n{  \n   double values[] = { 1.23, 35.36, 653.7, 4358.24 };  \n   char *names[] = { \"Zoot\", \"Jimmy\", \"Al\", \"Stan\" };  \n   for( int i = 0; i < 4; i++ )  \n      cout << setw( 6 )  << names[i]  \n           << setw( 10 ) << values[i] << endl;  \n}  \n```  \n  \n### Output  \n The **width** member function is declared in \\<iostream>. If you use `setw` or any other manipulator with arguments, you must include \\<iomanip>. In the output, strings are printed in a field of width 6 and integers in a field of width 10:  \n  \n```  \n    Zoot 1.23  \nJimmy     35.36  \n    Al 653.7  \n    Stan 4358.24  \n```  \n  \n Neither `setw` nor **width** truncates values. If formatted output exceeds the width, the entire value prints, subject to the stream's precision setting. Both `setw` and **width** affect the following field only. Field width reverts to its default behavior (the necessary width) after one field has been printed. However, the other stream format options remain in effect until changed.  \n  \n##  <a name=\"vclrfalignmentanchor4\"></a> Alignment  \n Output streams default to right-aligned text. To left-align the names in the previous example and right-align the numbers, replace the **for** loop as follows:  \n  \n```  \nfor (int i = 0; i <4; i++)  \n    cout <<setiosflags(ios::left)  \n <<setw(6)  <<names[i]  \n <<resetiosflags(ios::left)  \n <<setw(10) <<values[i] <<endl;  \n```  \n  \n The output looks like this:  \n  \n```  \nZoot        1.23  \nJimmy      35.36  \nAl         653.7  \nStan     4358.24  \n```  \n  \n The left-align flag is set by using the [setiosflags](../standard-library/iomanip-functions.md#setiosflags) manipulator with the `left` enumerator. This enumerator is defined in the [ios](../standard-library/basic-ios-class.md) class, so its reference must include the **ios::** prefix. The [resetiosflags](../standard-library/iomanip-functions.md#resetiosflags) manipulator turns off the left-align flag. Unlike **width** and `setw`, the effect of `setiosflags` and `resetiosflags` is permanent.  \n  \n##  <a name=\"vclrfprecisionanchor5\"></a> Precision  \n The default value for floating-point precision is six. For example, the number 3466.9768 prints as 3466.98. To change the way this value prints, use the [setprecision](../standard-library/iomanip-functions.md#setprecision) manipulator. The manipulator has two flags: [fixed](../standard-library/ios-functions.md#fixed) and [scientific](../standard-library/ios-functions.md#scientific). If [fixed](../standard-library/ios-functions.md#fixed) is set, the number prints as 3466.976800. If **scientific** is set, it prints as 3.4669773+003.  \n  \n To display the floating-point numbers shown in [Alignment](#vclrfalignmentanchor4) with one significant digit, replace the **for** loop as follows:  \n  \n```  \nfor (int i = 0; i <4; i++)  \n    cout <<setiosflags(ios::left)  \n <<setw(6)    \n <<names[i]  \n <<resetiosflags(ios::left)  \n <<setw(10)   \n <<setprecision(1)  \n <<values[i]   \n <<endl;  \n```  \n  \n The program prints this list:  \n  \n```  \nZoot          1  \nJimmy     4e+001  \nAl        7e+002  \nStan      4e+003  \n```  \n  \n To eliminate scientific notation, insert this statement before the **for** loop:  \n  \n```  \ncout <<setiosflags(ios::fixed);\n```  \n  \n With fixed notation, the program prints with one digit after the decimal point.  \n  \n```  \nZoot         1.2  \nJimmy       35.4  \nAl         653.7  \nStan      4358.2  \n```  \n  \n If you change the **ios::fixed** flag to **ios::scientific**, the program prints this:  \n  \n```  \nZoot    1.2e+000  \nJimmy   3.5e+001  \nAl      6.5e+002  \nStan    4.4e+003  \n```  \n  \n Again, the program prints one digit after the decimal point. If either **ios::fixed** or **ios::scientific** is set, the precision value determines the number of digits after the decimal point. If neither flag is set, the precision value determines the total number of significant digits. The `resetiosflags` manipulator clears these flags.  \n  \n##  <a name=\"vclrfradixanchor6\"></a> Radix  \n The **dec**, **oct**, and **hex** manipulators set the default radix for input and output. For example, if you insert the **hex** manipulator into the output stream, the object correctly translates the internal data representation of integers into a hexadecimal output format. The numbers are displayed with digits a through f in lower case if the [uppercase](../standard-library/ios-functions.md#uppercase) flag is clear (the default); otherwise, they are displayed in upper case. The default radix is **dec** (decimal).  \n  \n## Quoted strings (C++14)  \n When you insert a string into a stream, you can easily retrieve the same string back by calling the stringstream::str() member function. However, if you want to use the extraction operator to insert the stream into a new string at a later point, you may get an unexpected result because the >> operator by default will stop when it encounters the first whitespace character.  \n  \n```  \n \nstd::stringstream ss;  \nstd::string inserted = \"This is a sentence.\";  \nstd::string extracted;  \n \nss <<inserted;  \nss>> extracted;  \n \nstd::cout <<inserted;     //  This is a sentence.  \nstd::cout <<extracted;   //   This  \n```  \n  \n This behavior can be overcome manually, but to make string round-tripping more convenient, C++14 adds the `std::quoted` stream manipulator in `<iomanip>`. Upon insertion, `quoted()` surrounds the string with a delimiter (double quote ' \" ' by default) and upon extraction manipulates the stream to extract all characters until the final delimiter is encountered. Any embedded quotes are escaped with an escape character ('\\\\\\\\' by default).  \n  \n The delimiters are present only in the stream object; they are not present in the extracted string but they are present in the string returned by [basic_stringstream::str](../standard-library/basic-stringstream-class.md#basic_stringstream__str)().  \n  \n The whitespace behavior of the insertion and extraction operations is independent of how a string is represented in code, so the quoted operator is useful regardless of whether the input string is a raw string literal or a regular string. The input string, whatever its format, can have embedded quotes, line breaks, tabs, and so on and all these will be preserved by the quoted() manipulator.  \n  \n For more information and full code examples, see [quoted]--brokenlink--(../Topic/%3Cios%3E%20functions.md#quoted).  \n  \n## See Also  \n [Output Streams](../standard-library/output-streams.md)   \n\n"}