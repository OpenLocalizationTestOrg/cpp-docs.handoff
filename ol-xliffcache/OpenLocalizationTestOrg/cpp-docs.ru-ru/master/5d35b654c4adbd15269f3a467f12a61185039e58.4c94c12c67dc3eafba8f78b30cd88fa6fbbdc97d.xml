{"nodes":[{"pos":[12,52],"content":"&lt;tuple&gt; operators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>tuple<ph id=\"ph2\">&amp;gt;</ph> operators | Microsoft Docs","pos":[0,40],"source":"&lt;tuple&gt; operators | Microsoft Docs"}]},{"pos":[255,278],"content":"&lt;tuple&gt; operators","linkify":"&lt;tuple&gt; operators","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>tuple<ph id=\"ph2\">&amp;gt;</ph> operators","pos":[0,23],"source":"&lt;tuple&gt; operators"}]},{"pos":[297,324],"content":"<bpt id=\"p1\">[</bpt>operator!=<ept id=\"p1\">](#operator_neq)</ept>","source":"[operator!=](#operator_neq)"},{"pos":[325,354],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;gt;</ph><ept id=\"p1\">](#operator_gt_)</ept>","source":"[operator&gt;](#operator_gt_)"},{"pos":[355,388],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">=</ph><ept id=\"p1\">](#operator_gt__eq)</ept>","source":"[operator&gt;=](#operator_gt__eq)"},{"pos":[393,422],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;lt;</ph><ept id=\"p1\">](#operator_lt_)</ept>","source":"[operator&lt;](#operator_lt_)"},{"pos":[423,456],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">=</ph><ept id=\"p1\">](#operator_lt__eq)</ept>","source":"[operator&lt;=](#operator_lt__eq)"},{"pos":[457,486],"content":"<bpt id=\"p1\">[</bpt>operator==<ept id=\"p1\">](#operator_eq_eq)</ept>","source":"[operator==](#operator_eq_eq)"},{"pos":[497,536],"content":"<bpt id=\"p1\">&lt;a name=\"operator_neq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator!=","linkify":"<a name=\"operator_neq\"></a>  operator!=","source":"<a name=\"operator_neq\"></a>  operator!="},{"pos":[540,579],"content":"Compare <ph id=\"ph1\">`tuple`</ph> objects for inequality.","source":"Compare `tuple` objects for inequality."},{"pos":[787,797],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type of the Nth tuple element.","pos":[809,843]},{"pos":[853,860],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[864,1026],"content":"The function returns false when <ph id=\"ph1\">`N`</ph> is 0, otherwise <ph id=\"ph2\">`get&lt;0&gt;(tpl1) != get&lt;0&gt;(tpl2) || get&lt;1&gt;(tpl1) != get&lt;1&gt;(tpl2) || ... || get&lt;N - 1&gt;(tpl1) == get&lt;N - 1&gt;(tpl2)`</ph>.","source":"The function returns false when `N` is 0, otherwise `get<0>(tpl1) != get<0>(tpl2) || get<1>(tpl1) != get<1>(tpl2) || ... || get<N - 1>(tpl1) == get<N - 1>(tpl2)`."},{"pos":[1036,1043],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2137,2178],"content":"<bpt id=\"p1\">&lt;a name=\"operator_lt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;lt;</ph>","linkify":"<a name=\"operator_lt_\"></a>  operator&lt;","source":"<a name=\"operator_lt_\"></a>  operator&lt;"},{"pos":[2182,2215],"content":"Compare <ph id=\"ph1\">`tuple`</ph> objects for less.","source":"Compare `tuple` objects for less."},{"pos":[2422,2432],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type of the Nth tuple element.","pos":[2444,2478]},{"pos":[2488,2495],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2499,2673],"content":"The function returns true when <ph id=\"ph1\">`N`</ph> is greater than 0 and the first differing value in <ph id=\"ph2\">`tpl1`</ph> compares less than the corresponding value in <ph id=\"ph3\">`tpl2`</ph>, otherwise it returns false.","source":"The function returns true when `N` is greater than 0 and the first differing value in `tpl1` compares less than the corresponding value in `tpl2`, otherwise it returns false."},{"pos":[2683,2690],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3782,3827],"content":"<bpt id=\"p1\">&lt;a name=\"operator_lt__eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">=</ph>","linkify":"<a name=\"operator_lt__eq\"></a>  operator&lt;=","source":"<a name=\"operator_lt__eq\"></a>  operator&lt;="},{"pos":[3831,3873],"content":"Compare <ph id=\"ph1\">`tuple`</ph> objects for less or equal.","source":"Compare `tuple` objects for less or equal."},{"pos":[4081,4091],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type of the Nth tuple element.","pos":[4103,4137]},{"pos":[4147,4154],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4158,4196],"content":"The function returns <ph id=\"ph1\">`!(tpl2 &lt; tpl1)`</ph>.","source":"The function returns `!(tpl2 < tpl1)`."},{"pos":[4206,4213],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5307,5348],"content":"<bpt id=\"p1\">&lt;a name=\"operator_eq_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator==","linkify":"<a name=\"operator_eq_eq\"></a>  operator==","source":"<a name=\"operator_eq_eq\"></a>  operator=="},{"pos":[5352,5389],"content":"Compare <ph id=\"ph1\">`tuple`</ph> objects for equality.","source":"Compare `tuple` objects for equality."},{"pos":[5597,5607],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type of the Nth tuple element.","pos":[5619,5653]},{"pos":[5663,5670],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5674,5835],"content":"The function returns true when <ph id=\"ph1\">`N`</ph> is 0, otherwise <ph id=\"ph2\">`get&lt;0&gt;(tpl1) == get&lt;0&gt;(tpl2) &amp;&amp; get&lt;1&gt;(tpl1) == get&lt;1&gt;(tpl2) &amp;&amp; ... &amp;&amp; get&lt;N - 1&gt;(tpl1) == get&lt;N - 1&gt;(tpl2)`</ph>.","source":"The function returns true when `N` is 0, otherwise `get<0>(tpl1) == get<0>(tpl2) && get<1>(tpl1) == get<1>(tpl2) && ... && get<N - 1>(tpl1) == get<N - 1>(tpl2)`."},{"pos":[5845,5852],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6946,6987],"content":"<bpt id=\"p1\">&lt;a name=\"operator_gt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;gt;</ph>","linkify":"<a name=\"operator_gt_\"></a>  operator&gt;","source":"<a name=\"operator_gt_\"></a>  operator&gt;"},{"pos":[6991,7027],"content":"Compare <ph id=\"ph1\">`tuple`</ph> objects for greater.","source":"Compare `tuple` objects for greater."},{"pos":[7234,7244],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type of the Nth tuple element.","pos":[7256,7290]},{"pos":[7300,7307],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7311,7346],"content":"The function returns <ph id=\"ph1\">`tpl2 &lt; tpl1`</ph>.","source":"The function returns `tpl2 < tpl1`."},{"pos":[7356,7363],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8455,8500],"content":"<bpt id=\"p1\">&lt;a name=\"operator_gt__eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">=</ph>","linkify":"<a name=\"operator_gt__eq\"></a>  operator&gt;=","source":"<a name=\"operator_gt__eq\"></a>  operator&gt;="},{"pos":[8504,8549],"content":"Compare <ph id=\"ph1\">`tuple`</ph> objects for greater or equal.","source":"Compare `tuple` objects for greater or equal."},{"pos":[8757,8767],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type of the Nth tuple element.","pos":[8779,8813]},{"pos":[8823,8830],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8834,8872],"content":"The function returns <ph id=\"ph1\">`!(tpl1 &lt; tpl2)`</ph>.","source":"The function returns `!(tpl1 < tpl2)`."},{"pos":[8882,8889],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9982,9990],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[9994,10034],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>tuple&gt;<ept id=\"p1\">](../standard-library/tuple.md)</ept>","source":"[\\<tuple>](../standard-library/tuple.md)"}],"content":"---\ntitle: \"&lt;tuple&gt; operators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: f25752dc-d3e2-4e12-b5ac-9a8682ca60ed\ncaps.latest.revision: 13\nmanager: \"ghogen\"\n---\n# &lt;tuple&gt; operators\n||||  \n|-|-|-|  \n|[operator!=](#operator_neq)|[operator&gt;](#operator_gt_)|[operator&gt;=](#operator_gt__eq)|  \n|[operator&lt;](#operator_lt_)|[operator&lt;=](#operator_lt__eq)|[operator==](#operator_eq_eq)|  \n  \n##  <a name=\"operator_neq\"></a>  operator!=  \n Compare `tuple` objects for inequality.  \n  \n```  \ntemplate <class T1, class T2, ..., class TN,  \n    class U1, class U2, ..., class UN>  \nbool operator!=(const tuple<T1, T2, ..., TN>& tpl1,  \n    const tuple<U1, U2, ..., UN>& tpl2);\n```  \n  \n### Parameters  \n `TN`  \n The type of the Nth tuple element.  \n  \n### Remarks  \n The function returns false when `N` is 0, otherwise `get<0>(tpl1) != get<0>(tpl2) || get<1>(tpl1) != get<1>(tpl2) || ... || get<N - 1>(tpl1) == get<N - 1>(tpl2)`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__tuple__operator_ne.cpp   \n// compile with: /EHsc   \n#include <tuple>   \n#include <iostream>   \n  \ntypedef std::tuple<int, double, int, double> Mytuple;   \nint main()   \n    {   \n    Mytuple c0(0, 1, 2, 3);   \n  \n// display contents \" 0 1 2 3\"   \n    std::cout << \" \" << std::get<0>(c0);   \n    std::cout << \" \" << std::get<1>(c0);   \n    std::cout << \" \" << std::get<2>(c0);   \n    std::cout << \" \" << std::get<3>(c0);   \n    std::cout << std::endl;   \n  \n    Mytuple c1 = std::make_tuple(4, 5, 6, 7);   \n  \n// display contents \" 4 5 6 7\"   \n    std::cout << \" \" << std::get<0>(c0);   \n    std::cout << \" \" << std::get<1>(c0);   \n    std::cout << \" \" << std::get<2>(c0);   \n    std::cout << \" \" << std::get<3>(c0);   \n    std::cout << std::endl;   \n  \n// display results of comparisons   \n    std::cout << std::boolalpha << \" \" << (c0 != c0);   \n    std::cout << std::endl;   \n    std::cout << std::boolalpha << \" \" << (c0 != c1);   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n0 1 2 3  \nfalse  \ntrue  \n```  \n  \n##  <a name=\"operator_lt_\"></a>  operator&lt;  \n Compare `tuple` objects for less.  \n  \n```  \ntemplate <class T1, class T2, ..., class TN,  \n    class U1, class U2, ..., class UN>  \nbool operator<(const tuple<T1, T2, ..., TN>& tpl1,  \n    const tuple<U1, U2, ..., UN>& tpl2);\n```  \n  \n### Parameters  \n `TN`  \n The type of the Nth tuple element.  \n  \n### Remarks  \n The function returns true when `N` is greater than 0 and the first differing value in `tpl1` compares less than the corresponding value in `tpl2`, otherwise it returns false.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__tuple__operator_lt.cpp   \n// compile with: /EHsc   \n#include <tuple>   \n#include <iostream>   \n  \ntypedef std::tuple<int, double, int, double> Mytuple;   \nint main()   \n    {   \n    Mytuple c0(0, 1, 2, 3);   \n  \n// display contents \" 0 1 2 3\"   \n    std::cout << \" \" << std::get<0>(c0);   \n    std::cout << \" \" << std::get<1>(c0);   \n    std::cout << \" \" << std::get<2>(c0);   \n    std::cout << \" \" << std::get<3>(c0);   \n    std::cout << std::endl;   \n  \n    Mytuple c1 = std::make_tuple(4, 5, 6, 7);   \n  \n// display contents \" 4 5 6 7\"   \n    std::cout << \" \" << std::get<0>(c0);   \n    std::cout << \" \" << std::get<1>(c0);   \n    std::cout << \" \" << std::get<2>(c0);   \n    std::cout << \" \" << std::get<3>(c0);   \n    std::cout << std::endl;   \n  \n// display results of comparisons   \n    std::cout << std::boolalpha << \" \" << (c0 < c0);   \n    std::cout << std::endl;   \n    std::cout << std::boolalpha << \" \" << (c0 < c1);   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n0 1 2 3  \nfalse  \ntrue  \n```  \n  \n##  <a name=\"operator_lt__eq\"></a>  operator&lt;=  \n Compare `tuple` objects for less or equal.  \n  \n```  \ntemplate <class T1, class T2, ..., class TN,  \n    class U1, class U2, ..., class UN>  \nbool operator<=(const tuple<T1, T2, ..., TN>& tpl1,  \n    const tuple<U1, U2, ..., UN>& tpl2);\n```  \n  \n### Parameters  \n `TN`  \n The type of the Nth tuple element.  \n  \n### Remarks  \n The function returns `!(tpl2 < tpl1)`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__tuple__operator_le.cpp   \n// compile with: /EHsc   \n#include <tuple>   \n#include <iostream>   \n  \ntypedef std::tuple<int, double, int, double> Mytuple;   \nint main()   \n    {   \n    Mytuple c0(0, 1, 2, 3);   \n  \n// display contents \" 0 1 2 3\"   \n    std::cout << \" \" << std::get<0>(c0);   \n    std::cout << \" \" << std::get<1>(c0);   \n    std::cout << \" \" << std::get<2>(c0);   \n    std::cout << \" \" << std::get<3>(c0);   \n    std::cout << std::endl;   \n  \n    Mytuple c1 = std::make_tuple(4, 5, 6, 7);   \n  \n// display contents \" 4 5 6 7\"   \n    std::cout << \" \" << std::get<0>(c0);   \n    std::cout << \" \" << std::get<1>(c0);   \n    std::cout << \" \" << std::get<2>(c0);   \n    std::cout << \" \" << std::get<3>(c0);   \n    std::cout << std::endl;   \n  \n// display results of comparisons   \n    std::cout << std::boolalpha << \" \" << (c0 <= c0);   \n    std::cout << std::endl;   \n    std::cout << std::boolalpha << \" \" << (c1 <= c0);   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n0 1 2 3  \ntrue  \nfalse  \n```  \n  \n##  <a name=\"operator_eq_eq\"></a>  operator==  \n Compare `tuple` objects for equality.  \n  \n```  \ntemplate <class T1, class T2, ..., class TN,  \n    class U1, class U2, ..., class UN>  \nbool operator==(const tuple<T1, T2, ..., TN>& tpl1,  \n    const tuple<U1, U2, ..., UN>& tpl2);\n```  \n  \n### Parameters  \n `TN`  \n The type of the Nth tuple element.  \n  \n### Remarks  \n The function returns true when `N` is 0, otherwise `get<0>(tpl1) == get<0>(tpl2) && get<1>(tpl1) == get<1>(tpl2) && ... && get<N - 1>(tpl1) == get<N - 1>(tpl2)`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__tuple__operator_eq.cpp   \n// compile with: /EHsc   \n#include <tuple>   \n#include <iostream>   \n  \ntypedef std::tuple<int, double, int, double> Mytuple;   \nint main()   \n    {   \n    Mytuple c0(0, 1, 2, 3);   \n  \n// display contents \" 0 1 2 3\"   \n    std::cout << \" \" << std::get<0>(c0);   \n    std::cout << \" \" << std::get<1>(c0);   \n    std::cout << \" \" << std::get<2>(c0);   \n    std::cout << \" \" << std::get<3>(c0);   \n    std::cout << std::endl;   \n  \n    Mytuple c1 = std::make_tuple(4, 5, 6, 7);   \n  \n// display contents \" 4 5 6 7\"   \n    std::cout << \" \" << std::get<0>(c0);   \n    std::cout << \" \" << std::get<1>(c0);   \n    std::cout << \" \" << std::get<2>(c0);   \n    std::cout << \" \" << std::get<3>(c0);   \n    std::cout << std::endl;   \n  \n// display results of comparisons   \n    std::cout << std::boolalpha << \" \" << (c0 == c0);   \n    std::cout << std::endl;   \n    std::cout << std::boolalpha << \" \" << (c0 == c1);   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n0 1 2 3  \ntrue  \nfalse  \n```  \n  \n##  <a name=\"operator_gt_\"></a>  operator&gt;  \n Compare `tuple` objects for greater.  \n  \n```  \ntemplate <class T1, class T2, ..., class TN,  \n    class U1, class U2, ..., class UN>  \nbool operator>(const tuple<T1, T2, ..., TN>& tpl1,  \n    const tuple<U1, U2, ..., UN>& tpl2);\n```  \n  \n### Parameters  \n `TN`  \n The type of the Nth tuple element.  \n  \n### Remarks  \n The function returns `tpl2 < tpl1`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__tuple__operator_gt.cpp   \n// compile with: /EHsc   \n#include <tuple>   \n#include <iostream>   \n  \ntypedef std::tuple<int, double, int, double> Mytuple;   \nint main()   \n    {   \n    Mytuple c0(0, 1, 2, 3);   \n  \n// display contents \" 0 1 2 3\"   \n    std::cout << \" \" << std::get<0>(c0);   \n    std::cout << \" \" << std::get<1>(c0);   \n    std::cout << \" \" << std::get<2>(c0);   \n    std::cout << \" \" << std::get<3>(c0);   \n    std::cout << std::endl;   \n  \n    Mytuple c1 = std::make_tuple(4, 5, 6, 7);   \n  \n// display contents \" 4 5 6 7\"   \n    std::cout << \" \" << std::get<0>(c0);   \n    std::cout << \" \" << std::get<1>(c0);   \n    std::cout << \" \" << std::get<2>(c0);   \n    std::cout << \" \" << std::get<3>(c0);   \n    std::cout << std::endl;   \n  \n// display results of comparisons   \n    std::cout << std::boolalpha << \" \" << (c0 > c0);   \n    std::cout << std::endl;   \n    std::cout << std::boolalpha << \" \" << (c1 > c0);   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n0 1 2 3  \nfalse  \ntrue  \n```  \n  \n##  <a name=\"operator_gt__eq\"></a>  operator&gt;=  \n Compare `tuple` objects for greater or equal.  \n  \n```  \ntemplate <class T1, class T2, ..., class TN,  \n    class U1, class U2, ..., class UN>  \nbool operator>=(const tuple<T1, T2, ..., TN>& tpl1,  \n    const tuple<U1, U2, ..., UN>& tpl2);\n```  \n  \n### Parameters  \n `TN`  \n The type of the Nth tuple element.  \n  \n### Remarks  \n The function returns `!(tpl1 < tpl2)`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__tuple__operator_ge.cpp   \n// compile with: /EHsc   \n#include <tuple>   \n#include <iostream>   \n  \ntypedef std::tuple<int, double, int, double> Mytuple;   \nint main()   \n    {   \n    Mytuple c0(0, 1, 2, 3);   \n  \n// display contents \" 0 1 2 3\"   \n    std::cout << \" \" << std::get<0>(c0);   \n    std::cout << \" \" << std::get<1>(c0);   \n    std::cout << \" \" << std::get<2>(c0);   \n    std::cout << \" \" << std::get<3>(c0);   \n    std::cout << std::endl;   \n  \n    Mytuple c1 = std::make_tuple(4, 5, 6, 7);   \n  \n// display contents \" 4 5 6 7\"   \n    std::cout << \" \" << std::get<0>(c0);   \n    std::cout << \" \" << std::get<1>(c0);   \n    std::cout << \" \" << std::get<2>(c0);   \n    std::cout << \" \" << std::get<3>(c0);   \n    std::cout << std::endl;   \n  \n// display results of comparisons   \n    std::cout << std::boolalpha << \" \" << (c0 >= c0);   \n    std::cout << std::endl;   \n    std::cout << std::boolalpha << \" \" << (c0 >= c1);   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n0 1 2 3  \ntrue  \nfalse  \n```  \n  \n## See Also  \n [\\<tuple>](../standard-library/tuple.md)\n\n"}