<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">21564339b8ce5bc389eee3af2c3ff6c0c7c110bf</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\windows\handle-to-object-operator-hat-cpp-component-extensions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f735fe42e65457700213eaf360303ec3ce47826f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5d17a16223227823a9ad35bdd74ddcedcd74141e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Handle to Object Operator (^)  (C++ Component Extensions) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Handle to Object Operator (^)  (C++ Component Extensions)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>handle declarator<ept id="p1">*</ept> (<ph id="ph1">`^`</ph>, pronounced "hat"), modifies the type <bpt id="p2">[</bpt>specifier<ept id="p2">](../cpp/overview-of-declarators.md)</ept> to mean that the declared object should be automatically deleted when the system determines that the object is no longer accessible.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Accessing the Declared Object</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A variable that is declared with the handle declarator behaves like a pointer to the object.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>However, the variable points to the entire object, cannot point to a member of the object, and it does not support pointer arithmetic.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Use the indirection operator (<ph id="ph1">`*`</ph>) to access the object, and the arrow member-access operator (<ph id="ph2">`-&gt;`</ph>) to access a member of the object.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The compiler uses the COM <bpt id="p1">*</bpt>reference counting<ept id="p1">*</ept> mechanism to determine if the object is no longer being used and can be deleted.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This is possible because an object that is derived from a Windows Runtime interface is actually a COM object.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The reference count is incremented when the object is created or copied, and decremented when the object is set to null or goes out of scope.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If the reference count goes to zero, the object is automatically and immediately deleted.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The advantage of the handle declarator is that in COM you must explicitly manage the reference count for an object, which is a tedious and error prone process.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>That is, to increment and decrement the reference count you must call the object's AddRef() and Release() methods.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>However, if you declare an object with the handle declarator, the Visual C++ compiler generates code that automatically adjusts the reference count.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For information on how to instantiate an object, see <bpt id="p1">[</bpt>ref new<ept id="p1">](../windows/ref-new-gcnew-cpp-component-extensions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Compiler option: <bpt id="p1">**</bpt>/ZW<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The system uses the CLR <bpt id="p1">*</bpt>garbage collector<ept id="p1">*</ept> mechanism to determine if the object is no longer being used and can be deleted.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The common language runtime maintains a heap on which it allocates objects, and uses managed references (variables) in your program indicate the location of objects on the heap.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When an object is no longer used, the memory that it occupied on the heap is freed.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Periodically, the garbage collector compacts the heap to better use the freed memory.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Compacting the heap can move objects on the heap, which invalidates the locations refered to by managed references.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>However, the garbage collector is aware of the location of all managed references, and automatically updates them to indicate the current location of the objects on the heap.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Because native C++ pointers (<ph id="ph1">`*`</ph>) and references (<ph id="ph2">`&amp;`</ph>) are not managed references, the garbage collector cannot automatically update the addresses they point to.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To solve this problem, use the handle declarator to specify a variable that the garbage collector is aware of and can update automatically.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In Visual C++ 2002 and Visual C++ 2003, <ph id="ph1">`__gc *`</ph> was used to declare an object on the managed heap.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`^`</ph> replaces <ph id="ph2">`__gc *`</ph> in the new syntax.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Declare Handles in Native Types<ept id="p1">](../dotnet/how-to-declare-handles-in-native-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This sample shows how to create an instance of a reference type on the managed heap.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This sample also shows that you can initialize one handle with another, resulting in two references to same object on managed, garbage-collected heap.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Notice that assigning <bpt id="p1">[</bpt>nullptr<ept id="p1">](../windows/nullptr-cpp-component-extensions.md)</ept> to one handle does not mark the object for garbage collection.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following sample shows how to declare a handle to an object on the managed heap, where the type of object is a boxed value type.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The sample also shows how to get the value type from the boxed object.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This sample shows that the common C++ idiom of using a void* pointer to point to an arbitrary object is replaced by Object^, which can hold a handle to any reference class.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>It also shows that all types, such as arrays and delegates, can be converted to an object handle.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This sample shows that a handle can be dereferenced and that a member can be accessed via a dereferenced handle.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This sample shows that a native reference (<ph id="ph1">`&amp;`</ph>) can’t bind to an <ph id="ph2">`int`</ph> member of a managed type, as the <ph id="ph3">`int`</ph> might be stored in the garbage collected heap, and native references don’t track object movement in the managed heap.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The fix is to use a local variable, or to change <ph id="ph1">`&amp;`</ph> to <ph id="ph2">`%`</ph>, making it a tracking reference.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Compiler option: <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Component Extensions for Runtime Platforms</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Tracking Reference Operator</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>