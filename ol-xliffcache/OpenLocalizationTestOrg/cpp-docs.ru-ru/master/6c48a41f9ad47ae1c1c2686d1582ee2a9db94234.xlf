<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6c48a41f9ad47ae1c1c2686d1582ee2a9db94234</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\typedef-declarations.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">93c27f0dbc6492f07a220c7cc1cbe5214d0f2b9a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">72f9c18d627858c19c3261bba2d1466dab7fe694</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Typedef Declarations | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Typedef Declarations</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A typedef declaration is a declaration with typedef as the storage class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The declarator becomes a new type.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can use typedef declarations to construct shorter or more meaningful names for types already defined by C or for types that you have declared.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Typedef names allow you to encapsulate implementation details that may change.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A typedef declaration is interpreted in the same way as a variable or function declaration, but the identifier, instead of assuming the type specified by the declaration, becomes a synonym for the type.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> *</bpt>declaration-specifiers init-declarator-list<ept id="p1">*</ept> opt<bpt id="p2">**</bpt>;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>declaration-specifiers<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> *</bpt>storage-class-specifier declaration-specifiers<ept id="p1">*</ept> opt</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>type-specifier declaration-specifiers<ept id="p1">*</ept> opt</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>type-qualifier declaration-specifiers<ept id="p1">*</ept> opt</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>storage-class-specifier<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>type-specifier<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>void</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>char</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>short</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>int</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>long</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>float</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>double</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>signed</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>unsigned</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>struct-or-union-specifier</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>enum-specifier</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>typedef-name</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>typedef-name<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>identifier</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Note that a typedef declaration does not create types.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>It creates synonyms for existing types, or names for types that could be specified in other ways.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>When a typedef name is used as a type specifier, it can be combined with certain type specifiers, but not others.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Acceptable modifiers include <bpt id="p1">**</bpt>const<ept id="p1">**</ept> and <ph id="ph1">`volatile`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Typedef names share the name space with ordinary identifiers (see <bpt id="p1">[</bpt>Name Spaces<ept id="p1">](../c-language/name-spaces.md)</ept> for more information).</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Therefore, a program can have a typedef name and a local-scope identifier by the same name.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When declaring a local-scope identifier by the same name as a typedef, or when declaring a member of a structure or union in the same scope or in an inner scope, the type specifier must be specified.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This example illustrates this constraint:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To reuse the <ph id="ph1">`FlagType`</ph> name for an identifier, a structure member, or a union member, the type must be provided:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>It is not sufficient to say</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>because the <ph id="ph1">`FlagType`</ph> is taken to be part of the type, not an identifier that is being redeclared.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This declaration is taken to be an illegal declaration like</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You can declare any type with typedef, including pointer, function, and array types.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can declare a typedef name for a pointer to a structure or union type before you define the structure or union type, as long as the definition has the same visibility as the declaration.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Typedef names can be used to improve code readability.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>All three of the following declarations of <ph id="ph1">`signal`</ph> specify exactly the same type, the first without making use of any typedef names.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The following examples illustrate typedef declarations:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Note that <ph id="ph1">`WHOLE`</ph> could now be used in a variable declaration such as <ph id="ph2">`WHOLE i;`</ph> or <ph id="ph3">`const WHOLE i;`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>However, the declaration <ph id="ph1">`long WHOLE i;`</ph> would be illegal.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This statement declares <ph id="ph1">`GROUP`</ph> as a structure type with three members.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Since a structure tag, <ph id="ph1">`club`</ph>, is also specified, either the typedef name (<ph id="ph2">`GROUP`</ph>) or the structure tag can be used in declarations.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You must use the struct keyword with the tag, and you cannot use the struct keyword with the typedef name.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The type <ph id="ph1">`PG`</ph> is declared as a pointer to the <ph id="ph2">`GROUP`</ph> type, which in turn is defined as a structure type.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This example provides the type <ph id="ph1">`DRAWF`</ph> for a function returning no value and taking two int arguments.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This means, for example, that the declaration</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>is equivalent to the declaration</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>(NOTINBUILD)typedef Specifier</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>