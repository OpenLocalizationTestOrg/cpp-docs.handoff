{"nodes":[{"pos":[12,62],"content":"Additional Startup Considerations | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Additional Startup Considerations | Microsoft Docs","pos":[0,50]}]},{"content":"Additional Startup Considerations","pos":[653,686]},{"content":"In C++, object construction and destruction can involve executing user code.","pos":[687,763]},{"content":"Therefore, it is important to understand which initializations happen before entry to <bpt id=\"p1\">**</bpt>main<ept id=\"p1\">**</ept> and which destructors are invoked after exit from <bpt id=\"p2\">**</bpt>main<ept id=\"p2\">**</ept>.","pos":[764,918],"source":" Therefore, it is important to understand which initializations happen before entry to **main** and which destructors are invoked after exit from **main**."},{"content":"(For detailed information about construction and destruction of objects, see <bpt id=\"p1\">[</bpt>Constructors<ept id=\"p1\">](../cpp/constructors-cpp.md)</ept> and <bpt id=\"p2\">[</bpt>Destructors<ept id=\"p2\">](../cpp/destructors-cpp.md)</ept>.)","pos":[919,1085],"source":" (For detailed information about construction and destruction of objects, see [Constructors](../cpp/constructors-cpp.md) and [Destructors](../cpp/destructors-cpp.md).)"},{"pos":[1092,1160],"content":"The following initializations take place prior to entry to <bpt id=\"p1\">**</bpt>main<ept id=\"p1\">**</ept>:","source":"The following initializations take place prior to entry to **main**:"},{"content":"Default initialization of static data to zero.","pos":[1170,1216]},{"content":"All static data without explicit initializers are set to zero prior to executing any other code, including run-time initialization.","pos":[1217,1348]},{"content":"Static data members must still be explicitly defined.","pos":[1349,1402]},{"content":"Initialization of global static objects in a translation unit.","pos":[1412,1474]},{"content":"This may occur either before entry to <bpt id=\"p1\">**</bpt>main<ept id=\"p1\">**</ept> or before the first use of any function or object in the object's translation unit.","pos":[1475,1605],"source":" This may occur either before entry to **main** or before the first use of any function or object in the object's translation unit."},{"content":"Microsoft Specific","pos":[1614,1632]},{"pos":[1641,1722],"content":"In Microsoft C++, global static objects are initialized before entry to <bpt id=\"p1\">**</bpt>main<ept id=\"p1\">**</ept>.","source":"In Microsoft C++, global static objects are initialized before entry to **main**."},{"content":"END Microsoft Specific","pos":[1731,1753]},{"content":"Global static objects that are mutually interdependent but in different translation units may cause incorrect behavior.","pos":[1762,1881]},{"content":"See Also","pos":[1890,1898]},{"content":"Startup and Termination","pos":[1903,1926]}],"content":"---\ntitle: \"Additional Startup Considerations | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"program startup [C++]\"\n  - \"startup code\"\n  - \"initializing before main\"\nms.assetid: 0e942aa6-8342-447c-b068-8980ed7622bd\ncaps.latest.revision: 6\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Additional Startup Considerations\nIn C++, object construction and destruction can involve executing user code. Therefore, it is important to understand which initializations happen before entry to **main** and which destructors are invoked after exit from **main**. (For detailed information about construction and destruction of objects, see [Constructors](../cpp/constructors-cpp.md) and [Destructors](../cpp/destructors-cpp.md).)  \n  \n The following initializations take place prior to entry to **main**:  \n  \n-   Default initialization of static data to zero. All static data without explicit initializers are set to zero prior to executing any other code, including run-time initialization. Static data members must still be explicitly defined.  \n  \n-   Initialization of global static objects in a translation unit. This may occur either before entry to **main** or before the first use of any function or object in the object's translation unit.  \n  \n **Microsoft Specific**  \n  \n In Microsoft C++, global static objects are initialized before entry to **main**.  \n  \n **END Microsoft Specific**  \n  \n Global static objects that are mutually interdependent but in different translation units may cause incorrect behavior.  \n  \n## See Also  \n [Startup and Termination](../cpp/startup-and-termination-cpp.md)"}