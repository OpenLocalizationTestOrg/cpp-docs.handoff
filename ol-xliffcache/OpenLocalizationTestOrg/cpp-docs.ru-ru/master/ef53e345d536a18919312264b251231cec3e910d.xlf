<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ef53e345d536a18919312264b251231cec3e910d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\csocketfile-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3ad903f3b995bb04677370df0074f7d638d17193</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e3b62ba93aa44806fe239202aef76450c762c586</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CSocketFile Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CSocketFile Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CFile`</ph> object used for sending and receiving data across a network via Windows Sockets.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CSocketFile::CSocketFile</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CSocketFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can attach the <ph id="ph1">`CSocketFile`</ph> object to a <ph id="ph2">`CSocket`</ph> object for this purpose.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You also can, and usually do, attach the <ph id="ph1">`CSocketFile`</ph> object to a <ph id="ph2">`CArchive`</ph> object to simplify sending and receiving data using MFC serialization.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To serialize (send) data, you insert it into the archive, which calls <ph id="ph1">`CSocketFile`</ph> member functions to write data to the <ph id="ph2">`CSocket`</ph> object.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To deserialize (receive) data, you extract from the archive.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This causes the archive to call <ph id="ph1">`CSocketFile`</ph> member functions to read data from the <ph id="ph2">`CSocket`</ph> object.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Besides using <ph id="ph1">`CSocketFile`</ph> as described here, you can use it as a stand-alone file object, just as you can with <ph id="ph2">`CFile`</ph>, its base class.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can also use <ph id="ph1">`CSocketFile`</ph> with any archive-based MFC serialization functions.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`CSocketFile`</ph> does not support all of <ph id="ph2">`CFile`</ph>'s functionality, some default MFC serialize functions are not compatible with <ph id="ph3">`CSocketFile`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This is particularly true of the <ph id="ph1">`CEditView`</ph> class.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You should not try to serialize <ph id="ph1">`CEditView`</ph> data through a <ph id="ph2">`CArchive`</ph> object attached to a <ph id="ph3">`CSocketFile`</ph> object using <ph id="ph4">`CEditView::SerializeRaw`</ph>; use <bpt id="p1">**</bpt>CEditView::Serialize<ept id="p1">**</ept> instead.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SerializeRaw`</ph> function expects the file object to have functions, such as <ph id="ph2">`Seek`</ph>, that <ph id="ph3">`CSocketFile`</ph> does not have.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When you use <ph id="ph1">`CArchive`</ph> with <ph id="ph2">`CSocketFile`</ph> and <ph id="ph3">`CSocket`</ph>, you might encounter a situation where <bpt id="p1">**</bpt>CSocket::Receive<ept id="p1">**</ept> enters a loop (by <bpt id="p2">**</bpt>PumpMessages(FD_READ)<ept id="p2">**</ept>) waiting for the requested amount of bytes.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This is because Windows sockets allow only one recv call per FD_READ notification, but <ph id="ph1">`CSocketFile`</ph> and <ph id="ph2">`CSocket`</ph> allow multiple recv calls per FD_READ.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you get an FD_READ when there is no data to read, the application hangs.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you never get another FD_READ, the application stops communicating over the socket.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can resolve this problem as follows.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`OnReceive`</ph> method of your socket class, call <bpt id="p1">**</bpt>CAsyncSocket::IOCtl(FIONREAD, ...)<ept id="p1">**</ept> before you call the <ph id="ph2">`Serialize`</ph> method of your message class when the expected data to be read from the socket exceeds the size of one TCP packet (maximum transmission unit of the network medium, usually at least 1096 bytes).</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If the size of the available data is less than needed, wait for all the data to be received and only then start the read operation.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In the following example, <ph id="ph1">`m_dwExpected`</ph> is the approximate number of bytes that the user expects to receive.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>It is assumed that you declare it elsewhere in your code.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>NVC_MFCSocketThread#4</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Windows Sockets in MFC<ept id="p1">](../../mfc/windows-sockets-in-mfc.md)</ept>, <bpt id="p2">[</bpt>Windows Sockets: Using Sockets with Archives<ept id="p2">](../../mfc/windows-sockets-using-sockets-with-archives.md)</ept>, as well as <bpt id="p3">[</bpt>Windows Sockets 2 API<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms740673)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>CFile</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxsock.h</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>CSocketFile::CSocketFile</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CSocketFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The socket to attach to the <ph id="ph1">`CSocketFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Specifies whether the file object is for use with a <ph id="ph1">`CArchive`</ph> object.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Pass <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> only if you want to use the <ph id="ph1">`CSocketFile`</ph> object in a stand-alone manner as you would a stand-alone <ph id="ph2">`CFile`</ph> object, with certain limitations.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This flag changes how the <ph id="ph1">`CArchive`</ph> object attached to the <ph id="ph2">`CSocketFile`</ph> object manages its buffer for reading.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The object's destructor disassociates itself from the socket object when the object goes out of scope or is deleted.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CSocketFile`</ph> can also be used as a (limited) file without a <ph id="ph2">`CArchive`</ph> object.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>By default, the <ph id="ph1">`CSocketFile`</ph> constructor's <ph id="ph2">`bArchiveCompatible`</ph> parameter is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This specifies that the file object is for use with an archive.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>To use the file object without an archive, pass <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> in the <ph id="ph1">`bArchiveCompatible`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In its "archive compatible" mode, a <ph id="ph1">`CSocketFile`</ph> object provides better performance and reduces the danger of a "deadlock."</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A deadlock occurs when both the sending and receiving sockets are waiting on each other, or for a common resource.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This situation might occur if the <ph id="ph1">`CArchive`</ph> object worked with the <ph id="ph2">`CSocketFile`</ph> the way it does with a <ph id="ph3">`CFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>With <ph id="ph1">`CFile`</ph>, the archive can assume that if it receives fewer bytes than it requested, the end of file has been reached.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>With <ph id="ph1">`CSocketFile`</ph>, however, data is message based; the buffer can contain multiple messages, so receiving fewer than the number of bytes requested does not imply end of file.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The application does not block in this case as it might with <ph id="ph1">`CFile`</ph>, and it can continue reading messages from the buffer until the buffer is empty.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CArchive::IsBufferEmpty<ept id="p1">](../../mfc/reference/carchive-class.md#carchive__isbufferempty)</ept> function is useful for monitoring the state of the archive's buffer in such a case.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For more information on the use of <ph id="ph1">`CSocketFile`</ph>, see the articles <bpt id="p1">[</bpt>Windows Sockets: Using Sockets with Archives<ept id="p1">](../../mfc/windows-sockets-using-sockets-with-archives.md)</ept> and <bpt id="p2">[</bpt>Windows Sockets: Example of Sockets Using Archives<ept id="p2">](../../mfc/windows-sockets-example-of-sockets-using-archives.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>CFile Class</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>CAsyncSocket Class</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>CSocket Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>