{"nodes":[{"pos":[12,60],"content":"_com_ptr_t Relational Operators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_com_ptr_t Relational Operators | Microsoft Docs","pos":[0,48]}]},{"content":"_com_ptr_t Relational Operators","pos":[1541,1572]},{"content":"Microsoft Specific","pos":[1575,1593]},{"pos":[1602,1696],"content":"Compare the smart pointer object to another smart pointer, raw interface pointer, or <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"Compare the smart pointer object to another smart pointer, raw interface pointer, or **NULL**."},{"content":"Syntax","pos":[1705,1711]},{"content":"Remarks","pos":[3796,3803]},{"content":"Compares a smart pointer object to another smart pointer, raw interface pointer, or <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[3807,3900],"source":"Compares a smart pointer object to another smart pointer, raw interface pointer, or **NULL**."},{"content":"Except for the <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> pointer tests, these operators first query both pointers for <bpt id=\"p2\">**</bpt>IUnknown<ept id=\"p2\">**</ept>, and compare the results.","pos":[3901,4024],"source":" Except for the **NULL** pointer tests, these operators first query both pointers for **IUnknown**, and compare the results."},{"content":"END Microsoft Specific","pos":[4033,4055]},{"content":"See Also","pos":[4066,4074]},{"content":"_com_ptr_t Class","pos":[4079,4095]}],"content":"---\ntitle: \"_com_ptr_t Relational Operators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"_com_ptr_t::operator>\"\n  - \"_com_ptr_t::operator>=\"\n  - \"_com_ptr_t.operator<=\"\n  - \"_com_ptr_t.operator!=\"\n  - \"_com_ptr_t::operator<=\"\n  - \"_com_ptr_t.operator>\"\n  - \"_com_ptr_t.operator<\"\n  - \"_com_ptr_t.operator==\"\n  - \"_com_ptr_t::operator==\"\n  - \"_com_ptr_t.operator>=\"\n  - \"_com_ptr_t::operator!=\"\n  - \"_com_ptr_t::operator<\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \">= operator, comparing specific objects\"\n  - \"!= operator\"\n  - \"operator >, pointers\"\n  - \"operator>=, pointers\"\n  - \"operator <, pointers\"\n  - \"operator!=, relational operators\"\n  - \"< operator, comparing specific objects\"\n  - \"operator==, pointers\"\n  - \"operator ==, pointers\"\n  - \"<= operator, with specific objects\"\n  - \"relational operators, _com_ptr_t class\"\n  - \"operator >=, pointers\"\n  - \"operator !=, relational operators\"\n  - \"operator <=, pointers\"\n  - \"> operator, comparing specific objects\"\n  - \"operator<=, pointers\"\n  - \"operator<, pointers\"\n  - \"== operator, with specific Visual C++ objects\"\nms.assetid: 5ae4028c-33ee-485d-bbda-88d2604d6d4b\ncaps.latest.revision: 6\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _com_ptr_t Relational Operators\n**Microsoft Specific**  \n  \n Compare the smart pointer object to another smart pointer, raw interface pointer, or **NULL**.  \n  \n## Syntax  \n  \n```  \n  \n      template<typename _OtherIID>   \nbool operator==(   \n   const _com_ptr_t<_OtherIID>& p   \n);  \n  \ntemplate<typename _OtherIID>    \nbool operator==(   \n   _com_ptr_t<_OtherIID>& p   \n);  \n  \ntemplate<typename _InterfaceType>   \nbool operator==(   \n   _InterfaceType* p   \n);  \n  \ntemplate<>   \nbool operator==(   \n   Interface* p   \n);  \n  \ntemplate<>   \nbool operator==(   \n   const _com_ptr_t& p   \n) throw();  \n  \ntemplate<>   \nbool operator==(   \n   _com_ptr_t& p   \n) throw();  \n  \nbool operator==(   \n   int null   \n);  \n```  \n  \n```  \n  \n      template<typename _OtherIID>   \nbool operator!=(   \n   const _com_ptr_t<_OtherIID>& p   \n);  \n  \ntemplate<typename _OtherIID>   \nbool operator!=(   \n   _com_ptr_t<_OtherIID>& p   \n);  \n  \ntemplate<typename _InterfaceType>   \nbool operator!=(   \n   _InterfaceType* p   \n);  \n  \nbool operator!=(   \n   int null   \n);  \n```  \n  \n```  \n  \n      template<typename _OtherIID>   \nbool operator<(   \n   const _com_ptr_t<_OtherIID>& p   \n);  \n  \ntemplate<typename _OtherIID>   \nbool operator<(   \n   _com_ptr_t<_OtherIID>& p   \n);  \n  \ntemplate<typename _InterfaceType>   \nbool operator<(   \n   _InterfaceType* p   \n);  \n```  \n  \n```  \n  \n      template<typename _OtherIID>   \nbool operator>(   \n   const _com_ptr_t<_OtherIID>& p   \n);  \n  \ntemplate<typename _OtherIID>   \nbool operator>(_com_ptr_t<   \n   _OtherIID>& p   \n);  \n  \ntemplate<typename _InterfaceType>   \nbool operator>(   \n   _InterfaceType* p   \n);  \n```  \n  \n```  \n  \n      template<typename _OtherIID>   \nbool operator<=(   \n   const _com_ptr_t<_OtherIID>& p   \n);  \n  \ntemplate<typename _OtherIID>   \nbool operator<=(   \n   _com_ptr_t<_OtherIID>& p   \n);  \n  \ntemplate<typename _InterfaceType>   \nbool operator<=(   \n   _InterfaceType* p   \n);  \n```  \n  \n```  \n  \n      template<typename _OtherIID>   \nbool operator>=(   \n   const _com_ptr_t<_OtherIID>& p   \n);  \n  \ntemplate<typename _OtherIID>   \nbool operator>=(   \n   _com_ptr_t<_OtherIID>& p   \n);  \n  \ntemplate<typename _InterfaceType>   \nbool operator>=(   \n   _InterfaceType* p   \n);  \n```  \n  \n## Remarks  \n Compares a smart pointer object to another smart pointer, raw interface pointer, or **NULL**. Except for the **NULL** pointer tests, these operators first query both pointers for **IUnknown**, and compare the results.  \n  \n **END Microsoft Specific**  \n  \n## See Also  \n [_com_ptr_t Class](../cpp/com-ptr-t-class.md)"}