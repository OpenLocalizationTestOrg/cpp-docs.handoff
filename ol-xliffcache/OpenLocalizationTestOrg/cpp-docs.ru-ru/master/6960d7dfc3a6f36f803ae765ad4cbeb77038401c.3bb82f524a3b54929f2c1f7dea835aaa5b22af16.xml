{"nodes":[{"pos":[12,55],"content":"&lt;hash_map&gt; operators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"hash_map<ph id=\"ph1\">&amp;gt;</ph> operators | Microsoft Docs","pos":[4,43],"source":"hash_map&gt; operators | Microsoft Docs"}]},{"content":"hash_map<ph id=\"ph1\">&amp;gt;</ph> operators","pos":[262,284],"source":"hash_map&gt; operators"},{"content":"operator!=","pos":[304,314]},{"content":"operator!= (hash_map)","pos":[332,353]},{"content":"operator==","pos":[382,392]},{"content":"operator== (hash_map)","pos":[416,437]},{"pos":[517,538],"content":"operator!= (hash_map)"},{"pos":[546,664],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_map Class](../standard-library/unordered-map-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_map Class](../standard-library/unordered-map-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_map Class<ept id=\"p1\">](../standard-library/unordered-map-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_map Class](../standard-library/unordered-map-class.md)."}]}]},{"content":"Tests if the hash_map object on the left side of the operator is not equal to the hash_map object on the right side.","pos":[671,787]},{"content":"Parameters","pos":[936,946]},{"content":"An object of type <ph id=\"ph1\">`hash_map`</ph>.","pos":[961,990],"source":" An object of type `hash_map`."},{"content":"An object of type <ph id=\"ph1\">`hash_map`</ph>.","pos":[1009,1038],"source":" An object of type `hash_map`."},{"content":"Return Value","pos":[1048,1060]},{"pos":[1064,1138],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the hash_maps are not equal; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if hash_maps are equal.","source":"**true** if the hash_maps are not equal; **false** if hash_maps are equal."},{"content":"Remarks","pos":[1148,1155]},{"content":"The comparison between hash_map objects is based on a pairwise comparison of their elements.","pos":[1159,1251]},{"content":"Two hash_maps are equal if they have the same number of elements and their respective elements have the same values.","pos":[1252,1368]},{"content":"Otherwise, they are unequal.","pos":[1369,1397]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[1404,1642],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[1643,1732],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"content":"Example","pos":[1742,1749]},{"pos":[2702,2723],"content":"operator== (hash_map)"},{"pos":[2731,2849],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_map Class](../standard-library/unordered-map-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_map Class](../standard-library/unordered-map-class.md).","pos":[8,116],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_map Class<ept id=\"p1\">](../standard-library/unordered-map-class.md)</ept>.","pos":[23,108],"source":" The alternative is [unordered_map Class](../standard-library/unordered-map-class.md)."}]}]},{"content":"Tests if the hash_map object on the left side of the operator is equal to the hash_map object on the right side.","pos":[2856,2968]},{"content":"Parameters","pos":[3117,3127]},{"content":"An object of type <ph id=\"ph1\">`hash_map`</ph>.","pos":[3142,3171],"source":" An object of type `hash_map`."},{"content":"An object of type <ph id=\"ph1\">`hash_map`</ph>.","pos":[3190,3219],"source":" An object of type `hash_map`."},{"content":"Return Value","pos":[3229,3241]},{"pos":[3245,3383],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the hash_map on the left side of the operator is equal to the hash_map on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the hash_map on the left side of the operator is equal to the hash_map on the right side of the operator; otherwise **false**."},{"content":"Remarks","pos":[3393,3400]},{"content":"The comparison between hash_map objects is based on a pairwise comparison of their elements.","pos":[3404,3496]},{"content":"Two hash_maps are equal if they have the same number of elements and their respective elements have the same values.","pos":[3497,3613]},{"content":"Otherwise, they are unequal.","pos":[3614,3642]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[3649,3887],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[3888,3977],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"content":"Example","pos":[3987,3994]},{"pos":[4934,4944],"content":"operator!="},{"pos":[4952,5080],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"Tests if the hash_multimap object on the left side of the operator is not equal to the hash_multimap object on the right side.","pos":[5087,5213]},{"content":"Parameters","pos":[5372,5382]},{"content":"An object of type <ph id=\"ph1\">`hash_multimap`</ph>.","pos":[5397,5431],"source":" An object of type `hash_multimap`."},{"content":"An object of type <ph id=\"ph1\">`hash_multimap`</ph>.","pos":[5450,5484],"source":" An object of type `hash_multimap`."},{"content":"Return Value","pos":[5494,5506]},{"pos":[5510,5594],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the hash_multimaps are not equal; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if hash_multimaps are equal.","source":"**true** if the hash_multimaps are not equal; **false** if hash_multimaps are equal."},{"content":"Remarks","pos":[5604,5611]},{"content":"The comparison between hash_multimap objects is based on a pairwise comparison of their elements.","pos":[5615,5712]},{"content":"Two hash_multimaps are equal if they have the same number of elements and their respective elements have the same values.","pos":[5713,5834]},{"content":"Otherwise, they are unequal.","pos":[5835,5863]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[5870,6108],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[6109,6198],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"content":"Example","pos":[6208,6215]},{"pos":[7197,7207],"content":"operator=="},{"pos":[7215,7343],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"Tests if the hash_multimap object on the left side of the operator is equal to the hash_multimap object on the right side.","pos":[7350,7472]},{"content":"Parameters","pos":[7631,7641]},{"content":"An object of type <ph id=\"ph1\">`hash_multimap`</ph>.","pos":[7656,7690],"source":" An object of type `hash_multimap`."},{"content":"An object of type <ph id=\"ph1\">`hash_multimap`</ph>.","pos":[7709,7743],"source":" An object of type `hash_multimap`."},{"content":"Return Value","pos":[7753,7765]},{"pos":[7769,7917],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the hash_multimap on the left side of the operator is equal to the hash_multimap on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the hash_multimap on the left side of the operator is equal to the hash_multimap on the right side of the operator; otherwise **false**."},{"content":"Remarks","pos":[7927,7934]},{"content":"The comparison between hash_multimap objects is based on a pairwise comparison of their elements.","pos":[7938,8035]},{"content":"Two hash_multimaps are equal if they have the same number of elements and their respective elements have the same values.","pos":[8036,8157]},{"content":"Otherwise, they are unequal.","pos":[8158,8186]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[8193,8431],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[8432,8521],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"content":"Example","pos":[8531,8538]},{"content":"See Also","pos":[9462,9470]},{"content":"&lt;hash_map&gt;","pos":[9475,9485],"source":"<hash_map>"}],"content":"---\ntitle: \"&lt;hash_map&gt; operators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 24b9bb9e-e983-4060-bce5-2c7c8161ee61\ncaps.latest.revision: 13\nmanager: \"ghogen\"\n---\n# &lt;hash_map&gt; operators\n||||  \n|-|-|-|  \n|[operator!=](#operator_neq)|[operator!= (hash_map)](#operator_neq__hash_map_)|[operator==](#operator_eq_eq)|  \n|[operator== (hash_map)](#operator_eq_eq__hash_map_)|  \n  \n##  <a name=\"operator_neq__hash_map_\"></a>  operator!= (hash_map)  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_map Class](../standard-library/unordered-map-class.md).  \n  \n Tests if the hash_map object on the left side of the operator is not equal to the hash_map object on the right side.  \n  \n```  \nbool operator!=(const hash_map <Key, Type, Traits, Allocator>& left, const hash_map <Key, Type, Traits, Allocator>& right);\n```  \n  \n### Parameters  \n ` left`  \n An object of type `hash_map`.  \n  \n ` right`  \n An object of type `hash_map`.  \n  \n### Return Value  \n **true** if the hash_maps are not equal; **false** if hash_maps are equal.  \n  \n### Remarks  \n The comparison between hash_map objects is based on a pairwise comparison of their elements. Two hash_maps are equal if they have the same number of elements and their respective elements have the same values. Otherwise, they are unequal.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_map_op_ne.cpp  \n// compile with: /EHsc  \n#include <hash_map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_map <int, int> hm1, hm2, hm3;  \n   int i;  \n   typedef pair <int, int> Int_Pair;  \n  \n   for ( i = 0 ; i < 3 ; i++ )  \n   {  \n      hm1.insert ( Int_Pair ( i, i ) );  \n      hm2.insert ( Int_Pair ( i, i * i ) );  \n      hm3.insert ( Int_Pair ( i, i ) );  \n   }  \n  \n   if ( hm1 != hm2 )  \n      cout << \"The hash_maps hm1 and hm2 are not equal.\" << endl;  \n   else  \n      cout << \"The hash_maps hm1 and hm2 are equal.\" << endl;  \n  \n   if ( hm1 != hm3 )  \n      cout << \"The hash_maps hm1 and hm3 are not equal.\" << endl;  \n   else  \n      cout << \"The hash_maps hm1 and hm3 are equal.\" << endl;  \n}  \n```  \n  \n```Output  \nThe hash_maps hm1 and hm2 are not equal.  \nThe hash_maps hm1 and hm3 are equal.  \n```  \n  \n##  <a name=\"operator_eq_eq__hash_map_\"></a>  operator== (hash_map)  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_map Class](../standard-library/unordered-map-class.md).  \n  \n Tests if the hash_map object on the left side of the operator is equal to the hash_map object on the right side.  \n  \n```  \nbool operator==(const hash_map <Key, Type, Traits, Allocator>& left, const hash_map <Key, Type, Traits, Allocator>& right);\n```  \n  \n### Parameters  \n ` left`  \n An object of type `hash_map`.  \n  \n ` right`  \n An object of type `hash_map`.  \n  \n### Return Value  \n **true** if the hash_map on the left side of the operator is equal to the hash_map on the right side of the operator; otherwise **false**.  \n  \n### Remarks  \n The comparison between hash_map objects is based on a pairwise comparison of their elements. Two hash_maps are equal if they have the same number of elements and their respective elements have the same values. Otherwise, they are unequal.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_map_op_eq.cpp  \n// compile with: /EHsc  \n#include <hash_map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_map <int, int> hm1, hm2, hm3;  \n   int i;  \n   typedef pair <int, int> Int_Pair;  \n  \n   for ( i = 0 ; i < 3 ; i++ )  \n   {  \n      hm1.insert ( Int_Pair ( i, i ) );  \n      hm2.insert ( Int_Pair ( i, i * i ) );  \n      hm3.insert ( Int_Pair ( i, i ) );  \n   }  \n  \n   if ( hm1 == hm2 )  \n      cout << \"The hash_maps hm1 and hm2 are equal.\" << endl;  \n   else  \n      cout << \"The hash_maps hm1 and hm2 are not equal.\" << endl;  \n  \n   if ( hm1 == hm3 )  \n      cout << \"The hash_maps hm1 and hm3 are equal.\" << endl;  \n   else  \n      cout << \"The hash_maps hm1 and hm3 are not equal.\" << endl;  \n}  \n```  \n  \n```Output  \nThe hash_maps hm1 and hm2 are not equal.  \nThe hash_maps hm1 and hm3 are equal.  \n```  \n  \n##  <a name=\"operator_neq\"></a>  operator!=  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n Tests if the hash_multimap object on the left side of the operator is not equal to the hash_multimap object on the right side.  \n  \n```  \nbool operator!=(const hash_multimap <Key, Type, Traits, Allocator>& left, const hash_multimap <Key, Type, Traits, Allocator>& right);\n```  \n  \n### Parameters  \n ` left`  \n An object of type `hash_multimap`.  \n  \n ` right`  \n An object of type `hash_multimap`.  \n  \n### Return Value  \n **true** if the hash_multimaps are not equal; **false** if hash_multimaps are equal.  \n  \n### Remarks  \n The comparison between hash_multimap objects is based on a pairwise comparison of their elements. Two hash_multimaps are equal if they have the same number of elements and their respective elements have the same values. Otherwise, they are unequal.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_multimap_op_ne.cpp  \n// compile with: /EHsc  \n#include <hash_map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_multimap <int, int> hm1, hm2, hm3;  \n   int i;  \n   typedef pair <int, int> Int_Pair;  \n  \n   for ( i = 0 ; i < 3 ; i++ )  \n   {  \n      hm1.insert ( Int_Pair ( i, i ) );  \n      hm2.insert ( Int_Pair ( i, i * i ) );  \n      hm3.insert ( Int_Pair ( i, i ) );  \n   }  \n  \n   if ( hm1 != hm2 )  \n      cout << \"The hash_multimaps hm1 and hm2 are not equal.\" << endl;  \n   else  \n      cout << \"The hash_multimaps hm1 and hm2 are equal.\" << endl;  \n  \n   if ( hm1 != hm3 )  \n      cout << \"The hash_multimaps hm1 and hm3 are not equal.\" << endl;  \n   else  \n      cout << \"The hash_multimaps hm1 and hm3 are equal.\" << endl;  \n}  \n```  \n  \n```Output  \nThe hash_multimaps hm1 and hm2 are not equal.  \nThe hash_multimaps hm1 and hm3 are equal.  \n```  \n  \n##  <a name=\"operator_eq_eq\"></a>  operator==  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n Tests if the hash_multimap object on the left side of the operator is equal to the hash_multimap object on the right side.  \n  \n```  \nbool operator==(const hash_multimap <Key, Type, Traits, Allocator>& left, const hash_multimap <Key, Type, Traits, Allocator>& right);\n```  \n  \n### Parameters  \n ` left`  \n An object of type `hash_multimap`.  \n  \n ` right`  \n An object of type `hash_multimap`.  \n  \n### Return Value  \n **true** if the hash_multimap on the left side of the operator is equal to the hash_multimap on the right side of the operator; otherwise **false**.  \n  \n### Remarks  \n The comparison between hash_multimap objects is based on a pairwise comparison of their elements. Two hash_multimaps are equal if they have the same number of elements and their respective elements have the same values. Otherwise, they are unequal.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_multimap_op_eq.cpp  \n// compile with: /EHsc  \n#include <hash_map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_multimap<int, int> hm1, hm2, hm3;  \n   int i;  \n   typedef pair<int, int> Int_Pair;  \n  \n   for (i = 0; i < 3; i++)  \n   {  \n      hm1.insert(Int_Pair(i, i));  \n      hm2.insert(Int_Pair(i, i*i));  \n      hm3.insert(Int_Pair(i, i));  \n   }  \n  \n   if ( hm1 == hm2 )  \n      cout << \"The hash_multimaps hm1 and hm2 are equal.\" << endl;  \n   else  \n      cout << \"The hash_multimaps hm1 and hm2 are not equal.\" << endl;  \n  \n   if ( hm1 == hm3 )  \n      cout << \"The hash_multimaps hm1 and hm3 are equal.\" << endl;  \n   else  \n      cout << \"The hash_multimaps hm1 and hm3 are not equal.\" << endl;  \n}  \n```  \n  \n```Output  \nThe hash_multimaps hm1 and hm2 are not equal.  \nThe hash_multimaps hm1 and hm3 are equal.  \n```  \n  \n## See Also  \n [<hash_map>](../standard-library/hash-map.md)\n\n"}