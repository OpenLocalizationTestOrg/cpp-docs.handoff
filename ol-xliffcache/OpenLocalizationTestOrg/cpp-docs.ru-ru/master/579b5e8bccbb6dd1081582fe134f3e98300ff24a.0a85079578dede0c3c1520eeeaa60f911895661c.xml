{"nodes":[{"pos":[12,48],"content":"IAtlStringMgr Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"IAtlStringMgr Class | Microsoft Docs","pos":[0,36]}]},{"content":"IAtlStringMgr Class","pos":[672,691]},{"pos":[692,759],"content":"This class represents the interface to a <ph id=\"ph1\">`CStringT`</ph> memory manager.","source":"This class represents the interface to a `CStringT` memory manager."},{"content":"Syntax","pos":[768,774]},{"content":"Members","pos":[822,829]},{"content":"Methods","pos":[839,846]},{"content":"Allocate","pos":[868,876]},{"content":"Call this method to allocate a new string data structure.","pos":[904,961]},{"content":"Clone","pos":[967,972]},{"pos":[997,1108],"content":"Call this method to return a pointer to a new string manager for use with another instance of <ph id=\"ph1\">`CSimpleStringT`</ph>.","source":"Call this method to return a pointer to a new string manager for use with another instance of `CSimpleStringT`."},{"content":"Free","pos":[1114,1118]},{"content":"Call this method to free a string data structure.","pos":[1142,1191]},{"content":"GetNilString","pos":[1197,1209]},{"pos":[1241,1316],"content":"Returns a pointer to the <ph id=\"ph1\">`CStringData`</ph> object used by empty string objects.","source":"Returns a pointer to the `CStringData` object used by empty string objects."},{"content":"Reallocate","pos":[1322,1332]},{"content":"Call this method to reallocate a string data structure.","pos":[1362,1417]},{"content":"Remarks","pos":[1427,1434]},{"pos":[1438,1735],"content":"This interface manages the memory used by the MFC-independent string classes; such as <bpt id=\"p1\">[</bpt>CSimpleStringT<ept id=\"p1\">](../../atl-mfc-shared/reference/csimplestringt-class.md)</ept>, <bpt id=\"p2\">[</bpt>CStringT<ept id=\"p2\">](../../atl-mfc-shared/reference/cstringt-class.md)</ept>, and <bpt id=\"p3\">[</bpt>CFixedStringT<ept id=\"p3\">](../../atl-mfc-shared/reference/cfixedstringt-class.md)</ept>.","source":"This interface manages the memory used by the MFC-independent string classes; such as [CSimpleStringT](../../atl-mfc-shared/reference/csimplestringt-class.md), [CStringT](../../atl-mfc-shared/reference/cstringt-class.md), and [CFixedStringT](../../atl-mfc-shared/reference/cfixedstringt-class.md)."},{"content":"You can also use this class to implement a custom memory manager for your custom string class.","pos":[1742,1836]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Memory Management and CStringT<ept id=\"p1\">](../../atl-mfc-shared/memory-management-with-cstringt.md)</ept>.","pos":[1837,1953],"source":" For more information, see [Memory Management and CStringT](../../atl-mfc-shared/memory-management-with-cstringt.md)."},{"content":"Requirements","pos":[1962,1974]},{"pos":[1978,2002],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpstr.h","source":"**Header:** atlsimpstr.h"},{"pos":[2052,2075],"content":"IAtlStringMgr::Allocate"},{"content":"Allocates a new string data structure.","pos":[2079,2117]},{"content":"Parameters","pos":[2203,2213]},{"content":"The number of characters in the new memory block.","pos":[2235,2284]},{"content":"The size (in bytes) of the character type used by the string manager.","pos":[2306,2375]},{"content":"Return Value","pos":[2385,2397]},{"content":"Returns a pointer to the newly allocated memory block.","pos":[2401,2455]},{"pos":[2463,2604],"content":"[!NOTE]\n Do not signal a failed allocation by throwing an exception. Instead, a failed allocation should be signaled by returning **NULL**.","leadings":["","> "],"nodes":[{"content":" Do not signal a failed allocation by throwing an exception. Instead, a failed allocation should be signaled by returning **NULL**.","pos":[8,139],"nodes":[{"content":"Do not signal a failed allocation by throwing an exception.","pos":[1,60]},{"content":"Instead, a failed allocation should be signaled by returning <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[61,131],"source":" Instead, a failed allocation should be signaled by returning **NULL**."}]}]},{"content":"Remarks","pos":[2614,2621]},{"pos":[2625,2777],"content":"Call <bpt id=\"p1\">[</bpt>IAtlStringMgr::Free<ept id=\"p1\">](#iatlstringmgr__free)</ept> or <bpt id=\"p2\">[</bpt>IAtlStringMgr::ReAllocate<ept id=\"p2\">](#iatlstringmgr__reallocate)</ept> to free the memory allocated by this method.","source":"Call [IAtlStringMgr::Free](#iatlstringmgr__free) or [IAtlStringMgr::ReAllocate](#iatlstringmgr__reallocate) to free the memory allocated by this method."},{"pos":[2785,2910],"content":"[!NOTE]\n For usage examples, see [Memory Management and CStringT](../../atl-mfc-shared/memory-management-with-cstringt.md).","leadings":["","> "],"nodes":[{"content":"For usage examples, see <bpt id=\"p1\">[</bpt>Memory Management and CStringT<ept id=\"p1\">](../../atl-mfc-shared/memory-management-with-cstringt.md)</ept>.","pos":[9,123],"source":" For usage examples, see [Memory Management and CStringT](../../atl-mfc-shared/memory-management-with-cstringt.md)."}]},{"pos":[2957,2977],"content":"IAtlStringMgr::Clone"},{"pos":[2981,3073],"content":"Returns a pointer to a new string manager for use with another instance of <ph id=\"ph1\">`CSimpleStringT`</ph>.","source":"Returns a pointer to a new string manager for use with another instance of `CSimpleStringT`."},{"content":"Return Value","pos":[3128,3140]},{"pos":[3144,3189],"content":"Returns a copy of the <ph id=\"ph1\">`IAtlStringMgr`</ph> object.","source":"Returns a copy of the `IAtlStringMgr` object."},{"content":"Remarks","pos":[3199,3206]},{"content":"Commonly called by the framework when a string manager is needed for a new string.","pos":[3210,3292]},{"content":"In most cases, the <bpt id=\"p1\">**</bpt>this<ept id=\"p1\">**</ept> pointer is returned.","pos":[3293,3341],"source":" In most cases, the **this** pointer is returned."},{"pos":[3348,3508],"content":"However, if the memory manager does not support being used by multiple instances of <ph id=\"ph1\">`CSimpleStringT`</ph>, a pointer to a sharable string manager should be returned.","source":"However, if the memory manager does not support being used by multiple instances of `CSimpleStringT`, a pointer to a sharable string manager should be returned."},{"pos":[3516,3641],"content":"[!NOTE]\n For usage examples, see [Memory Management and CStringT](../../atl-mfc-shared/memory-management-with-cstringt.md).","leadings":["","> "],"nodes":[{"content":"For usage examples, see <bpt id=\"p1\">[</bpt>Memory Management and CStringT<ept id=\"p1\">](../../atl-mfc-shared/memory-management-with-cstringt.md)</ept>.","pos":[9,123],"source":" For usage examples, see [Memory Management and CStringT](../../atl-mfc-shared/memory-management-with-cstringt.md)."}]},{"pos":[3687,3706],"content":"IAtlStringMgr::Free"},{"content":"Frees a string data structure.","pos":[3710,3740]},{"content":"Parameters","pos":[3802,3812]},{"content":"A pointer to the memory block to be freed.","pos":[3827,3869]},{"content":"Remarks","pos":[3879,3886]},{"pos":[3890,4064],"content":"Frees the specified memory block previously allocated by <bpt id=\"p1\">[</bpt>Allocate<ept id=\"p1\">](#iatlstringmgr__allocate)</ept> or <bpt id=\"p2\">[</bpt>Reallocate<ept id=\"p2\">](../../atl/reference/iatlmemmgr-class.md#iatlmemmgr__reallocate)</ept>.","source":"Frees the specified memory block previously allocated by [Allocate](#iatlstringmgr__allocate) or [Reallocate](../../atl/reference/iatlmemmgr-class.md#iatlmemmgr__reallocate)."},{"pos":[4072,4197],"content":"[!NOTE]\n For usage examples, see [Memory Management and CStringT](../../atl-mfc-shared/memory-management-with-cstringt.md).","leadings":["","> "],"nodes":[{"content":"For usage examples, see <bpt id=\"p1\">[</bpt>Memory Management and CStringT<ept id=\"p1\">](../../atl-mfc-shared/memory-management-with-cstringt.md)</ept>.","pos":[9,123],"source":" For usage examples, see [Memory Management and CStringT](../../atl-mfc-shared/memory-management-with-cstringt.md)."}]},{"pos":[4251,4278],"content":"IAtlStringMgr::GetNilString"},{"content":"Returns a pointer to a string data structure for an empty string.","pos":[4282,4347]},{"content":"Return Value","pos":[4407,4419]},{"pos":[4423,4495],"content":"A pointer to the <ph id=\"ph1\">`CStringData`</ph> object used to represent an empty string.","source":"A pointer to the `CStringData` object used to represent an empty string."},{"content":"Remarks","pos":[4505,4512]},{"content":"Call this function to return a representation of an empty string.","pos":[4516,4581]},{"pos":[4589,4808],"content":"[!NOTE]\n When implementing a custom string manager, this function must never fail. You can ensure this by embedding an instance of **CNilStringData** in the string manager class, and return a pointer to that instance.","leadings":["","> "],"nodes":[{"content":" When implementing a custom string manager, this function must never fail. You can ensure this by embedding an instance of **CNilStringData** in the string manager class, and return a pointer to that instance.","pos":[8,217],"nodes":[{"content":"When implementing a custom string manager, this function must never fail.","pos":[1,74]},{"content":"You can ensure this by embedding an instance of <bpt id=\"p1\">**</bpt>CNilStringData<ept id=\"p1\">**</ept> in the string manager class, and return a pointer to that instance.","pos":[75,209],"source":" You can ensure this by embedding an instance of **CNilStringData** in the string manager class, and return a pointer to that instance."}]}]},{"pos":[4816,4941],"content":"[!NOTE]\n For usage examples, see [Memory Management and CStringT](../../atl-mfc-shared/memory-management-with-cstringt.md).","leadings":["","> "],"nodes":[{"content":"For usage examples, see <bpt id=\"p1\">[</bpt>Memory Management and CStringT<ept id=\"p1\">](../../atl-mfc-shared/memory-management-with-cstringt.md)</ept>.","pos":[9,123],"source":" For usage examples, see [Memory Management and CStringT](../../atl-mfc-shared/memory-management-with-cstringt.md)."}]},{"pos":[4993,5018],"content":"IAtlStringMgr::Reallocate"},{"content":"Reallocates a string data structure.","pos":[5022,5058]},{"content":"Parameters","pos":[5175,5185]},{"content":"Pointer to the memory previously allocated by this memory manager.","pos":[5200,5266]},{"content":"The number of characters in the new memory block.","pos":[5291,5340]},{"content":"The size (in bytes) of the character type used by the string manager.","pos":[5362,5431]},{"content":"Return Value","pos":[5441,5453]},{"content":"Returns a pointer to the start of the newly allocated memory block.","pos":[5457,5524]},{"content":"Remarks","pos":[5534,5541]},{"pos":[5545,5621],"content":"Call this function to resize the existing memory block specified by <ph id=\"ph1\">`pData`</ph>.","source":"Call this function to resize the existing memory block specified by `pData`."},{"pos":[5628,5721],"content":"Call <bpt id=\"p1\">[</bpt>IAtlStringMgr::Free<ept id=\"p1\">](#iatlstringmgr__free)</ept> to free the memory allocated by this method.","source":"Call [IAtlStringMgr::Free](#iatlstringmgr__free) to free the memory allocated by this method."},{"pos":[5729,5854],"content":"[!NOTE]\n For usage examples, see [Memory Management and CStringT](../../atl-mfc-shared/memory-management-with-cstringt.md).","leadings":["","> "],"nodes":[{"content":"For usage examples, see <bpt id=\"p1\">[</bpt>Memory Management and CStringT<ept id=\"p1\">](../../atl-mfc-shared/memory-management-with-cstringt.md)</ept>.","pos":[9,123],"source":" For usage examples, see [Memory Management and CStringT](../../atl-mfc-shared/memory-management-with-cstringt.md)."}]},{"content":"See Also","pos":[5863,5871]},{"content":"Hierarchy Chart","pos":[5876,5891]},{"content":"ATL/MFC Shared Classes","pos":[5928,5950]}],"content":"---\ntitle: \"IAtlStringMgr Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"IAtlStringMgr\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"shared classes, IAtlStringMgr\"\n  - \"memory, managing\"\n  - \"IAtlStringMgr class\"\nms.assetid: 722f0346-a770-4aa7-8f94-177be8dba823\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# IAtlStringMgr Class\nThis class represents the interface to a `CStringT` memory manager.  \n  \n## Syntax  \n  \n```\n__interface IAtlStringMgr\n```  \n  \n## Members  \n  \n### Methods  \n  \n|||  \n|-|-|  \n|[Allocate](#iatlstringmgr__allocate)|Call this method to allocate a new string data structure.|  \n|[Clone](#iatlstringmgr__clone)|Call this method to return a pointer to a new string manager for use with another instance of `CSimpleStringT`.|  \n|[Free](#iatlstringmgr__free)|Call this method to free a string data structure.|  \n|[GetNilString](#iatlstringmgr__getnilstring)|Returns a pointer to the `CStringData` object used by empty string objects.|  \n|[Reallocate](#iatlstringmgr__reallocate)|Call this method to reallocate a string data structure.|  \n  \n## Remarks  \n This interface manages the memory used by the MFC-independent string classes; such as [CSimpleStringT](../../atl-mfc-shared/reference/csimplestringt-class.md), [CStringT](../../atl-mfc-shared/reference/cstringt-class.md), and [CFixedStringT](../../atl-mfc-shared/reference/cfixedstringt-class.md).  \n  \n You can also use this class to implement a custom memory manager for your custom string class. For more information, see [Memory Management and CStringT](../../atl-mfc-shared/memory-management-with-cstringt.md).  \n  \n## Requirements  \n **Header:** atlsimpstr.h  \n  \n##  <a name=\"iatlstringmgr__allocate\"></a>  IAtlStringMgr::Allocate  \n Allocates a new string data structure.  \n  \n```\nCStringData* Allocate(int nAllocLength,int nCharSize) throw();\n```  \n  \n### Parameters  \n `nAllocLength`  \n The number of characters in the new memory block.  \n  \n `nCharSize`  \n The size (in bytes) of the character type used by the string manager.  \n  \n### Return Value  \n Returns a pointer to the newly allocated memory block.  \n  \n> [!NOTE]\n>  Do not signal a failed allocation by throwing an exception. Instead, a failed allocation should be signaled by returning **NULL**.  \n  \n### Remarks  \n Call [IAtlStringMgr::Free](#iatlstringmgr__free) or [IAtlStringMgr::ReAllocate](#iatlstringmgr__reallocate) to free the memory allocated by this method.  \n  \n> [!NOTE]\n>  For usage examples, see [Memory Management and CStringT](../../atl-mfc-shared/memory-management-with-cstringt.md).  \n  \n##  <a name=\"iatlstringmgr__clone\"></a>  IAtlStringMgr::Clone  \n Returns a pointer to a new string manager for use with another instance of `CSimpleStringT`.  \n  \n```\nIAtlStringMgr* Clone() throw();\n```  \n  \n### Return Value  \n Returns a copy of the `IAtlStringMgr` object.  \n  \n### Remarks  \n Commonly called by the framework when a string manager is needed for a new string. In most cases, the **this** pointer is returned.  \n  \n However, if the memory manager does not support being used by multiple instances of `CSimpleStringT`, a pointer to a sharable string manager should be returned.  \n  \n> [!NOTE]\n>  For usage examples, see [Memory Management and CStringT](../../atl-mfc-shared/memory-management-with-cstringt.md).  \n  \n##  <a name=\"iatlstringmgr__free\"></a>  IAtlStringMgr::Free  \n Frees a string data structure.  \n  \n```\nvoid Free(CStringData* pData) throw();\n```  \n  \n### Parameters  \n `pData`  \n A pointer to the memory block to be freed.  \n  \n### Remarks  \n Frees the specified memory block previously allocated by [Allocate](#iatlstringmgr__allocate) or [Reallocate](../../atl/reference/iatlmemmgr-class.md#iatlmemmgr__reallocate).  \n  \n> [!NOTE]\n>  For usage examples, see [Memory Management and CStringT](../../atl-mfc-shared/memory-management-with-cstringt.md).  \n  \n##  <a name=\"iatlstringmgr__getnilstring\"></a>  IAtlStringMgr::GetNilString  \n Returns a pointer to a string data structure for an empty string.  \n  \n```\nCStringData* GetNilString() throw();\n```  \n  \n### Return Value  \n A pointer to the `CStringData` object used to represent an empty string.  \n  \n### Remarks  \n Call this function to return a representation of an empty string.  \n  \n> [!NOTE]\n>  When implementing a custom string manager, this function must never fail. You can ensure this by embedding an instance of **CNilStringData** in the string manager class, and return a pointer to that instance.  \n  \n> [!NOTE]\n>  For usage examples, see [Memory Management and CStringT](../../atl-mfc-shared/memory-management-with-cstringt.md).  \n  \n##  <a name=\"iatlstringmgr__reallocate\"></a>  IAtlStringMgr::Reallocate  \n Reallocates a string data structure.  \n  \n```\nCStringData* Reallocate(CStringData* pData,\n    int nAllocLength,\n    int nCharSize) throw();\n```  \n  \n### Parameters  \n `pData`  \n Pointer to the memory previously allocated by this memory manager.  \n  \n `nAllocLength`  \n The number of characters in the new memory block.  \n  \n `nCharSize`  \n The size (in bytes) of the character type used by the string manager.  \n  \n### Return Value  \n Returns a pointer to the start of the newly allocated memory block.  \n  \n### Remarks  \n Call this function to resize the existing memory block specified by `pData`.  \n  \n Call [IAtlStringMgr::Free](#iatlstringmgr__free) to free the memory allocated by this method.  \n  \n> [!NOTE]\n>  For usage examples, see [Memory Management and CStringT](../../atl-mfc-shared/memory-management-with-cstringt.md).  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [ATL/MFC Shared Classes](../../atl-mfc-shared/atl-mfc-shared-classes.md)\n\n\n"}