<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">89cc510d594e30821a7768a2e8d3293bdf1e174a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\multithreading-with-cpp-and-mfc.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6e61e0bc15988e5492fa1825ffb6523136f2cd09</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">852c1ccf00edcacfc08262c2b78988d06d11640f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Multithreading with C++ and MFC | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Multithreading with C++ and MFC</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Microsoft Foundation Class (MFC) library provides support for multithreaded applications.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic describes processes and threads and the MFC approach to multithreading.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A process is an executing instance of an application.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, when you double-click the Notepad icon, you start a process that runs Notepad.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A thread is a path of execution within a process.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>When you start Notepad, the operating system creates a process and begins executing the primary thread of that process.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When this thread terminates, so does the process.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This primary thread is supplied to the operating system by the startup code in the form of a function address.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Usually, it is the address of the <bpt id="p1">**</bpt>main<ept id="p1">**</ept> or <ph id="ph1">`WinMain`</ph> function that is supplied.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can create additional threads in your application if you want.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You might want to do this to handle background or maintenance tasks when you do not want the user to wait for them to complete.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>All threads in MFC applications are represented by <bpt id="p1">[</bpt>CWinThread<ept id="p1">](../mfc/reference/cwinthread-class.md)</ept> objects.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In most situations, you do not even have to explicitly create these objects; instead call the framework helper function <bpt id="p1">[</bpt>AfxBeginThread<ept id="p1">](http://msdn.microsoft.com/library/e9e8684d-24f7-4599-8fdf-1f4f560a753b)</ept>, which creates the <ph id="ph1">`CWinThread`</ph> object for you.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>MFC distinguishes two types of threads: user-interface threads and worker threads.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>User-interface threads are commonly used to handle user input and respond to events and messages generated by the user.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Worker threads are commonly used to complete tasks, such as recalculation, that do not require user input.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The Win32 API does not distinguish between types of threads; it just needs to know the thread's starting address so it can begin to execute the thread.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>MFC handles user-interface threads specially by supplying a message pump for events in the user interface.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>is an example of a user-interface thread object, because it derives from <ph id="ph1">`CWinThread`</ph> and handles events and messages generated by the user.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Special attention should be given to situations where more than one thread might require access to the same object.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Multithreading: Programming Tips<ept id="p1">](../parallel/multithreading-programming-tips.md)</ept> describes techniques that you can use to get around problems that might arise in these situations.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Multithreading: How to Use the Synchronization Classes<ept id="p1">](../parallel/multithreading-how-to-use-the-synchronization-classes.md)</ept> describes how to use the classes that are available to synchronize access from multiple threads to a single object.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Writing and debugging multithreaded programming is inherently a complicated and tricky undertaking, because you must ensure that objects are not accessed by more than one thread at a time.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The multithreading topics do not teach the basics of multithreaded programming, only how to use MFC in your multithreaded program.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The multithreaded MFC samples included in Visual C++ illustrate a few multithreaded Adding Functionality and Win32 APIs not encompassed by MFC; however, they are only intended to be a starting point.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information about how the operating system handles processes and threads, see <bpt id="p1">[</bpt>Processes and Threads<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms684841)</ept> in the <ph id="ph1">[!INCLUDE[winsdkshort](../atl-mfc-shared/reference/includes/winsdkshort_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information about MFC multithreading support, see the following topics:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Multithreading: Creating User-Interface Threads</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Multithreading: Creating Worker Threads</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Multithreading: How to Use the Synchronization Classes</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Multithreading: Terminating Threads</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Multithreading: Programming Tips</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Multithreading: When to Use the Synchronization Classes</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Multithreading Support for Older Code (Visual C++)</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>