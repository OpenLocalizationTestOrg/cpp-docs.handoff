<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">731948f7415ad1f73bd4e140142a496ea5d49ca9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\tn022-standard-commands-implementation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">834cc24db0221e17685bc176c7573625581b26bf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">db470746ce701b889a26b6d41056e5077466a736</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>TN022: Standard Commands Implementation | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>TN022: Standard Commands Implementation</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following technical note has not been updated since it was first included in the online documentation.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>As a result, some procedures and topics might be out of date or incorrect.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For the latest information, it is recommended that you search for the topic of interest in the online documentation index.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This note describes the standard command implementations provided by MFC 2.0.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Read <bpt id="p1">[</bpt>Technical Note 21<ept id="p1">](../mfc/tn021-command-and-message-routing.md)</ept> first because it describes the mechanisms used to implement many of the standard commands.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This description assumes knowledge of the MFC architectures, APIs, and common programming practice.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Documented as well as undocumented "implementation only" APIs are described.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This is not a place to start learning about the features of or how to program in MFC.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Refer to Visual C++ for more general information and for details of documented APIs.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The Problem</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>MFC defines many standard command IDs in the header file AFXRES.H.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Framework support for these commands varies.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Understanding where and how the framework classes handle these commands will not only show you how the framework works internally but will provide useful information on how to customize the standard implementations and teach you a few techniques for implementing your own command handlers.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Contents of This Technical Note</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Each command ID is described in two sections:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The title: the symbolic name of the command ID (for example, <bpt id="p1">**</bpt>ID_FILE_SAVE<ept id="p1">**</ept>) followed by the purpose of the command (for example, "saves the current document") separated by a colon.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>One or more paragraphs describing which classes implement the command, and what the default implementation does</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Most default command implementations are prewired in the framework's base class message map.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>There are some command implementations that require explicit wiring in your derived class.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>These are described under "Note".</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If you chose the right options in AppWizard, these default handlers will be connected for you in the generated skeleton application.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Naming Convention</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Standard commands follow a simple naming convention that we recommend you use if possible.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Most standard commands are located in standard places in an application's menu bar.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The symbolic name of the command starts with "ID_" followed by the standard pop-up menu name, followed by the menu item name.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The symbolic name is in upper case with underscore word-breaks.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For commands that do not have standard menu item names, a logical command name is defined starting with "ID_" (for example, <bpt id="p1">**</bpt>ID_NEXT_PANE<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>We use the prefix "ID_" to indicate commands that are designed to be bound to menu items, toolbar buttons, or other command user-interface objects.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Command handlers handling "ID_" commands should use the <ph id="ph1">`ON_COMMAND`</ph> and <ph id="ph2">`ON_UPDATE_COMMAND_UI`</ph> mechanisms of the MFC command architecture.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>We recommend you use the standard "IDM_" prefix for menu items which do not follow the command architecture and need menu-specific code to enable and disable them.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Of course the number of menu specific commands should be small since following the MFC command architecture not only makes command handlers more powerful (since they will work with toolbars) but makes the command handler code reusable.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>ID Ranges</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Please refer to <bpt id="p1">[</bpt>Technical Note 20<ept id="p1">](../mfc/tn020-id-naming-and-numbering-conventions.md)</ept> for more details on the use of ID ranges in MFC.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>MFC standard commands fall in the range 0xE000 to 0xEFFF.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Please do not rely on the specific values of these IDs since they are subject to change in future versions of the library.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Your application should define its commands in the range 0x8000 to 0xDFFF.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Standard Command IDs</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For each command ID, there is a standard message line prompt string that can be found in the file PROMPTS.RC.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The string ID for that menu prompt must be the same as for the command ID.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>ID_FILE_NEW   Creates a new/empty document.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You must connect this to your <ph id="ph1">`CWinApp`</ph>-derived class's message map to enable this functionality.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>implements this command differently depending on the number of document templates in the application.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If there is only one <ph id="ph1">`CDocTemplate`</ph>, <ph id="ph2">`CWinApp::OnFileNew`</ph> will create a new document of that type, as well as the proper frame and view class.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If there is more than one <ph id="ph1">`CDocTemplate`</ph>, <ph id="ph2">`CWinApp::OnFileNew`</ph> will prompt the user with a dialog (<bpt id="p1">**</bpt>AFX_IDD_NEWTYPEDLG<ept id="p1">**</ept>) letting them select which document type to use.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The selected <ph id="ph1">`CDocTemplate`</ph> is used to create the document.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>One common customization of <ph id="ph1">`ID_FILE_NEW`</ph> is to provide a different and more graphical choice of document types.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In this case you can implement your own <bpt id="p1">**</bpt>CMyApp::OnFileNew<ept id="p1">**</ept> and place it in your message map instead of <ph id="ph1">`CWinApp::OnFileNew`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>There is no need to call the base class implementation.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Another common customization of <ph id="ph1">`ID_FILE_NEW`</ph> is to provide a separate command for creating a document of each type.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In this case you should define new command IDs, for example ID_FILE_NEW_CHART and ID_FILE_NEW_SHEET.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>ID_FILE_OPEN   Opens an existing document.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You must connect this to your <ph id="ph1">`CWinApp`</ph>-derived class's message map to enable this functionality.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>has a very simple implementation of calling <bpt id="p1">**</bpt>CWinApp::DoPromptFileName<ept id="p1">**</ept> followed by <ph id="ph1">`CWinApp::OpenDocumentFile`</ph> with the file or path name of the file to open.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CWinApp`</ph> implementation routine <bpt id="p1">**</bpt>DoPromptFileName<ept id="p1">**</ept> brings up the standard FileOpen dialog and fills it with the file extensions obtained from the current document templates.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>One common customization of <ph id="ph1">`ID_FILE_OPEN`</ph> is to customize the FileOpen dialog or add additional file filters.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The recommended way to customize this is to replace the default implementation with your own FileOpen dialog, and call <ph id="ph1">`CWinApp::OpenDocumentFile`</ph> with the document's file or path name.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>There is no need to call the base class.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>ID_FILE_CLOSE   Closes the currently open document.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CDocument::OnFileClose<ept id="p1">**</ept> calls <ph id="ph1">`CDocument::SaveModified`</ph> to prompt the user to save the document if it has been modified and then calls <ph id="ph2">`OnCloseDocument`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>All the closing logic, including destroying the document, is done in the <ph id="ph1">`OnCloseDocument`</ph> routine.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>ID_FILE_CLOSE<ept id="p1">**</ept> acts differently from a <ph id="ph1">`WM_CLOSE`</ph> message or an <bpt id="p2">**</bpt>SC_CLOSE<ept id="p2">**</ept> system command sent to the documents frame window.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Closing a window will close the document only if that is the last frame window showing the document.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Closing the document with <bpt id="p1">**</bpt>ID_FILE_CLOSE<ept id="p1">**</ept> will not only close the document but will close down all frame windows showing the document.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>ID_FILE_SAVE   Saves the current document.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The implementation uses a helper routine <bpt id="p1">**</bpt>CDocument::DoSave<ept id="p1">**</ept> which is used for both <bpt id="p2">**</bpt>OnFileSave<ept id="p2">**</ept> and <bpt id="p3">**</bpt>OnFileSaveAs<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If you save a document that has not been saved before (that is, it does not have a path name, as in the case of FileNew) or that was read from a read-only document, the <bpt id="p1">**</bpt>OnFileSave<ept id="p1">**</ept> logic will act like the <bpt id="p2">**</bpt>ID_FILE_SAVE_AS<ept id="p2">**</ept> command and ask the user to provide a new file name.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The actual process of opening the file and doing the saving is done through the virtual function <ph id="ph1">`OnSaveDocument`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>There are two common reasons to customize <bpt id="p1">**</bpt>ID_FILE_SAVE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For documents that do not save, simply remove the <bpt id="p1">**</bpt>ID_FILE_SAVE<ept id="p1">**</ept> menu items and toolbar buttons from your user interface.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Also make sure that you never dirty your document (that is, never call <ph id="ph1">`CDocument::SetModifiedFlag`</ph>) and the framework will never cause the document to be saved.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For documents that save to someplace other than a disk file, define a new command for that operation.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>In the case of a <ph id="ph1">`COleServerDoc`</ph>, <bpt id="p1">**</bpt>ID_FILE_SAVE<ept id="p1">**</ept> is used both for file save (for normal documents) and file update (for embedded documents).</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>If your document data is stored in individual disk files, but you don't want to use the default <bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept> serialize implementation, you should override <ph id="ph1">`CDocument::OnSaveDocument`</ph> instead of <bpt id="p2">**</bpt>OnFileSave<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>ID_FILE_SAVE_AS   Saves the current document under a different file name.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CDocument::OnFileSaveAs<ept id="p1">**</ept> implementation uses the same <bpt id="p2">**</bpt>CDocument::DoSave<ept id="p2">**</ept> helper routine as <bpt id="p3">**</bpt>OnFileSave<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>OnFileSaveAs<ept id="p1">**</ept> command is handled just as <bpt id="p2">**</bpt>ID_FILE_SAVE<ept id="p2">**</ept> if the documents had no file name before the save.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COleServerDoc::OnFileSaveAs<ept id="p1">**</ept> implements the logic to save a normal document data file or to save a server document representing an OLE object embedded in some other application as a separate file.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If you customize the logic of <bpt id="p1">**</bpt>ID_FILE_SAVE<ept id="p1">**</ept>, you will probably want to customize <bpt id="p2">**</bpt>ID_FILE_SAVE_AS<ept id="p2">**</ept> in a similar fashion or the operation of "Save As" may not apply to your document.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You can remove the menu item from your menu bar if it is not needed.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>ID_FILE_SAVE_COPY_AS   Saves a copy current document under a new name.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>COleServerDoc::OnFileSaveCopyAs<ept id="p1">**</ept> implementation is very similar to <bpt id="p2">**</bpt>CDocument::OnFileSaveAs<ept id="p2">**</ept>, except that the document object is not "attached" to the underlying file after the save.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>That is, if the in-memory document was "modified" before the save, it is still "modified".</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>In addition, this command has no effect on the path name or title stored in the document.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>ID_FILE_UPDATE   Notifies the container to save an embedded document.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`COleServerDoc::OnUpdateDocument`</ph> implementation simply notifiies the container that the embedding should be saved.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The container then calls the appropriate OLE APIs in order to save the embedded object.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>ID_FILE_PAGE_SETUP   Invokes an application-specific page setup/layout dialog.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Currently there is no standard for this dialog, and the framework has no default implementation of this command.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If you choose to implement this command, we recommend you use this command ID.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>ID_FILE_PRINT_SETUP   Invoke the standard Print Setup dialog.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>You must connect this to your <ph id="ph1">`CWinApp`</ph>-derived class's message map to enable this functionality.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This command invokes the standard print setup dialog that allows the user to customize the printer and print settings for at least this document or at most all the documents in this application.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>You must use the Control Panel to change the default printer settings for the entire system.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>has a very simple implementation creating a <ph id="ph1">`CPrintDialog`</ph> object and calling the <bpt id="p1">**</bpt>CWinApp::DoPrintDialog<ept id="p1">**</ept> implementation function.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>This sets the application default printer setup.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The common need for customizing this command is to allow for per-document printer settings, which should be stored with the document when saved.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>To do this you should add a message-map handler in your <bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept> class that creates a <ph id="ph1">`CPrintDialog`</ph> object, initializes it with the appropriate printer attributes (usually <bpt id="p2">**</bpt>hDevMode<ept id="p2">**</ept> and <bpt id="p3">**</bpt>hDevNames<ept id="p3">**</ept>), call the <bpt id="p4">**</bpt>CPrintDialog::DoModal,<ept id="p4">**</ept> and save the changed printer settings.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>For a robust implementation, you should look at the implementation of <bpt id="p1">**</bpt>CWinApp::DoPrintDialog<ept id="p1">**</ept> for detecting errors and <bpt id="p2">**</bpt>CWinApp::UpdatePrinterSelection<ept id="p2">**</ept> for dealing with sensible defaults and tracking system-wide printer changes.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>ID_FILE_PRINT   Standard printing of the current document</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>You must connect this to your <ph id="ph1">`CView`</ph>-derived class's message map to enable this functionality.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>This command prints the current document, or more correctly, starts the printing process, which involves invoking the standard print dialog and running the print engine.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CView::OnFilePrint<ept id="p1">**</ept> implements this command and the main print loop.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>It calls the virtual <ph id="ph1">`CView::OnPreparePrinting`</ph> to prompt of the user with the print dialog.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>It then prepares the output DC to go to the printer, brings up the printing progress dialog (<bpt id="p1">**</bpt>AFX_IDD_PRINTDLG<ept id="p1">**</ept>), and sends the <ph id="ph1">`StartDoc`</ph> escape to the printer.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CView::OnFilePrint<ept id="p1">**</ept> also contains the main page-oriented print loop.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>For each page, it calls the virtual <ph id="ph1">`CView::OnPrepareDC`</ph> followed by a <ph id="ph2">`StartPage`</ph> escape and calling the virtual <ph id="ph3">`CView::OnPrint`</ph> for that page.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>When complete, the virtual <ph id="ph1">`CView::OnEndPrinting`</ph> is called, and the printing progress dialog is closed.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The MFC printing architecture is designed to hook in many different ways for printing and print preview.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>You will normally find the various <ph id="ph1">`CView`</ph> overridable functions adequate for any page-oriented printing tasks.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Only in the case of an application that uses the printer for non-page oriented output, should you find the need to replace the <bpt id="p1">**</bpt>ID_FILE_PRINT<ept id="p1">**</ept> implementation.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>ID_FILE_PRINT_PREVIEW   Enter print-preview mode for the current document.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>You must connect this to your <ph id="ph1">`CView`</ph>-derived class's message map to enable this functionality.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CView::OnFilePrintPreview<ept id="p1">**</ept> starts the print preview mode by calling the documented helper function <bpt id="p2">**</bpt>CView::DoPrintPreview<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CView::DoPrintPreview<ept id="p1">**</ept> is the main engine for the print preview loop, just as <bpt id="p2">**</bpt>OnFilePrint<ept id="p2">**</ept> is the main engine for the printing loop.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The print preview operation can be customized in a variety of ways by passing different parameters to <bpt id="p1">**</bpt>DoPrintPreview<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Please refer to <bpt id="p1">[</bpt>Technical Note 30<ept id="p1">](../mfc/tn030-customizing-printing-and-print-preview.md)</ept>, which discusses some of the details of print preview and how to customize it.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ID_FILE_MRU_FILE1<ept id="p1">**</ept>...<bpt id="p2">**</bpt>FILE16<ept id="p2">**</ept> A range of command IDs for the File MRU <ph id="ph1">`list`</ph>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CWinApp::OnUpdateRecentFileMenu<ept id="p1">**</ept> is a update command UI handler that is one of the more advanced uses of the <ph id="ph1">`ON_UPDATE_COMMAND_UI`</ph> mechanism.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>In your menu resource, you need only define a single menu item with ID <bpt id="p1">**</bpt>ID_FILE_MRU_FILE1<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>That menu item remains initially disabled.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>As the MRU list grows, more menu items are added to the list.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The standard <ph id="ph1">`CWinApp`</ph> implementation defaults to the standard limit of the four most recently used files.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>You can change the default by calling <ph id="ph1">`CWinApp::LoadStdProfileSettings`</ph> with a larger or smaller value.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The MRU list is stored in the application's .INI file.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The list is loaded in your application's <ph id="ph1">`InitInstance`</ph> function if you call <ph id="ph2">`LoadStdProfileSettings`</ph>, and is saved when your application exits.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The MRU update command UI handler also will convert absolute paths to relative paths for display on the file menu.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CWinApp::OnOpenRecentFile<ept id="p1">**</ept> is the <ph id="ph1">`ON_COMMAND`</ph> handler that performs the actual command.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>It simply gets the file name from the MRU list and calls <ph id="ph1">`CWinApp::OpenDocumentFile`</ph>, which does all the work of opening the file and updating the MRU list.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Customization of this command handler is not recommended.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>ID_EDIT_CLEAR   Clears the current selection</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Currently there is no standard implementation for this command.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>You must implement this for each <ph id="ph1">`CView`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>provides an implementation of this command using <ph id="ph1">`CEdit::Clear`</ph>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The command is disabled if there is no current selection.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>If you choose to implement this command, we recommend you use this command ID.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>ID_EDIT_CLEAR_ALL   Clears the entire document.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Currently there is no standard implementation for this command.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>You must implement this for each <ph id="ph1">`CView`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>If you choose to implement this command, we recommend you use this command ID.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>See the MFC Tutorial sample <bpt id="p1">[</bpt>SCRIBBLE<ept id="p1">](../visual-cpp-samples.md)</ept> for an example implementation.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>ID_EDIT_COPY   Copies the current selection to the Clipboard.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Currently there is no standard implementation for this command.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>You must implement this for each <ph id="ph1">`CView`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>provides an implementation of this command, which copies the currently selected text to the Clipboard as CF_TEXT using <ph id="ph1">`CEdit::Copy`</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The command is disabled if there is no current selection.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>If you choose to implement this command, we recommend you use this command ID.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>ID_EDIT_CUT   Cuts the current selection to the Clipboard.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Currently there is no standard implementation for this command.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>You must implement this for each <ph id="ph1">`CView`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>provides an implementation of this command, which cuts the currently selected text to the Clipboard as CF_TEXT using <ph id="ph1">`CEdit::Cut`</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The command is disabled if there is no current selection.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>If you choose to implement this command, we recommend you use this command ID.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>ID_EDIT_FIND   Begins the find operation, brings up the modeless find dialog.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Currently there is no standard implementation for this command.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>You must implement this for each <ph id="ph1">`CView`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>provides an implementation of this command, which calls the implementation helper function <bpt id="p1">**</bpt>OnEditFindReplace<ept id="p1">**</ept> to use and store the previous find/replace settings in private implementation variables.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CFindReplaceDialog`</ph> class is used to manage the modeless dialog for prompting the user.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>If you choose to implement this command, we recommend you use this command ID.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>ID_EDIT_PASTE   Inserts the current Clipboard contents.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Currently there is no standard implementation for this command.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>You must implement this for each <ph id="ph1">`CView`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>provides an implementation of this command, which copies the current Clipboard data replacing the selected text using <ph id="ph1">`CEdit::Paste`</ph>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The command is disabled if there is no <bpt id="p1">**</bpt>CF_TEXT<ept id="p1">**</ept> in the Clipboard.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COleClientDoc<ept id="p1">**</ept> just provides a update command UI handler for this command.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>If the Clipboard does not contain an embeddable OLE item/object, the command will be disabled.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>You are responsible for writing the handler for the actual command to do the actual pasting.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>If your OLE application can also paste other formats, you should provide your own update command UI handler in your view or document (that is, somewhere before <bpt id="p1">**</bpt>COleClientDoc<ept id="p1">**</ept> in the command target routing).</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>If you choose to implement this command, we recommend you use this command ID.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>For replacing the standard OLE implementation, use <ph id="ph1">`COleClientItem::CanPaste`</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>ID_EDIT_PASTE_LINK   Inserts a link from the current Clipboard contents.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Currently there is no standard implementation for this command.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>You must implement this for each <ph id="ph1">`CView`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>just provides a update command UI handler for this command.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>If the Clipboard does not contain linkable OLE item/object, the command will be disabled.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>You are responsible for writing the handler for the actual command to do the actual pasting.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>If your OLE application can also paste other formats, you should provide your own update command UI handler in your view or document (that is, somewhere before <ph id="ph1">`COleDocument`</ph> in the command target routing).</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>If you choose to implement this command, we recommend you use this command ID.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>For replacing the standard OLE implementation, use <ph id="ph1">`COleClientItem::CanPasteLink`</ph>.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>ID_EDIT_PASTE_SPECIAL   Inserts the current Clipboard contents with options.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Currently there is no standard implementation for this command.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>You must implement this for each <ph id="ph1">`CView`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>MFC does not provide this dialog.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>If you choose to implement this command, we recommend you use this command ID.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>ID_EDIT_REPEAT   Repeats the last operation.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Currently there is no standard implementation for this command.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>You must implement this for each <ph id="ph1">`CView`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>provides an implementation of this command to repeat the last find operation.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The private implementation variables for the last find are used.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The command is disabled if a find cannot be attempted.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>If you choose to implement this command, we recommend you use this command ID.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>ID_EDIT_REPLACE   Begins the replace operation, brings up the modeless replace dialog.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Currently there is no standard implementation for this command.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>You must implement this for each <ph id="ph1">`CView`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>provides an implementation of this command, which calls the implementation helper function <bpt id="p1">**</bpt>OnEditFindReplace<ept id="p1">**</ept> to use and store the previous find/replace settings in private implementation variables.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CFindReplaceDialog`</ph> class is used to manage the modeless dialog that prompts the user.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>If you choose to implement this command, we recommend you use this command ID.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>ID_EDIT_SELECT_ALL   Selects the entire document.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Currently there is no standard implementation for this command.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>You must implement this for each <ph id="ph1">`CView`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>provides an implementation of this command, which selects all the text in the document.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The command is disabled if there is no text to select.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>If you choose to implement this command, we recommend you use this command ID.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>ID_EDIT_UNDO   Undoes the last operation.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Currently there is no standard implementation for this command.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>You must implement this for each <ph id="ph1">`CView`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>provides an implementation of this command, using <ph id="ph1">`CEdit::Undo`</ph>.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The command is disabled if <ph id="ph1">`CEdit::CanUndo`</ph> returns FALSE.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>If you choose to implement this command, we recommend you use this command ID.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>ID_EDIT_REDO   Redoes the last operation.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Currently there is no standard implementation for this command.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>You must implement this for each <ph id="ph1">`CView`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>If you choose to implement this command, we recommend you use this command ID.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>ID_WINDOW_NEW   Opens another window on the active document.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CMDIFrameWnd::OnWindowNew<ept id="p1">**</ept> implements this powerful feature by using the document template of the current document to create another frame containing another view of the current document.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Like most multiple document interface (MDI) Window menu commands, the command is disabled if there is no active MDI child window.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Customization of this command handler is not recommended.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>If you wish to provide a command that creates additional views or frame windows, you will probably be better off inventing your own command.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>You can clone the code from <bpt id="p1">**</bpt>CMDIFrameWnd::OnWindowNew<ept id="p1">**</ept> and modify it to the specific frame and view classes of your liking.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>ID_WINDOW_ARRANGE   Arranges icons at the bottom of an MDI window.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>implements this standard MDI command in an implementation helper function <bpt id="p1">**</bpt>OnMDIWindowCmd<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>This helper maps command IDs to MDI Windows messages and can therefore share a lot of code.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Like most MDI Window menu commands, the command is disabled if there is no active MDI child window.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Customization of this command handler is not recommended.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>ID_WINDOW_CASCADE   Cascades windows so they overlap.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>implements this standard MDI command in an implementation helper function <bpt id="p1">**</bpt>OnMDIWindowCmd<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>This helper maps command IDs to MDI Windows messages and can therefore share a lot of code.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Like most MDI Window menu commands, the command is disabled if there is no active MDI child window.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Customization of this command handler is not recommended.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>ID_WINDOW_TILE_HORZ   Tiles windows horizontally.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>This command is implemented in <ph id="ph1">`CMDIFrameWnd`</ph> just like <bpt id="p1">**</bpt>ID_WINDOW_CASCADE<ept id="p1">**</ept>, except a different MDI Windows message is used for the operation.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>You should pick the default tile orientation for your application.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>You can do this by changing the ID for the Window "Tile" menu item to either <bpt id="p1">**</bpt>ID_WINDOW_TILE_HORZ<ept id="p1">**</ept> or <bpt id="p2">**</bpt>ID_WINDOW_TILE_VERT<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>ID_WINDOW_TILE_VERT   Tiles windows vertically.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>This command is implemented in <ph id="ph1">`CMDIFrameWnd`</ph> just like <bpt id="p1">**</bpt>ID_WINDOW_CASCADE<ept id="p1">**</ept>, except a different MDI Windows message is used for the operation.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>You should pick the default tile orientation for your application.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>You can do this by changing the ID for the Window "Tile" menu item to either <bpt id="p1">**</bpt>ID_WINDOW_TILE_HORZ<ept id="p1">**</ept> or <bpt id="p2">**</bpt>ID_WINDOW_TILE_VERT<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>ID_WINDOW_SPLIT   Keyboard interface to splitter.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>handles this command for the <ph id="ph1">`CSplitterWnd`</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>If the view is part of a splitter window, this command will delegate to the implementation function <ph id="ph1">`CSplitterWnd::DoKeyboardSplit`</ph>.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>This will place the splitter in a mode that will allow keyboard users to split or unsplit a splitter window.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>This command is disabled if the view is not in a splitter.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Customization of this command handler is not recommended.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>ID_APP_ABOUT   Invokes the About dialog box.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>There is no standard implementation for an application's About box.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>The default AppWizard-created application will create a custom dialog class for your application and use it as your About box.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>AppWizard will also write the trivial command handler which handles this command and invokes the dialog.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>You will almost always implement this command.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>ID_APP_EXIT   Exit the application.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CWinApp::OnAppExit<ept id="p1">**</ept> handles this command by sending a <ph id="ph1">`WM_CLOSE`</ph> message to the application's main window.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>The standard shutting down of the application (prompting for dirty files and so on) is handled by the <ph id="ph1">`CFrameWnd`</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Customization of this command handler is not recommended.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Overriding <ph id="ph1">`CWinApp::SaveAllModified`</ph> or the <ph id="ph2">`CFrameWnd`</ph> closing logic is recommended.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>If you choose to implement this command, we recommend you use this command ID.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>ID_HELP_INDEX   Lists Help topics from .HLP file.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>You must connect this to your <ph id="ph1">`CWinApp`</ph>-derived class's message map to enable this functionality.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>handles this command by trivially calling <ph id="ph1">`CWinApp::WinHelp`</ph>.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Customization of this command handler is not recommended.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>ID_HELP_USING   Displays help on how to use Help.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>You must connect this to your <ph id="ph1">`CWinApp`</ph>-derived class's message map to enable this functionality.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>handles this command by trivially calling <ph id="ph1">`CWinApp::WinHelp`</ph>.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Customization of this command handler is not recommended.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>ID_CONTEXT_HELP   Enters SHIFT-F1 help mode.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>You must connect this to your <ph id="ph1">`CWinApp`</ph>-derived class's message map to enable this functionality.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>handles this command by setting the help mode cursor, entering a modal loop and waiting for the user to select a window to get help on.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Please refer to <bpt id="p1">[</bpt>Technical Note 28<ept id="p1">](../mfc/tn028-context-sensitive-help-support.md)</ept> for more details on the MFC Help implementation.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Customization of this command handler is not recommended.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>ID_HELP   Gives help on the current context</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>You must connect this to your <ph id="ph1">`CWinApp`</ph>-derived class's message map to enable this functionality.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>handles this command by getting the right help context for the current application context.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>This handles simple F1 help, help on message boxes and so on.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Please refer to <bpt id="p1">[</bpt>Technical Note 28<ept id="p1">](../mfc/tn028-context-sensitive-help-support.md)</ept> for more details on the MFC help implementation.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Customization of this command handler is not recommended.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>ID_DEFAULT_HELP   Displays default help for context</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>You must connect this to your <ph id="ph1">`CWinApp`</ph>-derived class's message map to enable this functionality.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>This command is usually mapped to <ph id="ph1">`CWinApp::OnHelpIndex`</ph>.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>A different command handler can be provided if a distinction between default Help and the Help index is desired.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>ID_NEXT_PANE   Goes to next pane</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>handles this command for the <ph id="ph1">`CSplitterWnd`</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>If the view is part of a splitter window, this command will delegate to the implementation function <bpt id="p1">**</bpt>CSplitterWnd::OnNextPaneCmd<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>This will move the active view to the next pane in the splitter.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>This command is disabled if the view is not in a splitter or there is no next pane to go to.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Customization of this command handler is not recommended.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>ID_PREV_PANE   Goes to previous pane</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>handles this command for the <ph id="ph1">`CSplitterWnd`</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>If the view is part of a splitter window, this command will delegate to the implementation function <bpt id="p1">**</bpt>CSplitterWnd::OnNextPaneCmd<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>This will move the active view to the previous pane in the splitter.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>This command is disabled if the view is not in a splitter or there is no previous pane to go to.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Customization of this command handler is not recommended.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>ID_OLE_INSERT_NEW   Inserts a new OLE object</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Currently there is no standard implementation for this command.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>You must implement this for your <ph id="ph1">`CView`</ph>-derived class to insert a new OLE item/object at the current selection.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>All OLE client applications should implement this command.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>AppWizard, with the OLE option, will create a skeleton implementation of <bpt id="p1">**</bpt>OnInsertObject<ept id="p1">**</ept> in your view class that you will have to complete.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>See the MFC OLE sample <bpt id="p1">[</bpt>OCLIENT<ept id="p1">](../visual-cpp-samples.md)</ept> example for a complete implementation of this command.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>ID_OLE_EDIT_LINKS   Edits OLE links</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>handles this command by using the MFC-provided implementation of the standard OLE links dialog.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The implementation of this dialog is accessed through the <ph id="ph1">`COleLinksDialog`</ph> class.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>If the current document does not contain any links, the command is disabled.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Customization of this command handler is not recommended.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>ID_OLE_VERB_FIRST...LAST   An ID range for OLE verbs</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>uses this command ID range for the verbs supported by the currently selected OLE item/object.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>This must be a range since a given OLE item/object type can support zero or more custom verbs.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>In your application's menu, you should have one menu item with the ID of <bpt id="p1">**</bpt>ID_OLE_VERB_FIRST<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>When the program is run, the menu will be updated with the appropriate menu verb description (or pop-up menu with many verbs).</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>The management of the OLE menu is handled by <ph id="ph1">`AfxOleSetEditMenu`</ph>, done in the update command UI handler for this command.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>There are no explicit command handlers for handling each of the command ID in this range.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COleDocument::OnCmdMsg<ept id="p1">**</ept> is overridden to trap all command IDs in this range, turn them into zero-based verb numbers, and launch the server for that verb (using <ph id="ph1">`COleClientItem::DoVerb`</ph>).</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Customization or other use of this command ID range is not recommended.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>ID_VIEW_TOOLBAR   Toggles the toolbar on and off</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>handles this command and the update-command UI handler to toggle the visible state of the toolbar.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>The toolbar must be a child window of the frame with child window ID of <ph id="ph1">`AFX_IDW_TOOLBAR`</ph>.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>The command handler actually toggles the visibility of the toolbar window.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>is used to redraw the frame window with the toolbar in its new state.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>The update-command UI handler checks the menu item when the toolbar is visible.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Customization of this command handler is not recommended.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>If you wish to add additional toolbars, you will want to clone and modify the command handler and the update-command UI handler for this command.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>ID_VIEW_STATUS_BAR   Toggles the status bar on and off</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>This command is implemented in <ph id="ph1">`CFrameWnd`</ph> just like <bpt id="p1">**</bpt>ID_VIEW_TOOLBAR<ept id="p1">**</ept>, except a different child window ID (<bpt id="p2">**</bpt>AFX_IDW_STATUS_BAR<ept id="p2">**</ept>) is used.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Update-Only Command Handlers</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Several standard command IDs are used as indicators in status bars.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>These use the same update-command UI handling mechanism to display their current visual state during application idle time.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Since they can't be selected by the user (that is, you cannot push a status bar pane), then it makes no sense to have an <ph id="ph1">`ON_COMMAND`</ph> handler for these command IDs.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ID_INDICATOR_CAPS<ept id="p1">**</ept> : CAP lock indicator.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ID_INDICATOR_NUM<ept id="p1">**</ept> : NUM lock indicator.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ID_INDICATOR_SCRL<ept id="p1">**</ept> : SCRL lock indicator.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ID_INDICATOR_KANA<ept id="p1">**</ept> : KANA lock indicator (applicable only to Japanese systems).</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>All three of these are implemented in <bpt id="p1">**</bpt>CFrameWnd::OnUpdateKeyIndicator<ept id="p1">**</ept>, an implementation helper that uses the command ID to map to the appropriate Virtual Key.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>A common implementation enables or disables (for status panes disabled = no text) the <ph id="ph1">`CCmdUI`</ph> object depending on whether the appropriate Virtual Key is currently locked.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Customization of this command handler is not recommended.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ID_INDICATOR_EXT : EXT<ept id="p1">**</ept>ended select indicator.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ID_INDICATOR_OVR : OV<ept id="p1">**</ept>e<bpt id="p2">**</bpt>R<ept id="p2">**</ept>strike indicator.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ID_INDICATOR_REC : REC<ept id="p1">**</ept>ording indicator.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Currently there is no standard implementation for these indicators.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>If you choose to implement these indicators, we recommend you use these indicator IDs and maintaining the ordering of the indicators in your status bar (that is, in this order: EXT, CAP, NUM, SCRL, OVR, REC).</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Technical Notes by Number</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Technical Notes by Category</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>