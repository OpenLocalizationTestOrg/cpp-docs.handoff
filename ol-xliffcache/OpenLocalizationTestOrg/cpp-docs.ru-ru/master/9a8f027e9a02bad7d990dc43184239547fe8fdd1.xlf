<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9a8f027e9a02bad7d990dc43184239547fe8fdd1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\multithreading-when-to-use-the-synchronization-classes.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b350e6a559db056ec6400357dc41d0931e0fce77</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">01bb69fec8dae9ff8f1d9798c4f5ce0607125c38</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Multithreading: When to Use the Synchronization Classes | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Multithreading: When to Use the Synchronization Classes</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The multithreaded classes provided with MFC fall into two categories: synchronization objects (<bpt id="p1">[</bpt>CSyncObject<ept id="p1">](../mfc/reference/csyncobject-class.md)</ept>, <bpt id="p2">[</bpt>CSemaphore<ept id="p2">](../mfc/reference/csemaphore-class.md)</ept>, <bpt id="p3">[</bpt>CMutex<ept id="p3">](../mfc/reference/cmutex-class.md)</ept>, <bpt id="p4">[</bpt>CCriticalSection<ept id="p4">](../mfc/reference/ccriticalsection-class.md)</ept>, and <bpt id="p5">[</bpt>CEvent<ept id="p5">](../mfc/reference/cevent-class.md)</ept>) and synchronization access objects (<bpt id="p6">[</bpt>CMultiLock<ept id="p6">](../mfc/reference/cmultilock-class.md)</ept> and <bpt id="p7">[</bpt>CSingleLock<ept id="p7">](../mfc/reference/csinglelock-class.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Synchronization classes are used when access to a resource must be controlled to ensure integrity of the resource.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Synchronization access classes are used to gain access to these controlled resources.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic describes when to use each class.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To determine which synchronization class you should use, ask the following series of questions:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Does the application have to wait for something to happen before it can access the resource (for example, data must be received from a communications port before it can be written to a file)?</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If yes, use <ph id="ph1">`CEvent`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Can more than one thread within the same application access this resource at one time (for example, your application allows up to five windows with views on the same document)?</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If yes, use <ph id="ph1">`CSemaphore`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Can more than one application use this resource (for example, the resource is in a DLL)?</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If yes, use <ph id="ph1">`CMutex`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If no, use <ph id="ph1">`CCriticalSection`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CSyncObject<ept id="p1">**</ept> is never used directly.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>It is the base class for the other four synchronization classes.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Example 1: Using Three Synchronization Classes</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>As an example, take an application that maintains a linked list of accounts.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This application allows up to three accounts to be examined in separate windows, but only one can be updated at any particular time.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When an account is updated, the updated data is sent over the network to a data archive.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This example application uses all three types of synchronization classes.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Because it allows up to three accounts to be examined at one time, it uses <ph id="ph1">`CSemaphore`</ph> to limit access to three view objects.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When an attempt to view a fourth account occurs, the application either waits until one of the first three windows closes or it fails.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When an account is updated, the application uses <ph id="ph1">`CCriticalSection`</ph> to ensure that only one account is updated at a time.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>After the update succeeds, it signals <ph id="ph1">`CEvent`</ph>, which releases a thread waiting for the event to be signaled.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This thread sends the new data to the data archive.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Example 2: Using Synchronization Access Classes</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Choosing which synchronization access class to use is even simpler.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If your application is concerned with accessing a single controlled resource only, use <ph id="ph1">`CSingleLock`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If it needs access to any one of a number of controlled resources, use <ph id="ph1">`CMultiLock`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In example 1, <ph id="ph1">`CSingleLock`</ph> would have been used, because in each case only one resource is needed at any particular time.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For information about how the synchronization classes are used, see <bpt id="p1">[</bpt>Multithreading: How to Use the Synchronization Classes<ept id="p1">](../parallel/multithreading-how-to-use-the-synchronization-classes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For information about synchronization, see <bpt id="p1">[</bpt>Synchronization<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686353)</ept> in the <ph id="ph1">[!INCLUDE[winsdkshort](../atl-mfc-shared/reference/includes/winsdkshort_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For information about multithreading support in MFC, see <bpt id="p1">[</bpt>Multithreading with C++ and MFC<ept id="p1">](../parallel/multithreading-with-cpp-and-mfc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Multithreading with C++ and MFC</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>