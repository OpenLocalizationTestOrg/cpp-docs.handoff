<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a009c7b56572a4cbc1d58f849e90be7042249c60</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\message-categories.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">90c13ece1edf19ba1334837f5fb2cc7ef776b183</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e1abe114cf8fcc9ecb6f1bbb54dd6319e8138cf4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Message Categories | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Message Categories</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>What kinds of messages do you write handlers for There are three main categories:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Windows messages</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This includes primarily those messages beginning with the <bpt id="p1">**</bpt>WM_<ept id="p1">**</ept> prefix, except for <bpt id="p2">**</bpt>WM_COMMAND<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Windows messages are handled by windows and views.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>These messages often have parameters that are used in determining how to handle the message.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Control notifications</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This includes <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> notification messages from controls and other child windows to their parent windows.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, an edit control sends its parent a <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> message containing the <bpt id="p2">**</bpt>EN_CHANGE<ept id="p2">**</ept> control-notification code when the user has taken an action that may have altered text in the edit control.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The window's handler for the message responds to the notification message in some appropriate way, such as retrieving the text in the control.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The framework routes control-notification messages like other <bpt id="p1">**</bpt>WM_<ept id="p1">**</ept> messages.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>One exception, however, is the <bpt id="p1">**</bpt>BN_CLICKED<ept id="p1">**</ept> control-notification message sent by buttons when the user clicks them.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This message is treated specially as a command message and routed like other commands.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Command messages</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This includes <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> notification messages from user-interface objects: menus, toolbar buttons, and accelerator keys.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The framework processes commands differently from other messages, and they can be handled by more kinds of objects, as explained in <bpt id="p1">[</bpt>Command Targets<ept id="p1">](../mfc/command-targets.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Windows Messages and Control-Notification Messages</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Messages in categories 1 and 2 — Windows messages and control notifications — are handled by windows: objects of classes derived from class <ph id="ph1">`CWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This includes <ph id="ph1">`CFrameWnd`</ph>, <ph id="ph2">`CMDIFrameWnd`</ph>, <ph id="ph3">`CMDIChildWnd`</ph>, <ph id="ph4">`CView`</ph>, <ph id="ph5">`CDialog`</ph>, and your own classes derived from these base classes.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Such objects encapsulate an <ph id="ph1">`HWND`</ph>, a handle to a Windows window.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Command Messages</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Messages in category 3 — commands — can be handled by a wider variety of objects: documents, document templates, and the application object itself in addition to windows and views.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When a command directly affects some particular object, it makes sense to have that object handle the command.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For example, the Open command on the File menu is logically associated with the application: the application opens a specified document upon receiving the command.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>So the handler for the Open command is a member function of the application class.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more about commands and how they are routed to objects, see <bpt id="p1">[</bpt>How the Framework Calls a Handler<ept id="p1">](../mfc/how-the-framework-calls-a-handler.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Messages and Commands in the Framework</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>