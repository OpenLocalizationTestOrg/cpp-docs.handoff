{"nodes":[{"pos":[12,62],"content":"CDynamicAccessor::SetBlobHandling | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CDynamicAccessor::SetBlobHandling | Microsoft Docs","pos":[0,50]}]},{"content":"CDynamicAccessor::SetBlobHandling","pos":[796,829]},{"content":"Sets the BLOB handling value for the current row.","pos":[830,879]},{"content":"Syntax","pos":[888,894]},{"content":"Parameters","pos":[997,1007]},{"content":"Specifies how the BLOB data is to be handled.","pos":[1030,1075]},{"content":"It can take the following values:","pos":[1076,1109]},{"content":"<bpt id=\"p1\">**</bpt>DBBLOBHANDLING_DEFAULT<ept id=\"p1\">**</ept>: Handle column data larger than <ph id=\"ph1\">`nBlobSize`</ph> (as set by <ph id=\"ph2\">`SetBlobSizeLimit`</ph>) as BLOB data and retrieve it through an <ph id=\"ph3\">`ISequentialStream`</ph> or <ph id=\"ph4\">`IStream`</ph> object.","pos":[1119,1301],"source":"**DBBLOBHANDLING_DEFAULT**: Handle column data larger than `nBlobSize` (as set by `SetBlobSizeLimit`) as BLOB data and retrieve it through an `ISequentialStream` or `IStream` object."},{"content":"This option will attempt to bind every column containing data larger than <ph id=\"ph1\">`nBlobSize`</ph> or listed as <bpt id=\"p1\">**</bpt>DBTYPE_IUNKNOWN<ept id=\"p1\">**</ept> as BLOB data.","pos":[1302,1434],"source":" This option will attempt to bind every column containing data larger than `nBlobSize` or listed as **DBTYPE_IUNKNOWN** as BLOB data."},{"content":"<bpt id=\"p1\">**</bpt>DBBLOBHANDLING_NOSTREAMS<ept id=\"p1\">**</ept>: Handle column data larger than <ph id=\"ph1\">`nBlobSize`</ph> (as set by <ph id=\"ph2\">`SetBlobSizeLimit`</ph>) as BLOB data and retrieve it through reference in provider-allocated, consumer-owned memory.","pos":[1444,1640],"source":"**DBBLOBHANDLING_NOSTREAMS**: Handle column data larger than `nBlobSize` (as set by `SetBlobSizeLimit`) as BLOB data and retrieve it through reference in provider-allocated, consumer-owned memory."},{"content":"This option is useful for tables that have more than one BLOB column, and the provider supports only one <ph id=\"ph1\">`ISequentialStream`</ph> object per accessor.","pos":[1641,1786],"source":" This option is useful for tables that have more than one BLOB column, and the provider supports only one `ISequentialStream` object per accessor."},{"pos":[1796,1993],"content":"<bpt id=\"p1\">**</bpt>DBBLOBHANDLING_SKIP<ept id=\"p1\">**</ept>: Skip (do not bind) columns qualifying as containing BLOBs (the accessor will not bind or retrieve the column value but it will still retrieve the column status and length).","source":"**DBBLOBHANDLING_SKIP**: Skip (do not bind) columns qualifying as containing BLOBs (the accessor will not bind or retrieve the column value but it will still retrieve the column status and length)."},{"content":"Remarks","pos":[2002,2009]},{"pos":[2013,2071],"content":"You should call <ph id=\"ph1\">`SetBlobHandling`</ph> before calling <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept>.","source":"You should call `SetBlobHandling` before calling **Open**."},{"pos":[2078,2223],"content":"The constructor method <bpt id=\"p1\">[</bpt>CDynamicAccessor<ept id=\"p1\">](../../data/oledb/cdynamicaccessor-class.md)</ept> sets the BLOB handling value to <bpt id=\"p2\">**</bpt>DBBLOBHANDLING_DEFAULT<ept id=\"p2\">**</ept>.","source":"The constructor method [CDynamicAccessor](../../data/oledb/cdynamicaccessor-class.md) sets the BLOB handling value to **DBBLOBHANDLING_DEFAULT**."},{"content":"Requirements","pos":[2232,2244]},{"pos":[2248,2270],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atldbcli.h","source":"**Header:** atldbcli.h"},{"content":"See Also","pos":[2279,2287]},{"content":"CDynamicAccessor Class","pos":[2292,2314]}],"content":"---\ntitle: \"CDynamicAccessor::SetBlobHandling | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"CDynamicAccessor::SetBlobHandling\"\n  - \"CDynamicAccessor.SetBlobHandling\"\n  - \"ATL::CDynamicAccessor::SetBlobHandling\"\n  - \"SetBlobHandling\"\n  - \"ATL.CDynamicAccessor.SetBlobHandling\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"SetBlobHandling method\"\nms.assetid: fa8b0bb3-a21b-4d64-aeef-e79bf61d079c\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CDynamicAccessor::SetBlobHandling\nSets the BLOB handling value for the current row.  \n  \n## Syntax  \n  \n```  \n  \n      bool SetBlobHandling(  \n   DBBLOBHANDLINGENUM eBlobHandling   \n);  \n```  \n  \n#### Parameters  \n `eBlobHandling`  \n Specifies how the BLOB data is to be handled. It can take the following values:  \n  \n-   **DBBLOBHANDLING_DEFAULT**: Handle column data larger than `nBlobSize` (as set by `SetBlobSizeLimit`) as BLOB data and retrieve it through an `ISequentialStream` or `IStream` object. This option will attempt to bind every column containing data larger than `nBlobSize` or listed as **DBTYPE_IUNKNOWN** as BLOB data.  \n  \n-   **DBBLOBHANDLING_NOSTREAMS**: Handle column data larger than `nBlobSize` (as set by `SetBlobSizeLimit`) as BLOB data and retrieve it through reference in provider-allocated, consumer-owned memory. This option is useful for tables that have more than one BLOB column, and the provider supports only one `ISequentialStream` object per accessor.  \n  \n-   **DBBLOBHANDLING_SKIP**: Skip (do not bind) columns qualifying as containing BLOBs (the accessor will not bind or retrieve the column value but it will still retrieve the column status and length).  \n  \n## Remarks  \n You should call `SetBlobHandling` before calling **Open**.  \n  \n The constructor method [CDynamicAccessor](../../data/oledb/cdynamicaccessor-class.md) sets the BLOB handling value to **DBBLOBHANDLING_DEFAULT**.  \n  \n## Requirements  \n **Header:** atldbcli.h  \n  \n## See Also  \n [CDynamicAccessor Class](../../data/oledb/cdynamicaccessor-class.md)"}