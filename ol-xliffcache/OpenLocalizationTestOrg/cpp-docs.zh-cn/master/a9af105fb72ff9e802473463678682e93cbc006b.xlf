<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a9af105fb72ff9e802473463678682e93cbc006b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\changing-the-drawing-code-atl-tutorial-part-4.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">55d46ad5a604d10668b82c29e9535c10c9f089ad</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9c16464b2cf4d21effdae07fbddca7c64ebd6b9c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Changing the Drawing Code (ATL Tutorial, Part 4) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Changing the Drawing Code (ATL Tutorial, Part 4)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>By default, the control's drawing code displays a square and the text <bpt id="p1">**</bpt>PolyCtl<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In this step, you will change the code to display something more interesting.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following tasks are involved:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Modifying the Header File</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Modifying the <ph id="ph1">`OnDraw`</ph> Function</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Adding a Method to Calculate the Polygon Points</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Initializing the Fill Color</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Modifying the Header File</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Start by adding support for the math functions <ph id="ph1">`sin`</ph> and <ph id="ph2">`cos`</ph>, which will be used calculate the polygon points, and by creating an array to store positions.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To modify the header file</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Add the line <ph id="ph1">`#include &lt;math.h&gt;`</ph> to the top of PolyCtl.h.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The top of the file should look like this:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#47</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Once the polygon points are calculated, they will be stored in an array of type <ph id="ph1">`POINT`</ph>, so add the array after the definition of <ph id="ph2">`m_nSides`</ph> in PolyCtl.h:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#48</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Modifying the OnDraw Method</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Now you should modify the <ph id="ph1">`OnDraw`</ph> method in PolyCtl.h.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The code you will add creates a new pen and brush with which to draw your polygon, and then calls the <ph id="ph1">`Ellipse`</ph> and <ph id="ph2">`Polygon`</ph> Win32 API functions to perform the actual drawing.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To modify the OnDraw function</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Replace the existing <ph id="ph1">`OnDraw`</ph> method in PolyCtl.h with the following code:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#49</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Adding a Method to Calculate the Polygon Points</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Add a method, called <ph id="ph1">`CalcPoints`</ph>, that will calculate the coordinates of the points that make up the perimeter of the polygon.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>These calculations will be based on the RECT variable that is passed into the function.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To add the CalcPoints method</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Add the declaration of <ph id="ph1">`CalcPoints`</ph> to the <ph id="ph2">`IPolyCtl`</ph> public section of the <ph id="ph3">`CPolyCtl`</ph> class in PolyCtl.h:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#50</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The last part of the public section of the <ph id="ph1">`CPolyCtl`</ph> class will look like this:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#51</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Add this implementation of the <ph id="ph1">`CalcPoints`</ph> function to the end of PolyCtl.cpp:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#52</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Initializing the Fill Color</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Initialize <ph id="ph1">`m_clrFillColor`</ph> with a default color.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To initialize the fill color</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Use green as the default color by adding this line to the <ph id="ph1">`CPolyCtl`</ph> constructor in PolyCtl.h:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#53</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The constructor now looks like this:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#54</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Building and Testing the Control</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Rebuild the control.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Make sure the PolyCtl.htm file is closed if it is still open, and then click <bpt id="p1">**</bpt>Build Polygon<ept id="p1">**</ept> on the <bpt id="p2">**</bpt>Build<ept id="p2">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You could view the control once again from the PolyCtl.htm page, but this time use the ActiveX Control Test Container.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>To use the ActiveX Control Test Container</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Build and start the ActiveX Control Test Container.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>TSTCON Sample: ActiveX Control Test Container<ept id="p1">](../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In Test Container, on the <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Insert New Control<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Locate your control, which will be called <ph id="ph1">`PolyCtl Class`</ph>, and click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You will see a green triangle within a circle.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Try changing the number of sides by following the next procedure.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To modify properties on a dual interface from within Test Container, use <bpt id="p1">**</bpt>Invoke Methods<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To modify a control's property from within the Test Container</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In Test Container, click <bpt id="p1">**</bpt>Invoke Methods<ept id="p1">**</ept> on the <bpt id="p2">**</bpt>Control<ept id="p2">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Invoke Method<ept id="p1">**</ept> dialog box is displayed.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>PropPut<ept id="p1">**</ept> version of the <bpt id="p2">**</bpt>Sides<ept id="p2">**</ept> property from the <bpt id="p3">**</bpt>Method Name<ept id="p3">**</ept> drop-down list box.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Type <ph id="ph1">`5`</ph> in the <bpt id="p1">**</bpt>Parameter Value<ept id="p1">**</ept> box, click <bpt id="p2">**</bpt>Set Value<ept id="p2">**</ept>, and click <bpt id="p3">**</bpt>Invoke<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Note that the control does not change.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Although you changed the number of sides internally by setting the <ph id="ph1">`m_nSides`</ph> variable, this did not cause the control to repaint.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If you switch to another application and then switch back to Test Container, you will find that the control has repainted and has the correct number of sides.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To correct this problem, add a call to the <ph id="ph1">`FireViewChange`</ph> function, defined in <ph id="ph2">`IViewObjectExImpl`</ph>, after you set the number of sides.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If the control is running in its own window, <ph id="ph1">`FireViewChange`</ph> will call the <ph id="ph2">`InvalidateRect`</ph> method directly.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If the control is running windowless, the <ph id="ph1">`InvalidateRect`</ph> method will be called on the container's site interface.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This forces the control to repaint itself.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To add a call to FireViewChange</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Update PolyCtl.cpp by adding the call to <ph id="ph1">`FireViewChange`</ph> to the <ph id="ph2">`put_Sides`</ph> method.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>When you have finished, the <ph id="ph1">`put_Sides`</ph> method should look like this:</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#55</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>After adding <ph id="ph1">`FireViewChange`</ph>, rebuild and try the control again in the ActiveX Control Test Container.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This time when you change the number of sides and click <ph id="ph1">`Invoke`</ph>, you should see the control change immediately.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In the next step, you will add an event.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to Step 3<ept id="p1">](../atl/adding-a-property-to-the-control-atl-tutorial-part-3.md)</ept> &amp;#124; <bpt id="p2">[</bpt>On to Step 5<ept id="p2">](../atl/adding-an-event-atl-tutorial-part-5.md)</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Tutorial</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Testing Properties and Events with Test Container</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>