{"nodes":[{"pos":[12,36],"content":"process | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"process | Microsoft Docs","pos":[0,24]}]},{"content":"process","pos":[669,676]},{"content":"Specifies that your managed application process should have a single copy of a particular global variable, static member variable, or static local variable shared across all application domains in the process.","pos":[677,886]},{"content":"This is primarily intended to be used when compiling with <bpt id=\"p1\">**</bpt>/clr:pure<ept id=\"p1\">**</ept>, because under <bpt id=\"p2\">**</bpt>/clr:pure<ept id=\"p2\">**</ept> global and static variables are per application domain, by default.","pos":[887,1055],"source":" This is primarily intended to be used when compiling with **/clr:pure**, because under **/clr:pure** global and static variables are per application domain, by default."},{"content":"When compiling with <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept>, global and static variables are per process by default (do not need to use <ph id=\"ph1\">`__declspec(process)`</ph>.","pos":[1056,1183],"source":" When compiling with **/clr**, global and static variables are per process by default (do not need to use `__declspec(process)`."},{"pos":[1190,1323],"content":"Only a global variable, a static member variable, or a static local variable of native type can be marked with <ph id=\"ph1\">`__declspec(process)`</ph>.","source":"Only a global variable, a static member variable, or a static local variable of native type can be marked with `__declspec(process)`."},{"content":"When compiling with <bpt id=\"p1\">**</bpt>/clr:pure<ept id=\"p1\">**</ept>, variables marked as per process must also be declared as <ph id=\"ph1\">`const`</ph>.","pos":[1330,1430],"source":"When compiling with **/clr:pure**, variables marked as per process must also be declared as `const`."},{"content":"This ensures that per process variables are not changed in one application domain, and giving unexpected results in another application domain.","pos":[1431,1574]},{"content":"The primary intended use of <ph id=\"ph1\">`__declspec(process)`</ph> is to enable compile time initialization of a global variable, static member variable, or static local variable under <bpt id=\"p1\">**</bpt>/clr:pure<ept id=\"p1\">**</ept>.","pos":[1575,1757],"source":" The primary intended use of `__declspec(process)` is to enable compile time initialization of a global variable, static member variable, or static local variable under **/clr:pure**."},{"pos":[1774,1946],"content":"is only valid when compiling with <bpt id=\"p1\">[</bpt>/clr<ept id=\"p1\">](../build/reference/clr-common-language-runtime-compilation.md)</ept> or <bpt id=\"p2\">**</bpt>/clr:pure<ept id=\"p2\">**</ept> and is not valid when compiling with <bpt id=\"p3\">**</bpt>/clr:safe<ept id=\"p3\">**</ept>.","source":" is only valid when compiling with [/clr](../build/reference/clr-common-language-runtime-compilation.md) or **/clr:pure** and is not valid when compiling with **/clr:safe**."},{"pos":[1953,2069],"content":"If you want each application domain to have its own copy of a global variable, use <bpt id=\"p1\">[</bpt>appdomain<ept id=\"p1\">](../cpp/appdomain.md)</ept>.","source":"If you want each application domain to have its own copy of a global variable, use [appdomain](../cpp/appdomain.md)."},{"pos":[2076,2187],"content":"See <bpt id=\"p1\">[</bpt>Application Domains and Visual C++<ept id=\"p1\">](../dotnet/application-domains-and-visual-cpp.md)</ept> for more information.","source":"See [Application Domains and Visual C++](../dotnet/application-domains-and-visual-cpp.md) for more information."},{"content":"See Also","pos":[2196,2204]},{"content":"__declspec","pos":[2209,2219]},{"content":"Keywords","pos":[2246,2254]}],"content":"---\ntitle: \"process | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"Process\"\n  - \"process_cpp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"__declspec keyword [C++], process\"\n  - \"process __declspec keyword\"\nms.assetid: 60eecc2f-4eef-4567-b9db-aaed34733023\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# process\nSpecifies that your managed application process should have a single copy of a particular global variable, static member variable, or static local variable shared across all application domains in the process. This is primarily intended to be used when compiling with **/clr:pure**, because under **/clr:pure** global and static variables are per application domain, by default. When compiling with **/clr**, global and static variables are per process by default (do not need to use `__declspec(process)`.  \n  \n Only a global variable, a static member variable, or a static local variable of native type can be marked with `__declspec(process)`.  \n  \n When compiling with **/clr:pure**, variables marked as per process must also be declared as `const`. This ensures that per process variables are not changed in one application domain, and giving unexpected results in another application domain. The primary intended use of `__declspec(process)` is to enable compile time initialization of a global variable, static member variable, or static local variable under **/clr:pure**.  \n  \n `process` is only valid when compiling with [/clr](../build/reference/clr-common-language-runtime-compilation.md) or **/clr:pure** and is not valid when compiling with **/clr:safe**.  \n  \n If you want each application domain to have its own copy of a global variable, use [appdomain](../cpp/appdomain.md).  \n  \n See [Application Domains and Visual C++](../dotnet/application-domains-and-visual-cpp.md) for more information.  \n  \n## See Also  \n [__declspec](../cpp/declspec.md)   \n [Keywords](../cpp/keywords-cpp.md)"}