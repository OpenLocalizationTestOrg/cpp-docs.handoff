{"nodes":[{"pos":[12,58],"content":"Advantages of Inline Assembly | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Advantages of Inline Assembly | Microsoft Docs","pos":[0,46]}]},{"content":"Advantages of Inline Assembly","pos":[680,709]},{"content":"Microsoft Specific","pos":[713,731]},{"content":"Because the inline assembler doesn't require separate assembly and link steps, it is more convenient than a separate assembler.","pos":[735,862]},{"content":"Inline assembly code can use any C variable or function name that is in scope, so it is easy to integrate it with your program's C code.","pos":[863,999]},{"content":"Because the assembly code can be mixed inline with C or C++ statements, it can do tasks that are cumbersome or impossible in C or C++.","pos":[1000,1134]},{"content":"The uses of inline assembly include:","pos":[1141,1177]},{"content":"Writing functions in assembly language.","pos":[1187,1226]},{"content":"Spot-optimizing speed-critical sections of code.","pos":[1236,1284]},{"content":"Making direct hardware access for device drivers.","pos":[1294,1343]},{"content":"Writing prolog and epilog code for \"naked\" calls.","pos":[1353,1402]},{"content":"Inline assembly is a special-purpose tool.","pos":[1409,1451]},{"content":"If you plan to port an application to different machines, you'll probably want to place machine-specific code in a separate module.","pos":[1452,1583]},{"content":"Because the inline assembler doesn't support all of Microsoft Macro Assembler's (MASM) macro and data directives, you may find it more convenient to use MASM for such modules.","pos":[1584,1759]},{"content":"END Microsoft Specific","pos":[1768,1790]},{"content":"See Also","pos":[1801,1809]},{"content":"Inline Assembler","pos":[1814,1830]}],"content":"---\ntitle: \"Advantages of Inline Assembly | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"assembler [C++], advantages\"\n  - \"inline assembly [C++], about inline assembly\"\n  - \"inline assembly [C++], using\"\nms.assetid: 94364d97-faa7-4bdf-8473-570956986c51\ncaps.latest.revision: 7\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Advantages of Inline Assembly\n## Microsoft Specific  \n Because the inline assembler doesn't require separate assembly and link steps, it is more convenient than a separate assembler. Inline assembly code can use any C variable or function name that is in scope, so it is easy to integrate it with your program's C code. Because the assembly code can be mixed inline with C or C++ statements, it can do tasks that are cumbersome or impossible in C or C++.  \n  \n The uses of inline assembly include:  \n  \n-   Writing functions in assembly language.  \n  \n-   Spot-optimizing speed-critical sections of code.  \n  \n-   Making direct hardware access for device drivers.  \n  \n-   Writing prolog and epilog code for \"naked\" calls.  \n  \n Inline assembly is a special-purpose tool. If you plan to port an application to different machines, you'll probably want to place machine-specific code in a separate module. Because the inline assembler doesn't support all of Microsoft Macro Assembler's (MASM) macro and data directives, you may find it more convenient to use MASM for such modules.  \n  \n **END Microsoft Specific**  \n  \n## See Also  \n [Inline Assembler](../../assembler/inline/inline-assembler.md)"}