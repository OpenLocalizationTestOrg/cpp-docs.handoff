{"nodes":[{"pos":[12,47],"content":"texture_view Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"texture_view Class | Microsoft Docs","pos":[0,35]}]},{"content":"texture_view Class","pos":[528,546]},{"content":"Provides read access and write access to a texture.","pos":[547,598]},{"content":"can only be used to read textures whose value type is <ph id=\"ph1\">`int`</ph>, <ph id=\"ph2\">`unsigned int`</ph>, or <ph id=\"ph3\">`float`</ph> that have default 32-bit bpse.","pos":[614,732],"source":" can only be used to read textures whose value type is `int`, `unsigned int`, or `float` that have default 32-bit bpse."},{"content":"To read other texture formats, use <ph id=\"ph1\">`texture_view&lt;const value_type, _Rank&gt;`</ph>.","pos":[733,808],"source":" To read other texture formats, use `texture_view<const value_type, _Rank>`."},{"content":"Syntax","pos":[817,823]},{"content":"Parameters","pos":[1220,1230]},{"content":"The type of the elements in the texture aggregate.","pos":[1250,1300]},{"content":"The rank of the <ph id=\"ph1\">`texture_view`</ph>.","pos":[1318,1349],"source":" The rank of the `texture_view`."},{"content":"Members","pos":[1358,1365]},{"content":"Public Typedefs","pos":[1375,1390]},{"content":"Name","pos":[1397,1401]},{"content":"Description","pos":[1402,1413]},{"content":"The type of the elements in the texture aggregates.","pos":[1464,1515]},{"pos":[1539,1720],"content":"The type of the coordinate used to specify a texel in the <ph id=\"ph1\">`texture_view`</ph>—that is, a <ph id=\"ph2\">`short_vector`</ph> that has the same rank as the associated texture that has a value type of <ph id=\"ph3\">`float`</ph>.","source":"The type of the coordinate used to specify a texel in the `texture_view`—that is, a `short_vector` that has the same rank as the associated texture that has a value type of `float`."},{"pos":[1746,1914],"content":"The return type used for gather operations—that is, a rank 4 <ph id=\"ph1\">`short_vector`</ph> that holds the four homogenous color components gathered from the four texel values sampled.","source":"The return type used for gather operations—that is, a rank 4 `short_vector` that holds the four homogenous color components gathered from the four texel values sampled."},{"content":"Public Constructors","pos":[1925,1944]},{"content":"Name","pos":[1951,1955]},{"content":"Description","pos":[1956,1967]},{"content":"texture_view::texture_view Constructor","pos":[2006,2044]},{"content":"Overloaded.","pos":[2053,2064]},{"content":"Constructs a <ph id=\"ph1\">`texture_view`</ph> instance.","pos":[2065,2102],"source":" Constructs a `texture_view` instance."},{"content":"texture_view::~texture_view Destructor","pos":[2108,2146]},{"pos":[2155,2192],"content":"Destroys the <ph id=\"ph1\">`texture_view`</ph> instance.","source":"Destroys the `texture_view` instance."},{"content":"Public Methods","pos":[2203,2217]},{"content":"Name","pos":[2224,2228]},{"content":"Description","pos":[2229,2240]},{"content":"texture_view::gather_alpha Method","pos":[2279,2312]},{"content":"Overloaded.","pos":[2329,2340]},{"content":"Samples the texture at the specified coordinates by using the specified sampling configuration and returns the alpha (w) components of the four sampled texels.","pos":[2341,2500]},{"content":"texture_view::gather_blue Method","pos":[2506,2538]},{"content":"Overloaded.","pos":[2554,2565]},{"content":"Samples the texture at the specified coordinates by using the specified sampling configuration and returns the blue (z) components of the four sampled texels.","pos":[2566,2724]},{"content":"texture_view::gather_green Method","pos":[2730,2763]},{"content":"Overloaded.","pos":[2780,2791]},{"content":"Samples the texture at the specified coordinates by using the specified sampling configuration and returns the green (y) components of the four sampled texels.","pos":[2792,2951]},{"content":"texture_view::gather_red Method","pos":[2957,2988]},{"content":"Overloaded.","pos":[3003,3014]},{"content":"Samples the texture at the specified coordinates by using the specified sampling configuration and returns the red (x) components of the four sampled texels.","pos":[3015,3172]},{"content":"texture_view::get Method","pos":[3178,3202]},{"content":"Overloaded.","pos":[3210,3221]},{"content":"Gets the element value by index.","pos":[3222,3254]},{"content":"texture_view::sample Method","pos":[3260,3287]},{"content":"Overloaded.","pos":[3298,3309]},{"content":"Samples the texture at the specified coordinates and level of detail by using the specified sampling configuration.","pos":[3310,3425]},{"content":"texture_view::set Method","pos":[3431,3455]},{"content":"Sets the value of an element by index.","pos":[3463,3501]},{"content":"Public Operators","pos":[3512,3528]},{"content":"Name","pos":[3535,3539]},{"content":"Description","pos":[3540,3551]},{"content":"texture_view::operator() Operator","pos":[3590,3623]},{"content":"Overloaded.","pos":[3638,3649]},{"content":"Gets the element value by index.","pos":[3650,3682]},{"content":"texture_view::operator[] Operator","pos":[3688,3721]},{"content":"Overloaded.","pos":[3737,3748]},{"content":"Gets the element value by index.","pos":[3749,3781]},{"content":"texture_view::operator= Operator","pos":[3787,3819]},{"content":"Overloaded.","pos":[3835,3846]},{"content":"Assignment operator.","pos":[3847,3867]},{"content":"Public Data Members","pos":[3878,3897]},{"content":"Name","pos":[3904,3908]},{"content":"Description","pos":[3909,3920]},{"content":"texture_view::value_type Data Member","pos":[3959,3995]},{"pos":[4010,4063],"content":"The value type of the elements of the <ph id=\"ph1\">`texture_view`</ph>.","source":"The value type of the elements of the `texture_view`."},{"content":"Inheritance Hierarchy","pos":[4073,4094]},{"content":"Requirements","pos":[4143,4155]},{"pos":[4159,4185],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> amp_graphics.h","source":"**Header:** amp_graphics.h"},{"pos":[4192,4228],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency::graphics","source":"**Namespace:** concurrency::graphics"},{"pos":[4259,4297],"content":"texture_view::~texture_view Destructor"},{"pos":[4301,4338],"content":"Destroys the <ph id=\"ph1\">`texture_view`</ph> instance.","source":"Destroys the `texture_view` instance."},{"pos":[4420,4458],"content":"texture_view::texture_view Constructor"},{"pos":[4462,4499],"content":"Constructs a <ph id=\"ph1\">`texture_view`</ph> instance.","source":"Constructs a `texture_view` instance."},{"content":"Parameters","pos":[5419,5429]},{"content":"[1, 2] Constructor","pos":[5443,5461]},{"content":"The <ph id=\"ph1\">`texture`</ph> on which the writable <ph id=\"ph2\">`texture_view`</ph> is created.","pos":[5465,5527],"source":" The `texture` on which the writable `texture_view` is created."},{"content":"[3, 4] Constructor","pos":[5534,5552]},{"content":"The <ph id=\"ph1\">`texture`</ph> on which the non-writable <ph id=\"ph2\">`texture_view`</ph> is created.","pos":[5556,5622],"source":" The `texture` on which the non-writable `texture_view` is created."},{"content":"[5] Copy Constructor","pos":[5641,5661]},{"content":"The source writable <ph id=\"ph1\">`texture_view`</ph>.","pos":[5665,5700],"source":" The source writable `texture_view`."},{"content":"[6, 7] Copy Constructor","pos":[5707,5730]},{"content":"The source non-writable <ph id=\"ph1\">`texture_view`</ph>.","pos":[5734,5773],"source":" The source non-writable `texture_view`."},{"content":"The specific mipmap level on the source <ph id=\"ph1\">`texture`</ph> that this writeable <ph id=\"ph2\">`texture_view`</ph> binds to.","pos":[5799,5893],"source":" The specific mipmap level on the source `texture` that this writeable `texture_view` binds to."},{"content":"The default value is 0, which represents the top level (most detailed) mip level.","pos":[5894,5975]},{"content":"Top level (most detailed) mip level for the view, relative to the specified <ph id=\"ph1\">`texture_view`</ph> object.","pos":[6006,6104],"source":" Top level (most detailed) mip level for the view, relative to the specified `texture_view` object."},{"content":"The number of mipmap levels accessible through the <ph id=\"ph1\">`texture_view`</ph>.","pos":[6128,6194],"source":" The number of mipmap levels accessible through the `texture_view`."},{"pos":[6231,6262],"content":"texture_view::gather_red Method"},{"content":"Samples the texture at the specified coordinates by using the specified sampling configuration and returns the red (x) components of the four sampled texels.","pos":[6266,6423]},{"content":"Parameters","pos":[6733,6743]},{"content":"The address mode to use to sample the <ph id=\"ph1\">`texture_view`</ph>.","pos":[6766,6819],"source":" The address mode to use to sample the `texture_view`."},{"content":"The address mode is the same for all dimensions.","pos":[6820,6868]},{"content":"The sampler configuration to use to sample the <ph id=\"ph1\">`texture_view`</ph>.","pos":[6889,6951],"source":" The sampler configuration to use to sample the `texture_view`."},{"content":"The coordinates to take the sample from.","pos":[6970,7010]},{"content":"Fractional coordinate values are used to interpolate between sample texels.","pos":[7011,7086]},{"content":"Return Value","pos":[7096,7108]},{"content":"A rank 4 short vector containing the red (x) component of the 4 sampled texel values.","pos":[7112,7197]},{"pos":[7236,7269],"content":"texture_view::gather_green Method"},{"content":"Samples the texture at the specified coordinates by using the specified sampling configuration and returns the green (y) components of the four sampled texels.","pos":[7273,7432]},{"content":"Parameters","pos":[7746,7756]},{"content":"The address mode to use to sample the <ph id=\"ph1\">`texture_view`</ph>.","pos":[7779,7832],"source":" The address mode to use to sample the `texture_view`."},{"content":"The address mode is the same for all dimensions.","pos":[7833,7881]},{"content":"The sampler configuration to use to sample the <ph id=\"ph1\">`texture_view`</ph>.","pos":[7902,7964],"source":" The sampler configuration to use to sample the `texture_view`."},{"content":"The coordinates to take the sample from.","pos":[7983,8023]},{"content":"Fractional coordinate values are used to interpolate between sample texels.","pos":[8024,8099]},{"content":"Return Value","pos":[8109,8121]},{"content":"A rank 4 short vector containing the green (y) component of the 4 sampled texel values.","pos":[8125,8212]},{"pos":[8250,8282],"content":"texture_view::gather_blue Method"},{"content":"Samples the texture at the specified coordinates by using the specified sampling configuration and returns the blue (z) components of the four sampled texels.","pos":[8286,8444]},{"content":"Parameters","pos":[8756,8766]},{"content":"The address mode to use to sample the <ph id=\"ph1\">`texture_view`</ph>.","pos":[8789,8842],"source":" The address mode to use to sample the `texture_view`."},{"content":"The address mode is the same for all dimensions.","pos":[8843,8891]},{"content":"The sampler configuration to use to sample the <ph id=\"ph1\">`texture_view`</ph>.","pos":[8912,8974],"source":" The sampler configuration to use to sample the `texture_view`."},{"content":"The coordinates to take the sample from.","pos":[8993,9033]},{"content":"Fractional coordinate values are used to interpolate between sample texels.","pos":[9034,9109]},{"content":"Return Value","pos":[9119,9131]},{"content":"A rank 4 short vector containing the red (x) component of the 4 sampled texel values.","pos":[9135,9220]},{"pos":[9259,9292],"content":"texture_view::gather_alpha Method"},{"content":"Samples the texture at the specified coordinates by using the specified sampling configuration and returns the alpha (w) components of the four sampled texels.","pos":[9296,9455]},{"content":"Parameters","pos":[9769,9779]},{"content":"The address mode to use to sample the <ph id=\"ph1\">`texture_view`</ph>.","pos":[9802,9855],"source":" The address mode to use to sample the `texture_view`."},{"content":"The address mode is the same for all dimensions.","pos":[9856,9904]},{"content":"The sampler configuration to use to sample the <ph id=\"ph1\">`texture_view`</ph>.","pos":[9925,9987],"source":" The sampler configuration to use to sample the `texture_view`."},{"content":"The coordinates to take the sample from.","pos":[10006,10046]},{"content":"Fractional coordinate values are used to interpolate between sample texels.","pos":[10047,10122]},{"content":"Return Value","pos":[10132,10144]},{"content":"A rank 4 short vector containing the alpha (w) component of the 4 sampled texel values.","pos":[10148,10235]},{"pos":[10265,10289],"content":"texture_view::get Method"},{"content":"Gets the value of the element at the specified index.","pos":[10293,10346]},{"content":"Parameters","pos":[10553,10563]},{"content":"The index of the element to get, possibly multi-dimensional.","pos":[10579,10639]},{"content":"The mipmap level from which we should get the value.","pos":[10662,10714]},{"content":"The default value 0 represents the most detailed mipmap level.","pos":[10715,10777]},{"content":"Return Value","pos":[10787,10799]},{"content":"The value of the element.","pos":[10803,10828]},{"pos":[10866,10898],"content":"texture_view::operator= Operator"},{"pos":[10902,11001],"content":"Assigns a view of the same texture as the specified <ph id=\"ph1\">`texture_view`</ph> to this <ph id=\"ph2\">`texture_view`</ph> instance.","source":"Assigns a view of the same texture as the specified `texture_view` to this `texture_view` instance."},{"content":"Parameters","pos":[11468,11478]},{"content":"[1, 2] Copy Constructor","pos":[11494,11517]},{"content":"A writable <ph id=\"ph1\">`texture_view`</ph> object.","pos":[11521,11554],"source":" A writable `texture_view` object."},{"content":"[3] Copy Constructor","pos":[11561,11581]},{"content":"A non-writable <ph id=\"ph1\">`texture_view`</ph> object.","pos":[11585,11622],"source":" A non-writable `texture_view` object."},{"content":"Return Value","pos":[11632,11644]},{"pos":[11648,11692],"content":"A reference to this <ph id=\"ph1\">`texture_view`</ph> instance.","source":"A reference to this `texture_view` instance."},{"pos":[11730,11763],"content":"texture_view::operator[] Operator"},{"content":"Returns the element value by index.","pos":[11767,11802]},{"content":"Parameters","pos":[12098,12108]},{"content":"The index, possibly multi-dimensional.","pos":[12124,12162]},{"content":"The one-dimensional index.","pos":[12178,12204]},{"content":"Return Value","pos":[12214,12226]},{"pos":[12230,12268],"content":"The element value indexed by <ph id=\"ph1\">`_Index`</ph>.","source":"The element value indexed by `_Index`."},{"pos":[12305,12338],"content":"texture_view::operator() Operator"},{"content":"Returns the element value by index.","pos":[12342,12377]},{"content":"Parameters","pos":[13035,13045]},{"content":"The index, possibly multi-dimensional.","pos":[13061,13099]},{"content":"The most-significant component of the index.","pos":[13115,13159]},{"content":"The next-to-most-significant component of the index.","pos":[13175,13227]},{"content":"The least-significant component of the index.","pos":[13243,13288]},{"content":"Return Value","pos":[13298,13310]},{"pos":[13314,13352],"content":"The element value indexed by <ph id=\"ph1\">`_Index`</ph>.","source":"The element value indexed by `_Index`."},{"pos":[13385,13412],"content":"texture_view::sample Method"},{"content":"Samples the texture at the specified coordinates and level of detail by using the specified sampling configuration.","pos":[13416,13531]},{"content":"Parameters","pos":[13927,13937]},{"content":"The filter mode to use to sample the texture_view.","pos":[13959,14009]},{"content":"The filter mode is the same for the minimization, maximization, and mipmap filters.","pos":[14010,14093]},{"content":"The address mode to use to sample the texture_view.","pos":[14119,14170]},{"content":"The address mode is the same for all dimensions.","pos":[14171,14219]},{"content":"The sampler configuration to use to sample the texture_view.","pos":[14240,14300]},{"content":"The coordinates to take the sample from.","pos":[14319,14359]},{"content":"Fractional coordinate values are used to interpolate between texel values.","pos":[14360,14434]},{"content":"The value specifies the mipmap level to sample from.","pos":[14463,14515]},{"content":"Fractional values are used to interpolate between two mipmap levels.","pos":[14516,14584]},{"content":"The default level of detail is 0, which represents the most detailed mip level.","pos":[14585,14664]},{"content":"Return Value","pos":[14674,14686]},{"content":"The interpolated sample value.","pos":[14690,14720]},{"pos":[14750,14774],"content":"texture_view::set Method"},{"content":"Sets the value of the element at the specified index to the specified value.","pos":[14778,14854]},{"content":"Parameters","pos":[14973,14983]},{"content":"The index of the element to set, possibly multi-dimensional.","pos":[14999,15059]},{"content":"The value to set the element to.","pos":[15077,15109]},{"pos":[15146,15182],"content":"texture_view::value_type Data Member"},{"content":"The value type of the elements of the texture_view.","pos":[15186,15237]},{"content":"See Also","pos":[15309,15317]},{"content":"Concurrency::graphics Namespace","pos":[15322,15353]}],"content":"---\ntitle: \"texture_view Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: 6ec2e289-1626-4727-9592-07981cf1d27d\ncaps.latest.revision: 11\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# texture_view Class\nProvides read access and write access to a texture. `texture_view` can only be used to read textures whose value type is `int`, `unsigned int`, or `float` that have default 32-bit bpse. To read other texture formats, use `texture_view<const value_type, _Rank>`.  \n  \n## Syntax  \n  \n```  \ntemplate <\n    typename value_type,  \n    int _Rank  \n>  \nclass texture_view;  \n \ntemplate <\n    typename value_type,  \n    int _Rank  \n>  \nclass texture_view : public details::_Texture_base<value_type, _Rank>;  \n \ntemplate <\n    typename value_type,  \n    int _Rank  \n>  \nclass texture_view<const value_type, _Rank> : public details::_Texture_base<value_type, _Rank>;  \n```  \n  \n#### Parameters  \n `value_type`  \n The type of the elements in the texture aggregate.  \n  \n `_Rank`  \n The rank of the `texture_view`.  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`value_type`|The type of the elements in the texture aggregates.|  \n|`coordinates_type`|The type of the coordinate used to specify a texel in the `texture_view`—that is, a `short_vector` that has the same rank as the associated texture that has a value type of `float`.|  \n|`gather_return_type`|The return type used for gather operations—that is, a rank 4 `short_vector` that holds the four homogenous color components gathered from the four texel values sampled.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[texture_view::texture_view Constructor](#ctor)|Overloaded. Constructs a `texture_view` instance.|  \n|[texture_view::~texture_view Destructor](#ctor)|Destroys the `texture_view` instance.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[texture_view::gather_alpha Method](#gather_alpha)|Overloaded. Samples the texture at the specified coordinates by using the specified sampling configuration and returns the alpha (w) components of the four sampled texels.|  \n|[texture_view::gather_blue Method](#gather_blue)|Overloaded. Samples the texture at the specified coordinates by using the specified sampling configuration and returns the blue (z) components of the four sampled texels.|  \n|[texture_view::gather_green Method](#gather_green)|Overloaded. Samples the texture at the specified coordinates by using the specified sampling configuration and returns the green (y) components of the four sampled texels.|  \n|[texture_view::gather_red Method](#gather_red)|Overloaded. Samples the texture at the specified coordinates by using the specified sampling configuration and returns the red (x) components of the four sampled texels.|  \n|[texture_view::get Method](#get)|Overloaded. Gets the element value by index.|  \n|[texture_view::sample Method](#sample)|Overloaded. Samples the texture at the specified coordinates and level of detail by using the specified sampling configuration.|  \n|[texture_view::set Method](#set)|Sets the value of an element by index.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[texture_view::operator() Operator](#operator__)|Overloaded. Gets the element value by index.|  \n|[texture_view::operator[] Operator](#operator_at)|Overloaded. Gets the element value by index.|  \n|[texture_view::operator= Operator](#operator_eq)|Overloaded. Assignment operator.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[texture_view::value_type Data Member](#value_type)|The value type of the elements of the `texture_view`.|  \n  \n## Inheritance Hierarchy  \n `_Texture_base`  \n  \n `texture_view`  \n  \n## Requirements  \n **Header:** amp_graphics.h  \n  \n **Namespace:** concurrency::graphics  \n  \n##  <a name=\"dtor\"></a>  texture_view::~texture_view Destructor  \n Destroys the `texture_view` instance.  \n  \n```  \n~texture_view() restrict(amp, cpu);\n```  \n  \n##  <a name=\"ctor\"></a>  texture_view::texture_view Constructor  \n Constructs a `texture_view` instance.  \n  \n```  \ntexture_view(// [1] constructor  \n    texture<value_type, _Rank>& _Src) restrict(amp);\n\n \ntexture_view(// [2] constructor  \n    texture<value_type, _Rank>& _Src,  \n    unsigned int _Mipmap_level = 0) restrict(cpu);\n\n \ntexture_view(// [3] constructor  \n    const texture<value_type, _Rank>& _Src) restrict(amp);\n\n \ntexture_view(// [4] constructor  \n    const texture<value_type, _Rank>& _Src,  \n    unsigned int _Most_detailed_mip,  \n    unsigned int _Mip_levels) restrict(cpu);\n\n \ntexture_view(// [5] copy constructor  \n    const texture_view<value_type, _Rank>& _Other) restrict(amp, cpu);\n\n \ntexture_view(// [6] copy constructor  \n    const texture_view<const value_type, _Rank>& _Other) restrict(amp, cpu);\n\n \ntexture_view(// [7] copy constructor  \n    const texture_view<const value_type, _Rank>& _Other,  \n    unsigned int _Most_detailed_mip,  \n    unsigned int _Mip_levels) restrict(cpu);\n```  \n  \n### Parameters  \n `_Src`  \n [1, 2] Constructor  \n The `texture` on which the writable `texture_view` is created.  \n  \n [3, 4] Constructor  \n The `texture` on which the non-writable `texture_view` is created.  \n  \n `_Other`  \n [5] Copy Constructor  \n The source writable `texture_view`.  \n  \n [6, 7] Copy Constructor  \n The source non-writable `texture_view`.  \n  \n `_Mipmap_level`  \n The specific mipmap level on the source `texture` that this writeable `texture_view` binds to. The default value is 0, which represents the top level (most detailed) mip level.  \n  \n `_Most_detailed_mip`  \n Top level (most detailed) mip level for the view, relative to the specified `texture_view` object.  \n  \n `_Mip_levels`  \n The number of mipmap levels accessible through the `texture_view`.  \n  \n##  <a name=\"gather_red\"></a>  texture_view::gather_red Method  \n Samples the texture at the specified coordinates by using the specified sampling configuration and returns the red (x) components of the four sampled texels.  \n  \n```  \nconst gather_return_type gather_red(\n    const sampler& _Sampler,  \n    const coordinates_type& _Coord) const restrict(amp);\n\n \ntemplate<\n    address_mode _Address_mode = address_clamp  \n>  \nconst gather_return_type gather_red(\n    const coordinates_type& _Coord) const restrict(amp);\n```  \n  \n### Parameters  \n `_Address_mode`  \n The address mode to use to sample the `texture_view`. The address mode is the same for all dimensions.  \n  \n `_Sampler`  \n The sampler configuration to use to sample the `texture_view`.  \n  \n `_Coord`  \n The coordinates to take the sample from. Fractional coordinate values are used to interpolate between sample texels.  \n  \n### Return Value  \n A rank 4 short vector containing the red (x) component of the 4 sampled texel values.  \n  \n##  <a name=\"gather_green\"></a>  texture_view::gather_green Method  \n Samples the texture at the specified coordinates by using the specified sampling configuration and returns the green (y) components of the four sampled texels.  \n  \n```  \nconst gather_return_type gather_green(\n    const sampler& _Sampler,  \n    const coordinates_type& _Coord) const restrict(amp);\n\n \ntemplate<\n    address_mode _Address_mode = address_clamp  \n>  \nconst gather_return_type gather_green(\n    const coordinates_type& _Coord) const restrict(amp);\n```  \n  \n### Parameters  \n `_Address_mode`  \n The address mode to use to sample the `texture_view`. The address mode is the same for all dimensions.  \n  \n `_Sampler`  \n The sampler configuration to use to sample the `texture_view`.  \n  \n `_Coord`  \n The coordinates to take the sample from. Fractional coordinate values are used to interpolate between sample texels.  \n  \n### Return Value  \n A rank 4 short vector containing the green (y) component of the 4 sampled texel values.  \n  \n##  <a name=\"gather_blue\"></a>  texture_view::gather_blue Method  \n Samples the texture at the specified coordinates by using the specified sampling configuration and returns the blue (z) components of the four sampled texels.  \n  \n```  \nconst gather_return_type gather_blue(\n    const sampler& _Sampler,  \n    const coordinates_type& _Coord) const restrict(amp);\n\n \ntemplate<\n    address_mode _Address_mode = address_clamp  \n>  \nconst gather_return_type gather_blue(\n    const coordinates_type& _Coord) const restrict(amp);\n```  \n  \n### Parameters  \n `_Address_mode`  \n The address mode to use to sample the `texture_view`. The address mode is the same for all dimensions.  \n  \n `_Sampler`  \n The sampler configuration to use to sample the `texture_view`.  \n  \n `_Coord`  \n The coordinates to take the sample from. Fractional coordinate values are used to interpolate between sample texels.  \n  \n### Return Value  \n A rank 4 short vector containing the red (x) component of the 4 sampled texel values.  \n  \n##  <a name=\"gather_alpha\"></a>  texture_view::gather_alpha Method  \n Samples the texture at the specified coordinates by using the specified sampling configuration and returns the alpha (w) components of the four sampled texels.  \n  \n```  \nconst gather_return_type gather_alpha(\n    const sampler& _Sampler,  \n    const coordinates_type& _Coord) const restrict(amp);\n\n \ntemplate<\n    address_mode _Address_mode = address_clamp  \n>  \nconst gather_return_type gather_alpha(\n    const coordinates_type& _Coord) const restrict(amp);\n```  \n  \n### Parameters  \n `_Address_mode`  \n The address mode to use to sample the `texture_view`. The address mode is the same for all dimensions.  \n  \n `_Sampler`  \n The sampler configuration to use to sample the `texture_view`.  \n  \n `_Coord`  \n The coordinates to take the sample from. Fractional coordinate values are used to interpolate between sample texels.  \n  \n### Return Value  \n A rank 4 short vector containing the alpha (w) component of the 4 sampled texel values.  \n  \n##  <a name=\"get\"></a>  texture_view::get Method  \n Gets the value of the element at the specified index.  \n  \n```  \nconst value_type get(\n    const index<_Rank>& _Index) const restrict(amp);\n\n \nvalue_type get(\n    const index<_Rank>& _Index,  \n    unsigned int _Mip_level = 0) const restrict(amp);\n```  \n  \n### Parameters  \n `_Index`  \n The index of the element to get, possibly multi-dimensional.  \n  \n `_Mip_level`  \n The mipmap level from which we should get the value. The default value 0 represents the most detailed mipmap level.  \n  \n### Return Value  \n The value of the element.  \n  \n##  <a name=\"operator_eq\"></a>  texture_view::operator= Operator  \n Assigns a view of the same texture as the specified `texture_view` to this `texture_view` instance.  \n  \n```  \ntexture_view<value_type, _Rank>& operator= (// [1] copy constructor  \n    const texture_view<value_type, _Rank>& _Other) restrict(amp, cpu);\n\n \ntexture_view<const value_type, _Rank>& operator= (// [2] copy constructor  \n    const texture_view<value_type, _Rank>& _Other) restrict(cpu);\n\n \ntexture_view<const value_type, _Rank>& operator= (// [3] copy constructor  \n    const texture_view<const value_type, _Rank>& _Other) restrict(amp, cpu);\n```  \n  \n### Parameters  \n `_Other`  \n [1, 2] Copy Constructor  \n A writable `texture_view` object.  \n  \n [3] Copy Constructor  \n A non-writable `texture_view` object.  \n  \n### Return Value  \n A reference to this `texture_view` instance.  \n  \n##  <a name=\"operator_at\"></a>  texture_view::operator[] Operator  \n Returns the element value by index.  \n  \n```  \nconst value_type operator[] (const index<_Rank>& _Index) const restrict(amp);\n\n \nconst value_type operator[] (int _I0) const restrict(amp);\n\n \nvalue_type operator[] (const index<_Rank>& _Index) const restrict(amp);\n\n \nvalue_type operator[] (int _I0) const restrict(amp);\n```  \n  \n### Parameters  \n `_Index`  \n The index, possibly multi-dimensional.  \n  \n `_I0`  \n The one-dimensional index.  \n  \n### Return Value  \n The element value indexed by `_Index`.  \n  \n##  <a name=\"operator__\"></a>  texture_view::operator() Operator  \n Returns the element value by index.  \n  \n```  \nconst value_type operator() (\n    const index<_Rank>& _Index) const restrict(amp);\n\n \nconst value_type operator() (\n    int _I0) const restrict(amp);\n\n \nconst value_type operator() (\n    int _I0,   int _I1) const restrict(amp);\n\n \nconst value_type operator() (\n    int _I0,  \n    int _I1,  \n    int _I2) const restrict(amp);\n\n \nvalue_type operator() (\n    const index<_Rank>& _Index) const restrict(amp);\n\n \nvalue_type operator() (\n    int _I0) const restrict(amp);\n\n \nvalue_type operator() (\n    int _I0,  \n    int _I1) const restrict(amp);\n\n \nvalue_type operator() (\n    int _I0,  \n    int _I1,  \n    int _I2) const restrict(amp);\n```  \n  \n### Parameters  \n `_Index`  \n The index, possibly multi-dimensional.  \n  \n `_I0`  \n The most-significant component of the index.  \n  \n `_I1`  \n The next-to-most-significant component of the index.  \n  \n `_I2`  \n The least-significant component of the index.  \n  \n### Return Value  \n The element value indexed by `_Index`.  \n  \n##  <a name=\"sample\"></a>  texture_view::sample Method  \n Samples the texture at the specified coordinates and level of detail by using the specified sampling configuration.  \n  \n```  \nvalue_type sample(\n    const sampler& _Sampler,  \n    const coordinates_type& _Coord,  \n    float _Level_of_detail = 0.0f) const restrict(amp);\n\n \ntemplate<\n    filter_mode _Filter_mode = filter_linear,  \n    address_mode _Address_mode = address_clamp  \n>  \nvalue_type sample(\n    const coordinates_type& _Coord,  \n    float _Level_of_detail = 0.0f) const restrict(amp);\n```  \n  \n### Parameters  \n `_Filter_mode`  \n The filter mode to use to sample the texture_view. The filter mode is the same for the minimization, maximization, and mipmap filters.  \n  \n `_Address_mode`  \n The address mode to use to sample the texture_view. The address mode is the same for all dimensions.  \n  \n `_Sampler`  \n The sampler configuration to use to sample the texture_view.  \n  \n `_Coord`  \n The coordinates to take the sample from. Fractional coordinate values are used to interpolate between texel values.  \n  \n `_Level_of_detail`  \n The value specifies the mipmap level to sample from. Fractional values are used to interpolate between two mipmap levels. The default level of detail is 0, which represents the most detailed mip level.  \n  \n### Return Value  \n The interpolated sample value.  \n  \n##  <a name=\"set\"></a>  texture_view::set Method  \n Sets the value of the element at the specified index to the specified value.  \n  \n```  \nvoid set(\n    const index<_Rank>& _Index,  \n    const value_type& value) const restrict(amp);\n```  \n  \n### Parameters  \n `_Index`  \n The index of the element to set, possibly multi-dimensional.  \n  \n `value`  \n The value to set the element to.  \n  \n##  <a name=\"value_type\"></a>  texture_view::value_type Data Member  \n The value type of the elements of the texture_view.  \n  \n```  \ntypedef typename const value_type value_type;  \n```  \n  \n## See Also  \n [Concurrency::graphics Namespace](concurrency-graphics-namespace.md)\n"}