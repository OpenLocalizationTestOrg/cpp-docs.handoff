{"nodes":[{"pos":[12,40],"content":"tuple Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"tuple Class | Microsoft Docs","pos":[0,28]}]},{"content":"tuple Class","pos":[714,725]},{"content":"Wraps a fixed-length sequence of elements.","pos":[726,768]},{"content":"Syntax","pos":[777,783]},{"content":"class tuple {","pos":[789,802]},{"content":"public:","pos":[808,815]},{"content":"tuple(); explicit tuple(P1, P2, ..., PN); // 0 &lt;N","pos":[821,876],"source":"   tuple();\n   explicit tuple(P1, P2, ..., PN);\n   // 0 <N"},{"content":"tuple(const tuple&amp;); template <ph id=\"ph1\">\\&lt;</ph>class U1, class U2, ..., class UN&gt;","pos":[882,951],"source":"   tuple(const tuple&);\n   template \\<class U1, class U2, ..., class UN>"},{"content":"tuple(const tuple<ph id=\"ph1\">\\&lt;</ph>U1, U2, ..., UN&gt;&amp;); template <ph id=\"ph2\">\\&lt;</ph>class U1, class U2&gt;","pos":[957,1029],"source":"   tuple(const tuple\\<U1, U2, ..., UN>&);\n   template \\<class U1, class U2>"},{"content":"tuple(const pair<ph id=\"ph1\">\\&lt;</ph>U1, U2&gt;&amp;); // N == 2","pos":[1035,1076],"source":"   tuple(const pair\\<U1, U2>&);\n   // N == 2"},{"content":"void swap(tuple&amp; right); tuple&amp; operator=(const tuple&amp;); template <ph id=\"ph1\">\\&lt;</ph>class U1, class U2, ..., class UN&gt;","pos":[1082,1190],"source":"   void swap(tuple& right);\n   tuple& operator=(const tuple&);\n   template \\<class U1, class U2, ..., class UN>"},{"content":"tuple&amp; operator=(const tuple<ph id=\"ph1\">\\&lt;</ph>U1, U2, ..., UN&gt;&amp;); template <ph id=\"ph2\">\\&lt;</ph>class U1, class U2&gt;","pos":[1196,1279],"source":"   tuple& operator=(const tuple\\<U1, U2, ..., UN>&);\n   template \\<class U1, class U2>"},{"content":"tuple&amp; operator=(const pair<ph id=\"ph1\">\\&lt;</ph>U1, U2&gt;&amp;); // N == 2","pos":[1285,1337],"source":"   tuple& operator=(const pair\\<U1, U2>&);\n   // N == 2"},{"content":"};","pos":[1343,1345]},{"content":"Parameters","pos":[1356,1366]},{"content":"The type of the Nth tuple element.","pos":[1378,1412]},{"content":"Remarks","pos":[1421,1428]},{"content":"The template class describes an object that stores N objects of types <ph id=\"ph1\">`T1`</ph>, <ph id=\"ph2\">`T2`</ph>, ..., <ph id=\"ph3\">`TN`</ph>, respectively, where where <ph id=\"ph4\">`0 &lt;= N &lt;= Nmax`</ph>.","pos":[1432,1568],"source":"The template class describes an object that stores N objects of types `T1`, `T2`, ..., `TN`, respectively, where where `0 <= N <= Nmax`."},{"content":"The extent of a tuple instance <ph id=\"ph1\">`tuple&lt;T1, T2, ..., TN&gt;`</ph> is the number <ph id=\"ph2\">`N`</ph> of its template arguments.","pos":[1569,1669],"source":" The extent of a tuple instance `tuple<T1, T2, ..., TN>` is the number `N` of its template arguments."},{"content":"The index of the template argument <ph id=\"ph1\">`Ti`</ph> and of the corresponding stored value of that type is <ph id=\"ph2\">`i - 1`</ph>.","pos":[1670,1772],"source":" The index of the template argument `Ti` and of the corresponding stored value of that type is `i - 1`."},{"content":"Thus, while we number the types from 1 to N in this documentation, the corresponding index values range from 0 to N - 1.","pos":[1773,1893]},{"content":"Example","pos":[1902,1909]},{"content":"Requirements","pos":[3339,3351]},{"pos":[3355,3375],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>tuple&gt;","source":"**Header:** \\<tuple>"},{"pos":[3382,3400],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[3445,3461],"content":"tuple::operator="},{"pos":[3465,3490],"content":"Assigns a <ph id=\"ph1\">`tuple`</ph> object.","source":"Assigns a `tuple` object."},{"content":"Parameters","pos":[3852,3862]},{"content":"The type of the Nth copied tuple element.","pos":[3874,3915]},{"content":"The tuple to copy from.","pos":[3933,3956]},{"content":"Remarks","pos":[3966,3973]},{"content":"The first two member operators assign the elements of <ph id=\"ph1\">`right`</ph> to the corresponding elements of <ph id=\"ph2\">`*this`</ph>.","pos":[3977,4080],"source":"The first two member operators assign the elements of `right` to the corresponding elements of `*this`."},{"content":"The third member operator assigns <ph id=\"ph1\">`right.first`</ph> to the element at index 0 of <ph id=\"ph2\">`*this`</ph> and <ph id=\"ph3\">`right.second`</ph> to the element at index 1.","pos":[4081,4211],"source":" The third member operator assigns `right.first` to the element at index 0 of `*this` and `right.second` to the element at index 1."},{"content":"All three member operators return <ph id=\"ph1\">`*this`</ph>.","pos":[4212,4254],"source":" All three member operators return `*this`."},{"pos":[4261,4411],"content":"The remaining member operators are analogs to earlier ones, but with <bpt id=\"p1\">[</bpt>Rvalue Reference Declarator: &amp;&amp;<ept id=\"p1\">](../cpp/rvalue-reference-declarator-amp-amp.md)</ept>.","source":"The remaining member operators are analogs to earlier ones, but with [Rvalue Reference Declarator: &&](../cpp/rvalue-reference-declarator-amp-amp.md)."},{"content":"Example","pos":[4421,4428]},{"pos":[5562,5572],"content":"tuple:swap"},{"content":"Exchanges the elements of two tuples.","pos":[5576,5613]},{"content":"Parameters","pos":[5732,5742]},{"content":"Parameter","pos":[5749,5758]},{"content":"Description","pos":[5759,5770]},{"pos":[5820,5895],"content":"A tuple whose elements are to be exchanged with those of the tuple <ph id=\"ph1\">`right`</ph>.","source":"A tuple whose elements are to be exchanged with those of the tuple `right`."},{"pos":[5908,5982],"content":"A tuple whose elements are to be exchanged with those of the tuple <ph id=\"ph1\">`left`</ph>.","source":"A tuple whose elements are to be exchanged with those of the tuple `left`."},{"content":"Remarks","pos":[5993,6000]},{"pos":[6004,6045],"content":"The function executes <ph id=\"ph1\">`left.swap(right)`</ph>.","source":"The function executes `left.swap(right)`."},{"pos":[6084,6096],"content":"tuple::tuple"},{"pos":[6100,6128],"content":"Constructs a <ph id=\"ph1\">`tuple`</ph> object.","source":"Constructs a `tuple` object."},{"content":"Parameters","pos":[6726,6736]},{"content":"The type of the Nth copied tuple element.","pos":[6748,6789]},{"content":"The tuple to copy from.","pos":[6807,6830]},{"content":"Remarks","pos":[6840,6847]},{"content":"The first constructor constructs an object whose elements are default constructed.","pos":[6851,6933]},{"pos":[6940,7118],"content":"The second constructor constructs an object whose elements are copy constructed from the arguments <ph id=\"ph1\">`P1`</ph>, <ph id=\"ph2\">`P2`</ph>, ..., <ph id=\"ph3\">`PN`</ph> with each <ph id=\"ph4\">`Pi`</ph> initializing the element at index <ph id=\"ph5\">`i - 1`</ph>.","source":"The second constructor constructs an object whose elements are copy constructed from the arguments `P1`, `P2`, ..., `PN` with each `Pi` initializing the element at index `i - 1`."},{"pos":[7125,7257],"content":"The third and fourth constructors construct an object whose elements are copy constructed from the corresponding element of <ph id=\"ph1\">`right`</ph>.","source":"The third and fourth constructors construct an object whose elements are copy constructed from the corresponding element of `right`."},{"pos":[7264,7440],"content":"The fifth constructor constructs an object whose element at index 0 is copy constructed from <ph id=\"ph1\">`right.first`</ph> and whose element at index 1 is copy constructed from <ph id=\"ph2\">`right.second`</ph>.","source":"The fifth constructor constructs an object whose element at index 0 is copy constructed from `right.first` and whose element at index 1 is copy constructed from `right.second`."},{"pos":[7447,7593],"content":"The remaining constructors are analogs to earlier ones, but with <bpt id=\"p1\">[</bpt>Rvalue Reference Declarator: &amp;&amp;<ept id=\"p1\">](../cpp/rvalue-reference-declarator-amp-amp.md)</ept>.","source":"The remaining constructors are analogs to earlier ones, but with [Rvalue Reference Declarator: &&](../cpp/rvalue-reference-declarator-amp-amp.md)."},{"content":"Example","pos":[7603,7610]},{"content":"See Also","pos":[9336,9344]},{"content":"tuple&gt;","pos":[9351,9357],"source":"tuple>"},{"content":"make_tuple Function","pos":[9394,9413]}],"content":"---\ntitle: \"tuple Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"tr1::tuple\"\n  - \"std.tr1.tuple\"\n  - \"tuple\"\n  - \"tr1.tuple\"\n  - \"std::tr1::tuple\"\n  - \"tuple/std::tr1::tuple\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"tuple class\"\n  - \"tuple class [TR1]\"\nms.assetid: c38749be-ae4d-41f3-98ea-6aa3250de9a3\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# tuple Class\nWraps a fixed-length sequence of elements.  \n  \n## Syntax  \n  \nclass tuple {  \n   public:  \n   tuple();\n   explicit tuple(P1, P2, ..., PN);\n   // 0 <N  \n   tuple(const tuple&);\n   template \\<class U1, class U2, ..., class UN>  \n   tuple(const tuple\\<U1, U2, ..., UN>&);\n   template \\<class U1, class U2>  \n   tuple(const pair\\<U1, U2>&);\n   // N == 2  \n   void swap(tuple& right);\n   tuple& operator=(const tuple&);\n   template \\<class U1, class U2, ..., class UN>  \n   tuple& operator=(const tuple\\<U1, U2, ..., UN>&);\n   template \\<class U1, class U2>  \n   tuple& operator=(const pair\\<U1, U2>&);\n   // N == 2  \n   };  \n  \n#### Parameters  \n `TN`  \n The type of the Nth tuple element.  \n  \n## Remarks  \n The template class describes an object that stores N objects of types `T1`, `T2`, ..., `TN`, respectively, where where `0 <= N <= Nmax`. The extent of a tuple instance `tuple<T1, T2, ..., TN>` is the number `N` of its template arguments. The index of the template argument `Ti` and of the corresponding stored value of that type is `i - 1`. Thus, while we number the types from 1 to N in this documentation, the corresponding index values range from 0 to N - 1.  \n  \n## Example  \n  \n```cpp  \n// tuple.cpp  \n// compile with: /EHsc  \n  \n#include <vector>  \n#include <iomanip>  \n#include <iostream>  \n#include <tuple>  \n#include <string>  \n  \nusing namespace std;  \n  \ntypedef tuple <int, double, string> ids;  \n  \nvoid print_ids(const ids& i)  \n{  \n   cout << \"( \"  \n        << get<0>(i) << \", \"   \n        << get<1>(i) << \", \"   \n        << get<2>(i) << \" ).\" << endl;  \n}  \n  \nint main( )  \n{  \n   // Using the constructor to declare and initialize a tuple  \n   ids p1(10, 1.1e-2, \"one\");  \n  \n   // Compare using the helper function to declare and initialize a tuple  \n   ids p2;  \n   p2 = make_tuple(10, 2.22e-1, \"two\");  \n  \n   // Making a copy of a tuple  \n   ids p3(p1);  \n  \n   cout.precision(3);  \n   cout << \"The tuple p1 is: ( \";  \n   print_ids(p1);  \n   cout << \"The tuple p2 is: ( \";  \n   print_ids(p2);  \n   cout << \"The tuple p3 is: ( \";  \n   print_ids(p3);  \n  \n   vector<ids> v;  \n  \n   v.push_back(p1);  \n   v.push_back(p2);  \n   v.push_back(make_tuple(3, 3.3e-2, \"three\"));  \n  \n   cout << \"The tuples in the vector are\" << endl;  \n   for(vector<ids>::const_iterator i = v.begin(); i != v.end(); ++i)  \n   {  \n      print_ids(*i);  \n   }  \n}  \n\\* Output:   \nThe tuple p1 is: ( 10, 0.011, one ).  \nThe tuple p2 is: ( 10, 0.222, two ).  \nThe tuple p3 is: ( 10, 0.011, one ).  \nThe tuples in the vector are  \n( 10, 0.011, one ).  \n( 10, 0.222, two ).  \n( 3, 0.033, three ).  \n*\\  \n```  \n  \n## Requirements  \n **Header:** \\<tuple>  \n  \n **Namespace:** std  \n  \n##  <a name=\"tuple__operator_eq\"></a>  tuple::operator=  \n Assigns a `tuple` object.  \n  \n```  \ntuple& operator=(const tuple& right);\n\ntemplate <class U1, class U2, ..., class UN>  \ntuple& operator=(const tuple<U1, U2, ..., UN>& right);\n\ntemplate <class U1, class U2>  \ntuple& operator=(const pair<U1, U2>& right);\n// N == 2  \ntuple& operator=(tuple&& right);\n\ntemplate <class U1, class U2>  \ntuple& operator=(pair<U1, U2>&& right);\n```  \n  \n### Parameters  \n `UN`  \n The type of the Nth copied tuple element.  \n  \n `right`  \n The tuple to copy from.  \n  \n### Remarks  \n The first two member operators assign the elements of `right` to the corresponding elements of `*this`. The third member operator assigns `right.first` to the element at index 0 of `*this` and `right.second` to the element at index 1. All three member operators return `*this`.  \n  \n The remaining member operators are analogs to earlier ones, but with [Rvalue Reference Declarator: &&](../cpp/rvalue-reference-declarator-amp-amp.md).  \n  \n### Example  \n  \n```cpp  \n// std_tr1__tuple__tuple_operator_as.cpp   \n// compile with: /EHsc   \n#include <tuple>   \n#include <iostream>   \n#include <utility>   \n  \ntypedef std::tuple<int, double, int, double> Mytuple;   \nint main()   \n    {   \n    Mytuple c0(0, 1, 2, 3);   \n  \n// display contents \" 0 1 2 3\"   \n    std::cout << \" \" << std::get<0>(c0);   \n    std::cout << \" \" << std::get<1>(c0);   \n    std::cout << \" \" << std::get<2>(c0);   \n    std::cout << \" \" << std::get<3>(c0);   \n    std::cout << std::endl;   \n  \n    Mytuple c1;   \n    c1 = c0;   \n  \n// display contents \" 0 1 2 3\"   \n    std::cout << \" \" << std::get<0>(c1);   \n    std::cout << \" \" << std::get<1>(c1);   \n    std::cout << \" \" << std::get<2>(c1);   \n    std::cout << \" \" << std::get<3>(c1);   \n    std::cout << std::endl;   \n  \n    std::tuple<char, int> c2;   \n    c2 = std::make_pair('x', 4);   \n  \n// display contents \" x 4\"   \n    std::cout << \" \" << std::get<0>(c2);   \n    std::cout << \" \" << std::get<1>(c2);   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n0 1 2 3  \nx 4  \n```  \n  \n##  <a name=\"tuple_swap\"></a>  tuple:swap  \n Exchanges the elements of two tuples.  \n  \n```  \ntemplate <class... Types>  \nvoid swap(tuple<Types...&>  \nleft,  \n    tuple<Types...&> right);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`left`|A tuple whose elements are to be exchanged with those of the tuple `right`.|  \n|`right`|A tuple whose elements are to be exchanged with those of the tuple `left`.|  \n  \n### Remarks  \n The function executes `left.swap(right)`.  \n  \n##  <a name=\"tuple__tuple\"></a>  tuple::tuple  \n Constructs a `tuple` object.  \n  \n```  \nconstexpr tuple();\n\n \n    explicit constexpr tuple(const Types&...);\n\n \n    template <class... UTypes>   \nexplicit constexpr tuple(UTypes&&...);\n\n \ntuple(const tuple&) = default;  \n    tuple(tuple&&) = default;  \n \ntemplate <class... UTypes>  \nconstexpr tuple(const tuple<UTypes...>&);\n\n \n    template <class... UTypes>  \nconstexpr tuple(tuple<UTypes...>&&);\n\n \ntemplate <class U1, class U2>   \nconstexpr tuple(const pair<U1, U2>&);\n\n// only if sizeof...(Types) == 2   \n \ntemplate <class U1, class U2>  \nconstexpr tuple(pair<U1, U2>&&);\n\n// only if sizeof...(Types) == 2  \n```  \n  \n### Parameters  \n `UN`  \n The type of the Nth copied tuple element.  \n  \n `right`  \n The tuple to copy from.  \n  \n### Remarks  \n The first constructor constructs an object whose elements are default constructed.  \n  \n The second constructor constructs an object whose elements are copy constructed from the arguments `P1`, `P2`, ..., `PN` with each `Pi` initializing the element at index `i - 1`.  \n  \n The third and fourth constructors construct an object whose elements are copy constructed from the corresponding element of `right`.  \n  \n The fifth constructor constructs an object whose element at index 0 is copy constructed from `right.first` and whose element at index 1 is copy constructed from `right.second`.  \n  \n The remaining constructors are analogs to earlier ones, but with [Rvalue Reference Declarator: &&](../cpp/rvalue-reference-declarator-amp-amp.md).  \n  \n### Example  \n  \n```cpp  \n// std_tr1__tuple__tuple_tuple.cpp   \n// compile with: /EHsc   \n#include <tuple>   \n#include <iostream>   \n#include <utility>   \n  \ntypedef std::tuple<int, double, int, double> Mytuple;   \nint main()   \n    {   \n    Mytuple c0(0, 1, 2, 3);   \n  \n// display contents \" 0 1 2 3\"   \n    std::cout << \" \" << std::get<0>(c0);   \n    std::cout << \" \" << std::get<1>(c0);   \n    std::cout << \" \" << std::get<2>(c0);   \n    std::cout << \" \" << std::get<3>(c0);   \n    std::cout << std::endl;   \n  \n    Mytuple c1;   \n    c1 = c0;   \n  \n// display contents \" 0 1 2 3\"   \n    std::cout << \" \" << std::get<0>(c1);   \n    std::cout << \" \" << std::get<1>(c1);   \n    std::cout << \" \" << std::get<2>(c1);   \n    std::cout << \" \" << std::get<3>(c1);   \n    std::cout << std::endl;   \n  \n    std::tuple<char, int> c2(std::make_pair('x', 4));   \n  \n// display contents \" x 4\"   \n    std::cout << \" \" << std::get<0>(c2);   \n    std::cout << \" \" << std::get<1>(c2);   \n    std::cout << std::endl;   \n  \n    Mytuple c3(c0);   \n  \n// display contents \" 0 1 2 3\"   \n    std::cout << \" \" << std::get<0>(c3);   \n    std::cout << \" \" << std::get<1>(c3);   \n    std::cout << \" \" << std::get<2>(c3);   \n    std::cout << \" \" << std::get<3>(c3);   \n    std::cout << std::endl;   \n  \n    typedef std::tuple<int, float, int, float> Mytuple2;   \n    Mytuple c4(Mytuple2(4, 5, 6, 7));   \n  \n// display contents \" 4 5 6 7\"   \n    std::cout << \" \" << std::get<0>(c4);   \n    std::cout << \" \" << std::get<1>(c4);   \n    std::cout << \" \" << std::get<2>(c4);   \n    std::cout << \" \" << std::get<3>(c4);   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n0 1 2 3  \nx 4  \n0 1 2 3  \n4 5 6 7  \n```  \n  \n## See Also  \n [\\<tuple>](../standard-library/tuple.md)   \n [make_tuple Function](../standard-library/tuple-functions.md#make_tuple_function)\n\n"}