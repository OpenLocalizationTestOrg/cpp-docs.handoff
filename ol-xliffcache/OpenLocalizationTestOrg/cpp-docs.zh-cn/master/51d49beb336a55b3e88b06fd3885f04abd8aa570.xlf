<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">51d49beb336a55b3e88b06fd3885f04abd8aa570</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\visualization-manager.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f0821ac7164b30f3074f8bf261f1a507b82e1b7c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f23d7f125468bb215a3ada66277bae97c3c8b1a4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Visualization Manager | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Visualization Manager</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The visual manager is an object that controls the appearance of a whole application.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It acts as a single class where you can put all the drawing code for your application.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The MFC Library includes several visual managers.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can also create your own visual manager if you want to create a custom view for your application.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following images show the same application when different visual managers are enabled:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>MyApp as rendered by CMFCVisualManagerWindows</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>MyApp that uses the CMFCVisualManagerWindows visual manager</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>MyApp as rendered by CMFCVisualManagerVS2005</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>MyApp that uses the CMFCVisualManagerVS2005 visual manager</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>MyApp as rendered by CMFCVisualManagerOfficeXP</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>MyApp that uses the CMFCVisualManagerOfficeXP visual manager</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>MyApp as rendered by CMFCVisualManagerOffice2003</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>MyApp that uses the CMFCVisualManagerOffice2003 visual manager</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>MyApp as rendered by CMFCVisualManagerOffice2007</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>MyApp that uses the CMFCVisualManagerOffice2007 visual manager</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>By default, the visual manager maintains the drawing code for several GUI elements.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To provide custom UI elements, you need to override the related drawing methods of the visual manager.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For the list of these methods, see <bpt id="p1">[</bpt>CMFCVisualManager Class<ept id="p1">](../mfc/reference/cmfcvisualmanager-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The methods that you can override to provide a custom appearance are all the methods that start with <ph id="ph1">`OnDraw`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Your application can have only one <ph id="ph1">`CMFCVisualManager`</ph> object.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To obtain a pointer to the visual manager for your application, call the static function <bpt id="p1">[</bpt>CMFCVisualManager::GetInstance<ept id="p1">](../mfc/reference/cmfcvisualmanager-class.md#cmfcvisualmanager__getinstance)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Because all visual managers inherit from <ph id="ph1">`CMFCVisualManager`</ph>, the <ph id="ph2">`CMFCVisualManager::GetInstance`</ph> method will get a pointer to the appropriate visual manager, even if you create a custom visual manager.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you want to create a custom visual manager, you must derive it from a visual manager that already exists.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The default class to derive from is <ph id="ph1">`CMFCVisualManager`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>However, you can use a different visual manager if it better resembles what you want for your application.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, if you wanted to use the <ph id="ph1">`CMFCVisualManagerOffice2007`</ph> visual manager, but wanted only to change how separators look, you could derive your custom class from <ph id="ph2">`CMFCVisualManagerOffice2007`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In this scenario, you should overwrite only the methods for drawing separators.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>There are two possible ways to use a specific visual manager for your application.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>One way is to call the <bpt id="p1">[</bpt>CMFCVisualManager::SetDefaultManager<ept id="p1">](../mfc/reference/cmfcvisualmanager-class.md#cmfcvisualmanager__setdefaultmanager)</ept> method and pass the appropriate visual manager as a parameter.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following code example shows how you would use the <ph id="ph1">`CMFCVisualManagerVS2005`</ph> visual manager with this method:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The other way to use a visual manager in your application is to create it manually.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The application will then use this new visual manager for all the rendering.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>However, because there can be only one <ph id="ph1">`CMFCVisualManager`</ph> object per application, you will have to delete the current visual manager before you create a new one.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In the following example, <ph id="ph1">`CMyVisualManager`</ph> is a custom visual manager that is derived from <ph id="ph2">`CMFCVisualManager`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following method will change what visual manager is used to display your application, depending on an index:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>User Interface Elements</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>CMFCVisualManager Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>