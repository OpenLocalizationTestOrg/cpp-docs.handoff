{"nodes":[{"pos":[12,70],"content":"hash_multiset::generic_iterator (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"hash_multiset::generic_iterator (STL-CLR) | Microsoft Docs","pos":[0,58]}]},{"content":"hash_multiset::generic_iterator (STL/CLR)","pos":[675,716]},{"content":"The type of an iterator for use with the generic interface for the container.","pos":[717,794]},{"content":"Syntax","pos":[803,809]},{"content":"Remarks","pos":[957,964]},{"content":"The type describes a generic iterator that can be used with the generic interface for this template container class.","pos":[968,1084]},{"content":"Example","pos":[1093,1100]},{"content":"Requirements","pos":[2061,2073]},{"pos":[2077,2107],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/hash_set&gt;","source":"**Header:** \\<cliext/hash_set>"},{"pos":[2114,2135],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2144,2152]},{"content":"hash_multiset (STL/CLR)","pos":[2157,2180]},{"content":"hash_multiset::generic_container (STL/CLR)","pos":[2223,2265]}],"content":"---\ntitle: \"hash_multiset::generic_iterator (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::hash_multiset::generic_iterator\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"generic_iterator member [STL/CLR]\"\nms.assetid: 493a4741-800d-412a-9b61-d506f5af9ad7\ncaps.latest.revision: 15\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# hash_multiset::generic_iterator (STL/CLR)\nThe type of an iterator for use with the generic interface for the container.  \n  \n## Syntax  \n  \n```  \ntypedef Microsoft::VisualC::StlClr::Generic::  \n    ContainerBidirectionalIterator<generic_value>  \n    generic_iterator;  \n```  \n  \n## Remarks  \n The type describes a generic iterator that can be used with the generic interface for this template container class.  \n  \n## Example  \n  \n```  \n// cliext_hash_multiset_generic_iterator.cpp   \n// compile with: /clr   \n#include <cliext/hash_set>   \n  \ntypedef cliext::hash_multiset<wchar_t> Myhash_multiset;   \nint main()   \n    {   \n    Myhash_multiset c1;   \n    c1.insert(L'a');   \n    c1.insert(L'b');   \n    c1.insert(L'c');   \n  \n// display contents \" a b c\"   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// construct a generic container   \n    Myhash_multiset::generic_container^ gc1 = %c1;   \n    for each (wchar_t elem in gc1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// get an element and display it   \n    Myhash_multiset::generic_iterator gcit = gc1->begin();   \n    Myhash_multiset::generic_value gcval = *gcit;   \n    System::Console::WriteLine(\" {0}\", gcval);   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \na b c  \na b c  \na  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/hash_set>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [hash_multiset (STL/CLR)](../dotnet/hash-multiset-stl-clr.md)   \n [hash_multiset::generic_container (STL/CLR)](../dotnet/hash-multiset-generic-container-stl-clr.md)"}