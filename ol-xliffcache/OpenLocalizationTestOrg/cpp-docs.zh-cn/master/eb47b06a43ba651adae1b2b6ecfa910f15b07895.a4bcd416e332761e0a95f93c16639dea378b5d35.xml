{"nodes":[{"pos":[12,59],"content":"Using C or C++ in __asm Blocks | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Using C or C++ in __asm Blocks | Microsoft Docs","pos":[0,47]}]},{"content":"Using C or C++ in __asm Blocks","pos":[988,1018]},{"content":"Microsoft Specific","pos":[1022,1040]},{"content":"Because inline assembly instructions can be mixed with C or C++ statements, they can refer to C or C++ variables by name and use many other elements of those languages.","pos":[1044,1212]},{"pos":[1219,1276],"content":"An <ph id=\"ph1\">`__asm`</ph> block can use the following language elements:","source":"An `__asm` block can use the following language elements:"},{"content":"Symbols, including labels and variable and function names","pos":[1286,1343]},{"pos":[1353,1411],"content":"Constants, including symbolic constants and <ph id=\"ph1\">`enum`</ph> members","source":"Constants, including symbolic constants and `enum` members"},{"content":"Macros and preprocessor directives","pos":[1421,1455]},{"pos":[1465,1504],"content":"Comments (both <bpt id=\"p1\">**</bpt><ph id=\"ph1\">/\\*</ph> <ph id=\"ph2\">\\*/</ph><ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt><ph id=\"ph3\">//</ph><ept id=\"p2\">**</ept> )","source":"Comments (both **/\\* \\*/** and **//** )"},{"content":"Type names (wherever a MASM type would be legal)","pos":[1514,1562]},{"pos":[1582,1688],"content":"names, generally used with operators such as <bpt id=\"p1\">**</bpt>PTR<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>TYPE<ept id=\"p2\">**</ept> or to specify structure or union members","source":" names, generally used with operators such as **PTR** and **TYPE** or to specify structure or union members"},{"content":"Within an <ph id=\"ph1\">`__asm`</ph> block, you can specify integer constants with either C notation or assembler radix notation (0x100 and 100h are equivalent, for example).","pos":[1695,1850],"source":"Within an `__asm` block, you can specify integer constants with either C notation or assembler radix notation (0x100 and 100h are equivalent, for example)."},{"content":"This allows you to define (using <ph id=\"ph1\">`#define`</ph>) a constant in C and then use it in both C or C++ and assembly portions of the program.","pos":[1851,1981],"source":" This allows you to define (using `#define`) a constant in C and then use it in both C or C++ and assembly portions of the program."},{"content":"You can also specify constants in octal by preceding them with a 0.","pos":[1982,2049]},{"content":"For example, 0777 specifies an octal constant.","pos":[2050,2096]},{"content":"What do you want to know more about?","pos":[2105,2141]},{"content":"Using Operators in __asm Blocks","pos":[2152,2183]},{"content":"Using C or C++ Symbols_in __asm Blocks","pos":[2252,2290]},{"content":"Accessing C or C++ Data in __asm Blocks","pos":[2366,2405]},{"content":"Writing Functions with Inline Assembly","pos":[2482,2520]},{"content":"END Microsoft Specific","pos":[2596,2618]},{"content":"See Also","pos":[2629,2637]},{"content":"Inline Assembler","pos":[2642,2658]}],"content":"---\ntitle: \"Using C or C++ in __asm Blocks | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"inline assembly, mixing instructions with C/C++ statements\"\n  - \"symbols, in __asm blocks\"\n  - \"macros, __asm blocks\"\n  - \"preprocessor directives, used in __asm blocks\"\n  - \"type names, used in __asm blocks\"\n  - \"preprocessor directives\"\n  - \"preprocessor, directives\"\n  - \"constants, in __asm blocks\"\n  - \"comments, in __asm blocks\"\n  - \"typedef names, used in __asm blocks\"\n  - \"__asm keyword [C++], C/C++ elements in\"\nms.assetid: ae8b2b52-6b75-42e3-ac0c-ad02d922ed97\ncaps.latest.revision: 8\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Using C or C++ in __asm Blocks\n## Microsoft Specific  \n Because inline assembly instructions can be mixed with C or C++ statements, they can refer to C or C++ variables by name and use many other elements of those languages.  \n  \n An `__asm` block can use the following language elements:  \n  \n-   Symbols, including labels and variable and function names  \n  \n-   Constants, including symbolic constants and `enum` members  \n  \n-   Macros and preprocessor directives  \n  \n-   Comments (both **/\\* \\*/** and **//** )  \n  \n-   Type names (wherever a MASM type would be legal)  \n  \n-   `typedef` names, generally used with operators such as **PTR** and **TYPE** or to specify structure or union members  \n  \n Within an `__asm` block, you can specify integer constants with either C notation or assembler radix notation (0x100 and 100h are equivalent, for example). This allows you to define (using `#define`) a constant in C and then use it in both C or C++ and assembly portions of the program. You can also specify constants in octal by preceding them with a 0. For example, 0777 specifies an octal constant.  \n  \n## What do you want to know more about?  \n  \n-   [Using Operators in __asm Blocks](../../assembler/inline/using-operators-in-asm-blocks.md)  \n  \n-   [Using C or C++ Symbols_in __asm Blocks](../../assembler/inline/using-c-or-cpp-symbols-in-asm-blocks.md)  \n  \n-   [Accessing C or C++ Data in __asm Blocks](../../assembler/inline/accessing-c-or-cpp-data-in-asm-blocks.md)  \n  \n-   [Writing Functions with Inline Assembly](../../assembler/inline/writing-functions-with-inline-assembly.md)  \n  \n **END Microsoft Specific**  \n  \n## See Also  \n [Inline Assembler](../../assembler/inline/inline-assembler.md)"}