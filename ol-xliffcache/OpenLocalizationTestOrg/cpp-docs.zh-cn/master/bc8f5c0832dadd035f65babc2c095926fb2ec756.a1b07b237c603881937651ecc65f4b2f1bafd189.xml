{"nodes":[{"pos":[12,83],"content":"_ungetch, _ungetwch, _ungetch_nolock, _ungetwch_nolock | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_ungetch, _ungetwch, _ungetch_nolock, _ungetwch_nolock | Microsoft Docs","pos":[0,71]}]},{"content":"_ungetch, _ungetwch, _ungetch_nolock, _ungetwch_nolock","pos":[1515,1569]},{"content":"Pushes back the last character that's read from the console.","pos":[1570,1630]},{"pos":[1638,1858],"content":"[!IMPORTANT]\n This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","leadings":["","> "],"nodes":[{"content":" This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","pos":[13,218],"nodes":[{"content":"This API cannot be used in applications that execute in the Windows Runtime.","pos":[1,77]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRT functions not supported with /ZW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.","pos":[78,205],"source":" For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)."}]}]},{"content":"Syntax","pos":[1867,1873]},{"content":"Parameters","pos":[2059,2069]},{"content":"Character to be pushed.","pos":[2080,2103]},{"content":"Return Value","pos":[2112,2124]},{"content":"Both functions return the character <ph id=\"ph1\">`c`</ph> if successful.","pos":[2128,2182],"source":"Both functions return the character `c` if successful."},{"content":"If there is an error, <ph id=\"ph1\">`_ungetch`</ph> returns a value of <ph id=\"ph2\">`EOF`</ph> and <ph id=\"ph3\">`_ungetwch`</ph>returns<ph id=\"ph4\">`WEOF`</ph>.","pos":[2183,2270],"source":" If there is an error, `_ungetch` returns a value of `EOF` and `_ungetwch`returns`WEOF`."},{"content":"Remarks","pos":[2279,2286]},{"content":"These functions push the character <ph id=\"ph1\">`c`</ph> back to the console, causing <ph id=\"ph2\">`c`</ph> to be the next character read by <ph id=\"ph3\">`_getch`</ph> or <ph id=\"ph4\">`_getche`</ph> (or<ph id=\"ph5\">`_getwch`</ph> or<ph id=\"ph6\">`_getwche`</ph>).","pos":[2290,2444],"source":"These functions push the character `c` back to the console, causing `c` to be the next character read by `_getch` or `_getche` (or`_getwch` or`_getwche`)."},{"content":"and <ph id=\"ph1\">`_ungetwch`</ph> fail if they are called more than once before the next read.","pos":[2456,2532],"source":" and `_ungetwch` fail if they are called more than once before the next read."},{"content":"The <ph id=\"ph1\">`c`</ph> argument may not be <ph id=\"ph2\">`EOF`</ph> (or <ph id=\"ph3\">`WEOF`</ph>).","pos":[2533,2579],"source":" The `c` argument may not be `EOF` (or `WEOF`)."},{"content":"The versions with the <ph id=\"ph1\">`_nolock`</ph> suffix are identical except that they are not protected from interference by other threads.","pos":[2586,2709],"source":"The versions with the `_nolock` suffix are identical except that they are not protected from interference by other threads."},{"content":"They may be faster since they do not incur the overhead of locking out other threads.","pos":[2710,2795]},{"content":"Use these functions only in thread-safe contexts such as single-threaded applications or where the calling scope already handles thread isolation.","pos":[2796,2942]},{"content":"Generic-Text Routine Mappings","pos":[2952,2981]},{"content":"TCHAR.H routine","pos":[2988,3003]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[3004,3032],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[3033,3046]},{"content":"_UNICODE defined","pos":[3047,3063]},{"content":"Requirements","pos":[3309,3321]},{"content":"Routine","pos":[3328,3335]},{"content":"Required header","pos":[3336,3351]},{"pos":[3406,3407],"content":","},{"content":"conio.h&gt;","pos":[3428,3436],"source":"conio.h>"},{"pos":[3452,3453],"content":","},{"content":"conio.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[3475,3497],"source":"conio.h> or \\<wchar.h>"},{"pos":[3505,3609],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"Example","pos":[3618,3625]},{"content":"See Also","pos":[4557,4565]},{"content":"Console and Port I/O","pos":[4570,4590]},{"content":"_cscanf, _cscanf_l, _cwscanf, _cwscanf_l","pos":[4646,4686]},{"content":"_getch, _getwch","pos":[4765,4780]}],"content":"---\ntitle: \"_ungetch, _ungetwch, _ungetch_nolock, _ungetwch_nolock | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_ungetch_nolock\"\n  - \"_ungetwch_nolock\"\n  - \"_ungetwch\"\n  - \"_ungetch\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-conio-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_ungetch_nolock\"\n  - \"ungetwch\"\n  - \"ungetch_nolock\"\n  - \"_ungetwch\"\n  - \"ungetch\"\n  - \"ungetwch_nolock\"\n  - \"_ungetch\"\n  - \"_ungettch_nolock\"\n  - \"_ungettch\"\n  - \"_ungetwch_nolock\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_ungetch function\"\n  - \"ungetwch function\"\n  - \"characters, pushing back to console\"\n  - \"_ungettch_nolock function\"\n  - \"ungettch function\"\n  - \"_ungettch function\"\n  - \"ungetch_nolock function\"\n  - \"ungettch_nolock function\"\n  - \"_ungetwch_nolock function\"\n  - \"_ungetch_nolock function\"\n  - \"ungetwch_nolock function\"\n  - \"_ungetwch function\"\nms.assetid: 70ae71c6-228c-4883-a57d-de6d5f873825\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _ungetch, _ungetwch, _ungetch_nolock, _ungetwch_nolock\nPushes back the last character that's read from the console.  \n  \n> [!IMPORTANT]\n>  This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).  \n  \n## Syntax  \n  \n```  \nint _ungetch(  \n   int c   \n);  \nwint_t _ungetwch(  \n   wint_t c   \n);  \nint _ungetch_nolock(  \n   int c   \n);  \nwint_t _ungetwch_nolock(  \n   wint_t c   \n);  \n```  \n  \n#### Parameters  \n `c`  \n Character to be pushed.  \n  \n## Return Value  \n Both functions return the character `c` if successful. If there is an error, `_ungetch` returns a value of `EOF` and `_ungetwch`returns`WEOF`.  \n  \n## Remarks  \n These functions push the character `c` back to the console, causing `c` to be the next character read by `_getch` or `_getche` (or`_getwch` or`_getwche`). `_ungetch` and `_ungetwch` fail if they are called more than once before the next read. The `c` argument may not be `EOF` (or `WEOF`).  \n  \n The versions with the `_nolock` suffix are identical except that they are not protected from interference by other threads. They may be faster since they do not incur the overhead of locking out other threads. Use these functions only in thread-safe contexts such as single-threaded applications or where the calling scope already handles thread isolation.  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_ungettch`|`_ungetch`|`_ungetch`|`_ungetwch`|  \n|`_ungettch_nolock`|`_ungetch_nolock`|`_ungetch_nolock`|`_ungetwch_nolock`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_ungetch`, `_ungetch_nolock`|\\<conio.h>|  \n|`_ungetwch`, `_ungetwch_nolock`|\\<conio.h> or \\<wchar.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n// crt_ungetch.c  \n// compile with: /c  \n// In this program, a white-space delimited   \n// token is read from the keyboard. When the program   \n// encounters a delimiter, it uses _ungetch to replace   \n// the character in the keyboard buffer.  \n//  \n  \n#include <conio.h>  \n#include <ctype.h>  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   char buffer[100];  \n   int count = 0;  \n   int ch;  \n  \n   ch = _getche();  \n   while( isspace( ch ) )      // Skip preceding white space.  \n      ch = _getche();  \n   while( count < 99 )         // Gather token.  \n   {  \n      if( isspace( ch ) )      // End of token.  \n         break;  \n      buffer[count++] = (char)ch;  \n      ch = _getche();  \n   }  \n   _ungetch( ch );            // Put back delimiter.  \n   buffer[count] = '\\0';      // Null terminate the token.  \n   printf( \"\\ntoken = %s\\n\", buffer );  \n}  \n```  \n  \n```Output  \n  \nWhitetoken = White  \n```  \n  \n## See Also  \n [Console and Port I/O](../../c-runtime-library/console-and-port-i-o.md)   \n [_cscanf, _cscanf_l, _cwscanf, _cwscanf_l](../../c-runtime-library/reference/cscanf-cscanf-l-cwscanf-cwscanf-l.md)   \n [_getch, _getwch](../../c-runtime-library/reference/getch-getwch.md)"}