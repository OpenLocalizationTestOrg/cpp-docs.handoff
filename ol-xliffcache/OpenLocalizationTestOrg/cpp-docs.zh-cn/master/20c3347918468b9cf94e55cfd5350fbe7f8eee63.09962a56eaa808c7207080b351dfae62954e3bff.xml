{"nodes":[{"pos":[12,61],"content":"FtmBase::MarshalInterface Method | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"FtmBase::MarshalInterface Method | Microsoft Docs","pos":[0,49]}]},{"content":"FtmBase::MarshalInterface Method","pos":[687,719]},{"content":"Writes into a stream the data required to initialize a proxy object in some client process.","pos":[720,811]},{"content":"Syntax","pos":[820,826]},{"content":"Parameters","pos":[1065,1075]},{"content":"Pointer to the stream to be used during marshaling.","pos":[1089,1140]},{"content":"Reference to the identifier of the interface to be marshaled.","pos":[1157,1218]},{"content":"This interface must be derived from the IUnknown interface.","pos":[1219,1278]},{"content":"Pointer to the interface pointer to be marshaled; can be NULL if the caller does not have a pointer to the desired interface.","pos":[1293,1418]},{"content":"Destination context where the specified interface is to be unmarshaled.","pos":[1444,1515]},{"content":"Specify one or more MSHCTX enumeration values.","pos":[1522,1568]},{"content":"Unmarshaling can occur in another apartment of the current process (MSHCTX_INPROC) or in another process on the same computer as the current process (MSHCTX_LOCAL).","pos":[1575,1739]},{"content":"Reserved for future use; must be zero.","pos":[1765,1803]},{"content":"Specifies whether the data to be marshaled is to be transmitted back to the client process — the typical case — or written to a global table, where it can be retrieved by multiple clients.","pos":[1825,2013]},{"content":"Return Value","pos":[2022,2034]},{"content":"S_OK","pos":[2038,2042]},{"content":"The interface pointer was marshaled successfully.","pos":[2046,2095]},{"content":"E_NOINTERFACE","pos":[2102,2115]},{"content":"The specified interface is not supported.","pos":[2119,2160]},{"content":"STG_E_MEDIUMFULL","pos":[2167,2183]},{"content":"The stream is full.","pos":[2187,2206]},{"content":"E_FAIL","pos":[2213,2219]},{"content":"The operation failed.","pos":[2223,2244]},{"content":"Requirements","pos":[2253,2265]},{"pos":[2269,2286],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> ftm.h","source":"**Header:** ftm.h"},{"pos":[2293,2322],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> Microsoft::WRL","source":"**Namespace:** Microsoft::WRL"},{"content":"See Also","pos":[2331,2339]},{"content":"FtmBase Class","pos":[2344,2357]}],"content":"---\ntitle: \"FtmBase::MarshalInterface Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ftm/Microsoft::WRL::FtmBase::MarshalInterface\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"MarshalInterface method\"\nms.assetid: fc8421b4-06e4-4925-b908-c285fe4790d2\ncaps.latest.revision: 3\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# FtmBase::MarshalInterface Method\nWrites into a stream the data required to initialize a proxy object in some client process.  \n  \n## Syntax  \n  \n```  \nSTDMETHODIMP MarshalInterface(  \n   __in IStream *pStm,  \n   __in REFIID riid,  \n   __in_opt void *pv,  \n   __in DWORD dwDestContext,  \n   __reserved void *pvDestContext,  \n   __in DWORD mshlflags  \n) override;  \n```  \n  \n#### Parameters  \n `pStm`  \n Pointer to the stream to be used during marshaling.  \n  \n `riid`  \n Reference to the identifier of the interface to be marshaled. This interface must be derived from the IUnknown interface.  \n  \n `pv`  \n Pointer to the interface pointer to be marshaled; can be NULL if the caller does not have a pointer to the desired interface.  \n  \n `dwDestContext`  \n Destination context where the specified interface is to be unmarshaled.  \n  \n Specify one or more MSHCTX enumeration values.  \n  \n Unmarshaling can occur in another apartment of the current process (MSHCTX_INPROC) or in another process on the same computer as the current process (MSHCTX_LOCAL).  \n  \n `pvDestContext`  \n Reserved for future use; must be zero.  \n  \n `mshlflags`  \n Specifies whether the data to be marshaled is to be transmitted back to the client process — the typical case — or written to a global table, where it can be retrieved by multiple clients.  \n  \n## Return Value  \n S_OK  \n The interface pointer was marshaled successfully.  \n  \n E_NOINTERFACE  \n The specified interface is not supported.  \n  \n STG_E_MEDIUMFULL  \n The stream is full.  \n  \n E_FAIL  \n The operation failed.  \n  \n## Requirements  \n **Header:** ftm.h  \n  \n **Namespace:** Microsoft::WRL  \n  \n## See Also  \n [FtmBase Class](../windows/ftmbase-class.md)"}