{"nodes":[{"pos":[12,44],"content":"__shiftright128 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"__shiftright128 | Microsoft Docs","pos":[0,32]}]},{"content":"__shiftright128","pos":[615,630]},{"content":"Microsoft Specific","pos":[633,651]},{"pos":[660,846],"content":"Shifts a 128-bit quantity, represented as two 64-bit quantities <ph id=\"ph1\">`LowPart`</ph> and <ph id=\"ph2\">`HighPart`</ph>, to the right by a number of bits specified by <ph id=\"ph3\">`Shift`</ph> and returns the low 64 bits of the result.","source":"Shifts a 128-bit quantity, represented as two 64-bit quantities `LowPart` and `HighPart`, to the right by a number of bits specified by `Shift` and returns the low 64 bits of the result."},{"content":"Syntax","pos":[855,861]},{"content":"Parameters","pos":[1020,1030]},{"content":"[in]","pos":[1034,1038]},{"content":"The low 64 bits of the 128-bit quantity to shift.","pos":[1052,1101]},{"content":"[in]","pos":[1108,1112]},{"content":"The high 64 bits of the 128-bit quantity to shift.","pos":[1127,1177]},{"content":"[in]","pos":[1184,1188]},{"content":"The number of bits to shift.","pos":[1200,1228]},{"content":"Return Value","pos":[1237,1249]},{"content":"The low 64 bits of the result.","pos":[1253,1283]},{"content":"Requirements","pos":[1292,1304]},{"content":"Intrinsic","pos":[1311,1320]},{"content":"Architecture","pos":[1321,1333]},{"pos":[1466,1493],"content":"<bpt id=\"p1\">**</bpt>Header file<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>intrin.h&gt;","source":"**Header file** \\<intrin.h>"},{"content":"Remarks","pos":[1502,1509]},{"pos":[1513,1739],"content":"The <ph id=\"ph1\">`Shift`</ph> value is always modulo 64 so that, for example, if you call <ph id=\"ph2\">`__shiftright128(0, 1, 64)`</ph>, the function will shift the high part <ph id=\"ph3\">`0`</ph> bits right and return a low part of <ph id=\"ph4\">`0`</ph> and not <ph id=\"ph5\">`1`</ph> as might otherwise be expected.","source":"The `Shift` value is always modulo 64 so that, for example, if you call `__shiftright128(0, 1, 64)`, the function will shift the high part `0` bits right and return a low part of `0` and not `1` as might otherwise be expected."},{"content":"Example","pos":[1748,1755]},{"pos":[1759,1827],"content":"For an example, see <bpt id=\"p1\">[</bpt>__shiftleft128<ept id=\"p1\">](../intrinsics/shiftleft128.md)</ept>.","source":"For an example, see [__shiftleft128](../intrinsics/shiftleft128.md)."},{"content":"END Microsoft Specific","pos":[1836,1858]},{"content":"See Also","pos":[1867,1875]},{"content":"__shiftleft128","pos":[1880,1894]},{"content":"Compiler Intrinsics","pos":[1932,1951]}],"content":"---\ntitle: \"__shiftright128 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"__shiftright128\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"__shiftright128 intrinsic\"\nms.assetid: 5419a6c4-0de1-43fb-b314-4faa5b2d051f\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# __shiftright128\n**Microsoft Specific**  \n  \n Shifts a 128-bit quantity, represented as two 64-bit quantities `LowPart` and `HighPart`, to the right by a number of bits specified by `Shift` and returns the low 64 bits of the result.  \n  \n## Syntax  \n  \n```  \nunsigned __int64 __shiftright128(   \n   unsigned __int64 LowPart,   \n   unsigned __int64 HighPart,   \n   unsigned char Shift   \n);  \n```  \n  \n#### Parameters  \n [in] `LowPart`  \n The low 64 bits of the 128-bit quantity to shift.  \n  \n [in] `HighPart`  \n The high 64 bits of the 128-bit quantity to shift.  \n  \n [in] `Shift`  \n The number of bits to shift.  \n  \n## Return Value  \n The low 64 bits of the result.  \n  \n## Requirements  \n  \n|Intrinsic|Architecture|  \n|---------------|------------------|  \n|`__shiftright128`|[!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]|  \n  \n **Header file** \\<intrin.h>  \n  \n## Remarks  \n The `Shift` value is always modulo 64 so that, for example, if you call `__shiftright128(0, 1, 64)`, the function will shift the high part `0` bits right and return a low part of `0` and not `1` as might otherwise be expected.  \n  \n## Example  \n For an example, see [__shiftleft128](../intrinsics/shiftleft128.md).  \n  \n## END Microsoft Specific  \n  \n## See Also  \n [__shiftleft128](../intrinsics/shiftleft128.md)   \n [Compiler Intrinsics](../intrinsics/compiler-intrinsics.md)"}