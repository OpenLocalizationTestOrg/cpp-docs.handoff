<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">be871a04e9953835f43f9b06691c74e438724beb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\fsopen-wfsopen.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">522097872efb2653a8d826b185dc066e6d8568b2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d6489f90189cab4396774a8daa36ce4c6e9bf623</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_fsopen, _wfsopen | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_fsopen, _wfsopen</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Opens a stream with file sharing.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Name of the file to open.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Type of access permitted.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Type of sharing allowed.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Each of these functions returns a pointer to the stream.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A null pointer value indicates an error.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`filename`</ph> or <ph id="ph2">`mode`</ph> is <ph id="ph3">`NULL`</ph> or an empty string, these functions invoke the invalid parameter handler, as described in <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../../c-runtime-library/parameter-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If execution is allowed to continue, these functions return <ph id="ph1">`NULL`</ph> and set <ph id="ph2">`errno`</ph> to <ph id="ph3">`EINVAL`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information about these and other error codes, see <bpt id="p1">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id="p1">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_fsopen`</ph> function opens the file specified by <ph id="ph2">`filename`</ph> as a stream and prepares the file for subsequent shared reading or writing, as defined by the mode and <ph id="ph3">`shflag`</ph> arguments.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>is a wide-character version of <ph id="ph1">`_fsopen`</ph>; the <ph id="ph2">`filename`</ph> and <ph id="ph3">`mode`</ph> arguments to <ph id="ph4">`_wfsopen`</ph> are wide-character strings.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`_fsopen`</ph> behave identically otherwise.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The character string <ph id="ph1">`mode`</ph> specifies the type of access requested for the file, as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Term</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Definition</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Opens for reading.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If the file does not exist or cannot be found, the <ph id="ph1">`_fsopen`</ph> call fails.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Opens an empty file for writing.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If the given file exists, its contents are destroyed.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Opens for writing at the end of the file (appending); creates the file first if it does not exist.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Opens for both reading and writing.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>(The file must exist.)</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Opens an empty file for both reading and writing.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If the given file exists, its contents are destroyed.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Opens for reading and appending; creates the file first if it does not exist.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`"w"`</ph> and <ph id="ph2">`"w+"`</ph> types with care, as they can destroy existing files.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>When a file is opened with the <ph id="ph1">`"a"`</ph> or <ph id="ph2">`"a+"`</ph> access type, all write operations occur at the end of the file.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The file pointer can be repositioned using <ph id="ph1">`fseek`</ph> or <ph id="ph2">`rewind`</ph>, but it is always moved back to the end of the file before any write operation is carried out.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Thus, existing data cannot be overwritten.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`"r+"`</ph>, <ph id="ph2">`"w+"`</ph>, or <ph id="ph3">`"a+"`</ph> access type is specified, both reading and writing are allowed (the file is said to be open for update).</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>However, when switching between reading and writing, there must be an intervening <bpt id="p1">[</bpt>fsetpos<ept id="p1">](../../c-runtime-library/reference/fsetpos.md)</ept>, <bpt id="p2">[</bpt>fseek<ept id="p2">](../../c-runtime-library/reference/fseek-fseeki64.md)</ept>, or <bpt id="p3">[</bpt>rewind<ept id="p3">](../../c-runtime-library/reference/rewind.md)</ept> operation.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The current position can be specified for the <ph id="ph1">`fsetpos`</ph> or <ph id="ph2">`fseek`</ph> operation, if desired.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In addition to the above values, one of the following characters can be included in <ph id="ph1">`mode`</ph> to specify the translation mode for new lines, and for file management.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Term</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Definition</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Opens a file in text (translated) mode.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In this mode, carriage return–line feed (CR-LF) combinations are translated into single line feeds (LF) on input and LF characters are translated to CR-LF combinations on output.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Also, CTRL+Z is interpreted as an end-of-file character on input.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In files opened for reading or reading/writing, <ph id="ph1">`_fsopen`</ph> checks for a CTRL+Z at the end of the file and removes it, if possible.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This is done because using <ph id="ph1">`fseek`</ph> and <ph id="ph2">`ftell`</ph> to move within a file that ends with a CTRL+Z might cause <ph id="ph3">`fseek`</ph> to behave improperly near the end of the file.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Opens a file in binary (untranslated) mode; the above translations are suppressed.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Specifies that caching is optimized for, but not restricted to, sequential access from disk.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Specifies that caching is optimized for, but not restricted to, random access from disk.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Specifies a file as temporary.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If possible, it is not flushed to disk.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Specifies a file as temporary.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>It is deleted when the last file pointer is closed.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`t`</ph> or <ph id="ph2">`b`</ph> is not given in <ph id="ph3">`mode`</ph>, the translation mode is defined by the default-mode variable <ph id="ph4">`_fmode`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`t`</ph> or <ph id="ph2">`b`</ph> is prefixed to the argument, the function fails and returns <ph id="ph3">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For a discussion of text and binary modes, see <bpt id="p1">[</bpt>Text and Binary Mode File I/O<ept id="p1">](../../c-runtime-library/text-and-binary-mode-file-i-o.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The argument <ph id="ph1">`shflag`</ph> is a constant expression consisting of one of the following manifest constants, defined in Share.h.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Term</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Definition</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Sets Compatibility mode for 16-bit applications.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Permits read and write access.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Denies read access to the file.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Denies read and write access to the file.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Denies write access to the file.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Generic-Text Routine Mappings</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Tchar.h routine</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>_UNICODE and _MBCS not defined</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>_MBCS defined</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>_UNICODE defined</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Function</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Optional headers</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>stdio.h&gt;</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>share.h&gt;</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For manifest constant for <ph id="ph1">`shflag`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>stdio.h&gt; or <ph id="ph1">\&lt;</ph>wchar.h&gt;</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>share.h&gt;</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For manifest constant for <ph id="ph1">`shflag`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>System::IO::File::Open</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.FileStream.%23ctor%2A&gt;</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Stream I/O</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>fclose, _fcloseall</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>_fdopen, _wfdopen</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>ferror</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>_fileno</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>fopen, _wfopen</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>freopen, _wfreopen</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>_open, _wopen</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>_setmode</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>_sopen, _wsopen</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>