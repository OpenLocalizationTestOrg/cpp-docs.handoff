{"nodes":[{"pos":[12,69],"content":"hash_multimap::max_load_factor (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"hash_multimap::max_load_factor (STL-CLR) | Microsoft Docs","pos":[0,57]}]},{"content":"hash_multimap::max_load_factor (STL/CLR)","pos":[672,712]},{"content":"Gets or sets the maximum elements per bucket.","pos":[713,758]},{"content":"Syntax","pos":[767,773]},{"content":"Parameters","pos":[868,878]},{"content":"new_factor","pos":[882,892]},{"content":"New maximum load factor to store.","pos":[896,929]},{"content":"Remarks","pos":[938,945]},{"content":"The first member function returns the current stored maximum load factor.","pos":[949,1022]},{"content":"You use it to determine the maximum average bucket size.","pos":[1023,1079]},{"content":"The second member function replaces the store maximum load factor with <ph id=\"ph1\">`new_factor`</ph>.","pos":[1086,1170],"source":"The second member function replaces the store maximum load factor with `new_factor`."},{"content":"No automatic rehashing occurs until a subsequent insert.","pos":[1171,1227]},{"content":"Example","pos":[1236,1243]},{"content":"Requirements","pos":[3186,3198]},{"pos":[3202,3232],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/hash_map&gt;","source":"**Header:** \\<cliext/hash_map>"},{"pos":[3239,3260],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[3269,3277]},{"content":"hash_multimap (STL/CLR)","pos":[3282,3305]},{"content":"hash_multimap::bucket_count (STL/CLR)","pos":[3348,3385]},{"content":"hash_multimap::load_factor (STL/CLR)","pos":[3441,3477]},{"content":"hash_multimap::rehash (STL/CLR)","pos":[3532,3563]}],"content":"---\ntitle: \"hash_multimap::max_load_factor (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::hash_multimap::max_load_factor\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"max_load_factor member [STL/CLR]\"\nms.assetid: acea6293-9c6f-4c5e-a9a3-998e755ba1fd\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# hash_multimap::max_load_factor (STL/CLR)\nGets or sets the maximum elements per bucket.  \n  \n## Syntax  \n  \n```  \nfloat max_load_factor();  \nvoid max_load_factor(float new_factor);  \n```  \n  \n#### Parameters  \n new_factor  \n New maximum load factor to store.  \n  \n## Remarks  \n The first member function returns the current stored maximum load factor. You use it to determine the maximum average bucket size.  \n  \n The second member function replaces the store maximum load factor with `new_factor`. No automatic rehashing occurs until a subsequent insert.  \n  \n## Example  \n  \n```  \n// cliext_hash_multimap_max_load_factor.cpp   \n// compile with: /clr   \n#include <cliext/hash_map>   \n  \ntypedef cliext::hash_multimap<wchar_t, int> Myhash_multimap;   \nint main()   \n    {   \n    Myhash_multimap c1 = gcnew Myhash_multimap;   \n    c1.insert(Myhash_multimap::make_value(L'a', 1));   \n    c1.insert(Myhash_multimap::make_value(L'b', 2));   \n    c1.insert(Myhash_multimap::make_value(L'c', 3));   \n  \n// display contents \" [a 1] [b 2] [c 3]\"   \n    for each (Myhash_multimap::value_type elem in c1)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n  \n// inspect current parameters   \n    System::Console::WriteLine(\"bucket_count() = {0}\", c1.bucket_count());   \n    System::Console::WriteLine(\"load_factor() = {0}\", c1.load_factor());   \n    System::Console::WriteLine(\"max_load_factor() = {0}\",   \n        c1.max_load_factor());   \n    System::Console::WriteLine();   \n  \n// change max_load_factor and redisplay   \n    c1.max_load_factor(0.25f);   \n    System::Console::WriteLine(\"bucket_count() = {0}\", c1.bucket_count());   \n    System::Console::WriteLine(\"load_factor() = {0}\", c1.load_factor());   \n    System::Console::WriteLine(\"max_load_factor() = {0}\",   \n        c1.max_load_factor());   \n    System::Console::WriteLine();   \n  \n// rehash and redisplay   \n    c1.rehash(100);   \n    System::Console::WriteLine(\"bucket_count() = {0}\", c1.bucket_count());   \n    System::Console::WriteLine(\"load_factor() = {0}\", c1.load_factor());   \n    System::Console::WriteLine(\"max_load_factor() = {0}\",   \n        c1.max_load_factor());   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n [a 1] [b 2] [c 3]  \nbucket_count() = 16  \nload_factor() = 0.1875  \nmax_load_factor() = 4  \n  \nbucket_count() = 16  \nload_factor() = 0.1875  \nmax_load_factor() = 0.25  \n  \nbucket_count() = 128  \nload_factor() = 0.0234375  \nmax_load_factor() = 0.25  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/hash_map>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [hash_multimap (STL/CLR)](../dotnet/hash-multimap-stl-clr.md)   \n [hash_multimap::bucket_count (STL/CLR)](../dotnet/hash-multimap-bucket-count-stl-clr.md)   \n [hash_multimap::load_factor (STL/CLR)](../dotnet/hash-multimap-load-factor-stl-clr.md)   \n [hash_multimap::rehash (STL/CLR)](../dotnet/hash-multimap-rehash-stl-clr.md)"}