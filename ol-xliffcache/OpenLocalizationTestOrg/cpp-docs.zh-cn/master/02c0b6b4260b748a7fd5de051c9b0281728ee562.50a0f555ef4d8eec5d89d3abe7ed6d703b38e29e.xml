{"nodes":[{"pos":[12,47],"content":"Labeled Statements | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Labeled Statements | Microsoft Docs","pos":[0,35]}]},{"content":"Labeled Statements","pos":[647,665]},{"content":"Labels are used to transfer program control directly to the specified statement.","pos":[666,746]},{"content":"The scope of a label is the entire function in which it is declared.","pos":[857,925]},{"content":"Remarks","pos":[934,941]},{"content":"There are three types of labeled statements.","pos":[945,989]},{"content":"All use a colon to separate some type of label from the statement.","pos":[990,1056]},{"content":"The case and default labels are specific to case statements.","pos":[1057,1117]},{"content":"The goto statement","pos":[1517,1535]},{"content":"The appearance of an <bpt id=\"p1\">*</bpt>identifier<ept id=\"p1\">*</ept> label in the source program declares a label.","pos":[1544,1623],"source":"The appearance of an *identifier* label in the source program declares a label."},{"content":"Only a <bpt id=\"p1\">[</bpt>goto<ept id=\"p1\">](../cpp/goto-statement-cpp.md)</ept> statement can transfer control to an <bpt id=\"p2\">*</bpt>identifier<ept id=\"p2\">*</ept> label.","pos":[1624,1724],"source":" Only a [goto](../cpp/goto-statement-cpp.md) statement can transfer control to an *identifier* label."},{"content":"The following code fragment illustrates use of the <ph id=\"ph1\">`goto`</ph> statement and an <bpt id=\"p1\">*</bpt>identifier<ept id=\"p1\">*</ept> label:","pos":[1725,1819],"source":" The following code fragment illustrates use of the `goto` statement and an *identifier* label:"},{"content":"A label cannot appear by itself but must always be attached to a statement.","pos":[1826,1901]},{"content":"If a label is needed by itself, place a null statement after the label.","pos":[1902,1973]},{"content":"The label has function scope and cannot be redeclared within the function.","pos":[1980,2054]},{"content":"However, the same name can be used as a label in different functions.","pos":[2055,2124]},{"content":"The case statement","pos":[2407,2425]},{"content":"Labels that appear after the <bpt id=\"p1\">**</bpt>case<ept id=\"p1\">**</ept> keyword cannot also appear outside a <ph id=\"ph1\">`switch`</ph> statement.","pos":[2434,2528],"source":"Labels that appear after the **case** keyword cannot also appear outside a `switch` statement."},{"content":"(This restriction also applies to the <bpt id=\"p1\">**</bpt>default<ept id=\"p1\">**</ept> keyword.) The following code fragment shows the correct use of <bpt id=\"p2\">**</bpt>case<ept id=\"p2\">**</ept> labels:","pos":[2529,2658],"source":" (This restriction also applies to the **default** keyword.) The following code fragment shows the correct use of **case** labels:"},{"content":"Labels in the case statement","pos":[3322,3350]},{"content":"Labels that appear after the <bpt id=\"p1\">**</bpt>case<ept id=\"p1\">**</ept> keyword cannot also appear outside a <ph id=\"ph1\">`switch`</ph> statement.","pos":[3354,3448],"source":"Labels that appear after the **case** keyword cannot also appear outside a `switch` statement."},{"content":"(This restriction also applies to the <bpt id=\"p1\">**</bpt>default<ept id=\"p1\">**</ept> keyword.) The following code fragment shows the correct use of <bpt id=\"p2\">**</bpt>case<ept id=\"p2\">**</ept> labels:","pos":[3449,3578],"source":" (This restriction also applies to the **default** keyword.) The following code fragment shows the correct use of **case** labels:"},{"content":"Labels in the goto statement","pos":[4665,4693]},{"content":"The appearance of an <bpt id=\"p1\">*</bpt>identifier<ept id=\"p1\">*</ept> label in the source program declares a label.","pos":[4697,4776],"source":"The appearance of an *identifier* label in the source program declares a label."},{"content":"Only a <bpt id=\"p1\">[</bpt>goto<ept id=\"p1\">](../cpp/goto-statement-cpp.md)</ept> statement can transfer control to an <bpt id=\"p2\">*</bpt>identifier<ept id=\"p2\">*</ept> label.","pos":[4777,4877],"source":" Only a [goto](../cpp/goto-statement-cpp.md) statement can transfer control to an *identifier* label."},{"content":"The following code fragment illustrates use of the <ph id=\"ph1\">`goto`</ph> statement and an <bpt id=\"p1\">*</bpt>identifier<ept id=\"p1\">*</ept> label:","pos":[4878,4972],"source":" The following code fragment illustrates use of the `goto` statement and an *identifier* label:"},{"content":"A label cannot appear by itself but must always be attached to a statement.","pos":[4979,5054]},{"content":"If a label is needed by itself, place a null statement after the label.","pos":[5055,5126]},{"content":"The label has function scope and cannot be redeclared within the function.","pos":[5133,5207]},{"content":"However, the same name can be used as a label in different functions.","pos":[5208,5277]},{"content":"See Also","pos":[5553,5561]},{"content":"Overview of C++ Statements","pos":[5566,5592]},{"content":"switch Statement (C++)","pos":[5637,5659]}],"content":"---\ntitle: \"Labeled Statements | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"goto\"\n  - \"case\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"labeled statement\"\n  - \"statements, labeled\"\nms.assetid: 456a26d5-0fcc-4d1a-b71f-fa9ff3d73b91\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Labeled Statements\nLabels are used to transfer program control directly to the specified statement.  \n  \n```  \nidentifier :  statement  \ncase constant-expression :  statement  \ndefault :  statement  \n```  \n  \n The scope of a label is the entire function in which it is declared.  \n  \n## Remarks  \n There are three types of labeled statements. All use a colon to separate some type of label from the statement. The case and default labels are specific to case statements.  \n  \n```cpp  \n#include <iostream>   \nusing namespace std;   \n  \nvoid test_label(int x) {  \n  \n    if (x == 1){  \n        goto label1;  \n    }  \n    goto label2;  \n  \nlabel1:  \n    cout << \"in label1\" << endl;  \n    return;  \n  \nlabel2:  \n    cout << \"in label2\" << endl;  \n    return;  \n}  \n  \nint main() {  \n    test_label(1);  // in label1   \n    test_label(2);  // in label2  \n}  \n  \n```  \n  \n **The goto statement**  \n  \n The appearance of an *identifier* label in the source program declares a label. Only a [goto](../cpp/goto-statement-cpp.md) statement can transfer control to an *identifier* label. The following code fragment illustrates use of the `goto` statement and an *identifier* label:  \n  \n A label cannot appear by itself but must always be attached to a statement. If a label is needed by itself, place a null statement after the label.  \n  \n The label has function scope and cannot be redeclared within the function. However, the same name can be used as a label in different functions.  \n  \n```  \n// labels_with_goto.cpp  \n// compile with: /EHsc  \n#include <iostream>  \nint main() {  \n   using namespace std;  \n   goto Test2;  \n  \n   cout << \"testing\" << endl;  \n  \n   Test2:  \n      cerr << \"At Test2 label.\" << endl;  \n}  \n  \n//Output: At Test2 label.  \n```  \n  \n **The case statement**  \n  \n Labels that appear after the **case** keyword cannot also appear outside a `switch` statement. (This restriction also applies to the **default** keyword.) The following code fragment shows the correct use of **case** labels:  \n  \n```  \n// Sample Microsoft Windows message processing loop.  \nswitch( msg )  \n{  \n   case WM_TIMER:    // Process timer event.  \n      SetClassWord( hWnd, GCW_HICON, ahIcon[nIcon++] );  \n      ShowWindow( hWnd, SW_SHOWNA );  \n      nIcon %= 14;  \n      Yield();  \n      break;  \n  \n   case WM_PAINT:  \n      memset( &ps, 0x00, sizeof(PAINTSTRUCT) );  \n      hDC = BeginPaint( hWnd, &ps );   \n      EndPaint( hWnd, &ps );  \n      break;  \n  \n   default:  \n      // This choice is taken for all messages not specifically  \n      //  covered by a case statement.  \n  \n      return DefWindowProc( hWnd, Message, wParam, lParam );  \n      break;  \n}  \n```  \n  \n## Labels in the case statement  \n Labels that appear after the **case** keyword cannot also appear outside a `switch` statement. (This restriction also applies to the **default** keyword.) The following code fragment shows the correct use of **case** labels:  \n  \n```  \n// Sample Microsoft Windows message processing loop.  \nswitch( msg )  \n{  \n   case WM_TIMER:    // Process timer event.  \n      SetClassWord( hWnd, GCW_HICON, ahIcon[nIcon++] );  \n      ShowWindow( hWnd, SW_SHOWNA );  \n      nIcon %= 14;  \n      Yield();  \n      break;  \n  \n   case WM_PAINT:  \n      // Obtain a handle to the device context.  \n      // BeginPaint will send WM_ERASEBKGND if appropriate.  \n  \n      memset( &ps, 0x00, sizeof(PAINTSTRUCT) );  \n      hDC = BeginPaint( hWnd, &ps );  \n  \n      // Inform Windows that painting is complete.  \n  \n      EndPaint( hWnd, &ps );  \n      break;  \n  \n   case WM_CLOSE:  \n      // Close this window and all child windows.  \n  \n      KillTimer( hWnd, TIMER1 );  \n      DestroyWindow( hWnd );  \n      if ( hWnd == hWndMain )  \n         PostQuitMessage( 0 );  // Quit the application.  \n      break;  \n  \n   default:  \n      // This choice is taken for all messages not specifically  \n      //  covered by a case statement.  \n  \n      return DefWindowProc( hWnd, Message, wParam, lParam );  \n      break;  \n}  \n```  \n  \n## Labels in the goto statement  \n The appearance of an *identifier* label in the source program declares a label. Only a [goto](../cpp/goto-statement-cpp.md) statement can transfer control to an *identifier* label. The following code fragment illustrates use of the `goto` statement and an *identifier* label:  \n  \n A label cannot appear by itself but must always be attached to a statement. If a label is needed by itself, place a null statement after the label.  \n  \n The label has function scope and cannot be redeclared within the function. However, the same name can be used as a label in different functions.  \n  \n```  \n// labels_with_goto.cpp  \n// compile with: /EHsc  \n#include <iostream>  \nint main() {  \n   using namespace std;  \n   goto Test2;  \n  \n   cout << \"testing\" << endl;  \n  \n   Test2:  \n      cerr << \"At Test2 label.\" << endl;  \n// At Test2 label.  \n}  \n  \n```  \n  \n## See Also  \n [Overview of C++ Statements](../cpp/overview-of-cpp-statements.md)   \n [switch Statement (C++)](../cpp/switch-statement-cpp.md)"}