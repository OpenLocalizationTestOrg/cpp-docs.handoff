<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9712de4e0b338e93b1351684c0e6712d34b006b9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\examples-of-lambda-expressions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c5629aec52cc07cc809f16159535deb07877374f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c15e10c8b6a36b3866f1b590fdf87f8901109e32</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Examples of Lambda Expressions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Examples of Lambda Expressions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article shows how to use lambda expressions in your programs.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For an overview of lambda expressions, see <bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](../cpp/lambda-expressions-in-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information about the structure of a lambda expression, see <bpt id="p1">[</bpt>Lambda Expression Syntax<ept id="p1">](../cpp/lambda-expression-syntax.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Declaring Lambda Expressions</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Example 1</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Because a lambda expression is typed, you can assign it to an <ph id="ph1">`auto`</ph> variable or to a <bpt id="p1">[</bpt>function<ept id="p1">](../standard-library/function-class.md)</ept> object, as shown here:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>auto<ept id="p1">](../cpp/auto-cpp.md)</ept>, <bpt id="p2">[</bpt>function Class<ept id="p2">](../standard-library/function-class.md)</ept>, and <bpt id="p3">[</bpt>Function Call<ept id="p3">](../cpp/function-call-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Although lambda expressions are most often declared in the body of a function, you can declare them anywhere that you can initialize a variable.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Example 2</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The Visual C++ compiler binds a lambda expression to its captured variables when the expression is declared instead of when the expression is called.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following example shows a lambda expression that captures the local variable <ph id="ph1">`i`</ph> by value and the local variable <ph id="ph2">`j`</ph> by reference.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Because the lambda expression captures <ph id="ph1">`i`</ph> by value, the reassignment of <ph id="ph2">`i`</ph> later in the program does not affect the result of the expression.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>However, because the lambda expression captures <ph id="ph1">`j`</ph> by reference, the reassignment of <ph id="ph2">`j`</ph> does affect the result of the expression.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>In This Article<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Calling Lambda Expressions</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can call a lambda expression immediately, as shown in the next code snippet.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The second snippet shows how to pass a lambda as an argument to Standard Template Library (STL) algorithms such as <ph id="ph1">`find_if`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Example 1</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This example declares a lambda expression that returns the sum of two integers and calls the expression immediately with the arguments <ph id="ph1">`5`</ph> and <ph id="ph2">`4`</ph>:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Example 2</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This example passes a lambda expression as an argument to the <ph id="ph1">`find_if`</ph> function.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The lambda expression returns <ph id="ph1">`true`</ph> if its parameter is an even number.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For more information about the <ph id="ph1">`find_if`</ph> function, see <bpt id="p1">[</bpt>find_if<ept id="p1">](http://msdn.microsoft.com/Library/aa8ff698-e47e-4ff8-8c88-cbda4b102a4a)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For more information about the STL functions that perform common algorithms, see <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>algorithm&gt;<ept id="p1">](../standard-library/algorithm.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>In This Article<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Nesting Lambda Expressions</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can nest a lambda expression inside another one, as shown in this example.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The inner lambda expression multiplies its argument by 2 and returns the result.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The outer lambda expression calls the inner lambda expression with its argument and adds 3 to the result.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">`[](int y) { return y * 2; }`</ph> is the nested lambda expression.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>In This Article<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Higher-Order Lambda Functions</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Many programming languages support the concept of a <bpt id="p1">*</bpt>higher-order function.<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A higher-order function is a lambda expression that takes another lambda expression as its argument or returns a lambda expression.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">[</bpt>function<ept id="p1">](../standard-library/function-class.md)</ept> class to enable a C++ lambda expression to behave like a higher-order function.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The following example shows a lambda expression that returns a <ph id="ph1">`function`</ph> object and a lambda expression that takes a <ph id="ph2">`function`</ph> object as its argument.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>In This Article<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Using a Lambda Expression in a Function</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You can use lambda expressions in the body of a function.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The lambda expression can access any function or data member that the enclosing function can access.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You can explicitly or implicitly capture the <ph id="ph1">`this`</ph> pointer to provide access to functions and data members of the enclosing class.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`this`</ph> pointer explicitly in a function, as shown here:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You can also capture the <ph id="ph1">`this`</ph> pointer implicitly:</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The following example shows the <ph id="ph1">`Scale`</ph> class, which encapsulates a scale value.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ApplyScale`</ph> function uses a lambda expression to print the product of the scale value and each element in a <ph id="ph2">`vector`</ph> object.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The lambda expression implicitly captures <ph id="ph1">`this`</ph> so that it can access the <ph id="ph2">`_scale`</ph> member.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>In This Article<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Using Lambda Expressions with Templates</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Because lambda expressions are typed, you can use them with C++ templates.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The following example shows the <ph id="ph1">`negate_all`</ph> and <ph id="ph2">`print_all`</ph> functions.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`negate_all`</ph> function applies the unary <ph id="ph2">`operator-`</ph> to each element in the <ph id="ph3">`vector`</ph> object.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`print_all`</ph> function prints each element in the <ph id="ph2">`vector`</ph> object to the console.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For more information about C++ templates, see <bpt id="p1">[</bpt>Templates<ept id="p1">](../cpp/templates-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>In This Article<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Handling Exceptions</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The body of a lambda expression follows the rules for both structured exception handling (SEH) and C++ exception handling.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You can handle a raised exception in the body of a lambda expression or defer exception handling to the enclosing scope.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`for_each`</ph> function and a lambda expression to fill a <ph id="ph2">`vector`</ph> object with the values of another one.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>It uses a <ph id="ph1">`try`/`catch`</ph> block to handle invalid access to the first vector.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>For more information about exception handling, see <bpt id="p1">[</bpt>Exception Handling<ept id="p1">](../cpp/exception-handling-in-visual-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>In This Article<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Using Lambda Expressions with Managed Types (C++/CLI)</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The capture clause of a lambda expression cannot contain a variable that has a managed type.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>However, you can pass an argument that has a managed type to the parameter list of a lambda expression.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The following example contains a lambda expression that captures the local unmanaged variable <ph id="ph1">`ch`</ph> by value and takes a &lt;xref:System.String?displayProperty=fullName&gt; object as its parameter.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>You can also use lambda expressions with the STL/CLR library.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>STL/CLR Library Reference<ept id="p1">](../dotnet/stl-clr-library-reference.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Lambdas are not supported in these common language runtime (CLR) managed entities: <ph id="ph1">`ref class`</ph>, <ph id="ph2">`ref struct`</ph>, <ph id="ph3">`value class`</ph>, and <ph id="ph4">`value struct`</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>In This Article<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Lambda Expressions</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Lambda Expression Syntax</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>auto</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>function Class</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>find_if</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>algorithm&gt;</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Function Call</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Templates</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Exception Handling</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>STL/CLR Library Reference</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>