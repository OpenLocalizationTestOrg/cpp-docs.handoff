{"nodes":[{"pos":[12,44],"content":"iterator Struct | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"iterator Struct | Microsoft Docs","pos":[0,32]}]},{"content":"iterator Struct","pos":[687,702]},{"pos":[703,814],"content":"An empty base struct used to ensure that a user-defined iterator class works properly with <bpt id=\"p1\">**</bpt>iterator_trait<ept id=\"p1\">**</ept>s.","source":"An empty base struct used to ensure that a user-defined iterator class works properly with **iterator_trait**s."},{"content":"Syntax","pos":[823,829]},{"content":"Remarks","pos":[1076,1083]},{"content":"The template struct serves as a base type for all iterators.","pos":[1087,1147]},{"content":"It defines the member types","pos":[1148,1175]},{"pos":[1203,1253],"content":"(a synonym for the template parameter <ph id=\"ph1\">`Category`</ph>).","source":" (a synonym for the template parameter `Category`)."},{"pos":[1274,1322],"content":"(a synonym for the template parameter <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept>).","source":" (a synonym for the template parameter **Type**)."},{"pos":[1348,1398],"content":"(a synonym for the template parameter <ph id=\"ph1\">`Distance`</ph>).","source":" (a synonym for the template parameter `Distance`)."},{"pos":[1422,1471],"content":"(a synonym for the template parameter <ph id=\"ph1\">`Distance`</ph>)","source":" (a synonym for the template parameter `Distance`)"},{"pos":[1489,1538],"content":"(a synonym for the template parameter <ph id=\"ph1\">`Pointer`</ph>).","source":" (a synonym for the template parameter `Pointer`)."},{"pos":[1558,1609],"content":"(a synonym for the template parameter <ph id=\"ph1\">`Reference`</ph>).","source":" (a synonym for the template parameter `Reference`)."},{"pos":[1616,1780],"content":"Note that <ph id=\"ph1\">`value_type`</ph> should not be a constant type even if <bpt id=\"p1\">**</bpt>pointer<ept id=\"p1\">**</ept> points at an object of const <bpt id=\"p2\">**</bpt>Type<ept id=\"p2\">**</ept> and reference designates an object of const <bpt id=\"p3\">**</bpt>Type<ept id=\"p3\">**</ept>.","source":"Note that `value_type` should not be a constant type even if **pointer** points at an object of const **Type** and reference designates an object of const **Type**."},{"content":"Example","pos":[1789,1796]},{"pos":[1800,1947],"content":"See <bpt id=\"p1\">[</bpt>iterator_traits<ept id=\"p1\">](../standard-library/iterator-traits-struct.md)</ept> for an example of how to declare and use the types in the iterator base class.","source":"See [iterator_traits](../standard-library/iterator-traits-struct.md) for an example of how to declare and use the types in the iterator base class."},{"content":"Requirements","pos":[1956,1968]},{"pos":[1972,1995],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>iterator&gt;","source":"**Header:** \\<iterator>"},{"pos":[2002,2020],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"content":"See Also","pos":[2029,2037]},{"content":"iterator&gt;","pos":[2044,2053],"source":"iterator>"},{"content":"Thread Safety in the C++ Standard Library","pos":[2093,2134]},{"content":"C++ Standard Library Reference","pos":[2207,2237]}],"content":"---\ntitle: \"iterator Struct | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"iterator\"\n  - \"std::iterator\"\n  - \"std.iterator\"\n  - \"xutility/std::iterator\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"iterator class\"\n  - \"iterator struct\"\nms.assetid: c74c8000-8b18-4829-9b71-6103c4229b74\ncaps.latest.revision: 18\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# iterator Struct\nAn empty base struct used to ensure that a user-defined iterator class works properly with **iterator_trait**s.  \n  \n## Syntax  \n```    \nstruct iterator {\n   typedef Category iterator_category;\n   typedef Type value_type;\n   typedef Distance difference_type;\n   typedef Distance distance_type;\n   typedef Pointer pointer;\n   typedef Reference reference;\n   };  \n```    \n## Remarks  \n The template struct serves as a base type for all iterators. It defines the member types  \n  \n- `iterator_category` (a synonym for the template parameter `Category`).  \n  \n- `value_type` (a synonym for the template parameter **Type**).  \n  \n- `difference_type` (a synonym for the template parameter `Distance`).  \n  \n- `distance_type` (a synonym for the template parameter `Distance`)  \n  \n- `pointer` (a synonym for the template parameter `Pointer`).  \n  \n- `reference` (a synonym for the template parameter `Reference`).  \n  \n Note that `value_type` should not be a constant type even if **pointer** points at an object of const **Type** and reference designates an object of const **Type**.  \n  \n## Example  \n See [iterator_traits](../standard-library/iterator-traits-struct.md) for an example of how to declare and use the types in the iterator base class.  \n  \n## Requirements  \n **Header:** \\<iterator>  \n  \n **Namespace:** std  \n  \n## See Also  \n [\\<iterator>](../standard-library/iterator.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}