{"nodes":[{"pos":[12,39],"content":"Specifiers | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Specifiers | Microsoft Docs","pos":[0,27]}]},{"content":"Specifiers","pos":[646,656]},{"pos":[657,791],"content":"This topic describes the <bpt id=\"p1\">*</bpt>decl-specifiers<ept id=\"p1\">*</ept> (declaration specifiers) component of a <bpt id=\"p2\">[</bpt>declaration<ept id=\"p2\">](declarations-and-definitions-cpp.md)</ept>.","source":"This topic describes the *decl-specifiers* (declaration specifiers) component of a [declaration](declarations-and-definitions-cpp.md)."},{"content":"The following placeholders and language keywords are declaration specifiers:","pos":[798,874]},{"content":"storage-class-specifier","pos":[882,905]},{"content":"type-specifier","pos":[914,928]},{"content":"function-specifier","pos":[937,955]},{"content":"friend","pos":[964,970]},{"content":"typedef","pos":[1001,1008]},{"pos":[1086,1151],"content":"<bpt id=\"p1\">[</bpt>__declspec<ept id=\"p1\">](../cpp/declspec.md)</ept> <ph id=\"ph1\">`(`</ph> <bpt id=\"p2\">*</bpt>extended-decl-modifier-seq<ept id=\"p2\">*</ept>","source":"[__declspec](../cpp/declspec.md) `(` *extended-decl-modifier-seq*"},{"content":"Remarks","pos":[1164,1171]},{"content":"The <bpt id=\"p1\">*</bpt>decl-specifiers<ept id=\"p1\">*</ept> part of a declaration is the longest sequence of <bpt id=\"p2\">*</bpt>decl-specifiers<ept id=\"p2\">*</ept> that can be taken to mean a type name, not including the pointer or reference modifiers.","pos":[1175,1352],"source":"The *decl-specifiers* part of a declaration is the longest sequence of *decl-specifiers* that can be taken to mean a type name, not including the pointer or reference modifiers."},{"content":"The remainder of the declaration is the <bpt id=\"p1\">*</bpt>declarator<ept id=\"p1\">*</ept>, which includes the name introduced.","pos":[1353,1442],"source":" The remainder of the declaration is the *declarator*, which includes the name introduced."},{"pos":[1449,1583],"content":"The following table lists four declarations, and then lists each declaration's <bpt id=\"p1\">*</bpt>decl-specifers<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>declarator<ept id=\"p2\">*</ept> component separately.","source":"The following table lists four declarations, and then lists each declaration's *decl-specifers* and *declarator* component separately."},{"content":"Declaration","pos":[1590,1601]},{"content":"decl-specifiers","pos":[1603,1618]},{"pos":[1897,2084],"content":"Because <ph id=\"ph1\">`signed`</ph>, <ph id=\"ph2\">`unsigned`</ph>, <ph id=\"ph3\">`long`</ph>, and <ph id=\"ph4\">`short`</ph> all imply <ph id=\"ph5\">`int`</ph>, a <ph id=\"ph6\">`typedef`</ph> name following one of these keywords is taken to be a member of <bpt id=\"p1\">*</bpt>declarator-list,<ept id=\"p1\">*</ept> not of <bpt id=\"p2\">*</bpt>decl-specifiers<ept id=\"p2\">*</ept>.","source":"Because `signed`, `unsigned`, `long`, and `short` all imply `int`, a `typedef` name following one of these keywords is taken to be a member of *declarator-list,* not of *decl-specifiers*."},{"pos":[2092,2315],"content":"[!NOTE]\n Because a name can be redeclared, its interpretation is subject to the most recent declaration in the current scope. Redeclaration can affect how names are interpreted by the compiler, especially `typedef` names.","leadings":["","> "],"nodes":[{"content":" Because a name can be redeclared, its interpretation is subject to the most recent declaration in the current scope. Redeclaration can affect how names are interpreted by the compiler, especially `typedef` names.","pos":[8,221],"nodes":[{"content":"Because a name can be redeclared, its interpretation is subject to the most recent declaration in the current scope.","pos":[1,117]},{"content":"Redeclaration can affect how names are interpreted by the compiler, especially <ph id=\"ph1\">`typedef`</ph> names.","pos":[118,213],"source":" Redeclaration can affect how names are interpreted by the compiler, especially `typedef` names."}]}]},{"content":"See Also","pos":[2324,2332]},{"content":"Declarations and Definitions","pos":[2337,2365]}],"content":"---\ntitle: \"Specifiers | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"declaration specifiers\"\n  - \"declarations, specifiers\"\n  - \"specifiers, in declarations\"\nms.assetid: 8b14e844-9880-4571-8779-28c8efe44633\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Specifiers\nThis topic describes the *decl-specifiers* (declaration specifiers) component of a [declaration](declarations-and-definitions-cpp.md).  \n  \n The following placeholders and language keywords are declaration specifiers:  \n  \n *storage-class-specifier*  \n  \n *type-specifier*  \n  \n *function-specifier*  \n  \n [friend](../cpp/friend-cpp.md)  \n  \n [typedef](http://msdn.microsoft.com/en-us/cc96cf26-ba93-4179-951e-695d1f5fdcf1)  \n  \n [__declspec](../cpp/declspec.md) `(` *extended-decl-modifier-seq* `)`  \n  \n## Remarks  \n The *decl-specifiers* part of a declaration is the longest sequence of *decl-specifiers* that can be taken to mean a type name, not including the pointer or reference modifiers. The remainder of the declaration is the *declarator*, which includes the name introduced.  \n  \n The following table lists four declarations, and then lists each declaration's *decl-specifers* and *declarator* component separately.  \n  \n|Declaration|*decl-specifiers*|`declarator`|  \n|-----------------|------------------------|------------------|  \n|`char *lpszAppName;`|`char`|`*lpszAppName`|  \n|`typedef char * LPSTR;`|`char`|`*LPSTR`|  \n|`const int func1();`|`const int`|`func1`|  \n|`volatile void *pvvObj;`|`volatile void`|`*pvvObj`|  \n  \n Because `signed`, `unsigned`, `long`, and `short` all imply `int`, a `typedef` name following one of these keywords is taken to be a member of *declarator-list,* not of *decl-specifiers*.  \n  \n> [!NOTE]\n>  Because a name can be redeclared, its interpretation is subject to the most recent declaration in the current scope. Redeclaration can affect how names are interpreted by the compiler, especially `typedef` names.  \n  \n## See Also  \n [Declarations and Definitions](declarations-and-definitions-cpp.md)"}