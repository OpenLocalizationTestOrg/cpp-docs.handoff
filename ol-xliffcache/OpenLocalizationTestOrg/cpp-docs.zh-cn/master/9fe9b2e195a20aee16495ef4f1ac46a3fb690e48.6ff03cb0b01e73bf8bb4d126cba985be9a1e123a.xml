{"nodes":[{"pos":[12,56],"content":"operator!= (pair) (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"operator!= (pair) (STL-CLR) | Microsoft Docs","pos":[0,44]}]},{"content":"operator!= (pair) (STL/CLR)","pos":[639,666]},{"content":"Pair not equal comparison.","pos":[667,693]},{"content":"Syntax","pos":[702,708]},{"content":"Parameters","pos":[875,885]},{"content":"left","pos":[889,893]},{"content":"Left pair to compare.","pos":[897,918]},{"content":"right","pos":[925,930]},{"content":"Right pair to compare.","pos":[934,956]},{"content":"Remarks","pos":[965,972]},{"content":"The operator function returns <ph id=\"ph1\">`!(``left`</ph> <ph id=\"ph2\">`==`</ph> <ph id=\"ph3\">`right``)`</ph>.","pos":[976,1033],"source":"The operator function returns `!(``left` `==` `right``)`."},{"content":"You use it to test whether <ph id=\"ph1\">`left`</ph> is not ordered the same as <ph id=\"ph2\">`right`</ph> when the two pairs are compared element by element.","pos":[1034,1154],"source":" You use it to test whether `left` is not ordered the same as `right` when the two pairs are compared element by element."},{"content":"Example","pos":[1163,1170]},{"content":"Requirements","pos":[1827,1839]},{"pos":[1843,1872],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/utility&gt;","source":"**Header:** \\<cliext/utility>"},{"pos":[1879,1900],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[1909,1917]},{"content":"pair (STL/CLR)","pos":[1922,1936]},{"content":"operator== (pair) (STL/CLR)","pos":[1970,1997]},{"content":"operator<ph id=\"ph1\">\\&lt;</ph> (pair) (STL/CLR)","pos":[2049,2076],"source":"operator\\< (pair) (STL/CLR)"},{"content":"operator&gt;= (pair) (STL/CLR)","pos":[2129,2156],"source":"operator>= (pair) (STL/CLR)"},{"content":"operator&gt; (pair) (STL/CLR)","pos":[2216,2242],"source":"operator> (pair) (STL/CLR)"},{"content":"operator&lt;= (pair) (STL/CLR)","pos":[2298,2325],"source":"operator<= (pair) (STL/CLR)"}],"content":"---\ntitle: \"operator!= (pair) (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::pair::operator!=\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"operator!= member [STL/CLR]\"\nms.assetid: 167005f9-727d-40af-8d6d-2793d0daa96a\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# operator!= (pair) (STL/CLR)\nPair not equal comparison.  \n  \n## Syntax  \n  \n```  \ntemplate<typename Value1,  \n    typename Value2>  \n    bool operator!=(pair<Value1, Value2>% left,  \n        pair<Value1, Value2>% right);  \n```  \n  \n#### Parameters  \n left  \n Left pair to compare.  \n  \n right  \n Right pair to compare.  \n  \n## Remarks  \n The operator function returns `!(``left` `==` `right``)`. You use it to test whether `left` is not ordered the same as `right` when the two pairs are compared element by element.  \n  \n## Example  \n  \n```  \n// cliext_pair_operator_ne.cpp   \n// compile with: /clr   \n#include <cliext/utility>   \n  \nint main()   \n    {   \n    cliext::pair<wchar_t, int> c1(L'x', 3);   \n    System::Console::WriteLine(\"[{0}, {1}]\", c1.first, c1.second);   \n    cliext::pair<wchar_t, int> c2(L'x', 4);   \n    System::Console::WriteLine(\"[{0}, {1}]\", c2.first, c2.second);   \n  \n    System::Console::WriteLine(\"[x 3] != [x 3] is {0}\",   \n        c1 != c1);   \n    System::Console::WriteLine(\"[x 3] != [x 4] is {0}\",   \n        c1 != c2);   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n[x, 3]  \n[x, 4]  \n[x 3] != [x 3] is False  \n[x 3] != [x 4] is True  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/utility>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [pair (STL/CLR)](../dotnet/pair-stl-clr.md)   \n [operator== (pair) (STL/CLR)](../dotnet/operator-equality-pair-stl-clr.md)   \n [operator\\< (pair) (STL/CLR)](../dotnet/operator-less-than-pair-stl-clr.md)   \n [operator>= (pair) (STL/CLR)](../dotnet/operator-greater-or-equal-pair-stl-clr.md)   \n [operator> (pair) (STL/CLR)](../dotnet/operator-greater-than-pair-stl-clr.md)   \n [operator<= (pair) (STL/CLR)](../dotnet/operator-less-or-equal-pair-stl-clr.md)"}