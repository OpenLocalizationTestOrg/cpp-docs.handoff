{"nodes":[{"pos":[12,45],"content":"_ltoa_s, _ltow_s | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_ltoa_s, _ltow_s | Microsoft Docs","pos":[0,33]}]},{"content":"_ltoa_s, _ltow_s","pos":[1100,1116]},{"content":"Converts a long integer to a string.","pos":[1117,1153]},{"content":"These are versions of <bpt id=\"p1\">[</bpt>_ltoa, _ltow<ept id=\"p1\">](../../c-runtime-library/reference/ltoa-ltow.md)</ept> with security enhancements as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1154,1370],"source":" These are versions of [_ltoa, _ltow](../../c-runtime-library/reference/ltoa-ltow.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"content":"Syntax","pos":[1379,1385]},{"content":"Parameters","pos":[1859,1869]},{"content":"Number to be converted.","pos":[1884,1907]},{"content":"Buffer for the resulting string.","pos":[1923,1955]},{"content":"Size of the <ph id=\"ph1\">`str`</ph> in bytes for <ph id=\"ph2\">`_ltoa_s`</ph> or words for <ph id=\"ph3\">`_ltow_s`</ph>.","pos":[1977,2041],"source":" Size of the `str` in bytes for `_ltoa_s` or words for `_ltow_s`."},{"content":"Base of <ph id=\"ph1\">`value`</ph>.","pos":[2059,2075],"source":" Base of `value`."},{"content":"Return Value","pos":[2084,2096]},{"content":"Zero if the function was successful or an error code.","pos":[2100,2153]},{"content":"Remarks","pos":[2162,2169]},{"content":"The <ph id=\"ph1\">`_ltoa_s`</ph> function converts the digits of <ph id=\"ph2\">`value`</ph> to a null-terminated character string and stores the result (up to 33 bytes) in <ph id=\"ph3\">`str`</ph>.","pos":[2173,2313],"source":"The `_ltoa_s` function converts the digits of `value` to a null-terminated character string and stores the result (up to 33 bytes) in `str`."},{"content":"The <ph id=\"ph1\">`radix`</ph> argument specifies the base of <ph id=\"ph2\">`value`</ph>, which must be in the range 2 – 36.","pos":[2314,2400],"source":" The `radix` argument specifies the base of `value`, which must be in the range 2 – 36."},{"content":"If <ph id=\"ph1\">`radix`</ph> equals 10 and <ph id=\"ph2\">`value`</ph> is negative, the first character of the stored string is the minus sign (–).","pos":[2401,2510],"source":" If `radix` equals 10 and `value` is negative, the first character of the stored string is the minus sign (–)."},{"content":"is a wide character version of <ph id=\"ph1\">`_ltoa_s`</ph>; the second argument of <ph id=\"ph2\">`_ltow_s`</ph> is a wide character strings.","pos":[2521,2624],"source":" is a wide character version of `_ltoa_s`; the second argument of `_ltow_s` is a wide character strings."},{"content":"If <ph id=\"ph1\">`str`</ph> is a <ph id=\"ph2\">`NULL`</ph> pointer or <ph id=\"ph3\">`sizeOfstr`</ph> is less than or equal to zero, these functions invoke an invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2631,2847],"source":"If `str` is a `NULL` pointer or `sizeOfstr` is less than or equal to zero, these functions invoke an invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions return -1 and set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> or if the <ph id=\"ph3\">`value`</ph> or <ph id=\"ph4\">`str`</ph> out of range of a long integer, these functions return a -1 and set the <ph id=\"ph5\">`errno`</ph> to <ph id=\"ph6\">`ERANGE`</ph>.","pos":[2848,3058],"source":" If execution is allowed to continue, these functions return -1 and set `errno` to `EINVAL` or if the `value` or `str` out of range of a long integer, these functions return a -1 and set the `errno` to `ERANGE`."},{"content":"In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically (eliminating the need to specify a size argument) and they can automatically replace older, non-secure functions with their newer, secure counterparts.","pos":[3065,3335]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[3336,3444],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"content":"Generic-Text Routine Mappings","pos":[3454,3483]},{"content":"Tchar.h routine","pos":[3490,3505]},{"content":"_UNICODE and _MBCS not defined","pos":[3506,3536]},{"content":"_MBCS defined","pos":[3537,3550]},{"content":"_UNICODE defined","pos":[3551,3567]},{"content":"Requirements","pos":[3731,3743]},{"content":"Routine","pos":[3750,3757]},{"content":"Required header","pos":[3758,3773]},{"content":"stdlib.h&gt;","pos":[3830,3839],"source":"stdlib.h>"},{"content":"stdlib.h&gt;","pos":[3856,3865],"source":"stdlib.h>"},{"pos":[3873,3991],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":".NET Framework Equivalent","pos":[4000,4025]},{"content":"System::Convert::ToString","pos":[4030,4055]},{"content":"See Also","pos":[4136,4144]},{"content":"Data Conversion","pos":[4149,4164]},{"content":"_itoa, _i64toa, _ui64toa, _itow, _i64tow, _ui64tow","pos":[4215,4265]},{"content":"_ultoa, _ultow","pos":[4350,4364]},{"content":"_ultoa_s, _ultow_s","pos":[4421,4439]}],"content":"---\ntitle: \"_ltoa_s, _ltow_s | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_ltoa_s\"\n  - \"_ltow_s\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_ltow_s\"\n  - \"_ltoa_s\"\n  - \"ltoa_s\"\n  - \"ltow_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"converting integers\"\n  - \"_ltoa_s function\"\n  - \"ltow_s function\"\n  - \"long integer conversion to string\"\n  - \"converting numbers, to strings\"\n  - \"ltoa_s function\"\n  - \"_ltow_s function\"\nms.assetid: d7dc61ea-1ccd-412d-b262-555a58647386\ncaps.latest.revision: 18\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _ltoa_s, _ltow_s\nConverts a long integer to a string. These are versions of [_ltoa, _ltow](../../c-runtime-library/reference/ltoa-ltow.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n## Syntax  \n  \n```  \nerrno_t _ltoa_s(  \n    long value,  \n    char *str,  \n    size_t sizeOfstr,  \n    int radix   \n);  \nerrno_t _ltow_s(  \n    long value,  \n    wchar_t *str,  \n    size_t sizeOfstr,  \n    int radix   \n);  \ntemplate <size_t size>  \nerrno_t _ltoa_s(  \n    long value,  \n    char (&str)[size],  \n    int radix   \n); // C++ only  \ntemplate <size_t size>  \nerrno_t _ltow_s(  \n    long value,  \n    wchar_t (&str)[size],  \n    int radix   \n); // C++ only  \n```  \n  \n#### Parameters  \n `value`  \n Number to be converted.  \n  \n `str`  \n Buffer for the resulting string.  \n  \n `sizeOfstr`  \n Size of the `str` in bytes for `_ltoa_s` or words for `_ltow_s`.  \n  \n `radix`  \n Base of `value`.  \n  \n## Return Value  \n Zero if the function was successful or an error code.  \n  \n## Remarks  \n The `_ltoa_s` function converts the digits of `value` to a null-terminated character string and stores the result (up to 33 bytes) in `str`. The `radix` argument specifies the base of `value`, which must be in the range 2 – 36. If `radix` equals 10 and `value` is negative, the first character of the stored string is the minus sign (–). `_ltow_s` is a wide character version of `_ltoa_s`; the second argument of `_ltow_s` is a wide character strings.  \n  \n If `str` is a `NULL` pointer or `sizeOfstr` is less than or equal to zero, these functions invoke an invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions return -1 and set `errno` to `EINVAL` or if the `value` or `str` out of range of a long integer, these functions return a -1 and set the `errno` to `ERANGE`.  \n  \n In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically (eliminating the need to specify a size argument) and they can automatically replace older, non-secure functions with their newer, secure counterparts. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n### Generic-Text Routine Mappings  \n  \n|Tchar.h routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_ltot_s`|`_ltoa_s`|`_ltoa_s`|`_ltow_s`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_ltoa_s`|\\<stdlib.h>|  \n|`_ltow_s`|\\<stdlib.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## .NET Framework Equivalent  \n [System::Convert::ToString](https://msdn.microsoft.com/en-us/library/system.convert.tostring.aspx)  \n  \n## See Also  \n [Data Conversion](../../c-runtime-library/data-conversion.md)   \n [_itoa, _i64toa, _ui64toa, _itow, _i64tow, _ui64tow](../../c-runtime-library/reference/itoa-i64toa-ui64toa-itow-i64tow-ui64tow.md)   \n [_ultoa, _ultow](../../c-runtime-library/reference/ultoa-ultow.md)   \n [_ultoa_s, _ultow_s](../../c-runtime-library/reference/ultoa-s-ultow-s.md)"}