<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3eb77df4433353f663840b410b32603c5fc1a5ae</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\toolbar-fundamentals.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e6bd3ca0b4ddecf71d75b9ac46e4e5e9cdc97f9f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">31e412d47c5d066d3a72dd4fc7ecd14aecee8660</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Toolbar Fundamentals | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Toolbar Fundamentals</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article describes the fundamental MFC implementation that lets you add a default toolbar to your application by selecting an option in the Application Wizard.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Topics covered include:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The Application Wizard toolbar option</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The toolbar in code</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Editing the toolbar resource</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Multiple toolbars</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The Application Wizard Toolbar Option</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To get a single toolbar with default buttons, select the Standard Docking toolbar option on the page labeled User Interface Features.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This adds code to your application that:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Creates the toolbar object.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Manages the toolbar, including its ability to dock or to float.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The Toolbar in Code</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The toolbar is a <bpt id="p1">[</bpt>CToolBar<ept id="p1">](../mfc/reference/ctoolbar-class.md)</ept> object declared as a data member of your application's <bpt id="p2">**</bpt>CMainFrame<ept id="p2">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In other words, the toolbar object is embedded in the main frame window object.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This means that MFC creates the toolbar when it creates the frame window and destroys the toolbar when it destroys the frame window.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following partial class declaration, for a multiple document interface (MDI) application, shows data members for an embedded toolbar and an embedded status bar.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It also shows the override of the <ph id="ph1">`OnCreate`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>NVC_MFCListView#6</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Toolbar creation occurs in <bpt id="p1">**</bpt>CMainFrame::OnCreate<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>MFC calls <bpt id="p1">[</bpt>OnCreate<ept id="p1">](../mfc/reference/cwnd-class.md#cwnd__oncreate)</ept> after creating the window for the frame but before it becomes visible.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The default <ph id="ph1">`OnCreate`</ph> that the Application Wizard generates does the following toolbar tasks:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Calls the <ph id="ph1">`CToolBar`</ph> object's <bpt id="p1">[</bpt>Create<ept id="p1">](../mfc/reference/ctoolbar-class.md#ctoolbar__create)</ept> member function to create the underlying <bpt id="p2">[</bpt>CToolBarCtrl<ept id="p2">](../mfc/reference/ctoolbarctrl-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Calls <bpt id="p1">[</bpt>LoadToolBar<ept id="p1">](../mfc/reference/ctoolbar-class.md#ctoolbar__loadtoolbar)</ept> to load the toolbar resource information.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Calls functions to enable docking, floating, and tool tips.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For details about these calls, see the article <bpt id="p1">[</bpt>Docking and Floating Toolbars<ept id="p1">](../mfc/docking-and-floating-toolbars.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The MFC General sample <bpt id="p1">[</bpt>DOCKTOOL<ept id="p1">](../visual-cpp-samples.md)</ept> includes illustrations of both old and new MFC toolbars.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The toolbars that use <bpt id="p1">**</bpt>COldToolbar<ept id="p1">**</ept> require calls in step 2 to <ph id="ph1">`LoadBitmap`</ph> (rather than <ph id="ph2">`LoadToolBar`</ph>) and to <ph id="ph3">`SetButtons`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The new toolbars require calls to <ph id="ph1">`LoadToolBar`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The docking, floating, and tool tips calls are optional.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can remove those lines from <ph id="ph1">`OnCreate`</ph> if you prefer.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The result is a toolbar that remains fixed, unable to float or redock and unable to display tool tips.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Editing the Toolbar Resource</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The default toolbar you get with the Application Wizard is based on an <bpt id="p1">**</bpt>RT_TOOLBAR<ept id="p1">**</ept> custom resource, introduced in MFC version 4.0.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can edit this resource with the <bpt id="p1">[</bpt>toolbar editor<ept id="p1">](../mfc/toolbar-editor.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The editor lets you easily add, delete, and rearrange buttons.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>It contains a graphical editor for the buttons that is very similar to the general graphics editor in Visual C++.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you edited toolbars in previous versions of Visual C++, you'll find the task much easier now.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To connect a toolbar button to a command, you give the button a command ID, such as <ph id="ph1">`ID_MYCOMMAND`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Specify the command ID in the button's property page in the toolbar editor.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Then create a handler function for the command (see <bpt id="p1">[</bpt>Mapping Messages to Functions<ept id="p1">](../mfc/reference/mapping-messages-to-functions.md)</ept> for more information).</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>New <bpt id="p1">[</bpt>CToolBar<ept id="p1">](../mfc/reference/ctoolbar-class.md)</ept> member functions work with the <bpt id="p2">**</bpt>RT_TOOLBAR<ept id="p2">**</ept> resource.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LoadToolBar<ept id="p1">](../mfc/reference/ctoolbar-class.md#ctoolbar__loadtoolbar)</ept> now takes the place of <bpt id="p2">[</bpt>LoadBitmap<ept id="p2">](../mfc/reference/ctoolbar-class.md#ctoolbar__loadbitmap)</ept> to load the bitmap of the toolbar button images, and <bpt id="p3">[</bpt>SetButtons<ept id="p3">](../mfc/reference/ctoolbar-class.md#ctoolbar__setbuttons)</ept> to set the button styles and connect buttons with bitmap images.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For details about using the toolbar editor, see <bpt id="p1">[</bpt>Toolbar Editor<ept id="p1">](../mfc/toolbar-editor.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Multiple Toolbars</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The Application Wizard provides you with one default toolbar.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If you need more than one toolbar in your application, you can model your code for additional toolbars based on the wizard-generated code for the default toolbar.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If you want to display a toolbar as the result of a command, you'll need to:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Create a new toolbar resource with the toolbar editor and load it in <ph id="ph1">`OnCreate`</ph> with the <bpt id="p1">[</bpt>LoadToolbar<ept id="p1">](../mfc/reference/ctoolbar-class.md#ctoolbar__loadtoolbar)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Embed a new <bpt id="p1">[</bpt>CToolBar<ept id="p1">](../mfc/reference/ctoolbar-class.md)</ept> object in your main frame window class.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Make the appropriate function calls in <ph id="ph1">`OnCreate`</ph> to dock or float the toolbar, set its styles, and so on.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>What do you want to know more about</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>MFC Toolbar Implementation (overview information on toolbars)</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Docking and floating toolbars</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Toolbar tool tips</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CToolBar<ept id="p1">](../mfc/reference/ctoolbar-class.md)</ept> and <bpt id="p2">[</bpt>CToolBarCtrl<ept id="p2">](../mfc/reference/ctoolbarctrl-class.md)</ept> classes</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Working with the toolbar control</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Using your old toolbars</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>MFC Toolbar Implementation</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>