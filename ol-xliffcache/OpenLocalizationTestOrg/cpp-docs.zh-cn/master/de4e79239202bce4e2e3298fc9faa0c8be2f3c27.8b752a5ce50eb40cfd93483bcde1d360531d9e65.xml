{"nodes":[{"pos":[12,41],"content":"for each, in | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"for each, in | Microsoft Docs","pos":[0,29]}]},{"content":"for each, in","pos":[641,653]},{"content":"Iterates through an array or collection.","pos":[654,694]},{"content":"This non-standard keyword is available in both C++/CLI and native C++ projects.","pos":[695,774]},{"content":"However, its use is not recommended.","pos":[775,811]},{"content":"Consider using a standard <bpt id=\"p1\">[</bpt>Range-based for Statement (C++)<ept id=\"p1\">](../cpp/range-based-for-statement-cpp.md)</ept> instead.","pos":[812,921],"source":" Consider using a standard [Range-based for Statement (C++)](../cpp/range-based-for-statement-cpp.md) instead."},{"content":"All Runtimes","pos":[930,942]},{"content":"Syntax","pos":[948,954]},{"content":"Parameters","pos":[1054,1064]},{"content":"The type of <ph id=\"ph1\">`identifier`</ph>.","pos":[1083,1108],"source":" The type of `identifier`."},{"content":"The iteration variable that represents the collection element.","pos":[1131,1193]},{"content":"When <ph id=\"ph1\">`identifier`</ph> is a <bpt id=\"p1\">[</bpt>Tracking Reference Operator<ept id=\"p1\">](../windows/tracking-reference-operator-cpp-component-extensions.md)</ept>, you can modify the element.","pos":[1195,1344],"source":"  When `identifier` is a [Tracking Reference Operator](../windows/tracking-reference-operator-cpp-component-extensions.md), you can modify the element."},{"content":"An array expression or collection.","pos":[1367,1401]},{"content":"The collection element must be such that the compiler can convert it to the <ph id=\"ph1\">`identifier`</ph> type.","pos":[1402,1496],"source":" The collection element must be such that the compiler can convert it to the `identifier` type."},{"content":"One or more statements to be executed.","pos":[1519,1557]},{"content":"Remarks","pos":[1566,1573]},{"content":"The <ph id=\"ph1\">`for each`</ph> statement is used to iterate through a collection.","pos":[1582,1647],"source":"The `for each` statement is used to iterate through a collection."},{"content":"You can modify elements in a collection, but you cannot add or delete elements.","pos":[1648,1727]},{"content":"The <bpt id=\"p1\">*</bpt>statements<ept id=\"p1\">*</ept> are executed for each element in the array or collection.","pos":[1734,1808],"source":"The *statements* are executed for each element in the array or collection."},{"content":"After the iteration has been completed for all the elements in the collection, control is transferred to the statement that follows the <ph id=\"ph1\">`for each`</ph> block.","pos":[1809,1962],"source":" After the iteration has been completed for all the elements in the collection, control is transferred to the statement that follows the `for each` block."},{"pos":[1980,2089],"content":"and <ph id=\"ph1\">`in`</ph> are <bpt id=\"p1\">[</bpt>context-sensitive keywords<ept id=\"p1\">](../windows/context-sensitive-keywords-cpp-component-extensions.md)</ept>.","source":" and `in` are [context-sensitive keywords](../windows/context-sensitive-keywords-cpp-component-extensions.md)."},{"content":"For more information:","pos":[2096,2117]},{"content":"Iterating Over STL Collection By Using for each","pos":[2128,2175]},{"content":"How to: Iterate Over Arrays with for each","pos":[2249,2290]},{"content":"How to: Iterate Over a Generic Collection with for each","pos":[2357,2412]},{"content":"How to: Iterate Over a User-Defined Collection with for each","pos":[2493,2553]},{"content":"Requirements","pos":[2699,2711]},{"pos":[2715,2739],"content":"Compiler option: <bpt id=\"p1\">**</bpt>/ZW<ept id=\"p1\">**</ept>","source":"Compiler option: **/ZW**"},{"content":"Example","pos":[2749,2756]},{"pos":[2760,2829],"content":"This example shows how to use <ph id=\"ph1\">`for each`</ph> to iterate through a string.","source":"This example shows how to use `for each` to iterate through a string."},{"content":"Output","pos":[3335,3341]},{"content":"Remarks","pos":[3470,3477]},{"pos":[3486,3563],"content":"The CLR syntax is the same as the <bpt id=\"p1\">**</bpt>All Runtimes<ept id=\"p1\">**</ept> syntax, except as follows.","source":"The CLR syntax is the same as the **All Runtimes** syntax, except as follows."},{"content":"expression","pos":[3571,3581]},{"content":"A managed array expression or collection.","pos":[3586,3627]},{"content":"The collection element must be such that the compiler can convert it from &lt;xref:System.Object&gt; to the <bpt id=\"p1\">*</bpt>identifier<ept id=\"p1\">*</ept> type.","pos":[3628,3748],"source":" The collection element must be such that the compiler can convert it from <xref:System.Object> to the *identifier* type."},{"pos":[3755,4088],"content":"<bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> evaluates to a type that implements &lt;xref:System.Collections.IEnumerable&gt;, &lt;xref:System.Collections.Generic.IEnumerable%601&gt;, or a type that defines a <ph id=\"ph1\">`GetEnumerator`</ph> method that either returns a type that implements &lt;xref:System.Collections.IEnumerator&gt; or declares all of the methods that are defined in <ph id=\"ph2\">`IEnumerator`</ph>.","source":"*expression* evaluates to a type that implements <xref:System.Collections.IEnumerable>, <xref:System.Collections.Generic.IEnumerable%601>, or a type that defines a `GetEnumerator` method that either returns a type that implements <xref:System.Collections.IEnumerator> or declares all of the methods that are defined in `IEnumerator`."},{"content":"Requirements","pos":[4098,4110]},{"pos":[4114,4139],"content":"Compiler option: <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept>","source":"Compiler option: **/clr**"},{"content":"Example","pos":[4149,4156]},{"pos":[4160,4229],"content":"This example shows how to use <ph id=\"ph1\">`for each`</ph> to iterate through a string.","source":"This example shows how to use `for each` to iterate through a string."},{"content":"Output","pos":[4721,4727]},{"content":"See Also","pos":[4780,4788]},{"content":"Component Extensions for Runtime Platforms","pos":[4793,4835]}],"content":"---\ntitle: \"for each, in | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::foreach\"\n  - \"for\"\n  - \"each\"\n  - \"in\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"for each keyword [C++]\"\nms.assetid: 0c3a364b-2747-43f3-bb8d-b7d3b7023f79\ncaps.latest.revision: 24\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# for each, in\nIterates through an array or collection. This non-standard keyword is available in both C++/CLI and native C++ projects. However, its use is not recommended. Consider using a standard [Range-based for Statement (C++)](../cpp/range-based-for-statement-cpp.md) instead.  \n  \n## All Runtimes  \n **Syntax**  \n  \n```  \n  \n      for each (typeidentifierinexpression) {  \n   statements  \n}  \n  \n```  \n  \n **Parameters**  \n  \n `type`  \n The type of `identifier`.  \n  \n `identifier`  \n The iteration variable that represents the collection element.  When `identifier` is a [Tracking Reference Operator](../windows/tracking-reference-operator-cpp-component-extensions.md), you can modify the element.  \n  \n `expression`  \n An array expression or collection. The collection element must be such that the compiler can convert it to the `identifier` type.  \n  \n `statements`  \n One or more statements to be executed.  \n  \n **Remarks**  \n  \n The `for each` statement is used to iterate through a collection. You can modify elements in a collection, but you cannot add or delete elements.  \n  \n The *statements* are executed for each element in the array or collection. After the iteration has been completed for all the elements in the collection, control is transferred to the statement that follows the `for each` block.  \n  \n `for each` and `in` are [context-sensitive keywords](../windows/context-sensitive-keywords-cpp-component-extensions.md).  \n  \n For more information:  \n  \n-   [Iterating Over STL Collection By Using for each](../dotnet/iterating-over-stl-collection-by-using-for-each.md)  \n  \n-   [How to: Iterate Over Arrays with for each](../dotnet/how-to-iterate-over-arrays-with-for-each.md)  \n  \n-   [How to: Iterate Over a Generic Collection with for each](../dotnet/how-to-iterate-over-a-generic-collection-with-for-each.md)  \n  \n-   [How to: Iterate Over a User-Defined Collection with for each](../dotnet/how-to-iterate-over-a-user-defined-collection-with-for-each.md)  \n  \n## [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]  \n  \n### Requirements  \n Compiler option: **/ZW**  \n  \n### Example  \n This example shows how to use `for each` to iterate through a string.  \n  \n```  \n// for_each_string1.cpp  \n// compile with: /ZW  \n#include <stdio.h>  \nusing namespace Platform;  \n  \nref struct MyClass {  \n   property String^ MyStringProperty;  \n};  \n  \nint main() {  \n   String^ MyString = ref new String(\"abcd\");  \n  \n   for each ( char c in MyString )  \n      wprintf(\"%c\", c);  \n  \n   wprintf(\"/n\");  \n  \n   MyClass^ x = ref new MyClass();  \n   x->MyStringProperty = \"Testing\";  \n  \n   for each( char c in x->MyStringProperty )  \n      wprintf(\"%c\", c);  \n}  \n```  \n  \n **Output**  \n  \n```Output  \nabcd  \n  \nTesting  \n```  \n  \n## [!INCLUDE[clr_for_headings](../dotnet/includes/clr_for_headings_md.md)]  \n **Remarks**  \n  \n The CLR syntax is the same as the **All Runtimes** syntax, except as follows.  \n  \n *expression*  \n A managed array expression or collection. The collection element must be such that the compiler can convert it from <xref:System.Object> to the *identifier* type.  \n  \n *expression* evaluates to a type that implements <xref:System.Collections.IEnumerable>, <xref:System.Collections.Generic.IEnumerable%601>, or a type that defines a `GetEnumerator` method that either returns a type that implements <xref:System.Collections.IEnumerator> or declares all of the methods that are defined in `IEnumerator`.  \n  \n### Requirements  \n Compiler option: **/clr**  \n  \n### Example  \n This example shows how to use `for each` to iterate through a string.  \n  \n```  \n// for_each_string2.cpp  \n// compile with: /clr  \nusing namespace System;  \n  \nref struct MyClass {  \n   property String ^ MyStringProperty;  \n};  \n  \nint main() {  \n   String ^ MyString = gcnew String(\"abcd\");  \n  \n   for each ( Char c in MyString )  \n      Console::Write(c);  \n  \n   Console::WriteLine();  \n  \n   MyClass ^ x = gcnew MyClass();  \n   x->MyStringProperty = \"Testing\";  \n  \n   for each( Char c in x->MyStringProperty )  \n      Console::Write(c);  \n}  \n```  \n  \n **Output**  \n  \n```Output  \nabcd  \n  \nTesting   \n```  \n  \n## See Also  \n [Component Extensions for Runtime Platforms](../windows/component-extensions-for-runtime-platforms.md)"}