{"nodes":[{"pos":[12,61],"content":"Compiler Warning (level 4) C4127 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Warning (level 4) C4127 | Microsoft Docs","pos":[0,49]}]},{"content":"Compiler Warning (level 4) C4127","pos":[631,663]},{"content":"conditional expression is constant","pos":[664,698]},{"content":"The controlling expression of an <ph id=\"ph1\">`if`</ph> statement or <ph id=\"ph2\">`while`</ph> loop evaluates to a constant.","pos":[705,793],"source":"The controlling expression of an `if` statement or `while` loop evaluates to a constant."},{"content":"Because of their common idiomatic usage, trivial constants such as 1 or <ph id=\"ph1\">`true`</ph> do not trigger the warning, unless they are the result of an operation in an expression.","pos":[794,961],"source":" Because of their common idiomatic usage, trivial constants such as 1 or `true` do not trigger the warning, unless they are the result of an operation in an expression."},{"content":"If the controlling expression of a <ph id=\"ph1\">`while`</ph> loop is a constant because the loop exits in the middle, consider replacing the <ph id=\"ph2\">`while`</ph> loop with a <ph id=\"ph3\">`for`</ph> loop.","pos":[962,1116],"source":" If the controlling expression of a `while` loop is a constant because the loop exits in the middle, consider replacing the `while` loop with a `for` loop."},{"content":"You can omit the initialization, termination test and loop increment of a <ph id=\"ph1\">`for`</ph> loop, which causes the loop to be infinite, just like <ph id=\"ph2\">`while(1)`</ph>, and you can exit the loop from the body of the <ph id=\"ph3\">`for`</ph> statement.","pos":[1117,1326],"source":" You can omit the initialization, termination test and loop increment of a `for` loop, which causes the loop to be infinite, just like `while(1)`, and you can exit the loop from the body of the `for` statement."},{"content":"The following sample shows two ways C4127 is generated, and shows how to use a for loop to avoid the warning:","pos":[1333,1442]}],"content":"---\ntitle: \"Compiler Warning (level 4) C4127 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"C4127\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C4127\"\nms.assetid: f59ded9e-5227-45bd-ac43-2aa861581363\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Compiler Warning (level 4) C4127\nconditional expression is constant  \n  \n The controlling expression of an `if` statement or `while` loop evaluates to a constant. Because of their common idiomatic usage, trivial constants such as 1 or `true` do not trigger the warning, unless they are the result of an operation in an expression. If the controlling expression of a `while` loop is a constant because the loop exits in the middle, consider replacing the `while` loop with a `for` loop. You can omit the initialization, termination test and loop increment of a `for` loop, which causes the loop to be infinite, just like `while(1)`, and you can exit the loop from the body of the `for` statement.  \n  \n The following sample shows two ways C4127 is generated, and shows how to use a for loop to avoid the warning:  \n  \n```  \n// C4127.cpp  \n// compile with: /W4  \n#include <stdio.h>  \nint main() {  \n   if (1 == 1) {}   // C4127  \n   while (42) { break; }   // C4127  \n  \n   // OK  \n   for ( ; ; ) {  \n      printf(\"test\\n\");  \n      break;  \n   }  \n}  \n```"}