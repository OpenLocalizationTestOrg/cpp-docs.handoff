<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fb8801871297835636d91ade0979f05cd49b92d6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\l-value-and-r-value-expressions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f4efb94d68b7d57c64ec4d6991154bf1eae9f003</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d5473b77ffa328b393a8099361b1ca3e8485d046</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>L-Value and R-Value Expressions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>L-Value and R-Value Expressions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Expressions that refer to memory locations are called "l-value" expressions.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>An l-value represents a storage region's "locator" value, or a "left" value, implying that it can appear on the left of the equal sign (<bpt id="p1">**</bpt><ph id="ph1">=</ph><ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>L-values are often identifiers.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Expressions referring to modifiable locations are called "modifiable l-values."</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A modifiable l-value cannot have an array type, an incomplete type, or a type with the <bpt id="p1">**</bpt>const<ept id="p1">**</ept> attribute.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For structures and unions to be modifiable l-values, they must not have any members with the <bpt id="p1">**</bpt>const<ept id="p1">**</ept> attribute.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The name of the identifier denotes a storage location, while the value of the variable is the value stored at that location.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An identifier is a modifiable l-value if it refers to a memory location and if its type is arithmetic, structure, union, or pointer.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, if <ph id="ph1">`ptr`</ph> is a pointer to a storage region, then <ph id="ph2">`*ptr`</ph> is a modifiable l-value that designates the storage region to which <ph id="ph3">`ptr`</ph> points.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Any of the following C expressions can be l-value expressions:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>An identifier of integral, floating, pointer, structure, or union type</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A subscript (<bpt id="p1">**</bpt>[ ]<ept id="p1">**</ept>) expression that does not evaluate to an array</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A member-selection expression (<bpt id="p1">**</bpt>â€“&gt;<ept id="p1">**</ept> or <bpt id="p2">**</bpt>.<ept id="p2">**</ept>)</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A unary-indirection (<bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept>) expression that does not refer to an array</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>An l-value expression in parentheses</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>const<ept id="p1">**</ept> object (a nonmodifiable l-value)</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The term "r-value" is sometimes used to describe the value of an expression and to distinguish it from an l-value.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>All l-values are r-values but not all r-values are l-values.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Microsoft C includes an extension to the ANSI C standard that allows casts of l-values to be used as l-values, as long as the size of the object is not lengthened through the cast.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>(See <bpt id="p1">[</bpt>Type-Cast Conversions<ept id="p1">](../c-language/type-cast-conversions.md)</ept> for more information.) The following example illustrates this feature:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The default for Microsoft C is that the Microsoft extensions are enabled.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Use the /Za compiler option to disable these extensions.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Operands and Expressions</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>