{"nodes":[{"pos":[12,59],"content":"CComMultiThreadModelNoCS Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CComMultiThreadModelNoCS Class | Microsoft Docs","pos":[0,47]}]},{"content":"CComMultiThreadModelNoCS Class","pos":[765,795]},{"pos":[823,971],"content":"provides thread-safe methods for incrementing and decrementing the value of a variable, without critical section locking or unlocking functionality."},{"content":"Syntax","pos":[980,986]},{"content":"Members","pos":[1039,1046]},{"content":"Public Typedefs","pos":[1056,1071]},{"content":"Name","pos":[1078,1082]},{"content":"Description","pos":[1083,1094]},{"content":"CComMultiThreadModelNoCS::AutoCriticalSection","pos":[1133,1178]},{"pos":[1228,1325],"content":"References class <bpt id=\"p1\">[</bpt>CComFakeCriticalSection<ept id=\"p1\">](../../atl/reference/ccomfakecriticalsection-class.md)</ept>.","source":"References class [CComFakeCriticalSection](../../atl/reference/ccomfakecriticalsection-class.md)."},{"content":"CComMultiThreadModelNoCS::CriticalSection","pos":[1331,1372]},{"pos":[1418,1461],"content":"References class <ph id=\"ph1\">`CComFakeCriticalSection`</ph>.","source":"References class `CComFakeCriticalSection`."},{"content":"CComMultiThreadModelNoCS::ThreadModelNoCS","pos":[1467,1508]},{"pos":[1554,1598],"content":"References class <ph id=\"ph1\">`CComMultiThreadModelNoCS`</ph>.","source":"References class `CComMultiThreadModelNoCS`."},{"content":"Public Methods","pos":[1609,1623]},{"content":"Name","pos":[1630,1634]},{"content":"Description","pos":[1635,1646]},{"content":"CComMultiThreadModelNoCS::Decrement","pos":[1685,1720]},{"content":"(Static) Decrements the value of the specified variable in a thread-safe manner.","pos":[1760,1840]},{"content":"CComMultiThreadModelNoCS::Increment","pos":[1846,1881]},{"content":"(Static) Increments the value of the specified variable in a thread-safe manner.","pos":[1921,2001]},{"content":"Remarks","pos":[2011,2018]},{"content":"is similar to <bpt id=\"p1\">[</bpt>CComMultiThreadModel<ept id=\"p1\">](../../atl/reference/ccommultithreadmodel-class.md)</ept> in that it provides thread-safe methods for incrementing and decrementing a variable.","pos":[2049,2222],"source":" is similar to [CComMultiThreadModel](../../atl/reference/ccommultithreadmodel-class.md) in that it provides thread-safe methods for incrementing and decrementing a variable."},{"content":"However, when you reference a critical section class through <ph id=\"ph1\">`CComMultiThreadModelNoCS`</ph>, methods such as <ph id=\"ph2\">`Lock`</ph> and <ph id=\"ph3\">`Unlock`</ph> will do nothing.","pos":[2223,2364],"source":" However, when you reference a critical section class through `CComMultiThreadModelNoCS`, methods such as `Lock` and `Unlock` will do nothing."},{"content":"Typically, you use <ph id=\"ph1\">`CComMultiThreadModelNoCS`</ph> through the <ph id=\"ph2\">`ThreadModelNoCS``typedef`</ph> name.","pos":[2371,2461],"source":"Typically, you use `CComMultiThreadModelNoCS` through the `ThreadModelNoCS``typedef` name."},{"content":"This <ph id=\"ph1\">`typedef`</ph> is defined in <ph id=\"ph2\">`CComMultiThreadModelNoCS`</ph>, <ph id=\"ph3\">`CComMultiThreadModel`</ph>, and <bpt id=\"p1\">[</bpt>CComSingleThreadModel<ept id=\"p1\">](../../atl/reference/ccomsinglethreadmodel-class.md)</ept>.","pos":[2462,2623],"source":" This `typedef` is defined in `CComMultiThreadModelNoCS`, `CComMultiThreadModel`, and [CComSingleThreadModel](../../atl/reference/ccomsinglethreadmodel-class.md)."},{"pos":[2631,2845],"content":"[!NOTE]\n The global `typedef` names [CComObjectThreadModel](atl-typedefs.md#ccomobjectthreadmodel) and [CComGlobalsThreadModel](atl-typedefs.md#ccomglobalsthreadmodel) do not reference `CComMultiThreadModelNoCS`.","leadings":["","> "],"nodes":[{"content":"The global <ph id=\"ph1\">`typedef`</ph> names <bpt id=\"p1\">[</bpt>CComObjectThreadModel<ept id=\"p1\">](atl-typedefs.md#ccomobjectthreadmodel)</ept> and <bpt id=\"p2\">[</bpt>CComGlobalsThreadModel<ept id=\"p2\">](atl-typedefs.md#ccomglobalsthreadmodel)</ept> do not reference <ph id=\"ph2\">`CComMultiThreadModelNoCS`</ph>.","pos":[9,212],"source":" The global `typedef` names [CComObjectThreadModel](atl-typedefs.md#ccomobjectthreadmodel) and [CComGlobalsThreadModel](atl-typedefs.md#ccomglobalsthreadmodel) do not reference `CComMultiThreadModelNoCS`."}]},{"content":"In addition to <ph id=\"ph1\">`ThreadModelNoCS`</ph>, <ph id=\"ph2\">`CComMultiThreadModelNoCS`</ph> defines <ph id=\"ph3\">`AutoCriticalSection`</ph> and <ph id=\"ph4\">`CriticalSection`</ph>.","pos":[2852,2965],"source":"In addition to `ThreadModelNoCS`, `CComMultiThreadModelNoCS` defines `AutoCriticalSection` and `CriticalSection`."},{"content":"These latter two <ph id=\"ph1\">`typedef`</ph> names reference <bpt id=\"p1\">[</bpt>CComFakeCriticalSection<ept id=\"p1\">](../../atl/reference/ccomfakecriticalsection-class.md)</ept>, which provides empty methods associated with obtaining and releasing a critical section.","pos":[2966,3178],"source":" These latter two `typedef` names reference [CComFakeCriticalSection](../../atl/reference/ccomfakecriticalsection-class.md), which provides empty methods associated with obtaining and releasing a critical section."},{"content":"Requirements","pos":[3187,3199]},{"pos":[3203,3224],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlbase.h","source":"**Header:** atlbase.h"},{"pos":[3296,3341],"content":"CComMultiThreadModelNoCS::AutoCriticalSection"},{"pos":[3345,3522],"content":"When using <ph id=\"ph1\">`CComMultiThreadModelNoCS`</ph>, the <ph id=\"ph2\">`typedef`</ph> name <ph id=\"ph3\">`AutoCriticalSection`</ph> references class <bpt id=\"p1\">[</bpt>CComFakeCriticalSection<ept id=\"p1\">](../../atl/reference/ccomfakecriticalsection-class.md)</ept>.","source":"When using `CComMultiThreadModelNoCS`, the `typedef` name `AutoCriticalSection` references class [CComFakeCriticalSection](../../atl/reference/ccomfakecriticalsection-class.md)."},{"content":"Remarks","pos":[3598,3605]},{"pos":[3609,3703],"content":"Because <ph id=\"ph1\">`CComFakeCriticalSection`</ph> does not provide a critical section, its methods do nothing.","source":"Because `CComFakeCriticalSection` does not provide a critical section, its methods do nothing."},{"content":"<bpt id=\"p1\">[</bpt>CComMultiThreadModel<ept id=\"p1\">](../../atl/reference/ccommultithreadmodel-class.md)</ept> and <bpt id=\"p2\">[</bpt>CComSingleThreadModel<ept id=\"p2\">](../../atl/reference/ccomsinglethreadmodel-class.md)</ept> also contain definitions for <ph id=\"ph1\">`AutoCriticalSection`</ph>.","pos":[3710,3915],"source":"[CComMultiThreadModel](../../atl/reference/ccommultithreadmodel-class.md) and [CComSingleThreadModel](../../atl/reference/ccomsinglethreadmodel-class.md) also contain definitions for `AutoCriticalSection`."},{"content":"The following table shows the relationship between the threading model class and the critical section class referenced by <ph id=\"ph1\">`AutoCriticalSection`</ph>:","pos":[3916,4060],"source":" The following table shows the relationship between the threading model class and the critical section class referenced by `AutoCriticalSection`:"},{"content":"Class defined in","pos":[4067,4083]},{"content":"Class referenced","pos":[4084,4100]},{"content":"In addition to <ph id=\"ph1\">`AutoCriticalSection`</ph>, you can use the <ph id=\"ph2\">`typedef`</ph> name <bpt id=\"p1\">[</bpt>CriticalSection<ept id=\"p1\">](#ccommultithreadmodelnocs__criticalsection)</ept>.","pos":[4322,4453],"source":"In addition to `AutoCriticalSection`, you can use the `typedef` name [CriticalSection](#ccommultithreadmodelnocs__criticalsection)."},{"content":"You should not specify <ph id=\"ph1\">`AutoCriticalSection`</ph> in global objects or static class members if you want to eliminate the CRT startup code.","pos":[4454,4587],"source":" You should not specify `AutoCriticalSection` in global objects or static class members if you want to eliminate the CRT startup code."},{"content":"Example","pos":[4597,4604]},{"pos":[4608,4749],"content":"See <bpt id=\"p1\">[</bpt>CComMultiThreadModel::AutoCriticalSection<ept id=\"p1\">](../../atl/reference/ccommultithreadmodel-class.md#ccommultithreadmodel__autocriticalsection)</ept>.","source":"See [CComMultiThreadModel::AutoCriticalSection](../../atl/reference/ccommultithreadmodel-class.md#ccommultithreadmodel__autocriticalsection)."},{"pos":[4817,4858],"content":"CComMultiThreadModelNoCS::CriticalSection"},{"pos":[4862,5035],"content":"When using <ph id=\"ph1\">`CComMultiThreadModelNoCS`</ph>, the <ph id=\"ph2\">`typedef`</ph> name <ph id=\"ph3\">`CriticalSection`</ph> references class <bpt id=\"p1\">[</bpt>CComFakeCriticalSection<ept id=\"p1\">](../../atl/reference/ccomfakecriticalsection-class.md)</ept>.","source":"When using `CComMultiThreadModelNoCS`, the `typedef` name `CriticalSection` references class [CComFakeCriticalSection](../../atl/reference/ccomfakecriticalsection-class.md)."},{"content":"Remarks","pos":[5107,5114]},{"pos":[5118,5212],"content":"Because <ph id=\"ph1\">`CComFakeCriticalSection`</ph> does not provide a critical section, its methods do nothing.","source":"Because `CComFakeCriticalSection` does not provide a critical section, its methods do nothing."},{"content":"<bpt id=\"p1\">[</bpt>CComMultiThreadModel<ept id=\"p1\">](../../atl/reference/ccommultithreadmodel-class.md)</ept> and <bpt id=\"p2\">[</bpt>CComSingleThreadModel<ept id=\"p2\">](../../atl/reference/ccomsinglethreadmodel-class.md)</ept> also contain definitions for <ph id=\"ph1\">`CriticalSection`</ph>.","pos":[5219,5420],"source":"[CComMultiThreadModel](../../atl/reference/ccommultithreadmodel-class.md) and [CComSingleThreadModel](../../atl/reference/ccomsinglethreadmodel-class.md) also contain definitions for `CriticalSection`."},{"content":"The following table shows the relationship between the threading model class and the critical section class referenced by <ph id=\"ph1\">`CriticalSection`</ph>:","pos":[5421,5561],"source":" The following table shows the relationship between the threading model class and the critical section class referenced by `CriticalSection`:"},{"content":"Class defined in","pos":[5568,5584]},{"content":"Class referenced","pos":[5585,5601]},{"content":"In addition to <ph id=\"ph1\">`CriticalSection`</ph>, you can use the <ph id=\"ph2\">`typedef`</ph> name <ph id=\"ph3\">`AutoCriticalSection`</ph>.","pos":[5819,5906],"source":"In addition to `CriticalSection`, you can use the `typedef` name `AutoCriticalSection`."},{"content":"You should not specify <ph id=\"ph1\">`AutoCriticalSection`</ph> in global objects or static class members if you want to eliminate the CRT startup code.","pos":[5907,6040],"source":" You should not specify `AutoCriticalSection` in global objects or static class members if you want to eliminate the CRT startup code."},{"content":"Example","pos":[6050,6057]},{"pos":[6061,6202],"content":"See <bpt id=\"p1\">[</bpt>CComMultiThreadModel::AutoCriticalSection<ept id=\"p1\">](../../atl/reference/ccommultithreadmodel-class.md#ccommultithreadmodel__autocriticalsection)</ept>.","source":"See [CComMultiThreadModel::AutoCriticalSection](../../atl/reference/ccommultithreadmodel-class.md#ccommultithreadmodel__autocriticalsection)."},{"pos":[6264,6299],"content":"CComMultiThreadModelNoCS::Decrement"},{"pos":[6303,6494],"content":"This static function calls the Win32 function <bpt id=\"p1\">[</bpt>InterlockedDecrement<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms683580)</ept>, which decrements the value of the variable pointed to by <ph id=\"ph1\">`p`</ph>.","source":"This static function calls the Win32 function [InterlockedDecrement](http://msdn.microsoft.com/library/windows/desktop/ms683580), which decrements the value of the variable pointed to by `p`."},{"content":"Parameters","pos":[6568,6578]},{"content":"[in] Pointer to the variable to be decremented.","pos":[6589,6636]},{"content":"Return Value","pos":[6646,6658]},{"content":"If the result of the decrement is 0, then <ph id=\"ph1\">`Decrement`</ph> returns 0.","pos":[6662,6726],"source":"If the result of the decrement is 0, then `Decrement` returns 0."},{"content":"If the result of the decrement is nonzero, the return value is also nonzero but may not equal the result of the decrement.","pos":[6727,6849]},{"content":"Remarks","pos":[6859,6866]},{"pos":[6870,6965],"content":"<bpt id=\"p1\">**</bpt>InterlockedDecrement<ept id=\"p1\">**</ept> prevents more than one thread from simultaneously using this variable.","source":"**InterlockedDecrement** prevents more than one thread from simultaneously using this variable."},{"pos":[7027,7062],"content":"CComMultiThreadModelNoCS::Increment"},{"pos":[7066,7257],"content":"This static function calls the Win32 function <bpt id=\"p1\">[</bpt>InterlockedIncrement<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms683614)</ept>, which increments the value of the variable pointed to by <ph id=\"ph1\">`p`</ph>.","source":"This static function calls the Win32 function [InterlockedIncrement](http://msdn.microsoft.com/library/windows/desktop/ms683614), which increments the value of the variable pointed to by `p`."},{"content":"Parameters","pos":[7331,7341]},{"content":"[in] Pointer to the variable to be incremented.","pos":[7352,7399]},{"content":"Return Value","pos":[7409,7421]},{"content":"If the result of the increment is 0, then <bpt id=\"p1\">**</bpt>Increment<ept id=\"p1\">**</ept> returns 0.","pos":[7425,7491],"source":"If the result of the increment is 0, then **Increment** returns 0."},{"content":"If the result of the increment is nonzero, the return value is also nonzero but may not equal the result of the increment.","pos":[7492,7614]},{"content":"Remarks","pos":[7624,7631]},{"pos":[7635,7730],"content":"<bpt id=\"p1\">**</bpt>InterlockedIncrement<ept id=\"p1\">**</ept> prevents more than one thread from simultaneously using this variable.","source":"**InterlockedIncrement** prevents more than one thread from simultaneously using this variable."},{"pos":[7798,7839],"content":"CComMultiThreadModelNoCS::ThreadModelNoCS"},{"pos":[7843,7964],"content":"When using <ph id=\"ph1\">`CComMultiThreadModelNoCS`</ph>, the <ph id=\"ph2\">`typedef`</ph> name <ph id=\"ph3\">`ThreadModelNoCS`</ph> simply references <ph id=\"ph4\">`CComMultiThreadModelNoCS`</ph>.","source":"When using `CComMultiThreadModelNoCS`, the `typedef` name `ThreadModelNoCS` simply references `CComMultiThreadModelNoCS`."},{"content":"Remarks","pos":[8037,8044]},{"content":"<bpt id=\"p1\">[</bpt>CComMultiThreadModel<ept id=\"p1\">](../../atl/reference/ccommultithreadmodel-class.md)</ept> and <bpt id=\"p2\">[</bpt>CComSingleThreadModel<ept id=\"p2\">](../../atl/reference/ccomsinglethreadmodel-class.md)</ept> also contain definitions for <ph id=\"ph1\">`ThreadModelNoCS`</ph>.","pos":[8048,8249],"source":"[CComMultiThreadModel](../../atl/reference/ccommultithreadmodel-class.md) and [CComSingleThreadModel](../../atl/reference/ccomsinglethreadmodel-class.md) also contain definitions for `ThreadModelNoCS`."},{"content":"The following table shows the relationship between the threading model class and the class referenced by <ph id=\"ph1\">`ThreadModelNoCS`</ph>:","pos":[8250,8373],"source":" The following table shows the relationship between the threading model class and the class referenced by `ThreadModelNoCS`:"},{"content":"Class defined in","pos":[8380,8396]},{"content":"Class referenced","pos":[8397,8413]},{"content":"Note that the definition of <ph id=\"ph1\">`ThreadModelNoCS`</ph> in <ph id=\"ph2\">`CComMultiThreadModelNoCS`</ph> provides symmetry with <ph id=\"ph3\">`CComMultiThreadModel`</ph> and <ph id=\"ph4\">`CComSingleThreadModel`</ph>.","pos":[8635,8785],"source":"Note that the definition of `ThreadModelNoCS` in `CComMultiThreadModelNoCS` provides symmetry with `CComMultiThreadModel` and `CComSingleThreadModel`."},{"content":"For example, suppose the sample code in <ph id=\"ph1\">`CComMultiThreadModel::AutoCriticalSection`</ph> declared the following <ph id=\"ph2\">`typedef`</ph>:","pos":[8786,8903],"source":" For example, suppose the sample code in `CComMultiThreadModel::AutoCriticalSection` declared the following `typedef`:"},{"pos":[8921,8935],"content":"NVC_ATL_COM#37"},{"pos":[9006,9132],"content":"Regardless of the class specified for <ph id=\"ph1\">`ThreadModel`</ph> (such as <ph id=\"ph2\">`CComMultiThreadModelNoCS`</ph>), <ph id=\"ph3\">`_ThreadModel`</ph> resolves accordingly.","source":"Regardless of the class specified for `ThreadModel` (such as `CComMultiThreadModelNoCS`), `_ThreadModel` resolves accordingly."},{"content":"Example","pos":[9142,9149]},{"pos":[9153,9294],"content":"See <bpt id=\"p1\">[</bpt>CComMultiThreadModel::AutoCriticalSection<ept id=\"p1\">](../../atl/reference/ccommultithreadmodel-class.md#ccommultithreadmodel__autocriticalsection)</ept>.","source":"See [CComMultiThreadModel::AutoCriticalSection](../../atl/reference/ccommultithreadmodel-class.md#ccommultithreadmodel__autocriticalsection)."},{"content":"See Also","pos":[9303,9311]},{"content":"Class Overview","pos":[9316,9330]}],"content":"---\ntitle: \"CComMultiThreadModelNoCS Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL::CComMultiThreadModelNoCS\"\n  - \"CComMultiThreadModelNoCS\"\n  - \"ATL.CComMultiThreadModelNoCS\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ATL, multithreading\"\n  - \"CComMultiThreadModelNoCS class\"\n  - \"threading [ATL]\"\nms.assetid: 2b3f7a45-fd72-452c-aaf3-ccdaa621c821\ncaps.latest.revision: 18\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CComMultiThreadModelNoCS Class\n`CComMultiThreadModelNoCS` provides thread-safe methods for incrementing and decrementing the value of a variable, without critical section locking or unlocking functionality.  \n  \n## Syntax  \n  \n```\nclass CComMultiThreadModelNoCS\n```  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComMultiThreadModelNoCS::AutoCriticalSection](#ccommultithreadmodelnocs__autocriticalsection)|References class [CComFakeCriticalSection](../../atl/reference/ccomfakecriticalsection-class.md).|  \n|[CComMultiThreadModelNoCS::CriticalSection](#ccommultithreadmodelnocs__criticalsection)|References class `CComFakeCriticalSection`.|  \n|[CComMultiThreadModelNoCS::ThreadModelNoCS](#ccommultithreadmodelnocs__threadmodelnocs)|References class `CComMultiThreadModelNoCS`.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComMultiThreadModelNoCS::Decrement](#ccommultithreadmodelnocs__decrement)|(Static) Decrements the value of the specified variable in a thread-safe manner.|  \n|[CComMultiThreadModelNoCS::Increment](#ccommultithreadmodelnocs__increment)|(Static) Increments the value of the specified variable in a thread-safe manner.|  \n  \n## Remarks  \n `CComMultiThreadModelNoCS` is similar to [CComMultiThreadModel](../../atl/reference/ccommultithreadmodel-class.md) in that it provides thread-safe methods for incrementing and decrementing a variable. However, when you reference a critical section class through `CComMultiThreadModelNoCS`, methods such as `Lock` and `Unlock` will do nothing.  \n  \n Typically, you use `CComMultiThreadModelNoCS` through the `ThreadModelNoCS``typedef` name. This `typedef` is defined in `CComMultiThreadModelNoCS`, `CComMultiThreadModel`, and [CComSingleThreadModel](../../atl/reference/ccomsinglethreadmodel-class.md).  \n  \n> [!NOTE]\n>  The global `typedef` names [CComObjectThreadModel](atl-typedefs.md#ccomobjectthreadmodel) and [CComGlobalsThreadModel](atl-typedefs.md#ccomglobalsthreadmodel) do not reference `CComMultiThreadModelNoCS`.  \n  \n In addition to `ThreadModelNoCS`, `CComMultiThreadModelNoCS` defines `AutoCriticalSection` and `CriticalSection`. These latter two `typedef` names reference [CComFakeCriticalSection](../../atl/reference/ccomfakecriticalsection-class.md), which provides empty methods associated with obtaining and releasing a critical section.  \n  \n## Requirements  \n **Header:** atlbase.h  \n  \n##  <a name=\"ccommultithreadmodelnocs__autocriticalsection\"></a>  CComMultiThreadModelNoCS::AutoCriticalSection  \n When using `CComMultiThreadModelNoCS`, the `typedef` name `AutoCriticalSection` references class [CComFakeCriticalSection](../../atl/reference/ccomfakecriticalsection-class.md).  \n  \n```\ntypedef CComFakeCriticalSection AutoCriticalSection;\n```  \n  \n### Remarks  \n Because `CComFakeCriticalSection` does not provide a critical section, its methods do nothing.  \n  \n [CComMultiThreadModel](../../atl/reference/ccommultithreadmodel-class.md) and [CComSingleThreadModel](../../atl/reference/ccomsinglethreadmodel-class.md) also contain definitions for `AutoCriticalSection`. The following table shows the relationship between the threading model class and the critical section class referenced by `AutoCriticalSection`:  \n  \n|Class defined in|Class referenced|  \n|----------------------|----------------------|  \n|`CComMultiThreadModelNoCS`|`CComFakeCriticalSection`|  \n|`CComMultiThreadModel`|`CComAutoCriticalSection`|  \n|`CComSingleThreadModel`|`CComFakeCriticalSection`|  \n  \n In addition to `AutoCriticalSection`, you can use the `typedef` name [CriticalSection](#ccommultithreadmodelnocs__criticalsection). You should not specify `AutoCriticalSection` in global objects or static class members if you want to eliminate the CRT startup code.  \n  \n### Example  \n See [CComMultiThreadModel::AutoCriticalSection](../../atl/reference/ccommultithreadmodel-class.md#ccommultithreadmodel__autocriticalsection).  \n  \n##  <a name=\"ccommultithreadmodelnocs__criticalsection\"></a>  CComMultiThreadModelNoCS::CriticalSection  \n When using `CComMultiThreadModelNoCS`, the `typedef` name `CriticalSection` references class [CComFakeCriticalSection](../../atl/reference/ccomfakecriticalsection-class.md).  \n  \n```\ntypedef CComFakeCriticalSection CriticalSection;\n```  \n  \n### Remarks  \n Because `CComFakeCriticalSection` does not provide a critical section, its methods do nothing.  \n  \n [CComMultiThreadModel](../../atl/reference/ccommultithreadmodel-class.md) and [CComSingleThreadModel](../../atl/reference/ccomsinglethreadmodel-class.md) also contain definitions for `CriticalSection`. The following table shows the relationship between the threading model class and the critical section class referenced by `CriticalSection`:  \n  \n|Class defined in|Class referenced|  \n|----------------------|----------------------|  \n|`CComMultiThreadModelNoCS`|`CComFakeCriticalSection`|  \n|`CComMultiThreadModel`|`CComCriticalSection`|  \n|`CComSingleThreadModel`|`CComFakeCriticalSection`|  \n  \n In addition to `CriticalSection`, you can use the `typedef` name `AutoCriticalSection`. You should not specify `AutoCriticalSection` in global objects or static class members if you want to eliminate the CRT startup code.  \n  \n### Example  \n See [CComMultiThreadModel::AutoCriticalSection](../../atl/reference/ccommultithreadmodel-class.md#ccommultithreadmodel__autocriticalsection).  \n  \n##  <a name=\"ccommultithreadmodelnocs__decrement\"></a>  CComMultiThreadModelNoCS::Decrement  \n This static function calls the Win32 function [InterlockedDecrement](http://msdn.microsoft.com/library/windows/desktop/ms683580), which decrements the value of the variable pointed to by `p`.  \n  \n```\nstatic ULONG WINAPI Decrement(LPLONG   p) throw();\n```  \n  \n### Parameters  \n `p`  \n [in] Pointer to the variable to be decremented.  \n  \n### Return Value  \n If the result of the decrement is 0, then `Decrement` returns 0. If the result of the decrement is nonzero, the return value is also nonzero but may not equal the result of the decrement.  \n  \n### Remarks  \n **InterlockedDecrement** prevents more than one thread from simultaneously using this variable.  \n  \n##  <a name=\"ccommultithreadmodelnocs__increment\"></a>  CComMultiThreadModelNoCS::Increment  \n This static function calls the Win32 function [InterlockedIncrement](http://msdn.microsoft.com/library/windows/desktop/ms683614), which increments the value of the variable pointed to by `p`.  \n  \n```\nstatic ULONG WINAPI Increment(LPLONG   p) throw();\n```  \n  \n### Parameters  \n `p`  \n [in] Pointer to the variable to be incremented.  \n  \n### Return Value  \n If the result of the increment is 0, then **Increment** returns 0. If the result of the increment is nonzero, the return value is also nonzero but may not equal the result of the increment.  \n  \n### Remarks  \n **InterlockedIncrement** prevents more than one thread from simultaneously using this variable.  \n  \n##  <a name=\"ccommultithreadmodelnocs__threadmodelnocs\"></a>  CComMultiThreadModelNoCS::ThreadModelNoCS  \n When using `CComMultiThreadModelNoCS`, the `typedef` name `ThreadModelNoCS` simply references `CComMultiThreadModelNoCS`.  \n  \n```\ntypedef CComMultiThreadModelNoCS ThreadModelNoCS;\n```  \n  \n### Remarks  \n [CComMultiThreadModel](../../atl/reference/ccommultithreadmodel-class.md) and [CComSingleThreadModel](../../atl/reference/ccomsinglethreadmodel-class.md) also contain definitions for `ThreadModelNoCS`. The following table shows the relationship between the threading model class and the class referenced by `ThreadModelNoCS`:  \n  \n|Class defined in|Class referenced|  \n|----------------------|----------------------|  \n|`CComMultiThreadModelNoCS`|`CComMultiThreadModelNoCS`|  \n|`CComMultiThreadModel`|`CComMultiThreadModelNoCS`|  \n|`CComSingleThreadModel`|`CComSingleThreadModel`|  \n  \n Note that the definition of `ThreadModelNoCS` in `CComMultiThreadModelNoCS` provides symmetry with `CComMultiThreadModel` and `CComSingleThreadModel`. For example, suppose the sample code in `CComMultiThreadModel::AutoCriticalSection` declared the following `typedef`:  \n  \n [!code-cpp[NVC_ATL_COM#37](../../atl/codesnippet/cpp/ccommultithreadmodelnocs-class_1.h)]  \n  \n Regardless of the class specified for `ThreadModel` (such as `CComMultiThreadModelNoCS`), `_ThreadModel` resolves accordingly.  \n  \n### Example  \n See [CComMultiThreadModel::AutoCriticalSection](../../atl/reference/ccommultithreadmodel-class.md#ccommultithreadmodel__autocriticalsection).  \n  \n## See Also  \n [Class Overview](../../atl/atl-class-overview.md)"}