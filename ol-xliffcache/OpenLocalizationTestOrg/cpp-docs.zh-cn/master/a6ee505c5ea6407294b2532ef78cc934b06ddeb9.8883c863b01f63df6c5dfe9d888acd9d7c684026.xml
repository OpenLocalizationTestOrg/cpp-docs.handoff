{"nodes":[{"pos":[12,46],"content":"&lt;exception&gt; | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"exception<ph id=\"ph1\">&amp;gt;</ph> | Microsoft Docs","pos":[4,34],"source":"exception&gt; | Microsoft Docs"}]},{"content":"exception","pos":[653,662]},{"content":"Defines several types and functions related to the handling of exceptions.","pos":[667,741]},{"content":"Exception handling is used in situations in which the system can recover from an error.","pos":[742,829]},{"content":"It provides a means for control to be returned from a function to the program.","pos":[830,908]},{"content":"The objective of incorporating exception handling is to increase the program's robustness while providing a way to recover from an error in an orderly fashion.","pos":[909,1068]},{"content":"Syntax","pos":[1077,1083]},{"content":"Typedefs","pos":[1134,1142]},{"content":"exception_ptr","pos":[1164,1177]},{"content":"A type that describes a pointer to an exception.","pos":[1236,1284]},{"content":"terminate_handler","pos":[1290,1307]},{"pos":[1370,1458],"content":"A type that describes a pointer to a function suitable for use as a <ph id=\"ph1\">`terminate_handler`</ph>.","source":"A type that describes a pointer to a function suitable for use as a `terminate_handler`."},{"content":"unexpected_handler","pos":[1464,1482]},{"pos":[1546,1636],"content":"A type that describes a pointer to a function suitable for use as an <ph id=\"ph1\">`unexpected_handler`</ph>.","source":"A type that describes a pointer to a function suitable for use as an `unexpected_handler`."},{"content":"Functions","pos":[1647,1656]},{"content":"current_exception","pos":[1678,1695]},{"content":"Obtains a pointer to the current exception.","pos":[1759,1802]},{"content":"get_terminate","pos":[1808,1821]},{"pos":[1881,1930],"content":"Obtains the current <ph id=\"ph1\">`terminate_handler`</ph> function.","source":"Obtains the current `terminate_handler` function."},{"content":"get_unexpected","pos":[1936,1950]},{"pos":[2011,2061],"content":"Obtains the current <ph id=\"ph1\">`unexpected_handler`</ph> function.","source":"Obtains the current `unexpected_handler` function."},{"content":"make_exception_ptr","pos":[2067,2085]},{"pos":[2150,2218],"content":"Creates an <ph id=\"ph1\">`exception_ptr`</ph> object that holds a copy of an exception.","source":"Creates an `exception_ptr` object that holds a copy of an exception."},{"content":"rethrow_exception","pos":[2224,2241]},{"content":"Throws an exception passed as a parameter.","pos":[2305,2347]},{"content":"set_terminate","pos":[2353,2366]},{"pos":[2426,2511],"content":"Establishes a new <ph id=\"ph1\">`terminate_handler`</ph> to be called at the termination of the program.","source":"Establishes a new `terminate_handler` to be called at the termination of the program."},{"content":"set_unexpected","pos":[2517,2531]},{"pos":[2592,2681],"content":"Establishes a new <ph id=\"ph1\">`unexpected_handler`</ph> to be when an unexpected exception is encountered.","source":"Establishes a new `unexpected_handler` to be when an unexpected exception is encountered."},{"content":"terminate","pos":[2687,2696]},{"content":"Calls a terminate handler.","pos":[2752,2778]},{"content":"uncaught_exception","pos":[2784,2802]},{"pos":[2867,2940],"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> only if a thrown exception is being currently processed.","source":"Returns **true** only if a thrown exception is being currently processed."},{"content":"unexpected","pos":[2946,2956]},{"content":"Calls an unexpected handler.","pos":[3013,3041]},{"content":"Classes","pos":[3052,3059]},{"content":"bad_exception Class","pos":[3081,3100]},{"pos":[3146,3227],"content":"The class describes an exception that can be thrown from an <ph id=\"ph1\">`unexpected_handler`</ph>.","source":"The class describes an exception that can be thrown from an `unexpected_handler`."},{"content":"exception Class","pos":[3233,3248]},{"content":"The class serves as the base class for all exceptions thrown by certain expressions and by the Standard C++ Library.","pos":[3290,3406]},{"content":"See Also","pos":[3416,3424]},{"content":"Header Files Reference","pos":[3429,3451]},{"content":"Thread Safety in the C++ Standard Library","pos":[3516,3557]}],"content":"---\ntitle: \"&lt;exception&gt; | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"<exception>\"\n  - \"std::<exception>\"\n  - \"std.<exception>\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"exception header\"\nms.assetid: 28900768-5dd7-4834-b907-5e37ab3407db\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# &lt;exception&gt;\nDefines several types and functions related to the handling of exceptions. Exception handling is used in situations in which the system can recover from an error. It provides a means for control to be returned from a function to the program. The objective of incorporating exception handling is to increase the program's robustness while providing a way to recover from an error in an orderly fashion.  \n  \n## Syntax  \n  \n```  \n#include <exception>  \n  \n```  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|[exception_ptr](../standard-library/exception-typedefs.md#exception_ptr)|A type that describes a pointer to an exception.|  \n|[terminate_handler](../standard-library/exception-typedefs.md#terminate_handler)|A type that describes a pointer to a function suitable for use as a `terminate_handler`.|  \n|[unexpected_handler](../standard-library/exception-typedefs.md#unexpected_handler)|A type that describes a pointer to a function suitable for use as an `unexpected_handler`.|  \n  \n### Functions  \n  \n|||  \n|-|-|  \n|[current_exception](../standard-library/exception-functions.md#current_exception)|Obtains a pointer to the current exception.|  \n|[get_terminate](../standard-library/exception-functions.md#get_terminate)|Obtains the current `terminate_handler` function.|  \n|[get_unexpected](../standard-library/exception-functions.md#get_unexpected)|Obtains the current `unexpected_handler` function.|  \n|[make_exception_ptr](../standard-library/exception-functions.md#make_exception_ptr)|Creates an `exception_ptr` object that holds a copy of an exception.|  \n|[rethrow_exception](../standard-library/exception-functions.md#rethrow_exception)|Throws an exception passed as a parameter.|  \n|[set_terminate](../standard-library/exception-functions.md#set_terminate)|Establishes a new `terminate_handler` to be called at the termination of the program.|  \n|[set_unexpected](../standard-library/exception-functions.md#set_unexpected)|Establishes a new `unexpected_handler` to be when an unexpected exception is encountered.|  \n|[terminate](../standard-library/exception-functions.md#terminate)|Calls a terminate handler.|  \n|[uncaught_exception](../standard-library/exception-functions.md#uncaught_exception)|Returns **true** only if a thrown exception is being currently processed.|  \n|[unexpected](../standard-library/exception-functions.md#unexpected)|Calls an unexpected handler.|  \n  \n### Classes  \n  \n|||  \n|-|-|  \n|[bad_exception Class](../standard-library/bad-exception-class.md)|The class describes an exception that can be thrown from an `unexpected_handler`.|  \n|[exception Class](../standard-library/exception-class.md)|The class serves as the base class for all exceptions thrown by certain expressions and by the Standard C++ Library.|  \n  \n## See Also  \n [Header Files Reference](../standard-library/cpp-standard-library-header-files.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)\n\n"}