{"nodes":[{"pos":[12,37],"content":"schedule | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"schedule | Microsoft Docs","pos":[0,25]}]},{"content":"schedule","pos":[598,606]},{"pos":[607,688],"content":"Applies to the <bpt id=\"p1\">[</bpt>for<ept id=\"p1\">](../../../parallel/openmp/reference/for-openmp.md)</ept> directive.","source":"Applies to the [for](../../../parallel/openmp/reference/for-openmp.md) directive."},{"content":"Syntax","pos":[697,703]},{"content":"Parameters","pos":[753,763]},{"content":"The kind of scheduling:","pos":[777,800]},{"pos":[881,998],"content":"`size` (optional)  \nSpecifies the size of iterations. `size` must be an integer. Not valid when `type` is `runtime`.","leadings":[""," "],"nodes":[{"content":"(optional)","pos":[7,17]},{"content":"Specifies the size of iterations. `size` must be an integer. Not valid when `type` is `runtime`.","pos":[20,116],"nodes":[{"content":"Specifies the size of iterations.","pos":[0,33]},{"content":"must be an integer.","pos":[41,60]},{"content":"Not valid when <ph id=\"ph1\">`type`</ph> is <ph id=\"ph2\">`runtime`</ph>.","pos":[61,96],"source":" Not valid when `type` is `runtime`."}]}]},{"content":"Remarks","pos":[1007,1014]},{"pos":[1018,1115],"content":"For more information, see <bpt id=\"p1\">[</bpt>2.4.1 for Construct<ept id=\"p1\">](../../../parallel/openmp/2-4-1-for-construct.md)</ept>.","source":"For more information, see [2.4.1 for Construct](../../../parallel/openmp/2-4-1-for-construct.md)."},{"content":"Example","pos":[1124,1131]},{"content":"See Also","pos":[4882,4890]},{"content":"Clauses","pos":[4895,4902]}],"content":"---\ntitle: \"schedule | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"schedule\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"schedule OpenMP clause\"\nms.assetid: 286f1fc3-6598-4837-b4c8-8b1fa3193965\ncaps.latest.revision: 12\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# schedule\nApplies to the [for](../../../parallel/openmp/reference/for-openmp.md) directive.  \n  \n## Syntax  \n  \n```  \nschedule(type[,size])  \n```  \n  \n#### Parameters  \n `type`  \n The kind of scheduling:  \n  \n-   `dynamic`  \n  \n-   `guided`  \n  \n-   `runtime`  \n  \n-   `static`  \n  \n `size` (optional)  \n Specifies the size of iterations. `size` must be an integer. Not valid when `type` is `runtime`.  \n  \n## Remarks  \n For more information, see [2.4.1 for Construct](../../../parallel/openmp/2-4-1-for-construct.md).  \n  \n## Example  \n  \n```  \n// omp_schedule.cpp  \n// compile with: /openmp   \n#include <windows.h>  \n#include <stdio.h>  \n#include <omp.h>  \n  \n#define NUM_THREADS 4  \n#define STATIC_CHUNK 5  \n#define DYNAMIC_CHUNK 5  \n#define NUM_LOOPS 20  \n#define SLEEP_EVERY_N 3  \n  \nint main( )   \n{  \n    int nStatic1[NUM_LOOPS],   \n        nStaticN[NUM_LOOPS];  \n    int nDynamic1[NUM_LOOPS],   \n        nDynamicN[NUM_LOOPS];  \n    int nGuided[NUM_LOOPS];  \n  \n    omp_set_num_threads(NUM_THREADS);  \n  \n    #pragma omp parallel  \n    {  \n        #pragma omp for schedule(static, 1)  \n        for (int i = 0 ; i < NUM_LOOPS ; ++i)   \n        {  \n            if ((i % SLEEP_EVERY_N) == 0)   \n                Sleep(0);  \n            nStatic1[i] = omp_get_thread_num( );  \n        }  \n  \n        #pragma omp for schedule(static, STATIC_CHUNK)  \n        for (int i = 0 ; i < NUM_LOOPS ; ++i)   \n        {  \n            if ((i % SLEEP_EVERY_N) == 0)   \n                Sleep(0);  \n            nStaticN[i] = omp_get_thread_num( );  \n        }  \n  \n        #pragma omp for schedule(dynamic, 1)  \n        for (int i = 0 ; i < NUM_LOOPS ; ++i)   \n        {  \n            if ((i % SLEEP_EVERY_N) == 0)   \n                Sleep(0);  \n            nDynamic1[i] = omp_get_thread_num( );  \n        }  \n  \n        #pragma omp for schedule(dynamic, DYNAMIC_CHUNK)  \n        for (int i = 0 ; i < NUM_LOOPS ; ++i)   \n        {  \n            if ((i % SLEEP_EVERY_N) == 0)   \n                Sleep(0);  \n            nDynamicN[i] = omp_get_thread_num( );  \n        }  \n  \n        #pragma omp for schedule(guided)  \n        for (int i = 0 ; i < NUM_LOOPS ; ++i)   \n        {  \n            if ((i % SLEEP_EVERY_N) == 0)   \n                Sleep(0);  \n            nGuided[i] = omp_get_thread_num( );  \n        }  \n    }  \n  \n    printf_s(\"------------------------------------------------\\n\");  \n    printf_s(\"| static | static | dynamic | dynamic | guided |\\n\");  \n    printf_s(\"|    1   |    %d   |    1    |    %d    |        |\\n\",  \n             STATIC_CHUNK, DYNAMIC_CHUNK);  \n    printf_s(\"------------------------------------------------\\n\");  \n  \n    for (int i=0; i<NUM_LOOPS; ++i)   \n    {  \n        printf_s(\"|    %d   |    %d   |    %d    |    %d    |\"  \n                 \"    %d   |\\n\",  \n                 nStatic1[i], nStaticN[i],  \n                 nDynamic1[i], nDynamicN[i], nGuided[i]);  \n    }  \n  \n    printf_s(\"------------------------------------------------\\n\");  \n}  \n```  \n  \n```Output  \n------------------------------------------------  \n| static | static | dynamic | dynamic | guided |  \n|    1   |    5   |    1    |    5    |        |  \n------------------------------------------------  \n|    0   |    0   |    0    |    2    |    1   |  \n|    1   |    0   |    3    |    2    |    1   |  \n|    2   |    0   |    3    |    2    |    1   |  \n|    3   |    0   |    3    |    2    |    1   |  \n|    0   |    0   |    2    |    2    |    1   |  \n|    1   |    1   |    2    |    3    |    3   |  \n|    2   |    1   |    2    |    3    |    3   |  \n|    3   |    1   |    0    |    3    |    3   |  \n|    0   |    1   |    0    |    3    |    3   |  \n|    1   |    1   |    0    |    3    |    2   |  \n|    2   |    2   |    1    |    0    |    2   |  \n|    3   |    2   |    1    |    0    |    2   |  \n|    0   |    2   |    1    |    0    |    3   |  \n|    1   |    2   |    2    |    0    |    3   |  \n|    2   |    2   |    2    |    0    |    0   |  \n|    3   |    3   |    2    |    1    |    0   |  \n|    0   |    3   |    3    |    1    |    1   |  \n|    1   |    3   |    3    |    1    |    1   |  \n|    2   |    3   |    3    |    1    |    1   |  \n|    3   |    3   |    0    |    1    |    3   |  \n------------------------------------------------  \n  \n```  \n  \n## See Also  \n [Clauses](../../../parallel/openmp/reference/openmp-clauses.md)"}