{"nodes":[{"pos":[12,53],"content":"_strdup_dbg, _wcsdup_dbg | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_strdup_dbg, _wcsdup_dbg | Microsoft Docs","pos":[0,41]}]},{"content":"_strdup_dbg, _wcsdup_dbg","pos":[1154,1178]},{"pos":[1179,1311],"content":"Versions of <bpt id=\"p1\">[</bpt>_strdup and _wcsdup<ept id=\"p1\">](../../c-runtime-library/reference/strdup-wcsdup-mbsdup.md)</ept> that use the debug version of <ph id=\"ph1\">`malloc`</ph>.","source":"Versions of [_strdup and _wcsdup](../../c-runtime-library/reference/strdup-wcsdup-mbsdup.md) that use the debug version of `malloc`."},{"content":"Syntax","pos":[1320,1326]},{"content":"Parameters","pos":[1602,1612]},{"content":"Null-terminated source string.","pos":[1631,1661]},{"content":"Requested type of memory block: <ph id=\"ph1\">`_CLIENT_BLOCK`</ph> or <ph id=\"ph2\">`_NORMAL_BLOCK`</ph>.","pos":[1683,1750],"source":" Requested type of memory block: `_CLIENT_BLOCK` or `_NORMAL_BLOCK`."},{"content":"Pointer to name of source file that requested allocation operation or NULL.","pos":[1771,1846]},{"content":"Line number in source file where allocation operation was requested or NULL.","pos":[1869,1945]},{"content":"Return Value","pos":[1954,1966]},{"pos":[1970,2099],"content":"Each of these functions returns a pointer to the storage location for the copied string or <ph id=\"ph1\">`NULL`</ph> if storage cannot be allocated.","source":"Each of these functions returns a pointer to the storage location for the copied string or `NULL` if storage cannot be allocated."},{"content":"Remarks","pos":[2108,2115]},{"content":"The <ph id=\"ph1\">`_strdup_dbg`</ph> and <ph id=\"ph2\">`_wcsdup_dbg`</ph> functions are identical to <ph id=\"ph3\">`_strdup`</ph> and <ph id=\"ph4\">`_wcsdup`</ph> except that, when <ph id=\"ph5\">`_DEBUG`</ph> is defined, these functions use the debug version of <ph id=\"ph6\">`malloc`</ph>, <ph id=\"ph7\">`_malloc_dbg`</ph>, to allocate memory for the duplicated string.","pos":[2119,2356],"source":"The `_strdup_dbg` and `_wcsdup_dbg` functions are identical to `_strdup` and `_wcsdup` except that, when `_DEBUG` is defined, these functions use the debug version of `malloc`, `_malloc_dbg`, to allocate memory for the duplicated string."},{"content":"For information on the debugging features of <ph id=\"ph1\">`_malloc_dbg`</ph>, see <bpt id=\"p1\">[</bpt>_malloc_dbg<ept id=\"p1\">](../../c-runtime-library/reference/malloc-dbg.md)</ept>.","pos":[2357,2484],"source":" For information on the debugging features of `_malloc_dbg`, see [_malloc_dbg](../../c-runtime-library/reference/malloc-dbg.md)."},{"content":"You do not need to call these functions explicitly in most cases.","pos":[2491,2556]},{"content":"Instead, you can define the flag <ph id=\"ph1\">`_CRTDBG_MAP_ALLOC`</ph>.","pos":[2557,2610],"source":" Instead, you can define the flag `_CRTDBG_MAP_ALLOC`."},{"content":"When <ph id=\"ph1\">`_CRTDBG_MAP_ALLOC`</ph> is defined, calls to <ph id=\"ph2\">`_strdup`</ph> and <ph id=\"ph3\">`_wcsdup`</ph> are remapped to <ph id=\"ph4\">`_strdup_dbg`</ph> and <ph id=\"ph5\">`_wcsdup_dbg`</ph>, respectively, with the <ph id=\"ph6\">`blockType`</ph> set to <ph id=\"ph7\">`_NORMAL_BLOCK`</ph>.","pos":[2611,2788],"source":" When `_CRTDBG_MAP_ALLOC` is defined, calls to `_strdup` and `_wcsdup` are remapped to `_strdup_dbg` and `_wcsdup_dbg`, respectively, with the `blockType` set to `_NORMAL_BLOCK`."},{"content":"Thus, you do not need to call these functions explicitly unless you want to mark the heap blocks as <ph id=\"ph1\">`_CLIENT_BLOCK`</ph>.","pos":[2789,2905],"source":" Thus, you do not need to call these functions explicitly unless you want to mark the heap blocks as `_CLIENT_BLOCK`."},{"content":"For more information on block types, see <bpt id=\"p1\">[</bpt>Types of blocks on the debug heap<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","pos":[2906,3030],"source":" For more information on block types, see [Types of blocks on the debug heap](/visualstudio/debugger/crt-debug-heap-details)."},{"content":"Generic-Text Routine Mappings","pos":[3040,3069]},{"content":"TCHAR.H routine","pos":[3076,3091]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[3092,3120],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[3121,3134]},{"content":"_UNICODE defined","pos":[3135,3151]},{"content":"Requirements","pos":[3325,3337]},{"content":"Routine","pos":[3344,3351]},{"content":"Required header","pos":[3352,3367]},{"pos":[3425,3426],"content":","},{"content":"crtdbg.h&gt;","pos":[3443,3452],"source":"crtdbg.h>"},{"pos":[3460,3584],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Libraries","pos":[3593,3602]},{"pos":[3606,3704],"content":"All debug versions of the <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept>.","source":"All debug versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md)."},{"content":".NET Framework Equivalent","pos":[3713,3738]},{"content":"System::String::Clone","pos":[3743,3764]},{"content":"See Also","pos":[3841,3849]},{"content":"String Manipulation","pos":[3854,3873]},{"content":"_strdup, _wcsdup, _mbsdup","pos":[3932,3957]},{"content":"Debug Versions of Heap Allocation Functions","pos":[4023,4066]}],"content":"---\ntitle: \"_strdup_dbg, _wcsdup_dbg | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_strdup_dbg\"\n  - \"_wcsdup_dbg\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_wcsdup_dbg\"\n  - \"strdup_dbg\"\n  - \"_strdup_dbg\"\n  - \"wcsdup_dbg\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_wcsdup_dbg function\"\n  - \"stdup_dbg function\"\n  - \"copying strings\"\n  - \"duplicating strings\"\n  - \"strings [C++], copying\"\n  - \"strings [C++], duplicating\"\n  - \"_strdup_dbg function\"\n  - \"wcsdup_dbg function\"\nms.assetid: 681db70c-d124-43ab-b83e-5eeea9035097\ncaps.latest.revision: 11\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _strdup_dbg, _wcsdup_dbg\nVersions of [_strdup and _wcsdup](../../c-runtime-library/reference/strdup-wcsdup-mbsdup.md) that use the debug version of `malloc`.  \n  \n## Syntax  \n  \n```  \nchar *_strdup_dbg(  \n   const char *strSource,  \n   int blockType,  \n   const char *filename,  \n   int linenumber   \n);  \nwchar_t *_wcsdup_dbg(  \n   const wchar_t *strSource,  \n   int blockType,  \n   const char *filename,  \n   int linenumber   \n);  \n```  \n  \n#### Parameters  \n `strSource`  \n Null-terminated source string.  \n  \n `blockType`  \n Requested type of memory block: `_CLIENT_BLOCK` or `_NORMAL_BLOCK`.  \n  \n `filename`  \n Pointer to name of source file that requested allocation operation or NULL.  \n  \n `linenumber`  \n Line number in source file where allocation operation was requested or NULL.  \n  \n## Return Value  \n Each of these functions returns a pointer to the storage location for the copied string or `NULL` if storage cannot be allocated.  \n  \n## Remarks  \n The `_strdup_dbg` and `_wcsdup_dbg` functions are identical to `_strdup` and `_wcsdup` except that, when `_DEBUG` is defined, these functions use the debug version of `malloc`, `_malloc_dbg`, to allocate memory for the duplicated string. For information on the debugging features of `_malloc_dbg`, see [_malloc_dbg](../../c-runtime-library/reference/malloc-dbg.md).  \n  \n You do not need to call these functions explicitly in most cases. Instead, you can define the flag `_CRTDBG_MAP_ALLOC`. When `_CRTDBG_MAP_ALLOC` is defined, calls to `_strdup` and `_wcsdup` are remapped to `_strdup_dbg` and `_wcsdup_dbg`, respectively, with the `blockType` set to `_NORMAL_BLOCK`. Thus, you do not need to call these functions explicitly unless you want to mark the heap blocks as `_CLIENT_BLOCK`. For more information on block types, see [Types of blocks on the debug heap](/visualstudio/debugger/crt-debug-heap-details).  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_tcsdup_dbg`|`_strdup_dbg`|`_mbsdup`|`_wcsdup_dbg`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_strdup_dbg`, `_wcsdup_dbg`|\\<crtdbg.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Libraries  \n All debug versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md).  \n  \n## .NET Framework Equivalent  \n [System::String::Clone](https://msdn.microsoft.com/en-us/library/system.string.clone.aspx)  \n  \n## See Also  \n [String Manipulation](../../c-runtime-library/string-manipulation-crt.md)   \n [_strdup, _wcsdup, _mbsdup](../../c-runtime-library/reference/strdup-wcsdup-mbsdup.md)   \n [Debug Versions of Heap Allocation Functions](/visualstudio/debugger/debug-versions-of-heap-allocation-functions)"}