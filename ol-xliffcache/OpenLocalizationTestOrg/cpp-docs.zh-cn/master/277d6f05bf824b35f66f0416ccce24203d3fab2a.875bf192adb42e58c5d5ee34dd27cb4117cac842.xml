{"nodes":[{"pos":[12,56],"content":"Unicode Programming Summary | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Unicode Programming Summary | Microsoft Docs","pos":[0,44]}]},{"content":"Unicode Programming Summary","pos":[643,670]},{"content":"To take advantage of the MFC and C run-time support for Unicode, you need to:","pos":[671,748]},{"pos":[758,778],"content":"Define <bpt id=\"p1\">**</bpt>_UNICODE<ept id=\"p1\">**</ept>.","source":"Define **_UNICODE**."},{"pos":[789,850],"content":"Define the symbol <bpt id=\"p1\">**</bpt>_UNICODE<ept id=\"p1\">**</ept> before you build your program.","source":"Define the symbol **_UNICODE** before you build your program."},{"content":"Specify entry point.","pos":[860,880]},{"pos":[891,1071],"content":"On the <bpt id=\"p1\">**</bpt>Output<ept id=\"p1\">**</ept> page of the Linker folder in the project's <bpt id=\"p2\">[</bpt>Property Pages<ept id=\"p2\">](../ide/property-pages-visual-cpp.md)</ept> dialog box, set the Entry Point symbol to <bpt id=\"p3\">**</bpt>wWinMainCRTStartup<ept id=\"p3\">**</ept>.","source":"On the **Output** page of the Linker folder in the project's [Property Pages](../ide/property-pages-visual-cpp.md) dialog box, set the Entry Point symbol to **wWinMainCRTStartup**."},{"content":"Use portable run-time functions and types.","pos":[1081,1123]},{"content":"Use the proper C run-time functions for Unicode string handling.","pos":[1134,1198]},{"content":"You can use the <bpt id=\"p1\">**</bpt>wcs<ept id=\"p1\">**</ept> family of functions, but you might prefer the fully portable (internationally enabled) <bpt id=\"p2\">**</bpt>_TCHAR<ept id=\"p2\">**</ept> macros.","pos":[1199,1328],"source":" You can use the **wcs** family of functions, but you might prefer the fully portable (internationally enabled) **_TCHAR** macros."},{"content":"These macros are all prefixed with <bpt id=\"p1\">**</bpt>_tcs<ept id=\"p1\">**</ept>; they substitute, one for one, for the <bpt id=\"p2\">**</bpt>str<ept id=\"p2\">**</ept> family of functions.","pos":[1329,1440],"source":" These macros are all prefixed with **_tcs**; they substitute, one for one, for the **str** family of functions."},{"content":"These functions are described in detail in the <bpt id=\"p1\">[</bpt>Internationalization<ept id=\"p1\">](../c-runtime-library/internationalization.md)</ept> section of the <bpt id=\"p2\">*</bpt>Run-Time Library Reference<ept id=\"p2\">*</ept>.","pos":[1441,1601],"source":" These functions are described in detail in the [Internationalization](../c-runtime-library/internationalization.md) section of the *Run-Time Library Reference*."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Generic-Text Mappings in Tchar.h<ept id=\"p1\">](../text/generic-text-mappings-in-tchar-h.md)</ept>.","pos":[1602,1708],"source":" For more information, see [Generic-Text Mappings in Tchar.h](../text/generic-text-mappings-in-tchar-h.md)."},{"pos":[1719,1837],"content":"Use <bpt id=\"p1\">**</bpt>_TCHAR<ept id=\"p1\">**</ept> and the related portable data types described in <bpt id=\"p2\">[</bpt>Support for Unicode<ept id=\"p2\">](../text/support-for-unicode.md)</ept>.","source":"Use **_TCHAR** and the related portable data types described in [Support for Unicode](../text/support-for-unicode.md)."},{"content":"Handle literal strings properly.","pos":[1847,1879]},{"content":"The Visual C++ compiler interprets a literal string coded as:","pos":[1890,1951]},{"content":"to mean a string of Unicode characters.","pos":[2019,2058]},{"content":"You can use the same prefix for literal characters.","pos":[2059,2110]},{"content":"Use the <bpt id=\"p1\">**</bpt>_T<ept id=\"p1\">**</ept> macro to code literal strings generically, so they compile as Unicode strings under Unicode or as ANSI strings (including MBCS) without Unicode.","pos":[2111,2270],"source":" Use the **_T** macro to code literal strings generically, so they compile as Unicode strings under Unicode or as ANSI strings (including MBCS) without Unicode."},{"content":"For example, instead of:","pos":[2271,2295]},{"content":"use:","pos":[2367,2371]},{"pos":[2447,2596],"content":"With <bpt id=\"p1\">**</bpt>_UNICODE<ept id=\"p1\">**</ept> defined, <bpt id=\"p2\">**</bpt>_T<ept id=\"p2\">**</ept> translates the literal string to the L-prefixed form; otherwise, <bpt id=\"p3\">**</bpt>_T<ept id=\"p3\">**</ept> translates the string without the L prefix.","source":"With **_UNICODE** defined, **_T** translates the literal string to the L-prefixed form; otherwise, **_T** translates the string without the L prefix."},{"pos":[2608,2673],"content":"[!TIP]\n The **_T** macro is identical to the `_TEXT` macro.","leadings":["","    > "],"nodes":[{"content":"The <bpt id=\"p1\">**</bpt>_T<ept id=\"p1\">**</ept> macro is identical to the <ph id=\"ph1\">`_TEXT`</ph> macro.","pos":[8,59],"source":" The **_T** macro is identical to the `_TEXT` macro."}]},{"content":"Be careful passing string lengths to functions.","pos":[2683,2730]},{"content":"Some functions want the number of characters in a string; others want the number of bytes.","pos":[2741,2831]},{"content":"For example, if <bpt id=\"p1\">**</bpt>_UNICODE<ept id=\"p1\">**</ept> is defined, the following call to a <ph id=\"ph1\">`CArchive`</ph> object will not work (<ph id=\"ph2\">`str`</ph> is a <ph id=\"ph3\">`CString`</ph>):","pos":[2832,2952],"source":" For example, if **_UNICODE** is defined, the following call to a `CArchive` object will not work (`str` is a `CString`):"},{"content":"In a Unicode application, the length gives you the number of characters but not the correct number of bytes, because each character is 2 bytes wide.","pos":[3046,3194]},{"content":"Instead, you must use:","pos":[3195,3217]},{"content":"which specifies the correct number of bytes to write.","pos":[3328,3381]},{"content":"However, MFC member functions that are character-oriented, rather than byte-oriented, work without this extra coding:","pos":[3392,3509]},{"pos":[3603,3655],"content":"takes a number of characters, not a number of bytes."},{"pos":[3665,3764],"content":"Use <bpt id=\"p1\">[</bpt>fopen_s, _wfopen_s<ept id=\"p1\">](../c-runtime-library/reference/fopen-s-wfopen-s.md)</ept> to open Unicode files.","source":"Use [fopen_s, _wfopen_s](../c-runtime-library/reference/fopen-s-wfopen-s.md) to open Unicode files."},{"content":"To summarize, MFC and the run-time library provide the following support for Unicode programming under Windows 2000:","pos":[3771,3887]},{"content":"Except for database class member functions, all MFC functions are Unicode-enabled, including <ph id=\"ph1\">`CString`</ph>.","pos":[3897,4000],"source":"Except for database class member functions, all MFC functions are Unicode-enabled, including `CString`."},{"content":"also provides Unicode/ANSI conversion functions.","pos":[4011,4059]},{"content":"The run-time library supplies Unicode versions of all string-handling functions.","pos":[4069,4149]},{"content":"(The run-time library also supplies portable versions suitable for Unicode or for MBCS.","pos":[4150,4237]},{"content":"These are the <bpt id=\"p1\">**</bpt>_tcs<ept id=\"p1\">**</ept> macros.)","pos":[4238,4269],"source":" These are the **_tcs** macros.)"},{"content":"Tchar.h supplies portable data types and the <bpt id=\"p1\">**</bpt>_T<ept id=\"p1\">**</ept> macro for translating literal strings and characters.","pos":[4279,4384],"source":"Tchar.h supplies portable data types and the **_T** macro for translating literal strings and characters."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Generic-Text Mappings in Tchar.h<ept id=\"p1\">](../text/generic-text-mappings-in-tchar-h.md)</ept>.","pos":[4385,4491],"source":" For more information, see [Generic-Text Mappings in Tchar.h](../text/generic-text-mappings-in-tchar-h.md)."},{"content":"The run-time library provides a wide-character version of <bpt id=\"p1\">**</bpt>main<ept id=\"p1\">**</ept>.","pos":[4501,4568],"source":"The run-time library provides a wide-character version of **main**."},{"content":"Use <bpt id=\"p1\">**</bpt>wmain<ept id=\"p1\">**</ept> to make your application Unicode-aware.","pos":[4569,4622],"source":" Use **wmain** to make your application Unicode-aware."},{"content":"See Also","pos":[4631,4639]},{"content":"Support for Unicode","pos":[4644,4663]}],"content":"---\ntitle: \"Unicode Programming Summary | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"Unicode [C++], programming with\"\n  - \"Unicode [C++], MFC and C run-time functions\"\nms.assetid: a4c9770f-6c9c-447c-996b-980920288bed\ncaps.latest.revision: 8\nauthor: \"ghogen\"\nms.author: \"ghogen\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Unicode Programming Summary\nTo take advantage of the MFC and C run-time support for Unicode, you need to:  \n  \n-   Define **_UNICODE**.  \n  \n     Define the symbol **_UNICODE** before you build your program.  \n  \n-   Specify entry point.  \n  \n     On the **Output** page of the Linker folder in the project's [Property Pages](../ide/property-pages-visual-cpp.md) dialog box, set the Entry Point symbol to **wWinMainCRTStartup**.  \n  \n-   Use portable run-time functions and types.  \n  \n     Use the proper C run-time functions for Unicode string handling. You can use the **wcs** family of functions, but you might prefer the fully portable (internationally enabled) **_TCHAR** macros. These macros are all prefixed with **_tcs**; they substitute, one for one, for the **str** family of functions. These functions are described in detail in the [Internationalization](../c-runtime-library/internationalization.md) section of the *Run-Time Library Reference*. For more information, see [Generic-Text Mappings in Tchar.h](../text/generic-text-mappings-in-tchar-h.md).  \n  \n     Use **_TCHAR** and the related portable data types described in [Support for Unicode](../text/support-for-unicode.md).  \n  \n-   Handle literal strings properly.  \n  \n     The Visual C++ compiler interprets a literal string coded as:  \n  \n    ```  \n    L\"this is a literal string\"  \n    ```  \n  \n     to mean a string of Unicode characters. You can use the same prefix for literal characters. Use the **_T** macro to code literal strings generically, so they compile as Unicode strings under Unicode or as ANSI strings (including MBCS) without Unicode. For example, instead of:  \n  \n    ```  \n    pWnd->SetWindowText( \"Hello\" );  \n    ```  \n  \n     use:  \n  \n    ```  \n    pWnd->SetWindowText( _T(\"Hello\") );  \n    ```  \n  \n     With **_UNICODE** defined, **_T** translates the literal string to the L-prefixed form; otherwise, **_T** translates the string without the L prefix.  \n  \n    > [!TIP]\n    >  The **_T** macro is identical to the `_TEXT` macro.  \n  \n-   Be careful passing string lengths to functions.  \n  \n     Some functions want the number of characters in a string; others want the number of bytes. For example, if **_UNICODE** is defined, the following call to a `CArchive` object will not work (`str` is a `CString`):  \n  \n    ```  \n    archive.Write( str, str.GetLength( ) );    // invalid  \n    ```  \n  \n     In a Unicode application, the length gives you the number of characters but not the correct number of bytes, because each character is 2 bytes wide. Instead, you must use:  \n  \n    ```  \n    archive.Write( str, str.GetLength( ) * sizeof( _TCHAR ) );    // valid  \n    ```  \n  \n     which specifies the correct number of bytes to write.  \n  \n     However, MFC member functions that are character-oriented, rather than byte-oriented, work without this extra coding:  \n  \n    ```  \n    pDC->TextOut( str, str.GetLength( ) );  \n    ```  \n  \n     `CDC::TextOut` takes a number of characters, not a number of bytes.  \n  \n-   Use [fopen_s, _wfopen_s](../c-runtime-library/reference/fopen-s-wfopen-s.md) to open Unicode files.  \n  \n To summarize, MFC and the run-time library provide the following support for Unicode programming under Windows 2000:  \n  \n-   Except for database class member functions, all MFC functions are Unicode-enabled, including `CString`. `CString` also provides Unicode/ANSI conversion functions.  \n  \n-   The run-time library supplies Unicode versions of all string-handling functions. (The run-time library also supplies portable versions suitable for Unicode or for MBCS. These are the **_tcs** macros.)  \n  \n-   Tchar.h supplies portable data types and the **_T** macro for translating literal strings and characters. For more information, see [Generic-Text Mappings in Tchar.h](../text/generic-text-mappings-in-tchar-h.md).  \n  \n-   The run-time library provides a wide-character version of **main**. Use **wmain** to make your application Unicode-aware.  \n  \n## See Also  \n [Support for Unicode](../text/support-for-unicode.md)"}