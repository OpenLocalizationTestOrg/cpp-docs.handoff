<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4d22475f656b9019f15fcab1ec8949e03183f2a3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\hash-compare-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c8416b5838dd1ab7ad7f56ed47f195fa64b3cc31</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d845df0b6ebf514207f50344e05fccbd038c7bd5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>hash_compare Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>hash_compare Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The template class describes an object that can be used by any of the hash associative containers — hash_map, hash_multimap, hash_set, or hash_multiset — as a default <bpt id="p1">**</bpt>Traits<ept id="p1">**</ept> parameter object to order and hash the elements they contain.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>class hash_compare { Traits comp; public: const size_t bucket_size = 4; const size_t min_buckets = 8; hash_compare(); hash_compare(Traits pred); size_t operator()(const Key&amp; key) const; bool operator()( const Key&amp; key1, const Key&amp; key2) const; };</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Each hash associative container stores a hash traits object of type <bpt id="p1">**</bpt>Traits<ept id="p1">**</ept> (a template parameter).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can derive a class from a specialization of hash_compare to selectively override certain functions and objects, or you can supply your own version of this class if you meet certain minimum requirements.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Specifically, for an object hash_comp of type <bpt id="p1">**</bpt>hash_compare<ph id="ph1">\&lt;</ph>Key, Traits&gt;<ept id="p1">**</ept>, the following behavior is required by the above containers:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For all values <ph id="ph1">`key`</ph> of type <bpt id="p1">**</bpt>Key<ept id="p1">**</ept>, the call <bpt id="p2">**</bpt>hash_comp<ept id="p2">**</ept>( <ph id="ph2">`key`</ph>) serves as a hash function, which yields a distribution of values of type <bpt id="p3">**</bpt>size_t<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The function supplied by hash_compare returns <ph id="ph1">`key`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For any value <ph id="ph1">`key1`</ph> of type <bpt id="p1">**</bpt>Key<ept id="p1">**</ept> that precedes <ph id="ph2">`key2`</ph> in the sequence and has the same hash value (value returned by the hash function), <bpt id="p2">**</bpt>hash_comp<ept id="p2">**</ept>( <ph id="ph3">`key2`</ph>, <ph id="ph4">`key1`</ph>) is false.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The function must impose a total ordering on values of type <bpt id="p1">**</bpt>Key<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The function supplied by hash_compare returns <bpt id="p1">*</bpt>comp<ept id="p1">*</ept>( <ph id="ph1">`key2`</ph>, <ph id="ph2">`key1`</ph>) <ph id="ph3">`,`</ph> where <bpt id="p2">*</bpt>comp<ept id="p2">*</ept> is a stored object of type <bpt id="p3">**</bpt>Traits<ept id="p3">**</ept> that you can specify when you construct the object hash_comp.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For the default <bpt id="p1">**</bpt>Traits<ept id="p1">**</ept> parameter type <bpt id="p2">**</bpt>less<ph id="ph1">\&lt;</ph>Key&gt;<ept id="p2">**</ept>, sort keys never decrease in value.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The integer constant <bpt id="p1">**</bpt>bucket_size<ept id="p1">**</ept> specifies the mean number of elements per "bucket" (hash-table entry) that the container should try not to exceed.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>It must be greater than zero.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The value supplied by hash_compare is 4.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The integer constant <bpt id="p1">**</bpt>min_buckets<ept id="p1">**</ept> specifies the minimum number of buckets to maintain in the hash table.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It must be a power of two and greater than zero.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The value supplied by hash_compare is 8.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In Visual C++ .NET 2003, members of the <bpt id="p1">[</bpt>&lt;hash_map&gt;<ept id="p1">](../standard-library/hash-map.md)</ept> and <bpt id="p2">[</bpt>&lt;hash_set&gt;<ept id="p2">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>The stdext Namespace<ept id="p1">](../standard-library/stdext-namespace.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>See examples for <bpt id="p1">[</bpt>hash_map::hash_map<ept id="p1">](../standard-library/hash-map-class.md#hash_map__hash_map)</ept>, <bpt id="p2">[</bpt>hash_multimap::hash_multimap<ept id="p2">](../standard-library/hash-multimap-class.md#hash_multimap__hash_multimap)</ept>, <bpt id="p3">[</bpt>hash_set::hash_set<ept id="p3">](../standard-library/hash-set-class.md#hash_set__hash_set)</ept>, and <bpt id="p4">[</bpt>hash_multiset::hash_multiset<ept id="p4">](../standard-library/hash-multiset-class.md#hash_multiset__hash_multiset)</ept>, for examples of how to declare and use hash_compare.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> &lt;hash_map&gt;</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> stdext</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Thread Safety in the C++ Standard Library</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>C++ Standard Library Reference</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>