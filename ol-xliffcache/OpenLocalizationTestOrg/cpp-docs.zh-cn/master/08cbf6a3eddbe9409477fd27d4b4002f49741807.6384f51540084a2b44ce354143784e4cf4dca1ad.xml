{"nodes":[{"pos":[12,50],"content":"Anonymous Class Types | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Anonymous Class Types | Microsoft Docs","pos":[0,38]}]},{"content":"Anonymous Class Types","pos":[620,641]},{"content":"Classes can be anonymous — that is, they can be declared without an <bpt id=\"p1\">*</bpt>identifier<ept id=\"p1\">*</ept>.","pos":[642,723],"source":"Classes can be anonymous — that is, they can be declared without an *identifier*."},{"content":"This is useful when you replace a class name with a <ph id=\"ph1\">`typedef`</ph> name, as in the following:","pos":[724,812],"source":" This is useful when you replace a class name with a `typedef` name, as in the following:"},{"pos":[903,1125],"content":"[!NOTE]\n The use of anonymous classes shown in the previous example is useful for preserving compatibility with existing C code. In some C code, the use of `typedef` in conjunction with anonymous structures is prevalent.","leadings":["","> "],"nodes":[{"content":" The use of anonymous classes shown in the previous example is useful for preserving compatibility with existing C code. In some C code, the use of `typedef` in conjunction with anonymous structures is prevalent.","pos":[8,220],"nodes":[{"content":"The use of anonymous classes shown in the previous example is useful for preserving compatibility with existing C code.","pos":[1,120]},{"content":"In some C code, the use of <ph id=\"ph1\">`typedef`</ph> in conjunction with anonymous structures is prevalent.","pos":[121,212],"source":" In some C code, the use of `typedef` in conjunction with anonymous structures is prevalent."}]}]},{"content":"Anonymous classes are also useful when you want a reference to a class member to appear as though it were not contained in a separate class, as in the following:","pos":[1132,1293]},{"pos":[1453,1563],"content":"In the preceding code, <ph id=\"ph1\">`iValue`</ph> can be accessed using the object member-selection operator (<bpt id=\"p1\">**</bpt>.<ept id=\"p1\">**</ept>) as follows:","source":"In the preceding code, `iValue` can be accessed using the object member-selection operator (**.**) as follows:"},{"content":"Anonymous classes are subject to certain restrictions.","pos":[1607,1661]},{"content":"(For more information about anonymous unions, see <bpt id=\"p1\">[</bpt>Unions<ept id=\"p1\">](../cpp/unions.md)</ept>.) Anonymous classes:","pos":[1662,1759],"source":" (For more information about anonymous unions, see [Unions](../cpp/unions.md).) Anonymous classes:"},{"content":"Cannot have a constructor or destructor.","pos":[1769,1809]},{"content":"Cannot be passed as arguments to functions (unless type checking is defeated using ellipses).","pos":[1819,1912]},{"content":"Cannot be returned as return values from functions.","pos":[1922,1973]},{"content":"Anonymous structs","pos":[1982,1999]},{"content":"Microsoft Specific","pos":[2009,2027]},{"content":"A Microsoft C extension allows you to declare a structure variable within another structure without giving it a name.","pos":[2031,2148]},{"content":"These nested structures are called anonymous structures.","pos":[2149,2205]},{"content":"C++ does not allow anonymous structures.","pos":[2206,2246]},{"content":"You can access the members of an anonymous structure as if they were members in the containing structure.","pos":[2253,2358]},{"content":"END Microsoft Specific","pos":[2787,2809]}],"content":"---\ntitle: \"Anonymous Class Types | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"class types, anonymous\"\n  - \"anonymous class types\"\nms.assetid: 9ba667b2-8c2a-4c29-82a6-fa120b9233c8\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Anonymous Class Types\nClasses can be anonymous — that is, they can be declared without an *identifier*. This is useful when you replace a class name with a `typedef` name, as in the following:  \n  \n```  \ntypedef struct  \n{  \n    unsigned x;  \n    unsigned y;  \n} POINT;  \n```  \n  \n> [!NOTE]\n>  The use of anonymous classes shown in the previous example is useful for preserving compatibility with existing C code. In some C code, the use of `typedef` in conjunction with anonymous structures is prevalent.  \n  \n Anonymous classes are also useful when you want a reference to a class member to appear as though it were not contained in a separate class, as in the following:  \n  \n```  \nstruct PTValue  \n{  \n    POINT ptLoc;  \n    union  \n    {  \n        int  iValue;  \n        long lValue;  \n    };  \n};  \n  \nPTValue ptv;  \n```  \n  \n In the preceding code, `iValue` can be accessed using the object member-selection operator (**.**) as follows:  \n  \n```  \nint i = ptv.iValue;  \n```  \n  \n Anonymous classes are subject to certain restrictions. (For more information about anonymous unions, see [Unions](../cpp/unions.md).) Anonymous classes:  \n  \n-   Cannot have a constructor or destructor.  \n  \n-   Cannot be passed as arguments to functions (unless type checking is defeated using ellipses).  \n  \n-   Cannot be returned as return values from functions.  \n  \n## Anonymous structs  \n  \n### Microsoft Specific  \n A Microsoft C extension allows you to declare a structure variable within another structure without giving it a name. These nested structures are called anonymous structures. C++ does not allow anonymous structures.  \n  \n You can access the members of an anonymous structure as if they were members in the containing structure.  \n  \n```  \n// anonymous_structures.c  \n#include <stdio.h>  \n  \nstruct phone  \n{  \n    int  areacode;  \n    long number;  \n};  \n  \nstruct person  \n{  \n    char   name[30];  \n    char   gender;  \n    int    age;  \n    int    weight;  \n    struct phone;    // Anonymous structure; no name needed  \n} Jim;  \n  \nint main()  \n{  \n    Jim.number = 1234567;  \n    printf_s(\"%d\\n\", Jim.number);     \n}  \n//Output: 1234567  \n```  \n  \n### END Microsoft Specific  \n  \n"}