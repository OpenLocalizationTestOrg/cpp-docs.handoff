{"nodes":[{"pos":[12,55],"content":"&lt;system_error&gt; enums | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"system_error<ph id=\"ph1\">&amp;gt;</ph> enums | Microsoft Docs","pos":[4,43],"source":"system_error&gt; enums | Microsoft Docs"}]},{"content":"system_error<ph id=\"ph1\">&amp;gt;</ph> enums","pos":[262,284],"source":"system_error&gt; enums"},{"content":"errc Enumeration","pos":[301,317]},{"content":"io_errc Enumeration","pos":[339,358]},{"pos":[425,441],"content":"errc Enumeration"},{"pos":[445,531],"content":"Provides symbolic names for all the error-code macros defined by Posix in <ph id=\"ph1\">`&lt;errno.h&gt;`</ph>.","source":"Provides symbolic names for all the error-code macros defined by Posix in `<errno.h>`."},{"pos":[537,3153],"content":"class errc { address_family_not_supported = EAFNOSUPPORT, address_in_use = EADDRINUSE, address_not_available = EADDRNOTAVAIL, already_connected = EISCONN, argument_list_too_long = E2BIG, argument_out_of_domain = EDOM, bad_address = EFAULT, bad_file_descriptor = EBADF, bad_message = EBADMSG, broken_pipe = EPIPE, connection_aborted = ECONNABORTED, connection_already_in_progress = EALREADY, connection_refused = ECONNREFUSED, connection_reset = ECONNRESET, cross_device_link = EXDEV, destination_address_required = EDESTADDRREQ, device_or_resource_busy = EBUSY, directory_not_empty = ENOTEMPTY, executable_format_error = ENOEXEC, file_exists = EEXIST, file_too_large = EFBIG, filename_too_long = ENAMETOOLONG, function_not_supported = ENOSYS, host_unreachable = EHOSTUNREACH, identifier_removed = EIDRM, illegal_byte_sequence = EILSEQ, inappropriate_io_control_operation = ENOTTY, interrupted = EINTR, invalid_argument = EINVAL, invalid_seek = ESPIPE, io_error = EIO, is_a_directory = EISDIR, message_size = EMSGSIZE, network_down = ENETDOWN, network_reset = ENETRESET, network_unreachable = ENETUNREACH, no_buffer_space = ENOBUFS, no_child_process = ECHILD, no_link = ENOLINK, no_lock_available = ENOLCK, no_message_available = ENODATA, no_message = ENOMSG, no_protocol_option = ENOPROTOOPT, no_space_on_device = ENOSPC, no_stream_resources = ENOSR, no_such_device_or_address = ENXIO, no_such_device = ENODEV, no_such_file_or_directory = ENOENT, no_such_process = ESRCH, not_a_directory = ENOTDIR, not_a_socket = ENOTSOCK, not_a_stream = ENOSTR, not_connected = ENOTCONN, not_enough_memory = ENOMEM, not_supported = ENOTSUP, operation_canceled = ECANCELED, operation_in_progress = EINPROGRESS, operation_not_permitted = EPERM, operation_not_supported = EOPNOTSUPP, operation_would_block = EWOULDBLOCK, owner_dead = EOWNERDEAD, permission_denied = EACCES, protocol_error = EPROTO, protocol_not_supported = EPROTONOSUPPORT, read_only_file_system = EROFS, resource_deadlock_would_occur = EDEADLK, resource_unavailable_try_again = EAGAIN, result_out_of_range = ERANGE, state_not_recoverable = ENOTRECOVERABLE, stream_timeout = ETIME, text_file_busy = ETXTBSY, timed_out = ETIMEDOUT, too_many_files_open_in_system = ENFILE, too_many_files_open = EMFILE, too_many_links = EMLINK, too_many_synbolic_link_levels = ELOOP, value_too_large = EOVERFLOW, wrong_protocol_type = EPROTOTYPE, };","source":"class errc {\n   address_family_not_supported = EAFNOSUPPORT,\n   address_in_use = EADDRINUSE,\n   address_not_available = EADDRNOTAVAIL,\n   already_connected = EISCONN,\n   argument_list_too_long = E2BIG,\n   argument_out_of_domain = EDOM,\n   bad_address = EFAULT,\n   bad_file_descriptor = EBADF,\n   bad_message = EBADMSG,\n   broken_pipe = EPIPE,\n   connection_aborted = ECONNABORTED,\n   connection_already_in_progress = EALREADY,\n   connection_refused = ECONNREFUSED,\n   connection_reset = ECONNRESET,\n   cross_device_link = EXDEV,\n   destination_address_required = EDESTADDRREQ,\n   device_or_resource_busy = EBUSY,\n   directory_not_empty = ENOTEMPTY,\n   executable_format_error = ENOEXEC,\n   file_exists = EEXIST,\n   file_too_large = EFBIG,\n   filename_too_long = ENAMETOOLONG,\n   function_not_supported = ENOSYS,\n   host_unreachable = EHOSTUNREACH,\n   identifier_removed = EIDRM,\n   illegal_byte_sequence = EILSEQ,\n   inappropriate_io_control_operation = ENOTTY,\n   interrupted = EINTR,\n   invalid_argument = EINVAL,\n   invalid_seek = ESPIPE,\n   io_error = EIO,\n   is_a_directory = EISDIR,\n   message_size = EMSGSIZE,\n   network_down = ENETDOWN,\n   network_reset = ENETRESET,\n   network_unreachable = ENETUNREACH,\n   no_buffer_space = ENOBUFS,\n   no_child_process = ECHILD,\n   no_link = ENOLINK,\n   no_lock_available = ENOLCK,\n   no_message_available = ENODATA,\n   no_message = ENOMSG,\n   no_protocol_option = ENOPROTOOPT,\n   no_space_on_device = ENOSPC,\n   no_stream_resources = ENOSR,\n   no_such_device_or_address = ENXIO,\n   no_such_device = ENODEV,\n   no_such_file_or_directory = ENOENT,\n   no_such_process = ESRCH,\n   not_a_directory = ENOTDIR,\n   not_a_socket = ENOTSOCK,\n   not_a_stream = ENOSTR,\n   not_connected = ENOTCONN,\n   not_enough_memory = ENOMEM,\n   not_supported = ENOTSUP,\n   operation_canceled = ECANCELED,\n   operation_in_progress = EINPROGRESS,\n   operation_not_permitted = EPERM,\n   operation_not_supported = EOPNOTSUPP,\n   operation_would_block = EWOULDBLOCK,\n   owner_dead = EOWNERDEAD,\n   permission_denied = EACCES,\n   protocol_error = EPROTO,\n   protocol_not_supported = EPROTONOSUPPORT,\n   read_only_file_system = EROFS,\n   resource_deadlock_would_occur = EDEADLK,\n   resource_unavailable_try_again = EAGAIN,\n   result_out_of_range = ERANGE,\n   state_not_recoverable = ENOTRECOVERABLE,\n   stream_timeout = ETIME,\n   text_file_busy = ETXTBSY,\n   timed_out = ETIMEDOUT,\n   too_many_files_open_in_system = ENFILE,\n   too_many_files_open = EMFILE,\n   too_many_links = EMLINK,\n   too_many_synbolic_link_levels = ELOOP,\n   value_too_large = EOVERFLOW,\n   wrong_protocol_type = EPROTOTYPE,\n   };"},{"content":"Remarks","pos":[3163,3170]},{"pos":[3216,3235],"content":"io_errc Enumeration"},{"content":"Provides symbolic names for the error conditions in <ph id=\"ph1\">\\&lt;</ph>iostream&gt;.","pos":[3239,3303],"source":"Provides symbolic names for the error conditions in \\<iostream>."},{"content":"Can be used to create <bpt id=\"p1\">[</bpt>error_condition<ept id=\"p1\">](../standard-library/error-condition-class.md)</ept> objects to be compared with the value that's returned by the <bpt id=\"p2\">[</bpt>ios_base::failure<ept id=\"p2\">](../standard-library/ios-base-class.md#ios_base__failure)</ept><ph id=\"ph1\">`code()`</ph> function.","pos":[3304,3545],"source":" Can be used to create [error_condition](../standard-library/error-condition-class.md) objects to be compared with the value that's returned by the [ios_base::failure](../standard-library/ios-base-class.md#ios_base__failure)`code()` function."},{"pos":[3551,3586],"content":"class io_errc { stream = 1 };","source":"class io_errc {\n   stream = 1\n   };"},{"content":"Remarks","pos":[3596,3603]},{"pos":[3607,3831],"content":"Both <bpt id=\"p1\">[</bpt>std::make_error_code()<ept id=\"p1\">](../standard-library/system-error-functions.md#make_error_code)</ept> and <bpt id=\"p2\">[</bpt>std::make_error_condition()<ept id=\"p2\">](../standard-library/system-error-functions.md#make_error_condition)</ept> are overloaded for this enum.","source":"Both [std::make_error_code()](../standard-library/system-error-functions.md#make_error_code) and [std::make_error_condition()](../standard-library/system-error-functions.md#make_error_condition) are overloaded for this enum."},{"pos":[3858,3925],"content":"can contain categories of error codes other than <ph id=\"ph1\">`error_condition`</ph>.","source":" can contain categories of error codes other than `error_condition`."},{"content":"Example","pos":[3935,3942]},{"content":"See Also","pos":[4564,4572]},{"content":"&lt;system_error&gt;","pos":[4577,4591],"source":"<system_error>"}],"content":"---\ntitle: \"&lt;system_error&gt; enums | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: b21321b7-404a-40de-8777-a85b77c6fa58\ncaps.latest.revision: 12\nmanager: \"ghogen\"\n---\n# &lt;system_error&gt; enums\n|||  \n|-|-|  \n|[errc Enumeration](#errc_enumeration)|[io_errc Enumeration](#io_errc_enumeration)|  \n  \n##  <a name=\"errc_enumeration\"></a>  errc Enumeration  \n Provides symbolic names for all the error-code macros defined by Posix in `<errno.h>`.  \n  \nclass errc {\n   address_family_not_supported = EAFNOSUPPORT,\n   address_in_use = EADDRINUSE,\n   address_not_available = EADDRNOTAVAIL,\n   already_connected = EISCONN,\n   argument_list_too_long = E2BIG,\n   argument_out_of_domain = EDOM,\n   bad_address = EFAULT,\n   bad_file_descriptor = EBADF,\n   bad_message = EBADMSG,\n   broken_pipe = EPIPE,\n   connection_aborted = ECONNABORTED,\n   connection_already_in_progress = EALREADY,\n   connection_refused = ECONNREFUSED,\n   connection_reset = ECONNRESET,\n   cross_device_link = EXDEV,\n   destination_address_required = EDESTADDRREQ,\n   device_or_resource_busy = EBUSY,\n   directory_not_empty = ENOTEMPTY,\n   executable_format_error = ENOEXEC,\n   file_exists = EEXIST,\n   file_too_large = EFBIG,\n   filename_too_long = ENAMETOOLONG,\n   function_not_supported = ENOSYS,\n   host_unreachable = EHOSTUNREACH,\n   identifier_removed = EIDRM,\n   illegal_byte_sequence = EILSEQ,\n   inappropriate_io_control_operation = ENOTTY,\n   interrupted = EINTR,\n   invalid_argument = EINVAL,\n   invalid_seek = ESPIPE,\n   io_error = EIO,\n   is_a_directory = EISDIR,\n   message_size = EMSGSIZE,\n   network_down = ENETDOWN,\n   network_reset = ENETRESET,\n   network_unreachable = ENETUNREACH,\n   no_buffer_space = ENOBUFS,\n   no_child_process = ECHILD,\n   no_link = ENOLINK,\n   no_lock_available = ENOLCK,\n   no_message_available = ENODATA,\n   no_message = ENOMSG,\n   no_protocol_option = ENOPROTOOPT,\n   no_space_on_device = ENOSPC,\n   no_stream_resources = ENOSR,\n   no_such_device_or_address = ENXIO,\n   no_such_device = ENODEV,\n   no_such_file_or_directory = ENOENT,\n   no_such_process = ESRCH,\n   not_a_directory = ENOTDIR,\n   not_a_socket = ENOTSOCK,\n   not_a_stream = ENOSTR,\n   not_connected = ENOTCONN,\n   not_enough_memory = ENOMEM,\n   not_supported = ENOTSUP,\n   operation_canceled = ECANCELED,\n   operation_in_progress = EINPROGRESS,\n   operation_not_permitted = EPERM,\n   operation_not_supported = EOPNOTSUPP,\n   operation_would_block = EWOULDBLOCK,\n   owner_dead = EOWNERDEAD,\n   permission_denied = EACCES,\n   protocol_error = EPROTO,\n   protocol_not_supported = EPROTONOSUPPORT,\n   read_only_file_system = EROFS,\n   resource_deadlock_would_occur = EDEADLK,\n   resource_unavailable_try_again = EAGAIN,\n   result_out_of_range = ERANGE,\n   state_not_recoverable = ENOTRECOVERABLE,\n   stream_timeout = ETIME,\n   text_file_busy = ETXTBSY,\n   timed_out = ETIMEDOUT,\n   too_many_files_open_in_system = ENFILE,\n   too_many_files_open = EMFILE,\n   too_many_links = EMLINK,\n   too_many_synbolic_link_levels = ELOOP,\n   value_too_large = EOVERFLOW,\n   wrong_protocol_type = EPROTOTYPE,\n   };  \n  \n### Remarks  \n  \n##  <a name=\"io_errc_enumeration\"></a>  io_errc Enumeration  \n Provides symbolic names for the error conditions in \\<iostream>. Can be used to create [error_condition](../standard-library/error-condition-class.md) objects to be compared with the value that's returned by the [ios_base::failure](../standard-library/ios-base-class.md#ios_base__failure)`code()` function.  \n  \nclass io_errc {\n   stream = 1\n   };  \n  \n### Remarks  \n Both [std::make_error_code()](../standard-library/system-error-functions.md#make_error_code) and [std::make_error_condition()](../standard-library/system-error-functions.md#make_error_condition) are overloaded for this enum.  \n  \n `ios_base::failure` can contain categories of error codes other than `error_condition`.  \n  \n### Example  \n  \n```cpp  \n  \n// io_errc.cpp  \n// cl.exe /nologo /W4 /EHsc /MTd  \n  \n#include <iostream>       \n  \nusing namespace std;  \n  \nint main()  \n{  \n    cin.exceptions(ios::failbit | ios::badbit);  \n  \n    try {  \n        cin.rdbuf(nullptr); // throws io_errc::stream  \n    }  \n    catch (ios::failure& e) {  \n        cerr << \"ios failure caught: \";  \n        if (e.code() == make_error_condition(io_errc::stream)) {  \n            cerr << \"io_errc stream error condition\" << endl;  \n        }  \n        else {  \n            cerr << \"unmatched error condition code \" << e.code() << endl;  \n        }  \n    }  \n}  \n```  \n  \n## See Also  \n [<system_error>](../standard-library/system-error.md)\n\n\n\n"}