{"nodes":[{"pos":[12,45],"content":"mem_fun1_t Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"mem_fun1_t Class | Microsoft Docs","pos":[0,33]}]},{"content":"mem_fun1_t Class","pos":[679,695]},{"pos":[696,868],"content":"An adapter class that allows a <bpt id=\"p1\">**</bpt>non_const<ept id=\"p1\">**</ept> member function that takes a single argument to be called as a binary function object when initialized with a pointer argument.","source":"An adapter class that allows a **non_const** member function that takes a single argument to be called as a binary function object when initialized with a pointer argument."},{"content":"Syntax","pos":[877,883]},{"content":"Parameters","pos":[1145,1155]},{"content":"A pointer to the member function of class <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept> to be converted to a function object.","pos":[1168,1256],"source":" A pointer to the member function of class **Type** to be converted to a function object."},{"content":"The object that the <ph id=\"ph1\">`_Pm`</ph> member function is called on.","pos":[1275,1330],"source":" The object that the `_Pm` member function is called on."},{"content":"The argument that is being given to <ph id=\"ph1\">`_Pm`</ph>.","pos":[1348,1390],"source":" The argument that is being given to `_Pm`."},{"content":"Return Value","pos":[1399,1411]},{"content":"An adaptable binary function.","pos":[1415,1444]},{"content":"Remarks","pos":[1453,1460]},{"content":"The template class stores a copy of <ph id=\"ph1\">`_Pm`</ph>, which must be a pointer to a member function of class <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept>, in a private member object.","pos":[1464,1598],"source":"The template class stores a copy of `_Pm`, which must be a pointer to a member function of class **Type**, in a private member object."},{"content":"It defines its member function <ph id=\"ph1\">`operator()`</ph> as returning ( <bpt id=\"p1\">**</bpt>_Pleft<ept id=\"p1\">**</ept><ph id=\"ph2\">-&gt;\\*</ph> <ph id=\"ph3\">`_Pm`</ph>)( <bpt id=\"p2\">**</bpt>right<ept id=\"p2\">**</ept>).","pos":[1599,1692],"source":" It defines its member function `operator()` as returning ( **_Pleft**->\\* `_Pm`)( **right**)."},{"content":"Example","pos":[1701,1708]},{"content":"The constructor of <ph id=\"ph1\">`mem_fun1_t`</ph> is not usually used directly; the helper function <ph id=\"ph2\">`mem_fun`</ph> is used to adapt member functions.","pos":[1713,1839],"source":"The constructor of `mem_fun1_t` is not usually used directly; the helper function `mem_fun` is used to adapt member functions."},{"content":"See <bpt id=\"p1\">[</bpt>mem_fun<ept id=\"p1\">](../standard-library/functional-functions.md#mem_fun_function)</ept> for an example of how to use member function adaptors.","pos":[1840,1970],"source":" See [mem_fun](../standard-library/functional-functions.md#mem_fun_function) for an example of how to use member function adaptors."},{"content":"Requirements","pos":[1979,1991]},{"pos":[1995,2020],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>functional&gt;","source":"**Header:** \\<functional>"},{"pos":[2027,2045],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"content":"See Also","pos":[2054,2062]},{"content":"Thread Safety in the C++ Standard Library","pos":[2067,2108]},{"content":"C++ Standard Library Reference","pos":[2181,2211]}],"content":"---\ntitle: \"mem_fun1_t Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"mem_fun1_t\"\n  - \"std.mem_fun1_t\"\n  - \"std::mem_fun1_t\"\n  - \"xfunctional/std::mem_fun1_t\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"mem_fun1_t class\"\nms.assetid: 01a8c2c2-b2f7-4e3f-869c-5b5b9f06ea54\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# mem_fun1_t Class\nAn adapter class that allows a **non_const** member function that takes a single argument to be called as a binary function object when initialized with a pointer argument.  \n  \n## Syntax  \n  \n```\ntemplate <class Result, class Type, class Arg>\nclass mem_fun1_t : public binary_function<Type *, Arg, Result> {\n    explicit mem_fun1_t(\n    Result (Type::* _Pm)(Arg));\n\n    Result operator()(\n    Type* _Pleft,\n    Arg right) const;\n\n };\n```  \n  \n#### Parameters  \n `_Pm`  \n A pointer to the member function of class **Type** to be converted to a function object.  \n  \n `_Pleft`  \n The object that the `_Pm` member function is called on.  \n  \n `right`  \n The argument that is being given to `_Pm`.  \n  \n## Return Value  \n An adaptable binary function.  \n  \n## Remarks  \n The template class stores a copy of `_Pm`, which must be a pointer to a member function of class **Type**, in a private member object. It defines its member function `operator()` as returning ( **_Pleft**->\\* `_Pm`)( **right**).  \n  \n## Example  \n  The constructor of `mem_fun1_t` is not usually used directly; the helper function `mem_fun` is used to adapt member functions. See [mem_fun](../standard-library/functional-functions.md#mem_fun_function) for an example of how to use member function adaptors.  \n  \n## Requirements  \n **Header:** \\<functional>  \n  \n **Namespace:** std  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}