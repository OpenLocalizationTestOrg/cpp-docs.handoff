<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">79749124c727659c87f2d6d517acee6af2719014</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\openmp\2-4-1-for-construct.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5d3ec97b0009b3208b7a6b07468886b89615d2b0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">af821d9b55ccd535c5b50e1f1378362f82faff2d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>2.4.1 for Construct | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>2.4.1 for Construct</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>for<ept id="p1">**</ept> directive identifies an iterative work-sharing construct that specifies that the iterations of the associated loop will be executed in parallel.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The iterations of the <bpt id="p1">**</bpt>for<ept id="p1">**</ept> loop are distributed across threads that already exist in the team executing the parallel construct to which it binds.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The syntax of the <bpt id="p1">**</bpt>for<ept id="p1">**</ept> construct is as follows:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The clause is one of the following:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>private(<ept id="p1">**</ept> <bpt id="p2">*</bpt>variable-list<ept id="p2">*</ept> <bpt id="p3">**</bpt>)<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>firstprivate(<ept id="p1">**</ept> <bpt id="p2">*</bpt>variable-list<ept id="p2">*</ept> <bpt id="p3">**</bpt>)<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>lastprivate(<ept id="p1">**</ept> <bpt id="p2">*</bpt>variable-list<ept id="p2">*</ept> <bpt id="p3">**</bpt>)<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>reduction(<ept id="p1">**</ept> <bpt id="p2">*</bpt>operator<ept id="p2">*</ept> <bpt id="p3">**</bpt>:<ept id="p3">**</ept> <bpt id="p4">*</bpt>variable-list<ept id="p4">*</ept><bpt id="p5">**</bpt>)<ept id="p5">**</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>ordered</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>schedule(<ept id="p1">**</ept> <bpt id="p2">*</bpt>kind<ept id="p2">*</ept>[, <bpt id="p3">*</bpt>chunk_size<ept id="p3">*</ept>]<bpt id="p4">**</bpt>)<ept id="p4">**</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>nowait</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>for<ept id="p1">**</ept> directive places restrictions on the structure of the corresponding <bpt id="p2">**</bpt>for<ept id="p2">**</ept> loop.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Specifically, the corresponding <bpt id="p1">**</bpt>for<ept id="p1">**</ept> loop must have canonical shape:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>for (<ept id="p1">**</ept> <bpt id="p2">*</bpt>init-expr<ept id="p2">*</ept> <bpt id="p3">**</bpt>;<ept id="p3">**</ept> <bpt id="p4">*</bpt>var  logical-op  b<ept id="p4">*</ept>; <bpt id="p5">*</bpt>incr-expr<ept id="p5">*</ept><bpt id="p6">**</bpt>)<ept id="p6">**</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>init-expr</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>One of the following:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>var<ept id="p1">*</ept><ph id="ph1"> = </ph><bpt id="p2">*</bpt>lb<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>integer-type var<ept id="p1">*</ept><ph id="ph1"> = </ph><bpt id="p2">*</bpt>lb<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>incr-expr</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>One of the following:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>var</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>var</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>var</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>var</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>var<ept id="p1">*</ept><ph id="ph1"> += </ph><bpt id="p2">*</bpt>incr<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>var<ept id="p1">*</ept><ph id="ph1"> -= </ph><bpt id="p2">*</bpt>incr<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>var<ept id="p1">*</ept><ph id="ph1"> = </ph><bpt id="p2">*</bpt>var<ept id="p2">*</ept><ph id="ph2"> + </ph><bpt id="p3">*</bpt>incr<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>var<ept id="p1">*</ept><ph id="ph1"> = </ph><bpt id="p2">*</bpt>incr<ept id="p2">*</ept><ph id="ph2"> + </ph><bpt id="p3">*</bpt>var<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>var<ept id="p1">*</ept><ph id="ph1"> = </ph><bpt id="p2">*</bpt>var<ept id="p2">*</ept><ph id="ph2"> - </ph><bpt id="p3">*</bpt>incr<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>var</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A signed integer variable.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If this variable would otherwise be shared, it is implicitly made private for the duration of the <bpt id="p1">**</bpt>for<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This variable must not be modified within the body of the <bpt id="p1">**</bpt>for<ept id="p1">**</ept> statement.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Unless the variable is specified <bpt id="p1">**</bpt>lastprivate<ept id="p1">**</ept>, its value after the loop is indeterminate.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>logical-op</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>One of the following:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>lb<ept id="p1">*</ept>, <bpt id="p2">*</bpt>b<ept id="p2">*</ept>, and <bpt id="p3">*</bpt>incr<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Loop invariant integer expressions.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>There is no synchronization during the evaluation of these expressions.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Thus, any evaluated side effects produce indeterminate results.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Note that the canonical form allows the number of loop iterations to be computed on entry to the loop.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This computation is performed with values in the type of <bpt id="p1">*</bpt>var<ept id="p1">*</ept>, after integral promotions.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In particular, if value of <bpt id="p1">*</bpt>b<ept id="p1">*</ept><ph id="ph1"> - </ph><bpt id="p2">*</bpt>lb<ept id="p2">*</ept><ph id="ph2"> + </ph><bpt id="p3">*</bpt>incr<ept id="p3">*</ept> cannot be represented in that type, the result is indeterminate.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Further, if <bpt id="p1">*</bpt>logical-op<ept id="p1">*</ept> is &lt; or <ph id="ph1">\&lt;</ph>= then <bpt id="p2">*</bpt>incr-expr<ept id="p2">*</ept> must cause <bpt id="p3">*</bpt>var<ept id="p3">*</ept> to increase on each iteration of the loop.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>logical-op<ept id="p1">*</ept> is &gt; or &gt;= then <bpt id="p2">*</bpt>incr-expr<ept id="p2">*</ept> must cause <bpt id="p3">*</bpt>var<ept id="p3">*</ept> to decrease on each iteration of the loop.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>schedule<ept id="p1">**</ept> clause specifies how iterations of the <bpt id="p2">**</bpt>for<ept id="p2">**</ept> loop are divided among threads of the team.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The correctness of a program must not depend on which thread executes a particular iteration.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The value of <bpt id="p1">*</bpt>chunk_size<ept id="p1">*</ept>, if specified, must be a loop invariant integer expression with a positive value.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>There is no synchronization during the evaluation of this expression.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Thus, any evaluated side effects produce indeterminate results.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The schedule <bpt id="p1">*</bpt>kind<ept id="p1">*</ept> can be one of the following:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>TABLE 2-1       <bpt id="p1">**</bpt>schedule<ept id="p1">**</ept> clause <bpt id="p2">*</bpt>kind<ept id="p2">*</ept> values</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>static</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>schedule(static,<ept id="p1">**</ept> <bpt id="p2">*</bpt>chunk_size<ept id="p2">*</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept> is specified, iterations are divided into chunks of a size specified by <bpt id="p4">*</bpt>chunk_size<ept id="p4">*</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The chunks are statically assigned to threads in the team in a round-robin fashion in the order of the thread number.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When no <bpt id="p1">*</bpt>chunk_size<ept id="p1">*</ept> is specified, the iteration space is divided into chunks that are approximately equal in size, with one chunk assigned to each thread.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>dynamic</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>schedule(dynamic,<ept id="p1">**</ept> <bpt id="p2">*</bpt>chunk_size<ept id="p2">*</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept> is specified, the iterations are divided into a series of chunks, each containing <bpt id="p4">*</bpt>chunk_size<ept id="p4">*</ept> iterations.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Each chunk is assigned to a thread that is waiting for an assignment.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The thread executes the chunk of iterations and then waits for its next assignment, until no chunks remain to be assigned.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Note that the last chunk to be assigned may have a smaller number of iterations.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>When no <bpt id="p1">*</bpt>chunk_size<ept id="p1">*</ept> is specified, it defaults to 1.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>guided</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>schedule(guided,<ept id="p1">**</ept> <bpt id="p2">*</bpt>chunk_size<ept id="p2">*</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept> is specified, the iterations are assigned to threads in chunks with decreasing sizes.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>When a thread finishes its assigned chunk of iterations, it is dynamically assigned another chunk, until none remain.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For a <bpt id="p1">*</bpt>chunk_size<ept id="p1">*</ept> of 1, the size of each chunk is approximately the number of unassigned iterations divided by the number of threads.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>These sizes decrease approximately exponentially to 1.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For a <bpt id="p1">*</bpt>chunk_size<ept id="p1">*</ept> with value <bpt id="p2">*</bpt>k<ept id="p2">*</ept> greater than 1, the sizes decrease approximately exponentially to <bpt id="p3">*</bpt>k<ept id="p3">*</ept>, except that the last chunk may have fewer than <bpt id="p4">*</bpt>k<ept id="p4">*</ept> iterations.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>When no <bpt id="p1">*</bpt>chunk_size<ept id="p1">*</ept> is specified, it defaults to 1.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>runtime</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>schedule(runtime)<ept id="p1">**</ept> is specified, the decision regarding scheduling is deferred until runtime.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The schedule <bpt id="p1">*</bpt>kind<ept id="p1">*</ept> and size of the chunks can be chosen at run time by setting the environment variable <bpt id="p2">**</bpt>OMP_SCHEDULE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>If this environment variable is not set, the resulting schedule is implementation-defined.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>When  <bpt id="p1">**</bpt>schedule(runtime)<ept id="p1">**</ept> is specified, <bpt id="p2">*</bpt>chunk_size<ept id="p2">*</ept> must not be specified.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In the absence of an explicitly defined <bpt id="p1">**</bpt>schedule<ept id="p1">**</ept> clause, the default <bpt id="p2">**</bpt>schedule<ept id="p2">**</ept> is implementation-defined.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>An OpenMP-compliant program should not rely on a particular schedule for correct execution.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>A program should not rely on a schedule <bpt id="p1">*</bpt>kind<ept id="p1">*</ept> conforming precisely to the description given above, because it is possible to have variations in the implementations of the same schedule <bpt id="p2">*</bpt>kind<ept id="p2">*</ept> across different compilers.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The descriptions can be used to select the schedule that is appropriate for a particular situation.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ordered<ept id="p1">**</ept> clause must be present when <bpt id="p2">**</bpt>ordered<ept id="p2">**</ept> directives bind to the <bpt id="p3">**</bpt>for<ept id="p3">**</ept> construct.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>There is an implicit barrier at the end of a <bpt id="p1">**</bpt>for<ept id="p1">**</ept> construct unless a <bpt id="p2">**</bpt>nowait<ept id="p2">**</ept> clause is specified.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Restrictions to the <bpt id="p1">**</bpt>for<ept id="p1">**</ept> directive are as follows:</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>for<ept id="p1">**</ept> loop must be a structured block, and, in addition, its execution must not be terminated by a <bpt id="p2">**</bpt>break<ept id="p2">**</ept> statement.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The values of the loop control expressions of the <bpt id="p1">**</bpt>for<ept id="p1">**</ept> loop associated with a <bpt id="p2">**</bpt>for<ept id="p2">**</ept> directive must be the same for all the threads in the team.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>for<ept id="p1">**</ept> loop iteration variable must have a signed integer type.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Only a single <bpt id="p1">**</bpt>schedule<ept id="p1">**</ept> clause can appear on a <bpt id="p2">**</bpt>for<ept id="p2">**</ept> directive.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Only a single <bpt id="p1">**</bpt>ordered<ept id="p1">**</ept> clause can appear on a <bpt id="p2">**</bpt>for<ept id="p2">**</ept> directive.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Only a single <bpt id="p1">**</bpt>nowait<ept id="p1">**</ept> clause can appear on a <bpt id="p2">**</bpt>for<ept id="p2">**</ept> directive.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>It is unspecified if or how often any side effects within the <bpt id="p1">*</bpt>chunk_size<ept id="p1">*</ept>, <bpt id="p2">*</bpt>lb<ept id="p2">*</ept>, <bpt id="p3">*</bpt>b<ept id="p3">*</ept>, or <bpt id="p4">*</bpt>incr<ept id="p4">*</ept> expressions occur.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The value of the <bpt id="p1">*</bpt>chunk_size<ept id="p1">*</ept> expression must be the same for all threads in the team.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Cross References:</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>private<ept id="p1">**</ept>, <bpt id="p2">**</bpt>firstprivate<ept id="p2">**</ept>, <bpt id="p3">**</bpt>lastprivate<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>reduction<ept id="p4">**</ept> clauses, see <bpt id="p5">[</bpt>Section 2.7.2<ept id="p5">](../../parallel/openmp/2-7-2-data-sharing-attribute-clauses.md)</ept> on page 25.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OMP_SCHEDULE<ept id="p1">**</ept> environment variable, see <bpt id="p2">[</bpt>Section 4.1<ept id="p2">](../../parallel/openmp/4-1-omp-schedule.md)</ept> on page 48.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ordered<ept id="p1">**</ept> construct, see <bpt id="p2">[</bpt>Section 2.6.6<ept id="p2">](../../parallel/openmp/2-6-6-ordered-construct.md)</ept> on page 22.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Appendix D<ept id="p1">](../../parallel/openmp/d-using-the-schedule-clause.md)</ept>, page 93, gives more information on using the schedule clause.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>