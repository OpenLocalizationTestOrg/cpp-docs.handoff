{"nodes":[{"pos":[12,47],"content":"ptr::operator-&gt; | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ptr::operator-<ph id=\"ph1\">&amp;gt;</ph> | Microsoft Docs","pos":[0,35],"source":"ptr::operator-&gt; | Microsoft Docs"}]},{"content":"ptr::operator-","pos":[696,710]},{"content":"Member access operator, used to call methods on the owned COM object.","pos":[715,784]},{"content":"Syntax","pos":[793,799]},{"content":"Return Value","pos":[879,891]},{"pos":[895,931],"content":"A <ph id=\"ph1\">`smart_com_ptr`</ph> to the COM object.","source":"A `smart_com_ptr` to the COM object."},{"content":"Exceptions","pos":[940,950]},{"pos":[954,1142],"content":"Internally, <ph id=\"ph1\">`QueryInterface`</ph> is called on the owned COM object and any error <ph id=\"ph2\">`HRESULT`</ph> is converted to an exception by &lt;xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A&gt;.","source":"Internally, `QueryInterface` is called on the owned COM object and any error `HRESULT` is converted to an exception by <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A>."},{"content":"Remarks","pos":[1151,1158]},{"content":"This operator allows you to call methods of the owned COM object.","pos":[1162,1227]},{"content":"It returns a temporary <ph id=\"ph1\">`smart_com_ptr`</ph> that automatically handles its own <ph id=\"ph2\">`AddRef`</ph> and <ph id=\"ph3\">`Release`</ph>.","pos":[1228,1325],"source":" It returns a temporary `smart_com_ptr` that automatically handles its own `AddRef` and `Release`."},{"content":"Example","pos":[1334,1341]},{"content":"This example implements a CLR class that uses a <ph id=\"ph1\">`com::ptr`</ph> to wrap its private member <ph id=\"ph2\">`IXMLDOMDocument`</ph> object.","pos":[1345,1456],"source":"This example implements a CLR class that uses a `com::ptr` to wrap its private member `IXMLDOMDocument` object."},{"content":"The <ph id=\"ph1\">`WriteDocument`</ph> functions uses <ph id=\"ph2\">`operator-&gt;`</ph> to call the <ph id=\"ph3\">`get_firstChild`</ph> member of the document object.","pos":[1457,1564],"source":" The `WriteDocument` functions uses `operator->` to call the `get_firstChild` member of the document object."},{"content":"Requirements","pos":[4946,4958]},{"pos":[4962,4996],"content":"<bpt id=\"p1\">**</bpt>Header file<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>msclr\\com\\ptr.h&gt;","source":"**Header file** \\<msclr\\com\\ptr.h>"},{"pos":[5003,5027],"content":"<bpt id=\"p1\">**</bpt>Namespace<ept id=\"p1\">**</ept> msclr::com","source":"**Namespace** msclr::com"},{"content":"See Also","pos":[5036,5044]},{"content":"ptr Members","pos":[5049,5060]}],"content":"---\ntitle: \"ptr::operator-&gt; | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"msclr.com.ptr.operator->\"\n  - \"ptr.operator->\"\n  - \"ptr::operator->\"\n  - \"msclr::com::ptr::operator->\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ptr::operator->\"\nms.assetid: e752b549-74ed-430d-9a60-6c8e0e441998\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ptr::operator-&gt;\nMember access operator, used to call methods on the owned COM object.  \n  \n## Syntax  \n  \n```  \n_detail::smart_com_ptr<_interface_type> operator->();  \n```  \n  \n## Return Value  \n A `smart_com_ptr` to the COM object.  \n  \n## Exceptions  \n Internally, `QueryInterface` is called on the owned COM object and any error `HRESULT` is converted to an exception by <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A>.  \n  \n## Remarks  \n This operator allows you to call methods of the owned COM object. It returns a temporary `smart_com_ptr` that automatically handles its own `AddRef` and `Release`.  \n  \n## Example  \n This example implements a CLR class that uses a `com::ptr` to wrap its private member `IXMLDOMDocument` object. The `WriteDocument` functions uses `operator->` to call the `get_firstChild` member of the document object.  \n  \n```  \n// comptr_op_member.cpp  \n// compile with: /clr /link msxml2.lib  \n#include <msxml2.h>  \n#include <msclr\\com\\ptr.h>  \n  \n#import <msxml3.dll> raw_interfaces_only  \n  \nusing namespace System;  \nusing namespace System::Runtime::InteropServices;  \nusing namespace msclr;  \n  \n// a ref class that uses a com::ptr to contain an   \n// IXMLDOMDocument object  \nref class XmlDocument {  \npublic:  \n   // construct the internal com::ptr with a null interface  \n   // and use CreateInstance to fill it  \n   XmlDocument(String^ progid) {  \n      m_ptrDoc.CreateInstance(progid);     \n   }  \n  \n   // add a reference to and return the COM object  \n   // but keep an internal reference to the object  \n   IXMLDOMDocument* GetDocument() {  \n      return m_ptrDoc.GetInterface();  \n   }  \n  \n   // simplified function that only writes the first node  \n   void WriteDocument() {  \n      IXMLDOMNode* pNode = NULL;  \n      BSTR bstr = NULL;  \n  \n      try {  \n         // use operator -> to call XML Doc member  \n         Marshal::ThrowExceptionForHR(m_ptrDoc->get_firstChild(&pNode));  \n         if (NULL != pNode) {  \n            // write out the xml  \n            Marshal::ThrowExceptionForHR(pNode->get_nodeName(&bstr));  \n            String^ strName = gcnew String(bstr);  \n            Console::Write(\"<{0}>\", strName);  \n            ::SysFreeString(bstr);  \n            bstr = NULL;  \n  \n            Marshal::ThrowExceptionForHR(pNode->get_text(&bstr));  \n            Console::Write(gcnew String(bstr));  \n            ::SysFreeString(bstr);  \n            bstr = NULL;  \n  \n            Console::WriteLine(\"</{0}>\", strName);  \n         }  \n      }  \n      finally {  \n         if (NULL != pNode) {  \n            pNode->Release();  \n         }  \n         ::SysFreeString(bstr);  \n      }  \n   }  \n  \n   // note that the destructor will call the com::ptr destructor  \n   // and automatically release the reference to the COM object  \n  \nprivate:  \n   com::ptr<IXMLDOMDocument> m_ptrDoc;  \n};  \n  \n// unmanaged function that loads XML into a raw XML DOM Document object  \nHRESULT LoadXml(IXMLDOMDocument* pDoc, BSTR bstrXml) {  \n   HRESULT hr = S_OK;  \n   VARIANT_BOOL bSuccess;  \n   hr = pDoc->loadXML(bstrXml, &bSuccess);  \n   if (S_OK == hr && !bSuccess) {  \n      hr = E_FAIL;  \n   }  \n   return hr;  \n}  \n  \n// use the ref class to handle an XML DOM Document object  \nint main() {  \n   IXMLDOMDocument* pDoc = NULL;  \n   BSTR bstrXml = NULL;  \n  \n   try {  \n      // create the class from a progid string  \n      XmlDocument doc(\"Msxml2.DOMDocument.3.0\");  \n  \n      bstrXml = ::SysAllocString(L\"<word>persnickety</word>\");  \n      if (NULL == bstrXml) {  \n         throw gcnew OutOfMemoryException(\"bstrXml\");  \n      }  \n      // detach the document object from the ref class  \n      pDoc = doc.GetDocument();  \n      // use unmanaged function and raw object to load xml  \n      Marshal::ThrowExceptionForHR(LoadXml(pDoc, bstrXml));  \n      // release reference to document object (but ref class still references it)  \n      pDoc->Release();  \n      pDoc = NULL;  \n  \n      // call another function on the ref class  \n      doc.WriteDocument();  \n   }  \n   catch (Exception^ e) {  \n      Console::WriteLine(e);     \n   }  \n   finally {  \n      if (NULL != pDoc) {  \n         pDoc->Release();  \n      }  \n  \n   }  \n}  \n```  \n  \n```Output  \n<word>persnickety</word>  \n```  \n  \n## Requirements  \n **Header file** \\<msclr\\com\\ptr.h>  \n  \n **Namespace** msclr::com  \n  \n## See Also  \n [ptr Members](../dotnet/ptr-members.md)"}