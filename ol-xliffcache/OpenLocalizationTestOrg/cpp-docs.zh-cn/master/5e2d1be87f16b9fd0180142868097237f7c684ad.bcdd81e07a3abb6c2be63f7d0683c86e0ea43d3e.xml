{"nodes":[{"pos":[12,63],"content":"FtmBase::UnmarshalInterface Method | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"FtmBase::UnmarshalInterface Method | Microsoft Docs","pos":[0,51]}]},{"content":"FtmBase::UnmarshalInterface Method","pos":[693,727]},{"content":"Initializes a newly created proxy and returns an interface pointer to that proxy.","pos":[728,809]},{"content":"Syntax","pos":[818,824]},{"content":"Parameters","pos":[975,985]},{"content":"Pointer to the stream from which the interface pointer is to be unmarshaled.","pos":[999,1075]},{"content":"Reference to the identifier of the interface to be unmarshaled.","pos":[1092,1155]},{"content":"When this operation completes, the address of a pointer variable that receives the interface pointer requested in <ph id=\"ph1\">`riid`</ph>.","pos":[1171,1292],"source":" When this operation completes, the address of a pointer variable that receives the interface pointer requested in `riid`."},{"content":"If this operation is successful, *<ph id=\"ph1\">`ppv`</ph> contains the requested interface pointer of the interface to be unmarshaled.","pos":[1293,1409],"source":" If this operation is successful, *`ppv` contains the requested interface pointer of the interface to be unmarshaled."},{"content":"Return Value","pos":[1418,1430]},{"content":"S_OK if successful; otherwise, E_NOINTERFACE or E_FAIL.","pos":[1434,1489]},{"content":"Requirements","pos":[1498,1510]},{"pos":[1514,1531],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> ftm.h","source":"**Header:** ftm.h"},{"pos":[1538,1567],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> Microsoft::WRL","source":"**Namespace:** Microsoft::WRL"},{"content":"See Also","pos":[1576,1584]},{"content":"FtmBase Class","pos":[1589,1602]}],"content":"---\ntitle: \"FtmBase::UnmarshalInterface Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ftm/Microsoft::WRL::FtmBase::UnmarshalInterface\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"UnmarshalInterface method\"\nms.assetid: 6850a621-e9a6-4001-bc1e-bd5d1b121adc\ncaps.latest.revision: 3\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# FtmBase::UnmarshalInterface Method\nInitializes a newly created proxy and returns an interface pointer to that proxy.  \n  \n## Syntax  \n  \n```  \nSTDMETHODIMP UnmarshalInterface(  \n   __in IStream *pStm,  \n   __in REFIID riid,  \n   __deref_out void **ppv  \n) override;  \n```  \n  \n#### Parameters  \n `pStm`  \n Pointer to the stream from which the interface pointer is to be unmarshaled.  \n  \n `riid`  \n Reference to the identifier of the interface to be unmarshaled.  \n  \n `ppv`  \n When this operation completes, the address of a pointer variable that receives the interface pointer requested in `riid`. If this operation is successful, *`ppv` contains the requested interface pointer of the interface to be unmarshaled.  \n  \n## Return Value  \n S_OK if successful; otherwise, E_NOINTERFACE or E_FAIL.  \n  \n## Requirements  \n **Header:** ftm.h  \n  \n **Namespace:** Microsoft::WRL  \n  \n## See Also  \n [FtmBase Class](../windows/ftmbase-class.md)"}