{"nodes":[{"pos":[12,45],"content":"_bstr_t::_bstr_t | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_bstr_t::_bstr_t | Microsoft Docs","pos":[0,33]}]},{"content":"_bstr_t::_bstr_t","pos":[655,671]},{"content":"Microsoft Specific","pos":[674,692]},{"pos":[701,731],"content":"Constructs a <ph id=\"ph1\">`_bstr_t`</ph> object.","source":"Constructs a `_bstr_t` object."},{"content":"Syntax","pos":[740,746]},{"content":"Parameters","pos":[1015,1025]},{"content":"A <ph id=\"ph1\">`_bstr_t`</ph> object to be copied.","pos":[1037,1069],"source":" A `_bstr_t` object to be copied."},{"content":"A multibyte string.","pos":[1084,1103]},{"content":"A Unicode string","pos":[1118,1134]},{"content":"A <bpt id=\"p1\">[</bpt>_variant_t<ept id=\"p1\">](../cpp/variant-t-class.md)</ept> object.","pos":[1150,1199],"source":" A [_variant_t](../cpp/variant-t-class.md) object."},{"content":"An existing <ph id=\"ph1\">`BSTR`</ph> object.","pos":[1216,1242],"source":" An existing `BSTR` object."},{"content":"If <ph id=\"ph1\">`false`</ph>, the <ph id=\"ph2\">`bstr`</ph> argument is attached to the new object without making a copy by calling <ph id=\"ph3\">`SysAllocString`</ph>.","pos":[1260,1372],"source":" If `false`, the `bstr` argument is attached to the new object without making a copy by calling `SysAllocString`."},{"content":"Remarks","pos":[1381,1388]},{"pos":[1392,1449],"content":"The following table describes the <ph id=\"ph1\">`_bstr_t`</ph> constructors.","source":"The following table describes the `_bstr_t` constructors."},{"content":"Constructor","pos":[1456,1467]},{"content":"Description","pos":[1468,1479]},{"pos":[1537,1614],"content":"Constructs a default <ph id=\"ph1\">`_bstr_t`</ph> object that encapsulates a null <ph id=\"ph2\">`BSTR`</ph> object.","source":"Constructs a default `_bstr_t` object that encapsulates a null `BSTR` object."},{"content":"Constructs a <ph id=\"ph1\">`_bstr_t`</ph> object as a copy of another.","pos":[1650,1701],"source":"Constructs a `_bstr_t` object as a copy of another."},{"content":"This is a <bpt id=\"p1\">*</bpt>shallow<ept id=\"p1\">*</ept> copy, which increments the reference count of the encapsulated <ph id=\"ph1\">`BSTR`</ph> object instead of creating a new one.","pos":[1714,1841],"source":" This is a *shallow* copy, which increments the reference count of the encapsulated `BSTR` object instead of creating a new one."},{"content":"Constructs a <ph id=\"ph1\">`_bstr_t`</ph> object by calling <ph id=\"ph2\">`SysAllocString`</ph> to create a new <ph id=\"ph3\">`BSTR`</ph> object and then encapsulates it.","pos":[1874,1987],"source":"Constructs a `_bstr_t` object by calling `SysAllocString` to create a new `BSTR` object and then encapsulates it."},{"content":"This constructor first performs a multibyte to Unicode conversion.","pos":[2000,2066]},{"pos":[2102,2215],"content":"Constructs a <ph id=\"ph1\">`_bstr_t`</ph> object by calling <ph id=\"ph2\">`SysAllocString`</ph> to create a new <ph id=\"ph3\">`BSTR`</ph> object and then encapsulates it.","source":"Constructs a `_bstr_t` object by calling `SysAllocString` to create a new `BSTR` object and then encapsulates it."},{"pos":[2255,2385],"content":"Constructs a <ph id=\"ph1\">`_bstr_t`</ph> object from a <ph id=\"ph2\">`_variant_t`</ph> object by first retrieving a <ph id=\"ph3\">`BSTR`</ph> object from the encapsulated VARIANT object.","source":"Constructs a `_bstr_t` object from a `_variant_t` object by first retrieving a `BSTR` object from the encapsulated VARIANT object."},{"content":"Constructs a <ph id=\"ph1\">`_bstr_t`</ph> object from an existing <ph id=\"ph2\">`BSTR`</ph> (as opposed to a <ph id=\"ph3\">`wchar_t*`</ph> string).","pos":[2437,2527],"source":"Constructs a `_bstr_t` object from an existing `BSTR` (as opposed to a `wchar_t*` string)."},{"content":"If <ph id=\"ph1\">`fCopy`</ph> is false, the supplied <ph id=\"ph2\">`BSTR`</ph> is attached to the new object without making a new copy with <ph id=\"ph3\">`SysAllocString`</ph>.","pos":[2528,2647],"source":" If `fCopy` is false, the supplied `BSTR` is attached to the new object without making a new copy with `SysAllocString`."},{"content":"This constructor is used by wrapper functions in the type library headers to encapsulate and take ownership of a <ph id=\"ph1\">`BSTR`</ph> that is returned by an interface method.","pos":[2660,2820],"source":" This constructor is used by wrapper functions in the type library headers to encapsulate and take ownership of a `BSTR` that is returned by an interface method."},{"content":"END Microsoft Specific","pos":[2830,2852]},{"content":"See Also","pos":[2863,2871]},{"content":"_bstr_t Class","pos":[2876,2889]},{"content":"_variant_t Class","pos":[2920,2936]}],"content":"---\ntitle: \"_bstr_t::_bstr_t | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"_bstr_t::_bstr_t\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"BSTR object\"\n  - \"_bstr_t method\"\n  - \"_bstr_t class\"\nms.assetid: 116d994e-5a72-4351-afbe-866c80b4c165\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _bstr_t::_bstr_t\n**Microsoft Specific**  \n  \n Constructs a `_bstr_t` object.  \n  \n## Syntax  \n  \n```  \n_bstr_t( ) throw( );   \n_bstr_t(  \n   const _bstr_t& s1   \n) throw( );  \n_bstr_t(  \n   const char* s2   \n);  \n_bstr_t(  \n   const wchar_t* s3   \n);  \n_bstr_t(  \n   const _variant_t& var   \n);  \n_bstr_t(  \n   BSTR bstr,  \n   bool fCopy   \n);  \n```  \n  \n#### Parameters  \n `s1`  \n A `_bstr_t` object to be copied.  \n  \n `s2`  \n A multibyte string.  \n  \n `s3`  \n A Unicode string  \n  \n `var`  \n A [_variant_t](../cpp/variant-t-class.md) object.  \n  \n `bstr`  \n An existing `BSTR` object.  \n  \n `fCopy`  \n If `false`, the `bstr` argument is attached to the new object without making a copy by calling `SysAllocString`.  \n  \n## Remarks  \n The following table describes the `_bstr_t` constructors.  \n  \n|Constructor|Description|  \n|-----------------|-----------------|  \n|`_bstr_t( )`|Constructs a default `_bstr_t` object that encapsulates a null `BSTR` object.|  \n|`_bstr_t( _bstr_t&`  `s1`  `)`|Constructs a `_bstr_t` object as a copy of another.<br /><br /> This is a *shallow* copy, which increments the reference count of the encapsulated `BSTR` object instead of creating a new one.|  \n|`_bstr_t( char*`  `s2`  `)`|Constructs a `_bstr_t` object by calling `SysAllocString` to create a new `BSTR` object and then encapsulates it.<br /><br /> This constructor first performs a multibyte to Unicode conversion.|  \n|`_bstr_t( wchar_t*`  `s3`  `)`|Constructs a `_bstr_t` object by calling `SysAllocString` to create a new `BSTR` object and then encapsulates it.|  \n|`_bstr_t( _variant_t&`  `var`  `)`|Constructs a `_bstr_t` object from a `_variant_t` object by first retrieving a `BSTR` object from the encapsulated VARIANT object.|  \n|`_bstr_t( BSTR`  `bstr` `, bool`  `fCopy`  `)`|Constructs a `_bstr_t` object from an existing `BSTR` (as opposed to a `wchar_t*` string). If `fCopy` is false, the supplied `BSTR` is attached to the new object without making a new copy with `SysAllocString`.<br /><br /> This constructor is used by wrapper functions in the type library headers to encapsulate and take ownership of a `BSTR` that is returned by an interface method.|  \n  \n **END Microsoft Specific**  \n  \n## See Also  \n [_bstr_t Class](../cpp/bstr-t-class.md)   \n [_variant_t Class](../cpp/variant-t-class.md)"}