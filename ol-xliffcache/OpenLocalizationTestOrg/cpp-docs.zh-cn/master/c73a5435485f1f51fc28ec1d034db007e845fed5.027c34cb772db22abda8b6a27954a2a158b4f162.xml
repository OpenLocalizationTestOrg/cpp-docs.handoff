{"nodes":[{"pos":[12,55],"content":"hash_set::rehash (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"hash_set::rehash (STL-CLR) | Microsoft Docs","pos":[0,43]}]},{"content":"hash_set::rehash (STL/CLR)","pos":[635,661]},{"content":"Rebuilds the hash table.","pos":[662,686]},{"content":"Syntax","pos":[695,701]},{"content":"Remarks","pos":[742,749]},{"content":"The member function rebuilds the hash table, ensuring that <bpt id=\"p1\">[</bpt>hash_set::load_factor (STL/CLR)<ept id=\"p1\">](../dotnet/hash-set-load-factor-stl-clr.md)</ept><ph id=\"ph1\">`() &lt;=`</ph> <bpt id=\"p2\">[</bpt>hash_set::max_load_factor (STL/CLR)<ept id=\"p2\">](../dotnet/hash-set-max-load-factor-stl-clr.md)</ept>.","pos":[753,981],"source":"The member function rebuilds the hash table, ensuring that [hash_set::load_factor (STL/CLR)](../dotnet/hash-set-load-factor-stl-clr.md)`() <=` [hash_set::max_load_factor (STL/CLR)](../dotnet/hash-set-max-load-factor-stl-clr.md)."},{"content":"Otherwise, the hash table increases in size only as needed after an insertion.","pos":[982,1060]},{"content":"(It never automatically decreases in size.) You use it to adjust the size of the hash table.","pos":[1061,1153]},{"content":"Example","pos":[1162,1169]},{"content":"Requirements","pos":[2895,2907]},{"pos":[2911,2941],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/hash_set&gt;","source":"**Header:** \\<cliext/hash_set>"},{"pos":[2948,2969],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2978,2986]},{"content":"hash_set (STL/CLR)","pos":[2991,3009]},{"content":"hash_set::bucket_count (STL/CLR)","pos":[3047,3079]},{"content":"hash_set::load_factor (STL/CLR)","pos":[3130,3161]},{"content":"hash_set::max_load_factor (STL/CLR)","pos":[3211,3246]}],"content":"---\ntitle: \"hash_set::rehash (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::hash_set::rehash\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"rehash member [STL/CLR]\"\nms.assetid: f62bae81-4321-44e1-97d0-77174a13e0de\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# hash_set::rehash (STL/CLR)\nRebuilds the hash table.  \n  \n## Syntax  \n  \n```  \nvoid rehash();  \n```  \n  \n## Remarks  \n The member function rebuilds the hash table, ensuring that [hash_set::load_factor (STL/CLR)](../dotnet/hash-set-load-factor-stl-clr.md)`() <=` [hash_set::max_load_factor (STL/CLR)](../dotnet/hash-set-max-load-factor-stl-clr.md). Otherwise, the hash table increases in size only as needed after an insertion. (It never automatically decreases in size.) You use it to adjust the size of the hash table.  \n  \n## Example  \n  \n```  \n// cliext_hash_set_rehash.cpp   \n// compile with: /clr   \n#include <cliext/hash_set>   \n  \ntypedef cliext::hash_set<wchar_t> Myhash_set;   \nint main()   \n    {   \n    Myhash_set c1;   \n    c1.insert(L'a');   \n    c1.insert(L'b');   \n    c1.insert(L'c');   \n  \n// display initial contents \" a b c\"   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// inspect current parameters   \n    System::Console::WriteLine(\"bucket_count() = {0}\", c1.bucket_count());   \n    System::Console::WriteLine(\"load_factor() = {0}\", c1.load_factor());   \n    System::Console::WriteLine(\"max_load_factor() = {0}\",   \n        c1.max_load_factor());   \n    System::Console::WriteLine();   \n  \n// change max_load_factor and redisplay   \n    c1.max_load_factor(0.25f);   \n    System::Console::WriteLine(\"bucket_count() = {0}\", c1.bucket_count());   \n    System::Console::WriteLine(\"load_factor() = {0}\", c1.load_factor());   \n    System::Console::WriteLine(\"max_load_factor() = {0}\",   \n        c1.max_load_factor());   \n    System::Console::WriteLine();   \n  \n// rehash and redisplay   \n    c1.rehash(100);   \n    System::Console::WriteLine(\"bucket_count() = {0}\", c1.bucket_count());   \n    System::Console::WriteLine(\"load_factor() = {0}\", c1.load_factor());   \n    System::Console::WriteLine(\"max_load_factor() = {0}\",   \n        c1.max_load_factor());   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n a b c  \nbucket_count() = 16  \nload_factor() = 0.1875  \nmax_load_factor() = 4  \n  \nbucket_count() = 16  \nload_factor() = 0.1875  \nmax_load_factor() = 0.25  \n  \nbucket_count() = 128  \nload_factor() = 0.0234375  \nmax_load_factor() = 0.25  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/hash_set>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [hash_set (STL/CLR)](../dotnet/hash-set-stl-clr.md)   \n [hash_set::bucket_count (STL/CLR)](../dotnet/hash-set-bucket-count-stl-clr.md)   \n [hash_set::load_factor (STL/CLR)](../dotnet/hash-set-load-factor-stl-clr.md)   \n [hash_set::max_load_factor (STL/CLR)](../dotnet/hash-set-max-load-factor-stl-clr.md)"}