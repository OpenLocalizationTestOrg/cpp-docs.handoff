{"nodes":[{"pos":[12,59],"content":"scoped_allocator_adaptor Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"scoped_allocator_adaptor Class | Microsoft Docs","pos":[0,47]}]},{"content":"scoped_allocator_adaptor Class","pos":[768,798]},{"content":"Represents a nest of allocators.","pos":[799,831]},{"content":"Syntax","pos":[840,846]},{"content":"Remarks","pos":[948,955]},{"content":"The template class encapsulates a nest of one or more allocators.","pos":[959,1024]},{"content":"Each such class has an outermost allocator of type <ph id=\"ph1\">`outer_allocator_type`</ph>, a synonym for <ph id=\"ph2\">`Outer`</ph>, which is a public base of the <ph id=\"ph3\">`scoped_allocator_adaptor`</ph> object.","pos":[1025,1187],"source":" Each such class has an outermost allocator of type `outer_allocator_type`, a synonym for `Outer`, which is a public base of the `scoped_allocator_adaptor` object."},{"content":"is used to allocate memory to be used by a container.","pos":[1196,1249]},{"content":"You can obtain a reference to this allocator base object by calling <ph id=\"ph1\">`outer_allocator`</ph>.","pos":[1250,1336],"source":" You can obtain a reference to this allocator base object by calling `outer_allocator`."},{"content":"The remainder of the nest has type <ph id=\"ph1\">`inner_allocator_type`</ph>.","pos":[1343,1401],"source":"The remainder of the nest has type `inner_allocator_type`."},{"content":"An inner allocator is used to allocate memory for elements within a container.","pos":[1402,1480]},{"content":"You can obtain a reference to the stored object of this type by calling <ph id=\"ph1\">`inner_allocator`</ph>.","pos":[1481,1571],"source":" You can obtain a reference to the stored object of this type by calling `inner_allocator`."},{"content":"If <ph id=\"ph1\">`Inner...`</ph> is not empty, <ph id=\"ph2\">`inner_allocator_type`</ph> has type <ph id=\"ph3\">`scoped_allocator_adaptor&lt;Inner...&gt;`</ph>, and <ph id=\"ph4\">`inner_allocator`</ph> designates a member object.","pos":[1572,1719],"source":" If `Inner...` is not empty, `inner_allocator_type` has type `scoped_allocator_adaptor<Inner...>`, and `inner_allocator` designates a member object."},{"content":"Otherwise, <ph id=\"ph1\">`inner_allocator_type`</ph> has type <ph id=\"ph2\">`scoped_allocator_adaptor&lt;Outer&gt;`</ph>, and <ph id=\"ph3\">`inner_allocator`</ph> designates the entire object.","pos":[1720,1849],"source":" Otherwise, `inner_allocator_type` has type `scoped_allocator_adaptor<Outer>`, and `inner_allocator` designates the entire object."},{"content":"The nest behaves as if it has arbitrary depth, replicating its innermost encapsulated allocator as needed.","pos":[1856,1962]},{"content":"Several concepts that are not a part of the visible interface aid in describing the behavior of this template class.","pos":[1969,2085]},{"content":"An <bpt id=\"p1\">*</bpt>outermost allocator<ept id=\"p1\">*</ept> mediates all calls to the construct and destroy methods.","pos":[2086,2167],"source":" An *outermost allocator* mediates all calls to the construct and destroy methods."},{"content":"It is effectively defined by the recursive function <ph id=\"ph1\">`OUTERMOST(X)`</ph>, where <ph id=\"ph2\">`OUTERMOST(X)`</ph> is one of the following.","pos":[2168,2281],"source":" It is effectively defined by the recursive function `OUTERMOST(X)`, where `OUTERMOST(X)` is one of the following."},{"pos":[2291,2388],"content":"If <ph id=\"ph1\">`X.outer_allocator()`</ph> is well formed, then <ph id=\"ph2\">`OUTERMOST(X)`</ph> is <ph id=\"ph3\">`OUTERMOST(X.outer_allocator())`</ph>.","source":"If `X.outer_allocator()` is well formed, then `OUTERMOST(X)` is `OUTERMOST(X.outer_allocator())`."},{"pos":[2398,2431],"content":"Otherwise, <ph id=\"ph1\">`OUTERMOST(X)`</ph> is <ph id=\"ph2\">`X`</ph>.","source":"Otherwise, `OUTERMOST(X)` is `X`."},{"content":"Three types are defined for the sake of exposition:","pos":[2438,2489]},{"content":"Type","pos":[2496,2500]},{"content":"Description","pos":[2501,2512]},{"pos":[2562,2593],"content":"The type of <ph id=\"ph1\">`OUTERMOST(*this)`</ph>.","source":"The type of `OUTERMOST(*this)`."},{"content":"Constructors","pos":[2702,2714]},{"content":"Name","pos":[2721,2725]},{"content":"Description","pos":[2726,2737]},{"content":"scoped_allocator_adaptor::scoped_allocator_adaptor Constructor","pos":[2776,2838]},{"pos":[2905,2952],"content":"Constructs a <ph id=\"ph1\">`scoped_allocator_adaptor`</ph> object.","source":"Constructs a `scoped_allocator_adaptor` object."},{"content":"Typedefs","pos":[2963,2971]},{"content":"Name","pos":[2978,2982]},{"content":"Description","pos":[2983,2994]},{"pos":[3048,3141],"content":"This type is a synonym for the <ph id=\"ph1\">`const_pointer`</ph> that is associated with the allocator <ph id=\"ph2\">`Outer`</ph>.","source":"This type is a synonym for the `const_pointer` that is associated with the allocator `Outer`."},{"pos":[3167,3265],"content":"This type is a synonym for the <ph id=\"ph1\">`const_void_pointer`</ph> that is associated with the allocator <ph id=\"ph2\">`Outer`</ph>.","source":"This type is a synonym for the `const_void_pointer` that is associated with the allocator `Outer`."},{"pos":[3288,3383],"content":"This type is a synonym for the <ph id=\"ph1\">`difference_type`</ph> that is associated with the allocator <ph id=\"ph2\">`Outer`</ph>.","source":"This type is a synonym for the `difference_type` that is associated with the allocator `Outer`."},{"pos":[3411,3506],"content":"This type is a synonym for the type of the nested adaptor <ph id=\"ph1\">`scoped_allocator_adaptor&lt;Inner...&gt;`</ph>.","source":"This type is a synonym for the type of the nested adaptor `scoped_allocator_adaptor<Inner...>`."},{"pos":[3534,3600],"content":"This type is a synonym for the type of the base allocator <ph id=\"ph1\">`Outer`</ph>.","source":"This type is a synonym for the type of the base allocator `Outer`."},{"pos":[3615,3694],"content":"This type is a synonym for the <ph id=\"ph1\">`pointer`</ph> associated with the allocator <ph id=\"ph2\">`Outer`</ph>.","source":"This type is a synonym for the `pointer` associated with the allocator `Outer`."},{"pos":[3740,3911],"content":"The type holds true only if <ph id=\"ph1\">`Outer_traits::propagate_on_container_copy_assignment`</ph> holds true or <ph id=\"ph2\">`inner_allocator_type::propagate_on_container_copy_assignment`</ph> holds true.","source":"The type holds true only if `Outer_traits::propagate_on_container_copy_assignment` holds true or `inner_allocator_type::propagate_on_container_copy_assignment` holds true."},{"pos":[3957,4128],"content":"The type holds true only if <ph id=\"ph1\">`Outer_traits::propagate_on_container_move_assignment`</ph> holds true or <ph id=\"ph2\">`inner_allocator_type::propagate_on_container_move_assignment`</ph> holds true.","source":"The type holds true only if `Outer_traits::propagate_on_container_move_assignment` holds true or `inner_allocator_type::propagate_on_container_move_assignment` holds true."},{"pos":[4163,4312],"content":"The type holds true only if <ph id=\"ph1\">`Outer_traits::propagate_on_container_swap`</ph> holds true or <ph id=\"ph2\">`inner_allocator_type::propagate_on_container_swap`</ph> holds true.","source":"The type holds true only if `Outer_traits::propagate_on_container_swap` holds true or `inner_allocator_type::propagate_on_container_swap` holds true."},{"pos":[4329,4410],"content":"This type is a synonym for the <ph id=\"ph1\">`size_type`</ph> associated with the allocator <ph id=\"ph2\">`Outer`</ph>.","source":"This type is a synonym for the `size_type` associated with the allocator `Outer`."},{"pos":[4428,4510],"content":"This type is a synonym for the <ph id=\"ph1\">`value_type`</ph> associated with the allocator <ph id=\"ph2\">`Outer`</ph>.","source":"This type is a synonym for the `value_type` associated with the allocator `Outer`."},{"pos":[4530,4614],"content":"This type is a synonym for the <ph id=\"ph1\">`void_pointer`</ph> associated with the allocator <ph id=\"ph2\">`Outer`</ph>.","source":"This type is a synonym for the `void_pointer` associated with the allocator `Outer`."},{"content":"Structs","pos":[4625,4632]},{"content":"Name","pos":[4639,4643]},{"content":"Description","pos":[4644,4655]},{"content":"scoped_allocator_adaptor::rebind Struct","pos":[4694,4733]},{"pos":[4777,4887],"content":"Defines the type <ph id=\"ph1\">`Outer::rebind\\&lt;Other&gt;::other`</ph> as a synonym for <ph id=\"ph2\">`scoped_allocator_adaptor\\&lt;Other, Inner...&gt;`</ph>.","source":"Defines the type `Outer::rebind\\<Other>::other` as a synonym for `scoped_allocator_adaptor\\<Other, Inner...>`."},{"content":"Methods","pos":[4898,4905]},{"content":"Name","pos":[4912,4916]},{"content":"Description","pos":[4917,4928]},{"content":"scoped_allocator_adaptor::allocate Method","pos":[4967,5008]},{"pos":[5054,5102],"content":"Allocates memory by using the <ph id=\"ph1\">`Outer`</ph> allocator.","source":"Allocates memory by using the `Outer` allocator."},{"content":"scoped_allocator_adaptor::construct Method","pos":[5108,5150]},{"content":"Constructs an object.","pos":[5197,5218]},{"content":"scoped_allocator_adaptor::deallocate Method","pos":[5224,5267]},{"content":"Deallocates objects by using the outer allocator.","pos":[5315,5364]},{"content":"scoped_allocator_adaptor::destroy Method","pos":[5370,5410]},{"content":"Destroys a specified object.","pos":[5455,5483]},{"content":"scoped_allocator_adaptor::inner_allocator Method","pos":[5489,5537]},{"pos":[5590,5664],"content":"Retrieves a reference to the stored object of type <ph id=\"ph1\">`inner_allocator_type`</ph>.","source":"Retrieves a reference to the stored object of type `inner_allocator_type`."},{"content":"scoped_allocator_adaptor::max_size Method","pos":[5670,5711]},{"content":"Determines the maximum number of objects that can be allocated by the outer allocator.","pos":[5757,5843]},{"content":"scoped_allocator_adaptor::outer_allocator Method","pos":[5849,5897]},{"pos":[5950,6024],"content":"Retrieves a reference to the stored object of type <ph id=\"ph1\">`outer_allocator_type`</ph>.","source":"Retrieves a reference to the stored object of type `outer_allocator_type`."},{"content":"scoped_allocator_adaptor::select_on_container_copy_construction Method","pos":[6030,6100]},{"pos":[6175,6353],"content":"Creates a new <ph id=\"ph1\">`scoped_allocator_adaptor`</ph> object with each stored allocator object initialized by calling <ph id=\"ph2\">`select_on_container_copy_construction`</ph> for each corresponding allocator.","source":"Creates a new `scoped_allocator_adaptor` object with each stored allocator object initialized by calling `select_on_container_copy_construction` for each corresponding allocator."},{"content":"Requirements","pos":[6363,6375]},{"pos":[6379,6409],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> &lt;scoped_allocator&gt;","source":"**Header:** <scoped_allocator>"},{"pos":[6416,6434],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[6502,6543],"content":"scoped_allocator_adaptor::allocate Method"},{"pos":[6547,6595],"content":"Allocates memory by using the <ph id=\"ph1\">`Outer`</ph> allocator.","source":"Allocates memory by using the `Outer` allocator."},{"content":"Parameters","pos":[6717,6727]},{"content":"The number of elements for which sufficient storage is to be allocated.","pos":[6742,6813]},{"content":"A pointer that might assist the allocator object by locating the address of an object allocated prior to the request.","pos":[6830,6947]},{"content":"Return Value","pos":[6957,6969]},{"content":"The first member function returns <ph id=\"ph1\">`Outer_traits::allocate(outer_allocator(), count)`</ph>.","pos":[6973,7058],"source":"The first member function returns `Outer_traits::allocate(outer_allocator(), count)`."},{"content":"The second member function returns <ph id=\"ph1\">`Outer_traits::allocate(outer_allocator(), count, hint)`</ph>.","pos":[7059,7151],"source":" The second member function returns `Outer_traits::allocate(outer_allocator(), count, hint)`."},{"pos":[7220,7262],"content":"scoped_allocator_adaptor::construct Method"},{"content":"Constructs an object.","pos":[7266,7287]},{"content":"Parameters","pos":[8043,8053]},{"content":"A pointer to the memory location where the object is to be constructed.","pos":[8066,8137]},{"content":"A list of arguments.","pos":[8154,8174]},{"content":"An object of the first type in a pair.","pos":[8192,8230]},{"content":"An object of the second type in a pair.","pos":[8249,8288]},{"content":"An existing object to be moved or copied.","pos":[8306,8347]},{"content":"Remarks","pos":[8357,8364]},{"pos":[8368,8532],"content":"The first method constructs the object at <ph id=\"ph1\">`ptr`</ph> by calling <ph id=\"ph2\">`Outermost_traits::construct(OUTERMOST(*this), ptr, xargs...)`</ph>, where <ph id=\"ph3\">`xargs...`</ph> is one of the following.","source":"The first method constructs the object at `ptr` by calling `Outermost_traits::construct(OUTERMOST(*this), ptr, xargs...)`, where `xargs...` is one of the following."},{"pos":[8542,8630],"content":"If <ph id=\"ph1\">`uses_allocator&lt;Ty, inner_allocator_type&gt;`</ph> holds false, then <ph id=\"ph2\">`xargs...`</ph> is <ph id=\"ph3\">`args...`</ph>.","source":"If `uses_allocator<Ty, inner_allocator_type>` holds false, then `xargs...` is `args...`."},{"pos":[8640,8848],"content":"If <ph id=\"ph1\">`uses_allocator&lt;Ty, inner_allocator_type&gt;`</ph> holds true, and <ph id=\"ph2\">`is_constructible&lt;Ty, allocator_arg_t, inner_allocator_type, args...&gt;`</ph> holds true, then <ph id=\"ph3\">`xargs...`</ph> is <ph id=\"ph4\">`allocator_arg, inner_allocator(), args...`</ph>.","source":"If `uses_allocator<Ty, inner_allocator_type>` holds true, and `is_constructible<Ty, allocator_arg_t, inner_allocator_type, args...>` holds true, then `xargs...` is `allocator_arg, inner_allocator(), args...`."},{"pos":[8858,9031],"content":"If <ph id=\"ph1\">`uses_allocator&lt;Ty, inner_allocator_type&gt;`</ph> holds true, and <ph id=\"ph2\">`is_constructible&lt;Ty, args..., inner_allocator()&gt;`</ph> holds true, then <ph id=\"ph3\">`xargs...`</ph> is <ph id=\"ph4\">`args..., inner_allocator()`</ph>.","source":"If `uses_allocator<Ty, inner_allocator_type>` holds true, and `is_constructible<Ty, args..., inner_allocator()>` holds true, then `xargs...` is `args..., inner_allocator()`."},{"pos":[9038,9376],"content":"The second method constructs the pair object at <ph id=\"ph1\">`ptr`</ph> by calling <ph id=\"ph2\">`Outermost_traits::construct(OUTERMOST(*this), &amp;ptr-&gt;first, xargs...)`</ph>, where <ph id=\"ph3\">`xargs...`</ph> is <ph id=\"ph4\">`first...`</ph> modified as in the above list, and <ph id=\"ph5\">`Outermost_traits::construct(OUTERMOST(*this), &amp;ptr-&gt;second, xargs...)`</ph>, where <ph id=\"ph6\">`xargs...`</ph> is <ph id=\"ph7\">`second...`</ph> modified as in the above list.","source":"The second method constructs the pair object at `ptr` by calling `Outermost_traits::construct(OUTERMOST(*this), &ptr->first, xargs...)`, where `xargs...` is `first...` modified as in the above list, and `Outermost_traits::construct(OUTERMOST(*this), &ptr->second, xargs...)`, where `xargs...` is `second...` modified as in the above list."},{"pos":[9383,9482],"content":"The third method behaves the same as <ph id=\"ph1\">`this-&gt;construct(ptr, piecewise_construct, tuple&lt;&gt;, tuple&lt;&gt;)`</ph>.","source":"The third method behaves the same as `this->construct(ptr, piecewise_construct, tuple<>, tuple<>)`."},{"pos":[9489,9658],"content":"The fourth method behaves the same as <ph id=\"ph1\">`this-&gt;construct(ptr, piecewise_construct, forward_as_tuple(std::forward&lt;Uy1&gt;(first), forward_as_tuple(std::forward&lt;Uy2&gt;(second))`</ph>.","source":"The fourth method behaves the same as `this->construct(ptr, piecewise_construct, forward_as_tuple(std::forward<Uy1>(first), forward_as_tuple(std::forward<Uy2>(second))`."},{"pos":[9665,9809],"content":"The fifth method behaves the same as <ph id=\"ph1\">`this-&gt;construct(ptr, piecewise_construct, forward_as_tuple(right.first), forward_as_tuple(right.second))`</ph>.","source":"The fifth method behaves the same as `this->construct(ptr, piecewise_construct, forward_as_tuple(right.first), forward_as_tuple(right.second))`."},{"pos":[9816,9996],"content":"The sixth method behaves the same as <ph id=\"ph1\">`this-&gt;construct(ptr, piecewise_construct, forward_as_tuple(std::forward&lt;Uy1&gt;(right.first), forward_as_tuple(std::forward&lt;Uy2&gt;(right.second))`</ph>.","source":"The sixth method behaves the same as `this->construct(ptr, piecewise_construct, forward_as_tuple(std::forward<Uy1>(right.first), forward_as_tuple(std::forward<Uy2>(right.second))`."},{"pos":[10066,10109],"content":"scoped_allocator_adaptor::deallocate Method"},{"content":"Deallocates objects by using the outer allocator.","pos":[10113,10162]},{"content":"Parameters","pos":[10237,10247]},{"content":"A pointer to the starting location of the objects to be deallocated.","pos":[10260,10328]},{"content":"The number of objects to deallocate.","pos":[10346,10382]},{"pos":[10449,10489],"content":"scoped_allocator_adaptor::destroy Method"},{"content":"Destroys a specified object.","pos":[10493,10521]},{"content":"Parameters","pos":[10595,10605]},{"content":"A pointer to the object to be destroyed.","pos":[10618,10658]},{"content":"Return Value","pos":[10668,10680]},{"pos":[10809,10857],"content":"scoped_allocator_adaptor::inner_allocator Method"},{"pos":[10861,10935],"content":"Retrieves a reference to the stored object of type <ph id=\"ph1\">`inner_allocator_type`</ph>.","source":"Retrieves a reference to the stored object of type `inner_allocator_type`."},{"content":"Return Value","pos":[11079,11091]},{"pos":[11095,11159],"content":"A reference to the stored object of type <ph id=\"ph1\">`inner_allocator_type`</ph>.","source":"A reference to the stored object of type `inner_allocator_type`."},{"pos":[11227,11268],"content":"scoped_allocator_adaptor::max_size Method"},{"content":"Determines the maximum number of objects that can be allocated by the outer allocator.","pos":[11272,11358]},{"content":"Return Value","pos":[11408,11420]},{"pos":[11542,11590],"content":"scoped_allocator_adaptor::outer_allocator Method"},{"pos":[11594,11668],"content":"Retrieves a reference to the stored object of type <ph id=\"ph1\">`outer_allocator_type`</ph>.","source":"Retrieves a reference to the stored object of type `outer_allocator_type`."},{"content":"Return Value","pos":[11812,11824]},{"pos":[11828,11892],"content":"A reference to the stored object of type <ph id=\"ph1\">`outer_allocator_type`</ph>.","source":"A reference to the stored object of type `outer_allocator_type`."},{"pos":[11958,11997],"content":"scoped_allocator_adaptor::rebind Struct"},{"pos":[12001,12111],"content":"Defines the type <ph id=\"ph1\">`Outer::rebind\\&lt;Other&gt;::other`</ph> as a synonym for <ph id=\"ph2\">`scoped_allocator_adaptor\\&lt;Other, Inner...&gt;`</ph>.","source":"Defines the type `Outer::rebind\\<Other>::other` as a synonym for `scoped_allocator_adaptor\\<Other, Inner...>`."},{"content":"struct rebind{","pos":[12117,12131]},{"content":"typedef Other_traits::rebind<ph id=\"ph1\">\\&lt;</ph>Other&gt;","pos":[12137,12173],"source":"typedef Other_traits::rebind\\<Other>"},{"content":"Other_alloc;","pos":[12179,12191]},{"content":"typedef scoped_allocator_adaptor<ph id=\"ph1\">\\&lt;</ph>Other_alloc, Inner...&gt; other;","pos":[12197,12260],"source":"typedef scoped_allocator_adaptor\\<Other_alloc, Inner...> other;"},{"content":"};","pos":[12266,12268]},{"pos":[12357,12419],"content":"scoped_allocator_adaptor::scoped_allocator_adaptor Constructor"},{"pos":[12423,12470],"content":"Constructs a <ph id=\"ph1\">`scoped_allocator_adaptor`</ph> object.","source":"Constructs a `scoped_allocator_adaptor` object."},{"content":"Parameters","pos":[12946,12956]},{"content":"An existing <ph id=\"ph1\">`scoped_allocator_adaptor`</ph>.","pos":[12971,13010],"source":" An existing `scoped_allocator_adaptor`."},{"content":"An existing allocator to be used as the outer allocator.","pos":[13025,13081]},{"content":"A list of allocators to be used as the inner allocators.","pos":[13098,13154]},{"content":"Remarks","pos":[13164,13171]},{"content":"The first constructor default constructs its stored allocator objects.","pos":[13175,13245]},{"content":"Each of the next three constructors constructs its stored allocator objects from the corresponding objects in <ph id=\"ph1\">`right`</ph>.","pos":[13246,13364],"source":" Each of the next three constructors constructs its stored allocator objects from the corresponding objects in `right`."},{"content":"The last constructor constructs its stored allocator objects from the corresponding arguments in the argument list.","pos":[13365,13480]},{"pos":[13577,13647],"content":"scoped_allocator_adaptor::select_on_container_copy_construction Method"},{"pos":[13651,13829],"content":"Creates a new <ph id=\"ph1\">`scoped_allocator_adaptor`</ph> object with each stored allocator object initialized by calling <ph id=\"ph2\">`select_on_container_copy_construction`</ph> for each corresponding allocator.","source":"Creates a new `scoped_allocator_adaptor` object with each stored allocator object initialized by calling `select_on_container_copy_construction` for each corresponding allocator."},{"content":"Return Value","pos":[13923,13935]},{"content":"This method effectively returns <ph id=\"ph1\">`scoped_allocator_adaptor(Outer_traits::select_on_container_copy_construction(*this), inner_allocator().select_on_container_copy_construction())`</ph>.","pos":[13939,14117],"source":"This method effectively returns `scoped_allocator_adaptor(Outer_traits::select_on_container_copy_construction(*this), inner_allocator().select_on_container_copy_construction())`."},{"content":"The result is a new <ph id=\"ph1\">`scoped_allocator_adaptor`</ph> object with each stored allocator object initialized by calling <ph id=\"ph2\">`al.select_on_container_copy_construction()`</ph> for the corresponding allocator <ph id=\"ph3\">`al`</ph>.","pos":[14118,14311],"source":" The result is a new `scoped_allocator_adaptor` object with each stored allocator object initialized by calling `al.select_on_container_copy_construction()` for the corresponding allocator `al`."},{"content":"See Also","pos":[14320,14328]},{"content":"Header Files Reference","pos":[14333,14355]}],"content":"---\ntitle: \"scoped_allocator_adaptor Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.scoped_allocator_adaptor\"\n  - \"scoped_allocator_adaptor\"\n  - \"scoped_allocator/std::scoped_allocator_adaptor\"\n  - \"std::scoped_allocator_adaptor\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"scoped_allocator_adaptor Class\"\nms.assetid: 0d9b06a1-9a4a-4669-9470-8805cae48e89\ncaps.latest.revision: 10\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# scoped_allocator_adaptor Class\nRepresents a nest of allocators.  \n  \n## Syntax  \n  \n```cpp  \ntemplate <class Outer, class... Inner>  \nclass scoped_allocator_adaptor;  \n```  \n  \n## Remarks  \n The template class encapsulates a nest of one or more allocators. Each such class has an outermost allocator of type `outer_allocator_type`, a synonym for `Outer`, which is a public base of the `scoped_allocator_adaptor` object. `Outer` is used to allocate memory to be used by a container. You can obtain a reference to this allocator base object by calling `outer_allocator`.  \n  \n The remainder of the nest has type `inner_allocator_type`. An inner allocator is used to allocate memory for elements within a container. You can obtain a reference to the stored object of this type by calling `inner_allocator`. If `Inner...` is not empty, `inner_allocator_type` has type `scoped_allocator_adaptor<Inner...>`, and `inner_allocator` designates a member object. Otherwise, `inner_allocator_type` has type `scoped_allocator_adaptor<Outer>`, and `inner_allocator` designates the entire object.  \n  \n The nest behaves as if it has arbitrary depth, replicating its innermost encapsulated allocator as needed.  \n  \n Several concepts that are not a part of the visible interface aid in describing the behavior of this template class. An *outermost allocator* mediates all calls to the construct and destroy methods. It is effectively defined by the recursive function `OUTERMOST(X)`, where `OUTERMOST(X)` is one of the following.  \n  \n-   If `X.outer_allocator()` is well formed, then `OUTERMOST(X)` is `OUTERMOST(X.outer_allocator())`.  \n  \n-   Otherwise, `OUTERMOST(X)` is `X`.  \n  \n Three types are defined for the sake of exposition:  \n  \n|Type|Description|  \n|----------|-----------------|  \n|`Outermost`|The type of `OUTERMOST(*this)`.|  \n|`Outermost_traits`|`allocator_traits<Outermost>`|  \n|`Outer_traits`|`allocator_traits<Outer>`|  \n  \n### Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[scoped_allocator_adaptor::scoped_allocator_adaptor Constructor](#scoped_allocator_adaptor__scoped_allocator_adaptor_constructor)|Constructs a `scoped_allocator_adaptor` object.|  \n  \n### Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`const_pointer`|This type is a synonym for the `const_pointer` that is associated with the allocator `Outer`.|  \n|`const_void_pointer`|This type is a synonym for the `const_void_pointer` that is associated with the allocator `Outer`.|  \n|`difference_type`|This type is a synonym for the `difference_type` that is associated with the allocator `Outer`.|  \n|`inner_allocator_type`|This type is a synonym for the type of the nested adaptor `scoped_allocator_adaptor<Inner...>`.|  \n|`outer_allocator_type`|This type is a synonym for the type of the base allocator `Outer`.|  \n|`pointer`|This type is a synonym for the `pointer` associated with the allocator `Outer`.|  \n|`propagate_on_container_copy_assignment`|The type holds true only if `Outer_traits::propagate_on_container_copy_assignment` holds true or `inner_allocator_type::propagate_on_container_copy_assignment` holds true.|  \n|`propagate_on_container_move_assignment`|The type holds true only if `Outer_traits::propagate_on_container_move_assignment` holds true or `inner_allocator_type::propagate_on_container_move_assignment` holds true.|  \n|`propagate_on_container_swap`|The type holds true only if `Outer_traits::propagate_on_container_swap` holds true or `inner_allocator_type::propagate_on_container_swap` holds true.|  \n|`size_type`|This type is a synonym for the `size_type` associated with the allocator `Outer`.|  \n|`value_type`|This type is a synonym for the `value_type` associated with the allocator `Outer`.|  \n|`void_pointer`|This type is a synonym for the `void_pointer` associated with the allocator `Outer`.|  \n  \n### Structs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[scoped_allocator_adaptor::rebind Struct](#scoped_allocator_adaptor__rebind_struct)|Defines the type `Outer::rebind\\<Other>::other` as a synonym for `scoped_allocator_adaptor\\<Other, Inner...>`.|  \n  \n### Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[scoped_allocator_adaptor::allocate Method](#scoped_allocator_adaptor__allocate_method)|Allocates memory by using the `Outer` allocator.|  \n|[scoped_allocator_adaptor::construct Method](#scoped_allocator_adaptor__construct_method)|Constructs an object.|  \n|[scoped_allocator_adaptor::deallocate Method](#scoped_allocator_adaptor__deallocate_method)|Deallocates objects by using the outer allocator.|  \n|[scoped_allocator_adaptor::destroy Method](#scoped_allocator_adaptor__destroy_method)|Destroys a specified object.|  \n|[scoped_allocator_adaptor::inner_allocator Method](#scoped_allocator_adaptor__inner_allocator_method)|Retrieves a reference to the stored object of type `inner_allocator_type`.|  \n|[scoped_allocator_adaptor::max_size Method](#scoped_allocator_adaptor__max_size_method)|Determines the maximum number of objects that can be allocated by the outer allocator.|  \n|[scoped_allocator_adaptor::outer_allocator Method](#scoped_allocator_adaptor__outer_allocator_method)|Retrieves a reference to the stored object of type `outer_allocator_type`.|  \n|[scoped_allocator_adaptor::select_on_container_copy_construction Method](#scoped_allocator_adaptor__select_on_container_copy_construction_method)|Creates a new `scoped_allocator_adaptor` object with each stored allocator object initialized by calling `select_on_container_copy_construction` for each corresponding allocator.|  \n  \n## Requirements  \n **Header:** <scoped_allocator>  \n  \n **Namespace:** std  \n  \n##  <a name=\"scoped_allocator_adaptor__allocate_method\"></a>  scoped_allocator_adaptor::allocate Method  \n Allocates memory by using the `Outer` allocator.  \n  \n```cpp  \npointer allocate(size_type count);pointer allocate(size_type count, const_void_pointer hint);\n```  \n  \n### Parameters  \n `count`  \n The number of elements for which sufficient storage is to be allocated.  \n  \n `hint`  \n A pointer that might assist the allocator object by locating the address of an object allocated prior to the request.  \n  \n### Return Value  \n The first member function returns `Outer_traits::allocate(outer_allocator(), count)`. The second member function returns `Outer_traits::allocate(outer_allocator(), count, hint)`.  \n  \n##  <a name=\"scoped_allocator_adaptor__construct_method\"></a>  scoped_allocator_adaptor::construct Method  \n Constructs an object.  \n  \n```cpp  \ntemplate <class Ty, class... Atypes>  \nvoid construct(Ty* ptr, Atypes&&... args);\n\ntemplate <class Ty1, class Ty2, class... Atypes1, class... Atypes2>  \nvoid construct(pair<Ty1, Ty2>* ptr, piecewise_construct_t,  \n    tuple<Atypes1&&...>  \nfirst, tuple<Atypes1&&...> second);\n\ntemplate <class Ty1, class Ty2>  \nvoid construct(pair<Ty1, Ty2>* ptr);\n\ntemplate <class Ty1, class Ty2, class Uy1, class Uy2>  \nvoid construct(pair<Ty1, Ty2>* ptr,  \n    class Uy1&& first, class Uy2&& second);\n\ntemplate <class Ty1, class Ty2, class Uy1, class Uy2>  \nvoid construct(pair<Ty1, Ty2>* ptr, const pair<Uy1, Uy2>& right);\n\ntemplate <class Ty1, class Ty2, class Uy1, class Uy2>  \nvoid construct(pair<Ty1, Ty2>* ptr, pair<Uy1, Uy2>&& right);\n```  \n  \n### Parameters  \n `ptr`  \n A pointer to the memory location where the object is to be constructed.  \n  \n `args`  \n A list of arguments.  \n  \n `first`  \n An object of the first type in a pair.  \n  \n `second`  \n An object of the second type in a pair.  \n  \n `right`  \n An existing object to be moved or copied.  \n  \n### Remarks  \n The first method constructs the object at `ptr` by calling `Outermost_traits::construct(OUTERMOST(*this), ptr, xargs...)`, where `xargs...` is one of the following.  \n  \n-   If `uses_allocator<Ty, inner_allocator_type>` holds false, then `xargs...` is `args...`.  \n  \n-   If `uses_allocator<Ty, inner_allocator_type>` holds true, and `is_constructible<Ty, allocator_arg_t, inner_allocator_type, args...>` holds true, then `xargs...` is `allocator_arg, inner_allocator(), args...`.  \n  \n-   If `uses_allocator<Ty, inner_allocator_type>` holds true, and `is_constructible<Ty, args..., inner_allocator()>` holds true, then `xargs...` is `args..., inner_allocator()`.  \n  \n The second method constructs the pair object at `ptr` by calling `Outermost_traits::construct(OUTERMOST(*this), &ptr->first, xargs...)`, where `xargs...` is `first...` modified as in the above list, and `Outermost_traits::construct(OUTERMOST(*this), &ptr->second, xargs...)`, where `xargs...` is `second...` modified as in the above list.  \n  \n The third method behaves the same as `this->construct(ptr, piecewise_construct, tuple<>, tuple<>)`.  \n  \n The fourth method behaves the same as `this->construct(ptr, piecewise_construct, forward_as_tuple(std::forward<Uy1>(first), forward_as_tuple(std::forward<Uy2>(second))`.  \n  \n The fifth method behaves the same as `this->construct(ptr, piecewise_construct, forward_as_tuple(right.first), forward_as_tuple(right.second))`.  \n  \n The sixth method behaves the same as `this->construct(ptr, piecewise_construct, forward_as_tuple(std::forward<Uy1>(right.first), forward_as_tuple(std::forward<Uy2>(right.second))`.  \n  \n##  <a name=\"scoped_allocator_adaptor__deallocate_method\"></a>  scoped_allocator_adaptor::deallocate Method  \n Deallocates objects by using the outer allocator.  \n  \n```cpp  \nvoid deallocate(pointer ptr, size_type count);\n```  \n  \n### Parameters  \n `ptr`  \n A pointer to the starting location of the objects to be deallocated.  \n  \n `count`  \n The number of objects to deallocate.  \n  \n##  <a name=\"scoped_allocator_adaptor__destroy_method\"></a>  scoped_allocator_adaptor::destroy Method  \n Destroys a specified object.  \n  \n```cpp  \ntemplate <class Ty>  \nvoid destroy(Ty* ptr)  \n```  \n  \n### Parameters  \n `ptr`  \n A pointer to the object to be destroyed.  \n  \n### Return Value  \n `Outermost_traits::destroy(OUTERMOST(*this), ptr)`  \n  \n##  <a name=\"scoped_allocator_adaptor__inner_allocator_method\"></a>  scoped_allocator_adaptor::inner_allocator Method  \n Retrieves a reference to the stored object of type `inner_allocator_type`.  \n  \n```cpp  \ninner_allocator_type& inner_allocator() noexcept;  \nconst inner_allocator_type& inner_allocator() const noexcept;  \n```  \n  \n### Return Value  \n A reference to the stored object of type `inner_allocator_type`.  \n  \n##  <a name=\"scoped_allocator_adaptor__max_size_method\"></a>  scoped_allocator_adaptor::max_size Method  \n Determines the maximum number of objects that can be allocated by the outer allocator.  \n  \n```cpp  \nsize_type max_size();\n```  \n  \n### Return Value  \n `Outer_traits::max_size(outer_allocator())`  \n  \n##  <a name=\"scoped_allocator_adaptor__outer_allocator_method\"></a>  scoped_allocator_adaptor::outer_allocator Method  \n Retrieves a reference to the stored object of type `outer_allocator_type`.  \n  \n```cpp  \nouter_allocator_type& outer_allocator() noexcept;  \nconst outer_allocator_type& outer_allocator() const noexcept;  \n```  \n  \n### Return Value  \n A reference to the stored object of type `outer_allocator_type`.  \n  \n##  <a name=\"scoped_allocator_adaptor__rebind_struct\"></a>  scoped_allocator_adaptor::rebind Struct  \n Defines the type `Outer::rebind\\<Other>::other` as a synonym for `scoped_allocator_adaptor\\<Other, Inner...>`.  \n  \nstruct rebind{  \n   typedef Other_traits::rebind\\<Other>  \n   Other_alloc;  \n   typedef scoped_allocator_adaptor\\<Other_alloc, Inner...> other;  \n   };  \n  \n##  <a name=\"scoped_allocator_adaptor__scoped_allocator_adaptor_constructor\"></a>  scoped_allocator_adaptor::scoped_allocator_adaptor Constructor  \n Constructs a `scoped_allocator_adaptor` object.  \n  \n```cpp  \nscoped_allocator_adaptor();\n\nscoped_allocator_adaptor(const scoped_allocator_adaptor& right) noexcept;  \ntemplate <class Outer2>  \nscoped_allocator_adaptor(\n const scoped_allocator_adaptor<Outer2, Inner...>& right) noexcept;  \ntemplate <class Outer2>  \nscoped_allocator_adaptor(\n scoped_allocator_adaptor<Outer2, Inner...>&& right) noexcept;  \ntemplate <class Outer2>  \nscoped_allocator_adaptor(Outer2&& al,  \n    const Inner&... rest) noexcept;  \n```  \n  \n### Parameters  \n `right`  \n An existing `scoped_allocator_adaptor`.  \n  \n `al`  \n An existing allocator to be used as the outer allocator.  \n  \n `rest`  \n A list of allocators to be used as the inner allocators.  \n  \n### Remarks  \n The first constructor default constructs its stored allocator objects. Each of the next three constructors constructs its stored allocator objects from the corresponding objects in `right`. The last constructor constructs its stored allocator objects from the corresponding arguments in the argument list.  \n  \n##  <a name=\"scoped_allocator_adaptor__select_on_container_copy_construction_method\"></a>  scoped_allocator_adaptor::select_on_container_copy_construction Method  \n Creates a new `scoped_allocator_adaptor` object with each stored allocator object initialized by calling `select_on_container_copy_construction` for each corresponding allocator.  \n  \n```cpp  \nscoped_allocator_adaptor select_on_container_copy_construction();\n```  \n  \n### Return Value  \n This method effectively returns `scoped_allocator_adaptor(Outer_traits::select_on_container_copy_construction(*this), inner_allocator().select_on_container_copy_construction())`. The result is a new `scoped_allocator_adaptor` object with each stored allocator object initialized by calling `al.select_on_container_copy_construction()` for the corresponding allocator `al`.  \n  \n## See Also  \n [Header Files Reference](../standard-library/cpp-standard-library-header-files.md)\n\n\n\n"}