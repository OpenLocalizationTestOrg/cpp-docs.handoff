{"nodes":[{"pos":[12,70],"content":"CDynamicParameterAccessor::GetParamString | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CDynamicParameterAccessor::GetParamString | Microsoft Docs","pos":[0,58]}]},{"content":"CDynamicParameterAccessor::GetParamString","pos":[834,875]},{"content":"Retrieves the string data of the specified parameter stored in the buffer.","pos":[876,950]},{"content":"Syntax","pos":[959,965]},{"content":"Parameters","pos":[1385,1395]},{"content":"[in] The parameter number (offset from 1).","pos":[1411,1453]},{"content":"Parameter 0 is reserved for return values.","pos":[1454,1496]},{"content":"The parameter number is the index of the parameter based on its order in the SQL or stored procedure call.","pos":[1497,1603]},{"content":"See <bpt id=\"p1\">[</bpt>SetParam<ept id=\"p1\">](../../data/oledb/cdynamicparameteraccessor-setparam.md)</ept> for an example.","pos":[1604,1690],"source":" See [SetParam](../../data/oledb/cdynamicparameteraccessor-setparam.md) for an example."},{"content":"[out] The ANSI (<bpt id=\"p1\">**</bpt>CSimpleStringA<ept id=\"p1\">**</ept>) or Unicode (<bpt id=\"p2\">**</bpt>CSimpleStringW<ept id=\"p2\">**</ept>) string data of the specified parameter.","pos":[1712,1819],"source":" [out] The ANSI (**CSimpleStringA**) or Unicode (**CSimpleStringW**) string data of the specified parameter."},{"content":"You should pass a parameter of type <ph id=\"ph1\">`CString`</ph>, for example:","pos":[1820,1879],"source":" You should pass a parameter of type `CString`, for example:"},{"pos":[1897,1917],"content":"NVC_OLEDB_Consumer#9"},{"content":"[out] A pointer to the ANSI (<bpt id=\"p1\">**</bpt>CHAR<ept id=\"p1\">**</ept>) or Unicode (<bpt id=\"p2\">**</bpt>WCHAR<ept id=\"p2\">**</ept>) string data of the specified parameter.","pos":[2020,2121],"source":" [out] A pointer to the ANSI (**CHAR**) or Unicode (**WCHAR**) string data of the specified parameter."},{"content":"[out] A pointer to the size of the buffer pointed to by <ph id=\"ph1\">`pBuffer`</ph> (in characters, including the terminating NULL).","pos":[2141,2255],"source":" [out] A pointer to the size of the buffer pointed to by `pBuffer` (in characters, including the terminating NULL)."},{"content":"Remarks","pos":[2264,2271]},{"pos":[2275,2327],"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> on success or <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> on failure.","source":"Returns **true** on success or **false** on failure."},{"pos":[2334,2485],"content":"If <ph id=\"ph1\">`pBuffer`</ph> is NULL, this method will set the required buffer size in the memory pointed to by <ph id=\"ph2\">`pMaxLen`</ph> and return <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> without copying the data.","source":"If `pBuffer` is NULL, this method will set the required buffer size in the memory pointed to by `pMaxLen` and return **true** without copying the data."},{"pos":[2492,2586],"content":"This method will fail if the buffer <ph id=\"ph1\">`pBuffer`</ph> is not large enough to contain the whole string.","source":"This method will fail if the buffer `pBuffer` is not large enough to contain the whole string."},{"content":"Use <ph id=\"ph1\">`GetParamString`</ph> to retrieve string parameter data from the buffer.","pos":[2593,2664],"source":"Use `GetParamString` to retrieve string parameter data from the buffer."},{"content":"Use <bpt id=\"p1\">[</bpt>GetParam<ept id=\"p1\">](../../data/oledb/cdynamicparameteraccessor-getparam.md)</ept> to retrieve nonstring parameter data from the buffer.","pos":[2665,2789],"source":" Use [GetParam](../../data/oledb/cdynamicparameteraccessor-getparam.md) to retrieve nonstring parameter data from the buffer."},{"content":"Requirements","pos":[2798,2810]},{"pos":[2814,2836],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atldbcli.h","source":"**Header:** atldbcli.h"},{"content":"See Also","pos":[2845,2853]},{"content":"CDynamicParameterAccessor Class","pos":[2858,2889]}],"content":"---\ntitle: \"CDynamicParameterAccessor::GetParamString | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"CDynamicParameterAccessor.GetParamString\"\n  - \"GetParamString\"\n  - \"CDynamicParameterAccessor::GetParamString\"\n  - \"ATL.CDynamicParameterAccessor.GetParamString\"\n  - \"ATL::CDynamicParameterAccessor::GetParamString\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"GetParamString method\"\nms.assetid: 078c2b1c-7072-47c1-a203-f47e75363f91\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CDynamicParameterAccessor::GetParamString\nRetrieves the string data of the specified parameter stored in the buffer.  \n  \n## Syntax  \n  \n```  \n  \n      bool GetParamString(  \n   DBORDINAL nParam,  \n   CSimpleStringA& strOutput  \n) throw( );  \nbool GetParamString(  \n   DBORDINAL nParam,  \n   CSimpleStringW& strOutput  \n) throw( );  \nbool GetParamString(  \n   DBORDINAL nParam,  \n   CHAR* pBuffer,  \n   size_t* pMaxLen  \n) throw( );  \nbool GetParamString(  \n   DBORDINAL nParam,  \n   WCHAR* pBuffer,  \n   size_t* pMaxLen  \n) throw( );  \n```  \n  \n#### Parameters  \n `nParam`  \n [in] The parameter number (offset from 1). Parameter 0 is reserved for return values. The parameter number is the index of the parameter based on its order in the SQL or stored procedure call. See [SetParam](../../data/oledb/cdynamicparameteraccessor-setparam.md) for an example.  \n  \n `strOutput`  \n [out] The ANSI (**CSimpleStringA**) or Unicode (**CSimpleStringW**) string data of the specified parameter. You should pass a parameter of type `CString`, for example:  \n  \n [!code-cpp[NVC_OLEDB_Consumer#9](../../data/oledb/codesnippet/cpp/cdynamicparameteraccessor-getparamstring_1.cpp)]  \n  \n `pBuffer`  \n [out] A pointer to the ANSI (**CHAR**) or Unicode (**WCHAR**) string data of the specified parameter.  \n  \n `pMaxLen`  \n [out] A pointer to the size of the buffer pointed to by `pBuffer` (in characters, including the terminating NULL).  \n  \n## Remarks  \n Returns **true** on success or **false** on failure.  \n  \n If `pBuffer` is NULL, this method will set the required buffer size in the memory pointed to by `pMaxLen` and return **true** without copying the data.  \n  \n This method will fail if the buffer `pBuffer` is not large enough to contain the whole string.  \n  \n Use `GetParamString` to retrieve string parameter data from the buffer. Use [GetParam](../../data/oledb/cdynamicparameteraccessor-getparam.md) to retrieve nonstring parameter data from the buffer.  \n  \n## Requirements  \n **Header:** atldbcli.h  \n  \n## See Also  \n [CDynamicParameterAccessor Class](../../data/oledb/cdynamicparameteraccessor-class.md)"}