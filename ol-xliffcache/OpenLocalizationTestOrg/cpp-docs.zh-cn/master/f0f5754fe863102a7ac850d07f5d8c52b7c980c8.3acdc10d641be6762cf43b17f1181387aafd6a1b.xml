{"nodes":[{"pos":[12,40],"content":"ptr::Attach | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ptr::Attach | Microsoft Docs","pos":[0,28]}]},{"content":"ptr::Attach","pos":[670,681]},{"pos":[682,720],"content":"Attaches a COM object to a <ph id=\"ph1\">`com::ptr`</ph>.","source":"Attaches a COM object to a `com::ptr`."},{"content":"Syntax","pos":[729,735]},{"content":"Parameters","pos":[811,821]},{"content":"The COM interface pointer to attach.","pos":[837,873]},{"content":"Exceptions","pos":[882,892]},{"pos":[896,1012],"content":"If the <ph id=\"ph1\">`com::ptr`</ph> already owns a reference to a COM object, <ph id=\"ph2\">`Attach`</ph> throws &lt;xref:System.InvalidOperationException&gt;.","source":"If the `com::ptr` already owns a reference to a COM object, `Attach` throws <xref:System.InvalidOperationException>."},{"content":"Remarks","pos":[1021,1028]},{"pos":[1032,1127],"content":"A call to <ph id=\"ph1\">`Attach`</ph> references the COM object but does not release the caller's reference to it.","source":"A call to `Attach` references the COM object but does not release the caller's reference to it."},{"pos":[1134,1194],"content":"Passing <ph id=\"ph1\">`NULL`</ph> to <ph id=\"ph2\">`Attach`</ph> results in no action being taken.","source":"Passing `NULL` to `Attach` results in no action being taken."},{"content":"Example","pos":[1203,1210]},{"content":"This example implements a CLR class that uses a <ph id=\"ph1\">`com::ptr`</ph> to wrap its private member <ph id=\"ph2\">`IXMLDOMDocument`</ph> object.","pos":[1214,1325],"source":"This example implements a CLR class that uses a `com::ptr` to wrap its private member `IXMLDOMDocument` object."},{"content":"The <ph id=\"ph1\">`ReplaceDocument`</ph> member function first calls <ph id=\"ph2\">`Release`</ph> on any previously owned object and then calls <ph id=\"ph3\">`Attach`</ph> to attach a new document object.","pos":[1326,1473],"source":" The `ReplaceDocument` member function first calls `Release` on any previously owned object and then calls `Attach` to attach a new document object."},{"content":"Requirements","pos":[3538,3550]},{"pos":[3554,3588],"content":"<bpt id=\"p1\">**</bpt>Header file<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>msclr\\com\\ptr.h&gt;","source":"**Header file** \\<msclr\\com\\ptr.h>"},{"pos":[3595,3619],"content":"<bpt id=\"p1\">**</bpt>Namespace<ept id=\"p1\">**</ept> msclr::com","source":"**Namespace** msclr::com"},{"content":"See Also","pos":[3628,3636]},{"content":"ptr Members","pos":[3641,3652]},{"content":"ptr::operator=","pos":[3685,3699]},{"content":"ptr::Release","pos":[3740,3752]}],"content":"---\ntitle: \"ptr::Attach | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"msclr::com::ptr::Attach\"\n  - \"ptr::Attach\"\n  - \"ptr.Attach\"\n  - \"msclr.com.ptr.Attach\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"Attach method\"\nms.assetid: 81d930de-cb2a-4c30-9bd6-94d65942c47a\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ptr::Attach\nAttaches a COM object to a `com::ptr`.  \n  \n## Syntax  \n  \n```  \nvoid Attach(  \n   _interface_type * _right  \n);  \n```  \n  \n#### Parameters  \n `_right`  \n The COM interface pointer to attach.  \n  \n## Exceptions  \n If the `com::ptr` already owns a reference to a COM object, `Attach` throws <xref:System.InvalidOperationException>.  \n  \n## Remarks  \n A call to `Attach` references the COM object but does not release the caller's reference to it.  \n  \n Passing `NULL` to `Attach` results in no action being taken.  \n  \n## Example  \n This example implements a CLR class that uses a `com::ptr` to wrap its private member `IXMLDOMDocument` object. The `ReplaceDocument` member function first calls `Release` on any previously owned object and then calls `Attach` to attach a new document object.  \n  \n```  \n// comptr_attach.cpp  \n// compile with: /clr /link msxml2.lib  \n#include <msxml2.h>  \n#include <msclr\\com\\ptr.h>  \n  \n#import <msxml3.dll> raw_interfaces_only  \n  \nusing namespace System;  \nusing namespace System::Runtime::InteropServices;  \nusing namespace msclr;  \n  \n// a ref class that uses a com::ptr to contain an   \n// IXMLDOMDocument object  \nref class XmlDocument {  \npublic:  \n   // construct the internal com::ptr with a null interface  \n   // and use CreateInstance to fill it  \n   XmlDocument(String^ progid) {  \n      m_ptrDoc.CreateInstance(progid);     \n   }  \n  \n   // replace currently held COM object with another one  \n   void ReplaceDocument(IXMLDOMDocument* pDoc) {  \n      // release current document object  \n      m_ptrDoc.Release();  \n      // attach the new document object  \n      m_ptrDoc.Attach(pDoc);  \n   }  \n  \n   // note that the destructor will call the com::ptr destructor  \n   // and automatically release the reference to the COM object  \n  \nprivate:  \n   com::ptr<IXMLDOMDocument> m_ptrDoc;  \n};  \n  \n// unmanaged function that creates a raw XML DOM Document object  \nIXMLDOMDocument* CreateDocument() {  \n   IXMLDOMDocument* pDoc = NULL;  \n   Marshal::ThrowExceptionForHR(CoCreateInstance(CLSID_DOMDocument30, NULL,  \n      CLSCTX_INPROC_SERVER, IID_IXMLDOMDocument, (void**)&pDoc));  \n   return pDoc;  \n}  \n  \n// use the ref class to handle an XML DOM Document object  \nint main() {  \n   IXMLDOMDocument* pDoc = NULL;  \n  \n   try {  \n      // create the class from a progid string  \n      XmlDocument doc(\"Msxml2.DOMDocument.3.0\");  \n  \n      // get another document object from unmanaged function and  \n      // store it in place of the one held by our ref class  \n      pDoc = CreateDocument();  \n      doc.ReplaceDocument(pDoc);  \n      // no further need for raw object reference  \n      pDoc->Release();  \n      pDoc = NULL;  \n   }  \n   catch (Exception^ e) {  \n      Console::WriteLine(e);     \n   }  \n   finally {  \n      if (NULL != pDoc) {  \n         pDoc->Release();  \n      }  \n   }  \n}  \n```  \n  \n## Requirements  \n **Header file** \\<msclr\\com\\ptr.h>  \n  \n **Namespace** msclr::com  \n  \n## See Also  \n [ptr Members](../dotnet/ptr-members.md)   \n [ptr::operator=](../dotnet/ptr-operator-assign.md)   \n [ptr::Release](../dotnet/ptr-release.md)"}