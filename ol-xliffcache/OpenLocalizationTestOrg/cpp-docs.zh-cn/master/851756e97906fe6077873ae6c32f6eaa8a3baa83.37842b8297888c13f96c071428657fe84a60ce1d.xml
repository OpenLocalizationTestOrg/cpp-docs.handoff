{"nodes":[{"pos":[12,121],"content":"How to: Convert an OpenMP Loop that Uses a Reduction Variable to Use the Concurrency Runtime | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Convert an OpenMP Loop that Uses a Reduction Variable to Use the Concurrency Runtime | Microsoft Docs","pos":[0,109]}]},{"content":"How to: Convert an OpenMP Loop that Uses a Reduction Variable to Use the Concurrency Runtime","pos":[804,896]},{"pos":[897,1221],"content":"This example demonstrates how to convert an OpenMP <bpt id=\"p1\">[</bpt>parallel<ept id=\"p1\">](../../parallel/concrt/how-to-use-parallel-invoke-to-write-a-parallel-sort-routine.md#parallel)</ept><bpt id=\"p2\">[</bpt>for<ept id=\"p2\">](../../parallel/openmp/reference/for-openmp.md)</ept> loop that uses the <bpt id=\"p3\">[</bpt>reduction<ept id=\"p3\">](../../parallel/openmp/reference/reduction.md)</ept> clause to use the Concurrency Runtime.","source":"This example demonstrates how to convert an OpenMP [parallel](../../parallel/concrt/how-to-use-parallel-invoke-to-write-a-parallel-sort-routine.md#parallel)[for](../../parallel/openmp/reference/for-openmp.md) loop that uses the [reduction](../../parallel/openmp/reference/reduction.md) clause to use the Concurrency Runtime."},{"content":"The OpenMP <ph id=\"ph1\">`reduction`</ph> clause lets you specify one or more thread-private variables that are subject to a reduction operation at the end of the parallel region.","pos":[1228,1388],"source":"The OpenMP `reduction` clause lets you specify one or more thread-private variables that are subject to a reduction operation at the end of the parallel region."},{"content":"OpenMP predefines a set of reduction operators.","pos":[1389,1436]},{"content":"Each reduction variable must be a scalar (for example, <ph id=\"ph1\">`int`</ph>, <ph id=\"ph2\">`long`</ph>, and <ph id=\"ph3\">`float`</ph>).","pos":[1437,1520],"source":" Each reduction variable must be a scalar (for example, `int`, `long`, and `float`)."},{"content":"OpenMP also defines several restrictions on how reduction variables are used in a parallel region.","pos":[1521,1619]},{"content":"The Parallel Patterns Library (PPL) provides the <bpt id=\"p1\">[</bpt>concurrency::combinable<ept id=\"p1\">](../../parallel/concrt/reference/combinable-class.md)</ept> class, which provides reusable, thread-local storage that lets you perform fine-grained computations and then merge those computations into a final result.","pos":[1626,1909],"source":"The Parallel Patterns Library (PPL) provides the [concurrency::combinable](../../parallel/concrt/reference/combinable-class.md) class, which provides reusable, thread-local storage that lets you perform fine-grained computations and then merge those computations into a final result."},{"content":"The <ph id=\"ph1\">`combinable`</ph> class is a template that acts on both scalar and complex types.","pos":[1910,1990],"source":" The `combinable` class is a template that acts on both scalar and complex types."},{"content":"To use the <ph id=\"ph1\">`combinable`</ph> class, perform sub-computations in the body of a parallel construct and then call the <bpt id=\"p1\">[</bpt>concurrency::combinable::combine<ept id=\"p1\">](reference/combinable-class.md#combine)</ept> or <bpt id=\"p2\">[</bpt>concurrency::combinable::combine_each<ept id=\"p2\">](reference/combinable-class.md#combine_each)</ept> method to produce the final result.","pos":[1991,2297],"source":" To use the `combinable` class, perform sub-computations in the body of a parallel construct and then call the [concurrency::combinable::combine](reference/combinable-class.md#combine) or [concurrency::combinable::combine_each](reference/combinable-class.md#combine_each) method to produce the final result."},{"content":"The <ph id=\"ph1\">`combine`</ph> and <ph id=\"ph2\">`combine_each`</ph> methods each take a <bpt id=\"p1\">*</bpt>combine function<ept id=\"p1\">*</ept> that specifies how to combine each pair of elements.","pos":[2298,2422],"source":" The `combine` and `combine_each` methods each take a *combine function* that specifies how to combine each pair of elements."},{"content":"Therefore, the <ph id=\"ph1\">`combinable`</ph> class is not restricted to a fixed set of reduction operators.","pos":[2423,2513],"source":" Therefore, the `combinable` class is not restricted to a fixed set of reduction operators."},{"content":"Example","pos":[2522,2529]},{"content":"This example uses both OpenMP and the Concurrency Runtime to compute the sum of the first 35 Fibonacci numbers.","pos":[2533,2644]},{"pos":[2662,2677],"content":"concrt-openmp#7"},{"content":"This example produces the following output.","pos":[2785,2828]},{"pos":[3023,3170],"content":"For more information about the <ph id=\"ph1\">`combinable`</ph> class, see <bpt id=\"p1\">[</bpt>Parallel Containers and Objects<ept id=\"p1\">](../../parallel/concrt/parallel-containers-and-objects.md)</ept>.","source":"For more information about the `combinable` class, see [Parallel Containers and Objects](../../parallel/concrt/parallel-containers-and-objects.md)."},{"content":"Compiling the Code","pos":[3179,3197]},{"pos":[3201,3413],"content":"Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named <ph id=\"ph1\">`concrt-omp-fibonacci-reduction.cpp`</ph> and then run the following command in a Visual Studio Command Prompt window.","source":"Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named `concrt-omp-fibonacci-reduction.cpp` and then run the following command in a Visual Studio Command Prompt window."},{"content":"cl.exe /EHsc /openmp concrt-omp-fibonacci-reduction.cpp","pos":[3422,3477]},{"content":"See Also","pos":[3488,3496]},{"content":"Migrating from OpenMP to the Concurrency Runtime","pos":[3501,3549]},{"content":"Parallel Containers and Objects","pos":[3631,3662]}],"content":"---\ntitle: \"How to: Convert an OpenMP Loop that Uses a Reduction Variable to Use the Concurrency Runtime | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"converting from OpenMP to the Concurrency Runtime, reduction variables\"\n  - \"reduction variables, converting from OpenMP to the Concurrency Runtime\"\nms.assetid: 96623f36-5e57-4d3f-8c13-669e6cd535b1\ncaps.latest.revision: 13\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# How to: Convert an OpenMP Loop that Uses a Reduction Variable to Use the Concurrency Runtime\nThis example demonstrates how to convert an OpenMP [parallel](../../parallel/concrt/how-to-use-parallel-invoke-to-write-a-parallel-sort-routine.md#parallel)[for](../../parallel/openmp/reference/for-openmp.md) loop that uses the [reduction](../../parallel/openmp/reference/reduction.md) clause to use the Concurrency Runtime.  \n  \n The OpenMP `reduction` clause lets you specify one or more thread-private variables that are subject to a reduction operation at the end of the parallel region. OpenMP predefines a set of reduction operators. Each reduction variable must be a scalar (for example, `int`, `long`, and `float`). OpenMP also defines several restrictions on how reduction variables are used in a parallel region.  \n  \n The Parallel Patterns Library (PPL) provides the [concurrency::combinable](../../parallel/concrt/reference/combinable-class.md) class, which provides reusable, thread-local storage that lets you perform fine-grained computations and then merge those computations into a final result. The `combinable` class is a template that acts on both scalar and complex types. To use the `combinable` class, perform sub-computations in the body of a parallel construct and then call the [concurrency::combinable::combine](reference/combinable-class.md#combine) or [concurrency::combinable::combine_each](reference/combinable-class.md#combine_each) method to produce the final result. The `combine` and `combine_each` methods each take a *combine function* that specifies how to combine each pair of elements. Therefore, the `combinable` class is not restricted to a fixed set of reduction operators.  \n  \n## Example  \n This example uses both OpenMP and the Concurrency Runtime to compute the sum of the first 35 Fibonacci numbers.  \n  \n [!code-cpp[concrt-openmp#7](../../parallel/concrt/codesnippet/cpp/convert-an-openmp-loop-that-uses-a-reduction-variable_1.cpp)]  \n  \n This example produces the following output.  \n  \n```Output  \nUsing OpenMP...  \nThe sum of the first 35 Fibonacci numbers is 14930351.  \nUsing the Concurrency Runtime...  \nThe sum of the first 35 Fibonacci numbers is 14930351.  \n```  \n  \n For more information about the `combinable` class, see [Parallel Containers and Objects](../../parallel/concrt/parallel-containers-and-objects.md).  \n  \n## Compiling the Code  \n Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named `concrt-omp-fibonacci-reduction.cpp` and then run the following command in a Visual Studio Command Prompt window.  \n  \n **cl.exe /EHsc /openmp concrt-omp-fibonacci-reduction.cpp**  \n  \n## See Also  \n [Migrating from OpenMP to the Concurrency Runtime](../../parallel/concrt/migrating-from-openmp-to-the-concurrency-runtime.md)   \n [Parallel Containers and Objects](../../parallel/concrt/parallel-containers-and-objects.md)\n\n"}