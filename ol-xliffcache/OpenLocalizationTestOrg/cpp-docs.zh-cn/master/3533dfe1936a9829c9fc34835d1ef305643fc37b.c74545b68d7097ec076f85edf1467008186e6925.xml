{"nodes":[{"pos":[12,60],"content":"Clipboard: Adding Other Formats | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Clipboard: Adding Other Formats | Microsoft Docs","pos":[0,48]}]},{"content":"Clipboard: Adding Other Formats","pos":[767,798]},{"content":"This topic explains how to expand the list of supported formats, particularly for OLE support.","pos":[799,893]},{"content":"The topic <bpt id=\"p1\">[</bpt>Clipboard: Copying and Pasting Data<ept id=\"p1\">](../mfc/clipboard-copying-and-pasting-data.md)</ept> describes the minimum implementation necessary to support copying and pasting from the Clipboard.","pos":[894,1085],"source":" The topic [Clipboard: Copying and Pasting Data](../mfc/clipboard-copying-and-pasting-data.md) describes the minimum implementation necessary to support copying and pasting from the Clipboard."},{"content":"If this is all you implement, the only formats placed on the Clipboard are <ph id=\"ph1\">`CF_METAFILEPICT`</ph>, <bpt id=\"p1\">**</bpt>CF_EMBEDSOURCE<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>CF_OBJECTDESCRIPTOR<ept id=\"p2\">**</ept>, and possibly <ph id=\"ph2\">`CF_LINKSOURCE`</ph>.","pos":[1086,1254],"source":" If this is all you implement, the only formats placed on the Clipboard are `CF_METAFILEPICT`, **CF_EMBEDSOURCE**, **CF_OBJECTDESCRIPTOR**, and possibly `CF_LINKSOURCE`."},{"content":"Most applications will need more formats on the Clipboard than these three.","pos":[1255,1330]},{"pos":[1388,1414],"content":"Registering Custom Formats"},{"pos":[1418,1653],"content":"To create your own custom formats, follow the same procedure you would use when registering any custom Clipboard format: pass the name of the format to the <bpt id=\"p1\">**</bpt>RegisterClipboardFormat<ept id=\"p1\">**</ept> function and use its return value as the format ID.","source":"To create your own custom formats, follow the same procedure you would use when registering any custom Clipboard format: pass the name of the format to the **RegisterClipboardFormat** function and use its return value as the format ID."},{"pos":[1717,1749],"content":"Placing Formats on the Clipboard"},{"content":"To add more formats to those placed on the Clipboard, you must override the <ph id=\"ph1\">`OnGetClipboardData`</ph> function in the class you derived from either <ph id=\"ph2\">`COleClientItem`</ph> or <ph id=\"ph3\">`COleServerItem`</ph> (depending on whether the data to be copied is native).","pos":[1753,1988],"source":"To add more formats to those placed on the Clipboard, you must override the `OnGetClipboardData` function in the class you derived from either `COleClientItem` or `COleServerItem` (depending on whether the data to be copied is native)."},{"content":"In this function, you should use the following procedure.","pos":[1989,2046]},{"content":"To place formats on the Clipboard","pos":[2057,2090]},{"pos":[2100,2133],"content":"Create a <ph id=\"ph1\">`COleDataSource`</ph> object.","source":"Create a `COleDataSource` object."},{"pos":[2143,2292],"content":"Pass this data source to a function that adds your native data formats to the list of supported formats by calling <ph id=\"ph1\">`COleDataSource::CacheGlobalData`</ph>.","source":"Pass this data source to a function that adds your native data formats to the list of supported formats by calling `COleDataSource::CacheGlobalData`."},{"pos":[2302,2413],"content":"Add standard formats by calling <ph id=\"ph1\">`COleDataSource::CacheGlobalData`</ph> for each standard format you want to support.","source":"Add standard formats by calling `COleDataSource::CacheGlobalData` for each standard format you want to support."},{"content":"This technique is used in the MFC OLE sample program <bpt id=\"p1\">[</bpt>HIERSVR<ept id=\"p1\">](../visual-cpp-samples.md)</ept> (examine the <ph id=\"ph1\">`OnGetClipboardData`</ph> member function of the <bpt id=\"p2\">**</bpt>CServerItem<ept id=\"p2\">**</ept> class).","pos":[2420,2589],"source":"This technique is used in the MFC OLE sample program [HIERSVR](../visual-cpp-samples.md) (examine the `OnGetClipboardData` member function of the **CServerItem** class)."},{"content":"The only difference in this sample is that step three is not implemented because HIERSVR supports no other standard formats.","pos":[2590,2714]},{"content":"What do you want to know more about","pos":[2724,2759]},{"content":"OLE data objects and data sources and uniform data transfer","pos":[2770,2829]},{"content":"OLE drag and drop","pos":[2886,2903]},{"content":"OLE","pos":[2944,2947]},{"content":"See Also","pos":[2983,2991]},{"content":"Clipboard: Using the OLE Clipboard Mechanism","pos":[2996,3040]}],"content":"---\ntitle: \"Clipboard: Adding Other Formats | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"formats [C++], Clipboard\"\n  - \"Clipboard, formats\"\n  - \"custom formats, placing on Clipboard\"\n  - \"custom formats\"\n  - \"registering custom Clipboard data formats\"\n  - \"custom Clipboard data formats\"\nms.assetid: aea58159-65ed-4385-aeaa-3d9d5281903b\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Clipboard: Adding Other Formats\nThis topic explains how to expand the list of supported formats, particularly for OLE support. The topic [Clipboard: Copying and Pasting Data](../mfc/clipboard-copying-and-pasting-data.md) describes the minimum implementation necessary to support copying and pasting from the Clipboard. If this is all you implement, the only formats placed on the Clipboard are `CF_METAFILEPICT`, **CF_EMBEDSOURCE**, **CF_OBJECTDESCRIPTOR**, and possibly `CF_LINKSOURCE`. Most applications will need more formats on the Clipboard than these three.  \n  \n##  <a name=\"_core_registering_custom_formats\"></a> Registering Custom Formats  \n To create your own custom formats, follow the same procedure you would use when registering any custom Clipboard format: pass the name of the format to the **RegisterClipboardFormat** function and use its return value as the format ID.  \n  \n##  <a name=\"_core_placing_formats_on_the_clipboard\"></a> Placing Formats on the Clipboard  \n To add more formats to those placed on the Clipboard, you must override the `OnGetClipboardData` function in the class you derived from either `COleClientItem` or `COleServerItem` (depending on whether the data to be copied is native). In this function, you should use the following procedure.  \n  \n#### To place formats on the Clipboard  \n  \n1.  Create a `COleDataSource` object.  \n  \n2.  Pass this data source to a function that adds your native data formats to the list of supported formats by calling `COleDataSource::CacheGlobalData`.  \n  \n3.  Add standard formats by calling `COleDataSource::CacheGlobalData` for each standard format you want to support.  \n  \n This technique is used in the MFC OLE sample program [HIERSVR](../visual-cpp-samples.md) (examine the `OnGetClipboardData` member function of the **CServerItem** class). The only difference in this sample is that step three is not implemented because HIERSVR supports no other standard formats.  \n  \n### What do you want to know more about  \n  \n-   [OLE data objects and data sources and uniform data transfer](../mfc/data-objects-and-data-sources-ole.md)  \n  \n-   [OLE drag and drop](../mfc/drag-and-drop-ole.md)  \n  \n-   [OLE](../mfc/ole-background.md)  \n  \n## See Also  \n [Clipboard: Using the OLE Clipboard Mechanism](../mfc/clipboard-using-the-ole-clipboard-mechanism.md)\n\n"}