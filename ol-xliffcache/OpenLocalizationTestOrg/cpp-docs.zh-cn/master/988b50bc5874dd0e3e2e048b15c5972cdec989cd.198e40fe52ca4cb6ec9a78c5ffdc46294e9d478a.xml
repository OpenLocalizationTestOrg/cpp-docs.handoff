{"nodes":[{"pos":[12,49],"content":"Argument Description | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Argument Description | Microsoft Docs","pos":[0,37]}]},{"content":"Argument Description","pos":[689,709]},{"content":"The <ph id=\"ph1\">`argc`</ph> parameter in the <bpt id=\"p1\">**</bpt>main<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>wmain<ept id=\"p2\">**</ept> functions is an integer specifying how many arguments are passed to the program from the command line.","pos":[710,863],"source":"The `argc` parameter in the **main** and **wmain** functions is an integer specifying how many arguments are passed to the program from the command line."},{"content":"Since the program name is considered an argument, the value of <ph id=\"ph1\">`argc`</ph> is at least one.","pos":[864,950],"source":" Since the program name is considered an argument, the value of `argc` is at least one."},{"content":"Remarks","pos":[959,966]},{"content":"The <ph id=\"ph1\">`argv`</ph> parameter is an array of pointers to null-terminated strings representing the program arguments.","pos":[970,1077],"source":"The `argv` parameter is an array of pointers to null-terminated strings representing the program arguments."},{"content":"Each element of the array points to a string representation of an argument passed to <bpt id=\"p1\">**</bpt>main<ept id=\"p1\">**</ept> (or <bpt id=\"p2\">**</bpt>wmain<ept id=\"p2\">**</ept>).","pos":[1078,1187],"source":" Each element of the array points to a string representation of an argument passed to **main** (or **wmain**)."},{"content":"(For information about arrays, see <bpt id=\"p1\">[</bpt>Array Declarations<ept id=\"p1\">](../c-language/array-declarations.md)</ept>.) The <ph id=\"ph1\">`argv`</ph> parameter can be declared either as an array of pointers to type <ph id=\"ph2\">`char`</ph> (<ph id=\"ph3\">`char *argv[]`</ph>) or as a pointer to pointers to type <ph id=\"ph4\">`char`</ph> (<ph id=\"ph5\">`char **argv`</ph>).","pos":[1188,1442],"source":" (For information about arrays, see [Array Declarations](../c-language/array-declarations.md).) The `argv` parameter can be declared either as an array of pointers to type `char` (`char *argv[]`) or as a pointer to pointers to type `char` (`char **argv`)."},{"content":"For <bpt id=\"p1\">**</bpt>wmain<ept id=\"p1\">**</ept>, the <ph id=\"ph1\">`argv`</ph> parameter can be declared either as an array of pointers to type <ph id=\"ph2\">`wchar_t`</ph> (<ph id=\"ph3\">`wchar_t *argv[]`</ph>) or as a pointer to pointers to type <ph id=\"ph4\">`wchar_t`</ph> (<ph id=\"ph5\">`wchar_t **argv`</ph>).","pos":[1443,1629],"source":" For **wmain**, the `argv` parameter can be declared either as an array of pointers to type `wchar_t` (`wchar_t *argv[]`) or as a pointer to pointers to type `wchar_t` (`wchar_t **argv`)."},{"content":"By convention, <ph id=\"ph1\">`argv`</ph><bpt id=\"p1\">**</bpt>[0]<ept id=\"p1\">**</ept> is the command with which the program is invoked.","pos":[1636,1714],"source":"By convention, `argv`**[0]** is the command with which the program is invoked."},{"content":"However, it is possible to spawn a process using <bpt id=\"p1\">[</bpt>CreateProcess<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms682425)</ept> and if you use both the first and second arguments (<ph id=\"ph1\">`lpApplicationName`</ph> and <ph id=\"ph2\">`lpCommandLine`</ph>), <ph id=\"ph3\">`argv`</ph><bpt id=\"p2\">**</bpt>[0]<ept id=\"p2\">**</ept> may not be the executable name; use <bpt id=\"p3\">[</bpt>GetModuleFileName<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/ms683197)</ept> to retrieve the executable name.","pos":[1716,2097],"source":"  However, it is possible to spawn a process using [CreateProcess](http://msdn.microsoft.com/library/windows/desktop/ms682425) and if you use both the first and second arguments (`lpApplicationName` and `lpCommandLine`), `argv`**[0]** may not be the executable name; use [GetModuleFileName](http://msdn.microsoft.com/library/windows/desktop/ms683197) to retrieve the executable name."},{"content":"The last pointer (<ph id=\"ph1\">`argv[argc]`</ph>) is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[2104,2148],"source":"The last pointer (`argv[argc]`) is **NULL**."},{"content":"(See <bpt id=\"p1\">[</bpt>getenv<ept id=\"p1\">](../c-runtime-library/reference/getenv-wgetenv.md)</ept> in the <bpt id=\"p2\">*</bpt>Run-Time Library Reference<ept id=\"p2\">*</ept> for an alternative method for getting environment variable information.)","pos":[2149,2321],"source":" (See [getenv](../c-runtime-library/reference/getenv-wgetenv.md) in the *Run-Time Library Reference* for an alternative method for getting environment variable information.)"},{"content":"Microsoft Specific","pos":[2330,2348]},{"content":"The <ph id=\"ph1\">`envp`</ph> parameter is a pointer to an array of null-terminated strings that represent the values set in the user's environment variables.","pos":[2357,2496],"source":"The `envp` parameter is a pointer to an array of null-terminated strings that represent the values set in the user's environment variables."},{"content":"The <ph id=\"ph1\">`envp`</ph> parameter can be declared as an array of pointers to <ph id=\"ph2\">`char`</ph> (<ph id=\"ph3\">`char *envp[]`</ph>) or as a pointer to pointers to <ph id=\"ph4\">`char`</ph> (<ph id=\"ph5\">`char **envp`</ph>).","pos":[2497,2639],"source":" The `envp` parameter can be declared as an array of pointers to `char` (`char *envp[]`) or as a pointer to pointers to `char` (`char **envp`)."},{"content":"In a <bpt id=\"p1\">**</bpt>wmain<ept id=\"p1\">**</ept> function, the <ph id=\"ph1\">`envp`</ph> parameter can be declared as an array of pointers to <ph id=\"ph2\">`wchar_t`</ph> (<ph id=\"ph3\">`wchar_t *envp[]`</ph>) or as a pointer to pointers to <ph id=\"ph4\">`wchar_t`</ph> (<ph id=\"ph5\">`wchar_t **envp`</ph>).","pos":[2640,2819],"source":" In a **wmain** function, the `envp` parameter can be declared as an array of pointers to `wchar_t` (`wchar_t *envp[]`) or as a pointer to pointers to `wchar_t` (`wchar_t **envp`)."},{"content":"The end of the array is indicated by a <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\*</ph>pointer.","pos":[2820,2878],"source":" The end of the array is indicated by a **NULL** \\*pointer."},{"content":"Note that the environment block passed to <bpt id=\"p1\">**</bpt>main<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>wmain<ept id=\"p2\">**</ept> is a \"frozen\" copy of the current environment.","pos":[2879,2989],"source":" Note that the environment block passed to **main** or **wmain** is a \"frozen\" copy of the current environment."},{"content":"If you subsequently change the environment via a call to _<bpt id=\"p1\">**</bpt>putenv<ept id=\"p1\">**</ept> or <ph id=\"ph1\">`_wputenv`</ph>, the current environment (as returned by <ph id=\"ph2\">`getenv`/`_wgetenv`</ph> and the <ph id=\"ph3\">`_environ`</ph> or <ph id=\"ph4\">`_wenviron`</ph> variables) will change, but the block pointed to by <ph id=\"ph5\">`envp`</ph> will not change.","pos":[2990,3243],"source":" If you subsequently change the environment via a call to _**putenv** or `_wputenv`, the current environment (as returned by `getenv`/`_wgetenv` and the `_environ` or `_wenviron` variables) will change, but the block pointed to by `envp` will not change."},{"content":"The <ph id=\"ph1\">`envp`</ph> parameter is ANSI compatible in C, but not in C++.","pos":[3244,3305],"source":" The `envp` parameter is ANSI compatible in C, but not in C++."},{"content":"END Microsoft Specific","pos":[3314,3336]},{"content":"See Also","pos":[3347,3355]},{"content":"main Function and Program Execution","pos":[3360,3395]}],"content":"---\ntitle: \"Argument Description | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"envp argument\"\n  - \"main function, syntax\"\n  - \"arguments [C++], for main function\"\n  - \"argv argument\"\n  - \"argc argument\"\nms.assetid: 91c2cbe3-9aca-4277-afa1-6137eb8fb704\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Argument Description\nThe `argc` parameter in the **main** and **wmain** functions is an integer specifying how many arguments are passed to the program from the command line. Since the program name is considered an argument, the value of `argc` is at least one.  \n  \n## Remarks  \n The `argv` parameter is an array of pointers to null-terminated strings representing the program arguments. Each element of the array points to a string representation of an argument passed to **main** (or **wmain**). (For information about arrays, see [Array Declarations](../c-language/array-declarations.md).) The `argv` parameter can be declared either as an array of pointers to type `char` (`char *argv[]`) or as a pointer to pointers to type `char` (`char **argv`). For **wmain**, the `argv` parameter can be declared either as an array of pointers to type `wchar_t` (`wchar_t *argv[]`) or as a pointer to pointers to type `wchar_t` (`wchar_t **argv`).  \n  \n By convention, `argv`**[0]** is the command with which the program is invoked.  However, it is possible to spawn a process using [CreateProcess](http://msdn.microsoft.com/library/windows/desktop/ms682425) and if you use both the first and second arguments (`lpApplicationName` and `lpCommandLine`), `argv`**[0]** may not be the executable name; use [GetModuleFileName](http://msdn.microsoft.com/library/windows/desktop/ms683197) to retrieve the executable name.  \n  \n The last pointer (`argv[argc]`) is **NULL**. (See [getenv](../c-runtime-library/reference/getenv-wgetenv.md) in the *Run-Time Library Reference* for an alternative method for getting environment variable information.)  \n  \n **Microsoft Specific**  \n  \n The `envp` parameter is a pointer to an array of null-terminated strings that represent the values set in the user's environment variables. The `envp` parameter can be declared as an array of pointers to `char` (`char *envp[]`) or as a pointer to pointers to `char` (`char **envp`). In a **wmain** function, the `envp` parameter can be declared as an array of pointers to `wchar_t` (`wchar_t *envp[]`) or as a pointer to pointers to `wchar_t` (`wchar_t **envp`). The end of the array is indicated by a **NULL** \\*pointer. Note that the environment block passed to **main** or **wmain** is a \"frozen\" copy of the current environment. If you subsequently change the environment via a call to _**putenv** or `_wputenv`, the current environment (as returned by `getenv`/`_wgetenv` and the `_environ` or `_wenviron` variables) will change, but the block pointed to by `envp` will not change. The `envp` parameter is ANSI compatible in C, but not in C++.  \n  \n **END Microsoft Specific**  \n  \n## See Also  \n [main Function and Program Execution](../c-language/main-function-and-program-execution.md)"}