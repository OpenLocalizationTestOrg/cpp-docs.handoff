<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ed1ac87af0bda9c6bb15ceb0afccd53d58b647b2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\reference\csecuritydesc-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e2a1841163ed8493ebb4d67b67adb3a9eb6cd3a0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">223f7abd97eb5e8debfe54144b7128c51605cc31</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CSecurityDesc Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CSecurityDesc Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This class is a wrapper for the <bpt id="p1">**</bpt>SECURITY_DESCRIPTOR<ept id="p1">**</ept> structure.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This class and its members cannot be used in applications that execute in the Windows Runtime.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::CSecurityDesc</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The constructor.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::~CSecurityDesc</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The destructor.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::FromString</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Converts a string-format security descriptor into a valid, functional security descriptor.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::GetControl</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Retrieves control information from the security descriptor.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::GetDacl</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Retrieves discretionary access-control list (DACL) information from the security descriptor.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::GetGroup</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Retrieves the primary group information from the security descriptor.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::GetOwner</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Retrieves owner informaton from the security descriptor.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::GetPSECURITY_DESCRIPTOR</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the <bpt id="p1">**</bpt>SECURITY_DESCRIPTOR<ept id="p1">**</ept> structure.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::GetSacl</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Retrieves system access-control list (SACL) information from the security descriptor.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::IsDaclAutoInherited</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Determines if the DACL is configured to support automatic propagation.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::IsDaclDefaulted</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Determines if the security descriptor is configured with a default DACL.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::IsDaclPresent</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Determines if the security descriptor contains a DACL.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::IsDaclProtected</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Determines if the DACL is configured to prevent modifications.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::IsGroupDefaulted</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Determines if the security descriptor's group security identifier (SID) was set by default.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::IsOwnerDefaulted</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Determines if the security descriptor's owner SID was set by default.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::IsSaclAutoInherited</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Determines if the SACL is configured to support automatic propagation.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::IsSaclDefaulted</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Determines if the security descriptor is configured with a default SACL.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::IsSaclPresent</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Determines if the security descriptor contains a SACL.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::IsSaclProtected</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Determines if the SACL is configured to prevent modifications.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::IsSelfRelative</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Determines if the security descriptor is in self-relative format.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::MakeAbsolute</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Call this method to convert the security descriptor to absolute format.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::MakeSelfRelative</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Call this method to convert the security descriptor to self-relative format.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::SetControl</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Sets the control bits of a security descriptor.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::SetDacl</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Sets information in a DACL.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If a DACL is already present in the security descriptor, it is replaced.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::SetGroup</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Sets the primary group information of an absolute format security descriptor, replacing any primary group information already present.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::SetOwner</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Sets the owner information of an absolute format security descriptor, replacing any owner information already present.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::SetSacl</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Sets information in a SACL.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If a SACL is already present in the security descriptor, it is replaced.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::ToString</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Converts a security descriptor to a string format.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::operator const SECURITY_DESCRIPTOR *</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the <bpt id="p1">**</bpt>SECURITY_DESCRIPTOR<ept id="p1">**</ept> structure.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::operator =</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Assignment operator.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>SECURITY_DESCRIPTOR<ept id="p1">**</ept> structure contains the security information associated with an object.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Applications use this structure to set and query an object's security status.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>See also <bpt id="p1">[</bpt>AtlGetSecurityDescriptor<ept id="p1">](http://msdn.microsoft.com/library/233578b8-dcc5-4f51-8e62-7cdcc2ff6b11)</ept>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Applications should not modify the <bpt id="p1">**</bpt>SECURITY_DESCRIPTOR<ept id="p1">**</ept> structure directly, and instead should use the class methods provided.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For an introduction to the access control model in Windows, see <bpt id="p1">[</bpt>Access Control<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa374860)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlsecurity.h</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::CSecurityDesc</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The constructor.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CSecurityDesc`</ph> object or <bpt id="p1">**</bpt>SECURITY_DESCRIPTOR<ept id="p1">**</ept> structure to assign to the new <ph id="ph2">`CSecurityDesc`</ph> object.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CSecurityDesc`</ph> object can optionally be created using a <bpt id="p1">**</bpt>SECURITY_DESCRIPTOR<ept id="p1">**</ept> structure or a previously defined <ph id="ph2">`CSecurityDesc`</ph> object.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::~CSecurityDesc</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The destructor.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The destructor frees all allocated resources.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::FromString</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Converts a string-format security descriptor into a valid, functional security descriptor.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Pointer to a null-terminated string that contains the <bpt id="p1">[</bpt>string-format security descriptor<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa379570)</ept> to be converted.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Returns true on success.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Throws an exception on failure.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The string can be created by using <bpt id="p1">[</bpt>CSecurityDesc::ToString<ept id="p1">](#csecuritydesc__tostring)</ept>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Converting the security descriptor into a string makes it easier to store and transmit.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>This method is only available with Windows 2000 and later because it calls <bpt id="p1">[</bpt>ConvertStringSecurityDescriptorToSecurityDescriptor<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa376401)</ept>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::GetControl</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Retrieves control information from the security descriptor.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>psdc</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">**</bpt>SECURITY_DESCRIPTOR_CONTROL<ept id="p1">**</ept> structure that receives the security descriptor's control information.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Returns true if the method succeeds, false if it fails.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>This method is only meaningful when using Windows 2000 or later, as it calls <bpt id="p1">[</bpt>GetSecurityDescriptorControl<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa446647)</ept>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::GetDacl</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Retrieves discretionary access-control list (DACL) information from the security descriptor.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Pointer to an <ph id="ph1">`CDacl`</ph> structure in which to store a copy of the security descriptor's DACL.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>If a discretionary <bpt id="p1">**</bpt>ACL<ept id="p1">**</ept> exists, the method sets <ph id="ph1">`pDacl`</ph> to the address of the security descriptor's discretionary <bpt id="p2">**</bpt>ACL<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>If a discretionary <bpt id="p1">**</bpt>ACL<ept id="p1">**</ept> does not exist, no value is stored.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Pointer to a value that indicates the presence of a discretionary <bpt id="p1">**</bpt>ACL<ept id="p1">**</ept> in the specified security descriptor.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>If the security descriptor contains a discretionary <bpt id="p1">**</bpt>ACL<ept id="p1">**</ept>, this parameter is set to true.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>If the security descriptor does not contain a discretionary <bpt id="p1">**</bpt>ACL<ept id="p1">**</ept>, this parameter is set to false.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Pointer to a flag set to the value of the SE_DACL_DEFAULTED flag in the <bpt id="p1">**</bpt>SECURITY_DESCRIPTOR_CONTROL<ept id="p1">**</ept> structure if a discretionary <bpt id="p2">**</bpt>ACL<ept id="p2">**</ept> exists for the security descriptor.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>If this flag is true, the discretionary <bpt id="p1">**</bpt>ACL<ept id="p1">**</ept> was retrieved by a default mechanism; if false, the discretionary <bpt id="p2">**</bpt>ACL<ept id="p2">**</ept> was explicitly specified by a user.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Returns true if the method succeeds, false if it fails.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::GetGroup</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Retrieves the primary group information from the security descriptor.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>CSid<ept id="p1">](../../atl/reference/csid-class.md)</ept> (security identifier) that receives a copy of the group stored in the CDacl.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Pointer to a flag set to the value of the SE_GROUP_DEFAULTED flag in the <bpt id="p1">**</bpt>SECURITY_DESCRIPTOR_CONTROL<ept id="p1">**</ept> structure when the method returns.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Returns true if the method succeeds, false if it fails.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::GetOwner</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Retrieves owner informaton from the security descriptor.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>CSid<ept id="p1">](../../atl/reference/csid-class.md)</ept> (security identifier) that receives a copy of the group stored in the CDacl.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Pointer to a flag set to the value of the SE_OWNER_DEFAULTED flag in the <bpt id="p1">**</bpt>SECURITY_DESCRIPTOR_CONTROL<ept id="p1">**</ept> structure when the method returns.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Returns true if the method succeeds, false if it fails.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::GetPSECURITY_DESCRIPTOR</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the <bpt id="p1">**</bpt>SECURITY_DESCRIPTOR<ept id="p1">**</ept> structure.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the <bpt id="p1">[</bpt>SECURITY_DESCRIPTOR<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa379561)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::GetSacl</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Retrieves system access-control list (SACL) information from the security descriptor.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Pointer to an <ph id="ph1">`CSacl`</ph> structure in which to store a copy of the security descriptor's SACL.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>If a system <bpt id="p1">**</bpt>ACL<ept id="p1">**</ept> exists, the method sets <ph id="ph1">`pSacl`</ph> to the address of the security descriptor's system <bpt id="p2">**</bpt>ACL<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>If a system <bpt id="p1">**</bpt>ACL<ept id="p1">**</ept> does not exist, no value is stored.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Pointer to a flag the method sets to indicate the presence of a system <bpt id="p1">**</bpt>ACL<ept id="p1">**</ept> in the specified security descriptor.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>If the security descriptor contains a system <bpt id="p1">**</bpt>ACL<ept id="p1">**</ept>, this parameter is set to true.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>If the security descriptor does not contain a system <bpt id="p1">**</bpt>ACL<ept id="p1">**</ept>, this parameter is set to false.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Pointer to a flag set to the value of the SE_SACL_DEFAULTED flag in the <bpt id="p1">**</bpt>SECURITY_DESCRIPTOR_CONTROL<ept id="p1">**</ept> structure if a system <bpt id="p2">**</bpt>ACL<ept id="p2">**</ept> exists for the security descriptor.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Returns true if the method succeeds, false if it fails.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::IsDaclAutoInherited</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Determines if the discretionary access-control list (DACL) is configured to support automatic propagation.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Returns true if the security descriptor contains a DACL which is set up to support automatic propagation of inheritable access-control entries (ACEs) to existing child objects.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Returns false otherwise.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The system sets this bit when it performs the automatic inheritance algorithm for the object and its existing child objects.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::IsDaclDefaulted</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Determines if the security descriptor is configured with a default discretionary access-control list (DACL).</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Returns true if the security descriptor contains a default DACL, false otherwise.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>This flag can affect how the system treats the DACL, with respect to access-control entry (ACE) inheritance.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>For example, if an object's creator does not specify a DACL, the object receives the default DACL from the creator's access token.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The system ignores this flag if the SE_DACL_PRESENT flag is not set.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>This flag is used to determine how the final DACL on the object is to be computed and is not stored physically in the security descriptor control of the securable object.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>To set this flag, use the <bpt id="p1">[</bpt>CSecurityDesc::SetDacl<ept id="p1">](#csecuritydesc__setdacl)</ept> method.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::IsDaclPresent</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Determines if the security descriptor contains a discretionary access-control list (DACL).</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Returns true if the security descriptor contains a DACL, false otherwise.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>If this flag is not set, or if this flag is set and the DACL is NULL, the security descriptor allows full access to everyone.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>This flag is used to hold the security information specified by a caller until the security descriptor is associated with a securable object.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Once the security descriptor is associated with a securable object, the SE_DACL_PRESENT flag is always set in the security descriptor control.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>To set this flag, use the <bpt id="p1">[</bpt>CSecurityDesc::SetDacl<ept id="p1">](#csecuritydesc__setdacl)</ept> method.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::IsDaclProtected</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Determines if the discretionary access-control list (DACL) is configured to prevent modifications.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Returns true if the DACL is configured to prevent the security descriptor from being modified by inheritable access-control entries (ACEs).</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Returns false otherwise.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>To set this flag, use the <bpt id="p1">[</bpt>CSecurityDesc::SetDacl<ept id="p1">](#csecuritydesc__setdacl)</ept> method.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>This method is only meaningful for Windows 2000 or later, as only Windows 2000 supports automatic propagation of inheritable ACEs.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::IsGroupDefaulted</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Determines if the security descriptor's group security identifier (SID) was set by default.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Returns true if a default mechanism, rather than the original provider of the security descriptor, provided the security descriptor's group SID.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Returns false otherwise.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>To set this flag, use the <bpt id="p1">[</bpt>CSecurityDesc::SetGroup<ept id="p1">](#csecuritydesc__setgroup)</ept> method.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::IsOwnerDefaulted</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Determines if the security descriptor's owner security identifier (SID) was set by default.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Returns true if a default mechanism, rather than the original provider of the security descriptor, provided the security descriptor's owner SID.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Returns false otherwise.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>To set this flag, use the <bpt id="p1">[</bpt>CSecurityDesc::SetOwner<ept id="p1">](#csecuritydesc__setowner)</ept> method.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::IsSaclAutoInherited</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Determines if the system access-control list (SACL) is configured to support automatic propagation.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Returns true if the security descriptor contains a SACL which is set up to support automatic propagation of inheritable access-control entries (ACEs) to existing child objects.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Returns false otherwise.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The system sets this bit when it performs the automatic inheritance algorithm for the object and its existing child objects.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::IsSaclDefaulted</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Determines if the security descriptor is configured with a default system access-control list (SACL).</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Returns true if the security descriptor contains a default SACL, false otherwise.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>This flag can affect how the system treats the SACL, with respect to access-control entry (ACE) inheritance.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The system ignores this flag if the SE_SACL_PRESENT flag is not set.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>To set this flag, use the <bpt id="p1">[</bpt>CSecurityDesc::SetSacl<ept id="p1">](#csecuritydesc__setsacl)</ept> method.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::IsSaclPresent</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Determines if the security descriptor contains a system access-control list (SACL).</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Returns true if the security descriptor contains a SACL, false otherwise.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>To set this flag, use the <bpt id="p1">[</bpt>CSecurityDesc::SetSacl<ept id="p1">](#csecuritydesc__setsacl)</ept> method.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::IsSaclProtected</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Determines if the system access-control list (SACL) is configured to prevent modifications.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Returns true if the SACL is configured to prevent the security descriptor from being modified by inheritable access-control entries (ACEs).</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Returns false otherwise.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>To set this flag, use the <bpt id="p1">[</bpt>CSecurityDesc::SetSacl<ept id="p1">](#csecuritydesc__setsacl)</ept> method.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>This method is only meaningful for Windows 2000 or later, as only Windows 2000 supports automatic propagation of inheritable ACEs.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::IsSelfRelative</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Determines if the security descriptor is in self-relative format.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Returns true if the security descriptor is in self-relative format with all the security information in a contiguous block of memory.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Returns false if the security descriptor is in absolute format.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Absolute and Self-Relative Security Descriptors<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa374807)</ept>.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::MakeAbsolute</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Call this method to convert the security descriptor to absolute format.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Returns true if the method succeeds, false otherwise.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>A security descriptor in absolute format contains pointers to the information it contains, rather than the information itself.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>A security descriptor in self-relative format contains the information in a contiguous block of memory.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>In a self-relative security descriptor, a <bpt id="p1">**</bpt>SECURITY_DESCRIPTOR<ept id="p1">**</ept> structure always starts the information, but the security descriptor's other components can follow the structure in any order.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Instead of using memory addresses, the components of the self-relative security descriptor are identified by offsets from the beginning of the security descriptor.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>This format is useful when a security descriptor must be stored on a disk or transmitted by means of a communications protocol.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Absolute and Self-Relative Security Descriptors<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa374807)</ept>.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::MakeSelfRelative</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Call this method to convert the security descriptor to self-relative format.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Returns true if the method succeeds, false otherwise.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>A security descriptor in absolute format contains pointers to the information it contains, rather than containing the information itself.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>A security descriptor in self-relative format contains the information in a contiguous block of memory.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>In a self-relative security descriptor, a <bpt id="p1">**</bpt>SECURITY_DESCRIPTOR<ept id="p1">**</ept> structure always starts the information, but the security descriptor's other components can follow the structure in any order.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Instead of using memory addresses, the components of the security descriptor are identified by offsets from the beginning of the security descriptor.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>This format is useful when a security descriptor must be stored on a disk or transmitted by means of a communications protocol.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Absolute and Self-Relative Security Descriptors<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa374807)</ept>.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::operator =</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Assignment operator.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>SECURITY_DESCRIPTOR<ept id="p1">**</ept> structure or <ph id="ph1">`CSecurityDesc`</ph> object to assign to the <ph id="ph2">`CSecurityDesc`</ph> object.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Returns the updated <ph id="ph1">`CSecurityDesc`</ph> object.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>CSecurityDesc::operator const SECURITY_DESCRIPTOR *</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Casts a value to a pointer to the <bpt id="p1">**</bpt>SECURITY_DESCRIPTOR<ept id="p1">**</ept> structure.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>```operator const SECURITY_DESCRIPTOR *() const throw();</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>bool SetControl(SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest,  SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet) throw();</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>inline void SetDacl(bool bPresent = true, bool bDefaulted = false) throw(...);</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>bool SetGroup(const CSid&amp; Sid,  bool bDefaulted = false) throw(...);</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>bool SetOwner(const CSid&amp; Sid,  bool bDefaulted = false) throw(...);</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>bool SetSacl(const CSacl&amp; Sacl,  bool bDefaulted = false) throw(...);</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>bool ToString( CString* pstr,  SECURITY_INFORMATION si = OWNER_SECURITY_INFORMATION | GROUP_SECURITY_INFORMATION | DACL_SECURITY_INFORMATION | SACL_SECURITY_INFORMATION) const throw(...);</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>