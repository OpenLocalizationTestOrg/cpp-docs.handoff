{"nodes":[{"pos":[12,50],"content":"cache_chunklist Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"cache_chunklist Class | Microsoft Docs","pos":[0,38]}]},{"content":"cache_chunklist Class","pos":[717,738]},{"pos":[739,871],"content":"Defines a <bpt id=\"p1\">[</bpt>block allocator<ept id=\"p1\">](../standard-library/allocators-header.md)</ept> that allocates and deallocates memory blocks of a single size.","source":"Defines a [block allocator](../standard-library/allocators-header.md) that allocates and deallocates memory blocks of a single size."},{"content":"Syntax","pos":[880,886]},{"content":"Parameters","pos":[984,994]},{"content":"Parameter","pos":[1001,1010]},{"content":"Description","pos":[1011,1022]},{"content":"The number of elements in the array to be allocated.","pos":[1070,1122]},{"content":"Remarks","pos":[1132,1139]},{"pos":[1143,1456],"content":"This template class uses <ph id=\"ph1\">`operator new`</ph> to allocate chunks of raw memory, suballocating blocks to allocate storage for a memory block when needed; it stores deallocated memory blocks in a separate free list for each chunk, and uses <ph id=\"ph2\">`operator delete`</ph> to deallocate a chunk when none of its memory blocks is in use.","source":"This template class uses `operator new` to allocate chunks of raw memory, suballocating blocks to allocate storage for a memory block when needed; it stores deallocated memory blocks in a separate free list for each chunk, and uses `operator delete` to deallocate a chunk when none of its memory blocks is in use."},{"content":"Each memory block holds <ph id=\"ph1\">`Sz`</ph> bytes of usable memory and a pointer to the chunk that it belongs to.","pos":[1463,1561],"source":"Each memory block holds `Sz` bytes of usable memory and a pointer to the chunk that it belongs to."},{"content":"Each chunk holds <ph id=\"ph1\">`Nelts`</ph> memory blocks, three pointers, an int and the data that <ph id=\"ph2\">`operator new`</ph> and <ph id=\"ph3\">`operator delete`</ph> require.","pos":[1562,1688],"source":" Each chunk holds `Nelts` memory blocks, three pointers, an int and the data that `operator new` and `operator delete` require."},{"content":"Constructors","pos":[1698,1710]},{"content":"cache_chunklist","pos":[1732,1747]},{"pos":[1784,1831],"content":"Constructs an object of type <ph id=\"ph1\">`cache_chunklist`</ph>.","source":"Constructs an object of type `cache_chunklist`."},{"content":"Member Functions","pos":[1842,1858]},{"content":"allocate","pos":[1880,1888]},{"content":"Allocates a block of memory.","pos":[1918,1946]},{"content":"deallocate","pos":[1952,1962]},{"content":"Frees a specified number of objects from storage beginning at a specified position.","pos":[1994,2077]},{"content":"Requirements","pos":[2087,2099]},{"pos":[2103,2128],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>allocators&gt;","source":"**Header:** \\<allocators>"},{"pos":[2135,2156],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> stdext","source":"**Namespace:** stdext"},{"pos":[2208,2233],"content":"cache_chunklist::allocate"},{"content":"Allocates a block of memory.","pos":[2237,2265]},{"content":"Parameters","pos":[2323,2333]},{"content":"Parameter","pos":[2340,2349]},{"content":"Description","pos":[2350,2361]},{"content":"The number of elements in the array to be allocated.","pos":[2412,2464]},{"content":"Return Value","pos":[2475,2487]},{"content":"A pointer to the allocated object.","pos":[2491,2525]},{"content":"Remarks","pos":[2535,2542]},{"pos":[2601,2633],"content":"cache_chunklist::cache_chunklist"},{"pos":[2637,2684],"content":"Constructs an object of type <ph id=\"ph1\">`cache_chunklist`</ph>.","source":"Constructs an object of type `cache_chunklist`."},{"content":"Remarks","pos":[2726,2733]},{"pos":[2787,2814],"content":"cache_chunklist::deallocate"},{"content":"Frees a specified number of objects from storage beginning at a specified position.","pos":[2818,2901]},{"content":"Parameters","pos":[2971,2981]},{"content":"Parameter","pos":[2988,2997]},{"content":"Description","pos":[2998,3009]},{"content":"A pointer to the first object to be deallocated from storage.","pos":[3058,3119]},{"content":"The number of objects to be deallocated from storage.","pos":[3132,3185]},{"content":"Remarks","pos":[3196,3203]},{"content":"See Also","pos":[3212,3220]},{"content":"allocators&gt;","pos":[3227,3238],"source":"allocators>"}],"content":"---\ntitle: \"cache_chunklist Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"allocators/stdext::cache_chunklist\"\n  - \"stdext.cache_chunklist\"\n  - \"stdext::cache_chunklist\"\n  - \"cache_chunklist\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"cache_chunklist class\"\nms.assetid: af19eccc-4ae7-4a34-bbb2-81e397424cb9\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# cache_chunklist Class\nDefines a [block allocator](../standard-library/allocators-header.md) that allocates and deallocates memory blocks of a single size.  \n  \n## Syntax  \n  \n```\ntemplate <std::size_t Sz, std::size_t Nelts = 20>  \nclass cache_chunklist\n```  \n  \n#### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`Sz`|The number of elements in the array to be allocated.|  \n  \n## Remarks  \n This template class uses `operator new` to allocate chunks of raw memory, suballocating blocks to allocate storage for a memory block when needed; it stores deallocated memory blocks in a separate free list for each chunk, and uses `operator delete` to deallocate a chunk when none of its memory blocks is in use.  \n  \n Each memory block holds `Sz` bytes of usable memory and a pointer to the chunk that it belongs to. Each chunk holds `Nelts` memory blocks, three pointers, an int and the data that `operator new` and `operator delete` require.  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[cache_chunklist](#cache_chunklist__cache_chunklist)|Constructs an object of type `cache_chunklist`.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[allocate](#cache_chunklist__allocate)|Allocates a block of memory.|  \n|[deallocate](#cache_chunklist__deallocate)|Frees a specified number of objects from storage beginning at a specified position.|  \n  \n## Requirements  \n **Header:** \\<allocators>  \n  \n **Namespace:** stdext  \n  \n##  <a name=\"cache_chunklist__allocate\"></a>  cache_chunklist::allocate  \n Allocates a block of memory.  \n  \n```\nvoid *allocate(std::size_t count);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`count`|The number of elements in the array to be allocated.|  \n  \n### Return Value  \n A pointer to the allocated object.  \n  \n### Remarks  \n  \n##  <a name=\"cache_chunklist__cache_chunklist\"></a>  cache_chunklist::cache_chunklist  \n Constructs an object of type `cache_chunklist`.  \n  \n```\ncache_chunklist();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cache_chunklist__deallocate\"></a>  cache_chunklist::deallocate  \n Frees a specified number of objects from storage beginning at a specified position.  \n  \n```\nvoid deallocate(void* ptr, std::size_t count);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`ptr`|A pointer to the first object to be deallocated from storage.|  \n|`count`|The number of objects to be deallocated from storage.|  \n  \n### Remarks  \n  \n## See Also  \n [\\<allocators>](../standard-library/allocators-header.md)\n\n\n\n"}