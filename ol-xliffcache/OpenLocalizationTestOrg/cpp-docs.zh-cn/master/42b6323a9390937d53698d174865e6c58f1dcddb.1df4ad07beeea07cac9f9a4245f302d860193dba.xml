{"nodes":[{"pos":[12,59],"content":"extern Storage-Class Specifier | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"extern Storage-Class Specifier | Microsoft Docs","pos":[0,47]}]},{"content":"extern Storage-Class Specifier","pos":[772,802]},{"content":"A variable declared with the <ph id=\"ph1\">`extern`</ph> storage-class specifier is a reference to a variable with the same name defined at the external level in any of the source files of the program.","pos":[803,985],"source":"A variable declared with the `extern` storage-class specifier is a reference to a variable with the same name defined at the external level in any of the source files of the program."},{"content":"The internal <ph id=\"ph1\">`extern`</ph> declaration is used to make the external-level variable definition visible within the block.","pos":[986,1100],"source":" The internal `extern` declaration is used to make the external-level variable definition visible within the block."},{"content":"Unless otherwise declared at the external level, a variable declared with the <ph id=\"ph1\">`extern`</ph> keyword is visible only in the block in which it is declared.","pos":[1101,1249],"source":" Unless otherwise declared at the external level, a variable declared with the `extern` keyword is visible only in the block in which it is declared."},{"content":"Example","pos":[1258,1265]},{"content":"This example illustrates internal- and external-level declarations:","pos":[1269,1336]},{"content":"In this example, the variable <ph id=\"ph1\">`i`</ph> is defined at the external level with initial value 1.","pos":[2291,2379],"source":"In this example, the variable `i` is defined at the external level with initial value 1."},{"content":"An <ph id=\"ph1\">`extern`</ph> declaration in the <ph id=\"ph2\">`main`</ph> function is used to declare a reference to the external-level <ph id=\"ph3\">`i`</ph>.","pos":[2380,2484],"source":" An `extern` declaration in the `main` function is used to declare a reference to the external-level `i`."},{"content":"The <bpt id=\"p1\">**</bpt>static<ept id=\"p1\">**</ept> variable <ph id=\"ph1\">`a`</ph> is initialized to 0 by default, since the initializer is omitted.","pos":[2485,2578],"source":" The **static** variable `a` is initialized to 0 by default, since the initializer is omitted."},{"content":"The call to <ph id=\"ph1\">`printf`</ph> prints the values 1, 0, 0, and 0.","pos":[2579,2633],"source":" The call to `printf` prints the values 1, 0, 0, and 0."},{"content":"In the <ph id=\"ph1\">`other`</ph> function, the address of the global variable <ph id=\"ph2\">`i`</ph> is used to initialize the <bpt id=\"p1\">**</bpt>static<ept id=\"p1\">**</ept> pointer variable <ph id=\"ph3\">`external_i`</ph>.","pos":[2640,2771],"source":"In the `other` function, the address of the global variable `i` is used to initialize the **static** pointer variable `external_i`."},{"content":"This works because the global variable has <bpt id=\"p1\">**</bpt>static<ept id=\"p1\">**</ept> lifetime, meaning its address does not change during program execution.","pos":[2772,2897],"source":" This works because the global variable has **static** lifetime, meaning its address does not change during program execution."},{"content":"Next, the variable <ph id=\"ph1\">`i`</ph> is redefined as a local variable with initial value 16.","pos":[2898,2976],"source":" Next, the variable `i` is redefined as a local variable with initial value 16."},{"content":"This redefinition does not affect the value of the external-level <ph id=\"ph1\">`i`</ph>, which is hidden by the use of its name for the local variable.","pos":[2977,3110],"source":" This redefinition does not affect the value of the external-level `i`, which is hidden by the use of its name for the local variable."},{"content":"The value of the global <ph id=\"ph1\">`i`</ph> is now accessible only indirectly within this block, through the pointer <ph id=\"ph2\">`external_i`</ph>.","pos":[3111,3225],"source":" The value of the global `i` is now accessible only indirectly within this block, through the pointer `external_i`."},{"content":"Attempting to assign the address of the <bpt id=\"p1\">**</bpt>auto<ept id=\"p1\">**</ept> variable <ph id=\"ph1\">`i`</ph> to a pointer does not work, since it may be different each time the block is entered.","pos":[3226,3373],"source":" Attempting to assign the address of the **auto** variable `i` to a pointer does not work, since it may be different each time the block is entered."},{"content":"The variable <ph id=\"ph1\">`a`</ph> is declared as a <bpt id=\"p1\">**</bpt>static<ept id=\"p1\">**</ept> variable and initialized to 2.","pos":[3374,3449],"source":" The variable `a` is declared as a **static** variable and initialized to 2."},{"content":"This <ph id=\"ph1\">`a`</ph> does not conflict with the <ph id=\"ph2\">`a`</ph> in <ph id=\"ph3\">`main`</ph>, since <bpt id=\"p1\">**</bpt>static<ept id=\"p1\">**</ept> variables at the internal level are visible only within the block in which they are declared.","pos":[3450,3611],"source":" This `a` does not conflict with the `a` in `main`, since **static** variables at the internal level are visible only within the block in which they are declared."},{"content":"The variable <ph id=\"ph1\">`a`</ph> is increased by 2, giving 4 as the result.","pos":[3618,3677],"source":"The variable `a` is increased by 2, giving 4 as the result."},{"content":"If the <ph id=\"ph1\">`other`</ph> function were called again in the same program, the initial value of <ph id=\"ph2\">`a`</ph> would be 4.","pos":[3678,3777],"source":" If the `other` function were called again in the same program, the initial value of `a` would be 4."},{"content":"Internal <bpt id=\"p1\">**</bpt>static<ept id=\"p1\">**</ept> variables keep their values when the program exits and then reenters the block in which they are declared.","pos":[3778,3904],"source":" Internal **static** variables keep their values when the program exits and then reenters the block in which they are declared."},{"content":"See Also","pos":[3913,3921]},{"content":"Storage-Class Specifiers for Internal-Level Declarations","pos":[3926,3982]}],"content":"---\ntitle: \"extern Storage-Class Specifier | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"extern keyword [C]\"\n  - \"storage class specifiers, extern\"\n  - \"extern keyword [C], storage class specifier\"\n  - \"external linkage, storage-class specifiers\"\n  - \"external linkage, extern modifier\"\nms.assetid: 6e16d927-291f-49e4-986c-9d91a482a441\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# extern Storage-Class Specifier\nA variable declared with the `extern` storage-class specifier is a reference to a variable with the same name defined at the external level in any of the source files of the program. The internal `extern` declaration is used to make the external-level variable definition visible within the block. Unless otherwise declared at the external level, a variable declared with the `extern` keyword is visible only in the block in which it is declared.  \n  \n## Example  \n This example illustrates internal- and external-level declarations:  \n  \n```  \n// extern_StorageClassSpecified.c  \n#include <stdio.h>  \n  \nvoid other( void );  \n  \nint main()  \n{  \n    // Reference to i, defined below:   \n    extern int i;  \n  \n    // Initial value is zero; a is visible only within main:   \n    static int a;  \n  \n    // b is stored in a register, if possible:   \n    register int b = 0;  \n  \n    // Default storage class is auto:   \n    int c = 0;  \n  \n    // Values printed are 1, 0, 0, 0:   \n    printf_s( \"%d\\n%d\\n%d\\n%d\\n\", i, a, b, c );  \n    other();  \n    return;  \n}  \n  \nint i = 1;  \n  \nvoid other( void )  \n{  \n    // Address of global i assigned to pointer variable:  \n    static int *external_i = &i;  \n  \n    // i is redefined; global i no longer visible:   \n    int i = 16;  \n  \n    // This a is visible only within the other function:   \n    static int a = 2;  \n  \n    a += 2;  \n    // Values printed are 16, 4, and 1:  \n    printf_s( \"%d\\n%d\\n%d\\n\", i, a, *external_i );  \n}  \n```  \n  \n In this example, the variable `i` is defined at the external level with initial value 1. An `extern` declaration in the `main` function is used to declare a reference to the external-level `i`. The **static** variable `a` is initialized to 0 by default, since the initializer is omitted. The call to `printf` prints the values 1, 0, 0, and 0.  \n  \n In the `other` function, the address of the global variable `i` is used to initialize the **static** pointer variable `external_i`. This works because the global variable has **static** lifetime, meaning its address does not change during program execution. Next, the variable `i` is redefined as a local variable with initial value 16. This redefinition does not affect the value of the external-level `i`, which is hidden by the use of its name for the local variable. The value of the global `i` is now accessible only indirectly within this block, through the pointer `external_i`. Attempting to assign the address of the **auto** variable `i` to a pointer does not work, since it may be different each time the block is entered. The variable `a` is declared as a **static** variable and initialized to 2. This `a` does not conflict with the `a` in `main`, since **static** variables at the internal level are visible only within the block in which they are declared.  \n  \n The variable `a` is increased by 2, giving 4 as the result. If the `other` function were called again in the same program, the initial value of `a` would be 4. Internal **static** variables keep their values when the program exits and then reenters the block in which they are declared.  \n  \n## See Also  \n [Storage-Class Specifiers for Internal-Level Declarations](../c-language/storage-class-specifiers-for-internal-level-declarations.md)"}