{"nodes":[{"pos":[12,45],"content":"CCmdTarget Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CCmdTarget Class | Microsoft Docs","pos":[0,33]}]},{"content":"CCmdTarget Class","pos":[730,746]},{"content":"The base class for the Microsoft Foundation Class Library message-map architecture.","pos":[747,830]},{"content":"Syntax","pos":[839,845]},{"content":"Members","pos":[905,912]},{"content":"Public Constructors","pos":[922,941]},{"content":"Name","pos":[948,952]},{"content":"Description","pos":[953,964]},{"content":"CCmdTarget::CCmdTarget","pos":[1003,1025]},{"pos":[1052,1085],"content":"Constructs a <ph id=\"ph1\">`CCmdTarget`</ph> object.","source":"Constructs a `CCmdTarget` object."},{"content":"Public Methods","pos":[1096,1110]},{"content":"Name","pos":[1117,1121]},{"content":"Description","pos":[1122,1133]},{"content":"CCmdTarget::BeginWaitCursor","pos":[1172,1199]},{"content":"Displays the cursor as an hourglass cursor.","pos":[1231,1274]},{"content":"CCmdTarget::DoOleVerb","pos":[1280,1301]},{"content":"Causes an action specified by an OLE verb to be performed.","pos":[1327,1385]},{"content":"CCmdTarget::EnableAutomation","pos":[1391,1419]},{"pos":[1452,1502],"content":"Allows OLE automation for the <ph id=\"ph1\">`CCmdTarget`</ph> object.","source":"Allows OLE automation for the `CCmdTarget` object."},{"content":"CCmdTarget::EnableConnections","pos":[1508,1537]},{"content":"Enables event firing over connection points.","pos":[1571,1615]},{"content":"CCmdTarget::EnableTypeLib","pos":[1621,1646]},{"content":"Enables an object's type library.","pos":[1676,1709]},{"content":"CCmdTarget::EndWaitCursor","pos":[1715,1740]},{"content":"Returns to the previous cursor.","pos":[1770,1801]},{"content":"CCmdTarget::EnumOleVerbs","pos":[1807,1831]},{"content":"Enumerates an object's OLE verbs.","pos":[1860,1893]},{"content":"CCmdTarget::FromIDispatch","pos":[1899,1924]},{"pos":[1954,2039],"content":"Returns a pointer to the <ph id=\"ph1\">`CCmdTarget`</ph> object associated with the <ph id=\"ph2\">`IDispatch`</ph> pointer.","source":"Returns a pointer to the `CCmdTarget` object associated with the `IDispatch` pointer."},{"content":"CCmdTarget::GetDispatchIID","pos":[2045,2071]},{"content":"Gets the primary dispatch interface ID.","pos":[2102,2141]},{"content":"CCmdTarget::GetIDispatch","pos":[2147,2171]},{"pos":[2200,2284],"content":"Returns a pointer to the <ph id=\"ph1\">`IDispatch`</ph> object associated with the <ph id=\"ph2\">`CCmdTarget`</ph> object.","source":"Returns a pointer to the `IDispatch` object associated with the `CCmdTarget` object."},{"content":"CCmdTarget::GetTypeInfoCount","pos":[2290,2318]},{"content":"Retrieves the number of type information interfaces that an object provides.","pos":[2351,2427]},{"content":"CCmdTarget::GetTypeInfoOfGuid","pos":[2433,2462]},{"content":"Retrieves the type description that corresponds to the specified GUID.","pos":[2496,2566]},{"content":"CCmdTarget::GetTypeLib","pos":[2572,2594]},{"content":"Gets a pointer to a type library.","pos":[2621,2654]},{"content":"CCmdTarget::GetTypeLibCache","pos":[2660,2687]},{"content":"Gets the type library cache.","pos":[2719,2747]},{"content":"CCmdTarget::IsInvokeAllowed","pos":[2753,2780]},{"content":"Enables automation method invocation.","pos":[2812,2849]},{"content":"CCmdTarget::IsResultExpected","pos":[2855,2883]},{"content":"Returns nonzero if an automation function should return a value.","pos":[2916,2980]},{"content":"CCmdTarget::OnCmdMsg","pos":[2986,3006]},{"content":"Routes and dispatches command messages.","pos":[3031,3070]},{"content":"CCmdTarget::OnFinalRelease","pos":[3076,3102]},{"content":"Cleans up after the last OLE reference is released.","pos":[3133,3184]},{"content":"CCmdTarget::RestoreWaitCursor","pos":[3190,3219]},{"content":"Restores the hourglass cursor.","pos":[3253,3283]},{"content":"Remarks","pos":[3293,3300]},{"content":"A message map routes commands or messages to the member functions you write to handle them.","pos":[3304,3395]},{"content":"(A command is a message from a menu item, command button, or accelerator key.)","pos":[3396,3474]},{"content":"Key framework classes derived from <ph id=\"ph1\">`CCmdTarget`</ph> include <bpt id=\"p1\">[</bpt>CView<ept id=\"p1\">](../../mfc/reference/cview-class.md)</ept>, <bpt id=\"p2\">[</bpt>CWinApp<ept id=\"p2\">](../../mfc/reference/cwinapp-class.md)</ept>, <bpt id=\"p3\">[</bpt>CDocument<ept id=\"p3\">](../../mfc/reference/cdocument-class.md)</ept>, <bpt id=\"p4\">[</bpt>CWnd<ept id=\"p4\">](../../mfc/reference/cwnd-class.md)</ept>, and <bpt id=\"p5\">[</bpt>CFrameWnd<ept id=\"p5\">](../../mfc/reference/cframewnd-class.md)</ept>.","pos":[3481,3783],"source":"Key framework classes derived from `CCmdTarget` include [CView](../../mfc/reference/cview-class.md), [CWinApp](../../mfc/reference/cwinapp-class.md), [CDocument](../../mfc/reference/cdocument-class.md), [CWnd](../../mfc/reference/cwnd-class.md), and [CFrameWnd](../../mfc/reference/cframewnd-class.md)."},{"content":"If you intend for a new class to handle messages, derive the class from one of these <ph id=\"ph1\">`CCmdTarget`</ph>-derived classes.","pos":[3784,3898],"source":" If you intend for a new class to handle messages, derive the class from one of these `CCmdTarget`-derived classes."},{"content":"You will rarely derive a class from <ph id=\"ph1\">`CCmdTarget`</ph> directly.","pos":[3899,3957],"source":" You will rarely derive a class from `CCmdTarget` directly."},{"pos":[3964,4179],"content":"For an overview of command targets and <ph id=\"ph1\">`OnCmdMsg`</ph> routing, see <bpt id=\"p1\">[</bpt>Command Targets<ept id=\"p1\">](../../mfc/command-targets.md)</ept>, <bpt id=\"p2\">[</bpt>Command Routing<ept id=\"p2\">](../../mfc/command-routing.md)</ept>, and <bpt id=\"p3\">[</bpt>Mapping Messages<ept id=\"p3\">](../../mfc/mapping-messages.md)</ept>.","source":"For an overview of command targets and `OnCmdMsg` routing, see [Command Targets](../../mfc/command-targets.md), [Command Routing](../../mfc/command-routing.md), and [Mapping Messages](../../mfc/mapping-messages.md)."},{"content":"includes member functions that handle the display of an hourglass cursor.","pos":[4199,4272]},{"content":"Display the hourglass cursor when you expect a command to take a noticeable time interval to execute.","pos":[4273,4374]},{"content":"Dispatch maps, similar to message maps, are used to expose OLE automation <ph id=\"ph1\">`IDispatch`</ph> functionality.","pos":[4381,4481],"source":"Dispatch maps, similar to message maps, are used to expose OLE automation `IDispatch` functionality."},{"content":"By exposing this interface, other applications (such as Visual Basic) can call into your application.","pos":[4482,4583]},{"content":"Inheritance Hierarchy","pos":[4592,4613]},{"content":"CObject","pos":[4618,4625]},{"content":"Requirements","pos":[4692,4704]},{"pos":[4708,4728],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxwin.h","source":"**Header:** afxwin.h"},{"pos":[4782,4809],"content":"CCmdTarget::BeginWaitCursor"},{"content":"Call this function to display the cursor as an hourglass when you expect a command to take a noticeable time interval to execute.","pos":[4813,4942]},{"content":"Remarks","pos":[4991,4998]},{"pos":[5002,5138],"content":"The framework calls this function to show the user that it is busy, such as when a <bpt id=\"p1\">**</bpt>CDocument<ept id=\"p1\">**</ept> object loads or saves itself to a file.","source":"The framework calls this function to show the user that it is busy, such as when a **CDocument** object loads or saves itself to a file."},{"pos":[5145,5313],"content":"The actions of <ph id=\"ph1\">`BeginWaitCursor`</ph> are not always effective outside of a single message handler as other actions, such as <ph id=\"ph2\">`OnSetCursor`</ph> handling, could change the cursor.","source":"The actions of `BeginWaitCursor` are not always effective outside of a single message handler as other actions, such as `OnSetCursor` handling, could change the cursor."},{"pos":[5320,5372],"content":"Call <ph id=\"ph1\">`EndWaitCursor`</ph> to restore the previous cursor.","source":"Call `EndWaitCursor` to restore the previous cursor."},{"content":"Example","pos":[5382,5389]},{"pos":[5404,5421],"content":"NVC_MFCDocView#43"},{"pos":[5522,5544],"content":"CCmdTarget::CCmdTarget"},{"pos":[5548,5581],"content":"Constructs a <ph id=\"ph1\">`CCmdTarget`</ph> object.","source":"Constructs a `CCmdTarget` object."},{"pos":[5658,5679],"content":"CCmdTarget::DoOleVerb"},{"content":"Causes an action specified by an OLE verb to be performed.","pos":[5683,5741]},{"content":"Parameters","pos":[5863,5873]},{"content":"Numerical identifier of the verb.","pos":[5888,5921]},{"content":"Pointer to the <bpt id=\"p1\">[</bpt>MSG<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms644958)</ept> structure describing the event (such as a double-click) that invoked the verb.","pos":[5939,6098],"source":" Pointer to the [MSG](http://msdn.microsoft.com/library/windows/desktop/ms644958) structure describing the event (such as a double-click) that invoked the verb."},{"content":"Handle of the document window containing the object.","pos":[6121,6173]},{"content":"Pointer to the <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure containing the coordinates, in pixels, that define an object's bounding rectangle in <bpt id=\"p2\">*</bpt>hwndParent<ept id=\"p2\">*</ept>.","pos":[6192,6382],"source":" Pointer to the [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure containing the coordinates, in pixels, that define an object's bounding rectangle in *hwndParent*."},{"content":"Return Value","pos":[6392,6404]},{"content":"TRUE if successful, otherwise FALSE.","pos":[6408,6444]},{"content":"Remarks","pos":[6454,6461]},{"content":"This member function is basically an implementation of <bpt id=\"p1\">[</bpt>IOleObject::DoVerb<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms694508)</ept>.","pos":[6465,6601],"source":"This member function is basically an implementation of [IOleObject::DoVerb](http://msdn.microsoft.com/library/windows/desktop/ms694508)."},{"content":"The possible actions are enumerated by <bpt id=\"p1\">[</bpt>CCmdTarget::EnumOleVerbs<ept id=\"p1\">](#ccmdtarget__enumoleverbs)</ept>.","pos":[6602,6695],"source":" The possible actions are enumerated by [CCmdTarget::EnumOleVerbs](#ccmdtarget__enumoleverbs)."},{"pos":[6750,6778],"content":"CCmdTarget::EnableAutomation"},{"content":"Call this function to enable OLE automation for an object.","pos":[6782,6840]},{"content":"Remarks","pos":[6890,6897]},{"content":"This function is typically called from the constructor of your object and should only be called if a dispatch map has been declared for the class.","pos":[6901,7047]},{"content":"For more information on automation see the articles <bpt id=\"p1\">[</bpt>Automation Clients<ept id=\"p1\">](../../mfc/automation-clients.md)</ept> and <bpt id=\"p2\">[</bpt>Automation Servers<ept id=\"p2\">](../../mfc/automation-servers.md)</ept>.","pos":[7048,7212],"source":" For more information on automation see the articles [Automation Clients](../../mfc/automation-clients.md) and [Automation Servers](../../mfc/automation-servers.md)."},{"pos":[7268,7297],"content":"CCmdTarget::EnableConnections"},{"content":"Enables event firing over connection points.","pos":[7301,7345]},{"content":"Remarks","pos":[7396,7403]},{"content":"To enable connection points, call this member function in the constructor of your derived class.","pos":[7407,7503]},{"pos":[7555,7580],"content":"CCmdTarget::EnableTypeLib"},{"content":"Enables an object's type library.","pos":[7584,7617]},{"content":"Remarks","pos":[7664,7671]},{"content":"Call this member function in the constructor of your <ph id=\"ph1\">`CCmdTarget`</ph>-derived object if it provides type information.","pos":[7675,7788],"source":"Call this member function in the constructor of your `CCmdTarget`-derived object if it provides type information."},{"content":"For more information, see Knowledge Base article Q185720, \"HOWTO: Provide Type Information From an MFC Automation Server.\"","pos":[7789,7911]},{"content":"Knowledge Base articles are available in the MSDN Library Visual Studio documentation or at <bpt id=\"p1\">[</bpt>http://support.microsoft.com<ept id=\"p1\">](http://support.microsoft.com/)</ept>.","pos":[7912,8066],"source":" Knowledge Base articles are available in the MSDN Library Visual Studio documentation or at [http://support.microsoft.com](http://support.microsoft.com/)."},{"pos":[8118,8143],"content":"CCmdTarget::EndWaitCursor"},{"pos":[8147,8285],"content":"Call this function after you have called the <ph id=\"ph1\">`BeginWaitCursor`</ph> member function to return from the hourglass cursor to the previous cursor.","source":"Call this function after you have called the `BeginWaitCursor` member function to return from the hourglass cursor to the previous cursor."},{"content":"Remarks","pos":[8332,8339]},{"content":"The framework also calls this member function after it has called the hourglass cursor.","pos":[8343,8430]},{"content":"Example","pos":[8440,8447]},{"pos":[8462,8479],"content":"NVC_MFCDocView#43"},{"pos":[8582,8606],"content":"CCmdTarget::EnumOleVerbs"},{"content":"Enumerates an object's OLE verbs.","pos":[8610,8643]},{"content":"Parameters","pos":[8717,8727]},{"content":"A pointer to a pointer to an <bpt id=\"p1\">[</bpt>IEnumOLEVERB<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms695084)</ept> interface.","pos":[8750,8864],"source":" A pointer to a pointer to an [IEnumOLEVERB](http://msdn.microsoft.com/library/windows/desktop/ms695084) interface."},{"content":"Return Value","pos":[8874,8886]},{"pos":[8890,9043],"content":"TRUE if the object supports at least one OLE verb (in which case <ph id=\"ph1\">\\*</ph> <ph id=\"ph2\">`ppenumOleVerb`</ph> points to an <bpt id=\"p1\">**</bpt>IEnumOLEVERB<ept id=\"p1\">**</ept> enumerator interface), otherwise FALSE.","source":"TRUE if the object supports at least one OLE verb (in which case \\* `ppenumOleVerb` points to an **IEnumOLEVERB** enumerator interface), otherwise FALSE."},{"content":"Remarks","pos":[9053,9060]},{"pos":[9064,9203],"content":"This member function is basically an implementation of <bpt id=\"p1\">[</bpt>IOleObject::EnumVerbs<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms692781)</ept>.","source":"This member function is basically an implementation of [IOleObject::EnumVerbs](http://msdn.microsoft.com/library/windows/desktop/ms692781)."},{"pos":[9255,9280],"content":"CCmdTarget::FromIDispatch"},{"pos":[9284,9474],"content":"Call this function to map an <ph id=\"ph1\">`IDispatch`</ph> pointer, received from automation member functions of a class, into the <ph id=\"ph2\">`CCmdTarget`</ph> object that implements the interfaces of the <ph id=\"ph3\">`IDispatch`</ph> object.","source":"Call this function to map an `IDispatch` pointer, received from automation member functions of a class, into the `CCmdTarget` object that implements the interfaces of the `IDispatch` object."},{"content":"Parameters","pos":[9563,9573]},{"content":"A pointer to an <ph id=\"ph1\">`IDispatch`</ph> object.","pos":[9593,9628],"source":" A pointer to an `IDispatch` object."},{"content":"Return Value","pos":[9638,9650]},{"content":"A pointer to the <ph id=\"ph1\">`CCmdTarget`</ph> object associated with <ph id=\"ph2\">`lpDispatch`</ph>.","pos":[9654,9720],"source":"A pointer to the `CCmdTarget` object associated with `lpDispatch`."},{"content":"This function returns <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if the <ph id=\"ph1\">`IDispatch`</ph> object is not recognized as a Microsoft Foundation Class <ph id=\"ph2\">`IDispatch`</ph> object.","pos":[9721,9847],"source":" This function returns **NULL** if the `IDispatch` object is not recognized as a Microsoft Foundation Class `IDispatch` object."},{"content":"Remarks","pos":[9857,9864]},{"pos":[9868,9959],"content":"The result of this function is the inverse of a call to the member function <ph id=\"ph1\">`GetIDispatch`</ph>.","source":"The result of this function is the inverse of a call to the member function `GetIDispatch`."},{"pos":[10012,10038],"content":"CCmdTarget::GetDispatchIID"},{"content":"Gets the primary dispatch interface ID.","pos":[10042,10081]},{"content":"Parameters","pos":[10146,10156]},{"content":"pIID","pos":[10161,10165]},{"content":"A pointer to an interface ID (a <bpt id=\"p1\">[</bpt>GUID<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa373931)</ept>).","pos":[10170,10270],"source":" A pointer to an interface ID (a [GUID](http://msdn.microsoft.com/library/windows/desktop/aa373931))."},{"content":"Return Value","pos":[10280,10292]},{"content":"TRUE if successful, otherwise FALSE.","pos":[10296,10332]},{"content":"If successful, <ph id=\"ph1\">\\*</ph> <bpt id=\"p1\">*</bpt>pIID<ept id=\"p1\">*</ept> is set to the primary dispatch interface ID.","pos":[10333,10402],"source":" If successful, \\* *pIID* is set to the primary dispatch interface ID."},{"content":"Remarks","pos":[10412,10419]},{"content":"Derived classes should override this member function (if not overridden, <ph id=\"ph1\">`GetDispatchIID`</ph> returns FALSE).","pos":[10423,10528],"source":"Derived classes should override this member function (if not overridden, `GetDispatchIID` returns FALSE)."},{"content":"See <bpt id=\"p1\">[</bpt>COleControl<ept id=\"p1\">](../../mfc/reference/colecontrol-class.md)</ept>.","pos":[10529,10589],"source":" See [COleControl](../../mfc/reference/colecontrol-class.md)."},{"content":"For more information, see Knowledge Base article Q185720, \"HOWTO: Provide Type Information From an MFC Automation Server.\"","pos":[10596,10718]},{"content":"Knowledge Base articles are available in the MSDN Library Visual Studio documentation or at <bpt id=\"p1\">[</bpt>http://support.microsoft.com<ept id=\"p1\">](http://support.microsoft.com/)</ept>.","pos":[10719,10873],"source":" Knowledge Base articles are available in the MSDN Library Visual Studio documentation or at [http://support.microsoft.com](http://support.microsoft.com/)."},{"pos":[10924,10948],"content":"CCmdTarget::GetIDispatch"},{"pos":[10952,11128],"content":"Call this member function to retrieve the <ph id=\"ph1\">`IDispatch`</ph> pointer from an automation method that either returns an <ph id=\"ph2\">`IDispatch`</ph> pointer or takes an <ph id=\"ph3\">`IDispatch`</ph> pointer by reference.","source":"Call this member function to retrieve the `IDispatch` pointer from an automation method that either returns an `IDispatch` pointer or takes an `IDispatch` pointer by reference."},{"content":"Parameters","pos":[11192,11202]},{"content":"bAddRef","pos":[11207,11214]},{"content":"Specifies whether to increment the reference count for the object.","pos":[11219,11285]},{"content":"Return Value","pos":[11295,11307]},{"pos":[11311,11362],"content":"The <ph id=\"ph1\">`IDispatch`</ph> pointer associated with the object.","source":"The `IDispatch` pointer associated with the object."},{"content":"Remarks","pos":[11372,11379]},{"content":"For objects that call <ph id=\"ph1\">`EnableAutomation`</ph> in their constructors, making them automation enabled, this function returns a pointer to the Foundation Class implementation of <ph id=\"ph2\">`IDispatch`</ph> that is used by clients who communicate via the <ph id=\"ph3\">`IDispatch`</ph> interface.","pos":[11383,11635],"source":"For objects that call `EnableAutomation` in their constructors, making them automation enabled, this function returns a pointer to the Foundation Class implementation of `IDispatch` that is used by clients who communicate via the `IDispatch` interface."},{"content":"Calling this function automatically adds a reference to the pointer, so it is not necessary to make a call to <bpt id=\"p1\">[</bpt>IUnknown::AddRef<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms691379)</ept>.","pos":[11636,11825],"source":" Calling this function automatically adds a reference to the pointer, so it is not necessary to make a call to [IUnknown::AddRef](http://msdn.microsoft.com/library/windows/desktop/ms691379)."},{"pos":[11880,11908],"content":"CCmdTarget::GetTypeInfoCount"},{"content":"Retrieves the number of type information interfaces that an object provides.","pos":[11912,11988]},{"content":"Return Value","pos":[12046,12058]},{"content":"The number of type information interfaces.","pos":[12062,12104]},{"content":"Remarks","pos":[12114,12121]},{"pos":[12125,12267],"content":"This member function basically implements <bpt id=\"p1\">[</bpt>IDispatch::GetTypeInfoCount<ept id=\"p1\">](http://msdn.microsoft.com/en-us/da876d53-cb8a-465c-a43e-c0eb272e2a12)</ept>.","source":"This member function basically implements [IDispatch::GetTypeInfoCount](http://msdn.microsoft.com/en-us/da876d53-cb8a-465c-a43e-c0eb272e2a12)."},{"content":"Derived classes should override this function to return the number of type information interfaces provided (either 0 or 1).","pos":[12274,12397]},{"content":"If not overridden, <bpt id=\"p1\">**</bpt>GetTypeInfoCount<ept id=\"p1\">**</ept> returns 0.","pos":[12398,12448],"source":" If not overridden, **GetTypeInfoCount** returns 0."},{"content":"To override, use the <bpt id=\"p1\">[</bpt>IMPLEMENT_OLETYPELIB<ept id=\"p1\">](../../mfc/reference/type-library-access.md#implement_oletypelib)</ept> macro, which also implements <ph id=\"ph1\">`GetTypeLib`</ph> and <ph id=\"ph2\">`GetTypeLibCache`</ph>.","pos":[12449,12622],"source":" To override, use the [IMPLEMENT_OLETYPELIB](../../mfc/reference/type-library-access.md#implement_oletypelib) macro, which also implements `GetTypeLib` and `GetTypeLibCache`."},{"pos":[12678,12707],"content":"CCmdTarget::GetTypeInfoOfGuid"},{"content":"Retrieves the type description that corresponds to the specified GUID.","pos":[12711,12781]},{"content":"Parameters","pos":[12903,12913]},{"content":"A locale identifier ( <ph id=\"ph1\">`LCID`</ph>).","pos":[12927,12957],"source":" A locale identifier ( `LCID`)."},{"content":"The <bpt id=\"p1\">[</bpt>GUID<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa373931)</ept> of the type description.","pos":[12974,13069],"source":" The [GUID](http://msdn.microsoft.com/library/windows/desktop/aa373931) of the type description."},{"content":"Pointer to a pointer to the <ph id=\"ph1\">`ITypeInfo`</ph> interface.","pos":[13092,13142],"source":" Pointer to a pointer to the `ITypeInfo` interface."},{"content":"Return Value","pos":[13152,13164]},{"content":"An HRESULT indicating the success or failure of the call.","pos":[13168,13225]},{"content":"If successful, * <ph id=\"ph1\">`ppTypeInfo`</ph> points to the type information interface.","pos":[13226,13297],"source":" If successful, * `ppTypeInfo` points to the type information interface."},{"pos":[13346,13368],"content":"CCmdTarget::GetTypeLib"},{"content":"Gets a pointer to a type library.","pos":[13372,13405]},{"content":"Parameters","pos":[13502,13512]},{"content":"A locale identifier ( <ph id=\"ph1\">`LCID`</ph>).","pos":[13526,13556],"source":" A locale identifier ( `LCID`)."},{"content":"A pointer to a pointer to the <ph id=\"ph1\">`ITypeLib`</ph> interface.","pos":[13578,13629],"source":" A pointer to a pointer to the `ITypeLib` interface."},{"content":"Return Value","pos":[13639,13651]},{"content":"An HRESULT indicating the success or failure of the call.","pos":[13655,13712]},{"content":"If successful, * <ph id=\"ph1\">`ppTypeLib`</ph> points to the type library interface.","pos":[13713,13779],"source":" If successful, * `ppTypeLib` points to the type library interface."},{"content":"Remarks","pos":[13789,13796]},{"content":"Derived classes should override this member function (if not overridden, <ph id=\"ph1\">`GetTypeLib`</ph> returns TYPE_E_CANTLOADLIBRARY).","pos":[13800,13918],"source":"Derived classes should override this member function (if not overridden, `GetTypeLib` returns TYPE_E_CANTLOADLIBRARY)."},{"content":"Use the <bpt id=\"p1\">[</bpt>IMPLEMENT_OLETYPELIB<ept id=\"p1\">](../../mfc/reference/type-library-access.md#implement_oletypelib)</ept> macro, which also implements <ph id=\"ph1\">`GetTypeInfoCount`</ph> and <ph id=\"ph2\">`GetTypeLibCache`</ph>.","pos":[13919,14085],"source":" Use the [IMPLEMENT_OLETYPELIB](../../mfc/reference/type-library-access.md#implement_oletypelib) macro, which also implements `GetTypeInfoCount` and `GetTypeLibCache`."},{"pos":[14139,14166],"content":"CCmdTarget::GetTypeLibCache"},{"content":"Gets the type library cache.","pos":[14170,14198]},{"content":"Return Value","pos":[14265,14277]},{"pos":[14281,14321],"content":"A pointer to a <bpt id=\"p1\">**</bpt>CTypeLibCache<ept id=\"p1\">**</ept> object.","source":"A pointer to a **CTypeLibCache** object."},{"content":"Remarks","pos":[14331,14338]},{"content":"Derived classes should override this member function (if not overridden, <bpt id=\"p1\">**</bpt>GetTypeLibCache<ept id=\"p1\">**</ept> returns NULL).","pos":[14342,14449],"source":"Derived classes should override this member function (if not overridden, **GetTypeLibCache** returns NULL)."},{"content":"Use the <bpt id=\"p1\">[</bpt>IMPLEMENT_OLETYPELIB<ept id=\"p1\">](../../mfc/reference/type-library-access.md#implement_oletypelib)</ept> macro, which also implements <ph id=\"ph1\">`GetTypeInfoCount`</ph> and <ph id=\"ph2\">`GetTypeLib`</ph>.","pos":[14450,14611],"source":" Use the [IMPLEMENT_OLETYPELIB](../../mfc/reference/type-library-access.md#implement_oletypelib) macro, which also implements `GetTypeInfoCount` and `GetTypeLib`."},{"pos":[14665,14692],"content":"CCmdTarget::IsInvokeAllowed"},{"pos":[14696,14851],"content":"This function is called by MFC's implementation of <bpt id=\"p1\">**</bpt>IDispatch::Invoke<ept id=\"p1\">**</ept> to determine if a given automation method (identified by <ph id=\"ph1\">`dispid`</ph>) can be invoked.","source":"This function is called by MFC's implementation of **IDispatch::Invoke** to determine if a given automation method (identified by `dispid`) can be invoked."},{"content":"Parameters","pos":[14921,14931]},{"content":"A dispatch ID.","pos":[14947,14961]},{"content":"Return Value","pos":[14971,14983]},{"content":"TRUE if the method can be invoked, otherwise FALSE.","pos":[14987,15038]},{"content":"Remarks","pos":[15048,15055]},{"pos":[15059,15188],"content":"If <ph id=\"ph1\">`IsInvokeAllowed`</ph> returns TRUE, <bpt id=\"p1\">**</bpt>Invoke<ept id=\"p1\">**</ept> proceeds to call the method; otherwise, <ph id=\"ph2\">`Invoke`</ph> will fail, returning E_UNEXPECTED.","source":"If `IsInvokeAllowed` returns TRUE, **Invoke** proceeds to call the method; otherwise, `Invoke` will fail, returning E_UNEXPECTED."},{"content":"Derived classes can override this function to return appropriate values (if not overridden, <ph id=\"ph1\">`IsInvokeAllowed`</ph> returns TRUE).","pos":[15195,15319],"source":"Derived classes can override this function to return appropriate values (if not overridden, `IsInvokeAllowed` returns TRUE)."},{"content":"See in particular <bpt id=\"p1\">[</bpt>COleControl::IsInvokeAllowed<ept id=\"p1\">](../../mfc/reference/colecontrol-class.md#colecontrol__isinvokeallowed)</ept>.","pos":[15320,15440],"source":" See in particular [COleControl::IsInvokeAllowed](../../mfc/reference/colecontrol-class.md#colecontrol__isinvokeallowed)."},{"pos":[15495,15523],"content":"CCmdTarget::IsResultExpected"},{"pos":[15527,15643],"content":"Use <ph id=\"ph1\">`IsResultExpected`</ph> to ascertain whether a client expects a return value from its call to an automation function.","source":"Use `IsResultExpected` to ascertain whether a client expects a return value from its call to an automation function."},{"content":"Return Value","pos":[15693,15705]},{"content":"Nonzero if an automation function should return a value; otherwise 0.","pos":[15709,15778]},{"content":"Remarks","pos":[15788,15795]},{"content":"The OLE interface supplies information to MFC about whether the client is using or ignoring the result of a function call, and MFC in turn uses this information to determine the result of a call to <ph id=\"ph1\">`IsResultExpected`</ph>.","pos":[15799,16016],"source":"The OLE interface supplies information to MFC about whether the client is using or ignoring the result of a function call, and MFC in turn uses this information to determine the result of a call to `IsResultExpected`."},{"content":"If production of a return value is time- or resource-intensive, you can increase efficiency by calling this function before computing the return value.","pos":[16017,16168]},{"content":"This function returns 0 only once so that you will get valid return values from other automation functions if you call them from the automation function that the client has called.","pos":[16175,16355]},{"pos":[16381,16467],"content":"returns a nonzero value if called when an automation function call is not in progress."},{"pos":[16514,16534],"content":"CCmdTarget::OnCmdMsg"},{"content":"Called by the framework to route and dispatch command messages and to handle the update of command user-interface objects.","pos":[16538,16660]},{"content":"Parameters","pos":[16800,16810]},{"content":"Contains the command ID.","pos":[16823,16847]},{"content":"Identifies the command notification code.","pos":[16865,16906]},{"content":"See <bpt id=\"p1\">**</bpt>Remarks<ept id=\"p1\">**</ept> for more information about values for <ph id=\"ph1\">`nCode`</ph>.","pos":[16907,16969],"source":" See **Remarks** for more information about values for `nCode`."},{"content":"Used according to the value of <ph id=\"ph1\">`nCode`</ph>.","pos":[16988,17027],"source":" Used according to the value of `nCode`."},{"content":"See <bpt id=\"p1\">**</bpt>Remarks<ept id=\"p1\">**</ept> for more information about <ph id=\"ph1\">`pExtra`</ph>.","pos":[17028,17080],"source":" See **Remarks** for more information about `pExtra`."},{"content":"If not <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`OnCmdMsg`</ph> fills in the <bpt id=\"p2\">**</bpt>pTarget<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>pmf<ept id=\"p3\">**</ept> members of the <ph id=\"ph2\">`pHandlerInfo`</ph> structure instead of dispatching the command.","pos":[17105,17245],"source":" If not **NULL**, `OnCmdMsg` fills in the **pTarget** and **pmf** members of the `pHandlerInfo` structure instead of dispatching the command."},{"content":"Typically, this parameter should be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[17246,17291],"source":" Typically, this parameter should be **NULL**."},{"content":"Return Value","pos":[17301,17313]},{"content":"Nonzero if the message is handled; otherwise 0.","pos":[17317,17364]},{"content":"Remarks","pos":[17374,17381]},{"content":"This is the main implementation routine of the framework command architecture.","pos":[17385,17463]},{"content":"At run time, <ph id=\"ph1\">`OnCmdMsg`</ph> dispatches a command to other objects or handles the command itself by calling the root class <ph id=\"ph2\">`CCmdTarget::OnCmdMsg`</ph>, which does the actual message-map lookup.","pos":[17470,17653],"source":"At run time, `OnCmdMsg` dispatches a command to other objects or handles the command itself by calling the root class `CCmdTarget::OnCmdMsg`, which does the actual message-map lookup."},{"content":"For a complete description of the default command routing, see <bpt id=\"p1\">[</bpt>Message Handling and Mapping Topics<ept id=\"p1\">](../../mfc/message-handling-and-mapping.md)</ept>.","pos":[17654,17798],"source":" For a complete description of the default command routing, see [Message Handling and Mapping Topics](../../mfc/message-handling-and-mapping.md)."},{"content":"On rare occasions, you may want to override this member function to extend the framework's standard command routing.","pos":[17805,17921]},{"content":"Refer to <bpt id=\"p1\">[</bpt>Technical Note 21<ept id=\"p1\">](../../mfc/tn021-command-and-message-routing.md)</ept> for advanced details of the command-routing architecture.","pos":[17922,18056],"source":" Refer to [Technical Note 21](../../mfc/tn021-command-and-message-routing.md) for advanced details of the command-routing architecture."},{"content":"If you override <ph id=\"ph1\">`OnCmdMsg`</ph>, you must supply the appropriate value for <ph id=\"ph2\">`nCode`</ph>, the command notification code, and <ph id=\"ph3\">`pExtra`</ph>, which depends on the value of <ph id=\"ph4\">`nCode`</ph>.","pos":[18063,18225],"source":"If you override `OnCmdMsg`, you must supply the appropriate value for `nCode`, the command notification code, and `pExtra`, which depends on the value of `nCode`."},{"content":"The following table lists their corresponding values:","pos":[18226,18279]},{"pos":[18294,18299],"content":"value"},{"pos":[18309,18314],"content":"value"},{"content":"CN_COMMAND","pos":[18364,18374]},{"pos":[18376,18382],"content":"CCmdUI"},{"content":"CN_EVENT","pos":[18426,18434]},{"content":"AFX_EVENT*","pos":[18435,18445]},{"content":"CN_UPDATE_COMMAND_UI","pos":[18450,18470]},{"content":"CCmdUI*","pos":[18471,18478]},{"content":"CN_OLECOMMAND","pos":[18483,18496]},{"pos":[18498,18507],"content":"COleCmdUI"},{"content":"CN_OLE_UNREGISTER","pos":[18554,18571]},{"content":"NULL","pos":[18572,18576]},{"content":"Example","pos":[18587,18594]},{"pos":[18609,18626],"content":"NVC_MFCDocView#44"},{"pos":[18696,18713],"content":"NVC_MFCDocView#45"},{"pos":[18818,18844],"content":"CCmdTarget::OnFinalRelease"},{"content":"Called by the framework when the last OLE reference to or from the object is released.","pos":[18848,18934]},{"content":"Remarks","pos":[18990,18997]},{"content":"Override this function to provide special handling for this situation.","pos":[19001,19071]},{"content":"The default implementation deletes the object.","pos":[19072,19118]},{"pos":[19174,19203],"content":"CCmdTarget::RestoreWaitCursor"},{"content":"Call this function to restore the appropriate hourglass cursor after the system cursor has changed (for example, after a message box has opened and then closed while in the middle of a lengthy operation).","pos":[19207,19411]},{"content":"Example","pos":[19462,19469]},{"pos":[19484,19501],"content":"NVC_MFCDocView#43"},{"content":"See Also","pos":[19562,19570]},{"content":"MFC Sample ACDUAL","pos":[19575,19592]},{"content":"CObject Class","pos":[19628,19641]},{"content":"Hierarchy Chart","pos":[19686,19701]},{"content":"CCmdUI Class","pos":[19738,19750]},{"content":"CDocument Class","pos":[19794,19809]},{"content":"CDocTemplate Class","pos":[19856,19874]},{"content":"CWinApp Class","pos":[19924,19937]},{"content":"CWnd Class","pos":[19982,19992]},{"content":"CView Class","pos":[20034,20045]},{"content":"CFrameWnd Class","pos":[20088,20103]},{"content":"COleDispatchDriver Class","pos":[20150,20174]}],"content":"---\ntitle: \"CCmdTarget Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CCmdTarget\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"message maps, CCmdTarget base class\"\n  - \"command targets\"\n  - \"CCmdTarget class\"\n  - \"command routing, command targets\"\n  - \"targets, command\"\nms.assetid: 8883b132-2057-4ce0-a5f2-88979f8f2b13\ncaps.latest.revision: 23\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CCmdTarget Class\nThe base class for the Microsoft Foundation Class Library message-map architecture.  \n  \n## Syntax  \n  \n```  \nclass CCmdTarget : public CObject  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CCmdTarget::CCmdTarget](#ccmdtarget__ccmdtarget)|Constructs a `CCmdTarget` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CCmdTarget::BeginWaitCursor](#ccmdtarget__beginwaitcursor)|Displays the cursor as an hourglass cursor.|  \n|[CCmdTarget::DoOleVerb](#ccmdtarget__dooleverb)|Causes an action specified by an OLE verb to be performed.|  \n|[CCmdTarget::EnableAutomation](#ccmdtarget__enableautomation)|Allows OLE automation for the `CCmdTarget` object.|  \n|[CCmdTarget::EnableConnections](#ccmdtarget__enableconnections)|Enables event firing over connection points.|  \n|[CCmdTarget::EnableTypeLib](#ccmdtarget__enabletypelib)|Enables an object's type library.|  \n|[CCmdTarget::EndWaitCursor](#ccmdtarget__endwaitcursor)|Returns to the previous cursor.|  \n|[CCmdTarget::EnumOleVerbs](#ccmdtarget__enumoleverbs)|Enumerates an object's OLE verbs.|  \n|[CCmdTarget::FromIDispatch](#ccmdtarget__fromidispatch)|Returns a pointer to the `CCmdTarget` object associated with the `IDispatch` pointer.|  \n|[CCmdTarget::GetDispatchIID](#ccmdtarget__getdispatchiid)|Gets the primary dispatch interface ID.|  \n|[CCmdTarget::GetIDispatch](#ccmdtarget__getidispatch)|Returns a pointer to the `IDispatch` object associated with the `CCmdTarget` object.|  \n|[CCmdTarget::GetTypeInfoCount](#ccmdtarget__gettypeinfocount)|Retrieves the number of type information interfaces that an object provides.|  \n|[CCmdTarget::GetTypeInfoOfGuid](#ccmdtarget__gettypeinfoofguid)|Retrieves the type description that corresponds to the specified GUID.|  \n|[CCmdTarget::GetTypeLib](#ccmdtarget__gettypelib)|Gets a pointer to a type library.|  \n|[CCmdTarget::GetTypeLibCache](#ccmdtarget__gettypelibcache)|Gets the type library cache.|  \n|[CCmdTarget::IsInvokeAllowed](#ccmdtarget__isinvokeallowed)|Enables automation method invocation.|  \n|[CCmdTarget::IsResultExpected](#ccmdtarget__isresultexpected)|Returns nonzero if an automation function should return a value.|  \n|[CCmdTarget::OnCmdMsg](#ccmdtarget__oncmdmsg)|Routes and dispatches command messages.|  \n|[CCmdTarget::OnFinalRelease](#ccmdtarget__onfinalrelease)|Cleans up after the last OLE reference is released.|  \n|[CCmdTarget::RestoreWaitCursor](#ccmdtarget__restorewaitcursor)|Restores the hourglass cursor.|  \n  \n## Remarks  \n A message map routes commands or messages to the member functions you write to handle them. (A command is a message from a menu item, command button, or accelerator key.)  \n  \n Key framework classes derived from `CCmdTarget` include [CView](../../mfc/reference/cview-class.md), [CWinApp](../../mfc/reference/cwinapp-class.md), [CDocument](../../mfc/reference/cdocument-class.md), [CWnd](../../mfc/reference/cwnd-class.md), and [CFrameWnd](../../mfc/reference/cframewnd-class.md). If you intend for a new class to handle messages, derive the class from one of these `CCmdTarget`-derived classes. You will rarely derive a class from `CCmdTarget` directly.  \n  \n For an overview of command targets and `OnCmdMsg` routing, see [Command Targets](../../mfc/command-targets.md), [Command Routing](../../mfc/command-routing.md), and [Mapping Messages](../../mfc/mapping-messages.md).  \n  \n `CCmdTarget` includes member functions that handle the display of an hourglass cursor. Display the hourglass cursor when you expect a command to take a noticeable time interval to execute.  \n  \n Dispatch maps, similar to message maps, are used to expose OLE automation `IDispatch` functionality. By exposing this interface, other applications (such as Visual Basic) can call into your application.  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n `CCmdTarget`  \n  \n## Requirements  \n **Header:** afxwin.h  \n  \n##  <a name=\"ccmdtarget__beginwaitcursor\"></a>  CCmdTarget::BeginWaitCursor  \n Call this function to display the cursor as an hourglass when you expect a command to take a noticeable time interval to execute.  \n  \n```  \nvoid BeginWaitCursor();\n```  \n  \n### Remarks  \n The framework calls this function to show the user that it is busy, such as when a **CDocument** object loads or saves itself to a file.  \n  \n The actions of `BeginWaitCursor` are not always effective outside of a single message handler as other actions, such as `OnSetCursor` handling, could change the cursor.  \n  \n Call `EndWaitCursor` to restore the previous cursor.  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#43](../../mfc/codesnippet/cpp/ccmdtarget-class_1.cpp)]  \n  \n##  <a name=\"ccmdtarget__ccmdtarget\"></a>  CCmdTarget::CCmdTarget  \n Constructs a `CCmdTarget` object.  \n  \n```  \nCCmdTarget();\n```  \n  \n##  <a name=\"ccmdtarget__dooleverb\"></a>  CCmdTarget::DoOleVerb  \n Causes an action specified by an OLE verb to be performed.  \n  \n```  \nBOOL DoOleVerb(\n    LONG iVerb,  \n    LPMSG lpMsg,  \n    HWND hWndParent,  \n    LPCRECT lpRect);\n```  \n  \n### Parameters  \n `iVerb`  \n Numerical identifier of the verb.  \n  \n `lpMsg`  \n Pointer to the [MSG](http://msdn.microsoft.com/library/windows/desktop/ms644958) structure describing the event (such as a double-click) that invoked the verb.  \n  \n `hWndParent`  \n Handle of the document window containing the object.  \n  \n `lpRect`  \n Pointer to the [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure containing the coordinates, in pixels, that define an object's bounding rectangle in *hwndParent*.  \n  \n### Return Value  \n TRUE if successful, otherwise FALSE.  \n  \n### Remarks  \n This member function is basically an implementation of [IOleObject::DoVerb](http://msdn.microsoft.com/library/windows/desktop/ms694508). The possible actions are enumerated by [CCmdTarget::EnumOleVerbs](#ccmdtarget__enumoleverbs).  \n  \n##  <a name=\"ccmdtarget__enableautomation\"></a>  CCmdTarget::EnableAutomation  \n Call this function to enable OLE automation for an object.  \n  \n```  \nvoid EnableAutomation();\n```  \n  \n### Remarks  \n This function is typically called from the constructor of your object and should only be called if a dispatch map has been declared for the class. For more information on automation see the articles [Automation Clients](../../mfc/automation-clients.md) and [Automation Servers](../../mfc/automation-servers.md).  \n  \n##  <a name=\"ccmdtarget__enableconnections\"></a>  CCmdTarget::EnableConnections  \n Enables event firing over connection points.  \n  \n```  \nvoid EnableConnections();\n```  \n  \n### Remarks  \n To enable connection points, call this member function in the constructor of your derived class.  \n  \n##  <a name=\"ccmdtarget__enabletypelib\"></a>  CCmdTarget::EnableTypeLib  \n Enables an object's type library.  \n  \n```  \nvoid EnableTypeLib();\n```  \n  \n### Remarks  \n Call this member function in the constructor of your `CCmdTarget`-derived object if it provides type information. For more information, see Knowledge Base article Q185720, \"HOWTO: Provide Type Information From an MFC Automation Server.\" Knowledge Base articles are available in the MSDN Library Visual Studio documentation or at [http://support.microsoft.com](http://support.microsoft.com/).  \n  \n##  <a name=\"ccmdtarget__endwaitcursor\"></a>  CCmdTarget::EndWaitCursor  \n Call this function after you have called the `BeginWaitCursor` member function to return from the hourglass cursor to the previous cursor.  \n  \n```  \nvoid EndWaitCursor();\n```  \n  \n### Remarks  \n The framework also calls this member function after it has called the hourglass cursor.  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#43](../../mfc/codesnippet/cpp/ccmdtarget-class_1.cpp)]  \n  \n##  <a name=\"ccmdtarget__enumoleverbs\"></a>  CCmdTarget::EnumOleVerbs  \n Enumerates an object's OLE verbs.  \n  \n```  \nBOOL EnumOleVerbs(LPENUMOLEVERB* ppenumOleVerb);\n```  \n  \n### Parameters  \n `ppenumOleVerb`  \n A pointer to a pointer to an [IEnumOLEVERB](http://msdn.microsoft.com/library/windows/desktop/ms695084) interface.  \n  \n### Return Value  \n TRUE if the object supports at least one OLE verb (in which case \\* `ppenumOleVerb` points to an **IEnumOLEVERB** enumerator interface), otherwise FALSE.  \n  \n### Remarks  \n This member function is basically an implementation of [IOleObject::EnumVerbs](http://msdn.microsoft.com/library/windows/desktop/ms692781).  \n  \n##  <a name=\"ccmdtarget__fromidispatch\"></a>  CCmdTarget::FromIDispatch  \n Call this function to map an `IDispatch` pointer, received from automation member functions of a class, into the `CCmdTarget` object that implements the interfaces of the `IDispatch` object.  \n  \n```  \nstatic CCmdTarget* PASCAL FromIDispatch(LPDISPATCH lpDispatch);\n```  \n  \n### Parameters  \n `lpDispatch`  \n A pointer to an `IDispatch` object.  \n  \n### Return Value  \n A pointer to the `CCmdTarget` object associated with `lpDispatch`. This function returns **NULL** if the `IDispatch` object is not recognized as a Microsoft Foundation Class `IDispatch` object.  \n  \n### Remarks  \n The result of this function is the inverse of a call to the member function `GetIDispatch`.  \n  \n##  <a name=\"ccmdtarget__getdispatchiid\"></a>  CCmdTarget::GetDispatchIID  \n Gets the primary dispatch interface ID.  \n  \n```  \nvirtual BOOL GetDispatchIID(IID* pIID);\n```  \n  \n### Parameters  \n *pIID*  \n A pointer to an interface ID (a [GUID](http://msdn.microsoft.com/library/windows/desktop/aa373931)).  \n  \n### Return Value  \n TRUE if successful, otherwise FALSE. If successful, \\* *pIID* is set to the primary dispatch interface ID.  \n  \n### Remarks  \n Derived classes should override this member function (if not overridden, `GetDispatchIID` returns FALSE). See [COleControl](../../mfc/reference/colecontrol-class.md).  \n  \n For more information, see Knowledge Base article Q185720, \"HOWTO: Provide Type Information From an MFC Automation Server.\" Knowledge Base articles are available in the MSDN Library Visual Studio documentation or at [http://support.microsoft.com](http://support.microsoft.com/).  \n  \n##  <a name=\"ccmdtarget__getidispatch\"></a>  CCmdTarget::GetIDispatch  \n Call this member function to retrieve the `IDispatch` pointer from an automation method that either returns an `IDispatch` pointer or takes an `IDispatch` pointer by reference.  \n  \n```  \nLPDISPATCH GetIDispatch(BOOL bAddRef);\n```  \n  \n### Parameters  \n *bAddRef*  \n Specifies whether to increment the reference count for the object.  \n  \n### Return Value  \n The `IDispatch` pointer associated with the object.  \n  \n### Remarks  \n For objects that call `EnableAutomation` in their constructors, making them automation enabled, this function returns a pointer to the Foundation Class implementation of `IDispatch` that is used by clients who communicate via the `IDispatch` interface. Calling this function automatically adds a reference to the pointer, so it is not necessary to make a call to [IUnknown::AddRef](http://msdn.microsoft.com/library/windows/desktop/ms691379).  \n  \n##  <a name=\"ccmdtarget__gettypeinfocount\"></a>  CCmdTarget::GetTypeInfoCount  \n Retrieves the number of type information interfaces that an object provides.  \n  \n```  \nvirtual UINT GetTypeInfoCount();\n```  \n  \n### Return Value  \n The number of type information interfaces.  \n  \n### Remarks  \n This member function basically implements [IDispatch::GetTypeInfoCount](http://msdn.microsoft.com/en-us/da876d53-cb8a-465c-a43e-c0eb272e2a12).  \n  \n Derived classes should override this function to return the number of type information interfaces provided (either 0 or 1). If not overridden, **GetTypeInfoCount** returns 0. To override, use the [IMPLEMENT_OLETYPELIB](../../mfc/reference/type-library-access.md#implement_oletypelib) macro, which also implements `GetTypeLib` and `GetTypeLibCache`.  \n  \n##  <a name=\"ccmdtarget__gettypeinfoofguid\"></a>  CCmdTarget::GetTypeInfoOfGuid  \n Retrieves the type description that corresponds to the specified GUID.  \n  \n```  \nHRESULT GetTypeInfoOfGuid(\n    LCID lcid,  \n    const GUID& guid,  \n    LPTYPEINFO* ppTypeInfo);\n```  \n  \n### Parameters  \n `lcid`  \n A locale identifier ( `LCID`).  \n  \n `guid`  \n The [GUID](http://msdn.microsoft.com/library/windows/desktop/aa373931) of the type description.  \n  \n `ppTypeInfo`  \n Pointer to a pointer to the `ITypeInfo` interface.  \n  \n### Return Value  \n An HRESULT indicating the success or failure of the call. If successful, * `ppTypeInfo` points to the type information interface.  \n  \n##  <a name=\"ccmdtarget__gettypelib\"></a>  CCmdTarget::GetTypeLib  \n Gets a pointer to a type library.  \n  \n```  \nvirtual HRESULT GetTypeLib(\n    LCID lcid,  \n    LPTYPELIB* ppTypeLib);\n```  \n  \n### Parameters  \n `lcid`  \n A locale identifier ( `LCID`).  \n  \n `ppTypeLib`  \n A pointer to a pointer to the `ITypeLib` interface.  \n  \n### Return Value  \n An HRESULT indicating the success or failure of the call. If successful, * `ppTypeLib` points to the type library interface.  \n  \n### Remarks  \n Derived classes should override this member function (if not overridden, `GetTypeLib` returns TYPE_E_CANTLOADLIBRARY). Use the [IMPLEMENT_OLETYPELIB](../../mfc/reference/type-library-access.md#implement_oletypelib) macro, which also implements `GetTypeInfoCount` and `GetTypeLibCache`.  \n  \n##  <a name=\"ccmdtarget__gettypelibcache\"></a>  CCmdTarget::GetTypeLibCache  \n Gets the type library cache.  \n  \n```  \nvirtual CTypeLibCache* GetTypeLibCache();\n```  \n  \n### Return Value  \n A pointer to a **CTypeLibCache** object.  \n  \n### Remarks  \n Derived classes should override this member function (if not overridden, **GetTypeLibCache** returns NULL). Use the [IMPLEMENT_OLETYPELIB](../../mfc/reference/type-library-access.md#implement_oletypelib) macro, which also implements `GetTypeInfoCount` and `GetTypeLib`.  \n  \n##  <a name=\"ccmdtarget__isinvokeallowed\"></a>  CCmdTarget::IsInvokeAllowed  \n This function is called by MFC's implementation of **IDispatch::Invoke** to determine if a given automation method (identified by `dispid`) can be invoked.  \n  \n```  \nvirtual BOOL IsInvokeAllowed(DISPID dispid);\n```  \n  \n### Parameters  \n `dispid`  \n A dispatch ID.  \n  \n### Return Value  \n TRUE if the method can be invoked, otherwise FALSE.  \n  \n### Remarks  \n If `IsInvokeAllowed` returns TRUE, **Invoke** proceeds to call the method; otherwise, `Invoke` will fail, returning E_UNEXPECTED.  \n  \n Derived classes can override this function to return appropriate values (if not overridden, `IsInvokeAllowed` returns TRUE). See in particular [COleControl::IsInvokeAllowed](../../mfc/reference/colecontrol-class.md#colecontrol__isinvokeallowed).  \n  \n##  <a name=\"ccmdtarget__isresultexpected\"></a>  CCmdTarget::IsResultExpected  \n Use `IsResultExpected` to ascertain whether a client expects a return value from its call to an automation function.  \n  \n```  \nBOOL IsResultExpected();\n```  \n  \n### Return Value  \n Nonzero if an automation function should return a value; otherwise 0.  \n  \n### Remarks  \n The OLE interface supplies information to MFC about whether the client is using or ignoring the result of a function call, and MFC in turn uses this information to determine the result of a call to `IsResultExpected`. If production of a return value is time- or resource-intensive, you can increase efficiency by calling this function before computing the return value.  \n  \n This function returns 0 only once so that you will get valid return values from other automation functions if you call them from the automation function that the client has called.  \n  \n `IsResultExpected` returns a nonzero value if called when an automation function call is not in progress.  \n  \n##  <a name=\"ccmdtarget__oncmdmsg\"></a>  CCmdTarget::OnCmdMsg  \n Called by the framework to route and dispatch command messages and to handle the update of command user-interface objects.  \n  \n```  \nvirtual BOOL OnCmdMsg(\n    UINT nID,  \n    int nCode,  \n    void* pExtra,  \n    AFX_CMDHANDLERINFO* pHandlerInfo);\n```  \n  \n### Parameters  \n `nID`  \n Contains the command ID.  \n  \n `nCode`  \n Identifies the command notification code. See **Remarks** for more information about values for `nCode`.  \n  \n `pExtra`  \n Used according to the value of `nCode`. See **Remarks** for more information about `pExtra`.  \n  \n `pHandlerInfo`  \n If not **NULL**, `OnCmdMsg` fills in the **pTarget** and **pmf** members of the `pHandlerInfo` structure instead of dispatching the command. Typically, this parameter should be **NULL**.  \n  \n### Return Value  \n Nonzero if the message is handled; otherwise 0.  \n  \n### Remarks  \n This is the main implementation routine of the framework command architecture.  \n  \n At run time, `OnCmdMsg` dispatches a command to other objects or handles the command itself by calling the root class `CCmdTarget::OnCmdMsg`, which does the actual message-map lookup. For a complete description of the default command routing, see [Message Handling and Mapping Topics](../../mfc/message-handling-and-mapping.md).  \n  \n On rare occasions, you may want to override this member function to extend the framework's standard command routing. Refer to [Technical Note 21](../../mfc/tn021-command-and-message-routing.md) for advanced details of the command-routing architecture.  \n  \n If you override `OnCmdMsg`, you must supply the appropriate value for `nCode`, the command notification code, and `pExtra`, which depends on the value of `nCode`. The following table lists their corresponding values:  \n  \n|`nCode` value|`pExtra` value|  \n|-------------------|--------------------|  \n|CN_COMMAND|[CCmdUI](../../mfc/reference/ccmdui-class.md)*|  \n|CN_EVENT|AFX_EVENT*|  \n|CN_UPDATE_COMMAND_UI|CCmdUI*|  \n|CN_OLECOMMAND|[COleCmdUI](../../mfc/reference/colecmdui-class.md)*|  \n|CN_OLE_UNREGISTER|NULL|  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#44](../../mfc/codesnippet/cpp/ccmdtarget-class_2.cpp)]  \n  \n [!code-cpp[NVC_MFCDocView#45](../../mfc/codesnippet/cpp/ccmdtarget-class_3.cpp)]  \n  \n##  <a name=\"ccmdtarget__onfinalrelease\"></a>  CCmdTarget::OnFinalRelease  \n Called by the framework when the last OLE reference to or from the object is released.  \n  \n```  \nvirtual void OnFinalRelease();\n```  \n  \n### Remarks  \n Override this function to provide special handling for this situation. The default implementation deletes the object.  \n  \n##  <a name=\"ccmdtarget__restorewaitcursor\"></a>  CCmdTarget::RestoreWaitCursor  \n Call this function to restore the appropriate hourglass cursor after the system cursor has changed (for example, after a message box has opened and then closed while in the middle of a lengthy operation).  \n  \n```  \nvoid RestoreWaitCursor();\n```  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#43](../../mfc/codesnippet/cpp/ccmdtarget-class_1.cpp)]  \n  \n## See Also  \n [MFC Sample ACDUAL](../../visual-cpp-samples.md)   \n [CObject Class](../../mfc/reference/cobject-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CCmdUI Class](../../mfc/reference/ccmdui-class.md)   \n [CDocument Class](../../mfc/reference/cdocument-class.md)   \n [CDocTemplate Class](../../mfc/reference/cdoctemplate-class.md)   \n [CWinApp Class](../../mfc/reference/cwinapp-class.md)   \n [CWnd Class](../../mfc/reference/cwnd-class.md)   \n [CView Class](../../mfc/reference/cview-class.md)   \n [CFrameWnd Class](../../mfc/reference/cframewnd-class.md)   \n [COleDispatchDriver Class](../../mfc/reference/coledispatchdriver-class.md)\n"}