{"nodes":[{"pos":[12,63],"content":"vector::generic_iterator (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"vector::generic_iterator (STL-CLR) | Microsoft Docs","pos":[0,51]}]},{"content":"vector::generic_iterator (STL/CLR)","pos":[661,695]},{"content":"The type of an iterator for use with the generic interface for the container.","pos":[696,773]},{"content":"Syntax","pos":[782,788]},{"content":"Remarks","pos":[935,942]},{"content":"The type describes a generic iterator that can be used with the generic interface for this template container class.","pos":[946,1062]},{"content":"Example","pos":[1071,1078]},{"content":"Requirements","pos":[2119,2131]},{"pos":[2135,2163],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/vector&gt;","source":"**Header:** \\<cliext/vector>"},{"pos":[2170,2191],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2200,2208]},{"content":"vector (STL/CLR)","pos":[2213,2229]},{"content":"vector::generic_container (STL/CLR)","pos":[2265,2300]},{"content":"vector::generic_reverse_iterator (STL/CLR)","pos":[2354,2396]}],"content":"---\ntitle: \"vector::generic_iterator (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::vector::generic_iterator\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"generic_iterator member [STL/CLR]\"\nms.assetid: e396bce6-5b1e-46b6-afa5-6bb96cf5d5d5\ncaps.latest.revision: 15\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# vector::generic_iterator (STL/CLR)\nThe type of an iterator for use with the generic interface for the container.  \n  \n## Syntax  \n  \n```  \ntypedef Microsoft::VisualC::StlClr::Generic::  \n    ContainerRandomAccessIterator<generic_value>  \n    generic_iterator;  \n```  \n  \n## Remarks  \n The type describes a generic iterator that can be used with the generic interface for this template container class.  \n  \n## Example  \n  \n```  \n// cliext_vector_generic_iterator.cpp   \n// compile with: /clr   \n#include <cliext/vector>   \n  \nint main()   \n    {   \n    cliext::vector<wchar_t> c1;   \n    c1.push_back(L'a');   \n    c1.push_back(L'b');   \n    c1.push_back(L'c');   \n  \n// display contents \" a b c\"   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// construct a generic container   \n    cliext::vector<wchar_t>::generic_container^ gc1 = %c1;   \n    for each (wchar_t elem in gc1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// modify generic and display original   \n    cliext::vector<wchar_t>::generic_iterator gcit = gc1->begin();   \n    cliext::vector<wchar_t>::generic_value gcval = *gcit;   \n    *++gcit = gcval;   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \na b c  \na b c  \na a c  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/vector>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [vector (STL/CLR)](../dotnet/vector-stl-clr.md)   \n [vector::generic_container (STL/CLR)](../dotnet/vector-generic-container-stl-clr.md)   \n [vector::generic_reverse_iterator (STL/CLR)](../dotnet/vector-generic-reverse-iterator-stl-clr.md)"}