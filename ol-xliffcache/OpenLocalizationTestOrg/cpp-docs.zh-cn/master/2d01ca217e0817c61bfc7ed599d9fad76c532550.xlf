<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2d01ca217e0817c61bfc7ed599d9fad76c532550</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\ide\specifying-custom-build-tools.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">13ee7287b003ac57616c264bef6271235b5be707</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b99306e545e624f4b66019522662a36bbd2a70a0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Specifying Custom Build Tools | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Specifying Custom Build Tools</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>custom build tool<ept id="p1">*</ept> provides the build system with the information it needs to build specific input files.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A custom build tool specifies a command to run, a list of input files, a list of output files that are generated by the command, and an optional description of the tool.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For general information about custom build tools and custom build steps, see <bpt id="p1">[</bpt>Understanding Custom Build Steps and Build Events<ept id="p1">](../ide/understanding-custom-build-steps-and-build-events.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To specify a custom build tool</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Open the project's <bpt id="p1">**</bpt>Property Pages<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Setting Visual C++ Project Properties<ept id="p1">](../ide/working-with-project-properties.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Configuration Properties<ept id="p1">**</ept> to enable the <bpt id="p2">**</bpt>Configuration<ept id="p2">**</ept> box.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Configuration<ept id="p1">**</ept> box, select the configuration for which you want to specify a custom build tool.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, select the input file for the custom build tool.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>Custom Build Tool<ept id="p1">**</ept> folder does not appear, the file extension of the file you selected is associated with a default tool.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, the default tool for .c and .cpp files is the compiler.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To override a default tool setting, in the <bpt id="p1">**</bpt>Configuration Properties<ept id="p1">**</ept> node, in the <bpt id="p2">**</bpt>General<ept id="p2">**</ept> folder, in the <bpt id="p3">**</bpt>Item Type<ept id="p3">**</ept> property, click <bpt id="p4">**</bpt>Custom Build Tool<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Apply<ept id="p1">**</ept> and the <bpt id="p2">**</bpt>Custom Build Tool<ept id="p2">**</ept> node is displayed.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Custom Build Tool<ept id="p1">**</ept> node, in the <bpt id="p2">**</bpt>General<ept id="p2">**</ept> folder, specify the properties associated with the custom build tool:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Additional Dependencies<ept id="p1">**</ept>, specify any additional files beyond the one for which the custom build tool is being defined (the file associated with the custom build tool is implicitly considered an input to the tool).</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Having additional input files is not a requirement for a custom build tool.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you have more than one additional input, separate them with semicolons.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If an <bpt id="p1">**</bpt>Additional Dependencies<ept id="p1">**</ept> file's date is later than the input file, then the custom build tool is run.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If all of the <bpt id="p1">**</bpt>Additional Dependencies<ept id="p1">**</ept> files are older than the input file, and the input file is older than the <bpt id="p2">**</bpt>Outputs<ept id="p2">**</ept> property file, then the custom build tool is not run.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, suppose you have a custom build tool that takes MyInput.x as input and generates MyInput.cpp, and that MyInput.x includes a header file, MyHeader.h.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can specify MyHeader.h as an input dependency to MyInput.x, and the build system will build MyInput.cpp when it is out-of-date with respect to MyInput.x or MyHeader.h.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Input dependencies can also ensure that your custom build tools run in the order you need them to.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In the preceding example, suppose that MyHeader.h is actually the output of a custom build tool.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Because MyHeader.h is a dependency of MyInput.x, the build system will first build Myheader.h before running the custom build tool on MyInput.x.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Command Line<ept id="p1">**</ept>, specify a command as if you were specifying it at the command prompt.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Specify a valid command or batch file, and any required input or output files.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Specify the <bpt id="p1">**</bpt>call<ept id="p1">**</ept> batch command before the name of a batch file to guarantee that all subsequent commands are executed.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Multiple input and output files can be specified symbolically with MSBuild macros.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>specifying the location of files, or the names of sets of files, see <bpt id="p1">[</bpt>Common Macros for Build Commands and Properties<ept id="p1">](../ide/common-macros-for-build-commands-and-properties.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Because the '%' character is reserved by MSBuild, if you specify an environment variable replace each <bpt id="p1">**</bpt><ph id="ph1">%</ph><ept id="p1">**</ept> escape character with the <bpt id="p2">**</bpt>%25<ept id="p2">**</ept> hexadecimal escape sequence.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For example, replace <bpt id="p1">**</bpt>%WINDIR%<ept id="p1">**</ept> with <bpt id="p2">**</bpt>%25WINDIR%25<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>MSBuild replaces each <bpt id="p1">**</bpt>%25<ept id="p1">**</ept> sequence with the <bpt id="p2">**</bpt><ph id="ph1">%</ph><ept id="p2">**</ept> character before it accesses the environment variable.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Description<ept id="p1">**</ept>, type a descriptive message about this custom build tool.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The message is printed to the <bpt id="p1">**</bpt>Output<ept id="p1">**</ept> window when the build system processes this tool.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Outputs<ept id="p1">**</ept>, specify the name of the output file.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This is a required entry; without a value for this property, the custom build tool will not run.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If a custom build tool has more than one output, separate file names with a semicolon.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The name of the output file should be the same as it is specified in the <bpt id="p1">**</bpt>Command Line<ept id="p1">**</ept> property.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The project build system will look for the file and check its date.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If the output file is newer than the input file or if the output file is not found, the custom build tool is run.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If all of the <bpt id="p1">**</bpt>Additional Dependencies<ept id="p1">**</ept> files are older than the input file, and the input file is older than the file specified in the <bpt id="p2">**</bpt>Outputs<ept id="p2">**</ept> property, the custom build tool is not run.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If you want the build system to operate on an output file generated by the custom build tool, you must manually add it to the project.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The custom build tool will update the file during the build.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Assume that you want to include in your project a file that is named parser.l.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You want a lexical analyzer to process parser.l to produce a .c file that has the same base name (parser.c).</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>First, you add parser.l and parser.c to the project.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If the files do not yet exist, you just add a reference to the files.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You create a custom build tool for parser.l and type the following in the <bpt id="p1">**</bpt>Commands<ept id="p1">**</ept> property:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This command will run the lexical analyzer on parser.l and output parser.c to the project directory.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Outputs<ept id="p1">**</ept> property, type the following:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>When you build the project, the build system compares the timestamps of parser.l and parser.c.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If parser.l is more recent, or if parser.c doesn't exist, the build system runs the value of the <bpt id="p1">**</bpt>Command Line<ept id="p1">**</ept> property to bring parser.c up to date.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Since parser.c was also added to the project, the build system then compiles parser.c.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Common Macros for Build Commands and Properties</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Troubleshooting Build Customizations</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>