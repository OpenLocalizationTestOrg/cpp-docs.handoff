{"nodes":[{"pos":[12,46],"content":"array Class (STL) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"array Class (STL) | Microsoft Docs","pos":[0,34]}]},{"content":"array Class (STL)","pos":[669,686]},{"content":"Describes an object that controls a sequence of length <ph id=\"ph1\">`N`</ph> of elements of type <ph id=\"ph2\">`Ty`</ph>.","pos":[687,771],"source":"Describes an object that controls a sequence of length `N` of elements of type `Ty`."},{"content":"The sequence is stored as an array of <ph id=\"ph1\">`Ty`</ph>, contained in the <ph id=\"ph2\">`array&lt;Ty, N&gt;`</ph> object.","pos":[772,855],"source":" The sequence is stored as an array of `Ty`, contained in the `array<Ty, N>` object."},{"content":"Syntax","pos":[864,870]},{"content":"Parameters","pos":[948,958]},{"content":"Parameter","pos":[979,988]},{"content":"Description","pos":[989,1000]},{"content":"The type of an element.","pos":[1010,1033]},{"content":"The number of elements.","pos":[1042,1065]},{"content":"Members","pos":[1075,1082]},{"content":"Type Definition","pos":[1103,1118]},{"content":"Description","pos":[1119,1130]},{"content":"array::const_iterator","pos":[1136,1157]},{"content":"The type of a constant iterator for the controlled sequence.","pos":[1183,1243]},{"content":"array::const_pointer","pos":[1249,1269]},{"content":"The type of a constant pointer to an element.","pos":[1294,1339]},{"content":"array::const_reference","pos":[1345,1367]},{"content":"The type of a constant reference to an element.","pos":[1394,1441]},{"content":"array::const_reverse_iterator","pos":[1447,1476]},{"content":"The type of a constant reverse iterator for the controlled sequence.","pos":[1510,1578]},{"content":"array::difference_type","pos":[1584,1606]},{"content":"The type of a signed distance between two elements.","pos":[1633,1684]},{"content":"array::iterator","pos":[1690,1705]},{"content":"The type of an iterator for the controlled sequence.","pos":[1725,1777]},{"content":"array::pointer","pos":[1783,1797]},{"content":"The type of a pointer to an element.","pos":[1816,1852]},{"content":"array::reference","pos":[1858,1874]},{"content":"The type of a reference to an element.","pos":[1895,1933]},{"content":"array::reverse_iterator","pos":[1939,1962]},{"content":"The type of a reverse iterator for the controlled sequence.","pos":[1990,2049]},{"content":"array::size_type","pos":[2055,2071]},{"content":"The type of an unsigned distance between two elements.","pos":[2092,2146]},{"content":"array::value_type","pos":[2152,2169]},{"content":"The type of an element.","pos":[2191,2214]},{"content":"Member Function","pos":[2236,2251]},{"content":"Description","pos":[2252,2263]},{"content":"array::array","pos":[2269,2281]},{"content":"Constructs an array object.","pos":[2298,2325]},{"content":"array::assign","pos":[2331,2344]},{"content":"Replaces all elements.","pos":[2362,2384]},{"content":"array::at","pos":[2390,2399]},{"content":"Accesses an element at a specified position.","pos":[2413,2457]},{"content":"array::back","pos":[2463,2474]},{"content":"Accesses the last element.","pos":[2490,2516]},{"content":"array::begin","pos":[2522,2534]},{"content":"Designates the beginning of the controlled sequence.","pos":[2551,2603]},{"content":"array::cbegin","pos":[2609,2622]},{"content":"Returns a random-access const iterator to the first element in the array.","pos":[2640,2713]},{"content":"array::cend","pos":[2719,2730]},{"content":"Returns a random-access const iterator that points just beyond the end of the array.","pos":[2746,2830]},{"content":"array::crbegin","pos":[2836,2850]},{"content":"Returns a const iterator to the first element in a reversed array.","pos":[2869,2935]},{"content":"array::crend","pos":[2941,2953]},{"content":"Returns a const iterator to the end of a reversed array.","pos":[2970,3026]},{"content":"array::data","pos":[3032,3043]},{"content":"Gets the address of the first element.","pos":[3059,3097]},{"content":"array::empty","pos":[3103,3115]},{"content":"Tests whether elements are present.","pos":[3132,3167]},{"content":"array::end","pos":[3173,3183]},{"content":"Designates the end of the controlled sequence.","pos":[3198,3244]},{"content":"array::fill","pos":[3250,3261]},{"content":"Replaces all elements with a specified value.","pos":[3277,3322]},{"content":"array::front","pos":[3328,3340]},{"content":"Accesses the first element.","pos":[3357,3384]},{"content":"array::max_size","pos":[3390,3405]},{"content":"Counts the number of elements.","pos":[3425,3455]},{"content":"array::rbegin","pos":[3461,3474]},{"content":"Designates the beginning of the reversed controlled sequence.","pos":[3492,3553]},{"content":"array::rend","pos":[3559,3570]},{"content":"Designates the end of the reversed controlled sequence.","pos":[3586,3641]},{"content":"array::size","pos":[3647,3658]},{"content":"Counts the number of elements.","pos":[3674,3704]},{"content":"array::swap","pos":[3710,3721]},{"content":"Swaps the contents of two containers.","pos":[3737,3774]},{"content":"Operator","pos":[3796,3804]},{"content":"Description","pos":[3805,3816]},{"content":"array::operator=","pos":[3822,3838]},{"content":"Replaces the controlled sequence.","pos":[3861,3894]},{"content":"array::operator[]","pos":[3900,3917]},{"content":"Accesses an element at a specified position.","pos":[3940,3984]},{"content":"Remarks","pos":[3994,4001]},{"content":"The type has a default constructor <ph id=\"ph1\">`array()`</ph> and a default assignment operator <ph id=\"ph2\">`operator=`</ph>, and satisfies the requirements for an <ph id=\"ph3\">`aggregate`</ph>.","pos":[4005,4147],"source":"The type has a default constructor `array()` and a default assignment operator `operator=`, and satisfies the requirements for an `aggregate`."},{"content":"Therefore, objects of type <ph id=\"ph1\">`array&lt;Ty, N&gt;`</ph> can be initialized by using an aggregate initializer.","pos":[4148,4243],"source":" Therefore, objects of type `array<Ty, N>` can be initialized by using an aggregate initializer."},{"content":"For example,","pos":[4244,4256]},{"pos":[4312,4486],"content":"creates the object <ph id=\"ph1\">`ai`</ph> that holds four integer values, initializes the first three elements to the values 1, 2, and 3, respectively, and initializes the fourth element to 0.","source":"creates the object `ai` that holds four integer values, initializes the first three elements to the values 1, 2, and 3, respectively, and initializes the fourth element to 0."},{"content":"Requirements","pos":[4495,4507]},{"pos":[4511,4531],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>array&gt;","source":"**Header:** \\<array>"},{"pos":[4538,4556],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[4595,4607],"content":"array::array"},{"content":"Constructs an array object.","pos":[4611,4638]},{"content":"Parameters","pos":[4700,4710]},{"content":"Object or range to insert.","pos":[4725,4751]},{"content":"Remarks","pos":[4761,4768]},{"content":"The constructor:","pos":[4772,4788]},{"content":"leaves the controlled sequence uninitialized (or default initialized).","pos":[4819,4889]},{"content":"You use it to specify an uninitialized controlled sequence.","pos":[4890,4949]},{"content":"The constructor:","pos":[4956,4972]},{"content":"initializes the controlled sequence with the sequence <ph id=\"ph1\">`[``right``.`</ph><bpt id=\"p1\">[</bpt>array::begin<ept id=\"p1\">](#array__begin)</ept><ph id=\"ph2\">`(),`</ph> <ph id=\"ph3\">`right``.`</ph><bpt id=\"p2\">[</bpt>array::end<ept id=\"p2\">](#array__end)</ept><ph id=\"ph4\">`())`</ph>.","pos":[5021,5164],"source":"initializes the controlled sequence with the sequence `[``right``.`[array::begin](#array__begin)`(),` `right``.`[array::end](#array__end)`())`."},{"content":"You use it to specify an initial controlled sequence that is a copy of the sequence controlled by the array object <ph id=\"ph1\">`right`</ph>.","pos":[5165,5288],"source":" You use it to specify an initial controlled sequence that is a copy of the sequence controlled by the array object `right`."},{"content":"Example","pos":[5298,5305]},{"pos":[6049,6062],"content":"array::assign"},{"content":"Replaces all elements.","pos":[6066,6088]},{"content":"Parameters","pos":[6141,6151]},{"content":"The value to assign.","pos":[6164,6184]},{"content":"Remarks","pos":[6194,6201]},{"pos":[6205,6318],"content":"The member function replaces the sequence controlled by <ph id=\"ph1\">`*this`</ph> with a repetition of <ph id=\"ph2\">`N`</ph> elements of value <ph id=\"ph3\">`val`</ph>.","source":"The member function replaces the sequence controlled by `*this` with a repetition of `N` elements of value `val`."},{"content":"Example","pos":[6328,6335]},{"pos":[7093,7102],"content":"array::at"},{"content":"Accesses an element at a specified position.","pos":[7106,7150]},{"content":"Parameters","pos":[7256,7266]},{"content":"Position of element to access.","pos":[7279,7309]},{"content":"Remarks","pos":[7319,7326]},{"content":"The member functions return a reference to the element of the controlled sequence at position <ph id=\"ph1\">`off`</ph>.","pos":[7330,7430],"source":"The member functions return a reference to the element of the controlled sequence at position `off`."},{"content":"If that position is invalid, the function throws an object of class <ph id=\"ph1\">`out_of_range`</ph>.","pos":[7431,7514],"source":" If that position is invalid, the function throws an object of class `out_of_range`."},{"content":"Example","pos":[7524,7531]},{"pos":[8151,8162],"content":"array::back"},{"content":"Accesses the last element.","pos":[8166,8192]},{"content":"Remarks","pos":[8276,8283]},{"content":"The member functions return a reference to the last element of the controlled sequence, which must be non-empty.","pos":[8287,8399]},{"content":"Example","pos":[8409,8416]},{"pos":[9036,9048],"content":"array::begin"},{"content":"Designates the beginning of the controlled sequence.","pos":[9052,9104]},{"content":"Remarks","pos":[9199,9206]},{"content":"The member functions return a random-access iterator that points at the first element of the sequence (or just beyond the end of an empty sequence).","pos":[9210,9358]},{"content":"Example","pos":[9368,9375]},{"pos":[10040,10053],"content":"array::cbegin"},{"pos":[10057,10130],"content":"Returns a <ph id=\"ph1\">`const`</ph> iterator that addresses the first element in the range.","source":"Returns a `const` iterator that addresses the first element in the range."},{"content":"Return Value","pos":[10197,10209]},{"pos":[10213,10390],"content":"A <ph id=\"ph1\">`const`</ph> random-access iterator that points at the first element of the range, or the location just beyond the end of an empty range (for an empty range, <ph id=\"ph2\">`cbegin() == cend()`</ph>).","source":"A `const` random-access iterator that points at the first element of the range, or the location just beyond the end of an empty range (for an empty range, `cbegin() == cend()`)."},{"content":"Remarks","pos":[10400,10407]},{"pos":[10411,10491],"content":"With the return value of <ph id=\"ph1\">`cbegin`</ph>, the elements in the range cannot be modified.","source":"With the return value of `cbegin`, the elements in the range cannot be modified."},{"content":"You can use this member function in place of the <ph id=\"ph1\">`begin()`</ph> member function to guarantee that the return value is <ph id=\"ph2\">`const_iterator`</ph>.","pos":[10498,10628],"source":"You can use this member function in place of the `begin()` member function to guarantee that the return value is `const_iterator`."},{"content":"Typically, it's used in conjunction with the <bpt id=\"p1\">[</bpt>auto<ept id=\"p1\">](../cpp/auto-cpp.md)</ept> type deduction keyword, as shown in the following example.","pos":[10629,10759],"source":" Typically, it's used in conjunction with the [auto](../cpp/auto-cpp.md) type deduction keyword, as shown in the following example."},{"content":"In the example, consider <ph id=\"ph1\">`Container`</ph> to be a modifiable (non- <ph id=\"ph2\">`const`</ph>) container of any kind that supports <ph id=\"ph3\">`begin()`</ph> and <ph id=\"ph4\">`cbegin()`</ph>.","pos":[10760,10892],"source":" In the example, consider `Container` to be a modifiable (non- `const`) container of any kind that supports `begin()` and `cbegin()`."},{"pos":[11085,11096],"content":"array::cend"},{"pos":[11100,11195],"content":"Returns a <ph id=\"ph1\">`const`</ph> iterator that addresses the location just beyond the last element in a range.","source":"Returns a `const` iterator that addresses the location just beyond the last element in a range."},{"content":"Return Value","pos":[11260,11272]},{"content":"A random-access iterator that points just beyond the end of the range.","pos":[11276,11346]},{"content":"Remarks","pos":[11356,11363]},{"pos":[11374,11442],"content":"is used to test whether an iterator has passed the end of its range."},{"content":"You can use this member function in place of the <ph id=\"ph1\">`end()`</ph> member function to guarantee that the return value is <ph id=\"ph2\">`const_iterator`</ph>.","pos":[11449,11577],"source":"You can use this member function in place of the `end()` member function to guarantee that the return value is `const_iterator`."},{"content":"Typically, it's used in conjunction with the <bpt id=\"p1\">[</bpt>auto<ept id=\"p1\">](../cpp/auto-cpp.md)</ept> type deduction keyword, as shown in the following example.","pos":[11578,11708],"source":" Typically, it's used in conjunction with the [auto](../cpp/auto-cpp.md) type deduction keyword, as shown in the following example."},{"content":"In the example, consider <ph id=\"ph1\">`Container`</ph> to be a modifiable (non- <ph id=\"ph2\">`const`</ph>) container of any kind that supports <ph id=\"ph3\">`end()`</ph> and <ph id=\"ph4\">`cend()`</ph>.","pos":[11709,11837],"source":" In the example, consider `Container` to be a modifiable (non- `const`) container of any kind that supports `end()` and `cend()`."},{"pos":[11995,12051],"content":"The value returned by <ph id=\"ph1\">`cend`</ph> should not be dereferenced.","source":"The value returned by `cend` should not be dereferenced."},{"pos":[12099,12120],"content":"array::const_iterator"},{"content":"The type of a constant iterator for the controlled sequence.","pos":[12124,12184]},{"content":"Remarks","pos":[12258,12265]},{"content":"The type describes an object that can serve as a constant random-access iterator for the controlled sequence.","pos":[12269,12378]},{"content":"Example","pos":[12388,12395]},{"pos":[13217,13237],"content":"array::const_pointer"},{"content":"The type of a constant pointer to an element.","pos":[13241,13286]},{"content":"Remarks","pos":[13346,13353]},{"content":"The type describes an object that can serve as a constant pointer to elements of the sequence.","pos":[13357,13451]},{"content":"Example","pos":[13461,13468]},{"pos":[14157,14179],"content":"array::const_reference"},{"content":"The type of a constant reference to an element.","pos":[14183,14230]},{"content":"Remarks","pos":[14292,14299]},{"content":"The type describes an object that can serve as a constant reference to an element of the controlled sequence.","pos":[14303,14412]},{"content":"Example","pos":[14422,14429]},{"pos":[15127,15156],"content":"array::const_reverse_iterator"},{"content":"The type of a constant reverse iterator for the controlled sequence.","pos":[15160,15228]},{"content":"Remarks","pos":[15325,15332]},{"content":"The type describes an object that can serve as a constant reverse iterator for the controlled sequence.","pos":[15336,15439]},{"content":"Example","pos":[15449,15456]},{"pos":[16153,16167],"content":"array::crbegin"},{"content":"Returns a const iterator to the first element in a reversed array.","pos":[16171,16237]},{"content":"Return Value","pos":[16302,16314]},{"content":"A const reverse random-access iterator addressing the first element in a reversed array or addressing what had been the last element in the unreversed array.","pos":[16318,16475]},{"content":"Remarks","pos":[16485,16492]},{"pos":[16496,16568],"content":"With the return value of <ph id=\"ph1\">`crbegin`</ph>, the array object cannot be modified.","source":"With the return value of `crbegin`, the array object cannot be modified."},{"content":"Example","pos":[16578,16585]},{"pos":[17259,17271],"content":"array::crend"},{"content":"Returns a const iterator that addresses the location succeeding the last element in a reversed array.","pos":[17275,17376]},{"content":"Return Value","pos":[17450,17462]},{"content":"A const reverse random-access iterator that addresses the location succeeding the last element in a reversed array (the location that had preceded the first element in the unreversed array).","pos":[17466,17656]},{"content":"Remarks","pos":[17666,17673]},{"pos":[17685,17772],"content":"is used with a reversed array just as <bpt id=\"p1\">[</bpt>array::cend<ept id=\"p1\">](#array__cend)</ept> is used with a array.","source":" is used with a reversed array just as [array::cend](#array__cend) is used with a array."},{"pos":[17779,17872],"content":"With the return value of <ph id=\"ph1\">`crend`</ph> (suitably decremented), the array object cannot be modified.","source":"With the return value of `crend` (suitably decremented), the array object cannot be modified."},{"pos":[17887,17970],"content":"can be used to test to whether a reverse iterator has reached the end of its array."},{"pos":[17977,18034],"content":"The value returned by <ph id=\"ph1\">`crend`</ph> should not be dereferenced.","source":"The value returned by `crend` should not be dereferenced."},{"content":"Example","pos":[18044,18051]},{"pos":[18475,18486],"content":"array::data"},{"content":"Gets the address of the first element.","pos":[18490,18528]},{"content":"Remarks","pos":[18590,18597]},{"content":"The member functions return the address of the first element in the controlled sequence.","pos":[18601,18689]},{"content":"Example","pos":[18699,18706]},{"pos":[19377,19399],"content":"array::difference_type"},{"content":"The type of a signed distance between two elements.","pos":[19403,19454]},{"content":"Remarks","pos":[19521,19528]},{"content":"The signed integer type describes an object that can represent the difference between the addresses of any two elements in the controlled sequence.","pos":[19532,19679]},{"content":"It is a synonym for the type <ph id=\"ph1\">`std::ptrdiff_t`</ph>.","pos":[19680,19726],"source":" It is a synonym for the type `std::ptrdiff_t`."},{"content":"Example","pos":[19736,19743]},{"pos":[20444,20456],"content":"array::empty"},{"content":"Tests whether no elements are present.","pos":[20460,20498]},{"content":"Remarks","pos":[20553,20560]},{"pos":[20564,20614],"content":"The member function returns true only if <ph id=\"ph1\">`N == 0`</ph>.","source":"The member function returns true only if `N == 0`."},{"content":"Example","pos":[20624,20631]},{"pos":[21461,21471],"content":"array::end"},{"content":"Designates the end of the controlled sequence.","pos":[21475,21521]},{"content":"Remarks","pos":[21593,21600]},{"content":"The member functions return a random-access iterator that points just beyond the end of the sequence.","pos":[21604,21705]},{"content":"Example","pos":[21715,21722]},{"pos":[22382,22393],"content":"array::fill"},{"content":"Erases a array and copies the specified elements to the empty array.","pos":[22397,22465]},{"content":"Parameters","pos":[22518,22528]},{"content":"Parameter","pos":[22549,22558]},{"content":"Description","pos":[22559,22570]},{"content":"The value of the element being inserted into the array.","pos":[22582,22637]},{"content":"Remarks","pos":[22648,22655]},{"pos":[22666,22726],"content":"replaces each element of the array with the specified value."},{"content":"Example","pos":[22736,22743]},{"pos":[23281,23293],"content":"array::front"},{"content":"Accesses the first element.","pos":[23297,23324]},{"content":"Remarks","pos":[23410,23417]},{"content":"The member functions return a reference to the first element of the controlled sequence, which must be non-empty.","pos":[23421,23534]},{"content":"Example","pos":[23544,23551]},{"pos":[24181,24196],"content":"array::iterator"},{"content":"The type of an iterator for the controlled sequence.","pos":[24200,24252]},{"content":"Remarks","pos":[24320,24327]},{"content":"The type describes an object that can serve as a random-access iterator for the controlled sequence.","pos":[24331,24431]},{"content":"Example","pos":[24441,24448]},{"pos":[25248,25263],"content":"array::max_size"},{"content":"Counts the number of elements.","pos":[25267,25297]},{"content":"Remarks","pos":[25360,25367]},{"pos":[25371,25403],"content":"The member function returns <ph id=\"ph1\">`N`</ph>.","source":"The member function returns `N`."},{"content":"Example","pos":[25413,25420]},{"pos":[26056,26073],"content":"array::operator[]"},{"content":"Accesses an element at a specified position.","pos":[26077,26121]},{"content":"Parameters","pos":[26245,26255]},{"content":"Position of element to access.","pos":[26268,26298]},{"content":"Remarks","pos":[26308,26315]},{"content":"The member functions return a reference to the element of the controlled sequence at position <ph id=\"ph1\">`off`</ph>.","pos":[26319,26419],"source":"The member functions return a reference to the element of the controlled sequence at position `off`."},{"content":"If that position is invalid, the behavior is undefined.","pos":[26420,26475]},{"content":"Example","pos":[26485,26492]},{"pos":[27164,27180],"content":"array::operator="},{"content":"Replaces the controlled sequence.","pos":[27184,27217]},{"content":"Parameters","pos":[27291,27301]},{"content":"right","pos":[27305,27310]},{"content":"Container to copy.","pos":[27314,27332]},{"content":"Remarks","pos":[27342,27349]},{"content":"The member operator assigns each element of <ph id=\"ph1\">`right`</ph> to the corresponding element of the controlled sequence, then returns <ph id=\"ph2\">`*this`</ph>.","pos":[27353,27483],"source":"The member operator assigns each element of `right` to the corresponding element of the controlled sequence, then returns `*this`."},{"content":"You use it to replace the controlled sequence with a copy of the controlled sequence in <ph id=\"ph1\">`right`</ph>.","pos":[27484,27580],"source":" You use it to replace the controlled sequence with a copy of the controlled sequence in `right`."},{"content":"Example","pos":[27590,27597]},{"pos":[28367,28381],"content":"array::pointer"},{"content":"The type of a pointer to an element.","pos":[28385,28421]},{"content":"Remarks","pos":[28469,28476]},{"content":"The type describes an object that can serve as a pointer to elements of the sequence.","pos":[28480,28565]},{"content":"Example","pos":[28575,28582]},{"pos":[29250,29263],"content":"array::rbegin"},{"content":"Designates the beginning of the reversed controlled sequence.","pos":[29267,29328]},{"content":"Remarks","pos":[29440,29447]},{"content":"The member functions return a reverse iterator that points just beyond the end of the controlled sequence.","pos":[29451,29557]},{"content":"Hence, it designates the beginning of the reverse sequence.","pos":[29558,29617]},{"content":"Example","pos":[29627,29634]},{"pos":[30317,30333],"content":"array::reference"},{"content":"The type of a reference to an element.","pos":[30337,30375]},{"content":"Remarks","pos":[30425,30432]},{"content":"The type describes an object that can serve as a reference to an element of the controlled sequence.","pos":[30436,30536]},{"content":"Example","pos":[30546,30553]},{"pos":[31221,31232],"content":"array::rend"},{"content":"Designates the end of the reversed controlled sequence.","pos":[31236,31291]},{"content":"Remarks","pos":[31399,31406]},{"content":"The member functions return a reverse iterator that points at the first element of the sequence (or just beyond the end of an empty sequence)).","pos":[31410,31553]},{"content":"Hence, it designates the end of the reverse sequence.","pos":[31554,31607]},{"content":"Example","pos":[31617,31624]},{"pos":[32313,32336],"content":"array::reverse_iterator"},{"content":"The type of a reverse iterator for the controlled sequence.","pos":[32340,32399]},{"content":"Remarks","pos":[32484,32491]},{"content":"The type describes an object that can serve as a reverse iterator for the controlled sequence.","pos":[32495,32589]},{"content":"Example","pos":[32599,32606]},{"pos":[33288,33299],"content":"array::size"},{"content":"Counts the number of elements.","pos":[33303,33333]},{"content":"Remarks","pos":[33392,33399]},{"pos":[33403,33435],"content":"The member function returns <ph id=\"ph1\">`N`</ph>.","source":"The member function returns `N`."},{"content":"Example","pos":[33445,33452]},{"pos":[34072,34088],"content":"array::size_type"},{"content":"The type of an unsigned distance between two element.","pos":[34092,34145]},{"content":"Remarks","pos":[34203,34210]},{"content":"The unsigned integer type describes an object that can represent the length of any controlled sequence.","pos":[34214,34317]},{"content":"It is a synonym for the type <ph id=\"ph1\">`std::size_t`</ph>.","pos":[34318,34361],"source":" It is a synonym for the type `std::size_t`."},{"content":"Example","pos":[34371,34378]},{"pos":[35060,35071],"content":"array::swap"},{"content":"Swaps the contents of two arrays.","pos":[35075,35108]},{"content":"Parameters","pos":[35158,35168]},{"content":"Array to swap contents with.","pos":[35183,35211]},{"content":"Remarks","pos":[35221,35228]},{"content":"The member function swaps the controlled sequences between <ph id=\"ph1\">`*this`</ph> and <ph id=\"ph2\">`right`</ph>.","pos":[35232,35311],"source":"The member function swaps the controlled sequences between `*this` and `right`."},{"content":"It performs a number of element assignments and constructor calls proportional to <ph id=\"ph1\">`N`</ph>.","pos":[35312,35398],"source":" It performs a number of element assignments and constructor calls proportional to `N`."},{"content":"Example","pos":[35408,35415]},{"pos":[36433,36450],"content":"array::value_type"},{"content":"The type of an element.","pos":[36454,36477]},{"content":"Remarks","pos":[36527,36534]},{"pos":[36538,36592],"content":"The type is a synonym for the template parameter <ph id=\"ph1\">`Ty`</ph>.","source":"The type is a synonym for the template parameter `Ty`."},{"content":"Example","pos":[36602,36609]},{"content":"See Also","pos":[37369,37377]},{"content":"array&gt;","pos":[37384,37390],"source":"array>"}],"content":"---\ntitle: \"array Class (STL) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"array/std::tr1::array\"\n  - \"std.tr1.array\"\n  - \"array\"\n  - \"std::tr1::array\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"array class [TR1]\"\nms.assetid: fdfd43a5-b2b5-4b9e-991f-93bf10fb4293\ncaps.latest.revision: 22\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# array Class (STL)\nDescribes an object that controls a sequence of length `N` of elements of type `Ty`. The sequence is stored as an array of `Ty`, contained in the `array<Ty, N>` object.  \n  \n## Syntax  \n  \n```  \ntemplate <class Ty, std::size_t N>  \nclass array;  \n```  \n  \n#### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|`Ty`|The type of an element.|  \n|`N`|The number of elements.|  \n  \n## Members  \n  \n|||  \n|-|-|  \n|Type Definition|Description|  \n|[array::const_iterator](#array__const_iterator)|The type of a constant iterator for the controlled sequence.|  \n|[array::const_pointer](#array__const_pointer)|The type of a constant pointer to an element.|  \n|[array::const_reference](#array__const_reference)|The type of a constant reference to an element.|  \n|[array::const_reverse_iterator](#array__const_reverse_iterator)|The type of a constant reverse iterator for the controlled sequence.|  \n|[array::difference_type](#array__difference_type)|The type of a signed distance between two elements.|  \n|[array::iterator](#array__iterator)|The type of an iterator for the controlled sequence.|  \n|[array::pointer](#array__pointer)|The type of a pointer to an element.|  \n|[array::reference](#array__reference)|The type of a reference to an element.|  \n|[array::reverse_iterator](#array__reverse_iterator)|The type of a reverse iterator for the controlled sequence.|  \n|[array::size_type](#array__size_type)|The type of an unsigned distance between two elements.|  \n|[array::value_type](#array__value_type)|The type of an element.|  \n  \n|||  \n|-|-|  \n|Member Function|Description|  \n|[array::array](#array__array)|Constructs an array object.|  \n|[array::assign](#array__assign)|Replaces all elements.|  \n|[array::at](#array__at)|Accesses an element at a specified position.|  \n|[array::back](#array__back)|Accesses the last element.|  \n|[array::begin](#array__begin)|Designates the beginning of the controlled sequence.|  \n|[array::cbegin](#array__cbegin)|Returns a random-access const iterator to the first element in the array.|  \n|[array::cend](#array__cend)|Returns a random-access const iterator that points just beyond the end of the array.|  \n|[array::crbegin](#array__crbegin)|Returns a const iterator to the first element in a reversed array.|  \n|[array::crend](#array__crend)|Returns a const iterator to the end of a reversed array.|  \n|[array::data](#array__data)|Gets the address of the first element.|  \n|[array::empty](#array__empty)|Tests whether elements are present.|  \n|[array::end](#array__end)|Designates the end of the controlled sequence.|  \n|[array::fill](#array__fill)|Replaces all elements with a specified value.|  \n|[array::front](#array__front)|Accesses the first element.|  \n|[array::max_size](#array__max_size)|Counts the number of elements.|  \n|[array::rbegin](#array__rbegin)|Designates the beginning of the reversed controlled sequence.|  \n|[array::rend](#array__rend)|Designates the end of the reversed controlled sequence.|  \n|[array::size](#array__size)|Counts the number of elements.|  \n|[array::swap](#array__swap)|Swaps the contents of two containers.|  \n  \n|||  \n|-|-|  \n|Operator|Description|  \n|[array::operator=](#array__operator_eq)|Replaces the controlled sequence.|  \n|[array::operator[]](#array__operator_at)|Accesses an element at a specified position.|  \n  \n## Remarks  \n The type has a default constructor `array()` and a default assignment operator `operator=`, and satisfies the requirements for an `aggregate`. Therefore, objects of type `array<Ty, N>` can be initialized by using an aggregate initializer. For example,  \n  \n```  \narray<int, 4> ai = { 1, 2, 3 };  \n```  \n  \n creates the object `ai` that holds four integer values, initializes the first three elements to the values 1, 2, and 3, respectively, and initializes the fourth element to 0.  \n  \n## Requirements  \n **Header:** \\<array>  \n  \n **Namespace:** std  \n  \n##  <a name=\"array__array\"></a>  array::array  \n Constructs an array object.  \n  \n```  \narray();\n\narray(const array& right);\n```  \n  \n### Parameters  \n `right`  \n Object or range to insert.  \n  \n### Remarks  \n The constructor:  \n  \n```  \narray();\n```  \n  \n leaves the controlled sequence uninitialized (or default initialized). You use it to specify an uninitialized controlled sequence.  \n  \n The constructor:  \n  \n```  \narray(const array& right);\n```  \n  \n initializes the controlled sequence with the sequence `[``right``.`[array::begin](#array__begin)`(),` `right``.`[array::end](#array__end)`())`. You use it to specify an initial controlled sequence that is a copy of the sequence controlled by the array object `right`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__array__array_array.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;   \nint main()   \n    {   \n    Myarray c0 = {0, 1, 2, 3};   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n    Myarray c1(c0);   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n0 1 2 3  \n```  \n  \n##  <a name=\"array__assign\"></a>  array::assign  \n Replaces all elements.  \n  \n```  \nvoid assign(const Ty& val);\n```  \n  \n### Parameters  \n `val`  \n The value to assign.  \n  \n### Remarks  \n The member function replaces the sequence controlled by `*this` with a repetition of `N` elements of value `val`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__array__array_assign.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;   \nint main()   \n    {   \n    Myarray c0 = {0, 1, 2, 3};   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n    Myarray c1;   \n    c1.assign(4);   \n  \n// display contents \" 4 4 4 4\"   \n    for (Myarray::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n4 4 4 4  \n```  \n  \n##  <a name=\"array__at\"></a>  array::at  \n Accesses an element at a specified position.  \n  \n```  \nreference at(size_type off);\n\nconstexpr const_reference at(size_type off) const;\n```  \n  \n### Parameters  \n `off`  \n Position of element to access.  \n  \n### Remarks  \n The member functions return a reference to the element of the controlled sequence at position `off`. If that position is invalid, the function throws an object of class `out_of_range`.  \n  \n### Example  \n  \n```cpp  \n// std__array__array_at.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;   \nint main()   \n    {   \n    Myarray c0 = {0, 1, 2, 3};   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n// display odd elements \" 1 3\"   \n    std::cout << \" \" << c0.at(1);   \n    std::cout << \" \" << c0.at(3);   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n##  <a name=\"array__back\"></a>  array::back  \n Accesses the last element.  \n  \n```  \nreference back();\n\nconstexpr const_reference back() const;\n```  \n  \n### Remarks  \n The member functions return a reference to the last element of the controlled sequence, which must be non-empty.  \n  \n### Example  \n  \n```cpp  \n// std__array__array_back.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;   \nint main()   \n    {   \n    Myarray c0 = {0, 1, 2, 3};   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n// display last element \" 3\"   \n    std::cout << \" \" << c0.back();   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n3  \n```  \n  \n##  <a name=\"array__begin\"></a>  array::begin  \n Designates the beginning of the controlled sequence.  \n  \n```  \niterator begin() noexcept;  \nconst_iterator begin() const noexcept;  \n```  \n  \n### Remarks  \n The member functions return a random-access iterator that points at the first element of the sequence (or just beyond the end of an empty sequence).  \n  \n### Example  \n  \n```cpp  \n// std_tr1__array__array_begin.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;   \nint main()   \n    {   \n    Myarray c0 = {0, 1, 2, 3};   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n// display first element \" 0\"   \n    Myarray::iterator it2 = c0.begin();   \n    std::cout << \" \" << *it2;   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n0  \n```  \n  \n##  <a name=\"array__cbegin\"></a>  array::cbegin  \n Returns a `const` iterator that addresses the first element in the range.  \n  \n```  \nconst_iterator cbegin() const noexcept;  \n```  \n  \n### Return Value  \n A `const` random-access iterator that points at the first element of the range, or the location just beyond the end of an empty range (for an empty range, `cbegin() == cend()`).  \n  \n### Remarks  \n With the return value of `cbegin`, the elements in the range cannot be modified.  \n  \n You can use this member function in place of the `begin()` member function to guarantee that the return value is `const_iterator`. Typically, it's used in conjunction with the [auto](../cpp/auto-cpp.md) type deduction keyword, as shown in the following example. In the example, consider `Container` to be a modifiable (non- `const`) container of any kind that supports `begin()` and `cbegin()`.  \n  \n```cpp  \n \nauto i1 = Container.begin();\n// i1 is Container<T>::iterator   \nauto i2 = Container.cbegin();\n\n// i2 is Container<T>::const_iterator  \n```  \n  \n##  <a name=\"array__cend\"></a>  array::cend  \n Returns a `const` iterator that addresses the location just beyond the last element in a range.  \n  \n```  \nconst_iterator cend() const noexcept;  \n```  \n  \n### Return Value  \n A random-access iterator that points just beyond the end of the range.  \n  \n### Remarks  \n `cend` is used to test whether an iterator has passed the end of its range.  \n  \n You can use this member function in place of the `end()` member function to guarantee that the return value is `const_iterator`. Typically, it's used in conjunction with the [auto](../cpp/auto-cpp.md) type deduction keyword, as shown in the following example. In the example, consider `Container` to be a modifiable (non- `const`) container of any kind that supports `end()` and `cend()`.  \n  \n```cpp  \n \nauto i1 = Container.end();\n// i1 is Container<T>::iterator   \nauto i2 = Container.cend();\n\n// i2 is Container<T>::const_iterator  \n```  \n  \n The value returned by `cend` should not be dereferenced.  \n  \n##  <a name=\"array__const_iterator\"></a>  array::const_iterator  \n The type of a constant iterator for the controlled sequence.  \n  \n```  \ntypedef implementation-defined const_iterator;  \n```  \n  \n### Remarks  \n The type describes an object that can serve as a constant random-access iterator for the controlled sequence.  \n  \n### Example  \n  \n```cpp  \n  \n// std__array__array_const_iterator.cpp  \n// compile with: /EHsc /W4  \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> MyArray;   \n  \nint main()   \n{   \n    MyArray c0 = {0, 1, 2, 3};   \n  \n    // display contents \" 0 1 2 3\"   \n    std::cout << \"it1:\";  \n    for ( MyArray::const_iterator it1 = c0.begin();   \n          it1 != c0.end();   \n          ++it1 ) {  \n       std::cout << \" \" << *it1;   \n    }  \n    std::cout << std::endl;   \n  \n    // display first element \" 0\"   \n    MyArray::const_iterator it2 = c0.begin();   \n    std::cout << \"it2:\";  \n    std::cout << \" \" << *it2;   \n    std::cout << std::endl;   \n  \n    return (0);   \n}  \n  \n```  \n  \n```Output  \nit1: 0 1 2 3                                  \n  \nit2: 0  \n  \n```  \n  \n##  <a name=\"array__const_pointer\"></a>  array::const_pointer  \n The type of a constant pointer to an element.  \n  \n```  \ntypedef const Ty *const_pointer;  \n```  \n  \n### Remarks  \n The type describes an object that can serve as a constant pointer to elements of the sequence.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__array__array_const_pointer.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;   \nint main()   \n    {   \n    Myarray c0 = {0, 1, 2, 3};   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n// display first element \" 0\"   \n    Myarray::const_pointer ptr = &*c0.begin();   \n    std::cout << \" \" << *ptr;   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n0  \n```  \n  \n##  <a name=\"array__const_reference\"></a>  array::const_reference  \n The type of a constant reference to an element.  \n  \n```  \ntypedef const Ty& const_reference;  \n```  \n  \n### Remarks  \n The type describes an object that can serve as a constant reference to an element of the controlled sequence.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__array__array_const_reference.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;   \nint main()   \n    {   \n    Myarray c0 = {0, 1, 2, 3};   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n// display first element \" 0\"   \n    Myarray::const_reference ref = *c0.begin();   \n    std::cout << \" \" << ref;   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n0  \n```  \n  \n##  <a name=\"array__const_reverse_iterator\"></a>  array::const_reverse_iterator  \n The type of a constant reverse iterator for the controlled sequence.  \n  \n```  \ntypedef std::reverse_iterator<const_iterator> const_reverse_iterator;  \n```  \n  \n### Remarks  \n The type describes an object that can serve as a constant reverse iterator for the controlled sequence.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__array__array_const_reverse_iterator.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;   \nint main()   \n    {   \n    Myarray c0 = {0, 1, 2, 3};   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n// display last element \" 3\"   \n    Myarray::const_reverse_iterator it2 = c0.rbegin();   \n    std::cout << \" \" << *it2;   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n3  \n```  \n  \n##  <a name=\"array__crbegin\"></a>  array::crbegin  \n Returns a const iterator to the first element in a reversed array.  \n  \n```  \nconst_reverse_iterator crbegin() const;\n```  \n  \n### Return Value  \n A const reverse random-access iterator addressing the first element in a reversed array or addressing what had been the last element in the unreversed array.  \n  \n### Remarks  \n With the return value of `crbegin`, the array object cannot be modified.  \n  \n### Example  \n  \n```cpp  \n// array_crbegin.cpp  \n// compile with: /EHsc  \n#include <array>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;     \n   array<int, 2> v1 = {1, 2};  \n   array<int, 2>::iterator v1_Iter;  \n   array<int, 2>::const_reverse_iterator v1_rIter;  \n  \n   v1_Iter = v1.begin( );  \n   cout << \"The first element of array is \"  \n        << *v1_Iter << \".\" << endl;  \n  \n   v1_rIter = v1.crbegin( );  \n   cout << \"The first element of the reversed array is \"  \n        << *v1_rIter << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe first element of array is 1.  \nThe first element of the reversed array is 2.  \n```  \n  \n##  <a name=\"array__crend\"></a>  array::crend  \n Returns a const iterator that addresses the location succeeding the last element in a reversed array.  \n  \n```  \nconst_reverse_iterator crend() const noexcept;  \n```  \n  \n### Return Value  \n A const reverse random-access iterator that addresses the location succeeding the last element in a reversed array (the location that had preceded the first element in the unreversed array).  \n  \n### Remarks  \n `crend` is used with a reversed array just as [array::cend](#array__cend) is used with a array.  \n  \n With the return value of `crend` (suitably decremented), the array object cannot be modified.  \n  \n `crend` can be used to test to whether a reverse iterator has reached the end of its array.  \n  \n The value returned by `crend` should not be dereferenced.  \n  \n### Example  \n  \n```cpp  \n// array_crend.cpp  \n// compile with: /EHsc  \n#include <array>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;     \n   array<int, 2> v1 = {1, 2};  \n   array<int, 2>::const_reverse_iterator v1_rIter;  \n  \n   for ( v1_rIter = v1.rbegin( ) ; v1_rIter != v1.rend( ) ; v1_rIter++ )  \n      cout << *v1_rIter << endl;  \n}  \n```  \n  \n```Output  \n2  \n1  \n```  \n  \n##  <a name=\"array__data\"></a>  array::data  \n Gets the address of the first element.  \n  \n```  \nTy *data();\n\nconst Ty *data() const;\n```  \n  \n### Remarks  \n The member functions return the address of the first element in the controlled sequence.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__array__array_data.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;   \nint main()   \n    {   \n    Myarray c0 = {0, 1, 2, 3};   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n// display first element \" 0\"   \n    Myarray::pointer ptr = c0.data();   \n    std::cout << \" \" << *ptr;   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n0  \n```  \n  \n##  <a name=\"array__difference_type\"></a>  array::difference_type  \n The type of a signed distance between two elements.  \n  \n```  \ntypedef std::ptrdiff_t difference_type;  \n```  \n  \n### Remarks  \n The signed integer type describes an object that can represent the difference between the addresses of any two elements in the controlled sequence. It is a synonym for the type `std::ptrdiff_t`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__array__array_difference_type.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;   \nint main()   \n    {   \n    Myarray c0 = {0, 1, 2, 3};   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n// display distance first-last \" -4\"   \n    Myarray::difference_type diff = c0.begin() - c0.end();   \n    std::cout << \" \" << diff;   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n-4  \n```  \n  \n##  <a name=\"array__empty\"></a>  array::empty  \n Tests whether no elements are present.  \n  \n```  \nconstexpr bool empty() const;\n```  \n  \n### Remarks  \n The member function returns true only if `N == 0`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__array__array_empty.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;   \nint main()   \n    {   \n    Myarray c0 = {0, 1, 2, 3};   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n// display whether c0 is empty \" false\"   \n    std::cout << std::boolalpha << \" \" << c0.empty();   \n    std::cout << std::endl;   \n  \n    std::array<int, 0> c1;   \n  \n// display whether c1 is empty \" true\"   \n    std::cout << std::boolalpha << \" \" << c1.empty();   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \nfalse  \ntrue  \n```  \n  \n##  <a name=\"array__end\"></a>  array::end  \n Designates the end of the controlled sequence.  \n  \n```  \nreference end();\n\nconst_reference end() const;\n```  \n  \n### Remarks  \n The member functions return a random-access iterator that points just beyond the end of the sequence.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__array__array_end.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;   \nint main()   \n    {   \n    Myarray c0 = {0, 1, 2, 3};   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n// display last element \" 3\"   \n    Myarray::iterator it2 = c0.end();   \n    std::cout << \" \" << *--it2;   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n3  \n```  \n  \n##  <a name=\"array__fill\"></a>  array::fill  \n Erases a array and copies the specified elements to the empty array.  \n  \n```  \nvoid fill(const Type& val);\n```  \n  \n### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|` val`|The value of the element being inserted into the array.|  \n  \n### Remarks  \n `fill` replaces each element of the array with the specified value.  \n  \n### Example  \n  \n```cpp  \n// array_fill.cpp  \n// compile with: /EHsc  \n#include <array>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   array<int, 2> v1 = {1, 2};  \n   array<int, 2>::iterator iter;  \n  \n   cout << \"v1 = \" ;  \n   for (iter = v1.begin(); iter != v1.end(); iter++)  \n      cout << *iter << \" \";  \n   cout << endl;  \n  \n   v1.fill(3);  \n   cout << \"v1 = \" ;  \n   for (iter = v1.begin(); iter != v1.end(); iter++)  \n      cout << *iter << \" \";  \n   cout << endl;  \n}  \n```  \n  \n##  <a name=\"array__front\"></a>  array::front  \n Accesses the first element.  \n  \n```  \nreference front();\n\nconstexpr const_reference front() const;\n```  \n  \n### Remarks  \n The member functions return a reference to the first element of the controlled sequence, which must be non-empty.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__array__array_front.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;   \nint main()   \n    {   \n    Myarray c0 = {0, 1, 2, 3};   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n// display first element \" 0\"   \n    std::cout << \" \" << c0.front();   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n0  \n```  \n  \n##  <a name=\"array__iterator\"></a>  array::iterator  \n The type of an iterator for the controlled sequence.  \n  \n```  \ntypedef implementation-defined iterator;  \n```  \n  \n### Remarks  \n The type describes an object that can serve as a random-access iterator for the controlled sequence.  \n  \n### Example  \n  \n```cpp  \n  \n// std__array__array_iterator.cpp   \n// compile with: /EHsc /W4  \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> MyArray;   \n  \nint main()   \n{   \n    MyArray c0 = {0, 1, 2, 3};   \n  \n    // display contents \" 0 1 2 3\"   \n    std::cout << \"it1:\";  \n    for ( MyArray::iterator it1 = c0.begin();   \n          it1 != c0.end();   \n          ++it1 ) {  \n       std::cout << \" \" << *it1;   \n    }  \n    std::cout << std::endl;   \n  \n    // display first element \" 0\"   \n    MyArray::iterator it2 = c0.begin();   \n    std::cout << \"it2:\";  \n    std::cout << \" \" << *it2;   \n    std::cout << std::endl;   \n  \n    return (0);   \n}  \n  \n```  \n  \n```Output  \nit1: 0 1 2 3                                  \n  \nit2: 0  \n  \n```  \n  \n##  <a name=\"array__max_size\"></a>  array::max_size  \n Counts the number of elements.  \n  \n```  \nconstexpr size_type max_size() const;\n```  \n  \n### Remarks  \n The member function returns `N`.  \n  \n### Example  \n  \n```cpp  \n// std__array__array_max_size.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;   \nint main()   \n    {   \n    Myarray c0 = {0, 1, 2, 3};   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n// display (maximum) size \" 4\"   \n    std::cout << \" \" << c0.max_size();   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n4  \n```  \n  \n##  <a name=\"array__operator_at\"></a>  array::operator[]  \n Accesses an element at a specified position.  \n  \n```  \n \nreference operator[](size_type off);\n\nconstexpr const_reference operator[](size_type off) const;\n```  \n  \n### Parameters  \n `off`  \n Position of element to access.  \n  \n### Remarks  \n The member functions return a reference to the element of the controlled sequence at position `off`. If that position is invalid, the behavior is undefined.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__array__array_operator_sub.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;   \nint main()   \n    {   \n    Myarray c0 = {0, 1, 2, 3};   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n// display odd elements \" 1 3\"   \n    std::cout << \" \" << c0[1];   \n    std::cout << \" \" << c0[3];   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n1 3  \n```  \n  \n##  <a name=\"array__operator_eq\"></a>  array::operator=  \n Replaces the controlled sequence.  \n  \n```  \narray <Value>%  operator=(array <Value>% right);\n```  \n  \n### Parameters  \n right  \n Container to copy.  \n  \n### Remarks  \n The member operator assigns each element of `right` to the corresponding element of the controlled sequence, then returns `*this`. You use it to replace the controlled sequence with a copy of the controlled sequence in `right`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__array__array_operator_as.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;   \nint main()   \n    {   \n    Myarray c0 = {0, 1, 2, 3};   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n    Myarray c1;   \n    c1 = c0;   \n  \n// display copied contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n0 1 2 3  \n```  \n  \n##  <a name=\"array__pointer\"></a>  array::pointer  \n The type of a pointer to an element.  \n  \n```  \ntypedef Ty *pointer;  \n```  \n  \n### Remarks  \n The type describes an object that can serve as a pointer to elements of the sequence.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__array__array_pointer.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;   \nint main()   \n    {   \n    Myarray c0 = {0, 1, 2, 3};   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n// display first element \" 0\"   \n    Myarray::pointer ptr = &*c0.begin();   \n    std::cout << \" \" << *ptr;   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n0  \n```  \n  \n##  <a name=\"array__rbegin\"></a>  array::rbegin  \n Designates the beginning of the reversed controlled sequence.  \n  \n```  \nreverse_iterator rbegin()noexcept;  \nconst_reverse_iterator rbegin() const noexcept;  \n```  \n  \n### Remarks  \n The member functions return a reverse iterator that points just beyond the end of the controlled sequence. Hence, it designates the beginning of the reverse sequence.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__array__array_rbegin.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;   \nint main()   \n    {   \n    Myarray c0 = {0, 1, 2, 3};   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n// display last element \" 3\"   \n    Myarray::const_reverse_iterator it2 = c0.rbegin();   \n    std::cout << \" \" << *it2;   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n3  \n```  \n  \n##  <a name=\"array__reference\"></a>  array::reference  \n The type of a reference to an element.  \n  \n```  \ntypedef Ty& reference;  \n```  \n  \n### Remarks  \n The type describes an object that can serve as a reference to an element of the controlled sequence.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__array__array_reference.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;   \nint main()   \n    {   \n    Myarray c0 = {0, 1, 2, 3};   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n// display first element \" 0\"   \n    Myarray::reference ref = *c0.begin();   \n    std::cout << \" \" << ref;   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n0  \n```  \n  \n##  <a name=\"array__rend\"></a>  array::rend  \n Designates the end of the reversed controlled sequence.  \n  \n```  \nreverse_iterator rend()noexcept;  \nconst_reverse_iterator rend() const noexcept;  \n```  \n  \n### Remarks  \n The member functions return a reverse iterator that points at the first element of the sequence (or just beyond the end of an empty sequence)). Hence, it designates the end of the reverse sequence.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__array__array_rend.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;   \nint main()   \n    {   \n    Myarray c0 = {0, 1, 2, 3};   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n// display first element \" 0\"   \n    Myarray::const_reverse_iterator it2 = c0.rend();   \n    std::cout << \" \" << *--it2;   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n0  \n```  \n  \n##  <a name=\"array__reverse_iterator\"></a>  array::reverse_iterator  \n The type of a reverse iterator for the controlled sequence.  \n  \n```  \ntypedef std::reverse_iterator<iterator> reverse_iterator;  \n```  \n  \n### Remarks  \n The type describes an object that can serve as a reverse iterator for the controlled sequence.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__array__array_reverse_iterator.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;   \nint main()   \n    {   \n    Myarray c0 = {0, 1, 2, 3};   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n// display last element \" 3\"   \n    Myarray::reverse_iterator it2 = c0.rbegin();   \n    std::cout << \" \" << *it2;   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n3  \n```  \n  \n##  <a name=\"array__size\"></a>  array::size  \n Counts the number of elements.  \n  \n```  \nconstexpr size_type size() const;\n```  \n  \n### Remarks  \n The member function returns `N`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__array__array_size.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;   \nint main()   \n    {   \n    Myarray c0 = {0, 1, 2, 3};   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n// display size \" 4\"   \n    std::cout << \" \" << c0.size();   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n4  \n```  \n  \n##  <a name=\"array__size_type\"></a>  array::size_type  \n The type of an unsigned distance between two element.  \n  \n```  \ntypedef std::size_t size_type;  \n```  \n  \n### Remarks  \n The unsigned integer type describes an object that can represent the length of any controlled sequence. It is a synonym for the type `std::size_t`.  \n  \n### Example  \n  \n```cpp  \n// std__array__array_size_type.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;   \nint main()   \n    {   \n    Myarray c0 = {0, 1, 2, 3};   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n// display distance last-first \" 4\"   \n    Myarray::size_type diff = c0.end() - c0.begin();   \n    std::cout << \" \" << diff;   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n4  \n```  \n  \n##  <a name=\"array__swap\"></a>  array::swap  \n Swaps the contents of two arrays.  \n  \n```  \nvoid swap(array& right);\n```  \n  \n### Parameters  \n `right`  \n Array to swap contents with.  \n  \n### Remarks  \n The member function swaps the controlled sequences between `*this` and `right`. It performs a number of element assignments and constructor calls proportional to `N`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__array__array_swap.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;   \nint main()   \n    {   \n    Myarray c0 = {0, 1, 2, 3};   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n    Myarray c1 = {4, 5, 6, 7};   \n    c0.swap(c1);   \n  \n// display swapped contents \" 4 5 6 7\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n    swap(c0, c1);   \n  \n// display swapped contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n4 5 6 7  \n0 1 2 3  \n```  \n  \n##  <a name=\"array__value_type\"></a>  array::value_type  \n The type of an element.  \n  \n```  \ntypedef Ty value_type;  \n```  \n  \n### Remarks  \n The type is a synonym for the template parameter `Ty`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__array__array_value_type.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;   \nint main()   \n    {   \n    Myarray c0 = {0, 1, 2, 3};   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        std::cout << \" \" << *it;   \n    std::cout << std::endl;   \n  \n// display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();   \n        it != c0.end(); ++it)   \n        {   \n        Myarray::value_type val = *it;   \n        std::cout << \" \" << val;   \n        }   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n0 1 2 3  \n0 1 2 3  \n```  \n  \n## See Also  \n [\\<array>](../standard-library/array.md)\n\n"}