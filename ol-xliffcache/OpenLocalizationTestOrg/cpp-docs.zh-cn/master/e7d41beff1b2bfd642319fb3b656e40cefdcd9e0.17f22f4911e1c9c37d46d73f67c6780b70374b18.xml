{"nodes":[{"pos":[12,95],"content":"How to: Provide Work Functions to the call and transformer Classes | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Provide Work Functions to the call and transformer Classes | Microsoft Docs","pos":[0,83]}]},{"content":"How to: Provide Work Functions to the call and transformer Classes","pos":[755,821]},{"pos":[822,1051],"content":"This topic illustrates several ways to provide work functions to the <bpt id=\"p1\">[</bpt>concurrency::call<ept id=\"p1\">](../../parallel/concrt/reference/call-class.md)</ept> and <bpt id=\"p2\">[</bpt>concurrency::transformer<ept id=\"p2\">](../../parallel/concrt/reference/transformer-class.md)</ept> classes.","source":"This topic illustrates several ways to provide work functions to the [concurrency::call](../../parallel/concrt/reference/call-class.md) and [concurrency::transformer](../../parallel/concrt/reference/transformer-class.md) classes."},{"content":"The first example shows how to pass a lambda expression to a <ph id=\"ph1\">`call`</ph> object.","pos":[1058,1133],"source":"The first example shows how to pass a lambda expression to a `call` object."},{"content":"The second example shows how to pass a function object to a <ph id=\"ph1\">`call`</ph> object.","pos":[1134,1208],"source":" The second example shows how to pass a function object to a `call` object."},{"content":"The third example shows how to bind a class method to a <ph id=\"ph1\">`call`</ph> object.","pos":[1209,1279],"source":" The third example shows how to bind a class method to a `call` object."},{"content":"For illustration, every example in this topic uses the <ph id=\"ph1\">`call`</ph> class.","pos":[1286,1354],"source":"For illustration, every example in this topic uses the `call` class."},{"content":"For an example that uses the <ph id=\"ph1\">`transformer`</ph> class, see <bpt id=\"p1\">[</bpt>How to: Use transformer in a Data Pipeline<ept id=\"p1\">](../../parallel/concrt/how-to-use-transformer-in-a-data-pipeline.md)</ept>.","pos":[1355,1522],"source":" For an example that uses the `transformer` class, see [How to: Use transformer in a Data Pipeline](../../parallel/concrt/how-to-use-transformer-in-a-data-pipeline.md)."},{"content":"Example","pos":[1531,1538]},{"content":"The following example shows a common way to use the <ph id=\"ph1\">`call`</ph> class.","pos":[1542,1607],"source":"The following example shows a common way to use the `call` class."},{"content":"This example passes a lambda function to the <ph id=\"ph1\">`call`</ph> constructor.","pos":[1608,1672],"source":" This example passes a lambda function to the `call` constructor."},{"pos":[1690,1710],"content":"concrt-call-lambda#1"},{"content":"This example produces the following output.","pos":[1830,1873]},{"content":"Example","pos":[1924,1931]},{"pos":[1935,2064],"content":"The following example resembles the previous one, except that it uses the <ph id=\"ph1\">`call`</ph> class together with a function object (functor).","source":"The following example resembles the previous one, except that it uses the `call` class together with a function object (functor)."},{"pos":[2082,2103],"content":"concrt-call-functor#1"},{"content":"Example","pos":[2225,2232]},{"pos":[2237,2527],"content":"The following example resembles the previous one, except that it uses the <bpt id=\"p1\">[</bpt>std::bind1st<ept id=\"p1\">](../../standard-library/functional-functions.md#bind1st_function)</ept> and <bpt id=\"p2\">[</bpt>std::mem_fun<ept id=\"p2\">](../../standard-library/functional-functions.md#mem_fun_function)</ept> functions to bind a <ph id=\"ph1\">`call`</ph> object to a class method.","source":"The following example resembles the previous one, except that it uses the [std::bind1st](../../standard-library/functional-functions.md#bind1st_function) and [std::mem_fun](../../standard-library/functional-functions.md#mem_fun_function) functions to bind a `call` object to a class method."},{"pos":[2535,2686],"content":"Use this technique if you have to bind a <ph id=\"ph1\">`call`</ph> or <ph id=\"ph2\">`transformer`</ph> object to a specific class method instead of the function call operator, <ph id=\"ph3\">`operator()`</ph>.","source":"Use this technique if you have to bind a `call` or `transformer` object to a specific class method instead of the function call operator, `operator()`."},{"pos":[2704,2724],"content":"concrt-call-method#1"},{"pos":[2844,3032],"content":"You can also assign the result of the <ph id=\"ph1\">`bind1st`</ph> function to a <bpt id=\"p1\">[</bpt>std::function<ept id=\"p1\">](../../standard-library/function-class.md)</ept> object or use the <ph id=\"ph2\">`auto`</ph> keyword, as shown in the following example.","source":"You can also assign the result of the `bind1st` function to a [std::function](../../standard-library/function-class.md) object or use the `auto` keyword, as shown in the following example."},{"pos":[3050,3070],"content":"concrt-call-method#2"},{"content":"Compiling the Code","pos":[3192,3210]},{"pos":[3214,3400],"content":"Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named <ph id=\"ph1\">`call.cpp`</ph> and then run the following command in a Visual Studio Command Prompt window.","source":"Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named `call.cpp` and then run the following command in a Visual Studio Command Prompt window."},{"content":"cl.exe /EHsc call.cpp","pos":[3409,3430]},{"content":"See Also","pos":[3441,3449]},{"content":"Asynchronous Agents Library","pos":[3454,3481]},{"content":"Asynchronous Message Blocks","pos":[3542,3569]},{"content":"How to: Use transformer in a Data Pipeline","pos":[3630,3672]},{"content":"call Class","pos":[3747,3757]},{"content":"transformer Class","pos":[3811,3828]}],"content":"---\ntitle: \"How to: Provide Work Functions to the call and transformer Classes | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"call class, example\"\n  - \"using the transformer class [Concurrency Runtime]\"\n  - \"using the call class [Concurrency Runtime]\"\nms.assetid: df715ce4-8507-41ca-b204-636d11707a73\ncaps.latest.revision: 15\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# How to: Provide Work Functions to the call and transformer Classes\nThis topic illustrates several ways to provide work functions to the [concurrency::call](../../parallel/concrt/reference/call-class.md) and [concurrency::transformer](../../parallel/concrt/reference/transformer-class.md) classes.  \n  \n The first example shows how to pass a lambda expression to a `call` object. The second example shows how to pass a function object to a `call` object. The third example shows how to bind a class method to a `call` object.  \n  \n For illustration, every example in this topic uses the `call` class. For an example that uses the `transformer` class, see [How to: Use transformer in a Data Pipeline](../../parallel/concrt/how-to-use-transformer-in-a-data-pipeline.md).  \n  \n## Example  \n The following example shows a common way to use the `call` class. This example passes a lambda function to the `call` constructor.  \n  \n [!code-cpp[concrt-call-lambda#1](../../parallel/concrt/codesnippet/cpp/how-to-provide-work-functions-to-the-call-and-transformer-classes_1.cpp)]  \n  \n This example produces the following output.  \n  \n```Output  \n13 squared is 169.  \n```  \n  \n## Example  \n The following example resembles the previous one, except that it uses the `call` class together with a function object (functor).  \n  \n [!code-cpp[concrt-call-functor#1](../../parallel/concrt/codesnippet/cpp/how-to-provide-work-functions-to-the-call-and-transformer-classes_2.cpp)]  \n  \n## Example  \n\n The following example resembles the previous one, except that it uses the [std::bind1st](../../standard-library/functional-functions.md#bind1st_function) and [std::mem_fun](../../standard-library/functional-functions.md#mem_fun_function) functions to bind a `call` object to a class method.  \n\n  \n Use this technique if you have to bind a `call` or `transformer` object to a specific class method instead of the function call operator, `operator()`.  \n  \n [!code-cpp[concrt-call-method#1](../../parallel/concrt/codesnippet/cpp/how-to-provide-work-functions-to-the-call-and-transformer-classes_3.cpp)]  \n  \n You can also assign the result of the `bind1st` function to a [std::function](../../standard-library/function-class.md) object or use the `auto` keyword, as shown in the following example.  \n  \n [!code-cpp[concrt-call-method#2](../../parallel/concrt/codesnippet/cpp/how-to-provide-work-functions-to-the-call-and-transformer-classes_4.cpp)]  \n  \n## Compiling the Code  \n Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named `call.cpp` and then run the following command in a Visual Studio Command Prompt window.  \n  \n **cl.exe /EHsc call.cpp**  \n  \n## See Also  \n [Asynchronous Agents Library](../../parallel/concrt/asynchronous-agents-library.md)   \n [Asynchronous Message Blocks](../../parallel/concrt/asynchronous-message-blocks.md)   \n [How to: Use transformer in a Data Pipeline](../../parallel/concrt/how-to-use-transformer-in-a-data-pipeline.md)   \n [call Class](../../parallel/concrt/reference/call-class.md)   \n [transformer Class](../../parallel/concrt/reference/transformer-class.md)\n"}