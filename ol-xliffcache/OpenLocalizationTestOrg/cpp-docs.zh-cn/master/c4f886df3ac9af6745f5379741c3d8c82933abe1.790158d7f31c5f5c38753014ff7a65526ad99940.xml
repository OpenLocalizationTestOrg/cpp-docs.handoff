{"nodes":[{"pos":[12,43],"content":"&lt;chrono&gt; | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"chrono<ph id=\"ph1\">&amp;gt;</ph> | Microsoft Docs","pos":[4,31],"source":"chrono&gt; | Microsoft Docs"}]},{"content":"chrono","pos":[773,779]},{"content":"Include the standard header <ph id=\"ph1\">\\&lt;</ph>chrono&gt; to define classes and functions that represent and manipulate time durations and time instants.","pos":[784,917],"source":"Include the standard header \\<chrono> to define classes and functions that represent and manipulate time durations and time instants."},{"content":"<bpt id=\"p1\">**</bpt>(Visual Studio 2015:)<ept id=\"p1\">**</ept> The implementation of <ph id=\"ph1\">`steady_clock`</ph> has changed to meet the C++ Standard requirements for steadiness and monotonicity.","pos":[924,1069],"source":"**(Visual Studio 2015:)** The implementation of `steady_clock` has changed to meet the C++ Standard requirements for steadiness and monotonicity."},{"content":"is now based on QueryPerformanceCounter() and <ph id=\"ph1\">`high_resolution_clock`</ph> is now a typedef for <ph id=\"ph2\">`steady_clock`</ph>.","pos":[1085,1191],"source":" is now based on QueryPerformanceCounter() and `high_resolution_clock` is now a typedef for `steady_clock`."},{"content":"As a result, in Visual C++ <ph id=\"ph1\">`steady_clock::time_point`</ph> is now a typedef for <ph id=\"ph2\">`chrono::time_point&lt;steady_clock&gt;`</ph>; however, this is not necessarily the case for other implementations.","pos":[1192,1371],"source":" As a result, in Visual C++ `steady_clock::time_point` is now a typedef for `chrono::time_point<steady_clock>`; however, this is not necessarily the case for other implementations."},{"content":"Syntax","pos":[1380,1386]},{"content":"Classes","pos":[1432,1439]},{"content":"Name","pos":[1446,1450]},{"content":"Description","pos":[1451,1462]},{"content":"duration Class","pos":[1501,1515]},{"content":"Describes a type that holds a time interval.","pos":[1556,1600]},{"content":"time_point Class","pos":[1606,1622]},{"content":"Describes a type that represents a point in time.","pos":[1665,1714]},{"content":"Structs","pos":[1725,1732]},{"content":"Name","pos":[1739,1743]},{"content":"Description","pos":[1744,1755]},{"content":"common_type Structure","pos":[1794,1815]},{"pos":[1863,2013],"content":"Describes specializations of template class <bpt id=\"p1\">[</bpt>common_type<ept id=\"p1\">](../standard-library/common-type-class.md)</ept> for instantiations of <ph id=\"ph1\">`duration`</ph> and <ph id=\"ph2\">`time_point`</ph>.","source":"Describes specializations of template class [common_type](../standard-library/common-type-class.md) for instantiations of `duration` and `time_point`."},{"content":"duration_values Structure","pos":[2019,2044]},{"pos":[2096,2165],"content":"Provides specific values for the <ph id=\"ph1\">`duration`</ph> template parameter <ph id=\"ph2\">`Rep`</ph>.","source":"Provides specific values for the `duration` template parameter `Rep`."},{"content":"steady_clock struct","pos":[2171,2190]},{"pos":[2236,2264],"content":"Represents a <ph id=\"ph1\">`steady`</ph> clock.","source":"Represents a `steady` clock."},{"content":"system_clock Structure","pos":[2270,2292]},{"pos":[2341,2418],"content":"Represents a <bpt id=\"p1\">*</bpt>clock type<ept id=\"p1\">*</ept> that is based on the real-time clock of the system.","source":"Represents a *clock type* that is based on the real-time clock of the system."},{"content":"treat_as_floating_point Structure","pos":[2424,2457]},{"content":"Specifies whether a type can be treated as a floating-point type.","pos":[2517,2582]},{"content":"Functions","pos":[2593,2602]},{"content":"Name","pos":[2609,2613]},{"content":"Description","pos":[2614,2625]},{"content":"duration_cast Function","pos":[2664,2686]},{"pos":[2752,2798],"content":"Casts a <ph id=\"ph1\">`duration`</ph> object to a specified type.","source":"Casts a `duration` object to a specified type."},{"content":"time_point_cast Function","pos":[2804,2828]},{"pos":[2896,2944],"content":"Casts a <ph id=\"ph1\">`time_point`</ph> object to a specified type.","source":"Casts a `time_point` object to a specified type."},{"content":"Operators","pos":[2955,2964]},{"content":"Name","pos":[2971,2975]},{"content":"Description","pos":[2976,2987]},{"content":"operator-","pos":[3026,3035]},{"pos":[3088,3164],"content":"Operator for subtraction or negation of <ph id=\"ph1\">`duration`</ph> and <ph id=\"ph2\">`time_point`</ph> objects.","source":"Operator for subtraction or negation of `duration` and `time_point` objects."},{"content":"operator!=","pos":[3170,3180]},{"pos":[3236,3309],"content":"Inequality operator that is used with <ph id=\"ph1\">`duration`</ph> or <ph id=\"ph2\">`time_point`</ph> objects.","source":"Inequality operator that is used with `duration` or `time_point` objects."},{"content":"operator modulo","pos":[3315,3330]},{"pos":[3389,3442],"content":"Operator for modulo operations on <ph id=\"ph1\">`duration`</ph> objects.","source":"Operator for modulo operations on `duration` objects."},{"content":"operator*","pos":[3448,3457]},{"pos":[3514,3561],"content":"Multiplication operator for <ph id=\"ph1\">`duration`</ph> objects.","source":"Multiplication operator for `duration` objects."},{"content":"operator/","pos":[3567,3576]},{"pos":[3629,3670],"content":"Division operator for <ph id=\"ph1\">`duration`</ph> objects.","source":"Division operator for `duration` objects."},{"content":"operator+","pos":[3676,3685]},{"pos":[3741,3782],"content":"Adds <ph id=\"ph1\">`duration`</ph> and <ph id=\"ph2\">`time_point`</ph> objects.","source":"Adds `duration` and `time_point` objects."},{"content":"operator","pos":[3788,3796]},{"pos":[3856,3968],"content":"Determines whether one <ph id=\"ph1\">`duration`</ph> or <ph id=\"ph2\">`time_point`</ph> object is less than another <ph id=\"ph3\">`duration`</ph> or <ph id=\"ph4\">`time_point`</ph> object.","source":"Determines whether one `duration` or `time_point` object is less than another `duration` or `time_point` object."},{"content":"operator","pos":[3974,3982]},{"pos":[4046,4170],"content":"Determines whether one <ph id=\"ph1\">`duration`</ph> or <ph id=\"ph2\">`time_point`</ph> object is less than or equal to another <ph id=\"ph3\">`duration`</ph> or <ph id=\"ph4\">`time_point`</ph> object.","source":"Determines whether one `duration` or `time_point` object is less than or equal to another `duration` or `time_point` object."},{"content":"operator==","pos":[4176,4186]},{"pos":[4244,4407],"content":"Determines whether two <ph id=\"ph1\">`duration`</ph> objects represent time intervals that have the same length, or whether two <ph id=\"ph2\">`time_point`</ph> objects represent the same point in time.","source":"Determines whether two `duration` objects represent time intervals that have the same length, or whether two `time_point` objects represent the same point in time."},{"content":"operator","pos":[4413,4421]},{"pos":[4481,4596],"content":"Determines whether one <ph id=\"ph1\">`duration`</ph> or <ph id=\"ph2\">`time_point`</ph> object is greater than another <ph id=\"ph3\">`duration`</ph> or <ph id=\"ph4\">`time_point`</ph> object.","source":"Determines whether one `duration` or `time_point` object is greater than another `duration` or `time_point` object."},{"content":"operator","pos":[4602,4610]},{"pos":[4674,4801],"content":"Determines whether one <ph id=\"ph1\">`duration`</ph> or <ph id=\"ph2\">`time_point`</ph> object is greater than or equal to another <ph id=\"ph3\">`duration`</ph> or <ph id=\"ph4\">`time_point`</ph> object.","source":"Determines whether one `duration` or `time_point` object is greater than or equal to another `duration` or `time_point` object."},{"content":"Predefined Duration Types","pos":[4812,4837]},{"pos":[4841,4966],"content":"For more information about ratio types that are used in the following typedefs, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>ratio&gt;<ept id=\"p1\">](../standard-library/ratio.md)</ept>.","source":"For more information about ratio types that are used in the following typedefs, see [\\<ratio>](../standard-library/ratio.md)."},{"content":"Typedef","pos":[4973,4980]},{"content":"Description","pos":[4981,4992]},{"pos":[5082,5153],"content":"Synonym for a <ph id=\"ph1\">`duration`</ph> type that has a tick period of one nanosecond.","source":"Synonym for a `duration` type that has a tick period of one nanosecond."},{"pos":[5209,5281],"content":"Synonym for a <ph id=\"ph1\">`duration`</ph> type that has a tick period of one microsecond.","source":"Synonym for a `duration` type that has a tick period of one microsecond."},{"pos":[5337,5409],"content":"Synonym for a <ph id=\"ph1\">`duration`</ph> type that has a tick period of one millisecond.","source":"Synonym for a `duration` type that has a tick period of one millisecond."},{"pos":[5453,5520],"content":"Synonym for a <ph id=\"ph1\">`duration`</ph> type that has a tick period of one second.","source":"Synonym for a `duration` type that has a tick period of one second."},{"pos":[5570,5637],"content":"Synonym for a <ph id=\"ph1\">`duration`</ph> type that has a tick period of one minute.","source":"Synonym for a `duration` type that has a tick period of one minute."},{"pos":[5687,5752],"content":"Synonym for a <ph id=\"ph1\">`duration`</ph> type that has a tick period of one hour.","source":"Synonym for a `duration` type that has a tick period of one hour."},{"content":"Literals","pos":[5763,5771]},{"content":"<bpt id=\"p1\">**</bpt>(C++11)<ept id=\"p1\">**</ept>The <ph id=\"ph1\">\\&lt;</ph>chrono&gt; header defines the following <bpt id=\"p2\">[</bpt>user-defined literals<ept id=\"p2\">](../cpp/user-defined-literals-cpp.md)</ept> that you can use for greater convenience, type-safety and maintainability of your code.","pos":[5775,5977],"source":"**(C++11)**The \\<chrono> header defines the following [user-defined literals](../cpp/user-defined-literals-cpp.md) that you can use for greater convenience, type-safety and maintainability of your code."},{"content":"These literals are defined in the <ph id=\"ph1\">`literals::chrono_literals`</ph> inline namespace and are in scope when std::chrono is in scope.","pos":[5978,6103],"source":" These literals are defined in the `literals::chrono_literals` inline namespace and are in scope when std::chrono is in scope."},{"content":"Literal","pos":[6110,6117]},{"content":"Description","pos":[6118,6129]},{"content":"chrono::hours operator \"\" h(unsigned long long Val)","pos":[6170,6221]},{"content":"Specifies hours as an integral value.","pos":[6222,6259]},{"content":"chrono::duration&lt;double, ratio<ph id=\"ph1\">\\&lt;</ph>3600&gt; &gt; operator \"\" h(long double Val)","pos":[6264,6334],"source":"chrono::duration<double, ratio\\<3600> > operator \"\" h(long double Val)"},{"content":"Specifies hours as a floating-point value.","pos":[6335,6377]},{"content":"chrono::minutes (operator \"\" min)(unsigned long long Val)","pos":[6382,6439]},{"content":"Specifies minutes as an integral value.","pos":[6440,6479]},{"content":"chrono::duration&lt;double, ratio<ph id=\"ph1\">\\&lt;</ph>60&gt; &gt; (operator \"\" min)( long double Val)","pos":[6484,6557],"source":"chrono::duration<double, ratio\\<60> > (operator \"\" min)( long double Val)"},{"content":"Specifies minutes as a floating-point value.","pos":[6558,6602]},{"content":"chrono::seconds operator \"\" s(unsigned long long Val)","pos":[6607,6660]},{"content":"Specifies minutes as an integral value.","pos":[6661,6700]},{"content":"chrono::duration<ph id=\"ph1\">\\&lt;</ph>double&gt; operator \"\" s(long double Val)","pos":[6705,6761],"source":"chrono::duration\\<double> operator \"\" s(long double Val)"},{"content":"Specifies seconds as a floating-point value.","pos":[6762,6806]},{"content":"chrono::milliseconds operator \"\" ms(unsigned long long Val)","pos":[6811,6870]},{"content":"Specifies milliseconds as an integral value.","pos":[6871,6915]},{"content":"chrono::duration<ph id=\"ph1\">\\&lt;</ph>double, milli&gt; operator \"\" ms(long double Val)","pos":[6920,6984],"source":"chrono::duration\\<double, milli> operator \"\" ms(long double Val)"},{"content":"Specifies milliseconds as a floating-point value.","pos":[6985,7034]},{"content":"chrono::microseconds operator \"\" us(unsigned long long Val)","pos":[7039,7098]},{"content":"Specifies microseconds as an integral value.","pos":[7099,7143]},{"content":"chrono::duration<ph id=\"ph1\">\\&lt;</ph>double, micro&gt; operator \"\" us(long double Val)","pos":[7148,7212],"source":"chrono::duration\\<double, micro> operator \"\" us(long double Val)"},{"content":"Specifies microseconds as a floating-point value.","pos":[7213,7262]},{"content":"chrono::nanoseconds operator \"\" ns(unsigned long long Val)","pos":[7267,7325]},{"content":"Specifies nanoseconds as an integral value.","pos":[7326,7369]},{"content":"chrono::duration<ph id=\"ph1\">\\&lt;</ph>double, nano&gt; operator \"\" ns(long double Val)","pos":[7374,7437],"source":"chrono::duration\\<double, nano> operator \"\" ns(long double Val)"},{"content":"Specifies nanoseconds as a floating-point value.","pos":[7438,7486]},{"content":"The following examples show how to use the chrono literals.","pos":[7499,7558]},{"content":"Remarks","pos":[7682,7689]},{"content":"See Also","pos":[7698,7706]},{"content":"Header Files Reference","pos":[7711,7733]}],"content":"---\ntitle: \"&lt;chrono&gt; | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"chrono/std::chrono::nanoseconds\"\n  - \"chrono/std::chrono::minutes\"\n  - \"chrono/std::chrono::seconds\"\n  - \"<chrono>\"\n  - \"chrono/std::chrono::hours\"\n  - \"chrono/std::chrono::milliseconds\"\n  - \"chrono/std::chrono::microseconds\"\ndev_langs: \n  - \"C++\"\nms.assetid: 844de749-f306-482e-89bc-6f53c99c8324\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# &lt;chrono&gt;\nInclude the standard header \\<chrono> to define classes and functions that represent and manipulate time durations and time instants.  \n  \n **(Visual Studio 2015:)** The implementation of `steady_clock` has changed to meet the C++ Standard requirements for steadiness and monotonicity. `steady_clock` is now based on QueryPerformanceCounter() and `high_resolution_clock` is now a typedef for `steady_clock`. As a result, in Visual C++ `steady_clock::time_point` is now a typedef for `chrono::time_point<steady_clock>`; however, this is not necessarily the case for other implementations.  \n  \n## Syntax  \n  \n```cpp  \n#include <chrono>  \n```  \n\n### Classes  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[duration Class](../standard-library/duration-class.md)|Describes a type that holds a time interval.|  \n|[time_point Class](../standard-library/time-point-class.md)|Describes a type that represents a point in time.|  \n  \n### Structs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[common_type Structure](../standard-library/common-type-structure.md)|Describes specializations of template class [common_type](../standard-library/common-type-class.md) for instantiations of `duration` and `time_point`.|  \n|[duration_values Structure](../standard-library/duration-values-structure.md)|Provides specific values for the `duration` template parameter `Rep`.|  \n|[steady_clock struct](../standard-library/steady-clock-struct.md)|Represents a `steady` clock.|  \n|[system_clock Structure](../standard-library/system-clock-structure.md)|Represents a *clock type* that is based on the real-time clock of the system.|  \n|[treat_as_floating_point Structure](../standard-library/treat-as-floating-point-structure.md)|Specifies whether a type can be treated as a floating-point type.|  \n  \n### Functions  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[duration_cast Function](../standard-library/chrono-functions.md#duration_cast_function)|Casts a `duration` object to a specified type.|  \n|[time_point_cast Function](../standard-library/chrono-functions.md#time_point_cast_function)|Casts a `time_point` object to a specified type.|  \n  \n### Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[operator-](../standard-library/chrono-operators.md#operator-)|Operator for subtraction or negation of `duration` and `time_point` objects.|  \n|[operator!=](../standard-library/chrono-operators.md#operator_neq)|Inequality operator that is used with `duration` or `time_point` objects.|  \n|[operator modulo](../standard-library/chrono-operators.md#operator_modulo)|Operator for modulo operations on `duration` objects.|  \n|[operator*](../standard-library/chrono-operators.md#operator_star)|Multiplication operator for `duration` objects.|  \n|[operator/](../standard-library/chrono-operators.md#operator_)|Division operator for `duration` objects.|  \n|[operator+](../standard-library/chrono-operators.md#operator_add)|Adds `duration` and `time_point` objects.|  \n|[operator&lt;](../standard-library/chrono-operators.md#operator_lt_)|Determines whether one `duration` or `time_point` object is less than another `duration` or `time_point` object.|  \n|[operator&lt;=](../standard-library/chrono-operators.md#operator_lt__eq)|Determines whether one `duration` or `time_point` object is less than or equal to another `duration` or `time_point` object.|  \n|[operator==](../standard-library/chrono-operators.md#operator_eq_eq)|Determines whether two `duration` objects represent time intervals that have the same length, or whether two `time_point` objects represent the same point in time.|  \n|[operator&gt;](../standard-library/chrono-operators.md#operator_gt_)|Determines whether one `duration` or `time_point` object is greater than another `duration` or `time_point` object.|  \n|[operator&gt;=](../standard-library/chrono-operators.md#operator_gt__eq)|Determines whether one `duration` or `time_point` object is greater than or equal to another `duration` or `time_point` object.|  \n  \n### Predefined Duration Types  \n For more information about ratio types that are used in the following typedefs, see [\\<ratio>](../standard-library/ratio.md).  \n  \n|Typedef|Description|  \n|-------------|-----------------|  \n|`typedef duration<long long, nano> nanoseconds;`|Synonym for a `duration` type that has a tick period of one nanosecond.|  \n|`typedef duration<long long, micro> microseconds;`|Synonym for a `duration` type that has a tick period of one microsecond.|  \n|`typedef duration<long long, milli> milliseconds;`|Synonym for a `duration` type that has a tick period of one millisecond.|  \n|`typedef duration<long long> seconds;`|Synonym for a `duration` type that has a tick period of one second.|  \n|`typedef duration<int, ratio<60> > minutes;`|Synonym for a `duration` type that has a tick period of one minute.|  \n|`typedef duration<int, ratio<3600> > hours;`|Synonym for a `duration` type that has a tick period of one hour.|  \n  \n### Literals  \n **(C++11)**The \\<chrono> header defines the following [user-defined literals](../cpp/user-defined-literals-cpp.md) that you can use for greater convenience, type-safety and maintainability of your code. These literals are defined in the `literals::chrono_literals` inline namespace and are in scope when std::chrono is in scope.  \n  \n|Literal|Description|  \n|-------------|-----------------|  \n|chrono::hours operator \"\" h(unsigned long long Val)|Specifies hours as an integral value.|  \n|chrono::duration<double, ratio\\<3600> > operator \"\" h(long double Val)|Specifies hours as a floating-point value.|  \n|chrono::minutes (operator \"\" min)(unsigned long long Val)|Specifies minutes as an integral value.|  \n|chrono::duration<double, ratio\\<60> > (operator \"\" min)( long double Val)|Specifies minutes as a floating-point value.|  \n|chrono::seconds operator \"\" s(unsigned long long Val)|Specifies minutes as an integral value.|  \n|chrono::duration\\<double> operator \"\" s(long double Val)|Specifies seconds as a floating-point value.|  \n|chrono::milliseconds operator \"\" ms(unsigned long long Val)|Specifies milliseconds as an integral value.|  \n|chrono::duration\\<double, milli> operator \"\" ms(long double Val)|Specifies milliseconds as a floating-point value.|  \n|chrono::microseconds operator \"\" us(unsigned long long Val)|Specifies microseconds as an integral value.|  \n|chrono::duration\\<double, micro> operator \"\" us(long double Val)|Specifies microseconds as a floating-point value.|  \n|chrono::nanoseconds operator \"\" ns(unsigned long long Val)|Specifies nanoseconds as an integral value.|  \n|chrono::duration\\<double, nano> operator \"\" ns(long double Val)|Specifies nanoseconds as a floating-point value.|  \n|||  \n  \nThe following examples show how to use the chrono literals.  \n  \n```  \nconstexpr auto day = 24h;  \nconstexpr auto week = 24h* 7;  \nconstexpr auto my_duration_unit = 108ms;  \n```  \n## Remarks  \n  \n## See Also  \n [Header Files Reference](../standard-library/cpp-standard-library-header-files.md)\n\n\n\n"}