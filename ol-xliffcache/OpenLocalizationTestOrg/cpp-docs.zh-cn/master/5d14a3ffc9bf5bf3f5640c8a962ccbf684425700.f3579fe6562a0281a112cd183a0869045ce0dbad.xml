{"nodes":[{"pos":[12,47],"content":"CHeapPtrBase Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CHeapPtrBase Class | Microsoft Docs","pos":[0,35]}]},{"content":"CHeapPtrBase Class","pos":[657,675]},{"content":"This class forms the basis for several smart heap pointer classes.","pos":[676,742]},{"pos":[750,860],"content":"[!IMPORTANT]\n This class and its members cannot be used in applications that execute in the Windows Runtime.","leadings":["","> "],"nodes":[{"content":"This class and its members cannot be used in applications that execute in the Windows Runtime.","pos":[14,108]}]},{"content":"Syntax","pos":[869,875]},{"content":"Parameters","pos":[971,981]},{"content":"The object type to be stored on the heap.","pos":[992,1033]},{"content":"The memory allocation class to use.","pos":[1055,1090]},{"content":"By default CRT routines are used to allocate and free memory.","pos":[1091,1152]},{"content":"Members","pos":[1161,1168]},{"content":"Public Constructors","pos":[1178,1197]},{"content":"Name","pos":[1204,1208]},{"content":"Description","pos":[1209,1220]},{"content":"CHeapPtrBase::~CHeapPtrBase","pos":[1259,1286]},{"content":"The destructor.","pos":[1322,1337]},{"content":"Public Methods","pos":[1348,1362]},{"content":"Name","pos":[1369,1373]},{"content":"Description","pos":[1374,1385]},{"content":"CHeapPtrBase::AllocateBytes","pos":[1424,1451]},{"content":"Call this method to allocate memory.","pos":[1483,1519]},{"content":"CHeapPtrBase::Attach","pos":[1525,1545]},{"content":"Call this method to take ownership of an existing pointer.","pos":[1570,1628]},{"content":"CHeapPtrBase::Detach","pos":[1634,1654]},{"content":"Call this method to release ownership of a pointer.","pos":[1679,1730]},{"content":"CHeapPtrBase::Free","pos":[1736,1754]},{"pos":[1777,1845],"content":"Call this method to delete an object pointed to by a <ph id=\"ph1\">`CHeapPtrBase`</ph>.","source":"Call this method to delete an object pointed to by a `CHeapPtrBase`."},{"content":"CHeapPtrBase::ReallocateBytes","pos":[1851,1880]},{"content":"Call this method to reallocate memory.","pos":[1914,1952]},{"content":"Public Operators","pos":[1963,1979]},{"content":"Name","pos":[1986,1990]},{"content":"Description","pos":[1991,2002]},{"content":"CHeapPtrBase::operator T*","pos":[2041,2066]},{"content":"The cast operator.","pos":[2100,2118]},{"content":"CHeapPtrBase::operator &amp;","pos":[2124,2148],"source":"CHeapPtrBase::operator &"},{"content":"The &amp; operator.","pos":[2179,2194],"source":"The & operator."},{"content":"CHeapPtrBase::operator -&gt;","pos":[2200,2225],"source":"CHeapPtrBase::operator ->"},{"content":"The pointer-to-member operator.","pos":[2256,2287]},{"content":"Public Data Members","pos":[2299,2318]},{"content":"Name","pos":[2325,2329]},{"content":"Description","pos":[2330,2341]},{"content":"CHeapPtrBase::m_pData","pos":[2380,2401]},{"content":"The pointer data member variable.","pos":[2427,2460]},{"content":"Remarks","pos":[2470,2477]},{"content":"This class forms the basis for several smart heap pointer classes.","pos":[2481,2547]},{"content":"The derived classes, for example, <bpt id=\"p1\">[</bpt>CHeapPtr<ept id=\"p1\">](../../atl/reference/cheapptr-class.md)</ept> and <bpt id=\"p2\">[</bpt>CComHeapPtr<ept id=\"p2\">](../../atl/reference/ccomheapptr-class.md)</ept>, add their own constructors and operators.","pos":[2548,2734],"source":" The derived classes, for example, [CHeapPtr](../../atl/reference/cheapptr-class.md) and [CComHeapPtr](../../atl/reference/ccomheapptr-class.md), add their own constructors and operators."},{"content":"See these classes for implementation examples.","pos":[2735,2781]},{"content":"Requirements","pos":[2790,2802]},{"pos":[2806,2827],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlcore.h","source":"**Header:** atlcore.h"},{"pos":[2881,2908],"content":"CHeapPtrBase::AllocateBytes"},{"content":"Call this method to allocate memory.","pos":[2912,2948]},{"content":"Parameters","pos":[3014,3024]},{"content":"The number of bytes of memory to allocate.","pos":[3040,3082]},{"content":"Return Value","pos":[3092,3104]},{"content":"Returns true if the memory is successfully allocated, false otherwise.","pos":[3108,3178]},{"content":"Remarks","pos":[3188,3195]},{"pos":[3199,3391],"content":"In debug builds, an assertion failure will occur if the <bpt id=\"p1\">[</bpt>CHeapPtrBase::m_pData<ept id=\"p1\">](#cheapptrbase__m_pdata)</ept> member variable currently points to an existing value; that is, it is not equal to NULL.","source":"In debug builds, an assertion failure will occur if the [CHeapPtrBase::m_pData](#cheapptrbase__m_pdata) member variable currently points to an existing value; that is, it is not equal to NULL."},{"pos":[3438,3458],"content":"CHeapPtrBase::Attach"},{"content":"Call this method to take ownership of an existing pointer.","pos":[3462,3520]},{"content":"Parameters","pos":[3574,3584]},{"content":"The <ph id=\"ph1\">`CHeapPtrBase`</ph> object will take ownership of this pointer.","pos":[3599,3661],"source":" The `CHeapPtrBase` object will take ownership of this pointer."},{"content":"Remarks","pos":[3671,3678]},{"pos":[3682,3831],"content":"When a <ph id=\"ph1\">`CHeapPtrBase`</ph> object takes ownership of a pointer, it will automatically delete the pointer and any allocated data when it goes out of scope.","source":"When a `CHeapPtrBase` object takes ownership of a pointer, it will automatically delete the pointer and any allocated data when it goes out of scope."},{"pos":[3838,4030],"content":"In debug builds, an assertion failure will occur if the <bpt id=\"p1\">[</bpt>CHeapPtrBase::m_pData<ept id=\"p1\">](#cheapptrbase__m_pdata)</ept> member variable currently points to an existing value; that is, it is not equal to NULL.","source":"In debug builds, an assertion failure will occur if the [CHeapPtrBase::m_pData](#cheapptrbase__m_pdata) member variable currently points to an existing value; that is, it is not equal to NULL."},{"pos":[4088,4115],"content":"CHeapPtrBase::~CHeapPtrBase"},{"content":"The destructor.","pos":[4119,4134]},{"content":"Remarks","pos":[4182,4189]},{"content":"Frees all allocated resources.","pos":[4193,4223]},{"pos":[4270,4290],"content":"CHeapPtrBase::Detach"},{"content":"Call this method to release ownership of a pointer.","pos":[4294,4345]},{"content":"Return Value","pos":[4389,4401]},{"content":"Returns a copy of the pointer.","pos":[4405,4435]},{"content":"Remarks","pos":[4445,4452]},{"pos":[4456,4605],"content":"Releases ownership of a pointer, sets the <bpt id=\"p1\">[</bpt>CHeapPtrBase::m_pData<ept id=\"p1\">](#cheapptrbase__m_pdata)</ept> member variable to NULL, and returns a copy of the pointer.","source":"Releases ownership of a pointer, sets the [CHeapPtrBase::m_pData](#cheapptrbase__m_pdata) member variable to NULL, and returns a copy of the pointer."},{"pos":[4650,4668],"content":"CHeapPtrBase::Free"},{"pos":[4672,4740],"content":"Call this method to delete an object pointed to by a <ph id=\"ph1\">`CHeapPtrBase`</ph>.","source":"Call this method to delete an object pointed to by a `CHeapPtrBase`."},{"content":"Remarks","pos":[4784,4791]},{"pos":[4795,4936],"content":"The object pointed to by the <ph id=\"ph1\">`CHeapPtrBase`</ph> is freed, and the <bpt id=\"p1\">[</bpt>CHeapPtrBase::m_pData<ept id=\"p1\">](#cheapptrbase__m_pdata)</ept> member variable is set to NULL.","source":"The object pointed to by the `CHeapPtrBase` is freed, and the [CHeapPtrBase::m_pData](#cheapptrbase__m_pdata) member variable is set to NULL."},{"pos":[4984,5005],"content":"CHeapPtrBase::m_pData"},{"content":"The pointer data member variable.","pos":[5009,5042]},{"content":"Remarks","pos":[5077,5084]},{"content":"This member variable holds the pointer information.","pos":[5088,5139]},{"pos":[5192,5214],"content":"CHeapPtrBase::operator"},{"content":"The &amp; operator.","pos":[5224,5239],"source":"The & operator."},{"content":"Return Value","pos":[5287,5299]},{"pos":[5303,5377],"content":"Returns the address of the object pointed to by the <ph id=\"ph1\">`CHeapPtrBase`</ph> object.","source":"Returns the address of the object pointed to by the `CHeapPtrBase` object."},{"pos":[5431,5455],"content":"CHeapPtrBase::operator -"},{"content":"The pointer-to-member operator.","pos":[5464,5495]},{"content":"Return Value","pos":[5549,5561]},{"pos":[5565,5654],"content":"Returns the value of the <bpt id=\"p1\">[</bpt>CHeapPtrBase::m_pData<ept id=\"p1\">](#cheapptrbase__m_pdata)</ept> member variable.","source":"Returns the value of the [CHeapPtrBase::m_pData](#cheapptrbase__m_pdata) member variable."},{"content":"Remarks","pos":[5664,5671]},{"content":"Use this operator to call a method in a class pointed to by the <ph id=\"ph1\">`CHeapPtrBase`</ph> object.","pos":[5675,5761],"source":"Use this operator to call a method in a class pointed to by the `CHeapPtrBase` object."},{"content":"In debug builds, an assertion failure will occur if the <ph id=\"ph1\">`CHeapPtrBase`</ph> points to NULL.","pos":[5762,5848],"source":" In debug builds, an assertion failure will occur if the `CHeapPtrBase` points to NULL."},{"pos":[5904,5929],"content":"CHeapPtrBase::operator T*"},{"content":"The cast operator.","pos":[5933,5951]},{"content":"```operator T*() const throw();","pos":[5957,5988]},{"content":"bool ReallocateBytes(size_t nBytes) throw();","pos":[6206,6250]}],"content":"---\ntitle: \"CHeapPtrBase Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL.CHeapPtrBase\"\n  - \"ATL::CHeapPtrBase\"\n  - \"CHeapPtrBase\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CHeapPtrBase class\"\nms.assetid: 501ac1b2-fb34-4c72-b7e6-a4f1fc8fda21\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CHeapPtrBase Class\nThis class forms the basis for several smart heap pointer classes.  \n  \n> [!IMPORTANT]\n>  This class and its members cannot be used in applications that execute in the Windows Runtime.  \n  \n## Syntax  \n  \n```\ntemplate <class T,  class Allocator = CCRTAllocator> class CHeapPtrBase\n```  \n  \n#### Parameters  \n `T`  \n The object type to be stored on the heap.  \n  \n `Allocator`  \n The memory allocation class to use. By default CRT routines are used to allocate and free memory.  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CHeapPtrBase::~CHeapPtrBase](#cheapptrbase___dtorcheapptrbase)|The destructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CHeapPtrBase::AllocateBytes](#cheapptrbase__allocatebytes)|Call this method to allocate memory.|  \n|[CHeapPtrBase::Attach](#cheapptrbase__attach)|Call this method to take ownership of an existing pointer.|  \n|[CHeapPtrBase::Detach](#cheapptrbase__detach)|Call this method to release ownership of a pointer.|  \n|[CHeapPtrBase::Free](#cheapptrbase__free)|Call this method to delete an object pointed to by a `CHeapPtrBase`.|  \n|[CHeapPtrBase::ReallocateBytes](#cheapptrbase__reallocatebytes)|Call this method to reallocate memory.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CHeapPtrBase::operator T*](#cheapptrbase__operator_t_star)|The cast operator.|  \n|[CHeapPtrBase::operator &](#cheapptrbase__operator_amp)|The & operator.|  \n|[CHeapPtrBase::operator ->](#cheapptrbase__operator_ptr)|The pointer-to-member operator.|  \n\n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CHeapPtrBase::m_pData](#cheapptrbase__m_pdata)|The pointer data member variable.|  \n  \n## Remarks  \n This class forms the basis for several smart heap pointer classes. The derived classes, for example, [CHeapPtr](../../atl/reference/cheapptr-class.md) and [CComHeapPtr](../../atl/reference/ccomheapptr-class.md), add their own constructors and operators. See these classes for implementation examples.  \n  \n## Requirements  \n **Header:** atlcore.h  \n  \n##  <a name=\"cheapptrbase__allocatebytes\"></a>  CHeapPtrBase::AllocateBytes  \n Call this method to allocate memory.  \n  \n```\nbool AllocateBytes(size_t nBytes) throw();\n```  \n  \n### Parameters  \n `nBytes`  \n The number of bytes of memory to allocate.  \n  \n### Return Value  \n Returns true if the memory is successfully allocated, false otherwise.  \n  \n### Remarks  \n In debug builds, an assertion failure will occur if the [CHeapPtrBase::m_pData](#cheapptrbase__m_pdata) member variable currently points to an existing value; that is, it is not equal to NULL.  \n  \n##  <a name=\"cheapptrbase__attach\"></a>  CHeapPtrBase::Attach  \n Call this method to take ownership of an existing pointer.  \n  \n```\nvoid Attach(T* pData) throw();\n```  \n  \n### Parameters  \n `pData`  \n The `CHeapPtrBase` object will take ownership of this pointer.  \n  \n### Remarks  \n When a `CHeapPtrBase` object takes ownership of a pointer, it will automatically delete the pointer and any allocated data when it goes out of scope.  \n  \n In debug builds, an assertion failure will occur if the [CHeapPtrBase::m_pData](#cheapptrbase__m_pdata) member variable currently points to an existing value; that is, it is not equal to NULL.  \n  \n##  <a name=\"cheapptrbase___dtorcheapptrbase\"></a>  CHeapPtrBase::~CHeapPtrBase  \n The destructor.  \n  \n```\n~CHeapPtrBase() throw();\n```  \n  \n### Remarks  \n Frees all allocated resources.  \n  \n##  <a name=\"cheapptrbase__detach\"></a>  CHeapPtrBase::Detach  \n Call this method to release ownership of a pointer.  \n  \n```\nT* Detach() throw();\n```  \n  \n### Return Value  \n Returns a copy of the pointer.  \n  \n### Remarks  \n Releases ownership of a pointer, sets the [CHeapPtrBase::m_pData](#cheapptrbase__m_pdata) member variable to NULL, and returns a copy of the pointer.  \n  \n##  <a name=\"cheapptrbase__free\"></a>  CHeapPtrBase::Free  \n Call this method to delete an object pointed to by a `CHeapPtrBase`.  \n  \n```\nvoid Free() throw();\n```  \n  \n### Remarks  \n The object pointed to by the `CHeapPtrBase` is freed, and the [CHeapPtrBase::m_pData](#cheapptrbase__m_pdata) member variable is set to NULL.  \n  \n##  <a name=\"cheapptrbase__m_pdata\"></a>  CHeapPtrBase::m_pData  \n The pointer data member variable.  \n  \n```\nT* m_pData;\n```  \n  \n### Remarks  \n This member variable holds the pointer information.  \n  \n##  <a name=\"cheapptrbase__operator_amp\"></a>  CHeapPtrBase::operator &amp;  \n The & operator.  \n  \n```\nT** operator&() throw();\n```  \n  \n### Return Value  \n Returns the address of the object pointed to by the `CHeapPtrBase` object.  \n  \n\n##  <a name=\"cheapptrbase__operator_ptr\"></a>  CHeapPtrBase::operator -&gt;  \n\n The pointer-to-member operator.  \n  \n```\nT* operator->() const throw();\n```  \n  \n### Return Value  \n Returns the value of the [CHeapPtrBase::m_pData](#cheapptrbase__m_pdata) member variable.  \n  \n### Remarks  \n Use this operator to call a method in a class pointed to by the `CHeapPtrBase` object. In debug builds, an assertion failure will occur if the `CHeapPtrBase` points to NULL.  \n  \n##  <a name=\"cheapptrbase__operator_t_star\"></a>  CHeapPtrBase::operator T*  \n The cast operator.  \n  \n```operator T*() const throw();\n```  \n  \n### Remarks  \n Returns [CHeapPtrBase::m_pData](#cheapptrbase__m_pdata).  \n  \n##  <a name=\"cheapptrbase__reallocatebytes\"></a>  CHeapPtrBase::ReallocateBytes  \n Call this method to reallocate memory.  \n  \n```\nbool ReallocateBytes(size_t nBytes) throw();\n```  \n  \n### Parameters  \n `nBytes`  \n The new amount of memory to allocate, in bytes.  \n  \n### Return Value  \n Returns true if the memory is successfully allocated, false otherwise.  \n  \n## See Also  \n [CHeapPtr Class](../../atl/reference/cheapptr-class.md)   \n [CComHeapPtr Class](../../atl/reference/ccomheapptr-class.md)   \n [Class Overview](../../atl/atl-class-overview.md)\n"}