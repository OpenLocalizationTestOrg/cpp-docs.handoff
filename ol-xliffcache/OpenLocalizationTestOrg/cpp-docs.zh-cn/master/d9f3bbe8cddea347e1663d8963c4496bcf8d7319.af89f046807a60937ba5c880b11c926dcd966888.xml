{"nodes":[{"pos":[12,60],"content":"&lt;filesystem&gt; enumerations | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"filesystem<ph id=\"ph1\">&amp;gt;</ph> enumerations | Microsoft Docs","pos":[4,48],"source":"filesystem&gt; enumerations | Microsoft Docs"}]},{"content":"filesystem<ph id=\"ph1\">&amp;gt;</ph> enumerations","pos":[1475,1502],"source":"filesystem&gt; enumerations"},{"content":"This topic documents the enums in the filesystem header.","pos":[1503,1559]},{"content":"Requirements","pos":[1564,1576]},{"pos":[1580,1618],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>experimental/filesystem&gt;","source":"**Header:** \\<experimental/filesystem>"},{"pos":[1625,1669],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std::experimental::filesystem","source":"**Namespace:** std::experimental::filesystem"},{"pos":[1718,1730],"content":"copy_options"},{"pos":[1731,1975],"content":"An enumeration of bitmask values that is used with <bpt id=\"p1\">[</bpt>copy<ept id=\"p1\">](http://msdn.microsoft.com/en-us/4af7a9b0-8861-45ed-b84e-0307f0669d60)</ept> and <bpt id=\"p2\">[</bpt>copy_file<ept id=\"p2\">](http://msdn.microsoft.com/en-us/4af7a9b0-8861-45ed-b84e-0307f0669d60)</ept> functions to specify behavior.","source":"An enumeration of bitmask values that is used with [copy](http://msdn.microsoft.com/en-us/4af7a9b0-8861-45ed-b84e-0307f0669d60) and [copy_file](http://msdn.microsoft.com/en-us/4af7a9b0-8861-45ed-b84e-0307f0669d60) functions to specify behavior."},{"content":"Syntax","pos":[1985,1991]},{"content":"Values","pos":[2302,2308]},{"content":"Description","pos":[2322,2333]},{"content":"Perform the default behavior for the operation.","pos":[2380,2427]},{"content":"Do not copy if the file already exists, do not report an error.","pos":[2448,2511]},{"content":"Overwrite the file if it already exists.","pos":[2537,2577]},{"content":"Overwrite the file if it already exists and is older than the replacement.","pos":[2600,2674]},{"content":"Recursively copy subdirectories and their contents.","pos":[2691,2742]},{"content":"Copy symbolic links as symbolic links, instead of copying the files they point to.","pos":[2763,2845]},{"content":"Ignore symbolic links.","pos":[2866,2888]},{"content":"Only iterate over directories, ignore files.","pos":[2912,2956]},{"content":"Make symbolic links instead of copying files.","pos":[2979,3024]},{"content":"An absolute path must be used as the source path unless the destination is the current directory.","pos":[3025,3122]},{"content":"Make hard links instead of copying files.","pos":[3147,3188]},{"pos":[3245,3262],"content":"directory_options"},{"content":"Specifies whether to follow symbolic links to directories or to ignore them.","pos":[3263,3339]},{"content":"Syntax","pos":[3349,3355]},{"content":"Values","pos":[3462,3468]},{"content":"Name","pos":[3475,3479]},{"content":"Description","pos":[3480,3491]},{"content":"Default behavior: ignore symbolic links to directories.","pos":[3536,3591]},{"content":"Permission denied is an error.","pos":[3592,3622]},{"content":"Treat symbolic links to directories as actual directories.","pos":[3654,3712]},{"pos":[3761,3770],"content":"file_type"},{"content":"An enumeration for file types.","pos":[3771,3801]},{"content":"The supported values are regular, and directory, not_found and unknown.","pos":[3802,3873]},{"content":"Syntax","pos":[3883,3889]},{"content":"Values","pos":[4081,4087]},{"content":"Name","pos":[4094,4098]},{"content":"Value","pos":[4099,4104]},{"content":"Description","pos":[4105,4116]},{"content":"-1","pos":[4178,4180]},{"content":"Represents a file that does not exist.","pos":[4181,4219]},{"content":"0","pos":[4231,4232]},{"content":"Represents a file that has no type attribute.","pos":[4233,4278]},{"content":"(Not supported.)","pos":[4279,4295]},{"content":"1","pos":[4310,4311]},{"content":"Represents a conventional disk file.","pos":[4312,4348]},{"content":"2","pos":[4365,4366]},{"content":"Represents a directory.","pos":[4367,4390]},{"content":"3","pos":[4405,4406]},{"content":"Represents a symbolic link.","pos":[4407,4434]},{"content":"(Not supported.)","pos":[4435,4451]},{"content":"4","pos":[4464,4465]},{"content":"Represents a block-special file on UNIX-based systems.","pos":[4466,4520]},{"content":"(Not supported.)","pos":[4521,4537]},{"content":"5","pos":[4554,4555]},{"content":"Represents a character-special file on UNIX-based systems.","pos":[4556,4614]},{"content":"(Not supported.)","pos":[4615,4631]},{"content":"6","pos":[4643,4644]},{"content":"Represents a FIFO file on UNIX-based systems.","pos":[4645,4690]},{"content":"(Not supported.)","pos":[4691,4707]},{"content":"7","pos":[4721,4722]},{"content":"Represents a socket on UNIX based systems.","pos":[4723,4765]},{"content":"(Not supported.)","pos":[4766,4782]},{"content":"8","pos":[4797,4798]},{"content":"Represents a file whose status cannot be determined.","pos":[4799,4851]},{"pos":[4896,4901],"content":"perms"},{"content":"Flags for file permissions.","pos":[4902,4929]},{"content":"The supported values are essentially “readonly” and all.","pos":[4930,4986]},{"content":"For a readonly file, none of the *_write bits are set.","pos":[4987,5041]},{"content":"Otherwise the <ph id=\"ph1\">`all`</ph> bit (0x0777) is set.","pos":[5042,5082],"source":" Otherwise the `all` bit (0x0777) is set."},{"content":"Syntax","pos":[5092,5098]},{"content":"See Also","pos":[5827,5835]},{"content":"Header Files Reference","pos":[5840,5862]},{"content":"filesystem&gt;","pos":[5929,5940],"source":"filesystem>"}],"content":"---\ntitle: \"&lt;filesystem&gt; enumerations | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"copy_options\"\n  - \"filesystem::copy_options\"\n  - \"std::filesystem::copy_options\"\n  - \"filesystem/std::filesystem::copy_options\"\n  - \"experimental::filesystem::copy_options\"\n  - \"std::experimental::filesystem::copy_options\"\n  - \"filesystem/std::experimental::filesystem::copy_options\"\n  - \"directory_options\"\n  - \"filesystem::directory_options\"\n  - \"std::filesystem::directory_options\"\n  - \"filesystem/std::filesystem::directory_options\"\n  - \"experimental::filesystem::directory_options\"\n  - \"std::experimental::filesystem::directory_options\"\n  - \"filesystem/std::experimental::filesystem::directory_options\"\n  - \"file_type\"\n  - \"filesystem::file_type\"\n  - \"std::filesystem::file_type\"\n  - \"filesystem/std::filesystem::file_type\"\n  - \"experimental::filesystem::file_type\"\n  - \"std::experimental::filesystem::file_type\"\n  - \"filesystem/std::experimental::filesystem::file_type\"\n  - \"perms\"\n  - \"filesystem::perms\"\n  - \"std::filesystem::perms\"\n  - \"filesystem/std::filesystem::perms\"\n  - \"experimental::filesystem::perms\"\n  - \"std::experimental::filesystem::perms\"\n  - \"filesystem/std::experimental::filesystem::perms\"\nms.assetid: 0096c046-d101-464c-8259-b878a48280b0\ncaps.latest.revision: 3\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\n---\n# &lt;filesystem&gt; enumerations\nThis topic documents the enums in the filesystem header.\n\n## Requirements  \n **Header:** \\<experimental/filesystem>  \n  \n **Namespace:** std::experimental::filesystem  \n\n##  <a name=\"filesystem__copy_options\"></a>  copy_options\nAn enumeration of bitmask values that is used with [copy](http://msdn.microsoft.com/en-us/4af7a9b0-8861-45ed-b84e-0307f0669d60) and [copy_file](http://msdn.microsoft.com/en-us/4af7a9b0-8861-45ed-b84e-0307f0669d60) functions to specify behavior.  \n  \n### Syntax  \n```cpp  \nenum class copy_options {      \n   none = 0,  \n   skip_existing = 1,  \n   overwrite_existing = 2,  \n   update_existing = 4,  \n   recursive = 8,  \n   copy_symlinks = 16,  \n   skip_symlinks = 32,  \n   directories_only = 64,  \n   create_symlinks = 128,  \n   create_hard_links = 256  \n};  \n```  \n  \n### Values  \n  \n|`Name`|Description|  \n|------------|-----------------|  \n|`none`|Perform the default behavior for the operation.|  \n|`skip_existing`|Do not copy if the file already exists, do not report an error.|  \n|`overwrite_existing`|Overwrite the file if it already exists.|  \n|`update_existing`|Overwrite the file if it already exists and is older than the replacement.|  \n|`recursive`|Recursively copy subdirectories and their contents.|  \n|`copy_symlinks`|Copy symbolic links as symbolic links, instead of copying the files they point to.|  \n|`skip_symlinks`|Ignore symbolic links.|  \n|`directories_only`|Only iterate over directories, ignore files.|  \n|`create_symlinks`|Make symbolic links instead of copying files. An absolute path must be used as the source path unless the destination is the current directory.|  \n|`create_hard_links`|Make hard links instead of copying files.|  \n  \n\n##  <a name=\"filesystem__directory_options\"></a> directory_options\nSpecifies whether to follow symbolic links to directories or to ignore them.  \n  \n### Syntax  \n```cpp  \nenum class directory_options {  \n   none = 0,  \n   follow_directory_symlink \n};  \n```  \n  \n### Values  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`none`|Default behavior: ignore symbolic links to directories. Permission denied is an error.|  \n|`follow_directory_symlink`|Treat symbolic links to directories as actual directories.|  \n  \n##  <a name=\"filesystem__file_type\"></a>  file_type\nAn enumeration for file types. The supported values are regular, and directory, not_found and unknown.  \n  \n### Syntax  \n```cpp  \nenum class file_type {\n    not_found = -1, \n    none, \n    regular, \n    directory, \n    symlink,\n    block, \n    character, \n    fifo, \n    socket, \n    unknown\n};  \n```  \n  \n### Values  \n  \n|Name|Value|Description|  \n|----------|-----------|-----------------|  \n|`not_found`|-1|Represents a file that does not exist.|  \n|`none`|0|Represents a file that has no type attribute. (Not supported.)|  \n|`regular`|1|Represents a conventional disk file.|  \n|`directory`|2|Represents a directory.|  \n|`symlink`|3|Represents a symbolic link. (Not supported.)|  \n|`block`|4|Represents a block-special file on UNIX-based systems. (Not supported.)|  \n|`character`|5|Represents a character-special file on UNIX-based systems. (Not supported.)|  \n|`fifo`|6|Represents a FIFO file on UNIX-based systems. (Not supported.)|  \n|`socket`|7|Represents a socket on UNIX based systems. (Not supported.)|  \n|`unknown`|8|Represents a file whose status cannot be determined.|  \n  \n##  <a name=\"filesystem__perms\"></a>  perms\nFlags for file permissions. The supported values are essentially “readonly” and all. For a readonly file, none of the *_write bits are set. Otherwise the `all` bit (0x0777) is set.  \n  \n### Syntax  \n```cpp  \nenum class perms {// names for permissions\n   none = 0,\n   owner_read = 0400,  // S_IRUSR\n   owner_write = 0200, // S_IWUSR\n   owner_exec = 0100,  // S_IXUSR\n   owner_all = 0700,   // S_IRWXU\n   group_read = 040,   // S_IRGRP\n   group_write = 020,  // S_IWGRP\n   group_exec = 010,   // S_IXGRP\n   group_all = 070,    // S_IRWXG\n   others_read = 04,   // S_IROTH\n   others_write = 02,  // S_IWOTH\n   others_exec = 01,   // S_IXOTH\n   others_all = 07,    // S_IRWXO\n   all = 0777,\n   set_uid = 04000,    // S_ISUID\n   set_gid = 02000,    // S_ISGID\n   sticky_bit = 01000, // S_ISVTX\n   mask = 07777,\n   unknown = 0xFFFF,\n   add_perms = 0x10000,\n   remove_perms = 0x20000,\n   resolve_symlinks = 0x40000\n};  \n```  \n  \n## See Also  \n [Header Files Reference](../standard-library/cpp-standard-library-header-files.md)   \n [\\<filesystem>](../standard-library/filesystem.md)\n\n"}