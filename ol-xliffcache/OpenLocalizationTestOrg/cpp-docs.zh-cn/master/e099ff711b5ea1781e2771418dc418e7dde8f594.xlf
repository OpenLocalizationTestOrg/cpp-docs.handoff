<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e099ff711b5ea1781e2771418dc418e7dde8f594</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\ccmdtarget-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e15b7347822954181b4993bab1a0ff4582bffe00</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7a0eb8d47695abb432e7a62fb510162caf4ba625</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CCmdTarget Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CCmdTarget Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The base class for the Microsoft Foundation Class Library message-map architecture.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CCmdTarget::CCmdTarget</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CCmdTarget`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CCmdTarget::BeginWaitCursor</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Displays the cursor as an hourglass cursor.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CCmdTarget::DoOleVerb</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Causes an action specified by an OLE verb to be performed.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CCmdTarget::EnableAutomation</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Allows OLE automation for the <ph id="ph1">`CCmdTarget`</ph> object.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CCmdTarget::EnableConnections</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Enables event firing over connection points.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CCmdTarget::EnableTypeLib</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Enables an object's type library.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CCmdTarget::EndWaitCursor</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Returns to the previous cursor.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CCmdTarget::EnumOleVerbs</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Enumerates an object's OLE verbs.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CCmdTarget::FromIDispatch</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the <ph id="ph1">`CCmdTarget`</ph> object associated with the <ph id="ph2">`IDispatch`</ph> pointer.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CCmdTarget::GetDispatchIID</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Gets the primary dispatch interface ID.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CCmdTarget::GetIDispatch</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the <ph id="ph1">`IDispatch`</ph> object associated with the <ph id="ph2">`CCmdTarget`</ph> object.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CCmdTarget::GetTypeInfoCount</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Retrieves the number of type information interfaces that an object provides.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>CCmdTarget::GetTypeInfoOfGuid</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Retrieves the type description that corresponds to the specified GUID.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>CCmdTarget::GetTypeLib</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Gets a pointer to a type library.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>CCmdTarget::GetTypeLibCache</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Gets the type library cache.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>CCmdTarget::IsInvokeAllowed</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Enables automation method invocation.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>CCmdTarget::IsResultExpected</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Returns nonzero if an automation function should return a value.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>CCmdTarget::OnCmdMsg</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Routes and dispatches command messages.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>CCmdTarget::OnFinalRelease</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Cleans up after the last OLE reference is released.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>CCmdTarget::RestoreWaitCursor</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Restores the hourglass cursor.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A message map routes commands or messages to the member functions you write to handle them.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>(A command is a message from a menu item, command button, or accelerator key.)</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Key framework classes derived from <ph id="ph1">`CCmdTarget`</ph> include <bpt id="p1">[</bpt>CView<ept id="p1">](../../mfc/reference/cview-class.md)</ept>, <bpt id="p2">[</bpt>CWinApp<ept id="p2">](../../mfc/reference/cwinapp-class.md)</ept>, <bpt id="p3">[</bpt>CDocument<ept id="p3">](../../mfc/reference/cdocument-class.md)</ept>, <bpt id="p4">[</bpt>CWnd<ept id="p4">](../../mfc/reference/cwnd-class.md)</ept>, and <bpt id="p5">[</bpt>CFrameWnd<ept id="p5">](../../mfc/reference/cframewnd-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If you intend for a new class to handle messages, derive the class from one of these <ph id="ph1">`CCmdTarget`</ph>-derived classes.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You will rarely derive a class from <ph id="ph1">`CCmdTarget`</ph> directly.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For an overview of command targets and <ph id="ph1">`OnCmdMsg`</ph> routing, see <bpt id="p1">[</bpt>Command Targets<ept id="p1">](../../mfc/command-targets.md)</ept>, <bpt id="p2">[</bpt>Command Routing<ept id="p2">](../../mfc/command-routing.md)</ept>, and <bpt id="p3">[</bpt>Mapping Messages<ept id="p3">](../../mfc/mapping-messages.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>includes member functions that handle the display of an hourglass cursor.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Display the hourglass cursor when you expect a command to take a noticeable time interval to execute.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Dispatch maps, similar to message maps, are used to expose OLE automation <ph id="ph1">`IDispatch`</ph> functionality.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>By exposing this interface, other applications (such as Visual Basic) can call into your application.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxwin.h</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CCmdTarget::BeginWaitCursor</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Call this function to display the cursor as an hourglass when you expect a command to take a noticeable time interval to execute.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The framework calls this function to show the user that it is busy, such as when a <bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept> object loads or saves itself to a file.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The actions of <ph id="ph1">`BeginWaitCursor`</ph> are not always effective outside of a single message handler as other actions, such as <ph id="ph2">`OnSetCursor`</ph> handling, could change the cursor.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`EndWaitCursor`</ph> to restore the previous cursor.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#43</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>CCmdTarget::CCmdTarget</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CCmdTarget`</ph> object.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>CCmdTarget::DoOleVerb</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Causes an action specified by an OLE verb to be performed.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Numerical identifier of the verb.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Pointer to the <bpt id="p1">[</bpt>MSG<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms644958)</ept> structure describing the event (such as a double-click) that invoked the verb.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Handle of the document window containing the object.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Pointer to the <bpt id="p1">[</bpt>RECT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure containing the coordinates, in pixels, that define an object's bounding rectangle in <bpt id="p2">*</bpt>hwndParent<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>TRUE if successful, otherwise FALSE.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This member function is basically an implementation of <bpt id="p1">[</bpt>IOleObject::DoVerb<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms694508)</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The possible actions are enumerated by <bpt id="p1">[</bpt>CCmdTarget::EnumOleVerbs<ept id="p1">](#ccmdtarget__enumoleverbs)</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>CCmdTarget::EnableAutomation</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Call this function to enable OLE automation for an object.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This function is typically called from the constructor of your object and should only be called if a dispatch map has been declared for the class.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>For more information on automation see the articles <bpt id="p1">[</bpt>Automation Clients<ept id="p1">](../../mfc/automation-clients.md)</ept> and <bpt id="p2">[</bpt>Automation Servers<ept id="p2">](../../mfc/automation-servers.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>CCmdTarget::EnableConnections</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Enables event firing over connection points.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>To enable connection points, call this member function in the constructor of your derived class.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>CCmdTarget::EnableTypeLib</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Enables an object's type library.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Call this member function in the constructor of your <ph id="ph1">`CCmdTarget`</ph>-derived object if it provides type information.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>For more information, see Knowledge Base article Q185720, "HOWTO: Provide Type Information From an MFC Automation Server."</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Knowledge Base articles are available in the MSDN Library Visual Studio documentation or at <bpt id="p1">[</bpt>http://support.microsoft.com<ept id="p1">](http://support.microsoft.com/)</ept>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>CCmdTarget::EndWaitCursor</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Call this function after you have called the <ph id="ph1">`BeginWaitCursor`</ph> member function to return from the hourglass cursor to the previous cursor.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The framework also calls this member function after it has called the hourglass cursor.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#43</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>CCmdTarget::EnumOleVerbs</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Enumerates an object's OLE verbs.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>A pointer to a pointer to an <bpt id="p1">[</bpt>IEnumOLEVERB<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms695084)</ept> interface.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>TRUE if the object supports at least one OLE verb (in which case <ph id="ph1">\*</ph> <ph id="ph2">`ppenumOleVerb`</ph> points to an <bpt id="p1">**</bpt>IEnumOLEVERB<ept id="p1">**</ept> enumerator interface), otherwise FALSE.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>This member function is basically an implementation of <bpt id="p1">[</bpt>IOleObject::EnumVerbs<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms692781)</ept>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>CCmdTarget::FromIDispatch</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Call this function to map an <ph id="ph1">`IDispatch`</ph> pointer, received from automation member functions of a class, into the <ph id="ph2">`CCmdTarget`</ph> object that implements the interfaces of the <ph id="ph3">`IDispatch`</ph> object.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`IDispatch`</ph> object.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>A pointer to the <ph id="ph1">`CCmdTarget`</ph> object associated with <ph id="ph2">`lpDispatch`</ph>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>This function returns <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if the <ph id="ph1">`IDispatch`</ph> object is not recognized as a Microsoft Foundation Class <ph id="ph2">`IDispatch`</ph> object.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The result of this function is the inverse of a call to the member function <ph id="ph1">`GetIDispatch`</ph>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>CCmdTarget::GetDispatchIID</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Gets the primary dispatch interface ID.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>pIID</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>A pointer to an interface ID (a <bpt id="p1">[</bpt>GUID<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa373931)</ept>).</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>TRUE if successful, otherwise FALSE.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>If successful, <ph id="ph1">\*</ph> <bpt id="p1">*</bpt>pIID<ept id="p1">*</ept> is set to the primary dispatch interface ID.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Derived classes should override this member function (if not overridden, <ph id="ph1">`GetDispatchIID`</ph> returns FALSE).</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>COleControl<ept id="p1">](../../mfc/reference/colecontrol-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>For more information, see Knowledge Base article Q185720, "HOWTO: Provide Type Information From an MFC Automation Server."</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Knowledge Base articles are available in the MSDN Library Visual Studio documentation or at <bpt id="p1">[</bpt>http://support.microsoft.com<ept id="p1">](http://support.microsoft.com/)</ept>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>CCmdTarget::GetIDispatch</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the <ph id="ph1">`IDispatch`</ph> pointer from an automation method that either returns an <ph id="ph2">`IDispatch`</ph> pointer or takes an <ph id="ph3">`IDispatch`</ph> pointer by reference.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>bAddRef</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Specifies whether to increment the reference count for the object.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IDispatch`</ph> pointer associated with the object.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>For objects that call <ph id="ph1">`EnableAutomation`</ph> in their constructors, making them automation enabled, this function returns a pointer to the Foundation Class implementation of <ph id="ph2">`IDispatch`</ph> that is used by clients who communicate via the <ph id="ph3">`IDispatch`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Calling this function automatically adds a reference to the pointer, so it is not necessary to make a call to <bpt id="p1">[</bpt>IUnknown::AddRef<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms691379)</ept>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>CCmdTarget::GetTypeInfoCount</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Retrieves the number of type information interfaces that an object provides.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The number of type information interfaces.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>This member function basically implements <bpt id="p1">[</bpt>IDispatch::GetTypeInfoCount<ept id="p1">](http://msdn.microsoft.com/en-us/da876d53-cb8a-465c-a43e-c0eb272e2a12)</ept>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Derived classes should override this function to return the number of type information interfaces provided (either 0 or 1).</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>If not overridden, <bpt id="p1">**</bpt>GetTypeInfoCount<ept id="p1">**</ept> returns 0.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>To override, use the <bpt id="p1">[</bpt>IMPLEMENT_OLETYPELIB<ept id="p1">](../../mfc/reference/type-library-access.md#implement_oletypelib)</ept> macro, which also implements <ph id="ph1">`GetTypeLib`</ph> and <ph id="ph2">`GetTypeLibCache`</ph>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>CCmdTarget::GetTypeInfoOfGuid</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Retrieves the type description that corresponds to the specified GUID.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>A locale identifier ( <ph id="ph1">`LCID`</ph>).</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>GUID<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa373931)</ept> of the type description.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Pointer to a pointer to the <ph id="ph1">`ITypeInfo`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>An HRESULT indicating the success or failure of the call.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>If successful, * <ph id="ph1">`ppTypeInfo`</ph> points to the type information interface.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>CCmdTarget::GetTypeLib</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Gets a pointer to a type library.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>A locale identifier ( <ph id="ph1">`LCID`</ph>).</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>A pointer to a pointer to the <ph id="ph1">`ITypeLib`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>An HRESULT indicating the success or failure of the call.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>If successful, * <ph id="ph1">`ppTypeLib`</ph> points to the type library interface.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Derived classes should override this member function (if not overridden, <ph id="ph1">`GetTypeLib`</ph> returns TYPE_E_CANTLOADLIBRARY).</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>IMPLEMENT_OLETYPELIB<ept id="p1">](../../mfc/reference/type-library-access.md#implement_oletypelib)</ept> macro, which also implements <ph id="ph1">`GetTypeInfoCount`</ph> and <ph id="ph2">`GetTypeLibCache`</ph>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>CCmdTarget::GetTypeLibCache</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Gets the type library cache.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">**</bpt>CTypeLibCache<ept id="p1">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Derived classes should override this member function (if not overridden, <bpt id="p1">**</bpt>GetTypeLibCache<ept id="p1">**</ept> returns NULL).</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>IMPLEMENT_OLETYPELIB<ept id="p1">](../../mfc/reference/type-library-access.md#implement_oletypelib)</ept> macro, which also implements <ph id="ph1">`GetTypeInfoCount`</ph> and <ph id="ph2">`GetTypeLib`</ph>.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>CCmdTarget::IsInvokeAllowed</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>This function is called by MFC's implementation of <bpt id="p1">**</bpt>IDispatch::Invoke<ept id="p1">**</ept> to determine if a given automation method (identified by <ph id="ph1">`dispid`</ph>) can be invoked.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>A dispatch ID.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>TRUE if the method can be invoked, otherwise FALSE.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`IsInvokeAllowed`</ph> returns TRUE, <bpt id="p1">**</bpt>Invoke<ept id="p1">**</ept> proceeds to call the method; otherwise, <ph id="ph2">`Invoke`</ph> will fail, returning E_UNEXPECTED.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Derived classes can override this function to return appropriate values (if not overridden, <ph id="ph1">`IsInvokeAllowed`</ph> returns TRUE).</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>See in particular <bpt id="p1">[</bpt>COleControl::IsInvokeAllowed<ept id="p1">](../../mfc/reference/colecontrol-class.md#colecontrol__isinvokeallowed)</ept>.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>CCmdTarget::IsResultExpected</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`IsResultExpected`</ph> to ascertain whether a client expects a return value from its call to an automation function.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Nonzero if an automation function should return a value; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The OLE interface supplies information to MFC about whether the client is using or ignoring the result of a function call, and MFC in turn uses this information to determine the result of a call to <ph id="ph1">`IsResultExpected`</ph>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>If production of a return value is time- or resource-intensive, you can increase efficiency by calling this function before computing the return value.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>This function returns 0 only once so that you will get valid return values from other automation functions if you call them from the automation function that the client has called.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>returns a nonzero value if called when an automation function call is not in progress.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>CCmdTarget::OnCmdMsg</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Called by the framework to route and dispatch command messages and to handle the update of command user-interface objects.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Contains the command ID.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Identifies the command notification code.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">**</bpt>Remarks<ept id="p1">**</ept> for more information about values for <ph id="ph1">`nCode`</ph>.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Used according to the value of <ph id="ph1">`nCode`</ph>.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">**</bpt>Remarks<ept id="p1">**</ept> for more information about <ph id="ph1">`pExtra`</ph>.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>If not <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, <ph id="ph1">`OnCmdMsg`</ph> fills in the <bpt id="p2">**</bpt>pTarget<ept id="p2">**</ept> and <bpt id="p3">**</bpt>pmf<ept id="p3">**</ept> members of the <ph id="ph2">`pHandlerInfo`</ph> structure instead of dispatching the command.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Typically, this parameter should be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Nonzero if the message is handled; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>This is the main implementation routine of the framework command architecture.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>At run time, <ph id="ph1">`OnCmdMsg`</ph> dispatches a command to other objects or handles the command itself by calling the root class <ph id="ph2">`CCmdTarget::OnCmdMsg`</ph>, which does the actual message-map lookup.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>For a complete description of the default command routing, see <bpt id="p1">[</bpt>Message Handling and Mapping Topics<ept id="p1">](../../mfc/message-handling-and-mapping.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>On rare occasions, you may want to override this member function to extend the framework's standard command routing.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Refer to <bpt id="p1">[</bpt>Technical Note 21<ept id="p1">](../../mfc/tn021-command-and-message-routing.md)</ept> for advanced details of the command-routing architecture.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>If you override <ph id="ph1">`OnCmdMsg`</ph>, you must supply the appropriate value for <ph id="ph2">`nCode`</ph>, the command notification code, and <ph id="ph3">`pExtra`</ph>, which depends on the value of <ph id="ph4">`nCode`</ph>.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The following table lists their corresponding values:</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>value</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>value</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>CN_COMMAND</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>CCmdUI</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>CN_EVENT</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>AFX_EVENT*</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>CN_UPDATE_COMMAND_UI</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>CCmdUI*</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>CN_OLECOMMAND</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>COleCmdUI</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>CN_OLE_UNREGISTER</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>NULL</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#44</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#45</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>CCmdTarget::OnFinalRelease</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Called by the framework when the last OLE reference to or from the object is released.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Override this function to provide special handling for this situation.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>The default implementation deletes the object.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>CCmdTarget::RestoreWaitCursor</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Call this function to restore the appropriate hourglass cursor after the system cursor has changed (for example, after a message box has opened and then closed while in the middle of a lengthy operation).</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#43</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>MFC Sample ACDUAL</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>CObject Class</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>CCmdUI Class</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>CDocument Class</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>CDocTemplate Class</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>CWinApp Class</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>CWnd Class</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>CView Class</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>CFrameWnd Class</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>COleDispatchDriver Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>