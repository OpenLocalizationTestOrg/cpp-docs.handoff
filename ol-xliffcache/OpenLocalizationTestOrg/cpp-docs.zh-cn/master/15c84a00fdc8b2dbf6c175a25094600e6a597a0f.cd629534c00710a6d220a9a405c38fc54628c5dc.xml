{"nodes":[{"pos":[12,55],"content":"Defining Stored Procedures | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Defining Stored Procedures | Microsoft Docs","pos":[0,43]}]},{"content":"Defining Stored Procedures","pos":[687,713]},{"content":"Before calling a stored procedure, you must first define it, using the <bpt id=\"p1\">[</bpt>DEFINE_COMMAND<ept id=\"p1\">](../../data/oledb/define-command.md)</ept> macro.","pos":[714,844],"source":"Before calling a stored procedure, you must first define it, using the [DEFINE_COMMAND](../../data/oledb/define-command.md) macro."},{"content":"When you define the command, denote parameters with a question mark (?) as the parameter marker:","pos":[845,941]},{"content":"Note that the syntax (the use of braces and so on) used in the code examples in this topic is specific to SQL Server.","pos":[1048,1165]},{"content":"The syntax that you use in your stored procedures might vary according to the provider you use.","pos":[1166,1261]},{"content":"Next, in the parameter map, specify the parameters that you used in the command, listing the parameters in the order that they occur in the command:","pos":[1268,1416]},{"content":"The previous example defines a stored procedure as it goes.","pos":[1708,1767]},{"content":"Typically, for efficient reuse of code, a database contains a set of predefined stored procedures with names such as \"Sales by Year\" or \"dt_adduserobject.\"","pos":[1768,1923]},{"content":"You can view their definitions using SQL Server Enterprise Manager.","pos":[1924,1991]},{"content":"You call them as follows (the placement of the '?' parameters depends on the stored procedure's interface):","pos":[1992,2099]},{"content":"Next, declare the command class:","pos":[2270,2302]},{"pos":[2389,2451],"content":"Finally, call the stored procedure in <ph id=\"ph1\">`OpenRowset`</ph> as follows:","source":"Finally, call the stored procedure in `OpenRowset` as follows:"},{"pos":[2595,2726],"content":"Also note that you can define a stored procedure using the database attribute <bpt id=\"p1\">[</bpt>db_command<ept id=\"p1\">](../../windows/db-command.md)</ept> as follows:","source":"Also note that you can define a stored procedure using the database attribute [db_command](../../windows/db-command.md) as follows:"},{"content":"See Also","pos":[2800,2808]},{"content":"Using Stored Procedures","pos":[2813,2836]}],"content":"---\ntitle: \"Defining Stored Procedures | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"stored procedures, syntax\"\n  - \"OLE DB, stored procedures\"\n  - \"stored procedures, defining\"\n  - \"stored procedures, OLE DB\"\nms.assetid: 54949b81-3275-4dd9-96e4-3eda1ed755f2\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Defining Stored Procedures\nBefore calling a stored procedure, you must first define it, using the [DEFINE_COMMAND](../../data/oledb/define-command.md) macro. When you define the command, denote parameters with a question mark (?) as the parameter marker:  \n  \n```  \nDEFINE_COMMAND(CMySProcAccessor, _T(\"{INSERT {name, phone} into shippers  (?,?)}\")  \n```  \n  \n Note that the syntax (the use of braces and so on) used in the code examples in this topic is specific to SQL Server. The syntax that you use in your stored procedures might vary according to the provider you use.  \n  \n Next, in the parameter map, specify the parameters that you used in the command, listing the parameters in the order that they occur in the command:  \n  \n```  \nBEGIN_PARAM_MAP(CMySProcAccessor)  \n   SET_PARAM_TYPE(DBPARAMIO_INPUT)  \n   COLUMN_ENTRY(1, m_Name)   // name corresponds to first '?' param  \n   SET_PARAM_TYPE(DBPARAMIO_INPUT)  \n   COLUMN_ENTRY(2, m_Phone)  // phone corresponds to second '?' param  \nEND_PARAM_MAP()  \n```  \n  \n The previous example defines a stored procedure as it goes. Typically, for efficient reuse of code, a database contains a set of predefined stored procedures with names such as \"Sales by Year\" or \"dt_adduserobject.\" You can view their definitions using SQL Server Enterprise Manager. You call them as follows (the placement of the '?' parameters depends on the stored procedure's interface):  \n  \n```  \nDEFINE_COMMAND(CMySProcAccessor, _T(\"{CALL \\\"Sales by Year\\\" (?,?) }\")  \nDEFINE_COMMAND(CMySProcAccessor, _T(\"{CALL dbo.dt_adduserobject (?,?) }\")  \n```  \n  \n Next, declare the command class:  \n  \n```  \nclass CMySProc : public CCommand<CAccessor<CMySProcAccessor> >  \n```  \n  \n Finally, call the stored procedure in `OpenRowset` as follows:  \n  \n```  \nCSession m_session;  \nHRESULT OpenRowset()  \n{  \n   return CCommand<CAccessor<CMySProcAccessor> >::Open(m_session);  \n}  \n```  \n  \n Also note that you can define a stored procedure using the database attribute [db_command](../../windows/db-command.md) as follows:  \n  \n```  \ndb_command(\"{ ? = CALL dbo.dt_adduserobject }\")  \n```  \n  \n## See Also  \n [Using Stored Procedures](../../data/oledb/using-stored-procedures.md)"}