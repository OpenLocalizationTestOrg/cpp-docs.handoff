{"nodes":[{"pos":[12,51],"content":"ot_equal_to (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ot_equal_to (STL-CLR) | Microsoft Docs","pos":[0,38]}]},{"content":"not_equal_to (STL/CLR)","pos":[635,657]},{"content":"The template class describes a functor that, when called, returns true only if the first argument is not equal to the second.","pos":[658,783]},{"content":"You use it specify a function object in terms of its argument type.","pos":[784,851]},{"content":"Syntax","pos":[860,866]},{"content":"Parameters","pos":[1453,1463]},{"content":"Arg","pos":[1467,1470]},{"content":"The type of the arguments.","pos":[1474,1500]},{"content":"Member Functions","pos":[1509,1525]},{"content":"Type Definition","pos":[1532,1547]},{"content":"Description","pos":[1548,1559]},{"content":"delegate_type","pos":[1608,1621]},{"content":"The type of the generic delegate.","pos":[1622,1655]},{"content":"first_argument_type","pos":[1660,1679]},{"content":"The type of the functor first argument.","pos":[1680,1719]},{"content":"result_type","pos":[1724,1735]},{"content":"The type of the functor result.","pos":[1736,1767]},{"content":"second_argument_type","pos":[1772,1792]},{"content":"The type of the functor second argument.","pos":[1793,1833]},{"content":"Member","pos":[1841,1847]},{"content":"Description","pos":[1848,1859]},{"content":"not_equal_to","pos":[1899,1911]},{"content":"Constructs the functor.","pos":[1912,1935]},{"content":"Operator","pos":[1943,1951]},{"content":"Description","pos":[1952,1963]},{"content":"operator()","pos":[2005,2015]},{"content":"Computes the desired function.","pos":[2016,2046]},{"content":"operator delegate_type^","pos":[2051,2074]},{"content":"Casts the functor to a delegate.","pos":[2075,2107]},{"content":"Remarks","pos":[2117,2124]},{"content":"The template class describes a two-argument functor.","pos":[2128,2180]},{"content":"It defines the member operator <ph id=\"ph1\">`operator()`</ph> so that, when the object is called as a function, it returns true only if the first argument is not equal to the second.","pos":[2181,2345],"source":" It defines the member operator `operator()` so that, when the object is called as a function, it returns true only if the first argument is not equal to the second."},{"pos":[2352,2474],"content":"You can also pass the object as a function argument whose type is <ph id=\"ph1\">`delegate_type^`</ph> and it will be converted appropriately.","source":"You can also pass the object as a function argument whose type is `delegate_type^` and it will be converted appropriately."},{"content":"Example","pos":[2483,2490]},{"content":"Requirements","pos":[3519,3531]},{"pos":[3535,3567],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/functional&gt;","source":"**Header:** \\<cliext/functional>"},{"pos":[3574,3595],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[3604,3612]},{"content":"equal_to (STL/CLR)","pos":[3617,3635]}],"content":"---\ntitle: \"not_equal_to (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::not_equal_to\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"not_equal_to function [STL/CLR]\"\nms.assetid: 1b66e0ca-eace-4672-8da9-ed16f8608bca\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# not_equal_to (STL/CLR)\nThe template class describes a functor that, when called, returns true only if the first argument is not equal to the second. You use it specify a function object in terms of its argument type.  \n  \n## Syntax  \n  \n```  \ntemplate<typename Arg>  \n    ref class not_equal_to  \n    { // wrap operator()  \npublic:  \n    typedef Arg first_argument_type;  \n    typedef Arg second_argument_type;  \n    typedef bool result_type;  \n    typedef Microsoft::VisualC::StlClr::BinaryDelegate<  \n        first_argument_type, second_argument_type, result_type>  \n        delegate_type;  \n  \n    not_equal_to();  \n    not_equal_to(not_equal_to<Arg>% right);  \n  \n    result_type operator()(first_argument_type left,  \n        second_argument_type right);  \n    operator delegate_type^();  \n    };  \n```  \n  \n#### Parameters  \n Arg  \n The type of the arguments.  \n  \n## Member Functions  \n  \n|Type Definition|Description|  \n|---------------------|-----------------|  \n|delegate_type|The type of the generic delegate.|  \n|first_argument_type|The type of the functor first argument.|  \n|result_type|The type of the functor result.|  \n|second_argument_type|The type of the functor second argument.|  \n  \n|Member|Description|  \n|------------|-----------------|  \n|not_equal_to|Constructs the functor.|  \n  \n|Operator|Description|  \n|--------------|-----------------|  \n|operator()|Computes the desired function.|  \n|operator delegate_type^|Casts the functor to a delegate.|  \n  \n## Remarks  \n The template class describes a two-argument functor. It defines the member operator `operator()` so that, when the object is called as a function, it returns true only if the first argument is not equal to the second.  \n  \n You can also pass the object as a function argument whose type is `delegate_type^` and it will be converted appropriately.  \n  \n## Example  \n  \n```  \n// cliext_not_equal_to.cpp   \n// compile with: /clr   \n#include <cliext/algorithm>   \n#include <cliext/functional>   \n#include <cliext/vector>   \n  \ntypedef cliext::vector<int> Myvector;   \nint main()   \n    {   \n    Myvector c1;   \n    c1.push_back(4);   \n    c1.push_back(3);   \n    Myvector c2;   \n    c2.push_back(4);   \n    c2.push_back(4);   \n    Myvector c3(2, 0);   \n  \n// display initial contents \" 4 3\" and \" 4 4\"   \n    for each (int elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n    for each (int elem in c2)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// transform and display   \n    cliext::transform(c1.begin(), c1.begin() + 2,   \n        c2.begin(), c3.begin(), cliext::not_equal_to<int>());   \n    for each (int elem in c3)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n4 3  \n4 4  \n0 1  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/functional>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [equal_to (STL/CLR)](../dotnet/equal-to-stl-clr.md)"}