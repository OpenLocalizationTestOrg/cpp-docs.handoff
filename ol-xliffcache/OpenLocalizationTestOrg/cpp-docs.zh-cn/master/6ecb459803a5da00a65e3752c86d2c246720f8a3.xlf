<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6ecb459803a5da00a65e3752c86d2c246720f8a3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\windows\delegate-cpp-component-extensions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1c1e4c068d7e131d8df96c4233c75283414dd0bc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a5cf8e841b915015c1a4b5b7923171bc8af90102</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>delegate  (C++ Component Extensions) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>delegate  (C++ Component Extensions)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Declares a type that represents a function pointer.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>All Runtimes</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Both the <ph id="ph1">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph> and common language runtime support delegates.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>is a context-sensitive keyword.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Context-Sensitive Keywords<ept id="p1">](../windows/context-sensitive-keywords-cpp-component-extensions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To detect at compile time if a type is a delegate, use the <ph id="ph1">`__is_delegate()`</ph> type trait.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Compiler Support for Type Traits<ept id="p1">](../windows/compiler-support-for-type-traits-cpp-component-extensions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Windows Runtime</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>C++/CX supports delegates with the following syntax.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>access</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>(optional) The accessibility of the delegate, which can be <ph id="ph1">`public`</ph> (the default) or <ph id="ph2">`private`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The function prototype can also be qualified with the <ph id="ph1">`const`</ph> or <ph id="ph2">`volatile`</ph> keywords.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>return-type</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The return type of the function prototype.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>delegate-type-identifier</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The name of the declared delegate type.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>parameters</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>(Optional) The types and identifiers of the function prototype.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">*</bpt>delegate-type-identifier<ept id="p1">*</ept> to declare an event with the same prototype as the delegate.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Delegates (C++/CX)<ept id="p1">](http://msdn.microsoft.com/Library/3175bf1c-86d8-4eda-8d8f-c5b6753d8e38)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Compiler option: <bpt id="p1">**</bpt>/ZW<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Common Language Runtime</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The common language runtime supports delegates with the following syntax.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>access</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>(optional) The accessibility of the delegate outside of the assembly can be public or private.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The default is private.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Inside a class, a delegate can have any accessibility.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>function_declaration</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The signature of the function that can be bound to the delegate.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The return type of a delegate can be any managed type.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For interoperability reasons, it is recommended that the return type of a delegate be a CLS type.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To define an unbound delegate, the first parameter in <bpt id="p1">*</bpt>function_declaration<ept id="p1">*</ept> should be the type of the <ph id="ph1">`this`</ph> pointer for the object.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Delegates are multicast: the "function pointer" can be bound to one or more methods within a managed class.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>delegate<ept id="p1">**</ept> keyword defines a multicast delegate type with a specific method signature.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A delegate can also be bound to a method of a value class, such as a static method.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A delegate has the following characteristics:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>It inherits from <bpt id="p1">**</bpt>System::MulticastDelegate<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>It has a constructor that takes two arguments: a pointer to a managed class or <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> (in the case of binding to a static method) and a fully qualified method of the specified type.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>It has a method called <ph id="ph1">`Invoke`</ph>, whose signature matches the declared signature of the delegate.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>When a delegate is invoked, its function(s) are called in the order they were attached.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The return value of a delegate is the return value from its last attached member function.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Delegates cannot be overloaded.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Delegates can be bound or unbound.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>When you instantiate a bound delegate, the first argument shall be an object reference.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The second argument of a delegate instantiation shall either be the address of a method of a managed class object, or a pointer to a method of a value type.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The second argument of a delegate instantiation must name the method with the full class scope syntax and apply the address-of operator.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When you instantiate an unbound delegate, the first argument shall either be the address of a method of a managed class object, or a pointer to a method of a value type.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The argument must name the method with the full class scope syntax and apply the address-of operator.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>When creating a delegate to a static or global function, only one parameter is required: the function (optionally, the address of the function).</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For more information on delegates, see</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>How to: Define and Use Delegates (C++/CLI)</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Generic Delegates (Visual C++)</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Compiler option: <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The following example shows how to declare, initialize, and invoke delegates.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Component Extensions for Runtime Platforms</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>