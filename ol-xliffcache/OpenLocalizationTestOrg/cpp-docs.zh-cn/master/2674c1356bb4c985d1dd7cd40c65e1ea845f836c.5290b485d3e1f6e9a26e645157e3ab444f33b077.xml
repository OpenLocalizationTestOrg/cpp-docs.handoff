{"nodes":[{"pos":[12,56],"content":"ordered (OpenMP Directives) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ordered (OpenMP Directives) | Microsoft Docs","pos":[0,44]}]},{"content":"ordered (OpenMP Directives)","pos":[617,644]},{"content":"Specifies that code under a parallelized for loop should be executed like a sequential loop.","pos":[645,737]},{"content":"Syntax","pos":[746,752]},{"content":"Remarks","pos":[820,827]},{"pos":[831,1009],"content":"The <bpt id=\"p1\">**</bpt>ordered<ept id=\"p1\">**</ept> directive must be within the dynamic extent of a <bpt id=\"p2\">[</bpt>for<ept id=\"p2\">](../../../parallel/openmp/reference/for-openmp.md)</ept> or <bpt id=\"p3\">**</bpt>parallel for<ept id=\"p3\">**</ept> construct with an <bpt id=\"p4\">**</bpt>ordered<ept id=\"p4\">**</ept> clause.","source":"The **ordered** directive must be within the dynamic extent of a [for](../../../parallel/openmp/reference/for-openmp.md) or **parallel for** construct with an **ordered** clause."},{"pos":[1016,1069],"content":"The <bpt id=\"p1\">**</bpt>ordered<ept id=\"p1\">**</ept> directive supports no OpenMP clauses.","source":"The **ordered** directive supports no OpenMP clauses."},{"pos":[1076,1181],"content":"For more information, see <bpt id=\"p1\">[</bpt>2.6.6 ordered Construct<ept id=\"p1\">](../../../parallel/openmp/2-6-6-ordered-construct.md)</ept>.","source":"For more information, see [2.6.6 ordered Construct](../../../parallel/openmp/2-6-6-ordered-construct.md)."},{"content":"Example","pos":[1190,1197]},{"content":"See Also","pos":[2186,2194]},{"content":"Directives","pos":[2199,2209]}],"content":"---\ntitle: \"ordered (OpenMP Directives) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"ordered\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ordered OpenMP directive\"\nms.assetid: e1aa703e-d07d-4f6a-9b2a-f4f25203d850\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ordered (OpenMP Directives)\nSpecifies that code under a parallelized for loop should be executed like a sequential loop.  \n  \n## Syntax  \n  \n```  \n#pragma omp ordered  \n   structured-block  \n```  \n  \n## Remarks  \n The **ordered** directive must be within the dynamic extent of a [for](../../../parallel/openmp/reference/for-openmp.md) or **parallel for** construct with an **ordered** clause.  \n  \n The **ordered** directive supports no OpenMP clauses.  \n  \n For more information, see [2.6.6 ordered Construct](../../../parallel/openmp/2-6-6-ordered-construct.md).  \n  \n## Example  \n  \n```  \n// omp_ordered.cpp  \n// compile with: /openmp   \n#include <stdio.h>  \n#include <omp.h>  \n  \nstatic float a[1000], b[1000], c[1000];  \n  \nvoid test(int first, int last)   \n{  \n    #pragma omp for schedule(static) ordered  \n    for (int i = first; i <= last; ++i) {  \n        // Do something here.  \n        if (i % 2)   \n        {  \n            #pragma omp ordered   \n            printf_s(\"test() iteration %d\\n\", i);  \n        }  \n    }  \n}  \n  \nvoid test2(int iter)   \n{  \n    #pragma omp ordered  \n    printf_s(\"test2() iteration %d\\n\", iter);  \n}  \n  \nint main( )   \n{  \n    int i;  \n    #pragma omp parallel  \n    {  \n        test(1, 8);  \n        #pragma omp for ordered  \n        for (i = 0 ; i < 5 ; i++)  \n            test2(i);  \n    }  \n}  \n```  \n  \n```Output  \ntest() iteration 1  \ntest() iteration 3  \ntest() iteration 5  \ntest() iteration 7  \ntest2() iteration 0  \ntest2() iteration 1  \ntest2() iteration 2  \ntest2() iteration 3  \ntest2() iteration 4  \n```  \n  \n## See Also  \n [Directives](../../../parallel/openmp/reference/openmp-directives.md)"}