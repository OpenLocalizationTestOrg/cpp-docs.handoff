{"nodes":[{"pos":[12,85],"content":"How to: Add Command Routing to the Windows Forms Control | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Add Command Routing to the Windows Forms Control | Microsoft Docs","pos":[0,73]}]},{"content":"How to: Add Command Routing to the Windows Forms Control","pos":[714,770]},{"pos":[771,982],"content":"<bpt id=\"p1\">[</bpt>CWinFormsView<ept id=\"p1\">](../mfc/reference/cwinformsview-class.md)</ept> routes commands and update-command UI messages to the user control to allow it to handle MFC commands (for example, frame menu items and toolbar buttons).","source":"[CWinFormsView](../mfc/reference/cwinformsview-class.md) routes commands and update-command UI messages to the user control to allow it to handle MFC commands (for example, frame menu items and toolbar buttons)."},{"content":"The user control uses <bpt id=\"p1\">[</bpt>ICommandTarget::Initialize<ept id=\"p1\">](../mfc/reference/icommandtarget-interface.md#icommandtarget__initialize)</ept> to store a reference to the command source object in <ph id=\"ph1\">`m_CmdSrc`</ph>, as shown in the following example.","pos":[989,1212],"source":"The user control uses [ICommandTarget::Initialize](../mfc/reference/icommandtarget-interface.md#icommandtarget__initialize) to store a reference to the command source object in `m_CmdSrc`, as shown in the following example."},{"content":"To use <ph id=\"ph1\">`ICommandTarget`</ph> you must add a reference to mfcmifc80.dll.","pos":[1213,1279],"source":" To use `ICommandTarget` you must add a reference to mfcmifc80.dll."},{"content":"handles several of the common MFC view notifications by forwarding them to the managed user control.","pos":[1302,1402]},{"content":"These notifications include the <bpt id=\"p1\">[</bpt>OnInitialUpdate<ept id=\"p1\">](../mfc/reference/iview-interface.md#iview__oninitialupdate)</ept>, <bpt id=\"p2\">[</bpt>OnUpdate<ept id=\"p2\">](../mfc/reference/iview-interface.md#iview__onupdate)</ept> and <bpt id=\"p3\">[</bpt>OnActivateView<ept id=\"p3\">](../mfc/reference/iview-interface.md#iview__onactivateview)</ept> methods.","pos":[1403,1666],"source":" These notifications include the [OnInitialUpdate](../mfc/reference/iview-interface.md#iview__oninitialupdate), [OnUpdate](../mfc/reference/iview-interface.md#iview__onupdate) and [OnActivateView](../mfc/reference/iview-interface.md#iview__onactivateview) methods."},{"pos":[1673,1970],"content":"This topic assumes you have previously completed <bpt id=\"p1\">[</bpt>How to: Create the User Control and Host in a Dialog Box<ept id=\"p1\">](../dotnet/how-to-create-the-user-control-and-host-in-a-dialog-box.md)</ept> and <bpt id=\"p2\">[</bpt>How to: Create the User Control and Host MDI View<ept id=\"p2\">](../dotnet/how-to-create-the-user-control-and-host-mdi-view.md)</ept>.","source":"This topic assumes you have previously completed [How to: Create the User Control and Host in a Dialog Box](../dotnet/how-to-create-the-user-control-and-host-in-a-dialog-box.md) and [How to: Create the User Control and Host MDI View](../dotnet/how-to-create-the-user-control-and-host-mdi-view.md)."},{"content":"To create the MFC host application","pos":[1980,2014]},{"pos":[2024,2203],"content":"Open Windows Forms Control Library you created in <bpt id=\"p1\">[</bpt>How to: Create the User Control and Host in a Dialog Box<ept id=\"p1\">](../dotnet/how-to-create-the-user-control-and-host-in-a-dialog-box.md)</ept>.","source":"Open Windows Forms Control Library you created in [How to: Create the User Control and Host in a Dialog Box](../dotnet/how-to-create-the-user-control-and-host-in-a-dialog-box.md)."},{"pos":[2213,2423],"content":"Add a reference to mfcmifc80.dll, which you can do by right-clicking the project node in <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, selecting <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Reference<ept id=\"p3\">**</ept>, and then browsing to Microsoft Visual Studio 10.0\\VC\\atlmfc\\lib.","source":"Add a reference to mfcmifc80.dll, which you can do by right-clicking the project node in **Solution Explorer**, selecting **Add**, **Reference**, and then browsing to Microsoft Visual Studio 10.0\\VC\\atlmfc\\lib."},{"content":"Open UserControl1.Designer.cs and add the following using statement:","pos":[2433,2501]},{"content":"Also, in UserControl1.Designer.cs, change this line:","pos":[2569,2621]},{"content":"to this:","pos":[2688,2696]},{"pos":[2813,2883],"content":"Add this as the first line of the class definition for <ph id=\"ph1\">`UserControl1`</ph>:","source":"Add this as the first line of the class definition for `UserControl1`:"},{"pos":[2955,3070],"content":"Add the following method definitions to <ph id=\"ph1\">`UserControl1`</ph> (we will create the ID of the MFC control in the next step):","source":"Add the following method definitions to `UserControl1` (we will create the ID of the MFC control in the next step):"},{"pos":[3541,3696],"content":"Open the MFC application you created in <bpt id=\"p1\">[</bpt>How to: Create the User Control and Host MDI View<ept id=\"p1\">](../dotnet/how-to-create-the-user-control-and-host-mdi-view.md)</ept>.","source":"Open the MFC application you created in [How to: Create the User Control and Host MDI View](../dotnet/how-to-create-the-user-control-and-host-mdi-view.md)."},{"pos":[3706,3761],"content":"Add a menu option that will invoke <ph id=\"ph1\">`singleMenuHandler`</ph>.","source":"Add a menu option that will invoke `singleMenuHandler`."},{"content":"Go to <bpt id=\"p1\">**</bpt>Resource View<ept id=\"p1\">**</ept> (Ctrl+Shift+E), expand the <bpt id=\"p2\">**</bpt>Menu<ept id=\"p2\">**</ept> folder, and then double-click <bpt id=\"p3\">**</bpt>IDR_MFC02TYPE<ept id=\"p3\">**</ept>.","pos":[3772,3880],"source":"Go to **Resource View** (Ctrl+Shift+E), expand the **Menu** folder, and then double-click **IDR_MFC02TYPE**."},{"content":"This displays the menu editor.","pos":[3881,3911]},{"content":"Add a menu option at the bottom of the <bpt id=\"p1\">**</bpt>View<ept id=\"p1\">**</ept> menu.","pos":[3922,3975],"source":"Add a menu option at the bottom of the **View** menu."},{"content":"Notice the ID of the menu option in the <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> window.","pos":[3976,4038],"source":" Notice the ID of the menu option in the **Properties** window."},{"content":"Save the file.","pos":[4039,4053]},{"pos":[4064,4328],"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, open the Resource.h file, copy the ID value for the menu option you just added, and paste that value as the first parameter to the <ph id=\"ph1\">`m_CmdSrc.AddCommandHandler`</ph> call in the C# project's <ph id=\"ph2\">`Initialize`</ph> method (replacing <ph id=\"ph3\">`32771`</ph> if necessary).","source":"In **Solution Explorer**, open the Resource.h file, copy the ID value for the menu option you just added, and paste that value as the first parameter to the `m_CmdSrc.AddCommandHandler` call in the C# project's `Initialize` method (replacing `32771` if necessary)."},{"content":"Build and run the project.","pos":[4337,4363]},{"pos":[4374,4422],"content":"On the <bpt id=\"p1\">**</bpt>Build<ept id=\"p1\">**</ept> menu, click <bpt id=\"p2\">**</bpt>Build Solution<ept id=\"p2\">**</ept>.","source":"On the **Build** menu, click **Build Solution**."},{"pos":[4433,4490],"content":"On the <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept> menu, click <bpt id=\"p2\">**</bpt>Start without debugging<ept id=\"p2\">**</ept>.","source":"On the **Debug** menu, click **Start without debugging**."},{"content":"Select the menu option you added.","pos":[4501,4534]},{"content":"Notice that the method in the .dll is called.","pos":[4535,4580]},{"content":"See Also","pos":[4589,4597]},{"content":"Hosting a Windows Forms User Control as an MFC View","pos":[4602,4653]},{"content":"ICommandSource Interface","pos":[4726,4750]},{"content":"ICommandTarget Interface","pos":[4803,4827]},{"content":"CommandHandler","pos":[4880,4894]}],"content":"---\ntitle: \"How to: Add Command Routing to the Windows Forms Control | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"get-started-article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"command routing [C++], adding to Windows Forms controls\"\n  - \"Windows Forms controls [C++], command routing\"\nms.assetid: bf138ece-b463-442a-b0a0-de7063a760c0\ncaps.latest.revision: 13\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Add Command Routing to the Windows Forms Control\n[CWinFormsView](../mfc/reference/cwinformsview-class.md) routes commands and update-command UI messages to the user control to allow it to handle MFC commands (for example, frame menu items and toolbar buttons).  \n  \n The user control uses [ICommandTarget::Initialize](../mfc/reference/icommandtarget-interface.md#icommandtarget__initialize) to store a reference to the command source object in `m_CmdSrc`, as shown in the following example. To use `ICommandTarget` you must add a reference to mfcmifc80.dll.  \n  \n `CWinFormsView` handles several of the common MFC view notifications by forwarding them to the managed user control. These notifications include the [OnInitialUpdate](../mfc/reference/iview-interface.md#iview__oninitialupdate), [OnUpdate](../mfc/reference/iview-interface.md#iview__onupdate) and [OnActivateView](../mfc/reference/iview-interface.md#iview__onactivateview) methods.  \n  \n This topic assumes you have previously completed [How to: Create the User Control and Host in a Dialog Box](../dotnet/how-to-create-the-user-control-and-host-in-a-dialog-box.md) and [How to: Create the User Control and Host MDI View](../dotnet/how-to-create-the-user-control-and-host-mdi-view.md).  \n  \n### To create the MFC host application  \n  \n1.  Open Windows Forms Control Library you created in [How to: Create the User Control and Host in a Dialog Box](../dotnet/how-to-create-the-user-control-and-host-in-a-dialog-box.md).  \n  \n2.  Add a reference to mfcmifc80.dll, which you can do by right-clicking the project node in **Solution Explorer**, selecting **Add**, **Reference**, and then browsing to Microsoft Visual Studio 10.0\\VC\\atlmfc\\lib.  \n  \n3.  Open UserControl1.Designer.cs and add the following using statement:  \n  \n    ```  \n    using Microsoft.VisualC.MFC;  \n    ```  \n  \n4.  Also, in UserControl1.Designer.cs, change this line:  \n  \n    ```  \n    partial class UserControl1  \n    ```  \n  \n     to this:  \n  \n    ```  \n    partial class UserControl1 : System.Windows.Forms.UserControl, ICommandTarget  \n    ```  \n  \n5.  Add this as the first line of the class definition for `UserControl1`:  \n  \n    ```  \n    private ICommandSource m_CmdSrc;  \n    ```  \n  \n6.  Add the following method definitions to `UserControl1` (we will create the ID of the MFC control in the next step):  \n  \n    ```  \n    public void Initialize (ICommandSource cmdSrc)  \n    {  \n       m_CmdSrc = cmdSrc;  \n       // need ID of control in MFC dialog and callback function   \n       m_CmdSrc.AddCommandHandler(32771, new CommandHandler (singleMenuHandler));  \n    }  \n  \n    private void singleMenuHandler (uint cmdUI)  \n    {  \n       // User command handler code  \n       System.Windows.Forms.MessageBox.Show(\"Custom menu option was clicked.\");  \n    }  \n    ```  \n  \n7.  Open the MFC application you created in [How to: Create the User Control and Host MDI View](../dotnet/how-to-create-the-user-control-and-host-mdi-view.md).  \n  \n8.  Add a menu option that will invoke `singleMenuHandler`.  \n  \n     Go to **Resource View** (Ctrl+Shift+E), expand the **Menu** folder, and then double-click **IDR_MFC02TYPE**. This displays the menu editor.  \n  \n     Add a menu option at the bottom of the **View** menu. Notice the ID of the menu option in the **Properties** window. Save the file.  \n  \n     In **Solution Explorer**, open the Resource.h file, copy the ID value for the menu option you just added, and paste that value as the first parameter to the `m_CmdSrc.AddCommandHandler` call in the C# project's `Initialize` method (replacing `32771` if necessary).  \n  \n9. Build and run the project.  \n  \n     On the **Build** menu, click **Build Solution**.  \n  \n     On the **Debug** menu, click **Start without debugging**.  \n  \n     Select the menu option you added. Notice that the method in the .dll is called.  \n  \n## See Also  \n [Hosting a Windows Forms User Control as an MFC View](../dotnet/hosting-a-windows-forms-user-control-as-an-mfc-view.md)   \n [ICommandSource Interface](../mfc/reference/icommandsource-interface.md)   \n [ICommandTarget Interface](../mfc/reference/icommandtarget-interface.md)   \n [CommandHandler](http://msdn.microsoft.com/Library/22096734-e074-4aca-8523-4b15590109f9)"}