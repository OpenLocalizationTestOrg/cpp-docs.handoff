{"nodes":[{"pos":[12,60],"content":"Concurrency::graphics Namespace | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Concurrency::graphics Namespace | Microsoft Docs","pos":[0,48]}]},{"content":"Concurrency::graphics Namespace","pos":[642,673]},{"content":"The graphics namespace provides types and functions that are designed for graphics programming.","pos":[674,769]},{"content":"Syntax","pos":[778,784]},{"content":"Members","pos":[830,837]},{"content":"Namespaces","pos":[847,857]},{"content":"Name","pos":[864,868]},{"content":"Description","pos":[869,880]},{"content":"Concurrency::graphics::direct3d Namespace","pos":[919,960]},{"content":"Provides functions for Direct3D interop.","pos":[1006,1046]},{"content":"Typedefs","pos":[1057,1065]},{"content":"Name","pos":[1072,1076]},{"content":"Description","pos":[1077,1088]},{"content":"The element type for <bpt id=\"p1\">[</bpt>uint_2 Class<ept id=\"p1\">](uint-2-class.md)</ept>, <bpt id=\"p2\">[</bpt>uint_3 Class<ept id=\"p2\">](uint-3-class.md)</ept>, and <bpt id=\"p3\">[</bpt>uint_4 Class<ept id=\"p3\">](uint-4-class.md)</ept>.","pos":[1133,1256],"source":"The element type for [uint_2 Class](uint-2-class.md), [uint_3 Class](uint-3-class.md), and [uint_4 Class](uint-4-class.md)."},{"content":"Defined as <ph id=\"ph1\">`typedef unsigned int uint;`</ph>.","pos":[1257,1297],"source":" Defined as `typedef unsigned int uint;`."},{"content":"Enumerations","pos":[1308,1320]},{"content":"Name","pos":[1327,1331]},{"content":"Description","pos":[1332,1343]},{"pos":[1381,1462],"content":"<bpt id=\"p1\">[</bpt>address_mode Enumeration<ept id=\"p1\">](concurrency-graphics-namespace-enums.md#address_mode)</ept>.","source":"[address_mode Enumeration](concurrency-graphics-namespace-enums.md#address_mode)."},{"content":"Specifies address modes supported for texture sampling.","pos":[1463,1518]},{"content":"filter_mode Enumeration","pos":[1524,1547]},{"content":"Specifies filter modes supported for texture sampling.","pos":[1602,1656]},{"content":"Classes","pos":[1667,1674]},{"content":"Name","pos":[1681,1685]},{"content":"Description","pos":[1686,1697]},{"content":"texture Class","pos":[1736,1749]},{"content":"A texture is a data aggregate on an accelerator_view in the extent domain.","pos":[1769,1843]},{"content":"It is a collection of variables, one for each element in an extent domain.","pos":[1844,1918]},{"content":"Each variable holds a value corresponding to C++ primitive type (unsigned int, int, float, double), or scalar type norm, or unorm (defined in concurrency::graphics), or eligible short vector types defined in concurrency::graphics.","pos":[1919,2149]},{"content":"writeonly_texture_view Class","pos":[2155,2183]},{"content":"A writeonly_texture_view provides writeonly access to a texture.","pos":[2218,2282]},{"content":"double_2 Class","pos":[2288,2302]},{"pos":[2323,2370],"content":"Represents a short vector of 2 <ph id=\"ph1\">`double`</ph> values.","source":"Represents a short vector of 2 `double` values."},{"content":"double_3 Class","pos":[2376,2390]},{"pos":[2411,2458],"content":"Represents a short vector of 3 <ph id=\"ph1\">`double`</ph> values.","source":"Represents a short vector of 3 `double` values."},{"content":"double_4 Class","pos":[2464,2478]},{"pos":[2499,2546],"content":"Represents a short vector of 4 <ph id=\"ph1\">`double`</ph> values.","source":"Represents a short vector of 4 `double` values."},{"content":"float_2 Class","pos":[2552,2565]},{"pos":[2585,2631],"content":"Represents a short vector of 2 <ph id=\"ph1\">`float`</ph> values.","source":"Represents a short vector of 2 `float` values."},{"content":"float_3 Class","pos":[2637,2650]},{"pos":[2670,2716],"content":"Represents a short vector of 3 <ph id=\"ph1\">`float`</ph> values.","source":"Represents a short vector of 3 `float` values."},{"content":"float_4 Class","pos":[2722,2735]},{"pos":[2755,2801],"content":"Represents a short vector of 4 <ph id=\"ph1\">`float`</ph> values.","source":"Represents a short vector of 4 `float` values."},{"content":"int_2 Class","pos":[2807,2818]},{"pos":[2836,2880],"content":"Represents a short vector of 2 <ph id=\"ph1\">`int`</ph> values.","source":"Represents a short vector of 2 `int` values."},{"content":"int_3 Class","pos":[2886,2897]},{"pos":[2915,2959],"content":"Represents a short vector of 3 <ph id=\"ph1\">`int`</ph> values.","source":"Represents a short vector of 3 `int` values."},{"content":"int_4 Class","pos":[2965,2976]},{"pos":[2994,3038],"content":"Represents a short vector of 4 <ph id=\"ph1\">`int`</ph> values.","source":"Represents a short vector of 4 `int` values."},{"content":"norm_2 Class","pos":[3044,3056]},{"pos":[3075,3120],"content":"Represents a short vector of 2 <ph id=\"ph1\">`norm`</ph> values.","source":"Represents a short vector of 2 `norm` values."},{"content":"norm_3 Class","pos":[3126,3138]},{"pos":[3157,3202],"content":"Represents a short vector of 3 <ph id=\"ph1\">`norm`</ph> values.","source":"Represents a short vector of 3 `norm` values."},{"content":"norm_4 Class","pos":[3208,3220]},{"pos":[3239,3284],"content":"Represents a short vector of 4 <ph id=\"ph1\">`norm`</ph> values.","source":"Represents a short vector of 4 `norm` values."},{"content":"uint_2 Class","pos":[3290,3302]},{"pos":[3321,3366],"content":"Represents a short vector of 2 <ph id=\"ph1\">`uint`</ph> values.","source":"Represents a short vector of 2 `uint` values."},{"content":"uint_3 Class","pos":[3372,3384]},{"pos":[3403,3448],"content":"Represents a short vector of 3 <ph id=\"ph1\">`uint`</ph> values.","source":"Represents a short vector of 3 `uint` values."},{"content":"uint_4 Class","pos":[3454,3466]},{"pos":[3485,3530],"content":"Represents a short vector of 4 <ph id=\"ph1\">`uint`</ph> values.","source":"Represents a short vector of 4 `uint` values."},{"content":"unorm_2 Class","pos":[3536,3549]},{"pos":[3569,3615],"content":"Represents a short vector of 2 <ph id=\"ph1\">`unorm`</ph> values.","source":"Represents a short vector of 2 `unorm` values."},{"content":"unorm_3 Class","pos":[3621,3634]},{"pos":[3654,3700],"content":"Represents a short vector of 3 <ph id=\"ph1\">`unorm`</ph> values.","source":"Represents a short vector of 3 `unorm` values."},{"content":"unorm_4 Class","pos":[3706,3719]},{"pos":[3739,3785],"content":"Represents a short vector of 4 <ph id=\"ph1\">`unorm`</ph> values.","source":"Represents a short vector of 4 `unorm` values."},{"content":"sampler Class","pos":[3791,3804]},{"content":"Represents the sampler configuration used for texture sampling.","pos":[3824,3887]},{"content":"short_vector Structure","pos":[3893,3915]},{"content":"Provides a basic implementation of a short vector of values.","pos":[3944,4004]},{"content":"short_vector_traits Structure","pos":[4010,4039]},{"content":"Provides for retrieval of the length and type of a short vector.","pos":[4075,4139]},{"content":"texture_view Class","pos":[4145,4163]},{"content":"Provides read access and write access to a texture.","pos":[4188,4239]},{"content":"Functions","pos":[4250,4259]},{"content":"Name","pos":[4266,4270]},{"content":"Description","pos":[4271,4282]},{"content":"copy Function","pos":[4321,4334]},{"content":"Overloaded.","pos":[4395,4406]},{"content":"Copies the contents of the source texture into the destination host buffer.","pos":[4407,4482]},{"content":"copy_async Function","pos":[4488,4507]},{"content":"Overloaded.","pos":[4574,4585]},{"content":"Asynchronously copies the contents of the source texture into the destination host buffer.","pos":[4586,4676]},{"content":"Requirements","pos":[4686,4698]},{"pos":[4702,4728],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> amp_graphics.h","source":"**Header:** amp_graphics.h"},{"pos":[4735,4761],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> Concurrency","source":"**Namespace:** Concurrency"},{"content":"See Also","pos":[4770,4778]},{"content":"Concurrency Namespace (C++ AMP)","pos":[4783,4814]}],"content":"---\ntitle: \"Concurrency::graphics Namespace | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"amp_graphics/Concurrency::graphics\"\n  - \"amp_short_vectors/Concurrency::graphics\"\ndev_langs: \n  - \"C++\"\nms.assetid: 4529d3b1-d7da-4ffb-82bf-080915e0f23e\ncaps.latest.revision: 14\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Concurrency::graphics Namespace\nThe graphics namespace provides types and functions that are designed for graphics programming.  \n  \n## Syntax  \n  \n```  \nnamespace graphics;  \n```  \n  \n## Members  \n  \n### Namespaces  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[Concurrency::graphics::direct3d Namespace](concurrency-graphics-direct3d-namespace.md)|Provides functions for Direct3D interop.|  \n  \n### Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`uint`|The element type for [uint_2 Class](uint-2-class.md), [uint_3 Class](uint-3-class.md), and [uint_4 Class](uint-4-class.md). Defined as `typedef unsigned int uint;`.|  \n  \n### Enumerations  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[address_mode Enumeration](concurrency-graphics-namespace-enums.md#address_mode).|Specifies address modes supported for texture sampling.|  \n|[filter_mode Enumeration](concurrency-graphics-namespace-enums.md#filter_mode)|Specifies filter modes supported for texture sampling.|  \n  \n### Classes  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[texture Class](texture-class.md)|A texture is a data aggregate on an accelerator_view in the extent domain. It is a collection of variables, one for each element in an extent domain. Each variable holds a value corresponding to C++ primitive type (unsigned int, int, float, double), or scalar type norm, or unorm (defined in concurrency::graphics), or eligible short vector types defined in concurrency::graphics.|  \n|[writeonly_texture_view Class](writeonly-texture-view-class.md)|A writeonly_texture_view provides writeonly access to a texture.|  \n|[double_2 Class](double-2-class.md)|Represents a short vector of 2 `double` values.|  \n|[double_3 Class](double-3-class.md)|Represents a short vector of 3 `double` values.|  \n|[double_4 Class](double-4-class.md)|Represents a short vector of 4 `double` values.|  \n|[float_2 Class](float-2-class.md)|Represents a short vector of 2 `float` values.|  \n|[float_3 Class](float-3-class.md)|Represents a short vector of 3 `float` values.|  \n|[float_4 Class](float-4-class.md)|Represents a short vector of 4 `float` values.|  \n|[int_2 Class](int-2-class.md)|Represents a short vector of 2 `int` values.|  \n|[int_3 Class](int-3-class.md)|Represents a short vector of 3 `int` values.|  \n|[int_4 Class](int-4-class.md)|Represents a short vector of 4 `int` values.|  \n|[norm_2 Class](norm-2-class.md)|Represents a short vector of 2 `norm` values.|  \n|[norm_3 Class](norm-3-class.md)|Represents a short vector of 3 `norm` values.|  \n|[norm_4 Class](norm-4-class.md)|Represents a short vector of 4 `norm` values.|  \n|[uint_2 Class](uint-2-class.md)|Represents a short vector of 2 `uint` values.|  \n|[uint_3 Class](uint-3-class.md)|Represents a short vector of 3 `uint` values.|  \n|[uint_4 Class](uint-4-class.md)|Represents a short vector of 4 `uint` values.|  \n|[unorm_2 Class](unorm-2-class.md)|Represents a short vector of 2 `unorm` values.|  \n|[unorm_3 Class](unorm-3-class.md)|Represents a short vector of 3 `unorm` values.|  \n|[unorm_4 Class](unorm-4-class.md)|Represents a short vector of 4 `unorm` values.|  \n|[sampler Class](sampler-class.md)|Represents the sampler configuration used for texture sampling.|  \n|[short_vector Structure](short-vector-structure.md)|Provides a basic implementation of a short vector of values.|  \n|[short_vector_traits Structure](short-vector-traits-structure.md)|Provides for retrieval of the length and type of a short vector.|  \n|[texture_view Class](texture-view-class.md)|Provides read access and write access to a texture.|  \n  \n### Functions  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[copy Function](concurrency-graphics-namespace-functions.md#copy_function)|Overloaded. Copies the contents of the source texture into the destination host buffer.|  \n|[copy_async Function](concurrency-graphics-namespace-functions.md#copy_async_function)|Overloaded. Asynchronously copies the contents of the source texture into the destination host buffer.|  \n  \n## Requirements  \n **Header:** amp_graphics.h  \n  \n **Namespace:** Concurrency  \n  \n## See Also  \n [Concurrency Namespace (C++ AMP)](concurrency-namespace-cpp-amp.md)\n"}