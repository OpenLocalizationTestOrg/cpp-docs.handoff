{"nodes":[{"pos":[12,58],"content":"Methods of Creating a Toolbar | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Methods of Creating a Toolbar | Microsoft Docs","pos":[0,46]}]},{"content":"Methods of Creating a Toolbar","pos":[777,806]},{"content":"MFC provides two classes to create toolbars: <bpt id=\"p1\">[</bpt>CToolBar<ept id=\"p1\">](../mfc/reference/ctoolbar-class.md)</ept> and <bpt id=\"p2\">[</bpt>CToolBarCtrl<ept id=\"p2\">](../mfc/reference/ctoolbarctrl-class.md)</ept> (which wraps the Windows common control API).","pos":[807,1003],"source":"MFC provides two classes to create toolbars: [CToolBar](../mfc/reference/ctoolbar-class.md) and [CToolBarCtrl](../mfc/reference/ctoolbarctrl-class.md) (which wraps the Windows common control API)."},{"content":"provides all of the functionality of the toolbar common control, and it handles many of the required common control settings and structures for you; however, your resulting executable usually will be larger than that created by using <ph id=\"ph1\">`CToolBarCtrl`</ph>.","pos":[1015,1264],"source":" provides all of the functionality of the toolbar common control, and it handles many of the required common control settings and structures for you; however, your resulting executable usually will be larger than that created by using `CToolBarCtrl`."},{"content":"usually results in a smaller executable, and you may prefer to use <ph id=\"ph1\">`CToolBarCtrl`</ph> if you do not intend to integrate the toolbar into the MFC architecture.","pos":[1286,1440],"source":" usually results in a smaller executable, and you may prefer to use `CToolBarCtrl` if you do not intend to integrate the toolbar into the MFC architecture."},{"content":"If you plan to use <ph id=\"ph1\">`CToolBarCtrl`</ph> and integrate the toolbar into the MFC architecture, you must take additional care to communicate toolbar control manipulations to MFC.","pos":[1441,1610],"source":" If you plan to use `CToolBarCtrl` and integrate the toolbar into the MFC architecture, you must take additional care to communicate toolbar control manipulations to MFC."},{"content":"This communication is not difficult; however, it is additional work that is unneeded when you use <ph id=\"ph1\">`CToolBar`</ph>.","pos":[1611,1720],"source":" This communication is not difficult; however, it is additional work that is unneeded when you use `CToolBar`."},{"content":"Visual C++ provides two ways to take advantage of the toolbar common control.","pos":[1727,1804]},{"pos":[1814,2006],"content":"Create the toolbar using <ph id=\"ph1\">`CToolBar`</ph>, and then call <bpt id=\"p1\">[</bpt>CToolBar::GetToolBarCtrl<ept id=\"p1\">](../mfc/reference/ctoolbar-class.md#ctoolbar__gettoolbarctrl)</ept> to get access to the <ph id=\"ph2\">`CToolBarCtrl`</ph> member functions.","source":"Create the toolbar using `CToolBar`, and then call [CToolBar::GetToolBarCtrl](../mfc/reference/ctoolbar-class.md#ctoolbar__gettoolbarctrl) to get access to the `CToolBarCtrl` member functions."},{"pos":[2016,2110],"content":"Create the toolbar using <bpt id=\"p1\">[</bpt>CToolBarCtrl<ept id=\"p1\">](../mfc/reference/ctoolbarctrl-class.md)</ept>'s constructor.","source":"Create the toolbar using [CToolBarCtrl](../mfc/reference/ctoolbarctrl-class.md)'s constructor."},{"content":"Either method will give you access to the member functions of the toolbar control.","pos":[2117,2199]},{"content":"When you call <ph id=\"ph1\">`CToolBar::GetToolBarCtrl`</ph>, it returns a reference to a <ph id=\"ph2\">`CToolBarCtrl`</ph> object so you can use either set of member functions.","pos":[2200,2338],"source":" When you call `CToolBar::GetToolBarCtrl`, it returns a reference to a `CToolBarCtrl` object so you can use either set of member functions."},{"content":"See <bpt id=\"p1\">[</bpt>CToolBar<ept id=\"p1\">](../mfc/reference/ctoolbar-class.md)</ept> for information on constructing and creating a toolbar using <ph id=\"ph1\">`CToolBar`</ph>.","pos":[2339,2462],"source":" See [CToolBar](../mfc/reference/ctoolbar-class.md) for information on constructing and creating a toolbar using `CToolBar`."},{"content":"See Also","pos":[2471,2479]},{"content":"Using CToolBarCtrl","pos":[2484,2502]},{"content":"Controls","pos":[2539,2547]}],"content":"---\ntitle: \"Methods of Creating a Toolbar | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CToolBarCtrl class, and CToolBar class\"\n  - \"CToolBar class, creating toolbars\"\n  - \"MFC toolbars\"\n  - \"toolbar controls [MFC]\"\n  - \"toolbar controls [MFC], creating\"\n  - \"CToolBarCtrl class, creating toolbars\"\nms.assetid: f19d8d65-d49f-445c-abe8-d47d3e4101c8\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Methods of Creating a Toolbar\nMFC provides two classes to create toolbars: [CToolBar](../mfc/reference/ctoolbar-class.md) and [CToolBarCtrl](../mfc/reference/ctoolbarctrl-class.md) (which wraps the Windows common control API). `CToolBar` provides all of the functionality of the toolbar common control, and it handles many of the required common control settings and structures for you; however, your resulting executable usually will be larger than that created by using `CToolBarCtrl`.  \n  \n `CToolBarCtrl` usually results in a smaller executable, and you may prefer to use `CToolBarCtrl` if you do not intend to integrate the toolbar into the MFC architecture. If you plan to use `CToolBarCtrl` and integrate the toolbar into the MFC architecture, you must take additional care to communicate toolbar control manipulations to MFC. This communication is not difficult; however, it is additional work that is unneeded when you use `CToolBar`.  \n  \n Visual C++ provides two ways to take advantage of the toolbar common control.  \n  \n-   Create the toolbar using `CToolBar`, and then call [CToolBar::GetToolBarCtrl](../mfc/reference/ctoolbar-class.md#ctoolbar__gettoolbarctrl) to get access to the `CToolBarCtrl` member functions.  \n  \n-   Create the toolbar using [CToolBarCtrl](../mfc/reference/ctoolbarctrl-class.md)'s constructor.  \n  \n Either method will give you access to the member functions of the toolbar control. When you call `CToolBar::GetToolBarCtrl`, it returns a reference to a `CToolBarCtrl` object so you can use either set of member functions. See [CToolBar](../mfc/reference/ctoolbar-class.md) for information on constructing and creating a toolbar using `CToolBar`.  \n  \n## See Also  \n [Using CToolBarCtrl](../mfc/using-ctoolbarctrl.md)   \n [Controls](../mfc/controls-mfc.md)\n\n"}