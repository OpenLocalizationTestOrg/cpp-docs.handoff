{"nodes":[{"pos":[12,40],"content":"ctype Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ctype Class | Microsoft Docs","pos":[0,28]}]},{"content":"ctype Class","pos":[657,668]},{"content":"A class that provides a facet that is used to classify characters, convert from upper and lower cases, and convert between the native character set and that set used by the locale.","pos":[669,849]},{"content":"Syntax","pos":[858,864]},{"content":"Parameters","pos":[953,963]},{"content":"The type used within a program to encode characters.","pos":[981,1033]},{"content":"Remarks","pos":[1042,1049]},{"content":"As with any locale facet, the static object ID has an initial stored value of zero.","pos":[1053,1136]},{"content":"The first attempt to access its stored value stores a unique positive value in <bpt id=\"p1\">**</bpt>id.<ept id=\"p1\">**</ept>","pos":[1137,1223],"source":" The first attempt to access its stored value stores a unique positive value in **id.**"},{"content":"Classification criteria are provided a nested bitmask type in the base class ctype_base.","pos":[1224,1312]},{"content":"The Standard C++ Library defines two explicit specializations of this template class:","pos":[1319,1404]},{"pos":[1412,1541],"content":"<bpt id=\"p1\">[</bpt>ctype<ept id=\"p1\">](../standard-library/ctype-char-class.md)</ept><ph id=\"ph1\">&lt; `char`</ph>&gt;, an explicit specialization whose differences are described separately.","source":"[ctype](../standard-library/ctype-char-class.md)< `char`>, an explicit specialization whose differences are described separately."},{"pos":[1549,1613],"content":"<bpt id=\"p1\">**</bpt>ctype<ept id=\"p1\">**</ept><ph id=\"ph1\">&lt; `wchar_t`</ph>&gt;, which treats elements as wide characters.","source":"**ctype**< `wchar_t`>, which treats elements as wide characters."},{"pos":[1620,1686],"content":"Other specializations of template class <bpt id=\"p1\">**</bpt>ctype<ept id=\"p1\">**</ept><ph id=\"ph1\">\\&lt;</ph> <bpt id=\"p2\">**</bpt>CharType<ept id=\"p2\">**</ept>&gt;:","source":"Other specializations of template class **ctype**\\< **CharType**>:"},{"pos":[1696,1805],"content":"Convert a value <bpt id=\"p1\">***</bpt>ch<ept id=\"p1\">***</ept> of type <bpt id=\"p2\">**</bpt>CharType<ept id=\"p2\">**</ept> to a value of type <ph id=\"ph1\">`char`</ph> with the expression ( <ph id=\"ph2\">`char`</ph>) <bpt id=\"p3\">**</bpt>ch<ept id=\"p3\">**</ept>.","source":"Convert a value ***ch*** of type **CharType** to a value of type `char` with the expression ( `char`) **ch**."},{"pos":[1815,1934],"content":"Convert a value <bpt id=\"p1\">***</bpt>byte<ept id=\"p1\">***</ept> of type <ph id=\"ph1\">`char`</ph> to a value of type <bpt id=\"p2\">**</bpt>CharType<ept id=\"p2\">**</ept> with the expression <bpt id=\"p3\">**</bpt>CharType<ept id=\"p3\">**</ept> ( <bpt id=\"p4\">**</bpt>byte<ept id=\"p4\">**</ept>).","source":"Convert a value ***byte*** of type `char` to a value of type **CharType** with the expression **CharType** ( **byte**)."},{"pos":[1941,2063],"content":"All other operations are performed on <ph id=\"ph1\">`char`</ph> values in the same way as for the explicit specialization <bpt id=\"p1\">**</bpt>ctype<ept id=\"p1\">**</ept><ph id=\"ph2\">&lt; `char`</ph>&gt;.","source":"All other operations are performed on `char` values in the same way as for the explicit specialization **ctype**< `char`>."},{"content":"Constructors","pos":[2073,2085]},{"content":"ctype","pos":[2107,2112]},{"pos":[2129,2213],"content":"Constructor for objects of class <ph id=\"ph1\">`ctype`</ph> that serve as locale facets for characters.","source":"Constructor for objects of class `ctype` that serve as locale facets for characters."},{"content":"Typedefs","pos":[2224,2232]},{"content":"char_type","pos":[2254,2263]},{"content":"A type that describes a character used by a locale.","pos":[2284,2335]},{"content":"Member Functions","pos":[2346,2362]},{"content":"do_is","pos":[2384,2389]},{"content":"A virtual function called to test whether a single character has a particular attribute, or classify the attributes of each character in a range and stores them in an array.","pos":[2406,2579]},{"content":"do_narrow","pos":[2585,2594]},{"pos":[2615,2774],"content":"A virtual function called to convert a character of type <ph id=\"ph1\">`CharType`</ph> used by a locale to the corresponding character of type <ph id=\"ph2\">`char`</ph> in the native character set.","source":"A virtual function called to convert a character of type `CharType` used by a locale to the corresponding character of type `char` in the native character set."},{"content":"do_scan_is","pos":[2780,2790]},{"content":"A virtual function called to locate the first character in a range that matches a specified mask.","pos":[2812,2909]},{"content":"do_scan_not","pos":[2915,2926]},{"content":"A virtual function called to locate the first character in a range that does not match a specified mask.","pos":[2949,3053]},{"content":"do_tolower","pos":[3059,3069]},{"content":"A virtual function called to convert a character or a range of characters to their lower case.","pos":[3091,3185]},{"content":"do_toupper","pos":[3191,3201]},{"content":"A virtual function called to convert a character or a range of characters to upper case.","pos":[3223,3311]},{"content":"do_widen","pos":[3317,3325]},{"pos":[3345,3505],"content":"A virtual function called to converts a character of type <ph id=\"ph1\">`char`</ph> in the native character set to the corresponding character of type <ph id=\"ph2\">`CharType`</ph> used by a locale.","source":"A virtual function called to converts a character of type `char` in the native character set to the corresponding character of type `CharType` used by a locale."},{"content":"is","pos":[3511,3513]},{"content":"Tests whether a single character has a particular attribute, or classifies the attributes of each character in a range and stores them in an array.","pos":[3527,3674]},{"content":"narrow","pos":[3680,3686]},{"pos":[3704,3833],"content":"Converts a character of type <ph id=\"ph1\">`CharType`</ph> used by a locale to the corresponding character of type char in the native character set.","source":"Converts a character of type `CharType` used by a locale to the corresponding character of type char in the native character set."},{"content":"scan_is","pos":[3839,3846]},{"content":"Locates the first character in a range that matches a specified mask.","pos":[3865,3934]},{"content":"scan_not","pos":[3940,3948]},{"content":"Locates the first character in a range that does not match a specified mask.","pos":[3968,4044]},{"content":"tolower","pos":[4050,4057]},{"content":"Converts a character or a range of characters to lower case.","pos":[4076,4136]},{"content":"toupper","pos":[4142,4149]},{"content":"Converts a character or a range of characters to upper case.","pos":[4168,4228]},{"content":"widen","pos":[4234,4239]},{"pos":[4256,4387],"content":"Converts a character of type <ph id=\"ph1\">`char`</ph> in the native character set to the corresponding character of type <ph id=\"ph2\">`CharType`</ph> used by a locale.","source":"Converts a character of type `char` in the native character set to the corresponding character of type `CharType` used by a locale."},{"content":"Requirements","pos":[4397,4409]},{"pos":[4413,4434],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>locale&gt;","source":"**Header:** \\<locale>"},{"pos":[4441,4459],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[4502,4518],"content":"ctype::char_type"},{"content":"A type that describes a character used by a locale.","pos":[4522,4573]},{"content":"Remarks","pos":[4628,4635]},{"pos":[4639,4701],"content":"The type is a synonym for the template parameter <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept>.","source":"The type is a synonym for the template parameter **CharType**."},{"content":"Example","pos":[4711,4718]},{"pos":[4723,4825],"content":"See the member function <bpt id=\"p1\">[</bpt>widen<ept id=\"p1\">](#ctype__widen)</ept> for an example that uses <ph id=\"ph1\">`char_type`</ph> as a return value.","source":"See the member function [widen](#ctype__widen) for an example that uses `char_type` as a return value."},{"pos":[4864,4876],"content":"ctype::ctype"},{"content":"Constructor for objects of class ctype that serve as locale facets for characters.","pos":[4880,4962]},{"content":"Parameters","pos":[5021,5031]},{"content":"Integer value used to specify the type of memory management for the object.","pos":[5046,5121]},{"content":"Remarks","pos":[5131,5138]},{"pos":[5142,5215],"content":"The possible values for the <ph id=\"ph1\">`_Refs`</ph> parameter and their significance are:","source":"The possible values for the `_Refs` parameter and their significance are:"},{"content":"0: The lifetime of the object is managed by the locales that contain it.","pos":[5225,5297]},{"content":"1: The lifetime of the object must be manually managed.","pos":[5307,5362]},{"content":"0: These values are not defined.","pos":[5375,5407]},{"content":"No direct examples are possible, because the destructor is protected.","pos":[5414,5483]},{"pos":[5490,5634],"content":"The constructor initializes its <ph id=\"ph1\">`locale::facet`</ph> base object with <bpt id=\"p1\">**</bpt>locale::<ept id=\"p1\">**</ept><bpt id=\"p2\">[</bpt>facet<ept id=\"p2\">](../standard-library/locale-class.md#facet_class)</ept>( <ph id=\"ph2\">`_Refs`</ph>).","source":"The constructor initializes its `locale::facet` base object with **locale::**[facet](../standard-library/locale-class.md#facet_class)( `_Refs`)."},{"pos":[5673,5685],"content":"ctype::do_is"},{"content":"A virtual function called to test whether a single character has a particular attribute, or classify the attributes of each character in a range and stores them in an array.","pos":[5689,5862]},{"content":"Parameters","pos":[6067,6077]},{"content":"The mask value for which the character is to be tested.","pos":[6094,6149]},{"content":"The character whose attributes are to be tested.","pos":[6164,6212]},{"content":"A pointer to the first character in the range whose attributes are to be classified.","pos":[6230,6314]},{"content":"A pointer to the character immediately following the last character in the range whose attributes are to be classified.","pos":[6331,6450]},{"content":"A pointer to the beginning of the array where the mask values characterizing the attributes of each of the characters are to be stored.","pos":[6467,6602]},{"content":"Return Value","pos":[6612,6624]},{"pos":[6628,6810],"content":"The first member function returns a Boolean value that is <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the character tested has the attribute described by the mask value; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if it fails to have the attribute.","source":"The first member function returns a Boolean value that is **true** if the character tested has the attribute described by the mask value; **false** if it fails to have the attribute."},{"content":"The second member function returns an array containing the mask values characterizing the attributes of each of the characters in the range.","pos":[6817,6957]},{"content":"Remarks","pos":[6967,6974]},{"content":"The mask values classifying the attributes of the characters are provided by the class <bpt id=\"p1\">[</bpt>ctype_base<ept id=\"p1\">](../standard-library/ctype-base-class.md)</ept>, from which ctype derives.","pos":[6978,7145],"source":"The mask values classifying the attributes of the characters are provided by the class [ctype_base](../standard-library/ctype-base-class.md), from which ctype derives."},{"content":"The first member function can accept expressions for its first parameter referred to as bitmasks and formed from the combination of mask values by the logical bitwise operators (&amp;#124; , &amp; , ^ , ~).","pos":[7146,7344],"source":" The first member function can accept expressions for its first parameter referred to as bitmasks and formed from the combination of mask values by the logical bitwise operators (&#124; , & , ^ , ~)."},{"content":"Example","pos":[7354,7361]},{"pos":[7366,7424],"content":"See the example for <bpt id=\"p1\">[</bpt>is<ept id=\"p1\">](#ctype__is)</ept>, which calls <ph id=\"ph1\">`do_is`</ph>.","source":"See the example for [is](#ctype__is), which calls `do_is`."},{"pos":[7467,7483],"content":"ctype::do_narrow"},{"pos":[7487,7646],"content":"A virtual function called to convert a character of type <ph id=\"ph1\">`CharType`</ph> used by a locale to the corresponding character of type <ph id=\"ph2\">`char`</ph> in the native character set.","source":"A virtual function called to convert a character of type `CharType` used by a locale to the corresponding character of type `char` in the native character set."},{"content":"Parameters","pos":[7887,7897]},{"content":"The character of type <ph id=\"ph1\">`Chartype`</ph> used by the locale to be converted.","pos":[7909,7977],"source":" The character of type `Chartype` used by the locale to be converted."},{"content":"The default value to be assigned by the member function to characters of type <ph id=\"ph1\">`CharType`</ph> that do not have counterpart characters of type <ph id=\"ph2\">`char`</ph>.","pos":[7997,8141],"source":" The default value to be assigned by the member function to characters of type `CharType` that do not have counterpart characters of type `char`."},{"content":"A pointer to the first character in the range of characters to be converted.","pos":[8159,8235]},{"content":"A pointer to the character immediately following the last character in the range of characters to be converted.","pos":[8252,8363]},{"content":"A const pointer to the first character of type <ph id=\"ph1\">`char`</ph> in the destination range that stores the converted range of characters.","pos":[8380,8505],"source":" A const pointer to the first character of type `char` in the destination range that stores the converted range of characters."},{"content":"Return Value","pos":[8515,8527]},{"pos":[8531,8714],"content":"The first protected member function returns the native character of type char that corresponds to the parameter character of type <ph id=\"ph1\">`CharType`</ph> or <ph id=\"ph2\">`default`</ph> if no counterpart is defined.","source":"The first protected member function returns the native character of type char that corresponds to the parameter character of type `CharType` or `default` if no counterpart is defined."},{"pos":[8721,8867],"content":"The second protected member function returns a pointer to the destination range of native characters converted from characters of type <ph id=\"ph1\">`CharType`</ph>.","source":"The second protected member function returns a pointer to the destination range of native characters converted from characters of type `CharType`."},{"content":"Remarks","pos":[8877,8884]},{"pos":[8888,9054],"content":"The second protected member template function stores in <ph id=\"ph1\">`dest`</ph>[ <ph id=\"ph2\">`I`</ph>] the value <ph id=\"ph3\">`do_narrow`</ph>( <ph id=\"ph4\">`first`</ph> [ <ph id=\"ph5\">`I`</ph>], <ph id=\"ph6\">`default`</ph>), for <ph id=\"ph7\">`I`</ph> in the interval [0, <ph id=\"ph8\">`last`</ph> – <ph id=\"ph9\">`first`</ph>).","source":"The second protected member template function stores in `dest`[ `I`] the value `do_narrow`( `first` [ `I`], `default`), for `I` in the interval [0, `last` – `first`)."},{"content":"Example","pos":[9064,9071]},{"pos":[9076,9146],"content":"See the example for <bpt id=\"p1\">[</bpt>narrow<ept id=\"p1\">](#ctype__narrow)</ept>, which calls <ph id=\"ph1\">`do_narrow`</ph>.","source":"See the example for [narrow](#ctype__narrow), which calls `do_narrow`."},{"pos":[9190,9207],"content":"ctype::do_scan_is"},{"content":"A virtual function called to locate the first character in a range that matches a specified mask.","pos":[9211,9308]},{"content":"Parameters","pos":[9453,9463]},{"content":"The mask value to be matched by a character.","pos":[9480,9524]},{"content":"A pointer to the first character in the range to be scanned.","pos":[9542,9602]},{"content":"A pointer to the character immediately following the last character in the range to be scanned.","pos":[9619,9714]},{"content":"Return Value","pos":[9724,9736]},{"content":"A pointer to the first character in a range that does match a specified mask.","pos":[9740,9817]},{"content":"If no such value exists, the function returns","pos":[9818,9863]},{"content":"Remarks","pos":[9881,9888]},{"pos":[9892,10051],"content":"The protected member function returns the smallest pointer <ph id=\"ph1\">`ptr`</ph> in the range [ <ph id=\"ph2\">`first`</ph>, <ph id=\"ph3\">`last`</ph>) for which <bpt id=\"p1\">[</bpt>do_is<ept id=\"p1\">](#ctype__do_is)</ept>( <ph id=\"ph4\">`maskVal`</ph>, * <ph id=\"ph5\">`ptr`</ph>) is true.","source":"The protected member function returns the smallest pointer `ptr` in the range [ `first`, `last`) for which [do_is](#ctype__do_is)( `maskVal`, * `ptr`) is true."},{"content":"Example","pos":[10061,10068]},{"pos":[10073,10146],"content":"See the example for <bpt id=\"p1\">[</bpt>scan_is<ept id=\"p1\">](#ctype__scan_is)</ept>, which calls <ph id=\"ph1\">`do_scan_is`</ph>.","source":"See the example for [scan_is](#ctype__scan_is), which calls `do_scan_is`."},{"pos":[10191,10209],"content":"ctype::do_scan_not"},{"content":"A virtual function called to locate the first character in a range that does not match a specified mask.","pos":[10213,10317]},{"content":"Parameters","pos":[10463,10473]},{"content":"The mask value not to be matched by a character.","pos":[10490,10538]},{"content":"A pointer to the first character in the range to be scanned.","pos":[10556,10616]},{"content":"A pointer to the character immediately following the last character in the range to be scanned.","pos":[10633,10728]},{"content":"Return Value","pos":[10738,10750]},{"content":"A pointer to the first character in a range that doesn't match a specified mask.","pos":[10754,10834]},{"content":"If no such value exists, the function returns <ph id=\"ph1\">`last`</ph>.","pos":[10835,10888],"source":" If no such value exists, the function returns `last`."},{"content":"Remarks","pos":[10898,10905]},{"pos":[10909,11069],"content":"The protected member function returns the smallest pointer <ph id=\"ph1\">`ptr`</ph> in the range [ <ph id=\"ph2\">`first`</ph>, <ph id=\"ph3\">`last`</ph>) for which <bpt id=\"p1\">[</bpt>do_is<ept id=\"p1\">](#ctype__do_is)</ept>( <ph id=\"ph4\">`maskVal`</ph>, * <ph id=\"ph5\">`ptr`</ph>) is false.","source":"The protected member function returns the smallest pointer `ptr` in the range [ `first`, `last`) for which [do_is](#ctype__do_is)( `maskVal`, * `ptr`) is false."},{"content":"Example","pos":[11079,11086]},{"pos":[11091,11167],"content":"See the example for <bpt id=\"p1\">[</bpt>scan_not<ept id=\"p1\">](#ctype__scan_not)</ept>, which calls <ph id=\"ph1\">`do_scan_not`</ph>.","source":"See the example for [scan_not](#ctype__scan_not), which calls `do_scan_not`."},{"pos":[11211,11228],"content":"ctype::do_tolower"},{"content":"A virtual function called to convert a character or a range of characters to lower case.","pos":[11232,11320]},{"content":"Parameters","pos":[11489,11499]},{"content":"The character to be converted to lower case.","pos":[11511,11555]},{"content":"A pointer to the first character in the range of characters whose cases are to be converted.","pos":[11573,11665]},{"content":"A pointer to the character immediately following the last character in the range of characters whose cases are to be converted.","pos":[11682,11809]},{"content":"Return Value","pos":[11819,11831]},{"content":"The first protected member function returns the lowercase form of the parameter <ph id=\"ph1\">`ch`</ph>.","pos":[11835,11920],"source":"The first protected member function returns the lowercase form of the parameter `ch`."},{"content":"If no lowercase form exists, it returns <ph id=\"ph1\">`ch`</ph>.","pos":[11921,11966],"source":" If no lowercase form exists, it returns `ch`."},{"content":"The second protected member function returns <ph id=\"ph1\">`last`</ph>.","pos":[11967,12019],"source":" The second protected member function returns `last`."},{"content":"Remarks","pos":[12029,12036]},{"pos":[12040,12206],"content":"The second protected member template function replaces each element <ph id=\"ph1\">`first`</ph> [ <ph id=\"ph2\">`I`</ph>], for <ph id=\"ph3\">`I`</ph> in the interval [0, <ph id=\"ph4\">`last`</ph> – <ph id=\"ph5\">`first`</ph>), with <ph id=\"ph6\">`do_tolower`</ph>( <ph id=\"ph7\">`first`</ph> [ <ph id=\"ph8\">`I`</ph>]).","source":"The second protected member template function replaces each element `first` [ `I`], for `I` in the interval [0, `last` – `first`), with `do_tolower`( `first` [ `I`])."},{"content":"Example","pos":[12216,12223]},{"pos":[12228,12301],"content":"See the example for <bpt id=\"p1\">[</bpt>tolower<ept id=\"p1\">](#ctype__tolower)</ept>, which calls <ph id=\"ph1\">`do_tolower`</ph>.","source":"See the example for [tolower](#ctype__tolower), which calls `do_tolower`."},{"pos":[12345,12362],"content":"ctype::do_toupper"},{"content":"A virtual function called to convert a character or a range of characters to upper case.","pos":[12366,12454]},{"content":"Parameters","pos":[12623,12633]},{"content":"The character to be converted to upper case.","pos":[12645,12689]},{"content":"A pointer to the first character in the range of characters whose cases are to be converted.","pos":[12707,12799]},{"content":"A pointer to character immediately following the last character in the range of characters whose cases are to be converted.","pos":[12816,12939]},{"content":"Return Value","pos":[12949,12961]},{"content":"The first protected member function returns the uppercase form of the parameter <ph id=\"ph1\">`ch`</ph>.","pos":[12965,13050],"source":"The first protected member function returns the uppercase form of the parameter `ch`."},{"content":"If no uppercase form exists, it returns <ph id=\"ph1\">`ch`</ph>.","pos":[13051,13096],"source":" If no uppercase form exists, it returns `ch`."},{"content":"The second protected member function returns <ph id=\"ph1\">`last`</ph>.","pos":[13097,13149],"source":" The second protected member function returns `last`."},{"content":"Remarks","pos":[13159,13166]},{"pos":[13170,13336],"content":"The second protected member template function replaces each element <ph id=\"ph1\">`first`</ph> [ <ph id=\"ph2\">`I`</ph>], for <ph id=\"ph3\">`I`</ph> in the interval [0, <ph id=\"ph4\">`last`</ph> – <ph id=\"ph5\">`first`</ph>), with <ph id=\"ph6\">`do_toupper`</ph>( <ph id=\"ph7\">`first`</ph> [ <ph id=\"ph8\">`I`</ph>]).","source":"The second protected member template function replaces each element `first` [ `I`], for `I` in the interval [0, `last` – `first`), with `do_toupper`( `first` [ `I`])."},{"content":"Example","pos":[13346,13353]},{"pos":[13358,13431],"content":"See the example for <bpt id=\"p1\">[</bpt>toupper<ept id=\"p1\">](#ctype__toupper)</ept>, which calls <ph id=\"ph1\">`do_toupper`</ph>.","source":"See the example for [toupper](#ctype__toupper), which calls `do_toupper`."},{"pos":[13473,13488],"content":"ctype::do_widen"},{"pos":[13492,13652],"content":"A virtual function called to converts a character of type <ph id=\"ph1\">`char`</ph> in the native character set to the corresponding character of type <ph id=\"ph2\">`CharType`</ph> used by a locale.","source":"A virtual function called to converts a character of type `char` in the native character set to the corresponding character of type `CharType` used by a locale."},{"content":"Parameters","pos":[13832,13842]},{"content":"The character of type <ph id=\"ph1\">`char`</ph> in the native character set to be converted.","pos":[13856,13929],"source":" The character of type `char` in the native character set to be converted."},{"content":"A pointer to the first character in the range of characters to be converted.","pos":[13947,14023]},{"content":"A pointer to the character immediately following the last character in the range of characters to be converted.","pos":[14040,14151]},{"content":"A pointer to the first character of type <ph id=\"ph1\">`CharType`</ph> in the destination range that stores the converted range of characters.","pos":[14168,14291],"source":" A pointer to the first character of type `CharType` in the destination range that stores the converted range of characters."},{"content":"Return Value","pos":[14301,14313]},{"pos":[14317,14460],"content":"The first protected member function returns the character of type <ph id=\"ph1\">`CharType`</ph> that corresponds to the parameter character of native type <ph id=\"ph2\">`char`</ph>.","source":"The first protected member function returns the character of type `CharType` that corresponds to the parameter character of native type `char`."},{"pos":[14467,14645],"content":"The second protected member function returns a pointer to the destination range of characters of type <ph id=\"ph1\">`CharType`</ph> used by a locale converted from native characters of type <ph id=\"ph2\">`char`</ph>.","source":"The second protected member function returns a pointer to the destination range of characters of type `CharType` used by a locale converted from native characters of type `char`."},{"content":"Remarks","pos":[14655,14662]},{"pos":[14666,14819],"content":"The second protected member template function stores in <ph id=\"ph1\">`dest`</ph>[ <ph id=\"ph2\">`I`</ph>] the value <ph id=\"ph3\">`do_widen`</ph>( <ph id=\"ph4\">`first`</ph>[ <ph id=\"ph5\">`I`</ph>]), for <ph id=\"ph6\">`I`</ph> in the interval [0, <ph id=\"ph7\">`last` - `first`</ph>).","source":"The second protected member template function stores in `dest`[ `I`] the value `do_widen`( `first`[ `I`]), for `I` in the interval [0, `last` - `first`)."},{"content":"Example","pos":[14829,14836]},{"pos":[14841,14908],"content":"See the example for <bpt id=\"p1\">[</bpt>widen<ept id=\"p1\">](#ctype__widen)</ept>, which calls <ph id=\"ph1\">`do_widen`</ph>.","source":"See the example for [widen](#ctype__widen), which calls `do_widen`."},{"pos":[14944,14953],"content":"ctype::is"},{"content":"Tests whether a single character has a particular attribute or classifies the attributes of each character in a range and stores them in an array.","pos":[14957,15103]},{"content":"Parameters","pos":[15274,15284]},{"content":"The mask value for which the character is to be tested.","pos":[15301,15356]},{"content":"The character whose attributes are to be tested.","pos":[15371,15419]},{"content":"A pointer to the first character in the range whose attributes are to be classified.","pos":[15437,15521]},{"content":"A pointer to the character immediately following the last character in the range whose attributes are to be classified.","pos":[15538,15657]},{"content":"A pointer to the beginning of the array where the mask values characterizing the attributes of each of the characters are to be stored.","pos":[15674,15809]},{"content":"Return Value","pos":[15819,15831]},{"pos":[15835,15989],"content":"The first member function returns <ph id=\"ph1\">`true`</ph> if the character tested has the attribute described by the mask value; <ph id=\"ph2\">`false`</ph> if it fails to have the attribute.","source":"The first member function returns `true` if the character tested has the attribute described by the mask value; `false` if it fails to have the attribute."},{"content":"The second member function returns a pointer to the last character in the range whose attributes are to be classified.","pos":[15996,16114]},{"content":"Remarks","pos":[16124,16131]},{"content":"The mask values classifying the attributes of the characters are provided by the class <bpt id=\"p1\">[</bpt>ctype_base Class<ept id=\"p1\">](../standard-library/ctype-base-class.md)</ept>, from which ctype derives.","pos":[16135,16308],"source":"The mask values classifying the attributes of the characters are provided by the class [ctype_base Class](../standard-library/ctype-base-class.md), from which ctype derives."},{"content":"The first member function can accept expressions for its first parameter referred to as bitmasks and formed from the combination of mask values by the logical bitwise operators (&amp;#124; , &amp; , ^ , ~).","pos":[16309,16507],"source":" The first member function can accept expressions for its first parameter referred to as bitmasks and formed from the combination of mask values by the logical bitwise operators (&#124; , & , ^ , ~)."},{"content":"Example","pos":[16517,16524]},{"pos":[17745,17758],"content":"ctype::narrow"},{"pos":[17762,17893],"content":"Converts characters of type <ph id=\"ph1\">`CharType`</ph> used by a locale to the corresponding characters of type <ph id=\"ph2\">`char`</ph> in the native character set.","source":"Converts characters of type `CharType` used by a locale to the corresponding characters of type `char` in the native character set."},{"content":"Parameters","pos":[18100,18110]},{"content":"The character of type <ph id=\"ph1\">`Chartype`</ph> used by the locale to be converted.","pos":[18122,18190],"source":" The character of type `Chartype` used by the locale to be converted."},{"content":"The default value to be assigned by the member function to characters of type <ph id=\"ph1\">`CharType`</ph> that do not have counterpart characters of type <ph id=\"ph2\">`char`</ph>.","pos":[18210,18354],"source":" The default value to be assigned by the member function to characters of type `CharType` that do not have counterpart characters of type `char`."},{"content":"A pointer to the first character in the range of characters to be converted.","pos":[18372,18448]},{"content":"A pointer to the character immediately following the last character in the range of characters to be converted.","pos":[18465,18576]},{"content":"A const pointer to the first character of type <ph id=\"ph1\">`char`</ph> in the destination range that stores the converted range of characters.","pos":[18593,18718],"source":" A const pointer to the first character of type `char` in the destination range that stores the converted range of characters."},{"content":"Return Value","pos":[18728,18740]},{"pos":[18744,18916],"content":"The first member function returns the native character of type <ph id=\"ph1\">`char`</ph> that corresponds to the parameter character of type <ph id=\"ph2\">`CharType``default`</ph> if not counterpart is defined.","source":"The first member function returns the native character of type `char` that corresponds to the parameter character of type `CharType``default` if not counterpart is defined."},{"pos":[18923,19059],"content":"The second member function returns a pointer to the destination range of native characters converted from characters of type <ph id=\"ph1\">`CharType`</ph>.","source":"The second member function returns a pointer to the destination range of native characters converted from characters of type `CharType`."},{"content":"Remarks","pos":[19069,19076]},{"content":"The first member function returns <bpt id=\"p1\">[</bpt>do_narrow<ept id=\"p1\">](#ctype__do_narrow)</ept>( <ph id=\"ph1\">`ch`</ph>, <ph id=\"ph2\">`default`</ph>).","pos":[19080,19163],"source":"The first member function returns [do_narrow](#ctype__do_narrow)( `ch`, `default`)."},{"content":"The second member function returns <bpt id=\"p1\">[</bpt>do_narrow<ept id=\"p1\">](#ctype__do_narrow)</ept> ( <ph id=\"ph1\">`first`</ph>, <ph id=\"ph2\">`last`</ph>, <ph id=\"ph3\">`default`</ph>, <ph id=\"ph4\">`dest`</ph>).","pos":[19164,19268],"source":" The second member function returns [do_narrow](#ctype__do_narrow) ( `first`, `last`, `default`, `dest`)."},{"content":"Only the basic source characters are guaranteed to have a unique inverse image <ph id=\"ph1\">`CharType`</ph> under <ph id=\"ph2\">`narrow`</ph>.","pos":[19269,19374],"source":" Only the basic source characters are guaranteed to have a unique inverse image `CharType` under `narrow`."},{"content":"For these basic source characters, the following invariant holds: <ph id=\"ph1\">`narrow`</ph> ( <bpt id=\"p1\">[</bpt>widen<ept id=\"p1\">](#ctype__widen)</ept> ( <bpt id=\"p2\">**</bpt>c<ept id=\"p2\">**</ept> ), 0 ) == <bpt id=\"p3\">**</bpt>c<ept id=\"p3\">**</ept>.","pos":[19375,19499],"source":" For these basic source characters, the following invariant holds: `narrow` ( [widen](#ctype__widen) ( **c** ), 0 ) == **c**."},{"content":"Example","pos":[19509,19516]},{"pos":[20080,20094],"content":"ctype::scan_is"},{"content":"Locates the first character in a range that matches a specified mask.","pos":[20098,20167]},{"content":"Parameters","pos":[20301,20311]},{"content":"The mask value to be matched by a character.","pos":[20328,20372]},{"content":"A pointer to the first character in the range to be scanned.","pos":[20390,20450]},{"content":"A pointer to the character immediately following the last character in the range to be scanned.","pos":[20467,20562]},{"content":"Return Value","pos":[20572,20584]},{"content":"A pointer to the first character in a range that does match a specified mask.","pos":[20588,20665]},{"content":"If no such value exists, the function returns","pos":[20666,20711]},{"content":"Remarks","pos":[20729,20736]},{"pos":[20740,20830],"content":"The member function returns <bpt id=\"p1\">[</bpt>do_scan_is<ept id=\"p1\">](#ctype__do_scan_is)</ept>( <ph id=\"ph1\">`maskVal`</ph>, <ph id=\"ph2\">`first`</ph>, <ph id=\"ph3\">`last`</ph>).","source":"The member function returns [do_scan_is](#ctype__do_scan_is)( `maskVal`, `first`, `last`)."},{"content":"Example","pos":[20840,20847]},{"pos":[21436,21451],"content":"ctype::scan_not"},{"content":"Locates the first character in a range that does not match a specified mask.","pos":[21455,21531]},{"content":"Parameters","pos":[21666,21676]},{"content":"The mask value not to be matched by a character.","pos":[21693,21741]},{"content":"A pointer to the first character in the range to be scanned.","pos":[21759,21819]},{"content":"A pointer to the character immediately following the last character in the range to be scanned.","pos":[21836,21931]},{"content":"Return Value","pos":[21941,21953]},{"content":"A pointer to the first character in a range that does not match a specified mask.","pos":[21957,22038]},{"content":"If no such value exists, the function returns <ph id=\"ph1\">`last`</ph>.","pos":[22039,22092],"source":" If no such value exists, the function returns `last`."},{"content":"Remarks","pos":[22102,22109]},{"pos":[22113,22205],"content":"The member function returns <bpt id=\"p1\">[</bpt>do_scan_not<ept id=\"p1\">](#ctype__do_scan_not)</ept>( <ph id=\"ph1\">`maskVal`</ph>, <ph id=\"ph2\">`first`</ph>, <ph id=\"ph3\">`last`</ph>).","source":"The member function returns [do_scan_not](#ctype__do_scan_not)( `maskVal`, `first`, `last`)."},{"content":"Example","pos":[22215,22222]},{"pos":[22818,22832],"content":"ctype::tolower"},{"content":"Converts a character or a range of characters to lower case.","pos":[22836,22896]},{"content":"Parameters","pos":[23031,23041]},{"content":"The character to be converted to lower case.","pos":[23053,23097]},{"content":"A pointer to the first character in the range of characters whose cases are to be converted.","pos":[23115,23207]},{"content":"A pointer to the character immediately following the last character in the range of characters whose cases are to be converted.","pos":[23224,23351]},{"content":"Return Value","pos":[23361,23373]},{"content":"The first member function returns the lowercase form of the parameter <ph id=\"ph1\">`ch`</ph>.","pos":[23377,23452],"source":"The first member function returns the lowercase form of the parameter `ch`."},{"content":"If no lowercase form exists, it returns <ph id=\"ph1\">`ch`</ph>.","pos":[23453,23498],"source":" If no lowercase form exists, it returns `ch`."},{"pos":[23505,23547],"content":"The second member function returns <ph id=\"ph1\">`last`</ph>.","source":"The second member function returns `last`."},{"content":"Remarks","pos":[23557,23564]},{"content":"The first member function returns <bpt id=\"p1\">[</bpt>do_tolower<ept id=\"p1\">](#ctype__do_tolower)</ept>( <ph id=\"ph1\">`ch`</ph>).","pos":[23568,23642],"source":"The first member function returns [do_tolower](#ctype__do_tolower)( `ch`)."},{"content":"The second member function returns <bpt id=\"p1\">[</bpt>do_tolower<ept id=\"p1\">](#ctype__do_tolower)</ept>( <ph id=\"ph1\">`first`</ph>, <ph id=\"ph2\">`last`</ph>).","pos":[23643,23729],"source":" The second member function returns [do_tolower](#ctype__do_tolower)( `first`, `last`)."},{"content":"Example","pos":[23739,23746]},{"pos":[24257,24271],"content":"ctype::toupper"},{"content":"Converts a character or a range of characters to upper case.","pos":[24275,24335]},{"content":"Parameters","pos":[24468,24478]},{"content":"The character to be converted to uppercase.","pos":[24490,24533]},{"content":"A pointer to the first character in the range of characters whose cases are to be converted.","pos":[24551,24643]},{"content":"A pointer to the character immediately following the last character in the range of characters whose cases are to be converted.","pos":[24660,24787]},{"content":"Return Value","pos":[24797,24809]},{"content":"The first member function returns the uppercase form of the parameter <ph id=\"ph1\">`ch`</ph>.","pos":[24813,24888],"source":"The first member function returns the uppercase form of the parameter `ch`."},{"content":"If no uppercase form exists, it returns <ph id=\"ph1\">`ch`</ph>.","pos":[24889,24934],"source":" If no uppercase form exists, it returns `ch`."},{"pos":[24941,24983],"content":"The second member function returns <ph id=\"ph1\">`last`</ph>.","source":"The second member function returns `last`."},{"content":"Remarks","pos":[24993,25000]},{"content":"The first member function returns <bpt id=\"p1\">[</bpt>do_toupper<ept id=\"p1\">](#ctype__do_toupper)</ept>( <ph id=\"ph1\">`ch`</ph>).","pos":[25004,25078],"source":"The first member function returns [do_toupper](#ctype__do_toupper)( `ch`)."},{"content":"The second member function returns <bpt id=\"p1\">[</bpt>do_toupper<ept id=\"p1\">](#ctype__do_toupper)</ept>( <ph id=\"ph1\">`first`</ph>, <ph id=\"ph2\">`last`</ph>).","pos":[25079,25165],"source":" The second member function returns [do_toupper](#ctype__do_toupper)( `first`, `last`)."},{"content":"Example","pos":[25175,25182]},{"pos":[25694,25706],"content":"ctype::widen"},{"pos":[25710,25841],"content":"Converts a character of type <ph id=\"ph1\">`char`</ph> in the native character set to the corresponding character of type <ph id=\"ph2\">`CharType`</ph> used by a locale.","source":"Converts a character of type `char` in the native character set to the corresponding character of type `CharType` used by a locale."},{"content":"Parameters","pos":[25978,25988]},{"content":"The character of type char in the native character set to be converted.","pos":[26002,26073]},{"content":"A pointer to the first character in the range of characters to be converted.","pos":[26091,26167]},{"content":"A pointer to the character immediately following the last character in the range of characters to be converted.","pos":[26184,26295]},{"content":"A pointer to the first character of type <ph id=\"ph1\">`CharType`</ph> in the destination range that stores the converted range of characters.","pos":[26312,26435],"source":" A pointer to the first character of type `CharType` in the destination range that stores the converted range of characters."},{"content":"Return Value","pos":[26445,26457]},{"pos":[26461,26594],"content":"The first member function returns the character of type <ph id=\"ph1\">`CharType`</ph> that corresponds to the parameter character of native type <ph id=\"ph2\">`char`</ph>.","source":"The first member function returns the character of type `CharType` that corresponds to the parameter character of native type `char`."},{"pos":[26601,26769],"content":"The second member function returns a pointer to the destination range of characters of type <ph id=\"ph1\">`CharType`</ph> used by a locale converted from native characters of type <ph id=\"ph2\">`char`</ph>.","source":"The second member function returns a pointer to the destination range of characters of type `CharType` used by a locale converted from native characters of type `char`."},{"content":"Remarks","pos":[26779,26786]},{"content":"The first member function returns <bpt id=\"p1\">[</bpt>do_widen<ept id=\"p1\">](#ctype__do_widen)</ept>( <ph id=\"ph1\">`byte`</ph>).","pos":[26790,26862],"source":"The first member function returns [do_widen](#ctype__do_widen)( `byte`)."},{"content":"The second member function returns <bpt id=\"p1\">[</bpt>do_widen<ept id=\"p1\">](#ctype__do_widen)</ept>( <ph id=\"ph1\">`first`</ph>, <ph id=\"ph2\">`last`</ph>, <ph id=\"ph3\">`dest`</ph>).","pos":[26863,26953],"source":" The second member function returns [do_widen](#ctype__do_widen)( `first`, `last`, `dest`)."},{"content":"Example","pos":[26963,26970]},{"content":"See Also","pos":[27607,27615]},{"content":"locale&gt;","pos":[27622,27629],"source":"locale>"},{"content":"Thread Safety in the C++ Standard Library","pos":[27667,27708]}],"content":"---\ntitle: \"ctype Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"ctype\"\n  - \"std::ctype\"\n  - \"std.ctype\"\n  - \"CType\"\n  - \"xlocale/std::ctype\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ctype class\"\nms.assetid: 3627154c-49d9-47b5-b28f-5bbedee38e3b\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ctype Class\nA class that provides a facet that is used to classify characters, convert from upper and lower cases, and convert between the native character set and that set used by the locale.  \n  \n## Syntax  \n  \n```  \ntemplate <class CharType>  \nclass ctype : public ctype_base;  \n```  \n  \n#### Parameters  \n `CharType`  \n The type used within a program to encode characters.  \n  \n## Remarks  \n As with any locale facet, the static object ID has an initial stored value of zero. The first attempt to access its stored value stores a unique positive value in **id.** Classification criteria are provided a nested bitmask type in the base class ctype_base.  \n  \n The Standard C++ Library defines two explicit specializations of this template class:  \n  \n- [ctype](../standard-library/ctype-char-class.md)< `char`>, an explicit specialization whose differences are described separately.  \n  \n- **ctype**< `wchar_t`>, which treats elements as wide characters.  \n  \n Other specializations of template class **ctype**\\< **CharType**>:  \n  \n-   Convert a value ***ch*** of type **CharType** to a value of type `char` with the expression ( `char`) **ch**.  \n  \n-   Convert a value ***byte*** of type `char` to a value of type **CharType** with the expression **CharType** ( **byte**).  \n  \n All other operations are performed on `char` values in the same way as for the explicit specialization **ctype**< `char`>.  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[ctype](#ctype__ctype)|Constructor for objects of class `ctype` that serve as locale facets for characters.|  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|[char_type](#ctype__char_type)|A type that describes a character used by a locale.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[do_is](#ctype__do_is)|A virtual function called to test whether a single character has a particular attribute, or classify the attributes of each character in a range and stores them in an array.|  \n|[do_narrow](#ctype__do_narrow)|A virtual function called to convert a character of type `CharType` used by a locale to the corresponding character of type `char` in the native character set.|  \n|[do_scan_is](#ctype__do_scan_is)|A virtual function called to locate the first character in a range that matches a specified mask.|  \n|[do_scan_not](#ctype__do_scan_not)|A virtual function called to locate the first character in a range that does not match a specified mask.|  \n|[do_tolower](#ctype__do_tolower)|A virtual function called to convert a character or a range of characters to their lower case.|  \n|[do_toupper](#ctype__do_toupper)|A virtual function called to convert a character or a range of characters to upper case.|  \n|[do_widen](#ctype__do_widen)|A virtual function called to converts a character of type `char` in the native character set to the corresponding character of type `CharType` used by a locale.|  \n|[is](#ctype__is)|Tests whether a single character has a particular attribute, or classifies the attributes of each character in a range and stores them in an array.|  \n|[narrow](#ctype__narrow)|Converts a character of type `CharType` used by a locale to the corresponding character of type char in the native character set.|  \n|[scan_is](#ctype__scan_is)|Locates the first character in a range that matches a specified mask.|  \n|[scan_not](#ctype__scan_not)|Locates the first character in a range that does not match a specified mask.|  \n|[tolower](#ctype__tolower)|Converts a character or a range of characters to lower case.|  \n|[toupper](#ctype__toupper)|Converts a character or a range of characters to upper case.|  \n|[widen](#ctype__widen)|Converts a character of type `char` in the native character set to the corresponding character of type `CharType` used by a locale.|  \n  \n## Requirements  \n **Header:** \\<locale>  \n  \n **Namespace:** std  \n  \n##  <a name=\"ctype__char_type\"></a>  ctype::char_type  \n A type that describes a character used by a locale.  \n  \n```  \ntypedef CharType char_type;  \n```  \n  \n### Remarks  \n The type is a synonym for the template parameter **CharType**.  \n  \n### Example  \n  See the member function [widen](#ctype__widen) for an example that uses `char_type` as a return value.  \n  \n##  <a name=\"ctype__ctype\"></a>  ctype::ctype  \n Constructor for objects of class ctype that serve as locale facets for characters.  \n  \n```  \nexplicit ctype(size_t _Refs = 0);\n```  \n  \n### Parameters  \n `_Refs`  \n Integer value used to specify the type of memory management for the object.  \n  \n### Remarks  \n The possible values for the `_Refs` parameter and their significance are:  \n  \n-   0: The lifetime of the object is managed by the locales that contain it.  \n  \n-   1: The lifetime of the object must be manually managed.  \n  \n-   \\> 0: These values are not defined.  \n  \n No direct examples are possible, because the destructor is protected.  \n  \n The constructor initializes its `locale::facet` base object with **locale::**[facet](../standard-library/locale-class.md#facet_class)( `_Refs`).  \n  \n##  <a name=\"ctype__do_is\"></a>  ctype::do_is  \n A virtual function called to test whether a single character has a particular attribute, or classify the attributes of each character in a range and stores them in an array.  \n  \n```  \nvirtual bool do_is(\n    mask maskVal,   \n    CharType ch) const;\n\n \nvirtual const CharType *do_is(\n    const CharType* first,   \n    const CharType* last,  \n    mask* dest) const;\n```  \n  \n### Parameters  \n `maskVal`  \n The mask value for which the character is to be tested.  \n  \n `ch`  \n The character whose attributes are to be tested.  \n  \n `first`  \n A pointer to the first character in the range whose attributes are to be classified.  \n  \n `last`  \n A pointer to the character immediately following the last character in the range whose attributes are to be classified.  \n  \n `dest`  \n A pointer to the beginning of the array where the mask values characterizing the attributes of each of the characters are to be stored.  \n  \n### Return Value  \n The first member function returns a Boolean value that is **true** if the character tested has the attribute described by the mask value; **false** if it fails to have the attribute.  \n  \n The second member function returns an array containing the mask values characterizing the attributes of each of the characters in the range.  \n  \n### Remarks  \n The mask values classifying the attributes of the characters are provided by the class [ctype_base](../standard-library/ctype-base-class.md), from which ctype derives. The first member function can accept expressions for its first parameter referred to as bitmasks and formed from the combination of mask values by the logical bitwise operators (&#124; , & , ^ , ~).  \n  \n### Example  \n  See the example for [is](#ctype__is), which calls `do_is`.  \n  \n##  <a name=\"ctype__do_narrow\"></a>  ctype::do_narrow  \n A virtual function called to convert a character of type `CharType` used by a locale to the corresponding character of type `char` in the native character set.  \n  \n```  \nvirtual char do_narrow(\n    CharType ch,   \n    char default = '\\0') const;\n\n \nvirtual const CharType* do_narrow(\n    const CharType* first,   \n    const CharType* last,  \n    char default,   \n    char* dest) const;\n```  \n  \n### Parameters  \n `ch`  \n The character of type `Chartype` used by the locale to be converted.  \n  \n `default`  \n The default value to be assigned by the member function to characters of type `CharType` that do not have counterpart characters of type `char`.  \n  \n `first`  \n A pointer to the first character in the range of characters to be converted.  \n  \n `last`  \n A pointer to the character immediately following the last character in the range of characters to be converted.  \n  \n `dest`  \n A const pointer to the first character of type `char` in the destination range that stores the converted range of characters.  \n  \n### Return Value  \n The first protected member function returns the native character of type char that corresponds to the parameter character of type `CharType` or `default` if no counterpart is defined.  \n  \n The second protected member function returns a pointer to the destination range of native characters converted from characters of type `CharType`.  \n  \n### Remarks  \n The second protected member template function stores in `dest`[ `I`] the value `do_narrow`( `first` [ `I`], `default`), for `I` in the interval [0, `last` – `first`).  \n  \n### Example  \n  See the example for [narrow](#ctype__narrow), which calls `do_narrow`.  \n  \n##  <a name=\"ctype__do_scan_is\"></a>  ctype::do_scan_is  \n A virtual function called to locate the first character in a range that matches a specified mask.  \n  \n```  \nvirtual const CharType *do_scan_is(\n    mask maskVal,   \n    const CharType* first,   \n    const CharType* last) const;\n```  \n  \n### Parameters  \n `maskVal`  \n The mask value to be matched by a character.  \n  \n `first`  \n A pointer to the first character in the range to be scanned.  \n  \n `last`  \n A pointer to the character immediately following the last character in the range to be scanned.  \n  \n### Return Value  \n A pointer to the first character in a range that does match a specified mask. If no such value exists, the function returns `last.`  \n  \n### Remarks  \n The protected member function returns the smallest pointer `ptr` in the range [ `first`, `last`) for which [do_is](#ctype__do_is)( `maskVal`, * `ptr`) is true.  \n  \n### Example  \n  See the example for [scan_is](#ctype__scan_is), which calls `do_scan_is`.  \n  \n##  <a name=\"ctype__do_scan_not\"></a>  ctype::do_scan_not  \n A virtual function called to locate the first character in a range that does not match a specified mask.  \n  \n```  \nvirtual const CharType *do_scan_not(\n    mask maskVal,   \n    const CharType* first,   \n    const CharType* last) const;\n```  \n  \n### Parameters  \n `maskVal`  \n The mask value not to be matched by a character.  \n  \n `first`  \n A pointer to the first character in the range to be scanned.  \n  \n `last`  \n A pointer to the character immediately following the last character in the range to be scanned.  \n  \n### Return Value  \n A pointer to the first character in a range that doesn't match a specified mask. If no such value exists, the function returns `last`.  \n  \n### Remarks  \n The protected member function returns the smallest pointer `ptr` in the range [ `first`, `last`) for which [do_is](#ctype__do_is)( `maskVal`, * `ptr`) is false.  \n  \n### Example  \n  See the example for [scan_not](#ctype__scan_not), which calls `do_scan_not`.  \n  \n##  <a name=\"ctype__do_tolower\"></a>  ctype::do_tolower  \n A virtual function called to convert a character or a range of characters to lower case.  \n  \n```  \nvirtual CharType do_tolower(CharType ch) const;\n\n \nvirtual const CharType *do_tolower(\n    CharType* first,   \n    const CharType* last) const;\n```  \n  \n### Parameters  \n `ch`  \n The character to be converted to lower case.  \n  \n `first`  \n A pointer to the first character in the range of characters whose cases are to be converted.  \n  \n `last`  \n A pointer to the character immediately following the last character in the range of characters whose cases are to be converted.  \n  \n### Return Value  \n The first protected member function returns the lowercase form of the parameter `ch`. If no lowercase form exists, it returns `ch`. The second protected member function returns `last`.  \n  \n### Remarks  \n The second protected member template function replaces each element `first` [ `I`], for `I` in the interval [0, `last` – `first`), with `do_tolower`( `first` [ `I`]).  \n  \n### Example  \n  See the example for [tolower](#ctype__tolower), which calls `do_tolower`.  \n  \n##  <a name=\"ctype__do_toupper\"></a>  ctype::do_toupper  \n A virtual function called to convert a character or a range of characters to upper case.  \n  \n```  \nvirtual CharType do_toupper(CharType ch) const;\n\n \nvirtual const CharType *do_toupper(\n    CharType* first,   \n    const CharType* last) const;\n```  \n  \n### Parameters  \n `ch`  \n The character to be converted to upper case.  \n  \n `first`  \n A pointer to the first character in the range of characters whose cases are to be converted.  \n  \n `last`  \n A pointer to character immediately following the last character in the range of characters whose cases are to be converted.  \n  \n### Return Value  \n The first protected member function returns the uppercase form of the parameter `ch`. If no uppercase form exists, it returns `ch`. The second protected member function returns `last`.  \n  \n### Remarks  \n The second protected member template function replaces each element `first` [ `I`], for `I` in the interval [0, `last` – `first`), with `do_toupper`( `first` [ `I`]).  \n  \n### Example  \n  See the example for [toupper](#ctype__toupper), which calls `do_toupper`.  \n  \n##  <a name=\"ctype__do_widen\"></a>  ctype::do_widen  \n A virtual function called to converts a character of type `char` in the native character set to the corresponding character of type `CharType` used by a locale.  \n  \n```  \nvirtual CharType do_widen(char byte) const;\n\n \nvirtual const char *do_widen(\n    const char* first,   \n    const char* last,   \n    CharType* dest) const;\n```  \n  \n### Parameters  \n `byte`  \n The character of type `char` in the native character set to be converted.  \n  \n `first`  \n A pointer to the first character in the range of characters to be converted.  \n  \n `last`  \n A pointer to the character immediately following the last character in the range of characters to be converted.  \n  \n `dest`  \n A pointer to the first character of type `CharType` in the destination range that stores the converted range of characters.  \n  \n### Return Value  \n The first protected member function returns the character of type `CharType` that corresponds to the parameter character of native type `char`.  \n  \n The second protected member function returns a pointer to the destination range of characters of type `CharType` used by a locale converted from native characters of type `char`.  \n  \n### Remarks  \n The second protected member template function stores in `dest`[ `I`] the value `do_widen`( `first`[ `I`]), for `I` in the interval [0, `last` - `first`).  \n  \n### Example  \n  See the example for [widen](#ctype__widen), which calls `do_widen`.  \n  \n##  <a name=\"ctype__is\"></a>  ctype::is  \n Tests whether a single character has a particular attribute or classifies the attributes of each character in a range and stores them in an array.  \n  \n```  \nbool is(mask maskVal, CharType ch) const;\n\n \nconst CharType *is(\n    const CharType* first,   \n    const CharType* last,  \n    mask* dest) const;\n```  \n  \n### Parameters  \n `maskVal`  \n The mask value for which the character is to be tested.  \n  \n `ch`  \n The character whose attributes are to be tested.  \n  \n `first`  \n A pointer to the first character in the range whose attributes are to be classified.  \n  \n `last`  \n A pointer to the character immediately following the last character in the range whose attributes are to be classified.  \n  \n `dest`  \n A pointer to the beginning of the array where the mask values characterizing the attributes of each of the characters are to be stored.  \n  \n### Return Value  \n The first member function returns `true` if the character tested has the attribute described by the mask value; `false` if it fails to have the attribute.  \n  \n The second member function returns a pointer to the last character in the range whose attributes are to be classified.  \n  \n### Remarks  \n The mask values classifying the attributes of the characters are provided by the class [ctype_base Class](../standard-library/ctype-base-class.md), from which ctype derives. The first member function can accept expressions for its first parameter referred to as bitmasks and formed from the combination of mask values by the logical bitwise operators (&#124; , & , ^ , ~).  \n  \n### Example  \n  \n```cpp  \n// ctype_is.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \nusing namespace std;  \n  \nint main() {  \n   locale loc1 ( \"German_Germany\" ), loc2 ( \"English_Australia\" );  \n  \n   if (use_facet<ctype<char> > ( loc1 ).is( ctype_base::alpha, 'a' ))  \n      cout << \"The character 'a' in locale loc1 is alphabetic.\"   \n           << endl;  \n   else  \n      cout << \"The character 'a' in locale loc1 is not alphabetic.\"   \n           << endl;  \n  \n   if (use_facet<ctype<char> > ( loc2 ).is( ctype_base::alpha, '!' ))  \n      cout << \"The character '!' in locale loc2 is alphabetic.\"   \n           << endl;  \n   else  \n      cout << \"The character '!' in locale loc2 is not alphabetic.\"   \n           << endl;  \n  \n   char *string = \"Hello, my name is John!\";  \n   ctype<char>::mask maskarray[30];  \n   use_facet<ctype<char> > ( loc2 ).is(  \n      string, string + strlen(string), maskarray );  \n   for (unsigned int i = 0; i < strlen(string); i++) {  \n      cout << string[i] << \": \"  \n           << (maskarray[i] & ctype_base::alpha  \"alpha\"  \n                                                : \"not alpha\")  \n           << endl;;  \n   };  \n}  \n```  \n  \n##  <a name=\"ctype__narrow\"></a>  ctype::narrow  \n Converts characters of type `CharType` used by a locale to the corresponding characters of type `char` in the native character set.  \n  \n```  \nchar narrow(CharType ch, char default = '\\0') const;\n\n \nconst CharType* narrow(\n    const CharType* first,   \n    const CharType* last,  \n    char default,   \n    char* dest) const;\n```  \n  \n### Parameters  \n `ch`  \n The character of type `Chartype` used by the locale to be converted.  \n  \n `default`  \n The default value to be assigned by the member function to characters of type `CharType` that do not have counterpart characters of type `char`.  \n  \n `first`  \n A pointer to the first character in the range of characters to be converted.  \n  \n `last`  \n A pointer to the character immediately following the last character in the range of characters to be converted.  \n  \n `dest`  \n A const pointer to the first character of type `char` in the destination range that stores the converted range of characters.  \n  \n### Return Value  \n The first member function returns the native character of type `char` that corresponds to the parameter character of type `CharType``default` if not counterpart is defined.  \n  \n The second member function returns a pointer to the destination range of native characters converted from characters of type `CharType`.  \n  \n### Remarks  \n The first member function returns [do_narrow](#ctype__do_narrow)( `ch`, `default`). The second member function returns [do_narrow](#ctype__do_narrow) ( `first`, `last`, `default`, `dest`). Only the basic source characters are guaranteed to have a unique inverse image `CharType` under `narrow`. For these basic source characters, the following invariant holds: `narrow` ( [widen](#ctype__widen) ( **c** ), 0 ) == **c**.  \n  \n### Example  \n  \n```cpp  \n// ctype_narrow.cpp  \n// compile with: /EHsc /W3  \n#include <locale>  \n#include <iostream>  \nusing namespace std;  \n  \nint main( )  \n{  \n   locale loc1 ( \"english\" );  \n   wchar_t *str1 = L\"\\x0392fhello everyone\";  \n   char str2 [16];  \n   bool result1 = (use_facet<ctype<wchar_t> > ( loc1 ).narrow  \n      ( str1, str1 + wcslen(str1), 'X', &str2[0] ) != 0);  // C4996  \n   str2[wcslen(str1)] = '\\0';  \n   wcout << str1 << endl;  \n   cout << &str2[0] << endl;  \n}  \n```  \n  \n```Output  \nXhello everyone  \n```  \n  \n##  <a name=\"ctype__scan_is\"></a>  ctype::scan_is  \n Locates the first character in a range that matches a specified mask.  \n  \n```  \nconst CharType *scan_is(\n    mask maskVal,   \n    const CharType* first,   \n    const CharType* last) const;\n```  \n  \n### Parameters  \n `maskVal`  \n The mask value to be matched by a character.  \n  \n `first`  \n A pointer to the first character in the range to be scanned.  \n  \n `last`  \n A pointer to the character immediately following the last character in the range to be scanned.  \n  \n### Return Value  \n A pointer to the first character in a range that does match a specified mask. If no such value exists, the function returns `last.`  \n  \n### Remarks  \n The member function returns [do_scan_is](#ctype__do_scan_is)( `maskVal`, `first`, `last`).  \n  \n### Example  \n  \n```cpp  \n// ctype_scan_is.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \nusing namespace std;  \n  \nint main( )     \n{  \n   locale loc1 ( \"German_Germany\" );  \n  \n   char *string = \"Hello, my name is John!\";  \n  \n   const char* i = use_facet<ctype<char> > ( loc1 ).scan_is  \n      ( ctype_base::punct, string, string + strlen(string) );  \n   cout << \"The first punctuation is \\\"\" << *i << \"\\\" at position: \"   \n      << i - string << endl;  \n}  \n```  \n  \n```Output  \nThe first punctuation is \",\" at position: 5  \n```  \n  \n##  <a name=\"ctype__scan_not\"></a>  ctype::scan_not  \n Locates the first character in a range that does not match a specified mask.  \n  \n```  \nconst CharType *scan_not(\n    mask maskVal,   \n    const CharType* first,   \n    const CharType* last) const;\n```  \n  \n### Parameters  \n `maskVal`  \n The mask value not to be matched by a character.  \n  \n `first`  \n A pointer to the first character in the range to be scanned.  \n  \n `last`  \n A pointer to the character immediately following the last character in the range to be scanned.  \n  \n### Return Value  \n A pointer to the first character in a range that does not match a specified mask. If no such value exists, the function returns `last`.  \n  \n### Remarks  \n The member function returns [do_scan_not](#ctype__do_scan_not)( `maskVal`, `first`, `last`).  \n  \n### Example  \n  \n```cpp  \n// ctype_scan_not.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \nusing namespace std;  \n  \nint main( )     \n{  \n   locale loc1 ( \"German_Germany\" );  \n  \n   char *string = \"Hello, my name is John!\";  \n  \n   const char* i = use_facet<ctype<char> > ( loc1 ).scan_not  \n      ( ctype_base::alpha, string, string + strlen(string) );  \n   cout << \"First nonalpha character is \\\"\" << *i << \"\\\" at position: \"   \n      << i - string << endl;  \n}  \n```  \n  \n```Output  \nFirst nonalpha character is \",\" at position: 5  \n```  \n  \n##  <a name=\"ctype__tolower\"></a>  ctype::tolower  \n Converts a character or a range of characters to lower case.  \n  \n```  \nCharType tolower(CharType ch) const;\n\n \nconst CharType *tolower(CharType* first, const CharType* last) const;\n```  \n  \n### Parameters  \n `ch`  \n The character to be converted to lower case.  \n  \n `first`  \n A pointer to the first character in the range of characters whose cases are to be converted.  \n  \n `last`  \n A pointer to the character immediately following the last character in the range of characters whose cases are to be converted.  \n  \n### Return Value  \n The first member function returns the lowercase form of the parameter `ch`. If no lowercase form exists, it returns `ch`.  \n  \n The second member function returns `last`.  \n  \n### Remarks  \n The first member function returns [do_tolower](#ctype__do_tolower)( `ch`). The second member function returns [do_tolower](#ctype__do_tolower)( `first`, `last`).  \n  \n### Example  \n  \n```cpp  \n// ctype_tolower.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \nusing namespace std;  \n  \nint main( )  \n{  \n   locale loc1 ( \"German_Germany\" );  \n  \n   char string[] = \"HELLO, MY NAME IS JOHN\";  \n  \n   use_facet<ctype<char> > ( loc1 ).tolower  \n      ( string, string + strlen(string) );  \n   cout << \"The lowercase string is: \" << string << endl;  \n}  \n```  \n  \n```Output  \nThe lowercase string is: hello, my name is john  \n```  \n  \n##  <a name=\"ctype__toupper\"></a>  ctype::toupper  \n Converts a character or a range of characters to upper case.  \n  \n```  \nCharType toupper(CharType ch) const; \nconst CharType *toupper(CharType* first, const CharType* last) const;\n```  \n  \n### Parameters  \n `ch`  \n The character to be converted to uppercase.  \n  \n `first`  \n A pointer to the first character in the range of characters whose cases are to be converted.  \n  \n `last`  \n A pointer to the character immediately following the last character in the range of characters whose cases are to be converted.  \n  \n### Return Value  \n The first member function returns the uppercase form of the parameter `ch`. If no uppercase form exists, it returns `ch`.  \n  \n The second member function returns `last`.  \n  \n### Remarks  \n The first member function returns [do_toupper](#ctype__do_toupper)( `ch`). The second member function returns [do_toupper](#ctype__do_toupper)( `first`, `last`).  \n  \n### Example  \n  \n```cpp  \n// ctype_toupper.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \nusing namespace std;  \n  \nint main( )     \n{  \n   locale loc1 ( \"German_Germany\" );  \n  \n   char string[] = \"Hello, my name is John\";  \n  \n   use_facet<ctype<char> > ( loc1 ).toupper  \n      ( string, string + strlen(string) );  \n   cout << \"The uppercase string is: \" << string << endl;  \n}  \n```  \n  \n```Output  \nThe uppercase string is: HELLO, MY NAME IS JOHN  \n```  \n  \n##  <a name=\"ctype__widen\"></a>  ctype::widen  \n Converts a character of type `char` in the native character set to the corresponding character of type `CharType` used by a locale.  \n  \n```  \nCharType widen(char byte) const; \nconst char *widen(const char* first, const char* last, CharType* dest) const;\n```  \n  \n### Parameters  \n `byte`  \n The character of type char in the native character set to be converted.  \n  \n `first`  \n A pointer to the first character in the range of characters to be converted.  \n  \n `last`  \n A pointer to the character immediately following the last character in the range of characters to be converted.  \n  \n `dest`  \n A pointer to the first character of type `CharType` in the destination range that stores the converted range of characters.  \n  \n### Return Value  \n The first member function returns the character of type `CharType` that corresponds to the parameter character of native type `char`.  \n  \n The second member function returns a pointer to the destination range of characters of type `CharType` used by a locale converted from native characters of type `char`.  \n  \n### Remarks  \n The first member function returns [do_widen](#ctype__do_widen)( `byte`). The second member function returns [do_widen](#ctype__do_widen)( `first`, `last`, `dest`).  \n  \n### Example  \n  \n```cpp  \n// ctype_widen.cpp  \n// compile with: /EHsc /W3  \n#include <locale>  \n#include <iostream>  \nusing namespace std;  \n  \nint main( )  \n{  \n   locale loc1 ( \"English\" );  \n   char *str1 = \"Hello everyone!\";  \n   wchar_t str2 [16];  \n   bool result1 = (use_facet<ctype<wchar_t> > ( loc1 ).widen  \n      ( str1, str1 + strlen(str1), &str2[0] ) != 0);  // C4996  \n   str2[strlen(str1)] = '\\0';  \n   cout << str1 << endl;  \n   wcout << &str2[0] << endl;  \n  \n   ctype<wchar_t>::char_type charT;  \n   charT = use_facet<ctype<char> > ( loc1 ).widen( 'a' );  \n}  \n```  \n  \n```Output  \nHello everyone!  \nHello everyone!  \n```  \n  \n## See Also  \n [\\<locale>](../standard-library/locale.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)\n\n"}