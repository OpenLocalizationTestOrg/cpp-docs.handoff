{"nodes":[{"pos":[12,54],"content":"_CrtDoForAllClientObjects | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_CrtDoForAllClientObjects | Microsoft Docs","pos":[0,42]}]},{"content":"_CrtDoForAllClientObjects","pos":[1049,1074]},{"pos":[1075,1177],"content":"Calls an application-supplied function for all <ph id=\"ph1\">`_CLIENT_BLOCK`</ph> types in the heap (debug version only).","source":"Calls an application-supplied function for all `_CLIENT_BLOCK` types in the heap (debug version only)."},{"content":"Syntax","pos":[1186,1192]},{"content":"Parameters","pos":[1316,1326]},{"content":"Pointer to the application-supplied function callback function.","pos":[1339,1402]},{"content":"The first parameter to this function points to the data.","pos":[1403,1459]},{"content":"The second parameter is the context pointer that is passed to the call to <ph id=\"ph1\">`_CrtDoForAllClientObjects`</ph>.","pos":[1460,1562],"source":" The second parameter is the context pointer that is passed to the call to `_CrtDoForAllClientObjects`."},{"content":"Pointer to the application-supplied context to pass to the application-supplied function.","pos":[1582,1671]},{"content":"Remarks","pos":[1680,1687]},{"content":"The <ph id=\"ph1\">`_CrtDoForAllClientObjects`</ph> function searches the heap's linked list for memory blocks with the <ph id=\"ph2\">`_CLIENT_BLOCK`</ph> type and calls the application-supplied function when a block of this type is found.","pos":[1691,1891],"source":"The `_CrtDoForAllClientObjects` function searches the heap's linked list for memory blocks with the `_CLIENT_BLOCK` type and calls the application-supplied function when a block of this type is found."},{"content":"The found block and the <ph id=\"ph1\">`context`</ph> parameter are passed as arguments to the application-supplied function.","pos":[1892,1997],"source":" The found block and the `context` parameter are passed as arguments to the application-supplied function."},{"content":"During debugging, an application can track a specific group of allocations by explicitly calling the debug heap functions to allocate the memory and specifying that the blocks be assigned the <ph id=\"ph1\">`_CLIENT_BLOCK`</ph> block type.","pos":[1998,2217],"source":" During debugging, an application can track a specific group of allocations by explicitly calling the debug heap functions to allocate the memory and specifying that the blocks be assigned the `_CLIENT_BLOCK` block type."},{"content":"These blocks can then be tracked separately and reported on differently during leak detection and memory state reporting.","pos":[2218,2339]},{"content":"If the <ph id=\"ph1\">`_CRTDBG_ALLOC_MEM_DF`</ph> bit field of the <bpt id=\"p1\">[</bpt>_crtDbgFlag<ept id=\"p1\">](../../c-runtime-library/crtdbgflag.md)</ept> flag is not turned on, <ph id=\"ph2\">`_CrtDoForAllClientObjects`</ph> immediately returns.","pos":[2346,2517],"source":"If the `_CRTDBG_ALLOC_MEM_DF` bit field of the [_crtDbgFlag](../../c-runtime-library/crtdbgflag.md) flag is not turned on, `_CrtDoForAllClientObjects` immediately returns."},{"content":"When <bpt id=\"p1\">[</bpt>_DEBUG<ept id=\"p1\">](../../c-runtime-library/debug.md)</ept> is not defined, calls to <ph id=\"ph1\">`_CrtDoForAllClientObjects`</ph> are removed during preprocessing.","pos":[2518,2652],"source":" When [_DEBUG](../../c-runtime-library/debug.md) is not defined, calls to `_CrtDoForAllClientObjects` are removed during preprocessing."},{"content":"For more information about the <ph id=\"ph1\">`_CLIENT_BLOCK`</ph> type and how it can be used by other debug functions, see <bpt id=\"p1\">[</bpt>Types of blocks on the debug heap<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","pos":[2659,2847],"source":"For more information about the `_CLIENT_BLOCK` type and how it can be used by other debug functions, see [Types of blocks on the debug heap](/visualstudio/debugger/crt-debug-heap-details)."},{"content":"For information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see <bpt id=\"p1\">[</bpt>CRT Debug Heap Details<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","pos":[2848,3043],"source":" For information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see [CRT Debug Heap Details](/visualstudio/debugger/crt-debug-heap-details)."},{"content":"If <ph id=\"ph1\">`pfn`</ph> is <ph id=\"ph2\">`NULL`</ph>, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[3050,3200],"source":"If `pfn` is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, <bpt id=\"p1\">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept> is set to <ph id=\"ph1\">`EINVAL`</ph> and the function returns.","pos":[3201,3398],"source":" If execution is allowed to continue, [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md) is set to `EINVAL` and the function returns."},{"content":"Requirements","pos":[3407,3419]},{"content":"Routine","pos":[3426,3433]},{"content":"Required header","pos":[3434,3449]},{"content":"crtdbg.h&gt;, <ph id=\"ph1\">\\&lt;</ph>errno.h&gt;","pos":[3524,3545],"source":"crtdbg.h>, \\<errno.h>"},{"pos":[3553,3671],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[3678,3748],"content":"<bpt id=\"p1\">**</bpt>Libraries:<ept id=\"p1\">**</ept> Debug versions of  universal C run-time libraries only.","source":"**Libraries:** Debug versions of  universal C run-time libraries only."},{"content":".NET Framework Equivalent","pos":[3757,3782]},{"content":"Not applicable.","pos":[3786,3801]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[3802,3849],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[3850,3975],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[3984,3992]},{"content":"Debug Routines","pos":[3997,4011]},{"content":"_CrtSetDbgFlag","pos":[4061,4075]},{"content":"Heap State Reporting Functions","pos":[4134,4164]},{"content":"_CrtReportBlockType","pos":[4218,4237]}],"content":"---\ntitle: \"_CrtDoForAllClientObjects | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_CrtDoForAllClientObjects\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_CrtDoForAllClientObjects\"\n  - \"CrtDoForAllClientObjects\"\n  - \"crtdbg/_CrdDoForAllClientObjects\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_CrtDoForAllClientObjects function\"\n  - \"CrtDoForAllClientObjects function\"\nms.assetid: d0fdb835-3cdc-45f1-9a21-54208e8df248\ncaps.latest.revision: 18\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _CrtDoForAllClientObjects\nCalls an application-supplied function for all `_CLIENT_BLOCK` types in the heap (debug version only).  \n  \n## Syntax  \n  \n```  \nvoid _CrtDoForAllClientObjects(   \n   void ( * pfn )( void *, void * ),  \n   void *context  \n);  \n```  \n  \n#### Parameters  \n `pfn`  \n Pointer to the application-supplied function callback function. The first parameter to this function points to the data. The second parameter is the context pointer that is passed to the call to `_CrtDoForAllClientObjects`.  \n  \n `context`  \n Pointer to the application-supplied context to pass to the application-supplied function.  \n  \n## Remarks  \n The `_CrtDoForAllClientObjects` function searches the heap's linked list for memory blocks with the `_CLIENT_BLOCK` type and calls the application-supplied function when a block of this type is found. The found block and the `context` parameter are passed as arguments to the application-supplied function. During debugging, an application can track a specific group of allocations by explicitly calling the debug heap functions to allocate the memory and specifying that the blocks be assigned the `_CLIENT_BLOCK` block type. These blocks can then be tracked separately and reported on differently during leak detection and memory state reporting.  \n  \n If the `_CRTDBG_ALLOC_MEM_DF` bit field of the [_crtDbgFlag](../../c-runtime-library/crtdbgflag.md) flag is not turned on, `_CrtDoForAllClientObjects` immediately returns. When [_DEBUG](../../c-runtime-library/debug.md) is not defined, calls to `_CrtDoForAllClientObjects` are removed during preprocessing.  \n  \n For more information about the `_CLIENT_BLOCK` type and how it can be used by other debug functions, see [Types of blocks on the debug heap](/visualstudio/debugger/crt-debug-heap-details). For information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see [CRT Debug Heap Details](/visualstudio/debugger/crt-debug-heap-details).  \n  \n If `pfn` is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md) is set to `EINVAL` and the function returns.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_CrtDoForAllClientObjects`|\\<crtdbg.h>, \\<errno.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n **Libraries:** Debug versions of  universal C run-time libraries only.  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Debug Routines](../../c-runtime-library/debug-routines.md)   \n [_CrtSetDbgFlag](../../c-runtime-library/reference/crtsetdbgflag.md)   \n [Heap State Reporting Functions](/visualstudio/debugger/crt-debug-heap-details)   \n [_CrtReportBlockType](../../c-runtime-library/reference/crtreportblocktype.md)"}