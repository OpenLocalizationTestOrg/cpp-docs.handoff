{"nodes":[{"pos":[12,58],"content":"hash_multimap::swap (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"hash_multimap::swap (STL-CLR) | Microsoft Docs","pos":[0,46]}]},{"content":"hash_multimap::swap (STL/CLR)","pos":[639,668]},{"content":"Swaps the contents of two containers.","pos":[669,706]},{"content":"Syntax","pos":[715,721]},{"content":"Parameters","pos":[795,805]},{"content":"right","pos":[809,814]},{"content":"Container to swap contents with.","pos":[818,850]},{"content":"Remarks","pos":[859,866]},{"content":"The member function swaps the controlled sequences between <ph id=\"ph1\">`this`</ph> and <ph id=\"ph2\">`right`</ph>.","pos":[870,948],"source":"The member function swaps the controlled sequences between `this` and `right`."},{"content":"It does so in constant time and it throws no exceptions.","pos":[949,1005]},{"content":"You use it as a quick way to exchange the contents of two containers.","pos":[1006,1075]},{"content":"Example","pos":[1084,1091]},{"content":"Requirements","pos":[2658,2670]},{"pos":[2674,2704],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/hash_map&gt;","source":"**Header:** \\<cliext/hash_map>"},{"pos":[2711,2732],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2741,2749]},{"content":"hash_multimap (STL/CLR)","pos":[2754,2777]},{"content":"hash_multimap::operator= (STL/CLR)","pos":[2820,2854]}],"content":"---\ntitle: \"hash_multimap::swap (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::hash_multimap::swap\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"swap member [STL/CLR]\"\nms.assetid: 4baa60c2-865a-4e17-acd5-01b7c3c5cd44\ncaps.latest.revision: 14\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# hash_multimap::swap (STL/CLR)\nSwaps the contents of two containers.  \n  \n## Syntax  \n  \n```  \nvoid swap(hash_multimap<Key, Mapped>% right);  \n```  \n  \n#### Parameters  \n right  \n Container to swap contents with.  \n  \n## Remarks  \n The member function swaps the controlled sequences between `this` and `right`. It does so in constant time and it throws no exceptions. You use it as a quick way to exchange the contents of two containers.  \n  \n## Example  \n  \n```  \n// cliext_hash_multimap_swap.cpp   \n// compile with: /clr   \n#include <cliext/hash_map>   \n  \ntypedef cliext::hash_multimap<wchar_t, int> Myhash_multimap;   \nint main()   \n    {   \n    Myhash_multimap c1;   \n    c1.insert(Myhash_multimap::make_value(L'a', 1));   \n    c1.insert(Myhash_multimap::make_value(L'b', 2));   \n    c1.insert(Myhash_multimap::make_value(L'c', 3));   \n  \n// display contents \" [a 1] [b 2] [c 3]\"   \n    for each (Myhash_multimap::value_type elem in c1)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n  \n// construct another container with repetition of values   \n    Myhash_multimap c2;   \n    c2.insert(Myhash_multimap::make_value(L'd', 4));   \n    c2.insert(Myhash_multimap::make_value(L'e', 5));   \n    c2.insert(Myhash_multimap::make_value(L'f', 6));   \n    for each (Myhash_multimap::value_type elem in c2)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n  \n// swap and redisplay   \n    c1.swap(c2);   \n    for each (Myhash_multimap::value_type elem in c1)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n  \n    for each (Myhash_multimap::value_type elem in c2)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n[a 1] [b 2] [c 3]  \n[d 4] [e 5] [f 6]  \n[d 4] [e 5] [f 6]  \n[a 1] [b 2] [c 3]  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/hash_map>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [hash_multimap (STL/CLR)](../dotnet/hash-multimap-stl-clr.md)   \n [hash_multimap::operator= (STL/CLR)](../dotnet/hash-multimap-operator-assign-stl-clr.md)"}