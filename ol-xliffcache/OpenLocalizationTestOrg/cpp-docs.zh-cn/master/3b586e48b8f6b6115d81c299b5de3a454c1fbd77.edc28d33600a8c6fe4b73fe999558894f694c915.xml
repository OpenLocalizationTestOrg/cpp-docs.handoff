{"nodes":[{"pos":[12,44],"content":"_bstr_t::Assign | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_bstr_t::Assign | Microsoft Docs","pos":[0,32]}]},{"content":"_bstr_t::Assign","pos":[613,628]},{"content":"Microsoft Specific","pos":[631,649]},{"pos":[658,717],"content":"Copies a <ph id=\"ph1\">`BSTR`</ph> into the <ph id=\"ph2\">`BSTR`</ph> wrapped by a <bpt id=\"p1\">**</bpt>_<ept id=\"p1\">**</ept><ph id=\"ph3\">`bstr_t`</ph>.","source":"Copies a `BSTR` into the `BSTR` wrapped by a **_**`bstr_t`."},{"content":"Syntax","pos":[726,732]},{"content":"Parameters","pos":[790,800]},{"content":"A <ph id=\"ph1\">`BSTR`</ph> to be copied into the <ph id=\"ph2\">`BSTR`</ph> wrapped by a <ph id=\"ph3\">`_bstr_t`</ph>.","pos":[811,872],"source":" A `BSTR` to be copied into the `BSTR` wrapped by a `_bstr_t`."},{"content":"Remarks","pos":[881,888]},{"pos":[901,998],"content":"does a binary copy, which means the entire length of the <ph id=\"ph1\">`BSTR`</ph> is copied, regardless of content.","source":" does a binary copy, which means the entire length of the `BSTR` is copied, regardless of content."},{"content":"Example","pos":[1007,1014]},{"content":"END Microsoft Specific","pos":[3076,3098]},{"content":"See Also","pos":[3107,3115]},{"content":"_bstr_t Class","pos":[3120,3133]}],"content":"---\ntitle: \"_bstr_t::Assign | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"_bstr_t::Assign\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"Assign method\"\nms.assetid: 2e209bbe-77ca-4598-86d5-6c2ea213f43c\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _bstr_t::Assign\n**Microsoft Specific**  \n  \n Copies a `BSTR` into the `BSTR` wrapped by a **_**`bstr_t`.  \n  \n## Syntax  \n  \n```  \nvoid Assign(  \n   BSTR s  \n);  \n```  \n  \n#### Parameters  \n `s`  \n A `BSTR` to be copied into the `BSTR` wrapped by a `_bstr_t`.  \n  \n## Remarks  \n `Assign` does a binary copy, which means the entire length of the `BSTR` is copied, regardless of content.  \n  \n## Example  \n  \n```  \n// _bstr_t_Assign.cpp  \n  \n#include <comdef.h>  \n#include <stdio.h>  \n  \nint main()  \n{  \n    // creates a _bstr_t wrapper  \n    _bstr_t bstrWrapper;   \n  \n    // creates BSTR and attaches to it  \n    bstrWrapper = \"some text\";  \n    wprintf_s(L\"bstrWrapper = %s\\n\",  \n              static_cast<wchar_t*>(bstrWrapper));  \n  \n    // bstrWrapper releases its BSTR  \n    BSTR bstr = bstrWrapper.Detach();  \n    wprintf_s(L\"bstrWrapper = %s\\n\",   \n              static_cast<wchar_t*>(bstrWrapper));  \n    // \"some text\"   \n    wprintf_s(L\"bstr = %s\\n\", bstr);  \n  \n    bstrWrapper.Attach(SysAllocString(OLESTR(\"SysAllocedString\")));  \n    wprintf_s(L\"bstrWrapper = %s\\n\",   \n              static_cast<wchar_t*>(bstrWrapper));  \n  \n    // assign a BSTR to our _bstr_t  \n    bstrWrapper.Assign(bstr);  \n    wprintf_s(L\"bstrWrapper = %s\\n\",   \n              static_cast<wchar_t*>(bstrWrapper));  \n  \n    // done with BSTR, do manual cleanup  \n    SysFreeString(bstr);  \n  \n    // resuse bstr  \n    bstr= SysAllocString(OLESTR(\"Yet another string\"));  \n    // two wrappers, one BSTR   \n    _bstr_t bstrWrapper2 = bstrWrapper;     \n  \n    *bstrWrapper.GetAddress() = bstr;  \n  \n    // bstrWrapper and bstrWrapper2 do still point to BSTR  \n    bstr = 0;     \n    wprintf_s(L\"bstrWrapper = %s\\n\",   \n              static_cast<wchar_t*>(bstrWrapper));  \n    wprintf_s(L\"bstrWrapper2 = %s\\n\",   \n              static_cast<wchar_t*>(bstrWrapper2));  \n  \n    // new value into BSTR  \n    _snwprintf_s(bstrWrapper.GetBSTR(), 100, bstrWrapper.length(),  \n                 L\"changing BSTR\");     \n    wprintf_s(L\"bstrWrapper = %s\\n\",   \n              static_cast<wchar_t*>(bstrWrapper));  \n    wprintf_s(L\"bstrWrapper2 = %s\\n\",   \n              static_cast<wchar_t*>(bstrWrapper2));  \n}  \n```  \n  \n```Output  \nbstrWrapper = some text  \nbstrWrapper = (null)  \nbstr = some text  \nbstrWrapper = SysAllocedString  \nbstrWrapper = some text  \nbstrWrapper = Yet another string  \nbstrWrapper2 = some text  \nbstrWrapper = changing BSTR  \nbstrWrapper2 = some text  \n```  \n  \n## END Microsoft Specific  \n  \n## See Also  \n [_bstr_t Class](../cpp/bstr-t-class.md)"}