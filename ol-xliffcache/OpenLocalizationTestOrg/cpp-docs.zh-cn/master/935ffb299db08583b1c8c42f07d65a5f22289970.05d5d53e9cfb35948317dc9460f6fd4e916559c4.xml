{"nodes":[{"pos":[12,40],"content":"CFile Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CFile Class | Microsoft Docs","pos":[0,28]}]},{"content":"CFile Class","pos":[659,670]},{"content":"The base class for Microsoft Foundation Class file classes.","pos":[671,730]},{"content":"Syntax","pos":[739,745]},{"content":"Members","pos":[800,807]},{"content":"Public Constructors","pos":[817,836]},{"content":"Name","pos":[843,847]},{"content":"Description","pos":[848,859]},{"content":"CFile::CFile","pos":[898,910]},{"pos":[927,982],"content":"Constructs a <ph id=\"ph1\">`CFile`</ph> object from a path or file handle.","source":"Constructs a `CFile` object from a path or file handle."},{"content":"Public Methods","pos":[993,1007]},{"content":"Name","pos":[1014,1018]},{"content":"Description","pos":[1019,1030]},{"content":"CFile::Abort","pos":[1069,1081]},{"content":"Closes a file ignoring all warnings and errors.","pos":[1098,1145]},{"content":"CFile::Close","pos":[1151,1163]},{"content":"Closes a file and deletes the object.","pos":[1180,1217]},{"content":"CFile::Duplicate","pos":[1223,1239]},{"content":"Constructs a duplicate object based on this file.","pos":[1260,1309]},{"content":"CFile::Flush","pos":[1315,1327]},{"content":"Flushes any data yet to be written.","pos":[1344,1379]},{"content":"CFile::GetFileName","pos":[1385,1403]},{"content":"Retrieves the filename of the selected file.","pos":[1426,1470]},{"content":"CFile::GetFilePath","pos":[1476,1494]},{"content":"Retrieves the full file path of the selected file.","pos":[1517,1567]},{"content":"CFile::GetFileTitle","pos":[1573,1592]},{"content":"Retrieves the title of the selected file.","pos":[1616,1657]},{"content":"CFile::GetLength","pos":[1663,1679]},{"content":"Retrieves the length of the file.","pos":[1700,1733]},{"content":"CFile::GetPosition","pos":[1739,1757]},{"content":"Retrieves the current file pointer.","pos":[1780,1815]},{"content":"CFile::GetStatus","pos":[1821,1837]},{"content":"Retrieves the status of the open file, or in the static version, retrieves the status of the specified file (static, virtual function).","pos":[1858,1993]},{"content":"CFile::LockRange","pos":[1999,2015]},{"content":"Locks a range of bytes in a file.","pos":[2036,2069]},{"content":"CFile::Open","pos":[2075,2086]},{"content":"Safely opens a file with an error-testing option.","pos":[2102,2151]},{"content":"CFile::Read","pos":[2157,2168]},{"content":"Reads (unbuffered) data from a file at the current file position.","pos":[2184,2249]},{"content":"CFile::Remove","pos":[2255,2268]},{"content":"Deletes the specified file (static function).","pos":[2286,2331]},{"content":"CFile::Rename","pos":[2337,2350]},{"content":"Renames the specified file (static function).","pos":[2368,2413]},{"content":"CFile::Seek","pos":[2419,2430]},{"content":"Positions the current file pointer.","pos":[2446,2481]},{"content":"CFile::SeekToBegin","pos":[2487,2505]},{"content":"Positions the current file pointer at the beginning of the file.","pos":[2528,2592]},{"content":"CFile::SeekToEnd","pos":[2598,2614]},{"content":"Positions the current file pointer at the end of the file.","pos":[2635,2693]},{"content":"CFile::SetFilePath","pos":[2699,2717]},{"content":"Sets the full file path of the selected file.","pos":[2740,2785]},{"content":"CFile::SetLength","pos":[2791,2807]},{"content":"Changes the length of the file.","pos":[2828,2859]},{"content":"CFile::SetStatus","pos":[2865,2881]},{"content":"Sets the status of the specified file (static, virtual function).","pos":[2902,2967]},{"content":"CFile::UnlockRange","pos":[2973,2991]},{"content":"Unlocks a range of bytes in a file.","pos":[3014,3049]},{"content":"CFile::Write","pos":[3055,3067]},{"content":"Writes (unbuffered) data in a file to the current file position.","pos":[3084,3148]},{"content":"Public Operators","pos":[3159,3175]},{"content":"Name","pos":[3182,3186]},{"content":"Description","pos":[3187,3198]},{"content":"CFile::operator HANDLE","pos":[3237,3259]},{"pos":[3286,3315],"content":"A handle to a <ph id=\"ph1\">`CFile`</ph> object.","source":"A handle to a `CFile` object."},{"content":"Public Data Members","pos":[3326,3345]},{"content":"Name","pos":[3352,3356]},{"content":"Description","pos":[3357,3368]},{"content":"CFile::hFileNull","pos":[3407,3423]},{"pos":[3444,3496],"content":"Determines if the <ph id=\"ph1\">`CFile`</ph> object has a valid handle.","source":"Determines if the `CFile` object has a valid handle."},{"content":"CFile::m_hFile","pos":[3502,3516]},{"content":"Usually contains the operating-system file handle.","pos":[3535,3585]},{"content":"Protected Data Members","pos":[3596,3618]},{"content":"Name","pos":[3625,3629]},{"content":"Description","pos":[3630,3641]},{"content":"CFile::m_pTM","pos":[3680,3692]},{"pos":[3709,3752],"content":"Pointer to <ph id=\"ph1\">`CAtlTransactionManager`</ph> object.","source":"Pointer to `CAtlTransactionManager` object."},{"content":"Remarks","pos":[3762,3769]},{"content":"It directly provides unbuffered, binary disk input/output services, and it indirectly supports text files and memory files through its derived classes.","pos":[3773,3924]},{"content":"works in conjunction with the <ph id=\"ph1\">`CArchive`</ph> class to support serialization of Microsoft Foundation Class objects.","pos":[3933,4043],"source":" works in conjunction with the `CArchive` class to support serialization of Microsoft Foundation Class objects."},{"content":"The hierarchical relationship between this class and its derived classes allows your program to operate on all file objects through the polymorphic <ph id=\"ph1\">`CFile`</ph> interface.","pos":[4050,4216],"source":"The hierarchical relationship between this class and its derived classes allows your program to operate on all file objects through the polymorphic `CFile` interface."},{"content":"A memory file, for example, behaves like a disk file.","pos":[4217,4270]},{"content":"Use <ph id=\"ph1\">`CFile`</ph> and its derived classes for general-purpose disk I/O.","pos":[4277,4342],"source":"Use `CFile` and its derived classes for general-purpose disk I/O."},{"content":"Use <ph id=\"ph1\">`ofstream`</ph> or other Microsoft iostream classes for formatted text sent to a disk file.","pos":[4343,4433],"source":" Use `ofstream` or other Microsoft iostream classes for formatted text sent to a disk file."},{"content":"Normally, a disk file is opened automatically on <ph id=\"ph1\">`CFile`</ph> construction and closed on destruction.","pos":[4440,4536],"source":"Normally, a disk file is opened automatically on `CFile` construction and closed on destruction."},{"content":"Static member functions permit you to interrogate a file's status without opening the file.","pos":[4537,4628]},{"pos":[4635,4831],"content":"For more information on using <ph id=\"ph1\">`CFile`</ph>, see the articles <bpt id=\"p1\">[</bpt>Files in MFC<ept id=\"p1\">](../../mfc/files-in-mfc.md)</ept> and <bpt id=\"p2\">[</bpt>File Handling<ept id=\"p2\">](../../c-runtime-library/file-handling.md)</ept> in the <bpt id=\"p3\">*</bpt>Run-Time Library Reference<ept id=\"p3\">*</ept>.","source":"For more information on using `CFile`, see the articles [Files in MFC](../../mfc/files-in-mfc.md) and [File Handling](../../c-runtime-library/file-handling.md) in the *Run-Time Library Reference*."},{"content":"Inheritance Hierarchy","pos":[4840,4861]},{"content":"CObject","pos":[4866,4873]},{"content":"Requirements","pos":[4935,4947]},{"pos":[4951,4968],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afx.h","source":"**Header:** afx.h"},{"pos":[5007,5019],"content":"CFile::Abort"},{"content":"Closes the file associated with this object and makes the file unavailable for reading or writing.","pos":[5023,5121]},{"content":"Remarks","pos":[5168,5175]},{"content":"If you have not closed the file before destroying the object, the destructor closes it for you.","pos":[5179,5274]},{"content":"When handling exceptions, <ph id=\"ph1\">`CFile::Abort`</ph> differs from <ph id=\"ph2\">`CFile::Close`</ph> in two important ways.","pos":[5281,5372],"source":"When handling exceptions, `CFile::Abort` differs from `CFile::Close` in two important ways."},{"content":"First, the <bpt id=\"p1\">**</bpt>Abort<ept id=\"p1\">**</ept> function will not throw an exception on failures because failures are ignored by <bpt id=\"p2\">**</bpt>Abort<ept id=\"p2\">**</ept>.","pos":[5373,5485],"source":" First, the **Abort** function will not throw an exception on failures because failures are ignored by **Abort**."},{"content":"Second, <bpt id=\"p1\">**</bpt>Abort<ept id=\"p1\">**</ept> will not <bpt id=\"p2\">**</bpt>ASSERT<ept id=\"p2\">**</ept> if the file has not been opened or was closed previously.","pos":[5486,5581],"source":" Second, **Abort** will not **ASSERT** if the file has not been opened or was closed previously."},{"content":"If you used <bpt id=\"p1\">**</bpt>new<ept id=\"p1\">**</ept> to allocate the <ph id=\"ph1\">`CFile`</ph> object on the heap, then you must delete it after closing the file.","pos":[5588,5699],"source":"If you used **new** to allocate the `CFile` object on the heap, then you must delete it after closing the file."},{"content":"<bpt id=\"p1\">**</bpt>Abort<ept id=\"p1\">**</ept> sets <ph id=\"ph1\">`m_hFile`</ph> to <ph id=\"ph2\">`CFile::hFileNull`</ph>.","pos":[5700,5747],"source":"**Abort** sets `m_hFile` to `CFile::hFileNull`."},{"content":"Example","pos":[5757,5764]},{"pos":[5779,5793],"content":"NVC_MFCFiles#5"},{"pos":[5900,5912],"content":"CFile::CFile"},{"pos":[5916,5960],"content":"Constructs and initializes a <ph id=\"ph1\">`CFile`</ph> object.","source":"Constructs and initializes a `CFile` object."},{"content":"Parameters","pos":[6196,6206]},{"content":"Handle of a file to attach to the <ph id=\"ph1\">`CFile`</ph> object.","pos":[6221,6270],"source":" Handle of a file to attach to the `CFile` object."},{"content":"Relative or full path of a file to attach to the <ph id=\"ph1\">`CFile`</ph> object.","pos":[6295,6359],"source":" Relative or full path of a file to attach to the `CFile` object."},{"content":"Bitwise combination (OR) of file access options for the specified file.","pos":[6382,6453]},{"content":"See the Remarks section for possible options.","pos":[6454,6499]},{"content":"Pointer to CAtlTransactionManager object","pos":[6515,6555]},{"content":"Remarks","pos":[6565,6572]},{"pos":[6576,6659],"content":"The following five tables list the possible options for the <ph id=\"ph1\">`nOpenFlags`</ph> parameter.","source":"The following five tables list the possible options for the `nOpenFlags` parameter."},{"content":"Choose only one of the following file access mode options.","pos":[6666,6724]},{"content":"The default file access mode is <ph id=\"ph1\">`CFile::modeRead`</ph>, which is read only.","pos":[6725,6795],"source":" The default file access mode is `CFile::modeRead`, which is read only."},{"content":"Value","pos":[6802,6807]},{"content":"Description","pos":[6808,6819]},{"content":"Requests read access only.","pos":[6876,6902]},{"content":"Requests write access only.","pos":[6926,6953]},{"content":"Requests read and write access.","pos":[6981,7012]},{"content":"Choose one of the following character mode options.","pos":[7020,7071]},{"content":"Value","pos":[7078,7083]},{"content":"Description","pos":[7084,7095]},{"content":"Sets binary mode (used in derived classes only).","pos":[7154,7202]},{"content":"Sets text mode with special processing for carriage return–linefeed pairs (used in derived classes only).","pos":[7225,7330]},{"content":"Sets Unicode mode (used in derived classes only).","pos":[7356,7405]},{"content":"Text is written to the file in Unicode format when the application is built in a Unicode configuration.","pos":[7406,7509]},{"content":"No BOM is written to the file.","pos":[7510,7540]},{"content":"Choose only one of the following file share mode options.","pos":[7548,7605]},{"content":"The default file share mode is <ph id=\"ph1\">`CFile::shareExclusive`</ph>, which is exclusive.","pos":[7606,7681],"source":" The default file share mode is `CFile::shareExclusive`, which is exclusive."},{"content":"Value","pos":[7688,7693]},{"content":"Description","pos":[7694,7705]},{"content":"No sharing restrictions.","pos":[7767,7791]},{"content":"Denies read access to all others.","pos":[7819,7852]},{"content":"Denies write access to all others.","pos":[7881,7915]},{"content":"Denies read and write access to all others.","pos":[7944,7987]},{"content":"Choose the first, or both, of the following file creation mode options.","pos":[7995,8066]},{"content":"The default creation mode is <ph id=\"ph1\">`CFile::modeNoTruncate`</ph>, which is open existing.","pos":[8067,8144],"source":" The default creation mode is `CFile::modeNoTruncate`, which is open existing."},{"content":"Value","pos":[8151,8156]},{"content":"Description","pos":[8157,8168]},{"pos":[8227,8366],"content":"Creates a new file if no file exists.; If the file already exists, <bpt id=\"p1\">[</bpt>CFileException<ept id=\"p1\">](../../mfc/reference/cfileexception-class.md)</ept> is raised.","source":"Creates a new file if no file exists.; If the file already exists, [CFileException](../../mfc/reference/cfileexception-class.md) is raised."},{"pos":[8395,8509],"content":"Creates a new file if no file exists; otherwise, if the file already exists, it is attached to the <ph id=\"ph1\">`CFile`</ph> object.","source":"Creates a new file if no file exists; otherwise, if the file already exists, it is attached to the `CFile` object."},{"content":"Choose the following file caching options as described.","pos":[8517,8572]},{"content":"By default, the system uses a general purpose caching scheme that is not available as an option.","pos":[8573,8669]},{"content":"Value","pos":[8676,8681]},{"content":"Description","pos":[8682,8693]},{"content":"The system does not use an intermediate cache for the file.","pos":[8752,8811]},{"content":"This option cancels the following 2 options.","pos":[8812,8856]},{"content":"The file cache is optimized for random access.","pos":[8885,8931]},{"content":"Do not use this option and the sequential scan option.","pos":[8932,8986]},{"content":"The file cache is optimized for sequential access.","pos":[9017,9067]},{"content":"Do not use this option and the random access option.","pos":[9068,9120]},{"content":"Write operations are performed without delay.","pos":[9149,9194]},{"content":"Choose the following security option to prevent the file handle from being inherited.","pos":[9202,9287]},{"content":"By default, any new child processes can use the file handle.","pos":[9288,9348]},{"content":"Value","pos":[9355,9360]},{"content":"Description","pos":[9361,9372]},{"content":"Prevents any child processes from using the file handle.","pos":[9434,9490]},{"content":"The default constructor initializes members but does not attach a file to the <ph id=\"ph1\">`CFile`</ph> object.","pos":[9498,9591],"source":"The default constructor initializes members but does not attach a file to the `CFile` object."},{"content":"After using this constructor, use the <bpt id=\"p1\">[</bpt>CFile::Open<ept id=\"p1\">](#cfile__open)</ept> method to open a file and attach it to the <ph id=\"ph1\">`CFile`</ph> object.","pos":[9592,9716],"source":" After using this constructor, use the [CFile::Open](#cfile__open) method to open a file and attach it to the `CFile` object."},{"pos":[9723,9830],"content":"The constructor with one parameter initializes members and attaches an existing file to the <ph id=\"ph1\">`CFile`</ph> object.","source":"The constructor with one parameter initializes members and attaches an existing file to the `CFile` object."},{"content":"The constructor with two parameters initializes members and tries to open the specified file.","pos":[9837,9930]},{"content":"If this constructor successfully opens the specified file, the file is attached to the <ph id=\"ph1\">`CFile`</ph> object; otherwise, this constructor throws a pointer to a <ph id=\"ph2\">`CInvalidArgException`</ph> object.","pos":[9931,10114],"source":" If this constructor successfully opens the specified file, the file is attached to the `CFile` object; otherwise, this constructor throws a pointer to a `CInvalidArgException` object."},{"content":"For more information about how to handle exceptions, see <bpt id=\"p1\">[</bpt>Exceptions<ept id=\"p1\">](../../mfc/exception-handling-in-mfc.md)</ept>.","pos":[10115,10225],"source":" For more information about how to handle exceptions, see [Exceptions](../../mfc/exception-handling-in-mfc.md)."},{"pos":[10232,10464],"content":"If a <ph id=\"ph1\">`CFile`</ph> object successfully opens a specified file, it will close this file automatically when the <ph id=\"ph2\">`CFile`</ph> object is destroyed; otherwise, you must explicitly close the file after it is no longer attached to the <ph id=\"ph3\">`CFile`</ph> object.","source":"If a `CFile` object successfully opens a specified file, it will close this file automatically when the `CFile` object is destroyed; otherwise, you must explicitly close the file after it is no longer attached to the `CFile` object."},{"content":"Example","pos":[10474,10481]},{"pos":[10485,10531],"content":"The following code shows how to use a <ph id=\"ph1\">`CFile`</ph>.","source":"The following code shows how to use a `CFile`."},{"pos":[10549,10563],"content":"NVC_MFCFiles#4"},{"pos":[10670,10682],"content":"CFile::Close"},{"content":"Closes the file associated with this object and makes the file unavailable for reading or writing.","pos":[10686,10784]},{"content":"Remarks","pos":[10831,10838]},{"content":"If you have not closed the file before destroying the object, the destructor closes it for you.","pos":[10842,10937]},{"content":"If you used <bpt id=\"p1\">**</bpt>new<ept id=\"p1\">**</ept> to allocate the <ph id=\"ph1\">`CFile`</ph> object on the heap, then you must delete it after closing the file.","pos":[10944,11055],"source":"If you used **new** to allocate the `CFile` object on the heap, then you must delete it after closing the file."},{"content":"<bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> sets <ph id=\"ph1\">`m_hFile`</ph> to <ph id=\"ph2\">`CFile::hFileNull`</ph>.","pos":[11056,11103],"source":"**Close** sets `m_hFile` to `CFile::hFileNull`."},{"content":"Example","pos":[11113,11120]},{"pos":[11124,11174],"content":"See the example for <bpt id=\"p1\">[</bpt>CFile::CFile<ept id=\"p1\">](#cfile__cfile)</ept>.","source":"See the example for [CFile::CFile](#cfile__cfile)."},{"pos":[11217,11233],"content":"CFile::Duplicate"},{"pos":[11237,11292],"content":"Constructs a duplicate <ph id=\"ph1\">`CFile`</ph> object for a given file.","source":"Constructs a duplicate `CFile` object for a given file."},{"content":"Return Value","pos":[11354,11366]},{"pos":[11370,11410],"content":"A pointer to a duplicate <ph id=\"ph1\">`CFile`</ph> object.","source":"A pointer to a duplicate `CFile` object."},{"content":"Remarks","pos":[11420,11427]},{"pos":[11431,11484],"content":"This is equivalent to the C run-time function <ph id=\"ph1\">`_dup`</ph>.","source":"This is equivalent to the C run-time function `_dup`."},{"pos":[11523,11535],"content":"CFile::Flush"},{"content":"Forces any data remaining in the file buffer to be written to the file.","pos":[11539,11610]},{"content":"Remarks","pos":[11657,11664]},{"content":"The use of <ph id=\"ph1\">`Flush`</ph> does not guarantee flushing of <ph id=\"ph2\">`CArchive`</ph> buffers.","pos":[11668,11737],"source":"The use of `Flush` does not guarantee flushing of `CArchive` buffers."},{"content":"If you are using an archive, call <bpt id=\"p1\">[</bpt>CArchive::Flush<ept id=\"p1\">](../../mfc/reference/carchive-class.md#carchive__flush)</ept> first.","pos":[11738,11851],"source":" If you are using an archive, call [CArchive::Flush](../../mfc/reference/carchive-class.md#carchive__flush) first."},{"content":"Example","pos":[11861,11868]},{"pos":[11872,11934],"content":"See the example for <bpt id=\"p1\">[</bpt>CFile::SetFilePath<ept id=\"p1\">](#cfile__setfilepath)</ept>.","source":"See the example for [CFile::SetFilePath](#cfile__setfilepath)."},{"pos":[11979,11997],"content":"CFile::GetFileName"},{"content":"Call this member function to retrieve the name of a specified file.","pos":[12001,12068]},{"content":"Return Value","pos":[12133,12145]},{"content":"The name of the file.","pos":[12149,12170]},{"content":"Remarks","pos":[12180,12187]},{"pos":[12191,12352],"content":"For example, when you call <ph id=\"ph1\">`GetFileName`</ph> to generate a message to the user about the file <ph id=\"ph2\">`c:\\windows\\write\\myfile.wri`</ph>, the filename, <ph id=\"ph3\">`myfile.wri`</ph>, is returned.","source":"For example, when you call `GetFileName` to generate a message to the user about the file `c:\\windows\\write\\myfile.wri`, the filename, `myfile.wri`, is returned."},{"content":"To return the entire path of the file, including the name, call <bpt id=\"p1\">[</bpt>GetFilePath<ept id=\"p1\">](#cfile__getfilepath)</ept>.","pos":[12359,12458],"source":"To return the entire path of the file, including the name, call [GetFilePath](#cfile__getfilepath)."},{"content":"To return the title of the file ( <ph id=\"ph1\">`myfile`</ph>), call <bpt id=\"p1\">[</bpt>GetFileTitle<ept id=\"p1\">](#cfile__getfiletitle)</ept>.","pos":[12459,12546],"source":" To return the title of the file ( `myfile`), call [GetFileTitle](#cfile__getfiletitle)."},{"content":"Example","pos":[12556,12563]},{"content":"This code fragment opens the SYSTEM.INI file in your WINDOWS directory.","pos":[12567,12638]},{"content":"If found, the example will print out the name and path and title, as shown under Output:","pos":[12639,12727]},{"pos":[12745,12759],"content":"NVC_MFCFiles#6"},{"pos":[12872,12890],"content":"CFile::GetFilePath"},{"content":"Call this member function to retrieve the full path of a specified file.","pos":[12894,12966]},{"content":"Return Value","pos":[13031,13043]},{"content":"The full path of the specified file.","pos":[13047,13083]},{"content":"Remarks","pos":[13093,13100]},{"pos":[13104,13283],"content":"For example, when you call <ph id=\"ph1\">`GetFilePath`</ph> to generate a message to the user about the file <ph id=\"ph2\">`c:\\windows\\write\\myfile.wri`</ph>, the file path, <ph id=\"ph3\">`c:\\windows\\write\\myfile.wri`</ph>, is returned.","source":"For example, when you call `GetFilePath` to generate a message to the user about the file `c:\\windows\\write\\myfile.wri`, the file path, `c:\\windows\\write\\myfile.wri`, is returned."},{"content":"To return just the name of the file ( <ph id=\"ph1\">`myfile.wri`</ph>), call <bpt id=\"p1\">[</bpt>GetFileName<ept id=\"p1\">](#cfile__getfilename)</ept>.","pos":[13290,13383],"source":"To return just the name of the file ( `myfile.wri`), call [GetFileName](#cfile__getfilename)."},{"content":"To return the title of the file ( <ph id=\"ph1\">`myfile`</ph>), call <bpt id=\"p1\">[</bpt>GetFileTitle<ept id=\"p1\">](#cfile__getfiletitle)</ept>.","pos":[13384,13471],"source":" To return the title of the file ( `myfile`), call [GetFileTitle](#cfile__getfiletitle)."},{"content":"Example","pos":[13481,13488]},{"pos":[13492,13547],"content":"See the example for <bpt id=\"p1\">[</bpt>GetFileName<ept id=\"p1\">](#cfile__getfilename)</ept>.","source":"See the example for [GetFileName](#cfile__getfilename)."},{"pos":[13593,13612],"content":"CFile::GetFileTitle"},{"content":"Call this member function to retrieve the file title (the display name) for the file.","pos":[13616,13701]},{"content":"Return Value","pos":[13767,13779]},{"content":"The title of the underlying file.","pos":[13783,13816]},{"content":"Remarks","pos":[13826,13833]},{"content":"This method calls <bpt id=\"p1\">[</bpt>GetFileTitle<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms646924)</ept> to retrieve the title of the file.","pos":[13837,13964],"source":"This method calls [GetFileTitle](http://msdn.microsoft.com/library/windows/desktop/ms646924) to retrieve the title of the file."},{"content":"If successful, the method returns the string that the system would use to display the file name to the user.","pos":[13965,14073]},{"content":"Otherwise, the method calls <bpt id=\"p1\">[</bpt>PathFindFileName<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773589)</ept> to retrieve the file name (including the file extension) of the underlying file.","pos":[14074,14261],"source":" Otherwise, the method calls [PathFindFileName](http://msdn.microsoft.com/library/windows/desktop/bb773589) to retrieve the file name (including the file extension) of the underlying file."},{"content":"Therefore, the file extension will not always be included in the returned file title string.","pos":[14262,14354]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>GetFileTitle<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms646924)</ept> and <bpt id=\"p2\">[</bpt>PathFindFileName<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb773589)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[14355,14598],"source":" For more information, see [GetFileTitle](http://msdn.microsoft.com/library/windows/desktop/ms646924) and [PathFindFileName](http://msdn.microsoft.com/library/windows/desktop/bb773589) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"To return the entire path of the file, including the name, call <bpt id=\"p1\">[</bpt>GetFilePath<ept id=\"p1\">](#cfile__getfilepath)</ept>.","pos":[14605,14704],"source":"To return the entire path of the file, including the name, call [GetFilePath](#cfile__getfilepath)."},{"content":"To return just the name of the file, call <bpt id=\"p1\">[</bpt>GetFileName<ept id=\"p1\">](#cfile__getfilename)</ept>.","pos":[14705,14782],"source":" To return just the name of the file, call [GetFileName](#cfile__getfilename)."},{"content":"Example","pos":[14792,14799]},{"pos":[14803,14858],"content":"See the example for <bpt id=\"p1\">[</bpt>GetFileName<ept id=\"p1\">](#cfile__getfilename)</ept>.","source":"See the example for [GetFileName](#cfile__getfilename)."},{"pos":[14901,14917],"content":"CFile::GetLength"},{"content":"Obtains the current logical length of the file in bytes.","pos":[14921,14977]},{"content":"Return Value","pos":[15042,15054]},{"content":"The length of the file.","pos":[15058,15081]},{"content":"Example","pos":[15091,15098]},{"pos":[15113,15127],"content":"NVC_MFCFiles#7"},{"pos":[15240,15258],"content":"CFile::GetPosition"},{"pos":[15262,15357],"content":"Obtains the current value of the file pointer, which can be used in subsequent calls to <ph id=\"ph1\">`Seek`</ph>.","source":"Obtains the current value of the file pointer, which can be used in subsequent calls to `Seek`."},{"content":"Return Value","pos":[15424,15436]},{"content":"The file pointer.","pos":[15440,15457]},{"content":"Example","pos":[15467,15474]},{"pos":[15489,15503],"content":"NVC_MFCFiles#8"},{"pos":[15614,15630],"content":"CFile::GetStatus"},{"pos":[15634,15739],"content":"This method retrieves status information related to a given <ph id=\"ph1\">`CFile`</ph> object instance or a given file path.","source":"This method retrieves status information related to a given `CFile` object instance or a given file path."},{"content":"Parameters","pos":[15943,15953]},{"content":"A reference to a user-supplied <bpt id=\"p1\">**</bpt>CFileStatus<ept id=\"p1\">**</ept> structure that will receive the status information.","pos":[15970,16068],"source":" A reference to a user-supplied **CFileStatus** structure that will receive the status information."},{"content":"The <bpt id=\"p1\">**</bpt>CFileStatus<ept id=\"p1\">**</ept> structure has the following fields:","pos":[16069,16124],"source":" The **CFileStatus** structure has the following fields:"},{"pos":[16132,16189],"content":"<bpt id=\"p1\">**</bpt>CTime m_ctime<ept id=\"p1\">**</ept> The date and time the file was created.","source":"**CTime m_ctime** The date and time the file was created."},{"pos":[16197,16260],"content":"<bpt id=\"p1\">**</bpt>CTime m_mtime<ept id=\"p1\">**</ept> The date and time the file was last modified.","source":"**CTime m_mtime** The date and time the file was last modified."},{"pos":[16268,16343],"content":"<bpt id=\"p1\">**</bpt>CTime m_atime<ept id=\"p1\">**</ept> The date and time the file was last accessed for reading.","source":"**CTime m_atime** The date and time the file was last accessed for reading."},{"pos":[16351,16442],"content":"<bpt id=\"p1\">**</bpt>ULONGLONG m_size<ept id=\"p1\">**</ept> The logical size of the file in bytes, as reported by the DIR command.","source":"**ULONGLONG m_size** The logical size of the file in bytes, as reported by the DIR command."},{"pos":[16450,16502],"content":"<bpt id=\"p1\">**</bpt>BYTE m_attribute<ept id=\"p1\">**</ept> The attribute byte of the file.","source":"**BYTE m_attribute** The attribute byte of the file."},{"pos":[16510,16594],"content":"<bpt id=\"p1\">**</bpt>char m_szFullName[_MAX_PATH]<ept id=\"p1\">**</ept> The absolute filename in the Windows character set.","source":"**char m_szFullName[_MAX_PATH]** The absolute filename in the Windows character set."},{"pos":[16601,16771],"content":"`lpszFileName`  \nA string in the Windows character set that is the path to the desired file. The path can be relative or absolute, or it can contain a network path name.","leadings":[""," "],"nodes":[{"content":"A string in the Windows character set that is the path to the desired file. The path can be relative or absolute, or it can contain a network path name.","pos":[17,169],"nodes":[{"content":"A string in the Windows character set that is the path to the desired file.","pos":[0,75]},{"content":"The path can be relative or absolute, or it can contain a network path name.","pos":[76,152]}]}]},{"pos":[16778,16827],"content":"`pTM`  \nPointer to CAtlTransactionManager object","leadings":[""," "],"nodes":[{"content":"Pointer to CAtlTransactionManager object","pos":[8,48]}]},{"content":"Return Value","pos":[16837,16849]},{"pos":[16853,16958],"content":"<bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> if the status information for the specified file is successfully obtained; otherwise, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","source":"**TRUE** if the status information for the specified file is successfully obtained; otherwise, **FALSE**."},{"content":"Remarks","pos":[16968,16975]},{"content":"The non-static version of <bpt id=\"p1\">**</bpt>GetStatus<ept id=\"p1\">**</ept> retrieves status information of the open file associated with the given <ph id=\"ph1\">`CFile`</ph> object.","pos":[16979,17106],"source":"The non-static version of **GetStatus** retrieves status information of the open file associated with the given `CFile` object."},{"content":"The static version of <bpt id=\"p1\">**</bpt>GetStatus<ept id=\"p1\">**</ept> obtains the file status from a given file path without actually opening the file.","pos":[17108,17225],"source":"  The static version of **GetStatus** obtains the file status from a given file path without actually opening the file."},{"content":"This is useful for testing the existence and access rights of a file.","pos":[17226,17295]},{"content":"The <bpt id=\"p1\">**</bpt>m_attribute<ept id=\"p1\">**</ept> member of the <bpt id=\"p2\">**</bpt>CFileStatus<ept id=\"p2\">**</ept> structure refers to the file attribute set.","pos":[17302,17395],"source":"The **m_attribute** member of the **CFileStatus** structure refers to the file attribute set."},{"content":"The <ph id=\"ph1\">`CFile`</ph> class provides the <bpt id=\"p1\">**</bpt>Attribute<ept id=\"p1\">**</ept> enumeration type so file attributes can be specified symbolically:","pos":[17396,17507],"source":" The `CFile` class provides the **Attribute** enumeration type so file attributes can be specified symbolically:"},{"content":"Example","pos":[17734,17741]},{"pos":[17756,17771],"content":"NVC_MFCFiles#10"},{"pos":[17882,17898],"content":"CFile::hFileNull"},{"pos":[17902,17972],"content":"Determines the presence of a valid file handle for the <ph id=\"ph1\">`CFile`</ph> object.","source":"Determines the presence of a valid file handle for the `CFile` object."},{"content":"Remarks","pos":[18039,18046]},{"pos":[18050,18131],"content":"This constant is used to determine if the <ph id=\"ph1\">`CFile`</ph> object has a valid file handle.","source":"This constant is used to determine if the `CFile` object has a valid file handle."},{"content":"The following example demonstrates this operation:","pos":[18138,18188]},{"pos":[18206,18221],"content":"NVC_MFCFiles#22"},{"pos":[18332,18348],"content":"CFile::LockRange"},{"content":"Locks a range of bytes in an open file, throwing an exception if the file is already locked.","pos":[18352,18444]},{"content":"Parameters","pos":[18540,18550]},{"content":"The byte offset of the start of the byte range to lock.","pos":[18565,18620]},{"content":"The number of bytes in the range to lock.","pos":[18640,18681]},{"content":"Remarks","pos":[18691,18698]},{"content":"Locking bytes in a file prevents access to those bytes by other processes.","pos":[18702,18776]},{"content":"You can lock more than one region of a file, but no overlapping regions are allowed.","pos":[18777,18861]},{"content":"When you unlock the region, using the <ph id=\"ph1\">`UnlockRange`</ph> member function, the byte range must correspond exactly to the region that was previously locked.","pos":[18868,19017],"source":"When you unlock the region, using the `UnlockRange` member function, the byte range must correspond exactly to the region that was previously locked."},{"content":"The <ph id=\"ph1\">`LockRange`</ph> function does not merge adjacent regions; if two locked regions are adjacent, you must unlock each region separately.","pos":[19018,19151],"source":" The `LockRange` function does not merge adjacent regions; if two locked regions are adjacent, you must unlock each region separately."},{"pos":[19159,19234],"content":"[!NOTE]\n This function is not available for the `CMemFile`-derived class.","leadings":["","> "],"nodes":[{"content":"This function is not available for the <ph id=\"ph1\">`CMemFile`</ph>-derived class.","pos":[9,73],"source":" This function is not available for the `CMemFile`-derived class."}]},{"content":"Example","pos":[19244,19251]},{"pos":[19266,19281],"content":"NVC_MFCFiles#12"},{"pos":[19390,19404],"content":"CFile::m_hFile"},{"content":"Contains the operating-system file handle for an open file.","pos":[19408,19467]},{"content":"Remarks","pos":[19510,19517]},{"content":"is a public variable of type <bpt id=\"p1\">**</bpt>UINT<ept id=\"p1\">**</ept>.","pos":[19531,19569],"source":" is a public variable of type **UINT**."},{"content":"It contains <ph id=\"ph1\">`CFile::hFileNull`</ph> (an operating-system-independent empty file indicator) if the handle has not been assigned.","pos":[19570,19692],"source":" It contains `CFile::hFileNull` (an operating-system-independent empty file indicator) if the handle has not been assigned."},{"content":"Use of <ph id=\"ph1\">`m_hFile`</ph> is not recommended because the member's meaning depends on the derived class.","pos":[19699,19793],"source":"Use of `m_hFile` is not recommended because the member's meaning depends on the derived class."},{"content":"is made a public member for convenience in supporting nonpolymorphic use of the class.","pos":[19804,19890]},{"pos":[19929,19941],"content":"CFile::m_pTM"},{"pos":[19945,19990],"content":"Pointer to a <ph id=\"ph1\">`CAtlTransactionManager`</ph> object.","source":"Pointer to a `CAtlTransactionManager` object."},{"content":"Remarks","pos":[20048,20055]},{"pos":[20093,20104],"content":"CFile::Open"},{"content":"Overloaded.","pos":[20108,20119]},{"content":"<bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> is designed for use with the default <ph id=\"ph1\">`CFile`</ph> constructor.","pos":[20120,20186],"source":"**Open** is designed for use with the default `CFile` constructor."},{"content":"Parameters","pos":[20455,20465]},{"content":"A string that is the path to the desired file.","pos":[20487,20533]},{"content":"The path can be relative, absolute, or a network name (UNC).","pos":[20534,20594]},{"content":"A <bpt id=\"p1\">**</bpt>UINT<ept id=\"p1\">**</ept> that defines the file's sharing and access mode.","pos":[20617,20676],"source":" A **UINT** that defines the file's sharing and access mode."},{"content":"It specifies the action to take when opening the file.","pos":[20677,20731]},{"content":"You can combine options by using the bitwise-OR ( <bpt id=\"p1\">**</bpt>&amp;#124;<ept id=\"p1\">**</ept> ) operator.","pos":[20732,20804],"source":" You can combine options by using the bitwise-OR ( **&#124;** ) operator."},{"content":"One access permission and one share option are required; the <bpt id=\"p1\">**</bpt>modeCreate<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>modeNoInherit<ept id=\"p2\">**</ept> modes are optional.","pos":[20805,20922],"source":" One access permission and one share option are required; the **modeCreate** and **modeNoInherit** modes are optional."},{"content":"See the <bpt id=\"p1\">[</bpt>CFile<ept id=\"p1\">](#cfile__cfile)</ept> constructor for a list of mode options.","pos":[20923,20993],"source":" See the [CFile](#cfile__cfile) constructor for a list of mode options."},{"content":"A pointer to an existing file-exception object that will receive the status of a failed operation.","pos":[21012,21110]},{"content":"Pointer to CAtlTransactionManager object","pos":[21126,21166]},{"content":"Return Value","pos":[21176,21188]},{"content":"Nonzero if the open was successful; otherwise 0.","pos":[21192,21240]},{"content":"The <ph id=\"ph1\">`pError`</ph> parameter is meaningful only if 0 is returned.","pos":[21241,21300],"source":" The `pError` parameter is meaningful only if 0 is returned."},{"content":"Remarks","pos":[21310,21317]},{"content":"The two functions form a \"safe\" method for opening a file where a failure is a normal, expected condition.","pos":[21321,21427]},{"content":"While the <ph id=\"ph1\">`CFile`</ph> constructor will throw an exception in an error condition, <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> will return <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> for error conditions.","pos":[21434,21563],"source":"While the `CFile` constructor will throw an exception in an error condition, **Open** will return **FALSE** for error conditions."},{"content":"<bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> can still initialize a <bpt id=\"p2\">[</bpt>CFileException<ept id=\"p2\">](../../mfc/reference/cfileexception-class.md)</ept> object to describe the error, however.","pos":[21564,21696],"source":"**Open** can still initialize a [CFileException](../../mfc/reference/cfileexception-class.md) object to describe the error, however."},{"content":"If you don't supply the <ph id=\"ph1\">`pError`</ph> parameter, or if you pass <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> for <ph id=\"ph2\">`pError`</ph>, <bpt id=\"p2\">**</bpt>Open<ept id=\"p2\">**</ept> will return <bpt id=\"p3\">**</bpt>FALSE<ept id=\"p3\">**</ept> and not throw a <ph id=\"ph3\">`CFileException`</ph>.","pos":[21697,21843],"source":" If you don't supply the `pError` parameter, or if you pass **NULL** for `pError`, **Open** will return **FALSE** and not throw a `CFileException`."},{"content":"If you pass a pointer to an existing <ph id=\"ph1\">`CFileException`</ph>, and <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> encounters an error, the function will fill it with information describing that error.","pos":[21844,21998],"source":" If you pass a pointer to an existing `CFileException`, and **Open** encounters an error, the function will fill it with information describing that error."},{"content":"In neither case will <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> throw an exception.","pos":[21999,22048],"source":" In neither case will **Open** throw an exception."},{"pos":[22055,22118],"content":"The following table describes the possible results of <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept>.","source":"The following table describes the possible results of **Open**."},{"content":"Error encountered","pos":[22134,22151]},{"content":"Return value","pos":[22152,22164]},{"content":"CFileException content","pos":[22165,22187]},{"content":"NULL","pos":[22286,22290]},{"content":"No","pos":[22293,22295]},{"content":"TRUE","pos":[22298,22302]},{"content":"n/a","pos":[22305,22308]},{"pos":[22313,22319],"content":"ptr to"},{"content":"No","pos":[22337,22339]},{"content":"TRUE","pos":[22342,22346]},{"content":"unchanged","pos":[22349,22358]},{"content":"NULL","pos":[22365,22369]},{"content":"Yes","pos":[22372,22375]},{"content":"FALSE","pos":[22378,22383]},{"content":"n/a","pos":[22386,22389]},{"pos":[22394,22400],"content":"ptr to"},{"content":"Yes","pos":[22418,22421]},{"content":"FALSE","pos":[22424,22429]},{"content":"initialized to describe error","pos":[22432,22461]},{"content":"Example","pos":[22472,22479]},{"pos":[22494,22509],"content":"NVC_MFCFiles#13"},{"pos":[22595,22610],"content":"NVC_MFCFiles#14"},{"pos":[22728,22750],"content":"CFile::operator HANDLE"},{"pos":[22754,23004],"content":"Use this operator to pass a handle to a <ph id=\"ph1\">`CFile`</ph> object to functions such as <bpt id=\"p1\">[</bpt>ReadFileEx<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa365468)</ept> and <bpt id=\"p2\">[</bpt>GetFileTime<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms724320)</ept> that expect a <ph id=\"ph2\">`HANDLE`</ph>.","source":"Use this operator to pass a handle to a `CFile` object to functions such as [ReadFileEx](http://msdn.microsoft.com/library/windows/desktop/aa365468) and [GetFileTime](http://msdn.microsoft.com/library/windows/desktop/ms724320) that expect a `HANDLE`."},{"pos":[23085,23096],"content":"CFile::Read"},{"pos":[23100,23174],"content":"Reads data into a buffer from the file associated with the <ph id=\"ph1\">`CFile`</ph> object.","source":"Reads data into a buffer from the file associated with the `CFile` object."},{"content":"Parameters","pos":[23255,23265]},{"content":"Pointer to the user-supplied buffer that is to receive the data read from the file.","pos":[23280,23363]},{"content":"The maximum number of bytes to be read from the file.","pos":[23382,23435]},{"content":"For text-mode files, carriage return–linefeed pairs are counted as single characters.","pos":[23436,23521]},{"content":"Return Value","pos":[23531,23543]},{"content":"The number of bytes transferred to the buffer.","pos":[23547,23593]},{"content":"Note that for all <ph id=\"ph1\">`CFile`</ph> classes, the return value may be less than <ph id=\"ph2\">`nCount`</ph> if the end of file was reached.","pos":[23594,23703],"source":" Note that for all `CFile` classes, the return value may be less than `nCount` if the end of file was reached."},{"content":"Example","pos":[23713,23720]},{"pos":[23735,23750],"content":"NVC_MFCFiles#15"},{"pos":[23826,23878],"content":"For another example see <bpt id=\"p1\">[</bpt>CFile::Open<ept id=\"p1\">](#cfile__open)</ept>.","source":"For another example see [CFile::Open](#cfile__open)."},{"pos":[23918,23931],"content":"CFile::Remove"},{"content":"This static function deletes the file specified by the path.","pos":[23935,23995]},{"content":"Parameters","pos":[24110,24120]},{"content":"A string that is the path to the desired file.","pos":[24142,24188]},{"content":"The path can be relative or absolute, and can contain a network name.","pos":[24189,24258]},{"content":"Pointer to CAtlTransactionManager object","pos":[24274,24314]},{"content":"Remarks","pos":[24324,24331]},{"content":"It will not remove a directory.","pos":[24335,24366]},{"content":"The <bpt id=\"p1\">**</bpt>Remove<ept id=\"p1\">**</ept> member function throws an exception if the connected file is open or if the file cannot be removed.","pos":[24373,24487],"source":"The **Remove** member function throws an exception if the connected file is open or if the file cannot be removed."},{"content":"This is equivalent to the DEL command.","pos":[24488,24526]},{"content":"Example","pos":[24536,24543]},{"pos":[24558,24573],"content":"NVC_MFCFiles#17"},{"pos":[24682,24695],"content":"CFile::Rename"},{"content":"This static function renames the specified file.","pos":[24699,24747]},{"content":"Parameters","pos":[24894,24904]},{"content":"The old path.","pos":[24925,24938]},{"content":"The new path.","pos":[24962,24975]},{"content":"Pointer to CAtlTransactionManager object","pos":[24991,25031]},{"content":"Remarks","pos":[25041,25048]},{"content":"Directories cannot be renamed.","pos":[25052,25082]},{"content":"This is equivalent to the REN command.","pos":[25083,25121]},{"content":"Example","pos":[25131,25138]},{"pos":[25153,25168],"content":"NVC_MFCFiles#18"},{"pos":[25275,25286],"content":"CFile::Seek"},{"content":"Repositions the file pointer in an open file.","pos":[25290,25335]},{"content":"Parameters","pos":[25416,25426]},{"content":"Number of bytes to move the file pointer.","pos":[25440,25481]},{"content":"Positive values move the file pointer towards the end of the file; negative values move the file pointer towards the start of the file.","pos":[25482,25617]},{"content":"Position to seek from.","pos":[25635,25657]},{"content":"See the Remarks section for possible values.","pos":[25658,25702]},{"content":"Return Value","pos":[25712,25724]},{"pos":[25728,25888],"content":"The position of the file pointer if the method was successful; otherwise, the return value is undefined and a pointer to a <ph id=\"ph1\">`CFileException`</ph> exception is thrown.","source":"The position of the file pointer if the method was successful; otherwise, the return value is undefined and a pointer to a `CFileException` exception is thrown."},{"content":"Remarks","pos":[25898,25905]},{"pos":[25909,25977],"content":"The following table lists possible values for the <ph id=\"ph1\">`nFrom`</ph> parameter.","source":"The following table lists possible values for the `nFrom` parameter."},{"content":"Value","pos":[25984,25989]},{"content":"Description","pos":[25990,26001]},{"content":"Seek from the start of the file.","pos":[26055,26087]},{"content":"Seek from the current location of the file pointer.","pos":[26109,26160]},{"content":"Seek from the end of the file.","pos":[26178,26208]},{"content":"When a file is opened, the file pointer is positioned at 0, the start of the file.","pos":[26216,26298]},{"content":"You can set the file pointer to a position beyond the end of a file.","pos":[26305,26373]},{"content":"If you do this, the size of the file does not increase until you write to the file.","pos":[26374,26457]},{"content":"The exception handler for this method must delete the exception object after the exception is processed.","pos":[26464,26568]},{"content":"Example","pos":[26578,26585]},{"pos":[26600,26614],"content":"NVC_MFCFiles#9"},{"pos":[26728,26746],"content":"CFile::SeekToBegin"},{"content":"Sets the value of the file pointer to the beginning of the file.","pos":[26750,26814]},{"content":"Remarks","pos":[26859,26866]},{"pos":[26886,26930],"content":"is equivalent to <ph id=\"ph1\">`Seek( 0L, CFile::begin )`</ph>.","source":" is equivalent to `Seek( 0L, CFile::begin )`."},{"content":"Example","pos":[26940,26947]},{"pos":[26962,26977],"content":"NVC_MFCFiles#19"},{"pos":[27089,27105],"content":"CFile::SeekToEnd"},{"content":"Sets the value of the file pointer to the logical end of the file.","pos":[27109,27175]},{"content":"Return Value","pos":[27223,27235]},{"content":"The length of the file in bytes.","pos":[27239,27271]},{"content":"Remarks","pos":[27281,27288]},{"pos":[27306,27355],"content":"is equivalent to <ph id=\"ph1\">`CFile::Seek( 0L, CFile::end )`</ph>.","source":" is equivalent to `CFile::Seek( 0L, CFile::end )`."},{"content":"Example","pos":[27365,27372]},{"pos":[27387,27402],"content":"NVC_MFCFiles#19"},{"pos":[27516,27534],"content":"CFile::SetFilePath"},{"pos":[27538,27749],"content":"Call this function to specify the path of the file; for example, if the path of a file is not available when a <bpt id=\"p1\">[</bpt>CFile<ept id=\"p1\">](../../mfc/reference/cfile-class.md)</ept> object is constructed, call <ph id=\"ph1\">`SetFilePath`</ph> to provide it.","source":"Call this function to specify the path of the file; for example, if the path of a file is not available when a [CFile](../../mfc/reference/cfile-class.md) object is constructed, call `SetFilePath` to provide it."},{"content":"Parameters","pos":[27821,27831]},{"content":"Pointer to a string specifying the new path.","pos":[27852,27896]},{"content":"Remarks","pos":[27906,27913]},{"pos":[27921,28069],"content":"[!NOTE]\n`SetFilePath` does not open the file or create the file; it simply associates the `CFile` object with a path name, which can then be used.","leadings":["","> "],"nodes":[{"content":"does not open the file or create the file; it simply associates the <ph id=\"ph1\">`CFile`</ph> object with a path name, which can then be used.","pos":[22,146],"source":" does not open the file or create the file; it simply associates the `CFile` object with a path name, which can then be used."}]},{"content":"Example","pos":[28079,28086]},{"pos":[28101,28116],"content":"NVC_MFCFiles#20"},{"pos":[28228,28244],"content":"CFile::SetLength"},{"content":"Call this function to change the length of the file.","pos":[28248,28300]},{"content":"Parameters","pos":[28369,28379]},{"content":"Desired length of the file in bytes.","pos":[28397,28433]},{"content":"This value can be larger or smaller than the current length of the file.","pos":[28434,28506]},{"content":"The file will be extended or truncated as appropriate.","pos":[28507,28561]},{"content":"Remarks","pos":[28571,28578]},{"pos":[28586,28668],"content":"[!NOTE]\n With `CMemFile`, this function could throw a `CMemoryException` object.","leadings":["","> "],"nodes":[{"content":"With <ph id=\"ph1\">`CMemFile`</ph>, this function could throw a <ph id=\"ph2\">`CMemoryException`</ph> object.","pos":[9,80],"source":" With `CMemFile`, this function could throw a `CMemoryException` object."}]},{"content":"Example","pos":[28678,28685]},{"pos":[28700,28715],"content":"NVC_MFCFiles#11"},{"pos":[28827,28843],"content":"CFile::SetStatus"},{"content":"Sets the status of the file associated with this file location.","pos":[28847,28910]},{"content":"Parameters","pos":[29067,29077]},{"content":"A string that is the path to the desired file.","pos":[29099,29145]},{"content":"The path can be relative or absolute, and can contain a network name.","pos":[29146,29215]},{"content":"status","pos":[29223,29229]},{"content":"The buffer containing the new status information.","pos":[29234,29283]},{"content":"Call the <bpt id=\"p1\">**</bpt>GetStatus<ept id=\"p1\">**</ept> member function to prefill the <bpt id=\"p2\">**</bpt>CFileStatus<ept id=\"p2\">**</ept> structure with current values, then make changes as required.","pos":[29284,29415],"source":" Call the **GetStatus** member function to prefill the **CFileStatus** structure with current values, then make changes as required."},{"content":"If a value is 0, then the corresponding status item is not updated.","pos":[29416,29483]},{"content":"See the <bpt id=\"p1\">[</bpt>GetStatus<ept id=\"p1\">](#cfile__getstatus)</ept> member function for a description of the <bpt id=\"p2\">**</bpt>CFileStatus<ept id=\"p2\">**</ept> structure.","pos":[29484,29590],"source":" See the [GetStatus](#cfile__getstatus) member function for a description of the **CFileStatus** structure."},{"content":"Pointer to CAtlTransactionManager object","pos":[29606,29646]},{"content":"Remarks","pos":[29656,29663]},{"pos":[29667,29725],"content":"To set the time, modify the <bpt id=\"p1\">**</bpt>m_mtime<ept id=\"p1\">**</ept> field of <bpt id=\"p2\">*</bpt>status<ept id=\"p2\">*</ept>.","source":"To set the time, modify the **m_mtime** field of *status*."},{"content":"Please note that when you make a call to <ph id=\"ph1\">`SetStatus`</ph> in an attempt to change only the attributes of the file, and the <bpt id=\"p1\">**</bpt>m_mtime<ept id=\"p1\">**</ept> member of the file status structure is nonzero, the attributes may also be affected (changing the time stamp may have side effects on the attributes).","pos":[29732,30012],"source":"Please note that when you make a call to `SetStatus` in an attempt to change only the attributes of the file, and the **m_mtime** member of the file status structure is nonzero, the attributes may also be affected (changing the time stamp may have side effects on the attributes)."},{"content":"If you want to only change the attributes of the file, first set the <bpt id=\"p1\">**</bpt>m_mtime<ept id=\"p1\">**</ept> member of the file status structure to zero and then make a call to <ph id=\"ph1\">`SetStatus`</ph>.","pos":[30013,30174],"source":" If you want to only change the attributes of the file, first set the **m_mtime** member of the file status structure to zero and then make a call to `SetStatus`."},{"content":"Example","pos":[30184,30191]},{"pos":[30206,30221],"content":"NVC_MFCFiles#21"},{"pos":[30335,30353],"content":"CFile::UnlockRange"},{"content":"Unlocks a range of bytes in an open file.","pos":[30357,30398]},{"content":"Parameters","pos":[30496,30506]},{"content":"The byte offset of the start of the byte range to unlock.","pos":[30521,30578]},{"content":"The number of bytes in the range to unlock.","pos":[30598,30641]},{"content":"Remarks","pos":[30651,30658]},{"pos":[30662,30748],"content":"See the description of the <bpt id=\"p1\">[</bpt>LockRange<ept id=\"p1\">](#cfile__lockrange)</ept> member function for details.","source":"See the description of the [LockRange](#cfile__lockrange) member function for details."},{"pos":[30756,30831],"content":"[!NOTE]\n This function is not available for the `CMemFile`-derived class.","leadings":["","> "],"nodes":[{"content":"This function is not available for the <ph id=\"ph1\">`CMemFile`</ph>-derived class.","pos":[9,73],"source":" This function is not available for the `CMemFile`-derived class."}]},{"content":"Example","pos":[30841,30848]},{"pos":[30863,30878],"content":"NVC_MFCFiles#12"},{"pos":[30985,30997],"content":"CFile::Write"},{"pos":[31001,31074],"content":"Writes data from a buffer to the file associated with the <ph id=\"ph1\">`CFile`</ph> object.","source":"Writes data from a buffer to the file associated with the `CFile` object."},{"content":"Parameters","pos":[31162,31172]},{"content":"A pointer to the user-supplied buffer that contains the data to be written to the file.","pos":[31187,31274]},{"content":"The number of bytes to be transferred from the buffer.","pos":[31293,31347]},{"content":"For text-mode files, carriage return–linefeed pairs are counted as single characters.","pos":[31348,31433]},{"content":"Remarks","pos":[31443,31450]},{"pos":[31454,31553],"content":"<bpt id=\"p1\">**</bpt>Write<ept id=\"p1\">**</ept> throws an exception in response to several conditions, including the disk-full condition.","source":"**Write** throws an exception in response to several conditions, including the disk-full condition."},{"content":"Example","pos":[31563,31570]},{"pos":[31585,31600],"content":"NVC_MFCFiles#16"},{"pos":[31676,31772],"content":"In addition, see the examples for <bpt id=\"p1\">[</bpt>CFile::CFile<ept id=\"p1\">](#cfile__cfile)</ept> and <bpt id=\"p2\">[</bpt>CFile::Open<ept id=\"p2\">](#cfile__open)</ept>.","source":"In addition, see the examples for [CFile::CFile](#cfile__cfile) and [CFile::Open](#cfile__open)."},{"content":"See Also","pos":[31781,31789]},{"content":"MFC Sample DRAWCLI","pos":[31794,31812]},{"content":"CObject Class","pos":[31848,31861]},{"content":"Hierarchy Chart","pos":[31906,31921]},{"content":"CStdioFile Class","pos":[31958,31974]},{"content":"CMemFile Class","pos":[32022,32036]}],"content":"---\ntitle: \"CFile Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CFile\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CFile class\"\n  - \"CArchive class, using with CFile\"\n  - \"files [C++], classes for\"\nms.assetid: b2eb5757-d499-4e67-b044-dd7d1abaa0f8\ncaps.latest.revision: 22\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CFile Class\nThe base class for Microsoft Foundation Class file classes.  \n  \n## Syntax  \n  \n```  \nclass CFile : public CObject  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CFile::CFile](#cfile__cfile)|Constructs a `CFile` object from a path or file handle.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CFile::Abort](#cfile__abort)|Closes a file ignoring all warnings and errors.|  \n|[CFile::Close](#cfile__close)|Closes a file and deletes the object.|  \n|[CFile::Duplicate](#cfile__duplicate)|Constructs a duplicate object based on this file.|  \n|[CFile::Flush](#cfile__flush)|Flushes any data yet to be written.|  \n|[CFile::GetFileName](#cfile__getfilename)|Retrieves the filename of the selected file.|  \n|[CFile::GetFilePath](#cfile__getfilepath)|Retrieves the full file path of the selected file.|  \n|[CFile::GetFileTitle](#cfile__getfiletitle)|Retrieves the title of the selected file.|  \n|[CFile::GetLength](#cfile__getlength)|Retrieves the length of the file.|  \n|[CFile::GetPosition](#cfile__getposition)|Retrieves the current file pointer.|  \n|[CFile::GetStatus](#cfile__getstatus)|Retrieves the status of the open file, or in the static version, retrieves the status of the specified file (static, virtual function).|  \n|[CFile::LockRange](#cfile__lockrange)|Locks a range of bytes in a file.|  \n|[CFile::Open](#cfile__open)|Safely opens a file with an error-testing option.|  \n|[CFile::Read](#cfile__read)|Reads (unbuffered) data from a file at the current file position.|  \n|[CFile::Remove](#cfile__remove)|Deletes the specified file (static function).|  \n|[CFile::Rename](#cfile__rename)|Renames the specified file (static function).|  \n|[CFile::Seek](#cfile__seek)|Positions the current file pointer.|  \n|[CFile::SeekToBegin](#cfile__seektobegin)|Positions the current file pointer at the beginning of the file.|  \n|[CFile::SeekToEnd](#cfile__seektoend)|Positions the current file pointer at the end of the file.|  \n|[CFile::SetFilePath](#cfile__setfilepath)|Sets the full file path of the selected file.|  \n|[CFile::SetLength](#cfile__setlength)|Changes the length of the file.|  \n|[CFile::SetStatus](#cfile__setstatus)|Sets the status of the specified file (static, virtual function).|  \n|[CFile::UnlockRange](#cfile__unlockrange)|Unlocks a range of bytes in a file.|  \n|[CFile::Write](#cfile__write)|Writes (unbuffered) data in a file to the current file position.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CFile::operator HANDLE](#cfile__operator_handle)|A handle to a `CFile` object.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CFile::hFileNull](#cfile__hfilenull)|Determines if the `CFile` object has a valid handle.|  \n|[CFile::m_hFile](#cfile__m_hfile)|Usually contains the operating-system file handle.|  \n  \n### Protected Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CFile::m_pTM](#cfile__m_ptm)|Pointer to `CAtlTransactionManager` object.|  \n  \n## Remarks  \n It directly provides unbuffered, binary disk input/output services, and it indirectly supports text files and memory files through its derived classes. `CFile` works in conjunction with the `CArchive` class to support serialization of Microsoft Foundation Class objects.  \n  \n The hierarchical relationship between this class and its derived classes allows your program to operate on all file objects through the polymorphic `CFile` interface. A memory file, for example, behaves like a disk file.  \n  \n Use `CFile` and its derived classes for general-purpose disk I/O. Use `ofstream` or other Microsoft iostream classes for formatted text sent to a disk file.  \n  \n Normally, a disk file is opened automatically on `CFile` construction and closed on destruction. Static member functions permit you to interrogate a file's status without opening the file.  \n  \n For more information on using `CFile`, see the articles [Files in MFC](../../mfc/files-in-mfc.md) and [File Handling](../../c-runtime-library/file-handling.md) in the *Run-Time Library Reference*.  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n `CFile`  \n  \n## Requirements  \n **Header:** afx.h  \n  \n##  <a name=\"cfile__abort\"></a>  CFile::Abort  \n Closes the file associated with this object and makes the file unavailable for reading or writing.  \n  \n```  \nvirtual void Abort();\n```  \n  \n### Remarks  \n If you have not closed the file before destroying the object, the destructor closes it for you.  \n  \n When handling exceptions, `CFile::Abort` differs from `CFile::Close` in two important ways. First, the **Abort** function will not throw an exception on failures because failures are ignored by **Abort**. Second, **Abort** will not **ASSERT** if the file has not been opened or was closed previously.  \n  \n If you used **new** to allocate the `CFile` object on the heap, then you must delete it after closing the file. **Abort** sets `m_hFile` to `CFile::hFileNull`.  \n  \n### Example  \n [!code-cpp[NVC_MFCFiles#5](../../atl-mfc-shared/reference/codesnippet/cpp/cfile-class_1.cpp)]  \n  \n##  <a name=\"cfile__cfile\"></a>  CFile::CFile  \n Constructs and initializes a `CFile` object.  \n  \n```  \n \nCFile();\n\n \nCFile(\nCAtlTransactionManager* pTM);\n\n \nCFile(\nHANDLE hFile);\n\n \nCFile(\nLPCTSTR lpszFileName,  \nUINT nOpenFlags);\n\n \nCFile(\nLPCTSTR lpszFileName,  \nUINT nOpenFlags,  \nCAtlTransactionManager* pTM);\n```  \n  \n### Parameters  \n `hFile`  \n Handle of a file to attach to the `CFile` object.  \n  \n `lpszFileName`  \n Relative or full path of a file to attach to the `CFile` object.  \n  \n `nOpenFlags`  \n Bitwise combination (OR) of file access options for the specified file. See the Remarks section for possible options.  \n  \n `pTM`  \n Pointer to CAtlTransactionManager object  \n  \n### Remarks  \n The following five tables list the possible options for the `nOpenFlags` parameter.  \n  \n Choose only one of the following file access mode options. The default file access mode is `CFile::modeRead`, which is read only.  \n  \n|Value|Description|  \n|-----------|-----------------|  \n|`CFile::modeRead`|Requests read access only.|  \n|`CFile::modeWrite`|Requests write access only.|  \n|`CFile::modeReadWrite`|Requests read and write access.|  \n  \n Choose one of the following character mode options.  \n  \n|Value|Description|  \n|-----------|-----------------|  \n|`CFile::typeBinary`|Sets binary mode (used in derived classes only).|  \n|`CFile::typeText`|Sets text mode with special processing for carriage return–linefeed pairs (used in derived classes only).|  \n|`CFile::typeUnicode`|Sets Unicode mode (used in derived classes only). Text is written to the file in Unicode format when the application is built in a Unicode configuration. No BOM is written to the file.|  \n  \n Choose only one of the following file share mode options. The default file share mode is `CFile::shareExclusive`, which is exclusive.  \n  \n|Value|Description|  \n|-----------|-----------------|  \n|`CFile::shareDenyNone`|No sharing restrictions.|  \n|`CFile::shareDenyRead`|Denies read access to all others.|  \n|`CFile::shareDenyWrite`|Denies write access to all others.|  \n|`CFile::shareExclusive`|Denies read and write access to all others.|  \n  \n Choose the first, or both, of the following file creation mode options. The default creation mode is `CFile::modeNoTruncate`, which is open existing.  \n  \n|Value|Description|  \n|-----------|-----------------|  \n|`CFile::modeCreate`|Creates a new file if no file exists.; If the file already exists, [CFileException](../../mfc/reference/cfileexception-class.md) is raised.|  \n|`CFile::modeNoTruncate`|Creates a new file if no file exists; otherwise, if the file already exists, it is attached to the `CFile` object.|  \n  \n Choose the following file caching options as described. By default, the system uses a general purpose caching scheme that is not available as an option.  \n  \n|Value|Description|  \n|-----------|-----------------|  \n|`CFile::osNoBuffer`|The system does not use an intermediate cache for the file. This option cancels the following 2 options.|  \n|`CFile::osRandomAccess`|The file cache is optimized for random access. Do not use this option and the sequential scan option.|  \n|`CFile::osSequentialScan`|The file cache is optimized for sequential access. Do not use this option and the random access option.|  \n|`CFile::osWriteThrough`|Write operations are performed without delay.|  \n  \n Choose the following security option to prevent the file handle from being inherited. By default, any new child processes can use the file handle.  \n  \n|Value|Description|  \n|-----------|-----------------|  \n|`CFile::modeNoInherit`|Prevents any child processes from using the file handle.|  \n  \n The default constructor initializes members but does not attach a file to the `CFile` object. After using this constructor, use the [CFile::Open](#cfile__open) method to open a file and attach it to the `CFile` object.  \n  \n The constructor with one parameter initializes members and attaches an existing file to the `CFile` object.  \n  \n The constructor with two parameters initializes members and tries to open the specified file. If this constructor successfully opens the specified file, the file is attached to the `CFile` object; otherwise, this constructor throws a pointer to a `CInvalidArgException` object. For more information about how to handle exceptions, see [Exceptions](../../mfc/exception-handling-in-mfc.md).  \n  \n If a `CFile` object successfully opens a specified file, it will close this file automatically when the `CFile` object is destroyed; otherwise, you must explicitly close the file after it is no longer attached to the `CFile` object.  \n  \n### Example  \n The following code shows how to use a `CFile`.  \n  \n [!code-cpp[NVC_MFCFiles#4](../../atl-mfc-shared/reference/codesnippet/cpp/cfile-class_2.cpp)]  \n  \n##  <a name=\"cfile__close\"></a>  CFile::Close  \n Closes the file associated with this object and makes the file unavailable for reading or writing.  \n  \n```  \nvirtual void Close();\n```  \n  \n### Remarks  \n If you have not closed the file before destroying the object, the destructor closes it for you.  \n  \n If you used **new** to allocate the `CFile` object on the heap, then you must delete it after closing the file. **Close** sets `m_hFile` to `CFile::hFileNull`.  \n  \n### Example  \n See the example for [CFile::CFile](#cfile__cfile).  \n  \n##  <a name=\"cfile__duplicate\"></a>  CFile::Duplicate  \n Constructs a duplicate `CFile` object for a given file.  \n  \n```  \nvirtual CFile* Duplicate() const;\n\n \n```  \n  \n### Return Value  \n A pointer to a duplicate `CFile` object.  \n  \n### Remarks  \n This is equivalent to the C run-time function `_dup`.  \n  \n##  <a name=\"cfile__flush\"></a>  CFile::Flush  \n Forces any data remaining in the file buffer to be written to the file.  \n  \n```  \nvirtual void Flush();\n```  \n  \n### Remarks  \n The use of `Flush` does not guarantee flushing of `CArchive` buffers. If you are using an archive, call [CArchive::Flush](../../mfc/reference/carchive-class.md#carchive__flush) first.  \n  \n### Example  \n See the example for [CFile::SetFilePath](#cfile__setfilepath).  \n  \n##  <a name=\"cfile__getfilename\"></a>  CFile::GetFileName  \n Call this member function to retrieve the name of a specified file.  \n  \n```  \nvirtual CString GetFileName() const;\n\n \n```  \n  \n### Return Value  \n The name of the file.  \n  \n### Remarks  \n For example, when you call `GetFileName` to generate a message to the user about the file `c:\\windows\\write\\myfile.wri`, the filename, `myfile.wri`, is returned.  \n  \n To return the entire path of the file, including the name, call [GetFilePath](#cfile__getfilepath). To return the title of the file ( `myfile`), call [GetFileTitle](#cfile__getfiletitle).  \n  \n### Example  \n This code fragment opens the SYSTEM.INI file in your WINDOWS directory. If found, the example will print out the name and path and title, as shown under Output:  \n  \n [!code-cpp[NVC_MFCFiles#6](../../atl-mfc-shared/reference/codesnippet/cpp/cfile-class_3.cpp)]  \n  \n##  <a name=\"cfile__getfilepath\"></a>  CFile::GetFilePath  \n Call this member function to retrieve the full path of a specified file.  \n  \n```  \nvirtual CString GetFilePath() const;\n\n \n```  \n  \n### Return Value  \n The full path of the specified file.  \n  \n### Remarks  \n For example, when you call `GetFilePath` to generate a message to the user about the file `c:\\windows\\write\\myfile.wri`, the file path, `c:\\windows\\write\\myfile.wri`, is returned.  \n  \n To return just the name of the file ( `myfile.wri`), call [GetFileName](#cfile__getfilename). To return the title of the file ( `myfile`), call [GetFileTitle](#cfile__getfiletitle).  \n  \n### Example  \n See the example for [GetFileName](#cfile__getfilename).  \n  \n##  <a name=\"cfile__getfiletitle\"></a>  CFile::GetFileTitle  \n Call this member function to retrieve the file title (the display name) for the file.  \n  \n```  \nvirtual CString GetFileTitle() const;\n\n \n```  \n  \n### Return Value  \n The title of the underlying file.  \n  \n### Remarks  \n This method calls [GetFileTitle](http://msdn.microsoft.com/library/windows/desktop/ms646924) to retrieve the title of the file. If successful, the method returns the string that the system would use to display the file name to the user. Otherwise, the method calls [PathFindFileName](http://msdn.microsoft.com/library/windows/desktop/bb773589) to retrieve the file name (including the file extension) of the underlying file. Therefore, the file extension will not always be included in the returned file title string. For more information, see [GetFileTitle](http://msdn.microsoft.com/library/windows/desktop/ms646924) and [PathFindFileName](http://msdn.microsoft.com/library/windows/desktop/bb773589) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n To return the entire path of the file, including the name, call [GetFilePath](#cfile__getfilepath). To return just the name of the file, call [GetFileName](#cfile__getfilename).  \n  \n### Example  \n See the example for [GetFileName](#cfile__getfilename).  \n  \n##  <a name=\"cfile__getlength\"></a>  CFile::GetLength  \n Obtains the current logical length of the file in bytes.  \n  \n```  \nvirtual ULONGLONG GetLength() const;\n\n \n```  \n  \n### Return Value  \n The length of the file.  \n  \n### Example  \n [!code-cpp[NVC_MFCFiles#7](../../atl-mfc-shared/reference/codesnippet/cpp/cfile-class_4.cpp)]  \n  \n##  <a name=\"cfile__getposition\"></a>  CFile::GetPosition  \n Obtains the current value of the file pointer, which can be used in subsequent calls to `Seek`.  \n  \n```  \nvirtual ULONGLONG GetPosition() const;\n\n \n```  \n  \n### Return Value  \n The file pointer.  \n  \n### Example  \n [!code-cpp[NVC_MFCFiles#8](../../atl-mfc-shared/reference/codesnippet/cpp/cfile-class_5.cpp)]  \n  \n##  <a name=\"cfile__getstatus\"></a>  CFile::GetStatus  \n This method retrieves status information related to a given `CFile` object instance or a given file path.  \n  \n```  \nBOOL GetStatus(\n    CFileStatus& rStatus) const;\n\n \n \nstatic BOOL PASCAL GetStatus(\n    LPCTSTR lpszFileName,  \n    CFileStatus& rStatus,\n    CAtlTransactionManager* pTM = NULL);\n```  \n  \n### Parameters  \n `rStatus`  \n A reference to a user-supplied **CFileStatus** structure that will receive the status information. The **CFileStatus** structure has the following fields:  \n  \n- **CTime m_ctime** The date and time the file was created.  \n  \n- **CTime m_mtime** The date and time the file was last modified.  \n  \n- **CTime m_atime** The date and time the file was last accessed for reading.  \n  \n- **ULONGLONG m_size** The logical size of the file in bytes, as reported by the DIR command.  \n  \n- **BYTE m_attribute** The attribute byte of the file.  \n  \n- **char m_szFullName[_MAX_PATH]** The absolute filename in the Windows character set.  \n  \n `lpszFileName`  \n A string in the Windows character set that is the path to the desired file. The path can be relative or absolute, or it can contain a network path name.  \n  \n `pTM`  \n Pointer to CAtlTransactionManager object  \n  \n### Return Value  \n **TRUE** if the status information for the specified file is successfully obtained; otherwise, **FALSE**.  \n  \n### Remarks  \n The non-static version of **GetStatus** retrieves status information of the open file associated with the given `CFile` object.  The static version of **GetStatus** obtains the file status from a given file path without actually opening the file. This is useful for testing the existence and access rights of a file.  \n  \n The **m_attribute** member of the **CFileStatus** structure refers to the file attribute set. The `CFile` class provides the **Attribute** enumeration type so file attributes can be specified symbolically:  \n  \n `enum Attribute {`  \n  \n `normal =    0x00,`  \n  \n `readOnly =  0x01,`  \n  \n `hidden =    0x02,`  \n  \n `system =    0x04,`  \n  \n `volume =    0x08,`  \n  \n `directory = 0x10,`  \n  \n `archive =   0x20`  \n  \n `};`  \n  \n### Example  \n [!code-cpp[NVC_MFCFiles#10](../../atl-mfc-shared/reference/codesnippet/cpp/cfile-class_6.cpp)]  \n  \n##  <a name=\"cfile__hfilenull\"></a>  CFile::hFileNull  \n Determines the presence of a valid file handle for the `CFile` object.  \n  \n```  \nstatic AFX_DATA const HANDLE hFileNull;  \n```  \n  \n### Remarks  \n This constant is used to determine if the `CFile` object has a valid file handle.  \n  \n The following example demonstrates this operation:  \n  \n [!code-cpp[NVC_MFCFiles#22](../../atl-mfc-shared/reference/codesnippet/cpp/cfile-class_7.cpp)]  \n  \n##  <a name=\"cfile__lockrange\"></a>  CFile::LockRange  \n Locks a range of bytes in an open file, throwing an exception if the file is already locked.  \n  \n```  \nvirtual void LockRange(\n    ULONGLONG dwPos,  \n    ULONGLONG dwCount);\n```  \n  \n### Parameters  \n `dwPos`  \n The byte offset of the start of the byte range to lock.  \n  \n `dwCount`  \n The number of bytes in the range to lock.  \n  \n### Remarks  \n Locking bytes in a file prevents access to those bytes by other processes. You can lock more than one region of a file, but no overlapping regions are allowed.  \n  \n When you unlock the region, using the `UnlockRange` member function, the byte range must correspond exactly to the region that was previously locked. The `LockRange` function does not merge adjacent regions; if two locked regions are adjacent, you must unlock each region separately.  \n  \n> [!NOTE]\n>  This function is not available for the `CMemFile`-derived class.  \n  \n### Example  \n [!code-cpp[NVC_MFCFiles#12](../../atl-mfc-shared/reference/codesnippet/cpp/cfile-class_8.cpp)]  \n  \n##  <a name=\"cfile__m_hfile\"></a>  CFile::m_hFile  \n Contains the operating-system file handle for an open file.  \n  \n```  \nHANDLE m_hFile;  \n```  \n  \n### Remarks  \n `m_hFile` is a public variable of type **UINT**. It contains `CFile::hFileNull` (an operating-system-independent empty file indicator) if the handle has not been assigned.  \n  \n Use of `m_hFile` is not recommended because the member's meaning depends on the derived class. `m_hFile` is made a public member for convenience in supporting nonpolymorphic use of the class.  \n  \n##  <a name=\"cfile__m_ptm\"></a>  CFile::m_pTM  \n Pointer to a `CAtlTransactionManager` object.  \n  \n```  \nCAtlTransactionManager* m_pTM;  \n```  \n  \n### Remarks  \n  \n##  <a name=\"cfile__open\"></a>  CFile::Open  \n Overloaded. **Open** is designed for use with the default `CFile` constructor.  \n  \n```  \nvirtual BOOL Open(\n    LPCTSTR lpszFileName,  \n    UINT nOpenFlags,  \n    CFileException* pError = NULL);\n\n \nvirtual BOOL Open(\n    LPCTSTR lpszFileName,\n    UINT nOpenFlags,\n    CAtlTransactionManager* pTM,\n    CFileException* pError = NULL);\n```  \n  \n### Parameters  \n `lpszFileName`  \n A string that is the path to the desired file. The path can be relative, absolute, or a network name (UNC).  \n  \n `nOpenFlags`  \n A **UINT** that defines the file's sharing and access mode. It specifies the action to take when opening the file. You can combine options by using the bitwise-OR ( **&#124;** ) operator. One access permission and one share option are required; the **modeCreate** and **modeNoInherit** modes are optional. See the [CFile](#cfile__cfile) constructor for a list of mode options.  \n  \n `pError`  \n A pointer to an existing file-exception object that will receive the status of a failed operation.  \n  \n `pTM`  \n Pointer to CAtlTransactionManager object  \n  \n### Return Value  \n Nonzero if the open was successful; otherwise 0. The `pError` parameter is meaningful only if 0 is returned.  \n  \n### Remarks  \n The two functions form a \"safe\" method for opening a file where a failure is a normal, expected condition.  \n  \n While the `CFile` constructor will throw an exception in an error condition, **Open** will return **FALSE** for error conditions. **Open** can still initialize a [CFileException](../../mfc/reference/cfileexception-class.md) object to describe the error, however. If you don't supply the `pError` parameter, or if you pass **NULL** for `pError`, **Open** will return **FALSE** and not throw a `CFileException`. If you pass a pointer to an existing `CFileException`, and **Open** encounters an error, the function will fill it with information describing that error. In neither case will **Open** throw an exception.  \n  \n The following table describes the possible results of **Open**.  \n  \n|`pError`|Error encountered|Return value|CFileException content|  \n|--------------|------------------------|------------------|----------------------------|  \n|**NULL**|No|**TRUE**|n/a|  \n|ptr to `CFileException`|No|**TRUE**|unchanged|  \n|**NULL**|Yes|**FALSE**|n/a|  \n|ptr to `CFileException`|Yes|**FALSE**|initialized to describe error|  \n  \n### Example  \n [!code-cpp[NVC_MFCFiles#13](../../atl-mfc-shared/reference/codesnippet/cpp/cfile-class_9.cpp)]  \n  \n [!code-cpp[NVC_MFCFiles#14](../../atl-mfc-shared/reference/codesnippet/cpp/cfile-class_10.cpp)]  \n  \n##  <a name=\"cfile__operator_handle\"></a>  CFile::operator HANDLE  \n Use this operator to pass a handle to a `CFile` object to functions such as [ReadFileEx](http://msdn.microsoft.com/library/windows/desktop/aa365468) and [GetFileTime](http://msdn.microsoft.com/library/windows/desktop/ms724320) that expect a `HANDLE`.  \n  \n```  \noperator HANDLE() const;\n\n \n```  \n  \n##  <a name=\"cfile__read\"></a>  CFile::Read  \n Reads data into a buffer from the file associated with the `CFile` object.  \n  \n```  \nvirtual UINT Read(\n    void* lpBuf,  \n    UINT nCount);\n```  \n  \n### Parameters  \n `lpBuf`  \n Pointer to the user-supplied buffer that is to receive the data read from the file.  \n  \n `nCount`  \n The maximum number of bytes to be read from the file. For text-mode files, carriage return–linefeed pairs are counted as single characters.  \n  \n### Return Value  \n The number of bytes transferred to the buffer. Note that for all `CFile` classes, the return value may be less than `nCount` if the end of file was reached.  \n  \n### Example  \n [!code-cpp[NVC_MFCFiles#15](../../atl-mfc-shared/reference/codesnippet/cpp/cfile-class_11.cpp)]  \n  \n For another example see [CFile::Open](#cfile__open).  \n  \n##  <a name=\"cfile__remove\"></a>  CFile::Remove  \n This static function deletes the file specified by the path.  \n  \n```  \nstatic void PASCAL Remove(\n    LPCTSTR lpszFileName, CAtlTransactionManager* pTM = NULL);\n```  \n  \n### Parameters  \n `lpszFileName`  \n A string that is the path to the desired file. The path can be relative or absolute, and can contain a network name.  \n  \n `pTM`  \n Pointer to CAtlTransactionManager object  \n  \n### Remarks  \n It will not remove a directory.  \n  \n The **Remove** member function throws an exception if the connected file is open or if the file cannot be removed. This is equivalent to the DEL command.  \n  \n### Example  \n [!code-cpp[NVC_MFCFiles#17](../../atl-mfc-shared/reference/codesnippet/cpp/cfile-class_12.cpp)]  \n  \n##  <a name=\"cfile__rename\"></a>  CFile::Rename  \n This static function renames the specified file.  \n  \n```  \nstatic void PASCAL Rename(\n    LPCTSTR lpszOldName,  \n    LPCTSTR lpszNewName,  \n    CAtlTransactionManager* pTM = NULL);\n```  \n  \n### Parameters  \n `lpszOldName`  \n The old path.  \n  \n `lpszNewName`  \n The new path.  \n  \n `pTM`  \n Pointer to CAtlTransactionManager object  \n  \n### Remarks  \n Directories cannot be renamed. This is equivalent to the REN command.  \n  \n### Example  \n [!code-cpp[NVC_MFCFiles#18](../../atl-mfc-shared/reference/codesnippet/cpp/cfile-class_13.cpp)]  \n  \n##  <a name=\"cfile__seek\"></a>  CFile::Seek  \n Repositions the file pointer in an open file.  \n  \n```  \n \nvirtual ULONGLONG Seek(\nLONGLONG lOff,  \nUINT nFrom);\n```  \n  \n### Parameters  \n `lOff`  \n Number of bytes to move the file pointer. Positive values move the file pointer towards the end of the file; negative values move the file pointer towards the start of the file.  \n  \n `nFrom`  \n Position to seek from. See the Remarks section for possible values.  \n  \n### Return Value  \n The position of the file pointer if the method was successful; otherwise, the return value is undefined and a pointer to a `CFileException` exception is thrown.  \n  \n### Remarks  \n The following table lists possible values for the `nFrom` parameter.  \n  \n|Value|Description|  \n|-----------|-----------------|  \n|`CFile::begin`|Seek from the start of the file.|  \n|`CFile::current`|Seek from the current location of the file pointer.|  \n|`CFile::end`|Seek from the end of the file.|  \n  \n When a file is opened, the file pointer is positioned at 0, the start of the file.  \n  \n You can set the file pointer to a position beyond the end of a file. If you do this, the size of the file does not increase until you write to the file.  \n  \n The exception handler for this method must delete the exception object after the exception is processed.  \n  \n### Example  \n [!code-cpp[NVC_MFCFiles#9](../../atl-mfc-shared/reference/codesnippet/cpp/cfile-class_14.cpp)]  \n  \n##  <a name=\"cfile__seektobegin\"></a>  CFile::SeekToBegin  \n Sets the value of the file pointer to the beginning of the file.  \n  \n```  \nvoid SeekToBegin();\n```  \n  \n### Remarks  \n `SeekToBegin()` is equivalent to `Seek( 0L, CFile::begin )`.  \n  \n### Example  \n [!code-cpp[NVC_MFCFiles#19](../../atl-mfc-shared/reference/codesnippet/cpp/cfile-class_15.cpp)]  \n  \n##  <a name=\"cfile__seektoend\"></a>  CFile::SeekToEnd  \n Sets the value of the file pointer to the logical end of the file.  \n  \n```  \nULONGLONG SeekToEnd();\n```  \n  \n### Return Value  \n The length of the file in bytes.  \n  \n### Remarks  \n `SeekToEnd()` is equivalent to `CFile::Seek( 0L, CFile::end )`.  \n  \n### Example  \n [!code-cpp[NVC_MFCFiles#19](../../atl-mfc-shared/reference/codesnippet/cpp/cfile-class_15.cpp)]  \n  \n##  <a name=\"cfile__setfilepath\"></a>  CFile::SetFilePath  \n Call this function to specify the path of the file; for example, if the path of a file is not available when a [CFile](../../mfc/reference/cfile-class.md) object is constructed, call `SetFilePath` to provide it.  \n  \n```  \nvirtual void SetFilePath(LPCTSTR lpszNewName);\n```  \n  \n### Parameters  \n `lpszNewName`  \n Pointer to a string specifying the new path.  \n  \n### Remarks  \n  \n> [!NOTE]\n> `SetFilePath` does not open the file or create the file; it simply associates the `CFile` object with a path name, which can then be used.  \n  \n### Example  \n [!code-cpp[NVC_MFCFiles#20](../../atl-mfc-shared/reference/codesnippet/cpp/cfile-class_16.cpp)]  \n  \n##  <a name=\"cfile__setlength\"></a>  CFile::SetLength  \n Call this function to change the length of the file.  \n  \n```  \nvirtual void SetLength(ULONGLONG dwNewLen);\n```  \n  \n### Parameters  \n `dwNewLen`  \n Desired length of the file in bytes. This value can be larger or smaller than the current length of the file. The file will be extended or truncated as appropriate.  \n  \n### Remarks  \n  \n> [!NOTE]\n>  With `CMemFile`, this function could throw a `CMemoryException` object.  \n  \n### Example  \n [!code-cpp[NVC_MFCFiles#11](../../atl-mfc-shared/reference/codesnippet/cpp/cfile-class_17.cpp)]  \n  \n##  <a name=\"cfile__setstatus\"></a>  CFile::SetStatus  \n Sets the status of the file associated with this file location.  \n  \n```  \nstatic void PASCAL SetStatus(\n    LPCTSTR lpszFileName,  \n    const CFileStatus& status,  \n    CAtlTransactionManager* pTM = NULL);\n```  \n  \n### Parameters  \n `lpszFileName`  \n A string that is the path to the desired file. The path can be relative or absolute, and can contain a network name.  \n  \n *status*  \n The buffer containing the new status information. Call the **GetStatus** member function to prefill the **CFileStatus** structure with current values, then make changes as required. If a value is 0, then the corresponding status item is not updated. See the [GetStatus](#cfile__getstatus) member function for a description of the **CFileStatus** structure.  \n  \n `pTM`  \n Pointer to CAtlTransactionManager object  \n  \n### Remarks  \n To set the time, modify the **m_mtime** field of *status*.  \n  \n Please note that when you make a call to `SetStatus` in an attempt to change only the attributes of the file, and the **m_mtime** member of the file status structure is nonzero, the attributes may also be affected (changing the time stamp may have side effects on the attributes). If you want to only change the attributes of the file, first set the **m_mtime** member of the file status structure to zero and then make a call to `SetStatus`.  \n  \n### Example  \n [!code-cpp[NVC_MFCFiles#21](../../atl-mfc-shared/reference/codesnippet/cpp/cfile-class_18.cpp)]  \n  \n##  <a name=\"cfile__unlockrange\"></a>  CFile::UnlockRange  \n Unlocks a range of bytes in an open file.  \n  \n```  \nvirtual void UnlockRange(\n    ULONGLONG dwPos,  \n    ULONGLONG dwCount);\n```  \n  \n### Parameters  \n `dwPos`  \n The byte offset of the start of the byte range to unlock.  \n  \n `dwCount`  \n The number of bytes in the range to unlock.  \n  \n### Remarks  \n See the description of the [LockRange](#cfile__lockrange) member function for details.  \n  \n> [!NOTE]\n>  This function is not available for the `CMemFile`-derived class.  \n  \n### Example  \n [!code-cpp[NVC_MFCFiles#12](../../atl-mfc-shared/reference/codesnippet/cpp/cfile-class_8.cpp)]  \n  \n##  <a name=\"cfile__write\"></a>  CFile::Write  \n Writes data from a buffer to the file associated with the `CFile` object.  \n  \n```  \nvirtual void Write(\n    const void* lpBuf,  \n    UINT nCount);\n```  \n  \n### Parameters  \n `lpBuf`  \n A pointer to the user-supplied buffer that contains the data to be written to the file.  \n  \n `nCount`  \n The number of bytes to be transferred from the buffer. For text-mode files, carriage return–linefeed pairs are counted as single characters.  \n  \n### Remarks  \n **Write** throws an exception in response to several conditions, including the disk-full condition.  \n  \n### Example  \n [!code-cpp[NVC_MFCFiles#16](../../atl-mfc-shared/reference/codesnippet/cpp/cfile-class_19.cpp)]  \n  \n In addition, see the examples for [CFile::CFile](#cfile__cfile) and [CFile::Open](#cfile__open).  \n  \n## See Also  \n [MFC Sample DRAWCLI](../../visual-cpp-samples.md)   \n [CObject Class](../../mfc/reference/cobject-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CStdioFile Class](../../mfc/reference/cstdiofile-class.md)   \n [CMemFile Class](../../mfc/reference/cmemfile-class.md)\n"}