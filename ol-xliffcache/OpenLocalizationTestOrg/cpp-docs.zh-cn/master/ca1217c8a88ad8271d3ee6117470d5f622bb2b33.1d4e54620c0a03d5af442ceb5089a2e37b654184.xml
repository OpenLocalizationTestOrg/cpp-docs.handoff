{"nodes":[{"pos":[12,61],"content":"Compiler Warning (level 3) C4800 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Warning (level 3) C4800 | Microsoft Docs","pos":[0,49]}]},{"content":"Compiler Warning (level 3) C4800","pos":[609,641]},{"content":"'type' : forcing value to bool 'true' or 'false' (performance warning)","pos":[642,712]},{"content":"This warning is generated when a value that is not <ph id=\"ph1\">`bool`</ph> is assigned or coerced into type <ph id=\"ph2\">`bool`</ph>.","pos":[719,817],"source":"This warning is generated when a value that is not `bool` is assigned or coerced into type `bool`."},{"content":"Typically, this message is caused by assigning <ph id=\"ph1\">`int`</ph> variables to <ph id=\"ph2\">`bool`</ph> variables where the <ph id=\"ph3\">`int`</ph> variable contains only values <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>, and could be redeclared as type <ph id=\"ph4\">`bool`</ph>.","pos":[818,1010],"source":" Typically, this message is caused by assigning `int` variables to `bool` variables where the `int` variable contains only values **true** and **false**, and could be redeclared as type `bool`."},{"content":"If you cannot rewrite the expression to use type <ph id=\"ph1\">`bool`</ph>, then you can add \"<ph id=\"ph2\">`!=0`</ph>\" to the expression, which gives the expression type <ph id=\"ph3\">`bool`</ph>.","pos":[1011,1151],"source":" If you cannot rewrite the expression to use type `bool`, then you can add \"`!=0`\" to the expression, which gives the expression type `bool`."},{"content":"Casting the expression to type <ph id=\"ph1\">`bool`</ph> will not disable the warning, which is by design.","pos":[1152,1239],"source":" Casting the expression to type `bool` will not disable the warning, which is by design."},{"content":"The following sample generates C4800:","pos":[1246,1283]}],"content":"---\ntitle: \"Compiler Warning (level 3) C4800 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"C4800\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C4800\"\nms.assetid: 4f409799-a250-45ed-bb5f-657691b0d9f7\ncaps.latest.revision: 6\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Compiler Warning (level 3) C4800\n'type' : forcing value to bool 'true' or 'false' (performance warning)  \n  \n This warning is generated when a value that is not `bool` is assigned or coerced into type `bool`. Typically, this message is caused by assigning `int` variables to `bool` variables where the `int` variable contains only values **true** and **false**, and could be redeclared as type `bool`. If you cannot rewrite the expression to use type `bool`, then you can add \"`!=0`\" to the expression, which gives the expression type `bool`. Casting the expression to type `bool` will not disable the warning, which is by design.  \n  \n The following sample generates C4800:  \n  \n```  \n// C4800.cpp  \n// compile with: /W3  \nint main() {  \n   int i = 0;  \n  \n   // try..  \n   // bool i = 0;  \n  \n   bool j = i;   // C4800  \n   j++;  \n}  \n```"}