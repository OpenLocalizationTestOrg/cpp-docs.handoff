{"nodes":[{"pos":[12,57],"content":"String Literal Concatenation | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"String Literal Concatenation | Microsoft Docs","pos":[0,45]}]},{"content":"String Literal Concatenation","pos":[630,658]},{"content":"To form string literals that take up more than one line, you can concatenate the two strings.","pos":[659,752]},{"content":"To do this, type a backslash, then press the RETURN key.","pos":[753,809]},{"content":"The backslash causes the compiler to ignore the following newline character.","pos":[810,886]},{"content":"For example, the string literal","pos":[887,918]},{"content":"is identical to the string","pos":[1000,1026]},{"content":"String concatenation can be used anywhere you might previously have used a backslash followed by a newline character to enter strings longer than one line.","pos":[1104,1259]},{"pos":[1266,1424],"content":"To force a new line within a string literal, enter the newline escape sequence (<bpt id=\"p1\">**</bpt>\\n<ept id=\"p1\">**</ept>) at the point in the string where you want the line broken, as follows:","source":"To force a new line within a string literal, enter the newline escape sequence (**\\n**) at the point in the string where you want the line broken, as follows:"},{"content":"Because strings can start in any column of the source code and long strings can be continued in any column of a succeeding line, you can position strings to enhance source-code readability.","pos":[1500,1689]},{"content":"In either case, their on-screen representation when output is unaffected.","pos":[1690,1763]},{"content":"For example:","pos":[1764,1776]},{"content":"As long as each part of the string is enclosed in double quotation marks, the parts are concatenated and output as a single string.","pos":[1895,2026]},{"content":"This concatenation occurs according to the sequence of events during compilation specified by <bpt id=\"p1\">[</bpt>translation phases<ept id=\"p1\">](../preprocessor/phases-of-translation.md)</ept>.","pos":[2027,2184],"source":" This concatenation occurs according to the sequence of events during compilation specified by [translation phases](../preprocessor/phases-of-translation.md)."},{"content":"A string pointer, initialized as two distinct string literals separated only by white space, is stored as a single string (pointers are discussed in <bpt id=\"p1\">[</bpt>Pointer Declarations<ept id=\"p1\">](../c-language/pointer-declarations.md)</ept>).","pos":[2272,2484],"source":"A string pointer, initialized as two distinct string literals separated only by white space, is stored as a single string (pointers are discussed in [Pointer Declarations](../c-language/pointer-declarations.md))."},{"content":"When properly referenced, as in the following example, the result is identical to the previous example:","pos":[2485,2588]},{"content":"In translation phase 6, the multibyte-character sequences specified by any sequence of adjacent string literals or adjacent wide-string literals are concatenated into a single multibyte-character sequence.","pos":[2745,2950]},{"content":"Therefore, do not design programs to allow modification of string literals during execution.","pos":[2951,3043]},{"content":"The ANSI C standard specifies that the result of modifying a string is undefined.","pos":[3044,3125]},{"content":"See Also","pos":[3134,3142]},{"content":"C String Literals","pos":[3147,3164]}],"content":"---\ntitle: \"String Literal Concatenation | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"concatenating strings\"\n  - \"strings [C++], concatenating\"\nms.assetid: 51486b1f-4b1e-4061-9add-1aa38c6cdb3c\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# String Literal Concatenation\nTo form string literals that take up more than one line, you can concatenate the two strings. To do this, type a backslash, then press the RETURN key. The backslash causes the compiler to ignore the following newline character. For example, the string literal  \n  \n```  \n\"Long strings can be bro\\  \nken into two or more pieces.\"  \n```  \n  \n is identical to the string  \n  \n```  \n\"Long strings can be broken into two or more pieces.\"  \n```  \n  \n String concatenation can be used anywhere you might previously have used a backslash followed by a newline character to enter strings longer than one line.  \n  \n To force a new line within a string literal, enter the newline escape sequence (**\\n**) at the point in the string where you want the line broken, as follows:  \n  \n```  \n\"Enter a number between 1 and 100\\nOr press Return\"  \n```  \n  \n Because strings can start in any column of the source code and long strings can be continued in any column of a succeeding line, you can position strings to enhance source-code readability. In either case, their on-screen representation when output is unaffected. For example:  \n  \n```  \nprintf_s ( \"This is the first half of the string, \"  \n           \"this is the second half \") ;  \n```  \n  \n As long as each part of the string is enclosed in double quotation marks, the parts are concatenated and output as a single string. This concatenation occurs according to the sequence of events during compilation specified by [translation phases](../preprocessor/phases-of-translation.md).  \n  \n```  \n\"This is the first half of the string, this is the second half\"  \n```  \n  \n A string pointer, initialized as two distinct string literals separated only by white space, is stored as a single string (pointers are discussed in [Pointer Declarations](../c-language/pointer-declarations.md)). When properly referenced, as in the following example, the result is identical to the previous example:  \n  \n```  \nchar *string = \"This is the first half of the string, \"  \n               \"this is the second half\";  \n  \nprintf_s( \"%s\" , string ) ;  \n```  \n  \n In translation phase 6, the multibyte-character sequences specified by any sequence of adjacent string literals or adjacent wide-string literals are concatenated into a single multibyte-character sequence. Therefore, do not design programs to allow modification of string literals during execution. The ANSI C standard specifies that the result of modifying a string is undefined.  \n  \n## See Also  \n [C String Literals](../c-language/c-string-literals.md)"}