{"nodes":[{"pos":[12,61],"content":"Generic-Text Mappings in Tchar.h | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Generic-Text Mappings in Tchar.h | Microsoft Docs","pos":[0,49]}]},{"content":"Generic-Text Mappings in Tchar.h","pos":[847,879]},{"content":"To simplify the transporting of code for international use, the <ph id=\"ph1\">[!INCLUDE[TLA#tla_ms](../text/includes/tlasharptla_ms_md.md)]</ph> run-time library provides <ph id=\"ph2\">[!INCLUDE[TLA#tla_ms](../text/includes/tlasharptla_ms_md.md)]</ph>-specific generic-text mappings for many data types, routines, and other objects.","pos":[880,1174],"source":"To simplify the transporting of code for international use, the [!INCLUDE[TLA#tla_ms](../text/includes/tlasharptla_ms_md.md)] run-time library provides [!INCLUDE[TLA#tla_ms](../text/includes/tlasharptla_ms_md.md)]-specific generic-text mappings for many data types, routines, and other objects."},{"content":"You can use these mappings, which are defined in Tchar.h, to write generic code that can be compiled for single-byte, multibyte, or <ph id=\"ph1\">[!INCLUDE[TLA#tla_unicode](../atl-mfc-shared/reference/includes/tlasharptla_unicode_md.md)]</ph> character sets, depending on a manifest constant that you define by using a <ph id=\"ph2\">`#define`</ph> statement.","pos":[1175,1495],"source":" You can use these mappings, which are defined in Tchar.h, to write generic code that can be compiled for single-byte, multibyte, or [!INCLUDE[TLA#tla_unicode](../atl-mfc-shared/reference/includes/tlasharptla_unicode_md.md)] character sets, depending on a manifest constant that you define by using a `#define` statement."},{"content":"Generic-text mappings are <ph id=\"ph1\">[!INCLUDE[TLA#tla_ms](../text/includes/tlasharptla_ms_md.md)]</ph> extensions that are not <ph id=\"ph2\">[!INCLUDE[vcpransi](../atl-mfc-shared/reference/includes/vcpransi_md.md)]</ph> compatible.","pos":[1496,1693],"source":" Generic-text mappings are [!INCLUDE[TLA#tla_ms](../text/includes/tlasharptla_ms_md.md)] extensions that are not [!INCLUDE[vcpransi](../atl-mfc-shared/reference/includes/vcpransi_md.md)] compatible."},{"content":"By using the Tchar.h, you can build single-byte, Multibyte Character Set (MBCS), and <ph id=\"ph1\">[!INCLUDE[TLA#tla_unicode](../atl-mfc-shared/reference/includes/tlasharptla_unicode_md.md)]</ph> applications from the same sources.","pos":[1700,1912],"source":"By using the Tchar.h, you can build single-byte, Multibyte Character Set (MBCS), and [!INCLUDE[TLA#tla_unicode](../atl-mfc-shared/reference/includes/tlasharptla_unicode_md.md)] applications from the same sources."},{"content":"Tchar.h defines macros (which have the prefix <ph id=\"ph1\">`_tcs`</ph>) that, with the correct preprocessor definitions, map to <ph id=\"ph2\">`str`</ph>, <ph id=\"ph3\">`_mbs`</ph>, or <ph id=\"ph4\">`wcs`</ph> functions, as appropriate.","pos":[1913,2073],"source":" Tchar.h defines macros (which have the prefix `_tcs`) that, with the correct preprocessor definitions, map to `str`, `_mbs`, or `wcs` functions, as appropriate."},{"content":"To build MBCS, define the symbol <ph id=\"ph1\">`_MBCS`</ph>.","pos":[2074,2115],"source":" To build MBCS, define the symbol `_MBCS`."},{"content":"To build <ph id=\"ph1\">[!INCLUDE[TLA#tla_unicode](../atl-mfc-shared/reference/includes/tlasharptla_unicode_md.md)]</ph>, define the symbol <ph id=\"ph2\">`_UNICODE`</ph>.","pos":[2116,2247],"source":" To build [!INCLUDE[TLA#tla_unicode](../atl-mfc-shared/reference/includes/tlasharptla_unicode_md.md)], define the symbol `_UNICODE`."},{"content":"To build a single-byte application, define neither (the default).","pos":[2248,2313]},{"content":"By default, <ph id=\"ph1\">`_MBCS`</ph> is defined for MFC applications.","pos":[2314,2366],"source":" By default, `_MBCS` is defined for MFC applications."},{"content":"The <ph id=\"ph1\">`_TCHAR`</ph> data type is defined conditionally in Tchar.h.","pos":[2373,2432],"source":"The `_TCHAR` data type is defined conditionally in Tchar.h."},{"content":"If the symbol <ph id=\"ph1\">`_UNICODE`</ph> is defined for your build, <ph id=\"ph2\">`_TCHAR`</ph> is defined as <ph id=\"ph3\">`wchar_t`</ph>; otherwise, for single-byte and MBCS builds, it is defined as <ph id=\"ph4\">`char`</ph>.","pos":[2433,2587],"source":" If the symbol `_UNICODE` is defined for your build, `_TCHAR` is defined as `wchar_t`; otherwise, for single-byte and MBCS builds, it is defined as `char`."},{"content":"(<ph id=\"ph1\">`wchar_t`</ph>, the basic Unicode wide-character data type, is the 16-bit counterpart to an 8-bit signed <ph id=\"ph2\">`char`</ph>.) For international applications, use the <ph id=\"ph3\">`_tcs`</ph> family of functions, which operate in <ph id=\"ph4\">`_TCHAR`</ph> units, not bytes.","pos":[2588,2809],"source":" (`wchar_t`, the basic Unicode wide-character data type, is the 16-bit counterpart to an 8-bit signed `char`.) For international applications, use the `_tcs` family of functions, which operate in `_TCHAR` units, not bytes."},{"content":"For example, <ph id=\"ph1\">`_tcsncpy`</ph> copies <ph id=\"ph2\">`n`</ph> <ph id=\"ph3\">`_TCHARs`</ph>, not <ph id=\"ph4\">`n`</ph> bytes.","pos":[2810,2870],"source":" For example, `_tcsncpy` copies `n` `_TCHARs`, not `n` bytes."},{"content":"Because some Single Byte Character Set (SBCS) string-handling functions take (signed) <ph id=\"ph1\">`char*`</ph> parameters, a type mismatch compiler warning results when <ph id=\"ph2\">`_MBCS`</ph> is defined.","pos":[2877,3048],"source":"Because some Single Byte Character Set (SBCS) string-handling functions take (signed) `char*` parameters, a type mismatch compiler warning results when `_MBCS` is defined."},{"content":"There are three ways to avoid this warning:","pos":[3049,3092]},{"content":"Use the type-safe inline function thunks in Tchar.h.","pos":[3102,3154]},{"content":"This is the default behavior.","pos":[3155,3184]},{"content":"Use the direct macros in Tchar.h by defining <ph id=\"ph1\">`_MB_MAP_DIRECT`</ph> on the command line.","pos":[3194,3276],"source":"Use the direct macros in Tchar.h by defining `_MB_MAP_DIRECT` on the command line."},{"content":"If you do this, you must manually match types.","pos":[3277,3323]},{"content":"This is the fastest method, but is not type-safe.","pos":[3324,3373]},{"content":"Use the type-safe statically linked library function thunks in Tchar.h.","pos":[3383,3454]},{"content":"To do so, define the constant <ph id=\"ph1\">`_NO_INLINING`</ph> on the command line.","pos":[3455,3520],"source":" To do so, define the constant `_NO_INLINING` on the command line."},{"content":"This is the slowest method, but the most type-safe.","pos":[3521,3572]},{"content":"Preprocessor Directives for Generic-Text Mappings","pos":[3582,3631]},{"content":"define","pos":[3640,3646]},{"content":"Compiled version","pos":[3647,3663]},{"content":"Example","pos":[3664,3671]},{"pos":[3836,3852],"content":"(wide-character)"},{"pos":[3863,3870],"content":"maps to"},{"content":"Multibyte-character","pos":[3893,3912]},{"pos":[3923,3930],"content":"maps to"},{"pos":[3945,4006],"content":"None (the default has neither <ph id=\"ph1\">`_UNICODE`</ph> nor <ph id=\"ph2\">`_MBCS`</ph> defined)","source":"None (the default has neither `_UNICODE` nor `_MBCS` defined)"},{"pos":[4007,4081],"content":"SBCS (<ph id=\"ph1\">[!INCLUDE[TLA#tla_ascii](../text/includes/tlasharptla_ascii_md.md)]</ph>)","source":"SBCS ([!INCLUDE[TLA#tla_ascii](../text/includes/tlasharptla_ascii_md.md)])"},{"pos":[4092,4099],"content":"maps to"},{"content":"For example, the generic-text function <ph id=\"ph1\">`_tcsrev`</ph>, which is defined in Tchar.h, maps to <ph id=\"ph2\">`_mbsrev`</ph> if you defined <ph id=\"ph3\">`_MBCS`</ph> in your program, or to <ph id=\"ph4\">`_wcsrev`</ph> if you defined <ph id=\"ph5\">`_UNICODE`</ph>.","pos":[4116,4295],"source":"For example, the generic-text function `_tcsrev`, which is defined in Tchar.h, maps to `_mbsrev` if you defined `_MBCS` in your program, or to `_wcsrev` if you defined `_UNICODE`."},{"content":"Otherwise, <ph id=\"ph1\">`_tcsrev`</ph> maps to <ph id=\"ph2\">`strrev`</ph>.","pos":[4296,4334],"source":" Otherwise, `_tcsrev` maps to `strrev`."},{"content":"Other data type mappings are provided in Tchar.h for programming convenience, but <ph id=\"ph1\">`_TCHAR`</ph> is the most useful.","pos":[4335,4445],"source":" Other data type mappings are provided in Tchar.h for programming convenience, but `_TCHAR` is the most useful."},{"content":"Generic-Text Data Type Mappings","pos":[4455,4486]},{"content":"Generic-Text","pos":[4493,4505]},{"content":"Data Type Name","pos":[4518,4532]},{"content":"_UNICODE &amp;","pos":[4533,4543],"source":"_UNICODE &"},{"content":"_MBCS Not Defined","pos":[4556,4573]},{"content":"_MBCS","pos":[4574,4579]},{"content":"Defined","pos":[4592,4599]},{"content":"_UNICODE","pos":[4600,4608]},{"content":"Defined","pos":[4621,4628]},{"pos":[5009,5011],"content":"or"},{"content":"No effect (removed by preprocessor)","pos":[5020,5055]},{"content":"No effect (removed by preprocessor)","pos":[5056,5091]},{"pos":[5096,5251],"content":"(converts the following character or string to its <ph id=\"ph1\">[!INCLUDE[TLA#tla_unicode](../atl-mfc-shared/reference/includes/tlasharptla_unicode_md.md)]</ph> counterpart)","source":" (converts the following character or string to its [!INCLUDE[TLA#tla_unicode](../atl-mfc-shared/reference/includes/tlasharptla_unicode_md.md)] counterpart)"},{"pos":[5259,5447],"content":"For a list of generic-text mappings of routines, variables, and other objects, see <bpt id=\"p1\">[</bpt>Generic-Text Mappings<ept id=\"p1\">](../c-runtime-library/generic-text-mappings.md)</ept> in the Run-Time Library Reference.","source":"For a list of generic-text mappings of routines, variables, and other objects, see [Generic-Text Mappings](../c-runtime-library/generic-text-mappings.md) in the Run-Time Library Reference."},{"pos":[5455,5658],"content":"[!NOTE]\n Do not use the `str` family of functions with Unicode strings, which are likely to contain embedded null bytes. Similarly, do not use the `wcs` family of functions with MBCS (or SBCS) strings.","leadings":["","> "],"nodes":[{"content":" Do not use the `str` family of functions with Unicode strings, which are likely to contain embedded null bytes. Similarly, do not use the `wcs` family of functions with MBCS (or SBCS) strings.","pos":[8,201],"nodes":[{"content":"Do not use the <ph id=\"ph1\">`str`</ph> family of functions with Unicode strings, which are likely to contain embedded null bytes.","pos":[1,112],"source":" Do not use the `str` family of functions with Unicode strings, which are likely to contain embedded null bytes."},{"content":"Similarly, do not use the <ph id=\"ph1\">`wcs`</ph> family of functions with MBCS (or SBCS) strings.","pos":[113,193],"source":" Similarly, do not use the `wcs` family of functions with MBCS (or SBCS) strings."}]}]},{"pos":[5665,5873],"content":"The following code fragments illustrate the use of <ph id=\"ph1\">`_TCHAR`</ph> and <ph id=\"ph2\">`_tcsrev`</ph> for mapping to the MBCS, <ph id=\"ph3\">[!INCLUDE[TLA#tla_unicode](../atl-mfc-shared/reference/includes/tlasharptla_unicode_md.md)]</ph>, and SBCS models.","source":"The following code fragments illustrate the use of `_TCHAR` and `_tcsrev` for mapping to the MBCS, [!INCLUDE[TLA#tla_unicode](../atl-mfc-shared/reference/includes/tlasharptla_unicode_md.md)], and SBCS models."},{"pos":[5954,6032],"content":"If <ph id=\"ph1\">`_MBCS`</ph> has been defined, the preprocessor maps this fragment to this code:","source":"If `_MBCS` has been defined, the preprocessor maps this fragment to this code:"},{"pos":[6111,6192],"content":"If <ph id=\"ph1\">`_UNICODE`</ph> has been defined, the preprocessor maps this fragment to this code:","source":"If `_UNICODE` has been defined, the preprocessor maps this fragment to this code:"},{"pos":[6274,6462],"content":"If neither <ph id=\"ph1\">`_MBCS`</ph> nor <ph id=\"ph2\">`_UNICODE`</ph> have been defined, the preprocessor maps the fragment to single-byte <ph id=\"ph3\">[!INCLUDE[TLA#tla_ascii](../text/includes/tlasharptla_ascii_md.md)]</ph> code, as follows:","source":"If neither `_MBCS` nor `_UNICODE` have been defined, the preprocessor maps the fragment to single-byte [!INCLUDE[TLA#tla_ascii](../text/includes/tlasharptla_ascii_md.md)] code, as follows:"},{"content":"Therefore, you can write, maintain, and compile a single-source code file to run with routines that are specific to any of the three kinds of character sets.","pos":[6540,6697]},{"content":"See Also","pos":[6706,6714]},{"content":"Text and Strings","pos":[6719,6735]},{"content":"Using TCHAR.H Data Types with _MBCS Code","pos":[6785,6825]}],"content":"---\ntitle: \"Generic-Text Mappings in Tchar.h | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"tchar.h\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"mapping generic-text\"\n  - \"generic-text mappings [C++]\"\n  - \"character sets [C++], generic-text mappings\"\n  - \"Unicode [C++], generic-text mappings\"\n  - \"MBCS [C++], generic-text mappings\"\n  - \"TCHAR.H data types, mapping\"\n  - \"mappings [C++], TCHAR.H\"\nms.assetid: 01e1bb74-5a01-4093-8720-68b6c1fdda80\ncaps.latest.revision: 12\nauthor: \"ghogen\"\nms.author: \"ghogen\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Generic-Text Mappings in Tchar.h\nTo simplify the transporting of code for international use, the [!INCLUDE[TLA#tla_ms](../text/includes/tlasharptla_ms_md.md)] run-time library provides [!INCLUDE[TLA#tla_ms](../text/includes/tlasharptla_ms_md.md)]-specific generic-text mappings for many data types, routines, and other objects. You can use these mappings, which are defined in Tchar.h, to write generic code that can be compiled for single-byte, multibyte, or [!INCLUDE[TLA#tla_unicode](../atl-mfc-shared/reference/includes/tlasharptla_unicode_md.md)] character sets, depending on a manifest constant that you define by using a `#define` statement. Generic-text mappings are [!INCLUDE[TLA#tla_ms](../text/includes/tlasharptla_ms_md.md)] extensions that are not [!INCLUDE[vcpransi](../atl-mfc-shared/reference/includes/vcpransi_md.md)] compatible.  \n  \n By using the Tchar.h, you can build single-byte, Multibyte Character Set (MBCS), and [!INCLUDE[TLA#tla_unicode](../atl-mfc-shared/reference/includes/tlasharptla_unicode_md.md)] applications from the same sources. Tchar.h defines macros (which have the prefix `_tcs`) that, with the correct preprocessor definitions, map to `str`, `_mbs`, or `wcs` functions, as appropriate. To build MBCS, define the symbol `_MBCS`. To build [!INCLUDE[TLA#tla_unicode](../atl-mfc-shared/reference/includes/tlasharptla_unicode_md.md)], define the symbol `_UNICODE`. To build a single-byte application, define neither (the default). By default, `_MBCS` is defined for MFC applications.  \n  \n The `_TCHAR` data type is defined conditionally in Tchar.h. If the symbol `_UNICODE` is defined for your build, `_TCHAR` is defined as `wchar_t`; otherwise, for single-byte and MBCS builds, it is defined as `char`. (`wchar_t`, the basic Unicode wide-character data type, is the 16-bit counterpart to an 8-bit signed `char`.) For international applications, use the `_tcs` family of functions, which operate in `_TCHAR` units, not bytes. For example, `_tcsncpy` copies `n` `_TCHARs`, not `n` bytes.  \n  \n Because some Single Byte Character Set (SBCS) string-handling functions take (signed) `char*` parameters, a type mismatch compiler warning results when `_MBCS` is defined. There are three ways to avoid this warning:  \n  \n1.  Use the type-safe inline function thunks in Tchar.h. This is the default behavior.  \n  \n2.  Use the direct macros in Tchar.h by defining `_MB_MAP_DIRECT` on the command line. If you do this, you must manually match types. This is the fastest method, but is not type-safe.  \n  \n3.  Use the type-safe statically linked library function thunks in Tchar.h. To do so, define the constant `_NO_INLINING` on the command line. This is the slowest method, but the most type-safe.  \n  \n### Preprocessor Directives for Generic-Text Mappings  \n  \n|# define|Compiled version|Example|  \n|---------------|----------------------|-------------|  \n|`_UNICODE`|[!INCLUDE[TLA#tla_unicode](../atl-mfc-shared/reference/includes/tlasharptla_unicode_md.md)] (wide-character)|`_tcsrev` maps to `_wcsrev`|  \n|`_MBCS`|Multibyte-character|`_tcsrev` maps to `_mbsrev`|  \n|None (the default has neither `_UNICODE` nor `_MBCS` defined)|SBCS ([!INCLUDE[TLA#tla_ascii](../text/includes/tlasharptla_ascii_md.md)])|`_tcsrev` maps to `strrev`|  \n  \n For example, the generic-text function `_tcsrev`, which is defined in Tchar.h, maps to `_mbsrev` if you defined `_MBCS` in your program, or to `_wcsrev` if you defined `_UNICODE`. Otherwise, `_tcsrev` maps to `strrev`. Other data type mappings are provided in Tchar.h for programming convenience, but `_TCHAR` is the most useful.  \n  \n### Generic-Text Data Type Mappings  \n  \n|Generic-Text<br /><br /> Data Type Name|_UNICODE &<br /><br /> _MBCS Not Defined|_MBCS<br /><br /> Defined|_UNICODE<br /><br /> Defined|  \n|--------------------------------------|----------------------------------------|------------------------|---------------------------|  \n|`_TCHAR`|`char`|`char`|`wchar_t`|  \n|`_TINT`|`int`|`unsigned int`|`wint_t`|  \n|`_TSCHAR`|`signed char`|`signed char`|`wchar_t`|  \n|`_TUCHAR`|`unsigned char`|`unsigned char`|`wchar_t`|  \n|`_TXCHAR`|`char`|`unsigned char`|`wchar_t`|  \n|`_T` or `_TEXT`|No effect (removed by preprocessor)|No effect (removed by preprocessor)|`L` (converts the following character or string to its [!INCLUDE[TLA#tla_unicode](../atl-mfc-shared/reference/includes/tlasharptla_unicode_md.md)] counterpart)|  \n  \n For a list of generic-text mappings of routines, variables, and other objects, see [Generic-Text Mappings](../c-runtime-library/generic-text-mappings.md) in the Run-Time Library Reference.  \n  \n> [!NOTE]\n>  Do not use the `str` family of functions with Unicode strings, which are likely to contain embedded null bytes. Similarly, do not use the `wcs` family of functions with MBCS (or SBCS) strings.  \n  \n The following code fragments illustrate the use of `_TCHAR` and `_tcsrev` for mapping to the MBCS, [!INCLUDE[TLA#tla_unicode](../atl-mfc-shared/reference/includes/tlasharptla_unicode_md.md)], and SBCS models.  \n  \n```  \n_TCHAR *RetVal, *szString;  \nRetVal = _tcsrev(szString);  \n```  \n  \n If `_MBCS` has been defined, the preprocessor maps this fragment to this code:  \n  \n```  \nchar *RetVal, *szString;  \nRetVal = _mbsrev(szString);  \n```  \n  \n If `_UNICODE` has been defined, the preprocessor maps this fragment to this code:  \n  \n```  \nwchar_t *RetVal, *szString;  \nRetVal = _wcsrev(szString);  \n```  \n  \n If neither `_MBCS` nor `_UNICODE` have been defined, the preprocessor maps the fragment to single-byte [!INCLUDE[TLA#tla_ascii](../text/includes/tlasharptla_ascii_md.md)] code, as follows:  \n  \n```  \nchar *RetVal, *szString;  \nRetVal = strrev(szString);  \n```  \n  \n Therefore, you can write, maintain, and compile a single-source code file to run with routines that are specific to any of the three kinds of character sets.  \n  \n## See Also  \n [Text and Strings](../text/text-and-strings-in-visual-cpp.md)   \n [Using TCHAR.H Data Types with _MBCS Code](../text/using-tchar-h-data-types-with-mbcs-code.md)"}