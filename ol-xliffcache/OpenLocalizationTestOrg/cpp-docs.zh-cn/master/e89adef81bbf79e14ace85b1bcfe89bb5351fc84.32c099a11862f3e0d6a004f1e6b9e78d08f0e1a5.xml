{"nodes":[{"pos":[12,84],"content":"Adding a Property to the Control (ATL Tutorial, Part 3) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Adding a Property to the Control (ATL Tutorial, Part 3) | Microsoft Docs","pos":[0,72]}]},{"content":"Adding a Property to the Control (ATL Tutorial, Part 3)","pos":[577,632]},{"pos":[644,754],"content":"is the interface that contains the control's custom methods and properties, and you will add a property to it."},{"content":"To add a property using the Add Property Wizard","pos":[764,811]},{"content":"In Class View, expand the Polygon branch.","pos":[821,862]},{"content":"Right-click IPolyCtl.","pos":[872,893]},{"pos":[903,972],"content":"On the shortcut menu, click <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept>, and then click <bpt id=\"p2\">**</bpt>Add Property<ept id=\"p2\">**</ept>.","source":"On the shortcut menu, click **Add**, and then click **Add Property**."},{"content":"The Add Property Wizard will appear.","pos":[983,1019]},{"pos":[1029,1085],"content":"In the drop-down list of property types, select <ph id=\"ph1\">`SHORT`</ph>.","source":"In the drop-down list of property types, select `SHORT`."},{"pos":[1095,1133],"content":"Type <ph id=\"ph1\">`Sides`</ph> as the <bpt id=\"p1\">**</bpt>Property name.<ept id=\"p1\">**</ept>","source":"Type `Sides` as the **Property name.**"},{"pos":[1143,1190],"content":"Click <bpt id=\"p1\">**</bpt>Finish<ept id=\"p1\">**</ept> to finish adding the property.","source":"Click **Finish** to finish adding the property."},{"content":"When you add the property to the interface, MIDL (the program that compiles .idl files) defines a <ph id=\"ph1\">`Get`</ph> method for retrieving its value and a <ph id=\"ph2\">`Put`</ph> method for setting a new value.","pos":[1197,1376],"source":"When you add the property to the interface, MIDL (the program that compiles .idl files) defines a `Get` method for retrieving its value and a `Put` method for setting a new value."},{"content":"The methods are named by prepending <ph id=\"ph1\">`put_`</ph> and <ph id=\"ph2\">`get_`</ph> to the property name.","pos":[1377,1452],"source":" The methods are named by prepending `put_` and `get_` to the property name."},{"content":"The Add Property Wizard adds the necessary lines to the .idl file.","pos":[1459,1525]},{"content":"It also adds the <ph id=\"ph1\">`Get`</ph> and <ph id=\"ph2\">`Put`</ph> function prototypes to the class definition in PolyCtl.h and adds an empty implementation to PolyCtl.cpp.","pos":[1526,1664],"source":" It also adds the `Get` and `Put` function prototypes to the class definition in PolyCtl.h and adds an empty implementation to PolyCtl.cpp."},{"content":"You can check this by opening PolyCtl.cpp and looking for the functions <ph id=\"ph1\">`get_Sides`</ph> and <ph id=\"ph2\">`put_Sides`</ph>.","pos":[1665,1765],"source":" You can check this by opening PolyCtl.cpp and looking for the functions `get_Sides` and `put_Sides`."},{"content":"Although you now have skeleton functions to set and retrieve the property, it needs a place to be stored.","pos":[1772,1877]},{"content":"You will create a variable to store the property and update the functions accordingly.","pos":[1878,1964]},{"content":"To create a variable to store the property, and update the put and get methods","pos":[1975,2053]},{"pos":[2063,2170],"content":"From Solution Explorer, open PolyCtl.h and add the following line after the definition of <ph id=\"ph1\">`m_clrFillColor`</ph>:","source":"From Solution Explorer, open PolyCtl.h and add the following line after the definition of `m_clrFillColor`:"},{"pos":[2192,2212],"content":"NVC_ATL_Windowing#44"},{"content":"Set the default value of <ph id=\"ph1\">`m_nSides`</ph>.","pos":[2305,2341],"source":"Set the default value of `m_nSides`."},{"content":"Make the default shape a triangle by adding a line to the constructor in PolyCtl.h:","pos":[2342,2425]},{"pos":[2447,2467],"content":"NVC_ATL_Windowing#45"},{"content":"Implement the <ph id=\"ph1\">`Get`</ph> and <ph id=\"ph2\">`Put`</ph> methods.","pos":[2560,2598],"source":"Implement the `Get` and `Put` methods."},{"content":"The <ph id=\"ph1\">`get_Sides`</ph> and <ph id=\"ph2\">`put_Sides`</ph> function declarations have been added to PolyCtl.h.","pos":[2599,2682],"source":" The `get_Sides` and `put_Sides` function declarations have been added to PolyCtl.h."},{"content":"Replace the code in PolyCtl.cpp for <ph id=\"ph1\">`get_Sides`</ph> and <ph id=\"ph2\">`put_Sides`</ph> with the following code:","pos":[2683,2771],"source":" Replace the code in PolyCtl.cpp for `get_Sides` and `put_Sides` with the following code:"},{"pos":[2793,2813],"content":"NVC_ATL_Windowing#46"},{"content":"The <ph id=\"ph1\">`get_Sides`</ph> method returns the current value of the <ph id=\"ph2\">`Sides`</ph> property through the <ph id=\"ph3\">`pVal`</ph> pointer.","pos":[2905,3005],"source":"The `get_Sides` method returns the current value of the `Sides` property through the `pVal` pointer."},{"content":"In the <ph id=\"ph1\">`put_Sides`</ph> method, the code ensures the user is setting the <ph id=\"ph2\">`Sides`</ph> property to an acceptable value.","pos":[3006,3114],"source":" In the `put_Sides` method, the code ensures the user is setting the `Sides` property to an acceptable value."},{"content":"The minimum must be 2, and because an array of points will be used for each side, 100 is a reasonable limit for a maximum value.","pos":[3115,3243]},{"content":"You now have a property called <ph id=\"ph1\">`Sides`</ph>.","pos":[3250,3289],"source":"You now have a property called `Sides`."},{"content":"In the next step, you will change the drawing code to use it.","pos":[3290,3351]},{"pos":[3358,3501],"content":"<bpt id=\"p1\">[</bpt>Back to Step 2<ept id=\"p1\">](../atl/adding-a-control-atl-tutorial-part-2.md)</ept> &amp;#124; <bpt id=\"p2\">[</bpt>On to Step 4<ept id=\"p2\">](../atl/changing-the-drawing-code-atl-tutorial-part-4.md)</ept>","source":"[Back to Step 2](../atl/adding-a-control-atl-tutorial-part-2.md) &#124; [On to Step 4](../atl/changing-the-drawing-code-atl-tutorial-part-4.md)"},{"content":"See Also","pos":[3510,3518]},{"content":"Tutorial","pos":[3523,3531]}],"content":"---\ntitle: \"Adding a Property to the Control (ATL Tutorial, Part 3) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"get-started-article\"\ndev_langs: \n  - \"C++\"\nms.assetid: f775fe34-103b-4f07-9999-400e987ee030\ncaps.latest.revision: 15\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Adding a Property to the Control (ATL Tutorial, Part 3)\n`IPolyCtl` is the interface that contains the control's custom methods and properties, and you will add a property to it.  \n  \n### To add a property using the Add Property Wizard  \n  \n1.  In Class View, expand the Polygon branch.  \n  \n2.  Right-click IPolyCtl.  \n  \n3.  On the shortcut menu, click **Add**, and then click **Add Property**.  \n  \n     The Add Property Wizard will appear.  \n  \n4.  In the drop-down list of property types, select `SHORT`.  \n  \n5.  Type `Sides` as the **Property name.**  \n  \n6.  Click **Finish** to finish adding the property.  \n  \n When you add the property to the interface, MIDL (the program that compiles .idl files) defines a `Get` method for retrieving its value and a `Put` method for setting a new value. The methods are named by prepending `put_` and `get_` to the property name.  \n  \n The Add Property Wizard adds the necessary lines to the .idl file. It also adds the `Get` and `Put` function prototypes to the class definition in PolyCtl.h and adds an empty implementation to PolyCtl.cpp. You can check this by opening PolyCtl.cpp and looking for the functions `get_Sides` and `put_Sides`.  \n  \n Although you now have skeleton functions to set and retrieve the property, it needs a place to be stored. You will create a variable to store the property and update the functions accordingly.  \n  \n#### To create a variable to store the property, and update the put and get methods  \n  \n1.  From Solution Explorer, open PolyCtl.h and add the following line after the definition of `m_clrFillColor`:  \n  \n     [!code-cpp[NVC_ATL_Windowing#44](../atl/codesnippet/cpp/adding-a-property-to-the-control-atl-tutorial-part-3_1.h)]  \n  \n2.  Set the default value of `m_nSides`. Make the default shape a triangle by adding a line to the constructor in PolyCtl.h:  \n  \n     [!code-cpp[NVC_ATL_Windowing#45](../atl/codesnippet/cpp/adding-a-property-to-the-control-atl-tutorial-part-3_2.h)]  \n  \n3.  Implement the `Get` and `Put` methods. The `get_Sides` and `put_Sides` function declarations have been added to PolyCtl.h. Replace the code in PolyCtl.cpp for `get_Sides` and `put_Sides` with the following code:  \n  \n     [!code-cpp[NVC_ATL_Windowing#46](../atl/codesnippet/cpp/adding-a-property-to-the-control-atl-tutorial-part-3_3.cpp)]  \n  \n The `get_Sides` method returns the current value of the `Sides` property through the `pVal` pointer. In the `put_Sides` method, the code ensures the user is setting the `Sides` property to an acceptable value. The minimum must be 2, and because an array of points will be used for each side, 100 is a reasonable limit for a maximum value.  \n  \n You now have a property called `Sides`. In the next step, you will change the drawing code to use it.  \n  \n [Back to Step 2](../atl/adding-a-control-atl-tutorial-part-2.md) &#124; [On to Step 4](../atl/changing-the-drawing-code-atl-tutorial-part-4.md)  \n  \n## See Also  \n [Tutorial](../atl/active-template-library-atl-tutorial.md)\n\n"}