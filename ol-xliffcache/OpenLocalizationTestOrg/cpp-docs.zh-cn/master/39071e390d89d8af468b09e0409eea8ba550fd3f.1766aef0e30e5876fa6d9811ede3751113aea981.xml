{"nodes":[{"pos":[12,54],"content":"mbstowcs_s, _mbstowcs_s_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"mbstowcs_s, _mbstowcs_s_l | Microsoft Docs","pos":[0,42]}]},{"content":"mbstowcs_s, _mbstowcs_s_l","pos":[1057,1082]},{"content":"Converts a sequence of multibyte characters to a corresponding sequence of wide characters.","pos":[1083,1174]},{"content":"Versions of <bpt id=\"p1\">[</bpt>mbstowcs, _mbstowcs_l<ept id=\"p1\">](../../c-runtime-library/reference/mbstowcs-mbstowcs-l.md)</ept> with security enhancements as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1175,1400],"source":" Versions of [mbstowcs, _mbstowcs_l](../../c-runtime-library/reference/mbstowcs-mbstowcs-l.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"content":"Syntax","pos":[1409,1415]},{"content":"Parameters","pos":[2103,2113]},{"content":"[out]","pos":[2117,2122]},{"content":"The number of characters converted.","pos":[2141,2176]},{"content":"[out]","pos":[2183,2188]},{"content":"Address of buffer for the resulting converted wide character string.","pos":[2200,2268]},{"content":"[in]","pos":[2275,2279]},{"content":"The size of the <ph id=\"ph1\">`wcstr`</ph> buffer in words.","pos":[2297,2337],"source":" The size of the `wcstr` buffer in words."},{"content":"[in]","pos":[2344,2348]},{"content":"The address of a sequence of null terminated multibyte characters.","pos":[2359,2425]},{"content":"[in]","pos":[2432,2436]},{"content":"The maximum number of wide characters to store in the <ph id=\"ph1\">`wcstr`</ph> buffer, not including the terminating null, or <bpt id=\"p1\">[</bpt>_TRUNCATE<ept id=\"p1\">](../../c-runtime-library/truncate.md)</ept>.","pos":[2448,2606],"source":" The maximum number of wide characters to store in the `wcstr` buffer, not including the terminating null, or [_TRUNCATE](../../c-runtime-library/truncate.md)."},{"content":"[in]","pos":[2613,2617]},{"content":"The locale to use.","pos":[2630,2648]},{"content":"Return Value","pos":[2657,2669]},{"content":"Zero if successful, an error code on failure.","pos":[2673,2718]},{"content":"Error condition","pos":[2725,2740]},{"pos":[2741,2757],"content":"Return value and"},{"pos":[2835,2866],"content":"is <ph id=\"ph1\">`NULL`</ph> and <ph id=\"ph2\">`sizeInWords`</ph> &gt; 0","source":" is `NULL` and `sizeInWords` > 0"},{"pos":[2888,2890],"content":"is"},{"pos":[2911,3029],"content":"The destination buffer is too small to contain the converted string (unless <ph id=\"ph1\">`count`</ph> is <ph id=\"ph2\">`_TRUNCATE`</ph>; see Remarks below)","source":"The destination buffer is too small to contain the converted string (unless `count` is `_TRUNCATE`; see Remarks below)"},{"pos":[3051,3087],"content":"is not <ph id=\"ph1\">`NULL`</ph> and <ph id=\"ph2\">`sizeInWords`</ph> == 0","source":" is not `NULL` and `sizeInWords` == 0"},{"content":"If any of these conditions occurs, the invalid parameter exception is invoked as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept> .","pos":[3104,3271],"source":"If any of these conditions occurs, the invalid parameter exception is invoked as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md) ."},{"content":"If execution is allowed to continue, the function returns an error code and sets <ph id=\"ph1\">`errno`</ph> as indicated in the table.","pos":[3272,3387],"source":" If execution is allowed to continue, the function returns an error code and sets `errno` as indicated in the table."},{"content":"Remarks","pos":[3396,3403]},{"content":"The <ph id=\"ph1\">`mbstowcs_s`</ph> function converts a string of multibyte characters pointed to by <ph id=\"ph2\">`mbstr`</ph> into wide characters stored in the buffer pointed to by <ph id=\"ph3\">`wcstr`</ph>.","pos":[3407,3561],"source":"The `mbstowcs_s` function converts a string of multibyte characters pointed to by `mbstr` into wide characters stored in the buffer pointed to by `wcstr`."},{"content":"The conversion will continue for each character until one of these conditions is met:","pos":[3562,3647]},{"content":"A multibyte null character is encountered","pos":[3657,3698]},{"content":"An invalid multibyte character is encountered","pos":[3708,3753]},{"pos":[3763,3837],"content":"The number of wide characters stored in the <ph id=\"ph1\">`wcstr`</ph> buffer equals <ph id=\"ph2\">`count`</ph>.","source":"The number of wide characters stored in the `wcstr` buffer equals `count`."},{"content":"The destination string is always null-terminated (even in the case of an error).","pos":[3844,3924]},{"pos":[3931,4150],"content":"If <ph id=\"ph1\">`count`</ph> is the special value <bpt id=\"p1\">[</bpt>_TRUNCATE<ept id=\"p1\">](../../c-runtime-library/truncate.md)</ept>, then <ph id=\"ph2\">`mbstowcs_s`</ph> converts as much of the string as will fit into the destination buffer, while still leaving room for a null terminator.","source":"If `count` is the special value [_TRUNCATE](../../c-runtime-library/truncate.md), then `mbstowcs_s` converts as much of the string as will fit into the destination buffer, while still leaving room for a null terminator."},{"content":"If <ph id=\"ph1\">`mbstowcs_s`</ph> successfully converts the source string, it puts the size in wide characters of the converted string, including the null terminator, into <ph id=\"ph2\">`*``pReturnValue`</ph> (provided <ph id=\"ph3\">`pReturnValue`</ph> is not <ph id=\"ph4\">`NULL`</ph>).","pos":[4157,4369],"source":"If `mbstowcs_s` successfully converts the source string, it puts the size in wide characters of the converted string, including the null terminator, into `*``pReturnValue` (provided `pReturnValue` is not `NULL`)."},{"content":"This occurs even if the <ph id=\"ph1\">`wcstr`</ph> argument is <ph id=\"ph2\">`NULL`</ph> and provides a way to determine the required buffer size.","pos":[4370,4478],"source":" This occurs even if the `wcstr` argument is `NULL` and provides a way to determine the required buffer size."},{"content":"Note that if <ph id=\"ph1\">`wcstr`</ph> is <ph id=\"ph2\">`NULL`</ph>, <ph id=\"ph3\">`count`</ph> is ignored, and <ph id=\"ph4\">`sizeInWords`</ph> must be 0.","pos":[4479,4559],"source":" Note that if `wcstr` is `NULL`, `count` is ignored, and `sizeInWords` must be 0."},{"pos":[4566,4752],"content":"If <ph id=\"ph1\">`mbstowcs_s`</ph> encounters an invalid multibyte character, it puts 0 in <ph id=\"ph2\">`*``pReturnValue`</ph>, sets the destination buffer to an empty string, sets <ph id=\"ph3\">`errno`</ph> to <ph id=\"ph4\">`EILSEQ`</ph>, and returns <ph id=\"ph5\">`EILSEQ`</ph>.","source":"If `mbstowcs_s` encounters an invalid multibyte character, it puts 0 in `*``pReturnValue`, sets the destination buffer to an empty string, sets `errno` to `EILSEQ`, and returns `EILSEQ`."},{"pos":[4759,4861],"content":"If the sequences pointed to by <ph id=\"ph1\">`mbstr`</ph> and <ph id=\"ph2\">`wcstr`</ph> overlap, the behavior of <ph id=\"ph3\">`mbstowcs_s`</ph> is undefined.","source":"If the sequences pointed to by `mbstr` and `wcstr` overlap, the behavior of `mbstowcs_s` is undefined."},{"pos":[4869,5015],"content":"[!IMPORTANT]\n Ensure that `wcstr` and `mbstr` do not overlap, and that `count` correctly reflects the number of multibyte characters to convert.","leadings":["","> "],"nodes":[{"content":"Ensure that <ph id=\"ph1\">`wcstr`</ph> and <ph id=\"ph2\">`mbstr`</ph> do not overlap, and that <ph id=\"ph3\">`count`</ph> correctly reflects the number of multibyte characters to convert.","pos":[14,144],"source":" Ensure that `wcstr` and `mbstr` do not overlap, and that `count` correctly reflects the number of multibyte characters to convert."}]},{"content":"uses the current locale for any locale-dependent behavior; <ph id=\"ph1\">`_mbstowcs_s_l`</ph> is identical except that it uses the locale passed in instead.","pos":[5035,5172],"source":" uses the current locale for any locale-dependent behavior; `_mbstowcs_s_l` is identical except that it uses the locale passed in instead."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Locale<ept id=\"p1\">](../../c-runtime-library/locale.md)</ept>.","pos":[5173,5243],"source":" For more information, see [Locale](../../c-runtime-library/locale.md)."},{"content":"In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically (eliminating the need to specify a size argument) and they can automatically replace older, non-secure functions with their newer, secure counterparts.","pos":[5250,5520]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[5521,5629],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"content":"Requirements","pos":[5638,5650]},{"content":"Routine","pos":[5657,5664]},{"content":"Required header","pos":[5665,5680]},{"content":"stdlib.h&gt;","pos":[5740,5749],"source":"stdlib.h>"},{"content":"stdlib.h&gt;","pos":[5772,5781],"source":"stdlib.h>"},{"pos":[5789,5913],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":".NET Framework Equivalent","pos":[5922,5947]},{"content":"Not applicable.","pos":[5951,5966]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[5967,6014],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[6015,6140],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[6149,6157]},{"content":"Data Conversion","pos":[6162,6177]},{"content":"Locale","pos":[6228,6234]},{"content":"MultiByteToWideChar","pos":[6276,6295]},{"content":"Interpretation of Multibyte-Character Sequences","pos":[6362,6409]},{"content":"_mbclen, mblen, _mblen_l","pos":[6492,6516]},{"content":"mbtowc, _mbtowc_l","pos":[6582,6599]},{"content":"wcstombs, _wcstombs_l","pos":[6660,6681]},{"content":"wctomb, _wctomb_l","pos":[6746,6763]}],"content":"---\ntitle: \"mbstowcs_s, _mbstowcs_s_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_mbstowcs_s_l\"\n  - \"mbstowcs_s\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-convert-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_mbstowcs_s_l\"\n  - \"mbstowcs_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_mbstowcs_s_l function\"\n  - \"mbstowcs_s function\"\n  - \"mbstowcs_s_l function\"\nms.assetid: 2fbda953-6918-498f-b440-3e7b21ed65a4\ncaps.latest.revision: 31\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# mbstowcs_s, _mbstowcs_s_l\nConverts a sequence of multibyte characters to a corresponding sequence of wide characters. Versions of [mbstowcs, _mbstowcs_l](../../c-runtime-library/reference/mbstowcs-mbstowcs-l.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n## Syntax  \n  \n```  \nerrno_t mbstowcs_s(  \n   size_t *pReturnValue,  \n   wchar_t *wcstr,  \n   size_t sizeInWords,  \n   const char *mbstr,  \n   size_t count   \n);  \nerrno_t _mbstowcs_s_l(  \n   size_t *pReturnValue,  \n   wchar_t *wcstr,  \n   size_t sizeInWords,  \n   const char *mbstr,  \n   size_t count,  \n   _locale_t locale  \n);  \ntemplate <size_t size>  \nerrno_t mbstowcs_s(  \n   size_t *pReturnValue,  \n   wchar_t (&wcstr)[size],  \n   const char *mbstr,  \n   size_t count   \n); // C++ only  \ntemplate <size_t size>  \nerrno_t _mbstowcs_s_l(  \n   size_t *pReturnValue,  \n   wchar_t (&wcstr)[size],  \n   const char *mbstr,  \n   size_t count,  \n   _locale_t locale  \n); // C++ only  \n```  \n  \n#### Parameters  \n [out] `pReturnValue`  \n The number of characters converted.  \n  \n [out] `wcstr`  \n Address of buffer for the resulting converted wide character string.  \n  \n [in] `sizeInWords`  \n The size of the `wcstr` buffer in words.  \n  \n [in]`mbstr`  \n The address of a sequence of null terminated multibyte characters.  \n  \n [in] `count`  \n The maximum number of wide characters to store in the `wcstr` buffer, not including the terminating null, or [_TRUNCATE](../../c-runtime-library/truncate.md).  \n  \n [in] `locale`  \n The locale to use.  \n  \n## Return Value  \n Zero if successful, an error code on failure.  \n  \n|Error condition|Return value and `errno`|  \n|---------------------|------------------------------|  \n|`wcstr` is `NULL` and `sizeInWords` > 0|`EINVAL`|  \n|`mbstr` is `NULL`|`EINVAL`|  \n|The destination buffer is too small to contain the converted string (unless `count` is `_TRUNCATE`; see Remarks below)|`ERANGE`|  \n|`wcstr` is not `NULL` and `sizeInWords` == 0|`EINVAL`|  \n  \n If any of these conditions occurs, the invalid parameter exception is invoked as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md) . If execution is allowed to continue, the function returns an error code and sets `errno` as indicated in the table.  \n  \n## Remarks  \n The `mbstowcs_s` function converts a string of multibyte characters pointed to by `mbstr` into wide characters stored in the buffer pointed to by `wcstr`. The conversion will continue for each character until one of these conditions is met:  \n  \n-   A multibyte null character is encountered  \n  \n-   An invalid multibyte character is encountered  \n  \n-   The number of wide characters stored in the `wcstr` buffer equals `count`.  \n  \n The destination string is always null-terminated (even in the case of an error).  \n  \n If `count` is the special value [_TRUNCATE](../../c-runtime-library/truncate.md), then `mbstowcs_s` converts as much of the string as will fit into the destination buffer, while still leaving room for a null terminator.  \n  \n If `mbstowcs_s` successfully converts the source string, it puts the size in wide characters of the converted string, including the null terminator, into `*``pReturnValue` (provided `pReturnValue` is not `NULL`). This occurs even if the `wcstr` argument is `NULL` and provides a way to determine the required buffer size. Note that if `wcstr` is `NULL`, `count` is ignored, and `sizeInWords` must be 0.  \n  \n If `mbstowcs_s` encounters an invalid multibyte character, it puts 0 in `*``pReturnValue`, sets the destination buffer to an empty string, sets `errno` to `EILSEQ`, and returns `EILSEQ`.  \n  \n If the sequences pointed to by `mbstr` and `wcstr` overlap, the behavior of `mbstowcs_s` is undefined.  \n  \n> [!IMPORTANT]\n>  Ensure that `wcstr` and `mbstr` do not overlap, and that `count` correctly reflects the number of multibyte characters to convert.  \n  \n `mbstowcs_s` uses the current locale for any locale-dependent behavior; `_mbstowcs_s_l` is identical except that it uses the locale passed in instead. For more information, see [Locale](../../c-runtime-library/locale.md).  \n  \n In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically (eliminating the need to specify a size argument) and they can automatically replace older, non-secure functions with their newer, secure counterparts. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`mbstowcs_s`|\\<stdlib.h>|  \n|`_mbstowcs_s_l`|\\<stdlib.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Data Conversion](../../c-runtime-library/data-conversion.md)   \n [Locale](../../c-runtime-library/locale.md)   \n [MultiByteToWideChar](http://msdn.microsoft.com/library/windows/desktop/dd319072)   \n [Interpretation of Multibyte-Character Sequences](../../c-runtime-library/interpretation-of-multibyte-character-sequences.md)   \n [_mbclen, mblen, _mblen_l](../../c-runtime-library/reference/mbclen-mblen-mblen-l.md)   \n [mbtowc, _mbtowc_l](../../c-runtime-library/reference/mbtowc-mbtowc-l.md)   \n [wcstombs, _wcstombs_l](../../c-runtime-library/reference/wcstombs-wcstombs-l.md)   \n [wctomb, _wctomb_l](../../c-runtime-library/reference/wctomb-wctomb-l.md)"}