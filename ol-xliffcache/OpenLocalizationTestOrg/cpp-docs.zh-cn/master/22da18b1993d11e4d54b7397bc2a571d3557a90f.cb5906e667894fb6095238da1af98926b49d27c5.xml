{"nodes":[{"pos":[12,63],"content":"Definitions and Declarations (C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Definitions and Declarations (C++) | Microsoft Docs","pos":[0,51]}]},{"content":"Definitions and Declarations (C++)","pos":[554,588]},{"content":"Microsoft Specific","pos":[592,610]},{"content":"The DLL interface refers to all items (functions and data) that are known to be exported by some program in the system; that is, all items that are declared as <bpt id=\"p1\">**</bpt>dllimport<ept id=\"p1\">**</ept> or <ph id=\"ph1\">`dllexport`</ph>.","pos":[614,803],"source":"The DLL interface refers to all items (functions and data) that are known to be exported by some program in the system; that is, all items that are declared as **dllimport** or `dllexport`."},{"content":"All declarations included in the DLL interface must specify either the <bpt id=\"p1\">**</bpt>dllimport<ept id=\"p1\">**</ept> or <ph id=\"ph1\">`dllexport`</ph> attribute.","pos":[804,914],"source":" All declarations included in the DLL interface must specify either the **dllimport** or `dllexport` attribute."},{"content":"However, the definition must specify only the <ph id=\"ph1\">`dllexport`</ph> attribute.","pos":[915,983],"source":" However, the definition must specify only the `dllexport` attribute."},{"content":"For example, the following function definition generates a compiler error:","pos":[984,1058]},{"content":"This code also generates an error:","pos":[1227,1261]},{"content":"However, this is correct syntax:","pos":[1445,1477]},{"content":"The use of <ph id=\"ph1\">`dllexport`</ph> implies a definition, while <bpt id=\"p1\">**</bpt>dllimport<ept id=\"p1\">**</ept> implies a declaration.","pos":[1568,1655],"source":"The use of `dllexport` implies a definition, while **dllimport** implies a declaration."},{"content":"You must use the <ph id=\"ph1\">`extern`</ph> keyword with <ph id=\"ph2\">`dllexport`</ph> to force a declaration; otherwise, a definition is implied.","pos":[1656,1766],"source":" You must use the `extern` keyword with `dllexport` to force a declaration; otherwise, a definition is implied."},{"content":"Thus, the following examples are correct:","pos":[1767,1808]},{"content":"The following examples clarify the preceding:","pos":[2031,2076]},{"content":"END Microsoft Specific","pos":[2993,3015]},{"content":"See Also","pos":[3024,3032]},{"content":"dllexport, dllimport","pos":[3037,3057]}],"content":"---\ntitle: \"Definitions and Declarations (C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nms.assetid: 56b809c0-e602-4f18-9ca5-cd7a8fbaaf30\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Definitions and Declarations (C++)\n## Microsoft Specific  \n The DLL interface refers to all items (functions and data) that are known to be exported by some program in the system; that is, all items that are declared as **dllimport** or `dllexport`. All declarations included in the DLL interface must specify either the **dllimport** or `dllexport` attribute. However, the definition must specify only the `dllexport` attribute. For example, the following function definition generates a compiler error:  \n  \n```  \n__declspec( dllimport ) int func() {   // Error; dllimport  \n                                    // prohibited on definition.  \n   return 1;  \n}  \n```  \n  \n This code also generates an error:  \n  \n```  \n#define DllImport   __declspec( dllimport )  \n  \n__declspec( dllimport ) int i = 10;  // Error; this is a  \n                                     // definition.  \n```  \n  \n However, this is correct syntax:  \n  \n```  \n__declspec( dllexport ) int i = 10;     // Okay--export definition  \n```  \n  \n The use of `dllexport` implies a definition, while **dllimport** implies a declaration. You must use the `extern` keyword with `dllexport` to force a declaration; otherwise, a definition is implied. Thus, the following examples are correct:  \n  \n```  \n#define DllImport   __declspec( dllimport )  \n#define DllExport   __declspec( dllexport )  \n  \nextern DllImport int k; // These are both correct and imply a  \nDllImport int j;        // declaration.  \n```  \n  \n The following examples clarify the preceding:  \n  \n```  \nstatic __declspec( dllimport ) int l; // Error; not declared extern.  \n  \nvoid func() {  \n    static __declspec( dllimport ) int s;  // Error; not declared  \n                                           // extern.  \n    __declspec( dllimport ) int m;         // Okay; this is a   \n                                           // declaration.  \n    __declspec( dllexport ) int n;         // Error; implies external  \n                                           // definition in local scope.  \n    extern __declspec( dllimport ) int i;  // Okay; this is a  \n                                           // declaration.  \n    extern __declspec( dllexport ) int k;  // Okay; extern implies  \n                                           // declaration.  \n    __declspec( dllexport ) int x = 5;     // Error; implies external  \n                                           // definition in local scope.  \n}  \n```  \n  \n## END Microsoft Specific  \n  \n## See Also  \n [dllexport, dllimport](../cpp/dllexport-dllimport.md)"}