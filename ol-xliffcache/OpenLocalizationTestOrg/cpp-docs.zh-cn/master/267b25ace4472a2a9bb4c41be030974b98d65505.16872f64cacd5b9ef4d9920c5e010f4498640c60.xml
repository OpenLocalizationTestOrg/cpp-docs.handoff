{"nodes":[{"pos":[12,81],"content":"_fprintf_p, _fprintf_p_l, _fwprintf_p, _fwprintf_p_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_fprintf_p, _fprintf_p_l, _fwprintf_p, _fwprintf_p_l | Microsoft Docs","pos":[0,69]}]},{"content":"_fprintf_p, _fprintf_p_l, _fwprintf_p, _fwprintf_p_l","pos":[1454,1506]},{"content":"Prints formatted data to a stream.","pos":[1507,1541]},{"content":"Syntax","pos":[1550,1556]},{"content":"Parameters","pos":[1994,2004]},{"content":"Pointer to the <ph id=\"ph1\">`FILE`</ph> structure.","pos":[2020,2052],"source":" Pointer to the `FILE` structure."},{"content":"Format-control string.","pos":[2071,2093]},{"content":"Optional arguments.","pos":[2114,2133]},{"content":"The locale to use.","pos":[2152,2170]},{"content":"Return Value","pos":[2179,2191]},{"pos":[2208,2321],"content":"and <ph id=\"ph1\">`_fwprintf_p`</ph> return the number of characters written or return a negative value when an output error occurs.","source":" and `_fwprintf_p` return the number of characters written or return a negative value when an output error occurs."},{"content":"Remarks","pos":[2330,2337]},{"content":"formats and prints a series of characters and values to the output <ph id=\"ph1\">`stream`</ph>.","pos":[2354,2430],"source":" formats and prints a series of characters and values to the output `stream`."},{"content":"Each function <ph id=\"ph1\">`argument`</ph> (if any) is converted and output according to the corresponding format specification in <ph id=\"ph2\">`format`</ph>.","pos":[2431,2553],"source":" Each function `argument` (if any) is converted and output according to the corresponding format specification in `format`."},{"content":"For <ph id=\"ph1\">`_fprintf_p`</ph>, the <ph id=\"ph2\">`format`</ph> argument has the same syntax and use that it has in <ph id=\"ph3\">`_printf_p`</ph>.","pos":[2554,2649],"source":" For `_fprintf_p`, the `format` argument has the same syntax and use that it has in `_printf_p`."},{"content":"These functions support positional parameters, meaning that the order of the parameters used by the format string can be changed.","pos":[2650,2779]},{"content":"For more information about positional parameters, see <bpt id=\"p1\">[</bpt>printf_p Positional Parameters<ept id=\"p1\">](../../c-runtime-library/printf-p-positional-parameters.md)</ept>.","pos":[2780,2926],"source":" For more information about positional parameters, see [printf_p Positional Parameters](../../c-runtime-library/printf-p-positional-parameters.md)."},{"content":"is a wide-character version of <ph id=\"ph1\">`_fprintf_p`</ph>; in <ph id=\"ph2\">`_fwprintf_p`</ph>, <ph id=\"ph3\">`format`</ph> is a wide-character string.","pos":[2947,3046],"source":" is a wide-character version of `_fprintf_p`; in `_fwprintf_p`, `format` is a wide-character string."},{"content":"These functions behave identically if the stream is opened in ANSI mode.","pos":[3047,3119]},{"content":"doesn't currently support output into a UNICODE stream.","pos":[3133,3188]},{"pos":[3195,3344],"content":"The versions of these functions with the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead of the current locale.","source":"The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current locale."},{"pos":[3352,3418],"content":"[!IMPORTANT]\n Ensure that `format` is not a user-defined string.","leadings":["","> "],"nodes":[{"content":"Ensure that <ph id=\"ph1\">`format`</ph> is not a user-defined string.","pos":[14,64],"source":" Ensure that `format` is not a user-defined string."}]},{"content":"Like the non-secure versions (see <bpt id=\"p1\">[</bpt>fprintf, _fprintf_l, fwprintf, _fwprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)</ept>), these functions validate their parameters and invoke the invalid parameter handler, as described in <bpt id=\"p2\">[</bpt>Parameter Validation<ept id=\"p2\">](../../c-runtime-library/parameter-validation.md)</ept>, if either <ph id=\"ph1\">`stream`</ph> or <ph id=\"ph2\">`format`</ph> is a null pointer or if there are any unknown or badly formed formatting specifiers.","pos":[3425,3870],"source":"Like the non-secure versions (see [fprintf, _fprintf_l, fwprintf, _fwprintf_l](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)), these functions validate their parameters and invoke the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md), if either `stream` or `format` is a null pointer or if there are any unknown or badly formed formatting specifiers."},{"content":"If execution is allowed to continue, the functions return -1 and set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph>.","pos":[3871,3960],"source":" If execution is allowed to continue, the functions return -1 and set `errno` to `EINVAL`."},{"content":"Generic-Text Routine Mappings","pos":[3970,3999]},{"content":"Tchar.h routine","pos":[4006,4021]},{"content":"_UNICODE and _MBCS not defined","pos":[4022,4052]},{"content":"_MBCS defined","pos":[4053,4066]},{"content":"_UNICODE defined","pos":[4067,4083]},{"pos":[4325,4460],"content":"For more information, see <bpt id=\"p1\">[</bpt>Format Specifications<ept id=\"p1\">](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)</ept>.","source":"For more information, see [Format Specifications](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)."},{"content":"Requirements","pos":[4469,4481]},{"content":"Function","pos":[4488,4496]},{"content":"Required header","pos":[4497,4512]},{"pos":[4570,4571],"content":","},{"content":"stdio.h&gt;","pos":[4589,4597],"source":"stdio.h>"},{"pos":[4615,4616],"content":","},{"content":"stdio.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[4635,4657],"source":"stdio.h> or \\<wchar.h>"},{"pos":[4665,4783],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[4792,4799]},{"content":".NET Framework Equivalent","pos":[5754,5779]},{"content":"System::IO::StreamWriter::Write","pos":[5784,5815]},{"content":"See Also","pos":[5901,5909]},{"content":"Stream I/O","pos":[5914,5924]},{"content":"_cprintf, _cprintf_l, _cwprintf, _cwprintf_l","pos":[5970,6014]},{"content":"fscanf, _fscanf_l, fwscanf, _fwscanf_l","pos":[6097,6135]},{"content":"sprintf, _sprintf_l, swprintf, _swprintf_l, <ph id=\"ph1\">\\_</ph>_swprintf_l","pos":[6214,6271],"source":"sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l"},{"content":"printf_p Positional Parameters","pos":[6365,6395]},{"content":"_cprintf_p, _cprintf_p_l, _cwprintf_p, _cwprintf_p_l","pos":[6461,6513]},{"content":"_cprintf_s, _cprintf_s_l, _cwprintf_s, _cwprintf_s_l","pos":[6604,6656]},{"content":"printf_p Positional Parameters","pos":[6747,6777]},{"content":"fscanf_s, _fscanf_s_l, fwscanf_s, _fwscanf_s_l","pos":[6843,6889]}],"content":"---\ntitle: \"_fprintf_p, _fprintf_p_l, _fwprintf_p, _fwprintf_p_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_fwprintf_p\"\n  - \"_fprintf_p_l\"\n  - \"_fwprintf_p_l\"\n  - \"_fprintf_p\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_fprintf_p\"\n  - \"_ftprintf_p\"\n  - \"fwprintf_p\"\n  - \"_fwprintf_p\"\n  - \"fprintf_p\"\n  - \"ftprintf_p\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"fprintf_p_l function\"\n  - \"fprintf_p function\"\n  - \"_fprintf_p_l function\"\n  - \"_fprintf_p function\"\n  - \"_ftprintf_p_l function\"\n  - \"streams, printing formatted data to\"\n  - \"_fwprintf_p function\"\n  - \"fwprintf_p function\"\n  - \"_ftprintf_p function\"\n  - \"_fwprintf_p_l function\"\n  - \"ftprintf_p function\"\n  - \"printing [C++], formatted data to streams\"\n  - \"ftprintf_p_l function\"\n  - \"fwprintf_p_l function\"\nms.assetid: 46b082e1-45ba-4383-9ee4-97015aa50bc6\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _fprintf_p, _fprintf_p_l, _fwprintf_p, _fwprintf_p_l\nPrints formatted data to a stream.  \n  \n## Syntax  \n  \n```  \nint _fprintf_p(   \n   FILE *stream,  \n   const char *format [,  \n   argument ]...  \n);  \nint _fprintf_p_l(   \n   FILE *stream,  \n   const char *format,  \n   locale_t locale [,  \n   argument ]...  \n);  \nint _fwprintf_p(   \n   FILE *stream,  \n   const wchar_t *format [,  \n   argument ]...  \n);  \nint _fwprintf_p_l(   \n   FILE *stream,  \n   const wchar_t *format,  \n   locale_t locale [,  \n   argument ]...  \n);  \n```  \n  \n#### Parameters  \n `stream`  \n Pointer to the `FILE` structure.  \n  \n `format`  \n Format-control string.  \n  \n `argument`  \n Optional arguments.  \n  \n `locale`  \n The locale to use.  \n  \n## Return Value  \n `_fprintf_p` and `_fwprintf_p` return the number of characters written or return a negative value when an output error occurs.  \n  \n## Remarks  \n `_fprintf_p` formats and prints a series of characters and values to the output `stream`. Each function `argument` (if any) is converted and output according to the corresponding format specification in `format`. For `_fprintf_p`, the `format` argument has the same syntax and use that it has in `_printf_p`. These functions support positional parameters, meaning that the order of the parameters used by the format string can be changed. For more information about positional parameters, see [printf_p Positional Parameters](../../c-runtime-library/printf-p-positional-parameters.md).  \n  \n `_fwprintf_p` is a wide-character version of `_fprintf_p`; in `_fwprintf_p`, `format` is a wide-character string. These functions behave identically if the stream is opened in ANSI mode. `_fprintf_p` doesn't currently support output into a UNICODE stream.  \n  \n The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current locale.  \n  \n> [!IMPORTANT]\n>  Ensure that `format` is not a user-defined string.  \n  \n Like the non-secure versions (see [fprintf, _fprintf_l, fwprintf, _fwprintf_l](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)), these functions validate their parameters and invoke the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md), if either `stream` or `format` is a null pointer or if there are any unknown or badly formed formatting specifiers. If execution is allowed to continue, the functions return -1 and set `errno` to `EINVAL`.  \n  \n### Generic-Text Routine Mappings  \n  \n|Tchar.h routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_ftprintf_p`|`_fprintf_p`|`_fprintf_p`|`_fwprintf_p`|  \n|`_ftprintf_p_l`|`_fprintf_p_l`|`_fprintf_p_l`|`_fwprintf_p_l`|  \n  \n For more information, see [Format Specifications](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md).  \n  \n## Requirements  \n  \n|Function|Required header|  \n|--------------|---------------------|  \n|`_fprintf_p`, `_fprintf_p_l`|\\<stdio.h>|  \n|`_fwprintf_p`, `_fwprintf_p_l`|\\<stdio.h> or \\<wchar.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_fprintf_p.c  \n// This program uses _fprintf_p to format various  \n// data and print it to the file named FPRINTF_P.OUT. It  \n// then displays FPRINTF_P.OUT on the screen using the system  \n// function to invoke the operating-system TYPE command.  \n//   \n  \n#include <stdio.h>  \n#include <process.h>  \n  \nint main( void )  \n{  \n    FILE    *stream = NULL;  \n    int     i = 10;  \n    double  fp = 1.5;  \n    char    s[] = \"this is a string\";  \n    char    c = '\\n';  \n  \n    // Open the file  \n    if ( fopen_s( &stream, \"fprintf_p.out\", \"w\" ) == 0)  \n    {  \n        // Format and print data  \n        _fprintf_p( stream, \"%2$s%1$c\", c, s );  \n        _fprintf_p( stream, \"%d\\n\", i );  \n        _fprintf_p( stream, \"%f\\n\", fp );  \n  \n        // Close the file  \n        fclose( stream );  \n    }  \n  \n    // Verify our data  \n    system( \"type fprintf_p.out\" );  \n}  \n```  \n  \n```Output  \nthis is a string  \n10  \n1.500000  \n```  \n  \n## .NET Framework Equivalent  \n [System::IO::StreamWriter::Write](https://msdn.microsoft.com/en-us/library/system.io.streamwriter.write.aspx)  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [_cprintf, _cprintf_l, _cwprintf, _cwprintf_l](../../c-runtime-library/reference/cprintf-cprintf-l-cwprintf-cwprintf-l.md)   \n [fscanf, _fscanf_l, fwscanf, _fwscanf_l](../../c-runtime-library/reference/fscanf-fscanf-l-fwscanf-fwscanf-l.md)   \n [sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)   \n [printf_p Positional Parameters](../../c-runtime-library/printf-p-positional-parameters.md)   \n [_cprintf_p, _cprintf_p_l, _cwprintf_p, _cwprintf_p_l](../../c-runtime-library/reference/cprintf-p-cprintf-p-l-cwprintf-p-cwprintf-p-l.md)   \n [_cprintf_s, _cprintf_s_l, _cwprintf_s, _cwprintf_s_l](../../c-runtime-library/reference/cprintf-s-cprintf-s-l-cwprintf-s-cwprintf-s-l.md)   \n [printf_p Positional Parameters](../../c-runtime-library/printf-p-positional-parameters.md)   \n [fscanf_s, _fscanf_s_l, fwscanf_s, _fwscanf_s_l](../../c-runtime-library/reference/fscanf-s-fscanf-s-l-fwscanf-s-fwscanf-s-l.md)"}