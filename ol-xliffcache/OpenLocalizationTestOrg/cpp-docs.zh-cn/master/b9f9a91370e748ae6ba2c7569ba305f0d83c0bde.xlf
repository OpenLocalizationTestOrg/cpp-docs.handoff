<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b9f9a91370e748ae6ba2c7569ba305f0d83c0bde</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\list-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">45a1653b092080f270175d38474d7fe3c91119f1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3dd9fea3b975c5059b5e4126c7b4f6cb95630ba9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>list Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>list Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The STL list class is a template class of sequence containers that maintain their elements in a linear arrangement and allow efficient insertions and deletions at any location within the sequence.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The sequence is stored as a bidirectional linked list of elements, each containing a member of some type <bpt id="p1">*</bpt>Type<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The element data type to be stored in the list.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The type that represents the stored allocator object that encapsulates details about the list's allocation and deallocation of memory.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This argument is optional, and the default value is <bpt id="p1">**</bpt>allocator<ept id="p1">**</ept><ph id="ph1">\&lt;</ph> <bpt id="p2">*</bpt>Type<ept id="p2">*</ept><ph id="ph2">&gt; </ph><bpt id="p3">*</bpt>.<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The choice of container type should be based in general on the type of searching and inserting required by the application.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Vectors should be the preferred container for managing a sequence when random access to any element is at a premium and insertions or deletions of elements are only required at the end of a sequence.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The performance of the class deque container is superior when random access is needed and insertions and deletions at both the beginning and the end of a sequence are at a premium.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The list member functions <bpt id="p1">[</bpt>merge<ept id="p1">](#list__merge)</ept>, <bpt id="p2">[</bpt>reverse<ept id="p2">](#list__reverse)</ept>, <bpt id="p3">[</bpt>unique<ept id="p3">](#list__unique)</ept>, <bpt id="p4">[</bpt>remove<ept id="p4">](#list__remove)</ept>, and <bpt id="p5">[</bpt>remove_if<ept id="p5">](#list__remove_if)</ept> have been optimized for operation on list objects and offer a high-performance alternative to their generic counterparts.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>List reallocation occurs when a member function must insert or erase elements of the list.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In all such cases, only iterators or references that point at erased portions of the controlled sequence become invalid.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Include the STL standard header <ph id="ph1">\&lt;</ph>list&gt; to define the <bpt id="p1">[</bpt>container<ept id="p1">](../standard-library/stl-containers.md)</ept> template class list and several supporting templates.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>list</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Constructs a list of a specific size or with elements of a specific value or with a specific <ph id="ph1">`allocator`</ph> or as a copy of some other list.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>allocator_type</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A type that represents the <ph id="ph1">`allocator`</ph> class for a list object.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>const_iterator</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A type that provides a bidirectional iterator that can read a <ph id="ph1">`const`</ph> element in a list.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>const_pointer</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A type that provides a pointer to a <ph id="ph1">`const`</ph> element in a list.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>const_reference</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A type that provides a reference to a <ph id="ph1">`const`</ph> element stored in a list for reading and performing <ph id="ph2">`const`</ph> operations.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>const_reverse_iterator</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A type that provides a bidirectional iterator that can read any <ph id="ph1">`const`</ph> element in a list.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>difference_type</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A type that provides the difference between two iterators that refer to elements within the same list.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>iterator</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A type that provides a bidirectional iterator that can read or modify any element in a list.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>pointer</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A type that provides a pointer to an element in a list.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>reference</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A type that provides a reference to a <ph id="ph1">`const`</ph> element stored in a list for reading and performing <ph id="ph2">`const`</ph> operations.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>reverse_iterator</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A type that provides a bidirectional iterator that can read or modify an element in a reversed list.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>size_type</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A type that counts the number of elements in a list.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>value_type</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A type that represents the data type stored in a list.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>assign</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Erases elements from a list and copies a new set of elements to the target list.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>back</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Returns a reference to the last element of a list.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>begin</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Returns an iterator addressing the first element in a list.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>list::cbegin</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Returns a const iterator addressing the first element in a list.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>list::cend</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Returns a const iterator that addresses the location succeeding the last element in a list.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>list::clear</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Erases all the elements of a list.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>list::crbegin</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Returns a const iterator addressing the first element in a reversed list.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>list::crend</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Returns a const iterator that addresses the location succeeding the last element in a reversed list.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>list::emplace</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Inserts an element constructed in place into a list at a specified position.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>list::emplace_back</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Adds an element constructed in place to the end of a list.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>list::emplace_front</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Adds an element constructed in place to the beginning of a list.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>empty</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Tests if a list is empty.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>end</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Returns an iterator that addresses the location succeeding the last element in a list.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>erase</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Removes an element or a range of elements in a list from specified positions.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>front</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Returns a reference to the first element in a list.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>get_allocator</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Returns a copy of the <ph id="ph1">`allocator`</ph> object used to construct a list.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>insert</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Inserts an element or a number of elements or a range of elements into a list at a specified position.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>max_size</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Returns the maximum length of a list.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>merge</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Removes the elements from the argument list, inserts them into the target list, and orders the new, combined set of elements in ascending order or in some other specified order.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>pop_back</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Deletes the element at the end of a list.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>pop_front</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Deletes the element at the beginning of a list.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>push_back</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Adds an element to the end of a list.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>push_front</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Adds an element to the beginning of a list.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>rbegin</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Returns an iterator addressing the first element in a reversed list.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>remove</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Erases elements in a list that match a specified value.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>remove_if</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Erases elements from the list for which a specified predicate is satisfied.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>rend</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Returns an iterator that addresses the location succeeding the last element in a reversed list.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>resize</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Specifies a new size for a list.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>reverse</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Reverses the order in which the elements occur in a list.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>size</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in a list.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>sort</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Arranges the elements of a list in ascending order or with respect to some other order relation.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>splice</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Removes elements from the argument list and inserts them into the target list.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>swap</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Exchanges the elements of two lists.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>unique</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Removes adjacent duplicate elements or adjacent elements that satisfy some other binary predicate from the list.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>list::operator=</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Replaces the elements of the list with a copy of another list.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header<ept id="p1">**</ept>: <ph id="ph1">\&lt;</ph>list&gt;</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>list::allocator_type</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>A type that represents the allocator class for a list object.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>is a synonym for the template parameter <bpt id="p1">**</bpt>Allocator.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>get_allocator<ept id="p1">](#list__get_allocator)</ept>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>list::assign</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Erases elements from a list and copies a new set of elements to a target list.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Position of the first element in the range of elements to be copied from the argument list.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Position of the first element just beyond the range of elements to be copied from the argument list.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The number of copies of an element being inserted into the list.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The value of the element being inserted into the list.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The initializer_list that contains the elements to be inserted.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>After erasing any existing elements in the target list, assign either inserts a specified range of elements from the original list or from some other list into the target list or inserts copies of a new element of a specified value into the target list</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>list::back</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Returns a reference to the last element of a list.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The last element of the list.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>If the list is empty, the return value is undefined.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>If the return value of <bpt id="p1">**</bpt>back<ept id="p1">**</ept> is assigned to a <ph id="ph1">`const_reference`</ph>, the list object cannot be modified.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>If the return value of <bpt id="p1">**</bpt>back<ept id="p1">**</ept> is assigned to a <bpt id="p2">**</bpt>reference<ept id="p2">**</ept>, the list object can be modified.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>When compiling with _SECURE_SCL 1, a runtime error will occur if you attempt to access an element in an empty list.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../standard-library/checked-iterators.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>list::begin</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Returns an iterator addressing the first element in a list.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>A bidirectional iterator addressing the first element in the list or to the location succeeding an empty list.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>If the return value of <bpt id="p1">**</bpt>begin<ept id="p1">**</ept> is assigned to a <ph id="ph1">`const_iterator`</ph>, the elements in the list object cannot be modified.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>If the return value of <bpt id="p1">**</bpt>begin<ept id="p1">**</ept> is assigned to an <bpt id="p2">**</bpt>iterator<ept id="p2">**</ept>, the elements in the list object can be modified.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>list::cbegin</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`const`</ph> iterator that addresses the first element in the range.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`const`</ph> bidirectional-access iterator that points at the first element of the range, or the location just beyond the end of an empty range (for an empty range, <ph id="ph2">`cbegin() == cend()`</ph>).</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>With the return value of <ph id="ph1">`cbegin`</ph>, the elements in the range cannot be modified.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>You can use this member function in place of the <ph id="ph1">`begin()`</ph> member function to guarantee that the return value is <ph id="ph2">`const_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Typically, it's used in conjunction with the <bpt id="p1">[</bpt>auto<ept id="p1">](../cpp/auto-cpp.md)</ept> type deduction keyword, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>In the example, consider <ph id="ph1">`Container`</ph> to be a modifiable (non- <ph id="ph2">`const`</ph>) container of any kind that supports <ph id="ph3">`begin()`</ph> and <ph id="ph4">`cbegin()`</ph>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>list::cend</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`const`</ph> iterator that addresses the location just beyond the last element in a range.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`const`</ph> bidirectional-access iterator that points just beyond the end of the range.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>is used to test whether an iterator has passed the end of its range.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>You can use this member function in place of the <ph id="ph1">`end()`</ph> member function to guarantee that the return value is <ph id="ph2">`const_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Typically, it's used in conjunction with the <bpt id="p1">[</bpt>auto<ept id="p1">](../cpp/auto-cpp.md)</ept> type deduction keyword, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>In the example, consider <ph id="ph1">`Container`</ph> to be a modifiable (non- <ph id="ph2">`const`</ph>) container of any kind that supports <ph id="ph3">`end()`</ph> and <ph id="ph4">`cend()`</ph>.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The value returned by <ph id="ph1">`cend`</ph> should not be dereferenced.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>list::clear</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Erases all the elements of a list.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>list::const_iterator</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>A type that provides a bidirectional iterator that can read a <bpt id="p1">**</bpt>const<ept id="p1">**</ept> element in a list.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>A type <ph id="ph1">`const_iterator`</ph> cannot be used to modify the value of an element.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>back<ept id="p1">](#list__back)</ept>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>list::const_pointer</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Provides a pointer to a <ph id="ph1">`const`</ph> element in a list.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>A type <ph id="ph1">`const_pointer`</ph> cannot be used to modify the value of an element.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>In most cases, an <bpt id="p1">[</bpt>iterator<ept id="p1">](#list__iterator)</ept> should be used to access the elements in a list object.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>list::const_reference</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>A type that provides a reference to a <bpt id="p1">**</bpt>const<ept id="p1">**</ept> element stored in a list for reading and performing <bpt id="p2">**</bpt>const<ept id="p2">**</ept> operations.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>A type <ph id="ph1">`const_reference`</ph> cannot be used to modify the value of an element.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>list::const_reverse_iterator</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>A type that provides a bidirectional iterator that can read any <bpt id="p1">**</bpt>const<ept id="p1">**</ept> element in a list.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>A type <ph id="ph1">`const_reverse_iterator`</ph> cannot modify the value of an element and is used to iterate through the list in reverse.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>rbegin<ept id="p1">](#list__rbegin)</ept>.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>list::crbegin</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Returns a const iterator addressing the first element in a reversed list.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>A const reverse bidirectional iterator addressing the first element in a reversed list (or addressing what had been the last element in the unreversed <ph id="ph1">`list`</ph>).</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>is used with a reversed list just as <bpt id="p1">[</bpt>list::begin<ept id="p1">](#list__begin)</ept> is used with a <ph id="ph1">`list`</ph>.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>With the return value of <ph id="ph1">`crbegin`</ph>, the list object cannot be modified.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>list::rbegin<ept id="p1">](#list__rbegin)</ept> can be used to iterate through a list backwards.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>list::crend</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Returns a const iterator that addresses the location succeeding the last element in a reversed list.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>A const reverse bidirectional iterator that addresses the location succeeding the last element in a reversed <bpt id="p1">[</bpt>list<ept id="p1">](../standard-library/list-class.md)</ept> (the location that had preceded the first element in the unreversed <ph id="ph1">`list`</ph>).</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>is used with a reversed list just as <bpt id="p1">[</bpt>list::end<ept id="p1">](#list__end)</ept> is used with a <ph id="ph1">`list`</ph>.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>With the return value of <ph id="ph1">`crend`</ph>, the <ph id="ph2">`list`</ph> object cannot be modified.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>can be used to test to whether a reverse iterator has reached the end of its <ph id="ph1">`list`</ph>.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>The value returned by <ph id="ph1">`crend`</ph> should not be dereferenced.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>list::difference_type</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>A signed integer type that can be used to represent the number of elements of a list in a range between elements pointed to by iterators.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`difference_type`</ph> is the type returned when subtracting or incrementing through iterators of the container.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`difference_type`</ph> is typically used to represent the number of elements in the range [ <ph id="ph2">` first`</ph>, <ph id="ph3">` last`</ph>) between the iterators <ph id="ph4">` first`</ph> and <ph id="ph5">` last`</ph>, includes the element pointed to by <ph id="ph6">` first`</ph> and the range of elements up to, but not including, the element pointed to by <ph id="ph7">` last`</ph>.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Note that although <ph id="ph1">`difference_type`</ph> is available for all iterators that satisfy the requirements of an input iterator, which includes the class of bidirectional iterators supported by reversible containers like set, subtraction between iterators is only supported by random-access iterators provided by a random-access container, such as <bpt id="p1">[</bpt>vector Class<ept id="p1">](../standard-library/vector-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>list::emplace</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Inserts an element constructed in place into a list at a specified position.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The position in the target <bpt id="p1">[</bpt>list<ept id="p1">](../standard-library/list-class.md)</ept> where the first element is inserted.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The element added to the end of the <ph id="ph1">`list`</ph>.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>If an exception is thrown, the <ph id="ph1">`list`</ph> is left unaltered and the exception is rethrown.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>list::emplace_back</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Adds an element constructed in place to the beginning of a list.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The element added to the end of the <bpt id="p1">[</bpt>list<ept id="p1">](../standard-library/list-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>If an exception is thrown, the <ph id="ph1">`list`</ph> is left unaltered and the exception is rethrown.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>list::emplace_front</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Adds an element constructed in place to the beginning of a list.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The element added to the beginning of the <bpt id="p1">[</bpt>list<ept id="p1">](../standard-library/list-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>If an exception is thrown, the <ph id="ph1">`list`</ph> is left unaltered and the exception is rethrown.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>list::empty</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Tests if a list is empty.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the list is empty; <bpt id="p2">**</bpt>false<ept id="p2">**</ept> if the list is not empty.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>list::end</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Returns an iterator that addresses the location succeeding the last element in a list.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>A bidirectional iterator that addresses the location succeeding the last element in a list.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>If the list is empty, then <ph id="ph1">`list::end == list::begin`</ph>.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>end<ept id="p1">**</ept> is used to test whether an iterator has reached the end of its list.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>list::erase</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Removes an element or a range of elements in a list from specified positions.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Position of the element to be removed from the list.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Position of the first element removed from the list.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Position just beyond the last element removed from the list.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>A bidirectional iterator that designates the first element remaining beyond any elements removed, or a pointer to the end of the list if no such element exists.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>No reallocation occurs, so iterators and references become invalid only for the erased elements.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>erase<ept id="p1">**</ept> never throws an exception.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>list::front</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Returns a reference to the first element in a list.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>If the list is empty, the return is undefined.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>If the return value of <ph id="ph1">`front`</ph> is assigned to a <ph id="ph2">`const_reference`</ph>, the list object cannot be modified.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>If the return value of <ph id="ph1">`front`</ph> is assigned to a <bpt id="p1">**</bpt>reference<ept id="p1">**</ept>, the list object can be modified.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>When compiling with _SECURE_SCL 1, a runtime error will occur if you attempt to access an element in an empty list.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../standard-library/checked-iterators.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>list::get_allocator</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Returns a copy of the allocator object used to construct a list.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>The allocator used by the list.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Allocators for the list class specify how the class manages storage.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The default allocators supplied with STL container classes are sufficient for most programming needs.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Writing and using your own allocator class is an advanced C++ topic.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>list::insert</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Inserts an element or a number of elements or a range of elements into a list at a specified position.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>The position in the target list where the first element is inserted.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>The value of the element being inserted into the list.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>The number of elements being inserted into the list.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>The position of the first element in the range of elements in the argument list to be copied.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>The position of the first element beyond the range of elements in the argument list to be copied.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>The first two insert functions return an iterator that points to the position where the new element was inserted into the list.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>list::iterator</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>A type that provides a bidirectional iterator that can read or modify any element in a list.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>A type <bpt id="p1">**</bpt>iterator<ept id="p1">**</ept> can be used to modify the value of an element.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>begin<ept id="p1">](#list__begin)</ept>.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>list::list</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Constructs a list of a specific size or with elements of a specific value or with a specific allocator or as a copy of all or part of some other list.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>The allocator class to use with this object.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>The number of elements in the list constructed.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>The value of the elements in the list.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>The list of which the constructed list is to be a copy.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>The position of the first element in the range of elements to be copied.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>The position of the first element beyond the range of elements to be copied.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>The initializer_list that contains the elements to be copied.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>All constructors store an allocator object ( <ph id="ph1">`Al`</ph>) and initialize the list.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>get_allocator<ept id="p1">](#list__get_allocator)</ept> returns a copy of the allocator object used to construct a list.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>The first two constructors specify an empty initial list, the second specifying the allocator type ( <ph id="ph1">`Al`</ph>) to be used.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>The third constructor specifies a repetition of a specified number ( <ph id="ph1">`Count`</ph>) of elements of the default value for class <bpt id="p1">**</bpt>Type<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>The fourth and fifth constructors specify a repetition of ( <ph id="ph1">`Count`</ph>) elements of value <ph id="ph2">`Val`</ph>.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>The sixth constructor specifies a copy of the list <ph id="ph1">`Right`</ph>.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>The seventh constructor moves the list <ph id="ph1">`Right`</ph>.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>The eighth constructor uses an initializer_list to specify the elements.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>The next two constructors copy the range <ph id="ph1">`[First, Last)`</ph> of a list.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>None of the constructors perform any interim reallocations.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>list::max_size</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Returns the maximum length of a list.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>The maximum possible length of the list.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>list::merge</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Removes the elements from the argument list, inserts them into the target list, and orders the new, combined set of elements in ascending order or in some other specified order.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>The argument list to be merged with the target list.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>The comparison operator used to order the elements of the target list.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>The argument list <ph id="ph1">` right`</ph> is merged with the target list.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Both argument and target lists must be ordered with the same comparison relation by which the resulting sequence is to be ordered.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>The default order for the first member function is ascending order.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>The second member function imposes the user-specified comparison operation <ph id="ph1">` comp`</ph> of class <bpt id="p1">**</bpt>Traits<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>list::operator=</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Replaces the elements of the list with a copy of another list.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>list<ept id="p1">](../standard-library/list-class.md)</ept> being copied into the <ph id="ph1">`list`</ph>.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>After erasing any existing elements in a <ph id="ph1">`list`</ph>, the operator either copies or moves the contents of <ph id="ph2">` right`</ph> into the <ph id="ph3">`list`</ph>.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>list::pointer</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>Provides a pointer to an element in a list.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>A type <bpt id="p1">**</bpt>pointer<ept id="p1">**</ept> can be used to modify the value of an element.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>In most cases, an <bpt id="p1">[</bpt>iterator<ept id="p1">](#list__iterator)</ept> should be used to access the elements in a list object.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>list::pop_back</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Deletes the element at the end of a list.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>The last element must not be empty.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>never throws an exception.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>list::pop_front</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Deletes the element at the beginning of a list.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>The first element must not be empty.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>never throws an exception.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>list::push_back</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Adds an element to the end of a list.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>The element added to the end of the list.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>If an exception is thrown, the list is left unaltered and the exception is rethrown.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>list::push_front</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Adds an element to the beginning of a list.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>The element added to the beginning of the list.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>If an exception is thrown, the list is left unaltered and the exception is rethrown.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>list::rbegin</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Returns an iterator that addresses the first element in a reversed list.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>A reverse bidirectional iterator addressing the first element in a reversed list (or addressing what had been the last element in the unreversed list).</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>is used with a reversed list just as <bpt id="p1">[</bpt>begin<ept id="p1">](#list__begin)</ept> is used with a list.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>If the return value of <ph id="ph1">`rbegin`</ph> is assigned to a <ph id="ph2">`const_reverse_iterator`</ph>, the list object cannot be modified.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>If the return value of <ph id="ph1">`rbegin`</ph> is assigned to a <ph id="ph2">`reverse_iterator`</ph>, the list object can be modified.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>can be used to iterate through a list backwards.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>list::reference</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>A type that provides a reference to an element stored in a list.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>list::remove</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>Erases elements in a list that match a specified value.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>The value which, if held by an element, will result in that element's removal from the list.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>The order of the elements remaining is not affected.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>list::remove_if</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Erases elements from a list for which a specified predicate is satisfied.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>The unary predicate which, if satisfied by an element, results in the deletion of that element from the list.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>list::rend</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Returns an iterator that addresses the location that follows the last element in a reversed list.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>A reverse bidirectional iterator that addresses the location succeeding the last element in a reversed list (the location that had preceded the first element in the unreversed list).</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>is used with a reversed list just as <bpt id="p1">[</bpt>end<ept id="p1">](#list__end)</ept> is used with a list.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>If the return value of <ph id="ph1">`rend`</ph> is assigned to a <ph id="ph2">`const_reverse_iterator`</ph>, the list object cannot be modified.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>If the return value of <ph id="ph1">`rend`</ph> is assigned to a <ph id="ph2">`reverse_iterator`</ph>, the list object can be modified.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>can be used to test to whether a reverse iterator has reached the end of its list.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>The value returned by <ph id="ph1">`rend`</ph> should not be dereferenced.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>list::resize</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>Specifies a new size for a list.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>The new size of the list.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>The value of the new elements to be added to the list if the new size is larger that the original size.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>If the value is omitted, the new elements are assigned the default value for the class.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>If the list's size is less than the requested size, <ph id="ph1">`_Newsize`</ph>, elements are added to the list until it reaches the requested size.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>If the list's size is larger than the requested size, the elements closest to the end of the list are deleted until the list reaches the size <ph id="ph1">`_Newsize`</ph>.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>If the present size of the list is the same as the requested size, no action is taken.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>size<ept id="p1">](#list__size)</ept> reflects the current size of the list.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>list::reverse</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Reverses the order in which the elements occur in a list.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>list::reverse_iterator</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>A type that provides a bidirectional iterator that can read or modify an element in a reversed list.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>A type <ph id="ph1">`reverse_iterator`</ph> is used to iterate through the list in reverse.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>rbegin<ept id="p1">](#list__rbegin)</ept>.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>list::size</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in a list.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>The current length of the list.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>list::size_type</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>A type that counts the number of elements in a list.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>size<ept id="p1">](#list__size)</ept>.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>list::sort</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>Arranges the elements of a list in ascending order or with respect to some other user-specified order.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>The comparison operator used to order successive elements.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>The first member function puts the elements in ascending order by default.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>The member template function orders the elements according to the user-specified comparison operation <ph id="ph1">` comp`</ph> of class <bpt id="p1">**</bpt>Traits<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>list::splice</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>Removes elements from a source list and inserts them into a destination list.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>The position in the destination list before which to insert.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>The source list that is to be inserted into the destination list.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>The element to be inserted from the source list.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>The first element in the range to be inserted from the source list.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>The first position beyond the last element in the range to be inserted from the source list.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>The first pair of member functions inserts all elements in the source list into the destination list before the position referred to by <ph id="ph1">`Where`</ph> and removes all elements from the source list.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>( <ph id="ph1">`&amp;Source`</ph> must not equal <ph id="ph2">`this`</ph>.)</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>The second pair of member functions inserts the element referred to by <ph id="ph1">`Iter`</ph> before the position in the destination list referred to by <ph id="ph2">`Where`</ph> and removes <ph id="ph3">`Iter`</ph> from the source list.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>(If <ph id="ph1">`Where == Iter || Where == ++Iter`</ph>, no change occurs.)</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>The third pair of member functions inserts the range designated by [ <ph id="ph1">`First`</ph>, <ph id="ph2">`Last`</ph>) before the element in the destination list referred to by <ph id="ph3">`Where`</ph> and removes that range of elements from the source list.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>(If <ph id="ph1">`&amp;Source == this`</ph>, the range <ph id="ph2">`[First, Last)`</ph> must not include the element pointed to by <ph id="ph3">`Where`</ph>.)</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>If the ranged splice inserts <ph id="ph1">`N`</ph> elements, and <ph id="ph2">`&amp;Source != this`</ph>, an object of class <bpt id="p1">[</bpt>iterator<ept id="p1">](../standard-library/forward-list-class.md#forward_list__iterator)</ept> is incremented <ph id="ph3">`N`</ph> times.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>In all cases iterators, pointers, or references that refer to spliced elements remain valid and are transferred to the destination container.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>list::swap</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>Exchanges the elements of two lists.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>The list providing the elements to be swapped, or the list whose elements are to be exchanged with those of the list <ph id="ph1">` left`</ph>.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>A list whose elements are to be exchanged with those of the list <ph id="ph1">` right`</ph>.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>list::unique</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>Removes adjacent duplicate elements or adjacent elements that satisfy some other binary predicate from a list.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>The binary predicate used to compare successive elements.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>This function assumes that the list is sorted, so that all duplicate elements are adjacent.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>Duplicates that are not adjacent will not be deleted.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>The first member function removes every element that compares equal to its preceding element.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>The second member function removes every element that satisfies the predicate function <ph id="ph1">` pred`</ph> when compared with its preceding element.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>You can use any of the binary function objects declared in the <ph id="ph1">`&lt;functional&gt;`</ph>header for the argument  pred or you can create your own.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>list::value_type</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>A type that represents the data type stored in a list.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>is a synonym for the template parameter <bpt id="p1">**</bpt>Type<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>list&gt;</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>Thread Safety in the C++ Standard Library</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>C++ Standard Library Reference</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>