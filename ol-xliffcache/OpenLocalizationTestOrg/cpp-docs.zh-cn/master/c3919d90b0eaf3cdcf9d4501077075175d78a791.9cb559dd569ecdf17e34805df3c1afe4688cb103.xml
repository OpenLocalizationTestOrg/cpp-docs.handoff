{"nodes":[{"pos":[12,46],"content":"bind1st (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"bind1st (STL-CLR) | Microsoft Docs","pos":[0,34]}]},{"content":"bind1st (STL/CLR)","pos":[620,637]},{"pos":[638,690],"content":"Generates a <ph id=\"ph1\">`binder1st`</ph> for an argument and functor.","source":"Generates a `binder1st` for an argument and functor."},{"content":"Syntax","pos":[699,705]},{"content":"Template Parameters","pos":[838,857]},{"content":"Arg","pos":[861,864]},{"content":"The type of the argument.","pos":[868,893]},{"content":"Fun","pos":[900,903]},{"content":"The type of the functor.","pos":[907,931]},{"content":"Function Parameters","pos":[940,959]},{"content":"functor","pos":[963,970]},{"content":"The functor to wrap.","pos":[974,994]},{"content":"left","pos":[1001,1005]},{"content":"The first argument to wrap.","pos":[1009,1036]},{"content":"Remarks","pos":[1045,1052]},{"content":"The template function returns <bpt id=\"p1\">[</bpt>binder1st (STL/CLR)<ept id=\"p1\">](../dotnet/binder1st-stl-clr.md)</ept><ph id=\"ph1\">`&lt;Fun&gt;(functor, left)`</ph>.","pos":[1056,1162],"source":"The template function returns [binder1st (STL/CLR)](../dotnet/binder1st-stl-clr.md)`<Fun>(functor, left)`."},{"content":"You use it as a convenient way to wrap a two-argument functor and its first argument in a one-argument functor that calls it with a second argument.","pos":[1163,1311]},{"content":"Example","pos":[1320,1327]},{"content":"Requirements","pos":[2486,2498]},{"pos":[2502,2534],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/functional&gt;","source":"**Header:** \\<cliext/functional>"},{"pos":[2541,2562],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2571,2579]},{"content":"binder1st (STL/CLR)","pos":[2584,2603]}],"content":"---\ntitle: \"bind1st (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::bind1st\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"bind1st function [STL/CLR]\"\nms.assetid: 03a04cef-60fb-4667-b22a-22a387adb028\ncaps.latest.revision: 14\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# bind1st (STL/CLR)\nGenerates a `binder1st` for an argument and functor.  \n  \n## Syntax  \n  \n```  \ntemplate<typename Fun,  \n    typename Arg>  \n    binder1st<Fun> bind1st(Fun% functor,  \n        Arg left);  \n```  \n  \n## Template Parameters  \n Arg  \n The type of the argument.  \n  \n Fun  \n The type of the functor.  \n  \n## Function Parameters  \n functor  \n The functor to wrap.  \n  \n left  \n The first argument to wrap.  \n  \n## Remarks  \n The template function returns [binder1st (STL/CLR)](../dotnet/binder1st-stl-clr.md)`<Fun>(functor, left)`. You use it as a convenient way to wrap a two-argument functor and its first argument in a one-argument functor that calls it with a second argument.  \n  \n## Example  \n  \n```  \n// cliext_bind1st.cpp   \n// compile with: /clr   \n#include <cliext/algorithm>   \n#include <cliext/functional>   \n#include <cliext/vector>   \n  \ntypedef cliext::vector<int> Myvector;   \nint main()   \n    {   \n    Myvector c1;   \n    c1.push_back(4);   \n    c1.push_back(3);   \n    Myvector c3(2, 0);   \n  \n// display initial contents \" 4 3\"   \n    for each (int elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// transform and display   \n    cliext::minus<int> sub_op;   \n    cliext::binder1st<cliext::minus<int> > subfrom3(sub_op, 3);   \n  \n    cliext::transform(c1.begin(), c1.begin() + 2, c3.begin(),   \n        subfrom3);   \n    for each (int elem in c3)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// transform and display with function   \n    cliext::transform(c1.begin(), c1.begin() + 2, c3.begin(),   \n        bind1st(sub_op, 3));   \n    for each (int elem in c3)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n4 3  \n-1 0  \n-1 0  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/functional>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [binder1st (STL/CLR)](../dotnet/binder1st-stl-clr.md)"}