{"nodes":[{"pos":[12,44],"content":"_cgets, _cgetws | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_cgets, _cgetws | Microsoft Docs","pos":[0,32]}]},{"content":"_cgets, _cgetws","pos":[1010,1025]},{"content":"Gets a character string from the console.","pos":[1026,1067]},{"content":"More secure versions of these functions are available; see <bpt id=\"p1\">[</bpt>_cgets_s, _cgetws_s<ept id=\"p1\">](../c-runtime-library/reference/cgets-s-cgetws-s.md)</ept>.","pos":[1068,1201],"source":" More secure versions of these functions are available; see [_cgets_s, _cgetws_s](../c-runtime-library/reference/cgets-s-cgetws-s.md)."},{"pos":[1209,1535],"content":"[!IMPORTANT]\n These functions are obsolete. Beginning in Visual Studio 2015, they are not available in the CRT. The secure versions of these functions,  _cgets_s and _cgetws_s, are still available. For information on these alternative functions, see [_cgets_s, _cgetws_s](../c-runtime-library/reference/cgets-s-cgetws-s.md).","leadings":["","> "],"nodes":[{"content":" These functions are obsolete. Beginning in Visual Studio 2015, they are not available in the CRT. The secure versions of these functions,  _cgets_s and _cgetws_s, are still available. For information on these alternative functions, see [_cgets_s, _cgetws_s](../c-runtime-library/reference/cgets-s-cgetws-s.md).","pos":[13,324],"nodes":[{"content":"These functions are obsolete.","pos":[1,30]},{"content":"Beginning in Visual Studio 2015, they are not available in the CRT.","pos":[31,98]},{"content":"The secure versions of these functions,  _cgets_s and _cgetws_s, are still available.","pos":[99,184]},{"content":"For information on these alternative functions, see <bpt id=\"p1\">[</bpt>_cgets_s, _cgetws_s<ept id=\"p1\">](../c-runtime-library/reference/cgets-s-cgetws-s.md)</ept>.","pos":[185,311],"source":" For information on these alternative functions, see [_cgets_s, _cgetws_s](../c-runtime-library/reference/cgets-s-cgetws-s.md)."}]}]},{"pos":[1543,1763],"content":"[!IMPORTANT]\n This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","leadings":["","> "],"nodes":[{"content":" This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","pos":[13,218],"nodes":[{"content":"This API cannot be used in applications that execute in the Windows Runtime.","pos":[1,77]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRT functions not supported with /ZW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.","pos":[78,205],"source":" For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)."}]}]},{"content":"Syntax","pos":[1772,1778]},{"content":"Parameters","pos":[2067,2077]},{"content":"Storage location for data.","pos":[2093,2119]},{"content":"Return Value","pos":[2128,2140]},{"content":"and <ph id=\"ph1\">`_cgetws`</ph> return a pointer to the start of the string, at <ph id=\"ph2\">`buffer[2]`</ph>.","pos":[2153,2227],"source":" and `_cgetws` return a pointer to the start of the string, at `buffer[2]`."},{"content":"If <ph id=\"ph1\">`buffer`</ph> is <ph id=\"ph2\">`NULL`</ph>, these functions invoke the invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../c-runtime-library/parameter-validation.md)</ept>.","pos":[2228,2390],"source":" If `buffer` is `NULL`, these functions invoke the invalid parameter handler, as described in [Parameter Validation](../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, they return <ph id=\"ph1\">`NULL`</ph> and set <ph id=\"ph2\">`errno`</ph> to <ph id=\"ph3\">`EINVAL`</ph>.","pos":[2391,2475],"source":" If execution is allowed to continue, they return `NULL` and set `errno` to `EINVAL`."},{"content":"Remarks","pos":[2484,2491]},{"content":"These functions read a string of characters from the console and store the string and its length in the location pointed to by <ph id=\"ph1\">`buffer`</ph>.","pos":[2495,2631],"source":"These functions read a string of characters from the console and store the string and its length in the location pointed to by `buffer`."},{"content":"The <ph id=\"ph1\">`buffer`</ph> parameter must be a pointer to a character array.","pos":[2632,2694],"source":" The `buffer` parameter must be a pointer to a character array."},{"content":"The first element of the array, <ph id=\"ph1\">`buffer[0]`</ph>, must contain the maximum length (in characters) of the string to be read.","pos":[2695,2813],"source":" The first element of the array, `buffer[0]`, must contain the maximum length (in characters) of the string to be read."},{"content":"The array must contain enough elements to hold the string, a terminating null character ('\\0'), and 2 additional bytes.","pos":[2814,2933]},{"content":"The function reads characters until a carriage returnâ€“line feed (CR-LF) combination or the specified number of characters is read.","pos":[2934,3064]},{"content":"The string is stored starting at <ph id=\"ph1\">`buffer[2]`</ph>.","pos":[3065,3110],"source":" The string is stored starting at `buffer[2]`."},{"content":"If the function reads a CR-LF, it stores the null character ('\\0').","pos":[3111,3178]},{"content":"The function then stores the actual length of the string in the second array element, <ph id=\"ph1\">`buffer[1]`</ph>.","pos":[3179,3277],"source":" The function then stores the actual length of the string in the second array element, `buffer[1]`."},{"pos":[3284,3434],"content":"Because all editing keys are active when <ph id=\"ph1\">`_cgets`</ph> or<ph id=\"ph2\">`_cgetws`</ph> is called while in a console window, pressing the F3 key repeats the last entered entry.","source":"Because all editing keys are active when `_cgets` or`_cgetws` is called while in a console window, pressing the F3 key repeats the last entered entry."},{"content":"In C++, these functions have template overloads that invoke the newer, secure counterparts of these functions.","pos":[3441,3551]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[3552,3657],"source":" For more information, see [Secure Template Overloads](../c-runtime-library/secure-template-overloads.md)."},{"content":"Generic-Text Routine Mappings","pos":[3667,3696]},{"content":"Tchar.h routine","pos":[3703,3718]},{"content":"_UNICODE and _MBCS not defined","pos":[3719,3749]},{"content":"_MBCS defined","pos":[3750,3763]},{"content":"_UNICODE defined","pos":[3764,3780]},{"content":"Requirements","pos":[3942,3954]},{"content":"Routine","pos":[3961,3968]},{"content":"Required header","pos":[3969,3984]},{"content":"conio.h&gt;","pos":[4040,4048],"source":"conio.h>"},{"content":"conio.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[4065,4087],"source":"conio.h> or \\<wchar.h>"},{"pos":[4095,4190],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../c-runtime-library/compatibility.md)</ept>.","source":"For more compatibility information, see [Compatibility](../c-runtime-library/compatibility.md)."},{"content":"Example","pos":[4199,4206]},{"content":"See Also","pos":[5264,5272]},{"content":"Console and Port I/O","pos":[5277,5297]},{"content":"_getch, _getwch","pos":[5350,5365]}],"content":"---\ntitle: \"_cgets, _cgetws | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_cgetws\"\n  - \"_cgets\"\napilocation: \n  - \"msvcr100.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcrt.dll\"\n  - \"msvcr110_clr0400.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"cgetws\"\n  - \"_cgetws\"\n  - \"_cgets\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_cgetws function\"\n  - \"strings [C++], getting from console\"\n  - \"console, getting strings from\"\n  - \"_cgets function\"\n  - \"cgetws function\"\n  - \"cgets function\"\nms.assetid: 4d5e134a-58c3-4f62-befd-5d235b0212f4\ncaps.latest.revision: 32\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# _cgets, _cgetws\nGets a character string from the console. More secure versions of these functions are available; see [_cgets_s, _cgetws_s](../c-runtime-library/reference/cgets-s-cgetws-s.md).  \n  \n> [!IMPORTANT]\n>  These functions are obsolete. Beginning in Visual Studio 2015, they are not available in the CRT. The secure versions of these functions,  _cgets_s and _cgetws_s, are still available. For information on these alternative functions, see [_cgets_s, _cgetws_s](../c-runtime-library/reference/cgets-s-cgetws-s.md).  \n  \n> [!IMPORTANT]\n>  This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).  \n  \n## Syntax  \n  \n```  \nchar *_cgets(   \n   char *buffer   \n);  \nwchar_t *_cgetws(  \n   wchar_t *buffer  \n);  \ntemplate <size_t size>  \nchar *_cgets(   \n   char (&buffer)[size]  \n); // C++ only  \ntemplate <size_t size>  \nwchar_t *_cgetws(  \n   wchar_t (&buffer)[size]  \n); // C++ only  \n```  \n  \n#### Parameters  \n `buffer`  \n Storage location for data.  \n  \n## Return Value  \n `_cgets` and `_cgetws` return a pointer to the start of the string, at `buffer[2]`. If `buffer` is `NULL`, these functions invoke the invalid parameter handler, as described in [Parameter Validation](../c-runtime-library/parameter-validation.md). If execution is allowed to continue, they return `NULL` and set `errno` to `EINVAL`.  \n  \n## Remarks  \n These functions read a string of characters from the console and store the string and its length in the location pointed to by `buffer`. The `buffer` parameter must be a pointer to a character array. The first element of the array, `buffer[0]`, must contain the maximum length (in characters) of the string to be read. The array must contain enough elements to hold the string, a terminating null character ('\\0'), and 2 additional bytes. The function reads characters until a carriage returnâ€“line feed (CR-LF) combination or the specified number of characters is read. The string is stored starting at `buffer[2]`. If the function reads a CR-LF, it stores the null character ('\\0'). The function then stores the actual length of the string in the second array element, `buffer[1]`.  \n  \n Because all editing keys are active when `_cgets` or`_cgetws` is called while in a console window, pressing the F3 key repeats the last entered entry.  \n  \n In C++, these functions have template overloads that invoke the newer, secure counterparts of these functions. For more information, see [Secure Template Overloads](../c-runtime-library/secure-template-overloads.md).  \n  \n### Generic-Text Routine Mappings  \n  \n|Tchar.h routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_cgetts`|`_cgets`|`_cgets`|`_cgetws`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_cgets`|\\<conio.h>|  \n|`_cgetws`|\\<conio.h> or \\<wchar.h>|  \n  \n For more compatibility information, see [Compatibility](../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n// crt_cgets.c  \n// compile with: /c /W3  \n// This program creates a buffer and initializes  \n// the first byte to the size of the buffer. Next, the  \n// program accepts an input string using _cgets and displays  \n// the size and text of that string.  \n  \n#include <conio.h>  \n#include <stdio.h>  \n#include <errno.h>  \n  \nint main( void )  \n{  \n   char buffer[83] = { 80 };  // Maximum characters in 1st byte  \n   char *result;  \n  \n   printf( \"Input line of text, followed by carriage return:\\n\");  \n  \n   // Input a line of text:  \n   result = _cgets( buffer ); // C4996  \n   // Note: _cgets is deprecated; consider using _cgets_s  \n   if (!result)  \n   {  \n      printf( \"An error occurred reading from the console:\"  \n              \" error code %d\\n\", errno);  \n   }  \n   else  \n   {     \n      printf( \"\\nLine length = %d\\nText = %s\\n\",  \n              buffer[1], result );  \n   }  \n}  \n```  \n  \n```Output  \n  \n      A line of input.Input line of text, followed by carriage return:  \nLine Length = 16  \nText = A line of input.  \n```  \n  \n## See Also  \n [Console and Port I/O](../c-runtime-library/console-and-port-i-o.md)   \n [_getch, _getwch](../c-runtime-library/reference/getch-getwch.md)"}