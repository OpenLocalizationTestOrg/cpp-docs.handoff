{"nodes":[{"pos":[12,86],"content":"How to: Parse Strings Using Regular Expressions (C++-CLI) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Parse Strings Using Regular Expressions (C++-CLI) | Microsoft Docs","pos":[0,74]}]},{"content":"How to: Parse Strings Using Regular Expressions (C++/CLI)","pos":[724,781]},{"content":"The following code example demonstrates simple string parsing using the &lt;xref:System.Text.RegularExpressions.Regex&gt; class in the &lt;xref:System.Text.RegularExpressions?displayProperty=fullName&gt; namespace.","pos":[782,984],"source":"The following code example demonstrates simple string parsing using the <xref:System.Text.RegularExpressions.Regex> class in the <xref:System.Text.RegularExpressions?displayProperty=fullName> namespace."},{"content":"A string containing multiple types of word delineators is constructed.","pos":[985,1055]},{"content":"The string is then parsed using the &lt;xref:System.Text.RegularExpressions.Regex&gt; class in conjunction with the &lt;xref:System.Text.RegularExpressions.Match&gt; class.","pos":[1056,1216],"source":" The string is then parsed using the <xref:System.Text.RegularExpressions.Regex> class in conjunction with the <xref:System.Text.RegularExpressions.Match> class."},{"content":"Then, each word in the sentence is displayed separately.","pos":[1217,1273]},{"content":"Example","pos":[1282,1289]},{"content":"See Also","pos":[2084,2092]},{"content":".NET Framework Regular Expressions","pos":[2097,2131]},{"content":".NET Programming with C++/CLI (Visual C++)","pos":[2210,2252]}],"content":"---\ntitle: \"How to: Parse Strings Using Regular Expressions (C++-CLI) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"parsing strings [C++]\"\n  - \"examples [C++], strings\"\n  - \"regular expressions [C++], parsing strings\"\n  - \"strings [C++], parsing\"\nms.assetid: 5b0c7ca3-9bba-4389-a45c-6d373cff91b0\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Parse Strings Using Regular Expressions (C++/CLI)\nThe following code example demonstrates simple string parsing using the <xref:System.Text.RegularExpressions.Regex> class in the <xref:System.Text.RegularExpressions?displayProperty=fullName> namespace. A string containing multiple types of word delineators is constructed. The string is then parsed using the <xref:System.Text.RegularExpressions.Regex> class in conjunction with the <xref:System.Text.RegularExpressions.Match> class. Then, each word in the sentence is displayed separately.  \n  \n## Example  \n  \n```  \n// regex_parse.cpp  \n// compile with: /clr  \n#using <system.dll>  \n  \nusing namespace System;  \nusing namespace System::Text::RegularExpressions;  \n  \nint main( )  \n{  \n   int words = 0;  \n   String^ pattern = \"[a-zA-Z]*\";  \n   Console::WriteLine( \"pattern : '{0}'\", pattern );  \n   Regex^ regex = gcnew Regex( pattern );  \n  \n   String^ line = \"one\\ttwo three:four,five six  seven\";     \n   Console::WriteLine( \"text : '{0}'\", line );  \n   for( Match^ match = regex->Match( line );   \n        match->Success; match = match->NextMatch( ) )   \n   {  \n      if( match->Value->Length > 0 )  \n      {  \n         words++;  \n         Console::WriteLine( \"{0}\", match->Value );  \n      }  \n   }  \n   Console::WriteLine( \"Number of Words : {0}\", words );  \n  \n   return 0;  \n}  \n```  \n  \n## See Also  \n [.NET Framework Regular Expressions](http://msdn.microsoft.com/Library/521b3f6d-f869-42e1-93e5-158c54a6895d)   \n [.NET Programming with C++/CLI (Visual C++)](../dotnet/dotnet-programming-with-cpp-cli-visual-cpp.md)"}