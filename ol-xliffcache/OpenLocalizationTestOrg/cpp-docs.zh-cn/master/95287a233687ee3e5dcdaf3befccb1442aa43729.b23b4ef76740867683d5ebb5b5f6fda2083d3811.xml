{"nodes":[{"pos":[12,58],"content":"atoi, _atoi_l, _wtoi, _wtoi_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"atoi, _atoi_l, _wtoi, _wtoi_l | Microsoft Docs","pos":[0,46]}]},{"content":"atoi, _atoi_l, _wtoi, _wtoi_l","pos":[1303,1332]},{"content":"Convert a string to integer.","pos":[1333,1361]},{"content":"Syntax","pos":[1370,1376]},{"content":"Parameters","pos":[1615,1625]},{"content":"String to be converted.","pos":[1638,1661]},{"content":"Locale to use.","pos":[1680,1694]},{"content":"Return Value","pos":[1703,1715]},{"content":"Each function returns the <ph id=\"ph1\">`int`</ph> value produced by interpreting the input characters as a number.","pos":[1719,1815],"source":"Each function returns the `int` value produced by interpreting the input characters as a number."},{"content":"The return value is 0 for <ph id=\"ph1\">`atoi`</ph> and <ph id=\"ph2\">`_wtoi`</ph>, if the input cannot be converted to a value of that type.","pos":[1816,1919],"source":" The return value is 0 for `atoi` and `_wtoi`, if the input cannot be converted to a value of that type."},{"content":"In the case of overflow with large negative integral values, <ph id=\"ph1\">`LONG_MIN`</ph> is returned.","pos":[1926,2010],"source":"In the case of overflow with large negative integral values, `LONG_MIN` is returned."},{"content":"and <ph id=\"ph1\">`_wtoi`</ph> return <ph id=\"ph2\">`INT_MAX`</ph> and <ph id=\"ph3\">`INT_MIN`</ph> on these conditions.","pos":[2018,2081],"source":" and `_wtoi` return `INT_MAX` and `INT_MIN` on these conditions."},{"content":"In all out-of-range cases, <ph id=\"ph1\">`errno`</ph> is set to <ph id=\"ph2\">`ERANGE`</ph>.","pos":[2082,2136],"source":" In all out-of-range cases, `errno` is set to `ERANGE`."},{"content":"If the parameter passed in is <ph id=\"ph1\">`NULL`</ph>, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2137,2305],"source":" If the parameter passed in is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and return 0.","pos":[2306,2396],"source":" If execution is allowed to continue, these functions set `errno` to `EINVAL` and return 0."},{"content":"Remarks","pos":[2405,2412]},{"content":"These functions convert a character string to an integer value (<ph id=\"ph1\">`atoi`</ph> and <ph id=\"ph2\">`_wtoi`</ph>).","pos":[2416,2500],"source":"These functions convert a character string to an integer value (`atoi` and `_wtoi`)."},{"content":"The input string is a sequence of characters that can be interpreted as a numerical value of the specified type.","pos":[2501,2613]},{"content":"The function stops reading the input string at the first character that it cannot recognize as part of a number.","pos":[2614,2726]},{"content":"This character may be the null character ('\\0' or L'\\0') terminating the string.","pos":[2727,2807]},{"pos":[2814,2877],"content":"The <ph id=\"ph1\">`str`</ph> argument to <ph id=\"ph2\">`atoi`</ph>and <ph id=\"ph3\">`_wtoi`</ph> has the following form:","source":"The `str` argument to `atoi`and `_wtoi` has the following form:"},{"pos":[2884,2919],"content":"[<ph id=\"ph1\">`whitespace`</ph>] [<ph id=\"ph2\">`sign`</ph>] [<ph id=\"ph3\">`digits`</ph>]]","source":"[`whitespace`] [`sign`] [`digits`]]"},{"pos":[2926,3073],"content":"A <ph id=\"ph1\">`whitespace`</ph> consists of space or tab characters, which are ignored; <ph id=\"ph2\">`sign`</ph> is either plus (+) or minus (–); and <ph id=\"ph3\">`digits`</ph> are one or more digits.","source":"A `whitespace` consists of space or tab characters, which are ignored; `sign` is either plus (+) or minus (–); and `digits` are one or more digits."},{"content":"The versions of these functions with the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead of the current locale.","pos":[3080,3229],"source":"The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current locale."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Locale<ept id=\"p1\">](../../c-runtime-library/locale.md)</ept>.","pos":[3230,3300],"source":" For more information, see [Locale](../../c-runtime-library/locale.md)."},{"content":"Generic-Text Routine Mappings","pos":[3310,3339]},{"content":"TCHAR.H routine","pos":[3346,3361]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[3362,3390],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[3391,3404]},{"content":"_UNICODE defined","pos":[3405,3421]},{"content":"Requirements","pos":[3608,3620]},{"content":"Routines","pos":[3627,3635]},{"content":"Required header","pos":[3636,3651]},{"content":"stdlib.h&gt;","pos":[3706,3715],"source":"stdlib.h>"},{"pos":[3729,3739],"content":", <ph id=\"ph1\">`_wtoi`</ph>,","source":", `_wtoi`, "},{"content":"stdlib.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[3752,3775],"source":"stdlib.h> or \\<wchar.h>"},{"content":"Example","pos":[3785,3792]},{"pos":[3796,3907],"content":"This program shows how numbers stored as strings can be converted to numeric values using the <ph id=\"ph1\">`atoi`</ph> functions.","source":"This program shows how numbers stored as strings can be converted to numeric values using the `atoi` functions."},{"content":".NET Framework Equivalent","pos":[5054,5079]},{"content":"System::Convert::ToInt32","pos":[5090,5114]},{"content":"System::Convert::ToUInt32","pos":[5196,5221]},{"content":"See Also","pos":[5302,5310]},{"content":"Data Conversion","pos":[5315,5330]},{"content":"Floating-Point Support","pos":[5381,5403]},{"content":"Locale","pos":[5461,5467]},{"content":"_ecvt","pos":[5509,5514]},{"content":"_fcvt","pos":[5564,5569]},{"content":"_gcvt","pos":[5619,5624]},{"content":"setlocale, _wsetlocale","pos":[5674,5696]},{"content":"_atodbl, _atodbl_l, _atoldbl, _atoldbl_l, _atoflt, _atoflt_l","pos":[5762,5822]}],"content":"---\ntitle: \"atoi, _atoi_l, _wtoi, _wtoi_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_wtoi\"\n  - \"_wtoi_l\"\n  - \"atoi\"\n  - \"_atoi_l\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-convert-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_tstoi\"\n  - \"_wtoi\"\n  - \"_ttoi\"\n  - \"atoi\"\n  - \"_atoi_l\"\n  - \"_wtoi_l\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_atoi_l function\"\n  - \"ttoi function\"\n  - \"atoi_l function\"\n  - \"string conversion, to integers\"\n  - \"_wtoi function\"\n  - \"wtoi_l function\"\n  - \"tstoi function\"\n  - \"_ttoi function\"\n  - \"_tstoi function\"\n  - \"_wtoi_l function\"\n  - \"atoi function\"\n  - \"wtoi function\"\nms.assetid: ad7fda30-28ab-421f-aaad-ef0b8868663a\ncaps.latest.revision: 22\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# atoi, _atoi_l, _wtoi, _wtoi_l\nConvert a string to integer.  \n  \n## Syntax  \n  \n```  \nint atoi(  \n   const char *str   \n);  \nint _wtoi(  \n   const wchar_t *str   \n);  \nint _atoi_l(  \n   const char *str,  \n   _locale_t locale  \n);  \nint _wtoi_l(  \n   const wchar_t *str,  \n   _locale_t locale  \n);  \n```  \n  \n#### Parameters  \n `str`  \n String to be converted.  \n  \n `locale`  \n Locale to use.  \n  \n## Return Value  \n Each function returns the `int` value produced by interpreting the input characters as a number. The return value is 0 for `atoi` and `_wtoi`, if the input cannot be converted to a value of that type.  \n  \n In the case of overflow with large negative integral values, `LONG_MIN` is returned. `atoi` and `_wtoi` return `INT_MAX` and `INT_MIN` on these conditions. In all out-of-range cases, `errno` is set to `ERANGE`. If the parameter passed in is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions set `errno` to `EINVAL` and return 0.  \n  \n## Remarks  \n These functions convert a character string to an integer value (`atoi` and `_wtoi`). The input string is a sequence of characters that can be interpreted as a numerical value of the specified type. The function stops reading the input string at the first character that it cannot recognize as part of a number. This character may be the null character ('\\0' or L'\\0') terminating the string.  \n  \n The `str` argument to `atoi`and `_wtoi` has the following form:  \n  \n [`whitespace`] [`sign`] [`digits`]]  \n  \n A `whitespace` consists of space or tab characters, which are ignored; `sign` is either plus (+) or minus (–); and `digits` are one or more digits.  \n  \n The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current locale. For more information, see [Locale](../../c-runtime-library/locale.md).  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_tstoi`|`atoi`|`atoi`|`_wtoi`|  \n|`_ttoi`|`atoi`|`atoi`|`_wtoi`|  \n  \n## Requirements  \n  \n|Routines|Required header|  \n|--------------|---------------------|  \n|`atoi`|\\<stdlib.h>|  \n|`_atoi_l`, `_wtoi`, `_wtoi_l`|\\<stdlib.h> or \\<wchar.h>|  \n  \n## Example  \n This program shows how numbers stored as strings can be converted to numeric values using the `atoi` functions.  \n  \n```  \n// crt_atoi.c  \n// This program shows how numbers   \n// stored as strings can be converted to  \n// numeric values using the atoi functions.  \n  \n#include <stdlib.h>  \n#include <stdio.h>  \n#include <errno.h>  \n  \nint main( void )  \n{  \n    char    *str = NULL;  \n    int     value = 0;  \n  \n    // An example of the atoi function.  \n    str = \"  -2309 \";  \n    value = atoi( str );  \n    printf( \"Function: atoi( \\\"%s\\\" ) = %d\\n\", str, value );  \n  \n    // Another example of the atoi function.  \n    str = \"31412764\";  \n    value = atoi( str );  \n    printf( \"Function: atoi( \\\"%s\\\" ) = %d\\n\", str, value );  \n  \n    // Another example of the atoi function   \n    // with an overflow condition occuring.  \n    str = \"3336402735171707160320\";  \n    value = atoi( str );  \n    printf( \"Function: atoi( \\\"%s\\\" ) = %d\\n\", str, value );  \n    if (errno == ERANGE)  \n    {  \n       printf(\"Overflow condition occurred.\\n\");  \n    }  \n}  \n```  \n  \n```Output  \nFunction: atoi( \"  -2309 \" ) = -2309  \nFunction: atoi( \"31412764\" ) = 31412764  \nFunction: atoi( \"3336402735171707160320\" ) = 2147483647  \nOverflow condition occurred.  \n```  \n  \n## .NET Framework Equivalent  \n  \n-   [System::Convert::ToInt32](https://msdn.microsoft.com/en-us/library/system.convert.toint32.aspx)  \n  \n-   [System::Convert::ToUInt32](https://msdn.microsoft.com/en-us/library/system.convert.touint32.aspx)  \n  \n## See Also  \n [Data Conversion](../../c-runtime-library/data-conversion.md)   \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [Locale](../../c-runtime-library/locale.md)   \n [_ecvt](../../c-runtime-library/reference/ecvt.md)   \n [_fcvt](../../c-runtime-library/reference/fcvt.md)   \n [_gcvt](../../c-runtime-library/reference/gcvt.md)   \n [setlocale, _wsetlocale](../../c-runtime-library/reference/setlocale-wsetlocale.md)   \n [_atodbl, _atodbl_l, _atoldbl, _atoldbl_l, _atoflt, _atoflt_l](../../c-runtime-library/reference/atodbl-atodbl-l-atoldbl-atoldbl-l-atoflt-atoflt-l.md)"}