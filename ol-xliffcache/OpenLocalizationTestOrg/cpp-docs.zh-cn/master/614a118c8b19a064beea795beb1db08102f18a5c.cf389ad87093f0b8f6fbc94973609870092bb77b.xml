{"nodes":[{"pos":[12,48],"content":"CRenderTarget Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CRenderTarget Class | Microsoft Docs","pos":[0,36]}]},{"content":"CRenderTarget Class","pos":[649,668]},{"content":"A wrapper for ID2D1RenderTarget.","pos":[669,701]},{"content":"Syntax","pos":[710,716]},{"content":"Members","pos":[780,787]},{"content":"Public Constructors","pos":[797,816]},{"content":"Name","pos":[823,827]},{"content":"Description","pos":[828,839]},{"content":"CRenderTarget::CRenderTarget","pos":[878,906]},{"content":"Constructs a CRenderTarget object.","pos":[939,973]},{"content":"CRenderTarget::~CRenderTarget","pos":[979,1008]},{"content":"The destructor.","pos":[1042,1057]},{"content":"Called when a render target object is being destroyed.","pos":[1058,1112]},{"content":"Public Methods","pos":[1123,1137]},{"content":"Name","pos":[1144,1148]},{"content":"Description","pos":[1149,1160]},{"content":"CRenderTarget::Attach","pos":[1199,1220]},{"content":"Attaches existing render target interface to the object","pos":[1246,1301]},{"content":"CRenderTarget::BeginDraw","pos":[1307,1331]},{"content":"Initiates drawing on this render target.","pos":[1360,1400]},{"content":"CRenderTarget::Clear","pos":[1406,1426]},{"content":"Clears the drawing area to the specified color.","pos":[1451,1498]},{"content":"CRenderTarget::COLORREF_TO_D2DCOLOR","pos":[1504,1539]},{"content":"Converts GDI color and alpha values to the D2D1_COLOR_F object.","pos":[1579,1642]},{"content":"CRenderTarget::CreateCompatibleRenderTarget","pos":[1648,1691]},{"content":"Creates a new bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target .","pos":[1739,1871]},{"content":"CRenderTarget::Destroy","pos":[1877,1899]},{"content":"Deletes one or more resources","pos":[1926,1955]},{"content":"CRenderTarget::Detach","pos":[1961,1982]},{"content":"Detaches render target interface from the object","pos":[2008,2056]},{"content":"CRenderTarget::DrawBitmap","pos":[2062,2087]},{"content":"Draws the formatted text described by the specified IDWriteTextLayout object.","pos":[2117,2194]},{"content":"CRenderTarget::DrawEllipse","pos":[2200,2226]},{"content":"Draws the outline of the specified ellipse using the specified stroke style.","pos":[2257,2333]},{"content":"CRenderTarget::DrawGeometry","pos":[2339,2366]},{"content":"Draws the outline of the specified geometry using the specified stroke style.","pos":[2398,2475]},{"content":"CRenderTarget::DrawGlyphRun","pos":[2481,2508]},{"content":"Draws the specified glyphs.","pos":[2540,2567]},{"content":"CRenderTarget::DrawLine","pos":[2573,2596]},{"content":"Draws a line between the specified points using the specified stroke style.","pos":[2624,2699]},{"content":"CRenderTarget::DrawRectangle","pos":[2705,2733]},{"content":"Draws the outline of a rectangle that has the specified dimensions and stroke style.","pos":[2766,2850]},{"content":"CRenderTarget::DrawRoundedRectangle","pos":[2856,2891]},{"content":"Draws the outline of the specified rounded rectangle using the specified stroke style.","pos":[2931,3017]},{"content":"CRenderTarget::DrawText","pos":[3023,3046]},{"content":"Draws the specified text using the format information provided by an IDWriteTextFormat object.","pos":[3074,3168]},{"content":"CRenderTarget::DrawTextLayout","pos":[3174,3203]},{"content":"Draws the formatted text described by the specified IDWriteTextLayout object.","pos":[3237,3314]},{"content":"CRenderTarget::EndDraw","pos":[3320,3342]},{"content":"Ends drawing operations on the render target and indicates the current error state and associated tags.","pos":[3369,3472]},{"content":"CRenderTarget::FillEllipse","pos":[3478,3504]},{"content":"Paints the interior of the specified ellipse.","pos":[3535,3580]},{"content":"CRenderTarget::FillGeometry","pos":[3586,3613]},{"content":"Paints the interior of the specified geometry.","pos":[3645,3691]},{"content":"CRenderTarget::FillMesh","pos":[3697,3720]},{"content":"Paints the interior of the specified mesh.","pos":[3748,3790]},{"content":"CRenderTarget::FillOpacityMask","pos":[3796,3826]},{"content":"Applies the opacity mask described by the specified bitmap to a brush and uses that brush to paint a region of the render target.","pos":[3861,3990]},{"content":"CRenderTarget::FillRectangle","pos":[3996,4024]},{"content":"Paints the interior of the specified rectangle.","pos":[4057,4104]},{"content":"CRenderTarget::FillRoundedRectangle","pos":[4110,4145]},{"content":"Paints the interior of the specified rounded rectangle.","pos":[4185,4240]},{"content":"CRenderTarget::Flush","pos":[4246,4266]},{"content":"Executes all pending drawing commands.","pos":[4291,4329]},{"content":"CRenderTarget::GetAntialiasMode","pos":[4335,4366]},{"content":"Retrieves the current antialiasing mode for nontext drawing operations.","pos":[4402,4473]},{"content":"CRenderTarget::GetDpi","pos":[4479,4500]},{"content":"Returns the render target's dots per inch (DPI)","pos":[4526,4573]},{"content":"CRenderTarget::GetMaximumBitmapSize","pos":[4579,4614]},{"content":"Gets the maximum size, in device-dependent units (pixels), of any one bitmap dimension supported by the render target","pos":[4654,4771]},{"content":"CRenderTarget::GetPixelFormat","pos":[4777,4806]},{"content":"Retrieves the pixel format and alpha mode of the render target","pos":[4840,4902]},{"content":"CRenderTarget::GetPixelSize","pos":[4908,4935]},{"content":"Returns the size of the render target in device pixels","pos":[4967,5021]},{"content":"CRenderTarget::GetRenderTarget","pos":[5027,5057]},{"content":"Returns ID2D1RenderTarget interface","pos":[5092,5127]},{"content":"CRenderTarget::GetSize","pos":[5133,5155]},{"content":"Returns the size of the render target in device-independent pixels","pos":[5182,5248]},{"content":"CRenderTarget::GetTags","pos":[5254,5276]},{"content":"Gets the label for subsequent drawing operations.","pos":[5303,5352]},{"content":"CRenderTarget::GetTextAntialiasMode","pos":[5358,5393]},{"content":"Gets the current antialiasing mode for text and glyph drawing operations.","pos":[5433,5506]},{"content":"CRenderTarget::GetTextRenderingParams","pos":[5512,5549]},{"content":"Retrieves the render target's current text rendering options.","pos":[5591,5652]},{"content":"CRenderTarget::GetTransform","pos":[5658,5685]},{"content":"Applies the specified transform to the render target, replacing the existing transformation.","pos":[5717,5809]},{"content":"All subsequent drawing operations occur in the transformed space.","pos":[5810,5875]},{"content":"CRenderTarget::IsSupported","pos":[5881,5907]},{"content":"Indicates whether the render target supports the specified properties","pos":[5938,6007]},{"content":"CRenderTarget::IsValid","pos":[6013,6035]},{"content":"Checks resource validity","pos":[6062,6086]},{"content":"CRenderTarget::PopAxisAlignedClip","pos":[6092,6125]},{"content":"Removes the last axis-aligned clip from the render target.","pos":[6163,6221]},{"content":"After this method is called, the clip is no longer applied to subsequent drawing operations.","pos":[6222,6314]},{"content":"CRenderTarget::PopLayer","pos":[6320,6343]},{"content":"Stops redirecting drawing operations to the layer that is specified by the last PushLayer call.","pos":[6371,6466]},{"content":"CRenderTarget::PushAxisAlignedClip","pos":[6472,6506]},{"content":"Removes the last axis-aligned clip from the render target.","pos":[6545,6603]},{"content":"After this method is called, the clip is no longer applied to subsequent drawing operations.","pos":[6604,6696]},{"content":"CRenderTarget::PushLayer","pos":[6702,6726]},{"content":"Adds the specified layer to the render target so that it receives all subsequent drawing operations until PopLayer is called.","pos":[6755,6880]},{"content":"CRenderTarget::RestoreDrawingState","pos":[6886,6920]},{"content":"Sets the render target's drawing state to that of the specified ID2D1DrawingStateBlock.","pos":[6959,7046]},{"content":"CRenderTarget::SaveDrawingState","pos":[7052,7083]},{"content":"Saves the current drawing state to the specified ID2D1DrawingStateBlock.","pos":[7119,7191]},{"content":"CRenderTarget::SetAntialiasMode","pos":[7197,7228]},{"content":"Sets the antialiasing mode of the render target.","pos":[7264,7312]},{"content":"The antialiasing mode applies to all subsequent drawing operations, excluding text and glyph drawing operations.","pos":[7313,7425]},{"content":"CRenderTarget::SetDpi","pos":[7431,7452]},{"content":"Sets the dots per inch (DPI) of the render target.","pos":[7478,7528]},{"content":"CRenderTarget::SetTags","pos":[7534,7556]},{"content":"Specifies a label for subsequent drawing operations.","pos":[7583,7635]},{"content":"CRenderTarget::SetTextAntialiasMode","pos":[7641,7676]},{"content":"Specifies the antialiasing mode to use for subsequent text and glyph drawing operations.","pos":[7716,7804]},{"content":"CRenderTarget::SetTextRenderingParams","pos":[7810,7847]},{"content":"Specifies text rendering options to be applied to all subsequent text and glyph drawing operations.","pos":[7889,7988]},{"content":"CRenderTarget::SetTransform","pos":[7994,8021]},{"content":"Overloaded.","pos":[8053,8064]},{"content":"Applies the specified transform to the render target, replacing the existing transformation.","pos":[8065,8157]},{"content":"All subsequent drawing operations occur in the transformed space.","pos":[8158,8223]},{"content":"Protected Methods","pos":[8234,8251]},{"content":"Name","pos":[8258,8262]},{"content":"Description","pos":[8263,8274]},{"content":"CRenderTarget::VerifyResource","pos":[8313,8342]},{"content":"Verifies CD2DResource object validity; creates the object if it didn't already exist.","pos":[8376,8461]},{"content":"Public Operators","pos":[8472,8488]},{"content":"Name","pos":[8495,8499]},{"content":"Description","pos":[8500,8511]},{"content":"CRenderTarget::operator ID2D1RenderTarget*","pos":[8550,8592]},{"content":"Returns ID2D1RenderTarget interface","pos":[8643,8678]},{"content":"Protected Data Members","pos":[8689,8711]},{"content":"Name","pos":[8718,8722]},{"content":"Description","pos":[8723,8734]},{"content":"CRenderTarget::m_lstResources","pos":[8773,8802]},{"content":"A list of pointers to CD2DResource objects.","pos":[8836,8879]},{"content":"CRenderTarget::m_pRenderTarget","pos":[8885,8915]},{"content":"A pointer to an ID2D1RenderTarget object.","pos":[8950,8991]},{"content":"CRenderTarget::m_pTextFormatDefault","pos":[8997,9032]},{"content":"A pointer to CD2DTextFormat object that contains a default text format.","pos":[9072,9143]},{"content":"Inheritance Hierarchy","pos":[9153,9174]},{"content":"CObject","pos":[9179,9186]},{"content":"CRenderTarget","pos":[9233,9246]},{"content":"Requirements","pos":[9300,9312]},{"pos":[9316,9345],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxrendertarget.h","source":"**Header:** afxrendertarget.h"},{"pos":[9405,9434],"content":"CRenderTarget::~CRenderTarget"},{"content":"The destructor.","pos":[9438,9453]},{"content":"Called when a render target object is being destroyed.","pos":[9454,9508]},{"pos":[9597,9618],"content":"CRenderTarget::Attach"},{"content":"Attaches existing render target interface to the object","pos":[9622,9677]},{"content":"Parameters","pos":[9749,9759]},{"content":"Existing render target interface.","pos":[9782,9815]},{"content":"Cannot be NULL","pos":[9816,9830]},{"pos":[9881,9905],"content":"CRenderTarget::BeginDraw"},{"content":"Initiates drawing on this render target.","pos":[9909,9949]},{"pos":[10029,10049],"content":"CRenderTarget::Clear"},{"content":"Clears the drawing area to the specified color.","pos":[10053,10100]},{"content":"Parameters","pos":[10157,10167]},{"content":"The color to which the drawing area is cleared.","pos":[10182,10229]},{"pos":[10291,10326],"content":"CRenderTarget::COLORREF_TO_D2DCOLOR"},{"content":"Converts GDI color and alpha values to the D2D1_COLOR_F object.","pos":[10330,10393]},{"content":"Parameters","pos":[10505,10515]},{"content":"RGB value.","pos":[10530,10540]},{"content":"Return Value","pos":[10565,10577]},{"content":"D2D1_COLOR_F value.","pos":[10581,10600]},{"pos":[10670,10713],"content":"CRenderTarget::CreateCompatibleRenderTarget"},{"content":"Creates a new bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target .","pos":[10717,10849]},{"content":"Parameters","pos":[11205,11215]},{"content":"When this method returns, contains the address of a pointer to a new bitmap render target.","pos":[11237,11327]},{"content":"This parameter is passed uninitialized.","pos":[11328,11367]},{"content":"The desired size of the new render target in device-independent pixels if it should be different from the original render target, or NULL.","pos":[11391,11529]},{"content":"For more information, see the Remarks section.","pos":[11530,11576]},{"content":"The desired size of the new render target in pixels if it should be different from the original render target, or NULL.","pos":[11605,11724]},{"content":"For more information, see the Remarks section.","pos":[11725,11771]},{"content":"The desired pixel format and alpha mode of the new render target, or NULL.","pos":[11797,11871]},{"content":"If the pixel format is set to DXGI_FORMAT_UNKNOWN or if this parameter is null, the new render target uses the same pixel format as the original render target.","pos":[11872,12031]},{"content":"If the alpha mode is D2D1_ALPHA_MODE_UNKNOWN or this parameter is NULL, the alpha mode of the new render target defaults to D2D1_ALPHA_MODE_PREMULTIPLIED.","pos":[12032,12186]},{"content":"For information about supported pixel formats, see Supported Pixel Formats and Alpha Modes.","pos":[12187,12278]},{"content":"A value that specifies whether the new render target must be compatible with GDI.","pos":[12298,12379]},{"content":"Return Value","pos":[12389,12401]},{"content":"If the method succeeds, it returns TRUE.","pos":[12405,12445]},{"content":"Otherwise, it returns FALSE.","pos":[12446,12474]},{"pos":[12529,12557],"content":"CRenderTarget::CRenderTarget"},{"content":"Constructs a CRenderTarget object.","pos":[12561,12595]},{"pos":[12676,12698],"content":"CRenderTarget::Destroy"},{"content":"Deletes one or more resources","pos":[12702,12731]},{"content":"Parameters","pos":[12800,12810]},{"content":"If bDeleteResources is TRUE, all resources located in m_lstResources will be automatically destroyed.","pos":[12836,12937]},{"content":"Return Value","pos":[12947,12959]},{"content":"If the method succeeds, it returns TRUE.","pos":[12963,13003]},{"content":"Otherwise, it returns FALSE","pos":[13004,13031]},{"pos":[13079,13100],"content":"CRenderTarget::Detach"},{"content":"Detaches render target interface from the object","pos":[13104,13152]},{"content":"Return Value","pos":[13207,13219]},{"content":"Pointer to detached render target interface.","pos":[13223,13267]},{"pos":[13319,13344],"content":"CRenderTarget::DrawBitmap"},{"content":"Draws the formatted text described by the specified IDWriteTextLayout object.","pos":[13348,13425]},{"content":"Parameters","pos":[13690,13700]},{"content":"The bitmap to render.","pos":[13717,13738]},{"content":"The size and position, in device-independent pixels in the render target's coordinate space, of the area to which the bitmap is drawn.","pos":[13759,13893]},{"content":"If the rectangle is not well-ordered, nothing is drawn, but the render target does not enter an error state.","pos":[13894,14002]},{"content":"A value between 0.0f and 1.0f, inclusive, that specifies an opacity value to apply to the bitmap; this value is multiplied against the alpha values of the bitmap's contents.","pos":[14023,14196]},{"content":"The interpolation mode to use if the bitmap is scaled or rotated by the drawing operation.","pos":[14226,14316]},{"content":"The size and position, in device-independent pixels in the bitmap's coordinate space, of the area within the bitmap to draw.","pos":[14337,14461]},{"pos":[14514,14540],"content":"CRenderTarget::DrawEllipse"},{"content":"Draws the outline of the specified ellipse using the specified stroke style.","pos":[14544,14620]},{"content":"Parameters","pos":[14797,14807]},{"content":"The position and radius of the ellipse to draw, in device-independent pixels.","pos":[14824,14901]},{"content":"The brush used to paint the ellipse's outline.","pos":[14920,14966]},{"content":"The thickness of the ellipse's stroke.","pos":[14991,15029]},{"content":"The stroke is centered on the ellipse's outline.","pos":[15030,15078]},{"content":"The style of stroke to apply to the ellipse's outline, or NULL to paint a solid stroke.","pos":[15102,15189]},{"pos":[15243,15270],"content":"CRenderTarget::DrawGeometry"},{"content":"Draws the outline of the specified geometry using the specified stroke style.","pos":[15274,15351]},{"content":"Parameters","pos":[15526,15536]},{"content":"The geometry to draw.","pos":[15555,15576]},{"content":"The brush used to paint the geometry's stroke.","pos":[15595,15641]},{"content":"The thickness of the geometry's stroke.","pos":[15666,15705]},{"content":"The stroke is centered on the geometry's outline.","pos":[15706,15755]},{"content":"The style of stroke to apply to the geometry's outline, or NULL to paint a solid stroke.","pos":[15779,15867]},{"pos":[15921,15948],"content":"CRenderTarget::DrawGlyphRun"},{"content":"Draws the specified glyphs.","pos":[15952,15979]},{"content":"Parameters","pos":[16214,16224]},{"content":"The origin, in device-independent pixels, of the glyphs' baseline.","pos":[16250,16316]},{"content":"The glyphs to render.","pos":[16337,16358]},{"content":"The brush used to paint the specified glyphs.","pos":[16387,16432]},{"content":"A value that indicates how glyph metrics are used to measure text when it is formatted.","pos":[16458,16545]},{"content":"The default value is DWRITE_MEASURING_MODE_NATURAL.","pos":[16546,16597]},{"pos":[16647,16670],"content":"CRenderTarget::DrawLine"},{"content":"Draws a line between the specified points using the specified stroke style.","pos":[16674,16749]},{"content":"Parameters","pos":[16951,16961]},{"content":"The start point of the line, in device-independent pixels.","pos":[16977,17035]},{"content":"The end point of the line, in device-independent pixels.","pos":[17052,17108]},{"content":"The brush used to paint the line's stroke.","pos":[17127,17169]},{"content":"A value greater than or equal to 0.0f that specifies the width of the stroke.","pos":[17194,17271]},{"content":"If this parameter isn't specified, it defaults to 1.0f.","pos":[17272,17327]},{"content":"The stroke is centered on the line.","pos":[17328,17363]},{"content":"The style of stroke to paint, or NULL to paint a solid line.","pos":[17387,17447]},{"pos":[17502,17530],"content":"CRenderTarget::DrawRectangle"},{"content":"Draws the outline of a rectangle that has the specified dimensions and stroke style.","pos":[17534,17618]},{"content":"Parameters","pos":[17792,17802]},{"content":"The dimensions of the rectangle to draw, in device-independent pixels","pos":[17816,17885]},{"content":"The brush used to paint the rectangle's stroke","pos":[17904,17950]},{"content":"A value greater than or equal to 0.0f that specifies the width of the rectangle's stroke.","pos":[17975,18064]},{"content":"The stroke is centered on the rectangle's outline.","pos":[18065,18115]},{"content":"The style of stroke to paint, or NULL to paint a solid stroke.","pos":[18139,18201]},{"pos":[18263,18298],"content":"CRenderTarget::DrawRoundedRectangle"},{"content":"Draws the outline of the specified rounded rectangle using the specified stroke style.","pos":[18302,18388]},{"content":"Parameters","pos":[18582,18592]},{"content":"The dimensions of the rounded rectangle to draw, in device-independent pixels.","pos":[18613,18691]},{"content":"The brush used to paint the rounded rectangle's outline.","pos":[18710,18766]},{"content":"The width of the rounded rectangle's stroke.","pos":[18791,18835]},{"content":"The stroke is centered on the rounded rectangle's outline.","pos":[18836,18894]},{"content":"The default value is 1.0f.","pos":[18895,18921]},{"content":"The style of the rounded rectangle's stroke, or NULL to paint a solid stroke.","pos":[18945,19022]},{"content":"The default value is NULL.","pos":[19023,19049]},{"pos":[19099,19122],"content":"CRenderTarget::DrawText"},{"content":"Draws the specified text using the format information provided by an IDWriteTextFormat object.","pos":[19126,19220]},{"content":"Parameters","pos":[19537,19547]},{"content":"A pointer to an array of Unicode characters to draw.","pos":[19564,19616]},{"content":"The size and position of the area in which the text is drawn.","pos":[19633,19694]},{"content":"The brush used to paint the text.","pos":[19723,19756]},{"content":"An object that describes formatting details of the text to draw, such as the font, the font size, and flow direction.","pos":[19779,19896]},{"content":"A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle.","pos":[19916,20057]},{"content":"The default value is D2D1_DRAW_TEXT_OPTIONS_NONE, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle.","pos":[20058,20225]},{"content":"A value that indicates how glyph metrics are used to measure text when it is formatted.","pos":[20251,20338]},{"content":"The default value is DWRITE_MEASURING_MODE_NATURAL.","pos":[20339,20390]},{"pos":[20446,20475],"content":"CRenderTarget::DrawTextLayout"},{"content":"Draws the formatted text described by the specified IDWriteTextLayout object.","pos":[20479,20556]},{"content":"Parameters","pos":[20772,20782]},{"content":"The point, described in device-independent pixels, at which the upper-left corner of the text described by textLayout is drawn.","pos":[20800,20927]},{"content":"The formatted text to draw.","pos":[20950,20977]},{"content":"Any drawing effects that do not inherit from ID2D1Resource are ignored.","pos":[20978,21049]},{"content":"If there are drawing effects that inherit from ID2D1Resource that are not brushes, this method fails and the render target is put in an error state.","pos":[21050,21198]},{"content":"The brush used to paint any text in textLayout that does not already have a brush associated with it as a drawing effect (specified by the IDWriteTextLayout::SetDrawingEffect method).","pos":[21227,21410]},{"content":"A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle.","pos":[21430,21571]},{"content":"The default value is D2D1_DRAW_TEXT_OPTIONS_NONE, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle.","pos":[21572,21739]},{"pos":[21788,21810],"content":"CRenderTarget::EndDraw"},{"content":"Ends drawing operations on the render target and indicates the current error state and associated tags.","pos":[21814,21917]},{"content":"Return Value","pos":[21961,21973]},{"content":"If the method succeeds, it returns S_OK.","pos":[21977,22017]},{"content":"Otherwise, it returns an HRESULT error code.","pos":[22018,22062]},{"pos":[22115,22141],"content":"CRenderTarget::FillEllipse"},{"content":"Paints the interior of the specified ellipse.","pos":[22145,22190]},{"content":"Parameters","pos":[22291,22301]},{"content":"The position and radius, in device-independent pixels, of the ellipse to paint.","pos":[22318,22397]},{"content":"The brush used to paint the interior of the ellipse.","pos":[22416,22468]},{"pos":[22522,22549],"content":"CRenderTarget::FillGeometry"},{"content":"Paints the interior of the specified geometry.","pos":[22553,22599]},{"content":"Parameters","pos":[22737,22747]},{"content":"The geometry to paint.","pos":[22766,22788]},{"content":"The brush used to paint the geometry's interior.","pos":[22807,22855]},{"content":"The opacity mask to apply to the geometry;NULL for no opacity mask.","pos":[22881,22948]},{"content":"If an opacity mask (the opacityBrush parameter) is specified, brush must be an ID2D1BitmapBrush that has its x- and y-extend modes set to D2D1_EXTEND_MODE_CLAMP.","pos":[22949,23110]},{"content":"For more information, see the Remarks section.","pos":[23111,23157]},{"pos":[23207,23230],"content":"CRenderTarget::FillMesh"},{"content":"Paints the interior of the specified mesh.","pos":[23234,23276]},{"content":"Parameters","pos":[23363,23373]},{"content":"The mesh to paint.","pos":[23388,23406]},{"content":"The brush used to paint the mesh.","pos":[23425,23458]},{"pos":[23515,23545],"content":"CRenderTarget::FillOpacityMask"},{"content":"Applies the opacity mask described by the specified bitmap to a brush and uses that brush to paint a region of the render target.","pos":[23549,23678]},{"content":"Parameters","pos":[23887,23897]},{"content":"The position and radius, in device-independent pixels, of the ellipse to paint.","pos":[23919,23998]},{"content":"The brush used to paint the region of the render target specified by destinationRectangle.","pos":[24017,24107]},{"content":"The type of content the opacity mask contains.","pos":[24127,24173]},{"content":"The value is used to determine the color space in which the opacity mask is blended.","pos":[24174,24258]},{"content":"The region of the render target to paint, in device-independent pixels.","pos":[24279,24350]},{"content":"The region of the bitmap to use as the opacity mask, in device-independent pixels.","pos":[24370,24452]},{"pos":[24507,24535],"content":"CRenderTarget::FillRectangle"},{"content":"Paints the interior of the specified rectangle.","pos":[24539,24586]},{"content":"Parameters","pos":[24684,24694]},{"content":"The dimension of the rectangle to paint, in device-independent pixels.","pos":[24708,24778]},{"content":"The brush used to paint the rectangle's interior.","pos":[24797,24846]},{"pos":[24908,24943],"content":"CRenderTarget::FillRoundedRectangle"},{"content":"Paints the interior of the specified rounded rectangle.","pos":[24947,25002]},{"content":"Parameters","pos":[25120,25130]},{"content":"The dimensions of the rounded rectangle to paint, in device independent pixels.","pos":[25151,25230]},{"content":"The brush used to paint the interior of the rounded rectangle.","pos":[25249,25311]},{"pos":[25358,25378],"content":"CRenderTarget::Flush"},{"content":"Executes all pending drawing commands.","pos":[25382,25420]},{"content":"Parameters","pos":[25514,25524]},{"content":"Contains the tag for drawing operations that caused errors or 0 if there were no errors.","pos":[25538,25626]},{"content":"This parameter is passed uninitialized.","pos":[25627,25666]},{"content":"Contains the tag for drawing operations that caused errors or 0 if there were no errors.","pos":[25683,25771]},{"content":"This parameter is passed uninitialized.","pos":[25772,25811]},{"pos":[25869,25900],"content":"CRenderTarget::GetAntialiasMode"},{"content":"Retrieves the current antialiasing mode for nontext drawing operations.","pos":[25904,25975]},{"content":"Return Value","pos":[26049,26061]},{"content":"Current antialiasing mode for nontext drawing operations.","pos":[26065,26122]},{"pos":[26170,26191],"content":"CRenderTarget::GetDpi"},{"content":"Returns the render target's dots per inch (DPI)","pos":[26195,26242]},{"content":"Return Value","pos":[26296,26308]},{"content":"The render target's dots per inch (DPI).","pos":[26312,26352]},{"pos":[26414,26449],"content":"CRenderTarget::GetMaximumBitmapSize"},{"content":"Gets the maximum size, in device-dependent units (pixels), of any one bitmap dimension supported by the render target","pos":[26453,26570]},{"content":"Return Value","pos":[26635,26647]},{"content":"The maximum size, in pixels, of any one bitmap dimension supported by the render target","pos":[26651,26738]},{"pos":[26794,26823],"content":"CRenderTarget::GetPixelFormat"},{"content":"Retrieves the pixel format and alpha mode of the render target","pos":[26827,26889]},{"content":"Return Value","pos":[26959,26971]},{"content":"The pixel format and alpha mode of the render target","pos":[26975,27027]},{"pos":[27081,27108],"content":"CRenderTarget::GetPixelSize"},{"content":"Returns the size of the render target in device pixels","pos":[27112,27166]},{"content":"Return Value","pos":[27226,27238]},{"content":"The size of the render target in device pixels","pos":[27242,27288]},{"pos":[27345,27375],"content":"CRenderTarget::GetRenderTarget"},{"content":"Returns ID2D1RenderTarget interface","pos":[27379,27414]},{"content":"Return Value","pos":[27477,27489]},{"content":"Pointer to an ID2D1RenderTarget interface or NULL if object is not initialized yet.","pos":[27493,27576]},{"pos":[27625,27647],"content":"CRenderTarget::GetSize"},{"content":"Returns the size of the render target in device-independent pixels","pos":[27651,27717]},{"content":"Return Value","pos":[27772,27784]},{"content":"The current size of the render target in device-independent pixels","pos":[27788,27854]},{"pos":[27903,27925],"content":"CRenderTarget::GetTags"},{"content":"Gets the label for subsequent drawing operations.","pos":[27929,27978]},{"content":"Parameters","pos":[28083,28093]},{"content":"Contains the first label for subsequent drawing operations.","pos":[28107,28166]},{"content":"This parameter is passed uninitialized.","pos":[28167,28206]},{"content":"If NULL is specified, no value is retrieved for this parameter.","pos":[28207,28270]},{"content":"Contains the second label for subsequent drawing operations.","pos":[28287,28347]},{"content":"This parameter is passed uninitialized.","pos":[28348,28387]},{"content":"If NULL is specified, no value is retrieved for this parameter.","pos":[28388,28451]},{"pos":[28513,28548],"content":"CRenderTarget::GetTextAntialiasMode"},{"content":"Gets the current antialiasing mode for text and glyph drawing operations.","pos":[28552,28625]},{"content":"Return Value","pos":[28708,28720]},{"content":"Current antialiasing mode for text and glyph drawing operations.","pos":[28724,28788]},{"pos":[28852,28889],"content":"CRenderTarget::GetTextRenderingParams"},{"content":"Retrieves the render target's current text rendering options.","pos":[28893,28954]},{"content":"Parameters","pos":[29054,29064]},{"content":"When this method returns, textRenderingParamscontains the address of a pointer to the render target's current text rendering options.","pos":[29093,29226]},{"pos":[29280,29307],"content":"CRenderTarget::GetTransform"},{"content":"Applies the specified transform to the render target, replacing the existing transformation.","pos":[29311,29403]},{"content":"All subsequent drawing operations occur in the transformed space.","pos":[29404,29469]},{"content":"Parameters","pos":[29543,29553]},{"content":"The transform to apply to the render target.","pos":[29572,29616]},{"pos":[29669,29695],"content":"CRenderTarget::IsSupported"},{"content":"Indicates whether the render target supports the specified properties","pos":[29699,29768]},{"content":"Parameters","pos":[29881,29891]},{"content":"The render target properties to test","pos":[29923,29959]},{"content":"Return Value","pos":[29969,29981]},{"content":"TRUE if the specified render target properties are supported by this render target; otherwise, FALSE","pos":[29985,30085]},{"pos":[30134,30156],"content":"CRenderTarget::IsValid"},{"content":"Checks resource validity","pos":[30160,30184]},{"content":"Return Value","pos":[30234,30246]},{"content":"TRUE if resource is valid; otherwise FALSE.","pos":[30250,30293]},{"pos":[30349,30378],"content":"CRenderTarget::m_lstResources"},{"content":"A list of pointers to CD2DResource objects.","pos":[30382,30425]},{"pos":[30523,30553],"content":"CRenderTarget::m_pRenderTarget"},{"content":"A pointer to an ID2D1RenderTarget object.","pos":[30557,30598]},{"pos":[30713,30748],"content":"CRenderTarget::m_pTextFormatDefault"},{"content":"A pointer to CD2DTextFormat object that contains a default text format.","pos":[30752,30823]},{"pos":[30951,30993],"content":"CRenderTarget::operator ID2D1RenderTarget*"},{"content":"Returns ID2D1RenderTarget interface","pos":[30997,31032]},{"content":"Return Value","pos":[31089,31101]},{"content":"Pointer to an ID2D1RenderTarget interface or NULL if object is not initialized yet.","pos":[31105,31188]},{"pos":[31248,31281],"content":"CRenderTarget::PopAxisAlignedClip"},{"content":"Removes the last axis-aligned clip from the render target.","pos":[31285,31343]},{"content":"After this method is called, the clip is no longer applied to subsequent drawing operations.","pos":[31344,31436]},{"pos":[31528,31551],"content":"CRenderTarget::PopLayer"},{"content":"Stops redirecting drawing operations to the layer that is specified by the last PushLayer call.","pos":[31555,31650]},{"pos":[31743,31777],"content":"CRenderTarget::PushAxisAlignedClip"},{"content":"Removes the last axis-aligned clip from the render target.","pos":[31781,31839]},{"content":"After this method is called, the clip is no longer applied to subsequent drawing operations.","pos":[31840,31932]},{"content":"Parameters","pos":[32083,32093]},{"content":"The size and position of the clipping area, in device-independent pixels.","pos":[32111,32184]},{"content":"The antialiasing mode that is used to draw the edges of clip rects that have subpixel boundaries, and to blend the clip with the scene contents.","pos":[32201,32345]},{"content":"The blending is performed once when the PopAxisAlignedClip method is called, and does not apply to each primitive within the layer.","pos":[32346,32477]},{"pos":[32528,32552],"content":"CRenderTarget::PushLayer"},{"content":"Adds the specified layer to the render target so that it receives all subsequent drawing operations until PopLayer is called.","pos":[32556,32681]},{"content":"Parameters","pos":[32797,32807]},{"content":"The content bounds, geometric mask, opacity, opacity mask, and antialiasing options for the layer.","pos":[32832,32930]},{"content":"The layer that receives subsequent drawing operations.","pos":[32948,33002]},{"pos":[33063,33097],"content":"CRenderTarget::RestoreDrawingState"},{"content":"Sets the render target's drawing state to that of the specified ID2D1DrawingStateBlock.","pos":[33101,33188]},{"content":"Parameters","pos":[33282,33292]},{"content":"The new drawing state of the render target.","pos":[33319,33362]},{"pos":[33420,33451],"content":"CRenderTarget::SaveDrawingState"},{"content":"Saves the current drawing state to the specified ID2D1DrawingStateBlock.","pos":[33455,33527]},{"content":"Parameters","pos":[33627,33637]},{"content":"When this method returns, contains the current drawing state of the render target.","pos":[33664,33746]},{"content":"This parameter must be initialized before passing it to the method.","pos":[33747,33814]},{"pos":[33872,33903],"content":"CRenderTarget::SetAntialiasMode"},{"content":"Sets the antialiasing mode of the render target.","pos":[33907,33955]},{"content":"The antialiasing mode applies to all subsequent drawing operations, excluding text and glyph drawing operations.","pos":[33956,34068]},{"content":"Parameters","pos":[34151,34161]},{"content":"The antialiasing mode for future drawing operations.","pos":[34184,34236]},{"pos":[34284,34305],"content":"CRenderTarget::SetDpi"},{"content":"Sets the dots per inch (DPI) of the render target.","pos":[34309,34359]},{"content":"Parameters","pos":[34423,34433]},{"content":"A value greater than or equal to zero that specifies the horizontal/verticalDPI of the render target.","pos":[34450,34551]},{"pos":[34600,34622],"content":"CRenderTarget::SetTags"},{"content":"Specifies a label for subsequent drawing operations.","pos":[34626,34678]},{"content":"Parameters","pos":[34758,34768]},{"content":"A label to apply to subsequent drawing operations.","pos":[34782,34832]},{"content":"A label to apply to subsequent drawing operations.","pos":[34849,34899]},{"pos":[34961,34996],"content":"CRenderTarget::SetTextAntialiasMode"},{"content":"Specifies the antialiasing mode to use for subsequent text and glyph drawing operations.","pos":[35000,35088]},{"content":"Parameters","pos":[35184,35194]},{"content":"The antialiasing mode to use for subsequent text and glyph drawing operations.","pos":[35221,35299]},{"pos":[35363,35400],"content":"CRenderTarget::SetTextRenderingParams"},{"content":"Specifies text rendering options to be applied to all subsequent text and glyph drawing operations.","pos":[35404,35503]},{"content":"Parameters","pos":[35609,35619]},{"content":"The text rendering options to be applied to all subsequent text and glyph drawing operations; NULL to clear current text rendering options.","pos":[35648,35787]},{"pos":[35841,35868],"content":"CRenderTarget::SetTransform"},{"content":"Applies the specified transform to the render target, replacing the existing transformation.","pos":[35872,35964]},{"content":"All subsequent drawing operations occur in the transformed space.","pos":[35965,36030]},{"content":"Parameters","pos":[36168,36178]},{"content":"The transform to apply to the render target.","pos":[36197,36241]},{"pos":[36297,36326],"content":"CRenderTarget::VerifyResource"},{"content":"Verifies CD2DResource object validity; creates the object if it didn't already exist.","pos":[36330,36415]},{"content":"Parameters","pos":[36486,36496]},{"content":"Pointer to CD2DResource object.","pos":[36515,36546]},{"content":"Return Value","pos":[36556,36568]},{"content":"TRUE is object if valid; otherwise FALSE.","pos":[36572,36613]},{"content":"See Also","pos":[36622,36630]},{"content":"Classes","pos":[36635,36642]}],"content":"---\ntitle: \"CRenderTarget Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CRenderTarget\"\n  - \"afxrendertarget/CRenderTarget\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CRenderTarget class\"\nms.assetid: 30d1607d-68d3-4d14-ac36-fdbd0ef903a1\ncaps.latest.revision: 17\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CRenderTarget Class\nA wrapper for ID2D1RenderTarget.  \n  \n## Syntax  \n  \n```  \nclass CRenderTarget : public CObject;  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CRenderTarget::CRenderTarget](#crendertarget__crendertarget)|Constructs a CRenderTarget object.|  \n|[CRenderTarget::~CRenderTarget](#crendertarget__~crendertarget)|The destructor. Called when a render target object is being destroyed.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CRenderTarget::Attach](#crendertarget__attach)|Attaches existing render target interface to the object|  \n|[CRenderTarget::BeginDraw](#crendertarget__begindraw)|Initiates drawing on this render target.|  \n|[CRenderTarget::Clear](#crendertarget__clear)|Clears the drawing area to the specified color.|  \n|[CRenderTarget::COLORREF_TO_D2DCOLOR](#crendertarget__colorref_to_d2dcolor)|Converts GDI color and alpha values to the D2D1_COLOR_F object.|  \n|[CRenderTarget::CreateCompatibleRenderTarget](#crendertarget__createcompatiblerendertarget)|Creates a new bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target .|  \n|[CRenderTarget::Destroy](#crendertarget__destroy)|Deletes one or more resources|  \n|[CRenderTarget::Detach](#crendertarget__detach)|Detaches render target interface from the object|  \n|[CRenderTarget::DrawBitmap](#crendertarget__drawbitmap)|Draws the formatted text described by the specified IDWriteTextLayout object.|  \n|[CRenderTarget::DrawEllipse](#crendertarget__drawellipse)|Draws the outline of the specified ellipse using the specified stroke style.|  \n|[CRenderTarget::DrawGeometry](#crendertarget__drawgeometry)|Draws the outline of the specified geometry using the specified stroke style.|  \n|[CRenderTarget::DrawGlyphRun](#crendertarget__drawglyphrun)|Draws the specified glyphs.|  \n|[CRenderTarget::DrawLine](#crendertarget__drawline)|Draws a line between the specified points using the specified stroke style.|  \n|[CRenderTarget::DrawRectangle](#crendertarget__drawrectangle)|Draws the outline of a rectangle that has the specified dimensions and stroke style.|  \n|[CRenderTarget::DrawRoundedRectangle](#crendertarget__drawroundedrectangle)|Draws the outline of the specified rounded rectangle using the specified stroke style.|  \n|[CRenderTarget::DrawText](#crendertarget__drawtext)|Draws the specified text using the format information provided by an IDWriteTextFormat object.|  \n|[CRenderTarget::DrawTextLayout](#crendertarget__drawtextlayout)|Draws the formatted text described by the specified IDWriteTextLayout object.|  \n|[CRenderTarget::EndDraw](#crendertarget__enddraw)|Ends drawing operations on the render target and indicates the current error state and associated tags.|  \n|[CRenderTarget::FillEllipse](#crendertarget__fillellipse)|Paints the interior of the specified ellipse.|  \n|[CRenderTarget::FillGeometry](#crendertarget__fillgeometry)|Paints the interior of the specified geometry.|  \n|[CRenderTarget::FillMesh](#crendertarget__fillmesh)|Paints the interior of the specified mesh.|  \n|[CRenderTarget::FillOpacityMask](#crendertarget__fillopacitymask)|Applies the opacity mask described by the specified bitmap to a brush and uses that brush to paint a region of the render target.|  \n|[CRenderTarget::FillRectangle](#crendertarget__fillrectangle)|Paints the interior of the specified rectangle.|  \n|[CRenderTarget::FillRoundedRectangle](#crendertarget__fillroundedrectangle)|Paints the interior of the specified rounded rectangle.|  \n|[CRenderTarget::Flush](#crendertarget__flush)|Executes all pending drawing commands.|  \n|[CRenderTarget::GetAntialiasMode](#crendertarget__getantialiasmode)|Retrieves the current antialiasing mode for nontext drawing operations.|  \n|[CRenderTarget::GetDpi](#crendertarget__getdpi)|Returns the render target's dots per inch (DPI)|  \n|[CRenderTarget::GetMaximumBitmapSize](#crendertarget__getmaximumbitmapsize)|Gets the maximum size, in device-dependent units (pixels), of any one bitmap dimension supported by the render target|  \n|[CRenderTarget::GetPixelFormat](#crendertarget__getpixelformat)|Retrieves the pixel format and alpha mode of the render target|  \n|[CRenderTarget::GetPixelSize](#crendertarget__getpixelsize)|Returns the size of the render target in device pixels|  \n|[CRenderTarget::GetRenderTarget](#crendertarget__getrendertarget)|Returns ID2D1RenderTarget interface|  \n|[CRenderTarget::GetSize](#crendertarget__getsize)|Returns the size of the render target in device-independent pixels|  \n|[CRenderTarget::GetTags](#crendertarget__gettags)|Gets the label for subsequent drawing operations.|  \n|[CRenderTarget::GetTextAntialiasMode](#crendertarget__gettextantialiasmode)|Gets the current antialiasing mode for text and glyph drawing operations.|  \n|[CRenderTarget::GetTextRenderingParams](#crendertarget__gettextrenderingparams)|Retrieves the render target's current text rendering options.|  \n|[CRenderTarget::GetTransform](#crendertarget__gettransform)|Applies the specified transform to the render target, replacing the existing transformation. All subsequent drawing operations occur in the transformed space.|  \n|[CRenderTarget::IsSupported](#crendertarget__issupported)|Indicates whether the render target supports the specified properties|  \n|[CRenderTarget::IsValid](#crendertarget__isvalid)|Checks resource validity|  \n|[CRenderTarget::PopAxisAlignedClip](#crendertarget__popaxisalignedclip)|Removes the last axis-aligned clip from the render target. After this method is called, the clip is no longer applied to subsequent drawing operations.|  \n|[CRenderTarget::PopLayer](#crendertarget__poplayer)|Stops redirecting drawing operations to the layer that is specified by the last PushLayer call.|  \n|[CRenderTarget::PushAxisAlignedClip](#crendertarget__pushaxisalignedclip)|Removes the last axis-aligned clip from the render target. After this method is called, the clip is no longer applied to subsequent drawing operations.|  \n|[CRenderTarget::PushLayer](#crendertarget__pushlayer)|Adds the specified layer to the render target so that it receives all subsequent drawing operations until PopLayer is called.|  \n|[CRenderTarget::RestoreDrawingState](#crendertarget__restoredrawingstate)|Sets the render target's drawing state to that of the specified ID2D1DrawingStateBlock.|  \n|[CRenderTarget::SaveDrawingState](#crendertarget__savedrawingstate)|Saves the current drawing state to the specified ID2D1DrawingStateBlock.|  \n|[CRenderTarget::SetAntialiasMode](#crendertarget__setantialiasmode)|Sets the antialiasing mode of the render target. The antialiasing mode applies to all subsequent drawing operations, excluding text and glyph drawing operations.|  \n|[CRenderTarget::SetDpi](#crendertarget__setdpi)|Sets the dots per inch (DPI) of the render target.|  \n|[CRenderTarget::SetTags](#crendertarget__settags)|Specifies a label for subsequent drawing operations.|  \n|[CRenderTarget::SetTextAntialiasMode](#crendertarget__settextantialiasmode)|Specifies the antialiasing mode to use for subsequent text and glyph drawing operations.|  \n|[CRenderTarget::SetTextRenderingParams](#crendertarget__settextrenderingparams)|Specifies text rendering options to be applied to all subsequent text and glyph drawing operations.|  \n|[CRenderTarget::SetTransform](#crendertarget__settransform)|Overloaded. Applies the specified transform to the render target, replacing the existing transformation. All subsequent drawing operations occur in the transformed space.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CRenderTarget::VerifyResource](#crendertarget__verifyresource)|Verifies CD2DResource object validity; creates the object if it didn't already exist.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CRenderTarget::operator ID2D1RenderTarget*](#crendertarget__operator_id2d1rendertarget_star)|Returns ID2D1RenderTarget interface|  \n  \n### Protected Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CRenderTarget::m_lstResources](#crendertarget__m_lstresources)|A list of pointers to CD2DResource objects.|  \n|[CRenderTarget::m_pRenderTarget](#crendertarget__m_prendertarget)|A pointer to an ID2D1RenderTarget object.|  \n|[CRenderTarget::m_pTextFormatDefault](#crendertarget__m_ptextformatdefault)|A pointer to CD2DTextFormat object that contains a default text format.|  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CRenderTarget](../../mfc/reference/crendertarget-class.md)  \n  \n## Requirements  \n **Header:** afxrendertarget.h  \n  \n##  <a name=\"crendertarget___dtorcrendertarget\"></a>  CRenderTarget::~CRenderTarget  \n The destructor. Called when a render target object is being destroyed.  \n  \n```  \nvirtual ~CRenderTarget();\n```  \n  \n##  <a name=\"crendertarget__attach\"></a>  CRenderTarget::Attach  \n Attaches existing render target interface to the object  \n  \n```  \nvoid Attach(ID2D1RenderTarget* pRenderTarget);\n```  \n  \n### Parameters  \n `pRenderTarget`  \n Existing render target interface. Cannot be NULL  \n  \n##  <a name=\"crendertarget__begindraw\"></a>  CRenderTarget::BeginDraw  \n Initiates drawing on this render target.  \n  \n```  \nvoid BeginDraw();\n```  \n  \n##  <a name=\"crendertarget__clear\"></a>  CRenderTarget::Clear  \n Clears the drawing area to the specified color.  \n  \n```  \nvoid Clear(D2D1_COLOR_F color);\n```  \n  \n### Parameters  \n `color`  \n The color to which the drawing area is cleared.  \n  \n##  <a name=\"crendertarget__colorref_to_d2dcolor\"></a>  CRenderTarget::COLORREF_TO_D2DCOLOR  \n Converts GDI color and alpha values to the D2D1_COLOR_F object.  \n  \n```  \nstatic D2D1_COLOR_F COLORREF_TO_D2DCOLOR(\n    COLORREF color,  \n    int nAlpha = 255);\n```  \n  \n### Parameters  \n `color`  \n RGB value.  \n  \n `nAlpha`  \n  \n### Return Value  \n D2D1_COLOR_F value.  \n  \n##  <a name=\"crendertarget__createcompatiblerendertarget\"></a>  CRenderTarget::CreateCompatibleRenderTarget  \n Creates a new bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target .  \n  \n```  \nBOOL CreateCompatibleRenderTarget(\n    CBitmapRenderTarget& bitmapTarget,  \n    CD2DSizeF sizeDesired = CD2DSizeF(0.,  \n    0.), \n    CD2DSizeU sizePixelDesired = CD2DSizeU(0,  \n    0), \n    D2D1_PIXEL_FORMAT* desiredFormat = NULL,  \n    D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options = D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_NONE);\n```  \n  \n### Parameters  \n `bitmapTarget`  \n When this method returns, contains the address of a pointer to a new bitmap render target. This parameter is passed uninitialized.  \n  \n `sizeDesired`  \n The desired size of the new render target in device-independent pixels if it should be different from the original render target, or NULL. For more information, see the Remarks section.  \n  \n `sizePixelDesired`  \n The desired size of the new render target in pixels if it should be different from the original render target, or NULL. For more information, see the Remarks section.  \n  \n `desiredFormat`  \n The desired pixel format and alpha mode of the new render target, or NULL. If the pixel format is set to DXGI_FORMAT_UNKNOWN or if this parameter is null, the new render target uses the same pixel format as the original render target. If the alpha mode is D2D1_ALPHA_MODE_UNKNOWN or this parameter is NULL, the alpha mode of the new render target defaults to D2D1_ALPHA_MODE_PREMULTIPLIED. For information about supported pixel formats, see Supported Pixel Formats and Alpha Modes.  \n  \n `options`  \n A value that specifies whether the new render target must be compatible with GDI.  \n  \n### Return Value  \n If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.  \n  \n##  <a name=\"crendertarget__crendertarget\"></a>  CRenderTarget::CRenderTarget  \n Constructs a CRenderTarget object.  \n  \n```  \nCRenderTarget();\n```  \n  \n##  <a name=\"crendertarget__destroy\"></a>  CRenderTarget::Destroy  \n Deletes one or more resources  \n  \n```  \nBOOL Destroy(BOOL bDeleteResources = TRUE);\n```  \n  \n### Parameters  \n `bDeleteResources`  \n If bDeleteResources is TRUE, all resources located in m_lstResources will be automatically destroyed.  \n  \n### Return Value  \n If the method succeeds, it returns TRUE. Otherwise, it returns FALSE  \n  \n##  <a name=\"crendertarget__detach\"></a>  CRenderTarget::Detach  \n Detaches render target interface from the object  \n  \n```  \nID2D1RenderTarget* Detach ();\n```  \n  \n### Return Value  \n Pointer to detached render target interface.  \n  \n##  <a name=\"crendertarget__drawbitmap\"></a>  CRenderTarget::DrawBitmap  \n Draws the formatted text described by the specified IDWriteTextLayout object.  \n  \n```  \nvoid DrawBitmap(\n    CD2DBitmap* pBitmap,  \n    const CD2DRectF& rectDest,  \n    float fOpacity = 1.0,  \n    D2D1_BITMAP_INTERPOLATION_MODE interpolationMode = D2D1_BITMAP_INTERPOLATION_MODE_LINEAR,  \n    const CD2DRectF* pRectSrc = NULL);\n```  \n  \n### Parameters  \n `pBitmap`  \n The bitmap to render.  \n  \n `rectDest`  \n The size and position, in device-independent pixels in the render target's coordinate space, of the area to which the bitmap is drawn. If the rectangle is not well-ordered, nothing is drawn, but the render target does not enter an error state.  \n  \n `fOpacity`  \n A value between 0.0f and 1.0f, inclusive, that specifies an opacity value to apply to the bitmap; this value is multiplied against the alpha values of the bitmap's contents.  \n  \n `interpolationMode`  \n The interpolation mode to use if the bitmap is scaled or rotated by the drawing operation.  \n  \n `pRectSrc`  \n The size and position, in device-independent pixels in the bitmap's coordinate space, of the area within the bitmap to draw.  \n  \n##  <a name=\"crendertarget__drawellipse\"></a>  CRenderTarget::DrawEllipse  \n Draws the outline of the specified ellipse using the specified stroke style.  \n  \n```  \nvoid DrawEllipse(\n    const CD2DEllipse& ellipse,  \n    CD2DBrush* pBrush,  \n    FLOAT fStrokeWidth = 1.0,  \n    ID2D1StrokeStyle* strokeStyle = NULL);\n```  \n  \n### Parameters  \n `ellipse`  \n The position and radius of the ellipse to draw, in device-independent pixels.  \n  \n `pBrush`  \n The brush used to paint the ellipse's outline.  \n  \n `fStrokeWidth`  \n The thickness of the ellipse's stroke. The stroke is centered on the ellipse's outline.  \n  \n `strokeStyle`  \n The style of stroke to apply to the ellipse's outline, or NULL to paint a solid stroke.  \n  \n##  <a name=\"crendertarget__drawgeometry\"></a>  CRenderTarget::DrawGeometry  \n Draws the outline of the specified geometry using the specified stroke style.  \n  \n```  \nvoid DrawGeometry(\n    CD2DGeometry* pGeometry,  \n    CD2DBrush* pBrush,  \n    FLOAT fStrokeWidth = 1.0,  \n    ID2D1StrokeStyle* strokeStyle = NULL);\n```  \n  \n### Parameters  \n `pGeometry`  \n The geometry to draw.  \n  \n `pBrush`  \n The brush used to paint the geometry's stroke.  \n  \n `fStrokeWidth`  \n The thickness of the geometry's stroke. The stroke is centered on the geometry's outline.  \n  \n `strokeStyle`  \n The style of stroke to apply to the geometry's outline, or NULL to paint a solid stroke.  \n  \n##  <a name=\"crendertarget__drawglyphrun\"></a>  CRenderTarget::DrawGlyphRun  \n Draws the specified glyphs.  \n  \n```  \nvoid DrawGlyphRun(\n    const CD2DPointF& ptBaseLineOrigin,  \n    const DWRITE_GLYPH_RUN& glyphRun,  \n    CD2DBrush* pForegroundBrush,  \n    DWRITE_MEASURING_MODE measuringMode = DWRITE_MEASURING_MODE_NATURAL);\n```  \n  \n### Parameters  \n `ptBaseLineOrigin`  \n The origin, in device-independent pixels, of the glyphs' baseline.  \n  \n `glyphRun`  \n The glyphs to render.  \n  \n `pForegroundBrush`  \n The brush used to paint the specified glyphs.  \n  \n `measuringMode`  \n A value that indicates how glyph metrics are used to measure text when it is formatted. The default value is DWRITE_MEASURING_MODE_NATURAL.  \n  \n##  <a name=\"crendertarget__drawline\"></a>  CRenderTarget::DrawLine  \n Draws a line between the specified points using the specified stroke style.  \n  \n```  \nvoid DrawLine(\n    const CD2DPointF& ptFrom,  \n    const CD2DPointF& ptTo,  \n    CD2DBrush* pBrush,  \n    FLOAT fStrokeWidth = 1.0,  \n    ID2D1StrokeStyle* strokeStyle = NULL);\n```  \n  \n### Parameters  \n `ptFrom`  \n The start point of the line, in device-independent pixels.  \n  \n `ptTo`  \n The end point of the line, in device-independent pixels.  \n  \n `pBrush`  \n The brush used to paint the line's stroke.  \n  \n `fStrokeWidth`  \n A value greater than or equal to 0.0f that specifies the width of the stroke. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line.  \n  \n `strokeStyle`  \n The style of stroke to paint, or NULL to paint a solid line.  \n  \n##  <a name=\"crendertarget__drawrectangle\"></a>  CRenderTarget::DrawRectangle  \n Draws the outline of a rectangle that has the specified dimensions and stroke style.  \n  \n```  \nvoid DrawRectangle(\n    const CD2DRectF& rect,  \n    CD2DBrush* pBrush,  \n    FLOAT fStrokeWidth = 1.0,  \n    ID2D1StrokeStyle* strokeStyle = NULL);\n```  \n  \n### Parameters  \n `rect`  \n The dimensions of the rectangle to draw, in device-independent pixels  \n  \n `pBrush`  \n The brush used to paint the rectangle's stroke  \n  \n `fStrokeWidth`  \n A value greater than or equal to 0.0f that specifies the width of the rectangle's stroke. The stroke is centered on the rectangle's outline.  \n  \n `strokeStyle`  \n The style of stroke to paint, or NULL to paint a solid stroke.  \n  \n##  <a name=\"crendertarget__drawroundedrectangle\"></a>  CRenderTarget::DrawRoundedRectangle  \n Draws the outline of the specified rounded rectangle using the specified stroke style.  \n  \n```  \nvoid DrawRoundedRectangle(\n    const CD2DRoundedRect& rectRounded,  \n    CD2DBrush* pBrush,  \n    FLOAT fStrokeWidth = 1.0,  \n    ID2D1StrokeStyle* strokeStyle = NULL);\n```  \n  \n### Parameters  \n `rectRounded`  \n The dimensions of the rounded rectangle to draw, in device-independent pixels.  \n  \n `pBrush`  \n The brush used to paint the rounded rectangle's outline.  \n  \n `fStrokeWidth`  \n The width of the rounded rectangle's stroke. The stroke is centered on the rounded rectangle's outline. The default value is 1.0f.  \n  \n `strokeStyle`  \n The style of the rounded rectangle's stroke, or NULL to paint a solid stroke. The default value is NULL.  \n  \n##  <a name=\"crendertarget__drawtext\"></a>  CRenderTarget::DrawText  \n Draws the specified text using the format information provided by an IDWriteTextFormat object.  \n  \n```  \nvoid DrawText(\n    const CString& strText,  \n    const CD2DRectF& rect,  \n    CD2DBrush* pForegroundBrush,  \n    CD2DTextFormat* textFormat = NULL,  \n    D2D1_DRAW_TEXT_OPTIONS options = D2D1_DRAW_TEXT_OPTIONS_NONE,  \n    DWRITE_MEASURING_MODE measuringMode = DWRITE_MEASURING_MODE_NATURAL);\n```  \n  \n### Parameters  \n `strText`  \n A pointer to an array of Unicode characters to draw.  \n  \n `rect`  \n The size and position of the area in which the text is drawn.  \n  \n `pForegroundBrush`  \n The brush used to paint the text.  \n  \n `textFormat`  \n An object that describes formatting details of the text to draw, such as the font, the font size, and flow direction.  \n  \n `options`  \n A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. The default value is D2D1_DRAW_TEXT_OPTIONS_NONE, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle.  \n  \n `measuringMode`  \n A value that indicates how glyph metrics are used to measure text when it is formatted. The default value is DWRITE_MEASURING_MODE_NATURAL.  \n  \n##  <a name=\"crendertarget__drawtextlayout\"></a>  CRenderTarget::DrawTextLayout  \n Draws the formatted text described by the specified IDWriteTextLayout object.  \n  \n```  \nvoid DrawTextLayout(\n    const CD2DPointF& ptOrigin,  \n    CD2DTextLayout* textLayout,  \n    CD2DBrush* pBrushForeground,  \n    D2D1_DRAW_TEXT_OPTIONS options = D2D1_DRAW_TEXT_OPTIONS_NONE);\n```  \n  \n### Parameters  \n `ptOrigin`  \n The point, described in device-independent pixels, at which the upper-left corner of the text described by textLayout is drawn.  \n  \n `textLayout`  \n The formatted text to draw. Any drawing effects that do not inherit from ID2D1Resource are ignored. If there are drawing effects that inherit from ID2D1Resource that are not brushes, this method fails and the render target is put in an error state.  \n  \n `pBrushForeground`  \n The brush used to paint any text in textLayout that does not already have a brush associated with it as a drawing effect (specified by the IDWriteTextLayout::SetDrawingEffect method).  \n  \n `options`  \n A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. The default value is D2D1_DRAW_TEXT_OPTIONS_NONE, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle.  \n  \n##  <a name=\"crendertarget__enddraw\"></a>  CRenderTarget::EndDraw  \n Ends drawing operations on the render target and indicates the current error state and associated tags.  \n  \n```  \nHRESULT EndDraw();\n```  \n  \n### Return Value  \n If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.  \n  \n##  <a name=\"crendertarget__fillellipse\"></a>  CRenderTarget::FillEllipse  \n Paints the interior of the specified ellipse.  \n  \n```  \nvoid FillEllipse(\n    const CD2DEllipse& ellipse,  \n    CD2DBrush* pBrush);\n```  \n  \n### Parameters  \n `ellipse`  \n The position and radius, in device-independent pixels, of the ellipse to paint.  \n  \n `pBrush`  \n The brush used to paint the interior of the ellipse.  \n  \n##  <a name=\"crendertarget__fillgeometry\"></a>  CRenderTarget::FillGeometry  \n Paints the interior of the specified geometry.  \n  \n```  \nvoid FillGeometry(\n    CD2DGeometry* pGeometry,  \n    CD2DBrush* pBrush,  \n    CD2DBrush* pOpacityBrush = NULL);\n```  \n  \n### Parameters  \n `pGeometry`  \n The geometry to paint.  \n  \n `pBrush`  \n The brush used to paint the geometry's interior.  \n  \n `pOpacityBrush`  \n The opacity mask to apply to the geometry;NULL for no opacity mask. If an opacity mask (the opacityBrush parameter) is specified, brush must be an ID2D1BitmapBrush that has its x- and y-extend modes set to D2D1_EXTEND_MODE_CLAMP. For more information, see the Remarks section.  \n  \n##  <a name=\"crendertarget__fillmesh\"></a>  CRenderTarget::FillMesh  \n Paints the interior of the specified mesh.  \n  \n```  \nvoid FillMesh(\n    CD2DMesh* pMesh,  \n    CD2DBrush* pBrush);\n```  \n  \n### Parameters  \n `pMesh`  \n The mesh to paint.  \n  \n `pBrush`  \n The brush used to paint the mesh.  \n  \n##  <a name=\"crendertarget__fillopacitymask\"></a>  CRenderTarget::FillOpacityMask  \n Applies the opacity mask described by the specified bitmap to a brush and uses that brush to paint a region of the render target.  \n  \n```  \nvoid FillOpacityMask(\n    CD2DBitmap* pOpacityMask,  \n    CD2DBrush* pBrush,  \n    D2D1_OPACITY_MASK_CONTENT content,  \n    const CD2DRectF& rectDest,  \n    const CD2DRectF& rectSrc);\n```  \n  \n### Parameters  \n `pOpacityMask`  \n The position and radius, in device-independent pixels, of the ellipse to paint.  \n  \n `pBrush`  \n The brush used to paint the region of the render target specified by destinationRectangle.  \n  \n `content`  \n The type of content the opacity mask contains. The value is used to determine the color space in which the opacity mask is blended.  \n  \n `rectDest`  \n The region of the render target to paint, in device-independent pixels.  \n  \n `rectSrc`  \n The region of the bitmap to use as the opacity mask, in device-independent pixels.  \n  \n##  <a name=\"crendertarget__fillrectangle\"></a>  CRenderTarget::FillRectangle  \n Paints the interior of the specified rectangle.  \n  \n```  \nvoid FillRectangle(\n    const CD2DRectF& rect,  \n    CD2DBrush* pBrush);\n```  \n  \n### Parameters  \n `rect`  \n The dimension of the rectangle to paint, in device-independent pixels.  \n  \n `pBrush`  \n The brush used to paint the rectangle's interior.  \n  \n##  <a name=\"crendertarget__fillroundedrectangle\"></a>  CRenderTarget::FillRoundedRectangle  \n Paints the interior of the specified rounded rectangle.  \n  \n```  \nvoid FillRoundedRectangle(\n    const CD2DRoundedRect& rectRounded,  \n    CD2DBrush* pBrush);\n```  \n  \n### Parameters  \n `rectRounded`  \n The dimensions of the rounded rectangle to paint, in device independent pixels.  \n  \n `pBrush`  \n The brush used to paint the interior of the rounded rectangle.  \n  \n##  <a name=\"crendertarget__flush\"></a>  CRenderTarget::Flush  \n Executes all pending drawing commands.  \n  \n```  \nvoid Flush(\n    D2D1_TAG* tag1 = NULL,  \n    D2D1_TAG* tag2 = NULL);\n```  \n  \n### Parameters  \n `tag1`  \n Contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized.  \n  \n `tag2`  \n Contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized.  \n  \n##  <a name=\"crendertarget__getantialiasmode\"></a>  CRenderTarget::GetAntialiasMode  \n Retrieves the current antialiasing mode for nontext drawing operations.  \n  \n```  \nD2D1_ANTIALIAS_MODE GetAntialiasMode() const;\n\n \n```  \n  \n### Return Value  \n Current antialiasing mode for nontext drawing operations.  \n  \n##  <a name=\"crendertarget__getdpi\"></a>  CRenderTarget::GetDpi  \n Returns the render target's dots per inch (DPI)  \n  \n```  \nCD2DSizeF GetDpi() const;\n\n \n```  \n  \n### Return Value  \n The render target's dots per inch (DPI).  \n  \n##  <a name=\"crendertarget__getmaximumbitmapsize\"></a>  CRenderTarget::GetMaximumBitmapSize  \n Gets the maximum size, in device-dependent units (pixels), of any one bitmap dimension supported by the render target  \n  \n```  \nUINT32 GetMaximumBitmapSize() const;\n\n \n```  \n  \n### Return Value  \n The maximum size, in pixels, of any one bitmap dimension supported by the render target  \n  \n##  <a name=\"crendertarget__getpixelformat\"></a>  CRenderTarget::GetPixelFormat  \n Retrieves the pixel format and alpha mode of the render target  \n  \n```  \nD2D1_PIXEL_FORMAT GetPixelFormat() const;\n\n \n```  \n  \n### Return Value  \n The pixel format and alpha mode of the render target  \n  \n##  <a name=\"crendertarget__getpixelsize\"></a>  CRenderTarget::GetPixelSize  \n Returns the size of the render target in device pixels  \n  \n```  \nCD2DSizeU GetPixelSize() const;\n\n \n```  \n  \n### Return Value  \n The size of the render target in device pixels  \n  \n##  <a name=\"crendertarget__getrendertarget\"></a>  CRenderTarget::GetRenderTarget  \n Returns ID2D1RenderTarget interface  \n  \n```  \nID2D1RenderTarget* GetRenderTarget();\n```  \n  \n### Return Value  \n Pointer to an ID2D1RenderTarget interface or NULL if object is not initialized yet.  \n  \n##  <a name=\"crendertarget__getsize\"></a>  CRenderTarget::GetSize  \n Returns the size of the render target in device-independent pixels  \n  \n```  \nCD2DSizeF GetSize() const;\n\n \n```  \n  \n### Return Value  \n The current size of the render target in device-independent pixels  \n  \n##  <a name=\"crendertarget__gettags\"></a>  CRenderTarget::GetTags  \n Gets the label for subsequent drawing operations.  \n  \n```  \nvoid GetTags(\n    D2D1_TAG* tag1 = NULL,  \n    D2D1_TAG* tag2 = NULL) const;\n\n \n```  \n  \n### Parameters  \n `tag1`  \n Contains the first label for subsequent drawing operations. This parameter is passed uninitialized. If NULL is specified, no value is retrieved for this parameter.  \n  \n `tag2`  \n Contains the second label for subsequent drawing operations. This parameter is passed uninitialized. If NULL is specified, no value is retrieved for this parameter.  \n  \n##  <a name=\"crendertarget__gettextantialiasmode\"></a>  CRenderTarget::GetTextAntialiasMode  \n Gets the current antialiasing mode for text and glyph drawing operations.  \n  \n```  \nD2D1_TEXT_ANTIALIAS_MODE GetTextAntialiasMode() const;\n\n \n```  \n  \n### Return Value  \n Current antialiasing mode for text and glyph drawing operations.  \n  \n##  <a name=\"crendertarget__gettextrenderingparams\"></a>  CRenderTarget::GetTextRenderingParams  \n Retrieves the render target's current text rendering options.  \n  \n```  \nvoid GetTextRenderingParams(IDWriteRenderingParams** textRenderingParams);\n```  \n  \n### Parameters  \n `textRenderingParams`  \n When this method returns, textRenderingParamscontains the address of a pointer to the render target's current text rendering options.  \n  \n##  <a name=\"crendertarget__gettransform\"></a>  CRenderTarget::GetTransform  \n Applies the specified transform to the render target, replacing the existing transformation. All subsequent drawing operations occur in the transformed space.  \n  \n```  \nvoid GetTransform(D2D1_MATRIX_3X2_F* transform);\n```  \n  \n### Parameters  \n `transform`  \n The transform to apply to the render target.  \n  \n##  <a name=\"crendertarget__issupported\"></a>  CRenderTarget::IsSupported  \n Indicates whether the render target supports the specified properties  \n  \n```  \nBOOL IsSupported(const D2D1_RENDER_TARGET_PROPERTIES& renderTargetProperties) const;\n\n \n```  \n  \n### Parameters  \n `renderTargetProperties`  \n The render target properties to test  \n  \n### Return Value  \n TRUE if the specified render target properties are supported by this render target; otherwise, FALSE  \n  \n##  <a name=\"crendertarget__isvalid\"></a>  CRenderTarget::IsValid  \n Checks resource validity  \n  \n```  \nBOOL IsValid() const;\n\n \n```  \n  \n### Return Value  \n TRUE if resource is valid; otherwise FALSE.  \n  \n##  <a name=\"crendertarget__m_lstresources\"></a>  CRenderTarget::m_lstResources  \n A list of pointers to CD2DResource objects.  \n  \n```  \nCObList m_lstResources;  \n```  \n  \n##  <a name=\"crendertarget__m_prendertarget\"></a>  CRenderTarget::m_pRenderTarget  \n A pointer to an ID2D1RenderTarget object.  \n  \n```  \nID2D1RenderTarget* m_pRenderTarget;  \n```  \n  \n##  <a name=\"crendertarget__m_ptextformatdefault\"></a>  CRenderTarget::m_pTextFormatDefault  \n A pointer to CD2DTextFormat object that contains a default text format.  \n  \n```  \nCD2DTextFormat* m_pTextFormatDefault;  \n```  \n  \n##  <a name=\"crendertarget__operator_id2d1rendertarget_star\"></a>  CRenderTarget::operator ID2D1RenderTarget*  \n Returns ID2D1RenderTarget interface  \n  \n```  \noperator ID2D1RenderTarget*();\n```   \n  \n### Return Value  \n Pointer to an ID2D1RenderTarget interface or NULL if object is not initialized yet.  \n  \n##  <a name=\"crendertarget__popaxisalignedclip\"></a>  CRenderTarget::PopAxisAlignedClip  \n Removes the last axis-aligned clip from the render target. After this method is called, the clip is no longer applied to subsequent drawing operations.  \n  \n```  \nvoid PopAxisAlignedClip();\n```  \n  \n##  <a name=\"crendertarget__poplayer\"></a>  CRenderTarget::PopLayer  \n Stops redirecting drawing operations to the layer that is specified by the last PushLayer call.  \n  \n```  \nvoid PopLayer();\n```  \n  \n##  <a name=\"crendertarget__pushaxisalignedclip\"></a>  CRenderTarget::PushAxisAlignedClip  \n Removes the last axis-aligned clip from the render target. After this method is called, the clip is no longer applied to subsequent drawing operations.  \n  \n```  \nvoid PushAxisAlignedClip(\n    const CD2DRectF& rectClip,  \n    D2D1_ANTIALIAS_MODE mode = D2D1_ANTIALIAS_MODE_PER_PRIMITIVE);\n```  \n  \n### Parameters  \n `rectClip`  \n The size and position of the clipping area, in device-independent pixels.  \n  \n `mode`  \n The antialiasing mode that is used to draw the edges of clip rects that have subpixel boundaries, and to blend the clip with the scene contents. The blending is performed once when the PopAxisAlignedClip method is called, and does not apply to each primitive within the layer.  \n  \n##  <a name=\"crendertarget__pushlayer\"></a>  CRenderTarget::PushLayer  \n Adds the specified layer to the render target so that it receives all subsequent drawing operations until PopLayer is called.  \n  \n```  \nvoid PushLayer(\n    const D2D1_LAYER_PARAMETERS& layerParameters,  \n    CD2DLayer& layer);\n```  \n  \n### Parameters  \n `layerParameters`  \n The content bounds, geometric mask, opacity, opacity mask, and antialiasing options for the layer.  \n  \n `layer`  \n The layer that receives subsequent drawing operations.  \n  \n##  <a name=\"crendertarget__restoredrawingstate\"></a>  CRenderTarget::RestoreDrawingState  \n Sets the render target's drawing state to that of the specified ID2D1DrawingStateBlock.  \n  \n```  \nvoid RestoreDrawingState(ID2D1DrawingStateBlock& drawingStateBlock);\n```  \n  \n### Parameters  \n `drawingStateBlock`  \n The new drawing state of the render target.  \n  \n##  <a name=\"crendertarget__savedrawingstate\"></a>  CRenderTarget::SaveDrawingState  \n Saves the current drawing state to the specified ID2D1DrawingStateBlock.  \n  \n```  \nvoid SaveDrawingState(ID2D1DrawingStateBlock& drawingStateBlock) const;\n\n \n```  \n  \n### Parameters  \n `drawingStateBlock`  \n When this method returns, contains the current drawing state of the render target. This parameter must be initialized before passing it to the method.  \n  \n##  <a name=\"crendertarget__setantialiasmode\"></a>  CRenderTarget::SetAntialiasMode  \n Sets the antialiasing mode of the render target. The antialiasing mode applies to all subsequent drawing operations, excluding text and glyph drawing operations.  \n  \n```  \nvoid SetAntialiasMode(D2D1_ANTIALIAS_MODE antialiasMode);\n```  \n  \n### Parameters  \n `antialiasMode`  \n The antialiasing mode for future drawing operations.  \n  \n##  <a name=\"crendertarget__setdpi\"></a>  CRenderTarget::SetDpi  \n Sets the dots per inch (DPI) of the render target.  \n  \n```  \nvoid SetDpi(const CD2DSizeF& sizeDPI);\n```  \n  \n### Parameters  \n `sizeDPI`  \n A value greater than or equal to zero that specifies the horizontal/verticalDPI of the render target.  \n  \n##  <a name=\"crendertarget__settags\"></a>  CRenderTarget::SetTags  \n Specifies a label for subsequent drawing operations.  \n  \n```  \nvoid SetTags(\n    D2D1_TAG tag1,  \n    D2D1_TAG tag2);\n```  \n  \n### Parameters  \n `tag1`  \n A label to apply to subsequent drawing operations.  \n  \n `tag2`  \n A label to apply to subsequent drawing operations.  \n  \n##  <a name=\"crendertarget__settextantialiasmode\"></a>  CRenderTarget::SetTextAntialiasMode  \n Specifies the antialiasing mode to use for subsequent text and glyph drawing operations.  \n  \n```  \nvoid SetTextAntialiasMode(D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode);\n```  \n  \n### Parameters  \n `textAntialiasMode`  \n The antialiasing mode to use for subsequent text and glyph drawing operations.  \n  \n##  <a name=\"crendertarget__settextrenderingparams\"></a>  CRenderTarget::SetTextRenderingParams  \n Specifies text rendering options to be applied to all subsequent text and glyph drawing operations.  \n  \n```  \nvoid SetTextRenderingParams(IDWriteRenderingParams* textRenderingParams = NULL);\n```  \n  \n### Parameters  \n `textRenderingParams`  \n The text rendering options to be applied to all subsequent text and glyph drawing operations; NULL to clear current text rendering options.  \n  \n##  <a name=\"crendertarget__settransform\"></a>  CRenderTarget::SetTransform  \n Applies the specified transform to the render target, replacing the existing transformation. All subsequent drawing operations occur in the transformed space.  \n  \n```  \nvoid SetTransform(const D2D1_MATRIX_3X2_F* transform);\n\n \nvoid SetTransform(const D2D1_MATRIX_3X2_F& transform);\n```  \n  \n### Parameters  \n `transform`  \n The transform to apply to the render target.  \n  \n##  <a name=\"crendertarget__verifyresource\"></a>  CRenderTarget::VerifyResource  \n Verifies CD2DResource object validity; creates the object if it didn't already exist.  \n  \n```  \nBOOL VerifyResource(CD2DResource* pResource);\n```  \n  \n### Parameters  \n `pResource`  \n Pointer to CD2DResource object.  \n  \n### Return Value  \n TRUE is object if valid; otherwise FALSE.  \n  \n## See Also  \n [Classes](../../mfc/reference/mfc-classes.md)\n"}