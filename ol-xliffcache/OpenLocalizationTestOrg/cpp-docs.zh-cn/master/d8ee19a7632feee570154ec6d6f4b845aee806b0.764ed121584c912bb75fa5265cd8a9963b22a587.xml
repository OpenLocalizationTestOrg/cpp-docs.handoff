{"nodes":[{"pos":[12,54],"content":"make_collection (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"make_collection (STL-CLR) | Microsoft Docs","pos":[0,42]}]},{"content":"make_collection (STL/CLR)","pos":[644,669]},{"pos":[670,715],"content":"Make a <ph id=\"ph1\">`range_adapter`</ph> from an iterator pair.","source":"Make a `range_adapter` from an iterator pair."},{"content":"Syntax","pos":[724,730]},{"content":"Parameters","pos":[848,858]},{"content":"Iter","pos":[862,866]},{"content":"The type of the wrapped iterators.","pos":[870,904]},{"content":"first","pos":[911,916]},{"content":"First iterator to wrap.","pos":[920,943]},{"content":"last","pos":[950,954]},{"content":"Second iterator to wrap.","pos":[958,982]},{"content":"Remarks","pos":[991,998]},{"content":"The template function returns <ph id=\"ph1\">`gcnew range_adapter&lt;Iter&gt;(``first``,`</ph> <ph id=\"ph2\">`last``)`</ph>.","pos":[1002,1081],"source":"The template function returns `gcnew range_adapter<Iter>(``first``,` `last``)`."},{"content":"You use it to construct a <ph id=\"ph1\">`range_adapter``&lt;Iter&gt;`</ph> object from a pair of iterators.","pos":[1082,1164],"source":" You use it to construct a `range_adapter``<Iter>` object from a pair of iterators."},{"content":"Example","pos":[1173,1180]},{"content":"Requirements","pos":[2521,2533]},{"pos":[2537,2566],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/adapter&gt;","source":"**Header:** \\<cliext/adapter>"},{"pos":[2573,2594],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2603,2611]},{"content":"range_adapter (STL/CLR)","pos":[2616,2639]}],"content":"---\ntitle: \"make_collection (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::make_collection\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"make_collection function [STL/CLR]\"\nms.assetid: c25fb0cb-ebd8-4198-a565-bad28d32ee19\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# make_collection (STL/CLR)\nMake a `range_adapter` from an iterator pair.  \n  \n## Syntax  \n  \n```  \ntemplate<typename Iter>  \n    range_adapter<Iter> make_collection(Iter first, Iter last);  \n```  \n  \n#### Parameters  \n Iter  \n The type of the wrapped iterators.  \n  \n first  \n First iterator to wrap.  \n  \n last  \n Second iterator to wrap.  \n  \n## Remarks  \n The template function returns `gcnew range_adapter<Iter>(``first``,` `last``)`. You use it to construct a `range_adapter``<Iter>` object from a pair of iterators.  \n  \n## Example  \n  \n```  \n// cliext_make_collection.cpp   \n// compile with: /clr   \n#include <cliext/adapter>   \n#include <cliext/deque>   \n  \ntypedef cliext::deque<wchar_t> Mycont;   \ntypedef cliext::range_adapter<Mycont::iterator> Myrange;   \nint main()   \n    {   \n    cliext::deque<wchar_t> d1;   \n    d1.push_back(L'a');   \n    d1.push_back(L'b');   \n    d1.push_back(L'c');   \n  \n// display contents \" a b c\"   \n    for each (wchar_t elem in d1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n    System::Collections::ICollection^ p1 =   \n        cliext::make_collection(d1.begin(), d1.end());   \n    System::Console::WriteLine(\"Count = {0}\", p1->Count);   \n    System::Console::WriteLine(\"IsSynchronized = {0}\",   \n        p1->IsSynchronized);   \n    System::Console::WriteLine(\"SyncRoot not nullptr = {0}\",   \n        p1->SyncRoot != nullptr);   \n  \n// copy the sequence   \n    cli::array<System::Object^>^ a1 = gcnew cli::array<System::Object^>(5);   \n  \n    a1[0] = L'|';   \n    p1->CopyTo(a1, 1);   \n    a1[4] = L'|';   \n    for each (wchar_t elem in a1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n a b c  \nCount = 3  \nIsSynchronized = False  \nSyncRoot not nullptr = True  \n | a b c |  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/adapter>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [range_adapter (STL/CLR)](../dotnet/range-adapter-stl-clr.md)"}