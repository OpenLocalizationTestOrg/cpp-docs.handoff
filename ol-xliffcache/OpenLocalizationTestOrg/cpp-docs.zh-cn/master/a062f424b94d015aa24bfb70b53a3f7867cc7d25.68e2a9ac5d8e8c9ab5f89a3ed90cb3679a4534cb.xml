{"nodes":[{"pos":[12,45],"content":"Worker Archetype | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Worker Archetype | Microsoft Docs","pos":[0,33]}]},{"content":"Worker Archetype","pos":[573,589]},{"pos":[590,700],"content":"Classes that conform to the <bpt id=\"p1\">*</bpt>worker<ept id=\"p1\">*</ept> archetype provide the code to process work items queued on a thread pool.","source":"Classes that conform to the *worker* archetype provide the code to process work items queued on a thread pool."},{"content":"Implementation","pos":[709,723]},{"content":"To implement a class conforming to this archetype, the class must provide the following features:","pos":[732,829]},{"content":"Method","pos":[836,842]},{"content":"Description","pos":[843,854]},{"content":"Initialize","pos":[895,905]},{"pos":[937,1047],"content":"Called to initialize the worker object before any requests are passed to <bpt id=\"p1\">[</bpt>Execute<ept id=\"p1\">](#workerarchetype__execute)</ept>.","source":"Called to initialize the worker object before any requests are passed to [Execute](#workerarchetype__execute)."},{"content":"Execute","pos":[1053,1060]},{"content":"Called to process a work item.","pos":[1089,1119]},{"content":"Terminate","pos":[1125,1134]},{"pos":[1165,1282],"content":"Called to uninitialize the worker object after all requests have been passed to <bpt id=\"p1\">[</bpt>Execute<ept id=\"p1\">](#workerarchetype__execute)</ept>.","source":"Called to uninitialize the worker object after all requests have been passed to [Execute](#workerarchetype__execute)."},{"content":"Typedef","pos":[1290,1297]},{"content":"Description","pos":[1298,1309]},{"content":"RequestType","pos":[1351,1362]},{"content":"A typedef for the type of work item that can be processed by the worker class.","pos":[1395,1473]},{"pos":[1481,1522],"content":"A typical <bpt id=\"p1\">*</bpt>worker<ept id=\"p1\">*</ept> class looks like this:","source":"A typical *worker* class looks like this:"},{"pos":[1540,1561],"content":"NVC_ATL_Utilities#137"},{"content":"Existing Implementations","pos":[1622,1646]},{"content":"These classes conform to this archetype:","pos":[1655,1695]},{"content":"Class","pos":[1702,1707]},{"content":"Description","pos":[1708,1719]},{"content":"CNonStatelessWorker","pos":[1759,1778]},{"content":"Receives requests from the thread pool and passes them on to a worker object that is created and destroyed for each request.","pos":[1830,1954]},{"content":"Use","pos":[1964,1967]},{"content":"These template parameters expect the class to conform to this archetype:","pos":[1976,2048]},{"content":"Parameter name","pos":[2055,2069]},{"content":"Used by","pos":[2070,2077]},{"content":"Worker","pos":[2122,2128]},{"content":"CThreadPool","pos":[2131,2142]},{"content":"Worker","pos":[2191,2197]},{"content":"CNonStatelessWorker","pos":[2200,2219]},{"content":"Requirements","pos":[2281,2293]},{"pos":[2297,2318],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlutil.h","source":"**Header:** atlutil.h"},{"pos":[2366,2390],"content":"WorkerArchetype::Execute"},{"content":"Called to process a work item.","pos":[2391,2421]},{"content":"Parameters","pos":[2551,2561]},{"content":"The work item to be processed.","pos":[2578,2608]},{"content":"The work item is of the same type as <ph id=\"ph1\">`RequestType`</ph>.","pos":[2609,2660],"source":" The work item is of the same type as `RequestType`."},{"content":"A custom parameter understood by the worker class.","pos":[2686,2736]},{"content":"Also passed to <ph id=\"ph1\">`WorkerArchetype::Initialize`</ph> and <ph id=\"ph2\">`Terminate`</ph>.","pos":[2737,2798],"source":" Also passed to `WorkerArchetype::Initialize` and `Terminate`."},{"content":"A pointer to the <bpt id=\"p1\">[</bpt>OVERLAPPED<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms684342)</ept> structure used to create the queue on which work items were queued.","pos":[2822,2979],"source":" A pointer to the [OVERLAPPED](http://msdn.microsoft.com/library/windows/desktop/ms684342) structure used to create the queue on which work items were queued."},{"pos":[3031,3058],"content":"WorkerArchetype::Initialize"},{"pos":[3059,3159],"content":"Called to initialize the worker object before any requests are passed to <ph id=\"ph1\">`WorkerArchetype::Execute`</ph>.","source":"Called to initialize the worker object before any requests are passed to `WorkerArchetype::Execute`."},{"content":"Parameters","pos":[3220,3230]},{"content":"A custom parameter understood by the worker class.","pos":[3247,3297]},{"content":"Also passed to <ph id=\"ph1\">`WorkerArchetype::Terminate`</ph> and <ph id=\"ph2\">`WorkerArchetype::Execute`</ph>.","pos":[3298,3373],"source":" Also passed to `WorkerArchetype::Terminate` and `WorkerArchetype::Execute`."},{"content":"Return Value","pos":[3383,3395]},{"pos":[3399,3448],"content":"Return <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> on success, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> on failure.","source":"Return **TRUE** on success, **FALSE** on failure."},{"pos":[3501,3529],"content":"WorkerArchetype::RequestType"},{"content":"A typedef for the type of work item that can be processed by the worker class.","pos":[3530,3608]},{"content":"Remarks","pos":[3674,3681]},{"pos":[3685,3819],"content":"This type must be used as the first parameter of <ph id=\"ph1\">`WorkerArchetype::Execute`</ph> and must be capable of being cast to and from a ULONG_PTR.","source":"This type must be used as the first parameter of `WorkerArchetype::Execute` and must be capable of being cast to and from a ULONG_PTR."},{"pos":[3870,3896],"content":"WorkerArchetype::Terminate"},{"pos":[3897,4005],"content":"Called to uninitialize the worker object after all requests have been passed to <ph id=\"ph1\">`WorkerArchetype::Execute`</ph>).","source":"Called to uninitialize the worker object after all requests have been passed to `WorkerArchetype::Execute`)."},{"content":"Parameters","pos":[4071,4081]},{"content":"A custom parameter understood by the worker class.","pos":[4098,4148]},{"content":"Also passed to <ph id=\"ph1\">`WorkerArchetype::Initialize`</ph> and <ph id=\"ph2\">`WorkerArchetype::Execute`</ph>.","pos":[4149,4225],"source":" Also passed to `WorkerArchetype::Initialize` and `WorkerArchetype::Execute`."},{"content":"See Also","pos":[4234,4242]},{"content":"Archetypes","pos":[4247,4257]},{"content":"Concepts","pos":[4303,4311]},{"content":"ATL COM Desktop Components","pos":[4369,4395]}],"content":"---\ntitle: \"Worker Archetype | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"Worker archetype\"\nms.assetid: 834145cd-09d3-4149-bc99-620e1871cbfb\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Worker Archetype\nClasses that conform to the *worker* archetype provide the code to process work items queued on a thread pool.  \n  \n **Implementation**  \n  \n To implement a class conforming to this archetype, the class must provide the following features:  \n  \n|Method|Description|  \n|------------|-----------------|  \n|[Initialize](#workerarchetype__initialize)|Called to initialize the worker object before any requests are passed to [Execute](#workerarchetype__execute).|  \n|[Execute](#workerarchetype__execute)|Called to process a work item.|  \n|[Terminate](#workerarchetype__terminate)|Called to uninitialize the worker object after all requests have been passed to [Execute](#workerarchetype__execute).|  \n  \n|Typedef|Description|  \n|-------------|-----------------|  \n|[RequestType](#workerarchetype__requesttype)|A typedef for the type of work item that can be processed by the worker class.|  \n  \n A typical *worker* class looks like this:  \n  \n [!code-cpp[NVC_ATL_Utilities#137](../../atl/codesnippet/cpp/worker-archetype_1.cpp)]  \n  \n **Existing Implementations**  \n  \n These classes conform to this archetype:  \n  \n|Class|Description|  \n|-----------|-----------------|  \n|[CNonStatelessWorker](../../atl/reference/cnonstatelessworker-class.md)|Receives requests from the thread pool and passes them on to a worker object that is created and destroyed for each request.|  \n  \n **Use**  \n  \n These template parameters expect the class to conform to this archetype:  \n  \n|Parameter name|Used by|  \n|--------------------|-------------|  \n|*Worker*|[CThreadPool](../../atl/reference/cthreadpool-class.md)|  \n|*Worker*|[CNonStatelessWorker](../../atl/reference/cnonstatelessworker-class.md)|  \n  \n### Requirements  \n **Header:** atlutil.h  \n  \n## <a name=\"workerarchetype__execute\"></a>WorkerArchetype::Execute\nCalled to process a work item.  \n  \n  \n  \n```  \nvoid Execute(\n    RequestType request,  \n    void* pvWorkerParam,  \n    OVERLAPPED* pOverlapped);\n```  \n  \n#### Parameters  \n `request`  \n The work item to be processed. The work item is of the same type as `RequestType`.  \n  \n `pvWorkerParam`  \n A custom parameter understood by the worker class. Also passed to `WorkerArchetype::Initialize` and `Terminate`.  \n  \n `pOverlapped`  \n A pointer to the [OVERLAPPED](http://msdn.microsoft.com/library/windows/desktop/ms684342) structure used to create the queue on which work items were queued.  \n  \n## <a name=\"workerarchetype__initialize\"></a> WorkerArchetype::Initialize\nCalled to initialize the worker object before any requests are passed to `WorkerArchetype::Execute`.  \n```\nBOOL Initialize(void* pvParam) throw();\n```  \n  \n#### Parameters  \n `pvParam`  \n A custom parameter understood by the worker class. Also passed to `WorkerArchetype::Terminate` and `WorkerArchetype::Execute`.  \n  \n### Return Value  \n Return **TRUE** on success, **FALSE** on failure.  \n  \n## <a name=\"workerarchetype__requesttype\"></a> WorkerArchetype::RequestType\nA typedef for the type of work item that can be processed by the worker class.  \n  \n```  \ntypedef   MyRequestType RequestType;    \n```  \n  \n### Remarks  \n This type must be used as the first parameter of `WorkerArchetype::Execute` and must be capable of being cast to and from a ULONG_PTR.  \n  \n## <a name=\"workerarchetype__terminate\"></a> WorkerArchetype::Terminate\nCalled to uninitialize the worker object after all requests have been passed to `WorkerArchetype::Execute`).  \n    \n``` \nvoid Terminate(void* pvParam) throw();\n```  \n  \n#### Parameters  \n `pvParam`  \n A custom parameter understood by the worker class. Also passed to `WorkerArchetype::Initialize` and `WorkerArchetype::Execute`.  \n  \n## See Also  \n [Archetypes](../../atl/reference/atl-archetypes.md)   \n [Concepts](../../atl/active-template-library-atl-concepts.md)   \n [ATL COM Desktop Components](../../atl/atl-com-desktop-components.md)\n\n\n\n"}