{"nodes":[{"pos":[12,69],"content":"_InterlockedExchange Intrinsic Functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_InterlockedExchange Intrinsic Functions | Microsoft Docs","pos":[0,57]}]},{"content":"_InterlockedExchange Intrinsic Functions","pos":[1940,1980]},{"content":"Microsoft Specific","pos":[1983,2001]},{"content":"Generates an atomic instruction to set a specified value.","pos":[2010,2067]},{"content":"Syntax","pos":[2076,2082]},{"content":"Parameters","pos":[3866,3876]},{"content":"[in, out]","pos":[3880,3889]},{"content":"Pointer to the value to be exchanged.","pos":[3902,3939]},{"content":"The function sets this variable to <ph id=\"ph1\">`Value`</ph> and returns its prior value.","pos":[3940,4011],"source":" The function sets this variable to `Value` and returns its prior value."},{"content":"[in]","pos":[4018,4022]},{"content":"Value to be exchanged with the value pointed to by <ph id=\"ph1\">`Target`</ph>.","pos":[4034,4094],"source":" Value to be exchanged with the value pointed to by `Target`."},{"content":"Return Value","pos":[4103,4115]},{"pos":[4119,4168],"content":"Returns the initial value pointed to by <ph id=\"ph1\">`Target`</ph>.","source":"Returns the initial value pointed to by `Target`."},{"content":"Requirements","pos":[4177,4189]},{"content":"Intrinsic","pos":[4196,4205]},{"content":"Architecture","pos":[4206,4218]},{"content":"Header","pos":[4219,4225]},{"pos":[4304,4356],"content":", <ph id=\"ph1\">`_InterlockedExchange8`</ph>, <ph id=\"ph2\">`_InterlockedExchange16`</ph>,","source":", `_InterlockedExchange8`, `_InterlockedExchange16`, "},{"pos":[4382,4391],"content":"x86, ARM,"},{"content":"intrin.h&gt;","pos":[4458,4467],"source":"intrin.h>"},{"pos":[4498,4818],"content":", <ph id=\"ph1\">`_InterlockedExchange_nf`</ph>, <ph id=\"ph2\">`_InterlockedExchange_rel`</ph>, <ph id=\"ph3\">`_InterlockedExchange8_acq`</ph>, <ph id=\"ph4\">`_InterlockedExchange8_nf`</ph>, <ph id=\"ph5\">`_InterlockedExchange8_rel`</ph>, <ph id=\"ph6\">`_InterlockedExchange16_acq`</ph>, <ph id=\"ph7\">`_InterlockedExchange16_nf`</ph>, <ph id=\"ph8\">`_InterlockedExchange16_rel`</ph>, <ph id=\"ph9\">`_InterlockedExchange64_acq`</ph>, <ph id=\"ph10\">`_InterlockedExchange64_nf`</ph>, <ph id=\"ph11\">`_InterlockedExchange64_rel`</ph>,","source":", `_InterlockedExchange_nf`, `_InterlockedExchange_rel`, `_InterlockedExchange8_acq`, `_InterlockedExchange8_nf`, `_InterlockedExchange8_rel`, `_InterlockedExchange16_acq`, `_InterlockedExchange16_nf`, `_InterlockedExchange16_rel`, `_InterlockedExchange64_acq`, `_InterlockedExchange64_nf`, `_InterlockedExchange64_rel`,"},{"content":"ARM","pos":[4819,4822]},{"content":"intrin.h&gt;","pos":[4825,4834],"source":"intrin.h>"},{"pos":[4872,4945],"content":", <ph id=\"ph1\">`_InterlockedExchange_HLERelease`</ph>, <ph id=\"ph2\">`_InterlockedExchange64_HLEAcquire`</ph>,","source":", `_InterlockedExchange_HLERelease`, `_InterlockedExchange64_HLEAcquire`, "},{"pos":[4982,4986],"content":"x86,"},{"content":"immintrin.h&gt;","pos":[5053,5065],"source":"immintrin.h>"},{"content":"Remarks","pos":[5075,5082]},{"pos":[5109,5319],"content":"provides compiler intrinsic support for the Win32 <ph id=\"ph1\">[!INCLUDE[winsdkshort](../atl-mfc-shared/reference/includes/winsdkshort_md.md)]</ph> <bpt id=\"p1\">[</bpt>InterlockedExchange<ept id=\"p1\">](http://msdn.microsoft.com/library/ms683590.aspx)</ept> function.","source":" provides compiler intrinsic support for the Win32 [!INCLUDE[winsdkshort](../atl-mfc-shared/reference/includes/winsdkshort_md.md)] [InterlockedExchange](http://msdn.microsoft.com/library/ms683590.aspx) function."},{"pos":[5326,5496],"content":"There are several variations on <ph id=\"ph1\">`_InterlockedExchange`</ph> that vary based on the data types they involve and whether processor-specific acquire or release semantics is used.","source":"There are several variations on `_InterlockedExchange` that vary based on the data types they involve and whether processor-specific acquire or release semantics is used."},{"pos":[5503,5761],"content":"While the <ph id=\"ph1\">`_InterlockedExchange`</ph> function operates on 32-bit integer values, <ph id=\"ph2\">`_InterlockedExchange8`</ph> operates on 8-bit integer values, <ph id=\"ph3\">`_InterlockedExchange16`</ph> operates on 16-bit integer values, and <ph id=\"ph4\">`_InterlockedExchange64`</ph> operates on 64-bit integer values.","source":"While the `_InterlockedExchange` function operates on 32-bit integer values, `_InterlockedExchange8` operates on 8-bit integer values, `_InterlockedExchange16` operates on 16-bit integer values, and `_InterlockedExchange64` operates on 64-bit integer values."},{"content":"On ARM platforms, use the intrinsics with <ph id=\"ph1\">`_acq`</ph> and <ph id=\"ph2\">`_rel`</ph> suffixes for acquire and release semantics, such as at the beginning and end of a critical section.","pos":[5768,5927],"source":"On ARM platforms, use the intrinsics with `_acq` and `_rel` suffixes for acquire and release semantics, such as at the beginning and end of a critical section."},{"content":"The intrinsics with an <ph id=\"ph1\">`_nf`</ph> (\"no fence\") suffix do not act as a memory barrier.","pos":[5928,6008],"source":" The intrinsics with an `_nf` (\"no fence\") suffix do not act as a memory barrier."},{"content":"On Intel platforms that support Hardware Lock Elision (HLE) instructions, the intrinsics with <ph id=\"ph1\">`_HLEAcquire`</ph> and <ph id=\"ph2\">`_HLERelease`</ph> suffixes include a hint to the processor that can accelerate performance by eliminating a lock write step in hardware.","pos":[6015,6259],"source":"On Intel platforms that support Hardware Lock Elision (HLE) instructions, the intrinsics with `_HLEAcquire` and `_HLERelease` suffixes include a hint to the processor that can accelerate performance by eliminating a lock write step in hardware."},{"content":"If these intrinsics are called on platforms that do not support HLE, the hint is ignored.","pos":[6260,6349]},{"content":"These routines are only available as intrinsics.","pos":[6356,6404]},{"content":"Example","pos":[6413,6420]},{"pos":[6424,6562],"content":"For a sample of how to use <ph id=\"ph1\">`_InterlockedExchange`</ph>, see <bpt id=\"p1\">[</bpt>_InterlockedDecrement<ept id=\"p1\">](../intrinsics/interlockeddecrement-intrinsic-functions.md)</ept>.","source":"For a sample of how to use `_InterlockedExchange`, see [_InterlockedDecrement](../intrinsics/interlockeddecrement-intrinsic-functions.md)."},{"content":"END Microsoft Specific","pos":[6571,6593]},{"content":"See Also","pos":[6602,6610]},{"content":"Compiler Intrinsics","pos":[6615,6634]},{"content":"Keywords","pos":[6679,6687]},{"content":"Conflicts with the x86 Compiler","pos":[6718,6749]}],"content":"---\ntitle: \"_InterlockedExchange Intrinsic Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"_InterlockedExchange_rel\"\n  - \"_InterlockedExchange8_nf\"\n  - \"_InterlockedExchange_acq_cpp\"\n  - \"_InterlockedExchange_nf\"\n  - \"_InterlockedExchange64_nf\"\n  - \"_InterlockedExchange_HLEAcquire\"\n  - \"_InterlockedExchange_cpp\"\n  - \"_InterlockedExchange64_acq_cpp\"\n  - \"_InterlockedExchange64_acq\"\n  - \"_InterlockedExchange64_HLERelease\"\n  - \"_InterlockedExchange8_acq\"\n  - \"_InterlockedExchange16_acq\"\n  - \"_InterlockedExchange\"\n  - \"_InterlockedExchange64_HLEAcquire\"\n  - \"_InterlockedExchange8\"\n  - \"_InterlockedExchange64_rel\"\n  - \"_InterlockedExchange_acq\"\n  - \"_InterlockedExchange16\"\n  - \"_InterlockedExchange16_rel\"\n  - \"_InterlockedExchange16_nf\"\n  - \"_InterlockedExchange64\"\n  - \"_InterlockedExchange_HLERelease\"\n  - \"_InterlockedExchange64_cpp\"\n  - \"_InterlockedExchange8_rel\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"_InterlockedExchange8\"\n  - \"_InterlockedExchange64 intrinsic\"\n  - \"_InterlockedExchange_acq intrinsic\"\n  - \"InterlockedExchange64 intrinsic\"\n  - \"_InterlockedExchange64_acq intrinsic\"\n  - \"InterlockedExchange64_acq intrinsic\"\n  - \"_InterlockedExchange16_acq\"\n  - \"_InterlockedExchange8_acq\"\n  - \"_InterlockedExchange16\"\n  - \"_InterlockedExchange8_rel\"\n  - \"InterlockedExchange_acq intrinsic\"\n  - \"InterlockedExchange intrinsic\"\n  - \"_InterlockedExchange16_rel\"\n  - \"_InterlockedExchange16_nf\"\n  - \"_InterlockedExchange intrinsic\"\n  - \"_InterlockedExchange8_nf\"\nms.assetid: be2f232a-6301-462a-a92b-fcdeb8b0f209\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _InterlockedExchange Intrinsic Functions\n**Microsoft Specific**  \n  \n Generates an atomic instruction to set a specified value.  \n  \n## Syntax  \n  \n```  \nlong _InterlockedExchange(  \n   long volatile * Target,  \n   long Value  \n);  \nlong _InterlockedExchange_acq(  \n   long volatile * Target,  \n   long Value  \n);  \nlong _InterlockedExchange_HLEAcquire(  \n   long volatile * Target,  \n   long Value  \n);  \nlong _InterlockedExchange_HLERelease(  \n   long volatile * Target,  \n   long Value  \n);  \nlong _InterlockedExchange_nf(  \n   long volatile * Target,  \n   long Value  \n);  \nlong _InterlockedExchange_rel(  \n   long volatile * Target,  \n   long Value  \n);  \nchar _InterlockedExchange8(  \n   char volatile * Target,  \n   char Value  \n);  \nchar _InterlockedExchange8_acq(  \n   char volatile * Target,  \n   char Value  \n);  \nchar _InterlockedExchange8_nf(  \n   char volatile * Target,  \n   char Value  \n);  \nchar _InterlockedExchange8_rel(  \n   char volatile * Target,  \n   char Value  \n);  \nshort _InterlockedExchange16(  \n   short volatile * Target,  \n   short Value  \n);  \nshort _InterlockedExchange16_acq(  \n   short volatile * Target,  \n   short Value  \n);  \nshort _InterlockedExchange16_nf(  \n   short volatile * Target,  \n   short Value  \n);  \nshort _InterlockedExchange16_rel(  \n   short volatile * Target,  \n   short Value  \n);  \n__int64 _InterlockedExchange64(  \n   __int64 volatile * Target,  \n   __int64 Value  \n);  \n__int64 _InterlockedExchange64_acq(  \n   __int64 volatile * Target,  \n   __int64 Value  \n);  \n__int64 _InterlockedExchange64_HLEAcquire(  \n   __int64 volatile * Target,  \n   __int64 Value  \n);  \n__int64 _InterlockedExchange64_HLERelease(  \n   __int64 volatile * Target,  \n   __int64 Value  \n);  \n__int64 _InterlockedExchange64_nf(  \n   __int64 volatile * Target,  \n   __int64 Value  \n);  \n__int64 _InterlockedExchange64_rel(  \n   __int64 volatile * Target,  \n   __int64 Value  \n);  \n```  \n  \n#### Parameters  \n [in, out] `Target`  \n Pointer to the value to be exchanged. The function sets this variable to `Value` and returns its prior value.  \n  \n [in] `Value`  \n Value to be exchanged with the value pointed to by `Target`.  \n  \n## Return Value  \n Returns the initial value pointed to by `Target`.  \n  \n## Requirements  \n  \n|Intrinsic|Architecture|Header|  \n|---------------|------------------|------------|  \n|`_InterlockedExchange`, `_InterlockedExchange8`, `_InterlockedExchange16`, `_InterlockedExchange64`|x86, ARM, [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]|\\<intrin.h>|  \n|`_InterlockedExchange_acq`, `_InterlockedExchange_nf`, `_InterlockedExchange_rel`, `_InterlockedExchange8_acq`, `_InterlockedExchange8_nf`, `_InterlockedExchange8_rel`, `_InterlockedExchange16_acq`, `_InterlockedExchange16_nf`, `_InterlockedExchange16_rel`, `_InterlockedExchange64_acq`, `_InterlockedExchange64_nf`, `_InterlockedExchange64_rel`,|ARM|\\<intrin.h>|  \n|`_InterlockedExchange_HLEAcquire`, `_InterlockedExchange_HLERelease`, `_InterlockedExchange64_HLEAcquire`, `_InterlockedExchange64_HLERelease`|x86, [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]|\\<immintrin.h>|  \n  \n## Remarks  \n `_InterlockedExchange` provides compiler intrinsic support for the Win32 [!INCLUDE[winsdkshort](../atl-mfc-shared/reference/includes/winsdkshort_md.md)] [InterlockedExchange](http://msdn.microsoft.com/library/ms683590.aspx) function.  \n  \n There are several variations on `_InterlockedExchange` that vary based on the data types they involve and whether processor-specific acquire or release semantics is used.  \n  \n While the `_InterlockedExchange` function operates on 32-bit integer values, `_InterlockedExchange8` operates on 8-bit integer values, `_InterlockedExchange16` operates on 16-bit integer values, and `_InterlockedExchange64` operates on 64-bit integer values.  \n  \n On ARM platforms, use the intrinsics with `_acq` and `_rel` suffixes for acquire and release semantics, such as at the beginning and end of a critical section. The intrinsics with an `_nf` (\"no fence\") suffix do not act as a memory barrier.  \n  \n On Intel platforms that support Hardware Lock Elision (HLE) instructions, the intrinsics with `_HLEAcquire` and `_HLERelease` suffixes include a hint to the processor that can accelerate performance by eliminating a lock write step in hardware. If these intrinsics are called on platforms that do not support HLE, the hint is ignored.  \n  \n These routines are only available as intrinsics.  \n  \n## Example  \n For a sample of how to use `_InterlockedExchange`, see [_InterlockedDecrement](../intrinsics/interlockeddecrement-intrinsic-functions.md).  \n  \n## END Microsoft Specific  \n  \n## See Also  \n [Compiler Intrinsics](../intrinsics/compiler-intrinsics.md)   \n [Keywords](../cpp/keywords-cpp.md)   \n [Conflicts with the x86 Compiler](../build/conflicts-with-the-x86-compiler.md)"}