{"nodes":[{"pos":[12,54],"content":"Initializing Regular DLLs | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Initializing Regular DLLs | Microsoft Docs","pos":[0,42]}]},{"content":"Initializing Regular DLLs","pos":[645,670]},{"content":"Because regular DLLs have a <ph id=\"ph1\">`CWinApp`</ph> object, they should perform their initialization and termination tasks in the same location as an MFC application: in the <ph id=\"ph2\">`InitInstance`</ph> and <bpt id=\"p1\">**</bpt>ExitInstance<ept id=\"p1\">**</ept> member functions of the DLL's <ph id=\"ph3\">`CWinApp`</ph>-derived class.","pos":[671,921],"source":"Because regular DLLs have a `CWinApp` object, they should perform their initialization and termination tasks in the same location as an MFC application: in the `InitInstance` and **ExitInstance** member functions of the DLL's `CWinApp`-derived class."},{"content":"Because MFC provides a <ph id=\"ph1\">`DllMain`</ph> function that is called by <bpt id=\"p1\">**</bpt>_DllMainCRTStartup<ept id=\"p1\">**</ept> for <bpt id=\"p2\">**</bpt>PROCESS_ATTACH<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>PROCESS_DETACH<ept id=\"p3\">**</ept>, you should not write your own <ph id=\"ph2\">`DllMain`</ph> function.","pos":[922,1101],"source":" Because MFC provides a `DllMain` function that is called by **_DllMainCRTStartup** for **PROCESS_ATTACH** and **PROCESS_DETACH**, you should not write your own `DllMain` function."},{"content":"The MFC-provided <ph id=\"ph1\">`DllMain`</ph> function calls <ph id=\"ph2\">`InitInstance`</ph> when your DLL is loaded and it calls <ph id=\"ph3\">`ExitInstance`</ph> before the DLL is unloaded.","pos":[1102,1238],"source":" The MFC-provided `DllMain` function calls `InitInstance` when your DLL is loaded and it calls `ExitInstance` before the DLL is unloaded."},{"content":"A regular DLL can keep track of multiple threads by calling <bpt id=\"p1\">[</bpt>TlsAlloc<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms686801)</ept> and <bpt id=\"p2\">[</bpt>TlsGetValue<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms686812)</ept> in its <ph id=\"ph1\">`InitInstance`</ph> function.","pos":[1245,1485],"source":"A regular DLL can keep track of multiple threads by calling [TlsAlloc](http://msdn.microsoft.com/library/windows/desktop/ms686801) and [TlsGetValue](http://msdn.microsoft.com/library/windows/desktop/ms686812) in its `InitInstance` function."},{"content":"These functions allow the DLL to track thread-specific data.","pos":[1486,1546]},{"content":"In your regular DLL that dynamically links to MFC, if you are using any MFC OLE, MFC Database (or DAO), or MFC Sockets support, respectively, the MFC debug extension DLLs MFCOxxD.dll, MFCDxxD.dll, and MFCNxxD.dll (where xx is the version number) are linked in automatically.","pos":[1553,1827]},{"content":"You must call one of the following predefined initialization functions for each of these DLLs that you are using in your regular DLL's <ph id=\"ph1\">`CWinApp::InitInstance`</ph>.","pos":[1828,1987],"source":" You must call one of the following predefined initialization functions for each of these DLLs that you are using in your regular DLL's `CWinApp::InitInstance`."},{"content":"Type of MFC support","pos":[1994,2013]},{"content":"Initialization function to call","pos":[2014,2045]},{"content":"MFC OLE (MFCOxxD.dll)","pos":[2118,2139]},{"content":"MFC Database (MFCDxxD.dll)","pos":[2163,2189]},{"content":"MFC Sockets (MFCNxxD.dll)","pos":[2212,2237]},{"content":"What do you want to do?","pos":[2266,2289]},{"content":"Initialize extension DLLs","pos":[2300,2325]},{"content":"Initialize non-MFC DLLs","pos":[2378,2401]},{"content":"What do you want to know more about?","pos":[2450,2486]},{"content":"The C run-time library behavior and _DllMainCRTStartup","pos":[2497,2551]},{"content":"Using Database, OLE, and Sockets Extension DLLs in Regular DLLs","pos":[2602,2665]},{"content":"Processes and threads (Windows SDK)","pos":[2752,2787]},{"content":"Thread local storage wrappers (MFC Technical Note 58)","pos":[2859,2912]},{"content":"See Also","pos":[2971,2979]},{"content":"Initializing a DLL","pos":[2984,3002]}],"content":"---\ntitle: \"Initializing Regular DLLs | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"DLLs [C++], regular\"\n  - \"initializing DLLs\"\n  - \"regular DLLs [C++], initializing\"\nms.assetid: f1f091d1-bb91-468a-94f4-3c554657b8fc\ncaps.latest.revision: 8\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Initializing Regular DLLs\nBecause regular DLLs have a `CWinApp` object, they should perform their initialization and termination tasks in the same location as an MFC application: in the `InitInstance` and **ExitInstance** member functions of the DLL's `CWinApp`-derived class. Because MFC provides a `DllMain` function that is called by **_DllMainCRTStartup** for **PROCESS_ATTACH** and **PROCESS_DETACH**, you should not write your own `DllMain` function. The MFC-provided `DllMain` function calls `InitInstance` when your DLL is loaded and it calls `ExitInstance` before the DLL is unloaded.  \n  \n A regular DLL can keep track of multiple threads by calling [TlsAlloc](http://msdn.microsoft.com/library/windows/desktop/ms686801) and [TlsGetValue](http://msdn.microsoft.com/library/windows/desktop/ms686812) in its `InitInstance` function. These functions allow the DLL to track thread-specific data.  \n  \n In your regular DLL that dynamically links to MFC, if you are using any MFC OLE, MFC Database (or DAO), or MFC Sockets support, respectively, the MFC debug extension DLLs MFCOxxD.dll, MFCDxxD.dll, and MFCNxxD.dll (where xx is the version number) are linked in automatically. You must call one of the following predefined initialization functions for each of these DLLs that you are using in your regular DLL's `CWinApp::InitInstance`.  \n  \n|Type of MFC support|Initialization function to call|  \n|-------------------------|-------------------------------------|  \n|MFC OLE (MFCOxxD.dll)|`AfxOleInitModule`|  \n|MFC Database (MFCDxxD.dll)|`AfxDbInitModule`|  \n|MFC Sockets (MFCNxxD.dll)|`AfxNetInitModule`|  \n  \n## What do you want to do?  \n  \n-   [Initialize extension DLLs](../build/initializing-extension-dlls.md)  \n  \n-   [Initialize non-MFC DLLs](../build/initializing-non-mfc-dlls.md)  \n  \n## What do you want to know more about?  \n  \n-   [The C run-time library behavior and _DllMainCRTStartup](../build/run-time-library-behavior.md)  \n  \n-   [Using Database, OLE, and Sockets Extension DLLs in Regular DLLs](../build/using-database-ole-and-sockets-extension-dlls-in-regular-dlls.md)  \n  \n-   [Processes and threads (Windows SDK)](http://msdn.microsoft.com/library/windows/desktop/ms684841)  \n  \n-   [Thread local storage wrappers (MFC Technical Note 58)](../mfc/tn058-mfc-module-state-implementation.md)  \n  \n## See Also  \n [Initializing a DLL](../build/initializing-a-dll.md)"}