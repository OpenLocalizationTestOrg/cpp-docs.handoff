{"nodes":[{"pos":[12,50],"content":"atomic_flag Structure | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"atomic_flag Structure | Microsoft Docs","pos":[0,38]}]},{"content":"atomic_flag Structure","pos":[575,596]},{"content":"Describes an object that atomically sets and clears a <ph id=\"ph1\">`bool`</ph> flag.","pos":[597,663],"source":"Describes an object that atomically sets and clears a `bool` flag."},{"content":"Operations on atomic flags are always lock-free.","pos":[664,712]},{"content":"Syntax","pos":[721,727]},{"content":"Members","pos":[769,776]},{"content":"Public Methods","pos":[786,800]},{"content":"Name","pos":[807,811]},{"content":"Description","pos":[812,823]},{"content":"atomic_flag::clear Method","pos":[862,887]},{"pos":[917,949],"content":"Sets the stored flag to <ph id=\"ph1\">`false`</ph>.","source":"Sets the stored flag to `false`."},{"content":"atomic_flag::test_and_set Method","pos":[955,987]},{"pos":[1024,1090],"content":"Sets the stored flag to <ph id=\"ph1\">`true`</ph> and returns the initial flag value.","source":"Sets the stored flag to `true` and returns the initial flag value."},{"content":"Remarks","pos":[1100,1107]},{"content":"objects can be passed to the non-member functions <bpt id=\"p1\">[</bpt>atomic_flag_clear<ept id=\"p1\">](../standard-library/atomic-functions.md#atomic_flag_clear_function)</ept>, <bpt id=\"p2\">[</bpt>atomic_flag_clear_explicit<ept id=\"p2\">](../standard-library/atomic-functions.md#atomic_flag_clear_explicit_function)</ept>, <bpt id=\"p3\">[</bpt>atomic_flag_test_and_set<ept id=\"p3\">](../standard-library/atomic-functions.md#atomic_flag_test_and_set_function)</ept>, and <bpt id=\"p4\">[</bpt>atomic_flag_test_and_set_explicit<ept id=\"p4\">](../standard-library/atomic-functions.md#atomic_flag_test_and_set_explicit_function)</ept>.","pos":[1125,1598],"source":" objects can be passed to the non-member functions [atomic_flag_clear](../standard-library/atomic-functions.md#atomic_flag_clear_function), [atomic_flag_clear_explicit](../standard-library/atomic-functions.md#atomic_flag_clear_explicit_function), [atomic_flag_test_and_set](../standard-library/atomic-functions.md#atomic_flag_test_and_set_function), and [atomic_flag_test_and_set_explicit](../standard-library/atomic-functions.md#atomic_flag_test_and_set_explicit_function)."},{"content":"They can be initialized by using the value <ph id=\"ph1\">`ATOMIC_FLAG_INIT`</ph>.","pos":[1599,1661],"source":" They can be initialized by using the value `ATOMIC_FLAG_INIT`."},{"content":"Requirements","pos":[1670,1682]},{"pos":[1686,1704],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atomic","source":"**Header:** atomic"},{"pos":[1711,1729],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[1781,1806],"content":"atomic_flag::clear Method"},{"pos":[1810,1972],"content":"Sets the <ph id=\"ph1\">`bool`</ph> flag that is stored in <ph id=\"ph2\">`*this`</ph> to <ph id=\"ph3\">`false`</ph>, within the specified <bpt id=\"p1\">[</bpt>memory_order<ept id=\"p1\">](../standard-library/atomic-enums.md#memory_order_enum)</ept> constraints.","source":"Sets the `bool` flag that is stored in `*this` to `false`, within the specified [memory_order](../standard-library/atomic-enums.md#memory_order_enum) constraints."},{"content":"Parameters","pos":[2158,2168]},{"content":"A <bpt id=\"p1\">[</bpt>memory_order<ept id=\"p1\">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.","pos":[2183,2255],"source":" A [memory_order](../standard-library/atomic-enums.md#memory_order_enum)."},{"pos":[2314,2346],"content":"atomic_flag::test_and_set Method"},{"pos":[2350,2511],"content":"Sets the <ph id=\"ph1\">`bool`</ph> flag that is stored in <ph id=\"ph2\">`*this`</ph> to <ph id=\"ph3\">`true`</ph>, within the specified <bpt id=\"p1\">[</bpt>memory_order<ept id=\"p1\">](../standard-library/atomic-enums.md#memory_order_enum)</ept> constraints.","source":"Sets the `bool` flag that is stored in `*this` to `true`, within the specified [memory_order](../standard-library/atomic-enums.md#memory_order_enum) constraints."},{"content":"Parameters","pos":[2711,2721]},{"content":"A <bpt id=\"p1\">[</bpt>memory_order<ept id=\"p1\">](../standard-library/atomic-enums.md#memory_order_enum)</ept>.","pos":[2736,2808],"source":" A [memory_order](../standard-library/atomic-enums.md#memory_order_enum)."},{"content":"Return Value","pos":[2818,2830]},{"pos":[2834,2890],"content":"The initial value of the flag that is stored in <ph id=\"ph1\">`*this`</ph>.","source":"The initial value of the flag that is stored in `*this`."},{"content":"See Also","pos":[2899,2907]},{"content":"atomic&gt;","pos":[2914,2921],"source":"atomic>"}],"content":"---\ntitle: \"atomic_flag Structure | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"atomic/std::atomic_flag\"\ndev_langs: \n  - \"C++\"\nms.assetid: 17f0c2f5-fd39-4a44-873a-b569720a670e\ncaps.latest.revision: 14\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# atomic_flag Structure\nDescribes an object that atomically sets and clears a `bool` flag. Operations on atomic flags are always lock-free.  \n  \n## Syntax  \n  \n```\nstruct atomic_flag;\n```  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[atomic_flag::clear Method](#atomic_flag__clear_method)|Sets the stored flag to `false`.|  \n|[atomic_flag::test_and_set Method](#atomic_flag__test_and_set_method)|Sets the stored flag to `true` and returns the initial flag value.|  \n  \n## Remarks  \n `atomic_flag` objects can be passed to the non-member functions [atomic_flag_clear](../standard-library/atomic-functions.md#atomic_flag_clear_function), [atomic_flag_clear_explicit](../standard-library/atomic-functions.md#atomic_flag_clear_explicit_function), [atomic_flag_test_and_set](../standard-library/atomic-functions.md#atomic_flag_test_and_set_function), and [atomic_flag_test_and_set_explicit](../standard-library/atomic-functions.md#atomic_flag_test_and_set_explicit_function). They can be initialized by using the value `ATOMIC_FLAG_INIT`.  \n  \n## Requirements  \n **Header:** atomic  \n  \n **Namespace:** std  \n  \n##  <a name=\"atomic_flag__clear_method\"></a>  atomic_flag::clear Method  \n Sets the `bool` flag that is stored in `*this` to `false`, within the specified [memory_order](../standard-library/atomic-enums.md#memory_order_enum) constraints.  \n  \n```\nvoid atomic_flag::clear(memory_order Order = memory_order_seq_cst) volatile noexcept;\nvoid atomic_flag::clear(memory_order Order = memory_order_seq_cst) noexcept;\n```  \n  \n### Parameters  \n `Order`  \n A [memory_order](../standard-library/atomic-enums.md#memory_order_enum).  \n  \n##  <a name=\"atomic_flag__test_and_set_method\"></a>  atomic_flag::test_and_set Method  \n Sets the `bool` flag that is stored in `*this` to `true`, within the specified [memory_order](../standard-library/atomic-enums.md#memory_order_enum) constraints.  \n  \n```\nbool atomic_flag::test_and_set(memory_order Order = memory_order_seq_cst) volatile noexcept;\nbool atomic_flag::test_and_set(memory_order Order = memory_order_seq_cst) noexcept;\n```  \n  \n### Parameters  \n `Order`  \n A [memory_order](../standard-library/atomic-enums.md#memory_order_enum).  \n  \n### Return Value  \n The initial value of the flag that is stored in `*this`.  \n  \n## See Also  \n [\\<atomic>](../standard-library/atomic.md)\n\n\n\n"}