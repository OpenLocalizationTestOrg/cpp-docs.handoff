{"nodes":[{"pos":[12,38],"content":"ptr::~ptr | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ptr::~ptr | Microsoft Docs","pos":[0,26]}]},{"content":"ptr::~ptr","pos":[666,675]},{"pos":[676,699],"content":"Destructs a <ph id=\"ph1\">`com::ptr`</ph>.","source":"Destructs a `com::ptr`."},{"content":"Syntax","pos":[708,714]},{"content":"Remarks","pos":[748,755]},{"content":"On destruction, the <ph id=\"ph1\">`com::ptr`</ph> releases all references it owns to its COM object.","pos":[759,840],"source":"On destruction, the `com::ptr` releases all references it owns to its COM object."},{"content":"Assuming that there are no other references held to the COM object, the COM object will be deleted and its memory freed.","pos":[841,961]},{"content":"Example","pos":[970,977]},{"content":"This example implements a CLR class that uses a <ph id=\"ph1\">`com::ptr`</ph> to wrap its private member <ph id=\"ph2\">`IXMLDOMDocument`</ph> object.","pos":[981,1092],"source":"This example implements a CLR class that uses a `com::ptr` to wrap its private member `IXMLDOMDocument` object."},{"content":"In the <ph id=\"ph1\">`main`</ph> function, the two <ph id=\"ph2\">`XmlDocument`</ph> objects' destructors will be called when they go out of the scope of the <ph id=\"ph3\">`try`</ph> block, resulting in the underlying <ph id=\"ph4\">`com::ptr`</ph> destructor being called, releasing all owned references to the COM object.","pos":[1094,1339],"source":"  In the `main` function, the two `XmlDocument` objects' destructors will be called when they go out of the scope of the `try` block, resulting in the underlying `com::ptr` destructor being called, releasing all owned references to the COM object."},{"content":"Requirements","pos":[3084,3096]},{"pos":[3100,3134],"content":"<bpt id=\"p1\">**</bpt>Header file<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>msclr\\com\\ptr.h&gt;","source":"**Header file** \\<msclr\\com\\ptr.h>"},{"pos":[3141,3165],"content":"<bpt id=\"p1\">**</bpt>Namespace<ept id=\"p1\">**</ept> msclr::com","source":"**Namespace** msclr::com"},{"content":"See Also","pos":[3174,3182]},{"content":"ptr Members","pos":[3187,3198]},{"content":"ptr::ptr","pos":[3231,3239]},{"content":"ptr::CreateInstance","pos":[3268,3287]}],"content":"---\ntitle: \"ptr::~ptr | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"msclr.com.ptr.~ptr\"\n  - \"ptr.~ptr\"\n  - \"msclr::com.ptr::~ptr\"\n  - \"~ptr\"\n  - \"ptr::~ptr\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ptr::~ptr\"\nms.assetid: 5f644aa5-fe66-4992-a5f8-13ec1292c949\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ptr::~ptr\nDestructs a `com::ptr`.  \n  \n## Syntax  \n  \n```  \n~ptr();  \n```  \n  \n## Remarks  \n On destruction, the `com::ptr` releases all references it owns to its COM object. Assuming that there are no other references held to the COM object, the COM object will be deleted and its memory freed.  \n  \n## Example  \n This example implements a CLR class that uses a `com::ptr` to wrap its private member `IXMLDOMDocument` object.  In the `main` function, the two `XmlDocument` objects' destructors will be called when they go out of the scope of the `try` block, resulting in the underlying `com::ptr` destructor being called, releasing all owned references to the COM object.  \n  \n```  \n// comptr_dtor.cpp  \n// compile with: /clr /link msxml2.lib  \n#include <msxml2.h>  \n#include <msclr\\com\\ptr.h>  \n  \n#import <msxml3.dll> raw_interfaces_only  \n  \nusing namespace System;  \nusing namespace System::Runtime::InteropServices;  \nusing namespace msclr;  \n  \n// a ref class that uses a com::ptr to contain an   \n// IXMLDOMDocument object  \nref class XmlDocument {  \npublic:  \n   // construct the internal com::ptr with a null interface  \n   // and use CreateInstance to fill it  \n   XmlDocument(String^ progid) {  \n      m_ptrDoc.CreateInstance(progid);     \n   }  \n  \n   // construct the internal com::ptr with a COM object  \n   XmlDocument(IXMLDOMDocument* pDoc) : m_ptrDoc(pDoc) {}  \n  \n   // note that the destructor will call the com::ptr destructor  \n   // and automatically release the reference to the COM object  \n  \nprivate:  \n   com::ptr<IXMLDOMDocument> m_ptrDoc;  \n};  \n  \n// use the ref class to handle an XML DOM Document object  \nint main() {  \n   IXMLDOMDocument* pDoc = NULL;  \n  \n   try {  \n      // create an XML DOM document object  \n      Marshal::ThrowExceptionForHR(CoCreateInstance(CLSID_DOMDocument30, NULL,   \n         CLSCTX_ALL, IID_IXMLDOMDocument, (void**)&pDoc));  \n      // construct the ref class with the COM object  \n      XmlDocument doc1(pDoc);  \n  \n      // or create the class from a progid string  \n      XmlDocument doc2(\"Msxml2.DOMDocument.3.0\");  \n   }  \n   // doc1 and doc2 destructors are called when they go out of scope  \n   // and the internal com::ptr releases its reference to the COM object  \n   catch (Exception^ e) {  \n      Console::WriteLine(e);     \n   }  \n   finally {  \n      if (NULL != pDoc) {  \n         pDoc->Release();        \n      }  \n   }  \n}  \n```  \n  \n## Requirements  \n **Header file** \\<msclr\\com\\ptr.h>  \n  \n **Namespace** msclr::com  \n  \n## See Also  \n [ptr Members](../dotnet/ptr-members.md)   \n [ptr::ptr](../dotnet/ptr-ptr.md)   \n [ptr::CreateInstance](../dotnet/ptr-createinstance.md)"}