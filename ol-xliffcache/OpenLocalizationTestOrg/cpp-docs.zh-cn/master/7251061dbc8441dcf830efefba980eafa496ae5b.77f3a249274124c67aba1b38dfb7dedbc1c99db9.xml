{"nodes":[{"pos":[12,82],"content":"Attribute Parameter Types  (C++ Component Extensions) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Attribute Parameter Types  (C++ Component Extensions) | Microsoft Docs","pos":[0,70]}]},{"content":"Attribute Parameter Types  (C++ Component Extensions)","pos":[636,689]},{"content":"Values passed to attributes must be known to the compiler at compile time.","pos":[690,764]},{"content":"Attribute parameters can be of the following types:","pos":[766,817]},{"pos":[849,850],"content":","},{"pos":[883,884],"content":","},{"pos":[916,917],"content":","},{"pos":[948,949],"content":","},{"pos":[984,985],"content":","},{"pos":[1021,1022],"content":","},{"pos":[1068,1084],"content":"or <ph id=\"ph1\">`wchar_t*`</ph> or","source":" or `wchar_t*` or "},{"content":"Example","pos":[1181,1188]},{"content":"Code","pos":[1198,1202]},{"content":"Example","pos":[1753,1760]},{"content":"Description","pos":[1770,1781]},{"content":"When specifying attributes, all unnamed (positional) arguments must precede any named arguments.","pos":[1785,1881]},{"content":"Code","pos":[1891,1895]},{"content":"Example","pos":[2473,2480]},{"content":"Description","pos":[2490,2501]},{"content":"Attribute parameters can be one-dimensional arrays of the previous types.","pos":[2505,2578]},{"content":"Code","pos":[2588,2592]},{"content":"See Also","pos":[2952,2960]},{"content":"User-Defined Attributes","pos":[2965,2988]}],"content":"---\ntitle: \"Attribute Parameter Types  (C++ Component Extensions) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"custom attributes, parameter types\"\nms.assetid: d9f127a3-7f08-456f-acc6-256805632712\ncaps.latest.revision: 5\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Attribute Parameter Types  (C++ Component Extensions)\nValues passed to attributes must be known to the compiler at compile time.  Attribute parameters can be of the following types:  \n  \n-   `bool`  \n  \n-   `char`, `unsigned char`  \n  \n-   `short`, `unsigned short`  \n  \n-   `int`, `unsigned int`  \n  \n-   `long`, `unsigned long`  \n  \n-   `__int64`, `unsigned __int64`  \n  \n-   `float`, `double`  \n  \n-   `wchar_t`  \n  \n-   `char*` or `wchar_t*` or `System::String*`  \n  \n-   `System::Type ^`  \n  \n-   `System::Object ^`  \n  \n-   `enum`  \n  \n## Example  \n  \n### Code  \n  \n```  \n// attribute_parameter_types.cpp  \n// compile with: /clr /c  \nusing namespace System;  \nref struct AStruct {};  \n  \n[AttributeUsage(AttributeTargets::ReturnValue)]  \nref struct Attr : public Attribute {  \n   Attr(AStruct ^ i){}  \n   Attr(bool i){}  \n   Attr(){}  \n};  \n  \nref struct MyStruct {  \n   static AStruct ^ x = gcnew AStruct;  \n   [returnvalue:Attr(x)] int Test() { return 0; }   // C3104  \n   [returnvalue:Attr] int Test2() { return 0; }   // OK  \n   [returnvalue:Attr(true)] int Test3() { return 0; }   // OK  \n};  \n```  \n  \n## Example  \n  \n### Description  \n When specifying attributes, all unnamed (positional) arguments must precede any named arguments.  \n  \n### Code  \n  \n```  \n// extending_metadata_c.cpp  \n// compile with: /clr /c  \nusing namespace System;  \n[AttributeUsage(AttributeTargets::Class)]  \nref class MyAttr : public Attribute {  \npublic:  \n   MyAttr() {}  \n   MyAttr(int i) {}  \n   property int Priority;  \n   property int Version;  \n};  \n  \n[MyAttr]   \nref class ClassA {};   // No arguments  \n  \n[MyAttr(Priority = 1)]   \nref class ClassB {};   // Named argument  \n  \n[MyAttr(123)]   \nref class ClassC {};   // Positional argument  \n  \n[MyAttr(123, Version = 1)]   \nref class ClassD {};   // Positional and named  \n```  \n  \n## Example  \n  \n### Description  \n Attribute parameters can be one-dimensional arrays of the previous types.  \n  \n### Code  \n  \n```  \n// extending_metadata_d.cpp  \n// compile with: /clr /c  \nusing namespace System;  \n  \n[AttributeUsage(AttributeTargets::Class)]  \npublic ref struct ABC : public Attribute {  \n   ABC(array<int>^){}  \n   array<double> ^ param;  \n};  \n  \n[ABC( gcnew array<int> {1,2,3}, param = gcnew array<double>{2.71, 3.14})]   \nref struct AStruct{};  \n```  \n  \n## See Also  \n [User-Defined Attributes](../windows/user-defined-attributes-cpp-component-extensions.md)"}