{"nodes":[{"pos":[12,39],"content":"__declspec | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"__declspec | Microsoft Docs","pos":[0,27]}]},{"content":"__declspec","pos":[636,646]},{"content":"Microsoft Specific","pos":[650,668]},{"content":"The extended attribute syntax for specifying storage-class information uses the <ph id=\"ph1\">`__declspec`</ph> keyword, which specifies that an instance of a given type is to be stored with a Microsoft-specific storage-class attribute listed below.","pos":[672,902],"source":"The extended attribute syntax for specifying storage-class information uses the `__declspec` keyword, which specifies that an instance of a given type is to be stored with a Microsoft-specific storage-class attribute listed below."},{"content":"Examples of other storage-class modifiers include the <ph id=\"ph1\">`static`</ph> and <ph id=\"ph2\">`extern`</ph> keywords.","pos":[903,988],"source":" Examples of other storage-class modifiers include the `static` and `extern` keywords."},{"content":"However, these keywords are part of the ANSI specification of the C and C++ languages, and as such are not covered by extended attribute syntax.","pos":[989,1133]},{"content":"The extended attribute syntax simplifies and standardizes Microsoft-specific extensions to the C and C++ languages.","pos":[1134,1249]},{"content":"Grammar","pos":[1258,1265]},{"content":"<bpt id=\"p1\">*</bpt>decl-specifier<ept id=\"p1\">*</ept>:","pos":[1269,1286],"source":"*decl-specifier*:"},{"content":"extended-decl-modifier-seq","pos":[1307,1333]},{"content":"<bpt id=\"p1\">*</bpt>extended-decl-modifier-seq<ept id=\"p1\">*</ept>:","pos":[1346,1375],"source":"*extended-decl-modifier-seq*:"},{"content":"<bpt id=\"p1\"> *</bpt>extended-decl-modifier<ept id=\"p1\">*</ept>opt","pos":[1378,1406],"source":" *extended-decl-modifier*opt"},{"content":"extended-decl-modifier extended-decl-modifier-seq","pos":[1414,1463]},{"content":"<bpt id=\"p1\">*</bpt>extended-decl-modifier<ept id=\"p1\">*</ept>:","pos":[1471,1496],"source":"*extended-decl-modifier*:"},{"pos":[1537,1544],"content":"segname"},{"pos":[1589,1596],"content":"segname"},{"pos":[1809,1860],"content":"{<ph id=\"ph1\">`get=`</ph><bpt id=\"p1\">*</bpt>get_func_name<ept id=\"p1\">*</ept>&amp;#124;<ph id=\"ph2\">`,put=`</ph><bpt id=\"p2\">*</bpt>put_func_name<ept id=\"p2\">*</ept>}","source":"{`get=`*get_func_name*&#124;`,put=`*put_func_name*}"},{"pos":[1950,1963],"content":"ComObjectGUID"},{"content":"White space separates the declaration modifier sequence.","pos":[1976,2032]},{"content":"Examples appear in later sections.","pos":[2033,2067]},{"content":"Extended attribute grammar supports these Microsoft-specific storage-class attributes: <bpt id=\"p1\">[</bpt>align<ept id=\"p1\">](../cpp/align-cpp.md)</ept>, <bpt id=\"p2\">[</bpt>allocate<ept id=\"p2\">](../cpp/allocate.md)</ept>, <bpt id=\"p3\">[</bpt>appdomain<ept id=\"p3\">](../cpp/appdomain.md)</ept>, <bpt id=\"p4\">[</bpt>code_seg<ept id=\"p4\">](../cpp/code-seg-declspec.md)</ept>, <bpt id=\"p5\">[</bpt>deprecated<ept id=\"p5\">](../cpp/deprecated-cpp.md)</ept>, <bpt id=\"p6\">[</bpt>dllexport<ept id=\"p6\">](../cpp/dllexport-dllimport.md)</ept>, <bpt id=\"p7\">[</bpt>dllimport<ept id=\"p7\">](../cpp/dllexport-dllimport.md)</ept>, <bpt id=\"p8\">[</bpt>jitintrinsic<ept id=\"p8\">](../cpp/jitintrinsic.md)</ept>, <bpt id=\"p9\">[</bpt>naked<ept id=\"p9\">](../cpp/naked-cpp.md)</ept>, <bpt id=\"p10\">[</bpt>noalias<ept id=\"p10\">](../cpp/noalias.md)</ept>, <bpt id=\"p11\">[</bpt>noinline<ept id=\"p11\">](../cpp/noinline.md)</ept>, <bpt id=\"p12\">[</bpt>noreturn<ept id=\"p12\">](../cpp/noreturn.md)</ept>, <bpt id=\"p13\">[</bpt>nothrow<ept id=\"p13\">](../cpp/nothrow-cpp.md)</ept>, <bpt id=\"p14\">[</bpt>novtable<ept id=\"p14\">](../cpp/novtable.md)</ept>, <bpt id=\"p15\">[</bpt>process<ept id=\"p15\">](../cpp/process.md)</ept>, <bpt id=\"p16\">[</bpt>restrict<ept id=\"p16\">](../cpp/restrict.md)</ept>, <bpt id=\"p17\">[</bpt>safebuffers<ept id=\"p17\">](../cpp/safebuffers.md)</ept>, <bpt id=\"p18\">[</bpt>selectany<ept id=\"p18\">](../cpp/selectany.md)</ept>, and <bpt id=\"p19\">[</bpt>thread<ept id=\"p19\">](../cpp/thread.md)</ept>.","pos":[2074,2821],"source":"Extended attribute grammar supports these Microsoft-specific storage-class attributes: [align](../cpp/align-cpp.md), [allocate](../cpp/allocate.md), [appdomain](../cpp/appdomain.md), [code_seg](../cpp/code-seg-declspec.md), [deprecated](../cpp/deprecated-cpp.md), [dllexport](../cpp/dllexport-dllimport.md), [dllimport](../cpp/dllexport-dllimport.md), [jitintrinsic](../cpp/jitintrinsic.md), [naked](../cpp/naked-cpp.md), [noalias](../cpp/noalias.md), [noinline](../cpp/noinline.md), [noreturn](../cpp/noreturn.md), [nothrow](../cpp/nothrow-cpp.md), [novtable](../cpp/novtable.md), [process](../cpp/process.md), [restrict](../cpp/restrict.md), [safebuffers](../cpp/safebuffers.md), [selectany](../cpp/selectany.md), and [thread](../cpp/thread.md)."},{"content":"It also supports these COM-object attributes: <bpt id=\"p1\">[</bpt>property<ept id=\"p1\">](../cpp/property-cpp.md)</ept> and <bpt id=\"p2\">[</bpt>uuid<ept id=\"p2\">](../cpp/uuid-cpp.md)</ept>.","pos":[2822,2934],"source":" It also supports these COM-object attributes: [property](../cpp/property-cpp.md) and [uuid](../cpp/uuid-cpp.md)."},{"content":"The <ph id=\"ph1\">`code_seg`</ph>, <ph id=\"ph2\">`dllexport`</ph>, <ph id=\"ph3\">`dllimport`</ph>, <ph id=\"ph4\">`naked`</ph>, <ph id=\"ph5\">`noalias`</ph>, <ph id=\"ph6\">`nothrow`</ph>, <ph id=\"ph7\">`property`</ph>, <ph id=\"ph8\">`restrict`</ph>, <ph id=\"ph9\">`selectany`</ph>, <ph id=\"ph10\">`thread`</ph>, and <ph id=\"ph11\">`uuid`</ph> storage-class attributes are properties only of the declaration of the object or function to which they are applied.","pos":[2941,3188],"source":"The `code_seg`, `dllexport`, `dllimport`, `naked`, `noalias`, `nothrow`, `property`, `restrict`, `selectany`, `thread`, and `uuid` storage-class attributes are properties only of the declaration of the object or function to which they are applied."},{"content":"The <ph id=\"ph1\">`thread`</ph> attribute affects data and objects only.","pos":[3189,3242],"source":" The `thread` attribute affects data and objects only."},{"content":"The <ph id=\"ph1\">`naked`</ph> attribute affects functions only.","pos":[3243,3288],"source":" The `naked` attribute affects functions only."},{"content":"The <ph id=\"ph1\">`dllimport`</ph> and <ph id=\"ph2\">`dllexport`</ph> attributes affect functions, data, and objects.","pos":[3289,3368],"source":" The `dllimport` and `dllexport` attributes affect functions, data, and objects."},{"content":"The <ph id=\"ph1\">`property`</ph>, <ph id=\"ph2\">`selectany`</ph>, and <ph id=\"ph3\">`uuid`</ph> attributes affect COM objects.","pos":[3369,3439],"source":" The `property`, `selectany`, and `uuid` attributes affect COM objects."},{"content":"The <ph id=\"ph1\">`__declspec`</ph> keywords should be placed at the beginning of a simple declaration.","pos":[3446,3530],"source":"The `__declspec` keywords should be placed at the beginning of a simple declaration."},{"content":"The compiler ignores, without warning, any <ph id=\"ph1\">`__declspec`</ph> keywords placed after * or &amp; and in front of the variable identifier in a declaration.","pos":[3531,3673],"source":" The compiler ignores, without warning, any `__declspec` keywords placed after * or & and in front of the variable identifier in a declaration."},{"content":"A <ph id=\"ph1\">`__declspec`</ph> attribute specified in the beginning of a user-defined type declaration applies to the variable of that type.","pos":[3680,3804],"source":"A `__declspec` attribute specified in the beginning of a user-defined type declaration applies to the variable of that type."},{"content":"For example:","pos":[3805,3817]},{"content":"In this case, the attribute applies to <ph id=\"ph1\">`varX`</ph>.","pos":[3880,3926],"source":"In this case, the attribute applies to `varX`."},{"content":"A <ph id=\"ph1\">`__declspec`</ph> attribute placed after the <ph id=\"ph2\">`class`</ph> or <ph id=\"ph3\">`struct`</ph> keyword applies to the user-defined type.","pos":[3927,4030],"source":" A `__declspec` attribute placed after the `class` or `struct` keyword applies to the user-defined type."},{"content":"For example:","pos":[4031,4043]},{"pos":[4101,4144],"content":"In this case, the attribute applies to <ph id=\"ph1\">`X`</ph>.","source":"In this case, the attribute applies to `X`."},{"pos":[4151,4248],"content":"The general guideline for using the <ph id=\"ph1\">`__declspec`</ph> attribute for simple declarations is as follows:","source":"The general guideline for using the `__declspec` attribute for simple declarations is as follows:"},{"content":"The <bpt id=\"p1\">*</bpt>decl-specifier-seq<ept id=\"p1\">*</ept> should contain, among other things, a base type (e.g. <ph id=\"ph1\">`int`</ph>, <ph id=\"ph2\">`float`</ph>, a <ph id=\"ph3\">`typedef`</ph>, or a class name), a storage class (e.g. <ph id=\"ph4\">`static`</ph>, <ph id=\"ph5\">`extern`</ph>), or the <ph id=\"ph6\">`__declspec`</ph> extension.","pos":[4313,4512],"source":"The *decl-specifier-seq* should contain, among other things, a base type (e.g. `int`, `float`, a `typedef`, or a class name), a storage class (e.g. `static`, `extern`), or the `__declspec` extension."},{"content":"The <bpt id=\"p1\">*</bpt>init-declarator-list<ept id=\"p1\">*</ept> should contain, among other things, the pointer part of declarations.","pos":[4513,4609],"source":" The *init-declarator-list* should contain, among other things, the pointer part of declarations."},{"content":"For example:","pos":[4610,4622]},{"content":"The following code declares an integer thread local variable and initializes it with a value:","pos":[4914,5007]},{"content":"END Microsoft Specific","pos":[5108,5130]},{"content":"See Also","pos":[5139,5147]},{"content":"Keywords","pos":[5152,5160]},{"content":"C Extended Storage-Class Attributes","pos":[5191,5226]}],"content":"---\ntitle: \"__declspec | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"__declspec_cpp\"\n  - \"__declspec\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"__declspec keyword [C++]\"\nms.assetid: 832db681-e8e1-41ca-b78c-cd9d265cdb87\ncaps.latest.revision: 12\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# __declspec\n## Microsoft Specific  \n The extended attribute syntax for specifying storage-class information uses the `__declspec` keyword, which specifies that an instance of a given type is to be stored with a Microsoft-specific storage-class attribute listed below. Examples of other storage-class modifiers include the `static` and `extern` keywords. However, these keywords are part of the ANSI specification of the C and C++ languages, and as such are not covered by extended attribute syntax. The extended attribute syntax simplifies and standardizes Microsoft-specific extensions to the C and C++ languages.  \n  \n## Grammar  \n *decl-specifier*:  \n `__declspec (`  *extended-decl-modifier-seq*  `)`  \n  \n *extended-decl-modifier-seq*:  \n *extended-decl-modifier*opt  \n  \n *extended-decl-modifier extended-decl-modifier-seq*  \n  \n *extended-decl-modifier*:  \n `align(` *#* `)`  \n  \n `allocate(\"` *segname* `\")`  \n  \n `appdomain`  \n  \n `code_seg(\"` *segname* `\")`  \n  \n `deprecated`  \n  \n `dllimport`  \n  \n `dllexport`  \n  \n `jitintrinsic`  \n  \n `naked`  \n  \n `noalias`  \n  \n `noinline`  \n  \n `noreturn`  \n  \n `nothrow`  \n  \n `novtable`  \n  \n `process`  \n  \n `property(`{`get=`*get_func_name*&#124;`,put=`*put_func_name*}`)`  \n  \n `restrict`  \n  \n `safebuffers`  \n  \n `selectany`  \n  \n `thread`  \n  \n `uuid(\"` *ComObjectGUID* `\")`  \n  \n White space separates the declaration modifier sequence. Examples appear in later sections.  \n  \n Extended attribute grammar supports these Microsoft-specific storage-class attributes: [align](../cpp/align-cpp.md), [allocate](../cpp/allocate.md), [appdomain](../cpp/appdomain.md), [code_seg](../cpp/code-seg-declspec.md), [deprecated](../cpp/deprecated-cpp.md), [dllexport](../cpp/dllexport-dllimport.md), [dllimport](../cpp/dllexport-dllimport.md), [jitintrinsic](../cpp/jitintrinsic.md), [naked](../cpp/naked-cpp.md), [noalias](../cpp/noalias.md), [noinline](../cpp/noinline.md), [noreturn](../cpp/noreturn.md), [nothrow](../cpp/nothrow-cpp.md), [novtable](../cpp/novtable.md), [process](../cpp/process.md), [restrict](../cpp/restrict.md), [safebuffers](../cpp/safebuffers.md), [selectany](../cpp/selectany.md), and [thread](../cpp/thread.md). It also supports these COM-object attributes: [property](../cpp/property-cpp.md) and [uuid](../cpp/uuid-cpp.md).  \n  \n The `code_seg`, `dllexport`, `dllimport`, `naked`, `noalias`, `nothrow`, `property`, `restrict`, `selectany`, `thread`, and `uuid` storage-class attributes are properties only of the declaration of the object or function to which they are applied. The `thread` attribute affects data and objects only. The `naked` attribute affects functions only. The `dllimport` and `dllexport` attributes affect functions, data, and objects. The `property`, `selectany`, and `uuid` attributes affect COM objects.  \n  \n The `__declspec` keywords should be placed at the beginning of a simple declaration. The compiler ignores, without warning, any `__declspec` keywords placed after * or & and in front of the variable identifier in a declaration.  \n  \n A `__declspec` attribute specified in the beginning of a user-defined type declaration applies to the variable of that type. For example:  \n  \n```  \n__declspec(dllimport) class X {} varX;  \n```  \n  \n In this case, the attribute applies to `varX`. A `__declspec` attribute placed after the `class` or `struct` keyword applies to the user-defined type. For example:  \n  \n```  \nclass __declspec(dllimport) X {};  \n```  \n  \n In this case, the attribute applies to `X`.  \n  \n The general guideline for using the `__declspec` attribute for simple declarations is as follows:  \n  \n```  \n  \ndecl-specifier-seq  \ndeclarator-list;  \n```  \n  \n The *decl-specifier-seq* should contain, among other things, a base type (e.g. `int`, `float`, a `typedef`, or a class name), a storage class (e.g. `static`, `extern`), or the `__declspec` extension. The *init-declarator-list* should contain, among other things, the pointer part of declarations. For example:  \n  \n```  \n__declspec(selectany) int * pi1 = 0;   //OK, selectany & int both part of decl-specifier  \nint __declspec(selectany) * pi2 = 0;   //OK, selectany & int both part of decl-specifier  \nint * __declspec(selectany) pi3 = 0;   //ERROR, selectany is not part of a declarator  \n```  \n  \n The following code declares an integer thread local variable and initializes it with a value:  \n  \n```  \n// Example of the __declspec keyword  \n__declspec( thread ) int tls_i = 1;  \n```  \n  \n## END Microsoft Specific  \n  \n## See Also  \n [Keywords](../cpp/keywords-cpp.md)   \n [C Extended Storage-Class Attributes](../c-language/c-extended-storage-class-attributes.md)"}