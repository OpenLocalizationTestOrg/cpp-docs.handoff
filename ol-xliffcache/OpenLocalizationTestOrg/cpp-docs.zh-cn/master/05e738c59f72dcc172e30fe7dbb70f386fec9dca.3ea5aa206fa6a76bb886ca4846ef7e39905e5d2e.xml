{"nodes":[{"pos":[12,59],"content":"CMFCPropertyGridProperty Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMFCPropertyGridProperty Class | Microsoft Docs","pos":[0,47]}]},{"content":"CMFCPropertyGridProperty Class","pos":[646,676]},{"pos":[677,763],"content":"A <ph id=\"ph1\">`CMFCPropertyGridProperty`</ph> object represents a list item in a property list control.","source":"A `CMFCPropertyGridProperty` object represents a list item in a property list control."},{"content":"Syntax","pos":[772,778]},{"content":"Members","pos":[852,859]},{"content":"Public Constructors","pos":[869,888]},{"content":"Name","pos":[895,899]},{"content":"Description","pos":[900,911]},{"content":"CMFCPropertyGridProperty::CMFCPropertyGridProperty","pos":[950,1000]},{"pos":[1055,1102],"content":"Constructs a <ph id=\"ph1\">`CMFCPropertyGridProperty`</ph> object.","source":"Constructs a `CMFCPropertyGridProperty` object."},{"content":"Destructor.","pos":[1161,1172]},{"content":"Public Methods","pos":[1183,1197]},{"content":"Name","pos":[1204,1208]},{"content":"Description","pos":[1209,1220]},{"content":"CMFCPropertyGridProperty::AddOption","pos":[1259,1294]},{"content":"Adds a new list item to a property list control.","pos":[1334,1382]},{"content":"CMFCPropertyGridProperty::AddSubItem","pos":[1388,1424]},{"content":"Adds a child item to a property.","pos":[1465,1497]},{"content":"CMFCPropertyGridProperty::AdjustButtonRect","pos":[1503,1545]},{"content":"Called by the parent property list control to tell a property to resize the bounding rectangle of an embedded button.","pos":[1592,1709]},{"content":"CMFCPropertyGridProperty::AdjustInPlaceEditRect","pos":[1715,1762]},{"content":"Retrieves the boundaries of the text box and optional spin button control that are used to set a property value.","pos":[1814,1926]},{"content":"CMFCPropertyGridProperty::AllowEdit","pos":[1932,1967]},{"content":"Makes a property either editable or read-only.","pos":[2007,2053]},{"content":"CMFCPropertyGridProperty::CreateInPlaceEdit","pos":[2059,2102]},{"content":"Called by the framework to create an editable control for a property.","pos":[2150,2219]},{"content":"CMFCPropertyGridProperty::CreateSpinControl","pos":[2225,2268]},{"content":"Called by the framework to create an editable spin button control.","pos":[2316,2382]},{"content":"CMFCPropertyGridProperty::Enable","pos":[2388,2420]},{"content":"Enables or disables a property.","pos":[2457,2488]},{"content":"CMFCPropertyGridProperty::EnableSpinControl","pos":[2494,2537]},{"content":"Enables or disables a spin button control that is used to modify a property value.","pos":[2585,2667]},{"content":"CMFCPropertyGridProperty::Expand","pos":[2673,2705]},{"content":"Expands or collapses a property that contains sub-properties.","pos":[2742,2803]},{"content":"CMFCPropertyGridProperty::FormatProperty","pos":[2809,2849]},{"content":"Formats the text representation of a property value.","pos":[2894,2946]},{"content":"CMFCPropertyGridProperty::GetData","pos":[2952,2985]},{"pos":[3023,3084],"content":"Retrieves a <ph id=\"ph1\">`DWORD`</ph> value that is associated with a property.","source":"Retrieves a `DWORD` value that is associated with a property."},{"content":"CMFCPropertyGridProperty::GetDescription","pos":[3090,3130]},{"content":"Retrieves a property description.","pos":[3175,3208]},{"content":"CMFCPropertyGridProperty::GetExpandedSubItems","pos":[3214,3259]},{"content":"Retrieves the number of expanded sub-items.","pos":[3309,3352]},{"content":"CMFCPropertyGridProperty::GetHierarchyLevel","pos":[3358,3401]},{"content":"Retrieves the zero-based index of the property's hierarchy level.","pos":[3449,3514]},{"content":"CMFCPropertyGridProperty::GetName","pos":[3520,3553]},{"content":"Retrieves the name of the property.","pos":[3591,3626]},{"content":"CMFCPropertyGridProperty::GetNameTooltip","pos":[3632,3672]},{"content":"Called by the framework to display the name of the property in a tooltip.","pos":[3717,3790]},{"content":"CMFCPropertyGridProperty::GetOption","pos":[3796,3831]},{"content":"Retrieves the text of the option that is specified by an index.","pos":[3871,3934]},{"content":"CMFCPropertyGridProperty::GetOptionCount","pos":[3940,3980]},{"content":"Retrieves the number of options that belong to a property.","pos":[4025,4083]},{"content":"CMFCPropertyGridProperty::GetOriginalValue","pos":[4089,4131]},{"content":"Retrieves the initial value of the current property.","pos":[4178,4230]},{"content":"CMFCPropertyGridProperty::GetParent","pos":[4236,4271]},{"content":"Retrieves a pointer to a parent property.","pos":[4311,4352]},{"content":"CMFCPropertyGridProperty::GetRect","pos":[4358,4391]},{"content":"Retrieves the bounding rectangle of a property.","pos":[4429,4476]},{"content":"CMFCPropertyGridProperty::GetSubItem","pos":[4482,4518]},{"content":"Retrieves a sub-property identified by a zero-based index.","pos":[4559,4617]},{"content":"CMFCPropertyGridProperty::GetSubItemsCount","pos":[4623,4665]},{"content":"Retrieves the number of sub-items.","pos":[4712,4746]},{"pos":[4792,4952],"content":"Used by the framework to obtain a pointer to the <bpt id=\"p1\">[</bpt>CRuntimeClass<ept id=\"p1\">](../../mfc/reference/cruntimeclass-structure.md)</ept> object that is associated with this class type.","source":"Used by the framework to obtain a pointer to the [CRuntimeClass](../../mfc/reference/cruntimeclass-structure.md) object that is associated with this class type."},{"content":"CMFCPropertyGridProperty::GetValue","pos":[4958,4992]},{"content":"Retrieves a property value.","pos":[5031,5058]},{"content":"CMFCPropertyGridProperty::GetValueTooltip","pos":[5064,5105]},{"content":"Called by the framework to retrieve the text representation of the property value that is then displayed in a tooltip.","pos":[5151,5269]},{"content":"CMFCPropertyGridProperty::HitTest","pos":[5275,5308]},{"content":"Points to the property object that corresponds to the property list item that corresponds to a point.","pos":[5346,5447]},{"content":"CMFCPropertyGridProperty::IsAllowEdit","pos":[5453,5490]},{"content":"Indicates whether a property is editable.","pos":[5532,5573]},{"content":"CMFCPropertyGridProperty::IsEnabled","pos":[5579,5614]},{"content":"Indicates whether a property is enabled or disabled.","pos":[5654,5706]},{"content":"CMFCPropertyGridProperty::IsExpanded","pos":[5712,5748]},{"content":"Indicates whether a property is expanded or collapsed.","pos":[5789,5843]},{"content":"CMFCPropertyGridProperty::IsGroup","pos":[5849,5882]},{"content":"Indicates whether the current property represents a group.","pos":[5920,5978]},{"content":"CMFCPropertyGridProperty::IsInPlaceEditing","pos":[5984,6026]},{"content":"Indicates whether the current property is editable.","pos":[6073,6124]},{"content":"CMFCPropertyGridProperty::IsModified","pos":[6130,6166]},{"content":"Indicates whether the current property is modified.","pos":[6207,6258]},{"content":"CMFCPropertyGridProperty::IsParentExpanded","pos":[6264,6306]},{"content":"Indicates whether the parents of the current property are expanded.","pos":[6353,6420]},{"content":"CMFCPropertyGridProperty::IsSelected","pos":[6426,6462]},{"content":"Indicates whether the current property is selected.","pos":[6503,6554]},{"content":"CMFCPropertyGridProperty::IsVisible","pos":[6560,6595]},{"content":"Indicates whether the current property is visible.","pos":[6635,6685]},{"content":"CMFCPropertyGridProperty::OnClickButton","pos":[6691,6730]},{"content":"Called by the framework when the user clicks a button that is contained in a property.","pos":[6774,6860]},{"content":"CMFCPropertyGridProperty::OnClickName","pos":[6866,6903]},{"content":"Called by a parent property list control when a user clicks the name field of a property.","pos":[6945,7034]},{"content":"CMFCPropertyGridProperty::OnClickValue","pos":[7040,7078]},{"content":"Called by a parent property list control when a user clicks the value field of a property.","pos":[7121,7211]},{"content":"CMFCPropertyGridProperty::OnCloseCombo","pos":[7217,7255]},{"content":"Called by the framework when a combo box that is contained in a property is closed.","pos":[7298,7381]},{"content":"CMFCPropertyGridProperty::OnDblClk","pos":[7387,7421]},{"content":"Called by the framework when the user double clicks a property.","pos":[7460,7523]},{"content":"CMFCPropertyGridProperty::OnDrawButton","pos":[7529,7567]},{"content":"Called by the framework to draw a button that is contained in a property.","pos":[7610,7683]},{"content":"CMFCPropertyGridProperty::OnDrawDescription","pos":[7689,7732]},{"content":"Called by the framework to display the property description.","pos":[7780,7840]},{"content":"CMFCPropertyGridProperty::OnDrawExpandBox","pos":[7846,7887]},{"content":"Called by the framework to draw an expand box control near a property that contains sub-properties.","pos":[7933,8032]},{"content":"CMFCPropertyGridProperty::OnDrawName","pos":[8038,8074]},{"content":"Called by the framework to display the property name.","pos":[8115,8168]},{"content":"CMFCPropertyGridProperty::OnDrawValue","pos":[8174,8211]},{"content":"Called by the framework to display the property value.","pos":[8253,8307]},{"content":"CMFCPropertyGridProperty::OnEdit","pos":[8313,8345]},{"content":"Called by the framework when the user is about to modify a property value.","pos":[8382,8456]},{"content":"CMFCPropertyGridProperty::OnEndEdit","pos":[8462,8497]},{"content":"Called by the framework when the user is finished modifying a property value.","pos":[8537,8614]},{"content":"CMFCPropertyGridProperty::OnKillSelection","pos":[8620,8661]},{"content":"CMFCPropertyGridProperty::OnPosSizeChanged","pos":[8713,8755]},{"content":"CMFCPropertyGridProperty::OnRClickName","pos":[8808,8846]},{"content":"Called by the framework when the user clicks the right mouse button in the property name area.","pos":[8889,8983]},{"content":"CMFCPropertyGridProperty::OnRClickValue","pos":[8989,9028]},{"content":"Called by the framework when the user clicks the right mouse button in the property value area.","pos":[9072,9167]},{"content":"CMFCPropertyGridProperty::OnSelectCombo","pos":[9173,9212]},{"content":"Called by the framework when the user selects an item from the editable combo box.","pos":[9256,9338]},{"content":"CMFCPropertyGridProperty::OnSetCursor","pos":[9344,9381]},{"content":"Called by the framework when the mouse pointer moves to a property item.","pos":[9423,9495]},{"content":"CMFCPropertyGridProperty::OnSetSelection","pos":[9501,9541]},{"content":"CMFCPropertyGridProperty::OnUpdateValue","pos":[9592,9631]},{"content":"Called by the framework when the value of an editable property has changed.","pos":[9675,9750]},{"content":"CMFCPropertyGridProperty::PushChar","pos":[9756,9790]},{"content":"Called from the property list control when the property is selected and the user enters a new character.","pos":[9829,9933]},{"content":"CMFCPropertyGridProperty::Redraw","pos":[9939,9971]},{"content":"Redraws the property.","pos":[10008,10029]},{"content":"CMFCPropertyGridProperty::RemoveAllOptions","pos":[10035,10077]},{"content":"Removes all options (items) from a property.","pos":[10124,10168]},{"content":"CMFCPropertyGridProperty::RemoveSubItem","pos":[10174,10213]},{"content":"Removes the specified sub-item.","pos":[10257,10288]},{"content":"CMFCPropertyGridProperty::ResetOriginalValue","pos":[10294,10338]},{"content":"Restores the original value of an edited property.","pos":[10387,10437]},{"content":"CMFCPropertyGridProperty::SetData","pos":[10443,10476]},{"pos":[10514,10557],"content":"Associates a <ph id=\"ph1\">`DWORD`</ph> value with a property.","source":"Associates a `DWORD` value with a property."},{"content":"CMFCPropertyGridProperty::SetDescription","pos":[10563,10603]},{"content":"Specifies the text that describes the current property.","pos":[10648,10703]},{"content":"CMFCPropertyGridProperty::SetName","pos":[10709,10742]},{"content":"Sets the name of a property.","pos":[10780,10808]},{"content":"CMFCPropertyGridProperty::SetOriginalValue","pos":[10814,10856]},{"content":"Sets the original value of an editable property.","pos":[10903,10951]},{"content":"CMFCPropertyGridProperty::SetValue","pos":[10957,10991]},{"content":"Sets the value of a property grid property.","pos":[11030,11073]},{"content":"CMFCPropertyGridProperty::Show","pos":[11079,11109]},{"content":"Shows or hides a property.","pos":[11144,11170]},{"content":"Protected Methods","pos":[11181,11198]},{"content":"Name","pos":[11205,11209]},{"content":"Description","pos":[11210,11221]},{"content":"CMFCPropertyGridProperty::CreateCombo","pos":[11260,11297]},{"content":"Called by the framework to add a combo box to a property.","pos":[11339,11396]},{"content":"CMFCPropertyGridProperty::HasButton","pos":[11402,11437]},{"content":"Indicates whether a property contains a button.","pos":[11477,11524]},{"content":"CMFCPropertyGridProperty::Init","pos":[11530,11560]},{"content":"Called by the framework to initialize a property object.","pos":[11595,11651]},{"content":"CMFCPropertyGridProperty::IsSubItem","pos":[11657,11692]},{"content":"Indicates whether the specified property is a sub-item of the current property.","pos":[11732,11811]},{"content":"CMFCPropertyGridProperty::IsValueChanged","pos":[11817,11857]},{"content":"Indicates whether the value of the current property has changed.","pos":[11902,11966]},{"content":"CMFCPropertyGridProperty::OnCtlColor","pos":[11972,12008]},{"content":"Called by the framework when it must retrieve a brush to fill the background color of a property.","pos":[12049,12146]},{"content":"CMFCPropertyGridProperty::OnDestroyWindow","pos":[12152,12193]},{"content":"Called by the framework when a property is destroyed or when editing is finished.","pos":[12239,12320]},{"content":"CMFCPropertyGridProperty::OnKillFocus","pos":[12326,12363]},{"content":"Called by the framework when the property loses the input focus.","pos":[12405,12469]},{"content":"Data Members","pos":[12480,12492]},{"content":"Name","pos":[12499,12503]},{"content":"Description","pos":[12504,12515]},{"content":"CMFCPropertyGridProperty::m_strFormatDouble","pos":[12554,12597]},{"content":"Format string for a value of type double.","pos":[12645,12686]},{"content":"CMFCPropertyGridProperty::m_strFormatFloat","pos":[12692,12734]},{"content":"Format string for a value of type float.","pos":[12781,12821]},{"content":"CMFCPropertyGridProperty::m_strFormatLong","pos":[12827,12868]},{"content":"Format string for a value of type long.","pos":[12914,12953]},{"content":"CMFCPropertyGridProperty::m_strFormatShort","pos":[12959,13001]},{"content":"Format string for a value of type short.","pos":[13048,13088]},{"content":"Remarks","pos":[13098,13105]},{"content":"Use a <ph id=\"ph1\">`CMFCPropertyGridProperty`</ph> object to represent a property, which you then add to a property list control.","pos":[13109,13220],"source":"Use a `CMFCPropertyGridProperty` object to represent a property, which you then add to a property list control."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CMFCPropertyGridCtrl Class<ept id=\"p1\">](../../mfc/reference/cmfcpropertygridctrl-class.md)</ept>.","pos":[13221,13327],"source":" For more information, see [CMFCPropertyGridCtrl Class](../../mfc/reference/cmfcpropertygridctrl-class.md)."},{"content":"A property object can represent data types such as strings, dates, and Boolean or integer values.","pos":[13334,13431]},{"content":"It can contain child properties, or it can contain a control such as a combo box or a button control.","pos":[13432,13533]},{"content":"Example","pos":[13542,13549]},{"content":"The following example demonstrates how to construct a <ph id=\"ph1\">`CMFCPropertyGridProperty`</ph> object.","pos":[13553,13641],"source":"The following example demonstrates how to construct a `CMFCPropertyGridProperty` object."},{"content":"The example also demonstrates how to use various methods in the <ph id=\"ph1\">`CMFCPropertyGridProperty`</ph> class to add an option, add a sub-item, enable a property, and show a property.","pos":[13642,13812],"source":" The example also demonstrates how to use various methods in the `CMFCPropertyGridProperty` class to add an option, add a sub-item, enable a property, and show a property."},{"content":"This example is part of the <bpt id=\"p1\">[</bpt>New Controls sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[13813,13892],"source":" This example is part of the [New Controls sample](../../visual-cpp-samples.md)."},{"pos":[13910,13932],"content":"NVC_MFC_NewControls#27"},{"content":"Inheritance Hierarchy","pos":[14017,14038]},{"content":"CObject","pos":[14043,14050]},{"content":"CMFCPropertyGridProperty","pos":[14097,14121]},{"content":"Requirements","pos":[14186,14198]},{"pos":[14202,14235],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxpropertygridctrl.h","source":"**Header:** afxpropertygridctrl.h"},{"pos":[14297,14332],"content":"CMFCPropertyGridProperty::AddOption"},{"content":"Adds a new list item to a property list control.","pos":[14336,14384]},{"content":"Parameters","pos":[14481,14491]},{"content":"[in]","pos":[14495,14499]},{"content":"The list item (option) to add.","pos":[14516,14546]},{"content":"[in]","pos":[14553,14557]},{"content":"to add the list item only if it does not already exist; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","pos":[14584,14659],"source":" to add the list item only if it does not already exist; otherwise, `FALSE`."},{"content":"The default value is <ph id=\"ph1\">`TRUE`</ph>.","pos":[14660,14688],"source":" The default value is `TRUE`."},{"content":"Return Value","pos":[14698,14710]},{"content":", which means that the list item is added.","pos":[14720,14762]},{"content":"Otherwise, <ph id=\"ph1\">`FALSE`</ph>, which means that the list item is not added because the <ph id=\"ph2\">`bInsertUnique`</ph> parameter is <ph id=\"ph3\">`TRUE`</ph> and the list item specified by the <ph id=\"ph4\">`lpszOption`</ph> parameter already exists.","pos":[14763,14948],"source":" Otherwise, `FALSE`, which means that the list item is not added because the `bInsertUnique` parameter is `TRUE` and the list item specified by the `lpszOption` parameter already exists."},{"content":"Remarks","pos":[14958,14965]},{"pos":[15028,15064],"content":"CMFCPropertyGridProperty::AddSubItem"},{"content":"Adds a child item to a property.","pos":[15068,15100]},{"content":"Parameters","pos":[15175,15185]},{"content":"[in]","pos":[15189,15193]},{"content":"Pointer to a property to add.","pos":[15205,15234]},{"content":"Return Value","pos":[15244,15256]},{"content":"if the specified property is successfully added as a child property.","pos":[15267,15335]},{"content":"if the property is not added because it already occurs in the parent property.","pos":[15344,15422]},{"content":"Remarks","pos":[15432,15439]},{"content":"Use this method to create a hierarchical list of parent and child properties.","pos":[15443,15520]},{"content":"After a child property is added, the parent property automatically displays an expand box control that is designated by a plus sign (+).","pos":[15521,15657]},{"content":"When the user clicks the plus sign, the parent property expands and displays any child property items.","pos":[15658,15760]},{"pos":[15829,15871],"content":"CMFCPropertyGridProperty::AdjustButtonRect"},{"content":"Called by the parent property list control to tell a property to resize the bounding rectangle of an embedded button.","pos":[15875,15992]},{"content":"Remarks","pos":[16050,16057]},{"content":"By default, this method:","pos":[16061,16085]},{"content":"Adjusts the width of the button equal to the height of the button plus 3 pixels.","pos":[16095,16175]},{"content":"Moves the bounding rectangle of the button to the right edge of the property","pos":[16185,16261]},{"content":"Shifts the button 1 pixel below the top edge of the property.","pos":[16271,16332]},{"pos":[16406,16453],"content":"CMFCPropertyGridProperty::AdjustInPlaceEditRect"},{"content":"Retrieves the boundaries of the text box and optional spin button control that are used to set a property value.","pos":[16457,16569]},{"content":"Parameters","pos":[16675,16685]},{"content":"[out]","pos":[16689,16694]},{"content":"When this method returns, a rectangle that specifies the boundaries of the text box for the property value.","pos":[16709,16816]},{"content":"[out]","pos":[16823,16828]},{"content":"When this method returns, a rectangle that specifies the boundaries of the spin button control for the property value.","pos":[16843,16961]},{"content":"Or, if the property does not support a spin button, an empty rectangle.","pos":[16962,17033]},{"content":"Remarks","pos":[17043,17050]},{"content":"The value area of a property consists of a text box and possibly an <bpt id=\"p1\">*</bpt>option button<ept id=\"p1\">*</ept>, such as a spin button control.","pos":[17054,17169],"source":"The value area of a property consists of a text box and possibly an *option button*, such as a spin button control."},{"content":"This method calculates the dimensions of the text box and option button and then returns those values in the specified parameters.","pos":[17170,17300]},{"pos":[17362,17397],"content":"CMFCPropertyGridProperty::AllowEdit"},{"content":"Makes a property either editable or read-only.","pos":[17401,17447]},{"content":"Parameters","pos":[17506,17516]},{"content":"[in]","pos":[17520,17524]},{"content":"to make the property editable; <ph id=\"ph1\">`FALSE`</ph> to make the property read-only.","pos":[17544,17614],"source":" to make the property editable; `FALSE` to make the property read-only."},{"content":"The default value is <ph id=\"ph1\">`TRUE`</ph>.","pos":[17615,17643],"source":" The default value is `TRUE`."},{"content":"Remarks","pos":[17653,17660]},{"pos":[17737,17787],"content":"CMFCPropertyGridProperty::CMFCPropertyGridProperty"},{"pos":[17791,17838],"content":"Constructs a <ph id=\"ph1\">`CMFCPropertyGridProperty`</ph> object.","source":"Constructs a `CMFCPropertyGridProperty` object."},{"content":"Parameters","pos":[18233,18243]},{"content":"[in]","pos":[18247,18251]},{"content":"The group name.","pos":[18270,18285]},{"content":"A <bpt id=\"p1\">*</bpt>group<ept id=\"p1\">*</ept> is a collection of related properties in a property grid control.","pos":[18286,18361],"source":" A *group* is a collection of related properties in a property grid control."},{"content":"If the control is displayed hierarchically, the <bpt id=\"p1\">*</bpt>group name<ept id=\"p1\">*</ept> is displayed as a category title in the row above the group.","pos":[18362,18483],"source":" If the control is displayed hierarchically, the *group name* is displayed as a category title in the row above the group."},{"content":"[in]","pos":[18490,18494]},{"content":"Application-specific data, such as an integer or a pointer to other data that is associated with the property.","pos":[18507,18617]},{"content":"The default value is 0.","pos":[18618,18641]},{"content":"[in]","pos":[18648,18652]},{"content":"The name of the property.","pos":[18666,18691]},{"content":"[in]","pos":[18698,18702]},{"content":"The property value.","pos":[18717,18736]},{"content":"[in]","pos":[18743,18747]},{"content":"The property description.","pos":[18763,18788]},{"content":"The default value is <ph id=\"ph1\">`NULL`</ph>.","pos":[18789,18817],"source":" The default value is `NULL`."},{"content":"[in]","pos":[18824,18828]},{"content":"The edit mask, if the property is a masked edit control.","pos":[18847,18903]},{"content":"The default value is <ph id=\"ph1\">`NULL`</ph>.","pos":[18904,18932],"source":" The default value is `NULL`."},{"content":"[in]","pos":[18939,18943]},{"content":"The edit template, if the property is a masked edit control.","pos":[18966,19026]},{"content":"The default value is <ph id=\"ph1\">`NULL`</ph>.","pos":[19027,19055],"source":" The default value is `NULL`."},{"content":"[in]","pos":[19062,19066]},{"content":"A list of valid characters, if the property is a masked edit control.","pos":[19087,19156]},{"content":"The default value is <ph id=\"ph1\">`NULL`</ph>.","pos":[19157,19185],"source":" The default value is `NULL`."},{"content":"[in]","pos":[19192,19196]},{"content":"if the property represents a list of values; <ph id=\"ph1\">`FALSE`</ph> if the property represents a single value.","pos":[19222,19317],"source":" if the property represents a list of values; `FALSE` if the property represents a single value."},{"content":"The default value is <ph id=\"ph1\">`FALSE`</ph>.","pos":[19318,19347],"source":" The default value is `FALSE`."},{"content":"Remarks","pos":[19357,19364]},{"pos":[19428,19465],"content":"CMFCPropertyGridProperty::CreateCombo"},{"content":"Called by the framework to add a combo box to a property.","pos":[19469,19526]},{"content":"Parameters","pos":[19624,19634]},{"content":"[in]","pos":[19638,19642]},{"content":"Pointer to the parent window of the combo box.","pos":[19659,19705]},{"content":"[in]","pos":[19712,19716]},{"content":"The bounding rectangle of the combo box.","pos":[19727,19767]},{"content":"Return Value","pos":[19777,19789]},{"pos":[19793,19869],"content":"Pointer to a new <bpt id=\"p1\">[</bpt>CComboBox<ept id=\"p1\">](../../mfc/reference/ccombobox-class.md)</ept> object.","source":"Pointer to a new [CComboBox](../../mfc/reference/ccombobox-class.md) object."},{"content":"Remarks","pos":[19879,19886]},{"pos":[19956,19999],"content":"CMFCPropertyGridProperty::CreateInPlaceEdit"},{"content":"Called by the framework to create an editable control for a property.","pos":[20003,20072]},{"content":"Parameters","pos":[20179,20189]},{"content":"[in]","pos":[20193,20197]},{"content":"The bounding rectangle of the editable control.","pos":[20212,20259]},{"content":"[in]","pos":[20266,20270]},{"content":"to use the default property format to set the text of the editable control; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","pos":[20298,20393],"source":" to use the default property format to set the text of the editable control; otherwise, `FALSE`."},{"content":"Return Value","pos":[20403,20415]},{"pos":[20419,20496],"content":"A pointer to the editable control if this method succeeds; otherwise, <ph id=\"ph1\">`NULL`</ph>.","source":"A pointer to the editable control if this method succeeds; otherwise, `NULL`."},{"content":"Remarks","pos":[20506,20513]},{"content":"This method uses the values of the <ph id=\"ph1\">`varValue`</ph>, <ph id=\"ph2\">`lpszEditMask`</ph>, <ph id=\"ph3\">`lpszEditTemplate`</ph>, and <ph id=\"ph4\">`lpszValidChars`</ph> parameters that are specified in the <bpt id=\"p1\">[</bpt>CMFCPropertyGridProperty<ept id=\"p1\">](../../mfc/reference/cmfcpropertygridproperty-class.md)</ept> class constructor.","pos":[20517,20758],"source":"This method uses the values of the `varValue`, `lpszEditMask`, `lpszEditTemplate`, and `lpszValidChars` parameters that are specified in the [CMFCPropertyGridProperty](../../mfc/reference/cmfcpropertygridproperty-class.md) class constructor."},{"content":"By default, this method supports the <ph id=\"ph1\">`varValue`</ph> variant types.","pos":[20759,20821],"source":" By default, this method supports the `varValue` variant types."},{"content":"This includes <ph id=\"ph1\">`VT_BSTR`</ph>, <ph id=\"ph2\">`VT_R4`</ph>, <ph id=\"ph3\">`VT_R8`</ph>, <ph id=\"ph4\">`VT_UI1`</ph>, <ph id=\"ph5\">`VT_I2`</ph>, <ph id=\"ph6\">`VT_INT`</ph>, <ph id=\"ph7\">`VT_UINT`</ph>, <ph id=\"ph8\">`VT_I4`</ph>, <ph id=\"ph9\">`VT_UI2`</ph>, <ph id=\"ph10\">`VT_UI4`</ph>, and <ph id=\"ph11\">`VT_BOOL`</ph>.","pos":[20822,20948],"source":" This includes `VT_BSTR`, `VT_R4`, `VT_R8`, `VT_UI1`, `VT_I2`, `VT_INT`, `VT_UINT`, `VT_I4`, `VT_UI2`, `VT_UI4`, and `VT_BOOL`."},{"pos":[20955,21227],"content":"This method creates a <bpt id=\"p1\">[</bpt>CMFCMaskedEdit<ept id=\"p1\">](../../mfc/reference/cmfcmaskededit-class.md)</ept> control if one or more of the <ph id=\"ph1\">`lpszEditMask`</ph>, <ph id=\"ph2\">`lpszEditTemplate`</ph>, or <ph id=\"ph3\">`lpszValidChars`</ph> parameters are specified; otherwise, it creates a <bpt id=\"p2\">[</bpt>CEdit<ept id=\"p2\">](../../mfc/reference/cedit-class.md)</ept> control.","source":"This method creates a [CMFCMaskedEdit](../../mfc/reference/cmfcmaskededit-class.md) control if one or more of the `lpszEditMask`, `lpszEditTemplate`, or `lpszValidChars` parameters are specified; otherwise, it creates a [CEdit](../../mfc/reference/cedit-class.md) control."},{"pos":[21297,21340],"content":"CMFCPropertyGridProperty::CreateSpinControl"},{"content":"Called by the framework to create an editable spin button control.","pos":[21344,21410]},{"content":"Parameters","pos":[21495,21505]},{"content":"[in]","pos":[21509,21513]},{"content":"A rectangle that defines where the editable spin button control is created.","pos":[21528,21603]},{"content":"Return Value","pos":[21613,21625]},{"pos":[21629,21827],"content":"A pointer to a new <bpt id=\"p1\">[</bpt>CMFCSpinButtonCtrl<ept id=\"p1\">](../../mfc/reference/cmfcspinbuttonctrl-class.md)</ept> object that is cast as a pointer to a <bpt id=\"p2\">[</bpt>CSpinButtonCtrl<ept id=\"p2\">](../../mfc/reference/cspinbuttonctrl-class.md)</ept> object.","source":"A pointer to a new [CMFCSpinButtonCtrl](../../mfc/reference/cmfcspinbuttonctrl-class.md) object that is cast as a pointer to a [CSpinButtonCtrl](../../mfc/reference/cspinbuttonctrl-class.md) object."},{"content":"Remarks","pos":[21837,21844]},{"pos":[21848,22033],"content":"Call the <bpt id=\"p1\">[</bpt>CMFCPropertyGridProperty::EnableSpinControl<ept id=\"p1\">](#cmfcpropertygridproperty__enablespincontrol)</ept> method to display an editable spin button control at the right edge of the property.","source":"Call the [CMFCPropertyGridProperty::EnableSpinControl](#cmfcpropertygridproperty__enablespincontrol) method to display an editable spin button control at the right edge of the property."},{"pos":[22092,22124],"content":"CMFCPropertyGridProperty::Enable"},{"content":"Enables or disables a property.","pos":[22128,22159]},{"content":"Parameters","pos":[22216,22226]},{"content":"[in]","pos":[22230,22234]},{"content":"to enable the property; <ph id=\"ph1\">`FALSE`</ph> to disable the property.","pos":[22255,22311],"source":" to enable the property; `FALSE` to disable the property."},{"content":"Disabled properties do not respond to mouse or keyboard input.","pos":[22312,22374]},{"content":"The default value is <ph id=\"ph1\">`TRUE`</ph>.","pos":[22375,22403],"source":" The default value is `TRUE`."},{"content":"Remarks","pos":[22413,22420]},{"pos":[22490,22533],"content":"CMFCPropertyGridProperty::EnableSpinControl"},{"content":"Enables or disables a spin button control that is used to modify a property value.","pos":[22537,22619]},{"content":"Parameters","pos":[22728,22738]},{"content":"[in]","pos":[22742,22746]},{"content":"to enable the spin button control; <ph id=\"ph1\">`FALSE`</ph> to disable the spin button control.","pos":[22767,22845],"source":" to enable the spin button control; `FALSE` to disable the spin button control."},{"content":"The default value is <ph id=\"ph1\">`TRUE`</ph>.","pos":[22846,22874],"source":" The default value is `TRUE`."},{"content":"[in]","pos":[22881,22885]},{"content":"The minimum value of the spin button control.","pos":[22896,22941]},{"content":"The default value is 0.","pos":[22942,22965]},{"content":"[in]","pos":[22972,22976]},{"content":"The maximum value of the spin button control.","pos":[22987,23032]},{"content":"The default value is 0.","pos":[23033,23056]},{"content":"Remarks","pos":[23066,23073]},{"content":"The framework automatically creates a spin button control when a property is about to be edited.","pos":[23077,23173]},{"content":"The property type, which is specified by the <ph id=\"ph1\">`varValue`</ph> parameter of the <bpt id=\"p1\">[</bpt>CMFCPropertyGridProperty::CMFCPropertyGridProperty<ept id=\"p1\">](#cmfcpropertygridproperty__cmfcpropertygridproperty)</ept> constructor, must be a supported variant type.","pos":[23180,23405],"source":"The property type, which is specified by the `varValue` parameter of the [CMFCPropertyGridProperty::CMFCPropertyGridProperty](#cmfcpropertygridproperty__cmfcpropertygridproperty) constructor, must be a supported variant type."},{"content":"Otherwise, this method asserts in debug mode.","pos":[23406,23451]},{"content":"The supported types include <ph id=\"ph1\">`VT_INT`</ph>, <ph id=\"ph2\">`VT_UINT`</ph>, <ph id=\"ph3\">`VT_I2`</ph>, <ph id=\"ph4\">`VT_I4`</ph>, <ph id=\"ph5\">`VT_UI2`</ph>, and <ph id=\"ph6\">`VT_UI4`</ph>.","pos":[23452,23542],"source":" The supported types include `VT_INT`, `VT_UINT`, `VT_I2`, `VT_I4`, `VT_UI2`, and `VT_UI4`."},{"pos":[23601,23633],"content":"CMFCPropertyGridProperty::Expand"},{"content":"Expands or collapses a property that contains sub-properties.","pos":[23637,23698]},{"content":"Parameters","pos":[23755,23765]},{"content":"[in]","pos":[23769,23773]},{"content":"to expand the property; FALSE to collapse the property.","pos":[23794,23849]},{"content":"The default value is <ph id=\"ph1\">`TRUE`</ph>.","pos":[23850,23878],"source":" The default value is `TRUE`."},{"content":"Remarks","pos":[23888,23895]},{"pos":[23962,24002],"content":"CMFCPropertyGridProperty::FormatProperty"},{"content":"Formats the text representation of a property value.","pos":[24006,24058]},{"content":"Return Value","pos":[24117,24129]},{"content":"The text representation of the property value.","pos":[24133,24179]},{"content":"Remarks","pos":[24189,24196]},{"content":"This method is called by the framework before the property value is displayed.","pos":[24200,24278]},{"pos":[24338,24371],"content":"CMFCPropertyGridProperty::GetData"},{"pos":[24375,24436],"content":"Retrieves a <ph id=\"ph1\">`DWORD`</ph> value that is associated with a property.","source":"Retrieves a `DWORD` value that is associated with a property."},{"content":"Return Value","pos":[24491,24503]},{"pos":[24507,24523],"content":"A <ph id=\"ph1\">`DWORD`</ph> value.","source":"A `DWORD` value."},{"content":"Remarks","pos":[24533,24540]},{"content":"The data that is returned is an application-specific value, such as a number or a pointer to other data.","pos":[24544,24648]},{"content":"Specify the data value when you construct the property or when you call the <bpt id=\"p1\">[</bpt>CMFCPropertyGridProperty::SetData<ept id=\"p1\">](#cmfcpropertygridproperty__setdata)</ept> method.","pos":[24649,24804],"source":" Specify the data value when you construct the property or when you call the [CMFCPropertyGridProperty::SetData](#cmfcpropertygridproperty__setdata) method."},{"pos":[24871,24911],"content":"CMFCPropertyGridProperty::GetDescription"},{"content":"Retrieves a property description.","pos":[24915,24948]},{"content":"Return Value","pos":[25015,25027]},{"content":"A text string that contains the property description.","pos":[25031,25084]},{"content":"Remarks","pos":[25094,25101]},{"content":"Property list control also uses this method to display the description of the property.","pos":[25105,25192]},{"pos":[25264,25309],"content":"CMFCPropertyGridProperty::GetExpandedSubItems"},{"content":"Retrieves the number of expanded sub-items.","pos":[25313,25356]},{"content":"Parameters","pos":[25441,25451]},{"content":"Parameter","pos":[25458,25467]},{"content":"Description","pos":[25468,25479]},{"pos":[25522,25526],"content":"[in]"},{"content":"to include the hidden sub-items in the count; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","pos":[25551,25616],"source":" to include the hidden sub-items in the count; otherwise, `FALSE`."},{"content":"The default value is <ph id=\"ph1\">`TRUE`</ph>.","pos":[25617,25645],"source":" The default value is `TRUE`."},{"content":"Return Value","pos":[25656,25668]},{"content":"The number of expanded sub-items.","pos":[25672,25705]},{"content":"Remarks","pos":[25715,25722]},{"pos":[25792,25835],"content":"CMFCPropertyGridProperty::GetHierarchyLevel"},{"content":"Retrieves the zero-based index of the property's hierarchy level.","pos":[25839,25904]},{"content":"Return Value","pos":[25963,25975]},{"content":"The property's hierarchical level.","pos":[25979,26013]},{"content":"Remarks","pos":[26023,26030]},{"pos":[26090,26123],"content":"CMFCPropertyGridProperty::GetName"},{"content":"Retrieves the name of the property.","pos":[26127,26162]},{"content":"Return Value","pos":[26215,26227]},{"content":"Pointer to a string that contains the name of the property.","pos":[26231,26290]},{"content":"Remarks","pos":[26300,26307]},{"pos":[26374,26414],"content":"CMFCPropertyGridProperty::GetNameTooltip"},{"content":"Called by the framework to display the name of the property in a tooltip.","pos":[26418,26491]},{"content":"Return Value","pos":[26550,26562]},{"content":"A string that contains the property name.","pos":[26566,26607]},{"content":"By default, the return value is the empty string.","pos":[26608,26657]},{"content":"Remarks","pos":[26667,26674]},{"pos":[26736,26771],"content":"CMFCPropertyGridProperty::GetOption"},{"content":"Retrieves the text of the option that is specified by an index.","pos":[26775,26838]},{"content":"Parameters","pos":[26903,26913]},{"content":"The zero-based index of the property list item (option) to retrieve.","pos":[26929,26997]},{"content":"Return Value","pos":[27007,27019]},{"content":"Pointer to a string that contains the option text.","pos":[27023,27073]},{"content":"Remarks","pos":[27083,27090]},{"pos":[27157,27197],"content":"CMFCPropertyGridProperty::GetOptionCount"},{"content":"Retrieves the number of options that belong to a property.","pos":[27201,27259]},{"content":"Return Value","pos":[27315,27327]},{"content":"The number of property list items (options) that are contained in the property control.","pos":[27331,27418]},{"content":"Remarks","pos":[27428,27435]},{"content":"Call the <bpt id=\"p1\">[</bpt>CMFCPropertyGridProperty::AddOption<ept id=\"p1\">](#cmfcpropertygridproperty__addoption)</ept> method to add items to the property list.","pos":[27439,27565],"source":"Call the [CMFCPropertyGridProperty::AddOption](#cmfcpropertygridproperty__addoption) method to add items to the property list."},{"content":"Call the <bpt id=\"p1\">[</bpt>CMFCPropertyGridProperty::RemoveAllOptions<ept id=\"p1\">](#cmfcpropertygridproperty__removealloptions)</ept> method to remove all items.","pos":[27566,27692],"source":" Call the [CMFCPropertyGridProperty::RemoveAllOptions](#cmfcpropertygridproperty__removealloptions) method to remove all items."},{"pos":[27761,27803],"content":"CMFCPropertyGridProperty::GetOriginalValue"},{"content":"Retrieves the initial value of the current property.","pos":[27807,27859]},{"content":"Return Value","pos":[27932,27944]},{"content":"The original value of the current property.","pos":[27948,27991]},{"content":"Remarks","pos":[28001,28008]},{"content":"Use this method to undo the effect of an edit operation that changes the value of the current property.","pos":[28012,28115]},{"pos":[28122,28530],"content":"The original value of the current property is set by the <bpt id=\"p1\">[</bpt>CMFCPropertyGridProperty::CMFCPropertyGridProperty<ept id=\"p1\">](#cmfcpropertygridproperty__cmfcpropertygridproperty)</ept> constructor, modified by the <bpt id=\"p2\">[</bpt>CMFCPropertyGridProperty::SetOriginalValue<ept id=\"p2\">](#cmfcpropertygridproperty__setoriginalvalue)</ept> method, and reset by the <bpt id=\"p3\">[</bpt>CMFCPropertyGridProperty::ResetOriginalValue<ept id=\"p3\">](#cmfcpropertygridproperty__resetoriginalvalue)</ept> method.","source":"The original value of the current property is set by the [CMFCPropertyGridProperty::CMFCPropertyGridProperty](#cmfcpropertygridproperty__cmfcpropertygridproperty) constructor, modified by the [CMFCPropertyGridProperty::SetOriginalValue](#cmfcpropertygridproperty__setoriginalvalue) method, and reset by the [CMFCPropertyGridProperty::ResetOriginalValue](#cmfcpropertygridproperty__resetoriginalvalue) method."},{"pos":[28592,28627],"content":"CMFCPropertyGridProperty::GetParent"},{"content":"Retrieves a pointer to a parent property.","pos":[28631,28672]},{"content":"Return Value","pos":[28745,28757]},{"pos":[28761,28837],"content":"A pointer to a parent property object, or <ph id=\"ph1\">`NULL`</ph> for the top-level property.","source":"A pointer to a parent property object, or `NULL` for the top-level property."},{"content":"Remarks","pos":[28847,28854]},{"pos":[28914,28947],"content":"CMFCPropertyGridProperty::GetRect"},{"content":"Retrieves the bounding rectangle of a property.","pos":[28951,28998]},{"content":"Return Value","pos":[29049,29061]},{"pos":[29065,29167],"content":"A <bpt id=\"p1\">[</bpt>CRect<ept id=\"p1\">](../../atl-mfc-shared/reference/crect-class.md)</ept> object that describes the bounding rectangle.","source":"A [CRect](../../atl-mfc-shared/reference/crect-class.md) object that describes the bounding rectangle."},{"content":"Remarks","pos":[29177,29184]},{"pos":[29247,29283],"content":"CMFCPropertyGridProperty::GetSubItem"},{"content":"Retrieves a sub-property identified by a zero-based index.","pos":[29287,29345]},{"content":"Parameters","pos":[29429,29439]},{"content":"[in]","pos":[29443,29447]},{"content":"The zero-based index of the property to retrieve.","pos":[29460,29509]},{"content":"This parameter is invalid if it is less than zero or greater than or equal to the number of sub-properties.","pos":[29510,29617]},{"content":"Return Value","pos":[29627,29639]},{"content":"A pointer to a property object that is a child item of this property.","pos":[29643,29712]},{"content":"-or-","pos":[29719,29723]},{"content":"In retail mode, <ph id=\"ph1\">`NULL`</ph> if the <ph id=\"ph2\">`nIndex`</ph> parameter is invalid.","pos":[29730,29790],"source":"In retail mode, `NULL` if the `nIndex` parameter is invalid."},{"content":"In debug mode, this method asserts.","pos":[29791,29826]},{"content":"Remarks","pos":[29836,29843]},{"pos":[29912,29954],"content":"CMFCPropertyGridProperty::GetSubItemsCount"},{"content":"Retrieves the number of sub-items.","pos":[29958,29992]},{"content":"Return Value","pos":[30050,30062]},{"content":"The number of child items.","pos":[30066,30092]},{"content":"Remarks","pos":[30102,30109]},{"pos":[30170,30204],"content":"CMFCPropertyGridProperty::GetValue"},{"content":"Retrieves a property value.","pos":[30208,30235]},{"content":"Return Value","pos":[30307,30319]},{"content":"A variant that contains the property value.","pos":[30323,30366]},{"content":"Remarks","pos":[30376,30383]},{"pos":[30451,30492],"content":"CMFCPropertyGridProperty::GetValueTooltip"},{"content":"Called by the framework to retrieve the text representation of the property value that is then displayed in a tooltip.","pos":[30496,30614]},{"content":"Return Value","pos":[30674,30686]},{"content":"A <ph id=\"ph1\">`CString`</ph> object containing the textual representation of the property value.","pos":[30690,30769],"source":"A `CString` object containing the textual representation of the property value."},{"content":"By default, this value is the empty string.","pos":[30770,30813]},{"content":"Remarks","pos":[30823,30830]},{"pos":[30892,30927],"content":"CMFCPropertyGridProperty::HasButton"},{"content":"Indicates whether a property contains a button.","pos":[30931,30978]},{"content":"Return Value","pos":[31038,31050]},{"pos":[31061,31132],"content":"if a property contains a button (or property list); otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if a property contains a button (or property list); otherwise, `FALSE`."},{"content":"Remarks","pos":[31142,31149]},{"pos":[31209,31242],"content":"CMFCPropertyGridProperty::HitTest"},{"content":"Points to the property object that corresponds to the property list item that corresponds to a point.","pos":[31246,31347]},{"content":"Parameters","pos":[31630,31640]},{"content":"[in]","pos":[31644,31648]},{"content":"The point to test, in client coordinates.","pos":[31660,31701]},{"content":"This parameter is typically the current mouse pointer location.","pos":[31702,31765]},{"content":"[in]","pos":[31772,31776]},{"content":"The point to test, in client coordinates.","pos":[31785,31826]},{"content":"[out]","pos":[31833,31838]},{"content":"When this method returns, indicates the area that contains the specified point.","pos":[31851,31930]},{"content":"For more information, see Remarks.","pos":[31931,31965]},{"content":"The default value is <ph id=\"ph1\">`NULL`</ph>.","pos":[31966,31994],"source":" The default value is `NULL`."},{"content":"[in]","pos":[32001,32005]},{"content":"to test any area in the property control; <ph id=\"ph1\">`FALSE`</ph> to test only the description area.","pos":[32029,32113],"source":" to test any area in the property control; `FALSE` to test only the description area."},{"content":"The default value is <ph id=\"ph1\">`FALSE`</ph>.","pos":[32114,32143],"source":" The default value is `FALSE`."},{"content":"Return Value","pos":[32153,32165]},{"pos":[32169,32210],"content":"A pointer to a property object or <ph id=\"ph1\">`NULL`</ph>.","source":"A pointer to a property object or `NULL`."},{"content":"Remarks","pos":[32220,32227]},{"content":"By default, this method tests property sub-items if the specified point is not found within any of the property items.","pos":[32231,32349]},{"pos":[32356,32440],"content":"The following table lists the values that can be returned to the <ph id=\"ph1\">`pnArea`</ph> parameter.","source":"The following table lists the values that can be returned to the `pnArea` parameter."},{"content":"Area","pos":[32447,32451]},{"content":"Description","pos":[32452,32463]},{"content":"The expand box control, which is designated by a plus sign (+).","pos":[32529,32592]},{"content":"The property name.","pos":[32620,32638]},{"content":"The property value.","pos":[32667,32686]},{"pos":[32744,32774],"content":"CMFCPropertyGridProperty::Init"},{"content":"Called by the framework to initialize a property object.","pos":[32778,32834]},{"content":"Remarks","pos":[32872,32879]},{"pos":[32943,32980],"content":"CMFCPropertyGridProperty::IsAllowEdit"},{"content":"Indicates whether a property is editable.","pos":[32984,33025]},{"content":"Return Value","pos":[33079,33091]},{"pos":[33102,33149],"content":"if the property is editable; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the property is editable; otherwise `FALSE`."},{"content":"Remarks","pos":[33159,33166]},{"pos":[33228,33263],"content":"CMFCPropertyGridProperty::IsEnabled"},{"content":"Indicates whether a property is enabled or disabled.","pos":[33267,33319]},{"content":"Return Value","pos":[33371,33383]},{"pos":[33394,33458],"content":"if the property is enabled; <ph id=\"ph1\">`FALSE`</ph> if the property is disabled.","source":" if the property is enabled; `FALSE` if the property is disabled."},{"content":"Remarks","pos":[33468,33475]},{"content":"Tells whether a property is enabled or disabled.","pos":[33479,33527]},{"pos":[33590,33626],"content":"CMFCPropertyGridProperty::IsExpanded"},{"content":"Indicates whether a property is expanded or collapsed.","pos":[33630,33684]},{"content":"Return Value","pos":[33737,33749]},{"pos":[33760,33826],"content":"if the property is expanded; <ph id=\"ph1\">`FALSE`</ph> if the property is collapsed.","source":" if the property is expanded; `FALSE` if the property is collapsed."},{"content":"Remarks","pos":[33836,33843]},{"pos":[33903,33936],"content":"CMFCPropertyGridProperty::IsGroup"},{"content":"Indicates whether the current property represents a group.","pos":[33940,33998]},{"content":"Return Value","pos":[34048,34060]},{"pos":[34071,34165],"content":"if the current property object represents a group; <ph id=\"ph1\">`FALSE`</ph> if the property represents a value.","source":" if the current property object represents a group; `FALSE` if the property represents a value."},{"content":"Remarks","pos":[34175,34182]},{"content":"A <bpt id=\"p1\">*</bpt>group<ept id=\"p1\">*</ept> is a collection of related properties in a property grid control.","pos":[34186,34261],"source":"A *group* is a collection of related properties in a property grid control."},{"content":"If the control is displayed hierarchically, the <bpt id=\"p1\">*</bpt>group name<ept id=\"p1\">*</ept> is displayed as a category title in the row above the group.","pos":[34262,34383],"source":" If the control is displayed hierarchically, the *group name* is displayed as a category title in the row above the group."},{"pos":[34452,34494],"content":"CMFCPropertyGridProperty::IsInPlaceEditing"},{"content":"Indicates whether the current property is editable.","pos":[34498,34549]},{"content":"Return Value","pos":[34608,34620]},{"pos":[34631,34687],"content":"if the current property is editable; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the current property is editable; otherwise, `FALSE`."},{"content":"Remarks","pos":[34697,34704]},{"pos":[34767,34803],"content":"CMFCPropertyGridProperty::IsModified"},{"content":"Indicates whether the current property is modified.","pos":[34807,34858]},{"content":"Return Value","pos":[34911,34923]},{"pos":[34934,34982],"content":"if the property is modified; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the property is modified; otherwise, `FALSE`."},{"content":"Remarks","pos":[34992,34999]},{"pos":[35068,35110],"content":"CMFCPropertyGridProperty::IsParentExpanded"},{"content":"Indicates whether the parents of the current property are expanded.","pos":[35114,35181]},{"content":"Return Value","pos":[35240,35252]},{"pos":[35263,35363],"content":"if all parents of the current property are expanded; <ph id=\"ph1\">`FALSE`</ph> if the parent properties are collapsed.","source":" if all parents of the current property are expanded; `FALSE` if the parent properties are collapsed."},{"content":"Remarks","pos":[35373,35380]},{"pos":[35443,35479],"content":"CMFCPropertyGridProperty::IsSelected"},{"content":"Indicates whether the current property is selected.","pos":[35483,35534]},{"content":"Return Value","pos":[35595,35607]},{"pos":[35618,35674],"content":"if the current property is selected; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the current property is selected; otherwise, `FALSE`."},{"content":"Remarks","pos":[35684,35691]},{"pos":[35753,35788],"content":"CMFCPropertyGridProperty::IsSubItem"},{"content":"Indicates whether the specified property is a sub-item of the current property.","pos":[35792,35871]},{"content":"Parameters","pos":[35954,35964]},{"content":"[in]","pos":[35968,35972]},{"content":"A pointer to a property.","pos":[35984,36008]},{"content":"Return Value","pos":[36018,36030]},{"pos":[36041,36125],"content":"if the specified property is a sub-item of the current property; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the specified property is a sub-item of the current property; otherwise, `FALSE`."},{"pos":[36192,36232],"content":"CMFCPropertyGridProperty::IsValueChanged"},{"content":"Indicates whether the value of the current property has changed.","pos":[36236,36300]},{"content":"Return Value","pos":[36365,36377]},{"pos":[36388,36457],"content":"if the value of the current property has changed; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the value of the current property has changed; otherwise, `FALSE`."},{"content":"Remarks","pos":[36467,36474]},{"pos":[36536,36571],"content":"CMFCPropertyGridProperty::IsVisible"},{"content":"Indicates whether the current property is visible.","pos":[36575,36625]},{"content":"Return Value","pos":[36677,36689]},{"pos":[36700,36755],"content":"if the current property is visible; otherwise; <ph id=\"ph1\">`FALSE`</ph>.","source":" if the current property is visible; otherwise; `FALSE`."},{"content":"Remarks","pos":[36765,36772]},{"pos":[36842,36885],"content":"CMFCPropertyGridProperty::m_strFormatDouble"},{"content":"Holds a format string for a value of type double.","pos":[36889,36938]},{"content":"Remarks","pos":[36999,37006]},{"pos":[37075,37117],"content":"CMFCPropertyGridProperty::m_strFormatFloat"},{"content":"Holds a format string for a value of type float.","pos":[37121,37169]},{"content":"Remarks","pos":[37229,37236]},{"pos":[37304,37345],"content":"CMFCPropertyGridProperty::m_strFormatLong"},{"content":"Holds a format string for a value of type long.","pos":[37349,37396]},{"content":"Remarks","pos":[37455,37462]},{"pos":[37531,37573],"content":"CMFCPropertyGridProperty::m_strFormatShort"},{"content":"Holds a format string for a value of type short.","pos":[37577,37625]},{"content":"Remarks","pos":[37685,37692]},{"pos":[37758,37797],"content":"CMFCPropertyGridProperty::OnClickButton"},{"content":"Called by the framework when the user clicks a button that is contained in a property.","pos":[37801,37887]},{"content":"Parameters","pos":[37954,37964]},{"content":"[in]","pos":[37968,37972]},{"content":"A point, in client coordinates.","pos":[37984,38015]},{"content":"Remarks","pos":[38025,38032]},{"content":"By default, this method does nothing.","pos":[38036,38073]},{"pos":[38137,38174],"content":"CMFCPropertyGridProperty::OnClickName"},{"content":"Called by a parent property list control when a user clicks the name field of a property.","pos":[38178,38267]},{"content":"Parameters","pos":[38328,38338]},{"content":"Parameter","pos":[38345,38354]},{"content":"Description","pos":[38355,38366]},{"pos":[38409,38413],"content":"[in]"},{"content":"A point, in client coordinates.","pos":[38418,38449]},{"content":"Remarks","pos":[38460,38467]},{"content":"By default, this method does nothing.","pos":[38471,38508]},{"pos":[38573,38611],"content":"CMFCPropertyGridProperty::OnClickValue"},{"content":"Called by a parent property list control when a user clicks the value field of a property.","pos":[38615,38705]},{"content":"Parameters","pos":[38794,38804]},{"content":"[in]","pos":[38808,38812]},{"content":"A mouse message.","pos":[38824,38840]},{"content":"[in]","pos":[38847,38851]},{"content":"A point, in client coordinates.","pos":[38863,38894]},{"content":"Return Value","pos":[38904,38916]},{"pos":[38927,39006],"content":"if the specified mouse message is processed by this method; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the specified mouse message is processed by this method; otherwise, `FALSE`."},{"content":"Remarks","pos":[39016,39023]},{"content":"By default, this method returns <ph id=\"ph1\">`FALSE`</ph> if the current property is not editable.","pos":[39027,39107],"source":"By default, this method returns `FALSE` if the current property is not editable."},{"content":"Otherwise, the edit or spin control that is associated with this property processes the specified mouse message, and then this method returns <ph id=\"ph1\">`TRUE`</ph>.","pos":[39108,39257],"source":" Otherwise, the edit or spin control that is associated with this property processes the specified mouse message, and then this method returns `TRUE`."},{"pos":[39322,39360],"content":"CMFCPropertyGridProperty::OnCloseCombo"},{"content":"Called by the framework when a combo box that is contained in a property is closed.","pos":[39364,39447]},{"content":"Remarks","pos":[39501,39508]},{"pos":[39571,39607],"content":"CMFCPropertyGridProperty::OnCtlColor"},{"content":"Called by the framework when it must retrieve a brush to fill the background color of a property.","pos":[39611,39708]},{"content":"Parameters","pos":[39797,39807]},{"content":"[in]","pos":[39811,39815]},{"content":"Pointer to a device context.","pos":[39825,39853]},{"content":"[in]","pos":[39860,39864]},{"content":"(This parameter is not used.)","pos":[39880,39909]},{"content":"Return Value","pos":[39919,39931]},{"pos":[39935,40005],"content":"The handle to a brush if this method is successful; otherwise, <ph id=\"ph1\">`NULL`</ph>.","source":"The handle to a brush if this method is successful; otherwise, `NULL`."},{"content":"Remarks","pos":[40015,40022]},{"pos":[40083,40117],"content":"CMFCPropertyGridProperty::OnDblClk"},{"content":"Called by the framework when the user double clicks a property.","pos":[40121,40184]},{"content":"Parameters","pos":[40246,40256]},{"content":"[in]","pos":[40260,40264]},{"content":"A point, in client coordinates.","pos":[40276,40307]},{"content":"Return Value","pos":[40317,40329]},{"pos":[40340,40389],"content":"if this method is successful; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if this method is successful; otherwise, `FALSE`."},{"content":"Remarks","pos":[40399,40406]},{"content":"By default, this method selects the next property item in the property list control.","pos":[40410,40494]},{"pos":[40562,40603],"content":"CMFCPropertyGridProperty::OnDestroyWindow"},{"content":"Called by the framework when a property is destroyed or when editing is finished.","pos":[40607,40688]},{"content":"Remarks","pos":[40745,40752]},{"pos":[40817,40855],"content":"CMFCPropertyGridProperty::OnDrawButton"},{"content":"Called by the framework to draw a button that is contained in a property.","pos":[40859,40932]},{"content":"Parameters","pos":[41023,41033]},{"content":"[in]","pos":[41037,41041]},{"content":"A pointer to a device context.","pos":[41051,41081]},{"content":"[in]","pos":[41088,41092]},{"content":"A bounding rectangle that specifies where to draw a button.","pos":[41109,41168]},{"content":"Remarks","pos":[41178,41185]},{"pos":[41255,41298],"content":"CMFCPropertyGridProperty::OnDrawDescription"},{"content":"Called by the framework to draw the property description.","pos":[41302,41359]},{"content":"Parameters","pos":[41449,41459]},{"content":"[in]","pos":[41463,41467]},{"content":"A pointer to a device context.","pos":[41477,41507]},{"content":"[in]","pos":[41514,41518]},{"content":"A bounding rectangle that specifies where to draw the property description.","pos":[41529,41604]},{"content":"Remarks","pos":[41614,41621]},{"content":"By default, this method draws the property name and description in the font used by the parent property list control.","pos":[41625,41742]},{"content":"The property description is drawn in regular style and the property name is drawn in bold style.","pos":[41743,41839]},{"pos":[41907,41948],"content":"CMFCPropertyGridProperty::OnDrawExpandBox"},{"content":"Called by the framework to draw an expand box control near a property that contains sub-properties.","pos":[41952,42051]},{"content":"Parameters","pos":[42145,42155]},{"content":"[in]","pos":[42159,42163]},{"content":"A pointer to a device context.","pos":[42173,42203]},{"content":"[in]","pos":[42210,42214]},{"content":"A bounding rectangle that specifies where to draw the expand box control.","pos":[42231,42304]},{"content":"Remarks","pos":[42314,42321]},{"content":"Click the expand box control to expand or collapse a list of sub-properties.","pos":[42325,42401]},{"content":"The expand box control is designated by a square that contains a plus (+) or minus (-) sign.","pos":[42402,42494]},{"content":"A plus sign indicates that the property can be expanded to show a list of sub-properties.","pos":[42495,42584]},{"content":"A minus sign indicates that the list can be collapsed to show only the property.","pos":[42585,42665]},{"pos":[42728,42764],"content":"CMFCPropertyGridProperty::OnDrawName"},{"content":"Called by the framework to display the property name.","pos":[42768,42821]},{"content":"Parameters","pos":[42904,42914]},{"content":"[in]","pos":[42918,42922]},{"content":"A pointer to a device context.","pos":[42932,42962]},{"content":"[in]","pos":[42969,42973]},{"content":"A bounding rectangle that specifies where to draw the property name.","pos":[42984,43052]},{"content":"Remarks","pos":[43062,43069]},{"pos":[43133,43170],"content":"CMFCPropertyGridProperty::OnDrawValue"},{"content":"Called by the framework to display the property value.","pos":[43174,43228]},{"content":"Parameters","pos":[43312,43322]},{"content":"[in]","pos":[43326,43330]},{"content":"A pointer to a device context.","pos":[43340,43370]},{"content":"[in]","pos":[43377,43381]},{"content":"A bounding rectangle that specifies where to draw the property value.","pos":[43392,43461]},{"content":"Remarks","pos":[43471,43478]},{"pos":[43537,43569],"content":"CMFCPropertyGridProperty::OnEdit"},{"content":"Called by the framework when the user is about to modify a property value.","pos":[43573,43647]},{"content":"Parameters","pos":[43711,43721]},{"content":"[in]","pos":[43725,43729]},{"content":"(This parameter is not used.) A pointer to a point, in client coordinates.","pos":[43744,43818]},{"content":"Return Value","pos":[43828,43840]},{"pos":[43851,43913],"content":"if the edit operation starts successfully; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the edit operation starts successfully; otherwise, `FALSE`."},{"content":"Remarks","pos":[43923,43930]},{"content":"This function is called by the framework when the user is about to modify a property value.","pos":[43934,44025]},{"content":"By default, this method starts the appropriate editor for a combo box control or a spin control.","pos":[44026,44122]},{"pos":[44184,44219],"content":"CMFCPropertyGridProperty::OnEndEdit"},{"content":"Called by the framework when the user is finished modifying a property value.","pos":[44223,44300]},{"content":"Return Value","pos":[44351,44363]},{"pos":[44367,44401],"content":"This method always returns <ph id=\"ph1\">`TRUE`</ph>.","source":"This method always returns `TRUE`."},{"content":"Remarks","pos":[44411,44418]},{"pos":[44422,44507],"content":"By default, this method destroys the current editing control and then returns <ph id=\"ph1\">`TRUE`</ph>.","source":"By default, this method destroys the current editing control and then returns `TRUE`."},{"pos":[44571,44608],"content":"CMFCPropertyGridProperty::OnKillFocus"},{"content":"Called by the framework when the property loses the input focus.","pos":[44612,44676]},{"content":"Parameters","pos":[44734,44744]},{"content":"Parameter","pos":[44751,44760]},{"content":"Description","pos":[44761,44772]},{"pos":[44815,44819],"content":"[in]"},{"content":"(Not used.) Pointer to a window.","pos":[44827,44859]},{"content":"Return Value","pos":[44870,44882]},{"pos":[44886,44920],"content":"This method always returns <ph id=\"ph1\">`TRUE`</ph>.","source":"This method always returns `TRUE`."},{"content":"Remarks","pos":[44930,44937]},{"content":"By default, this method does nothing and then returns <ph id=\"ph1\">`TRUE`</ph>.","pos":[44941,45002],"source":"By default, this method does nothing and then returns `TRUE`."},{"content":"If you override this method, return <ph id=\"ph1\">`TRUE`</ph> if the framework can end the edit operation when the property loses the input focus.","pos":[45003,45130],"source":" If you override this method, return `TRUE` if the framework can end the edit operation when the property loses the input focus."},{"pos":[45198,45239],"content":"CMFCPropertyGridProperty::OnKillSelection"},{"content":"Parameters","pos":[45424,45434]},{"pos":[45438,45442],"content":"[in]"},{"content":"Remarks","pos":[45480,45487]},{"content":"By default, this method does nothing.","pos":[45491,45528]},{"pos":[45597,45639],"content":"CMFCPropertyGridProperty::OnPosSizeChanged"},{"content":"Parameters","pos":[45805,45815]},{"pos":[45819,45823],"content":"[in]"},{"content":"Remarks","pos":[45841,45848]},{"content":"By default, this method does nothing.","pos":[45852,45889]},{"pos":[45954,45992],"content":"CMFCPropertyGridProperty::OnRClickName"},{"content":"Called by the framework when the user clicks the right mouse button in the property name area.","pos":[45996,46090]},{"content":"Parameters","pos":[46152,46162]},{"content":"Parameter","pos":[46169,46178]},{"content":"Description","pos":[46179,46190]},{"pos":[46233,46237],"content":"[in]"},{"content":"A point, in client coordinates.","pos":[46242,46273]},{"content":"Remarks","pos":[46284,46291]},{"content":"By default, this method does nothing.","pos":[46295,46332]},{"pos":[46398,46437],"content":"CMFCPropertyGridProperty::OnRClickValue"},{"content":"Called by the framework when the user clicks the right mouse button in the property value area.","pos":[46441,46536]},{"content":"Parameters","pos":[46618,46628]},{"content":"Parameter","pos":[46635,46644]},{"content":"Description","pos":[46645,46656]},{"pos":[46699,46703],"content":"[in]"},{"content":"A point, in client coordinates.","pos":[46708,46739]},{"pos":[46744,46748],"content":"[in]"},{"content":"A Boolean.","pos":[46753,46763]},{"content":"Remarks","pos":[46774,46781]},{"pos":[46785,46870],"content":"By default, this method does nothing and the <ph id=\"ph1\">`B`</ph> parameter has no predefined purpose.","source":"By default, this method does nothing and the `B` parameter has no predefined purpose."},{"pos":[46936,46975],"content":"CMFCPropertyGridProperty::OnSelectCombo"},{"content":"Called by the framework when the user selects an item from the editable combo box.","pos":[46979,47061]},{"content":"Remarks","pos":[47116,47123]},{"content":"By default, this method uses the text of the selected item to update the property value.","pos":[47127,47215]},{"pos":[47279,47316],"content":"CMFCPropertyGridProperty::OnSetCursor"},{"content":"Called by the framework when the mouse pointer moves to a property item.","pos":[47320,47392]},{"content":"Return Value","pos":[47454,47466]},{"pos":[47477,47637],"content":"if the current property is a variant type or a list of values, and this method successfully loads the insertion point (I-beam) mouse cursor; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the current property is a variant type or a list of values, and this method successfully loads the insertion point (I-beam) mouse cursor; otherwise, `FALSE`."},{"content":"Remarks","pos":[47647,47654]},{"pos":[47658,47809],"content":"This method supports the following variant types: <ph id=\"ph1\">`VT_INT`</ph>, <ph id=\"ph2\">`VT_I2`</ph>, <ph id=\"ph3\">`VT_I4`</ph>, <ph id=\"ph4\">`VT_UINT`</ph>, <ph id=\"ph5\">`VT_UI1`</ph>, <ph id=\"ph6\">`VT_UI2`</ph>, <ph id=\"ph7\">`VT_UI4`</ph>, <ph id=\"ph8\">`VT_R4`</ph>, <ph id=\"ph9\">`VT_R8`</ph>, and <ph id=\"ph10\">`VT_BSTR`</ph>.","source":"This method supports the following variant types: `VT_INT`, `VT_I2`, `VT_I4`, `VT_UINT`, `VT_UI1`, `VT_UI2`, `VT_UI4`, `VT_R4`, `VT_R8`, and `VT_BSTR`."},{"pos":[47876,47916],"content":"CMFCPropertyGridProperty::OnSetSelection"},{"content":"Parameters","pos":[48100,48110]},{"pos":[48114,48118],"content":"[in]"},{"content":"Remarks","pos":[48156,48163]},{"content":"By default, this method does nothing.","pos":[48167,48204]},{"pos":[48270,48309],"content":"CMFCPropertyGridProperty::OnUpdateValue"},{"content":"Called by the framework when the value of an editable property has changed.","pos":[48313,48388]},{"content":"Return Value","pos":[48443,48455]},{"pos":[48466,48515],"content":"if this method is successful; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if this method is successful; otherwise, `FALSE`."},{"content":"Remarks","pos":[48525,48532]},{"pos":[48593,48627],"content":"CMFCPropertyGridProperty::PushChar"},{"content":"Called from the property list control when the property is selected and the user enters a new character.","pos":[48631,48735]},{"content":"Parameters","pos":[48795,48805]},{"content":"[in]","pos":[48809,48813]},{"content":"A character.","pos":[48825,48837]},{"content":"Return Value","pos":[48847,48859]},{"pos":[48870,48926],"content":"if the edit operation is continuing; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the edit operation is continuing; otherwise, `FALSE`."},{"content":"Remarks","pos":[48936,48943]},{"pos":[48947,49151],"content":"This method supports a property that is either a list of values or one of the following variant types: <ph id=\"ph1\">`VT_INT`</ph>, <ph id=\"ph2\">`VT_I2`</ph>, <ph id=\"ph3\">`VT_I4`</ph>, <ph id=\"ph4\">`VT_UINT`</ph>, <ph id=\"ph5\">`VT_UI1`</ph>, <ph id=\"ph6\">`VT_UI2`</ph>, <ph id=\"ph7\">`VT_UI4`</ph>, <ph id=\"ph8\">`VT_R4`</ph>, <ph id=\"ph9\">`VT_R8`</ph>, and <ph id=\"ph10\">`VT_BSTR`</ph>.","source":"This method supports a property that is either a list of values or one of the following variant types: `VT_INT`, `VT_I2`, `VT_I4`, `VT_UINT`, `VT_UI1`, `VT_UI2`, `VT_UI4`, `VT_R4`, `VT_R8`, and `VT_BSTR`."},{"pos":[49210,49242],"content":"CMFCPropertyGridProperty::Redraw"},{"content":"Redraws the property.","pos":[49246,49267]},{"content":"Remarks","pos":[49307,49314]},{"pos":[49383,49425],"content":"CMFCPropertyGridProperty::RemoveAllOptions"},{"content":"Removes all options (items) from a property.","pos":[49429,49473]},{"content":"Remarks","pos":[49523,49530]},{"content":"Options are also known as the list items of a property list control.","pos":[49534,49602]},{"pos":[49668,49707],"content":"CMFCPropertyGridProperty::RemoveSubItem"},{"content":"Removes the specified sub-item.","pos":[49711,49742]},{"content":"Parameters","pos":[49851,49861]},{"content":"[in]","pos":[49865,49869]},{"content":"Pointer to a property sub-item.","pos":[49881,49912]},{"content":"[in]","pos":[49919,49923]},{"content":"to delete the property object that is specified by the <ph id=\"ph1\">`pProp`</ph> parameter; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","pos":[49944,50037],"source":" to delete the property object that is specified by the `pProp` parameter; otherwise, `FALSE`."},{"content":"The default value is <ph id=\"ph1\">`TRUE`</ph>.","pos":[50038,50066],"source":" The default value is `TRUE`."},{"content":"Return Value","pos":[50076,50088]},{"content":"Remarks","pos":[50098,50105]},{"pos":[50109,50254],"content":"Specify <ph id=\"ph1\">`FALSE`</ph> for the <ph id=\"ph2\">`bDelete`</ph> parameter if you intend to move the specified sub-item; that is, remove the sub-item and then add it elsewhere.","source":"Specify `FALSE` for the `bDelete` parameter if you intend to move the specified sub-item; that is, remove the sub-item and then add it elsewhere."},{"pos":[50325,50369],"content":"CMFCPropertyGridProperty::ResetOriginalValue"},{"content":"Restores the original value of an edited property.","pos":[50373,50423]},{"content":"Remarks","pos":[50483,50490]},{"pos":[50550,50583],"content":"CMFCPropertyGridProperty::SetData"},{"pos":[50587,50630],"content":"Associates a <ph id=\"ph1\">`DWORD`</ph> value with a property.","source":"Associates a `DWORD` value with a property."},{"content":"Parameters","pos":[50687,50697]},{"content":"[in]","pos":[50701,50705]},{"content":"An application-specific 32-bit value, such as an integer or a pointer to other data.","pos":[50718,50802]},{"content":"Remarks","pos":[50812,50819]},{"content":"Use the <bpt id=\"p1\">[</bpt>CMFCPropertyGridProperty::GetData<ept id=\"p1\">](#cmfcpropertygridproperty__getdata)</ept> method to retrieve the <ph id=\"ph1\">`DWORD`</ph> value.","pos":[50823,50940],"source":"Use the [CMFCPropertyGridProperty::GetData](#cmfcpropertygridproperty__getdata) method to retrieve the `DWORD` value."},{"content":"Use the <bpt id=\"p1\">[</bpt>CMFCPropertyGridCtrl::FindItemByData<ept id=\"p1\">](../../mfc/reference/cmfcpropertygridctrl-class.md#cmfcpropertygridctrl__finditembydata)</ept> method to locate the property list item that is associated with the specified <ph id=\"ph1\">`DWORD`</ph> value.","pos":[50941,51168],"source":" Use the [CMFCPropertyGridCtrl::FindItemByData](../../mfc/reference/cmfcpropertygridctrl-class.md#cmfcpropertygridctrl__finditembydata) method to locate the property list item that is associated with the specified `DWORD` value."},{"pos":[51235,51275],"content":"CMFCPropertyGridProperty::SetDescription"},{"content":"Specifies the text that describes the current property.","pos":[51279,51334]},{"content":"Parameters","pos":[51405,51415]},{"content":"[in]","pos":[51419,51423]},{"content":"Text that describes the current property.","pos":[51438,51479]},{"content":"Remarks","pos":[51489,51496]},{"pos":[51556,51589],"content":"CMFCPropertyGridProperty::SetName"},{"content":"Sets the name of a property.","pos":[51593,51621]},{"content":"Parameters","pos":[51708,51718]},{"content":"[in]","pos":[51722,51726]},{"content":"The property name.","pos":[51741,51759]},{"content":"[in]","pos":[51766,51770]},{"content":"to redraw the property immediately; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","pos":[51791,51846],"source":" to redraw the property immediately; otherwise, `FALSE`."},{"content":"The default value is <ph id=\"ph1\">`TRUE`</ph>.","pos":[51847,51875],"source":" The default value is `TRUE`."},{"content":"Remarks","pos":[51885,51892]},{"pos":[51961,52003],"content":"CMFCPropertyGridProperty::SetOriginalValue"},{"content":"Sets the original value of an editable property.","pos":[52007,52055]},{"content":"Parameters","pos":[52140,52150]},{"content":"[in]","pos":[52154,52158]},{"content":"A value.","pos":[52173,52181]},{"content":"Remarks","pos":[52191,52198]},{"pos":[52202,52361],"content":"Use the <bpt id=\"p1\">[</bpt>CMFCPropertyGridProperty::ResetOriginalValue<ept id=\"p1\">](#cmfcpropertygridproperty__resetoriginalvalue)</ept> method to reset the original value of an edited property.","source":"Use the [CMFCPropertyGridProperty::ResetOriginalValue](#cmfcpropertygridproperty__resetoriginalvalue) method to reset the original value of an edited property."},{"pos":[52422,52456],"content":"CMFCPropertyGridProperty::SetValue"},{"content":"Sets the value of a property grid property.","pos":[52460,52503]},{"content":"Parameters","pos":[52579,52589]},{"content":"[in]","pos":[52593,52597]},{"content":"A reference to a value.","pos":[52612,52635]},{"content":"Remarks","pos":[52645,52652]},{"pos":[52709,52739],"content":"CMFCPropertyGridProperty::Show"},{"content":"Shows or hides a property.","pos":[52743,52769]},{"content":"Parameters","pos":[52858,52868]},{"content":"[in]","pos":[52872,52876]},{"content":"to display the current property and its sub-items; <ph id=\"ph1\">`FALSE`</ph> to hide the current property and its sub-items.","pos":[52895,53001],"source":" to display the current property and its sub-items; `FALSE` to hide the current property and its sub-items."},{"content":"The default value is <ph id=\"ph1\">`TRUE`</ph>.","pos":[53002,53030],"source":" The default value is `TRUE`."},{"content":"[in]","pos":[53037,53041]},{"content":"to recalculate how to draw the label and value of a property and then draw the property; <ph id=\"ph1\">`FALSE`</ph> to use existing calculations to draw the property.","pos":[53068,53215],"source":" to recalculate how to draw the label and value of a property and then draw the property; `FALSE` to use existing calculations to draw the property."},{"content":"The default value is <ph id=\"ph1\">`TRUE`</ph>.","pos":[53216,53244],"source":" The default value is `TRUE`."},{"content":"See Also","pos":[53253,53261]},{"content":"Hierarchy Chart","pos":[53266,53281]},{"content":"Classes","pos":[53318,53325]},{"content":"CMFCPropertyGridCtrl Class","pos":[53368,53394]}],"content":"---\ntitle: \"CMFCPropertyGridProperty Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CMFCPropertyGridProperty\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CMFCPropertyGridProperty class\"\nms.assetid: 36f3fabe-0efe-468b-8a0b-5a7956db38a2\ncaps.latest.revision: 35\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMFCPropertyGridProperty Class\nA `CMFCPropertyGridProperty` object represents a list item in a property list control.  \n  \n## Syntax  \n  \n```  \nclass CMFCPropertyGridProperty : public CObject  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCPropertyGridProperty::CMFCPropertyGridProperty](#cmfcpropertygridproperty__cmfcpropertygridproperty)|Constructs a `CMFCPropertyGridProperty` object.|  \n|`CMFCPropertyGridProperty::~CMFCPropertyGridProperty`|Destructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCPropertyGridProperty::AddOption](#cmfcpropertygridproperty__addoption)|Adds a new list item to a property list control.|  \n|[CMFCPropertyGridProperty::AddSubItem](#cmfcpropertygridproperty__addsubitem)|Adds a child item to a property.|  \n|[CMFCPropertyGridProperty::AdjustButtonRect](#cmfcpropertygridproperty__adjustbuttonrect)|Called by the parent property list control to tell a property to resize the bounding rectangle of an embedded button.|  \n|[CMFCPropertyGridProperty::AdjustInPlaceEditRect](#cmfcpropertygridproperty__adjustinplaceeditrect)|Retrieves the boundaries of the text box and optional spin button control that are used to set a property value.|  \n|[CMFCPropertyGridProperty::AllowEdit](#cmfcpropertygridproperty__allowedit)|Makes a property either editable or read-only.|  \n|[CMFCPropertyGridProperty::CreateInPlaceEdit](#cmfcpropertygridproperty__createinplaceedit)|Called by the framework to create an editable control for a property.|  \n|[CMFCPropertyGridProperty::CreateSpinControl](#cmfcpropertygridproperty__createspincontrol)|Called by the framework to create an editable spin button control.|  \n|[CMFCPropertyGridProperty::Enable](#cmfcpropertygridproperty__enable)|Enables or disables a property.|  \n|[CMFCPropertyGridProperty::EnableSpinControl](#cmfcpropertygridproperty__enablespincontrol)|Enables or disables a spin button control that is used to modify a property value.|  \n|[CMFCPropertyGridProperty::Expand](#cmfcpropertygridproperty__expand)|Expands or collapses a property that contains sub-properties.|  \n|[CMFCPropertyGridProperty::FormatProperty](#cmfcpropertygridproperty__formatproperty)|Formats the text representation of a property value.|  \n|[CMFCPropertyGridProperty::GetData](#cmfcpropertygridproperty__getdata)|Retrieves a `DWORD` value that is associated with a property.|  \n|[CMFCPropertyGridProperty::GetDescription](#cmfcpropertygridproperty__getdescription)|Retrieves a property description.|  \n|[CMFCPropertyGridProperty::GetExpandedSubItems](#cmfcpropertygridproperty__getexpandedsubitems)|Retrieves the number of expanded sub-items.|  \n|[CMFCPropertyGridProperty::GetHierarchyLevel](#cmfcpropertygridproperty__gethierarchylevel)|Retrieves the zero-based index of the property's hierarchy level.|  \n|[CMFCPropertyGridProperty::GetName](#cmfcpropertygridproperty__getname)|Retrieves the name of the property.|  \n|[CMFCPropertyGridProperty::GetNameTooltip](#cmfcpropertygridproperty__getnametooltip)|Called by the framework to display the name of the property in a tooltip.|  \n|[CMFCPropertyGridProperty::GetOption](#cmfcpropertygridproperty__getoption)|Retrieves the text of the option that is specified by an index.|  \n|[CMFCPropertyGridProperty::GetOptionCount](#cmfcpropertygridproperty__getoptioncount)|Retrieves the number of options that belong to a property.|  \n|[CMFCPropertyGridProperty::GetOriginalValue](#cmfcpropertygridproperty__getoriginalvalue)|Retrieves the initial value of the current property.|  \n|[CMFCPropertyGridProperty::GetParent](#cmfcpropertygridproperty__getparent)|Retrieves a pointer to a parent property.|  \n|[CMFCPropertyGridProperty::GetRect](#cmfcpropertygridproperty__getrect)|Retrieves the bounding rectangle of a property.|  \n|[CMFCPropertyGridProperty::GetSubItem](#cmfcpropertygridproperty__getsubitem)|Retrieves a sub-property identified by a zero-based index.|  \n|[CMFCPropertyGridProperty::GetSubItemsCount](#cmfcpropertygridproperty__getsubitemscount)|Retrieves the number of sub-items.|  \n|`CMFCPropertyGridProperty::GetThisClass`|Used by the framework to obtain a pointer to the [CRuntimeClass](../../mfc/reference/cruntimeclass-structure.md) object that is associated with this class type.|  \n|[CMFCPropertyGridProperty::GetValue](#cmfcpropertygridproperty__getvalue)|Retrieves a property value.|  \n|[CMFCPropertyGridProperty::GetValueTooltip](#cmfcpropertygridproperty__getvaluetooltip)|Called by the framework to retrieve the text representation of the property value that is then displayed in a tooltip.|  \n|[CMFCPropertyGridProperty::HitTest](#cmfcpropertygridproperty__hittest)|Points to the property object that corresponds to the property list item that corresponds to a point.|  \n|[CMFCPropertyGridProperty::IsAllowEdit](#cmfcpropertygridproperty__isallowedit)|Indicates whether a property is editable.|  \n|[CMFCPropertyGridProperty::IsEnabled](#cmfcpropertygridproperty__isenabled)|Indicates whether a property is enabled or disabled.|  \n|[CMFCPropertyGridProperty::IsExpanded](#cmfcpropertygridproperty__isexpanded)|Indicates whether a property is expanded or collapsed.|  \n|[CMFCPropertyGridProperty::IsGroup](#cmfcpropertygridproperty__isgroup)|Indicates whether the current property represents a group.|  \n|[CMFCPropertyGridProperty::IsInPlaceEditing](#cmfcpropertygridproperty__isinplaceediting)|Indicates whether the current property is editable.|  \n|[CMFCPropertyGridProperty::IsModified](#cmfcpropertygridproperty__ismodified)|Indicates whether the current property is modified.|  \n|[CMFCPropertyGridProperty::IsParentExpanded](#cmfcpropertygridproperty__isparentexpanded)|Indicates whether the parents of the current property are expanded.|  \n|[CMFCPropertyGridProperty::IsSelected](#cmfcpropertygridproperty__isselected)|Indicates whether the current property is selected.|  \n|[CMFCPropertyGridProperty::IsVisible](#cmfcpropertygridproperty__isvisible)|Indicates whether the current property is visible.|  \n|[CMFCPropertyGridProperty::OnClickButton](#cmfcpropertygridproperty__onclickbutton)|Called by the framework when the user clicks a button that is contained in a property.|  \n|[CMFCPropertyGridProperty::OnClickName](#cmfcpropertygridproperty__onclickname)|Called by a parent property list control when a user clicks the name field of a property.|  \n|[CMFCPropertyGridProperty::OnClickValue](#cmfcpropertygridproperty__onclickvalue)|Called by a parent property list control when a user clicks the value field of a property.|  \n|[CMFCPropertyGridProperty::OnCloseCombo](#cmfcpropertygridproperty__onclosecombo)|Called by the framework when a combo box that is contained in a property is closed.|  \n|[CMFCPropertyGridProperty::OnDblClk](#cmfcpropertygridproperty__ondblclk)|Called by the framework when the user double clicks a property.|  \n|[CMFCPropertyGridProperty::OnDrawButton](#cmfcpropertygridproperty__ondrawbutton)|Called by the framework to draw a button that is contained in a property.|  \n|[CMFCPropertyGridProperty::OnDrawDescription](#cmfcpropertygridproperty__ondrawdescription)|Called by the framework to display the property description.|  \n|[CMFCPropertyGridProperty::OnDrawExpandBox](#cmfcpropertygridproperty__ondrawexpandbox)|Called by the framework to draw an expand box control near a property that contains sub-properties.|  \n|[CMFCPropertyGridProperty::OnDrawName](#cmfcpropertygridproperty__ondrawname)|Called by the framework to display the property name.|  \n|[CMFCPropertyGridProperty::OnDrawValue](#cmfcpropertygridproperty__ondrawvalue)|Called by the framework to display the property value.|  \n|[CMFCPropertyGridProperty::OnEdit](#cmfcpropertygridproperty__onedit)|Called by the framework when the user is about to modify a property value.|  \n|[CMFCPropertyGridProperty::OnEndEdit](#cmfcpropertygridproperty__onendedit)|Called by the framework when the user is finished modifying a property value.|  \n|[CMFCPropertyGridProperty::OnKillSelection](#cmfcpropertygridproperty__onkillselection)||  \n|[CMFCPropertyGridProperty::OnPosSizeChanged](#cmfcpropertygridproperty__onpossizechanged)||  \n|[CMFCPropertyGridProperty::OnRClickName](#cmfcpropertygridproperty__onrclickname)|Called by the framework when the user clicks the right mouse button in the property name area.|  \n|[CMFCPropertyGridProperty::OnRClickValue](#cmfcpropertygridproperty__onrclickvalue)|Called by the framework when the user clicks the right mouse button in the property value area.|  \n|[CMFCPropertyGridProperty::OnSelectCombo](#cmfcpropertygridproperty__onselectcombo)|Called by the framework when the user selects an item from the editable combo box.|  \n|[CMFCPropertyGridProperty::OnSetCursor](#cmfcpropertygridproperty__onsetcursor)|Called by the framework when the mouse pointer moves to a property item.|  \n|[CMFCPropertyGridProperty::OnSetSelection](#cmfcpropertygridproperty__onsetselection)||  \n|[CMFCPropertyGridProperty::OnUpdateValue](#cmfcpropertygridproperty__onupdatevalue)|Called by the framework when the value of an editable property has changed.|  \n|[CMFCPropertyGridProperty::PushChar](#cmfcpropertygridproperty__pushchar)|Called from the property list control when the property is selected and the user enters a new character.|  \n|[CMFCPropertyGridProperty::Redraw](#cmfcpropertygridproperty__redraw)|Redraws the property.|  \n|[CMFCPropertyGridProperty::RemoveAllOptions](#cmfcpropertygridproperty__removealloptions)|Removes all options (items) from a property.|  \n|[CMFCPropertyGridProperty::RemoveSubItem](#cmfcpropertygridproperty__removesubitem)|Removes the specified sub-item.|  \n|[CMFCPropertyGridProperty::ResetOriginalValue](#cmfcpropertygridproperty__resetoriginalvalue)|Restores the original value of an edited property.|  \n|[CMFCPropertyGridProperty::SetData](#cmfcpropertygridproperty__setdata)|Associates a `DWORD` value with a property.|  \n|[CMFCPropertyGridProperty::SetDescription](#cmfcpropertygridproperty__setdescription)|Specifies the text that describes the current property.|  \n|[CMFCPropertyGridProperty::SetName](#cmfcpropertygridproperty__setname)|Sets the name of a property.|  \n|[CMFCPropertyGridProperty::SetOriginalValue](#cmfcpropertygridproperty__setoriginalvalue)|Sets the original value of an editable property.|  \n|[CMFCPropertyGridProperty::SetValue](#cmfcpropertygridproperty__setvalue)|Sets the value of a property grid property.|  \n|[CMFCPropertyGridProperty::Show](#cmfcpropertygridproperty__show)|Shows or hides a property.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCPropertyGridProperty::CreateCombo](#cmfcpropertygridproperty__createcombo)|Called by the framework to add a combo box to a property.|  \n|[CMFCPropertyGridProperty::HasButton](#cmfcpropertygridproperty__hasbutton)|Indicates whether a property contains a button.|  \n|[CMFCPropertyGridProperty::Init](#cmfcpropertygridproperty__init)|Called by the framework to initialize a property object.|  \n|[CMFCPropertyGridProperty::IsSubItem](#cmfcpropertygridproperty__issubitem)|Indicates whether the specified property is a sub-item of the current property.|  \n|[CMFCPropertyGridProperty::IsValueChanged](#cmfcpropertygridproperty__isvaluechanged)|Indicates whether the value of the current property has changed.|  \n|[CMFCPropertyGridProperty::OnCtlColor](#cmfcpropertygridproperty__onctlcolor)|Called by the framework when it must retrieve a brush to fill the background color of a property.|  \n|[CMFCPropertyGridProperty::OnDestroyWindow](#cmfcpropertygridproperty__ondestroywindow)|Called by the framework when a property is destroyed or when editing is finished.|  \n|[CMFCPropertyGridProperty::OnKillFocus](#cmfcpropertygridproperty__onkillfocus)|Called by the framework when the property loses the input focus.|  \n  \n### Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCPropertyGridProperty::m_strFormatDouble](#cmfcpropertygridproperty__m_strformatdouble)|Format string for a value of type double.|  \n|[CMFCPropertyGridProperty::m_strFormatFloat](#cmfcpropertygridproperty__m_strformatfloat)|Format string for a value of type float.|  \n|[CMFCPropertyGridProperty::m_strFormatLong](#cmfcpropertygridproperty__m_strformatlong)|Format string for a value of type long.|  \n|[CMFCPropertyGridProperty::m_strFormatShort](#cmfcpropertygridproperty__m_strformatshort)|Format string for a value of type short.|  \n  \n## Remarks  \n Use a `CMFCPropertyGridProperty` object to represent a property, which you then add to a property list control. For more information, see [CMFCPropertyGridCtrl Class](../../mfc/reference/cmfcpropertygridctrl-class.md).  \n  \n A property object can represent data types such as strings, dates, and Boolean or integer values. It can contain child properties, or it can contain a control such as a combo box or a button control.  \n  \n## Example  \n The following example demonstrates how to construct a `CMFCPropertyGridProperty` object. The example also demonstrates how to use various methods in the `CMFCPropertyGridProperty` class to add an option, add a sub-item, enable a property, and show a property. This example is part of the [New Controls sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_NewControls#27](../../mfc/reference/codesnippet/cpp/cmfcpropertygridproperty-class_1.cpp)]  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CMFCPropertyGridProperty](../../mfc/reference/cmfcpropertygridproperty-class.md)  \n  \n## Requirements  \n **Header:** afxpropertygridctrl.h  \n  \n##  <a name=\"cmfcpropertygridproperty__addoption\"></a>  CMFCPropertyGridProperty::AddOption  \n Adds a new list item to a property list control.  \n  \n```  \nBOOL AddOption(\n    LPCTSTR lpszOption,  \n    BOOL bInsertUnique=TRUE);\n```  \n  \n### Parameters  \n [in] `lpszOption`  \n The list item (option) to add.  \n  \n [in] `bInsertUnique`  \n `TRUE` to add the list item only if it does not already exist; otherwise, `FALSE`. The default value is `TRUE`.  \n  \n### Return Value  \n `TRUE`, which means that the list item is added. Otherwise, `FALSE`, which means that the list item is not added because the `bInsertUnique` parameter is `TRUE` and the list item specified by the `lpszOption` parameter already exists.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__addsubitem\"></a>  CMFCPropertyGridProperty::AddSubItem  \n Adds a child item to a property.  \n  \n```  \nBOOL AddSubItem(CMFCPropertyGridProperty* pProp);\n```  \n  \n### Parameters  \n [in] `pProp`  \n Pointer to a property to add.  \n  \n### Return Value  \n `TRUE` if the specified property is successfully added as a child property. `FALSE` if the property is not added because it already occurs in the parent property.  \n  \n### Remarks  \n Use this method to create a hierarchical list of parent and child properties. After a child property is added, the parent property automatically displays an expand box control that is designated by a plus sign (+). When the user clicks the plus sign, the parent property expands and displays any child property items.  \n  \n##  <a name=\"cmfcpropertygridproperty__adjustbuttonrect\"></a>  CMFCPropertyGridProperty::AdjustButtonRect  \n Called by the parent property list control to tell a property to resize the bounding rectangle of an embedded button.  \n  \n```  \nvirtual void AdjustButtonRect();\n```  \n  \n### Remarks  \n By default, this method:  \n  \n-   Adjusts the width of the button equal to the height of the button plus 3 pixels.  \n  \n-   Moves the bounding rectangle of the button to the right edge of the property  \n  \n-   Shifts the button 1 pixel below the top edge of the property.  \n  \n##  <a name=\"cmfcpropertygridproperty__adjustinplaceeditrect\"></a>  CMFCPropertyGridProperty::AdjustInPlaceEditRect  \n Retrieves the boundaries of the text box and optional spin button control that are used to set a property value.  \n  \n```  \nvirtual void AdjustInPlaceEditRect(\n    CRect& rectEdit,  \n    CRect& rectSpin);\n```  \n  \n### Parameters  \n [out] `rectEdit`  \n When this method returns, a rectangle that specifies the boundaries of the text box for the property value.  \n  \n [out] `rectSpin`  \n When this method returns, a rectangle that specifies the boundaries of the spin button control for the property value. Or, if the property does not support a spin button, an empty rectangle.  \n  \n### Remarks  \n The value area of a property consists of a text box and possibly an *option button*, such as a spin button control. This method calculates the dimensions of the text box and option button and then returns those values in the specified parameters.  \n  \n##  <a name=\"cmfcpropertygridproperty__allowedit\"></a>  CMFCPropertyGridProperty::AllowEdit  \n Makes a property either editable or read-only.  \n  \n```  \nvoid AllowEdit(BOOL bAllow=TRUE);\n```  \n  \n### Parameters  \n [in] `bAllow`  \n `TRUE` to make the property editable; `FALSE` to make the property read-only. The default value is `TRUE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__cmfcpropertygridproperty\"></a>  CMFCPropertyGridProperty::CMFCPropertyGridProperty  \n Constructs a `CMFCPropertyGridProperty` object.  \n  \n```  \nCMFCPropertyGridProperty(\n    const CString& strGroupName,  \n    DWORD_PTR dwData=0,  \n    BOOL bIsValueList=FALSE);\n\n \nCMFCPropertyGridProperty(\n    const CString& strName,  \n    const _variant_t& varValue,  \n    LPCTSTR lpszDescr=NULL,  \n    DWORD_PTR dwData=0,  \n    LPCTSTR lpszEditMask=NULL,  \n    LPCTSTR lpszEditTemplate=NULL,  \n    LPCTSTR lpszValidChars=NULL);\n```  \n  \n### Parameters  \n [in] `strGroupName`  \n The group name. A *group* is a collection of related properties in a property grid control. If the control is displayed hierarchically, the *group name* is displayed as a category title in the row above the group.  \n  \n [in] `dwData`  \n Application-specific data, such as an integer or a pointer to other data that is associated with the property. The default value is 0.  \n  \n [in] `strName`  \n The name of the property.  \n  \n [in] `varValue`  \n The property value.  \n  \n [in] `lpszDescr`  \n The property description. The default value is `NULL`.  \n  \n [in] `lpszEditMask`  \n The edit mask, if the property is a masked edit control. The default value is `NULL`.  \n  \n [in] `lpszEditTemplate`  \n The edit template, if the property is a masked edit control. The default value is `NULL`.  \n  \n [in] `lpszValidChars`  \n A list of valid characters, if the property is a masked edit control. The default value is `NULL`.  \n  \n [in] `bIsValueList`  \n `TRUE` if the property represents a list of values; `FALSE` if the property represents a single value. The default value is `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__createcombo\"></a>  CMFCPropertyGridProperty::CreateCombo  \n Called by the framework to add a combo box to a property.  \n  \n```  \nvirtual CComboBox* CreateCombo(\n    CWnd* pWndParent,  \n    CRect rect);\n```  \n  \n### Parameters  \n [in] `pWndParent`  \n Pointer to the parent window of the combo box.  \n  \n [in] `rect`  \n The bounding rectangle of the combo box.  \n  \n### Return Value  \n Pointer to a new [CComboBox](../../mfc/reference/ccombobox-class.md) object.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__createinplaceedit\"></a>  CMFCPropertyGridProperty::CreateInPlaceEdit  \n Called by the framework to create an editable control for a property.  \n  \n```  \nvirtual CWnd* CreateInPlaceEdit(\n    CRect rectEdit,  \n    BOOL& bDefaultFormat);\n```  \n  \n### Parameters  \n [in] `rectEdit`  \n The bounding rectangle of the editable control.  \n  \n [in] `bDefaultFormat`  \n `TRUE` to use the default property format to set the text of the editable control; otherwise, `FALSE`.  \n  \n### Return Value  \n A pointer to the editable control if this method succeeds; otherwise, `NULL`.  \n  \n### Remarks  \n This method uses the values of the `varValue`, `lpszEditMask`, `lpszEditTemplate`, and `lpszValidChars` parameters that are specified in the [CMFCPropertyGridProperty](../../mfc/reference/cmfcpropertygridproperty-class.md) class constructor. By default, this method supports the `varValue` variant types. This includes `VT_BSTR`, `VT_R4`, `VT_R8`, `VT_UI1`, `VT_I2`, `VT_INT`, `VT_UINT`, `VT_I4`, `VT_UI2`, `VT_UI4`, and `VT_BOOL`.  \n  \n This method creates a [CMFCMaskedEdit](../../mfc/reference/cmfcmaskededit-class.md) control if one or more of the `lpszEditMask`, `lpszEditTemplate`, or `lpszValidChars` parameters are specified; otherwise, it creates a [CEdit](../../mfc/reference/cedit-class.md) control.  \n  \n##  <a name=\"cmfcpropertygridproperty__createspincontrol\"></a>  CMFCPropertyGridProperty::CreateSpinControl  \n Called by the framework to create an editable spin button control.  \n  \n```  \nvirtual CSpinButtonCtrl* CreateSpinControl(CRect rectSpin);\n```  \n  \n### Parameters  \n [in] `rectSpin`  \n A rectangle that defines where the editable spin button control is created.  \n  \n### Return Value  \n A pointer to a new [CMFCSpinButtonCtrl](../../mfc/reference/cmfcspinbuttonctrl-class.md) object that is cast as a pointer to a [CSpinButtonCtrl](../../mfc/reference/cspinbuttonctrl-class.md) object.  \n  \n### Remarks  \n Call the [CMFCPropertyGridProperty::EnableSpinControl](#cmfcpropertygridproperty__enablespincontrol) method to display an editable spin button control at the right edge of the property.  \n  \n##  <a name=\"cmfcpropertygridproperty__enable\"></a>  CMFCPropertyGridProperty::Enable  \n Enables or disables a property.  \n  \n```  \nvoid Enable(BOOL bEnable=TRUE);\n```  \n  \n### Parameters  \n [in] `bEnable`  \n `TRUE` to enable the property; `FALSE` to disable the property. Disabled properties do not respond to mouse or keyboard input. The default value is `TRUE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__enablespincontrol\"></a>  CMFCPropertyGridProperty::EnableSpinControl  \n Enables or disables a spin button control that is used to modify a property value.  \n  \n```  \nvoid EnableSpinControl(\n    BOOL bEnable=TRUE,  \n    int nMin=0,  \n    int nMax=0);\n```  \n  \n### Parameters  \n [in] `bEnable`  \n `TRUE` to enable the spin button control; `FALSE` to disable the spin button control. The default value is `TRUE`.  \n  \n [in] `nMin`  \n The minimum value of the spin button control. The default value is 0.  \n  \n [in] `nMax`  \n The maximum value of the spin button control. The default value is 0.  \n  \n### Remarks  \n The framework automatically creates a spin button control when a property is about to be edited.  \n  \n The property type, which is specified by the `varValue` parameter of the [CMFCPropertyGridProperty::CMFCPropertyGridProperty](#cmfcpropertygridproperty__cmfcpropertygridproperty) constructor, must be a supported variant type. Otherwise, this method asserts in debug mode. The supported types include `VT_INT`, `VT_UINT`, `VT_I2`, `VT_I4`, `VT_UI2`, and `VT_UI4`.  \n  \n##  <a name=\"cmfcpropertygridproperty__expand\"></a>  CMFCPropertyGridProperty::Expand  \n Expands or collapses a property that contains sub-properties.  \n  \n```  \nvoid Expand(BOOL bExpand=TRUE);\n```  \n  \n### Parameters  \n [in] `bExpand`  \n `TRUE` to expand the property; FALSE to collapse the property. The default value is `TRUE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__formatproperty\"></a>  CMFCPropertyGridProperty::FormatProperty  \n Formats the text representation of a property value.  \n  \n```  \nvirtual CString FormatProperty();\n```  \n  \n### Return Value  \n The text representation of the property value.  \n  \n### Remarks  \n This method is called by the framework before the property value is displayed.  \n  \n##  <a name=\"cmfcpropertygridproperty__getdata\"></a>  CMFCPropertyGridProperty::GetData  \n Retrieves a `DWORD` value that is associated with a property.  \n  \n```  \nDWORD_PTR GetData() const;\n\n \n```  \n  \n### Return Value  \n A `DWORD` value.  \n  \n### Remarks  \n The data that is returned is an application-specific value, such as a number or a pointer to other data. Specify the data value when you construct the property or when you call the [CMFCPropertyGridProperty::SetData](#cmfcpropertygridproperty__setdata) method.  \n  \n##  <a name=\"cmfcpropertygridproperty__getdescription\"></a>  CMFCPropertyGridProperty::GetDescription  \n Retrieves a property description.  \n  \n```  \nconst CString& GetDescription() const;\n\n \n```  \n  \n### Return Value  \n A text string that contains the property description.  \n  \n### Remarks  \n Property list control also uses this method to display the description of the property.  \n  \n##  <a name=\"cmfcpropertygridproperty__getexpandedsubitems\"></a>  CMFCPropertyGridProperty::GetExpandedSubItems  \n Retrieves the number of expanded sub-items.  \n  \n```  \nint GetExpandedSubItems(BOOL bIncludeHidden=TRUE) const;\n\n \n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `bIncludeHidden`|`TRUE` to include the hidden sub-items in the count; otherwise, `FALSE`. The default value is `TRUE`.|  \n  \n### Return Value  \n The number of expanded sub-items.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__gethierarchylevel\"></a>  CMFCPropertyGridProperty::GetHierarchyLevel  \n Retrieves the zero-based index of the property's hierarchy level.  \n  \n```  \nint GetHierarchyLevel() const;\n\n \n```  \n  \n### Return Value  \n The property's hierarchical level.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__getname\"></a>  CMFCPropertyGridProperty::GetName  \n Retrieves the name of the property.  \n  \n```  \nLPCTSTR GetName() const;\n\n \n```  \n  \n### Return Value  \n Pointer to a string that contains the name of the property.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__getnametooltip\"></a>  CMFCPropertyGridProperty::GetNameTooltip  \n Called by the framework to display the name of the property in a tooltip.  \n  \n```  \nvirtual CString GetNameTooltip();\n```  \n  \n### Return Value  \n A string that contains the property name. By default, the return value is the empty string.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__getoption\"></a>  CMFCPropertyGridProperty::GetOption  \n Retrieves the text of the option that is specified by an index.  \n  \n```  \nLPCTSTR GetOption(int nIndex) const;\n\n \n```  \n  \n### Parameters  \n `nIndex`  \n The zero-based index of the property list item (option) to retrieve.  \n  \n### Return Value  \n Pointer to a string that contains the option text.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__getoptioncount\"></a>  CMFCPropertyGridProperty::GetOptionCount  \n Retrieves the number of options that belong to a property.  \n  \n```  \nint GetOptionCount() const;\n\n \n```  \n  \n### Return Value  \n The number of property list items (options) that are contained in the property control.  \n  \n### Remarks  \n Call the [CMFCPropertyGridProperty::AddOption](#cmfcpropertygridproperty__addoption) method to add items to the property list. Call the [CMFCPropertyGridProperty::RemoveAllOptions](#cmfcpropertygridproperty__removealloptions) method to remove all items.  \n  \n##  <a name=\"cmfcpropertygridproperty__getoriginalvalue\"></a>  CMFCPropertyGridProperty::GetOriginalValue  \n Retrieves the initial value of the current property.  \n  \n```  \nconst COleVariant& GetOriginalValue() const;\n\n \n```  \n  \n### Return Value  \n The original value of the current property.  \n  \n### Remarks  \n Use this method to undo the effect of an edit operation that changes the value of the current property.  \n  \n The original value of the current property is set by the [CMFCPropertyGridProperty::CMFCPropertyGridProperty](#cmfcpropertygridproperty__cmfcpropertygridproperty) constructor, modified by the [CMFCPropertyGridProperty::SetOriginalValue](#cmfcpropertygridproperty__setoriginalvalue) method, and reset by the [CMFCPropertyGridProperty::ResetOriginalValue](#cmfcpropertygridproperty__resetoriginalvalue) method.  \n  \n##  <a name=\"cmfcpropertygridproperty__getparent\"></a>  CMFCPropertyGridProperty::GetParent  \n Retrieves a pointer to a parent property.  \n  \n```  \nCMFCPropertyGridProperty* GetParent() const;\n\n \n```  \n  \n### Return Value  \n A pointer to a parent property object, or `NULL` for the top-level property.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__getrect\"></a>  CMFCPropertyGridProperty::GetRect  \n Retrieves the bounding rectangle of a property.  \n  \n```  \nCRect GetRect() const;\n\n \n```  \n  \n### Return Value  \n A [CRect](../../atl-mfc-shared/reference/crect-class.md) object that describes the bounding rectangle.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__getsubitem\"></a>  CMFCPropertyGridProperty::GetSubItem  \n Retrieves a sub-property identified by a zero-based index.  \n  \n```  \nCMFCPropertyGridProperty* GetSubItem(int nIndex) const;\n\n \n```  \n  \n### Parameters  \n [in] `nIndex`  \n The zero-based index of the property to retrieve. This parameter is invalid if it is less than zero or greater than or equal to the number of sub-properties.  \n  \n### Return Value  \n A pointer to a property object that is a child item of this property.  \n  \n -or-  \n  \n In retail mode, `NULL` if the `nIndex` parameter is invalid. In debug mode, this method asserts.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__getsubitemscount\"></a>  CMFCPropertyGridProperty::GetSubItemsCount  \n Retrieves the number of sub-items.  \n  \n```  \nint GetSubItemsCount() const;\n\n \n```  \n  \n### Return Value  \n The number of child items.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__getvalue\"></a>  CMFCPropertyGridProperty::GetValue  \n Retrieves a property value.  \n  \n```  \nvirtual const _variant_t& GetValue() const;\n\n \n```  \n  \n### Return Value  \n A variant that contains the property value.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__getvaluetooltip\"></a>  CMFCPropertyGridProperty::GetValueTooltip  \n Called by the framework to retrieve the text representation of the property value that is then displayed in a tooltip.  \n  \n```  \nvirtual CString GetValueTooltip();\n```  \n  \n### Return Value  \n A `CString` object containing the textual representation of the property value. By default, this value is the empty string.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__hasbutton\"></a>  CMFCPropertyGridProperty::HasButton  \n Indicates whether a property contains a button.  \n  \n```  \nvirtual BOOL HasButton() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if a property contains a button (or property list); otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__hittest\"></a>  CMFCPropertyGridProperty::HitTest  \n Points to the property object that corresponds to the property list item that corresponds to a point.  \n  \n```  \nCMFCPropertyGridProperty* HitTest(\n    CPoint point,  \n    CMFCPropertyGridProperty::ClickArea* pnArea=NULL);\n\n \nCMFCPropertyGridProperty* HitTest(\n    CPoint pt,  \n    CMFCPropertyGridProperty::ClickArea* pnArea=NULL,  \n    BOOL bPropsOnly=FALSE) const;\n\n \n```  \n  \n### Parameters  \n [in] `point`  \n The point to test, in client coordinates. This parameter is typically the current mouse pointer location.  \n  \n [in] `pt`  \n The point to test, in client coordinates.  \n  \n [out] `pnArea`  \n When this method returns, indicates the area that contains the specified point. For more information, see Remarks. The default value is `NULL`.  \n  \n [in] `bPropsOnly`  \n `TRUE` to test any area in the property control; `FALSE` to test only the description area. The default value is `FALSE`.  \n  \n### Return Value  \n A pointer to a property object or `NULL`.  \n  \n### Remarks  \n By default, this method tests property sub-items if the specified point is not found within any of the property items.  \n  \n The following table lists the values that can be returned to the `pnArea` parameter.  \n  \n|Area|Description|  \n|----------|-----------------|  \n|`ClickArea::ClickExpandBox`|The expand box control, which is designated by a plus sign (+).|  \n|`ClickArea::ClickName`|The property name.|  \n|`ClickArea::ClickValue`|The property value.|  \n  \n##  <a name=\"cmfcpropertygridproperty__init\"></a>  CMFCPropertyGridProperty::Init  \n Called by the framework to initialize a property object.  \n  \n```  \nvoid Init();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__isallowedit\"></a>  CMFCPropertyGridProperty::IsAllowEdit  \n Indicates whether a property is editable.  \n  \n```  \nBOOL IsAllowEdit() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the property is editable; otherwise `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__isenabled\"></a>  CMFCPropertyGridProperty::IsEnabled  \n Indicates whether a property is enabled or disabled.  \n  \n```  \nBOOL IsEnabled() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the property is enabled; `FALSE` if the property is disabled.  \n  \n### Remarks  \n Tells whether a property is enabled or disabled.  \n  \n##  <a name=\"cmfcpropertygridproperty__isexpanded\"></a>  CMFCPropertyGridProperty::IsExpanded  \n Indicates whether a property is expanded or collapsed.  \n  \n```  \nBOOL IsExpanded() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the property is expanded; `FALSE` if the property is collapsed.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__isgroup\"></a>  CMFCPropertyGridProperty::IsGroup  \n Indicates whether the current property represents a group.  \n  \n```  \nBOOL IsGroup() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the current property object represents a group; `FALSE` if the property represents a value.  \n  \n### Remarks  \n A *group* is a collection of related properties in a property grid control. If the control is displayed hierarchically, the *group name* is displayed as a category title in the row above the group.  \n  \n##  <a name=\"cmfcpropertygridproperty__isinplaceediting\"></a>  CMFCPropertyGridProperty::IsInPlaceEditing  \n Indicates whether the current property is editable.  \n  \n```  \nBOOL IsInPlaceEditing() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the current property is editable; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__ismodified\"></a>  CMFCPropertyGridProperty::IsModified  \n Indicates whether the current property is modified.  \n  \n```  \nBOOL IsModified() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the property is modified; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__isparentexpanded\"></a>  CMFCPropertyGridProperty::IsParentExpanded  \n Indicates whether the parents of the current property are expanded.  \n  \n```  \nBOOL IsParentExpanded() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if all parents of the current property are expanded; `FALSE` if the parent properties are collapsed.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__isselected\"></a>  CMFCPropertyGridProperty::IsSelected  \n Indicates whether the current property is selected.  \n  \n```  \nvirtual BOOL IsSelected() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the current property is selected; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__issubitem\"></a>  CMFCPropertyGridProperty::IsSubItem  \n Indicates whether the specified property is a sub-item of the current property.  \n  \n```  \nBOOL IsSubItem(CMFCPropertyGridProperty* pProp) const;\n\n \n```  \n  \n### Parameters  \n [in] `pProp`  \n A pointer to a property.  \n  \n### Return Value  \n `TRUE` if the specified property is a sub-item of the current property; otherwise, `FALSE`.  \n  \n##  <a name=\"cmfcpropertygridproperty__isvaluechanged\"></a>  CMFCPropertyGridProperty::IsValueChanged  \n Indicates whether the value of the current property has changed.  \n  \n```  \nvirtual BOOL IsValueChanged() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the value of the current property has changed; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__isvisible\"></a>  CMFCPropertyGridProperty::IsVisible  \n Indicates whether the current property is visible.  \n  \n```  \nBOOL IsVisible() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the current property is visible; otherwise; `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__m_strformatdouble\"></a>  CMFCPropertyGridProperty::m_strFormatDouble  \n Holds a format string for a value of type double.  \n  \n```  \nstatic CString m_strFormatDouble;  \n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__m_strformatfloat\"></a>  CMFCPropertyGridProperty::m_strFormatFloat  \n Holds a format string for a value of type float.  \n  \n```  \nstatic CString m_strFormatFloat;  \n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__m_strformatlong\"></a>  CMFCPropertyGridProperty::m_strFormatLong  \n Holds a format string for a value of type long.  \n  \n```  \nstatic CString m_strFormatLong;  \n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__m_strformatshort\"></a>  CMFCPropertyGridProperty::m_strFormatShort  \n Holds a format string for a value of type short.  \n  \n```  \nstatic CString m_strFormatShort;  \n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__onclickbutton\"></a>  CMFCPropertyGridProperty::OnClickButton  \n Called by the framework when the user clicks a button that is contained in a property.  \n  \n```  \nvirtual void OnClickButton(CPoint point);\n```  \n  \n### Parameters  \n [in] `point`  \n A point, in client coordinates.  \n  \n### Remarks  \n By default, this method does nothing.  \n  \n##  <a name=\"cmfcpropertygridproperty__onclickname\"></a>  CMFCPropertyGridProperty::OnClickName  \n Called by a parent property list control when a user clicks the name field of a property.  \n  \n```  \nvirtual void OnClickName(CPoint C);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `C`|A point, in client coordinates.|  \n  \n### Remarks  \n By default, this method does nothing.  \n  \n##  <a name=\"cmfcpropertygridproperty__onclickvalue\"></a>  CMFCPropertyGridProperty::OnClickValue  \n Called by a parent property list control when a user clicks the value field of a property.  \n  \n```  \nvirtual BOOL OnClickValue(\n    UINT uiMsg,  \n    CPoint point);\n```  \n  \n### Parameters  \n [in] `uiMsg`  \n A mouse message.  \n  \n [in] `point`  \n A point, in client coordinates.  \n  \n### Return Value  \n `TRUE` if the specified mouse message is processed by this method; otherwise, `FALSE`.  \n  \n### Remarks  \n By default, this method returns `FALSE` if the current property is not editable. Otherwise, the edit or spin control that is associated with this property processes the specified mouse message, and then this method returns `TRUE`.  \n  \n##  <a name=\"cmfcpropertygridproperty__onclosecombo\"></a>  CMFCPropertyGridProperty::OnCloseCombo  \n Called by the framework when a combo box that is contained in a property is closed.  \n  \n```  \nvirtual void OnCloseCombo();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__onctlcolor\"></a>  CMFCPropertyGridProperty::OnCtlColor  \n Called by the framework when it must retrieve a brush to fill the background color of a property.  \n  \n```  \nvirtual HBRUSH OnCtlColor(\n    CDC* pDC,  \n    UINT nCtlColor);\n```  \n  \n### Parameters  \n [in] `pDC`  \n Pointer to a device context.  \n  \n [in] `nCtlColor`  \n (This parameter is not used.)  \n  \n### Return Value  \n The handle to a brush if this method is successful; otherwise, `NULL`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__ondblclk\"></a>  CMFCPropertyGridProperty::OnDblClk  \n Called by the framework when the user double clicks a property.  \n  \n```  \nvirtual BOOL OnDblClk(CPoint point);\n```  \n  \n### Parameters  \n [in] `point`  \n A point, in client coordinates.  \n  \n### Return Value  \n `TRUE` if this method is successful; otherwise, `FALSE`.  \n  \n### Remarks  \n By default, this method selects the next property item in the property list control.  \n  \n##  <a name=\"cmfcpropertygridproperty__ondestroywindow\"></a>  CMFCPropertyGridProperty::OnDestroyWindow  \n Called by the framework when a property is destroyed or when editing is finished.  \n  \n```  \nvirtual void OnDestroyWindow();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__ondrawbutton\"></a>  CMFCPropertyGridProperty::OnDrawButton  \n Called by the framework to draw a button that is contained in a property.  \n  \n```  \nvirtual void OnDrawButton(\n    CDC* pDC,  \n    CRect rectButton);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rectButton`  \n A bounding rectangle that specifies where to draw a button.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__ondrawdescription\"></a>  CMFCPropertyGridProperty::OnDrawDescription  \n Called by the framework to draw the property description.  \n  \n```  \nvirtual void OnDrawDescription(\n    CDC* pDC,  \n    CRect rect);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n A bounding rectangle that specifies where to draw the property description.  \n  \n### Remarks  \n By default, this method draws the property name and description in the font used by the parent property list control. The property description is drawn in regular style and the property name is drawn in bold style.  \n  \n##  <a name=\"cmfcpropertygridproperty__ondrawexpandbox\"></a>  CMFCPropertyGridProperty::OnDrawExpandBox  \n Called by the framework to draw an expand box control near a property that contains sub-properties.  \n  \n```  \nvirtual void OnDrawExpandBox(\n    CDC* pDC,  \n    CRect rectExpand);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rectExpand`  \n A bounding rectangle that specifies where to draw the expand box control.  \n  \n### Remarks  \n Click the expand box control to expand or collapse a list of sub-properties. The expand box control is designated by a square that contains a plus (+) or minus (-) sign. A plus sign indicates that the property can be expanded to show a list of sub-properties. A minus sign indicates that the list can be collapsed to show only the property.  \n  \n##  <a name=\"cmfcpropertygridproperty__ondrawname\"></a>  CMFCPropertyGridProperty::OnDrawName  \n Called by the framework to display the property name.  \n  \n```  \nvirtual void OnDrawName(\n    CDC* pDC,  \n    CRect rect);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n A bounding rectangle that specifies where to draw the property name.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__ondrawvalue\"></a>  CMFCPropertyGridProperty::OnDrawValue  \n Called by the framework to display the property value.  \n  \n```  \nvirtual void OnDrawValue(\n    CDC* pDC,  \n    CRect rect);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n A bounding rectangle that specifies where to draw the property value.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__onedit\"></a>  CMFCPropertyGridProperty::OnEdit  \n Called by the framework when the user is about to modify a property value.  \n  \n```  \nvirtual BOOL OnEdit(LPPOINT lptClick);\n```  \n  \n### Parameters  \n [in] `lptClick`  \n (This parameter is not used.) A pointer to a point, in client coordinates.  \n  \n### Return Value  \n `TRUE` if the edit operation starts successfully; otherwise, `FALSE`.  \n  \n### Remarks  \n This function is called by the framework when the user is about to modify a property value. By default, this method starts the appropriate editor for a combo box control or a spin control.  \n  \n##  <a name=\"cmfcpropertygridproperty__onendedit\"></a>  CMFCPropertyGridProperty::OnEndEdit  \n Called by the framework when the user is finished modifying a property value.  \n  \n```  \nvirtual BOOL OnEndEdit();\n```  \n  \n### Return Value  \n This method always returns `TRUE`.  \n  \n### Remarks  \n By default, this method destroys the current editing control and then returns `TRUE`.  \n  \n##  <a name=\"cmfcpropertygridproperty__onkillfocus\"></a>  CMFCPropertyGridProperty::OnKillFocus  \n Called by the framework when the property loses the input focus.  \n  \n```  \nvirtual BOOL OnKillFocus(CWnd*);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `CWnd`|(Not used.) Pointer to a window.|  \n  \n### Return Value  \n This method always returns `TRUE`.  \n  \n### Remarks  \n By default, this method does nothing and then returns `TRUE`. If you override this method, return `TRUE` if the framework can end the edit operation when the property loses the input focus.  \n  \n##  <a name=\"cmfcpropertygridproperty__onkillselection\"></a>  CMFCPropertyGridProperty::OnKillSelection  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnKillSelection(CMFCPropertyGridProperty*);\n```  \n  \n### Parameters  \n [in] `CMFCPropertyGridProperty*`  \n  \n### Remarks  \n By default, this method does nothing.  \n  \n##  <a name=\"cmfcpropertygridproperty__onpossizechanged\"></a>  CMFCPropertyGridProperty::OnPosSizeChanged  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnPosSizeChanged(CRect);\n```  \n  \n### Parameters  \n [in] `CRect`  \n  \n### Remarks  \n By default, this method does nothing.  \n  \n##  <a name=\"cmfcpropertygridproperty__onrclickname\"></a>  CMFCPropertyGridProperty::OnRClickName  \n Called by the framework when the user clicks the right mouse button in the property name area.  \n  \n```  \nvirtual void OnRClickName(CPoint C);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `C`|A point, in client coordinates.|  \n  \n### Remarks  \n By default, this method does nothing.  \n  \n##  <a name=\"cmfcpropertygridproperty__onrclickvalue\"></a>  CMFCPropertyGridProperty::OnRClickValue  \n Called by the framework when the user clicks the right mouse button in the property value area.  \n  \n```  \nvirtual void OnRClickValue(\n    CPoint C,  \n    BOOL B);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `C`|A point, in client coordinates.|  \n|[in] `B`|A Boolean.|  \n  \n### Remarks  \n By default, this method does nothing and the `B` parameter has no predefined purpose.  \n  \n##  <a name=\"cmfcpropertygridproperty__onselectcombo\"></a>  CMFCPropertyGridProperty::OnSelectCombo  \n Called by the framework when the user selects an item from the editable combo box.  \n  \n```  \nvirtual void OnSelectCombo();\n```  \n  \n### Remarks  \n By default, this method uses the text of the selected item to update the property value.  \n  \n##  <a name=\"cmfcpropertygridproperty__onsetcursor\"></a>  CMFCPropertyGridProperty::OnSetCursor  \n Called by the framework when the mouse pointer moves to a property item.  \n  \n```  \nvirtual BOOL OnSetCursor() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the current property is a variant type or a list of values, and this method successfully loads the insertion point (I-beam) mouse cursor; otherwise, `FALSE`.  \n  \n### Remarks  \n This method supports the following variant types: `VT_INT`, `VT_I2`, `VT_I4`, `VT_UINT`, `VT_UI1`, `VT_UI2`, `VT_UI4`, `VT_R4`, `VT_R8`, and `VT_BSTR`.  \n  \n##  <a name=\"cmfcpropertygridproperty__onsetselection\"></a>  CMFCPropertyGridProperty::OnSetSelection  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnSetSelection(CMFCPropertyGridProperty*);\n```  \n  \n### Parameters  \n [in] `CMFCPropertyGridProperty*`  \n  \n### Remarks  \n By default, this method does nothing.  \n  \n##  <a name=\"cmfcpropertygridproperty__onupdatevalue\"></a>  CMFCPropertyGridProperty::OnUpdateValue  \n Called by the framework when the value of an editable property has changed.  \n  \n```  \nvirtual BOOL OnUpdateValue();\n```  \n  \n### Return Value  \n `TRUE` if this method is successful; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__pushchar\"></a>  CMFCPropertyGridProperty::PushChar  \n Called from the property list control when the property is selected and the user enters a new character.  \n  \n```  \nvirtual BOOL PushChar(UINT nChar);\n```  \n  \n### Parameters  \n [in] `nChar`  \n A character.  \n  \n### Return Value  \n `TRUE` if the edit operation is continuing; otherwise, `FALSE`.  \n  \n### Remarks  \n This method supports a property that is either a list of values or one of the following variant types: `VT_INT`, `VT_I2`, `VT_I4`, `VT_UINT`, `VT_UI1`, `VT_UI2`, `VT_UI4`, `VT_R4`, `VT_R8`, and `VT_BSTR`.  \n  \n##  <a name=\"cmfcpropertygridproperty__redraw\"></a>  CMFCPropertyGridProperty::Redraw  \n Redraws the property.  \n  \n```  \nvoid Redraw();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__removealloptions\"></a>  CMFCPropertyGridProperty::RemoveAllOptions  \n Removes all options (items) from a property.  \n  \n```  \nvoid RemoveAllOptions();\n```  \n  \n### Remarks  \n Options are also known as the list items of a property list control.  \n  \n##  <a name=\"cmfcpropertygridproperty__removesubitem\"></a>  CMFCPropertyGridProperty::RemoveSubItem  \n Removes the specified sub-item.  \n  \n```  \nBOOL RemoveSubItem(\n    CMFCPropertyGridProperty*& pProp,  \n    BOOL bDelete=TRUE);\n```  \n  \n### Parameters  \n [in] `pProp`  \n Pointer to a property sub-item.  \n  \n [in] `bDelete`  \n `TRUE` to delete the property object that is specified by the `pProp` parameter; otherwise, `FALSE`. The default value is `TRUE`.  \n  \n### Return Value  \n  \n### Remarks  \n Specify `FALSE` for the `bDelete` parameter if you intend to move the specified sub-item; that is, remove the sub-item and then add it elsewhere.  \n  \n##  <a name=\"cmfcpropertygridproperty__resetoriginalvalue\"></a>  CMFCPropertyGridProperty::ResetOriginalValue  \n Restores the original value of an edited property.  \n  \n```  \nvirtual void ResetOriginalValue();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__setdata\"></a>  CMFCPropertyGridProperty::SetData  \n Associates a `DWORD` value with a property.  \n  \n```  \nvoid SetData(DWORD_PTR dwData);\n```  \n  \n### Parameters  \n [in] `dwData`  \n An application-specific 32-bit value, such as an integer or a pointer to other data.  \n  \n### Remarks  \n Use the [CMFCPropertyGridProperty::GetData](#cmfcpropertygridproperty__getdata) method to retrieve the `DWORD` value. Use the [CMFCPropertyGridCtrl::FindItemByData](../../mfc/reference/cmfcpropertygridctrl-class.md#cmfcpropertygridctrl__finditembydata) method to locate the property list item that is associated with the specified `DWORD` value.  \n  \n##  <a name=\"cmfcpropertygridproperty__setdescription\"></a>  CMFCPropertyGridProperty::SetDescription  \n Specifies the text that describes the current property.  \n  \n```  \nvoid SetDescription(const CString& strDescr);\n```  \n  \n### Parameters  \n [in] `strDescr`  \n Text that describes the current property.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__setname\"></a>  CMFCPropertyGridProperty::SetName  \n Sets the name of a property.  \n  \n```  \nvoid SetName(\n    LPCTSTR lpszName,  \n    BOOL bRedraw=TRUE);\n```  \n  \n### Parameters  \n [in] `lpszName`  \n The property name.  \n  \n [in] `bRedraw`  \n `TRUE` to redraw the property immediately; otherwise, `FALSE`. The default value is `TRUE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__setoriginalvalue\"></a>  CMFCPropertyGridProperty::SetOriginalValue  \n Sets the original value of an editable property.  \n  \n```  \nvirtual void SetOriginalValue(const COleVariant& varValue);\n```  \n  \n### Parameters  \n [in] `varValue`  \n A value.  \n  \n### Remarks  \n Use the [CMFCPropertyGridProperty::ResetOriginalValue](#cmfcpropertygridproperty__resetoriginalvalue) method to reset the original value of an edited property.  \n  \n##  <a name=\"cmfcpropertygridproperty__setvalue\"></a>  CMFCPropertyGridProperty::SetValue  \n Sets the value of a property grid property.  \n  \n```  \nvirtual void SetValue(const _variant_t& varValue);\n```  \n  \n### Parameters  \n [in] `varValue`  \n A reference to a value.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpropertygridproperty__show\"></a>  CMFCPropertyGridProperty::Show  \n Shows or hides a property.  \n  \n```  \nvoid Show(\n    BOOL bShow=TRUE,  \n    BOOL bAdjustLayout=TRUE);\n```  \n  \n### Parameters  \n [in] `bShow`  \n `TRUE` to display the current property and its sub-items; `FALSE` to hide the current property and its sub-items. The default value is `TRUE`.  \n  \n [in] `bAdjustLayout`  \n `TRUE` to recalculate how to draw the label and value of a property and then draw the property; `FALSE` to use existing calculations to draw the property. The default value is `TRUE`.  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CMFCPropertyGridCtrl Class](../../mfc/reference/cmfcpropertygridctrl-class.md)\n"}