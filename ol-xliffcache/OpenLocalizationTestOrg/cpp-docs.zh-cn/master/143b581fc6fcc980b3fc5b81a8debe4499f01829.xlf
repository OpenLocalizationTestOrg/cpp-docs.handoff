<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">143b581fc6fcc980b3fc5b81a8debe4499f01829</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\reference\message-map-macros-atl.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">63aed0cf064ce80908048cb953c1df847571ae82</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0f4ef19ca91637bd4f911efda62b549722e36df7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Message Map Macros (ATL) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Message Map Macros (ATL)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>These macros define message maps and entries.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>ALT_MSG_MAP</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Marks the beginning of an alternate message map.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>BEGIN_MSG_MAP</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Marks the beginning of the default message map.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>CHAIN_MSG_MAP_ALT</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Chains to an alternate message map in the base class.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>CHAIN_MSG_MAP_ALT_MEMBER</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Chains to an alternate message map in a data member of the class.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>CHAIN_MSG_MAP</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Chains to the default message map in the base class.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CHAIN_MSG_MAP_DYNAMIC</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Chains to the message map in another class at run time.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CHAIN_MSG_MAP_MEMBER</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Chains to the default message map in a data member of the class.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>COMMAND_CODE_HANDLER</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Maps a <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> message to a handler function, based on the notification code.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>COMMAND_HANDLER</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Maps a <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> message to a handler function, based on the notification code and the identifier of the menu item, control, or accelerator.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>COMMAND_ID_HANDLER</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Maps a <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> message to a handler function, based on the identifier of the menu item, control, or accelerator.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>COMMAND_RANGE_CODE_HANDLER</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Maps a <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> message to a handler function, based on the notification code and a contiguous range of control identifiers.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>COMMAND_RANGE_HANDLER</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Maps a <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> message to a handler function, based on a contiguous range of control identifiers.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>DECLARE_EMPTY_MSG_MAP</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Implements an empty message map.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>DEFAULT_REFLECTION_HANDLER</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Provides a default handler for reflected messages that are not handled otherwise.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>END_MSG_MAP</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Marks the end of a message map.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>FORWARD_NOTIFICATIONS</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Forwards notification messages to the parent window.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>MESSAGE_HANDLER</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Maps a Windows message to a handler function.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>MESSAGE_RANGE_HANDLER</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Maps a contiguous range of Windows messages to a handler function.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>NOTIFY_CODE_HANDLER</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Maps a <bpt id="p1">**</bpt>WM_NOTIFY<ept id="p1">**</ept> message to a handler function, based on the notification code.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>NOTIFY_HANDLER</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Maps a <bpt id="p1">**</bpt>WM_NOTIFY<ept id="p1">**</ept> message to a handler function, based on the notification code and the control identifier.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>NOTIFY_ID_HANDLER</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Maps a <bpt id="p1">**</bpt>WM_NOTIFY<ept id="p1">**</ept> message to a handler function, based on the control identifier.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>NOTIFY_RANGE_CODE_HANDLER</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Maps a <bpt id="p1">**</bpt>WM_NOTIFY<ept id="p1">**</ept> message to a handler function, based on the notification code and a contiguous range of control identifiers.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>NOTIFY_RANGE_HANDLER</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Maps a <bpt id="p1">**</bpt>WM_NOTIFY<ept id="p1">**</ept> message to a handler function, based on a contiguous range of control identifiers.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>REFLECT_NOTIFICATIONS</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Reflects notification messages back to the window that sent them.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>REFLECTED_COMMAND_CODE_HANDLER</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Maps a reflected <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> message to a handler function, based on the notification code.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>REFLECTED_COMMAND_HANDLER</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Maps a reflected <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> message to a handler function, based on the notification code and the identifier of the menu item, control, or accelerator.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>REFLECTED_COMMAND_ID_HANDLER</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Maps a reflected <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> message to a handler function, based on the identifier of the menu item, control, or accelerator.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>REFLECTED_COMMAND_RANGE_CODE_HANDLER</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Maps a reflected <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> message to a handler function, based on the notification code and a contiguous range of control identifiers.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>REFLECTED_COMMAND_RANGE_HANDLER</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Maps a reflected <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> message to a handler function, based on a contiguous range of control identifiers.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>REFLECTED_NOTIFY_CODE_HANDLER</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Maps a reflected <bpt id="p1">**</bpt>WM_NOTIFY<ept id="p1">**</ept> message to a handler function, based on the notification code.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>REFLECTED_NOTIFY_HANDLER</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Maps a reflected <bpt id="p1">**</bpt>WM_NOTIFY<ept id="p1">**</ept> message to a handler function, based on the notification code and the control identifier.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>REFLECTED_NOTIFY_ID_HANDLER</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Maps a reflected <bpt id="p1">**</bpt>WM_NOTIFY<ept id="p1">**</ept> message to a handler function, based on the control identifier.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>REFLECTED_NOTIFY_RANGE_CODE_HANDLER</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Maps a reflected <bpt id="p1">**</bpt>WM_NOTIFY<ept id="p1">**</ept> message to a handler function, based on the notification code and a contiguous range of control identifiers.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>REFLECTED_NOTIFY_RANGE_HANDLER</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Maps a reflected <bpt id="p1">**</bpt>WM_NOTIFY<ept id="p1">**</ept> message to a handler function, based on a contiguous range of control identifiers.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>ALT_MSG_MAP</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Marks the beginning of an alternate message map.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>[in] The message map identifier.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>ATL identifies each message map by a number.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The default message map (declared with the <ph id="ph1">`BEGIN_MSG_MAP`</ph> macro) is identified by 0.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>An alternate message map is identified by <ph id="ph1">`msgMapID`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Message maps are used to process messages sent to a window.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">[</bpt>CContainedWindow<ept id="p1">](../../atl/reference/ccontainedwindowt-class.md)</ept> allows you to specify the identifier of a message map in the containing object.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CContainedWindow::WindowProc<ept id="p1">](ccontainedwindowt-class.md#ccontainedwindowt__windowproc)</ept> then uses this message map to direct the contained window's messages either to the appropriate handler function or to another message map.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For a list of macros that declare handler functions, see <bpt id="p1">[</bpt>BEGIN_MSG_MAP<ept id="p1">](#begin_msg_map)</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Always begin a message map with <ph id="ph1">`BEGIN_MSG_MAP`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>You can then declare subsequent alternate message maps.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>END_MSG_MAP<ept id="p1">](#end_msg_map)</ept> macro marks the end of the message map.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Note that there is always exactly one instance of <ph id="ph1">`BEGIN_MSG_MAP`</ph> and <ph id="ph2">`END_MSG_MAP`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For more information about using message maps in ATL, see <bpt id="p1">[</bpt>Message Maps<ept id="p1">](../../atl/message-maps-atl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The following example shows the default message map and one alternate message map, each containing one handler function:</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#98</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The next example shows two alternate message maps.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The default message map is empty.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#99</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>BEGIN_MSG_MAP</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Marks the beginning of the default message map.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>[in] The name of the class containing the message map.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CWindowImpl::WindowProc<ept id="p1">](cwindowimpl-class.md#cwindowimpl__windowproc)</ept> uses the default message map to process messages sent to the window.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The message map directs messages either to the appropriate handler function or to another message map.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The following macros map a message to a handler function.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>This function must be defined in <ph id="ph1">`theClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Macro</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>MESSAGE_HANDLER</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Maps a Windows message to a handler function.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>MESSAGE_RANGE_HANDLER</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Maps a contiguous range of Windows messages to a handler function.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>COMMAND_HANDLER</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Maps a <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> message to a handler function, based on the notification code and the identifier of the menu item, control, or accelerator.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>COMMAND_ID_HANDLER</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Maps a <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> message to a handler function, based on the identifier of the menu item, control, or accelerator.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>COMMAND_CODE_HANDLER</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Maps a <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> message to a handler function, based on the notification code.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>COMMAND_RANGE_HANDLER</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Maps a contiguous range of <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> messages to a handler function, based on the identifier of the menu item, control, or accelerator.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>NOTIFY_HANDLER</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Maps a <bpt id="p1">**</bpt>WM_NOTIFY<ept id="p1">**</ept> message to a handler function, based on the notification code and the control identifier.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>NOTIFY_ID_HANDLER</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Maps a <bpt id="p1">**</bpt>WM_NOTIFY<ept id="p1">**</ept> message to a handler function, based on the control identifier.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>NOTIFY_CODE_HANDLER</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Maps a <bpt id="p1">**</bpt>WM_NOTIFY<ept id="p1">**</ept> message to a handler function, based on the notification code.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>NOTIFY_RANGE_HANDLER</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Maps a contiguous range of <bpt id="p1">**</bpt>WM_NOTIFY<ept id="p1">**</ept> messages to a handler function, based on the control identifier.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The following macros direct messages to another message map.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>This process is called "chaining."</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Macro</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>CHAIN_MSG_MAP</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Chains to the default message map in the base class.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>CHAIN_MSG_MAP_MEMBER</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Chains to the default message map in a data member of the class.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>CHAIN_MSG_MAP_ALT</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Chains to an alternate message map in the base class.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>CHAIN_MSG_MAP_ALT_MEMBER</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Chains to an alternate message map in a data member of the class.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>CHAIN_MSG_MAP_DYNAMIC</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Chains to the default message map in another class at run time.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The following macros direct "reflected" messages from the parent window.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>For example, a control normally sends notification messages to its parent window for processing, but the parent window can reflect the message back to the control.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Macro</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>REFLECTED_COMMAND_HANDLER</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Maps a reflected <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> message to a handler function, based on the notification code and the identifier of the menu item, control, or accelerator.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>REFLECTED_COMMAND_ID_HANDLER</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Maps a reflected <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> message to a handler function, based on the identifier of the menu item, control, or accelerator.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>REFLECTED_COMMAND_CODE_HANDLER</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Maps a reflected <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> message to a handler function, based on the notification code.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>REFLECTED_COMMAND_RANGE_HANDLER</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Maps a reflected <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> message to a handler function, based on a contiguous range of control identifiers.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>REFLECTED_COMMAND_RANGE_CODE_HANDLER</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Maps a reflected <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> message to a handler function, based on the notification code and a contiguous range of control identifiers.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>REFLECTED_NOTIFY_HANDLER</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Maps a reflected <bpt id="p1">**</bpt>WM_NOTIFY<ept id="p1">**</ept> message to a handler function, based on the notification code and the control identifier.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>REFLECTED_NOTIFY_ID_HANDLER</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Maps a reflected <bpt id="p1">**</bpt>WM_NOTIFY<ept id="p1">**</ept> message to a handler function, based on the control identifier.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>REFLECTED_NOTIFY_CODE_HANDLER</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Maps a reflected <bpt id="p1">**</bpt>WM_NOTIFY<ept id="p1">**</ept> message to a handler function, based on the notification code.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>REFLECTED_NOTIFY_RANGE_HANDLER</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Maps a reflected <bpt id="p1">**</bpt>WM_NOTIFY<ept id="p1">**</ept> message to a handler function, based on a contiguous range of control identifiers.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>REFLECTED_NOTIFY_RANGE_CODE_HANDLER</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Maps a reflected <bpt id="p1">**</bpt>WM_NOTIFY<ept id="p1">**</ept> message to a handler function, based on the notification code and a contiguous range of control identifiers.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#102</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`CMyExtWindow`</ph> object receives a <ph id="ph2">`WM_PAINT`</ph> message, the message is directed to <ph id="ph3">`CMyExtWindow::OnPaint`</ph> for the actual processing.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`OnPaint`</ph> indicates the message requires further processing, the message will then be directed to the default message map in <ph id="ph2">`CMyBaseWindow`</ph>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>In addition to the default message map, you can define an alternate message map with <bpt id="p1">[</bpt>ALT_MSG_MAP<ept id="p1">](#alt_msg_map)</ept>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Always begin a message map with <ph id="ph1">`BEGIN_MSG_MAP`</ph>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>You can then declare subsequent alternate message maps.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The following example shows the default message map and one alternate message map, each containing one handler function:</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#98</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The next example shows two alternate message maps.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The default message map is empty.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#99</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>END_MSG_MAP<ept id="p1">](#end_msg_map)</ept> macro marks the end of the message map.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Note that there is always exactly one instance of <ph id="ph1">`BEGIN_MSG_MAP`</ph> and <ph id="ph2">`END_MSG_MAP`</ph>.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>For more information about using message maps in ATL, see <bpt id="p1">[</bpt>Message Maps<ept id="p1">](../../atl/message-maps-atl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>CHAIN_MSG_MAP_ALT</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Defines an entry in a message map.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>[in] The name of the base class containing the message map.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>[in] The message map identifier.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>directs messages to an alternate message map in a base class.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>You must have declared this alternate message map with <bpt id="p1">[</bpt>ALT_MSG_MAP(msgMapID)<ept id="p1">](#alt_msg_map)</ept>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>To direct messages to a base class's default message map (declared with <bpt id="p1">[</bpt>BEGIN_MSG_MAP<ept id="p1">](#begin_msg_map)</ept>), use <ph id="ph1">`CHAIN_MSG_MAP`</ph>.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>For an example, see <bpt id="p1">[</bpt>CHAIN_MSG_MAP<ept id="p1">](#chain_msg_map)</ept>.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Always begin a message map with <ph id="ph1">`BEGIN_MSG_MAP`</ph>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>You can then declare subsequent alternate message maps with <ph id="ph1">`ALT_MSG_MAP`</ph>.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>END_MSG_MAP<ept id="p1">](#end_msg_map)</ept> macro marks the end of the message map.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Every message map must have exactly one instance of <ph id="ph1">`BEGIN_MSG_MAP`</ph> and <ph id="ph2">`END_MSG_MAP`</ph>.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>For more information about using message maps in ATL, see <bpt id="p1">[</bpt>Message Maps<ept id="p1">](../../atl/message-maps-atl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>CHAIN_MSG_MAP_ALT_MEMBER</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Defines an entry in a message map.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>[in] The name of the data member containing the message map.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>[in] The message map identifier.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>directs messages to an alternate message map in a data member.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>You must have declared this alternate message map with <bpt id="p1">[</bpt>ALT_MSG_MAP(msgMapID)<ept id="p1">](#alt_msg_map)</ept>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>To direct messages to a data member's default message map (declared with <bpt id="p1">[</bpt>BEGIN_MSG_MAP<ept id="p1">](#begin_msg_map)</ept>), use <ph id="ph1">`CHAIN_MSG_MAP_MEMBER`</ph>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>For an example, see <bpt id="p1">[</bpt>CHAIN_MSG_MAP_MEMBER<ept id="p1">](#chain_msg_map_member)</ept>.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Always begin a message map with <ph id="ph1">`BEGIN_MSG_MAP`</ph>.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>You can then declare subsequent alternate message maps with <ph id="ph1">`ALT_MSG_MAP`</ph>.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>END_MSG_MAP<ept id="p1">](#end_msg_map)</ept> macro marks the end of the message map.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Every message map must have exactly one instance of <ph id="ph1">`BEGIN_MSG_MAP`</ph> and <ph id="ph2">`END_MSG_MAP`</ph>.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>For more information about using message maps in ATL, see <bpt id="p1">[</bpt>Message Maps<ept id="p1">](../../atl/message-maps-atl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>CHAIN_MSG_MAP</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Defines an entry in a message map.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>[in] The name of the base class containing the message map.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>directs messages to a base class's default message map (declared with <bpt id="p1">[</bpt>BEGIN_MSG_MAP<ept id="p1">](#begin_msg_map)</ept>).</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>To direct messages to a base class's alternate message map (declared with <bpt id="p1">[</bpt>ALT_MSG_MAP<ept id="p1">](#alt_msg_map)</ept>), use <bpt id="p2">[</bpt>CHAIN_MSG_MAP_ALT<ept id="p2">](#chain_msg_map_alt)</ept>.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Always begin a message map with <ph id="ph1">`BEGIN_MSG_MAP`</ph>.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>You can then declare subsequent alternate message maps with <ph id="ph1">`ALT_MSG_MAP`</ph>.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>END_MSG_MAP<ept id="p1">](#end_msg_map)</ept> macro marks the end of the message map.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Every message map must have exactly one instance of <ph id="ph1">`BEGIN_MSG_MAP`</ph> and <ph id="ph2">`END_MSG_MAP`</ph>.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>For more information about using message maps in ATL, see <bpt id="p1">[</bpt>Message Maps<ept id="p1">](../../atl/message-maps-atl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#107</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>This example illustrates the following:</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>If a window procedure is using <ph id="ph1">`CMyClass`</ph>'s default message map and <ph id="ph2">`OnPaint`</ph> does not handle a message, the message is directed to <ph id="ph3">`CMyBaseClass`</ph>'s default message map for processing.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>If a window procedure is using the first alternate message map in <ph id="ph1">`CMyClass`</ph>, all messages are directed to <ph id="ph2">`CMyBaseClass`</ph>'s default message map.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>If a window procedure is using <ph id="ph1">`CMyClass`</ph>'s second alternate message map and <ph id="ph2">`OnChar`</ph> does not handle a message, the message is directed to the specified alternate message map in <ph id="ph3">`CMyBaseClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>must have declared this message map with <ph id="ph1">`ALT_MSG_MAP(1)`</ph>.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>CHAIN_MSG_MAP_DYNAMIC</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Defines an entry in a message map.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>dynaChainID</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>[in] The unique identifier for an object's message map.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>directs messages, at run time, to the default message map in another object.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The object and its message map are associated with <bpt id="p1">*</bpt>dynaChainID<ept id="p1">*</ept>, which you define through <bpt id="p2">[</bpt>CDynamicChain::SetChainEntry<ept id="p2">](cdynamicchain-class.md#cdynamicchain__setchainentry)</ept>.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>You must derive your class from <ph id="ph1">`CDynamicChain`</ph> in order to use <ph id="ph2">`CHAIN_MSG_MAP_DYNAMIC`</ph>.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>For an example, see the <bpt id="p1">[</bpt>CDynamicChain<ept id="p1">](../../atl/reference/cdynamicchain-class.md)</ept> overview.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Always begin a message map with <bpt id="p1">[</bpt>BEGIN_MSG_MAP<ept id="p1">](#begin_msg_map)</ept>.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>You can then declare subsequent alternate message maps with <ph id="ph1">`ALT_MSG_MAP`</ph>.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>END_MSG_MAP<ept id="p1">](#end_msg_map)</ept> macro marks the end of the message map.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Every message map must have exactly one instance of <ph id="ph1">`BEGIN_MSG_MAP`</ph> and <ph id="ph2">`END_MSG_MAP`</ph>.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>For more information about using message maps in ATL, see <bpt id="p1">[</bpt>Message Maps<ept id="p1">](../../atl/message-maps-atl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>CHAIN_MSG_MAP_MEMBER</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Defines an entry in a message map.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>[in] The name of the data member containing the message map.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>directs messages to a data member's default message map (declared with <bpt id="p1">[</bpt>BEGIN_MSG_MAP<ept id="p1">](#begin_msg_map)</ept>).</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>To direct messages to a data member's alternate message map (declared with <bpt id="p1">[</bpt>ALT_MSG_MAP<ept id="p1">](#alt_msg_map)</ept>), use <bpt id="p2">[</bpt>CHAIN_MSG_MAP_ALT_MEMBER<ept id="p2">](#chain_msg_map_alt_member)</ept>.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Always begin a message map with <ph id="ph1">`BEGIN_MSG_MAP`</ph>.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>You can then declare subsequent alternate message maps with <ph id="ph1">`ALT_MSG_MAP`</ph>.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>END_MSG_MAP<ept id="p1">](#end_msg_map)</ept> macro marks the end of the message map.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Every message map must have exactly one instance of <ph id="ph1">`BEGIN_MSG_MAP`</ph> and <ph id="ph2">`END_MSG_MAP`</ph>.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>For more information about using message maps in ATL, see <bpt id="p1">[</bpt>Message Maps<ept id="p1">](../../atl/message-maps-atl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#108</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>This example illustrates the following:</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>If a window procedure is using <ph id="ph1">`CMyClass`</ph>'s default message map and <ph id="ph2">`OnPaint`</ph> does not handle a message, the message is directed to <ph id="ph3">`m_obj`</ph>'s default message map for processing.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>If a window procedure is using the first alternate message map in <ph id="ph1">`CMyClass`</ph>, all messages are directed to <ph id="ph2">`m_obj`</ph>'s default message map.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>If a window procedure is using <ph id="ph1">`CMyClass`</ph>'s second alternate message map and <ph id="ph2">`OnChar`</ph> does not handle a message, the message is directed to the specified alternate message map of <ph id="ph3">`m_obj`</ph>.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Class <ph id="ph1">`CMyContainedClass`</ph> must have declared this message map with <ph id="ph2">`ALT_MSG_MAP(1)`</ph>.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>COMMAND_CODE_HANDLER</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Similar to <bpt id="p1">[</bpt>COMMAND_HANDLER<ept id="p1">](#command_handler)</ept>, but maps a <bpt id="p2">[</bpt>WM_COMMAND<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms647591)</ept> message based only on the notification code.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>[in] The notification code.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>[in] The name of the message-handler function.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>COMMAND_HANDLER</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Defines an entry in a message map.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>[in] The identifier of the menu item, control, or accelerator.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>[in] The notification code.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>[in] The name of the message-handler function.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>maps a <bpt id="p1">[</bpt>WM_COMMAND<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms647591)</ept> message to the specified handler function, based on the notification code and the control identifier.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#119</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Any function specified in a <ph id="ph1">`COMMAND_HANDLER`</ph> macro must be defined as follows:</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The message map sets <ph id="ph1">`bHandled`</ph> to <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> before <ph id="ph2">`CommandHandler`</ph> is called.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`CommandHandler`</ph> does not fully handle the message, it should set <ph id="ph2">`bHandled`</ph> to <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> to indicate the message needs further processing.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Always begin a message map with <bpt id="p1">[</bpt>BEGIN_MSG_MAP<ept id="p1">](#begin_msg_map)</ept>.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>You can then declare subsequent alternate message maps with <bpt id="p1">[</bpt>ALT_MSG_MAP<ept id="p1">](#alt_msg_map)</ept>.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>END_MSG_MAP<ept id="p1">](#end_msg_map)</ept> macro marks the end of the message map.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Every message map must have exactly one instance of <ph id="ph1">`BEGIN_MSG_MAP`</ph> and <ph id="ph2">`END_MSG_MAP`</ph>.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>In addition to <ph id="ph1">`COMMAND_HANDLER`</ph>, you can use <bpt id="p1">[</bpt>MESSAGE_HANDLER<ept id="p1">](#message_handler)</ept> to map a <bpt id="p2">**</bpt>WM_COMMAND<ept id="p2">**</ept> message without regard to an identifier or code.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">`MESSAGE_HANDLER(WM_COMMAND, OnHandlerFunction)`</ph> will direct all <bpt id="p1">**</bpt>WM_COMMAND<ept id="p1">**</ept> messages to <ph id="ph2">`OnHandlerFunction`</ph>.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>For more information about using message maps in ATL, see <bpt id="p1">[</bpt>Message Maps<ept id="p1">](../../atl/message-maps-atl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>COMMAND_ID_HANDLER</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Similar to <bpt id="p1">[</bpt>COMMAND_HANDLER<ept id="p1">](#command_handler)</ept>, but maps a <bpt id="p2">[</bpt>WM_COMMAND<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms647591)</ept> message based only on the identifier of the menu item, control, or accelerator.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>[in] The identifier of the menu item, control, or accelerator sending the message.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>[in] The name of the message-handler function.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>COMMAND_RANGE_CODE_HANDLER</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Similar to <bpt id="p1">[</bpt>COMMAND_RANGE_HANDLER<ept id="p1">](#command_range_handler)</ept>, but maps <bpt id="p2">[</bpt>WM_COMMAND<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms647591)</ept> messages with a specific notification code from a range of controls to a single handler function.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>[in] Marks the beginning of a contiguous range of control identifiers.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>[in] Marks the end of a contiguous range of control identifiers.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>[in] The notification code.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>[in] The name of the message-handler function.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>This range is based on the identifier of the menu item, control, or accelerator sending the message.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>COMMAND_RANGE_HANDLER</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Similar to <bpt id="p1">[</bpt>COMMAND_HANDLER<ept id="p1">](#command_handler)</ept>, but maps <bpt id="p2">[</bpt>WM_COMMAND<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms647591)</ept> messages from a range of controls to a single handler function.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>[in] Marks the beginning of a contiguous range of control identifiers.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>[in] Marks the end of a contiguous range of control identifiers.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>[in] The name of the message-handler function.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>This range is based on the identifier of the menu item, control, or accelerator sending the message.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>DECLARE_EMPTY_MSG_MAP</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Declares an empty message map.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>is a convenience macro that calls the macros <bpt id="p1">[</bpt>BEGIN_MSG_MAP<ept id="p1">](#begin_msg_map)</ept> and <bpt id="p2">[</bpt>END_MSG_MAP<ept id="p2">](#end_msg_map)</ept> to create an empty message map:</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#122</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>DEFAULT_REFLECTION_HANDLER</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Provides a default handler for the child window (control) that will receive reflected messages; the handler will properly pass unhandled messages to <ph id="ph1">`DefWindowProc`</ph>.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>END_MSG_MAP</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Marks the end of a message map.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Always use the <bpt id="p1">[</bpt>BEGIN_MSG_MAP<ept id="p1">](#begin_msg_map)</ept> macro to mark the beginning of a message map.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>ALT_MSG_MAP<ept id="p1">](#alt_msg_map)</ept> to declare subsequent alternate message maps.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Note that there is always exactly one instance of <ph id="ph1">`BEGIN_MSG_MAP`</ph> and <ph id="ph2">`END_MSG_MAP`</ph>.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>For more information about using message maps in ATL, see <bpt id="p1">[</bpt>Message Maps<ept id="p1">](../../atl/message-maps-atl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>The following example shows the default message map and one alternate message map, each containing one handler function:</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#98</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>The next example shows two alternate message maps.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>The default message map is empty.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#99</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>FORWARD_NOTIFICATIONS</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Forwards notification messages to the parent window.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Specify this macro as part of your message map.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>MESSAGE_HANDLER</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Defines an entry in a message map.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>[in] The Windows message.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>[in] The name of the message-handler function.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>maps a Windows message to the specified handler function.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Any function specified in a <ph id="ph1">`MESSAGE_HANDLER`</ph> macro must be defined as follows:</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>The message map sets <ph id="ph1">`bHandled`</ph> to <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> before <ph id="ph2">`MessageHandler`</ph> is called.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`MessageHandler`</ph> does not fully handle the message, it should set <ph id="ph2">`bHandled`</ph> to <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> to indicate the message needs further processing.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Always begin a message map with <bpt id="p1">[</bpt>BEGIN_MSG_MAP<ept id="p1">](#begin_msg_map)</ept>.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>You can then declare subsequent alternate message maps with <bpt id="p1">[</bpt>ALT_MSG_MAP<ept id="p1">](#alt_msg_map)</ept>.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>END_MSG_MAP<ept id="p1">](#end_msg_map)</ept> macro marks the end of the message map.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Every message map must have exactly one instance of <ph id="ph1">`BEGIN_MSG_MAP`</ph> and <ph id="ph2">`END_MSG_MAP`</ph>.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>In addition to <ph id="ph1">`MESSAGE_HANDLER`</ph>, you can use <bpt id="p1">[</bpt>COMMAND_HANDLER<ept id="p1">](#command_handler)</ept> and <bpt id="p2">[</bpt>NOTIFY_HANDLER<ept id="p2">](#notify_handler)</ept> to map <bpt id="p3">[</bpt>WM_COMMAND<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms647591)</ept> and <bpt id="p4">[</bpt>WM_NOTIFY<ept id="p4">](http://msdn.microsoft.com/library/windows/desktop/bb775583)</ept> messages, respectively.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>For more information about using message maps in ATL, see <bpt id="p1">[</bpt>Message Maps<ept id="p1">](../../atl/message-maps-atl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#129</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>MESSAGE_RANGE_HANDLER</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Similar to <bpt id="p1">[</bpt>MESSAGE_HANDLER<ept id="p1">](#message_handler)</ept>, but maps a range of Windows messages to a single handler function.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>msgFirst</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>[in] Marks the beginning of a contiguous range of messages.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>msgLast</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>[in] Marks the end of a contiguous range of messages.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>[in] The name of the message-handler function.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>NOTIFY_CODE_HANDLER</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Similar to <bpt id="p1">[</bpt>NOTIFY_HANDLER<ept id="p1">](#notify_handler)</ept>, but maps a <bpt id="p2">[</bpt>WM_NOTIFY<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb775583)</ept> message based only on the notification code.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>[in] The notification code.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>[in] The name of the message-handler function.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>NOTIFY_HANDLER</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Defines an entry in a message map.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>[in] The identifier of the control sending the message.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>[in] The notification code.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>[in] The name of the message-handler function.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>maps a <bpt id="p1">[</bpt>WM_NOTIFY<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775583)</ept> message to the specified handler function, based on the notification code and the control identifier.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Any function specified in a <ph id="ph1">`NOTIFY_HANDLER`</ph> macro must be defined as follows:</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>The message map sets <ph id="ph1">`bHandled`</ph> to <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> before <ph id="ph2">`NotifyHandler`</ph> is called.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`NotifyHandler`</ph> does not fully handle the message, it should set <ph id="ph2">`bHandled`</ph> to <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> to indicate the message needs further processing.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Always begin a message map with <bpt id="p1">[</bpt>BEGIN_MSG_MAP<ept id="p1">](#begin_msg_map)</ept>.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>You can then declare subsequent alternate message maps with <bpt id="p1">[</bpt>ALT_MSG_MAP<ept id="p1">](#alt_msg_map)</ept>.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>END_MSG_MAP<ept id="p1">](#end_msg_map)</ept> macro marks the end of the message map.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Every message map must have exactly one instance of <ph id="ph1">`BEGIN_MSG_MAP`</ph> and <ph id="ph2">`END_MSG_MAP`</ph>.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>In addition to <ph id="ph1">`NOTIFY_HANDLER`</ph>, you can use <bpt id="p1">[</bpt>MESSAGE_HANDLER<ept id="p1">](#message_handler)</ept> to map a <bpt id="p2">**</bpt>WM_NOTIFY<ept id="p2">**</ept> message without regard to an identifier or code.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">`MESSAGE_HANDLER(WM_NOTIFY, OnHandlerFunction)`</ph> will direct all <bpt id="p1">**</bpt>WM_NOTIFY<ept id="p1">**</ept> messages to <ph id="ph2">`OnHandlerFunction`</ph>.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>For more information about using message maps in ATL, see <bpt id="p1">[</bpt>Message Maps<ept id="p1">](../../atl/message-maps-atl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#130</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>NOTIFY_ID_HANDLER</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Similar to <bpt id="p1">[</bpt>NOTIFY_HANDLER<ept id="p1">](#notify_handler)</ept>, but maps a <bpt id="p2">[</bpt>WM_NOTIFY<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb775583)</ept> message based only on the control identifier.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>[in] The identifier of the control sending the message.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>[in] The name of the message-handler function.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>NOTIFY_RANGE_CODE_HANDLER</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Similar to <bpt id="p1">[</bpt>NOTIFY_RANGE_HANDLER<ept id="p1">](#notify_range_handler)</ept>, but maps <bpt id="p2">[</bpt>WM_NOTIFY<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb775583)</ept> messages with a specific notification code from a range of controls to a single handler function.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>[in] Marks the beginning of a contiguous range of control identifiers.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>[in] Marks the end of a contiguous range of control identifiers.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>[in] The notification code.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>[in] The name of the message-handler function.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>This range is based on the identifier of the control sending the message.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>NOTIFY_RANGE_HANDLER</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Similar to <bpt id="p1">[</bpt>NOTIFY_HANDLER<ept id="p1">](#notify_handler)</ept>, but maps <bpt id="p2">[</bpt>WM_NOTIFY<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb775583)</ept> messages from a range of controls to a single handler function.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>[in] Marks the beginning of a contiguous range of control identifiers.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>[in] Marks the end of a contiguous range of control identifiers.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>[in] The name of the message-handler function.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>This range is based on the identifier of the control sending the message.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>REFLECT_NOTIFICATIONS</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Reflects notification messages back to the child window (control) that sent them.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Specify this macro as part of the parent window's message map.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>REFLECTED_COMMAND_CODE_HANDLER</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>Similar to <bpt id="p1">[</bpt>COMMAND_CODE_HANDLER<ept id="p1">](#command_code_handler)</ept>, but maps commands reflected from the parent window.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>[in] The notification code.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>[in] The name of the message-handler function.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>REFLECTED_COMMAND_HANDLER</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>Similar to <bpt id="p1">[</bpt>COMMAND_HANDLER<ept id="p1">](#command_handler)</ept>, but maps commands reflected from the parent window.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>[in] The identifier of the menu item, control, or accelerator.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>[in] The notification code.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>[in] The name of the message-handler function.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>REFLECTED_COMMAND_ID_HANDLER</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>Similar to <bpt id="p1">[</bpt>COMMAND_ID_HANDLER<ept id="p1">](#command_id_handler)</ept>, but maps commands reflected from the parent window.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>[in] The identifier of the menu item, control, or accelerator.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>[in] The name of the message-handler function.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>REFLECTED_COMMAND_RANGE_CODE_HANDLER</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Similar to <bpt id="p1">[</bpt>COMMAND_RANGE_CODE_HANDLER<ept id="p1">](#command_range_code_handler)</ept>, but maps commands reflected from the parent window.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>[in] Marks the beginning of a contiguous range of control identifiers.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>[in] Marks the end of a contiguous range of control identifiers.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>[in] The notification code.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>[in] The name of the message-handler function.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>REFLECTED_COMMAND_RANGE_HANDLER</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Similar to <bpt id="p1">[</bpt>COMMAND_RANGE_HANDLER<ept id="p1">](#command_range_handler)</ept>, but maps commands reflected from the parent window.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>[in] Marks the beginning of a contiguous range of control identifiers.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>[in] Marks the end of a contiguous range of control identifiers.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>[in] The name of the message-handler function.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>REFLECTED_NOTIFY_CODE_HANDLER</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>Similar to <bpt id="p1">[</bpt>NOTIFY_CODE_HANDLER<ept id="p1">](#notify_code_handler)</ept>, but maps notifications reflected from the parent window.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>[in] The notification code.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>[in] The name of the message-handler function.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>REFLECTED_NOTIFY_HANDLER</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>Similar to <bpt id="p1">[</bpt>NOTIFY_HANDLER<ept id="p1">](#notify_handler)</ept>, but maps notifications reflected from the parent window.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>[in] The identifier of the menu item, control, or accelerator.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>[in] The notification code.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>[in] The name of the message-handler function.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>REFLECTED_NOTIFY_ID_HANDLER</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Similar to <bpt id="p1">[</bpt>NOTIFY_ID_HANDLER<ept id="p1">](#notify_id_handler)</ept>, but maps notifications reflected from the parent window.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>[in] The identifier of the menu item, control, or accelerator.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>[in] The name of the message-handler function.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>REFLECTED_NOTIFY_RANGE_CODE_HANDLER</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>Similar to <bpt id="p1">[</bpt>NOTIFY_RANGE_CODE_HANDLER<ept id="p1">](#notify_range_code_handler)</ept>, but maps notifications reflected from the parent window.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>[in] Marks the beginning of a contiguous range of control identifiers.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>[in] Marks the end of a contiguous range of control identifiers.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>[in] The notification code.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>[in] The name of the message-handler function.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>REFLECTED_NOTIFY_RANGE_HANDLER</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>Similar to <bpt id="p1">[</bpt>NOTIFY_RANGE_HANDLER<ept id="p1">](#notify_range_handler)</ept>, but maps notifications reflected from the parent window.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>[in] Marks the beginning of a contiguous range of control identifiers.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>[in] Marks the end of a contiguous range of control identifiers.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>[in] The name of the message-handler function.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>Macros</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>