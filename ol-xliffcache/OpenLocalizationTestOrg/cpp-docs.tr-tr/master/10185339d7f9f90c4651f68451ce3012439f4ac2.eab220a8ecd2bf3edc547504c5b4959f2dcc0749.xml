{"nodes":[{"pos":[12,48],"content":"runtime_error Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"runtime_error Class | Microsoft Docs","pos":[0,36]}]},{"content":"runtime_error Class","pos":[695,714]},{"content":"The class serves as the base class for all exceptions thrown to report errors presumably detectable only when the program executes.","pos":[715,846]},{"content":"Syntax","pos":[855,861]},{"content":"Remarks","pos":[1045,1052]},{"pos":[1056,1232],"content":"The value returned by <bpt id=\"p1\">[</bpt>exception Class<ept id=\"p1\">](../standard-library/exception-class.md)</ept> is a copy of <bpt id=\"p2\">**</bpt>message<ept id=\"p2\">**</ept><ph id=\"ph1\">`.`</ph><bpt id=\"p3\">[</bpt>data<ept id=\"p3\">](../standard-library/basic-string-class.md#basic_string__data)</ept>.","source":"The value returned by [exception Class](../standard-library/exception-class.md) is a copy of **message**`.`[data](../standard-library/basic-string-class.md#basic_string__data)."},{"content":"Example","pos":[1241,1248]},{"content":"Requirements","pos":[1697,1709]},{"pos":[1713,1737],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>stdexcept&gt;","source":"**Header:** \\<stdexcept>"},{"pos":[1744,1762],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"content":"See Also","pos":[1771,1779]},{"content":"exception Class","pos":[1783,1798]},{"content":"Thread Safety in the C++ Standard Library","pos":[1848,1889]}],"content":"---\ntitle: \"runtime_error Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.runtime_error\"\n  - \"runtime_error\"\n  - \"stdexcept/std::runtime_error\"\n  - \"std::runtime_error\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"runtime_error class\"\nms.assetid: 4d0227bf-847b-45a2-a320-2351ebf98368\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# runtime_error Class\nThe class serves as the base class for all exceptions thrown to report errors presumably detectable only when the program executes.  \n  \n## Syntax  \n  \n```  \nclass runtime_error : public exception {  \npublic:  \n    explicit runtime_error(const string& message);\n\n    explicit runtime_error(const char *message);\n\n};  \n```  \n  \n## Remarks  \n The value returned by [exception Class](../standard-library/exception-class.md) is a copy of **message**`.`[data](../standard-library/basic-string-class.md#basic_string__data).  \n  \n## Example  \n  \n```cpp  \n// runtime_error.cpp  \n// compile with: /EHsc /GR  \n#include <iostream>  \n  \nusing namespace std;  \n  \nint main( )  \n{  \n// runtime_error  \n   try   \n   {  \n      locale loc( \"test\" );  \n   }  \n   catch ( exception &e )   \n   {  \n      cerr << \"Caught \" << e.what( ) << endl;  \n      cerr << \"Type \" << typeid( e ).name( ) << endl;  \n   };  \n}  \n\\* Output:   \nCaught bad locale name  \nType class std::runtime_error  \n*\\  \n```  \n  \n## Requirements  \n **Header:** \\<stdexcept>  \n  \n **Namespace:** std  \n  \n## See Also  \n[exception Class](../standard-library/exception-class.md)\n\n    \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)\n\n"}