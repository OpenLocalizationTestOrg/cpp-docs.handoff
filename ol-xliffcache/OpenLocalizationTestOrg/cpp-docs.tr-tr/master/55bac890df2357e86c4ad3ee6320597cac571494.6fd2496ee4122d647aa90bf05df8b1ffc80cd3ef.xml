{"nodes":[{"pos":[12,34],"content":"_fcvt | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_fcvt | Microsoft Docs","pos":[0,22]}]},{"content":"_fcvt","pos":[1054,1059]},{"content":"Converts a floating-point number to a string.","pos":[1060,1105]},{"content":"A more secure version of this function is available; see <bpt id=\"p1\">[</bpt>_fcvt_s<ept id=\"p1\">](../../c-runtime-library/reference/fcvt-s.md)</ept>.","pos":[1106,1218],"source":" A more secure version of this function is available; see [_fcvt_s](../../c-runtime-library/reference/fcvt-s.md)."},{"content":"Syntax","pos":[1227,1233]},{"content":"Parameters","pos":[1346,1356]},{"content":"Number to be converted.","pos":[1371,1394]},{"content":"Number of digits after the decimal point.","pos":[1412,1453]},{"content":"Pointer to the stored decimal-point position.","pos":[1469,1514]},{"content":"Pointer to the stored sign indicator.","pos":[1531,1568]},{"content":"Return Value","pos":[1577,1589]},{"pos":[1601,1658],"content":"returns a pointer to the string of digits, NULL on error."},{"content":"Remarks","pos":[1667,1674]},{"content":"The <ph id=\"ph1\">`_fcvt`</ph> function converts a floating-point number to a null-terminated character string.","pos":[1678,1770],"source":"The `_fcvt` function converts a floating-point number to a null-terminated character string."},{"content":"The <ph id=\"ph1\">`value`</ph> parameter is the floating-point number to be converted.","pos":[1771,1838],"source":" The `value` parameter is the floating-point number to be converted."},{"content":"stores the digits of <ph id=\"ph1\">`value`</ph> as a string and appends a null character ('\\0').","pos":[1847,1924],"source":" stores the digits of `value` as a string and appends a null character ('\\0')."},{"content":"The <ph id=\"ph1\">`count`</ph> parameter specifies the number of digits to be stored after the decimal point.","pos":[1925,2015],"source":" The `count` parameter specifies the number of digits to be stored after the decimal point."},{"content":"Excess digits are rounded off to <ph id=\"ph1\">`count`</ph> places.","pos":[2016,2064],"source":" Excess digits are rounded off to `count` places."},{"content":"If there are fewer than <ph id=\"ph1\">`count`</ph> digits of precision, the string is padded with zeros.","pos":[2065,2150],"source":" If there are fewer than `count` digits of precision, the string is padded with zeros."},{"pos":[2157,2234],"content":"The total number of digits returned by <ph id=\"ph1\">`_fcvt`</ph> will not exceed <ph id=\"ph2\">`_CVTBUFSIZE`</ph>.","source":"The total number of digits returned by `_fcvt` will not exceed `_CVTBUFSIZE`."},{"content":"Only digits are stored in the string.","pos":[2241,2278]},{"content":"The position of the decimal point and the sign of <ph id=\"ph1\">`value`</ph> can be obtained from <ph id=\"ph2\">`dec`</ph> and sign after the call.","pos":[2279,2388],"source":" The position of the decimal point and the sign of `value` can be obtained from `dec` and sign after the call."},{"content":"The <ph id=\"ph1\">`dec`</ph> parameter points to an integer value; this integer value gives the position of the decimal point with respect to the beginning of the string.","pos":[2389,2540],"source":" The `dec` parameter points to an integer value; this integer value gives the position of the decimal point with respect to the beginning of the string."},{"content":"A zero or negative integer value indicates that the decimal point lies to the left of the first digit.","pos":[2541,2643]},{"content":"The parameter <ph id=\"ph1\">`sign`</ph> points to an integer indicating the sign of <ph id=\"ph2\">`value`</ph>.","pos":[2644,2717],"source":" The parameter `sign` points to an integer indicating the sign of `value`."},{"content":"The integer is set to 0 if <ph id=\"ph1\">`value`</ph> is positive and is set to a nonzero number if <ph id=\"ph2\">`value`</ph> is negative.","pos":[2718,2819],"source":" The integer is set to 0 if `value` is positive and is set to a nonzero number if `value` is negative."},{"content":"The difference between <ph id=\"ph1\">`_ecvt`</ph> and <ph id=\"ph2\">`_fcvt`</ph> is in the interpretation of the <ph id=\"ph3\">`count`</ph> parameter.","pos":[2826,2919],"source":"The difference between `_ecvt` and `_fcvt` is in the interpretation of the `count` parameter."},{"content":"interprets <ph id=\"ph1\">`count`</ph> as the total number of digits in the output string, whereas <ph id=\"ph2\">`_fcvt`</ph> interprets <ph id=\"ph3\">`count`</ph> as the number of digits after the decimal point.","pos":[2928,3082],"source":" interprets `count` as the total number of digits in the output string, whereas `_fcvt` interprets `count` as the number of digits after the decimal point."},{"content":"and <ph id=\"ph1\">`_fcvt`</ph> use a single statically allocated buffer for the conversion.","pos":[3097,3169],"source":" and `_fcvt` use a single statically allocated buffer for the conversion."},{"content":"Each call to one of these routines destroys the results of the previous call.","pos":[3170,3247]},{"content":"This function validates its parameters.","pos":[3254,3293]},{"content":"If <ph id=\"ph1\">`dec`</ph> or <ph id=\"ph2\">`sign`</ph> is NULL, or <ph id=\"ph3\">`count`</ph> is 0, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[3294,3469],"source":" If `dec` or `sign` is NULL, or `count` is 0, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, <ph id=\"ph1\">`errno`</ph> is set to <ph id=\"ph2\">`EINVAL`</ph> and NULL is returned.","pos":[3470,3555],"source":" If execution is allowed to continue, `errno` is set to `EINVAL` and NULL is returned."},{"content":"Requirements","pos":[3564,3576]},{"content":"Function","pos":[3583,3591]},{"content":"Required header","pos":[3592,3607]},{"content":"stdlib.h&gt;","pos":[3663,3672],"source":"stdlib.h>"},{"pos":[3680,3798],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[3807,3814]},{"content":".NET Framework Equivalent","pos":[4497,4522]},{"content":"System::Convert::ToString","pos":[4527,4552]},{"content":"See Also","pos":[4633,4641]},{"content":"Data Conversion","pos":[4646,4661]},{"content":"Floating-Point Support","pos":[4712,4734]},{"content":"atof, _atof_l, _wtof, _wtof_l","pos":[4792,4821]},{"content":"_ecvt","pos":[4890,4895]},{"content":"_gcvt","pos":[4945,4950]}],"content":"---\ntitle: \"_fcvt | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_fcvt\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-convert-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_fcvt\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"converting floating point, to strings\"\n  - \"_fcvt function\"\n  - \"floating-point functions, converting number to string\"\n  - \"fcvt function\"\n  - \"floating-point functions\"\nms.assetid: 74584c88-f0dd-4907-8fca-52da5df583f5\ncaps.latest.revision: 24\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _fcvt\nConverts a floating-point number to a string. A more secure version of this function is available; see [_fcvt_s](../../c-runtime-library/reference/fcvt-s.md).  \n  \n## Syntax  \n  \n```  \nchar *_fcvt(   \n   double value,  \n   int count,  \n   int *dec,  \n   int *sign   \n);  \n```  \n  \n#### Parameters  \n `value`  \n Number to be converted.  \n  \n `count`  \n Number of digits after the decimal point.  \n  \n `dec`  \n Pointer to the stored decimal-point position.  \n  \n `sign`  \n Pointer to the stored sign indicator.  \n  \n## Return Value  \n `_fcvt` returns a pointer to the string of digits, NULL on error.  \n  \n## Remarks  \n The `_fcvt` function converts a floating-point number to a null-terminated character string. The `value` parameter is the floating-point number to be converted. `_fcvt` stores the digits of `value` as a string and appends a null character ('\\0'). The `count` parameter specifies the number of digits to be stored after the decimal point. Excess digits are rounded off to `count` places. If there are fewer than `count` digits of precision, the string is padded with zeros.  \n  \n The total number of digits returned by `_fcvt` will not exceed `_CVTBUFSIZE`.  \n  \n Only digits are stored in the string. The position of the decimal point and the sign of `value` can be obtained from `dec` and sign after the call. The `dec` parameter points to an integer value; this integer value gives the position of the decimal point with respect to the beginning of the string. A zero or negative integer value indicates that the decimal point lies to the left of the first digit. The parameter `sign` points to an integer indicating the sign of `value`. The integer is set to 0 if `value` is positive and is set to a nonzero number if `value` is negative.  \n  \n The difference between `_ecvt` and `_fcvt` is in the interpretation of the `count` parameter. `_ecvt` interprets `count` as the total number of digits in the output string, whereas `_fcvt` interprets `count` as the number of digits after the decimal point.  \n  \n `_ecvt` and `_fcvt` use a single statically allocated buffer for the conversion. Each call to one of these routines destroys the results of the previous call.  \n  \n This function validates its parameters. If `dec` or `sign` is NULL, or `count` is 0, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, `errno` is set to `EINVAL` and NULL is returned.  \n  \n## Requirements  \n  \n|Function|Required header|  \n|--------------|---------------------|  \n|`_fcvt`|\\<stdlib.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_fcvt.c  \n// compile with: /W3  \n// This program converts the constant  \n// 3.1415926535 to a string and sets the pointer  \n// buffer to point to that string.  \n  \n#include <stdlib.h>  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   int  decimal, sign;  \n   char *buffer;  \n   double source = 3.1415926535;  \n  \n   buffer = _fcvt( source, 7, &decimal, &sign ); // C4996  \n   // Note: _fcvt is deprecated; consider using _fcvt_s instead  \n   printf( \"source: %2.10f   buffer: '%s'   decimal: %d   sign: %d\\n\",  \n            source, buffer, decimal, sign );  \n}  \n```  \n  \n```Output  \nsource: 3.1415926535   buffer: '31415927'   decimal: 1   sign: 0  \n```  \n  \n## .NET Framework Equivalent  \n [System::Convert::ToString](https://msdn.microsoft.com/en-us/library/system.convert.tostring.aspx)  \n  \n## See Also  \n [Data Conversion](../../c-runtime-library/data-conversion.md)   \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [atof, _atof_l, _wtof, _wtof_l](../../c-runtime-library/reference/atof-atof-l-wtof-wtof-l.md)   \n [_ecvt](../../c-runtime-library/reference/ecvt.md)   \n [_gcvt](../../c-runtime-library/reference/gcvt.md)"}