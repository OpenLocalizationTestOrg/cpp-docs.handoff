{"nodes":[{"pos":[12,103],"content":"strncpy_s, _strncpy_s_l, wcsncpy_s, _wcsncpy_s_l, _mbsncpy_s, _mbsncpy_s_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"strncpy_s, _strncpy_s_l, wcsncpy_s, _wcsncpy_s_l, _mbsncpy_s, _mbsncpy_s_l | Microsoft Docs","pos":[0,91]}]},{"content":"strncpy_s, _strncpy_s_l, wcsncpy_s, _wcsncpy_s_l, _mbsncpy_s, _mbsncpy_s_l","pos":[1549,1623]},{"content":"Copies characters of one string to another.","pos":[1624,1667]},{"content":"These versions of <bpt id=\"p1\">[</bpt>strncpy, _strncpy_l, wcsncpy, _wcsncpy_l, _mbsncpy, _mbsncpy_l<ept id=\"p1\">](../../c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l.md)</ept> have security enhancements, as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1669,1976],"source":"  These versions of [strncpy, _strncpy_l, wcsncpy, _wcsncpy_l, _mbsncpy, _mbsncpy_l](../../c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l.md) have security enhancements, as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"pos":[1984,2227],"content":"[!IMPORTANT]\n `_mbsncpy_s` and `_mbsncpy_s_l` cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","leadings":["","> "],"nodes":[{"content":" and `_mbsncpy_s_l` cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","pos":[26,241],"nodes":[{"content":"and <ph id=\"ph1\">`_mbsncpy_s_l`</ph> cannot be used in applications that execute in the Windows Runtime.","pos":[1,87],"source":" and `_mbsncpy_s_l` cannot be used in applications that execute in the Windows Runtime."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRT functions not supported with /ZW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.","pos":[88,215],"source":" For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)."}]}]},{"content":"Syntax","pos":[2236,2242]},{"content":"Parameters","pos":[4078,4088]},{"content":"Destination string.","pos":[4105,4124]},{"content":"The size of the destination string, in characters.","pos":[4153,4203]},{"content":"Source string.","pos":[4225,4239]},{"content":"Number of characters to be copied, or <bpt id=\"p1\">[</bpt>_TRUNCATE<ept id=\"p1\">](../../c-runtime-library/truncate.md)</ept>.","pos":[4257,4344],"source":" Number of characters to be copied, or [_TRUNCATE](../../c-runtime-library/truncate.md)."},{"content":"The locale to use.","pos":[4363,4381]},{"content":"Return Value","pos":[4390,4402]},{"pos":[4406,4486],"content":"Zero if successful, <ph id=\"ph1\">`STRUNCATE`</ph> if truncation occurred, otherwise an error code.","source":"Zero if successful, `STRUNCATE` if truncation occurred, otherwise an error code."},{"content":"Error Conditions","pos":[4496,4512]},{"content":"Return value","pos":[4560,4572]},{"pos":[4573,4584],"content":"Contents of"},{"content":"any","pos":[4716,4719]},{"content":"any","pos":[4720,4723]},{"content":"not modified","pos":[4733,4745]},{"content":"any","pos":[4750,4753]},{"content":"any","pos":[4754,4757]},{"pos":[4783,4795],"content":"[0] set to 0"},{"content":"any","pos":[4800,4803]},{"content":"0","pos":[4804,4805]},{"content":"any","pos":[4806,4809]},{"content":"not modified","pos":[4819,4831]},{"pos":[4836,4839],"content":"not"},{"content":"too small","pos":[4847,4856]},{"content":"any","pos":[4857,4860]},{"pos":[4879,4891],"content":"[0] set to 0"},{"content":"Remarks","pos":[4901,4908]},{"content":"These functions try to copy the first <ph id=\"ph1\">`D`</ph> characters of <ph id=\"ph2\">`strSource`</ph> to <ph id=\"ph3\">`strDest`</ph>, where <ph id=\"ph4\">`D`</ph> is the lesser of <ph id=\"ph5\">`count`</ph> and the length of <ph id=\"ph6\">`strSource`</ph>.","pos":[4912,5059],"source":"These functions try to copy the first `D` characters of `strSource` to `strDest`, where `D` is the lesser of `count` and the length of `strSource`."},{"content":"If those <ph id=\"ph1\">`D`</ph> characters will fit within <ph id=\"ph2\">`strDest`</ph> (whose size is given as <ph id=\"ph3\">`numberOfElements`</ph>) and still leave room for a null terminator, then those characters are copied and a terminating null is appended; otherwise, <ph id=\"ph4\">`strDest`</ph>[0] is set to the null character and the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[5060,5454],"source":" If those `D` characters will fit within `strDest` (whose size is given as `numberOfElements`) and still leave room for a null terminator, then those characters are copied and a terminating null is appended; otherwise, `strDest`[0] is set to the null character and the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"There is an exception to the above paragraph.","pos":[5461,5506]},{"content":"If <ph id=\"ph1\">`count`</ph> is <ph id=\"ph2\">`_TRUNCATE`</ph>, then as much of <ph id=\"ph3\">`strSource`</ph> as will fit into <ph id=\"ph4\">`strDest`</ph> is copied while still leaving room for the terminating null which is always appended.","pos":[5507,5674],"source":" If `count` is `_TRUNCATE`, then as much of `strSource` as will fit into `strDest` is copied while still leaving room for the terminating null which is always appended."},{"content":"For example,","pos":[5681,5693]},{"pos":[5768,5991],"content":"means that we are asking <ph id=\"ph1\">`strncpy_s`</ph> to copy five characters into a buffer five bytes long; this would leave no space for the null terminator, hence <ph id=\"ph2\">`strncpy_s`</ph> zeroes out the string and calls the invalid parameter handler.","source":"means that we are asking `strncpy_s` to copy five characters into a buffer five bytes long; this would leave no space for the null terminator, hence `strncpy_s` zeroes out the string and calls the invalid parameter handler."},{"pos":[5998,6064],"content":"If truncation behavior is needed, use <ph id=\"ph1\">`_TRUNCATE`</ph> or (<ph id=\"ph2\">`size`</ph> – 1):","source":"If truncation behavior is needed, use `_TRUNCATE` or (`size` – 1):"},{"pos":[6173,6334],"content":"Note that unlike <ph id=\"ph1\">`strncpy`</ph>, if <ph id=\"ph2\">`count`</ph> is greater than the length of <ph id=\"ph3\">`strSource`</ph>, the destination string is NOT padded with null characters up to length <ph id=\"ph4\">`count`</ph>.","source":"Note that unlike `strncpy`, if `count` is greater than the length of `strSource`, the destination string is NOT padded with null characters up to length `count`."},{"pos":[6341,6428],"content":"The behavior of <ph id=\"ph1\">`strncpy_s`</ph> is undefined if the source and destination strings overlap.","source":"The behavior of `strncpy_s` is undefined if the source and destination strings overlap."},{"content":"If <ph id=\"ph1\">`strDest`</ph> or <ph id=\"ph2\">`strSource`</ph> is <ph id=\"ph3\">`NULL`</ph>, or <ph id=\"ph4\">`numberOfElements`</ph> is 0, the invalid parameter handler is invoked.","pos":[6435,6543],"source":"If `strDest` or `strSource` is `NULL`, or `numberOfElements` is 0, the invalid parameter handler is invoked."},{"content":"If execution is allowed to continue, the function returns <ph id=\"ph1\">`EINVAL`</ph> and sets <ph id=\"ph2\">`errno`</ph> to <ph id=\"ph3\">`EINVAL`</ph>.","pos":[6544,6640],"source":" If execution is allowed to continue, the function returns `EINVAL` and sets `errno` to `EINVAL`."},{"content":"and <ph id=\"ph1\">`_mbsncpy_s`</ph> are wide-character and multibyte-character versions of <ph id=\"ph2\">`strncpy_s`</ph>.","pos":[6659,6743],"source":" and `_mbsncpy_s` are wide-character and multibyte-character versions of `strncpy_s`."},{"content":"The arguments and return value of <ph id=\"ph1\">`wcsncpy_s`</ph> and <ph id=\"ph2\">`mbsncpy_s`</ph>do vary accordingly.","pos":[6744,6825],"source":" The arguments and return value of `wcsncpy_s` and `mbsncpy_s`do vary accordingly."},{"content":"These six functions behave identically otherwise.","pos":[6826,6875]},{"content":"The output value is affected by the setting of the <ph id=\"ph1\">`LC_CTYPE`</ph> category setting of the locale; see <bpt id=\"p1\">[</bpt>setlocale<ept id=\"p1\">](../../c-runtime-library/reference/setlocale-wsetlocale.md)</ept> for more information.","pos":[6882,7072],"source":"The output value is affected by the setting of the `LC_CTYPE` category setting of the locale; see [setlocale](../../c-runtime-library/reference/setlocale-wsetlocale.md) for more information."},{"content":"The versions of these functions without the <ph id=\"ph1\">`_l`</ph> suffix use the current locale for this locale-dependent behavior; the versions with the <ph id=\"ph2\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead.","pos":[7073,7296],"source":" The versions of these functions without the `_l` suffix use the current locale for this locale-dependent behavior; the versions with the `_l` suffix are identical except that they use the locale parameter passed in instead."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Locale<ept id=\"p1\">](../../c-runtime-library/locale.md)</ept>.","pos":[7297,7367],"source":" For more information, see [Locale](../../c-runtime-library/locale.md)."},{"content":"In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically (eliminating the need to specify a size argument) and they can automatically replace older, non-secure functions with their newer, secure counterparts.","pos":[7374,7644]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[7645,7753],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"content":"The debug versions of these functions first fill the buffer with 0xFD.","pos":[7760,7830]},{"content":"To disable this behavior, use <bpt id=\"p1\">[</bpt>_CrtSetDebugFillThreshold<ept id=\"p1\">](../../c-runtime-library/reference/crtsetdebugfillthreshold.md)</ept>.","pos":[7831,7952],"source":" To disable this behavior, use [_CrtSetDebugFillThreshold](../../c-runtime-library/reference/crtsetdebugfillthreshold.md)."},{"content":"Generic-Text Routine Mappings","pos":[7962,7991]},{"content":"TCHAR.H routine","pos":[7998,8013]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[8014,8042],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[8043,8056]},{"content":"_UNICODE defined","pos":[8057,8073]},{"pos":[8310,8479],"content":"[!NOTE]\n _strncpy_s_l, `_wcsncpy_s_l` and `_mbsncpy_s_l` have no locale dependence and are provided just for `_tcsncpy_s_l` and are not intended to be called directly.","leadings":["","> "],"nodes":[{"content":"_strncpy_s_l, <ph id=\"ph1\">`_wcsncpy_s_l`</ph> and <ph id=\"ph2\">`_mbsncpy_s_l`</ph> have no locale dependence and are provided just for <ph id=\"ph3\">`_tcsncpy_s_l`</ph> and are not intended to be called directly.","pos":[9,167],"source":" _strncpy_s_l, `_wcsncpy_s_l` and `_mbsncpy_s_l` have no locale dependence and are provided just for `_tcsncpy_s_l` and are not intended to be called directly."}]},{"content":"Requirements","pos":[8488,8500]},{"content":"Routine","pos":[8507,8514]},{"content":"Required header","pos":[8515,8530]},{"pos":[8586,8587],"content":","},{"content":"string.h&gt;","pos":[8605,8614],"source":"string.h>"},{"pos":[8630,8631],"content":","},{"content":"string.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[8649,8672],"source":"string.h> or \\<wchar.h>"},{"pos":[8689,8690],"content":","},{"content":"mbstring.h&gt;","pos":[8708,8719],"source":"mbstring.h>"},{"pos":[8727,8831],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"Example","pos":[8840,8847]},{"content":"Example","pos":[12678,12685]},{"content":".NET Framework Equivalent","pos":[13718,13743]},{"content":"System::String::Copy","pos":[13748,13768]},{"content":"See Also","pos":[13844,13852]},{"content":"String Manipulation","pos":[13857,13876]},{"content":"Locale","pos":[13935,13941]},{"content":"Interpretation of Multibyte-Character Sequences","pos":[13983,14030]},{"content":"_mbsnbcpy, _mbsnbcpy_l","pos":[14113,14135]},{"content":"strcat_s, wcscat_s, _mbscat_s","pos":[14200,14229]},{"content":"strcmp, wcscmp, _mbscmp","pos":[14301,14324]},{"content":"strcpy_s, wcscpy_s, _mbscpy_s","pos":[14390,14419]},{"content":"strncat_s, _strncat_s_l, wcsncat_s, _wcsncat_s_l, _mbsncat_s, _mbsncat_s_l","pos":[14491,14565]},{"content":"strncmp, wcsncmp, _mbsncmp, _mbsncmp_l","pos":[14676,14714]},{"content":"_strnicmp, _wcsnicmp, _mbsnicmp, _strnicmp_l, _wcsnicmp_l, _mbsnicmp_l","pos":[14793,14863]},{"content":"strrchr, wcsrchr, _mbsrchr, _mbsrchr_l","pos":[14968,15006]},{"content":"_strset, _strset_l, _wcsset, _wcsset_l, _mbsset, _mbsset_l","pos":[15085,15143]},{"content":"strspn, wcsspn, _mbsspn, _mbsspn_l","pos":[15236,15270]}],"content":"---\ntitle: \"strncpy_s, _strncpy_s_l, wcsncpy_s, _wcsncpy_s_l, _mbsncpy_s, _mbsncpy_s_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_mbsncpy_s_l\"\n  - \"wcsncpy_s\"\n  - \"_strncpy_s_l\"\n  - \"strncpy_s\"\n  - \"_mbsncpy_s\"\n  - \"_wcsncpy_s_l\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-multibyte-l1-1-0.dll\"\n  - \"api-ms-win-crt-string-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_tcsncpy_s\"\n  - \"_wcsncpy_s_l\"\n  - \"strncpy_s\"\n  - \"_strncpy_s_l\"\n  - \"wcsncpy_s\"\n  - \"_tcsncpy_s_l\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_wcsncpy_s_l function\"\n  - \"_mbsnbcpy_s function\"\n  - \"_tcsncpy_s_l function\"\n  - \"mbsncpy_s function\"\n  - \"strncpy_s_l function\"\n  - \"_strncpy_s_l function\"\n  - \"strncpy_s function\"\n  - \"mbsncpy_s_l function\"\n  - \"wcsncpy_s function\"\n  - \"copying strings\"\n  - \"strings [C++], copying\"\n  - \"_mbsnbcpy_s_l function\"\n  - \"_tcsncpy_s function\"\n  - \"wcsncpy_s_l function\"\nms.assetid: a971c800-94d1-4d88-92f3-a2fe236a4546\ncaps.latest.revision: 47\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# strncpy_s, _strncpy_s_l, wcsncpy_s, _wcsncpy_s_l, _mbsncpy_s, _mbsncpy_s_l\nCopies characters of one string to another.  These versions of [strncpy, _strncpy_l, wcsncpy, _wcsncpy_l, _mbsncpy, _mbsncpy_l](../../c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l.md) have security enhancements, as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n> [!IMPORTANT]\n>  `_mbsncpy_s` and `_mbsncpy_s_l` cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).  \n  \n## Syntax  \n  \n```  \nerrno_t strncpy_s(  \n   char *strDest,  \n   size_t numberOfElements,  \n   const char *strSource,  \n   size_t count  \n);  \nerrno_t _strncpy_s_l(  \n   char *strDest,  \n   size_t numberOfElements,  \n   const char *strSource,  \n   size_t count,  \n   _locale_t locale  \n);  \nerrno_t wcsncpy_s(  \n   wchar_t *strDest,  \n   size_t numberOfElements,  \n   const wchar_t *strSource,  \n   size_t count   \n);  \nerrno_t _wcsncpy_s_l(  \n   wchar_t *strDest,  \n   size_t numberOfElements,  \n   const wchar_t *strSource,  \n   size_t count,  \n   _locale_t locale  \n);  \nerrno_t _mbsncpy_s(  \n   unsigned char *strDest,  \n   size_t numberOfElements,  \n   const unsigned char *strSource,  \n   size_t count   \n);  \nerrno_t _mbsncpy_s_l(  \n   unsigned char *strDest,  \n   size_t numberOfElements,  \n   const unsigned char *strSource,  \n   size_t count,  \n   locale_t locale  \n);  \ntemplate <size_t size>  \nerrno_t strncpy_s(  \n   char (&strDest)[size],  \n   const char *strSource,  \n   size_t count  \n); // C++ only  \ntemplate <size_t size>  \nerrno_t _strncpy_s_l(  \n   char (&strDest)[size],  \n   const char *strSource,  \n   size_t count,  \n   _locale_t locale  \n); // C++ only  \ntemplate <size_t size>  \nerrno_t wcsncpy_s(  \n   wchar_t (&strDest)[size],  \n   const wchar_t *strSource,  \n   size_t count   \n); // C++ only  \ntemplate <size_t size>  \nerrno_t _wcsncpy_s_l(  \n   wchar_t (&strDest)[size],  \n   const wchar_t *strSource,  \n   size_t count,  \n   _locale_t locale  \n); // C++ only  \ntemplate <size_t size>  \nerrno_t _mbsncpy_s(  \n   unsigned char (&strDest)[size],  \n   const unsigned char *strSource,  \n   size_t count   \n); // C++ only  \ntemplate <size_t size>  \nerrno_t _mbsncpy_s_l(  \n   unsigned char (&strDest)[size],  \n   const unsigned char *strSource,  \n   size_t count,  \n   locale_t locale  \n); // C++ only  \n```  \n  \n#### Parameters  \n `strDest`  \n Destination string.  \n  \n `numberOfElements`  \n The size of the destination string, in characters.  \n  \n `strSource`  \n Source string.  \n  \n `count`  \n Number of characters to be copied, or [_TRUNCATE](../../c-runtime-library/truncate.md).  \n  \n `locale`  \n The locale to use.  \n  \n## Return Value  \n Zero if successful, `STRUNCATE` if truncation occurred, otherwise an error code.  \n  \n### Error Conditions  \n  \n|`strDest`|`numberOfElements`|`strSource`|Return value|Contents of `strDest`|  \n|---------------|------------------------|-----------------|------------------|---------------------------|  \n|`NULL`|any|any|`EINVAL`|not modified|  \n|any|any|`NULL`|`EINVAL`|`strDest`[0] set to 0|  \n|any|0|any|`EINVAL`|not modified|  \n|not `NULL`|too small|any|`ERANGE`|`strDest`[0] set to 0|  \n  \n## Remarks  \n These functions try to copy the first `D` characters of `strSource` to `strDest`, where `D` is the lesser of `count` and the length of `strSource`. If those `D` characters will fit within `strDest` (whose size is given as `numberOfElements`) and still leave room for a null terminator, then those characters are copied and a terminating null is appended; otherwise, `strDest`[0] is set to the null character and the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md).  \n  \n There is an exception to the above paragraph. If `count` is `_TRUNCATE`, then as much of `strSource` as will fit into `strDest` is copied while still leaving room for the terminating null which is always appended.  \n  \n For example,  \n  \n `char dst[5];`  \n  \n `strncpy_s(dst, 5, \"a long string\", 5);`  \n  \n means that we are asking `strncpy_s` to copy five characters into a buffer five bytes long; this would leave no space for the null terminator, hence `strncpy_s` zeroes out the string and calls the invalid parameter handler.  \n  \n If truncation behavior is needed, use `_TRUNCATE` or (`size` – 1):  \n  \n `strncpy_s(dst, 5, \"a long string\", _TRUNCATE);`  \n  \n `strncpy_s(dst, 5, \"a long string\", 4);`  \n  \n Note that unlike `strncpy`, if `count` is greater than the length of `strSource`, the destination string is NOT padded with null characters up to length `count`.  \n  \n The behavior of `strncpy_s` is undefined if the source and destination strings overlap.  \n  \n If `strDest` or `strSource` is `NULL`, or `numberOfElements` is 0, the invalid parameter handler is invoked. If execution is allowed to continue, the function returns `EINVAL` and sets `errno` to `EINVAL`.  \n  \n `wcsncpy_s` and `_mbsncpy_s` are wide-character and multibyte-character versions of `strncpy_s`. The arguments and return value of `wcsncpy_s` and `mbsncpy_s`do vary accordingly. These six functions behave identically otherwise.  \n  \n The output value is affected by the setting of the `LC_CTYPE` category setting of the locale; see [setlocale](../../c-runtime-library/reference/setlocale-wsetlocale.md) for more information. The versions of these functions without the `_l` suffix use the current locale for this locale-dependent behavior; the versions with the `_l` suffix are identical except that they use the locale parameter passed in instead. For more information, see [Locale](../../c-runtime-library/locale.md).  \n  \n In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically (eliminating the need to specify a size argument) and they can automatically replace older, non-secure functions with their newer, secure counterparts. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n The debug versions of these functions first fill the buffer with 0xFD. To disable this behavior, use [_CrtSetDebugFillThreshold](../../c-runtime-library/reference/crtsetdebugfillthreshold.md).  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_tcsncpy_s`|`strncpy_s`|`_mbsnbcpy_s`|`wcsncpy_s`|  \n|`_tcsncpy_s_l`|`_strncpy_s_l`|`_mbsnbcpy_s_l`|`_wcsncpy_s_l`|  \n  \n> [!NOTE]\n>  _strncpy_s_l, `_wcsncpy_s_l` and `_mbsncpy_s_l` have no locale dependence and are provided just for `_tcsncpy_s_l` and are not intended to be called directly.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`strncpy_s`, `_strncpy_s_l`|\\<string.h>|  \n|`wcsncpy_s`, `_wcsncpy_s_l`|\\<string.h> or \\<wchar.h>|  \n|`_mbsncpy_s`, `_mbsncpy_s_l`|\\<mbstring.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n// crt_strncpy_s_1.cpp  \n// compile with: /MTd  \n  \n// these #defines enable secure template overloads  \n// (see last part of Examples() below)  \n#define _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES 1   \n#define _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT 1  \n  \n#include <stdio.h>  \n#include <stdlib.h>  \n#include <string.h>  \n#include <crtdbg.h>  // For _CrtSetReportMode  \n#include <errno.h>  \n  \n// This example uses a 10-byte destination buffer.  \n  \nerrno_t strncpy_s_tester( const char * src,  \n                          int count )  \n{  \n   char dest[10];  \n  \n   printf( \"\\n\" );  \n  \n   if ( count == _TRUNCATE )  \n      printf( \"Copying '%s' to %d-byte buffer dest with truncation semantics\\n\",  \n               src, _countof(dest) );  \n   else  \n      printf( \"Copying %d chars of '%s' to %d-byte buffer dest\\n\",  \n              count, src, _countof(dest) );  \n  \n   errno_t err = strncpy_s( dest, _countof(dest), src, count );  \n  \n   printf( \"    new contents of dest: '%s'\\n\", dest );  \n  \n   return err;  \n}  \n  \nvoid Examples()  \n{  \n   strncpy_s_tester( \"howdy\", 4 );  \n   strncpy_s_tester( \"howdy\", 5 );  \n   strncpy_s_tester( \"howdy\", 6 );  \n  \n   printf( \"\\nDestination buffer too small:\\n\" );  \n   strncpy_s_tester( \"Hi there!!\", 10 );  \n  \n   printf( \"\\nTruncation examples:\\n\" );  \n  \n   errno_t err = strncpy_s_tester( \"How do you do?\", _TRUNCATE );  \n   printf( \"    truncation %s occur\\n\", err == STRUNCATE ? \"did\"  \n                                                       : \"did not\" );  \n  \n   err = strncpy_s_tester( \"Howdy.\", _TRUNCATE );  \n   printf( \"    truncation %s occur\\n\", err == STRUNCATE ? \"did\"  \n                                                       : \"did not\" );  \n  \n   printf( \"\\nSecure template overload example:\\n\" );  \n  \n   char dest[10];  \n   strncpy( dest, \"very very very long\", 15 );  \n   // With secure template overloads enabled (see #defines at  \n   // top of file), the preceding line is replaced by  \n   //    strncpy_s( dest, _countof(dest), \"very very very long\", 15 );  \n   // Instead of causing a buffer overrun, strncpy_s invokes  \n   // the invalid parameter handler.  \n   // If secure template overloads were disabled, strncpy would  \n   // copy 15 characters and overrun the dest buffer.  \n   printf( \"    new contents of dest: '%s'\\n\", dest );  \n}  \n  \nvoid myInvalidParameterHandler(  \n   const wchar_t* expression,  \n   const wchar_t* function,   \n   const wchar_t* file,   \n   unsigned int line,   \n   uintptr_t pReserved)  \n{  \n   wprintf(L\"Invalid parameter handler invoked: %s\\n\", expression);  \n}  \n  \nint main( void )  \n{  \n   _invalid_parameter_handler oldHandler, newHandler;  \n  \n   newHandler = myInvalidParameterHandler;  \n   oldHandler = _set_invalid_parameter_handler(newHandler);  \n   // Disable the message box for assertions.  \n   _CrtSetReportMode(_CRT_ASSERT, 0);  \n  \n   Examples();  \n}  \n```  \n  \n```Output  \nCopying 4 chars of 'howdy' to 10-byte buffer dest  \n    new contents of dest: 'howd'  \n  \nCopying 5 chars of 'howdy' to 10-byte buffer dest  \n    new contents of dest: 'howdy'  \n  \nCopying 6 chars of 'howdy' to 10-byte buffer dest  \n    new contents of dest: 'howdy'  \n  \nDestination buffer too small:  \n  \nCopying 10 chars of 'Hi there!!' to 10-byte buffer dest  \nInvalid parameter handler invoked: (L\"Buffer is too small\" && 0)  \n    new contents of dest: ''  \n  \nTruncation examples:  \n  \nCopying 'How do you do?' to 10-byte buffer dest with truncation semantics  \n    new contents of dest: 'How do yo'  \n    truncation did occur  \n  \nCopying 'Howdy.' to 10-byte buffer dest with truncation semantics  \n    new contents of dest: 'Howdy.'  \n    truncation did not occur  \n  \nSecure template overload example:  \nInvalid parameter handler invoked: (L\"Buffer is too small\" && 0)  \n    new contents of dest: ''  \n```  \n  \n## Example  \n  \n```  \n// crt_strncpy_s_2.c  \n// contrasts strncpy and strncpy_s  \n  \n#include <stdio.h>  \n#include <stdlib.h>  \n  \nint main( void )  \n{  \n   char a[20] = \"test\";  \n   char s[20];  \n  \n   // simple strncpy usage:  \n  \n   strcpy_s( s, 20, \"dogs like cats\" );  \n   printf( \"Original string:\\n   '%s'\\n\", s );  \n  \n   // Here we can't use strncpy_s since we don't   \n   // want null termination  \n   strncpy( s, \"mice\", 4 );  \n   printf( \"After strncpy (no null-termination):\\n   '%s'\\n\", s );  \n   strncpy( s+5, \"love\", 4 );  \n   printf( \"After strncpy into middle of string:\\n   '%s'\\n\", s );  \n  \n   // If we use strncpy_s, the string is terminated   \n   strncpy_s( s, _countof(s), \"mice\", 4 );  \n   printf( \"After strncpy_s (with null-termination):\\n   '%s'\\n\", s );  \n  \n}  \n```  \n  \n```Output  \nOriginal string:  \n   'dogs like cats'  \nAfter strncpy (no null-termination):  \n   'mice like cats'  \nAfter strncpy into middle of string:  \n   'mice love cats'  \nAfter strncpy_s (with null-termination):  \n   'mice'  \n```  \n  \n## .NET Framework Equivalent  \n [System::String::Copy](https://msdn.microsoft.com/en-us/library/system.string.copy.aspx)  \n  \n## See Also  \n [String Manipulation](../../c-runtime-library/string-manipulation-crt.md)   \n [Locale](../../c-runtime-library/locale.md)   \n [Interpretation of Multibyte-Character Sequences](../../c-runtime-library/interpretation-of-multibyte-character-sequences.md)   \n [_mbsnbcpy, _mbsnbcpy_l](../../c-runtime-library/reference/mbsnbcpy-mbsnbcpy-l.md)   \n [strcat_s, wcscat_s, _mbscat_s](../../c-runtime-library/reference/strcat-s-wcscat-s-mbscat-s.md)   \n [strcmp, wcscmp, _mbscmp](../../c-runtime-library/reference/strcmp-wcscmp-mbscmp.md)   \n [strcpy_s, wcscpy_s, _mbscpy_s](../../c-runtime-library/reference/strcpy-s-wcscpy-s-mbscpy-s.md)   \n [strncat_s, _strncat_s_l, wcsncat_s, _wcsncat_s_l, _mbsncat_s, _mbsncat_s_l](../../c-runtime-library/reference/strncat-s-strncat-s-l-wcsncat-s-wcsncat-s-l-mbsncat-s-mbsncat-s-l.md)   \n [strncmp, wcsncmp, _mbsncmp, _mbsncmp_l](../../c-runtime-library/reference/strncmp-wcsncmp-mbsncmp-mbsncmp-l.md)   \n [_strnicmp, _wcsnicmp, _mbsnicmp, _strnicmp_l, _wcsnicmp_l, _mbsnicmp_l](../../c-runtime-library/reference/strnicmp-wcsnicmp-mbsnicmp-strnicmp-l-wcsnicmp-l-mbsnicmp-l.md)   \n [strrchr, wcsrchr, _mbsrchr, _mbsrchr_l](../../c-runtime-library/reference/strrchr-wcsrchr-mbsrchr-mbsrchr-l.md)   \n [_strset, _strset_l, _wcsset, _wcsset_l, _mbsset, _mbsset_l](../../c-runtime-library/reference/strset-strset-l-wcsset-wcsset-l-mbsset-mbsset-l.md)   \n [strspn, wcsspn, _mbsspn, _mbsspn_l](../../c-runtime-library/reference/strspn-wcsspn-mbsspn-mbsspn-l.md)"}