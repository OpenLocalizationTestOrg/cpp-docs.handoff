{"nodes":[{"pos":[12,47],"content":"_onexit, _onexit_m | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_onexit, _onexit_m | Microsoft Docs","pos":[0,35]}]},{"pos":[1148,1166],"content":"_onexit, _onexit_m","linkify":"_onexit, _onexit_m","nodes":[{"content":"_onexit, _onexit_m","pos":[0,18]}]},{"content":"Registers a routine to be called at exit time.","pos":[1167,1213]},{"pos":[1222,1228],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1360,1370],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to a function to be called at exit.","pos":[1388,1431]},{"pos":[1440,1452],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[1456,1575],"content":"<ph id=\"ph1\">`_onexit`</ph> returns a pointer to the function if successful or <ph id=\"ph2\">`NULL`</ph> if there is no space to store the function pointer.","source":"`_onexit` returns a pointer to the function if successful or `NULL` if there is no space to store the function pointer."},{"pos":[1584,1591],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_onexit`</ph> function is passed the address of a function (<ph id=\"ph2\">`function`</ph>) to be called when the program terminates normally.","pos":[1595,1717],"source":"The `_onexit` function is passed the address of a function (`function`) to be called when the program terminates normally."},{"content":"Successive calls to <ph id=\"ph1\">`_onexit`</ph> create a register of functions that are executed in LIFO (last-in-first-out) order.","pos":[1718,1831],"source":" Successive calls to `_onexit` create a register of functions that are executed in LIFO (last-in-first-out) order."},{"content":"The functions passed to <ph id=\"ph1\">`_onexit`</ph> cannot take parameters.","pos":[1832,1889],"source":" The functions passed to `_onexit` cannot take parameters."},{"pos":[1896,2062],"content":"In the case when <ph id=\"ph1\">`_onexit`</ph> is called from within a DLL, routines registered with <ph id=\"ph2\">`_onexit`</ph> run on a DLL's unloading after <ph id=\"ph3\">`DllMain`</ph> is called with DLL_PROCESS_DETACH.","source":"In the case when `_onexit` is called from within a DLL, routines registered with `_onexit` run on a DLL's unloading after `DllMain` is called with DLL_PROCESS_DETACH."},{"content":"<ph id=\"ph1\">`_onexit`</ph> is a Microsoft extension.","pos":[2069,2104],"source":"`_onexit` is a Microsoft extension."},{"content":"For ANSI portability, use <bpt id=\"p1\">[</bpt>atexit<ept id=\"p1\">](../../c-runtime-library/reference/atexit.md)</ept>.","pos":[2105,2185],"source":" For ANSI portability, use [atexit](../../c-runtime-library/reference/atexit.md)."},{"content":"The <ph id=\"ph1\">`_onexit_m`</ph> version of the function is for mixed mode use.","pos":[2186,2248],"source":" The `_onexit_m` version of the function is for mixed mode use."},{"pos":[2257,2269],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[2276,2283]},{"content":"Required header","pos":[2284,2299]},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdlib.h&gt;","pos":[2354,2365],"source":"\\<stdlib.h>"},{"pos":[2373,2491],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[2500,2507],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3078,3084],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"pos":[3159,3184],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[3188,3307],"content":"<bpt id=\"p1\">[</bpt>System::Diagnostics::Process::Exited<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.exited.aspx)</ept>","source":"[System::Diagnostics::Process::Exited](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.exited.aspx)"},{"pos":[3316,3324],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Process and Environment Control<ept id=\"p1\">](../../c-runtime-library/process-and-environment-control.md)</ept><ph id=\"ph1\"> </ph>","pos":[3328,3422],"source":"[Process and Environment Control](../../c-runtime-library/process-and-environment-control.md) "},{"content":"<bpt id=\"p1\"> [</bpt>atexit<ept id=\"p1\">](../../c-runtime-library/reference/atexit.md)</ept><ph id=\"ph1\"> </ph>","pos":[3425,3480],"source":" [atexit](../../c-runtime-library/reference/atexit.md) "},{"content":"<bpt id=\"p1\"> [</bpt>exit, _Exit, _exit<ept id=\"p1\">](../../c-runtime-library/reference/exit-exit-exit.md)</ept><ph id=\"ph1\"> </ph>","pos":[3483,3558],"source":" [exit, _Exit, _exit](../../c-runtime-library/reference/exit-exit-exit.md) "},{"content":"<bpt id=\"p1\"> [</bpt>__dllonexit<ept id=\"p1\">](../../c-runtime-library/dllonexit.md)</ept>","pos":[3561,3613],"source":" [__dllonexit](../../c-runtime-library/dllonexit.md)"}],"content":"---\ntitle: \"_onexit, _onexit_m | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_onexit\"\n  - \"_onexit_m\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_onexit\"\n  - \"onexit_m\"\n  - \"onexit\"\n  - \"_onexit_m\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"onexit function\"\n  - \"registry, registering exit routines\"\n  - \"_onexit_m function\"\n  - \"onexit_m function\"\n  - \"_onexit function\"\n  - \"registering exit routines\"\n  - \"registering to be called on exit\"\nms.assetid: 45743298-0e2f-46cf-966d-1ca44babb443\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# _onexit, _onexit_m\nRegisters a routine to be called at exit time.  \n  \n## Syntax  \n  \n```  \n_onexit_t _onexit(  \n   _onexit_t function  \n);  \n_onexit_t_m _onexit_m(  \n   _onexit_t_m function  \n);  \n```  \n  \n#### Parameters  \n `function`  \n Pointer to a function to be called at exit.  \n  \n## Return Value  \n `_onexit` returns a pointer to the function if successful or `NULL` if there is no space to store the function pointer.  \n  \n## Remarks  \n The `_onexit` function is passed the address of a function (`function`) to be called when the program terminates normally. Successive calls to `_onexit` create a register of functions that are executed in LIFO (last-in-first-out) order. The functions passed to `_onexit` cannot take parameters.  \n  \n In the case when `_onexit` is called from within a DLL, routines registered with `_onexit` run on a DLL's unloading after `DllMain` is called with DLL_PROCESS_DETACH.  \n  \n `_onexit` is a Microsoft extension. For ANSI portability, use [atexit](../../c-runtime-library/reference/atexit.md). The `_onexit_m` version of the function is for mixed mode use.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_onexit`|\\<stdlib.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_onexit.c  \n  \n#include <stdlib.h>  \n#include <stdio.h>  \n  \n/* Prototypes */  \nint fn1(void), fn2(void), fn3(void), fn4 (void);  \n  \nint main( void )  \n{  \n   _onexit( fn1 );  \n   _onexit( fn2 );  \n   _onexit( fn3 );  \n   _onexit( fn4 );  \n   printf( \"This is executed first.\\n\" );  \n}  \n  \nint fn1()  \n{  \n   printf( \"next.\\n\" );  \n   return 0;  \n}  \n  \nint fn2()  \n{  \n   printf( \"executed \" );  \n   return 0;  \n}  \n  \nint fn3()  \n{  \n   printf( \"is \" );  \n   return 0;  \n}  \n  \nint fn4()  \n{  \n   printf( \"This \" );  \n   return 0;  \n}  \n```  \n  \n## Output  \n  \n```  \nThis is executed first.  \nThis is executed next.  \n```  \n  \n## .NET Framework Equivalent  \n [System::Diagnostics::Process::Exited](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.exited.aspx)  \n  \n## See Also  \n [Process and Environment Control](../../c-runtime-library/process-and-environment-control.md)   \n [atexit](../../c-runtime-library/reference/atexit.md)   \n [exit, _Exit, _exit](../../c-runtime-library/reference/exit-exit-exit.md)   \n [__dllonexit](../../c-runtime-library/dllonexit.md)"}