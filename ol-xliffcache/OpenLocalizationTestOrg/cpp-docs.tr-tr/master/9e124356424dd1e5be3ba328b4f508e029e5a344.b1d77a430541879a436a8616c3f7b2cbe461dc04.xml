{"nodes":[{"pos":[12,73],"content":"Recordset: Parameterizing a Recordset (ODBC) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Recordset: Parameterizing a Recordset (ODBC) | Microsoft Docs","pos":[0,61]}]},{"content":"Recordset: Parameterizing a Recordset (ODBC)","pos":[727,771]},{"content":"This topic applies to the MFC ODBC classes.","pos":[772,815]},{"content":"Sometimes you might want to be able to select records at run time, using information you have calculated or obtained from your end user.","pos":[822,958]},{"content":"Recordset parameters let you accomplish that goal.","pos":[959,1009]},{"content":"This topic explains:","pos":[1016,1036]},{"pos":[1046,1122],"content":"<bpt id=\"p1\">[</bpt>The purpose of a parameterized recordset<ept id=\"p1\">](#_core_parameterized_recordsets)</ept>.","source":"[The purpose of a parameterized recordset](#_core_parameterized_recordsets)."},{"pos":[1132,1221],"content":"<bpt id=\"p1\">[</bpt>When and why you might want to parameterize a recordset<ept id=\"p1\">](#_core_when_to_use_parameters)</ept>.","source":"[When and why you might want to parameterize a recordset](#_core_when_to_use_parameters)."},{"pos":[1231,1339],"content":"<bpt id=\"p1\">[</bpt>How to declare parameter data members in your recordset class<ept id=\"p1\">](#_core_parameterizing_your_recordset_class)</ept>.","source":"[How to declare parameter data members in your recordset class](#_core_parameterizing_your_recordset_class)."},{"pos":[1349,1464],"content":"<bpt id=\"p1\">[</bpt>How to pass parameter information to a recordset object at run time<ept id=\"p1\">](#_core_passing_parameter_values_at_run_time)</ept>.","source":"[How to pass parameter information to a recordset object at run time](#_core_passing_parameter_values_at_run_time)."},{"pos":[1520,1544],"content":"Parameterized Recordsets"},{"content":"A parameterized recordset lets you pass parameter information at run time.","pos":[1548,1622]},{"content":"This has two valuable effects:","pos":[1623,1653]},{"content":"It might result in better execution speed.","pos":[1663,1705]},{"content":"It lets you build a query at run time, based on information not available to you at design time, such as information obtained from your user or calculated at run time.","pos":[1715,1882]},{"content":"When you call <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> to run the query, the recordset uses the parameter information to complete its <bpt id=\"p2\">**</bpt>SQL SELECT<ept id=\"p2\">**</ept> statement.","pos":[1889,2016],"source":"When you call **Open** to run the query, the recordset uses the parameter information to complete its **SQL SELECT** statement."},{"content":"You can parameterize any recordset.","pos":[2017,2052]},{"pos":[2106,2128],"content":"When to Use Parameters"},{"content":"Typical uses for parameters include:","pos":[2132,2168]},{"content":"Passing run-time arguments to a predefined query.","pos":[2178,2227]},{"content":"To pass parameters to a stored procedure, you must specify a complete custom ODBC <bpt id=\"p1\">**</bpt>CALL<ept id=\"p1\">**</ept> statement — with parameter placeholders — when you call <bpt id=\"p2\">**</bpt>Open<ept id=\"p2\">**</ept>, overriding the recordset's default SQL statement.","pos":[2238,2444],"source":"To pass parameters to a stored procedure, you must specify a complete custom ODBC **CALL** statement — with parameter placeholders — when you call **Open**, overriding the recordset's default SQL statement."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRecordset::Open<ept id=\"p1\">](../../mfc/reference/crecordset-class.md#crecordset__open)</ept> in the <bpt id=\"p2\">*</bpt>Class Library Reference<ept id=\"p2\">*</ept> and <bpt id=\"p3\">[</bpt>SQL: Customizing Your Recordset's SQL Statement (ODBC)<ept id=\"p3\">](../../data/odbc/sql-customizing-your-recordsets-sql-statement-odbc.md)</ept> and <bpt id=\"p4\">[</bpt>Recordset: Declaring a Class for a Predefined Query (ODBC)<ept id=\"p4\">](../../data/odbc/recordset-declaring-a-class-for-a-predefined-query-odbc.md)</ept>.","pos":[2445,2854],"source":" For more information, see [CRecordset::Open](../../mfc/reference/crecordset-class.md#crecordset__open) in the *Class Library Reference* and [SQL: Customizing Your Recordset's SQL Statement (ODBC)](../../data/odbc/sql-customizing-your-recordsets-sql-statement-odbc.md) and [Recordset: Declaring a Class for a Predefined Query (ODBC)](../../data/odbc/recordset-declaring-a-class-for-a-predefined-query-odbc.md)."},{"content":"Efficiently performing numerous requeries with different parameter information.","pos":[2865,2944]},{"content":"For example, each time your end user looks up information for a particular student in the student registration database, you can specify the student's name or ID as a parameter obtained from the user.","pos":[2955,3155]},{"content":"Then, when you call your recordset's <bpt id=\"p1\">**</bpt>Requery<ept id=\"p1\">**</ept> member function, the query selects only that student's record.","pos":[3156,3267],"source":" Then, when you call your recordset's **Requery** member function, the query selects only that student's record."},{"pos":[3278,3358],"content":"Your recordset's filter string, stored in <bpt id=\"p1\">**</bpt>m_strFilter<ept id=\"p1\">**</ept>, might look like this:","source":"Your recordset's filter string, stored in **m_strFilter**, might look like this:"},{"content":"Suppose you obtain the student ID in the variable <ph id=\"ph1\">`strInputID`</ph>.","pos":[3414,3477],"source":"Suppose you obtain the student ID in the variable `strInputID`."},{"content":"When you set a parameter to <ph id=\"ph1\">`strInputID`</ph> (for example, the student ID 100) the value of the variable is bound to the parameter placeholder represented by the \"?\" in the filter string.","pos":[3478,3661],"source":" When you set a parameter to `strInputID` (for example, the student ID 100) the value of the variable is bound to the parameter placeholder represented by the \"?\" in the filter string."},{"content":"Assign the parameter value as follows:","pos":[3672,3710]},{"content":"You would not want to set up a filter string this way:","pos":[3811,3865]},{"pos":[4030,4193],"content":"For a discussion of how to use quotes correctly for filter strings, see <bpt id=\"p1\">[</bpt>Recordset: Filtering Records (ODBC)<ept id=\"p1\">](../../data/odbc/recordset-filtering-records-odbc.md)</ept>.","source":"For a discussion of how to use quotes correctly for filter strings, see [Recordset: Filtering Records (ODBC)](../../data/odbc/recordset-filtering-records-odbc.md)."},{"content":"The parameter value is different each time you requery the recordset for a new student ID.","pos":[4204,4294]},{"pos":[4306,4611],"content":"[!TIP]\n Using a parameter is more efficient than simply a filter. For a parameterized recordset, the database must process a SQL **SELECT** statement only once. For a filtered recordset without parameters, the **SELECT** statement must be processed each time you **Requery** with a new filter value.","leadings":["","    > "],"nodes":[{"content":" Using a parameter is more efficient than simply a filter. For a parameterized recordset, the database must process a SQL **SELECT** statement only once. For a filtered recordset without parameters, the **SELECT** statement must be processed each time you **Requery** with a new filter value.","pos":[7,299],"nodes":[{"content":"Using a parameter is more efficient than simply a filter.","pos":[1,58]},{"content":"For a parameterized recordset, the database must process a SQL <bpt id=\"p1\">**</bpt>SELECT<ept id=\"p1\">**</ept> statement only once.","pos":[59,153],"source":" For a parameterized recordset, the database must process a SQL **SELECT** statement only once."},{"content":"For a filtered recordset without parameters, the <bpt id=\"p1\">**</bpt>SELECT<ept id=\"p1\">**</ept> statement must be processed each time you <bpt id=\"p2\">**</bpt>Requery<ept id=\"p2\">**</ept> with a new filter value.","pos":[154,292],"source":" For a filtered recordset without parameters, the **SELECT** statement must be processed each time you **Requery** with a new filter value."}]}]},{"pos":[4618,4749],"content":"For more information about filters, see <bpt id=\"p1\">[</bpt>Recordset: Filtering Records (ODBC)<ept id=\"p1\">](../../data/odbc/recordset-filtering-records-odbc.md)</ept>.","source":"For more information about filters, see [Recordset: Filtering Records (ODBC)](../../data/odbc/recordset-filtering-records-odbc.md)."},{"pos":[4816,4851],"content":"Parameterizing Your Recordset Class"},{"pos":[4859,5194],"content":"[!NOTE]\n This section applies to objects derived from `CRecordset` in which bulk row fetching has not been implemented. If you are using bulk row fetching, implementing parameters is a similar process. For more information, see [Recordset: Fetching Records in Bulk (ODBC)](../../data/odbc/recordset-fetching-records-in-bulk-odbc.md).","leadings":["","> "],"nodes":[{"content":" This section applies to objects derived from `CRecordset` in which bulk row fetching has not been implemented. If you are using bulk row fetching, implementing parameters is a similar process. For more information, see [Recordset: Fetching Records in Bulk (ODBC)](../../data/odbc/recordset-fetching-records-in-bulk-odbc.md).","pos":[8,333],"nodes":[{"content":"This section applies to objects derived from <ph id=\"ph1\">`CRecordset`</ph> in which bulk row fetching has not been implemented.","pos":[1,111],"source":" This section applies to objects derived from `CRecordset` in which bulk row fetching has not been implemented."},{"content":"If you are using bulk row fetching, implementing parameters is a similar process.","pos":[112,193]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Recordset: Fetching Records in Bulk (ODBC)<ept id=\"p1\">](../../data/odbc/recordset-fetching-records-in-bulk-odbc.md)</ept>.","pos":[194,325],"source":" For more information, see [Recordset: Fetching Records in Bulk (ODBC)](../../data/odbc/recordset-fetching-records-in-bulk-odbc.md)."}]}]},{"content":"Before you create your recordset class, determine what parameters you need, what their data types are, and how the recordset uses them.","pos":[5201,5336]},{"content":"To parameterize a recordset class","pos":[5347,5380]},{"pos":[5390,5516],"content":"Run the <bpt id=\"p1\">[</bpt>MFC ODBC Consumer Wizard<ept id=\"p1\">](../../mfc/reference/adding-an-mfc-odbc-consumer.md)</ept> from <bpt id=\"p2\">**</bpt>Add Class<ept id=\"p2\">**</ept> to create the class.","source":"Run the [MFC ODBC Consumer Wizard](../../mfc/reference/adding-an-mfc-odbc-consumer.md) from **Add Class** to create the class."},{"content":"Specify field data members for the recordset's columns.","pos":[5526,5581]},{"content":"After the wizard writes the class to a file in your project, go to the .h file and manually add one or more parameter data members to the class declaration.","pos":[5591,5747]},{"content":"The addition might look something like the following example, part of a snapshot class designed to answer the query \"Which students are in the senior class?\"","pos":[5748,5905]},{"content":"Add your parameter data members after the wizard-generated field data members.","pos":[6199,6277]},{"content":"The convention is to append the word \"Param\" to each user-defined parameter name.","pos":[6278,6359]},{"content":"Modify the <bpt id=\"p1\">[</bpt>DoFieldExchange<ept id=\"p1\">](../../mfc/reference/crecordset-class.md#crecordset__dofieldexchange)</ept> member function definition in the .cpp file.","pos":[6369,6511],"source":"Modify the [DoFieldExchange](../../mfc/reference/crecordset-class.md#crecordset__dofieldexchange) member function definition in the .cpp file."},{"content":"Add an RFX function call for each parameter data member you added to the class.","pos":[6512,6591]},{"content":"For information about writing your RFX functions, see <bpt id=\"p1\">[</bpt>Record Field Exchange: How RFX Works<ept id=\"p1\">](../../data/odbc/record-field-exchange-how-rfx-works.md)</ept>.","pos":[6592,6741],"source":" For information about writing your RFX functions, see [Record Field Exchange: How RFX Works](../../data/odbc/record-field-exchange-how-rfx-works.md)."},{"content":"Precede the RFX calls for the parameters with a single call to:","pos":[6742,6805]},{"pos":[6934,7025],"content":"In the constructor of your recordset class, increment the count of parameters, <ph id=\"ph1\">`m_nParams`</ph>.","source":"In the constructor of your recordset class, increment the count of parameters, `m_nParams`."},{"pos":[7036,7182],"content":"For information, see <bpt id=\"p1\">[</bpt>Record Field Exchange: Working with the Wizard Code<ept id=\"p1\">](../../data/odbc/record-field-exchange-working-with-the-wizard-code.md)</ept>.","source":"For information, see [Record Field Exchange: Working with the Wizard Code](../../data/odbc/record-field-exchange-working-with-the-wizard-code.md)."},{"content":"When you write the code that creates a recordset object of this class, place a \"?\" (question mark) symbol in each place in your SQL statement strings where a parameter is to be replaced.","pos":[7192,7378]},{"content":"At run time, \"?\" placeholders are filled, in order, by the parameter values you pass.","pos":[7389,7474]},{"content":"The first parameter data member set after the <bpt id=\"p1\">[</bpt>SetFieldType<ept id=\"p1\">](../../mfc/reference/cfieldexchange-class.md#cfieldexchange__setfieldtype)</ept> call replaces the first \"?\" in the SQL string, the second parameter data member replaces the second \"?\", and so on.","pos":[7475,7725],"source":" The first parameter data member set after the [SetFieldType](../../mfc/reference/cfieldexchange-class.md#cfieldexchange__setfieldtype) call replaces the first \"?\" in the SQL string, the second parameter data member replaces the second \"?\", and so on."},{"pos":[7733,7917],"content":"[!NOTE]\n Parameter order is important: the order of RFX calls for parameters in your `DoFieldExchange` function must match the order of the parameter placeholders in your SQL string.","leadings":["","> "],"nodes":[{"content":"Parameter order is important: the order of RFX calls for parameters in your <ph id=\"ph1\">`DoFieldExchange`</ph> function must match the order of the parameter placeholders in your SQL string.","pos":[9,182],"source":" Parameter order is important: the order of RFX calls for parameters in your `DoFieldExchange` function must match the order of the parameter placeholders in your SQL string."}]},{"pos":[7936,8181],"content":"The most likely string to work with is the string you specify (if any) for the class's <bpt id=\"p1\">[</bpt>m_strFilter<ept id=\"p1\">](../../mfc/reference/crecordset-class.md#crecordset__m_strfilter)</ept> data member, but some ODBC drivers might allow parameters in other SQL clauses.","source":"The most likely string to work with is the string you specify (if any) for the class's [m_strFilter](../../mfc/reference/crecordset-class.md#crecordset__m_strfilter) data member, but some ODBC drivers might allow parameters in other SQL clauses."},{"pos":[8249,8285],"content":"Passing Parameter Values at Run Time"},{"pos":[8289,8414],"content":"You must specify parameter values before you call <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> (for a new recordset object) or <bpt id=\"p2\">**</bpt>Requery<ept id=\"p2\">**</ept> (for an existing one).","source":"You must specify parameter values before you call **Open** (for a new recordset object) or **Requery** (for an existing one)."},{"content":"To pass parameter values to a recordset object at run time","pos":[8425,8483]},{"content":"Construct the recordset object.","pos":[8493,8524]},{"content":"Prepare a string or strings, such as the <bpt id=\"p1\">**</bpt>m_strFilter<ept id=\"p1\">**</ept> string, containing the SQL statement, or parts of it.","pos":[8534,8644],"source":"Prepare a string or strings, such as the **m_strFilter** string, containing the SQL statement, or parts of it."},{"content":"Put \"?\" placeholders where the parameter information is to go.","pos":[8645,8707]},{"content":"Assign a run-time parameter value to each parameter data member of the object.","pos":[8717,8795]},{"pos":[8805,8883],"content":"Call the <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> member function (or <bpt id=\"p2\">**</bpt>Requery<ept id=\"p2\">**</ept>, for an existing recordset).","source":"Call the **Open** member function (or **Requery**, for an existing recordset)."},{"content":"For example, suppose you want to specify a filter string for your recordset using information obtained at run time.","pos":[8890,9005]},{"content":"Assume you have constructed a recordset of class <ph id=\"ph1\">`CStudentSet`</ph> earlier — called <ph id=\"ph2\">`rsStudent`</ph>s — and now want to requery it for a particular kind of student information.","pos":[9006,9173],"source":" Assume you have constructed a recordset of class `CStudentSet` earlier — called `rsStudent`s — and now want to requery it for a particular kind of student information."},{"content":"The recordset contains records for those students whose records meet the conditions specified by the filter, which was constructed from run-time parameters.","pos":[9604,9760]},{"content":"In this case, the recordset contains records for all senior students.","pos":[9761,9830]},{"pos":[9838,10155],"content":"[!NOTE]\n If needed, you can set the value of a parameter data member to Null, using [SetParamNull](../../mfc/reference/crecordset-class.md#crecordset__setparamnull). You can likewise check whether a parameter data member is Null, using [IsFieldNull](../../mfc/reference/crecordset-class.md#crecordset__isfieldnull).","leadings":["","> "],"nodes":[{"content":" If needed, you can set the value of a parameter data member to Null, using [SetParamNull](../../mfc/reference/crecordset-class.md#crecordset__setparamnull). You can likewise check whether a parameter data member is Null, using [IsFieldNull](../../mfc/reference/crecordset-class.md#crecordset__isfieldnull).","pos":[8,315],"nodes":[{"content":"If needed, you can set the value of a parameter data member to Null, using <bpt id=\"p1\">[</bpt>SetParamNull<ept id=\"p1\">](../../mfc/reference/crecordset-class.md#crecordset__setparamnull)</ept>.","pos":[1,157],"source":" If needed, you can set the value of a parameter data member to Null, using [SetParamNull](../../mfc/reference/crecordset-class.md#crecordset__setparamnull)."},{"content":"You can likewise check whether a parameter data member is Null, using <bpt id=\"p1\">[</bpt>IsFieldNull<ept id=\"p1\">](../../mfc/reference/crecordset-class.md#crecordset__isfieldnull)</ept>.","pos":[158,307],"source":" You can likewise check whether a parameter data member is Null, using [IsFieldNull](../../mfc/reference/crecordset-class.md#crecordset__isfieldnull)."}]}]},{"content":"See Also","pos":[10164,10172]},{"content":"Recordset (ODBC)","pos":[10177,10193]},{"content":"Recordset: Adding, Updating, and Deleting Records (ODBC)","pos":[10235,10291]},{"content":"Recordset: How Recordsets Select Records (ODBC)","pos":[10370,10417]}],"content":"---\ntitle: \"Recordset: Parameterizing a Recordset (ODBC) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"parameterizing recordsets\"\n  - \"ODBC recordsets, parameterizing\"\n  - \"recordsets, parameterizing\"\n  - \"passing parameters, to queries at runtime\"\nms.assetid: 7d1dfeb6-5ee0-45e2-aacc-63bc52a465cd\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Recordset: Parameterizing a Recordset (ODBC)\nThis topic applies to the MFC ODBC classes.  \n  \n Sometimes you might want to be able to select records at run time, using information you have calculated or obtained from your end user. Recordset parameters let you accomplish that goal.  \n  \n This topic explains:  \n  \n-   [The purpose of a parameterized recordset](#_core_parameterized_recordsets).  \n  \n-   [When and why you might want to parameterize a recordset](#_core_when_to_use_parameters).  \n  \n-   [How to declare parameter data members in your recordset class](#_core_parameterizing_your_recordset_class).  \n  \n-   [How to pass parameter information to a recordset object at run time](#_core_passing_parameter_values_at_run_time).  \n  \n##  <a name=\"_core_parameterized_recordsets\"></a> Parameterized Recordsets  \n A parameterized recordset lets you pass parameter information at run time. This has two valuable effects:  \n  \n-   It might result in better execution speed.  \n  \n-   It lets you build a query at run time, based on information not available to you at design time, such as information obtained from your user or calculated at run time.  \n  \n When you call **Open** to run the query, the recordset uses the parameter information to complete its **SQL SELECT** statement. You can parameterize any recordset.  \n  \n##  <a name=\"_core_when_to_use_parameters\"></a> When to Use Parameters  \n Typical uses for parameters include:  \n  \n-   Passing run-time arguments to a predefined query.  \n  \n     To pass parameters to a stored procedure, you must specify a complete custom ODBC **CALL** statement — with parameter placeholders — when you call **Open**, overriding the recordset's default SQL statement. For more information, see [CRecordset::Open](../../mfc/reference/crecordset-class.md#crecordset__open) in the *Class Library Reference* and [SQL: Customizing Your Recordset's SQL Statement (ODBC)](../../data/odbc/sql-customizing-your-recordsets-sql-statement-odbc.md) and [Recordset: Declaring a Class for a Predefined Query (ODBC)](../../data/odbc/recordset-declaring-a-class-for-a-predefined-query-odbc.md).  \n\n  \n-   Efficiently performing numerous requeries with different parameter information.  \n  \n     For example, each time your end user looks up information for a particular student in the student registration database, you can specify the student's name or ID as a parameter obtained from the user. Then, when you call your recordset's **Requery** member function, the query selects only that student's record.  \n  \n     Your recordset's filter string, stored in **m_strFilter**, might look like this:  \n  \n    ```  \n    \"StudentID = ?\"  \n    ```  \n  \n     Suppose you obtain the student ID in the variable `strInputID`. When you set a parameter to `strInputID` (for example, the student ID 100) the value of the variable is bound to the parameter placeholder represented by the \"?\" in the filter string.  \n  \n     Assign the parameter value as follows:  \n  \n    ```  \n    strInputID = \"100\";  \n    ...  \n    m_strParam = strInputID;  \n    ```  \n  \n     You would not want to set up a filter string this way:  \n  \n    ```  \n    m_strFilter = \"StudentID = 100\";   // 100 is incorrectly quoted  \n                                       // for some drivers  \n    ```  \n  \n     For a discussion of how to use quotes correctly for filter strings, see [Recordset: Filtering Records (ODBC)](../../data/odbc/recordset-filtering-records-odbc.md).  \n  \n     The parameter value is different each time you requery the recordset for a new student ID.  \n  \n    > [!TIP]\n    >  Using a parameter is more efficient than simply a filter. For a parameterized recordset, the database must process a SQL **SELECT** statement only once. For a filtered recordset without parameters, the **SELECT** statement must be processed each time you **Requery** with a new filter value.  \n  \n For more information about filters, see [Recordset: Filtering Records (ODBC)](../../data/odbc/recordset-filtering-records-odbc.md).  \n  \n##  <a name=\"_core_parameterizing_your_recordset_class\"></a> Parameterizing Your Recordset Class  \n  \n> [!NOTE]\n>  This section applies to objects derived from `CRecordset` in which bulk row fetching has not been implemented. If you are using bulk row fetching, implementing parameters is a similar process. For more information, see [Recordset: Fetching Records in Bulk (ODBC)](../../data/odbc/recordset-fetching-records-in-bulk-odbc.md).  \n  \n Before you create your recordset class, determine what parameters you need, what their data types are, and how the recordset uses them.  \n  \n#### To parameterize a recordset class  \n  \n1.  Run the [MFC ODBC Consumer Wizard](../../mfc/reference/adding-an-mfc-odbc-consumer.md) from **Add Class** to create the class.  \n  \n2.  Specify field data members for the recordset's columns.  \n  \n3.  After the wizard writes the class to a file in your project, go to the .h file and manually add one or more parameter data members to the class declaration. The addition might look something like the following example, part of a snapshot class designed to answer the query \"Which students are in the senior class?\"  \n  \n    ```  \n    class CStudentSet : public CRecordset  \n    {  \n    // Field/Param Data  \n        CString m_strFirstName;  \n        CString m_strLastName;  \n        CString m_strStudentID;  \n        CString m_strGradYear;  \n  \n        CString m_strGradYrParam;  \n    };  \n    ```  \n  \n     Add your parameter data members after the wizard-generated field data members. The convention is to append the word \"Param\" to each user-defined parameter name.  \n  \n4.  Modify the [DoFieldExchange](../../mfc/reference/crecordset-class.md#crecordset__dofieldexchange) member function definition in the .cpp file. Add an RFX function call for each parameter data member you added to the class. For information about writing your RFX functions, see [Record Field Exchange: How RFX Works](../../data/odbc/record-field-exchange-how-rfx-works.md). Precede the RFX calls for the parameters with a single call to:  \n  \n    ```  \n    pFX->SetFieldType( CFieldExchange::param );  \n    // RFX calls for parameter data members  \n    ```  \n  \n5.  In the constructor of your recordset class, increment the count of parameters, `m_nParams`.  \n  \n     For information, see [Record Field Exchange: Working with the Wizard Code](../../data/odbc/record-field-exchange-working-with-the-wizard-code.md).  \n  \n6.  When you write the code that creates a recordset object of this class, place a \"?\" (question mark) symbol in each place in your SQL statement strings where a parameter is to be replaced.  \n  \n     At run time, \"?\" placeholders are filled, in order, by the parameter values you pass. The first parameter data member set after the [SetFieldType](../../mfc/reference/cfieldexchange-class.md#cfieldexchange__setfieldtype) call replaces the first \"?\" in the SQL string, the second parameter data member replaces the second \"?\", and so on.  \n  \n> [!NOTE]\n>  Parameter order is important: the order of RFX calls for parameters in your `DoFieldExchange` function must match the order of the parameter placeholders in your SQL string.  \n  \n> [!TIP]\n\n>  The most likely string to work with is the string you specify (if any) for the class's [m_strFilter](../../mfc/reference/crecordset-class.md#crecordset__m_strfilter) data member, but some ODBC drivers might allow parameters in other SQL clauses.  \n  \n##  <a name=\"_core_passing_parameter_values_at_run_time\"></a> Passing Parameter Values at Run Time  \n You must specify parameter values before you call **Open** (for a new recordset object) or **Requery** (for an existing one).  \n  \n#### To pass parameter values to a recordset object at run time  \n  \n1.  Construct the recordset object.  \n  \n2.  Prepare a string or strings, such as the **m_strFilter** string, containing the SQL statement, or parts of it. Put \"?\" placeholders where the parameter information is to go.  \n  \n3.  Assign a run-time parameter value to each parameter data member of the object.  \n  \n4.  Call the **Open** member function (or **Requery**, for an existing recordset).  \n  \n For example, suppose you want to specify a filter string for your recordset using information obtained at run time. Assume you have constructed a recordset of class `CStudentSet` earlier — called `rsStudent`s — and now want to requery it for a particular kind of student information.  \n  \n```  \n// Set up a filter string with   \n// parameter placeholders  \nrsStudents.m_strFilter = \"GradYear <= ?\";  \n  \n// Obtain or calculate parameter values   \n// to pass--simply assigned here   \nCString strGradYear = GetCurrentAcademicYear( );  \n  \n// Assign the values to parameter data members  \nrsStudents.m_strGradYrParam = strGradYear;  \n  \n// Run the query  \nif( !rsStudents.Requery( ) )  \n    return FALSE;  \n```  \n  \n The recordset contains records for those students whose records meet the conditions specified by the filter, which was constructed from run-time parameters. In this case, the recordset contains records for all senior students.  \n  \n> [!NOTE]\n>  If needed, you can set the value of a parameter data member to Null, using [SetParamNull](../../mfc/reference/crecordset-class.md#crecordset__setparamnull). You can likewise check whether a parameter data member is Null, using [IsFieldNull](../../mfc/reference/crecordset-class.md#crecordset__isfieldnull).  \n  \n## See Also  \n [Recordset (ODBC)](../../data/odbc/recordset-odbc.md)   \n [Recordset: Adding, Updating, and Deleting Records (ODBC)](../../data/odbc/recordset-adding-updating-and-deleting-records-odbc.md)   \n [Recordset: How Recordsets Select Records (ODBC)](../../data/odbc/recordset-how-recordsets-select-records-odbc.md)"}