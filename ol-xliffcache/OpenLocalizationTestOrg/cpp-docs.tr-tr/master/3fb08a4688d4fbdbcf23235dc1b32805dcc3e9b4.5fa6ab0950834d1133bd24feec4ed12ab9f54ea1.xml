{"nodes":[{"pos":[12,46],"content":"divides (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"divides (STL-CLR) | Microsoft Docs","pos":[0,34]}]},{"content":"divides (STL/CLR)","pos":[620,637]},{"content":"The template class describes a functor that, when called, returns the first argument divided by the second.","pos":[638,745]},{"content":"You use it specify a function object in terms of its argument type.","pos":[746,813]},{"content":"Syntax","pos":[822,828]},{"content":"Parameters","pos":[1394,1404]},{"content":"Arg","pos":[1408,1411]},{"content":"The type of the arguments and return value.","pos":[1415,1458]},{"content":"Member Functions","pos":[1467,1483]},{"content":"Type Definition","pos":[1490,1505]},{"content":"Description","pos":[1506,1517]},{"content":"delegate_type","pos":[1566,1579]},{"content":"The type of the generic delegate.","pos":[1580,1613]},{"content":"first_argument_type","pos":[1618,1637]},{"content":"The type of the functor first argument.","pos":[1638,1677]},{"content":"result_type","pos":[1682,1693]},{"content":"The type of the functor result.","pos":[1694,1725]},{"content":"second_argument_type","pos":[1730,1750]},{"content":"The type of the functor second argument.","pos":[1751,1791]},{"content":"Member","pos":[1799,1805]},{"content":"Description","pos":[1806,1817]},{"content":"divides","pos":[1857,1864]},{"content":"Constructs the functor.","pos":[1865,1888]},{"content":"Operator","pos":[1896,1904]},{"content":"Description","pos":[1905,1916]},{"content":"operator()","pos":[1958,1968]},{"content":"Computes the desired function.","pos":[1969,1999]},{"content":"operator delegate_type^()","pos":[2004,2029]},{"content":"Casts the functor to a delegate.","pos":[2030,2062]},{"content":"Remarks","pos":[2072,2079]},{"content":"The template class describes a two-argument functor.","pos":[2083,2135]},{"content":"It defines the member operator <ph id=\"ph1\">`operator()`</ph> so that, when the object is called as a function, it returns the first argument divided by the second.","pos":[2136,2282],"source":" It defines the member operator `operator()` so that, when the object is called as a function, it returns the first argument divided by the second."},{"pos":[2289,2411],"content":"You can also pass the object as a function argument whose type is <ph id=\"ph1\">`delegate_type^`</ph> and it will be converted appropriately.","source":"You can also pass the object as a function argument whose type is `delegate_type^` and it will be converted appropriately."},{"content":"Example","pos":[2420,2427]},{"content":"Requirements","pos":[3446,3458]},{"pos":[3462,3494],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/functional&gt;","source":"**Header:** \\<cliext/functional>"},{"pos":[3501,3522],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[3531,3539]},{"content":"modulus (STL/CLR)","pos":[3544,3561]},{"content":"multiplies (STL/CLR)","pos":[3598,3618]}],"content":"---\ntitle: \"divides (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::divides\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"divides function [STL/CLR]\"\nms.assetid: 4c36026a-02ba-475d-af68-854599647f4b\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# divides (STL/CLR)\nThe template class describes a functor that, when called, returns the first argument divided by the second. You use it specify a function object in terms of its argument type.  \n  \n## Syntax  \n  \n```  \ntemplate<typename Arg>  \n    ref class divides  \n    { // wrap operator()  \npublic:  \n    typedef Arg first_argument_type;  \n    typedef Arg second_argument_type;  \n    typedef Arg result_type;  \n    typedef Microsoft::VisualC::StlClr::BinaryDelegate<  \n        first_argument_type, second_argument_type, result_type>  \n        delegate_type;  \n  \n    divides();  \n    divides(divides<Arg>% right);  \n  \n    result_type operator()(first_argument_type left,  \n        second_argument_type right);  \n    operator delegate_type^();  \n    };  \n```  \n  \n#### Parameters  \n Arg  \n The type of the arguments and return value.  \n  \n## Member Functions  \n  \n|Type Definition|Description|  \n|---------------------|-----------------|  \n|delegate_type|The type of the generic delegate.|  \n|first_argument_type|The type of the functor first argument.|  \n|result_type|The type of the functor result.|  \n|second_argument_type|The type of the functor second argument.|  \n  \n|Member|Description|  \n|------------|-----------------|  \n|divides|Constructs the functor.|  \n  \n|Operator|Description|  \n|--------------|-----------------|  \n|operator()|Computes the desired function.|  \n|operator delegate_type^()|Casts the functor to a delegate.|  \n  \n## Remarks  \n The template class describes a two-argument functor. It defines the member operator `operator()` so that, when the object is called as a function, it returns the first argument divided by the second.  \n  \n You can also pass the object as a function argument whose type is `delegate_type^` and it will be converted appropriately.  \n  \n## Example  \n  \n```  \n// cliext_divides.cpp   \n// compile with: /clr   \n#include <cliext/algorithm>   \n#include <cliext/functional>   \n#include <cliext/vector>   \n  \ntypedef cliext::vector<int> Myvector;   \nint main()   \n    {   \n    Myvector c1;   \n    c1.push_back(4);   \n    c1.push_back(3);   \n    Myvector c2;   \n    c2.push_back(2);   \n    c2.push_back(1);   \n    Myvector c3(2, 0);   \n  \n// display initial contents \" 4 3\" and \" 2 1\"   \n    for each (int elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n    for each (int elem in c2)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// transform and display   \n    cliext::transform(c1.begin(), c1.begin() + 2,   \n        c2.begin(), c3.begin(), cliext::divides<int>());   \n    for each (int elem in c3)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n4 3  \n2 1  \n2 3  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/functional>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [modulus (STL/CLR)](../dotnet/modulus-stl-clr.md)   \n [multiplies (STL/CLR)](../dotnet/multiplies-stl-clr.md)"}