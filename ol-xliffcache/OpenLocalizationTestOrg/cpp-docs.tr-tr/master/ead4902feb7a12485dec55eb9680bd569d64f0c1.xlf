<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ead4902feb7a12485dec55eb9680bd569d64f0c1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\multithreading-programming-tips.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c137b26a0c9cf788055dd6c670f1cdf84cd59356</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">71454dd82e72a95435f5fc7d9aebe1a371a492ff</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Multithreading: Programming Tips | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Multithreading: Programming Tips</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Multithreaded applications require stricter care than single-threaded applications when accessing data.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Because there are multiple, independent paths of execution in use simultaneously in multithreaded applications, either the algorithms, the data, or both must be aware that data could be used by more than one thread at a time.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic explains techniques for avoiding potential problems when programming multithreaded applications with the Microsoft Foundation Class (MFC) library.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Accessing Objects from Multiple Threads</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Accessing MFC Objects from Non-MFC Threads</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Windows Handle Maps</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Communicating Between Threads</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Accessing Objects from Multiple Threads</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For size and performance reasons, MFC objects are not thread-safe at the object level, only at the class level.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This means that you can have two separate threads manipulating two different <ph id="ph1">`CString`</ph> objects, but not two threads manipulating the same <ph id="ph2">`CString`</ph> object.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you absolutely must have multiple threads manipulating the same object, protect such access with appropriate Win32 synchronization mechanisms, such as critical sections.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information about critical sections and other related objects, see <bpt id="p1">[</bpt>Synchronization<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686353)</ept> in the <ph id="ph1">[!INCLUDE[winsdkshort](../atl-mfc-shared/reference/includes/winsdkshort_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The class library uses critical sections internally to protect global data structures, such as those used by the debug memory allocation.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Accessing MFC Objects from Non-MFC Threads</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you have a multithreaded application that creates a thread in a way other than using a <bpt id="p1">[</bpt>CWinThread<ept id="p1">](../mfc/reference/cwinthread-class.md)</ept> object, you cannot access other MFC objects from that thread.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In other words, if you want to access any MFC object from a secondary thread, you must create that thread with one of the methods described in <bpt id="p1">[</bpt>Multithreading: Creating User-Interface Threads<ept id="p1">](../parallel/multithreading-creating-user-interface-threads.md)</ept> or <bpt id="p2">[</bpt>Multithreading: Creating Worker Threads<ept id="p2">](../parallel/multithreading-creating-worker-threads.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>These methods are the only ones that allow the class library to initialize the internal variables necessary to handle multithreaded applications.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Windows Handle Maps</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>As a general rule, a thread can access only MFC objects that it created.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This is because temporary and permanent Windows handle maps are kept in thread local storage to help maintain protection from simultaneous access from multiple threads.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example, a worker thread cannot perform a calculation and then call a document's <ph id="ph1">`UpdateAllViews`</ph> member function to have the windows that contain views on the new data modified.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This has no effect at all, because the map from <ph id="ph1">`CWnd`</ph> objects to <ph id="ph2">`HWND`</ph>s is local to the primary thread.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This means that one thread might have a mapping from a Windows handle to a C++ object, but another thread might map that same handle to a different C++ object.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Changes made in one thread would not be reflected in the other.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>There are several ways around this problem.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The first is to pass individual handles (such as an <ph id="ph1">`HWND`</ph>) rather than C++ objects to the worker thread.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The worker thread then adds these objects to its temporary map by calling the appropriate <ph id="ph1">`FromHandle`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You could also add the object to the thread's permanent map by calling <bpt id="p1">**</bpt>Attach<ept id="p1">**</ept>, but this should be done only if you are guaranteed that the object will exist longer than the thread.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Another method is to create new user-defined messages corresponding to the different tasks your worker threads will be performing and post these messages to the application's main window using <bpt id="p1">**</bpt>::PostMessage<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This method of communication is similar to two different applications conversing except that both threads are executing in the same address space.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information about handle maps, see <bpt id="p1">[</bpt>Technical Note 3<ept id="p1">](../mfc/tn003-mapping-of-windows-handles-to-objects.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more information about thread local storage, see <bpt id="p1">[</bpt>Thread Local Storage<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686749)</ept> and <bpt id="p2">[</bpt>Using Thread Local Storage<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms686991)</ept> in the <ph id="ph1">[!INCLUDE[winsdkshort](../atl-mfc-shared/reference/includes/winsdkshort_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Communicating Between Threads</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>MFC provides a number of classes that allow threads to synchronize access to objects to maintain thread safety.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Usage of these classes is described in <bpt id="p1">[</bpt>Multithreading: How to Use the Synchronization Classes<ept id="p1">](../parallel/multithreading-how-to-use-the-synchronization-classes.md)</ept> and <bpt id="p2">[</bpt>Multithreading: When to Use the Synchronization Classes<ept id="p2">](../parallel/multithreading-when-to-use-the-synchronization-classes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For more information about these objects, see <bpt id="p1">[</bpt>Synchronization<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686353)</ept> in the <ph id="ph1">[!INCLUDE[winsdkshort](../atl-mfc-shared/reference/includes/winsdkshort_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Multithreading with C++ and MFC</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>