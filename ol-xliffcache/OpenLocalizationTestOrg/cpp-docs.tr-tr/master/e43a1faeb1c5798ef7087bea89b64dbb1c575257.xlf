<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e43a1faeb1c5798ef7087bea89b64dbb1c575257</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\reference\ccomsinglethreadmodel-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d2fe9478a5844304316b9c7a24f48f2fa88c502c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4f1a390cbf00a991d53a416e97b03a6a8eba2a63</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CComSingleThreadModel Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CComSingleThreadModel Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This class provides methods for incrementing and decrementing the value of a variable.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Typedefs</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CComSingleThreadModel::AutoCriticalSection</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>References class <bpt id="p1">[</bpt>CComFakeCriticalSection<ept id="p1">](../../atl/reference/ccomfakecriticalsection-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>CComSingleThreadModel::CriticalSection</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>References class <ph id="ph1">`CComFakeCriticalSection`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>CComSingleThreadModel::ThreadModelNoCS</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>References <ph id="ph1">`CComSingleThreadModel`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CComSingleThreadModel::Decrement</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Decrements the value of the specified variable.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This implementation is not thread-safe.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>CComSingleThreadModel::Increment</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Increments the value of the specified variable.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This implementation is not thread-safe.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>provides methods for incrementing and decrementing the value of a variable.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Unlike <bpt id="p1">[</bpt>CComMultiThreadModel<ept id="p1">](../../atl/reference/ccommultithreadmodel-class.md)</ept> and <bpt id="p2">[</bpt>CComMultiThreadModelNoCS<ept id="p2">](../../atl/reference/ccommultithreadmodelnocs-class.md)</ept>, these methods are not thread-safe.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Typically, you use <ph id="ph1">`CComSingleThreadModel`</ph> through one of two <ph id="ph2">`typedef`</ph> names, either <bpt id="p1">[</bpt>CComObjectThreadModel<ept id="p1">](atl-typedefs.md#ccomobjectthreadmodel)</ept> or <bpt id="p2">[</bpt>CComGlobalsThreadModel<ept id="p2">](atl-typedefs.md#ccomglobalsthreadmodel)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The class referenced by each <ph id="ph1">`typedef`</ph> depends on the threading model used, as shown in the following table:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>typedef</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Single threading model</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Apartment threading model</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Free threading model</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>S</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>S</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>M</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>S</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>M</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>M</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>S= <ph id="ph1">`CComSingleThreadModel`</ph>; M=</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>itself defines three <ph id="ph1">`typedef`</ph> names.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>references <ph id="ph1">`CComSingleThreadModel`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`CriticalSection`</ph> reference class <bpt id="p1">[</bpt>CComFakeCriticalSection<ept id="p1">](../../atl/reference/ccomfakecriticalsection-class.md)</ept>, which provides empty methods associated with obtaining and releasing ownership of a critical section.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlbase.h</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>CComSingleThreadModel::AutoCriticalSection</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When using <ph id="ph1">`CComSingleThreadModel`</ph>, the <ph id="ph2">`typedef`</ph> name <ph id="ph3">`AutoCriticalSection`</ph> references class <bpt id="p1">[</bpt>CComFakeCriticalSection<ept id="p1">](../../atl/reference/ccomfakecriticalsection-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`CComFakeCriticalSection`</ph> does not provide a critical section, its methods do nothing.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComMultiThreadModel<ept id="p1">](../../atl/reference/ccommultithreadmodel-class.md)</ept> and <bpt id="p2">[</bpt>CComMultiThreadModelNoCS<ept id="p2">](../../atl/reference/ccommultithreadmodelnocs-class.md)</ept> contain definitions for <ph id="ph1">`AutoCriticalSection`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following table shows the relationship between the threading model class and the critical section class referenced by <ph id="ph1">`AutoCriticalSection`</ph>:</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Class defined in</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Class referenced</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In addition to <ph id="ph1">`AutoCriticalSection`</ph>, you can use the <ph id="ph2">`typedef`</ph> name <bpt id="p1">[</bpt>CriticalSection<ept id="p1">](#ccomsinglethreadmodel__criticalsection)</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You should not specify <ph id="ph1">`AutoCriticalSection`</ph> in global objects or static class members if you want to eliminate the CRT startup code.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CComMultiThreadModel::AutoCriticalSection<ept id="p1">](../../atl/reference/ccommultithreadmodel-class.md#ccommultithreadmodel__autocriticalsection)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>CComSingleThreadModel::CriticalSection</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When using <ph id="ph1">`CComSingleThreadModel`</ph>, the <ph id="ph2">`typedef`</ph> name <ph id="ph3">`CriticalSection`</ph> references class <bpt id="p1">[</bpt>CComFakeCriticalSection<ept id="p1">](../../atl/reference/ccomfakecriticalsection-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`CComFakeCriticalSection`</ph> does not provide a critical section, its methods do nothing.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComMultiThreadModel<ept id="p1">](../../atl/reference/ccommultithreadmodel-class.md)</ept> and <bpt id="p2">[</bpt>CComMultiThreadModelNoCS<ept id="p2">](../../atl/reference/ccommultithreadmodelnocs-class.md)</ept> contain definitions for <ph id="ph1">`CriticalSection`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The following table shows the relationship between the threading model class and the critical section class referenced by <ph id="ph1">`CriticalSection`</ph>:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Class defined in</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Class referenced</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In addition to <ph id="ph1">`CriticalSection`</ph>, you can use the <ph id="ph2">`typedef`</ph> name <bpt id="p1">[</bpt>AutoCriticalSection<ept id="p1">](#ccomsinglethreadmodel__autocriticalsection)</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You should not specify <ph id="ph1">`AutoCriticalSection`</ph> in global objects or static class members if you want to eliminate the CRT startup code.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CComMultiThreadModel::AutoCriticalSection<ept id="p1">](../../atl/reference/ccommultithreadmodel-class.md#ccommultithreadmodel__autocriticalsection)</ept>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>CComSingleThreadModel::Decrement</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This static function decrements the value of the variable pointed to by <ph id="ph1">`p`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>[in] Pointer to the variable to be decremented.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The result of the decrement.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>CComSingleThreadModel::Increment</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This static function decrements the value of the variable pointed to by <ph id="ph1">`p`</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>[in] Pointer to the variable to be incremented.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The result of the increment.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>CComSingleThreadModel::ThreadModelNoCS</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>When using <ph id="ph1">`CComSingleThreadModel`</ph>, the <ph id="ph2">`typedef`</ph> name <ph id="ph3">`ThreadModelNoCS`</ph> simply references <ph id="ph4">`CComSingleThreadModel`</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CComMultiThreadModel<ept id="p1">](../../atl/reference/ccommultithreadmodel-class.md)</ept> and <bpt id="p2">[</bpt>CComMultiThreadModelNoCS<ept id="p2">](../../atl/reference/ccommultithreadmodelnocs-class.md)</ept> contain definitions for <ph id="ph1">`ThreadModelNoCS`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The following table shows the relationship between the threading model class and the class referenced by <ph id="ph1">`ThreadModelNoCS`</ph>:</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Class defined in</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Class referenced</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CComMultiThreadModel::AutoCriticalSection<ept id="p1">](../../atl/reference/ccommultithreadmodel-class.md#ccommultithreadmodel__autocriticalsection)</ept>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Class Overview</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>