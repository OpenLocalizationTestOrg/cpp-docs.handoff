<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">53110cac6bca6993a6d73aa7d97dacae28854b12</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\scanf-type-field-characters.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">52e40ded632d2daaca8882f664801d5e4ab786cd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">19c3a255e963d71511dd5e9ea26396a9f2bad5a6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>scanf Type Field Characters | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>scanf Type Field Characters</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following information applies to any of the <ph id="ph1">`scanf`</ph> family of functions, including the secure versions, such as <ph id="ph2">`scanf_s`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`type`</ph> character is the only required format field; it appears after any optional format fields.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`type`</ph> character determines whether the associated argument is interpreted as a character, string, or number.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Type Characters for scanf functions</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Character</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Type of input expected</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Type of argument</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Size argument in secure version?</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Character.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When used with <ph id="ph1">`scanf`</ph> functions, specifies single-byte character; when used with <ph id="ph2">`wscanf`</ph> functions, specifies wide character.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>White-space characters that are ordinarily skipped are read when <ph id="ph1">`c`</ph> is specified.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To read next non–white-space single-byte character, use <ph id="ph1">`%1s`</ph>; to read next non–white-space wide character, use <ph id="ph2">`%1ws`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Pointer to <ph id="ph1">`char`</ph> when used with <ph id="ph2">`scanf`</ph> functions, pointer to <ph id="ph3">`wchar_t`</ph> when used with <ph id="ph4">`wscanf`</ph> functions.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Size does not include space for a null terminator.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Opposite size character.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When used with <ph id="ph1">`scanf`</ph> functions, specifies wide character; when used with <ph id="ph2">`wscanf`</ph> functions, specifies single-byte character.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>White-space characters that are ordinarily skipped are read when <ph id="ph1">`C`</ph> is specified.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To read next non–white-space single-byte character, use <ph id="ph1">`%1s`</ph>; to read next non–white-space wide character, use <ph id="ph2">`%1ws`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Pointer to <ph id="ph1">`wchar_t`</ph> when used with <ph id="ph2">`scanf`</ph> functions, pointer to <ph id="ph3">`char`</ph> when used with <ph id="ph4">`wscanf`</ph> functions.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Size argument does not include space for a null terminator.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Decimal integer.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Pointer to <ph id="ph1">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>No.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>An integer.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Hexadecimal if the input string begins with "0x" or "0X", octal if the string begins with "0", otherwise decimal.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Pointer to <ph id="ph1">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>No.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Octal integer.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Pointer to <ph id="ph1">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>No.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A pointer address in hexadecimal digits.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The maximum number of digits read depends on the size of a pointer (32 or 64 bits), which depends on the machine architecture.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>"0x" or "0X" are accepted as prefixes.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Pointer to <ph id="ph1">`void*`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>No.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Unsigned decimal integer.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Pointer to <ph id="ph1">`unsigned``int`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>No.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Hexadecimal integer.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Pointer to <ph id="ph1">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>No.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`E`</ph>, <ph id="ph2">`f`</ph>, <ph id="ph3">`g`</ph>,</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Floating-point value consisting of optional sign (+ or –), series of one or more decimal digits containing decimal point, and optional exponent ("e" or "E") followed by an optionally signed integer value.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Pointer to <ph id="ph1">`float`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>No.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>No input read from stream or buffer.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Pointer to <ph id="ph1">`int`</ph>, into which is stored number of characters successfully read from stream or buffer up to that point in current call to <ph id="ph2">`scanf`</ph> functions or <ph id="ph3">`wscanf`</ph> functions.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>No.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>String, up to first white-space character (space, tab or newline).</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To read strings not delimited by space characters, use set of square brackets (<ph id="ph1">`[ ]`</ph>), as discussed in <bpt id="p1">[</bpt>scanf Width Specification<ept id="p1">](../c-runtime-library/scanf-width-specification.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>When used with <ph id="ph1">`scanf`</ph> functions, signifies single-byte character array; when used with <ph id="ph2">`wscanf`</ph> functions, signifies wide-character array.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In either case, character array must be large enough for input field plus terminating null character, which is automatically appended.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Size includes space for a null terminator.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Opposite-size character string, up to first white-space character (space, tab or newline).</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To read strings not delimited by space characters, use set of square brackets (<ph id="ph1">`[ ]`</ph>), as discussed in <bpt id="p1">[</bpt>scanf Width Specification<ept id="p1">](../c-runtime-library/scanf-width-specification.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>When used with <ph id="ph1">`scanf`</ph> functions, signifies wide-character array; when used with <ph id="ph2">`wscanf`</ph> functions, signifies single-byte–character array.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In either case, character array must be large enough for input field plus terminating null character, which is automatically appended.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Size includes space for a null terminator.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`a`</ph> and <ph id="ph2">`A`</ph> specifiers (see <bpt id="p1">[</bpt>printf Type Field Characters<ept id="p1">](../c-runtime-library/printf-type-field-characters.md)</ept>) are not available with <ph id="ph3">`scanf`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The size arguments, if required, should be passed in the parameter list immediately following the argument they apply to.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For example, the following code:</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>reads a string with a maximum length of 10 into <ph id="ph1">`string1`</ph>, and a string with a maximum length of 8 into <ph id="ph2">`string2`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The buffer sizes should be at least one more than the width specifications since space must be reserved for the null terminator.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The format string can handle single-byte or wide character input regardless of whether the single-byte character or wide-character version of the function is used.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Thus, to read single-byte or wide characters with <ph id="ph1">`scanf`</ph> functions and <ph id="ph2">`wscanf`</ph> functions, use format specifiers as follows.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>To read character as</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Use this function</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>With these format specifiers</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>single byte</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>functions</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`hc`</ph>, or</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>single byte</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>functions</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`hc`</ph>, or</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>wide</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>functions</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`lc`</ph>, or</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>wide</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>functions</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`lc`</ph>, or</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>To scan strings with <ph id="ph1">`scanf`</ph> functions, and <ph id="ph2">`wscanf`</ph> functions, use the above table with format type-specifiers <ph id="ph3">`s`</ph> and <ph id="ph4">`S`</ph> instead of <ph id="ph5">`c`</ph> and <ph id="ph6">`C`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>scanf, _scanf_l, wscanf, _wscanf_l</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>