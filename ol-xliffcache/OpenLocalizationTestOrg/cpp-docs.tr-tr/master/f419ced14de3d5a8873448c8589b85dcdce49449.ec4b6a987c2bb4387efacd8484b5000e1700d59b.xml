{"nodes":[{"pos":[12,44],"content":"Device Contexts | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Device Contexts | Microsoft Docs","pos":[0,32]}]},{"content":"Device Contexts","pos":[1622,1637]},{"content":"A device context is a Windows data structure containing information about the drawing attributes of a device such as a display or a printer.","pos":[1638,1778]},{"content":"All drawing calls are made through a device-context object, which encapsulates the Windows APIs for drawing lines, shapes, and text.","pos":[1779,1911]},{"content":"Device contexts allow device-independent drawing in Windows.","pos":[1912,1972]},{"content":"Device contexts can be used to draw to the screen, to the printer, or to a metafile.","pos":[1973,2057]},{"content":"<bpt id=\"p1\">[</bpt>CPaintDC<ept id=\"p1\">](../mfc/reference/cpaintdc-class.md)</ept> objects encapsulate the common idiom of Windows, calling the <ph id=\"ph1\">`BeginPaint`</ph> function, then drawing in the device context, then calling the <ph id=\"ph2\">`EndPaint`</ph> function.","pos":[2064,2268],"source":"[CPaintDC](../mfc/reference/cpaintdc-class.md) objects encapsulate the common idiom of Windows, calling the `BeginPaint` function, then drawing in the device context, then calling the `EndPaint` function."},{"content":"The <ph id=\"ph1\">`CPaintDC`</ph> constructor calls <ph id=\"ph2\">`BeginPaint`</ph> for you, and the destructor calls <ph id=\"ph3\">`EndPaint`</ph>.","pos":[2269,2360],"source":" The `CPaintDC` constructor calls `BeginPaint` for you, and the destructor calls `EndPaint`."},{"content":"The simplified process is to create the <bpt id=\"p1\">[</bpt>CDC<ept id=\"p1\">](../mfc/reference/cdc-class.md)</ept> object, draw, and then destroy the <ph id=\"ph1\">`CDC`</ph> object.","pos":[2361,2486],"source":" The simplified process is to create the [CDC](../mfc/reference/cdc-class.md) object, draw, and then destroy the `CDC` object."},{"content":"In the framework, much of even this process is automated.","pos":[2487,2544]},{"content":"In particular, your <ph id=\"ph1\">`OnDraw`</ph> function is passed a <ph id=\"ph2\">`CPaintDC`</ph> already prepared (via <ph id=\"ph3\">`OnPrepareDC`</ph>), and you simply draw into it.","pos":[2545,2672],"source":" In particular, your `OnDraw` function is passed a `CPaintDC` already prepared (via `OnPrepareDC`), and you simply draw into it."},{"content":"It is destroyed by the framework and the underlying device context is released to Windows upon return from the call to your <ph id=\"ph1\">`OnDraw`</ph> function.","pos":[2673,2815],"source":" It is destroyed by the framework and the underlying device context is released to Windows upon return from the call to your `OnDraw` function."},{"content":"<bpt id=\"p1\">[</bpt>CClientDC<ept id=\"p1\">](../mfc/reference/cclientdc-class.md)</ept> objects encapsulate working with a device context that represents only the client area of a window.","pos":[2822,2970],"source":"[CClientDC](../mfc/reference/cclientdc-class.md) objects encapsulate working with a device context that represents only the client area of a window."},{"content":"The <ph id=\"ph1\">`CClientDC`</ph> constructor calls the <ph id=\"ph2\">`GetDC`</ph> function, and the destructor calls the <ph id=\"ph3\">`ReleaseDC`</ph> function.","pos":[2971,3077],"source":" The `CClientDC` constructor calls the `GetDC` function, and the destructor calls the `ReleaseDC` function."},{"content":"<bpt id=\"p1\">[</bpt>CWindowDC<ept id=\"p1\">](../mfc/reference/cwindowdc-class.md)</ept> objects encapsulate a device context that represents the whole window, including its frame.","pos":[3078,3218],"source":"[CWindowDC](../mfc/reference/cwindowdc-class.md) objects encapsulate a device context that represents the whole window, including its frame."},{"content":"<bpt id=\"p1\">[</bpt>CMetaFileDC<ept id=\"p1\">](../mfc/reference/cmetafiledc-class.md)</ept> objects encapsulate drawing into a Windows metafile.","pos":[3225,3330],"source":"[CMetaFileDC](../mfc/reference/cmetafiledc-class.md) objects encapsulate drawing into a Windows metafile."},{"content":"In contrast to the <ph id=\"ph1\">`CPaintDC`</ph> passed to <ph id=\"ph2\">`OnDraw`</ph>, you must in this case call <bpt id=\"p1\">[</bpt>OnPrepareDC<ept id=\"p1\">](../mfc/reference/cview-class.md#cview__onpreparedc)</ept> yourself.","pos":[3331,3483],"source":" In contrast to the `CPaintDC` passed to `OnDraw`, you must in this case call [OnPrepareDC](../mfc/reference/cview-class.md#cview__onpreparedc) yourself."},{"content":"Mouse Drawing","pos":[3492,3505]},{"content":"Most drawing in a framework program — and thus most device-context work — is done in the view's <ph id=\"ph1\">`OnDraw`</ph> member function.","pos":[3509,3630],"source":"Most drawing in a framework program — and thus most device-context work — is done in the view's `OnDraw` member function."},{"content":"However, you can still use device-context objects for other purposes.","pos":[3631,3700]},{"content":"For example, to provide tracking feedback for mouse movement in a view, you need to draw directly into the view without waiting for <ph id=\"ph1\">`OnDraw`</ph> to be called.","pos":[3701,3855],"source":" For example, to provide tracking feedback for mouse movement in a view, you need to draw directly into the view without waiting for `OnDraw` to be called."},{"pos":[3862,3994],"content":"In such a case, you can use a <bpt id=\"p1\">[</bpt>CClientDC<ept id=\"p1\">](../mfc/reference/cclientdc-class.md)</ept> device-context object to draw directly into the view.","source":"In such a case, you can use a [CClientDC](../mfc/reference/cclientdc-class.md) device-context object to draw directly into the view."},{"content":"What do you want to know more about","pos":[4004,4039]},{"content":"Device contexts (definition)","pos":[4050,4078]},{"content":"Drawing in a View","pos":[4150,4167]},{"content":"Interpreting User Input Through a View","pos":[4208,4246]},{"content":"Lines and curves","pos":[4308,4324]},{"content":"Filled shapes","pos":[4396,4409]},{"content":"Fonts and text","pos":[4481,4495]},{"content":"Colors","pos":[4567,4573]},{"content":"Coordinate spaces and transformations","pos":[4645,4682]},{"content":"See Also","pos":[4752,4760]},{"content":"Window Objects","pos":[4765,4779]}],"content":"---\ntitle: \"Device Contexts | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"OnPrepareDC method\"\n  - \"windows [C++], and device context\"\n  - \"drawing, device context\"\n  - \"CClientDC class, and GetDC method\"\n  - \"drawing, in mouse and device contexts\"\n  - \"CDC class, objects\"\n  - \"device contexts [C++]\"\n  - \"client areas\"\n  - \"CMetaFileDC class, and OnPrepareDC method\"\n  - \"GDI objects [C++], device contexts\"\n  - \"graphic objects, device contexts\"\n  - \"frame windows [C++], device contexts\"\n  - \"metafiles and device contexts\"\n  - \"EndPaint method\"\n  - \"printers [C++], device contexts\"\n  - \"mouse [C++], drawing and device contexts\"\n  - \"BeginPaint method, CPaintDC\"\n  - \"CPaintDC class, device context for painting\"\n  - \"windows [C++], drawing directly into\"\n  - \"client areas, and device context\"\n  - \"device contexts [C++], CDC class\"\n  - \"user interface [C++], device contexts\"\n  - \"device-independent drawing\"\n  - \"GetDC method and CClientDC class\"\n  - \"CClientDC class, and ReleaseDC method\"\n  - \"ReleaseDC method\"\n  - \"device contexts [C++], about device contexts\"\n  - \"drawing, directly into windows\"\n  - \"painting and device context\"\nms.assetid: d0cd51f1-f778-4c7e-bf50-d738d10433c7\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Device Contexts\nA device context is a Windows data structure containing information about the drawing attributes of a device such as a display or a printer. All drawing calls are made through a device-context object, which encapsulates the Windows APIs for drawing lines, shapes, and text. Device contexts allow device-independent drawing in Windows. Device contexts can be used to draw to the screen, to the printer, or to a metafile.  \n  \n [CPaintDC](../mfc/reference/cpaintdc-class.md) objects encapsulate the common idiom of Windows, calling the `BeginPaint` function, then drawing in the device context, then calling the `EndPaint` function. The `CPaintDC` constructor calls `BeginPaint` for you, and the destructor calls `EndPaint`. The simplified process is to create the [CDC](../mfc/reference/cdc-class.md) object, draw, and then destroy the `CDC` object. In the framework, much of even this process is automated. In particular, your `OnDraw` function is passed a `CPaintDC` already prepared (via `OnPrepareDC`), and you simply draw into it. It is destroyed by the framework and the underlying device context is released to Windows upon return from the call to your `OnDraw` function.  \n  \n [CClientDC](../mfc/reference/cclientdc-class.md) objects encapsulate working with a device context that represents only the client area of a window. The `CClientDC` constructor calls the `GetDC` function, and the destructor calls the `ReleaseDC` function. [CWindowDC](../mfc/reference/cwindowdc-class.md) objects encapsulate a device context that represents the whole window, including its frame.  \n  \n [CMetaFileDC](../mfc/reference/cmetafiledc-class.md) objects encapsulate drawing into a Windows metafile. In contrast to the `CPaintDC` passed to `OnDraw`, you must in this case call [OnPrepareDC](../mfc/reference/cview-class.md#cview__onpreparedc) yourself.  \n  \n## Mouse Drawing  \n Most drawing in a framework program — and thus most device-context work — is done in the view's `OnDraw` member function. However, you can still use device-context objects for other purposes. For example, to provide tracking feedback for mouse movement in a view, you need to draw directly into the view without waiting for `OnDraw` to be called.  \n  \n In such a case, you can use a [CClientDC](../mfc/reference/cclientdc-class.md) device-context object to draw directly into the view.  \n  \n### What do you want to know more about  \n  \n-   [Device contexts (definition)](http://msdn.microsoft.com/library/windows/desktop/dd183553)  \n  \n-   [Drawing in a View](../mfc/drawing-in-a-view.md)  \n  \n-   [Interpreting User Input Through a View](../mfc/interpreting-user-input-through-a-view.md)  \n  \n-   [Lines and curves](http://msdn.microsoft.com/library/windows/desktop/dd145028)  \n  \n-   [Filled shapes](http://msdn.microsoft.com/library/windows/desktop/dd162714)  \n  \n-   [Fonts and text](http://msdn.microsoft.com/library/windows/desktop/dd144819)  \n  \n-   [Colors](http://msdn.microsoft.com/library/windows/desktop/dd183450)  \n  \n-   [Coordinate spaces and transformations](http://msdn.microsoft.com/library/windows/desktop/dd183475)  \n  \n## See Also  \n [Window Objects](../mfc/window-objects.md)\n\n"}