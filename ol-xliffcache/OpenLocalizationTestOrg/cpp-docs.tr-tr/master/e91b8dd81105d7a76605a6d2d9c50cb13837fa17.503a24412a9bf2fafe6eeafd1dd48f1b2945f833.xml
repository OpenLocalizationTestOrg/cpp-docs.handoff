{"nodes":[{"pos":[12,52],"content":"CAsyncMonikerFile Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CAsyncMonikerFile Class | Microsoft Docs","pos":[0,40]}]},{"content":"CAsyncMonikerFile Class","pos":[801,824]},{"content":"Provides functionality for the use of asynchronous monikers in ActiveX controls (formerly OLE controls).","pos":[825,929]},{"content":"Syntax","pos":[938,944]},{"content":"Members","pos":[1016,1023]},{"content":"Public Constructors","pos":[1033,1052]},{"content":"Name","pos":[1059,1063]},{"content":"Description","pos":[1064,1075]},{"content":"CAsyncMonikerFile::CAsyncMonikerFile","pos":[1114,1150]},{"pos":[1191,1231],"content":"Constructs a <ph id=\"ph1\">`CAsyncMonikerFile`</ph> object.","source":"Constructs a `CAsyncMonikerFile` object."},{"content":"Public Methods","pos":[1242,1256]},{"content":"Name","pos":[1263,1267]},{"content":"Description","pos":[1268,1279]},{"content":"CAsyncMonikerFile::Close","pos":[1318,1342]},{"content":"Closes and releases all resources.","pos":[1371,1405]},{"content":"CAsyncMonikerFile::GetBinding","pos":[1411,1440]},{"content":"Retrieves a pointer to the asynchronous transfer binding.","pos":[1474,1531]},{"content":"CAsyncMonikerFile::GetFormatEtc","pos":[1537,1568]},{"content":"Retrieves the format of the data in the stream.","pos":[1604,1651]},{"content":"CAsyncMonikerFile::Open","pos":[1657,1680]},{"content":"Opens a file asynchronously.","pos":[1708,1736]},{"content":"Protected Methods","pos":[1747,1764]},{"content":"Name","pos":[1771,1775]},{"content":"Description","pos":[1776,1787]},{"content":"CAsyncMonikerFile::CreateBindStatusCallback","pos":[1826,1869]},{"pos":[1917,1976],"content":"Creates a COM object that implements <ph id=\"ph1\">`IBindStatusCallback`</ph>.","source":"Creates a COM object that implements `IBindStatusCallback`."},{"content":"CAsyncMonikerFile::GetBindInfo","pos":[1982,2012]},{"content":"Called by the OLE system library to request information on the type of bind to be created.","pos":[2047,2137]},{"content":"CAsyncMonikerFile::GetPriority","pos":[2143,2173]},{"content":"Called by the OLE system library to get the priority of the binding.","pos":[2208,2276]},{"content":"CAsyncMonikerFile::OnDataAvailable","pos":[2282,2316]},{"content":"Called to provide data as it becomes available to the client during asynchronous bind operations.","pos":[2355,2452]},{"content":"CAsyncMonikerFile::OnLowResource","pos":[2458,2490]},{"content":"Called when resources are low.","pos":[2527,2557]},{"content":"CAsyncMonikerFile::OnProgress","pos":[2563,2592]},{"content":"Called to indicate progress on the data downloading process.","pos":[2626,2686]},{"content":"CAsyncMonikerFile::OnStartBinding","pos":[2692,2725]},{"content":"Called when binding is starting up.","pos":[2763,2798]},{"content":"CAsyncMonikerFile::OnStopBinding","pos":[2804,2836]},{"content":"Called when asynchronous transfer is stopped.","pos":[2873,2918]},{"content":"Remarks","pos":[2928,2935]},{"content":"Derived from <bpt id=\"p1\">[</bpt>CMonikerFile<ept id=\"p1\">](../../mfc/reference/cmonikerfile-class.md)</ept>, which in turn is derived from <bpt id=\"p2\">[</bpt>COleStreamFile<ept id=\"p2\">](../../mfc/reference/colestreamfile-class.md)</ept>, <ph id=\"ph1\">`CAsyncMonikerFile`</ph> uses the <bpt id=\"p3\">[</bpt>IMoniker<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/ms679705)</ept> interface to access any data stream asynchronously, including loading files asynchronously from a URL.","pos":[2939,3306],"source":"Derived from [CMonikerFile](../../mfc/reference/cmonikerfile-class.md), which in turn is derived from [COleStreamFile](../../mfc/reference/colestreamfile-class.md), `CAsyncMonikerFile` uses the [IMoniker](http://msdn.microsoft.com/library/windows/desktop/ms679705) interface to access any data stream asynchronously, including loading files asynchronously from a URL."},{"content":"The files can be datapath properties of ActiveX controls.","pos":[3307,3364]},{"content":"Asynchronous monikers are used primarily in Internet-enabled applications and ActiveX controls to provide a responsive user-interface during file transfers.","pos":[3371,3527]},{"content":"A prime example of this is the use of <bpt id=\"p1\">[</bpt>CDataPathProperty<ept id=\"p1\">](../../mfc/reference/cdatapathproperty-class.md)</ept> to provide asynchronous properties for ActiveX controls.","pos":[3528,3690],"source":" A prime example of this is the use of [CDataPathProperty](../../mfc/reference/cdatapathproperty-class.md) to provide asynchronous properties for ActiveX controls."},{"content":"The <ph id=\"ph1\">`CDataPathProperty`</ph> object will repeatedly get a callback to indicate availability of new data during a lengthy property exchange process.","pos":[3691,3833],"source":" The `CDataPathProperty` object will repeatedly get a callback to indicate availability of new data during a lengthy property exchange process."},{"content":"For more information about how to use asynchronous monikers and ActiveX controls in Internet applications, see the following articles:","pos":[3840,3974]},{"content":"Internet First Steps: Asynchronous Monikers","pos":[3983,4026]},{"content":"Internet First Steps: ActiveX Controls","pos":[4088,4126]},{"content":"Inheritance Hierarchy","pos":[4183,4204]},{"content":"CObject","pos":[4209,4216]},{"content":"CFile","pos":[4263,4268]},{"content":"COleStreamFile","pos":[4313,4327]},{"content":"CMonikerFile","pos":[4381,4393]},{"content":"Requirements","pos":[4472,4484]},{"pos":[4488,4508],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxole.h","source":"**Header:** afxole.h"},{"pos":[4571,4607],"content":"CAsyncMonikerFile::CAsyncMonikerFile"},{"pos":[4611,4651],"content":"Constructs a <ph id=\"ph1\">`CAsyncMonikerFile`</ph> object.","source":"Constructs a `CAsyncMonikerFile` object."},{"content":"Remarks","pos":[4697,4704]},{"content":"It does not create the <ph id=\"ph1\">`IBindHost`</ph> interface.","pos":[4708,4753],"source":"It does not create the `IBindHost` interface."},{"content":"is used only if you provide it in the <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> member function.","pos":[4766,4829],"source":" is used only if you provide it in the **Open** member function."},{"pos":[4836,4944],"content":"For a description of the <ph id=\"ph1\">`IBindHost`</ph> interface, see the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For a description of the `IBindHost` interface, see the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[4995,5019],"content":"CAsyncMonikerFile::Close"},{"content":"Call this function to close and release all resources.","pos":[5023,5077]},{"content":"Remarks","pos":[5124,5131]},{"content":"Can be called on unopened or already closed files.","pos":[5135,5185]},{"pos":[5255,5298],"content":"CAsyncMonikerFile::CreateBindStatusCallback"},{"pos":[5302,5361],"content":"Creates a COM object that implements <ph id=\"ph1\">`IBindStatusCallback`</ph>.","source":"Creates a COM object that implements `IBindStatusCallback`."},{"content":"Parameters","pos":[5457,5467]},{"content":"A pointer to the controlling unknown (the outer <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept>) or <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept> if aggregation is not being used.","pos":[5492,5599],"source":" A pointer to the controlling unknown (the outer **IUnknown**) or **NULL** if aggregation is not being used."},{"content":"Return Value","pos":[5609,5621]},{"content":"If <ph id=\"ph1\">`pUnkControlling`</ph> is not <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the function returns a pointer to the inner <bpt id=\"p2\">**</bpt>IUnknown<ept id=\"p2\">**</ept> on a new COM object supporting <ph id=\"ph2\">`IBindStatusCallback`</ph>.","pos":[5625,5773],"source":"If `pUnkControlling` is not **NULL**, the function returns a pointer to the inner **IUnknown** on a new COM object supporting `IBindStatusCallback`."},{"content":"If <ph id=\"ph1\">`pUnkControlling`</ph> is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the function returns a pointer to an <bpt id=\"p2\">**</bpt>IUnknown<ept id=\"p2\">**</ept> on a new COM object supporting <ph id=\"ph2\">`IBindStatusCallback`</ph>.","pos":[5774,5911],"source":" If `pUnkControlling` is **NULL**, the function returns a pointer to an **IUnknown** on a new COM object supporting `IBindStatusCallback`."},{"content":"Remarks","pos":[5921,5928]},{"content":"requires a COM object that implements <ph id=\"ph1\">`IBindStatusCallback`</ph>.","pos":[5952,6012],"source":" requires a COM object that implements `IBindStatusCallback`."},{"content":"MFC implements such an object, and it is aggregatable.","pos":[6013,6067]},{"content":"You can override <ph id=\"ph1\">`CreateBindStatusCallback`</ph> to return your own COM object.","pos":[6068,6142],"source":" You can override `CreateBindStatusCallback` to return your own COM object."},{"content":"Your COM object can aggregate MFC's implementation by calling <ph id=\"ph1\">`CreateBindStatusCallback`</ph> with the controlling unknown of your COM object.","pos":[6143,6280],"source":" Your COM object can aggregate MFC's implementation by calling `CreateBindStatusCallback` with the controlling unknown of your COM object."},{"content":"COM objects implemented using the <ph id=\"ph1\">`CCmdTarget`</ph> COM support can retrieve the controlling unknown using <bpt id=\"p1\">**</bpt>CCmdTarget::GetControllingUnknown<ept id=\"p1\">**</ept>.","pos":[6281,6421],"source":" COM objects implemented using the `CCmdTarget` COM support can retrieve the controlling unknown using **CCmdTarget::GetControllingUnknown**."},{"pos":[6428,6542],"content":"Alternately, your COM object can delegate to MFC's implementation by calling <bpt id=\"p1\">**</bpt>CreateBindStatusCallback( NULL )<ept id=\"p1\">**</ept>.","source":"Alternately, your COM object can delegate to MFC's implementation by calling **CreateBindStatusCallback( NULL )**."},{"pos":[6549,6634],"content":"<bpt id=\"p1\">[</bpt>CAsyncMonikerFile::Open<ept id=\"p1\">](#casyncmonikerfile__open)</ept> calls <ph id=\"ph1\">`CreateBindStatusCallback`</ph>.","source":"[CAsyncMonikerFile::Open](#casyncmonikerfile__open) calls `CreateBindStatusCallback`."},{"content":"For more information about asynchronous monikers and asynchronous binding, see the <bpt id=\"p1\">[</bpt>IBindStatusCallback<ept id=\"p1\">](http://msdn.microsoft.com/library/ie/ms775060)</ept> interface and <bpt id=\"p2\">[</bpt>How Asynchronous Binding and Storage Work<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/aa379152)</ept>.","pos":[6641,6911],"source":"For more information about asynchronous monikers and asynchronous binding, see the [IBindStatusCallback](http://msdn.microsoft.com/library/ie/ms775060) interface and [How Asynchronous Binding and Storage Work](http://msdn.microsoft.com/library/windows/desktop/aa379152)."},{"content":"For a discussion of aggregation, see <bpt id=\"p1\">[</bpt>Aggregation<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms686558)</ept>.","pos":[6912,7023],"source":" For a discussion of aggregation, see [Aggregation](http://msdn.microsoft.com/library/windows/desktop/ms686558)."},{"content":"All three topics are in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[7024,7104],"source":" All three topics are in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[7161,7191],"content":"CAsyncMonikerFile::GetBindInfo"},{"content":"Called from the client of an asynchronous moniker to tell the asynchronous moniker how it wants to bind.","pos":[7195,7299]},{"content":"Return Value","pos":[7362,7374]},{"content":"Retrieves the settings for <bpt id=\"p1\">**</bpt>IBindStatusCallBack<ept id=\"p1\">**</ept>.","pos":[7378,7429],"source":"Retrieves the settings for **IBindStatusCallBack**."},{"content":"For a description of the <ph id=\"ph1\">`IBindStatusCallback`</ph> interface, see the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[7430,7548],"source":" For a description of the `IBindStatusCallback` interface, see the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Remarks","pos":[7558,7565]},{"content":"The default implementation sets the binding to be asynchronous, to use a storage medium (a stream), and to use the data-push model.","pos":[7569,7700]},{"content":"Override this function if you want to change the behavior of the binding.","pos":[7701,7774]},{"content":"One reason for doing this would be to bind using the data-pull model instead of the data-push model.","pos":[7781,7881]},{"content":"In a data-pull model, the client drives the bind operation, and the moniker only provides data to the client when it is read.","pos":[7882,8007]},{"content":"In a data-push model, the moniker drives the asynchronous bind operation and continuously notifies the client whenever new data is available.","pos":[8008,8149]},{"pos":[8205,8234],"content":"CAsyncMonikerFile::GetBinding"},{"content":"Call this function to retrieve a pointer to the asynchronous transfer binding.","pos":[8238,8316]},{"content":"Return Value","pos":[8374,8386]},{"content":"A pointer to the <ph id=\"ph1\">`IBinding`</ph> interface provided when asynchronous transfer begins.","pos":[8390,8471],"source":"A pointer to the `IBinding` interface provided when asynchronous transfer begins."},{"content":"Returns <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if for any reason the transfer cannot be made asynchronously.","pos":[8472,8550],"source":" Returns **NULL** if for any reason the transfer cannot be made asynchronously."},{"content":"Remarks","pos":[8560,8567]},{"pos":[8571,8743],"content":"This allows you to control the data transfer process through the <ph id=\"ph1\">`IBinding`</ph> interface, for example, with <bpt id=\"p1\">**</bpt>IBinding::Abort<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>IBinding::Pause<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>IBinding::Resume<ept id=\"p3\">**</ept>.","source":"This allows you to control the data transfer process through the `IBinding` interface, for example, with **IBinding::Abort**, **IBinding::Pause**, and **IBinding::Resume**."},{"pos":[8750,8857],"content":"For a description of the <ph id=\"ph1\">`IBinding`</ph> interface, see the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For a description of the `IBinding` interface, see the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[8915,8946],"content":"CAsyncMonikerFile::GetFormatEtc"},{"content":"Call this function to retrieve the format of the data in the stream.","pos":[8950,9018]},{"content":"Return Value","pos":[9079,9091]},{"content":"A pointer to the Windows structure <bpt id=\"p1\">[</bpt>FORMATETC<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms682177)</ept> for the currently opened stream.","pos":[9095,9234],"source":"A pointer to the Windows structure [FORMATETC](http://msdn.microsoft.com/library/windows/desktop/ms682177) for the currently opened stream."},{"content":"Returns <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if the moniker has not been bound, if it is not asynchronous, or if the asynchronous operation has not begun.","pos":[9235,9361],"source":" Returns **NULL** if the moniker has not been bound, if it is not asynchronous, or if the asynchronous operation has not begun."},{"pos":[9418,9448],"content":"CAsyncMonikerFile::GetPriority"},{"content":"Called from the client of an asynchronous moniker as the binding process starts to receive the priority given to the thread for the binding operation.","pos":[9452,9602]},{"content":"Return Value","pos":[9664,9676]},{"content":"The priority at which the asynchronous transfer will take place.","pos":[9680,9744]},{"content":"One of the standard thread priority flags: <bpt id=\"p1\">**</bpt>THREAD_PRIORITY_ABOVE_NORMAL<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>THREAD_PRIORITY_BELOW_NORMAL<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>THREAD_PRIORITY_HIGHEST<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>THREAD_PRIORITY_IDLE<ept id=\"p4\">**</ept>, <bpt id=\"p5\">**</bpt>THREAD_PRIORITY_LOWEST<ept id=\"p5\">**</ept>, <bpt id=\"p6\">**</bpt>THREAD_PRIORITY_NORMAL<ept id=\"p6\">**</ept>, and <bpt id=\"p7\">**</bpt>THREAD_PRIORITY_TIME_CRITICAL<ept id=\"p7\">**</ept>.","pos":[9745,10005],"source":" One of the standard thread priority flags: **THREAD_PRIORITY_ABOVE_NORMAL**, **THREAD_PRIORITY_BELOW_NORMAL**, **THREAD_PRIORITY_HIGHEST**, **THREAD_PRIORITY_IDLE**, **THREAD_PRIORITY_LOWEST**, **THREAD_PRIORITY_NORMAL**, and **THREAD_PRIORITY_TIME_CRITICAL**."},{"content":"See the Windows function <bpt id=\"p1\">[</bpt>SetThreadPriority<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms686277)</ept> for a description of these values.","pos":[10006,10145],"source":" See the Windows function [SetThreadPriority](http://msdn.microsoft.com/library/windows/desktop/ms686277) for a description of these values."},{"content":"Remarks","pos":[10155,10162]},{"content":"should not be called directly.","pos":[10180,10210]},{"content":"<bpt id=\"p1\">**</bpt>THREAD_PRIORITY_NORMAL<ept id=\"p1\">**</ept> is returned by the default implementation.","pos":[10211,10280],"source":"**THREAD_PRIORITY_NORMAL** is returned by the default implementation."},{"pos":[10341,10375],"content":"CAsyncMonikerFile::OnDataAvailable"},{"pos":[10379,10518],"content":"An asynchronous moniker calls <ph id=\"ph1\">`OnDataAvailable`</ph> to provide data to the client as it becomes available, during asynchronous bind operations.","source":"An asynchronous moniker calls `OnDataAvailable` to provide data to the client as it becomes available, during asynchronous bind operations."},{"content":"Parameters","pos":[10614,10624]},{"content":"The cumulative amount (in bytes) of data available since the beginning of the binding.","pos":[10640,10726]},{"content":"Can be zero, indicating that the amount of data is not relevant to the operation, or that no specific amount became available.","pos":[10727,10853]},{"content":"bscfFlag","pos":[10861,10869]},{"content":"A <bpt id=\"p1\">**</bpt>BSCF<ept id=\"p1\">**</ept> enumeration value.","pos":[10874,10903],"source":" A **BSCF** enumeration value."},{"content":"Can be one or more of the following values:","pos":[10904,10947]},{"pos":[10955,11060],"content":"<bpt id=\"p1\">**</bpt>BSCF_FIRSTDATANOTIFICATION<ept id=\"p1\">**</ept> Identifies the first call to <ph id=\"ph1\">`OnDataAvailable`</ph> for a given bind operation.","source":"**BSCF_FIRSTDATANOTIFICATION** Identifies the first call to `OnDataAvailable` for a given bind operation."},{"pos":[11068,11180],"content":"<bpt id=\"p1\">**</bpt>BSCF_INTERMEDIATEDATANOTIFICATION<ept id=\"p1\">**</ept> Identifies an intermediary call to <ph id=\"ph1\">`OnDataAvailable`</ph> for a bind operation.","source":"**BSCF_INTERMEDIATEDATANOTIFICATION** Identifies an intermediary call to `OnDataAvailable` for a bind operation."},{"pos":[11188,11285],"content":"<bpt id=\"p1\">**</bpt>BSCF_LASTDATANOTIFICATION<ept id=\"p1\">**</ept> Identifies the last call to <ph id=\"ph1\">`OnDataAvailable`</ph> for a bind operation.","source":"**BSCF_LASTDATANOTIFICATION** Identifies the last call to `OnDataAvailable` for a bind operation."},{"content":"Remarks","pos":[11295,11302]},{"content":"The default implementation of this function does nothing.","pos":[11306,11363]},{"content":"See the following example for a sample implementation.","pos":[11364,11418]},{"content":"Example","pos":[11428,11435]},{"pos":[11450,11466],"content":"NVC_MFCWinInet#5"},{"pos":[11584,11616],"content":"CAsyncMonikerFile::OnLowResource"},{"content":"Called by the moniker when resources are low.","pos":[11620,11665]},{"content":"Remarks","pos":[11720,11727]},{"pos":[11731,11791],"content":"The default implementation calls <ph id=\"ph1\">`GetBinding( )-&gt; Abort( )`</ph>.","source":"The default implementation calls `GetBinding( )-> Abort( )`."},{"pos":[11847,11876],"content":"CAsyncMonikerFile::OnProgress"},{"content":"Called by the moniker repeatedly to indicate the current progress of this bind operation, typically at reasonable intervals during a lengthy operation.","pos":[11880,12031]},{"content":"Parameters","pos":[12185,12195]},{"content":"Indicates the current progress of the bind operation relative to the expected maximum indicated in <ph id=\"ph1\">`ulProgressMax`</ph>.","pos":[12215,12330],"source":" Indicates the current progress of the bind operation relative to the expected maximum indicated in `ulProgressMax`."},{"content":"Indicates the expected maximum value of <ph id=\"ph1\">`ulProgress`</ph> for the duration of calls to <ph id=\"ph2\">`OnProgress`</ph> for this operation.","pos":[12356,12470],"source":" Indicates the expected maximum value of `ulProgress` for the duration of calls to `OnProgress` for this operation."},{"content":"Provides additional information regarding the progress of the bind operation.","pos":[12495,12572]},{"content":"Valid values are taken from the <ph id=\"ph1\">`BINDSTATUS`</ph> enumeration.","pos":[12573,12630],"source":" Valid values are taken from the `BINDSTATUS` enumeration."},{"content":"See Remarks for possible values.","pos":[12631,12663]},{"content":"Information about the current progress, depending on the value of <ph id=\"ph1\">`ulStatusCode`</ph>.","pos":[12688,12769],"source":" Information about the current progress, depending on the value of `ulStatusCode`."},{"content":"See Remarks for possible values.","pos":[12770,12802]},{"content":"Remarks","pos":[12812,12819]},{"pos":[12823,12902],"content":"Possible values for <ph id=\"ph1\">`ulStatusCode`</ph> (and the <ph id=\"ph2\">`szStatusText`</ph> for each value) are:","source":"Possible values for `ulStatusCode` (and the `szStatusText` for each value) are:"},{"content":"BINDSTATUS_FINDINGRESOURCE","pos":[12911,12937]},{"content":"The bind operation is finding the resource that holds the object or storage being bound to.","pos":[12943,13034]},{"content":"The <ph id=\"ph1\">`szStatusText`</ph> provides the display name of the resource being searched for (for example, \"www.microsoft.com\").","pos":[13035,13150],"source":" The `szStatusText` provides the display name of the resource being searched for (for example, \"www.microsoft.com\")."},{"content":"BINDSTATUS_CONNECTING","pos":[13159,13180]},{"content":"The bind operation is connecting to the resource that holds the object or storage being bound to.","pos":[13186,13283]},{"content":"The <ph id=\"ph1\">`szStatusText`</ph> provides the display name of the resource being connected to (for example, an IP address).","pos":[13284,13393],"source":" The `szStatusText` provides the display name of the resource being connected to (for example, an IP address)."},{"content":"BINDSTATUS_SENDINGREQUEST","pos":[13402,13427]},{"content":"The bind operation is requesting the object or storage being bound to.","pos":[13433,13503]},{"content":"The <ph id=\"ph1\">`szStatusText`</ph> provides the display name of the object (for example, a file name).","pos":[13504,13590],"source":" The `szStatusText` provides the display name of the object (for example, a file name)."},{"content":"BINDSTATUS_REDIRECTING","pos":[13599,13621]},{"content":"The bind operation has been redirected to a different data location.","pos":[13627,13695]},{"content":"The <ph id=\"ph1\">`szStatusText`</ph> provides the display name of the new data location.","pos":[13696,13766],"source":" The `szStatusText` provides the display name of the new data location."},{"content":"BINDSTATUS_USINGCACHEDCOPY","pos":[13775,13801]},{"content":"The bind operation is retrieving the requested object or storage from a cached copy.","pos":[13807,13891]},{"content":"The <ph id=\"ph1\">`szStatusText`</ph> is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[13892,13923],"source":" The `szStatusText` is **NULL**."},{"content":"BINDSTATUS_BEGINDOWNLOADDATA","pos":[13932,13960]},{"content":"The bind operation has begun receiving the object or storage being bound to.","pos":[13966,14042]},{"content":"The <ph id=\"ph1\">`szStatusText`</ph> provides the display name of the data location.","pos":[14043,14109],"source":" The `szStatusText` provides the display name of the data location."},{"content":"BINDSTATUS_DOWNLOADINGDATA","pos":[14118,14144]},{"content":"The bind operation continues to receive the object or storage being bound to.","pos":[14150,14227]},{"content":"The <ph id=\"ph1\">`szStatusText`</ph> provides the display name of the data location.","pos":[14228,14294],"source":" The `szStatusText` provides the display name of the data location."},{"content":"BINDSTATUS_ENDDOWNLOADDATA","pos":[14303,14329]},{"content":"The bind operation has finished receiving the object or storage being bound to.","pos":[14335,14414]},{"content":"The <ph id=\"ph1\">`szStatusText`</ph> provides the display name of the data location.","pos":[14415,14481],"source":" The `szStatusText` provides the display name of the data location."},{"content":"BINDSTATUS_CLASSIDAVAILABLE","pos":[14490,14517]},{"content":"An instance of the object being bound to is just about to be created.","pos":[14523,14592]},{"content":"The <ph id=\"ph1\">`szStatusText`</ph> provides the CLSID of the new object in string format, allowing the client an opportunity to cancel the bind operation, if desired.","pos":[14593,14743],"source":" The `szStatusText` provides the CLSID of the new object in string format, allowing the client an opportunity to cancel the bind operation, if desired."},{"pos":[14803,14836],"content":"CAsyncMonikerFile::OnStartBinding"},{"content":"Override this function in your derived classes to perform actions when binding is starting up.","pos":[14840,14934]},{"content":"Remarks","pos":[14990,14997]},{"content":"This function is called back by the moniker.","pos":[15001,15045]},{"content":"The default implementation does nothing.","pos":[15046,15086]},{"pos":[15145,15177],"content":"CAsyncMonikerFile::OnStopBinding"},{"content":"Called by the moniker at the end of the bind operation.","pos":[15181,15236]},{"content":"Parameters","pos":[15328,15338]},{"content":"An <ph id=\"ph1\">`HRESULT`</ph> that is the error or warning value.","pos":[15355,15403],"source":" An `HRESULT` that is the error or warning value."},{"content":"szErrort","pos":[15411,15419]},{"content":"A character string describing the error.","pos":[15424,15464]},{"content":"Remarks","pos":[15474,15481]},{"content":"Override this function to perform actions when the transfer is stopped.","pos":[15485,15556]},{"content":"By default, the function releases <ph id=\"ph1\">`IBinding`</ph>.","pos":[15557,15602],"source":" By default, the function releases `IBinding`."},{"pos":[15609,15716],"content":"For a description of the <ph id=\"ph1\">`IBinding`</ph> interface, see the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For a description of the `IBinding` interface, see the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[15766,15789],"content":"CAsyncMonikerFile::Open"},{"content":"Call this member function to open a file asynchronously.","pos":[15793,15849]},{"content":"Parameters","pos":[16695,16705]},{"content":"A pointer to file to be opened asynchronously.","pos":[16722,16768]},{"content":"The file can be any valid URL or filename.","pos":[16769,16811]},{"content":"A pointer to the file exceptions.","pos":[16830,16863]},{"content":"In the event of an error, it will be set to the cause.","pos":[16864,16918]},{"content":"A pointer to the asynchronous moniker interface <ph id=\"ph1\">`IMoniker`</ph>, a precise moniker that is the combination of the document's own moniker, which you can retrieve with <bpt id=\"p1\">**</bpt>IOleClientSite::GetMoniker(<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>OLEWHICHMK_CONTAINER<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept>, and a moniker created from the path name.","pos":[16939,17203],"source":" A pointer to the asynchronous moniker interface `IMoniker`, a precise moniker that is the combination of the document's own moniker, which you can retrieve with **IOleClientSite::GetMoniker(** *OLEWHICHMK_CONTAINER* **)**, and a moniker created from the path name."},{"content":"The control can use this moniker to bind, but this is not the moniker the control should save.","pos":[17204,17298]},{"content":"pBindHost","pos":[17306,17315]},{"content":"A pointer to the <ph id=\"ph1\">`IBindHost`</ph> interface that will be used to create the moniker from a potentially relative pathname.","pos":[17320,17436],"source":" A pointer to the `IBindHost` interface that will be used to create the moniker from a potentially relative pathname."},{"content":"If the bind host is invalid or does not provide a moniker, the call defaults to <bpt id=\"p1\">**</bpt>Open(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`lpszFileName`</ph><bpt id=\"p2\">**</bpt>,<ept id=\"p2\">**</ept><ph id=\"ph2\">`pError`</ph><bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept>.","pos":[17437,17560],"source":" If the bind host is invalid or does not provide a moniker, the call defaults to **Open(** `lpszFileName`**,**`pError`**)**."},{"content":"For a description of the <ph id=\"ph1\">`IBindHost`</ph> interface, see the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[17561,17669],"source":" For a description of the `IBindHost` interface, see the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"A pointer to the <ph id=\"ph1\">`IServiceProvider`</ph> interface.","pos":[17698,17744],"source":" A pointer to the `IServiceProvider` interface."},{"content":"If the service provider is invalid or fails to provide the service for <ph id=\"ph1\">`IBindHost`</ph>, the call defaults to <bpt id=\"p1\">**</bpt>Open(<ept id=\"p1\">**</ept> <ph id=\"ph2\">`lpszFileName`</ph><bpt id=\"p2\">**</bpt>,<ept id=\"p2\">**</ept><ph id=\"ph3\">`pError`</ph><bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept>.","pos":[17745,17893],"source":" If the service provider is invalid or fails to provide the service for `IBindHost`, the call defaults to **Open(** `lpszFileName`**,**`pError`**)**."},{"content":"pUnknown","pos":[17901,17909]},{"content":"A pointer to the <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> interface.","pos":[17914,17954],"source":" A pointer to the **IUnknown** interface."},{"content":"If <ph id=\"ph1\">`IServiceProvider`</ph> is found, the function queries for <ph id=\"ph2\">`IBindHost`</ph>.","pos":[17955,18024],"source":" If `IServiceProvider` is found, the function queries for `IBindHost`."},{"content":"If the service provider is invalid or fails to provide the service for <ph id=\"ph1\">`IBindHost`</ph>, the call defaults to <bpt id=\"p1\">**</bpt>Open(<ept id=\"p1\">**</ept> <ph id=\"ph2\">`lpszFileName`</ph><bpt id=\"p2\">**</bpt>,<ept id=\"p2\">**</ept><ph id=\"ph3\">`pError`</ph><bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept>.","pos":[18025,18173],"source":" If the service provider is invalid or fails to provide the service for `IBindHost`, the call defaults to **Open(** `lpszFileName`**,**`pError`**)**."},{"content":"Return Value","pos":[18183,18195]},{"content":"Nonzero if the file is opened successfully; otherwise 0.","pos":[18199,18255]},{"content":"Remarks","pos":[18265,18272]},{"content":"This call initiates the binding process.","pos":[18276,18316]},{"content":"You can use a URL or a filename for the <ph id=\"ph1\">`lpszURL`</ph> parameter.","pos":[18323,18383],"source":"You can use a URL or a filename for the `lpszURL` parameter."},{"content":"For example:","pos":[18384,18396]},{"pos":[18414,18430],"content":"NVC_MFCWinInet#6"},{"content":"– or –","pos":[18496,18502]},{"pos":[18520,18536],"content":"NVC_MFCWinInet#7"},{"content":"See Also","pos":[18604,18612]},{"content":"CMonikerFile Class","pos":[18617,18635]},{"content":"Hierarchy Chart","pos":[18685,18700]},{"content":"CMonikerFile Class","pos":[18737,18755]},{"content":"CDataPathProperty Class","pos":[18805,18828]}],"content":"---\ntitle: \"CAsyncMonikerFile Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CAsyncMonikerFile\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ActiveX controls [C++], asynchronous\"\n  - \"OLE controls [C++], asynchronous\"\n  - \"monikers [C++], MFC\"\n  - \"asynchronous controls [C++]\"\n  - \"CAsyncMonikerFile class\"\n  - \"IMoniker interface, binding\"\nms.assetid: 17378b66-a49a-4b67-88e3-7756ad26a2fc\ncaps.latest.revision: 23\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CAsyncMonikerFile Class\nProvides functionality for the use of asynchronous monikers in ActiveX controls (formerly OLE controls).  \n  \n## Syntax  \n  \n```  \nclass CAsyncMonikerFile : public CMonikerFile  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAsyncMonikerFile::CAsyncMonikerFile](#casyncmonikerfile__casyncmonikerfile)|Constructs a `CAsyncMonikerFile` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAsyncMonikerFile::Close](#casyncmonikerfile__close)|Closes and releases all resources.|  \n|[CAsyncMonikerFile::GetBinding](#casyncmonikerfile__getbinding)|Retrieves a pointer to the asynchronous transfer binding.|  \n|[CAsyncMonikerFile::GetFormatEtc](#casyncmonikerfile__getformatetc)|Retrieves the format of the data in the stream.|  \n|[CAsyncMonikerFile::Open](#casyncmonikerfile__open)|Opens a file asynchronously.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAsyncMonikerFile::CreateBindStatusCallback](#casyncmonikerfile__createbindstatuscallback)|Creates a COM object that implements `IBindStatusCallback`.|  \n|[CAsyncMonikerFile::GetBindInfo](#casyncmonikerfile__getbindinfo)|Called by the OLE system library to request information on the type of bind to be created.|  \n|[CAsyncMonikerFile::GetPriority](#casyncmonikerfile__getpriority)|Called by the OLE system library to get the priority of the binding.|  \n|[CAsyncMonikerFile::OnDataAvailable](#casyncmonikerfile__ondataavailable)|Called to provide data as it becomes available to the client during asynchronous bind operations.|  \n|[CAsyncMonikerFile::OnLowResource](#casyncmonikerfile__onlowresource)|Called when resources are low.|  \n|[CAsyncMonikerFile::OnProgress](#casyncmonikerfile__onprogress)|Called to indicate progress on the data downloading process.|  \n|[CAsyncMonikerFile::OnStartBinding](#casyncmonikerfile__onstartbinding)|Called when binding is starting up.|  \n|[CAsyncMonikerFile::OnStopBinding](#casyncmonikerfile__onstopbinding)|Called when asynchronous transfer is stopped.|  \n  \n## Remarks  \n Derived from [CMonikerFile](../../mfc/reference/cmonikerfile-class.md), which in turn is derived from [COleStreamFile](../../mfc/reference/colestreamfile-class.md), `CAsyncMonikerFile` uses the [IMoniker](http://msdn.microsoft.com/library/windows/desktop/ms679705) interface to access any data stream asynchronously, including loading files asynchronously from a URL. The files can be datapath properties of ActiveX controls.  \n  \n Asynchronous monikers are used primarily in Internet-enabled applications and ActiveX controls to provide a responsive user-interface during file transfers. A prime example of this is the use of [CDataPathProperty](../../mfc/reference/cdatapathproperty-class.md) to provide asynchronous properties for ActiveX controls. The `CDataPathProperty` object will repeatedly get a callback to indicate availability of new data during a lengthy property exchange process.  \n  \n For more information about how to use asynchronous monikers and ActiveX controls in Internet applications, see the following articles:  \n  \n- [Internet First Steps: Asynchronous Monikers](../../mfc/asynchronous-monikers-on-the-internet.md)  \n  \n- [Internet First Steps: ActiveX Controls](../../mfc/activex-controls-on-the-internet.md)  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CFile](../../mfc/reference/cfile-class.md)  \n  \n [COleStreamFile](../../mfc/reference/colestreamfile-class.md)  \n  \n [CMonikerFile](../../mfc/reference/cmonikerfile-class.md)  \n  \n `CAsyncMonikerFile`  \n  \n## Requirements  \n **Header:** afxole.h  \n  \n##  <a name=\"casyncmonikerfile__casyncmonikerfile\"></a>  CAsyncMonikerFile::CAsyncMonikerFile  \n Constructs a `CAsyncMonikerFile` object.  \n  \n```  \nCAsyncMonikerFile();\n```  \n  \n### Remarks  \n It does not create the `IBindHost` interface. `IBindHost` is used only if you provide it in the **Open** member function.  \n  \n For a description of the `IBindHost` interface, see the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"casyncmonikerfile__close\"></a>  CAsyncMonikerFile::Close  \n Call this function to close and release all resources.  \n  \n```  \nvirtual void Close();\n```  \n  \n### Remarks  \n Can be called on unopened or already closed files.  \n  \n##  <a name=\"casyncmonikerfile__createbindstatuscallback\"></a>  CAsyncMonikerFile::CreateBindStatusCallback  \n Creates a COM object that implements `IBindStatusCallback`.  \n  \n```  \nvirtual IUnknown* CreateBindStatusCallback(IUnknown* pUnkControlling);\n```  \n  \n### Parameters  \n `pUnkControlling`  \n A pointer to the controlling unknown (the outer **IUnknown**) or **NULL** if aggregation is not being used.  \n  \n### Return Value  \n If `pUnkControlling` is not **NULL**, the function returns a pointer to the inner **IUnknown** on a new COM object supporting `IBindStatusCallback`. If `pUnkControlling` is **NULL**, the function returns a pointer to an **IUnknown** on a new COM object supporting `IBindStatusCallback`.  \n  \n### Remarks  \n `CAsyncMonikerFile` requires a COM object that implements `IBindStatusCallback`. MFC implements such an object, and it is aggregatable. You can override `CreateBindStatusCallback` to return your own COM object. Your COM object can aggregate MFC's implementation by calling `CreateBindStatusCallback` with the controlling unknown of your COM object. COM objects implemented using the `CCmdTarget` COM support can retrieve the controlling unknown using **CCmdTarget::GetControllingUnknown**.  \n  \n Alternately, your COM object can delegate to MFC's implementation by calling **CreateBindStatusCallback( NULL )**.  \n  \n [CAsyncMonikerFile::Open](#casyncmonikerfile__open) calls `CreateBindStatusCallback`.  \n  \n For more information about asynchronous monikers and asynchronous binding, see the [IBindStatusCallback](http://msdn.microsoft.com/library/ie/ms775060) interface and [How Asynchronous Binding and Storage Work](http://msdn.microsoft.com/library/windows/desktop/aa379152). For a discussion of aggregation, see [Aggregation](http://msdn.microsoft.com/library/windows/desktop/ms686558). All three topics are in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"casyncmonikerfile__getbindinfo\"></a>  CAsyncMonikerFile::GetBindInfo  \n Called from the client of an asynchronous moniker to tell the asynchronous moniker how it wants to bind.  \n  \n```  \nvirtual DWORD GetBindInfo() const;\n\n \n```  \n  \n### Return Value  \n Retrieves the settings for **IBindStatusCallBack**. For a description of the `IBindStatusCallback` interface, see the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Remarks  \n The default implementation sets the binding to be asynchronous, to use a storage medium (a stream), and to use the data-push model. Override this function if you want to change the behavior of the binding.  \n  \n One reason for doing this would be to bind using the data-pull model instead of the data-push model. In a data-pull model, the client drives the bind operation, and the moniker only provides data to the client when it is read. In a data-push model, the moniker drives the asynchronous bind operation and continuously notifies the client whenever new data is available.  \n  \n##  <a name=\"casyncmonikerfile__getbinding\"></a>  CAsyncMonikerFile::GetBinding  \n Call this function to retrieve a pointer to the asynchronous transfer binding.  \n  \n```  \nIBinding* GetBinding() const;\n\n \n```  \n  \n### Return Value  \n A pointer to the `IBinding` interface provided when asynchronous transfer begins. Returns **NULL** if for any reason the transfer cannot be made asynchronously.  \n  \n### Remarks  \n This allows you to control the data transfer process through the `IBinding` interface, for example, with **IBinding::Abort**, **IBinding::Pause**, and **IBinding::Resume**.  \n  \n For a description of the `IBinding` interface, see the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"casyncmonikerfile__getformatetc\"></a>  CAsyncMonikerFile::GetFormatEtc  \n Call this function to retrieve the format of the data in the stream.  \n  \n```  \nFORMATETC* GetFormatEtc() const;\n\n \n```  \n  \n### Return Value  \n A pointer to the Windows structure [FORMATETC](http://msdn.microsoft.com/library/windows/desktop/ms682177) for the currently opened stream. Returns **NULL** if the moniker has not been bound, if it is not asynchronous, or if the asynchronous operation has not begun.  \n  \n##  <a name=\"casyncmonikerfile__getpriority\"></a>  CAsyncMonikerFile::GetPriority  \n Called from the client of an asynchronous moniker as the binding process starts to receive the priority given to the thread for the binding operation.  \n  \n```  \nvirtual LONG GetPriority() const;\n\n \n```  \n  \n### Return Value  \n The priority at which the asynchronous transfer will take place. One of the standard thread priority flags: **THREAD_PRIORITY_ABOVE_NORMAL**, **THREAD_PRIORITY_BELOW_NORMAL**, **THREAD_PRIORITY_HIGHEST**, **THREAD_PRIORITY_IDLE**, **THREAD_PRIORITY_LOWEST**, **THREAD_PRIORITY_NORMAL**, and **THREAD_PRIORITY_TIME_CRITICAL**. See the Windows function [SetThreadPriority](http://msdn.microsoft.com/library/windows/desktop/ms686277) for a description of these values.  \n  \n### Remarks  \n `GetPriority` should not be called directly. **THREAD_PRIORITY_NORMAL** is returned by the default implementation.  \n  \n##  <a name=\"casyncmonikerfile__ondataavailable\"></a>  CAsyncMonikerFile::OnDataAvailable  \n An asynchronous moniker calls `OnDataAvailable` to provide data to the client as it becomes available, during asynchronous bind operations.  \n  \n```  \nvirtual void OnDataAvailable(\n    DWORD dwSize,  \n    DWORD bscfFlag);\n```  \n  \n### Parameters  \n `dwSize`  \n The cumulative amount (in bytes) of data available since the beginning of the binding. Can be zero, indicating that the amount of data is not relevant to the operation, or that no specific amount became available.  \n  \n *bscfFlag*  \n A **BSCF** enumeration value. Can be one or more of the following values:  \n  \n- **BSCF_FIRSTDATANOTIFICATION** Identifies the first call to `OnDataAvailable` for a given bind operation.  \n  \n- **BSCF_INTERMEDIATEDATANOTIFICATION** Identifies an intermediary call to `OnDataAvailable` for a bind operation.  \n  \n- **BSCF_LASTDATANOTIFICATION** Identifies the last call to `OnDataAvailable` for a bind operation.  \n  \n### Remarks  \n The default implementation of this function does nothing. See the following example for a sample implementation.  \n  \n### Example  \n [!code-cpp[NVC_MFCWinInet#5](../../mfc/codesnippet/cpp/casyncmonikerfile-class_1.cpp)]  \n  \n##  <a name=\"casyncmonikerfile__onlowresource\"></a>  CAsyncMonikerFile::OnLowResource  \n Called by the moniker when resources are low.  \n  \n```  \nvirtual void OnLowResource();\n```  \n  \n### Remarks  \n The default implementation calls `GetBinding( )-> Abort( )`.  \n  \n##  <a name=\"casyncmonikerfile__onprogress\"></a>  CAsyncMonikerFile::OnProgress  \n Called by the moniker repeatedly to indicate the current progress of this bind operation, typically at reasonable intervals during a lengthy operation.  \n  \n```  \nvirtual void OnProgress(\n    ULONG ulProgress,  \n    ULONG ulProgressMax,  \n    ULONG ulStatusCode,  \n    LPCTSTR szStatusText);\n```  \n  \n### Parameters  \n `ulProgress`  \n Indicates the current progress of the bind operation relative to the expected maximum indicated in `ulProgressMax`.  \n  \n `ulProgressMax`  \n Indicates the expected maximum value of `ulProgress` for the duration of calls to `OnProgress` for this operation.  \n  \n `ulStatusCode`  \n Provides additional information regarding the progress of the bind operation. Valid values are taken from the `BINDSTATUS` enumeration. See Remarks for possible values.  \n  \n `szStatusText`  \n Information about the current progress, depending on the value of `ulStatusCode`. See Remarks for possible values.  \n  \n### Remarks  \n Possible values for `ulStatusCode` (and the `szStatusText` for each value) are:  \n  \n **BINDSTATUS_FINDINGRESOURCE**  \n The bind operation is finding the resource that holds the object or storage being bound to. The `szStatusText` provides the display name of the resource being searched for (for example, \"www.microsoft.com\").  \n  \n **BINDSTATUS_CONNECTING**  \n The bind operation is connecting to the resource that holds the object or storage being bound to. The `szStatusText` provides the display name of the resource being connected to (for example, an IP address).  \n  \n **BINDSTATUS_SENDINGREQUEST**  \n The bind operation is requesting the object or storage being bound to. The `szStatusText` provides the display name of the object (for example, a file name).  \n  \n **BINDSTATUS_REDIRECTING**  \n The bind operation has been redirected to a different data location. The `szStatusText` provides the display name of the new data location.  \n  \n **BINDSTATUS_USINGCACHEDCOPY**  \n The bind operation is retrieving the requested object or storage from a cached copy. The `szStatusText` is **NULL**.  \n  \n **BINDSTATUS_BEGINDOWNLOADDATA**  \n The bind operation has begun receiving the object or storage being bound to. The `szStatusText` provides the display name of the data location.  \n  \n **BINDSTATUS_DOWNLOADINGDATA**  \n The bind operation continues to receive the object or storage being bound to. The `szStatusText` provides the display name of the data location.  \n  \n **BINDSTATUS_ENDDOWNLOADDATA**  \n The bind operation has finished receiving the object or storage being bound to. The `szStatusText` provides the display name of the data location.  \n  \n **BINDSTATUS_CLASSIDAVAILABLE**  \n An instance of the object being bound to is just about to be created. The `szStatusText` provides the CLSID of the new object in string format, allowing the client an opportunity to cancel the bind operation, if desired.  \n  \n##  <a name=\"casyncmonikerfile__onstartbinding\"></a>  CAsyncMonikerFile::OnStartBinding  \n Override this function in your derived classes to perform actions when binding is starting up.  \n  \n```  \nvirtual void OnStartBinding();\n```  \n  \n### Remarks  \n This function is called back by the moniker. The default implementation does nothing.  \n  \n##  <a name=\"casyncmonikerfile__onstopbinding\"></a>  CAsyncMonikerFile::OnStopBinding  \n Called by the moniker at the end of the bind operation.  \n  \n```  \nvirtual void OnStopBinding(\n    HRESULT hresult, LPCTSTR szError);\n```  \n  \n### Parameters  \n `hresult`  \n An `HRESULT` that is the error or warning value.  \n  \n *szErrort*  \n A character string describing the error.  \n  \n### Remarks  \n Override this function to perform actions when the transfer is stopped. By default, the function releases `IBinding`.  \n  \n For a description of the `IBinding` interface, see the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"casyncmonikerfile__open\"></a>  CAsyncMonikerFile::Open  \n Call this member function to open a file asynchronously.  \n  \n```  \nvirtual BOOL Open(\n    LPCTSTR lpszURL,\n    CFileException* pError = NULL);\n\n \nvirtual BOOL Open(\n    IMoniker* pMoniker,\n    CFileException* pError = NULL);\n\n \nvirtual BOOL Open(\n    LPCTSTR lpszURL,\n    IBindHost* pBindHost,\n    CFileException* pError = NULL);\n\n \nvirtual BOOL Open(\n    IMoniker* pMoniker,\n    IBindHost* pBindHost,\n    CFileException* pError = NULL);\n\n \nvirtual BOOL Open(\n    LPCTSTR lpszURL,\n    IServiceProvider* pServiceProvider,\n    CFileException* pError = NULL);\n\n \nvirtual BOOL Open(\n    IMoniker* pMoniker,\n    IServiceProvider* pServiceProvider,\n    CFileException* pError = NULL);\n\n \nvirtual BOOL Open(\n    LPCTSTR lpszURL,\n    IUnknown* pUnknown,\n    CFileException* pError = NULL);\n\n \nvirtual BOOL Open(\n    IMoniker* pMoniker,\n    IUnknown* pUnknown,\n    CFileException* pError = NULL);\n```  \n  \n### Parameters  \n `lpszURL`  \n A pointer to file to be opened asynchronously. The file can be any valid URL or filename.  \n  \n `pError`  \n A pointer to the file exceptions. In the event of an error, it will be set to the cause.  \n  \n `pMoniker`  \n A pointer to the asynchronous moniker interface `IMoniker`, a precise moniker that is the combination of the document's own moniker, which you can retrieve with **IOleClientSite::GetMoniker(** *OLEWHICHMK_CONTAINER* **)**, and a moniker created from the path name. The control can use this moniker to bind, but this is not the moniker the control should save.  \n  \n *pBindHost*  \n A pointer to the `IBindHost` interface that will be used to create the moniker from a potentially relative pathname. If the bind host is invalid or does not provide a moniker, the call defaults to **Open(** `lpszFileName`**,**`pError`**)**. For a description of the `IBindHost` interface, see the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `pServiceProvider`  \n A pointer to the `IServiceProvider` interface. If the service provider is invalid or fails to provide the service for `IBindHost`, the call defaults to **Open(** `lpszFileName`**,**`pError`**)**.  \n  \n *pUnknown*  \n A pointer to the **IUnknown** interface. If `IServiceProvider` is found, the function queries for `IBindHost`. If the service provider is invalid or fails to provide the service for `IBindHost`, the call defaults to **Open(** `lpszFileName`**,**`pError`**)**.  \n  \n### Return Value  \n Nonzero if the file is opened successfully; otherwise 0.  \n  \n### Remarks  \n This call initiates the binding process.  \n  \n You can use a URL or a filename for the `lpszURL` parameter. For example:  \n  \n [!code-cpp[NVC_MFCWinInet#6](../../mfc/codesnippet/cpp/casyncmonikerfile-class_2.cpp)]  \n  \n – or –  \n  \n [!code-cpp[NVC_MFCWinInet#7](../../mfc/codesnippet/cpp/casyncmonikerfile-class_3.cpp)]  \n  \n## See Also  \n [CMonikerFile Class](../../mfc/reference/cmonikerfile-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CMonikerFile Class](../../mfc/reference/cmonikerfile-class.md)   \n [CDataPathProperty Class](../../mfc/reference/cdatapathproperty-class.md)\n"}