<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">517655bb06bdcfce7de0ec144d657e5d35dc5a36</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\subscript-operator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ec7af8e4079442dbf9f31e96bb2d87aa21bdf83b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e86277b655d8556f7a89a9f1faa87d8c2e0598e0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Subscript Operator: | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Subscript Operator:</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A postfix expression (which can also be a primary expression) followed by the subscript operator, <bpt id="p1">**</bpt>[ ]<ept id="p1">**</ept>, specifies array indexing.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For information about managed arrays, see <bpt id="p1">[</bpt>Arrays<ept id="p1">](../windows/arrays-cpp-component-extensions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Usually, the value represented by <bpt id="p1">*</bpt>postfix-expression<ept id="p1">*</ept> is a pointer value, such as an array identifier, and <bpt id="p2">*</bpt>expression<ept id="p2">*</ept> is an integral value (including enumerated types).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>However, all that is required syntactically is that one of the expressions be of pointer type and the other be of integral type.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Thus the integral value could be in the <bpt id="p1">*</bpt>postfix-expression<ept id="p1">*</ept> position and the pointer value could be in the brackets in the <bpt id="p2">*</bpt>expression<ept id="p2">*</ept> or subscript position.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Consider the following code fragment:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In the preceding example, the expression <ph id="ph1">`nArray[2]`</ph> is identical to <ph id="ph2">`2[nArray]`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The reason is that the result of a subscript expression <bpt id="p1">*</bpt>e1<ept id="p1">*</ept><bpt id="p2">**</bpt>[<ept id="p2">**</ept> <bpt id="p3">*</bpt>e2<ept id="p3">*</ept> <bpt id="p4">**</bpt>]<ept id="p4">**</ept> is given by:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\*</ph>( (<ept id="p1">**</ept> <bpt id="p2">*</bpt>e2<ept id="p2">*</ept> <bpt id="p3">**</bpt>)<ept id="p3">**</ept> <bpt id="p4">*</bpt><ph id="ph2">+</ph><ept id="p4">*</ept> <bpt id="p5">**</bpt>(<ept id="p5">**</ept><bpt id="p6">*</bpt>e1<ept id="p6">*</ept><bpt id="p7">**</bpt>) )<ept id="p7">**</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The address yielded by the expression is not <bpt id="p1">*</bpt>e2<ept id="p1">*</ept> bytes from the address <bpt id="p2">*</bpt>e1<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Rather, the address is scaled to yield the next object in the array <bpt id="p1">*</bpt>e2<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The addresses of <ph id="ph1">`aDb[0]`</ph> and <ph id="ph2">`aDb[1]`</ph> are 8 bytes apart — the size of an object of type <bpt id="p1">**</bpt>double<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This scaling according to object type is done automatically by the C++ language and is defined in <bpt id="p1">[</bpt>Additive Operators<ept id="p1">](../cpp/additive-operators-plus-and.md)</ept> where addition and subtraction of operands of pointer type is discussed.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A subscript expression can also have multiple subscripts, as follows:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>expression1<ept id="p1">*</ept> <bpt id="p2">**</bpt>[<ept id="p2">**</ept><bpt id="p3">*</bpt>expression2<ept id="p3">*</ept><bpt id="p4">**</bpt>] [<ept id="p4">**</ept><bpt id="p5">*</bpt>expression3<ept id="p5">*</ept><bpt id="p6">**</bpt>]<ept id="p6">**</ept>...</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Subscript expressions associate from left to right.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The leftmost subscript expression, <bpt id="p1">*</bpt>expression1<ept id="p1">*</ept><bpt id="p2">**</bpt>[<ept id="p2">**</ept><bpt id="p3">*</bpt>expression2<ept id="p3">*</ept><bpt id="p4">**</bpt>]<ept id="p4">**</ept>, is evaluated first.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The address that results from adding <bpt id="p1">*</bpt>expression1<ept id="p1">*</ept> and <bpt id="p2">*</bpt>expression2<ept id="p2">*</ept> forms a pointer expression; then <bpt id="p3">*</bpt>expression3<ept id="p3">*</ept> is added to this pointer expression to form a new pointer expression, and so on until the last subscript expression has been added.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The indirection operator (<bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept>) is applied after the last subscripted expression is evaluated, unless the final pointer value addresses an array type.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Expressions with multiple subscripts refer to elements of multidimensional arrays.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A multidimensional array is an array whose elements are arrays.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, the first element of a three-dimensional array is an array with two dimensions.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following example declares and initializes a simple two-dimensional array of characters:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Positive and negative subscripts</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The first element of an array is element 0.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The range of a C++ array is from <bpt id="p1">*</bpt>array<ept id="p1">*</ept>[0] to <bpt id="p2">*</bpt>array<ept id="p2">*</ept>[<bpt id="p3">*</bpt>size<ept id="p3">*</ept> – 1].</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>However, C++ supports positive and negative subscripts.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Negative subscripts must fall within array boundaries; if they do not, the results are unpredictable.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following code shows positive and negative array subscripts:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The negative subscript in the lasta line can produce a run-time error because it points an address 256 bytes lower in memory than the origin of the array.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The pointer <ph id="ph1">`midArray`</ph> is initialized to the middle of <ph id="ph2">`intArray`</ph>; it is therefore possible to use both positive and negative array indices on it.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Array subscript errors do not generate compile-time errors, but they yield unpredictable results.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The subscript operator is commutative.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Therefore, the expressions <bpt id="p1">*</bpt>array<ept id="p1">*</ept>[<bpt id="p2">*</bpt>index<ept id="p2">*</ept>] and <bpt id="p3">*</bpt>array<ept id="p3">*</ept>[<bpt id="p4">*</bpt>array<ept id="p4">*</ept>] are guaranteed to be equivalent as long as the subscript operator is not overloaded (see <bpt id="p5">[</bpt>Overloaded Operators<ept id="p5">](../cpp/operator-overloading.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The first form is the most common coding practice, but either works.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Postfix Expressions</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>C++ Built-in Operators, Precedence and Associativity</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Arrays</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>One-Dimensional Arrays</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Multidimensional Arrays</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>