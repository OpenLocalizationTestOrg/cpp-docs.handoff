{"nodes":[{"pos":[12,51],"content":"deque::deque (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"deque::deque (STL-CLR) | Microsoft Docs","pos":[0,39]}]},{"content":"deque::deque (STL/CLR)","pos":[626,648]},{"content":"Constructs a container object.","pos":[649,679]},{"content":"Syntax","pos":[688,694]},{"content":"Parameters","pos":[996,1006]},{"content":"count","pos":[1010,1015]},{"content":"Number of elements to insert.","pos":[1019,1048]},{"content":"first","pos":[1055,1060]},{"content":"Beginning of range to insert.","pos":[1064,1093]},{"content":"last","pos":[1100,1104]},{"content":"End of range to insert.","pos":[1108,1131]},{"content":"right","pos":[1138,1143]},{"content":"Object or range to insert.","pos":[1147,1173]},{"content":"val","pos":[1180,1183]},{"content":"Value of the element to insert.","pos":[1187,1218]},{"content":"Remarks","pos":[1227,1234]},{"content":"The constructor:","pos":[1238,1254]},{"content":"initializes the controlled sequence with no elements.","pos":[1278,1331]},{"content":"You use it to specify an empty initial controlled sequence.","pos":[1332,1391]},{"content":"The constructor:","pos":[1398,1414]},{"content":"initializes the controlled sequence with the sequence <ph id=\"ph1\">`[``right``.`</ph><bpt id=\"p1\">[</bpt>deque::begin (STL/CLR)<ept id=\"p1\">](../dotnet/deque-begin-stl-clr.md)</ept><ph id=\"ph2\">`(),`</ph> <ph id=\"ph3\">`right``.`</ph><bpt id=\"p2\">[</bpt>deque::end (STL/CLR)<ept id=\"p2\">](../dotnet/deque-end-stl-clr.md)</ept><ph id=\"ph4\">`())`</ph>.","pos":[1457,1658],"source":"initializes the controlled sequence with the sequence `[``right``.`[deque::begin (STL/CLR)](../dotnet/deque-begin-stl-clr.md)`(),` `right``.`[deque::end (STL/CLR)](../dotnet/deque-end-stl-clr.md)`())`."},{"content":"You use it to specify an initial controlled sequence that is a copy of the sequence controlled by the deque object <ph id=\"ph1\">`right`</ph>.","pos":[1659,1782],"source":" You use it to specify an initial controlled sequence that is a copy of the sequence controlled by the deque object `right`."},{"content":"The constructor:","pos":[1789,1805]},{"content":"initializes the controlled sequence with the sequence <ph id=\"ph1\">`[``right``-&gt;`</ph><bpt id=\"p1\">[</bpt>deque::begin (STL/CLR)<ept id=\"p1\">](../dotnet/deque-begin-stl-clr.md)</ept><ph id=\"ph2\">`(),`</ph> <ph id=\"ph3\">`right``-&gt;`</ph><bpt id=\"p2\">[</bpt>deque::end (STL/CLR)<ept id=\"p2\">](../dotnet/deque-end-stl-clr.md)</ept><ph id=\"ph4\">`())`</ph>.","pos":[1848,2051],"source":"initializes the controlled sequence with the sequence `[``right``->`[deque::begin (STL/CLR)](../dotnet/deque-begin-stl-clr.md)`(),` `right``->`[deque::end (STL/CLR)](../dotnet/deque-end-stl-clr.md)`())`."},{"content":"You use it to specify an initial controlled sequence that is a copy of the sequence controlled by the deque object whose handle is <ph id=\"ph1\">`right`</ph>.","pos":[2052,2191],"source":" You use it to specify an initial controlled sequence that is a copy of the sequence controlled by the deque object whose handle is `right`."},{"content":"The constructor:","pos":[2198,2214]},{"content":"initializes the controlled sequence with <ph id=\"ph1\">`count`</ph> elements each with value <ph id=\"ph2\">`value_type()`</ph>.","pos":[2262,2351],"source":"initializes the controlled sequence with `count` elements each with value `value_type()`."},{"content":"You use it to fill the container with elements all having the default value.","pos":[2352,2428]},{"content":"The constructor:","pos":[2435,2451]},{"content":"initializes the controlled sequence with <ph id=\"ph1\">`count`</ph> elements each with value <ph id=\"ph2\">`val`</ph>.","pos":[2506,2586],"source":"initializes the controlled sequence with `count` elements each with value `val`."},{"content":"You use it to fill the container with elements all having the same value.","pos":[2587,2660]},{"content":"The constructor:","pos":[2667,2683]},{"content":"initializes the controlled sequence with the sequence <ph id=\"ph1\">`[``first``,`</ph> <ph id=\"ph2\">`last``)`</ph>.","pos":[2760,2838],"source":"initializes the controlled sequence with the sequence `[``first``,` `last``)`."},{"content":"You use it to make the controlled sequence a copy of another sequence.","pos":[2839,2909]},{"content":"The constructor:","pos":[2916,2932]},{"content":"initializes the controlled sequence with the sequence designated by the enumerator <ph id=\"ph1\">`right`</ph>.","pos":[3011,3102],"source":"initializes the controlled sequence with the sequence designated by the enumerator `right`."},{"content":"You use it to make the controlled sequence a copy of another sequence described by an enumerator.","pos":[3103,3200]},{"content":"Example","pos":[3209,3216]},{"content":"Requirements","pos":[5052,5064]},{"pos":[5068,5095],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/deque&gt;","source":"**Header:** \\<cliext/deque>"},{"pos":[5102,5123],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[5132,5140]},{"content":"deque (STL/CLR)","pos":[5145,5160]},{"content":"deque::assign (STL/CLR)","pos":[5195,5218]},{"content":"deque::generic_container (STL/CLR)","pos":[5260,5294]},{"content":"operator= (deque) (STL/CLR)","pos":[5347,5374]}],"content":"---\ntitle: \"deque::deque (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::deque::deque\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"deque member [STL/CLR]\"\nms.assetid: e5bc9511-619e-469c-b50a-e06858e7fce7\ncaps.latest.revision: 17\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# deque::deque (STL/CLR)\nConstructs a container object.  \n  \n## Syntax  \n  \n```  \ndeque();  \ndeque(deque<Value>% right);  \ndeque(deque<Value>^ right);  \nexplicit deque(size_type count);  \ndeque(size_type count, value_type val);  \ntemplate<typename InIt>  \n    deque(InIt first, InIt last);  \ndeque(System::Collections::Generic::IEnumerable<Value>^ right);  \n```  \n  \n#### Parameters  \n count  \n Number of elements to insert.  \n  \n first  \n Beginning of range to insert.  \n  \n last  \n End of range to insert.  \n  \n right  \n Object or range to insert.  \n  \n val  \n Value of the element to insert.  \n  \n## Remarks  \n The constructor:  \n  \n `deque();`  \n  \n initializes the controlled sequence with no elements. You use it to specify an empty initial controlled sequence.  \n  \n The constructor:  \n  \n `deque(deque<Value>% right);`  \n  \n initializes the controlled sequence with the sequence `[``right``.`[deque::begin (STL/CLR)](../dotnet/deque-begin-stl-clr.md)`(),` `right``.`[deque::end (STL/CLR)](../dotnet/deque-end-stl-clr.md)`())`. You use it to specify an initial controlled sequence that is a copy of the sequence controlled by the deque object `right`.  \n  \n The constructor:  \n  \n `deque(deque<Value>^ right);`  \n  \n initializes the controlled sequence with the sequence `[``right``->`[deque::begin (STL/CLR)](../dotnet/deque-begin-stl-clr.md)`(),` `right``->`[deque::end (STL/CLR)](../dotnet/deque-end-stl-clr.md)`())`. You use it to specify an initial controlled sequence that is a copy of the sequence controlled by the deque object whose handle is `right`.  \n  \n The constructor:  \n  \n `explicit deque(size_type count);`  \n  \n initializes the controlled sequence with `count` elements each with value `value_type()`. You use it to fill the container with elements all having the default value.  \n  \n The constructor:  \n  \n `deque(size_type count, value_type val);`  \n  \n initializes the controlled sequence with `count` elements each with value `val`. You use it to fill the container with elements all having the same value.  \n  \n The constructor:  \n  \n `template<typename InIt>`  \n  \n `deque(InIt first, InIt last);`  \n  \n initializes the controlled sequence with the sequence `[``first``,` `last``)`. You use it to make the controlled sequence a copy of another sequence.  \n  \n The constructor:  \n  \n `deque(System::Collections::Generic::IEnumerable<Value>^ right);`  \n  \n initializes the controlled sequence with the sequence designated by the enumerator `right`. You use it to make the controlled sequence a copy of another sequence described by an enumerator.  \n  \n## Example  \n  \n```  \n// cliext_deque_construct.cpp   \n// compile with: /clr   \n#include <cliext/deque>   \n  \nint main()   \n    {   \n// construct an empty container   \n    cliext::deque<wchar_t> c1;   \n    System::Console::WriteLine(\"size() = {0}\", c1.size());   \n  \n// construct with a repetition of default values   \n    cliext::deque<wchar_t> c2(3);   \n    for each (wchar_t elem in c2)   \n        System::Console::Write(\" {0}\", (int)elem);   \n    System::Console::WriteLine();   \n  \n// construct with a repetition of values   \n    cliext::deque<wchar_t> c3(6, L'x');   \n    for each (wchar_t elem in c3)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// construct with an iterator range   \n    cliext::deque<wchar_t>::iterator it = c3.end();   \n    cliext::deque<wchar_t> c4(c3.begin(), --it);   \n    for each (wchar_t elem in c4)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// construct with an enumeration   \n    cliext::deque<wchar_t> c5(   // NOTE: cast is not needed   \n        (System::Collections::Generic::IEnumerable<wchar_t>^)%c3);   \n    for each (wchar_t elem in c5)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// construct by copying another container   \n    cliext::deque<wchar_t> c7(c3);   \n    for each (wchar_t elem in c7)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// construct by copying a container handle   \n    cliext::deque<wchar_t> c8(%c3);   \n    for each (wchar_t elem in c8)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \nsize() = 0  \n 0 0 0  \n x x x x x x  \n x x x x x  \n x x x x x x  \n x x x x x x  \n x x x x x x  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/deque>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [deque (STL/CLR)](../dotnet/deque-stl-clr.md)   \n [deque::assign (STL/CLR)](../dotnet/deque-assign-stl-clr.md)   \n [deque::generic_container (STL/CLR)](../dotnet/deque-generic-container-stl-clr.md)   \n [operator= (deque) (STL/CLR)](../dotnet/operator-assign-deque-stl-clr.md)"}