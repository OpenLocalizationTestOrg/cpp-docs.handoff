{"nodes":[{"pos":[12,43],"content":"divides Struct | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"divides Struct | Microsoft Docs","pos":[0,31]}]},{"content":"divides Struct","pos":[709,723]},{"pos":[724,822],"content":"A predefined function object that performs the division operation ( <ph id=\"ph1\">`operator/`</ph>) on its arguments.","source":"A predefined function object that performs the division operation ( `operator/`) on its arguments."},{"content":"Syntax","pos":[831,837]},{"content":"Parameters","pos":[1251,1261]},{"content":", <ph id=\"ph1\">`T`</ph>,","pos":[1271,1277],"source":", `T`, "},{"content":"A type that supports an <ph id=\"ph1\">`operator/`</ph> that takes operands of the specified or inferred types.","pos":[1285,1376],"source":" A type that supports an `operator/` that takes operands of the specified or inferred types."},{"content":"The left operand of the division operation.","pos":[1393,1436]},{"content":"The unspecialized template takes an lvalue reference argument of type <ph id=\"ph1\">`Type`</ph>.","pos":[1437,1514],"source":" The unspecialized template takes an lvalue reference argument of type `Type`."},{"content":"The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type <ph id=\"ph1\">`T`</ph>.","pos":[1515,1626],"source":" The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `T`."},{"content":"The right operand of the division operation.","pos":[1644,1688]},{"content":"The unspecialized template takes an lvalue reference argument of type <ph id=\"ph1\">`Type`</ph>.","pos":[1689,1766],"source":" The unspecialized template takes an lvalue reference argument of type `Type`."},{"content":"The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type <ph id=\"ph1\">`U`</ph>.","pos":[1767,1878],"source":" The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `U`."},{"content":"Return Value","pos":[1887,1899]},{"content":"The result of <ph id=\"ph1\">`Left``/``Right`</ph>.","pos":[1903,1934],"source":"The result of `Left``/``Right`."},{"content":"The specialized template does perfect forwarding of the result, which has the type that's returned by <ph id=\"ph1\">`operator/`</ph>.","pos":[1935,2049],"source":" The specialized template does perfect forwarding of the result, which has the type that's returned by `operator/`."},{"content":"Example","pos":[2058,2065]},{"content":"Requirements","pos":[3399,3411]},{"pos":[3415,3440],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>functional&gt;","source":"**Header:** \\<functional>"},{"pos":[3447,3465],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"content":"See Also","pos":[3474,3482]},{"content":"Thread Safety in the C++ Standard Library","pos":[3487,3528]},{"content":"C++ Standard Library Reference","pos":[3601,3631]}],"content":"---\ntitle: \"divides Struct | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"xfunctional/std::divides\"\n  - \"std::divides\"\n  - \"std.divides\"\n  - \"divides\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"divides struct\"\n  - \"divides class\"\nms.assetid: b9cf8e9c-6981-43a6-a6a3-8f761987dd7a\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# divides Struct\nA predefined function object that performs the division operation ( `operator/`) on its arguments.  \n  \n## Syntax  \n  \n```\ntemplate <class Type = void>\nstruct divides : public binary_function <Type, Type, Type>  \n{\n    Type operator()(const Type& Left, const Type& Right) const;\n};\n\n// specialized transparent functor for operator/\ntemplate <>\nstruct divides<void>  \n{\n  template <class T, class U>\n  auto operator()(T&& Left, U&& Right) const\n    -> decltype(std::forward<T>(Left)*/ std::forward<U>(Right));\n };\n```  \n  \n#### Parameters  \n `Type`, `T`, `U`  \n A type that supports an `operator/` that takes operands of the specified or inferred types.  \n  \n `Left`  \n The left operand of the division operation. The unspecialized template takes an lvalue reference argument of type `Type`. The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `T`.  \n  \n `Right`  \n The right operand of the division operation. The unspecialized template takes an lvalue reference argument of type `Type`. The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `U`.  \n  \n## Return Value  \n The result of `Left``/``Right`. The specialized template does perfect forwarding of the result, which has the type that's returned by `operator/`.  \n  \n## Example  \n  \n```cpp  \n// functional_divides.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <functional>  \n#include <algorithm>  \n#include <iostream>  \n  \nusing namespace std;  \n  \nint main( )  \n{  \n   vector <double> v1, v2, v3 (6);  \n   vector <double>::iterator Iter1, Iter2, Iter3;  \n  \n   int i;  \n   for ( i = 0 ; i <= 5 ; i++ )  \n   {  \n      v1.push_back( 7.0 * i );  \n   }  \n  \n   int j;  \n   for ( j = 1 ; j <= 6 ; j++ )  \n   {  \n      v2.push_back( 2.0 * j);  \n   }  \n  \n   cout << \"The vector v1 = ( \" ;  \n   for ( Iter1 = v1.begin( ) ; Iter1 != v1.end( ) ; Iter1++ )  \n      cout << *Iter1 << \" \";  \n   cout << \")\" << endl;  \n  \n   cout << \"The vector v2 = ( \" ;  \n   for ( Iter2 = v2.begin( ) ; Iter2 != v2.end( ) ; Iter2++ )  \n      cout << *Iter2 << \" \";  \n   cout << \")\" << endl;  \n  \n   // Finding the element-wise quotients of the elements of v1 & v2  \n   transform ( v1.begin( ), v1.end( ), v2.begin( ), v3.begin ( ),   \n      divides<double>( ) );  \n  \n   cout << \"The element-wise quotients are: ( \" ;  \n   for ( Iter3 = v3.begin( ) ; Iter3 != v3.end( ) ; Iter3++ )  \n      cout << *Iter3 << \" \";  \n   cout << \")\" << endl;  \n}  \n  \n/* Output:  \nThe vector v1 = ( 0 7 14 21 28 35 )  \nThe vector v2 = ( 2 4 6 8 10 12 )  \nThe element-wise quotients are: ( 0 1.75 2.33333 2.625 2.8 2.91667 )  \n*/  \n```  \n  \n## Requirements  \n **Header:** \\<functional>  \n  \n **Namespace:** std  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}