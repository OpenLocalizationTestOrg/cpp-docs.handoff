{"nodes":[{"pos":[12,45],"content":"combinable Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"combinable Class | Microsoft Docs","pos":[0,33]}]},{"pos":[619,635],"content":"combinable Class","linkify":"combinable Class","nodes":[{"content":"combinable Class","pos":[0,16]}]},{"content":"The <ph id=\"ph1\">`combinable&lt;T&gt;`</ph> object is intended to provide thread-private copies of data, to perform lock-free thread-local sub-computations during parallel algorithms.","pos":[636,795],"source":"The `combinable<T>` object is intended to provide thread-private copies of data, to perform lock-free thread-local sub-computations during parallel algorithms."},{"content":"At the end of the parallel operation, the thread-private sub-computations can then be merged into a final result.","pos":[796,909]},{"content":"This class can be used instead of a shared variable, and can result in a performance improvement if there would otherwise be a lot of contention on that shared variable.","pos":[910,1079]},{"pos":[1088,1094],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1157,1167],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The data type of the final merged result.","pos":[1178,1219]},{"content":"The type must have a copy constructor and a default constructor.","pos":[1220,1284]},{"pos":[1293,1300],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1310,1329],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1336,1340]},{"content":"Description","pos":[1341,1352]},{"pos":[1390,1433],"content":"<bpt id=\"p1\">[</bpt>combinable::combinable Constructor<ept id=\"p1\">](#ctor)</ept>","source":"[combinable::combinable Constructor](#ctor)"},{"content":"Overloaded.","pos":[1434,1445]},{"content":"Constructs a new <ph id=\"ph1\">`combinable`</ph> object.","pos":[1446,1483],"source":" Constructs a new `combinable` object."},{"pos":[1488,1531],"content":"<bpt id=\"p1\">[</bpt>combinable::~combinable Destructor<ept id=\"p1\">](#dtor)</ept>","source":"[combinable::~combinable Destructor](#dtor)"},{"pos":[1532,1563],"content":"Destroys a <ph id=\"ph1\">`combinable`</ph> object.","source":"Destroys a `combinable` object."},{"pos":[1574,1588],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1595,1599]},{"content":"Description","pos":[1600,1611]},{"pos":[1649,1683],"content":"<bpt id=\"p1\">[</bpt>combinable::clear Method<ept id=\"p1\">](#clear)</ept>","source":"[combinable::clear Method](#clear)"},{"content":"Clears any intermediate computational results from a previous usage.","pos":[1684,1752]},{"pos":[1757,1795],"content":"<bpt id=\"p1\">[</bpt>combinable::combine Method<ept id=\"p1\">](#combine)</ept>","source":"[combinable::combine Method](#combine)"},{"content":"Computes a final value from the set of thread-local sub-computations by calling the supplied combine functor.","pos":[1796,1905]},{"pos":[1910,1958],"content":"<bpt id=\"p1\">[</bpt>combinable::combine_each Method<ept id=\"p1\">](#combine_each)</ept>","source":"[combinable::combine_each Method](#combine_each)"},{"content":"Computes a final value from the set of thread-local sub-computations by calling the supplied combine functor once per thread-local sub-computation.","pos":[1959,2106]},{"content":"The final result is accumulated by the function object.","pos":[2107,2162]},{"pos":[2167,2201],"content":"<bpt id=\"p1\">[</bpt>combinable::local Method<ept id=\"p1\">](#local)</ept>","source":"[combinable::local Method](#local)"},{"content":"Overloaded.","pos":[2202,2213]},{"content":"Returns a reference to the thread-private sub-computation.","pos":[2214,2272]},{"pos":[2283,2299],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[2306,2310]},{"content":"Description","pos":[2311,2322]},{"pos":[2360,2406],"content":"<bpt id=\"p1\">[</bpt>combinable::operator= Operator<ept id=\"p1\">](#operator_eq)</ept>","source":"[combinable::operator= Operator](#operator_eq)"},{"pos":[2407,2473],"content":"Assigns to a <ph id=\"ph1\">`combinable`</ph> object from another <ph id=\"ph2\">`combinable`</ph> object.","source":"Assigns to a `combinable` object from another `combinable` object."},{"pos":[2483,2490],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2494,2615],"content":"For more information, see <bpt id=\"p1\">[</bpt>Parallel Containers and Objects<ept id=\"p1\">](../../../parallel/concrt/parallel-containers-and-objects.md)</ept>.","source":"For more information, see [Parallel Containers and Objects](../../../parallel/concrt/parallel-containers-and-objects.md)."},{"pos":[2624,2645],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[2670,2682],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2686,2703],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> ppl.h","source":"**Header:** ppl.h"},{"pos":[2710,2736],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[2746,2792],"content":"<bpt id=\"p1\">&lt;a name=\"clear\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  combinable::clear Method","linkify":"<a name=\"clear\"></a>  combinable::clear Method","source":"<a name=\"clear\"></a>  combinable::clear Method"},{"content":"Clears any intermediate computational results from a previous usage.","pos":[2796,2864]},{"pos":[2901,2956],"content":"<bpt id=\"p1\">&lt;a name=\"ctor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  combinable::combinable Constructor","linkify":"<a name=\"ctor\"></a>  combinable::combinable Constructor","source":"<a name=\"ctor\"></a>  combinable::combinable Constructor"},{"pos":[2960,2997],"content":"Constructs a new <ph id=\"ph1\">`combinable`</ph> object.","source":"Constructs a new `combinable` object."},{"pos":[3149,3159],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type of the initialization functor object.","pos":[3178,3224]},{"content":"A function which will be called to initialize each new thread-private value of the type <ph id=\"ph1\">`T`</ph>.","pos":[3250,3342],"source":" A function which will be called to initialize each new thread-private value of the type `T`."},{"content":"It must support a function call operator with the signature <ph id=\"ph1\">`T ()`</ph>.","pos":[3343,3410],"source":" It must support a function call operator with the signature `T ()`."},{"content":"An existing <ph id=\"ph1\">`combinable`</ph> object to be copied into this one.","pos":[3428,3487],"source":" An existing `combinable` object to be copied into this one."},{"pos":[3497,3504],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3508,3601],"content":"The first constructor initializes new elements with the default constructor for the type <ph id=\"ph1\">`T`</ph>.","source":"The first constructor initializes new elements with the default constructor for the type `T`."},{"pos":[3608,3731],"content":"The second constructor initializes new elements using the initialization functor supplied as the <ph id=\"ph1\">`_FnInitialize`</ph> parameter.","source":"The second constructor initializes new elements using the initialization functor supplied as the `_FnInitialize` parameter."},{"content":"The third constructor is the copy constructor.","pos":[3738,3784]},{"pos":[3794,3849],"content":"<bpt id=\"p1\">&lt;a name=\"dtor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  combinable::~combinable Destructor","linkify":"<a name=\"dtor\"></a>  combinable::~combinable Destructor","source":"<a name=\"dtor\"></a>  combinable::~combinable Destructor"},{"pos":[3853,3884],"content":"Destroys a <ph id=\"ph1\">`combinable`</ph> object.","source":"Destroys a `combinable` object."},{"pos":[3922,3972],"content":"<bpt id=\"p1\">&lt;a name=\"combine\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  combinable::combine Method","linkify":"<a name=\"combine\"></a>  combinable::combine Method","source":"<a name=\"combine\"></a>  combinable::combine Method"},{"content":"Computes a final value from the set of thread-local sub-computations by calling the supplied combine functor.","pos":[3976,4085]},{"pos":[4176,4186],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type of the function object that will be invoked to combine two thread-local sub-computations.","pos":[4205,4303]},{"content":"The functor that is used to combine the sub-computations.","pos":[4326,4383]},{"content":"Its signature is <ph id=\"ph1\">`T (T, T)`</ph> or <ph id=\"ph2\">`T (const T&amp;, const T&amp;)`</ph>, and it must be associative and commutative.","pos":[4384,4484],"source":" Its signature is `T (T, T)` or `T (const T&, const T&)`, and it must be associative and commutative."},{"pos":[4494,4506],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The final result of combining all the thread-private sub-computations.","pos":[4510,4580]},{"pos":[4590,4650],"content":"<bpt id=\"p1\">&lt;a name=\"combine_each\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  combinable::combine_each Method","linkify":"<a name=\"combine_each\"></a>  combinable::combine_each Method","source":"<a name=\"combine_each\"></a>  combinable::combine_each Method"},{"content":"Computes a final value from the set of thread-local sub-computations by calling the supplied combine functor once per thread-local sub-computation.","pos":[4654,4801]},{"content":"The final result is accumulated by the function object.","pos":[4802,4857]},{"pos":[4956,4966],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type of the function object that will be invoked to combine a single thread-local sub-computation.","pos":[4985,5087]},{"content":"The functor that is used to combine one sub-computation.","pos":[5110,5166]},{"content":"Its signature is <ph id=\"ph1\">`void (T)`</ph> or <ph id=\"ph2\">`void (const T&amp;)`</ph>, and must be associative and commutative.","pos":[5167,5257],"source":" Its signature is `void (T)` or `void (const T&)`, and must be associative and commutative."},{"pos":[5267,5313],"content":"<bpt id=\"p1\">&lt;a name=\"local\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  combinable::local Method","linkify":"<a name=\"local\"></a>  combinable::local Method","source":"<a name=\"local\"></a>  combinable::local Method"},{"content":"Returns a reference to the thread-private sub-computation.","pos":[5317,5375]},{"pos":[5436,5446],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to a boolean.","pos":[5463,5488]},{"content":"The boolean value referenced by this argument will be set to <ph id=\"ph1\">`true`</ph> if the sub-computation already existed on this thread, and set to <ph id=\"ph2\">`false`</ph> if this was the first sub-computation on this thread.","pos":[5489,5684],"source":" The boolean value referenced by this argument will be set to `true` if the sub-computation already existed on this thread, and set to `false` if this was the first sub-computation on this thread."},{"pos":[5694,5706],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reference to the thread-private sub-computation.","pos":[5710,5760]},{"pos":[5770,5828],"content":"<bpt id=\"p1\">&lt;a name=\"operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  combinable::operator= Operator","linkify":"<a name=\"operator_eq\"></a>  combinable::operator= Operator","source":"<a name=\"operator_eq\"></a>  combinable::operator= Operator"},{"pos":[5832,5898],"content":"Assigns to a <ph id=\"ph1\">`combinable`</ph> object from another <ph id=\"ph2\">`combinable`</ph> object.","source":"Assigns to a `combinable` object from another `combinable` object."},{"pos":[5970,5980],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An existing <ph id=\"ph1\">`combinable`</ph> object to be copied into this one.","pos":[5995,6054],"source":" An existing `combinable` object to be copied into this one."},{"pos":[6064,6076],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6080,6120],"content":"A reference to this <ph id=\"ph1\">`combinable`</ph> object.","source":"A reference to this `combinable` object."},{"pos":[6129,6137],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[6141,6190],"content":"<bpt id=\"p1\">[</bpt>concurrency Namespace<ept id=\"p1\">](concurrency-namespace.md)</ept>","source":"[concurrency Namespace](concurrency-namespace.md)"}],"content":"---\ntitle: \"combinable Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"ppl/concurrency::combinable\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"combinable class\"\nms.assetid: fe0bfbf6-6250-47da-b8d0-f75369f0b5be\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# combinable Class\nThe `combinable<T>` object is intended to provide thread-private copies of data, to perform lock-free thread-local sub-computations during parallel algorithms. At the end of the parallel operation, the thread-private sub-computations can then be merged into a final result. This class can be used instead of a shared variable, and can result in a performance improvement if there would otherwise be a lot of contention on that shared variable.  \n  \n## Syntax  \n  \n```\ntemplate<typename T>\nclass combinable;\n```  \n  \n#### Parameters  \n `T`  \n The data type of the final merged result. The type must have a copy constructor and a default constructor.  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[combinable::combinable Constructor](#ctor)|Overloaded. Constructs a new `combinable` object.|  \n|[combinable::~combinable Destructor](#dtor)|Destroys a `combinable` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[combinable::clear Method](#clear)|Clears any intermediate computational results from a previous usage.|  \n|[combinable::combine Method](#combine)|Computes a final value from the set of thread-local sub-computations by calling the supplied combine functor.|  \n|[combinable::combine_each Method](#combine_each)|Computes a final value from the set of thread-local sub-computations by calling the supplied combine functor once per thread-local sub-computation. The final result is accumulated by the function object.|  \n|[combinable::local Method](#local)|Overloaded. Returns a reference to the thread-private sub-computation.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[combinable::operator= Operator](#operator_eq)|Assigns to a `combinable` object from another `combinable` object.|  \n  \n## Remarks  \n For more information, see [Parallel Containers and Objects](../../../parallel/concrt/parallel-containers-and-objects.md).  \n  \n## Inheritance Hierarchy  \n `combinable`  \n  \n## Requirements  \n **Header:** ppl.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"clear\"></a>  combinable::clear Method  \n Clears any intermediate computational results from a previous usage.  \n  \n```\nvoid clear();\n```  \n  \n##  <a name=\"ctor\"></a>  combinable::combinable Constructor  \n Constructs a new `combinable` object.  \n  \n```\ncombinable();\n\ntemplate <typename _Function>\nexplicit combinable(_Function _FnInitialize);\n\ncombinable(const combinable& _Copy);\n```  \n  \n### Parameters  \n `_Function`  \n The type of the initialization functor object.  \n  \n `_FnInitialize`  \n A function which will be called to initialize each new thread-private value of the type `T`. It must support a function call operator with the signature `T ()`.  \n  \n `_Copy`  \n An existing `combinable` object to be copied into this one.  \n  \n### Remarks  \n The first constructor initializes new elements with the default constructor for the type `T`.  \n  \n The second constructor initializes new elements using the initialization functor supplied as the `_FnInitialize` parameter.  \n  \n The third constructor is the copy constructor.  \n  \n##  <a name=\"dtor\"></a>  combinable::~combinable Destructor  \n Destroys a `combinable` object.  \n  \n```\n~combinable();\n```  \n  \n##  <a name=\"combine\"></a>  combinable::combine Method  \n Computes a final value from the set of thread-local sub-computations by calling the supplied combine functor.  \n  \n```\ntemplate<typename _Function>\nT combine(_Function _FnCombine) const;\n```  \n  \n### Parameters  \n `_Function`  \n The type of the function object that will be invoked to combine two thread-local sub-computations.  \n  \n `_FnCombine`  \n The functor that is used to combine the sub-computations. Its signature is `T (T, T)` or `T (const T&, const T&)`, and it must be associative and commutative.  \n  \n### Return Value  \n The final result of combining all the thread-private sub-computations.  \n  \n##  <a name=\"combine_each\"></a>  combinable::combine_each Method  \n Computes a final value from the set of thread-local sub-computations by calling the supplied combine functor once per thread-local sub-computation. The final result is accumulated by the function object.  \n  \n```\ntemplate<typename _Function>\nvoid combine_each(_Function _FnCombine) const;\n```  \n  \n### Parameters  \n `_Function`  \n The type of the function object that will be invoked to combine a single thread-local sub-computation.  \n  \n `_FnCombine`  \n The functor that is used to combine one sub-computation. Its signature is `void (T)` or `void (const T&)`, and must be associative and commutative.  \n  \n##  <a name=\"local\"></a>  combinable::local Method  \n Returns a reference to the thread-private sub-computation.  \n  \n```\nT& local();\n\nT& local(bool& _Exists);\n```  \n  \n### Parameters  \n `_Exists`  \n A reference to a boolean. The boolean value referenced by this argument will be set to `true` if the sub-computation already existed on this thread, and set to `false` if this was the first sub-computation on this thread.  \n  \n### Return Value  \n A reference to the thread-private sub-computation.  \n  \n##  <a name=\"operator_eq\"></a>  combinable::operator= Operator  \n Assigns to a `combinable` object from another `combinable` object.  \n  \n```\ncombinable& operator= (const combinable& _Copy);\n```  \n  \n### Parameters  \n `_Copy`  \n An existing `combinable` object to be copied into this one.  \n  \n### Return Value  \n A reference to this `combinable` object.  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)\n"}