{"nodes":[{"pos":[12,79],"content":"Using the CArchive &lt;&lt; and &gt;&gt; Operators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Using the CArchive <ph id=\"ph1\">&amp;lt;&amp;lt;</ph> and <ph id=\"ph2\">&amp;gt;&amp;gt;</ph> Operators | Microsoft Docs","pos":[0,67],"source":"Using the CArchive &lt;&lt; and &gt;&gt; Operators | Microsoft Docs"}]},{"content":"Using the CArchive <ph id=\"ph1\">&amp;lt;&amp;lt;</ph> and <ph id=\"ph2\">&amp;gt;&amp;gt;</ph> Operators","pos":[752,802],"source":"Using the CArchive &lt;&lt; and &gt;&gt; Operators"},{"pos":[814,927],"content":"provides &lt;<ph id=\"ph1\">\\&lt;</ph> and &gt;&gt; operators for writing and reading simple data types as well as <ph id=\"ph2\">`CObject`</ph>s to and from a file.","source":" provides <\\< and >> operators for writing and reading simple data types as well as `CObject`s to and from a file."},{"content":"To store an object in a file via an archive","pos":[938,981]},{"content":"The following example shows how to store an object in a file via an archive:","pos":[991,1067]},{"pos":[1089,1111],"content":"NVC_MFCSerialization#7"},{"content":"To load an object from a value previously stored in a file","pos":[1200,1258]},{"content":"The following example shows how to load an object from a value previously stored in a file:","pos":[1268,1359]},{"pos":[1381,1403],"content":"NVC_MFCSerialization#8"},{"content":"Usually, you store and load data to and from a file via an archive in the <ph id=\"ph1\">`Serialize`</ph> functions of <ph id=\"ph2\">`CObject`</ph>-derived classes, which you must have declared with the <bpt id=\"p1\">**</bpt>DECLARE_SERIALIZE<ept id=\"p1\">**</ept> macro.","pos":[1488,1680],"source":"Usually, you store and load data to and from a file via an archive in the `Serialize` functions of `CObject`-derived classes, which you must have declared with the **DECLARE_SERIALIZE** macro."},{"content":"A reference to a <ph id=\"ph1\">`CArchive`</ph> object is passed to your <ph id=\"ph2\">`Serialize`</ph> function.","pos":[1681,1755],"source":" A reference to a `CArchive` object is passed to your `Serialize` function."},{"content":"You call the <ph id=\"ph1\">`IsLoading`</ph> function of the <ph id=\"ph2\">`CArchive`</ph> object to determine whether the <ph id=\"ph3\">`Serialize`</ph> function has been called to load data from the file or store data to the file.","pos":[1756,1930],"source":" You call the `IsLoading` function of the `CArchive` object to determine whether the `Serialize` function has been called to load data from the file or store data to the file."},{"pos":[1937,2037],"content":"The <ph id=\"ph1\">`Serialize`</ph> function of a serializable <ph id=\"ph2\">`CObject`</ph>-derived class typically has the following form:","source":"The `Serialize` function of a serializable `CObject`-derived class typically has the following form:"},{"pos":[2055,2077],"content":"NVC_MFCSerialization#9"},{"content":"The above code template is exactly the same as the one AppWizard creates for the <ph id=\"ph1\">`Serialize`</ph> function of the document (a class derived from <bpt id=\"p1\">**</bpt>CDocument)<ept id=\"p1\">**</ept>.","pos":[2162,2317],"source":"The above code template is exactly the same as the one AppWizard creates for the `Serialize` function of the document (a class derived from **CDocument)**."},{"content":"This code template helps you write code that is easier to review, because the storing code and the loading code should always be parallel, as in the following example:","pos":[2318,2485]},{"pos":[2503,2526],"content":"NVC_MFCSerialization#10"},{"pos":[2611,2763],"content":"The library defines <bpt id=\"p1\">**</bpt><ph id=\"ph1\">&lt;\\&lt;</ph><ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt><ph id=\"ph2\">&gt;&gt;</ph><ept id=\"p2\">**</ept> operators for <ph id=\"ph3\">`CArchive`</ph> as the first operand and the following data types and class types as the second operand:","source":"The library defines **<\\<** and **>>** operators for `CArchive` as the first operand and the following data types and class types as the second operand:"},{"content":"SIZE and CSize","pos":[2800,2814]},{"content":"float","pos":[2819,2824]},{"content":"WORD","pos":[2833,2837]},{"pos":[2850,2863],"content":"<bpt id=\"p1\">**</bpt>POINT<ept id=\"p1\">**</ept> and","source":"**POINT** and "},{"content":"BYTE","pos":[2887,2891]},{"pos":[2901,2904],"content":"and"},{"content":"Double","pos":[2919,2925]},{"content":"LONG","pos":[2930,2934]},{"pos":[2945,2948],"content":"and"},{"content":"COleCurrency","pos":[2973,2985]},{"pos":[3049,3263],"content":"[!NOTE]\n Storing and loading `CObject`s via an archive requires extra consideration. For more information, see [Storing and Loading CObjects via an Archive](../mfc/storing-and-loading-cobjects-via-an-archive.md).","leadings":["","> "],"nodes":[{"content":" Storing and loading `CObject`s via an archive requires extra consideration. For more information, see [Storing and Loading CObjects via an Archive](../mfc/storing-and-loading-cobjects-via-an-archive.md).","pos":[8,212],"nodes":[{"content":"Storing and loading <ph id=\"ph1\">`CObject`</ph>s via an archive requires extra consideration.","pos":[1,76],"source":" Storing and loading `CObject`s via an archive requires extra consideration."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Storing and Loading CObjects via an Archive<ept id=\"p1\">](../mfc/storing-and-loading-cobjects-via-an-archive.md)</ept>.","pos":[77,204],"source":" For more information, see [Storing and Loading CObjects via an Archive](../mfc/storing-and-loading-cobjects-via-an-archive.md)."}]}]},{"content":"The <bpt id=\"p1\">**</bpt>CArchive &lt;<ph id=\"ph1\">\\&lt;</ph><ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt><ph id=\"ph2\">&gt;&gt;</ph><ept id=\"p2\">**</ept> operators always return a reference to the <ph id=\"ph3\">`CArchive`</ph> object, which is the first operand.","pos":[3270,3391],"source":"The **CArchive <\\<** and **>>** operators always return a reference to the `CArchive` object, which is the first operand."},{"content":"This enables you to chain the operators, as illustrated below:","pos":[3392,3454]},{"pos":[3472,3495],"content":"NVC_MFCSerialization#11"},{"content":"See Also","pos":[3582,3590]},{"content":"Serialization: Serializing an Object","pos":[3595,3631]}],"content":"---\ntitle: \"Using the CArchive &lt;&lt; and &gt;&gt; Operators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"CArchive\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"objects [C++], loading from previously stored values\"\n  - \"CArchive class, storing and loading objects\"\n  - \"CArchive class, operators\"\nms.assetid: 56aef326-02dc-4992-8282-f0a4b78a064e\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Using the CArchive &lt;&lt; and &gt;&gt; Operators\n`CArchive` provides <\\< and >> operators for writing and reading simple data types as well as `CObject`s to and from a file.  \n  \n#### To store an object in a file via an archive  \n  \n1.  The following example shows how to store an object in a file via an archive:  \n  \n     [!code-cpp[NVC_MFCSerialization#7](../mfc/codesnippet/cpp/using-the-carchive-output-and-input-operators_1.cpp)]  \n  \n#### To load an object from a value previously stored in a file  \n  \n1.  The following example shows how to load an object from a value previously stored in a file:  \n  \n     [!code-cpp[NVC_MFCSerialization#8](../mfc/codesnippet/cpp/using-the-carchive-output-and-input-operators_2.cpp)]  \n  \n Usually, you store and load data to and from a file via an archive in the `Serialize` functions of `CObject`-derived classes, which you must have declared with the **DECLARE_SERIALIZE** macro. A reference to a `CArchive` object is passed to your `Serialize` function. You call the `IsLoading` function of the `CArchive` object to determine whether the `Serialize` function has been called to load data from the file or store data to the file.  \n  \n The `Serialize` function of a serializable `CObject`-derived class typically has the following form:  \n  \n [!code-cpp[NVC_MFCSerialization#9](../mfc/codesnippet/cpp/using-the-carchive-output-and-input-operators_3.cpp)]  \n  \n The above code template is exactly the same as the one AppWizard creates for the `Serialize` function of the document (a class derived from **CDocument)**. This code template helps you write code that is easier to review, because the storing code and the loading code should always be parallel, as in the following example:  \n  \n [!code-cpp[NVC_MFCSerialization#10](../mfc/codesnippet/cpp/using-the-carchive-output-and-input-operators_4.cpp)]  \n  \n The library defines **<\\<** and **>>** operators for `CArchive` as the first operand and the following data types and class types as the second operand:  \n  \n||||  \n|-|-|-|  \n|`CObject*`|**SIZE and CSize**|**float**|  \n|**WORD**|`CString`|**POINT** and `CPoint`|  \n|`DWORD`|**BYTE**|`RECT` and `CRect`|  \n|**Double**|**LONG**|`CTime` and `CTimeSpan`|  \n|`Int`|**COleCurrency**|`COleVariant`|  \n|`COleDateTime`|`COleDateTimeSpan`||  \n  \n> [!NOTE]\n>  Storing and loading `CObject`s via an archive requires extra consideration. For more information, see [Storing and Loading CObjects via an Archive](../mfc/storing-and-loading-cobjects-via-an-archive.md).  \n  \n The **CArchive <\\<** and **>>** operators always return a reference to the `CArchive` object, which is the first operand. This enables you to chain the operators, as illustrated below:  \n  \n [!code-cpp[NVC_MFCSerialization#11](../mfc/codesnippet/cpp/using-the-carchive-output-and-input-operators_5.cpp)]  \n  \n## See Also  \n [Serialization: Serializing an Object](../mfc/serialization-serializing-an-object.md)\n\n"}