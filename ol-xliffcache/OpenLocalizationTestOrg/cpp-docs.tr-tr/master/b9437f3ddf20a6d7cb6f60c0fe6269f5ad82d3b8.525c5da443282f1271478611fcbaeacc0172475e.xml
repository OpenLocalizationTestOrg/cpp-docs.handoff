{"nodes":[{"pos":[12,43],"content":"weak_ptr Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"weak_ptr Class | Microsoft Docs","pos":[0,31]}]},{"pos":[742,756],"content":"weak_ptr Class","linkify":"weak_ptr Class","nodes":[{"content":"weak_ptr Class","pos":[0,14]}]},{"content":"Wraps a weakly linked pointer.","pos":[757,787]},{"pos":[796,802],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1393,1403],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type controlled by the weak pointer.","pos":[1415,1455]},{"pos":[1464,1471],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template class describes an object that points to a resource that is managed by one or more <bpt id=\"p1\">[</bpt>shared_ptr Class<ept id=\"p1\">](../standard-library/shared-ptr-class.md)</ept> objects.","pos":[1475,1639],"source":"The template class describes an object that points to a resource that is managed by one or more [shared_ptr Class](../standard-library/shared-ptr-class.md) objects."},{"content":"The <ph id=\"ph1\">`weak_ptr`</ph> objects that point to a resource do not affect the resource's reference count.","pos":[1640,1733],"source":" The `weak_ptr` objects that point to a resource do not affect the resource's reference count."},{"content":"Thus, when the last <ph id=\"ph1\">`shared_ptr`</ph> object that manages that resource is destroyed the resource will be freed, even if there are <ph id=\"ph2\">`weak_ptr`</ph> objects pointing to that resource.","pos":[1734,1905],"source":" Thus, when the last `shared_ptr` object that manages that resource is destroyed the resource will be freed, even if there are `weak_ptr` objects pointing to that resource."},{"content":"This is essential for avoiding cycles in data structures.","pos":[1906,1963]},{"content":"A <ph id=\"ph1\">`weak_ptr`</ph> object points to a resource if it was constructed from a <ph id=\"ph2\">`shared_ptr`</ph> object that owns that resource, if it was constructed from a <ph id=\"ph3\">`weak_ptr`</ph> object that points to that resource, or if that resource was assigned to it with <bpt id=\"p1\">[</bpt>operator=<ept id=\"p1\">](#weak_ptr__operator_eq)</ept>.","pos":[1970,2242],"source":"A `weak_ptr` object points to a resource if it was constructed from a `shared_ptr` object that owns that resource, if it was constructed from a `weak_ptr` object that points to that resource, or if that resource was assigned to it with [operator=](#weak_ptr__operator_eq)."},{"content":"A <ph id=\"ph1\">`weak_ptr`</ph> object does not provide direct access to the resource that it points to.","pos":[2243,2328],"source":" A `weak_ptr` object does not provide direct access to the resource that it points to."},{"content":"Code that needs to use the resource does so through a <ph id=\"ph1\">`shared_ptr`</ph> object that owns that resource, created by calling the member function <bpt id=\"p1\">[</bpt>lock<ept id=\"p1\">](#weak_ptr__lock)</ept>.","pos":[2329,2491],"source":" Code that needs to use the resource does so through a `shared_ptr` object that owns that resource, created by calling the member function [lock](#weak_ptr__lock)."},{"content":"A <ph id=\"ph1\">`weak_ptr`</ph> object has expired when the resource that it points to has been freed because all of the <ph id=\"ph2\">`shared_ptr`</ph> objects that own the resource have been destroyed.","pos":[2492,2657],"source":" A `weak_ptr` object has expired when the resource that it points to has been freed because all of the `shared_ptr` objects that own the resource have been destroyed."},{"content":"Calling <ph id=\"ph1\">`lock`</ph> on a <ph id=\"ph2\">`weak_ptr`</ph> object that has expired creates an empty shared_ptr object.","pos":[2658,2748],"source":" Calling `lock` on a `weak_ptr` object that has expired creates an empty shared_ptr object."},{"content":"An empty weak_ptr object does not point to any resources and has no control block.","pos":[2755,2837]},{"content":"Its member function <ph id=\"ph1\">`lock`</ph> returns an empty shared_ptr object.","pos":[2838,2900],"source":" Its member function `lock` returns an empty shared_ptr object."},{"content":"A cycle occurs when two or more resources controlled by <ph id=\"ph1\">`shared_ptr`</ph> objects hold mutually referencing <ph id=\"ph2\">`shared_ptr`</ph> objects.","pos":[2907,3031],"source":"A cycle occurs when two or more resources controlled by `shared_ptr` objects hold mutually referencing `shared_ptr` objects."},{"content":"For example, a circular linked list with three elements has a head node <ph id=\"ph1\">`N0`</ph>; that node holds a <ph id=\"ph2\">`shared_ptr`</ph> object that owns the next node, <ph id=\"ph3\">`N1`</ph>; that node holds a <ph id=\"ph4\">`shared_ptr`</ph> object that owns the next node, <ph id=\"ph5\">`N2`</ph>; that node, in turn, holds a <ph id=\"ph6\">`shared_ptr`</ph> object that owns the head node, <ph id=\"ph7\">`N0`</ph>, closing the cycle.","pos":[3032,3345],"source":" For example, a circular linked list with three elements has a head node `N0`; that node holds a `shared_ptr` object that owns the next node, `N1`; that node holds a `shared_ptr` object that owns the next node, `N2`; that node, in turn, holds a `shared_ptr` object that owns the head node, `N0`, closing the cycle."},{"content":"In this situation, none of the reference counts will ever become zero, and the nodes in the cycle will not be freed.","pos":[3346,3462]},{"content":"To eliminate the cycle, the last node <ph id=\"ph1\">`N2`</ph> should hold a <ph id=\"ph2\">`weak_ptr`</ph> object pointing to <ph id=\"ph3\">`N0`</ph> instead of a <ph id=\"ph4\">`shared_ptr`</ph> object.","pos":[3463,3588],"source":" To eliminate the cycle, the last node `N2` should hold a `weak_ptr` object pointing to `N0` instead of a `shared_ptr` object."},{"content":"Since the <ph id=\"ph1\">`weak_ptr`</ph> object does not own <ph id=\"ph2\">`N0`</ph> it doesn't affect <ph id=\"ph3\">`N0`</ph>'s reference count, and when the program's last reference to the head node is destroyed the nodes in the list will also be destroyed.","pos":[3589,3790],"source":" Since the `weak_ptr` object does not own `N0` it doesn't affect `N0`'s reference count, and when the program's last reference to the head node is destroyed the nodes in the list will also be destroyed."},{"pos":[3799,3806],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[3816,3828],"content":"Constructors","linkify":"Constructors","nodes":[{"content":"Constructors","pos":[0,12]}]},{"pos":[3849,3880],"content":"<bpt id=\"p1\">[</bpt>weak_ptr<ept id=\"p1\">](#weak_ptr__weak_ptr)</ept>","source":"[weak_ptr](#weak_ptr__weak_ptr)"},{"pos":[3881,3905],"content":"Constructs a <ph id=\"ph1\">`weak_ptr`</ph>.","source":"Constructs a `weak_ptr`."},{"pos":[3916,3923],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"pos":[3944,3983],"content":"<bpt id=\"p1\">[</bpt>element_type<ept id=\"p1\">](#weak_ptr__element_type)</ept>","source":"[element_type](#weak_ptr__element_type)"},{"content":"The type of the element.","pos":[3984,4008]},{"pos":[4013,4042],"content":"<bpt id=\"p1\">[</bpt>expired<ept id=\"p1\">](#weak_ptr__expired)</ept>","source":"[expired](#weak_ptr__expired)"},{"content":"Tests if ownership has expired.","pos":[4043,4074]},{"pos":[4079,4102],"content":"<bpt id=\"p1\">[</bpt>lock<ept id=\"p1\">](#weak_ptr__lock)</ept>","source":"[lock](#weak_ptr__lock)"},{"content":"Obtains exclusive ownership of a resource.","pos":[4103,4145]},{"pos":[4150,4189],"content":"<bpt id=\"p1\">[</bpt>owner_before<ept id=\"p1\">](#weak_ptr__owner_before)</ept>","source":"[owner_before](#weak_ptr__owner_before)"},{"pos":[4190,4278],"content":"Returns <ph id=\"ph1\">`true`</ph> if this <ph id=\"ph2\">`weak_ptr`</ph> is ordered before (or less than) the provided pointer.","source":"Returns `true` if this `weak_ptr` is ordered before (or less than) the provided pointer."},{"pos":[4283,4308],"content":"<bpt id=\"p1\">[</bpt>reset<ept id=\"p1\">](#weak_ptr__reset)</ept>","source":"[reset](#weak_ptr__reset)"},{"content":"Releases owned resource.","pos":[4309,4333]},{"pos":[4338,4361],"content":"<bpt id=\"p1\">[</bpt>swap<ept id=\"p1\">](#weak_ptr__swap)</ept>","source":"[swap](#weak_ptr__swap)"},{"pos":[4362,4391],"content":"Swaps two <ph id=\"ph1\">`weak_ptr`</ph> objects.","source":"Swaps two `weak_ptr` objects."},{"pos":[4396,4429],"content":"<bpt id=\"p1\">[</bpt>use_count<ept id=\"p1\">](#weak_ptr__use_count)</ept>","source":"[use_count](#weak_ptr__use_count)"},{"pos":[4430,4479],"content":"Counts number of designated <ph id=\"ph1\">`shared_ptr`</ph> objects.","source":"Counts number of designated `shared_ptr` objects."},{"pos":[4490,4499],"content":"Operators","linkify":"Operators","nodes":[{"content":"Operators","pos":[0,9]}]},{"pos":[4520,4555],"content":"<bpt id=\"p1\">[</bpt>operator=<ept id=\"p1\">](#weak_ptr__operator_eq)</ept>","source":"[operator=](#weak_ptr__operator_eq)"},{"content":"Replaces owned resource.","pos":[4556,4580]},{"pos":[4590,4602],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[4606,4627],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>memory&gt;","source":"**Header:** \\<memory>"},{"pos":[4634,4652],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[4662,4713],"content":"<bpt id=\"p1\">&lt;a name=\"weak_ptr__element_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  element_type","linkify":"<a name=\"weak_ptr__element_type\"></a>  element_type","source":"<a name=\"weak_ptr__element_type\"></a>  element_type"},{"content":"The type of the element.","pos":[4717,4741]},{"pos":[4793,4800],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4804,4858],"content":"The type is a synonym for the template parameter <ph id=\"ph1\">`Ty`</ph>.","source":"The type is a synonym for the template parameter `Ty`."},{"pos":[4868,4875],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5323,5364],"content":"<bpt id=\"p1\">&lt;a name=\"weak_ptr__expired\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  expired","linkify":"<a name=\"weak_ptr__expired\"></a>  expired","source":"<a name=\"weak_ptr__expired\"></a>  expired"},{"content":"Tests if ownership has expired.","pos":[5368,5399]},{"pos":[5446,5453],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5457,5534],"content":"The member function returns <ph id=\"ph1\">`true`</ph> if <ph id=\"ph2\">`*this`</ph> has expired, otherwise <ph id=\"ph3\">`false`</ph>.","source":"The member function returns `true` if `*this` has expired, otherwise `false`."},{"pos":[5544,5551],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6428,6463],"content":"<bpt id=\"p1\">&lt;a name=\"weak_ptr__lock\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  lock","linkify":"<a name=\"weak_ptr__lock\"></a>  lock","source":"<a name=\"weak_ptr__lock\"></a>  lock"},{"content":"Obtains exclusive ownership of a resource.","pos":[6467,6509]},{"pos":[6563,6570],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6574,6795],"content":"The member function returns an empty shared_ptr object if <ph id=\"ph1\">`*this`</ph> has expired; otherwise it returns a <bpt id=\"p1\">[</bpt>shared_ptr Class<ept id=\"p1\">](../standard-library/shared-ptr-class.md)</ept><ph id=\"ph2\">`&lt;Ty&gt;`</ph> object that owns the resource that <ph id=\"ph3\">`*this`</ph> points to.","source":"The member function returns an empty shared_ptr object if `*this` has expired; otherwise it returns a [shared_ptr Class](../standard-library/shared-ptr-class.md)`<Ty>` object that owns the resource that `*this` points to."},{"pos":[6805,6812],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7686,7733],"content":"<bpt id=\"p1\">&lt;a name=\"weak_ptr__operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator=","linkify":"<a name=\"weak_ptr__operator_eq\"></a>  operator=","source":"<a name=\"weak_ptr__operator_eq\"></a>  operator="},{"content":"Replaces owned resource.","pos":[7737,7761]},{"pos":[7977,7987],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type controlled by the argument shared/weak pointer.","pos":[8002,8058]},{"content":"The weak pointer to copy.","pos":[8073,8098]},{"content":"The shared pointer to copy.","pos":[8113,8140]},{"pos":[8150,8157],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The operators all release the resource currently pointed to by <ph id=\"ph1\">`*this`</ph> and assign ownership of the resource named by the operand sequence to <ph id=\"ph2\">`*this`</ph>.","pos":[8161,8310],"source":"The operators all release the resource currently pointed to by `*this` and assign ownership of the resource named by the operand sequence to `*this`."},{"content":"If an operator fails it leaves <ph id=\"ph1\">`*this`</ph> unchanged.","pos":[8311,8360],"source":" If an operator fails it leaves `*this` unchanged."},{"pos":[8370,8377],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9011,9062],"content":"<bpt id=\"p1\">&lt;a name=\"weak_ptr__owner_before\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  owner_before","linkify":"<a name=\"weak_ptr__owner_before\"></a>  owner_before","source":"<a name=\"weak_ptr__owner_before\"></a>  owner_before"},{"pos":[9066,9154],"content":"Returns <ph id=\"ph1\">`true`</ph> if this <ph id=\"ph2\">`weak_ptr`</ph> is ordered before (or less than) the provided pointer.","source":"Returns `true` if this `weak_ptr` is ordered before (or less than) the provided pointer."},{"pos":[9326,9336],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An <ph id=\"ph1\">`lvalue`</ph> reference to either a <ph id=\"ph2\">`shared_ptr`</ph> or a <ph id=\"ph3\">`weak_ptr`</ph>.","pos":[9349,9412],"source":" An `lvalue` reference to either a `shared_ptr` or a `weak_ptr`."},{"pos":[9422,9429],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9433,9513],"content":"The template member function returns <ph id=\"ph1\">`true`</ph> if <ph id=\"ph2\">`*this`</ph> is <ph id=\"ph3\">`ordered before``ptr`</ph>.","source":"The template member function returns `true` if `*this` is `ordered before``ptr`."},{"pos":[9523,9560],"content":"<bpt id=\"p1\">&lt;a name=\"weak_ptr__reset\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  reset","linkify":"<a name=\"weak_ptr__reset\"></a>  reset","source":"<a name=\"weak_ptr__reset\"></a>  reset"},{"content":"Releases owned resource.","pos":[9564,9588]},{"pos":[9627,9634],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9638,9751],"content":"The member function releases the resource pointed to by <ph id=\"ph1\">`*this`</ph> and converts <ph id=\"ph2\">`*this`</ph> to an empty weak_ptr object.","source":"The member function releases the resource pointed to by `*this` and converts `*this` to an empty weak_ptr object."},{"pos":[9761,9768],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10365,10400],"content":"<bpt id=\"p1\">&lt;a name=\"weak_ptr__swap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  swap","linkify":"<a name=\"weak_ptr__swap\"></a>  swap","source":"<a name=\"weak_ptr__swap\"></a>  swap"},{"pos":[10404,10433],"content":"Swaps two <ph id=\"ph1\">`weak_ptr`</ph> objects.","source":"Swaps two `weak_ptr` objects."},{"pos":[10483,10493],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The weak pointer to swap with.","pos":[10505,10535]},{"pos":[10545,10552],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The member function leaves the resource originally pointed to by <ph id=\"ph1\">`*this`</ph> subsequently pointed to by <ph id=\"ph2\">`wp`</ph>, and the resource originally pointed to by <ph id=\"ph3\">`wp`</ph> subsequently pointed to by <ph id=\"ph4\">`*this`</ph>.","pos":[10556,10744],"source":"The member function leaves the resource originally pointed to by `*this` subsequently pointed to by `wp`, and the resource originally pointed to by `wp` subsequently pointed to by `*this`."},{"content":"The function does not change the reference counts for the two resources and it does not throw any exceptions.","pos":[10745,10854]},{"pos":[10864,10871],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11805,11850],"content":"<bpt id=\"p1\">&lt;a name=\"weak_ptr__use_count\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  use_count","linkify":"<a name=\"weak_ptr__use_count\"></a>  use_count","source":"<a name=\"weak_ptr__use_count\"></a>  use_count"},{"pos":[11854,11903],"content":"Counts number of designated <ph id=\"ph1\">`shared_ptr`</ph> objects.","source":"Counts number of designated `shared_ptr` objects."},{"pos":[11952,11959],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11963,12070],"content":"The member function returns the number of <ph id=\"ph1\">`shared_ptr`</ph> objects that own the resource pointed to by <ph id=\"ph2\">`*this`</ph>.","source":"The member function returns the number of `shared_ptr` objects that own the resource pointed to by `*this`."},{"pos":[12080,12087],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12599,12642],"content":"<bpt id=\"p1\">&lt;a name=\"weak_ptr__weak_ptr\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  weak_ptr","linkify":"<a name=\"weak_ptr__weak_ptr\"></a>  weak_ptr","source":"<a name=\"weak_ptr__weak_ptr\"></a>  weak_ptr"},{"pos":[12646,12670],"content":"Constructs a <ph id=\"ph1\">`weak_ptr`</ph>.","source":"Constructs a `weak_ptr`."},{"pos":[12866,12876],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type controlled by the argument shared/weak pointer.","pos":[12891,12947]},{"content":"The weak pointer to copy.","pos":[12962,12987]},{"content":"The shared pointer to copy.","pos":[13002,13029]},{"pos":[13039,13046],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The constructors each construct an object that points to the resource named by the operand sequence.","pos":[13050,13150]},{"pos":[13160,13167],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13807,13815],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[13819,13878],"content":"<bpt id=\"p1\">[</bpt>shared_ptr Class<ept id=\"p1\">](../standard-library/shared-ptr-class.md)</ept>","source":"[shared_ptr Class](../standard-library/shared-ptr-class.md)"}],"content":"---\ntitle: \"weak_ptr Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.tr1.weak_ptr\"\n  - \"tr1.weak_ptr\"\n  - \"weak_ptr\"\n  - \"tr1::weak_ptr\"\n  - \"std::tr1::weak_ptr\"\n  - \"memory/std::tr1::weak_ptr\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"weak_ptr class [TR1]\"\n  - \"weak_ptr class\"\nms.assetid: 2db4afb2-c7be-46fc-9c20-34ec2f8cc7c2\ncaps.latest.revision: 22\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# weak_ptr Class\nWraps a weakly linked pointer.  \n  \n## Syntax  \n```    \nclass weak_ptr {  \n   public:  \n   typedef Ty element_type;  \n   weak_ptr();\n   weak_ptr(const weak_ptr&);\n   template <class Other>  \n   weak_ptr(const weak_ptr<Other>&);\n   template <class Other>  \n   weak_ptr(const shared_ptr<Other>&);\n   weak_ptr& operator=(const weak_ptr&);\n   template <class Other>  \n   weak_ptr& operator=(const weak_ptr<Other>&);\n   template <class Other>  \n   weak_ptr& operator=(shared_ptr<Other>&);\n   void swap(weak_ptr&);\n   void reset();\n   long use_count() const;\n   bool expired() const;\n   shared_ptr<Ty>  \n   lock() const;\n   };  \n```    \n#### Parameters  \n `Ty`  \n The type controlled by the weak pointer.  \n  \n## Remarks  \n The template class describes an object that points to a resource that is managed by one or more [shared_ptr Class](../standard-library/shared-ptr-class.md) objects. The `weak_ptr` objects that point to a resource do not affect the resource's reference count. Thus, when the last `shared_ptr` object that manages that resource is destroyed the resource will be freed, even if there are `weak_ptr` objects pointing to that resource. This is essential for avoiding cycles in data structures.  \n  \n A `weak_ptr` object points to a resource if it was constructed from a `shared_ptr` object that owns that resource, if it was constructed from a `weak_ptr` object that points to that resource, or if that resource was assigned to it with [operator=](#weak_ptr__operator_eq). A `weak_ptr` object does not provide direct access to the resource that it points to. Code that needs to use the resource does so through a `shared_ptr` object that owns that resource, created by calling the member function [lock](#weak_ptr__lock). A `weak_ptr` object has expired when the resource that it points to has been freed because all of the `shared_ptr` objects that own the resource have been destroyed. Calling `lock` on a `weak_ptr` object that has expired creates an empty shared_ptr object.  \n  \n An empty weak_ptr object does not point to any resources and has no control block. Its member function `lock` returns an empty shared_ptr object.  \n  \n A cycle occurs when two or more resources controlled by `shared_ptr` objects hold mutually referencing `shared_ptr` objects. For example, a circular linked list with three elements has a head node `N0`; that node holds a `shared_ptr` object that owns the next node, `N1`; that node holds a `shared_ptr` object that owns the next node, `N2`; that node, in turn, holds a `shared_ptr` object that owns the head node, `N0`, closing the cycle. In this situation, none of the reference counts will ever become zero, and the nodes in the cycle will not be freed. To eliminate the cycle, the last node `N2` should hold a `weak_ptr` object pointing to `N0` instead of a `shared_ptr` object. Since the `weak_ptr` object does not own `N0` it doesn't affect `N0`'s reference count, and when the program's last reference to the head node is destroyed the nodes in the list will also be destroyed.  \n  \n## Members  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[weak_ptr](#weak_ptr__weak_ptr)|Constructs a `weak_ptr`.|  \n  \n### Methods  \n  \n|||  \n|-|-|  \n|[element_type](#weak_ptr__element_type)|The type of the element.|  \n|[expired](#weak_ptr__expired)|Tests if ownership has expired.|  \n|[lock](#weak_ptr__lock)|Obtains exclusive ownership of a resource.|  \n|[owner_before](#weak_ptr__owner_before)|Returns `true` if this `weak_ptr` is ordered before (or less than) the provided pointer.|  \n|[reset](#weak_ptr__reset)|Releases owned resource.|  \n|[swap](#weak_ptr__swap)|Swaps two `weak_ptr` objects.|  \n|[use_count](#weak_ptr__use_count)|Counts number of designated `shared_ptr` objects.|  \n  \n### Operators  \n  \n|||  \n|-|-|  \n|[operator=](#weak_ptr__operator_eq)|Replaces owned resource.|  \n  \n## Requirements  \n **Header:** \\<memory>  \n  \n **Namespace:** std  \n  \n##  <a name=\"weak_ptr__element_type\"></a>  element_type  \n The type of the element.  \n  \n```  \ntypedef Ty element_type;  \n```  \n  \n### Remarks  \n The type is a synonym for the template parameter `Ty`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__memory__weak_ptr_element_type.cpp   \n// compile with: /EHsc   \n#include <memory>   \n#include <iostream>   \n  \nint main()   \n    {   \n    std::shared_ptr<int> sp0(new int(5));   \n    std::weak_ptr<int> wp0(sp0);   \n    std::weak_ptr<int>::element_type val = *wp0.lock();   \n  \n    std::cout << \"*wp0.lock() == \" << val << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n*wp0.lock() == 5  \n```  \n  \n##  <a name=\"weak_ptr__expired\"></a>  expired  \n Tests if ownership has expired.  \n  \n```  \nbool expired() const;\n```  \n  \n### Remarks  \n The member function returns `true` if `*this` has expired, otherwise `false`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__memory__weak_ptr_expired.cpp   \n// compile with: /EHsc   \n#include <memory>   \n#include <iostream>   \n\nstruct deleter\n{\n    void operator()(int *p)\n    {\n        delete p;\n    }\n};\n\nint main()\n{\n    std::weak_ptr<int> wp;\n\n    {\n        std::shared_ptr<int> sp(new int(10));\n        wp = sp;\n        std::cout << \"wp.expired() == \" << std::boolalpha\n            << wp.expired() << std::endl;\n        std::cout << \"*wp.lock() == \" << *wp.lock() << std::endl;\n    }\n\n    // check expired after sp is destroyed   \n    std::cout << \"wp.expired() == \" << std::boolalpha\n        << wp.expired() << std::endl;\n    std::cout << \"(bool)wp.lock() == \" << std::boolalpha\n        << (bool)wp.lock() << std::endl;\n\n    return (0);\n}\n  \n```  \n  \n```Output  \nwp.expired() == false  \n*wp.lock() == 10  \nwp.expired() == true  \n(bool)wp.lock() == false  \n```  \n  \n##  <a name=\"weak_ptr__lock\"></a>  lock  \n Obtains exclusive ownership of a resource.  \n  \n```  \nshared_ptr<Ty> lock() const;\n```  \n  \n### Remarks  \n The member function returns an empty shared_ptr object if `*this` has expired; otherwise it returns a [shared_ptr Class](../standard-library/shared-ptr-class.md)`<Ty>` object that owns the resource that `*this` points to.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__memory__weak_ptr_lock.cpp   \n// compile with: /EHsc   \n#include <memory>   \n#include <iostream>   \n\nstruct deleter\n{\n    void operator()(int *p)\n    {\n        delete p;\n    }\n};\n\nint main()\n{\n    std::weak_ptr<int> wp;\n\n    {\n        std::shared_ptr<int> sp(new int(10));\n        wp = sp;\n        std::cout << \"wp.expired() == \" << std::boolalpha\n            << wp.expired() << std::endl;\n        std::cout << \"*wp.lock() == \" << *wp.lock() << std::endl;\n    }\n\n    // check expired after sp is destroyed   \n    std::cout << \"wp.expired() == \" << std::boolalpha\n        << wp.expired() << std::endl;\n    std::cout << \"(bool)wp.lock() == \" << std::boolalpha\n        << (bool)wp.lock() << std::endl;\n\n    return (0);\n}\n  \n```  \n  \n```Output  \nwp.expired() == false  \n*wp.lock() == 10  \nwp.expired() == true  \n(bool)wp.lock() == false  \n```  \n  \n##  <a name=\"weak_ptr__operator_eq\"></a>  operator=  \n Replaces owned resource.  \n  \n```  \nweak_ptr& operator=(const weak_ptr& wp);\n\ntemplate <class Other>  \nweak_ptr& operator=(const weak_ptr<Other>& wp);\n\ntemplate <class Other>  \nweak_ptr& operator=(const shared_ptr<Other>& sp);\n```  \n  \n### Parameters  \n `Other`  \n The type controlled by the argument shared/weak pointer.  \n  \n `wp`  \n The weak pointer to copy.  \n  \n `sp`  \n The shared pointer to copy.  \n  \n### Remarks  \n The operators all release the resource currently pointed to by `*this` and assign ownership of the resource named by the operand sequence to `*this`. If an operator fails it leaves `*this` unchanged.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__memory__weak_ptr_operator_as.cpp   \n// compile with: /EHsc   \n#include <memory>   \n#include <iostream>   \n  \nint main()\n{\n    std::shared_ptr<int> sp0(new int(5));\n    std::weak_ptr<int> wp0(sp0);\n    std::cout << \"*wp0.lock() == \" << *wp0.lock() << std::endl;\n\n    std::shared_ptr<int> sp1(new int(10));\n    wp0 = sp1;\n    std::cout << \"*wp0.lock() == \" << *wp0.lock() << std::endl;\n\n    std::weak_ptr<int> wp1;\n    wp1 = wp0;\n    std::cout << \"*wp1.lock() == \" << *wp1.lock() << std::endl;\n\n    return (0);\n}\n  \n```  \n  \n```Output  \n*wp0.lock() == 5  \n*wp0.lock() == 10  \n*wp1.lock() == 10  \n```  \n  \n##  <a name=\"weak_ptr__owner_before\"></a>  owner_before  \n Returns `true` if this `weak_ptr` is ordered before (or less than) the provided pointer.  \n  \n```  \ntemplate <class Other>  \nbool owner_before(const shared_ptr<Other>& ptr);\n\ntemplate <class Other>  \nbool owner_before(const weak_ptr<Other>& ptr);\n```  \n  \n### Parameters  \n `ptr`  \n An `lvalue` reference to either a `shared_ptr` or a `weak_ptr`.  \n  \n### Remarks  \n The template member function returns `true` if `*this` is `ordered before``ptr`.  \n  \n##  <a name=\"weak_ptr__reset\"></a>  reset  \n Releases owned resource.  \n  \n```  \nvoid reset();\n```  \n  \n### Remarks  \n The member function releases the resource pointed to by `*this` and converts `*this` to an empty weak_ptr object.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__memory__weak_ptr_reset.cpp   \n// compile with: /EHsc   \n#include <memory>   \n#include <iostream>   \n  \nint main()\n{\n    std::shared_ptr<int> sp(new int(5));\n    std::weak_ptr<int> wp(sp);\n    std::cout << \"*wp.lock() == \" << *wp.lock() << std::endl;\n    std::cout << \"wp.expired() == \" << std::boolalpha\n        << wp.expired() << std::endl;\n\n    wp.reset();\n    std::cout << \"wp.expired() == \" << std::boolalpha\n        << wp.expired() << std::endl;\n\n    return (0);\n}\n\n```  \n  \n```Output  \n*wp.lock() == 5  \nwp.expired() == false  \nwp.expired() == true  \n```  \n  \n##  <a name=\"weak_ptr__swap\"></a>  swap  \n Swaps two `weak_ptr` objects.  \n  \n```  \nvoid swap(weak_ptr& wp);\n```  \n  \n### Parameters  \n `wp`  \n The weak pointer to swap with.  \n  \n### Remarks  \n The member function leaves the resource originally pointed to by `*this` subsequently pointed to by `wp`, and the resource originally pointed to by `wp` subsequently pointed to by `*this`. The function does not change the reference counts for the two resources and it does not throw any exceptions.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__memory__weak_ptr_swap.cpp   \n// compile with: /EHsc   \n#include <memory>   \n#include <iostream>   \n \nstruct deleter\n{\n    void operator()(int *p)\n    {\n        delete p;\n    }\n};\n\nint main()\n{\n    std::shared_ptr<int> sp1(new int(5));\n    std::shared_ptr<int> sp2(new int(10));\n    std::cout << \"*sp1 == \" << *sp1 << std::endl;\n\n    sp1.swap(sp2);\n    std::cout << \"*sp1 == \" << *sp1 << std::endl;\n\n    swap(sp1, sp2);\n    std::cout << \"*sp1 == \" << *sp1 << std::endl;\n    std::cout << std::endl;\n\n    std::weak_ptr<int> wp1(sp1);\n    std::weak_ptr<int> wp2(sp2);\n    std::cout << \"*wp1 == \" << *wp1.lock() << std::endl;\n\n    wp1.swap(wp2);\n    std::cout << \"*wp1 == \" << *wp1.lock() << std::endl;\n\n    swap(wp1, wp2);\n    std::cout << \"*wp1 == \" << *wp1.lock() << std::endl;\n\n    return (0);\n}\n\n```  \n  \n```Output  \n*sp1 == 5  \n*sp1 == 10  \n*sp1 == 5  \n  \n*wp1 == 5  \n*wp1 == 10  \n*wp1 == 5  \n```  \n  \n##  <a name=\"weak_ptr__use_count\"></a>  use_count  \n Counts number of designated `shared_ptr` objects.  \n  \n```  \nlong use_count() const;\n```  \n  \n### Remarks  \n The member function returns the number of `shared_ptr` objects that own the resource pointed to by `*this`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__memory__weak_ptr_use_count.cpp   \n// compile with: /EHsc   \n#include <memory>   \n#include <iostream>   \n\nint main()\n{\n    std::shared_ptr<int> sp1(new int(5));\n    std::weak_ptr<int> wp(sp1);\n    std::cout << \"wp.use_count() == \"\n        << wp.use_count() << std::endl;\n\n    std::shared_ptr<int> sp2(sp1);\n    std::cout << \"wp.use_count() == \"\n        << wp.use_count() << std::endl;\n\n    return (0);\n} \n  \n```  \n  \n```Output  \nwp.use_count() == 1  \nwp.use_count() == 2  \n```  \n  \n##  <a name=\"weak_ptr__weak_ptr\"></a>  weak_ptr  \n Constructs a `weak_ptr`.  \n  \n```  \nweak_ptr();\n\nweak_ptr(const weak_ptr& wp);\n\ntemplate <class Other>  \nweak_ptr(const weak_ptr<Other>& wp);\n\ntemplate <class Other>  \nweak_ptr(const shared_ptr<Other>& sp);\n```  \n  \n### Parameters  \n `Other`  \n The type controlled by the argument shared/weak pointer.  \n  \n `wp`  \n The weak pointer to copy.  \n  \n `sp`  \n The shared pointer to copy.  \n  \n### Remarks  \n The constructors each construct an object that points to the resource named by the operand sequence.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__memory__weak_ptr_construct.cpp   \n// compile with: /EHsc   \n#include <memory>   \n#include <iostream>   \n  \nint main()\n{\n    std::weak_ptr<int> wp0;\n    std::cout << \"wp0.expired() == \" << std::boolalpha\n        << wp0.expired() << std::endl;\n\n    std::shared_ptr<int> sp1(new int(5));\n    std::weak_ptr<int> wp1(sp1);\n    std::cout << \"*wp1.lock() == \"\n        << *wp1.lock() << std::endl;\n\n    std::weak_ptr<int> wp2(wp1);\n    std::cout << \"*wp2.lock() == \"\n        << *wp2.lock() << std::endl;\n\n    return (0);\n}\n  \n```  \n  \n```Output  \nwp0.expired() == true  \n*wp1.lock() == 5  \n*wp2.lock() == 5  \n```  \n  \n## See Also  \n [shared_ptr Class](../standard-library/shared-ptr-class.md)\n\n"}