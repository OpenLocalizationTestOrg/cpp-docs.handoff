{"nodes":[{"pos":[12,58],"content":"_dupenv_s_dbg, _wdupenv_s_dbg | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_dupenv_s_dbg, _wdupenv_s_dbg | Microsoft Docs","pos":[0,46]}]},{"content":"_dupenv_s_dbg, _wdupenv_s_dbg","pos":[1169,1198]},{"content":"Get a value from the current environment.","pos":[1199,1240]},{"content":"Versions of <bpt id=\"p1\">[</bpt>_dupenv_s, _wdupenv_s<ept id=\"p1\">](../../c-runtime-library/reference/dupenv-s-wdupenv-s.md)</ept> that allocate memory with <bpt id=\"p2\">[</bpt>_malloc_dbg<ept id=\"p2\">](../../c-runtime-library/reference/malloc-dbg.md)</ept> to provide additional debugging information.","pos":[1242,1468],"source":"  Versions of [_dupenv_s, _wdupenv_s](../../c-runtime-library/reference/dupenv-s-wdupenv-s.md) that allocate memory with [_malloc_dbg](../../c-runtime-library/reference/malloc-dbg.md) to provide additional debugging information."},{"content":"Syntax","pos":[1477,1483]},{"content":"Parameters","pos":[1865,1875]},{"content":"Buffer to store the variable's value.","pos":[1891,1928]},{"content":"Size of <ph id=\"ph1\">`buffer`</ph>.","pos":[1957,1974],"source":" Size of `buffer`."},{"content":"Environment variable name.","pos":[1994,2020]},{"content":"Requested type of the memory block: <ph id=\"ph1\">`_CLIENT_BLOCK`</ph> or <ph id=\"ph2\">`_NORMAL_BLOCK`</ph>.","pos":[2042,2113],"source":" Requested type of the memory block: `_CLIENT_BLOCK` or `_NORMAL_BLOCK`."},{"content":"Pointer to the name of the source file or <ph id=\"ph1\">`NULL`</ph>.","pos":[2134,2183],"source":" Pointer to the name of the source file or `NULL`."},{"content":"Line number in source file or <ph id=\"ph1\">`NULL`</ph>.","pos":[2206,2243],"source":" Line number in source file or `NULL`."},{"content":"Return Value","pos":[2252,2264]},{"content":"Zero on success, an error code on failure.","pos":[2268,2310]},{"content":"These functions validate their parameters; if <ph id=\"ph1\">`buffer`</ph> or <ph id=\"ph2\">`varname`</ph> is <ph id=\"ph3\">`NULL`</ph>, the invalid parameter handler is invoked as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2317,2525],"source":"These functions validate their parameters; if `buffer` or `varname` is `NULL`, the invalid parameter handler is invoked as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, the functions set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and return <ph id=\"ph3\">`EINVAL`</ph>.","pos":[2526,2621],"source":" If execution is allowed to continue, the functions set `errno` to `EINVAL` and return `EINVAL`."},{"pos":[2628,2755],"content":"If these functions cannot allocate enough memory, they set <ph id=\"ph1\">`buffer`</ph> to <ph id=\"ph2\">`NULL`</ph> and <ph id=\"ph3\">`numberOfElements`</ph> to 0, and return <ph id=\"ph4\">`ENOMEM`</ph>.","source":"If these functions cannot allocate enough memory, they set `buffer` to `NULL` and `numberOfElements` to 0, and return `ENOMEM`."},{"content":"Remarks","pos":[2764,2771]},{"content":"The <ph id=\"ph1\">`_dupenv_s_dbg`</ph> and <ph id=\"ph2\">`_wdupenv_s_dbg`</ph> functions are identical to <ph id=\"ph3\">`_dupenv_s`</ph> and <ph id=\"ph4\">`_wdupenv_s`</ph> except that, when <ph id=\"ph5\">`_DEBUG`</ph> is defined, these functions use the debug version of <bpt id=\"p1\">[</bpt>malloc<ept id=\"p1\">](../../c-runtime-library/reference/malloc.md)</ept>, <bpt id=\"p2\">[</bpt>_malloc_dbg<ept id=\"p2\">](../../c-runtime-library/reference/malloc-dbg.md)</ept>, to allocate memory for the value of the environment variable.","pos":[2775,3132],"source":"The `_dupenv_s_dbg` and `_wdupenv_s_dbg` functions are identical to `_dupenv_s` and `_wdupenv_s` except that, when `_DEBUG` is defined, these functions use the debug version of [malloc](../../c-runtime-library/reference/malloc.md), [_malloc_dbg](../../c-runtime-library/reference/malloc-dbg.md), to allocate memory for the value of the environment variable."},{"content":"For information on the debugging features of <ph id=\"ph1\">`_malloc_dbg`</ph>, see <bpt id=\"p1\">[</bpt>_malloc_dbg<ept id=\"p1\">](../../c-runtime-library/reference/malloc-dbg.md)</ept>.","pos":[3133,3260],"source":" For information on the debugging features of `_malloc_dbg`, see [_malloc_dbg](../../c-runtime-library/reference/malloc-dbg.md)."},{"content":"You do not need to call these functions explicitly in most cases.","pos":[3267,3332]},{"content":"Instead, you can define the flag <ph id=\"ph1\">`_CRTDBG_MAP_ALLOC`</ph>.","pos":[3333,3386],"source":" Instead, you can define the flag `_CRTDBG_MAP_ALLOC`."},{"content":"When <ph id=\"ph1\">`_CRTDBG_MAP_ALLOC`</ph> is defined, calls to <ph id=\"ph2\">`_dupenv_s`</ph> and <ph id=\"ph3\">`_wdupenv_s`</ph> are remapped to <ph id=\"ph4\">`_dupenv_s_dbg`</ph> and <ph id=\"ph5\">`_wdupenv_s_dbg`</ph>, respectively, with the <ph id=\"ph6\">`blockType`</ph> set to <ph id=\"ph7\">`_NORMAL_BLOCK`</ph>.","pos":[3387,3574],"source":" When `_CRTDBG_MAP_ALLOC` is defined, calls to `_dupenv_s` and `_wdupenv_s` are remapped to `_dupenv_s_dbg` and `_wdupenv_s_dbg`, respectively, with the `blockType` set to `_NORMAL_BLOCK`."},{"content":"Thus, you do not need to call these functions explicitly unless you want to mark the heap blocks as <ph id=\"ph1\">`_CLIENT_BLOCK`</ph>.","pos":[3575,3691],"source":" Thus, you do not need to call these functions explicitly unless you want to mark the heap blocks as `_CLIENT_BLOCK`."},{"content":"For more information on block types, see <bpt id=\"p1\">[</bpt>Types of blocks on the debug heap<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","pos":[3692,3816],"source":" For more information on block types, see [Types of blocks on the debug heap](/visualstudio/debugger/crt-debug-heap-details)."},{"content":"Generic-Text Routine Mappings","pos":[3826,3855]},{"content":"TCHAR.H routine","pos":[3862,3877]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[3878,3906],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[3907,3920]},{"content":"_UNICODE defined","pos":[3921,3937]},{"content":"Requirements","pos":[4125,4137]},{"content":"Routine","pos":[4144,4151]},{"content":"Required header","pos":[4152,4167]},{"content":"crtdbg.h&gt;","pos":[4230,4239],"source":"crtdbg.h>"},{"content":"crtdbg.h&gt;","pos":[4263,4272],"source":"crtdbg.h>"},{"pos":[4280,4404],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[4413,4420]},{"content":"Sample Output","pos":[5017,5030]},{"content":".NET Framework Equivalent","pos":[5150,5175]},{"content":"System::Environment::GetEnvironmentVariable","pos":[5180,5223]},{"content":"See Also","pos":[5322,5330]},{"content":"Process and Environment Control","pos":[5335,5366]},{"content":"Environmental Constants","pos":[5433,5456]},{"content":"getenv_s, _wgetenv_s","pos":[5515,5535]},{"content":"_putenv_s, _wputenv_s","pos":[5599,5620]}],"content":"---\ntitle: \"_dupenv_s_dbg, _wdupenv_s_dbg | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_dupenv_s_dbg\"\n  - \"_wdupenv_s_dbg\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_tdupenv_s_dbg\"\n  - \"_dupenv_s_dbg\"\n  - \"_wdupenv_s_dbg\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_tdupenv_s_dbg function\"\n  - \"dupenv_s_dbg function\"\n  - \"_wdupenv_s_dbg function\"\n  - \"environment variables\"\n  - \"tdupenv_s_dbg function\"\n  - \"wdupenv_s_dbg function\"\n  - \"_dupenv_s_dbg function\"\nms.assetid: e3d81148-e24e-46d0-a21d-fd87b5e6256c\ncaps.latest.revision: 9\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# _dupenv_s_dbg, _wdupenv_s_dbg\nGet a value from the current environment.  Versions of [_dupenv_s, _wdupenv_s](../../c-runtime-library/reference/dupenv-s-wdupenv-s.md) that allocate memory with [_malloc_dbg](../../c-runtime-library/reference/malloc-dbg.md) to provide additional debugging information.  \n  \n## Syntax  \n  \n```  \nerrno_t _dupenv_s_dbg(  \n   char **buffer,  \n   size_t *numberOfElements,  \n   const char *varname,  \n   int blockType,  \n   const char *filename,  \n   int linenumber  \n);  \nerrno_t _wdupenv_s_dbg(  \n   wchar_t **buffer,  \n   size_t * numberOfElements,  \n   const wchar_t *varname,  \n   int blockType,  \n   const char *filename,  \n   int linenumber  \n);  \n```  \n  \n#### Parameters  \n `buffer`  \n Buffer to store the variable's value.  \n  \n `numberOfElements`  \n Size of `buffer`.  \n  \n `varname`  \n Environment variable name.  \n  \n `blockType`  \n Requested type of the memory block: `_CLIENT_BLOCK` or `_NORMAL_BLOCK`.  \n  \n `filename`  \n Pointer to the name of the source file or `NULL`.  \n  \n `linenumber`  \n Line number in source file or `NULL`.  \n  \n## Return Value  \n Zero on success, an error code on failure.  \n  \n These functions validate their parameters; if `buffer` or `varname` is `NULL`, the invalid parameter handler is invoked as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, the functions set `errno` to `EINVAL` and return `EINVAL`.  \n  \n If these functions cannot allocate enough memory, they set `buffer` to `NULL` and `numberOfElements` to 0, and return `ENOMEM`.  \n  \n## Remarks  \n The `_dupenv_s_dbg` and `_wdupenv_s_dbg` functions are identical to `_dupenv_s` and `_wdupenv_s` except that, when `_DEBUG` is defined, these functions use the debug version of [malloc](../../c-runtime-library/reference/malloc.md), [_malloc_dbg](../../c-runtime-library/reference/malloc-dbg.md), to allocate memory for the value of the environment variable. For information on the debugging features of `_malloc_dbg`, see [_malloc_dbg](../../c-runtime-library/reference/malloc-dbg.md).  \n  \n You do not need to call these functions explicitly in most cases. Instead, you can define the flag `_CRTDBG_MAP_ALLOC`. When `_CRTDBG_MAP_ALLOC` is defined, calls to `_dupenv_s` and `_wdupenv_s` are remapped to `_dupenv_s_dbg` and `_wdupenv_s_dbg`, respectively, with the `blockType` set to `_NORMAL_BLOCK`. Thus, you do not need to call these functions explicitly unless you want to mark the heap blocks as `_CLIENT_BLOCK`. For more information on block types, see [Types of blocks on the debug heap](/visualstudio/debugger/crt-debug-heap-details).  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_tdupenv_s_dbg`|`_dupenv_s_dbg`|`_dupenv_s_dbg`|`_wdupenv_s_dbg`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_dupenv_s_dbg`|\\<crtdbg.h>|  \n|`_wdupenv_s_dbg`|\\<crtdbg.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_dupenv_s_dbg.c  \n#include  <stdlib.h>  \n#include <crtdbg.h>  \n  \nint main( void )  \n{  \n   char *pValue;  \n   size_t len;  \n   errno_t err = _dupenv_s_dbg( &pValue, &len, \"pathext\",  \n      _NORMAL_BLOCK, __FILE__, __LINE__ );  \n   if ( err ) return -1;  \n   printf( \"pathext = %s\\n\", pValue );  \n   free( pValue );  \n   err = _dupenv_s_dbg( &pValue, &len, \"nonexistentvariable\",  \n      _NORMAL_BLOCK, __FILE__, __LINE__ );  \n   if ( err ) return -1;  \n   printf( \"nonexistentvariable = %s\\n\", pValue );  \n   free( pValue ); // It's OK to call free with NULL  \n}  \n```  \n  \n## Sample Output  \n  \n```  \npathext = .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.pl  \nnonexistentvariable = (null)  \n```  \n  \n## .NET Framework Equivalent  \n [System::Environment::GetEnvironmentVariable](https://msdn.microsoft.com/en-us/library/system.environment.getenvironmentvariable.aspx)  \n  \n## See Also  \n [Process and Environment Control](../../c-runtime-library/process-and-environment-control.md)   \n [Environmental Constants](../../c-runtime-library/environmental-constants.md)   \n [getenv_s, _wgetenv_s](../../c-runtime-library/reference/getenv-s-wgetenv-s.md)   \n [_putenv_s, _wputenv_s](../../c-runtime-library/reference/putenv-s-wputenv-s.md)"}