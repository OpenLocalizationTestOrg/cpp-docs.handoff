{"nodes":[{"pos":[12,48],"content":"CDockablePane Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CDockablePane Class | Microsoft Docs","pos":[0,36]}]},{"pos":[613,632],"content":"CDockablePane Class","linkify":"CDockablePane Class","nodes":[{"content":"CDockablePane Class","pos":[0,19]}]},{"content":"Implements a pane that can either be docked in a dock site or included in a tabbed pane.","pos":[633,721]},{"pos":[730,736],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[797,804],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[814,833],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[840,844]},{"content":"Description","pos":[845,856]},{"pos":[894,955],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::CDockablePane<ept id=\"p1\">](#cdockablepane__cdockablepane)</ept>","source":"[CDockablePane::CDockablePane](#cdockablepane__cdockablepane)"},{"pos":[956,1008],"content":"Constructs and initializes a <ph id=\"ph1\">`CDockablePane`</ph> object.","source":"Constructs and initializes a `CDockablePane` object."},{"pos":[1019,1033],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1040,1044]},{"content":"Description","pos":[1045,1056]},{"pos":[1094,1157],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::AttachToTabWnd<ept id=\"p1\">](#cdockablepane__attachtotabwnd)</ept>","source":"[CDockablePane::AttachToTabWnd](#cdockablepane__attachtotabwnd)"},{"content":"Attaches a pane to another pane.","pos":[1158,1190]},{"content":"This creates a tabbed pane.","pos":[1191,1218]},{"pos":[1223,1288],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::CalcFixedLayout<ept id=\"p1\">](#cdockablepane__calcfixedlayout)</ept>","source":"[CDockablePane::CalcFixedLayout](#cdockablepane__calcfixedlayout)"},{"content":"Returns the size of the pane rectangle.","pos":[1289,1328]},{"pos":[1333,1404],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::CanAcceptMiniFrame<ept id=\"p1\">](#cdockablepane__canacceptminiframe)</ept>","source":"[CDockablePane::CanAcceptMiniFrame](#cdockablepane__canacceptminiframe)"},{"content":"Determines whether the specified mini frame can be docked to the pane.","pos":[1405,1475]},{"pos":[1480,1541],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::CanAcceptPane<ept id=\"p1\">](#cdockablepane__canacceptpane)</ept>","source":"[CDockablePane::CanAcceptPane](#cdockablepane__canacceptpane)"},{"content":"Determines whether another pane can be docked to the current pane.","pos":[1542,1608]},{"pos":[1613,1670],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::CanAutoHide<ept id=\"p1\">](#cdockablepane__canautohide)</ept>","source":"[CDockablePane::CanAutoHide](#cdockablepane__canautohide)"},{"content":"Determines whether the pane supports auto-hide mode.","pos":[1671,1723]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CBasePane::CanAutoHide<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__canautohide)</ept>.)","pos":[1724,1824],"source":" (Overrides [CBasePane::CanAutoHide](../../mfc/reference/cbasepane-class.md#cbasepane__canautohide).)"},{"pos":[1829,1890],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::CanBeAttached<ept id=\"p1\">](#cdockablepane__canbeattached)</ept>","source":"[CDockablePane::CanBeAttached](#cdockablepane__canbeattached)"},{"content":"Determines whether the current pane can be docked to another pane.","pos":[1891,1957]},{"pos":[1962,2043],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::ConvertToTabbedDocument<ept id=\"p1\">](#cdockablepane__converttotabbeddocument)</ept>","source":"[CDockablePane::ConvertToTabbedDocument](#cdockablepane__converttotabbeddocument)"},{"content":"Converts one or more dockable panes to MDI tabbed documents.","pos":[2044,2104]},{"pos":[2109,2162],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::CopyState<ept id=\"p1\">](#cdockablepane__copystate)</ept>","source":"[CDockablePane::CopyState](#cdockablepane__copystate)"},{"content":"Copies the state of a dockable pane.","pos":[2163,2199]},{"pos":[2204,2251],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::Create<ept id=\"p1\">](#cdockablepane__create)</ept>","source":"[CDockablePane::Create](#cdockablepane__create)"},{"pos":[2252,2326],"content":"Creates the Windows control and attaches it to the <ph id=\"ph1\">`CDockablePane`</ph> object.","source":"Creates the Windows control and attaches it to the `CDockablePane` object."},{"pos":[2331,2414],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::CreateDefaultPaneDivider<ept id=\"p1\">](#cdockablepane__createdefaultpanedivider)</ept>","source":"[CDockablePane::CreateDefaultPaneDivider](#cdockablepane__createdefaultpanedivider)"},{"content":"Creates a default divider for the pane as it is being docked to a frame window.","pos":[2415,2494]},{"pos":[2499,2550],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::CreateEx<ept id=\"p1\">](#cdockablepane__createex)</ept>","source":"[CDockablePane::CreateEx](#cdockablepane__createex)"},{"pos":[2551,2625],"content":"Creates the Windows control and attaches it to the <ph id=\"ph1\">`CDockablePane`</ph> object.","source":"Creates the Windows control and attaches it to the `CDockablePane` object."},{"pos":[2630,2697],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::CreateTabbedPane<ept id=\"p1\">](#cdockablepane__createtabbedpane)</ept>","source":"[CDockablePane::CreateTabbedPane](#cdockablepane__createtabbedpane)"},{"content":"Creates a tabbed pane from the current pane.","pos":[2698,2742]},{"pos":[2747,2816],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::DockPaneContainer<ept id=\"p1\">](#cdockablepane__dockpanecontainer)</ept>","source":"[CDockablePane::DockPaneContainer](#cdockablepane__dockpanecontainer)"},{"content":"Docks a container to the pane.","pos":[2817,2847]},{"pos":[2852,2919],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::DockPaneStandard<ept id=\"p1\">](#cdockablepane__dockpanestandard)</ept>","source":"[CDockablePane::DockPaneStandard](#cdockablepane__dockpanestandard)"},{"content":"Docks a pane by using outline (standard) docking.","pos":[2920,2969]},{"content":"Used internally.","pos":[3009,3025]},{"content":"To dock a pane, use <bpt id=\"p1\">[</bpt>CPane::DockPane<ept id=\"p1\">](../../mfc/reference/cpane-class.md#cpane__dockpane)</ept> or <bpt id=\"p2\">[</bpt>CDockablePane::DockToWindow<ept id=\"p2\">](#cdockablepane__docktowindow)</ept>.","pos":[3026,3179],"source":" To dock a pane, use [CPane::DockPane](../../mfc/reference/cpane-class.md#cpane__dockpane) or [CDockablePane::DockToWindow](#cdockablepane__docktowindow)."},{"pos":[3184,3249],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::DockToRecentPos<ept id=\"p1\">](#cdockablepane__docktorecentpos)</ept>","source":"[CDockablePane::DockToRecentPos](#cdockablepane__docktorecentpos)"},{"content":"Docks a pane to its stored recent docking position.","pos":[3250,3301]},{"pos":[3306,3365],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::DockToWindow<ept id=\"p1\">](#cdockablepane__docktowindow)</ept>","source":"[CDockablePane::DockToWindow](#cdockablepane__docktowindow)"},{"content":"Docks one docking pane to another docking pane.","pos":[3366,3413]},{"pos":[3418,3487],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::EnableAutohideAll<ept id=\"p1\">](#cdockablepane__enableautohideall)</ept>","source":"[CDockablePane::EnableAutohideAll](#cdockablepane__enableautohideall)"},{"content":"Enables or disables auto-hide mode for this pane together with other panes in the container.","pos":[3488,3580]},{"pos":[3585,3646],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::EnableGripper<ept id=\"p1\">](#cdockablepane__enablegripper)</ept>","source":"[CDockablePane::EnableGripper](#cdockablepane__enablegripper)"},{"content":"Shows or hides the caption (gripper).","pos":[3647,3684]},{"pos":[3689,3758],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::GetAHRestoredRect<ept id=\"p1\">](#cdockablepane__getahrestoredrect)</ept>","source":"[CDockablePane::GetAHRestoredRect](#cdockablepane__getahrestoredrect)"},{"content":"Specifies the position of the pane when visible in auto-hide mode.","pos":[3759,3825]},{"pos":[3830,3893],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::GetAHSlideMode<ept id=\"p1\">](#cdockablepane__getahslidemode)</ept>","source":"[CDockablePane::GetAHSlideMode](#cdockablepane__getahslidemode)"},{"content":"Retrieves the auto hide slide mode for the pane.","pos":[3894,3942]},{"content":"Used internally.","pos":[3982,3998]},{"content":"Used internally.","pos":[4039,4055]},{"pos":[4060,4127],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::GetCaptionHeight<ept id=\"p1\">](#cdockablepane__getcaptionheight)</ept>","source":"[CDockablePane::GetCaptionHeight](#cdockablepane__getcaptionheight)"},{"content":"Returns the height of the current caption.","pos":[4128,4170]},{"pos":[4175,4252],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::GetDefaultPaneDivider<ept id=\"p1\">](#cdockablepane__getdefaultpanedivider)</ept>","source":"[CDockablePane::GetDefaultPaneDivider](#cdockablepane__getdefaultpanedivider)"},{"content":"Returns the default pane divider for the pane's container.","pos":[4253,4311]},{"pos":[4316,4383],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::GetDockingStatus<ept id=\"p1\">](#cdockablepane__getdockingstatus)</ept>","source":"[CDockablePane::GetDockingStatus](#cdockablepane__getdockingstatus)"},{"content":"Determines the ability of a pane to be docked based on the provided pointer location.","pos":[4384,4469]},{"pos":[4474,4545],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::GetDragSensitivity<ept id=\"p1\">](#cdockablepane__getdragsensitivity)</ept>","source":"[CDockablePane::GetDragSensitivity](#cdockablepane__getdragsensitivity)"},{"content":"Returns the drag sensitivity of a docking pane.","pos":[4546,4593]},{"pos":[4598,4691],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::GetLastPercentInPaneContainer<ept id=\"p1\">](#cdockablepane__getlastpercentinpanecontainer)</ept>","source":"[CDockablePane::GetLastPercentInPaneContainer](#cdockablepane__getlastpercentinpanecontainer)"},{"content":"Retrieves the percentage of space that a pane occupies within its container.","pos":[4692,4768]},{"pos":[4773,4828],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::GetTabArea<ept id=\"p1\">](#cdockablepane__gettabarea)</ept>","source":"[CDockablePane::GetTabArea](#cdockablepane__gettabarea)"},{"content":"Retrieves the tab area for the pane.","pos":[4829,4865]},{"pos":[4870,4937],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::GetTabbedPaneRTC<ept id=\"p1\">](#cdockablepane__gettabbedpanertc)</ept>","source":"[CDockablePane::GetTabbedPaneRTC](#cdockablepane__gettabbedpanertc)"},{"content":"Returns the runtime class information about a tabbed window that is created when another pane docks to the current pane.","pos":[4938,5058]},{"pos":[5063,5128],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::HasAutoHideMode<ept id=\"p1\">](#cdockablepane__hasautohidemode)</ept>","source":"[CDockablePane::HasAutoHideMode](#cdockablepane__hasautohidemode)"},{"content":"Specifies whether a docking pane can be switched to auto-hide mode.","pos":[5129,5196]},{"pos":[5201,5250],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::HitTest<ept id=\"p1\">](#cdockablepane__hittest)</ept>","source":"[CDockablePane::HitTest](#cdockablepane__hittest)"},{"content":"Specifies the specific location in a pane where the user clicks a mouse.","pos":[5251,5323]},{"content":"Used internally.","pos":[5371,5387]},{"pos":[5392,5467],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::IsAutohideAllEnabled<ept id=\"p1\">](#cdockablepane__isautohideallenabled)</ept>","source":"[CDockablePane::IsAutohideAllEnabled](#cdockablepane__isautohideallenabled)"},{"content":"Indicates whether the docking pane and all other panes in the container can be placed in auto-hide mode.","pos":[5468,5572]},{"pos":[5577,5640],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::IsAutoHideMode<ept id=\"p1\">](#cdockablepane__isautohidemode)</ept>","source":"[CDockablePane::IsAutoHideMode](#cdockablepane__isautohidemode)"},{"content":"Determines whether a pane is in auto-hide mode.","pos":[5641,5688]},{"content":"Used internally.","pos":[5724,5740]},{"pos":[5745,5796],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::IsDocked<ept id=\"p1\">](#cdockablepane__isdocked)</ept>","source":"[CDockablePane::IsDocked](#cdockablepane__isdocked)"},{"content":"Determines whether the current pane is docked.","pos":[5797,5843]},{"pos":[5848,5923],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::IsHideInAutoHideMode<ept id=\"p1\">](#cdockablepane__ishideinautohidemode)</ept>","source":"[CDockablePane::IsHideInAutoHideMode](#cdockablepane__ishideinautohidemode)"},{"pos":[5924,6033],"content":"Determines the behavior of a pane that is in auto-hide mode if it is shown (or hidden) by calling <ph id=\"ph1\">`ShowPane`</ph>.","source":"Determines the behavior of a pane that is in auto-hide mode if it is shown (or hidden) by calling `ShowPane`."},{"pos":[6038,6131],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::IsInFloatingMultiPaneFrameWnd<ept id=\"p1\">](#cdockablepane__isinfloatingmultipaneframewnd)</ept>","source":"[CDockablePane::IsInFloatingMultiPaneFrameWnd](#cdockablepane__isinfloatingmultipaneframewnd)"},{"content":"Specifies whether the pane is in a multi-pane frame window.","pos":[6132,6191]},{"pos":[6196,6253],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::IsResizable<ept id=\"p1\">](#cdockablepane__isresizable)</ept>","source":"[CDockablePane::IsResizable](#cdockablepane__isresizable)"},{"content":"Specifies whether the pane is resizable.","pos":[6254,6294]},{"pos":[6299,6372],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::IsTabLocationBottom<ept id=\"p1\">](#cdockablepane__istablocationbottom)</ept>","source":"[CDockablePane::IsTabLocationBottom](#cdockablepane__istablocationbottom)"},{"content":"Specifies whether tabs are located at the top or bottom of the pane.","pos":[6373,6441]},{"pos":[6446,6499],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::IsTracked<ept id=\"p1\">](#cdockablepane__istracked)</ept>","source":"[CDockablePane::IsTracked](#cdockablepane__istracked)"},{"content":"Specifies whether a pane is being dragged by the user.","pos":[6500,6554]},{"pos":[6559,6612],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::IsVisible<ept id=\"p1\">](#cdockablepane__isvisible)</ept>","source":"[CDockablePane::IsVisible](#cdockablepane__isvisible)"},{"content":"Determines whether the current pane is visible.","pos":[6613,6660]},{"pos":[6665,6761],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::LoadState<ept id=\"p1\">](http://msdn.microsoft.com/en-us/96110136-4f46-4764-8a76-3b4abaf77917)</ept>","source":"[CDockablePane::LoadState](http://msdn.microsoft.com/en-us/96110136-4f46-4764-8a76-3b4abaf77917)"},{"content":"Used internally.","pos":[6762,6778]},{"pos":[6783,6856],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::OnAfterChangeParent<ept id=\"p1\">](#cdockablepane__onafterchangeparent)</ept>","source":"[CDockablePane::OnAfterChangeParent](#cdockablepane__onafterchangeparent)"},{"content":"Called by the framework when the parent of a pane has changed.","pos":[6857,6919]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPane::OnAfterChangeParent<ept id=\"p1\">](../../mfc/reference/cpane-class.md#cpane__onafterchangeparent)</ept>.)","pos":[6920,7024],"source":" (Overrides [CPane::OnAfterChangeParent](../../mfc/reference/cpane-class.md#cpane__onafterchangeparent).)"},{"pos":[7029,7112],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::OnAfterDockFromMiniFrame<ept id=\"p1\">](#cdockablepane__onafterdockfromminiframe)</ept>","source":"[CDockablePane::OnAfterDockFromMiniFrame](#cdockablepane__onafterdockfromminiframe)"},{"content":"Called by the framework when a floating docking bar docks at a frame window.","pos":[7113,7189]},{"pos":[7194,7269],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::OnBeforeChangeParent<ept id=\"p1\">](#cdockablepane__onbeforechangeparent)</ept>","source":"[CDockablePane::OnBeforeChangeParent](#cdockablepane__onbeforechangeparent)"},{"content":"Called by the framework when the parent of the pane is about to change.","pos":[7270,7341]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPane::OnBeforeChangeParent<ept id=\"p1\">](../../mfc/reference/cpane-class.md#cpane__onbeforechangeparent)</ept>.)","pos":[7342,7448],"source":" (Overrides [CPane::OnBeforeChangeParent](../../mfc/reference/cpane-class.md#cpane__onbeforechangeparent).)"},{"pos":[7453,7514],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::OnBeforeFloat<ept id=\"p1\">](#cdockablepane__onbeforefloat)</ept>","source":"[CDockablePane::OnBeforeFloat](#cdockablepane__onbeforefloat)"},{"content":"Called by the framework when a pane is about to float.","pos":[7515,7569]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPane::OnBeforeFloat<ept id=\"p1\">](../../mfc/reference/cpane-class.md#cpane__onbeforefloat)</ept>.)","pos":[7570,7662],"source":" (Overrides [CPane::OnBeforeFloat](../../mfc/reference/cpane-class.md#cpane__onbeforefloat).)"},{"pos":[7667,7760],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::RemoveFromDefaultPaneDividier<ept id=\"p1\">](#cdockablepane__removefromdefaultpanedividier)</ept>","source":"[CDockablePane::RemoveFromDefaultPaneDividier](#cdockablepane__removefromdefaultpanedividier)"},{"content":"The framework calls this method when a pane is being undocked.","pos":[7761,7823]},{"pos":[7828,7885],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::ReplacePane<ept id=\"p1\">](#cdockablepane__replacepane)</ept>","source":"[CDockablePane::ReplacePane](#cdockablepane__replacepane)"},{"content":"Replaces the pane with a specified pane.","pos":[7886,7926]},{"pos":[7931,8016],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::RestoreDefaultPaneDivider<ept id=\"p1\">](#cdockablepane__restoredefaultpanedivider)</ept>","source":"[CDockablePane::RestoreDefaultPaneDivider](#cdockablepane__restoredefaultpanedivider)"},{"content":"The framework calls this method as a pane is deserialized to restore the default pane divider.","pos":[8017,8111]},{"content":"Used internally.","pos":[8143,8159]},{"content":"Serializes the pane.","pos":[8191,8211]},{"content":"(Overrides <ph id=\"ph1\">`CBasePane::Serialize`</ph>.)","pos":[8212,8247],"source":" (Overrides `CBasePane::Serialize`.)"},{"pos":[8252,8317],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::SetAutoHideMode<ept id=\"p1\">](#cdockablepane__setautohidemode)</ept>","source":"[CDockablePane::SetAutoHideMode](#cdockablepane__setautohidemode)"},{"content":"Toggles the docking pane between visible and auto-hide mode.","pos":[8318,8378]},{"pos":[8383,8454],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::SetAutoHideParents<ept id=\"p1\">](#cdockablepane__setautohideparents)</ept>","source":"[CDockablePane::SetAutoHideParents](#cdockablepane__setautohideparents)"},{"content":"Sets the auto-hide button and auto-hide toolbar for the pane.","pos":[8455,8516]},{"content":"Used internally.","pos":[8560,8576]},{"pos":[8581,8674],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::SetLastPercentInPaneContainer<ept id=\"p1\">](#cdockablepane__setlastpercentinpanecontainer)</ept>","source":"[CDockablePane::SetLastPercentInPaneContainer](#cdockablepane__setlastpercentinpanecontainer)"},{"content":"Sets the percentage of space that a pane occupies within its container.","pos":[8675,8746]},{"content":"Used internally.","pos":[8782,8798]},{"pos":[8803,8896],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::SetRestoredDefaultPaneDivider<ept id=\"p1\">](#cdockablepane__setrestoreddefaultpanedivider)</ept>","source":"[CDockablePane::SetRestoredDefaultPaneDivider](#cdockablepane__setrestoreddefaultpanedivider)"},{"content":"Sets the restored default pane divider.","pos":[8897,8936]},{"pos":[8941,9008],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::SetTabbedPaneRTC<ept id=\"p1\">](#cdockablepane__settabbedpanertc)</ept>","source":"[CDockablePane::SetTabbedPaneRTC](#cdockablepane__settabbedpanertc)"},{"content":"Sets the runtime class information for a tabbed window that is created when two panes dock together.","pos":[9009,9109]},{"pos":[9114,9165],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::ShowPane<ept id=\"p1\">](#cdockablepane__showpane)</ept>","source":"[CDockablePane::ShowPane](#cdockablepane__showpane)"},{"content":"Shows or hides a pane.","pos":[9166,9188]},{"pos":[9193,9238],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::Slide<ept id=\"p1\">](#cdockablepane__slide)</ept>","source":"[CDockablePane::Slide](#cdockablepane__slide)"},{"content":"Shows or hides a pane with a sliding animation which displays only when the pane is in auto-hide mode.","pos":[9239,9341]},{"pos":[9346,9409],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::ToggleAutoHide<ept id=\"p1\">](#cdockablepane__toggleautohide)</ept>","source":"[CDockablePane::ToggleAutoHide](#cdockablepane__toggleautohide)"},{"content":"Toggles auto-hide mode.","pos":[9410,9433]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CPane::ToggleAutoHide<ept id=\"p1\">](../../mfc/reference/cpane-class.md#cpane__toggleautohide)</ept> .)","pos":[9434,9529],"source":" (Overrides [CPane::ToggleAutoHide](../../mfc/reference/cpane-class.md#cpane__toggleautohide) .)"},{"pos":[9534,9589],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::UndockPane<ept id=\"p1\">](#cdockablepane__undockpane)</ept>","source":"[CDockablePane::UndockPane](#cdockablepane__undockpane)"},{"content":"Undocks a pane from either the main frame window or a miniframe window container.","pos":[9590,9671]},{"content":"Used internally.","pos":[9711,9727]},{"content":"To set the auto-hide mode, use <bpt id=\"p1\">[</bpt>CDockablePane::SetAutoHideMode<ept id=\"p1\">](#cdockablepane__setautohidemode)</ept>","pos":[9728,9824],"source":" To set the auto-hide mode, use [CDockablePane::SetAutoHideMode](#cdockablepane__setautohidemode)"},{"pos":[9835,9852],"content":"Protected Methods","linkify":"Protected Methods","nodes":[{"content":"Protected Methods","pos":[0,17]}]},{"content":"Name","pos":[9859,9863]},{"content":"Description","pos":[9864,9875]},{"pos":[9913,9992],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::CheckAutoHideCondition<ept id=\"p1\">](#cdockablepane__checkautohidecondition)</ept>","source":"[CDockablePane::CheckAutoHideCondition](#cdockablepane__checkautohidecondition)"},{"content":"Determines whether the docking pane is hidden (in auto-hide mode).","pos":[9993,10059]},{"pos":[10064,10145],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::CheckStopSlideCondition<ept id=\"p1\">](#cdockablepane__checkstopslidecondition)</ept>","source":"[CDockablePane::CheckStopSlideCondition](#cdockablepane__checkstopslidecondition)"},{"content":"Determines when an auto-hide docking pane should stop sliding.","pos":[10146,10208]},{"pos":[10213,10270],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::DrawCaption<ept id=\"p1\">](#cdockablepane__drawcaption)</ept>","source":"[CDockablePane::DrawCaption](#cdockablepane__drawcaption)"},{"content":"Draws the docking pane caption (gripper).","pos":[10271,10312]},{"pos":[10317,10380],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::OnPressButtons<ept id=\"p1\">](#cdockablepane__onpressbuttons)</ept>","source":"[CDockablePane::OnPressButtons](#cdockablepane__onpressbuttons)"},{"pos":[10381,10486],"content":"Called when the user presses a caption button other than the <ph id=\"ph1\">`AFX_HTCLOSE`</ph> and <ph id=\"ph2\">`AFX_HTMAXBUTTON`</ph> buttons.","source":"Called when the user presses a caption button other than the `AFX_HTCLOSE` and `AFX_HTMAXBUTTON` buttons."},{"pos":[10491,10540],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::OnSlide<ept id=\"p1\">](#cdockablepane__onslide)</ept>","source":"[CDockablePane::OnSlide](#cdockablepane__onslide)"},{"content":"Called by the framework to render the auto-hide slide effect when the pane is either shown or hidden.","pos":[10541,10642]},{"pos":[10653,10665],"content":"Data Members","linkify":"Data Members","nodes":[{"content":"Data Members","pos":[0,12]}]},{"content":"Name","pos":[10672,10676]},{"content":"Description","pos":[10677,10688]},{"pos":[10726,10799],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::m_bDisableAnimation<ept id=\"p1\">](#cdockablepane__m_bdisableanimation)</ept>","source":"[CDockablePane::m_bDisableAnimation](#cdockablepane__m_bdisableanimation)"},{"content":"Specifies whether auto-hide animation of the dockable pane is disabled.","pos":[10800,10871]},{"pos":[10876,10953],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::m_bHideInAutoHideMode<ept id=\"p1\">](#cdockablepane__m_bhideinautohidemode)</ept>","source":"[CDockablePane::m_bHideInAutoHideMode](#cdockablepane__m_bhideinautohidemode)"},{"content":"Determines the behavior of the pane when the pane is in auto-hide mode.","pos":[10954,11025]},{"pos":[11030,11091],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::m_nSlideSteps<ept id=\"p1\">](#cdockablepane__m_nslidesteps)</ept>","source":"[CDockablePane::m_nSlideSteps](#cdockablepane__m_nslidesteps)"},{"content":"Specifies the animation speed of the pane when it is being shown or hidden when in auto-hide mode.","pos":[11092,11190]},{"pos":[11200,11207],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11211,11266],"content":"<ph id=\"ph1\">`CDockablePane`</ph> implements the following functionality:","source":"`CDockablePane` implements the following functionality:"},{"content":"Docking a pane to a main frame window.","pos":[11276,11314]},{"content":"Switching a pane to auto-hide mode.","pos":[11324,11359]},{"content":"Attaching a pane to a tabbed window.","pos":[11369,11405]},{"content":"Floating a pane in a miniframe window.","pos":[11415,11453]},{"content":"Docking a pane to another pane that is floating in a miniframe window.","pos":[11463,11533]},{"content":"Resizing a pane.","pos":[11543,11559]},{"content":"Loading and saving state for a docking pane.","pos":[11569,11613]},{"pos":[11625,11691],"content":"[!NOTE]\nState information is saved to the Windows registry.","leadings":["","    >  "],"nodes":[{"content":"State information is saved to the Windows registry.","pos":[8,59]}]},{"content":"Creating a pane with or without a caption.","pos":[11701,11743]},{"content":"The caption can have a text label and it can be filled with a gradient color.","pos":[11744,11821]},{"content":"Dragging a pane while displaying the contents of the pane","pos":[11831,11888]},{"content":"Dragging a pane while displaying a drag rectangle.","pos":[11898,11948]},{"content":"To use a docking pane in your application, derive your pane class from the <ph id=\"ph1\">`CDockablePane`</ph> class.","pos":[11955,12052],"source":"To use a docking pane in your application, derive your pane class from the `CDockablePane` class."},{"content":"Either embed the derived object into the main frame window object or into a window object that controls the instance of your pane.","pos":[12053,12183]},{"content":"Then call the <bpt id=\"p1\">[</bpt>CDockablePane::Create<ept id=\"p1\">](#cdockablepane__create)</ept> method or the <bpt id=\"p2\">[</bpt>CDockablePane::CreateEx<ept id=\"p2\">](#cdockablepane__createex)</ept> method when you process the <ph id=\"ph1\">`WM_CREATE`</ph> message in the main frame window.","pos":[12184,12385],"source":" Then call the [CDockablePane::Create](#cdockablepane__create) method or the [CDockablePane::CreateEx](#cdockablepane__createex) method when you process the `WM_CREATE` message in the main frame window."},{"content":"Finally, set up the pane object by calling <bpt id=\"p1\">[</bpt>CBasePane::EnableDocking<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__enabledocking)</ept>, <bpt id=\"p2\">[</bpt>CBasePane::DockPane<ept id=\"p2\">](../../mfc/reference/cbasepane-class.md#cbasepane__dockpane)</ept>, or <bpt id=\"p3\">[</bpt>CDockablePane::AttachToTabWnd<ept id=\"p3\">](#cdockablepane__attachtotabwnd)</ept>.","pos":[12386,12672],"source":" Finally, set up the pane object by calling [CBasePane::EnableDocking](../../mfc/reference/cbasepane-class.md#cbasepane__enabledocking), [CBasePane::DockPane](../../mfc/reference/cbasepane-class.md#cbasepane__dockpane), or [CDockablePane::AttachToTabWnd](#cdockablepane__attachtotabwnd)."},{"pos":[12681,12699],"content":"Customization Tips","linkify":"Customization Tips","nodes":[{"content":"Customization Tips","pos":[0,18]}]},{"pos":[12703,12755],"content":"The following tips apply to <ph id=\"ph1\">`CDockablePane`</ph> objects:","source":"The following tips apply to `CDockablePane` objects:"},{"content":"If you call <bpt id=\"p1\">[</bpt>CDockablePane::AttachToTabWnd<ept id=\"p1\">](#cdockablepane__attachtotabwnd)</ept> for two non-tabbed, dockable panes, a pointer to a tabbed window will be returned in the <ph id=\"ph1\">`ppTabbedControlBar`</ph> parameter.","pos":[12765,12961],"source":"If you call [CDockablePane::AttachToTabWnd](#cdockablepane__attachtotabwnd) for two non-tabbed, dockable panes, a pointer to a tabbed window will be returned in the `ppTabbedControlBar` parameter."},{"content":"You can continue to add tabs to the tabbed window by using this parameter.","pos":[12962,13036]},{"content":"The kind of tabbed pane that is created by <bpt id=\"p1\">[</bpt>CDockablePane::AttachToTabWnd<ept id=\"p1\">](#cdockablepane__attachtotabwnd)</ept> is determined by the <ph id=\"ph1\">`CDockablePane`</ph> object in the <ph id=\"ph2\">`pTabControlBarAttachTo`</ph> parameter.","pos":[13046,13239],"source":"The kind of tabbed pane that is created by [CDockablePane::AttachToTabWnd](#cdockablepane__attachtotabwnd) is determined by the `CDockablePane` object in the `pTabControlBarAttachTo` parameter."},{"content":"You can call <bpt id=\"p1\">[</bpt>CDockablePane::SetTabbedPaneRTC<ept id=\"p1\">](#cdockablepane__settabbedpanertc)</ept> to set the kind of tabbed pane that the <ph id=\"ph1\">`CDockablePane`</ph> will create.","pos":[13240,13389],"source":" You can call [CDockablePane::SetTabbedPaneRTC](#cdockablepane__settabbedpanertc) to set the kind of tabbed pane that the `CDockablePane` will create."},{"content":"The default type is determined by the <ph id=\"ph1\">`dwTabbedStyle`</ph> of <bpt id=\"p1\">[</bpt>CDockablePane::Create<ept id=\"p1\">](#cdockablepane__create)</ept> when you first create the <ph id=\"ph2\">`CDockablePane`</ph>.","pos":[13390,13537],"source":" The default type is determined by the `dwTabbedStyle` of [CDockablePane::Create](#cdockablepane__create) when you first create the `CDockablePane`."},{"content":"If <ph id=\"ph1\">`dwTabbedStyle`</ph> is AFX_CBRS_OUTLOOK_TABS the default type is <bpt id=\"p1\">[</bpt>CMFCOutlookBar Class<ept id=\"p1\">](../../mfc/reference/cmfcoutlookbar-class.md)</ept>; if <ph id=\"ph2\">`dwTabbedStyle`</ph> is AFX_CBRS_REGULAR_TABS the default type is <bpt id=\"p2\">[</bpt>CTabbedPane Class<ept id=\"p2\">](../../mfc/reference/ctabbedpane-class.md)</ept>.","pos":[13538,13797],"source":" If `dwTabbedStyle` is AFX_CBRS_OUTLOOK_TABS the default type is [CMFCOutlookBar Class](../../mfc/reference/cmfcoutlookbar-class.md); if `dwTabbedStyle` is AFX_CBRS_REGULAR_TABS the default type is [CTabbedPane Class](../../mfc/reference/ctabbedpane-class.md)."},{"content":"If you want to dock one dockable pane to another, call the <bpt id=\"p1\">[</bpt>CDockablePane::DockToWindow<ept id=\"p1\">](#cdockablepane__docktowindow)</ept> method.","pos":[13807,13933],"source":"If you want to dock one dockable pane to another, call the [CDockablePane::DockToWindow](#cdockablepane__docktowindow) method."},{"content":"The original pane must be docked somewhere before you call this method.","pos":[13934,14005]},{"content":"The member variable <bpt id=\"p1\">[</bpt>CDockablePane::m_bHideInAutoHideMode<ept id=\"p1\">](#cdockablepane__m_bhideinautohidemode)</ept> controls how dockable panes behave in auto hide mode when you call <bpt id=\"p2\">[</bpt>CDockablePane::ShowPane<ept id=\"p2\">](#cdockablepane__showpane)</ept>.","pos":[14015,14232],"source":"The member variable [CDockablePane::m_bHideInAutoHideMode](#cdockablepane__m_bhideinautohidemode) controls how dockable panes behave in auto hide mode when you call [CDockablePane::ShowPane](#cdockablepane__showpane)."},{"content":"If this member variable is set to <ph id=\"ph1\">`TRUE`</ph>, dockable panes and their auto hide buttons will be hidden.","pos":[14233,14333],"source":" If this member variable is set to `TRUE`, dockable panes and their auto hide buttons will be hidden."},{"content":"Otherwise, they will slide in and out.","pos":[14334,14372]},{"pos":[14382,14533],"content":"You can disable auto-hide animation by setting the <bpt id=\"p1\">[</bpt>CDockablePane::m_bDisableAnimation<ept id=\"p1\">](#cdockablepane__m_bdisableanimation)</ept> member variable to <ph id=\"ph1\">`TRUE`</ph>.","source":"You can disable auto-hide animation by setting the [CDockablePane::m_bDisableAnimation](#cdockablepane__m_bdisableanimation) member variable to `TRUE`."},{"pos":[14542,14549],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates how to configure a <ph id=\"ph1\">`CDockablePane`</ph> object by using various methods in the <ph id=\"ph2\">`CDockablePane`</ph> class.","pos":[14553,14684],"source":"The following example demonstrates how to configure a `CDockablePane` object by using various methods in the `CDockablePane` class."},{"content":"The example illustrates how to enable the auto-hide all feature for the dockable pane, enable the caption or the gripper, enable the auto-hide mode, show the pane, and animate a pane that is in auto-hide mode.","pos":[14685,14894]},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>Visual Studio Demo sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[14895,14985],"source":" This code snippet is part of the [Visual Studio Demo sample](../../visual-cpp-samples.md)."},{"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_VisualStudioDemo#27<ept id=\"p2\">](../../mfc/codesnippet/cpp/cdockablepane-class_1.cpp)</ept><ept id=\"p1\">]</ept>","pos":[14992,15085],"source":"[!code-cpp[NVC_MFC_VisualStudioDemo#27](../../mfc/codesnippet/cpp/cdockablepane-class_1.cpp)]"},{"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_VisualStudioDemo#28<ept id=\"p2\">](../../mfc/codesnippet/cpp/cdockablepane-class_2.cpp)</ept><ept id=\"p1\">]</ept>","pos":[15088,15181],"source":"[!code-cpp[NVC_MFC_VisualStudioDemo#28](../../mfc/codesnippet/cpp/cdockablepane-class_2.cpp)]"},{"pos":[15190,15211],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[15215,15262],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[15269,15322],"content":"<bpt id=\"p1\">[</bpt>CCmdTarget<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept>","source":"[CCmdTarget](../../mfc/reference/ccmdtarget-class.md)"},{"pos":[15329,15370],"content":"<bpt id=\"p1\">[</bpt>CWnd<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept>","source":"[CWnd](../../mfc/reference/cwnd-class.md)"},{"pos":[15377,15428],"content":"<bpt id=\"p1\">[</bpt>CBasePane<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md)</ept>","source":"[CBasePane](../../mfc/reference/cbasepane-class.md)"},{"pos":[15435,15478],"content":"<bpt id=\"p1\">[</bpt>CPane<ept id=\"p1\">](../../mfc/reference/cpane-class.md)</ept>","source":"[CPane](../../mfc/reference/cpane-class.md)"},{"pos":[15485,15544],"content":"<bpt id=\"p1\">[</bpt>CDockablePane<ept id=\"p1\">](../../mfc/reference/cdockablepane-class.md)</ept>","source":"[CDockablePane](../../mfc/reference/cdockablepane-class.md)"},{"pos":[15553,15565],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[15569,15598],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxDockablePane.h","source":"**Header:** afxDockablePane.h"},{"pos":[15608,15683],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__attachtotabwnd\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::AttachToTabWnd","linkify":"<a name=\"cdockablepane__attachtotabwnd\"></a>  CDockablePane::AttachToTabWnd","source":"<a name=\"cdockablepane__attachtotabwnd\"></a>  CDockablePane::AttachToTabWnd"},{"content":"Attaches the current pane to a target pane, creating a tabbed pane.","pos":[15687,15754]},{"pos":[15977,15987],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] [out] <ph id=\"ph1\">`pTabControlBarAttachTo`</ph>","pos":[15991,16026],"source":"[in] [out] `pTabControlBarAttachTo`"},{"content":"Specifies the target pane that the current pane attaches to.","pos":[16030,16090]},{"content":"The target pane must be a dockable pane.","pos":[16091,16131]},{"content":"[in] <ph id=\"ph1\">`dockMethod`</ph>","pos":[16138,16155],"source":"[in] `dockMethod`"},{"content":"Specifies the docking method.","pos":[16159,16188]},{"content":"[in] <ph id=\"ph1\">`bSetActive`</ph>","pos":[16195,16212],"source":"[in] `bSetActive`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to activate the tabbed pane after the attach operation; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","pos":[16215,16298],"source":" `TRUE` to activate the tabbed pane after the attach operation; otherwise, `FALSE`."},{"content":"[out] <ph id=\"ph1\">`ppTabbedControlBar`</ph>","pos":[16305,16331],"source":"[out] `ppTabbedControlBar`"},{"content":"Contains the tabbed pane that results from the attach operation.","pos":[16335,16399]},{"pos":[16409,16421],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to the current pane, if it is not a tabbed pane; otherwise a pointer to the tabbed pane that results from the attach operation.","pos":[16425,16562]},{"content":"The return value is <ph id=\"ph1\">`NULL`</ph> if the current pane cannot be attached, or if an error occurs.","pos":[16563,16652],"source":" The return value is `NULL` if the current pane cannot be attached, or if an error occurs."},{"pos":[16662,16669],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When one dockable pane attaches to another pane using this method, the following occurs:","pos":[16673,16761]},{"pos":[16771,16956],"content":"The framework checks whether the target pane <ph id=\"ph1\">`pTabControlBarAttachTo`</ph> is a regular docking pane or if it is derived from <bpt id=\"p1\">[</bpt>CBaseTabbedPane<ept id=\"p1\">](../../mfc/reference/cbasetabbedpane-class.md)</ept>.","source":"The framework checks whether the target pane `pTabControlBarAttachTo` is a regular docking pane or if it is derived from [CBaseTabbedPane](../../mfc/reference/cbasetabbedpane-class.md)."},{"content":"If the target pane is a tabbed pane, the framework adds the current pane to it as a tab.","pos":[16966,17054]},{"content":"If the target pane is a regular docking pane, the framework creates a tabbed pane.","pos":[17064,17146]},{"content":"The framework calls <ph id=\"ph1\">`pTabControlBarAttachTo-&gt;CreateTabbedPane`</ph>.","pos":[17160,17223],"source":"The framework calls `pTabControlBarAttachTo->CreateTabbedPane`."},{"content":"The style of the new tabbed pane depends on the <ph id=\"ph1\">`m_pTabbedControlBarRTC`</ph> member.","pos":[17224,17304],"source":" The style of the new tabbed pane depends on the `m_pTabbedControlBarRTC` member."},{"content":"By default, this member is set to the runtime class of <bpt id=\"p1\">[</bpt>CTabbedPane<ept id=\"p1\">](../../mfc/reference/ctabbedpane-class.md)</ept>.","pos":[17305,17416],"source":" By default, this member is set to the runtime class of [CTabbedPane](../../mfc/reference/ctabbedpane-class.md)."},{"content":"If you pass the <ph id=\"ph1\">`AFX_CBRS_OUTLOOK_TABS`</ph> style as the <ph id=\"ph2\">`dwTabbedStyle`</ph> parameter to the <bpt id=\"p1\">[</bpt>CDockablePane::Create<ept id=\"p1\">](#cdockablepane__create)</ept> method, the runtime class object is set to the runtime class of <bpt id=\"p2\">[</bpt>CMFCOutlookBar<ept id=\"p2\">](../../mfc/reference/cmfcoutlookbar-class.md)</ept>.","pos":[17417,17677],"source":" If you pass the `AFX_CBRS_OUTLOOK_TABS` style as the `dwTabbedStyle` parameter to the [CDockablePane::Create](#cdockablepane__create) method, the runtime class object is set to the runtime class of [CMFCOutlookBar](../../mfc/reference/cmfcoutlookbar-class.md)."},{"content":"You can change this member at any time to change the style of the new pane.","pos":[17678,17753]},{"pos":[17767,17972],"content":"When this method creates a tabbed pane, the framework replaces the pointer to <ph id=\"ph1\">`pTabControlBarAttachTo`</ph> (if the pane is docked or floating in a multi-miniframe window) with a pointer to the new tabbed pane.","source":"When this method creates a tabbed pane, the framework replaces the pointer to `pTabControlBarAttachTo` (if the pane is docked or floating in a multi-miniframe window) with a pointer to the new tabbed pane."},{"content":"The framework adds the <ph id=\"ph1\">`pTabControlBarAttachTo`</ph> pane to the tabbed pane as the first tab.","pos":[17986,18075],"source":"The framework adds the `pTabControlBarAttachTo` pane to the tabbed pane as the first tab."},{"content":"The framework then adds the current pane as a second tab.","pos":[18076,18133]},{"content":"If the current pane is derived from <ph id=\"ph1\">`CBaseTabbedPane`</ph>, all of its tabs are moved to <ph id=\"ph2\">`pTabControlBarAttachTo`</ph> and the current pane is destroyed.","pos":[18143,18286],"source":"If the current pane is derived from `CBaseTabbedPane`, all of its tabs are moved to `pTabControlBarAttachTo` and the current pane is destroyed."},{"content":"Therefore, be careful when you call this method, because a pointer to the current pane may be invalid when the method returns.","pos":[18287,18413]},{"pos":[18420,18516],"content":"If you attach one pane to another when building a docking layout, set <ph id=\"ph1\">`dockMethod`</ph> to <ph id=\"ph2\">`DM_SHOW`</ph>.","source":"If you attach one pane to another when building a docking layout, set `dockMethod` to `DM_SHOW`."},{"content":"You should dock the first pane before you attach another pane to it.","pos":[18523,18591]},{"pos":[18601,18678],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__calcfixedlayout\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::CalcFixedLayout","linkify":"<a name=\"cdockablepane__calcfixedlayout\"></a>  CDockablePane::CalcFixedLayout","source":"<a name=\"cdockablepane__calcfixedlayout\"></a>  CDockablePane::CalcFixedLayout"},{"content":"Returns the size of the pane rectangle.","pos":[18682,18721]},{"pos":[18815,18825],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bStretch`</ph>","pos":[18829,18844],"source":"[in] `bStretch`"},{"content":"Not used.","pos":[18848,18857]},{"content":"[in] <ph id=\"ph1\">`bHorz`</ph>","pos":[18864,18876],"source":"[in] `bHorz`"},{"content":"Not used.","pos":[18880,18889]},{"pos":[18899,18911],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[18915,18977],"content":"A <ph id=\"ph1\">`CSize`</ph> object that contains the size of the pane rectangle.","source":"A `CSize` object that contains the size of the pane rectangle."},{"pos":[18987,19070],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__canacceptminiframe\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::CanAcceptMiniFrame","linkify":"<a name=\"cdockablepane__canacceptminiframe\"></a>  CDockablePane::CanAcceptMiniFrame","source":"<a name=\"cdockablepane__canacceptminiframe\"></a>  CDockablePane::CanAcceptMiniFrame"},{"content":"Determines whether the specified mini-frame can be docked to the pane.","pos":[19074,19144]},{"pos":[19238,19248],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pMiniFrame`</ph>","pos":[19252,19269],"source":"[in] `pMiniFrame`"},{"content":"Pointer to a <ph id=\"ph1\">`CPaneFrameWnd`</ph> object.","pos":[19273,19309],"source":" Pointer to a `CPaneFrameWnd` object."},{"pos":[19319,19331],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19335,19404],"content":"<ph id=\"ph1\">`TRUE`</ph> if <ph id=\"ph2\">`pMiniFrame`</ph> can be docked to the pane; otherwise, <ph id=\"ph3\">`FALSE`</ph>.","source":"`TRUE` if `pMiniFrame` can be docked to the pane; otherwise, `FALSE`."},{"pos":[19414,19487],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__canacceptpane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::CanAcceptPane","linkify":"<a name=\"cdockablepane__canacceptpane\"></a>  CDockablePane::CanAcceptPane","source":"<a name=\"cdockablepane__canacceptpane\"></a>  CDockablePane::CanAcceptPane"},{"content":"Determines whether another pane can be docked to the current pane.","pos":[19491,19557]},{"pos":[19642,19652],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pBar`</ph>","pos":[19656,19667],"source":"[in] `pBar`"},{"content":"Specifies the pane to dock to the current pane.","pos":[19671,19718]},{"pos":[19728,19740],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19744,19820],"content":"<ph id=\"ph1\">`TRUE`</ph> if the specified pane can be docked to this pane; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the specified pane can be docked to this pane; otherwise, `FALSE`."},{"pos":[19830,19837],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework calls this method before a pane is docked to the current pane.","pos":[19841,19917]},{"content":"Override this function in a derived class to enable or disable docking to a specific pane.","pos":[19924,20014]},{"pos":[20021,20118],"content":"By default, this method returns <ph id=\"ph1\">`TRUE`</ph> if either <ph id=\"ph2\">`pBar`</ph> or its parent is of type <ph id=\"ph3\">`CDockablePane`</ph>.","source":"By default, this method returns `TRUE` if either `pBar` or its parent is of type `CDockablePane`."},{"pos":[20128,20197],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__canautohide\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::CanAutoHide","linkify":"<a name=\"cdockablepane__canautohide\"></a>  CDockablePane::CanAutoHide","source":"<a name=\"cdockablepane__canautohide\"></a>  CDockablePane::CanAutoHide"},{"content":"Determines whether the pane can auto-hide.","pos":[20201,20243]},{"pos":[20305,20317],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20321,20374],"content":"<ph id=\"ph1\">`TRUE`</ph> if the pane can auto-hide; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the pane can auto-hide; otherwise, `FALSE`."},{"pos":[20384,20391],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[20395,20475],"content":"<ph id=\"ph1\">`CDockablePane::CanAutoHide`</ph> returns <ph id=\"ph2\">`FALSE`</ph> in any of the following situations:","source":"`CDockablePane::CanAutoHide` returns `FALSE` in any of the following situations:"},{"content":"The pane has no parent.","pos":[20485,20508]},{"content":"The docking manager does not allow panes to auto-hide.","pos":[20518,20572]},{"content":"The pane is not docked.","pos":[20582,20605]},{"pos":[20615,20688],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__canbeattached\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::CanBeAttached","linkify":"<a name=\"cdockablepane__canbeattached\"></a>  CDockablePane::CanBeAttached","source":"<a name=\"cdockablepane__canbeattached\"></a>  CDockablePane::CanBeAttached"},{"content":"Determines whether the current pane can be docked to another pane.","pos":[20692,20758]},{"pos":[20822,20834],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20838,20944],"content":"<ph id=\"ph1\">`TRUE`</ph> if the dockable pane can be docked to another pane or to the main frame window; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the dockable pane can be docked to another pane or to the main frame window; otherwise, `FALSE`."},{"pos":[20954,20961],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, this method always returns <ph id=\"ph1\">`TRUE`</ph>.","pos":[20965,21011],"source":"By default, this method always returns `TRUE`."},{"content":"Override this method in a derived class to enable or disable docking without calling <bpt id=\"p1\">[</bpt>CBasePane::EnableDocking<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__enabledocking)</ept>.","pos":[21012,21189],"source":" Override this method in a derived class to enable or disable docking without calling [CBasePane::EnableDocking](../../mfc/reference/cbasepane-class.md#cbasepane__enabledocking)."},{"pos":[21199,21272],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__cdockablepane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::CDockablePane","linkify":"<a name=\"cdockablepane__cdockablepane\"></a>  CDockablePane::CDockablePane","source":"<a name=\"cdockablepane__cdockablepane\"></a>  CDockablePane::CDockablePane"},{"pos":[21276,21372],"content":"Constructs and initializes a <bpt id=\"p1\">[</bpt>CDockablePane<ept id=\"p1\">](../../mfc/reference/cdockablepane-class.md)</ept> object.","source":"Constructs and initializes a [CDockablePane](../../mfc/reference/cdockablepane-class.md) object."},{"pos":[21414,21421],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[21425,21590],"content":"After you construct a dockable pane object, call <bpt id=\"p1\">[</bpt>CDockablePane::Create<ept id=\"p1\">](#cdockablepane__create)</ept> or <bpt id=\"p2\">[</bpt>CDockablePane::CreateEx<ept id=\"p2\">](#cdockablepane__createex)</ept> to create it.","source":"After you construct a dockable pane object, call [CDockablePane::Create](#cdockablepane__create) or [CDockablePane::CreateEx](#cdockablepane__createex) to create it."},{"pos":[21600,21693],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__converttotabbeddocument\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::ConvertToTabbedDocument","linkify":"<a name=\"cdockablepane__converttotabbeddocument\"></a>  CDockablePane::ConvertToTabbedDocument","source":"<a name=\"cdockablepane__converttotabbeddocument\"></a>  CDockablePane::ConvertToTabbedDocument"},{"content":"Converts one or more dockable panes to MDI tabbed documents.","pos":[21697,21757]},{"pos":[21848,21858],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bActiveTabOnly`</ph>","pos":[21862,21883],"source":"[in] `bActiveTabOnly`"},{"content":"When you convert a <ph id=\"ph1\">`CTabbedPane`</ph>, specify <ph id=\"ph2\">`TRUE`</ph> to convert only the active tab.","pos":[21887,21967],"source":" When you convert a `CTabbedPane`, specify `TRUE` to convert only the active tab."},{"content":"Specify <ph id=\"ph1\">`FALSE`</ph> to convert all tabs in the pane.","pos":[21968,22016],"source":" Specify `FALSE` to convert all tabs in the pane."},{"pos":[22026,22117],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__checkautohidecondition\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::CheckAutoHideCondition","linkify":"<a name=\"cdockablepane__checkautohidecondition\"></a>  CDockablePane::CheckAutoHideCondition","source":"<a name=\"cdockablepane__checkautohidecondition\"></a>  CDockablePane::CheckAutoHideCondition"},{"content":"Determines whether the docking pane is hidden (also known as autohide mode).","pos":[22121,22197]},{"pos":[22261,22273],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22277,22333],"content":"<ph id=\"ph1\">`TRUE`</ph> if the hide condition is met; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the hide condition is met; otherwise, `FALSE`."},{"pos":[22343,22350],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework uses a timer to periodically check whether to hide an autohide dockable pane.","pos":[22354,22445]},{"content":"The method returns <ph id=\"ph1\">`TRUE`</ph> when the pane is not active, the pane is not being resized, and the mouse pointer is not over the pane.","pos":[22446,22575],"source":" The method returns `TRUE` when the pane is not active, the pane is not being resized, and the mouse pointer is not over the pane."},{"pos":[22582,22705],"content":"If all the previous conditions are met, the framework calls <bpt id=\"p1\">[</bpt>CDockablePane::Slide<ept id=\"p1\">](#cdockablepane__slide)</ept> to hide the pane.","source":"If all the previous conditions are met, the framework calls [CDockablePane::Slide](#cdockablepane__slide) to hide the pane."},{"pos":[22715,22808],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__checkstopslidecondition\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::CheckStopSlideCondition","linkify":"<a name=\"cdockablepane__checkstopslidecondition\"></a>  CDockablePane::CheckStopSlideCondition","source":"<a name=\"cdockablepane__checkstopslidecondition\"></a>  CDockablePane::CheckStopSlideCondition"},{"content":"Determines when an autohide docking pane should stop sliding.","pos":[22812,22873]},{"pos":[22953,22963],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bDirection`</ph>","pos":[22967,22984],"source":"[in] `bDirection`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> if the pane is visible; <ph id=\"ph2\">`FALSE`</ph> if the pane is hidden.","pos":[22987,23049],"source":" `TRUE` if the pane is visible; `FALSE` if the pane is hidden."},{"pos":[23059,23071],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[23075,23131],"content":"<ph id=\"ph1\">`TRUE`</ph> if the stop condition is met; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the stop condition is met; otherwise, `FALSE`."},{"pos":[23141,23148],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When a dockable pane is set to autohide mode, the framework uses sliding effects to show or hide the pane.","pos":[23152,23258]},{"content":"The framework calls this function when the pane is sliding.","pos":[23259,23318]},{"content":"<ph id=\"ph1\">`CheckStopSlideCondition`</ph> returns <ph id=\"ph2\">`TRUE`</ph> when the pane is fully visible or when it is fully hidden.","pos":[23319,23418],"source":"`CheckStopSlideCondition` returns `TRUE` when the pane is fully visible or when it is fully hidden."},{"content":"Override this method in a derived class to implement custom autohide effects.","pos":[23425,23502]},{"pos":[23512,23577],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__copystate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::CopyState","linkify":"<a name=\"cdockablepane__copystate\"></a>  CDockablePane::CopyState","source":"<a name=\"cdockablepane__copystate\"></a>  CDockablePane::CopyState"},{"content":"Copies the state of a dockable pane.","pos":[23581,23617]},{"pos":[23690,23700],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pOrgBar`</ph>","pos":[23704,23718],"source":"[in] `pOrgBar`"},{"content":"A pointer to a dockable pane.","pos":[23722,23751]},{"pos":[23761,23768],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[23772,23882],"content":"<ph id=\"ph1\">`CDockablePane::CopyState`</ph> copies the state of <ph id=\"ph2\">`pOrgBar`</ph> to the current pane by calling the following methods:","source":"`CDockablePane::CopyState` copies the state of `pOrgBar` to the current pane by calling the following methods:"},{"pos":[23890,23961],"content":"<bpt id=\"p1\">[</bpt>CPane::CopyState<ept id=\"p1\">](../../mfc/reference/cpane-class.md#cpane__copystate)</ept>","source":"[CPane::CopyState](../../mfc/reference/cpane-class.md#cpane__copystate)"},{"pos":[23969,24038],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::GetAHRestoredRect<ept id=\"p1\">](#cdockablepane__getahrestoredrect)</ept>","source":"[CDockablePane::GetAHRestoredRect](#cdockablepane__getahrestoredrect)"},{"pos":[24046,24109],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::GetAHSlideMode<ept id=\"p1\">](#cdockablepane__getahslidemode)</ept>","source":"[CDockablePane::GetAHSlideMode](#cdockablepane__getahslidemode)"},{"pos":[24117,24210],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::GetLastPercentInPaneContainer<ept id=\"p1\">](#cdockablepane__getlastpercentinpanecontainer)</ept>","source":"[CDockablePane::GetLastPercentInPaneContainer](#cdockablepane__getlastpercentinpanecontainer)"},{"pos":[24218,24293],"content":"<bpt id=\"p1\">[</bpt>CDockablePane::IsAutohideAllEnabled<ept id=\"p1\">](#cdockablepane__isautohideallenabled)</ept>","source":"[CDockablePane::IsAutohideAllEnabled](#cdockablepane__isautohideallenabled)"},{"pos":[24303,24362],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__create\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::Create","linkify":"<a name=\"cdockablepane__create\"></a>  CDockablePane::Create","source":"<a name=\"cdockablepane__create\"></a>  CDockablePane::Create"},{"pos":[24366,24484],"content":"Creates the Windows control and attaches it to the <bpt id=\"p1\">[</bpt>CDockablePane<ept id=\"p1\">](../../mfc/reference/cdockablepane-class.md)</ept> object.","source":"Creates the Windows control and attaches it to the [CDockablePane](../../mfc/reference/cdockablepane-class.md) object."},{"pos":[25146,25156],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`lpszCaption`</ph>","pos":[25160,25178],"source":"[in] `lpszCaption`"},{"content":"Specifies the window name.","pos":[25182,25208]},{"content":"[in] [out] <ph id=\"ph1\">`pParentWnd`</ph>","pos":[25215,25238],"source":"[in] [out] `pParentWnd`"},{"content":"Specifies the parent window.","pos":[25242,25270]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[25277,25288],"source":"[in] `rect`"},{"content":"Specifies the size and position of the window, in client coordinates of <ph id=\"ph1\">`pParentWnd`</ph>.","pos":[25292,25377],"source":" Specifies the size and position of the window, in client coordinates of `pParentWnd`."},{"content":"[in] <ph id=\"ph1\">`bHasGripper`</ph>","pos":[25384,25402],"source":"[in] `bHasGripper`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to create the pane with a caption; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","pos":[25405,25467],"source":" `TRUE` to create the pane with a caption; otherwise, `FALSE`."},{"content":"[in] <ph id=\"ph1\">`nID`</ph>","pos":[25474,25484],"source":"[in] `nID`"},{"content":"Specifies the ID of the child window.","pos":[25488,25525]},{"content":"This value must be unique if you want to save docking state for this docking pane.","pos":[25526,25608]},{"content":"[in] <ph id=\"ph1\">`dwStyle`</ph>","pos":[25615,25629],"source":"[in] `dwStyle`"},{"content":"Specifies the window style attributes.","pos":[25633,25671]},{"content":"[in] <ph id=\"ph1\">`dwTabbedStyle`</ph>","pos":[25678,25698],"source":"[in] `dwTabbedStyle`"},{"content":"Specifies the tabbed style of a tabbed window that is created when the user drags a pane on the caption of this pane.","pos":[25702,25819]},{"content":"[in] <ph id=\"ph1\">`dwControlBarStyle`</ph>","pos":[25826,25850],"source":"[in] `dwControlBarStyle`"},{"content":"Specifies additional style attributes.","pos":[25854,25892]},{"content":"[in] [out] <ph id=\"ph1\">`pContext`</ph>","pos":[25899,25920],"source":"[in] [out] `pContext`"},{"content":"Specifies the create context of the window.","pos":[25924,25967]},{"content":"[in] <ph id=\"ph1\">`lpszWindowName`</ph>","pos":[25974,25995],"source":"[in] `lpszWindowName`"},{"content":"Specifies the window name.","pos":[25999,26025]},{"content":"[in] <ph id=\"ph1\">`sizeDefault`</ph>","pos":[26032,26050],"source":"[in] `sizeDefault`"},{"content":"Specifies the size of the window.","pos":[26054,26087]},{"pos":[26097,26109],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[26113,26185],"content":"<ph id=\"ph1\">`TRUE`</ph> if the dockable pane is successfully created; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the dockable pane is successfully created; otherwise, `FALSE`."},{"pos":[26195,26202],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[26206,26275],"content":"Creates a Windows pane and attaches it to the <ph id=\"ph1\">`CDockablePane`</ph> object.","source":"Creates a Windows pane and attaches it to the `CDockablePane` object."},{"content":"If the <ph id=\"ph1\">`dwStyle`</ph> window style has the <ph id=\"ph2\">`CBRS_FLOAT_MULTI`</ph> flag, the miniframe window can float with other panes in the miniframe window.","pos":[26282,26417],"source":"If the `dwStyle` window style has the `CBRS_FLOAT_MULTI` flag, the miniframe window can float with other panes in the miniframe window."},{"content":"By default, docking panes can only float individually.","pos":[26418,26472]},{"content":"If the <ph id=\"ph1\">`dwTabbedStyle`</ph> parameter has the <ph id=\"ph2\">`AFX_CBRS_OUTLOOK_TABS`</ph> flag specified, the pane creates Outlook-style tabbed panes when another pane is attached to this pane using the <bpt id=\"p1\">[</bpt>CDockablePane::AttachToTabWnd<ept id=\"p1\">](#cdockablepane__attachtotabwnd)</ept> method.","pos":[26479,26728],"source":"If the `dwTabbedStyle` parameter has the `AFX_CBRS_OUTLOOK_TABS` flag specified, the pane creates Outlook-style tabbed panes when another pane is attached to this pane using the [CDockablePane::AttachToTabWnd](#cdockablepane__attachtotabwnd) method."},{"content":"By default, dockable panes create regular tabbed panes of type <bpt id=\"p1\">[</bpt>CTabbedPane<ept id=\"p1\">](../../mfc/reference/ctabbedpane-class.md)</ept>.","pos":[26729,26848],"source":" By default, dockable panes create regular tabbed panes of type [CTabbedPane](../../mfc/reference/ctabbedpane-class.md)."},{"pos":[26858,26953],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__createdefaultpanedivider\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::CreateDefaultPaneDivider","linkify":"<a name=\"cdockablepane__createdefaultpanedivider\"></a>  CDockablePane::CreateDefaultPaneDivider","source":"<a name=\"cdockablepane__createdefaultpanedivider\"></a>  CDockablePane::CreateDefaultPaneDivider"},{"content":"Creates a default divider for the pane as it is being docked to a frame window.","pos":[26957,27036]},{"pos":[27203,27213],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`dwAlignment`</ph>","pos":[27217,27235],"source":"[in] `dwAlignment`"},{"content":"Specifies the side of the main frame to which the pane is being docked.","pos":[27239,27310]},{"content":"If <ph id=\"ph1\">`dwAlignment`</ph> contains the <ph id=\"ph2\">`CBRS_ALIGN_LEFT`</ph> or <ph id=\"ph3\">`CBRS_ALIGN_RIGHT`</ph> flag, this method creates a vertical ( <ph id=\"ph4\">`CPaneDivider::SS_VERT`</ph>) divider; otherwise, this method creates a horizontal ( <ph id=\"ph5\">`CPaneDivider::SS_HORZ`</ph>) divider.","pos":[27311,27533],"source":" If `dwAlignment` contains the `CBRS_ALIGN_LEFT` or `CBRS_ALIGN_RIGHT` flag, this method creates a vertical ( `CPaneDivider::SS_VERT`) divider; otherwise, this method creates a horizontal ( `CPaneDivider::SS_HORZ`) divider."},{"content":"[in] <ph id=\"ph1\">`pParent`</ph>","pos":[27540,27554],"source":"[in] `pParent`"},{"content":"Pointer to the parent frame.","pos":[27558,27586]},{"content":"[in] <ph id=\"ph1\">`pSliderRTC`</ph>","pos":[27593,27610],"source":"[in] `pSliderRTC`"},{"content":"Not used.","pos":[27614,27623]},{"pos":[27633,27645],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[27649,27745],"content":"This method returns a pointer to the newly-created divider, or <ph id=\"ph1\">`NULL`</ph> if divider creation fails.","source":"This method returns a pointer to the newly-created divider, or `NULL` if divider creation fails."},{"pos":[27755,27762],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[27766,27815],"content":"<ph id=\"ph1\">`dwAlignment`</ph> can be any of the following values:","source":"`dwAlignment` can be any of the following values:"},{"content":"Value","pos":[27822,27827]},{"content":"Description","pos":[27828,27839]},{"content":"The pane is being docked to the top of the client area of a frame window.","pos":[27895,27968]},{"content":"The pane is being docked to the bottom of the client area of a frame window.","pos":[27993,28069]},{"content":"The pane is being docked to the left side of the client area of a frame window.","pos":[28092,28171]},{"content":"The pane is being docked to the right side of the client area of a frame window.","pos":[28195,28275]},{"pos":[28286,28349],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__createex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::CreateEx","linkify":"<a name=\"cdockablepane__createex\"></a>  CDockablePane::CreateEx","source":"<a name=\"cdockablepane__createex\"></a>  CDockablePane::CreateEx"},{"pos":[28353,28471],"content":"Creates the Windows control and attaches it to the <bpt id=\"p1\">[</bpt>CDockablePane<ept id=\"p1\">](../../mfc/reference/cdockablepane-class.md)</ept> object.","source":"Creates the Windows control and attaches it to the [CDockablePane](../../mfc/reference/cdockablepane-class.md) object."},{"pos":[28831,28841],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`dwStyleEx`</ph>","pos":[28845,28861],"source":"[in] `dwStyleEx`"},{"content":"Specifies the extended style attributes for the new window.","pos":[28865,28924]},{"content":"[in] <ph id=\"ph1\">`lpszCaption`</ph>","pos":[28931,28949],"source":"[in] `lpszCaption`"},{"content":"Specifies the window name.","pos":[28953,28979]},{"content":"[in] [out] <ph id=\"ph1\">`pParentWnd`</ph>","pos":[28986,29009],"source":"[in] [out] `pParentWnd`"},{"content":"Specifies the parent window.","pos":[29013,29041]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[29048,29059],"source":"[in] `rect`"},{"content":"Specifies the size and position of the window, in client coordinates of <ph id=\"ph1\">`pParentWnd`</ph>.","pos":[29063,29148],"source":" Specifies the size and position of the window, in client coordinates of `pParentWnd`."},{"content":"[in] <ph id=\"ph1\">`bHasGripper`</ph>","pos":[29155,29173],"source":"[in] `bHasGripper`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to create the pane with a caption; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","pos":[29176,29238],"source":" `TRUE` to create the pane with a caption; otherwise, `FALSE`."},{"content":"[in] <ph id=\"ph1\">`nID`</ph>","pos":[29245,29255],"source":"[in] `nID`"},{"content":"Specifies the ID of the child window.","pos":[29259,29296]},{"content":"This value must be unique if you want to save the docking state for this docking pane.","pos":[29297,29383]},{"content":"[in] <ph id=\"ph1\">`dwStyle`</ph>","pos":[29390,29404],"source":"[in] `dwStyle`"},{"content":"Specifies the window style attributes.","pos":[29408,29446]},{"content":"[in] <ph id=\"ph1\">`dwTabbedStyle`</ph>","pos":[29453,29473],"source":"[in] `dwTabbedStyle`"},{"content":"Specifies the tabbed style of a tabbed window that is created when the user drags a pane on the caption of this pane.","pos":[29477,29594]},{"content":"[in] <ph id=\"ph1\">`dwControlBarStyle`</ph>","pos":[29601,29625],"source":"[in] `dwControlBarStyle`"},{"content":"Specifies the additional style attributes.","pos":[29629,29671]},{"content":"[in] [out] <ph id=\"ph1\">`pContext`</ph>","pos":[29678,29699],"source":"[in] [out] `pContext`"},{"content":"Specifies the create context of the window.","pos":[29703,29746]},{"pos":[29756,29768],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[29772,29844],"content":"<ph id=\"ph1\">`TRUE`</ph> if the dockable pane is successfully created; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the dockable pane is successfully created; otherwise, `FALSE`."},{"pos":[29854,29861],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[29865,29934],"content":"Creates a Windows pane and attaches it to the <ph id=\"ph1\">`CDockablePane`</ph> object.","source":"Creates a Windows pane and attaches it to the `CDockablePane` object."},{"content":"If the <ph id=\"ph1\">`dwStyle`</ph> window style has the <ph id=\"ph2\">`CBRS_FLOAT_MULTI`</ph> flag, the miniframe window can float with other panes in the miniframe window.","pos":[29941,30076],"source":"If the `dwStyle` window style has the `CBRS_FLOAT_MULTI` flag, the miniframe window can float with other panes in the miniframe window."},{"content":"By default, docking panes can only float individually.","pos":[30077,30131]},{"content":"If the <ph id=\"ph1\">`dwTabbedStyle`</ph> parameter has the <ph id=\"ph2\">`AFX_CBRS_OUTLOOK_TABS`</ph> flag specified, the pane creates Outlook-style tabbed panes when another pane is attached to this pane using the <bpt id=\"p1\">[</bpt>CDockablePane::AttachToTabWnd<ept id=\"p1\">](#cdockablepane__attachtotabwnd)</ept> method.","pos":[30138,30387],"source":"If the `dwTabbedStyle` parameter has the `AFX_CBRS_OUTLOOK_TABS` flag specified, the pane creates Outlook-style tabbed panes when another pane is attached to this pane using the [CDockablePane::AttachToTabWnd](#cdockablepane__attachtotabwnd) method."},{"content":"By default, dockable panes create regular tabbed panes of type <bpt id=\"p1\">[</bpt>CTabbedPane<ept id=\"p1\">](../../mfc/reference/ctabbedpane-class.md)</ept>.","pos":[30388,30507],"source":" By default, dockable panes create regular tabbed panes of type [CTabbedPane](../../mfc/reference/ctabbedpane-class.md)."},{"pos":[30517,30596],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__createtabbedpane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::CreateTabbedPane","linkify":"<a name=\"cdockablepane__createtabbedpane\"></a>  CDockablePane::CreateTabbedPane","source":"<a name=\"cdockablepane__createtabbedpane\"></a>  CDockablePane::CreateTabbedPane"},{"content":"Creates a tabbed pane from the current pane.","pos":[30600,30644]},{"pos":[30710,30722],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[30726,30788],"content":"The new tabbed pane, or <ph id=\"ph1\">`NULL`</ph> if the create operation failed.","source":"The new tabbed pane, or `NULL` if the create operation failed."},{"pos":[30798,30805],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework calls this method when it creates a tabbed pane to replace this pane.","pos":[30809,30892]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CDockablePane::AttachToTabWnd<ept id=\"p1\">](#cdockablepane__attachtotabwnd)</ept>.","pos":[30893,30983],"source":" For more information, see [CDockablePane::AttachToTabWnd](#cdockablepane__attachtotabwnd)."},{"content":"Override this method in a derived class to customize how tabbed panes are created and initialized.","pos":[30990,31088]},{"pos":[31095,31299],"content":"The tabbed pane is created according to the runtime class information stored in the <ph id=\"ph1\">`m_pTabbedControlBarRTC`</ph> member, which is initialized by the <bpt id=\"p1\">[</bpt>CDockablePane::CreateEx<ept id=\"p1\">](#cdockablepane__createex)</ept> method.","source":"The tabbed pane is created according to the runtime class information stored in the `m_pTabbedControlBarRTC` member, which is initialized by the [CDockablePane::CreateEx](#cdockablepane__createex) method."},{"pos":[31309,31390],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__dockpanecontainer\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::DockPaneContainer","linkify":"<a name=\"cdockablepane__dockpanecontainer\"></a>  CDockablePane::DockPaneContainer","source":"<a name=\"cdockablepane__dockpanecontainer\"></a>  CDockablePane::DockPaneContainer"},{"content":"Docks a container to the pane.","pos":[31394,31424]},{"pos":[31589,31599],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`barContainerManager`</ph>","pos":[31603,31629],"source":"[in] `barContainerManager`"},{"content":"A reference to the container manager of the container that is being docked.","pos":[31633,31708]},{"content":"[in] <ph id=\"ph1\">`dwAlignment`</ph>","pos":[31715,31733],"source":"[in] `dwAlignment`"},{"content":"<ph id=\"ph1\"> `DWORD`</ph> that specifies the side of the pane to which the container is being docked.","pos":[31736,31820],"source":" `DWORD` that specifies the side of the pane to which the container is being docked."},{"content":"[in] <ph id=\"ph1\">`dockMethod`</ph>","pos":[31827,31844],"source":"[in] `dockMethod`"},{"content":"Not used.","pos":[31848,31857]},{"pos":[31867,31879],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[31883,31963],"content":"<ph id=\"ph1\">`TRUE`</ph> if the container was successfully docked to the pane; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the container was successfully docked to the pane; otherwise, `FALSE`."},{"pos":[31973,31980],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[31984,32033],"content":"<ph id=\"ph1\">`dwAlignment`</ph> can be any of the following values:","source":"`dwAlignment` can be any of the following values:"},{"content":"Value","pos":[32040,32045]},{"content":"Description","pos":[32046,32057]},{"content":"The container is being docked to the top of the pane.","pos":[32113,32166]},{"content":"The container is being docked to the bottom of the pane.","pos":[32191,32247]},{"content":"The container is being docked to the left of the pane.","pos":[32270,32324]},{"content":"The container is being docked to the right of the pane.","pos":[32348,32403]},{"pos":[32414,32493],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__dockpanestandard\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::DockPaneStandard","linkify":"<a name=\"cdockablepane__dockpanestandard\"></a>  CDockablePane::DockPaneStandard","source":"<a name=\"cdockablepane__dockpanestandard\"></a>  CDockablePane::DockPaneStandard"},{"content":"Docks a pane by using outline (standard) docking.","pos":[32497,32546]},{"pos":[32622,32632],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bWasDocked`</ph>","pos":[32636,32653],"source":"[in] `bWasDocked`"},{"content":"When the method returns, this value contains <ph id=\"ph1\">`TRUE`</ph> if the pane was successfully docked; otherwise, it contains <ph id=\"ph2\">`FALSE`</ph>.","pos":[32657,32777],"source":" When the method returns, this value contains `TRUE` if the pane was successfully docked; otherwise, it contains `FALSE`."},{"pos":[32787,32799],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If the pane was docked to a tabbed window, or if a tabbed window was created as a result of docking, this method returns a pointer to the tabbed window.","pos":[32803,32955]},{"content":"If the pane was otherwise successfully docked, this method returns the <ph id=\"ph1\">`this`</ph> pointer.","pos":[32956,33042],"source":" If the pane was otherwise successfully docked, this method returns the `this` pointer."},{"content":"If docking failed, this method returns <ph id=\"ph1\">`NULL`</ph>.","pos":[33043,33089],"source":" If docking failed, this method returns `NULL`."},{"pos":[33099,33176],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__docktorecentpos\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::DockToRecentPos","linkify":"<a name=\"cdockablepane__docktorecentpos\"></a>  CDockablePane::DockToRecentPos","source":"<a name=\"cdockablepane__docktorecentpos\"></a>  CDockablePane::DockToRecentPos"},{"content":"Docks a pane to its stored docking position.","pos":[33180,33224]},{"pos":[33288,33300],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[33304,33366],"content":"<ph id=\"ph1\">`TRUE`</ph> if the pane is successfully docked; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the pane is successfully docked; otherwise, `FALSE`."},{"pos":[33376,33383],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[33387,33519],"content":"Dockable panes store recent docking information in a <bpt id=\"p1\">[</bpt>CRecentDockSiteInfo<ept id=\"p1\">](../../mfc/reference/crecentdocksiteinfo-class.md)</ept> object.","source":"Dockable panes store recent docking information in a [CRecentDockSiteInfo](../../mfc/reference/crecentdocksiteinfo-class.md) object."},{"pos":[33529,33600],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__docktowindow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::DockToWindow","linkify":"<a name=\"cdockablepane__docktowindow\"></a>  CDockablePane::DockToWindow","source":"<a name=\"cdockablepane__docktowindow\"></a>  CDockablePane::DockToWindow"},{"content":"Docks one docking pane to another docking pane.","pos":[33604,33651]},{"pos":[33792,33802],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] [out] <ph id=\"ph1\">`pTargetWindow`</ph>","pos":[33806,33832],"source":"[in] [out] `pTargetWindow`"},{"content":"Specifies the dockable pane to dock this pane to.","pos":[33836,33885]},{"content":"[in] <ph id=\"ph1\">`dwAlignment`</ph>","pos":[33892,33910],"source":"[in] `dwAlignment`"},{"content":"Specifies the docking alignment for the pane.","pos":[33914,33959]},{"content":"May be one of CBRS_ALIGN_LEFT, CBRS_ALIGN_TOP, CBRS_ALIGN_RIGHT, CBRS_ALIGN_BOTTOM or CBRS_ALIGN_ANY.","pos":[33960,34061]},{"content":"(Defined in afxres.h.)","pos":[34062,34084]},{"content":"[in] <ph id=\"ph1\">`lpRect`</ph>","pos":[34091,34104],"source":"[in] `lpRect`"},{"content":"Specifies the docking rectangle for the pane.","pos":[34108,34153]},{"pos":[34163,34175],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34179,34242],"content":"<ph id=\"ph1\">`TRUE`</ph> if the pane was docked successfully; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the pane was docked successfully; otherwise, `FALSE`."},{"pos":[34252,34259],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[34263,34359],"content":"Call this method to dock one pane to another pane with the alignment specified by <ph id=\"ph1\">`dwAlignment`</ph>.","source":"Call this method to dock one pane to another pane with the alignment specified by `dwAlignment`."},{"pos":[34369,34438],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__drawcaption\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::DrawCaption","linkify":"<a name=\"cdockablepane__drawcaption\"></a>  CDockablePane::DrawCaption","source":"<a name=\"cdockablepane__drawcaption\"></a>  CDockablePane::DrawCaption"},{"content":"Draws the caption (also called the gripper) of a docking pane.","pos":[34442,34504]},{"pos":[34595,34605],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[34609,34619],"source":"[in] `pDC`"},{"content":"Represents the device context used for drawing.","pos":[34623,34670]},{"content":"[in] <ph id=\"ph1\">`rectCaption`</ph>","pos":[34677,34695],"source":"[in] `rectCaption`"},{"content":"Specifies the bounding rectangle of the pane's caption.","pos":[34699,34754]},{"pos":[34764,34771],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework calls this method to draw the caption of a dockable pane.","pos":[34775,34846]},{"content":"Override this method in a derived class to customize the appearance of the caption.","pos":[34853,34936]},{"pos":[34946,35027],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__enableautohideall\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::EnableAutohideAll","linkify":"<a name=\"cdockablepane__enableautohideall\"></a>  CDockablePane::EnableAutohideAll","source":"<a name=\"cdockablepane__enableautohideall\"></a>  CDockablePane::EnableAutohideAll"},{"content":"Enables or disables autohide mode for this pane and for other panes in the container.","pos":[35031,35116]},{"pos":[35186,35196],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bEnable`</ph>","pos":[35200,35214],"source":"[in] `bEnable`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to enable the autohide all feature for the dockable pane; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","pos":[35217,35302],"source":" `TRUE` to enable the autohide all feature for the dockable pane; otherwise, `FALSE`."},{"pos":[35312,35319],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[35323,35490],"content":"When a user holds the <ph id=\"ph1\">`Ctrl`</ph> key and clicks the pin button to switch a pane to autohide mode, all other panes in the same container are also switched to autohide mode.","source":"When a user holds the `Ctrl` key and clicks the pin button to switch a pane to autohide mode, all other panes in the same container are also switched to autohide mode."},{"pos":[35497,35590],"content":"Call this method with <ph id=\"ph1\">`bEnable`</ph> set to <ph id=\"ph2\">`FALSE`</ph> to disable this feature for a particular pane.","source":"Call this method with `bEnable` set to `FALSE` to disable this feature for a particular pane."},{"pos":[35600,35673],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__enablegripper\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::EnableGripper","linkify":"<a name=\"cdockablepane__enablegripper\"></a>  CDockablePane::EnableGripper","source":"<a name=\"cdockablepane__enablegripper\"></a>  CDockablePane::EnableGripper"},{"content":"Shows or hides the caption (also called the gripper).","pos":[35677,35730]},{"pos":[35797,35807],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bEnable`</ph>","pos":[35811,35825],"source":"[in] `bEnable`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to enable the caption; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","pos":[35828,35878],"source":" `TRUE` to enable the caption; otherwise, `FALSE`."},{"pos":[35888,35895],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When the framework creates dockable panes, they do not have the <bpt id=\"p1\">**</bpt>WS_STYLE<ept id=\"p1\">**</ept> window style, even if specified.","pos":[35899,36008],"source":"When the framework creates dockable panes, they do not have the **WS_STYLE** window style, even if specified."},{"content":"This means that the pane's caption is a non-client area that is controlled by the framework, but this area differs from the standard window caption.","pos":[36009,36157]},{"content":"You can show or hide the caption at any time.","pos":[36164,36209]},{"content":"The framework hides the caption when a pane is added as a tab to a tabbed window or when a pane is floated in a miniframe window.","pos":[36210,36339]},{"pos":[36349,36430],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__getahrestoredrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::GetAHRestoredRect","linkify":"<a name=\"cdockablepane__getahrestoredrect\"></a>  CDockablePane::GetAHRestoredRect","source":"<a name=\"cdockablepane__getahrestoredrect\"></a>  CDockablePane::GetAHRestoredRect"},{"content":"Specifies the position of the pane when in auto-hide mode.","pos":[36434,36492]},{"pos":[36553,36565],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[36569,36654],"content":"A <ph id=\"ph1\">`CRect`</ph> object that contains the position of the pane when it is in auto-hide mode.","source":"A `CRect` object that contains the position of the pane when it is in auto-hide mode."},{"pos":[36664,36671],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[36681,36756],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__getahslidemode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::GetAHSlideMode","linkify":"<a name=\"cdockablepane__getahslidemode\"></a>  CDockablePane::GetAHSlideMode","source":"<a name=\"cdockablepane__getahslidemode\"></a>  CDockablePane::GetAHSlideMode"},{"content":"Retrieves the auto-hide slide mode for the pane.","pos":[36760,36808]},{"pos":[36873,36885],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A <ph id=\"ph1\">`UINT`</ph> that specifies the auto-hide slide mode for the pane.","pos":[36889,36951],"source":"A `UINT` that specifies the auto-hide slide mode for the pane."},{"content":"The return value can be either <ph id=\"ph1\">`AFX_AHSM_MOVE`</ph> or <ph id=\"ph2\">`AFX_AHSM_STRETCH`</ph>, but the implementation only uses <ph id=\"ph3\">`AFX_AHSM_MOVE`</ph>.","pos":[36952,37071],"source":" The return value can be either `AFX_AHSM_MOVE` or `AFX_AHSM_STRETCH`, but the implementation only uses `AFX_AHSM_MOVE`."},{"pos":[37081,37088],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[37098,37177],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__getcaptionheight\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::GetCaptionHeight","linkify":"<a name=\"cdockablepane__getcaptionheight\"></a>  CDockablePane::GetCaptionHeight","source":"<a name=\"cdockablepane__getcaptionheight\"></a>  CDockablePane::GetCaptionHeight"},{"content":"Returns the height, in pixels, of the current caption.","pos":[37181,37235]},{"pos":[37301,37313],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the caption, in pixels.","pos":[37317,37354]},{"pos":[37364,37371],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[37375,37541],"content":"The caption height is 0 if the caption was hidden by the <bpt id=\"p1\">[</bpt>CDockablePane::EnableGripper<ept id=\"p1\">](#cdockablepane__enablegripper)</ept> method, or if the pane does not have a caption.","source":"The caption height is 0 if the caption was hidden by the [CDockablePane::EnableGripper](#cdockablepane__enablegripper) method, or if the pane does not have a caption."},{"pos":[37551,37640],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__getdefaultpanedivider\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::GetDefaultPaneDivider","linkify":"<a name=\"cdockablepane__getdefaultpanedivider\"></a>  CDockablePane::GetDefaultPaneDivider","source":"<a name=\"cdockablepane__getdefaultpanedivider\"></a>  CDockablePane::GetDefaultPaneDivider"},{"content":"Returns the default pane divider for the pane's container.","pos":[37644,37702]},{"pos":[37775,37787],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[37791,37987],"content":"A valid <bpt id=\"p1\">[</bpt>CPaneDivider<ept id=\"p1\">](../../mfc/reference/cpanedivider-class.md)</ept> object if the dockable pane is docked to the main frame window, or <ph id=\"ph1\">`NULL`</ph> if the dockable pane is not docked or if it is floating.","source":"A valid [CPaneDivider](../../mfc/reference/cpanedivider-class.md) object if the dockable pane is docked to the main frame window, or `NULL` if the dockable pane is not docked or if it is floating."},{"pos":[37997,38004],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[38008,38118],"content":"For more information about pane dividers, see <bpt id=\"p1\">[</bpt>CPaneDivider Class<ept id=\"p1\">](../../mfc/reference/cpanedivider-class.md)</ept>.","source":"For more information about pane dividers, see [CPaneDivider Class](../../mfc/reference/cpanedivider-class.md)."},{"pos":[38128,38207],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__getdockingstatus\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::GetDockingStatus","linkify":"<a name=\"cdockablepane__getdockingstatus\"></a>  CDockablePane::GetDockingStatus","source":"<a name=\"cdockablepane__getdockingstatus\"></a>  CDockablePane::GetDockingStatus"},{"content":"Determines the ability of a pane to be docked based on the provided pointer location.","pos":[38211,38296]},{"pos":[38401,38411],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pt`</ph>","pos":[38415,38424],"source":"[in] `pt`"},{"content":"The location of the pointer in screen coordinates.","pos":[38428,38478]},{"content":"[in] <ph id=\"ph1\">`nSensitivity`</ph>","pos":[38485,38504],"source":"[in] `nSensitivity`"},{"content":"The distance, in pixels, away from the edge of a rectangle the pointer must be to enable docking.","pos":[38508,38605]},{"pos":[38615,38627],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"One of the following status values:","pos":[38631,38666]},{"pos":[38673,38694],"content":"<ph id=\"ph1\">`AFX_CS_STATUS`</ph> value","source":"`AFX_CS_STATUS` value"},{"content":"Meaning","pos":[38695,38702]},{"content":"The pointer is not over a dock site.","pos":[38766,38802]},{"content":"The framework does not dock the pane.","pos":[38803,38840]},{"content":"The pointer is located over the dock site in immediate mode (the pane uses the <ph id=\"ph1\">`DT_IMMEDIATE`</ph> docking mode).","pos":[38867,38975],"source":"The pointer is located over the dock site in immediate mode (the pane uses the `DT_IMMEDIATE` docking mode)."},{"content":"The framework docks the pane immediately.","pos":[38976,39017]},{"content":"The pointer is over a dock site that is another docking pane or is an edge of the main frame.","pos":[39038,39131]},{"content":"The framework docks the pane after a delay.","pos":[39132,39175]},{"content":"See the Remarks section for more information about this delay.","pos":[39176,39238]},{"content":"The pointer is located over a dock site that causes the pane to be docked in a tabbed window.","pos":[39266,39359]},{"content":"This occurs when the pointer is located over the caption of another docking pane or over the tab area of a tabbed pane.","pos":[39360,39479]},{"pos":[39490,39497],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework calls this method to handle docking of a floating pane.","pos":[39501,39570]},{"content":"For floating toolbars or docking panes that use the <ph id=\"ph1\">`DT_IMMEDIATE`</ph> docking mode, the framework delays the dock command to enable the user to move the window out of the client area of the parent frame before docking occurs.","pos":[39577,39799],"source":"For floating toolbars or docking panes that use the `DT_IMMEDIATE` docking mode, the framework delays the dock command to enable the user to move the window out of the client area of the parent frame before docking occurs."},{"content":"The length of the delay is measured in milliseconds and is controlled by the <bpt id=\"p1\">[</bpt>CDockingManager::m_nTimeOutBeforeToolBarDock<ept id=\"p1\">](../../mfc/reference/cdockingmanager-class.md#cdockingmanager__m_ntimeoutbeforetoolbardock)</ept> data member..","pos":[39800,40028],"source":" The length of the delay is measured in milliseconds and is controlled by the [CDockingManager::m_nTimeOutBeforeToolBarDock](../../mfc/reference/cdockingmanager-class.md#cdockingmanager__m_ntimeoutbeforetoolbardock) data member.."},{"content":"The default value of <bpt id=\"p1\">[</bpt>CDockingManager::m_nTimeOutBeforeToolBarDock<ept id=\"p1\">](../../mfc/reference/cdockingmanager-class.md#cdockingmanager__m_ntimeoutbeforetoolbardock)</ept> is 200.","pos":[40029,40195],"source":" The default value of [CDockingManager::m_nTimeOutBeforeToolBarDock](../../mfc/reference/cdockingmanager-class.md#cdockingmanager__m_ntimeoutbeforetoolbardock) is 200."},{"content":"This behavior emulates the docking behavior of <ph id=\"ph1\">[!INCLUDE[ofprword](../../mfc/reference/includes/ofprword_md.md)]</ph> 2007.","pos":[40196,40314],"source":" This behavior emulates the docking behavior of [!INCLUDE[ofprword](../../mfc/reference/includes/ofprword_md.md)] 2007."},{"content":"For delayed docking states ( <ph id=\"ph1\">`CS_DELAY_DOCK`</ph> and <ph id=\"ph2\">`CS_DELAY_DOCK_TO_TAB`</ph>), the framework does not perform docking until the user releases the mouse button.","pos":[40321,40475],"source":"For delayed docking states ( `CS_DELAY_DOCK` and `CS_DELAY_DOCK_TO_TAB`), the framework does not perform docking until the user releases the mouse button."},{"content":"If a pane uses the <ph id=\"ph1\">`DT_STANDARD`</ph> docking mode, the framework displays a rectangle at the projected docking location.","pos":[40476,40592],"source":" If a pane uses the `DT_STANDARD` docking mode, the framework displays a rectangle at the projected docking location."},{"content":"If a pane uses the <ph id=\"ph1\">`DT_SMART`</ph> docking mode, the framework displays smart docking markers and semi-transparent rectangles at the projected docking location.","pos":[40593,40748],"source":" If a pane uses the `DT_SMART` docking mode, the framework displays smart docking markers and semi-transparent rectangles at the projected docking location."},{"content":"To specify the docking mode for your pane, call the <bpt id=\"p1\">[</bpt>CBasePane::SetDockingMode<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__setdockingmode)</ept> method.","pos":[40749,40902],"source":" To specify the docking mode for your pane, call the [CBasePane::SetDockingMode](../../mfc/reference/cbasepane-class.md#cbasepane__setdockingmode) method."},{"content":"For more information about smart docking, see <bpt id=\"p1\">[</bpt>CDockingManager::GetSmartDockingParams<ept id=\"p1\">](../../mfc/reference/cdockingmanager-class.md#cdockingmanager__getsmartdockingparams)</ept>.","pos":[40903,41075],"source":" For more information about smart docking, see [CDockingManager::GetSmartDockingParams](../../mfc/reference/cdockingmanager-class.md#cdockingmanager__getsmartdockingparams)."},{"pos":[41085,41168],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__getdragsensitivity\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::GetDragSensitivity","linkify":"<a name=\"cdockablepane__getdragsensitivity\"></a>  CDockablePane::GetDragSensitivity","source":"<a name=\"cdockablepane__getdragsensitivity\"></a>  CDockablePane::GetDragSensitivity"},{"content":"Returns the drag sensitivity of a docking pane.","pos":[41172,41219]},{"pos":[41286,41298],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A <bpt id=\"p1\">[</bpt>CSize<ept id=\"p1\">](../../atl-mfc-shared/reference/csize-class.md)</ept> object that contains the width and height, in pixels, of a rectangle centered on a drag point.","pos":[41302,41453],"source":"A [CSize](../../atl-mfc-shared/reference/csize-class.md) object that contains the width and height, in pixels, of a rectangle centered on a drag point."},{"content":"The drag operation does not begin until the mouse pointer moves outside this rectangle.","pos":[41454,41541]},{"pos":[41551,41656],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__getlastpercentinpanecontainer\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::GetLastPercentInPaneContainer","linkify":"<a name=\"cdockablepane__getlastpercentinpanecontainer\"></a>  CDockablePane::GetLastPercentInPaneContainer","source":"<a name=\"cdockablepane__getlastpercentinpanecontainer\"></a>  CDockablePane::GetLastPercentInPaneContainer"},{"pos":[41660,41803],"content":"Retrieves the percentage of space that a pane occupies in its container ( <bpt id=\"p1\">[</bpt>CPaneContainer Class<ept id=\"p1\">](../../mfc/reference/cpanecontainer-class.md)</ept>).","source":"Retrieves the percentage of space that a pane occupies in its container ( [CPaneContainer Class](../../mfc/reference/cpanecontainer-class.md))."},{"pos":[41874,41886],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[41890,41978],"content":"An <ph id=\"ph1\">`int`</ph> that specifies the percentage of space that the pane occupies in its container.","source":"An `int` that specifies the percentage of space that the pane occupies in its container."},{"pos":[41988,41995],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used when the container adjusts its layout.","pos":[41999,42057]},{"pos":[42067,42134],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__gettabarea\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::GetTabArea","linkify":"<a name=\"cdockablepane__gettabarea\"></a>  CDockablePane::GetTabArea","source":"<a name=\"cdockablepane__gettabarea\"></a>  CDockablePane::GetTabArea"},{"content":"Retrieves the tab area for the pane.","pos":[42138,42174]},{"pos":[42293,42303],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`rectTabAreaTop`</ph>","pos":[42307,42328],"source":"[in] `rectTabAreaTop`"},{"content":"<ph id=\"ph1\"> `GetTabArea`</ph> fills this variable with the tab area if tabs are located at the top of the pane.","pos":[42331,42426],"source":" `GetTabArea` fills this variable with the tab area if tabs are located at the top of the pane."},{"content":"If tabs are located at the bottom of the pane, this variable is filled with an empty rectangle.","pos":[42427,42522]},{"content":"[in] <ph id=\"ph1\">`rectTabAreaBottom`</ph>","pos":[42529,42553],"source":"[in] `rectTabAreaBottom`"},{"content":"<ph id=\"ph1\"> `GetTabArea`</ph> fills this variable with the tab area if tabs are located at the bottom of the pane.","pos":[42556,42654],"source":" `GetTabArea` fills this variable with the tab area if tabs are located at the bottom of the pane."},{"content":"If tabs are located at the top of the pane, this variable is filled with an empty rectangle.","pos":[42655,42747]},{"pos":[42757,42764],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used only in classes that are derived from <ph id=\"ph1\">`CDockablePane`</ph> and have tabs.","pos":[42768,42856],"source":"This method is used only in classes that are derived from `CDockablePane` and have tabs."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CTabbedPane::GetTabArea<ept id=\"p1\">](../../mfc/reference/ctabbedpane-class.md#ctabbedpane__gettabarea)</ept> and <bpt id=\"p2\">[</bpt>CMFCOutlookBar::GetTabArea<ept id=\"p2\">](../../mfc/reference/cmfcoutlookbar-class.md#cmfcoutlookbar__gettabarea)</ept>.","pos":[42857,43080],"source":" For more information, see [CTabbedPane::GetTabArea](../../mfc/reference/ctabbedpane-class.md#ctabbedpane__gettabarea) and [CMFCOutlookBar::GetTabArea](../../mfc/reference/cmfcoutlookbar-class.md#cmfcoutlookbar__gettabarea)."},{"pos":[43090,43169],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__gettabbedpanertc\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::GetTabbedPaneRTC","linkify":"<a name=\"cdockablepane__gettabbedpanertc\"></a>  CDockablePane::GetTabbedPaneRTC","source":"<a name=\"cdockablepane__gettabbedpanertc\"></a>  CDockablePane::GetTabbedPaneRTC"},{"content":"Returns the runtime class information about a tabbed window that is created when another pane docks to the current pane.","pos":[43173,43293]},{"pos":[43362,43374],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The runtime class information for the dockable pane.","pos":[43378,43430]},{"pos":[43440,43447],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to retrieve the runtime class information for tabbed panes that are created dynamically.","pos":[43451,43556]},{"content":"This can occur when a user drags one pane to the caption of another pane, or if you call the <bpt id=\"p1\">[</bpt>CDockablePane::AttachToTabWnd<ept id=\"p1\">](#cdockablepane__attachtotabwnd)</ept> method to programmatically create a tabbed pane from two dockable panes.","pos":[43557,43786],"source":" This can occur when a user drags one pane to the caption of another pane, or if you call the [CDockablePane::AttachToTabWnd](#cdockablepane__attachtotabwnd) method to programmatically create a tabbed pane from two dockable panes."},{"pos":[43793,43925],"content":"You can set the runtime class information by calling the <bpt id=\"p1\">[</bpt>CDockablePane::SetTabbedPaneRTC<ept id=\"p1\">](#cdockablepane__settabbedpanertc)</ept> method.","source":"You can set the runtime class information by calling the [CDockablePane::SetTabbedPaneRTC](#cdockablepane__settabbedpanertc) method."},{"pos":[43935,44012],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__hasautohidemode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::HasAutoHideMode","linkify":"<a name=\"cdockablepane__hasautohidemode\"></a>  CDockablePane::HasAutoHideMode","source":"<a name=\"cdockablepane__hasautohidemode\"></a>  CDockablePane::HasAutoHideMode"},{"content":"Specifies whether a docking pane can be switched to autohide mode.","pos":[44016,44082]},{"pos":[44148,44160],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[44164,44245],"content":"<ph id=\"ph1\">`TRUE`</ph> if the dockable pane can be switched to autohide mode; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the dockable pane can be switched to autohide mode; otherwise, `FALSE`."},{"pos":[44255,44262],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived class to disable autohide mode for a specific dockable pane.","pos":[44266,44360]},{"pos":[44370,44431],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__hittest\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::HitTest","linkify":"<a name=\"cdockablepane__hittest\"></a>  CDockablePane::HitTest","source":"<a name=\"cdockablepane__hittest\"></a>  CDockablePane::HitTest"},{"content":"Specifies the location in a pane where the user clicks a mouse.","pos":[44435,44498]},{"pos":[44598,44608],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`point`</ph>","pos":[44612,44624],"source":"[in] `point`"},{"content":"Specifies the point to test.","pos":[44628,44656]},{"content":"[in] <ph id=\"ph1\">`bDetectCaption`</ph>","pos":[44663,44684],"source":"[in] `bDetectCaption`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> if <ph id=\"ph2\">`HTCAPTION`</ph> should be returned if the point is on the pane's caption; otherwise, <ph id=\"ph3\">`FALSE`</ph>.","pos":[44687,44787],"source":" `TRUE` if `HTCAPTION` should be returned if the point is on the pane's caption; otherwise, `FALSE`."},{"pos":[44797,44809],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"One of the following values:","pos":[44813,44841]},{"pos":[44849,44900],"content":"<ph id=\"ph1\">`HTNOWHERE`</ph> if <ph id=\"ph2\">`point`</ph> is not in the dockable pane.","source":"`HTNOWHERE` if `point` is not in the dockable pane."},{"pos":[44908,44973],"content":"<ph id=\"ph1\">`HTCLIENT`</ph> if <ph id=\"ph2\">`point`</ph> is in the client area of the dockable pane.","source":"`HTCLIENT` if `point` is in the client area of the dockable pane."},{"pos":[44981,45048],"content":"<ph id=\"ph1\">`HTCAPTION`</ph> if <ph id=\"ph2\">`point`</ph> is in the caption area of the dockable pane.","source":"`HTCAPTION` if `point` is in the caption area of the dockable pane."},{"pos":[45056,45104],"content":"<ph id=\"ph1\">`AFX_HTCLOSE`</ph> if <ph id=\"ph2\">`point`</ph> is on the close button.","source":"`AFX_HTCLOSE` if `point` is on the close button."},{"pos":[45112,45158],"content":"<ph id=\"ph1\">`HTMAXBUTTON`</ph> if <ph id=\"ph2\">`point`</ph> is on the pin button.","source":"`HTMAXBUTTON` if `point` is on the pin button."},{"pos":[45168,45255],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__isautohideallenabled\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::IsAutohideAllEnabled","linkify":"<a name=\"cdockablepane__isautohideallenabled\"></a>  CDockablePane::IsAutohideAllEnabled","source":"<a name=\"cdockablepane__isautohideallenabled\"></a>  CDockablePane::IsAutohideAllEnabled"},{"content":"Indicates whether the docking pane and all other panes in the container can be switched to autohide mode.","pos":[45259,45364]},{"pos":[45435,45447],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[45451,45571],"content":"<ph id=\"ph1\">`TRUE`</ph> if the dockable pane, and all other panes in the container, can be switched to autohide mode; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the dockable pane, and all other panes in the container, can be switched to autohide mode; otherwise, `FALSE`."},{"pos":[45581,45588],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[45592,45686],"content":"A user enables autohide mode by clicking the docking pin button while holding the <bpt id=\"p1\">**</bpt>Ctrl<ept id=\"p1\">**</ept> key","source":"A user enables autohide mode by clicking the docking pin button while holding the **Ctrl** key"},{"pos":[45693,45815],"content":"To enable or disable this behavior, call the <bpt id=\"p1\">[</bpt>CDockablePane::EnableAutohideAll<ept id=\"p1\">](#cdockablepane__enableautohideall)</ept> method.","source":"To enable or disable this behavior, call the [CDockablePane::EnableAutohideAll](#cdockablepane__enableautohideall) method."},{"pos":[45825,45900],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__isautohidemode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::IsAutoHideMode","linkify":"<a name=\"cdockablepane__isautohidemode\"></a>  CDockablePane::IsAutoHideMode","source":"<a name=\"cdockablepane__isautohidemode\"></a>  CDockablePane::IsAutoHideMode"},{"content":"Determines whether a pane is in autohide mode.","pos":[45904,45950]},{"pos":[46015,46027],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[46031,46099],"content":"<ph id=\"ph1\">`TRUE`</ph> if the dockable pane is in autohide mode; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the dockable pane is in autohide mode; otherwise, `FALSE`."},{"pos":[46109,46172],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__isdocked\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::IsDocked","linkify":"<a name=\"cdockablepane__isdocked\"></a>  CDockablePane::IsDocked","source":"<a name=\"cdockablepane__isdocked\"></a>  CDockablePane::IsDocked"},{"content":"Determines whether the current pane is docked.","pos":[46176,46222]},{"pos":[46281,46293],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`TRUE`</ph> if the dockable pane does not belong to a miniframe window or if it is floating in a miniframe window with another pane.","pos":[46297,46424],"source":"`TRUE` if the dockable pane does not belong to a miniframe window or if it is floating in a miniframe window with another pane."},{"content":"<ph id=\"ph1\">`FALSE`</ph> if the pane is a child of a miniframe window and there are no other panes that belong to the miniframe window.","pos":[46425,46543],"source":"`FALSE` if the pane is a child of a miniframe window and there are no other panes that belong to the miniframe window."},{"pos":[46553,46560],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To determine whether the pane is docked to the main frame window, call <bpt id=\"p1\">[</bpt>CDockablePane::GetDefaultPaneDivider<ept id=\"p1\">](#cdockablepane__getdefaultpanedivider)</ept>.","pos":[46564,46713],"source":"To determine whether the pane is docked to the main frame window, call [CDockablePane::GetDefaultPaneDivider](#cdockablepane__getdefaultpanedivider)."},{"content":"If the method returns a non-NULL pointer, the pane is docked at the main frame window.","pos":[46714,46800]},{"pos":[46810,46897],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__ishideinautohidemode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::IsHideInAutoHideMode","linkify":"<a name=\"cdockablepane__ishideinautohidemode\"></a>  CDockablePane::IsHideInAutoHideMode","source":"<a name=\"cdockablepane__ishideinautohidemode\"></a>  CDockablePane::IsHideInAutoHideMode"},{"pos":[46901,47050],"content":"Determines the behavior of a pane that is in autohide mode if it is shown (or hidden) by calling <bpt id=\"p1\">[</bpt>CDockablePane::ShowPane<ept id=\"p1\">](#cdockablepane__showpane)</ept>.","source":"Determines the behavior of a pane that is in autohide mode if it is shown (or hidden) by calling [CDockablePane::ShowPane](#cdockablepane__showpane)."},{"pos":[47121,47133],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[47137,47224],"content":"<ph id=\"ph1\">`TRUE`</ph> if the dockable pane should be hidden when in autohide mode; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the dockable pane should be hidden when in autohide mode; otherwise, `FALSE`."},{"pos":[47234,47241],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When a dockable pane is in autohide mode, it behaves differently when you call <ph id=\"ph1\">`ShowPane`</ph> to hide or show the pane.","pos":[47245,47360],"source":"When a dockable pane is in autohide mode, it behaves differently when you call `ShowPane` to hide or show the pane."},{"content":"This behavior is controlled by the static member <bpt id=\"p1\">[</bpt>CDockablePane::m_bHideInAutoHideMode<ept id=\"p1\">](#cdockablepane__m_bhideinautohidemode)</ept>.","pos":[47361,47488],"source":" This behavior is controlled by the static member [CDockablePane::m_bHideInAutoHideMode](#cdockablepane__m_bhideinautohidemode)."},{"content":"If this member is <ph id=\"ph1\">`TRUE`</ph>, the dockable pane and its related autohide toolbar or autohide button is hidden or shown when you call <ph id=\"ph2\">`ShowPane`</ph>.","pos":[47489,47629],"source":" If this member is `TRUE`, the dockable pane and its related autohide toolbar or autohide button is hidden or shown when you call `ShowPane`."},{"content":"Otherwise, the dockable pane is activated or deactivated, and its related autohide toolbar or autohide button is always visible.","pos":[47630,47758]},{"content":"Override this method in a derived class to change the default behavior for individual panes.","pos":[47765,47857]},{"pos":[47864,47921],"content":"The default value for <ph id=\"ph1\">`m_bHideInAutoHideMode`</ph> is <ph id=\"ph2\">`FALSE`</ph>.","source":"The default value for `m_bHideInAutoHideMode` is `FALSE`."},{"pos":[47931,48036],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__isinfloatingmultipaneframewnd\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::IsInFloatingMultiPaneFrameWnd","linkify":"<a name=\"cdockablepane__isinfloatingmultipaneframewnd\"></a>  CDockablePane::IsInFloatingMultiPaneFrameWnd","source":"<a name=\"cdockablepane__isinfloatingmultipaneframewnd\"></a>  CDockablePane::IsInFloatingMultiPaneFrameWnd"},{"pos":[48040,48178],"content":"Specifies whether the pane is in a multi-pane frame window ( <bpt id=\"p1\">[</bpt>CMultiPaneFrameWnd Class<ept id=\"p1\">](../../mfc/reference/cmultipaneframewnd-class.md)</ept>).","source":"Specifies whether the pane is in a multi-pane frame window ( [CMultiPaneFrameWnd Class](../../mfc/reference/cmultipaneframewnd-class.md))."},{"pos":[48258,48270],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48274,48345],"content":"<ph id=\"ph1\">`TRUE`</ph> if the pane is in a multi-pane frame window; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the pane is in a multi-pane frame window; otherwise, `FALSE`."},{"pos":[48355,48362],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[48372,48441],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__isresizable\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::IsResizable","linkify":"<a name=\"cdockablepane__isresizable\"></a>  CDockablePane::IsResizable","source":"<a name=\"cdockablepane__isresizable\"></a>  CDockablePane::IsResizable"},{"content":"Specifies whether the pane is resizable.","pos":[48445,48485]},{"pos":[48547,48559],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48563,48615],"content":"<ph id=\"ph1\">`TRUE`</ph> if the pane is resizable; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the pane is resizable; otherwise, `FALSE`."},{"pos":[48625,48632],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, dockable panes are resizable.","pos":[48636,48677]},{"content":"To prevent resizing, override this method in a derived class and return <ph id=\"ph1\">`FALSE`</ph>.","pos":[48678,48758],"source":" To prevent resizing, override this method in a derived class and return `FALSE`."},{"content":"Note that a <ph id=\"ph1\">`FALSE`</ph> value leads to a failed <ph id=\"ph2\">`ASSERT`</ph> in <bpt id=\"p1\">[</bpt>CPane::DockPane<ept id=\"p1\">](../../mfc/reference/cpane-class.md#cpane__dockpane)</ept>.","pos":[48759,48885],"source":" Note that a `FALSE` value leads to a failed `ASSERT` in [CPane::DockPane](../../mfc/reference/cpane-class.md#cpane__dockpane)."},{"content":"Use <bpt id=\"p1\">[</bpt>CDockingManager::AddPane<ept id=\"p1\">](../../mfc/reference/cdockingmanager-class.md#cdockingmanager__addpane)</ept> instead to dock a pane within a parent frame.","pos":[48886,49033],"source":" Use [CDockingManager::AddPane](../../mfc/reference/cdockingmanager-class.md#cdockingmanager__addpane) instead to dock a pane within a parent frame."},{"content":"Panes that cannot be resized can neither float nor enter auto-hide mode and are always located at the outer edge of the parent frame.","pos":[49040,49173]},{"pos":[49183,49268],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__istablocationbottom\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::IsTabLocationBottom","linkify":"<a name=\"cdockablepane__istablocationbottom\"></a>  CDockablePane::IsTabLocationBottom","source":"<a name=\"cdockablepane__istablocationbottom\"></a>  CDockablePane::IsTabLocationBottom"},{"content":"Specifies whether tabs are located at the top or bottom of the pane.","pos":[49272,49340]},{"pos":[49410,49422],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[49426,49531],"content":"<ph id=\"ph1\">`TRUE`</ph> if tabs are located at the bottom of the pane; <ph id=\"ph2\">`FALSE`</ph> if tabs are located at the top of the pane.","source":"`TRUE` if tabs are located at the bottom of the pane; `FALSE` if tabs are located at the top of the pane."},{"pos":[49541,49548],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[49552,49688],"content":"For more information, see <bpt id=\"p1\">[</bpt>CTabbedPane::IsTabLocationBottom<ept id=\"p1\">](../../mfc/reference/ctabbedpane-class.md#ctabbedpane__istablocationbottom)</ept>.","source":"For more information, see [CTabbedPane::IsTabLocationBottom](../../mfc/reference/ctabbedpane-class.md#ctabbedpane__istablocationbottom)."},{"pos":[49698,49763],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__istracked\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::IsTracked","linkify":"<a name=\"cdockablepane__istracked\"></a>  CDockablePane::IsTracked","source":"<a name=\"cdockablepane__istracked\"></a>  CDockablePane::IsTracked"},{"content":"Specifies whether a pane is being moved by the user.","pos":[49767,49819]},{"pos":[49871,49883],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[49887,49941],"content":"<ph id=\"ph1\">`TRUE`</ph> if the pane is being moved; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the pane is being moved; otherwise, `FALSE`."},{"pos":[49951,50016],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__isvisible\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::IsVisible","linkify":"<a name=\"cdockablepane__isvisible\"></a>  CDockablePane::IsVisible","source":"<a name=\"cdockablepane__isvisible\"></a>  CDockablePane::IsVisible"},{"content":"Determines whether the current pane is visible.","pos":[50020,50067]},{"pos":[50127,50139],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[50143,50202],"content":"<ph id=\"ph1\">`TRUE`</ph> if the dockable pane is visible; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the dockable pane is visible; otherwise, `FALSE`."},{"pos":[50212,50219],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to determine whether a dockable pane is visible.","pos":[50223,50288]},{"content":"You can use this method instead of calling <bpt id=\"p1\">[</bpt>CWnd::IsWindowVisible<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__iswindowvisible)</ept> or testing for the <ph id=\"ph1\">`WS_VISIBLE`</ph> style.","pos":[50289,50451],"source":" You can use this method instead of calling [CWnd::IsWindowVisible](../../mfc/reference/cwnd-class.md#cwnd__iswindowvisible) or testing for the `WS_VISIBLE` style."},{"content":"The returned visibility state depends on whether autohide mode is enabled or disabled and on the value of the <bpt id=\"p1\">[</bpt>CDockablePane::IsHideInAutoHideMode<ept id=\"p1\">](#cdockablepane__ishideinautohidemode)</ept> property.","pos":[50452,50647],"source":" The returned visibility state depends on whether autohide mode is enabled or disabled and on the value of the [CDockablePane::IsHideInAutoHideMode](#cdockablepane__ishideinautohidemode) property."},{"pos":[50654,50777],"content":"If the dockable pane is in autohide mode and <ph id=\"ph1\">`IsHideInAutoHideMode`</ph> returns <ph id=\"ph2\">`FALSE`</ph> the visibility state is always <ph id=\"ph3\">`FALSE`</ph>.","source":"If the dockable pane is in autohide mode and `IsHideInAutoHideMode` returns `FALSE` the visibility state is always `FALSE`."},{"pos":[50784,50952],"content":"If the dockable pane is in autohide mode and <ph id=\"ph1\">`IsHideInAutoHideMode`</ph> returns <ph id=\"ph2\">`TRUE`</ph> the visibility state depends on the visibility state of the related autohide toolbar.","source":"If the dockable pane is in autohide mode and `IsHideInAutoHideMode` returns `TRUE` the visibility state depends on the visibility state of the related autohide toolbar."},{"pos":[50959,51138],"content":"If the dockable pane is not in autohide mode, the visibility state is determined by the <bpt id=\"p1\">[</bpt>CBasePane::IsVisible<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__isvisible)</ept> method.","source":"If the dockable pane is not in autohide mode, the visibility state is determined by the [CBasePane::IsVisible](../../mfc/reference/cbasepane-class.md#cbasepane__isvisible) method."},{"pos":[51148,51233],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__m_bdisableanimation\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::m_bDisableAnimation","linkify":"<a name=\"cdockablepane__m_bdisableanimation\"></a>  CDockablePane::m_bDisableAnimation","source":"<a name=\"cdockablepane__m_bdisableanimation\"></a>  CDockablePane::m_bDisableAnimation"},{"content":"Specifies whether autohide animation of the dockable pane is disabled.","pos":[51237,51307]},{"pos":[51383,51472],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__m_bhideinautohidemode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::m_bHideInAutoHideMode","linkify":"<a name=\"cdockablepane__m_bhideinautohidemode\"></a>  CDockablePane::m_bHideInAutoHideMode","source":"<a name=\"cdockablepane__m_bhideinautohidemode\"></a>  CDockablePane::m_bHideInAutoHideMode"},{"content":"Determines the behavior of the pane when the pane is in autohide mode.","pos":[51476,51546]},{"pos":[51624,51631],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This value affects all docking panes in the application.","pos":[51635,51691]},{"pos":[51698,51882],"content":"If you set this member to <ph id=\"ph1\">`TRUE`</ph>, dockable panes are hidden or shown with their related autohide toolbars and buttons when you call <bpt id=\"p1\">[</bpt>CDockablePane::ShowPane<ept id=\"p1\">](#cdockablepane__showpane)</ept>.","source":"If you set this member to `TRUE`, dockable panes are hidden or shown with their related autohide toolbars and buttons when you call [CDockablePane::ShowPane](#cdockablepane__showpane)."},{"pos":[51889,52034],"content":"If you set this member to <ph id=\"ph1\">`FALSE`</ph>, dockable panes are activated or deactivated when you call <bpt id=\"p1\">[</bpt>CDockablePane::ShowPane<ept id=\"p1\">](#cdockablepane__showpane)</ept>.","source":"If you set this member to `FALSE`, dockable panes are activated or deactivated when you call [CDockablePane::ShowPane](#cdockablepane__showpane)."},{"pos":[52044,52117],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__m_nslidesteps\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::m_nSlideSteps","linkify":"<a name=\"cdockablepane__m_nslidesteps\"></a>  CDockablePane::m_nSlideSteps","source":"<a name=\"cdockablepane__m_nslidesteps\"></a>  CDockablePane::m_nSlideSteps"},{"content":"Specifies the animation speed of the pane when it is in autohide mode.","pos":[52121,52191]},{"pos":[52260,52267],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For a faster animation effect, decrease this value.","pos":[52271,52322]},{"content":"For a slower animation effect, increase this value.","pos":[52323,52374]},{"pos":[52384,52469],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__onafterchangeparent\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::OnAfterChangeParent","linkify":"<a name=\"cdockablepane__onafterchangeparent\"></a>  CDockablePane::OnAfterChangeParent","source":"<a name=\"cdockablepane__onafterchangeparent\"></a>  CDockablePane::OnAfterChangeParent"},{"pos":[52652,52662],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[52666,52686],"content":"[in] <ph id=\"ph1\">`pWndOldParent`</ph>","source":"[in] `pWndOldParent`"},{"pos":[52696,52703],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[52713,52808],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__onafterdockfromminiframe\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::OnAfterDockFromMiniFrame","linkify":"<a name=\"cdockablepane__onafterdockfromminiframe\"></a>  CDockablePane::OnAfterDockFromMiniFrame","source":"<a name=\"cdockablepane__onafterdockfromminiframe\"></a>  CDockablePane::OnAfterDockFromMiniFrame"},{"content":"Called by the framework when a floating docking bar docks at a frame window.","pos":[52812,52888]},{"pos":[52954,52961],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, this method does nothing.","pos":[52965,53002]},{"pos":[53012,53099],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__onbeforechangeparent\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::OnBeforeChangeParent","linkify":"<a name=\"cdockablepane__onbeforechangeparent\"></a>  CDockablePane::OnBeforeChangeParent","source":"<a name=\"cdockablepane__onbeforechangeparent\"></a>  CDockablePane::OnBeforeChangeParent"},{"content":"The framework calls this method before it changes the parent of the pane.","pos":[53103,53176]},{"pos":[53289,53299],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pWndNewParent`</ph>","pos":[53303,53323],"source":"[in] `pWndNewParent`"},{"content":"A pointer to the new parent window.","pos":[53327,53362]},{"content":"[in] <ph id=\"ph1\">`bDelay`</ph>","pos":[53369,53382],"source":"[in] `bDelay`"},{"content":"<ph id=\"ph1\"> `BOOL`</ph> that specifies whether to delay recalculation of the docking layout if the pane is undocked.","pos":[53385,53485],"source":" `BOOL` that specifies whether to delay recalculation of the docking layout if the pane is undocked."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CDockablePane::UndockPane<ept id=\"p1\">](#cdockablepane__undockpane)</ept>.","pos":[53486,53568],"source":" For more information, see [CDockablePane::UndockPane](#cdockablepane__undockpane)."},{"pos":[53578,53585],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the pane is docked and the new parent does not allow docking, this method undocks the pane.","pos":[53589,53683]},{"content":"If the pane is being converted to a tabbed document, this method stores its recent docking position.","pos":[53690,53790]},{"content":"The framework uses the recent docking position to restore the position of the pane when it is converted back to a docked state.","pos":[53791,53918]},{"pos":[53928,54001],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__onbeforefloat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::OnBeforeFloat","linkify":"<a name=\"cdockablepane__onbeforefloat\"></a>  CDockablePane::OnBeforeFloat","source":"<a name=\"cdockablepane__onbeforefloat\"></a>  CDockablePane::OnBeforeFloat"},{"content":"The framework calls this method before a pane transitions to a floating state.","pos":[54005,54083]},{"pos":[54193,54203],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`rectFloat`</ph>","pos":[54207,54223],"source":"[in] `rectFloat`"},{"content":"Specifies the position and size of the pane when it is in a floating state.","pos":[54227,54302]},{"content":"[in] <ph id=\"ph1\">`dockMethod`</ph>","pos":[54309,54326],"source":"[in] `dockMethod`"},{"content":"Specifies the docking method.","pos":[54330,54359]},{"content":"See <bpt id=\"p1\">[</bpt>CPane::DockPane<ept id=\"p1\">](../../mfc/reference/cpane-class.md#cpane__dockpane)</ept> for a list of possible values.","pos":[54360,54464],"source":" See [CPane::DockPane](../../mfc/reference/cpane-class.md#cpane__dockpane) for a list of possible values."},{"pos":[54474,54486],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[54490,54544],"content":"<ph id=\"ph1\">`TRUE`</ph> if the pane can be floated; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the pane can be floated; otherwise, `FALSE`."},{"pos":[54554,54561],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called by the framework when a pane is about to float.","pos":[54565,54634]},{"content":"You can override this method in a derived class if you want to perform any processing before the pane floats.","pos":[54635,54744]},{"pos":[54754,54829],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__onpressbuttons\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::OnPressButtons","linkify":"<a name=\"cdockablepane__onpressbuttons\"></a>  CDockablePane::OnPressButtons","source":"<a name=\"cdockablepane__onpressbuttons\"></a>  CDockablePane::OnPressButtons"},{"pos":[54833,54938],"content":"Called when the user presses a caption button other than the <ph id=\"ph1\">`AFX_HTCLOSE`</ph> and <ph id=\"ph2\">`AFX_HTMAXBUTTON`</ph> buttons.","source":"Called when the user presses a caption button other than the `AFX_HTCLOSE` and `AFX_HTMAXBUTTON` buttons."},{"pos":[55003,55013],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nHit`</ph>","pos":[55017,55028],"source":"[in] `nHit`"},{"content":"This parameter is not used.","pos":[55032,55059]},{"pos":[55069,55076],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you add a custom button to the caption of a dockable pane, override this method to receive notifications when a user presses the button.","pos":[55080,55219]},{"pos":[55229,55290],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__onslide\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::OnSlide","linkify":"<a name=\"cdockablepane__onslide\"></a>  CDockablePane::OnSlide","source":"<a name=\"cdockablepane__onslide\"></a>  CDockablePane::OnSlide"},{"content":"Called by the framework to animate the pane when it is in autohide mode.","pos":[55294,55366]},{"pos":[55429,55439],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bSlideOut`</ph>","pos":[55443,55459],"source":"[in] `bSlideOut`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to show the pane; <ph id=\"ph2\">`FALSE`</ph> to hide the pane.","pos":[55462,55513],"source":" `TRUE` to show the pane; `FALSE` to hide the pane."},{"pos":[55523,55530],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived class to implement custom autohide effects.","pos":[55534,55611]},{"pos":[55621,55726],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__removefromdefaultpanedividier\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::RemoveFromDefaultPaneDividier","linkify":"<a name=\"cdockablepane__removefromdefaultpanedividier\"></a>  CDockablePane::RemoveFromDefaultPaneDividier","source":"<a name=\"cdockablepane__removefromdefaultpanedividier\"></a>  CDockablePane::RemoveFromDefaultPaneDividier"},{"content":"The framework calls this method when a pane is being undocked.","pos":[55730,55792]},{"pos":[55855,55862],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[55866,55958],"content":"This method sets the default pane divider to <ph id=\"ph1\">`NULL`</ph> and removes the pane from its container.","source":"This method sets the default pane divider to `NULL` and removes the pane from its container."},{"pos":[55968,56037],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__replacepane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::ReplacePane","linkify":"<a name=\"cdockablepane__replacepane\"></a>  CDockablePane::ReplacePane","source":"<a name=\"cdockablepane__replacepane\"></a>  CDockablePane::ReplacePane"},{"content":"Replaces the pane with a specified pane.","pos":[56041,56081]},{"pos":[56236,56246],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pBarToReplaceWith`</ph>","pos":[56250,56274],"source":"[in] `pBarToReplaceWith`"},{"content":"A pointer to a dockable pane.","pos":[56278,56307]},{"content":"[in] <ph id=\"ph1\">`dockMethod`</ph>","pos":[56314,56331],"source":"[in] `dockMethod`"},{"content":"Not used.","pos":[56335,56344]},{"content":"[in] <ph id=\"ph1\">`bRegisterWithFrame`</ph>","pos":[56351,56376],"source":"[in] `bRegisterWithFrame`"},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, the new pane is registered with the docking manager of the parent of the old pane.","pos":[56380,56473],"source":" If `TRUE`, the new pane is registered with the docking manager of the parent of the old pane."},{"content":"The new pane is inserted at the index of the old pane in the list of panes that is maintained by the docking manager.","pos":[56474,56591]},{"pos":[56601,56613],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[56617,56677],"content":"<ph id=\"ph1\">`TRUE`</ph> if the replacement is successful; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the replacement is successful; otherwise, `FALSE`."},{"pos":[56687,56784],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__restoredefaultpanedivider\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::RestoreDefaultPaneDivider","linkify":"<a name=\"cdockablepane__restoredefaultpanedivider\"></a>  CDockablePane::RestoreDefaultPaneDivider","source":"<a name=\"cdockablepane__restoredefaultpanedivider\"></a>  CDockablePane::RestoreDefaultPaneDivider"},{"content":"When a pane is deserialized, the framework calls this method to restore the default pane divider.","pos":[56788,56885]},{"pos":[56944,56951],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The restored default pane divider replaces the current default pane divider, if it exists.","pos":[56955,57045]},{"pos":[57055,57132],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__setautohidemode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::SetAutoHideMode","linkify":"<a name=\"cdockablepane__setautohidemode\"></a>  CDockablePane::SetAutoHideMode","source":"<a name=\"cdockablepane__setautohidemode\"></a>  CDockablePane::SetAutoHideMode"},{"content":"Toggles the docking pane between visible and autohide mode.","pos":[57136,57195]},{"pos":[57381,57391],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bMode`</ph>","pos":[57395,57407],"source":"[in] `bMode`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to enable autohide mode; <ph id=\"ph2\">`FALSE`</ph> to enable regular docking mode.","pos":[57410,57482],"source":" `TRUE` to enable autohide mode; `FALSE` to enable regular docking mode."},{"content":"[in] <ph id=\"ph1\">`dwAlignment`</ph>","pos":[57489,57507],"source":"[in] `dwAlignment`"},{"content":"Specifies the alignment of the autohide pane to create.","pos":[57511,57566]},{"content":"[in] [out] <ph id=\"ph1\">`pCurrAutoHideBar`</ph>","pos":[57573,57602],"source":"[in] [out] `pCurrAutoHideBar`"},{"content":"A pointer to the current autohide toolbar.","pos":[57606,57648]},{"content":"Can be <ph id=\"ph1\">`NULL`</ph>.","pos":[57649,57663],"source":" Can be `NULL`."},{"content":"[in] <ph id=\"ph1\">`bUseTimer`</ph>","pos":[57670,57686],"source":"[in] `bUseTimer`"},{"content":"Specifies whether to use the autohide effect when the user switches the pane to autohide mode or to hide the pane immediately.","pos":[57690,57816]},{"pos":[57826,57838],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[57842,57933],"content":"The autohide toolbar that was created as a result of switching to autohide mode, or <ph id=\"ph1\">`NULL`</ph>.","source":"The autohide toolbar that was created as a result of switching to autohide mode, or `NULL`."},{"pos":[57943,57950],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework calls this method when a user clicks the pin button to switch the dockable pane to autohide mode or to regular docking mode.","pos":[57954,58092]},{"content":"Call this method to switch a dockable pane to autohide mode programmatically.","pos":[58099,58176]},{"content":"The pane must be docked to the main frame window ( <bpt id=\"p1\">[</bpt>CDockablePane::GetDefaultPaneDivider<ept id=\"p1\">](#cdockablepane__getdefaultpanedivider)</ept> must return a valid pointer to the <bpt id=\"p2\">[</bpt>CPaneDivider<ept id=\"p2\">](../../mfc/reference/cpanedivider-class.md)</ept>).","pos":[58177,58400],"source":" The pane must be docked to the main frame window ( [CDockablePane::GetDefaultPaneDivider](#cdockablepane__getdefaultpanedivider) must return a valid pointer to the [CPaneDivider](../../mfc/reference/cpanedivider-class.md))."},{"pos":[58410,58493],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__setautohideparents\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::SetAutoHideParents","linkify":"<a name=\"cdockablepane__setautohideparents\"></a>  CDockablePane::SetAutoHideParents","source":"<a name=\"cdockablepane__setautohideparents\"></a>  CDockablePane::SetAutoHideParents"},{"content":"Sets the auto-hide button and auto-hide toolbar for the pane.","pos":[58497,58558]},{"pos":[58672,58682],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pToolBar`</ph>","pos":[58686,58701],"source":"[in] `pToolBar`"},{"content":"Pointer to an auto-hide toolbar.","pos":[58705,58737]},{"content":"[in] <ph id=\"ph1\">`pBtn`</ph>","pos":[58744,58755],"source":"[in] `pBtn`"},{"content":"Pointer to an auto-hide button.","pos":[58759,58790]},{"pos":[58800,58905],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__setlastpercentinpanecontainer\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::SetLastPercentInPaneContainer","linkify":"<a name=\"cdockablepane__setlastpercentinpanecontainer\"></a>  CDockablePane::SetLastPercentInPaneContainer","source":"<a name=\"cdockablepane__setlastpercentinpanecontainer\"></a>  CDockablePane::SetLastPercentInPaneContainer"},{"content":"Sets the percentage of space that a pane occupies in its container.","pos":[58909,58976]},{"pos":[59044,59054],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`n`</ph>","pos":[59058,59066],"source":"[in] `n`"},{"content":"An <ph id=\"ph1\">`int`</ph> that specifies the percentage of space that the pane occupies in its container.","pos":[59070,59158],"source":" An `int` that specifies the percentage of space that the pane occupies in its container."},{"pos":[59168,59175],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework adjusts the pane to use the new value when the layout is recalculated.","pos":[59179,59263]},{"pos":[59273,59378],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__setrestoreddefaultpanedivider\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::SetRestoredDefaultPaneDivider","linkify":"<a name=\"cdockablepane__setrestoreddefaultpanedivider\"></a>  CDockablePane::SetRestoredDefaultPaneDivider","source":"<a name=\"cdockablepane__setrestoreddefaultpanedivider\"></a>  CDockablePane::SetRestoredDefaultPaneDivider"},{"content":"Sets the restored default pane divider.","pos":[59382,59421]},{"pos":[59504,59514],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`hRestoredSlider`</ph>","pos":[59518,59540],"source":"[in] `hRestoredSlider`"},{"content":"A handle to a pane divider (slider).","pos":[59544,59580]},{"pos":[59590,59597],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A restored default pane divider is obtained when a pane is deserialized.","pos":[59601,59673]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CDockablePane::RestoreDefaultPaneDivider<ept id=\"p1\">](#cdockablepane__restoredefaultpanedivider)</ept>.","pos":[59674,59786],"source":" For more information, see [CDockablePane::RestoreDefaultPaneDivider](#cdockablepane__restoredefaultpanedivider)."},{"pos":[59796,59875],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__settabbedpanertc\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::SetTabbedPaneRTC","linkify":"<a name=\"cdockablepane__settabbedpanertc\"></a>  CDockablePane::SetTabbedPaneRTC","source":"<a name=\"cdockablepane__settabbedpanertc\"></a>  CDockablePane::SetTabbedPaneRTC"},{"content":"Sets the runtime class information for a tabbed window that is created when two panes dock together.","pos":[59879,59979]},{"pos":[60048,60058],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pRTC`</ph>","pos":[60062,60073],"source":"[in] `pRTC`"},{"content":"The runtime class information for the tabbed pane.","pos":[60077,60127]},{"pos":[60137,60144],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to set the runtime class information for tabbed panes that are created dynamically.","pos":[60148,60248]},{"content":"This can occur when a user drags one pane to the caption of another pane, or if you call the <bpt id=\"p1\">[</bpt>CDockablePane::AttachToTabWnd<ept id=\"p1\">](#cdockablepane__attachtotabwnd)</ept> method to programmatically create a tabbed pane from two dockable panes.","pos":[60249,60478],"source":" This can occur when a user drags one pane to the caption of another pane, or if you call the [CDockablePane::AttachToTabWnd](#cdockablepane__attachtotabwnd) method to programmatically create a tabbed pane from two dockable panes."},{"content":"The default runtime class is set according to the <ph id=\"ph1\">`dwTabbedStyle`</ph> parameter of <bpt id=\"p1\">[</bpt>CDockablePane::Create<ept id=\"p1\">](#cdockablepane__create)</ept> and <bpt id=\"p2\">[</bpt>CDockablePane::CreateEx<ept id=\"p2\">](#cdockablepane__createex)</ept>.","pos":[60485,60668],"source":"The default runtime class is set according to the `dwTabbedStyle` parameter of [CDockablePane::Create](#cdockablepane__create) and [CDockablePane::CreateEx](#cdockablepane__createex)."},{"content":"To customize the new tabbed panes, derive your class from one of the following classes:","pos":[60669,60756]},{"pos":[60764,60833],"content":"<bpt id=\"p1\">[</bpt>CBaseTabbedPane Class<ept id=\"p1\">](../../mfc/reference/cbasetabbedpane-class.md)</ept>","source":"[CBaseTabbedPane Class](../../mfc/reference/cbasetabbedpane-class.md)"},{"pos":[60841,60902],"content":"<bpt id=\"p1\">[</bpt>CTabbedPane Class<ept id=\"p1\">](../../mfc/reference/ctabbedpane-class.md)</ept>","source":"[CTabbedPane Class](../../mfc/reference/ctabbedpane-class.md)"},{"pos":[60910,60978],"content":"<bpt id=\"p1\">[</bpt>CMFCOutlookBar Class<ept id=\"p1\">](../../mfc/reference/cmfcoutlookbar-class.md)</ept>.","source":"[CMFCOutlookBar Class](../../mfc/reference/cmfcoutlookbar-class.md)."},{"content":"Then, call this method with the pointer to its runtime class information.","pos":[60985,61058]},{"pos":[61068,61131],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__showpane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::ShowPane","linkify":"<a name=\"cdockablepane__showpane\"></a>  CDockablePane::ShowPane","source":"<a name=\"cdockablepane__showpane\"></a>  CDockablePane::ShowPane"},{"content":"Shows or hides a pane.","pos":[61135,61157]},{"pos":[61263,61273],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bShow`</ph>","pos":[61277,61289],"source":"[in] `bShow`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to show the pane; <ph id=\"ph2\">`FALSE`</ph> to hide the pane.","pos":[61292,61343],"source":" `TRUE` to show the pane; `FALSE` to hide the pane."},{"content":"[in] <ph id=\"ph1\">`bDelay`</ph>","pos":[61350,61363],"source":"[in] `bDelay`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to delay adjusting the docking layout; <ph id=\"ph2\">`FALSE`</ph> to adjust the docking layout immediately.","pos":[61366,61462],"source":" `TRUE` to delay adjusting the docking layout; `FALSE` to adjust the docking layout immediately."},{"content":"[in] <ph id=\"ph1\">`bActivate`</ph>","pos":[61469,61485],"source":"[in] `bActivate`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to activate the pane when shown; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","pos":[61488,61548],"source":" `TRUE` to activate the pane when shown; otherwise, `FALSE`."},{"pos":[61558,61565],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[61569,61710],"content":"Call this method instead of the <bpt id=\"p1\">[</bpt>CWnd::ShowWindow<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__showwindow)</ept> when showing or hiding dockable panes.","source":"Call this method instead of the [CWnd::ShowWindow](../../mfc/reference/cwnd-class.md#cwnd__showwindow) when showing or hiding dockable panes."},{"pos":[61720,61777],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__slide\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::Slide","linkify":"<a name=\"cdockablepane__slide\"></a>  CDockablePane::Slide","source":"<a name=\"cdockablepane__slide\"></a>  CDockablePane::Slide"},{"content":"Animates a pane that is in autohide mode.","pos":[61781,61822]},{"pos":[61917,61927],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bSlideOut`</ph>","pos":[61931,61947],"source":"[in] `bSlideOut`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to show the pane; <ph id=\"ph2\">`FALSE`</ph> to hide the pane.","pos":[61950,62001],"source":" `TRUE` to show the pane; `FALSE` to hide the pane."},{"content":"[in] <ph id=\"ph1\">`bUseTimer`</ph>","pos":[62008,62024],"source":"[in] `bUseTimer`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to show or hide the pane with the autohide effect; <ph id=\"ph2\">`FALSE`</ph> to show or hide the pane immediately.","pos":[62027,62131],"source":" `TRUE` to show or hide the pane with the autohide effect; `FALSE` to show or hide the pane immediately."},{"pos":[62141,62148],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework calls this method to animate a pane that is in autohide mode.","pos":[62152,62227]},{"content":"This method uses the <ph id=\"ph1\">`CDockablePane::m_nSlideDefaultTimeOut`</ph> value to determine the time out for the slide effect.","pos":[62234,62348],"source":"This method uses the `CDockablePane::m_nSlideDefaultTimeOut` value to determine the time out for the slide effect."},{"content":"The default value for the time out is 1.","pos":[62349,62389]},{"content":"If you customize the autohide algorithm, modify this member to change the time out.","pos":[62390,62473]},{"pos":[62483,62558],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__toggleautohide\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::ToggleAutoHide","linkify":"<a name=\"cdockablepane__toggleautohide\"></a>  CDockablePane::ToggleAutoHide","source":"<a name=\"cdockablepane__toggleautohide\"></a>  CDockablePane::ToggleAutoHide"},{"content":"Toggles the pane between always visible and auto-hide mode.","pos":[62562,62621]},{"pos":[62677,62684],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[62688,62813],"content":"This method toggles auto-hide mode for the pane by calling <bpt id=\"p1\">[</bpt>CDockablePane::SetAutoHideMode<ept id=\"p1\">](#cdockablepane__setautohidemode)</ept>.","source":"This method toggles auto-hide mode for the pane by calling [CDockablePane::SetAutoHideMode](#cdockablepane__setautohidemode)."},{"pos":[62823,62890],"content":"<bpt id=\"p1\">&lt;a name=\"cdockablepane__undockpane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CDockablePane::UndockPane","linkify":"<a name=\"cdockablepane__undockpane\"></a>  CDockablePane::UndockPane","source":"<a name=\"cdockablepane__undockpane\"></a>  CDockablePane::UndockPane"},{"content":"Undocks a pane from either the main frame window or a miniframe window container.","pos":[62894,62975]},{"pos":[63046,63056],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bDelay`</ph>","pos":[63060,63073],"source":"[in] `bDelay`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to delay calculating the docking layout; <ph id=\"ph2\">`FALSE`</ph> to recalculate the docking layout immediately.","pos":[63076,63179],"source":" `TRUE` to delay calculating the docking layout; `FALSE` to recalculate the docking layout immediately."},{"pos":[63189,63196],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to undock a pane from the main frame window or from a multi-miniframe window container (a pane that is floating in a single miniframe window with other panes).","pos":[63200,63376]},{"content":"You must undock a pane before you perform any external operation that is not performed by the <bpt id=\"p1\">[</bpt>CDockingManager<ept id=\"p1\">](../../mfc/reference/cdockingmanager-class.md)</ept>.","pos":[63383,63541],"source":"You must undock a pane before you perform any external operation that is not performed by the [CDockingManager](../../mfc/reference/cdockingmanager-class.md)."},{"content":"For example, you must undock a pane to move it programmatically from one location to another.","pos":[63542,63635]},{"content":"The framework automatically undocks panes before they are destroyed.","pos":[63642,63710]},{"pos":[63719,63727],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[63731,63779],"source":"[Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Classes<ept id=\"p1\">](../../mfc/reference/mfc-classes.md)</ept><ph id=\"ph1\"> </ph>","pos":[63782,63829],"source":" [Classes](../../mfc/reference/mfc-classes.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CPane Class<ept id=\"p1\">](../../mfc/reference/cpane-class.md)</ept>","pos":[63832,63882],"source":" [CPane Class](../../mfc/reference/cpane-class.md)"}],"content":"---\ntitle: \"CDockablePane Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CDockablePane\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CDockablePane class\"\nms.assetid: e2495f4c-765f-48f9-a2e2-e45e47608d91\ncaps.latest.revision: 34\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CDockablePane Class\nImplements a pane that can either be docked in a dock site or included in a tabbed pane.  \n  \n## Syntax  \n  \n```  \nclass CDockablePane : public CPane  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CDockablePane::CDockablePane](#cdockablepane__cdockablepane)|Constructs and initializes a `CDockablePane` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CDockablePane::AttachToTabWnd](#cdockablepane__attachtotabwnd)|Attaches a pane to another pane. This creates a tabbed pane.|  \n|[CDockablePane::CalcFixedLayout](#cdockablepane__calcfixedlayout)|Returns the size of the pane rectangle.|  \n|[CDockablePane::CanAcceptMiniFrame](#cdockablepane__canacceptminiframe)|Determines whether the specified mini frame can be docked to the pane.|  \n|[CDockablePane::CanAcceptPane](#cdockablepane__canacceptpane)|Determines whether another pane can be docked to the current pane.|  \n|[CDockablePane::CanAutoHide](#cdockablepane__canautohide)|Determines whether the pane supports auto-hide mode. (Overrides [CBasePane::CanAutoHide](../../mfc/reference/cbasepane-class.md#cbasepane__canautohide).)|  \n|[CDockablePane::CanBeAttached](#cdockablepane__canbeattached)|Determines whether the current pane can be docked to another pane.|  \n|[CDockablePane::ConvertToTabbedDocument](#cdockablepane__converttotabbeddocument)|Converts one or more dockable panes to MDI tabbed documents.|  \n|[CDockablePane::CopyState](#cdockablepane__copystate)|Copies the state of a dockable pane.|  \n|[CDockablePane::Create](#cdockablepane__create)|Creates the Windows control and attaches it to the `CDockablePane` object.|  \n|[CDockablePane::CreateDefaultPaneDivider](#cdockablepane__createdefaultpanedivider)|Creates a default divider for the pane as it is being docked to a frame window.|  \n|[CDockablePane::CreateEx](#cdockablepane__createex)|Creates the Windows control and attaches it to the `CDockablePane` object.|  \n|[CDockablePane::CreateTabbedPane](#cdockablepane__createtabbedpane)|Creates a tabbed pane from the current pane.|  \n|[CDockablePane::DockPaneContainer](#cdockablepane__dockpanecontainer)|Docks a container to the pane.|  \n|[CDockablePane::DockPaneStandard](#cdockablepane__dockpanestandard)|Docks a pane by using outline (standard) docking.|  \n|`CDockablePane::DockToFrameWindow`|Used internally. To dock a pane, use [CPane::DockPane](../../mfc/reference/cpane-class.md#cpane__dockpane) or [CDockablePane::DockToWindow](#cdockablepane__docktowindow).|  \n|[CDockablePane::DockToRecentPos](#cdockablepane__docktorecentpos)|Docks a pane to its stored recent docking position.|  \n|[CDockablePane::DockToWindow](#cdockablepane__docktowindow)|Docks one docking pane to another docking pane.|  \n|[CDockablePane::EnableAutohideAll](#cdockablepane__enableautohideall)|Enables or disables auto-hide mode for this pane together with other panes in the container.|  \n|[CDockablePane::EnableGripper](#cdockablepane__enablegripper)|Shows or hides the caption (gripper).|  \n|[CDockablePane::GetAHRestoredRect](#cdockablepane__getahrestoredrect)|Specifies the position of the pane when visible in auto-hide mode.|  \n|[CDockablePane::GetAHSlideMode](#cdockablepane__getahslidemode)|Retrieves the auto hide slide mode for the pane.|  \n|`CDockablePane::GetAutoHideButton`|Used internally.|  \n|`CDockablePane::GetAutoHideToolBar`|Used internally.|  \n|[CDockablePane::GetCaptionHeight](#cdockablepane__getcaptionheight)|Returns the height of the current caption.|  \n|[CDockablePane::GetDefaultPaneDivider](#cdockablepane__getdefaultpanedivider)|Returns the default pane divider for the pane's container.|  \n|[CDockablePane::GetDockingStatus](#cdockablepane__getdockingstatus)|Determines the ability of a pane to be docked based on the provided pointer location.|  \n|[CDockablePane::GetDragSensitivity](#cdockablepane__getdragsensitivity)|Returns the drag sensitivity of a docking pane.|  \n|[CDockablePane::GetLastPercentInPaneContainer](#cdockablepane__getlastpercentinpanecontainer)|Retrieves the percentage of space that a pane occupies within its container.|  \n|[CDockablePane::GetTabArea](#cdockablepane__gettabarea)|Retrieves the tab area for the pane.|  \n|[CDockablePane::GetTabbedPaneRTC](#cdockablepane__gettabbedpanertc)|Returns the runtime class information about a tabbed window that is created when another pane docks to the current pane.|  \n|[CDockablePane::HasAutoHideMode](#cdockablepane__hasautohidemode)|Specifies whether a docking pane can be switched to auto-hide mode.|  \n|[CDockablePane::HitTest](#cdockablepane__hittest)|Specifies the specific location in a pane where the user clicks a mouse.|  \n|`CDockablePane::IsAccessibilityCompatible`|Used internally.|  \n|[CDockablePane::IsAutohideAllEnabled](#cdockablepane__isautohideallenabled)|Indicates whether the docking pane and all other panes in the container can be placed in auto-hide mode.|  \n|[CDockablePane::IsAutoHideMode](#cdockablepane__isautohidemode)|Determines whether a pane is in auto-hide mode.|  \n|`CDockablePane::IsChangeState`|Used internally.|  \n|[CDockablePane::IsDocked](#cdockablepane__isdocked)|Determines whether the current pane is docked.|  \n|[CDockablePane::IsHideInAutoHideMode](#cdockablepane__ishideinautohidemode)|Determines the behavior of a pane that is in auto-hide mode if it is shown (or hidden) by calling `ShowPane`.|  \n|[CDockablePane::IsInFloatingMultiPaneFrameWnd](#cdockablepane__isinfloatingmultipaneframewnd)|Specifies whether the pane is in a multi-pane frame window.|  \n|[CDockablePane::IsResizable](#cdockablepane__isresizable)|Specifies whether the pane is resizable.|  \n|[CDockablePane::IsTabLocationBottom](#cdockablepane__istablocationbottom)|Specifies whether tabs are located at the top or bottom of the pane.|  \n|[CDockablePane::IsTracked](#cdockablepane__istracked)|Specifies whether a pane is being dragged by the user.|  \n|[CDockablePane::IsVisible](#cdockablepane__isvisible)|Determines whether the current pane is visible.|  \n|[CDockablePane::LoadState](http://msdn.microsoft.com/en-us/96110136-4f46-4764-8a76-3b4abaf77917)|Used internally.|  \n|[CDockablePane::OnAfterChangeParent](#cdockablepane__onafterchangeparent)|Called by the framework when the parent of a pane has changed. (Overrides [CPane::OnAfterChangeParent](../../mfc/reference/cpane-class.md#cpane__onafterchangeparent).)|  \n|[CDockablePane::OnAfterDockFromMiniFrame](#cdockablepane__onafterdockfromminiframe)|Called by the framework when a floating docking bar docks at a frame window.|  \n|[CDockablePane::OnBeforeChangeParent](#cdockablepane__onbeforechangeparent)|Called by the framework when the parent of the pane is about to change. (Overrides [CPane::OnBeforeChangeParent](../../mfc/reference/cpane-class.md#cpane__onbeforechangeparent).)|  \n|[CDockablePane::OnBeforeFloat](#cdockablepane__onbeforefloat)|Called by the framework when a pane is about to float. (Overrides [CPane::OnBeforeFloat](../../mfc/reference/cpane-class.md#cpane__onbeforefloat).)|  \n|[CDockablePane::RemoveFromDefaultPaneDividier](#cdockablepane__removefromdefaultpanedividier)|The framework calls this method when a pane is being undocked.|  \n|[CDockablePane::ReplacePane](#cdockablepane__replacepane)|Replaces the pane with a specified pane.|  \n|[CDockablePane::RestoreDefaultPaneDivider](#cdockablepane__restoredefaultpanedivider)|The framework calls this method as a pane is deserialized to restore the default pane divider.|  \n|`CDockablePane::SaveState`|Used internally.|  \n|`CDockablePane::Serialize`|Serializes the pane. (Overrides `CBasePane::Serialize`.)|  \n|[CDockablePane::SetAutoHideMode](#cdockablepane__setautohidemode)|Toggles the docking pane between visible and auto-hide mode.|  \n|[CDockablePane::SetAutoHideParents](#cdockablepane__setautohideparents)|Sets the auto-hide button and auto-hide toolbar for the pane.|  \n|`CDockablePane::SetDefaultPaneDivider`|Used internally.|  \n|[CDockablePane::SetLastPercentInPaneContainer](#cdockablepane__setlastpercentinpanecontainer)|Sets the percentage of space that a pane occupies within its container.|  \n|`CDockablePane::SetResizeMode`|Used internally.|  \n|[CDockablePane::SetRestoredDefaultPaneDivider](#cdockablepane__setrestoreddefaultpanedivider)|Sets the restored default pane divider.|  \n|[CDockablePane::SetTabbedPaneRTC](#cdockablepane__settabbedpanertc)|Sets the runtime class information for a tabbed window that is created when two panes dock together.|  \n|[CDockablePane::ShowPane](#cdockablepane__showpane)|Shows or hides a pane.|  \n|[CDockablePane::Slide](#cdockablepane__slide)|Shows or hides a pane with a sliding animation which displays only when the pane is in auto-hide mode.|  \n|[CDockablePane::ToggleAutoHide](#cdockablepane__toggleautohide)|Toggles auto-hide mode. (Overrides [CPane::ToggleAutoHide](../../mfc/reference/cpane-class.md#cpane__toggleautohide) .)|  \n|[CDockablePane::UndockPane](#cdockablepane__undockpane)|Undocks a pane from either the main frame window or a miniframe window container.|  \n|`CDockablePane::UnSetAutoHideMode`|Used internally. To set the auto-hide mode, use [CDockablePane::SetAutoHideMode](#cdockablepane__setautohidemode)|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CDockablePane::CheckAutoHideCondition](#cdockablepane__checkautohidecondition)|Determines whether the docking pane is hidden (in auto-hide mode).|  \n|[CDockablePane::CheckStopSlideCondition](#cdockablepane__checkstopslidecondition)|Determines when an auto-hide docking pane should stop sliding.|  \n|[CDockablePane::DrawCaption](#cdockablepane__drawcaption)|Draws the docking pane caption (gripper).|  \n|[CDockablePane::OnPressButtons](#cdockablepane__onpressbuttons)|Called when the user presses a caption button other than the `AFX_HTCLOSE` and `AFX_HTMAXBUTTON` buttons.|  \n|[CDockablePane::OnSlide](#cdockablepane__onslide)|Called by the framework to render the auto-hide slide effect when the pane is either shown or hidden.|  \n  \n### Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CDockablePane::m_bDisableAnimation](#cdockablepane__m_bdisableanimation)|Specifies whether auto-hide animation of the dockable pane is disabled.|  \n|[CDockablePane::m_bHideInAutoHideMode](#cdockablepane__m_bhideinautohidemode)|Determines the behavior of the pane when the pane is in auto-hide mode.|  \n|[CDockablePane::m_nSlideSteps](#cdockablepane__m_nslidesteps)|Specifies the animation speed of the pane when it is being shown or hidden when in auto-hide mode.|  \n  \n## Remarks  \n `CDockablePane` implements the following functionality:  \n  \n-   Docking a pane to a main frame window.  \n  \n-   Switching a pane to auto-hide mode.  \n  \n-   Attaching a pane to a tabbed window.  \n  \n-   Floating a pane in a miniframe window.  \n  \n-   Docking a pane to another pane that is floating in a miniframe window.  \n  \n-   Resizing a pane.  \n  \n-   Loading and saving state for a docking pane.  \n  \n    > [!NOTE]\n    >  State information is saved to the Windows registry.  \n  \n-   Creating a pane with or without a caption. The caption can have a text label and it can be filled with a gradient color.  \n  \n-   Dragging a pane while displaying the contents of the pane  \n  \n-   Dragging a pane while displaying a drag rectangle.  \n  \n To use a docking pane in your application, derive your pane class from the `CDockablePane` class. Either embed the derived object into the main frame window object or into a window object that controls the instance of your pane. Then call the [CDockablePane::Create](#cdockablepane__create) method or the [CDockablePane::CreateEx](#cdockablepane__createex) method when you process the `WM_CREATE` message in the main frame window. Finally, set up the pane object by calling [CBasePane::EnableDocking](../../mfc/reference/cbasepane-class.md#cbasepane__enabledocking), [CBasePane::DockPane](../../mfc/reference/cbasepane-class.md#cbasepane__dockpane), or [CDockablePane::AttachToTabWnd](#cdockablepane__attachtotabwnd).  \n  \n## Customization Tips  \n The following tips apply to `CDockablePane` objects:  \n  \n-   If you call [CDockablePane::AttachToTabWnd](#cdockablepane__attachtotabwnd) for two non-tabbed, dockable panes, a pointer to a tabbed window will be returned in the `ppTabbedControlBar` parameter. You can continue to add tabs to the tabbed window by using this parameter.  \n  \n-   The kind of tabbed pane that is created by [CDockablePane::AttachToTabWnd](#cdockablepane__attachtotabwnd) is determined by the `CDockablePane` object in the `pTabControlBarAttachTo` parameter. You can call [CDockablePane::SetTabbedPaneRTC](#cdockablepane__settabbedpanertc) to set the kind of tabbed pane that the `CDockablePane` will create. The default type is determined by the `dwTabbedStyle` of [CDockablePane::Create](#cdockablepane__create) when you first create the `CDockablePane`. If `dwTabbedStyle` is AFX_CBRS_OUTLOOK_TABS the default type is [CMFCOutlookBar Class](../../mfc/reference/cmfcoutlookbar-class.md); if `dwTabbedStyle` is AFX_CBRS_REGULAR_TABS the default type is [CTabbedPane Class](../../mfc/reference/ctabbedpane-class.md).  \n  \n-   If you want to dock one dockable pane to another, call the [CDockablePane::DockToWindow](#cdockablepane__docktowindow) method. The original pane must be docked somewhere before you call this method.  \n  \n-   The member variable [CDockablePane::m_bHideInAutoHideMode](#cdockablepane__m_bhideinautohidemode) controls how dockable panes behave in auto hide mode when you call [CDockablePane::ShowPane](#cdockablepane__showpane). If this member variable is set to `TRUE`, dockable panes and their auto hide buttons will be hidden. Otherwise, they will slide in and out.  \n  \n-   You can disable auto-hide animation by setting the [CDockablePane::m_bDisableAnimation](#cdockablepane__m_bdisableanimation) member variable to `TRUE`.  \n  \n## Example  \n The following example demonstrates how to configure a `CDockablePane` object by using various methods in the `CDockablePane` class. The example illustrates how to enable the auto-hide all feature for the dockable pane, enable the caption or the gripper, enable the auto-hide mode, show the pane, and animate a pane that is in auto-hide mode. This code snippet is part of the [Visual Studio Demo sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_VisualStudioDemo#27](../../mfc/codesnippet/cpp/cdockablepane-class_1.cpp)]  \n[!code-cpp[NVC_MFC_VisualStudioDemo#28](../../mfc/codesnippet/cpp/cdockablepane-class_2.cpp)]  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n [CBasePane](../../mfc/reference/cbasepane-class.md)  \n  \n [CPane](../../mfc/reference/cpane-class.md)  \n  \n [CDockablePane](../../mfc/reference/cdockablepane-class.md)  \n  \n## Requirements  \n **Header:** afxDockablePane.h  \n  \n##  <a name=\"cdockablepane__attachtotabwnd\"></a>  CDockablePane::AttachToTabWnd  \n Attaches the current pane to a target pane, creating a tabbed pane.  \n  \n```  \nvirtual CDockablePane* AttachToTabWnd(\n    CDockablePane* pTabControlBarAttachTo,  \n    AFX_DOCK_METHOD dockMethod,  \n    BOOL bSetActive= TRUE,  \n    CDockablePane** ppTabbedControlBar = NULL);\n\n \n```  \n  \n### Parameters  \n [in] [out] `pTabControlBarAttachTo`  \n Specifies the target pane that the current pane attaches to. The target pane must be a dockable pane.  \n  \n [in] `dockMethod`  \n Specifies the docking method.  \n  \n [in] `bSetActive`  \n `TRUE` to activate the tabbed pane after the attach operation; otherwise, `FALSE`.  \n  \n [out] `ppTabbedControlBar`  \n Contains the tabbed pane that results from the attach operation.  \n  \n### Return Value  \n A pointer to the current pane, if it is not a tabbed pane; otherwise a pointer to the tabbed pane that results from the attach operation. The return value is `NULL` if the current pane cannot be attached, or if an error occurs.  \n  \n### Remarks  \n When one dockable pane attaches to another pane using this method, the following occurs:  \n  \n1.  The framework checks whether the target pane `pTabControlBarAttachTo` is a regular docking pane or if it is derived from [CBaseTabbedPane](../../mfc/reference/cbasetabbedpane-class.md).  \n  \n2.  If the target pane is a tabbed pane, the framework adds the current pane to it as a tab.  \n  \n3.  If the target pane is a regular docking pane, the framework creates a tabbed pane.  \n  \n    -   The framework calls `pTabControlBarAttachTo->CreateTabbedPane`. The style of the new tabbed pane depends on the `m_pTabbedControlBarRTC` member. By default, this member is set to the runtime class of [CTabbedPane](../../mfc/reference/ctabbedpane-class.md). If you pass the `AFX_CBRS_OUTLOOK_TABS` style as the `dwTabbedStyle` parameter to the [CDockablePane::Create](#cdockablepane__create) method, the runtime class object is set to the runtime class of [CMFCOutlookBar](../../mfc/reference/cmfcoutlookbar-class.md). You can change this member at any time to change the style of the new pane.  \n  \n    -   When this method creates a tabbed pane, the framework replaces the pointer to `pTabControlBarAttachTo` (if the pane is docked or floating in a multi-miniframe window) with a pointer to the new tabbed pane.  \n  \n    -   The framework adds the `pTabControlBarAttachTo` pane to the tabbed pane as the first tab. The framework then adds the current pane as a second tab.  \n  \n4.  If the current pane is derived from `CBaseTabbedPane`, all of its tabs are moved to `pTabControlBarAttachTo` and the current pane is destroyed. Therefore, be careful when you call this method, because a pointer to the current pane may be invalid when the method returns.  \n  \n If you attach one pane to another when building a docking layout, set `dockMethod` to `DM_SHOW`.  \n  \n You should dock the first pane before you attach another pane to it.  \n  \n##  <a name=\"cdockablepane__calcfixedlayout\"></a>  CDockablePane::CalcFixedLayout  \n Returns the size of the pane rectangle.  \n  \n```  \nvirtual CSize CalcFixedLayout(\n    BOOL bStretch,  \n    BOOL bHorz);\n```  \n  \n### Parameters  \n [in] `bStretch`  \n Not used.  \n  \n [in] `bHorz`  \n Not used.  \n  \n### Return Value  \n A `CSize` object that contains the size of the pane rectangle.  \n  \n##  <a name=\"cdockablepane__canacceptminiframe\"></a>  CDockablePane::CanAcceptMiniFrame  \n Determines whether the specified mini-frame can be docked to the pane.  \n  \n```  \nvirtual BOOL CanAcceptMiniFrame(CPaneFrameWnd* pMiniFrame) const;\n\n \n```  \n  \n### Parameters  \n [in] `pMiniFrame`  \n Pointer to a `CPaneFrameWnd` object.  \n  \n### Return Value  \n `TRUE` if `pMiniFrame` can be docked to the pane; otherwise, `FALSE`.  \n  \n##  <a name=\"cdockablepane__canacceptpane\"></a>  CDockablePane::CanAcceptPane  \n Determines whether another pane can be docked to the current pane.  \n  \n```  \nvirtual BOOL CanAcceptPane(const CBasePane* pBar) const;\n\n \n```  \n  \n### Parameters  \n [in] `pBar`  \n Specifies the pane to dock to the current pane.  \n  \n### Return Value  \n `TRUE` if the specified pane can be docked to this pane; otherwise, `FALSE`.  \n  \n### Remarks  \n The framework calls this method before a pane is docked to the current pane.  \n  \n Override this function in a derived class to enable or disable docking to a specific pane.  \n  \n By default, this method returns `TRUE` if either `pBar` or its parent is of type `CDockablePane`.  \n  \n##  <a name=\"cdockablepane__canautohide\"></a>  CDockablePane::CanAutoHide  \n Determines whether the pane can auto-hide.  \n  \n```  \nvirtual BOOL CanAutoHide() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the pane can auto-hide; otherwise, `FALSE`.  \n  \n### Remarks  \n `CDockablePane::CanAutoHide` returns `FALSE` in any of the following situations:  \n  \n-   The pane has no parent.  \n  \n-   The docking manager does not allow panes to auto-hide.  \n  \n-   The pane is not docked.  \n  \n##  <a name=\"cdockablepane__canbeattached\"></a>  CDockablePane::CanBeAttached  \n Determines whether the current pane can be docked to another pane.  \n  \n```  \nvirtual BOOL CanBeAttached() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the dockable pane can be docked to another pane or to the main frame window; otherwise, `FALSE`.  \n  \n### Remarks  \n By default, this method always returns `TRUE`. Override this method in a derived class to enable or disable docking without calling [CBasePane::EnableDocking](../../mfc/reference/cbasepane-class.md#cbasepane__enabledocking).  \n  \n##  <a name=\"cdockablepane__cdockablepane\"></a>  CDockablePane::CDockablePane  \n Constructs and initializes a [CDockablePane](../../mfc/reference/cdockablepane-class.md) object.  \n  \n```  \nCDockablePane();\n```  \n  \n### Remarks  \n After you construct a dockable pane object, call [CDockablePane::Create](#cdockablepane__create) or [CDockablePane::CreateEx](#cdockablepane__createex) to create it.  \n  \n##  <a name=\"cdockablepane__converttotabbeddocument\"></a>  CDockablePane::ConvertToTabbedDocument  \n Converts one or more dockable panes to MDI tabbed documents.  \n  \n```  \nvirtual void ConvertToTabbedDocument(BOOL bActiveTabOnly = TRUE);\n```  \n  \n### Parameters  \n [in] `bActiveTabOnly`  \n When you convert a `CTabbedPane`, specify `TRUE` to convert only the active tab. Specify `FALSE` to convert all tabs in the pane.  \n  \n##  <a name=\"cdockablepane__checkautohidecondition\"></a>  CDockablePane::CheckAutoHideCondition  \n Determines whether the docking pane is hidden (also known as autohide mode).  \n  \n```  \nvirtual BOOL CheckAutoHideCondition();\n```  \n  \n### Return Value  \n `TRUE` if the hide condition is met; otherwise, `FALSE`.  \n  \n### Remarks  \n The framework uses a timer to periodically check whether to hide an autohide dockable pane. The method returns `TRUE` when the pane is not active, the pane is not being resized, and the mouse pointer is not over the pane.  \n  \n If all the previous conditions are met, the framework calls [CDockablePane::Slide](#cdockablepane__slide) to hide the pane.  \n  \n##  <a name=\"cdockablepane__checkstopslidecondition\"></a>  CDockablePane::CheckStopSlideCondition  \n Determines when an autohide docking pane should stop sliding.  \n  \n```  \nvirtual BOOL CheckStopSlideCondition(BOOL bDirection);\n```  \n  \n### Parameters  \n [in] `bDirection`  \n `TRUE` if the pane is visible; `FALSE` if the pane is hidden.  \n  \n### Return Value  \n `TRUE` if the stop condition is met; otherwise, `FALSE`.  \n  \n### Remarks  \n When a dockable pane is set to autohide mode, the framework uses sliding effects to show or hide the pane. The framework calls this function when the pane is sliding. `CheckStopSlideCondition` returns `TRUE` when the pane is fully visible or when it is fully hidden.  \n  \n Override this method in a derived class to implement custom autohide effects.  \n  \n##  <a name=\"cdockablepane__copystate\"></a>  CDockablePane::CopyState  \n Copies the state of a dockable pane.  \n  \n```  \nvirtual void CopyState(CDockablePane* pOrgBar);\n```  \n  \n### Parameters  \n [in] `pOrgBar`  \n A pointer to a dockable pane.  \n  \n### Remarks  \n `CDockablePane::CopyState` copies the state of `pOrgBar` to the current pane by calling the following methods:  \n  \n- [CPane::CopyState](../../mfc/reference/cpane-class.md#cpane__copystate)  \n  \n- [CDockablePane::GetAHRestoredRect](#cdockablepane__getahrestoredrect)  \n  \n- [CDockablePane::GetAHSlideMode](#cdockablepane__getahslidemode)  \n  \n- [CDockablePane::GetLastPercentInPaneContainer](#cdockablepane__getlastpercentinpanecontainer)  \n  \n- [CDockablePane::IsAutohideAllEnabled](#cdockablepane__isautohideallenabled)  \n  \n##  <a name=\"cdockablepane__create\"></a>  CDockablePane::Create  \n Creates the Windows control and attaches it to the [CDockablePane](../../mfc/reference/cdockablepane-class.md) object.  \n  \n```  \nvirtual BOOL Create(\n    LPCTSTR lpszCaption,  \n    CWnd* pParentWnd,  \n    const RECT& rect,  \n    BOOL bHasGripper,  \n    UINT nID,  \n    DWORD dwStyle,  \n    DWORD dwTabbedStyle = AFX_CBRS_REGULAR_TABS,  \n    DWORD dwControlBarStyle = AFX_DEFAULT_DOCKING_PANE_STYLE,  \n    CCreateContext* pContext = NULL);\n\n \nvirtual BOOL Create(\n    LPCTSTR lpszWindowName,  \n    CWnd* pParentWnd,  \n    CSize sizeDefault,  \n    BOOL bHasGripper,  \n    UINT nID,  \n    DWORD dwStyle = WS_CHILD|WS_VISIBLE|CBRS_TOP|CBRS_HIDE_INPLACE,  \n    DWORD dwTabbedStyle = AFX_CBRS_REGULAR_TABS,  \n    DWORD dwControlBarStyle = AFX_DEFAULT_DOCKING_PANE_STYLE);\n```  \n  \n### Parameters  \n [in] `lpszCaption`  \n Specifies the window name.  \n  \n [in] [out] `pParentWnd`  \n Specifies the parent window.  \n  \n [in] `rect`  \n Specifies the size and position of the window, in client coordinates of `pParentWnd`.  \n  \n [in] `bHasGripper`  \n `TRUE` to create the pane with a caption; otherwise, `FALSE`.  \n  \n [in] `nID`  \n Specifies the ID of the child window. This value must be unique if you want to save docking state for this docking pane.  \n  \n [in] `dwStyle`  \n Specifies the window style attributes.  \n  \n [in] `dwTabbedStyle`  \n Specifies the tabbed style of a tabbed window that is created when the user drags a pane on the caption of this pane.  \n  \n [in] `dwControlBarStyle`  \n Specifies additional style attributes.  \n  \n [in] [out] `pContext`  \n Specifies the create context of the window.  \n  \n [in] `lpszWindowName`  \n Specifies the window name.  \n  \n [in] `sizeDefault`  \n Specifies the size of the window.  \n  \n### Return Value  \n `TRUE` if the dockable pane is successfully created; otherwise, `FALSE`.  \n  \n### Remarks  \n Creates a Windows pane and attaches it to the `CDockablePane` object.  \n  \n If the `dwStyle` window style has the `CBRS_FLOAT_MULTI` flag, the miniframe window can float with other panes in the miniframe window. By default, docking panes can only float individually.  \n  \n If the `dwTabbedStyle` parameter has the `AFX_CBRS_OUTLOOK_TABS` flag specified, the pane creates Outlook-style tabbed panes when another pane is attached to this pane using the [CDockablePane::AttachToTabWnd](#cdockablepane__attachtotabwnd) method. By default, dockable panes create regular tabbed panes of type [CTabbedPane](../../mfc/reference/ctabbedpane-class.md).  \n  \n##  <a name=\"cdockablepane__createdefaultpanedivider\"></a>  CDockablePane::CreateDefaultPaneDivider  \n Creates a default divider for the pane as it is being docked to a frame window.  \n  \n```  \nstatic CPaneDivider* __stdcall CreateDefaultPaneDivider(\n    DWORD dwAlignment,  \n    CWnd* pParent,  \n    CRuntimeClass* pSliderRTC = NULL);\n```  \n  \n### Parameters  \n [in] `dwAlignment`  \n Specifies the side of the main frame to which the pane is being docked. If `dwAlignment` contains the `CBRS_ALIGN_LEFT` or `CBRS_ALIGN_RIGHT` flag, this method creates a vertical ( `CPaneDivider::SS_VERT`) divider; otherwise, this method creates a horizontal ( `CPaneDivider::SS_HORZ`) divider.  \n  \n [in] `pParent`  \n Pointer to the parent frame.  \n  \n [in] `pSliderRTC`  \n Not used.  \n  \n### Return Value  \n This method returns a pointer to the newly-created divider, or `NULL` if divider creation fails.  \n  \n### Remarks  \n `dwAlignment` can be any of the following values:  \n  \n|Value|Description|  \n|-----------|-----------------|  \n|`CBRS_ALIGN_TOP`|The pane is being docked to the top of the client area of a frame window.|  \n|`CBRS_ALIGN_BOTTOM`|The pane is being docked to the bottom of the client area of a frame window.|  \n|`CBRS_ALIGN_LEFT`|The pane is being docked to the left side of the client area of a frame window.|  \n|`CBRS_ALIGN_RIGHT`|The pane is being docked to the right side of the client area of a frame window.|  \n  \n##  <a name=\"cdockablepane__createex\"></a>  CDockablePane::CreateEx  \n Creates the Windows control and attaches it to the [CDockablePane](../../mfc/reference/cdockablepane-class.md) object.  \n  \n```  \nvirtual BOOL CreateEx(\n    DWORD dwStyleEx,  \n    LPCTSTR lpszCaption,  \n    CWnd* pParentWnd,  \n    const RECT& rect,  \n    BOOL bHasGripper,  \n    UINT nID,  \n    DWORD dwStyle,  \n    DWORD dwTabbedStyle = AFX_CBRS_REGULAR_TABS,  \n    DWORD dwControlBarStyle = AFX_DEFAULT_DOCKING_PANE_STYLE,  \n    CCreateContext* pContext = NULL);\n```  \n  \n### Parameters  \n [in] `dwStyleEx`  \n Specifies the extended style attributes for the new window.  \n  \n [in] `lpszCaption`  \n Specifies the window name.  \n  \n [in] [out] `pParentWnd`  \n Specifies the parent window.  \n  \n [in] `rect`  \n Specifies the size and position of the window, in client coordinates of `pParentWnd`.  \n  \n [in] `bHasGripper`  \n `TRUE` to create the pane with a caption; otherwise, `FALSE`.  \n  \n [in] `nID`  \n Specifies the ID of the child window. This value must be unique if you want to save the docking state for this docking pane.  \n  \n [in] `dwStyle`  \n Specifies the window style attributes.  \n  \n [in] `dwTabbedStyle`  \n Specifies the tabbed style of a tabbed window that is created when the user drags a pane on the caption of this pane.  \n  \n [in] `dwControlBarStyle`  \n Specifies the additional style attributes.  \n  \n [in] [out] `pContext`  \n Specifies the create context of the window.  \n  \n### Return Value  \n `TRUE` if the dockable pane is successfully created; otherwise, `FALSE`.  \n  \n### Remarks  \n Creates a Windows pane and attaches it to the `CDockablePane` object.  \n  \n If the `dwStyle` window style has the `CBRS_FLOAT_MULTI` flag, the miniframe window can float with other panes in the miniframe window. By default, docking panes can only float individually.  \n  \n If the `dwTabbedStyle` parameter has the `AFX_CBRS_OUTLOOK_TABS` flag specified, the pane creates Outlook-style tabbed panes when another pane is attached to this pane using the [CDockablePane::AttachToTabWnd](#cdockablepane__attachtotabwnd) method. By default, dockable panes create regular tabbed panes of type [CTabbedPane](../../mfc/reference/ctabbedpane-class.md).  \n  \n##  <a name=\"cdockablepane__createtabbedpane\"></a>  CDockablePane::CreateTabbedPane  \n Creates a tabbed pane from the current pane.  \n  \n```  \nvirtual CTabbedPane* CreateTabbedPane();\n```  \n  \n### Return Value  \n The new tabbed pane, or `NULL` if the create operation failed.  \n  \n### Remarks  \n The framework calls this method when it creates a tabbed pane to replace this pane. For more information, see [CDockablePane::AttachToTabWnd](#cdockablepane__attachtotabwnd).  \n  \n Override this method in a derived class to customize how tabbed panes are created and initialized.  \n  \n The tabbed pane is created according to the runtime class information stored in the `m_pTabbedControlBarRTC` member, which is initialized by the [CDockablePane::CreateEx](#cdockablepane__createex) method.  \n  \n##  <a name=\"cdockablepane__dockpanecontainer\"></a>  CDockablePane::DockPaneContainer  \n Docks a container to the pane.  \n  \n```  \nvirtual BOOL DockPaneContainer(\n    CPaneContainerManager& barContainerManager,  \n    DWORD dwAlignment,  \n    AFX_DOCK_METHOD dockMethod);\n```  \n  \n### Parameters  \n [in] `barContainerManager`  \n A reference to the container manager of the container that is being docked.  \n  \n [in] `dwAlignment`  \n `DWORD` that specifies the side of the pane to which the container is being docked.  \n  \n [in] `dockMethod`  \n Not used.  \n  \n### Return Value  \n `TRUE` if the container was successfully docked to the pane; otherwise, `FALSE`.  \n  \n### Remarks  \n `dwAlignment` can be any of the following values:  \n  \n|Value|Description|  \n|-----------|-----------------|  \n|`CBRS_ALIGN_TOP`|The container is being docked to the top of the pane.|  \n|`CBRS_ALIGN_BOTTOM`|The container is being docked to the bottom of the pane.|  \n|`CBRS_ALIGN_LEFT`|The container is being docked to the left of the pane.|  \n|`CBRS_ALIGN_RIGHT`|The container is being docked to the right of the pane.|  \n  \n##  <a name=\"cdockablepane__dockpanestandard\"></a>  CDockablePane::DockPaneStandard  \n Docks a pane by using outline (standard) docking.  \n  \n```  \nvirtual CPane* DockPaneStandard(BOOL& bWasDocked);\n```  \n  \n### Parameters  \n [in] `bWasDocked`  \n When the method returns, this value contains `TRUE` if the pane was successfully docked; otherwise, it contains `FALSE`.  \n  \n### Return Value  \n If the pane was docked to a tabbed window, or if a tabbed window was created as a result of docking, this method returns a pointer to the tabbed window. If the pane was otherwise successfully docked, this method returns the `this` pointer. If docking failed, this method returns `NULL`.  \n  \n##  <a name=\"cdockablepane__docktorecentpos\"></a>  CDockablePane::DockToRecentPos  \n Docks a pane to its stored docking position.  \n  \n```  \nBOOL CDockablePane::DockToRecentPos();\n```  \n  \n### Return Value  \n `TRUE` if the pane is successfully docked; otherwise, `FALSE`.  \n  \n### Remarks  \n Dockable panes store recent docking information in a [CRecentDockSiteInfo](../../mfc/reference/crecentdocksiteinfo-class.md) object.  \n  \n##  <a name=\"cdockablepane__docktowindow\"></a>  CDockablePane::DockToWindow  \n Docks one docking pane to another docking pane.  \n  \n```  \nvirtual BOOL DockToWindow(\n    CDockablePane* pTargetWindow,  \n    DWORD dwAlignment,  \n    LPCRECT lpRect = NULL);\n```  \n  \n### Parameters  \n [in] [out] `pTargetWindow`  \n Specifies the dockable pane to dock this pane to.  \n  \n [in] `dwAlignment`  \n Specifies the docking alignment for the pane. May be one of CBRS_ALIGN_LEFT, CBRS_ALIGN_TOP, CBRS_ALIGN_RIGHT, CBRS_ALIGN_BOTTOM or CBRS_ALIGN_ANY. (Defined in afxres.h.)  \n  \n [in] `lpRect`  \n Specifies the docking rectangle for the pane.  \n  \n### Return Value  \n `TRUE` if the pane was docked successfully; otherwise, `FALSE`.  \n  \n### Remarks  \n Call this method to dock one pane to another pane with the alignment specified by `dwAlignment`.  \n  \n##  <a name=\"cdockablepane__drawcaption\"></a>  CDockablePane::DrawCaption  \n Draws the caption (also called the gripper) of a docking pane.  \n  \n```  \nvirtual void DrawCaption(\n    CDC* pDC,  \n    CRect rectCaption);\n```  \n  \n### Parameters  \n [in] `pDC`  \n Represents the device context used for drawing.  \n  \n [in] `rectCaption`  \n Specifies the bounding rectangle of the pane's caption.  \n  \n### Remarks  \n The framework calls this method to draw the caption of a dockable pane.  \n  \n Override this method in a derived class to customize the appearance of the caption.  \n  \n##  <a name=\"cdockablepane__enableautohideall\"></a>  CDockablePane::EnableAutohideAll  \n Enables or disables autohide mode for this pane and for other panes in the container.  \n  \n```  \nvoid EnableAutohideAll(BOOL bEnable = TRUE);\n```  \n  \n### Parameters  \n [in] `bEnable`  \n `TRUE` to enable the autohide all feature for the dockable pane; otherwise, `FALSE`.  \n  \n### Remarks  \n When a user holds the `Ctrl` key and clicks the pin button to switch a pane to autohide mode, all other panes in the same container are also switched to autohide mode.  \n  \n Call this method with `bEnable` set to `FALSE` to disable this feature for a particular pane.  \n  \n##  <a name=\"cdockablepane__enablegripper\"></a>  CDockablePane::EnableGripper  \n Shows or hides the caption (also called the gripper).  \n  \n```  \nvirtual void EnableGripper(BOOL bEnable);\n```  \n  \n### Parameters  \n [in] `bEnable`  \n `TRUE` to enable the caption; otherwise, `FALSE`.  \n  \n### Remarks  \n When the framework creates dockable panes, they do not have the **WS_STYLE** window style, even if specified. This means that the pane's caption is a non-client area that is controlled by the framework, but this area differs from the standard window caption.  \n  \n You can show or hide the caption at any time. The framework hides the caption when a pane is added as a tab to a tabbed window or when a pane is floated in a miniframe window.  \n  \n##  <a name=\"cdockablepane__getahrestoredrect\"></a>  CDockablePane::GetAHRestoredRect  \n Specifies the position of the pane when in auto-hide mode.  \n  \n```  \nCRect GetAHRestoredRect() const;\n\n \n```  \n  \n### Return Value  \n A `CRect` object that contains the position of the pane when it is in auto-hide mode.  \n  \n### Remarks  \n  \n##  <a name=\"cdockablepane__getahslidemode\"></a>  CDockablePane::GetAHSlideMode  \n Retrieves the auto-hide slide mode for the pane.  \n  \n```  \nvirtual UINT GetAHSlideMode() const;\n\n \n```  \n  \n### Return Value  \n A `UINT` that specifies the auto-hide slide mode for the pane. The return value can be either `AFX_AHSM_MOVE` or `AFX_AHSM_STRETCH`, but the implementation only uses `AFX_AHSM_MOVE`.  \n  \n### Remarks  \n  \n##  <a name=\"cdockablepane__getcaptionheight\"></a>  CDockablePane::GetCaptionHeight  \n Returns the height, in pixels, of the current caption.  \n  \n```  \nvirtual int GetCaptionHeight() const;\n\n \n```  \n  \n### Return Value  \n The height of the caption, in pixels.  \n  \n### Remarks  \n The caption height is 0 if the caption was hidden by the [CDockablePane::EnableGripper](#cdockablepane__enablegripper) method, or if the pane does not have a caption.  \n  \n##  <a name=\"cdockablepane__getdefaultpanedivider\"></a>  CDockablePane::GetDefaultPaneDivider  \n Returns the default pane divider for the pane's container.  \n  \n```  \nCPaneDivider* GetDefaultPaneDivider() const;\n\n \n```  \n  \n### Return Value  \n A valid [CPaneDivider](../../mfc/reference/cpanedivider-class.md) object if the dockable pane is docked to the main frame window, or `NULL` if the dockable pane is not docked or if it is floating.  \n  \n### Remarks  \n For more information about pane dividers, see [CPaneDivider Class](../../mfc/reference/cpanedivider-class.md).  \n  \n##  <a name=\"cdockablepane__getdockingstatus\"></a>  CDockablePane::GetDockingStatus  \n Determines the ability of a pane to be docked based on the provided pointer location.  \n  \n```  \nvirtual AFX_CS_STATUS GetDockingStatus(\n    CPoint pt,  \n    int nSensitivity);\n```  \n  \n### Parameters  \n [in] `pt`  \n The location of the pointer in screen coordinates.  \n  \n [in] `nSensitivity`  \n The distance, in pixels, away from the edge of a rectangle the pointer must be to enable docking.  \n  \n### Return Value  \n One of the following status values:  \n  \n|`AFX_CS_STATUS` value|Meaning|  \n|---------------------------|-------------|  \n|`CS_NOTHING`|The pointer is not over a dock site. The framework does not dock the pane.|  \n|`CS_DOCK_IMMEDIATELY`|The pointer is located over the dock site in immediate mode (the pane uses the `DT_IMMEDIATE` docking mode). The framework docks the pane immediately.|  \n|`CS_DELAY_DOCK`|The pointer is over a dock site that is another docking pane or is an edge of the main frame. The framework docks the pane after a delay. See the Remarks section for more information about this delay.|  \n|`CS_DELAY_DOCK_TO_TAB`|The pointer is located over a dock site that causes the pane to be docked in a tabbed window. This occurs when the pointer is located over the caption of another docking pane or over the tab area of a tabbed pane.|  \n  \n### Remarks  \n The framework calls this method to handle docking of a floating pane.  \n  \n For floating toolbars or docking panes that use the `DT_IMMEDIATE` docking mode, the framework delays the dock command to enable the user to move the window out of the client area of the parent frame before docking occurs. The length of the delay is measured in milliseconds and is controlled by the [CDockingManager::m_nTimeOutBeforeToolBarDock](../../mfc/reference/cdockingmanager-class.md#cdockingmanager__m_ntimeoutbeforetoolbardock) data member.. The default value of [CDockingManager::m_nTimeOutBeforeToolBarDock](../../mfc/reference/cdockingmanager-class.md#cdockingmanager__m_ntimeoutbeforetoolbardock) is 200. This behavior emulates the docking behavior of [!INCLUDE[ofprword](../../mfc/reference/includes/ofprword_md.md)] 2007.  \n  \n For delayed docking states ( `CS_DELAY_DOCK` and `CS_DELAY_DOCK_TO_TAB`), the framework does not perform docking until the user releases the mouse button. If a pane uses the `DT_STANDARD` docking mode, the framework displays a rectangle at the projected docking location. If a pane uses the `DT_SMART` docking mode, the framework displays smart docking markers and semi-transparent rectangles at the projected docking location. To specify the docking mode for your pane, call the [CBasePane::SetDockingMode](../../mfc/reference/cbasepane-class.md#cbasepane__setdockingmode) method. For more information about smart docking, see [CDockingManager::GetSmartDockingParams](../../mfc/reference/cdockingmanager-class.md#cdockingmanager__getsmartdockingparams).  \n  \n##  <a name=\"cdockablepane__getdragsensitivity\"></a>  CDockablePane::GetDragSensitivity  \n Returns the drag sensitivity of a docking pane.  \n  \n```  \nstatic const CSize& GetDragSensitivity();\n```  \n  \n### Return Value  \n A [CSize](../../atl-mfc-shared/reference/csize-class.md) object that contains the width and height, in pixels, of a rectangle centered on a drag point. The drag operation does not begin until the mouse pointer moves outside this rectangle.  \n  \n##  <a name=\"cdockablepane__getlastpercentinpanecontainer\"></a>  CDockablePane::GetLastPercentInPaneContainer  \n Retrieves the percentage of space that a pane occupies in its container ( [CPaneContainer Class](../../mfc/reference/cpanecontainer-class.md)).  \n  \n```  \nint GetLastPercentInPaneContainer() const;\n\n \n```  \n  \n### Return Value  \n An `int` that specifies the percentage of space that the pane occupies in its container.  \n  \n### Remarks  \n This method is used when the container adjusts its layout.  \n  \n##  <a name=\"cdockablepane__gettabarea\"></a>  CDockablePane::GetTabArea  \n Retrieves the tab area for the pane.  \n  \n```  \nvirtual void GetTabArea(\n    CRect& rectTabAreaTop,  \n    CRect& rectTabAreaBottom) const;\n\n \n```  \n  \n### Parameters  \n [in] `rectTabAreaTop`  \n `GetTabArea` fills this variable with the tab area if tabs are located at the top of the pane. If tabs are located at the bottom of the pane, this variable is filled with an empty rectangle.  \n  \n [in] `rectTabAreaBottom`  \n `GetTabArea` fills this variable with the tab area if tabs are located at the bottom of the pane. If tabs are located at the top of the pane, this variable is filled with an empty rectangle.  \n  \n### Remarks  \n This method is used only in classes that are derived from `CDockablePane` and have tabs. For more information, see [CTabbedPane::GetTabArea](../../mfc/reference/ctabbedpane-class.md#ctabbedpane__gettabarea) and [CMFCOutlookBar::GetTabArea](../../mfc/reference/cmfcoutlookbar-class.md#cmfcoutlookbar__gettabarea).  \n  \n##  <a name=\"cdockablepane__gettabbedpanertc\"></a>  CDockablePane::GetTabbedPaneRTC  \n Returns the runtime class information about a tabbed window that is created when another pane docks to the current pane.  \n  \n```  \nCRuntimeClass* GetTabbedPaneRTC() const;\n\n \n```  \n  \n### Return Value  \n The runtime class information for the dockable pane.  \n  \n### Remarks  \n Call this method to retrieve the runtime class information for tabbed panes that are created dynamically. This can occur when a user drags one pane to the caption of another pane, or if you call the [CDockablePane::AttachToTabWnd](#cdockablepane__attachtotabwnd) method to programmatically create a tabbed pane from two dockable panes.  \n  \n You can set the runtime class information by calling the [CDockablePane::SetTabbedPaneRTC](#cdockablepane__settabbedpanertc) method.  \n  \n##  <a name=\"cdockablepane__hasautohidemode\"></a>  CDockablePane::HasAutoHideMode  \n Specifies whether a docking pane can be switched to autohide mode.  \n  \n```  \nvirtual BOOL HasAutoHideMode() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the dockable pane can be switched to autohide mode; otherwise, `FALSE`.  \n  \n### Remarks  \n Override this method in a derived class to disable autohide mode for a specific dockable pane.  \n  \n##  <a name=\"cdockablepane__hittest\"></a>  CDockablePane::HitTest  \n Specifies the location in a pane where the user clicks a mouse.  \n  \n```  \nvirtual int HitTest(\n    CPoint point,  \n    BOOL bDetectCaption = FALSE);\n```  \n  \n### Parameters  \n [in] `point`  \n Specifies the point to test.  \n  \n [in] `bDetectCaption`  \n `TRUE` if `HTCAPTION` should be returned if the point is on the pane's caption; otherwise, `FALSE`.  \n  \n### Return Value  \n One of the following values:  \n  \n- `HTNOWHERE` if `point` is not in the dockable pane.  \n  \n- `HTCLIENT` if `point` is in the client area of the dockable pane.  \n  \n- `HTCAPTION` if `point` is in the caption area of the dockable pane.  \n  \n- `AFX_HTCLOSE` if `point` is on the close button.  \n  \n- `HTMAXBUTTON` if `point` is on the pin button.  \n  \n##  <a name=\"cdockablepane__isautohideallenabled\"></a>  CDockablePane::IsAutohideAllEnabled  \n Indicates whether the docking pane and all other panes in the container can be switched to autohide mode.  \n  \n```  \nvirtual BOOL IsAutohideAllEnabled() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the dockable pane, and all other panes in the container, can be switched to autohide mode; otherwise, `FALSE`.  \n  \n### Remarks  \n A user enables autohide mode by clicking the docking pin button while holding the **Ctrl** key  \n  \n To enable or disable this behavior, call the [CDockablePane::EnableAutohideAll](#cdockablepane__enableautohideall) method.  \n  \n##  <a name=\"cdockablepane__isautohidemode\"></a>  CDockablePane::IsAutoHideMode  \n Determines whether a pane is in autohide mode.  \n  \n```  \nvirtual BOOL IsAutoHideMode() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the dockable pane is in autohide mode; otherwise, `FALSE`.  \n  \n##  <a name=\"cdockablepane__isdocked\"></a>  CDockablePane::IsDocked  \n Determines whether the current pane is docked.  \n  \n```  \nvirtual BOOL IsDocked() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the dockable pane does not belong to a miniframe window or if it is floating in a miniframe window with another pane. `FALSE` if the pane is a child of a miniframe window and there are no other panes that belong to the miniframe window.  \n  \n### Remarks  \n To determine whether the pane is docked to the main frame window, call [CDockablePane::GetDefaultPaneDivider](#cdockablepane__getdefaultpanedivider). If the method returns a non-NULL pointer, the pane is docked at the main frame window.  \n  \n##  <a name=\"cdockablepane__ishideinautohidemode\"></a>  CDockablePane::IsHideInAutoHideMode  \n Determines the behavior of a pane that is in autohide mode if it is shown (or hidden) by calling [CDockablePane::ShowPane](#cdockablepane__showpane).  \n  \n```  \nvirtual BOOL IsHideInAutoHideMode() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the dockable pane should be hidden when in autohide mode; otherwise, `FALSE`.  \n  \n### Remarks  \n When a dockable pane is in autohide mode, it behaves differently when you call `ShowPane` to hide or show the pane. This behavior is controlled by the static member [CDockablePane::m_bHideInAutoHideMode](#cdockablepane__m_bhideinautohidemode). If this member is `TRUE`, the dockable pane and its related autohide toolbar or autohide button is hidden or shown when you call `ShowPane`. Otherwise, the dockable pane is activated or deactivated, and its related autohide toolbar or autohide button is always visible.  \n  \n Override this method in a derived class to change the default behavior for individual panes.  \n  \n The default value for `m_bHideInAutoHideMode` is `FALSE`.  \n  \n##  <a name=\"cdockablepane__isinfloatingmultipaneframewnd\"></a>  CDockablePane::IsInFloatingMultiPaneFrameWnd  \n Specifies whether the pane is in a multi-pane frame window ( [CMultiPaneFrameWnd Class](../../mfc/reference/cmultipaneframewnd-class.md)).  \n  \n```  \nvirtual BOOL IsInFloatingMultiPaneFrameWnd() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the pane is in a multi-pane frame window; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cdockablepane__isresizable\"></a>  CDockablePane::IsResizable  \n Specifies whether the pane is resizable.  \n  \n```  \nvirtual BOOL IsResizable() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the pane is resizable; otherwise, `FALSE`.  \n  \n### Remarks  \n By default, dockable panes are resizable. To prevent resizing, override this method in a derived class and return `FALSE`. Note that a `FALSE` value leads to a failed `ASSERT` in [CPane::DockPane](../../mfc/reference/cpane-class.md#cpane__dockpane). Use [CDockingManager::AddPane](../../mfc/reference/cdockingmanager-class.md#cdockingmanager__addpane) instead to dock a pane within a parent frame.  \n  \n Panes that cannot be resized can neither float nor enter auto-hide mode and are always located at the outer edge of the parent frame.  \n  \n##  <a name=\"cdockablepane__istablocationbottom\"></a>  CDockablePane::IsTabLocationBottom  \n Specifies whether tabs are located at the top or bottom of the pane.  \n  \n```  \nvirtual BOOL IsTabLocationBottom() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if tabs are located at the bottom of the pane; `FALSE` if tabs are located at the top of the pane.  \n  \n### Remarks  \n For more information, see [CTabbedPane::IsTabLocationBottom](../../mfc/reference/ctabbedpane-class.md#ctabbedpane__istablocationbottom).  \n  \n##  <a name=\"cdockablepane__istracked\"></a>  CDockablePane::IsTracked  \n Specifies whether a pane is being moved by the user.  \n  \n```  \nBOOL IsTracked() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the pane is being moved; otherwise, `FALSE`.  \n  \n##  <a name=\"cdockablepane__isvisible\"></a>  CDockablePane::IsVisible  \n Determines whether the current pane is visible.  \n  \n```  \nvirtual BOOL IsVisible() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the dockable pane is visible; otherwise, `FALSE`.  \n  \n### Remarks  \n Call this method to determine whether a dockable pane is visible. You can use this method instead of calling [CWnd::IsWindowVisible](../../mfc/reference/cwnd-class.md#cwnd__iswindowvisible) or testing for the `WS_VISIBLE` style. The returned visibility state depends on whether autohide mode is enabled or disabled and on the value of the [CDockablePane::IsHideInAutoHideMode](#cdockablepane__ishideinautohidemode) property.  \n  \n If the dockable pane is in autohide mode and `IsHideInAutoHideMode` returns `FALSE` the visibility state is always `FALSE`.  \n  \n If the dockable pane is in autohide mode and `IsHideInAutoHideMode` returns `TRUE` the visibility state depends on the visibility state of the related autohide toolbar.  \n  \n If the dockable pane is not in autohide mode, the visibility state is determined by the [CBasePane::IsVisible](../../mfc/reference/cbasepane-class.md#cbasepane__isvisible) method.  \n  \n##  <a name=\"cdockablepane__m_bdisableanimation\"></a>  CDockablePane::m_bDisableAnimation  \n Specifies whether autohide animation of the dockable pane is disabled.  \n  \n```  \nAFX_IMPORT_DATA static BOOL m_bDisableAnimation;  \n```  \n  \n##  <a name=\"cdockablepane__m_bhideinautohidemode\"></a>  CDockablePane::m_bHideInAutoHideMode  \n Determines the behavior of the pane when the pane is in autohide mode.  \n  \n```  \nAFX_IMPORT_DATA static BOOL m_bHideInAutoHideMode;  \n```  \n  \n### Remarks  \n This value affects all docking panes in the application.  \n  \n If you set this member to `TRUE`, dockable panes are hidden or shown with their related autohide toolbars and buttons when you call [CDockablePane::ShowPane](#cdockablepane__showpane).  \n  \n If you set this member to `FALSE`, dockable panes are activated or deactivated when you call [CDockablePane::ShowPane](#cdockablepane__showpane).  \n  \n##  <a name=\"cdockablepane__m_nslidesteps\"></a>  CDockablePane::m_nSlideSteps  \n Specifies the animation speed of the pane when it is in autohide mode.  \n  \n```  \nAFX_IMPORT_DATA static int m_nSlideSteps;  \n```  \n  \n### Remarks  \n For a faster animation effect, decrease this value. For a slower animation effect, increase this value.  \n  \n##  <a name=\"cdockablepane__onafterchangeparent\"></a>  CDockablePane::OnAfterChangeParent  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnAfterChangeParent(CWnd* pWndOldParent);\n```  \n  \n### Parameters  \n [in] `pWndOldParent`  \n  \n### Remarks  \n  \n##  <a name=\"cdockablepane__onafterdockfromminiframe\"></a>  CDockablePane::OnAfterDockFromMiniFrame  \n Called by the framework when a floating docking bar docks at a frame window.  \n  \n```  \nvirtual void OnAfterDockFromMiniFrame();\n```  \n  \n### Remarks  \n By default, this method does nothing.  \n  \n##  <a name=\"cdockablepane__onbeforechangeparent\"></a>  CDockablePane::OnBeforeChangeParent  \n The framework calls this method before it changes the parent of the pane.  \n  \n```  \nvirtual void OnBeforeChangeParent(\n    CWnd* pWndNewParent,  \n    BOOL bDelay = FALSE);\n```  \n  \n### Parameters  \n [in] `pWndNewParent`  \n A pointer to the new parent window.  \n  \n [in] `bDelay`  \n `BOOL` that specifies whether to delay recalculation of the docking layout if the pane is undocked. For more information, see [CDockablePane::UndockPane](#cdockablepane__undockpane).  \n  \n### Remarks  \n If the pane is docked and the new parent does not allow docking, this method undocks the pane.  \n  \n If the pane is being converted to a tabbed document, this method stores its recent docking position. The framework uses the recent docking position to restore the position of the pane when it is converted back to a docked state.  \n  \n##  <a name=\"cdockablepane__onbeforefloat\"></a>  CDockablePane::OnBeforeFloat  \n The framework calls this method before a pane transitions to a floating state.  \n  \n```  \nvirtual BOOL OnBeforeFloat(\n    CRect& rectFloat,  \n    AFX_DOCK_METHOD dockMethod);\n```  \n  \n### Parameters  \n [in] `rectFloat`  \n Specifies the position and size of the pane when it is in a floating state.  \n  \n [in] `dockMethod`  \n Specifies the docking method. See [CPane::DockPane](../../mfc/reference/cpane-class.md#cpane__dockpane) for a list of possible values.  \n  \n### Return Value  \n `TRUE` if the pane can be floated; otherwise, `FALSE`.  \n  \n### Remarks  \n This method is called by the framework when a pane is about to float. You can override this method in a derived class if you want to perform any processing before the pane floats.  \n  \n##  <a name=\"cdockablepane__onpressbuttons\"></a>  CDockablePane::OnPressButtons  \n Called when the user presses a caption button other than the `AFX_HTCLOSE` and `AFX_HTMAXBUTTON` buttons.  \n  \n```  \nvirtual void OnPressButtons(UINT nHit);\n```  \n  \n### Parameters  \n [in] `nHit`  \n This parameter is not used.  \n  \n### Remarks  \n If you add a custom button to the caption of a dockable pane, override this method to receive notifications when a user presses the button.  \n  \n##  <a name=\"cdockablepane__onslide\"></a>  CDockablePane::OnSlide  \n Called by the framework to animate the pane when it is in autohide mode.  \n  \n```  \nvirtual void OnSlide(BOOL bSlideOut);\n```  \n  \n### Parameters  \n [in] `bSlideOut`  \n `TRUE` to show the pane; `FALSE` to hide the pane.  \n  \n### Remarks  \n Override this method in a derived class to implement custom autohide effects.  \n  \n##  <a name=\"cdockablepane__removefromdefaultpanedividier\"></a>  CDockablePane::RemoveFromDefaultPaneDividier  \n The framework calls this method when a pane is being undocked.  \n  \n```  \nvoid RemoveFromDefaultPaneDividier();\n```  \n  \n### Remarks  \n This method sets the default pane divider to `NULL` and removes the pane from its container.  \n  \n##  <a name=\"cdockablepane__replacepane\"></a>  CDockablePane::ReplacePane  \n Replaces the pane with a specified pane.  \n  \n```  \nBOOL ReplacePane(\n    CDockablePane* pBarToReplaceWith,  \n    AFX_DOCK_METHOD dockMethod,  \n    BOOL bRegisterWithFrame = FALSE);\n```  \n  \n### Parameters  \n [in] `pBarToReplaceWith`  \n A pointer to a dockable pane.  \n  \n [in] `dockMethod`  \n Not used.  \n  \n [in] `bRegisterWithFrame`  \n If `TRUE`, the new pane is registered with the docking manager of the parent of the old pane. The new pane is inserted at the index of the old pane in the list of panes that is maintained by the docking manager.  \n  \n### Return Value  \n `TRUE` if the replacement is successful; otherwise, `FALSE`.  \n  \n##  <a name=\"cdockablepane__restoredefaultpanedivider\"></a>  CDockablePane::RestoreDefaultPaneDivider  \n When a pane is deserialized, the framework calls this method to restore the default pane divider.  \n  \n```  \nvoid RestoreDefaultPaneDivider();\n```  \n  \n### Remarks  \n The restored default pane divider replaces the current default pane divider, if it exists.  \n  \n##  <a name=\"cdockablepane__setautohidemode\"></a>  CDockablePane::SetAutoHideMode  \n Toggles the docking pane between visible and autohide mode.  \n  \n```  \nvirtual CMFCAutoHideBar* SetAutoHideMode(\n    BOOL bMode,  \n    DWORD dwAlignment,  \n    CMFCAutoHideBar* pCurrAutoHideBar = NULL,  \n    BOOL bUseTimer = TRUE);\n```  \n  \n### Parameters  \n [in] `bMode`  \n `TRUE` to enable autohide mode; `FALSE` to enable regular docking mode.  \n  \n [in] `dwAlignment`  \n Specifies the alignment of the autohide pane to create.  \n  \n [in] [out] `pCurrAutoHideBar`  \n A pointer to the current autohide toolbar. Can be `NULL`.  \n  \n [in] `bUseTimer`  \n Specifies whether to use the autohide effect when the user switches the pane to autohide mode or to hide the pane immediately.  \n  \n### Return Value  \n The autohide toolbar that was created as a result of switching to autohide mode, or `NULL`.  \n  \n### Remarks  \n The framework calls this method when a user clicks the pin button to switch the dockable pane to autohide mode or to regular docking mode.  \n  \n Call this method to switch a dockable pane to autohide mode programmatically. The pane must be docked to the main frame window ( [CDockablePane::GetDefaultPaneDivider](#cdockablepane__getdefaultpanedivider) must return a valid pointer to the [CPaneDivider](../../mfc/reference/cpanedivider-class.md)).  \n  \n##  <a name=\"cdockablepane__setautohideparents\"></a>  CDockablePane::SetAutoHideParents  \n Sets the auto-hide button and auto-hide toolbar for the pane.  \n  \n```  \nvoid SetAutoHideParents(\n    CMFCAutoHideBar* pToolBar,  \n    CMFCAutoHideButton* pBtn);\n```  \n  \n### Parameters  \n [in] `pToolBar`  \n Pointer to an auto-hide toolbar.  \n  \n [in] `pBtn`  \n Pointer to an auto-hide button.  \n  \n##  <a name=\"cdockablepane__setlastpercentinpanecontainer\"></a>  CDockablePane::SetLastPercentInPaneContainer  \n Sets the percentage of space that a pane occupies in its container.  \n  \n```  \nvoid SetLastPercentInPaneContainer(int n);\n```  \n  \n### Parameters  \n [in] `n`  \n An `int` that specifies the percentage of space that the pane occupies in its container.  \n  \n### Remarks  \n The framework adjusts the pane to use the new value when the layout is recalculated.  \n  \n##  <a name=\"cdockablepane__setrestoreddefaultpanedivider\"></a>  CDockablePane::SetRestoredDefaultPaneDivider  \n Sets the restored default pane divider.  \n  \n```  \nvoid SetRestoredDefaultPaneDivider(HWND hRestoredSlider);\n```  \n  \n### Parameters  \n [in] `hRestoredSlider`  \n A handle to a pane divider (slider).  \n  \n### Remarks  \n A restored default pane divider is obtained when a pane is deserialized. For more information, see [CDockablePane::RestoreDefaultPaneDivider](#cdockablepane__restoredefaultpanedivider).  \n  \n##  <a name=\"cdockablepane__settabbedpanertc\"></a>  CDockablePane::SetTabbedPaneRTC  \n Sets the runtime class information for a tabbed window that is created when two panes dock together.  \n  \n```  \nvoid SetTabbedPaneRTC(CRuntimeClass* pRTC);\n```  \n  \n### Parameters  \n [in] `pRTC`  \n The runtime class information for the tabbed pane.  \n  \n### Remarks  \n Call this method to set the runtime class information for tabbed panes that are created dynamically. This can occur when a user drags one pane to the caption of another pane, or if you call the [CDockablePane::AttachToTabWnd](#cdockablepane__attachtotabwnd) method to programmatically create a tabbed pane from two dockable panes.  \n  \n The default runtime class is set according to the `dwTabbedStyle` parameter of [CDockablePane::Create](#cdockablepane__create) and [CDockablePane::CreateEx](#cdockablepane__createex). To customize the new tabbed panes, derive your class from one of the following classes:  \n  \n- [CBaseTabbedPane Class](../../mfc/reference/cbasetabbedpane-class.md)  \n  \n- [CTabbedPane Class](../../mfc/reference/ctabbedpane-class.md)  \n  \n- [CMFCOutlookBar Class](../../mfc/reference/cmfcoutlookbar-class.md).  \n  \n Then, call this method with the pointer to its runtime class information.  \n  \n##  <a name=\"cdockablepane__showpane\"></a>  CDockablePane::ShowPane  \n Shows or hides a pane.  \n  \n```  \nvirtual void ShowPane(\n    BOOL bShow,  \n    BOOL bDelay,  \n    BOOL bActivate);\n```  \n  \n### Parameters  \n [in] `bShow`  \n `TRUE` to show the pane; `FALSE` to hide the pane.  \n  \n [in] `bDelay`  \n `TRUE` to delay adjusting the docking layout; `FALSE` to adjust the docking layout immediately.  \n  \n [in] `bActivate`  \n `TRUE` to activate the pane when shown; otherwise, `FALSE`.  \n  \n### Remarks  \n Call this method instead of the [CWnd::ShowWindow](../../mfc/reference/cwnd-class.md#cwnd__showwindow) when showing or hiding dockable panes.  \n  \n##  <a name=\"cdockablepane__slide\"></a>  CDockablePane::Slide  \n Animates a pane that is in autohide mode.  \n  \n```  \nvirtual void Slide(\n    BOOL bSlideOut,  \n    BOOL bUseTimer = TRUE);\n```  \n  \n### Parameters  \n [in] `bSlideOut`  \n `TRUE` to show the pane; `FALSE` to hide the pane.  \n  \n [in] `bUseTimer`  \n `TRUE` to show or hide the pane with the autohide effect; `FALSE` to show or hide the pane immediately.  \n  \n### Remarks  \n The framework calls this method to animate a pane that is in autohide mode.  \n  \n This method uses the `CDockablePane::m_nSlideDefaultTimeOut` value to determine the time out for the slide effect. The default value for the time out is 1. If you customize the autohide algorithm, modify this member to change the time out.  \n  \n##  <a name=\"cdockablepane__toggleautohide\"></a>  CDockablePane::ToggleAutoHide  \n Toggles the pane between always visible and auto-hide mode.  \n  \n```  \nvirtual void ToggleAutoHide();\n```  \n  \n### Remarks  \n This method toggles auto-hide mode for the pane by calling [CDockablePane::SetAutoHideMode](#cdockablepane__setautohidemode).  \n  \n##  <a name=\"cdockablepane__undockpane\"></a>  CDockablePane::UndockPane  \n Undocks a pane from either the main frame window or a miniframe window container.  \n  \n```  \nvirtual void UndockPane(BOOL bDelay = FALSE);\n```  \n  \n### Parameters  \n [in] `bDelay`  \n `TRUE` to delay calculating the docking layout; `FALSE` to recalculate the docking layout immediately.  \n  \n### Remarks  \n Call this method to undock a pane from the main frame window or from a multi-miniframe window container (a pane that is floating in a single miniframe window with other panes).  \n  \n You must undock a pane before you perform any external operation that is not performed by the [CDockingManager](../../mfc/reference/cdockingmanager-class.md). For example, you must undock a pane to move it programmatically from one location to another.  \n  \n The framework automatically undocks panes before they are destroyed.  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CPane Class](../../mfc/reference/cpane-class.md)\n"}