{"nodes":[{"pos":[12,62],"content":"Concurrency namespace enums (AMP) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Concurrency namespace enums (AMP) | Microsoft Docs","pos":[0,50]}]},{"pos":[304,337],"content":"Concurrency namespace enums (AMP)","linkify":"Concurrency namespace enums (AMP)","nodes":[{"content":"Concurrency namespace enums (AMP)","pos":[0,33]}]},{"pos":[353,392],"content":"<bpt id=\"p1\">[</bpt>access_type Enumeration<ept id=\"p1\">](#access_type)</ept>","source":"[access_type Enumeration](#access_type)"},{"pos":[393,434],"content":"<bpt id=\"p1\">[</bpt>queuing_mode Enumeration<ept id=\"p1\">](#queuing_mode)</ept>","source":"[queuing_mode Enumeration](#queuing_mode)"},{"pos":[445,496],"content":"<bpt id=\"p1\">&lt;a name=\"access_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  access_type Enumeration","linkify":"<a name=\"access_type\"></a>  access_type Enumeration","source":"<a name=\"access_type\"></a>  access_type Enumeration"},{"content":"Enumeration type used to denote the various types of access to data.","pos":[500,568]},{"pos":[610,616],"content":"Values","linkify":"Values","nodes":[{"content":"Values","pos":[0,6]}]},{"content":"Name","pos":[623,627]},{"content":"Description","pos":[628,639]},{"pos":[696,760],"content":"Automatically choose the best <ph id=\"ph1\">`access_type`</ph> for the accelerator.","source":"Automatically choose the best `access_type` for the accelerator."},{"content":"Dedicated.","pos":[784,794]},{"content":"The allocation is only accessible on the accelerator and not on the CPU.","pos":[795,867]},{"content":"Shared.","pos":[891,898]},{"content":"The allocation is accessible on the accelerator and is readable on the CPU.","pos":[899,974]},{"content":"Shared.","pos":[1004,1011]},{"content":"The allocation is accessible on the accelerator and is writable on the CPU.","pos":[1012,1087]},{"content":"Shared.","pos":[1112,1119]},{"content":"The allocation is accessible on the accelerator and is both readable and writable on the CPU.","pos":[1120,1213]},{"pos":[1225,1278],"content":"<bpt id=\"p1\">&lt;a name=\"queuing_mode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  queuing_mode Enumeration","linkify":"<a name=\"queuing_mode\"></a>  queuing_mode Enumeration","source":"<a name=\"queuing_mode\"></a>  queuing_mode Enumeration"},{"content":"Specifies the queuing modes that are supported on the accelerator.","pos":[1282,1348]},{"pos":[1390,1396],"content":"Values","linkify":"Values","nodes":[{"content":"Values","pos":[0,6]}]},{"content":"Name","pos":[1403,1407]},{"content":"Description","pos":[1408,1419]},{"content":"<ph id=\"ph1\">|</ph><ph id=\"ph2\">`queuing_mode_immediate`</ph>|A queuing mode that specifies that any commands, for example, <bpt id=\"p1\">[</bpt>parallel_for_each Function (C++ AMP)<ept id=\"p1\">](concurrency-namespace-functions-amp.md#parallel_for_each)</ept>, are sent to the corresponding accelerator device as soon as they return to the caller.|","pos":[1457,1730],"source":"|`queuing_mode_immediate`|A queuing mode that specifies that any commands, for example, [parallel_for_each Function (C++ AMP)](concurrency-namespace-functions-amp.md#parallel_for_each), are sent to the corresponding accelerator device as soon as they return to the caller.|"},{"content":"<ph id=\"ph1\">|</ph><ph id=\"ph2\">`queuing_mode_automatic`</ph>|A queuing mode that specifies that commands be queued up on a command queue that corresponds to the <bpt id=\"p1\">[</bpt>accelerator_view<ept id=\"p1\">](accelerator-view-class.md)</ept> object.","pos":[1733,1912],"source":"|`queuing_mode_automatic`|A queuing mode that specifies that commands be queued up on a command queue that corresponds to the [accelerator_view](accelerator-view-class.md) object."},{"content":"Commands are sent to the device when <bpt id=\"p1\">[</bpt>accelerator_view::flush<ept id=\"p1\">](accelerator-view-class.md#flush)</ept> is called.|","pos":[1913,2020],"source":" Commands are sent to the device when [accelerator_view::flush](accelerator-view-class.md#flush) is called.|"},{"pos":[2030,2038],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2042,2109],"content":"<bpt id=\"p1\">[</bpt>Concurrency Namespace (C++ AMP)<ept id=\"p1\">](concurrency-namespace-cpp-amp.md)</ept>","source":"[Concurrency Namespace (C++ AMP)](concurrency-namespace-cpp-amp.md)"}],"content":"---\ntitle: \"Concurrency namespace enums (AMP) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 4c87457e-184f-4992-81ab-ca75e7d524ab\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\n---\n# Concurrency namespace enums (AMP)\n|||  \n|-|-|  \n|[access_type Enumeration](#access_type)|[queuing_mode Enumeration](#queuing_mode)|  \n  \n##  <a name=\"access_type\"></a>  access_type Enumeration  \n Enumeration type used to denote the various types of access to data.  \n  \n```  \nenum access_type;  \n```  \n### Values  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`access_type_auto`|Automatically choose the best `access_type` for the accelerator.|  \n|`access_type_none`|Dedicated. The allocation is only accessible on the accelerator and not on the CPU.|  \n|`access_type_read`|Shared. The allocation is accessible on the accelerator and is readable on the CPU.|  \n|`access_type_read_write`|Shared. The allocation is accessible on the accelerator and is writable on the CPU.|  \n|`access_type_write`|Shared. The allocation is accessible on the accelerator and is both readable and writable on the CPU.|  \n\n  \n##  <a name=\"queuing_mode\"></a>  queuing_mode Enumeration  \n Specifies the queuing modes that are supported on the accelerator.  \n  \n```  \nenum queuing_mode;  \n``` \n### Values  \n  \n|Name|Description|  \n|----------|-----------------|  \n\n|`queuing_mode_immediate`|A queuing mode that specifies that any commands, for example, [parallel_for_each Function (C++ AMP)](concurrency-namespace-functions-amp.md#parallel_for_each), are sent to the corresponding accelerator device as soon as they return to the caller.|  \n|`queuing_mode_automatic`|A queuing mode that specifies that commands be queued up on a command queue that corresponds to the [accelerator_view](accelerator-view-class.md) object. Commands are sent to the device when [accelerator_view::flush](accelerator-view-class.md#flush) is called.|   \n  \n## See Also  \n [Concurrency Namespace (C++ AMP)](concurrency-namespace-cpp-amp.md)\n"}