<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bb16fb1eb9614c2f01c9def38e2c99fd0d7a8646</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cscrollview-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0f04ed142f7180b895a2981f6959e53ad6362ddd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">af929b2528ce04ee928ddf931432521250bf6e2b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CScrollView Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CScrollView Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CView<ept id="p1">](../../mfc/reference/cview-class.md)</ept> with scrolling capabilities.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Protected Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CScrollView::CScrollView</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CScrollView`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CScrollView::CheckScrollBars</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Indicates whether the scroll view has horizontal and vertical scroll bars.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CScrollView::FillOutsideRect</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Fills the area of a view outside the scrolling area.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CScrollView::GetDeviceScrollPosition</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Gets the current scroll position in device units.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CScrollView::GetDeviceScrollSizes</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gets the current mapping mode, the total size, and the line and page sizes of the scrollable view.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Sizes are in device units.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>CScrollView::GetScrollPosition</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Gets the current scroll position in logical units.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>CScrollView::GetTotalSize</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Gets the total size of the scroll view in logical units.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>CScrollView::ResizeParentToFit</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Causes the size of the view to dictate the size of its frame.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>CScrollView::ScrollToPosition</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Scrolls the view to a given point, specified in logical units.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>CScrollView::SetScaleToFitSize</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Puts the scroll view into scale-to-fit mode.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>CScrollView::SetScrollSizes</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Sets the scroll view's mapping mode, total size, and horizontal and vertical scroll amounts.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can handle standard scrolling yourself in any class derived from <ph id="ph1">`CView`</ph> by overriding the message-mapped <bpt id="p1">[</bpt>OnHScroll<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__onhscroll)</ept> and <bpt id="p2">[</bpt>OnVScroll<ept id="p2">](../../mfc/reference/cwnd-class.md#cwnd__onvscroll)</ept> member functions.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>But <ph id="ph1">`CScrollView`</ph> adds the following features to its <ph id="ph2">`CView`</ph> capabilities:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>It manages window and viewport sizes and mapping modes.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>It scrolls automatically in response to scroll-bar messages.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>It scrolls automatically in response to messages from the keyboard, a non-scrolling mouse, or the IntelliMouse wheel.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To scroll automatically in response to messages from the keyboard, add a WM_KEYDOWN message, and test for VK_DOWN, VK_PREV and call <bpt id="p1">[</bpt>SetScrollPos<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb787597)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can handle mouse wheel scrolling yourself by overriding the message-mapped <bpt id="p1">[</bpt>OnMouseWheel<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__onmousewheel)</ept> and <bpt id="p2">[</bpt>OnRegisteredMouseWheel<ept id="p2">](../../mfc/reference/cwnd-class.md#cwnd__onregisteredmousewheel)</ept> member functions.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>As they are for <ph id="ph1">`CScrollView`</ph>, these member functions support the recommended behaviour for <bpt id="p1">[</bpt>WM_MOUSEWHEEL<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms645617)</ept>, the wheel rotation message.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>To take advantage of automatic scrolling, derive your view class from <ph id="ph1">`CScrollView`</ph> instead of from <ph id="ph2">`CView`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When the view is first created, if you want to calculate the size of the scrollable view based on the size of the document, call the <ph id="ph1">`SetScrollSizes`</ph> member function from your override of either <bpt id="p1">[</bpt>CView::OnInitialUpdate<ept id="p1">](../../mfc/reference/cview-class.md#cview__oninitialupdate)</ept> or <bpt id="p2">[</bpt>CView::OnUpdate<ept id="p2">](../../mfc/reference/cview-class.md#cview__onupdate)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>(You must write your own code to query the size of the document.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For an example, see the <bpt id="p1">[</bpt>Scribble sample<ept id="p1">](../../visual-cpp-samples.md)</ept>.)</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The call to the <ph id="ph1">`SetScrollSizes`</ph> member function sets the view's mapping mode, the total dimensions of the scroll view, and the amounts to scroll horizontally and vertically.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>All sizes are in logical units.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The logical size of the view is usually calculated from data stored in the document, but in some cases you may want to specify a fixed size.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For examples of both approaches, see <bpt id="p1">[</bpt>CScrollView::SetScrollSizes<ept id="p1">](#cscrollview__setscrollsizes)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You specify the amounts to scroll horizontally and vertically in logical units.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>By default, if the user clicks a scroll bar shaft outside of the scroll box, <ph id="ph1">`CScrollView`</ph> scrolls a "page."</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If the user clicks a scroll arrow at either end of a scroll bar, <ph id="ph1">`CScrollView`</ph> scrolls a "line."</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>By default, a page is 1/10 of the total size of the view; a line is 1/10 of the page size.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Override these default values by passing custom sizes in the <ph id="ph1">`SetScrollSizes`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For example, you might set the horizontal size to some fraction of the width of the total size and the vertical size to the height of a line in the current font.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Instead of scrolling, <ph id="ph1">`CScrollView`</ph> can automatically scale the view to the current window size.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In this mode, the view has no scroll bars and the logical view is stretched or shrunk to exactly fit the window's client area.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To use this scale-to-fit capability, call <bpt id="p1">[</bpt>CScrollView::SetScaleToFitSize<ept id="p1">](#cscrollview__setscaletofitsize)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>(Call either <ph id="ph1">`SetScaleToFitSize`</ph> or <ph id="ph2">`SetScrollSizes`</ph>, but not both.)</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Before the <ph id="ph1">`OnDraw`</ph> member function of your derived view class is called, <ph id="ph2">`CScrollView`</ph> automatically adjusts the viewport origin for the <ph id="ph3">`CPaintDC`</ph> device-context object that it passes to <ph id="ph4">`OnDraw`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>To adjust the viewport origin for the scrolling window, <ph id="ph1">`CScrollView`</ph> overrides <bpt id="p1">[</bpt>CView::OnPrepareDC<ept id="p1">](../../mfc/reference/cview-class.md#cview__onpreparedc)</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This adjustment is automatic for the <ph id="ph1">`CPaintDC`</ph> device context that <ph id="ph2">`CScrollView`</ph> passes to <ph id="ph3">`OnDraw`</ph>, but you must call <bpt id="p1">**</bpt>CScrollView::OnPrepareDC<ept id="p1">**</ept> yourself for any other device contexts you use, such as a <ph id="ph4">`CClientDC`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>You can override <bpt id="p1">**</bpt>CScrollView::OnPrepareDC<ept id="p1">**</ept> to set the pen, background color, and other drawing attributes, but call the base class to do scaling.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Scroll bars can appear in three places relative to a view, as shown in the following cases:</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Standard window-style scroll bars can be set for the view using the <bpt id="p1">**</bpt>WS_HSCROLL<ept id="p1">**</ept> and <bpt id="p2">**</bpt>WS_VSCROLL<ept id="p2">**</ept><bpt id="p3">[</bpt>Windows Styles<ept id="p3">](../../mfc/reference/window-styles.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Scroll-bar controls can also be added to the frame containing the view, in which case the framework forwards <ph id="ph1">`WM_HSCROLL`</ph> and <ph id="ph2">`WM_VSCROLL`</ph> messages from the frame window to the currently active view.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The framework also forwards scroll messages from a <ph id="ph1">`CSplitterWnd`</ph> splitter control to the currently active splitter pane (a view).</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>When placed in a <bpt id="p1">[</bpt>CSplitterWnd<ept id="p1">](../../mfc/reference/csplitterwnd-class.md)</ept> with shared scroll bars, a <ph id="ph1">`CScrollView`</ph> object will use the shared ones rather than creating its own.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For more information on using <ph id="ph1">`CScrollView`</ph>, see <bpt id="p1">[</bpt>Document/View Architecture<ept id="p1">](../../mfc/document-view-architecture.md)</ept> and <bpt id="p2">[</bpt>Derived View Classes Available in MFC<ept id="p2">](../../mfc/derived-view-classes-available-in-mfc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>CCmdTarget</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>CWnd</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>CView</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxwin.h</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>CScrollView::CheckScrollBars</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Call this member function to determine if the scroll view has horizontal and vertical bars.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>bHasHorzBar</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Indicates the application has a horizontal scroll bar.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>bHasVertBar</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Indicates the application has a vertical scroll bar.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>CScrollView::CScrollView</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CScrollView`</ph> object.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>You must call either <ph id="ph1">`SetScrollSizes`</ph> or <ph id="ph2">`SetScaleToFitSize`</ph> before the scroll view is usable.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>CScrollView::FillOutsideRect</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`FillOutsideRect`</ph> to fill the area of the view that appears outside of the scrolling area.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Device context in which the filling is to be done.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Brush with which the area is to be filled.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`FillOutsideRect`</ph> in your scroll view's <ph id="ph2">`OnEraseBkgnd`</ph> handler function to prevent excessive background repainting.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#164</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>CScrollView::GetDeviceScrollPosition</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`GetDeviceScrollPosition`</ph> when you need the current horizontal and vertical positions of the scroll boxes in the scroll bars.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The horizontal and vertical positions (in device units) of the scroll boxes as a <ph id="ph1">`CPoint`</ph> object.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>This coordinate pair corresponds to the location in the document to which the upper-left corner of the view has been scrolled.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This is useful for offsetting mouse-device positions to scroll-view device positions.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>returns values in device units.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>If you want logical units, use <ph id="ph1">`GetScrollPosition`</ph> instead.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>CScrollView::GetDeviceScrollSizes</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>gets the current mapping mode, the total size, and the line and page sizes of the scrollable view.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Returns the current mapping mode for this view.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>For a list of possible values, see <ph id="ph1">`SetScrollSizes`</ph>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Returns the current total size of the scroll view in device units.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Returns the current horizontal and vertical amounts to scroll in each direction in response to a mouse click in a scroll-bar shaft.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>cx<ept id="p1">**</ept> member contains the horizontal amount.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>cy<ept id="p1">**</ept> member contains the vertical amount.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Returns the current horizontal and vertical amounts to scroll in each direction in response to a mouse click in a scroll arrow.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>cx<ept id="p1">**</ept> member contains the horizontal amount.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>cy<ept id="p1">**</ept> member contains the vertical amount.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Sizes are in device units.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>This member function is rarely called.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>CScrollView::GetScrollPosition</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`GetScrollPosition`</ph> when you need the current horizontal and vertical positions of the scroll boxes in the scroll bars.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The horizontal and vertical positions (in logical units) of the scroll boxes as a <ph id="ph1">`CPoint`</ph> object.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>This coordinate pair corresponds to the location in the document to which the upper-left corner of the view has been scrolled.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>returns values in logical units.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>If you want device units, use <ph id="ph1">`GetDeviceScrollPosition`</ph> instead.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>CScrollView::GetTotalSize</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`GetTotalSize`</ph> to retrieve the current horizontal and vertical sizes of the scroll view.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The total size of the scroll view in logical units.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The horizontal size is in the <bpt id="p1">**</bpt>cx<ept id="p1">**</ept> member of the <ph id="ph1">`CSize`</ph> return value.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The vertical size is in the <bpt id="p1">**</bpt>cy<ept id="p1">**</ept> member.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>CScrollView::ResizeParentToFit</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`ResizeParentToFit`</ph> to let the size of your view dictate the size of its frame window.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>bShrinkOnly</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The kind of resizing to perform.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The default value, <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, shrinks the frame window if appropriate.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Scroll bars will still appear for large views or small frame windows.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>A value of <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> causes the view always to resize the frame window exactly.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>This can be somewhat dangerous since the frame window could get too big to fit inside the multiple document interface (MDI) frame window or the screen.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>This is recommended only for views in MDI child frame windows.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`ResizeParentToFit`</ph> in the <ph id="ph2">`OnInitialUpdate`</ph> handler function of your derived <ph id="ph3">`CScrollView`</ph> class.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>For an example of this member function, see <bpt id="p1">[</bpt>CScrollView::SetScrollSizes<ept id="p1">](#cscrollview__setscrollsizes)</ept>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>assumes that the size of the view window has been set.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>If the view window size has not been set when <ph id="ph1">`ResizeParentToFit`</ph> is called, you will get an assertion.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>To ensure that this does not happen, make the following call before calling <ph id="ph1">`ResizeParentToFit`</ph>:</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#165</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>CScrollView::ScrollToPosition</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`ScrollToPosition`</ph> to scroll to a given point in the view.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The point to scroll to, in logical units.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>x<ept id="p1">**</ept> member must be a positive value (greater than or equal to 0, up to the total size of the view).</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The same is true for the <bpt id="p1">**</bpt>y<ept id="p1">**</ept> member when the mapping mode is <ph id="ph1">`MM_TEXT`</ph>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>y<ept id="p1">**</ept> member is negative in mapping modes other than <ph id="ph1">`MM_TEXT`</ph>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The view will be scrolled so that this point is at the upper-left corner of the window.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>This member function must not be called if the view is scaled to fit.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>CScrollView::SetScaleToFitSize</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`SetScaleToFitSize`</ph> when you want to scale the viewport size to the current window size automatically.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The horizontal and vertical sizes to which the view is to be scaled.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The scroll view's size is measured in logical units.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The horizontal size is contained in the <bpt id="p1">**</bpt>cx<ept id="p1">**</ept> member.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The vertical size is contained in the <bpt id="p1">**</bpt>cy<ept id="p1">**</ept> member.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Both <bpt id="p1">**</bpt>cx<ept id="p1">**</ept> and <bpt id="p2">**</bpt>cy<ept id="p2">**</ept> must be greater than or equal to 0.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>With scroll bars, only a portion of the logical view may be visible at any time.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>But with the scale-to-fit capability, the view has no scroll bars and the logical view is stretched or shrunk to exactly fit the window's client area.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>When the window is resized, the view draws its data at a new scale based on the size of the window.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>You'll typically place the call to <ph id="ph1">`SetScaleToFitSize`</ph> in your override of the view's <ph id="ph2">`OnInitialUpdate`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>If you do not want automatic scaling, call the <ph id="ph1">`SetScrollSizes`</ph> member function instead.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>can be used to implement a "Zoom to Fit" operation.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`SetScrollSizes`</ph> to reinitialize scrolling.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>assumes that the size of the view window has been set.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>If the view window size has not been set when <ph id="ph1">`SetScaleToFitSize`</ph> is called, you will get an assertion.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>To ensure that this does not happen, make the following call before calling <ph id="ph1">`SetScaleToFitSize`</ph>:</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#165</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>CScrollView::SetScrollSizes</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`SetScrollSizes`</ph> when the view is about to be updated.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The mapping mode to set for this view.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Possible values include:</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Mapping Mode</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Logical Unit</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Positive y-axis Extends...</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>1 pixel</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Downward</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>0.01 mm</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Upward</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>1/1440 in</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Upward</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>0.001 in</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Upward</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>0.1 mm</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Upward</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>0.01 in</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Upward</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>All of these modes are defined by Windows.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Two standard mapping modes, <ph id="ph1">`MM_ISOTROPIC`</ph> and <ph id="ph2">`MM_ANISOTROPIC`</ph>, are not used for <ph id="ph3">`CScrollView`</ph>.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The class library provides the <ph id="ph1">`SetScaleToFitSize`</ph> member function for scaling the view to window size.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Column three in the table above describes the coordinate orientation.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The total size of the scroll view.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>cx<ept id="p1">**</ept> member contains the horizontal extent.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>cy<ept id="p1">**</ept> member contains the vertical extent.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Sizes are in logical units.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Both <bpt id="p1">**</bpt>cx<ept id="p1">**</ept> and <bpt id="p2">**</bpt>cy<ept id="p2">**</ept> must be greater than or equal to 0.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The horizontal and vertical amounts to scroll in each direction in response to a mouse click in a scroll-bar shaft.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>cx<ept id="p1">**</ept> member contains the horizontal amount.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>cy<ept id="p1">**</ept> member contains the vertical amount.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The horizontal and vertical amounts to scroll in each direction in response to a mouse click in a scroll arrow.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>cx<ept id="p1">**</ept> member contains the horizontal amount.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>cy<ept id="p1">**</ept> member contains the vertical amount.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Call it in your override of the <ph id="ph1">`OnUpdate`</ph> member function to adjust scrolling characteristics when, for example, the document is initially displayed or when it changes size.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>You will typically obtain size information from the view's associated document by calling a document member function, perhaps called <ph id="ph1">`GetMyDocSize`</ph>, that you supply with your derived document class.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The following code shows this approach:</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#166</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Alternatively, you might sometimes need to set a fixed size, as in the following code:</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#167</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>You must set the mapping mode to any of the Windows mapping modes except <ph id="ph1">`MM_ISOTROPIC`</ph> or <ph id="ph2">`MM_ANISOTROPIC`</ph>.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>If you want to use an unconstrained mapping mode, call the <ph id="ph1">`SetScaleToFitSize`</ph> member function instead of <ph id="ph2">`SetScrollSizes`</ph>.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#168</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#169</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>MFC Sample DIBLOOK</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>CView Class</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>CView Class</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>CSplitterWnd Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>