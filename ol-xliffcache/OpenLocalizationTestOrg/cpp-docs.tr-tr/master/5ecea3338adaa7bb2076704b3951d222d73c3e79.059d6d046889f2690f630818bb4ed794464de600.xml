{"nodes":[{"pos":[12,53],"content":"abs, labs, llabs, _abs64 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"abs, labs, llabs, _abs64 | Microsoft Docs","pos":[0,41]}]},{"pos":[1167,1191],"content":"abs, labs, llabs, _abs64","linkify":"abs, labs, llabs, _abs64","nodes":[{"content":"abs, labs, llabs, _abs64","pos":[0,24]}]},{"content":"Calculates the absolute value of the argument.","pos":[1192,1238]},{"pos":[1247,1253],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1673,1683],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Numeric value.","pos":[1694,1708]},{"pos":[1717,1729],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The <ph id=\"ph1\">`abs`</ph>, <ph id=\"ph2\">`labs`</ph>, <ph id=\"ph3\">`llabs`</ph> and <ph id=\"ph4\">`_abs64`</ph> functions return the absolute value of the parameter <ph id=\"ph5\">`n`</ph>.","pos":[1733,1830],"source":"The `abs`, `labs`, `llabs` and `_abs64` functions return the absolute value of the parameter `n`."},{"content":"There is no error return.","pos":[1831,1856]},{"pos":[1865,1872],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Because C++ allows overloading, you can call overloads of <ph id=\"ph1\">`abs`</ph> that take and return <ph id=\"ph2\">`long`</ph>, <ph id=\"ph3\">`long long`</ph>, <ph id=\"ph4\">`float`</ph>, <ph id=\"ph5\">`double`</ph>, and <ph id=\"ph6\">`long double`</ph> values.","pos":[1876,2026],"source":"Because C++ allows overloading, you can call overloads of `abs` that take and return `long`, `long long`, `float`, `double`, and `long double` values."},{"content":"These overloads are defined in the <ph id=\"ph1\">\\&lt;</ph>cmath&gt; header.","pos":[2027,2078],"source":" These overloads are defined in the \\<cmath> header."},{"content":"In a C program, <ph id=\"ph1\">`abs`</ph> always takes and returns an int.","pos":[2079,2133],"source":" In a C program, `abs` always takes and returns an int."},{"pos":[2140,2162],"content":"<bpt id=\"p1\">**</bpt>Microsoft Specific<ept id=\"p1\">**</ept>","source":"**Microsoft Specific**"},{"content":"Because the range of negative integers that can be represented by using any integral type is larger than the range of positive integers that can be represented by using that type, it's possible to supply an argument to these functions that can’t be converted.","pos":[2169,2428]},{"content":"If the absolute value of the argument cannot be represented by the return type, the <ph id=\"ph1\">`abs`</ph> functions return the argument value unchanged.","pos":[2429,2565],"source":" If the absolute value of the argument cannot be represented by the return type, the `abs` functions return the argument value unchanged."},{"content":"Specifically, <ph id=\"ph1\">`abs(INT_MIN)`</ph> returns <ph id=\"ph2\">`INT_MIN`</ph>, <ph id=\"ph3\">`labs(LONG_MIN)`</ph> returns <ph id=\"ph4\">`LONG_MIN`</ph>, <ph id=\"ph5\">`llabs(LLONG_MIN)`</ph> returns <ph id=\"ph6\">`LLONG_MIN`</ph>, and <ph id=\"ph7\">`_abs64(_I64_MIN)`</ph> returns <ph id=\"ph8\">`_I64_MIN`</ph>.","pos":[2566,2733],"source":" Specifically, `abs(INT_MIN)` returns `INT_MIN`, `labs(LONG_MIN)` returns `LONG_MIN`, `llabs(LLONG_MIN)` returns `LLONG_MIN`, and `_abs64(_I64_MIN)` returns `_I64_MIN`."},{"content":"This means that the <ph id=\"ph1\">`abs`</ph> functions cannot be used to guarantee a positive value.","pos":[2734,2815],"source":" This means that the `abs` functions cannot be used to guarantee a positive value."},{"pos":[2822,2848],"content":"<bpt id=\"p1\">**</bpt>End Microsoft Specific<ept id=\"p1\">**</ept>","source":"**End Microsoft Specific**"},{"pos":[2857,2869],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[2876,2883]},{"content":"Required C header","pos":[2884,2901]},{"content":"Required C++ header","pos":[2902,2921]},{"pos":[2996,3018],"content":"<ph id=\"ph1\">`abs`</ph>, <ph id=\"ph2\">`labs`</ph>, <ph id=\"ph3\">`llabs`</ph>","source":"`abs`, `labs`, `llabs`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>math.h&gt; or <ph id=\"ph2\">\\&lt;</ph>stdlib.h&gt;","pos":[3019,3043],"source":"\\<math.h> or \\<stdlib.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>cmath&gt;, <ph id=\"ph2\">\\&lt;</ph>cstdlib&gt;, <ph id=\"ph3\">\\&lt;</ph>stdlib.h&gt; or <ph id=\"ph4\">\\&lt;</ph>math.h&gt;","pos":[3044,3090],"source":"\\<cmath>, \\<cstdlib>, \\<stdlib.h> or \\<math.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdlib.h&gt;","pos":[3104,3115],"source":"\\<stdlib.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>cstdlib&gt; or <ph id=\"ph2\">\\&lt;</ph>stdlib.h&gt;","pos":[3116,3141],"source":"\\<cstdlib> or \\<stdlib.h>"},{"pos":[3149,3234],"content":"To use the overloaded versions of <ph id=\"ph1\">`abs`</ph> in C++, you must include the <ph id=\"ph2\">\\&lt;</ph>cmath&gt; header.","source":"To use the overloaded versions of `abs` in C++, you must include the \\<cmath> header."},{"pos":[3243,3250],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This program computes and displays the absolute values of several numbers.","pos":[3254,3328]},{"pos":[5024,5049],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[5053,5135],"content":"<bpt id=\"p1\">[</bpt>System::Math::Abs<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.math.abs.aspx)</ept>","source":"[System::Math::Abs](https://msdn.microsoft.com/en-us/library/system.math.abs.aspx)"},{"pos":[5144,5152],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Data Conversion<ept id=\"p1\">](../../c-runtime-library/data-conversion.md)</ept><ph id=\"ph1\"> </ph>","pos":[5156,5218],"source":"[Data Conversion](../../c-runtime-library/data-conversion.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Floating-Point Support<ept id=\"p1\">](../../c-runtime-library/floating-point-support.md)</ept><ph id=\"ph1\"> </ph>","pos":[5221,5298],"source":" [Floating-Point Support](../../c-runtime-library/floating-point-support.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_cabs<ept id=\"p1\">](../../c-runtime-library/reference/cabs.md)</ept><ph id=\"ph1\"> </ph>","pos":[5301,5353],"source":" [_cabs](../../c-runtime-library/reference/cabs.md) "},{"content":"<bpt id=\"p1\"> [</bpt>fabs, fabsf, fabsl<ept id=\"p1\">](../../c-runtime-library/reference/fabs-fabsf-fabsl.md)</ept><ph id=\"ph1\"> </ph>","pos":[5356,5433],"source":" [fabs, fabsf, fabsl](../../c-runtime-library/reference/fabs-fabsf-fabsl.md) "},{"content":"<bpt id=\"p1\"> [</bpt>imaxabs<ept id=\"p1\">](../../c-runtime-library/reference/imaxabs.md)</ept>","pos":[5436,5492],"source":" [imaxabs](../../c-runtime-library/reference/imaxabs.md)"}],"content":"---\ntitle: \"abs, labs, llabs, _abs64 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"abs\"\n  - \"_abs64\"\n  - \"labs\"\n  - \"llabs\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-utility-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"stdlib/_abs64\"\n  - \"math/abs\"\n  - \"_abs64\"\n  - \"abs\"\n  - \"labs\"\n  - \"math/labs\"\n  - \"llabs\"\n  - \"math/llabs\"\n  - \"cmath/abs\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"absolute values\"\n  - \"abs function\"\n  - \"abs64 function\"\n  - \"_abs64 function\"\n  - \"calculating absolute values\"\nms.assetid: 60f789d1-4a1e-49f5-9e4e-0bdb277ea26a\ncaps.latest.revision: 29\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# abs, labs, llabs, _abs64\nCalculates the absolute value of the argument.  \n  \n## Syntax  \n  \n```  \nint abs(   \n   int n   \n);  \nlong abs(   \n   long n   \n);   // C++ only  \nlong long abs(   \n   long long n   \n);   // C++ only  \ndouble abs(   \n   double n   \n);   // C++ only  \nlong double abs(  \n   long double n  \n);   // C++ only  \nfloat abs(  \n   float n   \n);   // C++ only  \nlong labs(  \n   long n   \n);  \nlong long llabs(  \n   long long n   \n);  \n__int64 _abs64(   \n   __int64 n   \n);  \n```  \n  \n#### Parameters  \n `n`  \n Numeric value.  \n  \n## Return Value  \n The `abs`, `labs`, `llabs` and `_abs64` functions return the absolute value of the parameter `n`. There is no error return.  \n  \n## Remarks  \n Because C++ allows overloading, you can call overloads of `abs` that take and return `long`, `long long`, `float`, `double`, and `long double` values. These overloads are defined in the \\<cmath> header. In a C program, `abs` always takes and returns an int.  \n  \n **Microsoft Specific**  \n  \n Because the range of negative integers that can be represented by using any integral type is larger than the range of positive integers that can be represented by using that type, it's possible to supply an argument to these functions that can’t be converted. If the absolute value of the argument cannot be represented by the return type, the `abs` functions return the argument value unchanged. Specifically, `abs(INT_MIN)` returns `INT_MIN`, `labs(LONG_MIN)` returns `LONG_MIN`, `llabs(LLONG_MIN)` returns `LLONG_MIN`, and `_abs64(_I64_MIN)` returns `_I64_MIN`. This means that the `abs` functions cannot be used to guarantee a positive value.  \n  \n **End Microsoft Specific**  \n  \n## Requirements  \n  \n|Routine|Required C header|Required C++ header|  \n|-------------|-----------------------|---------------------------|  \n|`abs`, `labs`, `llabs`|\\<math.h> or \\<stdlib.h>|\\<cmath>, \\<cstdlib>, \\<stdlib.h> or \\<math.h>|  \n|`_abs64`|\\<stdlib.h>|\\<cstdlib> or \\<stdlib.h>|  \n  \n To use the overloaded versions of `abs` in C++, you must include the \\<cmath> header.  \n  \n## Example  \n This program computes and displays the absolute values of several numbers.  \n  \n```c  \n// crt_abs.c  \n// Build: cl /W3 /TC crt_abs.c  \n// This program demonstrates the use of the abs function  \n// by computing and displaying the absolute values of  \n// several numbers.  \n  \n#include <stdio.h>  \n#include <math.h>  \n#include <stdlib.h>  \n#include <limits.h>  \n  \nint main( void )  \n{  \n    int ix = -4;  \n    long lx = -41567L;  \n    long long llx = -9876543210LL;  \n    __int64 wx = -1;  \n  \n    // absolute 32 bit integer value  \n    printf_s(\"The absolute value of %d is %d\\n\", ix, abs(ix));  \n  \n    // absolute long integer value  \n    printf_s(\"The absolute value of %ld is %ld\\n\", lx, labs(lx));  \n  \n    // absolute long long integer value  \n    printf_s(\"The absolute value of %lld is %lld\\n\", llx, llabs(llx));  \n  \n    // absolute 64 bit integer value  \n    printf_s(\"The absolute value of 0x%.16I64x is 0x%.16I64x\\n\", wx,   \n        _abs64(wx));  \n  \n    // Integer error cases:  \n    printf_s(\"Microsoft implementation-specific results:\\n\");  \n    printf_s(\" abs(INT_MIN) returns %d\\n\", abs(INT_MIN));  \n    printf_s(\" labs(LONG_MIN) returns %ld\\n\", labs(LONG_MIN));  \n    printf_s(\" llabs(LLONG_MIN) returns %lld\\n\", llabs(LLONG_MIN));  \n    printf_s(\" _abs64(_I64_MIN) returns 0x%.16I64x\\n\", _abs64(_I64_MIN));  \n}  \n```  \n  \n```Output  \nThe absolute value of -4 is 4  \nThe absolute value of -41567 is 41567  \nThe absolute value of -9876543210 is 9876543210  \nThe absolute value of 0xffffffffffffffff is 0x0000000000000001  \nMicrosoft implementation-specific results:  \n abs(INT_MIN) returns -2147483648  \n labs(LONG_MIN) returns -2147483648  \n llabs(LLONG_MIN) returns -9223372036854775808  \n _abs64(_I64_MIN) returns 0x8000000000000000  \n  \n```  \n  \n## .NET Framework Equivalent  \n [System::Math::Abs](https://msdn.microsoft.com/en-us/library/system.math.abs.aspx)  \n  \n## See Also  \n [Data Conversion](../../c-runtime-library/data-conversion.md)   \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [_cabs](../../c-runtime-library/reference/cabs.md)   \n [fabs, fabsf, fabsl](../../c-runtime-library/reference/fabs-fabsf-fabsl.md)   \n [imaxabs](../../c-runtime-library/reference/imaxabs.md)"}