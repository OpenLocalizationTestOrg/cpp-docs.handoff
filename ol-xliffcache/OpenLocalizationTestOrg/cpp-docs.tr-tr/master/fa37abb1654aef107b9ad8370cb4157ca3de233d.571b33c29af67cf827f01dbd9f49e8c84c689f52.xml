{"nodes":[{"pos":[12,46],"content":"_CrtMemCheckpoint | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_CrtMemCheckpoint | Microsoft Docs","pos":[0,34]}]},{"pos":[993,1010],"content":"_CrtMemCheckpoint","linkify":"_CrtMemCheckpoint","nodes":[{"content":"_CrtMemCheckpoint","pos":[0,17]}]},{"pos":[1011,1139],"content":"Obtains the current state of the debug heap and stores in an application-supplied <ph id=\"ph1\">`_CrtMemState`</ph> structure (debug version only).","source":"Obtains the current state of the debug heap and stores in an application-supplied `_CrtMemState` structure (debug version only)."},{"pos":[1148,1154],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1237,1247],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to <ph id=\"ph1\">`_CrtMemState`</ph> structure to fill with the memory checkpoint.","pos":[1262,1333],"source":" Pointer to `_CrtMemState` structure to fill with the memory checkpoint."},{"pos":[1342,1349],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_CrtMemCheckpoint`</ph> function creates a snapshot of the current state of the debug heap at any given moment.","pos":[1353,1464],"source":"The `_CrtMemCheckpoint` function creates a snapshot of the current state of the debug heap at any given moment."},{"content":"This snapshot can be used by other heap state functions such as <bpt id=\"p1\">[</bpt>_CrtMemDifference<ept id=\"p1\">](../../c-runtime-library/reference/crtmemdifference.md)</ept> to help detect memory leaks and other problems.","pos":[1465,1651],"source":" This snapshot can be used by other heap state functions such as [_CrtMemDifference](../../c-runtime-library/reference/crtmemdifference.md) to help detect memory leaks and other problems."},{"content":"When <bpt id=\"p1\">[</bpt>_DEBUG<ept id=\"p1\">](../../c-runtime-library/debug.md)</ept> is not defined, calls to <ph id=\"ph1\">`_CrtMemState`</ph> are removed during preprocessing.","pos":[1652,1773],"source":" When [_DEBUG](../../c-runtime-library/debug.md) is not defined, calls to `_CrtMemState` are removed during preprocessing."},{"content":"The application must pass a pointer to a previously allocated instance of the <ph id=\"ph1\">`_CrtMemState`</ph> structure, defined in Crtdbg.h, in the <ph id=\"ph2\">`state`</ph> parameter.","pos":[1780,1930],"source":"The application must pass a pointer to a previously allocated instance of the `_CrtMemState` structure, defined in Crtdbg.h, in the `state` parameter."},{"content":"If <ph id=\"ph1\">`_CrtMemCheckpoint`</ph> encounters an error during the checkpoint creation, the function generates a <ph id=\"ph2\">`_CRT_WARN`</ph> debug report describing the problem.","pos":[1931,2079],"source":" If `_CrtMemCheckpoint` encounters an error during the checkpoint creation, the function generates a `_CRT_WARN` debug report describing the problem."},{"content":"For more information about heap state functions and the <ph id=\"ph1\">`_CrtMemState`</ph> structure, see <bpt id=\"p1\">[</bpt>Heap State Reporting Functions<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","pos":[2086,2252],"source":"For more information about heap state functions and the `_CrtMemState` structure, see [Heap State Reporting Functions](/visualstudio/debugger/crt-debug-heap-details)."},{"content":"For more information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see <bpt id=\"p1\">[</bpt>CRT Debug Heap Details<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","pos":[2253,2453],"source":" For more information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see [CRT Debug Heap Details](/visualstudio/debugger/crt-debug-heap-details)."},{"content":"If <ph id=\"ph1\">`state`</ph> is <ph id=\"ph2\">`NULL`</ph>, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2460,2612],"source":"If `state` is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, <bpt id=\"p1\">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept> is set to <ph id=\"ph1\">`EINVAL`</ph> and the function returns.","pos":[2613,2810],"source":" If execution is allowed to continue, [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md) is set to `EINVAL` and the function returns."},{"pos":[2819,2831],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[2838,2845]},{"content":"Required header","pos":[2846,2861]},{"content":"<ph id=\"ph1\">\\&lt;</ph>crtdbg.h&gt;, <ph id=\"ph2\">\\&lt;</ph>errno.h&gt;","pos":[2926,2949],"source":"\\<crtdbg.h>, \\<errno.h>"},{"pos":[2957,3075],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[3082,3129],"content":"<bpt id=\"p1\">**</bpt>Libraries:<ept id=\"p1\">**</ept> Debug versions of the UCRT only.","source":"**Libraries:** Debug versions of the UCRT only."},{"pos":[3138,3163],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[3167,3182]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[3183,3230],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[3231,3356],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[3365,3373],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Debug Routines<ept id=\"p1\">](../../c-runtime-library/debug-routines.md)</ept><ph id=\"ph1\"> </ph>","pos":[3377,3437],"source":"[Debug Routines](../../c-runtime-library/debug-routines.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_CrtMemDifference<ept id=\"p1\">](../../c-runtime-library/reference/crtmemdifference.md)</ept>","pos":[3440,3515],"source":" [_CrtMemDifference](../../c-runtime-library/reference/crtmemdifference.md)"}],"content":"---\ntitle: \"_CrtMemCheckpoint | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_CrtMemCheckpoint\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"CrtMemCheckpoint\"\n  - \"_CrtMemCheckpoint\"\n  - \"crtdbg/_CrtMemCheckpoint\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"CrtMemCheckpoint function\"\n  - \"_CrtMemCheckpoint function\"\nms.assetid: f1bacbaa-5a0c-498a-ac7a-b6131d83dfbc\ncaps.latest.revision: 18\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _CrtMemCheckpoint\nObtains the current state of the debug heap and stores in an application-supplied `_CrtMemState` structure (debug version only).  \n  \n## Syntax  \n  \n```  \nvoid _CrtMemCheckpoint(  \n   _CrtMemState *state   \n);  \n```  \n  \n#### Parameters  \n `state`  \n Pointer to `_CrtMemState` structure to fill with the memory checkpoint.  \n  \n## Remarks  \n The `_CrtMemCheckpoint` function creates a snapshot of the current state of the debug heap at any given moment. This snapshot can be used by other heap state functions such as [_CrtMemDifference](../../c-runtime-library/reference/crtmemdifference.md) to help detect memory leaks and other problems. When [_DEBUG](../../c-runtime-library/debug.md) is not defined, calls to `_CrtMemState` are removed during preprocessing.  \n  \n The application must pass a pointer to a previously allocated instance of the `_CrtMemState` structure, defined in Crtdbg.h, in the `state` parameter. If `_CrtMemCheckpoint` encounters an error during the checkpoint creation, the function generates a `_CRT_WARN` debug report describing the problem.  \n  \n For more information about heap state functions and the `_CrtMemState` structure, see [Heap State Reporting Functions](/visualstudio/debugger/crt-debug-heap-details). For more information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see [CRT Debug Heap Details](/visualstudio/debugger/crt-debug-heap-details).  \n  \n If `state` is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md) is set to `EINVAL` and the function returns.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_CrtMemCheckpoint`|\\<crtdbg.h>, \\<errno.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n **Libraries:** Debug versions of the UCRT only.  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Debug Routines](../../c-runtime-library/debug-routines.md)   \n [_CrtMemDifference](../../c-runtime-library/reference/crtmemdifference.md)"}