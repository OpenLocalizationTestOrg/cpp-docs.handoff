{"nodes":[{"pos":[12,50],"content":"_mktemp_s, _wmktemp_s | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_mktemp_s, _wmktemp_s | Microsoft Docs","pos":[0,38]}]},{"content":"_mktemp_s, _wmktemp_s","pos":[1135,1156]},{"content":"Creates a unique file name.","pos":[1157,1184]},{"content":"These are versions of <bpt id=\"p1\">[</bpt>_mktemp, _wmktemp<ept id=\"p1\">](../../c-runtime-library/reference/mktemp-wmktemp.md)</ept> with security enhancements as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1185,1411],"source":" These are versions of [_mktemp, _wmktemp](../../c-runtime-library/reference/mktemp-wmktemp.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"content":"Syntax","pos":[1420,1426]},{"content":"Parameters","pos":[1784,1794]},{"content":"File name pattern.","pos":[1812,1830]},{"content":"Size of the buffer in single-byte characters in <ph id=\"ph1\">`_mktemp_s`</ph>; wide characters in <ph id=\"ph2\">`_wmktemp_s`</ph>, including the null terminator.","pos":[1854,1978],"source":" Size of the buffer in single-byte characters in `_mktemp_s`; wide characters in `_wmktemp_s`, including the null terminator."},{"content":"Return Value","pos":[1987,1999]},{"content":"Both of these functions return zero on success; an error code on failure.","pos":[2003,2076]},{"content":"Error Conditions","pos":[2086,2102]},{"content":"return value","pos":[2136,2148]},{"content":"new value in template","pos":[2153,2174]},{"content":"any","pos":[2284,2287]},{"pos":[2308,2367],"content":"Incorrect format (see <ph id=\"ph1\">`Remarks`</ph> section for correct format)","source":"Incorrect format (see `Remarks` section for correct format)"},{"content":"any","pos":[2368,2371]},{"content":"empty string","pos":[2381,2393]},{"content":"any","pos":[2398,2401]},{"content":"&lt;= number of X's","pos":[2402,2418],"source":"<= number of X's"},{"content":"empty string","pos":[2428,2440]},{"content":"If any of the above error conditions occurs, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2448,2623],"source":"If any of the above error conditions occurs, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, <ph id=\"ph1\">`errno`</ph> is set to <ph id=\"ph2\">`EINVAL`</ph> and the functions returns <ph id=\"ph3\">`EINVAL`</ph>.","pos":[2624,2723],"source":" If execution is allowed to continue, `errno` is set to `EINVAL` and the functions returns `EINVAL`."},{"content":"Remarks","pos":[2732,2739]},{"content":"The <ph id=\"ph1\">`_mktemp_s`</ph> function creates a unique file name by modifying the <ph id=\"ph2\">`template`</ph> argument, so that after the call, the <ph id=\"ph3\">`template`</ph> pointer points to a string containing the new file name.","pos":[2743,2928],"source":"The `_mktemp_s` function creates a unique file name by modifying the `template` argument, so that after the call, the `template` pointer points to a string containing the new file name."},{"content":"automatically handles multibyte-character string arguments as appropriate, recognizing multibyte-character sequences according to the multibyte code page currently in use by the run-time system.","pos":[2941,3135]},{"content":"is a wide-character version of <ph id=\"ph1\">`_mktemp_s`</ph>; the argument of <ph id=\"ph2\">`_wmktemp_s`</ph> is a wide-character string.","pos":[3149,3249],"source":" is a wide-character version of `_mktemp_s`; the argument of `_wmktemp_s` is a wide-character string."},{"content":"and <ph id=\"ph1\">`_mktemp_s`</ph> behave identically otherwise, except that <ph id=\"ph2\">`_wmktemp_s`</ph> does not handle multibyte-character strings.","pos":[3263,3378],"source":" and `_mktemp_s` behave identically otherwise, except that `_wmktemp_s` does not handle multibyte-character strings."},{"content":"Generic-Text Routine Mappings","pos":[3388,3417]},{"content":"Tchar.h routine","pos":[3424,3439]},{"content":"_UNICODE and _MBCS not defined","pos":[3440,3470]},{"content":"_MBCS defined","pos":[3471,3484]},{"content":"_UNICODE defined","pos":[3485,3501]},{"content":"The <ph id=\"ph1\">`template`</ph> argument has the form <ph id=\"ph2\">`baseXXXXXX`</ph>, where <ph id=\"ph3\">`base`</ph> is the part of the new file name that you supply and each X is a placeholder for a character supplied by <ph id=\"ph4\">`_mktemp_s`</ph>.","pos":[3673,3854],"source":"The `template` argument has the form `baseXXXXXX`, where `base` is the part of the new file name that you supply and each X is a placeholder for a character supplied by `_mktemp_s`."},{"content":"Each placeholder character in <ph id=\"ph1\">`template`</ph> must be an uppercase X. <ph id=\"ph2\">`_mktemp_s`</ph> preserves <ph id=\"ph3\">`base`</ph> and replaces the first trailing X with an alphabetic character.","pos":[3855,4012],"source":" Each placeholder character in `template` must be an uppercase X. `_mktemp_s` preserves `base` and replaces the first trailing X with an alphabetic character."},{"content":"replaces the following trailing X's with a five-digit value; this value is a unique number identifying the calling process, or in multithreaded programs, the calling thread.","pos":[4025,4198]},{"content":"Each successful call to <ph id=\"ph1\">`_mktemp_s`</ph> modifies <ph id=\"ph2\">`template`</ph>.","pos":[4205,4261],"source":"Each successful call to `_mktemp_s` modifies `template`."},{"content":"In each subsequent call from the same process or thread with the same <ph id=\"ph1\">`template`</ph> argument, <ph id=\"ph2\">`_mktemp_s`</ph> checks for file names that match names returned by <ph id=\"ph3\">`_mktemp_s`</ph> in previous calls.","pos":[4262,4446],"source":" In each subsequent call from the same process or thread with the same `template` argument, `_mktemp_s` checks for file names that match names returned by `_mktemp_s` in previous calls."},{"content":"If no file exists for a given name, <ph id=\"ph1\">`_mktemp_s`</ph> returns that name.","pos":[4447,4513],"source":" If no file exists for a given name, `_mktemp_s` returns that name."},{"content":"If files exist for all previously returned names, <ph id=\"ph1\">`_mktemp_s`</ph> creates a new name by replacing the alphabetic character it used in the previously returned name with the next available lowercase letter, in order, from 'a' through 'z'.","pos":[4514,4746],"source":" If files exist for all previously returned names, `_mktemp_s` creates a new name by replacing the alphabetic character it used in the previously returned name with the next available lowercase letter, in order, from 'a' through 'z'."},{"content":"For example, if <ph id=\"ph1\">`base`</ph> is:","pos":[4747,4773],"source":" For example, if `base` is:"},{"pos":[4800,4886],"content":"and the five-digit value supplied by <ph id=\"ph1\">`_mktemp_s`</ph> is 12345, the first name returned is:","source":"and the five-digit value supplied by `_mktemp_s` is 12345, the first name returned is:"},{"pos":[4919,5096],"content":"If this name is used to create file FNA12345 and this file still exists, the next name returned on a call from the same process or thread with the same <ph id=\"ph1\">`base`</ph> for <ph id=\"ph2\">`template`</ph> is:","source":"If this name is used to create file FNA12345 and this file still exists, the next name returned on a call from the same process or thread with the same `base` for `template` is:"},{"content":"If FNA12345 does not exist, the next name returned is again:","pos":[5129,5189]},{"content":"can create a maximum of 26 unique file names for any given combination of base and template values.","pos":[5234,5333]},{"content":"Therefore, FNZ12345 is the last unique file name <ph id=\"ph1\">`_mktemp_s`</ph> can create for the <ph id=\"ph2\">`base`</ph> and <ph id=\"ph3\">`template`</ph> values used in this example.","pos":[5334,5464],"source":" Therefore, FNZ12345 is the last unique file name `_mktemp_s` can create for the `base` and `template` values used in this example."},{"content":"In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically (eliminating the need to specify a size argument) and they can automatically replace older, non-secure functions with their newer, secure counterparts.","pos":[5471,5741]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[5742,5850],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"content":"Requirements","pos":[5859,5871]},{"content":"Routine","pos":[5878,5885]},{"content":"Required header","pos":[5886,5901]},{"content":"io.h&gt;","pos":[5960,5965],"source":"io.h>"},{"content":"io.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[5985,6004],"source":"io.h> or \\<wchar.h>"},{"pos":[6012,6130],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[6139,6146]},{"content":"Sample Output","pos":[7190,7203]},{"content":".NET Framework Equivalent","pos":[7377,7402]},{"content":"Not applicable.","pos":[7406,7421]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[7422,7469],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[7470,7595],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[7604,7612]},{"content":"File Handling","pos":[7617,7630]},{"content":"fopen, _wfopen","pos":[7679,7693]},{"content":"_getmbcp","pos":[7751,7759]},{"content":"_getpid","pos":[7812,7819]},{"content":"_open, _wopen","pos":[7871,7884]},{"content":"_setmbcp","pos":[7940,7948]},{"content":"_tempnam, _wtempnam, tmpnam, _wtmpnam","pos":[8001,8038]},{"content":"tmpfile_s","pos":[8115,8124]}],"content":"---\ntitle: \"_mktemp_s, _wmktemp_s | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_mktemp_s\"\n  - \"_wmktemp_s\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"wmktemp_s\"\n  - \"mktemp_s\"\n  - \"_mktemp_s\"\n  - \"_wmktemp_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_tmktemp_s function\"\n  - \"mktemp_s function\"\n  - \"_wmktemp_s function\"\n  - \"_mktemp_s function\"\n  - \"files [C++], temporary\"\n  - \"tmktemp_s function\"\n  - \"wmktemp_s function\"\n  - \"temporary files [C++]\"\nms.assetid: 92a7e269-7f3d-4c71-bad6-14bc827a451d\ncaps.latest.revision: 23\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _mktemp_s, _wmktemp_s\nCreates a unique file name. These are versions of [_mktemp, _wmktemp](../../c-runtime-library/reference/mktemp-wmktemp.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n## Syntax  \n  \n```  \nerrno_t _mktemp_s(  \n   char *template,  \n   size_t sizeInChars  \n);  \nerrno_t _wmktemp_s(  \n   wchar_t *template,  \n   size_t sizeInChars  \n);  \ntemplate <size_t size>  \nerrno_t _mktemp_s(  \n   char (&template)[size]  \n); // C++ only  \ntemplate <size_t size>  \nerrno_t _wmktemp_s(  \n   wchar_t (&template)[size]  \n); // C++ only  \n```  \n  \n#### Parameters  \n `template`  \n File name pattern.  \n  \n `sizeInChars`  \n Size of the buffer in single-byte characters in `_mktemp_s`; wide characters in `_wmktemp_s`, including the null terminator.  \n  \n## Return Value  \n Both of these functions return zero on success; an error code on failure.  \n  \n### Error Conditions  \n  \n|`template`|`sizeInChars`|**return value**|**new value in template**|  \n|----------------|-------------------|----------------------|-------------------------------|  \n|`NULL`|any|`EINVAL`|`NULL`|  \n|Incorrect format (see `Remarks` section for correct format)|any|`EINVAL`|empty string|  \n|any|<= number of X's|`EINVAL`|empty string|  \n  \n If any of the above error conditions occurs, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, `errno` is set to `EINVAL` and the functions returns `EINVAL`.  \n  \n## Remarks  \n The `_mktemp_s` function creates a unique file name by modifying the `template` argument, so that after the call, the `template` pointer points to a string containing the new file name. `_mktemp_s` automatically handles multibyte-character string arguments as appropriate, recognizing multibyte-character sequences according to the multibyte code page currently in use by the run-time system. `_wmktemp_s` is a wide-character version of `_mktemp_s`; the argument of `_wmktemp_s` is a wide-character string. `_wmktemp_s` and `_mktemp_s` behave identically otherwise, except that `_wmktemp_s` does not handle multibyte-character strings.  \n  \n### Generic-Text Routine Mappings  \n  \n|Tchar.h routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_tmktemp_s`|`_mktemp_s`|`_mktemp_s`|`_wmktemp_s`|  \n  \n The `template` argument has the form `baseXXXXXX`, where `base` is the part of the new file name that you supply and each X is a placeholder for a character supplied by `_mktemp_s`. Each placeholder character in `template` must be an uppercase X. `_mktemp_s` preserves `base` and replaces the first trailing X with an alphabetic character. `_mktemp_s` replaces the following trailing X's with a five-digit value; this value is a unique number identifying the calling process, or in multithreaded programs, the calling thread.  \n  \n Each successful call to `_mktemp_s` modifies `template`. In each subsequent call from the same process or thread with the same `template` argument, `_mktemp_s` checks for file names that match names returned by `_mktemp_s` in previous calls. If no file exists for a given name, `_mktemp_s` returns that name. If files exist for all previously returned names, `_mktemp_s` creates a new name by replacing the alphabetic character it used in the previously returned name with the next available lowercase letter, in order, from 'a' through 'z'. For example, if `base` is:  \n  \n```  \nfn  \n```  \n  \n and the five-digit value supplied by `_mktemp_s` is 12345, the first name returned is:  \n  \n```  \nfna12345  \n```  \n  \n If this name is used to create file FNA12345 and this file still exists, the next name returned on a call from the same process or thread with the same `base` for `template` is:  \n  \n```  \nfnb12345  \n```  \n  \n If FNA12345 does not exist, the next name returned is again:  \n  \n```  \nfna12345  \n```  \n  \n `_mktemp_s` can create a maximum of 26 unique file names for any given combination of base and template values. Therefore, FNZ12345 is the last unique file name `_mktemp_s` can create for the `base` and `template` values used in this example.  \n  \n In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically (eliminating the need to specify a size argument) and they can automatically replace older, non-secure functions with their newer, secure counterparts. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_mktemp_s`|\\<io.h>|  \n|`_wmktemp_s`|\\<io.h> or \\<wchar.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_mktemp_s.cpp  \n/* The program uses _mktemp to create  \n * five unique filenames. It opens each filename  \n * to ensure that the next name is unique.  \n */  \n  \n#include <io.h>  \n#include <string.h>  \n#include <stdio.h>  \n  \nchar *fnTemplate = \"fnXXXXXX\";  \nchar names[5][9];  \n  \nint main()  \n{  \n   int i, err, sizeInChars;  \n   FILE *fp;  \n  \n   for( i = 0; i < 5; i++ )  \n   {  \n      strcpy_s( names[i], sizeof(names[i]), fnTemplate );  \n      /* Get the size of the string and add one for the null terminator.*/  \n      sizeInChars = strnlen(names[i], 9) + 1;  \n      /* Attempt to find a unique filename: */  \n      err = _mktemp_s( names[i], sizeInChars );  \n      if( err != 0 )  \n         printf( \"Problem creating the template\" );  \n      else  \n      {  \n         if( fopen_s( &fp, names[i], \"w\" ) == 0 )  \n            printf( \"Unique filename is %s\\n\", names[i] );  \n         else  \n            printf( \"Cannot open %s\\n\", names[i] );  \n         fclose( fp );  \n      }  \n   }  \n  \n   return 0;  \n}  \n```  \n  \n## Sample Output  \n  \n```  \nUnique filename is fna03188  \nUnique filename is fnb03188  \nUnique filename is fnc03188  \nUnique filename is fnd03188  \nUnique filename is fne03188  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [File Handling](../../c-runtime-library/file-handling.md)   \n [fopen, _wfopen](../../c-runtime-library/reference/fopen-wfopen.md)   \n [_getmbcp](../../c-runtime-library/reference/getmbcp.md)   \n [_getpid](../../c-runtime-library/reference/getpid.md)   \n [_open, _wopen](../../c-runtime-library/reference/open-wopen.md)   \n [_setmbcp](../../c-runtime-library/reference/setmbcp.md)   \n [_tempnam, _wtempnam, tmpnam, _wtmpnam](../../c-runtime-library/reference/tempnam-wtempnam-tmpnam-wtmpnam.md)   \n [tmpfile_s](../../c-runtime-library/reference/tmpfile-s.md)"}