{"nodes":[{"pos":[12,48],"content":"_spawnlp, _wspawnlp | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_spawnlp, _wspawnlp | Microsoft Docs","pos":[0,36]}]},{"pos":[1121,1140],"content":"_spawnlp, _wspawnlp","linkify":"_spawnlp, _wspawnlp","nodes":[{"content":"_spawnlp, _wspawnlp","pos":[0,19]}]},{"content":"Creates and executes a new process.","pos":[1141,1176]},{"pos":[1184,1404],"content":"[!IMPORTANT]\n This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","leadings":["","> "],"nodes":[{"content":" This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","pos":[13,218],"nodes":[{"content":"This API cannot be used in applications that execute in the Windows Runtime.","pos":[1,77]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRT functions not supported with /ZW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.","pos":[78,205],"source":" For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)."}]}]},{"pos":[1413,1419],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1760,1770],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Execution mode for the calling process.","pos":[1784,1823]},{"content":"Path of the file to be executed.","pos":[1843,1875]},{"content":"List of pointers to arguments.","pos":[1908,1938]},{"content":"The <ph id=\"ph1\">`arg0`</ph> argument is usually a pointer to <ph id=\"ph2\">`cmdname`</ph>.","pos":[1939,1993],"source":" The `arg0` argument is usually a pointer to `cmdname`."},{"content":"The arguments <ph id=\"ph1\">`arg1`</ph> through <ph id=\"ph2\">`argn`</ph> are pointers to the character strings forming the new argument list.","pos":[1994,2098],"source":" The arguments `arg1` through `argn` are pointers to the character strings forming the new argument list."},{"content":"Following <ph id=\"ph1\">`argn`</ph>, there must be a <ph id=\"ph2\">`NULL`</ph> pointer to mark the end of the argument list.","pos":[2099,2185],"source":" Following `argn`, there must be a `NULL` pointer to mark the end of the argument list."},{"pos":[2194,2206],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The return value from a synchronous <ph id=\"ph1\">`_spawnlp`</ph> or <ph id=\"ph2\">`_wspawnlp`</ph> (<ph id=\"ph3\">`_P_WAIT`</ph> specified for <ph id=\"ph4\">`mode`</ph>) is the exit status of the new process.","pos":[2210,2343],"source":"The return value from a synchronous `_spawnlp` or `_wspawnlp` (`_P_WAIT` specified for `mode`) is the exit status of the new process."},{"content":"The return value from an asynchronous <ph id=\"ph1\">`_spawnlp`</ph> or <ph id=\"ph2\">`_wspawnlp`</ph> (<ph id=\"ph3\">`_P_NOWAIT`</ph> or <ph id=\"ph4\">`_P_NOWAITO`</ph> specified for <ph id=\"ph5\">`mode`</ph>) is the process handle.","pos":[2344,2481],"source":" The return value from an asynchronous `_spawnlp` or `_wspawnlp` (`_P_NOWAIT` or `_P_NOWAITO` specified for `mode`) is the process handle."},{"content":"The exit status is 0 if the process terminated normally.","pos":[2482,2538]},{"content":"You can set the exit status to a nonzero value if the spawned process specifically calls the <ph id=\"ph1\">`exit`</ph> routine with a nonzero argument.","pos":[2539,2671],"source":" You can set the exit status to a nonzero value if the spawned process specifically calls the `exit` routine with a nonzero argument."},{"content":"If the new process did not explicitly set a positive exit status, a positive exit status indicates an abnormal exit with an abort or an interrupt.","pos":[2672,2818]},{"content":"A return value of â€“1 indicates an error (the new process is not started).","pos":[2819,2892]},{"content":"In this case, <ph id=\"ph1\">`errno`</ph> is set to one of the following values.","pos":[2893,2953],"source":" In this case, `errno` is set to one of the following values."},{"content":"Argument list exceeds 1024 bytes.","pos":[2971,3004]},{"content":"<ph id=\"ph1\"> `mode`</ph> argument is invalid.","pos":[3022,3050],"source":" `mode` argument is invalid."},{"content":"File or path is not found.","pos":[3069,3095]},{"content":"Specified file is not executable or has invalid executable-file format.","pos":[3115,3186]},{"content":"Not enough memory is available to execute the new process.","pos":[3205,3263]},{"pos":[3270,3447],"content":"For more information about these and other return codes, see <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For more information about these and other return codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"pos":[3456,3463],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3467,3656],"content":"Each of these functions creates and executes a new process, passing each command-line argument as a separate parameter and using the <ph id=\"ph1\">`PATH`</ph> environment variable to find the file to execute.","source":"Each of these functions creates and executes a new process, passing each command-line argument as a separate parameter and using the `PATH` environment variable to find the file to execute."},{"content":"These functions validate their parameters.","pos":[3663,3705]},{"content":"If either <ph id=\"ph1\">`cmdname`</ph> or <ph id=\"ph2\">`arg0`</ph> is an empty string or a null pointer, these functions generate an invalid parameter exception, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[3706,3919],"source":" If either `cmdname` or `arg0` is an empty string or a null pointer, these functions generate an invalid parameter exception, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph>, and return -1.","pos":[3920,4012],"source":" If execution is allowed to continue, these functions set `errno` to `EINVAL`, and return -1."},{"content":"No new process is spawned.","pos":[4013,4039]},{"pos":[4048,4060],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[4067,4074]},{"content":"Required header","pos":[4075,4090]},{"content":"<ph id=\"ph1\">\\&lt;</ph>process.h&gt;","pos":[4146,4158],"source":"\\<process.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt; or <ph id=\"ph2\">\\&lt;</ph>wchar.h&gt;","pos":[4175,4199],"source":"\\<stdio.h> or \\<wchar.h>"},{"pos":[4207,4305],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"pos":[4314,4321],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4325,4423],"content":"See the example in <bpt id=\"p1\">[</bpt>_spawn, _wspawn Functions<ept id=\"p1\">](../../c-runtime-library/spawn-wspawn-functions.md)</ept>.","source":"See the example in [_spawn, _wspawn Functions](../../c-runtime-library/spawn-wspawn-functions.md)."},{"pos":[4432,4457],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[4467,4577],"content":"<bpt id=\"p1\">[</bpt>System::Diagnostics::Process Class<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.aspx)</ept>","source":"[System::Diagnostics::Process Class](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.aspx)"},{"pos":[4587,4715],"content":"<bpt id=\"p1\">[</bpt>System::Diagnostics::ProcessStartInfo Class<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.aspx)</ept>","source":"[System::Diagnostics::ProcessStartInfo Class](https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.aspx)"},{"pos":[4724,4732],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Process and Environment Control<ept id=\"p1\">](../../c-runtime-library/process-and-environment-control.md)</ept><ph id=\"ph1\"> </ph>","pos":[4736,4830],"source":"[Process and Environment Control](../../c-runtime-library/process-and-environment-control.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_spawn, _wspawn Functions<ept id=\"p1\">](../../c-runtime-library/spawn-wspawn-functions.md)</ept><ph id=\"ph1\"> </ph>","pos":[4833,4913],"source":" [_spawn, _wspawn Functions](../../c-runtime-library/spawn-wspawn-functions.md) "},{"content":"<bpt id=\"p1\"> [</bpt>abort<ept id=\"p1\">](../../c-runtime-library/reference/abort.md)</ept><ph id=\"ph1\"> </ph>","pos":[4916,4969],"source":" [abort](../../c-runtime-library/reference/abort.md) "},{"content":"<bpt id=\"p1\"> [</bpt>atexit<ept id=\"p1\">](../../c-runtime-library/reference/atexit.md)</ept><ph id=\"ph1\"> </ph>","pos":[4972,5027],"source":" [atexit](../../c-runtime-library/reference/atexit.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_exec, _wexec Functions<ept id=\"p1\">](../../c-runtime-library/exec-wexec-functions.md)</ept><ph id=\"ph1\"> </ph>","pos":[5030,5106],"source":" [_exec, _wexec Functions](../../c-runtime-library/exec-wexec-functions.md) "},{"content":"<bpt id=\"p1\"> [</bpt>exit, _Exit, _exit<ept id=\"p1\">](../../c-runtime-library/reference/exit-exit-exit.md)</ept><ph id=\"ph1\"> </ph>","pos":[5109,5184],"source":" [exit, _Exit, _exit](../../c-runtime-library/reference/exit-exit-exit.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_flushall<ept id=\"p1\">](../../c-runtime-library/reference/flushall.md)</ept><ph id=\"ph1\"> </ph>","pos":[5187,5247],"source":" [_flushall](../../c-runtime-library/reference/flushall.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_getmbcp<ept id=\"p1\">](../../c-runtime-library/reference/getmbcp.md)</ept><ph id=\"ph1\"> </ph>","pos":[5250,5308],"source":" [_getmbcp](../../c-runtime-library/reference/getmbcp.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_onexit, _onexit_m<ept id=\"p1\">](../../c-runtime-library/reference/onexit-onexit-m.md)</ept><ph id=\"ph1\"> </ph>","pos":[5311,5387],"source":" [_onexit, _onexit_m](../../c-runtime-library/reference/onexit-onexit-m.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_setmbcp<ept id=\"p1\">](../../c-runtime-library/reference/setmbcp.md)</ept><ph id=\"ph1\"> </ph>","pos":[5390,5448],"source":" [_setmbcp](../../c-runtime-library/reference/setmbcp.md) "},{"content":"<bpt id=\"p1\"> [</bpt>system, _wsystem<ept id=\"p1\">](../../c-runtime-library/reference/system-wsystem.md)</ept>","pos":[5451,5523],"source":" [system, _wsystem](../../c-runtime-library/reference/system-wsystem.md)"}],"content":"---\ntitle: \"_spawnlp, _wspawnlp | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_wspawnlp\"\n  - \"_spawnlp\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-process-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_wspawnlp\"\n  - \"wspawnlp\"\n  - \"_spawnlp\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"wspawnlp function\"\n  - \"_spawnlp function\"\n  - \"processes, creating\"\n  - \"processes, executing new\"\n  - \"_wspawnlp function\"\n  - \"process creation\"\n  - \"spawnlp function\"\nms.assetid: 74fc6e7a-4f24-4103-9387-7177875875e6\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _spawnlp, _wspawnlp\nCreates and executes a new process.  \n  \n> [!IMPORTANT]\n>  This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).  \n  \n## Syntax  \n  \n```  \nintptr_t _spawnlp(  \n   int mode,  \n   const char *cmdname,  \n   const char *arg0,  \n   const char *arg1,  \n   ... const char *argn,  \n   NULL   \n);  \nintptr_t _wspawnlp(  \n   int mode,  \n   const wchar_t *cmdname,  \n   const wchar_t *arg0,  \n   const wchar_t *arg1,  \n   ... const wchar_t *argn,  \n   NULL   \n);  \n```  \n  \n#### Parameters  \n `mode`  \n Execution mode for the calling process.  \n  \n `cmdname`  \n Path of the file to be executed.  \n  \n `arg0, arg1, ... argn`  \n List of pointers to arguments. The `arg0` argument is usually a pointer to `cmdname`. The arguments `arg1` through `argn` are pointers to the character strings forming the new argument list. Following `argn`, there must be a `NULL` pointer to mark the end of the argument list.  \n  \n## Return Value  \n The return value from a synchronous `_spawnlp` or `_wspawnlp` (`_P_WAIT` specified for `mode`) is the exit status of the new process. The return value from an asynchronous `_spawnlp` or `_wspawnlp` (`_P_NOWAIT` or `_P_NOWAITO` specified for `mode`) is the process handle. The exit status is 0 if the process terminated normally. You can set the exit status to a nonzero value if the spawned process specifically calls the `exit` routine with a nonzero argument. If the new process did not explicitly set a positive exit status, a positive exit status indicates an abnormal exit with an abort or an interrupt. A return value of â€“1 indicates an error (the new process is not started). In this case, `errno` is set to one of the following values.  \n  \n `E2BIG`  \n Argument list exceeds 1024 bytes.  \n  \n `EINVAL`  \n `mode` argument is invalid.  \n  \n `ENOENT`  \n File or path is not found.  \n  \n `ENOEXEC`  \n Specified file is not executable or has invalid executable-file format.  \n  \n `ENOMEM`  \n Not enough memory is available to execute the new process.  \n  \n For more information about these and other return codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n Each of these functions creates and executes a new process, passing each command-line argument as a separate parameter and using the `PATH` environment variable to find the file to execute.  \n  \n These functions validate their parameters. If either `cmdname` or `arg0` is an empty string or a null pointer, these functions generate an invalid parameter exception, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions set `errno` to `EINVAL`, and return -1. No new process is spawned.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_spawnlp`|\\<process.h>|  \n|`_wspawnlp`|\\<stdio.h> or \\<wchar.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n See the example in [_spawn, _wspawn Functions](../../c-runtime-library/spawn-wspawn-functions.md).  \n  \n## .NET Framework Equivalent  \n  \n-   [System::Diagnostics::Process Class](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.aspx)  \n  \n-   [System::Diagnostics::ProcessStartInfo Class](https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.aspx)  \n  \n## See Also  \n [Process and Environment Control](../../c-runtime-library/process-and-environment-control.md)   \n [_spawn, _wspawn Functions](../../c-runtime-library/spawn-wspawn-functions.md)   \n [abort](../../c-runtime-library/reference/abort.md)   \n [atexit](../../c-runtime-library/reference/atexit.md)   \n [_exec, _wexec Functions](../../c-runtime-library/exec-wexec-functions.md)   \n [exit, _Exit, _exit](../../c-runtime-library/reference/exit-exit-exit.md)   \n [_flushall](../../c-runtime-library/reference/flushall.md)   \n [_getmbcp](../../c-runtime-library/reference/getmbcp.md)   \n [_onexit, _onexit_m](../../c-runtime-library/reference/onexit-onexit-m.md)   \n [_setmbcp](../../c-runtime-library/reference/setmbcp.md)   \n [system, _wsystem](../../c-runtime-library/reference/system-wsystem.md)"}