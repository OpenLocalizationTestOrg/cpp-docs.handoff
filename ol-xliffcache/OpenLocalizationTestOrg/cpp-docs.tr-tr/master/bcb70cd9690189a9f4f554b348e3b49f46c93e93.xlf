<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bcb70cd9690189a9f4f554b348e3b49f46c93e93</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl-mfc-shared\date-and-time-automation-support.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc40e95c5c0884280e199e5937d986c41e91ec03</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3f714ad14a5a3f4ae759778b2cd9a3a4293b8d8a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Date and Time: Automation Support | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Date and Time: Automation Support</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article describes how to take advantage of the class library services related to date and time management.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Procedures described include:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Getting the current time</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Calculating elapsed time</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Formatting a string representation of a date/time</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>COleDateTime<ept id="p1">](../atl-mfc-shared/reference/coledatetime-class.md)</ept> class provides a way to represent date and time information.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It provides finer granularity and a greater range than the <bpt id="p1">[</bpt>CTime<ept id="p1">](../atl-mfc-shared/reference/ctime-class.md)</ept> class.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>COleDateTimeSpan<ept id="p1">](../atl-mfc-shared/reference/coledatetimespan-class.md)</ept> class represents elapsed time, such as the difference between two <ph id="ph1">`COleDateTime`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`COleDateTime`</ph> and <ph id="ph2">`COleDateTimeSpan`</ph> classes are designed to be used with the <ph id="ph3">`COleVariant`</ph> class used in Automation.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`COleDateTimeSpan`</ph> are also useful in MFC database programming, but they can be used whenever you want to manipulate date and time values.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Although the <ph id="ph1">`COleDateTime`</ph> class has a greater range of values and finer granularity than the <ph id="ph2">`CTime`</ph> class, it requires more storage per object than <ph id="ph3">`CTime`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>There are also some special considerations when working with the underlying <bpt id="p1">**</bpt>DATE<ept id="p1">**</ept> type.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>The DATE Type<ept id="p1">](../atl-mfc-shared/date-type.md)</ept> for more details on the implementation of <bpt id="p2">**</bpt>DATE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>objects can be used to represent dates between January 1, 100, and December 31, 9999.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>objects are floating point values, with an approximate resolution of 1 millisecond.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>is based on the <bpt id="p1">**</bpt>DATE<ept id="p1">**</ept> data type, defined in the MFC documentation under <bpt id="p2">[</bpt>COleDateTime::operator DATE<ept id="p2">](../atl-mfc-shared/reference/coledatetime-class.md#coledatetime__operator_date)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The actual implementation of <bpt id="p1">**</bpt>DATE<ept id="p1">**</ept> extends beyond these bounds.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`COleDateTime`</ph> implementation imposes these bounds to facilitate working with the class.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>does not support Julian dates.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The Gregorian calendar is assumed to extend back in time to January 1, 100.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>ignores Daylight Saving Time (DST).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following code example compares two methods of calculating a time span that crosses the DST switchover date: one using the CRT, and the other using <ph id="ph1">`COleDateTime`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>DST switches over, in most locales, in the second week in April and the third in October.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The first method sets two <ph id="ph1">`CTime`</ph> objects, <bpt id="p1">*</bpt>time1<ept id="p1">*</ept> and <bpt id="p2">*</bpt>time2<ept id="p2">*</ept>, to April 5 and April 6 respectively, using the standard C type structures <bpt id="p3">**</bpt>tm<ept id="p3">**</ept> and <ph id="ph2">`time_t`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The code displays <bpt id="p1">*</bpt>time1<ept id="p1">*</ept> and <bpt id="p2">*</bpt>time2<ept id="p2">*</ept> and the time span between them.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The second method creates two <ph id="ph1">`COleDateTime`</ph> objects, <ph id="ph2">`oletime1`</ph> and <ph id="ph3">`oletime2`</ph>, and sets them to the same dates as <bpt id="p1">*</bpt>time1<ept id="p1">*</ept> and <bpt id="p2">*</bpt>time2<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>It displays <ph id="ph1">`oletime1`</ph> and <ph id="ph2">`oletime2`</ph> and the time span between them.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The CRT correctly calculates a difference of 23 hours.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>calculates a difference of 24 hours.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Note that a workaround is used near the end of the example to display the date properly using <ph id="ph1">`COleDateTime::Format`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>See the Knowledge Base article "BUG: Format("%D") Fails for <ph id="ph1">`COleDateTime`</ph> and <ph id="ph2">`COleDateTimeSpan`</ph>" (Q167338).</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#176</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Date and Time</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>