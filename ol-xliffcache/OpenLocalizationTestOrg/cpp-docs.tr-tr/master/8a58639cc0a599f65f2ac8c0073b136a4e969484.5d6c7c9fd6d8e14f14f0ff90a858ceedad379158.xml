{"nodes":[{"pos":[12,43],"content":"time_put Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"time_put Class | Microsoft Docs","pos":[0,31]}]},{"content":"time_put Class","pos":[664,678]},{"pos":[679,821],"content":"The template class describes an object that can serve as a locale facet to control conversions of time values to sequences of type <ph id=\"ph1\">`CharType`</ph>.","source":"The template class describes an object that can serve as a locale facet to control conversions of time values to sequences of type `CharType`."},{"content":"Syntax","pos":[830,836]},{"content":"Parameters","pos":[991,1001]},{"content":"The type used within a program to encode characters.","pos":[1019,1071]},{"content":"The type of iterator into which the time put functions write their output.","pos":[1098,1172]},{"content":"Remarks","pos":[1181,1188]},{"content":"As with any locale facet, the static object ID has an initial stored value of zero.","pos":[1192,1275]},{"content":"The first attempt to access its stored value stores a unique positive value in <bpt id=\"p1\">**</bpt>id.<ept id=\"p1\">**</ept>","pos":[1276,1362],"source":" The first attempt to access its stored value stores a unique positive value in **id.**"},{"content":"Constructors","pos":[1372,1384]},{"content":"time_put","pos":[1406,1414]},{"pos":[1437,1484],"content":"The constructor for objects of type <ph id=\"ph1\">`time_put`</ph>.","source":"The constructor for objects of type `time_put`."},{"content":"Typedefs","pos":[1495,1503]},{"content":"char_type","pos":[1525,1534]},{"content":"A type that is used to describe a character used by a locale.","pos":[1558,1619]},{"content":"iter_type","pos":[1625,1634]},{"content":"A type that describes an output iterator.","pos":[1658,1699]},{"content":"Member Functions","pos":[1710,1726]},{"content":"do_put","pos":[1748,1754]},{"pos":[1775,1862],"content":"A virtual function that outputs time and date information as a sequence of <ph id=\"ph1\">`CharType`</ph>s.","source":"A virtual function that outputs time and date information as a sequence of `CharType`s."},{"content":"put","pos":[1868,1871]},{"pos":[1889,1952],"content":"Outputs time and date information as a sequence of <ph id=\"ph1\">`CharType`</ph>s.","source":"Outputs time and date information as a sequence of `CharType`s."},{"content":"Requirements","pos":[1962,1974]},{"pos":[1978,1999],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>locale&gt;","source":"**Header:** \\<locale>"},{"pos":[2006,2024],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[2070,2089],"content":"time_put::char_type"},{"content":"A type that is used to describe a character used by a locale.","pos":[2093,2154]},{"content":"Remarks","pos":[2209,2216]},{"pos":[2220,2282],"content":"The type is a synonym for the template parameter <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept>.","source":"The type is a synonym for the template parameter **CharType**."},{"pos":[2325,2341],"content":"time_put::do_put"},{"pos":[2345,2434],"content":"A virtual function that outputs time and date information as a sequence of <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept>s.","source":"A virtual function that outputs time and date information as a sequence of **CharType**s."},{"content":"Parameters","pos":[2600,2610]},{"content":"An output iterator where the sequence of characters representing time and date are to be inserted.","pos":[2625,2723]},{"content":"Unused.","pos":[2744,2751]},{"content":"The time and date information being output.","pos":[2767,2810]},{"content":"The format of the output.","pos":[2827,2852]},{"content":"See <bpt id=\"p1\">[</bpt>strftime, wcsftime, _strftime_l, _wcsftime_l<ept id=\"p1\">](../c-runtime-library/reference/strftime-wcsftime-strftime-l-wcsftime-l.md)</ept> for valid values.","pos":[2853,2996],"source":" See [strftime, wcsftime, _strftime_l, _wcsftime_l](../c-runtime-library/reference/strftime-wcsftime-strftime-l-wcsftime-l.md) for valid values."},{"content":"A modifier for the format.","pos":[3013,3039]},{"content":"See <bpt id=\"p1\">[</bpt>strftime, wcsftime, _strftime_l, _wcsftime_l<ept id=\"p1\">](../c-runtime-library/reference/strftime-wcsftime-strftime-l-wcsftime-l.md)</ept> for valid values.","pos":[3040,3183],"source":" See [strftime, wcsftime, _strftime_l, _wcsftime_l](../c-runtime-library/reference/strftime-wcsftime-strftime-l-wcsftime-l.md) for valid values."},{"content":"Return Value","pos":[3193,3205]},{"content":"An iterator to the first position after the last element inserted.","pos":[3209,3275]},{"content":"Remarks","pos":[3285,3292]},{"content":"The virtual protected member function generates sequential elements beginning at <ph id=\"ph1\">` next`</ph> from time values stored in the object <ph id=\"ph2\">\\*</ph> <ph id=\"ph3\">`_Pt`</ph>, of type <bpt id=\"p1\">**</bpt>tm<ept id=\"p1\">**</ept>.","pos":[3296,3448],"source":"The virtual protected member function generates sequential elements beginning at ` next` from time values stored in the object \\* `_Pt`, of type **tm**."},{"content":"The function returns an iterator designating the next place to insert an element beyond the generated output.","pos":[3449,3558]},{"content":"The output is generated by the same rules used by <ph id=\"ph1\">`strftime`</ph>, with a last argument of <ph id=\"ph2\">`_Pt`</ph>, for generating a series of <ph id=\"ph3\">`char`</ph> elements into an array.","pos":[3565,3715],"source":"The output is generated by the same rules used by `strftime`, with a last argument of `_Pt`, for generating a series of `char` elements into an array."},{"content":"Each such <ph id=\"ph1\">`char`</ph> element is assumed to map to an equivalent element of type <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept> by a simple, one-to-one mapping.","pos":[3716,3837],"source":" Each such `char` element is assumed to map to an equivalent element of type **CharType** by a simple, one-to-one mapping."},{"content":"If <ph id=\"ph1\">`_Mod`</ph> equals zero, the effective format is \"%F\", where F is replaced by <ph id=\"ph2\">`_Fmt`</ph>.","pos":[3838,3921],"source":" If `_Mod` equals zero, the effective format is \"%F\", where F is replaced by `_Fmt`."},{"content":"Otherwise, the effective format is \"%MF\", where M is replaced by <ph id=\"ph1\">`_Mod`</ph>.","pos":[3922,3994],"source":" Otherwise, the effective format is \"%MF\", where M is replaced by `_Mod`."},{"content":"Example","pos":[4004,4011]},{"pos":[4016,4080],"content":"See the example for <bpt id=\"p1\">[</bpt>put<ept id=\"p1\">](#time_put__put)</ept>, which calls <ph id=\"ph1\">`do_put`</ph>.","source":"See the example for [put](#time_put__put), which calls `do_put`."},{"pos":[4126,4145],"content":"time_put::iter_type"},{"content":"A type that describes an output iterator.","pos":[4149,4190]},{"content":"Remarks","pos":[4251,4258]},{"pos":[4262,4330],"content":"The type is a synonym for the template parameter <bpt id=\"p1\">**</bpt>OutputIterator<ept id=\"p1\">**</ept>.","source":"The type is a synonym for the template parameter **OutputIterator**."},{"pos":[4370,4383],"content":"time_put::put"},{"pos":[4387,4452],"content":"Outputs time and date information as a sequence of <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept>s.","source":"Outputs time and date information as a sequence of **CharType**s."},{"content":"Parameters","pos":[4767,4777]},{"content":"An output iterator where the sequence of characters representing time and date are to be inserted.","pos":[4792,4890]},{"content":"Unused.","pos":[4911,4918]},{"content":"The character of type <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept> used for spacing.","pos":[4936,4988],"source":" The character of type **CharType** used for spacing."},{"content":"The time and date information being output.","pos":[5004,5047]},{"content":"The format of the output.","pos":[5064,5089]},{"content":"See <bpt id=\"p1\">[</bpt>strftime, wcsftime, _strftime_l, _wcsftime_l<ept id=\"p1\">](../c-runtime-library/reference/strftime-wcsftime-strftime-l-wcsftime-l.md)</ept> for valid values.","pos":[5090,5233],"source":" See [strftime, wcsftime, _strftime_l, _wcsftime_l](../c-runtime-library/reference/strftime-wcsftime-strftime-l-wcsftime-l.md) for valid values."},{"content":"A modifier for the format.","pos":[5250,5276]},{"content":"See <bpt id=\"p1\">[</bpt>strftime, wcsftime, _strftime_l, _wcsftime_l<ept id=\"p1\">](../c-runtime-library/reference/strftime-wcsftime-strftime-l-wcsftime-l.md)</ept> for valid values.","pos":[5277,5420],"source":" See [strftime, wcsftime, _strftime_l, _wcsftime_l](../c-runtime-library/reference/strftime-wcsftime-strftime-l-wcsftime-l.md) for valid values."},{"content":"The beginning of the formatting string for the output.","pos":[5439,5493]},{"content":"See <bpt id=\"p1\">[</bpt>strftime, wcsftime, _strftime_l, _wcsftime_l<ept id=\"p1\">](../c-runtime-library/reference/strftime-wcsftime-strftime-l-wcsftime-l.md)</ept> for valid values.","pos":[5494,5637],"source":" See [strftime, wcsftime, _strftime_l, _wcsftime_l](../c-runtime-library/reference/strftime-wcsftime-strftime-l-wcsftime-l.md) for valid values."},{"content":"The end of the formatting string for the output.","pos":[5655,5703]},{"content":"See <bpt id=\"p1\">[</bpt>strftime, wcsftime, _strftime_l, _wcsftime_l<ept id=\"p1\">](../c-runtime-library/reference/strftime-wcsftime-strftime-l-wcsftime-l.md)</ept> for valid values.","pos":[5704,5847],"source":" See [strftime, wcsftime, _strftime_l, _wcsftime_l](../c-runtime-library/reference/strftime-wcsftime-strftime-l-wcsftime-l.md) for valid values."},{"content":"Return Value","pos":[5857,5869]},{"content":"An iterator to the first position after the last element inserted.","pos":[5873,5939]},{"content":"Remarks","pos":[5949,5956]},{"content":"The first member function returns <bpt id=\"p1\">[</bpt>do_put<ept id=\"p1\">](#time_put__do_put)</ept>( <ph id=\"ph1\">` next`</ph>, <ph id=\"ph2\">`_Iosbase`</ph>, <ph id=\"ph3\">`_Fill`</ph>, <ph id=\"ph4\">`_Pt`</ph>, <ph id=\"ph5\">`_Fmt`</ph>, <ph id=\"ph6\">`_Mod`</ph>).","pos":[5960,6076],"source":"The first member function returns [do_put](#time_put__do_put)( ` next`, `_Iosbase`, `_Fill`, `_Pt`, `_Fmt`, `_Mod`)."},{"content":"The second member function copies to <ph id=\"ph1\">\\*</ph> <ph id=\"ph2\">` next`</ph> ++ any element in the interval [ <ph id=\"ph3\">` first`</ph>, <ph id=\"ph4\">` last`</ph>) other than a percent (%).","pos":[6077,6202],"source":" The second member function copies to \\* ` next` ++ any element in the interval [ ` first`, ` last`) other than a percent (%)."},{"content":"For a percent followed by a character <bpt id=\"p1\">*</bpt>C<ept id=\"p1\">*</ept> in the interval [ <ph id=\"ph1\">` first`</ph>, <ph id=\"ph2\">` last`</ph>), the function instead evaluates <ph id=\"ph3\">` next` = `do_put`</ph>( <ph id=\"ph4\">` next`</ph>, <ph id=\"ph5\">`_Iosbase`</ph>, <ph id=\"ph6\">`_Fill`</ph>, <ph id=\"ph7\">`_Pt`</ph>, <bpt id=\"p2\">*</bpt>C<ept id=\"p2\">*</ept>, 0) and skips past <bpt id=\"p3\">*</bpt>C<ept id=\"p3\">*</ept>. If, however, <bpt id=\"p4\">*</bpt>C<ept id=\"p4\">*</ept> is a qualifier character from the set EOQ#, followed by a character <ph id=\"ph8\">`C2`</ph> in the interval [ <ph id=\"ph9\">` first`</ph>, <ph id=\"ph10\">` last`</ph>), the function instead evaluates <ph id=\"ph11\">` next` = `do_put`</ph>( <ph id=\"ph12\">` next`</ph>, <ph id=\"ph13\">`_Iosbase`</ph>, <ph id=\"ph14\">`_Fill`</ph>, <ph id=\"ph15\">`_Pt`</ph>, <ph id=\"ph16\">`C2`</ph>, <bpt id=\"p5\">*</bpt>C<ept id=\"p5\">*</ept>) and skips past <ph id=\"ph17\">`C2`</ph>.","pos":[6203,6646],"source":" For a percent followed by a character *C* in the interval [ ` first`, ` last`), the function instead evaluates ` next` = `do_put`( ` next`, `_Iosbase`, `_Fill`, `_Pt`, *C*, 0) and skips past *C*. If, however, *C* is a qualifier character from the set EOQ#, followed by a character `C2` in the interval [ ` first`, ` last`), the function instead evaluates ` next` = `do_put`( ` next`, `_Iosbase`, `_Fill`, `_Pt`, `C2`, *C*) and skips past `C2`."},{"content":"Example","pos":[6656,6663]},{"pos":[7709,7727],"content":"time_put::time_put"},{"pos":[7731,7774],"content":"Constructor for objects of type <ph id=\"ph1\">`time_put`</ph>.","source":"Constructor for objects of type `time_put`."},{"content":"Parameters","pos":[7836,7846]},{"content":"Integer value used to specify the type of memory management for the object.","pos":[7861,7936]},{"content":"Remarks","pos":[7946,7953]},{"pos":[7957,8030],"content":"The possible values for the <ph id=\"ph1\">`_Refs`</ph> parameter and their significance are:","source":"The possible values for the `_Refs` parameter and their significance are:"},{"content":"0: The lifetime of the object is managed by the locales that contain it.","pos":[8040,8112]},{"content":"1: The lifetime of the object must be manually managed.","pos":[8122,8177]},{"content":"0: These values are not defined.","pos":[8190,8222]},{"pos":[8229,8357],"content":"The constructor initializes its base object with <bpt id=\"p1\">[</bpt>locale::facet<ept id=\"p1\">](../standard-library/locale-class.md#facet_class)</ept>( <bpt id=\"p2\">**</bpt>_<ept id=\"p2\">**</ept><bpt id=\"p3\">*</bpt>Refs<ept id=\"p3\">*</ept>).","source":"The constructor initializes its base object with [locale::facet](../standard-library/locale-class.md#facet_class)( **_***Refs*)."},{"content":"See Also","pos":[8366,8374]},{"content":"locale&gt;","pos":[8381,8388],"source":"locale>"},{"content":"time_base Class","pos":[8426,8441]},{"content":"Thread Safety in the C++ Standard Library","pos":[8488,8529]}],"content":"---\ntitle: \"time_put Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std::time_put\"\n  - \"time_put\"\n  - \"xloctime/std::time_put\"\n  - \"std.time_put\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"time_put class\"\nms.assetid: df79493e-3331-48d2-97c3-ac3a745f0791\ncaps.latest.revision: 22\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# time_put Class\nThe template class describes an object that can serve as a locale facet to control conversions of time values to sequences of type `CharType`.  \n  \n## Syntax  \n  \n```  \ntemplate <class CharType,  \n    class OutputIterator = ostreambuf_iterator<CharType>>  \nclass time_put : public locale::facet;  \n```  \n  \n#### Parameters  \n `CharType`  \n The type used within a program to encode characters.  \n  \n `OutputIterator`  \n The type of iterator into which the time put functions write their output.  \n  \n## Remarks  \n As with any locale facet, the static object ID has an initial stored value of zero. The first attempt to access its stored value stores a unique positive value in **id.**  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[time_put](#time_put__time_put)|The constructor for objects of type `time_put`.|  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|[char_type](#time_put__char_type)|A type that is used to describe a character used by a locale.|  \n|[iter_type](#time_put__iter_type)|A type that describes an output iterator.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[do_put](#time_put__do_put)|A virtual function that outputs time and date information as a sequence of `CharType`s.|  \n|[put](#time_put__put)|Outputs time and date information as a sequence of `CharType`s.|  \n  \n## Requirements  \n **Header:** \\<locale>  \n  \n **Namespace:** std  \n  \n##  <a name=\"time_put__char_type\"></a>  time_put::char_type  \n A type that is used to describe a character used by a locale.  \n  \n```  \ntypedef CharType char_type;  \n```  \n  \n### Remarks  \n The type is a synonym for the template parameter **CharType**.  \n  \n##  <a name=\"time_put__do_put\"></a>  time_put::do_put  \n A virtual function that outputs time and date information as a sequence of **CharType**s.  \n  \n```  \nvirtual iter_type do_put(\n    iter_type next,   \n    ios_base& _Iosbase,  \n    const tm* _Pt,   \n    char _Fmt,   \n    char _Mod = 0) const;\n```  \n  \n### Parameters  \n ` next`  \n An output iterator where the sequence of characters representing time and date are to be inserted.  \n  \n `_Iosbase`  \n Unused.  \n  \n `_Pt`  \n The time and date information being output.  \n  \n `_Fmt`  \n The format of the output. See [strftime, wcsftime, _strftime_l, _wcsftime_l](../c-runtime-library/reference/strftime-wcsftime-strftime-l-wcsftime-l.md) for valid values.  \n  \n `_Mod`  \n A modifier for the format. See [strftime, wcsftime, _strftime_l, _wcsftime_l](../c-runtime-library/reference/strftime-wcsftime-strftime-l-wcsftime-l.md) for valid values.  \n  \n### Return Value  \n An iterator to the first position after the last element inserted.  \n  \n### Remarks  \n The virtual protected member function generates sequential elements beginning at ` next` from time values stored in the object \\* `_Pt`, of type **tm**. The function returns an iterator designating the next place to insert an element beyond the generated output.  \n  \n The output is generated by the same rules used by `strftime`, with a last argument of `_Pt`, for generating a series of `char` elements into an array. Each such `char` element is assumed to map to an equivalent element of type **CharType** by a simple, one-to-one mapping. If `_Mod` equals zero, the effective format is \"%F\", where F is replaced by `_Fmt`. Otherwise, the effective format is \"%MF\", where M is replaced by `_Mod`.  \n  \n### Example  \n  See the example for [put](#time_put__put), which calls `do_put`.  \n  \n##  <a name=\"time_put__iter_type\"></a>  time_put::iter_type  \n A type that describes an output iterator.  \n  \n```  \ntypedef OutputIterator iter_type;  \n```  \n  \n### Remarks  \n The type is a synonym for the template parameter **OutputIterator**.  \n  \n##  <a name=\"time_put__put\"></a>  time_put::put  \n Outputs time and date information as a sequence of **CharType**s.  \n  \n```  \niter_type put(iter_type next,\n    ios_base& _Iosbase,\n    char_type _Fill,\n    const tm* _Pt,\n    char _Fmt,\n    char _Mod = 0) const;\n\niter_type put(iter_type next,\n    ios_base& _Iosbase,\n    char_type _Fill,\n    const tm* _Pt,\n    const CharType* first,\n    const CharType* last) const;\n```  \n  \n### Parameters  \n ` next`  \n An output iterator where the sequence of characters representing time and date are to be inserted.  \n  \n `_Iosbase`  \n Unused.  \n  \n `_Fill`  \n The character of type **CharType** used for spacing.  \n  \n `_Pt`  \n The time and date information being output.  \n  \n `_Fmt`  \n The format of the output. See [strftime, wcsftime, _strftime_l, _wcsftime_l](../c-runtime-library/reference/strftime-wcsftime-strftime-l-wcsftime-l.md) for valid values.  \n  \n `_Mod`  \n A modifier for the format. See [strftime, wcsftime, _strftime_l, _wcsftime_l](../c-runtime-library/reference/strftime-wcsftime-strftime-l-wcsftime-l.md) for valid values.  \n  \n ` first`  \n The beginning of the formatting string for the output. See [strftime, wcsftime, _strftime_l, _wcsftime_l](../c-runtime-library/reference/strftime-wcsftime-strftime-l-wcsftime-l.md) for valid values.  \n  \n ` last`  \n The end of the formatting string for the output. See [strftime, wcsftime, _strftime_l, _wcsftime_l](../c-runtime-library/reference/strftime-wcsftime-strftime-l-wcsftime-l.md) for valid values.  \n  \n### Return Value  \n An iterator to the first position after the last element inserted.  \n  \n### Remarks  \n The first member function returns [do_put](#time_put__do_put)( ` next`, `_Iosbase`, `_Fill`, `_Pt`, `_Fmt`, `_Mod`). The second member function copies to \\* ` next` ++ any element in the interval [ ` first`, ` last`) other than a percent (%). For a percent followed by a character *C* in the interval [ ` first`, ` last`), the function instead evaluates ` next` = `do_put`( ` next`, `_Iosbase`, `_Fill`, `_Pt`, *C*, 0) and skips past *C*. If, however, *C* is a qualifier character from the set EOQ#, followed by a character `C2` in the interval [ ` first`, ` last`), the function instead evaluates ` next` = `do_put`( ` next`, `_Iosbase`, `_Fill`, `_Pt`, `C2`, *C*) and skips past `C2`.  \n  \n### Example  \n  \n```cpp  \n// time_put_put.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n#include <sstream>  \n#include <time.h>  \nusing namespace std;  \nint main( )  \n{  \n   locale loc;  \n   basic_stringstream<char> pszPutI;  \n   ios_base::iostate st = 0;  \n   struct tm t;  \n   memset( &t, 0, sizeof( struct tm ) );  \n  \n   t.tm_hour = 5;  \n   t.tm_min = 30;  \n   t.tm_sec = 40;  \n   t.tm_year = 00;  \n   t.tm_mday = 4;  \n   t.tm_mon = 6;  \n  \n   pszPutI.imbue( loc );  \n   char *pattern = \"x: %X %x\";  \n   use_facet <time_put <char> >  \n   (loc).put(basic_ostream<char>::_Iter(pszPutI.rdbuf( )),  \n          pszPutI, ' ', &t, pattern, pattern+strlen(pattern));  \n  \n      cout << \"num_put( ) = \" << pszPutI.rdbuf( )->str( ) << endl;  \n  \n      char strftimebuf[255];  \n      strftime(&strftimebuf[0], 255, pattern, &t);  \n      cout << \"strftime( ) = \" << &strftimebuf[0] << endl;  \n}  \n```  \n  \n```Output  \nnum_put( ) = x: 05:30:40 07/04/00  \nstrftime( ) = x: 05:30:40 07/04/00  \n```  \n  \n##  <a name=\"time_put__time_put\"></a>  time_put::time_put  \n Constructor for objects of type `time_put`.  \n  \n```  \nexplicit time_put(size_t _Refs = 0);\n```  \n  \n### Parameters  \n `_Refs`  \n Integer value used to specify the type of memory management for the object.  \n  \n### Remarks  \n The possible values for the `_Refs` parameter and their significance are:  \n  \n-   0: The lifetime of the object is managed by the locales that contain it.  \n  \n-   1: The lifetime of the object must be manually managed.  \n  \n-   \\> 0: These values are not defined.  \n  \n The constructor initializes its base object with [locale::facet](../standard-library/locale-class.md#facet_class)( **_***Refs*).  \n  \n## See Also  \n [\\<locale>](../standard-library/locale.md)   \n [time_base Class](../standard-library/time-base-class.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)\n\n"}