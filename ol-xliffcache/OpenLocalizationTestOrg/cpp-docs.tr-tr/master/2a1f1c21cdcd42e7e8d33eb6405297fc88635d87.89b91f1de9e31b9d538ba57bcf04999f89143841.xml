{"nodes":[{"pos":[12,53],"content":"&lt;bitset&gt; operators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>bitset<ph id=\"ph2\">&amp;gt;</ph> operators | Microsoft Docs","pos":[0,41],"source":"&lt;bitset&gt; operators | Microsoft Docs"}]},{"pos":[296,320],"content":"&lt;bitset&gt; operators","linkify":"&lt;bitset&gt; operators","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>bitset<ph id=\"ph2\">&amp;gt;</ph> operators","pos":[0,24],"source":"&lt;bitset&gt; operators"}]},{"pos":[339,370],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;amp;</ph><ept id=\"p1\">](#operator_amp_)</ept>","source":"[operator&amp;](#operator_amp_)"},{"pos":[371,408],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">](#operator_gt__gt_)</ept>","source":"[operator&gt;&gt;](#operator_gt__gt_)"},{"pos":[409,446],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">&amp;lt;</ph><ept id=\"p1\">](#operator_lt__lt_)</ept>","source":"[operator&lt;&lt;](#operator_lt__lt_)"},{"pos":[451,480],"content":"<bpt id=\"p1\">[</bpt>operator_xor<ept id=\"p1\">](#operator_xor)</ept>","source":"[operator_xor](#operator_xor)"},{"pos":[481,508],"content":"<bpt id=\"p1\">[</bpt>operator_or<ept id=\"p1\">](#operator_or)</ept>","source":"[operator_or](#operator_or)"},{"pos":[519,562],"content":"<bpt id=\"p1\">&lt;a name=\"operator_amp_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;amp;</ph>","linkify":"<a name=\"operator_amp_\"></a>  operator&amp;","source":"<a name=\"operator_amp_\"></a>  operator&amp;"},{"pos":[566,611],"content":"Performs a bitwise <ph id=\"ph1\">`AND`</ph> between two bitsets.","source":"Performs a bitwise `AND` between two bitsets."},{"pos":[751,761],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The first of the two bitsets whose respective elements are to be combined with the bitwise <ph id=\"ph1\">`AND`</ph>.","pos":[776,873],"source":" The first of the two bitsets whose respective elements are to be combined with the bitwise `AND`."},{"content":"The second of the two valarrays whose respective elements are to be combined with the bitwise <ph id=\"ph1\">`AND`</ph>.","pos":[892,992],"source":" The second of the two valarrays whose respective elements are to be combined with the bitwise `AND`."},{"pos":[1002,1014],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[1018,1145],"content":"A bitset whose elements are the result of performing the <ph id=\"ph1\">`AND`</ph> operation on the corresponding elements of <ph id=\"ph2\">` left`</ph> and <ph id=\"ph3\">` right`</ph>.","source":"A bitset whose elements are the result of performing the `AND` operation on the corresponding elements of ` left` and ` right`."},{"pos":[1155,1162],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1647,1696],"content":"<bpt id=\"p1\">&lt;a name=\"operator_lt__lt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">&amp;lt;</ph>","linkify":"<a name=\"operator_lt__lt_\"></a>  operator&lt;&lt;","source":"<a name=\"operator_lt__lt_\"></a>  operator&lt;&lt;"},{"content":"Inserts a text representation of the bit sequence into the output stream.","pos":[1700,1773]},{"pos":[1976,1986],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <bpt id=\"p1\">**</bpt>bitset<ph id=\"ph1\">\\&lt;</ph>N&gt;<ept id=\"p1\">**</ept> that is to be inserted into the output stream as a string.","pos":[2002,2093],"source":" An object of type **bitset\\<N>** that is to be inserted into the output stream as a string."},{"pos":[2103,2115],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[2119,2173],"content":"A text representation of the bit sequence in <bpt id=\"p1\">**</bpt>ostr<ept id=\"p1\">**</ept>.","source":"A text representation of the bit sequence in **ostr**."},{"pos":[2183,2190],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template function overloads <bpt id=\"p1\">**</bpt>operator&lt;&lt;<ept id=\"p1\">**</ept>, allowing a bitset to be written out without first converting it into a string.","pos":[2194,2320],"source":"The template function overloads **operator<<**, allowing a bitset to be written out without first converting it into a string."},{"content":"The template function effectively executes:","pos":[2321,2364]},{"content":"<bpt id=\"p1\">**</bpt>ostr<ept id=\"p1\">**</ept> &lt;&lt; _ <bpt id=\"p2\">*</bpt>Right<ept id=\"p2\">*</ept>.","pos":[2371,2393],"source":"**ostr** << _ *Right*."},{"content":"<bpt id=\"p1\">[</bpt>to_string<ept id=\"p1\">](https://msdn.microsoft.com/library/2f93c55z.aspx)</ept><ph id=\"ph1\"> &lt; </ph><bpt id=\"p2\">**</bpt>CharType<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Traits<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>allocator<ept id=\"p4\">**</ept><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p5\">**</bpt>CharType<ept id=\"p5\">**</ept>&gt; &gt; ( )","pos":[2394,2519],"source":"[to_string](https://msdn.microsoft.com/library/2f93c55z.aspx) < **CharType**, **Traits**, **allocator**\\< **CharType**> > ( )"},{"pos":[2529,2536],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3317,3366],"content":"<bpt id=\"p1\">&lt;a name=\"operator_gt__gt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">&amp;gt;</ph>","linkify":"<a name=\"operator_gt__gt_\"></a>  operator&gt;&gt;","source":"<a name=\"operator_gt__gt_\"></a>  operator&gt;&gt;"},{"content":"Reads a string of bit characters into a bitset.","pos":[3370,3417]},{"pos":[3620,3630],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The string that is entered into the input stream to be inserted into the bitset.","pos":[3645,3725]},{"content":"The bitset that is receiving the bits from the input stream.","pos":[3744,3804]},{"pos":[3814,3826],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3830,3879],"content":"The template function returns the string <ph id=\"ph1\">`_Istr`</ph>.","source":"The template function returns the string `_Istr`."},{"pos":[3889,3896],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3900,4193],"content":"The template function overloads <bpt id=\"p1\">**</bpt>operator&gt;&gt;<ept id=\"p1\">**</ept> to store in the bitset _ <bpt id=\"p2\">*</bpt>Right<ept id=\"p2\">*</ept> the value bitset( <ph id=\"ph1\">`str`</ph>), where <ph id=\"ph2\">`str`</ph> is an object of type <bpt id=\"p3\">[</bpt>basic_string<ept id=\"p3\">](https://msdn.microsoft.com/library/syxtdd4f.aspx)</ept><ph id=\"ph3\"> &lt; </ph><bpt id=\"p4\">**</bpt>CharType<ept id=\"p4\">**</ept>, <bpt id=\"p5\">**</bpt>Traits<ept id=\"p5\">**</ept>, <bpt id=\"p6\">**</bpt>allocator<ept id=\"p6\">**</ept><ph id=\"ph4\">\\&lt;</ph> <bpt id=\"p7\">**</bpt>CharType<ept id=\"p7\">**</ept>&gt; &gt; <bpt id=\"p8\">**</bpt><ph id=\"ph5\">&amp;</ph><ept id=\"p8\">**</ept> extracted from <ph id=\"ph6\">`_Istr`</ph>.","source":"The template function overloads **operator>>** to store in the bitset _ *Right* the value bitset( `str`), where `str` is an object of type [basic_string](https://msdn.microsoft.com/library/syxtdd4f.aspx) < **CharType**, **Traits**, **allocator**\\< **CharType**> > **&** extracted from `_Istr`."},{"pos":[4200,4292],"content":"The template function extracts elements from <ph id=\"ph1\">`_Istr`</ph> and inserts them into the bitset until:","source":"The template function extracts elements from `_Istr` and inserts them into the bitset until:"},{"content":"All the bit elements have been extracted from the input stream and stored in the bitset.","pos":[4302,4390]},{"content":"The bitset is filled up with bits from the input stream.","pos":[4400,4456]},{"content":"An input element is encountered that is neither 0 nor 1.","pos":[4466,4522]},{"pos":[4532,4539],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5972,6013],"content":"<bpt id=\"p1\">&lt;a name=\"operator_xor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator_xor","linkify":"<a name=\"operator_xor\"></a>  operator_xor","source":"<a name=\"operator_xor\"></a>  operator_xor"},{"pos":[6017,6071],"content":"Performs a bitwise <ph id=\"ph1\">`EXCLUSIVE-OR`</ph> between two bitsets.","source":"Performs a bitwise `EXCLUSIVE-OR` between two bitsets."},{"pos":[6211,6221],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The first of the two bitsets whose respective elements are to be combined with the bitwise <ph id=\"ph1\">`EXCLUSIVE-OR`</ph>.","pos":[6236,6342],"source":" The first of the two bitsets whose respective elements are to be combined with the bitwise `EXCLUSIVE-OR`."},{"content":"The second of the two valarrays whose respective elements are to be combined with the bitwise <ph id=\"ph1\">`EXCLUSIVE-OR`</ph>.","pos":[6361,6470],"source":" The second of the two valarrays whose respective elements are to be combined with the bitwise `EXCLUSIVE-OR`."},{"pos":[6480,6492],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6496,6632],"content":"A bitset whose elements are the result of performing the <ph id=\"ph1\">`EXCLUSIVE-OR`</ph> operation on the corresponding elements of <ph id=\"ph2\">` left`</ph> and <ph id=\"ph3\">` right`</ph>.","source":"A bitset whose elements are the result of performing the `EXCLUSIVE-OR` operation on the corresponding elements of ` left` and ` right`."},{"pos":[6642,6649],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7134,7173],"content":"<bpt id=\"p1\">&lt;a name=\"operator_or\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator_or","linkify":"<a name=\"operator_or\"></a>  operator_or","source":"<a name=\"operator_or\"></a>  operator_or"},{"pos":[7177,7221],"content":"Performs a bitwise <ph id=\"ph1\">`OR`</ph> between two bitsets.","source":"Performs a bitwise `OR` between two bitsets."},{"pos":[7361,7371],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The first of the two bitsets whose respective elements are to be combined with the bitwise <ph id=\"ph1\">`OR`</ph>.","pos":[7386,7482],"source":" The first of the two bitsets whose respective elements are to be combined with the bitwise `OR`."},{"content":"The second of the two valarrays whose respective elements are to be combined with the bitwise <ph id=\"ph1\">`OR`</ph>.","pos":[7501,7600],"source":" The second of the two valarrays whose respective elements are to be combined with the bitwise `OR`."},{"pos":[7610,7622],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7626,7752],"content":"A bitset whose elements are the result of performing the <ph id=\"ph1\">`OR`</ph> operation on the corresponding elements of <ph id=\"ph2\">` left`</ph> and <ph id=\"ph3\">` right`</ph>.","source":"A bitset whose elements are the result of performing the `OR` operation on the corresponding elements of ` left` and ` right`."},{"pos":[7762,7769],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8252,8260],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[8264,8306],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>bitset&gt;<ept id=\"p1\">](../standard-library/bitset.md)</ept>","source":"[\\<bitset>](../standard-library/bitset.md)"}],"content":"---\ntitle: \"&lt;bitset&gt; operators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 84fe6a13-6f6e-4cdc-bf8f-6f65ab1134d4\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\n---\n# &lt;bitset&gt; operators\n||||  \n|-|-|-|  \n|[operator&amp;](#operator_amp_)|[operator&gt;&gt;](#operator_gt__gt_)|[operator&lt;&lt;](#operator_lt__lt_)|  \n|[operator_xor](#operator_xor)|[operator_or](#operator_or)|  \n  \n##  <a name=\"operator_amp_\"></a>  operator&amp;  \n Performs a bitwise `AND` between two bitsets.  \n  \n```  \ntemplate <size_t size>  \nbitset<size>  \noperator&(\n    const bitset<size>& left,  \n    const bitset<size>& right);\n```  \n  \n### Parameters  \n ` left`  \n The first of the two bitsets whose respective elements are to be combined with the bitwise `AND`.  \n  \n ` right`  \n The second of the two valarrays whose respective elements are to be combined with the bitwise `AND`.  \n  \n### Return Value  \n A bitset whose elements are the result of performing the `AND` operation on the corresponding elements of ` left` and ` right`.  \n  \n### Example  \n  \n```cpp  \n// bitset_and.cpp  \n// compile with: /EHsc  \n#include <bitset>  \n#include <iostream>  \n#include <string>  \n  \nusing namespace std;  \n  \nint main()  \n{  \n   bitset<4> b1 ( string(\"0101\") );  \n   bitset<4> b2 ( string(\"0011\") );  \n   bitset<4> b3 = b1 & b2;  \n   cout << \"bitset 1: \" << b1 << endl;  \n   cout << \"bitset 2: \" << b2 << endl;  \n   cout << \"bitset 3: \" << b3 << endl;  \n}  \n```  \n  \n```Output  \nbitset 1: 0101  \nbitset 2: 0011  \nbitset 3: 0001  \n```  \n  \n##  <a name=\"operator_lt__lt_\"></a>  operator&lt;&lt;  \n Inserts a text representation of the bit sequence into the output stream.  \n  \n```  \n \ntemplate <class CharType, class Traits, size_t N>  \nbasic_ostream<CharType, Traits>& operator<<(\n    basic_ostream<CharType, Traits>& ostr,  \n    const bitset<N>& \n    right);\n```  \n  \n### Parameters  \n ` right`  \n An object of type **bitset\\<N>** that is to be inserted into the output stream as a string.  \n  \n### Return Value  \n A text representation of the bit sequence in **ostr**.  \n  \n### Remarks  \n The template function overloads **operator<<**, allowing a bitset to be written out without first converting it into a string. The template function effectively executes:  \n  \n **ostr** << _ *Right*. [to_string](https://msdn.microsoft.com/library/2f93c55z.aspx) < **CharType**, **Traits**, **allocator**\\< **CharType**> > ( )  \n  \n### Example  \n  \n```cpp  \n// bitset_op_insert.cpp  \n// compile with: /EHsc  \n#include <bitset>  \n#include <iostream>  \n#include <string>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   bitset<5> b1 ( 9 );  \n  \n   // bitset inserted into output stream directly  \n   cout << \"The ordered set of bits in the bitset<5> b1(9)\"  \n        << \"\\n can be output with the overloaded << as: ( \"  \n        << b1 << \" )\" << endl;  \n  \n   // Compare converting bitset to a string before  \n   // inserting it into the output steam  \n   string s1;  \n   s1 =  b1.template to_string<char,   \n      char_traits<char>, allocator<char> >( );  \n   cout << \"The string returned from the bitset b1\"  \n        << \"\\n by the member function to_string( ) is: \"  \n        << s1 << \".\" << endl;  \n}  \n```  \n  \n##  <a name=\"operator_gt__gt_\"></a>  operator&gt;&gt;  \n Reads a string of bit characters into a bitset.  \n  \n```  \n \ntemplate <class CharType, class Traits, size_t Bits>  \nbasic_istream<CharType, Traits>& operator>> (\n    basic_istream<CharType, Traits>& \n_Istr,  \n    bitset<N>& \n    right);\n```  \n  \n### Parameters  \n `_Istr`  \n The string that is entered into the input stream to be inserted into the bitset.  \n  \n ` right`  \n The bitset that is receiving the bits from the input stream.  \n  \n### Return Value  \n The template function returns the string `_Istr`.  \n  \n### Remarks  \n The template function overloads **operator>>** to store in the bitset _ *Right* the value bitset( `str`), where `str` is an object of type [basic_string](https://msdn.microsoft.com/library/syxtdd4f.aspx) < **CharType**, **Traits**, **allocator**\\< **CharType**> > **&** extracted from `_Istr`.  \n  \n The template function extracts elements from `_Istr` and inserts them into the bitset until:  \n  \n-   All the bit elements have been extracted from the input stream and stored in the bitset.  \n  \n-   The bitset is filled up with bits from the input stream.  \n  \n-   An input element is encountered that is neither 0 nor 1.  \n  \n### Example  \n  \n```cpp  \n#include <bitset>  \n#include <iostream>  \n#include <string>  \n  \nusing namespace std;  \nint main()  \n{  \n  \n   bitset<5> b1;  \n   cout << \"Enter string of (0 or 1) bits for input into bitset<5>.\\n\"  \n        << \"Try bit string of length less than or equal to 5,\\n\"  \n        << \" (for example: 10110): \";  \n   cin >>  b1;  \n  \n   cout << \"The ordered set of bits entered from the \"  \n        << \"keyboard\\n has been input into bitset<5> b1 as: ( \"  \n        << b1 << \" )\" << endl;  \n  \n   // Truncation due to longer string of bits than length of bitset  \n   bitset<2> b3;  \n   cout << \"Enter string of bits (0 or 1) for input into bitset<2>.\\n\"  \n        << \" Try bit string of length greater than 2,\\n\"  \n        << \" (for example: 1011): \";  \n   cin >>  b3;  \n  \n   cout << \"The ordered set of bits entered from the \"  \n        << \"keyboard\\n has been input into bitset<2> b3 as: ( \"  \n        << b3 << \" )\" << endl;  \n  \n   // Flushing the input stream  \n   char buf[100];  \n   cin.getline(&buf[0], 99);  \n  \n   // Truncation with non-bit value  \n   bitset<5> b2;  \n   cout << \"Enter a string for input into  bitset<5>.\\n\"  \n        << \" that contains a character than is NOT a 0 or a 1,\\n \"  \n        << \" (for example: 10k01): \";  \n   cin >>  b2;  \n  \n   cout << \"The string entered from the keyboard\\n\"  \n        << \" has been input into bitset<5> b2 as: ( \"  \n        << b2 << \" )\" << endl;  \n}  \n```  \n  \n##  <a name=\"operator_xor\"></a>  operator_xor  \n Performs a bitwise `EXCLUSIVE-OR` between two bitsets.  \n  \n```  \ntemplate <size_t size>  \nbitset<size>  \noperator^(\n    const bitset<size>& left,  \n    const bitset<size>& right);\n```  \n  \n### Parameters  \n ` left`  \n The first of the two bitsets whose respective elements are to be combined with the bitwise `EXCLUSIVE-OR`.  \n  \n ` right`  \n The second of the two valarrays whose respective elements are to be combined with the bitwise `EXCLUSIVE-OR`.  \n  \n### Return Value  \n A bitset whose elements are the result of performing the `EXCLUSIVE-OR` operation on the corresponding elements of ` left` and ` right`.  \n  \n### Example  \n  \n```cpp  \n// bitset_xor.cpp  \n// compile with: /EHsc  \n#include <bitset>  \n#include <iostream>  \n#include <string>  \n  \nusing namespace std;  \n  \nint main()  \n{  \n   bitset<4> b1 ( string(\"0101\") );  \n   bitset<4> b2 ( string(\"0011\") );  \n   bitset<4> b3 = b1 ^ b2;  \n   cout << \"bitset 1: \" << b1 << endl;  \n   cout << \"bitset 2: \" << b2 << endl;  \n   cout << \"bitset 3: \" << b3 << endl;  \n}  \n```  \n  \n```Output  \nbitset 1: 0101  \nbitset 2: 0011  \nbitset 3: 0110  \n```  \n  \n##  <a name=\"operator_or\"></a>  operator_or  \n Performs a bitwise `OR` between two bitsets.  \n  \n```  \ntemplate <size_t size>  \nbitset<size>  \noperator|(\n    const bitset<size>& left,  \n    const bitset<size>& right);\n```  \n  \n### Parameters  \n ` left`  \n The first of the two bitsets whose respective elements are to be combined with the bitwise `OR`.  \n  \n ` right`  \n The second of the two valarrays whose respective elements are to be combined with the bitwise `OR`.  \n  \n### Return Value  \n A bitset whose elements are the result of performing the `OR` operation on the corresponding elements of ` left` and ` right`.  \n  \n### Example  \n  \n```cpp  \n// bitset_or.cpp  \n// compile with: /EHsc  \n#include <bitset>  \n#include <iostream>  \n#include <string>  \n  \nusing namespace std;  \n  \nint main()  \n{  \n   bitset<4> b1 ( string(\"0101\") );  \n   bitset<4> b2 ( string(\"0011\") );  \n   bitset<4> b3 = b1 | b2;  \n   cout << \"bitset 1: \" << b1 << endl;  \n   cout << \"bitset 2: \" << b2 << endl;  \n   cout << \"bitset 3: \" << b3 << endl;  \n}  \n```  \n  \n```Output  \nbitset 1: 0101  \nbitset 2: 0011  \nbitset 3: 0111  \n```  \n  \n## See Also  \n [\\<bitset>](../standard-library/bitset.md)\n\n"}