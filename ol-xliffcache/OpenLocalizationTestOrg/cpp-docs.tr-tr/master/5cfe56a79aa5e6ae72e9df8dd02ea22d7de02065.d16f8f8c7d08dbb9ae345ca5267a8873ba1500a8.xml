{"nodes":[{"pos":[12,59],"content":"hash_multimap::clear (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"hash_multimap::clear (STL-CLR) | Microsoft Docs","pos":[0,47]}]},{"content":"hash_multimap::clear (STL/CLR)","pos":[642,672]},{"content":"Removes all elements.","pos":[673,694]},{"content":"Syntax","pos":[703,709]},{"content":"Remarks","pos":[749,756]},{"content":"The member function effectively calls <bpt id=\"p1\">[</bpt>hash_multimap::erase (STL/CLR)<ept id=\"p1\">](../dotnet/hash-multimap-erase-stl-clr.md)</ept><ph id=\"ph1\">`(`</ph> <bpt id=\"p2\">[</bpt>hash_multimap::begin (STL/CLR)<ept id=\"p2\">](../dotnet/hash-multimap-begin-stl-clr.md)</ept><ph id=\"ph2\">`(),`</ph> <bpt id=\"p3\">[</bpt>hash_multimap::end (STL/CLR)<ept id=\"p3\">](../dotnet/hash-multimap-end-stl-clr.md)</ept><ph id=\"ph3\">`())`</ph>.","pos":[760,1032],"source":"The member function effectively calls [hash_multimap::erase (STL/CLR)](../dotnet/hash-multimap-erase-stl-clr.md)`(` [hash_multimap::begin (STL/CLR)](../dotnet/hash-multimap-begin-stl-clr.md)`(),` [hash_multimap::end (STL/CLR)](../dotnet/hash-multimap-end-stl-clr.md)`())`."},{"content":"You use it to ensure that the controlled sequence is empty.","pos":[1033,1092]},{"content":"Example","pos":[1101,1108]},{"content":"Requirements","pos":[2370,2382]},{"pos":[2386,2416],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/hash_map&gt;","source":"**Header:** \\<cliext/hash_map>"},{"pos":[2423,2444],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2453,2461]},{"content":"hash_multimap (STL/CLR)","pos":[2466,2489]},{"content":"hash_multimap::erase (STL/CLR)","pos":[2532,2562]}],"content":"---\ntitle: \"hash_multimap::clear (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::hash_multimap::clear\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"clear member [STL/CLR]\"\nms.assetid: 8ad99f08-93b3-42b7-be07-f9a8ec556554\ncaps.latest.revision: 14\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# hash_multimap::clear (STL/CLR)\nRemoves all elements.  \n  \n## Syntax  \n  \n```  \nvoid clear();  \n```  \n  \n## Remarks  \n The member function effectively calls [hash_multimap::erase (STL/CLR)](../dotnet/hash-multimap-erase-stl-clr.md)`(` [hash_multimap::begin (STL/CLR)](../dotnet/hash-multimap-begin-stl-clr.md)`(),` [hash_multimap::end (STL/CLR)](../dotnet/hash-multimap-end-stl-clr.md)`())`. You use it to ensure that the controlled sequence is empty.  \n  \n## Example  \n  \n```  \n// cliext_hash_multimap_clear.cpp   \n// compile with: /clr   \n#include <cliext/hash_map>   \n  \ntypedef cliext::hash_multimap<wchar_t, int> Myhash_multimap;   \nint main()   \n    {   \n    Myhash_multimap c1;   \n    c1.insert(Myhash_multimap::make_value(L'a', 1));   \n    c1.insert(Myhash_multimap::make_value(L'b', 2));   \n    c1.insert(Myhash_multimap::make_value(L'c', 3));   \n  \n// display contents \" [a 1] [b 2] [c 3]\"   \n    for each (Myhash_multimap::value_type elem in c1)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n  \n// clear the container and reinspect   \n    c1.clear();   \n    System::Console::WriteLine(\"size() = {0}\", c1.size());   \n  \n    c1.insert(Myhash_multimap::make_value(L'a', 1));   \n    c1.insert(Myhash_multimap::make_value(L'b', 2));   \n  \n// display contents \" [a 1] [b 2]\"   \n    for each (Myhash_multimap::value_type elem in c1)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n    c1.clear();   \n    System::Console::WriteLine(\"size() = {0}\", c1.size());   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n [a 1] [b 2] [c 3]  \nsize() = 0  \n [a 1] [b 2]  \nsize() = 0  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/hash_map>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [hash_multimap (STL/CLR)](../dotnet/hash-multimap-stl-clr.md)   \n [hash_multimap::erase (STL/CLR)](../dotnet/hash-multimap-erase-stl-clr.md)"}