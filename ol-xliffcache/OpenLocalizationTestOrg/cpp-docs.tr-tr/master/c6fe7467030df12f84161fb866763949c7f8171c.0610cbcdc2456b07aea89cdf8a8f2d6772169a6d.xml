{"nodes":[{"pos":[12,44],"content":"__RTDynamicCast | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"__RTDynamicCast | Microsoft Docs","pos":[0,32]}]},{"content":"__RTDynamicCast","pos":[834,849]},{"pos":[850,937],"content":"Runtime implementation of the <bpt id=\"p1\">[</bpt>dynamic_cast<ept id=\"p1\">](../cpp/dynamic-cast-operator.md)</ept> operator.","source":"Runtime implementation of the [dynamic_cast](../cpp/dynamic-cast-operator.md) operator."},{"content":"Syntax","pos":[946,952]},{"content":"Parameters","pos":[1129,1139]},{"content":"Pointer to a polymorphic object.","pos":[1154,1186]},{"content":"Offset of virtual function pointer in object.","pos":[1206,1251]},{"content":"Static type of object pointed to by the <ph id=\"ph1\">`inptr`</ph> parameter.","pos":[1271,1329],"source":" Static type of object pointed to by the `inptr` parameter."},{"content":"Intended result of cast.","pos":[1352,1376]},{"content":"if input is a reference; <ph id=\"ph1\">`false`</ph> if input is a pointer.","pos":[1407,1462],"source":" if input is a reference; `false` if input is a pointer."},{"content":"Return Value","pos":[1471,1483]},{"content":"Pointer to the appropriate sub-object, if successful; otherwise, NULL.","pos":[1487,1557]},{"content":"Exceptions","pos":[1566,1576]},{"pos":[1593,1660],"content":"if the input to <ph id=\"ph1\">`dynamic_cast&lt;&gt;`</ph> is a reference and the cast fails.","source":" if the input to `dynamic_cast<>` is a reference and the cast fails."},{"content":"Remarks","pos":[1669,1676]},{"content":"Converts <ph id=\"ph1\">`inptr`</ph> to an object of type <ph id=\"ph2\">`TargetType`</ph>.","pos":[1680,1731],"source":"Converts `inptr` to an object of type `TargetType`."},{"content":"The type of <ph id=\"ph1\">`inptr`</ph> must be a pointer if <ph id=\"ph2\">`TargetType`</ph> is a pointer, or an l-value if <ph id=\"ph3\">`TargetType`</ph> is a reference.","pos":[1732,1845],"source":" The type of `inptr` must be a pointer if `TargetType` is a pointer, or an l-value if `TargetType` is a reference."},{"content":"must be a pointer or a reference to a previously defined class type, or a pointer to void.","pos":[1859,1949]},{"content":"Requirements","pos":[1958,1970]},{"content":"Routine","pos":[1977,1984]},{"content":"Required header","pos":[1985,2000]},{"content":"__RTDynamicCast","pos":[2045,2060]},{"content":"rtti.h","pos":[2061,2067]}],"content":"---\ntitle: \"__RTDynamicCast | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"__RTDynamicCast\"\napilocation: \n  - \"msvcr90.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcrt.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr110_clr0400.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"__RTDynamicCast\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"__RTDynamicCast\"\nms.assetid: 56aa2d7a-aa47-46ef-830d-e37175611239\ncaps.latest.revision: 3\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# __RTDynamicCast\nRuntime implementation of the [dynamic_cast](../cpp/dynamic-cast-operator.md) operator.  \n  \n## Syntax  \n  \n```cpp  \nPVOID __RTDynamicCast (  \n   PVOID inptr,   \n   LONG VfDelta,  \n   PVOID SrcType,  \n   PVOID TargetType,   \n   BOOL isReference  \n   ) throw(...)  \n```  \n  \n#### Parameters  \n `inptr`  \n Pointer to a polymorphic object.  \n  \n `VfDelta`  \n Offset of virtual function pointer in object.  \n  \n `SrcType`  \n Static type of object pointed to by the `inptr` parameter.  \n  \n `TargetType`  \n Intended result of cast.  \n  \n `isReference`  \n `true` if input is a reference; `false` if input is a pointer.  \n  \n## Return Value  \n Pointer to the appropriate sub-object, if successful; otherwise, NULL.  \n  \n## Exceptions  \n `bad_cast()` if the input to `dynamic_cast<>` is a reference and the cast fails.  \n  \n## Remarks  \n Converts `inptr` to an object of type `TargetType`. The type of `inptr` must be a pointer if `TargetType` is a pointer, or an l-value if `TargetType` is a reference. `TargetType` must be a pointer or a reference to a previously defined class type, or a pointer to void.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|__RTDynamicCast|rtti.h|"}