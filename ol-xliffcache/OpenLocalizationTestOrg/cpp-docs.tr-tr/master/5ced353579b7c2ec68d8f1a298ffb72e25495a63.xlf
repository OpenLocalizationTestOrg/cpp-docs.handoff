<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5ced353579b7c2ec68d8f1a298ffb72e25495a63</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\name-resolution-for-dependent-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aba2c5844587471d30bde392cd5c077ca62ebf5e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3431e69b1e78d042d18f658c7837a465c2c12409</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Name Resolution for Dependent Types | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Name Resolution for Dependent Types</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">**</bpt>typename<ept id="p1">**</ept> for qualified names in template definitions to tell the compiler that the given qualified name identifies a type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>typename<ept id="p1">](../cpp/typename.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Name lookup for dependent names examines names from both the context of the template definition—in the following example, this context would find <ph id="ph1">`myFunction(char)`</ph>—and the context of the template instantiation.In the following example, the template is instantiated in main; therefore, the <ph id="ph2">`MyNamespace::myFunction`</ph> is visible from the point of instantiation and is picked as the better match.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`MyNamespace::myFunction`</ph> were renamed, <ph id="ph2">`myFunction(char)`</ph> would be called instead.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>All names are resolved as if they were dependent names.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Nevertheless, we recommend that you use fully qualified names if there is any possible conflict.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Template Disambiguation</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>enforces the C++98/03/11 standard rules for disambiguation with the "template" keyword.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In the following example, <ph id="ph1">[!INCLUDE[cpp_dev10_long](../build/includes/cpp_dev10_long_md.md)]</ph> would accept both the nonconforming lines and the conforming lines.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>accepts only the conforming lines.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Conformance with the disambiguation rules is required because, by default, C++ assumes that <ph id="ph1">`AY::Rebind`</ph> isn't a template, and so the compiler interprets the following "<ph id="ph2">`&lt;`</ph>" as a less-than.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>It has to know that <ph id="ph1">`Rebind`</ph> is a template so that it can correctly parse "<ph id="ph2">`&lt;`</ph>" as an angle bracket.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Name Resolution</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>