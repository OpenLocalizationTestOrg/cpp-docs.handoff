{"nodes":[{"pos":[12,44],"content":"_popen, _wpopen | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_popen, _wpopen | Microsoft Docs","pos":[0,32]}]},{"content":"_popen, _wpopen","pos":[1123,1138]},{"content":"Creates a pipe and executes a command.","pos":[1139,1177]},{"pos":[1185,1405],"content":"[!IMPORTANT]\n This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","leadings":["","> "],"nodes":[{"content":" This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","pos":[13,218],"nodes":[{"content":"This API cannot be used in applications that execute in the Windows Runtime.","pos":[1,77]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRT functions not supported with /ZW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.","pos":[78,205],"source":" For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)."}]}]},{"content":"Syntax","pos":[1414,1420]},{"content":"Parameters","pos":[1590,1600]},{"content":"command","pos":[1605,1612]},{"content":"Command to be executed.","pos":[1617,1640]},{"content":"mode","pos":[1648,1652]},{"content":"Mode of the returned stream.","pos":[1657,1685]},{"content":"Return Value","pos":[1694,1706]},{"content":"Returns a stream associated with one end of the created pipe.","pos":[1710,1771]},{"content":"The other end of the pipe is associated with the spawned command's standard input or standard output.","pos":[1772,1873]},{"content":"The functions return <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> on an error.","pos":[1874,1916],"source":" The functions return **NULL** on an error."},{"content":"If the error is an invalid parameter, such as if <bpt id=\"p1\">*</bpt>command<ept id=\"p1\">*</ept> or <bpt id=\"p2\">*</bpt>mode<ept id=\"p2\">*</ept> is a null pointer, or <bpt id=\"p3\">*</bpt>mode<ept id=\"p3\">*</ept> is not a valid mode, <ph id=\"ph1\">`errno`</ph> is set to <ph id=\"ph2\">`EINVAL`</ph>.","pos":[1917,2063],"source":" If the error is an invalid parameter, such as if *command* or *mode* is a null pointer, or *mode* is not a valid mode, `errno` is set to `EINVAL`."},{"content":"See the Remarks section for valid modes.","pos":[2064,2104]},{"pos":[2111,2282],"content":"For information about these and other error codes, see <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For information about these and other error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"Remarks","pos":[2291,2298]},{"content":"The <ph id=\"ph1\">`_popen`</ph> function creates a pipe and asynchronously executes a spawned copy of the command processor with the specified string <bpt id=\"p1\">*</bpt>command<ept id=\"p1\">*</ept>.","pos":[2302,2443],"source":"The `_popen` function creates a pipe and asynchronously executes a spawned copy of the command processor with the specified string *command*."},{"content":"The character string <bpt id=\"p1\">*</bpt>mode<ept id=\"p1\">*</ept> specifies the type of access requested, as follows.","pos":[2444,2523],"source":" The character string *mode* specifies the type of access requested, as follows."},{"content":"\"r\"","pos":[2532,2535]},{"content":"The calling process can read the spawned command's standard output using the returned stream.","pos":[2541,2634]},{"content":"\"w\"","pos":[2643,2646]},{"content":"The calling process can write to the spawned command's standard input using the returned stream.","pos":[2652,2748]},{"content":"\"b\"","pos":[2757,2760]},{"content":"Open in binary mode.","pos":[2766,2786]},{"content":"\"t\"","pos":[2795,2798]},{"content":"Open in text mode.","pos":[2804,2822]},{"pos":[2830,3311],"content":"[!NOTE]\n If used in a Windows program, the `_popen` function returns an invalid file pointer that causes the program to stop responding indefinitely. `_popen` works properly in a console application. To create a Windows application that redirects input and output, see [Creating a Child Process with Redirected Input and Output](http://msdn.microsoft.com/library/windows/desktop/ms682499) in the [!INCLUDE[winsdkshort](../../atl-mfc-shared/reference/includes/winsdkshort_md.md)].","leadings":["","> "],"nodes":[{"content":" If used in a Windows program, the `_popen` function returns an invalid file pointer that causes the program to stop responding indefinitely. `_popen` works properly in a console application. To create a Windows application that redirects input and output, see [Creating a Child Process with Redirected Input and Output](http://msdn.microsoft.com/library/windows/desktop/ms682499) in the [!INCLUDE[winsdkshort](../../atl-mfc-shared/reference/includes/winsdkshort_md.md)].","pos":[8,479],"nodes":[{"content":"If used in a Windows program, the <ph id=\"ph1\">`_popen`</ph> function returns an invalid file pointer that causes the program to stop responding indefinitely.","pos":[1,141],"source":" If used in a Windows program, the `_popen` function returns an invalid file pointer that causes the program to stop responding indefinitely."},{"content":"works properly in a console application.","pos":[151,191]},{"content":"To create a Windows application that redirects input and output, see <bpt id=\"p1\">[</bpt>Creating a Child Process with Redirected Input and Output<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms682499)</ept> in the <ph id=\"ph1\">[!INCLUDE[winsdkshort](../../atl-mfc-shared/reference/includes/winsdkshort_md.md)]</ph>.","pos":[192,471],"source":" To create a Windows application that redirects input and output, see [Creating a Child Process with Redirected Input and Output](http://msdn.microsoft.com/library/windows/desktop/ms682499) in the [!INCLUDE[winsdkshort](../../atl-mfc-shared/reference/includes/winsdkshort_md.md)]."}]}]},{"content":"is a wide-character version of <ph id=\"ph1\">`_popen`</ph>; the <bpt id=\"p1\">*</bpt>path<ept id=\"p1\">*</ept> argument to <ph id=\"ph2\">`_wpopen`</ph> is a wide-character string.","pos":[3328,3429],"source":" is a wide-character version of `_popen`; the *path* argument to `_wpopen` is a wide-character string."},{"content":"and <ph id=\"ph1\">`_popen`</ph> behave identically otherwise.","pos":[3440,3482],"source":" and `_popen` behave identically otherwise."},{"content":"Generic-Text Routine Mappings","pos":[3492,3521]},{"content":"Tchar.h routine","pos":[3528,3543]},{"content":"_UNICODE and _MBCS not defined","pos":[3544,3574]},{"content":"_MBCS defined","pos":[3575,3588]},{"content":"_UNICODE defined","pos":[3589,3605]},{"content":"Requirements","pos":[3767,3779]},{"content":"Routine","pos":[3786,3793]},{"content":"Required header","pos":[3794,3809]},{"content":"stdio.h&gt;","pos":[3865,3873],"source":"stdio.h>"},{"content":"stdio.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[3890,3912],"source":"stdio.h> or \\<wchar.h>"},{"pos":[3920,4018],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"Libraries","pos":[4027,4036]},{"pos":[4040,4132],"content":"All versions of the <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept>.","source":"All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md)."},{"content":"Example","pos":[4141,4148]},{"content":"Sample Output","pos":[5082,5095]},{"content":"This output assumes that there is only one file in the current directory with a .c file name extension.","pos":[5099,5202]},{"content":".NET Framework Equivalent","pos":[5512,5537]},{"content":"Not applicable.","pos":[5541,5556]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[5557,5604],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[5605,5730],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[5739,5747]},{"content":"Process and Environment Control","pos":[5752,5783]},{"content":"_pclose","pos":[5850,5857]},{"content":"_pipe","pos":[5909,5914]}],"content":"---\ntitle: \"_popen, _wpopen | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_popen\"\n  - \"_wpopen\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-stdio-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"tpopen\"\n  - \"popen\"\n  - \"wpopen\"\n  - \"_popen\"\n  - \"_wpopen\"\n  - \"_tpopen\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"tpopen function\"\n  - \"pipes, creating\"\n  - \"_popen function\"\n  - \"_tpopen function\"\n  - \"popen function\"\n  - \"wpopen function\"\n  - \"_wpopen function\"\nms.assetid: eb718ff2-c87d-4bd4-bd2e-ba317c3d6973\ncaps.latest.revision: 15\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _popen, _wpopen\nCreates a pipe and executes a command.  \n  \n> [!IMPORTANT]\n>  This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).  \n  \n## Syntax  \n  \n```  \n  \n      FILE *_popen(  \nconst char *command,  \nconst char *mode   \n);  \nFILE *_wpopen(  \nconst wchar_t *command,  \nconst wchar_t *mode   \n);  \n```  \n  \n#### Parameters  \n *command*  \n Command to be executed.  \n  \n *mode*  \n Mode of the returned stream.  \n  \n## Return Value  \n Returns a stream associated with one end of the created pipe. The other end of the pipe is associated with the spawned command's standard input or standard output. The functions return **NULL** on an error. If the error is an invalid parameter, such as if *command* or *mode* is a null pointer, or *mode* is not a valid mode, `errno` is set to `EINVAL`. See the Remarks section for valid modes.  \n  \n For information about these and other error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n The `_popen` function creates a pipe and asynchronously executes a spawned copy of the command processor with the specified string *command*. The character string *mode* specifies the type of access requested, as follows.  \n  \n **\"r\"**  \n The calling process can read the spawned command's standard output using the returned stream.  \n  \n **\"w\"**  \n The calling process can write to the spawned command's standard input using the returned stream.  \n  \n **\"b\"**  \n Open in binary mode.  \n  \n **\"t\"**  \n Open in text mode.  \n  \n> [!NOTE]\n>  If used in a Windows program, the `_popen` function returns an invalid file pointer that causes the program to stop responding indefinitely. `_popen` works properly in a console application. To create a Windows application that redirects input and output, see [Creating a Child Process with Redirected Input and Output](http://msdn.microsoft.com/library/windows/desktop/ms682499) in the [!INCLUDE[winsdkshort](../../atl-mfc-shared/reference/includes/winsdkshort_md.md)].  \n  \n `_wpopen` is a wide-character version of `_popen`; the *path* argument to `_wpopen` is a wide-character string. `_wpopen` and `_popen` behave identically otherwise.  \n  \n### Generic-Text Routine Mappings  \n  \n|Tchar.h routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_tpopen`|`_popen`|`_popen`|`_wpopen`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_popen`|\\<stdio.h>|  \n|`_wpopen`|\\<stdio.h> or \\<wchar.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Libraries  \n All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md).  \n  \n## Example  \n  \n```  \n// crt_popen.c  \n/* This program uses _popen and _pclose to receive a   \n * stream of text from a system process.  \n */  \n  \n#include <stdio.h>  \n#include <stdlib.h>  \n  \nint main( void )  \n{  \n  \n   char   psBuffer[128];  \n   FILE   *pPipe;  \n  \n        /* Run DIR so that it writes its output to a pipe. Open this  \n         * pipe with read text attribute so that we can read it   \n         * like a text file.   \n         */  \n  \n   if( (pPipe = _popen( \"dir *.c /on /p\", \"rt\" )) == NULL )  \n      exit( 1 );  \n  \n   /* Read pipe until end of file, or an error occurs. */  \n  \n   while(fgets(psBuffer, 128, pPipe))  \n   {  \n      printf(psBuffer);  \n   }  \n  \n   /* Close pipe and print return value of pPipe. */  \n   if (feof( pPipe))  \n   {  \n     printf( \"\\nProcess returned %d\\n\", _pclose( pPipe ) );  \n   }  \n   else  \n   {  \n     printf( \"Error: Failed to read the pipe to the end.\\n\");  \n   }  \n}  \n```  \n  \n## Sample Output  \n This output assumes that there is only one file in the current directory with a .c file name extension.  \n  \n```  \n Volume in drive C is CDRIVE  \n Volume Serial Number is 0E17-1702  \n  \n Directory of D:\\proj\\console\\test1  \n  \n07/17/98  07:26p                   780 popen.c  \n               1 File(s)            780 bytes  \n                             86,597,632 bytes free  \n  \nProcess returned 0  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Process and Environment Control](../../c-runtime-library/process-and-environment-control.md)   \n [_pclose](../../c-runtime-library/reference/pclose.md)   \n [_pipe](../../c-runtime-library/reference/pipe.md)"}