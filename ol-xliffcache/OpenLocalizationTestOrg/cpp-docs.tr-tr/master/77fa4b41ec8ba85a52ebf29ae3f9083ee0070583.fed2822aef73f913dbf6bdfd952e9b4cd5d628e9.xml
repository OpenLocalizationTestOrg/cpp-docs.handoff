{"nodes":[{"pos":[12,49],"content":"Character Assignment | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Character Assignment | Microsoft Docs","pos":[0,37]}]},{"content":"Character Assignment","pos":[624,644]},{"pos":[645,773],"content":"Consider the following example, in which the <ph id=\"ph1\">`while`</ph> loop scans a string, copying all characters except 'X' into another string:","source":"Consider the following example, in which the `while` loop scans a string, copying all characters except 'X' into another string:"},{"content":"The code copies the byte at <ph id=\"ph1\">`sz2`</ph> to the location pointed to by <ph id=\"ph2\">`sz1`</ph>, then increments <ph id=\"ph3\">`sz1`</ph> to receive the next byte.","pos":[898,1016],"source":"The code copies the byte at `sz2` to the location pointed to by `sz1`, then increments `sz1` to receive the next byte."},{"content":"But if the next character in <ph id=\"ph1\">`sz2`</ph> is a double-byte character, the assignment to <ph id=\"ph2\">`sz1`</ph> copies only the first byte.","pos":[1017,1131],"source":" But if the next character in `sz2` is a double-byte character, the assignment to `sz1` copies only the first byte."},{"content":"The following code uses a portable function to copy the character safely and another to increment <ph id=\"ph1\">`sz1`</ph> and <ph id=\"ph2\">`sz2`</ph> correctly:","pos":[1132,1256],"source":" The following code uses a portable function to copy the character safely and another to increment `sz1` and `sz2` correctly:"},{"content":"See Also","pos":[1487,1495]},{"content":"MBCS Programming Tips","pos":[1500,1521]},{"content":"Character Comparison","pos":[1562,1582]}],"content":"---\ntitle: \"Character Assignment | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"characters [C++], assignments\"\n  - \"MBCS [C++], character assignments\"\nms.assetid: dcc329cd-92df-4e20-817d-364be62ff28f\ncaps.latest.revision: 9\nauthor: \"ghogen\"\nms.author: \"ghogen\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Character Assignment\nConsider the following example, in which the `while` loop scans a string, copying all characters except 'X' into another string:  \n  \n```  \nwhile( *sz2 )  \n{  \n    if( *sz2 != 'X' )  \n        *sz1++ = *sz2++;  \n    else  \n        sz2++;  \n}  \n```  \n  \n The code copies the byte at `sz2` to the location pointed to by `sz1`, then increments `sz1` to receive the next byte. But if the next character in `sz2` is a double-byte character, the assignment to `sz1` copies only the first byte. The following code uses a portable function to copy the character safely and another to increment `sz1` and `sz2` correctly:  \n  \n```  \nwhile( *sz2 )  \n{  \n    if( *sz2 != 'X' )  \n    {  \n        _mbscpy_s( sz1, 1, sz2 );  \n        sz1 = _mbsinc( sz1 );  \n        sz2 = _mbsinc( sz2 );  \n    }  \n    else  \n        sz2 = _mbsinc( sz2 );  \n}  \n```  \n  \n## See Also  \n [MBCS Programming Tips](../text/mbcs-programming-tips.md)   \n [Character Comparison](../text/character-comparison.md)"}