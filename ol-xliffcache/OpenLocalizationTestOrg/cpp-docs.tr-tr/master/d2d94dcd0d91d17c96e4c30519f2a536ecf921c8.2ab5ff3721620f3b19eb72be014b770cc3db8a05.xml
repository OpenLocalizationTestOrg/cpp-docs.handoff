{"nodes":[{"pos":[12,50],"content":"remove_copy (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"remove_copy (STL-CLR) | Microsoft Docs","pos":[0,38]}]},{"content":"remove_copy (STL/CLR)","pos":[631,652]},{"content":"Copies elements from a source range to a destination range, except that elements of a specified value are not copied, without disturbing the order of the remaining elements and returning the end of a new destination range.","pos":[653,875]},{"content":"Syntax","pos":[884,890]},{"content":"Remarks","pos":[1064,1071]},{"content":"This function behaves the same as the STL function <ph id=\"ph1\">`remove_copy`</ph>.","pos":[1075,1140],"source":"This function behaves the same as the STL function `remove_copy`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>remove_copy<ept id=\"p1\">](http://msdn.microsoft.com/Library/04a5af2c-4d15-483e-9ee0-39812fb344c4)</ept>.","pos":[1141,1253],"source":" For more information, see [remove_copy](http://msdn.microsoft.com/Library/04a5af2c-4d15-483e-9ee0-39812fb344c4)."},{"content":"Requirements","pos":[1262,1274]},{"pos":[1278,1309],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/algorithm&gt;","source":"**Header:** \\<cliext/algorithm>"},{"pos":[1316,1337],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[1346,1354]},{"content":"algorithm (STL/CLR)","pos":[1359,1378]}],"content":"---\ntitle: \"remove_copy (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::remove_copy\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"remove_copy function [STL/CLR]\"\nms.assetid: 602fd8e3-26f7-491f-bf2c-cddf269f9807\ncaps.latest.revision: 4\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# remove_copy (STL/CLR)\nCopies elements from a source range to a destination range, except that elements of a specified value are not copied, without disturbing the order of the remaining elements and returning the end of a new destination range.  \n  \n## Syntax  \n  \n```  \ntemplate<class _InIt, class _OutIt, class _Ty> inline  \n    _OutIt remove_copy(_InIt _First, _InIt _Last,  \n        _OutIt _Dest, const _Ty% _Val);  \n```  \n  \n## Remarks  \n This function behaves the same as the STL function `remove_copy`. For more information, see [remove_copy](http://msdn.microsoft.com/Library/04a5af2c-4d15-483e-9ee0-39812fb344c4).  \n  \n## Requirements  \n **Header:** \\<cliext/algorithm>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [algorithm (STL/CLR)](../dotnet/algorithm-stl-clr.md)"}