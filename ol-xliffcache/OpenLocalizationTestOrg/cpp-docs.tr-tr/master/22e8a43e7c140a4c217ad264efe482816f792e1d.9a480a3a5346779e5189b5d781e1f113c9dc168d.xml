{"nodes":[{"pos":[12,52],"content":"CComClassFactory2 Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CComClassFactory2 Class | Microsoft Docs","pos":[0,40]}]},{"content":"CComClassFactory2 Class","pos":[757,780]},{"pos":[781,894],"content":"This class implements the <bpt id=\"p1\">[</bpt>IClassFactory2<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms692720)</ept> interface.","source":"This class implements the [IClassFactory2](http://msdn.microsoft.com/library/windows/desktop/ms692720) interface."},{"content":"Syntax","pos":[903,909]},{"content":"Parameters","pos":[1080,1090]},{"content":"license","pos":[1095,1102]},{"content":"A class that implements the following static functions:","pos":[1107,1162]},{"pos":[1170,1222],"content":"<bpt id=\"p1\">**</bpt>static BOOL VerifyLicenseKey( BSTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`bstr`</ph> <bpt id=\"p2\">**</bpt>);<ept id=\"p2\">**</ept>","source":"**static BOOL VerifyLicenseKey( BSTR** `bstr` **);**"},{"pos":[1230,1307],"content":"<bpt id=\"p1\">**</bpt>static BOOL GetLicenseKey( DWORD<ept id=\"p1\">**</ept> <ph id=\"ph1\">`dwReserved`</ph> <bpt id=\"p2\">**</bpt>, BSTR<ph id=\"ph2\">\\*</ph><ept id=\"p2\">**</ept> <ph id=\"ph3\">`pBstr`</ph> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**static BOOL GetLicenseKey( DWORD** `dwReserved` **, BSTR\\*** `pBstr` **);**"},{"content":"static BOOL IsLicenseValid( );","pos":[1317,1347]},{"content":"Members","pos":[1358,1365]},{"content":"Public Methods","pos":[1375,1389]},{"content":"Name","pos":[1396,1400]},{"content":"Description","pos":[1401,1412]},{"content":"CComClassFactory2::CreateInstance","pos":[1451,1484]},{"content":"Creates an object of the specified CLSID.","pos":[1522,1563]},{"content":"CComClassFactory2::CreateInstanceLic","pos":[1569,1605]},{"content":"Given a license key, creates an object of the specified CLSID.","pos":[1646,1708]},{"content":"CComClassFactory2::GetLicInfo","pos":[1714,1743]},{"content":"Retrieves information describing the licensing capabilities of the class factory.","pos":[1777,1858]},{"content":"CComClassFactory2::LockServer","pos":[1864,1893]},{"content":"Locks the class factory in memory.","pos":[1927,1961]},{"content":"CComClassFactory2::RequestLicKey","pos":[1967,1999]},{"content":"Creates and returns a license key.","pos":[2036,2070]},{"content":"Remarks","pos":[2080,2087]},{"content":"implements the <bpt id=\"p1\">[</bpt>IClassFactory2<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms692720)</ept> interface, which is an extension of <bpt id=\"p2\">[</bpt>IClassFactory<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms694364)</ept>.","pos":[2111,2315],"source":" implements the [IClassFactory2](http://msdn.microsoft.com/library/windows/desktop/ms692720) interface, which is an extension of [IClassFactory](http://msdn.microsoft.com/library/windows/desktop/ms694364)."},{"content":"<bpt id=\"p1\">**</bpt>IClassFactory2<ept id=\"p1\">**</ept> controls object creation through a license.","pos":[2316,2378],"source":"**IClassFactory2** controls object creation through a license."},{"content":"A class factory executing on a licensed machine can provide a run-time license key.","pos":[2379,2462]},{"content":"This license key allows an application to instantiate objects when a full machine license does not exist.","pos":[2463,2568]},{"content":"ATL objects normally acquire a class factory by deriving from <bpt id=\"p1\">[</bpt>CComCoClass<ept id=\"p1\">](../../atl/reference/ccomcoclass-class.md)</ept>.","pos":[2575,2693],"source":"ATL objects normally acquire a class factory by deriving from [CComCoClass](../../atl/reference/ccomcoclass-class.md)."},{"content":"This class includes the macro <bpt id=\"p1\">[</bpt>DECLARE_CLASSFACTORY<ept id=\"p1\">](http://msdn.microsoft.com/library/51a6b925-07c0-4d3a-9174-0b8c808975e4)</ept>, which declares <bpt id=\"p2\">[</bpt>CComClassFactory<ept id=\"p2\">](../../atl/reference/ccomclassfactory-class.md)</ept> as the default class factory.","pos":[2694,2930],"source":" This class includes the macro [DECLARE_CLASSFACTORY](http://msdn.microsoft.com/library/51a6b925-07c0-4d3a-9174-0b8c808975e4), which declares [CComClassFactory](../../atl/reference/ccomclassfactory-class.md) as the default class factory."},{"content":"To use <ph id=\"ph1\">`CComClassFactory2`</ph>, specify the <bpt id=\"p1\">[</bpt>DECLARE_CLASSFACTORY2<ept id=\"p1\">](http://msdn.microsoft.com/library/38a6c969-7297-4bb1-9ba6-1fe2d355b285)</ept> macro in your object's class definition.","pos":[2931,3107],"source":" To use `CComClassFactory2`, specify the [DECLARE_CLASSFACTORY2](http://msdn.microsoft.com/library/38a6c969-7297-4bb1-9ba6-1fe2d355b285) macro in your object's class definition."},{"content":"For example:","pos":[3108,3120]},{"pos":[3138,3151],"content":"NVC_ATL_COM#2"},{"content":"<bpt id=\"p1\">**</bpt>CMyLicense<ept id=\"p1\">**</ept>, the template parameter to <ph id=\"ph1\">`CComClassFactory2`</ph>, must implement the static functions <ph id=\"ph2\">`VerifyLicenseKey`</ph>, <ph id=\"ph3\">`GetLicenseKey`</ph>, and <ph id=\"ph4\">`IsLicenseValid`</ph>.","pos":[3215,3372],"source":"**CMyLicense**, the template parameter to `CComClassFactory2`, must implement the static functions `VerifyLicenseKey`, `GetLicenseKey`, and `IsLicenseValid`."},{"content":"The following is an example of a simple license class:","pos":[3373,3427]},{"pos":[3445,3458],"content":"NVC_ATL_COM#3"},{"content":"derives from both <bpt id=\"p1\">**</bpt>CComClassFactory2Base<ept id=\"p1\">**</ept> and <bpt id=\"p2\">*</bpt>license<ept id=\"p2\">*</ept>.","pos":[3542,3600],"source":" derives from both **CComClassFactory2Base** and *license*."},{"content":"<bpt id=\"p1\">**</bpt>CComClassFactory2Base<ept id=\"p1\">**</ept>, in turn, derives from <bpt id=\"p2\">**</bpt>IClassFactory2<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>CComObjectRootEx<ph id=\"ph1\">\\&lt;</ph> CComGlobalsThreadModel &gt;<ept id=\"p3\">**</ept>.","pos":[3601,3721],"source":"**CComClassFactory2Base**, in turn, derives from **IClassFactory2** and **CComObjectRootEx\\< CComGlobalsThreadModel >**."},{"content":"Inheritance Hierarchy","pos":[3730,3751]},{"content":"CComObjectRootEx","pos":[3799,3815]},{"content":"Requirements","pos":[3921,3933]},{"pos":[3937,3957],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlcom.h","source":"**Header:** atlcom.h"},{"pos":[4017,4050],"content":"CComClassFactory2::CreateInstance"},{"content":"Creates an object of the specified CLSID and retrieves an interface pointer to this object.","pos":[4054,4145]},{"content":"Parameters","pos":[4252,4262]},{"content":"[in] If the object is being created as part of an aggregate, then <ph id=\"ph1\">`pUnkOuter`</ph> must be the outer unknown.","pos":[4281,4385],"source":" [in] If the object is being created as part of an aggregate, then `pUnkOuter` must be the outer unknown."},{"content":"Otherwise, <ph id=\"ph1\">`pUnkOuter`</ph> must be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[4386,4426],"source":" Otherwise, `pUnkOuter` must be **NULL**."},{"content":"[in] The IID of the requested interface.","pos":[4443,4483]},{"content":"If <ph id=\"ph1\">`pUnkOuter`</ph> is non- <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, <ph id=\"ph2\">`riid`</ph> must be <bpt id=\"p2\">**</bpt>IID_IUnknown<ept id=\"p2\">**</ept>.","pos":[4484,4549],"source":" If `pUnkOuter` is non- **NULL**, `riid` must be **IID_IUnknown**."},{"content":"[out] A pointer to the interface pointer identified by <ph id=\"ph1\">`riid`</ph>.","pos":[4568,4630],"source":" [out] A pointer to the interface pointer identified by `riid`."},{"content":"If the object does not support this interface, <ph id=\"ph1\">`ppvObj`</ph> is set to <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[4631,4706],"source":" If the object does not support this interface, `ppvObj` is set to **NULL**."},{"content":"Return Value","pos":[4716,4728]},{"pos":[4732,4759],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[4769,4776]},{"content":"Requires the machine to be fully licensed.","pos":[4780,4822]},{"content":"If a full machine license does not exist, call <bpt id=\"p1\">[</bpt>CreateInstanceLic<ept id=\"p1\">](#ccomclassfactory2__createinstancelic)</ept>.","pos":[4823,4929],"source":" If a full machine license does not exist, call [CreateInstanceLic](#ccomclassfactory2__createinstancelic)."},{"pos":[4992,5028],"content":"CComClassFactory2::CreateInstanceLic"},{"pos":[5032,5152],"content":"Similar to <bpt id=\"p1\">[</bpt>CreateInstance<ept id=\"p1\">](#ccomclassfactory2__createinstance)</ept>, except that <ph id=\"ph1\">`CreateInstanceLic`</ph> requires a license key.","source":"Similar to [CreateInstance](#ccomclassfactory2__createinstance), except that `CreateInstanceLic` requires a license key."},{"content":"Parameters","pos":[5323,5333]},{"content":"[in] If the object is being created as part of an aggregate, then <ph id=\"ph1\">`pUnkOuter`</ph> must be the outer unknown.","pos":[5352,5456],"source":" [in] If the object is being created as part of an aggregate, then `pUnkOuter` must be the outer unknown."},{"content":"Otherwise, <ph id=\"ph1\">`pUnkOuter`</ph> must be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[5457,5497],"source":" Otherwise, `pUnkOuter` must be **NULL**."},{"content":"pUnkReserved","pos":[5505,5517]},{"content":"[in] Not used.","pos":[5522,5536]},{"content":"Must be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[5537,5554],"source":" Must be **NULL**."},{"content":"[in] The IID of the requested interface.","pos":[5571,5611]},{"content":"If <ph id=\"ph1\">`pUnkOuter`</ph> is non- <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, <ph id=\"ph2\">`riid`</ph> must be <bpt id=\"p2\">**</bpt>IID_IUnknown<ept id=\"p2\">**</ept>.","pos":[5612,5677],"source":" If `pUnkOuter` is non- **NULL**, `riid` must be **IID_IUnknown**."},{"content":"[in] The run-time license key previously obtained from a call to <ph id=\"ph1\">`RequestLicKey`</ph>.","pos":[5697,5778],"source":" [in] The run-time license key previously obtained from a call to `RequestLicKey`."},{"content":"This key is required to create the object.","pos":[5779,5821]},{"content":"[out] A pointer to the interface pointer specified by <ph id=\"ph1\">`riid`</ph>.","pos":[5843,5904],"source":" [out] A pointer to the interface pointer specified by `riid`."},{"content":"If the object does not support this interface, <ph id=\"ph1\">`ppvObject`</ph> is set to <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[5905,5983],"source":" If the object does not support this interface, `ppvObject` is set to **NULL**."},{"content":"Return Value","pos":[5993,6005]},{"pos":[6009,6036],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[6046,6053]},{"content":"You can obtain a license key using <bpt id=\"p1\">[</bpt>RequestLicKey<ept id=\"p1\">](#ccomclassfactory2__requestlickey)</ept>.","pos":[6057,6143],"source":"You can obtain a license key using [RequestLicKey](#ccomclassfactory2__requestlickey)."},{"content":"In order to create an object on an unlicensed machine, you must call <ph id=\"ph1\">`CreateInstanceLic`</ph>.","pos":[6144,6233],"source":" In order to create an object on an unlicensed machine, you must call `CreateInstanceLic`."},{"pos":[6289,6318],"content":"CComClassFactory2::GetLicInfo"},{"pos":[6322,6485],"content":"Fills a <bpt id=\"p1\">[</bpt>LICINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms690590)</ept> structure with information that describes the class factory's licensing capabilities.","source":"Fills a [LICINFO](http://msdn.microsoft.com/library/windows/desktop/ms690590) structure with information that describes the class factory's licensing capabilities."},{"content":"Parameters","pos":[6550,6560]},{"content":"pLicInfo","pos":[6565,6573]},{"content":"[out] Pointer to a <bpt id=\"p1\">**</bpt>LICINFO<ept id=\"p1\">**</ept> structure.","pos":[6578,6619],"source":" [out] Pointer to a **LICINFO** structure."},{"content":"Return Value","pos":[6629,6641]},{"pos":[6645,6672],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[6682,6689]},{"content":"The <ph id=\"ph1\">`fRuntimeKeyAvail`</ph> member of this structure indicates whether, given a license key, the class factory allows objects to be created on an unlicensed machine.","pos":[6693,6853],"source":"The `fRuntimeKeyAvail` member of this structure indicates whether, given a license key, the class factory allows objects to be created on an unlicensed machine."},{"content":"The <bpt id=\"p1\">*</bpt>fLicVerified<ept id=\"p1\">*</ept> member indicates whether a full machine license exists.","pos":[6854,6928],"source":" The *fLicVerified* member indicates whether a full machine license exists."},{"pos":[6984,7013],"content":"CComClassFactory2::LockServer"},{"pos":[7017,7132],"content":"Increments and decrements the module lock count by calling <bpt id=\"p1\">**</bpt>_Module::Lock<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>_Module::Unlock<ept id=\"p2\">**</ept>, respectively.","source":"Increments and decrements the module lock count by calling **_Module::Lock** and **_Module::Unlock**, respectively."},{"content":"Parameters","pos":[7190,7200]},{"content":"[in] If <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, the lock count is incremented; otherwise, the lock count is decremented.","pos":[7215,7305],"source":" [in] If **TRUE**, the lock count is incremented; otherwise, the lock count is decremented."},{"content":"Return Value","pos":[7315,7327]},{"pos":[7331,7358],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[7368,7375]},{"pos":[7379,7505],"content":"<bpt id=\"p1\">**</bpt>_Module<ept id=\"p1\">**</ept> refers to the global instance of <bpt id=\"p2\">[</bpt>CComModule<ept id=\"p2\">](../../atl/reference/ccommodule-class.md)</ept> or a class derived from it.","source":"**_Module** refers to the global instance of [CComModule](../../atl/reference/ccommodule-class.md) or a class derived from it."},{"pos":[7512,7626],"content":"Calling <ph id=\"ph1\">`LockServer`</ph> allows a client to hold onto a class factory so that multiple objects can be quickly created.","source":"Calling `LockServer` allows a client to hold onto a class factory so that multiple objects can be quickly created."},{"pos":[7685,7717],"content":"CComClassFactory2::RequestLicKey"},{"pos":[7721,7899],"content":"Creates and returns a license key, provided that the <ph id=\"ph1\">`fRuntimeKeyAvail`</ph> member of the <bpt id=\"p1\">[</bpt>LICINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms690590)</ept> structure is <bpt id=\"p2\">**</bpt>TRUE<ept id=\"p2\">**</ept>.","source":"Creates and returns a license key, provided that the `fRuntimeKeyAvail` member of the [LICINFO](http://msdn.microsoft.com/library/windows/desktop/ms690590) structure is **TRUE**."},{"content":"Parameters","pos":[7986,7996]},{"content":"[in] Not used.","pos":[8016,8030]},{"content":"Must be zero.","pos":[8031,8044]},{"content":"[out] Pointer to the license key.","pos":[8065,8098]},{"content":"Return Value","pos":[8108,8120]},{"pos":[8124,8151],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[8161,8168]},{"content":"A license key is required for calling <bpt id=\"p1\">[</bpt>CreateInstanceLic<ept id=\"p1\">](#ccomclassfactory2__createinstancelic)</ept> to create an object on an unlicensed machine.","pos":[8172,8314],"source":"A license key is required for calling [CreateInstanceLic](#ccomclassfactory2__createinstancelic) to create an object on an unlicensed machine."},{"content":"If <ph id=\"ph1\">`fRuntimeKeyAvail`</ph> is <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>, then objects can only be created on a fully licensed machine.","pos":[8315,8412],"source":" If `fRuntimeKeyAvail` is **FALSE**, then objects can only be created on a fully licensed machine."},{"pos":[8419,8513],"content":"Call <bpt id=\"p1\">[</bpt>GetLicInfo<ept id=\"p1\">](#ccomclassfactory2__getlicinfo)</ept> to retrieve the value of <ph id=\"ph1\">`fRuntimeKeyAvail`</ph>.","source":"Call [GetLicInfo](#ccomclassfactory2__getlicinfo) to retrieve the value of `fRuntimeKeyAvail`."},{"content":"See Also","pos":[8522,8530]},{"content":"CComClassFactoryAutoThread Class","pos":[8535,8567]},{"content":"CComClassFactorySingleton Class","pos":[8631,8662]},{"content":"CComObjectRootEx Class","pos":[8725,8747]},{"content":"CComGlobalsThreadModel","pos":[8801,8823]},{"content":"Class Overview","pos":[8870,8884]}],"content":"---\ntitle: \"CComClassFactory2 Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL::CComClassFactory2<license>\"\n  - \"CComClassFactory2\"\n  - \"ATL.CComClassFactory2<license>\"\n  - \"ATL::CComClassFactory2\"\n  - \"ATL.CComClassFactory2\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CComClassFactory2 class\"\nms.assetid: 19b66fd6-b9ed-47a0-822c-8132184f5a3e\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CComClassFactory2 Class\nThis class implements the [IClassFactory2](http://msdn.microsoft.com/library/windows/desktop/ms692720) interface.  \n  \n## Syntax  \n  \n```\ntemplate <class license>  class CComClassFactory2 : public IClassFactory2,\n    public CComObjectRootEx<CComGlobalsThreadModel>,\n    public license\n```  \n  \n#### Parameters  \n *license*  \n A class that implements the following static functions:  \n  \n- **static BOOL VerifyLicenseKey( BSTR** `bstr` **);**  \n  \n- **static BOOL GetLicenseKey( DWORD** `dwReserved` **, BSTR\\*** `pBstr` **);**  \n  \n- **static BOOL IsLicenseValid( );**  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComClassFactory2::CreateInstance](#ccomclassfactory2__createinstance)|Creates an object of the specified CLSID.|  \n|[CComClassFactory2::CreateInstanceLic](#ccomclassfactory2__createinstancelic)|Given a license key, creates an object of the specified CLSID.|  \n|[CComClassFactory2::GetLicInfo](#ccomclassfactory2__getlicinfo)|Retrieves information describing the licensing capabilities of the class factory.|  \n|[CComClassFactory2::LockServer](#ccomclassfactory2__lockserver)|Locks the class factory in memory.|  \n|[CComClassFactory2::RequestLicKey](#ccomclassfactory2__requestlickey)|Creates and returns a license key.|  \n  \n## Remarks  \n `CComClassFactory2` implements the [IClassFactory2](http://msdn.microsoft.com/library/windows/desktop/ms692720) interface, which is an extension of [IClassFactory](http://msdn.microsoft.com/library/windows/desktop/ms694364). **IClassFactory2** controls object creation through a license. A class factory executing on a licensed machine can provide a run-time license key. This license key allows an application to instantiate objects when a full machine license does not exist.  \n  \n ATL objects normally acquire a class factory by deriving from [CComCoClass](../../atl/reference/ccomcoclass-class.md). This class includes the macro [DECLARE_CLASSFACTORY](http://msdn.microsoft.com/library/51a6b925-07c0-4d3a-9174-0b8c808975e4), which declares [CComClassFactory](../../atl/reference/ccomclassfactory-class.md) as the default class factory. To use `CComClassFactory2`, specify the [DECLARE_CLASSFACTORY2](http://msdn.microsoft.com/library/38a6c969-7297-4bb1-9ba6-1fe2d355b285) macro in your object's class definition. For example:  \n  \n [!code-cpp[NVC_ATL_COM#2](../../atl/codesnippet/cpp/ccomclassfactory2-class_1.h)]  \n  \n **CMyLicense**, the template parameter to `CComClassFactory2`, must implement the static functions `VerifyLicenseKey`, `GetLicenseKey`, and `IsLicenseValid`. The following is an example of a simple license class:  \n  \n [!code-cpp[NVC_ATL_COM#3](../../atl/codesnippet/cpp/ccomclassfactory2-class_2.h)]  \n  \n `CComClassFactory2` derives from both **CComClassFactory2Base** and *license*. **CComClassFactory2Base**, in turn, derives from **IClassFactory2** and **CComObjectRootEx\\< CComGlobalsThreadModel >**.  \n  \n## Inheritance Hierarchy  \n `CComObjectRootBase`  \n  \n `license`  \n  \n [CComObjectRootEx](../../atl/reference/ccomobjectrootex-class.md)  \n  \n `IClassFactory2`  \n  \n `CComClassFactory2`  \n  \n## Requirements  \n **Header:** atlcom.h  \n  \n##  <a name=\"ccomclassfactory2__createinstance\"></a>  CComClassFactory2::CreateInstance  \n Creates an object of the specified CLSID and retrieves an interface pointer to this object.  \n  \n```\nSTDMETHOD(CreateInstance)(LPUNKNOWN pUnkOuter,\n    REFIID riid,\n    void** ppvObj);\n```  \n  \n### Parameters  \n `pUnkOuter`  \n [in] If the object is being created as part of an aggregate, then `pUnkOuter` must be the outer unknown. Otherwise, `pUnkOuter` must be **NULL**.  \n  \n `riid`  \n [in] The IID of the requested interface. If `pUnkOuter` is non- **NULL**, `riid` must be **IID_IUnknown**.  \n  \n `ppvObj`  \n [out] A pointer to the interface pointer identified by `riid`. If the object does not support this interface, `ppvObj` is set to **NULL**.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n Requires the machine to be fully licensed. If a full machine license does not exist, call [CreateInstanceLic](#ccomclassfactory2__createinstancelic).  \n  \n##  <a name=\"ccomclassfactory2__createinstancelic\"></a>  CComClassFactory2::CreateInstanceLic  \n Similar to [CreateInstance](#ccomclassfactory2__createinstance), except that `CreateInstanceLic` requires a license key.  \n  \n```\nSTDMETHOD(CreateInstanceLic)(\n    IUnknown* pUnkOuter,\n    IUnknown* /* pUnkReserved\n */,\n    REFIID riid,\n    BSTR bstrKey,\n    void** ppvObject);\n```  \n  \n### Parameters  \n `pUnkOuter`  \n [in] If the object is being created as part of an aggregate, then `pUnkOuter` must be the outer unknown. Otherwise, `pUnkOuter` must be **NULL**.  \n  \n *pUnkReserved*  \n [in] Not used. Must be **NULL**.  \n  \n `riid`  \n [in] The IID of the requested interface. If `pUnkOuter` is non- **NULL**, `riid` must be **IID_IUnknown**.  \n  \n `bstrKey`  \n [in] The run-time license key previously obtained from a call to `RequestLicKey`. This key is required to create the object.  \n  \n `ppvObject`  \n [out] A pointer to the interface pointer specified by `riid`. If the object does not support this interface, `ppvObject` is set to **NULL**.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n You can obtain a license key using [RequestLicKey](#ccomclassfactory2__requestlickey). In order to create an object on an unlicensed machine, you must call `CreateInstanceLic`.  \n  \n##  <a name=\"ccomclassfactory2__getlicinfo\"></a>  CComClassFactory2::GetLicInfo  \n Fills a [LICINFO](http://msdn.microsoft.com/library/windows/desktop/ms690590) structure with information that describes the class factory's licensing capabilities.  \n  \n```\nSTDMETHOD(GetLicInfo)(LICINFO* pLicInfo);\n```  \n  \n### Parameters  \n *pLicInfo*  \n [out] Pointer to a **LICINFO** structure.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The `fRuntimeKeyAvail` member of this structure indicates whether, given a license key, the class factory allows objects to be created on an unlicensed machine. The *fLicVerified* member indicates whether a full machine license exists.  \n  \n##  <a name=\"ccomclassfactory2__lockserver\"></a>  CComClassFactory2::LockServer  \n Increments and decrements the module lock count by calling **_Module::Lock** and **_Module::Unlock**, respectively.  \n  \n```\nSTDMETHOD(LockServer)(BOOL fLock);\n```  \n  \n### Parameters  \n `fLock`  \n [in] If **TRUE**, the lock count is incremented; otherwise, the lock count is decremented.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n **_Module** refers to the global instance of [CComModule](../../atl/reference/ccommodule-class.md) or a class derived from it.  \n  \n Calling `LockServer` allows a client to hold onto a class factory so that multiple objects can be quickly created.  \n  \n##  <a name=\"ccomclassfactory2__requestlickey\"></a>  CComClassFactory2::RequestLicKey  \n Creates and returns a license key, provided that the `fRuntimeKeyAvail` member of the [LICINFO](http://msdn.microsoft.com/library/windows/desktop/ms690590) structure is **TRUE**.  \n  \n```\nSTDMETHOD(RequestLicKey)(DWORD dwReserved,\n    BSTR* pbstrKey);\n```  \n  \n### Parameters  \n `dwReserved`  \n [in] Not used. Must be zero.  \n  \n `pbstrKey`  \n [out] Pointer to the license key.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n A license key is required for calling [CreateInstanceLic](#ccomclassfactory2__createinstancelic) to create an object on an unlicensed machine. If `fRuntimeKeyAvail` is **FALSE**, then objects can only be created on a fully licensed machine.  \n  \n Call [GetLicInfo](#ccomclassfactory2__getlicinfo) to retrieve the value of `fRuntimeKeyAvail`.  \n  \n## See Also  \n [CComClassFactoryAutoThread Class](../../atl/reference/ccomclassfactoryautothread-class.md)   \n [CComClassFactorySingleton Class](../../atl/reference/ccomclassfactorysingleton-class.md)   \n [CComObjectRootEx Class](../../atl/reference/ccomobjectrootex-class.md)   \n [CComGlobalsThreadModel](atl-typedefs.md#ccomglobalsthreadmodel)   \n [Class Overview](../../atl/atl-class-overview.md)\n"}