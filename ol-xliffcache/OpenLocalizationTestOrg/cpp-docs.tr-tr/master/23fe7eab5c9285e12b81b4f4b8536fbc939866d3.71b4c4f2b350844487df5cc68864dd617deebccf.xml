{"nodes":[{"pos":[12,59],"content":"operator&gt; (stack) (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"operator<ph id=\"ph1\">&amp;gt;</ph> (stack) (STL-CLR) | Microsoft Docs","pos":[0,47],"source":"operator&gt; (stack) (STL-CLR) | Microsoft Docs"}]},{"content":"operator<ph id=\"ph1\">&amp;gt;</ph> (stack) (STL/CLR)","pos":[642,672],"source":"operator&gt; (stack) (STL/CLR)"},{"content":"Stack greater than comparison.","pos":[673,703]},{"content":"Syntax","pos":[712,718]},{"content":"Parameters","pos":[892,902]},{"content":"left","pos":[906,910]},{"content":"Left container to compare.","pos":[914,940]},{"content":"right","pos":[947,952]},{"content":"Right container to compare.","pos":[956,983]},{"content":"Remarks","pos":[992,999]},{"content":"The operator function returns <ph id=\"ph1\">`right`</ph> <ph id=\"ph2\">`&lt;`</ph> <ph id=\"ph3\">`left`</ph>.","pos":[1003,1052],"source":"The operator function returns `right` `<` `left`."},{"content":"You use it to test whether <ph id=\"ph1\">`left`</ph> is ordered after <ph id=\"ph2\">`right`</ph> when the two stacks are compared element by element.","pos":[1053,1164],"source":" You use it to test whether `left` is ordered after `right` when the two stacks are compared element by element."},{"content":"Example","pos":[1173,1180]},{"content":"Requirements","pos":[2208,2220]},{"pos":[2224,2251],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/stack&gt;","source":"**Header:** \\<cliext/stack>"},{"pos":[2258,2279],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2288,2296]},{"content":"stack (STL/CLR)","pos":[2301,2316]},{"content":"operator== (stack) (STL/CLR)","pos":[2351,2379]},{"content":"operator!= (stack) (STL/CLR)","pos":[2432,2460]},{"content":"operator<ph id=\"ph1\">\\&lt;</ph> (stack) (STL/CLR)","pos":[2515,2543],"source":"operator\\< (stack) (STL/CLR)"},{"content":"operator&gt;= (stack) (STL/CLR)","pos":[2597,2625],"source":"operator>= (stack) (STL/CLR)"},{"content":"operator&lt;= (stack) (STL/CLR)","pos":[2686,2714],"source":"operator<= (stack) (STL/CLR)"}],"content":"---\ntitle: \"operator&gt; (stack) (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::stack::operator>\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"operator> member [STL/CLR]\"\nms.assetid: 77979026-bed5-4d24-a2af-f720f8c362a2\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# operator&gt; (stack) (STL/CLR)\nStack greater than comparison.  \n  \n## Syntax  \n  \n```  \ntemplate<typename Value,  \n    typename Container>  \n    bool operator>(stack<Value, Container>% left,  \n        stack<Value, Container>% right);  \n```  \n  \n#### Parameters  \n left  \n Left container to compare.  \n  \n right  \n Right container to compare.  \n  \n## Remarks  \n The operator function returns `right` `<` `left`. You use it to test whether `left` is ordered after `right` when the two stacks are compared element by element.  \n  \n## Example  \n  \n```  \n// cliext_stack_operator_gt.cpp   \n// compile with: /clr   \n#include <cliext/stack>   \n  \ntypedef cliext::stack<wchar_t> Mystack;   \nint main()   \n    {   \n    Mystack c1;   \n    c1.push(L'a');   \n    c1.push(L'b');   \n    c1.push(L'c');   \n  \n// display contents \" a b c\"   \n    for each (wchar_t elem in c1.get_container())   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// assign to a new container   \n    Mystack c2;   \n    c2.push(L'a');   \n    c2.push(L'b');   \n    c2.push(L'd');   \n  \n// display contents \" a b d\"   \n    for each (wchar_t elem in c2.get_container())   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n    System::Console::WriteLine(\"[a b c] > [a b c] is {0}\",   \n        c1 > c1);   \n    System::Console::WriteLine(\"[a b d] > [a b c] is {0}\",   \n        c2 > c1);   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n a b c  \n a b d  \n[a b c] > [a b c] is False  \n[a b d] > [a b c] is True  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/stack>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [stack (STL/CLR)](../dotnet/stack-stl-clr.md)   \n [operator== (stack) (STL/CLR)](../dotnet/operator-equality-stack-stl-clr.md)   \n [operator!= (stack) (STL/CLR)](../dotnet/operator-inequality-stack-stl-clr.md)   \n [operator\\< (stack) (STL/CLR)](../dotnet/operator-less-than-stack-stl-clr.md)   \n [operator>= (stack) (STL/CLR)](../dotnet/operator-greater-or-equal-stack-stl-clr.md)   \n [operator<= (stack) (STL/CLR)](../dotnet/operator-less-or-equal-stack-stl-clr.md)"}