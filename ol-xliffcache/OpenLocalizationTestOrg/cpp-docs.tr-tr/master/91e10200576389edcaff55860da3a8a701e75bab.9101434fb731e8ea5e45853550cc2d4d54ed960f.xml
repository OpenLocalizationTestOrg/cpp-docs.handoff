{"nodes":[{"pos":[12,50],"content":"&lt;ios&gt; functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>ios<ph id=\"ph2\">&amp;gt;</ph> functions | Microsoft Docs","pos":[0,38],"source":"&lt;ios&gt; functions | Microsoft Docs"}]},{"pos":[253,274],"content":"&lt;ios&gt; functions","linkify":"&lt;ios&gt; functions","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>ios<ph id=\"ph2\">&amp;gt;</ph> functions","pos":[0,21],"source":"&lt;ios&gt; functions"}]},{"pos":[293,326],"content":"<bpt id=\"p1\">[</bpt>defaultfloat<ept id=\"p1\">](#ios_defaultfloat)</ept>","source":"[defaultfloat](#ios_defaultfloat)"},{"pos":[327,350],"content":"<bpt id=\"p1\">[</bpt>boolalpha<ept id=\"p1\">](#boolalpha)</ept>","source":"[boolalpha](#boolalpha)"},{"pos":[351,362],"content":"<bpt id=\"p1\">[</bpt>dec<ept id=\"p1\">](#dec)</ept>","source":"[dec](#dec)"},{"pos":[367,382],"content":"<bpt id=\"p1\">[</bpt>fixed<ept id=\"p1\">](#fixed)</ept>","source":"[fixed](#fixed)"},{"pos":[383,394],"content":"<bpt id=\"p1\">[</bpt>hex<ept id=\"p1\">](#hex)</ept>","source":"[hex](#hex)"},{"pos":[395,416],"content":"<bpt id=\"p1\">[</bpt>internal<ept id=\"p1\">](#internal)</ept>","source":"[internal](#internal)"},{"pos":[421,434],"content":"<bpt id=\"p1\">[</bpt>left<ept id=\"p1\">](#left)</ept>","source":"[left](#left)"},{"pos":[435,462],"content":"<bpt id=\"p1\">[</bpt>noboolalpha<ept id=\"p1\">](#noboolalpha)</ept>","source":"[noboolalpha](#noboolalpha)"},{"pos":[463,488],"content":"<bpt id=\"p1\">[</bpt>noshowbase<ept id=\"p1\">](#noshowbase)</ept>","source":"[noshowbase](#noshowbase)"},{"pos":[493,520],"content":"<bpt id=\"p1\">[</bpt>noshowpoint<ept id=\"p1\">](#noshowpoint)</ept>","source":"[noshowpoint](#noshowpoint)"},{"pos":[521,544],"content":"<bpt id=\"p1\">[</bpt>noshowpos<ept id=\"p1\">](#noshowpos)</ept>","source":"[noshowpos](#noshowpos)"},{"pos":[545,566],"content":"<bpt id=\"p1\">[</bpt>noskipws<ept id=\"p1\">](#noskipws)</ept>","source":"[noskipws](#noskipws)"},{"pos":[571,594],"content":"<bpt id=\"p1\">[</bpt>nounitbuf<ept id=\"p1\">](#nounitbuf)</ept>","source":"[nounitbuf](#nounitbuf)"},{"pos":[595,622],"content":"<bpt id=\"p1\">[</bpt>nouppercase<ept id=\"p1\">](#nouppercase)</ept>","source":"[nouppercase](#nouppercase)"},{"pos":[623,634],"content":"<bpt id=\"p1\">[</bpt>oct<ept id=\"p1\">](#oct)</ept>","source":"[oct](#oct)"},{"pos":[639,654],"content":"<bpt id=\"p1\">[</bpt>right<ept id=\"p1\">](#right)</ept>","source":"[right](#right)"},{"pos":[655,680],"content":"<bpt id=\"p1\">[</bpt>scientific<ept id=\"p1\">](#scientific)</ept>","source":"[scientific](#scientific)"},{"pos":[681,702],"content":"<bpt id=\"p1\">[</bpt>showbase<ept id=\"p1\">](#showbase)</ept>","source":"[showbase](#showbase)"},{"pos":[707,730],"content":"<bpt id=\"p1\">[</bpt>showpoint<ept id=\"p1\">](#showpoint)</ept>","source":"[showpoint](#showpoint)"},{"pos":[731,750],"content":"<bpt id=\"p1\">[</bpt>showpos<ept id=\"p1\">](#showpos)</ept>","source":"[showpos](#showpos)"},{"pos":[751,768],"content":"<bpt id=\"p1\">[</bpt>skipws<ept id=\"p1\">](#skipws)</ept>","source":"[skipws](#skipws)"},{"pos":[773,792],"content":"<bpt id=\"p1\">[</bpt>unitbuf<ept id=\"p1\">](#unitbuf)</ept>","source":"[unitbuf](#unitbuf)"},{"pos":[793,816],"content":"<bpt id=\"p1\">[</bpt>uppercase<ept id=\"p1\">](#uppercase)</ept>","source":"[uppercase](#uppercase)"},{"pos":[827,862],"content":"<bpt id=\"p1\">&lt;a name=\"boolalpha\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  boolalpha","linkify":"<a name=\"boolalpha\"></a>  boolalpha","source":"<a name=\"boolalpha\"></a>  boolalpha"},{"pos":[866,972],"content":"Specifies that variables of type <bpt id=\"p1\">[</bpt>bool<ept id=\"p1\">](../cpp/bool-cpp.md)</ept> appear as <bpt id=\"p2\">**</bpt>true<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>false<ept id=\"p3\">**</ept> in the stream.","source":"Specifies that variables of type [bool](../cpp/bool-cpp.md) appear as **true** or **false** in the stream."},{"pos":[1033,1043],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to an object of type <bpt id=\"p1\">[</bpt>ios_base<ept id=\"p1\">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id=\"ph1\">`ios_base`</ph>.","pos":[1057,1184],"source":" A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`."},{"pos":[1194,1206],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[1210,1266],"content":"A reference to the object from which _ <bpt id=\"p1\">*</bpt>Str<ept id=\"p1\">*</ept> is derived.","source":"A reference to the object from which _ *Str* is derived."},{"pos":[1276,1283],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1287,1348],"content":"By default, variables of type <ph id=\"ph1\">`bool`</ph> are displayed as 1 or 0.","source":"By default, variables of type `bool` are displayed as 1 or 0."},{"pos":[1355,1502],"content":"<ph id=\"ph1\">`boolalpha`</ph> effectively calls <ph id=\"ph2\">` str.`</ph><bpt id=\"p1\">[</bpt>setf<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <ph id=\"ph3\">`ios_base::boolalpha`</ph>), and then returns <ph id=\"ph4\">` str.`</ph>","source":"`boolalpha` effectively calls ` str.`[setf](../standard-library/ios-base-class.md#ios_base__setf)( `ios_base::boolalpha`), and then returns ` str.`"},{"pos":[1509,1608],"content":"<bpt id=\"p1\">[</bpt>noboolalpha<ept id=\"p1\">](../standard-library/ios-functions.md#noboolalpha)</ept> reverses the effect of <ph id=\"ph1\">`boolalpha`</ph>.","source":"[noboolalpha](../standard-library/ios-functions.md#noboolalpha) reverses the effect of `boolalpha`."},{"pos":[1618,1625],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1997,2020],"content":"<bpt id=\"p1\">&lt;a name=\"dec\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  dec","linkify":"<a name=\"dec\"></a>  dec","source":"<a name=\"dec\"></a>  dec"},{"content":"Specifies that integer variables appear in base 10 notation.","pos":[2024,2084]},{"pos":[2139,2149],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to an object of type <bpt id=\"p1\">[</bpt>ios_base<ept id=\"p1\">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id=\"ph1\">`ios_base`</ph>.","pos":[2163,2290],"source":" A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`."},{"pos":[2300,2312],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[2316,2372],"content":"A reference to the object from which _ <bpt id=\"p1\">*</bpt>Str<ept id=\"p1\">*</ept> is derived.","source":"A reference to the object from which _ *Str* is derived."},{"pos":[2382,2389],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, integer variables are displayed in base 10.","pos":[2393,2448]},{"pos":[2455,2619],"content":"<bpt id=\"p1\">**</bpt>dec<ept id=\"p1\">**</ept> effectively calls <ph id=\"ph1\">` str``.`</ph><bpt id=\"p2\">[</bpt>setf<ept id=\"p2\">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <ph id=\"ph2\">`ios_base::dec`</ph><bpt id=\"p3\">**</bpt>, ios_base::basefield<ept id=\"p3\">**</ept>), and then returns <ph id=\"ph3\">` str`</ph>.","source":"**dec** effectively calls ` str``.`[setf](../standard-library/ios-base-class.md#ios_base__setf)( `ios_base::dec`**, ios_base::basefield**), and then returns ` str`."},{"pos":[2629,2636],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3048,3105],"content":"<bpt id=\"p1\">&lt;a name=\"ios_defaultfloat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  <ph id=\"ph1\">&amp;lt;</ph>ios<ph id=\"ph2\">&amp;gt;</ph> defaultfloat","linkify":"<a name=\"ios_defaultfloat\"></a>  &lt;ios&gt; defaultfloat","source":"<a name=\"ios_defaultfloat\"></a>  &lt;ios&gt; defaultfloat"},{"pos":[3109,3203],"content":"Configures the flags of an <ph id=\"ph1\">`ios_base`</ph> object to use a default display format for float values.","source":"Configures the flags of an `ios_base` object to use a default display format for float values."},{"pos":[3272,3282],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An <ph id=\"ph1\">`ios_base`</ph> object.","pos":[3300,3321],"source":" An `ios_base` object."},{"pos":[3331,3338],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3342,3513],"content":"The manipulator effectively calls _I <ph id=\"ph1\">`osbase.`</ph><bpt id=\"p1\">[</bpt>ios_base::unsetf<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__unsetf)</ept><ph id=\"ph2\">`(ios_base::floatfield)`</ph>, then returns _I <ph id=\"ph3\">`osbase`</ph>.","source":"The manipulator effectively calls _I `osbase.`[ios_base::unsetf](../standard-library/ios-base-class.md#ios_base__unsetf)`(ios_base::floatfield)`, then returns _I `osbase`."},{"pos":[3523,3550],"content":"<bpt id=\"p1\">&lt;a name=\"fixed\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  fixed","linkify":"<a name=\"fixed\"></a>  fixed","source":"<a name=\"fixed\"></a>  fixed"},{"content":"Specifies that a floating-point number is displayed in fixed-decimal notation.","pos":[3554,3632]},{"pos":[3689,3699],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to an object of type <bpt id=\"p1\">[</bpt>ios_base<ept id=\"p1\">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id=\"ph1\">`ios_base`</ph>.","pos":[3713,3840],"source":" A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`."},{"pos":[3850,3862],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3866,3922],"content":"A reference to the object from which _ <bpt id=\"p1\">*</bpt>Str<ept id=\"p1\">*</ept> is derived.","source":"A reference to the object from which _ *Str* is derived."},{"pos":[3932,3939],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<bpt id=\"p1\">**</bpt>fixed<ept id=\"p1\">**</ept> is the default display notation for floating-point numbers.","pos":[3943,4012],"source":"**fixed** is the default display notation for floating-point numbers."},{"content":"<bpt id=\"p1\">[</bpt>scientific<ept id=\"p1\">](../standard-library/ios-functions.md#scientific)</ept> causes floating-point numbers to be displayed using scientific notation.","pos":[4013,4147],"source":"[scientific](../standard-library/ios-functions.md#scientific) causes floating-point numbers to be displayed using scientific notation."},{"pos":[4154,4327],"content":"The manipulator effectively calls <bpt id=\"p1\">*</bpt> str.<ept id=\"p1\">*</ept><bpt id=\"p2\">[</bpt>setf<ept id=\"p2\">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <ph id=\"ph1\">`ios_base::fixed`</ph>, <bpt id=\"p3\">**</bpt>ios_base::floatfield<ept id=\"p3\">**</ept>), and then returns <ph id=\"ph2\">` str`</ph>.","source":"The manipulator effectively calls * str.*[setf](../standard-library/ios-base-class.md#ios_base__setf)( `ios_base::fixed`, **ios_base::floatfield**), and then returns ` str`."},{"pos":[4337,4344],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4710,4733],"content":"<bpt id=\"p1\">&lt;a name=\"hex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hex","linkify":"<a name=\"hex\"></a>  hex","source":"<a name=\"hex\"></a>  hex"},{"content":"Specifies that integer variables shall appear in base 16 notation.","pos":[4737,4803]},{"pos":[4858,4868],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to an object of type <bpt id=\"p1\">[</bpt>ios_base<ept id=\"p1\">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id=\"ph1\">`ios_base`</ph>.","pos":[4882,5009],"source":" A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`."},{"pos":[5019,5031],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5035,5091],"content":"A reference to the object from which _ <bpt id=\"p1\">*</bpt>Str<ept id=\"p1\">*</ept> is derived.","source":"A reference to the object from which _ *Str* is derived."},{"pos":[5101,5108],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, integer variables are displayed in base 10 notation.","pos":[5112,5176]},{"content":"<bpt id=\"p1\">[</bpt>dec<ept id=\"p1\">](../standard-library/ios-functions.md#dec)</ept> and <bpt id=\"p2\">[</bpt>oct<ept id=\"p2\">](../standard-library/ios-functions.md#oct)</ept> also change the way integer variables appear.","pos":[5177,5322],"source":"[dec](../standard-library/ios-functions.md#dec) and [oct](../standard-library/ios-functions.md#oct) also change the way integer variables appear."},{"pos":[5329,5503],"content":"The manipulator effectively calls <ph id=\"ph1\">` str`</ph><bpt id=\"p1\">**</bpt>.<ept id=\"p1\">**</ept><bpt id=\"p2\">[</bpt>setf<ept id=\"p2\">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <ph id=\"ph2\">`ios_base::hex`</ph>, <bpt id=\"p3\">**</bpt>ios_base::basefield<ept id=\"p3\">**</ept>), and then returns <ph id=\"ph3\">` str`</ph>.","source":"The manipulator effectively calls ` str`**.**[setf](../standard-library/ios-base-class.md#ios_base__setf)( `ios_base::hex`, **ios_base::basefield**), and then returns ` str`."},{"pos":[5513,5520],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5525,5614],"content":"See <bpt id=\"p1\">[</bpt>dec<ept id=\"p1\">](../standard-library/ios-functions.md#dec)</ept> for an example of how to use <bpt id=\"p2\">**</bpt>hex<ept id=\"p2\">**</ept>.","source":"See [dec](../standard-library/ios-functions.md#dec) for an example of how to use **hex**."},{"pos":[5624,5657],"content":"<bpt id=\"p1\">&lt;a name=\"internal\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  internal","linkify":"<a name=\"internal\"></a>  internal","source":"<a name=\"internal\"></a>  internal"},{"content":"Causes a number's sign to be left justified and the number to be right justified.","pos":[5661,5742]},{"pos":[5802,5812],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to an object of type <bpt id=\"p1\">[</bpt>ios_base<ept id=\"p1\">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id=\"ph1\">`ios_base`</ph>.","pos":[5826,5953],"source":" A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`."},{"pos":[5963,5975],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5979,6034],"content":"A reference to the object from which <ph id=\"ph1\">` str`</ph> is derived.","source":"A reference to the object from which ` str` is derived."},{"pos":[6044,6051],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6055,6159],"content":"<bpt id=\"p1\">[</bpt>showpos<ept id=\"p1\">](../standard-library/ios-functions.md#showpos)</ept> causes the sign to display for positive numbers.","source":"[showpos](../standard-library/ios-functions.md#showpos) causes the sign to display for positive numbers."},{"content":"The manipulator effectively calls <ph id=\"ph1\">` str`</ph>.","pos":[6166,6207],"source":"The manipulator effectively calls ` str`."},{"content":"<bpt id=\"p1\">[</bpt>setf<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <bpt id=\"p2\">[</bpt>ios_base::internal<ept id=\"p2\">](../standard-library/ios-base-class.md#ios_base__fmtflags)</ept>, <bpt id=\"p3\">[</bpt>ios_base::adjustfield<ept id=\"p3\">](../standard-library/ios-base-class.md#ios_base__fmtflags)</ept>), and then returns <ph id=\"ph1\">` str`</ph>.","pos":[6208,6458],"source":"[setf](../standard-library/ios-base-class.md#ios_base__setf)( [ios_base::internal](../standard-library/ios-base-class.md#ios_base__fmtflags), [ios_base::adjustfield](../standard-library/ios-base-class.md#ios_base__fmtflags)), and then returns ` str`."},{"pos":[6468,6475],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6834,6859],"content":"<bpt id=\"p1\">&lt;a name=\"left\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  left","linkify":"<a name=\"left\"></a>  left","source":"<a name=\"left\"></a>  left"},{"content":"Causes text that is not as wide as the output width to appear in the stream flush with the left margin.","pos":[6863,6966]},{"pos":[7022,7032],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to an object of type <bpt id=\"p1\">[</bpt>ios_base<ept id=\"p1\">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id=\"ph1\">`ios_base`</ph>.","pos":[7046,7173],"source":" A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`."},{"pos":[7183,7195],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7199,7255],"content":"A reference to the object from which _ <bpt id=\"p1\">*</bpt>Str<ept id=\"p1\">*</ept> is derived.","source":"A reference to the object from which _ *Str* is derived."},{"pos":[7265,7272],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7276,7449],"content":"The manipulator effectively calls <ph id=\"ph1\">` str.`</ph><bpt id=\"p1\">[</bpt>setf<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <ph id=\"ph2\">`ios_base::left`</ph>, <bpt id=\"p2\">**</bpt>ios_base::adjustfield<ept id=\"p2\">**</ept>), and then returns <ph id=\"ph3\">` str`</ph>.","source":"The manipulator effectively calls ` str.`[setf](../standard-library/ios-base-class.md#ios_base__setf)( `ios_base::left`, **ios_base::adjustfield**), and then returns ` str`."},{"pos":[7459,7466],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7763,7802],"content":"<bpt id=\"p1\">&lt;a name=\"noboolalpha\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  noboolalpha","linkify":"<a name=\"noboolalpha\"></a>  noboolalpha","source":"<a name=\"noboolalpha\"></a>  noboolalpha"},{"pos":[7806,7897],"content":"Specifies that variables of type <bpt id=\"p1\">[</bpt>bool<ept id=\"p1\">](../cpp/bool-cpp.md)</ept> appear as 1 or 0 in the stream.","source":"Specifies that variables of type [bool](../cpp/bool-cpp.md) appear as 1 or 0 in the stream."},{"pos":[7960,7970],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to an object of type <bpt id=\"p1\">[</bpt>ios_base<ept id=\"p1\">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id=\"ph1\">`ios_base`</ph>.","pos":[7984,8111],"source":" A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`."},{"pos":[8121,8133],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8137,8193],"content":"A reference to the object from which _ <bpt id=\"p1\">*</bpt>Str<ept id=\"p1\">*</ept> is derived.","source":"A reference to the object from which _ *Str* is derived."},{"pos":[8203,8210],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8214,8253],"content":"By default, <ph id=\"ph1\">`noboolalpha`</ph> is in effect.","source":"By default, `noboolalpha` is in effect."},{"pos":[8260,8413],"content":"<ph id=\"ph1\">`noboolalpha`</ph> effectively calls <ph id=\"ph2\">` str.`</ph><bpt id=\"p1\">[</bpt>unsetf<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__unsetf)</ept>( <ph id=\"ph3\">`ios_base::boolalpha`</ph>), and then returns <ph id=\"ph4\">` str`</ph>.","source":"`noboolalpha` effectively calls ` str.`[unsetf](../standard-library/ios-base-class.md#ios_base__unsetf)( `ios_base::boolalpha`), and then returns ` str`."},{"pos":[8420,8517],"content":"<bpt id=\"p1\">[</bpt>boolalpha<ept id=\"p1\">](../standard-library/ios-functions.md#boolalpha)</ept> reverses the effect of <ph id=\"ph1\">`noboolalpha`</ph>.","source":"[boolalpha](../standard-library/ios-functions.md#boolalpha) reverses the effect of `noboolalpha`."},{"pos":[8527,8534],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8539,8641],"content":"See <bpt id=\"p1\">[</bpt>boolalpha<ept id=\"p1\">](../standard-library/ios-functions.md#boolalpha)</ept> for an example of using <ph id=\"ph1\">`noboolalpha`</ph>.","source":"See [boolalpha](../standard-library/ios-functions.md#boolalpha) for an example of using `noboolalpha`."},{"pos":[8651,8688],"content":"<bpt id=\"p1\">&lt;a name=\"noshowbase\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  noshowbase","linkify":"<a name=\"noshowbase\"></a>  noshowbase","source":"<a name=\"noshowbase\"></a>  noshowbase"},{"content":"Turns off indicating the notational base in which a number is displayed.","pos":[8692,8764]},{"pos":[8826,8836],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to an object of type <bpt id=\"p1\">[</bpt>ios_base<ept id=\"p1\">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id=\"ph1\">`ios_base`</ph>.","pos":[8850,8977],"source":" A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`."},{"pos":[8987,8999],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[9003,9059],"content":"A reference to the object from which _ <bpt id=\"p1\">*</bpt>Str<ept id=\"p1\">*</ept> is derived.","source":"A reference to the object from which _ *Str* is derived."},{"pos":[9069,9076],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`noshowbase`</ph> is on by default.","pos":[9080,9110],"source":"`noshowbase` is on by default."},{"content":"Use <bpt id=\"p1\">[</bpt>showbase<ept id=\"p1\">](../standard-library/ios-functions.md#showbase)</ept> to indicate the notational base of numbers.","pos":[9111,9216],"source":" Use [showbase](../standard-library/ios-functions.md#showbase) to indicate the notational base of numbers."},{"pos":[9223,9377],"content":"The manipulator effectively calls <ph id=\"ph1\">` str.`</ph><bpt id=\"p1\">[</bpt>unsetf<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__unsetf)</ept>( <ph id=\"ph2\">`ios_base::showbase`</ph>), and then returns <ph id=\"ph3\">` str`</ph>.","source":"The manipulator effectively calls ` str.`[unsetf](../standard-library/ios-base-class.md#ios_base__unsetf)( `ios_base::showbase`), and then returns ` str`."},{"pos":[9387,9394],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9399,9503],"content":"See <bpt id=\"p1\">[</bpt>showbase<ept id=\"p1\">](../standard-library/ios-functions.md#showbase)</ept> for an example of how to use <ph id=\"ph1\">`noshowbase`</ph>.","source":"See [showbase](../standard-library/ios-functions.md#showbase) for an example of how to use `noshowbase`."},{"pos":[9513,9552],"content":"<bpt id=\"p1\">&lt;a name=\"noshowpoint\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  noshowpoint","linkify":"<a name=\"noshowpoint\"></a>  noshowpoint","source":"<a name=\"noshowpoint\"></a>  noshowpoint"},{"content":"Displays only the whole-number part of floating-point numbers whose fractional part is zero.","pos":[9556,9648]},{"pos":[9711,9721],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to an object of type <bpt id=\"p1\">[</bpt>ios_base<ept id=\"p1\">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id=\"ph1\">`ios_base`</ph>.","pos":[9735,9862],"source":" A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`."},{"pos":[9872,9884],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[9888,9944],"content":"A reference to the object from which _ <bpt id=\"p1\">*</bpt>Str<ept id=\"p1\">*</ept> is derived.","source":"A reference to the object from which _ *Str* is derived."},{"pos":[9954,9961],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9965,10177],"content":"<ph id=\"ph1\">`noshowpoint`</ph> is on by default; use <bpt id=\"p1\">[</bpt>showpoint<ept id=\"p1\">](../standard-library/ios-functions.md#showpoint)</ept> and <bpt id=\"p2\">[</bpt>precision<ept id=\"p2\">](../standard-library/ios-base-class.md#ios_base__precision)</ept> to display zeros after the decimal point.","source":"`noshowpoint` is on by default; use [showpoint](../standard-library/ios-functions.md#showpoint) and [precision](../standard-library/ios-base-class.md#ios_base__precision) to display zeros after the decimal point."},{"pos":[10184,10339],"content":"The manipulator effectively calls <ph id=\"ph1\">` str.`</ph><bpt id=\"p1\">[</bpt>unsetf<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__unsetf)</ept>( <ph id=\"ph2\">`ios_base::showpoint`</ph>), and then returns <ph id=\"ph3\">` str`</ph>.","source":"The manipulator effectively calls ` str.`[unsetf](../standard-library/ios-base-class.md#ios_base__unsetf)( `ios_base::showpoint`), and then returns ` str`."},{"pos":[10349,10356],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10725,10760],"content":"<bpt id=\"p1\">&lt;a name=\"noshowpos\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  noshowpos","linkify":"<a name=\"noshowpos\"></a>  noshowpos","source":"<a name=\"noshowpos\"></a>  noshowpos"},{"content":"Causes positive numbers to not be explicitly signed.","pos":[10764,10816]},{"pos":[10877,10887],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to an object of type <bpt id=\"p1\">[</bpt>ios_base<ept id=\"p1\">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id=\"ph1\">`ios_base`</ph>.","pos":[10901,11028],"source":" A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`."},{"pos":[11038,11050],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[11054,11110],"content":"A reference to the object from which _ <bpt id=\"p1\">*</bpt>Str<ept id=\"p1\">*</ept> is derived.","source":"A reference to the object from which _ *Str* is derived."},{"pos":[11120,11127],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11131,11160],"content":"<ph id=\"ph1\">`noshowpos`</ph> is on by default.","source":"`noshowpos` is on by default."},{"pos":[11167,11315],"content":"The manipulator effectively calls <ph id=\"ph1\">` str.`</ph><bpt id=\"p1\">[</bpt>unsetf<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__unsetf)</ept>( <ph id=\"ph2\">`ios_base::showps`</ph>), then returns <ph id=\"ph3\">` str`</ph>.","source":"The manipulator effectively calls ` str.`[unsetf](../standard-library/ios-base-class.md#ios_base__unsetf)( `ios_base::showps`), then returns ` str`."},{"pos":[11325,11332],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11337,11433],"content":"See <bpt id=\"p1\">[</bpt>showpos<ept id=\"p1\">](../standard-library/ios-functions.md#showpos)</ept> for an example of using <ph id=\"ph1\">`noshowpos`</ph>.","source":"See [showpos](../standard-library/ios-functions.md#showpos) for an example of using `noshowpos`."},{"pos":[11443,11476],"content":"<bpt id=\"p1\">&lt;a name=\"noskipws\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  noskipws","linkify":"<a name=\"noskipws\"></a>  noskipws","source":"<a name=\"noskipws\"></a>  noskipws"},{"content":"Cause spaces to be read by the input stream.","pos":[11480,11524]},{"pos":[11584,11594],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to an object of type <bpt id=\"p1\">[</bpt>ios_base<ept id=\"p1\">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id=\"ph1\">`ios_base`</ph>.","pos":[11608,11735],"source":" A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`."},{"pos":[11745,11757],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[11761,11817],"content":"A reference to the object from which _ <bpt id=\"p1\">*</bpt>Str<ept id=\"p1\">*</ept> is derived.","source":"A reference to the object from which _ *Str* is derived."},{"pos":[11827,11834],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, <bpt id=\"p1\">[</bpt>skipws<ept id=\"p1\">](../standard-library/ios-functions.md#skipws)</ept> is in effect.","pos":[11838,11917],"source":"By default, [skipws](../standard-library/ios-functions.md#skipws) is in effect."},{"content":"When a space is read in the input stream, it signals the end of the buffer.","pos":[11918,11993]},{"pos":[12000,12152],"content":"The manipulator effectively calls <ph id=\"ph1\">` str.`</ph><bpt id=\"p1\">[</bpt>unsetf<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__unsetf)</ept>( <ph id=\"ph2\">`ios_base::skipws`</ph>), and then returns <ph id=\"ph3\">` str`</ph>.","source":"The manipulator effectively calls ` str.`[unsetf](../standard-library/ios-base-class.md#ios_base__unsetf)( `ios_base::skipws`), and then returns ` str`."},{"pos":[12162,12169],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12560,12595],"content":"<bpt id=\"p1\">&lt;a name=\"nounitbuf\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  nounitbuf","linkify":"<a name=\"nounitbuf\"></a>  nounitbuf","source":"<a name=\"nounitbuf\"></a>  nounitbuf"},{"content":"Causes output to be buffered and processed on when the buffer is full.","pos":[12599,12669]},{"pos":[12730,12740],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to an object of type <bpt id=\"p1\">[</bpt>ios_base<ept id=\"p1\">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id=\"ph1\">`ios_base`</ph>.","pos":[12754,12881],"source":" A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`."},{"pos":[12891,12903],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[12907,12963],"content":"A reference to the object from which _ <bpt id=\"p1\">*</bpt>Str<ept id=\"p1\">*</ept> is derived.","source":"A reference to the object from which _ *Str* is derived."},{"pos":[12973,12980],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12984,13095],"content":"<bpt id=\"p1\">[</bpt>unitbuf<ept id=\"p1\">](../standard-library/ios-functions.md#unitbuf)</ept> causes the buffer to be processed when it is not empty.","source":"[unitbuf](../standard-library/ios-functions.md#unitbuf) causes the buffer to be processed when it is not empty."},{"pos":[13102,13255],"content":"The manipulator effectively calls <ph id=\"ph1\">` str.`</ph><bpt id=\"p1\">[</bpt>unsetf<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__unsetf)</ept>( <ph id=\"ph2\">`ios_base::unitbuf`</ph>), and then returns <ph id=\"ph3\">` str`</ph>.","source":"The manipulator effectively calls ` str.`[unsetf](../standard-library/ios-base-class.md#ios_base__unsetf)( `ios_base::unitbuf`), and then returns ` str`."},{"pos":[13265,13304],"content":"<bpt id=\"p1\">&lt;a name=\"nouppercase\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  nouppercase","linkify":"<a name=\"nouppercase\"></a>  nouppercase","source":"<a name=\"nouppercase\"></a>  nouppercase"},{"content":"Specifies that hexadecimal digits and the exponent in scientific notation appear in lowercase.","pos":[13308,13402]},{"pos":[13465,13475],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to an object of type <bpt id=\"p1\">[</bpt>ios_base<ept id=\"p1\">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id=\"ph1\">`ios_base`</ph>.","pos":[13489,13616],"source":" A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`."},{"pos":[13626,13638],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[13642,13698],"content":"A reference to the object from which _ <bpt id=\"p1\">*</bpt>Str<ept id=\"p1\">*</ept> is derived.","source":"A reference to the object from which _ *Str* is derived."},{"pos":[13708,13715],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[13719,13874],"content":"The manipulator effectively calls <ph id=\"ph1\">` str.`</ph><bpt id=\"p1\">[</bpt>unsetf<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__unsetf)</ept>( <ph id=\"ph2\">`ios_base::uppercase`</ph>), and then returns <ph id=\"ph3\">` str`</ph>.","source":"The manipulator effectively calls ` str.`[unsetf](../standard-library/ios-base-class.md#ios_base__unsetf)( `ios_base::uppercase`), and then returns ` str`."},{"pos":[13884,13891],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13896,13998],"content":"See <bpt id=\"p1\">[</bpt>uppercase<ept id=\"p1\">](../standard-library/ios-functions.md#uppercase)</ept> for an example of using <ph id=\"ph1\">`nouppercase`</ph>.","source":"See [uppercase](../standard-library/ios-functions.md#uppercase) for an example of using `nouppercase`."},{"pos":[14008,14031],"content":"<bpt id=\"p1\">&lt;a name=\"oct\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  oct","linkify":"<a name=\"oct\"></a>  oct","source":"<a name=\"oct\"></a>  oct"},{"content":"Specifies that integer variables appear in base 8 notation.","pos":[14035,14094]},{"pos":[14149,14159],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to an object of type <bpt id=\"p1\">[</bpt>ios_base<ept id=\"p1\">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id=\"ph1\">`ios_base`</ph>.","pos":[14173,14300],"source":" A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`."},{"pos":[14310,14322],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[14326,14382],"content":"A reference to the object from which _ <bpt id=\"p1\">*</bpt>Str<ept id=\"p1\">*</ept> is derived.","source":"A reference to the object from which _ *Str* is derived."},{"pos":[14392,14399],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, integer variables are displayed in base 10 notation.","pos":[14403,14467]},{"content":"<bpt id=\"p1\">[</bpt>dec<ept id=\"p1\">](../standard-library/ios-functions.md#dec)</ept> and <bpt id=\"p2\">[</bpt>hex<ept id=\"p2\">](../standard-library/ios-functions.md#hex)</ept> also change the way integer variables appear.","pos":[14468,14613],"source":"[dec](../standard-library/ios-functions.md#dec) and [hex](../standard-library/ios-functions.md#hex) also change the way integer variables appear."},{"pos":[14620,14788],"content":"The manipulator effectively calls <ph id=\"ph1\">` str.`</ph><bpt id=\"p1\">[</bpt>setf<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <ph id=\"ph2\">`ios_base::oct`</ph>, <ph id=\"ph3\">`ios_base::basefield`</ph>), and then returns <ph id=\"ph4\">` str`</ph>.","source":"The manipulator effectively calls ` str.`[setf](../standard-library/ios-base-class.md#ios_base__setf)( `ios_base::oct`, `ios_base::basefield`), and then returns ` str`."},{"pos":[14798,14805],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[14810,14899],"content":"See <bpt id=\"p1\">[</bpt>dec<ept id=\"p1\">](../standard-library/ios-functions.md#dec)</ept> for an example of how to use <bpt id=\"p2\">**</bpt>oct<ept id=\"p2\">**</ept>.","source":"See [dec](../standard-library/ios-functions.md#dec) for an example of how to use **oct**."},{"pos":[14909,14936],"content":"<bpt id=\"p1\">&lt;a name=\"right\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  right","linkify":"<a name=\"right\"></a>  right","source":"<a name=\"right\"></a>  right"},{"content":"Causes text that is not as wide as the output width to appear in the stream flush with the right margin.","pos":[14940,15044]},{"pos":[15101,15111],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to an object of type <bpt id=\"p1\">[</bpt>ios_base<ept id=\"p1\">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id=\"ph1\">`ios_base`</ph>.","pos":[15125,15252],"source":" A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`."},{"pos":[15262,15274],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[15278,15334],"content":"A reference to the object from which _ <bpt id=\"p1\">*</bpt>Str<ept id=\"p1\">*</ept> is derived.","source":"A reference to the object from which _ *Str* is derived."},{"pos":[15344,15351],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[15355,15445],"content":"<bpt id=\"p1\">[</bpt>left<ept id=\"p1\">](../standard-library/ios-functions.md#left)</ept> also modifies the justification of text.","source":"[left](../standard-library/ios-functions.md#left) also modifies the justification of text."},{"pos":[15452,15624],"content":"The manipulator effectively calls <ph id=\"ph1\">` str.`</ph><bpt id=\"p1\">[</bpt>setf<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <ph id=\"ph2\">`ios_base::right`</ph>, <ph id=\"ph3\">`ios_base::adjustfield`</ph>), and then returns <ph id=\"ph4\">` str`</ph>.","source":"The manipulator effectively calls ` str.`[setf](../standard-library/ios-base-class.md#ios_base__setf)( `ios_base::right`, `ios_base::adjustfield`), and then returns ` str`."},{"pos":[15634,15641],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[16231,16268],"content":"<bpt id=\"p1\">&lt;a name=\"scientific\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  scientific","linkify":"<a name=\"scientific\"></a>  scientific","source":"<a name=\"scientific\"></a>  scientific"},{"content":"Causes floating-point numbers to be displayed using scientific notation.","pos":[16272,16344]},{"pos":[16406,16416],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to an object of type <bpt id=\"p1\">[</bpt>ios_base<ept id=\"p1\">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id=\"ph1\">`ios_base`</ph>.","pos":[16430,16557],"source":" A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`."},{"pos":[16567,16579],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16583,16639],"content":"A reference to the object from which _ <bpt id=\"p1\">*</bpt>Str<ept id=\"p1\">*</ept> is derived.","source":"A reference to the object from which _ *Str* is derived."},{"pos":[16649,16656],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[16660,16773],"content":"By default, <bpt id=\"p1\">[</bpt>fixed<ept id=\"p1\">](../standard-library/ios-functions.md#fixed)</ept> notation is in effect for floating-point numbers.","source":"By default, [fixed](../standard-library/ios-functions.md#fixed) notation is in effect for floating-point numbers."},{"pos":[16780,16956],"content":"The manipulator effectively calls <ph id=\"ph1\">` str.`</ph><bpt id=\"p1\">[</bpt>setf<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <ph id=\"ph2\">`ios_base::scientific`</ph>, <ph id=\"ph3\">`ios_base::floatfield`</ph>), and then returns <ph id=\"ph4\">` str`</ph>.","source":"The manipulator effectively calls ` str.`[setf](../standard-library/ios-base-class.md#ios_base__setf)( `ios_base::scientific`, `ios_base::floatfield`), and then returns ` str`."},{"pos":[16966,16973],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[17259,17292],"content":"<bpt id=\"p1\">&lt;a name=\"showbase\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  showbase","linkify":"<a name=\"showbase\"></a>  showbase","source":"<a name=\"showbase\"></a>  showbase"},{"content":"Indicates the notational base in which a number is displayed.","pos":[17296,17357]},{"pos":[17417,17427],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to an object of type <bpt id=\"p1\">[</bpt>ios_base<ept id=\"p1\">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id=\"ph1\">`ios_base`</ph>.","pos":[17441,17568],"source":" A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`."},{"pos":[17578,17590],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[17594,17650],"content":"A reference to the object from which _ <bpt id=\"p1\">*</bpt>Str<ept id=\"p1\">*</ept> is derived.","source":"A reference to the object from which _ *Str* is derived."},{"pos":[17660,17667],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17671,17872],"content":"The notational base of a number can be changed with <bpt id=\"p1\">[</bpt>dec<ept id=\"p1\">](../standard-library/ios-functions.md#dec)</ept>, <bpt id=\"p2\">[</bpt>oct<ept id=\"p2\">](../standard-library/ios-functions.md#oct)</ept>, or <bpt id=\"p3\">[</bpt>hex<ept id=\"p3\">](../standard-library/ios-functions.md#hex)</ept>.","source":"The notational base of a number can be changed with [dec](../standard-library/ios-functions.md#dec), [oct](../standard-library/ios-functions.md#oct), or [hex](../standard-library/ios-functions.md#hex)."},{"pos":[17879,18029],"content":"The manipulator effectively calls <ph id=\"ph1\">` str.`</ph><bpt id=\"p1\">[</bpt>setf<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <ph id=\"ph2\">`ios_base::showbase`</ph>), and then returns <ph id=\"ph3\">` str`</ph>.","source":"The manipulator effectively calls ` str.`[setf](../standard-library/ios-base-class.md#ios_base__setf)( `ios_base::showbase`), and then returns ` str`."},{"pos":[18039,18046],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[18554,18589],"content":"<bpt id=\"p1\">&lt;a name=\"showpoint\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  showpoint","linkify":"<a name=\"showpoint\"></a>  showpoint","source":"<a name=\"showpoint\"></a>  showpoint"},{"content":"Displays the whole-number part of a floating-point number and digits to the right of the decimal point even when the fractional part is zero.","pos":[18593,18734]},{"pos":[18795,18805],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to an object of type <bpt id=\"p1\">[</bpt>ios_base<ept id=\"p1\">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id=\"ph1\">`ios_base`</ph>.","pos":[18819,18946],"source":" A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`."},{"pos":[18956,18968],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[18972,19028],"content":"A reference to the object from which _ <bpt id=\"p1\">*</bpt>Str<ept id=\"p1\">*</ept> is derived.","source":"A reference to the object from which _ *Str* is derived."},{"pos":[19038,19045],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[19049,19138],"content":"By default, <bpt id=\"p1\">[</bpt>noshowpoint<ept id=\"p1\">](../standard-library/ios-functions.md#noshowpoint)</ept> is in effect.","source":"By default, [noshowpoint](../standard-library/ios-functions.md#noshowpoint) is in effect."},{"pos":[19145,19296],"content":"The manipulator effectively calls <ph id=\"ph1\">` str.`</ph><bpt id=\"p1\">[</bpt>setf<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <ph id=\"ph2\">`ios_base::showpoint`</ph>), and then returns <ph id=\"ph3\">` str`</ph>.","source":"The manipulator effectively calls ` str.`[setf](../standard-library/ios-base-class.md#ios_base__setf)( `ios_base::showpoint`), and then returns ` str`."},{"pos":[19306,19313],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[19318,19422],"content":"See <bpt id=\"p1\">[</bpt>noshowpoint<ept id=\"p1\">](../standard-library/ios-functions.md#noshowpoint)</ept> for an example of using <ph id=\"ph1\">`showpoint`</ph>.","source":"See [noshowpoint](../standard-library/ios-functions.md#noshowpoint) for an example of using `showpoint`."},{"pos":[19432,19463],"content":"<bpt id=\"p1\">&lt;a name=\"showpos\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  showpos","linkify":"<a name=\"showpos\"></a>  showpos","source":"<a name=\"showpos\"></a>  showpos"},{"content":"Causes positive numbers to be explicitly signed.","pos":[19467,19515]},{"pos":[19574,19584],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to an object of type <bpt id=\"p1\">[</bpt>ios_base<ept id=\"p1\">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id=\"ph1\">`ios_base`</ph>.","pos":[19598,19725],"source":" A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`."},{"pos":[19735,19747],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19751,19807],"content":"A reference to the object from which _ <bpt id=\"p1\">*</bpt>Str<ept id=\"p1\">*</ept> is derived.","source":"A reference to the object from which _ *Str* is derived."},{"pos":[19817,19824],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[19828,19903],"content":"<bpt id=\"p1\">[</bpt>noshowpos<ept id=\"p1\">](../standard-library/ios-functions.md#noshowpos)</ept> is the default.","source":"[noshowpos](../standard-library/ios-functions.md#noshowpos) is the default."},{"pos":[19910,20059],"content":"The manipulator effectively calls <ph id=\"ph1\">` str.`</ph><bpt id=\"p1\">[</bpt>setf<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <ph id=\"ph2\">`ios_base::showpos`</ph>), and then returns <ph id=\"ph3\">` str`</ph>.","source":"The manipulator effectively calls ` str.`[setf](../standard-library/ios-base-class.md#ios_base__setf)( `ios_base::showpos`), and then returns ` str`."},{"pos":[20069,20076],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[20371,20400],"content":"<bpt id=\"p1\">&lt;a name=\"skipws\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  skipws","linkify":"<a name=\"skipws\"></a>  skipws","source":"<a name=\"skipws\"></a>  skipws"},{"content":"Cause spaces to not be read by the input stream.","pos":[20404,20452]},{"pos":[20510,20520],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to an object of type <bpt id=\"p1\">[</bpt>ios_base<ept id=\"p1\">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id=\"ph1\">`ios_base`</ph>.","pos":[20534,20661],"source":" A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`."},{"pos":[20671,20683],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20687,20743],"content":"A reference to the object from which _ <bpt id=\"p1\">*</bpt>Str<ept id=\"p1\">*</ept> is derived.","source":"A reference to the object from which _ *Str* is derived."},{"pos":[20753,20760],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, <ph id=\"ph1\">`skipws`</ph> is in effect.","pos":[20764,20798],"source":"By default, `skipws` is in effect."},{"content":"<bpt id=\"p1\">[</bpt>noskipws<ept id=\"p1\">](../standard-library/ios-functions.md#noskipws)</ept> will cause spaces to be read from the input stream.","pos":[20799,20908],"source":"[noskipws](../standard-library/ios-functions.md#noskipws) will cause spaces to be read from the input stream."},{"pos":[20915,21063],"content":"The manipulator effectively calls <ph id=\"ph1\">` str.`</ph><bpt id=\"p1\">[</bpt>setf<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <ph id=\"ph2\">`ios_base::skipws`</ph>), and then returns <ph id=\"ph3\">` str`</ph>.","source":"The manipulator effectively calls ` str.`[setf](../standard-library/ios-base-class.md#ios_base__setf)( `ios_base::skipws`), and then returns ` str`."},{"pos":[21073,21080],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[21509,21540],"content":"<bpt id=\"p1\">&lt;a name=\"unitbuf\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  unitbuf","linkify":"<a name=\"unitbuf\"></a>  unitbuf","source":"<a name=\"unitbuf\"></a>  unitbuf"},{"content":"Causes output to be processed when the buffer is not empty.","pos":[21544,21603]},{"pos":[21662,21672],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to an object of type <bpt id=\"p1\">[</bpt>ios_base<ept id=\"p1\">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id=\"ph1\">`ios_base`</ph>.","pos":[21686,21813],"source":" A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`."},{"pos":[21823,21835],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[21839,21894],"content":"A reference to the object from which <ph id=\"ph1\">` str`</ph> is derived.","source":"A reference to the object from which ` str` is derived."},{"pos":[21904,21911],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[21915,21956],"content":"Note that <ph id=\"ph1\">`endl`</ph> also flushes the buffer.","source":"Note that `endl` also flushes the buffer."},{"pos":[21963,22047],"content":"<bpt id=\"p1\">[</bpt>nounitbuf<ept id=\"p1\">](../standard-library/ios-functions.md#nounitbuf)</ept> is in effect by default.","source":"[nounitbuf](../standard-library/ios-functions.md#nounitbuf) is in effect by default."},{"pos":[22054,22261],"content":"The manipulator effectively calls <ph id=\"ph1\">` str.`</ph><bpt id=\"p1\">[</bpt>setf<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <bpt id=\"p2\">[</bpt>ios_base::unitbuf<ept id=\"p2\">](../standard-library/ios-base-class.md#ios_base__fmtflags)</ept>), and then returns <ph id=\"ph2\">` str`</ph>.","source":"The manipulator effectively calls ` str.`[setf](../standard-library/ios-base-class.md#ios_base__setf)( [ios_base::unitbuf](../standard-library/ios-base-class.md#ios_base__fmtflags)), and then returns ` str`."},{"pos":[22271,22306],"content":"<bpt id=\"p1\">&lt;a name=\"uppercase\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  uppercase","linkify":"<a name=\"uppercase\"></a>  uppercase","source":"<a name=\"uppercase\"></a>  uppercase"},{"content":"Specifies that hexadecimal digits and the exponent in scientific notation appear in uppercase.","pos":[22310,22404]},{"pos":[22465,22475],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to an object of type <bpt id=\"p1\">[</bpt>ios_base<ept id=\"p1\">](../standard-library/ios-base-class.md)</ept>, or to a type that inherits from <ph id=\"ph1\">`ios_base`</ph>.","pos":[22489,22616],"source":" A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`."},{"pos":[22626,22638],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22642,22697],"content":"A reference to the object from which <ph id=\"ph1\">` str`</ph> is derived.","source":"A reference to the object from which ` str` is derived."},{"pos":[22707,22714],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[22718,22807],"content":"By default, <bpt id=\"p1\">[</bpt>nouppercase<ept id=\"p1\">](../standard-library/ios-functions.md#nouppercase)</ept> is in effect.","source":"By default, [nouppercase](../standard-library/ios-functions.md#nouppercase) is in effect."},{"pos":[22814,23023],"content":"The manipulator effectively calls <ph id=\"ph1\">` str.`</ph><bpt id=\"p1\">[</bpt>setf<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <bpt id=\"p2\">[</bpt>ios_base::uppercase<ept id=\"p2\">](../standard-library/ios-base-class.md#ios_base__fmtflags)</ept>), and then returns <ph id=\"ph2\">` str`</ph>.","source":"The manipulator effectively calls ` str.`[setf](../standard-library/ios-base-class.md#ios_base__setf)( [ios_base::uppercase](../standard-library/ios-base-class.md#ios_base__fmtflags)), and then returns ` str`."},{"pos":[23033,23040],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[23447,23455],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[23459,23495],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>ios&gt;<ept id=\"p1\">](../standard-library/ios.md)</ept>","source":"[\\<ios>](../standard-library/ios.md)"}],"content":"---\ntitle: \"&lt;ios&gt; functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 1382d53f-e531-4b41-adf6-6a1543512e51\ncaps.latest.revision: 10\nmanager: \"ghogen\"\n---\n# &lt;ios&gt; functions\n||||  \n|-|-|-|  \n|[defaultfloat](#ios_defaultfloat)|[boolalpha](#boolalpha)|[dec](#dec)|  \n|[fixed](#fixed)|[hex](#hex)|[internal](#internal)|  \n|[left](#left)|[noboolalpha](#noboolalpha)|[noshowbase](#noshowbase)|  \n|[noshowpoint](#noshowpoint)|[noshowpos](#noshowpos)|[noskipws](#noskipws)|  \n|[nounitbuf](#nounitbuf)|[nouppercase](#nouppercase)|[oct](#oct)|  \n|[right](#right)|[scientific](#scientific)|[showbase](#showbase)|  \n|[showpoint](#showpoint)|[showpos](#showpos)|[skipws](#skipws)|  \n|[unitbuf](#unitbuf)|[uppercase](#uppercase)|  \n  \n##  <a name=\"boolalpha\"></a>  boolalpha  \n Specifies that variables of type [bool](../cpp/bool-cpp.md) appear as **true** or **false** in the stream.  \n  \n```  \nios_base& boolalpha(ios_base& str);\n```  \n  \n### Parameters  \n ` str`  \n A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`.  \n  \n### Return Value  \n A reference to the object from which _ *Str* is derived.  \n  \n### Remarks  \n By default, variables of type `bool` are displayed as 1 or 0.  \n  \n `boolalpha` effectively calls ` str.`[setf](../standard-library/ios-base-class.md#ios_base__setf)( `ios_base::boolalpha`), and then returns ` str.`  \n  \n [noboolalpha](../standard-library/ios-functions.md#noboolalpha) reverses the effect of `boolalpha`.  \n  \n### Example  \n  \n```cpp  \n// ios_boolalpha.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \nint main( )   \n{  \n   using namespace std;  \n   bool b = true;  \n   cout << b << endl;  \n   boolalpha( cout );  \n   cout << b << endl;  \n   noboolalpha( cout );  \n   cout << b << endl;  \n   cout << boolalpha << b << endl;  \n}  \n```  \n  \n```Output  \n1  \ntrue  \n1  \ntrue  \n```  \n  \n##  <a name=\"dec\"></a>  dec  \n Specifies that integer variables appear in base 10 notation.  \n  \n```  \nios_base& dec(ios_base& str);\n```  \n  \n### Parameters  \n ` str`  \n A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`.  \n  \n### Return Value  \n A reference to the object from which _ *Str* is derived.  \n  \n### Remarks  \n By default, integer variables are displayed in base 10.  \n  \n **dec** effectively calls ` str``.`[setf](../standard-library/ios-base-class.md#ios_base__setf)( `ios_base::dec`**, ios_base::basefield**), and then returns ` str`.  \n  \n### Example  \n  \n```cpp  \n// ios_dec.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \nint main( )   \n{  \n   using namespace std;  \n   int i = 100;  \n  \n   cout << i << endl;   // Default is base 10  \n   cout << hex << i << endl;     \n   dec( cout );  \n   cout << i << endl;  \n   oct( cout );  \n   cout << i << endl;  \n   cout << dec << i << endl;  \n}  \n```  \n  \n```Output  \n100  \n64  \n100  \n144  \n100  \n```  \n  \n##  <a name=\"ios_defaultfloat\"></a>  &lt;ios&gt; defaultfloat  \n Configures the flags of an `ios_base` object to use a default display format for float values.  \n  \n```  \nios_base& defaultfloat(ios_base& _Iosbase);\n```  \n  \n### Parameters  \n `_Iosbase`  \n An `ios_base` object.  \n  \n### Remarks  \n The manipulator effectively calls _I `osbase.`[ios_base::unsetf](../standard-library/ios-base-class.md#ios_base__unsetf)`(ios_base::floatfield)`, then returns _I `osbase`.  \n  \n##  <a name=\"fixed\"></a>  fixed  \n Specifies that a floating-point number is displayed in fixed-decimal notation.  \n  \n```  \nios_base& fixed(ios_base& str);\n```  \n  \n### Parameters  \n ` str`  \n A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`.  \n  \n### Return Value  \n A reference to the object from which _ *Str* is derived.  \n  \n### Remarks  \n **fixed** is the default display notation for floating-point numbers. [scientific](../standard-library/ios-functions.md#scientific) causes floating-point numbers to be displayed using scientific notation.  \n  \n The manipulator effectively calls * str.*[setf](../standard-library/ios-base-class.md#ios_base__setf)( `ios_base::fixed`, **ios_base::floatfield**), and then returns ` str`.  \n  \n### Example  \n  \n```cpp  \n// ios_fixed.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \nint main( )   \n{  \n   using namespace std;  \n   float i = 1.1F;  \n  \n   cout << i << endl;   // fixed is the default  \n   cout << scientific << i << endl;  \n   cout.precision( 1 );  \n   cout << fixed << i << endl;  \n}  \n```  \n  \n```Output  \n1.1  \n1.100000e+000  \n1.1  \n```  \n  \n##  <a name=\"hex\"></a>  hex  \n Specifies that integer variables shall appear in base 16 notation.  \n  \n```  \nios_base& hex(ios_base& str);\n```  \n  \n### Parameters  \n ` str`  \n A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`.  \n  \n### Return Value  \n A reference to the object from which _ *Str* is derived.  \n  \n### Remarks  \n By default, integer variables are displayed in base 10 notation. [dec](../standard-library/ios-functions.md#dec) and [oct](../standard-library/ios-functions.md#oct) also change the way integer variables appear.  \n  \n The manipulator effectively calls ` str`**.**[setf](../standard-library/ios-base-class.md#ios_base__setf)( `ios_base::hex`, **ios_base::basefield**), and then returns ` str`.  \n  \n### Example  \n  See [dec](../standard-library/ios-functions.md#dec) for an example of how to use **hex**.  \n  \n##  <a name=\"internal\"></a>  internal  \n Causes a number's sign to be left justified and the number to be right justified.  \n  \n```  \nios_base& internal(ios_base& str);\n```  \n  \n### Parameters  \n ` str`  \n A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`.  \n  \n### Return Value  \n A reference to the object from which ` str` is derived.  \n  \n### Remarks  \n [showpos](../standard-library/ios-functions.md#showpos) causes the sign to display for positive numbers.  \n  \n The manipulator effectively calls ` str`. [setf](../standard-library/ios-base-class.md#ios_base__setf)( [ios_base::internal](../standard-library/ios-base-class.md#ios_base__fmtflags), [ios_base::adjustfield](../standard-library/ios-base-class.md#ios_base__fmtflags)), and then returns ` str`.  \n  \n### Example  \n  \n```cpp  \n// ios_internal.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <iomanip>  \n  \nint main( void )   \n{  \n   using namespace std;  \n   float i = -123.456F;  \n   cout.fill( '.' );  \n   cout << setw( 10 ) << i << endl;  \n   cout << setw( 10 ) << internal << i << endl;  \n}  \n```  \n  \n```Output  \n..-123.456  \n-..123.456  \n```  \n  \n##  <a name=\"left\"></a>  left  \n Causes text that is not as wide as the output width to appear in the stream flush with the left margin.  \n  \n```  \nios_base& left(ios_base& str);\n```  \n  \n### Parameters  \n ` str`  \n A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`.  \n  \n### Return Value  \n A reference to the object from which _ *Str* is derived.  \n  \n### Remarks  \n The manipulator effectively calls ` str.`[setf](../standard-library/ios-base-class.md#ios_base__setf)( `ios_base::left`, **ios_base::adjustfield**), and then returns ` str`.  \n  \n### Example  \n  \n```cpp  \n// ios_left.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \nint main( )   \n{  \n   using namespace std;  \n   double f1= 5.00;  \n   cout.width( 20 );   \n   cout << f1 << endl;  \n   cout << left << f1 << endl;  \n}  \n```  \n  \n```Output  \n                   5  \n5  \n```  \n  \n##  <a name=\"noboolalpha\"></a>  noboolalpha  \n Specifies that variables of type [bool](../cpp/bool-cpp.md) appear as 1 or 0 in the stream.  \n  \n```  \nios_base& noboolalpha(ios_base& str);\n```  \n  \n### Parameters  \n ` str`  \n A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`.  \n  \n### Return Value  \n A reference to the object from which _ *Str* is derived.  \n  \n### Remarks  \n By default, `noboolalpha` is in effect.  \n  \n `noboolalpha` effectively calls ` str.`[unsetf](../standard-library/ios-base-class.md#ios_base__unsetf)( `ios_base::boolalpha`), and then returns ` str`.  \n  \n [boolalpha](../standard-library/ios-functions.md#boolalpha) reverses the effect of `noboolalpha`.  \n  \n### Example  \n  See [boolalpha](../standard-library/ios-functions.md#boolalpha) for an example of using `noboolalpha`.  \n  \n##  <a name=\"noshowbase\"></a>  noshowbase  \n Turns off indicating the notational base in which a number is displayed.  \n  \n```  \nios_base& noshowbase(ios_base& str);\n```  \n  \n### Parameters  \n ` str`  \n A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`.  \n  \n### Return Value  \n A reference to the object from which _ *Str* is derived.  \n  \n### Remarks  \n `noshowbase` is on by default. Use [showbase](../standard-library/ios-functions.md#showbase) to indicate the notational base of numbers.  \n  \n The manipulator effectively calls ` str.`[unsetf](../standard-library/ios-base-class.md#ios_base__unsetf)( `ios_base::showbase`), and then returns ` str`.  \n  \n### Example  \n  See [showbase](../standard-library/ios-functions.md#showbase) for an example of how to use `noshowbase`.  \n  \n##  <a name=\"noshowpoint\"></a>  noshowpoint  \n Displays only the whole-number part of floating-point numbers whose fractional part is zero.  \n  \n```  \nios_base& noshowpoint(ios_base& str);\n```  \n  \n### Parameters  \n ` str`  \n A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`.  \n  \n### Return Value  \n A reference to the object from which _ *Str* is derived.  \n  \n### Remarks  \n `noshowpoint` is on by default; use [showpoint](../standard-library/ios-functions.md#showpoint) and [precision](../standard-library/ios-base-class.md#ios_base__precision) to display zeros after the decimal point.  \n  \n The manipulator effectively calls ` str.`[unsetf](../standard-library/ios-base-class.md#ios_base__unsetf)( `ios_base::showpoint`), and then returns ` str`.  \n  \n### Example  \n  \n```cpp  \n// ios_noshowpoint.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \nint main( )   \n{  \n   using namespace std;  \n   double f1= 5.000;  \n   cout << f1 << endl;   // noshowpoint is default  \n   cout.precision( 4 );  \n   cout << showpoint << f1 << endl;  \n   cout << noshowpoint << f1 << endl;  \n}  \n```  \n  \n```Output  \n5  \n5.000  \n5  \n```  \n  \n##  <a name=\"noshowpos\"></a>  noshowpos  \n Causes positive numbers to not be explicitly signed.  \n  \n```  \nios_base& noshowpos(ios_base& str);\n```  \n  \n### Parameters  \n ` str`  \n A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`.  \n  \n### Return Value  \n A reference to the object from which _ *Str* is derived.  \n  \n### Remarks  \n `noshowpos` is on by default.  \n  \n The manipulator effectively calls ` str.`[unsetf](../standard-library/ios-base-class.md#ios_base__unsetf)( `ios_base::showps`), then returns ` str`.  \n  \n### Example  \n  See [showpos](../standard-library/ios-functions.md#showpos) for an example of using `noshowpos`.  \n  \n##  <a name=\"noskipws\"></a>  noskipws  \n Cause spaces to be read by the input stream.  \n  \n```  \nios_base& noskipws(ios_base& str);\n```  \n  \n### Parameters  \n ` str`  \n A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`.  \n  \n### Return Value  \n A reference to the object from which _ *Str* is derived.  \n  \n### Remarks  \n By default, [skipws](../standard-library/ios-functions.md#skipws) is in effect. When a space is read in the input stream, it signals the end of the buffer.  \n  \n The manipulator effectively calls ` str.`[unsetf](../standard-library/ios-base-class.md#ios_base__unsetf)( `ios_base::skipws`), and then returns ` str`.  \n  \n### Example  \n  \n```cpp  \n// ios_noskipws.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <string>  \n  \nint main() {  \n   using namespace std;     \n   string s1, s2, s3;  \n   cout << \"Enter three strings: \";  \n   cin >> noskipws >> s1 >> s2 >> s3;  \n   cout << \".\" << s1  << \".\" << endl;  \n   cout << \".\" << s2 << \".\" << endl;  \n   cout << \".\" << s3 << \".\" << endl;     \n}  \n```  \n  \n##  <a name=\"nounitbuf\"></a>  nounitbuf  \n Causes output to be buffered and processed on when the buffer is full.  \n  \n```  \nios_base& nounitbuf(ios_base& str);\n```  \n  \n### Parameters  \n ` str`  \n A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`.  \n  \n### Return Value  \n A reference to the object from which _ *Str* is derived.  \n  \n### Remarks  \n [unitbuf](../standard-library/ios-functions.md#unitbuf) causes the buffer to be processed when it is not empty.  \n  \n The manipulator effectively calls ` str.`[unsetf](../standard-library/ios-base-class.md#ios_base__unsetf)( `ios_base::unitbuf`), and then returns ` str`.  \n  \n##  <a name=\"nouppercase\"></a>  nouppercase  \n Specifies that hexadecimal digits and the exponent in scientific notation appear in lowercase.  \n  \n```  \nios_base& nouppercase(ios_base& str);\n```  \n  \n### Parameters  \n ` str`  \n A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`.  \n  \n### Return Value  \n A reference to the object from which _ *Str* is derived.  \n  \n### Remarks  \n The manipulator effectively calls ` str.`[unsetf](../standard-library/ios-base-class.md#ios_base__unsetf)( `ios_base::uppercase`), and then returns ` str`.  \n  \n### Example  \n  See [uppercase](../standard-library/ios-functions.md#uppercase) for an example of using `nouppercase`.  \n  \n##  <a name=\"oct\"></a>  oct  \n Specifies that integer variables appear in base 8 notation.  \n  \n```  \nios_base& oct(ios_base& str);\n```  \n  \n### Parameters  \n ` str`  \n A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`.  \n  \n### Return Value  \n A reference to the object from which _ *Str* is derived.  \n  \n### Remarks  \n By default, integer variables are displayed in base 10 notation. [dec](../standard-library/ios-functions.md#dec) and [hex](../standard-library/ios-functions.md#hex) also change the way integer variables appear.  \n  \n The manipulator effectively calls ` str.`[setf](../standard-library/ios-base-class.md#ios_base__setf)( `ios_base::oct`, `ios_base::basefield`), and then returns ` str`.  \n  \n### Example  \n  See [dec](../standard-library/ios-functions.md#dec) for an example of how to use **oct**.  \n  \n##  <a name=\"right\"></a>  right  \n Causes text that is not as wide as the output width to appear in the stream flush with the right margin.  \n  \n```  \nios_base& right(ios_base& str);\n```  \n  \n### Parameters  \n ` str`  \n A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`.  \n  \n### Return Value  \n A reference to the object from which _ *Str* is derived.  \n  \n### Remarks  \n [left](../standard-library/ios-functions.md#left) also modifies the justification of text.  \n  \n The manipulator effectively calls ` str.`[setf](../standard-library/ios-base-class.md#ios_base__setf)( `ios_base::right`, `ios_base::adjustfield`), and then returns ` str`.  \n  \n### Example  \n  \n```cpp  \n// ios_right.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \nint main( )   \n{  \n   using namespace std;  \n   double f1= 5.00;  \n   cout << f1 << endl;  \n   cout.width( 20 );  \n   cout << f1 << endl;  \n   cout.width( 20 );  \n   cout << left << f1 << endl;  \n   cout.width( 20 );  \n   cout << f1 << endl;  \n   cout.width( 20 );  \n   cout << right << f1 << endl;  \n   cout.width( 20 );  \n   cout << f1 << endl;  \n}  \n```  \n  \n```Output  \n5  \n                   5  \n5                     \n5                     \n                   5  \n                   5  \n```  \n  \n##  <a name=\"scientific\"></a>  scientific  \n Causes floating-point numbers to be displayed using scientific notation.  \n  \n```  \nios_base& scientific(ios_base& str);\n```  \n  \n### Parameters  \n ` str`  \n A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`.  \n  \n### Return Value  \n A reference to the object from which _ *Str* is derived.  \n  \n### Remarks  \n By default, [fixed](../standard-library/ios-functions.md#fixed) notation is in effect for floating-point numbers.  \n  \n The manipulator effectively calls ` str.`[setf](../standard-library/ios-base-class.md#ios_base__setf)( `ios_base::scientific`, `ios_base::floatfield`), and then returns ` str`.  \n  \n### Example  \n  \n```cpp  \n// ios_scientific.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \nint main( )   \n{  \n   using namespace std;  \n   float i = 100.23F;  \n  \n   cout << i << endl;  \n   cout << scientific << i << endl;  \n}  \n```  \n  \n```Output  \n100.23  \n1.002300e+002  \n```  \n  \n##  <a name=\"showbase\"></a>  showbase  \n Indicates the notational base in which a number is displayed.  \n  \n```  \nios_base& showbase(ios_base& str);\n```  \n  \n### Parameters  \n ` str`  \n A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`.  \n  \n### Return Value  \n A reference to the object from which _ *Str* is derived.  \n  \n### Remarks  \n The notational base of a number can be changed with [dec](../standard-library/ios-functions.md#dec), [oct](../standard-library/ios-functions.md#oct), or [hex](../standard-library/ios-functions.md#hex).  \n  \n The manipulator effectively calls ` str.`[setf](../standard-library/ios-base-class.md#ios_base__setf)( `ios_base::showbase`), and then returns ` str`.  \n  \n### Example  \n  \n```cpp  \n// ios_showbase.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \nint main( )   \n{  \n   using namespace std;  \n   int j = 100;  \n  \n   cout << showbase << j << endl;   // dec is default  \n   cout << hex << j << showbase << endl;  \n   cout << oct << j << showbase << endl;  \n  \n   cout << dec << j << noshowbase << endl;  \n   cout << hex << j << noshowbase << endl;  \n   cout << oct << j << noshowbase << endl;  \n}  \n```  \n  \n```Output  \n100  \n0x64  \n0144  \n100  \n64  \n144  \n```  \n  \n##  <a name=\"showpoint\"></a>  showpoint  \n Displays the whole-number part of a floating-point number and digits to the right of the decimal point even when the fractional part is zero.  \n  \n```  \nios_base& showpoint(ios_base& str);\n```  \n  \n### Parameters  \n ` str`  \n A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`.  \n  \n### Return Value  \n A reference to the object from which _ *Str* is derived.  \n  \n### Remarks  \n By default, [noshowpoint](../standard-library/ios-functions.md#noshowpoint) is in effect.  \n  \n The manipulator effectively calls ` str.`[setf](../standard-library/ios-base-class.md#ios_base__setf)( `ios_base::showpoint`), and then returns ` str`.  \n  \n### Example  \n  See [noshowpoint](../standard-library/ios-functions.md#noshowpoint) for an example of using `showpoint`.  \n  \n##  <a name=\"showpos\"></a>  showpos  \n Causes positive numbers to be explicitly signed.  \n  \n```  \nios_base& showpos(ios_base& str);\n```  \n  \n### Parameters  \n ` str`  \n A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`.  \n  \n### Return Value  \n A reference to the object from which _ *Str* is derived.  \n  \n### Remarks  \n [noshowpos](../standard-library/ios-functions.md#noshowpos) is the default.  \n  \n The manipulator effectively calls ` str.`[setf](../standard-library/ios-base-class.md#ios_base__setf)( `ios_base::showpos`), and then returns ` str`.  \n  \n### Example  \n  \n```cpp  \n// ios_showpos.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \nint main( )   \n{  \n   using namespace std;  \n   int i = 1;  \n  \n   cout << noshowpos << i << endl;   // noshowpos is default  \n   cout << showpos << i << endl;  \n}  \n```  \n  \n```Output  \n1  \n+1  \n```  \n  \n##  <a name=\"skipws\"></a>  skipws  \n Cause spaces to not be read by the input stream.  \n  \n```  \nios_base& skipws(ios_base& str);\n```  \n  \n### Parameters  \n ` str`  \n A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`.  \n  \n### Return Value  \n A reference to the object from which _ *Str* is derived.  \n  \n### Remarks  \n By default, `skipws` is in effect. [noskipws](../standard-library/ios-functions.md#noskipws) will cause spaces to be read from the input stream.  \n  \n The manipulator effectively calls ` str.`[setf](../standard-library/ios-base-class.md#ios_base__setf)( `ios_base::skipws`), and then returns ` str`.  \n  \n### Example  \n  \n```cpp  \n#include <iostream>  \n#include <string>  \n  \nint main( )   \n{  \n   using namespace std;  \n   char s1, s2, s3;  \n   cout << \"Enter three characters: \";  \n   cin >> skipws >> s1 >> s2 >> s3;  \n   cout << \".\" << s1  << \".\" << endl;  \n   cout << \".\" << s2 << \".\" << endl;  \n   cout << \".\" << s3 << \".\" << endl;  \n}  \n```  \n  \n```Output  \n  \n1 2 3  \n  \n```  \n  \n```Output  \n  \n      1 2 3.1.  \n.2.  \n.3.  \n```  \n  \n##  <a name=\"unitbuf\"></a>  unitbuf  \n Causes output to be processed when the buffer is not empty.  \n  \n```  \nios_base& unitbuf(ios_base& str);\n```  \n  \n### Parameters  \n ` str`  \n A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`.  \n  \n### Return Value  \n A reference to the object from which ` str` is derived.  \n  \n### Remarks  \n Note that `endl` also flushes the buffer.  \n  \n [nounitbuf](../standard-library/ios-functions.md#nounitbuf) is in effect by default.  \n  \n The manipulator effectively calls ` str.`[setf](../standard-library/ios-base-class.md#ios_base__setf)( [ios_base::unitbuf](../standard-library/ios-base-class.md#ios_base__fmtflags)), and then returns ` str`.  \n  \n##  <a name=\"uppercase\"></a>  uppercase  \n Specifies that hexadecimal digits and the exponent in scientific notation appear in uppercase.  \n  \n```  \nios_base& uppercase(ios_base& str);\n```  \n  \n### Parameters  \n ` str`  \n A reference to an object of type [ios_base](../standard-library/ios-base-class.md), or to a type that inherits from `ios_base`.  \n  \n### Return Value  \n A reference to the object from which ` str` is derived.  \n  \n### Remarks  \n By default, [nouppercase](../standard-library/ios-functions.md#nouppercase) is in effect.  \n  \n The manipulator effectively calls ` str.`[setf](../standard-library/ios-base-class.md#ios_base__setf)( [ios_base::uppercase](../standard-library/ios-base-class.md#ios_base__fmtflags)), and then returns ` str`.  \n  \n### Example  \n  \n```cpp  \n// ios_uppercase.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \nint main( void )   \n{  \n   using namespace std;  \n  \n   double i = 1.23e100;  \n   cout << i << endl;  \n   cout << uppercase << i << endl;  \n  \n   int j = 10;  \n   cout << hex << nouppercase << j << endl;  \n   cout << hex << uppercase << j << endl;  \n}  \n```  \n  \n```Output  \n1.23e+100  \n1.23E+100  \na  \nA  \n```  \n  \n## See Also  \n [\\<ios>](../standard-library/ios.md)\n\n"}