{"nodes":[{"pos":[12,37],"content":"__assume | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"__assume | Microsoft Docs","pos":[0,25]}]},{"content":"__assume","pos":[617,625]},{"content":"Microsoft Specific","pos":[628,646]},{"content":"Passes a hint to the optimizer.","pos":[655,686]},{"content":"Syntax","pos":[695,701]},{"content":"Parameters","pos":[759,769]},{"content":"Any expression that is assumed to evaluate to true.","pos":[789,840]},{"content":"Remarks","pos":[849,856]},{"content":"The optimizer assumes that the condition represented by <ph id=\"ph1\">`expression`</ph> is true at the point where the keyword appears and remains true until <ph id=\"ph2\">`expression`</ph> is modified (for example, by assignment to a variable).","pos":[860,1067],"source":"The optimizer assumes that the condition represented by `expression` is true at the point where the keyword appears and remains true until `expression` is modified (for example, by assignment to a variable)."},{"content":"Selective use of hints passed to the optimizer by <ph id=\"ph1\">`__assume`</ph> can improve optimization.","pos":[1068,1154],"source":" Selective use of hints passed to the optimizer by `__assume` can improve optimization."},{"content":"If the <ph id=\"ph1\">`__assume`</ph> statement is written as a contradiction (an expression that always evaluates to false), it is always treated as <ph id=\"ph2\">`__assume(0)`</ph>.","pos":[1161,1305],"source":"If the `__assume` statement is written as a contradiction (an expression that always evaluates to false), it is always treated as `__assume(0)`."},{"content":"If your code isn’t behaving as expected, ensure that the <ph id=\"ph1\">`expression`</ph> you defined is valid and true, as described earlier.","pos":[1306,1428],"source":" If your code isn’t behaving as expected, ensure that the `expression` you defined is valid and true, as described earlier."},{"content":"For more information about expected <ph id=\"ph1\">`__assume(0)`</ph> behavior, see the later remarks.","pos":[1429,1511],"source":" For more information about expected `__assume(0)` behavior, see the later remarks."},{"pos":[1519,1745],"content":"[!WARNING]\n A program must not contain an invalid `__assume` statement on a reachable path. If the compiler can reach an invalid `__assume` statement, the program might cause unpredictable and potentially dangerous behavior.","leadings":["","> "],"nodes":[{"content":" A program must not contain an invalid `__assume` statement on a reachable path. If the compiler can reach an invalid `__assume` statement, the program might cause unpredictable and potentially dangerous behavior.","pos":[11,224],"nodes":[{"content":"A program must not contain an invalid <ph id=\"ph1\">`__assume`</ph> statement on a reachable path.","pos":[1,80],"source":" A program must not contain an invalid `__assume` statement on a reachable path."},{"content":"If the compiler can reach an invalid <ph id=\"ph1\">`__assume`</ph> statement, the program might cause unpredictable and potentially dangerous behavior.","pos":[81,213],"source":" If the compiler can reach an invalid `__assume` statement, the program might cause unpredictable and potentially dangerous behavior."}]}]},{"content":"is not a genuine intrinsic.","pos":[1763,1790]},{"content":"It does not have to be declared as a function and it cannot be used in a <ph id=\"ph1\">`#pragma intrinsic`</ph> directive.","pos":[1791,1894],"source":" It does not have to be declared as a function and it cannot be used in a `#pragma intrinsic` directive."},{"content":"Although no code is generated, the code generated by the optimizer is affected.","pos":[1895,1974]},{"content":"Use <ph id=\"ph1\">`__assume`</ph> in an <bpt id=\"p1\">[</bpt>ASSERT<ept id=\"p1\">](../c-runtime-library/reference/assert-asserte-assert-expr-macros.md)</ept> only when the assert is not recoverable.","pos":[1981,2120],"source":"Use `__assume` in an [ASSERT](../c-runtime-library/reference/assert-asserte-assert-expr-macros.md) only when the assert is not recoverable."},{"content":"Do not use <ph id=\"ph1\">`__assume`</ph> in an assert for which you have subsequent error recovery code because the compiler might optimize away the error-handling code.","pos":[2121,2271],"source":" Do not use `__assume` in an assert for which you have subsequent error recovery code because the compiler might optimize away the error-handling code."},{"content":"The <ph id=\"ph1\">`__assume(0)`</ph> statement is a special case.","pos":[2278,2324],"source":"The `__assume(0)` statement is a special case."},{"content":"Use <ph id=\"ph1\">`__assume(0)`</ph> to indicate a code path that cannot be reached.","pos":[2325,2390],"source":" Use `__assume(0)` to indicate a code path that cannot be reached."},{"content":"The following example shows how to use <ph id=\"ph1\">`__assume(0)`</ph> to indicate that the default case of a switch statement cannot be reached.","pos":[2391,2518],"source":" The following example shows how to use `__assume(0)` to indicate that the default case of a switch statement cannot be reached."},{"content":"This shows the most typical use of <ph id=\"ph1\">`__assume(0)`</ph>.","pos":[2519,2568],"source":" This shows the most typical use of `__assume(0)`."},{"content":"Requirements","pos":[2577,2589]},{"content":"Intrinsic","pos":[2596,2605]},{"content":"Architecture","pos":[2606,2618]},{"pos":[2673,2682],"content":"x86, ARM,"},{"content":"Example","pos":[2756,2763]},{"content":"The use of <ph id=\"ph1\">`__assume(0)`</ph> tells the optimizer that the default case cannot be reached.","pos":[3486,3571],"source":"The use of `__assume(0)` tells the optimizer that the default case cannot be reached."},{"content":"The example demonstrates that the programmer knows that the only possible inputs for <ph id=\"ph1\">`p`</ph> will be 1 or 2.","pos":[3572,3676],"source":" The example demonstrates that the programmer knows that the only possible inputs for `p` will be 1 or 2."},{"content":"If another value is passed in for <ph id=\"ph1\">`p`</ph>, the program becomes invalid and causes unpredictable behavior.","pos":[3677,3778],"source":" If another value is passed in for `p`, the program becomes invalid and causes unpredictable behavior."},{"content":"As a result of the <ph id=\"ph1\">`__assume(0)`</ph> statement, the compiler does not generate code to test whether <ph id=\"ph2\">`p`</ph> has a value that is not represented in a case statement.","pos":[3785,3941],"source":"As a result of the `__assume(0)` statement, the compiler does not generate code to test whether `p` has a value that is not represented in a case statement."},{"content":"For this to work, the <ph id=\"ph1\">`__assume(0)`</ph> statement must be the first statement in the body of the default case.","pos":[3942,4048],"source":" For this to work, the `__assume(0)` statement must be the first statement in the body of the default case."},{"content":"Because the compiler generates code based on <ph id=\"ph1\">`__assume`</ph>, that code might not run correctly if the expression inside the <ph id=\"ph2\">`__assume`</ph> statement is false at run time.","pos":[4055,4217],"source":"Because the compiler generates code based on `__assume`, that code might not run correctly if the expression inside the `__assume` statement is false at run time."},{"content":"If you are not sure that the expression will always be true at run time, you can use the <ph id=\"ph1\">`assert`</ph> function to protect the code.","pos":[4218,4345],"source":" If you are not sure that the expression will always be true at run time, you can use the `assert` function to protect the code."},{"content":"Unfortunately, this use of <ph id=\"ph1\">`assert`</ph> prevents the compiler from performing the default-case optimization that was described earlier in this document.","pos":[4443,4591],"source":"Unfortunately, this use of `assert` prevents the compiler from performing the default-case optimization that was described earlier in this document."},{"content":"As an alternative, you can use a separate macro, as follows.","pos":[4592,4652]},{"content":"END Microsoft Specific","pos":[4812,4834]},{"content":"See Also","pos":[4843,4851]},{"content":"Compiler Intrinsics","pos":[4856,4875]},{"content":"Keywords","pos":[4920,4928]}],"content":"---\ntitle: \"__assume | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"__assume\"\n  - \"__assume_cpp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"__assume keyword [C++]\"\nms.assetid: d8565123-b132-44b1-8235-5a8c8bff85a7\ncaps.latest.revision: 18\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# __assume\n**Microsoft Specific**  \n  \n Passes a hint to the optimizer.  \n  \n## Syntax  \n  \n```  \n__assume(  \n   expression  \n)  \n```  \n  \n#### Parameters  \n `expression`  \n Any expression that is assumed to evaluate to true.  \n  \n## Remarks  \n The optimizer assumes that the condition represented by `expression` is true at the point where the keyword appears and remains true until `expression` is modified (for example, by assignment to a variable). Selective use of hints passed to the optimizer by `__assume` can improve optimization.  \n  \n If the `__assume` statement is written as a contradiction (an expression that always evaluates to false), it is always treated as `__assume(0)`. If your code isn’t behaving as expected, ensure that the `expression` you defined is valid and true, as described earlier. For more information about expected `__assume(0)` behavior, see the later remarks.  \n  \n> [!WARNING]\n>  A program must not contain an invalid `__assume` statement on a reachable path. If the compiler can reach an invalid `__assume` statement, the program might cause unpredictable and potentially dangerous behavior.  \n  \n `__assume` is not a genuine intrinsic. It does not have to be declared as a function and it cannot be used in a `#pragma intrinsic` directive. Although no code is generated, the code generated by the optimizer is affected.  \n  \n Use `__assume` in an [ASSERT](../c-runtime-library/reference/assert-asserte-assert-expr-macros.md) only when the assert is not recoverable. Do not use `__assume` in an assert for which you have subsequent error recovery code because the compiler might optimize away the error-handling code.  \n  \n The `__assume(0)` statement is a special case. Use `__assume(0)` to indicate a code path that cannot be reached. The following example shows how to use `__assume(0)` to indicate that the default case of a switch statement cannot be reached. This shows the most typical use of `__assume(0)`.  \n  \n## Requirements  \n  \n|Intrinsic|Architecture|  \n|---------------|------------------|  \n|`__assume`|x86, ARM, [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]|  \n  \n## Example  \n  \n```  \n// compiler_intrinsics__assume.cpp  \n#ifdef DEBUG  \n# define ASSERT(e)    ( ((e) || assert(__FILE__, __LINE__) )  \n#else  \n# define ASSERT(e)    ( __assume(e) )  \n#endif  \n  \nvoid func1(int i)  \n{  \n}  \n  \nint main(int p)  \n{  \n   switch(p){  \n      case 1:  \n         func1(1);  \n         break;  \n      case 2:  \n         func1(-1);  \n         break;  \n      default:  \n         __assume(0);  \n            // This tells the optimizer that the default  \n            // cannot be reached. As so, it does not have to generate  \n            // the extra code to check that 'p' has a value   \n            // not represented by a case arm. This makes the switch   \n            // run faster.  \n   }  \n}  \n```  \n  \n The use of `__assume(0)` tells the optimizer that the default case cannot be reached. The example demonstrates that the programmer knows that the only possible inputs for `p` will be 1 or 2. If another value is passed in for `p`, the program becomes invalid and causes unpredictable behavior.  \n  \n As a result of the `__assume(0)` statement, the compiler does not generate code to test whether `p` has a value that is not represented in a case statement. For this to work, the `__assume(0)` statement must be the first statement in the body of the default case.  \n  \n Because the compiler generates code based on `__assume`, that code might not run correctly if the expression inside the `__assume` statement is false at run time. If you are not sure that the expression will always be true at run time, you can use the `assert` function to protect the code.  \n  \n```  \n#define ASSERT(e)    ( ((e) || assert(__FILE__, __LINE__)), __assume(e) )  \n```  \n  \n Unfortunately, this use of `assert` prevents the compiler from performing the default-case optimization that was described earlier in this document. As an alternative, you can use a separate macro, as follows.  \n  \n```  \n#ifdef DEBUG  \n# define NODEFAULT   ASSERT(0)  \n#else  \n# define NODEFAULT   __assume(0)  \n#endif  \n  \n   default:  \n      NODEFAULT;  \n```  \n  \n## END Microsoft Specific  \n  \n## See Also  \n [Compiler Intrinsics](../intrinsics/compiler-intrinsics.md)   \n [Keywords](../cpp/keywords-cpp.md)"}