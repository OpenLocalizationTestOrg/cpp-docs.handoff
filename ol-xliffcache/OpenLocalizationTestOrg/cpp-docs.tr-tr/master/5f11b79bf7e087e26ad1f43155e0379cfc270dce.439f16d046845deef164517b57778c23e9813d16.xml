{"nodes":[{"pos":[12,46],"content":"mutex Class (STL) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"mutex Class (STL) | Microsoft Docs","pos":[0,34]}]},{"content":"mutex Class (STL)","pos":[564,581]},{"content":"Represents a <bpt id=\"p1\">*</bpt>mutex type<ept id=\"p1\">*</ept>.","pos":[582,608],"source":"Represents a *mutex type*."},{"content":"Objects of this type can be used to enforce mutual exclusion within a program.","pos":[609,687]},{"content":"Syntax","pos":[696,702]},{"content":"Members","pos":[737,744]},{"content":"Public Constructors","pos":[754,773]},{"content":"Name","pos":[780,784]},{"content":"Description","pos":[785,796]},{"content":"mutex::mutex Constructor","pos":[835,859]},{"pos":[888,916],"content":"Constructs a <ph id=\"ph1\">`mutex`</ph> object.","source":"Constructs a `mutex` object."},{"content":"mutex::~mutex Destructor","pos":[922,946]},{"pos":[979,1039],"content":"Releases any resources that were used by the <ph id=\"ph1\">`mutex`</ph> object.","source":"Releases any resources that were used by the `mutex` object."},{"content":"Public Methods","pos":[1050,1064]},{"content":"Name","pos":[1071,1075]},{"content":"Description","pos":[1076,1087]},{"content":"mutex::lock Method","pos":[1126,1144]},{"pos":[1167,1243],"content":"Blocks the calling thread until the thread obtains ownership of the <ph id=\"ph1\">`mutex`</ph>.","source":"Blocks the calling thread until the thread obtains ownership of the `mutex`."},{"content":"mutex::native_handle Method","pos":[1249,1276]},{"content":"Returns the implementation-specific type that represents the mutex handle.","pos":[1308,1382]},{"content":"mutex::try_lock Method","pos":[1388,1410]},{"pos":[1437,1498],"content":"Attempts to obtain ownership of the <ph id=\"ph1\">`mutex`</ph> without blocking.","source":"Attempts to obtain ownership of the `mutex` without blocking."},{"content":"mutex::unlock Method","pos":[1504,1524]},{"pos":[1549,1583],"content":"Releases ownership of the <ph id=\"ph1\">`mutex`</ph>.","source":"Releases ownership of the `mutex`."},{"content":"Requirements","pos":[1593,1605]},{"pos":[1609,1626],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> mutex","source":"**Header:** mutex"},{"pos":[1633,1651],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[1696,1714],"content":"mutex::lock Method"},{"pos":[1718,1794],"content":"Blocks the calling thread until the thread obtains ownership of the <ph id=\"ph1\">`mutex`</ph>.","source":"Blocks the calling thread until the thread obtains ownership of the `mutex`."},{"content":"Remarks","pos":[1833,1840]},{"pos":[1844,1918],"content":"If the calling thread already owns the <ph id=\"ph1\">`mutex`</ph>, the behavior is undefined.","source":"If the calling thread already owns the `mutex`, the behavior is undefined."},{"pos":[1969,1993],"content":"mutex::mutex Constructor"},{"pos":[1997,2044],"content":"Constructs a <ph id=\"ph1\">`mutex`</ph> object that is not locked.","source":"Constructs a `mutex` object that is not locked."},{"pos":[2143,2167],"content":"mutex::~mutex Destructor"},{"pos":[2171,2230],"content":"Releases any resources that are used by the <ph id=\"ph1\">`mutex`</ph> object.","source":"Releases any resources that are used by the `mutex` object."},{"content":"Remarks","pos":[2266,2273]},{"content":"If the object is locked when the destructor runs, the behavior is undefined.","pos":[2277,2353]},{"pos":[2407,2434],"content":"mutex::native_handle Method"},{"content":"Returns the implementation-specific type that represents the mutex handle.","pos":[2438,2512]},{"content":"The mutex handle can be used in implementation-specific ways.","pos":[2513,2574]},{"content":"Return Value","pos":[2633,2645]},{"pos":[2670,2744],"content":"is defined as a <ph id=\"ph1\">`Concurrency::critical_section *`</ph> that's cast as <ph id=\"ph2\">`void *`</ph>.","source":" is defined as a `Concurrency::critical_section *` that's cast as `void *`."},{"pos":[2793,2815],"content":"mutex::try_lock Method"},{"pos":[2819,2880],"content":"Attempts to obtain ownership of the <ph id=\"ph1\">`mutex`</ph> without blocking.","source":"Attempts to obtain ownership of the `mutex` without blocking."},{"content":"Return Value","pos":[2923,2935]},{"pos":[2946,3026],"content":"if the method successfully obtains ownership of the <ph id=\"ph1\">`mutex`</ph>; otherwise, <ph id=\"ph2\">`false`</ph>.","source":" if the method successfully obtains ownership of the `mutex`; otherwise, `false`."},{"content":"Remarks","pos":[3036,3043]},{"pos":[3047,3121],"content":"If the calling thread already owns the <ph id=\"ph1\">`mutex`</ph>, the behavior is undefined.","source":"If the calling thread already owns the `mutex`, the behavior is undefined."},{"pos":[3168,3188],"content":"mutex::unlock Method"},{"pos":[3192,3226],"content":"Releases ownership of the <ph id=\"ph1\">`mutex`</ph>.","source":"Releases ownership of the `mutex`."},{"content":"Remarks","pos":[3267,3274]},{"pos":[3278,3352],"content":"If the calling thread does not own the <ph id=\"ph1\">`mutex`</ph>, the behavior is undefined.","source":"If the calling thread does not own the `mutex`, the behavior is undefined."},{"content":"See Also","pos":[3361,3369]},{"content":"Header Files Reference","pos":[3374,3396]},{"content":"mutex&gt;","pos":[3463,3469],"source":"mutex>"}],"content":"---\ntitle: \"mutex Class (STL) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"mutex/std::mutex\"\ndev_langs: \n  - \"C++\"\nms.assetid: 7999d055-f74f-4303-810f-8d3c9cde2f69\ncaps.latest.revision: 11\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# mutex Class (STL)\nRepresents a *mutex type*. Objects of this type can be used to enforce mutual exclusion within a program.  \n  \n## Syntax  \n  \n```\nclass mutex;\n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[mutex::mutex Constructor](#mutex__mutex_constructor)|Constructs a `mutex` object.|  \n|[mutex::~mutex Destructor](#mutex___dtormutex_destructor)|Releases any resources that were used by the `mutex` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[mutex::lock Method](#mutex__lock_method)|Blocks the calling thread until the thread obtains ownership of the `mutex`.|  \n|[mutex::native_handle Method](#mutex__native_handle_method)|Returns the implementation-specific type that represents the mutex handle.|  \n|[mutex::try_lock Method](#mutex__try_lock_method)|Attempts to obtain ownership of the `mutex` without blocking.|  \n|[mutex::unlock Method](#mutex__unlock_method)|Releases ownership of the `mutex`.|  \n  \n## Requirements  \n **Header:** mutex  \n  \n **Namespace:** std  \n  \n##  <a name=\"mutex__lock_method\"></a>  mutex::lock Method  \n Blocks the calling thread until the thread obtains ownership of the `mutex`.  \n  \n```cpp\nvoid lock();\n```  \n  \n### Remarks  \n If the calling thread already owns the `mutex`, the behavior is undefined.  \n  \n##  <a name=\"mutex__mutex_constructor\"></a>  mutex::mutex Constructor  \n Constructs a `mutex` object that is not locked.  \n  \n```cpp\nconstexpr mutex() noexcept;\n```  \n  \n##  <a name=\"mutex___dtormutex_destructor\"></a>  mutex::~mutex Destructor  \n Releases any resources that are used by the `mutex` object.  \n  \n```cpp\n~mutex();\n```  \n  \n### Remarks  \n If the object is locked when the destructor runs, the behavior is undefined.  \n  \n##  <a name=\"mutex__native_handle_method\"></a>  mutex::native_handle Method  \n Returns the implementation-specific type that represents the mutex handle. The mutex handle can be used in implementation-specific ways.  \n  \n```\nnative_handle_type native_handle();\n```  \n  \n### Return Value  \n `native_handle_type` is defined as a `Concurrency::critical_section *` that's cast as `void *`.  \n  \n##  <a name=\"mutex__try_lock_method\"></a>  mutex::try_lock Method  \n Attempts to obtain ownership of the `mutex` without blocking.  \n  \n```cpp\nbool try_lock();\n```  \n  \n### Return Value  \n `true` if the method successfully obtains ownership of the `mutex`; otherwise, `false`.  \n  \n### Remarks  \n If the calling thread already owns the `mutex`, the behavior is undefined.  \n  \n##  <a name=\"mutex__unlock_method\"></a>  mutex::unlock Method  \n Releases ownership of the `mutex`.  \n  \n```cpp\nvoid unlock();\n```  \n  \n### Remarks  \n If the calling thread does not own the `mutex`, the behavior is undefined.  \n  \n## See Also  \n [Header Files Reference](../standard-library/cpp-standard-library-header-files.md)   \n [\\<mutex>](../standard-library/mutex.md)\n\n\n\n"}