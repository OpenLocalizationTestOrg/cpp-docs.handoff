{"nodes":[{"pos":[12,50],"content":"directory_entry Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"directory_entry Class | Microsoft Docs","pos":[0,38]}]},{"content":"directory_entry Class","pos":[2556,2577]},{"pos":[2578,2804],"content":"Describes an object that is returned by <ph id=\"ph1\">`*X`</ph>, where <bpt id=\"p1\">*</bpt>X<ept id=\"p1\">*</ept> is a <bpt id=\"p2\">[</bpt>directory_iterator<ept id=\"p2\">](../standard-library/directory-iterator-class.md)</ept> or a <bpt id=\"p3\">[</bpt>recursive_directory_iterator<ept id=\"p3\">](../standard-library/recursive-directory-iterator-class.md)</ept>.","source":"Describes an object that is returned by `*X`, where *X* is a [directory_iterator](../standard-library/directory-iterator-class.md) or a [recursive_directory_iterator](../standard-library/recursive-directory-iterator-class.md)."},{"content":"Syntax","pos":[2813,2819]},{"content":"Remarks","pos":[2868,2875]},{"content":"The class stores an object of type <bpt id=\"p1\">[</bpt>path<ept id=\"p1\">](../standard-library/path-class.md)</ept>.","pos":[2879,2956],"source":"The class stores an object of type [path](../standard-library/path-class.md)."},{"content":"The stored <ph id=\"ph1\">`path`</ph> can be an instance of the <bpt id=\"p1\">[</bpt>path Class<ept id=\"p1\">](../standard-library/path-class.md)</ept> or of a type that is derived from <ph id=\"ph2\">`path`</ph>.","pos":[2957,3090],"source":" The stored `path` can be an instance of the [path Class](../standard-library/path-class.md) or of a type that is derived from `path`."},{"content":"It also stores two <bpt id=\"p1\">[</bpt>file_type<ept id=\"p1\">](../standard-library/filesystem-enumerations.md#filesystem__file_type)</ept> values; one that represents what is known about the status of the stored file name, and another that represents what is known about the symbolic link status of the file name.","pos":[3091,3366],"source":" It also stores two [file_type](../standard-library/filesystem-enumerations.md#filesystem__file_type) values; one that represents what is known about the status of the stored file name, and another that represents what is known about the symbolic link status of the file name."},{"pos":[3373,3495],"content":"For more information and code examples, see <bpt id=\"p1\">[</bpt>File System Navigation (C++)<ept id=\"p1\">](../standard-library/file-system-navigation.md)</ept>.","source":"For more information and code examples, see [File System Navigation (C++)](../standard-library/file-system-navigation.md)."},{"content":"assign","pos":[3504,3510]},{"content":"The member function assigns pval to mypath, stat to mystat, and symstat to mysymstat.","pos":[3685,3770]},{"content":"directory_entry","pos":[3779,3794]},{"content":"The defaulted constructors behave as expected.","pos":[4123,4169]},{"content":"The fourth constructor initializes mypath to pval, mystat to stat_arg, and mysymstat to symstat_arg.","pos":[4170,4270]},{"content":"operator!=","pos":[4279,4289]},{"content":"The member function returns !(*this == right).","pos":[4375,4421]},{"content":"operator=","pos":[4430,4439]},{"content":"The defaulted member assignment operators behave as expected.","pos":[4593,4654]},{"content":"operator==","pos":[4663,4673]},{"content":"The member function returns mypath == right.mypath.","pos":[4759,4810]},{"content":"operator&lt;","pos":[4819,4828],"source":"operator<"},{"content":"The member function returns mypath &lt; right.mypath.","pos":[4915,4965],"source":"The member function returns mypath < right.mypath."},{"content":"operator&lt;=","pos":[4974,4984],"source":"operator<="},{"content":"The member function returns !(right <ph id=\"ph1\">\\&lt;</ph> *this).","pos":[5070,5116],"source":"The member function returns !(right \\< *this)."},{"content":"operator&gt;","pos":[5125,5134],"source":"operator>"},{"content":"The member function returns right <ph id=\"ph1\">\\&lt;</ph> *this.","pos":[5219,5262],"source":"The member function returns right \\< *this."},{"content":"operator&gt;=","pos":[5271,5281],"source":"operator>="},{"content":"The member function returns !(*this &lt; right).","pos":[5367,5412],"source":"The member function returns !(*this < right)."},{"content":"operator const path_type&amp;","pos":[5421,5446],"source":"operator const path_type&"},{"content":"The member operator returns mypath.","pos":[5530,5565]},{"content":"path","pos":[5574,5578]},{"content":"The member function returns mypath.","pos":[5668,5703]},{"content":"replace_filename","pos":[5712,5728]},{"content":"The member function replaces mypath with mypath.parent_path() / pval, mystat with stat_arg, and mysymstat with symstat_arg","pos":[5918,6040]},{"content":"status","pos":[6049,6055]},{"content":"Both member functions return mystat possibly first altered as follows:","pos":[6159,6229]},{"content":"If status_known(mystat) then do nothing.","pos":[6239,6279]},{"content":"Otherwise, if !status_known(mysymstat) &amp;&amp; !is_symlink(mysymstat) then mystat = mysymstat.","pos":[6289,6378],"source":"Otherwise, if !status_known(mysymstat) && !is_symlink(mysymstat) then mystat = mysymstat."},{"content":"symlink_status","pos":[6387,6401]},{"content":"Both member functions return mysymstat possibly first altered as follows:If status_known(mysymstat) then do nothing.","pos":[6521,6637]},{"content":"Otherwise, mysymstat = symlink_status(mypval).","pos":[6638,6684]},{"content":"Requirements","pos":[6693,6705]},{"pos":[6709,6747],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>experimental/filesystem&gt;","source":"**Header:** \\<experimental/filesystem>"},{"pos":[6754,6798],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std::experimental::filesystem","source":"**Namespace:** std::experimental::filesystem"},{"content":"See Also","pos":[6807,6815]},{"content":"Header Files Reference","pos":[6820,6842]},{"content":"filesystem&gt;","pos":[6909,6920],"source":"filesystem>"}],"content":"---\ntitle: \"directory_entry Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"filesystem/std::experimental::filesystem::directory_entry\"\n  - \"FILESYSTEM/std::experimental::filesystem::directory_entry::operator const std::experimental::filesystem::path &\"\n  - \"FILESYSTEM/std::experimental::filesystem::directory_entry::directory_entry\"\n  - \"std::experimental::filesystem::directory_entry::directory_entry\"\n  - \"FILESYSTEM/std::experimental::filesystem::directory_entry::operator=\"\n  - \"std::experimental::filesystem::directory_entry::operator=\"\n  - \"FILESYSTEM/std::experimental::filesystem::directory_entry::assign\"\n  - \"std::experimental::filesystem::directory_entry::assign\"\n  - \"FILESYSTEM/std::experimental::filesystem::directory_entry::replace_filename\"\n  - \"std::experimental::filesystem::directory_entry::replace_filename\"\n  - \"FILESYSTEM/std::experimental::filesystem::directory_entry::path\"\n  - \"std::experimental::filesystem::directory_entry::path\"\n  - \"FILESYSTEM/std::experimental::filesystem::directory_entry::status\"\n  - \"std::experimental::filesystem::directory_entry::status\"\n  - \"FILESYSTEM/std::experimental::filesystem::directory_entry::symlink_status\"\n  - \"std::experimental::filesystem::directory_entry::symlink_status\"\n  - \"FILESYSTEM/std::experimental::filesystem::directory_entry::operator<\"\n  - \"std::experimental::filesystem::directory_entry::operator<\"\n  - \"FILESYSTEM/std::experimental::filesystem::directory_entry::operator==\"\n  - \"std::experimental::filesystem::directory_entry::operator==\"\n  - \"FILESYSTEM/std::experimental::filesystem::directory_entry::operator!=\"\n  - \"std::experimental::filesystem::directory_entry::operator!=\"\n  - \"FILESYSTEM/std::experimental::filesystem::directory_entry::operator<=\"\n  - \"std::experimental::filesystem::directory_entry::operator<=\"\n  - \"FILESYSTEM/std::experimental::filesystem::directory_entry::operator>\"\n  - \"std::experimental::filesystem::directory_entry::operator>\"\n  - \"FILESYSTEM/std::experimental::filesystem::directory_entry::operator>=\"\n  - \"std::experimental::filesystem::directory_entry::operator>=\"\ndev_langs: \n  - \"C++\"\nms.assetid: 1827c67b-4137-4548-adb0-f955f7acaf08\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# directory_entry Class\nDescribes an object that is returned by `*X`, where *X* is a [directory_iterator](../standard-library/directory-iterator-class.md) or a [recursive_directory_iterator](../standard-library/recursive-directory-iterator-class.md).  \n  \n## Syntax  \n  \n```  \nclass directory_entry;  \n```  \n  \n## Remarks  \n The class stores an object of type [path](../standard-library/path-class.md). The stored `path` can be an instance of the [path Class](../standard-library/path-class.md) or of a type that is derived from `path`. It also stores two [file_type](../standard-library/filesystem-enumerations.md#filesystem__file_type) values; one that represents what is known about the status of the stored file name, and another that represents what is known about the symbolic link status of the file name.  \n  \n For more information and code examples, see [File System Navigation (C++)](../standard-library/file-system-navigation.md).  \n  \n## assign  \n  \n```  \nvoid assign(const std::experimental::filesystem::path& pval,  \n    file_status stat_arg = file_status(),  \n    file_status symstat_arg = file_status());\n```  \n  \n The member function assigns pval to mypath, stat to mystat, and symstat to mysymstat.  \n  \n## directory_entry  \n  \n```  \ndirectory_entry() = default;  \ndirectory_entry(const directory_entry&) = default;  \ndirectory_entry(directory_entry&&) noexcept = default;  \nexplicit directory_entry(const std::experimental::filesystem::path& pval,  \n    file_status stat_arg = file_status(),  \n    file_status symstat_arg = file_status());\n```  \n  \n The defaulted constructors behave as expected. The fourth constructor initializes mypath to pval, mystat to stat_arg, and mysymstat to symstat_arg.  \n  \n## operator!=  \n  \n```  \nbool operator!=(const directory_entry& right) const noexcept;  \n```  \n  \n The member function returns !(*this == right).  \n  \n## operator=  \n  \n```  \ndirectory_entry& operator=(const directory_entry&) = default;  \ndirectory_entry& operator=(directory_entry&&) noexcept = default;  \n```  \n  \n The defaulted member assignment operators behave as expected.  \n  \n## operator==  \n  \n```  \nbool operator==(const directory_entry& right) const noexcept;  \n```  \n  \n The member function returns mypath == right.mypath.  \n  \n## operator<  \n  \n```  \n \nbool operator<(const directory_entry& right) const noexcept;  \n```  \n  \n The member function returns mypath < right.mypath.  \n  \n## operator<=  \n  \n```  \nbool operator<=(const directory_entry& right) const noexcept;  \n```  \n  \n The member function returns !(right \\< *this).  \n  \n## operator>  \n  \n```  \nbool operator>(const directory_entry& right) const noexcept;  \n```  \n  \n The member function returns right \\< *this.  \n  \n## operator>=  \n  \n```  \nbool operator>=(const directory_entry& right) const noexcept;  \n```  \n  \n The member function returns !(*this < right).  \n  \n## operator const path_type&  \n  \n``` \n operator const std::experimental::filesystem::path&() const; \n```  \n  \n The member operator returns mypath.  \n  \n## path  \n  \n```  \nconst std::experimental::filesystem::path& path() const noexcept;  \n```  \n  \n The member function returns mypath.  \n  \n## replace_filename  \n  \n```  \nvoid replace_filename(\n    const std::experimental::filesystem::path& pval,  \n    file_status stat_arg = file_status(),  \n    file_status symstat_arg = file_status());\n```  \n  \n The member function replaces mypath with mypath.parent_path() / pval, mystat with stat_arg, and mysymstat with symstat_arg  \n  \n## status  \n  \n```  \nfile_status status() const; \nfile_status status(error_code& ec) const noexcept;  \n```  \n  \n Both member functions return mystat possibly first altered as follows:  \n  \n1.  If status_known(mystat) then do nothing.  \n  \n2.  Otherwise, if !status_known(mysymstat) && !is_symlink(mysymstat) then mystat = mysymstat.  \n  \n## symlink_status  \n  \n```  \nfile_status symlink_status() const; \nfile_status symlink_status(error_code& ec) const noexcept;  \n```  \n  \n Both member functions return mysymstat possibly first altered as follows:If status_known(mysymstat) then do nothing. Otherwise, mysymstat = symlink_status(mypval).  \n  \n## Requirements  \n **Header:** \\<experimental/filesystem>  \n  \n **Namespace:** std::experimental::filesystem  \n  \n## See Also  \n [Header Files Reference](../standard-library/cpp-standard-library-header-files.md)   \n [\\<filesystem>](../standard-library/filesystem.md)\n\n"}