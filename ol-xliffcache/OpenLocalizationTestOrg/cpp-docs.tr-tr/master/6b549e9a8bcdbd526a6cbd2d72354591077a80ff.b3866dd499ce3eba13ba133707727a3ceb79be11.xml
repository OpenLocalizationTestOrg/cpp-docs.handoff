{"nodes":[{"pos":[12,39],"content":"__thiscall | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"__thiscall | Microsoft Docs","pos":[0,27]}]},{"content":"__thiscall","pos":[662,672]},{"content":"Microsoft Specific","pos":[676,694]},{"content":"The <ph id=\"ph1\">`__thiscall`</ph> calling convention is used on member functions and is the default calling convention used by C++ member functions that do not use variable arguments.","pos":[698,864],"source":"The `__thiscall` calling convention is used on member functions and is the default calling convention used by C++ member functions that do not use variable arguments."},{"content":"Under <ph id=\"ph1\">`__thiscall`</ph>, the callee cleans the stack, which is impossible for <ph id=\"ph2\">`vararg`</ph> functions.","pos":[865,957],"source":" Under `__thiscall`, the callee cleans the stack, which is impossible for `vararg` functions."},{"content":"Arguments are pushed on the stack from right to left, with the <ph id=\"ph1\">`this`</ph> pointer being passed via register ECX, and not on the stack, on the x86 architecture.","pos":[958,1113],"source":" Arguments are pushed on the stack from right to left, with the `this` pointer being passed via register ECX, and not on the stack, on the x86 architecture."},{"content":"One reason to use <ph id=\"ph1\">`__thiscall`</ph> is in classes whose member functions use <ph id=\"ph2\">`__clrcall`</ph> by default.","pos":[1120,1215],"source":"One reason to use `__thiscall` is in classes whose member functions use `__clrcall` by default."},{"content":"In that case, you can use <ph id=\"ph1\">`__thiscall`</ph> to make individual member functions callable from native code.","pos":[1216,1317],"source":" In that case, you can use `__thiscall` to make individual member functions callable from native code."},{"pos":[1324,1499],"content":"When compiling with <bpt id=\"p1\">[</bpt>/clr:pure<ept id=\"p1\">](../build/reference/clr-common-language-runtime-compilation.md)</ept>, all functions and function pointers are <ph id=\"ph1\">`__clrcall`</ph> unless specified otherwise.","source":"When compiling with [/clr:pure](../build/reference/clr-common-language-runtime-compilation.md), all functions and function pointers are `__clrcall` unless specified otherwise."},{"pos":[1506,1659],"content":"In releases before Visual C++ 2005, the thiscall calling convention could not be explicitly specified in a program, because <ph id=\"ph1\">`thiscall`</ph> was not a keyword.","source":"In releases before Visual C++ 2005, the thiscall calling convention could not be explicitly specified in a program, because `thiscall` was not a keyword."},{"content":"member functions use the <ph id=\"ph1\">`__cdecl`</ph> calling convention.","pos":[1675,1729],"source":" member functions use the `__cdecl` calling convention."},{"content":"All function arguments are pushed on the stack, with the <ph id=\"ph1\">`this`</ph> pointer placed on the stack last","pos":[1730,1826],"source":" All function arguments are pushed on the stack, with the `this` pointer placed on the stack last"},{"content":"Because this calling convention applies only to C++, there is no C name decoration scheme.","pos":[1833,1923]},{"pos":[1930,2068],"content":"On ARM and <ph id=\"ph1\">[!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]</ph> machines, <ph id=\"ph2\">`__thiscall`</ph> is accepted and ignored by the compiler.","source":"On ARM and [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)] machines, `__thiscall` is accepted and ignored by the compiler."},{"content":"For non-static class functions, if the function is defined out-of-line, the calling convention modifier does not have to be specified on the out-of-line definition.","pos":[2075,2239]},{"content":"That is, for class non-static member methods, the calling convention specified during declaration is assumed at the point of definition.","pos":[2240,2376]},{"content":"END Microsoft Specific","pos":[2385,2407]},{"content":"See Also","pos":[2416,2424]},{"content":"Argument Passing and Naming Conventions","pos":[2429,2468]}],"content":"---\ntitle: \"__thiscall | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"__thiscall\"\n  - \"__thiscall_cpp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"__thiscall keyword [C++]\"\nms.assetid: a6a22dd2-0101-4885-b33b-22f6057965df\ncaps.latest.revision: 14\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# __thiscall\n## Microsoft Specific  \n The `__thiscall` calling convention is used on member functions and is the default calling convention used by C++ member functions that do not use variable arguments. Under `__thiscall`, the callee cleans the stack, which is impossible for `vararg` functions. Arguments are pushed on the stack from right to left, with the `this` pointer being passed via register ECX, and not on the stack, on the x86 architecture.  \n  \n One reason to use `__thiscall` is in classes whose member functions use `__clrcall` by default. In that case, you can use `__thiscall` to make individual member functions callable from native code.  \n  \n When compiling with [/clr:pure](../build/reference/clr-common-language-runtime-compilation.md), all functions and function pointers are `__clrcall` unless specified otherwise.  \n  \n In releases before Visual C++ 2005, the thiscall calling convention could not be explicitly specified in a program, because `thiscall` was not a keyword.  \n  \n `vararg` member functions use the `__cdecl` calling convention. All function arguments are pushed on the stack, with the `this` pointer placed on the stack last  \n  \n Because this calling convention applies only to C++, there is no C name decoration scheme.  \n  \n On ARM and [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)] machines, `__thiscall` is accepted and ignored by the compiler.  \n  \n For non-static class functions, if the function is defined out-of-line, the calling convention modifier does not have to be specified on the out-of-line definition. That is, for class non-static member methods, the calling convention specified during declaration is assumed at the point of definition.  \n  \n## END Microsoft Specific  \n  \n## See Also  \n [Argument Passing and Naming Conventions](../cpp/argument-passing-and-naming-conventions.md)"}