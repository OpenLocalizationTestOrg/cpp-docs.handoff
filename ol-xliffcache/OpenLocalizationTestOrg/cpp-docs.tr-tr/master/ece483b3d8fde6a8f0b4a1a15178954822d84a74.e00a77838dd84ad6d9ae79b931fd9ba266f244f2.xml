{"nodes":[{"pos":[12,36],"content":"ullptr | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ullptr | Microsoft Docs","pos":[0,23]}]},{"content":"nullptr","pos":[623,630]},{"content":"Designates a null pointer constant of type <ph id=\"ph1\">`std::nullptr_t`</ph>, which is convertible to any raw pointer type.","pos":[631,737],"source":"Designates a null pointer constant of type `std::nullptr_t`, which is convertible to any raw pointer type."},{"content":"Although you can use the keyword <ph id=\"ph1\">`nullptr`</ph> without including any headers, if your code uses the type <ph id=\"ph2\">`std::nullptr_t`</ph>, then you must define it by including the header <ph id=\"ph3\">`&lt;cstddef&gt;`</ph>.","pos":[739,918],"source":"  Although you can use the keyword `nullptr` without including any headers, if your code uses the type `std::nullptr_t`, then you must define it by including the header `<cstddef>`."},{"pos":[926,1441],"content":"[!NOTE]\n The `nullptr` keyword is also defined in C++/CLI for managed code applications and is not interchangeable with the ISO Standard C++ keyword. If your code might be compiled by using the [/clr](../build/reference/clr-common-language-runtime-compilation.md) compiler option, which targets managed code, then use `__nullptr` in any line of code where you must guarantee that the compiler uses the native C++ interpretation. For more information, see [nullptr](../windows/nullptr-cpp-component-extensions.md).","leadings":["","> "],"nodes":[{"content":" The `nullptr` keyword is also defined in C++/CLI for managed code applications and is not interchangeable with the ISO Standard C++ keyword. If your code might be compiled by using the [/clr](../build/reference/clr-common-language-runtime-compilation.md) compiler option, which targets managed code, then use `__nullptr` in any line of code where you must guarantee that the compiler uses the native C++ interpretation. For more information, see [nullptr](../windows/nullptr-cpp-component-extensions.md).","pos":[8,513],"nodes":[{"content":"The <ph id=\"ph1\">`nullptr`</ph> keyword is also defined in C++/CLI for managed code applications and is not interchangeable with the ISO Standard C++ keyword.","pos":[1,141],"source":" The `nullptr` keyword is also defined in C++/CLI for managed code applications and is not interchangeable with the ISO Standard C++ keyword."},{"content":"If your code might be compiled by using the <bpt id=\"p1\">[</bpt>/clr<ept id=\"p1\">](../build/reference/clr-common-language-runtime-compilation.md)</ept> compiler option, which targets managed code, then use <ph id=\"ph1\">`__nullptr`</ph> in any line of code where you must guarantee that the compiler uses the native C++ interpretation.","pos":[142,420],"source":" If your code might be compiled by using the [/clr](../build/reference/clr-common-language-runtime-compilation.md) compiler option, which targets managed code, then use `__nullptr` in any line of code where you must guarantee that the compiler uses the native C++ interpretation."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>nullptr<ept id=\"p1\">](../windows/nullptr-cpp-component-extensions.md)</ept>.","pos":[421,505],"source":" For more information, see [nullptr](../windows/nullptr-cpp-component-extensions.md)."}]}]},{"content":"Remarks","pos":[1450,1457]},{"content":"Avoid using <ph id=\"ph1\">`NULL`</ph> or zero (<ph id=\"ph2\">`0`</ph>) as a null pointer constant; <ph id=\"ph3\">`nullptr`</ph> is less vulnerable to misuse and works better in most situations.","pos":[1461,1597],"source":"Avoid using `NULL` or zero (`0`) as a null pointer constant; `nullptr` is less vulnerable to misuse and works better in most situations."},{"content":"For example, given <ph id=\"ph1\">`func(std::pair&lt;const char *, double&gt;)`</ph>, then calling <ph id=\"ph2\">`func(std::make_pair(NULL, 3.14))`</ph> causes a compiler error.","pos":[1599,1731],"source":"  For example, given `func(std::pair<const char *, double>)`, then calling `func(std::make_pair(NULL, 3.14))` causes a compiler error."},{"content":"The macro NULL expands to <ph id=\"ph1\">`0`</ph>, so that the call <ph id=\"ph2\">`std::make_pair(0, 3.14)`</ph> returns <ph id=\"ph3\">`std::pair&lt;int, double&gt;`</ph>, which is not convertible to func()'s <ph id=\"ph4\">`std::pair&lt;const char *, double&gt;`</ph> parameter type.","pos":[1733,1927],"source":"  The macro NULL expands to `0`, so that the call `std::make_pair(0, 3.14)` returns `std::pair<int, double>`, which is not convertible to func()'s `std::pair<const char *, double>` parameter type."},{"content":"Calling <ph id=\"ph1\">`func(std::make_pair(nullptr, 3.14))`</ph> successfully compiles because <ph id=\"ph2\">`std::make_pair(nullptr, 3.14)`</ph> returns <ph id=\"ph3\">`std::pair&lt;std::nullptr_t, double&gt;`</ph>, which is convertible to <ph id=\"ph4\">`std::pair&lt;const char *, double&gt;`</ph>.","pos":[1929,2140],"source":"  Calling `func(std::make_pair(nullptr, 3.14))` successfully compiles because `std::make_pair(nullptr, 3.14)` returns `std::pair<std::nullptr_t, double>`, which is convertible to `std::pair<const char *, double>`."},{"content":"See Also","pos":[2149,2157]},{"content":"Keywords","pos":[2162,2170]},{"content":"nullptr","pos":[2201,2208]}],"content":"---\ntitle: \"nullptr | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"nullptr_cpp\"\n  - \"nullptr\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"nullptr keyword [C++]\"\nms.assetid: e9d80ea6-2506-4eb5-b47b-2349df085832\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# nullptr\nDesignates a null pointer constant of type `std::nullptr_t`, which is convertible to any raw pointer type.  Although you can use the keyword `nullptr` without including any headers, if your code uses the type `std::nullptr_t`, then you must define it by including the header `<cstddef>`.  \n  \n> [!NOTE]\n>  The `nullptr` keyword is also defined in C++/CLI for managed code applications and is not interchangeable with the ISO Standard C++ keyword. If your code might be compiled by using the [/clr](../build/reference/clr-common-language-runtime-compilation.md) compiler option, which targets managed code, then use `__nullptr` in any line of code where you must guarantee that the compiler uses the native C++ interpretation. For more information, see [nullptr](../windows/nullptr-cpp-component-extensions.md).  \n  \n## Remarks  \n Avoid using `NULL` or zero (`0`) as a null pointer constant; `nullptr` is less vulnerable to misuse and works better in most situations.  For example, given `func(std::pair<const char *, double>)`, then calling `func(std::make_pair(NULL, 3.14))` causes a compiler error.  The macro NULL expands to `0`, so that the call `std::make_pair(0, 3.14)` returns `std::pair<int, double>`, which is not convertible to func()'s `std::pair<const char *, double>` parameter type.  Calling `func(std::make_pair(nullptr, 3.14))` successfully compiles because `std::make_pair(nullptr, 3.14)` returns `std::pair<std::nullptr_t, double>`, which is convertible to `std::pair<const char *, double>`.  \n  \n## See Also  \n [Keywords](../cpp/keywords-cpp.md)   \n [nullptr](../windows/nullptr-cpp-component-extensions.md)"}