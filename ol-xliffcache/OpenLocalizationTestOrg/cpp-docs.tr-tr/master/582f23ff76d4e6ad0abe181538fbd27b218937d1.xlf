<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">582f23ff76d4e6ad0abe181538fbd27b218937d1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\tn026-ddx-and-ddv-routines.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6b408c87cc22962c9e7c815c8999749cc76c4228</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a15ca82fb7e0c577421c0c29d1bea47dbe58c43d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>TN026: DDX and DDV Routines | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>TN026: DDX and DDV Routines</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following technical note has not been updated since it was first included in the online documentation.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>As a result, some procedures and topics might be out of date or incorrect.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For the latest information, it is recommended that you search for the topic of interest in the online documentation index.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This note describes the dialog data exchange (DDX) and dialog data validation (DDV) architecture.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It also describes how you write a DDX_ or DDV_ procedure and how you can extend ClassWizard to use your routines.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Overview of Dialog Data Exchange</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>All dialog data functions are done with C++ code.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>There are no special resources or magic macros.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The heart of the mechanism is a virtual function that is overridden in every dialog class that does dialog data exchange and validation.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>It is always found in this form:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The special format AFX comments allow ClassWizard to locate and edit the code within this function.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Code that is not compatible with ClassWizard should be placed outside of the special format comments.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In the above example, &lt;data_exchange_function_call&gt; is in the form:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>and &lt;data_validation_function_call&gt; is optional and is in the form:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>More than one DDX_/DDV_ pair may be included in each <ph id="ph1">`DoDataExchange`</ph> function.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>See 'afxdd_.h' for a list of all the dialog data exchange routines and dialog data validation routines provided with MFC.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Dialog data is just that: member data in the <bpt id="p1">**</bpt>CMyDialog<ept id="p1">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It is not stored in a struct or anything similar.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Notes</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Although we call this "dialog data," all features are available in any class derived from <ph id="ph1">`CWnd`</ph> and are not limited to just dialogs.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Initial values of data are set in the standard C++ constructor, usually in a block with <ph id="ph1">`//{{AFX_DATA_INIT`</ph> and <ph id="ph2">`//}}AFX_DATA_INIT`</ph> comments.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>is the operation that does the initialization and error handling around the call to <ph id="ph1">`DoDataExchange`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can call <ph id="ph1">`CWnd::UpdateData`</ph> at any time to perform data exchange and validation.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>By default <ph id="ph1">`UpdateData`</ph>(TRUE) is called in the default <ph id="ph2">`CDialog::OnOK`</ph> handler and <ph id="ph3">`UpdateData`</ph>(FALSE) is called in the default <ph id="ph4">`CDialog::OnInitDialog`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The DDV_ routine should immediately follow the DDX_ routine for that <bpt id="p1">*</bpt>field<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>How Does It Work</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You do not need to understand the following in order to use dialog data.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>However, understanding how this works behind the scenes will help you write your own exchange or validation procedure.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DoDataExchange`</ph> member function is much like the <ph id="ph2">`Serialize`</ph> member function - it is responsible for getting or setting data to/from an external form (in this case controls in a dialog) from/to member data in the class.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`pDX`</ph> parameter is the context for doing data exchange and is similar to the <ph id="ph2">`CArchive`</ph> parameter to <ph id="ph3">`CObject::Serialize`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`pDX`</ph> (a <ph id="ph2">`CDataExchange`</ph> object) has a direction flag much like <ph id="ph3">`CArchive`</ph> has a direction flag:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>!m_bSaveAndValidate<ept id="p1">**</ept>, then load the data state into the controls.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`m_bSaveAndValidate`</ph>, then set the data state from the controls.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Validation only occurs when <ph id="ph1">`m_bSaveAndValidate`</ph> is set.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The value of <ph id="ph1">`m_bSaveAndValidate`</ph> is determined by the BOOL parameter to <ph id="ph2">`CWnd::UpdateData`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>There are three other interesting <ph id="ph1">`CDataExchange`</ph> members:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>: The window (usually a dialog) that contains the controls.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This is to prevent callers of the DDX_ and DDV_ global functions from having to pass 'this' to every DDX/DDV routine.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>, and <ph id="ph1">`PrepareEditCtrl`</ph>: Prepares a dialog control for data exchange.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Stores that control's handle for setting the focus if a validation fails.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>is used for nonedit controls and <ph id="ph1">`PrepareEditCtrl`</ph> is used for edit controls.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Fail<ept id="p1">**</ept>: Called after bringing up a message box alerting the user to the input error.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This routine will restore the focus to the last control (the last call to <ph id="ph1">`PrepareCtrl`/`PrepareEditCtrl`</ph>) and throw an exception.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This member function may be called from both DDX_ and DDV_ routines.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>User Extensions</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>There are several ways to extend the default DDX/DDV mechanism.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Add new data types.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Add new exchange procedures (DDX_).</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Add new validation procedures (DDV_).</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Pass arbitrary expressions to the validation procedures.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Such arbitrary expressions cannot be edited by ClassWizard and therefore should be moved outside of the special format comments (//{{AFX_DATA_MAP(CMyClass)).</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Have the <bpt id="p1">**</bpt>DoDialogExchange<ept id="p1">**</ept> member function include conditionals or any other valid C++ statements with intermixed exchange and validation function calls.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>As shown above, such code cannot be edited by ClassWizard and should be used only outside of the special format comments.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>ClassWizard Support</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>ClassWizard supports a subset of DDX/DDV customizations by allowing you to integrate your own DDX_ and DDV_ routines into the ClassWizard user interface.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Doing this is only cost beneficial if you plan to reuse particular DDX and DDV routines in a project or in many projects.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To do this, special entries are made in DDX.CLW (previous versions of Visual C++ stored this information in APSTUDIO.INI) or in your project's .CLW file.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The special entries can be entered either in the [General Info] section of your project's .CLW file or in the [ExtraDDX] section of the DDX.CLW file in the \Program Files\Microsoft Visual Studio\Visual C++\bin directory.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You may need to create the DDX.CLW file if it doesn't already exist.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If you plan to use the custom DDX_/DDV_ routines only in a certain project, add the entries to the [General Info] section of your project .CLW file instead.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If you plan to use the routines on many projects, add the entries to the [ExtraDDX] section of DDX.CLW.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The general format of these special entries is:</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>where n is the number of ExtraDDX lines to follow</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>where  is a number 1 – n indicating which DDX type in the list that is being defined.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Each field is delimited by a ';' character.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The fields and their purpose are described below.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>keys&gt;</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>= list of single characters indicating for which dialog controls this variable type is allowed.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>E = edit</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>C = two-state check box</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>c = tri-state check box</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>R = first radio button in a group</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>L = nonsorted list box</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>l = sorted list box</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>M = combo box (with edit item)</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>N = nonsorted drop list</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>n = sorted drop list</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>1 = if the DDX insert should be added to head of list (default is add to tail) This is generally used for DDX routines that transfer the 'Control' property.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>vb-keys&gt;</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This field is used only in the 16-bit product for VBX controls (VBX controls are not supported in the 32-bit product)</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>prompt&gt;</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>String to place in the Property combo box (no quotes)</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>type&gt;</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Single identifier for type to emit in the header file.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In our example above with DDX_Time, this would be set to CTime.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>vb-keys&gt;</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Not used in this version and should always be empty</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>initValue&gt;</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Initial value — 0 or blank.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>If it is blank, then no initialization line will be written in the //{{AFX_DATA_INIT section of the implementation file.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A blank entry should be used for C++ objects (such as <ph id="ph1">`CString`</ph>, <ph id="ph2">`CTime`</ph>, and so on) that have constructors that guarantee correct initialization.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>&lt;DDX_Proc&gt;</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Single identifier for the DDX_ procedure.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The C++ function name must start with "DDX_," but don't include "DDX_" in the &lt;DDX_Proc&gt; identifier.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>In the example above, the &lt;DDX_Proc&gt; identifier would be Time.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>When ClassWizard writes the function call to the implementation file in the {{AFX_DATA_MAP section, it appends this name to DDX_, thus arriving at DDX_Time.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>comment&gt;</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Comment to show in dialog for variable with this DDX.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Place any text you would like here, and usually provide something that describes the operation performed by the DDX/DDV pair.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>&lt;DDV_Proc&gt;</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The DDV portion of the entry is optional.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Not all DDX routines have corresponding DDV routines.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Often, it is more convenient to include the validation phase as an integral part of the transfer.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>This is often the case when your DDV routine doesn't require any parameters, because ClassWizard does not support DDV routines without any parameters.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>arg&gt;</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Single identifier for the DDV_ procedure.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The C++ function name must start with "DDV_", but do not include "DDX_" in the &lt;DDX_Proc&gt; identifier.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>followed by 1 or 2 DDV args:</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>promptX&gt;</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>string to place above the edit item (with &amp; for accelerator)</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>fmtX&gt;</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>format character for the arg type, one of</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>d = int</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>u = unsigned</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>D = long int (that is, long)</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>U = long unsigned (that is, DWORD)</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>f = float</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>F = double</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>s = string</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Technical Notes by Number</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Technical Notes by Category</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>