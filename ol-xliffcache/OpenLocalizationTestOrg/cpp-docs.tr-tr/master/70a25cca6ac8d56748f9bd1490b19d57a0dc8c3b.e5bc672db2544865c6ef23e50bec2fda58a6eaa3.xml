{"nodes":[{"pos":[12,47],"content":"source_block Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"source_block Class | Microsoft Docs","pos":[0,35]}]},{"pos":[628,646],"content":"source_block Class","linkify":"source_block Class","nodes":[{"content":"source_block Class","pos":[0,18]}]},{"content":"The <ph id=\"ph1\">`source_block`</ph> class is an abstract base class for source-only blocks.","pos":[647,721],"source":"The `source_block` class is an abstract base class for source-only blocks."},{"content":"The class provides basic link management functionality as well as common error checks.","pos":[722,808]},{"pos":[817,823],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1061,1071],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Link registry to be used for holding the target links.","pos":[1100,1154]},{"content":"Processor type for message processing.","pos":[1188,1226]},{"pos":[1235,1242],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1252,1267],"content":"Public Typedefs","linkify":"Public Typedefs","nodes":[{"content":"Public Typedefs","pos":[0,15]}]},{"content":"Name","pos":[1274,1278]},{"content":"Description","pos":[1279,1290]},{"content":"The iterator to walk the connected targets.","pos":[1346,1389]},{"pos":[1400,1419],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1426,1430]},{"content":"Description","pos":[1431,1442]},{"pos":[1480,1527],"content":"<bpt id=\"p1\">[</bpt>source_block::source_block Constructor<ept id=\"p1\">](#ctor)</ept>","source":"[source_block::source_block Constructor](#ctor)"},{"pos":[1528,1563],"content":"Constructs a <ph id=\"ph1\">`source_block`</ph> object.","source":"Constructs a `source_block` object."},{"pos":[1568,1615],"content":"<bpt id=\"p1\">[</bpt>source_block::~source_block Destructor<ept id=\"p1\">](#dtor)</ept>","source":"[source_block::~source_block Destructor](#dtor)"},{"pos":[1616,1651],"content":"Destroys the <ph id=\"ph1\">`source_block`</ph> object.","source":"Destroys the `source_block` object."},{"pos":[1662,1676],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1683,1687]},{"content":"Description","pos":[1688,1699]},{"pos":[1737,1775],"content":"<bpt id=\"p1\">[</bpt>source_block::accept Method<ept id=\"p1\">](#accept)</ept>","source":"[source_block::accept Method](#accept)"},{"pos":[1776,1879],"content":"Accepts a message that was offered by this <ph id=\"ph1\">`source_block`</ph> object, transferring ownership to the caller.","source":"Accepts a message that was offered by this `source_block` object, transferring ownership to the caller."},{"pos":[1884,1932],"content":"<bpt id=\"p1\">[</bpt>source_block::acquire_ref Method<ept id=\"p1\">](#acquire_ref)</ept>","source":"[source_block::acquire_ref Method](#acquire_ref)"},{"pos":[1933,2011],"content":"Acquires a reference count on this <ph id=\"ph1\">`source_block`</ph> object, to prevent deletion.","source":"Acquires a reference count on this `source_block` object, to prevent deletion."},{"pos":[2016,2056],"content":"<bpt id=\"p1\">[</bpt>source_block::consume Method<ept id=\"p1\">](#consume)</ept>","source":"[source_block::consume Method](#consume)"},{"pos":[2057,2203],"content":"Consumes a message previously offered by this <ph id=\"ph1\">`source_block`</ph> object and successfully reserved by the target, transferring ownership to the caller.","source":"Consumes a message previously offered by this `source_block` object and successfully reserved by the target, transferring ownership to the caller."},{"pos":[2208,2256],"content":"<bpt id=\"p1\">[</bpt>source_block::link_target Method<ept id=\"p1\">](#link_target)</ept>","source":"[source_block::link_target Method](#link_target)"},{"pos":[2257,2308],"content":"Links a target block to this <ph id=\"ph1\">`source_block`</ph> object.","source":"Links a target block to this `source_block` object."},{"pos":[2313,2353],"content":"<bpt id=\"p1\">[</bpt>source_block::release Method<ept id=\"p1\">](#release)</ept>","source":"[source_block::release Method](#release)"},{"content":"Releases a previous successful message reservation.","pos":[2354,2405]},{"pos":[2410,2458],"content":"<bpt id=\"p1\">[</bpt>source_block::release_ref Method<ept id=\"p1\">](#release_ref)</ept>","source":"[source_block::release_ref Method](#release_ref)"},{"pos":[2459,2516],"content":"Releases a reference count on this <ph id=\"ph1\">`source_block`</ph> object.","source":"Releases a reference count on this `source_block` object."},{"pos":[2521,2561],"content":"<bpt id=\"p1\">[</bpt>source_block::reserve Method<ept id=\"p1\">](#reserve)</ept>","source":"[source_block::reserve Method](#reserve)"},{"pos":[2562,2630],"content":"Reserves a message previously offered by this <ph id=\"ph1\">`source_block`</ph> object.","source":"Reserves a message previously offered by this `source_block` object."},{"pos":[2635,2687],"content":"<bpt id=\"p1\">[</bpt>source_block::unlink_target Method<ept id=\"p1\">](#unlink_target)</ept>","source":"[source_block::unlink_target Method](#unlink_target)"},{"pos":[2688,2743],"content":"Unlinks a target block from this <ph id=\"ph1\">`source_block`</ph> object.","source":"Unlinks a target block from this `source_block` object."},{"pos":[2748,2802],"content":"<bpt id=\"p1\">[</bpt>source_block::unlink_targets Method<ept id=\"p1\">](#unlink_targets)</ept>","source":"[source_block::unlink_targets Method](#unlink_targets)"},{"content":"Unlinks all target blocks from this <ph id=\"ph1\">`source_block`</ph> object.","pos":[2803,2861],"source":"Unlinks all target blocks from this `source_block` object."},{"content":"(Overrides <bpt id=\"p1\">[</bpt>ISource::unlink_targets<ept id=\"p1\">](isource-class.md#unlink_targets)</ept>.)","pos":[2862,2933],"source":" (Overrides [ISource::unlink_targets](isource-class.md#unlink_targets).)"},{"pos":[2944,2961],"content":"Protected Methods","linkify":"Protected Methods","nodes":[{"content":"Protected Methods","pos":[0,17]}]},{"content":"Name","pos":[2968,2972]},{"content":"Description","pos":[2973,2984]},{"pos":[3022,3076],"content":"<bpt id=\"p1\">[</bpt>source_block::accept_message Method<ept id=\"p1\">](#accept_message)</ept>","source":"[source_block::accept_message Method](#accept_message)"},{"content":"When overridden in a derived class, accepts an offered message by the source.","pos":[3077,3154]},{"content":"Message blocks should override this method to validate the <ph id=\"ph1\">`_MsgId`</ph> and return a message.","pos":[3155,3244],"source":" Message blocks should override this method to validate the `_MsgId` and return a message."},{"pos":[3249,3295],"content":"<bpt id=\"p1\">[</bpt>source_block::async_send Method<ept id=\"p1\">](#async_send)</ept>","source":"[source_block::async_send Method](#async_send)"},{"content":"Asynchronously queues up messages and starts a propagation task, if this has not been done already","pos":[3296,3394]},{"pos":[3399,3455],"content":"<bpt id=\"p1\">[</bpt>source_block::consume_message Method<ept id=\"p1\">](#consume_message)</ept>","source":"[source_block::consume_message Method](#consume_message)"},{"content":"When overridden in a derived class, consumes a message that was previously reserved.","pos":[3456,3540]},{"pos":[3545,3621],"content":"<bpt id=\"p1\">[</bpt>source_block::enable_batched_processing Method<ept id=\"p1\">](#enable_batched_processing)</ept>","source":"[source_block::enable_batched_processing Method](#enable_batched_processing)"},{"content":"Enables batched processing for this block.","pos":[3622,3664]},{"pos":[3669,3729],"content":"<bpt id=\"p1\">[</bpt>source_block::initialize_source Method<ept id=\"p1\">](#initialize_source)</ept>","source":"[source_block::initialize_source Method](#initialize_source)"},{"pos":[3730,3794],"content":"Initializes the <ph id=\"ph1\">`message_propagator`</ph> within this <ph id=\"ph2\">`source_block`</ph>.","source":"Initializes the `message_propagator` within this `source_block`."},{"pos":[3799,3873],"content":"<bpt id=\"p1\">[</bpt>source_block::link_target_notification Method<ept id=\"p1\">](#link_target_notification)</ept>","source":"[source_block::link_target_notification Method](#link_target_notification)"},{"pos":[3874,3963],"content":"A callback that notifies that a new target has been linked to this <ph id=\"ph1\">`source_block`</ph> object.","source":"A callback that notifies that a new target has been linked to this `source_block` object."},{"pos":[3968,4038],"content":"<bpt id=\"p1\">[</bpt>source_block::process_input_messages Method<ept id=\"p1\">](#process_input_messages)</ept>","source":"[source_block::process_input_messages Method](#process_input_messages)"},{"content":"Process input messages.","pos":[4039,4062]},{"content":"This is only useful for propagator blocks, which derive from source_block","pos":[4063,4136]},{"pos":[4141,4217],"content":"<bpt id=\"p1\">[</bpt>source_block::propagate_output_messages Method<ept id=\"p1\">](#propagate_output_messages)</ept>","source":"[source_block::propagate_output_messages Method](#propagate_output_messages)"},{"content":"Propagate messages to targets.","pos":[4218,4248]},{"pos":[4253,4327],"content":"<bpt id=\"p1\">[</bpt>source_block::propagate_to_any_targets Method<ept id=\"p1\">](#propagate_to_any_targets)</ept>","source":"[source_block::propagate_to_any_targets Method](#propagate_to_any_targets)"},{"content":"When overridden in a derived class, propagates the given message to any or all of the linked targets.","pos":[4328,4429]},{"content":"This is the main propagation routine for message blocks.","pos":[4430,4486]},{"pos":[4491,4547],"content":"<bpt id=\"p1\">[</bpt>source_block::release_message Method<ept id=\"p1\">](#release_message)</ept>","source":"[source_block::release_message Method](#release_message)"},{"content":"When overridden in a derived class, releases a previous message reservation.","pos":[4548,4624]},{"pos":[4629,4683],"content":"<bpt id=\"p1\">[</bpt>source_block::remove_targets Method<ept id=\"p1\">](#remove_targets)</ept>","source":"[source_block::remove_targets Method](#remove_targets)"},{"content":"Removes all target links for this source block.","pos":[4684,4731]},{"content":"This should be called from the destructor.","pos":[4732,4774]},{"pos":[4779,4835],"content":"<bpt id=\"p1\">[</bpt>source_block::reserve_message Method<ept id=\"p1\">](#reserve_message)</ept>","source":"[source_block::reserve_message Method](#reserve_message)"},{"pos":[4836,4940],"content":"When overridden in a derived class, reserves a message previously offered by this <ph id=\"ph1\">`source_block`</ph> object.","source":"When overridden in a derived class, reserves a message previously offered by this `source_block` object."},{"pos":[4945,5007],"content":"<bpt id=\"p1\">[</bpt>source_block::resume_propagation Method<ept id=\"p1\">](#resume_propagation)</ept>","source":"[source_block::resume_propagation Method](#resume_propagation)"},{"content":"When overridden in a derived class, resumes propagation after a reservation has been released.","pos":[5008,5102]},{"pos":[5107,5151],"content":"<bpt id=\"p1\">[</bpt>source_block::sync_send Method<ept id=\"p1\">](#sync_send)</ept>","source":"[source_block::sync_send Method](#sync_send)"},{"content":"Synchronously queues up messages and starts a propagation task, if this has not been done already.","pos":[5152,5250]},{"pos":[5255,5333],"content":"<bpt id=\"p1\">[</bpt>source_block::unlink_target_notification Method<ept id=\"p1\">](#unlink_target_notification)</ept>","source":"[source_block::unlink_target_notification Method](#unlink_target_notification)"},{"pos":[5334,5423],"content":"A callback that notifies that a target has been unlinked from this <ph id=\"ph1\">`source_block`</ph> object.","source":"A callback that notifies that a target has been unlinked from this `source_block` object."},{"pos":[5428,5518],"content":"<bpt id=\"p1\">[</bpt>source_block::wait_for_outstanding_async_sends Method<ept id=\"p1\">](#wait_for_outstanding_async_sends)</ept>","source":"[source_block::wait_for_outstanding_async_sends Method](#wait_for_outstanding_async_sends)"},{"content":"Waits for all asynchronous propagations to complete.","pos":[5519,5571]},{"content":"This propagator-specific spin wait is used in destructors of message blocks to make sure that all asynchronous propagations have time to finish before destroying the block.","pos":[5572,5744]},{"pos":[5754,5761],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Message blocks should derive from this block to take advantage of link management and synchronization provided by this class.","pos":[5765,5890]},{"pos":[5899,5920],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[5924,5951],"content":"<bpt id=\"p1\">[</bpt>ISource<ept id=\"p1\">](isource-class.md)</ept>","source":"[ISource](isource-class.md)"},{"pos":[5981,5993],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[5997,6017],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> agents.h","source":"**Header:** agents.h"},{"pos":[6024,6050],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[6060,6110],"content":"<bpt id=\"p1\">&lt;a name=\"accept\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  source_block::accept Method","linkify":"<a name=\"accept\"></a>  source_block::accept Method","source":"<a name=\"accept\"></a>  source_block::accept Method"},{"pos":[6114,6217],"content":"Accepts a message that was offered by this <ph id=\"ph1\">`source_block`</ph> object, transferring ownership to the caller.","source":"Accepts a message that was offered by this `source_block` object, transferring ownership to the caller."},{"pos":[6361,6371],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the offered <ph id=\"ph2\">`message`</ph> object.","pos":[6387,6449],"source":" The `runtime_object_identity` of the offered `message` object."},{"content":"A pointer to the target block that is calling the <ph id=\"ph1\">`accept`</ph> method.","pos":[6470,6536],"source":" A pointer to the target block that is calling the `accept` method."},{"pos":[6546,6558],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6562,6633],"content":"A pointer to the <ph id=\"ph1\">`message`</ph> object that the caller now has ownership of.","source":"A pointer to the `message` object that the caller now has ownership of."},{"pos":[6643,6650],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6654,6795],"content":"The method throws an <bpt id=\"p1\">[</bpt>invalid_argument<ept id=\"p1\">](../../../standard-library/invalid-argument-class.md)</ept> exception if the parameter <ph id=\"ph1\">`_PTarget`</ph> is <ph id=\"ph2\">`NULL`</ph>.","source":"The method throws an [invalid_argument](../../../standard-library/invalid-argument-class.md) exception if the parameter `_PTarget` is `NULL`."},{"content":"The <ph id=\"ph1\">`accept`</ph> method is called by a target while a message is being offered by this <ph id=\"ph2\">`ISource`</ph> block.","pos":[6802,6901],"source":"The `accept` method is called by a target while a message is being offered by this `ISource` block."},{"content":"The message pointer returned may be different from the one passed into the <ph id=\"ph1\">`propagate`</ph> method of the <ph id=\"ph2\">`ITarget`</ph> block, if this source decides to make a copy of the message.","pos":[6902,7073],"source":" The message pointer returned may be different from the one passed into the `propagate` method of the `ITarget` block, if this source decides to make a copy of the message."},{"pos":[7083,7149],"content":"<bpt id=\"p1\">&lt;a name=\"accept_message\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  source_block::accept_message Method","linkify":"<a name=\"accept_message\"></a>  source_block::accept_message Method","source":"<a name=\"accept_message\"></a>  source_block::accept_message Method"},{"content":"When overridden in a derived class, accepts an offered message by the source.","pos":[7153,7230]},{"content":"Message blocks should override this method to validate the <ph id=\"ph1\">`_MsgId`</ph> and return a message.","pos":[7231,7320],"source":" Message blocks should override this method to validate the `_MsgId` and return a message."},{"pos":[7426,7436],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The runtime object identity of the <ph id=\"ph1\">`message`</ph> object.","pos":[7452,7504],"source":" The runtime object identity of the `message` object."},{"pos":[7514,7526],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to the message that the caller now has ownership of.","pos":[7530,7592]},{"pos":[7602,7609],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To transfer ownership, the original message pointer should be returned.","pos":[7613,7684]},{"content":"To maintain ownership, a copy of message payload needs to be made and returned.","pos":[7685,7764]},{"pos":[7774,7834],"content":"<bpt id=\"p1\">&lt;a name=\"acquire_ref\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  source_block::acquire_ref Method","linkify":"<a name=\"acquire_ref\"></a>  source_block::acquire_ref Method","source":"<a name=\"acquire_ref\"></a>  source_block::acquire_ref Method"},{"pos":[7838,7916],"content":"Acquires a reference count on this <ph id=\"ph1\">`source_block`</ph> object, to prevent deletion.","source":"Acquires a reference count on this `source_block` object, to prevent deletion."},{"pos":[7998,8005],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8009,8122],"content":"This method is called by an <ph id=\"ph1\">`ITarget`</ph> object that is being linked to this source during the <ph id=\"ph2\">`link_target`</ph> method.","source":"This method is called by an `ITarget` object that is being linked to this source during the `link_target` method."},{"pos":[8132,8190],"content":"<bpt id=\"p1\">&lt;a name=\"async_send\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  source_block::async_send Method","linkify":"<a name=\"async_send\"></a>  source_block::async_send Method","source":"<a name=\"async_send\"></a>  source_block::async_send Method"},{"content":"Asynchronously queues up messages and starts a propagation task, if this has not been done already","pos":[8194,8292]},{"pos":[8381,8391],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a <ph id=\"ph1\">`message`</ph> object to asynchronously send.","pos":[8405,8460],"source":" A pointer to a `message` object to asynchronously send."},{"pos":[8470,8522],"content":"<bpt id=\"p1\">&lt;a name=\"consume\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  source_block::consume Method","linkify":"<a name=\"consume\"></a>  source_block::consume Method","source":"<a name=\"consume\"></a>  source_block::consume Method"},{"pos":[8526,8672],"content":"Consumes a message previously offered by this <ph id=\"ph1\">`source_block`</ph> object and successfully reserved by the target, transferring ownership to the caller.","source":"Consumes a message previously offered by this `source_block` object and successfully reserved by the target, transferring ownership to the caller."},{"pos":[8817,8827],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the reserved <ph id=\"ph2\">`message`</ph> object.","pos":[8843,8906],"source":" The `runtime_object_identity` of the reserved `message` object."},{"content":"A pointer to the target block that is calling the <ph id=\"ph1\">`consume`</ph> method.","pos":[8927,8994],"source":" A pointer to the target block that is calling the `consume` method."},{"pos":[9004,9016],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[9020,9091],"content":"A pointer to the <ph id=\"ph1\">`message`</ph> object that the caller now has ownership of.","source":"A pointer to the `message` object that the caller now has ownership of."},{"pos":[9101,9108],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9112,9253],"content":"The method throws an <bpt id=\"p1\">[</bpt>invalid_argument<ept id=\"p1\">](../../../standard-library/invalid-argument-class.md)</ept> exception if the parameter <ph id=\"ph1\">`_PTarget`</ph> is <ph id=\"ph2\">`NULL`</ph>.","source":"The method throws an [invalid_argument](../../../standard-library/invalid-argument-class.md) exception if the parameter `_PTarget` is `NULL`."},{"pos":[9260,9404],"content":"The method throws a <bpt id=\"p1\">[</bpt>bad_target<ept id=\"p1\">](bad-target-class.md)</ept> exception if the parameter <ph id=\"ph1\">`_PTarget`</ph> does not represent the target that called <ph id=\"ph2\">`reserve`</ph>.","source":"The method throws a [bad_target](bad-target-class.md) exception if the parameter `_PTarget` does not represent the target that called `reserve`."},{"pos":[9411,9528],"content":"The <ph id=\"ph1\">`consume`</ph> method is similar to <ph id=\"ph2\">`accept`</ph>, but must always be preceded by a call to <ph id=\"ph3\">`reserve`</ph> that returned <ph id=\"ph4\">`true`</ph>.","source":"The `consume` method is similar to `accept`, but must always be preceded by a call to `reserve` that returned `true`."},{"pos":[9538,9606],"content":"<bpt id=\"p1\">&lt;a name=\"consume_message\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  source_block::consume_message Method","linkify":"<a name=\"consume_message\"></a>  source_block::consume_message Method","source":"<a name=\"consume_message\"></a>  source_block::consume_message Method"},{"content":"When overridden in a derived class, consumes a message that was previously reserved.","pos":[9610,9694]},{"pos":[9801,9811],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the <ph id=\"ph2\">`message`</ph> object being consumed.","pos":[9827,9896],"source":" The `runtime_object_identity` of the `message` object being consumed."},{"pos":[9906,9918],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to the message that the caller now has ownership of.","pos":[9922,9984]},{"pos":[9994,10001],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[10005,10072],"content":"Similar to <ph id=\"ph1\">`accept`</ph>, but is always preceded by a call to <ph id=\"ph2\">`reserve`</ph>.","source":"Similar to `accept`, but is always preceded by a call to `reserve`."},{"pos":[10082,10170],"content":"<bpt id=\"p1\">&lt;a name=\"enable_batched_processing\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  source_block::enable_batched_processing Method","linkify":"<a name=\"enable_batched_processing\"></a>  source_block::enable_batched_processing Method","source":"<a name=\"enable_batched_processing\"></a>  source_block::enable_batched_processing Method"},{"content":"Enables batched processing for this block.","pos":[10174,10216]},{"pos":[10273,10345],"content":"<bpt id=\"p1\">&lt;a name=\"initialize_source\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  source_block::initialize_source Method","linkify":"<a name=\"initialize_source\"></a>  source_block::initialize_source Method","source":"<a name=\"initialize_source\"></a>  source_block::initialize_source Method"},{"pos":[10349,10413],"content":"Initializes the <ph id=\"ph1\">`message_propagator`</ph> within this <ph id=\"ph2\">`source_block`</ph>.","source":"Initializes the `message_propagator` within this `source_block`."},{"pos":[10563,10573],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The scheduler to be used for scheduling tasks.","pos":[10594,10640]},{"content":"The schedule group to be used for scheduling tasks.","pos":[10668,10719]},{"pos":[10729,10789],"content":"<bpt id=\"p1\">&lt;a name=\"link_target\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  source_block::link_target Method","linkify":"<a name=\"link_target\"></a>  source_block::link_target Method","source":"<a name=\"link_target\"></a>  source_block::link_target Method"},{"pos":[10793,10844],"content":"Links a target block to this <ph id=\"ph1\">`source_block`</ph> object.","source":"Links a target block to this `source_block` object."},{"pos":[10934,10944],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <ph id=\"ph1\">`ITarget`</ph> block to link to this <ph id=\"ph2\">`source_block`</ph> object.","pos":[10962,11032],"source":" A pointer to an `ITarget` block to link to this `source_block` object."},{"pos":[11042,11049],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11053,11194],"content":"The method throws an <bpt id=\"p1\">[</bpt>invalid_argument<ept id=\"p1\">](../../../standard-library/invalid-argument-class.md)</ept> exception if the parameter <ph id=\"ph1\">`_PTarget`</ph> is <ph id=\"ph2\">`NULL`</ph>.","source":"The method throws an [invalid_argument](../../../standard-library/invalid-argument-class.md) exception if the parameter `_PTarget` is `NULL`."},{"pos":[11204,11290],"content":"<bpt id=\"p1\">&lt;a name=\"link_target_notification\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  source_block::link_target_notification Method","linkify":"<a name=\"link_target_notification\"></a>  source_block::link_target_notification Method","source":"<a name=\"link_target_notification\"></a>  source_block::link_target_notification Method"},{"pos":[11294,11383],"content":"A callback that notifies that a new target has been linked to this <ph id=\"ph1\">`source_block`</ph> object.","source":"A callback that notifies that a new target has been linked to this `source_block` object."},{"pos":[11478,11560],"content":"<bpt id=\"p1\">&lt;a name=\"process_input_messages\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  source_block::process_input_messages Method","linkify":"<a name=\"process_input_messages\"></a>  source_block::process_input_messages Method","source":"<a name=\"process_input_messages\"></a>  source_block::process_input_messages Method"},{"content":"Process input messages.","pos":[11564,11587]},{"content":"This is only useful for propagator blocks, which derive from source_block","pos":[11588,11661]},{"pos":[11763,11773],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[11798,11886],"content":"<bpt id=\"p1\">&lt;a name=\"propagate_output_messages\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  source_block::propagate_output_messages Method","linkify":"<a name=\"propagate_output_messages\"></a>  source_block::propagate_output_messages Method","source":"<a name=\"propagate_output_messages\"></a>  source_block::propagate_output_messages Method"},{"content":"Propagate messages to targets.","pos":[11890,11920]},{"pos":[11985,12071],"content":"<bpt id=\"p1\">&lt;a name=\"propagate_to_any_targets\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  source_block::propagate_to_any_targets Method","linkify":"<a name=\"propagate_to_any_targets\"></a>  source_block::propagate_to_any_targets Method","source":"<a name=\"propagate_to_any_targets\"></a>  source_block::propagate_to_any_targets Method"},{"content":"When overridden in a derived class, propagates the given message to any or all of the linked targets.","pos":[12075,12176]},{"content":"This is the main propagation routine for message blocks.","pos":[12177,12233]},{"pos":[12341,12351],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the message that is to be propagated.","pos":[12370,12420]},{"pos":[12430,12482],"content":"<bpt id=\"p1\">&lt;a name=\"release\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  source_block::release Method","linkify":"<a name=\"release\"></a>  source_block::release Method","source":"<a name=\"release\"></a>  source_block::release Method"},{"content":"Releases a previous successful message reservation.","pos":[12486,12537]},{"pos":[12664,12674],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the reserved <ph id=\"ph2\">`message`</ph> object.","pos":[12690,12753],"source":" The `runtime_object_identity` of the reserved `message` object."},{"content":"A pointer to the target block that is calling the <ph id=\"ph1\">`release`</ph> method.","pos":[12774,12841],"source":" A pointer to the target block that is calling the `release` method."},{"pos":[12851,12858],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12862,13003],"content":"The method throws an <bpt id=\"p1\">[</bpt>invalid_argument<ept id=\"p1\">](../../../standard-library/invalid-argument-class.md)</ept> exception if the parameter <ph id=\"ph1\">`_PTarget`</ph> is <ph id=\"ph2\">`NULL`</ph>.","source":"The method throws an [invalid_argument](../../../standard-library/invalid-argument-class.md) exception if the parameter `_PTarget` is `NULL`."},{"pos":[13010,13154],"content":"The method throws a <bpt id=\"p1\">[</bpt>bad_target<ept id=\"p1\">](bad-target-class.md)</ept> exception if the parameter <ph id=\"ph1\">`_PTarget`</ph> does not represent the target that called <ph id=\"ph2\">`reserve`</ph>.","source":"The method throws a [bad_target](bad-target-class.md) exception if the parameter `_PTarget` does not represent the target that called `reserve`."},{"pos":[13164,13232],"content":"<bpt id=\"p1\">&lt;a name=\"release_message\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  source_block::release_message Method","linkify":"<a name=\"release_message\"></a>  source_block::release_message Method","source":"<a name=\"release_message\"></a>  source_block::release_message Method"},{"content":"When overridden in a derived class, releases a previous message reservation.","pos":[13236,13312]},{"pos":[13401,13411],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the <ph id=\"ph2\">`message`</ph> object being released.","pos":[13427,13496],"source":" The `runtime_object_identity` of the `message` object being released."},{"pos":[13506,13566],"content":"<bpt id=\"p1\">&lt;a name=\"release_ref\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  source_block::release_ref Method","linkify":"<a name=\"release_ref\"></a>  source_block::release_ref Method","source":"<a name=\"release_ref\"></a>  source_block::release_ref Method"},{"pos":[13570,13627],"content":"Releases a reference count on this <ph id=\"ph1\">`source_block`</ph> object.","source":"Releases a reference count on this `source_block` object."},{"pos":[13717,13727],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the target block that is calling this method.","pos":[13745,13803]},{"pos":[13813,13820],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called by an <ph id=\"ph1\">`ITarget`</ph> object that is being unlinked from this source.","pos":[13824,13909],"source":"This method is called by an `ITarget` object that is being unlinked from this source."},{"content":"The source block is allowed to release any resources reserved for the target block.","pos":[13910,13993]},{"pos":[14003,14069],"content":"<bpt id=\"p1\">&lt;a name=\"remove_targets\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  source_block::remove_targets Method","linkify":"<a name=\"remove_targets\"></a>  source_block::remove_targets Method","source":"<a name=\"remove_targets\"></a>  source_block::remove_targets Method"},{"content":"Removes all target links for this source block.","pos":[14073,14120]},{"content":"This should be called from the destructor.","pos":[14121,14163]},{"pos":[14209,14261],"content":"<bpt id=\"p1\">&lt;a name=\"reserve\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  source_block::reserve Method","linkify":"<a name=\"reserve\"></a>  source_block::reserve Method","source":"<a name=\"reserve\"></a>  source_block::reserve Method"},{"pos":[14265,14333],"content":"Reserves a message previously offered by this <ph id=\"ph1\">`source_block`</ph> object.","source":"Reserves a message previously offered by this `source_block` object."},{"pos":[14460,14470],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the offered <ph id=\"ph2\">`message`</ph> object.","pos":[14486,14548],"source":" The `runtime_object_identity` of the offered `message` object."},{"content":"A pointer to the target block that is calling the <ph id=\"ph1\">`reserve`</ph> method.","pos":[14569,14636],"source":" A pointer to the target block that is calling the `reserve` method."},{"pos":[14646,14658],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`true`</ph> if the message was successfully reserved, <ph id=\"ph2\">`false`</ph> otherwise.","pos":[14662,14729],"source":"`true` if the message was successfully reserved, `false` otherwise."},{"content":"Reservations can fail for many reasons, including: the message was already reserved or accepted by another target, the source could deny reservations, and so forth.","pos":[14730,14894]},{"pos":[14904,14911],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[14915,15056],"content":"The method throws an <bpt id=\"p1\">[</bpt>invalid_argument<ept id=\"p1\">](../../../standard-library/invalid-argument-class.md)</ept> exception if the parameter <ph id=\"ph1\">`_PTarget`</ph> is <ph id=\"ph2\">`NULL`</ph>.","source":"The method throws an [invalid_argument](../../../standard-library/invalid-argument-class.md) exception if the parameter `_PTarget` is `NULL`."},{"pos":[15063,15217],"content":"After you call <ph id=\"ph1\">`reserve`</ph>, if it succeeds, you must call either <ph id=\"ph2\">`consume`</ph> or <ph id=\"ph3\">`release`</ph> in order to take or give up possession of the message, respectively.","source":"After you call `reserve`, if it succeeds, you must call either `consume` or `release` in order to take or give up possession of the message, respectively."},{"pos":[15227,15295],"content":"<bpt id=\"p1\">&lt;a name=\"reserve_message\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  source_block::reserve_message Method","linkify":"<a name=\"reserve_message\"></a>  source_block::reserve_message Method","source":"<a name=\"reserve_message\"></a>  source_block::reserve_message Method"},{"pos":[15299,15403],"content":"When overridden in a derived class, reserves a message previously offered by this <ph id=\"ph1\">`source_block`</ph> object.","source":"When overridden in a derived class, reserves a message previously offered by this `source_block` object."},{"pos":[15492,15502],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the <ph id=\"ph2\">`message`</ph> object being reserved.","pos":[15518,15587],"source":" The `runtime_object_identity` of the `message` object being reserved."},{"pos":[15597,15609],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[15613,15680],"content":"<ph id=\"ph1\">`true`</ph> if the message was successfully reserved, <ph id=\"ph2\">`false`</ph> otherwise.","source":"`true` if the message was successfully reserved, `false` otherwise."},{"pos":[15690,15697],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[15701,15846],"content":"After <ph id=\"ph1\">`reserve`</ph> is called, if it returns <ph id=\"ph2\">`true`</ph>, either <ph id=\"ph3\">`consume`</ph> or <ph id=\"ph4\">`release`</ph> must be called to either take or release ownership of the message.","source":"After `reserve` is called, if it returns `true`, either `consume` or `release` must be called to either take or release ownership of the message."},{"pos":[15856,15930],"content":"<bpt id=\"p1\">&lt;a name=\"resume_propagation\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  source_block::resume_propagation Method","linkify":"<a name=\"resume_propagation\"></a>  source_block::resume_propagation Method","source":"<a name=\"resume_propagation\"></a>  source_block::resume_propagation Method"},{"content":"When overridden in a derived class, resumes propagation after a reservation has been released.","pos":[15934,16028]},{"pos":[16090,16149],"content":"<bpt id=\"p1\">&lt;a name=\"ctor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  source_block::source_block Constructor","linkify":"<a name=\"ctor\"></a>  source_block::source_block Constructor","source":"<a name=\"ctor\"></a>  source_block::source_block Constructor"},{"pos":[16153,16188],"content":"Constructs a <ph id=\"ph1\">`source_block`</ph> object.","source":"Constructs a `source_block` object."},{"pos":[16227,16286],"content":"<bpt id=\"p1\">&lt;a name=\"dtor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  source_block::~source_block Destructor","linkify":"<a name=\"dtor\"></a>  source_block::~source_block Destructor","source":"<a name=\"dtor\"></a>  source_block::~source_block Destructor"},{"pos":[16290,16325],"content":"Destroys the <ph id=\"ph1\">`source_block`</ph> object.","source":"Destroys the `source_block` object."},{"pos":[16373,16429],"content":"<bpt id=\"p1\">&lt;a name=\"sync_send\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  source_block::sync_send Method","linkify":"<a name=\"sync_send\"></a>  source_block::sync_send Method","source":"<a name=\"sync_send\"></a>  source_block::sync_send Method"},{"content":"Synchronously queues up messages and starts a propagation task, if this has not been done already.","pos":[16433,16531]},{"pos":[16619,16629],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a <ph id=\"ph1\">`message`</ph> object to synchronously send.","pos":[16643,16697],"source":" A pointer to a `message` object to synchronously send."},{"pos":[16707,16771],"content":"<bpt id=\"p1\">&lt;a name=\"unlink_target\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  source_block::unlink_target Method","linkify":"<a name=\"unlink_target\"></a>  source_block::unlink_target Method","source":"<a name=\"unlink_target\"></a>  source_block::unlink_target Method"},{"pos":[16775,16830],"content":"Unlinks a target block from this <ph id=\"ph1\">`source_block`</ph> object.","source":"Unlinks a target block from this `source_block` object."},{"pos":[16922,16932],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <ph id=\"ph1\">`ITarget`</ph> block to unlink from this <ph id=\"ph2\">`source_block`</ph> object.","pos":[16950,17024],"source":" A pointer to an `ITarget` block to unlink from this `source_block` object."},{"pos":[17034,17041],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17045,17186],"content":"The method throws an <bpt id=\"p1\">[</bpt>invalid_argument<ept id=\"p1\">](../../../standard-library/invalid-argument-class.md)</ept> exception if the parameter <ph id=\"ph1\">`_PTarget`</ph> is <ph id=\"ph2\">`NULL`</ph>.","source":"The method throws an [invalid_argument](../../../standard-library/invalid-argument-class.md) exception if the parameter `_PTarget` is `NULL`."},{"pos":[17196,17286],"content":"<bpt id=\"p1\">&lt;a name=\"unlink_target_notification\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  source_block::unlink_target_notification Method","linkify":"<a name=\"unlink_target_notification\"></a>  source_block::unlink_target_notification Method","source":"<a name=\"unlink_target_notification\"></a>  source_block::unlink_target_notification Method"},{"pos":[17290,17379],"content":"A callback that notifies that a target has been unlinked from this <ph id=\"ph1\">`source_block`</ph> object.","source":"A callback that notifies that a target has been unlinked from this `source_block` object."},{"pos":[17484,17494],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`ITarget`</ph> block that was unlinked.","pos":[17512,17550],"source":" The `ITarget` block that was unlinked."},{"pos":[17560,17626],"content":"<bpt id=\"p1\">&lt;a name=\"unlink_targets\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  source_block::unlink_targets Method","linkify":"<a name=\"unlink_targets\"></a>  source_block::unlink_targets Method","source":"<a name=\"unlink_targets\"></a>  source_block::unlink_targets Method"},{"pos":[17630,17688],"content":"Unlinks all target blocks from this <ph id=\"ph1\">`source_block`</ph> object.","source":"Unlinks all target blocks from this `source_block` object."},{"pos":[17742,17844],"content":"<bpt id=\"p1\">&lt;a name=\"wait_for_outstanding_async_sends\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  source_block::wait_for_outstanding_async_sends Method","linkify":"<a name=\"wait_for_outstanding_async_sends\"></a>  source_block::wait_for_outstanding_async_sends Method","source":"<a name=\"wait_for_outstanding_async_sends\"></a>  source_block::wait_for_outstanding_async_sends Method"},{"content":"Waits for all asynchronous propagations to complete.","pos":[17848,17900]},{"content":"This propagator-specific spin wait is used in destructors of message blocks to make sure that all asynchronous propagations have time to finish before destroying the block.","pos":[17901,18073]},{"pos":[18136,18144],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>concurrency Namespace<ept id=\"p1\">](concurrency-namespace.md)</ept><ph id=\"ph1\"> </ph>","pos":[18148,18198],"source":"[concurrency Namespace](concurrency-namespace.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ISource Class<ept id=\"p1\">](isource-class.md)</ept>","pos":[18201,18235],"source":" [ISource Class](isource-class.md)"}],"content":"---\ntitle: \"source_block Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"agents/concurrency::source_block\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"source_block class\"\nms.assetid: fbdd4146-e8d0-42e8-b714-fe633f69ffbf\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# source_block Class\nThe `source_block` class is an abstract base class for source-only blocks. The class provides basic link management functionality as well as common error checks.  \n  \n## Syntax  \n  \n```\ntemplate<class _TargetLinkRegistry, class _MessageProcessorType = ordered_message_processor<typename _TargetLinkRegistry::type::type>>\nclass source_block : public ISource<typename _TargetLinkRegistry::type::type>;\n```  \n  \n#### Parameters  \n `_TargetLinkRegistry`  \n Link registry to be used for holding the target links.  \n  \n `_MessageProcessorType`  \n Processor type for message processing.  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`target_iterator`|The iterator to walk the connected targets.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[source_block::source_block Constructor](#ctor)|Constructs a `source_block` object.|  \n|[source_block::~source_block Destructor](#dtor)|Destroys the `source_block` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[source_block::accept Method](#accept)|Accepts a message that was offered by this `source_block` object, transferring ownership to the caller.|  \n|[source_block::acquire_ref Method](#acquire_ref)|Acquires a reference count on this `source_block` object, to prevent deletion.|  \n|[source_block::consume Method](#consume)|Consumes a message previously offered by this `source_block` object and successfully reserved by the target, transferring ownership to the caller.|  \n|[source_block::link_target Method](#link_target)|Links a target block to this `source_block` object.|  \n|[source_block::release Method](#release)|Releases a previous successful message reservation.|  \n|[source_block::release_ref Method](#release_ref)|Releases a reference count on this `source_block` object.|  \n|[source_block::reserve Method](#reserve)|Reserves a message previously offered by this `source_block` object.|  \n|[source_block::unlink_target Method](#unlink_target)|Unlinks a target block from this `source_block` object.|  \n|[source_block::unlink_targets Method](#unlink_targets)|Unlinks all target blocks from this `source_block` object. (Overrides [ISource::unlink_targets](isource-class.md#unlink_targets).)|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[source_block::accept_message Method](#accept_message)|When overridden in a derived class, accepts an offered message by the source. Message blocks should override this method to validate the `_MsgId` and return a message.|  \n|[source_block::async_send Method](#async_send)|Asynchronously queues up messages and starts a propagation task, if this has not been done already|  \n|[source_block::consume_message Method](#consume_message)|When overridden in a derived class, consumes a message that was previously reserved.|  \n|[source_block::enable_batched_processing Method](#enable_batched_processing)|Enables batched processing for this block.|  \n|[source_block::initialize_source Method](#initialize_source)|Initializes the `message_propagator` within this `source_block`.|  \n|[source_block::link_target_notification Method](#link_target_notification)|A callback that notifies that a new target has been linked to this `source_block` object.|  \n|[source_block::process_input_messages Method](#process_input_messages)|Process input messages. This is only useful for propagator blocks, which derive from source_block|  \n|[source_block::propagate_output_messages Method](#propagate_output_messages)|Propagate messages to targets.|  \n|[source_block::propagate_to_any_targets Method](#propagate_to_any_targets)|When overridden in a derived class, propagates the given message to any or all of the linked targets. This is the main propagation routine for message blocks.|  \n|[source_block::release_message Method](#release_message)|When overridden in a derived class, releases a previous message reservation.|  \n|[source_block::remove_targets Method](#remove_targets)|Removes all target links for this source block. This should be called from the destructor.|  \n|[source_block::reserve_message Method](#reserve_message)|When overridden in a derived class, reserves a message previously offered by this `source_block` object.|  \n|[source_block::resume_propagation Method](#resume_propagation)|When overridden in a derived class, resumes propagation after a reservation has been released.|  \n|[source_block::sync_send Method](#sync_send)|Synchronously queues up messages and starts a propagation task, if this has not been done already.|  \n|[source_block::unlink_target_notification Method](#unlink_target_notification)|A callback that notifies that a target has been unlinked from this `source_block` object.|  \n|[source_block::wait_for_outstanding_async_sends Method](#wait_for_outstanding_async_sends)|Waits for all asynchronous propagations to complete. This propagator-specific spin wait is used in destructors of message blocks to make sure that all asynchronous propagations have time to finish before destroying the block.|  \n  \n## Remarks  \n Message blocks should derive from this block to take advantage of link management and synchronization provided by this class.  \n  \n## Inheritance Hierarchy  \n [ISource](isource-class.md)  \n  \n `source_block`  \n  \n## Requirements  \n **Header:** agents.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"accept\"></a>  source_block::accept Method  \n Accepts a message that was offered by this `source_block` object, transferring ownership to the caller.  \n  \n```\nvirtual message<_Target_type>* accept(\n    runtime_object_identity _MsgId,\n    _Inout_ ITarget<_Target_type>* _PTarget);\n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the offered `message` object.  \n  \n `_PTarget`  \n A pointer to the target block that is calling the `accept` method.  \n  \n### Return Value  \n A pointer to the `message` object that the caller now has ownership of.  \n  \n### Remarks  \n The method throws an [invalid_argument](../../../standard-library/invalid-argument-class.md) exception if the parameter `_PTarget` is `NULL`.  \n  \n The `accept` method is called by a target while a message is being offered by this `ISource` block. The message pointer returned may be different from the one passed into the `propagate` method of the `ITarget` block, if this source decides to make a copy of the message.  \n  \n##  <a name=\"accept_message\"></a>  source_block::accept_message Method  \n When overridden in a derived class, accepts an offered message by the source. Message blocks should override this method to validate the `_MsgId` and return a message.  \n  \n```\nvirtual message<_Target_type>* accept_message(runtime_object_identity _MsgId) = 0;\n```  \n  \n### Parameters  \n `_MsgId`  \n The runtime object identity of the `message` object.  \n  \n### Return Value  \n A pointer to the message that the caller now has ownership of.  \n  \n### Remarks  \n To transfer ownership, the original message pointer should be returned. To maintain ownership, a copy of message payload needs to be made and returned.  \n  \n##  <a name=\"acquire_ref\"></a>  source_block::acquire_ref Method  \n Acquires a reference count on this `source_block` object, to prevent deletion.  \n  \n```\nvirtual void acquire_ref(_Inout_ ITarget<_Target_type> *);\n```  \n  \n### Remarks  \n This method is called by an `ITarget` object that is being linked to this source during the `link_target` method.  \n  \n##  <a name=\"async_send\"></a>  source_block::async_send Method  \n Asynchronously queues up messages and starts a propagation task, if this has not been done already  \n  \n```\nvirtual void async_send(_Inout_opt_ message<_Target_type>* _Msg);\n```  \n  \n### Parameters  \n `_Msg`  \n A pointer to a `message` object to asynchronously send.  \n  \n##  <a name=\"consume\"></a>  source_block::consume Method  \n Consumes a message previously offered by this `source_block` object and successfully reserved by the target, transferring ownership to the caller.  \n  \n```\nvirtual message<_Target_type>* consume(\n    runtime_object_identity _MsgId,\n    _Inout_ ITarget<_Target_type>* _PTarget);\n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the reserved `message` object.  \n  \n `_PTarget`  \n A pointer to the target block that is calling the `consume` method.  \n  \n### Return Value  \n A pointer to the `message` object that the caller now has ownership of.  \n  \n### Remarks  \n The method throws an [invalid_argument](../../../standard-library/invalid-argument-class.md) exception if the parameter `_PTarget` is `NULL`.  \n  \n The method throws a [bad_target](bad-target-class.md) exception if the parameter `_PTarget` does not represent the target that called `reserve`.  \n  \n The `consume` method is similar to `accept`, but must always be preceded by a call to `reserve` that returned `true`.  \n  \n##  <a name=\"consume_message\"></a>  source_block::consume_message Method  \n When overridden in a derived class, consumes a message that was previously reserved.  \n  \n```\nvirtual message<_Target_type>* consume_message(runtime_object_identity _MsgId) = 0;\n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the `message` object being consumed.  \n  \n### Return Value  \n A pointer to the message that the caller now has ownership of.  \n  \n### Remarks  \n Similar to `accept`, but is always preceded by a call to `reserve`.  \n  \n##  <a name=\"enable_batched_processing\"></a>  source_block::enable_batched_processing Method  \n Enables batched processing for this block.  \n  \n```\nvoid enable_batched_processing();\n```  \n  \n##  <a name=\"initialize_source\"></a>  source_block::initialize_source Method  \n Initializes the `message_propagator` within this `source_block`.  \n  \n```\nvoid initialize_source(\n    _Inout_opt_ Scheduler* _PScheduler = NULL,\n    _Inout_opt_ ScheduleGroup* _PScheduleGroup = NULL);\n```  \n  \n### Parameters  \n `_PScheduler`  \n The scheduler to be used for scheduling tasks.  \n  \n `_PScheduleGroup`  \n The schedule group to be used for scheduling tasks.  \n  \n##  <a name=\"link_target\"></a>  source_block::link_target Method  \n Links a target block to this `source_block` object.  \n  \n```\nvirtual void link_target(_Inout_ ITarget<_Target_type>* _PTarget);\n```  \n  \n### Parameters  \n `_PTarget`  \n A pointer to an `ITarget` block to link to this `source_block` object.  \n  \n### Remarks  \n The method throws an [invalid_argument](../../../standard-library/invalid-argument-class.md) exception if the parameter `_PTarget` is `NULL`.  \n  \n##  <a name=\"link_target_notification\"></a>  source_block::link_target_notification Method  \n A callback that notifies that a new target has been linked to this `source_block` object.  \n  \n```\nvirtual void link_target_notification(_Inout_ ITarget<_Target_type> *);\n```  \n  \n##  <a name=\"process_input_messages\"></a>  source_block::process_input_messages Method  \n Process input messages. This is only useful for propagator blocks, which derive from source_block  \n  \n```\nvirtual void process_input_messages(_Inout_ message<_Target_type>* _PMessage);\n```  \n  \n### Parameters  \n `_PMessage`  \n  \n##  <a name=\"propagate_output_messages\"></a>  source_block::propagate_output_messages Method  \n Propagate messages to targets.  \n  \n```\nvirtual void propagate_output_messages();\n```  \n  \n##  <a name=\"propagate_to_any_targets\"></a>  source_block::propagate_to_any_targets Method  \n When overridden in a derived class, propagates the given message to any or all of the linked targets. This is the main propagation routine for message blocks.  \n  \n```\nvirtual void propagate_to_any_targets(_Inout_opt_ message<_Target_type>* _PMessage);\n```  \n  \n### Parameters  \n `_PMessage`  \n A pointer to the message that is to be propagated.  \n  \n##  <a name=\"release\"></a>  source_block::release Method  \n Releases a previous successful message reservation.  \n  \n```\nvirtual void release(\n    runtime_object_identity _MsgId,\n    _Inout_ ITarget<_Target_type>* _PTarget);\n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the reserved `message` object.  \n  \n `_PTarget`  \n A pointer to the target block that is calling the `release` method.  \n  \n### Remarks  \n The method throws an [invalid_argument](../../../standard-library/invalid-argument-class.md) exception if the parameter `_PTarget` is `NULL`.  \n  \n The method throws a [bad_target](bad-target-class.md) exception if the parameter `_PTarget` does not represent the target that called `reserve`.  \n  \n##  <a name=\"release_message\"></a>  source_block::release_message Method  \n When overridden in a derived class, releases a previous message reservation.  \n  \n```\nvirtual void release_message(runtime_object_identity _MsgId) = 0;\n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the `message` object being released.  \n  \n##  <a name=\"release_ref\"></a>  source_block::release_ref Method  \n Releases a reference count on this `source_block` object.  \n  \n```\nvirtual void release_ref(_Inout_ ITarget<_Target_type>* _PTarget);\n```  \n  \n### Parameters  \n `_PTarget`  \n A pointer to the target block that is calling this method.  \n  \n### Remarks  \n This method is called by an `ITarget` object that is being unlinked from this source. The source block is allowed to release any resources reserved for the target block.  \n  \n##  <a name=\"remove_targets\"></a>  source_block::remove_targets Method  \n Removes all target links for this source block. This should be called from the destructor.  \n  \n```\nvoid remove_targets();\n```  \n  \n##  <a name=\"reserve\"></a>  source_block::reserve Method  \n Reserves a message previously offered by this `source_block` object.  \n  \n```\nvirtual bool reserve(\n    runtime_object_identity _MsgId,\n    _Inout_ ITarget<_Target_type>* _PTarget);\n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the offered `message` object.  \n  \n `_PTarget`  \n A pointer to the target block that is calling the `reserve` method.  \n  \n### Return Value  \n `true` if the message was successfully reserved, `false` otherwise. Reservations can fail for many reasons, including: the message was already reserved or accepted by another target, the source could deny reservations, and so forth.  \n  \n### Remarks  \n The method throws an [invalid_argument](../../../standard-library/invalid-argument-class.md) exception if the parameter `_PTarget` is `NULL`.  \n  \n After you call `reserve`, if it succeeds, you must call either `consume` or `release` in order to take or give up possession of the message, respectively.  \n  \n##  <a name=\"reserve_message\"></a>  source_block::reserve_message Method  \n When overridden in a derived class, reserves a message previously offered by this `source_block` object.  \n  \n```\nvirtual bool reserve_message(runtime_object_identity _MsgId) = 0;\n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the `message` object being reserved.  \n  \n### Return Value  \n `true` if the message was successfully reserved, `false` otherwise.  \n  \n### Remarks  \n After `reserve` is called, if it returns `true`, either `consume` or `release` must be called to either take or release ownership of the message.  \n  \n##  <a name=\"resume_propagation\"></a>  source_block::resume_propagation Method  \n When overridden in a derived class, resumes propagation after a reservation has been released.  \n  \n```\nvirtual void resume_propagation() = 0;\n```  \n  \n##  <a name=\"ctor\"></a>  source_block::source_block Constructor  \n Constructs a `source_block` object.  \n  \n```\nsource_block();\n```  \n  \n##  <a name=\"dtor\"></a>  source_block::~source_block Destructor  \n Destroys the `source_block` object.  \n  \n```\nvirtual ~source_block();\n```  \n  \n##  <a name=\"sync_send\"></a>  source_block::sync_send Method  \n Synchronously queues up messages and starts a propagation task, if this has not been done already.  \n  \n```\nvirtual void sync_send(_Inout_opt_ message<_Target_type>* _Msg);\n```  \n  \n### Parameters  \n `_Msg`  \n A pointer to a `message` object to synchronously send.  \n  \n##  <a name=\"unlink_target\"></a>  source_block::unlink_target Method  \n Unlinks a target block from this `source_block` object.  \n  \n```\nvirtual void unlink_target(_Inout_ ITarget<_Target_type>* _PTarget);\n```  \n  \n### Parameters  \n `_PTarget`  \n A pointer to an `ITarget` block to unlink from this `source_block` object.  \n  \n### Remarks  \n The method throws an [invalid_argument](../../../standard-library/invalid-argument-class.md) exception if the parameter `_PTarget` is `NULL`.  \n  \n##  <a name=\"unlink_target_notification\"></a>  source_block::unlink_target_notification Method  \n A callback that notifies that a target has been unlinked from this `source_block` object.  \n  \n```\nvirtual void unlink_target_notification(_Inout_ ITarget<_Target_type>* _PTarget);\n```  \n  \n### Parameters  \n `_PTarget`  \n The `ITarget` block that was unlinked.  \n  \n##  <a name=\"unlink_targets\"></a>  source_block::unlink_targets Method  \n Unlinks all target blocks from this `source_block` object.  \n  \n```\nvirtual void unlink_targets();\n```  \n  \n##  <a name=\"wait_for_outstanding_async_sends\"></a>  source_block::wait_for_outstanding_async_sends Method  \n Waits for all asynchronous propagations to complete. This propagator-specific spin wait is used in destructors of message blocks to make sure that all asynchronous propagations have time to finish before destroying the block.  \n  \n```\nvoid wait_for_outstanding_async_sends();\n```  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)   \n [ISource Class](isource-class.md)\n"}