{"nodes":[{"pos":[12,89],"content":"Walkthrough: Adapting Existing Code to Use Lightweight Tasks | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Walkthrough: Adapting Existing Code to Use Lightweight Tasks | Microsoft Docs","pos":[0,77]}]},{"content":"Walkthrough: Adapting Existing Code to Use Lightweight Tasks","pos":[723,783]},{"content":"This topic shows how to adapt existing code that uses the Windows API to create and execute a thread to use a lightweight task.","pos":[784,911]},{"content":"A <bpt id=\"p1\">*</bpt>lightweight task<ept id=\"p1\">*</ept> is a task that you schedule directly from a <bpt id=\"p2\">[</bpt>concurrency::Scheduler<ept id=\"p2\">](../../parallel/concrt/reference/scheduler-class.md)</ept> or <bpt id=\"p3\">[</bpt>concurrency::ScheduleGroup<ept id=\"p3\">](../../parallel/concrt/reference/schedulegroup-class.md)</ept> object.","pos":[918,1155],"source":"A *lightweight task* is a task that you schedule directly from a [concurrency::Scheduler](../../parallel/concrt/reference/scheduler-class.md) or [concurrency::ScheduleGroup](../../parallel/concrt/reference/schedulegroup-class.md) object."},{"content":"Lightweight tasks are useful when you adapt existing code to use the scheduling functionality of the Concurrency Runtime.","pos":[1156,1277]},{"content":"Prerequisites","pos":[1286,1299]},{"pos":[1303,1431],"content":"Before you start this walkthrough, read the topic <bpt id=\"p1\">[</bpt>Task Scheduler<ept id=\"p1\">](../../parallel/concrt/task-scheduler-concurrency-runtime.md)</ept>.","source":"Before you start this walkthrough, read the topic [Task Scheduler](../../parallel/concrt/task-scheduler-concurrency-runtime.md)."},{"content":"Example","pos":[1440,1447]},{"content":"Description","pos":[1457,1468]},{"content":"The following example illustrates typical usage of the Windows API to create and execute a thread.","pos":[1472,1570]},{"content":"This example uses the <bpt id=\"p1\">[</bpt>CreateThread<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms682453)</ept> function to call the <ph id=\"ph1\">`MyThreadFunction`</ph> on a separate thread.","pos":[1571,1729],"source":" This example uses the [CreateThread](http://msdn.microsoft.com/library/windows/desktop/ms682453) function to call the `MyThreadFunction` on a separate thread."},{"content":"Code","pos":[1739,1743]},{"pos":[1758,1782],"content":"concrt-windows-threads#1"},{"content":"Comments","pos":[1899,1907]},{"content":"This example produces the following output.","pos":[1911,1954]},{"content":"The following steps show how to adapt the code example to use the Concurrency Runtime to perform the same task.","pos":[2005,2116]},{"content":"To adapt the example to use a lightweight task","pos":[2126,2172]},{"pos":[2182,2238],"content":"Add a <ph id=\"ph1\">`#include`</ph> directive for the header file concrt.h.","source":"Add a `#include` directive for the header file concrt.h."},{"pos":[2256,2278],"content":"concrt-migration-lwt#2"},{"pos":[2395,2451],"content":"Add a <ph id=\"ph1\">`using`</ph> directive for the <ph id=\"ph2\">`concurrency`</ph> namespace.","source":"Add a `using` directive for the `concurrency` namespace."},{"pos":[2469,2491],"content":"concrt-migration-lwt#3"},{"pos":[2608,2714],"content":"Change the declaration of <ph id=\"ph1\">`MyThreadFunction`</ph> to use the <ph id=\"ph2\">`__cdecl`</ph> calling convention and to return <ph id=\"ph3\">`void`</ph>.","source":"Change the declaration of `MyThreadFunction` to use the `__cdecl` calling convention and to return `void`."},{"pos":[2732,2754],"content":"concrt-migration-lwt#4"},{"pos":[2871,3054],"content":"Modify the <ph id=\"ph1\">`MyData`</ph> structure to include a <bpt id=\"p1\">[</bpt>concurrency::event<ept id=\"p1\">](../../parallel/concrt/reference/event-class.md)</ept> object that signals to the main application that the task has finished.","source":"Modify the `MyData` structure to include a [concurrency::event](../../parallel/concrt/reference/event-class.md) object that signals to the main application that the task has finished."},{"pos":[3072,3094],"content":"concrt-migration-lwt#5"},{"pos":[3211,3368],"content":"Replace the call to <ph id=\"ph1\">`CreateThread`</ph> with a call to the <bpt id=\"p1\">[</bpt>concurrency::CurrentScheduler::ScheduleTask<ept id=\"p1\">](reference/currentscheduler-class.md#scheduletask)</ept> method.","source":"Replace the call to `CreateThread` with a call to the [concurrency::CurrentScheduler::ScheduleTask](reference/currentscheduler-class.md#scheduletask) method."},{"pos":[3387,3409],"content":"concrt-migration-lwt#6"},{"pos":[3527,3684],"content":"Replace the call to <ph id=\"ph1\">`WaitForSingleObject`</ph> with a call to the <bpt id=\"p1\">[</bpt>concurrency::event::wait<ept id=\"p1\">](reference/event-class.md#wait)</ept> method to wait for the task to finish.","source":"Replace the call to `WaitForSingleObject` with a call to the [concurrency::event::wait](reference/event-class.md#wait) method to wait for the task to finish."},{"pos":[3700,3722],"content":"concrt-migration-lwt#7"},{"pos":[3839,3872],"content":"Remove the call to <ph id=\"ph1\">`CloseHandle`</ph>.","source":"Remove the call to `CloseHandle`."},{"pos":[3882,3959],"content":"Change the signature of the definition of <ph id=\"ph1\">`MyThreadFunction`</ph> to match step 3.","source":"Change the signature of the definition of `MyThreadFunction` to match step 3."},{"pos":[3977,3999],"content":"concrt-migration-lwt#8"},{"pos":[4115,4295],"content":"At the end of the <ph id=\"ph1\">`MyThreadFunction`</ph> function, call the <bpt id=\"p1\">[</bpt>concurrency::event::set<ept id=\"p1\">](reference/event-class.md#set)</ept> method to signal to the main application that the task has finished.","source":"At the end of the `MyThreadFunction` function, call the [concurrency::event::set](reference/event-class.md#set) method to signal to the main application that the task has finished."},{"pos":[4313,4335],"content":"concrt-migration-lwt#9"},{"pos":[4452,4506],"content":"Remove the <ph id=\"ph1\">`return`</ph> statement from <ph id=\"ph2\">`MyThreadFunction`</ph>.","source":"Remove the `return` statement from `MyThreadFunction`."},{"content":"Example","pos":[4515,4522]},{"content":"Description","pos":[4532,4543]},{"pos":[4547,4659],"content":"The following completed example shows code that uses a lightweight task to call the <ph id=\"ph1\">`MyThreadFunction`</ph> function.","source":"The following completed example shows code that uses a lightweight task to call the `MyThreadFunction` function."},{"content":"Code","pos":[4669,4673]},{"pos":[4688,4710],"content":"concrt-migration-lwt#1"},{"content":"Comments","pos":[4828,4836]},{"content":"See Also","pos":[4845,4853]},{"content":"Task Scheduler","pos":[4858,4872]},{"content":"Scheduler Class","pos":[4940,4955]}],"content":"---\ntitle: \"Walkthrough: Adapting Existing Code to Use Lightweight Tasks | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"using lightweight tasks [Concurrency Runtime]\"\n  - \"lightweight tasks, using [Concurrency Runtime]\"\nms.assetid: 1edfe818-d274-46de-bdd3-e92967c9bbe0\ncaps.latest.revision: 14\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Walkthrough: Adapting Existing Code to Use Lightweight Tasks\nThis topic shows how to adapt existing code that uses the Windows API to create and execute a thread to use a lightweight task.  \n  \n A *lightweight task* is a task that you schedule directly from a [concurrency::Scheduler](../../parallel/concrt/reference/scheduler-class.md) or [concurrency::ScheduleGroup](../../parallel/concrt/reference/schedulegroup-class.md) object. Lightweight tasks are useful when you adapt existing code to use the scheduling functionality of the Concurrency Runtime.  \n  \n## Prerequisites  \n Before you start this walkthrough, read the topic [Task Scheduler](../../parallel/concrt/task-scheduler-concurrency-runtime.md).  \n  \n## Example  \n  \n### Description  \n The following example illustrates typical usage of the Windows API to create and execute a thread. This example uses the [CreateThread](http://msdn.microsoft.com/library/windows/desktop/ms682453) function to call the `MyThreadFunction` on a separate thread.  \n  \n### Code  \n [!code-cpp[concrt-windows-threads#1](../../parallel/concrt/codesnippet/cpp/walkthrough-adapting-existing-code-to-use-lightweight-tasks_1.cpp)]  \n  \n### Comments  \n This example produces the following output.  \n  \n```Output  \nParameters = 50, 100  \n```  \n  \n The following steps show how to adapt the code example to use the Concurrency Runtime to perform the same task.  \n  \n### To adapt the example to use a lightweight task  \n  \n1.  Add a `#include` directive for the header file concrt.h.  \n  \n [!code-cpp[concrt-migration-lwt#2](../../parallel/concrt/codesnippet/cpp/walkthrough-adapting-existing-code-to-use-lightweight-tasks_2.cpp)]  \n  \n2.  Add a `using` directive for the `concurrency` namespace.  \n  \n [!code-cpp[concrt-migration-lwt#3](../../parallel/concrt/codesnippet/cpp/walkthrough-adapting-existing-code-to-use-lightweight-tasks_3.cpp)]  \n  \n3.  Change the declaration of `MyThreadFunction` to use the `__cdecl` calling convention and to return `void`.  \n  \n [!code-cpp[concrt-migration-lwt#4](../../parallel/concrt/codesnippet/cpp/walkthrough-adapting-existing-code-to-use-lightweight-tasks_4.cpp)]  \n  \n4.  Modify the `MyData` structure to include a [concurrency::event](../../parallel/concrt/reference/event-class.md) object that signals to the main application that the task has finished.  \n  \n [!code-cpp[concrt-migration-lwt#5](../../parallel/concrt/codesnippet/cpp/walkthrough-adapting-existing-code-to-use-lightweight-tasks_5.cpp)]  \n  \n5.  Replace the call to `CreateThread` with a call to the [concurrency::CurrentScheduler::ScheduleTask](reference/currentscheduler-class.md#scheduletask) method.  \n\n  \n [!code-cpp[concrt-migration-lwt#6](../../parallel/concrt/codesnippet/cpp/walkthrough-adapting-existing-code-to-use-lightweight-tasks_6.cpp)]  \n  \n\n6.  Replace the call to `WaitForSingleObject` with a call to the [concurrency::event::wait](reference/event-class.md#wait) method to wait for the task to finish.  \n\n [!code-cpp[concrt-migration-lwt#7](../../parallel/concrt/codesnippet/cpp/walkthrough-adapting-existing-code-to-use-lightweight-tasks_7.cpp)]  \n  \n7.  Remove the call to `CloseHandle`.  \n  \n8.  Change the signature of the definition of `MyThreadFunction` to match step 3.  \n  \n [!code-cpp[concrt-migration-lwt#8](../../parallel/concrt/codesnippet/cpp/walkthrough-adapting-existing-code-to-use-lightweight-tasks_8.cpp)]  \n  \n9. At the end of the `MyThreadFunction` function, call the [concurrency::event::set](reference/event-class.md#set) method to signal to the main application that the task has finished.  \n  \n [!code-cpp[concrt-migration-lwt#9](../../parallel/concrt/codesnippet/cpp/walkthrough-adapting-existing-code-to-use-lightweight-tasks_9.cpp)]  \n  \n10. Remove the `return` statement from `MyThreadFunction`.  \n  \n## Example  \n  \n### Description  \n The following completed example shows code that uses a lightweight task to call the `MyThreadFunction` function.  \n  \n### Code  \n [!code-cpp[concrt-migration-lwt#1](../../parallel/concrt/codesnippet/cpp/walkthrough-adapting-existing-code-to-use-lightweight-tasks_10.cpp)]  \n  \n### Comments  \n  \n## See Also  \n [Task Scheduler](../../parallel/concrt/task-scheduler-concurrency-runtime.md)   \n [Scheduler Class](../../parallel/concrt/reference/scheduler-class.md)\n"}