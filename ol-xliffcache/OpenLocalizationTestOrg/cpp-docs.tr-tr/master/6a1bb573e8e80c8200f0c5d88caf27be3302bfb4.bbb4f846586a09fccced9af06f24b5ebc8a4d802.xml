{"nodes":[{"pos":[12,46],"content":"_CrtIsMemoryBlock | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_CrtIsMemoryBlock | Microsoft Docs","pos":[0,34]}]},{"pos":[988,1005],"content":"_CrtIsMemoryBlock","linkify":"_CrtIsMemoryBlock","nodes":[{"content":"_CrtIsMemoryBlock","pos":[0,17]}]},{"content":"Verifies that a specified memory block is in the local heap and that it has a valid debug heap block type identifier (debug version only).","pos":[1006,1144]},{"pos":[1153,1159],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1337,1347],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`userData`</ph>","pos":[1351,1366],"source":"[in] `userData`"},{"content":"Pointer to the beginning of the memory block to verify.","pos":[1370,1425]},{"content":"[in] <ph id=\"ph1\">`size`</ph>","pos":[1432,1443],"source":"[in] `size`"},{"content":"Size of the specified block (in bytes).","pos":[1447,1486]},{"content":"[out] <ph id=\"ph1\">`requestNumber`</ph>","pos":[1493,1514],"source":"[out] `requestNumber`"},{"content":"Pointer to the allocation number of the block or <ph id=\"ph1\">`NULL`</ph>.","pos":[1518,1574],"source":" Pointer to the allocation number of the block or `NULL`."},{"content":"[out] <ph id=\"ph1\">`filename`</ph>","pos":[1581,1597],"source":"[out] `filename`"},{"content":"Pointer to the name of the source file that requested the block or <ph id=\"ph1\">`NULL`</ph>.","pos":[1601,1675],"source":" Pointer to the name of the source file that requested the block or `NULL`."},{"content":"[out] <ph id=\"ph1\">`linenumber`</ph>","pos":[1682,1700],"source":"[out] `linenumber`"},{"content":"Pointer to the line number in the source file or <ph id=\"ph1\">`NULL`</ph>.","pos":[1704,1760],"source":" Pointer to the line number in the source file or `NULL`."},{"pos":[1769,1781],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[1785,1973],"content":"<ph id=\"ph1\">`_CrtIsMemoryBlock`</ph> returns <ph id=\"ph2\">`TRUE`</ph> if the specified memory block is located within the local heap and has a valid debug heap block type identifier; otherwise, the function returns <ph id=\"ph3\">`FALSE`</ph>.","source":"`_CrtIsMemoryBlock` returns `TRUE` if the specified memory block is located within the local heap and has a valid debug heap block type identifier; otherwise, the function returns `FALSE`."},{"pos":[1982,1989],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_CrtIsMemoryBlock`</ph> function verifies that a specified memory block is located within the application's local heap and that it has a valid block type identifier.","pos":[1993,2158],"source":"The `_CrtIsMemoryBlock` function verifies that a specified memory block is located within the application's local heap and that it has a valid block type identifier."},{"content":"This function can also be used to obtain the object allocation order number and the source file name/line number where the memory block allocation was originally requested.","pos":[2159,2331]},{"content":"Passing non-NULL values for the <ph id=\"ph1\">`requestNumber`</ph>, <ph id=\"ph2\">`filename`</ph>, or <ph id=\"ph3\">`linenumber`</ph> parameters causes <ph id=\"ph4\">`_CrtIsMemoryBlock`</ph> to set these parameters to the values in the memory block's debug header, if it finds the block in the local heap.","pos":[2332,2561],"source":" Passing non-NULL values for the `requestNumber`, `filename`, or `linenumber` parameters causes `_CrtIsMemoryBlock` to set these parameters to the values in the memory block's debug header, if it finds the block in the local heap."},{"content":"When <bpt id=\"p1\">[</bpt>_DEBUG<ept id=\"p1\">](../../c-runtime-library/debug.md)</ept> is not defined, calls to <ph id=\"ph1\">`_CrtIsMemoryBlock`</ph> are removed during preprocessing.","pos":[2562,2688],"source":" When [_DEBUG](../../c-runtime-library/debug.md) is not defined, calls to `_CrtIsMemoryBlock` are removed during preprocessing."},{"pos":[2695,2883],"content":"If <ph id=\"ph1\">`_CrtIsMemoryBlock`</ph> fails, it returns <ph id=\"ph2\">`FALSE`</ph> and the output parameters are initialized to default values: <ph id=\"ph3\">`requestNumber`</ph> and <ph id=\"ph4\">`lineNumber`</ph> are set to 0 and <ph id=\"ph5\">`filename`</ph> is set to <ph id=\"ph6\">`NULL`</ph>.","source":"If `_CrtIsMemoryBlock` fails, it returns `FALSE` and the output parameters are initialized to default values: `requestNumber` and `lineNumber` are set to 0 and `filename` is set to `NULL`."},{"content":"Because this function returns <ph id=\"ph1\">`TRUE`</ph> or <ph id=\"ph2\">`FALSE`</ph>, it can be passed to one of the <bpt id=\"p1\">[</bpt>_ASSERT<ept id=\"p1\">](../../c-runtime-library/reference/assert-asserte-assert-expr-macros.md)</ept> macros to create a simple debugging error handling mechanism.","pos":[2890,3113],"source":"Because this function returns `TRUE` or `FALSE`, it can be passed to one of the [_ASSERT](../../c-runtime-library/reference/assert-asserte-assert-expr-macros.md) macros to create a simple debugging error handling mechanism."},{"content":"The following example causes an assertion failure if the specified address is not located within the local heap:","pos":[3114,3226]},{"content":"For more information about how <ph id=\"ph1\">`_CrtIsMemoryBlock`</ph> can be used with other debug functions and macros, see <bpt id=\"p1\">[</bpt>Macros for Reporting<ept id=\"p1\">](/visualstudio/debugger/macros-for-reporting)</ept>.","pos":[3342,3516],"source":"For more information about how `_CrtIsMemoryBlock` can be used with other debug functions and macros, see [Macros for Reporting](/visualstudio/debugger/macros-for-reporting)."},{"content":"For information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see <bpt id=\"p1\">[</bpt>CRT Debug Heap Details<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","pos":[3517,3712],"source":" For information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see [CRT Debug Heap Details](/visualstudio/debugger/crt-debug-heap-details)."},{"pos":[3721,3733],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[3740,3747]},{"content":"Required header","pos":[3748,3763]},{"content":"<ph id=\"ph1\">\\&lt;</ph>crtdbg.h&gt;","pos":[3828,3839],"source":"\\<crtdbg.h>"},{"pos":[3847,3965],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[3974,3983],"content":"Libraries","linkify":"Libraries","nodes":[{"content":"Libraries","pos":[0,9]}]},{"pos":[3987,4082],"content":"Debug versions of <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept> only.","source":"Debug versions of [C run-time libraries](../../c-runtime-library/crt-library-features.md) only."},{"pos":[4091,4098],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4102,4217],"content":"See the example for the <bpt id=\"p1\">[</bpt>_CrtIsValidHeapPointer<ept id=\"p1\">](../../c-runtime-library/reference/crtisvalidheappointer.md)</ept> topic.","source":"See the example for the [_CrtIsValidHeapPointer](../../c-runtime-library/reference/crtisvalidheappointer.md) topic."},{"pos":[4226,4251],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[4255,4270]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[4271,4318],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[4319,4444],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[4453,4461],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[4465,4524],"content":"<bpt id=\"p1\">[</bpt>Debug Routines<ept id=\"p1\">](../../c-runtime-library/debug-routines.md)</ept>","source":"[Debug Routines](../../c-runtime-library/debug-routines.md)"}],"content":"---\ntitle: \"_CrtIsMemoryBlock | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_CrtIsMemoryBlock\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"CrtlsMemoryBlock\"\n  - \"_CrtIsMemoryBlock\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_CrtIsMemoryBlock function\"\n  - \"CrtIsMemoryBlock function\"\nms.assetid: f7cbbc60-3690-4da0-a07b-68fd7f250273\ncaps.latest.revision: 14\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# _CrtIsMemoryBlock\nVerifies that a specified memory block is in the local heap and that it has a valid debug heap block type identifier (debug version only).  \n  \n## Syntax  \n  \n```  \nint _CrtIsMemoryBlock(   \n   const void *userData,  \n   unsigned int size,  \n   long *requestNumber,  \n   char **filename,  \n   int *linenumber   \n);  \n```  \n  \n#### Parameters  \n [in] `userData`  \n Pointer to the beginning of the memory block to verify.  \n  \n [in] `size`  \n Size of the specified block (in bytes).  \n  \n [out] `requestNumber`  \n Pointer to the allocation number of the block or `NULL`.  \n  \n [out] `filename`  \n Pointer to the name of the source file that requested the block or `NULL`.  \n  \n [out] `linenumber`  \n Pointer to the line number in the source file or `NULL`.  \n  \n## Return Value  \n `_CrtIsMemoryBlock` returns `TRUE` if the specified memory block is located within the local heap and has a valid debug heap block type identifier; otherwise, the function returns `FALSE`.  \n  \n## Remarks  \n The `_CrtIsMemoryBlock` function verifies that a specified memory block is located within the application's local heap and that it has a valid block type identifier. This function can also be used to obtain the object allocation order number and the source file name/line number where the memory block allocation was originally requested. Passing non-NULL values for the `requestNumber`, `filename`, or `linenumber` parameters causes `_CrtIsMemoryBlock` to set these parameters to the values in the memory block's debug header, if it finds the block in the local heap. When [_DEBUG](../../c-runtime-library/debug.md) is not defined, calls to `_CrtIsMemoryBlock` are removed during preprocessing.  \n  \n If `_CrtIsMemoryBlock` fails, it returns `FALSE` and the output parameters are initialized to default values: `requestNumber` and `lineNumber` are set to 0 and `filename` is set to `NULL`.  \n  \n Because this function returns `TRUE` or `FALSE`, it can be passed to one of the [_ASSERT](../../c-runtime-library/reference/assert-asserte-assert-expr-macros.md) macros to create a simple debugging error handling mechanism. The following example causes an assertion failure if the specified address is not located within the local heap:  \n  \n```  \n_ASSERTE( _CrtIsMemoryBlock( userData, size, &requestNumber,   \n&filename, &linenumber ) );  \n```  \n  \n For more information about how `_CrtIsMemoryBlock` can be used with other debug functions and macros, see [Macros for Reporting](/visualstudio/debugger/macros-for-reporting). For information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see [CRT Debug Heap Details](/visualstudio/debugger/crt-debug-heap-details).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_CrtIsMemoryBlock`|\\<crtdbg.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Libraries  \n Debug versions of [C run-time libraries](../../c-runtime-library/crt-library-features.md) only.  \n  \n## Example  \n See the example for the [_CrtIsValidHeapPointer](../../c-runtime-library/reference/crtisvalidheappointer.md) topic.  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Debug Routines](../../c-runtime-library/debug-routines.md)"}