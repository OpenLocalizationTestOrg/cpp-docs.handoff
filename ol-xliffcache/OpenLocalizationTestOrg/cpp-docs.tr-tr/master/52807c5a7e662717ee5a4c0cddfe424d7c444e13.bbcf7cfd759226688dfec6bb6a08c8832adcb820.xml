{"nodes":[{"pos":[12,73],"content":"_snscanf, _snscanf_l, _snwscanf, _snwscanf_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_snscanf, _snscanf_l, _snwscanf, _snwscanf_l | Microsoft Docs","pos":[0,61]}]},{"pos":[1511,1555],"content":"_snscanf, _snscanf_l, _snwscanf, _snwscanf_l","linkify":"_snscanf, _snscanf_l, _snwscanf, _snwscanf_l","nodes":[{"content":"_snscanf, _snscanf_l, _snwscanf, _snwscanf_l","pos":[0,44]}]},{"content":"Reads formatted data of a specified length from a string.","pos":[1556,1613]},{"content":"More secure versions of these functions are available; see <bpt id=\"p1\">[</bpt>_snscanf_s, _snscanf_s_l, _snwscanf_s, _snwscanf_s_l<ept id=\"p1\">](../../c-runtime-library/reference/snscanf-s-snscanf-s-l-snwscanf-s-snwscanf-s-l.md)</ept>.","pos":[1614,1812],"source":" More secure versions of these functions are available; see [_snscanf_s, _snscanf_s_l, _snwscanf_s, _snwscanf_s_l](../../c-runtime-library/reference/snscanf-s-snscanf-s-l-snwscanf-s-snwscanf-s-l.md)."},{"pos":[1821,1827],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[2351,2361],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Input string to examine.","pos":[2376,2400]},{"content":"Number of characters to examine in <ph id=\"ph1\">`input`</ph>.","pos":[2419,2462],"source":" Number of characters to examine in `input`."},{"content":"One or more format specifiers.","pos":[2481,2511]},{"content":"Variables that will be used to store the values extracted from the input string by the format specifiers in <ph id=\"ph1\">`format`</ph>.","pos":[2538,2655],"source":" Variables that will be used to store the values extracted from the input string by the format specifiers in `format`."},{"content":"The locale to use.","pos":[2674,2692]},{"pos":[2701,2713],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Both of these functions returns the number of fields successfully converted and assigned; the return value does not include fields that were read but not assigned.","pos":[2717,2880]},{"content":"A return value of 0 indicates that no fields were assigned.","pos":[2881,2940]},{"content":"The return value is <ph id=\"ph1\">`EOF`</ph> for an error or if the end of the string is reached before the first conversion.","pos":[2941,3047],"source":" The return value is `EOF` for an error or if the end of the string is reached before the first conversion."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>sscanf<ept id=\"p1\">](../../c-runtime-library/reference/sscanf-sscanf-l-swscanf-swscanf-l.md)</ept>.","pos":[3048,3155],"source":" For more information, see [sscanf](../../c-runtime-library/reference/sscanf-sscanf-l-swscanf-swscanf-l.md)."},{"content":"If <ph id=\"ph1\">`input`</ph> or <ph id=\"ph2\">`format`</ph> is a <ph id=\"ph3\">`NULL`</ph> pointer, or if <ph id=\"ph4\">`length`</ph> is less than or equal to zero, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[3162,3382],"source":"If `input` or `format` is a `NULL` pointer, or if `length` is less than or equal to zero, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions return <ph id=\"ph1\">`EOF`</ph> and set <ph id=\"ph2\">`errno`</ph> to <ph id=\"ph3\">`EINVAL`</ph>.","pos":[3383,3477],"source":" If execution is allowed to continue, these functions return `EOF` and set `errno` to `EINVAL`."},{"pos":[3484,3655],"content":"For information about these and other error codes, see <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For information about these and other error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"pos":[3664,3671],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function is like <ph id=\"ph1\">`sscanf`</ph> except that it provides the ability to specify a fixed number of characters to examine from the input string.","pos":[3675,3815],"source":"This function is like `sscanf` except that it provides the ability to specify a fixed number of characters to examine from the input string."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>sscanf<ept id=\"p1\">](../../c-runtime-library/reference/sscanf-sscanf-l-swscanf-swscanf-l.md)</ept>.","pos":[3816,3923],"source":" For more information, see [sscanf](../../c-runtime-library/reference/sscanf-sscanf-l-swscanf-swscanf-l.md)."},{"pos":[3930,4086],"content":"The versions of these functions with the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead of the current thread locale.","source":"The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale."},{"pos":[4096,4125],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"Tchar.h routine","pos":[4132,4147]},{"content":"_UNICODE and _MBCS not defined","pos":[4148,4178]},{"content":"_MBCS defined","pos":[4179,4192]},{"content":"_UNICODE defined","pos":[4193,4209]},{"pos":[4437,4449],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[4456,4463]},{"content":"Required header","pos":[4464,4479]},{"pos":[4524,4548],"content":"<ph id=\"ph1\">`_snscanf`</ph>, <ph id=\"ph2\">`_snscanf_l`</ph>","source":"`_snscanf`, `_snscanf_l`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt;","pos":[4549,4559],"source":"\\<stdio.h>"},{"pos":[4564,4590],"content":"<ph id=\"ph1\">`_snwscanf`</ph>, <ph id=\"ph2\">`_snwscanf_l`</ph>","source":"`_snwscanf`, `_snwscanf_l`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt; or <ph id=\"ph2\">\\&lt;</ph>wchar.h&gt;","pos":[4591,4615],"source":"\\<stdio.h> or \\<wchar.h>"},{"pos":[4623,4741],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[4750,4757],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5574,5599],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[5603,5618]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[5619,5666],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[5667,5792],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[5801,5809],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[5813,5894],"content":"<bpt id=\"p1\">[</bpt>scanf Width Specification<ept id=\"p1\">](../../c-runtime-library/scanf-width-specification.md)</ept>","source":"[scanf Width Specification](../../c-runtime-library/scanf-width-specification.md)"}],"content":"---\ntitle: \"_snscanf, _snscanf_l, _snwscanf, _snwscanf_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_snwscanf\"\n  - \"_snscanf_l\"\n  - \"_snscanf\"\n  - \"_snwscanf_l\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_snscanf\"\n  - \"_snscanf_l\"\n  - \"_snwscanf\"\n  - \"snscanf_l\"\n  - \"snscanf\"\n  - \"_sntscanf_l\"\n  - \"_sntscanf\"\n  - \"_snwscanf_l\"\n  - \"sntscanf_l\"\n  - \"sntscanf\"\n  - \"snwscanf\"\n  - \"snwscanf_l\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"snscanf_l function\"\n  - \"snwscanf function\"\n  - \"_sntscanf_l function\"\n  - \"sntscanf function\"\n  - \"_snwscanf_l function\"\n  - \"_sntscanf function\"\n  - \"_snscanf_l function\"\n  - \"sntscanf_l function\"\n  - \"strings [C++], reading data from\"\n  - \"snscanf function\"\n  - \"snwscanf_l function\"\n  - \"_snwscanf function\"\n  - \"reading data, strings\"\n  - \"strings [C++], reading\"\n  - \"_snscanf function\"\nms.assetid: da1ac890-f905-4cd7-954b-3c90957b5551\ncaps.latest.revision: 24\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _snscanf, _snscanf_l, _snwscanf, _snwscanf_l\nReads formatted data of a specified length from a string. More secure versions of these functions are available; see [_snscanf_s, _snscanf_s_l, _snwscanf_s, _snwscanf_s_l](../../c-runtime-library/reference/snscanf-s-snscanf-s-l-snwscanf-s-snwscanf-s-l.md).  \n  \n## Syntax  \n  \n```  \nint __cdecl _snscanf(  \n   const char * input,  \n   size_t length,  \n   const char * format,  \n   ...  \n);  \nint __cdecl _snscanf_l(  \n   const char * input,  \n   size_t length,  \n   const char * format,  \n   locale_t locale,  \n   ...  \n);  \nint __cdecl _snwscanf(  \n   const wchar_t * input,  \n   size_t length,  \n   const wchar_t * format,  \n   ...  \n);  \nint __cdecl _snwscanf_l(  \n   const wchar_t * input,  \n   size_t length,  \n   const wchar_t * format,  \n   locale_t locale,  \n   ...  \n);  \n```  \n  \n#### Parameters  \n `input`  \n Input string to examine.  \n  \n `length`  \n Number of characters to examine in `input`.  \n  \n `format`  \n One or more format specifiers.  \n  \n `... (optional)`  \n Variables that will be used to store the values extracted from the input string by the format specifiers in `format`.  \n  \n `locale`  \n The locale to use.  \n  \n## Return Value  \n Both of these functions returns the number of fields successfully converted and assigned; the return value does not include fields that were read but not assigned. A return value of 0 indicates that no fields were assigned. The return value is `EOF` for an error or if the end of the string is reached before the first conversion. For more information, see [sscanf](../../c-runtime-library/reference/sscanf-sscanf-l-swscanf-swscanf-l.md).  \n  \n If `input` or `format` is a `NULL` pointer, or if `length` is less than or equal to zero, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions return `EOF` and set `errno` to `EINVAL`.  \n  \n For information about these and other error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n This function is like `sscanf` except that it provides the ability to specify a fixed number of characters to examine from the input string. For more information, see [sscanf](../../c-runtime-library/reference/sscanf-sscanf-l-swscanf-swscanf-l.md).  \n  \n The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale.  \n  \n### Generic-Text Routine Mappings  \n  \n|Tchar.h routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_sntscanf`|`_snscanf`|`_snscanf`|`_snwscanf`|  \n|`_sntscanf_l`|`_snscanf_l`|`_snscanf_l`|`_snwscanf_l`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_snscanf`, `_snscanf_l`|\\<stdio.h>|  \n|`_snwscanf`, `_snwscanf_l`|\\<stdio.h> or \\<wchar.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_snscanf.c  \n// compile with: /W3  \n  \n#include <stdio.h>  \nint main( )  \n{  \n   char  str1[] = \"15 12 14...\";  \n   wchar_t  str2[] = L\"15 12 14...\";  \n   char  s1[3];  \n   wchar_t  s2[3];  \n   int   i;  \n   float fp;  \n  \n   i = _snscanf( str1, 6,  \"%s %f\", s1, &fp); // C4996  \n   // Note: _snscanf is deprecated; consider using _snscanf_s instead  \n   printf(\"_snscanf converted %d fields: \", i);  \n   printf(\"%s and %f\\n\", s1, fp);  \n  \n   i = _snwscanf( str2, 6,  L\"%s %f\", s2, &fp); // C4996  \n   // Note: _snwscanf is deprecated; consider using _snwscanf_s instead  \n   wprintf(L\"_snwscanf converted %d fields: \", i);  \n   wprintf(L\"%s and %f\\n\", s2, fp);  \n}  \n```  \n  \n```Output  \n_snscanf converted 2 fields: 15 and 12.000000  \n_snwscanf converted 2 fields: 15 and 12.000000  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [scanf Width Specification](../../c-runtime-library/scanf-width-specification.md)"}