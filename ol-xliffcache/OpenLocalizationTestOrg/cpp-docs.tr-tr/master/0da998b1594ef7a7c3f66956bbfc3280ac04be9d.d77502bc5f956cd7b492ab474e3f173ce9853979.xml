{"nodes":[{"pos":[12,33],"content":"PROC | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"PROC | Microsoft Docs","pos":[0,21]}]},{"content":"PROC","pos":[581,585]},{"content":"Marks start and end of a procedure block called <bpt id=\"p1\">*</bpt>label<ept id=\"p1\">*</ept>.","pos":[586,642],"source":"Marks start and end of a procedure block called *label*."},{"content":"The statements in the block can be called with the <bpt id=\"p1\">**</bpt>CALL<ept id=\"p1\">**</ept> instruction or <bpt id=\"p2\">[</bpt>INVOKE<ept id=\"p2\">](../../assembler/masm/invoke.md)</ept> directive.","pos":[643,769],"source":" The statements in the block can be called with the **CALL** instruction or [INVOKE](../../assembler/masm/invoke.md) directive."},{"content":"Syntax","pos":[778,784]},{"content":"Remarks","pos":[991,998]},{"pos":[1002,1219],"content":"[FRAME [:<bpt id=\"p1\">*</bpt>ehandler-address<ept id=\"p1\">*</ept>] ] is only valid with ml64.exe, and causes MASM to generate a function table entry in .pdata and unwind information in .xdata for a function's structured exception handling unwind behavior.","source":"[FRAME [:*ehandler-address*] ] is only valid with ml64.exe, and causes MASM to generate a function table entry in .pdata and unwind information in .xdata for a function's structured exception handling unwind behavior."},{"pos":[1226,1352],"content":"When the <bpt id=\"p1\">**</bpt>FRAME<ept id=\"p1\">**</ept> attribute is used, it must be followed by an <bpt id=\"p2\">[</bpt>.ENDPROLOG<ept id=\"p2\">](../../assembler/masm/dot-endprolog.md)</ept> directive.","source":"When the **FRAME** attribute is used, it must be followed by an [.ENDPROLOG](../../assembler/masm/dot-endprolog.md) directive."},{"pos":[1359,1475],"content":"See <bpt id=\"p1\">[</bpt>MASM for x64 (ml64.exe)<ept id=\"p1\">](../../assembler/masm/masm-for-x64-ml64-exe.md)</ept> for more information on using ml64.exe.","source":"See [MASM for x64 (ml64.exe)](../../assembler/masm/masm-for-x64-ml64-exe.md) for more information on using ml64.exe."},{"content":"Example","pos":[1484,1491]},{"content":"The above code will emit the following function table and unwind information:","pos":[1810,1887]},{"content":"See Also","pos":[2403,2411]},{"content":"Directives Reference","pos":[2416,2436]}],"content":"---\ntitle: \"PROC | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"PROC\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"PROC directive\"\nms.assetid: ee5bb6b6-fa15-4d73-b0cf-e650178539a9\ncaps.latest.revision: 9\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# PROC\nMarks start and end of a procedure block called *label*. The statements in the block can be called with the **CALL** instruction or [INVOKE](../../assembler/masm/invoke.md) directive.  \n  \n## Syntax  \n  \n```  \n  \n   label PROC [[distance]] [[langtype]] [[visibility]] [[<prologuearg>]]   \n[[USES reglist]] [[, parameter [[:tag]]]]...  \n[FRAME [:ehandler-address] ]  \nstatements  \nlabel ENDP  \n```  \n  \n## Remarks  \n [FRAME [:*ehandler-address*] ] is only valid with ml64.exe, and causes MASM to generate a function table entry in .pdata and unwind information in .xdata for a function's structured exception handling unwind behavior.  \n  \n When the **FRAME** attribute is used, it must be followed by an [.ENDPROLOG](../../assembler/masm/dot-endprolog.md) directive.  \n  \n See [MASM for x64 (ml64.exe)](../../assembler/masm/masm-for-x64-ml64-exe.md) for more information on using ml64.exe.  \n  \n## Example  \n  \n```  \n; ml64 ex1.asm /link /entry:Example1 /SUBSYSTEM:CONSOLE  \n_text SEGMENT  \nExample1 PROC FRAME  \n   push r10  \n.pushreg r10  \n   push r15  \n.pushreg r15  \n   push rbx  \n.pushreg rbx  \n   push rsi  \n.pushreg rsi  \n.endprolog  \n   ; rest of function ...  \n   ret  \nExample1 ENDP  \n_text ENDS  \nEND  \n```  \n  \n The above code will emit the following function table and unwind information:  \n  \n```  \nFileHeader->Machine 34404  \nDumping Unwind Information for file ex2.exe  \n  \n.pdata entry 1 0x00001000 0x00001023  \n  \n  Unwind data: 0x00002000  \n  \n    Unwind version: 1  \n    Unwind Flags: None  \n    Size of prologue: 0x08  \n    Count of codes: 3  \n    Frame register: rbp  \n    Frame offset: 0x0  \n    Unwind codes:  \n  \n      Code offset: 0x08, SET_FPREG, register=rbp, offset=0x00  \n      Code offset: 0x05, ALLOC_SMALL, size=0x10  \n      Code offset: 0x01, PUSH_NONVOL, register=rbp  \n```  \n  \n## See Also  \n [Directives Reference](../../assembler/masm/directives-reference.md)"}