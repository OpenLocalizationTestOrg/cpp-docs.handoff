{"nodes":[{"pos":[12,46],"content":"vsscanf, vswscanf | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"vsscanf, vswscanf | Microsoft Docs","pos":[0,34]}]},{"pos":[938,955],"content":"vsscanf, vswscanf","linkify":"vsscanf, vswscanf","nodes":[{"content":"vsscanf, vswscanf","pos":[0,17]}]},{"content":"Reads formatted data from a string.","pos":[956,991]},{"content":"More secure versions of these functions are available; see <bpt id=\"p1\">[</bpt>vsscanf_s, vswscanf_s<ept id=\"p1\">](../../c-runtime-library/reference/vsscanf-s-vswscanf-s.md)</ept>.","pos":[992,1134],"source":" More secure versions of these functions are available; see [vsscanf_s, vswscanf_s](../../c-runtime-library/reference/vsscanf-s-vswscanf-s.md)."},{"pos":[1143,1149],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1364,1374],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Stored data","pos":[1390,1401]},{"content":"Format-control string.","pos":[1420,1442]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Format Specification Fields: scanf and wscanf Functions<ept id=\"p1\">](../../c-runtime-library/format-specification-fields-scanf-and-wscanf-functions.md)</ept>.","pos":[1443,1610],"source":" For more information, see [Format Specification Fields: scanf and wscanf Functions](../../c-runtime-library/format-specification-fields-scanf-and-wscanf-functions.md)."},{"content":"Variable argument list.","pos":[1630,1653]},{"pos":[1662,1674],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Each of these functions returns the number of fields that are successfully converted and assigned; the return value does not include fields that were read but not assigned.","pos":[1678,1850]},{"content":"A return value of 0 indicates that no fields were assigned.","pos":[1851,1910]},{"content":"The return value is <ph id=\"ph1\">`EOF`</ph> for an error or if the end of the string is reached before the first conversion.","pos":[1911,2017],"source":" The return value is `EOF` for an error or if the end of the string is reached before the first conversion."},{"content":"If <ph id=\"ph1\">`buffer`</ph> or <ph id=\"ph2\">`format`</ph> is a <ph id=\"ph3\">`NULL`</ph> pointer, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2024,2199],"source":"If `buffer` or `format` is a `NULL` pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions return -1 and set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph>.","pos":[2200,2291],"source":" If execution is allowed to continue, these functions return -1 and set `errno` to `EINVAL`."},{"pos":[2298,2469],"content":"For information about these and other error codes, see <bpt id=\"p1\">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For information about these and other error codes, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"pos":[2478,2485],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`vsscanf`</ph> function reads data from <ph id=\"ph2\">`buffer`</ph> into the locations that are given by each argument in the <ph id=\"ph3\">`arglist`</ph> argument list.","pos":[2489,2619],"source":"The `vsscanf` function reads data from `buffer` into the locations that are given by each argument in the `arglist` argument list."},{"content":"Every argument in the list must be a pointer to a variable that has a type that corresponds to a type specifier in <ph id=\"ph1\">`format`</ph>.","pos":[2620,2744],"source":" Every argument in the list must be a pointer to a variable that has a type that corresponds to a type specifier in `format`."},{"content":"The <ph id=\"ph1\">`format`</ph> argument controls the interpretation of the input fields and has the same form and function as the <ph id=\"ph2\">`format`</ph> argument for the <ph id=\"ph3\">`scanf`</ph> function.","pos":[2745,2900],"source":" The `format` argument controls the interpretation of the input fields and has the same form and function as the `format` argument for the `scanf` function."},{"content":"If copying takes place between strings that overlap, the behavior is undefined.","pos":[2901,2980]},{"pos":[2988,3197],"content":"[!IMPORTANT]\n When you use `vsscanf` to read a string, always specify a width for the `%s` format (for example, `\"%32s\"` instead of `\"%s\"`); otherwise, incorrectly formatted input can cause a buffer overrun.","leadings":["","> "],"nodes":[{"content":"When you use <ph id=\"ph1\">`vsscanf`</ph> to read a string, always specify a width for the <ph id=\"ph2\">`%s`</ph> format (for example, <ph id=\"ph3\">`\"%32s\"`</ph> instead of <ph id=\"ph4\">`\"%s\"`</ph>); otherwise, incorrectly formatted input can cause a buffer overrun.","pos":[14,207],"source":" When you use `vsscanf` to read a string, always specify a width for the `%s` format (for example, `\"%32s\"` instead of `\"%s\"`); otherwise, incorrectly formatted input can cause a buffer overrun."}]},{"content":"<ph id=\"ph1\">`vswscanf`</ph> is a wide-character version of <ph id=\"ph2\">`vsscanf`</ph>; the arguments to <ph id=\"ph3\">`vswscanf`</ph> are wide-character strings.","pos":[3204,3312],"source":"`vswscanf` is a wide-character version of `vsscanf`; the arguments to `vswscanf` are wide-character strings."},{"content":"<ph id=\"ph1\">`vsscanf`</ph> does not handle multibyte hexadecimal characters.","pos":[3313,3372],"source":"`vsscanf` does not handle multibyte hexadecimal characters."},{"content":"<ph id=\"ph1\">`vswscanf`</ph> does not handle Unicode full-width hexadecimal or \"compatibility zone\" characters.","pos":[3373,3466],"source":"`vswscanf` does not handle Unicode full-width hexadecimal or \"compatibility zone\" characters."},{"content":"Otherwise, <ph id=\"ph1\">`vswscanf`</ph> and <ph id=\"ph2\">`vsscanf`</ph> behave identically.","pos":[3467,3522],"source":" Otherwise, `vswscanf` and `vsscanf` behave identically."},{"pos":[3532,3561],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"TCHAR.H routine","pos":[3568,3583]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[3584,3612],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[3613,3626]},{"content":"_UNICODE defined","pos":[3627,3643]},{"pos":[3808,3820],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[3827,3834]},{"content":"Required header","pos":[3835,3850]},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt;","pos":[3905,3915],"source":"\\<stdio.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt; or <ph id=\"ph2\">\\&lt;</ph>wchar.h&gt;","pos":[3931,3955],"source":"\\<stdio.h> or \\<wchar.h>"},{"pos":[3963,4067],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"pos":[4076,4083],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5215,5240],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[5244,5364],"content":"See <ph id=\"ph1\">`Parse`</ph> methods, such as <bpt id=\"p1\">[</bpt>System::Double::Parse<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.double.parse.aspx)</ept>.","source":"See `Parse` methods, such as [System::Double::Parse](https://msdn.microsoft.com/en-us/library/system.double.parse.aspx)."},{"pos":[5373,5381],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Stream I/O<ept id=\"p1\">](../../c-runtime-library/stream-i-o.md)</ept><ph id=\"ph1\"> </ph>","pos":[5385,5437],"source":"[Stream I/O](../../c-runtime-library/stream-i-o.md) "},{"content":"<bpt id=\"p1\"> [</bpt>scanf, _scanf_l, wscanf, _wscanf_l<ept id=\"p1\">](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[5440,5546],"source":" [scanf, _scanf_l, wscanf, _wscanf_l](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>sscanf, _sscanf_l, swscanf, _swscanf_l<ept id=\"p1\">](../../c-runtime-library/reference/sscanf-sscanf-l-swscanf-swscanf-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[5549,5663],"source":" [sscanf, _sscanf_l, swscanf, _swscanf_l](../../c-runtime-library/reference/sscanf-sscanf-l-swscanf-swscanf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>sprintf, _sprintf_l, swprintf, _swprintf_l, <ph id=\"ph1\">\\_</ph>_swprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)</ept><ph id=\"ph2\"> </ph>","pos":[5666,5814],"source":" [sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>vsscanf_s, vswscanf_s<ept id=\"p1\">](../../c-runtime-library/reference/vsscanf-s-vswscanf-s.md)</ept>","pos":[5817,5900],"source":" [vsscanf_s, vswscanf_s](../../c-runtime-library/reference/vsscanf-s-vswscanf-s.md)"}],"content":"---\ntitle: \"vsscanf, vswscanf | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"vsscanf\"\n  - \"vswscanf\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_vstscanf\"\n  - \"vsscanf\"\n  - \"vswscanf\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"vswscanf function\"\n  - \"vsscanf function\"\nms.assetid: e96180f2-df46-423d-b4eb-0a49ab819bde\ncaps.latest.revision: 9\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# vsscanf, vswscanf\nReads formatted data from a string. More secure versions of these functions are available; see [vsscanf_s, vswscanf_s](../../c-runtime-library/reference/vsscanf-s-vswscanf-s.md).  \n  \n## Syntax  \n  \n```  \nint vsscanf(  \n   const char *buffer,  \n   const char *format,  \n   va_list arglist  \n);  \nint vswscanf(  \n   const wchar_t *buffer,  \n   const wchar_t *format,  \n   va_list arglist  \n);  \n```  \n  \n#### Parameters  \n `buffer`  \n Stored data  \n  \n `format`  \n Format-control string. For more information, see [Format Specification Fields: scanf and wscanf Functions](../../c-runtime-library/format-specification-fields-scanf-and-wscanf-functions.md).  \n  \n `arglist`  \n Variable argument list.  \n  \n## Return Value  \n Each of these functions returns the number of fields that are successfully converted and assigned; the return value does not include fields that were read but not assigned. A return value of 0 indicates that no fields were assigned. The return value is `EOF` for an error or if the end of the string is reached before the first conversion.  \n  \n If `buffer` or `format` is a `NULL` pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions return -1 and set `errno` to `EINVAL`.  \n  \n For information about these and other error codes, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n The `vsscanf` function reads data from `buffer` into the locations that are given by each argument in the `arglist` argument list. Every argument in the list must be a pointer to a variable that has a type that corresponds to a type specifier in `format`. The `format` argument controls the interpretation of the input fields and has the same form and function as the `format` argument for the `scanf` function. If copying takes place between strings that overlap, the behavior is undefined.  \n  \n> [!IMPORTANT]\n>  When you use `vsscanf` to read a string, always specify a width for the `%s` format (for example, `\"%32s\"` instead of `\"%s\"`); otherwise, incorrectly formatted input can cause a buffer overrun.  \n  \n `vswscanf` is a wide-character version of `vsscanf`; the arguments to `vswscanf` are wide-character strings. `vsscanf` does not handle multibyte hexadecimal characters. `vswscanf` does not handle Unicode full-width hexadecimal or \"compatibility zone\" characters. Otherwise, `vswscanf` and `vsscanf` behave identically.  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_vstscanf`|`vsscanf`|`vsscanf`|`vswscanf`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`vsscanf`|\\<stdio.h>|  \n|`vswscanf`|\\<stdio.h> or \\<wchar.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n// crt_vsscanf.c  \n// compile with: /W3  \n// This program uses vsscanf to read data items  \n// from a string named tokenstring, then displays them.  \n  \n#include <stdio.h>  \n#include <stdarg.h>  \n  \nint call_vsscanf(char *tokenstring, char *format, ...)  \n{  \n    int result;  \n    va_list arglist;  \n    va_start(arglist, format);  \n    result = vsscanf(tokenstring, format, arglist);  \n    va_end(arglist);  \n    return result;  \n}  \n  \nint main( void )  \n{  \n    char  tokenstring[] = \"15 12 14...\";  \n    char  s[81];  \n    char  c;  \n    int   i;  \n    float fp;  \n  \n    // Input various data from tokenstring:  \n    // max 80 character string:  \n    call_vsscanf(tokenstring, \"%80s\", s);  \n    call_vsscanf(tokenstring, \"%c\", &c);  \n    call_vsscanf(tokenstring, \"%d\", &i);  \n    call_vsscanf(tokenstring, \"%f\", &fp);  \n  \n    // Output the data read  \n    printf(\"String    = %s\\n\", s);  \n    printf(\"Character = %c\\n\", c);  \n    printf(\"Integer:  = %d\\n\", i);  \n    printf(\"Real:     = %f\\n\", fp);  \n}  \n```  \n  \n```Output  \nString    = 15  \nCharacter = 1  \nInteger:  = 15  \nReal:     = 15.000000  \n```  \n  \n## .NET Framework Equivalent  \n See `Parse` methods, such as [System::Double::Parse](https://msdn.microsoft.com/en-us/library/system.double.parse.aspx).  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [scanf, _scanf_l, wscanf, _wscanf_l](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md)   \n [sscanf, _sscanf_l, swscanf, _swscanf_l](../../c-runtime-library/reference/sscanf-sscanf-l-swscanf-swscanf-l.md)   \n [sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)   \n [vsscanf_s, vswscanf_s](../../c-runtime-library/reference/vsscanf-s-vswscanf-s.md)"}