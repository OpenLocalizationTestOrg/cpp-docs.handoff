{"nodes":[{"pos":[12,52],"content":"&lt;array&gt; functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"array<ph id=\"ph1\">&amp;gt;</ph> functions | Microsoft Docs","pos":[4,40],"source":"array&gt; functions | Microsoft Docs"}]},{"content":"array<ph id=\"ph1\">&amp;gt;</ph> functions","pos":[259,278],"source":"array&gt; functions"},{"content":"get","pos":[295,298]},{"content":"swap","pos":[316,320]},{"pos":[377,380],"content":"get"},{"pos":[384,420],"content":"Returns a reference to <ph id=\"ph1\">`arr[Index]`</ph>.","source":"Returns a reference to `arr[Index]`."},{"content":"Parameters","pos":[732,742]},{"content":"The element offset.","pos":[757,776]},{"content":"The type of an element.","pos":[790,813]},{"content":"The number of elements in the array.","pos":[827,863]},{"content":"The array to select from.","pos":[879,904]},{"content":"Example","pos":[914,921]},{"pos":[1431,1435],"content":"swap"},{"content":"Swaps two arrays.","pos":[1439,1456]},{"content":"Parameters","pos":[1570,1580]},{"content":"The type of an element.","pos":[1592,1615]},{"content":"The size of the array.","pos":[1629,1651]},{"content":"The first array to swap.","pos":[1668,1692]},{"content":"The second array to swap.","pos":[1710,1735]},{"content":"Remarks","pos":[1745,1752]},{"content":"The template function executes <ph id=\"ph1\">`left`</ph>.","pos":[1756,1794],"source":"The template function executes `left`."},{"content":".","pos":[1812,1813]},{"content":"Example","pos":[1823,1830]},{"content":"See Also","pos":[2739,2747]},{"content":"array&gt;","pos":[2754,2760],"source":"array>"}],"content":"---\ntitle: \"&lt;array&gt; functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: e0700a33-a833-4655-8735-16e71175efc8\ncaps.latest.revision: 11\nmanager: \"ghogen\"\n---\n# &lt;array&gt; functions\n|||  \n|-|-|  \n|[get](#get_function)|[swap](#swap_function)|  \n  \n##  <a name=\"get_function\"></a>  get  \n Returns a reference to `arr[Index]`.  \n  \n```  \n \ntemplate <int Index, class T, size_t N>  \nconstexpr T& get(array<T, N>& arr) noexcept;  \n \ntemplate <int Index, class T, size_t N>  \nconstexpr const T& get(const array<T, N>& arr) noexcept;  \n \ntemplate <int Index, class T, size_t N>  \nconstexpr T&& get(array<T, N>&& arr) noexcept;  \n```  \n  \n### Parameters  \n `Index`  \n The element offset.  \n  \n `T`  \n The type of an element.  \n  \n `N`  \n The number of elements in the array.  \n  \n `arr`  \n The array to select from.  \n  \n### Example  \n  \n```cpp  \n#include <array>   \n#include <iostream>   \n  \nusing namespace std;  \n  \ntypedef array<int, 4> MyArray;  \n  \nint main()  \n{  \n    MyArray c0 { 0, 1, 2, 3 };  \n  \n    // display contents \" 0 1 2 3\"   \n    for (const auto& e : c0)  \n    {  \n        cout << \" \" << e;  \n    }  \n    cout << endl;  \n  \n    // display odd elements \" 1 3\"   \n    cout << \" \" << get<1>(c0);  \n    cout << \" \" << get<3>(c0) << endl;  \n}  \n  \n/*  \nOutput:  \n0 1 2 3  \n1 3  \n*/  \n```  \n  \n##  <a name=\"swap_function\"></a>  swap  \n Swaps two arrays.  \n  \n```  \ntemplate <class Ty, std::size_t N>  \nvoid swap(array<Ty, N>& left, array<Ty, N>& right);\n```  \n  \n### Parameters  \n `Ty`  \n The type of an element.  \n  \n `N`  \n The size of the array.  \n  \n `left`  \n The first array to swap.  \n  \n `right`  \n The second array to swap.  \n  \n### Remarks  \n The template function executes `left`. `swap(``right``)`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__array__swap.cpp   \n// compile with: /EHsc   \n#include <array>   \n#include <iostream>   \n  \ntypedef std::array<int, 4> Myarray;\nint main()\n{\n    Myarray c0 = { 0, 1, 2, 3 };\n\n    // display contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();\n        it != c0.end(); ++it)\n        std::cout << \" \" << *it;\n    std::cout << std::endl;\n\n    Myarray c1 = { 4, 5, 6, 7 };\n    c0.swap(c1);\n\n    // display swapped contents \" 4 5 6 7\"   \n    for (Myarray::const_iterator it = c0.begin();\n        it != c0.end(); ++it)\n        std::cout << \" \" << *it;\n    std::cout << std::endl;\n\n    swap(c0, c1);\n\n    // display swapped contents \" 0 1 2 3\"   \n    for (Myarray::const_iterator it = c0.begin();\n        it != c0.end(); ++it)\n        std::cout << \" \" << *it;\n    std::cout << std::endl;\n\n    return (0);\n}\n\n```  \n  \n```Output  \n0 1 2 3  \n4 5 6 7  \n0 1 2 3  \n```  \n  \n## See Also  \n [\\<array>](../standard-library/array.md)\n\n"}