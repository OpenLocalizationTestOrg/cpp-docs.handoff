{"nodes":[{"pos":[12,53],"content":"Composite Control Macros | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Composite Control Macros | Microsoft Docs","pos":[0,41]}]},{"pos":[591,615],"content":"Composite Control Macros","linkify":"Composite Control Macros","nodes":[{"content":"Composite Control Macros","pos":[0,24]}]},{"content":"These macros define event sink maps and entries.","pos":[616,664]},{"pos":[685,718],"content":"<bpt id=\"p1\">[</bpt>BEGIN_SINK_MAP<ept id=\"p1\">](#begin_sink_map)</ept>","source":"[BEGIN_SINK_MAP](#begin_sink_map)"},{"content":"Marks the beginning of the event sink map for the composite control.","pos":[719,787]},{"pos":[792,821],"content":"<bpt id=\"p1\">[</bpt>END_SINK_MAP<ept id=\"p1\">](#end_sink_map)</ept>","source":"[END_SINK_MAP](#end_sink_map)"},{"content":"Marks the end of the event sink map for the composite control.","pos":[822,884]},{"pos":[889,914],"content":"<bpt id=\"p1\">[</bpt>SINK_ENTRY<ept id=\"p1\">](#sink_entry)</ept>","source":"[SINK_ENTRY](#sink_entry)"},{"content":"Entry to the event sink map.","pos":[915,943]},{"pos":[948,979],"content":"<bpt id=\"p1\">[</bpt>SINK_ENTRY_EX<ept id=\"p1\">](#sink_entry_ex)</ept>","source":"[SINK_ENTRY_EX](#sink_entry_ex)"},{"content":"Entry to the event sink map with an additional parameter.","pos":[980,1037]},{"pos":[1042,1077],"content":"<bpt id=\"p1\">[</bpt>SINK_ENTRY_INFO<ept id=\"p1\">](#sink_entry_info)</ept>","source":"[SINK_ENTRY_INFO](#sink_entry_info)"},{"pos":[1078,1233],"content":"Entry to the event sink map with manually supplied type information for use with <bpt id=\"p1\">[</bpt>IDispEventSimpleImpl<ept id=\"p1\">](../../atl/reference/idispeventsimpleimpl-class.md)</ept>.","source":"Entry to the event sink map with manually supplied type information for use with [IDispEventSimpleImpl](../../atl/reference/idispeventsimpleimpl-class.md)."},{"pos":[1244,1289],"content":"<bpt id=\"p1\">&lt;a name=\"begin_sink_map\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  BEGIN_SINK_MAP","linkify":"<a name=\"begin_sink_map\"></a>  BEGIN_SINK_MAP","source":"<a name=\"begin_sink_map\"></a>  BEGIN_SINK_MAP"},{"content":"Declares the beginning of the event sink map for the composite control.","pos":[1293,1364]},{"pos":[1410,1420],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] Specifies the control.","pos":[1436,1463]},{"pos":[1473,1480],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1484,1574],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#104<ept id=\"p2\">](../../atl/codesnippet/cpp/composite-control-macros_1.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#104](../../atl/codesnippet/cpp/composite-control-macros_1.h)]"},{"pos":[1584,1591],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"CE ATL implementation of ActiveX event sinks only supports return values of type HRESULT or void from your event handler methods; any other return value is unsupported and its behavior is undefined.","pos":[1595,1793]},{"pos":[1803,1844],"content":"<bpt id=\"p1\">&lt;a name=\"end_sink_map\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  END_SINK_MAP","linkify":"<a name=\"end_sink_map\"></a>  END_SINK_MAP","source":"<a name=\"end_sink_map\"></a>  END_SINK_MAP"},{"content":"Declares the end of the event sink map for the composite control.","pos":[1848,1913]},{"pos":[1951,1958],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1962,2052],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#104<ept id=\"p2\">](../../atl/codesnippet/cpp/composite-control-macros_1.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#104](../../atl/codesnippet/cpp/composite-control-macros_1.h)]"},{"pos":[2062,2069],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"CE ATL implementation of ActiveX event sinks only supports return values of type HRESULT or void from your event handler methods; any other return value is unsupported and its behavior is undefined.","pos":[2073,2271]},{"pos":[2281,2318],"content":"<bpt id=\"p1\">&lt;a name=\"sink_entry\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  SINK_ENTRY","linkify":"<a name=\"sink_entry\"></a>  SINK_ENTRY","source":"<a name=\"sink_entry\"></a>  SINK_ENTRY"},{"pos":[2322,2431],"content":"Declares the handler function ( <ph id=\"ph1\">`fn`</ph>) for the specified event ( <ph id=\"ph2\">`dispid`</ph>), of the control identified by <ph id=\"ph3\">`id`</ph>.","source":"Declares the handler function ( `fn`) for the specified event ( `dispid`), of the control identified by `id`."},{"pos":[2497,2507],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] Identifies the control.","pos":[2519,2547]},{"content":"[in] Identifies the specified event.","pos":[2566,2602]},{"content":"[in] Name of the event handler function.","pos":[2617,2657]},{"content":"This function must use the <bpt id=\"p1\">**</bpt>_stdcall<ept id=\"p1\">**</ept> calling convention and have the appropriate dispinterface-style signature.","pos":[2658,2772],"source":" This function must use the **_stdcall** calling convention and have the appropriate dispinterface-style signature."},{"pos":[2782,2789],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2793,2883],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#104<ept id=\"p2\">](../../atl/codesnippet/cpp/composite-control-macros_1.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#104](../../atl/codesnippet/cpp/composite-control-macros_1.h)]"},{"pos":[2893,2900],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"CE ATL implementation of ActiveX event sinks only supports return values of type HRESULT or void from your event handler methods; any other return value is unsupported and its behavior is undefined.","pos":[2904,3102]},{"pos":[3112,3155],"content":"<bpt id=\"p1\">&lt;a name=\"sink_entry_ex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  SINK_ENTRY_EX","linkify":"<a name=\"sink_entry_ex\"></a>  SINK_ENTRY_EX","source":"<a name=\"sink_entry_ex\"></a>  SINK_ENTRY_EX"},{"pos":[3159,3305],"content":"Declares the handler function ( <ph id=\"ph1\">`fn`</ph>) for the specified event ( <ph id=\"ph2\">`dispid`</ph>), of the dispatch interface ( <bpt id=\"p1\">*</bpt>iid)<ept id=\"p1\">*</ept>, for the control identified by <ph id=\"ph3\">`id`</ph>.","source":"Declares the handler function ( `fn`) for the specified event ( `dispid`), of the dispatch interface ( *iid)*, for the control identified by `id`."},{"pos":[3384,3394],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] Identifies the control.","pos":[3406,3434]},{"content":"[in] Identifies the dispatch interface.","pos":[3450,3489]},{"content":"[in] Identifies the specified event.","pos":[3508,3544]},{"content":"[in] Name of the event handler function.","pos":[3559,3599]},{"content":"This function must use the <bpt id=\"p1\">**</bpt>_stdcall<ept id=\"p1\">**</ept> calling convention and have the appropriate dispinterface-style signature.","pos":[3600,3714],"source":" This function must use the **_stdcall** calling convention and have the appropriate dispinterface-style signature."},{"pos":[3724,3731],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3735,3825],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#136<ept id=\"p2\">](../../atl/codesnippet/cpp/composite-control-macros_2.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#136](../../atl/codesnippet/cpp/composite-control-macros_2.h)]"},{"pos":[3835,3842],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"CE ATL implementation of ActiveX event sinks only supports return values of type HRESULT or void from your event handler methods; any other return value is unsupported and its behavior is undefined.","pos":[3846,4044]},{"pos":[4054,4101],"content":"<bpt id=\"p1\">&lt;a name=\"sink_entry_info\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  SINK_ENTRY_INFO","linkify":"<a name=\"sink_entry_info\"></a>  SINK_ENTRY_INFO","source":"<a name=\"sink_entry_info\"></a>  SINK_ENTRY_INFO"},{"pos":[4105,4322],"content":"Use the <ph id=\"ph1\">`SINK_ENTRY_INFO`</ph> macro within an event sink map to provide the information needed by <bpt id=\"p1\">[</bpt>IDispEventSimpleImpl<ept id=\"p1\">](../../atl/reference/idispeventsimpleimpl-class.md)</ept> to route events to the relevant handler function.","source":"Use the `SINK_ENTRY_INFO` macro within an event sink map to provide the information needed by [IDispEventSimpleImpl](../../atl/reference/idispeventsimpleimpl-class.md) to route events to the relevant handler function."},{"pos":[4414,4424],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] Unsigned integer identifying the event source.","pos":[4436,4487]},{"content":"This value must match the <ph id=\"ph1\">`nID`</ph> template parameter used in the related <bpt id=\"p1\">[</bpt>IDispEventSimpleImpl<ept id=\"p1\">](../../atl/reference/idispeventsimpleimpl-class.md)</ept> base class.","pos":[4488,4644],"source":" This value must match the `nID` template parameter used in the related [IDispEventSimpleImpl](../../atl/reference/idispeventsimpleimpl-class.md) base class."},{"content":"[in] IID identifying the dispatch interface.","pos":[4660,4704]},{"content":"[in] DISPID identifying the specified event.","pos":[4723,4767]},{"content":"[in] Name of the event handler function.","pos":[4782,4822]},{"content":"This function must use the <bpt id=\"p1\">**</bpt>_stdcall<ept id=\"p1\">**</ept> calling convention and have the appropriate dispinterface-style signature.","pos":[4823,4937],"source":" This function must use the **_stdcall** calling convention and have the appropriate dispinterface-style signature."},{"content":"[in] Type information for the event handler function.","pos":[4954,5007]},{"content":"This type information is provided in the form of a pointer to an <ph id=\"ph1\">`_ATL_FUNC_INFO`</ph> structure.","pos":[5008,5100],"source":" This type information is provided in the form of a pointer to an `_ATL_FUNC_INFO` structure."},{"content":"<ph id=\"ph1\">`CC_CDECL`</ph> is the only option supported in Windows CE for the <ph id=\"ph2\">`CALLCONV`</ph> field of the <ph id=\"ph3\">`_ATL_FUNC_INFO`</ph> structure.","pos":[5101,5214],"source":"`CC_CDECL` is the only option supported in Windows CE for the `CALLCONV` field of the `_ATL_FUNC_INFO` structure."},{"content":"Any other value is unsupported thus its behavior undefined.","pos":[5215,5274]},{"pos":[5284,5291],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The first four macro parameters are the same as those for the <bpt id=\"p1\">[</bpt>SINK_ENTRY_EX<ept id=\"p1\">](#sink_entry_ex)</ept> macro.","pos":[5295,5395],"source":"The first four macro parameters are the same as those for the [SINK_ENTRY_EX](#sink_entry_ex) macro."},{"content":"The final parameter provides type information for the event.","pos":[5396,5456]},{"content":"CE ATL implementation of ActiveX event sinks only supports return values of type HRESULT or void from your event handler methods; any other return value is unsupported and its behavior is undefined.","pos":[5457,5655]},{"pos":[5665,5734],"content":"<bpt id=\"p1\">&lt;a name=\"idispeventsimpleimpl_class\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IDispEventSimpleImpl Class","linkify":"<a name=\"idispeventsimpleimpl_class\"></a>  IDispEventSimpleImpl Class","source":"<a name=\"idispeventsimpleimpl_class\"></a>  IDispEventSimpleImpl Class"},{"pos":[5738,5855],"content":"This class provides implementations of the <ph id=\"ph1\">`IDispatch`</ph> methods, without getting type information from a type library.","source":"This class provides implementations of the `IDispatch` methods, without getting type information from a type library."},{"pos":[5863,6013],"content":"[!IMPORTANT]\n This class and its members cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)].","leadings":["","> "],"nodes":[{"content":"This class and its members cannot be used in applications that execute in the <ph id=\"ph1\">[!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]</ph>.","pos":[14,148],"source":" This class and its members cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]."}]},{"pos":[6163,6173],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A unique identifier for the source object.","pos":[6186,6228]},{"content":"When <ph id=\"ph1\">`IDispEventSimpleImpl`</ph> is the base class for a composite control, use the resource ID of the desired contained control for this parameter.","pos":[6229,6372],"source":" When `IDispEventSimpleImpl` is the base class for a composite control, use the resource ID of the desired contained control for this parameter."},{"content":"In other cases, use an arbitrary positive integer.","pos":[6373,6423]},{"content":"The user's class, which is derived from <ph id=\"ph1\">`IDispEventSimpleImpl`</ph>.","pos":[6437,6500],"source":" The user's class, which is derived from `IDispEventSimpleImpl`."},{"content":"The pointer to the IID of the event dispinterface implemented by this class.","pos":[6518,6594]},{"pos":[6604,6611],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`IDispEventSimpleImpl`</ph> provides a way of implementing an event dispinterface without requiring you to supply implementation code for every method/event on that interface.","pos":[6615,6785],"source":"`IDispEventSimpleImpl` provides a way of implementing an event dispinterface without requiring you to supply implementation code for every method/event on that interface."},{"content":"<ph id=\"ph1\">`IDispEventSimpleImpl`</ph> provides implementations of the <ph id=\"ph2\">`IDispatch`</ph> methods.","pos":[6786,6861],"source":"`IDispEventSimpleImpl` provides implementations of the `IDispatch` methods."},{"content":"You only need to supply implementations for the events that you are interested in handling.","pos":[6862,6953]},{"content":"<ph id=\"ph1\">`IDispEventSimpleImpl`</ph> works in conjunction with the <bpt id=\"p1\">[</bpt>event sink map<ept id=\"p1\">](#begin_sink_map)</ept> in your class to route events to the appropriate handler function.","pos":[6960,7113],"source":"`IDispEventSimpleImpl` works in conjunction with the [event sink map](#begin_sink_map) in your class to route events to the appropriate handler function."},{"content":"To use this class:","pos":[7114,7132]},{"pos":[7142,7266],"content":"Add a <bpt id=\"p1\">[</bpt>SINK_ENTRY_INFO<ept id=\"p1\">](#sink_entry_info)</ept> macro to the event sink map for each event on each object that you want to handle.","source":"Add a [SINK_ENTRY_INFO](#sink_entry_info) macro to the event sink map for each event on each object that you want to handle."},{"content":"Supply type information for each event by passing a pointer to an <bpt id=\"p1\">[</bpt>_ATL_FUNC_INFO<ept id=\"p1\">](../../atl/reference/atl-func-info-structure.md)</ept> structure as a parameter to each entry.","pos":[7276,7446],"source":"Supply type information for each event by passing a pointer to an [_ATL_FUNC_INFO](../../atl/reference/atl-func-info-structure.md) structure as a parameter to each entry."},{"content":"On the x86 platform, the <ph id=\"ph1\">`_ATL_FUNC_INFO.cc`</ph> value must be CC_CDECL with the callback function calling method of __stdcall.","pos":[7447,7570],"source":" On the x86 platform, the `_ATL_FUNC_INFO.cc` value must be CC_CDECL with the callback function calling method of __stdcall."},{"pos":[7580,7745],"content":"Call <bpt id=\"p1\">[</bpt>DispEventAdvise<ept id=\"p1\">](idispeventsimpleimpl-class.md#idispeventsimpleimpl__dispeventadvise)</ept> to establish the connection between the source object and the base class.","source":"Call [DispEventAdvise](idispeventsimpleimpl-class.md#idispeventsimpleimpl__dispeventadvise) to establish the connection between the source object and the base class."},{"pos":[7755,7875],"content":"Call <bpt id=\"p1\">[</bpt>DispEventUnadvise<ept id=\"p1\">](idispeventsimpleimpl-class.md#idispeventsimpleimpl__dispeventunadvise)</ept> to break the connection.","source":"Call [DispEventUnadvise](idispeventsimpleimpl-class.md#idispeventsimpleimpl__dispeventunadvise) to break the connection."},{"content":"You must derive from <ph id=\"ph1\">`IDispEventSimpleImpl`</ph> (using a unique value for <ph id=\"ph2\">`nID`</ph>) for each object for which you need to handle events.","pos":[7883,8012],"source":"You must derive from `IDispEventSimpleImpl` (using a unique value for `nID`) for each object for which you need to handle events."},{"content":"You can reuse the base class by unadvising against one source object then advising against a different source object, but the maximum number of source objects that can be handled by a single object at one time is limited by the number of <ph id=\"ph1\">`IDispEventSimpleImpl`</ph> base classes.","pos":[8013,8287],"source":" You can reuse the base class by unadvising against one source object then advising against a different source object, but the maximum number of source objects that can be handled by a single object at one time is limited by the number of `IDispEventSimpleImpl` base classes."},{"content":"<bpt id=\"p1\">**</bpt>IDispEventSimplImpl<ept id=\"p1\">**</ept> provides the same functionality as <bpt id=\"p2\">[</bpt>IDispEventImpl<ept id=\"p2\">](../../atl/reference/idispeventimpl-class.md)</ept>, except it does not get type information about the interface from a type library.","pos":[8294,8496],"source":"**IDispEventSimplImpl** provides the same functionality as [IDispEventImpl](../../atl/reference/idispeventimpl-class.md), except it does not get type information about the interface from a type library."},{"content":"The wizards generate code based only on <ph id=\"ph1\">`IDispEventImpl`</ph>, but you can use <ph id=\"ph2\">`IDispEventSimpleImpl`</ph> by adding the code by hand.","pos":[8497,8621],"source":" The wizards generate code based only on `IDispEventImpl`, but you can use `IDispEventSimpleImpl` by adding the code by hand."},{"content":"Use <ph id=\"ph1\">`IDispEventSimpleImpl`</ph> when you don't have a type library describing the event interface or want to avoid the overhead associated with using the type library.","pos":[8622,8784],"source":" Use `IDispEventSimpleImpl` when you don't have a type library describing the event interface or want to avoid the overhead associated with using the type library."},{"pos":[8792,9089],"content":"[!NOTE]\n`IDispEventImpl` and `IDispEventSimpleImpl` provide their own implementation of **IUnknown::QueryInterface** enabling each `IDispEventImpl` or `IDispEventSimpleImpl` base class to act as a separate COM identity while still allowing direct access to class members in your main COM object.","leadings":["","> "],"nodes":[{"content":"<ph id=\"ph1\">`IDispEventImpl`</ph> and <ph id=\"ph2\">`IDispEventSimpleImpl`</ph> provide their own implementation of <bpt id=\"p1\">**</bpt>IUnknown::QueryInterface<ept id=\"p1\">**</ept> enabling each <ph id=\"ph3\">`IDispEventImpl`</ph> or <ph id=\"ph4\">`IDispEventSimpleImpl`</ph> base class to act as a separate COM identity while still allowing direct access to class members in your main COM object.","pos":[8,295],"source":"`IDispEventImpl` and `IDispEventSimpleImpl` provide their own implementation of **IUnknown::QueryInterface** enabling each `IDispEventImpl` or `IDispEventSimpleImpl` base class to act as a separate COM identity while still allowing direct access to class members in your main COM object."}]},{"content":"CE ATL implementation of ActiveX event sinks only supports return values of type HRESULT or void from your event handler methods; any other return value is unsupported and its behavior is undefined.","pos":[9096,9294]},{"pos":[9301,9395],"content":"For more information, see <bpt id=\"p1\">[</bpt>Supporting IDispEventImpl<ept id=\"p1\">](../../atl/supporting-idispeventimpl.md)</ept>.","source":"For more information, see [Supporting IDispEventImpl](../../atl/supporting-idispeventimpl.md)."},{"pos":[9404,9412],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Macros<ept id=\"p1\">](../../atl/reference/atl-macros.md)</ept><ph id=\"ph1\"> </ph>","pos":[9416,9460],"source":"[Macros](../../atl/reference/atl-macros.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Composite Control Global Functions<ept id=\"p1\">](../../atl/reference/composite-control-global-functions.md)</ept>","pos":[9463,9559],"source":" [Composite Control Global Functions](../../atl/reference/composite-control-global-functions.md)"}],"content":"---\ntitle: \"Composite Control Macros | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"composite controls, macros\"\nms.assetid: 17f2dd5e-07e6-4aa6-b965-7a361c78c45e\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Composite Control Macros\nThese macros define event sink maps and entries.  \n  \n|||  \n|-|-|  \n|[BEGIN_SINK_MAP](#begin_sink_map)|Marks the beginning of the event sink map for the composite control.|  \n|[END_SINK_MAP](#end_sink_map)|Marks the end of the event sink map for the composite control.|  \n|[SINK_ENTRY](#sink_entry)|Entry to the event sink map.|  \n|[SINK_ENTRY_EX](#sink_entry_ex)|Entry to the event sink map with an additional parameter.|  \n|[SINK_ENTRY_INFO](#sink_entry_info)|Entry to the event sink map with manually supplied type information for use with [IDispEventSimpleImpl](../../atl/reference/idispeventsimpleimpl-class.md).|  \n  \n##  <a name=\"begin_sink_map\"></a>  BEGIN_SINK_MAP  \n Declares the beginning of the event sink map for the composite control.  \n  \n```\nBEGIN_SINK_MAP(_class)\n```  \n  \n### Parameters  \n `_class`  \n [in] Specifies the control.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#104](../../atl/codesnippet/cpp/composite-control-macros_1.h)]  \n  \n### Remarks  \n CE ATL implementation of ActiveX event sinks only supports return values of type HRESULT or void from your event handler methods; any other return value is unsupported and its behavior is undefined.  \n  \n##  <a name=\"end_sink_map\"></a>  END_SINK_MAP  \n Declares the end of the event sink map for the composite control.  \n  \n```\nEND_SINK_MAP()\n```  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#104](../../atl/codesnippet/cpp/composite-control-macros_1.h)]  \n  \n### Remarks  \n CE ATL implementation of ActiveX event sinks only supports return values of type HRESULT or void from your event handler methods; any other return value is unsupported and its behavior is undefined.  \n  \n##  <a name=\"sink_entry\"></a>  SINK_ENTRY  \n Declares the handler function ( `fn`) for the specified event ( `dispid`), of the control identified by `id`.  \n  \n```\nSINK_ENTRY(\n    id, \n    dispid, \n    fn )\n```  \n  \n### Parameters  \n `id`  \n [in] Identifies the control.  \n  \n `dispid`  \n [in] Identifies the specified event.  \n  \n `fn`  \n [in] Name of the event handler function. This function must use the **_stdcall** calling convention and have the appropriate dispinterface-style signature.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#104](../../atl/codesnippet/cpp/composite-control-macros_1.h)]  \n  \n### Remarks  \n CE ATL implementation of ActiveX event sinks only supports return values of type HRESULT or void from your event handler methods; any other return value is unsupported and its behavior is undefined.  \n  \n##  <a name=\"sink_entry_ex\"></a>  SINK_ENTRY_EX  \n Declares the handler function ( `fn`) for the specified event ( `dispid`), of the dispatch interface ( *iid)*, for the control identified by `id`.  \n  \n```\nSINK_ENTRY_EX(\n    id, \n    iid, \n    dispid, \n    fn )\n```  \n  \n### Parameters  \n `id`  \n [in] Identifies the control.  \n  \n `iid`  \n [in] Identifies the dispatch interface.  \n  \n `dispid`  \n [in] Identifies the specified event.  \n  \n `fn`  \n [in] Name of the event handler function. This function must use the **_stdcall** calling convention and have the appropriate dispinterface-style signature.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#136](../../atl/codesnippet/cpp/composite-control-macros_2.h)]  \n  \n### Remarks  \n CE ATL implementation of ActiveX event sinks only supports return values of type HRESULT or void from your event handler methods; any other return value is unsupported and its behavior is undefined.  \n  \n##  <a name=\"sink_entry_info\"></a>  SINK_ENTRY_INFO  \n Use the `SINK_ENTRY_INFO` macro within an event sink map to provide the information needed by [IDispEventSimpleImpl](../../atl/reference/idispeventsimpleimpl-class.md) to route events to the relevant handler function.  \n  \n```\nSINK_ENTRY_INFO(\n    id, \n    iid, \n    dispid, \n    fn, \n    info )\n```  \n  \n### Parameters  \n `id`  \n [in] Unsigned integer identifying the event source. This value must match the `nID` template parameter used in the related [IDispEventSimpleImpl](../../atl/reference/idispeventsimpleimpl-class.md) base class.  \n  \n `iid`  \n [in] IID identifying the dispatch interface.  \n  \n `dispid`  \n [in] DISPID identifying the specified event.  \n  \n `fn`  \n [in] Name of the event handler function. This function must use the **_stdcall** calling convention and have the appropriate dispinterface-style signature.  \n  \n `info`  \n [in] Type information for the event handler function. This type information is provided in the form of a pointer to an `_ATL_FUNC_INFO` structure. `CC_CDECL` is the only option supported in Windows CE for the `CALLCONV` field of the `_ATL_FUNC_INFO` structure. Any other value is unsupported thus its behavior undefined.  \n  \n### Remarks  \n The first four macro parameters are the same as those for the [SINK_ENTRY_EX](#sink_entry_ex) macro. The final parameter provides type information for the event. CE ATL implementation of ActiveX event sinks only supports return values of type HRESULT or void from your event handler methods; any other return value is unsupported and its behavior is undefined.  \n  \n##  <a name=\"idispeventsimpleimpl_class\"></a>  IDispEventSimpleImpl Class  \n This class provides implementations of the `IDispatch` methods, without getting type information from a type library.  \n  \n> [!IMPORTANT]\n>  This class and its members cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)].  \n  \n```\ntemplate <UINT nID, classT, const IID* pdiid>\nclass ATL_NO_VTABLE IDispEventSimpleImpl :\npublic _IDispEventLocator<nID, pdiid>\n```  \n  \n### Parameters  \n `nID`  \n A unique identifier for the source object. When `IDispEventSimpleImpl` is the base class for a composite control, use the resource ID of the desired contained control for this parameter. In other cases, use an arbitrary positive integer.  \n  \n `T`  \n The user's class, which is derived from `IDispEventSimpleImpl`.  \n  \n `pdiid`  \n The pointer to the IID of the event dispinterface implemented by this class.  \n  \n### Remarks  \n `IDispEventSimpleImpl` provides a way of implementing an event dispinterface without requiring you to supply implementation code for every method/event on that interface. `IDispEventSimpleImpl` provides implementations of the `IDispatch` methods. You only need to supply implementations for the events that you are interested in handling.  \n  \n `IDispEventSimpleImpl` works in conjunction with the [event sink map](#begin_sink_map) in your class to route events to the appropriate handler function. To use this class:  \n  \n-   Add a [SINK_ENTRY_INFO](#sink_entry_info) macro to the event sink map for each event on each object that you want to handle.  \n  \n-   Supply type information for each event by passing a pointer to an [_ATL_FUNC_INFO](../../atl/reference/atl-func-info-structure.md) structure as a parameter to each entry. On the x86 platform, the `_ATL_FUNC_INFO.cc` value must be CC_CDECL with the callback function calling method of __stdcall.  \n  \n-   Call [DispEventAdvise](idispeventsimpleimpl-class.md#idispeventsimpleimpl__dispeventadvise) to establish the connection between the source object and the base class.  \n  \n-   Call [DispEventUnadvise](idispeventsimpleimpl-class.md#idispeventsimpleimpl__dispeventunadvise) to break the connection.  \n\n  \n You must derive from `IDispEventSimpleImpl` (using a unique value for `nID`) for each object for which you need to handle events. You can reuse the base class by unadvising against one source object then advising against a different source object, but the maximum number of source objects that can be handled by a single object at one time is limited by the number of `IDispEventSimpleImpl` base classes.  \n  \n **IDispEventSimplImpl** provides the same functionality as [IDispEventImpl](../../atl/reference/idispeventimpl-class.md), except it does not get type information about the interface from a type library. The wizards generate code based only on `IDispEventImpl`, but you can use `IDispEventSimpleImpl` by adding the code by hand. Use `IDispEventSimpleImpl` when you don't have a type library describing the event interface or want to avoid the overhead associated with using the type library.  \n  \n> [!NOTE]\n> `IDispEventImpl` and `IDispEventSimpleImpl` provide their own implementation of **IUnknown::QueryInterface** enabling each `IDispEventImpl` or `IDispEventSimpleImpl` base class to act as a separate COM identity while still allowing direct access to class members in your main COM object.  \n  \n CE ATL implementation of ActiveX event sinks only supports return values of type HRESULT or void from your event handler methods; any other return value is unsupported and its behavior is undefined.  \n  \n For more information, see [Supporting IDispEventImpl](../../atl/supporting-idispeventimpl.md).  \n  \n## See Also  \n [Macros](../../atl/reference/atl-macros.md)   \n [Composite Control Global Functions](../../atl/reference/composite-control-global-functions.md)\n"}