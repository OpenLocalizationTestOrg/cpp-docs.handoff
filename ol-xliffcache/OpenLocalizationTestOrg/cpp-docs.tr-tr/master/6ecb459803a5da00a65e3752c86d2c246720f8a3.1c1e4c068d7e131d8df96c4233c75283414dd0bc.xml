{"nodes":[{"pos":[12,65],"content":"delegate  (C++ Component Extensions) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"delegate  (C++ Component Extensions) | Microsoft Docs","pos":[0,53]}]},{"content":"delegate  (C++ Component Extensions)","pos":[682,718]},{"content":"Declares a type that represents a function pointer.","pos":[719,770]},{"content":"All Runtimes","pos":[779,791]},{"pos":[795,903],"content":"Both the <ph id=\"ph1\">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph> and common language runtime support delegates.","source":"Both the [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)] and common language runtime support delegates."},{"content":"Remarks","pos":[913,920]},{"content":"is a context-sensitive keyword.","pos":[935,966]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Context-Sensitive Keywords<ept id=\"p1\">](../windows/context-sensitive-keywords-cpp-component-extensions.md)</ept>.","pos":[967,1089],"source":" For more information, see [Context-Sensitive Keywords](../windows/context-sensitive-keywords-cpp-component-extensions.md)."},{"content":"To detect at compile time if a type is a delegate, use the <ph id=\"ph1\">`__is_delegate()`</ph> type trait.","pos":[1096,1184],"source":"To detect at compile time if a type is a delegate, use the `__is_delegate()` type trait."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Compiler Support for Type Traits<ept id=\"p1\">](../windows/compiler-support-for-type-traits-cpp-component-extensions.md)</ept>.","pos":[1185,1319],"source":" For more information, see [Compiler Support for Type Traits](../windows/compiler-support-for-type-traits-cpp-component-extensions.md)."},{"content":"Windows Runtime","pos":[1328,1343]},{"content":"C++/CX supports delegates with the following syntax.","pos":[1347,1399]},{"content":"Syntax","pos":[1409,1415]},{"content":"Parameters","pos":[1535,1545]},{"content":"access","pos":[1550,1556]},{"content":"(optional) The accessibility of the delegate, which can be <ph id=\"ph1\">`public`</ph> (the default) or <ph id=\"ph2\">`private`</ph>.","pos":[1561,1656],"source":" (optional) The accessibility of the delegate, which can be `public` (the default) or `private`."},{"content":"The function prototype can also be qualified with the <ph id=\"ph1\">`const`</ph> or <ph id=\"ph2\">`volatile`</ph> keywords.","pos":[1657,1742],"source":" The function prototype can also be qualified with the `const` or `volatile` keywords."},{"content":"return-type","pos":[1750,1761]},{"content":"The return type of the function prototype.","pos":[1766,1808]},{"content":"delegate-type-identifier","pos":[1816,1840]},{"content":"The name of the declared delegate type.","pos":[1845,1884]},{"content":"parameters","pos":[1892,1902]},{"content":"(Optional) The types and identifiers of the function prototype.","pos":[1907,1970]},{"content":"Remarks","pos":[1980,1987]},{"content":"Use the <bpt id=\"p1\">*</bpt>delegate-type-identifier<ept id=\"p1\">*</ept> to declare an event with the same prototype as the delegate.","pos":[1991,2086],"source":"Use the *delegate-type-identifier* to declare an event with the same prototype as the delegate."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Delegates (C++/CX)<ept id=\"p1\">](http://msdn.microsoft.com/Library/3175bf1c-86d8-4eda-8d8f-c5b6753d8e38)</ept>.","pos":[2087,2206],"source":" For more information, see [Delegates (C++/CX)](http://msdn.microsoft.com/Library/3175bf1c-86d8-4eda-8d8f-c5b6753d8e38)."},{"content":"Requirements","pos":[2216,2228]},{"pos":[2232,2256],"content":"Compiler option: <bpt id=\"p1\">**</bpt>/ZW<ept id=\"p1\">**</ept>","source":"Compiler option: **/ZW**"},{"content":"Common Language Runtime","pos":[2265,2288]},{"content":"The common language runtime supports delegates with the following syntax.","pos":[2292,2365]},{"content":"Syntax","pos":[2375,2381]},{"content":"Parameters","pos":[2458,2468]},{"content":"access","pos":[2473,2479]},{"content":"(optional) The accessibility of the delegate outside of the assembly can be public or private.","pos":[2484,2578]},{"content":"The default is private.","pos":[2580,2603]},{"content":"Inside a class, a delegate can have any accessibility.","pos":[2605,2659]},{"content":"function_declaration","pos":[2667,2687]},{"content":"The signature of the function that can be bound to the delegate.","pos":[2692,2756]},{"content":"The return type of a delegate can be any managed type.","pos":[2757,2811]},{"content":"For interoperability reasons, it is recommended that the return type of a delegate be a CLS type.","pos":[2812,2909]},{"pos":[2916,3049],"content":"To define an unbound delegate, the first parameter in <bpt id=\"p1\">*</bpt>function_declaration<ept id=\"p1\">*</ept> should be the type of the <ph id=\"ph1\">`this`</ph> pointer for the object.","source":"To define an unbound delegate, the first parameter in *function_declaration* should be the type of the `this` pointer for the object."},{"content":"Remarks","pos":[3058,3065]},{"content":"Delegates are multicast: the \"function pointer\" can be bound to one or more methods within a managed class.","pos":[3069,3176]},{"content":"The <bpt id=\"p1\">**</bpt>delegate<ept id=\"p1\">**</ept> keyword defines a multicast delegate type with a specific method signature.","pos":[3177,3269],"source":" The **delegate** keyword defines a multicast delegate type with a specific method signature."},{"content":"A delegate can also be bound to a method of a value class, such as a static method.","pos":[3276,3359]},{"content":"A delegate has the following characteristics:","pos":[3366,3411]},{"pos":[3421,3468],"content":"It inherits from <bpt id=\"p1\">**</bpt>System::MulticastDelegate<ept id=\"p1\">**</ept>.","source":"It inherits from **System::MulticastDelegate**."},{"pos":[3478,3661],"content":"It has a constructor that takes two arguments: a pointer to a managed class or <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> (in the case of binding to a static method) and a fully qualified method of the specified type.","source":"It has a constructor that takes two arguments: a pointer to a managed class or **NULL** (in the case of binding to a static method) and a fully qualified method of the specified type."},{"pos":[3671,3767],"content":"It has a method called <ph id=\"ph1\">`Invoke`</ph>, whose signature matches the declared signature of the delegate.","source":"It has a method called `Invoke`, whose signature matches the declared signature of the delegate."},{"content":"When a delegate is invoked, its function(s) are called in the order they were attached.","pos":[3774,3861]},{"content":"The return value of a delegate is the return value from its last attached member function.","pos":[3868,3958]},{"content":"Delegates cannot be overloaded.","pos":[3965,3996]},{"content":"Delegates can be bound or unbound.","pos":[4003,4037]},{"content":"When you instantiate a bound delegate, the first argument shall be an object reference.","pos":[4044,4131]},{"content":"The second argument of a delegate instantiation shall either be the address of a method of a managed class object, or a pointer to a method of a value type.","pos":[4133,4289]},{"content":"The second argument of a delegate instantiation must name the method with the full class scope syntax and apply the address-of operator.","pos":[4292,4428]},{"content":"When you instantiate an unbound delegate, the first argument shall either be the address of a method of a managed class object, or a pointer to a method of a value type.","pos":[4435,4604]},{"content":"The argument must name the method with the full class scope syntax and apply the address-of operator.","pos":[4607,4708]},{"content":"When creating a delegate to a static or global function, only one parameter is required: the function (optionally, the address of the function).","pos":[4715,4859]},{"content":"For more information on delegates, see","pos":[4866,4904]},{"content":"How to: Define and Use Delegates (C++/CLI)","pos":[4915,4957]},{"content":"Generic Delegates (Visual C++)","pos":[5023,5053]},{"content":"Requirements","pos":[5108,5120]},{"pos":[5124,5149],"content":"Compiler option: <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept>","source":"Compiler option: **/clr**"},{"content":"Examples","pos":[5159,5167]},{"content":"Example","pos":[5173,5180]},{"content":"The following example shows how to declare, initialize, and invoke delegates.","pos":[5189,5266]},{"content":"Output","pos":[6396,6402]},{"content":"See Also","pos":[6520,6528]},{"content":"Component Extensions for Runtime Platforms","pos":[6533,6575]}],"content":"---\ntitle: \"delegate  (C++ Component Extensions) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"delegate_cpp\"\n  - \"delegate\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"delegate keyword [C++]\"\nms.assetid: 03caf23d-7873-4a23-9b34-becf42aaf429\ncaps.latest.revision: 26\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# delegate  (C++ Component Extensions)\nDeclares a type that represents a function pointer.  \n  \n## All Runtimes  \n Both the [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)] and common language runtime support delegates.  \n  \n### Remarks  \n `delegate` is a context-sensitive keyword. For more information, see [Context-Sensitive Keywords](../windows/context-sensitive-keywords-cpp-component-extensions.md).  \n  \n To detect at compile time if a type is a delegate, use the `__is_delegate()` type trait. For more information, see [Compiler Support for Type Traits](../windows/compiler-support-for-type-traits-cpp-component-extensions.md).  \n  \n## Windows Runtime  \n C++/CX supports delegates with the following syntax.  \n  \n### Syntax  \n  \n```cpp  \n  \naccess  \ndelegate  \nreturn-type  \ndelegate-type-identifier  \n(  \n[ parameters ]  \n)  \n  \n```  \n  \n### Parameters  \n *access*  \n (optional) The accessibility of the delegate, which can be `public` (the default) or `private`. The function prototype can also be qualified with the `const` or `volatile` keywords.  \n  \n *return-type*  \n The return type of the function prototype.  \n  \n *delegate-type-identifier*  \n The name of the declared delegate type.  \n  \n *parameters*  \n (Optional) The types and identifiers of the function prototype.  \n  \n### Remarks  \n Use the *delegate-type-identifier* to declare an event with the same prototype as the delegate. For more information, see [Delegates (C++/CX)](http://msdn.microsoft.com/Library/3175bf1c-86d8-4eda-8d8f-c5b6753d8e38).  \n  \n### Requirements  \n Compiler option: **/ZW**  \n  \n## Common Language Runtime  \n The common language runtime supports delegates with the following syntax.  \n  \n### Syntax  \n  \n```cpp  \n  \naccess  \ndelegate  \nfunction_declaration  \n  \n```  \n  \n### Parameters  \n *access*  \n (optional) The accessibility of the delegate outside of the assembly can be public or private.  The default is private.  Inside a class, a delegate can have any accessibility.  \n  \n *function_declaration*  \n The signature of the function that can be bound to the delegate. The return type of a delegate can be any managed type. For interoperability reasons, it is recommended that the return type of a delegate be a CLS type.  \n  \n To define an unbound delegate, the first parameter in *function_declaration* should be the type of the `this` pointer for the object. \n  \n### Remarks  \n Delegates are multicast: the \"function pointer\" can be bound to one or more methods within a managed class. The **delegate** keyword defines a multicast delegate type with a specific method signature.  \n  \n A delegate can also be bound to a method of a value class, such as a static method.  \n  \n A delegate has the following characteristics:  \n  \n-   It inherits from **System::MulticastDelegate**.  \n  \n-   It has a constructor that takes two arguments: a pointer to a managed class or **NULL** (in the case of binding to a static method) and a fully qualified method of the specified type.  \n  \n-   It has a method called `Invoke`, whose signature matches the declared signature of the delegate.  \n  \n When a delegate is invoked, its function(s) are called in the order they were attached.  \n  \n The return value of a delegate is the return value from its last attached member function.  \n  \n Delegates cannot be overloaded.  \n  \n Delegates can be bound or unbound.  \n  \n When you instantiate a bound delegate, the first argument shall be an object reference.  The second argument of a delegate instantiation shall either be the address of a method of a managed class object, or a pointer to a method of a value type.   The second argument of a delegate instantiation must name the method with the full class scope syntax and apply the address-of operator.  \n  \n When you instantiate an unbound delegate, the first argument shall either be the address of a method of a managed class object, or a pointer to a method of a value type.   The argument must name the method with the full class scope syntax and apply the address-of operator.  \n  \n When creating a delegate to a static or global function, only one parameter is required: the function (optionally, the address of the function).  \n  \n For more information on delegates, see  \n  \n-   [How to: Define and Use Delegates (C++/CLI)](../dotnet/how-to-define-and-use-delegates-cpp-cli.md)  \n  \n-   [Generic Delegates (Visual C++)](../windows/generic-delegates-visual-cpp.md)  \n  \n### Requirements  \n Compiler option: **/clr**  \n  \n### Examples  \n **Example**  \n  \n The following example shows how to declare, initialize, and invoke delegates.  \n  \n```cpp  \n// mcppv2_delegate.cpp  \n// compile with: /clr  \nusing namespace System;  \n  \n// declare a delegate  \npublic delegate void MyDel(int i);  \n  \nref class A {  \npublic:  \n   void func1(int i) {  \n      Console::WriteLine(\"in func1 {0}\", i);  \n   }  \n  \n   void func2(int i) {  \n      Console::WriteLine(\"in func2 {0}\", i);  \n   }  \n  \n   static void func3(int i) {  \n      Console::WriteLine(\"in static func3 {0}\", i);  \n   }  \n};  \n  \nint main () {  \n   A ^ a = gcnew A;  \n  \n   // declare a delegate instance  \n   MyDel^ DelInst;  \n  \n   // test if delegate is initialized  \n   if (DelInst)  \n      DelInst(7);  \n  \n   // assigning to delegate  \n   DelInst = gcnew MyDel(a, &A::func1);  \n  \n   // invoke delegate  \n   if (DelInst)  \n      DelInst(8);  \n  \n   // add a function  \n   DelInst += gcnew MyDel(a, &A::func2);  \n  \n   DelInst(9);  \n  \n   // remove a function  \n   DelInst -= gcnew MyDel(a, &A::func1);  \n  \n   // invoke delegate with Invoke  \n   DelInst->Invoke(10);  \n  \n   // make delegate to static function  \n   MyDel ^ StaticDelInst = gcnew MyDel(&A::func3);  \n   StaticDelInst(11);  \n}  \n```  \n  \n **Output**  \n  \n```Output  \nin func1 8  \n  \nin func1 9  \n  \nin func2 9  \n  \nin func2 10  \n  \nin static func3 11  \n```  \n  \n## See Also  \n [Component Extensions for Runtime Platforms](../windows/component-extensions-for-runtime-platforms.md)"}