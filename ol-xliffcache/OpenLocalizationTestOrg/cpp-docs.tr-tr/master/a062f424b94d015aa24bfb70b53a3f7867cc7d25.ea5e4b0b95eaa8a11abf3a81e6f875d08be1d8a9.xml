{"nodes":[{"pos":[12,45],"content":"Worker Archetype | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Worker Archetype | Microsoft Docs","pos":[0,33]}]},{"pos":[573,589],"content":"Worker Archetype","linkify":"Worker Archetype","nodes":[{"content":"Worker Archetype","pos":[0,16]}]},{"pos":[590,700],"content":"Classes that conform to the <bpt id=\"p1\">*</bpt>worker<ept id=\"p1\">*</ept> archetype provide the code to process work items queued on a thread pool.","source":"Classes that conform to the *worker* archetype provide the code to process work items queued on a thread pool."},{"pos":[707,725],"content":"<bpt id=\"p1\">**</bpt>Implementation<ept id=\"p1\">**</ept>","source":"**Implementation**"},{"content":"To implement a class conforming to this archetype, the class must provide the following features:","pos":[732,829]},{"content":"Method","pos":[836,842]},{"content":"Description","pos":[843,854]},{"pos":[894,936],"content":"<bpt id=\"p1\">[</bpt>Initialize<ept id=\"p1\">](#workerarchetype__initialize)</ept>","source":"[Initialize](#workerarchetype__initialize)"},{"pos":[937,1047],"content":"Called to initialize the worker object before any requests are passed to <bpt id=\"p1\">[</bpt>Execute<ept id=\"p1\">](#workerarchetype__execute)</ept>.","source":"Called to initialize the worker object before any requests are passed to [Execute](#workerarchetype__execute)."},{"pos":[1052,1088],"content":"<bpt id=\"p1\">[</bpt>Execute<ept id=\"p1\">](#workerarchetype__execute)</ept>","source":"[Execute](#workerarchetype__execute)"},{"content":"Called to process a work item.","pos":[1089,1119]},{"pos":[1124,1164],"content":"<bpt id=\"p1\">[</bpt>Terminate<ept id=\"p1\">](#workerarchetype__terminate)</ept>","source":"[Terminate](#workerarchetype__terminate)"},{"pos":[1165,1282],"content":"Called to uninitialize the worker object after all requests have been passed to <bpt id=\"p1\">[</bpt>Execute<ept id=\"p1\">](#workerarchetype__execute)</ept>.","source":"Called to uninitialize the worker object after all requests have been passed to [Execute](#workerarchetype__execute)."},{"content":"Typedef","pos":[1290,1297]},{"content":"Description","pos":[1298,1309]},{"pos":[1350,1394],"content":"<bpt id=\"p1\">[</bpt>RequestType<ept id=\"p1\">](#workerarchetype__requesttype)</ept>","source":"[RequestType](#workerarchetype__requesttype)"},{"content":"A typedef for the type of work item that can be processed by the worker class.","pos":[1395,1473]},{"pos":[1481,1522],"content":"A typical <bpt id=\"p1\">*</bpt>worker<ept id=\"p1\">*</ept> class looks like this:","source":"A typical *worker* class looks like this:"},{"pos":[1529,1613],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#137<ept id=\"p2\">](../../atl/codesnippet/cpp/worker-archetype_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#137](../../atl/codesnippet/cpp/worker-archetype_1.cpp)]"},{"pos":[1620,1648],"content":"<bpt id=\"p1\">**</bpt>Existing Implementations<ept id=\"p1\">**</ept>","source":"**Existing Implementations**"},{"content":"These classes conform to this archetype:","pos":[1655,1695]},{"content":"Class","pos":[1702,1707]},{"content":"Description","pos":[1708,1719]},{"pos":[1758,1829],"content":"<bpt id=\"p1\">[</bpt>CNonStatelessWorker<ept id=\"p1\">](../../atl/reference/cnonstatelessworker-class.md)</ept>","source":"[CNonStatelessWorker](../../atl/reference/cnonstatelessworker-class.md)"},{"content":"Receives requests from the thread pool and passes them on to a worker object that is created and destroyed for each request.","pos":[1830,1954]},{"pos":[1962,1969],"content":"<bpt id=\"p1\">**</bpt>Use<ept id=\"p1\">**</ept>","source":"**Use**"},{"content":"These template parameters expect the class to conform to this archetype:","pos":[1976,2048]},{"content":"Parameter name","pos":[2055,2069]},{"content":"Used by","pos":[2070,2077]},{"pos":[2121,2129],"content":"<bpt id=\"p1\">*</bpt>Worker<ept id=\"p1\">*</ept>","source":"*Worker*"},{"pos":[2130,2185],"content":"<bpt id=\"p1\">[</bpt>CThreadPool<ept id=\"p1\">](../../atl/reference/cthreadpool-class.md)</ept>","source":"[CThreadPool](../../atl/reference/cthreadpool-class.md)"},{"pos":[2190,2198],"content":"<bpt id=\"p1\">*</bpt>Worker<ept id=\"p1\">*</ept>","source":"*Worker*"},{"pos":[2199,2270],"content":"<bpt id=\"p1\">[</bpt>CNonStatelessWorker<ept id=\"p1\">](../../atl/reference/cnonstatelessworker-class.md)</ept>","source":"[CNonStatelessWorker](../../atl/reference/cnonstatelessworker-class.md)"},{"pos":[2281,2293],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2297,2318],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlutil.h","source":"**Header:** atlutil.h"},{"pos":[2327,2390],"content":"<bpt id=\"p1\">&lt;a name=\"workerarchetype__execute\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>WorkerArchetype::Execute","linkify":"<a name=\"workerarchetype__execute\"></a>WorkerArchetype::Execute","source":"<a name=\"workerarchetype__execute\"></a>WorkerArchetype::Execute"},{"content":"Called to process a work item.","pos":[2391,2421]},{"pos":[2551,2561],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The work item to be processed.","pos":[2578,2608]},{"content":"The work item is of the same type as <ph id=\"ph1\">`RequestType`</ph>.","pos":[2609,2660],"source":" The work item is of the same type as `RequestType`."},{"content":"A custom parameter understood by the worker class.","pos":[2686,2736]},{"content":"Also passed to <ph id=\"ph1\">`WorkerArchetype::Initialize`</ph> and <ph id=\"ph2\">`Terminate`</ph>.","pos":[2737,2798],"source":" Also passed to `WorkerArchetype::Initialize` and `Terminate`."},{"content":"A pointer to the <bpt id=\"p1\">[</bpt>OVERLAPPED<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms684342)</ept> structure used to create the queue on which work items were queued.","pos":[2822,2979],"source":" A pointer to the [OVERLAPPED](http://msdn.microsoft.com/library/windows/desktop/ms684342) structure used to create the queue on which work items were queued."},{"pos":[2988,3058],"content":"<bpt id=\"p1\">&lt;a name=\"workerarchetype__initialize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> WorkerArchetype::Initialize","linkify":"<a name=\"workerarchetype__initialize\"></a> WorkerArchetype::Initialize","source":"<a name=\"workerarchetype__initialize\"></a> WorkerArchetype::Initialize"},{"pos":[3059,3159],"content":"Called to initialize the worker object before any requests are passed to <ph id=\"ph1\">`WorkerArchetype::Execute`</ph>.","source":"Called to initialize the worker object before any requests are passed to `WorkerArchetype::Execute`."},{"pos":[3220,3230],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A custom parameter understood by the worker class.","pos":[3247,3297]},{"content":"Also passed to <ph id=\"ph1\">`WorkerArchetype::Terminate`</ph> and <ph id=\"ph2\">`WorkerArchetype::Execute`</ph>.","pos":[3298,3373],"source":" Also passed to `WorkerArchetype::Terminate` and `WorkerArchetype::Execute`."},{"pos":[3383,3395],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3399,3448],"content":"Return <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> on success, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> on failure.","source":"Return **TRUE** on success, **FALSE** on failure."},{"pos":[3457,3529],"content":"<bpt id=\"p1\">&lt;a name=\"workerarchetype__requesttype\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> WorkerArchetype::RequestType","linkify":"<a name=\"workerarchetype__requesttype\"></a> WorkerArchetype::RequestType","source":"<a name=\"workerarchetype__requesttype\"></a> WorkerArchetype::RequestType"},{"content":"A typedef for the type of work item that can be processed by the worker class.","pos":[3530,3608]},{"pos":[3674,3681],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3685,3819],"content":"This type must be used as the first parameter of <ph id=\"ph1\">`WorkerArchetype::Execute`</ph> and must be capable of being cast to and from a ULONG_PTR.","source":"This type must be used as the first parameter of `WorkerArchetype::Execute` and must be capable of being cast to and from a ULONG_PTR."},{"pos":[3828,3896],"content":"<bpt id=\"p1\">&lt;a name=\"workerarchetype__terminate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> WorkerArchetype::Terminate","linkify":"<a name=\"workerarchetype__terminate\"></a> WorkerArchetype::Terminate","source":"<a name=\"workerarchetype__terminate\"></a> WorkerArchetype::Terminate"},{"pos":[3897,4005],"content":"Called to uninitialize the worker object after all requests have been passed to <ph id=\"ph1\">`WorkerArchetype::Execute`</ph>).","source":"Called to uninitialize the worker object after all requests have been passed to `WorkerArchetype::Execute`)."},{"pos":[4071,4081],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A custom parameter understood by the worker class.","pos":[4098,4148]},{"content":"Also passed to <ph id=\"ph1\">`WorkerArchetype::Initialize`</ph> and <ph id=\"ph2\">`WorkerArchetype::Execute`</ph>.","pos":[4149,4225],"source":" Also passed to `WorkerArchetype::Initialize` and `WorkerArchetype::Execute`."},{"pos":[4234,4242],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Archetypes<ept id=\"p1\">](../../atl/reference/atl-archetypes.md)</ept><ph id=\"ph1\"> </ph>","pos":[4246,4298],"source":"[Archetypes](../../atl/reference/atl-archetypes.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Concepts<ept id=\"p1\">](../../atl/active-template-library-atl-concepts.md)</ept><ph id=\"ph1\"> </ph>","pos":[4301,4364],"source":" [Concepts](../../atl/active-template-library-atl-concepts.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ATL COM Desktop Components<ept id=\"p1\">](../../atl/atl-com-desktop-components.md)</ept>","pos":[4367,4437],"source":" [ATL COM Desktop Components](../../atl/atl-com-desktop-components.md)"}],"content":"---\ntitle: \"Worker Archetype | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"Worker archetype\"\nms.assetid: 834145cd-09d3-4149-bc99-620e1871cbfb\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Worker Archetype\nClasses that conform to the *worker* archetype provide the code to process work items queued on a thread pool.  \n  \n **Implementation**  \n  \n To implement a class conforming to this archetype, the class must provide the following features:  \n  \n|Method|Description|  \n|------------|-----------------|  \n|[Initialize](#workerarchetype__initialize)|Called to initialize the worker object before any requests are passed to [Execute](#workerarchetype__execute).|  \n|[Execute](#workerarchetype__execute)|Called to process a work item.|  \n|[Terminate](#workerarchetype__terminate)|Called to uninitialize the worker object after all requests have been passed to [Execute](#workerarchetype__execute).|  \n  \n|Typedef|Description|  \n|-------------|-----------------|  \n|[RequestType](#workerarchetype__requesttype)|A typedef for the type of work item that can be processed by the worker class.|  \n  \n A typical *worker* class looks like this:  \n  \n [!code-cpp[NVC_ATL_Utilities#137](../../atl/codesnippet/cpp/worker-archetype_1.cpp)]  \n  \n **Existing Implementations**  \n  \n These classes conform to this archetype:  \n  \n|Class|Description|  \n|-----------|-----------------|  \n|[CNonStatelessWorker](../../atl/reference/cnonstatelessworker-class.md)|Receives requests from the thread pool and passes them on to a worker object that is created and destroyed for each request.|  \n  \n **Use**  \n  \n These template parameters expect the class to conform to this archetype:  \n  \n|Parameter name|Used by|  \n|--------------------|-------------|  \n|*Worker*|[CThreadPool](../../atl/reference/cthreadpool-class.md)|  \n|*Worker*|[CNonStatelessWorker](../../atl/reference/cnonstatelessworker-class.md)|  \n  \n### Requirements  \n **Header:** atlutil.h  \n  \n## <a name=\"workerarchetype__execute\"></a>WorkerArchetype::Execute\nCalled to process a work item.  \n  \n  \n  \n```  \nvoid Execute(\n    RequestType request,  \n    void* pvWorkerParam,  \n    OVERLAPPED* pOverlapped);\n```  \n  \n#### Parameters  \n `request`  \n The work item to be processed. The work item is of the same type as `RequestType`.  \n  \n `pvWorkerParam`  \n A custom parameter understood by the worker class. Also passed to `WorkerArchetype::Initialize` and `Terminate`.  \n  \n `pOverlapped`  \n A pointer to the [OVERLAPPED](http://msdn.microsoft.com/library/windows/desktop/ms684342) structure used to create the queue on which work items were queued.  \n  \n## <a name=\"workerarchetype__initialize\"></a> WorkerArchetype::Initialize\nCalled to initialize the worker object before any requests are passed to `WorkerArchetype::Execute`.  \n```\nBOOL Initialize(void* pvParam) throw();\n```  \n  \n#### Parameters  \n `pvParam`  \n A custom parameter understood by the worker class. Also passed to `WorkerArchetype::Terminate` and `WorkerArchetype::Execute`.  \n  \n### Return Value  \n Return **TRUE** on success, **FALSE** on failure.  \n  \n## <a name=\"workerarchetype__requesttype\"></a> WorkerArchetype::RequestType\nA typedef for the type of work item that can be processed by the worker class.  \n  \n```  \ntypedef   MyRequestType RequestType;    \n```  \n  \n### Remarks  \n This type must be used as the first parameter of `WorkerArchetype::Execute` and must be capable of being cast to and from a ULONG_PTR.  \n  \n## <a name=\"workerarchetype__terminate\"></a> WorkerArchetype::Terminate\nCalled to uninitialize the worker object after all requests have been passed to `WorkerArchetype::Execute`).  \n    \n``` \nvoid Terminate(void* pvParam) throw();\n```  \n  \n#### Parameters  \n `pvParam`  \n A custom parameter understood by the worker class. Also passed to `WorkerArchetype::Initialize` and `WorkerArchetype::Execute`.  \n  \n## See Also  \n [Archetypes](../../atl/reference/atl-archetypes.md)   \n [Concepts](../../atl/active-template-library-atl-concepts.md)   \n [ATL COM Desktop Components](../../atl/atl-com-desktop-components.md)\n\n\n\n"}