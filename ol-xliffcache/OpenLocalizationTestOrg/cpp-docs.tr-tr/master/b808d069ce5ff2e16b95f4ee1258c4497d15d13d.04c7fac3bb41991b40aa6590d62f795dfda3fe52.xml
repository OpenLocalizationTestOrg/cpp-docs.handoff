{"nodes":[{"pos":[12,46],"content":"__uuidof Operator | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"__uuidof Operator | Microsoft Docs","pos":[0,34]}]},{"content":"__uuidof Operator","pos":[698,715]},{"content":"Microsoft Specific","pos":[718,736]},{"content":"Retrieves the GUID attached to the expression.","pos":[745,791]},{"content":"Syntax","pos":[800,806]},{"content":"Remarks","pos":[873,880]},{"content":"The <bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> can be a type name, pointer, reference, or array of that type, a template specialized on these types, or a variable of these types.","pos":[884,1032],"source":"The *expression* can be a type name, pointer, reference, or array of that type, a template specialized on these types, or a variable of these types."},{"content":"The argument is valid as long as the compiler can use it to find the attached GUID.","pos":[1033,1116]},{"content":"A special case of this intrinsic is when either <bpt id=\"p1\">**</bpt>0<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept> is supplied as the argument.","pos":[1123,1217],"source":"A special case of this intrinsic is when either **0** or **NULL** is supplied as the argument."},{"content":"In this case, <ph id=\"ph1\">`__uuidof`</ph> will return a GUID made up of zeros.","pos":[1218,1279],"source":" In this case, `__uuidof` will return a GUID made up of zeros."},{"content":"Use this keyword to extract the GUID attached to:","pos":[1286,1335]},{"pos":[1345,1408],"content":"An object by the <bpt id=\"p1\">[</bpt>uuid<ept id=\"p1\">](../cpp/uuid-cpp.md)</ept> extended attribute.","source":"An object by the [uuid](../cpp/uuid-cpp.md) extended attribute."},{"pos":[1418,1496],"content":"A library block created with the <bpt id=\"p1\">[</bpt>module<ept id=\"p1\">](../windows/module-cpp.md)</ept> attribute.","source":"A library block created with the [module](../windows/module-cpp.md) attribute."},{"pos":[1504,1684],"content":"[!NOTE]\n In a debug build, `__uuidof` always initializes an object dynamically (at runtime). In a release build, `__uuidof` can statically (at compile time) initialize an object.","leadings":["","> "],"nodes":[{"content":" In a debug build, `__uuidof` always initializes an object dynamically (at runtime). In a release build, `__uuidof` can statically (at compile time) initialize an object.","pos":[8,178],"nodes":[{"content":"In a debug build, <ph id=\"ph1\">`__uuidof`</ph> always initializes an object dynamically (at runtime).","pos":[1,84],"source":" In a debug build, `__uuidof` always initializes an object dynamically (at runtime)."},{"content":"In a release build, <ph id=\"ph1\">`__uuidof`</ph> can statically (at compile time) initialize an object.","pos":[85,170],"source":" In a release build, `__uuidof` can statically (at compile time) initialize an object."}]}]},{"content":"Example","pos":[1693,1700]},{"content":"The following code (compiled with ole32.lib) will display the uuid of a library block created with the module attribute:","pos":[1704,1824]},{"content":"Comments","pos":[2189,2197]},{"content":"In cases where the library name is no longer in scope, you can use __LIBID<ph id=\"ph1\">\\_</ph> instead of <ph id=\"ph2\">`__uuidof`</ph>.","pos":[2201,2300],"source":"In cases where the library name is no longer in scope, you can use __LIBID\\_ instead of `__uuidof`."},{"content":"For example:","pos":[2301,2313]},{"content":"END Microsoft Specific","pos":[2377,2399]},{"content":"See Also","pos":[2410,2418]},{"content":"Expressions with Unary Operators","pos":[2423,2455]},{"content":"Keywords","pos":[2506,2514]}],"content":"---\ntitle: \"__uuidof Operator | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"__LIBID_\"\n  - \"__LIBID_cpp\"\n  - \"__uuidof\"\n  - \"__uuidof_cpp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"__uuidof keyword [C++]\"\n  - \"__LIBID_ keyword [C++]\"\nms.assetid: badfe709-809b-4b66-ad48-ee35039d25c6\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# __uuidof Operator\n**Microsoft Specific**  \n  \n Retrieves the GUID attached to the expression.  \n  \n## Syntax  \n  \n```  \n  \n      __uuidof (  \n   expression   \n)  \n```  \n  \n## Remarks  \n The *expression* can be a type name, pointer, reference, or array of that type, a template specialized on these types, or a variable of these types. The argument is valid as long as the compiler can use it to find the attached GUID.  \n  \n A special case of this intrinsic is when either **0** or **NULL** is supplied as the argument. In this case, `__uuidof` will return a GUID made up of zeros.  \n  \n Use this keyword to extract the GUID attached to:  \n  \n-   An object by the [uuid](../cpp/uuid-cpp.md) extended attribute.  \n  \n-   A library block created with the [module](../windows/module-cpp.md) attribute.  \n  \n> [!NOTE]\n>  In a debug build, `__uuidof` always initializes an object dynamically (at runtime). In a release build, `__uuidof` can statically (at compile time) initialize an object.  \n  \n## Example  \n The following code (compiled with ole32.lib) will display the uuid of a library block created with the module attribute:  \n  \n```  \n// expre_uuidof.cpp  \n// compile with: ole32.lib  \n#include \"stdio.h\"  \n#include \"windows.h\"  \n  \n[emitidl];  \n[module(name=\"MyLib\")];  \n[export]  \nstruct stuff {  \n   int i;  \n};  \n  \nint main() {  \n   LPOLESTR lpolestr;  \n   StringFromCLSID(__uuidof(MyLib), &lpolestr);  \n   wprintf_s(L\"%s\", lpolestr);  \n   CoTaskMemFree(lpolestr);  \n}  \n```  \n  \n## Comments  \n In cases where the library name is no longer in scope, you can use __LIBID\\_ instead of `__uuidof`. For example:  \n  \n```  \nStringFromCLSID(__LIBID_, &lpolestr);  \n```  \n  \n **END Microsoft Specific**  \n  \n## See Also  \n [Expressions with Unary Operators](../cpp/expressions-with-unary-operators.md)   \n [Keywords](../cpp/keywords-cpp.md)"}