{"nodes":[{"pos":[12,38],"content":"C.2 Rules | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"C.2 Rules | Microsoft Docs","pos":[0,26]}]},{"content":"C.2 Rules","pos":[518,527]},{"content":"The notation is described in section 6.1 of the C standard.","pos":[528,587]},{"content":"This grammar appendix shows the extensions to the base language grammar for the OpenMP C and C++ directives.","pos":[588,696]},{"content":"in C++ (ISO/IEC 14882:1998)","pos":[709,736]},{"pos":[749,765],"content":"<bpt id=\"p1\">*</bpt>statement-seq<ept id=\"p1\">*</ept>:","source":"*statement-seq*:"},{"content":"statement","pos":[773,782]},{"content":"openmp-directive","pos":[791,807]},{"content":"statement-seq statement","pos":[816,839]},{"content":"statement-seq openmp-directive","pos":[848,878]},{"content":"in C90 (ISO/IEC 9899:1990)","pos":[892,918]},{"pos":[931,948],"content":"<bpt id=\"p1\">*</bpt>statement-list<ept id=\"p1\">*</ept>:","source":"*statement-list*:"},{"content":"statement","pos":[956,965]},{"content":"openmp-directive","pos":[974,990]},{"content":"statement-list statement","pos":[999,1023]},{"content":"statement-list openmp-directive","pos":[1032,1063]},{"content":"in C99 (ISO/IEC 9899:1999)","pos":[1077,1103]},{"pos":[1116,1129],"content":"<bpt id=\"p1\">*</bpt>block-item<ept id=\"p1\">*</ept>:","source":"*block-item*:"},{"content":"declaration","pos":[1137,1148]},{"content":"statement","pos":[1157,1166]},{"content":"openmp-directive","pos":[1175,1191]},{"pos":[1199,1211],"content":"<bpt id=\"p1\">*</bpt>statement<ept id=\"p1\">*</ept>:","source":"*statement*:"},{"content":"standard statements","pos":[1224,1243]},{"content":"openmp-construct","pos":[1257,1273]},{"pos":[1281,1300],"content":"<bpt id=\"p1\">*</bpt>openmp-construct<ept id=\"p1\">*</ept>:","source":"*openmp-construct*:"},{"content":"parallel-construct","pos":[1308,1326]},{"content":"for-construct","pos":[1335,1348]},{"content":"sections-construct","pos":[1357,1375]},{"content":"single-construct","pos":[1384,1400]},{"content":"parallel-for-construct","pos":[1409,1431]},{"content":"parallel-sections-construct","pos":[1440,1467]},{"content":"master-construc","pos":[1476,1491]},{"content":"critical-construct","pos":[1500,1518]},{"content":"atomic-construct","pos":[1527,1543]},{"content":"ordered-construct","pos":[1552,1569]},{"pos":[1577,1596],"content":"<bpt id=\"p1\">*</bpt>openmp-directive<ept id=\"p1\">*</ept>:","source":"*openmp-directive*:"},{"content":"barrier-directive","pos":[1604,1621]},{"content":"flush-directive","pos":[1630,1645]},{"pos":[1653,1672],"content":"<bpt id=\"p1\">*</bpt>structured-block<ept id=\"p1\">*</ept>:","source":"*structured-block*:"},{"content":"statement","pos":[1680,1689]},{"pos":[1697,1718],"content":"<bpt id=\"p1\">*</bpt>parallel-construct<ept id=\"p1\">*</ept>:","source":"*parallel-construct*:"},{"content":"parallel-directive structured-block","pos":[1726,1761]},{"pos":[1769,1790],"content":"<bpt id=\"p1\">*</bpt>parallel-directive<ept id=\"p1\">*</ept>:","source":"*parallel-directive*:"},{"pos":[1797,1858],"content":"<bpt id=\"p1\">**</bpt># pragma omp parallel<ept id=\"p1\">**</ept>  <bpt id=\"p2\">*</bpt>parallel-clause<ept id=\"p2\">*</ept>optseq <bpt id=\"p3\">*</bpt>new-line<ept id=\"p3\">*</ept>","source":"**# pragma omp parallel**  *parallel-clause*optseq *new-line*"},{"pos":[1865,1883],"content":"<bpt id=\"p1\">*</bpt>parallel-clause<ept id=\"p1\">*</ept>:","source":"*parallel-clause*:"},{"content":"unique-parallel-clause","pos":[1891,1913]},{"content":"data-clause","pos":[1922,1933]},{"pos":[1941,1966],"content":"<bpt id=\"p1\">*</bpt>unique-parallel-clause<ept id=\"p1\">*</ept>:","source":"*unique-parallel-clause*:"},{"pos":[1973,2000],"content":"<bpt id=\"p1\">**</bpt>if (<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>expression<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept>","source":"**if (** *expression* **)**"},{"pos":[2007,2043],"content":"<bpt id=\"p1\">**</bpt>num_threads (<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>expression<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept>","source":"**num_threads (** *expression* **)**"},{"pos":[2050,2066],"content":"<bpt id=\"p1\">*</bpt>for-construct<ept id=\"p1\">*</ept>:","source":"*for-construct*:"},{"content":"for-directive iteration-statement","pos":[2074,2107]},{"pos":[2115,2131],"content":"<bpt id=\"p1\">*</bpt>for-directive<ept id=\"p1\">*</ept>:","source":"*for-directive*:"},{"pos":[2138,2188],"content":"<bpt id=\"p1\">**</bpt># pragma omp for<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>for-clause<ept id=\"p2\">*</ept>optseq <bpt id=\"p3\">*</bpt>new-line<ept id=\"p3\">*</ept>","source":"**# pragma omp for** *for-clause*optseq *new-line*"},{"pos":[2195,2208],"content":"<bpt id=\"p1\">*</bpt>for-clause<ept id=\"p1\">*</ept>:","source":"*for-clause*:"},{"content":"unique-for-clause","pos":[2216,2233]},{"content":"data-clause","pos":[2242,2253]},{"content":"nowait","pos":[2263,2269]},{"pos":[2278,2298],"content":"<bpt id=\"p1\">*</bpt>unique-for-clause<ept id=\"p1\">*</ept>:","source":"*unique-for-clause*:"},{"content":"ordered","pos":[2307,2314]},{"pos":[2323,2359],"content":"<bpt id=\"p1\">**</bpt>schedule (<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>schedule-kind<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept>","source":"**schedule (** *schedule-kind* **)**"},{"pos":[2366,2421],"content":"<bpt id=\"p1\">**</bpt>schedule (<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>schedule-kind<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>,<ept id=\"p3\">**</ept> <bpt id=\"p4\">*</bpt>expression<ept id=\"p4\">*</ept> <bpt id=\"p5\">**</bpt>)<ept id=\"p5\">**</ept>","source":"**schedule (** *schedule-kind* **,** *expression* **)**"},{"pos":[2428,2444],"content":"<bpt id=\"p1\">*</bpt>schedule-kind<ept id=\"p1\">*</ept>:","source":"*schedule-kind*:"},{"content":"static","pos":[2453,2459]},{"content":"dynamic","pos":[2470,2477]},{"content":"guided","pos":[2488,2494]},{"content":"runtime","pos":[2505,2512]},{"pos":[2521,2542],"content":"<bpt id=\"p1\">*</bpt>sections-construct<ept id=\"p1\">*</ept>:","source":"*sections-construct*:"},{"content":"sections-directive section-scope","pos":[2550,2582]},{"pos":[2590,2611],"content":"<bpt id=\"p1\">*</bpt>sections-directive<ept id=\"p1\">*</ept>:","source":"*sections-directive*:"},{"pos":[2618,2678],"content":"<bpt id=\"p1\">**</bpt># pragma omp sections<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>sections-clause<ept id=\"p2\">*</ept>optseq <bpt id=\"p3\">*</bpt>new-line<ept id=\"p3\">*</ept>","source":"**# pragma omp sections** *sections-clause*optseq *new-line*"},{"pos":[2685,2703],"content":"<bpt id=\"p1\">*</bpt>sections-clause<ept id=\"p1\">*</ept>:","source":"*sections-clause*:"},{"content":"data-clause","pos":[2711,2722]},{"content":"nowait","pos":[2732,2738]},{"pos":[2747,2763],"content":"<bpt id=\"p1\">*</bpt>section-scope<ept id=\"p1\">*</ept>:","source":"*section-scope*:"},{"content":"{ section-sequence }","pos":[2771,2791]},{"pos":[2799,2818],"content":"<bpt id=\"p1\">*</bpt>section-sequence<ept id=\"p1\">*</ept>:","source":"*section-sequence*:"},{"pos":[2825,2866],"content":"<bpt id=\"p1\">*</bpt>section-directive<ept id=\"p1\">*</ept>opt <bpt id=\"p2\">*</bpt>structured-block<ept id=\"p2\">*</ept>","source":"*section-directive*opt *structured-block*"},{"content":"section-sequence section-directive structured-block","pos":[2874,2925]},{"pos":[2933,2953],"content":"<bpt id=\"p1\">*</bpt>section-directive<ept id=\"p1\">*</ept>:","source":"*section-directive*:"},{"pos":[2960,2995],"content":"<bpt id=\"p1\">**</bpt># pragma omp section<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>new-line<ept id=\"p2\">*</ept>","source":"**# pragma omp section** *new-line*"},{"pos":[3002,3021],"content":"<bpt id=\"p1\">*</bpt>single-construct<ept id=\"p1\">*</ept>:","source":"*single-construct*:"},{"content":"single-directive structured-block","pos":[3029,3062]},{"pos":[3070,3089],"content":"<bpt id=\"p1\">*</bpt>single-directive<ept id=\"p1\">*</ept>:","source":"*single-directive*:"},{"pos":[3096,3152],"content":"<bpt id=\"p1\">**</bpt># pragma omp single<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>single-clause<ept id=\"p2\">*</ept>optseq <bpt id=\"p3\">*</bpt>new-line<ept id=\"p3\">*</ept>","source":"**# pragma omp single** *single-clause*optseq *new-line*"},{"pos":[3159,3175],"content":"<bpt id=\"p1\">*</bpt>single-clause<ept id=\"p1\">*</ept>:","source":"*single-clause*:"},{"content":"data-clause","pos":[3183,3194]},{"content":"nowait","pos":[3204,3210]},{"pos":[3219,3244],"content":"<bpt id=\"p1\">*</bpt>parallel-for-construct<ept id=\"p1\">*</ept>:","source":"*parallel-for-construct*:"},{"content":"parallel-for-directive iteration-statement","pos":[3252,3294]},{"pos":[3302,3327],"content":"<bpt id=\"p1\">*</bpt>parallel-for-directive<ept id=\"p1\">*</ept>:","source":"*parallel-for-directive*:"},{"pos":[3334,3402],"content":"<bpt id=\"p1\">**</bpt># pragma omp parallel for<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>parallel-for-clause<ept id=\"p2\">*</ept>optseq <bpt id=\"p3\">*</bpt>new-line<ept id=\"p3\">*</ept>","source":"**# pragma omp parallel for** *parallel-for-clause*optseq *new-line*"},{"pos":[3409,3431],"content":"<bpt id=\"p1\">*</bpt>parallel-for-clause<ept id=\"p1\">*</ept>:","source":"*parallel-for-clause*:"},{"content":"unique-parallel-clause","pos":[3439,3461]},{"content":"unique-for-clause","pos":[3470,3487]},{"content":"data-clause","pos":[3496,3507]},{"pos":[3515,3545],"content":"<bpt id=\"p1\">*</bpt>parallel-sections-construct<ept id=\"p1\">*</ept>:","source":"*parallel-sections-construct*:"},{"content":"parallel-sections-directive section-scope","pos":[3553,3594]},{"pos":[3602,3632],"content":"<bpt id=\"p1\">*</bpt>parallel-sections-directive<ept id=\"p1\">*</ept>:","source":"*parallel-sections-directive*:"},{"pos":[3639,3717],"content":"<bpt id=\"p1\">**</bpt># pragma omp parallel sections<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>parallel-sections-clause<ept id=\"p2\">*</ept>optseq <bpt id=\"p3\">*</bpt>new-line<ept id=\"p3\">*</ept>","source":"**# pragma omp parallel sections** *parallel-sections-clause*optseq *new-line*"},{"pos":[3724,3751],"content":"<bpt id=\"p1\">*</bpt>parallel-sections-clause<ept id=\"p1\">*</ept>:","source":"*parallel-sections-clause*:"},{"content":"unique-parallel-clause","pos":[3759,3781]},{"content":"data-clause","pos":[3790,3801]},{"pos":[3809,3828],"content":"<bpt id=\"p1\">*</bpt>master-construct<ept id=\"p1\">*</ept>:","source":"*master-construct*:"},{"content":"master-directive structured-block","pos":[3836,3869]},{"pos":[3877,3896],"content":"<bpt id=\"p1\">*</bpt>master-directive<ept id=\"p1\">*</ept>:","source":"*master-directive*:"},{"pos":[3903,3937],"content":"<bpt id=\"p1\">**</bpt># pragma omp master<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>new-line<ept id=\"p2\">*</ept>","source":"**# pragma omp master** *new-line*"},{"pos":[3944,3965],"content":"<bpt id=\"p1\">*</bpt>critical-construct<ept id=\"p1\">*</ept>:","source":"*critical-construct*:"},{"content":"critical-directive structured-block","pos":[3973,4008]},{"pos":[4016,4037],"content":"<bpt id=\"p1\">*</bpt>critical-directive<ept id=\"p1\">*</ept>:","source":"*critical-directive*:"},{"pos":[4044,4099],"content":"<bpt id=\"p1\">**</bpt># pragma omp critical<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>region-phrase<ept id=\"p2\">*</ept>opt <bpt id=\"p3\">*</bpt>new-line<ept id=\"p3\">*</ept>","source":"**# pragma omp critical** *region-phrase*opt *new-line*"},{"pos":[4106,4122],"content":"<bpt id=\"p1\">*</bpt>region-phrase<ept id=\"p1\">*</ept>:","source":"*region-phrase*:"},{"content":"( identifier )","pos":[4130,4144]},{"pos":[4152,4172],"content":"<bpt id=\"p1\">*</bpt>barrier-directive<ept id=\"p1\">*</ept>:","source":"*barrier-directive*:"},{"pos":[4179,4214],"content":"<bpt id=\"p1\">**</bpt># pragma omp barrier<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>new-line<ept id=\"p2\">*</ept>","source":"**# pragma omp barrier** *new-line*"},{"pos":[4221,4240],"content":"<bpt id=\"p1\">*</bpt>atomic-construct<ept id=\"p1\">*</ept>:","source":"*atomic-construct*:"},{"content":"atomic-directive expression-statement","pos":[4248,4285]},{"pos":[4293,4312],"content":"<bpt id=\"p1\">*</bpt>atomic-directive<ept id=\"p1\">*</ept>:","source":"*atomic-directive*:"},{"pos":[4319,4353],"content":"<bpt id=\"p1\">**</bpt># pragma omp atomic<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>new-line<ept id=\"p2\">*</ept>","source":"**# pragma omp atomic** *new-line*"},{"pos":[4360,4378],"content":"<bpt id=\"p1\">*</bpt>flush-directive<ept id=\"p1\">*</ept>:","source":"*flush-directive*:"},{"pos":[4385,4434],"content":"<bpt id=\"p1\">**</bpt># pragma omp flush<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>flush-vars<ept id=\"p2\">*</ept>opt <bpt id=\"p3\">*</bpt>new-line<ept id=\"p3\">*</ept>","source":"**# pragma omp flush** *flush-vars*opt *new-line*"},{"pos":[4441,4454],"content":"<bpt id=\"p1\">*</bpt>flush-vars<ept id=\"p1\">*</ept>:","source":"*flush-vars*:"},{"content":"( variable-list )","pos":[4462,4479]},{"pos":[4487,4507],"content":"<bpt id=\"p1\">*</bpt>ordered-construct<ept id=\"p1\">*</ept>:","source":"*ordered-construct*:"},{"content":"ordered-directive structured-block","pos":[4515,4549]},{"pos":[4557,4577],"content":"<bpt id=\"p1\">*</bpt>ordered-directive<ept id=\"p1\">*</ept>:","source":"*ordered-directive*:"},{"pos":[4584,4619],"content":"<bpt id=\"p1\">**</bpt># pragma omp ordered<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>new-line<ept id=\"p2\">*</ept>","source":"**# pragma omp ordered** *new-line*"},{"pos":[4626,4640],"content":"<bpt id=\"p1\">*</bpt>declaration<ept id=\"p1\">*</ept>:","source":"*declaration*:"},{"content":"standard declarations","pos":[4653,4674]},{"content":"threadprivate-directive","pos":[4688,4711]},{"pos":[4719,4745],"content":"<bpt id=\"p1\">*</bpt>threadprivate-directive<ept id=\"p1\">*</ept>:","source":"*threadprivate-directive*:"},{"pos":[4752,4818],"content":"<bpt id=\"p1\">**</bpt># pragma omp threadprivate (<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>variable-list<ept id=\"p2\">*</ept>  <bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept> <bpt id=\"p4\">*</bpt>new-line<ept id=\"p4\">*</ept>","source":"**# pragma omp threadprivate (** *variable-list*  **)** *new-line*"},{"pos":[4825,4839],"content":"<bpt id=\"p1\">*</bpt>data-clause<ept id=\"p1\">*</ept>:","source":"*data-clause*:"},{"pos":[4846,4881],"content":"<bpt id=\"p1\">**</bpt>private (<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>variable-list<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept>","source":"**private (** *variable-list* **)**"},{"pos":[4888,4929],"content":"<bpt id=\"p1\">**</bpt>copyprivate (<ept id=\"p1\">**</ept>  <bpt id=\"p2\">*</bpt>variable-list<ept id=\"p2\">*</ept>  <bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept>","source":"**copyprivate (**  *variable-list*  **)**"},{"pos":[4936,4978],"content":"<bpt id=\"p1\">**</bpt>firstprivate (<ept id=\"p1\">**</ept>  <bpt id=\"p2\">*</bpt>variable-list<ept id=\"p2\">*</ept>  <bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept>","source":"**firstprivate (**  *variable-list*  **)**"},{"pos":[4985,5025],"content":"<bpt id=\"p1\">**</bpt>lastprivate (<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>variable-list<ept id=\"p2\">*</ept>  <bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept>","source":"**lastprivate (** *variable-list*  **)**"},{"pos":[5032,5066],"content":"<bpt id=\"p1\">**</bpt>shared (<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>variable-list<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept>","source":"**shared (** *variable-list* **)**"},{"content":"default ( shared )","pos":[5075,5093]},{"content":"default ( none )","pos":[5104,5120]},{"pos":[5129,5197],"content":"<bpt id=\"p1\">**</bpt>reduction (<ept id=\"p1\">**</ept>  <bpt id=\"p2\">*</bpt>reduction-operator<ept id=\"p2\">*</ept>  <bpt id=\"p3\">**</bpt>:<ept id=\"p3\">**</ept>  <bpt id=\"p4\">*</bpt>variable-list<ept id=\"p4\">*</ept>  <bpt id=\"p5\">**</bpt>)<ept id=\"p5\">**</ept>","source":"**reduction (**  *reduction-operator*  **:**  *variable-list*  **)**"},{"pos":[5204,5240],"content":"<bpt id=\"p1\">**</bpt>copyin (<ept id=\"p1\">**</ept>  <bpt id=\"p2\">*</bpt>variable-list<ept id=\"p2\">*</ept>  <bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept>","source":"**copyin (**  *variable-list*  **)**"},{"pos":[5247,5268],"content":"<bpt id=\"p1\">*</bpt>reduction-operator<ept id=\"p1\">*</ept>:","source":"*reduction-operator*:"},{"pos":[5275,5322],"content":"<bpt id=\"p1\">*</bpt>One of<ept id=\"p1\">*</ept>: <bpt id=\"p2\">**</bpt><ph id=\"ph1\">+ \\*</ph> - &amp; ^ &amp;#124; &amp;&amp; &amp;#124;&amp;#124;<ept id=\"p2\">**</ept>","source":"*One of*: **+ \\* - & ^ &#124; && &#124;&#124;**"},{"content":"in C","pos":[5335,5339]},{"pos":[5352,5368],"content":"<bpt id=\"p1\">*</bpt>variable-list<ept id=\"p1\">*</ept>:","source":"*variable-list*:"},{"content":"identifier","pos":[5376,5386]},{"pos":[5394,5428],"content":"<bpt id=\"p1\">*</bpt>variable-list<ept id=\"p1\">*</ept> <bpt id=\"p2\">**</bpt>,<ept id=\"p2\">**</ept> <bpt id=\"p3\">*</bpt>identifier<ept id=\"p3\">*</ept>","source":"*variable-list* **,** *identifier*"},{"content":"in C++","pos":[5441,5447]},{"pos":[5460,5476],"content":"<bpt id=\"p1\">*</bpt>variable-list<ept id=\"p1\">*</ept>:","source":"*variable-list*:"},{"content":"id-expression","pos":[5484,5497]},{"pos":[5505,5542],"content":"<bpt id=\"p1\">*</bpt>variable-list<ept id=\"p1\">*</ept> <bpt id=\"p2\">**</bpt>,<ept id=\"p2\">**</ept> <bpt id=\"p3\">*</bpt>id-expression<ept id=\"p3\">*</ept>","source":"*variable-list* **,** *id-expression*"}],"content":"---\ntitle: \"C.2 Rules | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: 4d52fef7-3eb7-4480-a335-8ed48681092b\ncaps.latest.revision: 4\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# C.2 Rules\nThe notation is described in section 6.1 of the C standard. This grammar appendix shows the extensions to the base language grammar for the OpenMP C and C++ directives.  \n  \n **/\\* in C++ (ISO/IEC 14882:1998) \\*/**  \n  \n *statement-seq*:  \n  \n *statement*  \n  \n *openmp-directive*  \n  \n *statement-seq statement*  \n  \n *statement-seq openmp-directive*  \n  \n **/\\* in C90 (ISO/IEC 9899:1990) \\*/**  \n  \n *statement-list*:  \n  \n *statement*  \n  \n *openmp-directive*  \n  \n *statement-list statement*  \n  \n *statement-list openmp-directive*  \n  \n **/\\* in C99 (ISO/IEC 9899:1999) \\*/**  \n  \n *block-item*:  \n  \n *declaration*  \n  \n *statement*  \n  \n *openmp-directive*  \n  \n *statement*:  \n  \n **/\\* standard statements \\*/**  \n  \n *openmp-construct*  \n  \n *openmp-construct*:  \n  \n *parallel-construct*  \n  \n *for-construct*  \n  \n *sections-construct*  \n  \n *single-construct*  \n  \n *parallel-for-construct*  \n  \n *parallel-sections-construct*  \n  \n *master-construc*  \n  \n *critical-construct*  \n  \n *atomic-construct*  \n  \n *ordered-construct*  \n  \n *openmp-directive*:  \n  \n *barrier-directive*  \n  \n *flush-directive*  \n  \n *structured-block*:  \n  \n *statement*  \n  \n *parallel-construct*:  \n  \n *parallel-directive structured-block*  \n  \n *parallel-directive*:  \n  \n **# pragma omp parallel**  *parallel-clause*optseq *new-line*  \n  \n *parallel-clause*:  \n  \n *unique-parallel-clause*  \n  \n *data-clause*  \n  \n *unique-parallel-clause*:  \n  \n **if (** *expression* **)**  \n  \n **num_threads (** *expression* **)**  \n  \n *for-construct*:  \n  \n *for-directive iteration-statement*  \n  \n *for-directive*:  \n  \n **# pragma omp for** *for-clause*optseq *new-line*  \n  \n *for-clause*:  \n  \n *unique-for-clause*  \n  \n *data-clause*  \n  \n **nowait**  \n  \n *unique-for-clause*:  \n  \n **ordered**  \n  \n **schedule (** *schedule-kind* **)**  \n  \n **schedule (** *schedule-kind* **,** *expression* **)**  \n  \n *schedule-kind*:  \n  \n **static**  \n  \n **dynamic**  \n  \n **guided**  \n  \n **runtime**  \n  \n *sections-construct*:  \n  \n *sections-directive section-scope*  \n  \n *sections-directive*:  \n  \n **# pragma omp sections** *sections-clause*optseq *new-line*  \n  \n *sections-clause*:  \n  \n *data-clause*  \n  \n **nowait**  \n  \n *section-scope*:  \n  \n *{ section-sequence }*  \n  \n *section-sequence*:  \n  \n *section-directive*opt *structured-block*  \n  \n *section-sequence section-directive structured-block*  \n  \n *section-directive*:  \n  \n **# pragma omp section** *new-line*  \n  \n *single-construct*:  \n  \n *single-directive structured-block*  \n  \n *single-directive*:  \n  \n **# pragma omp single** *single-clause*optseq *new-line*  \n  \n *single-clause*:  \n  \n *data-clause*  \n  \n **nowait**  \n  \n *parallel-for-construct*:  \n  \n *parallel-for-directive iteration-statement*  \n  \n *parallel-for-directive*:  \n  \n **# pragma omp parallel for** *parallel-for-clause*optseq *new-line*  \n  \n *parallel-for-clause*:  \n  \n *unique-parallel-clause*  \n  \n *unique-for-clause*  \n  \n *data-clause*  \n  \n *parallel-sections-construct*:  \n  \n *parallel-sections-directive section-scope*  \n  \n *parallel-sections-directive*:  \n  \n **# pragma omp parallel sections** *parallel-sections-clause*optseq *new-line*  \n  \n *parallel-sections-clause*:  \n  \n *unique-parallel-clause*  \n  \n *data-clause*  \n  \n *master-construct*:  \n  \n *master-directive structured-block*  \n  \n *master-directive*:  \n  \n **# pragma omp master** *new-line*  \n  \n *critical-construct*:  \n  \n *critical-directive structured-block*  \n  \n *critical-directive*:  \n  \n **# pragma omp critical** *region-phrase*opt *new-line*  \n  \n *region-phrase*:  \n  \n *( identifier )*  \n  \n *barrier-directive*:  \n  \n **# pragma omp barrier** *new-line*  \n  \n *atomic-construct*:  \n  \n *atomic-directive expression-statement*  \n  \n *atomic-directive*:  \n  \n **# pragma omp atomic** *new-line*  \n  \n *flush-directive*:  \n  \n **# pragma omp flush** *flush-vars*opt *new-line*  \n  \n *flush-vars*:  \n  \n *( variable-list )*  \n  \n *ordered-construct*:  \n  \n *ordered-directive structured-block*  \n  \n *ordered-directive*:  \n  \n **# pragma omp ordered** *new-line*  \n  \n *declaration*:  \n  \n **/\\* standard declarations \\*/**  \n  \n *threadprivate-directive*  \n  \n *threadprivate-directive*:  \n  \n **# pragma omp threadprivate (** *variable-list*  **)** *new-line*  \n  \n *data-clause*:  \n  \n **private (** *variable-list* **)**  \n  \n **copyprivate (**  *variable-list*  **)**  \n  \n **firstprivate (**  *variable-list*  **)**  \n  \n **lastprivate (** *variable-list*  **)**  \n  \n **shared (** *variable-list* **)**  \n  \n **default ( shared )**  \n  \n **default ( none )**  \n  \n **reduction (**  *reduction-operator*  **:**  *variable-list*  **)**  \n  \n **copyin (**  *variable-list*  **)**  \n  \n *reduction-operator*:  \n  \n *One of*: **+ \\* - & ^ &#124; && &#124;&#124;**  \n  \n **/\\* in C \\*/**  \n  \n *variable-list*:  \n  \n *identifier*  \n  \n *variable-list* **,** *identifier*  \n  \n **/\\* in C++ \\*/**  \n  \n *variable-list*:  \n  \n *id-expression*  \n  \n *variable-list* **,** *id-expression*"}