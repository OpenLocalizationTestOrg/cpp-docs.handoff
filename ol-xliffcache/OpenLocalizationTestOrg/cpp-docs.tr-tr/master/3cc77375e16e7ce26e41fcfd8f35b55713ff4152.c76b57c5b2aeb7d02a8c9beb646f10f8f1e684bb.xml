{"nodes":[{"pos":[12,48],"content":"Commands and Tables | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Commands and Tables | Microsoft Docs","pos":[0,36]}]},{"content":"Commands and Tables","pos":[887,906]},{"content":"Commands and tables allow you to access rowsets; that is, open rowsets, execute commands, and bind columns.","pos":[907,1014]},{"content":"The <bpt id=\"p1\">[</bpt>CCommand<ept id=\"p1\">](../../data/oledb/ccommand-class.md)</ept> and <bpt id=\"p2\">[</bpt>CTable<ept id=\"p2\">](../../data/oledb/ctable-class.md)</ept> classes instantiate the command and table objects, respectively.","pos":[1015,1177],"source":" The [CCommand](../../data/oledb/ccommand-class.md) and [CTable](../../data/oledb/ctable-class.md) classes instantiate the command and table objects, respectively."},{"content":"These classes derive from <bpt id=\"p1\">[</bpt>CAccessorRowset<ept id=\"p1\">](../../data/oledb/caccessorrowset-class.md)</ept> as shown in the following figure.","pos":[1178,1298],"source":" These classes derive from [CAccessorRowset](../../data/oledb/caccessorrowset-class.md) as shown in the following figure."},{"content":"CCommand and CTable","pos":[1307,1326]},{"content":"Command and Table Classes","pos":[1394,1419]},{"content":"In the previous table, <ph id=\"ph1\">`TAccessor`</ph> can be any accessor type listed in <bpt id=\"p1\">[</bpt>Accessor Types<ept id=\"p1\">](../../data/oledb/accessors-and-rowsets.md)</ept>.","pos":[1426,1556],"source":"In the previous table, `TAccessor` can be any accessor type listed in [Accessor Types](../../data/oledb/accessors-and-rowsets.md)."},{"content":"<bpt id=\"p1\">*</bpt>TRowset<ept id=\"p1\">*</ept> can be any rowset type listed in <bpt id=\"p2\">[</bpt>Rowset Types<ept id=\"p2\">](../../data/oledb/accessors-and-rowsets.md)</ept>.","pos":[1557,1658],"source":"*TRowset* can be any rowset type listed in [Rowset Types](../../data/oledb/accessors-and-rowsets.md)."},{"content":"<bpt id=\"p1\">*</bpt>TMultiple<ept id=\"p1\">*</ept> specifies the result type (a single or multiple result set).","pos":[1659,1731],"source":"*TMultiple* specifies the result type (a single or multiple result set)."},{"pos":[1738,1882],"content":"The <bpt id=\"p1\">[</bpt>ATL OLE DB Consumer Wizard<ept id=\"p1\">](../../atl/reference/atl-ole-db-consumer-wizard.md)</ept> lets you specify whether you want a command or table object.","source":"The [ATL OLE DB Consumer Wizard](../../atl/reference/atl-ole-db-consumer-wizard.md) lets you specify whether you want a command or table object."},{"content":"For data sources without commands, you can use the <ph id=\"ph1\">`CTable`</ph> class.","pos":[1892,1958],"source":"For data sources without commands, you can use the `CTable` class."},{"content":"You generally use it for simple rowsets that specify no parameters and require no multiple results.","pos":[1959,2058]},{"content":"This simple class opens a table on a data source using a table name that you specify.","pos":[2059,2144]},{"content":"For data sources that support commands, you can use the <ph id=\"ph1\">`CCommand`</ph> class instead.","pos":[2154,2235],"source":"For data sources that support commands, you can use the `CCommand` class instead."},{"content":"To execute a command, call <bpt id=\"p1\">[</bpt>Open<ept id=\"p1\">](../../data/oledb/ccommand-open.md)</ept> on this class.","pos":[2236,2319],"source":" To execute a command, call [Open](../../data/oledb/ccommand-open.md) on this class."},{"content":"As an alternative, you can call <ph id=\"ph1\">`Prepare`</ph> to prepare a command that you want to execute more than once.","pos":[2320,2423],"source":" As an alternative, you can call `Prepare` to prepare a command that you want to execute more than once."},{"content":"<bpt id=\"p1\">**</bpt>CCommand<ept id=\"p1\">**</ept> has three template arguments: an accessor type, a rowset type, and a result type (<ph id=\"ph1\">`CNoMultipleResults`</ph>, by default, or <ph id=\"ph2\">`CMultipleResults`</ph>).","pos":[2434,2586],"source":"**CCommand** has three template arguments: an accessor type, a rowset type, and a result type (`CNoMultipleResults`, by default, or `CMultipleResults`)."},{"content":"If you specify <ph id=\"ph1\">`CMultipleResults`</ph>, the <ph id=\"ph2\">`CCommand`</ph> class supports the <bpt id=\"p1\">**</bpt>IMultipleResults<ept id=\"p1\">**</ept> interface and handles multiple rowsets.","pos":[2587,2716],"source":" If you specify `CMultipleResults`, the `CCommand` class supports the **IMultipleResults** interface and handles multiple rowsets."},{"content":"The <bpt id=\"p1\">[</bpt>DBVIEWER<ept id=\"p1\">](http://msdn.microsoft.com/en-us/07620f99-c347-4d09-9ebc-2459e8049832)</ept> sample shows how to handle the multiple results.","pos":[2717,2850],"source":" The [DBVIEWER](http://msdn.microsoft.com/en-us/07620f99-c347-4d09-9ebc-2459e8049832) sample shows how to handle the multiple results."},{"content":"See Also","pos":[2859,2867]},{"content":"OLE DB Consumer Templates","pos":[2872,2897]}],"content":"---\ntitle: \"Commands and Tables | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"OLE DB consumer templates, table support\"\n  - \"CCommand class, OLE DB consumer templates\"\n  - \"commands [C++], OLE DB Consumer Templates\"\n  - \"CTable class\"\n  - \"CAccessorRowset class, command and table classes\"\n  - \"rowsets, accessing\"\n  - \"tables [C++], OLE DB Consumer Templates\"\n  - \"OLE DB consumer templates, command support\"\nms.assetid: 4bd3787b-6d26-40a9-be0c-083080537c12\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Commands and Tables\nCommands and tables allow you to access rowsets; that is, open rowsets, execute commands, and bind columns. The [CCommand](../../data/oledb/ccommand-class.md) and [CTable](../../data/oledb/ctable-class.md) classes instantiate the command and table objects, respectively. These classes derive from [CAccessorRowset](../../data/oledb/caccessorrowset-class.md) as shown in the following figure.  \n  \n ![CCommand and CTable](../../data/oledb/media/vccommandstables.gif \"vccommandstables\")  \nCommand and Table Classes  \n  \n In the previous table, `TAccessor` can be any accessor type listed in [Accessor Types](../../data/oledb/accessors-and-rowsets.md). *TRowset* can be any rowset type listed in [Rowset Types](../../data/oledb/accessors-and-rowsets.md). *TMultiple* specifies the result type (a single or multiple result set).  \n  \n The [ATL OLE DB Consumer Wizard](../../atl/reference/atl-ole-db-consumer-wizard.md) lets you specify whether you want a command or table object.  \n  \n-   For data sources without commands, you can use the `CTable` class. You generally use it for simple rowsets that specify no parameters and require no multiple results. This simple class opens a table on a data source using a table name that you specify.  \n  \n-   For data sources that support commands, you can use the `CCommand` class instead. To execute a command, call [Open](../../data/oledb/ccommand-open.md) on this class. As an alternative, you can call `Prepare` to prepare a command that you want to execute more than once.  \n  \n     **CCommand** has three template arguments: an accessor type, a rowset type, and a result type (`CNoMultipleResults`, by default, or `CMultipleResults`). If you specify `CMultipleResults`, the `CCommand` class supports the **IMultipleResults** interface and handles multiple rowsets. The [DBVIEWER](http://msdn.microsoft.com/en-us/07620f99-c347-4d09-9ebc-2459e8049832) sample shows how to handle the multiple results.  \n  \n## See Also  \n [OLE DB Consumer Templates](../../data/oledb/ole-db-consumer-templates-cpp.md)"}