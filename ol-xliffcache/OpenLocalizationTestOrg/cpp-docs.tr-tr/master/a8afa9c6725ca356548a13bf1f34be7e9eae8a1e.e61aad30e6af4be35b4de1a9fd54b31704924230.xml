{"nodes":[{"pos":[12,44],"content":"final Specifier | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"final Specifier | Microsoft Docs","pos":[0,32]}]},{"content":"final Specifier","pos":[622,637]},{"content":"You can use the <ph id=\"ph1\">`final`</ph> keyword to designate virtual functions that cannot be overridden in a derived class.","pos":[638,746],"source":"You can use the `final` keyword to designate virtual functions that cannot be overridden in a derived class."},{"content":"You can also use it to designate classes that cannot be inherited.","pos":[747,813]},{"content":"Syntax","pos":[822,828]},{"content":"Remarks","pos":[941,948]},{"pos":[960,1108],"content":"is context-sensitive and has special meaning only when it's used after a function declaration or class name; otherwise, it's not a reserved keyword."},{"pos":[1115,1213],"content":"When <ph id=\"ph1\">`final`</ph> is used in class declarations, <ph id=\"ph2\">`base-classes`</ph> is an optional part of the declaration.","source":"When `final` is used in class declarations, `base-classes` is an optional part of the declaration."},{"content":"Example","pos":[1222,1229]},{"pos":[1233,1336],"content":"The following example uses the <ph id=\"ph1\">`final`</ph> keyword to specify that a virtual function cannot be overridden.","source":"The following example uses the `final` keyword to specify that a virtual function cannot be overridden."},{"pos":[1589,1722],"content":"For information about how to specify that member functions can be overridden, see <bpt id=\"p1\">[</bpt>override Specifier<ept id=\"p1\">](../cpp/override-specifier.md)</ept>.","source":"For information about how to specify that member functions can be overridden, see [override Specifier](../cpp/override-specifier.md)."},{"pos":[1729,1815],"content":"The next example uses the <ph id=\"ph1\">`final`</ph> keyword to specify that a class cannot be inherited.","source":"The next example uses the `final` keyword to specify that a class cannot be inherited."},{"content":"See Also","pos":[2028,2036]},{"content":"Keywords","pos":[2041,2049]},{"content":"override Specifier","pos":[2080,2098]}],"content":"---\ntitle: \"final Specifier | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"final\"\n  - \"final_CPP\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"final Identifier\"\nms.assetid: 649866d0-79d4-449f-ab74-f84b911b79a3\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# final Specifier\nYou can use the `final` keyword to designate virtual functions that cannot be overridden in a derived class. You can also use it to designate classes that cannot be inherited.  \n  \n## Syntax  \n  \n```  \n  \nfunction-declaration final;  \n```  \n  \n```  \n  \nclass class-name final base-classes  \n```  \n  \n## Remarks  \n `final` is context-sensitive and has special meaning only when it's used after a function declaration or class name; otherwise, it's not a reserved keyword.  \n  \n When `final` is used in class declarations, `base-classes` is an optional part of the declaration.  \n  \n## Example  \n The following example uses the `final` keyword to specify that a virtual function cannot be overridden.  \n  \n```cpp  \nclass BaseClass  \n{  \n    virtual void func() final;  \n};  \n  \nclass DerivedClass: public BaseClass  \n{  \n    virtual void func(); // compiler error: attempting to   \n                         // override a final function  \n};  \n```  \n  \n For information about how to specify that member functions can be overridden, see [override Specifier](../cpp/override-specifier.md).  \n  \n The next example uses the `final` keyword to specify that a class cannot be inherited.  \n  \n```cpp  \nclass BaseClass final   \n{  \n};  \n  \nclass DerivedClass: public BaseClass // compiler error: BaseClass is   \n                                     // marked as non-inheritable  \n{  \n};  \n```  \n  \n## See Also  \n [Keywords](../cpp/keywords-cpp.md)   \n [override Specifier](../cpp/override-specifier.md)"}