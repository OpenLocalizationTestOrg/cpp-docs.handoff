{"nodes":[{"pos":[12,46],"content":"accelerator Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"accelerator Class | Microsoft Docs","pos":[0,34]}]},{"pos":[624,641],"content":"accelerator Class","linkify":"accelerator Class","nodes":[{"content":"accelerator Class","pos":[0,17]}]},{"content":"An accelerator is a hardware capability that is optimized for data-parallel computing.","pos":[642,728]},{"content":"An accelerator may be a device attached to a PCIe bus (such as a GPU), or it might be an extended instruction set on the main CPU.","pos":[729,859]},{"pos":[868,874],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[919,926],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[936,955],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[962,966]},{"content":"Description","pos":[967,978]},{"pos":[1016,1061],"content":"<bpt id=\"p1\">[</bpt>accelerator::accelerator Constructor<ept id=\"p1\">](#ctor)</ept>","source":"[accelerator::accelerator Constructor](#ctor)"},{"pos":[1062,1116],"content":"Initializes a new instance of the <ph id=\"ph1\">`accelerator`</ph> class.","source":"Initializes a new instance of the `accelerator` class."},{"pos":[1121,1166],"content":"<bpt id=\"p1\">[</bpt>accelerator::~accelerator Destructor<ept id=\"p1\">](#ctor)</ept>","source":"[accelerator::~accelerator Destructor](#ctor)"},{"pos":[1167,1201],"content":"Destroys the <ph id=\"ph1\">`accelerator`</ph> object.","source":"Destroys the `accelerator` object."},{"pos":[1212,1226],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1233,1237]},{"content":"Description","pos":[1238,1249]},{"pos":[1287,1334],"content":"<bpt id=\"p1\">[</bpt>accelerator::create_view Method<ept id=\"p1\">](#create_view)</ept>","source":"[accelerator::create_view Method](#create_view)"},{"pos":[1335,1404],"content":"Creates and returns an <ph id=\"ph1\">`accelerator_view`</ph> object on this accelerator.","source":"Creates and returns an `accelerator_view` object on this accelerator."},{"pos":[1409,1448],"content":"<bpt id=\"p1\">[</bpt>accelerator::get_all Method<ept id=\"p1\">](#get_all)</ept>","source":"[accelerator::get_all Method](#get_all)"},{"pos":[1449,1537],"content":"Returns a vector of <ph id=\"ph1\">`accelerator`</ph> objects that represent all the available accelerators.","source":"Returns a vector of `accelerator` objects that represent all the available accelerators."},{"pos":[1542,1613],"content":"<bpt id=\"p1\">[</bpt>accelerator::get_auto_selection_view Method<ept id=\"p1\">](#get_auto_selection_view)</ept>","source":"[accelerator::get_auto_selection_view Method](#get_auto_selection_view)"},{"pos":[1614,1660],"content":"Returns the auto-selection <ph id=\"ph1\">`accelerator_view`</ph>.","source":"Returns the auto-selection `accelerator_view`."},{"pos":[1665,1730],"content":"<bpt id=\"p1\">[</bpt>accelerator::get_dedicated_memory Method<ept id=\"p1\">](#get_dedicated_memory)</ept>","source":"[accelerator::get_dedicated_memory Method](#get_dedicated_memory)"},{"pos":[1731,1796],"content":"Returns the dedicated memory for the <ph id=\"ph1\">`accelerator`</ph>, in kilobytes.","source":"Returns the dedicated memory for the `accelerator`, in kilobytes."},{"pos":[1801,1880],"content":"<bpt id=\"p1\">[</bpt>accelerator::get_default_cpu_access_type Method<ept id=\"p1\">](#get_default_cpu_access_type)</ept>","source":"[accelerator::get_default_cpu_access_type Method](#get_default_cpu_access_type)"},{"pos":[1881,2003],"content":"Returns the default <bpt id=\"p1\">[</bpt>access_type<ept id=\"p1\">](concurrency-namespace-enums-amp.md#access_type)</ept> for buffers created on this accelerator.","source":"Returns the default [access_type](concurrency-namespace-enums-amp.md#access_type) for buffers created on this accelerator."},{"pos":[2008,2065],"content":"<bpt id=\"p1\">[</bpt>accelerator::get_default_view Method<ept id=\"p1\">](#get_default_view)</ept>","source":"[accelerator::get_default_view Method](#get_default_view)"},{"pos":[2066,2154],"content":"Returns the default <ph id=\"ph1\">`accelerator_view`</ph> object that is associated with the <ph id=\"ph2\">`accelerator`</ph>.","source":"Returns the default `accelerator_view` object that is associated with the `accelerator`."},{"pos":[2159,2214],"content":"<bpt id=\"p1\">[</bpt>accelerator::get_description Method<ept id=\"p1\">](#get_description)</ept>","source":"[accelerator::get_description Method](#get_description)"},{"pos":[2215,2271],"content":"Returns a short description of the <ph id=\"ph1\">`accelerator`</ph> device.","source":"Returns a short description of the `accelerator` device."},{"pos":[2276,2331],"content":"<bpt id=\"p1\">[</bpt>accelerator::get_device_path Method<ept id=\"p1\">](#get_device_path)</ept>","source":"[accelerator::get_device_path Method](#get_device_path)"},{"content":"Returns the path of the device.","pos":[2332,2363]},{"pos":[2368,2423],"content":"<bpt id=\"p1\">[</bpt>accelerator::get_has_display Method<ept id=\"p1\">](#get_has_display)</ept>","source":"[accelerator::get_has_display Method](#get_has_display)"},{"pos":[2424,2486],"content":"Determines whether the <ph id=\"ph1\">`accelerator`</ph> is attached to a display.","source":"Determines whether the `accelerator` is attached to a display."},{"pos":[2491,2540],"content":"<bpt id=\"p1\">[</bpt>accelerator::get_is_debug Method<ept id=\"p1\">](#get_is_debug)</ept>","source":"[accelerator::get_is_debug Method](#get_is_debug)"},{"pos":[2541,2636],"content":"Determines whether the <ph id=\"ph1\">`accelerator`</ph> has the DEBUG layer enabled for extensive error reporting.","source":"Determines whether the `accelerator` has the DEBUG layer enabled for extensive error reporting."},{"pos":[2641,2696],"content":"<bpt id=\"p1\">[</bpt>accelerator::get_is_emulated Method<ept id=\"p1\">](#get_is_emulated)</ept>","source":"[accelerator::get_is_emulated Method](#get_is_emulated)"},{"pos":[2697,2746],"content":"Determines whether the <ph id=\"ph1\">`accelerator`</ph> is emulated.","source":"Determines whether the `accelerator` is emulated."},{"pos":[2751,2836],"content":"<bpt id=\"p1\">[</bpt>accelerator::get_supports_cpu_shared_memory Method<ept id=\"p1\">](#get_supports_cpu_shared_memory)</ept>","source":"[accelerator::get_supports_cpu_shared_memory Method](#get_supports_cpu_shared_memory)"},{"pos":[2837,2896],"content":"Determines whether the <ph id=\"ph1\">`accelerator`</ph> supports shared memory","source":"Determines whether the `accelerator` supports shared memory"},{"pos":[2901,2984],"content":"<bpt id=\"p1\">[</bpt>accelerator::get_supports_double_precision Method<ept id=\"p1\">](#get_supports_double_precision)</ept>","source":"[accelerator::get_supports_double_precision Method](#get_supports_double_precision)"},{"pos":[2985,3047],"content":"Determines whether the <ph id=\"ph1\">`accelerator`</ph> is attached to a display.","source":"Determines whether the `accelerator` is attached to a display."},{"pos":[3052,3151],"content":"<bpt id=\"p1\">[</bpt>accelerator::get_supports_limited_double_precision Method<ept id=\"p1\">](#get_supports_limited_double_precision)</ept>","source":"[accelerator::get_supports_limited_double_precision Method](#get_supports_limited_double_precision)"},{"pos":[3152,3235],"content":"Determines whether the <ph id=\"ph1\">`accelerator`</ph> has limited support for double-precision math.","source":"Determines whether the `accelerator` has limited support for double-precision math."},{"pos":[3240,3287],"content":"<bpt id=\"p1\">[</bpt>accelerator::get_version Method<ept id=\"p1\">](#get_version)</ept>","source":"[accelerator::get_version Method](#get_version)"},{"pos":[3288,3329],"content":"Returns the version of the <ph id=\"ph1\">`accelerator`</ph>.","source":"Returns the version of the `accelerator`."},{"pos":[3334,3381],"content":"<bpt id=\"p1\">[</bpt>accelerator::set_default Method<ept id=\"p1\">](#set_default)</ept>","source":"[accelerator::set_default Method](#set_default)"},{"content":"Returns the path of the default accelerator.","pos":[3382,3426]},{"pos":[3431,3510],"content":"<bpt id=\"p1\">[</bpt>accelerator::set_default_cpu_access_type Method<ept id=\"p1\">](#set_default_cpu_access_type)</ept>","source":"[accelerator::set_default_cpu_access_type Method](#set_default_cpu_access_type)"},{"pos":[3511,3663],"content":"Sets the default CPU <bpt id=\"p1\">[</bpt>access_type<ept id=\"p1\">](concurrency-namespace-enums-amp.md#access_type)</ept>for arrays and implicit memory allocations made on this <ph id=\"ph1\">`accelerator`</ph>.","source":"Sets the default CPU [access_type](concurrency-namespace-enums-amp.md#access_type)for arrays and implicit memory allocations made on this `accelerator`."},{"pos":[3674,3690],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[3697,3701]},{"content":"Description","pos":[3702,3713]},{"pos":[3751,3800],"content":"<bpt id=\"p1\">[</bpt>accelerator::operator!= Operator<ept id=\"p1\">](#operator_neq)</ept>","source":"[accelerator::operator!= Operator](#operator_neq)"},{"pos":[3801,3917],"content":"Compares this <ph id=\"ph1\">`accelerator`</ph> object with another and returns <ph id=\"ph2\">`false`</ph> if they are the same; otherwise, returns <ph id=\"ph3\">`true`</ph>.","source":"Compares this `accelerator` object with another and returns `false` if they are the same; otherwise, returns `true`."},{"pos":[3922,3969],"content":"<bpt id=\"p1\">[</bpt>accelerator::operator= Operator<ept id=\"p1\">](#operator_eq)</ept>","source":"[accelerator::operator= Operator](#operator_eq)"},{"pos":[3970,4040],"content":"Copies the contents of the specified <ph id=\"ph1\">`accelerator`</ph> object to this one.","source":"Copies the contents of the specified `accelerator` object to this one."},{"pos":[4045,4096],"content":"<bpt id=\"p1\">[</bpt>accelerator::operator== Operator<ept id=\"p1\">](#operator_eq_eq)</ept>","source":"[accelerator::operator== Operator](#operator_eq_eq)"},{"pos":[4097,4213],"content":"Compares this <ph id=\"ph1\">`accelerator`</ph> object with another and returns <ph id=\"ph2\">`true`</ph> if they are the same; otherwise, returns <ph id=\"ph3\">`false`</ph>.","source":"Compares this `accelerator` object with another and returns `true` if they are the same; otherwise, returns `false`."},{"pos":[4224,4243],"content":"Public Data Members","linkify":"Public Data Members","nodes":[{"content":"Public Data Members","pos":[0,19]}]},{"content":"Name","pos":[4250,4254]},{"content":"Description","pos":[4255,4266]},{"pos":[4304,4364],"content":"<bpt id=\"p1\">[</bpt>accelerator::cpu_accelerator Data Member<ept id=\"p1\">](#cpu_accelerator)</ept>","source":"[accelerator::cpu_accelerator Data Member](#cpu_accelerator)"},{"pos":[4365,4414],"content":"Gets a string constant for the CPU <ph id=\"ph1\">`accelerator`</ph>.","source":"Gets a string constant for the CPU `accelerator`."},{"pos":[4419,4481],"content":"<bpt id=\"p1\">[</bpt>accelerator::dedicated_memory Data Member<ept id=\"p1\">](#dedicated_memory)</ept>","source":"[accelerator::dedicated_memory Data Member](#dedicated_memory)"},{"pos":[4482,4544],"content":"Gets the dedicated memory for the <ph id=\"ph1\">`accelerator`</ph>, in kilobytes.","source":"Gets the dedicated memory for the `accelerator`, in kilobytes."},{"pos":[4549,4617],"content":"<bpt id=\"p1\">[</bpt>accelerator::default_accelerator Data Member<ept id=\"p1\">](#default_accelerator)</ept>","source":"[accelerator::default_accelerator Data Member](#default_accelerator)"},{"pos":[4618,4671],"content":"Gets a string constant for the default <ph id=\"ph1\">`accelerator`</ph>.","source":"Gets a string constant for the default `accelerator`."},{"pos":[4676,4752],"content":"<bpt id=\"p1\">[</bpt>accelerator::default_cpu_access_type Data Member<ept id=\"p1\">](#default_cpu_access_type)</ept>","source":"[accelerator::default_cpu_access_type Data Member](#default_cpu_access_type)"},{"pos":[4753,4913],"content":"Gets or sets the default CPU <bpt id=\"p1\">[</bpt>access_type<ept id=\"p1\">](concurrency-namespace-enums-amp.md#access_type)</ept>for arrays and implicit memory allocations made on this <ph id=\"ph1\">`accelerator`</ph>.","source":"Gets or sets the default CPU [access_type](concurrency-namespace-enums-amp.md#access_type)for arrays and implicit memory allocations made on this `accelerator`."},{"pos":[4918,4972],"content":"<bpt id=\"p1\">[</bpt>accelerator::default_view Data Member<ept id=\"p1\">](#default_view)</ept>","source":"[accelerator::default_view Data Member](#default_view)"},{"pos":[4973,5058],"content":"Gets the default <ph id=\"ph1\">`accelerator_view`</ph> object that is associated with the <ph id=\"ph2\">`accelerator`</ph>.","source":"Gets the default `accelerator_view` object that is associated with the `accelerator`."},{"pos":[5063,5115],"content":"<bpt id=\"p1\">[</bpt>accelerator::description Data Member<ept id=\"p1\">](#description)</ept>","source":"[accelerator::description Data Member](#description)"},{"pos":[5116,5169],"content":"Gets a short description of the <ph id=\"ph1\">`accelerator`</ph> device.","source":"Gets a short description of the `accelerator` device."},{"pos":[5174,5226],"content":"<bpt id=\"p1\">[</bpt>accelerator::device_path Data Member<ept id=\"p1\">](#device_path)</ept>","source":"[accelerator::device_path Data Member](#device_path)"},{"content":"Gets the path of the device.","pos":[5227,5255]},{"pos":[5260,5314],"content":"<bpt id=\"p1\">[</bpt>accelerator::direct3d_ref Data Member<ept id=\"p1\">](#direct3d_ref)</ept>","source":"[accelerator::direct3d_ref Data Member](#direct3d_ref)"},{"pos":[5315,5377],"content":"Gets a string constant for a Direct3D reference <ph id=\"ph1\">`accelerator`</ph>.","source":"Gets a string constant for a Direct3D reference `accelerator`."},{"pos":[5382,5438],"content":"<bpt id=\"p1\">[</bpt>accelerator::direct3d_warp Data Member<ept id=\"p1\">](#direct3d_warp)</ept>","source":"[accelerator::direct3d_warp Data Member](#direct3d_warp)"},{"pos":[5439,5618],"content":"Gets the string constant for an <bpt id=\"p1\">[</bpt>accelerator<ept id=\"p1\">](accelerator-class.md)</ept> object that you can use for executing C++ AMP code on multi-core CPUs that use Streaming SIMD Extensions (SSE).","source":"Gets the string constant for an [accelerator](accelerator-class.md) object that you can use for executing C++ AMP code on multi-core CPUs that use Streaming SIMD Extensions (SSE)."},{"pos":[5623,5675],"content":"<bpt id=\"p1\">[</bpt>accelerator::has_display Data Member<ept id=\"p1\">](#has_display)</ept>","source":"[accelerator::has_display Data Member](#has_display)"},{"pos":[5676,5763],"content":"Gets a Boolean value that indicates whether the <ph id=\"ph1\">`accelerator`</ph> is attached to a display.","source":"Gets a Boolean value that indicates whether the `accelerator` is attached to a display."},{"pos":[5768,5814],"content":"<bpt id=\"p1\">[</bpt>accelerator::is_debug Data Member<ept id=\"p1\">](#is_debug)</ept>","source":"[accelerator::is_debug Data Member](#is_debug)"},{"pos":[5815,5909],"content":"Indicates whether the <ph id=\"ph1\">`accelerator`</ph> has the DEBUG layer enabled for extensive error reporting.","source":"Indicates whether the `accelerator` has the DEBUG layer enabled for extensive error reporting."},{"pos":[5914,5966],"content":"<bpt id=\"p1\">[</bpt>accelerator::is_emulated Data Member<ept id=\"p1\">](#is_emulated)</ept>","source":"[accelerator::is_emulated Data Member](#is_emulated)"},{"pos":[5967,6015],"content":"Indicates whether the <ph id=\"ph1\">`accelerator`</ph> is emulated.","source":"Indicates whether the `accelerator` is emulated."},{"pos":[6020,6102],"content":"<bpt id=\"p1\">[</bpt>accelerator::supports_cpu_shared_memory Data Member<ept id=\"p1\">](#supports_cpu_shared_memory)</ept>","source":"[accelerator::supports_cpu_shared_memory Data Member](#supports_cpu_shared_memory)"},{"pos":[6103,6162],"content":"Indicates whether the <ph id=\"ph1\">`accelerator`</ph> supports shared memory.","source":"Indicates whether the `accelerator` supports shared memory."},{"pos":[6167,6247],"content":"<bpt id=\"p1\">[</bpt>accelerator::supports_double_precision Data Member<ept id=\"p1\">](#supports_double_precision)</ept>","source":"[accelerator::supports_double_precision Data Member](#supports_double_precision)"},{"content":"Indicates whether the accelerator supports double-precision math.","pos":[6248,6313]},{"pos":[6318,6414],"content":"<bpt id=\"p1\">[</bpt>accelerator::supports_limited_double_precision Data Member<ept id=\"p1\">](#supports_limited_double_precision)</ept>","source":"[accelerator::supports_limited_double_precision Data Member](#supports_limited_double_precision)"},{"content":"Indicates whether the accelerator has limited support for double-precision math.","pos":[6415,6495]},{"pos":[6500,6544],"content":"<bpt id=\"p1\">[</bpt>accelerator::version Data Member<ept id=\"p1\">](#version)</ept>","source":"[accelerator::version Data Member](#version)"},{"pos":[6545,6583],"content":"Gets the version of the <ph id=\"ph1\">`accelerator`</ph>.","source":"Gets the version of the `accelerator`."},{"pos":[6593,6614],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[6640,6647],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An accelerator is a hardware capability that is optimized for data-parallel computing.","pos":[6651,6737]},{"content":"An accelerator is often a discrete GPU, but it can also be a virtual host-side entity such as a DirectX REF device, a WARP (a CPU-side device that is accelerated by means of SSE instructions), or the CPU itself.","pos":[6738,6949]},{"pos":[6956,7111],"content":"You can construct an <ph id=\"ph1\">`accelerator`</ph> object by enumerating the available devices, or by getting the default device, the reference device, or the WARP device.","source":"You can construct an `accelerator` object by enumerating the available devices, or by getting the default device, the reference device, or the WARP device."},{"pos":[7120,7132],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[7136,7155],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> amprt.h","source":"**Header:** amprt.h"},{"pos":[7162,7188],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> Concurrency","source":"**Namespace:** Concurrency"},{"pos":[7198,7260],"content":"<bpt id=\"p1\">&lt;a name=\"dtor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> <ph id=\"ph1\">&lt;/a&gt;</ph>  accelerator::~accelerator Destructor","linkify":"<a name=\"dtor\"></a> </a>  accelerator::~accelerator Destructor","source":"<a name=\"dtor\"></a> </a>  accelerator::~accelerator Destructor"},{"pos":[7264,7320],"content":"Destroys the <bpt id=\"p1\">[</bpt>accelerator<ept id=\"p1\">](accelerator-class.md)</ept> object.","source":"Destroys the [accelerator](accelerator-class.md) object."},{"pos":[7361,7373],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7383,7440],"content":"<bpt id=\"p1\">&lt;a name=\"ctor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::accelerator Constructor","linkify":"<a name=\"ctor\"></a>  accelerator::accelerator Constructor","source":"<a name=\"ctor\"></a>  accelerator::accelerator Constructor"},{"pos":[7444,7520],"content":"Initializes a new instance of the <bpt id=\"p1\">[</bpt>accelerator class<ept id=\"p1\">](accelerator-class.md)</ept>.","source":"Initializes a new instance of the [accelerator class](accelerator-class.md)."},{"pos":[7662,7672],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The path of the physical device.","pos":[7694,7726]},{"content":"The accelerator to copy.","pos":[7745,7769]},{"pos":[7779,7851],"content":"<bpt id=\"p1\">&lt;a name=\"cpu_accelerator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::cpu_accelerator Data Member","linkify":"<a name=\"cpu_accelerator\"></a>  accelerator::cpu_accelerator Data Member","source":"<a name=\"cpu_accelerator\"></a>  accelerator::cpu_accelerator Data Member"},{"content":"Gets a string constant for the CPU accelerator.","pos":[7855,7902]},{"pos":[7969,8028],"content":"<bpt id=\"p1\">&lt;a name=\"create_view\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::create_view Method","linkify":"<a name=\"create_view\"></a>  accelerator::create_view Method","source":"<a name=\"create_view\"></a>  accelerator::create_view Method"},{"content":"Creates and returns an <ph id=\"ph1\">`accelerator_view`</ph> object on this accelerator, using the specified queuing mode.","pos":[8032,8135],"source":"Creates and returns an `accelerator_view` object on this accelerator, using the specified queuing mode."},{"content":"When the queuing mode is not specified, the new <ph id=\"ph1\">`accelerator_view`</ph> uses the <bpt id=\"p1\">[</bpt>queuing_mode::immediate<ept id=\"p1\">](concurrency-namespace-enums-amp.md#queuing_mode)</ept> queuing mode.","pos":[8136,8300],"source":" When the queuing mode is not specified, the new `accelerator_view` uses the [queuing_mode::immediate](concurrency-namespace-enums-amp.md#queuing_mode) queuing mode."},{"pos":[8400,8410],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The queuing mode.","pos":[8425,8442]},{"pos":[8452,8464],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8468,8554],"content":"A new <ph id=\"ph1\">`accelerator_view`</ph> object on this accelerator, using the specified queuing mode.","source":"A new `accelerator_view` object on this accelerator, using the specified queuing mode."},{"pos":[8564,8638],"content":"<bpt id=\"p1\">&lt;a name=\"dedicated_memory\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::dedicated_memory Data Member","linkify":"<a name=\"dedicated_memory\"></a>  accelerator::dedicated_memory Data Member","source":"<a name=\"dedicated_memory\"></a>  accelerator::dedicated_memory Data Member"},{"pos":[8642,8726],"content":"Gets the dedicated memory for the <bpt id=\"p1\">[</bpt>accelerator<ept id=\"p1\">](accelerator-class.md)</ept>, in kilobytes.","source":"Gets the dedicated memory for the [accelerator](accelerator-class.md), in kilobytes."},{"pos":[8826,8906],"content":"<bpt id=\"p1\">&lt;a name=\"default_accelerator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::default_accelerator Data Member","linkify":"<a name=\"default_accelerator\"></a>  accelerator::default_accelerator Data Member","source":"<a name=\"default_accelerator\"></a>  accelerator::default_accelerator Data Member"},{"pos":[8910,8985],"content":"Gets a string constant for the default <bpt id=\"p1\">[</bpt>accelerator<ept id=\"p1\">](accelerator-class.md)</ept>.","source":"Gets a string constant for the default [accelerator](accelerator-class.md)."},{"pos":[9056,9144],"content":"<bpt id=\"p1\">&lt;a name=\"default_cpu_access_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::default_cpu_access_type Data Member","linkify":"<a name=\"default_cpu_access_type\"></a>  accelerator::default_cpu_access_type Data Member","source":"<a name=\"default_cpu_access_type\"></a>  accelerator::default_cpu_access_type Data Member"},{"pos":[9148,9300],"content":"The default cpu <bpt id=\"p1\">[</bpt>access_type<ept id=\"p1\">](concurrency-namespace-enums-amp.md#access_type)</ept>for arrays and implicit memory allocations made on this this <ph id=\"ph1\">`accelerator`</ph>.","source":"The default cpu [access_type](concurrency-namespace-enums-amp.md#access_type)for arrays and implicit memory allocations made on this this `accelerator`."},{"pos":[9419,9485],"content":"<bpt id=\"p1\">&lt;a name=\"default_view\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::default_view Data Member","linkify":"<a name=\"default_view\"></a>  accelerator::default_view Data Member","source":"<a name=\"default_view\"></a>  accelerator::default_view Data Member"},{"pos":[9489,9587],"content":"Gets the default accelerator view that is associated with the <bpt id=\"p1\">[</bpt>accelerator<ept id=\"p1\">](accelerator-class.md)</ept>.","source":"Gets the default accelerator view that is associated with the [accelerator](accelerator-class.md)."},{"pos":[9689,9753],"content":"<bpt id=\"p1\">&lt;a name=\"description\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::description Data Member","linkify":"<a name=\"description\"></a>  accelerator::description Data Member","source":"<a name=\"description\"></a>  accelerator::description Data Member"},{"pos":[9757,9832],"content":"Gets a short description of the <bpt id=\"p1\">[</bpt>accelerator<ept id=\"p1\">](accelerator-class.md)</ept> device.","source":"Gets a short description of the [accelerator](accelerator-class.md) device."},{"pos":[9928,9992],"content":"<bpt id=\"p1\">&lt;a name=\"device_path\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::device_path Data Member","linkify":"<a name=\"device_path\"></a>  accelerator::device_path Data Member","source":"<a name=\"device_path\"></a>  accelerator::device_path Data Member"},{"content":"Gets the path of the accelerator.","pos":[9996,10029]},{"content":"The path is unique on the system.","pos":[10030,10063]},{"pos":[10159,10225],"content":"<bpt id=\"p1\">&lt;a name=\"direct3d_ref\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::direct3d_ref Data Member","linkify":"<a name=\"direct3d_ref\"></a>  accelerator::direct3d_ref Data Member","source":"<a name=\"direct3d_ref\"></a>  accelerator::direct3d_ref Data Member"},{"content":"Gets a string constant for a Direct3D reference accelerator.","pos":[10229,10289]},{"pos":[10353,10421],"content":"<bpt id=\"p1\">&lt;a name=\"direct3d_warp\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::direct3d_warp Data Member","linkify":"<a name=\"direct3d_warp\"></a>  accelerator::direct3d_warp Data Member","source":"<a name=\"direct3d_warp\"></a>  accelerator::direct3d_warp Data Member"},{"pos":[10425,10606],"content":"Gets the string constant for an <bpt id=\"p1\">[</bpt>accelerator<ept id=\"p1\">](accelerator-class.md)</ept> object that you can use for executing your C++ AMP code on multi-core CPUs using Streaming SIMD Extensions (SSE).","source":"Gets the string constant for an [accelerator](accelerator-class.md) object that you can use for executing your C++ AMP code on multi-core CPUs using Streaming SIMD Extensions (SSE)."},{"pos":[10671,10722],"content":"<bpt id=\"p1\">&lt;a name=\"get_all\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::get_all Method","linkify":"<a name=\"get_all\"></a>  accelerator::get_all Method","source":"<a name=\"get_all\"></a>  accelerator::get_all Method"},{"pos":[10726,10814],"content":"Returns a vector of <ph id=\"ph1\">`accelerator`</ph> objects that represent all the available accelerators.","source":"Returns a vector of `accelerator` objects that represent all the available accelerators."},{"pos":[10889,10901],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vector of available accelerators","pos":[10905,10941]},{"pos":[10951,11034],"content":"<bpt id=\"p1\">&lt;a name=\"get_auto_selection_view\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::get_auto_selection_view Method","linkify":"<a name=\"get_auto_selection_view\"></a>  accelerator::get_auto_selection_view Method","source":"<a name=\"get_auto_selection_view\"></a>  accelerator::get_auto_selection_view Method"},{"content":"Returns the auto selection accelerator_view, which when specified as the parallel_for_each target results in the target accelerator_view for executing the parallel_for_each kernel to be automatically selected by the runtime.","pos":[11038,11262]},{"content":"For all other purposes, the accelerator_view returned by this method is the same as the default accelerator_view of the default accelerator","pos":[11263,11402]},{"pos":[11486,11498],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The auto selection accelerator_view.","pos":[11502,11538]},{"pos":[11548,11625],"content":"<bpt id=\"p1\">&lt;a name=\"get_dedicated_memory\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::get_dedicated_memory Method","linkify":"<a name=\"get_dedicated_memory\"></a>  accelerator::get_dedicated_memory Method","source":"<a name=\"get_dedicated_memory\"></a>  accelerator::get_dedicated_memory Method"},{"pos":[11629,11716],"content":"Returns the dedicated memory for the <bpt id=\"p1\">[</bpt>accelerator<ept id=\"p1\">](accelerator-class.md)</ept>, in kilobytes.","source":"Returns the dedicated memory for the [accelerator](accelerator-class.md), in kilobytes."},{"pos":[11781,11793],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[11797,11854],"content":"The dedicated memory for the <ph id=\"ph1\">`accelerator`</ph>, in kilobytes.","source":"The dedicated memory for the `accelerator`, in kilobytes."},{"pos":[11864,11955],"content":"<bpt id=\"p1\">&lt;a name=\"get_default_cpu_access_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::get_default_cpu_access_type Method","linkify":"<a name=\"get_default_cpu_access_type\"></a>  accelerator::get_default_cpu_access_type Method","source":"<a name=\"get_default_cpu_access_type\"></a>  accelerator::get_default_cpu_access_type Method"},{"content":"Gets the default cpu access_type for buffers created on this accelerator","pos":[11959,12031]},{"pos":[12108,12120],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The default cpu access_type for buffers created on this accelerator.","pos":[12124,12192]},{"pos":[12202,12271],"content":"<bpt id=\"p1\">&lt;a name=\"get_default_view\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::get_default_view Method","linkify":"<a name=\"get_default_view\"></a>  accelerator::get_default_view Method","source":"<a name=\"get_default_view\"></a>  accelerator::get_default_view Method"},{"pos":[12275,12385],"content":"Returns the default <ph id=\"ph1\">`accelerator_view`</ph> object that is associated with the <bpt id=\"p1\">[</bpt>accelerator<ept id=\"p1\">](accelerator-class.md)</ept>.","source":"Returns the default `accelerator_view` object that is associated with the [accelerator](accelerator-class.md)."},{"pos":[12456,12468],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[12472,12552],"content":"The default <ph id=\"ph1\">`accelerator_view`</ph> object that is associated with the <ph id=\"ph2\">`accelerator`</ph>.","source":"The default `accelerator_view` object that is associated with the `accelerator`."},{"pos":[12562,12629],"content":"<bpt id=\"p1\">&lt;a name=\"get_description\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::get_description Method","linkify":"<a name=\"get_description\"></a>  accelerator::get_description Method","source":"<a name=\"get_description\"></a>  accelerator::get_description Method"},{"pos":[12633,12711],"content":"Returns a short description of the <bpt id=\"p1\">[</bpt>accelerator<ept id=\"p1\">](accelerator-class.md)</ept> device.","source":"Returns a short description of the [accelerator](accelerator-class.md) device."},{"pos":[12777,12789],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[12793,12841],"content":"A short description of the <ph id=\"ph1\">`accelerator`</ph> device.","source":"A short description of the `accelerator` device."},{"pos":[12851,12918],"content":"<bpt id=\"p1\">&lt;a name=\"get_device_path\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::get_device_path Method","linkify":"<a name=\"get_device_path\"></a>  accelerator::get_device_path Method","source":"<a name=\"get_device_path\"></a>  accelerator::get_device_path Method"},{"content":"Returns the path of the accelerator.","pos":[12922,12958]},{"content":"The path is unique on the system.","pos":[12959,12992]},{"pos":[13058,13070],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The system-wide unique device instance path.","pos":[13074,13118]},{"pos":[13128,13195],"content":"<bpt id=\"p1\">&lt;a name=\"get_has_display\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::get_has_display Method","linkify":"<a name=\"get_has_display\"></a>  accelerator::get_has_display Method","source":"<a name=\"get_has_display\"></a>  accelerator::get_has_display Method"},{"pos":[13199,13310],"content":"Returns a Boolean value that indicates whether the <bpt id=\"p1\">[</bpt>accelerator<ept id=\"p1\">](accelerator-class.md)</ept> can output to a display.","source":"Returns a Boolean value that indicates whether the [accelerator](accelerator-class.md) can output to a display."},{"pos":[13368,13380],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[13384,13456],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">`accelerator`</ph> can output to a display; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the `accelerator` can output to a display; otherwise, `false`."},{"pos":[13466,13527],"content":"<bpt id=\"p1\">&lt;a name=\"get_is_debug\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::get_is_debug Method","linkify":"<a name=\"get_is_debug\"></a>  accelerator::get_is_debug Method","source":"<a name=\"get_is_debug\"></a>  accelerator::get_is_debug Method"},{"pos":[13531,13648],"content":"Determines whether the <bpt id=\"p1\">[</bpt>accelerator<ept id=\"p1\">](accelerator-class.md)</ept> has the DEBUG layer enabled for extensive error reporting.","source":"Determines whether the [accelerator](accelerator-class.md) has the DEBUG layer enabled for extensive error reporting."},{"pos":[13703,13715],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">`accelerator`</ph> has the DEBUG layer enabled for extensive error reporting.","pos":[13719,13805],"source":"`true` if the `accelerator` has the DEBUG layer enabled for extensive error reporting."},{"content":"Otherwise, <ph id=\"ph1\">`false`</ph>.","pos":[13806,13825],"source":" Otherwise, `false`."},{"pos":[13835,13902],"content":"<bpt id=\"p1\">&lt;a name=\"get_is_emulated\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::get_is_emulated Method","linkify":"<a name=\"get_is_emulated\"></a>  accelerator::get_is_emulated Method","source":"<a name=\"get_is_emulated\"></a>  accelerator::get_is_emulated Method"},{"pos":[13906,13977],"content":"Determines whether the <bpt id=\"p1\">[</bpt>accelerator<ept id=\"p1\">](accelerator-class.md)</ept> is emulated.","source":"Determines whether the [accelerator](accelerator-class.md) is emulated."},{"pos":[14035,14047],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">`accelerator`</ph> is emulated.","pos":[14051,14091],"source":"`true` if the `accelerator` is emulated."},{"content":"Otherwise, <ph id=\"ph1\">`false`</ph>.","pos":[14092,14111],"source":" Otherwise, `false`."},{"pos":[14121,14218],"content":"<bpt id=\"p1\">&lt;a name=\"get_supports_cpu_shared_memory\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::get_supports_cpu_shared_memory Method","linkify":"<a name=\"get_supports_cpu_shared_memory\"></a>  accelerator::get_supports_cpu_shared_memory Method","source":"<a name=\"get_supports_cpu_shared_memory\"></a>  accelerator::get_supports_cpu_shared_memory Method"},{"content":"Returns a boolean value indicating whether the accelerator supports memory accessible both by the accelerator and the CPU.","pos":[14222,14344]},{"pos":[14417,14429],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[14433,14506],"content":"<ph id=\"ph1\">`true`</ph> if the accelerator supports CPU shared memory; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the accelerator supports CPU shared memory; otherwise, `false`."},{"pos":[14516,14611],"content":"<bpt id=\"p1\">&lt;a name=\"get_supports_double_precision\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::get_supports_double_precision Method","linkify":"<a name=\"get_supports_double_precision\"></a>  accelerator::get_supports_double_precision Method","source":"<a name=\"get_supports_double_precision\"></a>  accelerator::get_supports_double_precision Method"},{"pos":[14615,14807],"content":"Returns a Boolean value that indicates whether the accelerator supports double precision math, including fused multiply add (FMA), division, reciprocal, and casting between <ph id=\"ph1\">`int`</ph> and <ph id=\"ph2\">`double`</ph>.","source":"Returns a Boolean value that indicates whether the accelerator supports double precision math, including fused multiply add (FMA), division, reciprocal, and casting between `int` and `double`."},{"pos":[14879,14891],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[14895,14972],"content":"<ph id=\"ph1\">`true`</ph> if the accelerator supports double precision math; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the accelerator supports double precision math; otherwise, `false`."},{"pos":[14982,15093],"content":"<bpt id=\"p1\">&lt;a name=\"get_supports_limited_double_precision\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::get_supports_limited_double_precision Method","linkify":"<a name=\"get_supports_limited_double_precision\"></a>  accelerator::get_supports_limited_double_precision Method","source":"<a name=\"get_supports_limited_double_precision\"></a>  accelerator::get_supports_limited_double_precision Method"},{"content":"Returns a Boolean value that indicates whether the accelerator has limited support for double precision math.","pos":[15097,15206]},{"content":"If the accelerator has only limited support, then fused multiply add (FMA), division, reciprocal, and casting between <ph id=\"ph1\">`int`</ph> and <ph id=\"ph2\">`double`</ph> are not supported.","pos":[15207,15362],"source":" If the accelerator has only limited support, then fused multiply add (FMA), division, reciprocal, and casting between `int` and `double` are not supported."},{"pos":[15442,15454],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[15458,15550],"content":"<ph id=\"ph1\">`true`</ph> if the accelerator has limited support for double precision math; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the accelerator has limited support for double precision math; otherwise, `false`."},{"pos":[15560,15619],"content":"<bpt id=\"p1\">&lt;a name=\"get_version\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::get_version Method","linkify":"<a name=\"get_version\"></a>  accelerator::get_version Method","source":"<a name=\"get_version\"></a>  accelerator::get_version Method"},{"pos":[15623,15686],"content":"Returns the version of the <bpt id=\"p1\">[</bpt>accelerator<ept id=\"p1\">](accelerator-class.md)</ept>.","source":"Returns the version of the [accelerator](accelerator-class.md)."},{"pos":[15748,15760],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[15764,15797],"content":"The version of the <ph id=\"ph1\">`accelerator`</ph>.","source":"The version of the `accelerator`."},{"pos":[15807,15871],"content":"<bpt id=\"p1\">&lt;a name=\"has_display\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::has_display Data Member","linkify":"<a name=\"has_display\"></a>  accelerator::has_display Data Member","source":"<a name=\"has_display\"></a>  accelerator::has_display Data Member"},{"pos":[15875,15983],"content":"Gets a Boolean value that indicates whether the <bpt id=\"p1\">[</bpt>accelerator<ept id=\"p1\">](accelerator-class.md)</ept> can output to a display.","source":"Gets a Boolean value that indicates whether the [accelerator](accelerator-class.md) can output to a display."},{"pos":[16071,16129],"content":"<bpt id=\"p1\">&lt;a name=\"is_debug\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::is_debug Data Member","linkify":"<a name=\"is_debug\"></a>  accelerator::is_debug Data Member","source":"<a name=\"is_debug\"></a>  accelerator::is_debug Data Member"},{"pos":[16133,16275],"content":"Gets a Boolean value that indicates whether the <bpt id=\"p1\">[</bpt>accelerator<ept id=\"p1\">](accelerator-class.md)</ept> has the DEBUG layer enabled for extensive error reporting.","source":"Gets a Boolean value that indicates whether the [accelerator](accelerator-class.md) has the DEBUG layer enabled for extensive error reporting."},{"pos":[16357,16421],"content":"<bpt id=\"p1\">&lt;a name=\"is_emulated\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::is_emulated Data Member","linkify":"<a name=\"is_emulated\"></a>  accelerator::is_emulated Data Member","source":"<a name=\"is_emulated\"></a>  accelerator::is_emulated Data Member"},{"pos":[16425,16521],"content":"Gets a Boolean value that indicates whether the <bpt id=\"p1\">[</bpt>accelerator<ept id=\"p1\">](accelerator-class.md)</ept> is emulated.","source":"Gets a Boolean value that indicates whether the [accelerator](accelerator-class.md) is emulated."},{"pos":[16609,16670],"content":"<bpt id=\"p1\">&lt;a name=\"operator_neq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::operator!= Operator","linkify":"<a name=\"operator_neq\"></a>  accelerator::operator!= Operator","source":"<a name=\"operator_neq\"></a>  accelerator::operator!= Operator"},{"pos":[16674,16790],"content":"Compares this <ph id=\"ph1\">`accelerator`</ph> object with another and returns <ph id=\"ph2\">`false`</ph> if they are the same; otherwise, returns <ph id=\"ph3\">`true`</ph>.","source":"Compares this `accelerator` object with another and returns `false` if they are the same; otherwise, returns `true`."},{"pos":[16869,16879],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`accelerator`</ph> object to compare with this one.","pos":[16895,16945],"source":" The `accelerator` object to compare with this one."},{"pos":[16955,16967],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16971,17044],"content":"<ph id=\"ph1\">`false`</ph> if the two <ph id=\"ph2\">`accelerator`</ph> objects are the same; otherwise, <ph id=\"ph3\">`true`</ph>.","source":"`false` if the two `accelerator` objects are the same; otherwise, `true`."},{"pos":[17054,17113],"content":"<bpt id=\"p1\">&lt;a name=\"operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::operator= Operator","linkify":"<a name=\"operator_eq\"></a>  accelerator::operator= Operator","source":"<a name=\"operator_eq\"></a>  accelerator::operator= Operator"},{"pos":[17117,17209],"content":"Copies the contents of the specified <bpt id=\"p1\">[</bpt>accelerator<ept id=\"p1\">](accelerator-class.md)</ept> object to this one.","source":"Copies the contents of the specified [accelerator](accelerator-class.md) object to this one."},{"pos":[17286,17296],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`accelerator`</ph> object to copy from.","pos":[17312,17350],"source":" The `accelerator` object to copy from."},{"pos":[17360,17372],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[17376,17417],"content":"A reference to this <ph id=\"ph1\">`accelerator`</ph> object.","source":"A reference to this `accelerator` object."},{"pos":[17427,17490],"content":"<bpt id=\"p1\">&lt;a name=\"operator_eq_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::operator== Operator","linkify":"<a name=\"operator_eq_eq\"></a>  accelerator::operator== Operator","source":"<a name=\"operator_eq_eq\"></a>  accelerator::operator== Operator"},{"pos":[17494,17632],"content":"Compares this <bpt id=\"p1\">[</bpt>accelerator<ept id=\"p1\">](accelerator-class.md)</ept> object with another and returns <ph id=\"ph1\">`true`</ph> if they are the same; otherwise, returns <ph id=\"ph2\">`false`</ph>.","source":"Compares this [accelerator](accelerator-class.md) object with another and returns `true` if they are the same; otherwise, returns `false`."},{"pos":[17711,17721],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`accelerator`</ph> object to compare with this one.","pos":[17737,17787],"source":" The `accelerator` object to compare with this one."},{"pos":[17797,17809],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[17813,17911],"content":"<ph id=\"ph1\">`true`</ph> if the other <ph id=\"ph2\">`accelerator`</ph> object is same as this <ph id=\"ph3\">`accelerator`</ph> object; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if the other `accelerator` object is same as this `accelerator` object; otherwise, `false`."},{"pos":[17921,17980],"content":"<bpt id=\"p1\">&lt;a name=\"set_default\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::set_default Method","linkify":"<a name=\"set_default\"></a>  accelerator::set_default Method","source":"<a name=\"set_default\"></a>  accelerator::set_default Method"},{"content":"Sets the default accelerator to be used for any operation that implicitly uses the default accelerator.","pos":[17984,18087]},{"content":"This method only succeeds if the runtime selected default accelerator has not already been used in an operation that implicitly uses the default accelerator","pos":[18088,18244]},{"pos":[18321,18331],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The path to the accelerator.","pos":[18346,18374]},{"pos":[18384,18396],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`true`</ph> if the call succeeds at setting the default accelerator.","pos":[18400,18463],"source":"`true` if the call succeeds at setting the default accelerator."},{"content":"Otherwise, <ph id=\"ph1\">`false`</ph>.","pos":[18464,18483],"source":" Otherwise, `false`."},{"pos":[18493,18584],"content":"<bpt id=\"p1\">&lt;a name=\"set_default_cpu_access_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::set_default_cpu_access_type Method","linkify":"<a name=\"set_default_cpu_access_type\"></a>  accelerator::set_default_cpu_access_type Method","source":"<a name=\"set_default_cpu_access_type\"></a>  accelerator::set_default_cpu_access_type Method"},{"content":"Set the default cpu access_type for arrays created on this accelerator or for implicit memory allocations as part of array_views accessed on this this accelerator.","pos":[18588,18751]},{"content":"This method only succeeds if the default_cpu_access_type for the accelerator has not already been overriden by a previous call to this method and the runtime selected default_cpu_access_type for this accelerator has not yet been used for allocating an array or for an implicit memory allocation backing an array_view accessed on this accelerator.","pos":[18752,19098]},{"pos":[19195,19205],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The default cpu access_type to be used for array/array_view memory allocations on this accelerator.","pos":[19239,19338]},{"pos":[19348,19360],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A boolean value indicating if the default cpu access_type for the accelerator was successfully set.","pos":[19364,19463]},{"pos":[19473,19567],"content":"<bpt id=\"p1\">&lt;a name=\"supports_cpu_shared_memory\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::supports_cpu_shared_memory Data Member","linkify":"<a name=\"supports_cpu_shared_memory\"></a>  accelerator::supports_cpu_shared_memory Data Member","source":"<a name=\"supports_cpu_shared_memory\"></a>  accelerator::supports_cpu_shared_memory Data Member"},{"pos":[19571,19652],"content":"Gets a Boolean value indicating whether the <ph id=\"ph1\">`accelerator`</ph> supports shared memory.","source":"Gets a Boolean value indicating whether the `accelerator` supports shared memory."},{"pos":[19770,19862],"content":"<bpt id=\"p1\">&lt;a name=\"supports_double_precision\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::supports_double_precision Data Member","linkify":"<a name=\"supports_double_precision\"></a>  accelerator::supports_double_precision Data Member","source":"<a name=\"supports_double_precision\"></a>  accelerator::supports_double_precision Data Member"},{"content":"Gets a Boolean value that indicates whether the accelerator supports double precision math.","pos":[19866,19957]},{"pos":[20073,20181],"content":"<bpt id=\"p1\">&lt;a name=\"supports_limited_double_precision\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::supports_limited_double_precision Data Member","linkify":"<a name=\"supports_limited_double_precision\"></a>  accelerator::supports_limited_double_precision Data Member","source":"<a name=\"supports_limited_double_precision\"></a>  accelerator::supports_limited_double_precision Data Member"},{"content":"Gets a Boolean value that indicates whether the accelerator has limited support for double precision math.","pos":[20185,20291]},{"content":"If the accelerator has only limited support, then fused multiply add (FMA), division, reciprocal, and casting between <ph id=\"ph1\">`int`</ph> and <ph id=\"ph2\">`double`</ph> are not supported.","pos":[20292,20447],"source":" If the accelerator has only limited support, then fused multiply add (FMA), division, reciprocal, and casting between `int` and `double` are not supported."},{"pos":[20579,20635],"content":"<bpt id=\"p1\">&lt;a name=\"version\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator::version Data Member","linkify":"<a name=\"version\"></a>  accelerator::version Data Member","source":"<a name=\"version\"></a>  accelerator::version Data Member"},{"pos":[20639,20699],"content":"Gets the version of the <bpt id=\"p1\">[</bpt>accelerator<ept id=\"p1\">](accelerator-class.md)</ept>.","source":"Gets the version of the [accelerator](accelerator-class.md)."},{"pos":[20787,20859],"content":"<bpt id=\"p1\">&lt;a name=\"dtor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> <ph id=\"ph1\">&lt;/a&gt;</ph>  accelerator_view::~accelerator_view Destructor","linkify":"<a name=\"dtor\"></a> </a>  accelerator_view::~accelerator_view Destructor","source":"<a name=\"dtor\"></a> </a>  accelerator_view::~accelerator_view Destructor"},{"pos":[20863,20929],"content":"Destroys the <bpt id=\"p1\">[</bpt>accelerator_view<ept id=\"p1\">](accelerator-view-class.md)</ept> object.","source":"Destroys the [accelerator_view](accelerator-view-class.md) object."},{"pos":[20975,20987],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20997,21066],"content":"<bpt id=\"p1\">&lt;a name=\"accelerator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator_view::accelerator Data Member","linkify":"<a name=\"accelerator\"></a>  accelerator_view::accelerator Data Member","source":"<a name=\"accelerator\"></a>  accelerator_view::accelerator Data Member"},{"pos":[21070,21183],"content":"Gets the <bpt id=\"p1\">[</bpt>accelerator<ept id=\"p1\">](accelerator-class.md)</ept> object for the <bpt id=\"p2\">[</bpt>accelerator_view<ept id=\"p2\">](accelerator-view-class.md)</ept> object.","source":"Gets the [accelerator](accelerator-class.md) object for the [accelerator_view](accelerator-view-class.md) object."},{"pos":[21291,21358],"content":"<bpt id=\"p1\">&lt;a name=\"ctor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator_view::accelerator_view Constructor","linkify":"<a name=\"ctor\"></a>  accelerator_view::accelerator_view Constructor","source":"<a name=\"ctor\"></a>  accelerator_view::accelerator_view Constructor"},{"pos":[21362,21497],"content":"Initializes a new instance of the <bpt id=\"p1\">[</bpt>accelerator_view<ept id=\"p1\">](accelerator-view-class.md)</ept> class by copying an existing <ph id=\"ph1\">`accelerator_view`</ph> object.","source":"Initializes a new instance of the [accelerator_view](accelerator-view-class.md) class by copying an existing `accelerator_view` object."},{"pos":[21572,21582],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`accelerator_view`</ph> object to copy.","pos":[21598,21636],"source":" The `accelerator_view` object to copy."},{"pos":[21646,21714],"content":"<bpt id=\"p1\">&lt;a name=\"create_marker\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator_view::create_marker Method","linkify":"<a name=\"create_marker\"></a>  accelerator_view::create_marker Method","source":"<a name=\"create_marker\"></a>  accelerator_view::create_marker Method"},{"pos":[21718,21826],"content":"Returns a future to track the completion of all commands submitted so far to this <ph id=\"ph1\">`accelerator_view`</ph> object.","source":"Returns a future to track the completion of all commands submitted so far to this `accelerator_view` object."},{"pos":[21899,21911],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[21915,22015],"content":"A future to track the completion of all commands submitted so far to this <ph id=\"ph1\">`accelerator_view`</ph> object.","source":"A future to track the completion of all commands submitted so far to this `accelerator_view` object."},{"pos":[22025,22077],"content":"<bpt id=\"p1\">&lt;a name=\"flush\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator_view::flush Method","linkify":"<a name=\"flush\"></a>  accelerator_view::flush Method","source":"<a name=\"flush\"></a>  accelerator_view::flush Method"},{"pos":[22081,22210],"content":"Submits all pending commands queued to the <bpt id=\"p1\">[</bpt>accelerator_view<ept id=\"p1\">](accelerator-view-class.md)</ept> object to the accelerator for execution.","source":"Submits all pending commands queued to the [accelerator_view](accelerator-view-class.md) object to the accelerator for execution."},{"pos":[22249,22261],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22265,22280],"content":"Returns <ph id=\"ph1\">`void`</ph>.","source":"Returns `void`."},{"pos":[22290,22362],"content":"<bpt id=\"p1\">&lt;a name=\"get_accelerator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator_view::get_accelerator Method","linkify":"<a name=\"get_accelerator\"></a>  accelerator_view::get_accelerator Method","source":"<a name=\"get_accelerator\"></a>  accelerator_view::get_accelerator Method"},{"pos":[22366,22482],"content":"Returns the <bpt id=\"p1\">[</bpt>accelerator<ept id=\"p1\">](accelerator-class.md)</ept> object for the <bpt id=\"p2\">[</bpt>accelerator_view<ept id=\"p2\">](accelerator-view-class.md)</ept> object.","source":"Returns the [accelerator](accelerator-class.md) object for the [accelerator_view](accelerator-view-class.md) object."},{"pos":[22547,22559],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22563,22622],"content":"The <ph id=\"ph1\">`accelerator`</ph> object for the <ph id=\"ph2\">`accelerator_view`</ph> object.","source":"The `accelerator` object for the `accelerator_view` object."},{"pos":[22632,22716],"content":"<bpt id=\"p1\">&lt;a name=\"get_is_auto_selection\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator_view::get_is_auto_selection Method","linkify":"<a name=\"get_is_auto_selection\"></a>  accelerator_view::get_is_auto_selection Method","source":"<a name=\"get_is_auto_selection\"></a>  accelerator_view::get_is_auto_selection Method"},{"pos":[22720,22982],"content":"Returns a Boolean value that indicates whether the runtime will automatically select an appropriate accelerator when the accelerator_view is passed to a <bpt id=\"p1\">[</bpt>parallel_for_each<ept id=\"p1\">](../../../parallel/concrt/reference/concurrency-namespace-functions.md#parallel_for_each)</ept>.","source":"Returns a Boolean value that indicates whether the runtime will automatically select an appropriate accelerator when the accelerator_view is passed to a [parallel_for_each](../../../parallel/concrt/reference/concurrency-namespace-functions.md#parallel_for_each)."},{"pos":[23046,23058],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[23062,23157],"content":"<ph id=\"ph1\">`true`</ph> if the runtime will automatically select an appropriate accelerator; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the runtime will automatically select an appropriate accelerator; otherwise, `false`."},{"pos":[23167,23233],"content":"<bpt id=\"p1\">&lt;a name=\"get_is_debug\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator_view::get_is_debug Method","linkify":"<a name=\"get_is_debug\"></a>  accelerator_view::get_is_debug Method","source":"<a name=\"get_is_debug\"></a>  accelerator_view::get_is_debug Method"},{"pos":[23237,23399],"content":"Returns a Boolean value that indicates whether the <bpt id=\"p1\">[</bpt>accelerator_view<ept id=\"p1\">](accelerator-view-class.md)</ept> object has the DEBUG layer enabled for extensive error reporting.","source":"Returns a Boolean value that indicates whether the [accelerator_view](accelerator-view-class.md) object has the DEBUG layer enabled for extensive error reporting."},{"pos":[23454,23466],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[23470,23597],"content":"A Boolean value that indicates whether the <ph id=\"ph1\">`accelerator_view`</ph> object has the DEBUG layer enabled for extensive error reporting.","source":"A Boolean value that indicates whether the `accelerator_view` object has the DEBUG layer enabled for extensive error reporting."},{"pos":[23607,23681],"content":"<bpt id=\"p1\">&lt;a name=\"get_queuing_mode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator_view::get_queuing_mode Method","linkify":"<a name=\"get_queuing_mode\"></a>  accelerator_view::get_queuing_mode Method","source":"<a name=\"get_queuing_mode\"></a>  accelerator_view::get_queuing_mode Method"},{"pos":[23685,23771],"content":"Returns the queuing mode for the <bpt id=\"p1\">[</bpt>accelerator_view<ept id=\"p1\">](accelerator-view-class.md)</ept> object.","source":"Returns the queuing mode for the [accelerator_view](accelerator-view-class.md) object."},{"pos":[23838,23850],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[23854,23905],"content":"The queuing mode for the <ph id=\"ph1\">`accelerator_view`</ph> object.","source":"The queuing mode for the `accelerator_view` object."},{"pos":[23915,23979],"content":"<bpt id=\"p1\">&lt;a name=\"get_version\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator_view::get_version Method","linkify":"<a name=\"get_version\"></a>  accelerator_view::get_version Method","source":"<a name=\"get_version\"></a>  accelerator_view::get_version Method"},{"pos":[23983,24056],"content":"Returns the version of the <bpt id=\"p1\">[</bpt>accelerator_view<ept id=\"p1\">](accelerator-view-class.md)</ept>.","source":"Returns the version of the [accelerator_view](accelerator-view-class.md)."},{"pos":[24118,24130],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[24134,24172],"content":"The version of the <ph id=\"ph1\">`accelerator_view`</ph>.","source":"The version of the `accelerator_view`."},{"pos":[24182,24263],"content":"<bpt id=\"p1\">&lt;a name=\"is_auto_selection\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator_view::is_auto_selection Data Member","linkify":"<a name=\"is_auto_selection\"></a>  accelerator_view::is_auto_selection Data Member","source":"<a name=\"is_auto_selection\"></a>  accelerator_view::is_auto_selection Data Member"},{"pos":[24267,24526],"content":"Gets a Boolean value that indicates whether the runtime will automatically select an appropriate accelerator when the accelerator_view is passed to a <bpt id=\"p1\">[</bpt>parallel_for_each<ept id=\"p1\">](../../../parallel/concrt/reference/concurrency-namespace-functions.md#parallel_for_each)</ept>.","source":"Gets a Boolean value that indicates whether the runtime will automatically select an appropriate accelerator when the accelerator_view is passed to a [parallel_for_each](../../../parallel/concrt/reference/concurrency-namespace-functions.md#parallel_for_each)."},{"pos":[24626,24689],"content":"<bpt id=\"p1\">&lt;a name=\"is_debug\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator_view::is_debug Data Member","linkify":"<a name=\"is_debug\"></a>  accelerator_view::is_debug Data Member","source":"<a name=\"is_debug\"></a>  accelerator_view::is_debug Data Member"},{"pos":[24693,24853],"content":"Gets a Boolean value that indicates whether the <bpt id=\"p1\">[</bpt>accelerator_view<ept id=\"p1\">](accelerator-view-class.md)</ept> object has the  DEBUG layer enabled for extensive error reporting.","source":"Gets a Boolean value that indicates whether the [accelerator_view](accelerator-view-class.md) object has the  DEBUG layer enabled for extensive error reporting."},{"pos":[24935,25001],"content":"<bpt id=\"p1\">&lt;a name=\"operator_neq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator_view::operator!= Operator","linkify":"<a name=\"operator_neq\"></a>  accelerator_view::operator!= Operator","source":"<a name=\"operator_neq\"></a>  accelerator_view::operator!= Operator"},{"pos":[25005,25153],"content":"Compares this <bpt id=\"p1\">[</bpt>accelerator_view<ept id=\"p1\">](accelerator-view-class.md)</ept> object with another and returns <ph id=\"ph1\">`false`</ph> if they are the same; otherwise, returns <ph id=\"ph2\">`true`</ph>.","source":"Compares this [accelerator_view](accelerator-view-class.md) object with another and returns `false` if they are the same; otherwise, returns `true`."},{"pos":[25237,25247],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`accelerator_view`</ph> object to compare with this one.","pos":[25263,25318],"source":" The `accelerator_view` object to compare with this one."},{"pos":[25328,25340],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[25344,25403],"content":"<ph id=\"ph1\">`false`</ph> if the two objects are the same; otherwise, <ph id=\"ph2\">`true`</ph>.","source":"`false` if the two objects are the same; otherwise, `true`."},{"pos":[25413,25477],"content":"<bpt id=\"p1\">&lt;a name=\"operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator_view::operator= Operator","linkify":"<a name=\"operator_eq\"></a>  accelerator_view::operator= Operator","source":"<a name=\"operator_eq\"></a>  accelerator_view::operator= Operator"},{"pos":[25481,25585],"content":"Copies the contents of the specified <bpt id=\"p1\">[</bpt>accelerator_view<ept id=\"p1\">](accelerator-view-class.md)</ept> object into this one.","source":"Copies the contents of the specified [accelerator_view](accelerator-view-class.md) object into this one."},{"pos":[25672,25682],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`accelerator_view`</ph> object to copy from.","pos":[25698,25741],"source":" The `accelerator_view` object to copy from."},{"pos":[25751,25763],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[25767,25821],"content":"A reference to the modified <ph id=\"ph1\">`accelerator_view`</ph> object.","source":"A reference to the modified `accelerator_view` object."},{"pos":[25831,25899],"content":"<bpt id=\"p1\">&lt;a name=\"operator_eq_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator_view::operator== Operator","linkify":"<a name=\"operator_eq_eq\"></a>  accelerator_view::operator== Operator","source":"<a name=\"operator_eq_eq\"></a>  accelerator_view::operator== Operator"},{"pos":[25903,26051],"content":"Compares this <bpt id=\"p1\">[</bpt>accelerator_view<ept id=\"p1\">](accelerator-view-class.md)</ept> object with another and returns <ph id=\"ph1\">`true`</ph> if they are the same; otherwise, returns <ph id=\"ph2\">`false`</ph>.","source":"Compares this [accelerator_view](accelerator-view-class.md) object with another and returns `true` if they are the same; otherwise, returns `false`."},{"pos":[26135,26145],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`accelerator_view`</ph> object to compare with this one.","pos":[26161,26216],"source":" The `accelerator_view` object to compare with this one."},{"pos":[26226,26238],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[26242,26301],"content":"<ph id=\"ph1\">`true`</ph> if the two objects are the same; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the two objects are the same; otherwise, `false`."},{"pos":[26311,26382],"content":"<bpt id=\"p1\">&lt;a name=\"queuing_mode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator_view::queuing_mode Data Member","linkify":"<a name=\"queuing_mode\"></a>  accelerator_view::queuing_mode Data Member","source":"<a name=\"queuing_mode\"></a>  accelerator_view::queuing_mode Data Member"},{"pos":[26386,26469],"content":"Gets the queuing mode for the <bpt id=\"p1\">[</bpt>accelerator_view<ept id=\"p1\">](accelerator-view-class.md)</ept> object.","source":"Gets the queuing mode for the [accelerator_view](accelerator-view-class.md) object."},{"pos":[26580,26641],"content":"<bpt id=\"p1\">&lt;a name=\"version\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator_view::version Data Member","linkify":"<a name=\"version\"></a>  accelerator_view::version Data Member","source":"<a name=\"version\"></a>  accelerator_view::version Data Member"},{"pos":[26645,26715],"content":"Gets the version of the <bpt id=\"p1\">[</bpt>accelerator_view<ept id=\"p1\">](accelerator-view-class.md)</ept>.","source":"Gets the version of the [accelerator_view](accelerator-view-class.md)."},{"pos":[26803,26853],"content":"<bpt id=\"p1\">&lt;a name=\"wait\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  accelerator_view::wait Method","linkify":"<a name=\"wait\"></a>  accelerator_view::wait Method","source":"<a name=\"wait\"></a>  accelerator_view::wait Method"},{"pos":[26857,26960],"content":"Waits for all commands submitted to the <bpt id=\"p1\">[</bpt>accelerator_view<ept id=\"p1\">](accelerator-view-class.md)</ept> object to finish.","source":"Waits for all commands submitted to the [accelerator_view](accelerator-view-class.md) object to finish."},{"pos":[26998,27010],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[27014,27029],"content":"Returns <ph id=\"ph1\">`void`</ph>.","source":"Returns `void`."},{"pos":[27038,27046],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[27050,27117],"content":"<bpt id=\"p1\">[</bpt>Concurrency Namespace (C++ AMP)<ept id=\"p1\">](concurrency-namespace-cpp-amp.md)</ept>","source":"[Concurrency Namespace (C++ AMP)](concurrency-namespace-cpp-amp.md)"}],"content":"---\ntitle: \"accelerator Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"amprt/Concurrency::accelerator\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"accelerator class\"\nms.assetid: 37eed593-cf87-4611-9cdc-e98df6c2377a\ncaps.latest.revision: 29\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# accelerator Class\nAn accelerator is a hardware capability that is optimized for data-parallel computing. An accelerator may be a device attached to a PCIe bus (such as a GPU), or it might be an extended instruction set on the main CPU.  \n  \n## Syntax  \n  \n```  \nclass accelerator;  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[accelerator::accelerator Constructor](#ctor)|Initializes a new instance of the `accelerator` class.|  \n|[accelerator::~accelerator Destructor](#ctor)|Destroys the `accelerator` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[accelerator::create_view Method](#create_view)|Creates and returns an `accelerator_view` object on this accelerator.|  \n|[accelerator::get_all Method](#get_all)|Returns a vector of `accelerator` objects that represent all the available accelerators.|  \n|[accelerator::get_auto_selection_view Method](#get_auto_selection_view)|Returns the auto-selection `accelerator_view`.|  \n|[accelerator::get_dedicated_memory Method](#get_dedicated_memory)|Returns the dedicated memory for the `accelerator`, in kilobytes.|  \n|[accelerator::get_default_cpu_access_type Method](#get_default_cpu_access_type)|Returns the default [access_type](concurrency-namespace-enums-amp.md#access_type) for buffers created on this accelerator.|  \n|[accelerator::get_default_view Method](#get_default_view)|Returns the default `accelerator_view` object that is associated with the `accelerator`.|  \n|[accelerator::get_description Method](#get_description)|Returns a short description of the `accelerator` device.|  \n|[accelerator::get_device_path Method](#get_device_path)|Returns the path of the device.|  \n|[accelerator::get_has_display Method](#get_has_display)|Determines whether the `accelerator` is attached to a display.|  \n|[accelerator::get_is_debug Method](#get_is_debug)|Determines whether the `accelerator` has the DEBUG layer enabled for extensive error reporting.|  \n|[accelerator::get_is_emulated Method](#get_is_emulated)|Determines whether the `accelerator` is emulated.|  \n|[accelerator::get_supports_cpu_shared_memory Method](#get_supports_cpu_shared_memory)|Determines whether the `accelerator` supports shared memory|  \n|[accelerator::get_supports_double_precision Method](#get_supports_double_precision)|Determines whether the `accelerator` is attached to a display.|  \n|[accelerator::get_supports_limited_double_precision Method](#get_supports_limited_double_precision)|Determines whether the `accelerator` has limited support for double-precision math.|  \n|[accelerator::get_version Method](#get_version)|Returns the version of the `accelerator`.|  \n|[accelerator::set_default Method](#set_default)|Returns the path of the default accelerator.|  \n|[accelerator::set_default_cpu_access_type Method](#set_default_cpu_access_type)|Sets the default CPU [access_type](concurrency-namespace-enums-amp.md#access_type)for arrays and implicit memory allocations made on this `accelerator`.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[accelerator::operator!= Operator](#operator_neq)|Compares this `accelerator` object with another and returns `false` if they are the same; otherwise, returns `true`.|  \n|[accelerator::operator= Operator](#operator_eq)|Copies the contents of the specified `accelerator` object to this one.|  \n|[accelerator::operator== Operator](#operator_eq_eq)|Compares this `accelerator` object with another and returns `true` if they are the same; otherwise, returns `false`.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[accelerator::cpu_accelerator Data Member](#cpu_accelerator)|Gets a string constant for the CPU `accelerator`.|  \n|[accelerator::dedicated_memory Data Member](#dedicated_memory)|Gets the dedicated memory for the `accelerator`, in kilobytes.|  \n|[accelerator::default_accelerator Data Member](#default_accelerator)|Gets a string constant for the default `accelerator`.|  \n|[accelerator::default_cpu_access_type Data Member](#default_cpu_access_type)|Gets or sets the default CPU [access_type](concurrency-namespace-enums-amp.md#access_type)for arrays and implicit memory allocations made on this `accelerator`.|  \n|[accelerator::default_view Data Member](#default_view)|Gets the default `accelerator_view` object that is associated with the `accelerator`.|  \n|[accelerator::description Data Member](#description)|Gets a short description of the `accelerator` device.|  \n|[accelerator::device_path Data Member](#device_path)|Gets the path of the device.|  \n|[accelerator::direct3d_ref Data Member](#direct3d_ref)|Gets a string constant for a Direct3D reference `accelerator`.|  \n|[accelerator::direct3d_warp Data Member](#direct3d_warp)|Gets the string constant for an [accelerator](accelerator-class.md) object that you can use for executing C++ AMP code on multi-core CPUs that use Streaming SIMD Extensions (SSE).|  \n|[accelerator::has_display Data Member](#has_display)|Gets a Boolean value that indicates whether the `accelerator` is attached to a display.|  \n|[accelerator::is_debug Data Member](#is_debug)|Indicates whether the `accelerator` has the DEBUG layer enabled for extensive error reporting.|  \n|[accelerator::is_emulated Data Member](#is_emulated)|Indicates whether the `accelerator` is emulated.|  \n|[accelerator::supports_cpu_shared_memory Data Member](#supports_cpu_shared_memory)|Indicates whether the `accelerator` supports shared memory.|  \n|[accelerator::supports_double_precision Data Member](#supports_double_precision)|Indicates whether the accelerator supports double-precision math.|  \n|[accelerator::supports_limited_double_precision Data Member](#supports_limited_double_precision)|Indicates whether the accelerator has limited support for double-precision math.|  \n|[accelerator::version Data Member](#version)|Gets the version of the `accelerator`.|  \n  \n## Inheritance Hierarchy  \n `accelerator`  \n  \n## Remarks  \n An accelerator is a hardware capability that is optimized for data-parallel computing. An accelerator is often a discrete GPU, but it can also be a virtual host-side entity such as a DirectX REF device, a WARP (a CPU-side device that is accelerated by means of SSE instructions), or the CPU itself.  \n  \n You can construct an `accelerator` object by enumerating the available devices, or by getting the default device, the reference device, or the WARP device.  \n  \n## Requirements  \n **Header:** amprt.h  \n  \n **Namespace:** Concurrency  \n  \n##  <a name=\"dtor\"></a> </a>  accelerator::~accelerator Destructor  \n Destroys the [accelerator](accelerator-class.md) object.  \n  \n```  \n~accelerator();\n```  \n  \n### Return Value  \n  \n##  <a name=\"ctor\"></a>  accelerator::accelerator Constructor  \n Initializes a new instance of the [accelerator class](accelerator-class.md).  \n  \n```  \naccelerator();\n\n \nexplicit accelerator(const std::wstring& _Device_path);\n\n \naccelerator(const accelerator& _Other);\n```  \n  \n### Parameters  \n `_Device_path`  \n The path of the physical device.  \n  \n `_Other`  \n The accelerator to copy.  \n  \n##  <a name=\"cpu_accelerator\"></a>  accelerator::cpu_accelerator Data Member  \n Gets a string constant for the CPU accelerator.  \n  \n```  \nstatic const wchar_t cpu_accelerator[];  \n```  \n  \n##  <a name=\"create_view\"></a>  accelerator::create_view Method  \n Creates and returns an `accelerator_view` object on this accelerator, using the specified queuing mode. When the queuing mode is not specified, the new `accelerator_view` uses the [queuing_mode::immediate](concurrency-namespace-enums-amp.md#queuing_mode) queuing mode.  \n  \n```  \naccelerator_view create_view(queuing_mode qmode = queuing_mode_automatic);\n```  \n  \n### Parameters  \n `qmode`  \n The queuing mode.  \n  \n### Return Value  \n A new `accelerator_view` object on this accelerator, using the specified queuing mode.  \n  \n##  <a name=\"dedicated_memory\"></a>  accelerator::dedicated_memory Data Member  \n Gets the dedicated memory for the [accelerator](accelerator-class.md), in kilobytes.  \n  \n```  \n__declspec(property(get= get_dedicated_memory)) size_t dedicated_memory;  \n```  \n  \n##  <a name=\"default_accelerator\"></a>  accelerator::default_accelerator Data Member  \n Gets a string constant for the default [accelerator](accelerator-class.md).  \n  \n```  \nstatic const wchar_t default_accelerator[];  \n```  \n  \n##  <a name=\"default_cpu_access_type\"></a>  accelerator::default_cpu_access_type Data Member  \n The default cpu [access_type](concurrency-namespace-enums-amp.md#access_type)for arrays and implicit memory allocations made on this this `accelerator`.  \n  \n```  \n__declspec(property(get= get_default_cpu_access_type)) access_type default_cpu_access_type;  \n```  \n  \n##  <a name=\"default_view\"></a>  accelerator::default_view Data Member  \n Gets the default accelerator view that is associated with the [accelerator](accelerator-class.md).  \n  \n```  \n__declspec(property(get= get_default_view)) accelerator_view default_view;  \n```  \n  \n##  <a name=\"description\"></a>  accelerator::description Data Member  \n Gets a short description of the [accelerator](accelerator-class.md) device.  \n  \n```  \n__declspec(property(get= get_description)) std::wstring description;  \n```  \n  \n##  <a name=\"device_path\"></a>  accelerator::device_path Data Member  \n Gets the path of the accelerator. The path is unique on the system.  \n  \n```  \n__declspec(property(get= get_device_path)) std::wstring device_path;  \n```  \n  \n##  <a name=\"direct3d_ref\"></a>  accelerator::direct3d_ref Data Member  \n Gets a string constant for a Direct3D reference accelerator.  \n  \n```  \nstatic const wchar_t direct3d_ref[];  \n```  \n  \n##  <a name=\"direct3d_warp\"></a>  accelerator::direct3d_warp Data Member  \n Gets the string constant for an [accelerator](accelerator-class.md) object that you can use for executing your C++ AMP code on multi-core CPUs using Streaming SIMD Extensions (SSE).  \n  \n```  \nstatic const wchar_t direct3d_warp[];  \n```  \n  \n##  <a name=\"get_all\"></a>  accelerator::get_all Method  \n Returns a vector of `accelerator` objects that represent all the available accelerators.  \n  \n```  \nstatic inline std::vector<accelerator> get_all();\n```  \n  \n### Return Value  \n The vector of available accelerators  \n  \n##  <a name=\"get_auto_selection_view\"></a>  accelerator::get_auto_selection_view Method  \n Returns the auto selection accelerator_view, which when specified as the parallel_for_each target results in the target accelerator_view for executing the parallel_for_each kernel to be automatically selected by the runtime. For all other purposes, the accelerator_view returned by this method is the same as the default accelerator_view of the default accelerator  \n  \n```  \nstatic accelerator_view __cdecl get_auto_selection_view();\n```  \n  \n### Return Value  \n The auto selection accelerator_view.  \n  \n##  <a name=\"get_dedicated_memory\"></a>  accelerator::get_dedicated_memory Method  \n Returns the dedicated memory for the [accelerator](accelerator-class.md), in kilobytes.  \n  \n```  \nsize_t get_dedicated_memory() const;\n\n \n```  \n  \n### Return Value  \n The dedicated memory for the `accelerator`, in kilobytes.  \n  \n##  <a name=\"get_default_cpu_access_type\"></a>  accelerator::get_default_cpu_access_type Method  \n Gets the default cpu access_type for buffers created on this accelerator  \n  \n```  \naccess_type get_default_cpu_access_type() const;\n\n \n```  \n  \n### Return Value  \n The default cpu access_type for buffers created on this accelerator.  \n  \n##  <a name=\"get_default_view\"></a>  accelerator::get_default_view Method  \n Returns the default `accelerator_view` object that is associated with the [accelerator](accelerator-class.md).  \n  \n```  \naccelerator_view get_default_view() const;\n\n \n```  \n  \n### Return Value  \n The default `accelerator_view` object that is associated with the `accelerator`.  \n  \n##  <a name=\"get_description\"></a>  accelerator::get_description Method  \n Returns a short description of the [accelerator](accelerator-class.md) device.  \n  \n```  \nstd::wstring get_description() const;\n\n \n```  \n  \n### Return Value  \n A short description of the `accelerator` device.  \n  \n##  <a name=\"get_device_path\"></a>  accelerator::get_device_path Method  \n Returns the path of the accelerator. The path is unique on the system.  \n  \n```  \nstd::wstring get_device_path() const;\n\n \n```  \n  \n### Return Value  \n The system-wide unique device instance path.  \n  \n##  <a name=\"get_has_display\"></a>  accelerator::get_has_display Method  \n Returns a Boolean value that indicates whether the [accelerator](accelerator-class.md) can output to a display.  \n  \n```  \nbool get_has_display() const;\n\n \n```  \n  \n### Return Value  \n `true` if the `accelerator` can output to a display; otherwise, `false`.  \n  \n##  <a name=\"get_is_debug\"></a>  accelerator::get_is_debug Method  \n Determines whether the [accelerator](accelerator-class.md) has the DEBUG layer enabled for extensive error reporting.  \n  \n```  \nbool get_is_debug() const;\n\n \n```  \n  \n### Return Value  \n `true` if the `accelerator` has the DEBUG layer enabled for extensive error reporting. Otherwise, `false`.  \n  \n##  <a name=\"get_is_emulated\"></a>  accelerator::get_is_emulated Method  \n Determines whether the [accelerator](accelerator-class.md) is emulated.  \n  \n```  \nbool get_is_emulated() const;\n\n \n```  \n  \n### Return Value  \n `true` if the `accelerator` is emulated. Otherwise, `false`.  \n  \n##  <a name=\"get_supports_cpu_shared_memory\"></a>  accelerator::get_supports_cpu_shared_memory Method  \n Returns a boolean value indicating whether the accelerator supports memory accessible both by the accelerator and the CPU.  \n  \n```  \nbool get_supports_cpu_shared_memory() const;\n\n \n```  \n  \n### Return Value  \n `true` if the accelerator supports CPU shared memory; otherwise, `false`.  \n  \n##  <a name=\"get_supports_double_precision\"></a>  accelerator::get_supports_double_precision Method  \n Returns a Boolean value that indicates whether the accelerator supports double precision math, including fused multiply add (FMA), division, reciprocal, and casting between `int` and `double`.  \n  \n```  \nbool get_supports_double_precision() const;\n\n \n```  \n  \n### Return Value  \n `true` if the accelerator supports double precision math; otherwise, `false`.  \n  \n##  <a name=\"get_supports_limited_double_precision\"></a>  accelerator::get_supports_limited_double_precision Method  \n Returns a Boolean value that indicates whether the accelerator has limited support for double precision math. If the accelerator has only limited support, then fused multiply add (FMA), division, reciprocal, and casting between `int` and `double` are not supported.  \n  \n```  \nbool get_supports_limited_double_precision() const;\n\n \n```  \n  \n### Return Value  \n `true` if the accelerator has limited support for double precision math; otherwise, `false`.  \n  \n##  <a name=\"get_version\"></a>  accelerator::get_version Method  \n Returns the version of the [accelerator](accelerator-class.md).  \n  \n```  \nunsigned int get_version() const;\n\n \n```  \n  \n### Return Value  \n The version of the `accelerator`.  \n  \n##  <a name=\"has_display\"></a>  accelerator::has_display Data Member  \n Gets a Boolean value that indicates whether the [accelerator](accelerator-class.md) can output to a display.  \n  \n```  \n__declspec(property(get= get_has_display)) bool has_display;  \n```  \n  \n##  <a name=\"is_debug\"></a>  accelerator::is_debug Data Member  \n Gets a Boolean value that indicates whether the [accelerator](accelerator-class.md) has the DEBUG layer enabled for extensive error reporting.  \n  \n```  \n__declspec(property(get= get_is_debug)) bool is_debug;  \n```  \n  \n##  <a name=\"is_emulated\"></a>  accelerator::is_emulated Data Member  \n Gets a Boolean value that indicates whether the [accelerator](accelerator-class.md) is emulated.  \n  \n```  \n__declspec(property(get= get_is_emulated)) bool is_emulated;  \n```  \n  \n##  <a name=\"operator_neq\"></a>  accelerator::operator!= Operator  \n Compares this `accelerator` object with another and returns `false` if they are the same; otherwise, returns `true`.  \n  \n```  \nbool operator!= (const accelerator& _Other) const;\n\n \n```  \n  \n### Parameters  \n `_Other`  \n The `accelerator` object to compare with this one.  \n  \n### Return Value  \n `false` if the two `accelerator` objects are the same; otherwise, `true`.  \n  \n##  <a name=\"operator_eq\"></a>  accelerator::operator= Operator  \n Copies the contents of the specified [accelerator](accelerator-class.md) object to this one.  \n  \n```  \naccelerator& operator= (const accelerator& _Other);\n```  \n  \n### Parameters  \n `_Other`  \n The `accelerator` object to copy from.  \n  \n### Return Value  \n A reference to this `accelerator` object.  \n  \n##  <a name=\"operator_eq_eq\"></a>  accelerator::operator== Operator  \n Compares this [accelerator](accelerator-class.md) object with another and returns `true` if they are the same; otherwise, returns `false`.  \n  \n```  \nbool operator== (const accelerator& _Other) const;\n\n \n```  \n  \n### Parameters  \n `_Other`  \n The `accelerator` object to compare with this one.  \n  \n### Return Value  \n `true` if the other `accelerator` object is same as this `accelerator` object; otherwise, `false`.  \n  \n##  <a name=\"set_default\"></a>  accelerator::set_default Method  \n Sets the default accelerator to be used for any operation that implicitly uses the default accelerator. This method only succeeds if the runtime selected default accelerator has not already been used in an operation that implicitly uses the default accelerator  \n  \n```  \nstatic inline bool set_default(std::wstring _Path);\n```  \n  \n### Parameters  \n `_Path`  \n The path to the accelerator.  \n  \n### Return Value  \n `true` if the call succeeds at setting the default accelerator. Otherwise, `false`.  \n  \n##  <a name=\"set_default_cpu_access_type\"></a>  accelerator::set_default_cpu_access_type Method  \n Set the default cpu access_type for arrays created on this accelerator or for implicit memory allocations as part of array_views accessed on this this accelerator. This method only succeeds if the default_cpu_access_type for the accelerator has not already been overriden by a previous call to this method and the runtime selected default_cpu_access_type for this accelerator has not yet been used for allocating an array or for an implicit memory allocation backing an array_view accessed on this accelerator.  \n  \n```  \nbool set_default_cpu_access_type(access_type _Default_cpu_access_type);\n```  \n  \n### Parameters  \n `_Default_cpu_access_type`  \n The default cpu access_type to be used for array/array_view memory allocations on this accelerator.  \n  \n### Return Value  \n A boolean value indicating if the default cpu access_type for the accelerator was successfully set.  \n  \n##  <a name=\"supports_cpu_shared_memory\"></a>  accelerator::supports_cpu_shared_memory Data Member  \n Gets a Boolean value indicating whether the `accelerator` supports shared memory.  \n  \n```  \n__declspec(property(get= get_supports_cpu_shared_memory)) bool supports_cpu_shared_memory;  \n```  \n  \n##  <a name=\"supports_double_precision\"></a>  accelerator::supports_double_precision Data Member  \n Gets a Boolean value that indicates whether the accelerator supports double precision math.  \n  \n```  \n__declspec(property(get= get_supports_double_precision)) bool supports_double_precision;  \n```  \n  \n##  <a name=\"supports_limited_double_precision\"></a>  accelerator::supports_limited_double_precision Data Member  \n Gets a Boolean value that indicates whether the accelerator has limited support for double precision math. If the accelerator has only limited support, then fused multiply add (FMA), division, reciprocal, and casting between `int` and `double` are not supported.  \n  \n```  \n__declspec(property(get= get_supports_limited_double_precision)) bool supports_limited_double_precision;  \n```  \n  \n##  <a name=\"version\"></a>  accelerator::version Data Member  \n Gets the version of the [accelerator](accelerator-class.md).  \n  \n```  \n__declspec(property(get= get_version)) unsigned int version;  \n```  \n  \n##  <a name=\"dtor\"></a> </a>  accelerator_view::~accelerator_view Destructor  \n Destroys the [accelerator_view](accelerator-view-class.md) object.  \n  \n```  \n~accelerator_view();\n```  \n  \n### Return Value  \n  \n##  <a name=\"accelerator\"></a>  accelerator_view::accelerator Data Member  \n Gets the [accelerator](accelerator-class.md) object for the [accelerator_view](accelerator-view-class.md) object.  \n  \n```  \n__declspec(property(get= get_accelerator)) Concurrency::accelerator accelerator;  \n```  \n  \n##  <a name=\"ctor\"></a>  accelerator_view::accelerator_view Constructor  \n Initializes a new instance of the [accelerator_view](accelerator-view-class.md) class by copying an existing `accelerator_view` object.  \n  \n```  \naccelerator_view(const accelerator_view& _Other);\n```  \n  \n### Parameters  \n `_Other`  \n The `accelerator_view` object to copy.  \n  \n##  <a name=\"create_marker\"></a>  accelerator_view::create_marker Method  \n Returns a future to track the completion of all commands submitted so far to this `accelerator_view` object.  \n  \n```  \nconcurrency::completion_future create_marker();\n```  \n  \n### Return Value  \n A future to track the completion of all commands submitted so far to this `accelerator_view` object.  \n  \n##  <a name=\"flush\"></a>  accelerator_view::flush Method  \n Submits all pending commands queued to the [accelerator_view](accelerator-view-class.md) object to the accelerator for execution.  \n  \n```  \nvoid flush();\n```  \n  \n### Return Value  \n Returns `void`.  \n  \n##  <a name=\"get_accelerator\"></a>  accelerator_view::get_accelerator Method  \n Returns the [accelerator](accelerator-class.md) object for the [accelerator_view](accelerator-view-class.md) object.  \n  \n```  \naccelerator get_accelerator() const;\n\n \n```  \n  \n### Return Value  \n The `accelerator` object for the `accelerator_view` object.  \n  \n##  <a name=\"get_is_auto_selection\"></a>  accelerator_view::get_is_auto_selection Method  \n Returns a Boolean value that indicates whether the runtime will automatically select an appropriate accelerator when the accelerator_view is passed to a [parallel_for_each](../../../parallel/concrt/reference/concurrency-namespace-functions.md#parallel_for_each).  \n  \n```  \nbool get_is_auto_selection() const;\n\n \n```  \n  \n### Return Value  \n `true` if the runtime will automatically select an appropriate accelerator; otherwise, `false`.  \n  \n##  <a name=\"get_is_debug\"></a>  accelerator_view::get_is_debug Method  \n Returns a Boolean value that indicates whether the [accelerator_view](accelerator-view-class.md) object has the DEBUG layer enabled for extensive error reporting.  \n  \n```  \nbool get_is_debug() const;\n\n \n```  \n  \n### Return Value  \n A Boolean value that indicates whether the `accelerator_view` object has the DEBUG layer enabled for extensive error reporting.  \n  \n##  <a name=\"get_queuing_mode\"></a>  accelerator_view::get_queuing_mode Method  \n Returns the queuing mode for the [accelerator_view](accelerator-view-class.md) object.  \n  \n```  \nqueuing_mode get_queuing_mode() const;\n\n \n```  \n  \n### Return Value  \n The queuing mode for the `accelerator_view` object.  \n  \n##  <a name=\"get_version\"></a>  accelerator_view::get_version Method  \n Returns the version of the [accelerator_view](accelerator-view-class.md).  \n  \n```  \nunsigned int get_version() const;\n\n \n```  \n  \n### Return Value  \n The version of the `accelerator_view`.  \n  \n##  <a name=\"is_auto_selection\"></a>  accelerator_view::is_auto_selection Data Member  \n Gets a Boolean value that indicates whether the runtime will automatically select an appropriate accelerator when the accelerator_view is passed to a [parallel_for_each](../../../parallel/concrt/reference/concurrency-namespace-functions.md#parallel_for_each).  \n  \n```  \n__declspec(property(get= get_is_auto_selection)) bool is_auto_selection;  \n```  \n  \n##  <a name=\"is_debug\"></a>  accelerator_view::is_debug Data Member  \n Gets a Boolean value that indicates whether the [accelerator_view](accelerator-view-class.md) object has the  DEBUG layer enabled for extensive error reporting.  \n  \n```  \n__declspec(property(get= get_is_debug)) bool is_debug;  \n```  \n  \n##  <a name=\"operator_neq\"></a>  accelerator_view::operator!= Operator  \n Compares this [accelerator_view](accelerator-view-class.md) object with another and returns `false` if they are the same; otherwise, returns `true`.  \n  \n```  \nbool operator!= (const accelerator_view& _Other) const;\n\n \n```  \n  \n### Parameters  \n `_Other`  \n The `accelerator_view` object to compare with this one.  \n  \n### Return Value  \n `false` if the two objects are the same; otherwise, `true`.  \n  \n##  <a name=\"operator_eq\"></a>  accelerator_view::operator= Operator  \n Copies the contents of the specified [accelerator_view](accelerator-view-class.md) object into this one.  \n  \n```  \naccelerator_view& operator= (const accelerator_view& _Other);\n```  \n  \n### Parameters  \n `_Other`  \n The `accelerator_view` object to copy from.  \n  \n### Return Value  \n A reference to the modified `accelerator_view` object.  \n  \n##  <a name=\"operator_eq_eq\"></a>  accelerator_view::operator== Operator  \n Compares this [accelerator_view](accelerator-view-class.md) object with another and returns `true` if they are the same; otherwise, returns `false`.  \n  \n```  \nbool operator== (const accelerator_view& _Other) const;\n\n \n```  \n  \n### Parameters  \n `_Other`  \n The `accelerator_view` object to compare with this one.  \n  \n### Return Value  \n `true` if the two objects are the same; otherwise, `false`.  \n  \n##  <a name=\"queuing_mode\"></a>  accelerator_view::queuing_mode Data Member  \n Gets the queuing mode for the [accelerator_view](accelerator-view-class.md) object.  \n  \n```  \n__declspec(property(get= get_queuing_mode)) Concurrency::queuing_mode queuing_mode;  \n```  \n  \n##  <a name=\"version\"></a>  accelerator_view::version Data Member  \n Gets the version of the [accelerator_view](accelerator-view-class.md).  \n  \n```  \n__declspec(property(get= get_version)) unsigned int version;  \n```  \n  \n##  <a name=\"wait\"></a>  accelerator_view::wait Method  \n Waits for all commands submitted to the [accelerator_view](accelerator-view-class.md) object to finish.  \n  \n```  \nvoid wait();\n```  \n  \n### Return Value  \n Returns `void`.  \n  \n## See Also  \n [Concurrency Namespace (C++ AMP)](concurrency-namespace-cpp-amp.md)\n"}