{"nodes":[{"pos":[12,76],"content":"Iterating Over STL Collection By Using for each | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Iterating Over STL Collection By Using for each | Microsoft Docs","pos":[0,64]}]},{"content":"Iterating Over STL Collection By Using for each","pos":[619,666]},{"pos":[667,758],"content":"The <ph id=\"ph1\">`for each`</ph> keyword can be used to iterate over a Standard C++ Library (STL) collection.","source":"The `for each` keyword can be used to iterate over a Standard C++ Library (STL) collection."},{"content":"All Platforms","pos":[767,780]},{"content":"Remarks","pos":[786,793]},{"content":"An STL collection is also known as a <bpt id=\"p1\">*</bpt>container<ept id=\"p1\">*</ept>.","pos":[802,851],"source":"An STL collection is also known as a *container*."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>STL Containers<ept id=\"p1\">](../standard-library/stl-containers.md)</ept>.","pos":[852,934],"source":" For more information, see [STL Containers](../standard-library/stl-containers.md)."},{"content":"Examples","pos":[943,951]},{"content":"Example","pos":[957,964]},{"pos":[973,1071],"content":"The following code example uses <ph id=\"ph1\">`for each`</ph> to iterate over a <bpt id=\"p1\">[</bpt><ph id=\"ph2\">\\&lt;</ph>map&gt;<ept id=\"p1\">](../standard-library/map.md)</ept>.","source":"The following code example uses `for each` to iterate over a [\\<map>](../standard-library/map.md)."},{"content":"Output","pos":[1928,1934]},{"content":"Example","pos":[1992,1999]},{"content":"The following code example uses a const reference (<ph id=\"ph1\">`const&amp;`</ph>) for an iteration variable with STL containers.","pos":[2008,2115],"source":"The following code example uses a const reference (`const&`) for an iteration variable with STL containers."},{"content":"You can use a reference (<ph id=\"ph1\">`&amp;`</ph>) as an iteration variable on any collection of a type that can be declared as a <bpt id=\"p1\">*</bpt>T<ept id=\"p1\">*</ept><ph id=\"ph2\">`&amp;`</ph>.","pos":[2116,2232],"source":" You can use a reference (`&`) as an iteration variable on any collection of a type that can be declared as a *T*`&`."},{"content":"Output","pos":[2602,2608]},{"content":"Remarks","pos":[2711,2718]},{"content":"There are no platform-specific remarks about this feature.","pos":[2727,2785]},{"content":"Requirements","pos":[2795,2807]},{"pos":[2811,2835],"content":"Compiler option: <bpt id=\"p1\">**</bpt>/ZW<ept id=\"p1\">**</ept>","source":"Compiler option: **/ZW**"},{"content":"Remarks","pos":[2921,2928]},{"content":"There are no platform-specific remarks about this feature.","pos":[2937,2995]},{"content":"Requirements","pos":[3005,3017]},{"pos":[3021,3046],"content":"Compiler option: <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept>","source":"Compiler option: **/clr**"},{"content":"See Also","pos":[3055,3063]},{"content":"for each, in","pos":[3068,3080]},{"content":"Component Extensions for Runtime Platforms","pos":[3113,3155]}],"content":"---\ntitle: \"Iterating Over STL Collection By Using for each | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"DTL collections, iterating over\"\nms.assetid: 9358ca29-b982-4a19-bbfd-bef50fe66c9a\ncaps.latest.revision: 14\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Iterating Over STL Collection By Using for each\nThe `for each` keyword can be used to iterate over a Standard C++ Library (STL) collection.  \n  \n## All Platforms  \n **Remarks**  \n  \n An STL collection is also known as a *container*. For more information, see [STL Containers](../standard-library/stl-containers.md).  \n  \n## Examples  \n **Example**  \n  \n The following code example uses `for each` to iterate over a [\\<map>](../standard-library/map.md).  \n  \n```  \n// for_each_stl.cpp  \n// compile with: /EHsc  \n#include <map>  \n#include <iostream>  \n#include <string>  \nusing namespace std;  \n  \nint main() {  \n   int retval  = 0;  \n   map<string, int> months;  \n  \n   months[\"january\"] = 31;  \n   months[\"february\"] = 28;  \n   months[\"march\"] = 31;  \n   months[\"april\"] = 30;  \n   months[\"may\"] = 31;  \n   months[\"june\"] = 30;  \n   months[\"july\"] = 31;  \n   months[\"august\"] = 31;  \n   months[\"september\"] = 30;  \n   months[\"october\"] = 31;  \n   months[\"november\"] = 30;  \n   months[\"december\"] = 31;  \n  \n   map<string, int> months_30;  \n  \n   for each( pair<string, int> c in months )  \n      if ( c.second == 30 )  \n         months_30[c.first] = c.second;  \n  \n   for each( pair<string, int> c in months_30 )  \n      retval++;  \n  \n   cout << \"Months with 30 days = \" << retval << endl;  \n}  \n```  \n  \n **Output**  \n  \n```Output  \nMonths with 30 days = 4  \n```  \n  \n **Example**  \n  \n The following code example uses a const reference (`const&`) for an iteration variable with STL containers. You can use a reference (`&`) as an iteration variable on any collection of a type that can be declared as a *T*`&`.  \n  \n```  \n// for_each_stl_2.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \nusing namespace std;  \n  \nint main() {  \n   int retval = 0;  \n  \n   vector<int> col(3);  \n   col[0] = 10;  \n   col[1] = 20;  \n   col[2] = 30;  \n  \n   for each( const int& c in col )  \n      retval += c;  \n  \n   cout << \"retval: \" << retval << endl;  \n}  \n```  \n  \n **Output**  \n  \n```Output  \nretval: 60  \n```  \n  \n## [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]  \n **Remarks**  \n  \n There are no platform-specific remarks about this feature.  \n  \n### Requirements  \n Compiler option: **/ZW**  \n  \n## [!INCLUDE[clr_for_headings](../dotnet/includes/clr_for_headings_md.md)]  \n **Remarks**  \n  \n There are no platform-specific remarks about this feature.  \n  \n### Requirements  \n Compiler option: **/clr**  \n  \n## See Also  \n [for each, in](../dotnet/for-each-in.md)   \n [Component Extensions for Runtime Platforms](../windows/component-extensions-for-runtime-platforms.md)"}