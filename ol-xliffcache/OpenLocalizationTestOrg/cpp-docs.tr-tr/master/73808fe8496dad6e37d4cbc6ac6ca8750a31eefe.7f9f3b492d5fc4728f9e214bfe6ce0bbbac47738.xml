{"nodes":[{"pos":[12,46],"content":"CSingleLock Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CSingleLock Class | Microsoft Docs","pos":[0,34]}]},{"pos":[730,747],"content":"CSingleLock Class","linkify":"CSingleLock Class","nodes":[{"content":"CSingleLock Class","pos":[0,17]}]},{"content":"Represents the access-control mechanism used in controlling access to a resource in a multithreaded program.","pos":[748,856]},{"pos":[865,871],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[915,922],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[932,951],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[958,962]},{"content":"Description","pos":[963,974]},{"pos":[1012,1065],"content":"<bpt id=\"p1\">[</bpt>CSingleLock::CSingleLock<ept id=\"p1\">](#csinglelock__csinglelock)</ept>","source":"[CSingleLock::CSingleLock](#csinglelock__csinglelock)"},{"pos":[1066,1100],"content":"Constructs a <ph id=\"ph1\">`CSingleLock`</ph> object.","source":"Constructs a `CSingleLock` object."},{"pos":[1111,1125],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1132,1136]},{"content":"Description","pos":[1137,1148]},{"pos":[1186,1233],"content":"<bpt id=\"p1\">[</bpt>CSingleLock::IsLocked<ept id=\"p1\">](#csinglelock__islocked)</ept>","source":"[CSingleLock::IsLocked](#csinglelock__islocked)"},{"content":"Determines if the object is locked.","pos":[1234,1269]},{"pos":[1274,1313],"content":"<bpt id=\"p1\">[</bpt>CSingleLock::Lock<ept id=\"p1\">](#csinglelock__lock)</ept>","source":"[CSingleLock::Lock](#csinglelock__lock)"},{"content":"Waits on a synchronization object.","pos":[1314,1348]},{"pos":[1353,1396],"content":"<bpt id=\"p1\">[</bpt>CSingleLock::Unlock<ept id=\"p1\">](#csinglelock__unlock)</ept>","source":"[CSingleLock::Unlock](#csinglelock__unlock)"},{"content":"Releases a synchronization object.","pos":[1397,1431]},{"pos":[1441,1448],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1452,1493],"content":"<ph id=\"ph1\">`CSingleLock`</ph> does not have a base class.","source":"`CSingleLock` does not have a base class."},{"content":"In order to use the synchronization classes <bpt id=\"p1\">[</bpt>CSemaphore<ept id=\"p1\">](../../mfc/reference/csemaphore-class.md)</ept>, <bpt id=\"p2\">[</bpt>CMutex<ept id=\"p2\">](../../mfc/reference/cmutex-class.md)</ept>, <bpt id=\"p3\">[</bpt>CCriticalSection<ept id=\"p3\">](../../mfc/reference/ccriticalsection-class.md)</ept>, and <bpt id=\"p4\">[</bpt>CEvent<ept id=\"p4\">](../../mfc/reference/cevent-class.md)</ept>, you must create either a <ph id=\"ph1\">`CSingleLock`</ph> or <bpt id=\"p5\">[</bpt>CMultiLock<ept id=\"p5\">](../../mfc/reference/cmultilock-class.md)</ept> object to wait on and release the synchronization object.","pos":[1500,1917],"source":"In order to use the synchronization classes [CSemaphore](../../mfc/reference/csemaphore-class.md), [CMutex](../../mfc/reference/cmutex-class.md), [CCriticalSection](../../mfc/reference/ccriticalsection-class.md), and [CEvent](../../mfc/reference/cevent-class.md), you must create either a `CSingleLock` or [CMultiLock](../../mfc/reference/cmultilock-class.md) object to wait on and release the synchronization object."},{"content":"Use <ph id=\"ph1\">`CSingleLock`</ph> when you only need to wait on one object at a time.","pos":[1918,1987],"source":" Use `CSingleLock` when you only need to wait on one object at a time."},{"content":"Use <bpt id=\"p1\">**</bpt>CMultiLock<ept id=\"p1\">**</ept> when there are multiple objects that you could use at a particular time.","pos":[1988,2079],"source":" Use **CMultiLock** when there are multiple objects that you could use at a particular time."},{"content":"To use a <ph id=\"ph1\">`CSingleLock`</ph> object, call its constructor inside a member function in the controlled resource's class.","pos":[2086,2198],"source":"To use a `CSingleLock` object, call its constructor inside a member function in the controlled resource's class."},{"content":"Then call the <bpt id=\"p1\">[</bpt>IsLocked<ept id=\"p1\">](#csinglelock__islocked)</ept> member function to determine if the resource is available.","pos":[2199,2306],"source":" Then call the [IsLocked](#csinglelock__islocked) member function to determine if the resource is available."},{"content":"If it is, continue with the remainder of the member function.","pos":[2307,2368]},{"content":"If the resource is unavailable, either wait for a specified amount of time for the resource to be released, or return failure.","pos":[2369,2495]},{"content":"After use of the resource is complete, either call the <bpt id=\"p1\">[</bpt>Unlock<ept id=\"p1\">](#csinglelock__unlock)</ept> function if the <ph id=\"ph1\">`CSingleLock`</ph> object is to be used again, or allow the <ph id=\"ph2\">`CSingleLock`</ph> object to be destroyed.","pos":[2496,2690],"source":" After use of the resource is complete, either call the [Unlock](#csinglelock__unlock) function if the `CSingleLock` object is to be used again, or allow the `CSingleLock` object to be destroyed."},{"content":"<ph id=\"ph1\">`CSingleLock`</ph> objects require the presence of an object derived from <bpt id=\"p1\">[</bpt>CSyncObject<ept id=\"p1\">](../../mfc/reference/csyncobject-class.md)</ept>.","pos":[2697,2822],"source":"`CSingleLock` objects require the presence of an object derived from [CSyncObject](../../mfc/reference/csyncobject-class.md)."},{"content":"This is usually a data member of the controlled resource's class.","pos":[2823,2888]},{"content":"For more information on how to use <ph id=\"ph1\">`CSingleLock`</ph> objects, see the article <bpt id=\"p1\">[</bpt>Multithreading: How to Use the Synchronization Classes<ept id=\"p1\">](../../parallel/multithreading-how-to-use-the-synchronization-classes.md)</ept>.","pos":[2889,3093],"source":" For more information on how to use `CSingleLock` objects, see the article [Multithreading: How to Use the Synchronization Classes](../../parallel/multithreading-how-to-use-the-synchronization-classes.md)."},{"pos":[3102,3123],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[3149,3161],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3165,3184],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxmt.h","source":"**Header:** afxmt.h"},{"pos":[3194,3259],"content":"<bpt id=\"p1\">&lt;a name=\"csinglelock__csinglelock\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSingleLock::CSingleLock","linkify":"<a name=\"csinglelock__csinglelock\"></a>  CSingleLock::CSingleLock","source":"<a name=\"csinglelock__csinglelock\"></a>  CSingleLock::CSingleLock"},{"pos":[3263,3297],"content":"Constructs a <ph id=\"ph1\">`CSingleLock`</ph> object.","source":"Constructs a `CSingleLock` object."},{"pos":[3404,3414],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to the synchronization object to be accessed.","pos":[3431,3483]},{"content":"Cannot be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[3484,3503],"source":" Cannot be **NULL**."},{"content":"Specifies whether to initially attempt to access the supplied object.","pos":[3528,3597]},{"pos":[3607,3614],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function is generally called from within an access member function of the controlled resource.","pos":[3618,3717]},{"pos":[3727,3734],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3738,3820],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_Utilities#19<ept id=\"p2\">](../../mfc/codesnippet/cpp/csinglelock-class_1.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_Utilities#19](../../mfc/codesnippet/cpp/csinglelock-class_1.h)]"},{"pos":[3830,3889],"content":"<bpt id=\"p1\">&lt;a name=\"csinglelock__islocked\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSingleLock::IsLocked","linkify":"<a name=\"csinglelock__islocked\"></a>  CSingleLock::IsLocked","source":"<a name=\"csinglelock__islocked\"></a>  CSingleLock::IsLocked"},{"pos":[3893,3988],"content":"Determines if the object associated with the <ph id=\"ph1\">`CSingleLock`</ph> object is nonsignaled (unavailable).","source":"Determines if the object associated with the `CSingleLock` object is nonsignaled (unavailable)."},{"pos":[4030,4042],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the object is locked; otherwise 0.","pos":[4046,4091]},{"pos":[4101,4108],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4112,4194],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_Utilities#20<ept id=\"p2\">](../../mfc/codesnippet/cpp/csinglelock-class_2.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_Utilities#20](../../mfc/codesnippet/cpp/csinglelock-class_2.h)]"},{"pos":[4204,4255],"content":"<bpt id=\"p1\">&lt;a name=\"csinglelock__lock\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSingleLock::Lock","linkify":"<a name=\"csinglelock__lock\"></a>  CSingleLock::Lock","source":"<a name=\"csinglelock__lock\"></a>  CSingleLock::Lock"},{"pos":[4259,4392],"content":"Call this function to gain access to the resource controlled by the synchronization object supplied to the <ph id=\"ph1\">`CSingleLock`</ph> constructor.","source":"Call this function to gain access to the resource controlled by the synchronization object supplied to the `CSingleLock` constructor."},{"pos":[4456,4466],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>dwTimeOut<ept id=\"p1\">*</ept>","pos":[4470,4481],"source":"*dwTimeOut*"},{"content":"Specifies the amount of time to wait for the synchronization object to be available (signaled).","pos":[4485,4580]},{"content":"If <bpt id=\"p1\">**</bpt>INFINITE<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`Lock`</ph> will wait until the object is signaled before returning.","pos":[4581,4661],"source":" If **INFINITE**, `Lock` will wait until the object is signaled before returning."},{"pos":[4671,4683],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the function was successful; otherwise 0.","pos":[4687,4739]},{"pos":[4749,4756],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the synchronization object is signaled, <ph id=\"ph1\">`Lock`</ph> will return successfully and the thread now owns the object.","pos":[4760,4870],"source":"If the synchronization object is signaled, `Lock` will return successfully and the thread now owns the object."},{"content":"If the synchronization object is nonsignaled (unavailable), <ph id=\"ph1\">`Lock`</ph> will wait for the synchronization object to become signaled up to the number of milliseconds specified in the <bpt id=\"p1\">*</bpt>dwTimeOut<ept id=\"p1\">*</ept> parameter.","pos":[4871,5070],"source":" If the synchronization object is nonsignaled (unavailable), `Lock` will wait for the synchronization object to become signaled up to the number of milliseconds specified in the *dwTimeOut* parameter."},{"content":"If the synchronization object did not become signaled in the specified amount of time, <ph id=\"ph1\">`Lock`</ph> returns failure.","pos":[5071,5181],"source":" If the synchronization object did not become signaled in the specified amount of time, `Lock` returns failure."},{"pos":[5191,5198],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5202,5284],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_Utilities#21<ept id=\"p2\">](../../mfc/codesnippet/cpp/csinglelock-class_3.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_Utilities#21](../../mfc/codesnippet/cpp/csinglelock-class_3.h)]"},{"pos":[5294,5349],"content":"<bpt id=\"p1\">&lt;a name=\"csinglelock__unlock\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSingleLock::Unlock","linkify":"<a name=\"csinglelock__unlock\"></a>  CSingleLock::Unlock","source":"<a name=\"csinglelock__unlock\"></a>  CSingleLock::Unlock"},{"pos":[5353,5412],"content":"Releases the synchronization object owned by <ph id=\"ph1\">`CSingleLock`</ph>.","source":"Releases the synchronization object owned by `CSingleLock`."},{"pos":[5518,5528],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Number of accesses to release.","pos":[5544,5574]},{"content":"Must be greater than 0.","pos":[5575,5598]},{"content":"If the specified amount would cause the object's count to exceed its maximum, the count is not changed and the function returns <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>.","pos":[5599,5737],"source":" If the specified amount would cause the object's count to exceed its maximum, the count is not changed and the function returns **FALSE**."},{"content":"Points to a variable to receive the previous count of the synchronization object.","pos":[5760,5841]},{"content":"If <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the previous count is not returned.","pos":[5842,5890],"source":" If **NULL**, the previous count is not returned."},{"pos":[5900,5912],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the function was successful; otherwise 0.","pos":[5916,5968]},{"pos":[5978,5985],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5989,6043],"content":"This function is called by <ph id=\"ph1\">`CSingleLock`</ph>'s destructor.","source":"This function is called by `CSingleLock`'s destructor."},{"pos":[6050,6194],"content":"If you need to release more than one access count of a semaphore, use the second form of <ph id=\"ph1\">`Unlock`</ph> and specify the number of accesses to release.","source":"If you need to release more than one access count of a semaphore, use the second form of `Unlock` and specify the number of accesses to release."},{"pos":[6204,6211],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6215,6297],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_Utilities#21<ept id=\"p2\">](../../mfc/codesnippet/cpp/csinglelock-class_3.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_Utilities#21](../../mfc/codesnippet/cpp/csinglelock-class_3.h)]"},{"pos":[6306,6314],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[6318,6366],"source":"[Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CMultiLock Class<ept id=\"p1\">](../../mfc/reference/cmultilock-class.md)</ept>","pos":[6369,6429],"source":" [CMultiLock Class](../../mfc/reference/cmultilock-class.md)"}],"content":"---\ntitle: \"CSingleLock Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CSingleLock\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CSingleLock class\"\n  - \"threading [MFC], access control\"\n  - \"synchronization objects, access control\"\n  - \"threading [MFC], synchronization\"\nms.assetid: 7dae7288-8066-4a3e-85e0-78d28bfc6bc8\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CSingleLock Class\nRepresents the access-control mechanism used in controlling access to a resource in a multithreaded program.  \n  \n## Syntax  \n  \n```  \nclass CSingleLock  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CSingleLock::CSingleLock](#csinglelock__csinglelock)|Constructs a `CSingleLock` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CSingleLock::IsLocked](#csinglelock__islocked)|Determines if the object is locked.|  \n|[CSingleLock::Lock](#csinglelock__lock)|Waits on a synchronization object.|  \n|[CSingleLock::Unlock](#csinglelock__unlock)|Releases a synchronization object.|  \n  \n## Remarks  \n `CSingleLock` does not have a base class.  \n  \n In order to use the synchronization classes [CSemaphore](../../mfc/reference/csemaphore-class.md), [CMutex](../../mfc/reference/cmutex-class.md), [CCriticalSection](../../mfc/reference/ccriticalsection-class.md), and [CEvent](../../mfc/reference/cevent-class.md), you must create either a `CSingleLock` or [CMultiLock](../../mfc/reference/cmultilock-class.md) object to wait on and release the synchronization object. Use `CSingleLock` when you only need to wait on one object at a time. Use **CMultiLock** when there are multiple objects that you could use at a particular time.  \n  \n To use a `CSingleLock` object, call its constructor inside a member function in the controlled resource's class. Then call the [IsLocked](#csinglelock__islocked) member function to determine if the resource is available. If it is, continue with the remainder of the member function. If the resource is unavailable, either wait for a specified amount of time for the resource to be released, or return failure. After use of the resource is complete, either call the [Unlock](#csinglelock__unlock) function if the `CSingleLock` object is to be used again, or allow the `CSingleLock` object to be destroyed.  \n  \n `CSingleLock` objects require the presence of an object derived from [CSyncObject](../../mfc/reference/csyncobject-class.md). This is usually a data member of the controlled resource's class. For more information on how to use `CSingleLock` objects, see the article [Multithreading: How to Use the Synchronization Classes](../../parallel/multithreading-how-to-use-the-synchronization-classes.md).  \n  \n## Inheritance Hierarchy  \n `CSingleLock`  \n  \n## Requirements  \n **Header:** afxmt.h  \n  \n##  <a name=\"csinglelock__csinglelock\"></a>  CSingleLock::CSingleLock  \n Constructs a `CSingleLock` object.  \n  \n```  \nexplicit CSingleLock(\n    CSyncObject* pObject,  \n    BOOL bInitialLock = FALSE);\n```  \n  \n### Parameters  \n `pObject`  \n Points to the synchronization object to be accessed. Cannot be **NULL**.  \n  \n `bInitialLock`  \n Specifies whether to initially attempt to access the supplied object.  \n  \n### Remarks  \n This function is generally called from within an access member function of the controlled resource.  \n  \n### Example  \n [!code-cpp[NVC_MFC_Utilities#19](../../mfc/codesnippet/cpp/csinglelock-class_1.h)]  \n  \n##  <a name=\"csinglelock__islocked\"></a>  CSingleLock::IsLocked  \n Determines if the object associated with the `CSingleLock` object is nonsignaled (unavailable).  \n  \n```  \nBOOL IsLocked();\n```  \n  \n### Return Value  \n Nonzero if the object is locked; otherwise 0.  \n  \n### Example  \n [!code-cpp[NVC_MFC_Utilities#20](../../mfc/codesnippet/cpp/csinglelock-class_2.h)]  \n  \n##  <a name=\"csinglelock__lock\"></a>  CSingleLock::Lock  \n Call this function to gain access to the resource controlled by the synchronization object supplied to the `CSingleLock` constructor.  \n  \n```  \nBOOL Lock(DWORD dwTimeOut = INFINITE);\n```  \n  \n### Parameters  \n *dwTimeOut*  \n Specifies the amount of time to wait for the synchronization object to be available (signaled). If **INFINITE**, `Lock` will wait until the object is signaled before returning.  \n  \n### Return Value  \n Nonzero if the function was successful; otherwise 0.  \n  \n### Remarks  \n If the synchronization object is signaled, `Lock` will return successfully and the thread now owns the object. If the synchronization object is nonsignaled (unavailable), `Lock` will wait for the synchronization object to become signaled up to the number of milliseconds specified in the *dwTimeOut* parameter. If the synchronization object did not become signaled in the specified amount of time, `Lock` returns failure.  \n  \n### Example  \n [!code-cpp[NVC_MFC_Utilities#21](../../mfc/codesnippet/cpp/csinglelock-class_3.h)]  \n  \n##  <a name=\"csinglelock__unlock\"></a>  CSingleLock::Unlock  \n Releases the synchronization object owned by `CSingleLock`.  \n  \n```  \nBOOL Unlock();\n\n \nBOOL Unlock(\n    LONG lCount,  \n    LPLONG lPrevCount = NULL);\n```  \n  \n### Parameters  \n `lCount`  \n Number of accesses to release. Must be greater than 0. If the specified amount would cause the object's count to exceed its maximum, the count is not changed and the function returns **FALSE**.  \n  \n `lPrevCount`  \n Points to a variable to receive the previous count of the synchronization object. If **NULL**, the previous count is not returned.  \n  \n### Return Value  \n Nonzero if the function was successful; otherwise 0.  \n  \n### Remarks  \n This function is called by `CSingleLock`'s destructor.  \n  \n If you need to release more than one access count of a semaphore, use the second form of `Unlock` and specify the number of accesses to release.  \n  \n### Example  \n [!code-cpp[NVC_MFC_Utilities#21](../../mfc/codesnippet/cpp/csinglelock-class_3.h)]  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CMultiLock Class](../../mfc/reference/cmultilock-class.md)\n"}