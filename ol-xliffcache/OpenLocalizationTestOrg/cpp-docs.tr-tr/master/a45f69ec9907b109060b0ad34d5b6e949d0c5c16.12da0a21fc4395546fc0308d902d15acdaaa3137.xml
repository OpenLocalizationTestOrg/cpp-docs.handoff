{"nodes":[{"pos":[12,67],"content":"Calling C Functions in Inline Assembly | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Calling C Functions in Inline Assembly | Microsoft Docs","pos":[0,55]}]},{"content":"Calling C Functions in Inline Assembly","pos":[804,842]},{"content":"Microsoft Specific","pos":[846,864]},{"content":"An <ph id=\"ph1\">`__asm`</ph> block can call C functions, including C library routines.","pos":[868,936],"source":"An `__asm` block can call C functions, including C library routines."},{"content":"The following example calls the <ph id=\"ph1\">`printf`</ph> library routine:","pos":[937,994],"source":" The following example calls the `printf` library routine:"},{"content":"Because function arguments are passed on the stack, you simply push the needed arguments — string pointers, in the previous example — before calling the function.","pos":[1588,1750]},{"content":"The arguments are pushed in reverse order, so they come off the stack in the desired order.","pos":[1751,1842]},{"content":"To emulate the C statement","pos":[1843,1869]},{"pos":[1925,2027],"content":"the example pushes pointers to <ph id=\"ph1\">`world`</ph>, <ph id=\"ph2\">`hello`</ph>, and <ph id=\"ph3\">`format`</ph>, in that order, and then calls <ph id=\"ph4\">`printf`</ph>.","source":"the example pushes pointers to `world`, `hello`, and `format`, in that order, and then calls `printf`."},{"content":"END Microsoft Specific","pos":[2036,2058]},{"content":"See Also","pos":[2069,2077]},{"content":"Inline Assembler","pos":[2082,2098]}],"content":"---\ntitle: \"Calling C Functions in Inline Assembly | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"function calls, C functions\"\n  - \"function calls, in inline assembly\"\n  - \"functions [C], calling in inline assembly\"\n  - \"Visual C, functions\"\n  - \"inline assembly, calling functions\"\n  - \"__asm keyword [C++], calling functions\"\nms.assetid: f8a8d568-d175-4e23-9b24-36ef60a4cab3\ncaps.latest.revision: 7\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Calling C Functions in Inline Assembly\n## Microsoft Specific  \n An `__asm` block can call C functions, including C library routines. The following example calls the `printf` library routine:  \n  \n```  \n// InlineAssembler_Calling_C_Functions_in_Inline_Assembly.cpp  \n// processor: x86  \n#include <stdio.h>  \n  \nchar format[] = \"%s %s\\n\";  \nchar hello[] = \"Hello\";  \nchar world[] = \"world\";  \nint main( void )  \n{  \n   __asm  \n   {  \n      mov  eax, offset world  \n      push eax  \n      mov  eax, offset hello  \n      push eax  \n      mov  eax, offset format  \n      push eax  \n      call printf  \n      //clean up the stack so that main can exit cleanly  \n      //use the unused register ebx to do the cleanup  \n      pop  ebx  \n      pop  ebx  \n      pop  ebx  \n   }  \n}  \n```  \n  \n Because function arguments are passed on the stack, you simply push the needed arguments — string pointers, in the previous example — before calling the function. The arguments are pushed in reverse order, so they come off the stack in the desired order. To emulate the C statement  \n  \n```  \nprintf( format, hello, world );  \n```  \n  \n the example pushes pointers to `world`, `hello`, and `format`, in that order, and then calls `printf`.  \n  \n **END Microsoft Specific**  \n  \n## See Also  \n [Inline Assembler](../../assembler/inline/inline-assembler.md)"}