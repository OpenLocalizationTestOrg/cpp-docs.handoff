{"nodes":[{"pos":[12,52],"content":"concurrent_vector Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"concurrent_vector Class | Microsoft Docs","pos":[0,40]}]},{"pos":[709,732],"content":"concurrent_vector Class","linkify":"concurrent_vector Class","nodes":[{"content":"concurrent_vector Class","pos":[0,23]}]},{"content":"The <ph id=\"ph1\">`concurrent_vector`</ph> class is a sequence container class that allows random access to any element.","pos":[733,834],"source":"The `concurrent_vector` class is a sequence container class that allows random access to any element."},{"content":"It enables concurrency-safe append, element access, iterator access, and iterator traversal operations.","pos":[835,938]},{"pos":[947,953],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1128,1138],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The data type of the elements to be stored in the vector.","pos":[1149,1206]},{"content":"The type that represents the stored allocator object that encapsulates details about the allocation and deallocation of memory for the concurrent vector.","pos":[1222,1375]},{"content":"This argument is optional and the default value is <ph id=\"ph1\">`allocator&lt;``T``&gt;`</ph>.","pos":[1376,1446],"source":" This argument is optional and the default value is `allocator<``T``>`."},{"pos":[1455,1462],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1472,1487],"content":"Public Typedefs","linkify":"Public Typedefs","nodes":[{"content":"Public Typedefs","pos":[0,15]}]},{"content":"Name","pos":[1494,1498]},{"content":"Description","pos":[1499,1510]},{"content":"A type that represents the allocator class for the concurrent vector.","pos":[1565,1634]},{"pos":[1656,1757],"content":"A type that provides a random-access iterator that can read a <ph id=\"ph1\">`const`</ph> element in a concurrent vector.","source":"A type that provides a random-access iterator that can read a `const` element in a concurrent vector."},{"pos":[1778,1853],"content":"A type that provides a pointer to a <ph id=\"ph1\">`const`</ph> element in a concurrent vector.","source":"A type that provides a pointer to a `const` element in a concurrent vector."},{"pos":[1876,2006],"content":"A type that provides a reference to a <ph id=\"ph1\">`const`</ph> element stored in a concurrent vector for reading and performing <ph id=\"ph2\">`const`</ph> operations.","source":"A type that provides a reference to a `const` element stored in a concurrent vector for reading and performing `const` operations."},{"pos":[2036,2141],"content":"A type that provides a random-access iterator that can read any <ph id=\"ph1\">`const`</ph> element in the concurrent vector.","source":"A type that provides a random-access iterator that can read any `const` element in the concurrent vector."},{"content":"A type that provides the signed distance between two elements in a concurrent vector.","pos":[2164,2249]},{"content":"A type that provides a random-access iterator that can read any element in a concurrent vector.","pos":[2265,2360]},{"content":"Modification of an element using the iterator is not concurrency-safe.","pos":[2361,2431]},{"content":"A type that provides a pointer to an element in a concurrent vector.","pos":[2446,2514]},{"content":"A type that provides a reference to an element stored in a concurrent vector.","pos":[2531,2608]},{"content":"A type that provides a random-access iterator that can read any element in a reversed concurrent vector.","pos":[2632,2736]},{"content":"Modification of an element using the iterator is not concurrency-safe.","pos":[2737,2807]},{"content":"A type that counts the number of elements in a concurrent vector.","pos":[2824,2889]},{"content":"A type that represents the data type stored in a concurrent vector.","pos":[2907,2974]},{"pos":[2985,3004],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[3011,3015]},{"content":"Description","pos":[3016,3027]},{"pos":[3065,3122],"content":"<bpt id=\"p1\">[</bpt>concurrent_vector::concurrent_vector Constructor<ept id=\"p1\">](#ctor)</ept>","source":"[concurrent_vector::concurrent_vector Constructor](#ctor)"},{"content":"Overloaded.","pos":[3123,3134]},{"content":"Constructs a concurrent vector.","pos":[3135,3166]},{"pos":[3171,3228],"content":"<bpt id=\"p1\">[</bpt>concurrent_vector::~concurrent_vector Destructor<ept id=\"p1\">](#dtor)</ept>","source":"[concurrent_vector::~concurrent_vector Destructor](#dtor)"},{"content":"Erases all elements and destroys this concurrent vector.","pos":[3229,3285]},{"pos":[3296,3310],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[3317,3321]},{"content":"Description","pos":[3322,3333]},{"pos":[3371,3414],"content":"<bpt id=\"p1\">[</bpt>concurrent_vector::assign Method<ept id=\"p1\">](#assign)</ept>","source":"[concurrent_vector::assign Method](#assign)"},{"content":"Overloaded.","pos":[3415,3426]},{"content":"Erases the elements of the concurrent vector and assigns to it either <ph id=\"ph1\">`_N`</ph> copies of <ph id=\"ph2\">`_Item`</ph>, or values specified by the iterator range [ <ph id=\"ph3\">`_Begin`</ph>, <ph id=\"ph4\">`_End`</ph>).","pos":[3427,3583],"source":" Erases the elements of the concurrent vector and assigns to it either `_N` copies of `_Item`, or values specified by the iterator range [ `_Begin`, `_End`)."},{"content":"This method is not concurrency-safe.","pos":[3584,3620]},{"pos":[3625,3660],"content":"<bpt id=\"p1\">[</bpt>concurrent_vector::at Method<ept id=\"p1\">](#at)</ept>","source":"[concurrent_vector::at Method](#at)"},{"content":"Overloaded.","pos":[3661,3672]},{"content":"Provides access to the element at the given index in the concurrent vector.","pos":[3673,3748]},{"content":"This method is concurrency-safe for read operations, and also while growing the vector, as long as you have ensured that the value <ph id=\"ph1\">`_Index`</ph> is less than the size of the concurrent vector.","pos":[3749,3936],"source":" This method is concurrency-safe for read operations, and also while growing the vector, as long as you have ensured that the value `_Index` is less than the size of the concurrent vector."},{"pos":[3941,3980],"content":"<bpt id=\"p1\">[</bpt>concurrent_vector::back Method<ept id=\"p1\">](#back)</ept>","source":"[concurrent_vector::back Method](#back)"},{"content":"Overloaded.","pos":[3981,3992]},{"content":"Returns a reference or a <ph id=\"ph1\">`const`</ph> reference to the last element in the concurrent vector.","pos":[3993,4081],"source":" Returns a reference or a `const` reference to the last element in the concurrent vector."},{"content":"If the concurrent vector is empty, the return value is undefined.","pos":[4082,4147]},{"content":"This method is concurrency-safe.","pos":[4148,4180]},{"pos":[4185,4226],"content":"<bpt id=\"p1\">[</bpt>concurrent_vector::begin Method<ept id=\"p1\">](#begin)</ept>","source":"[concurrent_vector::begin Method](#begin)"},{"content":"Overloaded.","pos":[4227,4238]},{"content":"Returns an iterator of type <ph id=\"ph1\">`iterator`</ph> or <ph id=\"ph2\">`const_iterator`</ph> to the beginning of the concurrent vector.","pos":[4239,4340],"source":" Returns an iterator of type `iterator` or `const_iterator` to the beginning of the concurrent vector."},{"content":"This method is concurrency-safe.","pos":[4341,4373]},{"pos":[4378,4425],"content":"<bpt id=\"p1\">[</bpt>concurrent_vector::capacity Method<ept id=\"p1\">](#capacity)</ept>","source":"[concurrent_vector::capacity Method](#capacity)"},{"content":"Returns the maximum size to which the concurrent vector can grow without having to allocate more memory.","pos":[4426,4530]},{"content":"This method is concurrency-safe.","pos":[4531,4563]},{"pos":[4568,4611],"content":"<bpt id=\"p1\">[</bpt>concurrent_vector::cbegin Method<ept id=\"p1\">](#cbegin)</ept>","source":"[concurrent_vector::cbegin Method](#cbegin)"},{"content":"Returns an iterator of type <ph id=\"ph1\">`const_iterator`</ph> to the beginning of the concurrent vector.","pos":[4612,4699],"source":"Returns an iterator of type `const_iterator` to the beginning of the concurrent vector."},{"content":"This method is concurrency-safe.","pos":[4700,4732]},{"pos":[4737,4776],"content":"<bpt id=\"p1\">[</bpt>concurrent_vector::cend Method<ept id=\"p1\">](#cend)</ept>","source":"[concurrent_vector::cend Method](#cend)"},{"content":"Returns an iterator of type <ph id=\"ph1\">`const_iterator`</ph> to the end of the concurrent vector.","pos":[4777,4858],"source":"Returns an iterator of type `const_iterator` to the end of the concurrent vector."},{"content":"This method is concurrency-safe.","pos":[4859,4891]},{"pos":[4896,4937],"content":"<bpt id=\"p1\">[</bpt>concurrent_vector::clear Method<ept id=\"p1\">](#clear)</ept>","source":"[concurrent_vector::clear Method](#clear)"},{"content":"Erases all elements in the concurrent vector.","pos":[4938,4983]},{"content":"This method is not concurrency-safe.","pos":[4984,5020]},{"pos":[5025,5070],"content":"<bpt id=\"p1\">[</bpt>concurrent_vector::crbegin Method<ept id=\"p1\">](#crbegin)</ept>","source":"[concurrent_vector::crbegin Method](#crbegin)"},{"content":"Returns an iterator of type <ph id=\"ph1\">`const_reverse_iterator`</ph> to the beginning of the concurrent vector.","pos":[5071,5166],"source":"Returns an iterator of type `const_reverse_iterator` to the beginning of the concurrent vector."},{"content":"This method is concurrency-safe.","pos":[5167,5199]},{"pos":[5204,5245],"content":"<bpt id=\"p1\">[</bpt>concurrent_vector::crend Method<ept id=\"p1\">](#crend)</ept>","source":"[concurrent_vector::crend Method](#crend)"},{"content":"Returns an iterator of type <ph id=\"ph1\">`const_reverse_iterator`</ph> to the end of the concurrent vector.","pos":[5246,5335],"source":"Returns an iterator of type `const_reverse_iterator` to the end of the concurrent vector."},{"content":"This method is concurrency-safe.","pos":[5336,5368]},{"pos":[5373,5414],"content":"<bpt id=\"p1\">[</bpt>concurrent_vector::empty Method<ept id=\"p1\">](#empty)</ept>","source":"[concurrent_vector::empty Method](#empty)"},{"content":"Tests if the concurrent vector is empty at the time this method is called.","pos":[5415,5489]},{"content":"This method is concurrency-safe.","pos":[5490,5522]},{"pos":[5527,5564],"content":"<bpt id=\"p1\">[</bpt>concurrent_vector::end Method<ept id=\"p1\">](#end)</ept>","source":"[concurrent_vector::end Method](#end)"},{"content":"Overloaded.","pos":[5565,5576]},{"content":"Returns an iterator of type <ph id=\"ph1\">`iterator`</ph> or <ph id=\"ph2\">`const_iterator`</ph> to the end of the concurrent vector.","pos":[5577,5672],"source":" Returns an iterator of type `iterator` or `const_iterator` to the end of the concurrent vector."},{"content":"This method is concurrency-safe.","pos":[5673,5705]},{"pos":[5710,5751],"content":"<bpt id=\"p1\">[</bpt>concurrent_vector::front Method<ept id=\"p1\">](#front)</ept>","source":"[concurrent_vector::front Method](#front)"},{"content":"Overloaded.","pos":[5752,5763]},{"content":"Returns a reference or a <ph id=\"ph1\">`const`</ph> reference to the first element in the concurrent vector.","pos":[5764,5853],"source":" Returns a reference or a `const` reference to the first element in the concurrent vector."},{"content":"If the concurrent vector is empty, the return value is undefined.","pos":[5854,5919]},{"content":"This method is concurrency-safe.","pos":[5920,5952]},{"pos":[5957,6014],"content":"<bpt id=\"p1\">[</bpt>concurrent_vector::get_allocator Method<ept id=\"p1\">](#get_allocator)</ept>","source":"[concurrent_vector::get_allocator Method](#get_allocator)"},{"content":"Returns a copy of the allocator used to construct the concurrent vector.","pos":[6015,6087]},{"content":"This method is concurrency-safe.","pos":[6088,6120]},{"pos":[6125,6170],"content":"<bpt id=\"p1\">[</bpt>concurrent_vector::grow_by Method<ept id=\"p1\">](#grow_by)</ept>","source":"[concurrent_vector::grow_by Method](#grow_by)"},{"content":"Overloaded.","pos":[6171,6182]},{"content":"Grows this concurrent vector by <ph id=\"ph1\">`_Delta`</ph> elements.","pos":[6183,6233],"source":" Grows this concurrent vector by `_Delta` elements."},{"content":"This method is concurrency-safe.","pos":[6234,6266]},{"pos":[6271,6334],"content":"<bpt id=\"p1\">[</bpt>concurrent_vector::grow_to_at_least Method<ept id=\"p1\">](#grow_to_at_least)</ept>","source":"[concurrent_vector::grow_to_at_least Method](#grow_to_at_least)"},{"content":"Grows this concurrent vector until it has at least <ph id=\"ph1\">`_N`</ph> elements.","pos":[6335,6400],"source":"Grows this concurrent vector until it has at least `_N` elements."},{"content":"This method is concurrency-safe.","pos":[6401,6433]},{"pos":[6438,6485],"content":"<bpt id=\"p1\">[</bpt>concurrent_vector::max_size Method<ept id=\"p1\">](#max_size)</ept>","source":"[concurrent_vector::max_size Method](#max_size)"},{"content":"Returns the maximum number of elements the concurrent vector can hold.","pos":[6486,6556]},{"content":"This method is concurrency-safe.","pos":[6557,6589]},{"pos":[6594,6643],"content":"<bpt id=\"p1\">[</bpt>concurrent_vector::push_back Method<ept id=\"p1\">](#push_back)</ept>","source":"[concurrent_vector::push_back Method](#push_back)"},{"content":"Overloaded.","pos":[6644,6655]},{"content":"Appends the given item to the end of the concurrent vector.","pos":[6656,6715]},{"content":"This method is concurrency-safe.","pos":[6716,6748]},{"pos":[6753,6796],"content":"<bpt id=\"p1\">[</bpt>concurrent_vector::rbegin Method<ept id=\"p1\">](#rbegin)</ept>","source":"[concurrent_vector::rbegin Method](#rbegin)"},{"content":"Overloaded.","pos":[6797,6808]},{"content":"Returns an iterator of type <ph id=\"ph1\">`reverse_iterator`</ph> or <ph id=\"ph2\">`const_reverse_iterator`</ph> to the beginning of the concurrent vector.","pos":[6809,6926],"source":" Returns an iterator of type `reverse_iterator` or `const_reverse_iterator` to the beginning of the concurrent vector."},{"content":"This method is concurrency-safe.","pos":[6927,6959]},{"pos":[6964,7003],"content":"<bpt id=\"p1\">[</bpt>concurrent_vector::rend Method<ept id=\"p1\">](#rend)</ept>","source":"[concurrent_vector::rend Method](#rend)"},{"content":"Overloaded.","pos":[7004,7015]},{"content":"Returns an iterator of type <ph id=\"ph1\">`reverse_iterator`</ph> or <ph id=\"ph2\">`const_reverse_iterator`</ph> to the end of the concurrent vector.","pos":[7016,7127],"source":" Returns an iterator of type `reverse_iterator` or `const_reverse_iterator` to the end of the concurrent vector."},{"content":"This method is concurrency-safe.","pos":[7128,7160]},{"pos":[7165,7210],"content":"<bpt id=\"p1\">[</bpt>concurrent_vector::reserve Method<ept id=\"p1\">](#reserve)</ept>","source":"[concurrent_vector::reserve Method](#reserve)"},{"content":"Allocates enough space to grow the concurrent vector to size <ph id=\"ph1\">`_N`</ph> without having to allocate more memory later.","pos":[7211,7322],"source":"Allocates enough space to grow the concurrent vector to size `_N` without having to allocate more memory later."},{"content":"This method is not concurrency-safe.","pos":[7323,7359]},{"pos":[7364,7407],"content":"<bpt id=\"p1\">[</bpt>concurrent_vector::resize Method<ept id=\"p1\">](#resize)</ept>","source":"[concurrent_vector::resize Method](#resize)"},{"content":"Overloaded.","pos":[7408,7419]},{"content":"Changes the size of the concurrent vector to the requested size, deleting or adding elements as necessary.","pos":[7420,7526]},{"content":"This method is not concurrency-safe.","pos":[7527,7563]},{"pos":[7568,7625],"content":"<bpt id=\"p1\">[</bpt>concurrent_vector::shrink_to_fit Method<ept id=\"p1\">](#shrink_to_fit)</ept>","source":"[concurrent_vector::shrink_to_fit Method](#shrink_to_fit)"},{"content":"Compacts the internal representation of the concurrent vector to reduce fragmentation and optimize memory usage.","pos":[7626,7738]},{"content":"This method is not concurrency-safe.","pos":[7739,7775]},{"pos":[7780,7819],"content":"<bpt id=\"p1\">[</bpt>concurrent_vector::size Method<ept id=\"p1\">](#size)</ept>","source":"[concurrent_vector::size Method](#size)"},{"content":"Returns the number of elements in the concurrent vector.","pos":[7820,7876]},{"content":"This method is concurrency-safe.","pos":[7877,7909]},{"pos":[7914,7953],"content":"<bpt id=\"p1\">[</bpt>concurrent_vector::swap Method<ept id=\"p1\">](#swap)</ept>","source":"[concurrent_vector::swap Method](#swap)"},{"content":"Swaps the contents of two concurrent vectors.","pos":[7954,7999]},{"content":"This method is not concurrency-safe.","pos":[8000,8036]},{"pos":[8047,8063],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[8070,8074]},{"content":"Description","pos":[8075,8086]},{"pos":[8124,8178],"content":"<bpt id=\"p1\">[</bpt>concurrent_vector::operator[] Operator<ept id=\"p1\">](#operator_at)</ept>","source":"[concurrent_vector::operator[] Operator](#operator_at)"},{"content":"Overloaded.","pos":[8179,8190]},{"content":"Provides access to the element at the given index in the concurrent vector.","pos":[8191,8266]},{"content":"This method is concurrency-safe for read operations, and also while growing the vector, as long as the you have ensured that the value <ph id=\"ph1\">`_Index`</ph> is less than the size of the concurrent vector.","pos":[8267,8458],"source":" This method is concurrency-safe for read operations, and also while growing the vector, as long as the you have ensured that the value `_Index` is less than the size of the concurrent vector."},{"pos":[8463,8516],"content":"<bpt id=\"p1\">[</bpt>concurrent_vector::operator= Operator<ept id=\"p1\">](#operator_eq)</ept>","source":"[concurrent_vector::operator= Operator](#operator_eq)"},{"content":"Overloaded.","pos":[8517,8528]},{"content":"Assigns the contents of another <ph id=\"ph1\">`concurrent_vector`</ph> object to this one.","pos":[8529,8600],"source":" Assigns the contents of another `concurrent_vector` object to this one."},{"content":"This method is not concurrency-safe.","pos":[8601,8637]},{"pos":[8647,8654],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8658,8816],"content":"For detailed information on the <ph id=\"ph1\">`concurrent_vector`</ph> class, see <bpt id=\"p1\">[</bpt>Parallel Containers and Objects<ept id=\"p1\">](../../../parallel/concrt/parallel-containers-and-objects.md)</ept>.","source":"For detailed information on the `concurrent_vector` class, see [Parallel Containers and Objects](../../../parallel/concrt/parallel-containers-and-objects.md)."},{"pos":[8825,8846],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[8937,8949],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[8953,8984],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> concurrent_vector.h","source":"**Header:** concurrent_vector.h"},{"pos":[8991,9017],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[9027,9082],"content":"<bpt id=\"p1\">&lt;a name=\"assign\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_vector::assign Method","linkify":"<a name=\"assign\"></a>  concurrent_vector::assign Method","source":"<a name=\"assign\"></a>  concurrent_vector::assign Method"},{"content":"Erases the elements of the concurrent vector and assigns to it either <ph id=\"ph1\">`_N`</ph> copies of <ph id=\"ph2\">`_Item`</ph>, or values specified by the iterator range [ <ph id=\"ph3\">`_Begin`</ph>, <ph id=\"ph4\">`_End`</ph>).","pos":[9086,9242],"source":"Erases the elements of the concurrent vector and assigns to it either `_N` copies of `_Item`, or values specified by the iterator range [ `_Begin`, `_End`)."},{"content":"This method is not concurrency-safe.","pos":[9243,9279]},{"pos":[9454,9464],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type of the specified iterator.","pos":[9488,9523]},{"content":"The number of items to copy into the concurrent vector.","pos":[9538,9593]},{"content":"Reference to a value used to fill the concurrent vector.","pos":[9611,9667]},{"content":"An iterator to the first element of the source range.","pos":[9686,9739]},{"content":"An iterator to one past the last element of the source range.","pos":[9756,9817]},{"pos":[9827,9834],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`assign`</ph> is not concurrency-safe.","pos":[9838,9871],"source":"`assign` is not concurrency-safe."},{"content":"You must ensure that no other threads are invoking methods on the concurrent vector when you call this method.","pos":[9872,9982]},{"pos":[9992,10039],"content":"<bpt id=\"p1\">&lt;a name=\"at\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_vector::at Method","linkify":"<a name=\"at\"></a>  concurrent_vector::at Method","source":"<a name=\"at\"></a>  concurrent_vector::at Method"},{"content":"Provides access to the element at the given index in the concurrent vector.","pos":[10043,10118]},{"content":"This method is concurrency-safe for read operations, and also while growing the vector, as long as you have ensured that the value <ph id=\"ph1\">`_Index`</ph> is less than the size of the concurrent vector.","pos":[10119,10306],"source":" This method is concurrency-safe for read operations, and also while growing the vector, as long as you have ensured that the value `_Index` is less than the size of the concurrent vector."},{"pos":[10406,10416],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The index of the element to be retrieved.","pos":[10432,10473]},{"pos":[10483,10495],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reference to the item at the given index.","pos":[10499,10542]},{"pos":[10552,10559],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The version of the function <ph id=\"ph1\">`at`</ph> that returns a non- <ph id=\"ph2\">`const`</ph> reference cannot be used to concurrently write to the element from different threads.","pos":[10563,10709],"source":"The version of the function `at` that returns a non- `const` reference cannot be used to concurrently write to the element from different threads."},{"content":"A different synchronization object should be used to synchronize concurrent read and write operations to the same data element.","pos":[10710,10837]},{"content":"The method throws <ph id=\"ph1\">`out_of_range`</ph> if <ph id=\"ph2\">`_Index`</ph> is greater than or equal to the size of the concurrent vector, and <ph id=\"ph3\">`range_error`</ph> if the index is for a broken portion of the vector.","pos":[10844,11021],"source":"The method throws `out_of_range` if `_Index` is greater than or equal to the size of the concurrent vector, and `range_error` if the index is for a broken portion of the vector."},{"content":"For details on how a vector can become broken, see <bpt id=\"p1\">[</bpt>Parallel Containers and Objects<ept id=\"p1\">](../../../parallel/concrt/parallel-containers-and-objects.md)</ept>.","pos":[11022,11168],"source":" For details on how a vector can become broken, see [Parallel Containers and Objects](../../../parallel/concrt/parallel-containers-and-objects.md)."},{"pos":[11178,11229],"content":"<bpt id=\"p1\">&lt;a name=\"back\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_vector::back Method","linkify":"<a name=\"back\"></a>  concurrent_vector::back Method","source":"<a name=\"back\"></a>  concurrent_vector::back Method"},{"content":"Returns a reference or a <ph id=\"ph1\">`const`</ph> reference to the last element in the concurrent vector.","pos":[11233,11321],"source":"Returns a reference or a `const` reference to the last element in the concurrent vector."},{"content":"If the concurrent vector is empty, the return value is undefined.","pos":[11322,11387]},{"content":"This method is concurrency-safe.","pos":[11388,11420]},{"pos":[11492,11504],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[11508,11588],"content":"A reference or a <ph id=\"ph1\">`const`</ph> reference to the last element in the concurrent vector.","source":"A reference or a `const` reference to the last element in the concurrent vector."},{"pos":[11598,11651],"content":"<bpt id=\"p1\">&lt;a name=\"begin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_vector::begin Method","linkify":"<a name=\"begin\"></a>  concurrent_vector::begin Method","source":"<a name=\"begin\"></a>  concurrent_vector::begin Method"},{"content":"Returns an iterator of type <ph id=\"ph1\">`iterator`</ph> or <ph id=\"ph2\">`const_iterator`</ph> to the beginning of the concurrent vector.","pos":[11655,11756],"source":"Returns an iterator of type `iterator` or `const_iterator` to the beginning of the concurrent vector."},{"content":"This method is concurrency-safe.","pos":[11757,11789]},{"pos":[11861,11873],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[11877,11970],"content":"An iterator of type <ph id=\"ph1\">`iterator`</ph> or <ph id=\"ph2\">`const_iterator`</ph> to the beginning of the concurrent vector.","source":"An iterator of type `iterator` or `const_iterator` to the beginning of the concurrent vector."},{"pos":[11980,12039],"content":"<bpt id=\"p1\">&lt;a name=\"capacity\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_vector::capacity Method","linkify":"<a name=\"capacity\"></a>  concurrent_vector::capacity Method","source":"<a name=\"capacity\"></a>  concurrent_vector::capacity Method"},{"content":"Returns the maximum size to which the concurrent vector can grow without having to allocate more memory.","pos":[12043,12147]},{"content":"This method is concurrency-safe.","pos":[12148,12180]},{"pos":[12231,12243],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The maximum size to which the concurrent vector can grow without having to allocate more memory.","pos":[12247,12343]},{"pos":[12353,12360],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12364,12477],"content":"Unlike an STL <ph id=\"ph1\">`vector`</ph>, a <ph id=\"ph2\">`concurrent_vector`</ph> object does not move existing elements if it allocates more memory.","source":"Unlike an STL `vector`, a `concurrent_vector` object does not move existing elements if it allocates more memory."},{"pos":[12487,12542],"content":"<bpt id=\"p1\">&lt;a name=\"cbegin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_vector::cbegin Method","linkify":"<a name=\"cbegin\"></a>  concurrent_vector::cbegin Method","source":"<a name=\"cbegin\"></a>  concurrent_vector::cbegin Method"},{"content":"Returns an iterator of type <ph id=\"ph1\">`const_iterator`</ph> to the beginning of the concurrent vector.","pos":[12546,12633],"source":"Returns an iterator of type `const_iterator` to the beginning of the concurrent vector."},{"content":"This method is concurrency-safe.","pos":[12634,12666]},{"pos":[12720,12732],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[12736,12815],"content":"An iterator of type <ph id=\"ph1\">`const_iterator`</ph> to the beginning of the concurrent vector.","source":"An iterator of type `const_iterator` to the beginning of the concurrent vector."},{"pos":[12825,12876],"content":"<bpt id=\"p1\">&lt;a name=\"cend\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_vector::cend Method","linkify":"<a name=\"cend\"></a>  concurrent_vector::cend Method","source":"<a name=\"cend\"></a>  concurrent_vector::cend Method"},{"content":"Returns an iterator of type <ph id=\"ph1\">`const_iterator`</ph> to the end of the concurrent vector.","pos":[12880,12961],"source":"Returns an iterator of type `const_iterator` to the end of the concurrent vector."},{"content":"This method is concurrency-safe.","pos":[12962,12994]},{"pos":[13046,13058],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[13062,13135],"content":"An iterator of type <ph id=\"ph1\">`const_iterator`</ph> to the end of the concurrent vector.","source":"An iterator of type `const_iterator` to the end of the concurrent vector."},{"pos":[13145,13198],"content":"<bpt id=\"p1\">&lt;a name=\"clear\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_vector::clear Method","linkify":"<a name=\"clear\"></a>  concurrent_vector::clear Method","source":"<a name=\"clear\"></a>  concurrent_vector::clear Method"},{"content":"Erases all elements in the concurrent vector.","pos":[13202,13247]},{"content":"This method is not concurrency-safe.","pos":[13248,13284]},{"pos":[13321,13328],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`clear`</ph> is not concurrency-safe.","pos":[13332,13364],"source":"`clear` is not concurrency-safe."},{"content":"You must ensure that no other threads are invoking methods on the concurrent vector when you call this method.","pos":[13365,13475]},{"content":"<ph id=\"ph1\">`clear`</ph> does not free internal arrays.","pos":[13476,13514],"source":"`clear` does not free internal arrays."},{"content":"To free internal arrays, call the function <ph id=\"ph1\">`shrink_to_fit`</ph> after <ph id=\"ph2\">`clear`</ph>.","pos":[13515,13588],"source":" To free internal arrays, call the function `shrink_to_fit` after `clear`."},{"pos":[13598,13667],"content":"<bpt id=\"p1\">&lt;a name=\"ctor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_vector::concurrent_vector Constructor","linkify":"<a name=\"ctor\"></a>  concurrent_vector::concurrent_vector Constructor","source":"<a name=\"ctor\"></a>  concurrent_vector::concurrent_vector Constructor"},{"content":"Constructs a concurrent vector.","pos":[13671,13702]},{"pos":[14367,14377],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The allocator type of the source vector.","pos":[14388,14428]},{"content":"The type of the input iterator.","pos":[14455,14486]},{"content":"The allocator class to use with this object.","pos":[14502,14546]},{"content":"The source <ph id=\"ph1\">`concurrent_vector`</ph> object to copy or move elements from.","pos":[14566,14634],"source":" The source `concurrent_vector` object to copy or move elements from."},{"content":"The initial capacity of the <ph id=\"ph1\">`concurrent_vector`</ph> object.","pos":[14649,14704],"source":" The initial capacity of the `concurrent_vector` object."},{"content":"The value of elements in the constructed object.","pos":[14722,14770]},{"content":"Position of the first element in the range of elements to be copied.","pos":[14789,14857]},{"content":"Position of the first element beyond the range of elements to be copied.","pos":[14874,14946]},{"pos":[14956,14963],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[14967,15042],"content":"All constructors store an allocator object <ph id=\"ph1\">`_Al`</ph> and initialize the vector.","source":"All constructors store an allocator object `_Al` and initialize the vector."},{"content":"The first constructor specify an empty initial vector and explicitly specifies the allocator type.","pos":[15049,15147]},{"content":"to be used.","pos":[15148,15159]},{"pos":[15166,15250],"content":"The second and third constructors specify a copy of the concurrent vector <ph id=\"ph1\">`_Vector`</ph>.","source":"The second and third constructors specify a copy of the concurrent vector `_Vector`."},{"pos":[15257,15332],"content":"The fourth constructor specifies a move of the concurrent vector <ph id=\"ph1\">`_Vector`</ph>.","source":"The fourth constructor specifies a move of the concurrent vector `_Vector`."},{"pos":[15339,15461],"content":"The fifth constructor specifies a repetition of a specified number ( <ph id=\"ph1\">`_N`</ph>) of elements of the default value for class <ph id=\"ph2\">`T`</ph>.","source":"The fifth constructor specifies a repetition of a specified number ( `_N`) of elements of the default value for class `T`."},{"pos":[15468,15550],"content":"The sixth constructor specifies a repetition of ( <ph id=\"ph1\">`_N`</ph>) elements of value <ph id=\"ph2\">`_Item`</ph>.","source":"The sixth constructor specifies a repetition of ( `_N`) elements of value `_Item`."},{"pos":[15557,15646],"content":"The last constructor specifies values supplied by the iterator range [ <ph id=\"ph1\">`_Begin`</ph>, <ph id=\"ph2\">`_End`</ph>).","source":"The last constructor specifies values supplied by the iterator range [ `_Begin`, `_End`)."},{"pos":[15656,15725],"content":"<bpt id=\"p1\">&lt;a name=\"dtor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_vector::~concurrent_vector Destructor","linkify":"<a name=\"dtor\"></a>  concurrent_vector::~concurrent_vector Destructor","source":"<a name=\"dtor\"></a>  concurrent_vector::~concurrent_vector Destructor"},{"content":"Erases all elements and destroys this concurrent vector.","pos":[15729,15785]},{"pos":[15830,15887],"content":"<bpt id=\"p1\">&lt;a name=\"crbegin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_vector::crbegin Method","linkify":"<a name=\"crbegin\"></a>  concurrent_vector::crbegin Method","source":"<a name=\"crbegin\"></a>  concurrent_vector::crbegin Method"},{"content":"Returns an iterator of type <ph id=\"ph1\">`const_reverse_iterator`</ph> to the beginning of the concurrent vector.","pos":[15891,15986],"source":"Returns an iterator of type `const_reverse_iterator` to the beginning of the concurrent vector."},{"content":"This method is concurrency-safe.","pos":[15987,16019]},{"pos":[16082,16094],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16098,16185],"content":"An iterator of type <ph id=\"ph1\">`const_reverse_iterator`</ph> to the beginning of the concurrent vector.","source":"An iterator of type `const_reverse_iterator` to the beginning of the concurrent vector."},{"pos":[16195,16248],"content":"<bpt id=\"p1\">&lt;a name=\"crend\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_vector::crend Method","linkify":"<a name=\"crend\"></a>  concurrent_vector::crend Method","source":"<a name=\"crend\"></a>  concurrent_vector::crend Method"},{"content":"Returns an iterator of type <ph id=\"ph1\">`const_reverse_iterator`</ph> to the end of the concurrent vector.","pos":[16252,16341],"source":"Returns an iterator of type `const_reverse_iterator` to the end of the concurrent vector."},{"content":"This method is concurrency-safe.","pos":[16342,16374]},{"pos":[16435,16447],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16451,16532],"content":"An iterator of type <ph id=\"ph1\">`const_reverse_iterator`</ph> to the end of the concurrent vector.","source":"An iterator of type `const_reverse_iterator` to the end of the concurrent vector."},{"pos":[16542,16595],"content":"<bpt id=\"p1\">&lt;a name=\"empty\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_vector::empty Method","linkify":"<a name=\"empty\"></a>  concurrent_vector::empty Method","source":"<a name=\"empty\"></a>  concurrent_vector::empty Method"},{"content":"Tests if the concurrent vector is empty at the time this method is called.","pos":[16599,16673]},{"content":"This method is concurrency-safe.","pos":[16674,16706]},{"pos":[16749,16761],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16765,16853],"content":"<ph id=\"ph1\">`true`</ph> if the vector was empty at the moment the function was called, <ph id=\"ph2\">`false`</ph> otherwise.","source":"`true` if the vector was empty at the moment the function was called, `false` otherwise."},{"pos":[16863,16912],"content":"<bpt id=\"p1\">&lt;a name=\"end\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_vector::end Method","linkify":"<a name=\"end\"></a>  concurrent_vector::end Method","source":"<a name=\"end\"></a>  concurrent_vector::end Method"},{"content":"Returns an iterator of type <ph id=\"ph1\">`iterator`</ph> or <ph id=\"ph2\">`const_iterator`</ph> to the end of the concurrent vector.","pos":[16916,17011],"source":"Returns an iterator of type `iterator` or `const_iterator` to the end of the concurrent vector."},{"content":"This method is concurrency-safe.","pos":[17012,17044]},{"pos":[17112,17124],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[17128,17215],"content":"An iterator of type <ph id=\"ph1\">`iterator`</ph> or <ph id=\"ph2\">`const_iterator`</ph> to the end of the concurrent vector.","source":"An iterator of type `iterator` or `const_iterator` to the end of the concurrent vector."},{"pos":[17225,17278],"content":"<bpt id=\"p1\">&lt;a name=\"front\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_vector::front Method","linkify":"<a name=\"front\"></a>  concurrent_vector::front Method","source":"<a name=\"front\"></a>  concurrent_vector::front Method"},{"content":"Returns a reference or a <ph id=\"ph1\">`const`</ph> reference to the first element in the concurrent vector.","pos":[17282,17371],"source":"Returns a reference or a `const` reference to the first element in the concurrent vector."},{"content":"If the concurrent vector is empty, the return value is undefined.","pos":[17372,17437]},{"content":"This method is concurrency-safe.","pos":[17438,17470]},{"pos":[17544,17556],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[17560,17641],"content":"A reference or a <ph id=\"ph1\">`const`</ph> reference to the first element in the concurrent vector.","source":"A reference or a `const` reference to the first element in the concurrent vector."},{"pos":[17651,17720],"content":"<bpt id=\"p1\">&lt;a name=\"get_allocator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_vector::get_allocator Method","linkify":"<a name=\"get_allocator\"></a>  concurrent_vector::get_allocator Method","source":"<a name=\"get_allocator\"></a>  concurrent_vector::get_allocator Method"},{"content":"Returns a copy of the allocator used to construct the concurrent vector.","pos":[17724,17796]},{"content":"This method is concurrency-safe.","pos":[17797,17829]},{"pos":[17890,17902],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[17906,17979],"content":"A copy of the allocator used to construct the <ph id=\"ph1\">`concurrent_vector`</ph> object.","source":"A copy of the allocator used to construct the `concurrent_vector` object."},{"pos":[17989,18046],"content":"<bpt id=\"p1\">&lt;a name=\"grow_by\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_vector::grow_by Method","linkify":"<a name=\"grow_by\"></a>  concurrent_vector::grow_by Method","source":"<a name=\"grow_by\"></a>  concurrent_vector::grow_by Method"},{"content":"Grows this concurrent vector by <ph id=\"ph1\">`_Delta`</ph> elements.","pos":[18050,18100],"source":"Grows this concurrent vector by `_Delta` elements."},{"content":"This method is concurrency-safe.","pos":[18101,18133]},{"pos":[18266,18276],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of elements to append to the object.","pos":[18292,18339]},{"content":"The value to initialize the new elements with.","pos":[18357,18403]},{"pos":[18413,18425],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An iterator to first item appended.","pos":[18429,18464]},{"pos":[18474,18481],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[18485,18555],"content":"If <ph id=\"ph1\">`_Item`</ph> is not specified, the new elements are default constructed.","source":"If `_Item` is not specified, the new elements are default constructed."},{"pos":[18565,18640],"content":"<bpt id=\"p1\">&lt;a name=\"grow_to_at_least\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_vector::grow_to_at_least Method","linkify":"<a name=\"grow_to_at_least\"></a>  concurrent_vector::grow_to_at_least Method","source":"<a name=\"grow_to_at_least\"></a>  concurrent_vector::grow_to_at_least Method"},{"content":"Grows this concurrent vector until it has at least <ph id=\"ph1\">`_N`</ph> elements.","pos":[18644,18709],"source":"Grows this concurrent vector until it has at least `_N` elements."},{"content":"This method is concurrency-safe.","pos":[18710,18742]},{"pos":[18806,18816],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The new minimum size for the <ph id=\"ph1\">`concurrent_vector`</ph> object.","pos":[18828,18884],"source":" The new minimum size for the `concurrent_vector` object."},{"pos":[18894,18906],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[18910,19030],"content":"An iterator that points to beginning of appended sequence, or to the element at index <ph id=\"ph1\">`_N`</ph> if no elements were appended.","source":"An iterator that points to beginning of appended sequence, or to the element at index `_N` if no elements were appended."},{"pos":[19040,19099],"content":"<bpt id=\"p1\">&lt;a name=\"max_size\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_vector::max_size Method","linkify":"<a name=\"max_size\"></a>  concurrent_vector::max_size Method","source":"<a name=\"max_size\"></a>  concurrent_vector::max_size Method"},{"content":"Returns the maximum number of elements the concurrent vector can hold.","pos":[19103,19173]},{"content":"This method is concurrency-safe.","pos":[19174,19206]},{"pos":[19257,19269],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19273,19344],"content":"The maximum number of elements the <ph id=\"ph1\">`concurrent_vector`</ph> object can hold.","source":"The maximum number of elements the `concurrent_vector` object can hold."},{"pos":[19354,19419],"content":"<bpt id=\"p1\">&lt;a name=\"operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_vector::operator= Operator","linkify":"<a name=\"operator_eq\"></a>  concurrent_vector::operator= Operator","source":"<a name=\"operator_eq\"></a>  concurrent_vector::operator= Operator"},{"content":"Assigns the contents of another <ph id=\"ph1\">`concurrent_vector`</ph> object to this one.","pos":[19423,19494],"source":"Assigns the contents of another `concurrent_vector` object to this one."},{"content":"This method is not concurrency-safe.","pos":[19495,19531]},{"pos":[19785,19795],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The allocator type of the source vector.","pos":[19806,19846]},{"content":"The source <ph id=\"ph1\">`concurrent_vector`</ph> object.","pos":[19866,19904],"source":" The source `concurrent_vector` object."},{"pos":[19914,19926],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19930,19977],"content":"A reference to this <ph id=\"ph1\">`concurrent_vector`</ph> object.","source":"A reference to this `concurrent_vector` object."},{"pos":[19987,20053],"content":"<bpt id=\"p1\">&lt;a name=\"operator_at\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_vector::operator[] Operator","linkify":"<a name=\"operator_at\"></a>  concurrent_vector::operator[] Operator","source":"<a name=\"operator_at\"></a>  concurrent_vector::operator[] Operator"},{"content":"Provides access to the element at the given index in the concurrent vector.","pos":[20057,20132]},{"content":"This method is concurrency-safe for read operations, and also while growing the vector, as long as the you have ensured that the value <ph id=\"ph1\">`_Index`</ph> is less than the size of the concurrent vector.","pos":[20133,20324],"source":" This method is concurrency-safe for read operations, and also while growing the vector, as long as the you have ensured that the value `_Index` is less than the size of the concurrent vector."},{"pos":[20440,20450],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The index of the element to be retrieved.","pos":[20466,20507]},{"pos":[20517,20529],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reference to the item at the given index.","pos":[20533,20576]},{"pos":[20586,20593],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The version of <ph id=\"ph1\">`operator []`</ph> that returns a non- <ph id=\"ph2\">`const`</ph> reference cannot be used to concurrently write to the element from different threads.","pos":[20597,20739],"source":"The version of `operator []` that returns a non- `const` reference cannot be used to concurrently write to the element from different threads."},{"content":"A different synchronization object should be used to synchronize concurrent read and write operations to the same data element.","pos":[20740,20867]},{"pos":[20874,20974],"content":"No bounds checking is performed to ensure that <ph id=\"ph1\">`_Index`</ph> is a valid index into the concurrent vector.","source":"No bounds checking is performed to ensure that `_Index` is a valid index into the concurrent vector."},{"pos":[20984,21045],"content":"<bpt id=\"p1\">&lt;a name=\"push_back\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_vector::push_back Method","linkify":"<a name=\"push_back\"></a>  concurrent_vector::push_back Method","source":"<a name=\"push_back\"></a>  concurrent_vector::push_back Method"},{"content":"Appends the given item to the end of the concurrent vector.","pos":[21049,21108]},{"content":"This method is concurrency-safe.","pos":[21109,21141]},{"pos":[21239,21249],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The value to be appended.","pos":[21264,21289]},{"pos":[21299,21311],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An iterator to item appended.","pos":[21315,21344]},{"pos":[21354,21409],"content":"<bpt id=\"p1\">&lt;a name=\"rbegin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_vector::rbegin Method","linkify":"<a name=\"rbegin\"></a>  concurrent_vector::rbegin Method","source":"<a name=\"rbegin\"></a>  concurrent_vector::rbegin Method"},{"content":"Returns an iterator of type <ph id=\"ph1\">`reverse_iterator`</ph> or <ph id=\"ph2\">`const_reverse_iterator`</ph> to the beginning of the concurrent vector.","pos":[21413,21530],"source":"Returns an iterator of type `reverse_iterator` or `const_reverse_iterator` to the beginning of the concurrent vector."},{"content":"This method is concurrency-safe.","pos":[21531,21563]},{"pos":[21653,21665],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[21669,21778],"content":"An iterator of type <ph id=\"ph1\">`reverse_iterator`</ph> or <ph id=\"ph2\">`const_reverse_iterator`</ph> to the beginning of the concurrent vector.","source":"An iterator of type `reverse_iterator` or `const_reverse_iterator` to the beginning of the concurrent vector."},{"pos":[21788,21839],"content":"<bpt id=\"p1\">&lt;a name=\"rend\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_vector::rend Method","linkify":"<a name=\"rend\"></a>  concurrent_vector::rend Method","source":"<a name=\"rend\"></a>  concurrent_vector::rend Method"},{"content":"Returns an iterator of type <ph id=\"ph1\">`reverse_iterator`</ph> or <ph id=\"ph2\">`const_reverse_iterator`</ph> to the end of the concurrent vector.","pos":[21843,21954],"source":"Returns an iterator of type `reverse_iterator` or `const_reverse_iterator` to the end of the concurrent vector."},{"content":"This method is concurrency-safe.","pos":[21955,21987]},{"pos":[22073,22085],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22089,22192],"content":"An iterator of type <ph id=\"ph1\">`reverse_iterator`</ph> or <ph id=\"ph2\">`const_reverse_iterator`</ph> to the end of the concurrent vector.","source":"An iterator of type `reverse_iterator` or `const_reverse_iterator` to the end of the concurrent vector."},{"pos":[22202,22259],"content":"<bpt id=\"p1\">&lt;a name=\"reserve\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_vector::reserve Method","linkify":"<a name=\"reserve\"></a>  concurrent_vector::reserve Method","source":"<a name=\"reserve\"></a>  concurrent_vector::reserve Method"},{"content":"Allocates enough space to grow the concurrent vector to size <ph id=\"ph1\">`_N`</ph> without having to allocate more memory later.","pos":[22263,22374],"source":"Allocates enough space to grow the concurrent vector to size `_N` without having to allocate more memory later."},{"content":"This method is not concurrency-safe.","pos":[22375,22411]},{"pos":[22462,22472],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of elements to reserve space for.","pos":[22484,22528]},{"pos":[22538,22545],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`reserve`</ph> is not concurrency-safe.","pos":[22549,22583],"source":"`reserve` is not concurrency-safe."},{"content":"You must ensure that no other threads are invoking methods on the concurrent vector when you call this method.","pos":[22584,22694]},{"content":"The capacity of the concurrent vector after the method returns may be bigger than the requested reservation.","pos":[22695,22803]},{"pos":[22813,22868],"content":"<bpt id=\"p1\">&lt;a name=\"resize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_vector::resize Method","linkify":"<a name=\"resize\"></a>  concurrent_vector::resize Method","source":"<a name=\"resize\"></a>  concurrent_vector::resize Method"},{"content":"Changes the size of the concurrent vector to the requested size, deleting or adding elements as necessary.","pos":[22872,22978]},{"content":"This method is not concurrency-safe.","pos":[22979,23015]},{"pos":[23121,23131],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The new size of the concurrent_vector.","pos":[23143,23181]},{"content":"The value of new elements added to the vector if the new size is larger than the original size.","pos":[23197,23292]},{"content":"If the value is omitted, the new objects are assigned the default value for their type.","pos":[23293,23380]},{"pos":[23390,23397],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the size of the container is less than the requested size, elements are added to the vector until it reaches the requested size.","pos":[23401,23532]},{"content":"If the size of the container is larger than the requested size, the elements closest to the end of the container are deleted until the container reaches the size <ph id=\"ph1\">`_N`</ph>.","pos":[23533,23700],"source":" If the size of the container is larger than the requested size, the elements closest to the end of the container are deleted until the container reaches the size `_N`."},{"content":"If the present size of the container is the same as the requested size, no action is taken.","pos":[23701,23792]},{"content":"<ph id=\"ph1\">`resize`</ph> is not concurrency safe.","pos":[23799,23832],"source":"`resize` is not concurrency safe."},{"content":"You must ensure that no other threads are invoking methods on the concurrent vector when you call this method.","pos":[23833,23943]},{"pos":[23953,24022],"content":"<bpt id=\"p1\">&lt;a name=\"shrink_to_fit\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_vector::shrink_to_fit Method","linkify":"<a name=\"shrink_to_fit\"></a>  concurrent_vector::shrink_to_fit Method","source":"<a name=\"shrink_to_fit\"></a>  concurrent_vector::shrink_to_fit Method"},{"content":"Compacts the internal representation of the concurrent vector to reduce fragmentation and optimize memory usage.","pos":[24026,24138]},{"content":"This method is not concurrency-safe.","pos":[24139,24175]},{"pos":[24220,24227],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method will internally re-allocate memory move elements around, invalidating all the iterators.","pos":[24231,24331]},{"content":"<ph id=\"ph1\">`shrink_to_fit`</ph> is not concurrency-safe.","pos":[24332,24372],"source":"`shrink_to_fit` is not concurrency-safe."},{"content":"You must ensure that no other threads are invoking methods on the concurrent vector when you call this function.","pos":[24373,24485]},{"pos":[24495,24546],"content":"<bpt id=\"p1\">&lt;a name=\"size\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_vector::size Method","linkify":"<a name=\"size\"></a>  concurrent_vector::size Method","source":"<a name=\"size\"></a>  concurrent_vector::size Method"},{"content":"Returns the number of elements in the concurrent vector.","pos":[24550,24606]},{"content":"This method is concurrency-safe.","pos":[24607,24639]},{"pos":[24686,24698],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[24702,24760],"content":"The number of elements in this <ph id=\"ph1\">`concurrent_vector`</ph> object.","source":"The number of elements in this `concurrent_vector` object."},{"pos":[24770,24777],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned size is guaranteed to include all elements appended by calls to the function <ph id=\"ph1\">`push_back`</ph>, or grow operations that have completed prior to invoking this method.","pos":[24781,24953],"source":"The returned size is guaranteed to include all elements appended by calls to the function `push_back`, or grow operations that have completed prior to invoking this method."},{"content":"However, it may also include elements that are allocated but still under construction by concurrent calls to any of the growth methods.","pos":[24954,25089]},{"pos":[25099,25150],"content":"<bpt id=\"p1\">&lt;a name=\"swap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  concurrent_vector::swap Method","linkify":"<a name=\"swap\"></a>  concurrent_vector::swap Method","source":"<a name=\"swap\"></a>  concurrent_vector::swap Method"},{"content":"Swaps the contents of two concurrent vectors.","pos":[25154,25199]},{"content":"This method is not concurrency-safe.","pos":[25200,25236]},{"pos":[25298,25308],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`concurrent_vector`</ph> object to swap contents with.","pos":[25325,25378],"source":" The `concurrent_vector` object to swap contents with."},{"pos":[25387,25395],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>concurrency Namespace<ept id=\"p1\">](concurrency-namespace.md)</ept><ph id=\"ph1\"> </ph>","pos":[25399,25449],"source":"[concurrency Namespace](concurrency-namespace.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Parallel Containers and Objects<ept id=\"p1\">](../../../parallel/concrt/parallel-containers-and-objects.md)</ept>","pos":[25452,25547],"source":" [Parallel Containers and Objects](../../../parallel/concrt/parallel-containers-and-objects.md)"}],"content":"---\ntitle: \"concurrent_vector Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"concurrent_vector/Concurrency::concurrent_vector\"\n  - \"concurrent_vector/concurrency::concurrent_vector\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"concurrent_vector class\"\nms.assetid: a217b4ac-af2b-4d41-94eb-09a75ee28622\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# concurrent_vector Class\nThe `concurrent_vector` class is a sequence container class that allows random access to any element. It enables concurrency-safe append, element access, iterator access, and iterator traversal operations.  \n  \n## Syntax  \n  \n```\ntemplate<typename T, class _Ax>\nclass concurrent_vector: protected details::_Allocator_base<T,\n    _Ax>,\n private details::_Concurrent_vector_base_v4;\n```  \n  \n#### Parameters  \n `T`  \n The data type of the elements to be stored in the vector.  \n  \n `_Ax`  \n The type that represents the stored allocator object that encapsulates details about the allocation and deallocation of memory for the concurrent vector. This argument is optional and the default value is `allocator<``T``>`.  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`allocator_type`|A type that represents the allocator class for the concurrent vector.|  \n|`const_iterator`|A type that provides a random-access iterator that can read a `const` element in a concurrent vector.|  \n|`const_pointer`|A type that provides a pointer to a `const` element in a concurrent vector.|  \n|`const_reference`|A type that provides a reference to a `const` element stored in a concurrent vector for reading and performing `const` operations.|  \n|`const_reverse_iterator`|A type that provides a random-access iterator that can read any `const` element in the concurrent vector.|  \n|`difference_type`|A type that provides the signed distance between two elements in a concurrent vector.|  \n|`iterator`|A type that provides a random-access iterator that can read any element in a concurrent vector. Modification of an element using the iterator is not concurrency-safe.|  \n|`pointer`|A type that provides a pointer to an element in a concurrent vector.|  \n|`reference`|A type that provides a reference to an element stored in a concurrent vector.|  \n|`reverse_iterator`|A type that provides a random-access iterator that can read any element in a reversed concurrent vector. Modification of an element using the iterator is not concurrency-safe.|  \n|`size_type`|A type that counts the number of elements in a concurrent vector.|  \n|`value_type`|A type that represents the data type stored in a concurrent vector.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[concurrent_vector::concurrent_vector Constructor](#ctor)|Overloaded. Constructs a concurrent vector.|  \n|[concurrent_vector::~concurrent_vector Destructor](#dtor)|Erases all elements and destroys this concurrent vector.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[concurrent_vector::assign Method](#assign)|Overloaded. Erases the elements of the concurrent vector and assigns to it either `_N` copies of `_Item`, or values specified by the iterator range [ `_Begin`, `_End`). This method is not concurrency-safe.|  \n|[concurrent_vector::at Method](#at)|Overloaded. Provides access to the element at the given index in the concurrent vector. This method is concurrency-safe for read operations, and also while growing the vector, as long as you have ensured that the value `_Index` is less than the size of the concurrent vector.|  \n|[concurrent_vector::back Method](#back)|Overloaded. Returns a reference or a `const` reference to the last element in the concurrent vector. If the concurrent vector is empty, the return value is undefined. This method is concurrency-safe.|  \n|[concurrent_vector::begin Method](#begin)|Overloaded. Returns an iterator of type `iterator` or `const_iterator` to the beginning of the concurrent vector. This method is concurrency-safe.|  \n|[concurrent_vector::capacity Method](#capacity)|Returns the maximum size to which the concurrent vector can grow without having to allocate more memory. This method is concurrency-safe.|  \n|[concurrent_vector::cbegin Method](#cbegin)|Returns an iterator of type `const_iterator` to the beginning of the concurrent vector. This method is concurrency-safe.|  \n|[concurrent_vector::cend Method](#cend)|Returns an iterator of type `const_iterator` to the end of the concurrent vector. This method is concurrency-safe.|  \n|[concurrent_vector::clear Method](#clear)|Erases all elements in the concurrent vector. This method is not concurrency-safe.|  \n|[concurrent_vector::crbegin Method](#crbegin)|Returns an iterator of type `const_reverse_iterator` to the beginning of the concurrent vector. This method is concurrency-safe.|  \n|[concurrent_vector::crend Method](#crend)|Returns an iterator of type `const_reverse_iterator` to the end of the concurrent vector. This method is concurrency-safe.|  \n|[concurrent_vector::empty Method](#empty)|Tests if the concurrent vector is empty at the time this method is called. This method is concurrency-safe.|  \n|[concurrent_vector::end Method](#end)|Overloaded. Returns an iterator of type `iterator` or `const_iterator` to the end of the concurrent vector. This method is concurrency-safe.|  \n|[concurrent_vector::front Method](#front)|Overloaded. Returns a reference or a `const` reference to the first element in the concurrent vector. If the concurrent vector is empty, the return value is undefined. This method is concurrency-safe.|  \n|[concurrent_vector::get_allocator Method](#get_allocator)|Returns a copy of the allocator used to construct the concurrent vector. This method is concurrency-safe.|  \n|[concurrent_vector::grow_by Method](#grow_by)|Overloaded. Grows this concurrent vector by `_Delta` elements. This method is concurrency-safe.|  \n|[concurrent_vector::grow_to_at_least Method](#grow_to_at_least)|Grows this concurrent vector until it has at least `_N` elements. This method is concurrency-safe.|  \n|[concurrent_vector::max_size Method](#max_size)|Returns the maximum number of elements the concurrent vector can hold. This method is concurrency-safe.|  \n|[concurrent_vector::push_back Method](#push_back)|Overloaded. Appends the given item to the end of the concurrent vector. This method is concurrency-safe.|  \n|[concurrent_vector::rbegin Method](#rbegin)|Overloaded. Returns an iterator of type `reverse_iterator` or `const_reverse_iterator` to the beginning of the concurrent vector. This method is concurrency-safe.|  \n|[concurrent_vector::rend Method](#rend)|Overloaded. Returns an iterator of type `reverse_iterator` or `const_reverse_iterator` to the end of the concurrent vector. This method is concurrency-safe.|  \n|[concurrent_vector::reserve Method](#reserve)|Allocates enough space to grow the concurrent vector to size `_N` without having to allocate more memory later. This method is not concurrency-safe.|  \n|[concurrent_vector::resize Method](#resize)|Overloaded. Changes the size of the concurrent vector to the requested size, deleting or adding elements as necessary. This method is not concurrency-safe.|  \n|[concurrent_vector::shrink_to_fit Method](#shrink_to_fit)|Compacts the internal representation of the concurrent vector to reduce fragmentation and optimize memory usage. This method is not concurrency-safe.|  \n|[concurrent_vector::size Method](#size)|Returns the number of elements in the concurrent vector. This method is concurrency-safe.|  \n|[concurrent_vector::swap Method](#swap)|Swaps the contents of two concurrent vectors. This method is not concurrency-safe.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[concurrent_vector::operator[] Operator](#operator_at)|Overloaded. Provides access to the element at the given index in the concurrent vector. This method is concurrency-safe for read operations, and also while growing the vector, as long as the you have ensured that the value `_Index` is less than the size of the concurrent vector.|  \n|[concurrent_vector::operator= Operator](#operator_eq)|Overloaded. Assigns the contents of another `concurrent_vector` object to this one. This method is not concurrency-safe.|  \n  \n## Remarks  \n For detailed information on the `concurrent_vector` class, see [Parallel Containers and Objects](../../../parallel/concrt/parallel-containers-and-objects.md).  \n  \n## Inheritance Hierarchy  \n `_Concurrent_vector_base_v4`  \n  \n `_Allocator_base`  \n  \n `concurrent_vector`  \n  \n## Requirements  \n **Header:** concurrent_vector.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"assign\"></a>  concurrent_vector::assign Method  \n Erases the elements of the concurrent vector and assigns to it either `_N` copies of `_Item`, or values specified by the iterator range [ `_Begin`, `_End`). This method is not concurrency-safe.  \n  \n```\nvoid assign(\n    size_type _N,\n    const_reference _Item);\n\ntemplate<class _InputIterator>\nvoid assign(_InputIterator _Begin,\n    _InputIterator _End);\n```  \n  \n### Parameters  \n `_InputIterator`  \n The type of the specified iterator.  \n  \n `_N`  \n The number of items to copy into the concurrent vector.  \n  \n `_Item`  \n Reference to a value used to fill the concurrent vector.  \n  \n `_Begin`  \n An iterator to the first element of the source range.  \n  \n `_End`  \n An iterator to one past the last element of the source range.  \n  \n### Remarks  \n `assign` is not concurrency-safe. You must ensure that no other threads are invoking methods on the concurrent vector when you call this method.  \n  \n##  <a name=\"at\"></a>  concurrent_vector::at Method  \n Provides access to the element at the given index in the concurrent vector. This method is concurrency-safe for read operations, and also while growing the vector, as long as you have ensured that the value `_Index` is less than the size of the concurrent vector.  \n  \n```\nreference at(size_type _Index);\n\nconst_reference at(size_type _Index) const;\n```  \n  \n### Parameters  \n `_Index`  \n The index of the element to be retrieved.  \n  \n### Return Value  \n A reference to the item at the given index.  \n  \n### Remarks  \n The version of the function `at` that returns a non- `const` reference cannot be used to concurrently write to the element from different threads. A different synchronization object should be used to synchronize concurrent read and write operations to the same data element.  \n  \n The method throws `out_of_range` if `_Index` is greater than or equal to the size of the concurrent vector, and `range_error` if the index is for a broken portion of the vector. For details on how a vector can become broken, see [Parallel Containers and Objects](../../../parallel/concrt/parallel-containers-and-objects.md).  \n  \n##  <a name=\"back\"></a>  concurrent_vector::back Method  \n Returns a reference or a `const` reference to the last element in the concurrent vector. If the concurrent vector is empty, the return value is undefined. This method is concurrency-safe.  \n  \n```\nreference back();\n\nconst_reference back() const;\n```  \n  \n### Return Value  \n A reference or a `const` reference to the last element in the concurrent vector.  \n  \n##  <a name=\"begin\"></a>  concurrent_vector::begin Method  \n Returns an iterator of type `iterator` or `const_iterator` to the beginning of the concurrent vector. This method is concurrency-safe.  \n  \n```\niterator begin();\n\nconst_iterator begin() const;\n```  \n  \n### Return Value  \n An iterator of type `iterator` or `const_iterator` to the beginning of the concurrent vector.  \n  \n##  <a name=\"capacity\"></a>  concurrent_vector::capacity Method  \n Returns the maximum size to which the concurrent vector can grow without having to allocate more memory. This method is concurrency-safe.  \n  \n```\nsize_type capacity() const;\n```  \n  \n### Return Value  \n The maximum size to which the concurrent vector can grow without having to allocate more memory.  \n  \n### Remarks  \n Unlike an STL `vector`, a `concurrent_vector` object does not move existing elements if it allocates more memory.  \n  \n##  <a name=\"cbegin\"></a>  concurrent_vector::cbegin Method  \n Returns an iterator of type `const_iterator` to the beginning of the concurrent vector. This method is concurrency-safe.  \n  \n```\nconst_iterator cbegin() const;\n```  \n  \n### Return Value  \n An iterator of type `const_iterator` to the beginning of the concurrent vector.  \n  \n##  <a name=\"cend\"></a>  concurrent_vector::cend Method  \n Returns an iterator of type `const_iterator` to the end of the concurrent vector. This method is concurrency-safe.  \n  \n```\nconst_iterator cend() const;\n```  \n  \n### Return Value  \n An iterator of type `const_iterator` to the end of the concurrent vector.  \n  \n##  <a name=\"clear\"></a>  concurrent_vector::clear Method  \n Erases all elements in the concurrent vector. This method is not concurrency-safe.  \n  \n```\nvoid clear();\n```  \n  \n### Remarks  \n `clear` is not concurrency-safe. You must ensure that no other threads are invoking methods on the concurrent vector when you call this method. `clear` does not free internal arrays. To free internal arrays, call the function `shrink_to_fit` after `clear`.  \n  \n##  <a name=\"ctor\"></a>  concurrent_vector::concurrent_vector Constructor  \n Constructs a concurrent vector.  \n  \n```\nexplicit concurrent_vector(\n    const allocator_type& _Al = allocator_type());\n\nconcurrent_vector(\n    const concurrent_vector& _Vector);\n\ntemplate<class M>\nconcurrent_vector(\n    const concurrent_vector<T,\n    M>& _Vector,\n    const allocator_type& _Al = allocator_type());\n\nconcurrent_vector(\n    concurrent_vector&& _Vector);\n\nexplicit concurrent_vector(\n    size_type _N);\n\nconcurrent_vector(\n    size_type _N,\n    const_reference _Item,\n    const allocator_type& _Al = allocator_type());\n\ntemplate<class _InputIterator>\nconcurrent_vector(_InputIterator _Begin,\n    _InputIterator _End,\n    const allocator_type& _Al = allocator_type());\n```  \n  \n### Parameters  \n `M`  \n The allocator type of the source vector.  \n  \n `_InputIterator`  \n The type of the input iterator.  \n  \n `_Al`  \n The allocator class to use with this object.  \n  \n `_Vector`  \n The source `concurrent_vector` object to copy or move elements from.  \n  \n `_N`  \n The initial capacity of the `concurrent_vector` object.  \n  \n `_Item`  \n The value of elements in the constructed object.  \n  \n `_Begin`  \n Position of the first element in the range of elements to be copied.  \n  \n `_End`  \n Position of the first element beyond the range of elements to be copied.  \n  \n### Remarks  \n All constructors store an allocator object `_Al` and initialize the vector.  \n  \n The first constructor specify an empty initial vector and explicitly specifies the allocator type. to be used.  \n  \n The second and third constructors specify a copy of the concurrent vector `_Vector`.  \n  \n The fourth constructor specifies a move of the concurrent vector `_Vector`.  \n  \n The fifth constructor specifies a repetition of a specified number ( `_N`) of elements of the default value for class `T`.  \n  \n The sixth constructor specifies a repetition of ( `_N`) elements of value `_Item`.  \n  \n The last constructor specifies values supplied by the iterator range [ `_Begin`, `_End`).  \n  \n##  <a name=\"dtor\"></a>  concurrent_vector::~concurrent_vector Destructor  \n Erases all elements and destroys this concurrent vector.  \n  \n```\n~concurrent_vector();\n```  \n  \n##  <a name=\"crbegin\"></a>  concurrent_vector::crbegin Method  \n Returns an iterator of type `const_reverse_iterator` to the beginning of the concurrent vector. This method is concurrency-safe.  \n  \n```\nconst_reverse_iterator crbegin() const;\n```  \n  \n### Return Value  \n An iterator of type `const_reverse_iterator` to the beginning of the concurrent vector.  \n  \n##  <a name=\"crend\"></a>  concurrent_vector::crend Method  \n Returns an iterator of type `const_reverse_iterator` to the end of the concurrent vector. This method is concurrency-safe.  \n  \n```\nconst_reverse_iterator crend() const;\n```  \n  \n### Return Value  \n An iterator of type `const_reverse_iterator` to the end of the concurrent vector.  \n  \n##  <a name=\"empty\"></a>  concurrent_vector::empty Method  \n Tests if the concurrent vector is empty at the time this method is called. This method is concurrency-safe.  \n  \n```\nbool empty() const;\n```  \n  \n### Return Value  \n `true` if the vector was empty at the moment the function was called, `false` otherwise.  \n  \n##  <a name=\"end\"></a>  concurrent_vector::end Method  \n Returns an iterator of type `iterator` or `const_iterator` to the end of the concurrent vector. This method is concurrency-safe.  \n  \n```\niterator end();\n\nconst_iterator end() const;\n```  \n  \n### Return Value  \n An iterator of type `iterator` or `const_iterator` to the end of the concurrent vector.  \n  \n##  <a name=\"front\"></a>  concurrent_vector::front Method  \n Returns a reference or a `const` reference to the first element in the concurrent vector. If the concurrent vector is empty, the return value is undefined. This method is concurrency-safe.  \n  \n```\nreference front();\n\nconst_reference front() const;\n```  \n  \n### Return Value  \n A reference or a `const` reference to the first element in the concurrent vector.  \n  \n##  <a name=\"get_allocator\"></a>  concurrent_vector::get_allocator Method  \n Returns a copy of the allocator used to construct the concurrent vector. This method is concurrency-safe.  \n  \n```\nallocator_type get_allocator() const;\n```  \n  \n### Return Value  \n A copy of the allocator used to construct the `concurrent_vector` object.  \n  \n##  <a name=\"grow_by\"></a>  concurrent_vector::grow_by Method  \n Grows this concurrent vector by `_Delta` elements. This method is concurrency-safe.  \n  \n```\niterator grow_by(\n    size_type _Delta);\n\niterator grow_by(\n    size_type _Delta,\n    const_reference _Item);\n```  \n  \n### Parameters  \n `_Delta`  \n The number of elements to append to the object.  \n  \n `_Item`  \n The value to initialize the new elements with.  \n  \n### Return Value  \n An iterator to first item appended.  \n  \n### Remarks  \n If `_Item` is not specified, the new elements are default constructed.  \n  \n##  <a name=\"grow_to_at_least\"></a>  concurrent_vector::grow_to_at_least Method  \n Grows this concurrent vector until it has at least `_N` elements. This method is concurrency-safe.  \n  \n```\niterator grow_to_at_least(size_type _N);\n```  \n  \n### Parameters  \n `_N`  \n The new minimum size for the `concurrent_vector` object.  \n  \n### Return Value  \n An iterator that points to beginning of appended sequence, or to the element at index `_N` if no elements were appended.  \n  \n##  <a name=\"max_size\"></a>  concurrent_vector::max_size Method  \n Returns the maximum number of elements the concurrent vector can hold. This method is concurrency-safe.  \n  \n```\nsize_type max_size() const;\n```  \n  \n### Return Value  \n The maximum number of elements the `concurrent_vector` object can hold.  \n  \n##  <a name=\"operator_eq\"></a>  concurrent_vector::operator= Operator  \n Assigns the contents of another `concurrent_vector` object to this one. This method is not concurrency-safe.  \n  \n```\nconcurrent_vector& operator= (\n    const concurrent_vector& _Vector);\n\ntemplate<class M>\nconcurrent_vector& operator= (\n    const concurrent_vector<T, M>& _Vector);\n\nconcurrent_vector& operator= (\n    concurrent_vector&& _Vector);\n```  \n  \n### Parameters  \n `M`  \n The allocator type of the source vector.  \n  \n `_Vector`  \n The source `concurrent_vector` object.  \n  \n### Return Value  \n A reference to this `concurrent_vector` object.  \n  \n##  <a name=\"operator_at\"></a>  concurrent_vector::operator[] Operator  \n Provides access to the element at the given index in the concurrent vector. This method is concurrency-safe for read operations, and also while growing the vector, as long as the you have ensured that the value `_Index` is less than the size of the concurrent vector.  \n  \n```\nreference operator[](size_type _index);\n\nconst_reference operator[](size_type _index) const;\n```  \n  \n### Parameters  \n `_Index`  \n The index of the element to be retrieved.  \n  \n### Return Value  \n A reference to the item at the given index.  \n  \n### Remarks  \n The version of `operator []` that returns a non- `const` reference cannot be used to concurrently write to the element from different threads. A different synchronization object should be used to synchronize concurrent read and write operations to the same data element.  \n  \n No bounds checking is performed to ensure that `_Index` is a valid index into the concurrent vector.  \n  \n##  <a name=\"push_back\"></a>  concurrent_vector::push_back Method  \n Appends the given item to the end of the concurrent vector. This method is concurrency-safe.  \n  \n```\niterator push_back(const_reference _Item);\n\niterator push_back(T&& _Item);\n```  \n  \n### Parameters  \n `_Item`  \n The value to be appended.  \n  \n### Return Value  \n An iterator to item appended.  \n  \n##  <a name=\"rbegin\"></a>  concurrent_vector::rbegin Method  \n Returns an iterator of type `reverse_iterator` or `const_reverse_iterator` to the beginning of the concurrent vector. This method is concurrency-safe.  \n  \n```\nreverse_iterator rbegin();\n\nconst_reverse_iterator rbegin() const;\n```  \n  \n### Return Value  \n An iterator of type `reverse_iterator` or `const_reverse_iterator` to the beginning of the concurrent vector.  \n  \n##  <a name=\"rend\"></a>  concurrent_vector::rend Method  \n Returns an iterator of type `reverse_iterator` or `const_reverse_iterator` to the end of the concurrent vector. This method is concurrency-safe.  \n  \n```\nreverse_iterator rend();\n\nconst_reverse_iterator rend() const;\n```  \n  \n### Return Value  \n An iterator of type `reverse_iterator` or `const_reverse_iterator` to the end of the concurrent vector.  \n  \n##  <a name=\"reserve\"></a>  concurrent_vector::reserve Method  \n Allocates enough space to grow the concurrent vector to size `_N` without having to allocate more memory later. This method is not concurrency-safe.  \n  \n```\nvoid reserve(size_type _N);\n```  \n  \n### Parameters  \n `_N`  \n The number of elements to reserve space for.  \n  \n### Remarks  \n `reserve` is not concurrency-safe. You must ensure that no other threads are invoking methods on the concurrent vector when you call this method. The capacity of the concurrent vector after the method returns may be bigger than the requested reservation.  \n  \n##  <a name=\"resize\"></a>  concurrent_vector::resize Method  \n Changes the size of the concurrent vector to the requested size, deleting or adding elements as necessary. This method is not concurrency-safe.  \n  \n```\nvoid resize(\n    size_type _N);\n\nvoid resize(\n    size_type _N,\n    const T& val);\n```  \n  \n### Parameters  \n `_N`  \n The new size of the concurrent_vector.  \n  \n `val`  \n The value of new elements added to the vector if the new size is larger than the original size. If the value is omitted, the new objects are assigned the default value for their type.  \n  \n### Remarks  \n If the size of the container is less than the requested size, elements are added to the vector until it reaches the requested size. If the size of the container is larger than the requested size, the elements closest to the end of the container are deleted until the container reaches the size `_N`. If the present size of the container is the same as the requested size, no action is taken.  \n  \n `resize` is not concurrency safe. You must ensure that no other threads are invoking methods on the concurrent vector when you call this method.  \n  \n##  <a name=\"shrink_to_fit\"></a>  concurrent_vector::shrink_to_fit Method  \n Compacts the internal representation of the concurrent vector to reduce fragmentation and optimize memory usage. This method is not concurrency-safe.  \n  \n```\nvoid shrink_to_fit();\n```  \n  \n### Remarks  \n This method will internally re-allocate memory move elements around, invalidating all the iterators. `shrink_to_fit` is not concurrency-safe. You must ensure that no other threads are invoking methods on the concurrent vector when you call this function.  \n  \n##  <a name=\"size\"></a>  concurrent_vector::size Method  \n Returns the number of elements in the concurrent vector. This method is concurrency-safe.  \n  \n```\nsize_type size() const;\n```  \n  \n### Return Value  \n The number of elements in this `concurrent_vector` object.  \n  \n### Remarks  \n The returned size is guaranteed to include all elements appended by calls to the function `push_back`, or grow operations that have completed prior to invoking this method. However, it may also include elements that are allocated but still under construction by concurrent calls to any of the growth methods.  \n  \n##  <a name=\"swap\"></a>  concurrent_vector::swap Method  \n Swaps the contents of two concurrent vectors. This method is not concurrency-safe.  \n  \n```\nvoid swap(concurrent_vector& _Vector);\n```  \n  \n### Parameters  \n `_Vector`  \n The `concurrent_vector` object to swap contents with.  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)   \n [Parallel Containers and Objects](../../../parallel/concrt/parallel-containers-and-objects.md)\n\n\n\n"}