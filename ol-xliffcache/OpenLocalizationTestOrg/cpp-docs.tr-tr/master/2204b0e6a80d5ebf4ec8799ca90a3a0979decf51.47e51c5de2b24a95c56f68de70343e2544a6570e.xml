{"nodes":[{"pos":[12,63],"content":"3.1.3 omp_get_max_threads Function | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"3.1.3 omp_get_max_threads Function | Microsoft Docs","pos":[0,51]}]},{"content":"3.1.3 omp_get_max_threads Function","pos":[543,577]},{"content":"The <bpt id=\"p1\">**</bpt>omp_get_max_threads<ept id=\"p1\">**</ept> function returns an integer that is guaranteed to be at least as large as the number of threads that would be used to form a team if a parallel region without a <bpt id=\"p2\">**</bpt>num_threads<ept id=\"p2\">**</ept> clause were to be encountered at that point in the code.","pos":[578,839],"source":"The **omp_get_max_threads** function returns an integer that is guaranteed to be at least as large as the number of threads that would be used to form a team if a parallel region without a **num_threads** clause were to be encountered at that point in the code."},{"content":"The format is as follows:","pos":[840,865]},{"pos":[939,1017],"content":"The following expresses a lower bound on the value of <bpt id=\"p1\">**</bpt>omp_get_max_threads<ept id=\"p1\">**</ept>:","source":"The following expresses a lower bound on the value of **omp_get_max_threads**:"},{"pos":[1100,1303],"content":"Note that if a subsequent parallel region uses the <bpt id=\"p1\">**</bpt>num_threads<ept id=\"p1\">**</ept> clause to request a specific number of threads, the guarantee on the lower bound of the result of <bpt id=\"p2\">**</bpt>omp_get_max_threads<ept id=\"p2\">**</ept> no long holds.","source":"Note that if a subsequent parallel region uses the **num_threads** clause to request a specific number of threads, the guarantee on the lower bound of the result of **omp_get_max_threads** no long holds."},{"pos":[1310,1486],"content":"The <bpt id=\"p1\">**</bpt>omp_get_max_threads<ept id=\"p1\">**</ept> function's return value can be used to dynamically allocate sufficient storage for all threads in the team formed at the subsequent parallel region.","source":"The **omp_get_max_threads** function's return value can be used to dynamically allocate sufficient storage for all threads in the team formed at the subsequent parallel region."},{"content":"Cross References:","pos":[1495,1512]},{"pos":[1522,1648],"content":"<bpt id=\"p1\">**</bpt>omp_get_num_threads<ept id=\"p1\">**</ept> function, see <bpt id=\"p2\">[</bpt>Section 3.1.2<ept id=\"p2\">](../../parallel/openmp/3-1-2-omp-get-num-threads-function.md)</ept> on page 37.","source":"**omp_get_num_threads** function, see [Section 3.1.2](../../parallel/openmp/3-1-2-omp-get-num-threads-function.md) on page 37."},{"pos":[1658,1784],"content":"<bpt id=\"p1\">**</bpt>omp_set_num_threads<ept id=\"p1\">**</ept> function, see <bpt id=\"p2\">[</bpt>Section 3.1.1<ept id=\"p2\">](../../parallel/openmp/3-1-1-omp-set-num-threads-function.md)</ept> on page 36.","source":"**omp_set_num_threads** function, see [Section 3.1.1](../../parallel/openmp/3-1-1-omp-set-num-threads-function.md) on page 36."},{"pos":[1794,1912],"content":"<bpt id=\"p1\">**</bpt>omp_set_dynamic<ept id=\"p1\">**</ept> function, see <bpt id=\"p2\">[</bpt>Section 3.1.7<ept id=\"p2\">](../../parallel/openmp/3-1-7-omp-set-dynamic-function.md)</ept> on page 39.","source":"**omp_set_dynamic** function, see [Section 3.1.7](../../parallel/openmp/3-1-7-omp-set-dynamic-function.md) on page 39."},{"pos":[1922,2023],"content":"<bpt id=\"p1\">**</bpt>num_threads<ept id=\"p1\">**</ept> clause, see <bpt id=\"p2\">[</bpt>Section 2.3<ept id=\"p2\">](../../parallel/openmp/2-3-parallel-construct.md)</ept> on page 8.","source":"**num_threads** clause, see [Section 2.3](../../parallel/openmp/2-3-parallel-construct.md) on page 8."}],"content":"---\ntitle: \"3.1.3 omp_get_max_threads Function | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: 5548897c-546e-4d19-b37b-a76f6b30a0a9\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# 3.1.3 omp_get_max_threads Function\nThe **omp_get_max_threads** function returns an integer that is guaranteed to be at least as large as the number of threads that would be used to form a team if a parallel region without a **num_threads** clause were to be encountered at that point in the code. The format is as follows:  \n  \n```  \n#include <omp.h>  \nint omp_get_max_threads(void);  \n```  \n  \n The following expresses a lower bound on the value of **omp_get_max_threads**:  \n  \n```  \n  \nthreads-used-for-next-team  \n <= omp_get_max_threads  \n  \n```  \n  \n Note that if a subsequent parallel region uses the **num_threads** clause to request a specific number of threads, the guarantee on the lower bound of the result of **omp_get_max_threads** no long holds.  \n  \n The **omp_get_max_threads** function's return value can be used to dynamically allocate sufficient storage for all threads in the team formed at the subsequent parallel region.  \n  \n## Cross References:  \n  \n-   **omp_get_num_threads** function, see [Section 3.1.2](../../parallel/openmp/3-1-2-omp-get-num-threads-function.md) on page 37.  \n  \n-   **omp_set_num_threads** function, see [Section 3.1.1](../../parallel/openmp/3-1-1-omp-set-num-threads-function.md) on page 36.  \n  \n-   **omp_set_dynamic** function, see [Section 3.1.7](../../parallel/openmp/3-1-7-omp-set-dynamic-function.md) on page 39.  \n  \n-   **num_threads** clause, see [Section 2.3](../../parallel/openmp/2-3-parallel-construct.md) on page 8."}