{"nodes":[{"pos":[12,39],"content":"CRgn Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CRgn Class | Microsoft Docs","pos":[0,27]}]},{"pos":[616,626],"content":"CRgn Class","linkify":"CRgn Class","nodes":[{"content":"CRgn Class","pos":[0,10]}]},{"content":"Encapsulates a Windows graphics device interface (GDI) region.","pos":[627,689]},{"pos":[698,704],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[761,768],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[778,797],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[804,808]},{"content":"Description","pos":[809,820]},{"pos":[858,883],"content":"<bpt id=\"p1\">[</bpt>CRgn::CRgn<ept id=\"p1\">](#crgn__crgn)</ept>","source":"[CRgn::CRgn](#crgn__crgn)"},{"pos":[884,911],"content":"Constructs a <ph id=\"ph1\">`CRgn`</ph> object.","source":"Constructs a `CRgn` object."},{"pos":[922,936],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[943,947]},{"content":"Description","pos":[948,959]},{"pos":[997,1034],"content":"<bpt id=\"p1\">[</bpt>CRgn::CombineRgn<ept id=\"p1\">](#crgn__combinergn)</ept>","source":"[CRgn::CombineRgn](#crgn__combinergn)"},{"pos":[1035,1126],"content":"Sets a <ph id=\"ph1\">`CRgn`</ph> object so that it is equivalent to the union of two specified <ph id=\"ph2\">`CRgn`</ph> objects.","source":"Sets a `CRgn` object so that it is equivalent to the union of two specified `CRgn` objects."},{"pos":[1131,1162],"content":"<bpt id=\"p1\">[</bpt>CRgn::CopyRgn<ept id=\"p1\">](#crgn__copyrgn)</ept>","source":"[CRgn::CopyRgn](#crgn__copyrgn)"},{"pos":[1163,1234],"content":"Sets a <ph id=\"ph1\">`CRgn`</ph> object so that it is a copy of a specified <ph id=\"ph2\">`CRgn`</ph> object.","source":"Sets a `CRgn` object so that it is a copy of a specified `CRgn` object."},{"pos":[1239,1290],"content":"<bpt id=\"p1\">[</bpt>CRgn::CreateEllipticRgn<ept id=\"p1\">](#crgn__createellipticrgn)</ept>","source":"[CRgn::CreateEllipticRgn](#crgn__createellipticrgn)"},{"pos":[1291,1345],"content":"Initializes a <ph id=\"ph1\">`CRgn`</ph> object with an elliptical region.","source":"Initializes a `CRgn` object with an elliptical region."},{"pos":[1350,1417],"content":"<bpt id=\"p1\">[</bpt>CRgn::CreateEllipticRgnIndirect<ept id=\"p1\">](#crgn__createellipticrgnindirect)</ept>","source":"[CRgn::CreateEllipticRgnIndirect](#crgn__createellipticrgnindirect)"},{"pos":[1418,1542],"content":"Initializes a <ph id=\"ph1\">`CRgn`</ph> object with an elliptical region defined by a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](../../mfc/reference/rect-structure1.md)</ept> structure.","source":"Initializes a `CRgn` object with an elliptical region defined by a [RECT](../../mfc/reference/rect-structure1.md) structure."},{"pos":[1547,1592],"content":"<bpt id=\"p1\">[</bpt>CRgn::CreateFromData<ept id=\"p1\">](#crgn__createfromdata)</ept>","source":"[CRgn::CreateFromData](#crgn__createfromdata)"},{"content":"Creates a region from the given region and transformation data.","pos":[1593,1656]},{"pos":[1661,1706],"content":"<bpt id=\"p1\">[</bpt>CRgn::CreateFromPath<ept id=\"p1\">](#crgn__createfrompath)</ept>","source":"[CRgn::CreateFromPath](#crgn__createfrompath)"},{"content":"Creates a region from the path that is selected into the given device context.","pos":[1707,1785]},{"pos":[1790,1839],"content":"<bpt id=\"p1\">[</bpt>CRgn::CreatePolygonRgn<ept id=\"p1\">](#crgn__createpolygonrgn)</ept>","source":"[CRgn::CreatePolygonRgn](#crgn__createpolygonrgn)"},{"content":"Initializes a <ph id=\"ph1\">`CRgn`</ph> object with a polygonal region.","pos":[1840,1892],"source":"Initializes a `CRgn` object with a polygonal region."},{"content":"The system closes the polygon automatically, if necessary, by drawing a line from the last vertex to the first.","pos":[1893,2004]},{"pos":[2009,2066],"content":"<bpt id=\"p1\">[</bpt>CRgn::CreatePolyPolygonRgn<ept id=\"p1\">](#crgn__createpolypolygonrgn)</ept>","source":"[CRgn::CreatePolyPolygonRgn](#crgn__createpolypolygonrgn)"},{"content":"Initializes a <ph id=\"ph1\">`CRgn`</ph> object with a region consisting of a series of closed polygons.","pos":[2067,2151],"source":"Initializes a `CRgn` object with a region consisting of a series of closed polygons."},{"content":"The polygons may be disjoint, or they may overlap.","pos":[2152,2202]},{"pos":[2207,2250],"content":"<bpt id=\"p1\">[</bpt>CRgn::CreateRectRgn<ept id=\"p1\">](#crgn__createrectrgn)</ept>","source":"[CRgn::CreateRectRgn](#crgn__createrectrgn)"},{"pos":[2251,2305],"content":"Initializes a <ph id=\"ph1\">`CRgn`</ph> object with a rectangular region.","source":"Initializes a `CRgn` object with a rectangular region."},{"pos":[2310,2369],"content":"<bpt id=\"p1\">[</bpt>CRgn::CreateRectRgnIndirect<ept id=\"p1\">](#crgn__createrectrgnindirect)</ept>","source":"[CRgn::CreateRectRgnIndirect](#crgn__createrectrgnindirect)"},{"pos":[2370,2494],"content":"Initializes a <ph id=\"ph1\">`CRgn`</ph> object with a rectangular region defined by a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](../../mfc/reference/rect-structure1.md)</ept> structure.","source":"Initializes a `CRgn` object with a rectangular region defined by a [RECT](../../mfc/reference/rect-structure1.md) structure."},{"pos":[2499,2552],"content":"<bpt id=\"p1\">[</bpt>CRgn::CreateRoundRectRgn<ept id=\"p1\">](#crgn__createroundrectrgn)</ept>","source":"[CRgn::CreateRoundRectRgn](#crgn__createroundrectrgn)"},{"pos":[2553,2628],"content":"Initializes a <ph id=\"ph1\">`CRgn`</ph> object with a rectangular region with rounded corners.","source":"Initializes a `CRgn` object with a rectangular region with rounded corners."},{"pos":[2633,2666],"content":"<bpt id=\"p1\">[</bpt>CRgn::EqualRgn<ept id=\"p1\">](#crgn__equalrgn)</ept>","source":"[CRgn::EqualRgn](#crgn__equalrgn)"},{"pos":[2667,2734],"content":"Checks two <ph id=\"ph1\">`CRgn`</ph> objects to determine whether they are equivalent.","source":"Checks two `CRgn` objects to determine whether they are equivalent."},{"pos":[2739,2776],"content":"<bpt id=\"p1\">[</bpt>CRgn::FromHandle<ept id=\"p1\">](#crgn__fromhandle)</ept>","source":"[CRgn::FromHandle](#crgn__fromhandle)"},{"pos":[2777,2854],"content":"Returns a pointer to a <ph id=\"ph1\">`CRgn`</ph> object when given a handle to a Windows region.","source":"Returns a pointer to a `CRgn` object when given a handle to a Windows region."},{"pos":[2859,2902],"content":"<bpt id=\"p1\">[</bpt>CRgn::GetRegionData<ept id=\"p1\">](#crgn__getregiondata)</ept>","source":"[CRgn::GetRegionData](#crgn__getregiondata)"},{"content":"Fills the specified buffer with data describing the given region.","pos":[2903,2968]},{"pos":[2973,3008],"content":"<bpt id=\"p1\">[</bpt>CRgn::GetRgnBox<ept id=\"p1\">](#crgn__getrgnbox)</ept>","source":"[CRgn::GetRgnBox](#crgn__getrgnbox)"},{"pos":[3009,3080],"content":"Retrieves the coordinates of the bounding rectangle of a <ph id=\"ph1\">`CRgn`</ph> object.","source":"Retrieves the coordinates of the bounding rectangle of a `CRgn` object."},{"pos":[3085,3120],"content":"<bpt id=\"p1\">[</bpt>CRgn::OffsetRgn<ept id=\"p1\">](#crgn__offsetrgn)</ept>","source":"[CRgn::OffsetRgn](#crgn__offsetrgn)"},{"pos":[3121,3168],"content":"Moves a <ph id=\"ph1\">`CRgn`</ph> object by the specified offsets.","source":"Moves a `CRgn` object by the specified offsets."},{"pos":[3173,3210],"content":"<bpt id=\"p1\">[</bpt>CRgn::PtInRegion<ept id=\"p1\">](#crgn__ptinregion)</ept>","source":"[CRgn::PtInRegion](#crgn__ptinregion)"},{"content":"Determines whether a specified point is in the region.","pos":[3211,3265]},{"pos":[3270,3311],"content":"<bpt id=\"p1\">[</bpt>CRgn::RectInRegion<ept id=\"p1\">](#crgn__rectinregion)</ept>","source":"[CRgn::RectInRegion](#crgn__rectinregion)"},{"content":"Determines whether any part of a specified rectangle is within the boundaries of the region.","pos":[3312,3404]},{"pos":[3409,3446],"content":"<bpt id=\"p1\">[</bpt>CRgn::SetRectRgn<ept id=\"p1\">](#crgn__setrectrgn)</ept>","source":"[CRgn::SetRectRgn](#crgn__setrectrgn)"},{"pos":[3447,3506],"content":"Sets the <ph id=\"ph1\">`CRgn`</ph> object to the specified rectangular region.","source":"Sets the `CRgn` object to the specified rectangular region."},{"pos":[3517,3533],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[3540,3544]},{"content":"Description","pos":[3545,3556]},{"pos":[3594,3637],"content":"<bpt id=\"p1\">[</bpt>CRgn::operator HRGN<ept id=\"p1\">](#crgn__operator_hrgn)</ept>","source":"[CRgn::operator HRGN](#crgn__operator_hrgn)"},{"pos":[3638,3696],"content":"Returns the Windows handle contained in the <ph id=\"ph1\">`CRgn`</ph> object.","source":"Returns the Windows handle contained in the `CRgn` object."},{"pos":[3706,3713],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A region is an elliptical or polygonal area within a window.","pos":[3717,3777]},{"content":"To use regions, you use the member functions of class <ph id=\"ph1\">`CRgn`</ph> with the clipping functions defined as members of class <ph id=\"ph2\">`CDC`</ph>.","pos":[3778,3901],"source":" To use regions, you use the member functions of class `CRgn` with the clipping functions defined as members of class `CDC`."},{"pos":[3908,4029],"content":"The member functions of <ph id=\"ph1\">`CRgn`</ph> create, alter, and retrieve information about the region object for which they are called.","source":"The member functions of `CRgn` create, alter, and retrieve information about the region object for which they are called."},{"pos":[4036,4126],"content":"For more information on using <ph id=\"ph1\">`CRgn`</ph>, see <bpt id=\"p1\">[</bpt>Graphic Objects<ept id=\"p1\">](../../mfc/graphic-objects.md)</ept>.","source":"For more information on using `CRgn`, see [Graphic Objects](../../mfc/graphic-objects.md)."},{"pos":[4135,4156],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[4160,4207],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[4214,4267],"content":"<bpt id=\"p1\">[</bpt>CGdiObject<ept id=\"p1\">](../../mfc/reference/cgdiobject-class.md)</ept>","source":"[CGdiObject](../../mfc/reference/cgdiobject-class.md)"},{"pos":[4289,4301],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[4305,4325],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxwin.h","source":"**Header:** afxwin.h"},{"pos":[4335,4384],"content":"<bpt id=\"p1\">&lt;a name=\"crgn__combinergn\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRgn::CombineRgn","linkify":"<a name=\"crgn__combinergn\"></a>  CRgn::CombineRgn","source":"<a name=\"crgn__combinergn\"></a>  CRgn::CombineRgn"},{"content":"Creates a new GDI region by combining two existing regions.","pos":[4388,4447]},{"pos":[4549,4559],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Identifies an existing region.","pos":[4574,4604]},{"content":"Identifies an existing region.","pos":[4622,4652]},{"content":"Specifies the operation to be performed when combining the two source regions.","pos":[4677,4755]},{"content":"It can be any one of the following values:","pos":[4756,4798]},{"pos":[4806,4872],"content":"<bpt id=\"p1\">**</bpt>RGN_AND<ept id=\"p1\">**</ept> Uses overlapping areas of both regions (intersection).","source":"**RGN_AND** Uses overlapping areas of both regions (intersection)."},{"pos":[4880,4944],"content":"<bpt id=\"p1\">**</bpt>RGN_COPY<ept id=\"p1\">**</ept> Creates a copy of region 1 (identified by <ph id=\"ph1\">`pRgn1`</ph>).","source":"**RGN_COPY** Creates a copy of region 1 (identified by `pRgn1`)."},{"pos":[4952,5096],"content":"<bpt id=\"p1\">**</bpt>RGN_DIFF<ept id=\"p1\">**</ept> Creates a region consisting of the areas of region 1 (identified by <ph id=\"ph1\">`pRgn1`</ph>) that are not part of region 2 (identified by <ph id=\"ph2\">`pRgn2`</ph>).","source":"**RGN_DIFF** Creates a region consisting of the areas of region 1 (identified by `pRgn1`) that are not part of region 2 (identified by `pRgn2`)."},{"pos":[5104,5163],"content":"<bpt id=\"p1\">**</bpt>RGN_OR<ept id=\"p1\">**</ept> Combines both regions in their entirety (union).","source":"**RGN_OR** Combines both regions in their entirety (union)."},{"pos":[5171,5235],"content":"<bpt id=\"p1\">**</bpt>RGN_XOR<ept id=\"p1\">**</ept> Combines both regions but removes overlapping areas.","source":"**RGN_XOR** Combines both regions but removes overlapping areas."},{"pos":[5245,5257],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Specifies the type of the resulting region.","pos":[5261,5304]},{"content":"It can be one of the following values:","pos":[5305,5343]},{"pos":[5351,5404],"content":"<bpt id=\"p1\">**</bpt>COMPLEXREGION<ept id=\"p1\">**</ept> New region has overlapping borders.","source":"**COMPLEXREGION** New region has overlapping borders."},{"pos":[5412,5444],"content":"<bpt id=\"p1\">**</bpt>ERROR<ept id=\"p1\">**</ept> No new region created.","source":"**ERROR** No new region created."},{"pos":[5452,5487],"content":"<bpt id=\"p1\">**</bpt>NULLREGION<ept id=\"p1\">**</ept> New region is empty.","source":"**NULLREGION** New region is empty."},{"pos":[5495,5550],"content":"<bpt id=\"p1\">**</bpt>SIMPLEREGION<ept id=\"p1\">**</ept> New region has no overlapping borders.","source":"**SIMPLEREGION** New region has no overlapping borders."},{"pos":[5560,5567],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5571,5627],"content":"The regions are combined as specified by <ph id=\"ph1\">`nCombineMode`</ph>.","source":"The regions are combined as specified by `nCombineMode`."},{"content":"The two specified regions are combined, and the resulting region handle is stored in the <ph id=\"ph1\">`CRgn`</ph> object.","pos":[5634,5737],"source":"The two specified regions are combined, and the resulting region handle is stored in the `CRgn` object."},{"content":"Thus, whatever region is stored in the <ph id=\"ph1\">`CRgn`</ph> object is replaced by the combined region.","pos":[5738,5826],"source":" Thus, whatever region is stored in the `CRgn` object is replaced by the combined region."},{"content":"The size of a region is limited to 32,767 by 32,767 logical units or 64K of memory, whichever is smaller.","pos":[5833,5938]},{"pos":[5945,6021],"content":"Use <bpt id=\"p1\">[</bpt>CopyRgn<ept id=\"p1\">](#crgn__copyrgn)</ept> to simply copy one region into another region.","source":"Use [CopyRgn](#crgn__copyrgn) to simply copy one region into another region."},{"pos":[6031,6038],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6042,6117],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#144<ept id=\"p2\">](../../mfc/codesnippet/cpp/crgn-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#144](../../mfc/codesnippet/cpp/crgn-class_1.cpp)]"},{"pos":[6127,6170],"content":"<bpt id=\"p1\">&lt;a name=\"crgn__copyrgn\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRgn::CopyRgn","linkify":"<a name=\"crgn__copyrgn\"></a>  CRgn::CopyRgn","source":"<a name=\"crgn__copyrgn\"></a>  CRgn::CopyRgn"},{"pos":[6174,6236],"content":"Copies the region defined by <ph id=\"ph1\">`pRgnSrc`</ph> into the <ph id=\"ph2\">`CRgn`</ph> object.","source":"Copies the region defined by `pRgnSrc` into the `CRgn` object."},{"pos":[6289,6299],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Identifies an existing region.","pos":[6316,6346]},{"pos":[6356,6368],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Specifies the type of the resulting region.","pos":[6372,6415]},{"content":"It can be one of the following values:","pos":[6416,6454]},{"pos":[6462,6515],"content":"<bpt id=\"p1\">**</bpt>COMPLEXREGION<ept id=\"p1\">**</ept> New region has overlapping borders.","source":"**COMPLEXREGION** New region has overlapping borders."},{"pos":[6523,6555],"content":"<bpt id=\"p1\">**</bpt>ERROR<ept id=\"p1\">**</ept> No new region created.","source":"**ERROR** No new region created."},{"pos":[6563,6598],"content":"<bpt id=\"p1\">**</bpt>NULLREGION<ept id=\"p1\">**</ept> New region is empty.","source":"**NULLREGION** New region is empty."},{"pos":[6606,6661],"content":"<bpt id=\"p1\">**</bpt>SIMPLEREGION<ept id=\"p1\">**</ept> New region has no overlapping borders.","source":"**SIMPLEREGION** New region has no overlapping borders."},{"pos":[6671,6678],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The new region replaces the region formerly stored in the <ph id=\"ph1\">`CRgn`</ph> object.","pos":[6682,6754],"source":"The new region replaces the region formerly stored in the `CRgn` object."},{"content":"This function is a special case of the <bpt id=\"p1\">[</bpt>CombineRgn<ept id=\"p1\">](#crgn__combinergn)</ept> member function.","pos":[6755,6842],"source":" This function is a special case of the [CombineRgn](#crgn__combinergn) member function."},{"pos":[6852,6859],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6864,6936],"content":"See the example for <bpt id=\"p1\">[</bpt>CRgn::CreateEllipticRgn<ept id=\"p1\">](#crgn__createellipticrgn)</ept>.","source":"See the example for [CRgn::CreateEllipticRgn](#crgn__createellipticrgn)."},{"pos":[6946,7009],"content":"<bpt id=\"p1\">&lt;a name=\"crgn__createellipticrgn\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRgn::CreateEllipticRgn","linkify":"<a name=\"crgn__createellipticrgn\"></a>  CRgn::CreateEllipticRgn","source":"<a name=\"crgn__createellipticrgn\"></a>  CRgn::CreateEllipticRgn"},{"content":"Creates an elliptical region.","pos":[7013,7042]},{"pos":[7146,7156],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the logical x-coordinate of the upper-left corner of the bounding rectangle of the ellipse.","pos":[7168,7269]},{"content":"Specifies the logical y-coordinate of the upper-left corner of the bounding rectangle of the ellipse.","pos":[7284,7385]},{"content":"Specifies the logical x-coordinate of the lower-right corner of the bounding rectangle of the ellipse.","pos":[7400,7502]},{"content":"Specifies the logical y-coordinate of the lower-right corner of the bounding rectangle of the ellipse.","pos":[7517,7619]},{"pos":[7629,7641],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the operation succeeded; otherwise 0.","pos":[7645,7693]},{"pos":[7703,7710],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The region is defined by the bounding rectangle specified by <ph id=\"ph1\">`x1`</ph>, <ph id=\"ph2\">`y1`</ph>, <ph id=\"ph3\">`x2`</ph>, and <ph id=\"ph4\">`y2`</ph>.","pos":[7714,7802],"source":"The region is defined by the bounding rectangle specified by `x1`, `y1`, `x2`, and `y2`."},{"content":"The region is stored in the <ph id=\"ph1\">`CRgn`</ph> object.","pos":[7803,7845],"source":" The region is stored in the `CRgn` object."},{"content":"The size of a region is limited to 32,767 by 32,767 logical units or 64K of memory, whichever is smaller.","pos":[7852,7957]},{"pos":[7964,8162],"content":"When it has finished using a region created with the <ph id=\"ph1\">`CreateEllipticRgn`</ph> function, an application should select the region out of the device context and use the <ph id=\"ph2\">`DeleteObject`</ph> function to remove it.","source":"When it has finished using a region created with the `CreateEllipticRgn` function, an application should select the region out of the device context and use the `DeleteObject` function to remove it."},{"pos":[8172,8179],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8183,8258],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#145<ept id=\"p2\">](../../mfc/codesnippet/cpp/crgn-class_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#145](../../mfc/codesnippet/cpp/crgn-class_2.cpp)]"},{"pos":[8268,8347],"content":"<bpt id=\"p1\">&lt;a name=\"crgn__createellipticrgnindirect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRgn::CreateEllipticRgnIndirect","linkify":"<a name=\"crgn__createellipticrgnindirect\"></a>  CRgn::CreateEllipticRgnIndirect","source":"<a name=\"crgn__createellipticrgnindirect\"></a>  CRgn::CreateEllipticRgnIndirect"},{"content":"Creates an elliptical region.","pos":[8351,8380]},{"pos":[8453,8463],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to a <ph id=\"ph1\">`RECT`</ph> structure or a <ph id=\"ph2\">`CRect`</ph> object that contains the logical coordinates of the upper-left and lower-right corners of the bounding rectangle of the ellipse.","pos":[8479,8649],"source":" Points to a `RECT` structure or a `CRect` object that contains the logical coordinates of the upper-left and lower-right corners of the bounding rectangle of the ellipse."},{"pos":[8659,8671],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the operation succeeded; otherwise 0.","pos":[8675,8723]},{"pos":[8733,8740],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8744,8851],"content":"The region is defined by the structure or object pointed to by <ph id=\"ph1\">`lpRect`</ph> and is stored in the <ph id=\"ph2\">`CRgn`</ph> object.","source":"The region is defined by the structure or object pointed to by `lpRect` and is stored in the `CRgn` object."},{"content":"The size of a region is limited to 32,767 by 32,767 logical units or 64K of memory, whichever is smaller.","pos":[8858,8963]},{"pos":[8970,9176],"content":"When it has finished using a region created with the <ph id=\"ph1\">`CreateEllipticRgnIndirect`</ph> function, an application should select the region out of the device context and use the <ph id=\"ph2\">`DeleteObject`</ph> function to remove it.","source":"When it has finished using a region created with the `CreateEllipticRgnIndirect` function, an application should select the region out of the device context and use the `DeleteObject` function to remove it."},{"pos":[9186,9193],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9198,9278],"content":"See the example for <bpt id=\"p1\">[</bpt>CRgn::CreateRectRgnIndirect<ept id=\"p1\">](#crgn__createrectrgnindirect)</ept>.","source":"See the example for [CRgn::CreateRectRgnIndirect](#crgn__createrectrgnindirect)."},{"pos":[9288,9345],"content":"<bpt id=\"p1\">&lt;a name=\"crgn__createfromdata\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRgn::CreateFromData","linkify":"<a name=\"crgn__createfromdata\"></a>  CRgn::CreateFromData","source":"<a name=\"crgn__createfromdata\"></a>  CRgn::CreateFromData"},{"content":"Creates a region from the given region and transformation data.","pos":[9349,9412]},{"pos":[9534,9544],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>lpXForm<ept id=\"p1\">*</ept>","pos":[9548,9557],"source":"*lpXForm*"},{"content":"Points to an <bpt id=\"p1\">[</bpt>XFORM<ept id=\"p1\">](../../mfc/reference/xform-structure.md)</ept> data structure that defines the transformation to be performed on the region.","pos":[9561,9699],"source":" Points to an [XFORM](../../mfc/reference/xform-structure.md) data structure that defines the transformation to be performed on the region."},{"content":"If this pointer is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the identity transformation is used.","pos":[9700,9765],"source":" If this pointer is **NULL**, the identity transformation is used."},{"content":"Specifies the number of bytes pointed to by <ph id=\"ph1\">`pRgnData`</ph>.","pos":[9784,9839],"source":" Specifies the number of bytes pointed to by `pRgnData`."},{"content":"Points to a <bpt id=\"p1\">[</bpt>RGNDATA<ept id=\"p1\">](../../mfc/reference/rgndata-structure.md)</ept> data structure that contains the region data.","pos":[9860,9969],"source":" Points to a [RGNDATA](../../mfc/reference/rgndata-structure.md) data structure that contains the region data."},{"pos":[9979,9991],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the function is successful; otherwise 0.","pos":[9995,10046]},{"pos":[10056,10063],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[10067,10159],"content":"An application can retrieve data for a region by calling the <ph id=\"ph1\">`CRgn::GetRegionData`</ph> function.","source":"An application can retrieve data for a region by calling the `CRgn::GetRegionData` function."},{"pos":[10169,10226],"content":"<bpt id=\"p1\">&lt;a name=\"crgn__createfrompath\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRgn::CreateFromPath","linkify":"<a name=\"crgn__createfrompath\"></a>  CRgn::CreateFromPath","source":"<a name=\"crgn__createfrompath\"></a>  CRgn::CreateFromPath"},{"content":"Creates a region from the path that is selected into the given device context.","pos":[10230,10308]},{"pos":[10364,10374],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Identifies a device context that contains a closed path.","pos":[10387,10443]},{"pos":[10453,10465],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the function is successful; otherwise 0.","pos":[10469,10520]},{"pos":[10530,10537],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The device context identified by the <ph id=\"ph1\">`pDC`</ph> parameter must contain a closed path.","pos":[10541,10621],"source":"The device context identified by the `pDC` parameter must contain a closed path."},{"content":"After <ph id=\"ph1\">`CreateFromPath`</ph> converts a path into a region, Windows discards the closed path from the device context.","pos":[10622,10733],"source":" After `CreateFromPath` converts a path into a region, Windows discards the closed path from the device context."},{"pos":[10743,10804],"content":"<bpt id=\"p1\">&lt;a name=\"crgn__createpolygonrgn\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRgn::CreatePolygonRgn","linkify":"<a name=\"crgn__createpolygonrgn\"></a>  CRgn::CreatePolygonRgn","source":"<a name=\"crgn__createpolygonrgn\"></a>  CRgn::CreatePolygonRgn"},{"content":"Creates a polygonal region.","pos":[10808,10835]},{"pos":[10941,10951],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to an array of <bpt id=\"p1\">**</bpt>POINT<ept id=\"p1\">**</ept> structures or an array of <ph id=\"ph1\">`CPoint`</ph> objects.","pos":[10969,11044],"source":" Points to an array of **POINT** structures or an array of `CPoint` objects."},{"content":"Each structure specifies the x-coordinate and y-coordinate of one vertex of the polygon.","pos":[11045,11133]},{"content":"The <bpt id=\"p1\">**</bpt>POINT<ept id=\"p1\">**</ept> structure has the following form:","pos":[11134,11181],"source":" The **POINT** structure has the following form:"},{"content":"Specifies the number of <bpt id=\"p1\">**</bpt>POINT<ept id=\"p1\">**</ept> structures or <ph id=\"ph1\">`CPoint`</ph> objects in the array pointed to by <ph id=\"ph2\">`lpPoints`</ph>.","pos":[11281,11384],"source":" Specifies the number of **POINT** structures or `CPoint` objects in the array pointed to by `lpPoints`."},{"content":"Specifies the filling mode for the region.","pos":[11402,11444]},{"content":"This parameter may be either <bpt id=\"p1\">**</bpt>ALTERNATE<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>WINDING<ept id=\"p2\">**</ept>.","pos":[11445,11503],"source":" This parameter may be either **ALTERNATE** or **WINDING**."},{"pos":[11513,11525],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the operation succeeded; otherwise 0.","pos":[11529,11577]},{"pos":[11587,11594],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The system closes the polygon automatically, if necessary, by drawing a line from the last vertex to the first.","pos":[11598,11709]},{"content":"The resulting region is stored in the <ph id=\"ph1\">`CRgn`</ph> object.","pos":[11710,11762],"source":" The resulting region is stored in the `CRgn` object."},{"content":"The size of a region is limited to 32,767 by 32,767 logical units or 64K of memory, whichever is smaller.","pos":[11769,11874]},{"content":"When the polygon-filling mode is <bpt id=\"p1\">**</bpt>ALTERNATE<ept id=\"p1\">**</ept>, the system fills the area between odd-numbered and even-numbered polygon sides on each scan line.","pos":[11881,12026],"source":"When the polygon-filling mode is **ALTERNATE**, the system fills the area between odd-numbered and even-numbered polygon sides on each scan line."},{"content":"That is, the system fills the area between the first and second side, between the third and fourth side, and so on.","pos":[12027,12142]},{"content":"When the polygon-filling mode is <bpt id=\"p1\">**</bpt>WINDING<ept id=\"p1\">**</ept>, the system uses the direction in which a figure was drawn to determine whether to fill an area.","pos":[12149,12290],"source":"When the polygon-filling mode is **WINDING**, the system uses the direction in which a figure was drawn to determine whether to fill an area."},{"content":"Each line segment in a polygon is drawn in either a clockwise or a counterclockwise direction.","pos":[12291,12385]},{"content":"Whenever an imaginary line drawn from an enclosed area to the outside of a figure passes through a clockwise line segment, a count is incremented.","pos":[12386,12532]},{"content":"When the line passes through a counterclockwise line segment, the count is decremented.","pos":[12533,12620]},{"content":"The area is filled if the count is nonzero when the line reaches the outside of the figure.","pos":[12621,12712]},{"pos":[12719,12916],"content":"When an application has finished using a region created with the <ph id=\"ph1\">`CreatePolygonRgn`</ph> function, it should select the region out of the device context and use the <ph id=\"ph2\">`DeleteObject`</ph> function to remove it.","source":"When an application has finished using a region created with the `CreatePolygonRgn` function, it should select the region out of the device context and use the `DeleteObject` function to remove it."},{"pos":[12926,12933],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12937,13012],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#146<ept id=\"p2\">](../../mfc/codesnippet/cpp/crgn-class_3.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#146](../../mfc/codesnippet/cpp/crgn-class_3.cpp)]"},{"pos":[13022,13091],"content":"<bpt id=\"p1\">&lt;a name=\"crgn__createpolypolygonrgn\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRgn::CreatePolyPolygonRgn","linkify":"<a name=\"crgn__createpolypolygonrgn\"></a>  CRgn::CreatePolyPolygonRgn","source":"<a name=\"crgn__createpolypolygonrgn\"></a>  CRgn::CreatePolyPolygonRgn"},{"content":"Creates a region consisting of a series of closed polygons.","pos":[13095,13154]},{"pos":[13298,13308],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to an array of <bpt id=\"p1\">**</bpt>POINT<ept id=\"p1\">**</ept> structures or an array of <ph id=\"ph1\">`CPoint`</ph> objects that defines the vertices of the polygons.","pos":[13326,13443],"source":" Points to an array of **POINT** structures or an array of `CPoint` objects that defines the vertices of the polygons."},{"content":"Each polygon must be explicitly closed because the system does not close them automatically.","pos":[13444,13536]},{"content":"The polygons are specified consecutively.","pos":[13537,13578]},{"content":"The <bpt id=\"p1\">**</bpt>POINT<ept id=\"p1\">**</ept> structure has the following form:","pos":[13579,13626],"source":" The **POINT** structure has the following form:"},{"content":"Points to an array of integers.","pos":[13732,13763]},{"content":"The first integer specifies the number of vertices in the first polygon in the <ph id=\"ph1\">`lpPoints`</ph> array, the second integer specifies the number of vertices in the second polygon, and so on.","pos":[13764,13946],"source":" The first integer specifies the number of vertices in the first polygon in the `lpPoints` array, the second integer specifies the number of vertices in the second polygon, and so on."},{"content":"Specifies the total number of integers in the <ph id=\"ph1\">`lpPolyCounts`</ph> array.","pos":[13965,14032],"source":" Specifies the total number of integers in the `lpPolyCounts` array."},{"content":"Specifies the polygon-filling mode.","pos":[14058,14093]},{"content":"This value may be either <bpt id=\"p1\">**</bpt>ALTERNATE<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>WINDING<ept id=\"p2\">**</ept>.","pos":[14094,14148],"source":" This value may be either **ALTERNATE** or **WINDING**."},{"pos":[14158,14170],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the operation succeeded; otherwise 0.","pos":[14174,14222]},{"pos":[14232,14239],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[14243,14295],"content":"The resulting region is stored in the <ph id=\"ph1\">`CRgn`</ph> object.","source":"The resulting region is stored in the `CRgn` object."},{"content":"The polygons may be disjoint, or they may overlap.","pos":[14302,14352]},{"content":"The size of a region is limited to 32,767 by 32,767 logical units or 64K of memory, whichever is smaller.","pos":[14359,14464]},{"content":"When the polygon-filling mode is <bpt id=\"p1\">**</bpt>ALTERNATE<ept id=\"p1\">**</ept>, the system fills the area between odd-numbered and even-numbered polygon sides on each scan line.","pos":[14471,14616],"source":"When the polygon-filling mode is **ALTERNATE**, the system fills the area between odd-numbered and even-numbered polygon sides on each scan line."},{"content":"That is, the system fills the area between the first and second side, between the third and fourth side, and so on.","pos":[14617,14732]},{"content":"When the polygon-filling mode is <bpt id=\"p1\">**</bpt>WINDING<ept id=\"p1\">**</ept>, the system uses the direction in which a figure was drawn to determine whether to fill an area.","pos":[14739,14880],"source":"When the polygon-filling mode is **WINDING**, the system uses the direction in which a figure was drawn to determine whether to fill an area."},{"content":"Each line segment in a polygon is drawn in either a clockwise or a counterclockwise direction.","pos":[14881,14975]},{"content":"Whenever an imaginary line drawn from an enclosed area to the outside of a figure passes through a clockwise line segment, a count is incremented.","pos":[14976,15122]},{"content":"When the line passes through a counterclockwise line segment, the count is decremented.","pos":[15123,15210]},{"content":"The area is filled if the count is nonzero when the line reaches the outside of the figure.","pos":[15211,15302]},{"pos":[15309,15595],"content":"When an application has finished using a region created with the <ph id=\"ph1\">`CreatePolyPolygonRgn`</ph> function, it should select the region out of the device context and use the <bpt id=\"p1\">[</bpt>CGDIObject::DeleteObject<ept id=\"p1\">](../../mfc/reference/cgdiobject-class.md#cgdiobject__deleteobject)</ept> member function to remove it.","source":"When an application has finished using a region created with the `CreatePolyPolygonRgn` function, it should select the region out of the device context and use the [CGDIObject::DeleteObject](../../mfc/reference/cgdiobject-class.md#cgdiobject__deleteobject) member function to remove it."},{"pos":[15605,15660],"content":"<bpt id=\"p1\">&lt;a name=\"crgn__createrectrgn\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRgn::CreateRectRgn","linkify":"<a name=\"crgn__createrectrgn\"></a>  CRgn::CreateRectRgn","source":"<a name=\"crgn__createrectrgn\"></a>  CRgn::CreateRectRgn"},{"pos":[15664,15729],"content":"Creates a rectangular region that is stored in the <ph id=\"ph1\">`CRgn`</ph> object.","source":"Creates a rectangular region that is stored in the `CRgn` object."},{"pos":[15829,15839],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the logical x-coordinate of the upper-left corner of the region.","pos":[15851,15925]},{"content":"Specifies the logical y-coordinate of the upper-left corner of the region.","pos":[15940,16014]},{"content":"Specifies the logical x-coordinate of the lower-right corner of the region.","pos":[16029,16104]},{"content":"Specifies the logical y-coordinate of the lower-right corner of the region.","pos":[16119,16194]},{"pos":[16204,16216],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the operation succeeded; otherwise 0.","pos":[16220,16268]},{"pos":[16278,16285],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The size of a region is limited to 32,767 by 32,767 logical units or 64K of memory, whichever is smaller.","pos":[16289,16394]},{"pos":[16401,16625],"content":"When it has finished using a region created by <ph id=\"ph1\">`CreateRectRgn`</ph>, an application should use the <bpt id=\"p1\">[</bpt>CGDIObject::DeleteObject<ept id=\"p1\">](../../mfc/reference/cgdiobject-class.md#cgdiobject__deleteobject)</ept> member function to remove the region.","source":"When it has finished using a region created by `CreateRectRgn`, an application should use the [CGDIObject::DeleteObject](../../mfc/reference/cgdiobject-class.md#cgdiobject__deleteobject) member function to remove the region."},{"pos":[16635,16642],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[16646,16721],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#147<ept id=\"p2\">](../../mfc/codesnippet/cpp/crgn-class_4.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#147](../../mfc/codesnippet/cpp/crgn-class_4.cpp)]"},{"pos":[16728,16797],"content":"For an additional example, see <bpt id=\"p1\">[</bpt>CRgn::CombineRgn<ept id=\"p1\">](#crgn__combinergn)</ept>.","source":"For an additional example, see [CRgn::CombineRgn](#crgn__combinergn)."},{"pos":[16807,16878],"content":"<bpt id=\"p1\">&lt;a name=\"crgn__createrectrgnindirect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRgn::CreateRectRgnIndirect","linkify":"<a name=\"crgn__createrectrgnindirect\"></a>  CRgn::CreateRectRgnIndirect","source":"<a name=\"crgn__createrectrgnindirect\"></a>  CRgn::CreateRectRgnIndirect"},{"pos":[16882,16947],"content":"Creates a rectangular region that is stored in the <ph id=\"ph1\">`CRgn`</ph> object.","source":"Creates a rectangular region that is stored in the `CRgn` object."},{"pos":[17016,17026],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to a <ph id=\"ph1\">`RECT`</ph> structure or <ph id=\"ph2\">`CRect`</ph> object that contains the logical coordinates of the upper-left and lower-right corners of the region.","pos":[17042,17183],"source":" Points to a `RECT` structure or `CRect` object that contains the logical coordinates of the upper-left and lower-right corners of the region."},{"content":"The <ph id=\"ph1\">`RECT`</ph> structure has the following form:","pos":[17184,17228],"source":" The `RECT` structure has the following form:"},{"pos":[17361,17373],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the operation succeeded; otherwise 0.","pos":[17377,17425]},{"pos":[17435,17442],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The size of a region is limited to 32,767 by 32,767 logical units or 64K of memory, whichever is smaller.","pos":[17446,17551]},{"pos":[17558,17790],"content":"When it has finished using a region created by <ph id=\"ph1\">`CreateRectRgnIndirect`</ph>, an application should use the <bpt id=\"p1\">[</bpt>CGDIObject::DeleteObject<ept id=\"p1\">](../../mfc/reference/cgdiobject-class.md#cgdiobject__deleteobject)</ept> member function to remove the region.","source":"When it has finished using a region created by `CreateRectRgnIndirect`, an application should use the [CGDIObject::DeleteObject](../../mfc/reference/cgdiobject-class.md#cgdiobject__deleteobject) member function to remove the region."},{"pos":[17800,17807],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[17811,17886],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#148<ept id=\"p2\">](../../mfc/codesnippet/cpp/crgn-class_5.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#148](../../mfc/codesnippet/cpp/crgn-class_5.cpp)]"},{"pos":[17896,17961],"content":"<bpt id=\"p1\">&lt;a name=\"crgn__createroundrectrgn\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRgn::CreateRoundRectRgn","linkify":"<a name=\"crgn__createroundrectrgn\"></a>  CRgn::CreateRoundRectRgn","source":"<a name=\"crgn__createroundrectrgn\"></a>  CRgn::CreateRoundRectRgn"},{"pos":[17965,18051],"content":"Creates a rectangular region with rounded corners that is stored in the <ph id=\"ph1\">`CRgn`</ph> object.","source":"Creates a rectangular region with rounded corners that is stored in the `CRgn` object."},{"pos":[18184,18194],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the logical x-coordinate of the upper-left corner of the region.","pos":[18206,18280]},{"content":"Specifies the logical y-coordinate of the upper-left corner of the region.","pos":[18295,18369]},{"content":"Specifies the logical x-coordinate of the lower-right corner of the region.","pos":[18384,18459]},{"content":"Specifies the logical y-coordinate of the lower-right corner of the region.","pos":[18474,18549]},{"content":"<bpt id=\"p1\">*</bpt>x3<ept id=\"p1\">*</ept>","pos":[18556,18560],"source":"*x3*"},{"content":"Specifies the width of the ellipse used to create the rounded corners.","pos":[18564,18634]},{"content":"Specifies the height of the ellipse used to create the rounded corners.","pos":[18649,18720]},{"pos":[18730,18742],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the operation succeeded; otherwise 0.","pos":[18746,18794]},{"pos":[18804,18811],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The size of a region is limited to 32,767 by 32,767 logical units or 64K of memory, whichever is smaller.","pos":[18815,18920]},{"pos":[18927,19211],"content":"When an application has finished using a region created with the <ph id=\"ph1\">`CreateRoundRectRgn`</ph> function, it should select the region out of the device context and use the <bpt id=\"p1\">[</bpt>CGDIObject::DeleteObject<ept id=\"p1\">](../../mfc/reference/cgdiobject-class.md#cgdiobject__deleteobject)</ept> member function to remove it.","source":"When an application has finished using a region created with the `CreateRoundRectRgn` function, it should select the region out of the device context and use the [CGDIObject::DeleteObject](../../mfc/reference/cgdiobject-class.md#cgdiobject__deleteobject) member function to remove it."},{"pos":[19221,19228],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[19232,19307],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#149<ept id=\"p2\">](../../mfc/codesnippet/cpp/crgn-class_6.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#149](../../mfc/codesnippet/cpp/crgn-class_6.cpp)]"},{"pos":[19317,19354],"content":"<bpt id=\"p1\">&lt;a name=\"crgn__crgn\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRgn::CRgn","linkify":"<a name=\"crgn__crgn\"></a>  CRgn::CRgn","source":"<a name=\"crgn__crgn\"></a>  CRgn::CRgn"},{"pos":[19358,19385],"content":"Constructs a <ph id=\"ph1\">`CRgn`</ph> object.","source":"Constructs a `CRgn` object."},{"pos":[19418,19425],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[19429,19587],"content":"The <ph id=\"ph1\">`m_hObject`</ph> data member does not contain a valid Windows GDI region until the object is initialized with one or more of the other <ph id=\"ph2\">`CRgn`</ph> member functions.","source":"The `m_hObject` data member does not contain a valid Windows GDI region until the object is initialized with one or more of the other `CRgn` member functions."},{"pos":[19597,19604],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[19609,19683],"content":"See the example for <bpt id=\"p1\">[</bpt>CRgn::CreateRoundRectRgn<ept id=\"p1\">](#crgn__createroundrectrgn)</ept>.","source":"See the example for [CRgn::CreateRoundRectRgn](#crgn__createroundrectrgn)."},{"pos":[19693,19738],"content":"<bpt id=\"p1\">&lt;a name=\"crgn__equalrgn\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRgn::EqualRgn","linkify":"<a name=\"crgn__equalrgn\"></a>  CRgn::EqualRgn","source":"<a name=\"crgn__equalrgn\"></a>  CRgn::EqualRgn"},{"pos":[19742,19834],"content":"Determines whether the given region is equivalent to the region stored in the <ph id=\"ph1\">`CRgn`</ph> object.","source":"Determines whether the given region is equivalent to the region stored in the `CRgn` object."},{"pos":[19895,19905],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Identifies a region.","pos":[19919,19939]},{"pos":[19949,19961],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the two regions are equivalent; otherwise 0.","pos":[19965,20020]},{"pos":[20030,20037],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[20041,20116],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#150<ept id=\"p2\">](../../mfc/codesnippet/cpp/crgn-class_7.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#150](../../mfc/codesnippet/cpp/crgn-class_7.cpp)]"},{"pos":[20126,20175],"content":"<bpt id=\"p1\">&lt;a name=\"crgn__fromhandle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRgn::FromHandle","linkify":"<a name=\"crgn__fromhandle\"></a>  CRgn::FromHandle","source":"<a name=\"crgn__fromhandle\"></a>  CRgn::FromHandle"},{"pos":[20179,20256],"content":"Returns a pointer to a <ph id=\"ph1\">`CRgn`</ph> object when given a handle to a Windows region.","source":"Returns a pointer to a `CRgn` object when given a handle to a Windows region."},{"pos":[20324,20334],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies a handle to a Windows region.","pos":[20348,20387]},{"pos":[20397,20409],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to a <ph id=\"ph1\">`CRgn`</ph> object.","pos":[20413,20442],"source":"A pointer to a `CRgn` object."},{"content":"If the function was not successful, the return value is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[20443,20508],"source":" If the function was not successful, the return value is **NULL**."},{"pos":[20518,20525],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If a <ph id=\"ph1\">`CRgn`</ph> object is not already attached to the handle, a temporary <ph id=\"ph2\">`CRgn`</ph> object is created and attached.","pos":[20529,20637],"source":"If a `CRgn` object is not already attached to the handle, a temporary `CRgn` object is created and attached."},{"content":"This temporary <ph id=\"ph1\">`CRgn`</ph> object is valid only until the next time the application has idle time in its event loop, at which time all temporary graphic objects are deleted.","pos":[20638,20806],"source":" This temporary `CRgn` object is valid only until the next time the application has idle time in its event loop, at which time all temporary graphic objects are deleted."},{"content":"Another way of saying this is that the temporary object is only valid during the processing of one window message.","pos":[20807,20921]},{"pos":[20931,20986],"content":"<bpt id=\"p1\">&lt;a name=\"crgn__getregiondata\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRgn::GetRegionData","linkify":"<a name=\"crgn__getregiondata\"></a>  CRgn::GetRegionData","source":"<a name=\"crgn__getregiondata\"></a>  CRgn::GetRegionData"},{"content":"Fills the specified buffer with data describing the region.","pos":[20990,21049]},{"pos":[21146,21156],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to a <bpt id=\"p1\">[</bpt>RGNDATA<ept id=\"p1\">](../../mfc/reference/rgndata-structure.md)</ept> data structure that receives the information.","pos":[21175,21284],"source":" Points to a [RGNDATA](../../mfc/reference/rgndata-structure.md) data structure that receives the information."},{"content":"If this parameter is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the return value contains the number of bytes needed for the region data.","pos":[21285,21389],"source":" If this parameter is **NULL**, the return value contains the number of bytes needed for the region data."},{"content":"Specifies the size, in bytes, of the <ph id=\"ph1\">`lpRgnData`</ph> buffer.","pos":[21408,21464],"source":" Specifies the size, in bytes, of the `lpRgnData` buffer."},{"pos":[21474,21486],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If the function succeeds and <ph id=\"ph1\">`nCount`</ph> specifies an adequate number of bytes, the return value is always <ph id=\"ph2\">`nCount`</ph>.","pos":[21490,21603],"source":"If the function succeeds and `nCount` specifies an adequate number of bytes, the return value is always `nCount`."},{"content":"If the function fails, or if <ph id=\"ph1\">`nCount`</ph> specifies less than adequate number of bytes, the return value is 0 (error).","pos":[21604,21718],"source":" If the function fails, or if `nCount` specifies less than adequate number of bytes, the return value is 0 (error)."},{"pos":[21728,21735],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This data includes the dimensions of the rectangles that make up the region.","pos":[21739,21815]},{"content":"This function is used in conjunction with the <ph id=\"ph1\">`CRgn::CreateFromData`</ph> function.","pos":[21816,21894],"source":" This function is used in conjunction with the `CRgn::CreateFromData` function."},{"pos":[21904,21951],"content":"<bpt id=\"p1\">&lt;a name=\"crgn__getrgnbox\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRgn::GetRgnBox","linkify":"<a name=\"crgn__getrgnbox\"></a>  CRgn::GetRgnBox","source":"<a name=\"crgn__getrgnbox\"></a>  CRgn::GetRgnBox"},{"pos":[21955,22028],"content":"Retrieves the coordinates of the bounding rectangle of the <ph id=\"ph1\">`CRgn`</ph> object.","source":"Retrieves the coordinates of the bounding rectangle of the `CRgn` object."},{"pos":[22092,22102],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to a <ph id=\"ph1\">`RECT`</ph> structure or <ph id=\"ph2\">`CRect`</ph> object to receive the coordinates of the bounding rectangle.","pos":[22118,22218],"source":" Points to a `RECT` structure or `CRect` object to receive the coordinates of the bounding rectangle."},{"content":"The <ph id=\"ph1\">`RECT`</ph> structure has the following form:","pos":[22219,22263],"source":" The `RECT` structure has the following form:"},{"pos":[22396,22408],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Specifies the region's type.","pos":[22412,22440]},{"content":"It can be any of the following values:","pos":[22441,22479]},{"pos":[22487,22536],"content":"<bpt id=\"p1\">**</bpt>COMPLEXREGION<ept id=\"p1\">**</ept> Region has overlapping borders.","source":"**COMPLEXREGION** Region has overlapping borders."},{"pos":[22544,22575],"content":"<bpt id=\"p1\">**</bpt>NULLREGION<ept id=\"p1\">**</ept> Region is empty.","source":"**NULLREGION** Region is empty."},{"pos":[22583,22639],"content":"<bpt id=\"p1\">**</bpt>ERROR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`CRgn`</ph> object does not specify a valid region.","source":"**ERROR** `CRgn` object does not specify a valid region."},{"pos":[22647,22698],"content":"<bpt id=\"p1\">**</bpt>SIMPLEREGION<ept id=\"p1\">**</ept> Region has no overlapping borders.","source":"**SIMPLEREGION** Region has no overlapping borders."},{"pos":[22708,22715],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[22720,22790],"content":"See the example for <bpt id=\"p1\">[</bpt>CRgn::CreatePolygonRgn<ept id=\"p1\">](#crgn__createpolygonrgn)</ept>.","source":"See the example for [CRgn::CreatePolygonRgn](#crgn__createpolygonrgn)."},{"pos":[22800,22847],"content":"<bpt id=\"p1\">&lt;a name=\"crgn__offsetrgn\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRgn::OffsetRgn","linkify":"<a name=\"crgn__offsetrgn\"></a>  CRgn::OffsetRgn","source":"<a name=\"crgn__offsetrgn\"></a>  CRgn::OffsetRgn"},{"pos":[22851,22921],"content":"Moves the region stored in the <ph id=\"ph1\">`CRgn`</ph> object by the specified offsets.","source":"Moves the region stored in the `CRgn` object by the specified offsets."},{"pos":[23022,23032],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept>","pos":[23036,23039],"source":"*x*"},{"content":"Specifies the number of units to move left or right.","pos":[23043,23095]},{"content":"<bpt id=\"p1\">*</bpt>y<ept id=\"p1\">*</ept>","pos":[23102,23105],"source":"*y*"},{"content":"Specifies the number of units to move up or down.","pos":[23109,23158]},{"content":"The x-coordinate of <ph id=\"ph1\">`point`</ph> specifies the number of units to move left or right.","pos":[23176,23256],"source":" The x-coordinate of `point` specifies the number of units to move left or right."},{"content":"The y-coordinate of <ph id=\"ph1\">`point`</ph> specifies the number of units to move up or down.","pos":[23257,23334],"source":" The y-coordinate of `point` specifies the number of units to move up or down."},{"content":"The <ph id=\"ph1\">`point`</ph> parameter may be either a <bpt id=\"p1\">**</bpt>POINT<ept id=\"p1\">**</ept> structure or a <ph id=\"ph2\">`CPoint`</ph> object.","pos":[23335,23414],"source":" The `point` parameter may be either a **POINT** structure or a `CPoint` object."},{"pos":[23424,23436],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The new region's type.","pos":[23440,23462]},{"content":"It can be any one of the following values:","pos":[23463,23505]},{"pos":[23513,23562],"content":"<bpt id=\"p1\">**</bpt>COMPLEXREGION<ept id=\"p1\">**</ept> Region has overlapping borders.","source":"**COMPLEXREGION** Region has overlapping borders."},{"pos":[23570,23607],"content":"<bpt id=\"p1\">**</bpt>ERROR<ept id=\"p1\">**</ept> Region handle is not valid.","source":"**ERROR** Region handle is not valid."},{"pos":[23615,23646],"content":"<bpt id=\"p1\">**</bpt>NULLREGION<ept id=\"p1\">**</ept> Region is empty.","source":"**NULLREGION** Region is empty."},{"pos":[23654,23705],"content":"<bpt id=\"p1\">**</bpt>SIMPLEREGION<ept id=\"p1\">**</ept> Region has no overlapping borders.","source":"**SIMPLEREGION** Region has no overlapping borders."},{"pos":[23715,23722],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[23726,23814],"content":"The function moves the region <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept> units along the x-axis and <bpt id=\"p2\">*</bpt>y<ept id=\"p2\">*</ept> units along the y-axis.","source":"The function moves the region *x* units along the x-axis and *y* units along the y-axis."},{"content":"The coordinate values of a region must be less than or equal to 32,767 and greater than or equal to –32,768.","pos":[23821,23929]},{"content":"The <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>y<ept id=\"p2\">*</ept> parameters must be carefully chosen to prevent invalid region coordinates.","pos":[23930,24020],"source":" The *x* and *y* parameters must be carefully chosen to prevent invalid region coordinates."},{"pos":[24030,24037],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[24042,24114],"content":"See the example for <bpt id=\"p1\">[</bpt>CRgn::CreateEllipticRgn<ept id=\"p1\">](#crgn__createellipticrgn)</ept>.","source":"See the example for [CRgn::CreateEllipticRgn](#crgn__createellipticrgn)."},{"pos":[24124,24179],"content":"<bpt id=\"p1\">&lt;a name=\"crgn__operator_hrgn\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRgn::operator HRGN","linkify":"<a name=\"crgn__operator_hrgn\"></a>  CRgn::operator HRGN","source":"<a name=\"crgn__operator_hrgn\"></a>  CRgn::operator HRGN"},{"pos":[24183,24261],"content":"Use this operator to get the attached Windows GDI handle of the <ph id=\"ph1\">`CRgn`</ph> object.","source":"Use this operator to get the attached Windows GDI handle of the `CRgn` object."},{"pos":[24312,24324],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[24328,24431],"content":"If successful, a handle to the Windows GDI object represented by the <ph id=\"ph1\">`CRgn`</ph> object; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"If successful, a handle to the Windows GDI object represented by the `CRgn` object; otherwise **NULL**."},{"pos":[24441,24448],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[24452,24537],"content":"This operator is a casting operator, which supports direct use of an <bpt id=\"p1\">**</bpt>HRGN<ept id=\"p1\">**</ept> object.","source":"This operator is a casting operator, which supports direct use of an **HRGN** object."},{"pos":[24544,24747],"content":"For more information about using graphic objects, see the article <bpt id=\"p1\">[</bpt>Graphic Objects<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd144962)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information about using graphic objects, see the article [Graphic Objects](http://msdn.microsoft.com/library/windows/desktop/dd144962) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[24757,24806],"content":"<bpt id=\"p1\">&lt;a name=\"crgn__ptinregion\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRgn::PtInRegion","linkify":"<a name=\"crgn__ptinregion\"></a>  CRgn::PtInRegion","source":"<a name=\"crgn__ptinregion\"></a>  CRgn::PtInRegion"},{"pos":[24810,24901],"content":"Checks whether the point given by <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>y<ept id=\"p2\">*</ept> is in the region stored in the <ph id=\"ph1\">`CRgn`</ph> object.","source":"Checks whether the point given by *x* and *y* is in the region stored in the `CRgn` object."},{"pos":[25023,25033],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept>","pos":[25037,25040],"source":"*x*"},{"content":"Specifies the logical x-coordinate of the point to test.","pos":[25044,25100]},{"content":"<bpt id=\"p1\">*</bpt>y<ept id=\"p1\">*</ept>","pos":[25107,25110],"source":"*y*"},{"content":"Specifies the logical y-coordinate of the point to test.","pos":[25114,25170]},{"content":"The x- and y-coordinates of <ph id=\"ph1\">`point`</ph> specify the x- and y-coordinates of the point to test the value of.","pos":[25188,25291],"source":" The x- and y-coordinates of `point` specify the x- and y-coordinates of the point to test the value of."},{"content":"The <ph id=\"ph1\">`point`</ph> parameter can either be a <bpt id=\"p1\">**</bpt>POINT<ept id=\"p1\">**</ept> structure or a <ph id=\"ph2\">`CPoint`</ph> object.","pos":[25292,25371],"source":" The `point` parameter can either be a **POINT** structure or a `CPoint` object."},{"pos":[25381,25393],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the point is in the region; otherwise 0.","pos":[25397,25448]},{"pos":[25458,25511],"content":"<bpt id=\"p1\">&lt;a name=\"crgn__rectinregion\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRgn::RectInRegion","linkify":"<a name=\"crgn__rectinregion\"></a>  CRgn::RectInRegion","source":"<a name=\"crgn__rectinregion\"></a>  CRgn::RectInRegion"},{"pos":[25515,25649],"content":"Determines whether any part of the rectangle specified by <ph id=\"ph1\">`lpRect`</ph> is within the boundaries of the region stored in the <ph id=\"ph2\">`CRgn`</ph> object.","source":"Determines whether any part of the rectangle specified by `lpRect` is within the boundaries of the region stored in the `CRgn` object."},{"pos":[25718,25728],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to a <ph id=\"ph1\">`RECT`</ph> structure or <ph id=\"ph2\">`CRect`</ph> object.","pos":[25744,25791],"source":" Points to a `RECT` structure or `CRect` object."},{"content":"The <ph id=\"ph1\">`RECT`</ph> structure has the following form:","pos":[25792,25836],"source":" The `RECT` structure has the following form:"},{"pos":[25969,25981],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if any part of the specified rectangle lies within the boundaries of the region; otherwise 0.","pos":[25985,26086]},{"pos":[26096,26145],"content":"<bpt id=\"p1\">&lt;a name=\"crgn__setrectrgn\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CRgn::SetRectRgn","linkify":"<a name=\"crgn__setrectrgn\"></a>  CRgn::SetRectRgn","source":"<a name=\"crgn__setrectrgn\"></a>  CRgn::SetRectRgn"},{"content":"Creates a rectangular region.","pos":[26149,26178]},{"pos":[26316,26326],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the x-coordinate of the upper-left corner of the rectangular region.","pos":[26338,26416]},{"content":"Specifies the y-coordinate of the upper-left corner of the rectangular region.","pos":[26431,26509]},{"content":"Specifies the x-coordinate of the lower-right corner of the rectangular region.","pos":[26524,26603]},{"content":"Specifies the y-coordinate of the lower-right corner of the rectangular region.","pos":[26618,26697]},{"content":"Specifies the rectangular region.","pos":[26716,26749]},{"content":"Can be either a pointer to a <ph id=\"ph1\">`RECT`</ph> structure or a <ph id=\"ph2\">`CRect`</ph> object.","pos":[26750,26816],"source":" Can be either a pointer to a `RECT` structure or a `CRect` object."},{"pos":[26826,26833],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Unlike <bpt id=\"p1\">[</bpt>CreateRectRgn<ept id=\"p1\">](#crgn__createrectrgn)</ept>, however, it does not allocate any additional memory from the local Windows application heap.","pos":[26837,26975],"source":"Unlike [CreateRectRgn](#crgn__createrectrgn), however, it does not allocate any additional memory from the local Windows application heap."},{"content":"Instead, it uses the space allocated for the region stored in the <ph id=\"ph1\">`CRgn`</ph> object.","pos":[26976,27056],"source":" Instead, it uses the space allocated for the region stored in the `CRgn` object."},{"content":"This means that the <ph id=\"ph1\">`CRgn`</ph> object must already have been initialized with a valid Windows region before calling <ph id=\"ph2\">`SetRectRgn`</ph>.","pos":[27057,27182],"source":" This means that the `CRgn` object must already have been initialized with a valid Windows region before calling `SetRectRgn`."},{"content":"The points given by <ph id=\"ph1\">`x1`</ph>, <ph id=\"ph2\">`y1`</ph>, <ph id=\"ph3\">`x2`</ph>, and <ph id=\"ph4\">`y2`</ph> specify the minimum size of the allocated space.","pos":[27183,27278],"source":" The points given by `x1`, `y1`, `x2`, and `y2` specify the minimum size of the allocated space."},{"pos":[27285,27393],"content":"Use this function instead of the <ph id=\"ph1\">`CreateRectRgn`</ph> member function to avoid calls to the local memory manager.","source":"Use this function instead of the `CreateRectRgn` member function to avoid calls to the local memory manager."},{"pos":[27402,27410],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>CWnd Class<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[27414,27462],"source":"[CWnd Class](../../mfc/reference/cwnd-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept>","pos":[27465,27513],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md)"}],"content":"---\ntitle: \"CRgn Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CRgn\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"HRGN\"\n  - \"CRgn class\"\n  - \"regions, MFC\"\nms.assetid: d904da84-76aa-481e-8780-b09485f49e64\ncaps.latest.revision: 23\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CRgn Class\nEncapsulates a Windows graphics device interface (GDI) region.  \n  \n## Syntax  \n  \n```  \nclass CRgn : public CGdiObject  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CRgn::CRgn](#crgn__crgn)|Constructs a `CRgn` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CRgn::CombineRgn](#crgn__combinergn)|Sets a `CRgn` object so that it is equivalent to the union of two specified `CRgn` objects.|  \n|[CRgn::CopyRgn](#crgn__copyrgn)|Sets a `CRgn` object so that it is a copy of a specified `CRgn` object.|  \n|[CRgn::CreateEllipticRgn](#crgn__createellipticrgn)|Initializes a `CRgn` object with an elliptical region.|  \n|[CRgn::CreateEllipticRgnIndirect](#crgn__createellipticrgnindirect)|Initializes a `CRgn` object with an elliptical region defined by a [RECT](../../mfc/reference/rect-structure1.md) structure.|  \n|[CRgn::CreateFromData](#crgn__createfromdata)|Creates a region from the given region and transformation data.|  \n|[CRgn::CreateFromPath](#crgn__createfrompath)|Creates a region from the path that is selected into the given device context.|  \n|[CRgn::CreatePolygonRgn](#crgn__createpolygonrgn)|Initializes a `CRgn` object with a polygonal region. The system closes the polygon automatically, if necessary, by drawing a line from the last vertex to the first.|  \n|[CRgn::CreatePolyPolygonRgn](#crgn__createpolypolygonrgn)|Initializes a `CRgn` object with a region consisting of a series of closed polygons. The polygons may be disjoint, or they may overlap.|  \n|[CRgn::CreateRectRgn](#crgn__createrectrgn)|Initializes a `CRgn` object with a rectangular region.|  \n|[CRgn::CreateRectRgnIndirect](#crgn__createrectrgnindirect)|Initializes a `CRgn` object with a rectangular region defined by a [RECT](../../mfc/reference/rect-structure1.md) structure.|  \n|[CRgn::CreateRoundRectRgn](#crgn__createroundrectrgn)|Initializes a `CRgn` object with a rectangular region with rounded corners.|  \n|[CRgn::EqualRgn](#crgn__equalrgn)|Checks two `CRgn` objects to determine whether they are equivalent.|  \n|[CRgn::FromHandle](#crgn__fromhandle)|Returns a pointer to a `CRgn` object when given a handle to a Windows region.|  \n|[CRgn::GetRegionData](#crgn__getregiondata)|Fills the specified buffer with data describing the given region.|  \n|[CRgn::GetRgnBox](#crgn__getrgnbox)|Retrieves the coordinates of the bounding rectangle of a `CRgn` object.|  \n|[CRgn::OffsetRgn](#crgn__offsetrgn)|Moves a `CRgn` object by the specified offsets.|  \n|[CRgn::PtInRegion](#crgn__ptinregion)|Determines whether a specified point is in the region.|  \n|[CRgn::RectInRegion](#crgn__rectinregion)|Determines whether any part of a specified rectangle is within the boundaries of the region.|  \n|[CRgn::SetRectRgn](#crgn__setrectrgn)|Sets the `CRgn` object to the specified rectangular region.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CRgn::operator HRGN](#crgn__operator_hrgn)|Returns the Windows handle contained in the `CRgn` object.|  \n  \n## Remarks  \n A region is an elliptical or polygonal area within a window. To use regions, you use the member functions of class `CRgn` with the clipping functions defined as members of class `CDC`.  \n  \n The member functions of `CRgn` create, alter, and retrieve information about the region object for which they are called.  \n  \n For more information on using `CRgn`, see [Graphic Objects](../../mfc/graphic-objects.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CGdiObject](../../mfc/reference/cgdiobject-class.md)  \n  \n `CRgn`  \n  \n## Requirements  \n **Header:** afxwin.h  \n  \n##  <a name=\"crgn__combinergn\"></a>  CRgn::CombineRgn  \n Creates a new GDI region by combining two existing regions.  \n  \n```  \nint CombineRgn(\n    CRgn* pRgn1,  \n    CRgn* pRgn2,  \n    int nCombineMode);\n```  \n  \n### Parameters  \n `pRgn1`  \n Identifies an existing region.  \n  \n `pRgn2`  \n Identifies an existing region.  \n  \n `nCombineMode`  \n Specifies the operation to be performed when combining the two source regions. It can be any one of the following values:  \n  \n- **RGN_AND** Uses overlapping areas of both regions (intersection).  \n  \n- **RGN_COPY** Creates a copy of region 1 (identified by `pRgn1`).  \n  \n- **RGN_DIFF** Creates a region consisting of the areas of region 1 (identified by `pRgn1`) that are not part of region 2 (identified by `pRgn2`).  \n  \n- **RGN_OR** Combines both regions in their entirety (union).  \n  \n- **RGN_XOR** Combines both regions but removes overlapping areas.  \n  \n### Return Value  \n Specifies the type of the resulting region. It can be one of the following values:  \n  \n- **COMPLEXREGION** New region has overlapping borders.  \n  \n- **ERROR** No new region created.  \n  \n- **NULLREGION** New region is empty.  \n  \n- **SIMPLEREGION** New region has no overlapping borders.  \n  \n### Remarks  \n The regions are combined as specified by `nCombineMode`.  \n  \n The two specified regions are combined, and the resulting region handle is stored in the `CRgn` object. Thus, whatever region is stored in the `CRgn` object is replaced by the combined region.  \n  \n The size of a region is limited to 32,767 by 32,767 logical units or 64K of memory, whichever is smaller.  \n  \n Use [CopyRgn](#crgn__copyrgn) to simply copy one region into another region.  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#144](../../mfc/codesnippet/cpp/crgn-class_1.cpp)]  \n  \n##  <a name=\"crgn__copyrgn\"></a>  CRgn::CopyRgn  \n Copies the region defined by `pRgnSrc` into the `CRgn` object.  \n  \n```  \nint CopyRgn(CRgn* pRgnSrc);\n```  \n  \n### Parameters  \n `pRgnSrc`  \n Identifies an existing region.  \n  \n### Return Value  \n Specifies the type of the resulting region. It can be one of the following values:  \n  \n- **COMPLEXREGION** New region has overlapping borders.  \n  \n- **ERROR** No new region created.  \n  \n- **NULLREGION** New region is empty.  \n  \n- **SIMPLEREGION** New region has no overlapping borders.  \n  \n### Remarks  \n The new region replaces the region formerly stored in the `CRgn` object. This function is a special case of the [CombineRgn](#crgn__combinergn) member function.  \n  \n### Example  \n  See the example for [CRgn::CreateEllipticRgn](#crgn__createellipticrgn).  \n  \n##  <a name=\"crgn__createellipticrgn\"></a>  CRgn::CreateEllipticRgn  \n Creates an elliptical region.  \n  \n```  \nBOOL CreateEllipticRgn(\n    int x1,  \n    int y1,  \n    int x2,  \n    int y2);\n```  \n  \n### Parameters  \n `x1`  \n Specifies the logical x-coordinate of the upper-left corner of the bounding rectangle of the ellipse.  \n  \n `y1`  \n Specifies the logical y-coordinate of the upper-left corner of the bounding rectangle of the ellipse.  \n  \n `x2`  \n Specifies the logical x-coordinate of the lower-right corner of the bounding rectangle of the ellipse.  \n  \n `y2`  \n Specifies the logical y-coordinate of the lower-right corner of the bounding rectangle of the ellipse.  \n  \n### Return Value  \n Nonzero if the operation succeeded; otherwise 0.  \n  \n### Remarks  \n The region is defined by the bounding rectangle specified by `x1`, `y1`, `x2`, and `y2`. The region is stored in the `CRgn` object.  \n  \n The size of a region is limited to 32,767 by 32,767 logical units or 64K of memory, whichever is smaller.  \n  \n When it has finished using a region created with the `CreateEllipticRgn` function, an application should select the region out of the device context and use the `DeleteObject` function to remove it.  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#145](../../mfc/codesnippet/cpp/crgn-class_2.cpp)]  \n  \n##  <a name=\"crgn__createellipticrgnindirect\"></a>  CRgn::CreateEllipticRgnIndirect  \n Creates an elliptical region.  \n  \n```  \nBOOL CreateEllipticRgnIndirect(LPCRECT lpRect);\n```  \n  \n### Parameters  \n `lpRect`  \n Points to a `RECT` structure or a `CRect` object that contains the logical coordinates of the upper-left and lower-right corners of the bounding rectangle of the ellipse.  \n  \n### Return Value  \n Nonzero if the operation succeeded; otherwise 0.  \n  \n### Remarks  \n The region is defined by the structure or object pointed to by `lpRect` and is stored in the `CRgn` object.  \n  \n The size of a region is limited to 32,767 by 32,767 logical units or 64K of memory, whichever is smaller.  \n  \n When it has finished using a region created with the `CreateEllipticRgnIndirect` function, an application should select the region out of the device context and use the `DeleteObject` function to remove it.  \n  \n### Example  \n  See the example for [CRgn::CreateRectRgnIndirect](#crgn__createrectrgnindirect).  \n  \n##  <a name=\"crgn__createfromdata\"></a>  CRgn::CreateFromData  \n Creates a region from the given region and transformation data.  \n  \n```  \nBOOL CreateFromData(\n    const XFORM* lpXForm,  \n    int nCount,  \n    const RGNDATA* pRgnData);\n```  \n  \n### Parameters  \n *lpXForm*  \n Points to an [XFORM](../../mfc/reference/xform-structure.md) data structure that defines the transformation to be performed on the region. If this pointer is **NULL**, the identity transformation is used.  \n  \n `nCount`  \n Specifies the number of bytes pointed to by `pRgnData`.  \n  \n `pRgnData`  \n Points to a [RGNDATA](../../mfc/reference/rgndata-structure.md) data structure that contains the region data.  \n  \n### Return Value  \n Nonzero if the function is successful; otherwise 0.  \n  \n### Remarks  \n An application can retrieve data for a region by calling the `CRgn::GetRegionData` function.  \n  \n##  <a name=\"crgn__createfrompath\"></a>  CRgn::CreateFromPath  \n Creates a region from the path that is selected into the given device context.  \n  \n```  \nBOOL CreateFromPath(CDC* pDC);\n```  \n  \n### Parameters  \n `pDC`  \n Identifies a device context that contains a closed path.  \n  \n### Return Value  \n Nonzero if the function is successful; otherwise 0.  \n  \n### Remarks  \n The device context identified by the `pDC` parameter must contain a closed path. After `CreateFromPath` converts a path into a region, Windows discards the closed path from the device context.  \n  \n##  <a name=\"crgn__createpolygonrgn\"></a>  CRgn::CreatePolygonRgn  \n Creates a polygonal region.  \n  \n```  \nBOOL CreatePolygonRgn(\n    LPPOINT lpPoints,  \n    int nCount,  \n    int nMode);\n```  \n  \n### Parameters  \n `lpPoints`  \n Points to an array of **POINT** structures or an array of `CPoint` objects. Each structure specifies the x-coordinate and y-coordinate of one vertex of the polygon. The **POINT** structure has the following form:  \n  \n `typedef struct tagPOINT {`  \n  \n `int x;`  \n  \n `int y;`  \n  \n `} POINT;`  \n  \n `nCount`  \n Specifies the number of **POINT** structures or `CPoint` objects in the array pointed to by `lpPoints`.  \n  \n `nMode`  \n Specifies the filling mode for the region. This parameter may be either **ALTERNATE** or **WINDING**.  \n  \n### Return Value  \n Nonzero if the operation succeeded; otherwise 0.  \n  \n### Remarks  \n The system closes the polygon automatically, if necessary, by drawing a line from the last vertex to the first. The resulting region is stored in the `CRgn` object.  \n  \n The size of a region is limited to 32,767 by 32,767 logical units or 64K of memory, whichever is smaller.  \n  \n When the polygon-filling mode is **ALTERNATE**, the system fills the area between odd-numbered and even-numbered polygon sides on each scan line. That is, the system fills the area between the first and second side, between the third and fourth side, and so on.  \n  \n When the polygon-filling mode is **WINDING**, the system uses the direction in which a figure was drawn to determine whether to fill an area. Each line segment in a polygon is drawn in either a clockwise or a counterclockwise direction. Whenever an imaginary line drawn from an enclosed area to the outside of a figure passes through a clockwise line segment, a count is incremented. When the line passes through a counterclockwise line segment, the count is decremented. The area is filled if the count is nonzero when the line reaches the outside of the figure.  \n  \n When an application has finished using a region created with the `CreatePolygonRgn` function, it should select the region out of the device context and use the `DeleteObject` function to remove it.  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#146](../../mfc/codesnippet/cpp/crgn-class_3.cpp)]  \n  \n##  <a name=\"crgn__createpolypolygonrgn\"></a>  CRgn::CreatePolyPolygonRgn  \n Creates a region consisting of a series of closed polygons.  \n  \n```  \nBOOL CreatePolyPolygonRgn(\n    LPPOINT lpPoints,  \n    LPINT lpPolyCounts,  \n    int nCount,  \n    int nPolyFillMode);\n```  \n  \n### Parameters  \n `lpPoints`  \n Points to an array of **POINT** structures or an array of `CPoint` objects that defines the vertices of the polygons. Each polygon must be explicitly closed because the system does not close them automatically. The polygons are specified consecutively. The **POINT** structure has the following form:  \n  \n `typedef struct tagPOINT {`  \n  \n `int x;`  \n  \n `int y;`  \n  \n `} POINT;`  \n  \n `lpPolyCounts`  \n Points to an array of integers. The first integer specifies the number of vertices in the first polygon in the `lpPoints` array, the second integer specifies the number of vertices in the second polygon, and so on.  \n  \n `nCount`  \n Specifies the total number of integers in the `lpPolyCounts` array.  \n  \n `nPolyFillMode`  \n Specifies the polygon-filling mode. This value may be either **ALTERNATE** or **WINDING**.  \n  \n### Return Value  \n Nonzero if the operation succeeded; otherwise 0.  \n  \n### Remarks  \n The resulting region is stored in the `CRgn` object.  \n  \n The polygons may be disjoint, or they may overlap.  \n  \n The size of a region is limited to 32,767 by 32,767 logical units or 64K of memory, whichever is smaller.  \n  \n When the polygon-filling mode is **ALTERNATE**, the system fills the area between odd-numbered and even-numbered polygon sides on each scan line. That is, the system fills the area between the first and second side, between the third and fourth side, and so on.  \n  \n When the polygon-filling mode is **WINDING**, the system uses the direction in which a figure was drawn to determine whether to fill an area. Each line segment in a polygon is drawn in either a clockwise or a counterclockwise direction. Whenever an imaginary line drawn from an enclosed area to the outside of a figure passes through a clockwise line segment, a count is incremented. When the line passes through a counterclockwise line segment, the count is decremented. The area is filled if the count is nonzero when the line reaches the outside of the figure.  \n  \n When an application has finished using a region created with the `CreatePolyPolygonRgn` function, it should select the region out of the device context and use the [CGDIObject::DeleteObject](../../mfc/reference/cgdiobject-class.md#cgdiobject__deleteobject) member function to remove it.  \n  \n##  <a name=\"crgn__createrectrgn\"></a>  CRgn::CreateRectRgn  \n Creates a rectangular region that is stored in the `CRgn` object.  \n  \n```  \nBOOL CreateRectRgn(\n    int x1,  \n    int y1,  \n    int x2,  \n    int y2);\n```  \n  \n### Parameters  \n `x1`  \n Specifies the logical x-coordinate of the upper-left corner of the region.  \n  \n `y1`  \n Specifies the logical y-coordinate of the upper-left corner of the region.  \n  \n `x2`  \n Specifies the logical x-coordinate of the lower-right corner of the region.  \n  \n `y2`  \n Specifies the logical y-coordinate of the lower-right corner of the region.  \n  \n### Return Value  \n Nonzero if the operation succeeded; otherwise 0.  \n  \n### Remarks  \n The size of a region is limited to 32,767 by 32,767 logical units or 64K of memory, whichever is smaller.  \n  \n When it has finished using a region created by `CreateRectRgn`, an application should use the [CGDIObject::DeleteObject](../../mfc/reference/cgdiobject-class.md#cgdiobject__deleteobject) member function to remove the region.  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#147](../../mfc/codesnippet/cpp/crgn-class_4.cpp)]  \n  \n For an additional example, see [CRgn::CombineRgn](#crgn__combinergn).  \n  \n##  <a name=\"crgn__createrectrgnindirect\"></a>  CRgn::CreateRectRgnIndirect  \n Creates a rectangular region that is stored in the `CRgn` object.  \n  \n```  \nBOOL CreateRectRgnIndirect(LPCRECT lpRect);\n```  \n  \n### Parameters  \n `lpRect`  \n Points to a `RECT` structure or `CRect` object that contains the logical coordinates of the upper-left and lower-right corners of the region. The `RECT` structure has the following form:  \n  \n `typedef struct tagRECT {`  \n  \n `int left;`  \n  \n `int top;`  \n  \n `int right;`  \n  \n `int bottom;`  \n  \n `} RECT;`  \n  \n### Return Value  \n Nonzero if the operation succeeded; otherwise 0.  \n  \n### Remarks  \n The size of a region is limited to 32,767 by 32,767 logical units or 64K of memory, whichever is smaller.  \n  \n When it has finished using a region created by `CreateRectRgnIndirect`, an application should use the [CGDIObject::DeleteObject](../../mfc/reference/cgdiobject-class.md#cgdiobject__deleteobject) member function to remove the region.  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#148](../../mfc/codesnippet/cpp/crgn-class_5.cpp)]  \n  \n##  <a name=\"crgn__createroundrectrgn\"></a>  CRgn::CreateRoundRectRgn  \n Creates a rectangular region with rounded corners that is stored in the `CRgn` object.  \n  \n```  \nBOOL CreateRoundRectRgn(\n    int x1,  \n    int y1,  \n    int x2,  \n    int y2,  \n    int x3,  \n    int y3);\n```  \n  \n### Parameters  \n `x1`  \n Specifies the logical x-coordinate of the upper-left corner of the region.  \n  \n `y1`  \n Specifies the logical y-coordinate of the upper-left corner of the region.  \n  \n `x2`  \n Specifies the logical x-coordinate of the lower-right corner of the region.  \n  \n `y2`  \n Specifies the logical y-coordinate of the lower-right corner of the region.  \n  \n *x3*  \n Specifies the width of the ellipse used to create the rounded corners.  \n  \n `y3`  \n Specifies the height of the ellipse used to create the rounded corners.  \n  \n### Return Value  \n Nonzero if the operation succeeded; otherwise 0.  \n  \n### Remarks  \n The size of a region is limited to 32,767 by 32,767 logical units or 64K of memory, whichever is smaller.  \n  \n When an application has finished using a region created with the `CreateRoundRectRgn` function, it should select the region out of the device context and use the [CGDIObject::DeleteObject](../../mfc/reference/cgdiobject-class.md#cgdiobject__deleteobject) member function to remove it.  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#149](../../mfc/codesnippet/cpp/crgn-class_6.cpp)]  \n  \n##  <a name=\"crgn__crgn\"></a>  CRgn::CRgn  \n Constructs a `CRgn` object.  \n  \n```  \nCRgn();\n```  \n  \n### Remarks  \n The `m_hObject` data member does not contain a valid Windows GDI region until the object is initialized with one or more of the other `CRgn` member functions.  \n  \n### Example  \n  See the example for [CRgn::CreateRoundRectRgn](#crgn__createroundrectrgn).  \n  \n##  <a name=\"crgn__equalrgn\"></a>  CRgn::EqualRgn  \n Determines whether the given region is equivalent to the region stored in the `CRgn` object.  \n  \n```  \nBOOL EqualRgn(CRgn* pRgn) const;\n\n \n```  \n  \n### Parameters  \n `pRgn`  \n Identifies a region.  \n  \n### Return Value  \n Nonzero if the two regions are equivalent; otherwise 0.  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#150](../../mfc/codesnippet/cpp/crgn-class_7.cpp)]  \n  \n##  <a name=\"crgn__fromhandle\"></a>  CRgn::FromHandle  \n Returns a pointer to a `CRgn` object when given a handle to a Windows region.  \n  \n```  \nstatic CRgn* PASCAL FromHandle(HRGN hRgn);\n```  \n  \n### Parameters  \n `hRgn`  \n Specifies a handle to a Windows region.  \n  \n### Return Value  \n A pointer to a `CRgn` object. If the function was not successful, the return value is **NULL**.  \n  \n### Remarks  \n If a `CRgn` object is not already attached to the handle, a temporary `CRgn` object is created and attached. This temporary `CRgn` object is valid only until the next time the application has idle time in its event loop, at which time all temporary graphic objects are deleted. Another way of saying this is that the temporary object is only valid during the processing of one window message.  \n  \n##  <a name=\"crgn__getregiondata\"></a>  CRgn::GetRegionData  \n Fills the specified buffer with data describing the region.  \n  \n```  \nint GetRegionData(\n    LPRGNDATA lpRgnData,  \n    int nCount) const;\n\n \n```  \n  \n### Parameters  \n `lpRgnData`  \n Points to a [RGNDATA](../../mfc/reference/rgndata-structure.md) data structure that receives the information. If this parameter is **NULL**, the return value contains the number of bytes needed for the region data.  \n  \n `nCount`  \n Specifies the size, in bytes, of the `lpRgnData` buffer.  \n  \n### Return Value  \n If the function succeeds and `nCount` specifies an adequate number of bytes, the return value is always `nCount`. If the function fails, or if `nCount` specifies less than adequate number of bytes, the return value is 0 (error).  \n  \n### Remarks  \n This data includes the dimensions of the rectangles that make up the region. This function is used in conjunction with the `CRgn::CreateFromData` function.  \n  \n##  <a name=\"crgn__getrgnbox\"></a>  CRgn::GetRgnBox  \n Retrieves the coordinates of the bounding rectangle of the `CRgn` object.  \n  \n```  \nint GetRgnBox(LPRECT lpRect) const;\n\n \n```  \n  \n### Parameters  \n `lpRect`  \n Points to a `RECT` structure or `CRect` object to receive the coordinates of the bounding rectangle. The `RECT` structure has the following form:  \n  \n `typedef struct tagRECT {`  \n  \n `int left;`  \n  \n `int top;`  \n  \n `int right;`  \n  \n `int bottom;`  \n  \n `} RECT;`  \n  \n### Return Value  \n Specifies the region's type. It can be any of the following values:  \n  \n- **COMPLEXREGION** Region has overlapping borders.  \n  \n- **NULLREGION** Region is empty.  \n  \n- **ERROR** `CRgn` object does not specify a valid region.  \n  \n- **SIMPLEREGION** Region has no overlapping borders.  \n  \n### Example  \n  See the example for [CRgn::CreatePolygonRgn](#crgn__createpolygonrgn).  \n  \n##  <a name=\"crgn__offsetrgn\"></a>  CRgn::OffsetRgn  \n Moves the region stored in the `CRgn` object by the specified offsets.  \n  \n```  \nint OffsetRgn(\n    int x,  \n    int y);\n\n \nint OffsetRgn(\n    POINT point);\n```  \n  \n### Parameters  \n *x*  \n Specifies the number of units to move left or right.  \n  \n *y*  \n Specifies the number of units to move up or down.  \n  \n `point`  \n The x-coordinate of `point` specifies the number of units to move left or right. The y-coordinate of `point` specifies the number of units to move up or down. The `point` parameter may be either a **POINT** structure or a `CPoint` object.  \n  \n### Return Value  \n The new region's type. It can be any one of the following values:  \n  \n- **COMPLEXREGION** Region has overlapping borders.  \n  \n- **ERROR** Region handle is not valid.  \n  \n- **NULLREGION** Region is empty.  \n  \n- **SIMPLEREGION** Region has no overlapping borders.  \n  \n### Remarks  \n The function moves the region *x* units along the x-axis and *y* units along the y-axis.  \n  \n The coordinate values of a region must be less than or equal to 32,767 and greater than or equal to –32,768. The *x* and *y* parameters must be carefully chosen to prevent invalid region coordinates.  \n  \n### Example  \n  See the example for [CRgn::CreateEllipticRgn](#crgn__createellipticrgn).  \n  \n##  <a name=\"crgn__operator_hrgn\"></a>  CRgn::operator HRGN  \n Use this operator to get the attached Windows GDI handle of the `CRgn` object.  \n  \n```  \noperator HRGN() const;\n\n \n```  \n  \n### Return Value  \n If successful, a handle to the Windows GDI object represented by the `CRgn` object; otherwise **NULL**.  \n  \n### Remarks  \n This operator is a casting operator, which supports direct use of an **HRGN** object.  \n  \n For more information about using graphic objects, see the article [Graphic Objects](http://msdn.microsoft.com/library/windows/desktop/dd144962) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"crgn__ptinregion\"></a>  CRgn::PtInRegion  \n Checks whether the point given by *x* and *y* is in the region stored in the `CRgn` object.  \n  \n```  \nBOOL PtInRegion(\n    int x,  \n    int y) const;\n\n \n \nBOOL PtInRegion(\n    POINT point) const;\n\n \n```  \n  \n### Parameters  \n *x*  \n Specifies the logical x-coordinate of the point to test.  \n  \n *y*  \n Specifies the logical y-coordinate of the point to test.  \n  \n `point`  \n The x- and y-coordinates of `point` specify the x- and y-coordinates of the point to test the value of. The `point` parameter can either be a **POINT** structure or a `CPoint` object.  \n  \n### Return Value  \n Nonzero if the point is in the region; otherwise 0.  \n  \n##  <a name=\"crgn__rectinregion\"></a>  CRgn::RectInRegion  \n Determines whether any part of the rectangle specified by `lpRect` is within the boundaries of the region stored in the `CRgn` object.  \n  \n```  \nBOOL RectInRegion(LPCRECT lpRect) const;\n\n \n```  \n  \n### Parameters  \n `lpRect`  \n Points to a `RECT` structure or `CRect` object. The `RECT` structure has the following form:  \n  \n `typedef struct tagRECT {`  \n  \n `int left;`  \n  \n `int top;`  \n  \n `int right;`  \n  \n `int bottom;`  \n  \n `} RECT;`  \n  \n### Return Value  \n Nonzero if any part of the specified rectangle lies within the boundaries of the region; otherwise 0.  \n  \n##  <a name=\"crgn__setrectrgn\"></a>  CRgn::SetRectRgn  \n Creates a rectangular region.  \n  \n```  \nvoid SetRectRgn(\n    int x1,  \n    int y1,  \n    int x2,  \n    int y2);\n\n \nvoid SetRectRgn(\n    LPCRECT lpRect);\n```  \n  \n### Parameters  \n `x1`  \n Specifies the x-coordinate of the upper-left corner of the rectangular region.  \n  \n `y1`  \n Specifies the y-coordinate of the upper-left corner of the rectangular region.  \n  \n `x2`  \n Specifies the x-coordinate of the lower-right corner of the rectangular region.  \n  \n `y2`  \n Specifies the y-coordinate of the lower-right corner of the rectangular region.  \n  \n `lpRect`  \n Specifies the rectangular region. Can be either a pointer to a `RECT` structure or a `CRect` object.  \n  \n### Remarks  \n Unlike [CreateRectRgn](#crgn__createrectrgn), however, it does not allocate any additional memory from the local Windows application heap. Instead, it uses the space allocated for the region stored in the `CRgn` object. This means that the `CRgn` object must already have been initialized with a valid Windows region before calling `SetRectRgn`. The points given by `x1`, `y1`, `x2`, and `y2` specify the minimum size of the allocated space.  \n  \n Use this function instead of the `CreateRectRgn` member function to avoid calls to the local memory manager.  \n  \n## See Also  \n [CWnd Class](../../mfc/reference/cwnd-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)\n\n\n\n"}