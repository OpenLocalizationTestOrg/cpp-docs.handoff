{"nodes":[{"pos":[12,53],"content":"Fundamental Types  (C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Fundamental Types  (C++) | Microsoft Docs","pos":[0,41]}]},{"content":"Fundamental Types  (C++)","pos":[1962,1986]},{"content":"Fundamental types in C++ are divided into three categories: integral, floating point, and void.","pos":[1987,2082]},{"content":"Integral types are capable of handling whole numbers.","pos":[2083,2136]},{"content":"Floating point types are capable of specifying values that may have fractional parts.","pos":[2137,2222]},{"content":"The <bpt id=\"p1\">[</bpt>void<ept id=\"p1\">](../cpp/void-cpp.md)</ept> type describes an empty set of values.","pos":[2229,2298],"source":"The [void](../cpp/void-cpp.md) type describes an empty set of values."},{"content":"No variable of type <ph id=\"ph1\">`void`</ph> can be specified — it is used primarily to declare functions that return no values or to declare generic pointers to untyped or arbitrarily typed data.","pos":[2299,2477],"source":" No variable of type `void` can be specified — it is used primarily to declare functions that return no values or to declare generic pointers to untyped or arbitrarily typed data."},{"content":"Any expression can be explicitly converted or cast to type <ph id=\"ph1\">`void`</ph>.","pos":[2478,2544],"source":" Any expression can be explicitly converted or cast to type `void`."},{"content":"However, such expressions are restricted to the following uses:","pos":[2545,2608]},{"content":"An expression statement.","pos":[2618,2642]},{"content":"(See <bpt id=\"p1\">[</bpt>Expressions<ept id=\"p1\">](../cpp/expressions-cpp.md)</ept>, for more information.)","pos":[2643,2712],"source":" (See [Expressions](../cpp/expressions-cpp.md), for more information.)"},{"content":"The left operand of the comma operator.","pos":[2722,2761]},{"content":"(See <bpt id=\"p1\">[</bpt>Comma Operator<ept id=\"p1\">](../cpp/comma-operator.md)</ept> for more information.)","pos":[2762,2832],"source":" (See [Comma Operator](../cpp/comma-operator.md) for more information.)"},{"content":"The second or third operand of the conditional operator (<ph id=\"ph1\">`? :`</ph>).","pos":[2842,2906],"source":"The second or third operand of the conditional operator (`? :`)."},{"content":"(See <bpt id=\"p1\">[</bpt>Expressions with the Conditional Operator<ept id=\"p1\">](../cpp/conditional-operator-q.md)</ept> for more information.)","pos":[2907,3012],"source":" (See [Expressions with the Conditional Operator](../cpp/conditional-operator-q.md) for more information.)"},{"content":"The following table explains the restrictions on type sizes.","pos":[3019,3079]},{"content":"These restrictions are independent of the Microsoft implementation.","pos":[3080,3147]},{"content":"Fundamental Types of the C++ Language","pos":[3157,3194]},{"content":"Category","pos":[3201,3209]},{"content":"Type","pos":[3210,3214]},{"content":"Contents","pos":[3215,3223]},{"content":"Integral","pos":[3273,3281]},{"content":"Type <ph id=\"ph1\">`char`</ph> is an integral type that usually contains members of the basic execution character set — By default, this is ASCII in Microsoft C++.","pos":[3289,3433],"source":"Type `char` is an integral type that usually contains members of the basic execution character set — By default, this is ASCII in Microsoft C++."},{"content":"The C++ compiler treats variables of type <ph id=\"ph1\">`char`</ph>, <ph id=\"ph2\">`signed`</ph> <ph id=\"ph3\">`char`</ph>, and <ph id=\"ph4\">`unsigned`</ph> <ph id=\"ph5\">`char`</ph> as having different types.","pos":[3446,3561],"source":" The C++ compiler treats variables of type `char`, `signed` `char`, and `unsigned` `char` as having different types."},{"content":"Variables of type <ph id=\"ph1\">`char`</ph> are promoted to <ph id=\"ph2\">`int`</ph> as if they are type <ph id=\"ph3\">`signed`</ph> <ph id=\"ph4\">`char`</ph> by default, unless the /J compilation option is used.","pos":[3562,3698],"source":" Variables of type `char` are promoted to `int` as if they are type `signed` `char` by default, unless the /J compilation option is used."},{"content":"In this case they are treated as type <ph id=\"ph1\">`unsigned`</ph> <ph id=\"ph2\">`char`</ph> and are promoted to <ph id=\"ph3\">`int`</ph> without sign extension.","pos":[3699,3804],"source":" In this case they are treated as type `unsigned` `char` and are promoted to `int` without sign extension."},{"content":"Type <ph id=\"ph1\">`bool`</ph> is an integral type that can have one of the two values <ph id=\"ph2\">`true`</ph> or <ph id=\"ph3\">`false`</ph>.","pos":[3817,3903],"source":"Type `bool` is an integral type that can have one of the two values `true` or `false`."},{"content":"Its size is unspecified.","pos":[3904,3928]},{"content":"Type <ph id=\"ph1\">`short`</ph> <ph id=\"ph2\">`int`</ph> (or simply <ph id=\"ph3\">`short`</ph>) is an integral type that is larger than or equal to the size of type <ph id=\"ph4\">`char`</ph>, and shorter than or equal to the size of type <ph id=\"ph5\">`int`</ph>.","pos":[3942,4110],"source":"Type `short` `int` (or simply `short`) is an integral type that is larger than or equal to the size of type `char`, and shorter than or equal to the size of type `int`."},{"content":"Objects of type <ph id=\"ph1\">`short`</ph> can be declared as <ph id=\"ph2\">`signed`</ph> <ph id=\"ph3\">`short`</ph> or <ph id=\"ph4\">`unsigned short`</ph>.","pos":[4123,4203],"source":" Objects of type `short` can be declared as `signed` `short` or `unsigned short`."},{"content":"is a synonym for <ph id=\"ph1\">`short`</ph>.","pos":[4219,4244],"source":" is a synonym for `short`."},{"content":"Type <ph id=\"ph1\">`int`</ph> is an integral type that is larger than or equal to the size of type <ph id=\"ph2\">`short`</ph> <ph id=\"ph3\">`int`</ph>, and shorter than or equal to the size of type <ph id=\"ph4\">`long`</ph>.","pos":[4256,4404],"source":"Type `int` is an integral type that is larger than or equal to the size of type `short` `int`, and shorter than or equal to the size of type `long`."},{"content":"Objects of type <ph id=\"ph1\">`int`</ph> can be declared as <ph id=\"ph2\">`signed`</ph> <ph id=\"ph3\">`int`</ph> or <ph id=\"ph4\">`unsigned`</ph> <ph id=\"ph5\">`int`</ph>.","pos":[4417,4493],"source":" Objects of type `int` can be declared as `signed` `int` or `unsigned` `int`."},{"content":"is a synonym for <ph id=\"ph1\">`int`</ph>.","pos":[4509,4532],"source":" is a synonym for `int`."},{"pos":[4546,4569],"content":", <ph id=\"ph1\">`__int16`</ph>, <ph id=\"ph2\">`__int32`</ph>,","source":", `__int16`, `__int32`, "},{"content":"Sized integer <ph id=\"ph1\">`__int``n`</ph>, where <ph id=\"ph2\">`n`</ph> is the size, in bits, of the integer variable.","pos":[4580,4662],"source":"Sized integer `__int``n`, where `n` is the size, in bits, of the integer variable."},{"content":", <ph id=\"ph1\">`__int16`</ph>, <ph id=\"ph2\">`__int32`</ph> and <ph id=\"ph3\">`__int64`</ph> are Microsoft-specific keywords.","pos":[4671,4740],"source":", `__int16`, `__int32` and `__int64` are Microsoft-specific keywords."},{"content":"Not all types are available on all architectures.","pos":[4741,4790]},{"content":"is not supported.)","pos":[4803,4821]},{"content":"Type <ph id=\"ph1\">`long`</ph> (or <ph id=\"ph2\">`long`</ph> <ph id=\"ph3\">`int`</ph>) is an integral type that is larger than or equal to the size of type <ph id=\"ph4\">`int`</ph>.","pos":[4834,4939],"source":"Type `long` (or `long` `int`) is an integral type that is larger than or equal to the size of type `int`."},{"content":"Objects of type <ph id=\"ph1\">`long`</ph> can be declared as <ph id=\"ph2\">`signed`</ph> <ph id=\"ph3\">`long`</ph> or <ph id=\"ph4\">`unsigned`</ph> <ph id=\"ph5\">`long`</ph>.","pos":[4952,5031],"source":" Objects of type `long` can be declared as `signed` `long` or `unsigned` `long`."},{"content":"is a synonym for <ph id=\"ph1\">`long`</ph>.","pos":[5048,5072],"source":" is a synonym for `long`."},{"content":"Larger than an unsigned <ph id=\"ph1\">`long`</ph>.","pos":[5092,5123],"source":"Larger than an unsigned `long`."},{"content":"Objects of type <ph id=\"ph1\">`long long`</ph> can be declared as <ph id=\"ph2\">`signed`</ph> <ph id=\"ph3\">`long long`</ph> or <ph id=\"ph4\">`unsigned`</ph> <ph id=\"ph5\">`long long`</ph>.","pos":[5136,5230],"source":" Objects of type `long long` can be declared as `signed` `long long` or `unsigned` `long long`."},{"content":"is a synonym for <ph id=\"ph1\">`long long`</ph>.","pos":[5252,5281],"source":" is a synonym for `long long`."},{"pos":[5296,5297],"content":","},{"content":"A variable of type <ph id=\"ph1\">`wchar_t`</ph> designates a wide-character or multibyte character type.","pos":[5310,5395],"source":"A variable of type `wchar_t` designates a wide-character or multibyte character type."},{"content":"By default, <ph id=\"ph1\">`wchar_t`</ph> is a native type, but you can use <bpt id=\"p1\">[</bpt>/Zc:wchar_t-<ept id=\"p1\">](../build/reference/zc-wchar-t-wchar-t-is-native-type.md)</ept> to make <ph id=\"ph2\">`wchar_t`</ph> a typedef for <ph id=\"ph3\">`unsigned short`</ph>.","pos":[5396,5573],"source":" By default, `wchar_t` is a native type, but you can use [/Zc:wchar_t-](../build/reference/zc-wchar-t-wchar-t-is-native-type.md) to make `wchar_t` a typedef for `unsigned short`."},{"content":"The <ph id=\"ph1\">`__wchar_t`</ph> type is a Microsoft-specific synonym for the native <ph id=\"ph2\">`wchar_t`</ph> type.","pos":[5574,5657],"source":" The `__wchar_t` type is a Microsoft-specific synonym for the native `wchar_t` type."},{"content":"Use the L prefix before a character or string literal to designate the wide-character type.","pos":[5670,5761]},{"content":"Floating point","pos":[5766,5780]},{"pos":[5789,5838],"content":"Type <ph id=\"ph1\">`float`</ph> is the smallest floating point type.","source":"Type `float` is the smallest floating point type."},{"content":"Type <ph id=\"ph1\">`double`</ph> is a floating point type that is larger than or equal to type <ph id=\"ph2\">`float`</ph>, but shorter than or equal to the size of type <ph id=\"ph3\">`long`</ph> <ph id=\"ph4\">`double`</ph>.","pos":[5853,6000],"source":"Type `double` is a floating point type that is larger than or equal to type `float`, but shorter than or equal to the size of type `long` `double`."},{"content":"Microsoft specific: The representation of <ph id=\"ph1\">`long double`</ph> and <ph id=\"ph2\">`double`</ph> is identical.","pos":[6013,6095],"source":" Microsoft specific: The representation of `long double` and `double` is identical."},{"content":"However, <ph id=\"ph1\">`long double`</ph> and <ph id=\"ph2\">`double`</ph> are separate types.","pos":[6096,6151],"source":" However, `long double` and `double` are separate types."},{"pos":[6171,6263],"content":"Type <ph id=\"ph1\">`long`</ph> <ph id=\"ph2\">`double`</ph> is a floating point type that is larger than or equal to type <ph id=\"ph3\">`double`</ph>.","source":"Type `long` `double` is a floating point type that is larger than or equal to type `double`."},{"content":"Microsoft Specific","pos":[6273,6291]},{"content":"The following table lists the amount of storage required for fundamental types in Microsoft C++.","pos":[6300,6396]},{"content":"Sizes of Fundamental Types","pos":[6406,6432]},{"content":"Type","pos":[6439,6443]},{"content":"Size","pos":[6444,6448]},{"pos":[6485,6526],"content":", <ph id=\"ph1\">`char`</ph>, <ph id=\"ph2\">`unsigned char`</ph>, <ph id=\"ph3\">`signed char`</ph>,","source":", `char`, `unsigned char`, `signed char`, "},{"content":"1 byte","pos":[6536,6542]},{"pos":[6556,6595],"content":", <ph id=\"ph1\">`short`</ph>, <ph id=\"ph2\">`unsigned short`</ph>, <ph id=\"ph3\">`wchar_t`</ph>,","source":", `short`, `unsigned short`, `wchar_t`, "},{"content":"2 bytes","pos":[6608,6615]},{"pos":[6627,6670],"content":", <ph id=\"ph1\">`__int32`</ph>, <ph id=\"ph2\">`int`</ph>, <ph id=\"ph3\">`unsigned int`</ph>, <ph id=\"ph4\">`long`</ph>,","source":", `__int32`, `int`, `unsigned int`, `long`, "},{"content":"4 bytes","pos":[6687,6694]},{"pos":[6707,6734],"content":", <ph id=\"ph1\">`__int64`</ph>, <ph id=\"ph2\">`long double`</ph>,","source":", `__int64`, `long double`, "},{"content":"8 bytes","pos":[6747,6754]},{"content":"END Microsoft Specific","pos":[6764,6786]},{"pos":[6795,6896],"content":"See <bpt id=\"p1\">[</bpt>Data Type Ranges<ept id=\"p1\">](../cpp/data-type-ranges.md)</ept> for a summary of the range of values of each type.","source":"See [Data Type Ranges](../cpp/data-type-ranges.md) for a summary of the range of values of each type."},{"pos":[6903,7006],"content":"For more information about type conversion, see <bpt id=\"p1\">[</bpt>Standard Conversions<ept id=\"p1\">](../cpp/standard-conversions.md)</ept>.","source":"For more information about type conversion, see [Standard Conversions](../cpp/standard-conversions.md)."},{"content":"See Also","pos":[7015,7023]},{"content":"Data Type Ranges","pos":[7028,7044]}],"content":"---\ntitle: \"Fundamental Types  (C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"__wchar_t_cpp\"\n  - \"long_double_cpp\"\n  - \"unsigned\"\n  - \"wchar_t_cpp\"\n  - \"float_cpp\"\n  - \"wchar_t\"\n  - \"char\"\n  - \"char_cpp\"\n  - \"signed\"\n  - \"__wchar_t\"\n  - \"signed_cpp\"\n  - \"short\"\n  - \"double_cpp\"\n  - \"int_cpp\"\n  - \"long\"\n  - \"__intn_cpp\"\n  - \"short_cpp\"\n  - \"double\"\n  - \"unsigned_cpp\"\n  - \"float\"\n  - \"__intn\"\n  - \"long_cpp\"\n  - \"int\"\n  - \"long_double\"\n  - \"unsigned_int\"\n  - \"__int8\"\n  - \"__int8_cpp\"\n  - \"__int16\"\n  - \"__int16_cpp\"\n  - \"__int32\"\n  - \"__int32_cpp\"\n  - \"__int64\"\n  - \"__int64_cpp\"\n  - \"__int128\"\n  - \"__int128_cpp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"specifiers [C++], type\"\n  - \"float keyword [C++]\"\n  - \"char keyword [C++]\"\n  - \"__wchar_t keyword [C++]\"\n  - \"signed types [C++], summary of data types\"\n  - \"Integer data type, C++ data types\"\n  - \"arithmetic operations [C++], types\"\n  - \"int data type\"\n  - \"unsigned types [C++], summary of data types\"\n  - \"short data type\"\n  - \"double data type, summary of types\"\n  - \"long long keyword [C++]\"\n  - \"long double keyword [C++]\"\n  - \"unsigned types [C++]\"\n  - \"signed types [C++]\"\n  - \"void keyword [C++]\"\n  - \"storage [C++], basic type\"\n  - \"integral types, C++\"\n  - \"wchar_t keyword [C++]\"\n  - \"floating-point numbers, C++ data types\"\n  - \"long keyword [C++]\"\n  - \"type specifiers [C++]\"\n  - \"integral types\"\n  - \"long keyword [C++], C++ data types\"\n  - \"storing types [C++]\"\n  - \"data types [C++], void\"\nms.assetid: 58b0106a-0406-4b74-a430-7cbd315c0f89\ncaps.latest.revision: 19\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Fundamental Types  (C++)\nFundamental types in C++ are divided into three categories: integral, floating point, and void. Integral types are capable of handling whole numbers. Floating point types are capable of specifying values that may have fractional parts.  \n  \n The [void](../cpp/void-cpp.md) type describes an empty set of values. No variable of type `void` can be specified — it is used primarily to declare functions that return no values or to declare generic pointers to untyped or arbitrarily typed data. Any expression can be explicitly converted or cast to type `void`. However, such expressions are restricted to the following uses:  \n  \n-   An expression statement. (See [Expressions](../cpp/expressions-cpp.md), for more information.)  \n  \n-   The left operand of the comma operator. (See [Comma Operator](../cpp/comma-operator.md) for more information.)  \n  \n-   The second or third operand of the conditional operator (`? :`). (See [Expressions with the Conditional Operator](../cpp/conditional-operator-q.md) for more information.)  \n  \n The following table explains the restrictions on type sizes. These restrictions are independent of the Microsoft implementation.  \n  \n### Fundamental Types of the C++ Language  \n  \n|Category|Type|Contents|  \n|--------------|----------|--------------|  \n|Integral|`char`|Type `char` is an integral type that usually contains members of the basic execution character set — By default, this is ASCII in Microsoft C++.<br /><br /> The C++ compiler treats variables of type `char`, `signed` `char`, and `unsigned` `char` as having different types. Variables of type `char` are promoted to `int` as if they are type `signed` `char` by default, unless the /J compilation option is used. In this case they are treated as type `unsigned` `char` and are promoted to `int` without sign extension.|  \n||`bool`|Type `bool` is an integral type that can have one of the two values `true` or `false`. Its size is unspecified.|  \n||`short`|Type `short` `int` (or simply `short`) is an integral type that is larger than or equal to the size of type `char`, and shorter than or equal to the size of type `int`.<br /><br /> Objects of type `short` can be declared as `signed` `short` or `unsigned short`. `Signed short` is a synonym for `short`.|  \n||`int`|Type `int` is an integral type that is larger than or equal to the size of type `short` `int`, and shorter than or equal to the size of type `long`.<br /><br /> Objects of type `int` can be declared as `signed` `int` or `unsigned` `int`. `Signed` `int` is a synonym for `int`.|  \n||`__int8`, `__int16`, `__int32`, `__int64`|Sized integer `__int``n`, where `n` is the size, in bits, of the integer variable. `__int8`, `__int16`, `__int32` and `__int64` are Microsoft-specific keywords. Not all types are available on all architectures. `(__int128` is not supported.)|  \n||`long`|Type `long` (or `long` `int`) is an integral type that is larger than or equal to the size of type `int`.<br /><br /> Objects of type `long` can be declared as `signed` `long` or `unsigned` `long`. `Signed` `long` is a synonym for `long`.|  \n||`long` `long`|Larger than an unsigned `long`.<br /><br /> Objects of type `long long` can be declared as `signed` `long long` or `unsigned` `long long`. `Signed` `long long` is a synonym for `long long`.|  \n||`wchar_t`, `__wchar_t`|A variable of type `wchar_t` designates a wide-character or multibyte character type. By default, `wchar_t` is a native type, but you can use [/Zc:wchar_t-](../build/reference/zc-wchar-t-wchar-t-is-native-type.md) to make `wchar_t` a typedef for `unsigned short`. The `__wchar_t` type is a Microsoft-specific synonym for the native `wchar_t` type.<br /><br /> Use the L prefix before a character or string literal to designate the wide-character type.|  \n|Floating point|`float`|Type `float` is the smallest floating point type.|  \n||`double`|Type `double` is a floating point type that is larger than or equal to type `float`, but shorter than or equal to the size of type `long` `double`.<br /><br /> Microsoft specific: The representation of `long double` and `double` is identical. However, `long double` and `double` are separate types.|  \n||`long double`|Type `long` `double` is a floating point type that is larger than or equal to type `double`.|  \n  \n **Microsoft Specific**  \n  \n The following table lists the amount of storage required for fundamental types in Microsoft C++.  \n  \n### Sizes of Fundamental Types  \n  \n|Type|Size|  \n|----------|----------|  \n|`bool`, `char`, `unsigned char`, `signed char`, `__int8`|1 byte|  \n|`__int16`, `short`, `unsigned short`, `wchar_t`, `__wchar_t`|2 bytes|  \n|`float`, `__int32`, `int`, `unsigned int`, `long`, `unsigned long`|4 bytes|  \n|`double`, `__int64`, `long double`, `long long`|8 bytes|  \n  \n **END Microsoft Specific**  \n  \n See [Data Type Ranges](../cpp/data-type-ranges.md) for a summary of the range of values of each type.  \n  \n For more information about type conversion, see [Standard Conversions](../cpp/standard-conversions.md).  \n  \n## See Also  \n [Data Type Ranges](../cpp/data-type-ranges.md)"}