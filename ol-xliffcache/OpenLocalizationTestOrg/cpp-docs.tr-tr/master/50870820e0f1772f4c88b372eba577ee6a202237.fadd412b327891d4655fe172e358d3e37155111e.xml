{"nodes":[{"pos":[12,43],"content":"CComBSTR Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CComBSTR Class | Microsoft Docs","pos":[0,31]}]},{"pos":[673,687],"content":"CComBSTR Class","linkify":"CComBSTR Class","nodes":[{"content":"CComBSTR Class","pos":[0,14]}]},{"pos":[688,724],"content":"This class is a wrapper for <ph id=\"ph1\">`BSTR`</ph>s.","source":"This class is a wrapper for `BSTR`s."},{"pos":[733,739],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[776,783],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[793,812],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[819,823]},{"content":"Description","pos":[824,835]},{"pos":[873,914],"content":"<bpt id=\"p1\">[</bpt>CComBSTR::CComBSTR<ept id=\"p1\">](#ccombstr__ccombstr)</ept>","source":"[CComBSTR::CComBSTR](#ccombstr__ccombstr)"},{"content":"The constructor.","pos":[915,931]},{"pos":[936,983],"content":"<bpt id=\"p1\">[</bpt>CComBSTR::~CComBSTR<ept id=\"p1\">](#ccombstr___dtorccombstr)</ept>","source":"[CComBSTR::~CComBSTR](#ccombstr___dtorccombstr)"},{"content":"The destructor.","pos":[984,999]},{"pos":[1010,1024],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1031,1035]},{"content":"Description","pos":[1036,1047]},{"pos":[1085,1122],"content":"<bpt id=\"p1\">[</bpt>CComBSTR::Append<ept id=\"p1\">](#ccombstr__append)</ept>","source":"[CComBSTR::Append](#ccombstr__append)"},{"pos":[1123,1151],"content":"Appends a string to <ph id=\"ph1\">`m_str`</ph>.","source":"Appends a string to `m_str`."},{"pos":[1156,1201],"content":"<bpt id=\"p1\">[</bpt>CComBSTR::AppendBSTR<ept id=\"p1\">](#ccombstr__appendbstr)</ept>","source":"[CComBSTR::AppendBSTR](#ccombstr__appendbstr)"},{"pos":[1202,1230],"content":"Appends a <ph id=\"ph1\">`BSTR`</ph> to <ph id=\"ph2\">`m_str`</ph>.","source":"Appends a `BSTR` to `m_str`."},{"pos":[1235,1282],"content":"<bpt id=\"p1\">[</bpt>CComBSTR::AppendBytes<ept id=\"p1\">](#ccombstr__appendbytes)</ept>","source":"[CComBSTR::AppendBytes](#ccombstr__appendbytes)"},{"pos":[1283,1330],"content":"Appends a specified number of bytes to <ph id=\"ph1\">`m_str`</ph>.","source":"Appends a specified number of bytes to `m_str`."},{"pos":[1335,1382],"content":"<bpt id=\"p1\">[</bpt>CComBSTR::ArrayToBSTR<ept id=\"p1\">](#ccombstr__arraytobstr)</ept>","source":"[CComBSTR::ArrayToBSTR](#ccombstr__arraytobstr)"},{"pos":[1383,1499],"content":"Creates a <ph id=\"ph1\">`BSTR`</ph> from the first character of each element in the safearray and attaches it to the <ph id=\"ph2\">`CComBSTR`</ph> object.","source":"Creates a `BSTR` from the first character of each element in the safearray and attaches it to the `CComBSTR` object."},{"pos":[1504,1549],"content":"<bpt id=\"p1\">[</bpt>CComBSTR::AssignBSTR<ept id=\"p1\">](#ccombstr__assignbstr)</ept>","source":"[CComBSTR::AssignBSTR](#ccombstr__assignbstr)"},{"pos":[1550,1578],"content":"Assigns a <ph id=\"ph1\">`BSTR`</ph> to <ph id=\"ph2\">`m_str`</ph>.","source":"Assigns a `BSTR` to `m_str`."},{"pos":[1583,1620],"content":"<bpt id=\"p1\">[</bpt>CComBSTR::Attach<ept id=\"p1\">](#ccombstr__attach)</ept>","source":"[CComBSTR::Attach](#ccombstr__attach)"},{"pos":[1621,1664],"content":"Attaches a <ph id=\"ph1\">`BSTR`</ph> to the <ph id=\"ph2\">`CComBSTR`</ph> object.","source":"Attaches a `BSTR` to the `CComBSTR` object."},{"pos":[1669,1716],"content":"<bpt id=\"p1\">[</bpt>CComBSTR::BSTRToArray<ept id=\"p1\">](#ccombstr__bstrtoarray)</ept>","source":"[CComBSTR::BSTRToArray](#ccombstr__bstrtoarray)"},{"pos":[1717,1839],"content":"Creates a zero-based one-dimensional safearray, where each element of the array is a character from the <ph id=\"ph1\">`CComBSTR`</ph> object.","source":"Creates a zero-based one-dimensional safearray, where each element of the array is a character from the `CComBSTR` object."},{"pos":[1844,1889],"content":"<bpt id=\"p1\">[</bpt>CComBSTR::ByteLength<ept id=\"p1\">](#ccombstr__bytelength)</ept>","source":"[CComBSTR::ByteLength](#ccombstr__bytelength)"},{"pos":[1890,1929],"content":"Returns the length of <ph id=\"ph1\">`m_str`</ph> in bytes.","source":"Returns the length of `m_str` in bytes."},{"pos":[1934,1967],"content":"<bpt id=\"p1\">[</bpt>CComBSTR::Copy<ept id=\"p1\">](#ccombstr__copy)</ept>","source":"[CComBSTR::Copy](#ccombstr__copy)"},{"pos":[1968,1994],"content":"Returns a copy of <ph id=\"ph1\">`m_str`</ph>.","source":"Returns a copy of `m_str`."},{"pos":[1999,2036],"content":"<bpt id=\"p1\">[</bpt>CComBSTR::CopyTo<ept id=\"p1\">](#ccombstr__copyto)</ept>","source":"[CComBSTR::CopyTo](#ccombstr__copyto)"},{"pos":[2037,2089],"content":"Returns a copy of <ph id=\"ph1\">`m_str`</ph> via an <bpt id=\"p1\">**</bpt>[out]<ept id=\"p1\">**</ept> parameter","source":"Returns a copy of `m_str` via an **[out]** parameter"},{"pos":[2094,2131],"content":"<bpt id=\"p1\">[</bpt>CComBSTR::Detach<ept id=\"p1\">](#ccombstr__detach)</ept>","source":"[CComBSTR::Detach](#ccombstr__detach)"},{"pos":[2132,2176],"content":"Detaches <ph id=\"ph1\">`m_str`</ph> from the <ph id=\"ph2\">`CComBSTR`</ph> object.","source":"Detaches `m_str` from the `CComBSTR` object."},{"pos":[2181,2216],"content":"<bpt id=\"p1\">[</bpt>CComBSTR::Empty<ept id=\"p1\">](#ccombstr__empty)</ept>","source":"[CComBSTR::Empty](#ccombstr__empty)"},{"pos":[2217,2231],"content":"Frees <ph id=\"ph1\">`m_str`</ph>.","source":"Frees `m_str`."},{"pos":[2236,2273],"content":"<bpt id=\"p1\">[</bpt>CComBSTR::Length<ept id=\"p1\">](#ccombstr__length)</ept>","source":"[CComBSTR::Length](#ccombstr__length)"},{"pos":[2274,2304],"content":"Returns the length of <ph id=\"ph1\">`m_str`</ph>.","source":"Returns the length of `m_str`."},{"pos":[2309,2354],"content":"<bpt id=\"p1\">[</bpt>CComBSTR::LoadString<ept id=\"p1\">](#ccombstr__loadstring)</ept>","source":"[CComBSTR::LoadString](#ccombstr__loadstring)"},{"content":"Loads a string resource.","pos":[2355,2379]},{"pos":[2384,2437],"content":"<bpt id=\"p1\">[</bpt>CComBSTR::ReadFromStream<ept id=\"p1\">](#ccombstr__readfromstream)</ept>","source":"[CComBSTR::ReadFromStream](#ccombstr__readfromstream)"},{"pos":[2438,2474],"content":"Loads a <ph id=\"ph1\">`BSTR`</ph> object from a stream.","source":"Loads a `BSTR` object from a stream."},{"pos":[2479,2518],"content":"<bpt id=\"p1\">[</bpt>CComBSTR::ToLower<ept id=\"p1\">](#ccombstr__tolower)</ept>","source":"[CComBSTR::ToLower](#ccombstr__tolower)"},{"content":"Converts the string to lowercase.","pos":[2519,2552]},{"pos":[2557,2596],"content":"<bpt id=\"p1\">[</bpt>CComBSTR::ToUpper<ept id=\"p1\">](#ccombstr__toupper)</ept>","source":"[CComBSTR::ToUpper](#ccombstr__toupper)"},{"content":"Converts the string to uppercase.","pos":[2597,2630]},{"pos":[2635,2686],"content":"<bpt id=\"p1\">[</bpt>CComBSTR::WriteToStream<ept id=\"p1\">](#ccombstr__writetostream)</ept>","source":"[CComBSTR::WriteToStream](#ccombstr__writetostream)"},{"pos":[2687,2713],"content":"Saves <ph id=\"ph1\">`m_str`</ph> to a stream.","source":"Saves `m_str` to a stream."},{"pos":[2724,2740],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[2747,2751]},{"content":"Description","pos":[2752,2763]},{"pos":[2801,2852],"content":"<bpt id=\"p1\">[</bpt>CComBSTR::operator BSTR<ept id=\"p1\">](#ccombstr__operator_bstr)</ept>","source":"[CComBSTR::operator BSTR](#ccombstr__operator_bstr)"},{"pos":[2853,2891],"content":"Casts a <ph id=\"ph1\">`CComBSTR`</ph> object to a <ph id=\"ph2\">`BSTR`</ph>.","source":"Casts a `CComBSTR` object to a `BSTR`."},{"pos":[2896,2943],"content":"<bpt id=\"p1\">[</bpt>CComBSTR::operator !<ept id=\"p1\">](#ccombstr__operator_not)</ept>","source":"[CComBSTR::operator !](#ccombstr__operator_not)"},{"pos":[2944,3009],"content":"Returns <ph id=\"ph1\">`true`</ph> or <ph id=\"ph2\">`false`</ph>, depending on whether <ph id=\"ph3\">`m_str`</ph>is <ph id=\"ph4\">`NULL`</ph>.","source":"Returns `true` or `false`, depending on whether `m_str`is `NULL`."},{"pos":[3014,3062],"content":"<bpt id=\"p1\">[</bpt>CComBSTR::operator !=<ept id=\"p1\">](#ccombstr__operator_neq)</ept>","source":"[CComBSTR::operator !=](#ccombstr__operator_neq)"},{"pos":[3063,3099],"content":"Compares a <ph id=\"ph1\">`CComBSTR`</ph> with a string.","source":"Compares a `CComBSTR` with a string."},{"pos":[3104,3151],"content":"<bpt id=\"p1\">[</bpt>CComBSTR::operator &amp;<ept id=\"p1\">](#ccombstr__operator_amp)</ept>","source":"[CComBSTR::operator &](#ccombstr__operator_amp)"},{"pos":[3152,3183],"content":"Returns the address of <ph id=\"ph1\">`m_str`</ph>.","source":"Returns the address of `m_str`."},{"pos":[3188,3239],"content":"<bpt id=\"p1\">[</bpt>CComBSTR::operator +=<ept id=\"p1\">](#ccombstr__operator_add_eq)</ept>","source":"[CComBSTR::operator +=](#ccombstr__operator_add_eq)"},{"pos":[3240,3275],"content":"Appends a <ph id=\"ph1\">`CComBSTR`</ph> to the object.","source":"Appends a `CComBSTR` to the object."},{"pos":[3280,3326],"content":"<bpt id=\"p1\">[</bpt>CComBSTR::operator &lt;<ept id=\"p1\">](#ccombstr__operator_lt)</ept>","source":"[CComBSTR::operator <](#ccombstr__operator_lt)"},{"pos":[3327,3363],"content":"Compares a <ph id=\"ph1\">`CComBSTR`</ph> with a string.","source":"Compares a `CComBSTR` with a string."},{"pos":[3368,3414],"content":"<bpt id=\"p1\">[</bpt>CComBSTR::operator =<ept id=\"p1\">](#ccombstr__operator_eq)</ept>","source":"[CComBSTR::operator =](#ccombstr__operator_eq)"},{"pos":[3415,3442],"content":"Assigns a value to <ph id=\"ph1\">`m_str`</ph>.","source":"Assigns a value to `m_str`."},{"pos":[3447,3497],"content":"<bpt id=\"p1\">[</bpt>CComBSTR::operator ==<ept id=\"p1\">](#ccombstr__operator_eq_eq)</ept>","source":"[CComBSTR::operator ==](#ccombstr__operator_eq_eq)"},{"pos":[3498,3534],"content":"Compares a <ph id=\"ph1\">`CComBSTR`</ph> with a string.","source":"Compares a `CComBSTR` with a string."},{"pos":[3539,3585],"content":"<bpt id=\"p1\">[</bpt>CComBSTR::operator &gt;<ept id=\"p1\">](#ccombstr__operator_gt)</ept>","source":"[CComBSTR::operator >](#ccombstr__operator_gt)"},{"pos":[3586,3622],"content":"Compares a <ph id=\"ph1\">`CComBSTR`</ph> with a string.","source":"Compares a `CComBSTR` with a string."},{"pos":[3633,3652],"content":"Public Data Members","linkify":"Public Data Members","nodes":[{"content":"Public Data Members","pos":[0,19]}]},{"content":"Name","pos":[3659,3663]},{"content":"Description","pos":[3664,3675]},{"pos":[3713,3748],"content":"<bpt id=\"p1\">[</bpt>CComBSTR::m_str<ept id=\"p1\">](#ccombstr__m_str)</ept>","source":"[CComBSTR::m_str](#ccombstr__m_str)"},{"pos":[3749,3807],"content":"Contains the <ph id=\"ph1\">`BSTR`</ph> associated with the <ph id=\"ph2\">`CComBSTR`</ph> object.","source":"Contains the `BSTR` associated with the `CComBSTR` object."},{"pos":[3817,3824],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`CComBSTR`</ph> class is a wrapper for <ph id=\"ph2\">`BSTR`</ph>s, which are length-prefixed strings.","pos":[3828,3909],"source":"The `CComBSTR` class is a wrapper for `BSTR`s, which are length-prefixed strings."},{"content":"The length is stored as an integer at the memory location preceding the data in the string.","pos":[3910,4001]},{"content":"A <bpt id=\"p1\">[</bpt>BSTR<ept id=\"p1\">](http://msdn.microsoft.com/en-us/1b2d7d2c-47af-4389-a6b6-b01b7e915228)</ept> is null-terminated after the last counted character but may also contain null characters embedded within the string.","pos":[4008,4203],"source":"A [BSTR](http://msdn.microsoft.com/en-us/1b2d7d2c-47af-4389-a6b6-b01b7e915228) is null-terminated after the last counted character but may also contain null characters embedded within the string."},{"content":"The string length is determined by the character count, not the first null character.","pos":[4204,4289]},{"pos":[4297,4684],"content":"[!NOTE]\n The `CComBSTR` class provides a number of members (constructors, assignment operators, and comparison operators) that take either ANSI or Unicode strings as arguments. The ANSI versions of these functions are less efficient than their Unicode counterparts because temporary Unicode strings are often created internally. For efficiency, use the Unicode versions where possible.","leadings":["","> "],"nodes":[{"content":" The `CComBSTR` class provides a number of members (constructors, assignment operators, and comparison operators) that take either ANSI or Unicode strings as arguments. The ANSI versions of these functions are less efficient than their Unicode counterparts because temporary Unicode strings are often created internally. For efficiency, use the Unicode versions where possible.","pos":[8,385],"nodes":[{"content":"The <ph id=\"ph1\">`CComBSTR`</ph> class provides a number of members (constructors, assignment operators, and comparison operators) that take either ANSI or Unicode strings as arguments.","pos":[1,168],"source":" The `CComBSTR` class provides a number of members (constructors, assignment operators, and comparison operators) that take either ANSI or Unicode strings as arguments."},{"content":"The ANSI versions of these functions are less efficient than their Unicode counterparts because temporary Unicode strings are often created internally.","pos":[169,320]},{"content":"For efficiency, use the Unicode versions where possible.","pos":[321,377]}]}]},{"pos":[4692,4936],"content":"[!NOTE]\n Because of the improved lookup behavior implemented in Visual Studio .NET, code such as `bstr = L\"String2\" + bstr;`, which may have compiled in previous releases, should instead be implemented as `bstr = CStringW(L\"String2\") + bstr`.","leadings":["","> "],"nodes":[{"content":"Because of the improved lookup behavior implemented in Visual Studio .NET, code such as <ph id=\"ph1\">`bstr = L\"String2\" + bstr;`</ph>, which may have compiled in previous releases, should instead be implemented as <ph id=\"ph2\">`bstr = CStringW(L\"String2\") + bstr`</ph>.","pos":[9,242],"source":" Because of the improved lookup behavior implemented in Visual Studio .NET, code such as `bstr = L\"String2\" + bstr;`, which may have compiled in previous releases, should instead be implemented as `bstr = CStringW(L\"String2\") + bstr`."}]},{"pos":[4943,5065],"content":"For a list of cautions when using <ph id=\"ph1\">`CComBSTR`</ph>, see <bpt id=\"p1\">[</bpt>Programming with CComBSTR<ept id=\"p1\">](../../atl/programming-with-ccombstr-atl.md)</ept>.","source":"For a list of cautions when using `CComBSTR`, see [Programming with CComBSTR](../../atl/programming-with-ccombstr-atl.md)."},{"pos":[5074,5086],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[5090,5111],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlbase.h","source":"**Header:** atlbase.h"},{"pos":[5121,5170],"content":"<bpt id=\"p1\">&lt;a name=\"ccombstr__append\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComBSTR::Append","linkify":"<a name=\"ccombstr__append\"></a>  CComBSTR::Append","source":"<a name=\"ccombstr__append\"></a>  CComBSTR::Append"},{"pos":[5174,5259],"content":"Appends either <ph id=\"ph1\">`lpsz`</ph> or the <ph id=\"ph2\">`BSTR`</ph> member of <ph id=\"ph3\">`bstrSrc`</ph> to <bpt id=\"p1\">[</bpt>m_str<ept id=\"p1\">](#ccombstr__m_str)</ept>.","source":"Appends either `lpsz` or the `BSTR` member of `bstrSrc` to [m_str](#ccombstr__m_str)."},{"pos":[5528,5538],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] A <ph id=\"ph1\">`CComBSTR`</ph> object to append.","pos":[5555,5590],"source":" [in] A `CComBSTR` object to append."},{"content":"<bpt id=\"p1\">*</bpt>ch<ept id=\"p1\">*</ept>","pos":[5597,5601],"source":"*ch*"},{"content":"[in] A character to append.","pos":[5605,5632]},{"content":"[in] A zero-terminated character string to append.","pos":[5649,5699]},{"content":"You can pass a Unicode string via the <bpt id=\"p1\">**</bpt>LPCOLESTR<ept id=\"p1\">**</ept> overload or an ANSI string via the <ph id=\"ph1\">`LPCSTR`</ph> version.","pos":[5700,5804],"source":" You can pass a Unicode string via the **LPCOLESTR** overload or an ANSI string via the `LPCSTR` version."},{"content":"[in] The number of characters from <ph id=\"ph1\">`lpsz`</ph> to append.","pos":[5821,5873],"source":" [in] The number of characters from `lpsz` to append."},{"pos":[5883,5895],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5899,5956],"content":"<ph id=\"ph1\">`S_OK`</ph> on success, or any standard <ph id=\"ph2\">`HRESULT`</ph> error value.","source":"`S_OK` on success, or any standard `HRESULT` error value."},{"pos":[5966,5973],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An ANSI string will be converted to Unicode before being appended.","pos":[5977,6043]},{"pos":[6053,6060],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6064,6145],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#32<ept id=\"p2\">](../../atl/codesnippet/cpp/ccombstr-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#32](../../atl/codesnippet/cpp/ccombstr-class_1.cpp)]"},{"pos":[6155,6212],"content":"<bpt id=\"p1\">&lt;a name=\"ccombstr__appendbstr\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComBSTR::AppendBSTR","linkify":"<a name=\"ccombstr__appendbstr\"></a>  CComBSTR::AppendBSTR","source":"<a name=\"ccombstr__appendbstr\"></a>  CComBSTR::AppendBSTR"},{"pos":[6216,6274],"content":"Appends the specified <ph id=\"ph1\">`BSTR`</ph> to <bpt id=\"p1\">[</bpt>m_str<ept id=\"p1\">](#ccombstr__m_str)</ept>.","source":"Appends the specified `BSTR` to [m_str](#ccombstr__m_str)."},{"pos":[6333,6343],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] A <ph id=\"ph1\">`BSTR`</ph> to append.","pos":[6354,6378],"source":" [in] A `BSTR` to append."},{"pos":[6388,6400],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6404,6461],"content":"<ph id=\"ph1\">`S_OK`</ph> on success, or any standard <ph id=\"ph2\">`HRESULT`</ph> error value.","source":"`S_OK` on success, or any standard `HRESULT` error value."},{"pos":[6471,6478],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Do not pass an ordinary wide-character string to this method.","pos":[6482,6543]},{"content":"The compiler cannot catch the error and run time errors will occur.","pos":[6544,6611]},{"pos":[6621,6628],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6632,6713],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#33<ept id=\"p2\">](../../atl/codesnippet/cpp/ccombstr-class_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#33](../../atl/codesnippet/cpp/ccombstr-class_2.cpp)]"},{"pos":[6723,6782],"content":"<bpt id=\"p1\">&lt;a name=\"ccombstr__appendbytes\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComBSTR::AppendBytes","linkify":"<a name=\"ccombstr__appendbytes\"></a>  CComBSTR::AppendBytes","source":"<a name=\"ccombstr__appendbytes\"></a>  CComBSTR::AppendBytes"},{"pos":[6786,6872],"content":"Appends the specified number of bytes to <bpt id=\"p1\">[</bpt>m_str<ept id=\"p1\">](#ccombstr__m_str)</ept> without conversion.","source":"Appends the specified number of bytes to [m_str](#ccombstr__m_str) without conversion."},{"pos":[6953,6963],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] A pointer to an array of bytes to append.","pos":[6977,7023]},{"content":"[in] The number of bytes to append.","pos":[7037,7072]},{"pos":[7082,7094],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7098,7155],"content":"<ph id=\"ph1\">`S_OK`</ph> on success, or any standard <ph id=\"ph2\">`HRESULT`</ph> error value.","source":"`S_OK` on success, or any standard `HRESULT` error value."},{"pos":[7165,7172],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7176,7257],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#34<ept id=\"p2\">](../../atl/codesnippet/cpp/ccombstr-class_3.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#34](../../atl/codesnippet/cpp/ccombstr-class_3.cpp)]"},{"pos":[7267,7326],"content":"<bpt id=\"p1\">&lt;a name=\"ccombstr__arraytobstr\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComBSTR::ArrayToBSTR","linkify":"<a name=\"ccombstr__arraytobstr\"></a>  CComBSTR::ArrayToBSTR","source":"<a name=\"ccombstr__arraytobstr\"></a>  CComBSTR::ArrayToBSTR"},{"pos":[7330,7508],"content":"Frees any existing string held in the <ph id=\"ph1\">`CComBSTR`</ph> object, then creates a <ph id=\"ph2\">`BSTR`</ph> from the first character of each element in the safearray and attaches it to the <ph id=\"ph3\">`CComBSTR`</ph> object.","source":"Frees any existing string held in the `CComBSTR` object, then creates a `BSTR` from the first character of each element in the safearray and attaches it to the `CComBSTR` object."},{"pos":[7583,7593],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The safearray containing the elements used to create the string.","pos":[7607,7676]},{"pos":[7686,7698],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7702,7759],"content":"<ph id=\"ph1\">`S_OK`</ph> on success, or any standard <ph id=\"ph2\">`HRESULT`</ph> error value.","source":"`S_OK` on success, or any standard `HRESULT` error value."},{"pos":[7769,7826],"content":"<bpt id=\"p1\">&lt;a name=\"ccombstr__assignbstr\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComBSTR::AssignBSTR","linkify":"<a name=\"ccombstr__assignbstr\"></a>  CComBSTR::AssignBSTR","source":"<a name=\"ccombstr__assignbstr\"></a>  CComBSTR::AssignBSTR"},{"pos":[7830,7876],"content":"Assigns a <ph id=\"ph1\">`BSTR`</ph> to <bpt id=\"p1\">[</bpt>m_str<ept id=\"p1\">](#ccombstr__m_str)</ept>.","source":"Assigns a `BSTR` to [m_str](#ccombstr__m_str)."},{"pos":[7947,7957],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] A <ph id=\"ph1\">`BSTR`</ph> to assign to the current <ph id=\"ph2\">`CComBSTR`</ph> object.","pos":[7974,8031],"source":" [in] A `BSTR` to assign to the current `CComBSTR` object."},{"pos":[8041,8053],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8057,8114],"content":"<ph id=\"ph1\">`S_OK`</ph> on success, or any standard <ph id=\"ph2\">`HRESULT`</ph> error value.","source":"`S_OK` on success, or any standard `HRESULT` error value."},{"pos":[8124,8173],"content":"<bpt id=\"p1\">&lt;a name=\"ccombstr__attach\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComBSTR::Attach","linkify":"<a name=\"ccombstr__attach\"></a>  CComBSTR::Attach","source":"<a name=\"ccombstr__attach\"></a>  CComBSTR::Attach"},{"pos":[8177,8277],"content":"Attaches a <ph id=\"ph1\">`BSTR`</ph> to the <ph id=\"ph2\">`CComBSTR`</ph> object by setting the <bpt id=\"p1\">[</bpt>m_str<ept id=\"p1\">](#ccombstr__m_str)</ept> member to <bpt id=\"p2\">*</bpt>src<ept id=\"p2\">*</ept>.","source":"Attaches a `BSTR` to the `CComBSTR` object by setting the [m_str](#ccombstr__m_str) member to *src*."},{"pos":[8331,8341],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>src<ept id=\"p1\">*</ept>","pos":[8345,8350],"source":"*src*"},{"content":"[in] The <ph id=\"ph1\">`BSTR`</ph> to attach to the object.","pos":[8354,8394],"source":" [in] The `BSTR` to attach to the object."},{"pos":[8404,8411],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Do not pass an ordinary wide-character string to this method.","pos":[8415,8476]},{"content":"The compiler cannot catch the error and run time errors will occur.","pos":[8477,8544]},{"pos":[8552,8615],"content":"[!NOTE]\n This method will assert if `m_str` is non- **NULL**.","leadings":["","> "],"nodes":[{"content":"This method will assert if <ph id=\"ph1\">`m_str`</ph> is non- <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[9,61],"source":" This method will assert if `m_str` is non- **NULL**."}]},{"pos":[8625,8632],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8636,8717],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#35<ept id=\"p2\">](../../atl/codesnippet/cpp/ccombstr-class_4.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#35](../../atl/codesnippet/cpp/ccombstr-class_4.cpp)]"},{"pos":[8727,8786],"content":"<bpt id=\"p1\">&lt;a name=\"ccombstr__bstrtoarray\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComBSTR::BSTRToArray","linkify":"<a name=\"ccombstr__bstrtoarray\"></a>  CComBSTR::BSTRToArray","source":"<a name=\"ccombstr__bstrtoarray\"></a>  CComBSTR::BSTRToArray"},{"pos":[8790,8912],"content":"Creates a zero-based one-dimensional safearray, where each element of the array is a character from the <ph id=\"ph1\">`CComBSTR`</ph> object.","source":"Creates a zero-based one-dimensional safearray, where each element of the array is a character from the `CComBSTR` object."},{"pos":[8986,8996],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[out] The pointer to the safearray used to hold the results of the function.","pos":[9013,9089]},{"pos":[9099,9111],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[9115,9172],"content":"<ph id=\"ph1\">`S_OK`</ph> on success, or any standard <ph id=\"ph2\">`HRESULT`</ph> error value.","source":"`S_OK` on success, or any standard `HRESULT` error value."},{"pos":[9182,9239],"content":"<bpt id=\"p1\">&lt;a name=\"ccombstr__bytelength\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComBSTR::ByteLength","linkify":"<a name=\"ccombstr__bytelength\"></a>  CComBSTR::ByteLength","source":"<a name=\"ccombstr__bytelength\"></a>  CComBSTR::ByteLength"},{"pos":[9243,9324],"content":"Returns the number of bytes in <ph id=\"ph1\">`m_str`</ph>, excluding the terminating null character.","source":"Returns the number of bytes in `m_str`, excluding the terminating null character."},{"pos":[9388,9400],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[9404,9464],"content":"The length of the <bpt id=\"p1\">[</bpt>m_str<ept id=\"p1\">](#ccombstr__m_str)</ept> member in bytes.","source":"The length of the [m_str](#ccombstr__m_str) member in bytes."},{"pos":[9474,9481],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9485,9518],"content":"Returns 0 if <ph id=\"ph1\">`m_str`</ph> is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"Returns 0 if `m_str` is **NULL**."},{"pos":[9528,9535],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9539,9620],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#36<ept id=\"p2\">](../../atl/codesnippet/cpp/ccombstr-class_5.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#36](../../atl/codesnippet/cpp/ccombstr-class_5.cpp)]"},{"pos":[9630,9683],"content":"<bpt id=\"p1\">&lt;a name=\"ccombstr__ccombstr\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComBSTR::CComBSTR","linkify":"<a name=\"ccombstr__ccombstr\"></a>  CComBSTR::CComBSTR","source":"<a name=\"ccombstr__ccombstr\"></a>  CComBSTR::CComBSTR"},{"content":"The constructor.","pos":[9687,9703]},{"content":"The default constructor sets the <bpt id=\"p1\">[</bpt>m_str<ept id=\"p1\">](#ccombstr__m_str)</ept> member to <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>.","pos":[9704,9782],"source":" The default constructor sets the [m_str](#ccombstr__m_str) member to **NULL**."},{"pos":[10108,10118],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The number of characters to copy from <ph id=\"ph1\">`sz`</ph> or the initial size in characters for the <ph id=\"ph2\">`CComBSTR`</ph>.","pos":[10133,10234],"source":" [in] The number of characters to copy from `sz` or the initial size in characters for the `CComBSTR`."},{"content":"[in] A string to copy.","pos":[10249,10271]},{"content":"The Unicode version specifies an <bpt id=\"p1\">**</bpt>LPCOLESTR<ept id=\"p1\">**</ept>; the ANSI version specifies an <ph id=\"ph1\">`LPCSTR`</ph>.","pos":[10272,10359],"source":" The Unicode version specifies an **LPCOLESTR**; the ANSI version specifies an `LPCSTR`."},{"content":"[in] A string to copy.","pos":[10376,10398]},{"content":"The Unicode version specifies an <bpt id=\"p1\">**</bpt>LPCOLESTR<ept id=\"p1\">**</ept>; the ANSI version specifies an <ph id=\"ph1\">`LPCSTR`</ph>.","pos":[10399,10486],"source":" The Unicode version specifies an **LPCOLESTR**; the ANSI version specifies an `LPCSTR`."},{"content":"<bpt id=\"p1\">*</bpt>src<ept id=\"p1\">*</ept>","pos":[10493,10498],"source":"*src*"},{"content":"[in] A <ph id=\"ph1\">`CComBSTR`</ph> object.","pos":[10502,10527],"source":" [in] A `CComBSTR` object."},{"content":"[in] A reference to a <bpt id=\"p1\">**</bpt>GUID<ept id=\"p1\">**</ept> structure.","pos":[10544,10585],"source":" [in] A reference to a **GUID** structure."},{"pos":[10595,10602],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The copy constructor sets <ph id=\"ph1\">`m_str`</ph> to a copy of the <ph id=\"ph2\">`BSTR`</ph> member of <bpt id=\"p1\">*</bpt>src<ept id=\"p1\">*</ept>.","pos":[10606,10680],"source":"The copy constructor sets `m_str` to a copy of the `BSTR` member of *src*."},{"content":"The <bpt id=\"p1\">**</bpt>REFGUID<ept id=\"p1\">**</ept> constructor converts the <bpt id=\"p2\">**</bpt>GUID<ept id=\"p2\">**</ept> to a string using <bpt id=\"p3\">**</bpt>StringFromGUID2<ept id=\"p3\">**</ept> and stores the result.","pos":[10681,10791],"source":" The **REFGUID** constructor converts the **GUID** to a string using **StringFromGUID2** and stores the result."},{"content":"The other constructors set <ph id=\"ph1\">`m_str`</ph> to a copy of the specified string.","pos":[10798,10867],"source":"The other constructors set `m_str` to a copy of the specified string."},{"content":"If you pass a value for <ph id=\"ph1\">`nSize`</ph>, then only <ph id=\"ph2\">`nSize`</ph> characters will be copied, followed by a terminating null character.","pos":[10868,10987],"source":" If you pass a value for `nSize`, then only `nSize` characters will be copied, followed by a terminating null character."},{"content":"<ph id=\"ph1\">`CComBSTR`</ph> supports move semantics.","pos":[10994,11029],"source":"`CComBSTR` supports move semantics."},{"content":"You can use the move constructor (the constructor that takes an rvalue reference ( <ph id=\"ph1\">`&amp;&amp;`</ph>) to create a new object that uses the same underlying data as the old object you pass in as an argument, without the overhead of copying the object.","pos":[11030,11266],"source":" You can use the move constructor (the constructor that takes an rvalue reference ( `&&`) to create a new object that uses the same underlying data as the old object you pass in as an argument, without the overhead of copying the object."},{"pos":[11273,11327],"content":"The destructor frees the string pointed to by <ph id=\"ph1\">`m_str`</ph>.","source":"The destructor frees the string pointed to by `m_str`."},{"pos":[11337,11344],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11348,11429],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#37<ept id=\"p2\">](../../atl/codesnippet/cpp/ccombstr-class_6.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#37](../../atl/codesnippet/cpp/ccombstr-class_6.cpp)]"},{"pos":[11439,11498],"content":"<bpt id=\"p1\">&lt;a name=\"ccombstr___dtorccombstr\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComBSTR::~CComBSTR","linkify":"<a name=\"ccombstr___dtorccombstr\"></a>  CComBSTR::~CComBSTR","source":"<a name=\"ccombstr___dtorccombstr\"></a>  CComBSTR::~CComBSTR"},{"content":"The destructor.","pos":[11502,11517]},{"pos":[11553,11560],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11564,11618],"content":"The destructor frees the string pointed to by <ph id=\"ph1\">`m_str`</ph>.","source":"The destructor frees the string pointed to by `m_str`."},{"pos":[11628,11673],"content":"<bpt id=\"p1\">&lt;a name=\"ccombstr__copy\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComBSTR::Copy","linkify":"<a name=\"ccombstr__copy\"></a>  CComBSTR::Copy","source":"<a name=\"ccombstr__copy\"></a>  CComBSTR::Copy"},{"pos":[11677,11717],"content":"Allocates and returns a copy of <ph id=\"ph1\">`m_str`</ph>.","source":"Allocates and returns a copy of `m_str`."},{"pos":[11767,11779],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A copy of the <bpt id=\"p1\">[</bpt>m_str<ept id=\"p1\">](#ccombstr__m_str)</ept> member.","pos":[11783,11830],"source":"A copy of the [m_str](#ccombstr__m_str) member."},{"content":"If <ph id=\"ph1\">`m_str`</ph> is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, returns <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>.","pos":[11831,11872],"source":" If `m_str` is **NULL**, returns **NULL**."},{"pos":[11882,11889],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11893,11974],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#38<ept id=\"p2\">](../../atl/codesnippet/cpp/ccombstr-class_7.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#38](../../atl/codesnippet/cpp/ccombstr-class_7.cpp)]"},{"pos":[11984,12033],"content":"<bpt id=\"p1\">&lt;a name=\"ccombstr__copyto\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComBSTR::CopyTo","linkify":"<a name=\"ccombstr__copyto\"></a>  CComBSTR::CopyTo","source":"<a name=\"ccombstr__copyto\"></a>  CComBSTR::CopyTo"},{"pos":[12037,12113],"content":"Allocates and returns a copy of <bpt id=\"p1\">[</bpt>m_str<ept id=\"p1\">](#ccombstr__m_str)</ept> via the parameter.","source":"Allocates and returns a copy of [m_str](#ccombstr__m_str) via the parameter."},{"pos":[12216,12226],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>pbstr<ept id=\"p1\">*</ept>","pos":[12230,12237],"source":"*pbstr*"},{"content":"[out] The address of a <ph id=\"ph1\">`BSTR`</ph> in which to return the string allocated by this method.","pos":[12241,12326],"source":" [out] The address of a `BSTR` in which to return the string allocated by this method."},{"content":"[out] The address of a <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> in which to return the string allocated by this method.","pos":[12347,12437],"source":" [out] The address of a **VARIANT** in which to return the string allocated by this method."},{"pos":[12447,12459],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[12463,12536],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value indicating the success or failure of the copy.","source":"A standard `HRESULT` value indicating the success or failure of the copy."},{"pos":[12546,12553],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12557,12651],"content":"After calling this method, the <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> pointed to by <ph id=\"ph1\">`pvarDest`</ph> will be of type <ph id=\"ph2\">`VT_BSTR`</ph>.","source":"After calling this method, the **VARIANT** pointed to by `pvarDest` will be of type `VT_BSTR`."},{"pos":[12661,12668],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12672,12753],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#39<ept id=\"p2\">](../../atl/codesnippet/cpp/ccombstr-class_8.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#39](../../atl/codesnippet/cpp/ccombstr-class_8.cpp)]"},{"pos":[12763,12812],"content":"<bpt id=\"p1\">&lt;a name=\"ccombstr__detach\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComBSTR::Detach","linkify":"<a name=\"ccombstr__detach\"></a>  CComBSTR::Detach","source":"<a name=\"ccombstr__detach\"></a>  CComBSTR::Detach"},{"pos":[12816,12907],"content":"Detaches <bpt id=\"p1\">[</bpt>m_str<ept id=\"p1\">](#ccombstr__m_str)</ept> from the <ph id=\"ph1\">`CComBSTR`</ph> object and sets <ph id=\"ph2\">`m_str`</ph> to <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>.","source":"Detaches [m_str](#ccombstr__m_str) from the `CComBSTR` object and sets `m_str` to **NULL**."},{"pos":[12953,12965],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[12969,13018],"content":"The <ph id=\"ph1\">`BSTR`</ph> associated with the <ph id=\"ph2\">`CComBSTR`</ph> object.","source":"The `BSTR` associated with the `CComBSTR` object."},{"pos":[13028,13035],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13039,13120],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#40<ept id=\"p2\">](../../atl/codesnippet/cpp/ccombstr-class_9.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#40](../../atl/codesnippet/cpp/ccombstr-class_9.cpp)]"},{"pos":[13130,13177],"content":"<bpt id=\"p1\">&lt;a name=\"ccombstr__empty\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComBSTR::Empty","linkify":"<a name=\"ccombstr__empty\"></a>  CComBSTR::Empty","source":"<a name=\"ccombstr__empty\"></a>  CComBSTR::Empty"},{"pos":[13181,13224],"content":"Frees the <bpt id=\"p1\">[</bpt>m_str<ept id=\"p1\">](#ccombstr__m_str)</ept> member.","source":"Frees the [m_str](#ccombstr__m_str) member."},{"pos":[13269,13276],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13280,13362],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#41<ept id=\"p2\">](../../atl/codesnippet/cpp/ccombstr-class_10.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#41](../../atl/codesnippet/cpp/ccombstr-class_10.cpp)]"},{"pos":[13372,13421],"content":"<bpt id=\"p1\">&lt;a name=\"ccombstr__length\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComBSTR::Length","linkify":"<a name=\"ccombstr__length\"></a>  CComBSTR::Length","source":"<a name=\"ccombstr__length\"></a>  CComBSTR::Length"},{"pos":[13425,13511],"content":"Returns the number of characters in <ph id=\"ph1\">`m_str`</ph>, excluding the terminating null character.","source":"Returns the number of characters in `m_str`, excluding the terminating null character."},{"pos":[13571,13583],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[13587,13638],"content":"The length of the <bpt id=\"p1\">[</bpt>m_str<ept id=\"p1\">](#ccombstr__m_str)</ept> member.","source":"The length of the [m_str](#ccombstr__m_str) member."},{"pos":[13648,13655],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13659,13741],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#42<ept id=\"p2\">](../../atl/codesnippet/cpp/ccombstr-class_11.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#42](../../atl/codesnippet/cpp/ccombstr-class_11.cpp)]"},{"pos":[13751,13808],"content":"<bpt id=\"p1\">&lt;a name=\"ccombstr__loadstring\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComBSTR::LoadString","linkify":"<a name=\"ccombstr__loadstring\"></a>  CComBSTR::LoadString","source":"<a name=\"ccombstr__loadstring\"></a>  CComBSTR::LoadString"},{"pos":[13812,13884],"content":"Loads a string resource specified by <ph id=\"ph1\">`nID`</ph> and stores it in this object.","source":"Loads a string resource specified by `nID` and stores it in this object."},{"pos":[13995,14005],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[14009,14145],"content":"See <bpt id=\"p1\">[</bpt>LoadString<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms647486)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [LoadString](http://msdn.microsoft.com/library/windows/desktop/ms647486) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[14155,14167],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[14171,14255],"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the string is successfully loaded; otherwise, returns <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"Returns **true** if the string is successfully loaded; otherwise, returns **false**."},{"pos":[14265,14272],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The first function loads the resource from the module identified by you via the <ph id=\"ph1\">`hInst`</ph> parameter.","pos":[14276,14374],"source":"The first function loads the resource from the module identified by you via the `hInst` parameter."},{"content":"The second function loads the resource from the resource module associated with the <bpt id=\"p1\">[</bpt>CComModule<ept id=\"p1\">](../../atl/reference/ccommodule-class.md)</ept>-derived object used in this project.","pos":[14375,14549],"source":" The second function loads the resource from the resource module associated with the [CComModule](../../atl/reference/ccommodule-class.md)-derived object used in this project."},{"pos":[14559,14566],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[14570,14652],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#43<ept id=\"p2\">](../../atl/codesnippet/cpp/ccombstr-class_12.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#43](../../atl/codesnippet/cpp/ccombstr-class_12.cpp)]"},{"pos":[14662,14709],"content":"<bpt id=\"p1\">&lt;a name=\"ccombstr__m_str\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComBSTR::m_str","linkify":"<a name=\"ccombstr__m_str\"></a>  CComBSTR::m_str","source":"<a name=\"ccombstr__m_str\"></a>  CComBSTR::m_str"},{"pos":[14713,14771],"content":"Contains the <ph id=\"ph1\">`BSTR`</ph> associated with the <ph id=\"ph2\">`CComBSTR`</ph> object.","source":"Contains the `BSTR` associated with the `CComBSTR` object."},{"pos":[14806,14813],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[14817,14899],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#49<ept id=\"p2\">](../../atl/codesnippet/cpp/ccombstr-class_13.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#49](../../atl/codesnippet/cpp/ccombstr-class_13.cpp)]"},{"pos":[14909,14972],"content":"<bpt id=\"p1\">&lt;a name=\"ccombstr__operator_bstr\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComBSTR::operator BSTR","linkify":"<a name=\"ccombstr__operator_bstr\"></a>  CComBSTR::operator BSTR","source":"<a name=\"ccombstr__operator_bstr\"></a>  CComBSTR::operator BSTR"},{"pos":[14976,15014],"content":"Casts a <ph id=\"ph1\">`CComBSTR`</ph> object to a <ph id=\"ph2\">`BSTR`</ph>.","source":"Casts a `CComBSTR` object to a `BSTR`."},{"content":"```operator BSTR() const throw();","pos":[15020,15053]},{"content":"bool operator!() const throw();","pos":[15361,15392]},{"pos":[15861,15959],"content":"bool operator!= (const CComBSTR&amp; bstrSrc) const throw(); bool operator!= (LPCOLESTR pszSrc) const;","source":"bool operator!= (const CComBSTR& bstrSrc) const throw();\nbool operator!= (LPCOLESTR pszSrc) const;"},{"content":"BSTR* operator&amp;() throw();","pos":[16695,16721],"source":"BSTR* operator&() throw();"},{"content":"CComBSTR&amp; operator+= (const CComBSTR&amp; bstrSrc);","pos":[17640,17687],"source":"CComBSTR& operator+= (const CComBSTR& bstrSrc);"},{"pos":[18480,18627],"content":"bool operator&lt;(const CComBSTR&amp; bstrSrc) const throw(); bool operator&lt;(LPCOLESTR pszSrc) const throw(); bool operator&lt;(LPCSTR pszSrc) const throw();","source":"bool operator<(const CComBSTR& bstrSrc) const throw();\nbool operator<(LPCOLESTR pszSrc) const throw();\nbool operator<(LPCSTR pszSrc) const throw();"},{"content":"CComBSTR&amp; operator= (const CComBSTR&amp; src);","pos":[19034,19076],"source":"CComBSTR& operator= (const CComBSTR& src);"},{"pos":[19567,19665],"content":"bool operator== (const CComBSTR&amp; bstrSrc) const throw(); bool operator== (LPCOLESTR pszSrc) const;","source":"bool operator== (const CComBSTR& bstrSrc) const throw();\nbool operator== (LPCOLESTR pszSrc) const;"},{"content":"bool operator&gt;(const CComBSTR&amp; bstrSrc) const throw();","pos":[20270,20324],"source":"bool operator>(const CComBSTR& bstrSrc) const throw();"},{"content":"HRESULT ReadFromStream(IStream* pStream) throw();","pos":[20726,20775]},{"content":"HRESULT ToLower() throw();","pos":[21429,21455]},{"content":"HRESULT ToUpper() throw();","pos":[21729,21755]},{"content":"HRESULT WriteToStream(IStream* pStream) throw();","pos":[22053,22101]}],"content":"---\ntitle: \"CComBSTR Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL::CComBSTR\"\n  - \"CComBSTR\"\n  - \"ATL.CComBSTR\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"BSTRs, wrapper\"\n  - \"CComBSTR class\"\n  - \"CComBSTR\"\nms.assetid: 8fea1879-a05e-47a5-a803-8dec60eaa534\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CComBSTR Class\nThis class is a wrapper for `BSTR`s.  \n  \n## Syntax  \n  \n```\nclass CComBSTR\n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComBSTR::CComBSTR](#ccombstr__ccombstr)|The constructor.|  \n|[CComBSTR::~CComBSTR](#ccombstr___dtorccombstr)|The destructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComBSTR::Append](#ccombstr__append)|Appends a string to `m_str`.|  \n|[CComBSTR::AppendBSTR](#ccombstr__appendbstr)|Appends a `BSTR` to `m_str`.|  \n|[CComBSTR::AppendBytes](#ccombstr__appendbytes)|Appends a specified number of bytes to `m_str`.|  \n|[CComBSTR::ArrayToBSTR](#ccombstr__arraytobstr)|Creates a `BSTR` from the first character of each element in the safearray and attaches it to the `CComBSTR` object.|  \n|[CComBSTR::AssignBSTR](#ccombstr__assignbstr)|Assigns a `BSTR` to `m_str`.|  \n|[CComBSTR::Attach](#ccombstr__attach)|Attaches a `BSTR` to the `CComBSTR` object.|  \n|[CComBSTR::BSTRToArray](#ccombstr__bstrtoarray)|Creates a zero-based one-dimensional safearray, where each element of the array is a character from the `CComBSTR` object.|  \n|[CComBSTR::ByteLength](#ccombstr__bytelength)|Returns the length of `m_str` in bytes.|  \n|[CComBSTR::Copy](#ccombstr__copy)|Returns a copy of `m_str`.|  \n|[CComBSTR::CopyTo](#ccombstr__copyto)|Returns a copy of `m_str` via an **[out]** parameter|  \n|[CComBSTR::Detach](#ccombstr__detach)|Detaches `m_str` from the `CComBSTR` object.|  \n|[CComBSTR::Empty](#ccombstr__empty)|Frees `m_str`.|  \n|[CComBSTR::Length](#ccombstr__length)|Returns the length of `m_str`.|  \n|[CComBSTR::LoadString](#ccombstr__loadstring)|Loads a string resource.|  \n|[CComBSTR::ReadFromStream](#ccombstr__readfromstream)|Loads a `BSTR` object from a stream.|  \n|[CComBSTR::ToLower](#ccombstr__tolower)|Converts the string to lowercase.|  \n|[CComBSTR::ToUpper](#ccombstr__toupper)|Converts the string to uppercase.|  \n|[CComBSTR::WriteToStream](#ccombstr__writetostream)|Saves `m_str` to a stream.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComBSTR::operator BSTR](#ccombstr__operator_bstr)|Casts a `CComBSTR` object to a `BSTR`.|  \n|[CComBSTR::operator !](#ccombstr__operator_not)|Returns `true` or `false`, depending on whether `m_str`is `NULL`.|  \n|[CComBSTR::operator !=](#ccombstr__operator_neq)|Compares a `CComBSTR` with a string.|  \n|[CComBSTR::operator &](#ccombstr__operator_amp)|Returns the address of `m_str`.|  \n|[CComBSTR::operator +=](#ccombstr__operator_add_eq)|Appends a `CComBSTR` to the object.|  \n|[CComBSTR::operator <](#ccombstr__operator_lt)|Compares a `CComBSTR` with a string.|  \n|[CComBSTR::operator =](#ccombstr__operator_eq)|Assigns a value to `m_str`.|  \n|[CComBSTR::operator ==](#ccombstr__operator_eq_eq)|Compares a `CComBSTR` with a string.|  \n|[CComBSTR::operator >](#ccombstr__operator_gt)|Compares a `CComBSTR` with a string.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComBSTR::m_str](#ccombstr__m_str)|Contains the `BSTR` associated with the `CComBSTR` object.|  \n  \n## Remarks  \n The `CComBSTR` class is a wrapper for `BSTR`s, which are length-prefixed strings. The length is stored as an integer at the memory location preceding the data in the string.  \n  \n A [BSTR](http://msdn.microsoft.com/en-us/1b2d7d2c-47af-4389-a6b6-b01b7e915228) is null-terminated after the last counted character but may also contain null characters embedded within the string. The string length is determined by the character count, not the first null character.  \n  \n> [!NOTE]\n>  The `CComBSTR` class provides a number of members (constructors, assignment operators, and comparison operators) that take either ANSI or Unicode strings as arguments. The ANSI versions of these functions are less efficient than their Unicode counterparts because temporary Unicode strings are often created internally. For efficiency, use the Unicode versions where possible.  \n  \n> [!NOTE]\n>  Because of the improved lookup behavior implemented in Visual Studio .NET, code such as `bstr = L\"String2\" + bstr;`, which may have compiled in previous releases, should instead be implemented as `bstr = CStringW(L\"String2\") + bstr`.  \n  \n For a list of cautions when using `CComBSTR`, see [Programming with CComBSTR](../../atl/programming-with-ccombstr-atl.md).  \n  \n## Requirements  \n **Header:** atlbase.h  \n  \n##  <a name=\"ccombstr__append\"></a>  CComBSTR::Append  \n Appends either `lpsz` or the `BSTR` member of `bstrSrc` to [m_str](#ccombstr__m_str).  \n  \n```\nHRESULT Append(const CComBSTR& bstrSrc) throw();\nHRESULT Append(wchar_t ch) throw();\nHRESULT Append(char ch) throw();\nHRESULT Append(LPCOLESTR lpsz) throw();\nHRESULT Append(LPCSTR lpsz) throw();\nHRESULT Append(LPCOLESTR lpsz,  int nLen) throw();\n```  \n  \n### Parameters  \n `bstrSrc`  \n [in] A `CComBSTR` object to append.  \n  \n *ch*  \n [in] A character to append.  \n  \n `lpsz`  \n [in] A zero-terminated character string to append. You can pass a Unicode string via the **LPCOLESTR** overload or an ANSI string via the `LPCSTR` version.  \n  \n `nLen`  \n [in] The number of characters from `lpsz` to append.  \n  \n### Return Value  \n `S_OK` on success, or any standard `HRESULT` error value.  \n  \n### Remarks  \n An ANSI string will be converted to Unicode before being appended.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#32](../../atl/codesnippet/cpp/ccombstr-class_1.cpp)]  \n  \n##  <a name=\"ccombstr__appendbstr\"></a>  CComBSTR::AppendBSTR  \n Appends the specified `BSTR` to [m_str](#ccombstr__m_str).  \n  \n```\nHRESULT AppendBSTR(BSTR p) throw();\n```  \n  \n### Parameters  \n `p`  \n [in] A `BSTR` to append.  \n  \n### Return Value  \n `S_OK` on success, or any standard `HRESULT` error value.  \n  \n### Remarks  \n Do not pass an ordinary wide-character string to this method. The compiler cannot catch the error and run time errors will occur.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#33](../../atl/codesnippet/cpp/ccombstr-class_2.cpp)]  \n  \n##  <a name=\"ccombstr__appendbytes\"></a>  CComBSTR::AppendBytes  \n Appends the specified number of bytes to [m_str](#ccombstr__m_str) without conversion.  \n  \n```\nHRESULT AppendBytes(const char* lpsz,  int nLen) throw();\n```  \n  \n### Parameters  \n `lpsz`  \n [in] A pointer to an array of bytes to append.  \n  \n `p`  \n [in] The number of bytes to append.  \n  \n### Return Value  \n `S_OK` on success, or any standard `HRESULT` error value.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#34](../../atl/codesnippet/cpp/ccombstr-class_3.cpp)]  \n  \n##  <a name=\"ccombstr__arraytobstr\"></a>  CComBSTR::ArrayToBSTR  \n Frees any existing string held in the `CComBSTR` object, then creates a `BSTR` from the first character of each element in the safearray and attaches it to the `CComBSTR` object.  \n  \n```\nHRESULT ArrayToBSTR(const SAFEARRAY* pSrc) throw();\n```  \n  \n### Parameters  \n `pSrc`  \n [in] The safearray containing the elements used to create the string.  \n  \n### Return Value  \n `S_OK` on success, or any standard `HRESULT` error value.  \n  \n##  <a name=\"ccombstr__assignbstr\"></a>  CComBSTR::AssignBSTR  \n Assigns a `BSTR` to [m_str](#ccombstr__m_str).  \n  \n```\nHRESULT AssignBSTR(const BSTR bstrSrc) throw();\n```  \n  \n### Parameters  \n `bstrSrc`  \n [in] A `BSTR` to assign to the current `CComBSTR` object.  \n  \n### Return Value  \n `S_OK` on success, or any standard `HRESULT` error value.  \n  \n##  <a name=\"ccombstr__attach\"></a>  CComBSTR::Attach  \n Attaches a `BSTR` to the `CComBSTR` object by setting the [m_str](#ccombstr__m_str) member to *src*.  \n  \n```\nvoid Attach(BSTR src) throw();\n```  \n  \n### Parameters  \n *src*  \n [in] The `BSTR` to attach to the object.  \n  \n### Remarks  \n Do not pass an ordinary wide-character string to this method. The compiler cannot catch the error and run time errors will occur.  \n  \n> [!NOTE]\n>  This method will assert if `m_str` is non- **NULL**.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#35](../../atl/codesnippet/cpp/ccombstr-class_4.cpp)]  \n  \n##  <a name=\"ccombstr__bstrtoarray\"></a>  CComBSTR::BSTRToArray  \n Creates a zero-based one-dimensional safearray, where each element of the array is a character from the `CComBSTR` object.  \n  \n```\nHRESULT BSTRToArray(LPSAFEARRAY* ppArray) throw();\n```  \n  \n### Parameters  \n `ppArray`  \n [out] The pointer to the safearray used to hold the results of the function.  \n  \n### Return Value  \n `S_OK` on success, or any standard `HRESULT` error value.  \n  \n##  <a name=\"ccombstr__bytelength\"></a>  CComBSTR::ByteLength  \n Returns the number of bytes in `m_str`, excluding the terminating null character.  \n  \n```\nunsigned int ByteLength() const throw();\n```  \n  \n### Return Value  \n The length of the [m_str](#ccombstr__m_str) member in bytes.  \n  \n### Remarks  \n Returns 0 if `m_str` is **NULL**.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#36](../../atl/codesnippet/cpp/ccombstr-class_5.cpp)]  \n  \n##  <a name=\"ccombstr__ccombstr\"></a>  CComBSTR::CComBSTR  \n The constructor. The default constructor sets the [m_str](#ccombstr__m_str) member to **NULL**.  \n  \n```\nCComBSTR() throw();\nCComBSTR(\n const CComBSTR& src);\n\n    CComBSTR(\n REFGUID  guid);\n\n    CComBSTR(\n int  nSize);\n\n    CComBSTR(\n int  nSize,\n    LPCOLESTR sz);\n\n    CComBSTR(\n int  nSize,\n    LPCSTR sz);\n\n    CComBSTR(\n LPCOLESTR  pSrc);\n\n    CComBSTR(\n LPCSTR  pSrc);\n\n    CComBSTR(\n CComBSTR&& src);\n```  \n  \n### Parameters  \n `nSize`  \n [in] The number of characters to copy from `sz` or the initial size in characters for the `CComBSTR`.  \n  \n `sz`  \n [in] A string to copy. The Unicode version specifies an **LPCOLESTR**; the ANSI version specifies an `LPCSTR`.  \n  \n `pSrc`  \n [in] A string to copy. The Unicode version specifies an **LPCOLESTR**; the ANSI version specifies an `LPCSTR`.  \n  \n *src*  \n [in] A `CComBSTR` object.  \n  \n `guid`  \n [in] A reference to a **GUID** structure.  \n  \n### Remarks  \n The copy constructor sets `m_str` to a copy of the `BSTR` member of *src*. The **REFGUID** constructor converts the **GUID** to a string using **StringFromGUID2** and stores the result.  \n  \n The other constructors set `m_str` to a copy of the specified string. If you pass a value for `nSize`, then only `nSize` characters will be copied, followed by a terminating null character.  \n  \n `CComBSTR` supports move semantics. You can use the move constructor (the constructor that takes an rvalue reference ( `&&`) to create a new object that uses the same underlying data as the old object you pass in as an argument, without the overhead of copying the object.  \n  \n The destructor frees the string pointed to by `m_str`.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#37](../../atl/codesnippet/cpp/ccombstr-class_6.cpp)]  \n  \n##  <a name=\"ccombstr___dtorccombstr\"></a>  CComBSTR::~CComBSTR  \n The destructor.  \n  \n```\n~CComBSTR();\n```  \n  \n### Remarks  \n The destructor frees the string pointed to by `m_str`.  \n  \n##  <a name=\"ccombstr__copy\"></a>  CComBSTR::Copy  \n Allocates and returns a copy of `m_str`.  \n  \n```\nBSTR Copy() const throw();\n```  \n  \n### Return Value  \n A copy of the [m_str](#ccombstr__m_str) member. If `m_str` is **NULL**, returns **NULL**.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#38](../../atl/codesnippet/cpp/ccombstr-class_7.cpp)]  \n  \n##  <a name=\"ccombstr__copyto\"></a>  CComBSTR::CopyTo  \n Allocates and returns a copy of [m_str](#ccombstr__m_str) via the parameter.  \n  \n```\nHRESULT CopyTo(BSTR* pbstr) throw();\nHRESULT CopyTo(VARIANT* pvarDest) throw();\n```  \n  \n### Parameters  \n *pbstr*  \n [out] The address of a `BSTR` in which to return the string allocated by this method.  \n  \n `pvarDest`  \n [out] The address of a **VARIANT** in which to return the string allocated by this method.  \n  \n### Return Value  \n A standard `HRESULT` value indicating the success or failure of the copy.  \n  \n### Remarks  \n After calling this method, the **VARIANT** pointed to by `pvarDest` will be of type `VT_BSTR`.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#39](../../atl/codesnippet/cpp/ccombstr-class_8.cpp)]  \n  \n##  <a name=\"ccombstr__detach\"></a>  CComBSTR::Detach  \n Detaches [m_str](#ccombstr__m_str) from the `CComBSTR` object and sets `m_str` to **NULL**.  \n  \n```\nBSTR Detach() throw();\n```  \n  \n### Return Value  \n The `BSTR` associated with the `CComBSTR` object.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#40](../../atl/codesnippet/cpp/ccombstr-class_9.cpp)]  \n  \n##  <a name=\"ccombstr__empty\"></a>  CComBSTR::Empty  \n Frees the [m_str](#ccombstr__m_str) member.  \n  \n```\nvoid Empty() throw();\n```  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#41](../../atl/codesnippet/cpp/ccombstr-class_10.cpp)]  \n  \n##  <a name=\"ccombstr__length\"></a>  CComBSTR::Length  \n Returns the number of characters in `m_str`, excluding the terminating null character.  \n  \n```\nunsigned int Length() const throw();\n```  \n  \n### Return Value  \n The length of the [m_str](#ccombstr__m_str) member.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#42](../../atl/codesnippet/cpp/ccombstr-class_11.cpp)]  \n  \n##  <a name=\"ccombstr__loadstring\"></a>  CComBSTR::LoadString  \n Loads a string resource specified by `nID` and stores it in this object.  \n  \n```\nbool LoadString(HINSTANCE hInst,  UINT nID) throw();\nbool LoadString(UINT nID) throw();\n```  \n  \n### Parameters  \n See [LoadString](http://msdn.microsoft.com/library/windows/desktop/ms647486) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Return Value  \n Returns **true** if the string is successfully loaded; otherwise, returns **false**.  \n  \n### Remarks  \n The first function loads the resource from the module identified by you via the `hInst` parameter. The second function loads the resource from the resource module associated with the [CComModule](../../atl/reference/ccommodule-class.md)-derived object used in this project.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#43](../../atl/codesnippet/cpp/ccombstr-class_12.cpp)]  \n  \n##  <a name=\"ccombstr__m_str\"></a>  CComBSTR::m_str  \n Contains the `BSTR` associated with the `CComBSTR` object.  \n  \n```\nBSTR m_str;\n```  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#49](../../atl/codesnippet/cpp/ccombstr-class_13.cpp)]  \n  \n##  <a name=\"ccombstr__operator_bstr\"></a>  CComBSTR::operator BSTR  \n Casts a `CComBSTR` object to a `BSTR`.  \n  \n```operator BSTR() const throw();\n```  \n  \n### Remarks  \n Allows you to pass `CComBSTR` objects to functions that have **[in] BSTR** parameters.  \n  \n### Example  \n See the example for [CComBSTR::m_str](#ccombstr__m_str).  \n  \n##  <a name=\"ccombstr__operator_not\"></a>  CComBSTR::operator !  \n Checks whether `BSTR` string is NULL.  \n  \n```\nbool operator!() const throw();\n```  \n  \n### Return Value  \n Returns **true** if the [m_str](#ccombstr__m_str) member is **NULL**; otherwise, **false**.  \n  \n### Remarks  \n This operator only checks for a NULL value, not for an empty string.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#35](../../atl/codesnippet/cpp/ccombstr-class_4.cpp)]  \n  \n##  <a name=\"ccombstr__operator_neq\"></a>  CComBSTR::operator !=  \n Returns the logical opposite of [operator ==](#ccombstr__operator_eq_eq).  \n  \n```\nbool operator!= (const CComBSTR& bstrSrc) const throw();\nbool operator!= (LPCOLESTR pszSrc) const;\n\n    bool operator!= (LPCSTR pszSrc) const;\n\n    bool operator!= (int nNull) const throw();\n```  \n  \n### Parameters  \n `bstrSrc`  \n [in] A `CComBSTR` object.  \n  \n `pszSrc`  \n [in] A zero-terminated string.  \n  \n `nNull`  \n [in] Must be **NULL**.  \n  \n### Return Value  \n Returns **true** if the item being compared is not equal to the `CComBSTR` object; otherwise, returns **false**.  \n  \n### Remarks  \n `CComBSTR`s are compared textually in the context of the user's default locale. The final comparison operator just compares the contained string against **NULL**.  \n  \n##  <a name=\"ccombstr__operator_amp\"></a>  CComBSTR::operator &amp;  \n Returns the address of the `BSTR` stored in the [m_str](#ccombstr__m_str) member.  \n  \n```\nBSTR* operator&() throw();\n```  \n  \n### Remarks  \n `CComBstr operator &` has a special assertion associated with it to help identify memory leaks. The program will assert when the `m_str` member is initialized. This assertion was created to identify situations where a programmer uses the `& operator` to assign a new value to `m_str` member without freeing the first allocation of `m_str`. If `m_str` equals NULL, the program assumes that m_str wasn't allocated yet. In this case, the program will not assert.  \n  \n This assertion is not enabled by default. Define `ATL_CCOMBSTR_ADDRESS_OF_ASSERT` to enable this assertion.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#46](../../atl/codesnippet/cpp/ccombstr-class_14.cpp)]  \n  \n [!code-cpp[NVC_ATL_Utilities#47](../../atl/codesnippet/cpp/ccombstr-class_15.cpp)]  \n  \n##  <a name=\"ccombstr__operator_add_eq\"></a>  CComBSTR::operator +=  \n Appends a string to the `CComBSTR` object.  \n  \n```\nCComBSTR& operator+= (const CComBSTR& bstrSrc);\n\n    CComBSTR& operator+= (const LPCOLESTR pszSrc);\n```  \n  \n### Parameters  \n `bstrSrc`  \n [in] A `CComBSTR` object to append.  \n  \n `pszSrc`  \n [in] A zero-terminated string to append.  \n  \n### Remarks  \n `CComBSTR`s are compared textually in the context of the user's default locale. The **LPCOLESTR** comparison is done using `memcmp` on the raw data in each string. The `LPCSTR` comparison is carried out in the same way once a temporary Unicode copy of `pszSrc` has been created. The final comparison operator just compares the contained string against **NULL**.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#48](../../atl/codesnippet/cpp/ccombstr-class_16.cpp)]  \n  \n##  <a name=\"ccombstr__operator_lt\"></a>  CComBSTR::operator &lt;  \n Compares a `CComBSTR` with a string.  \n  \n```\nbool operator<(const CComBSTR& bstrSrc) const throw();\nbool operator<(LPCOLESTR pszSrc) const throw();\nbool operator<(LPCSTR pszSrc) const throw();\n```  \n  \n### Return Value  \n Returns **true** if the item being compared is less than the `CComBSTR` object; otherwise, returns **false**.  \n  \n### Remarks  \n The comparison is performed using the user's default locale.  \n  \n##  <a name=\"ccombstr__operator_eq\"></a>  CComBSTR::operator =  \n Sets the [m_str](#ccombstr__m_str) member to a copy of `pSrc` or to a copy of the `BSTR` member of *src*.  \n  \n```\nCComBSTR& operator= (const CComBSTR& src);\n\n    CComBSTR& operator= (LPCOLESTR pSrc);\n\n    CComBSTR& operator= (LPCSTR pSrc);\n```  \n  \n### Remarks  \n The `pSrc` parameter specifies either an **LPCOLESTR** for Unicode versions or `LPCSTR` for ANSI versions.  \n  \n### Example  \n See the example for [CComBSTR::Copy](#ccombstr__copy).  \n  \n##  <a name=\"ccombstr__operator_eq_eq\"></a>  CComBSTR::operator ==  \n Compares a `CComBSTR` with a string. `CComBSTR`s are compared textually in the context of the user's default locale.  \n  \n```\nbool operator== (const CComBSTR& bstrSrc) const throw();\nbool operator== (LPCOLESTR pszSrc) const;\n\n    bool operator== (LPCSTR pszSrc) const;\n\n    bool operator== (int nNull) const throw();\n```  \n  \n### Parameters  \n `bstrSrc`  \n [in] A `CComBSTR` object.  \n  \n `pszSrc`  \n [in] A zero-terminated string.  \n  \n `nNull`  \n [in] Must be **NULL**.  \n  \n### Return Value  \n Returns **true** if the item being compared is equal to the `CComBSTR` object; otherwise, returns **false**.  \n  \n### Remarks  \n The final comparison operator just compares the contained string against **NULL**.  \n  \n##  <a name=\"ccombstr__operator_gt\"></a>  CComBSTR::operator &gt;  \n Compares a `CComBSTR` with a string.  \n  \n```\nbool operator>(const CComBSTR& bstrSrc) const throw();\n```  \n  \n### Return Value  \n Returns **true** if the item being compared is greater than the `CComBSTR` object; otherwise, returns **false**.  \n  \n### Remarks  \n The comparison is performed using the user's default locale.  \n  \n##  <a name=\"ccombstr__readfromstream\"></a>  CComBSTR::ReadFromStream  \n Sets the [m_str](#ccombstr__m_str) member to the `BSTR` contained in the specified stream.  \n  \n```\nHRESULT ReadFromStream(IStream* pStream) throw();\n```  \n  \n### Parameters  \n `pStream`  \n [in] A pointer to the [IStream](http://msdn.microsoft.com/library/windows/desktop/aa380034) interface on the stream containing the data.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n **ReadToStream** requires the contents of the stream at the current position to be compatible with the data format written out by a call to [WriteToStream](#ccombstr__writetostream).  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#44](../../atl/codesnippet/cpp/ccombstr-class_17.cpp)]  \n  \n##  <a name=\"ccombstr__tolower\"></a>  CComBSTR::ToLower  \n Converts the contained string to lowercase.  \n  \n```\nHRESULT ToLower() throw();\n```  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n See **CharLowerBuff** for more information on how the conversion is performed.  \n  \n##  <a name=\"ccombstr__toupper\"></a>  CComBSTR::ToUpper  \n Converts the contained string to uppercase.  \n  \n```\nHRESULT ToUpper() throw();\n```  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n See **CharUpperBuff** for more information on how the conversion is performed.  \n  \n##  <a name=\"ccombstr__writetostream\"></a>  CComBSTR::WriteToStream  \n Saves the [m_str](#ccombstr__m_str) member to a stream.  \n  \n```\nHRESULT WriteToStream(IStream* pStream) throw();\n```  \n  \n### Parameters  \n `pStream`  \n [in] A pointer to the [IStream](http://msdn.microsoft.com/library/windows/desktop/aa380034) interface on a stream.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n You can recreate a BSTR from the contents of the stream using the [ReadFromStream](#ccombstr__readfromstream) function.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#45](../../atl/codesnippet/cpp/ccombstr-class_18.cpp)]  \n  \n## See Also  \n [Class Overview](../../atl/atl-class-overview.md)   \n [ATL and MFC String Conversion Macros](http://msdn.microsoft.com/library/8f53659e-0464-4424-97db-6b8453c49863)\n"}