{"nodes":[{"pos":[12,36],"content":"Casting | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Casting | Microsoft Docs","pos":[0,24]}]},{"content":"Casting","pos":[737,744]},{"content":"The C++ language provides that if a class is derived from a base class containing virtual functions, a pointer to that base class type can be used to call the implementations of the virtual functions residing in the derived class object.","pos":[745,982]},{"content":"A class containing virtual functions is sometimes called a \"polymorphic class.\"","pos":[983,1062]},{"content":"Since a derived class completely contains the definitions of all the base classes from which it is derived, it is safe to cast a pointer up the class hierarchy to any of these base classes.","pos":[1069,1258]},{"content":"Given a pointer to a base class, it might be safe to cast the pointer down the hierarchy.","pos":[1259,1348]},{"content":"It is safe if the object being pointed to is actually of a type derived from the base class.","pos":[1349,1441]},{"content":"In this case, the actual object is said to be the \"complete object.\"","pos":[1442,1510]},{"content":"The pointer to the base class is said to point to a \"subobject\" of the complete object.","pos":[1511,1598]},{"content":"For example, consider the class hierarchy shown in the following figure.","pos":[1599,1671]},{"content":"Class hierarchy","pos":[1680,1695]},{"content":"Class Hierarchy","pos":[1735,1750]},{"pos":[1757,1832],"content":"An object of type <ph id=\"ph1\">`C`</ph> could be visualized as shown in the following figure.","source":"An object of type `C` could be visualized as shown in the following figure."},{"content":"Class C with sub&amp;#45;objects B and A","pos":[1841,1877],"source":"Class C with sub&#45;objects B and A"},{"content":"Class C with B Subobject and A Subobject","pos":[1917,1957]},{"content":"Given an instance of class <ph id=\"ph1\">`C`</ph>, there is a <ph id=\"ph2\">`B`</ph> subobject and an <ph id=\"ph3\">`A`</ph> subobject.","pos":[1964,2042],"source":"Given an instance of class `C`, there is a `B` subobject and an `A` subobject."},{"content":"The instance of <ph id=\"ph1\">`C`</ph>, including the <ph id=\"ph2\">`A`</ph> and <ph id=\"ph3\">`B`</ph> subobjects, is the \"complete object.\"","pos":[2043,2127],"source":" The instance of `C`, including the `A` and `B` subobjects, is the \"complete object.\""},{"content":"Using run-time type information, it is possible to check whether a pointer actually points to a complete object and can be safely cast to point to another object in its hierarchy.","pos":[2134,2313]},{"content":"The <bpt id=\"p1\">[</bpt>dynamic_cast<ept id=\"p1\">](../cpp/dynamic-cast-operator.md)</ept> operator can be used to make these types of casts.","pos":[2314,2416],"source":" The [dynamic_cast](../cpp/dynamic-cast-operator.md) operator can be used to make these types of casts."},{"content":"It also performs the run-time check necessary to make the operation safe.","pos":[2417,2490]},{"pos":[2497,2732],"content":"For conversion of nonpolymorphic types, you can use the <bpt id=\"p1\">[</bpt>static_cast<ept id=\"p1\">](../cpp/static-cast-operator.md)</ept> operator (this topic explains the difference between static and dynamic casting conversions, and when it is appropriate to use each).","source":"For conversion of nonpolymorphic types, you can use the [static_cast](../cpp/static-cast-operator.md) operator (this topic explains the difference between static and dynamic casting conversions, and when it is appropriate to use each)."},{"content":"This section covers the following topics:","pos":[2739,2780]},{"content":"Casting operators","pos":[2791,2808]},{"content":"Run-time type information","pos":[2849,2874]},{"content":"See Also","pos":[2921,2929]},{"content":"Expressions","pos":[2934,2945]}],"content":"---\ntitle: \"Casting | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"casting\"\n  - \"coercion\"\n  - \"virtual functions, in derived classes\"\n  - \"static cast operator\"\n  - \"dynamic cast operator\"\n  - \"polymorphic classes\"\n  - \"classes [C++], polymorphism\"\nms.assetid: 3dbeb06e-2f4b-4693-832d-624bc8ec95de\ncaps.latest.revision: 6\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Casting\nThe C++ language provides that if a class is derived from a base class containing virtual functions, a pointer to that base class type can be used to call the implementations of the virtual functions residing in the derived class object. A class containing virtual functions is sometimes called a \"polymorphic class.\"  \n  \n Since a derived class completely contains the definitions of all the base classes from which it is derived, it is safe to cast a pointer up the class hierarchy to any of these base classes. Given a pointer to a base class, it might be safe to cast the pointer down the hierarchy. It is safe if the object being pointed to is actually of a type derived from the base class. In this case, the actual object is said to be the \"complete object.\" The pointer to the base class is said to point to a \"subobject\" of the complete object. For example, consider the class hierarchy shown in the following figure.  \n  \n ![Class hierarchy](../cpp/media/vc38zz1.gif \"vc38ZZ1\")  \nClass Hierarchy  \n  \n An object of type `C` could be visualized as shown in the following figure.  \n  \n ![Class C with sub&#45;objects B and A](../cpp/media/vc38zz2.gif \"vc38ZZ2\")  \nClass C with B Subobject and A Subobject  \n  \n Given an instance of class `C`, there is a `B` subobject and an `A` subobject. The instance of `C`, including the `A` and `B` subobjects, is the \"complete object.\"  \n  \n Using run-time type information, it is possible to check whether a pointer actually points to a complete object and can be safely cast to point to another object in its hierarchy. The [dynamic_cast](../cpp/dynamic-cast-operator.md) operator can be used to make these types of casts. It also performs the run-time check necessary to make the operation safe.  \n  \n For conversion of nonpolymorphic types, you can use the [static_cast](../cpp/static-cast-operator.md) operator (this topic explains the difference between static and dynamic casting conversions, and when it is appropriate to use each).  \n  \n This section covers the following topics:  \n  \n-   [Casting operators](../cpp/casting-operators.md)  \n  \n-   [Run-time type information](../cpp/run-time-type-information.md)  \n  \n## See Also  \n [Expressions](../cpp/expressions-cpp.md)"}