{"nodes":[{"pos":[12,49],"content":"CSettingsStore Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CSettingsStore Class | Microsoft Docs","pos":[0,37]}]},{"pos":[616,636],"content":"CSettingsStore Class","linkify":"CSettingsStore Class","nodes":[{"content":"CSettingsStore Class","pos":[0,20]}]},{"content":"Wraps Windows API functions, providing an object-oriented interface that you use to access the registry.","pos":[637,741]},{"pos":[750,756],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[820,827],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[837,856],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[863,867]},{"content":"Description","pos":[868,879]},{"pos":[917,982],"content":"<bpt id=\"p1\">[</bpt>CSettingsStore::CSettingsStore<ept id=\"p1\">](#csettingsstore__csettingsstore)</ept>","source":"[CSettingsStore::CSettingsStore](#csettingsstore__csettingsstore)"},{"pos":[983,1020],"content":"Constructs a <ph id=\"ph1\">`CSettingsStore`</ph> object.","source":"Constructs a `CSettingsStore` object."},{"pos":[1031,1045],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1052,1056]},{"content":"Description","pos":[1057,1068]},{"pos":[1106,1153],"content":"<bpt id=\"p1\">[</bpt>CSettingsStore::Close<ept id=\"p1\">](#csettingsstore__close)</ept>","source":"[CSettingsStore::Close](#csettingsstore__close)"},{"content":"Closes the open registry key.","pos":[1154,1183]},{"pos":[1188,1243],"content":"<bpt id=\"p1\">[</bpt>CSettingsStore::CreateKey<ept id=\"p1\">](#csettingsstore__createkey)</ept>","source":"[CSettingsStore::CreateKey](#csettingsstore__createkey)"},{"content":"Opens the specified key or creates it if it does not exist.","pos":[1244,1303]},{"pos":[1308,1363],"content":"<bpt id=\"p1\">[</bpt>CSettingsStore::DeleteKey<ept id=\"p1\">](#csettingsstore__deletekey)</ept>","source":"[CSettingsStore::DeleteKey](#csettingsstore__deletekey)"},{"content":"Deletes the specified key and all its children.","pos":[1364,1411]},{"pos":[1416,1475],"content":"<bpt id=\"p1\">[</bpt>CSettingsStore::DeleteValue<ept id=\"p1\">](#csettingsstore__deletevalue)</ept>","source":"[CSettingsStore::DeleteValue](#csettingsstore__deletevalue)"},{"content":"Deletes the specified value of the open key.","pos":[1476,1520]},{"pos":[1525,1570],"content":"<bpt id=\"p1\">[</bpt>CSettingsStore::Open<ept id=\"p1\">](#csettingsstore__open)</ept>","source":"[CSettingsStore::Open](#csettingsstore__open)"},{"content":"Opens the specified key.","pos":[1571,1595]},{"pos":[1600,1645],"content":"<bpt id=\"p1\">[</bpt>CSettingsStore::Read<ept id=\"p1\">](#csettingsstore__read)</ept>","source":"[CSettingsStore::Read](#csettingsstore__read)"},{"content":"Retrieves the data for a specified key value.","pos":[1646,1691]},{"pos":[1696,1743],"content":"<bpt id=\"p1\">[</bpt>CSettingsStore::Write<ept id=\"p1\">](#csettingsstore__write)</ept>","source":"[CSettingsStore::Write](#csettingsstore__write)"},{"content":"Writes a value to the registry under the open key.","pos":[1744,1794]},{"pos":[1804,1811],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The member functions <ph id=\"ph1\">`CreateKey`</ph> and <ph id=\"ph2\">`Open`</ph> are very similar.","pos":[1815,1876],"source":"The member functions `CreateKey` and `Open` are very similar."},{"content":"If the registry key already exists, <ph id=\"ph1\">`CreateKey`</ph> and <ph id=\"ph2\">`Open`</ph> function in the same way.","pos":[1877,1961],"source":" If the registry key already exists, `CreateKey` and `Open` function in the same way."},{"content":"However, if the registry key does not exist, <ph id=\"ph1\">`CreateKey`</ph> will create it whereas <ph id=\"ph2\">`Open`</ph> will return an error value.","pos":[1962,2076],"source":" However, if the registry key does not exist, `CreateKey` will create it whereas `Open` will return an error value."},{"pos":[2085,2092],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates how to use the Open and Read methods of the <ph id=\"ph1\">`CSettingsStore`</ph> class.","pos":[2096,2198],"source":"The following example demonstrates how to use the Open and Read methods of the `CSettingsStore` class."},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>Tool Tip Demo sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[2199,2284],"source":" This code snippet is part of the [Tool Tip Demo sample](../../visual-cpp-samples.md)."},{"pos":[2291,2389],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_ToolTipDemo#1<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/csettingsstore-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_ToolTipDemo#1](../../mfc/reference/codesnippet/cpp/csettingsstore-class_1.cpp)]"},{"pos":[2398,2419],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[2423,2470],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[2477,2538],"content":"<bpt id=\"p1\">[</bpt>CSettingsStore<ept id=\"p1\">](../../mfc/reference/csettingsstore-class.md)</ept>","source":"[CSettingsStore](../../mfc/reference/csettingsstore-class.md)"},{"pos":[2547,2559],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2563,2593],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxsettingsstore.h","source":"**Header:** afxsettingsstore.h"},{"pos":[2603,2662],"content":"<bpt id=\"p1\">&lt;a name=\"csettingsstore__close\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSettingsStore::Close","linkify":"<a name=\"csettingsstore__close\"></a>  CSettingsStore::Close","source":"<a name=\"csettingsstore__close\"></a>  CSettingsStore::Close"},{"content":"Closes the open registry key.","pos":[2666,2695]},{"pos":[2742,2749],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2753,2882],"content":"By default, this method is called from the destructor of the <bpt id=\"p1\">[</bpt>CSettingsStore Class<ept id=\"p1\">](../../mfc/reference/csettingsstore-class.md)</ept>.","source":"By default, this method is called from the destructor of the [CSettingsStore Class](../../mfc/reference/csettingsstore-class.md)."},{"pos":[2892,2959],"content":"<bpt id=\"p1\">&lt;a name=\"csettingsstore__createkey\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSettingsStore::CreateKey","linkify":"<a name=\"csettingsstore__createkey\"></a>  CSettingsStore::CreateKey","source":"<a name=\"csettingsstore__createkey\"></a>  CSettingsStore::CreateKey"},{"content":"Opens a registry key or creates it if it does not exist.","pos":[2963,3019]},{"pos":[3085,3095],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pszPath`</ph>","pos":[3099,3113],"source":"[in] `pszPath`"},{"content":"Specifies the name of a key to be created or opened.","pos":[3117,3169]},{"pos":[3179,3191],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 if successful; otherwise a nonzero value.","pos":[3195,3238]},{"pos":[3248,3255],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`CreateKey`</ph> uses <ph id=\"ph2\">`m_hKey`</ph> as the root of registry inquiries.","pos":[3259,3319],"source":"`CreateKey` uses `m_hKey` as the root of registry inquiries."},{"content":"It searches for <ph id=\"ph1\">`pszPath`</ph> as a subkey of <ph id=\"ph2\">`m_hKey`</ph>.","pos":[3320,3370],"source":" It searches for `pszPath` as a subkey of `m_hKey`."},{"content":"If the key does not exist, <ph id=\"ph1\">`CreateKey`</ph> creates it.","pos":[3371,3421],"source":" If the key does not exist, `CreateKey` creates it."},{"content":"Otherwise, it opens the key.","pos":[3422,3450]},{"content":"<ph id=\"ph1\">`CreateKey`</ph> then sets <ph id=\"ph2\">`m_hKey`</ph> to the created or opened key.","pos":[3451,3511],"source":"`CreateKey` then sets `m_hKey` to the created or opened key."},{"pos":[3521,3598],"content":"<bpt id=\"p1\">&lt;a name=\"csettingsstore__csettingsstore\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSettingsStore::CSettingsStore","linkify":"<a name=\"csettingsstore__csettingsstore\"></a>  CSettingsStore::CSettingsStore","source":"<a name=\"csettingsstore__csettingsstore\"></a>  CSettingsStore::CSettingsStore"},{"pos":[3602,3635],"content":"Creates a <ph id=\"ph1\">`CSettngsStore`</ph> object.","source":"Creates a `CSettngsStore` object."},{"pos":[3716,3726],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bAdmin`</ph>","pos":[3730,3743],"source":"[in] `bAdmin`"},{"content":"Boolean parameter that specifies whether the <ph id=\"ph1\">`CSettingsStore`</ph> object is acting in administrator mode.","pos":[3747,3848],"source":" Boolean parameter that specifies whether the `CSettingsStore` object is acting in administrator mode."},{"content":"[in] <ph id=\"ph1\">`bReadOnly`</ph>","pos":[3855,3871],"source":"[in] `bReadOnly`"},{"content":"Boolean parameter that specifies whether the <ph id=\"ph1\">`CSettingsStore`</ph> object is created in read-only mode.","pos":[3875,3973],"source":" Boolean parameter that specifies whether the `CSettingsStore` object is created in read-only mode."},{"pos":[3983,3990],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If <ph id=\"ph1\">`bAdmin`</ph> is set to <ph id=\"ph2\">`false`</ph>, the <ph id=\"ph3\">`m_hKey`</ph> member variable is set to <ph id=\"ph4\">`HKEY_LOCAL_MACHINE`</ph>.","pos":[3994,4085],"source":"If `bAdmin` is set to `false`, the `m_hKey` member variable is set to `HKEY_LOCAL_MACHINE`."},{"content":"If you set <ph id=\"ph1\">`bAdmin`</ph> to <ph id=\"ph2\">`true`</ph>, <ph id=\"ph3\">`m_hKey`</ph> is set to <ph id=\"ph4\">`HKEY_CURRENT_USER`</ph>.","pos":[4086,4156],"source":" If you set `bAdmin` to `true`, `m_hKey` is set to `HKEY_CURRENT_USER`."},{"content":"The security access depends on the <ph id=\"ph1\">`bReadOnly`</ph> parameter.","pos":[4163,4220],"source":"The security access depends on the `bReadOnly` parameter."},{"content":"If <ph id=\"ph1\">`bReadonly`</ph> is <ph id=\"ph2\">`false`</ph>, the security access will be set to <ph id=\"ph3\">`KEY_ALL_ACCESS`</ph>.","pos":[4221,4300],"source":" If `bReadonly` is `false`, the security access will be set to `KEY_ALL_ACCESS`."},{"content":"If <ph id=\"ph1\">`bReadyOnly`</ph> is <ph id=\"ph2\">`true`</ph>, the security access will be set to a combination of <ph id=\"ph3\">`KEY_QUERY_VALUE, KEY_NOTIFY`</ph> and <ph id=\"ph4\">`KEY_ENUMERATE_SUB_KEYS`</ph>.","pos":[4301,4439],"source":" If `bReadyOnly` is `true`, the security access will be set to a combination of `KEY_QUERY_VALUE, KEY_NOTIFY` and `KEY_ENUMERATE_SUB_KEYS`."},{"content":"For more information about security access together with the registry, see <bpt id=\"p1\">[</bpt>Registry Key Security and Access Rights<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms724878)</ept>.","pos":[4440,4617],"source":" For more information about security access together with the registry, see [Registry Key Security and Access Rights](http://msdn.microsoft.com/library/windows/desktop/ms724878)."},{"pos":[4624,4692],"content":"The destructor for <ph id=\"ph1\">`CSettingsStore`</ph> releases <ph id=\"ph2\">`m_hKey`</ph> automatically.","source":"The destructor for `CSettingsStore` releases `m_hKey` automatically."},{"pos":[4702,4769],"content":"<bpt id=\"p1\">&lt;a name=\"csettingsstore__deletekey\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSettingsStore::DeleteKey","linkify":"<a name=\"csettingsstore__deletekey\"></a>  CSettingsStore::DeleteKey","source":"<a name=\"csettingsstore__deletekey\"></a>  CSettingsStore::DeleteKey"},{"content":"Deletes a key and all its children from the registry.","pos":[4773,4826]},{"pos":[4924,4934],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pszPath`</ph>","pos":[4938,4952],"source":"[in] `pszPath`"},{"content":"The name of the key to delete.","pos":[4956,4986]},{"content":"[in] <ph id=\"ph1\">`bAdmin`</ph>","pos":[4993,5006],"source":"[in] `bAdmin`"},{"content":"Switch that specifies the location of the key to delete.","pos":[5010,5066]},{"pos":[5076,5088],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[5092,5127]},{"pos":[5137,5144],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5148,5222],"content":"This method will fail if the <ph id=\"ph1\">`CSettingsStore`</ph> object is in read-only mode.","source":"This method will fail if the `CSettingsStore` object is in read-only mode."},{"content":"If the parameter <ph id=\"ph1\">`bAdmin`</ph> is zero, <ph id=\"ph2\">`DeleteKey`</ph> searches for the key to delete under <ph id=\"ph3\">`HKEY_CURRENT_USER`</ph>.","pos":[5229,5333],"source":"If the parameter `bAdmin` is zero, `DeleteKey` searches for the key to delete under `HKEY_CURRENT_USER`."},{"content":"If <ph id=\"ph1\">`bAdmin`</ph> is nonzero, <ph id=\"ph2\">`DeleteKey`</ph> searches for the key to delete under <ph id=\"ph3\">`HKEY_LOCAL_MACHINE`</ph>.","pos":[5334,5428],"source":" If `bAdmin` is nonzero, `DeleteKey` searches for the key to delete under `HKEY_LOCAL_MACHINE`."},{"pos":[5438,5509],"content":"<bpt id=\"p1\">&lt;a name=\"csettingsstore__deletevalue\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSettingsStore::DeleteValue","linkify":"<a name=\"csettingsstore__deletevalue\"></a>  CSettingsStore::DeleteValue","source":"<a name=\"csettingsstore__deletevalue\"></a>  CSettingsStore::DeleteValue"},{"pos":[5513,5543],"content":"Deletes a value from <ph id=\"ph1\">`m_hKey`</ph>.","source":"Deletes a value from `m_hKey`."},{"pos":[5612,5622],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pszValue`</ph>","pos":[5626,5641],"source":"[in] `pszValue`"},{"content":"Specifies the value field to remove.","pos":[5645,5681]},{"pos":[5691,5703],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[5707,5742]},{"pos":[5752,5809],"content":"<bpt id=\"p1\">&lt;a name=\"csettingsstore__open\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSettingsStore::Open","linkify":"<a name=\"csettingsstore__open\"></a>  CSettingsStore::Open","source":"<a name=\"csettingsstore__open\"></a>  CSettingsStore::Open"},{"content":"Opens a registry key.","pos":[5813,5834]},{"pos":[5895,5905],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pszPath`</ph>","pos":[5909,5923],"source":"[in] `pszPath`"},{"content":"The name of a registry key.","pos":[5927,5954]},{"pos":[5964,5976],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[5980,6015]},{"pos":[6025,6032],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6036,6135],"content":"After this method successfully opens the specified key, it sets <ph id=\"ph1\">`m_hKey`</ph> to the handle of this key.","source":"After this method successfully opens the specified key, it sets `m_hKey` to the handle of this key."},{"pos":[6145,6202],"content":"<bpt id=\"p1\">&lt;a name=\"csettingsstore__read\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSettingsStore::Read","linkify":"<a name=\"csettingsstore__read\"></a>  CSettingsStore::Read","source":"<a name=\"csettingsstore__read\"></a>  CSettingsStore::Read"},{"content":"Reads a value from a key in the registry.","pos":[6206,6247]},{"pos":[7221,7231],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pszKey`</ph>","pos":[7235,7248],"source":"[in] `pszKey`"},{"content":"Pointer to a null-terminated string that contains the name of the value to read from the registry.","pos":[7252,7350]},{"content":"[out] <ph id=\"ph1\">`iVal`</ph>","pos":[7357,7369],"source":"[out] `iVal`"},{"content":"Reference to an integer variable that receives the value read from the registry key.","pos":[7373,7457]},{"content":"[out] <ph id=\"ph1\">`dwVal`</ph>","pos":[7464,7477],"source":"[out] `dwVal`"},{"content":"Reference to a 32-bit double word variable that receives the value read from the registry key.","pos":[7481,7575]},{"content":"[out] <ph id=\"ph1\">`sVal`</ph>","pos":[7582,7594],"source":"[out] `sVal`"},{"content":"Reference to a string variable that receives the value read from the registry key.","pos":[7598,7680]},{"content":"[out] <ph id=\"ph1\">`scStringList`</ph>","pos":[7687,7707],"source":"[out] `scStringList`"},{"content":"Reference to a string list variable that receives the value read from the registry key.","pos":[7711,7798]},{"content":"[out] <ph id=\"ph1\">`scArray`</ph>","pos":[7805,7820],"source":"[out] `scArray`"},{"content":"Reference to a string array variable that receives the value read from the registry key.","pos":[7824,7912]},{"content":"[out] <ph id=\"ph1\">`dwcArray`</ph>","pos":[7919,7935],"source":"[out] `dwcArray`"},{"content":"Reference to a 32-bit double word array variable that receives the value read from the registry key.","pos":[7939,8039]},{"content":"[out] <ph id=\"ph1\">`wcArray`</ph>","pos":[8046,8061],"source":"[out] `wcArray`"},{"content":"Reference to a 16-bit word array variable that receives the value read from the registry key.","pos":[8065,8158]},{"content":"[out] <ph id=\"ph1\">`bcArray`</ph>","pos":[8165,8180],"source":"[out] `bcArray`"},{"content":"Reference to a byte array variable that receives the value read from the registry key.","pos":[8184,8270]},{"content":"[out] <ph id=\"ph1\">`lpPoint`</ph>","pos":[8277,8292],"source":"[out] `lpPoint`"},{"content":"Reference to a pointer to a <ph id=\"ph1\">`POINT`</ph> structure that receives the value read from the registry key.","pos":[8296,8393],"source":" Reference to a pointer to a `POINT` structure that receives the value read from the registry key."},{"content":"[out] <ph id=\"ph1\">`rect`</ph>","pos":[8400,8412],"source":"[out] `rect`"},{"content":"Reference to a <bpt id=\"p1\">[</bpt>CRect<ept id=\"p1\">](../../atl-mfc-shared/reference/crect-class.md)</ept> variable that receives the value read from the registry key.","pos":[8416,8546],"source":" Reference to a [CRect](../../atl-mfc-shared/reference/crect-class.md) variable that receives the value read from the registry key."},{"content":"[out] <ph id=\"ph1\">`ppData`</ph>","pos":[8553,8567],"source":"[out] `ppData`"},{"content":"Pointer to a pointer to data that receives the value read from the registry key.","pos":[8571,8651]},{"content":"[out] <ph id=\"ph1\">`pBytes`</ph>","pos":[8658,8672],"source":"[out] `pBytes`"},{"content":"Pointer to an unsigned integer variable.","pos":[8676,8716]},{"content":"This variable receives the size of the buffer that <ph id=\"ph1\">`ppData`</ph> points to.","pos":[8717,8787],"source":" This variable receives the size of the buffer that `ppData` points to."},{"content":"[out] <ph id=\"ph1\">`list`</ph>","pos":[8794,8806],"source":"[out] `list`"},{"content":"Reference to a <bpt id=\"p1\">[</bpt>CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md)</ept> variable that receives the value read from the registry key.","pos":[8810,8933],"source":" Reference to a [CObList](../../mfc/reference/coblist-class.md) variable that receives the value read from the registry key."},{"content":"[out] <ph id=\"ph1\">`obj`</ph>","pos":[8940,8951],"source":"[out] `obj`"},{"content":"Reference to a <bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept> variable that receives the value read from the registry key.","pos":[8955,9078],"source":" Reference to a [CObject](../../mfc/reference/cobject-class.md) variable that receives the value read from the registry key."},{"content":"[out] <ph id=\"ph1\">`pObj`</ph>","pos":[9085,9097],"source":"[out] `pObj`"},{"content":"Reference to a pointer to a <ph id=\"ph1\">`CObject`</ph> variable that receives the value read from the registry key.","pos":[9101,9199],"source":" Reference to a pointer to a `CObject` variable that receives the value read from the registry key."},{"pos":[9209,9221],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[9225,9260]},{"pos":[9270,9277],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9281,9332],"content":"<ph id=\"ph1\">`Read`</ph> checks for <ph id=\"ph2\">`pszKey`</ph> as a subkey of <ph id=\"ph3\">`m_hKey`</ph>.","source":"`Read` checks for `pszKey` as a subkey of `m_hKey`."},{"pos":[9342,9401],"content":"<bpt id=\"p1\">&lt;a name=\"csettingsstore__write\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSettingsStore::Write","linkify":"<a name=\"csettingsstore__write\"></a>  CSettingsStore::Write","source":"<a name=\"csettingsstore__write\"></a>  CSettingsStore::Write"},{"content":"Writes a value to the registry under the open key.","pos":[9405,9455]},{"pos":[10445,10455],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pszKey`</ph>","pos":[10459,10472],"source":"[in] `pszKey`"},{"content":"Pointer to a string that contains the name of the value to set.","pos":[10476,10539]},{"content":"[in] <ph id=\"ph1\">`iVal`</ph>","pos":[10546,10557],"source":"[in] `iVal`"},{"content":"Reference to an integer variable that contains the data to store.","pos":[10561,10626]},{"content":"[in] <ph id=\"ph1\">`dwVal`</ph>","pos":[10633,10645],"source":"[in] `dwVal`"},{"content":"Reference to a 32-bit double word variable that contains the data to store.","pos":[10649,10724]},{"content":"[in] <ph id=\"ph1\">`pszVal`</ph>","pos":[10731,10744],"source":"[in] `pszVal`"},{"content":"Pointer to a null-terminated string variable that contains the data to store.","pos":[10748,10825]},{"content":"[in] <ph id=\"ph1\">`scStringList`</ph>","pos":[10832,10851],"source":"[in] `scStringList`"},{"content":"Reference to a <bpt id=\"p1\">[</bpt>CStringList<ept id=\"p1\">](../../mfc/reference/cstringlist-class.md)</ept> variable that contains the data to store.","pos":[10855,10967],"source":" Reference to a [CStringList](../../mfc/reference/cstringlist-class.md) variable that contains the data to store."},{"content":"[in] <ph id=\"ph1\">`bcArray`</ph>","pos":[10974,10988],"source":"[in] `bcArray`"},{"content":"Reference to a byte array variable that contains the data to store.","pos":[10992,11059]},{"content":"[in] <ph id=\"ph1\">`scArray`</ph>","pos":[11066,11080],"source":"[in] `scArray`"},{"content":"Reference to a string array variable that contains the data to store.","pos":[11084,11153]},{"content":"[in] <ph id=\"ph1\">`dwcArray`</ph>","pos":[11160,11175],"source":"[in] `dwcArray`"},{"content":"Reference to a 32-bit double word array variable that contains the data to store.","pos":[11179,11260]},{"content":"[in] <ph id=\"ph1\">`wcArray`</ph>","pos":[11267,11281],"source":"[in] `wcArray`"},{"content":"Reference to a 16-bit word array variable that contains the data to store.","pos":[11285,11359]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[11366,11377],"source":"[in] `rect`"},{"content":"Reference to a <bpt id=\"p1\">[</bpt>CRect<ept id=\"p1\">](../../atl-mfc-shared/reference/crect-class.md)</ept> variable that contains the data to store.","pos":[11381,11492],"source":" Reference to a [CRect](../../atl-mfc-shared/reference/crect-class.md) variable that contains the data to store."},{"content":"[in] <ph id=\"ph1\">`lpPoint`</ph>","pos":[11499,11513],"source":"[in] `lpPoint`"},{"content":"Reference to a pointer to a <ph id=\"ph1\">`POINT`</ph> variable that contains the data to store.","pos":[11517,11594],"source":" Reference to a pointer to a `POINT` variable that contains the data to store."},{"content":"[in] <ph id=\"ph1\">`pData`</ph>","pos":[11601,11613],"source":"[in] `pData`"},{"content":"Pointer to a buffer that contains the data to store.","pos":[11617,11669]},{"content":"[in] <ph id=\"ph1\">`nBytes`</ph>","pos":[11676,11689],"source":"[in] `nBytes`"},{"content":"Specifies the size, in bytes, of the data to which the <ph id=\"ph1\">`pData`</ph> parameter points.","pos":[11693,11773],"source":" Specifies the size, in bytes, of the data to which the `pData` parameter points."},{"content":"[in] <ph id=\"ph1\">`list`</ph>","pos":[11780,11791],"source":"[in] `list`"},{"content":"Reference to a <bpt id=\"p1\">[</bpt>CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md)</ept> variable that contains the data to store.","pos":[11795,11899],"source":" Reference to a [CObList](../../mfc/reference/coblist-class.md) variable that contains the data to store."},{"content":"[in] <ph id=\"ph1\">`obj`</ph>","pos":[11906,11916],"source":"[in] `obj`"},{"content":"Reference to a <bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept> variable that contains the data to store.","pos":[11920,12024],"source":" Reference to a [CObject](../../mfc/reference/cobject-class.md) variable that contains the data to store."},{"content":"[in] <ph id=\"ph1\">`pObj`</ph>","pos":[12031,12042],"source":"[in] `pObj`"},{"content":"Pointer to a pointer to a <ph id=\"ph1\">`CObject`</ph> variable that contains the data to store.","pos":[12046,12123],"source":" Pointer to a pointer to a `CObject` variable that contains the data to store."},{"pos":[12133,12145],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[12149,12189],"content":"<ph id=\"ph1\">`TRUE`</ph> if successful; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if successful; otherwise `FALSE`."},{"pos":[12199,12206],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In order to write to the registry, you must set <ph id=\"ph1\">`bReadOnly`</ph> to a nonzero value when you create a <bpt id=\"p1\">[</bpt>CSettingsStore<ept id=\"p1\">](../../mfc/reference/csettingsstore-class.md)</ept> object.","pos":[12210,12376],"source":"In order to write to the registry, you must set `bReadOnly` to a nonzero value when you create a [CSettingsStore](../../mfc/reference/csettingsstore-class.md) object."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CSettingsStore::CSettingsStore<ept id=\"p1\">](#csettingsstore__csettingsstore)</ept>.","pos":[12377,12469],"source":" For more information, see [CSettingsStore::CSettingsStore](#csettingsstore__csettingsstore)."},{"pos":[12478,12486],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[12490,12538],"source":"[Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Classes<ept id=\"p1\">](../../mfc/reference/mfc-classes.md)</ept><ph id=\"ph1\"> </ph>","pos":[12541,12588],"source":" [Classes](../../mfc/reference/mfc-classes.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CWinAppEx Class<ept id=\"p1\">](../../mfc/reference/cwinappex-class.md)</ept>","pos":[12591,12649],"source":" [CWinAppEx Class](../../mfc/reference/cwinappex-class.md)"}],"content":"---\ntitle: \"CSettingsStore Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CSettingsStore\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CSettingsStore class\"\nms.assetid: 0ea181de-a13e-4b29-b560-7c43838223ff\ncaps.latest.revision: 29\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CSettingsStore Class\nWraps Windows API functions, providing an object-oriented interface that you use to access the registry.  \n  \n## Syntax  \n  \n```  \nclass CSettingsStore : public CObject  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CSettingsStore::CSettingsStore](#csettingsstore__csettingsstore)|Constructs a `CSettingsStore` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CSettingsStore::Close](#csettingsstore__close)|Closes the open registry key.|  \n|[CSettingsStore::CreateKey](#csettingsstore__createkey)|Opens the specified key or creates it if it does not exist.|  \n|[CSettingsStore::DeleteKey](#csettingsstore__deletekey)|Deletes the specified key and all its children.|  \n|[CSettingsStore::DeleteValue](#csettingsstore__deletevalue)|Deletes the specified value of the open key.|  \n|[CSettingsStore::Open](#csettingsstore__open)|Opens the specified key.|  \n|[CSettingsStore::Read](#csettingsstore__read)|Retrieves the data for a specified key value.|  \n|[CSettingsStore::Write](#csettingsstore__write)|Writes a value to the registry under the open key.|  \n  \n## Remarks  \n The member functions `CreateKey` and `Open` are very similar. If the registry key already exists, `CreateKey` and `Open` function in the same way. However, if the registry key does not exist, `CreateKey` will create it whereas `Open` will return an error value.  \n  \n## Example  \n The following example demonstrates how to use the Open and Read methods of the `CSettingsStore` class. This code snippet is part of the [Tool Tip Demo sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_ToolTipDemo#1](../../mfc/reference/codesnippet/cpp/csettingsstore-class_1.cpp)]  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CSettingsStore](../../mfc/reference/csettingsstore-class.md)  \n  \n## Requirements  \n **Header:** afxsettingsstore.h  \n  \n##  <a name=\"csettingsstore__close\"></a>  CSettingsStore::Close  \n Closes the open registry key.  \n  \n```  \nvirtual void Close();\n```  \n  \n### Remarks  \n By default, this method is called from the destructor of the [CSettingsStore Class](../../mfc/reference/csettingsstore-class.md).  \n  \n##  <a name=\"csettingsstore__createkey\"></a>  CSettingsStore::CreateKey  \n Opens a registry key or creates it if it does not exist.  \n  \n```  \nvirtual BOOL CreateKey(LPCTSTR pszPath);\n```  \n  \n### Parameters  \n [in] `pszPath`  \n Specifies the name of a key to be created or opened.  \n  \n### Return Value  \n 0 if successful; otherwise a nonzero value.  \n  \n### Remarks  \n `CreateKey` uses `m_hKey` as the root of registry inquiries. It searches for `pszPath` as a subkey of `m_hKey`. If the key does not exist, `CreateKey` creates it. Otherwise, it opens the key. `CreateKey` then sets `m_hKey` to the created or opened key.  \n  \n##  <a name=\"csettingsstore__csettingsstore\"></a>  CSettingsStore::CSettingsStore  \n Creates a `CSettngsStore` object.  \n  \n```  \nCSettingsStore(\n    BOOL bAdmin,  \n    BOOL bReadOnly);\n```  \n  \n### Parameters  \n [in] `bAdmin`  \n Boolean parameter that specifies whether the `CSettingsStore` object is acting in administrator mode.  \n  \n [in] `bReadOnly`  \n Boolean parameter that specifies whether the `CSettingsStore` object is created in read-only mode.  \n  \n### Remarks  \n If `bAdmin` is set to `false`, the `m_hKey` member variable is set to `HKEY_LOCAL_MACHINE`. If you set `bAdmin` to `true`, `m_hKey` is set to `HKEY_CURRENT_USER`.  \n  \n The security access depends on the `bReadOnly` parameter. If `bReadonly` is `false`, the security access will be set to `KEY_ALL_ACCESS`. If `bReadyOnly` is `true`, the security access will be set to a combination of `KEY_QUERY_VALUE, KEY_NOTIFY` and `KEY_ENUMERATE_SUB_KEYS`. For more information about security access together with the registry, see [Registry Key Security and Access Rights](http://msdn.microsoft.com/library/windows/desktop/ms724878).  \n  \n The destructor for `CSettingsStore` releases `m_hKey` automatically.  \n  \n##  <a name=\"csettingsstore__deletekey\"></a>  CSettingsStore::DeleteKey  \n Deletes a key and all its children from the registry.  \n  \n```  \nvirtual BOOL DeleteKey(\n    LPCTSTR pszPath,  \n    BOOL bAdmin = FALSE);\n```  \n  \n### Parameters  \n [in] `pszPath`  \n The name of the key to delete.  \n  \n [in] `bAdmin`  \n Switch that specifies the location of the key to delete.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n This method will fail if the `CSettingsStore` object is in read-only mode.  \n  \n If the parameter `bAdmin` is zero, `DeleteKey` searches for the key to delete under `HKEY_CURRENT_USER`. If `bAdmin` is nonzero, `DeleteKey` searches for the key to delete under `HKEY_LOCAL_MACHINE`.  \n  \n##  <a name=\"csettingsstore__deletevalue\"></a>  CSettingsStore::DeleteValue  \n Deletes a value from `m_hKey`.  \n  \n```  \nvirtual BOOL DeleteValue(LPCTSTR pszValue);\n```  \n  \n### Parameters  \n [in] `pszValue`  \n Specifies the value field to remove.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n##  <a name=\"csettingsstore__open\"></a>  CSettingsStore::Open  \n Opens a registry key.  \n  \n```  \nvirtual BOOL Open(LPCTSTR pszPath);\n```  \n  \n### Parameters  \n [in] `pszPath`  \n The name of a registry key.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n After this method successfully opens the specified key, it sets `m_hKey` to the handle of this key.  \n  \n##  <a name=\"csettingsstore__read\"></a>  CSettingsStore::Read  \n Reads a value from a key in the registry.  \n  \n```  \nvirtual BOOL Read(\n    LPCTSTR pszKey,  \n    int& iVal);\n\n \nvirtual BOOL Read(\n    LPCTSTR pszKey,  \n    DWORD& dwVal);\n\n \nvirtual BOOL Read(\n    LPCTSTR pszKey,  \n    CString& sVal);\n\n \nvirtual BOOL Read(\n    LPCTSTR pszKey,  \n    CStringList& scStringList);\n\n \nvirtual BOOL Read(\n    LPCTSTR pszKey,  \n    CStringArray& scArray);\n\n \nvirtual BOOL Read(\n    LPCTSTR pszKey,  \n    CDWordArray& dwcArray);\n\n \nvirtual BOOL Read(\n    LPCTSTR pszKey,  \n    CWordArray& wcArray);\n\n \nvirtual BOOL Read(\n    LPCTSTR pszKey,  \n    CByteArray& bcArray);\n\n \nvirtual BOOL Read(\n    LPCTSTR pszKey,  \n    LPPOINT& lpPoint);\n\n \nvirtual BOOL Read(\n    LPCTSTR pszKey,  \n    CRect& rect);\n\n \nvirtual BOOL Read(\n    LPCTSTR pszKey,  \n    BYTE** ppData,  \n    UINT* pBytes);\n\n \nvirtual BOOL Read(\n    LPCTSTR pszKey,  \n    CObList& list);\n\n \nvirtual BOOL Read(\n    LPCTSTR pszKey,  \n    CObject& obj);\n\n \nvirtual BOOL Read(\n    LPCTSTR pszKey,  \n    CObject*& pObj);\n```  \n  \n### Parameters  \n [in] `pszKey`  \n Pointer to a null-terminated string that contains the name of the value to read from the registry.  \n  \n [out] `iVal`  \n Reference to an integer variable that receives the value read from the registry key.  \n  \n [out] `dwVal`  \n Reference to a 32-bit double word variable that receives the value read from the registry key.  \n  \n [out] `sVal`  \n Reference to a string variable that receives the value read from the registry key.  \n  \n [out] `scStringList`  \n Reference to a string list variable that receives the value read from the registry key.  \n  \n [out] `scArray`  \n Reference to a string array variable that receives the value read from the registry key.  \n  \n [out] `dwcArray`  \n Reference to a 32-bit double word array variable that receives the value read from the registry key.  \n  \n [out] `wcArray`  \n Reference to a 16-bit word array variable that receives the value read from the registry key.  \n  \n [out] `bcArray`  \n Reference to a byte array variable that receives the value read from the registry key.  \n  \n [out] `lpPoint`  \n Reference to a pointer to a `POINT` structure that receives the value read from the registry key.  \n  \n [out] `rect`  \n Reference to a [CRect](../../atl-mfc-shared/reference/crect-class.md) variable that receives the value read from the registry key.  \n  \n [out] `ppData`  \n Pointer to a pointer to data that receives the value read from the registry key.  \n  \n [out] `pBytes`  \n Pointer to an unsigned integer variable. This variable receives the size of the buffer that `ppData` points to.  \n  \n [out] `list`  \n Reference to a [CObList](../../mfc/reference/coblist-class.md) variable that receives the value read from the registry key.  \n  \n [out] `obj`  \n Reference to a [CObject](../../mfc/reference/cobject-class.md) variable that receives the value read from the registry key.  \n  \n [out] `pObj`  \n Reference to a pointer to a `CObject` variable that receives the value read from the registry key.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n `Read` checks for `pszKey` as a subkey of `m_hKey`.  \n  \n##  <a name=\"csettingsstore__write\"></a>  CSettingsStore::Write  \n Writes a value to the registry under the open key.  \n  \n```  \nvirtual BOOL Write(\n    LPCTSTR pszKey,  \n    int iVal);\n\n \nvirtual BOOL Write(\n    LPCTSTR pszKey,  \n    DWORD dwVal);\n\n \nvirtual BOOL Write(\n    LPCTSTR pszKey,  \n    LPCTSTR pszVal);\n\n \nvirtual BOOL Write(\n    LPCTSTR pszKey,  \n    CStringList& scStringList);\n\n \nvirtual BOOL Write(\n    LPCTSTR pszKey,  \n    CByteArray& bcArray);\n\n \nvirtual BOOL Write(\n    LPCTSTR pszKey,  \n    CStringArray& scArray);\n\n \nvirtual BOOL Write(\n    LPCTSTR pszKey,  \n    CDWordArray& dwcArray);\n\n \nvirtual BOOL Write(\n    LPCTSTR pszKey,  \n    CWordArray& wcArray);\n\n \nvirtual BOOL Write(\n    LPCTSTR pszKey,  \n    const CRect& rect);\n\n \nvirtual BOOL Write(\n    LPCTSTR pszKey,  \n    LPPOINT& lpPoint);\n\n \nvirtual BOOL Write(\n    LPCTSTR pszKey,  \n    LPBYTE pData,  \n    UINT nBytes);\n\n \nvirtual BOOL Write(\n    LPCTSTR pszKey,  \n    CObList& list);\n\n \nvirtual BOOL Write(\n    LPCTSTR pszKey,  \n    CObject& obj);\n\n \nvirtual BOOL Write(\n    LPCTSTR pszKey,  \n    CObject* pObj);\n```  \n  \n### Parameters  \n [in] `pszKey`  \n Pointer to a string that contains the name of the value to set.  \n  \n [in] `iVal`  \n Reference to an integer variable that contains the data to store.  \n  \n [in] `dwVal`  \n Reference to a 32-bit double word variable that contains the data to store.  \n  \n [in] `pszVal`  \n Pointer to a null-terminated string variable that contains the data to store.  \n  \n [in] `scStringList`  \n Reference to a [CStringList](../../mfc/reference/cstringlist-class.md) variable that contains the data to store.  \n  \n [in] `bcArray`  \n Reference to a byte array variable that contains the data to store.  \n  \n [in] `scArray`  \n Reference to a string array variable that contains the data to store.  \n  \n [in] `dwcArray`  \n Reference to a 32-bit double word array variable that contains the data to store.  \n  \n [in] `wcArray`  \n Reference to a 16-bit word array variable that contains the data to store.  \n  \n [in] `rect`  \n Reference to a [CRect](../../atl-mfc-shared/reference/crect-class.md) variable that contains the data to store.  \n  \n [in] `lpPoint`  \n Reference to a pointer to a `POINT` variable that contains the data to store.  \n  \n [in] `pData`  \n Pointer to a buffer that contains the data to store.  \n  \n [in] `nBytes`  \n Specifies the size, in bytes, of the data to which the `pData` parameter points.  \n  \n [in] `list`  \n Reference to a [CObList](../../mfc/reference/coblist-class.md) variable that contains the data to store.  \n  \n [in] `obj`  \n Reference to a [CObject](../../mfc/reference/cobject-class.md) variable that contains the data to store.  \n  \n [in] `pObj`  \n Pointer to a pointer to a `CObject` variable that contains the data to store.  \n  \n### Return Value  \n `TRUE` if successful; otherwise `FALSE`.  \n  \n### Remarks  \n In order to write to the registry, you must set `bReadOnly` to a nonzero value when you create a [CSettingsStore](../../mfc/reference/csettingsstore-class.md) object. For more information, see [CSettingsStore::CSettingsStore](#csettingsstore__csettingsstore).  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CWinAppEx Class](../../mfc/reference/cwinappex-class.md)\n"}