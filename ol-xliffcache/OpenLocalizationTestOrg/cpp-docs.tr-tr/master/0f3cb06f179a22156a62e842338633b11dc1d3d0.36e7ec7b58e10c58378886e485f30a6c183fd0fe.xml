{"nodes":[{"pos":[12,38],"content":"_recalloc | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_recalloc | Microsoft Docs","pos":[0,26]}]},{"pos":[976,985],"content":"_recalloc","linkify":"_recalloc","nodes":[{"content":"_recalloc","pos":[0,9]}]},{"content":"A combination of <ph id=\"ph1\">`realloc`</ph> and <ph id=\"ph2\">`calloc`</ph>.","pos":[986,1026],"source":"A combination of `realloc` and `calloc`."},{"content":"Reallocates an array in memory and initializes its elements to 0.","pos":[1027,1092]},{"pos":[1101,1107],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1213,1223],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to previously allocated memory block.","pos":[1241,1286]},{"content":"Number of elements.","pos":[1302,1321]},{"content":"Length in bytes of each element.","pos":[1338,1370]},{"pos":[1379,1391],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[1395,1485],"content":"<ph id=\"ph1\">`_recalloc`</ph> returns a <ph id=\"ph2\">`void`</ph> pointer to the reallocated (and possibly moved) memory block.","source":"`_recalloc` returns a `void` pointer to the reallocated (and possibly moved) memory block."},{"pos":[1492,1632],"content":"If there is not enough available memory to expand the block to the given size, the original block is left unchanged, and <ph id=\"ph1\">`NULL`</ph> is returned.","source":"If there is not enough available memory to expand the block to the given size, the original block is left unchanged, and `NULL` is returned."},{"pos":[1639,1797],"content":"If the requested size is zero, then the block pointed to by <ph id=\"ph1\">`memblock`</ph> is freed; the return value is <ph id=\"ph2\">`NULL`</ph>, and <ph id=\"ph3\">`memblock`</ph> is left pointing at a freed block.","source":"If the requested size is zero, then the block pointed to by `memblock` is freed; the return value is `NULL`, and `memblock` is left pointing at a freed block."},{"content":"The return value points to a storage space that is guaranteed to be suitably aligned for storage of any type of object.","pos":[1804,1923]},{"content":"To get a pointer to a type other than <ph id=\"ph1\">`void`</ph>, use a type cast on the return value.","pos":[1924,2006],"source":" To get a pointer to a type other than `void`, use a type cast on the return value."},{"pos":[2015,2022],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The _<ph id=\"ph1\">`recalloc`</ph> function changes the size of an allocated memory block.","pos":[2026,2097],"source":"The _`recalloc` function changes the size of an allocated memory block."},{"content":"The <ph id=\"ph1\">`memblock`</ph> argument points to the beginning of the memory block.","pos":[2098,2166],"source":" The `memblock` argument points to the beginning of the memory block."},{"content":"If <ph id=\"ph1\">`memblock`</ph> is <ph id=\"ph2\">`NULL`</ph>, <ph id=\"ph3\">\\_</ph><ph id=\"ph4\">`recalloc`</ph> behaves the same way as <bpt id=\"p1\">[</bpt>calloc<ept id=\"p1\">](../../c-runtime-library/reference/calloc.md)</ept> and allocates a new block of <ph id=\"ph5\">`num`</ph><ph id=\"ph6\"> * </ph><ph id=\"ph7\">`size`</ph> bytes.","pos":[2167,2333],"source":" If `memblock` is `NULL`, \\_`recalloc` behaves the same way as [calloc](../../c-runtime-library/reference/calloc.md) and allocates a new block of `num` * `size` bytes."},{"content":"Each element is initialized to 0.","pos":[2334,2367]},{"content":"If <ph id=\"ph1\">`memblock`</ph> is not <ph id=\"ph2\">`NULL`</ph>, it should be a pointer returned by a previous call to <ph id=\"ph3\">`calloc`</ph>, <bpt id=\"p1\">[</bpt>malloc<ept id=\"p1\">](../../c-runtime-library/reference/malloc.md)</ept>, or <bpt id=\"p2\">[</bpt>realloc<ept id=\"p2\">](../../c-runtime-library/reference/realloc.md)</ept>.","pos":[2368,2575],"source":" If `memblock` is not `NULL`, it should be a pointer returned by a previous call to `calloc`, [malloc](../../c-runtime-library/reference/malloc.md), or [realloc](../../c-runtime-library/reference/realloc.md)."},{"pos":[2582,2748],"content":"Because the new block can be in a new memory location, the pointer returned by _<ph id=\"ph1\">`recalloc`</ph> is not guaranteed to be the pointer passed through the <ph id=\"ph2\">`memblock`</ph> argument.","source":"Because the new block can be in a new memory location, the pointer returned by _`recalloc` is not guaranteed to be the pointer passed through the `memblock` argument."},{"content":"<ph id=\"ph1\">`_recalloc`</ph> sets <ph id=\"ph2\">`errno`</ph> to <ph id=\"ph3\">`ENOMEM`</ph> if the memory allocation fails or if the amount of memory requested exceeds <ph id=\"ph4\">`_HEAP_MAXREQ`</ph>.","pos":[2755,2883],"source":"`_recalloc` sets `errno` to `ENOMEM` if the memory allocation fails or if the amount of memory requested exceeds `_HEAP_MAXREQ`."},{"content":"For information on this and other error codes, see <bpt id=\"p1\">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","pos":[2884,3051],"source":" For information on this and other error codes, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"<ph id=\"ph1\">`recalloc`</ph> calls <ph id=\"ph2\">`realloc`</ph> in order to use the C++ <bpt id=\"p1\">[</bpt>_set_new_mode<ept id=\"p1\">](../../c-runtime-library/reference/set-new-mode.md)</ept> function to set the new handler mode.","pos":[3058,3213],"source":"`recalloc` calls `realloc` in order to use the C++ [_set_new_mode](../../c-runtime-library/reference/set-new-mode.md) function to set the new handler mode."},{"content":"The new handler mode indicates whether, on failure, <ph id=\"ph1\">`realloc`</ph> is to call the new handler routine as set by <bpt id=\"p1\">[</bpt>_set_new_handler<ept id=\"p1\">](../../c-runtime-library/reference/set-new-handler.md)</ept>.","pos":[3214,3394],"source":" The new handler mode indicates whether, on failure, `realloc` is to call the new handler routine as set by [_set_new_handler](../../c-runtime-library/reference/set-new-handler.md)."},{"content":"By default, <ph id=\"ph1\">`realloc`</ph> does not call the new handler routine on failure to allocate memory.","pos":[3395,3485],"source":" By default, `realloc` does not call the new handler routine on failure to allocate memory."},{"content":"You can override this default behavior so that, when _<ph id=\"ph1\">`recalloc`</ph> fails to allocate memory, <ph id=\"ph2\">`realloc`</ph> calls the new handler routine in the same way that the <ph id=\"ph3\">`new`</ph> operator does when it fails for the same reason.","pos":[3486,3696],"source":" You can override this default behavior so that, when _`recalloc` fails to allocate memory, `realloc` calls the new handler routine in the same way that the `new` operator does when it fails for the same reason."},{"content":"To override the default, call","pos":[3697,3726]},{"content":"early in the program, or link with NEWMODE.OBJ.","pos":[3767,3814]},{"content":"When the application is linked with a debug version of the C run-time libraries, _<ph id=\"ph1\">`recalloc`</ph> resolves to <bpt id=\"p1\">[</bpt>_recalloc_dbg<ept id=\"p1\">](../../c-runtime-library/reference/recalloc-dbg.md)</ept>.","pos":[3821,3993],"source":"When the application is linked with a debug version of the C run-time libraries, _`recalloc` resolves to [_recalloc_dbg](../../c-runtime-library/reference/recalloc-dbg.md)."},{"content":"For more information about how the heap is managed during the debugging process, see <bpt id=\"p1\">[</bpt>The CRT Debug Heap<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","pos":[3994,4147],"source":" For more information about how the heap is managed during the debugging process, see [The CRT Debug Heap](/visualstudio/debugger/crt-debug-heap-details)."},{"content":"<ph id=\"ph1\">`_recalloc`</ph> is marked <ph id=\"ph2\">`__declspec(noalias)`</ph> and <ph id=\"ph3\">`__declspec(restrict)`</ph>, meaning that the function is guaranteed not to modify global variables, and that the pointer returned is not aliased.","pos":[4154,4343],"source":"`_recalloc` is marked `__declspec(noalias)` and `__declspec(restrict)`, meaning that the function is guaranteed not to modify global variables, and that the pointer returned is not aliased."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>noalias<ept id=\"p1\">](../../cpp/noalias.md)</ept> and <bpt id=\"p2\">[</bpt>restrict<ept id=\"p2\">](../../cpp/restrict.md)</ept>.","pos":[4344,4440],"source":" For more information, see [noalias](../../cpp/noalias.md) and [restrict](../../cpp/restrict.md)."},{"pos":[4449,4461],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[4468,4475]},{"content":"Required header","pos":[4476,4491]},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdlib.h&gt; and <ph id=\"ph2\">\\&lt;</ph>malloc.h&gt;","pos":[4548,4575],"source":"\\<stdlib.h> and \\<malloc.h>"},{"pos":[4583,4707],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[4716,4741],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[4745,4760]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[4761,4808],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[4809,4934],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[4943,4951],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Memory Allocation<ept id=\"p1\">](../../c-runtime-library/memory-allocation.md)</ept><ph id=\"ph1\"> </ph>","pos":[4955,5021],"source":"[Memory Allocation](../../c-runtime-library/memory-allocation.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_recalloc_dbg<ept id=\"p1\">](../../c-runtime-library/reference/recalloc-dbg.md)</ept><ph id=\"ph1\"> </ph>","pos":[5024,5092],"source":" [_recalloc_dbg](../../c-runtime-library/reference/recalloc-dbg.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_aligned_recalloc<ept id=\"p1\">](../../c-runtime-library/reference/aligned-recalloc.md)</ept><ph id=\"ph1\"> </ph>","pos":[5095,5171],"source":" [_aligned_recalloc](../../c-runtime-library/reference/aligned-recalloc.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_aligned_offset_recalloc<ept id=\"p1\">](../../c-runtime-library/reference/aligned-offset-recalloc.md)</ept><ph id=\"ph1\"> </ph>","pos":[5174,5264],"source":" [_aligned_offset_recalloc](../../c-runtime-library/reference/aligned-offset-recalloc.md) "},{"content":"<bpt id=\"p1\"> [</bpt>free<ept id=\"p1\">](../../c-runtime-library/reference/free.md)</ept><ph id=\"ph1\"> </ph>","pos":[5267,5318],"source":" [free](../../c-runtime-library/reference/free.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Link Options<ept id=\"p1\">](../../c-runtime-library/link-options.md)</ept>","pos":[5321,5377],"source":" [Link Options](../../c-runtime-library/link-options.md)"}],"content":"---\ntitle: \"_recalloc | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_recalloc\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-heap-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_recalloc\"\n  - \"recalloc\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_recalloc function\"\n  - \"recalloc function\"\nms.assetid: 1db8305a-3f03-418c-8844-bf9149f63046\ncaps.latest.revision: 9\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# _recalloc\nA combination of `realloc` and `calloc`. Reallocates an array in memory and initializes its elements to 0.  \n  \n## Syntax  \n  \n```  \nvoid *_recalloc(   \n   void *memblock  \n   size_t num,  \n   size_t size   \n);  \n```  \n  \n#### Parameters  \n `memblock`  \n Pointer to previously allocated memory block.  \n  \n `num`  \n Number of elements.  \n  \n `size`  \n Length in bytes of each element.  \n  \n## Return Value  \n `_recalloc` returns a `void` pointer to the reallocated (and possibly moved) memory block.  \n  \n If there is not enough available memory to expand the block to the given size, the original block is left unchanged, and `NULL` is returned.  \n  \n If the requested size is zero, then the block pointed to by `memblock` is freed; the return value is `NULL`, and `memblock` is left pointing at a freed block.  \n  \n The return value points to a storage space that is guaranteed to be suitably aligned for storage of any type of object. To get a pointer to a type other than `void`, use a type cast on the return value.  \n  \n## Remarks  \n The _`recalloc` function changes the size of an allocated memory block. The `memblock` argument points to the beginning of the memory block. If `memblock` is `NULL`, \\_`recalloc` behaves the same way as [calloc](../../c-runtime-library/reference/calloc.md) and allocates a new block of `num` * `size` bytes. Each element is initialized to 0. If `memblock` is not `NULL`, it should be a pointer returned by a previous call to `calloc`, [malloc](../../c-runtime-library/reference/malloc.md), or [realloc](../../c-runtime-library/reference/realloc.md).  \n  \n Because the new block can be in a new memory location, the pointer returned by _`recalloc` is not guaranteed to be the pointer passed through the `memblock` argument.  \n  \n `_recalloc` sets `errno` to `ENOMEM` if the memory allocation fails or if the amount of memory requested exceeds `_HEAP_MAXREQ`. For information on this and other error codes, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n `recalloc` calls `realloc` in order to use the C++ [_set_new_mode](../../c-runtime-library/reference/set-new-mode.md) function to set the new handler mode. The new handler mode indicates whether, on failure, `realloc` is to call the new handler routine as set by [_set_new_handler](../../c-runtime-library/reference/set-new-handler.md). By default, `realloc` does not call the new handler routine on failure to allocate memory. You can override this default behavior so that, when _`recalloc` fails to allocate memory, `realloc` calls the new handler routine in the same way that the `new` operator does when it fails for the same reason. To override the default, call  \n  \n```  \n_set_new_mode(1)  \n```  \n  \n early in the program, or link with NEWMODE.OBJ.  \n  \n When the application is linked with a debug version of the C run-time libraries, _`recalloc` resolves to [_recalloc_dbg](../../c-runtime-library/reference/recalloc-dbg.md). For more information about how the heap is managed during the debugging process, see [The CRT Debug Heap](/visualstudio/debugger/crt-debug-heap-details).  \n  \n `_recalloc` is marked `__declspec(noalias)` and `__declspec(restrict)`, meaning that the function is guaranteed not to modify global variables, and that the pointer returned is not aliased. For more information, see [noalias](../../cpp/noalias.md) and [restrict](../../cpp/restrict.md).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_recalloc`|\\<stdlib.h> and \\<malloc.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Memory Allocation](../../c-runtime-library/memory-allocation.md)   \n [_recalloc_dbg](../../c-runtime-library/reference/recalloc-dbg.md)   \n [_aligned_recalloc](../../c-runtime-library/reference/aligned-recalloc.md)   \n [_aligned_offset_recalloc](../../c-runtime-library/reference/aligned-offset-recalloc.md)   \n [free](../../c-runtime-library/reference/free.md)   \n [Link Options](../../c-runtime-library/link-options.md)"}