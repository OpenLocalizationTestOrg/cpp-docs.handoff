{"nodes":[{"pos":[12,59],"content":"C Declarations and Definitions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"C Declarations and Definitions | Microsoft Docs","pos":[0,47]}]},{"content":"C Declarations and Definitions","pos":[547,577]},{"content":"A \"declaration\" establishes an association between a particular variable, function, or type and its attributes.","pos":[578,689]},{"content":"<bpt id=\"p1\">[</bpt>Overview of Declarations<ept id=\"p1\">](../c-language/overview-of-declarations.md)</ept> gives the ANSI syntax for the <ph id=\"ph1\">`declaration`</ph> nonterminal.","pos":[690,816],"source":"[Overview of Declarations](../c-language/overview-of-declarations.md) gives the ANSI syntax for the `declaration` nonterminal."},{"content":"A declaration also specifies where and when an identifier can be accessed (the \"linkage\" of an identifier).","pos":[817,924]},{"content":"See <bpt id=\"p1\">[</bpt>Lifetime, Scope, Visibility, and Linkage<ept id=\"p1\">](../c-language/lifetime-scope-visibility-and-linkage.md)</ept> for information about linkage.","pos":[925,1058],"source":" See [Lifetime, Scope, Visibility, and Linkage](../c-language/lifetime-scope-visibility-and-linkage.md) for information about linkage."},{"content":"A \"definition\" of a variable establishes the same associations as a declaration but also causes storage to be allocated for the variable.","pos":[1065,1202]},{"pos":[1209,1344],"content":"For example, the <ph id=\"ph1\">`main`</ph>, <ph id=\"ph2\">`find`</ph>, and <ph id=\"ph3\">`count`</ph> functions and the <ph id=\"ph4\">`var`</ph> and <ph id=\"ph5\">`val`</ph> variables are defined in one source file, in this order:","source":"For example, the `main`, `find`, and `count` functions and the `var` and `val` variables are defined in one source file, in this order:"},{"content":"The variables <ph id=\"ph1\">`var`</ph> and <ph id=\"ph2\">`val`</ph> can be used in the <ph id=\"ph3\">`find`</ph> and <ph id=\"ph4\">`count`</ph> functions; no further declarations are needed.","pos":[1475,1589],"source":"The variables `var` and `val` can be used in the `find` and `count` functions; no further declarations are needed."},{"content":"But these names are not visible (cannot be accessed) in <ph id=\"ph1\">`main`</ph>.","pos":[1590,1653],"source":" But these names are not visible (cannot be accessed) in `main`."},{"content":"See Also","pos":[1662,1670]},{"content":"Source Files and Source Programs","pos":[1675,1707]}],"content":"---\ntitle: \"C Declarations and Definitions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nms.assetid: 575f0c9b-5554-4346-be64-b2129ca9227f\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# C Declarations and Definitions\nA \"declaration\" establishes an association between a particular variable, function, or type and its attributes. [Overview of Declarations](../c-language/overview-of-declarations.md) gives the ANSI syntax for the `declaration` nonterminal. A declaration also specifies where and when an identifier can be accessed (the \"linkage\" of an identifier). See [Lifetime, Scope, Visibility, and Linkage](../c-language/lifetime-scope-visibility-and-linkage.md) for information about linkage.  \n  \n A \"definition\" of a variable establishes the same associations as a declaration but also causes storage to be allocated for the variable.  \n  \n For example, the `main`, `find`, and `count` functions and the `var` and `val` variables are defined in one source file, in this order:  \n  \n```  \nint main() {}  \n  \nint var = 0;  \ndouble val[MAXVAL];  \nchar find( fileptr ) {}  \nint count( double f ) {}  \n```  \n  \n The variables `var` and `val` can be used in the `find` and `count` functions; no further declarations are needed. But these names are not visible (cannot be accessed) in `main`.  \n  \n## See Also  \n [Source Files and Source Programs](../c-language/source-files-and-source-programs.md)"}