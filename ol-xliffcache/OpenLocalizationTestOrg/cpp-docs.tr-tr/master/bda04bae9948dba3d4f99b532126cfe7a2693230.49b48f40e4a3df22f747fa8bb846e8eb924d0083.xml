{"nodes":[{"pos":[12,51],"content":"isnan, _isnan, _isnanf | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"isnan, _isnan, _isnanf | Microsoft Docs","pos":[0,39]}]},{"pos":[1135,1157],"content":"isnan, _isnan, _isnanf","linkify":"isnan, _isnan, _isnanf","nodes":[{"content":"isnan, _isnan, _isnanf","pos":[0,22]}]},{"content":"Tests if a floating-point value is not a number (NAN).","pos":[1158,1212]},{"pos":[1221,1227],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1482,1492],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept>","pos":[1496,1499],"source":"*x*"},{"content":"The floating-point value to test.","pos":[1503,1536]},{"pos":[1545,1557],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[1561,1703],"content":"In C, the <ph id=\"ph1\">`isnan`</ph> macro and the <ph id=\"ph2\">`_isnan`</ph> and <ph id=\"ph3\">`_isnanf`</ph> functions return a nonzero value if the argument <ph id=\"ph4\">`x`</ph> is a NAN; otherwise they return 0.","source":"In C, the `isnan` macro and the `_isnan` and `_isnanf` functions return a nonzero value if the argument `x` is a NAN; otherwise they return 0."},{"pos":[1710,1823],"content":"In C++, the <ph id=\"ph1\">`isnan`</ph> template functions return <ph id=\"ph2\">`true`</ph> if the argument <ph id=\"ph3\">`x`</ph> is a NAN; otherwise they return <ph id=\"ph4\">`false`</ph>.","source":"In C++, the `isnan` template functions return `true` if the argument `x` is a NAN; otherwise they return `false`."},{"pos":[1832,1839],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The C <ph id=\"ph1\">`isnan`</ph> macro and the <ph id=\"ph2\">`_isnan`</ph> and <ph id=\"ph3\">`_isnanf`</ph> functions test floating-point value <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept>, returning a nonzero value if <bpt id=\"p2\">*</bpt>x<ept id=\"p2\">*</ept> is a Not a Number (NAN) value.","pos":[1843,1998],"source":"The C `isnan` macro and the `_isnan` and `_isnanf` functions test floating-point value *x*, returning a nonzero value if *x* is a Not a Number (NAN) value."},{"content":"A NAN is generated when the result of a floating-point operation can't be represented in IEEE-754 floating-point format for the specified type.","pos":[1999,2142]},{"content":"For information about how a NAN is represented for output, see <bpt id=\"p1\">[</bpt>printf<ept id=\"p1\">](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)</ept>.","pos":[2143,2287],"source":" For information about how a NAN is represented for output, see [printf](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)."},{"content":"When compiled as C++, the <ph id=\"ph1\">`isnan`</ph> macro is not defined, and an <ph id=\"ph2\">`isnan`</ph> template function is defined instead.","pos":[2294,2402],"source":"When compiled as C++, the `isnan` macro is not defined, and an `isnan` template function is defined instead."},{"content":"It returns a value of type <ph id=\"ph1\">`bool`</ph> instead of an integer.","pos":[2403,2459],"source":" It returns a value of type `bool` instead of an integer."},{"content":"The <ph id=\"ph1\">`_isnan`</ph> and <ph id=\"ph2\">`_isnanf`</ph> functions are Microsoft specific.","pos":[2466,2526],"source":"The `_isnan` and `_isnanf` functions are Microsoft specific."},{"content":"The <ph id=\"ph1\">`_isnanf`</ph> function is only available when compiled for x64.","pos":[2527,2590],"source":" The `_isnanf` function is only available when compiled for x64."},{"pos":[2599,2611],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[2618,2625]},{"content":"Required header (C)","pos":[2626,2645]},{"content":"Required header (C++)","pos":[2646,2667]},{"pos":[2750,2768],"content":"<ph id=\"ph1\">`isnan`</ph>, <ph id=\"ph2\">`_isnanf`</ph>","source":"`isnan`, `_isnanf`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>math.h&gt;","pos":[2769,2778],"source":"\\<math.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>math.h&gt; or <ph id=\"ph2\">\\&lt;</ph>cmath&gt;","pos":[2779,2800],"source":"\\<math.h> or \\<cmath>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>float.h&gt;","pos":[2814,2824],"source":"\\<float.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>float.h&gt; or <ph id=\"ph2\">\\&lt;</ph>cfloat&gt;","pos":[2825,2848],"source":"\\<float.h> or \\<cfloat>"},{"pos":[2856,2954],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"pos":[2963,2971],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Floating-Point Support<ept id=\"p1\">](../../c-runtime-library/floating-point-support.md)</ept><ph id=\"ph1\"> </ph>","pos":[2975,3051],"source":"[Floating-Point Support](../../c-runtime-library/floating-point-support.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_finite, _finitef<ept id=\"p1\">](../../c-runtime-library/reference/finite-finitef.md)</ept><ph id=\"ph1\"> </ph>","pos":[3054,3128],"source":" [_finite, _finitef](../../c-runtime-library/reference/finite-finitef.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_fpclass, _fpclassf<ept id=\"p1\">](../../c-runtime-library/reference/fpclass-fpclassf.md)</ept>","pos":[3131,3208],"source":" [_fpclass, _fpclassf](../../c-runtime-library/reference/fpclass-fpclassf.md)"}],"content":"---\ntitle: \"isnan, _isnan, _isnanf | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_isnan\"\n  - \"_isnanf\"\n  - \"isnan\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-math-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_isnan\"\n  - \"isnan\"\n  - \"math/isnan\"\n  - \"math/_isnan\"\n  - \"math/_isnanf\"\n  - \"_isnanf\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"NAN (not a number)\"\n  - \"_isnan function\"\n  - \"IEEE floating-point representation\"\n  - \"Not a Number (NANs)\"\n  - \"isnan function\"\nms.assetid: 391fbc5b-89a4-4fba-997e-68f1131caf82\ncaps.latest.revision: 11\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# isnan, _isnan, _isnanf\nTests if a floating-point value is not a number (NAN).  \n  \n## Syntax  \n  \n```  \nint isnan(  \n   /* floating-point */ x   \n); /* C-only macro */  \n  \nint _isnan(  \n   double x   \n);  \n  \nint _isnanf(  \n   float x  \n); /* x64 only */  \n  \ntemplate <class T>  \nbool isnan(  \n   T x  \n) throw(); /* C++ only */  \n```  \n  \n#### Parameters  \n *x*  \n The floating-point value to test.  \n  \n## Return Value  \n In C, the `isnan` macro and the `_isnan` and `_isnanf` functions return a nonzero value if the argument `x` is a NAN; otherwise they return 0.  \n  \n In C++, the `isnan` template functions return `true` if the argument `x` is a NAN; otherwise they return `false`.  \n  \n## Remarks  \n The C `isnan` macro and the `_isnan` and `_isnanf` functions test floating-point value *x*, returning a nonzero value if *x* is a Not a Number (NAN) value. A NAN is generated when the result of a floating-point operation can't be represented in IEEE-754 floating-point format for the specified type. For information about how a NAN is represented for output, see [printf](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md).  \n  \n When compiled as C++, the `isnan` macro is not defined, and an `isnan` template function is defined instead. It returns a value of type `bool` instead of an integer.  \n  \n The `_isnan` and `_isnanf` functions are Microsoft specific. The `_isnanf` function is only available when compiled for x64.  \n  \n## Requirements  \n  \n|Routine|Required header (C)|Required header (C++)|  \n|-------------|---------------------------|-------------------------------|  \n|`isnan`, `_isnanf`|\\<math.h>|\\<math.h> or \\<cmath>|  \n|`_isnan`|\\<float.h>|\\<float.h> or \\<cfloat>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## See Also  \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [_finite, _finitef](../../c-runtime-library/reference/finite-finitef.md)   \n [_fpclass, _fpclassf](../../c-runtime-library/reference/fpclass-fpclassf.md)"}