{"nodes":[{"pos":[12,61],"content":"Compiler Warning (level 3) C4823 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Warning (level 3) C4823 | Microsoft Docs","pos":[0,49]}]},{"pos":[610,642],"content":"Compiler Warning (level 3) C4823","linkify":"Compiler Warning (level 3) C4823","nodes":[{"content":"Compiler Warning (level 3) C4823","pos":[0,32]}]},{"content":"'function' : uses pinning pointers but unwind semantics are not enabled.","pos":[643,715]},{"content":"Consider using /EHa","pos":[716,735]},{"content":"To unpin an object on the managed heap pointed to by a pinning pointer declared in a block scope, the compiler simulates the behavior of destructors of local classes, \"pretending\" the pinning pointer has a destructor that nullifies the pointer.","pos":[741,985]},{"content":"To enable a call to a destructor after throwing an exception, you must enable object unwinding, which you can do by using <bpt id=\"p1\">[</bpt>/EHsc<ept id=\"p1\">](../../build/reference/eh-exception-handling-model.md)</ept>.","pos":[986,1170],"source":" To enable a call to a destructor after throwing an exception, you must enable object unwinding, which you can do by using [/EHsc](../../build/reference/eh-exception-handling-model.md)."},{"content":"You can also manually unpin the object and ignore the warning.","pos":[1176,1238]},{"pos":[1247,1254],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following sample generates C4823.","pos":[1257,1294]}],"content":"---\ntitle: \"Compiler Warning (level 3) C4823 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"C4823\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C4823\"\nms.assetid: 8a77560d-dcea-4cae-aebb-8ebf1b4cef85\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Compiler Warning (level 3) C4823\n'function' : uses pinning pointers but unwind semantics are not enabled. Consider using /EHa  \n  \nTo unpin an object on the managed heap pointed to by a pinning pointer declared in a block scope, the compiler simulates the behavior of destructors of local classes, \"pretending\" the pinning pointer has a destructor that nullifies the pointer. To enable a call to a destructor after throwing an exception, you must enable object unwinding, which you can do by using [/EHsc](../../build/reference/eh-exception-handling-model.md).  \n  \nYou can also manually unpin the object and ignore the warning.  \n  \n## Example  \nThe following sample generates C4823.  \n  \n```  \n// C4823.cpp  \n// compile with: /clr /W3 /EHa-  \nusing namespace System;  \n  \nref struct G {  \n   int m;  \n};  \n  \nvoid f(G ^ pG) {  \n   try {  \n      pin_ptr<int> p = &pG->m;  \n      // manually unpin, ignore warning  \n      // p = nullptr;  \n      throw gcnew Exception;  \n   }  \n   catch(Exception ^) {}  \n}   // C4823 warning  \n  \nint main() {  \n   f( gcnew G );  \n}  \n```  \n"}