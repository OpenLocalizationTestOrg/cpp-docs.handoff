{"nodes":[{"pos":[12,43],"content":"1.4 Compliance | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"1.4 Compliance | Microsoft Docs","pos":[0,31]}]},{"content":"1.4 Compliance","pos":[523,537]},{"content":"An implementation of the OpenMP C/C++ API is <bpt id=\"p1\">*</bpt>OpenMP-compliant<ept id=\"p1\">*</ept> if it recognizes and preserves the semantics of all the elements of this specification, as laid out in Chapters 1, 2, 3, 4, and Appendix C. Appendices A, B, D, E, and F are for information purposes only and are not part of the specification.","pos":[538,843],"source":"An implementation of the OpenMP C/C++ API is *OpenMP-compliant* if it recognizes and preserves the semantics of all the elements of this specification, as laid out in Chapters 1, 2, 3, 4, and Appendix C. Appendices A, B, D, E, and F are for information purposes only and are not part of the specification."},{"content":"Implementations that include only a subset of the API are not OpenMP-compliant.","pos":[844,923]},{"content":"The OpenMP C and C++ API is an extension to the base language that is supported by an implementation.","pos":[930,1031]},{"content":"If the base language does not support a language construct or extension that appears in this document, the OpenMP implementation is not required to support it.","pos":[1032,1191]},{"content":"All standard C and C++ library functions and built-in functions (that is, functions of which the compiler has specific knowledge) must be thread-safe.","pos":[1198,1348]},{"content":"Unsynchronized use of thread–safe functions by different threads inside a parallel region does not produce undefined behavior.","pos":[1349,1475]},{"content":"However, the behavior might not be the same as in a serial region.","pos":[1476,1542]},{"content":"(A random number generation function is an example.)","pos":[1543,1595]},{"content":"The OpenMP C/C++ API specifies that certain behavior is <bpt id=\"p1\">*</bpt>implementation-defined.<ept id=\"p1\">*</ept>","pos":[1602,1683],"source":"The OpenMP C/C++ API specifies that certain behavior is *implementation-defined.*"},{"content":"A conforming OpenMP implementation is required to define and document its behavior in these cases.","pos":[1684,1782]},{"content":"See <bpt id=\"p1\">[</bpt>Appendix E<ept id=\"p1\">](../../parallel/openmp/e-implementation-defined-behaviors-in-openmp-c-cpp.md)</ept>, page 97, for a list of implementation-defined behaviors.","pos":[1783,1934],"source":" See [Appendix E](../../parallel/openmp/e-implementation-defined-behaviors-in-openmp-c-cpp.md), page 97, for a list of implementation-defined behaviors."}],"content":"---\ntitle: \"1.4 Compliance | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: 662ad260-b9a1-43b7-b269-ef6ff0714e05\ncaps.latest.revision: 6\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# 1.4 Compliance\nAn implementation of the OpenMP C/C++ API is *OpenMP-compliant* if it recognizes and preserves the semantics of all the elements of this specification, as laid out in Chapters 1, 2, 3, 4, and Appendix C. Appendices A, B, D, E, and F are for information purposes only and are not part of the specification. Implementations that include only a subset of the API are not OpenMP-compliant.  \n  \n The OpenMP C and C++ API is an extension to the base language that is supported by an implementation. If the base language does not support a language construct or extension that appears in this document, the OpenMP implementation is not required to support it.  \n  \n All standard C and C++ library functions and built-in functions (that is, functions of which the compiler has specific knowledge) must be thread-safe. Unsynchronized use of thread–safe functions by different threads inside a parallel region does not produce undefined behavior. However, the behavior might not be the same as in a serial region. (A random number generation function is an example.)  \n  \n The OpenMP C/C++ API specifies that certain behavior is *implementation-defined.* A conforming OpenMP implementation is required to define and document its behavior in these cases. See [Appendix E](../../parallel/openmp/e-implementation-defined-behaviors-in-openmp-c-cpp.md), page 97, for a list of implementation-defined behaviors."}