{"nodes":[{"pos":[12,44],"content":"CTreeCtrl Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CTreeCtrl Class | Microsoft Docs","pos":[0,32]}]},{"pos":[671,686],"content":"CTreeCtrl Class","linkify":"CTreeCtrl Class","nodes":[{"content":"CTreeCtrl Class","pos":[0,15]}]},{"content":"Provides the functionality of the Windows common tree view control.","pos":[687,754]},{"pos":[763,769],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[825,832],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[842,861],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[868,872]},{"content":"Description","pos":[873,884]},{"pos":[922,967],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::CTreeCtrl<ept id=\"p1\">](#ctreectrl__ctreectrl)</ept>","source":"[CTreeCtrl::CTreeCtrl](#ctreectrl__ctreectrl)"},{"pos":[968,1000],"content":"Constructs a <ph id=\"ph1\">`CTreeCtrl`</ph> object.","source":"Constructs a `CTreeCtrl` object."},{"pos":[1011,1025],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1032,1036]},{"content":"Description","pos":[1037,1048]},{"pos":[1086,1125],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::Create<ept id=\"p1\">](#ctreectrl__create)</ept>","source":"[CTreeCtrl::Create](#ctreectrl__create)"},{"pos":[1126,1194],"content":"Creates a tree view control and attaches it to a <ph id=\"ph1\">`CTreeCtrl`</ph> object.","source":"Creates a tree view control and attaches it to a `CTreeCtrl` object."},{"pos":[1199,1256],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::CreateDragImage<ept id=\"p1\">](#ctreectrl__createdragimage)</ept>","source":"[CTreeCtrl::CreateDragImage](#ctreectrl__createdragimage)"},{"content":"Creates a dragging bitmap for the specified tree view item.","pos":[1257,1316]},{"pos":[1321,1364],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::CreateEx<ept id=\"p1\">](#ctreectrl__createex)</ept>","source":"[CTreeCtrl::CreateEx](#ctreectrl__createex)"},{"pos":[1365,1471],"content":"Creates a tree control with the specified Windows extended styles and attaches it to a <ph id=\"ph1\">`CTreeCtrl`</ph> object.","source":"Creates a tree control with the specified Windows extended styles and attaches it to a `CTreeCtrl` object."},{"pos":[1476,1531],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::DeleteAllItems<ept id=\"p1\">](#ctreectrl__deleteallitems)</ept>","source":"[CTreeCtrl::DeleteAllItems](#ctreectrl__deleteallitems)"},{"content":"Deletes all items in a tree view control.","pos":[1532,1573]},{"pos":[1578,1625],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::DeleteItem<ept id=\"p1\">](#ctreectrl__deleteitem)</ept>","source":"[CTreeCtrl::DeleteItem](#ctreectrl__deleteitem)"},{"content":"Deletes a new item in a tree view control.","pos":[1626,1668]},{"pos":[1673,1718],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::EditLabel<ept id=\"p1\">](#ctreectrl__editlabel)</ept>","source":"[CTreeCtrl::EditLabel](#ctreectrl__editlabel)"},{"content":"Edits a specified tree view item in-place.","pos":[1719,1761]},{"pos":[1766,1823],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::EndEditLabelNow<ept id=\"p1\">](#ctreectrl__endeditlabelnow)</ept>","source":"[CTreeCtrl::EndEditLabelNow](#ctreectrl__endeditlabelnow)"},{"content":"Cancels the edit operation on the label of a tree-view item in the current tree-view control.","pos":[1824,1917]},{"pos":[1922,1975],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::EnsureVisible<ept id=\"p1\">](#ctreectrl__ensurevisible)</ept>","source":"[CTreeCtrl::EnsureVisible](#ctreectrl__ensurevisible)"},{"content":"Ensures that a tree view item is visible in its tree view control.","pos":[1976,2042]},{"pos":[2047,2086],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::Expand<ept id=\"p1\">](#ctreectrl__expand)</ept>","source":"[CTreeCtrl::Expand](#ctreectrl__expand)"},{"content":"Expands, or collapses, the child items of the specified tree view item.","pos":[2087,2158]},{"pos":[2163,2210],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetBkColor<ept id=\"p1\">](#ctreectrl__getbkcolor)</ept>","source":"[CTreeCtrl::GetBkColor](#ctreectrl__getbkcolor)"},{"content":"Retrieves the current background color of the control.","pos":[2211,2265]},{"pos":[2270,2313],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetCheck<ept id=\"p1\">](#ctreectrl__getcheck)</ept>","source":"[CTreeCtrl::GetCheck](#ctreectrl__getcheck)"},{"content":"Retrieves the check state of a tree control item.","pos":[2314,2363]},{"pos":[2368,2419],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetChildItem<ept id=\"p1\">](#ctreectrl__getchilditem)</ept>","source":"[CTreeCtrl::GetChildItem](#ctreectrl__getchilditem)"},{"content":"Retrieves the child of a specified tree view item.","pos":[2420,2470]},{"pos":[2475,2518],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetCount<ept id=\"p1\">](#ctreectrl__getcount)</ept>","source":"[CTreeCtrl::GetCount](#ctreectrl__getcount)"},{"content":"Retrieves the number of tree items associated with a tree view control.","pos":[2519,2590]},{"pos":[2595,2658],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetDropHilightItem<ept id=\"p1\">](#ctreectrl__getdrophilightitem)</ept>","source":"[CTreeCtrl::GetDropHilightItem](#ctreectrl__getdrophilightitem)"},{"content":"Retrieves the target of a drag-and-drop operation.","pos":[2659,2709]},{"pos":[2714,2769],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetEditControl<ept id=\"p1\">](#ctreectrl__geteditcontrol)</ept>","source":"[CTreeCtrl::GetEditControl](#ctreectrl__geteditcontrol)"},{"content":"Retrieves the handle of the edit control used to edit the specified tree view item.","pos":[2770,2853]},{"pos":[2858,2917],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetExtendedStyle<ept id=\"p1\">](#ctreectrl__getextendedstyle)</ept>","source":"[CTreeCtrl::GetExtendedStyle](#ctreectrl__getextendedstyle)"},{"content":"Retrieves the extended styles that the current tree-view control is using.","pos":[2918,2992]},{"pos":[2997,3062],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetFirstVisibleItem<ept id=\"p1\">](#ctreectrl__getfirstvisibleitem)</ept>","source":"[CTreeCtrl::GetFirstVisibleItem](#ctreectrl__getfirstvisibleitem)"},{"content":"Retrieves the first visible item of the specified tree view item.","pos":[3063,3128]},{"pos":[3133,3184],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetImageList<ept id=\"p1\">](#ctreectrl__getimagelist)</ept>","source":"[CTreeCtrl::GetImageList](#ctreectrl__getimagelist)"},{"content":"Retrieves the handle of the image list associated with a tree view control.","pos":[3185,3260]},{"pos":[3265,3310],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetIndent<ept id=\"p1\">](#ctreectrl__getindent)</ept>","source":"[CTreeCtrl::GetIndent](#ctreectrl__getindent)"},{"content":"Retrieves the offset (in pixels) of a tree view item from its parent.","pos":[3311,3380]},{"pos":[3385,3448],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetInsertMarkColor<ept id=\"p1\">](#ctreectrl__getinsertmarkcolor)</ept>","source":"[CTreeCtrl::GetInsertMarkColor](#ctreectrl__getinsertmarkcolor)"},{"content":"Retrieves the color used to draw the insertion mark for the tree view.","pos":[3449,3519]},{"pos":[3524,3565],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetItem<ept id=\"p1\">](#ctreectrl__getitem)</ept>","source":"[CTreeCtrl::GetItem](#ctreectrl__getitem)"},{"content":"Retrieves the attributes of a specified tree view item.","pos":[3566,3621]},{"pos":[3626,3675],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetItemData<ept id=\"p1\">](#ctreectrl__getitemdata)</ept>","source":"[CTreeCtrl::GetItemData](#ctreectrl__getitemdata)"},{"content":"Returns the 32-bit application-specific value associated with an item.","pos":[3676,3746]},{"pos":[3751,3828],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetItemExpandedImageIndex<ept id=\"p1\">](#ctreectrl__getitemexpandedimageindex)</ept>","source":"[CTreeCtrl::GetItemExpandedImageIndex](#ctreectrl__getitemexpandedimageindex)"},{"content":"Retrieves the index of the image to display when the specified item of the current tree-view control is in the expanded state.","pos":[3829,3955]},{"pos":[3960,4013],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetItemHeight<ept id=\"p1\">](#ctreectrl__getitemheight)</ept>","source":"[CTreeCtrl::GetItemHeight](#ctreectrl__getitemheight)"},{"content":"Retrieves the current height of the tree view items.","pos":[4014,4066]},{"pos":[4071,4122],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetItemImage<ept id=\"p1\">](#ctreectrl__getitemimage)</ept>","source":"[CTreeCtrl::GetItemImage](#ctreectrl__getitemimage)"},{"content":"Retrieves the images associated with an item.","pos":[4123,4168]},{"pos":[4173,4230],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetItemPartRect<ept id=\"p1\">](#ctreectrl__getitempartrect)</ept>","source":"[CTreeCtrl::GetItemPartRect](#ctreectrl__getitempartrect)"},{"content":"Retrieves the bounding rectangle for a specified part of a specified item in the current tree-view control.","pos":[4231,4338]},{"pos":[4343,4392],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetItemRect<ept id=\"p1\">](#ctreectrl__getitemrect)</ept>","source":"[CTreeCtrl::GetItemRect](#ctreectrl__getitemrect)"},{"content":"Retrieves the bounding rectangle of a tree view item.","pos":[4393,4446]},{"pos":[4451,4502],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetItemState<ept id=\"p1\">](#ctreectrl__getitemstate)</ept>","source":"[CTreeCtrl::GetItemState](#ctreectrl__getitemstate)"},{"content":"Returns the state of an item.","pos":[4503,4532]},{"pos":[4537,4592],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetItemStateEx<ept id=\"p1\">](#ctreectrl__getitemstateex)</ept>","source":"[CTreeCtrl::GetItemStateEx](#ctreectrl__getitemstateex)"},{"content":"Retrieves the extended state of the specified item in the current tree-view control.","pos":[4593,4677]},{"pos":[4682,4731],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetItemText<ept id=\"p1\">](#ctreectrl__getitemtext)</ept>","source":"[CTreeCtrl::GetItemText](#ctreectrl__getitemtext)"},{"content":"Returns the text of an item.","pos":[4732,4760]},{"pos":[4765,4828],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetLastVisibleItem<ept id=\"p1\">](#ctreectrl__getlastvisibleitem)</ept>","source":"[CTreeCtrl::GetLastVisibleItem](#ctreectrl__getlastvisibleitem)"},{"content":"Retrieves the last expanded item in the current tree-view control.","pos":[4829,4895]},{"pos":[4900,4951],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetLineColor<ept id=\"p1\">](#ctreectrl__getlinecolor)</ept>","source":"[CTreeCtrl::GetLineColor](#ctreectrl__getlinecolor)"},{"content":"Retrieves the current line color for the tree view control.","pos":[4952,5011]},{"pos":[5016,5065],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetNextItem<ept id=\"p1\">](#ctreectrl__getnextitem)</ept>","source":"[CTreeCtrl::GetNextItem](#ctreectrl__getnextitem)"},{"content":"Retrieves the next tree view item that matches a specified relationship.","pos":[5066,5138]},{"pos":[5143,5206],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetNextSiblingItem<ept id=\"p1\">](#ctreectrl__getnextsiblingitem)</ept>","source":"[CTreeCtrl::GetNextSiblingItem](#ctreectrl__getnextsiblingitem)"},{"content":"Retrieves the next sibling of the specified tree view item.","pos":[5207,5266]},{"pos":[5271,5334],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetNextVisibleItem<ept id=\"p1\">](#ctreectrl__getnextvisibleitem)</ept>","source":"[CTreeCtrl::GetNextVisibleItem](#ctreectrl__getnextvisibleitem)"},{"content":"Retrieves the next visible item of the specified tree view item.","pos":[5335,5399]},{"pos":[5404,5457],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetParentItem<ept id=\"p1\">](#ctreectrl__getparentitem)</ept>","source":"[CTreeCtrl::GetParentItem](#ctreectrl__getparentitem)"},{"content":"Retrieves the parent of the specified tree view item.","pos":[5458,5511]},{"pos":[5516,5579],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetPrevSiblingItem<ept id=\"p1\">](#ctreectrl__getprevsiblingitem)</ept>","source":"[CTreeCtrl::GetPrevSiblingItem](#ctreectrl__getprevsiblingitem)"},{"content":"Retrieves the previous sibling of the specified tree view item.","pos":[5580,5643]},{"pos":[5648,5711],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetPrevVisibleItem<ept id=\"p1\">](#ctreectrl__getprevvisibleitem)</ept>","source":"[CTreeCtrl::GetPrevVisibleItem](#ctreectrl__getprevvisibleitem)"},{"content":"Retrieves the previous visible item of the specified tree view item.","pos":[5712,5780]},{"pos":[5785,5834],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetRootItem<ept id=\"p1\">](#ctreectrl__getrootitem)</ept>","source":"[CTreeCtrl::GetRootItem](#ctreectrl__getrootitem)"},{"content":"Retrieves the root of the specified tree view item.","pos":[5835,5886]},{"pos":[5891,5944],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetScrollTime<ept id=\"p1\">](#ctreectrl__getscrolltime)</ept>","source":"[CTreeCtrl::GetScrollTime](#ctreectrl__getscrolltime)"},{"content":"Retrieves the maximum scroll time for the tree view control.","pos":[5945,6005]},{"pos":[6010,6069],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetSelectedCount<ept id=\"p1\">](#ctreectrl__getselectedcount)</ept>","source":"[CTreeCtrl::GetSelectedCount](#ctreectrl__getselectedcount)"},{"content":"Retrieves the number of selected items in the current tree-view control.","pos":[6070,6142]},{"pos":[6147,6204],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetSelectedItem<ept id=\"p1\">](#ctreectrl__getselecteditem)</ept>","source":"[CTreeCtrl::GetSelectedItem](#ctreectrl__getselecteditem)"},{"content":"Retrieves the currently selected tree view item.","pos":[6205,6253]},{"pos":[6258,6309],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetTextColor<ept id=\"p1\">](#ctreectrl__gettextcolor)</ept>","source":"[CTreeCtrl::GetTextColor](#ctreectrl__gettextcolor)"},{"content":"Retrieves the current text color of the control.","pos":[6310,6358]},{"pos":[6363,6412],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetToolTips<ept id=\"p1\">](#ctreectrl__gettooltips)</ept>","source":"[CTreeCtrl::GetToolTips](#ctreectrl__gettooltips)"},{"content":"Retrieves the handle to the child ToolTip control used by a tree view control.","pos":[6413,6491]},{"pos":[6496,6553],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::GetVisibleCount<ept id=\"p1\">](#ctreectrl__getvisiblecount)</ept>","source":"[CTreeCtrl::GetVisibleCount](#ctreectrl__getvisiblecount)"},{"content":"Retrieves the number of visible tree items associated with a tree view control.","pos":[6554,6633]},{"pos":[6638,6679],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::HitTest<ept id=\"p1\">](#ctreectrl__hittest)</ept>","source":"[CTreeCtrl::HitTest](#ctreectrl__hittest)"},{"pos":[6680,6757],"content":"Returns the current position of the cursor related to the <ph id=\"ph1\">`CTreeCtrl`</ph> object.","source":"Returns the current position of the cursor related to the `CTreeCtrl` object."},{"pos":[6762,6809],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::InsertItem<ept id=\"p1\">](#ctreectrl__insertitem)</ept>","source":"[CTreeCtrl::InsertItem](#ctreectrl__insertitem)"},{"content":"Inserts a new item in a tree view control.","pos":[6810,6852]},{"pos":[6857,6914],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::ItemHasChildren<ept id=\"p1\">](#ctreectrl__itemhaschildren)</ept>","source":"[CTreeCtrl::ItemHasChildren](#ctreectrl__itemhaschildren)"},{"content":"Returns nonzero if the specified item has child items.","pos":[6915,6969]},{"pos":[6974,7029],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::MapAccIdToItem<ept id=\"p1\">](#ctreectrl__mapaccidtoitem)</ept>","source":"[CTreeCtrl::MapAccIdToItem](#ctreectrl__mapaccidtoitem)"},{"content":"Maps the specified accessibility identifier to the handle to a tree-view item in the current tree-view control.","pos":[7030,7141]},{"pos":[7146,7201],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::MapItemToAccID<ept id=\"p1\">](#ctreectrl__mapitemtoaccid)</ept>","source":"[CTreeCtrl::MapItemToAccID](#ctreectrl__mapitemtoaccid)"},{"content":"Maps the specified handle to a tree-view item in the current tree-view control to an accessibility identifier.","pos":[7202,7312]},{"pos":[7317,7356],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::Select<ept id=\"p1\">](#ctreectrl__select)</ept>","source":"[CTreeCtrl::Select](#ctreectrl__select)"},{"content":"Selects, scrolls into view, or redraws a specified tree view item.","pos":[7357,7423]},{"pos":[7428,7487],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::SelectDropTarget<ept id=\"p1\">](#ctreectrl__selectdroptarget)</ept>","source":"[CTreeCtrl::SelectDropTarget](#ctreectrl__selectdroptarget)"},{"content":"Redraws the tree item as the target of a drag-and-drop operation.","pos":[7488,7553]},{"pos":[7558,7605],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::SelectItem<ept id=\"p1\">](#ctreectrl__selectitem)</ept>","source":"[CTreeCtrl::SelectItem](#ctreectrl__selectitem)"},{"content":"Selects a specified tree view item.","pos":[7606,7641]},{"pos":[7646,7715],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::SelectSetFirstVisible<ept id=\"p1\">](#ctreectrl__selectsetfirstvisible)</ept>","source":"[CTreeCtrl::SelectSetFirstVisible](#ctreectrl__selectsetfirstvisible)"},{"content":"Selects a specified tree view item as the first visible item.","pos":[7716,7777]},{"pos":[7782,7843],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::SetAutoscrollInfo<ept id=\"p1\">](#ctreectrl__setautoscrollinfo)</ept>","source":"[CTreeCtrl::SetAutoscrollInfo](#ctreectrl__setautoscrollinfo)"},{"content":"Sets the autoscroll rate of the current tree-view control.","pos":[7844,7902]},{"pos":[7907,7954],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::SetBkColor<ept id=\"p1\">](#ctreectrl__setbkcolor)</ept>","source":"[CTreeCtrl::SetBkColor](#ctreectrl__setbkcolor)"},{"content":"Sets the background color of the control.","pos":[7955,7996]},{"pos":[8001,8044],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::SetCheck<ept id=\"p1\">](#ctreectrl__setcheck)</ept>","source":"[CTreeCtrl::SetCheck](#ctreectrl__setcheck)"},{"content":"Sets the check state of a tree control item.","pos":[8045,8089]},{"pos":[8094,8153],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::SetExtendedStyle<ept id=\"p1\">](#ctreectrl__setextendedstyle)</ept>","source":"[CTreeCtrl::SetExtendedStyle](#ctreectrl__setextendedstyle)"},{"content":"Sets the extended styles for the current tree-view control.","pos":[8154,8213]},{"pos":[8218,8269],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::SetImageList<ept id=\"p1\">](#ctreectrl__setimagelist)</ept>","source":"[CTreeCtrl::SetImageList](#ctreectrl__setimagelist)"},{"content":"Sets the handle of the image list associated with a tree view control.","pos":[8270,8340]},{"pos":[8345,8390],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::SetIndent<ept id=\"p1\">](#ctreectrl__setindent)</ept>","source":"[CTreeCtrl::SetIndent](#ctreectrl__setindent)"},{"content":"Sets the offset (in pixels) of a tree view item from its parent.","pos":[8391,8455]},{"pos":[8460,8513],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::SetInsertMark<ept id=\"p1\">](#ctreectrl__setinsertmark)</ept>","source":"[CTreeCtrl::SetInsertMark](#ctreectrl__setinsertmark)"},{"content":"Sets the insertion mark in a tree view control.","pos":[8514,8561]},{"pos":[8566,8629],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::SetInsertMarkColor<ept id=\"p1\">](#ctreectrl__setinsertmarkcolor)</ept>","source":"[CTreeCtrl::SetInsertMarkColor](#ctreectrl__setinsertmarkcolor)"},{"content":"Sets the color used to draw the insertion mark for the tree view.","pos":[8630,8695]},{"pos":[8700,8741],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::SetItem<ept id=\"p1\">](#ctreectrl__setitem)</ept>","source":"[CTreeCtrl::SetItem](#ctreectrl__setitem)"},{"content":"Sets the attributes of a specified tree view item.","pos":[8742,8792]},{"pos":[8797,8846],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::SetItemData<ept id=\"p1\">](#ctreectrl__setitemdata)</ept>","source":"[CTreeCtrl::SetItemData](#ctreectrl__setitemdata)"},{"content":"Sets the 32-bit application-specific value associated with an item.","pos":[8847,8914]},{"pos":[8919,8996],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::SetItemExpandedImageIndex<ept id=\"p1\">](#ctreectrl__setitemexpandedimageindex)</ept>","source":"[CTreeCtrl::SetItemExpandedImageIndex](#ctreectrl__setitemexpandedimageindex)"},{"content":"Sets the index of the image to display when the specified item of the current tree-view control is in the expanded state.","pos":[8997,9118]},{"pos":[9123,9176],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::SetItemHeight<ept id=\"p1\">](#ctreectrl__setitemheight)</ept>","source":"[CTreeCtrl::SetItemHeight](#ctreectrl__setitemheight)"},{"content":"Sets the height of the tree view items.","pos":[9177,9216]},{"pos":[9221,9272],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::SetItemImage<ept id=\"p1\">](#ctreectrl__setitemimage)</ept>","source":"[CTreeCtrl::SetItemImage](#ctreectrl__setitemimage)"},{"content":"Associates images with an item.","pos":[9273,9304]},{"pos":[9309,9360],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::SetItemState<ept id=\"p1\">](#ctreectrl__setitemstate)</ept>","source":"[CTreeCtrl::SetItemState](#ctreectrl__setitemstate)"},{"content":"Sets the state of an item.","pos":[9361,9387]},{"pos":[9392,9447],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::SetItemStateEx<ept id=\"p1\">](#ctreectrl__setitemstateex)</ept>","source":"[CTreeCtrl::SetItemStateEx](#ctreectrl__setitemstateex)"},{"content":"Sets the extended state of the specified item in the current tree-view control.","pos":[9448,9527]},{"pos":[9532,9581],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::SetItemText<ept id=\"p1\">](#ctreectrl__setitemtext)</ept>","source":"[CTreeCtrl::SetItemText](#ctreectrl__setitemtext)"},{"content":"Sets the text of an item.","pos":[9582,9607]},{"pos":[9612,9663],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::SetLineColor<ept id=\"p1\">](#ctreectrl__setlinecolor)</ept>","source":"[CTreeCtrl::SetLineColor](#ctreectrl__setlinecolor)"},{"content":"Sets the current line color for the tree view control.","pos":[9664,9718]},{"pos":[9723,9776],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::SetScrollTime<ept id=\"p1\">](#ctreectrl__setscrolltime)</ept>","source":"[CTreeCtrl::SetScrollTime](#ctreectrl__setscrolltime)"},{"content":"Sets the maximum scroll time for the tree view control.","pos":[9777,9832]},{"pos":[9837,9888],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::SetTextColor<ept id=\"p1\">](#ctreectrl__settextcolor)</ept>","source":"[CTreeCtrl::SetTextColor](#ctreectrl__settextcolor)"},{"content":"Sets the text color of the control.","pos":[9889,9924]},{"pos":[9929,9978],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::SetToolTips<ept id=\"p1\">](#ctreectrl__settooltips)</ept>","source":"[CTreeCtrl::SetToolTips](#ctreectrl__settooltips)"},{"content":"Sets a tree view control's child ToolTip control.","pos":[9979,10028]},{"pos":[10033,10082],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::ShowInfoTip<ept id=\"p1\">](#ctreectrl__showinfotip)</ept>","source":"[CTreeCtrl::ShowInfoTip](#ctreectrl__showinfotip)"},{"content":"Displays the infotip for the specified item in the current tree-view control.","pos":[10083,10160]},{"pos":[10165,10216],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::SortChildren<ept id=\"p1\">](#ctreectrl__sortchildren)</ept>","source":"[CTreeCtrl::SortChildren](#ctreectrl__sortchildren)"},{"content":"Sorts the children of a given parent item.","pos":[10217,10259]},{"pos":[10264,10319],"content":"<bpt id=\"p1\">[</bpt>CTreeCtrl::SortChildrenCB<ept id=\"p1\">](#ctreectrl__sortchildrencb)</ept>","source":"[CTreeCtrl::SortChildrenCB](#ctreectrl__sortchildrencb)"},{"content":"Sorts the children of a given parent item using an application-defined sort function.","pos":[10320,10405]},{"pos":[10415,10422],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A \"tree view control\" is a window that displays a hierarchical list of items, such as the headings in a document, the entries in an index, or the files and directories on a disk.","pos":[10426,10604]},{"content":"Each item consists of a label and an optional bitmapped image, and each item can have a list of subitems associated with it.","pos":[10605,10729]},{"content":"By clicking an item, the user can expand and collapse the associated list of subitems.","pos":[10730,10816]},{"pos":[10823,10964],"content":"This control (and therefore the <ph id=\"ph1\">`CTreeCtrl`</ph> class) is available only to programs running under Windows 98 and Windows NT version 4 and later.","source":"This control (and therefore the `CTreeCtrl` class) is available only to programs running under Windows 98 and Windows NT version 4 and later."},{"pos":[10971,11018],"content":"For more information on using <ph id=\"ph1\">`CTreeCtrl`</ph>, see:","source":"For more information on using `CTreeCtrl`, see:"},{"pos":[11026,11063],"content":"<bpt id=\"p1\">[</bpt>Controls<ept id=\"p1\">](../../mfc/controls-mfc.md)</ept>","source":"[Controls](../../mfc/controls-mfc.md)"},{"pos":[11071,11118],"content":"<bpt id=\"p1\">[</bpt>Using CTreeCtrl<ept id=\"p1\">](../../mfc/using-ctreectrl.md)</ept>","source":"[Using CTreeCtrl](../../mfc/using-ctreectrl.md)"},{"pos":[11126,11275],"content":"<bpt id=\"p1\">[</bpt>Tree View Control Reference<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb759988)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"[Tree View Control Reference](http://msdn.microsoft.com/library/windows/desktop/bb759988) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Knowledge Base article Q222905: HOWTO: Display a Context Menu for CTreeCtrl","pos":[11285,11360]},{"pos":[11369,11390],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[11394,11441],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[11448,11501],"content":"<bpt id=\"p1\">[</bpt>CCmdTarget<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept>","source":"[CCmdTarget](../../mfc/reference/ccmdtarget-class.md)"},{"pos":[11508,11549],"content":"<bpt id=\"p1\">[</bpt>CWnd<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept>","source":"[CWnd](../../mfc/reference/cwnd-class.md)"},{"pos":[11576,11588],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[11592,11612],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxcmn.h","source":"**Header:** afxcmn.h"},{"pos":[11622,11673],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__create\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::Create","linkify":"<a name=\"ctreectrl__create\"></a>  CTreeCtrl::Create","source":"<a name=\"ctreectrl__create\"></a>  CTreeCtrl::Create"},{"pos":[11677,11890],"content":"If you specify the tree control in a dialog box template, or if you are using <bpt id=\"p1\">[</bpt>CTreeView<ept id=\"p1\">](../../mfc/reference/ctreeview-class.md)</ept>, your tree control is created automatically when the dialog box or view is created.","source":"If you specify the tree control in a dialog box template, or if you are using [CTreeView](../../mfc/reference/ctreeview-class.md), your tree control is created automatically when the dialog box or view is created."},{"pos":[12020,12030],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the tree view control's style.","pos":[12047,12087]},{"content":"Apply window styles, described in <bpt id=\"p1\">[</bpt>CreateWindow<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632679)</ept>, and any combination of <bpt id=\"p2\">[</bpt>tree view control styles<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb760013)</ept> as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[12088,12380],"source":" Apply window styles, described in [CreateWindow](http://msdn.microsoft.com/library/windows/desktop/ms632679), and any combination of [tree view control styles](http://msdn.microsoft.com/library/windows/desktop/bb760013) as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Specifies the tree view control's size and position.","pos":[12397,12449]},{"content":"It can be either a <bpt id=\"p1\">[</bpt>CRect<ept id=\"p1\">](../../atl-mfc-shared/reference/crect-class.md)</ept> object or a <bpt id=\"p2\">[</bpt>RECT<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure.","pos":[12450,12613],"source":" It can be either a [CRect](../../atl-mfc-shared/reference/crect-class.md) object or a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure."},{"content":"Specifies the tree view control's parent window, usually a <ph id=\"ph1\">`CDialog`</ph>.","pos":[12636,12705],"source":" Specifies the tree view control's parent window, usually a `CDialog`."},{"content":"It must not be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[12706,12730],"source":" It must not be **NULL**."},{"content":"Specifies the tree view control's ID.","pos":[12746,12783]},{"pos":[12793,12805],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if initialization was successful; otherwise 0.","pos":[12809,12863]},{"pos":[12873,12880],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you want to create the tree control as a child window of some other window, use the <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> member function.","pos":[12884,12998],"source":"If you want to create the tree control as a child window of some other window, use the **Create** member function."},{"content":"If you create the tree control using <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept>, you must pass it <bpt id=\"p2\">**</bpt>WS_VISIBLE<ept id=\"p2\">**</ept>, in addition to other tree view styles.","pos":[12999,13119],"source":" If you create the tree control using **Create**, you must pass it **WS_VISIBLE**, in addition to other tree view styles."},{"content":"You construct a <ph id=\"ph1\">`CTreeCtrl`</ph> in two steps.","pos":[13126,13167],"source":"You construct a `CTreeCtrl` in two steps."},{"content":"First call the constructor, then call <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept>, which creates the tree view control and attaches it to the <ph id=\"ph1\">`CTreeCtrl`</ph> object.","pos":[13168,13296],"source":" First call the constructor, then call **Create**, which creates the tree view control and attaches it to the `CTreeCtrl` object."},{"pos":[13303,13417],"content":"To create a tree control with extended window styles, call <bpt id=\"p1\">[</bpt>CreateEx<ept id=\"p1\">](#ctreectrl__createex)</ept> instead of <bpt id=\"p2\">**</bpt>Create<ept id=\"p2\">**</ept>.","source":"To create a tree control with extended window styles, call [CreateEx](#ctreectrl__createex) instead of **Create**."},{"pos":[13427,13434],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13438,13529],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#1<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#1](../../mfc/reference/codesnippet/cpp/ctreectrl-class_1.cpp)]"},{"pos":[13539,13594],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__createex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::CreateEx","linkify":"<a name=\"ctreectrl__createex\"></a>  CTreeCtrl::CreateEx","source":"<a name=\"ctreectrl__createex\"></a>  CTreeCtrl::CreateEx"},{"pos":[13598,13699],"content":"Call this function to create a control (a child window) and associate it with the <ph id=\"ph1\">`CTreeCtrl`</ph> object.","source":"Call this function to create a control (a child window) and associate it with the `CTreeCtrl` object."},{"pos":[13854,13864],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the extended style of the control being created.","pos":[13883,13941]},{"content":"For a list of extended Windows styles, see the <ph id=\"ph1\">`dwExStyle`</ph> parameter for <bpt id=\"p1\">[</bpt>CreateWindowEx<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632680)</ept> in the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[13942,14151],"source":" For a list of extended Windows styles, see the `dwExStyle` parameter for [CreateWindowEx](http://msdn.microsoft.com/library/windows/desktop/ms632680) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Specifies the tree view control's style.","pos":[14171,14211]},{"content":"Apply window styles, described in <bpt id=\"p1\">[</bpt>CreateWindow<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632679)</ept>, and any combination of <bpt id=\"p2\">[</bpt>tree view control styles<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb760013)</ept> as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[14212,14504],"source":" Apply window styles, described in [CreateWindow](http://msdn.microsoft.com/library/windows/desktop/ms632679), and any combination of [tree view control styles](http://msdn.microsoft.com/library/windows/desktop/bb760013) as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"A reference to a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure describing the size and position of the window to be created, in client coordinates of <ph id=\"ph1\">`pParentWnd`</ph>.","pos":[14521,14715],"source":" A reference to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure describing the size and position of the window to be created, in client coordinates of `pParentWnd`."},{"content":"A pointer to the window that is the control's parent.","pos":[14738,14791]},{"content":"The control's child-window ID.","pos":[14807,14837]},{"pos":[14847,14859],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful otherwise 0.","pos":[14863,14897]},{"pos":[14907,14914],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[14918,15066],"content":"Use <ph id=\"ph1\">`CreateEx`</ph> instead of <bpt id=\"p1\">[</bpt>Create<ept id=\"p1\">](#ctreectrl__create)</ept> to apply extended Windows styles, specified by the Windows extended style preface <bpt id=\"p2\">**</bpt>WS_EX_<ept id=\"p2\">**</ept>.","source":"Use `CreateEx` instead of [Create](#ctreectrl__create) to apply extended Windows styles, specified by the Windows extended style preface **WS_EX_**."},{"pos":[15076,15145],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__createdragimage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::CreateDragImage","linkify":"<a name=\"ctreectrl__createdragimage\"></a>  CTreeCtrl::CreateDragImage","source":"<a name=\"ctreectrl__createdragimage\"></a>  CTreeCtrl::CreateDragImage"},{"content":"Call this function to create a dragging bitmap for the given item in a tree view control, create an image list for the bitmap, and add the bitmap to the image list.","pos":[15149,15313]},{"pos":[15384,15394],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Handle of the tree item to be dragged.","pos":[15409,15447]},{"pos":[15457,15469],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[15473,15573],"content":"Pointer to the image list to which the dragging bitmap was added, if successful; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"Pointer to the image list to which the dragging bitmap was added, if successful; otherwise **NULL**."},{"pos":[15583,15590],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An application uses the image-list functions to display the image when the item is being dragged.","pos":[15594,15691]},{"content":"The <ph id=\"ph1\">`CImageList`</ph> object is permanent, and you must delete it when finished.","pos":[15698,15773],"source":"The `CImageList` object is permanent, and you must delete it when finished."},{"content":"For example:","pos":[15774,15786]},{"pos":[15793,15884],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#2<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#2](../../mfc/reference/codesnippet/cpp/ctreectrl-class_2.cpp)]"},{"pos":[15894,15951],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__ctreectrl\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::CTreeCtrl","linkify":"<a name=\"ctreectrl__ctreectrl\"></a>  CTreeCtrl::CTreeCtrl","source":"<a name=\"ctreectrl__ctreectrl\"></a>  CTreeCtrl::CTreeCtrl"},{"pos":[15955,15987],"content":"Constructs a <ph id=\"ph1\">`CTreeCtrl`</ph> object.","source":"Constructs a `CTreeCtrl` object."},{"pos":[16025,16092],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__deleteallitems\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::DeleteAllItems","linkify":"<a name=\"ctreectrl__deleteallitems\"></a>  CTreeCtrl::DeleteAllItems","source":"<a name=\"ctreectrl__deleteallitems\"></a>  CTreeCtrl::DeleteAllItems"},{"content":"Call this function to delete all items from the tree view control.","pos":[16096,16162]},{"pos":[16210,16222],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[16226,16261]},{"pos":[16271,16278],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[16282,16373],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#3<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_3.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#3](../../mfc/reference/codesnippet/cpp/ctreectrl-class_3.cpp)]"},{"pos":[16383,16442],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__deleteitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::DeleteItem","linkify":"<a name=\"ctreectrl__deleteitem\"></a>  CTreeCtrl::DeleteItem","source":"<a name=\"ctreectrl__deleteitem\"></a>  CTreeCtrl::DeleteItem"},{"content":"Call this function to delete an item from the tree view control.","pos":[16446,16510]},{"pos":[16569,16579],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Handle of the tree item to be deleted.","pos":[16594,16632]},{"content":"If <bpt id=\"p1\">*</bpt>hitem<ept id=\"p1\">*</ept> has the <bpt id=\"p2\">**</bpt>TVI_ROOT<ept id=\"p2\">**</ept> value, all items are deleted from the tree view control.","pos":[16633,16721],"source":" If *hitem* has the **TVI_ROOT** value, all items are deleted from the tree view control."},{"pos":[16731,16743],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[16747,16782]},{"pos":[16792,16799],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[16803,16894],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#4<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_4.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#4](../../mfc/reference/codesnippet/cpp/ctreectrl-class_4.cpp)]"},{"pos":[16904,16961],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__editlabel\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::EditLabel","linkify":"<a name=\"ctreectrl__editlabel\"></a>  CTreeCtrl::EditLabel","source":"<a name=\"ctreectrl__editlabel\"></a>  CTreeCtrl::EditLabel"},{"content":"Call this function to begin in-place editing of the specified item's text.","pos":[16965,17039]},{"pos":[17099,17109],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Handle of the tree item to be edited.","pos":[17124,17161]},{"pos":[17171,17183],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[17187,17289],"content":"If successful, a pointer to the <ph id=\"ph1\">`CEdit`</ph> object that is used to edit the item text; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"If successful, a pointer to the `CEdit` object that is used to edit the item text; otherwise **NULL**."},{"pos":[17299,17306],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The editing is accomplished by replacing the text of the item with a single-line edit control containing the text.","pos":[17310,17424]},{"pos":[17434,17441],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[17445,17536],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#5<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_5.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#5](../../mfc/reference/codesnippet/cpp/ctreectrl-class_5.cpp)]"},{"pos":[17546,17615],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__endeditlabelnow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::EndEditLabelNow","linkify":"<a name=\"ctreectrl__endeditlabelnow\"></a>  CTreeCtrl::EndEditLabelNow","source":"<a name=\"ctreectrl__endeditlabelnow\"></a>  CTreeCtrl::EndEditLabelNow"},{"content":"Concludes the edit operation on the label of a tree-view item in the current tree-view control.","pos":[17619,17714]},{"pos":[17786,17796],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[17803,17812]},{"content":"Description","pos":[17813,17824]},{"pos":[17867,17892],"content":"[in] <ph id=\"ph1\">`fCancelWithoutSave`</ph>","source":"[in] `fCancelWithoutSave`"},{"pos":[17893,18060],"content":"<ph id=\"ph1\">`true`</ph> to discard changes to the tree-view item before concluding the edit operation, or <ph id=\"ph2\">`false`</ph> to save changes to the tree-view item before concluding the operation.","source":"`true` to discard changes to the tree-view item before concluding the edit operation, or `false` to save changes to the tree-view item before concluding the operation."},{"pos":[18071,18083],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[18087,18143],"content":"<ph id=\"ph1\">`true`</ph> if this method is successful; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this method is successful; otherwise, `false`."},{"pos":[18153,18160],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[18164,18355],"content":"This method sends the <bpt id=\"p1\">[</bpt>TVM_ENDEDITLABELNOW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773564)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [TVM_ENDEDITLABELNOW](http://msdn.microsoft.com/library/windows/desktop/bb773564) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[18365,18430],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__ensurevisible\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::EnsureVisible","linkify":"<a name=\"ctreectrl__ensurevisible\"></a>  CTreeCtrl::EnsureVisible","source":"<a name=\"ctreectrl__ensurevisible\"></a>  CTreeCtrl::EnsureVisible"},{"content":"Call this function to ensure that a tree view item is visible.","pos":[18434,18496]},{"pos":[18558,18568],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Handle of the tree item being made visible.","pos":[18583,18626]},{"pos":[18636,18648],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> if the system scrolled the items in the tree-view control to ensure that the specified item is visible.","pos":[18652,18772],"source":"Returns **TRUE** if the system scrolled the items in the tree-view control to ensure that the specified item is visible."},{"content":"Otherwise, the return value is <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>.","pos":[18773,18814],"source":" Otherwise, the return value is **FALSE**."},{"pos":[18824,18831],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If necessary, the function expands the parent item or scrolls the tree view control so that the item is visible.","pos":[18835,18947]},{"pos":[18957,18964],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[18968,19059],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#6<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_6.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#6](../../mfc/reference/codesnippet/cpp/ctreectrl-class_6.cpp)]"},{"pos":[19069,19120],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__expand\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::Expand","linkify":"<a name=\"ctreectrl__expand\"></a>  CTreeCtrl::Expand","source":"<a name=\"ctreectrl__expand\"></a>  CTreeCtrl::Expand"},{"content":"Call this function to expand or collapse the list of child items, if any, associated with the given parent item.","pos":[19124,19236]},{"pos":[19314,19324],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Handle of the tree item being expanded.","pos":[19339,19378]},{"content":"A flag indicating the type of action to be taken.","pos":[19396,19445]},{"content":"This flag can have one of the following values:","pos":[19446,19493]},{"pos":[19501,19535],"content":"<ph id=\"ph1\">`TVE_COLLAPSE`</ph> Collapses the list.","source":"`TVE_COLLAPSE` Collapses the list."},{"content":"<ph id=\"ph1\">`TVE_COLLAPSERESET`</ph> Collapses the list and removes the child items.","pos":[19543,19610],"source":"`TVE_COLLAPSERESET` Collapses the list and removes the child items."},{"content":"The <bpt id=\"p1\">**</bpt>TVIS_EXPANDEDONCE<ept id=\"p1\">**</ept> state flag is reset.","pos":[19611,19657],"source":" The **TVIS_EXPANDEDONCE** state flag is reset."},{"content":"This flag must be used with the <ph id=\"ph1\">`TVE_COLLAPSE`</ph> flag.","pos":[19658,19710],"source":" This flag must be used with the `TVE_COLLAPSE` flag."},{"pos":[19718,19748],"content":"<ph id=\"ph1\">`TVE_EXPAND`</ph> Expands the list.","source":"`TVE_EXPAND` Expands the list."},{"pos":[19756,19859],"content":"<ph id=\"ph1\">`TVE_TOGGLE`</ph> Collapses the list if it is currently expanded or expands it if it is currently collapsed.","source":"`TVE_TOGGLE` Collapses the list if it is currently expanded or expands it if it is currently collapsed."},{"pos":[19869,19881],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[19885,19920]},{"pos":[19930,19937],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[19942,20016],"content":"See the example for <bpt id=\"p1\">[</bpt>CTreeCtrl::EnsureVisible<ept id=\"p1\">](#ctreectrl__ensurevisible)</ept>.","source":"See the example for [CTreeCtrl::EnsureVisible](#ctreectrl__ensurevisible)."},{"pos":[20026,20085],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getbkcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetBkColor","linkify":"<a name=\"ctreectrl__getbkcolor\"></a>  CTreeCtrl::GetBkColor","source":"<a name=\"ctreectrl__getbkcolor\"></a>  CTreeCtrl::GetBkColor"},{"pos":[20089,20305],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TVM_GETBKCOLOR<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773570)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TVM_GETBKCOLOR](http://msdn.microsoft.com/library/windows/desktop/bb773570), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[20362,20374],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A <bpt id=\"p1\">**</bpt>COLORREF<ept id=\"p1\">**</ept> value that represents the current window background color for the control.","pos":[20378,20467],"source":"A **COLORREF** value that represents the current window background color for the control."},{"content":"If this value is -1, the control is using the system window color.","pos":[20468,20534]},{"content":"In this case, you can use <ph id=\"ph1\">`::GetSysColor(COLOR_WINDOW)`</ph> to get the current system color that the control is using.","pos":[20535,20649],"source":" In this case, you can use `::GetSysColor(COLOR_WINDOW)` to get the current system color that the control is using."},{"pos":[20659,20666],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[20671,20743],"content":"See the example for <bpt id=\"p1\">[</bpt>CTreeCtrl::SetTextColor<ept id=\"p1\">](#ctreectrl__settextcolor)</ept>.","source":"See the example for [CTreeCtrl::SetTextColor](#ctreectrl__settextcolor)."},{"pos":[20753,20808],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getcheck\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetCheck","linkify":"<a name=\"ctreectrl__getcheck\"></a>  CTreeCtrl::GetCheck","source":"<a name=\"ctreectrl__getcheck\"></a>  CTreeCtrl::GetCheck"},{"content":"Call this member function to retrieve an item's check state.","pos":[20812,20872]},{"pos":[20938,20948],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <bpt id=\"p1\">**</bpt>HTREEITEM<ept id=\"p1\">**</ept> about which to receive the state information.","pos":[20963,21026],"source":" The **HTREEITEM** about which to receive the state information."},{"pos":[21036,21048],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the tree control item is checked; otherwise 0.","pos":[21052,21109]},{"pos":[21119,21126],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[21131,21195],"content":"See the example for <bpt id=\"p1\">[</bpt>CTreeCtrl::SetCheck<ept id=\"p1\">](#ctreectrl__setcheck)</ept>.","source":"See the example for [CTreeCtrl::SetCheck](#ctreectrl__setcheck)."},{"pos":[21205,21268],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getchilditem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetChildItem","linkify":"<a name=\"ctreectrl__getchilditem\"></a>  CTreeCtrl::GetChildItem","source":"<a name=\"ctreectrl__getchilditem\"></a>  CTreeCtrl::GetChildItem"},{"pos":[21272,21373],"content":"Call this function to retrieve the tree view item that is the child of the item specified by <ph id=\"ph1\">`hItem`</ph>.","source":"Call this function to retrieve the tree view item that is the child of the item specified by `hItem`."},{"pos":[21448,21458],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Handle of a tree item.","pos":[21473,21495]},{"pos":[21505,21517],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[21521,21584],"content":"The handle of the child item if successful; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"The handle of the child item if successful; otherwise **NULL**."},{"pos":[21594,21601],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[21605,21696],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#7<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_7.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#7](../../mfc/reference/codesnippet/cpp/ctreectrl-class_7.cpp)]"},{"pos":[21706,21761],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getcount\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetCount","linkify":"<a name=\"ctreectrl__getcount\"></a>  CTreeCtrl::GetCount","source":"<a name=\"ctreectrl__getcount\"></a>  CTreeCtrl::GetCount"},{"content":"Call this function to retrieve a count of the items in a tree view control.","pos":[21765,21840]},{"pos":[21891,21903],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of items in the tree view control.","pos":[21907,21952]},{"pos":[21962,21969],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[21973,22064],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#8<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_8.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#8](../../mfc/reference/codesnippet/cpp/ctreectrl-class_8.cpp)]"},{"pos":[22074,22149],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getdrophilightitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetDropHilightItem","linkify":"<a name=\"ctreectrl__getdrophilightitem\"></a>  CTreeCtrl::GetDropHilightItem","source":"<a name=\"ctreectrl__getdrophilightitem\"></a>  CTreeCtrl::GetDropHilightItem"},{"content":"Call this function to retrieve the item that is the target of a drag-and-drop operation.","pos":[22153,22241]},{"pos":[22307,22319],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22323,22388],"content":"The handle of the item dropped if successful; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"The handle of the item dropped if successful; otherwise **NULL**."},{"pos":[22398,22405],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[22409,22500],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#9<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_9.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#9](../../mfc/reference/codesnippet/cpp/ctreectrl-class_9.cpp)]"},{"pos":[22510,22577],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__geteditcontrol\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetEditControl","linkify":"<a name=\"ctreectrl__geteditcontrol\"></a>  CTreeCtrl::GetEditControl","source":"<a name=\"ctreectrl__geteditcontrol\"></a>  CTreeCtrl::GetEditControl"},{"content":"Call this function to retrieve the handle of the edit control being used to edit a tree view item's text.","pos":[22581,22686]},{"pos":[22745,22757],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22761,22853],"content":"A pointer to the edit control used to edit the item text, if successful; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"A pointer to the edit control used to edit the item text, if successful; otherwise **NULL**."},{"pos":[22863,22870],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[22874,22967],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#10<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_10.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#10](../../mfc/reference/codesnippet/cpp/ctreectrl-class_10.cpp)]"},{"pos":[22977,23048],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getextendedstyle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetExtendedStyle","linkify":"<a name=\"ctreectrl__getextendedstyle\"></a>  CTreeCtrl::GetExtendedStyle","source":"<a name=\"ctreectrl__getextendedstyle\"></a>  CTreeCtrl::GetExtendedStyle"},{"content":"Retrieves the extended styles that the current tree-view control is using.","pos":[23052,23126]},{"pos":[23186,23198],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A value that contains a bitwise combination (OR) of the current tree-view control's extended styles.","pos":[23202,23302]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Tree-View Control Extended Styles<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb759981)</ept>.","pos":[23303,23425],"source":" For more information, see [Tree-View Control Extended Styles](http://msdn.microsoft.com/library/windows/desktop/bb759981)."},{"pos":[23435,23442],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[23446,23638],"content":"This method sends the <bpt id=\"p1\">[</bpt>TVM_GETEXTENDEDSTYLE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773580)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [TVM_GETEXTENDEDSTYLE](http://msdn.microsoft.com/library/windows/desktop/bb773580) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[23648,23725],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getfirstvisibleitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetFirstVisibleItem","linkify":"<a name=\"ctreectrl__getfirstvisibleitem\"></a>  CTreeCtrl::GetFirstVisibleItem","source":"<a name=\"ctreectrl__getfirstvisibleitem\"></a>  CTreeCtrl::GetFirstVisibleItem"},{"content":"Call this function to retrieve the first visible item of the tree view control.","pos":[23729,23808]},{"pos":[23875,23887],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[23891,23948],"content":"The handle of the first visible item; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"The handle of the first visible item; otherwise **NULL**."},{"pos":[23958,23965],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[23970,24034],"content":"See the example for <bpt id=\"p1\">[</bpt>CTreeCtrl::SetCheck<ept id=\"p1\">](#ctreectrl__setcheck)</ept>.","source":"See the example for [CTreeCtrl::SetCheck](#ctreectrl__setcheck)."},{"pos":[24044,24107],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getimagelist\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetImageList","linkify":"<a name=\"ctreectrl__getimagelist\"></a>  CTreeCtrl::GetImageList","source":"<a name=\"ctreectrl__getimagelist\"></a>  CTreeCtrl::GetImageList"},{"content":"Call this function to retrieve the handle of the normal or state image list associated with the tree view control.","pos":[24111,24225]},{"pos":[24302,24312],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Type of image list to retrieve.","pos":[24332,24363]},{"content":"The image list can be one of the following values:","pos":[24364,24414]},{"pos":[24422,24544],"content":"<ph id=\"ph1\">`TVSIL_NORMAL`</ph> Retrieves the normal image list, which contains the selected and nonselected images for the tree view item.","source":"`TVSIL_NORMAL` Retrieves the normal image list, which contains the selected and nonselected images for the tree view item."},{"pos":[24552,24677],"content":"<ph id=\"ph1\">`TVSIL_STATE`</ph> Retrieves the state image list, which contains the images for tree view items that are in a user-defined state.","source":"`TVSIL_STATE` Retrieves the state image list, which contains the images for tree view items that are in a user-defined state."},{"pos":[24687,24699],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[24703,24773],"content":"Pointer to the control's image list if successful; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"Pointer to the control's image list if successful; otherwise **NULL**."},{"pos":[24783,24790],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Each item in a tree view control can have a pair of bitmapped images associated with it.","pos":[24794,24882]},{"content":"One image is displayed when the item is selected, and the other is displayed when the item is not selected.","pos":[24883,24990]},{"content":"For example, an item might display an open folder when it is selected and a closed folder when it is not selected.","pos":[24991,25105]},{"pos":[25112,25217],"content":"For more information on image lists, see the <bpt id=\"p1\">[</bpt>CImageList<ept id=\"p1\">](../../mfc/reference/cimagelist-class.md)</ept> class.","source":"For more information on image lists, see the [CImageList](../../mfc/reference/cimagelist-class.md) class."},{"pos":[25227,25234],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[25238,25331],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#11<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_11.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#11](../../mfc/reference/codesnippet/cpp/ctreectrl-class_11.cpp)]"},{"pos":[25341,25398],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getindent\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetIndent","linkify":"<a name=\"ctreectrl__getindent\"></a>  CTreeCtrl::GetIndent","source":"<a name=\"ctreectrl__getindent\"></a>  CTreeCtrl::GetIndent"},{"content":"Call this function to retrieve the amount, in pixels, that child items are indented relative to their parent items.","pos":[25402,25517]},{"pos":[25569,25581],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The amount of indentation measured in pixels.","pos":[25585,25630]},{"pos":[25640,25647],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[25651,25744],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#12<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_12.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#12](../../mfc/reference/codesnippet/cpp/ctreectrl-class_12.cpp)]"},{"pos":[25754,25829],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getinsertmarkcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetInsertMarkColor","linkify":"<a name=\"ctreectrl__getinsertmarkcolor\"></a>  CTreeCtrl::GetInsertMarkColor","source":"<a name=\"ctreectrl__getinsertmarkcolor\"></a>  CTreeCtrl::GetInsertMarkColor"},{"pos":[25833,26057],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TVM_GETINSERTMARKCOLOR<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773590)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TVM_GETINSERTMARKCOLOR](http://msdn.microsoft.com/library/windows/desktop/bb773590), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[26122,26134],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[26138,26206],"content":"A <bpt id=\"p1\">**</bpt>COLORREF<ept id=\"p1\">**</ept> value that contains the current insertion mark color.","source":"A **COLORREF** value that contains the current insertion mark color."},{"pos":[26216,26223],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[26227,26320],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#13<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_13.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#13](../../mfc/reference/codesnippet/cpp/ctreectrl-class_13.cpp)]"},{"pos":[26330,26383],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetItem","linkify":"<a name=\"ctreectrl__getitem\"></a>  CTreeCtrl::GetItem","source":"<a name=\"ctreectrl__getitem\"></a>  CTreeCtrl::GetItem"},{"content":"Call this function to retrieve the attributes of the specified tree view item.","pos":[26387,26465]},{"pos":[26528,26538],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>TVITEM<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773456)</ept> structure, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[26553,26720],"source":" A pointer to a [TVITEM](http://msdn.microsoft.com/library/windows/desktop/bb773456) structure, as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[26730,26742],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[26746,26781]},{"pos":[26791,26798],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[26803,26871],"content":"See the example for <bpt id=\"p1\">[</bpt>CTreeCtrl::DeleteItem<ept id=\"p1\">](#ctreectrl__deleteitem)</ept>.","source":"See the example for [CTreeCtrl::DeleteItem](#ctreectrl__deleteitem)."},{"pos":[26881,26942],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getitemdata\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetItemData","linkify":"<a name=\"ctreectrl__getitemdata\"></a>  CTreeCtrl::GetItemData","source":"<a name=\"ctreectrl__getitemdata\"></a>  CTreeCtrl::GetItemData"},{"content":"Call this function to retrieve the 32-bit application-specific value associated with the specified item.","pos":[26946,27050]},{"pos":[27124,27134],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Handle of the item whose data is to be retrieved.","pos":[27149,27198]},{"pos":[27208,27220],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[27224,27306],"content":"A 32-bit application-specific value associated with the item specified by <ph id=\"ph1\">`hItem`</ph>.","source":"A 32-bit application-specific value associated with the item specified by `hItem`."},{"pos":[27316,27323],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[27327,27420],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#14<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_14.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#14](../../mfc/reference/codesnippet/cpp/ctreectrl-class_14.cpp)]"},{"pos":[27430,27519],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getitemexpandedimageindex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetItemExpandedImageIndex","linkify":"<a name=\"ctreectrl__getitemexpandedimageindex\"></a>  CTreeCtrl::GetItemExpandedImageIndex","source":"<a name=\"ctreectrl__getitemexpandedimageindex\"></a>  CTreeCtrl::GetItemExpandedImageIndex"},{"content":"Retrieves the index of the image to display when the specified item of the current tree-view control is in the expanded state.","pos":[27523,27649]},{"pos":[27730,27740],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[27747,27756]},{"content":"Description","pos":[27757,27768]},{"pos":[27811,27823],"content":"[in] <ph id=\"ph1\">`hItem`</ph>","source":"[in] `hItem`"},{"content":"Handle to a tree-view control item.","pos":[27824,27859]},{"pos":[27870,27882],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The index of the image to display when the specified item is in the expanded state.","pos":[27886,27969]},{"pos":[27979,27986],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method sends the <bpt id=\"p1\">[</bpt>TVM_GETITEM<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773596)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[27990,28173],"source":"This method sends the [TVM_GETITEM](http://msdn.microsoft.com/library/windows/desktop/bb773596) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"That message returns the <bpt id=\"p1\">[</bpt>TVITEMEX<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773459)</ept> structure that describes the tree-view control item, and then this method retrieves the <ph id=\"ph1\">`iExpandedImage`</ph> member from that structure.","pos":[28174,28402],"source":" That message returns the [TVITEMEX](http://msdn.microsoft.com/library/windows/desktop/bb773459) structure that describes the tree-view control item, and then this method retrieves the `iExpandedImage` member from that structure."},{"pos":[28412,28477],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getitemheight\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetItemHeight","linkify":"<a name=\"ctreectrl__getitemheight\"></a>  CTreeCtrl::GetItemHeight","source":"<a name=\"ctreectrl__getitemheight\"></a>  CTreeCtrl::GetItemHeight"},{"pos":[28481,28700],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TVM_GETITEMHEIGHT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773599)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TVM_GETITEMHEIGHT](http://msdn.microsoft.com/library/windows/desktop/bb773599), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[28757,28769],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the item, in pixels.","pos":[28773,28807]},{"pos":[28817,28824],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[28828,28921],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#15<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_15.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#15](../../mfc/reference/codesnippet/cpp/ctreectrl-class_15.cpp)]"},{"pos":[28931,28994],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getitemimage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetItemImage","linkify":"<a name=\"ctreectrl__getitemimage\"></a>  CTreeCtrl::GetItemImage","source":"<a name=\"ctreectrl__getitemimage\"></a>  CTreeCtrl::GetItemImage"},{"content":"Each item in a tree view control can have a pair of bitmapped images associated with it.","pos":[28998,29086]},{"pos":[29207,29217],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The handle of the item whose image is to be retrieved.","pos":[29232,29286]},{"content":"An integer that receives the index of the item's image within the tree view control's image list.","pos":[29305,29402]},{"content":"An integer that receives the index of the item's selected image within the tree view control's image list.","pos":[29429,29535]},{"pos":[29545,29557],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[29561,29596]},{"pos":[29606,29613],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The images appear on the left side of an item's label.","pos":[29617,29671]},{"content":"One image is displayed when the item is selected, and the other is displayed when the item is not selected.","pos":[29672,29779]},{"content":"For example, an item might display an open folder when it is selected and a closed folder when it is not selected.","pos":[29780,29894]},{"content":"Call this function to retrieve the index of the item's image and its selected image within the tree view control's image list.","pos":[29901,30027]},{"pos":[30037,30044],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[30048,30141],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#16<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_16.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#16](../../mfc/reference/codesnippet/cpp/ctreectrl-class_16.cpp)]"},{"pos":[30151,30220],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getitempartrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetItemPartRect","linkify":"<a name=\"ctreectrl__getitempartrect\"></a>  CTreeCtrl::GetItemPartRect","source":"<a name=\"ctreectrl__getitempartrect\"></a>  CTreeCtrl::GetItemPartRect"},{"content":"Retrieves the bounding rectangle for a specified part of a specified item in the current tree-view control.","pos":[30224,30331]},{"pos":[30448,30458],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[30465,30474]},{"content":"Description","pos":[30475,30486]},{"pos":[30529,30541],"content":"[in] <ph id=\"ph1\">`hItem`</ph>","source":"[in] `hItem`"},{"content":"Handle to a tree-view control item.","pos":[30542,30577]},{"pos":[30582,30594],"content":"[in] <ph id=\"ph1\">`nPart`</ph>","source":"[in] `nPart`"},{"content":"Identifier for the part.","pos":[30595,30619]},{"content":"Must be set to <ph id=\"ph1\">`TVGIPR_BUTTON`</ph>.","pos":[30620,30651],"source":" Must be set to `TVGIPR_BUTTON`."},{"pos":[30656,30670],"content":"[out] <ph id=\"ph1\">`lpRect`</ph>","source":"[out] `lpRect`"},{"content":"Pointer to a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure.","pos":[30671,30761],"source":"Pointer to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure."},{"content":"If this method is successful, the structure receives the rectangle coordinates of the part specified by <ph id=\"ph1\">`hItem`</ph> and <ph id=\"ph2\">`nPart`</ph>.","pos":[30762,30886],"source":" If this method is successful, the structure receives the rectangle coordinates of the part specified by `hItem` and `nPart`."},{"pos":[30897,30909],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[30913,30969],"content":"<ph id=\"ph1\">`true`</ph> if this method is successful; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this method is successful; otherwise, `false`."},{"pos":[30979,30986],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Each tree control item is bounded by a graphics rectangle.","pos":[30990,31048]},{"content":"Whenever a point in that rectangle is clicked, the item is said to be <bpt id=\"p1\">*</bpt>hit<ept id=\"p1\">*</ept>.","pos":[31049,31125],"source":" Whenever a point in that rectangle is clicked, the item is said to be *hit*."},{"content":"This method returns the largest rectangle such that when a point in the rectangle is clicked, the item identified by the <ph id=\"ph1\">`hItem`</ph> parameter is hit.","pos":[31126,31272],"source":" This method returns the largest rectangle such that when a point in the rectangle is clicked, the item identified by the `hItem` parameter is hit."},{"content":"This method sends the <ph id=\"ph1\">`TVM_GETITEMPARTRECT`</ph> message, which is described in the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[31279,31410],"source":"This method sends the `TVM_GETITEMPARTRECT` message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>TreeView_GetItemPartRect<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773847)</ept> macro.","pos":[31411,31534],"source":" For more information, see the [TreeView_GetItemPartRect](http://msdn.microsoft.com/library/windows/desktop/bb773847) macro."},{"pos":[31544,31551],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example defines a variable, <ph id=\"ph1\">`m_treeCtrl`</ph>, that is used to access the current tree-view control.","pos":[31555,31669],"source":"The following code example defines a variable, `m_treeCtrl`, that is used to access the current tree-view control."},{"content":"The code example also defines an unsigned integer and several HTREEITEM variables.","pos":[31670,31752]},{"content":"These variables are used in the next example.","pos":[31753,31798]},{"pos":[31805,31898],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl_s1#1<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_17.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl_s1#1](../../mfc/reference/codesnippet/cpp/ctreectrl-class_17.h)]"},{"pos":[31908,31915],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example uses an accessibility identifier and the <bpt id=\"p1\">[</bpt>CTreeCtrl::MapAccIdToItem<ept id=\"p1\">](#ctreectrl__mapaccidtoitem)</ept> method to retrieve a handle to the root tree-view item.","pos":[31919,32098],"source":"The following code example uses an accessibility identifier and the [CTreeCtrl::MapAccIdToItem](#ctreectrl__mapaccidtoitem) method to retrieve a handle to the root tree-view item."},{"content":"Then the example uses the handle and the <bpt id=\"p1\">[</bpt>CTreeCtrl::GetItemPartRect<ept id=\"p1\">](#ctreectrl__getitempartrect)</ept> method to draw a 3D rectangle around that item.","pos":[32099,32245],"source":" Then the example uses the handle and the [CTreeCtrl::GetItemPartRect](#ctreectrl__getitempartrect) method to draw a 3D rectangle around that item."},{"content":"In an earlier section of the code example, which is not shown, we created a tree-view that consists of a root country/region node for the United States, subnodes for the states of Pennsylvania and Washington, and tree items for cities in those states.","pos":[32246,32497]},{"content":"We used the <bpt id=\"p1\">[</bpt>CTreeCtrl::MapItemToAccID<ept id=\"p1\">](#ctreectrl__mapitemtoaccid)</ept> method to associate the root tree-view item with an accessibility identifier.","pos":[32498,32643],"source":" We used the [CTreeCtrl::MapItemToAccID](#ctreectrl__mapitemtoaccid) method to associate the root tree-view item with an accessibility identifier."},{"pos":[32650,32745],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl_s1#5<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_18.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl_s1#5](../../mfc/reference/codesnippet/cpp/ctreectrl-class_18.cpp)]"},{"pos":[32755,32816],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getitemrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetItemRect","linkify":"<a name=\"ctreectrl__getitemrect\"></a>  CTreeCtrl::GetItemRect","source":"<a name=\"ctreectrl__getitemrect\"></a>  CTreeCtrl::GetItemRect"},{"pos":[32820,32929],"content":"Call this function to retrieve the bounding rectangle for <ph id=\"ph1\">`hItem`</ph> and determine whether it is visible or not.","source":"Call this function to retrieve the bounding rectangle for `hItem` and determine whether it is visible or not."},{"pos":[33046,33056],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The handle of a tree view control item.","pos":[33071,33110]},{"content":"Pointer to a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure that receives the bounding rectangle.","pos":[33129,33256],"source":" Pointer to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure that receives the bounding rectangle."},{"content":"The coordinates are relative to the upper-left corner of the tree view control.","pos":[33257,33336]},{"content":"<bpt id=\"p1\">*</bpt>bTextOnly<ept id=\"p1\">*</ept>","pos":[33343,33354],"source":"*bTextOnly*"},{"content":"If this parameter is nonzero, the bounding rectangle includes only the text of the item.","pos":[33358,33446]},{"content":"Otherwise it includes the entire line that the item occupies in the tree view control.","pos":[33447,33533]},{"pos":[33543,33555],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the item is visible, with the bounding rectangle contained in <ph id=\"ph1\">`lpRect`</ph>.","pos":[33559,33641],"source":"Nonzero if the item is visible, with the bounding rectangle contained in `lpRect`."},{"content":"Otherwise, 0 with <ph id=\"ph1\">`lpRect`</ph> uninitialized.","pos":[33642,33683],"source":" Otherwise, 0 with `lpRect` uninitialized."},{"pos":[33693,33700],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[33704,33797],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#17<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_19.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#17](../../mfc/reference/codesnippet/cpp/ctreectrl-class_19.cpp)]"},{"pos":[33807,33870],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getitemstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetItemState","linkify":"<a name=\"ctreectrl__getitemstate\"></a>  CTreeCtrl::GetItemState","source":"<a name=\"ctreectrl__getitemstate\"></a>  CTreeCtrl::GetItemState"},{"pos":[33874,33925],"content":"Returns the state of the item specified by <ph id=\"ph1\">`hItem`</ph>.","source":"Returns the state of the item specified by `hItem`."},{"pos":[34023,34033],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Handle of the item whose state is to be retrieved.","pos":[34048,34098]},{"content":"Mask indicating one or more states to be retrieved.","pos":[34121,34172]},{"content":"For more information on possible values for <ph id=\"ph1\">`nStateMask`</ph>, see the discussion of the <bpt id=\"p1\">**</bpt>state<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>stateMask<ept id=\"p2\">**</ept> members of the <bpt id=\"p3\">[</bpt>TVITEM<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/bb773456)</ept> structure in the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[34173,34438],"source":" For more information on possible values for `nStateMask`, see the discussion of the **state** and **stateMask** members of the [TVITEM](http://msdn.microsoft.com/library/windows/desktop/bb773456) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[34448,34460],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A <bpt id=\"p1\">**</bpt>UINT<ept id=\"p1\">**</ept> that holds the bitwise OR of the values specified by nStateMask.","pos":[34464,34539],"source":"A **UINT** that holds the bitwise OR of the values specified by nStateMask."},{"content":"For information on possible values, see <bpt id=\"p1\">[</bpt>CTreeCtrl::GetItem<ept id=\"p1\">](#ctreectrl__getitem)</ept>.","pos":[34540,34622],"source":" For information on possible values, see [CTreeCtrl::GetItem](#ctreectrl__getitem)."},{"content":"To find the value for a specific state, perform a bitwise AND operation of the state value and the return value, as shown in the following example.","pos":[34623,34770]},{"pos":[34780,34787],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[34791,34884],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#18<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_20.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#18](../../mfc/reference/codesnippet/cpp/ctreectrl-class_20.cpp)]"},{"pos":[34894,34961],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getitemstateex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetItemStateEx","linkify":"<a name=\"ctreectrl__getitemstateex\"></a>  CTreeCtrl::GetItemStateEx","source":"<a name=\"ctreectrl__getitemstateex\"></a>  CTreeCtrl::GetItemStateEx"},{"content":"Retrieves the extended state of the specified item in the current tree-view control.","pos":[34965,35049]},{"pos":[35121,35131],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[35138,35147]},{"content":"Description","pos":[35148,35159]},{"pos":[35202,35214],"content":"[in] <ph id=\"ph1\">`hItem`</ph>","source":"[in] `hItem`"},{"content":"Handle to a tree-view control item.","pos":[35215,35250]},{"pos":[35261,35273],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The extended state of the item.","pos":[35277,35308]},{"content":"For more information, see the <ph id=\"ph1\">`uStateEx`</ph> member of the <bpt id=\"p1\">[</bpt>TVITEMEX<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773459)</ept> structure.","pos":[35309,35445],"source":" For more information, see the `uStateEx` member of the [TVITEMEX](http://msdn.microsoft.com/library/windows/desktop/bb773459) structure."},{"pos":[35455,35462],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method sends the <bpt id=\"p1\">[</bpt>TVM_GETITEM<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773596)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[35466,35649],"source":"This method sends the [TVM_GETITEM](http://msdn.microsoft.com/library/windows/desktop/bb773596) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"That message returns the <bpt id=\"p1\">[</bpt>TVITEMEX<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773459)</ept> structure that describes the tree-view control item, and this method retrieves the <ph id=\"ph1\">`uStateEx`</ph> member from that structure.","pos":[35650,35867],"source":" That message returns the [TVITEMEX](http://msdn.microsoft.com/library/windows/desktop/bb773459) structure that describes the tree-view control item, and this method retrieves the `uStateEx` member from that structure."},{"pos":[35877,35938],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getitemtext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetItemText","linkify":"<a name=\"ctreectrl__getitemtext\"></a>  CTreeCtrl::GetItemText","source":"<a name=\"ctreectrl__getitemtext\"></a>  CTreeCtrl::GetItemText"},{"pos":[35942,35992],"content":"Returns the text of the item specified by <ph id=\"ph1\">`hItem`</ph>.","source":"Returns the text of the item specified by `hItem`."},{"pos":[36064,36074],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Handle of the item whose text is to be retrieved.","pos":[36089,36138]},{"pos":[36148,36160],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[36164,36210],"content":"A <ph id=\"ph1\">`CString`</ph> object containing the item's text.","source":"A `CString` object containing the item's text."},{"pos":[36220,36227],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[36232,36302],"content":"See the example for <bpt id=\"p1\">[</bpt>CTreeCtrl::GetNextItem<ept id=\"p1\">](#ctreectrl__getnextitem)</ept>.","source":"See the example for [CTreeCtrl::GetNextItem](#ctreectrl__getnextitem)."},{"pos":[36312,36387],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getlastvisibleitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetLastVisibleItem","linkify":"<a name=\"ctreectrl__getlastvisibleitem\"></a>  CTreeCtrl::GetLastVisibleItem","source":"<a name=\"ctreectrl__getlastvisibleitem\"></a>  CTreeCtrl::GetLastVisibleItem"},{"content":"Retrieves the last unexpanded node item in the current tree-view control.","pos":[36391,36464]},{"pos":[36530,36542],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[36546,36637],"content":"The handle to the last unexpanded node item if the method is successful; otherwise, <ph id=\"ph1\">`NULL`</ph>.","source":"The handle to the last unexpanded node item if the method is successful; otherwise, `NULL`."},{"pos":[36647,36654],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method sends the <bpt id=\"p1\">[</bpt>TVM_GETNEXTITEM<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773622)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[36658,36845],"source":"This method sends the [TVM_GETNEXTITEM](http://msdn.microsoft.com/library/windows/desktop/bb773622) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"For more information, see the <ph id=\"ph1\">`TVGN_LASTVISIBLE`</ph> flag in the <ph id=\"ph2\">`flag`</ph> parameter of that message.","pos":[36846,36940],"source":" For more information, see the `TVGN_LASTVISIBLE` flag in the `flag` parameter of that message."},{"pos":[36950,36957],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example defines a variable, <ph id=\"ph1\">`m_treeCtrl`</ph>, that is used to access the current tree-view control.","pos":[36961,37075],"source":"The following code example defines a variable, `m_treeCtrl`, that is used to access the current tree-view control."},{"content":"The code example also defines an unsigned integer and several HTREEITEM variables.","pos":[37076,37158]},{"content":"One or more of these variables are used in the next example.","pos":[37159,37219]},{"pos":[37226,37319],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl_s1#1<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_17.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl_s1#1](../../mfc/reference/codesnippet/cpp/ctreectrl-class_17.h)]"},{"pos":[37329,37336],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example retrieves a handle to the last unexpanded tree-view node item, and then draws a 3D rectangle around that item.","pos":[37340,37477]},{"content":"In an earlier section of the code example, which is not shown, we created a tree-view that consists of a root country/region node for the United States, subnodes for the states of Pennsylvania and Washington, and tree items for cities in those states.","pos":[37478,37729]},{"pos":[37736,37831],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl_s1#6<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_21.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl_s1#6](../../mfc/reference/codesnippet/cpp/ctreectrl-class_21.cpp)]"},{"pos":[37841,37904],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getlinecolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetLineColor","linkify":"<a name=\"ctreectrl__getlinecolor\"></a>  CTreeCtrl::GetLineColor","source":"<a name=\"ctreectrl__getlinecolor\"></a>  CTreeCtrl::GetLineColor"},{"pos":[37908,38126],"content":"This member function implements the behavior of the win32 message <bpt id=\"p1\">[</bpt>TVM_GETLINECOLOR<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773619)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the win32 message [TVM_GETLINECOLOR](http://msdn.microsoft.com/library/windows/desktop/bb773619), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[38185,38197],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current line color.","pos":[38201,38224]},{"pos":[38234,38241],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[38245,38338],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#19<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_22.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#19](../../mfc/reference/codesnippet/cpp/ctreectrl-class_22.cpp)]"},{"pos":[38348,38409],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getnextitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetNextItem","linkify":"<a name=\"ctreectrl__getnextitem\"></a>  CTreeCtrl::GetNextItem","source":"<a name=\"ctreectrl__getnextitem\"></a>  CTreeCtrl::GetNextItem"},{"pos":[38413,38547],"content":"Call this function to retrieve the tree view item that has the specified relationship, indicated by the <ph id=\"ph1\">`nCode`</ph> parameter, to <ph id=\"ph2\">`hItem`</ph>.","source":"Call this function to retrieve the tree view item that has the specified relationship, indicated by the `nCode` parameter, to `hItem`."},{"pos":[38644,38654],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Handle of a tree item.","pos":[38669,38691]},{"content":"A flag indicating the type of relation to <ph id=\"ph1\">`hItem`</ph>.","pos":[38709,38759],"source":" A flag indicating the type of relation to `hItem`."},{"content":"This flag can be one of the following values:","pos":[38760,38805]},{"pos":[38813,38864],"content":"<ph id=\"ph1\">`TVGN_CARET`</ph> Retrieves the currently selected item.","source":"`TVGN_CARET` Retrieves the currently selected item."},{"pos":[38872,38963],"content":"<ph id=\"ph1\">`TVGN_CHILD`</ph> Retrieves the first child item of the item specified by the <ph id=\"ph2\">`hItem`</ph> parameter.","source":"`TVGN_CHILD` Retrieves the first child item of the item specified by the `hItem` parameter."},{"pos":[38971,39056],"content":"<ph id=\"ph1\">`TVGN_DROPHILITE`</ph> Retrieves the item that is the target of a drag-and-drop operation.","source":"`TVGN_DROPHILITE` Retrieves the item that is the target of a drag-and-drop operation."},{"pos":[39064,39117],"content":"<ph id=\"ph1\">`TVGN_FIRSTVISIBLE`</ph> Retrieves the first visible item.","source":"`TVGN_FIRSTVISIBLE` Retrieves the first visible item."},{"content":"<ph id=\"ph1\">`TVGN_LASTVISIBLE`</ph> Retrieves the last expanded item in the tree.","pos":[39125,39189],"source":"`TVGN_LASTVISIBLE` Retrieves the last expanded item in the tree."},{"content":"This does not retrieve the last item visible in the tree-view window.","pos":[39190,39259]},{"pos":[39267,39311],"content":"<ph id=\"ph1\">`TVGN_NEXT`</ph> Retrieves the next sibling item.","source":"`TVGN_NEXT` Retrieves the next sibling item."},{"pos":[39319,39402],"content":"<ph id=\"ph1\">`TVGN_NEXTVISIBLE`</ph> Retrieves the next visible item that follows the specified item.","source":"`TVGN_NEXTVISIBLE` Retrieves the next visible item that follows the specified item."},{"pos":[39410,39467],"content":"<ph id=\"ph1\">`TVGN_PARENT`</ph> Retrieves the parent of the specified item.","source":"`TVGN_PARENT` Retrieves the parent of the specified item."},{"pos":[39475,39527],"content":"<ph id=\"ph1\">`TVGN_PREVIOUS`</ph> Retrieves the previous sibling item.","source":"`TVGN_PREVIOUS` Retrieves the previous sibling item."},{"pos":[39535,39624],"content":"<ph id=\"ph1\">`TVGN_PREVIOUSVISIBLE`</ph> Retrieves the first visible item that precedes the specified item.","source":"`TVGN_PREVIOUSVISIBLE` Retrieves the first visible item that precedes the specified item."},{"pos":[39632,39730],"content":"<ph id=\"ph1\">`TVGN_ROOT`</ph> Retrieves the first child item of the root item of which the specified item is a part.","source":"`TVGN_ROOT` Retrieves the first child item of the root item of which the specified item is a part."},{"pos":[39740,39752],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39756,39818],"content":"The handle of the next item if successful; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"The handle of the next item if successful; otherwise **NULL**."},{"pos":[39828,39835],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function will return <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if the item being retrieved is the root node of the tree.","pos":[39839,39931],"source":"This function will return **NULL** if the item being retrieved is the root node of the tree."},{"content":"For example, if you use this message with the <ph id=\"ph1\">`TVGN_PARENT`</ph> flag on a first-level child of the tree view's root node, the message will return <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[39932,40083],"source":" For example, if you use this message with the `TVGN_PARENT` flag on a first-level child of the tree view's root node, the message will return **NULL**."},{"pos":[40093,40100],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[40104,40205],"content":"For an example of using <ph id=\"ph1\">`GetNextItem`</ph> in a loop, see <bpt id=\"p1\">[</bpt>CTreeCtrl::DeleteItem<ept id=\"p1\">](#ctreectrl__deleteitem)</ept>.","source":"For an example of using `GetNextItem` in a loop, see [CTreeCtrl::DeleteItem](#ctreectrl__deleteitem)."},{"pos":[40212,40305],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#20<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_23.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#20](../../mfc/reference/codesnippet/cpp/ctreectrl-class_23.cpp)]"},{"pos":[40315,40390],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getnextsiblingitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetNextSiblingItem","linkify":"<a name=\"ctreectrl__getnextsiblingitem\"></a>  CTreeCtrl::GetNextSiblingItem","source":"<a name=\"ctreectrl__getnextsiblingitem\"></a>  CTreeCtrl::GetNextSiblingItem"},{"pos":[40394,40453],"content":"Call this function to retrieve the next sibling of <ph id=\"ph1\">`hItem`</ph>.","source":"Call this function to retrieve the next sibling of `hItem`."},{"pos":[40534,40544],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Handle of a tree item.","pos":[40559,40581]},{"pos":[40591,40603],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[40607,40663],"content":"The handle of the next sibling item; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"The handle of the next sibling item; otherwise **NULL**."},{"pos":[40673,40680],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[40684,40777],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#21<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_24.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#21](../../mfc/reference/codesnippet/cpp/ctreectrl-class_24.cpp)]"},{"pos":[40787,40862],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getnextvisibleitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetNextVisibleItem","linkify":"<a name=\"ctreectrl__getnextvisibleitem\"></a>  CTreeCtrl::GetNextVisibleItem","source":"<a name=\"ctreectrl__getnextvisibleitem\"></a>  CTreeCtrl::GetNextVisibleItem"},{"pos":[40866,40930],"content":"Call this function to retrieve the next visible item of <ph id=\"ph1\">`hItem`</ph>.","source":"Call this function to retrieve the next visible item of `hItem`."},{"pos":[41011,41021],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Handle of a tree item.","pos":[41036,41058]},{"pos":[41068,41080],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[41084,41140],"content":"The handle of the next visible item; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"The handle of the next visible item; otherwise **NULL**."},{"pos":[41150,41157],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[41162,41226],"content":"See the example for <bpt id=\"p1\">[</bpt>CTreeCtrl::SetCheck<ept id=\"p1\">](#ctreectrl__setcheck)</ept>.","source":"See the example for [CTreeCtrl::SetCheck](#ctreectrl__setcheck)."},{"pos":[41236,41301],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getparentitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetParentItem","linkify":"<a name=\"ctreectrl__getparentitem\"></a>  CTreeCtrl::GetParentItem","source":"<a name=\"ctreectrl__getparentitem\"></a>  CTreeCtrl::GetParentItem"},{"pos":[41305,41358],"content":"Call this function to retrieve the parent of <ph id=\"ph1\">`hItem`</ph>.","source":"Call this function to retrieve the parent of `hItem`."},{"pos":[41434,41444],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Handle of a tree item.","pos":[41459,41481]},{"pos":[41491,41503],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[41507,41557],"content":"The handle of the parent item; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"The handle of the parent item; otherwise **NULL**."},{"pos":[41567,41574],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[41578,41678],"content":"This function will return <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if the parent of the specified item is the root node of the tree.","source":"This function will return **NULL** if the parent of the specified item is the root node of the tree."},{"pos":[41688,41695],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[41700,41774],"content":"See the example for <bpt id=\"p1\">[</bpt>CTreeCtrl::EnsureVisible<ept id=\"p1\">](#ctreectrl__ensurevisible)</ept>.","source":"See the example for [CTreeCtrl::EnsureVisible](#ctreectrl__ensurevisible)."},{"pos":[41784,41859],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getprevsiblingitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetPrevSiblingItem","linkify":"<a name=\"ctreectrl__getprevsiblingitem\"></a>  CTreeCtrl::GetPrevSiblingItem","source":"<a name=\"ctreectrl__getprevsiblingitem\"></a>  CTreeCtrl::GetPrevSiblingItem"},{"pos":[41863,41926],"content":"Call this function to retrieve the previous sibling of <ph id=\"ph1\">`hItem`</ph>.","source":"Call this function to retrieve the previous sibling of `hItem`."},{"pos":[42007,42017],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Handle of a tree item.","pos":[42032,42054]},{"pos":[42064,42076],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[42080,42135],"content":"The handle of the previous sibling; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"The handle of the previous sibling; otherwise **NULL**."},{"pos":[42145,42152],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[42156,42249],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#22<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_25.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#22](../../mfc/reference/codesnippet/cpp/ctreectrl-class_25.cpp)]"},{"pos":[42259,42334],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getprevvisibleitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetPrevVisibleItem","linkify":"<a name=\"ctreectrl__getprevvisibleitem\"></a>  CTreeCtrl::GetPrevVisibleItem","source":"<a name=\"ctreectrl__getprevvisibleitem\"></a>  CTreeCtrl::GetPrevVisibleItem"},{"pos":[42338,42406],"content":"Call this function to retrieve the previous visible item of <ph id=\"ph1\">`hItem`</ph>.","source":"Call this function to retrieve the previous visible item of `hItem`."},{"pos":[42487,42497],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Handle of a tree item.","pos":[42512,42534]},{"pos":[42544,42556],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[42560,42620],"content":"The handle of the previous visible item; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"The handle of the previous visible item; otherwise **NULL**."},{"pos":[42630,42637],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[42641,42734],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#23<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_26.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#23](../../mfc/reference/codesnippet/cpp/ctreectrl-class_26.cpp)]"},{"pos":[42744,42805],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getrootitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetRootItem","linkify":"<a name=\"ctreectrl__getrootitem\"></a>  CTreeCtrl::GetRootItem","source":"<a name=\"ctreectrl__getrootitem\"></a>  CTreeCtrl::GetRootItem"},{"content":"Call this function to retrieve the root item of the tree view control.","pos":[42809,42879]},{"pos":[42938,42950],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[42954,43002],"content":"The handle of the root item; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"The handle of the root item; otherwise **NULL**."},{"pos":[43012,43019],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[43024,43090],"content":"See the example for <bpt id=\"p1\">[</bpt>CTreeCtrl::EditLabel<ept id=\"p1\">](#ctreectrl__editlabel)</ept>.","source":"See the example for [CTreeCtrl::EditLabel](#ctreectrl__editlabel)."},{"pos":[43100,43165],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getscrolltime\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetScrollTime","linkify":"<a name=\"ctreectrl__getscrolltime\"></a>  CTreeCtrl::GetScrollTime","source":"<a name=\"ctreectrl__getscrolltime\"></a>  CTreeCtrl::GetScrollTime"},{"content":"Call this member function to retrieve the maximum scroll time for the tree view control.","pos":[43169,43257]},{"pos":[43313,43325],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The maximum scroll time, in milliseconds.","pos":[43329,43370]},{"pos":[43380,43387],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[43391,43610],"content":"This member function implements the behavior of the win32 message <bpt id=\"p1\">[</bpt>TVM_GETSCROLLTIME<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773625)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the win32 message [TVM_GETSCROLLTIME](http://msdn.microsoft.com/library/windows/desktop/bb773625), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[43620,43691],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getselectedcount\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetSelectedCount","linkify":"<a name=\"ctreectrl__getselectedcount\"></a>  CTreeCtrl::GetSelectedCount","source":"<a name=\"ctreectrl__getselectedcount\"></a>  CTreeCtrl::GetSelectedCount"},{"content":"Retrieves the number of selected items in the current tree-view control.","pos":[43695,43767]},{"pos":[43817,43829],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of selected items.","pos":[43833,43862]},{"pos":[43872,43879],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[43883,44075],"content":"This method sends the <bpt id=\"p1\">[</bpt>TVM_GETSELECTEDCOUNT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773629)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [TVM_GETSELECTEDCOUNT](http://msdn.microsoft.com/library/windows/desktop/bb773629) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[44085,44154],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getselecteditem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetSelectedItem","linkify":"<a name=\"ctreectrl__getselecteditem\"></a>  CTreeCtrl::GetSelectedItem","source":"<a name=\"ctreectrl__getselecteditem\"></a>  CTreeCtrl::GetSelectedItem"},{"content":"Call this function to retrieve the currently selected item of the tree view control.","pos":[44158,44242]},{"pos":[44305,44317],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[44321,44373],"content":"The handle of the selected item; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"The handle of the selected item; otherwise **NULL**."},{"pos":[44383,44390],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[44394,44487],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#24<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_27.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#24](../../mfc/reference/codesnippet/cpp/ctreectrl-class_27.cpp)]"},{"pos":[44497,44560],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__gettextcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetTextColor","linkify":"<a name=\"ctreectrl__gettextcolor\"></a>  CTreeCtrl::GetTextColor","source":"<a name=\"ctreectrl__gettextcolor\"></a>  CTreeCtrl::GetTextColor"},{"pos":[44564,44782],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TVM_GETTEXTCOLOR<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773633)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TVM_GETTEXTCOLOR](http://msdn.microsoft.com/library/windows/desktop/bb773633), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[44841,44853],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A <bpt id=\"p1\">**</bpt>COLORREF<ept id=\"p1\">**</ept> value that represents the current text color.","pos":[44857,44917],"source":"A **COLORREF** value that represents the current text color."},{"content":"If this value is -1, the control is using the system color for the text color.","pos":[44918,44996]},{"pos":[45006,45013],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[45018,45090],"content":"See the example for <bpt id=\"p1\">[</bpt>CTreeCtrl::SetTextColor<ept id=\"p1\">](#ctreectrl__settextcolor)</ept>.","source":"See the example for [CTreeCtrl::SetTextColor](#ctreectrl__settextcolor)."},{"pos":[45100,45161],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__gettooltips\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetToolTips","linkify":"<a name=\"ctreectrl__gettooltips\"></a>  CTreeCtrl::GetToolTips","source":"<a name=\"ctreectrl__gettooltips\"></a>  CTreeCtrl::GetToolTips"},{"pos":[45165,45382],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TVM_GETTOOLTIPS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773729)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TVM_GETTOOLTIPS](http://msdn.microsoft.com/library/windows/desktop/bb773729), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[45445,45457],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>CToolTipCtrl<ept id=\"p1\">](../../mfc/reference/ctooltipctrl-class.md)</ept> object to be used by the tree control.","pos":[45461,45572],"source":"A pointer to a [CToolTipCtrl](../../mfc/reference/ctooltipctrl-class.md) object to be used by the tree control."},{"content":"If the <bpt id=\"p1\">[</bpt>Create<ept id=\"p1\">](#ctreectrl__create)</ept> member function uses the style <bpt id=\"p2\">**</bpt>TVS_NOTOOLTIPS<ept id=\"p2\">**</ept>, no tooltips are used, and <bpt id=\"p3\">**</bpt>NULL<ept id=\"p3\">**</ept> is returned.","pos":[45573,45707],"source":" If the [Create](#ctreectrl__create) member function uses the style **TVS_NOTOOLTIPS**, no tooltips are used, and **NULL** is returned."},{"pos":[45717,45724],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[45728,45878],"content":"The MFC implementation of <ph id=\"ph1\">`GetToolTips`</ph> returns a <ph id=\"ph2\">`CToolTipCtrl`</ph> object, which is used by the tree control, rather than a handle to a tooltip control.","source":"The MFC implementation of `GetToolTips` returns a `CToolTipCtrl` object, which is used by the tree control, rather than a handle to a tooltip control."},{"pos":[45888,45895],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[45899,45992],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#25<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_28.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#25](../../mfc/reference/codesnippet/cpp/ctreectrl-class_28.cpp)]"},{"pos":[46002,46071],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__getvisiblecount\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::GetVisibleCount","linkify":"<a name=\"ctreectrl__getvisiblecount\"></a>  CTreeCtrl::GetVisibleCount","source":"<a name=\"ctreectrl__getvisiblecount\"></a>  CTreeCtrl::GetVisibleCount"},{"content":"Call this function to retrieve a count of the visible items in a tree view control.","pos":[46075,46158]},{"pos":[46216,46228],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of visible items in the tree view control; otherwise – 1.","pos":[46232,46300]},{"pos":[46310,46317],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[46322,46386],"content":"See the example for <bpt id=\"p1\">[</bpt>CTreeCtrl::SetCheck<ept id=\"p1\">](#ctreectrl__setcheck)</ept>.","source":"See the example for [CTreeCtrl::SetCheck](#ctreectrl__setcheck)."},{"pos":[46396,46449],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__hittest\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::HitTest","linkify":"<a name=\"ctreectrl__hittest\"></a>  CTreeCtrl::HitTest","source":"<a name=\"ctreectrl__hittest\"></a>  CTreeCtrl::HitTest"},{"content":"Call this function to determine the location of the specified point relative to the client area of a tree view control.","pos":[46453,46572]},{"pos":[46732,46742],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Client coordinates of the point to test.","pos":[46754,46794]},{"content":"Pointer to an integer that receives information about the results of the hit test.","pos":[46813,46895]},{"content":"It can be one or more of the values listed under the <bpt id=\"p1\">**</bpt>flags<ept id=\"p1\">**</ept> member in the Remarks section.","pos":[46896,46989],"source":" It can be one or more of the values listed under the **flags** member in the Remarks section."},{"content":"Address of a <bpt id=\"p1\">[</bpt>TVHITTESTINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773448)</ept> structure that contains the position to hit test and that receives information about the results of the hit test.","pos":[47014,47216],"source":" Address of a [TVHITTESTINFO](http://msdn.microsoft.com/library/windows/desktop/bb773448) structure that contains the position to hit test and that receives information about the results of the hit test."},{"pos":[47226,47238],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[47242,47351],"content":"The handle of the tree view item that occupies the specified point or <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if no item occupies the point.","source":"The handle of the tree view item that occupies the specified point or **NULL** if no item occupies the point."},{"pos":[47361,47368],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this function is called, the <ph id=\"ph1\">`pt`</ph> parameter specifies the coordinates of the point to test.","pos":[47372,47468],"source":"When this function is called, the `pt` parameter specifies the coordinates of the point to test."},{"content":"The function returns the handle of the item at the specified point or <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if no item occupies the point.","pos":[47469,47578],"source":" The function returns the handle of the item at the specified point or **NULL** if no item occupies the point."},{"content":"In addition, the <ph id=\"ph1\">`pFlags`</ph> parameter contains a value that indicates the location of the specified point.","pos":[47579,47683],"source":" In addition, the `pFlags` parameter contains a value that indicates the location of the specified point."},{"content":"Possible values are:","pos":[47684,47704]},{"content":"Value","pos":[47725,47730]},{"content":"Meaning","pos":[47731,47738]},{"content":"TVHT_ABOVE","pos":[47743,47753]},{"content":"Above the client area.","pos":[47754,47776]},{"content":"TVHT_BELOW","pos":[47781,47791]},{"content":"Below the client area.","pos":[47792,47814]},{"content":"TVHT_NOWHERE","pos":[47819,47831]},{"content":"In the client area, but below the last item.","pos":[47832,47876]},{"content":"TVHT_ONITEM","pos":[47881,47892]},{"content":"On the bitmap or label associated with an item.","pos":[47893,47940]},{"content":"TVHT_ONITEMBUTTON","pos":[47945,47962]},{"content":"On the button associated with an item.","pos":[47963,48001]},{"content":"TVHT_ONITEMICON","pos":[48006,48021]},{"content":"On the bitmap associated with an item.","pos":[48022,48060]},{"content":"TVHT_ONITEMINDENT","pos":[48065,48082]},{"content":"In the indentation associated with an item.","pos":[48083,48126]},{"content":"TVHT_ONITEMLABEL","pos":[48131,48147]},{"content":"On the label (string) associated with an item.","pos":[48148,48194]},{"content":"TVHT_ONITEMRIGHT","pos":[48199,48215]},{"content":"In the area to the right of an item.","pos":[48216,48252]},{"content":"TVHT_ONITEMSTATEICON","pos":[48257,48277]},{"content":"On the state icon for a tree-view item that is in a user-defined state.","pos":[48278,48349]},{"content":"TVHT_TOLEFT","pos":[48354,48365]},{"content":"To the left of the client area.","pos":[48366,48397]},{"content":"TVHT_TORIGHT","pos":[48402,48414]},{"content":"To the right of the client area.","pos":[48415,48447]},{"pos":[48464,48471],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[48475,48568],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#26<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_29.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#26](../../mfc/reference/codesnippet/cpp/ctreectrl-class_29.cpp)]"},{"pos":[48578,48637],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__insertitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::InsertItem","linkify":"<a name=\"ctreectrl__insertitem\"></a>  CTreeCtrl::InsertItem","source":"<a name=\"ctreectrl__insertitem\"></a>  CTreeCtrl::InsertItem"},{"content":"Call this function to insert a new item in a tree view control.","pos":[48641,48704]},{"pos":[49311,49321],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>lpInsertStruct<ept id=\"p1\">*</ept>","pos":[49325,49341],"source":"*lpInsertStruct*"},{"content":"A pointer to a <ph id=\"ph1\">`TVINSERTSTRUCT`</ph> that specifies the attributes of the tree view item to be inserted.","pos":[49345,49444],"source":" A pointer to a `TVINSERTSTRUCT` that specifies the attributes of the tree view item to be inserted."},{"content":"Integer specifying which attributes to set.","pos":[49462,49505]},{"content":"See the <ph id=\"ph1\">`TVITEM`</ph> structure in the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[49506,49592],"source":" See the `TVITEM` structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Address of a string containing the item's text.","pos":[49613,49660]},{"content":"Index of the item's image in the tree view control's image list.","pos":[49679,49743]},{"content":"Index of the item's selected image in the tree view control's image list.","pos":[49770,49843]},{"content":"Specifies values for the item's states.","pos":[49862,49901]},{"content":"See Tree View Control Item States in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for a list of appropriate states.","pos":[49902,50028],"source":" See Tree View Control Item States in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for a list of appropriate states."},{"content":"Specifies which states are to be set.","pos":[50051,50088]},{"content":"See the <ph id=\"ph1\">`TVITEM`</ph> structure in the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[50089,50175],"source":" See the `TVITEM` structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"A 32-bit application-specific value associated with the item.","pos":[50194,50255]},{"content":"Handle of the inserted item's parent.","pos":[50275,50312]},{"content":"<bpt id=\"p1\">*</bpt>hInsertAfter<ept id=\"p1\">*</ept>","pos":[50319,50333],"source":"*hInsertAfter*"},{"content":"Handle of the item after which the new item is to be inserted.","pos":[50337,50399]},{"pos":[50409,50421],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[50425,50482],"content":"Handle of the new item if successful; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"Handle of the new item if successful; otherwise **NULL**."},{"pos":[50492,50499],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The example shows situations in which you might want to use each version of the function when inserting a tree control item.","pos":[50503,50627]},{"pos":[50637,50644],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[50648,50741],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#27<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_30.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#27](../../mfc/reference/codesnippet/cpp/ctreectrl-class_30.cpp)]"},{"pos":[50751,50820],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__itemhaschildren\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::ItemHasChildren","linkify":"<a name=\"ctreectrl__itemhaschildren\"></a>  CTreeCtrl::ItemHasChildren","source":"<a name=\"ctreectrl__itemhaschildren\"></a>  CTreeCtrl::ItemHasChildren"},{"pos":[50824,50914],"content":"Use this function to determine whether the tree item specified by <ph id=\"ph1\">`hItem`</ph> has child items.","source":"Use this function to determine whether the tree item specified by `hItem` has child items."},{"pos":[50987,50997],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Handle of a tree item.","pos":[51012,51034]},{"pos":[51044,51056],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[51060,51140],"content":"Nonzero if the tree item specified by <ph id=\"ph1\">`hItem`</ph> has child items; 0 if it does not.","source":"Nonzero if the tree item specified by `hItem` has child items; 0 if it does not."},{"pos":[51150,51157],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[51161,51267],"content":"If so, you can then use <bpt id=\"p1\">[</bpt>CTreeCtrl::GetChildItem<ept id=\"p1\">](#ctreectrl__getchilditem)</ept> to retrieve those child items.","source":"If so, you can then use [CTreeCtrl::GetChildItem](#ctreectrl__getchilditem) to retrieve those child items."},{"pos":[51277,51284],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[51289,51367],"content":"See the example for <bpt id=\"p1\">[</bpt>CTreeCtrl::GetSelectedItem<ept id=\"p1\">](#ctreectrl__getselecteditem)</ept>.","source":"See the example for [CTreeCtrl::GetSelectedItem](#ctreectrl__getselecteditem)."},{"pos":[51377,51444],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__mapaccidtoitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::MapAccIdToItem","linkify":"<a name=\"ctreectrl__mapaccidtoitem\"></a>  CTreeCtrl::MapAccIdToItem","source":"<a name=\"ctreectrl__mapaccidtoitem\"></a>  CTreeCtrl::MapAccIdToItem"},{"content":"Maps the specified accessibility identifier to the handle of a tree-view item in the current tree-view control.","pos":[51448,51559]},{"pos":[51632,51642],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[51649,51658]},{"content":"Description","pos":[51659,51670]},{"pos":[51713,51726],"content":"[in] <ph id=\"ph1\">`uAccId`</ph>","source":"[in] `uAccId`"},{"content":"An accessibility identifier for an element in the tree-view item.","pos":[51727,51792]},{"pos":[51803,51815],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle to a tree-view item ( <ph id=\"ph1\">`HTREEITEM`</ph>) that corresponds to the <ph id=\"ph2\">`uAccId`</ph> parameter.","pos":[51819,51908],"source":"The handle to a tree-view item ( `HTREEITEM`) that corresponds to the `uAccId` parameter."},{"content":"For more information, see the <ph id=\"ph1\">`hItem`</ph> member of the <bpt id=\"p1\">[</bpt>TVITEMEX<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773459)</ept> structure.","pos":[51909,52042],"source":" For more information, see the `hItem` member of the [TVITEMEX](http://msdn.microsoft.com/library/windows/desktop/bb773459) structure."},{"pos":[52052,52059],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Accessibility aids are applications that help people with disabilities use computers.","pos":[52063,52148]},{"content":"An accessibility identifier is used by the <ph id=\"ph1\">`IAccessible`</ph> interface to uniquely specify an element in a window.","pos":[52149,52259],"source":" An accessibility identifier is used by the `IAccessible` interface to uniquely specify an element in a window."},{"content":"For more information about accessibility identifiers, search for the \"About Active Accessibility Support\" topic at <bpt id=\"p1\">[</bpt>Microsoft Developer Network<ept id=\"p1\">](http://go.microsoft.com/fwlink/linkid=56322)</ept>.","pos":[52260,52450],"source":" For more information about accessibility identifiers, search for the \"About Active Accessibility Support\" topic at [Microsoft Developer Network](http://go.microsoft.com/fwlink/linkid=56322)."},{"pos":[52457,52652],"content":"This method sends the <bpt id=\"p1\">[</bpt>TVM_MAPACCIDTOHTREEITEM<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773734)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [TVM_MAPACCIDTOHTREEITEM](http://msdn.microsoft.com/library/windows/desktop/bb773734) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[52662,52669],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example defines a variable, <ph id=\"ph1\">`m_treeCtrl`</ph>, that is used to access the current tree-view control.","pos":[52673,52787],"source":"The following code example defines a variable, `m_treeCtrl`, that is used to access the current tree-view control."},{"content":"The code example also defines an unsigned integer and several HTREEITEM variables.","pos":[52788,52870]},{"content":"These variables are used in the next example.","pos":[52871,52916]},{"pos":[52923,53016],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl_s1#1<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_17.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl_s1#1](../../mfc/reference/codesnippet/cpp/ctreectrl-class_17.h)]"},{"pos":[53026,53033],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example uses an accessibility identifier and the <bpt id=\"p1\">[</bpt>CTreeCtrl::MapAccIdToItem<ept id=\"p1\">](#ctreectrl__mapaccidtoitem)</ept> method to retrieve a handle to the root tree-view item.","pos":[53037,53216],"source":"The following code example uses an accessibility identifier and the [CTreeCtrl::MapAccIdToItem](#ctreectrl__mapaccidtoitem) method to retrieve a handle to the root tree-view item."},{"content":"The example uses the handle and the <bpt id=\"p1\">[</bpt>CTreeCtrl::GetItemPartRect<ept id=\"p1\">](#ctreectrl__getitempartrect)</ept> method to draw a 3D rectangle around that item.","pos":[53217,53358],"source":" The example uses the handle and the [CTreeCtrl::GetItemPartRect](#ctreectrl__getitempartrect) method to draw a 3D rectangle around that item."},{"content":"In an earlier section of the code example, which is not shown, we created a tree-view that consists of a root country/region node for the United States, subnodes for the states of Pennsylvania and Washington, and tree items for cities in those states.","pos":[53359,53610]},{"content":"We used the <bpt id=\"p1\">[</bpt>CTreeCtrl::MapItemToAccID<ept id=\"p1\">](#ctreectrl__mapitemtoaccid)</ept> method to associate the root tree-view item with an accessibility identifier.","pos":[53611,53756],"source":" We used the [CTreeCtrl::MapItemToAccID](#ctreectrl__mapitemtoaccid) method to associate the root tree-view item with an accessibility identifier."},{"pos":[53763,53858],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl_s1#5<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_18.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl_s1#5](../../mfc/reference/codesnippet/cpp/ctreectrl-class_18.cpp)]"},{"pos":[53868,53935],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__mapitemtoaccid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::MapItemToAccID","linkify":"<a name=\"ctreectrl__mapitemtoaccid\"></a>  CTreeCtrl::MapItemToAccID","source":"<a name=\"ctreectrl__mapitemtoaccid\"></a>  CTreeCtrl::MapItemToAccID"},{"content":"Maps the specified handle of a tree-view item in the current tree-view control to an accessibility identifier.","pos":[53939,54049]},{"pos":[54121,54131],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[54138,54147]},{"content":"Description","pos":[54148,54159]},{"pos":[54202,54214],"content":"[in] <ph id=\"ph1\">`hItem`</ph>","source":"[in] `hItem`"},{"content":"A handle of a tree-view item in the control.","pos":[54215,54259]},{"content":"For more information, see the <ph id=\"ph1\">`hItem`</ph> member of the <bpt id=\"p1\">[</bpt>TVITEMEX<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773459)</ept> structure.","pos":[54260,54393],"source":" For more information, see the `hItem` member of the [TVITEMEX](http://msdn.microsoft.com/library/windows/desktop/bb773459) structure."},{"pos":[54404,54416],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[54420,54491],"content":"The accessibility identifier that corresponds to the <ph id=\"ph1\">`hItem`</ph> parameter.","source":"The accessibility identifier that corresponds to the `hItem` parameter."},{"pos":[54501,54508],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Accessibility aids are applications that help people with disabilities use computers.","pos":[54512,54597]},{"content":"An accessibility identifier is used by the <ph id=\"ph1\">`IAccessible`</ph> interface to uniquely specify an element in a window.","pos":[54598,54708],"source":" An accessibility identifier is used by the `IAccessible` interface to uniquely specify an element in a window."},{"content":"For more information about accessibility identifiers, search for the \"About Active Accessibility Support\" topic at <bpt id=\"p1\">[</bpt>Microsoft Developer Network<ept id=\"p1\">](http://go.microsoft.com/fwlink/linkid=56322)</ept>.","pos":[54709,54899],"source":" For more information about accessibility identifiers, search for the \"About Active Accessibility Support\" topic at [Microsoft Developer Network](http://go.microsoft.com/fwlink/linkid=56322)."},{"pos":[54906,55101],"content":"This method sends the <bpt id=\"p1\">[</bpt>TVM_MAPHTREEITEMTOACCID<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773735)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [TVM_MAPHTREEITEMTOACCID](http://msdn.microsoft.com/library/windows/desktop/bb773735) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[55111,55118],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example defines a variable, <ph id=\"ph1\">`m_treeCtrl`</ph>, that is used to access the current tree-view control.","pos":[55122,55236],"source":"The following code example defines a variable, `m_treeCtrl`, that is used to access the current tree-view control."},{"content":"The code example also defines an unsigned integer and several HTREEITEM variables.","pos":[55237,55319]},{"content":"These variables are used in the next example.","pos":[55320,55365]},{"pos":[55372,55465],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl_s1#1<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_17.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl_s1#1](../../mfc/reference/codesnippet/cpp/ctreectrl-class_17.h)]"},{"pos":[55475,55482],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example obtains an identification number for a tree-view control item.","pos":[55486,55575]},{"content":"In an earlier section of the code example, which is not shown, we created a tree-view that consists of a root country/region node for the United States, subnodes for the states of Pennsylvania and Washington, and tree items for cities in those states.","pos":[55576,55827]},{"content":"This code example obtains a unique identification number for the root country/region node.","pos":[55828,55918]},{"pos":[55925,56020],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl_s1#2<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_31.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl_s1#2](../../mfc/reference/codesnippet/cpp/ctreectrl-class_31.cpp)]"},{"pos":[56030,56081],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__select\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::Select","linkify":"<a name=\"ctreectrl__select\"></a>  CTreeCtrl::Select","source":"<a name=\"ctreectrl__select\"></a>  CTreeCtrl::Select"},{"content":"Call this function to select the given tree view item, scroll the item into view, or redraw the item in the style used to indicate the target of a drag-and-drop operation.","pos":[56085,56256]},{"pos":[56334,56344],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Handle of a tree item.","pos":[56359,56381]},{"content":"The type of action to take.","pos":[56399,56426]},{"content":"This parameter can be one of the following values:","pos":[56427,56477]},{"pos":[56485,56535],"content":"<ph id=\"ph1\">`TVGN_CARET`</ph> Sets the selection to the given item.","source":"`TVGN_CARET` Sets the selection to the given item."},{"pos":[56543,56654],"content":"<ph id=\"ph1\">`TVGN_DROPHILITE`</ph> Redraws the given item in the style used to indicate the target of a drag-and-drop operation.","source":"`TVGN_DROPHILITE` Redraws the given item in the style used to indicate the target of a drag-and-drop operation."},{"pos":[56662,56764],"content":"<ph id=\"ph1\">`TVGN_FIRSTVISIBLE`</ph> Scrolls the tree view vertically so that the given item is the first visible item.","source":"`TVGN_FIRSTVISIBLE` Scrolls the tree view vertically so that the given item is the first visible item."},{"pos":[56774,56786],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[56790,56825]},{"pos":[56835,56842],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If <ph id=\"ph1\">`nCode`</ph> contains the value <ph id=\"ph2\">`TVGN_CARET`</ph>, the parent window receives the <bpt id=\"p1\">**</bpt>TVN_SELCHANGING<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>TVN_SELCHANGED<ept id=\"p2\">**</ept> notification messages.","pos":[56846,56986],"source":"If `nCode` contains the value `TVGN_CARET`, the parent window receives the **TVN_SELCHANGING** and **TVN_SELCHANGED** notification messages."},{"content":"In addition, if the specified item is the child of a collapsed parent item, the parent's list of child items is expanded to reveal the specified item.","pos":[56987,57137]},{"content":"In this case, the parent window receives the <bpt id=\"p1\">**</bpt>TVN_ITEMEXPANDING<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>TVN_ITEMEXPANDED<ept id=\"p2\">**</ept> notification messages.","pos":[57138,57252],"source":" In this case, the parent window receives the **TVN_ITEMEXPANDING** and **TVN_ITEMEXPANDED** notification messages."},{"pos":[57262,57269],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[57274,57336],"content":"See the example for <bpt id=\"p1\">[</bpt>CTreeCtrl::HitTest<ept id=\"p1\">](#ctreectrl__hittest)</ept>.","source":"See the example for [CTreeCtrl::HitTest](#ctreectrl__hittest)."},{"pos":[57346,57417],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__selectdroptarget\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::SelectDropTarget","linkify":"<a name=\"ctreectrl__selectdroptarget\"></a>  CTreeCtrl::SelectDropTarget","source":"<a name=\"ctreectrl__selectdroptarget\"></a>  CTreeCtrl::SelectDropTarget"},{"content":"Call this function to redraw the item in the style used to indicate the target of a drag-and-drop operation.","pos":[57421,57529]},{"pos":[57594,57604],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Handle of a tree item.","pos":[57619,57641]},{"pos":[57651,57663],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[57667,57702]},{"pos":[57712,57719],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[57723,57814],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#9<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_9.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#9](../../mfc/reference/codesnippet/cpp/ctreectrl-class_9.cpp)]"},{"pos":[57824,57883],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__selectitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::SelectItem","linkify":"<a name=\"ctreectrl__selectitem\"></a>  CTreeCtrl::SelectItem","source":"<a name=\"ctreectrl__selectitem\"></a>  CTreeCtrl::SelectItem"},{"content":"Call this function to select the given tree view item.","pos":[57887,57941]},{"pos":[58000,58010],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Handle of a tree item.","pos":[58025,58047]},{"pos":[58057,58069],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[58073,58108]},{"pos":[58118,58125],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[58129,58188],"content":"If <ph id=\"ph1\">`hItem`</ph> is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, then this function selects no item.","source":"If `hItem` is **NULL**, then this function selects no item."},{"pos":[58198,58205],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[58209,58302],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#26<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_29.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#26](../../mfc/reference/codesnippet/cpp/ctreectrl-class_29.cpp)]"},{"pos":[58312,58393],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__selectsetfirstvisible\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::SelectSetFirstVisible","linkify":"<a name=\"ctreectrl__selectsetfirstvisible\"></a>  CTreeCtrl::SelectSetFirstVisible","source":"<a name=\"ctreectrl__selectsetfirstvisible\"></a>  CTreeCtrl::SelectSetFirstVisible"},{"content":"Call this function to scroll the tree view vertically so that the given item is the first visible item.","pos":[58397,58500]},{"pos":[58570,58580],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Handle of the tree item to be set as the first visible item.","pos":[58595,58655]},{"pos":[58665,58677],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[58681,58716]},{"pos":[58726,58733],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[58737,58849],"content":"The function sends a message to the window with the <ph id=\"ph1\">`TVM_SELECTITEM`</ph> and <ph id=\"ph2\">`TVGN_FIRSTVISIBLE`</ph> message parameters.","source":"The function sends a message to the window with the `TVM_SELECTITEM` and `TVGN_FIRSTVISIBLE` message parameters."},{"pos":[58859,58866],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[58870,58963],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#28<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_32.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#28](../../mfc/reference/codesnippet/cpp/ctreectrl-class_32.cpp)]"},{"pos":[58973,59046],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__setautoscrollinfo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::SetAutoscrollInfo","linkify":"<a name=\"ctreectrl__setautoscrollinfo\"></a>  CTreeCtrl::SetAutoscrollInfo","source":"<a name=\"ctreectrl__setautoscrollinfo\"></a>  CTreeCtrl::SetAutoscrollInfo"},{"content":"Sets the autoscroll rate of the current tree-view control.","pos":[59050,59108]},{"pos":[59207,59217],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[59224,59233]},{"content":"Description","pos":[59234,59245]},{"pos":[59288,59308],"content":"[in] <ph id=\"ph1\">`uPixelsPerSec`</ph>","source":"[in] `uPixelsPerSec`"},{"content":"The number of pixels per second to scroll.","pos":[59309,59351]},{"pos":[59356,59374],"content":"[in] <ph id=\"ph1\">`uUpdateTime`</ph>","source":"[in] `uUpdateTime`"},{"content":"The time interval between updates of the control.","pos":[59375,59424]},{"pos":[59435,59447],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[59451,59473],"content":"Always returns <ph id=\"ph1\">`true`</ph>.","source":"Always returns `true`."},{"pos":[59483,59490],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The autoscroll parameters are used to scroll into view an item that is currently not visible.","pos":[59494,59587]},{"content":"The tree-view control must have the <ph id=\"ph1\">`TVS_EX_AUTOHSCROLL`</ph> extended style, which is described in <bpt id=\"p1\">[</bpt>Tree-View Control Extended Styles<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb759981)</ept>.","pos":[59588,59779],"source":" The tree-view control must have the `TVS_EX_AUTOHSCROLL` extended style, which is described in [Tree-View Control Extended Styles](http://msdn.microsoft.com/library/windows/desktop/bb759981)."},{"pos":[59786,59979],"content":"This method sends the <bpt id=\"p1\">[</bpt>TVM_SETAUTOSCROLLINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773738)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [TVM_SETAUTOSCROLLINFO](http://msdn.microsoft.com/library/windows/desktop/bb773738) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[59989,59996],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example defines a variable, <ph id=\"ph1\">`m_treeCtrl`</ph>, that is used to access the current tree-view control.","pos":[60000,60114],"source":"The following code example defines a variable, `m_treeCtrl`, that is used to access the current tree-view control."},{"content":"The code example also defines an unsigned integer and several HTREEITEM variables.","pos":[60115,60197]},{"content":"These variables are used in the next example.","pos":[60198,60243]},{"pos":[60250,60343],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl_s1#1<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_17.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl_s1#1](../../mfc/reference/codesnippet/cpp/ctreectrl-class_17.h)]"},{"pos":[60353,60360],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example sets the autoscroll behavior of the current tree-view control.","pos":[60364,60453]},{"content":"In an earlier section of the code example, which is not shown, we created a tree-view that consists of a root country/region node for the United States, subnodes for the states of Pennsylvania and Washington, and tree items for cities in those states.","pos":[60454,60705]},{"content":"We intentionally made the tree-view control narrow so that it must automatically scroll to display the tree item that has the focus.","pos":[60706,60838]},{"content":"The code example sets the tree-view control to automatically scroll 30 pixels per second every 5 seconds until the tree item is in view.","pos":[60839,60975]},{"pos":[60982,61077],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl_s1#4<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_33.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl_s1#4](../../mfc/reference/codesnippet/cpp/ctreectrl-class_33.cpp)]"},{"pos":[61087,61146],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__setbkcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::SetBkColor","linkify":"<a name=\"ctreectrl__setbkcolor\"></a>  CTreeCtrl::SetBkColor","source":"<a name=\"ctreectrl__setbkcolor\"></a>  CTreeCtrl::SetBkColor"},{"pos":[61150,61366],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TVM_SETBKCOLOR<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773741)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TVM_SETBKCOLOR](http://msdn.microsoft.com/library/windows/desktop/bb773741), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[61426,61436],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <bpt id=\"p1\">**</bpt>COLORREF<ept id=\"p1\">**</ept> value that contains the new background color.","pos":[61449,61509],"source":" A **COLORREF** value that contains the new background color."},{"content":"If this value is -1, the control will revert to using the system color for the background color.","pos":[61510,61606]},{"pos":[61616,61628],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A <bpt id=\"p1\">**</bpt>COLORREF<ept id=\"p1\">**</ept> value that represents the current text color.","pos":[61632,61692],"source":"A **COLORREF** value that represents the current text color."},{"content":"If this value is -1, the control is using the system color for the text color.","pos":[61693,61771]},{"pos":[61781,61788],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[61793,61865],"content":"See the example for <bpt id=\"p1\">[</bpt>CTreeCtrl::SetTextColor<ept id=\"p1\">](#ctreectrl__settextcolor)</ept>.","source":"See the example for [CTreeCtrl::SetTextColor](#ctreectrl__settextcolor)."},{"pos":[61875,61930],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__setcheck\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::SetCheck","linkify":"<a name=\"ctreectrl__setcheck\"></a>  CTreeCtrl::SetCheck","source":"<a name=\"ctreectrl__setcheck\"></a>  CTreeCtrl::SetCheck"},{"content":"Call this member function to set the check state for a tree control item.","pos":[61934,62007]},{"pos":[62095,62105],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <bpt id=\"p1\">**</bpt>HTREEITEM<ept id=\"p1\">**</ept> to receive the check state change.","pos":[62120,62172],"source":" The **HTREEITEM** to receive the check state change."},{"content":"Indicates whether the tree control item is to be checked or unchecked.","pos":[62191,62261]},{"content":"By default, <ph id=\"ph1\">`SetCheck`</ph> sets the item to be checked.","pos":[62262,62313],"source":" By default, `SetCheck` sets the item to be checked."},{"pos":[62323,62335],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[62339,62374]},{"pos":[62384,62391],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[62395,62506],"content":"When the tree control item is checked ( <ph id=\"ph1\">`fCheck`</ph> set to <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>), the item appears with an adjacent checkmark.","source":"When the tree control item is checked ( `fCheck` set to **TRUE**), the item appears with an adjacent checkmark."},{"pos":[62516,62523],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[62527,62620],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#29<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_34.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#29](../../mfc/reference/codesnippet/cpp/ctreectrl-class_34.cpp)]"},{"pos":[62630,62637],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"To use checkboxes, set TVS_CHECKBOXES before populating the tree control.","pos":[62641,62714]},{"pos":[62721,62814],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#30<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_35.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#30](../../mfc/reference/codesnippet/cpp/ctreectrl-class_35.cpp)]"},{"pos":[62824,62895],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__setextendedstyle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::SetExtendedStyle","linkify":"<a name=\"ctreectrl__setextendedstyle\"></a>  CTreeCtrl::SetExtendedStyle","source":"<a name=\"ctreectrl__setextendedstyle\"></a>  CTreeCtrl::SetExtendedStyle"},{"content":"Sets the extended styles for the current tree-view control.","pos":[62899,62958]},{"pos":[63053,63063],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[63070,63079]},{"content":"Description","pos":[63080,63091]},{"pos":[63134,63149],"content":"[in] <ph id=\"ph1\">`dwExMask`</ph>","source":"[in] `dwExMask`"},{"content":"A bitmask that specifies which styles in the current tree-view control are affected by this method.","pos":[63150,63249]},{"content":"If this parameter is zero, it is ignored and the value of the <ph id=\"ph1\">`dwExStyles`</ph> parameter is assigned to the tree-view control.","pos":[63250,63372],"source":" If this parameter is zero, it is ignored and the value of the `dwExStyles` parameter is assigned to the tree-view control."},{"content":"Specify zero or a bitwise combination (OR) of styles described in <bpt id=\"p1\">[</bpt>Tree-View Control Extended Styles<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb759981)</ept>.","pos":[63385,63547],"source":" Specify zero or a bitwise combination (OR) of styles described in [Tree-View Control Extended Styles](http://msdn.microsoft.com/library/windows/desktop/bb759981)."},{"pos":[63552,63569],"content":"[in] <ph id=\"ph1\">`dwExStyles`</ph>","source":"[in] `dwExStyles`"},{"content":"A bitmask that specifies which styles in the current tree-view control to set or clear.","pos":[63570,63657]},{"content":"To set a combination of styles, specify a bitwise combination (OR) of styles described in <bpt id=\"p1\">[</bpt>Tree-View Control Extended Styles<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb759981)</ept>.","pos":[63670,63856],"source":" To set a combination of styles, specify a bitwise combination (OR) of styles described in [Tree-View Control Extended Styles](http://msdn.microsoft.com/library/windows/desktop/bb759981)."},{"content":"To clear a set of styles, specify zero.","pos":[63857,63896]},{"pos":[63907,63919],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A value that contains the previous extended control styles.","pos":[63923,63982]},{"pos":[63992,63999],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method clears the styles specified in the <ph id=\"ph1\">`dwExMask`</ph> parameter, then sets the styles specified in the <ph id=\"ph2\">`dwExStyles`</ph> parameter.","pos":[64003,64133],"source":"This method clears the styles specified in the `dwExMask` parameter, then sets the styles specified in the `dwExStyles` parameter."},{"content":"Only the extended styles that correspond to the bits in <ph id=\"ph1\">`dwExMask`</ph> change.","pos":[64134,64208],"source":" Only the extended styles that correspond to the bits in `dwExMask` change."},{"pos":[64215,64407],"content":"This method sends the <bpt id=\"p1\">[</bpt>TVM_SETEXTENDEDSTYLE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773744)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [TVM_SETEXTENDEDSTYLE](http://msdn.microsoft.com/library/windows/desktop/bb773744) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[64417,64424],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example defines a variable, <ph id=\"ph1\">`m_treeCtrl`</ph>, that is used to access the current tree-view control.","pos":[64428,64542],"source":"The following code example defines a variable, `m_treeCtrl`, that is used to access the current tree-view control."},{"content":"The code example also defines an unsigned integer and several HTREEITEM variables.","pos":[64543,64625]},{"content":"These variables are used in the next example.","pos":[64626,64671]},{"pos":[64678,64771],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl_s1#1<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_17.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl_s1#1](../../mfc/reference/codesnippet/cpp/ctreectrl-class_17.h)]"},{"pos":[64781,64788],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example adds the <ph id=\"ph1\">`TVS_EX_AUTOHSCROLL`</ph> extended style to the current tree-view control.","pos":[64792,64897],"source":"The following code example adds the `TVS_EX_AUTOHSCROLL` extended style to the current tree-view control."},{"content":"In an earlier section of the code example, which is not shown, we created a tree-view that consists of a root country/region node for the United States, subnodes for the states of Pennsylvania and Washington, and tree items for cities in those states.","pos":[64898,65149]},{"content":"We intentionally made the tree-view control narrow so that it must automatically scroll to display the tree item that has the focus.","pos":[65150,65282]},{"pos":[65289,65384],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl_s1#3<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_36.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl_s1#3](../../mfc/reference/codesnippet/cpp/ctreectrl-class_36.cpp)]"},{"pos":[65394,65457],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__setimagelist\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::SetImageList","linkify":"<a name=\"ctreectrl__setimagelist\"></a>  CTreeCtrl::SetImageList","source":"<a name=\"ctreectrl__setimagelist\"></a>  CTreeCtrl::SetImageList"},{"content":"Call this function to set the normal or state image list for a tree view control and redraw the control using the new images.","pos":[65461,65586]},{"pos":[65692,65702],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to the image list to assign.","pos":[65722,65758]},{"content":"If <ph id=\"ph1\">`pImageList`</ph> is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, all images are removed from the tree view control.","pos":[65759,65838],"source":" If `pImageList` is **NULL**, all images are removed from the tree view control."},{"content":"Type of image list to set.","pos":[65865,65891]},{"content":"The image list can be one of the following values:","pos":[65892,65942]},{"content":"<ph id=\"ph1\">`TVSIL_NORMAL`</ph> Sets the normal image list, which contains the selected and nonselected images for the tree view item.","pos":[65950,66067],"source":"`TVSIL_NORMAL` Sets the normal image list, which contains the selected and nonselected images for the tree view item."},{"content":"You must use this state for overlay images.","pos":[66068,66111]},{"pos":[66119,66239],"content":"<ph id=\"ph1\">`TVSIL_STATE`</ph> Sets the state image list, which contains the images for tree view items that are in a user-defined state.","source":"`TVSIL_STATE` Sets the state image list, which contains the images for tree view items that are in a user-defined state."},{"pos":[66249,66261],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[66265,66328],"content":"Pointer to the previous image list, if any; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"Pointer to the previous image list, if any; otherwise **NULL**."},{"pos":[66338,66345],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[66350,66422],"content":"See the example for <bpt id=\"p1\">[</bpt>CTreeCtrl::GetImageList<ept id=\"p1\">](#ctreectrl__getimagelist)</ept>.","source":"See the example for [CTreeCtrl::GetImageList](#ctreectrl__getimagelist)."},{"pos":[66432,66489],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__setindent\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::SetIndent","linkify":"<a name=\"ctreectrl__setindent\"></a>  CTreeCtrl::SetIndent","source":"<a name=\"ctreectrl__setindent\"></a>  CTreeCtrl::SetIndent"},{"content":"Call this function to set the width of indentation for a tree view control and redraw the control to reflect the new width.","pos":[66493,66616]},{"pos":[66671,66681],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Width, in pixels, of the indentation.","pos":[66698,66735]},{"content":"If <ph id=\"ph1\">`nIndent`</ph> is less than the system-defined minimum width, the new width is set to the system-defined minimum.","pos":[66736,66847],"source":" If `nIndent` is less than the system-defined minimum width, the new width is set to the system-defined minimum."},{"pos":[66857,66864],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[66869,66935],"content":"See the example for <bpt id=\"p1\">[</bpt>CTreeCtrl::GetIndent<ept id=\"p1\">](#ctreectrl__getindent)</ept>.","source":"See the example for [CTreeCtrl::GetIndent](#ctreectrl__getindent)."},{"pos":[66945,67010],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__setinsertmark\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::SetInsertMark","linkify":"<a name=\"ctreectrl__setinsertmark\"></a>  CTreeCtrl::SetInsertMark","source":"<a name=\"ctreectrl__setinsertmark\"></a>  CTreeCtrl::SetInsertMark"},{"pos":[67014,67233],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TVM_SETINSERTMARK<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773753)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TVM_SETINSERTMARK](http://msdn.microsoft.com/library/windows/desktop/bb773753), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[67326,67336],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\"> **</bpt>HTREEITEM<ept id=\"p1\">**</ept> that specifies at which item the insertion mark will be placed.","pos":[67350,67428],"source":" **HTREEITEM** that specifies at which item the insertion mark will be placed."},{"content":"If this argument is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the insertion mark is removed.","pos":[67429,67489],"source":" If this argument is **NULL**, the insertion mark is removed."},{"content":"<bpt id=\"p1\">*</bpt>fAfter<ept id=\"p1\">*</ept>","pos":[67496,67504],"source":"*fAfter*"},{"content":"<bpt id=\"p1\"> **</bpt>BOOL<ept id=\"p1\">**</ept> value that specifies if the insertion mark is placed before or after the specified item.","pos":[67507,67605],"source":" **BOOL** value that specifies if the insertion mark is placed before or after the specified item."},{"content":"If this argument is nonzero, the insertion mark will be placed after the item.","pos":[67606,67684]},{"content":"If this argument is zero, the insertion mark will be placed before the item.","pos":[67685,67761]},{"pos":[67771,67783],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[67787,67822]},{"pos":[67832,67839],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[67843,67936],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#31<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_37.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#31](../../mfc/reference/codesnippet/cpp/ctreectrl-class_37.cpp)]"},{"pos":[67946,68021],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__setinsertmarkcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::SetInsertMarkColor","linkify":"<a name=\"ctreectrl__setinsertmarkcolor\"></a>  CTreeCtrl::SetInsertMarkColor","source":"<a name=\"ctreectrl__setinsertmarkcolor\"></a>  CTreeCtrl::SetInsertMarkColor"},{"pos":[68025,68249],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TVM_SETINSERTMARKCOLOR<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773755)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TVM_SETINSERTMARKCOLOR](http://msdn.microsoft.com/library/windows/desktop/bb773755), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[68320,68330],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <bpt id=\"p1\">**</bpt>COLORREF<ept id=\"p1\">**</ept> value that contains the new insertion mark color.","pos":[68346,68410],"source":" A **COLORREF** value that contains the new insertion mark color."},{"pos":[68420,68432],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[68436,68505],"content":"A <bpt id=\"p1\">**</bpt>COLORREF<ept id=\"p1\">**</ept> value that contains the previous insertion mark color.","source":"A **COLORREF** value that contains the previous insertion mark color."},{"pos":[68515,68522],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[68527,68611],"content":"See the example for <bpt id=\"p1\">[</bpt>CTreeCtrl::GetInsertMarkColor<ept id=\"p1\">](#ctreectrl__getinsertmarkcolor)</ept>.","source":"See the example for [CTreeCtrl::GetInsertMarkColor](#ctreectrl__getinsertmarkcolor)."},{"pos":[68621,68674],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__setitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::SetItem","linkify":"<a name=\"ctreectrl__setitem\"></a>  CTreeCtrl::SetItem","source":"<a name=\"ctreectrl__setitem\"></a>  CTreeCtrl::SetItem"},{"content":"Call this function to set the attributes of the specified tree view item.","pos":[68678,68751]},{"pos":[68998,69008],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>TVITEM<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773456)</ept> structure that contains the new item attributes, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[69023,69228],"source":" A pointer to a [TVITEM](http://msdn.microsoft.com/library/windows/desktop/bb773456) structure that contains the new item attributes, as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Handle of the item whose attributes are to be set.","pos":[69246,69296]},{"content":"See the <bpt id=\"p1\">**</bpt>hItem<ept id=\"p1\">**</ept> member of the <ph id=\"ph1\">`TVITEM`</ph> structure in the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[69297,69407],"source":" See the **hItem** member of the `TVITEM` structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Integer specifying which attributes to set.","pos":[69425,69468]},{"content":"See the <bpt id=\"p1\">**</bpt>mask<ept id=\"p1\">**</ept> member of the <ph id=\"ph1\">`TVITEM`</ph> structure.","pos":[69469,69519],"source":" See the **mask** member of the `TVITEM` structure."},{"content":"Address of a string containing the item's text.","pos":[69540,69587]},{"content":"Index of the item's image in the tree view control's image list.","pos":[69606,69670]},{"content":"See the <ph id=\"ph1\">`iImage`</ph> member of the <ph id=\"ph2\">`TVITEM`</ph> structure.","pos":[69671,69721],"source":" See the `iImage` member of the `TVITEM` structure."},{"content":"Index of the item's selected image in the tree view control's image list.","pos":[69748,69821]},{"content":"See the <bpt id=\"p1\">**</bpt>iSelectedImage<ept id=\"p1\">**</ept> member of the <ph id=\"ph1\">`TVITEM`</ph> structure.","pos":[69822,69882],"source":" See the **iSelectedImage** member of the `TVITEM` structure."},{"content":"Specifies values for the item's states.","pos":[69901,69940]},{"content":"See the <bpt id=\"p1\">**</bpt>State<ept id=\"p1\">**</ept> member of the <ph id=\"ph1\">`TVITEM`</ph> structure.","pos":[69941,69992],"source":" See the **State** member of the `TVITEM` structure."},{"content":"Specifies which states are to be set.","pos":[70015,70052]},{"content":"See the <bpt id=\"p1\">**</bpt>stateMask<ept id=\"p1\">**</ept> member of the <ph id=\"ph1\">`TVITEM`</ph> structure.","pos":[70053,70108],"source":" See the **stateMask** member of the `TVITEM` structure."},{"content":"A 32-bit application-specific value associated with the item.","pos":[70127,70188]},{"pos":[70198,70210],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[70214,70249]},{"pos":[70259,70266],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[70270,70397],"content":"In the <ph id=\"ph1\">`TVITEM`</ph> structure, the <bpt id=\"p1\">**</bpt>hItem<ept id=\"p1\">**</ept> member identifies the item, and the <bpt id=\"p2\">**</bpt>mask<ept id=\"p2\">**</ept> member specifies which attributes to set.","source":"In the `TVITEM` structure, the **hItem** member identifies the item, and the **mask** member specifies which attributes to set."},{"content":"If the <bpt id=\"p1\">**</bpt>mask<ept id=\"p1\">**</ept> member or the <ph id=\"ph1\">`nMask`</ph> parameter specifies the <ph id=\"ph2\">`TVIF_TEXT`</ph> value, the <bpt id=\"p2\">**</bpt>pszText<ept id=\"p2\">**</ept> member or the <ph id=\"ph3\">`lpszItem`</ph> is the address of a null-terminated string and the <bpt id=\"p3\">**</bpt>cchTextMax<ept id=\"p3\">**</ept> member is ignored.","pos":[70404,70610],"source":"If the **mask** member or the `nMask` parameter specifies the `TVIF_TEXT` value, the **pszText** member or the `lpszItem` is the address of a null-terminated string and the **cchTextMax** member is ignored."},{"content":"If <bpt id=\"p1\">**</bpt>mask<ept id=\"p1\">**</ept> (or <ph id=\"ph1\">`nMask`</ph>) specifies the <ph id=\"ph2\">`TVIF_STATE`</ph> value, the <bpt id=\"p2\">**</bpt>stateMask<ept id=\"p2\">**</ept> member or the <ph id=\"ph3\">`nStateMask`</ph> parameter specifies which item states to change and the <bpt id=\"p3\">**</bpt>state<ept id=\"p3\">**</ept> member or <ph id=\"ph4\">`nState`</ph> parameter contains the values for those states.","pos":[70611,70847],"source":" If **mask** (or `nMask`) specifies the `TVIF_STATE` value, the **stateMask** member or the `nStateMask` parameter specifies which item states to change and the **state** member or `nState` parameter contains the values for those states."},{"pos":[70857,70864],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[70868,70961],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#32<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_38.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#32](../../mfc/reference/codesnippet/cpp/ctreectrl-class_38.cpp)]"},{"pos":[70971,71032],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__setitemdata\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::SetItemData","linkify":"<a name=\"ctreectrl__setitemdata\"></a>  CTreeCtrl::SetItemData","source":"<a name=\"ctreectrl__setitemdata\"></a>  CTreeCtrl::SetItemData"},{"content":"Call this function to set the 32-bit application-specific value associated with the specified item.","pos":[71036,71135]},{"pos":[71224,71234],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Handle of the item whose data is to be retrieved.","pos":[71249,71298]},{"content":"A 32-bit application-specific value associated with the item specified by <ph id=\"ph1\">`hItem`</ph>.","pos":[71317,71399],"source":" A 32-bit application-specific value associated with the item specified by `hItem`."},{"pos":[71409,71421],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[71425,71460]},{"pos":[71470,71477],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[71481,71574],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#33<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_39.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#33](../../mfc/reference/codesnippet/cpp/ctreectrl-class_39.cpp)]"},{"pos":[71584,71673],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__setitemexpandedimageindex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::SetItemExpandedImageIndex","linkify":"<a name=\"ctreectrl__setitemexpandedimageindex\"></a>  CTreeCtrl::SetItemExpandedImageIndex","source":"<a name=\"ctreectrl__setitemexpandedimageindex\"></a>  CTreeCtrl::SetItemExpandedImageIndex"},{"content":"Sets the index of the image to display when the specified item of the current tree-view control is in the expanded state.","pos":[71677,71798]},{"pos":[71904,71914],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[71921,71930]},{"content":"Description","pos":[71931,71942]},{"pos":[71985,71997],"content":"[in] <ph id=\"ph1\">`hItem`</ph>","source":"[in] `hItem`"},{"content":"Handle to a tree-view control item.","pos":[71998,72033]},{"pos":[72038,72059],"content":"[in] <ph id=\"ph1\">`iExpandedImage`</ph>","source":"[in] `iExpandedImage`"},{"content":"The index of the image to display when the specified item is in the expanded state.","pos":[72060,72143]},{"pos":[72154,72166],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[72170,72226],"content":"<ph id=\"ph1\">`true`</ph> if this method is successful; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this method is successful; otherwise, `false`."},{"pos":[72236,72243],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method sends the <bpt id=\"p1\">[</bpt>TVM_SETITEM<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773758)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[72247,72430],"source":"This method sends the [TVM_SETITEM](http://msdn.microsoft.com/library/windows/desktop/bb773758) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"This method assigns the <ph id=\"ph1\">`iExpandedImage`</ph> parameter to the <ph id=\"ph2\">`iExpandedImage`</ph> member of a <bpt id=\"p1\">[</bpt>TVITEMEX<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773459)</ept> structure, and then uses that structure in the message.","pos":[72431,72644],"source":" This method assigns the `iExpandedImage` parameter to the `iExpandedImage` member of a [TVITEMEX](http://msdn.microsoft.com/library/windows/desktop/bb773459) structure, and then uses that structure in the message."},{"pos":[72654,72661],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example defines a variable, <ph id=\"ph1\">`m_treeCtrl`</ph>, that is used to access the current tree-view control.","pos":[72665,72779],"source":"The following code example defines a variable, `m_treeCtrl`, that is used to access the current tree-view control."},{"content":"The code example also defines an unsigned integer and several HTREEITEM variables.","pos":[72780,72862]},{"content":"These variables are used in the next example.","pos":[72863,72908]},{"pos":[72915,73008],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl_s1#1<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_17.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl_s1#1](../../mfc/reference/codesnippet/cpp/ctreectrl-class_17.h)]"},{"pos":[73018,73025],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example is a trivial test to determine whether the <bpt id=\"p1\">[</bpt>CTreeCtrl::GetItemExpandedImageIndex<ept id=\"p1\">](#ctreectrl__getitemexpandedimageindex)</ept> method returns the value set by the <bpt id=\"p2\">[</bpt>CTreeCtrl::SetItemExpandedImageIndex<ept id=\"p2\">](#ctreectrl__setitemexpandedimageindex)</ept> method.","pos":[73029,73298],"source":"The following code example is a trivial test to determine whether the [CTreeCtrl::GetItemExpandedImageIndex](#ctreectrl__getitemexpandedimageindex) method returns the value set by the [CTreeCtrl::SetItemExpandedImageIndex](#ctreectrl__setitemexpandedimageindex) method."},{"content":"In an earlier section of the code example, which is not shown, we created a tree-view that consists of a root country/region node for the United States, subnodes for the states of Pennsylvania and Washington, and tree items for cities in those states.","pos":[73299,73550]},{"pos":[73557,73652],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl_s1#8<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_40.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl_s1#8](../../mfc/reference/codesnippet/cpp/ctreectrl-class_40.cpp)]"},{"pos":[73662,73727],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__setitemheight\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::SetItemHeight","linkify":"<a name=\"ctreectrl__setitemheight\"></a>  CTreeCtrl::SetItemHeight","source":"<a name=\"ctreectrl__setitemheight\"></a>  CTreeCtrl::SetItemHeight"},{"pos":[73731,73950],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TVM_SETITEMHEIGHT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773761)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TVM_SETITEMHEIGHT](http://msdn.microsoft.com/library/windows/desktop/bb773761), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[74012,74022],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the new height of every item in the tree view, in pixels.","pos":[74040,74107]},{"content":"If this argument is less than the height of the images, then it will be set to the height of the images.","pos":[74108,74212]},{"content":"If this argument is not even, it will be rounded down to the nearest even value.","pos":[74213,74293]},{"content":"If this argument is -1, the control will revert to using its default item height.","pos":[74294,74375]},{"pos":[74385,74397],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The previous height of the items, in pixels.","pos":[74401,74445]},{"pos":[74455,74462],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[74467,74541],"content":"See the example for <bpt id=\"p1\">[</bpt>CTreeCtrl::GetItemHeight<ept id=\"p1\">](#ctreectrl__getitemheight)</ept>.","source":"See the example for [CTreeCtrl::GetItemHeight](#ctreectrl__getitemheight)."},{"pos":[74551,74614],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__setitemimage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::SetItemImage","linkify":"<a name=\"ctreectrl__setitemimage\"></a>  CTreeCtrl::SetItemImage","source":"<a name=\"ctreectrl__setitemimage\"></a>  CTreeCtrl::SetItemImage"},{"content":"Associates images with an item.","pos":[74618,74649]},{"pos":[74759,74769],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Handle of the item whose image is to be set.","pos":[74784,74828]},{"content":"Index of the item's image in the tree view control's image list.","pos":[74847,74911]},{"content":"Index of the item's selected image in the tree view control's image list.","pos":[74938,75011]},{"pos":[75021,75033],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[75037,75072]},{"pos":[75082,75089],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Each item in a tree view control can have a pair of bitmapped images associated with it.","pos":[75093,75181]},{"content":"The images appear on the left side of an item's label.","pos":[75182,75236]},{"content":"One image is displayed when the item is selected, and the other is displayed when the item is not selected.","pos":[75237,75344]},{"content":"For example, an item might display an open folder when it is selected and a closed folder when it is not selected.","pos":[75345,75459]},{"content":"Call this function to set the index of the item's image and its selected image within the tree view control's image list.","pos":[75466,75587]},{"pos":[75594,75684],"content":"For more information on images, see <bpt id=\"p1\">[</bpt>CImageList<ept id=\"p1\">](../../mfc/reference/cimagelist-class.md)</ept>.","source":"For more information on images, see [CImageList](../../mfc/reference/cimagelist-class.md)."},{"pos":[75694,75701],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[75706,75778],"content":"See the example for <bpt id=\"p1\">[</bpt>CTreeCtrl::GetItemImage<ept id=\"p1\">](#ctreectrl__getitemimage)</ept>.","source":"See the example for [CTreeCtrl::GetItemImage](#ctreectrl__getitemimage)."},{"pos":[75788,75851],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__setitemstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::SetItemState","linkify":"<a name=\"ctreectrl__setitemstate\"></a>  CTreeCtrl::SetItemState","source":"<a name=\"ctreectrl__setitemstate\"></a>  CTreeCtrl::SetItemState"},{"pos":[75855,75903],"content":"Sets the state of the item specified by <ph id=\"ph1\">`hItem`</ph>.","source":"Sets the state of the item specified by `hItem`."},{"pos":[76011,76021],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Handle of the item whose state is to be set.","pos":[76036,76080]},{"content":"Specifies new states for the item.","pos":[76099,76133]},{"content":"Specifies which states are to be changed.","pos":[76156,76197]},{"pos":[76207,76219],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[76223,76258]},{"pos":[76268,76275],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[76279,76352],"content":"For information on states, see <bpt id=\"p1\">[</bpt>CTreeCtrl::GetItem<ept id=\"p1\">](#ctreectrl__getitem)</ept>.","source":"For information on states, see [CTreeCtrl::GetItem](#ctreectrl__getitem)."},{"pos":[76362,76369],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[76374,76446],"content":"See the example for <bpt id=\"p1\">[</bpt>CTreeCtrl::GetItemState<ept id=\"p1\">](#ctreectrl__getitemstate)</ept>.","source":"See the example for [CTreeCtrl::GetItemState](#ctreectrl__getitemstate)."},{"pos":[76456,76523],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__setitemstateex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::SetItemStateEx","linkify":"<a name=\"ctreectrl__setitemstateex\"></a>  CTreeCtrl::SetItemStateEx","source":"<a name=\"ctreectrl__setitemstateex\"></a>  CTreeCtrl::SetItemStateEx"},{"content":"Sets the extended state of the specified item in the current tree-view control.","pos":[76527,76606]},{"pos":[76696,76706],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[76713,76722]},{"content":"Description","pos":[76723,76734]},{"pos":[76777,76789],"content":"[in] <ph id=\"ph1\">`hItem`</ph>","source":"[in] `hItem`"},{"content":"Handle to a tree-view control item.","pos":[76790,76825]},{"pos":[76830,76845],"content":"[in] <ph id=\"ph1\">`uStateEx`</ph>","source":"[in] `uStateEx`"},{"content":"The extended state of the item.","pos":[76846,76877]},{"content":"For more information, see the <ph id=\"ph1\">`uStateEx`</ph> member of the <bpt id=\"p1\">[</bpt>TVITEMEX<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773459)</ept> structure.","pos":[76878,77014],"source":" For more information, see the `uStateEx` member of the [TVITEMEX](http://msdn.microsoft.com/library/windows/desktop/bb773459) structure."},{"pos":[77025,77037],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[77041,77097],"content":"<ph id=\"ph1\">`true`</ph> if this method is successful; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this method is successful; otherwise, `false`."},{"pos":[77107,77114],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method sends the <bpt id=\"p1\">[</bpt>TVM_SETITEM<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773758)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[77118,77301],"source":"This method sends the [TVM_SETITEM](http://msdn.microsoft.com/library/windows/desktop/bb773758) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"This method assigns the <ph id=\"ph1\">`uStateEx`</ph> parameter to the <ph id=\"ph2\">`uStateEx`</ph> member of a <bpt id=\"p1\">[</bpt>TVITEMEX<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773459)</ept> structure, and then uses that structure in the message.","pos":[77302,77503],"source":" This method assigns the `uStateEx` parameter to the `uStateEx` member of a [TVITEMEX](http://msdn.microsoft.com/library/windows/desktop/bb773459) structure, and then uses that structure in the message."},{"pos":[77513,77520],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example defines a variable, <ph id=\"ph1\">`m_treeCtrl`</ph>, that is used to access the current tree-view control.","pos":[77524,77638],"source":"The following code example defines a variable, `m_treeCtrl`, that is used to access the current tree-view control."},{"content":"The code example also defines an unsigned integer and several HTREEITEM variables.","pos":[77639,77721]},{"content":"These variables are used in the next example.","pos":[77722,77767]},{"pos":[77774,77867],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl_s1#1<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_17.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl_s1#1](../../mfc/reference/codesnippet/cpp/ctreectrl-class_17.h)]"},{"pos":[77877,77884],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example sets a tree-view item to disabled state.","pos":[77888,77955]},{"content":"In an earlier section of the code example, which is not shown, we created a tree-view that consists of a root country/region node for the United States, subnodes for the states of Pennsylvania and Washington, and tree items for cities in those states.","pos":[77956,78207]},{"content":"This code example sets the Pennsylvania node to disabled state.","pos":[78208,78271]},{"pos":[78278,78373],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl_s1#7<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_41.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl_s1#7](../../mfc/reference/codesnippet/cpp/ctreectrl-class_41.cpp)]"},{"pos":[78383,78444],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__setitemtext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::SetItemText","linkify":"<a name=\"ctreectrl__setitemtext\"></a>  CTreeCtrl::SetItemText","source":"<a name=\"ctreectrl__setitemtext\"></a>  CTreeCtrl::SetItemText"},{"pos":[78448,78495],"content":"Sets the text of the item specified by <ph id=\"ph1\">`hItem`</ph>.","source":"Sets the text of the item specified by `hItem`."},{"pos":[78584,78594],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Handle of the item whose text is to be set.","pos":[78609,78652]},{"content":"Address of a string containing the new text for the item","pos":[78673,78729]},{"pos":[78739,78751],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[78755,78790]},{"pos":[78800,78807],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[78811,78904],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#34<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_42.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#34](../../mfc/reference/codesnippet/cpp/ctreectrl-class_42.cpp)]"},{"pos":[78914,78977],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__setlinecolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::SetLineColor","linkify":"<a name=\"ctreectrl__setlinecolor\"></a>  CTreeCtrl::SetLineColor","source":"<a name=\"ctreectrl__setlinecolor\"></a>  CTreeCtrl::SetLineColor"},{"content":"Call this member function to set the current line color for the tree view control.","pos":[78981,79063]},{"pos":[79142,79152],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The new line color.","pos":[79168,79187]},{"pos":[79197,79209],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The previous line color.","pos":[79213,79237]},{"pos":[79247,79254],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[79258,79476],"content":"This member function implements the behavior of the win32 message <bpt id=\"p1\">[</bpt>TVM_SETLINECOLOR<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773764)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the win32 message [TVM_SETLINECOLOR](http://msdn.microsoft.com/library/windows/desktop/bb773764), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[79486,79493],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[79497,79590],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#35<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_43.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#35](../../mfc/reference/codesnippet/cpp/ctreectrl-class_43.cpp)]"},{"pos":[79600,79665],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__setscrolltime\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::SetScrollTime","linkify":"<a name=\"ctreectrl__setscrolltime\"></a>  CTreeCtrl::SetScrollTime","source":"<a name=\"ctreectrl__setscrolltime\"></a>  CTreeCtrl::SetScrollTime"},{"content":"Call this member function to set the maximum scroll time for the tree view control.","pos":[79669,79752]},{"pos":[79815,79825],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>uScrollTime<ept id=\"p1\">*</ept>","pos":[79829,79842],"source":"*uScrollTime*"},{"content":"The new maximum scroll time, in milliseconds.","pos":[79846,79891]},{"content":"If this value is less than 100, it will be rounded up to 100.","pos":[79892,79953]},{"pos":[79963,79975],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The previous maximum scroll time, in milliseconds.","pos":[79979,80029]},{"pos":[80039,80046],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[80050,80269],"content":"This member function implements the behavior of the win32 message <bpt id=\"p1\">[</bpt>TVM_SETSCROLLTIME<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773767)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the win32 message [TVM_SETSCROLLTIME](http://msdn.microsoft.com/library/windows/desktop/bb773767), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[80279,80342],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__settextcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::SetTextColor","linkify":"<a name=\"ctreectrl__settextcolor\"></a>  CTreeCtrl::SetTextColor","source":"<a name=\"ctreectrl__settextcolor\"></a>  CTreeCtrl::SetTextColor"},{"pos":[80346,80564],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TVM_SETTEXTCOLOR<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773769)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TVM_SETTEXTCOLOR](http://msdn.microsoft.com/library/windows/desktop/bb773769), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[80626,80636],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <bpt id=\"p1\">**</bpt>COLORREF<ept id=\"p1\">**</ept> value that contains the new text color.","pos":[80649,80703],"source":" A **COLORREF** value that contains the new text color."},{"content":"If this argument is -1, the control will revert to using the system color for the text color.","pos":[80704,80797]},{"pos":[80807,80819],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A <bpt id=\"p1\">**</bpt>COLORREF<ept id=\"p1\">**</ept> value that represents the previous text color.","pos":[80823,80884],"source":"A **COLORREF** value that represents the previous text color."},{"content":"If this value is -1, the control was using the system color for the text color.","pos":[80885,80964]},{"pos":[80974,80981],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[80985,81078],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#36<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_44.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#36](../../mfc/reference/codesnippet/cpp/ctreectrl-class_44.cpp)]"},{"pos":[81088,81149],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__settooltips\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::SetToolTips","linkify":"<a name=\"ctreectrl__settooltips\"></a>  CTreeCtrl::SetToolTips","source":"<a name=\"ctreectrl__settooltips\"></a>  CTreeCtrl::SetToolTips"},{"pos":[81153,81370],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>TVM_SETTOOLTIPS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773772)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [TVM_SETTOOLTIPS](http://msdn.microsoft.com/library/windows/desktop/bb773772), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[81445,81455],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>CToolTipCtrl<ept id=\"p1\">](../../mfc/reference/ctooltipctrl-class.md)</ept> object that the tree control will use.","pos":[81472,81583],"source":" A pointer to a [CToolTipCtrl](../../mfc/reference/ctooltipctrl-class.md) object that the tree control will use."},{"pos":[81593,81605],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81609,81792],"content":"A pointer to a <bpt id=\"p1\">[</bpt>CToolTipCtrl<ept id=\"p1\">](../../mfc/reference/ctooltipctrl-class.md)</ept> object containing the tooltip previously used by the control, or <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept> if no tooltips were used previously.","source":"A pointer to a [CToolTipCtrl](../../mfc/reference/ctooltipctrl-class.md) object containing the tooltip previously used by the control, or **NULL** if no tooltips were used previously."},{"pos":[81802,81809],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[81813,81907],"content":"To use tooltips, indicate the <bpt id=\"p1\">**</bpt>TVS_NOTOOLTIPS<ept id=\"p1\">**</ept> style when you create the <ph id=\"ph1\">`CTreeCtrl`</ph> object.","source":"To use tooltips, indicate the **TVS_NOTOOLTIPS** style when you create the `CTreeCtrl` object."},{"pos":[81917,81924],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[81929,81999],"content":"See the example for <bpt id=\"p1\">[</bpt>CTreeCtrl::GetToolTips<ept id=\"p1\">](#ctreectrl__gettooltips)</ept>.","source":"See the example for [CTreeCtrl::GetToolTips](#ctreectrl__gettooltips)."},{"pos":[82009,82070],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__showinfotip\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::ShowInfoTip","linkify":"<a name=\"ctreectrl__showinfotip\"></a>  CTreeCtrl::ShowInfoTip","source":"<a name=\"ctreectrl__showinfotip\"></a>  CTreeCtrl::ShowInfoTip"},{"content":"Displays the infotip for the specified item in the current tree-view control.","pos":[82074,82151]},{"pos":[82211,82221],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[82228,82237]},{"content":"Description","pos":[82238,82249]},{"pos":[82292,82304],"content":"[in] <ph id=\"ph1\">`hItem`</ph>","source":"[in] `hItem`"},{"content":"A handle to a tree-view item in the control.","pos":[82305,82349]},{"content":"For more information, see the <ph id=\"ph1\">`hItem`</ph> member of the <bpt id=\"p1\">[</bpt>TVITEMEX<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773459)</ept> structure.","pos":[82350,82483],"source":" For more information, see the `hItem` member of the [TVITEMEX](http://msdn.microsoft.com/library/windows/desktop/bb773459) structure."},{"pos":[82494,82501],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[82505,82701],"content":"For more information about the difference between tooltips and infotips, search for the \"Tooltips and Infotips\" topic at <bpt id=\"p1\">[</bpt>Microsoft Developer Network<ept id=\"p1\">](http://go.microsoft.com/fwlink/linkid=56322)</ept>.","source":"For more information about the difference between tooltips and infotips, search for the \"Tooltips and Infotips\" topic at [Microsoft Developer Network](http://go.microsoft.com/fwlink/linkid=56322)."},{"pos":[82708,82895],"content":"This method sends the <bpt id=\"p1\">[</bpt>TVM_SHOWINFOTIP<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773779)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [TVM_SHOWINFOTIP](http://msdn.microsoft.com/library/windows/desktop/bb773779) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[82905,82968],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__sortchildren\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::SortChildren","linkify":"<a name=\"ctreectrl__sortchildren\"></a>  CTreeCtrl::SortChildren","source":"<a name=\"ctreectrl__sortchildren\"></a>  CTreeCtrl::SortChildren"},{"content":"Call this function to alphabetically sort the child items of the given parent item in a tree view control.","pos":[82972,83078]},{"pos":[83139,83149],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Handle of the parent item whose child items are to be sorted.","pos":[83164,83225]},{"content":"If <ph id=\"ph1\">`hItem`</ph> is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, sorting will proceed from the root of the tree.","pos":[83226,83297],"source":" If `hItem` is **NULL**, sorting will proceed from the root of the tree."},{"pos":[83307,83319],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[83323,83358]},{"pos":[83368,83375],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[83379,83483],"content":"<ph id=\"ph1\">`SortChildren`</ph> will not recurse through the tree; only the immediate children of <ph id=\"ph2\">`hItem`</ph> will be sorted.","source":"`SortChildren` will not recurse through the tree; only the immediate children of `hItem` will be sorted."},{"pos":[83493,83500],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[83504,83597],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#37<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_45.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#37](../../mfc/reference/codesnippet/cpp/ctreectrl-class_45.cpp)]"},{"pos":[83607,83674],"content":"<bpt id=\"p1\">&lt;a name=\"ctreectrl__sortchildrencb\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CTreeCtrl::SortChildrenCB","linkify":"<a name=\"ctreectrl__sortchildrencb\"></a>  CTreeCtrl::SortChildrenCB","source":"<a name=\"ctreectrl__sortchildrencb\"></a>  CTreeCtrl::SortChildrenCB"},{"content":"Call this function to sort tree view items using an application-defined callback function that compares the items.","pos":[83678,83792]},{"pos":[83856,83866],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>pSort<ept id=\"p1\">*</ept>","pos":[83870,83877],"source":"*pSort*"},{"content":"Pointer to a <bpt id=\"p1\">[</bpt>TVSORTCB<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb773462)</ept> structure.","pos":[83881,83975],"source":" Pointer to a [TVSORTCB](http://msdn.microsoft.com/library/windows/desktop/bb773462) structure."},{"pos":[83985,83997],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[84001,84036]},{"pos":[84046,84053],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[84057,84286],"content":"The structure's comparison function, <bpt id=\"p1\">**</bpt>lpfnCompare<ept id=\"p1\">**</ept>, must return a negative value if the first item should precede the second, a positive value if the first item should follow the second, or zero if the two items are equivalent.","source":"The structure's comparison function, **lpfnCompare**, must return a negative value if the first item should precede the second, a positive value if the first item should follow the second, or zero if the two items are equivalent."},{"content":"The <ph id=\"ph1\">`lParam1`</ph> and <ph id=\"ph2\">`lParam2`</ph> parameters correspond to the <bpt id=\"p1\">**</bpt>lParam<ept id=\"p1\">**</ept> member of the <bpt id=\"p2\">[</bpt>TVITEM<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb773456)</ept> structure for the two items being compared.","pos":[84293,84487],"source":"The `lParam1` and `lParam2` parameters correspond to the **lParam** member of the [TVITEM](http://msdn.microsoft.com/library/windows/desktop/bb773456) structure for the two items being compared."},{"content":"The <ph id=\"ph1\">`lParamSort`</ph> parameter corresponds to the <bpt id=\"p1\">**</bpt>lParam<ept id=\"p1\">**</ept> member of the <ph id=\"ph2\">`TV_SORTCB`</ph> structure.","pos":[84488,84581],"source":" The `lParamSort` parameter corresponds to the **lParam** member of the `TV_SORTCB` structure."},{"pos":[84591,84598],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[84602,84695],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#38<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_46.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#38](../../mfc/reference/codesnippet/cpp/ctreectrl-class_46.cpp)]"},{"pos":[84702,84795],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CTreeCtrl#39<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ctreectrl-class_47.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CTreeCtrl#39](../../mfc/reference/codesnippet/cpp/ctreectrl-class_47.cpp)]"},{"pos":[84804,84812],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>MFC Sample CMNCTRL1<ept id=\"p1\">](../../visual-cpp-samples.md)</ept><ph id=\"ph1\"> </ph>","pos":[84816,84867],"source":"[MFC Sample CMNCTRL1](../../visual-cpp-samples.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CWnd Class<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[84870,84919],"source":" [CWnd Class](../../mfc/reference/cwnd-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[84922,84971],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CImageList Class<ept id=\"p1\">](../../mfc/reference/cimagelist-class.md)</ept>","pos":[84974,85034],"source":" [CImageList Class](../../mfc/reference/cimagelist-class.md)"}],"content":"---\ntitle: \"CTreeCtrl Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CTreeCtrl\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"directory lists\"\n  - \"tree view controls\"\n  - \"file lists [C++]\"\n  - \"CTreeCtrl class\"\nms.assetid: 96e20031-6161-4143-8c12-8d1816c66d90\ncaps.latest.revision: 23\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CTreeCtrl Class\nProvides the functionality of the Windows common tree view control.  \n  \n## Syntax  \n  \n```  \nclass CTreeCtrl : public CWnd  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CTreeCtrl::CTreeCtrl](#ctreectrl__ctreectrl)|Constructs a `CTreeCtrl` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CTreeCtrl::Create](#ctreectrl__create)|Creates a tree view control and attaches it to a `CTreeCtrl` object.|  \n|[CTreeCtrl::CreateDragImage](#ctreectrl__createdragimage)|Creates a dragging bitmap for the specified tree view item.|  \n|[CTreeCtrl::CreateEx](#ctreectrl__createex)|Creates a tree control with the specified Windows extended styles and attaches it to a `CTreeCtrl` object.|  \n|[CTreeCtrl::DeleteAllItems](#ctreectrl__deleteallitems)|Deletes all items in a tree view control.|  \n|[CTreeCtrl::DeleteItem](#ctreectrl__deleteitem)|Deletes a new item in a tree view control.|  \n|[CTreeCtrl::EditLabel](#ctreectrl__editlabel)|Edits a specified tree view item in-place.|  \n|[CTreeCtrl::EndEditLabelNow](#ctreectrl__endeditlabelnow)|Cancels the edit operation on the label of a tree-view item in the current tree-view control.|  \n|[CTreeCtrl::EnsureVisible](#ctreectrl__ensurevisible)|Ensures that a tree view item is visible in its tree view control.|  \n|[CTreeCtrl::Expand](#ctreectrl__expand)|Expands, or collapses, the child items of the specified tree view item.|  \n|[CTreeCtrl::GetBkColor](#ctreectrl__getbkcolor)|Retrieves the current background color of the control.|  \n|[CTreeCtrl::GetCheck](#ctreectrl__getcheck)|Retrieves the check state of a tree control item.|  \n|[CTreeCtrl::GetChildItem](#ctreectrl__getchilditem)|Retrieves the child of a specified tree view item.|  \n|[CTreeCtrl::GetCount](#ctreectrl__getcount)|Retrieves the number of tree items associated with a tree view control.|  \n|[CTreeCtrl::GetDropHilightItem](#ctreectrl__getdrophilightitem)|Retrieves the target of a drag-and-drop operation.|  \n|[CTreeCtrl::GetEditControl](#ctreectrl__geteditcontrol)|Retrieves the handle of the edit control used to edit the specified tree view item.|  \n|[CTreeCtrl::GetExtendedStyle](#ctreectrl__getextendedstyle)|Retrieves the extended styles that the current tree-view control is using.|  \n|[CTreeCtrl::GetFirstVisibleItem](#ctreectrl__getfirstvisibleitem)|Retrieves the first visible item of the specified tree view item.|  \n|[CTreeCtrl::GetImageList](#ctreectrl__getimagelist)|Retrieves the handle of the image list associated with a tree view control.|  \n|[CTreeCtrl::GetIndent](#ctreectrl__getindent)|Retrieves the offset (in pixels) of a tree view item from its parent.|  \n|[CTreeCtrl::GetInsertMarkColor](#ctreectrl__getinsertmarkcolor)|Retrieves the color used to draw the insertion mark for the tree view.|  \n|[CTreeCtrl::GetItem](#ctreectrl__getitem)|Retrieves the attributes of a specified tree view item.|  \n|[CTreeCtrl::GetItemData](#ctreectrl__getitemdata)|Returns the 32-bit application-specific value associated with an item.|  \n|[CTreeCtrl::GetItemExpandedImageIndex](#ctreectrl__getitemexpandedimageindex)|Retrieves the index of the image to display when the specified item of the current tree-view control is in the expanded state.|  \n|[CTreeCtrl::GetItemHeight](#ctreectrl__getitemheight)|Retrieves the current height of the tree view items.|  \n|[CTreeCtrl::GetItemImage](#ctreectrl__getitemimage)|Retrieves the images associated with an item.|  \n|[CTreeCtrl::GetItemPartRect](#ctreectrl__getitempartrect)|Retrieves the bounding rectangle for a specified part of a specified item in the current tree-view control.|  \n|[CTreeCtrl::GetItemRect](#ctreectrl__getitemrect)|Retrieves the bounding rectangle of a tree view item.|  \n|[CTreeCtrl::GetItemState](#ctreectrl__getitemstate)|Returns the state of an item.|  \n|[CTreeCtrl::GetItemStateEx](#ctreectrl__getitemstateex)|Retrieves the extended state of the specified item in the current tree-view control.|  \n|[CTreeCtrl::GetItemText](#ctreectrl__getitemtext)|Returns the text of an item.|  \n|[CTreeCtrl::GetLastVisibleItem](#ctreectrl__getlastvisibleitem)|Retrieves the last expanded item in the current tree-view control.|  \n|[CTreeCtrl::GetLineColor](#ctreectrl__getlinecolor)|Retrieves the current line color for the tree view control.|  \n|[CTreeCtrl::GetNextItem](#ctreectrl__getnextitem)|Retrieves the next tree view item that matches a specified relationship.|  \n|[CTreeCtrl::GetNextSiblingItem](#ctreectrl__getnextsiblingitem)|Retrieves the next sibling of the specified tree view item.|  \n|[CTreeCtrl::GetNextVisibleItem](#ctreectrl__getnextvisibleitem)|Retrieves the next visible item of the specified tree view item.|  \n|[CTreeCtrl::GetParentItem](#ctreectrl__getparentitem)|Retrieves the parent of the specified tree view item.|  \n|[CTreeCtrl::GetPrevSiblingItem](#ctreectrl__getprevsiblingitem)|Retrieves the previous sibling of the specified tree view item.|  \n|[CTreeCtrl::GetPrevVisibleItem](#ctreectrl__getprevvisibleitem)|Retrieves the previous visible item of the specified tree view item.|  \n|[CTreeCtrl::GetRootItem](#ctreectrl__getrootitem)|Retrieves the root of the specified tree view item.|  \n|[CTreeCtrl::GetScrollTime](#ctreectrl__getscrolltime)|Retrieves the maximum scroll time for the tree view control.|  \n|[CTreeCtrl::GetSelectedCount](#ctreectrl__getselectedcount)|Retrieves the number of selected items in the current tree-view control.|  \n|[CTreeCtrl::GetSelectedItem](#ctreectrl__getselecteditem)|Retrieves the currently selected tree view item.|  \n|[CTreeCtrl::GetTextColor](#ctreectrl__gettextcolor)|Retrieves the current text color of the control.|  \n|[CTreeCtrl::GetToolTips](#ctreectrl__gettooltips)|Retrieves the handle to the child ToolTip control used by a tree view control.|  \n|[CTreeCtrl::GetVisibleCount](#ctreectrl__getvisiblecount)|Retrieves the number of visible tree items associated with a tree view control.|  \n|[CTreeCtrl::HitTest](#ctreectrl__hittest)|Returns the current position of the cursor related to the `CTreeCtrl` object.|  \n|[CTreeCtrl::InsertItem](#ctreectrl__insertitem)|Inserts a new item in a tree view control.|  \n|[CTreeCtrl::ItemHasChildren](#ctreectrl__itemhaschildren)|Returns nonzero if the specified item has child items.|  \n|[CTreeCtrl::MapAccIdToItem](#ctreectrl__mapaccidtoitem)|Maps the specified accessibility identifier to the handle to a tree-view item in the current tree-view control.|  \n|[CTreeCtrl::MapItemToAccID](#ctreectrl__mapitemtoaccid)|Maps the specified handle to a tree-view item in the current tree-view control to an accessibility identifier.|  \n|[CTreeCtrl::Select](#ctreectrl__select)|Selects, scrolls into view, or redraws a specified tree view item.|  \n|[CTreeCtrl::SelectDropTarget](#ctreectrl__selectdroptarget)|Redraws the tree item as the target of a drag-and-drop operation.|  \n|[CTreeCtrl::SelectItem](#ctreectrl__selectitem)|Selects a specified tree view item.|  \n|[CTreeCtrl::SelectSetFirstVisible](#ctreectrl__selectsetfirstvisible)|Selects a specified tree view item as the first visible item.|  \n|[CTreeCtrl::SetAutoscrollInfo](#ctreectrl__setautoscrollinfo)|Sets the autoscroll rate of the current tree-view control.|  \n|[CTreeCtrl::SetBkColor](#ctreectrl__setbkcolor)|Sets the background color of the control.|  \n|[CTreeCtrl::SetCheck](#ctreectrl__setcheck)|Sets the check state of a tree control item.|  \n|[CTreeCtrl::SetExtendedStyle](#ctreectrl__setextendedstyle)|Sets the extended styles for the current tree-view control.|  \n|[CTreeCtrl::SetImageList](#ctreectrl__setimagelist)|Sets the handle of the image list associated with a tree view control.|  \n|[CTreeCtrl::SetIndent](#ctreectrl__setindent)|Sets the offset (in pixels) of a tree view item from its parent.|  \n|[CTreeCtrl::SetInsertMark](#ctreectrl__setinsertmark)|Sets the insertion mark in a tree view control.|  \n|[CTreeCtrl::SetInsertMarkColor](#ctreectrl__setinsertmarkcolor)|Sets the color used to draw the insertion mark for the tree view.|  \n|[CTreeCtrl::SetItem](#ctreectrl__setitem)|Sets the attributes of a specified tree view item.|  \n|[CTreeCtrl::SetItemData](#ctreectrl__setitemdata)|Sets the 32-bit application-specific value associated with an item.|  \n|[CTreeCtrl::SetItemExpandedImageIndex](#ctreectrl__setitemexpandedimageindex)|Sets the index of the image to display when the specified item of the current tree-view control is in the expanded state.|  \n|[CTreeCtrl::SetItemHeight](#ctreectrl__setitemheight)|Sets the height of the tree view items.|  \n|[CTreeCtrl::SetItemImage](#ctreectrl__setitemimage)|Associates images with an item.|  \n|[CTreeCtrl::SetItemState](#ctreectrl__setitemstate)|Sets the state of an item.|  \n|[CTreeCtrl::SetItemStateEx](#ctreectrl__setitemstateex)|Sets the extended state of the specified item in the current tree-view control.|  \n|[CTreeCtrl::SetItemText](#ctreectrl__setitemtext)|Sets the text of an item.|  \n|[CTreeCtrl::SetLineColor](#ctreectrl__setlinecolor)|Sets the current line color for the tree view control.|  \n|[CTreeCtrl::SetScrollTime](#ctreectrl__setscrolltime)|Sets the maximum scroll time for the tree view control.|  \n|[CTreeCtrl::SetTextColor](#ctreectrl__settextcolor)|Sets the text color of the control.|  \n|[CTreeCtrl::SetToolTips](#ctreectrl__settooltips)|Sets a tree view control's child ToolTip control.|  \n|[CTreeCtrl::ShowInfoTip](#ctreectrl__showinfotip)|Displays the infotip for the specified item in the current tree-view control.|  \n|[CTreeCtrl::SortChildren](#ctreectrl__sortchildren)|Sorts the children of a given parent item.|  \n|[CTreeCtrl::SortChildrenCB](#ctreectrl__sortchildrencb)|Sorts the children of a given parent item using an application-defined sort function.|  \n  \n## Remarks  \n A \"tree view control\" is a window that displays a hierarchical list of items, such as the headings in a document, the entries in an index, or the files and directories on a disk. Each item consists of a label and an optional bitmapped image, and each item can have a list of subitems associated with it. By clicking an item, the user can expand and collapse the associated list of subitems.  \n  \n This control (and therefore the `CTreeCtrl` class) is available only to programs running under Windows 98 and Windows NT version 4 and later.  \n  \n For more information on using `CTreeCtrl`, see:  \n  \n- [Controls](../../mfc/controls-mfc.md)  \n  \n- [Using CTreeCtrl](../../mfc/using-ctreectrl.md)  \n  \n- [Tree View Control Reference](http://msdn.microsoft.com/library/windows/desktop/bb759988) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n-   Knowledge Base article Q222905: HOWTO: Display a Context Menu for CTreeCtrl  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n `CTreeCtrl`  \n  \n## Requirements  \n **Header:** afxcmn.h  \n  \n##  <a name=\"ctreectrl__create\"></a>  CTreeCtrl::Create  \n If you specify the tree control in a dialog box template, or if you are using [CTreeView](../../mfc/reference/ctreeview-class.md), your tree control is created automatically when the dialog box or view is created.  \n  \n```  \nvirtual BOOL Create(\n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    UINT nID);\n```  \n  \n### Parameters  \n `dwStyle`  \n Specifies the tree view control's style. Apply window styles, described in [CreateWindow](http://msdn.microsoft.com/library/windows/desktop/ms632679), and any combination of [tree view control styles](http://msdn.microsoft.com/library/windows/desktop/bb760013) as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `rect`  \n Specifies the tree view control's size and position. It can be either a [CRect](../../atl-mfc-shared/reference/crect-class.md) object or a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure.  \n  \n `pParentWnd`  \n Specifies the tree view control's parent window, usually a `CDialog`. It must not be **NULL**.  \n  \n `nID`  \n Specifies the tree view control's ID.  \n  \n### Return Value  \n Nonzero if initialization was successful; otherwise 0.  \n  \n### Remarks  \n If you want to create the tree control as a child window of some other window, use the **Create** member function. If you create the tree control using **Create**, you must pass it **WS_VISIBLE**, in addition to other tree view styles.  \n  \n You construct a `CTreeCtrl` in two steps. First call the constructor, then call **Create**, which creates the tree view control and attaches it to the `CTreeCtrl` object.  \n  \n To create a tree control with extended window styles, call [CreateEx](#ctreectrl__createex) instead of **Create**.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#1](../../mfc/reference/codesnippet/cpp/ctreectrl-class_1.cpp)]  \n  \n##  <a name=\"ctreectrl__createex\"></a>  CTreeCtrl::CreateEx  \n Call this function to create a control (a child window) and associate it with the `CTreeCtrl` object.  \n  \n```  \nvirtual BOOL CreateEx(\n    DWORD dwExStyle,  \n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    UINT nID);\n```  \n  \n### Parameters  \n `dwExStyle`  \n Specifies the extended style of the control being created. For a list of extended Windows styles, see the `dwExStyle` parameter for [CreateWindowEx](http://msdn.microsoft.com/library/windows/desktop/ms632680) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `dwStyle`  \n Specifies the tree view control's style. Apply window styles, described in [CreateWindow](http://msdn.microsoft.com/library/windows/desktop/ms632679), and any combination of [tree view control styles](http://msdn.microsoft.com/library/windows/desktop/bb760013) as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `rect`  \n A reference to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure describing the size and position of the window to be created, in client coordinates of `pParentWnd`.  \n  \n `pParentWnd`  \n A pointer to the window that is the control's parent.  \n  \n `nID`  \n The control's child-window ID.  \n  \n### Return Value  \n Nonzero if successful otherwise 0.  \n  \n### Remarks  \n Use `CreateEx` instead of [Create](#ctreectrl__create) to apply extended Windows styles, specified by the Windows extended style preface **WS_EX_**.  \n  \n##  <a name=\"ctreectrl__createdragimage\"></a>  CTreeCtrl::CreateDragImage  \n Call this function to create a dragging bitmap for the given item in a tree view control, create an image list for the bitmap, and add the bitmap to the image list.  \n  \n```  \nCImageList* CreateDragImage(HTREEITEM hItem);\n```  \n  \n### Parameters  \n `hItem`  \n Handle of the tree item to be dragged.  \n  \n### Return Value  \n Pointer to the image list to which the dragging bitmap was added, if successful; otherwise **NULL**.  \n  \n### Remarks  \n An application uses the image-list functions to display the image when the item is being dragged.  \n  \n The `CImageList` object is permanent, and you must delete it when finished. For example:  \n  \n [!code-cpp[NVC_MFC_CTreeCtrl#2](../../mfc/reference/codesnippet/cpp/ctreectrl-class_2.cpp)]  \n  \n##  <a name=\"ctreectrl__ctreectrl\"></a>  CTreeCtrl::CTreeCtrl  \n Constructs a `CTreeCtrl` object.  \n  \n```  \nCTreeCtrl();\n```  \n  \n##  <a name=\"ctreectrl__deleteallitems\"></a>  CTreeCtrl::DeleteAllItems  \n Call this function to delete all items from the tree view control.  \n  \n```  \nBOOL DeleteAllItems();\n```  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#3](../../mfc/reference/codesnippet/cpp/ctreectrl-class_3.cpp)]  \n  \n##  <a name=\"ctreectrl__deleteitem\"></a>  CTreeCtrl::DeleteItem  \n Call this function to delete an item from the tree view control.  \n  \n```  \nBOOL DeleteItem(HTREEITEM hItem);\n```  \n  \n### Parameters  \n `hItem`  \n Handle of the tree item to be deleted. If *hitem* has the **TVI_ROOT** value, all items are deleted from the tree view control.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#4](../../mfc/reference/codesnippet/cpp/ctreectrl-class_4.cpp)]  \n  \n##  <a name=\"ctreectrl__editlabel\"></a>  CTreeCtrl::EditLabel  \n Call this function to begin in-place editing of the specified item's text.  \n  \n```  \nCEdit* EditLabel(HTREEITEM hItem);\n```  \n  \n### Parameters  \n `hItem`  \n Handle of the tree item to be edited.  \n  \n### Return Value  \n If successful, a pointer to the `CEdit` object that is used to edit the item text; otherwise **NULL**.  \n  \n### Remarks  \n The editing is accomplished by replacing the text of the item with a single-line edit control containing the text.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#5](../../mfc/reference/codesnippet/cpp/ctreectrl-class_5.cpp)]  \n  \n##  <a name=\"ctreectrl__endeditlabelnow\"></a>  CTreeCtrl::EndEditLabelNow  \n Concludes the edit operation on the label of a tree-view item in the current tree-view control.  \n  \n```  \nBOOL EndEditLabelNow(BOOL fCancelWithoutSave);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `fCancelWithoutSave`|`true` to discard changes to the tree-view item before concluding the edit operation, or `false` to save changes to the tree-view item before concluding the operation.|  \n  \n### Return Value  \n `true` if this method is successful; otherwise, `false`.  \n  \n### Remarks  \n This method sends the [TVM_ENDEDITLABELNOW](http://msdn.microsoft.com/library/windows/desktop/bb773564) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctreectrl__ensurevisible\"></a>  CTreeCtrl::EnsureVisible  \n Call this function to ensure that a tree view item is visible.  \n  \n```  \nBOOL EnsureVisible(HTREEITEM hItem);\n```  \n  \n### Parameters  \n `hItem`  \n Handle of the tree item being made visible.  \n  \n### Return Value  \n Returns **TRUE** if the system scrolled the items in the tree-view control to ensure that the specified item is visible. Otherwise, the return value is **FALSE**.  \n  \n### Remarks  \n If necessary, the function expands the parent item or scrolls the tree view control so that the item is visible.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#6](../../mfc/reference/codesnippet/cpp/ctreectrl-class_6.cpp)]  \n  \n##  <a name=\"ctreectrl__expand\"></a>  CTreeCtrl::Expand  \n Call this function to expand or collapse the list of child items, if any, associated with the given parent item.  \n  \n```  \nBOOL Expand(\n    HTREEITEM hItem,  \n    UINT nCode);\n```  \n  \n### Parameters  \n `hItem`  \n Handle of the tree item being expanded.  \n  \n `nCode`  \n A flag indicating the type of action to be taken. This flag can have one of the following values:  \n  \n- `TVE_COLLAPSE` Collapses the list.  \n  \n- `TVE_COLLAPSERESET` Collapses the list and removes the child items. The **TVIS_EXPANDEDONCE** state flag is reset. This flag must be used with the `TVE_COLLAPSE` flag.  \n  \n- `TVE_EXPAND` Expands the list.  \n  \n- `TVE_TOGGLE` Collapses the list if it is currently expanded or expands it if it is currently collapsed.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Example  \n  See the example for [CTreeCtrl::EnsureVisible](#ctreectrl__ensurevisible).  \n  \n##  <a name=\"ctreectrl__getbkcolor\"></a>  CTreeCtrl::GetBkColor  \n This member function implements the behavior of the Win32 message [TVM_GETBKCOLOR](http://msdn.microsoft.com/library/windows/desktop/bb773570), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n```  \nCOLORREF GetBkColor() const;\n\n \n```  \n  \n### Return Value  \n A **COLORREF** value that represents the current window background color for the control. If this value is -1, the control is using the system window color. In this case, you can use `::GetSysColor(COLOR_WINDOW)` to get the current system color that the control is using.  \n  \n### Example  \n  See the example for [CTreeCtrl::SetTextColor](#ctreectrl__settextcolor).  \n  \n##  <a name=\"ctreectrl__getcheck\"></a>  CTreeCtrl::GetCheck  \n Call this member function to retrieve an item's check state.  \n  \n```  \nBOOL GetCheck(HTREEITEM hItem) const;\n\n \n```  \n  \n### Parameters  \n `hItem`  \n The **HTREEITEM** about which to receive the state information.  \n  \n### Return Value  \n Nonzero if the tree control item is checked; otherwise 0.  \n  \n### Example  \n  See the example for [CTreeCtrl::SetCheck](#ctreectrl__setcheck).  \n  \n##  <a name=\"ctreectrl__getchilditem\"></a>  CTreeCtrl::GetChildItem  \n Call this function to retrieve the tree view item that is the child of the item specified by `hItem`.  \n  \n```  \nHTREEITEM GetChildItem(HTREEITEM hItem) const;\n\n \n```  \n  \n### Parameters  \n `hItem`  \n Handle of a tree item.  \n  \n### Return Value  \n The handle of the child item if successful; otherwise **NULL**.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#7](../../mfc/reference/codesnippet/cpp/ctreectrl-class_7.cpp)]  \n  \n##  <a name=\"ctreectrl__getcount\"></a>  CTreeCtrl::GetCount  \n Call this function to retrieve a count of the items in a tree view control.  \n  \n```  \nUINT GetCount() const;\n\n \n```  \n  \n### Return Value  \n The number of items in the tree view control.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#8](../../mfc/reference/codesnippet/cpp/ctreectrl-class_8.cpp)]  \n  \n##  <a name=\"ctreectrl__getdrophilightitem\"></a>  CTreeCtrl::GetDropHilightItem  \n Call this function to retrieve the item that is the target of a drag-and-drop operation.  \n  \n```  \nHTREEITEM GetDropHilightItem() const;\n\n \n```  \n  \n### Return Value  \n The handle of the item dropped if successful; otherwise **NULL**.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#9](../../mfc/reference/codesnippet/cpp/ctreectrl-class_9.cpp)]  \n  \n##  <a name=\"ctreectrl__geteditcontrol\"></a>  CTreeCtrl::GetEditControl  \n Call this function to retrieve the handle of the edit control being used to edit a tree view item's text.  \n  \n```  \nCEdit* GetEditControl() const;\n\n \n```  \n  \n### Return Value  \n A pointer to the edit control used to edit the item text, if successful; otherwise **NULL**.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#10](../../mfc/reference/codesnippet/cpp/ctreectrl-class_10.cpp)]  \n  \n##  <a name=\"ctreectrl__getextendedstyle\"></a>  CTreeCtrl::GetExtendedStyle  \n Retrieves the extended styles that the current tree-view control is using.  \n  \n```  \nDWORD GetExtendedStyle() const;\n\n \n```  \n  \n### Return Value  \n A value that contains a bitwise combination (OR) of the current tree-view control's extended styles. For more information, see [Tree-View Control Extended Styles](http://msdn.microsoft.com/library/windows/desktop/bb759981).  \n  \n### Remarks  \n This method sends the [TVM_GETEXTENDEDSTYLE](http://msdn.microsoft.com/library/windows/desktop/bb773580) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctreectrl__getfirstvisibleitem\"></a>  CTreeCtrl::GetFirstVisibleItem  \n Call this function to retrieve the first visible item of the tree view control.  \n  \n```  \nHTREEITEM GetFirstVisibleItem() const;\n\n \n```  \n  \n### Return Value  \n The handle of the first visible item; otherwise **NULL**.  \n  \n### Example  \n  See the example for [CTreeCtrl::SetCheck](#ctreectrl__setcheck).  \n  \n##  <a name=\"ctreectrl__getimagelist\"></a>  CTreeCtrl::GetImageList  \n Call this function to retrieve the handle of the normal or state image list associated with the tree view control.  \n  \n```  \nCImageList* GetImageList(UINT nImageList) const;\n\n \n```  \n  \n### Parameters  \n `nImageList`  \n Type of image list to retrieve. The image list can be one of the following values:  \n  \n- `TVSIL_NORMAL` Retrieves the normal image list, which contains the selected and nonselected images for the tree view item.  \n  \n- `TVSIL_STATE` Retrieves the state image list, which contains the images for tree view items that are in a user-defined state.  \n  \n### Return Value  \n Pointer to the control's image list if successful; otherwise **NULL**.  \n  \n### Remarks  \n Each item in a tree view control can have a pair of bitmapped images associated with it. One image is displayed when the item is selected, and the other is displayed when the item is not selected. For example, an item might display an open folder when it is selected and a closed folder when it is not selected.  \n  \n For more information on image lists, see the [CImageList](../../mfc/reference/cimagelist-class.md) class.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#11](../../mfc/reference/codesnippet/cpp/ctreectrl-class_11.cpp)]  \n  \n##  <a name=\"ctreectrl__getindent\"></a>  CTreeCtrl::GetIndent  \n Call this function to retrieve the amount, in pixels, that child items are indented relative to their parent items.  \n  \n```  \nUINT GetIndent() const;\n\n \n```  \n  \n### Return Value  \n The amount of indentation measured in pixels.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#12](../../mfc/reference/codesnippet/cpp/ctreectrl-class_12.cpp)]  \n  \n##  <a name=\"ctreectrl__getinsertmarkcolor\"></a>  CTreeCtrl::GetInsertMarkColor  \n This member function implements the behavior of the Win32 message [TVM_GETINSERTMARKCOLOR](http://msdn.microsoft.com/library/windows/desktop/bb773590), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n```  \nCOLORREF GetInsertMarkColor() const;\n\n \n```  \n  \n### Return Value  \n A **COLORREF** value that contains the current insertion mark color.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#13](../../mfc/reference/codesnippet/cpp/ctreectrl-class_13.cpp)]  \n  \n##  <a name=\"ctreectrl__getitem\"></a>  CTreeCtrl::GetItem  \n Call this function to retrieve the attributes of the specified tree view item.  \n  \n```  \nBOOL GetItem(TVITEM* pItem) const;\n\n \n```  \n  \n### Parameters  \n `pItem`  \n A pointer to a [TVITEM](http://msdn.microsoft.com/library/windows/desktop/bb773456) structure, as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Example  \n  See the example for [CTreeCtrl::DeleteItem](#ctreectrl__deleteitem).  \n  \n##  <a name=\"ctreectrl__getitemdata\"></a>  CTreeCtrl::GetItemData  \n Call this function to retrieve the 32-bit application-specific value associated with the specified item.  \n  \n```  \nDWORD_PTR GetItemData(HTREEITEM hItem) const;\n\n \n```  \n  \n### Parameters  \n `hItem`  \n Handle of the item whose data is to be retrieved.  \n  \n### Return Value  \n A 32-bit application-specific value associated with the item specified by `hItem`.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#14](../../mfc/reference/codesnippet/cpp/ctreectrl-class_14.cpp)]  \n  \n##  <a name=\"ctreectrl__getitemexpandedimageindex\"></a>  CTreeCtrl::GetItemExpandedImageIndex  \n Retrieves the index of the image to display when the specified item of the current tree-view control is in the expanded state.  \n  \n```  \nint GetItemExpandedImageIndex(HTREEITEM hItem)const;\n\n \n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `hItem`|Handle to a tree-view control item.|  \n  \n### Return Value  \n The index of the image to display when the specified item is in the expanded state.  \n  \n### Remarks  \n This method sends the [TVM_GETITEM](http://msdn.microsoft.com/library/windows/desktop/bb773596) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]. That message returns the [TVITEMEX](http://msdn.microsoft.com/library/windows/desktop/bb773459) structure that describes the tree-view control item, and then this method retrieves the `iExpandedImage` member from that structure.  \n  \n##  <a name=\"ctreectrl__getitemheight\"></a>  CTreeCtrl::GetItemHeight  \n This member function implements the behavior of the Win32 message [TVM_GETITEMHEIGHT](http://msdn.microsoft.com/library/windows/desktop/bb773599), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n```  \nSHORT GetItemHeight() const;\n\n \n```  \n  \n### Return Value  \n The height of the item, in pixels.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#15](../../mfc/reference/codesnippet/cpp/ctreectrl-class_15.cpp)]  \n  \n##  <a name=\"ctreectrl__getitemimage\"></a>  CTreeCtrl::GetItemImage  \n Each item in a tree view control can have a pair of bitmapped images associated with it.  \n  \n```  \nBOOL GetItemImage(\n    HTREEITEM hItem,  \n    int& nImage,  \n    int& nSelectedImage) const;\n\n \n```  \n  \n### Parameters  \n `hItem`  \n The handle of the item whose image is to be retrieved.  \n  \n `nImage`  \n An integer that receives the index of the item's image within the tree view control's image list.  \n  \n `nSelectedImage`  \n An integer that receives the index of the item's selected image within the tree view control's image list.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n The images appear on the left side of an item's label. One image is displayed when the item is selected, and the other is displayed when the item is not selected. For example, an item might display an open folder when it is selected and a closed folder when it is not selected.  \n  \n Call this function to retrieve the index of the item's image and its selected image within the tree view control's image list.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#16](../../mfc/reference/codesnippet/cpp/ctreectrl-class_16.cpp)]  \n  \n##  <a name=\"ctreectrl__getitempartrect\"></a>  CTreeCtrl::GetItemPartRect  \n Retrieves the bounding rectangle for a specified part of a specified item in the current tree-view control.  \n  \n```  \nBOOL GetItemPartRect(\n    HTREEITEM hItem,   \n    int nPart,   \n    LPRECT lpRect)const;\n\n \n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `hItem`|Handle to a tree-view control item.|  \n|[in] `nPart`|Identifier for the part. Must be set to `TVGIPR_BUTTON`.|  \n|[out] `lpRect`|Pointer to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure. If this method is successful, the structure receives the rectangle coordinates of the part specified by `hItem` and `nPart`.|  \n  \n### Return Value  \n `true` if this method is successful; otherwise, `false`.  \n  \n### Remarks  \n Each tree control item is bounded by a graphics rectangle. Whenever a point in that rectangle is clicked, the item is said to be *hit*. This method returns the largest rectangle such that when a point in the rectangle is clicked, the item identified by the `hItem` parameter is hit.  \n  \n This method sends the `TVM_GETITEMPARTRECT` message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]. For more information, see the [TreeView_GetItemPartRect](http://msdn.microsoft.com/library/windows/desktop/bb773847) macro.  \n  \n### Example  \n The following code example defines a variable, `m_treeCtrl`, that is used to access the current tree-view control. The code example also defines an unsigned integer and several HTREEITEM variables. These variables are used in the next example.  \n  \n [!code-cpp[NVC_MFC_CTreeCtrl_s1#1](../../mfc/reference/codesnippet/cpp/ctreectrl-class_17.h)]  \n  \n### Example  \n The following code example uses an accessibility identifier and the [CTreeCtrl::MapAccIdToItem](#ctreectrl__mapaccidtoitem) method to retrieve a handle to the root tree-view item. Then the example uses the handle and the [CTreeCtrl::GetItemPartRect](#ctreectrl__getitempartrect) method to draw a 3D rectangle around that item. In an earlier section of the code example, which is not shown, we created a tree-view that consists of a root country/region node for the United States, subnodes for the states of Pennsylvania and Washington, and tree items for cities in those states. We used the [CTreeCtrl::MapItemToAccID](#ctreectrl__mapitemtoaccid) method to associate the root tree-view item with an accessibility identifier.  \n  \n [!code-cpp[NVC_MFC_CTreeCtrl_s1#5](../../mfc/reference/codesnippet/cpp/ctreectrl-class_18.cpp)]  \n  \n##  <a name=\"ctreectrl__getitemrect\"></a>  CTreeCtrl::GetItemRect  \n Call this function to retrieve the bounding rectangle for `hItem` and determine whether it is visible or not.  \n  \n```  \nBOOL GetItemRect(\n    HTREEITEM hItem,  \n    LPRECT lpRect,  \n    BOOL bTextOnly) const;\n\n \n```  \n  \n### Parameters  \n `hItem`  \n The handle of a tree view control item.  \n  \n `lpRect`  \n Pointer to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure that receives the bounding rectangle. The coordinates are relative to the upper-left corner of the tree view control.  \n  \n *bTextOnly*  \n If this parameter is nonzero, the bounding rectangle includes only the text of the item. Otherwise it includes the entire line that the item occupies in the tree view control.  \n  \n### Return Value  \n Nonzero if the item is visible, with the bounding rectangle contained in `lpRect`. Otherwise, 0 with `lpRect` uninitialized.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#17](../../mfc/reference/codesnippet/cpp/ctreectrl-class_19.cpp)]  \n  \n##  <a name=\"ctreectrl__getitemstate\"></a>  CTreeCtrl::GetItemState  \n Returns the state of the item specified by `hItem`.  \n  \n```  \nUINT GetItemState(\n    HTREEITEM hItem,  \n    UINT nStateMask) const;\n\n \n```  \n  \n### Parameters  \n `hItem`  \n Handle of the item whose state is to be retrieved.  \n  \n `nStateMask`  \n Mask indicating one or more states to be retrieved. For more information on possible values for `nStateMask`, see the discussion of the **state** and **stateMask** members of the [TVITEM](http://msdn.microsoft.com/library/windows/desktop/bb773456) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Return Value  \n A **UINT** that holds the bitwise OR of the values specified by nStateMask. For information on possible values, see [CTreeCtrl::GetItem](#ctreectrl__getitem). To find the value for a specific state, perform a bitwise AND operation of the state value and the return value, as shown in the following example.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#18](../../mfc/reference/codesnippet/cpp/ctreectrl-class_20.cpp)]  \n  \n##  <a name=\"ctreectrl__getitemstateex\"></a>  CTreeCtrl::GetItemStateEx  \n Retrieves the extended state of the specified item in the current tree-view control.  \n  \n```  \nUINT GetItemStateEx(HTREEITEM hItem) const;\n\n \n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `hItem`|Handle to a tree-view control item.|  \n  \n### Return Value  \n The extended state of the item. For more information, see the `uStateEx` member of the [TVITEMEX](http://msdn.microsoft.com/library/windows/desktop/bb773459) structure.  \n  \n### Remarks  \n This method sends the [TVM_GETITEM](http://msdn.microsoft.com/library/windows/desktop/bb773596) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]. That message returns the [TVITEMEX](http://msdn.microsoft.com/library/windows/desktop/bb773459) structure that describes the tree-view control item, and this method retrieves the `uStateEx` member from that structure.  \n  \n##  <a name=\"ctreectrl__getitemtext\"></a>  CTreeCtrl::GetItemText  \n Returns the text of the item specified by `hItem`.  \n  \n```  \nCString GetItemText(HTREEITEM hItem) const;\n\n \n```  \n  \n### Parameters  \n `hItem`  \n Handle of the item whose text is to be retrieved.  \n  \n### Return Value  \n A `CString` object containing the item's text.  \n  \n### Example  \n  See the example for [CTreeCtrl::GetNextItem](#ctreectrl__getnextitem).  \n  \n##  <a name=\"ctreectrl__getlastvisibleitem\"></a>  CTreeCtrl::GetLastVisibleItem  \n Retrieves the last unexpanded node item in the current tree-view control.  \n  \n```  \nHTREEITEM GetLastVisibleItem() const;\n\n \n```  \n  \n### Return Value  \n The handle to the last unexpanded node item if the method is successful; otherwise, `NULL`.  \n  \n### Remarks  \n This method sends the [TVM_GETNEXTITEM](http://msdn.microsoft.com/library/windows/desktop/bb773622) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]. For more information, see the `TVGN_LASTVISIBLE` flag in the `flag` parameter of that message.  \n  \n### Example  \n The following code example defines a variable, `m_treeCtrl`, that is used to access the current tree-view control. The code example also defines an unsigned integer and several HTREEITEM variables. One or more of these variables are used in the next example.  \n  \n [!code-cpp[NVC_MFC_CTreeCtrl_s1#1](../../mfc/reference/codesnippet/cpp/ctreectrl-class_17.h)]  \n  \n### Example  \n The following code example retrieves a handle to the last unexpanded tree-view node item, and then draws a 3D rectangle around that item. In an earlier section of the code example, which is not shown, we created a tree-view that consists of a root country/region node for the United States, subnodes for the states of Pennsylvania and Washington, and tree items for cities in those states.  \n  \n [!code-cpp[NVC_MFC_CTreeCtrl_s1#6](../../mfc/reference/codesnippet/cpp/ctreectrl-class_21.cpp)]  \n  \n##  <a name=\"ctreectrl__getlinecolor\"></a>  CTreeCtrl::GetLineColor  \n This member function implements the behavior of the win32 message [TVM_GETLINECOLOR](http://msdn.microsoft.com/library/windows/desktop/bb773619), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n```  \nCOLORREF GetLineColor() const;\n\n \n```  \n  \n### Return Value  \n The current line color.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#19](../../mfc/reference/codesnippet/cpp/ctreectrl-class_22.cpp)]  \n  \n##  <a name=\"ctreectrl__getnextitem\"></a>  CTreeCtrl::GetNextItem  \n Call this function to retrieve the tree view item that has the specified relationship, indicated by the `nCode` parameter, to `hItem`.  \n  \n```  \nHTREEITEM GetNextItem(\n    HTREEITEM hItem,  \n    UINT nCode) const;\n\n \n```  \n  \n### Parameters  \n `hItem`  \n Handle of a tree item.  \n  \n `nCode`  \n A flag indicating the type of relation to `hItem`. This flag can be one of the following values:  \n  \n- `TVGN_CARET` Retrieves the currently selected item.  \n  \n- `TVGN_CHILD` Retrieves the first child item of the item specified by the `hItem` parameter.  \n  \n- `TVGN_DROPHILITE` Retrieves the item that is the target of a drag-and-drop operation.  \n  \n- `TVGN_FIRSTVISIBLE` Retrieves the first visible item.  \n  \n- `TVGN_LASTVISIBLE` Retrieves the last expanded item in the tree. This does not retrieve the last item visible in the tree-view window.  \n  \n- `TVGN_NEXT` Retrieves the next sibling item.  \n  \n- `TVGN_NEXTVISIBLE` Retrieves the next visible item that follows the specified item.  \n  \n- `TVGN_PARENT` Retrieves the parent of the specified item.  \n  \n- `TVGN_PREVIOUS` Retrieves the previous sibling item.  \n  \n- `TVGN_PREVIOUSVISIBLE` Retrieves the first visible item that precedes the specified item.  \n  \n- `TVGN_ROOT` Retrieves the first child item of the root item of which the specified item is a part.  \n  \n### Return Value  \n The handle of the next item if successful; otherwise **NULL**.  \n  \n### Remarks  \n This function will return **NULL** if the item being retrieved is the root node of the tree. For example, if you use this message with the `TVGN_PARENT` flag on a first-level child of the tree view's root node, the message will return **NULL**.  \n  \n### Example  \n For an example of using `GetNextItem` in a loop, see [CTreeCtrl::DeleteItem](#ctreectrl__deleteitem).  \n  \n [!code-cpp[NVC_MFC_CTreeCtrl#20](../../mfc/reference/codesnippet/cpp/ctreectrl-class_23.cpp)]  \n  \n##  <a name=\"ctreectrl__getnextsiblingitem\"></a>  CTreeCtrl::GetNextSiblingItem  \n Call this function to retrieve the next sibling of `hItem`.  \n  \n```  \nHTREEITEM GetNextSiblingItem(HTREEITEM hItem) const;\n\n \n```  \n  \n### Parameters  \n `hItem`  \n Handle of a tree item.  \n  \n### Return Value  \n The handle of the next sibling item; otherwise **NULL**.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#21](../../mfc/reference/codesnippet/cpp/ctreectrl-class_24.cpp)]  \n  \n##  <a name=\"ctreectrl__getnextvisibleitem\"></a>  CTreeCtrl::GetNextVisibleItem  \n Call this function to retrieve the next visible item of `hItem`.  \n  \n```  \nHTREEITEM GetNextVisibleItem(HTREEITEM hItem) const;\n\n \n```  \n  \n### Parameters  \n `hItem`  \n Handle of a tree item.  \n  \n### Return Value  \n The handle of the next visible item; otherwise **NULL**.  \n  \n### Example  \n  See the example for [CTreeCtrl::SetCheck](#ctreectrl__setcheck).  \n  \n##  <a name=\"ctreectrl__getparentitem\"></a>  CTreeCtrl::GetParentItem  \n Call this function to retrieve the parent of `hItem`.  \n  \n```  \nHTREEITEM GetParentItem(HTREEITEM hItem) const;\n\n \n```  \n  \n### Parameters  \n `hItem`  \n Handle of a tree item.  \n  \n### Return Value  \n The handle of the parent item; otherwise **NULL**.  \n  \n### Remarks  \n This function will return **NULL** if the parent of the specified item is the root node of the tree.  \n  \n### Example  \n  See the example for [CTreeCtrl::EnsureVisible](#ctreectrl__ensurevisible).  \n  \n##  <a name=\"ctreectrl__getprevsiblingitem\"></a>  CTreeCtrl::GetPrevSiblingItem  \n Call this function to retrieve the previous sibling of `hItem`.  \n  \n```  \nHTREEITEM GetPrevSiblingItem(HTREEITEM hItem) const;\n\n \n```  \n  \n### Parameters  \n `hItem`  \n Handle of a tree item.  \n  \n### Return Value  \n The handle of the previous sibling; otherwise **NULL**.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#22](../../mfc/reference/codesnippet/cpp/ctreectrl-class_25.cpp)]  \n  \n##  <a name=\"ctreectrl__getprevvisibleitem\"></a>  CTreeCtrl::GetPrevVisibleItem  \n Call this function to retrieve the previous visible item of `hItem`.  \n  \n```  \nHTREEITEM GetPrevVisibleItem(HTREEITEM hItem) const;\n\n \n```  \n  \n### Parameters  \n `hItem`  \n Handle of a tree item.  \n  \n### Return Value  \n The handle of the previous visible item; otherwise **NULL**.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#23](../../mfc/reference/codesnippet/cpp/ctreectrl-class_26.cpp)]  \n  \n##  <a name=\"ctreectrl__getrootitem\"></a>  CTreeCtrl::GetRootItem  \n Call this function to retrieve the root item of the tree view control.  \n  \n```  \nHTREEITEM GetRootItem() const;\n\n \n```  \n  \n### Return Value  \n The handle of the root item; otherwise **NULL**.  \n  \n### Example  \n  See the example for [CTreeCtrl::EditLabel](#ctreectrl__editlabel).  \n  \n##  <a name=\"ctreectrl__getscrolltime\"></a>  CTreeCtrl::GetScrollTime  \n Call this member function to retrieve the maximum scroll time for the tree view control.  \n  \n```  \nUINT GetScrollTime() const;\n\n \n```  \n  \n### Return Value  \n The maximum scroll time, in milliseconds.  \n  \n### Remarks  \n This member function implements the behavior of the win32 message [TVM_GETSCROLLTIME](http://msdn.microsoft.com/library/windows/desktop/bb773625), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctreectrl__getselectedcount\"></a>  CTreeCtrl::GetSelectedCount  \n Retrieves the number of selected items in the current tree-view control.  \n  \n```  \nUINT GetSelectedCount();\n```  \n  \n### Return Value  \n The number of selected items.  \n  \n### Remarks  \n This method sends the [TVM_GETSELECTEDCOUNT](http://msdn.microsoft.com/library/windows/desktop/bb773629) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctreectrl__getselecteditem\"></a>  CTreeCtrl::GetSelectedItem  \n Call this function to retrieve the currently selected item of the tree view control.  \n  \n```  \nHTREEITEM GetSelectedItem() const;\n\n \n```  \n  \n### Return Value  \n The handle of the selected item; otherwise **NULL**.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#24](../../mfc/reference/codesnippet/cpp/ctreectrl-class_27.cpp)]  \n  \n##  <a name=\"ctreectrl__gettextcolor\"></a>  CTreeCtrl::GetTextColor  \n This member function implements the behavior of the Win32 message [TVM_GETTEXTCOLOR](http://msdn.microsoft.com/library/windows/desktop/bb773633), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n```  \nCOLORREF GetTextColor() const;\n\n \n```  \n  \n### Return Value  \n A **COLORREF** value that represents the current text color. If this value is -1, the control is using the system color for the text color.  \n  \n### Example  \n  See the example for [CTreeCtrl::SetTextColor](#ctreectrl__settextcolor).  \n  \n##  <a name=\"ctreectrl__gettooltips\"></a>  CTreeCtrl::GetToolTips  \n This member function implements the behavior of the Win32 message [TVM_GETTOOLTIPS](http://msdn.microsoft.com/library/windows/desktop/bb773729), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n```  \nCToolTipCtrl* GetToolTips() const;\n\n \n```  \n  \n### Return Value  \n A pointer to a [CToolTipCtrl](../../mfc/reference/ctooltipctrl-class.md) object to be used by the tree control. If the [Create](#ctreectrl__create) member function uses the style **TVS_NOTOOLTIPS**, no tooltips are used, and **NULL** is returned.  \n  \n### Remarks  \n The MFC implementation of `GetToolTips` returns a `CToolTipCtrl` object, which is used by the tree control, rather than a handle to a tooltip control.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#25](../../mfc/reference/codesnippet/cpp/ctreectrl-class_28.cpp)]  \n  \n##  <a name=\"ctreectrl__getvisiblecount\"></a>  CTreeCtrl::GetVisibleCount  \n Call this function to retrieve a count of the visible items in a tree view control.  \n  \n```  \nUINT GetVisibleCount() const;\n\n \n```  \n  \n### Return Value  \n The number of visible items in the tree view control; otherwise – 1.  \n  \n### Example  \n  See the example for [CTreeCtrl::SetCheck](#ctreectrl__setcheck).  \n  \n##  <a name=\"ctreectrl__hittest\"></a>  CTreeCtrl::HitTest  \n Call this function to determine the location of the specified point relative to the client area of a tree view control.  \n  \n```  \nHTREEITEM HitTest(\n    CPoint pt,  \n    UINT* pFlags = NULL) const;\n\n \n \nHTREEITEM HitTest(\n    TVHITTESTINFO* pHitTestInfo) const;\n\n \n```  \n  \n### Parameters  \n `pt`  \n Client coordinates of the point to test.  \n  \n `pFlags`  \n Pointer to an integer that receives information about the results of the hit test. It can be one or more of the values listed under the **flags** member in the Remarks section.  \n  \n `pHitTestInfo`  \n Address of a [TVHITTESTINFO](http://msdn.microsoft.com/library/windows/desktop/bb773448) structure that contains the position to hit test and that receives information about the results of the hit test.  \n  \n### Return Value  \n The handle of the tree view item that occupies the specified point or **NULL** if no item occupies the point.  \n  \n### Remarks  \n When this function is called, the `pt` parameter specifies the coordinates of the point to test. The function returns the handle of the item at the specified point or **NULL** if no item occupies the point. In addition, the `pFlags` parameter contains a value that indicates the location of the specified point. Possible values are:  \n  \n|||  \n|-|-|  \n|Value|Meaning|  \n|TVHT_ABOVE|Above the client area.|  \n|TVHT_BELOW|Below the client area.|  \n|TVHT_NOWHERE|In the client area, but below the last item.|  \n|TVHT_ONITEM|On the bitmap or label associated with an item.|  \n|TVHT_ONITEMBUTTON|On the button associated with an item.|  \n|TVHT_ONITEMICON|On the bitmap associated with an item.|  \n|TVHT_ONITEMINDENT|In the indentation associated with an item.|  \n|TVHT_ONITEMLABEL|On the label (string) associated with an item.|  \n|TVHT_ONITEMRIGHT|In the area to the right of an item.|  \n|TVHT_ONITEMSTATEICON|On the state icon for a tree-view item that is in a user-defined state.|  \n|TVHT_TOLEFT|To the left of the client area.|  \n|TVHT_TORIGHT|To the right of the client area.|  \n|||  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#26](../../mfc/reference/codesnippet/cpp/ctreectrl-class_29.cpp)]  \n  \n##  <a name=\"ctreectrl__insertitem\"></a>  CTreeCtrl::InsertItem  \n Call this function to insert a new item in a tree view control.  \n  \n```  \nHTREEITEM InsertItem(\n    LPTVINSERTSTRUCT lpInsertStruct);\n\n \nHTREEITEM InsertItem(\n    UINT nMask,  \n    LPCTSTR lpszItem,  \n    int nImage,  \n    int nSelectedImage,  \n    UINT nState,  \n    UINT nStateMask,  \n    LPARAM lParam,  \n    HTREEITEM hParent,  \n    HTREEITEM hInsertAfter);\n\n \nHTREEITEM InsertItem(\n    LPCTSTR lpszItem,  \n    HTREEITEM hParent = TVI_ROOT,  \n    HTREEITEM hInsertAfter = TVI_LAST);\n\n \nHTREEITEM InsertItem(\n    LPCTSTR lpszItem,  \n    int nImage,  \n    int nSelectedImage,  \n    HTREEITEM hParent = TVI_ROOT,  \n    HTREEITEM hInsertAfter = TVI_LAST);\n```  \n  \n### Parameters  \n *lpInsertStruct*  \n A pointer to a `TVINSERTSTRUCT` that specifies the attributes of the tree view item to be inserted.  \n  \n `nMask`  \n Integer specifying which attributes to set. See the `TVITEM` structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `lpszItem`  \n Address of a string containing the item's text.  \n  \n `nImage`  \n Index of the item's image in the tree view control's image list.  \n  \n `nSelectedImage`  \n Index of the item's selected image in the tree view control's image list.  \n  \n `nState`  \n Specifies values for the item's states. See Tree View Control Item States in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for a list of appropriate states.  \n  \n `nStateMask`  \n Specifies which states are to be set. See the `TVITEM` structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `lParam`  \n A 32-bit application-specific value associated with the item.  \n  \n `hParent`  \n Handle of the inserted item's parent.  \n  \n *hInsertAfter*  \n Handle of the item after which the new item is to be inserted.  \n  \n### Return Value  \n Handle of the new item if successful; otherwise **NULL**.  \n  \n### Remarks  \n The example shows situations in which you might want to use each version of the function when inserting a tree control item.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#27](../../mfc/reference/codesnippet/cpp/ctreectrl-class_30.cpp)]  \n  \n##  <a name=\"ctreectrl__itemhaschildren\"></a>  CTreeCtrl::ItemHasChildren  \n Use this function to determine whether the tree item specified by `hItem` has child items.  \n  \n```  \nBOOL ItemHasChildren(HTREEITEM hItem) const;\n\n \n```  \n  \n### Parameters  \n `hItem`  \n Handle of a tree item.  \n  \n### Return Value  \n Nonzero if the tree item specified by `hItem` has child items; 0 if it does not.  \n  \n### Remarks  \n If so, you can then use [CTreeCtrl::GetChildItem](#ctreectrl__getchilditem) to retrieve those child items.  \n  \n### Example  \n  See the example for [CTreeCtrl::GetSelectedItem](#ctreectrl__getselecteditem).  \n  \n##  <a name=\"ctreectrl__mapaccidtoitem\"></a>  CTreeCtrl::MapAccIdToItem  \n Maps the specified accessibility identifier to the handle of a tree-view item in the current tree-view control.  \n  \n```  \nHTREEITEM MapAccIdToItem(UINT uAccId) const;\n\n \n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `uAccId`|An accessibility identifier for an element in the tree-view item.|  \n  \n### Return Value  \n The handle to a tree-view item ( `HTREEITEM`) that corresponds to the `uAccId` parameter. For more information, see the `hItem` member of the [TVITEMEX](http://msdn.microsoft.com/library/windows/desktop/bb773459) structure.  \n  \n### Remarks  \n Accessibility aids are applications that help people with disabilities use computers. An accessibility identifier is used by the `IAccessible` interface to uniquely specify an element in a window. For more information about accessibility identifiers, search for the \"About Active Accessibility Support\" topic at [Microsoft Developer Network](http://go.microsoft.com/fwlink/linkid=56322).  \n  \n This method sends the [TVM_MAPACCIDTOHTREEITEM](http://msdn.microsoft.com/library/windows/desktop/bb773734) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n The following code example defines a variable, `m_treeCtrl`, that is used to access the current tree-view control. The code example also defines an unsigned integer and several HTREEITEM variables. These variables are used in the next example.  \n  \n [!code-cpp[NVC_MFC_CTreeCtrl_s1#1](../../mfc/reference/codesnippet/cpp/ctreectrl-class_17.h)]  \n  \n### Example  \n The following code example uses an accessibility identifier and the [CTreeCtrl::MapAccIdToItem](#ctreectrl__mapaccidtoitem) method to retrieve a handle to the root tree-view item. The example uses the handle and the [CTreeCtrl::GetItemPartRect](#ctreectrl__getitempartrect) method to draw a 3D rectangle around that item. In an earlier section of the code example, which is not shown, we created a tree-view that consists of a root country/region node for the United States, subnodes for the states of Pennsylvania and Washington, and tree items for cities in those states. We used the [CTreeCtrl::MapItemToAccID](#ctreectrl__mapitemtoaccid) method to associate the root tree-view item with an accessibility identifier.  \n  \n [!code-cpp[NVC_MFC_CTreeCtrl_s1#5](../../mfc/reference/codesnippet/cpp/ctreectrl-class_18.cpp)]  \n  \n##  <a name=\"ctreectrl__mapitemtoaccid\"></a>  CTreeCtrl::MapItemToAccID  \n Maps the specified handle of a tree-view item in the current tree-view control to an accessibility identifier.  \n  \n```  \nUINT MapItemToAccID(HTREEITEM hItem) const;\n\n \n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `hItem`|A handle of a tree-view item in the control. For more information, see the `hItem` member of the [TVITEMEX](http://msdn.microsoft.com/library/windows/desktop/bb773459) structure.|  \n  \n### Return Value  \n The accessibility identifier that corresponds to the `hItem` parameter.  \n  \n### Remarks  \n Accessibility aids are applications that help people with disabilities use computers. An accessibility identifier is used by the `IAccessible` interface to uniquely specify an element in a window. For more information about accessibility identifiers, search for the \"About Active Accessibility Support\" topic at [Microsoft Developer Network](http://go.microsoft.com/fwlink/linkid=56322).  \n  \n This method sends the [TVM_MAPHTREEITEMTOACCID](http://msdn.microsoft.com/library/windows/desktop/bb773735) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n The following code example defines a variable, `m_treeCtrl`, that is used to access the current tree-view control. The code example also defines an unsigned integer and several HTREEITEM variables. These variables are used in the next example.  \n  \n [!code-cpp[NVC_MFC_CTreeCtrl_s1#1](../../mfc/reference/codesnippet/cpp/ctreectrl-class_17.h)]  \n  \n### Example  \n The following code example obtains an identification number for a tree-view control item. In an earlier section of the code example, which is not shown, we created a tree-view that consists of a root country/region node for the United States, subnodes for the states of Pennsylvania and Washington, and tree items for cities in those states. This code example obtains a unique identification number for the root country/region node.  \n  \n [!code-cpp[NVC_MFC_CTreeCtrl_s1#2](../../mfc/reference/codesnippet/cpp/ctreectrl-class_31.cpp)]  \n  \n##  <a name=\"ctreectrl__select\"></a>  CTreeCtrl::Select  \n Call this function to select the given tree view item, scroll the item into view, or redraw the item in the style used to indicate the target of a drag-and-drop operation.  \n  \n```  \nBOOL Select(\n    HTREEITEM hItem,  \n    UINT nCode);\n```  \n  \n### Parameters  \n `hItem`  \n Handle of a tree item.  \n  \n `nCode`  \n The type of action to take. This parameter can be one of the following values:  \n  \n- `TVGN_CARET` Sets the selection to the given item.  \n  \n- `TVGN_DROPHILITE` Redraws the given item in the style used to indicate the target of a drag-and-drop operation.  \n  \n- `TVGN_FIRSTVISIBLE` Scrolls the tree view vertically so that the given item is the first visible item.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n If `nCode` contains the value `TVGN_CARET`, the parent window receives the **TVN_SELCHANGING** and **TVN_SELCHANGED** notification messages. In addition, if the specified item is the child of a collapsed parent item, the parent's list of child items is expanded to reveal the specified item. In this case, the parent window receives the **TVN_ITEMEXPANDING** and **TVN_ITEMEXPANDED** notification messages.  \n  \n### Example  \n  See the example for [CTreeCtrl::HitTest](#ctreectrl__hittest).  \n  \n##  <a name=\"ctreectrl__selectdroptarget\"></a>  CTreeCtrl::SelectDropTarget  \n Call this function to redraw the item in the style used to indicate the target of a drag-and-drop operation.  \n  \n```  \nBOOL SelectDropTarget(HTREEITEM hItem);\n```  \n  \n### Parameters  \n `hItem`  \n Handle of a tree item.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#9](../../mfc/reference/codesnippet/cpp/ctreectrl-class_9.cpp)]  \n  \n##  <a name=\"ctreectrl__selectitem\"></a>  CTreeCtrl::SelectItem  \n Call this function to select the given tree view item.  \n  \n```  \nBOOL SelectItem(HTREEITEM hItem);\n```  \n  \n### Parameters  \n `hItem`  \n Handle of a tree item.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n If `hItem` is **NULL**, then this function selects no item.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#26](../../mfc/reference/codesnippet/cpp/ctreectrl-class_29.cpp)]  \n  \n##  <a name=\"ctreectrl__selectsetfirstvisible\"></a>  CTreeCtrl::SelectSetFirstVisible  \n Call this function to scroll the tree view vertically so that the given item is the first visible item.  \n  \n```  \nBOOL SelectSetFirstVisible(HTREEITEM hItem);\n```  \n  \n### Parameters  \n `hItem`  \n Handle of the tree item to be set as the first visible item.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n The function sends a message to the window with the `TVM_SELECTITEM` and `TVGN_FIRSTVISIBLE` message parameters.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#28](../../mfc/reference/codesnippet/cpp/ctreectrl-class_32.cpp)]  \n  \n##  <a name=\"ctreectrl__setautoscrollinfo\"></a>  CTreeCtrl::SetAutoscrollInfo  \n Sets the autoscroll rate of the current tree-view control.  \n  \n```  \nBOOL SetAutoscrollInfo(\n    UINT uPixelsPerSec,   \n    UINT uUpdateTime);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `uPixelsPerSec`|The number of pixels per second to scroll.|  \n|[in] `uUpdateTime`|The time interval between updates of the control.|  \n  \n### Return Value  \n Always returns `true`.  \n  \n### Remarks  \n The autoscroll parameters are used to scroll into view an item that is currently not visible. The tree-view control must have the `TVS_EX_AUTOHSCROLL` extended style, which is described in [Tree-View Control Extended Styles](http://msdn.microsoft.com/library/windows/desktop/bb759981).  \n  \n This method sends the [TVM_SETAUTOSCROLLINFO](http://msdn.microsoft.com/library/windows/desktop/bb773738) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n The following code example defines a variable, `m_treeCtrl`, that is used to access the current tree-view control. The code example also defines an unsigned integer and several HTREEITEM variables. These variables are used in the next example.  \n  \n [!code-cpp[NVC_MFC_CTreeCtrl_s1#1](../../mfc/reference/codesnippet/cpp/ctreectrl-class_17.h)]  \n  \n### Example  \n The following code example sets the autoscroll behavior of the current tree-view control. In an earlier section of the code example, which is not shown, we created a tree-view that consists of a root country/region node for the United States, subnodes for the states of Pennsylvania and Washington, and tree items for cities in those states. We intentionally made the tree-view control narrow so that it must automatically scroll to display the tree item that has the focus. The code example sets the tree-view control to automatically scroll 30 pixels per second every 5 seconds until the tree item is in view.  \n  \n [!code-cpp[NVC_MFC_CTreeCtrl_s1#4](../../mfc/reference/codesnippet/cpp/ctreectrl-class_33.cpp)]  \n  \n##  <a name=\"ctreectrl__setbkcolor\"></a>  CTreeCtrl::SetBkColor  \n This member function implements the behavior of the Win32 message [TVM_SETBKCOLOR](http://msdn.microsoft.com/library/windows/desktop/bb773741), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n```  \nCOLORREF SetBkColor(COLORREF clr);\n```  \n  \n### Parameters  \n `clr`  \n A **COLORREF** value that contains the new background color. If this value is -1, the control will revert to using the system color for the background color.  \n  \n### Return Value  \n A **COLORREF** value that represents the current text color. If this value is -1, the control is using the system color for the text color.  \n  \n### Example  \n  See the example for [CTreeCtrl::SetTextColor](#ctreectrl__settextcolor).  \n  \n##  <a name=\"ctreectrl__setcheck\"></a>  CTreeCtrl::SetCheck  \n Call this member function to set the check state for a tree control item.  \n  \n```  \nBOOL SetCheck(\n    HTREEITEM hItem,  \n    BOOL fCheck = TRUE);\n```  \n  \n### Parameters  \n `hItem`  \n The **HTREEITEM** to receive the check state change.  \n  \n `fCheck`  \n Indicates whether the tree control item is to be checked or unchecked. By default, `SetCheck` sets the item to be checked.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n When the tree control item is checked ( `fCheck` set to **TRUE**), the item appears with an adjacent checkmark.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#29](../../mfc/reference/codesnippet/cpp/ctreectrl-class_34.cpp)]  \n  \n### Example  \n To use checkboxes, set TVS_CHECKBOXES before populating the tree control.  \n  \n [!code-cpp[NVC_MFC_CTreeCtrl#30](../../mfc/reference/codesnippet/cpp/ctreectrl-class_35.cpp)]  \n  \n##  <a name=\"ctreectrl__setextendedstyle\"></a>  CTreeCtrl::SetExtendedStyle  \n Sets the extended styles for the current tree-view control.  \n  \n```  \nDWORD SetExtendedStyle(\n    DWORD dwExMask,   \n    DWORD dwExStyles);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `dwExMask`|A bitmask that specifies which styles in the current tree-view control are affected by this method. If this parameter is zero, it is ignored and the value of the `dwExStyles` parameter is assigned to the tree-view control.<br /><br /> Specify zero or a bitwise combination (OR) of styles described in [Tree-View Control Extended Styles](http://msdn.microsoft.com/library/windows/desktop/bb759981).|  \n|[in] `dwExStyles`|A bitmask that specifies which styles in the current tree-view control to set or clear.<br /><br /> To set a combination of styles, specify a bitwise combination (OR) of styles described in [Tree-View Control Extended Styles](http://msdn.microsoft.com/library/windows/desktop/bb759981). To clear a set of styles, specify zero.|  \n  \n### Return Value  \n A value that contains the previous extended control styles.  \n  \n### Remarks  \n This method clears the styles specified in the `dwExMask` parameter, then sets the styles specified in the `dwExStyles` parameter. Only the extended styles that correspond to the bits in `dwExMask` change.  \n  \n This method sends the [TVM_SETEXTENDEDSTYLE](http://msdn.microsoft.com/library/windows/desktop/bb773744) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n The following code example defines a variable, `m_treeCtrl`, that is used to access the current tree-view control. The code example also defines an unsigned integer and several HTREEITEM variables. These variables are used in the next example.  \n  \n [!code-cpp[NVC_MFC_CTreeCtrl_s1#1](../../mfc/reference/codesnippet/cpp/ctreectrl-class_17.h)]  \n  \n### Example  \n The following code example adds the `TVS_EX_AUTOHSCROLL` extended style to the current tree-view control. In an earlier section of the code example, which is not shown, we created a tree-view that consists of a root country/region node for the United States, subnodes for the states of Pennsylvania and Washington, and tree items for cities in those states. We intentionally made the tree-view control narrow so that it must automatically scroll to display the tree item that has the focus.  \n  \n [!code-cpp[NVC_MFC_CTreeCtrl_s1#3](../../mfc/reference/codesnippet/cpp/ctreectrl-class_36.cpp)]  \n  \n##  <a name=\"ctreectrl__setimagelist\"></a>  CTreeCtrl::SetImageList  \n Call this function to set the normal or state image list for a tree view control and redraw the control using the new images.  \n  \n```  \nCImageList* SetImageList(\n    CImageList* pImageList,  \n    int nImageListType);\n```  \n  \n### Parameters  \n `pImageList`  \n Pointer to the image list to assign. If `pImageList` is **NULL**, all images are removed from the tree view control.  \n  \n `nImageListType`  \n Type of image list to set. The image list can be one of the following values:  \n  \n- `TVSIL_NORMAL` Sets the normal image list, which contains the selected and nonselected images for the tree view item. You must use this state for overlay images.  \n  \n- `TVSIL_STATE` Sets the state image list, which contains the images for tree view items that are in a user-defined state.  \n  \n### Return Value  \n Pointer to the previous image list, if any; otherwise **NULL**.  \n  \n### Example  \n  See the example for [CTreeCtrl::GetImageList](#ctreectrl__getimagelist).  \n  \n##  <a name=\"ctreectrl__setindent\"></a>  CTreeCtrl::SetIndent  \n Call this function to set the width of indentation for a tree view control and redraw the control to reflect the new width.  \n  \n```  \nvoid SetIndent(UINT nIndent);\n```  \n  \n### Parameters  \n `nIndent`  \n Width, in pixels, of the indentation. If `nIndent` is less than the system-defined minimum width, the new width is set to the system-defined minimum.  \n  \n### Example  \n  See the example for [CTreeCtrl::GetIndent](#ctreectrl__getindent).  \n  \n##  <a name=\"ctreectrl__setinsertmark\"></a>  CTreeCtrl::SetInsertMark  \n This member function implements the behavior of the Win32 message [TVM_SETINSERTMARK](http://msdn.microsoft.com/library/windows/desktop/bb773753), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n```  \nBOOL SetInsertMark(\n    HTREEITEM hItem,  \n    BOOL fAfter = TRUE);\n```  \n  \n### Parameters  \n `hItem`  \n **HTREEITEM** that specifies at which item the insertion mark will be placed. If this argument is **NULL**, the insertion mark is removed.  \n  \n *fAfter*  \n **BOOL** value that specifies if the insertion mark is placed before or after the specified item. If this argument is nonzero, the insertion mark will be placed after the item. If this argument is zero, the insertion mark will be placed before the item.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#31](../../mfc/reference/codesnippet/cpp/ctreectrl-class_37.cpp)]  \n  \n##  <a name=\"ctreectrl__setinsertmarkcolor\"></a>  CTreeCtrl::SetInsertMarkColor  \n This member function implements the behavior of the Win32 message [TVM_SETINSERTMARKCOLOR](http://msdn.microsoft.com/library/windows/desktop/bb773755), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n```  \nCOLORREF SetInsertMarkColor(COLORREF clrNew);\n```  \n  \n### Parameters  \n `clrNew`  \n A **COLORREF** value that contains the new insertion mark color.  \n  \n### Return Value  \n A **COLORREF** value that contains the previous insertion mark color.  \n  \n### Example  \n  See the example for [CTreeCtrl::GetInsertMarkColor](#ctreectrl__getinsertmarkcolor).  \n  \n##  <a name=\"ctreectrl__setitem\"></a>  CTreeCtrl::SetItem  \n Call this function to set the attributes of the specified tree view item.  \n  \n```  \nBOOL SetItem(\n    TVITEM* pItem);\n\n \nBOOL SetItem(\n    HTREEITEM hItem,  \n    UINT nMask,  \n    LPCTSTR lpszItem,  \n    int nImage,  \n    int nSelectedImage,  \n    UINT nState,  \n    UINT nStateMask,  \n    LPARAM lParam);\n```  \n  \n### Parameters  \n `pItem`  \n A pointer to a [TVITEM](http://msdn.microsoft.com/library/windows/desktop/bb773456) structure that contains the new item attributes, as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `hItem`  \n Handle of the item whose attributes are to be set. See the **hItem** member of the `TVITEM` structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `nMask`  \n Integer specifying which attributes to set. See the **mask** member of the `TVITEM` structure.  \n  \n `lpszItem`  \n Address of a string containing the item's text.  \n  \n `nImage`  \n Index of the item's image in the tree view control's image list. See the `iImage` member of the `TVITEM` structure.  \n  \n `nSelectedImage`  \n Index of the item's selected image in the tree view control's image list. See the **iSelectedImage** member of the `TVITEM` structure.  \n  \n `nState`  \n Specifies values for the item's states. See the **State** member of the `TVITEM` structure.  \n  \n `nStateMask`  \n Specifies which states are to be set. See the **stateMask** member of the `TVITEM` structure.  \n  \n `lParam`  \n A 32-bit application-specific value associated with the item.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n In the `TVITEM` structure, the **hItem** member identifies the item, and the **mask** member specifies which attributes to set.  \n  \n If the **mask** member or the `nMask` parameter specifies the `TVIF_TEXT` value, the **pszText** member or the `lpszItem` is the address of a null-terminated string and the **cchTextMax** member is ignored. If **mask** (or `nMask`) specifies the `TVIF_STATE` value, the **stateMask** member or the `nStateMask` parameter specifies which item states to change and the **state** member or `nState` parameter contains the values for those states.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#32](../../mfc/reference/codesnippet/cpp/ctreectrl-class_38.cpp)]  \n  \n##  <a name=\"ctreectrl__setitemdata\"></a>  CTreeCtrl::SetItemData  \n Call this function to set the 32-bit application-specific value associated with the specified item.  \n  \n```  \nBOOL SetItemData(\n    HTREEITEM hItem,  \n    DWORD_PTR dwData);\n```  \n  \n### Parameters  \n `hItem`  \n Handle of the item whose data is to be retrieved.  \n  \n `dwData`  \n A 32-bit application-specific value associated with the item specified by `hItem`.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#33](../../mfc/reference/codesnippet/cpp/ctreectrl-class_39.cpp)]  \n  \n##  <a name=\"ctreectrl__setitemexpandedimageindex\"></a>  CTreeCtrl::SetItemExpandedImageIndex  \n Sets the index of the image to display when the specified item of the current tree-view control is in the expanded state.  \n  \n```  \nBOOL SetItemExpandedImageIndex(\n    HTREEITEM hItem,   \n    int iExpandedImage);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `hItem`|Handle to a tree-view control item.|  \n|[in] `iExpandedImage`|The index of the image to display when the specified item is in the expanded state.|  \n  \n### Return Value  \n `true` if this method is successful; otherwise, `false`.  \n  \n### Remarks  \n This method sends the [TVM_SETITEM](http://msdn.microsoft.com/library/windows/desktop/bb773758) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]. This method assigns the `iExpandedImage` parameter to the `iExpandedImage` member of a [TVITEMEX](http://msdn.microsoft.com/library/windows/desktop/bb773459) structure, and then uses that structure in the message.  \n  \n### Example  \n The following code example defines a variable, `m_treeCtrl`, that is used to access the current tree-view control. The code example also defines an unsigned integer and several HTREEITEM variables. These variables are used in the next example.  \n  \n [!code-cpp[NVC_MFC_CTreeCtrl_s1#1](../../mfc/reference/codesnippet/cpp/ctreectrl-class_17.h)]  \n  \n### Example  \n The following code example is a trivial test to determine whether the [CTreeCtrl::GetItemExpandedImageIndex](#ctreectrl__getitemexpandedimageindex) method returns the value set by the [CTreeCtrl::SetItemExpandedImageIndex](#ctreectrl__setitemexpandedimageindex) method. In an earlier section of the code example, which is not shown, we created a tree-view that consists of a root country/region node for the United States, subnodes for the states of Pennsylvania and Washington, and tree items for cities in those states.  \n  \n [!code-cpp[NVC_MFC_CTreeCtrl_s1#8](../../mfc/reference/codesnippet/cpp/ctreectrl-class_40.cpp)]  \n  \n##  <a name=\"ctreectrl__setitemheight\"></a>  CTreeCtrl::SetItemHeight  \n This member function implements the behavior of the Win32 message [TVM_SETITEMHEIGHT](http://msdn.microsoft.com/library/windows/desktop/bb773761), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n```  \nSHORT SetItemHeight(SHORT cyHeight);\n```  \n  \n### Parameters  \n `cyHeight`  \n Specifies the new height of every item in the tree view, in pixels. If this argument is less than the height of the images, then it will be set to the height of the images. If this argument is not even, it will be rounded down to the nearest even value. If this argument is -1, the control will revert to using its default item height.  \n  \n### Return Value  \n The previous height of the items, in pixels.  \n  \n### Example  \n  See the example for [CTreeCtrl::GetItemHeight](#ctreectrl__getitemheight).  \n  \n##  <a name=\"ctreectrl__setitemimage\"></a>  CTreeCtrl::SetItemImage  \n Associates images with an item.  \n  \n```  \nBOOL SetItemImage(\n    HTREEITEM hItem,  \n    int nImage,  \n    int nSelectedImage);\n```  \n  \n### Parameters  \n `hItem`  \n Handle of the item whose image is to be set.  \n  \n `nImage`  \n Index of the item's image in the tree view control's image list.  \n  \n `nSelectedImage`  \n Index of the item's selected image in the tree view control's image list.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n Each item in a tree view control can have a pair of bitmapped images associated with it. The images appear on the left side of an item's label. One image is displayed when the item is selected, and the other is displayed when the item is not selected. For example, an item might display an open folder when it is selected and a closed folder when it is not selected.  \n  \n Call this function to set the index of the item's image and its selected image within the tree view control's image list.  \n  \n For more information on images, see [CImageList](../../mfc/reference/cimagelist-class.md).  \n  \n### Example  \n  See the example for [CTreeCtrl::GetItemImage](#ctreectrl__getitemimage).  \n  \n##  <a name=\"ctreectrl__setitemstate\"></a>  CTreeCtrl::SetItemState  \n Sets the state of the item specified by `hItem`.  \n  \n```  \nBOOL SetItemState(\n    HTREEITEM hItem,  \n    UINT nState,  \n    UINT nStateMask);\n```  \n  \n### Parameters  \n `hItem`  \n Handle of the item whose state is to be set.  \n  \n `nState`  \n Specifies new states for the item.  \n  \n `nStateMask`  \n Specifies which states are to be changed.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n For information on states, see [CTreeCtrl::GetItem](#ctreectrl__getitem).  \n  \n### Example  \n  See the example for [CTreeCtrl::GetItemState](#ctreectrl__getitemstate).  \n  \n##  <a name=\"ctreectrl__setitemstateex\"></a>  CTreeCtrl::SetItemStateEx  \n Sets the extended state of the specified item in the current tree-view control.  \n  \n```  \nBOOL SetItemStateEx(\n    HTREEITEM hItem,   \n    UINT uStateEx);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `hItem`|Handle to a tree-view control item.|  \n|[in] `uStateEx`|The extended state of the item. For more information, see the `uStateEx` member of the [TVITEMEX](http://msdn.microsoft.com/library/windows/desktop/bb773459) structure.|  \n  \n### Return Value  \n `true` if this method is successful; otherwise, `false`.  \n  \n### Remarks  \n This method sends the [TVM_SETITEM](http://msdn.microsoft.com/library/windows/desktop/bb773758) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]. This method assigns the `uStateEx` parameter to the `uStateEx` member of a [TVITEMEX](http://msdn.microsoft.com/library/windows/desktop/bb773459) structure, and then uses that structure in the message.  \n  \n### Example  \n The following code example defines a variable, `m_treeCtrl`, that is used to access the current tree-view control. The code example also defines an unsigned integer and several HTREEITEM variables. These variables are used in the next example.  \n  \n [!code-cpp[NVC_MFC_CTreeCtrl_s1#1](../../mfc/reference/codesnippet/cpp/ctreectrl-class_17.h)]  \n  \n### Example  \n The following code example sets a tree-view item to disabled state. In an earlier section of the code example, which is not shown, we created a tree-view that consists of a root country/region node for the United States, subnodes for the states of Pennsylvania and Washington, and tree items for cities in those states. This code example sets the Pennsylvania node to disabled state.  \n  \n [!code-cpp[NVC_MFC_CTreeCtrl_s1#7](../../mfc/reference/codesnippet/cpp/ctreectrl-class_41.cpp)]  \n  \n##  <a name=\"ctreectrl__setitemtext\"></a>  CTreeCtrl::SetItemText  \n Sets the text of the item specified by `hItem`.  \n  \n```  \nBOOL SetItemText(\n    HTREEITEM hItem,  \n    LPCTSTR lpszItem);\n```  \n  \n### Parameters  \n `hItem`  \n Handle of the item whose text is to be set.  \n  \n `lpszItem`  \n Address of a string containing the new text for the item  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#34](../../mfc/reference/codesnippet/cpp/ctreectrl-class_42.cpp)]  \n  \n##  <a name=\"ctreectrl__setlinecolor\"></a>  CTreeCtrl::SetLineColor  \n Call this member function to set the current line color for the tree view control.  \n  \n```  \nCOLORREF SetLineColor(COLORREF clrNew = CLR_DEFAULT);\n```  \n  \n### Parameters  \n `clrNew`  \n The new line color.  \n  \n### Return Value  \n The previous line color.  \n  \n### Remarks  \n This member function implements the behavior of the win32 message [TVM_SETLINECOLOR](http://msdn.microsoft.com/library/windows/desktop/bb773764), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#35](../../mfc/reference/codesnippet/cpp/ctreectrl-class_43.cpp)]  \n  \n##  <a name=\"ctreectrl__setscrolltime\"></a>  CTreeCtrl::SetScrollTime  \n Call this member function to set the maximum scroll time for the tree view control.  \n  \n```  \nUINT SetScrollTime(UINT uScrollTime);\n```  \n  \n### Parameters  \n *uScrollTime*  \n The new maximum scroll time, in milliseconds. If this value is less than 100, it will be rounded up to 100.  \n  \n### Return Value  \n The previous maximum scroll time, in milliseconds.  \n  \n### Remarks  \n This member function implements the behavior of the win32 message [TVM_SETSCROLLTIME](http://msdn.microsoft.com/library/windows/desktop/bb773767), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctreectrl__settextcolor\"></a>  CTreeCtrl::SetTextColor  \n This member function implements the behavior of the Win32 message [TVM_SETTEXTCOLOR](http://msdn.microsoft.com/library/windows/desktop/bb773769), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n```  \nCOLORREF SetTextColor(COLORREF clr);\n```  \n  \n### Parameters  \n `clr`  \n A **COLORREF** value that contains the new text color. If this argument is -1, the control will revert to using the system color for the text color.  \n  \n### Return Value  \n A **COLORREF** value that represents the previous text color. If this value is -1, the control was using the system color for the text color.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#36](../../mfc/reference/codesnippet/cpp/ctreectrl-class_44.cpp)]  \n  \n##  <a name=\"ctreectrl__settooltips\"></a>  CTreeCtrl::SetToolTips  \n This member function implements the behavior of the Win32 message [TVM_SETTOOLTIPS](http://msdn.microsoft.com/library/windows/desktop/bb773772), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n```  \nCToolTipCtrl* SetToolTips(CToolTipCtrl* pWndTip);\n```  \n  \n### Parameters  \n `pWndTip`  \n A pointer to a [CToolTipCtrl](../../mfc/reference/ctooltipctrl-class.md) object that the tree control will use.  \n  \n### Return Value  \n A pointer to a [CToolTipCtrl](../../mfc/reference/ctooltipctrl-class.md) object containing the tooltip previously used by the control, or **NULL** if no tooltips were used previously.  \n  \n### Remarks  \n To use tooltips, indicate the **TVS_NOTOOLTIPS** style when you create the `CTreeCtrl` object.  \n  \n### Example  \n  See the example for [CTreeCtrl::GetToolTips](#ctreectrl__gettooltips).  \n  \n##  <a name=\"ctreectrl__showinfotip\"></a>  CTreeCtrl::ShowInfoTip  \n Displays the infotip for the specified item in the current tree-view control.  \n  \n```  \nvoid ShowInfoTip(HTREEITEM hItem);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `hItem`|A handle to a tree-view item in the control. For more information, see the `hItem` member of the [TVITEMEX](http://msdn.microsoft.com/library/windows/desktop/bb773459) structure.|  \n  \n### Remarks  \n For more information about the difference between tooltips and infotips, search for the \"Tooltips and Infotips\" topic at [Microsoft Developer Network](http://go.microsoft.com/fwlink/linkid=56322).  \n  \n This method sends the [TVM_SHOWINFOTIP](http://msdn.microsoft.com/library/windows/desktop/bb773779) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ctreectrl__sortchildren\"></a>  CTreeCtrl::SortChildren  \n Call this function to alphabetically sort the child items of the given parent item in a tree view control.  \n  \n```  \nBOOL SortChildren(HTREEITEM hItem);\n```  \n  \n### Parameters  \n `hItem`  \n Handle of the parent item whose child items are to be sorted. If `hItem` is **NULL**, sorting will proceed from the root of the tree.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n `SortChildren` will not recurse through the tree; only the immediate children of `hItem` will be sorted.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#37](../../mfc/reference/codesnippet/cpp/ctreectrl-class_45.cpp)]  \n  \n##  <a name=\"ctreectrl__sortchildrencb\"></a>  CTreeCtrl::SortChildrenCB  \n Call this function to sort tree view items using an application-defined callback function that compares the items.  \n  \n```  \nBOOL SortChildrenCB(LPTVSORTCB pSort);\n```  \n  \n### Parameters  \n *pSort*  \n Pointer to a [TVSORTCB](http://msdn.microsoft.com/library/windows/desktop/bb773462) structure.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n The structure's comparison function, **lpfnCompare**, must return a negative value if the first item should precede the second, a positive value if the first item should follow the second, or zero if the two items are equivalent.  \n  \n The `lParam1` and `lParam2` parameters correspond to the **lParam** member of the [TVITEM](http://msdn.microsoft.com/library/windows/desktop/bb773456) structure for the two items being compared. The `lParamSort` parameter corresponds to the **lParam** member of the `TV_SORTCB` structure.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CTreeCtrl#38](../../mfc/reference/codesnippet/cpp/ctreectrl-class_46.cpp)]  \n  \n [!code-cpp[NVC_MFC_CTreeCtrl#39](../../mfc/reference/codesnippet/cpp/ctreectrl-class_47.cpp)]  \n  \n## See Also  \n [MFC Sample CMNCTRL1](../../visual-cpp-samples.md)   \n [CWnd Class](../../mfc/reference/cwnd-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CImageList Class](../../mfc/reference/cimagelist-class.md)\n"}