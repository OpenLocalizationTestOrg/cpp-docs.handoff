{"nodes":[{"pos":[12,47],"content":"equal_to (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"equal_to (STL-CLR) | Microsoft Docs","pos":[0,35]}]},{"content":"equal_to (STL/CLR)","pos":[623,641]},{"content":"The template class describes a functor that, when called, returns true only if the first argument is equal to the second.","pos":[642,763]},{"content":"You use it specify a function object in terms of its argument type.","pos":[764,831]},{"content":"Syntax","pos":[840,846]},{"content":"Parameters","pos":[1417,1427]},{"content":"Arg","pos":[1431,1434]},{"content":"The type of the arguments.","pos":[1438,1464]},{"content":"Member Functions","pos":[1473,1489]},{"content":"Type Definition","pos":[1496,1511]},{"content":"Description","pos":[1512,1523]},{"content":"delegate_type","pos":[1572,1585]},{"content":"The type of the generic delegate.","pos":[1586,1619]},{"content":"first_argument_type","pos":[1624,1643]},{"content":"The type of the functor first argument.","pos":[1644,1683]},{"content":"result_type","pos":[1688,1699]},{"content":"The type of the functor result.","pos":[1700,1731]},{"content":"second_argument_type","pos":[1736,1756]},{"content":"The type of the functor second argument.","pos":[1757,1797]},{"content":"Member","pos":[1805,1811]},{"content":"Description","pos":[1812,1823]},{"content":"equal_to","pos":[1863,1871]},{"content":"Constructs the functor.","pos":[1872,1895]},{"content":"Operator","pos":[1903,1911]},{"content":"Description","pos":[1912,1923]},{"content":"operator()","pos":[1965,1975]},{"content":"Computes the desired function.","pos":[1976,2006]},{"content":"operator delegate_type^()","pos":[2011,2036]},{"content":"Casts the functor to a delegate.","pos":[2037,2069]},{"content":"Remarks","pos":[2079,2086]},{"content":"The template class describes a two-argument functor.","pos":[2090,2142]},{"content":"It defines the member operator <ph id=\"ph1\">`operator()`</ph> so that, when the object is called as a function, it returns true only if the first argument is equal to the second.","pos":[2143,2303],"source":" It defines the member operator `operator()` so that, when the object is called as a function, it returns true only if the first argument is equal to the second."},{"pos":[2310,2432],"content":"You can also pass the object as a function argument whose type is <ph id=\"ph1\">`delegate_type^`</ph> and it will be converted appropriately.","source":"You can also pass the object as a function argument whose type is `delegate_type^` and it will be converted appropriately."},{"content":"Example","pos":[2441,2448]},{"content":"Requirements","pos":[3469,3481]},{"pos":[3485,3517],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/functional&gt;","source":"**Header:** \\<cliext/functional>"},{"pos":[3524,3545],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[3554,3562]},{"content":"not_equal_to (STL/CLR)","pos":[3567,3589]}],"content":"---\ntitle: \"equal_to (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::equal_to\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"equal_to function [STL/CLR]\"\nms.assetid: 9dd6e27d-e695-470f-b7a7-19a6db970ee5\ncaps.latest.revision: 18\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# equal_to (STL/CLR)\nThe template class describes a functor that, when called, returns true only if the first argument is equal to the second. You use it specify a function object in terms of its argument type.  \n  \n## Syntax  \n  \n```  \ntemplate<typename Arg>  \n    ref class equal_to  \n    { // wrap operator()  \npublic:  \n    typedef Arg first_argument_type;  \n    typedef Arg second_argument_type;  \n    typedef bool result_type;  \n    typedef Microsoft::VisualC::StlClr::BinaryDelegate<  \n        first_argument_type, second_argument_type, result_type>  \n        delegate_type;  \n  \n    equal_to();  \n    equal_to(equal_to<Arg>% right);  \n  \n    result_type operator()(first_argument_type left,  \n        second_argument_type right);  \n    operator delegate_type^();  \n    };  \n```  \n  \n#### Parameters  \n Arg  \n The type of the arguments.  \n  \n## Member Functions  \n  \n|Type Definition|Description|  \n|---------------------|-----------------|  \n|delegate_type|The type of the generic delegate.|  \n|first_argument_type|The type of the functor first argument.|  \n|result_type|The type of the functor result.|  \n|second_argument_type|The type of the functor second argument.|  \n  \n|Member|Description|  \n|------------|-----------------|  \n|equal_to|Constructs the functor.|  \n  \n|Operator|Description|  \n|--------------|-----------------|  \n|operator()|Computes the desired function.|  \n|operator delegate_type^()|Casts the functor to a delegate.|  \n  \n## Remarks  \n The template class describes a two-argument functor. It defines the member operator `operator()` so that, when the object is called as a function, it returns true only if the first argument is equal to the second.  \n  \n You can also pass the object as a function argument whose type is `delegate_type^` and it will be converted appropriately.  \n  \n## Example  \n  \n```  \n// cliext_equal_to.cpp   \n// compile with: /clr   \n#include <cliext/algorithm>   \n#include <cliext/functional>   \n#include <cliext/vector>   \n  \ntypedef cliext::vector<int> Myvector;   \nint main()   \n    {   \n    Myvector c1;   \n    c1.push_back(4);   \n    c1.push_back(3);   \n    Myvector c2;   \n    c2.push_back(4);   \n    c2.push_back(4);   \n    Myvector c3(2, 0);   \n  \n// display initial contents \" 4 3\" and \" 4 4\"   \n    for each (int elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n    for each (int elem in c2)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// transform and display   \n    cliext::transform(c1.begin(), c1.begin() + 2,   \n        c2.begin(), c3.begin(), cliext::equal_to<int>());   \n    for each (int elem in c3)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n4 3  \n4 4  \n1 0  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/functional>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [not_equal_to (STL/CLR)](../dotnet/not-equal-to-stl-clr.md)"}