{"nodes":[{"pos":[12,45],"content":"fseek, _fseeki64 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"fseek, _fseeki64 | Microsoft Docs","pos":[0,33]}]},{"pos":[1036,1052],"content":"fseek, _fseeki64","linkify":"fseek, _fseeki64","nodes":[{"content":"fseek, _fseeki64","pos":[0,16]}]},{"content":"Moves the file pointer to a specified location.","pos":[1053,1100]},{"pos":[1109,1115],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1294,1304],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to <ph id=\"ph1\">`FILE`</ph> structure.","pos":[1320,1348],"source":" Pointer to `FILE` structure."},{"content":"Number of bytes from <ph id=\"ph1\">`origin`</ph>.","pos":[1367,1397],"source":" Number of bytes from `origin`."},{"content":"Initial position.","pos":[1416,1433]},{"pos":[1442,1454],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If successful, <ph id=\"ph1\">`fseek`</ph> and <ph id=\"ph2\">`_fseeki64`</ph> returns 0.","pos":[1458,1507],"source":"If successful, `fseek` and `_fseeki64` returns 0."},{"content":"Otherwise, it returns a nonzero value.","pos":[1508,1546]},{"content":"On devices incapable of seeking, the return value is undefined.","pos":[1547,1610]},{"content":"If <ph id=\"ph1\">`stream`</ph> is a null pointer, or if <ph id=\"ph2\">`origin`</ph> is not one of allowed values described below, <ph id=\"ph3\">`fseek`</ph> and <ph id=\"ph4\">`_fseeki64`</ph> invoke the invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[1611,1853],"source":" If `stream` is a null pointer, or if `origin` is not one of allowed values described below, `fseek` and `_fseeki64` invoke the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and return -1.","pos":[1854,1945],"source":" If execution is allowed to continue, these functions set `errno` to `EINVAL` and return -1."},{"pos":[1954,1961],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`fseek`</ph> and <ph id=\"ph2\">`_fseeki64`</ph> functions moves the file pointer (if any) associated with <ph id=\"ph3\">`stream`</ph> to a new location that is <ph id=\"ph4\">`offset`</ph> bytes from <ph id=\"ph5\">`origin`</ph><bpt id=\"p1\">*</bpt>.<ept id=\"p1\">*</ept>","pos":[1965,2117],"source":"The `fseek` and `_fseeki64` functions moves the file pointer (if any) associated with `stream` to a new location that is `offset` bytes from `origin`*.*"},{"content":"The next operation on the stream takes place at the new location.","pos":[2118,2183]},{"content":"On a stream open for update, the next operation can be either a read or a write.","pos":[2184,2264]},{"content":"The argument origin must be one of the following constants, defined in STDIO.H:","pos":[2265,2344]},{"content":"Current position of file pointer.","pos":[2365,2398]},{"content":"End of file.","pos":[2419,2431]},{"content":"Beginning of file.","pos":[2452,2470]},{"content":"You can use <ph id=\"ph1\">`fseek`</ph> and <ph id=\"ph2\">`_fseeki64`</ph> to reposition the pointer anywhere in a file.","pos":[2477,2558],"source":"You can use `fseek` and `_fseeki64` to reposition the pointer anywhere in a file."},{"content":"The pointer can also be positioned beyond the end of the file.","pos":[2559,2621]},{"content":"<ph id=\"ph1\">`fseek`</ph> and <ph id=\"ph2\">`_fseeki64`</ph>clears the end-of-file indicator and negates the effect of any prior <ph id=\"ph3\">`ungetc`</ph> calls against <ph id=\"ph4\">`stream`</ph>.","pos":[2622,2746],"source":"`fseek` and `_fseeki64`clears the end-of-file indicator and negates the effect of any prior `ungetc` calls against `stream`."},{"content":"When a file is opened for appending data, the current file position is determined by the last I/O operation, not by where the next write would occur.","pos":[2753,2902]},{"content":"If no I/O operation has yet occurred on a file opened for appending, the file position is the start of the file.","pos":[2903,3015]},{"content":"For streams opened in text mode, <ph id=\"ph1\">`fseek`</ph> and <ph id=\"ph2\">`_fseeki64`</ph>have limited use, because carriage return–linefeed translations can cause <ph id=\"ph3\">`fseek`</ph> and <ph id=\"ph4\">`_fseeki64`</ph>to produce unexpected results.","pos":[3022,3205],"source":"For streams opened in text mode, `fseek` and `_fseeki64`have limited use, because carriage return–linefeed translations can cause `fseek` and `_fseeki64`to produce unexpected results."},{"content":"The only <ph id=\"ph1\">`fseek`</ph> and <ph id=\"ph2\">`_fseeki64`</ph>operations guaranteed to work on streams opened in text mode are:","pos":[3206,3303],"source":" The only `fseek` and `_fseeki64`operations guaranteed to work on streams opened in text mode are:"},{"content":"Seeking with an offset of 0 relative to any of the origin values.","pos":[3313,3378]},{"pos":[3388,3534],"content":"Seeking from the beginning of the file with an offset value returned from a call to <ph id=\"ph1\">`ftell`</ph> when using <ph id=\"ph2\">`fseek`</ph>or <ph id=\"ph3\">`_ftelli64`</ph>when using<ph id=\"ph4\">`_fseeki64`</ph>.","source":"Seeking from the beginning of the file with an offset value returned from a call to `ftell` when using `fseek`or `_ftelli64`when using`_fseeki64`."},{"content":"Also in text mode, CTRL+Z is interpreted as an end-of-file character on input.","pos":[3541,3619]},{"content":"In files opened for reading/writing, <ph id=\"ph1\">`fopen`</ph> and all related routines check for a CTRL+Z at the end of the file and remove it if possible.","pos":[3620,3758],"source":" In files opened for reading/writing, `fopen` and all related routines check for a CTRL+Z at the end of the file and remove it if possible."},{"content":"This is done because using the combination of <ph id=\"ph1\">`fseek`</ph> and <ph id=\"ph2\">`ftell`</ph>or<ph id=\"ph3\">`_fseeki64`</ph> and <ph id=\"ph4\">`_ftelli64`</ph>, to move within a file that ends with a CTRL+Z may cause <ph id=\"ph5\">`fseek`</ph> or <ph id=\"ph6\">`_fseeki64`</ph> to behave improperly near the end of the file.","pos":[3759,3980],"source":" This is done because using the combination of `fseek` and `ftell`or`_fseeki64` and `_ftelli64`, to move within a file that ends with a CTRL+Z may cause `fseek` or `_fseeki64` to behave improperly near the end of the file."},{"content":"When the CRT opens a file that begins with a Byte Order Mark (BOM), the file pointer is positioned after the BOM (that is, at the start of the file's actual content).","pos":[3987,4153]},{"content":"If you have to <ph id=\"ph1\">`fseek`</ph> to the beginning of the file, use <ph id=\"ph2\">`ftell`</ph> to get the initial position and <ph id=\"ph3\">`fseek`</ph> to it rather than to position 0.","pos":[4154,4291],"source":" If you have to `fseek` to the beginning of the file, use `ftell` to get the initial position and `fseek` to it rather than to position 0."},{"content":"This function locks out other threads during execution and is therefore thread-safe.","pos":[4298,4382]},{"content":"For a non-locking version, see <bpt id=\"p1\">[</bpt>_fseek_nolock, _fseeki64_nolock<ept id=\"p1\">](../../c-runtime-library/reference/fseek-nolock-fseeki64-nolock.md)</ept>.","pos":[4383,4515],"source":" For a non-locking version, see [_fseek_nolock, _fseeki64_nolock](../../c-runtime-library/reference/fseek-nolock-fseeki64-nolock.md)."},{"pos":[4524,4536],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Function","pos":[4543,4551]},{"content":"Required header","pos":[4552,4567]},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt;","pos":[4621,4631],"source":"\\<stdio.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt;","pos":[4648,4658],"source":"\\<stdio.h>"},{"pos":[4666,4790],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[4799,4806],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5686,5711],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[5721,5832],"content":"<bpt id=\"p1\">[</bpt>System::IO::FileStream::Position<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.io.filestream.position.aspx)</ept>","source":"[System::IO::FileStream::Position](https://msdn.microsoft.com/en-us/library/system.io.filestream.position.aspx)"},{"pos":[5842,5945],"content":"<bpt id=\"p1\">[</bpt>System::IO::FileStream::Seek<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.io.filestream.seek.aspx)</ept>","source":"[System::IO::FileStream::Seek](https://msdn.microsoft.com/en-us/library/system.io.filestream.seek.aspx)"},{"pos":[5954,5962],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Stream I/O<ept id=\"p1\">](../../c-runtime-library/stream-i-o.md)</ept><ph id=\"ph1\"> </ph>","pos":[5966,6018],"source":"[Stream I/O](../../c-runtime-library/stream-i-o.md) "},{"content":"<bpt id=\"p1\"> [</bpt>fopen, _wfopen<ept id=\"p1\">](../../c-runtime-library/reference/fopen-wfopen.md)</ept><ph id=\"ph1\"> </ph>","pos":[6021,6090],"source":" [fopen, _wfopen](../../c-runtime-library/reference/fopen-wfopen.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ftell, _ftelli64<ept id=\"p1\">](../../c-runtime-library/reference/ftell-ftelli64.md)</ept><ph id=\"ph1\"> </ph>","pos":[6093,6166],"source":" [ftell, _ftelli64](../../c-runtime-library/reference/ftell-ftelli64.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_lseek, _lseeki64<ept id=\"p1\">](../../c-runtime-library/reference/lseek-lseeki64.md)</ept><ph id=\"ph1\"> </ph>","pos":[6169,6243],"source":" [_lseek, _lseeki64](../../c-runtime-library/reference/lseek-lseeki64.md) "},{"content":"<bpt id=\"p1\"> [</bpt>rewind<ept id=\"p1\">](../../c-runtime-library/reference/rewind.md)</ept>","pos":[6246,6300],"source":" [rewind](../../c-runtime-library/reference/rewind.md)"}],"content":"---\ntitle: \"fseek, _fseeki64 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_fseeki64\"\n  - \"fseek\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"fseek\"\n  - \"_fseeki64\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_fseeki64 function\"\n  - \"fseeki64 function\"\n  - \"fseek function\"\n  - \"file pointers [C++], moving\"\n  - \"file pointers [C++]\"\n  - \"seek file pointers\"\nms.assetid: f6bb1f8b-891c-426e-9e14-0e7e5c62df70\ncaps.latest.revision: 23\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# fseek, _fseeki64\nMoves the file pointer to a specified location.  \n  \n## Syntax  \n  \n```  \nint fseek(   \n   FILE *stream,  \n   long offset,  \n   int origin   \n);  \nint _fseeki64(   \n   FILE *stream,  \n   __int64 offset,  \n   int origin   \n);  \n```  \n  \n#### Parameters  \n `stream`  \n Pointer to `FILE` structure.  \n  \n `offset`  \n Number of bytes from `origin`.  \n  \n `origin`  \n Initial position.  \n  \n## Return Value  \n If successful, `fseek` and `_fseeki64` returns 0. Otherwise, it returns a nonzero value. On devices incapable of seeking, the return value is undefined. If `stream` is a null pointer, or if `origin` is not one of allowed values described below, `fseek` and `_fseeki64` invoke the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions set `errno` to `EINVAL` and return -1.  \n  \n## Remarks  \n The `fseek` and `_fseeki64` functions moves the file pointer (if any) associated with `stream` to a new location that is `offset` bytes from `origin`*.* The next operation on the stream takes place at the new location. On a stream open for update, the next operation can be either a read or a write. The argument origin must be one of the following constants, defined in STDIO.H:  \n  \n `SEEK_CUR`  \n Current position of file pointer.  \n  \n `SEEK_END`  \n End of file.  \n  \n `SEEK_SET`  \n Beginning of file.  \n  \n You can use `fseek` and `_fseeki64` to reposition the pointer anywhere in a file. The pointer can also be positioned beyond the end of the file. `fseek` and `_fseeki64`clears the end-of-file indicator and negates the effect of any prior `ungetc` calls against `stream`.  \n  \n When a file is opened for appending data, the current file position is determined by the last I/O operation, not by where the next write would occur. If no I/O operation has yet occurred on a file opened for appending, the file position is the start of the file.  \n  \n For streams opened in text mode, `fseek` and `_fseeki64`have limited use, because carriage return–linefeed translations can cause `fseek` and `_fseeki64`to produce unexpected results. The only `fseek` and `_fseeki64`operations guaranteed to work on streams opened in text mode are:  \n  \n-   Seeking with an offset of 0 relative to any of the origin values.  \n  \n-   Seeking from the beginning of the file with an offset value returned from a call to `ftell` when using `fseek`or `_ftelli64`when using`_fseeki64`.  \n  \n Also in text mode, CTRL+Z is interpreted as an end-of-file character on input. In files opened for reading/writing, `fopen` and all related routines check for a CTRL+Z at the end of the file and remove it if possible. This is done because using the combination of `fseek` and `ftell`or`_fseeki64` and `_ftelli64`, to move within a file that ends with a CTRL+Z may cause `fseek` or `_fseeki64` to behave improperly near the end of the file.  \n  \n When the CRT opens a file that begins with a Byte Order Mark (BOM), the file pointer is positioned after the BOM (that is, at the start of the file's actual content). If you have to `fseek` to the beginning of the file, use `ftell` to get the initial position and `fseek` to it rather than to position 0.  \n  \n This function locks out other threads during execution and is therefore thread-safe. For a non-locking version, see [_fseek_nolock, _fseeki64_nolock](../../c-runtime-library/reference/fseek-nolock-fseeki64-nolock.md).  \n  \n## Requirements  \n  \n|Function|Required header|  \n|--------------|---------------------|  \n|`fseek`|\\<stdio.h>|  \n|`_fseeki64`|\\<stdio.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_fseek.c  \n// This program opens the file FSEEK.OUT and  \n// moves the pointer to the file's beginning.  \n  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   FILE *stream;  \n   char line[81];  \n   int  result;  \n  \n   if ( fopen_s( &stream, \"fseek.out\", \"w+\" ) != 0 )  \n   {  \n      printf( \"The file fseek.out was not opened\\n\" );  \n      return -1;  \n   }  \n   fprintf( stream, \"The fseek begins here: \"  \n                    \"This is the file 'fseek.out'.\\n\" );  \n   result = fseek( stream, 23L, SEEK_SET);  \n   if( result )  \n      perror( \"Fseek failed\" );  \n   else  \n   {  \n      printf( \"File pointer is set to middle of first line.\\n\" );  \n      fgets( line, 80, stream );  \n      printf( \"%s\", line );  \n    }  \n   fclose( stream );  \n}  \n```  \n  \n```Output  \nFile pointer is set to middle of first line.  \nThis is the file 'fseek.out'.  \n```  \n  \n## .NET Framework Equivalent  \n  \n-   [System::IO::FileStream::Position](https://msdn.microsoft.com/en-us/library/system.io.filestream.position.aspx)  \n  \n-   [System::IO::FileStream::Seek](https://msdn.microsoft.com/en-us/library/system.io.filestream.seek.aspx)  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [fopen, _wfopen](../../c-runtime-library/reference/fopen-wfopen.md)   \n [ftell, _ftelli64](../../c-runtime-library/reference/ftell-ftelli64.md)   \n [_lseek, _lseeki64](../../c-runtime-library/reference/lseek-lseeki64.md)   \n [rewind](../../c-runtime-library/reference/rewind.md)"}