{"nodes":[{"pos":[12,38],"content":"__stdcall | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"__stdcall | Microsoft Docs","pos":[0,26]}]},{"content":"__stdcall","pos":[631,640]},{"content":"Microsoft Specific","pos":[643,661]},{"content":"The <ph id=\"ph1\">`__stdcall`</ph> calling convention is used to call Win32 API functions.","pos":[670,741],"source":"The `__stdcall` calling convention is used to call Win32 API functions."},{"content":"The callee cleans the stack, so the compiler makes <bpt id=\"p1\">**</bpt>vararg<ept id=\"p1\">**</ept> functions <ph id=\"ph1\">`__cdecl`</ph>.","pos":[742,824],"source":" The callee cleans the stack, so the compiler makes **vararg** functions `__cdecl`."},{"content":"Functions that use this calling convention require a function prototype.","pos":[825,897]},{"content":"Syntax","pos":[906,912]},{"content":"Remarks","pos":[994,1001]},{"content":"The following list shows the implementation of this calling convention.","pos":[1005,1076]},{"content":"Element","pos":[1083,1090]},{"content":"Implementation","pos":[1091,1105]},{"content":"Argument-passing order","pos":[1149,1171]},{"content":"Right to left.","pos":[1172,1186]},{"content":"Argument-passing convention","pos":[1191,1218]},{"content":"By value, unless a pointer or reference type is passed.","pos":[1219,1274]},{"content":"Stack-maintenance responsibility","pos":[1279,1311]},{"content":"Called function pops its own arguments from the stack.","pos":[1312,1366]},{"content":"Name-decoration convention","pos":[1371,1397]},{"content":"An underscore (_) is prefixed to the name.","pos":[1398,1440]},{"content":"The name is followed by the at sign (@) followed by the number of bytes (in decimal) in the argument list.","pos":[1441,1547]},{"content":"Therefore, the function declared as <ph id=\"ph1\">`int func( int a, double b )`</ph> is decorated as follows:","pos":[1548,1638],"source":" Therefore, the function declared as `int func( int a, double b )` is decorated as follows: "},{"content":"Case-translation convention","pos":[1654,1681]},{"content":"None","pos":[1682,1686]},{"pos":[1694,1874],"content":"The <bpt id=\"p1\">[</bpt>/Gz<ept id=\"p1\">](../build/reference/gd-gr-gv-gz-calling-convention.md)</ept> compiler option specifies <ph id=\"ph1\">`__stdcall`</ph> for all functions not explicitly declared with a different calling convention.","source":"The [/Gz](../build/reference/gd-gr-gv-gz-calling-convention.md) compiler option specifies `__stdcall` for all functions not explicitly declared with a different calling convention."},{"pos":[1881,2013],"content":"Functions declared using the <ph id=\"ph1\">`__stdcall`</ph> modifier return values the same way as functions declared using <bpt id=\"p1\">[</bpt>__cdecl<ept id=\"p1\">](../cpp/cdecl.md)</ept>.","source":"Functions declared using the `__stdcall` modifier return values the same way as functions declared using [__cdecl](../cpp/cdecl.md)."},{"pos":[2020,2243],"content":"On ARM and x64 processors, <ph id=\"ph1\">`__stdcall`</ph> is accepted and ignored by the compiler; on ARM and x64 architectures, by convention, arguments are passed in registers when possible, and subsequent arguments are passed on the stack.","source":"On ARM and x64 processors, `__stdcall` is accepted and ignored by the compiler; on ARM and x64 architectures, by convention, arguments are passed in registers when possible, and subsequent arguments are passed on the stack."},{"content":"For non-static class functions, if the function is defined out-of-line, the calling convention modifier does not have to be specified on the out-of-line definition.","pos":[2250,2414]},{"content":"That is, for class non-static member methods, the calling convention specified during declaration is assumed at the point of definition.","pos":[2415,2551]},{"content":"Given this class definition,","pos":[2552,2580]},{"content":"this","pos":[2662,2666]},{"content":"is equivalent to this","pos":[2731,2752]},{"content":"Example","pos":[2829,2836]},{"pos":[2840,2959],"content":"In the following example, use of __<bpt id=\"p1\">**</bpt>stdcall<ept id=\"p1\">**</ept> results in all <ph id=\"ph1\">`WINAPI`</ph> function types being handled as a standard call:","source":"In the following example, use of __**stdcall** results in all `WINAPI` function types being handled as a standard call:"},{"content":"See Also","pos":[3199,3207]},{"content":"Argument Passing and Naming Conventions","pos":[3212,3251]},{"content":"Keywords","pos":[3309,3317]}],"content":"---\ntitle: \"__stdcall | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"__stdcall_cpp\"\n  - \"__stdcall\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"__stdcall keyword [C++]\"\nms.assetid: e212594b-1827-4d07-9527-7d412b300df8\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# __stdcall\n**Microsoft Specific**  \n  \n The `__stdcall` calling convention is used to call Win32 API functions. The callee cleans the stack, so the compiler makes **vararg** functions `__cdecl`. Functions that use this calling convention require a function prototype.  \n  \n## Syntax  \n  \n```  \n  \nreturn-type __stdcall function-name[(argument-list)]  \n```  \n  \n## Remarks  \n The following list shows the implementation of this calling convention.  \n  \n|Element|Implementation|  \n|-------------|--------------------|  \n|Argument-passing order|Right to left.|  \n|Argument-passing convention|By value, unless a pointer or reference type is passed.|  \n|Stack-maintenance responsibility|Called function pops its own arguments from the stack.|  \n|Name-decoration convention|An underscore (_) is prefixed to the name. The name is followed by the at sign (@) followed by the number of bytes (in decimal) in the argument list. Therefore, the function declared as `int func( int a, double b )` is decorated as follows: `_func@12`|  \n|Case-translation convention|None|  \n  \n The [/Gz](../build/reference/gd-gr-gv-gz-calling-convention.md) compiler option specifies `__stdcall` for all functions not explicitly declared with a different calling convention.  \n  \n Functions declared using the `__stdcall` modifier return values the same way as functions declared using [__cdecl](../cpp/cdecl.md).  \n  \n On ARM and x64 processors, `__stdcall` is accepted and ignored by the compiler; on ARM and x64 architectures, by convention, arguments are passed in registers when possible, and subsequent arguments are passed on the stack.  \n  \n For non-static class functions, if the function is defined out-of-line, the calling convention modifier does not have to be specified on the out-of-line definition. That is, for class non-static member methods, the calling convention specified during declaration is assumed at the point of definition. Given this class definition,  \n  \n```cpp  \nstruct CMyClass {  \n   void __stdcall mymethod();  \n};  \n```  \n  \n this  \n  \n```cpp  \nvoid CMyClass::mymethod() { return; }  \n```  \n  \n is equivalent to this  \n  \n```cpp  \nvoid __stdcall CMyClass::mymethod() { return; }  \n```  \n  \n## Example  \n In the following example, use of __**stdcall** results in all `WINAPI` function types being handled as a standard call:  \n  \n```c  \n// Example of the __stdcall keyword  \n#define WINAPI __stdcall  \n// Example of the __stdcall keyword on function pointer  \ntypedef BOOL (__stdcall *funcname_ptr)(void * arg1, const char * arg2, DWORD flags, ...);  \n```  \n  \n## See Also  \n [Argument Passing and Naming Conventions](../cpp/argument-passing-and-naming-conventions.md)   \n [Keywords](../cpp/keywords-cpp.md)"}