{"nodes":[{"pos":[12,38],"content":"reduction | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"reduction | Microsoft Docs","pos":[0,26]}]},{"content":"reduction","pos":[601,610]},{"content":"Specifies that one or more variables that are private to each thread are the subject of a reduction operation at the end of the parallel region.","pos":[611,755]},{"content":"Syntax","pos":[764,770]},{"content":"Remarks","pos":[821,828]},{"content":"where,","pos":[832,838]},{"content":"The operator for the operation to perform on the variables (<ph id=\"ph1\">`var`</ph>) at the end of the parallel region.","pos":[860,961],"source":" The operator for the operation to perform on the variables (`var`) at the end of the parallel region."},{"content":"One more more variables on which to perform scalar reduction.","pos":[977,1038]},{"content":"If more than one variable is specified, separate variable names with a comma.","pos":[1039,1116]},{"content":"Remarks","pos":[1125,1132]},{"pos":[1148,1184],"content":"applies to the following directives:"},{"content":"for","pos":[1195,1198]},{"content":"parallel","pos":[1260,1268]},{"content":"sections","pos":[1328,1336]},{"pos":[1399,1492],"content":"For more information, see <bpt id=\"p1\">[</bpt>2.7.2.6 reduction<ept id=\"p1\">](../../../parallel/openmp/2-7-2-6-reduction.md)</ept>.","source":"For more information, see [2.7.2.6 reduction](../../../parallel/openmp/2-7-2-6-reduction.md)."},{"content":"Example","pos":[1501,1508]},{"content":"See Also","pos":[4483,4491]},{"content":"Clauses","pos":[4496,4503]}],"content":"---\ntitle: \"reduction | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"reduction\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"reduction OpenMP clause\"\nms.assetid: a2b051af-5a1b-4c00-9cc7-692bb43653fb\ncaps.latest.revision: 11\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# reduction\nSpecifies that one or more variables that are private to each thread are the subject of a reduction operation at the end of the parallel region.  \n  \n## Syntax  \n  \n```  \nreduction(operation:var)  \n```  \n  \n## Remarks  \n where,  \n  \n `operation`  \n The operator for the operation to perform on the variables (`var`) at the end of the parallel region.  \n  \n `var`  \n One more more variables on which to perform scalar reduction. If more than one variable is specified, separate variable names with a comma.  \n  \n## Remarks  \n `reduction` applies to the following directives:  \n  \n-   [for](../../../parallel/openmp/reference/for-openmp.md)  \n  \n-   [parallel](../../../parallel/openmp/reference/parallel.md)  \n  \n-   [sections](../../../parallel/openmp/reference/sections-openmp.md)  \n  \n For more information, see [2.7.2.6 reduction](../../../parallel/openmp/2-7-2-6-reduction.md).  \n  \n## Example  \n  \n```  \n// omp_reduction.cpp  \n// compile with: /openmp  \n#include <stdio.h>  \n#include <omp.h>  \n  \n#define NUM_THREADS 4  \n#define SUM_START   1  \n#define SUM_END     10  \n#define FUNC_RETS   {1, 1, 1, 1, 1}  \n  \nint bRets[5] = FUNC_RETS;  \nint nSumCalc = ((SUM_START + SUM_END) * (SUM_END - SUM_START + 1)) / 2;  \n  \nint func1( ) {return bRets[0];}  \nint func2( ) {return bRets[1];}  \nint func3( ) {return bRets[2];}  \nint func4( ) {return bRets[3];}  \nint func5( ) {return bRets[4];}  \n  \nint main( )   \n{  \n    int nRet = 0,   \n        nCount = 0,   \n        nSum = 0,   \n        i,   \n        bSucceed = 1;  \n  \n    omp_set_num_threads(NUM_THREADS);  \n  \n    #pragma omp parallel reduction(+ : nCount)  \n    {  \n        nCount += 1;  \n  \n        #pragma omp for reduction(+ : nSum)  \n        for (i = SUM_START ; i <= SUM_END ; ++i)  \n            nSum += i;  \n  \n        #pragma omp sections reduction(&& : bSucceed)  \n        {  \n            #pragma omp section  \n            {  \n                bSucceed = bSucceed && func1( );  \n            }    \n  \n            #pragma omp section  \n            {  \n                bSucceed = bSucceed && func2( );  \n            }  \n  \n            #pragma omp section  \n            {  \n                bSucceed = bSucceed && func3( );  \n            }  \n  \n            #pragma omp section  \n            {  \n                bSucceed = bSucceed && func4( );  \n            }  \n  \n            #pragma omp section  \n            {  \n                bSucceed = bSucceed && func5( );  \n            }  \n        }  \n    }  \n  \n    printf_s(\"The parallel section was executed %d times \"  \n             \"in parallel.\\n\", nCount);  \n    printf_s(\"The sum of the consecutive integers from \"  \n             \"%d to %d, is %d\\n\", 1, 10, nSum);  \n  \n    if (bSucceed)  \n        printf_s(\"All of the the functions, func1 through \"  \n                 \"func5 succeeded!\\n\");  \n    else  \n        printf_s(\"One or more of the the functions, func1 \"  \n                 \"through func5 failed!\\n\");  \n  \n    if (nCount != NUM_THREADS)   \n    {  \n        printf_s(\"ERROR: For %d threads, %d were counted!\\n\",   \n                 NUM_THREADS, nCount);  \n        nRet |= 0x1;  \n   }  \n  \n    if (nSum != nSumCalc)   \n    {  \n        printf_s(\"ERROR: The sum of %d through %d should be %d, \"  \n                \"but %d was reported!\\n\",   \n                SUM_START, SUM_END, nSumCalc, nSum);  \n        nRet |= 0x10;  \n    }  \n  \n    if (bSucceed != (bRets[0] && bRets[1] &&   \n                     bRets[2] && bRets[3] && bRets[4]))   \n    {  \n        printf_s(\"ERROR: The sum of %d through %d should be %d, \"  \n                 \"but %d was reported!\\n\",   \n                 SUM_START, SUM_END, nSumCalc, nSum);  \n        nRet |= 0x100;  \n    }  \n}  \n```  \n  \n```Output  \nThe parallel section was executed 4 times in parallel.  \nThe sum of the consecutive integers from 1 to 10, is 55  \nAll of the the functions, func1 through func5 succeeded!  \n```  \n  \n## See Also  \n [Clauses](../../../parallel/openmp/reference/openmp-clauses.md)"}