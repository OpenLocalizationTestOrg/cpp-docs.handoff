{"nodes":[{"pos":[12,48],"content":"hash_multimap Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"hash_multimap Class | Microsoft Docs","pos":[0,36]}]},{"pos":[752,771],"content":"hash_multimap Class","linkify":"hash_multimap Class","nodes":[{"content":"hash_multimap Class","pos":[0,19]}]},{"pos":[774,902],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"The container class hash_multimap is an extension of the Standard Template Library and is used for the storage and fast retrieval of data from a collection in which each element is a pair that has a sort key whose value need not be unique and an associated data value.","pos":[909,1177]},{"pos":[1186,1192],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1394,1404],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The key data type to be stored in the hash_multimap.","pos":[1417,1469]},{"content":"The element data type to be stored in the hash_multimap.","pos":[1486,1542]},{"content":"The type that includes two function objects, one of class <ph id=\"ph1\">`Traits`</ph> that is able to compare two element values as sort keys to determine their relative order and a hash function that is a unary predicate mapping key values of the elements to unsigned integers of type <bpt id=\"p1\">**</bpt>size_t<ept id=\"p1\">**</ept>.","pos":[1561,1839],"source":" The type that includes two function objects, one of class `Traits` that is able to compare two element values as sort keys to determine their relative order and a hash function that is a unary predicate mapping key values of the elements to unsigned integers of type **size_t**."},{"content":"This argument is optional, and the <ph id=\"ph1\">`hash_compare``&lt;Key, less&lt;Key&gt; &gt;`</ph> is the default value.","pos":[1840,1930],"source":" This argument is optional, and the `hash_compare``<Key, less<Key> >` is the default value."},{"content":"The type that represents the stored allocator object that encapsulates details about the hash_multimap's allocation and deallocation of memory.","pos":[1952,2095]},{"content":"This argument is optional, and the default value is <ph id=\"ph1\">`allocator&lt;pair &lt;const Key, Type&gt; &gt;`</ph>.","pos":[2096,2185],"source":" This argument is optional, and the default value is `allocator<pair <const Key, Type> >`."},{"pos":[2194,2201],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The hash_multimap is:","pos":[2205,2226]},{"content":"An associative container, which a variable size container that supports the efficient retrieval of element values based on an associated key value.","pos":[2236,2383]},{"content":"Reversible, because it provides a bidirectional iterator to access its elements.","pos":[2393,2473]},{"content":"Hashed, because its elements are grouped into buckets based on the value of a hash function applied to the key values of the elements.","pos":[2483,2617]},{"content":"Multiple, because its elements do not need to have a unique keys, so that one key value may have many element data values associated with it.","pos":[2627,2768]},{"content":"A pair associative container, because its element values are distinct from its key values.","pos":[2778,2868]},{"content":"A template class, because the functionality it provides is generic and so independent of the specific type of data contained as elements or keys.","pos":[2878,3023]},{"content":"The data types to be used for elements and keys are, instead, specified as parameters in the class template along with the comparison function and allocator.","pos":[3024,3181]},{"content":"The main advantage of hashing over sorting is greater efficiency; a successful hashing performs insertions, deletions, and finds in constant average time as compared with a time proportional to the logarithm of the number of elements in the container for sorting techniques.","pos":[3188,3462]},{"content":"The value of an element in a hash_multimap, but not its associated key value, may be changed directly.","pos":[3463,3565]},{"content":"Instead, key values associated with old elements must be deleted and new key values associated with new elements inserted.","pos":[3566,3688]},{"content":"The choice of container type should be based in general on the type of searching and inserting required by the application.","pos":[3695,3818]},{"content":"Hashed associative containers are optimized for the operations of lookup, insertion and removal.","pos":[3819,3915]},{"content":"The member functions that explicitly support these operations are efficient when used with a well-designed hash function, performing them in a time that is on average constant and not dependent on the number of elements in the container.","pos":[3916,4153]},{"content":"A well-designed hash function produces a uniform distribution of hashed values and minimizes the number of collisions, where a collision is said to occur when distinct key values are mapped into the same hashed value.","pos":[4154,4371]},{"content":"In the worst case, with the worst possible hash function, the number of operations is proportional to the number of elements in the sequence (linear time).","pos":[4372,4527]},{"content":"The hash_multimap should be the associative container of choice when the conditions associating the values with their keys are satisfied by the application.","pos":[4534,4690]},{"content":"A model for this type of structure is an ordered list of key words with associated string values providing, say, definitions, where the words were not always uniquely defined.","pos":[4691,4866]},{"content":"If, instead, the keywords were uniquely defined so that keys were unique, then a hash_map would be the container of choice.","pos":[4867,4990]},{"content":"If, on the other hand, just the list of words were being stored, then a hash_set would be the correct container.","pos":[4991,5103]},{"content":"If multiple occurrences of the words were allowed, then a hash_multiset would be the appropriate container structure.","pos":[5104,5221]},{"content":"The hash_multimap orders the sequence it controls by calling a stored hash <ph id=\"ph1\">`Traits`</ph> object of type <bpt id=\"p1\">[</bpt>value_compare<ept id=\"p1\">](../standard-library/value-compare-class.md)</ept>.","pos":[5228,5387],"source":"The hash_multimap orders the sequence it controls by calling a stored hash `Traits` object of type [value_compare](../standard-library/value-compare-class.md)."},{"content":"This stored object may be accessed by calling the member function <bpt id=\"p1\">[</bpt>key_comp<ept id=\"p1\">](../standard-library/hash-map-class.md#hash_map__key_comp)</ept>.","pos":[5388,5523],"source":" This stored object may be accessed by calling the member function [key_comp](../standard-library/hash-map-class.md#hash_map__key_comp)."},{"content":"Such a function object must behave the same as an object of class <bpt id=\"p1\">[</bpt>hash_compare<ept id=\"p1\">](../standard-library/hash-compare-class.md)</ept><ph id=\"ph1\">`&lt;Key,  less&lt;Key&gt; &gt;`</ph>.","pos":[5524,5668],"source":" Such a function object must behave the same as an object of class [hash_compare](../standard-library/hash-compare-class.md)`<Key,  less<Key> >`."},{"content":"Specifically, for all values <ph id=\"ph1\">`Key`</ph> of type <ph id=\"ph2\">`Key`</ph>, the call <ph id=\"ph3\">`Traits (Key)`</ph> yields a distribution of values of type <ph id=\"ph4\">`size_t`</ph>.","pos":[5669,5792],"source":" Specifically, for all values `Key` of type `Key`, the call `Traits (Key)` yields a distribution of values of type `size_t`."},{"content":"In general, the elements need be merely less than comparable to establish this order: so that, given any two elements, it may be determined either that they are equivalent (in the sense that neither is less than the other) or that one is less than the other.","pos":[5799,6057]},{"content":"This results in an ordering between the non-equivalent elements.","pos":[6058,6122]},{"content":"On a more technical note, the comparison function is a binary predicate that induces a strict weak ordering in the standard mathematical sense.","pos":[6123,6266]},{"content":"A binary predicate f(x, y) is a function object that has two argument objects <ph id=\"ph1\">`x`</ph> and <ph id=\"ph2\">`y`</ph> and a return value of <ph id=\"ph3\">`true`</ph> or <ph id=\"ph4\">`false`</ph>.","pos":[6267,6397],"source":" A binary predicate f(x, y) is a function object that has two argument objects `x` and `y` and a return value of `true` or `false`."},{"content":"An ordering imposed on a hash_multimap is a strict weak ordering if the binary predicate is irreflexive, antisymmetric, and transitive and if equivalence is transitive, where two objects <ph id=\"ph1\">`x`</ph> and <ph id=\"ph2\">`y`</ph> are defined to be equivalent when both f(x, y) and f(y, x) are <ph id=\"ph3\">`false`</ph>.","pos":[6398,6668],"source":" An ordering imposed on a hash_multimap is a strict weak ordering if the binary predicate is irreflexive, antisymmetric, and transitive and if equivalence is transitive, where two objects `x` and `y` are defined to be equivalent when both f(x, y) and f(y, x) are `false`."},{"content":"If the stronger condition of equality between keys replaces that of equivalence, then the ordering becomes total (in the sense that all the elements are ordered with respect to each other) and the keys matched will be indiscernible from each other.","pos":[6669,6917]},{"content":"The actual order of elements in the controlled sequence depends on the hash function, the ordering function, and the current size of the hash table stored in the container object.","pos":[6924,7103]},{"content":"You cannot determine the current size of the hash table, so you cannot in general predict the order of elements in the controlled sequence.","pos":[7104,7243]},{"content":"Inserting elements invalidates no iterators, and removing elements invalidates only those iterators that had specifically pointed at the removed elements.","pos":[7244,7398]},{"content":"The iterator provided by the hash_multimap class is a bidirectional iterator, but the class member functions <bpt id=\"p1\">[</bpt>insert<ept id=\"p1\">](#hash_multimap__insert)</ept> and <bpt id=\"p2\">[</bpt>hash_multimap<ept id=\"p2\">](#hash_multimap__hash_multimap)</ept> have versions that take as template parameters a weaker input iterator, whose functionality requirements are more minimal than those guaranteed by the class of bidirectional iterators.","pos":[7405,7782],"source":"The iterator provided by the hash_multimap class is a bidirectional iterator, but the class member functions [insert](#hash_multimap__insert) and [hash_multimap](#hash_multimap__hash_multimap) have versions that take as template parameters a weaker input iterator, whose functionality requirements are more minimal than those guaranteed by the class of bidirectional iterators."},{"content":"The different iterator concepts form a family related by refinements in their functionality.","pos":[7783,7875]},{"content":"Each iterator concept has its own hash_multimap of requirements, and the algorithms that work with them must limit their assumptions to the requirements provided by that type of iterator.","pos":[7876,8063]},{"content":"It may be assumed that an input iterator may be dereferenced to refer to some object and that it may be incremented to the next iterator in the sequence.","pos":[8064,8217]},{"content":"This is a minimal hash_multimap of functionality, but it is enough to be able to talk meaningfully about a range of iterators <ph id=\"ph1\">`[First, Last)`</ph> in the context of the member functions.","pos":[8218,8399],"source":" This is a minimal hash_multimap of functionality, but it is enough to be able to talk meaningfully about a range of iterators `[First, Last)` in the context of the member functions."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[8406,8644],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[8645,8734],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[8744,8756],"content":"Constructors","linkify":"Constructors","nodes":[{"content":"Constructors","pos":[0,12]}]},{"pos":[8777,8823],"content":"<bpt id=\"p1\">[</bpt>hash_multimap<ept id=\"p1\">](#hash_multimap__hash_multimap)</ept>","source":"[hash_multimap](#hash_multimap__hash_multimap)"},{"pos":[8824,8972],"content":"Constructs a list of a specific size or with elements of a specific value or with a specific <ph id=\"ph1\">`allocator`</ph> or as a copy of some other <ph id=\"ph2\">`hash_multimap`</ph>.","source":"Constructs a list of a specific size or with elements of a specific value or with a specific `allocator` or as a copy of some other `hash_multimap`."},{"pos":[8983,8991],"content":"Typedefs","linkify":"Typedefs","nodes":[{"content":"Typedefs","pos":[0,8]}]},{"pos":[9012,9060],"content":"<bpt id=\"p1\">[</bpt>allocator_type<ept id=\"p1\">](#hash_multimap__allocator_type)</ept>","source":"[allocator_type](#hash_multimap__allocator_type)"},{"pos":[9061,9137],"content":"A type that represents the <ph id=\"ph1\">`allocator`</ph> class for the <ph id=\"ph2\">`hash_multimap`</ph> object.","source":"A type that represents the `allocator` class for the `hash_multimap` object."},{"pos":[9142,9190],"content":"<bpt id=\"p1\">[</bpt>const_iterator<ept id=\"p1\">](#hash_multimap__const_iterator)</ept>","source":"[const_iterator](#hash_multimap__const_iterator)"},{"pos":[9191,9292],"content":"A type that provides a bidirectional iterator that can read a <ph id=\"ph1\">`const`</ph> element in the <ph id=\"ph2\">`hash_multimap`</ph>.","source":"A type that provides a bidirectional iterator that can read a `const` element in the `hash_multimap`."},{"pos":[9297,9343],"content":"<bpt id=\"p1\">[</bpt>const_pointer<ept id=\"p1\">](#hash_multimap__const_pointer)</ept>","source":"[const_pointer](#hash_multimap__const_pointer)"},{"pos":[9344,9417],"content":"A type that provides a pointer to a <ph id=\"ph1\">`const`</ph> element in a <ph id=\"ph2\">`hash_multimap`</ph>.","source":"A type that provides a pointer to a `const` element in a `hash_multimap`."},{"pos":[9422,9472],"content":"<bpt id=\"p1\">[</bpt>const_reference<ept id=\"p1\">](#hash_multimap__const_reference)</ept>","source":"[const_reference](#hash_multimap__const_reference)"},{"pos":[9473,9601],"content":"A type that provides a reference to a <ph id=\"ph1\">`const`</ph> element stored in a <ph id=\"ph2\">`hash_multimap`</ph> for reading and performing <ph id=\"ph3\">`const`</ph> operations.","source":"A type that provides a reference to a `const` element stored in a `hash_multimap` for reading and performing `const` operations."},{"pos":[9606,9670],"content":"<bpt id=\"p1\">[</bpt>const_reverse_iterator<ept id=\"p1\">](#hash_multimap__const_reverse_iterator)</ept>","source":"[const_reverse_iterator](#hash_multimap__const_reverse_iterator)"},{"pos":[9671,9774],"content":"A type that provides a bidirectional iterator that can read any <ph id=\"ph1\">`const`</ph> element in the <ph id=\"ph2\">`hash_multimap`</ph>.","source":"A type that provides a bidirectional iterator that can read any `const` element in the `hash_multimap`."},{"pos":[9779,9829],"content":"<bpt id=\"p1\">[</bpt>difference_type<ept id=\"p1\">](#hash_multimap__difference_type)</ept>","source":"[difference_type](#hash_multimap__difference_type)"},{"pos":[9830,9978],"content":"A signed integer type that can be used to represent the number of elements of a <ph id=\"ph1\">`hash_multimap`</ph> in a range between elements pointed to by iterators.","source":"A signed integer type that can be used to represent the number of elements of a `hash_multimap` in a range between elements pointed to by iterators."},{"pos":[9983,10019],"content":"<bpt id=\"p1\">[</bpt>iterator<ept id=\"p1\">](#hash_multimap__iterator)</ept>","source":"[iterator](#hash_multimap__iterator)"},{"pos":[10020,10123],"content":"A type that provides a bidirectional iterator that can read or modify any element in a <ph id=\"ph1\">`hash_multimap`</ph>.","source":"A type that provides a bidirectional iterator that can read or modify any element in a `hash_multimap`."},{"pos":[10128,10170],"content":"<bpt id=\"p1\">[</bpt>key_compare<ept id=\"p1\">](#hash_multimap__key_compare)</ept>","source":"[key_compare](#hash_multimap__key_compare)"},{"pos":[10171,10312],"content":"A type that provides a function object that can compare two sort keys to determine the relative order of two elements in the <ph id=\"ph1\">`hash_multimap`</ph>.","source":"A type that provides a function object that can compare two sort keys to determine the relative order of two elements in the `hash_multimap`."},{"pos":[10317,10353],"content":"<bpt id=\"p1\">[</bpt>key_type<ept id=\"p1\">](#hash_multimap__key_type)</ept>","source":"[key_type](#hash_multimap__key_type)"},{"pos":[10354,10449],"content":"A type that describes the sort key object that constitutes each element of the <ph id=\"ph1\">`hash_multimap`</ph>.","source":"A type that describes the sort key object that constitutes each element of the `hash_multimap`."},{"pos":[10454,10496],"content":"<bpt id=\"p1\">[</bpt>mapped_type<ept id=\"p1\">](#hash_multimap__mapped_type)</ept>","source":"[mapped_type](#hash_multimap__mapped_type)"},{"pos":[10497,10562],"content":"A type that represents the data type stored in a <ph id=\"ph1\">`hash_multimap`</ph>.","source":"A type that represents the data type stored in a `hash_multimap`."},{"pos":[10567,10601],"content":"<bpt id=\"p1\">[</bpt>pointer<ept id=\"p1\">](#hash_multimap__pointer)</ept>","source":"[pointer](#hash_multimap__pointer)"},{"pos":[10602,10668],"content":"A type that provides a pointer to an element in a <ph id=\"ph1\">`hash_multimap`</ph>.","source":"A type that provides a pointer to an element in a `hash_multimap`."},{"pos":[10673,10711],"content":"<bpt id=\"p1\">[</bpt>reference<ept id=\"p1\">](#hash_multimap__reference)</ept>","source":"[reference](#hash_multimap__reference)"},{"pos":[10712,10787],"content":"A type that provides a reference to an element stored in a <ph id=\"ph1\">`hash_multimap`</ph>.","source":"A type that provides a reference to an element stored in a `hash_multimap`."},{"pos":[10792,10844],"content":"<bpt id=\"p1\">[</bpt>reverse_iterator<ept id=\"p1\">](#hash_multimap__reverse_iterator)</ept>","source":"[reverse_iterator](#hash_multimap__reverse_iterator)"},{"pos":[10845,10956],"content":"A type that provides a bidirectional iterator that can read or modify an element in a reversed <ph id=\"ph1\">`hash_multimap`</ph>.","source":"A type that provides a bidirectional iterator that can read or modify an element in a reversed `hash_multimap`."},{"pos":[10961,10999],"content":"<bpt id=\"p1\">[</bpt>size_type<ept id=\"p1\">](#hash_multimap__size_type)</ept>","source":"[size_type](#hash_multimap__size_type)"},{"pos":[11000,11088],"content":"An unsigned integer type that can represent the number of elements in a <ph id=\"ph1\">`hash_multimap`</ph>.","source":"An unsigned integer type that can represent the number of elements in a `hash_multimap`."},{"pos":[11093,11133],"content":"<bpt id=\"p1\">[</bpt>value_type<ept id=\"p1\">](#hash_multimap__value_type)</ept>","source":"[value_type](#hash_multimap__value_type)"},{"pos":[11134,11273],"content":"A type that provides a function object that can compare two elements as sort keys to determine their relative order in the <ph id=\"ph1\">`hash_multimap`</ph>.","source":"A type that provides a function object that can compare two elements as sort keys to determine their relative order in the `hash_multimap`."},{"pos":[11284,11300],"content":"Member Functions","linkify":"Member Functions","nodes":[{"content":"Member Functions","pos":[0,16]}]},{"pos":[11321,11351],"content":"<bpt id=\"p1\">[</bpt>begin<ept id=\"p1\">](#hash_multimap__begin)</ept>","source":"[begin](#hash_multimap__begin)"},{"pos":[11352,11424],"content":"Returns an iterator addressing the first element in the <ph id=\"ph1\">`hash_multimap`</ph>.","source":"Returns an iterator addressing the first element in the `hash_multimap`."},{"pos":[11429,11476],"content":"<bpt id=\"p1\">[</bpt>hash_multimap::cbegin<ept id=\"p1\">](#hash_multimap__cbegin)</ept>","source":"[hash_multimap::cbegin](#hash_multimap__cbegin)"},{"pos":[11477,11554],"content":"Returns a const iterator addressing the first element in the <ph id=\"ph1\">`hash_multimap`</ph>.","source":"Returns a const iterator addressing the first element in the `hash_multimap`."},{"pos":[11559,11602],"content":"<bpt id=\"p1\">[</bpt>hash_multimap::cend<ept id=\"p1\">](#hash_multimap__cend)</ept>","source":"[hash_multimap::cend](#hash_multimap__cend)"},{"pos":[11603,11705],"content":"Returns a const iterator that addresses the location succeeding the last element in a <ph id=\"ph1\">`hash_multimap`</ph>.","source":"Returns a const iterator that addresses the location succeeding the last element in a `hash_multimap`."},{"pos":[11710,11740],"content":"<bpt id=\"p1\">[</bpt>clear<ept id=\"p1\">](#hash_multimap__clear)</ept>","source":"[clear](#hash_multimap__clear)"},{"pos":[11741,11786],"content":"Erases all the elements of a <ph id=\"ph1\">`hash_multimap`</ph>.","source":"Erases all the elements of a `hash_multimap`."},{"pos":[11791,11821],"content":"<bpt id=\"p1\">[</bpt>count<ept id=\"p1\">](#hash_multimap__count)</ept>","source":"[count](#hash_multimap__count)"},{"pos":[11822,11918],"content":"Returns the number of elements in a <ph id=\"ph1\">`hash_multimap`</ph> whose key matches a parameter-specified key.","source":"Returns the number of elements in a `hash_multimap` whose key matches a parameter-specified key."},{"pos":[11923,11972],"content":"<bpt id=\"p1\">[</bpt>hash_multimap::crbegin<ept id=\"p1\">](#hash_multimap__crbegin)</ept>","source":"[hash_multimap::crbegin](#hash_multimap__crbegin)"},{"pos":[11973,12057],"content":"Returns a const iterator addressing the first element in a reversed <ph id=\"ph1\">`hash_multimap`</ph>.","source":"Returns a const iterator addressing the first element in a reversed `hash_multimap`."},{"pos":[12062,12107],"content":"<bpt id=\"p1\">[</bpt>hash_multimap::crend<ept id=\"p1\">](#hash_multimap__crend)</ept>","source":"[hash_multimap::crend](#hash_multimap__crend)"},{"pos":[12108,12219],"content":"Returns a const iterator that addresses the location succeeding the last element in a reversed <ph id=\"ph1\">`hash_multimap`</ph>.","source":"Returns a const iterator that addresses the location succeeding the last element in a reversed `hash_multimap`."},{"pos":[12224,12273],"content":"<bpt id=\"p1\">[</bpt>hash_multimap::emplace<ept id=\"p1\">](#hash_multimap__emplace)</ept>","source":"[hash_multimap::emplace](#hash_multimap__emplace)"},{"pos":[12274,12337],"content":"Inserts an element constructed in place into a <ph id=\"ph1\">`hash_multimap`</ph>.","source":"Inserts an element constructed in place into a `hash_multimap`."},{"pos":[12342,12401],"content":"<bpt id=\"p1\">[</bpt>hash_multimap::emplace_hint<ept id=\"p1\">](#hash_multimap__emplace_hint)</ept>","source":"[hash_multimap::emplace_hint](#hash_multimap__emplace_hint)"},{"pos":[12402,12488],"content":"Inserts an element constructed in place into a <ph id=\"ph1\">`hash_multimap`</ph>, with a placement hint.","source":"Inserts an element constructed in place into a `hash_multimap`, with a placement hint."},{"pos":[12493,12523],"content":"<bpt id=\"p1\">[</bpt>empty<ept id=\"p1\">](#hash_multimap__empty)</ept>","source":"[empty](#hash_multimap__empty)"},{"pos":[12524,12560],"content":"Tests if a <ph id=\"ph1\">`hash_multimap`</ph> is empty.","source":"Tests if a `hash_multimap` is empty."},{"pos":[12565,12591],"content":"<bpt id=\"p1\">[</bpt>end<ept id=\"p1\">](#hash_multimap__end)</ept>","source":"[end](#hash_multimap__end)"},{"pos":[12592,12689],"content":"Returns an iterator that addresses the location succeeding the last element in a <ph id=\"ph1\">`hash_multimap`</ph>.","source":"Returns an iterator that addresses the location succeeding the last element in a `hash_multimap`."},{"pos":[12694,12736],"content":"<bpt id=\"p1\">[</bpt>equal_range<ept id=\"p1\">](#hash_multimap__equal_range)</ept>","source":"[equal_range](#hash_multimap__equal_range)"},{"pos":[12737,12834],"content":"Returns an iterator that addresses the location succeeding the last element in a <ph id=\"ph1\">`hash_multimap`</ph>.","source":"Returns an iterator that addresses the location succeeding the last element in a `hash_multimap`."},{"pos":[12839,12869],"content":"<bpt id=\"p1\">[</bpt>erase<ept id=\"p1\">](#hash_multimap__erase)</ept>","source":"[erase](#hash_multimap__erase)"},{"pos":[12870,12957],"content":"Removes an element or a range of elements in a <ph id=\"ph1\">`hash_multimap`</ph> from specified positions","source":"Removes an element or a range of elements in a `hash_multimap` from specified positions"},{"pos":[12962,12990],"content":"<bpt id=\"p1\">[</bpt>find<ept id=\"p1\">](#hash_multimap__find)</ept>","source":"[find](#hash_multimap__find)"},{"pos":[12991,13115],"content":"Returns an iterator addressing the location of an element in a <ph id=\"ph1\">`hash_multimap`</ph> that has a key equivalent to a specified key.","source":"Returns an iterator addressing the location of an element in a `hash_multimap` that has a key equivalent to a specified key."},{"pos":[13120,13166],"content":"<bpt id=\"p1\">[</bpt>get_allocator<ept id=\"p1\">](#hash_multimap__get_allocator)</ept>","source":"[get_allocator](#hash_multimap__get_allocator)"},{"pos":[13167,13246],"content":"Returns a copy of the <ph id=\"ph1\">`allocator`</ph> object used to construct the <ph id=\"ph2\">`hash_multimap`</ph>.","source":"Returns a copy of the `allocator` object used to construct the `hash_multimap`."},{"pos":[13251,13283],"content":"<bpt id=\"p1\">[</bpt>insert<ept id=\"p1\">](#hash_multimap__insert)</ept>","source":"[insert](#hash_multimap__insert)"},{"pos":[13284,13375],"content":"Inserts an element or a range of elements into the <ph id=\"ph1\">`hash_multimap`</ph> at a specified position.","source":"Inserts an element or a range of elements into the `hash_multimap` at a specified position."},{"pos":[13380,13416],"content":"<bpt id=\"p1\">[</bpt>key_comp<ept id=\"p1\">](#hash_multimap__key_comp)</ept>","source":"[key_comp](#hash_multimap__key_comp)"},{"pos":[13417,13499],"content":"Retrieves a copy of the comparison object used to order keys in a <ph id=\"ph1\">`hash_multimap`</ph>.","source":"Retrieves a copy of the comparison object used to order keys in a `hash_multimap`."},{"pos":[13504,13546],"content":"<bpt id=\"p1\">[</bpt>lower_bound<ept id=\"p1\">](#hash_multimap__lower_bound)</ept>","source":"[lower_bound](#hash_multimap__lower_bound)"},{"pos":[13547,13688],"content":"Returns an iterator to the first element in a <ph id=\"ph1\">`hash_multimap`</ph> that with a key value that is equal to or greater than that of a specified key.","source":"Returns an iterator to the first element in a `hash_multimap` that with a key value that is equal to or greater than that of a specified key."},{"pos":[13693,13729],"content":"<bpt id=\"p1\">[</bpt>max_size<ept id=\"p1\">](#hash_multimap__max_size)</ept>","source":"[max_size](#hash_multimap__max_size)"},{"pos":[13730,13780],"content":"Returns the maximum length of the <ph id=\"ph1\">`hash_multimap`</ph>.","source":"Returns the maximum length of the `hash_multimap`."},{"pos":[13785,13817],"content":"<bpt id=\"p1\">[</bpt>rbegin<ept id=\"p1\">](#hash_multimap__rbegin)</ept>","source":"[rbegin](#hash_multimap__rbegin)"},{"pos":[13818,13897],"content":"Returns an iterator addressing the first element in a reversed <ph id=\"ph1\">`hash_multimap`</ph>.","source":"Returns an iterator addressing the first element in a reversed `hash_multimap`."},{"pos":[13902,13930],"content":"<bpt id=\"p1\">[</bpt>rend<ept id=\"p1\">](#hash_multimap__rend)</ept>","source":"[rend](#hash_multimap__rend)"},{"pos":[13931,14037],"content":"Returns an iterator that addresses the location succeeding the last element in a reversed <ph id=\"ph1\">`hash_multimap`</ph>.","source":"Returns an iterator that addresses the location succeeding the last element in a reversed `hash_multimap`."},{"pos":[14042,14070],"content":"<bpt id=\"p1\">[</bpt>size<ept id=\"p1\">](#hash_multimap__size)</ept>","source":"[size](#hash_multimap__size)"},{"pos":[14071,14114],"content":"Specifies a new size for a <ph id=\"ph1\">`hash_multimap`</ph>.","source":"Specifies a new size for a `hash_multimap`."},{"pos":[14119,14147],"content":"<bpt id=\"p1\">[</bpt>swap<ept id=\"p1\">](#hash_multimap__swap)</ept>","source":"[swap](#hash_multimap__swap)"},{"pos":[14148,14195],"content":"Exchanges the elements of two <ph id=\"ph1\">`hash_multimap`</ph>s.","source":"Exchanges the elements of two `hash_multimap`s."},{"pos":[14200,14242],"content":"<bpt id=\"p1\">[</bpt>upper_bound<ept id=\"p1\">](#hash_multimap__upper_bound)</ept>","source":"[upper_bound](#hash_multimap__upper_bound)"},{"pos":[14243,14372],"content":"Returns an iterator to the first element in a <ph id=\"ph1\">`hash_multimap`</ph> that with a key value that is greater than that of a specified key.","source":"Returns an iterator to the first element in a `hash_multimap` that with a key value that is greater than that of a specified key."},{"pos":[14377,14417],"content":"<bpt id=\"p1\">[</bpt>value_comp<ept id=\"p1\">](#hash_multimap__value_comp)</ept>","source":"[value_comp](#hash_multimap__value_comp)"},{"pos":[14418,14510],"content":"Retrieves a copy of the comparison object used to order element values in a <ph id=\"ph1\">`hash_multimap`</ph>.","source":"Retrieves a copy of the comparison object used to order element values in a `hash_multimap`."},{"pos":[14521,14530],"content":"Operators","linkify":"Operators","nodes":[{"content":"Operators","pos":[0,9]}]},{"pos":[14551,14606],"content":"<bpt id=\"p1\">[</bpt>hash_multimap::operator=<ept id=\"p1\">](#hash_multimap__operator_eq)</ept>","source":"[hash_multimap::operator=](#hash_multimap__operator_eq)"},{"pos":[14607,14689],"content":"Replaces the elements of a <ph id=\"ph1\">`hash_multimap`</ph> with a copy of another <ph id=\"ph2\">`hash_multimap`</ph>.","source":"Replaces the elements of a `hash_multimap` with a copy of another `hash_multimap`."},{"pos":[14699,14711],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[14715,14737],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> &lt;hash_map&gt;","source":"**Header:** <hash_map>"},{"pos":[14744,14765],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> stdext","source":"**Namespace:** stdext"},{"pos":[14775,14850],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__allocator_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::allocator_type","linkify":"<a name=\"hash_multimap__allocator_type\"></a>  hash_multimap::allocator_type","source":"<a name=\"hash_multimap__allocator_type\"></a>  hash_multimap::allocator_type"},{"pos":[14858,14986],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"A type that represents the allocator class for the hash_multimap object.","pos":[14993,15065]},{"pos":[15199,15206],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[15210,15279],"content":"<ph id=\"ph1\">`allocator_type`</ph> is a synonym for the template parameter <ph id=\"ph2\">`Allocator`</ph>.","source":"`allocator_type` is a synonym for the template parameter `Allocator`."},{"pos":[15286,15426],"content":"For more information on <ph id=\"ph1\">`Allocator`</ph>, see the Remarks section of the <bpt id=\"p1\">[</bpt>hash_multimap Class<ept id=\"p1\">](../standard-library/hash-multimap-class.md)</ept> topic.","source":"For more information on `Allocator`, see the Remarks section of the [hash_multimap Class](../standard-library/hash-multimap-class.md) topic."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[15433,15671],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[15672,15761],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[15771,15778],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[15783,15888],"content":"See the example for <bpt id=\"p1\">[</bpt>get_allocator<ept id=\"p1\">](#hash_multimap__get_allocator)</ept> for an example using <ph id=\"ph1\">`allocator_type`</ph>.","source":"See the example for [get_allocator](#hash_multimap__get_allocator) for an example using `allocator_type`."},{"pos":[15898,15955],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__begin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::begin","linkify":"<a name=\"hash_multimap__begin\"></a>  hash_multimap::begin","source":"<a name=\"hash_multimap__begin\"></a>  hash_multimap::begin"},{"pos":[15963,16091],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"Returns an iterator addressing the first element in the hash_multimap.","pos":[16098,16168]},{"pos":[16242,16254],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A bidirectional iterator addressing the first element in the hash_multimap or the location succeeding an empty hash_multimap.","pos":[16258,16383]},{"pos":[16393,16400],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the return value of <bpt id=\"p1\">**</bpt>begin<ept id=\"p1\">**</ept> is assigned to a <ph id=\"ph1\">`const_iterator`</ph>, the elements in the hash_multimap object cannot be modified.","pos":[16404,16532],"source":"If the return value of **begin** is assigned to a `const_iterator`, the elements in the hash_multimap object cannot be modified."},{"content":"If the return value of <bpt id=\"p1\">**</bpt>begin<ept id=\"p1\">**</ept> is assigned to an <bpt id=\"p2\">**</bpt>iterator<ept id=\"p2\">**</ept>, the elements in the hash_multimap object can be modified.","pos":[16533,16655],"source":" If the return value of **begin** is assigned to an **iterator**, the elements in the hash_multimap object can be modified."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[16662,16900],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[16901,16990],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[17000,17007],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[18075,18134],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__cbegin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::cbegin","linkify":"<a name=\"hash_multimap__cbegin\"></a>  hash_multimap::cbegin","source":"<a name=\"hash_multimap__cbegin\"></a>  hash_multimap::cbegin"},{"pos":[18142,18270],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"Returns a const iterator addressing the first element in the hash_multimap.","pos":[18277,18352]},{"pos":[18408,18420],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[18424,18603],"content":"A const bidirectional iterator addressing the first element in the <bpt id=\"p1\">[</bpt>hash_multimap<ept id=\"p1\">](../standard-library/hash-multimap-class.md)</ept> or the location succeeding an empty <ph id=\"ph1\">`hash_multimap`</ph>.","source":"A const bidirectional iterator addressing the first element in the [hash_multimap](../standard-library/hash-multimap-class.md) or the location succeeding an empty `hash_multimap`."},{"pos":[18613,18620],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[19196,19251],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__cend\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::cend","linkify":"<a name=\"hash_multimap__cend\"></a>  hash_multimap::cend","source":"<a name=\"hash_multimap__cend\"></a>  hash_multimap::cend"},{"pos":[19259,19387],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"Returns a const iterator that addresses the location succeeding the last element in a hash_multimap.","pos":[19394,19494]},{"pos":[19548,19560],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A const bidirectional iterator that addresses the location succeeding the last element in a <bpt id=\"p1\">[</bpt>hash_multimap<ept id=\"p1\">](../standard-library/hash-multimap-class.md)</ept>.","pos":[19564,19716],"source":"A const bidirectional iterator that addresses the location succeeding the last element in a [hash_multimap](../standard-library/hash-multimap-class.md)."},{"content":"If the <ph id=\"ph1\">`hash_multimap`</ph> is empty, then <ph id=\"ph2\">`hash_multimap::cend == hash_multimap::begin`</ph>.","pos":[19717,19801],"source":" If the `hash_multimap` is empty, then `hash_multimap::cend == hash_multimap::begin`."},{"pos":[19811,19818],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[19822,19906],"content":"<ph id=\"ph1\">`cend`</ph> is used to test whether an iterator has reached the end of its hash_multimap.","source":"`cend` is used to test whether an iterator has reached the end of its hash_multimap."},{"pos":[19913,19969],"content":"The value returned by <ph id=\"ph1\">`cend`</ph> should not be dereferenced.","source":"The value returned by `cend` should not be dereferenced."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[19976,20214],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[20215,20304],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[20314,20321],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[20930,20987],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__clear\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::clear","linkify":"<a name=\"hash_multimap__clear\"></a>  hash_multimap::clear","source":"<a name=\"hash_multimap__clear\"></a>  hash_multimap::clear"},{"pos":[20995,21123],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"Erases all the elements of a hash_multimap.","pos":[21130,21173]},{"pos":[21212,21219],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[21223,21461],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[21462,21551],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[21561,21568],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates the use of the hash_multimap::clear member function.","pos":[21573,21660]},{"pos":[22434,22509],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__const_iterator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::const_iterator","linkify":"<a name=\"hash_multimap__const_iterator\"></a>  hash_multimap::const_iterator","source":"<a name=\"hash_multimap__const_iterator\"></a>  hash_multimap::const_iterator"},{"pos":[22517,22645],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"pos":[22652,22753],"content":"A type that provides a bidirectional iterator that can read a <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> element in the hash_multimap.","source":"A type that provides a bidirectional iterator that can read a **const** element in the hash_multimap."},{"pos":[22887,22894],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[22898,22971],"content":"A type <ph id=\"ph1\">`const_iterator`</ph> cannot be used to modify the value of an element.","source":"A type `const_iterator` cannot be used to modify the value of an element."},{"content":"The <ph id=\"ph1\">`const_iterator`</ph> defined by hash_multimap points to objects of <bpt id=\"p1\">[</bpt>value_type<ept id=\"p1\">](#hash_multimap__value_type)</ept>, which are of type <ph id=\"ph2\">`pair`</ph><bpt id=\"p2\">*</bpt><ph id=\"ph3\">\\&lt;</ph><ept id=\"p2\">*</ept><bpt id=\"p3\">**</bpt>constKey, Type<ept id=\"p3\">**</ept><bpt id=\"p4\">*</bpt><ph id=\"ph4\">&gt;</ph><ept id=\"p4\">*</ept>.","pos":[22978,23137],"source":"The `const_iterator` defined by hash_multimap points to objects of [value_type](#hash_multimap__value_type), which are of type `pair`*\\<***constKey, Type***>*."},{"content":"The value of the key is available through the first member pair, and the value of the mapped element is available through the second member of the pair.","pos":[23138,23290]},{"pos":[23297,23405],"content":"To dereference a <ph id=\"ph1\">`const_iterator``cIter`</ph> pointing to an element in a hash_multimap, use the <bpt id=\"p1\">**</bpt><ph id=\"ph2\">-&gt;</ph><ept id=\"p1\">**</ept> operator.","source":"To dereference a `const_iterator``cIter` pointing to an element in a hash_multimap, use the **->** operator."},{"content":"To access the value of the key for the element, use <ph id=\"ph1\">`cIter`</ph><ph id=\"ph2\"> -&gt; </ph><bpt id=\"p1\">**</bpt>first<ept id=\"p1\">**</ept>, which is equivalent to (<ph id=\"ph3\">\\*</ph> <ph id=\"ph4\">`cIter`</ph>).","pos":[23412,23522],"source":"To access the value of the key for the element, use `cIter` -> **first**, which is equivalent to (\\* `cIter`)."},{"content":"<bpt id=\"p1\">**</bpt>first<ept id=\"p1\">**</ept>.","pos":[23523,23533],"source":"**first**."},{"content":"To access the value of the mapped datum for the element, use <ph id=\"ph1\">`cIter`</ph><ph id=\"ph2\"> -&gt; </ph><bpt id=\"p1\">**</bpt>second<ept id=\"p1\">**</ept>, which is equivalent to (<ph id=\"ph3\">\\*</ph> <ph id=\"ph4\">`cIter`</ph>).","pos":[23534,23654],"source":" To access the value of the mapped datum for the element, use `cIter` -> **second**, which is equivalent to (\\* `cIter`)."},{"content":"<bpt id=\"p1\">**</bpt>first<ept id=\"p1\">**</ept>.","pos":[23655,23665],"source":"**first**."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[23672,23910],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[23911,24000],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[24010,24017],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[24022,24111],"content":"See the example for <bpt id=\"p1\">[</bpt>begin<ept id=\"p1\">](#hash_multimap__begin)</ept> for an example using <ph id=\"ph1\">`const_iterator`</ph>.","source":"See the example for [begin](#hash_multimap__begin) for an example using `const_iterator`."},{"pos":[24121,24194],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__const_pointer\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::const_pointer","linkify":"<a name=\"hash_multimap__const_pointer\"></a>  hash_multimap::const_pointer","source":"<a name=\"hash_multimap__const_pointer\"></a>  hash_multimap::const_pointer"},{"pos":[24202,24330],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"pos":[24337,24410],"content":"A type that provides a pointer to a <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> element in a hash_multimap.","source":"A type that provides a pointer to a **const** element in a hash_multimap."},{"pos":[24544,24551],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[24555,24627],"content":"A type <ph id=\"ph1\">`const_pointer`</ph> cannot be used to modify the value of an element.","source":"A type `const_pointer` cannot be used to modify the value of an element."},{"pos":[24634,24753],"content":"In most cases, an <bpt id=\"p1\">[</bpt>iterator<ept id=\"p1\">](#hash_multimap__iterator)</ept> should be used to access the elements in a hash_multimap object.","source":"In most cases, an [iterator](#hash_multimap__iterator) should be used to access the elements in a hash_multimap object."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[24760,24998],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[24999,25088],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[25098,25175],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__const_reference\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::const_reference","linkify":"<a name=\"hash_multimap__const_reference\"></a>  hash_multimap::const_reference","source":"<a name=\"hash_multimap__const_reference\"></a>  hash_multimap::const_reference"},{"pos":[25183,25311],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"pos":[25318,25448],"content":"A type that provides a reference to a <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> element stored in a hash_multimap for reading and performing <bpt id=\"p2\">**</bpt>const<ept id=\"p2\">**</ept> operations.","source":"A type that provides a reference to a **const** element stored in a hash_multimap for reading and performing **const** operations."},{"pos":[25586,25593],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[25597,25835],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[25836,25925],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[25935,25942],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[27117,27208],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__const_reverse_iterator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::const_reverse_iterator","linkify":"<a name=\"hash_multimap__const_reverse_iterator\"></a>  hash_multimap::const_reverse_iterator","source":"<a name=\"hash_multimap__const_reverse_iterator\"></a>  hash_multimap::const_reverse_iterator"},{"pos":[27216,27344],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"pos":[27351,27454],"content":"A type that provides a bidirectional iterator that can read any <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> element in the hash_multimap.","source":"A type that provides a bidirectional iterator that can read any **const** element in the hash_multimap."},{"pos":[27604,27611],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[27615,27744],"content":"A type <ph id=\"ph1\">`const_reverse_iterator`</ph> cannot modify the value of an element and is use to iterate through the hash_multimap in reverse.","source":"A type `const_reverse_iterator` cannot modify the value of an element and is use to iterate through the hash_multimap in reverse."},{"pos":[27751,28027],"content":"The <ph id=\"ph1\">`const_reverse_iterator`</ph> defined by hash_multimap points to objects of <bpt id=\"p1\">[</bpt>value_type<ept id=\"p1\">](#hash_multimap__value_type)</ept>, which are of type <ph id=\"ph2\">`pair`</ph><bpt id=\"p2\">*</bpt><ph id=\"ph3\">\\&lt;</ph><ept id=\"p2\">*</ept><bpt id=\"p3\">**</bpt>const Key, Type&gt;<ept id=\"p3\">**</ept>, whose first member is the key to the element and whose second member is the mapped datum held by the element.","source":"The `const_reverse_iterator` defined by hash_multimap points to objects of [value_type](#hash_multimap__value_type), which are of type `pair`*\\<***const Key, Type>**, whose first member is the key to the element and whose second member is the mapped datum held by the element."},{"pos":[28034,28151],"content":"To dereference a <ph id=\"ph1\">`const_reverse_iterator``crIter`</ph> pointing to an element in a hash_multimap, use the <bpt id=\"p1\">**</bpt><ph id=\"ph2\">-&gt;</ph><ept id=\"p1\">**</ept> operator.","source":"To dereference a `const_reverse_iterator``crIter` pointing to an element in a hash_multimap, use the **->** operator."},{"content":"To access the value of the key for the element, use <ph id=\"ph1\">`crIter`</ph><ph id=\"ph2\"> -&gt; </ph><bpt id=\"p1\">**</bpt>first<ept id=\"p1\">**</ept>, which is equivalent to (<ph id=\"ph3\">\\*</ph> <ph id=\"ph4\">`crIter`</ph>).","pos":[28158,28270],"source":"To access the value of the key for the element, use `crIter` -> **first**, which is equivalent to (\\* `crIter`)."},{"content":"<bpt id=\"p1\">**</bpt>first<ept id=\"p1\">**</ept>.","pos":[28271,28281],"source":"**first**."},{"content":"To access the value of the mapped datum for the element, use <ph id=\"ph1\">`crIter`</ph><ph id=\"ph2\"> -&gt; </ph><bpt id=\"p1\">**</bpt>second<ept id=\"p1\">**</ept>, which is equivalent to (<ph id=\"ph3\">\\*</ph> <ph id=\"ph4\">`crIter`</ph>).","pos":[28282,28404],"source":" To access the value of the mapped datum for the element, use `crIter` -> **second**, which is equivalent to (\\* `crIter`)."},{"content":"<bpt id=\"p1\">**</bpt>first<ept id=\"p1\">**</ept>.","pos":[28405,28415],"source":"**first**."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[28422,28660],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[28661,28750],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[28760,28767],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[28772,28891],"content":"See the example for <bpt id=\"p1\">[</bpt>rend<ept id=\"p1\">](#hash_multimap__rend)</ept> for an example of how to declare and use the <ph id=\"ph1\">`const_reverse_iterator`</ph>.","source":"See the example for [rend](#hash_multimap__rend) for an example of how to declare and use the `const_reverse_iterator`."},{"pos":[28901,28958],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__count\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::count","linkify":"<a name=\"hash_multimap__count\"></a>  hash_multimap::count","source":"<a name=\"hash_multimap__count\"></a>  hash_multimap::count"},{"pos":[28966,29094],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"Returns the number of elements in a hash_multimap whose key matches a parameter-specified key.","pos":[29101,29195]},{"pos":[29259,29269],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The key of the elements to be matched from the hash_multimap.","pos":[29283,29344]},{"pos":[29354,29366],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the hash_multimap contains an element whose sort key matches the parameter key; 0 if the hash_multimap doesn't contain an element with a matching key.","pos":[29370,29525]},{"pos":[29535,29542],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The member function returns the number of elements in the range","pos":[29546,29609]},{"pos":[29616,29677],"content":"<bpt id=\"p1\">**</bpt>[lower_bound (<ept id=\"p1\">**</ept> <ph id=\"ph1\">` key`</ph> <bpt id=\"p2\">**</bpt>), upper_bound (<ept id=\"p2\">**</ept> <ph id=\"ph2\">` key`</ph> <bpt id=\"p3\">**</bpt>) )<ept id=\"p3\">**</ept>","source":"**[lower_bound (** ` key` **), upper_bound (** ` key` **) )**"},{"pos":[29684,29714],"content":"which have a key value <ph id=\"ph1\">` key`</ph>.","source":"which have a key value ` key`."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[29721,29959],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[29960,30049],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[30059,30066],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates the use of the hash_multimap::count member function.","pos":[30071,30158]},{"pos":[31329,31390],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__crbegin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::crbegin","linkify":"<a name=\"hash_multimap__crbegin\"></a>  hash_multimap::crbegin","source":"<a name=\"hash_multimap__crbegin\"></a>  hash_multimap::crbegin"},{"pos":[31398,31526],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"Returns a const iterator addressing the first element in a reversed hash_multimap.","pos":[31533,31615]},{"pos":[31680,31692],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[31696,31917],"content":"A const reverse bidirectional iterator addressing the first element in a reversed <bpt id=\"p1\">[</bpt>hash_multimap<ept id=\"p1\">](../standard-library/hash-multimap-class.md)</ept> or addressing what had been the last element in the unreversed <ph id=\"ph1\">`hash_multimap`</ph>.","source":"A const reverse bidirectional iterator addressing the first element in a reversed [hash_multimap](../standard-library/hash-multimap-class.md) or addressing what had been the last element in the unreversed `hash_multimap`."},{"pos":[31927,31934],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[31938,32071],"content":"<ph id=\"ph1\">`crbegin`</ph> is used with a reversed hash_multimap just as <bpt id=\"p1\">[</bpt>hash_multimap::begin<ept id=\"p1\">](#hash_multimap__begin)</ept> is used with a <ph id=\"ph2\">`hash_multimap`</ph>.","source":"`crbegin` is used with a reversed hash_multimap just as [hash_multimap::begin](#hash_multimap__begin) is used with a `hash_multimap`."},{"pos":[32078,32160],"content":"With the return value of <ph id=\"ph1\">`crbegin`</ph>, the <ph id=\"ph2\">`hash_multimap`</ph> object cannot be modified.","source":"With the return value of `crbegin`, the `hash_multimap` object cannot be modified."},{"pos":[32167,32236],"content":"<ph id=\"ph1\">`crbegin`</ph> can be used to iterate through a <ph id=\"ph2\">`hash_multimap`</ph> backwards.","source":"`crbegin` can be used to iterate through a `hash_multimap` backwards."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[32243,32481],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[32482,32571],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[32581,32588],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[33227,33284],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__crend\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::crend","linkify":"<a name=\"hash_multimap__crend\"></a>  hash_multimap::crend","source":"<a name=\"hash_multimap__crend\"></a>  hash_multimap::crend"},{"pos":[33292,33420],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"Returns a const iterator that addresses the location succeeding the last element in a reversed hash_multimap.","pos":[33427,33536]},{"pos":[33599,33611],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[33615,33869],"content":"A const reverse bidirectional iterator that addresses the location succeeding the last element in a reversed <bpt id=\"p1\">[</bpt>hash_multimap<ept id=\"p1\">](../standard-library/hash-multimap-class.md)</ept> (the location that had preceded the first element in the unreversed <ph id=\"ph1\">`hash_multimap`</ph>).","source":"A const reverse bidirectional iterator that addresses the location succeeding the last element in a reversed [hash_multimap](../standard-library/hash-multimap-class.md) (the location that had preceded the first element in the unreversed `hash_multimap`)."},{"pos":[33879,33886],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[33890,34015],"content":"<ph id=\"ph1\">`crend`</ph> is used with a reversed hash_multimap just as <bpt id=\"p1\">[</bpt>hash_multimap::end<ept id=\"p1\">](#hash_multimap__end)</ept> is used with a hash_multimap.","source":"`crend` is used with a reversed hash_multimap just as [hash_multimap::end](#hash_multimap__end) is used with a hash_multimap."},{"pos":[34022,34102],"content":"With the return value of <ph id=\"ph1\">`crend`</ph>, the <ph id=\"ph2\">`hash_multimap`</ph> object cannot be modified.","source":"With the return value of `crend`, the `hash_multimap` object cannot be modified."},{"pos":[34109,34208],"content":"<ph id=\"ph1\">`crend`</ph> can be used to test to whether a reverse iterator has reached the end of its hash_multimap.","source":"`crend` can be used to test to whether a reverse iterator has reached the end of its hash_multimap."},{"pos":[34215,34272],"content":"The value returned by <ph id=\"ph1\">`crend`</ph> should not be dereferenced.","source":"The value returned by `crend` should not be dereferenced."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[34279,34517],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[34518,34607],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[34617,34624],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[35276,35353],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__difference_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::difference_type","linkify":"<a name=\"hash_multimap__difference_type\"></a>  hash_multimap::difference_type","source":"<a name=\"hash_multimap__difference_type\"></a>  hash_multimap::difference_type"},{"pos":[35361,35489],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"A signed integer type that can be used to represent the number of elements of a hash_multimap in a range between elements pointed to by iterators.","pos":[35496,35642]},{"pos":[35780,35787],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`difference_type`</ph> is the type returned when subtracting or incrementing through iterators of the container.","pos":[35791,35902],"source":"The `difference_type` is the type returned when subtracting or incrementing through iterators of the container."},{"content":"The <ph id=\"ph1\">`difference_type`</ph> is typically used to represent the number of elements in the range <bpt id=\"p1\">*</bpt>[ first,  last)<ept id=\"p1\">*</ept> between the iterators <ph id=\"ph2\">` first`</ph> and <ph id=\"ph3\">` last`</ph>, includes the element pointed to by <ph id=\"ph4\">` first`</ph> and the range of elements up to, but not including, the element pointed to by <ph id=\"ph5\">` last`</ph>.","pos":[35903,36184],"source":" The `difference_type` is typically used to represent the number of elements in the range *[ first,  last)* between the iterators ` first` and ` last`, includes the element pointed to by ` first` and the range of elements up to, but not including, the element pointed to by ` last`."},{"pos":[36191,36539],"content":"Note that although <ph id=\"ph1\">`difference_type`</ph> is available for all iterators that satisfy the requirements of an input iterator, which includes the class of bidirectional iterators supported by reversible containers such as set, subtraction between iterators is only supported by random-access iterators provided by a random-access container such as vector.","source":"Note that although `difference_type` is available for all iterators that satisfy the requirements of an input iterator, which includes the class of bidirectional iterators supported by reversible containers such as set, subtraction between iterators is only supported by random-access iterators provided by a random-access container such as vector."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[36546,36784],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[36785,36874],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[36884,36891],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[38526,38587],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__emplace\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::emplace","linkify":"<a name=\"hash_multimap__emplace\"></a>  hash_multimap::emplace","source":"<a name=\"hash_multimap__emplace\"></a>  hash_multimap::emplace"},{"pos":[38595,38723],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"Inserts an element constructed in place into a hash_multimap.","pos":[38730,38791]},{"pos":[38872,38882],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[38903,38912]},{"content":"Description","pos":[38913,38924]},{"pos":[38936,39064],"content":"The value used to move construct an element to be inserted into the <bpt id=\"p1\">[</bpt>hash_multimap<ept id=\"p1\">](../standard-library/hash-multimap-class.md)</ept>.","source":"The value used to move construct an element to be inserted into the [hash_multimap](../standard-library/hash-multimap-class.md)."},{"pos":[39075,39087],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39091,39204],"content":"The <ph id=\"ph1\">`emplace`</ph> member function returns an iterator that points to the position where the new element was inserted.","source":"The `emplace` member function returns an iterator that points to the position where the new element was inserted."},{"pos":[39214,39221],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[39225,39478],"content":"The <bpt id=\"p1\">[</bpt>hash_multimap::value_type<ept id=\"p1\">](#hash_multimap__value_type)</ept> of an element is a pair, so that the value of an element will be an ordered pair with the first component equal to the key value and the second component equal to the data value of the element.","source":"The [hash_multimap::value_type](#hash_multimap__value_type) of an element is a pair, so that the value of an element will be an ordered pair with the first component equal to the key value and the second component equal to the data value of the element."},{"content":"Beginning with Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[39485,39735],"source":"Beginning with Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[39736,39825],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[39835,39842],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[40418,40489],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__emplace_hint\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::emplace_hint","linkify":"<a name=\"hash_multimap__emplace_hint\"></a>  hash_multimap::emplace_hint","source":"<a name=\"hash_multimap__emplace_hint\"></a>  hash_multimap::emplace_hint"},{"pos":[40497,40625],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"Inserts an element constructed in place into a hash_multimap, with a placement hint.","pos":[40632,40716]},{"pos":[40836,40846],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[40867,40876]},{"content":"Description","pos":[40877,40888]},{"pos":[40900,41152],"content":"The value used to move construct an element to be inserted into the <bpt id=\"p1\">[</bpt>hash_multimap<ept id=\"p1\">](../standard-library/hash-multimap-class.md)</ept> unless the <ph id=\"ph1\">`hash_multimap`</ph> already contains that element (or, more generally, an element whose key is equivalently ordered).","source":"The value used to move construct an element to be inserted into the [hash_multimap](../standard-library/hash-multimap-class.md) unless the `hash_multimap` already contains that element (or, more generally, an element whose key is equivalently ordered)."},{"content":"A hint regarding the place to start searching for the correct point of insertion.","pos":[41166,41247]},{"pos":[41258,41270],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[41274,41452],"content":"The <bpt id=\"p1\">[</bpt>hash_multimap::emplace<ept id=\"p1\">](#hash_multimap__emplace)</ept> member function returns an iterator that points to the position where the new element was inserted into the <ph id=\"ph1\">`hash_multimap`</ph>.","source":"The [hash_multimap::emplace](#hash_multimap__emplace) member function returns an iterator that points to the position where the new element was inserted into the `hash_multimap`."},{"pos":[41462,41469],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[41473,41726],"content":"The <bpt id=\"p1\">[</bpt>hash_multimap::value_type<ept id=\"p1\">](#hash_multimap__value_type)</ept> of an element is a pair, so that the value of an element will be an ordered pair with the first component equal to the key value and the second component equal to the data value of the element.","source":"The [hash_multimap::value_type](#hash_multimap__value_type) of an element is a pair, so that the value of an element will be an ordered pair with the first component equal to the key value and the second component equal to the data value of the element."},{"pos":[41733,41862],"content":"Insertion can occur in amortized constant time, instead of logarithmic time, if the insertion point immediately follows <ph id=\"ph1\">`_Where`</ph>.","source":"Insertion can occur in amortized constant time, instead of logarithmic time, if the insertion point immediately follows `_Where`."},{"content":"Beginning with Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[41869,42119],"source":"Beginning with Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[42120,42209],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[42219,42226],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[42830,42887],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__empty\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::empty","linkify":"<a name=\"hash_multimap__empty\"></a>  hash_multimap::empty","source":"<a name=\"hash_multimap__empty\"></a>  hash_multimap::empty"},{"pos":[42895,43023],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"Tests if a hash_multimap is empty.","pos":[43030,43064]},{"pos":[43109,43121],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[43125,43208],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the hash_multimap is empty; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if the hash_multimap is nonempty.","source":"**true** if the hash_multimap is empty; **false** if the hash_multimap is nonempty."},{"pos":[43218,43225],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[43229,43467],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[43468,43557],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[43567,43574],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[44314,44367],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__end\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::end","linkify":"<a name=\"hash_multimap__end\"></a>  hash_multimap::end","source":"<a name=\"hash_multimap__end\"></a>  hash_multimap::end"},{"pos":[44375,44503],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"Returns an iterator that addresses the location succeeding the last element in a hash_multimap.","pos":[44510,44605]},{"pos":[44675,44687],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A bidirectional iterator that addresses the location succeeding the last element in a hash_multimap.","pos":[44691,44791]},{"content":"If the hash_multimap is empty, then hash_multimap::end == hash_multimap::begin.","pos":[44792,44871]},{"pos":[44881,44888],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[44892,44977],"content":"<bpt id=\"p1\">**</bpt>end<ept id=\"p1\">**</ept> is used to test whether an iterator has reached the end of its hash_multimap.","source":"**end** is used to test whether an iterator has reached the end of its hash_multimap."},{"pos":[44984,45041],"content":"The value returned by <bpt id=\"p1\">**</bpt>end<ept id=\"p1\">**</ept> should not be dereferenced.","source":"The value returned by **end** should not be dereferenced."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[45048,45286],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[45287,45376],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[45386,45393],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[46561,46630],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__equal_range\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::equal_range","linkify":"<a name=\"hash_multimap__equal_range\"></a>  hash_multimap::equal_range","source":"<a name=\"hash_multimap__equal_range\"></a>  hash_multimap::equal_range"},{"pos":[46638,46766],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"Returns a pair of iterators respectively to the first element in a hash_multimap with a key that is greater than a specified key and to the first element in the hash_multimap with a key that is equal to or greater than the key.","pos":[46773,47000]},{"pos":[47156,47166],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The argument key to be compared with the sort key of an element from the hash_multimap being searched.","pos":[47180,47282]},{"pos":[47292,47304],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[47308,47485],"content":"A pair of iterators such that the first is the <bpt id=\"p1\">[</bpt>lower_bound<ept id=\"p1\">](#hash_multimap__lower_bound)</ept> of the key and the second is the <bpt id=\"p2\">[</bpt>upper_bound<ept id=\"p2\">](#hash_multimap__upper_bound)</ept> of the key.","source":"A pair of iterators such that the first is the [lower_bound](#hash_multimap__lower_bound) of the key and the second is the [upper_bound](#hash_multimap__upper_bound) of the key."},{"content":"To access the first iterator of a pair <ph id=\"ph1\">`pr`</ph> returned by the member function, use <ph id=\"ph2\">`pr`</ph>.","pos":[47492,47578],"source":"To access the first iterator of a pair `pr` returned by the member function, use `pr`."},{"content":"<bpt id=\"p1\">**</bpt>first<ept id=\"p1\">**</ept> and to dereference the lower bound iterator, use <ph id=\"ph1\">\\*</ph>( <ph id=\"ph2\">`pr`</ph>.","pos":[47579,47647],"source":"**first** and to dereference the lower bound iterator, use \\*( `pr`."},{"content":"<bpt id=\"p1\">**</bpt>first<ept id=\"p1\">**</ept>).","pos":[47648,47659],"source":"**first**)."},{"content":"To access the second iterator of a pair <ph id=\"ph1\">`pr`</ph> returned by the member function, use <ph id=\"ph2\">`pr`</ph>.","pos":[47660,47747],"source":" To access the second iterator of a pair `pr` returned by the member function, use `pr`."},{"content":"<bpt id=\"p1\">**</bpt>second<ept id=\"p1\">**</ept> and to dereference the upper bound iterator, use <ph id=\"ph1\">\\*</ph>( <ph id=\"ph2\">`pr`</ph>.","pos":[47748,47817],"source":"**second** and to dereference the upper bound iterator, use \\*( `pr`."},{"content":"<bpt id=\"p1\">**</bpt>second<ept id=\"p1\">**</ept>).","pos":[47818,47830],"source":"**second**)."},{"pos":[47840,47847],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[47851,48089],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[48090,48179],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[48189,48196],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[50256,50313],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__erase\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::erase","linkify":"<a name=\"hash_multimap__erase\"></a>  hash_multimap::erase","source":"<a name=\"hash_multimap__erase\"></a>  hash_multimap::erase"},{"pos":[50321,50449],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"Removes an element or a range of elements in a hash_multimap from specified positions or removes elements that match a specified key.","pos":[50456,50589]},{"pos":[50734,50744],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Position of the element to be removed from the hash_multimap.","pos":[50760,50821]},{"content":"Position of the first element removed from the hash_multimap.","pos":[50840,50901]},{"content":"Position just beyond the last element removed from the hash_multimap.","pos":[50919,50988]},{"content":"The key of the elements to be removed from the hash_multimap.","pos":[51005,51066]},{"pos":[51076,51088],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"For the first two member functions, a bidirectional iterator that designates the first element remaining beyond any elements removed, or a pointer to the end of the hash_multimap if no such element exists.","pos":[51092,51297]},{"content":"For the third member function, returns the number of elements that have been removed from the hash_multimap.","pos":[51304,51412]},{"pos":[51422,51429],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The member functions never throw an exception.","pos":[51433,51479]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[51486,51724],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[51725,51814],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[51824,51831],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates the use of the hash_multimap::erase member function.","pos":[51836,51923]},{"pos":[54661,54716],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__find\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::find","linkify":"<a name=\"hash_multimap__find\"></a>  hash_multimap::find","source":"<a name=\"hash_multimap__find\"></a>  hash_multimap::find"},{"pos":[54724,54852],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"Returns an iterator addressing the first location of an element in a hash_multimap that has a key equivalent to a specified key.","pos":[54859,54987]},{"pos":[55087,55097],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The key to be matched by the sort key of an element from the hash_multimap being searched.","pos":[55111,55201]},{"pos":[55211,55223],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An iterator that addresses the first location of an element with a specified key, or the location succeeding the last element in the hash_multimap if no match is found for the key.","pos":[55227,55407]},{"pos":[55417,55424],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[55428,55662],"content":"The member function returns an iterator that addresses an element in the hash_multimap whose sort key is <bpt id=\"p1\">**</bpt>equivalent<ept id=\"p1\">**</ept> to the argument key under a binary predicate that induces an ordering based on a less than comparability relation.","source":"The member function returns an iterator that addresses an element in the hash_multimap whose sort key is **equivalent** to the argument key under a binary predicate that induces an ordering based on a less than comparability relation."},{"content":"If the return value of <bpt id=\"p1\">**</bpt>find<ept id=\"p1\">**</ept> is assigned to a <ph id=\"ph1\">`const_iterator`</ph>, the hash_multimap object cannot be modified.","pos":[55669,55780],"source":"If the return value of **find** is assigned to a `const_iterator`, the hash_multimap object cannot be modified."},{"content":"If the return value of <bpt id=\"p1\">**</bpt>find<ept id=\"p1\">**</ept> is assigned to an <bpt id=\"p2\">**</bpt>iterator<ept id=\"p2\">**</ept>, the hash_multimap object can be modified.","pos":[55781,55886],"source":" If the return value of **find** is assigned to an **iterator**, the hash_multimap object can be modified."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[55893,56131],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[56132,56221],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[56231,56238],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[58550,58623],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__get_allocator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::get_allocator","linkify":"<a name=\"hash_multimap__get_allocator\"></a>  hash_multimap::get_allocator","source":"<a name=\"hash_multimap__get_allocator\"></a>  hash_multimap::get_allocator"},{"pos":[58631,58759],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"Returns a copy of the allocator object used to construct the hash_multimap.","pos":[58766,58841]},{"pos":[58899,58911],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The allocator used by the hash_multimap.","pos":[58915,58955]},{"pos":[58965,58972],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Allocators for the hash_multimap class specify how the class manages storage.","pos":[58976,59053]},{"content":"The default allocators supplied with STL container classes is sufficient for most programming needs.","pos":[59054,59154]},{"content":"Writing and using your own allocator class is an advanced C++ topic.","pos":[59155,59223]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[59230,59468],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[59469,59558],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[59568,59575],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[61240,61313],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__hash_multimap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::hash_multimap","linkify":"<a name=\"hash_multimap__hash_multimap\"></a>  hash_multimap::hash_multimap","source":"<a name=\"hash_multimap__hash_multimap\"></a>  hash_multimap::hash_multimap"},{"pos":[61321,61449],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"Constructs a hash_multimap that is empty or is a copy of all or part of some other hash_multimap.","pos":[61456,61553]},{"pos":[62419,62429],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[62450,62459]},{"content":"Description","pos":[62460,62471]},{"pos":[62481,62581],"content":"The storage allocator class to be used for this hash_multimap object, which defaults to <ph id=\"ph1\">`Allocator`</ph>.","source":"The storage allocator class to be used for this hash_multimap object, which defaults to `Allocator`."},{"pos":[62593,62707],"content":"The comparison function of type <ph id=\"ph1\">`const``Traits`</ph> used to order the elements in the map, which defaults to <ph id=\"ph2\">`Traits`</ph>.","source":"The comparison function of type `const``Traits` used to order the elements in the map, which defaults to `Traits`."},{"content":"The map of which the constructed set is to be a copy.","pos":[62720,62773]},{"content":"The position of the first element in the range of elements to be copied.","pos":[62786,62858]},{"content":"The position of the first element beyond the range of elements to be copied.","pos":[62870,62946]},{"content":"The initializer_list to copy from.","pos":[62959,62993]},{"pos":[63004,63011],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"All constructors store a type of allocator object that manages memory storage for the hash_multimap and that can later be returned by calling <bpt id=\"p1\">[</bpt>get_allocator<ept id=\"p1\">](#hash_multimap__get_allocator)</ept>.","pos":[63015,63204],"source":"All constructors store a type of allocator object that manages memory storage for the hash_multimap and that can later be returned by calling [get_allocator](#hash_multimap__get_allocator)."},{"content":"The allocator parameter is often omitted in the class declarations and preprocessing macros are used to substitute alternative allocators.","pos":[63205,63343]},{"content":"All constructors initialize their hash_multimap.","pos":[63350,63398]},{"pos":[63405,63608],"content":"All constructors store a function object of type <ph id=\"ph1\">`Traits`</ph> that is used to establish an order among the keys of the hash_multimap and can later be returned by calling <bpt id=\"p1\">[</bpt>key_comp<ept id=\"p1\">](#hash_multimap__key_comp)</ept>.","source":"All constructors store a function object of type `Traits` that is used to establish an order among the keys of the hash_multimap and can later be returned by calling [key_comp](#hash_multimap__key_comp)."},{"content":"The first three constructors specify an empty initial hash_multimap; the second specifies the type of comparison function ( <ph id=\"ph1\">`Comp`</ph>) to be used in establishing the order of the elements and the third explicitly specifies the allocator type ( <ph id=\"ph2\">`_Al`</ph>) to be used.","pos":[63615,63874],"source":"The first three constructors specify an empty initial hash_multimap; the second specifies the type of comparison function ( `Comp`) to be used in establishing the order of the elements and the third explicitly specifies the allocator type ( `_Al`) to be used."},{"content":"The keyword <ph id=\"ph1\">`explicit`</ph> suppresses certain kinds of automatic type conversion.","pos":[63875,63952],"source":" The keyword `explicit` suppresses certain kinds of automatic type conversion."},{"pos":[63959,64028],"content":"The fourth constructor specifies a copy of the hash_multimap <ph id=\"ph1\">`Right`</ph>.","source":"The fourth constructor specifies a copy of the hash_multimap `Right`."},{"pos":[64035,64211],"content":"The next three constructors copy the range <ph id=\"ph1\">`First, Last)`</ph> of a map with increasing explicitness in specifying the type of comparison function of class <bpt id=\"p1\">**</bpt>Traits<ept id=\"p1\">**</ept> and allocator.","source":"The next three constructors copy the range `First, Last)` of a map with increasing explicitness in specifying the type of comparison function of class **Traits** and allocator."},{"pos":[64218,64273],"content":"The eighth constructor moves the hash_multimap <ph id=\"ph1\">`Right`</ph>.","source":"The eighth constructor moves the hash_multimap `Right`."},{"content":"The final three constructors use an initializer_list.","pos":[64280,64333]},{"pos":[64343,64402],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__insert\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::insert","linkify":"<a name=\"hash_multimap__insert\"></a>  hash_multimap::insert","source":"<a name=\"hash_multimap__insert\"></a>  hash_multimap::insert"},{"pos":[64410,64538],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"Inserts an element or a range of elements into a hash_multimap.","pos":[64545,64608]},{"pos":[65054,65064],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[65085,65094]},{"content":"Description","pos":[65095,65106]},{"content":"The value of an element to be inserted into the hash_multimap unless it already contains that element, or more generally, unless it already contains an element whose key is equivalently ordered.","pos":[65117,65311]},{"content":"A hint about where to start searching for the correct point of insertion.","pos":[65324,65397]},{"content":"The position of the first element to be copied from a map.","pos":[65410,65468]},{"content":"The position just beyond the last element to be copied from a map.","pos":[65480,65546]},{"pos":[65557,65569],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[65573,65695],"content":"The first two <ph id=\"ph1\">`insert`</ph> member functions return an iterator that points to the position where the new element was inserted.","source":"The first two `insert` member functions return an iterator that points to the position where the new element was inserted."},{"content":"The third member function uses an initializer_list for the elements to be inserted.","pos":[65702,65785]},{"pos":[65792,65975],"content":"The fourth member function inserts the sequence of element values into a map that corresponds to each element addressed by an iterator in the range <ph id=\"ph1\">`[First, Last)`</ph> of a specified set.","source":"The fourth member function inserts the sequence of element values into a map that corresponds to each element addressed by an iterator in the range `[First, Last)` of a specified set."},{"pos":[65982,66106],"content":"The last two <ph id=\"ph1\">`insert`</ph> member functions behave the same as the first two, except that they move-construct the inserted value.","source":"The last two `insert` member functions behave the same as the first two, except that they move-construct the inserted value."},{"pos":[66116,66123],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[66127,66375],"content":"The <bpt id=\"p1\">[</bpt>value_type<ept id=\"p1\">](#hash_multimap__value_type)</ept> of an element is a pair, so that the value of an element will be an ordered pair in which the first component is equal to the key value and the second component is equal to the data value of the element.","source":"The [value_type](#hash_multimap__value_type) of an element is a pair, so that the value of an element will be an ordered pair in which the first component is equal to the key value and the second component is equal to the data value of the element."},{"pos":[66382,66543],"content":"Insertion can occur in amortized constant time for the hint version of <ph id=\"ph1\">`insert`</ph>, instead of logarithmic time, if the insertion point immediately follows <ph id=\"ph2\">`Where`</ph>.","source":"Insertion can occur in amortized constant time for the hint version of `insert`, instead of logarithmic time, if the insertion point immediately follows `Where`."},{"pos":[66553,66616],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__iterator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::iterator","linkify":"<a name=\"hash_multimap__iterator\"></a>  hash_multimap::iterator","source":"<a name=\"hash_multimap__iterator\"></a>  hash_multimap::iterator"},{"pos":[66624,66752],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"A type that provides a bidirectional iterator that can read or modify any element in a hash_multimap.","pos":[66759,66860]},{"pos":[66982,66989],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[66993,67256],"content":"The <bpt id=\"p1\">**</bpt>iterator<ept id=\"p1\">**</ept> defined by hash_multimap points to objects of <bpt id=\"p2\">[</bpt>value_type<ept id=\"p2\">](#hash_multimap__value_type)</ept>, which are of type <ph id=\"ph1\">`pair`</ph><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p3\">**</bpt>const Key, Type<ept id=\"p3\">**</ept>&gt;, whose first member is the key to the element and whose second member is the mapped datum held by the element.","source":"The **iterator** defined by hash_multimap points to objects of [value_type](#hash_multimap__value_type), which are of type `pair`\\< **const Key, Type**>, whose first member is the key to the element and whose second member is the mapped datum held by the element."},{"pos":[67263,67367],"content":"To dereference an <bpt id=\"p1\">**</bpt>iterator<ept id=\"p1\">**</ept><ph id=\"ph1\">`Iter`</ph> pointing to an element in a hash_multimap, use the <bpt id=\"p2\">**</bpt><ph id=\"ph2\">-&gt;</ph><ept id=\"p2\">**</ept> operator.","source":"To dereference an **iterator**`Iter` pointing to an element in a hash_multimap, use the **->** operator."},{"content":"To access the value of the key for the element, use <ph id=\"ph1\">`Iter`</ph><ph id=\"ph2\"> -&gt; </ph><bpt id=\"p1\">**</bpt>first<ept id=\"p1\">**</ept>, which is equivalent to (<ph id=\"ph3\">\\*</ph> <ph id=\"ph4\">`Iter`</ph>).","pos":[67374,67482],"source":"To access the value of the key for the element, use `Iter` -> **first**, which is equivalent to (\\* `Iter`)."},{"content":"<bpt id=\"p1\">**</bpt>first<ept id=\"p1\">**</ept>.","pos":[67483,67493],"source":"**first**."},{"content":"To access the value of the mapped datum for the element, use <ph id=\"ph1\">`Iter`</ph><ph id=\"ph2\"> -&gt; </ph><bpt id=\"p1\">**</bpt>second<ept id=\"p1\">**</ept>, which is equivalent to (<ph id=\"ph3\">\\*</ph> <ph id=\"ph4\">`Iter`</ph>).","pos":[67494,67612],"source":" To access the value of the mapped datum for the element, use `Iter` -> **second**, which is equivalent to (\\* `Iter`)."},{"content":"<bpt id=\"p1\">**</bpt>first<ept id=\"p1\">**</ept>.","pos":[67613,67623],"source":"**first**."},{"pos":[67630,67696],"content":"A type <bpt id=\"p1\">**</bpt>iterator<ept id=\"p1\">**</ept> can be used to modify the value of an element.","source":"A type **iterator** can be used to modify the value of an element."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[67703,67941],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[67942,68031],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[68041,68048],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[68053,68158],"content":"See the example for <bpt id=\"p1\">[</bpt>begin<ept id=\"p1\">](#hash_multimap__begin)</ept> for an example of how to declare and use <bpt id=\"p2\">**</bpt>iterator<ept id=\"p2\">**</ept>.","source":"See the example for [begin](#hash_multimap__begin) for an example of how to declare and use **iterator**."},{"pos":[68168,68231],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__key_comp\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::key_comp","linkify":"<a name=\"hash_multimap__key_comp\"></a>  hash_multimap::key_comp","source":"<a name=\"hash_multimap__key_comp\"></a>  hash_multimap::key_comp"},{"pos":[68239,68367],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"Retrieves a copy of the comparison object used to order keys in a hash_multimap.","pos":[68374,68454]},{"pos":[68509,68521],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the function object that a hash_multimap uses to order its elements.","pos":[68525,68601]},{"pos":[68611,68618],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The stored object defines the member function","pos":[68622,68667]},{"pos":[68674,68743],"content":"<bpt id=\"p1\">**</bpt>bool operator(const Key&amp;<ept id=\"p1\">**</ept> <ph id=\"ph1\">` left`</ph> <bpt id=\"p2\">**</bpt>, const Key&amp;<ept id=\"p2\">**</ept> <ph id=\"ph2\">` right`</ph> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**bool operator(const Key&** ` left` **, const Key&** ` right` **);**"},{"pos":[68750,68840],"content":"which returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if <ph id=\"ph1\">` left`</ph> precedes and is not equal to <ph id=\"ph2\">` right`</ph> in the sort order.","source":"which returns **true** if ` left` precedes and is not equal to ` right` in the sort order."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[68847,69085],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[69086,69175],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[69185,69192],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[70512,70581],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__key_compare\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::key_compare","linkify":"<a name=\"hash_multimap__key_compare\"></a>  hash_multimap::key_compare","source":"<a name=\"hash_multimap__key_compare\"></a>  hash_multimap::key_compare"},{"pos":[70589,70717],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"A type that provides a function object that can compare two sort keys to determine the relative order of two elements in the hash_multimap.","pos":[70724,70863]},{"pos":[70918,70925],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[70929,70994],"content":"<bpt id=\"p1\">**</bpt>key_compare<ept id=\"p1\">**</ept> is a synonym for the template parameter <ph id=\"ph1\">`Traits`</ph>.","source":"**key_compare** is a synonym for the template parameter `Traits`."},{"pos":[71001,71114],"content":"For more information on <ph id=\"ph1\">`Traits`</ph> see the <bpt id=\"p1\">[</bpt>hash_multimap Class<ept id=\"p1\">](../standard-library/hash-multimap-class.md)</ept> topic.","source":"For more information on `Traits` see the [hash_multimap Class](../standard-library/hash-multimap-class.md) topic."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[71121,71359],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[71360,71449],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[71459,71466],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[71471,71583],"content":"See the example for <bpt id=\"p1\">[</bpt>key_comp<ept id=\"p1\">](#hash_multimap__key_comp)</ept> for an example of how to declare and use <ph id=\"ph1\">`key_compare`</ph>.","source":"See the example for [key_comp](#hash_multimap__key_comp) for an example of how to declare and use `key_compare`."},{"pos":[71593,71656],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__key_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::key_type","linkify":"<a name=\"hash_multimap__key_type\"></a>  hash_multimap::key_type","source":"<a name=\"hash_multimap__key_type\"></a>  hash_multimap::key_type"},{"pos":[71664,71792],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"A type that describes the sort key object that constitutes each element of the hash_multimap.","pos":[71799,71892]},{"pos":[71941,71948],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[71952,72009],"content":"<ph id=\"ph1\">`key_type`</ph> is a synonym for the template parameter <ph id=\"ph2\">`Key`</ph>.","source":"`key_type` is a synonym for the template parameter `Key`."},{"pos":[72016,72150],"content":"For more information on <ph id=\"ph1\">`Key`</ph>, see the Remarks section of the <bpt id=\"p1\">[</bpt>hash_multimap Class<ept id=\"p1\">](../standard-library/hash-multimap-class.md)</ept> topic.","source":"For more information on `Key`, see the Remarks section of the [hash_multimap Class](../standard-library/hash-multimap-class.md) topic."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[72157,72395],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[72396,72485],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[72495,72502],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[72507,72623],"content":"See the example for <bpt id=\"p1\">[</bpt>value_type<ept id=\"p1\">](#hash_multimap__value_type)</ept> for an example of how to declare and use <ph id=\"ph1\">`key_compare`</ph>.","source":"See the example for [value_type](#hash_multimap__value_type) for an example of how to declare and use `key_compare`."},{"pos":[72633,72702],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__lower_bound\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::lower_bound","linkify":"<a name=\"hash_multimap__lower_bound\"></a>  hash_multimap::lower_bound","source":"<a name=\"hash_multimap__lower_bound\"></a>  hash_multimap::lower_bound"},{"pos":[72710,72838],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"Returns an iterator to the first element in a hash_multimap with a key that is equal to or greater than a specified key.","pos":[72845,72965]},{"pos":[73079,73089],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The argument key to be compared with the sort key of an element from the hash_multimap being searched.","pos":[73103,73205]},{"pos":[73215,73227],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[73231,73559],"content":"An <bpt id=\"p1\">[</bpt>iterator<ept id=\"p1\">](#hash_multimap__iterator)</ept> or <bpt id=\"p2\">[</bpt>const_iterator<ept id=\"p2\">](#hash_multimap__const_iterator)</ept> that addresses the location of an element in a hash_multimap with a key that is equal to or greater than the argument key, or that addresses the location succeeding the last element in the hash_multimap if no match is found for the key.","source":"An [iterator](#hash_multimap__iterator) or [const_iterator](#hash_multimap__const_iterator) that addresses the location of an element in a hash_multimap with a key that is equal to or greater than the argument key, or that addresses the location succeeding the last element in the hash_multimap if no match is found for the key."},{"content":"If the return value of <ph id=\"ph1\">`lower_bound`</ph> is assigned to a <ph id=\"ph2\">`const_iterator`</ph>, the hash_multimap object cannot be modified.","pos":[73566,73682],"source":"If the return value of `lower_bound` is assigned to a `const_iterator`, the hash_multimap object cannot be modified."},{"content":"If the return value of <ph id=\"ph1\">`lower_bound`</ph> is assigned to an <bpt id=\"p1\">**</bpt>iterator<ept id=\"p1\">**</ept>, the hash_multimap object can be modified.","pos":[73683,73793],"source":" If the return value of `lower_bound` is assigned to an **iterator**, the hash_multimap object can be modified."},{"pos":[73803,73810],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[73814,74052],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[74053,74142],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[74152,74159],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[76512,76581],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__mapped_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::mapped_type","linkify":"<a name=\"hash_multimap__mapped_type\"></a>  hash_multimap::mapped_type","source":"<a name=\"hash_multimap__mapped_type\"></a>  hash_multimap::mapped_type"},{"pos":[76589,76717],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"A type that represents the data type stored in a hash_multimap.","pos":[76724,76787]},{"pos":[76840,76847],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[76851,76912],"content":"<ph id=\"ph1\">`mapped_type`</ph> is a synonym for the template parameter <ph id=\"ph2\">`Type`</ph>.","source":"`mapped_type` is a synonym for the template parameter `Type`."},{"pos":[76919,77030],"content":"For more information on <ph id=\"ph1\">`Type`</ph> see the <bpt id=\"p1\">[</bpt>hash_multimap Class<ept id=\"p1\">](../standard-library/hash-multimap-class.md)</ept> topic.","source":"For more information on `Type` see the [hash_multimap Class](../standard-library/hash-multimap-class.md) topic."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[77037,77275],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[77276,77365],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[77375,77382],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[77387,77500],"content":"See the example for <bpt id=\"p1\">[</bpt>value_type<ept id=\"p1\">](#hash_multimap__value_type)</ept> for an example of how to declare and use <ph id=\"ph1\">`key_type`</ph>.","source":"See the example for [value_type](#hash_multimap__value_type) for an example of how to declare and use `key_type`."},{"pos":[77510,77573],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__max_size\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::max_size","linkify":"<a name=\"hash_multimap__max_size\"></a>  hash_multimap::max_size","source":"<a name=\"hash_multimap__max_size\"></a>  hash_multimap::max_size"},{"pos":[77581,77709],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"Returns the maximum length of the hash_multimap.","pos":[77716,77764]},{"pos":[77817,77829],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The maximum possible length of the hash_multimap.","pos":[77833,77882]},{"pos":[77892,77899],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[77903,78141],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[78142,78231],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[78241,78248],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[78672,78739],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::operator=","linkify":"<a name=\"hash_multimap__operator_eq\"></a>  hash_multimap::operator=","source":"<a name=\"hash_multimap__operator_eq\"></a>  hash_multimap::operator="},{"pos":[78747,78875],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"Replaces the elements of the hash_multimap with a copy of another hash_multimap.","pos":[78882,78962]},{"pos":[79091,79101],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[79122,79131]},{"content":"Description","pos":[79132,79143]},{"pos":[79157,79259],"content":"The <bpt id=\"p1\">[</bpt>hash_multimap<ept id=\"p1\">](../standard-library/hash-multimap-class.md)</ept> being copied into the <ph id=\"ph1\">`hash_multimap`</ph>.","source":"The [hash_multimap](../standard-library/hash-multimap-class.md) being copied into the `hash_multimap`."},{"pos":[79270,79277],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[79281,79424],"content":"After erasing any existing elements in a <ph id=\"ph1\">`hash_multimap`</ph>, <ph id=\"ph2\">`operator=`</ph> either copies or moves the contents of <ph id=\"ph3\">` right`</ph> into the <ph id=\"ph4\">`hash_multimap`</ph>.","source":"After erasing any existing elements in a `hash_multimap`, `operator=` either copies or moves the contents of ` right` into the `hash_multimap`."},{"pos":[79434,79441],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[80267,80328],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__pointer\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::pointer","linkify":"<a name=\"hash_multimap__pointer\"></a>  hash_multimap::pointer","source":"<a name=\"hash_multimap__pointer\"></a>  hash_multimap::pointer"},{"pos":[80336,80464],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"A type that provides a pointer to an element in a hash_multimap.","pos":[80471,80535]},{"pos":[80657,80664],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[80668,80733],"content":"A type <bpt id=\"p1\">**</bpt>pointer<ept id=\"p1\">**</ept> can be used to modify the value of an element.","source":"A type **pointer** can be used to modify the value of an element."},{"pos":[80740,80859],"content":"In most cases, an <bpt id=\"p1\">[</bpt>iterator<ept id=\"p1\">](#hash_multimap__iterator)</ept> should be used to access the elements in a hash_multimap object.","source":"In most cases, an [iterator](#hash_multimap__iterator) should be used to access the elements in a hash_multimap object."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[80866,81104],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[81105,81194],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[81204,81263],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__rbegin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::rbegin","linkify":"<a name=\"hash_multimap__rbegin\"></a>  hash_multimap::rbegin","source":"<a name=\"hash_multimap__rbegin\"></a>  hash_multimap::rbegin"},{"pos":[81271,81399],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"Returns an iterator addressing the first element in a reversed hash_multimap.","pos":[81406,81483]},{"pos":[81575,81587],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reverse bidirectional iterator addressing the first element in a reversed hash_multimap or addressing what had been the last element in the unreversed hash_multimap.","pos":[81591,81758]},{"pos":[81768,81775],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[81779,81894],"content":"<ph id=\"ph1\">`rbegin`</ph> is used with a reversed hash_multimap just as <bpt id=\"p1\">[</bpt>begin<ept id=\"p1\">](#hash_multimap__begin)</ept> is used with a hash_multimap.","source":"`rbegin` is used with a reversed hash_multimap just as [begin](#hash_multimap__begin) is used with a hash_multimap."},{"content":"If the return value of <ph id=\"ph1\">`rbegin`</ph> is assigned to a <ph id=\"ph2\">`const_reverse_iterator`</ph>, then the hash_multimap object cannot be modified.","pos":[81901,82025],"source":"If the return value of `rbegin` is assigned to a `const_reverse_iterator`, then the hash_multimap object cannot be modified."},{"content":"If the return value of <ph id=\"ph1\">`rbegin`</ph> is assigned to a <ph id=\"ph2\">`reverse_iterator`</ph>, then the hash_multimap object can be modified.","pos":[82026,82141],"source":" If the return value of `rbegin` is assigned to a `reverse_iterator`, then the hash_multimap object can be modified."},{"pos":[82148,82214],"content":"<ph id=\"ph1\">`rbegin`</ph> can be used to iterate through a hash_multimap backwards.","source":"`rbegin` can be used to iterate through a hash_multimap backwards."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[82221,82459],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[82460,82549],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[82559,82566],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[84461,84526],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__reference\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::reference","linkify":"<a name=\"hash_multimap__reference\"></a>  hash_multimap::reference","source":"<a name=\"hash_multimap__reference\"></a>  hash_multimap::reference"},{"pos":[84534,84662],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"A type that provides a reference to an element stored in a hash_multimap.","pos":[84669,84742]},{"pos":[84868,84875],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[84879,85117],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[85118,85207],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[85217,85224],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[86666,86721],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__rend\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::rend","linkify":"<a name=\"hash_multimap__rend\"></a>  hash_multimap::rend","source":"<a name=\"hash_multimap__rend\"></a>  hash_multimap::rend"},{"pos":[86729,86857],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"Returns an iterator that addresses the location succeeding the last element in a reversed hash_multimap.","pos":[86864,86968]},{"pos":[87056,87068],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reverse bidirectional iterator that addresses the location succeeding the last element in a reversed hash_multimap (the location that had preceded the first element in the unreversed hash_multimap).","pos":[87072,87272]},{"pos":[87282,87289],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[87293,87402],"content":"<ph id=\"ph1\">`rend`</ph> is used with a reversed hash_multimap just as <bpt id=\"p1\">[</bpt>end<ept id=\"p1\">](#hash_multimap__end)</ept> is used with a hash_multimap.","source":"`rend` is used with a reversed hash_multimap just as [end](#hash_multimap__end) is used with a hash_multimap."},{"content":"If the return value of <ph id=\"ph1\">`rend`</ph> is assigned to a <bpt id=\"p1\">[</bpt>const_reverse_iterator<ept id=\"p1\">](#hash_multimap__const_reverse_iterator)</ept>, then the hash_multimap object cannot be modified.","pos":[87409,87571],"source":"If the return value of `rend` is assigned to a [const_reverse_iterator](#hash_multimap__const_reverse_iterator), then the hash_multimap object cannot be modified."},{"content":"If the return value of <ph id=\"ph1\">`rend`</ph> is assigned to a <bpt id=\"p1\">[</bpt>reverse_iterator<ept id=\"p1\">](#hash_multimap__reverse_iterator)</ept>, then the hash_multimap object can be modified.","pos":[87572,87719],"source":" If the return value of `rend` is assigned to a [reverse_iterator](#hash_multimap__reverse_iterator), then the hash_multimap object can be modified."},{"pos":[87726,87824],"content":"<ph id=\"ph1\">`rend`</ph> can be used to test to whether a reverse iterator has reached the end of its hash_multimap.","source":"`rend` can be used to test to whether a reverse iterator has reached the end of its hash_multimap."},{"pos":[87831,87887],"content":"The value returned by <ph id=\"ph1\">`rend`</ph> should not be dereferenced.","source":"The value returned by `rend` should not be dereferenced."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[87894,88132],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[88133,88222],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[88232,88239],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[90155,90234],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__reverse_iterator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::reverse_iterator","linkify":"<a name=\"hash_multimap__reverse_iterator\"></a>  hash_multimap::reverse_iterator","source":"<a name=\"hash_multimap__reverse_iterator\"></a>  hash_multimap::reverse_iterator"},{"pos":[90242,90370],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"A type that provides a bidirectional iterator that can read or modify an element in a reversed hash_multimap.","pos":[90377,90486]},{"pos":[90624,90631],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[90635,90717],"content":"A type <ph id=\"ph1\">`reverse_iterator`</ph> is used to iterate through the hash_multimap in reverse.","source":"A type `reverse_iterator` is used to iterate through the hash_multimap in reverse."},{"content":"The <ph id=\"ph1\">`reverse_iterator`</ph> defined by hash_multimap points to objects of <bpt id=\"p1\">[</bpt>value_type<ept id=\"p1\">](#hash_multimap__value_type)</ept>, which are of type <ph id=\"ph2\">`pair`</ph><ph id=\"ph3\">\\&lt;</ph> <bpt id=\"p2\">**</bpt>const Key, Type<ept id=\"p2\">**</ept>&gt;.","pos":[90724,90883],"source":"The `reverse_iterator` defined by hash_multimap points to objects of [value_type](#hash_multimap__value_type), which are of type `pair`\\< **const Key, Type**>."},{"content":"The value of the key is available through the first member pair and the value of the mapped element is available through the second member of the pair.","pos":[90884,91035]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[91042,91280],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[91281,91370],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[91380,91387],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[91392,91505],"content":"See the example for <bpt id=\"p1\">[</bpt>rbegin<ept id=\"p1\">](#hash_multimap__rbegin)</ept> for an example of how to declare and use <ph id=\"ph1\">`reverse_iterator`</ph>.","source":"See the example for [rbegin](#hash_multimap__rbegin) for an example of how to declare and use `reverse_iterator`."},{"pos":[91515,91570],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__size\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::size","linkify":"<a name=\"hash_multimap__size\"></a>  hash_multimap::size","source":"<a name=\"hash_multimap__size\"></a>  hash_multimap::size"},{"pos":[91578,91706],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"Returns the number of elements in the hash_multimap.","pos":[91713,91765]},{"pos":[91814,91826],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current length of the hash_multimap.","pos":[91830,91870]},{"pos":[91880,91887],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[91891,92129],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[92130,92219],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[92229,92236],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates the use of the hash_multimap::size member function.","pos":[92241,92327]},{"pos":[92999,93064],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__size_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::size_type","linkify":"<a name=\"hash_multimap__size_type\"></a>  hash_multimap::size_type","source":"<a name=\"hash_multimap__size_type\"></a>  hash_multimap::size_type"},{"pos":[93072,93200],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"An unsigned integer type that counts the number of elements in a hash_multimap.","pos":[93207,93286]},{"pos":[93412,93419],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[93423,93661],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[93662,93751],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[93761,93768],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[93773,93874],"content":"See the example for <bpt id=\"p1\">[</bpt>size<ept id=\"p1\">](#hash_multimap__size)</ept> for an example of how to declare and use <ph id=\"ph1\">`size_type`</ph>","source":"See the example for [size](#hash_multimap__size) for an example of how to declare and use `size_type`"},{"pos":[93884,93939],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__swap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::swap","linkify":"<a name=\"hash_multimap__swap\"></a>  hash_multimap::swap","source":"<a name=\"hash_multimap__swap\"></a>  hash_multimap::swap"},{"pos":[93947,94075],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"Exchanges the elements of two hash_multimaps.","pos":[94082,94127]},{"pos":[94185,94195],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The hash_multimap providing the elements to be swapped or the hash_multimap whose elements are to be exchanged with those of the hash_multimap.","pos":[94211,94354]},{"pos":[94364,94371],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The member function invalidates no references, pointers, or iterators that designate elements in the two hash_multimaps whose elements are being exchanged.","pos":[94375,94530]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[94537,94775],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[94776,94865],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[94875,94882],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[96427,96496],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__upper_bound\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::upper_bound","linkify":"<a name=\"hash_multimap__upper_bound\"></a>  hash_multimap::upper_bound","source":"<a name=\"hash_multimap__upper_bound\"></a>  hash_multimap::upper_bound"},{"pos":[96504,96632],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"Returns an iterator to the first element in a hash_multimap with a key that is greater than a specified key.","pos":[96639,96747]},{"pos":[96861,96871],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The argument key to be compared with the sort key of an element from the hash_multimap being searched.","pos":[96885,96987]},{"pos":[96997,97009],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[97013,97329],"content":"An <bpt id=\"p1\">[</bpt>iterator<ept id=\"p1\">](#hash_multimap__iterator)</ept> or <bpt id=\"p2\">[</bpt>const_iterator<ept id=\"p2\">](#hash_multimap__const_iterator)</ept> that addresses the location of an element in a hash_multimap with a key that is greater than the argument key, or that addresses the location succeeding the last element in the hash_multimap if no match is found for the key.","source":"An [iterator](#hash_multimap__iterator) or [const_iterator](#hash_multimap__const_iterator) that addresses the location of an element in a hash_multimap with a key that is greater than the argument key, or that addresses the location succeeding the last element in the hash_multimap if no match is found for the key."},{"content":"If the return value of <ph id=\"ph1\">`upper_bound`</ph> is assigned to a <ph id=\"ph2\">`const_iterator`</ph>, the hash_multimap object cannot be modified.","pos":[97336,97452],"source":"If the return value of `upper_bound` is assigned to a `const_iterator`, the hash_multimap object cannot be modified."},{"content":"If the return value of <ph id=\"ph1\">`upper_bound`</ph> is assigned to a <bpt id=\"p1\">**</bpt>iterator<ept id=\"p1\">**</ept>, the hash_multimap object can be modified.","pos":[97453,97562],"source":" If the return value of `upper_bound` is assigned to a **iterator**, the hash_multimap object can be modified."},{"pos":[97572,97579],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[97583,97821],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[97822,97911],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[97921,97928],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[99971,100038],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__value_comp\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::value_comp","linkify":"<a name=\"hash_multimap__value_comp\"></a>  hash_multimap::value_comp","source":"<a name=\"hash_multimap__value_comp\"></a>  hash_multimap::value_comp"},{"pos":[100046,100174],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"The member function returns a function object that determines the order of elements in a hash_multimap by comparing their key values.","pos":[100181,100314]},{"pos":[100373,100385],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the comparison function object that a hash_multimap uses to order its elements.","pos":[100389,100476]},{"pos":[100486,100493],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For a hash_multimap <bpt id=\"p1\">*</bpt>m<ept id=\"p1\">*</ept>, if two elements <bpt id=\"p2\">*</bpt>e<ept id=\"p2\">*</ept>1( <bpt id=\"p3\">*</bpt>k<ept id=\"p3\">*</ept>1 <bpt id=\"p4\">*</bpt>, d<ept id=\"p4\">*</ept>1) and <bpt id=\"p5\">*</bpt>e<ept id=\"p5\">*</ept>2( <bpt id=\"p6\">*</bpt>k<ept id=\"p6\">*</ept>2 <bpt id=\"p7\">*</bpt>, d<ept id=\"p7\">*</ept>2) are objects of type <bpt id=\"p8\">[</bpt>value_type<ept id=\"p8\">](#hash_multimap__value_type)</ept>, where <bpt id=\"p9\">*</bpt>k<ept id=\"p9\">*</ept>1 and <bpt id=\"p10\">*</bpt>k<ept id=\"p10\">*</ept>2 are their keys of type <bpt id=\"p11\">[</bpt>key_type<ept id=\"p11\">](#hash_multimap__key_type)</ept> and <ph id=\"ph1\">`d`</ph>1 and <ph id=\"ph2\">`d`</ph>2 are their data of type <bpt id=\"p12\">[</bpt>mapped_type<ept id=\"p12\">](#hash_multimap__mapped_type)</ept>, then <bpt id=\"p13\">*</bpt>m.<ept id=\"p13\">*</ept><ph id=\"ph3\">`value_comp`</ph>( )( <bpt id=\"p14\">*</bpt>e<ept id=\"p14\">*</ept>1 <bpt id=\"p15\">*</bpt>, e<ept id=\"p15\">*</ept>2) is equivalent to <bpt id=\"p16\">*</bpt>m.<ept id=\"p16\">*</ept><ph id=\"ph4\">`key_comp`</ph>( ) ( <bpt id=\"p17\">*</bpt>k<ept id=\"p17\">*</ept>1 <bpt id=\"p18\">*</bpt>, k<ept id=\"p18\">*</ept>2).","pos":[100497,100896],"source":"For a hash_multimap *m*, if two elements *e*1( *k*1 *, d*1) and *e*2( *k*2 *, d*2) are objects of type [value_type](#hash_multimap__value_type), where *k*1 and *k*2 are their keys of type [key_type](#hash_multimap__key_type) and `d`1 and `d`2 are their data of type [mapped_type](#hash_multimap__mapped_type), then *m.*`value_comp`( )( *e*1 *, e*2) is equivalent to *m.*`key_comp`( ) ( *k*1 *, k*2)."},{"content":"A stored object defines the member function","pos":[100897,100940]},{"pos":[100947,101016],"content":"<bpt id=\"p1\">**</bpt>bool operator<ept id=\"p1\">**</ept>( <bpt id=\"p2\">**</bpt>value_type&amp;<ept id=\"p2\">**</ept><ph id=\"ph1\">` left`</ph>, <bpt id=\"p3\">**</bpt>value_type&amp;<ept id=\"p3\">**</ept> <ph id=\"ph2\">` right`</ph>);","source":"**bool operator**( **value_type&**` left`, **value_type&** ` right`);"},{"pos":[101023,101147],"content":"which returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the key value of <ph id=\"ph1\">` left`</ph> precedes and is not equal to the key value of <ph id=\"ph2\">` right`</ph> in the sort order.","source":"which returns **true** if the key value of ` left` precedes and is not equal to the key value of ` right` in the sort order."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[101154,101392],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[101393,101482],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[101492,101499],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[102691,102758],"content":"<bpt id=\"p1\">&lt;a name=\"hash_multimap__value_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  hash_multimap::value_type","linkify":"<a name=\"hash_multimap__value_type\"></a>  hash_multimap::value_type","source":"<a name=\"hash_multimap__value_type\"></a>  hash_multimap::value_type"},{"pos":[102766,102894],"content":"[!NOTE]\n This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","leadings":["","> "],"nodes":[{"content":" This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).","pos":[8,126],"nodes":[{"content":"This API is obsolete.","pos":[1,22]},{"content":"The alternative is <bpt id=\"p1\">[</bpt>unordered_multimap Class<ept id=\"p1\">](../standard-library/unordered-multimap-class.md)</ept>.","pos":[23,118],"source":" The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md)."}]}]},{"content":"A type that represents the type of object stored in a hash_multimap.","pos":[102901,102969]},{"pos":[103038,103045],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[103049,103337],"content":"<ph id=\"ph1\">`value_type`</ph> is declared to be <ph id=\"ph2\">`pair`</ph> <bpt id=\"p1\">*</bpt><ph id=\"ph3\">\\&lt;</ph><ept id=\"p1\">*</ept><bpt id=\"p2\">**</bpt>const<ept id=\"p2\">**</ept><bpt id=\"p3\">[</bpt>key_type<ept id=\"p3\">](#hash_multimap__key_type)</ept>, <bpt id=\"p4\">[</bpt>mapped_type<ept id=\"p4\">](#hash_multimap__mapped_type)</ept>&gt; and not <ph id=\"ph4\">`pair`</ph> <bpt id=\"p5\">*</bpt><ph id=\"ph5\">&lt;</ph><ept id=\"p5\">*</ept><ph id=\"ph6\">`key_type`</ph><bpt id=\"p6\">*</bpt>,<ept id=\"p6\">*</ept> <ph id=\"ph7\">`mapped_type`</ph><bpt id=\"p7\">*</bpt><ph id=\"ph8\">&gt;</ph><ept id=\"p7\">*</ept> because the keys of an associative container may not be changed using a nonconstant iterator or reference.","source":"`value_type` is declared to be `pair` *\\<***const**[key_type](#hash_multimap__key_type), [mapped_type](#hash_multimap__mapped_type)> and not `pair` *<*`key_type`*,* `mapped_type`*>* because the keys of an associative container may not be changed using a nonconstant iterator or reference."},{"content":"In Visual C++ .NET 2003, members of the <bpt id=\"p1\">[</bpt>&lt;hash_map&gt;<ept id=\"p1\">](../standard-library/hash-map.md)</ept> and <bpt id=\"p2\">[</bpt>&lt;hash_set&gt;<ept id=\"p2\">](../standard-library/hash-set.md)</ept> header files are no longer in the std namespace, but rather have been moved into the stdext namespace.","pos":[103344,103582],"source":"In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace."},{"content":"See <bpt id=\"p1\">[</bpt>The stdext Namespace<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> for more information.","pos":[103583,103672],"source":" See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information."},{"pos":[103682,103689],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[105557,105565],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Thread Safety in the C++ Standard Library<ept id=\"p1\">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept><ph id=\"ph1\"> </ph>","pos":[105569,105679],"source":"[Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C++ Standard Library Reference<ept id=\"p1\">](../standard-library/cpp-standard-library-reference.md)</ept>","pos":[105682,105770],"source":" [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)"}],"content":"---\ntitle: \"hash_multimap Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"stdext::hash_multimap\"\n  - \"stdext.hash_multimap\"\n  - \"hash_map/stdext::hash_multimap\"\n  - \"hash_multimap\"\n  - \"std::hash_multimap\"\n  - \"std.hash_multimap\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"hash_multimap class\"\nms.assetid: f41a6db9-67aa-43a3-a3c5-dbfe9ec3ae7d\ncaps.latest.revision: 24\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# hash_multimap Class\n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n The container class hash_multimap is an extension of the Standard Template Library and is used for the storage and fast retrieval of data from a collection in which each element is a pair that has a sort key whose value need not be unique and an associated data value.  \n  \n## Syntax  \n  \n```  \ntemplate <class Key,   \n    class Type,   \n    class Traits=hash_compare <Key, less <Key>>,   \n    class Allocator=allocator <pair  <const Key, Type>>>  \nclass hash_multimap  \n```  \n  \n#### Parameters  \n `Key`  \n The key data type to be stored in the hash_multimap.  \n  \n `Type`  \n The element data type to be stored in the hash_multimap.  \n  \n `Traits`  \n The type that includes two function objects, one of class `Traits` that is able to compare two element values as sort keys to determine their relative order and a hash function that is a unary predicate mapping key values of the elements to unsigned integers of type **size_t**. This argument is optional, and the `hash_compare``<Key, less<Key> >` is the default value.  \n  \n `Allocator`  \n The type that represents the stored allocator object that encapsulates details about the hash_multimap's allocation and deallocation of memory. This argument is optional, and the default value is `allocator<pair <const Key, Type> >`.  \n  \n## Remarks  \n The hash_multimap is:  \n  \n-   An associative container, which a variable size container that supports the efficient retrieval of element values based on an associated key value.  \n  \n-   Reversible, because it provides a bidirectional iterator to access its elements.  \n  \n-   Hashed, because its elements are grouped into buckets based on the value of a hash function applied to the key values of the elements.  \n  \n-   Multiple, because its elements do not need to have a unique keys, so that one key value may have many element data values associated with it.  \n  \n-   A pair associative container, because its element values are distinct from its key values.  \n  \n-   A template class, because the functionality it provides is generic and so independent of the specific type of data contained as elements or keys. The data types to be used for elements and keys are, instead, specified as parameters in the class template along with the comparison function and allocator.  \n  \n The main advantage of hashing over sorting is greater efficiency; a successful hashing performs insertions, deletions, and finds in constant average time as compared with a time proportional to the logarithm of the number of elements in the container for sorting techniques. The value of an element in a hash_multimap, but not its associated key value, may be changed directly. Instead, key values associated with old elements must be deleted and new key values associated with new elements inserted.  \n  \n The choice of container type should be based in general on the type of searching and inserting required by the application. Hashed associative containers are optimized for the operations of lookup, insertion and removal. The member functions that explicitly support these operations are efficient when used with a well-designed hash function, performing them in a time that is on average constant and not dependent on the number of elements in the container. A well-designed hash function produces a uniform distribution of hashed values and minimizes the number of collisions, where a collision is said to occur when distinct key values are mapped into the same hashed value. In the worst case, with the worst possible hash function, the number of operations is proportional to the number of elements in the sequence (linear time).  \n  \n The hash_multimap should be the associative container of choice when the conditions associating the values with their keys are satisfied by the application. A model for this type of structure is an ordered list of key words with associated string values providing, say, definitions, where the words were not always uniquely defined. If, instead, the keywords were uniquely defined so that keys were unique, then a hash_map would be the container of choice. If, on the other hand, just the list of words were being stored, then a hash_set would be the correct container. If multiple occurrences of the words were allowed, then a hash_multiset would be the appropriate container structure.  \n  \n The hash_multimap orders the sequence it controls by calling a stored hash `Traits` object of type [value_compare](../standard-library/value-compare-class.md). This stored object may be accessed by calling the member function [key_comp](../standard-library/hash-map-class.md#hash_map__key_comp). Such a function object must behave the same as an object of class [hash_compare](../standard-library/hash-compare-class.md)`<Key,  less<Key> >`. Specifically, for all values `Key` of type `Key`, the call `Traits (Key)` yields a distribution of values of type `size_t`.  \n  \n In general, the elements need be merely less than comparable to establish this order: so that, given any two elements, it may be determined either that they are equivalent (in the sense that neither is less than the other) or that one is less than the other. This results in an ordering between the non-equivalent elements. On a more technical note, the comparison function is a binary predicate that induces a strict weak ordering in the standard mathematical sense. A binary predicate f(x, y) is a function object that has two argument objects `x` and `y` and a return value of `true` or `false`. An ordering imposed on a hash_multimap is a strict weak ordering if the binary predicate is irreflexive, antisymmetric, and transitive and if equivalence is transitive, where two objects `x` and `y` are defined to be equivalent when both f(x, y) and f(y, x) are `false`. If the stronger condition of equality between keys replaces that of equivalence, then the ordering becomes total (in the sense that all the elements are ordered with respect to each other) and the keys matched will be indiscernible from each other.  \n  \n The actual order of elements in the controlled sequence depends on the hash function, the ordering function, and the current size of the hash table stored in the container object. You cannot determine the current size of the hash table, so you cannot in general predict the order of elements in the controlled sequence. Inserting elements invalidates no iterators, and removing elements invalidates only those iterators that had specifically pointed at the removed elements.  \n  \n The iterator provided by the hash_multimap class is a bidirectional iterator, but the class member functions [insert](#hash_multimap__insert) and [hash_multimap](#hash_multimap__hash_multimap) have versions that take as template parameters a weaker input iterator, whose functionality requirements are more minimal than those guaranteed by the class of bidirectional iterators. The different iterator concepts form a family related by refinements in their functionality. Each iterator concept has its own hash_multimap of requirements, and the algorithms that work with them must limit their assumptions to the requirements provided by that type of iterator. It may be assumed that an input iterator may be dereferenced to refer to some object and that it may be incremented to the next iterator in the sequence. This is a minimal hash_multimap of functionality, but it is enough to be able to talk meaningfully about a range of iterators `[First, Last)` in the context of the member functions.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[hash_multimap](#hash_multimap__hash_multimap)|Constructs a list of a specific size or with elements of a specific value or with a specific `allocator` or as a copy of some other `hash_multimap`.|  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|[allocator_type](#hash_multimap__allocator_type)|A type that represents the `allocator` class for the `hash_multimap` object.|  \n|[const_iterator](#hash_multimap__const_iterator)|A type that provides a bidirectional iterator that can read a `const` element in the `hash_multimap`.|  \n|[const_pointer](#hash_multimap__const_pointer)|A type that provides a pointer to a `const` element in a `hash_multimap`.|  \n|[const_reference](#hash_multimap__const_reference)|A type that provides a reference to a `const` element stored in a `hash_multimap` for reading and performing `const` operations.|  \n|[const_reverse_iterator](#hash_multimap__const_reverse_iterator)|A type that provides a bidirectional iterator that can read any `const` element in the `hash_multimap`.|  \n|[difference_type](#hash_multimap__difference_type)|A signed integer type that can be used to represent the number of elements of a `hash_multimap` in a range between elements pointed to by iterators.|  \n|[iterator](#hash_multimap__iterator)|A type that provides a bidirectional iterator that can read or modify any element in a `hash_multimap`.|  \n|[key_compare](#hash_multimap__key_compare)|A type that provides a function object that can compare two sort keys to determine the relative order of two elements in the `hash_multimap`.|  \n|[key_type](#hash_multimap__key_type)|A type that describes the sort key object that constitutes each element of the `hash_multimap`.|  \n|[mapped_type](#hash_multimap__mapped_type)|A type that represents the data type stored in a `hash_multimap`.|  \n|[pointer](#hash_multimap__pointer)|A type that provides a pointer to an element in a `hash_multimap`.|  \n|[reference](#hash_multimap__reference)|A type that provides a reference to an element stored in a `hash_multimap`.|  \n|[reverse_iterator](#hash_multimap__reverse_iterator)|A type that provides a bidirectional iterator that can read or modify an element in a reversed `hash_multimap`.|  \n|[size_type](#hash_multimap__size_type)|An unsigned integer type that can represent the number of elements in a `hash_multimap`.|  \n|[value_type](#hash_multimap__value_type)|A type that provides a function object that can compare two elements as sort keys to determine their relative order in the `hash_multimap`.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[begin](#hash_multimap__begin)|Returns an iterator addressing the first element in the `hash_multimap`.|  \n|[hash_multimap::cbegin](#hash_multimap__cbegin)|Returns a const iterator addressing the first element in the `hash_multimap`.|  \n|[hash_multimap::cend](#hash_multimap__cend)|Returns a const iterator that addresses the location succeeding the last element in a `hash_multimap`.|  \n|[clear](#hash_multimap__clear)|Erases all the elements of a `hash_multimap`.|  \n|[count](#hash_multimap__count)|Returns the number of elements in a `hash_multimap` whose key matches a parameter-specified key.|  \n|[hash_multimap::crbegin](#hash_multimap__crbegin)|Returns a const iterator addressing the first element in a reversed `hash_multimap`.|  \n|[hash_multimap::crend](#hash_multimap__crend)|Returns a const iterator that addresses the location succeeding the last element in a reversed `hash_multimap`.|  \n|[hash_multimap::emplace](#hash_multimap__emplace)|Inserts an element constructed in place into a `hash_multimap`.|  \n|[hash_multimap::emplace_hint](#hash_multimap__emplace_hint)|Inserts an element constructed in place into a `hash_multimap`, with a placement hint.|  \n|[empty](#hash_multimap__empty)|Tests if a `hash_multimap` is empty.|  \n|[end](#hash_multimap__end)|Returns an iterator that addresses the location succeeding the last element in a `hash_multimap`.|  \n|[equal_range](#hash_multimap__equal_range)|Returns an iterator that addresses the location succeeding the last element in a `hash_multimap`.|  \n|[erase](#hash_multimap__erase)|Removes an element or a range of elements in a `hash_multimap` from specified positions|  \n|[find](#hash_multimap__find)|Returns an iterator addressing the location of an element in a `hash_multimap` that has a key equivalent to a specified key.|  \n|[get_allocator](#hash_multimap__get_allocator)|Returns a copy of the `allocator` object used to construct the `hash_multimap`.|  \n|[insert](#hash_multimap__insert)|Inserts an element or a range of elements into the `hash_multimap` at a specified position.|  \n|[key_comp](#hash_multimap__key_comp)|Retrieves a copy of the comparison object used to order keys in a `hash_multimap`.|  \n|[lower_bound](#hash_multimap__lower_bound)|Returns an iterator to the first element in a `hash_multimap` that with a key value that is equal to or greater than that of a specified key.|  \n|[max_size](#hash_multimap__max_size)|Returns the maximum length of the `hash_multimap`.|  \n|[rbegin](#hash_multimap__rbegin)|Returns an iterator addressing the first element in a reversed `hash_multimap`.|  \n|[rend](#hash_multimap__rend)|Returns an iterator that addresses the location succeeding the last element in a reversed `hash_multimap`.|  \n|[size](#hash_multimap__size)|Specifies a new size for a `hash_multimap`.|  \n|[swap](#hash_multimap__swap)|Exchanges the elements of two `hash_multimap`s.|  \n|[upper_bound](#hash_multimap__upper_bound)|Returns an iterator to the first element in a `hash_multimap` that with a key value that is greater than that of a specified key.|  \n|[value_comp](#hash_multimap__value_comp)|Retrieves a copy of the comparison object used to order element values in a `hash_multimap`.|  \n  \n### Operators  \n  \n|||  \n|-|-|  \n|[hash_multimap::operator=](#hash_multimap__operator_eq)|Replaces the elements of a `hash_multimap` with a copy of another `hash_multimap`.|  \n  \n## Requirements  \n **Header:** <hash_map>  \n  \n **Namespace:** stdext  \n  \n##  <a name=\"hash_multimap__allocator_type\"></a>  hash_multimap::allocator_type  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n A type that represents the allocator class for the hash_multimap object.  \n  \n```  \ntypedef list<typename Traits::value_type, typename Traits::allocator_type>::allocator_type allocator_type;  \n```  \n  \n### Remarks  \n `allocator_type` is a synonym for the template parameter `Allocator`.  \n  \n For more information on `Allocator`, see the Remarks section of the [hash_multimap Class](../standard-library/hash-multimap-class.md) topic.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  See the example for [get_allocator](#hash_multimap__get_allocator) for an example using `allocator_type`.  \n  \n##  <a name=\"hash_multimap__begin\"></a>  hash_multimap::begin  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n Returns an iterator addressing the first element in the hash_multimap.  \n  \n```  \nconst_iterator begin() const;\n\niterator begin();\n```  \n  \n### Return Value  \n A bidirectional iterator addressing the first element in the hash_multimap or the location succeeding an empty hash_multimap.  \n  \n### Remarks  \n If the return value of **begin** is assigned to a `const_iterator`, the elements in the hash_multimap object cannot be modified. If the return value of **begin** is assigned to an **iterator**, the elements in the hash_multimap object can be modified.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_multimap_begin.cpp  \n// compile with: /EHsc  \n#include <hash_map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_multimap <int, int> hm1;  \n  \n   hash_multimap <int, int> :: iterator hm1_Iter;  \n   hash_multimap <int, int> :: const_iterator hm1_cIter;  \n   typedef pair <int, int> Int_Pair;  \n  \n   hm1.insert ( Int_Pair ( 0, 0 ) );  \n   hm1.insert ( Int_Pair ( 1, 1 ) );  \n   hm1.insert ( Int_Pair ( 2, 4 ) );  \n  \n   hm1_cIter = hm1.begin ( );  \n   cout << \"The first element of hm1 is \" << hm1_cIter -> first   \n        << \".\" << endl;  \n  \n   hm1_Iter = hm1.begin ( );  \n   hm1.erase ( hm1_Iter );  \n  \n   // The following 2 lines would err because the iterator is const  \n   // hm1_cIter = hm1.begin ( );  \n   // hm1.erase ( hm1_cIter );  \n  \n   hm1_cIter = hm1.begin( );  \n   cout << \"The first element of hm1 is now \" << hm1_cIter -> first   \n        << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe first element of hm1 is 0.  \nThe first element of hm1 is now 1.  \n```  \n  \n##  <a name=\"hash_multimap__cbegin\"></a>  hash_multimap::cbegin  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n Returns a const iterator addressing the first element in the hash_multimap.  \n  \n```  \nconst_iterator cbegin() const;\n```  \n  \n### Return Value  \n A const bidirectional iterator addressing the first element in the [hash_multimap](../standard-library/hash-multimap-class.md) or the location succeeding an empty `hash_multimap`.  \n  \n### Example  \n  \n```cpp  \n// hash_multimap_cbegin.cpp  \n// compile with: /EHsc  \n#include <hash_multimap>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_multimap <int, int> hm1;  \n  \n   hash_multimap <int, int> :: const_iterator hm1_cIter;  \n   typedef pair <int, int> Int_Pair;  \n  \n   hm1.insert ( Int_Pair ( 2, 4 ) );  \n  \n   hm1_cIter = hm1.cbegin ( );  \n   cout << \"The first element of hm1 is \"   \n        << hm1_cIter -> first << \".\" << endl;  \n   }  \n```  \n  \n```Output  \nThe first element of hm1 is 2.  \n```  \n  \n##  <a name=\"hash_multimap__cend\"></a>  hash_multimap::cend  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n Returns a const iterator that addresses the location succeeding the last element in a hash_multimap.  \n  \n```  \nconst_iterator cend() const;\n```  \n  \n### Return Value  \n A const bidirectional iterator that addresses the location succeeding the last element in a [hash_multimap](../standard-library/hash-multimap-class.md). If the `hash_multimap` is empty, then `hash_multimap::cend == hash_multimap::begin`.  \n  \n### Remarks  \n `cend` is used to test whether an iterator has reached the end of its hash_multimap.  \n  \n The value returned by `cend` should not be dereferenced.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_multimap_cend.cpp  \n// compile with: /EHsc  \n#include <hash_multimap>  \n#include <iostream>  \n  \nint main( )   \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_multimap <int, int> hm1;  \n  \n   hash_multimap <int, int> :: const_iterator hm1_cIter;  \n   typedef pair <int, int> Int_Pair;  \n  \n   hm1.insert ( Int_Pair ( 3, 30 ) );  \n  \n   hm1_cIter = hm1.cend( );  \n   hm1_cIter--;  \n   cout << \"The value of last element of hm1 is \"   \n        << hm1_cIter -> second << \".\" << endl;  \n   }  \n```  \n  \n```Output  \nThe value of last element of hm1 is 30.  \n```  \n  \n##  <a name=\"hash_multimap__clear\"></a>  hash_multimap::clear  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n Erases all the elements of a hash_multimap.  \n  \n```  \nvoid clear();\n```  \n  \n### Remarks  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  The following example demonstrates the use of the hash_multimap::clear member function.  \n  \n```  \n// hash_multimap_clear.cpp  \n// compile with: /EHsc  \n#include <hash_map>  \n#include <iostream>  \n  \nint main()  \n{  \n    using namespace std;  \n    using namespace stdext;  \n    hash_multimap<int, int> hm1;  \n    hash_multimap<int, int>::size_type i;  \n    typedef pair<int, int> Int_Pair;  \n  \n    hm1.insert(Int_Pair(1, 1));  \n    hm1.insert(Int_Pair(2, 4));  \n  \n    i = hm1.size();  \n    cout << \"The size of the hash_multimap is initially \"  \n         << i  << \".\" << endl;  \n  \n    hm1.clear();  \n    i = hm1.size();  \n    cout << \"The size of the hash_multimap after clearing is \"  \n         << i << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe size of the hash_multimap is initially 2.  \nThe size of the hash_multimap after clearing is 0.  \n```  \n  \n##  <a name=\"hash_multimap__const_iterator\"></a>  hash_multimap::const_iterator  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n A type that provides a bidirectional iterator that can read a **const** element in the hash_multimap.  \n  \n```  \ntypedef list<typename Traits::value_type, typename Traits::allocator_type>::const_iterator const_iterator;  \n```  \n  \n### Remarks  \n A type `const_iterator` cannot be used to modify the value of an element.  \n  \n The `const_iterator` defined by hash_multimap points to objects of [value_type](#hash_multimap__value_type), which are of type `pair`*\\<***constKey, Type***>*. The value of the key is available through the first member pair, and the value of the mapped element is available through the second member of the pair.  \n  \n To dereference a `const_iterator``cIter` pointing to an element in a hash_multimap, use the **->** operator.  \n  \n To access the value of the key for the element, use `cIter` -> **first**, which is equivalent to (\\* `cIter`). **first**. To access the value of the mapped datum for the element, use `cIter` -> **second**, which is equivalent to (\\* `cIter`). **first**.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  See the example for [begin](#hash_multimap__begin) for an example using `const_iterator`.  \n  \n##  <a name=\"hash_multimap__const_pointer\"></a>  hash_multimap::const_pointer  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n A type that provides a pointer to a **const** element in a hash_multimap.  \n  \n```  \ntypedef list<typename _Traits::value_type, typename _Traits::allocator_type>::const_pointer const_pointer;  \n```  \n  \n### Remarks  \n A type `const_pointer` cannot be used to modify the value of an element.  \n  \n In most cases, an [iterator](#hash_multimap__iterator) should be used to access the elements in a hash_multimap object.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n##  <a name=\"hash_multimap__const_reference\"></a>  hash_multimap::const_reference  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n A type that provides a reference to a **const** element stored in a hash_multimap for reading and performing **const** operations.  \n  \n```  \ntypedef list<typename _Traits::value_type, typename _Traits::allocator_type>::const_reference const_reference;  \n```  \n  \n### Remarks  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_multimap_const_ref.cpp  \n// compile with: /EHsc  \n#include <hash_map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_multimap<int, int> hm1;  \n   typedef pair <int, int> Int_Pair;  \n  \n   hm1.insert ( Int_Pair ( 1, 10 ) );  \n   hm1.insert ( Int_Pair ( 2, 20 ) );  \n  \n   // Declare and initialize a const_reference &Ref1   \n   // to the key of the first element  \n   const int &Ref1 = ( hm1.begin( ) -> first );  \n  \n   // The following line would cause an error because the   \n   // non-const_reference cannot be used to access the key  \n   // int &Ref1 = ( hm1.begin( ) -> first );  \n  \n   cout << \"The key of first element in the hash_multimap is \"  \n        << Ref1 << \".\" << endl;  \n  \n   // Declare and initialize a reference &Ref2   \n   // to the data value of the first element  \n   int &Ref2 = ( hm1.begin() -> second );  \n  \n   cout << \"The data value of 1st element in the hash_multimap is \"  \n        << Ref2 << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe key of first element in the hash_multimap is 1.  \nThe data value of 1st element in the hash_multimap is 10.  \n```  \n  \n##  <a name=\"hash_multimap__const_reverse_iterator\"></a>  hash_multimap::const_reverse_iterator  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n A type that provides a bidirectional iterator that can read any **const** element in the hash_multimap.  \n  \n```  \ntypedef list<typename Traits::value_type, typename Traits::allocator_type>::const_reverse_iterator const_reverse_iterator;  \n```  \n  \n### Remarks  \n A type `const_reverse_iterator` cannot modify the value of an element and is use to iterate through the hash_multimap in reverse.  \n  \n The `const_reverse_iterator` defined by hash_multimap points to objects of [value_type](#hash_multimap__value_type), which are of type `pair`*\\<***const Key, Type>**, whose first member is the key to the element and whose second member is the mapped datum held by the element.  \n  \n To dereference a `const_reverse_iterator``crIter` pointing to an element in a hash_multimap, use the **->** operator.  \n  \n To access the value of the key for the element, use `crIter` -> **first**, which is equivalent to (\\* `crIter`). **first**. To access the value of the mapped datum for the element, use `crIter` -> **second**, which is equivalent to (\\* `crIter`). **first**.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  See the example for [rend](#hash_multimap__rend) for an example of how to declare and use the `const_reverse_iterator`.  \n  \n##  <a name=\"hash_multimap__count\"></a>  hash_multimap::count  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n Returns the number of elements in a hash_multimap whose key matches a parameter-specified key.  \n  \n```  \nsize_type count(const Key& key) const;\n```  \n  \n### Parameters  \n ` key`  \n The key of the elements to be matched from the hash_multimap.  \n  \n### Return Value  \n 1 if the hash_multimap contains an element whose sort key matches the parameter key; 0 if the hash_multimap doesn't contain an element with a matching key.  \n  \n### Remarks  \n The member function returns the number of elements in the range  \n  \n **[lower_bound (** ` key` **), upper_bound (** ` key` **) )**  \n  \n which have a key value ` key`.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  The following example demonstrates the use of the hash_multimap::count member function.  \n  \n```  \n// hash_multimap_count.cpp  \n// compile with: /EHsc  \n#include <hash_map>  \n#include <iostream>  \n  \nint main( )  \n{  \n    using namespace std;  \n    using namespace stdext;  \n    hash_multimap<int, int> hm1;  \n    hash_multimap<int, int>::size_type i;  \n    typedef pair<int, int> Int_Pair;  \n  \n    hm1.insert(Int_Pair(1, 1));  \n    hm1.insert(Int_Pair(2, 1));  \n    hm1.insert(Int_Pair(1, 4));  \n    hm1.insert(Int_Pair(2, 1));  \n  \n    // Elements do not need to have unique keys in hash_multimap,  \n    // so duplicates are allowed and counted  \n    i = hm1.count(1);  \n    cout << \"The number of elements in hm1 with a sort key of 1 is: \"  \n         << i << \".\" << endl;  \n  \n    i = hm1.count(2);  \n    cout << \"The number of elements in hm1 with a sort key of 2 is: \"  \n         << i << \".\" << endl;  \n  \n    i = hm1.count(3);  \n    cout << \"The number of elements in hm1 with a sort key of 3 is: \"  \n         << i << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe number of elements in hm1 with a sort key of 1 is: 2.  \nThe number of elements in hm1 with a sort key of 2 is: 2.  \nThe number of elements in hm1 with a sort key of 3 is: 0.  \n```  \n  \n##  <a name=\"hash_multimap__crbegin\"></a>  hash_multimap::crbegin  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n Returns a const iterator addressing the first element in a reversed hash_multimap.  \n  \n```  \nconst_reverse_iterator crbegin() const;\n```  \n  \n### Return Value  \n A const reverse bidirectional iterator addressing the first element in a reversed [hash_multimap](../standard-library/hash-multimap-class.md) or addressing what had been the last element in the unreversed `hash_multimap`.  \n  \n### Remarks  \n `crbegin` is used with a reversed hash_multimap just as [hash_multimap::begin](#hash_multimap__begin) is used with a `hash_multimap`.  \n  \n With the return value of `crbegin`, the `hash_multimap` object cannot be modified.  \n  \n `crbegin` can be used to iterate through a `hash_multimap` backwards.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_multimap_crbegin.cpp  \n// compile with: /EHsc  \n#include <hash_multimap>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_multimap <int, int> hm1;  \n  \n   hash_multimap <int, int> :: const_reverse_iterator hm1_crIter;  \n   typedef pair <int, int> Int_Pair;  \n  \n   hm1.insert ( Int_Pair ( 3, 30 ) );  \n  \n   hm1_crIter = hm1.crbegin( );  \n   cout << \"The first element of the reversed hash_multimap hm1 is \"  \n        << hm1_crIter -> first << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe first element of the reversed hash_multimap hm1 is 3.  \n```  \n  \n##  <a name=\"hash_multimap__crend\"></a>  hash_multimap::crend  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n Returns a const iterator that addresses the location succeeding the last element in a reversed hash_multimap.  \n  \n```  \nconst_reverse_iterator crend() const;\n```  \n  \n### Return Value  \n A const reverse bidirectional iterator that addresses the location succeeding the last element in a reversed [hash_multimap](../standard-library/hash-multimap-class.md) (the location that had preceded the first element in the unreversed `hash_multimap`).  \n  \n### Remarks  \n `crend` is used with a reversed hash_multimap just as [hash_multimap::end](#hash_multimap__end) is used with a hash_multimap.  \n  \n With the return value of `crend`, the `hash_multimap` object cannot be modified.  \n  \n `crend` can be used to test to whether a reverse iterator has reached the end of its hash_multimap.  \n  \n The value returned by `crend` should not be dereferenced.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_multimap_crend.cpp  \n// compile with: /EHsc  \n#include <hash_multimap>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_multimap <int, int> hm1;  \n  \n   hash_multimap <int, int> :: const_reverse_iterator hm1_crIter;  \n   typedef pair <int, int> Int_Pair;  \n  \n   hm1.insert ( Int_Pair ( 3, 30 ) );  \n  \n   hm1_crIter = hm1.crend( );  \n   hm1_crIter--;  \n   cout << \"The last element of the reversed hash_multimap hm1 is \"  \n        << hm1_crIter -> first << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe last element of the reversed hash_multimap hm1 is 3.  \n```  \n  \n##  <a name=\"hash_multimap__difference_type\"></a>  hash_multimap::difference_type  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n A signed integer type that can be used to represent the number of elements of a hash_multimap in a range between elements pointed to by iterators.  \n  \n```  \ntypedef list<typename _Traits::value_type, typename _Traits::allocator_type>::difference_type difference_type;  \n```  \n  \n### Remarks  \n The `difference_type` is the type returned when subtracting or incrementing through iterators of the container. The `difference_type` is typically used to represent the number of elements in the range *[ first,  last)* between the iterators ` first` and ` last`, includes the element pointed to by ` first` and the range of elements up to, but not including, the element pointed to by ` last`.  \n  \n Note that although `difference_type` is available for all iterators that satisfy the requirements of an input iterator, which includes the class of bidirectional iterators supported by reversible containers such as set, subtraction between iterators is only supported by random-access iterators provided by a random-access container such as vector.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_multimap_difference_type.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <hash_map>  \n#include <algorithm>  \n  \nint main()  \n{  \n    using namespace std;  \n    using namespace stdext;  \n    hash_multimap<int, int> hm1;  \n    typedef pair<int, int> Int_Pair;  \n  \n    hm1.insert(Int_Pair(2, 20));  \n    hm1.insert(Int_Pair(1, 10));  \n    hm1.insert(Int_Pair(3, 20));  \n  \n    // The following will insert, because map keys  \n    // do not need to be unique  \n    hm1.insert(Int_Pair(2, 30));  \n  \n    hash_multimap<int, int>::iterator hm1_Iter, hm1_bIter, hm1_eIter;  \n    hm1_bIter = hm1.begin();  \n    hm1_eIter = hm1.end();  \n  \n    // Count the number of elements in a hash_multimap  \n    hash_multimap<int, int>::difference_type df_count = 0;  \n    hm1_Iter = hm1.begin();  \n    while (hm1_Iter != hm1_eIter)  \n    {  \n        df_count++;  \n        hm1_Iter++;  \n    }  \n  \n    cout << \"The number of elements in the hash_multimap hm1 is: \"  \n         << df_count << \".\" << endl;  \n  \n    cout << \"The keys of the mapped elements are:\";  \n    for (hm1_Iter= hm1.begin() ; hm1_Iter!= hm1.end();  \n        hm1_Iter++)  \n        cout << \" \" << hm1_Iter-> first;  \n    cout << \".\" << endl;  \n  \n    cout << \"The values of the mapped elements are:\";  \n    for (hm1_Iter= hm1.begin() ; hm1_Iter!= hm1.end();  \n        hm1_Iter++)  \n        cout << \" \" << hm1_Iter-> second;  \n    cout << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe number of elements in the hash_multimap hm1 is: 4.  \nThe keys of the mapped elements are: 1 2 2 3.  \nThe values of the mapped elements are: 10 20 30 20.  \n```  \n  \n##  <a name=\"hash_multimap__emplace\"></a>  hash_multimap::emplace  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n Inserts an element constructed in place into a hash_multimap.  \n  \n```  \ntemplate <class ValTy>  \niterator emplace(ValTy&& val);\n```  \n  \n### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|` val`|The value used to move construct an element to be inserted into the [hash_multimap](../standard-library/hash-multimap-class.md).|  \n  \n### Return Value  \n The `emplace` member function returns an iterator that points to the position where the new element was inserted.  \n  \n### Remarks  \n The [hash_multimap::value_type](#hash_multimap__value_type) of an element is a pair, so that the value of an element will be an ordered pair with the first component equal to the key value and the second component equal to the data value of the element.  \n  \n Beginning with Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_multimap_emplace.cpp  \n// compile with: /EHsc  \n#include<hash_multimap>  \n#include<iostream>  \n#include <string>  \n  \nint main()  \n{  \n    using namespace std;  \n    using namespace stdext;  \n    hash_multimap<int, string> hm1;  \n    typedef pair<int, string> is1(1, \"a\");  \n  \n    hm1.emplace(move(is1));  \n    cout << \"After the emplace, hm1 contains:\" << endl  \n      << \" \" << hm1.begin()->first  \n      << \" => \" << hm1.begin()->second  \n      << endl;  \n}  \n```  \n  \n```Output  \nAfter the emplace insertion, hm1 contains:  \n 1 => a  \n```  \n  \n##  <a name=\"hash_multimap__emplace_hint\"></a>  hash_multimap::emplace_hint  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n Inserts an element constructed in place into a hash_multimap, with a placement hint.  \n  \n```  \ntemplate <class ValTy>  \niterator emplace_hint(\n    const_iterator _Where,  \n    ValTy&& val);\n```  \n  \n### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|` val`|The value used to move construct an element to be inserted into the [hash_multimap](../standard-library/hash-multimap-class.md) unless the `hash_multimap` already contains that element (or, more generally, an element whose key is equivalently ordered).|  \n|`_Where`|A hint regarding the place to start searching for the correct point of insertion.|  \n  \n### Return Value  \n The [hash_multimap::emplace](#hash_multimap__emplace) member function returns an iterator that points to the position where the new element was inserted into the `hash_multimap`.  \n  \n### Remarks  \n The [hash_multimap::value_type](#hash_multimap__value_type) of an element is a pair, so that the value of an element will be an ordered pair with the first component equal to the key value and the second component equal to the data value of the element.  \n  \n Insertion can occur in amortized constant time, instead of logarithmic time, if the insertion point immediately follows `_Where`.  \n  \n Beginning with Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_multimap_emplace_hint.cpp  \n// compile with: /EHsc  \n#include<hash_multimap>  \n#include<iostream>  \n#include <string>  \n  \nint main()  \n{  \n    using namespace std;  \n    using namespace stdext;  \n    hash_multimap<int, string> hm1;  \n    typedef pair<int, string> is1(1, \"a\");  \n  \n    hm1.emplace(hm1.begin(), move(is1));  \n    cout << \"After the emplace insertion, hm1 contains:\" << endl  \n      << \" \" << hm1.begin()->first  \n      << \" => \" << hm1.begin()->second  \n      << endl;  \n}  \n```  \n  \n```Output  \nAfter the emplace insertion, hm1 contains:  \n 1 => a  \n```  \n  \n##  <a name=\"hash_multimap__empty\"></a>  hash_multimap::empty  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n Tests if a hash_multimap is empty.  \n  \n```  \nbool empty() const;\n```  \n  \n### Return Value  \n **true** if the hash_multimap is empty; **false** if the hash_multimap is nonempty.  \n  \n### Remarks  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_multimap_empty.cpp  \n// compile with: /EHsc  \n#include <hash_map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_multimap <int, int> hm1, hm2;  \n  \n   typedef pair <int, int> Int_Pair;  \n   hm1.insert ( Int_Pair ( 1, 1 ) );  \n  \n   if ( hm1.empty( ) )  \n      cout << \"The hash_multimap hm1 is empty.\" << endl;  \n   else  \n      cout << \"The hash_multimap hm1 is not empty.\" << endl;  \n  \n   if ( hm2.empty( ) )  \n      cout << \"The hash_multimap hm2 is empty.\" << endl;  \n   else  \n      cout << \"The hash_multimap hm2 is not empty.\" << endl;  \n}  \n```  \n  \n```Output  \nThe hash_multimap hm1 is not empty.  \nThe hash_multimap hm2 is empty.  \n```  \n  \n##  <a name=\"hash_multimap__end\"></a>  hash_multimap::end  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n Returns an iterator that addresses the location succeeding the last element in a hash_multimap.  \n  \n```  \nconst_iterator end() const;\n\niterator end();\n```  \n  \n### Return Value  \n A bidirectional iterator that addresses the location succeeding the last element in a hash_multimap. If the hash_multimap is empty, then hash_multimap::end == hash_multimap::begin.  \n  \n### Remarks  \n **end** is used to test whether an iterator has reached the end of its hash_multimap.  \n  \n The value returned by **end** should not be dereferenced.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_multimap_end.cpp  \n// compile with: /EHsc  \n#include <hash_map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_multimap <int, int> hm1;  \n  \n   hash_multimap <int, int> :: iterator hm1_Iter;  \n   hash_multimap <int, int> :: const_iterator hm1_cIter;  \n   typedef pair <int, int> Int_Pair;  \n  \n   hm1.insert ( Int_Pair ( 1, 10 ) );  \n   hm1.insert ( Int_Pair ( 2, 20 ) );  \n   hm1.insert ( Int_Pair ( 3, 30 ) );  \n  \n   hm1_cIter = hm1.end( );  \n   hm1_cIter--;  \n   cout << \"The value of last element of hm1 is \"   \n        << hm1_cIter -> second << \".\" << endl;  \n  \n   hm1_Iter = hm1.end( );  \n   hm1_Iter--;  \n   hm1.erase ( hm1_Iter );  \n  \n   // The following 2 lines would err because the iterator is const  \n   // hm1_cIter = hm1.end ( );  \n   // hm1_cIter--;  \n   // hm1.erase ( hm1_cIter );  \n  \n   hm1_cIter = hm1.end( );  \n   hm1_cIter--;  \n   cout << \"The value of last element of hm1 is now \"  \n        << hm1_cIter -> second << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe value of last element of hm1 is 30.  \nThe value of last element of hm1 is now 20.  \n```  \n  \n##  <a name=\"hash_multimap__equal_range\"></a>  hash_multimap::equal_range  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n Returns a pair of iterators respectively to the first element in a hash_multimap with a key that is greater than a specified key and to the first element in the hash_multimap with a key that is equal to or greater than the key.  \n  \n```  \npair <const_iterator, const_iterator> equal_range (const Key& key) const;\n\npair <iterator, iterator> equal_range (const Key& key);\n```  \n  \n### Parameters  \n ` key`  \n The argument key to be compared with the sort key of an element from the hash_multimap being searched.  \n  \n### Return Value  \n A pair of iterators such that the first is the [lower_bound](#hash_multimap__lower_bound) of the key and the second is the [upper_bound](#hash_multimap__upper_bound) of the key.  \n  \n To access the first iterator of a pair `pr` returned by the member function, use `pr`. **first** and to dereference the lower bound iterator, use \\*( `pr`. **first**). To access the second iterator of a pair `pr` returned by the member function, use `pr`. **second** and to dereference the upper bound iterator, use \\*( `pr`. **second**).  \n  \n### Remarks  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_multimap_equal_range.cpp  \n// compile with: /EHsc  \n#include <hash_map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   typedef hash_multimap <int, int> IntMMap;  \n   IntMMap hm1;  \n   hash_multimap <int, int> :: const_iterator hm1_RcIter;  \n   typedef pair <int, int> Int_Pair;  \n  \n   hm1.insert ( Int_Pair ( 1, 10 ) );  \n   hm1.insert ( Int_Pair ( 2, 20 ) );  \n   hm1.insert ( Int_Pair ( 3, 30 ) );  \n  \n   pair <IntMMap::const_iterator, IntMMap::const_iterator> p1, p2;  \n   p1 = hm1.equal_range( 2 );  \n  \n   cout << \"The lower bound of the element with \"  \n        << \"a key of 2\\n in the hash_multimap hm1 is: \"  \n        << p1.first -> second << \".\" << endl;  \n  \n   cout << \"The upper bound of the element with \"  \n        << \"a key of 2\\n in the hash_multimap hm1 is: \"  \n        << p1.second -> second << \".\" << endl;  \n  \n   // Compare the upper_bound called directly   \n   hm1_RcIter = hm1.upper_bound( 2 );  \n  \n   cout << \"A direct call of upper_bound( 2 ) gives \"  \n        << hm1_RcIter -> second << \",\" << endl  \n        << \" matching the 2nd element of the pair\"  \n        << \" returned by equal_range( 2 ).\" << endl;  \n  \n   p2 = hm1.equal_range( 4 );  \n  \n   // If no match is found for the key,  \n   // both elements of the pair return end( )  \n   if ( ( p2.first == hm1.end( ) ) && ( p2.second == hm1.end( ) ) )  \n      cout << \"The hash_multimap hm1 doesn't have an element \"  \n           << \"with a key less than 4.\" << endl;  \n   else  \n      cout << \"The element of hash_multimap hm1 with a key >= 40 is: \"  \n           << p1.first -> first << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe lower bound of the element with a key of 2  \n in the hash_multimap hm1 is: 20.  \nThe upper bound of the element with a key of 2  \n in the hash_multimap hm1 is: 30.  \nA direct call of upper_bound( 2 ) gives 30,  \n matching the 2nd element of the pair returned by equal_range( 2 ).  \nThe hash_multimap hm1 doesn't have an element with a key less than 4.  \n```  \n  \n##  <a name=\"hash_multimap__erase\"></a>  hash_multimap::erase  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n Removes an element or a range of elements in a hash_multimap from specified positions or removes elements that match a specified key.  \n  \n```  \niterator erase(iterator _Where);\n\niterator erase(iterator first, iterator last);\n\nsize_type erase(const key_type& key);\n```  \n  \n### Parameters  \n `_Where`  \n Position of the element to be removed from the hash_multimap.  \n  \n ` first`  \n Position of the first element removed from the hash_multimap.  \n  \n ` last`  \n Position just beyond the last element removed from the hash_multimap.  \n  \n ` key`  \n The key of the elements to be removed from the hash_multimap.  \n  \n### Return Value  \n For the first two member functions, a bidirectional iterator that designates the first element remaining beyond any elements removed, or a pointer to the end of the hash_multimap if no such element exists.  \n  \n For the third member function, returns the number of elements that have been removed from the hash_multimap.  \n  \n### Remarks  \n The member functions never throw an exception.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  The following example demonstrates the use of the hash_multimap::erase member function.  \n  \n```  \n// hash_multimap_erase.cpp  \n// compile with: /EHsc  \n#include <hash_map>  \n#include <iostream>  \n  \nint main()  \n{  \n    using namespace std;  \n    using namespace stdext;  \n    hash_multimap<int, int> hm1, hm2, hm3;  \n    hash_multimap<int, int> :: iterator pIter, Iter1, Iter2;  \n    int i;  \n    hash_multimap<int, int>::size_type n;  \n    typedef pair<int, int> Int_Pair;  \n  \n    for (i = 1; i < 5; i++)  \n    {  \n        hm1.insert(Int_Pair (i, i) );  \n        hm2.insert(Int_Pair (i, i*i) );  \n        hm3.insert(Int_Pair (i, i-1) );  \n    }  \n  \n    // The 1st member function removes an element at a given position  \n    Iter1 = ++hm1.begin();  \n    hm1.erase(Iter1);  \n  \n    cout << \"After the 2nd element is deleted, \"  \n         << \"the hash_multimap hm1 is:\";  \n    for (pIter = hm1.begin(); pIter != hm1.end(); pIter++)  \n        cout << \" \" << pIter -> second;  \n    cout << \".\" << endl;  \n  \n    // The 2nd member function removes elements  \n    // in the range [ first,  last)  \n    Iter1 = ++hm2.begin();  \n    Iter2 = --hm2.end();  \n    hm2.erase(Iter1, Iter2);  \n  \n    cout << \"After the middle two elements are deleted, \"  \n         << \"the hash_multimap hm2 is:\";  \n    for (pIter = hm2.begin(); pIter != hm2.end(); pIter++)  \n        cout << \" \" << pIter -> second;  \n    cout << \".\" << endl;  \n  \n    // The 3rd member function removes elements with a given  key  \n    hm3.insert(Int_Pair (2, 5));  \n    n = hm3.erase(2);  \n  \n    cout << \"After the element with a key of 2 is deleted,\\n\"  \n         << \" the hash_multimap hm3 is:\";  \n    for (pIter = hm3.begin(); pIter != hm3.end(); pIter++)  \n        cout << \" \" << pIter -> second;  \n    cout << \".\" << endl;  \n  \n    // The 3rd member function returns the number of elements removed  \n    cout << \"The number of elements removed from hm3 is: \"  \n         << n << \".\" << endl;  \n  \n    // The dereferenced iterator can also be used to specify a key  \n    Iter1 = ++hm3.begin();  \n    hm3.erase(Iter1);  \n  \n    cout << \"After another element with a key equal to that of the\"  \n         << endl;  \n    cout  << \" 2nd element is deleted, \"  \n          << \"the hash_multimap hm3 is:\";  \n    for (pIter = hm3.begin(); pIter != hm3.end(); pIter++)  \n        cout << \" \" << pIter -> second;  \n    cout << \".\" << endl;  \n}  \n```  \n  \n```Output  \nAfter the 2nd element is deleted, the hash_multimap hm1 is: 1 3 4.  \nAfter the middle two elements are deleted, the hash_multimap hm2 is: 1 16.  \nAfter the element with a key of 2 is deleted,  \n the hash_multimap hm3 is: 0 2 3.  \nThe number of elements removed from hm3 is: 2.  \nAfter another element with a key equal to that of the  \n 2nd element is deleted, the hash_multimap hm3 is: 0 3.  \n```  \n  \n##  <a name=\"hash_multimap__find\"></a>  hash_multimap::find  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n Returns an iterator addressing the first location of an element in a hash_multimap that has a key equivalent to a specified key.  \n  \n```  \niterator find(const Key& key);\n\nconst_iterator find(const Key& key) const;\n```  \n  \n### Parameters  \n ` key`  \n The key to be matched by the sort key of an element from the hash_multimap being searched.  \n  \n### Return Value  \n An iterator that addresses the first location of an element with a specified key, or the location succeeding the last element in the hash_multimap if no match is found for the key.  \n  \n### Remarks  \n The member function returns an iterator that addresses an element in the hash_multimap whose sort key is **equivalent** to the argument key under a binary predicate that induces an ordering based on a less than comparability relation.  \n  \n If the return value of **find** is assigned to a `const_iterator`, the hash_multimap object cannot be modified. If the return value of **find** is assigned to an **iterator**, the hash_multimap object can be modified.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_multimap_find.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <hash_map>  \n  \nint main()  \n{  \n    using namespace std;  \n    using namespace stdext;  \n    hash_multimap<int, int> hm1;  \n    hash_multimap<int, int> :: const_iterator hm1_AcIter, hm1_RcIter;  \n    typedef pair<int, int> Int_Pair;  \n  \n    hm1.insert(Int_Pair(1, 10));  \n    hm1.insert(Int_Pair(2, 20));  \n    hm1.insert(Int_Pair(3, 20));  \n    hm1.insert(Int_Pair(3, 30));  \n  \n    hm1_RcIter = hm1.find(2);  \n    cout << \"The element of hash_multimap hm1 with a key of 2 is: \"  \n          << hm1_RcIter -> second << \".\" << endl;  \n  \n    hm1_RcIter = hm1.find(3);  \n    cout << \"The first element of hash_multimap hm1 with a key of 3 is: \"  \n          << hm1_RcIter -> second << \".\" << endl;  \n  \n    // If no match is found for the key, end() is returned  \n    hm1_RcIter = hm1.find(4);  \n  \n    if (hm1_RcIter == hm1.end())  \n        cout << \"The hash_multimap hm1 doesn't have an element \"  \n             << \"with a key of 4.\" << endl;  \n    else  \n        cout << \"The element of hash_multimap hm1 with a key of 4 is: \"  \n             << hm1_RcIter -> second << \".\" << endl;  \n  \n    // The element at a specific location in the hash_multimap can be  \n    // found using a dereferenced iterator addressing the location  \n    hm1_AcIter = hm1.end();  \n    hm1_AcIter--;  \n    hm1_RcIter = hm1.find(hm1_AcIter -> first);  \n    cout << \"The first element of hm1 with a key matching\"  \n         << endl << \"that of the last element is: \"  \n         << hm1_RcIter -> second << \".\" << endl;  \n  \n    // Note that the first element with a key equal to  \n    // the key of the last element is not the last element  \n    if (hm1_RcIter == --hm1.end())  \n        cout << \"This is the last element of hash_multimap hm1.\"  \n             << endl;  \n    else  \n        cout << \"This is not the last element of hash_multimap hm1.\"  \n             << endl;  \n}  \n```  \n  \n```Output  \nThe element of hash_multimap hm1 with a key of 2 is: 20.  \nThe first element of hash_multimap hm1 with a key of 3 is: 20.  \nThe hash_multimap hm1 doesn't have an element with a key of 4.  \nThe first element of hm1 with a key matching  \nthat of the last element is: 20.  \nThis is not the last element of hash_multimap hm1.  \n```  \n  \n##  <a name=\"hash_multimap__get_allocator\"></a>  hash_multimap::get_allocator  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n Returns a copy of the allocator object used to construct the hash_multimap.  \n  \n```  \nAllocator get_allocator() const;\n```  \n  \n### Return Value  \n The allocator used by the hash_multimap.  \n  \n### Remarks  \n Allocators for the hash_multimap class specify how the class manages storage. The default allocators supplied with STL container classes is sufficient for most programming needs. Writing and using your own allocator class is an advanced C++ topic.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_multimap_get_allocator.cpp  \n// compile with: /EHsc  \n#include <hash_map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_multimap <int, int>::allocator_type hm1_Alloc;  \n   hash_multimap <int, int>::allocator_type hm2_Alloc;  \n   hash_multimap <int, double>::allocator_type hm3_Alloc;  \n   hash_multimap <int, int>::allocator_type hm4_Alloc;  \n  \n   // The following lines declare objects  \n   // that use the default allocator.  \n   hash_multimap <int, int> hm1;  \n   hash_multimap <int, int> hm2;  \n   hash_multimap <int, double> hm3;  \n  \n   hm1_Alloc = hm1.get_allocator( );  \n   hm2_Alloc = hm2.get_allocator( );  \n   hm3_Alloc = hm3.get_allocator( );  \n  \n   cout << \"The number of integers that can be allocated\"  \n        << endl << \" before free memory is exhausted: \"  \n        << hm2.max_size( ) << \".\" << endl;  \n  \n   cout << \"The number of doubles that can be allocated\"  \n        << endl << \" before free memory is exhausted: \"  \n        << hm3.max_size( ) <<  \".\" << endl;  \n  \n   // The following line creates a hash_multimap hm4  \n   // with the allocator of hash_multimap hm1.  \n   hash_multimap <int, int> hm4( less<int>( ), hm1_Alloc );  \n  \n   hm4_Alloc = hm4.get_allocator( );  \n  \n   // Two allocators are interchangeable if  \n   // storage allocated from each can be  \n   // deallocated by the other  \n   if( hm1_Alloc == hm4_Alloc )     \n   {  \n      cout << \"The allocators are interchangeable.\"  \n           << endl;     \n   }  \n   else     \n   {  \n      cout << \"The allocators are not interchangeable.\"  \n           << endl;  \n   }  \n}  \n```  \n  \n##  <a name=\"hash_multimap__hash_multimap\"></a>  hash_multimap::hash_multimap  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n Constructs a hash_multimap that is empty or is a copy of all or part of some other hash_multimap.  \n  \n```  \nhash_multimap();\n\nexplicit hash_multimap(\n    const Compare& Comp);\n\nhash_multimap(\n    const Compare& Comp,  \n    const Allocator& Al);\n\nhash_multimap(\n    const hash_multimap& Right);\n\nhash_multimap(\n    hash_multimap&& Right);\n\nhash_multimap(\n    initializer_list<Type> IList);\n\nhash_multimap(\n    initializer_list<Type> IList,  \n    const Compare& Comp);\n\n \nhash_multimap(\n    initializer_list<Type> IList,  \n    const Compare& Comp,  \n    const Allocator& Al);\n\ntemplate <class InputIterator>  \nhash_multimap(\n InputIterator First,  \n    InputIterator Last);\n\ntemplate <class InputIterator>  \nhash_multimap(\n InputIterator First,  \n    InputIterator Last,  \n    const Compare& Comp);\n\ntemplate <class InputIterator>  \nhash_multimap(\n InputIterator First,  \n    InputIterator Last,  \n    const Compare& Comp,  \n    const Allocator& Al);\n```  \n  \n### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|`Al`|The storage allocator class to be used for this hash_multimap object, which defaults to `Allocator`.|  \n|`Comp`|The comparison function of type `const``Traits` used to order the elements in the map, which defaults to `Traits`.|  \n|`Right`|The map of which the constructed set is to be a copy.|  \n|`First`|The position of the first element in the range of elements to be copied.|  \n|`Last`|The position of the first element beyond the range of elements to be copied.|  \n|`IList`|The initializer_list to copy from.|  \n  \n### Remarks  \n All constructors store a type of allocator object that manages memory storage for the hash_multimap and that can later be returned by calling [get_allocator](#hash_multimap__get_allocator). The allocator parameter is often omitted in the class declarations and preprocessing macros are used to substitute alternative allocators.  \n  \n All constructors initialize their hash_multimap.  \n  \n All constructors store a function object of type `Traits` that is used to establish an order among the keys of the hash_multimap and can later be returned by calling [key_comp](#hash_multimap__key_comp).  \n  \n The first three constructors specify an empty initial hash_multimap; the second specifies the type of comparison function ( `Comp`) to be used in establishing the order of the elements and the third explicitly specifies the allocator type ( `_Al`) to be used. The keyword `explicit` suppresses certain kinds of automatic type conversion.  \n  \n The fourth constructor specifies a copy of the hash_multimap `Right`.  \n  \n The next three constructors copy the range `First, Last)` of a map with increasing explicitness in specifying the type of comparison function of class **Traits** and allocator.  \n  \n The eighth constructor moves the hash_multimap `Right`.  \n  \n The final three constructors use an initializer_list.  \n  \n##  <a name=\"hash_multimap__insert\"></a>  hash_multimap::insert  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n Inserts an element or a range of elements into a hash_multimap.  \n  \n```  \niterator insert(\n    const value_type& Val);\n\niterator insert(\n    const_iterator Where,  \n    const value_type& Val);void insert(\n    initializer_list<value_type> IList);\n\ntemplate <class InputIterator>  \nvoid insert(\n    InputIterator First,  \n    InputIterator Last);\n\ntemplate <class ValTy>  \niterator insert(\n    ValTy&& Val);\n\ntemplate <class ValTy>  \niterator insert(\n    const_iterator Where,  \n    ValTy&& Val);\n```  \n  \n### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|`Val`|The value of an element to be inserted into the hash_multimap unless it already contains that element, or more generally, unless it already contains an element whose key is equivalently ordered.|  \n|`Where`|A hint about where to start searching for the correct point of insertion.|  \n|`First`|The position of the first element to be copied from a map.|  \n|`Last`|The position just beyond the last element to be copied from a map.|  \n  \n### Return Value  \n The first two `insert` member functions return an iterator that points to the position where the new element was inserted.  \n  \n The third member function uses an initializer_list for the elements to be inserted.  \n  \n The fourth member function inserts the sequence of element values into a map that corresponds to each element addressed by an iterator in the range `[First, Last)` of a specified set.  \n  \n The last two `insert` member functions behave the same as the first two, except that they move-construct the inserted value.  \n  \n### Remarks  \n The [value_type](#hash_multimap__value_type) of an element is a pair, so that the value of an element will be an ordered pair in which the first component is equal to the key value and the second component is equal to the data value of the element.  \n  \n Insertion can occur in amortized constant time for the hint version of `insert`, instead of logarithmic time, if the insertion point immediately follows `Where`.  \n  \n##  <a name=\"hash_multimap__iterator\"></a>  hash_multimap::iterator  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n A type that provides a bidirectional iterator that can read or modify any element in a hash_multimap.  \n  \n```  \ntypedef list<typename Traits::value_type, typename Traits::allocator_type>::iterator iterator;  \n```  \n  \n### Remarks  \n The **iterator** defined by hash_multimap points to objects of [value_type](#hash_multimap__value_type), which are of type `pair`\\< **const Key, Type**>, whose first member is the key to the element and whose second member is the mapped datum held by the element.  \n  \n To dereference an **iterator**`Iter` pointing to an element in a hash_multimap, use the **->** operator.  \n  \n To access the value of the key for the element, use `Iter` -> **first**, which is equivalent to (\\* `Iter`). **first**. To access the value of the mapped datum for the element, use `Iter` -> **second**, which is equivalent to (\\* `Iter`). **first**.  \n  \n A type **iterator** can be used to modify the value of an element.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  See the example for [begin](#hash_multimap__begin) for an example of how to declare and use **iterator**.  \n  \n##  <a name=\"hash_multimap__key_comp\"></a>  hash_multimap::key_comp  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n Retrieves a copy of the comparison object used to order keys in a hash_multimap.  \n  \n```  \nkey_compare key_comp() const;\n```  \n  \n### Return Value  \n Returns the function object that a hash_multimap uses to order its elements.  \n  \n### Remarks  \n The stored object defines the member function  \n  \n **bool operator(const Key&** ` left` **, const Key&** ` right` **);**  \n  \n which returns **true** if ` left` precedes and is not equal to ` right` in the sort order.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_multimap_key_comp.cpp  \n// compile with: /EHsc  \n#include <hash_map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n  \n   hash_multimap <int, int, hash_compare<int, less<int> > > hm1;  \n   hash_multimap <int, int, hash_compare<int, less<int> >   \n      >::key_compare kc1 = hm1.key_comp( ) ;  \n   bool result1 = kc1( 2, 3 ) ;  \n   if( result1 == true )  \n   {  \n      cout << \"kc1( 2,3 ) returns value of true,\\n\"  \n           << \"where kc1 is the function object of hm1.\\n\"  \n           << endl;  \n   }  \n   else     \n   {  \n      cout << \"kc1( 2,3 ) returns value of false,\\n\"  \n           << \"where kc1 is the function object of hm1.\\n\"  \n           << endl;  \n   }  \n  \n   hash_multimap <int, int, hash_compare<int, greater<int> > > hm2;  \n   hash_multimap <int, int, hash_compare<int, greater<int> >   \n      >::key_compare kc2 = hm2.key_comp( );  \n   bool result2 = kc2( 2, 3 ) ;  \n   if( result2 == true )  \n   {  \n      cout << \"kc2( 2,3 ) returns value of true,\\n\"  \n           << \"where kc2 is the function object of hm2.\"  \n           << endl;  \n   }  \n   else     \n   {  \n      cout << \"kc2( 2,3 ) returns value of false,\\n\"  \n           << \"where kc2 is the function object of hm2.\"  \n           << endl;  \n   }  \n}  \n```  \n  \n##  <a name=\"hash_multimap__key_compare\"></a>  hash_multimap::key_compare  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n A type that provides a function object that can compare two sort keys to determine the relative order of two elements in the hash_multimap.  \n  \n```  \ntypedef Traits key_compare;  \n```  \n  \n### Remarks  \n **key_compare** is a synonym for the template parameter `Traits`.  \n  \n For more information on `Traits` see the [hash_multimap Class](../standard-library/hash-multimap-class.md) topic.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  See the example for [key_comp](#hash_multimap__key_comp) for an example of how to declare and use `key_compare`.  \n  \n##  <a name=\"hash_multimap__key_type\"></a>  hash_multimap::key_type  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n A type that describes the sort key object that constitutes each element of the hash_multimap.  \n  \n```  \ntypedef Key key_type;  \n```  \n  \n### Remarks  \n `key_type` is a synonym for the template parameter `Key`.  \n  \n For more information on `Key`, see the Remarks section of the [hash_multimap Class](../standard-library/hash-multimap-class.md) topic.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  See the example for [value_type](#hash_multimap__value_type) for an example of how to declare and use `key_compare`.  \n  \n##  <a name=\"hash_multimap__lower_bound\"></a>  hash_multimap::lower_bound  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n Returns an iterator to the first element in a hash_multimap with a key that is equal to or greater than a specified key.  \n  \n```  \niterator lower_bound(const Key& key);\n\nconst_iterator lower_bound(const Key& key) const;\n```  \n  \n### Parameters  \n ` key`  \n The argument key to be compared with the sort key of an element from the hash_multimap being searched.  \n  \n### Return Value  \n An [iterator](#hash_multimap__iterator) or [const_iterator](#hash_multimap__const_iterator) that addresses the location of an element in a hash_multimap with a key that is equal to or greater than the argument key, or that addresses the location succeeding the last element in the hash_multimap if no match is found for the key.  \n  \n If the return value of `lower_bound` is assigned to a `const_iterator`, the hash_multimap object cannot be modified. If the return value of `lower_bound` is assigned to an **iterator**, the hash_multimap object can be modified.  \n  \n### Remarks  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_multimap_lower_bound.cpp  \n// compile with: /EHsc  \n#include <hash_map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_multimap <int, int> hm1;  \n   hash_multimap <int, int> :: const_iterator hm1_AcIter,   \n      hm1_RcIter;  \n   typedef pair <int, int> Int_Pair;  \n  \n   hm1.insert ( Int_Pair ( 1, 10 ) );  \n   hm1.insert ( Int_Pair ( 2, 20 ) );  \n   hm1.insert ( Int_Pair ( 3, 20 ) );  \n   hm1.insert ( Int_Pair ( 3, 30 ) );  \n  \n   hm1_RcIter = hm1.lower_bound( 2 );  \n   cout << \"The element of hash_multimap hm1 with a key of 2 is: \"  \n        << hm1_RcIter -> second << \".\" << endl;  \n  \n   hm1_RcIter = hm1.lower_bound( 3 );  \n   cout << \"The first element of hash_multimap hm1 with a key of 3 is: \"  \n        << hm1_RcIter -> second << \".\" << endl;  \n  \n   // If no match is found for the key, end( ) is returned  \n   hm1_RcIter = hm1.lower_bound( 4 );  \n  \n   if ( hm1_RcIter == hm1.end( ) )  \n      cout << \"The hash_multimap hm1 doesn't have an element \"  \n           << \"with a key of 4.\" << endl;  \n   else  \n      cout << \"The element of hash_multimap hm1 with a key of 4 is: \"  \n           << hm1_RcIter -> second << \".\" << endl;  \n  \n   // The element at a specific location in the hash_multimap can be  \n   // found using a dereferenced iterator addressing the location  \n   hm1_AcIter = hm1.end( );  \n   hm1_AcIter--;  \n   hm1_RcIter = hm1.lower_bound( hm1_AcIter -> first );  \n   cout << \"The first element of hm1 with a key matching\"  \n        << endl << \" that of the last element is: \"  \n        << hm1_RcIter -> second << \".\" << endl;  \n  \n   // Note that the first element with a key equal to  \n   // the key of the last element is not the last element  \n   if ( hm1_RcIter == --hm1.end( ) )  \n      cout << \"This is the last element of hash_multimap hm1.\"  \n           << endl;  \n   else  \n      cout << \"This is not the last element of hash_multimap hm1.\"  \n           << endl;  \n}  \n```  \n  \n```Output  \nThe element of hash_multimap hm1 with a key of 2 is: 20.  \nThe first element of hash_multimap hm1 with a key of 3 is: 20.  \nThe hash_multimap hm1 doesn't have an element with a key of 4.  \nThe first element of hm1 with a key matching  \n that of the last element is: 20.  \nThis is not the last element of hash_multimap hm1.  \n```  \n  \n##  <a name=\"hash_multimap__mapped_type\"></a>  hash_multimap::mapped_type  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n A type that represents the data type stored in a hash_multimap.  \n  \n```  \ntypedef Type mapped_type;  \n```  \n  \n### Remarks  \n `mapped_type` is a synonym for the template parameter `Type`.  \n  \n For more information on `Type` see the [hash_multimap Class](../standard-library/hash-multimap-class.md) topic.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  See the example for [value_type](#hash_multimap__value_type) for an example of how to declare and use `key_type`.  \n  \n##  <a name=\"hash_multimap__max_size\"></a>  hash_multimap::max_size  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n Returns the maximum length of the hash_multimap.  \n  \n```  \nsize_type max_size() const;\n```  \n  \n### Return Value  \n The maximum possible length of the hash_multimap.  \n  \n### Remarks  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_multimap_max_size.cpp  \n// compile with: /EHsc  \n#include <hash_map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_multimap <int, int> hm1;  \n   hash_multimap <int, int> :: size_type i;  \n  \n   i = hm1.max_size( );  \n   cout << \"The maximum possible length \"  \n        << \"of the hash_multimap is \" << i << \".\" << endl;  \n}  \n```  \n  \n##  <a name=\"hash_multimap__operator_eq\"></a>  hash_multimap::operator=  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n Replaces the elements of the hash_multimap with a copy of another hash_multimap.  \n  \n```  \nhash_multimap& operator=(const hash_multimap& right);\n\nhash_multimap& operator=(hash_multimap&& right);\n```  \n  \n### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|` right`|The [hash_multimap](../standard-library/hash-multimap-class.md) being copied into the `hash_multimap`.|  \n  \n### Remarks  \n After erasing any existing elements in a `hash_multimap`, `operator=` either copies or moves the contents of ` right` into the `hash_multimap`.  \n  \n### Example  \n  \n```cpp  \n// hash_multimap_operator_as.cpp  \n// compile with: /EHsc  \n#include <hash_multimap>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_multimap<int, int> v1, v2, v3;  \n   hash_multimap<int, int>::iterator iter;  \n  \n   v1.insert(pair<int, int>(1, 10));  \n  \n   cout << \"v1 = \" ;  \n   for (iter = v1.begin(); iter != v1.end(); iter++)  \n      cout << iter->second << \" \";  \n   cout << endl;  \n  \n   v2 = v1;  \n   cout << \"v2 = \";  \n   for (iter = v2.begin(); iter != v2.end(); iter++)  \n      cout << iter->second << \" \";  \n   cout << endl;  \n  \n// move v1 into v2  \n   v2.clear();  \n   v2 = move(v1);  \n   cout << \"v2 = \";  \n   for (iter = v2.begin(); iter != v2.end(); iter++)  \n      cout << iter->second << \" \";  \n   cout << endl;  \n}  \n```  \n  \n##  <a name=\"hash_multimap__pointer\"></a>  hash_multimap::pointer  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n A type that provides a pointer to an element in a hash_multimap.  \n  \n```  \ntypedef list<typename _Traits::value_type, typename _Traits::allocator_type>::pointer pointer;  \n```  \n  \n### Remarks  \n A type **pointer** can be used to modify the value of an element.  \n  \n In most cases, an [iterator](#hash_multimap__iterator) should be used to access the elements in a hash_multimap object.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n##  <a name=\"hash_multimap__rbegin\"></a>  hash_multimap::rbegin  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n Returns an iterator addressing the first element in a reversed hash_multimap.  \n  \n```  \nconst_reverse_iterator rbegin() const;\n\nreverse_iterator rbegin();\n```  \n  \n### Return Value  \n A reverse bidirectional iterator addressing the first element in a reversed hash_multimap or addressing what had been the last element in the unreversed hash_multimap.  \n  \n### Remarks  \n `rbegin` is used with a reversed hash_multimap just as [begin](#hash_multimap__begin) is used with a hash_multimap.  \n  \n If the return value of `rbegin` is assigned to a `const_reverse_iterator`, then the hash_multimap object cannot be modified. If the return value of `rbegin` is assigned to a `reverse_iterator`, then the hash_multimap object can be modified.  \n  \n `rbegin` can be used to iterate through a hash_multimap backwards.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_multimap_rbegin.cpp  \n// compile with: /EHsc  \n#include <hash_map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_multimap <int, int> hm1;  \n  \n   hash_multimap <int, int> :: iterator hm1_Iter;  \n   hash_multimap <int, int> :: reverse_iterator hm1_rIter;  \n   hash_multimap <int, int> :: const_reverse_iterator hm1_crIter;  \n   typedef pair <int, int> Int_Pair;  \n  \n   hm1.insert ( Int_Pair ( 1, 10 ) );  \n   hm1.insert ( Int_Pair ( 2, 20 ) );  \n   hm1.insert ( Int_Pair ( 3, 30 ) );  \n  \n   hm1_rIter = hm1.rbegin( );  \n   cout << \"The first element of the reversed hash_multimap hm1 is \"  \n        << hm1_rIter -> first << \".\" << endl;  \n  \n   // begin can be used to start an iteration   \n   // through a hash_multimap in a forward order  \n   cout << \"The hash_multimap is: \";  \n   for ( hm1_Iter = hm1.begin( ) ; hm1_Iter != hm1.end( ); hm1_Iter++)  \n      cout << hm1_Iter -> first << \" \";  \n      cout << \".\" << endl;  \n  \n   // rbegin can be used to start an iteration   \n   // through a hash_multimap in a reverse order  \n   cout << \"The reversed hash_multimap is: \";  \n   for ( hm1_rIter = hm1.rbegin( ) ; hm1_rIter != hm1.rend( ); hm1_rIter++)  \n      cout << hm1_rIter -> first << \" \";  \n      cout << \".\" << endl;  \n  \n   // A hash_multimap element can be erased by dereferencing its key   \n   hm1_rIter = hm1.rbegin( );  \n   hm1.erase ( hm1_rIter -> first );  \n  \n   hm1_rIter = hm1.rbegin( );  \n   cout << \"After the erasure, the first element\"  \n        << \"\\n in the reversed hash_multimap is \"  \n        << hm1_rIter -> first << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe first element of the reversed hash_multimap hm1 is 3.  \nThe hash_multimap is: 1 2 3 .  \nThe reversed hash_multimap is: 3 2 1 .  \nAfter the erasure, the first element  \n in the reversed hash_multimap is 2.  \n```  \n  \n##  <a name=\"hash_multimap__reference\"></a>  hash_multimap::reference  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n A type that provides a reference to an element stored in a hash_multimap.  \n  \n```  \ntypedef list<typename _Traits::value_type, typename _Traits::allocator_type>::reference reference;  \n```  \n  \n### Remarks  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_multimap_reference.cpp  \n// compile with: /EHsc  \n#include <hash_map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_multimap <int, int> hm1;  \n   typedef pair <int, int> Int_Pair;  \n  \n   hm1.insert ( Int_Pair ( 1, 10 ) );  \n   hm1.insert ( Int_Pair ( 2, 20 ) );  \n  \n   // Declare and initialize a const_reference &Ref1   \n   // to the key of the first element  \n   const int &Ref1 = ( hm1.begin( ) -> first );  \n  \n   // The following line would cause an error as the   \n   // non-const_reference cannot be used to access the key  \n   // int &Ref1 = ( hm1.begin( ) -> first );  \n  \n   cout << \"The key of first element in the hash_multimap is \"  \n        << Ref1 << \".\" << endl;  \n  \n   // Declare and initialize a reference &Ref2   \n   // to the data value of the first element  \n   int &Ref2 = ( hm1.begin( ) -> second );  \n  \n   cout << \"The data value of first element in the hash_multimap is \"  \n        << Ref2 << \".\" << endl;  \n  \n   //The non-const_reference can be used to modify the   \n   //data value of the first element  \n   Ref2 = Ref2 + 5;  \n   cout << \"The modified data value of first element is \"  \n        << Ref2 << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe key of first element in the hash_multimap is 1.  \nThe data value of first element in the hash_multimap is 10.  \nThe modified data value of first element is 15.  \n```  \n  \n##  <a name=\"hash_multimap__rend\"></a>  hash_multimap::rend  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n Returns an iterator that addresses the location succeeding the last element in a reversed hash_multimap.  \n  \n```  \nconst_reverse_iterator rend() const;\n\nreverse_iterator rend();\n```  \n  \n### Return Value  \n A reverse bidirectional iterator that addresses the location succeeding the last element in a reversed hash_multimap (the location that had preceded the first element in the unreversed hash_multimap).  \n  \n### Remarks  \n `rend` is used with a reversed hash_multimap just as [end](#hash_multimap__end) is used with a hash_multimap.  \n  \n If the return value of `rend` is assigned to a [const_reverse_iterator](#hash_multimap__const_reverse_iterator), then the hash_multimap object cannot be modified. If the return value of `rend` is assigned to a [reverse_iterator](#hash_multimap__reverse_iterator), then the hash_multimap object can be modified.  \n  \n `rend` can be used to test to whether a reverse iterator has reached the end of its hash_multimap.  \n  \n The value returned by `rend` should not be dereferenced.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_multimap_rend.cpp  \n// compile with: /EHsc  \n#include <hash_map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_multimap <int, int> hm1;  \n  \n   hash_multimap <int, int> :: iterator hm1_Iter;  \n   hash_multimap <int, int> :: reverse_iterator hm1_rIter;  \n   hash_multimap <int, int> :: const_reverse_iterator hm1_crIter;  \n   typedef pair <int, int> Int_Pair;  \n  \n   hm1.insert ( Int_Pair ( 1, 10 ) );  \n   hm1.insert ( Int_Pair ( 2, 20 ) );  \n   hm1.insert ( Int_Pair ( 3, 30 ) );  \n  \n   hm1_rIter = hm1.rend( );  \n   hm1_rIter--;  \n   cout << \"The last element of the reversed hash_multimap hm1 is \"  \n        << hm1_rIter -> first << \".\" << endl;  \n  \n   // begin can be used to start an iteration   \n   // through a hash_multimap in a forward order  \n   cout << \"The hash_multimap is: \";  \n   for ( hm1_Iter = hm1.begin( ) ; hm1_Iter != hm1.end( ); hm1_Iter++)  \n      cout << hm1_Iter -> first << \" \";  \n      cout << \".\" << endl;  \n  \n   // rbegin can be used to start an iteration   \n   // through a hash_multimap in a reverse order  \n   cout << \"The reversed hash_multimap is: \";  \n   for ( hm1_rIter = hm1.rbegin( ) ; hm1_rIter != hm1.rend( ); hm1_rIter++)  \n      cout << hm1_rIter -> first << \" \";  \n      cout << \".\" << endl;  \n  \n   // A hash_multimap element can be erased by dereferencing its key   \n   hm1_rIter = --hm1.rend( );  \n   hm1.erase ( hm1_rIter -> first );  \n  \n   hm1_rIter = hm1.rend( );  \n   hm1_rIter--;  \n   cout << \"After the erasure, the last element \"  \n        << \"in the reversed hash_multimap is \"  \n        << hm1_rIter -> first << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe last element of the reversed hash_multimap hm1 is 1.  \nThe hash_multimap is: 1 2 3 .  \nThe reversed hash_multimap is: 3 2 1 .  \nAfter the erasure, the last element in the reversed hash_multimap is 2.  \n```  \n  \n##  <a name=\"hash_multimap__reverse_iterator\"></a>  hash_multimap::reverse_iterator  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n A type that provides a bidirectional iterator that can read or modify an element in a reversed hash_multimap.  \n  \n```  \ntypedef list<typename Traits::value_type, typename Traits::allocator_type>::reverse_iterator reverse_iterator;  \n```  \n  \n### Remarks  \n A type `reverse_iterator` is used to iterate through the hash_multimap in reverse.  \n  \n The `reverse_iterator` defined by hash_multimap points to objects of [value_type](#hash_multimap__value_type), which are of type `pair`\\< **const Key, Type**>. The value of the key is available through the first member pair and the value of the mapped element is available through the second member of the pair.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  See the example for [rbegin](#hash_multimap__rbegin) for an example of how to declare and use `reverse_iterator`.  \n  \n##  <a name=\"hash_multimap__size\"></a>  hash_multimap::size  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n Returns the number of elements in the hash_multimap.  \n  \n```  \nsize_type size() const;\n```  \n  \n### Return Value  \n The current length of the hash_multimap.  \n  \n### Remarks  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  The following example demonstrates the use of the hash_multimap::size member function.  \n  \n```  \n// hash_multimap_size.cpp  \n// compile with: /EHsc  \n#include <hash_map>  \n#include <iostream>  \n  \nint main( )  \n{  \n    using namespace std;  \n    using namespace stdext;  \n    hash_multimap<int, int> hm1, hm2;  \n    hash_multimap<int, int>::size_type i;  \n    typedef pair<int, int> Int_Pair;  \n  \n    hm1.insert(Int_Pair(1, 1));  \n    i = hm1.size();  \n    cout << \"The hash_multimap length is \" << i << \".\" << endl;  \n  \n    hm1.insert(Int_Pair(2, 4));  \n    i = hm1.size();  \n    cout << \"The hash_multimap length is now \" << i << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe hash_multimap length is 1.  \nThe hash_multimap length is now 2.  \n```  \n  \n##  <a name=\"hash_multimap__size_type\"></a>  hash_multimap::size_type  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n An unsigned integer type that counts the number of elements in a hash_multimap.  \n  \n```  \ntypedef list<typename _Traits::value_type, typename _Traits::allocator_type>::size_type size_type;  \n```  \n  \n### Remarks  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  See the example for [size](#hash_multimap__size) for an example of how to declare and use `size_type`  \n  \n##  <a name=\"hash_multimap__swap\"></a>  hash_multimap::swap  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n Exchanges the elements of two hash_multimaps.  \n  \n```  \nvoid swap(hash_multimap& right);\n```  \n  \n### Parameters  \n ` right`  \n The hash_multimap providing the elements to be swapped or the hash_multimap whose elements are to be exchanged with those of the hash_multimap.  \n  \n### Remarks  \n The member function invalidates no references, pointers, or iterators that designate elements in the two hash_multimaps whose elements are being exchanged.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_multimap_swap.cpp  \n// compile with: /EHsc  \n#include <hash_map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_multimap <int, int> hm1, hm2, hm3;  \n   hash_multimap <int, int>::iterator hm1_Iter;  \n   typedef pair <int, int> Int_Pair;  \n  \n   hm1.insert ( Int_Pair ( 1, 10 ) );  \n   hm1.insert ( Int_Pair ( 2, 20 ) );  \n   hm1.insert ( Int_Pair ( 3, 30 ) );  \n   hm2.insert ( Int_Pair ( 10, 100 ) );  \n   hm2.insert ( Int_Pair ( 20, 200 ) );  \n   hm3.insert ( Int_Pair ( 30, 300 ) );  \n  \n   cout << \"The original hash_multimap hm1 is:\";  \n   for ( hm1_Iter = hm1.begin( ); hm1_Iter != hm1.end( ); hm1_Iter++ )  \n      cout << \" \" << hm1_Iter -> second;  \n   cout   << \".\" << endl;  \n  \n   // This is the member function version of swap  \n   hm1.swap( hm2 );  \n  \n   cout << \"After swapping with hm2, hash_multimap hm1 is:\";  \n   for ( hm1_Iter = hm1.begin( ); hm1_Iter != hm1.end( ); hm1_Iter++ )  \n      cout << \" \" << hm1_Iter -> second;  \n   cout  << \".\" << endl;  \n  \n   // This is the specialized template version of swap  \n   swap( hm1, hm3 );  \n  \n   cout << \"After swapping with hm3, hash_multimap hm1 is:\";  \n   for ( hm1_Iter = hm1.begin( ); hm1_Iter != hm1.end( ); hm1_Iter++ )  \n      cout << \" \" << hm1_Iter -> second;  \n   cout   << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe original hash_multimap hm1 is: 10 20 30.  \nAfter swapping with hm2, hash_multimap hm1 is: 100 200.  \nAfter swapping with hm3, hash_multimap hm1 is: 300.  \n```  \n  \n##  <a name=\"hash_multimap__upper_bound\"></a>  hash_multimap::upper_bound  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n Returns an iterator to the first element in a hash_multimap with a key that is greater than a specified key.  \n  \n```  \niterator upper_bound(const Key& key);\n\nconst_iterator upper_bound(const Key& key) const;\n```  \n  \n### Parameters  \n ` key`  \n The argument key to be compared with the sort key of an element from the hash_multimap being searched.  \n  \n### Return Value  \n An [iterator](#hash_multimap__iterator) or [const_iterator](#hash_multimap__const_iterator) that addresses the location of an element in a hash_multimap with a key that is greater than the argument key, or that addresses the location succeeding the last element in the hash_multimap if no match is found for the key.  \n  \n If the return value of `upper_bound` is assigned to a `const_iterator`, the hash_multimap object cannot be modified. If the return value of `upper_bound` is assigned to a **iterator**, the hash_multimap object can be modified.  \n  \n### Remarks  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_multimap_upper_bound.cpp  \n// compile with: /EHsc  \n#include <hash_map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   hash_multimap <int, int> hm1;  \n   hash_multimap <int, int> :: const_iterator hm1_AcIter, hm1_RcIter;  \n   typedef pair <int, int> Int_Pair;  \n  \n   hm1.insert ( Int_Pair ( 1, 10 ) );  \n   hm1.insert ( Int_Pair ( 2, 20 ) );  \n   hm1.insert ( Int_Pair ( 3, 30 ) );  \n   hm1.insert ( Int_Pair ( 3, 40 ) );  \n  \n   hm1_RcIter = hm1.upper_bound( 1 );  \n   cout << \"The 1st element of hash_multimap hm1 with \"  \n        << \"a key greater than 1 is: \"  \n        << hm1_RcIter -> second << \".\" << endl;  \n  \n   hm1_RcIter = hm1.upper_bound( 2 );  \n   cout << \"The first element of hash_multimap hm1\\n with a key \"  \n        << \" greater than 2 is: \"  \n        << hm1_RcIter -> second << \".\" << endl;  \n  \n   // If no match is found for the key, end( ) is returned  \n   hm1_RcIter = hm1.lower_bound( 4 );  \n  \n   if ( hm1_RcIter == hm1.end( ) )  \n      cout << \"The hash_multimap hm1 doesn't have an element \"  \n           << \"with a key of 4.\" << endl;  \n   else  \n      cout << \"The element of hash_multimap hm1 with a key of 4 is: \"  \n           << hm1_RcIter -> second << \".\" << endl;  \n  \n   // The element at a specific location in the hash_multimap can be  \n   // found using a dereferenced iterator addressing the location  \n   hm1_AcIter = hm1.begin( );  \n   hm1_RcIter = hm1.upper_bound( hm1_AcIter -> first );  \n   cout << \"The first element of hm1 with a key greater than\"  \n        << endl << \" that of the initial element of hm1 is: \"  \n        << hm1_RcIter -> second << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe 1st element of hash_multimap hm1 with a key greater than 1 is: 20.  \nThe first element of hash_multimap hm1  \n with a key  greater than 2 is: 30.  \nThe hash_multimap hm1 doesn't have an element with a key of 4.  \nThe first element of hm1 with a key greater than  \n that of the initial element of hm1 is: 20.  \n```  \n  \n##  <a name=\"hash_multimap__value_comp\"></a>  hash_multimap::value_comp  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n The member function returns a function object that determines the order of elements in a hash_multimap by comparing their key values.  \n  \n```  \nvalue_compare value_comp() const;\n```  \n  \n### Return Value  \n Returns the comparison function object that a hash_multimap uses to order its elements.  \n  \n### Remarks  \n For a hash_multimap *m*, if two elements *e*1( *k*1 *, d*1) and *e*2( *k*2 *, d*2) are objects of type [value_type](#hash_multimap__value_type), where *k*1 and *k*2 are their keys of type [key_type](#hash_multimap__key_type) and `d`1 and `d`2 are their data of type [mapped_type](#hash_multimap__mapped_type), then *m.*`value_comp`( )( *e*1 *, e*2) is equivalent to *m.*`key_comp`( ) ( *k*1 *, k*2). A stored object defines the member function  \n  \n **bool operator**( **value_type&**` left`, **value_type&** ` right`);  \n  \n which returns **true** if the key value of ` left` precedes and is not equal to the key value of ` right` in the sort order.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_multimap_value_comp.cpp  \n// compile with: /EHsc  \n#include <hash_map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n  \n   hash_multimap <int, int, hash_compare<int, less<int> > > hm1;  \n   hash_multimap <int, int, hash_compare<int, less<int> >   \n      >::value_compare vc1 = hm1.value_comp( );  \n   hash_multimap <int,int>::iterator Iter1, Iter2;  \n  \n   Iter1= hm1.insert ( hash_multimap <int, int> :: value_type ( 1, 10 ) );  \n   Iter2= hm1.insert ( hash_multimap <int, int> :: value_type ( 2, 5 ) );  \n  \n   if( vc1( *Iter1, *Iter2 ) == true )  \n   {  \n      cout << \"The element ( 1,10 ) precedes the element ( 2,5 ).\"  \n           << endl;  \n   }  \n   else     \n   {  \n      cout << \"The element ( 1,10 ) does \"  \n           << \"not precede the element ( 2,5 ).\"  \n           << endl;  \n   }  \n  \n   if( vc1( *Iter2, *Iter1 ) == true )     \n   {  \n      cout << \"The element ( 2,5 ) precedes the element ( 1,10 ).\"  \n           << endl;  \n   }  \n   else     \n   {  \n      cout << \"The element ( 2,5 ) does \"  \n           << \"not precede the element ( 1,10 ).\"  \n           << endl;  \n   }  \n}  \n```  \n  \n##  <a name=\"hash_multimap__value_type\"></a>  hash_multimap::value_type  \n  \n> [!NOTE]\n>  This API is obsolete. The alternative is [unordered_multimap Class](../standard-library/unordered-multimap-class.md).  \n  \n A type that represents the type of object stored in a hash_multimap.  \n  \n```  \ntypedef pair<const Key, Type> value_type;  \n```  \n  \n### Remarks  \n `value_type` is declared to be `pair` *\\<***const**[key_type](#hash_multimap__key_type), [mapped_type](#hash_multimap__mapped_type)> and not `pair` *<*`key_type`*,* `mapped_type`*>* because the keys of an associative container may not be changed using a nonconstant iterator or reference.  \n  \n In Visual C++ .NET 2003, members of the [<hash_map>](../standard-library/hash-map.md) and [<hash_set>](../standard-library/hash-set.md) header files are no longer in the std namespace, but rather have been moved into the stdext namespace. See [The stdext Namespace](../standard-library/stdext-namespace.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// hash_multimap_value_type.cpp  \n// compile with: /EHsc  \n#include <hash_map>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   using namespace stdext;  \n   typedef pair <const int, int> cInt2Int;  \n   hash_multimap <int, int> hm1;  \n   hash_multimap <int, int> :: key_type key1;  \n   hash_multimap <int, int> :: mapped_type mapped1;  \n   hash_multimap <int, int> :: value_type value1;  \n   hash_multimap <int, int> :: iterator pIter;  \n  \n   // value_type can be used to pass the correct type  \n   // explicitely to avoid implicit type conversion  \n   hm1.insert ( hash_multimap <int, int> :: value_type ( 1, 10 ) );  \n  \n   // Compare another way to insert objects into a hash_multimap  \n   hm1.insert ( cInt2Int ( 2, 20 ) );  \n  \n   // Initializing key1 and mapped1  \n   key1 = ( hm1.begin( ) -> first );  \n   mapped1 = ( hm1.begin( ) -> second );  \n  \n   cout << \"The key of first element in the hash_multimap is \"  \n        << key1 << \".\" << endl;  \n  \n   cout << \"The data value of first element in the hash_multimap is \"  \n        << mapped1 << \".\" << endl;  \n  \n   // The following line would cause an error because  \n   // the value_type is not assignable  \n   // value1 = cInt2Int ( 4, 40 );  \n  \n   cout  << \"The keys of the mapped elements are:\";  \n   for ( pIter = hm1.begin( ) ; pIter != hm1.end( ) ; pIter++ )  \n      cout << \" \" << pIter -> first;  \n   cout << \".\" << endl;  \n  \n   cout  << \"The values of the mapped elements are:\";  \n   for ( pIter = hm1.begin( ) ; pIter != hm1.end( ) ; pIter++ )  \n      cout << \" \" << pIter -> second;  \n   cout << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe key of first element in the hash_multimap is 1.  \nThe data value of first element in the hash_multimap is 10.  \nThe keys of the mapped elements are: 1 2.  \nThe values of the mapped elements are: 10 20.  \n```  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n"}