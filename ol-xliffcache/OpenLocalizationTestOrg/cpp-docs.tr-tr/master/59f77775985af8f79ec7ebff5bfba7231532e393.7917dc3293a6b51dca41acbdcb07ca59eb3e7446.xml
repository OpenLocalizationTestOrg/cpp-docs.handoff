{"nodes":[{"pos":[12,42],"content":"CBitmap Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CBitmap Class | Microsoft Docs","pos":[0,30]}]},{"pos":[633,646],"content":"CBitmap Class","linkify":"CBitmap Class","nodes":[{"content":"CBitmap Class","pos":[0,13]}]},{"content":"Encapsulates a Windows graphics device interface (GDI) bitmap and provides member functions to manipulate the bitmap.","pos":[647,764]},{"pos":[773,779],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[839,846],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[856,875],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[882,886]},{"content":"Description","pos":[887,898]},{"pos":[936,973],"content":"<bpt id=\"p1\">[</bpt>CBitmap::CBitmap<ept id=\"p1\">](#cbitmap__cbitmap)</ept>","source":"[CBitmap::CBitmap](#cbitmap__cbitmap)"},{"pos":[974,1004],"content":"Constructs a <ph id=\"ph1\">`CBitmap`</ph> object.","source":"Constructs a `CBitmap` object."},{"pos":[1015,1029],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1036,1040]},{"content":"Description","pos":[1041,1052]},{"pos":[1090,1137],"content":"<bpt id=\"p1\">[</bpt>CBitmap::CreateBitmap<ept id=\"p1\">](#cbitmap__createbitmap)</ept>","source":"[CBitmap::CreateBitmap](#cbitmap__createbitmap)"},{"content":"Initializes the object with a device-dependent memory bitmap that has a specified width, height, and bit pattern.","pos":[1138,1251]},{"pos":[1256,1319],"content":"<bpt id=\"p1\">[</bpt>CBitmap::CreateBitmapIndirect<ept id=\"p1\">](#cbitmap__createbitmapindirect)</ept>","source":"[CBitmap::CreateBitmapIndirect](#cbitmap__createbitmapindirect)"},{"pos":[1320,1451],"content":"Initializes the object with a bitmap with the width, height, and bit pattern (if one is specified) given in a <bpt id=\"p1\">**</bpt>BITMAP<ept id=\"p1\">**</ept> structure.","source":"Initializes the object with a bitmap with the width, height, and bit pattern (if one is specified) given in a **BITMAP** structure."},{"pos":[1456,1523],"content":"<bpt id=\"p1\">[</bpt>CBitmap::CreateCompatibleBitmap<ept id=\"p1\">](#cbitmap__createcompatiblebitmap)</ept>","source":"[CBitmap::CreateCompatibleBitmap](#cbitmap__createcompatiblebitmap)"},{"content":"Initializes the object with a bitmap so that it is compatible with a specified device.","pos":[1524,1610]},{"pos":[1615,1684],"content":"<bpt id=\"p1\">[</bpt>CBitmap::CreateDiscardableBitmap<ept id=\"p1\">](#cbitmap__creatediscardablebitmap)</ept>","source":"[CBitmap::CreateDiscardableBitmap](#cbitmap__creatediscardablebitmap)"},{"content":"Initializes the object with a discardable bitmap that is compatible with a specified device.","pos":[1685,1777]},{"pos":[1782,1825],"content":"<bpt id=\"p1\">[</bpt>CBitmap::FromHandle<ept id=\"p1\">](#cbitmap__fromhandle)</ept>","source":"[CBitmap::FromHandle](#cbitmap__fromhandle)"},{"pos":[1826,1916],"content":"Returns a pointer to a <ph id=\"ph1\">`CBitmap`</ph> object when given a handle to a Windows <ph id=\"ph2\">`HBITMAP`</ph> bitmap.","source":"Returns a pointer to a `CBitmap` object when given a handle to a Windows `HBITMAP` bitmap."},{"pos":[1921,1962],"content":"<bpt id=\"p1\">[</bpt>CBitmap::GetBitmap<ept id=\"p1\">](#cbitmap__getbitmap)</ept>","source":"[CBitmap::GetBitmap](#cbitmap__getbitmap)"},{"pos":[1963,2026],"content":"Fills a <bpt id=\"p1\">**</bpt>BITMAP<ept id=\"p1\">**</ept> structure with information about the bitmap.","source":"Fills a **BITMAP** structure with information about the bitmap."},{"pos":[2031,2080],"content":"<bpt id=\"p1\">[</bpt>CBitmap::GetBitmapBits<ept id=\"p1\">](#cbitmap__getbitmapbits)</ept>","source":"[CBitmap::GetBitmapBits](#cbitmap__getbitmapbits)"},{"content":"Copies the bits of the specified bitmap into the specified buffer.","pos":[2081,2147]},{"pos":[2152,2211],"content":"<bpt id=\"p1\">[</bpt>CBitmap::GetBitmapDimension<ept id=\"p1\">](#cbitmap__getbitmapdimension)</ept>","source":"[CBitmap::GetBitmapDimension](#cbitmap__getbitmapdimension)"},{"content":"Returns the width and height of the bitmap.","pos":[2212,2255]},{"content":"The height and width are assumed to have been set previously by the <bpt id=\"p1\">[</bpt>SetBitmapDimension<ept id=\"p1\">](#cbitmap__setbitmapdimension)</ept> member function.","pos":[2256,2391],"source":" The height and width are assumed to have been set previously by the [SetBitmapDimension](#cbitmap__setbitmapdimension) member function."},{"pos":[2396,2439],"content":"<bpt id=\"p1\">[</bpt>CBitmap::LoadBitmap<ept id=\"p1\">](#cbitmap__loadbitmap)</ept>","source":"[CBitmap::LoadBitmap](#cbitmap__loadbitmap)"},{"content":"Initializes the object by loading a named bitmap resource from the application's executable file and attaching the bitmap to the object.","pos":[2440,2576]},{"pos":[2581,2636],"content":"<bpt id=\"p1\">[</bpt>CBitmap::LoadMappedBitmap<ept id=\"p1\">](#cbitmap__loadmappedbitmap)</ept>","source":"[CBitmap::LoadMappedBitmap](#cbitmap__loadmappedbitmap)"},{"content":"Loads a bitmap and maps colors to current system colors.","pos":[2637,2693]},{"pos":[2698,2747],"content":"<bpt id=\"p1\">[</bpt>CBitmap::LoadOEMBitmap<ept id=\"p1\">](#cbitmap__loadoembitmap)</ept>","source":"[CBitmap::LoadOEMBitmap](#cbitmap__loadoembitmap)"},{"content":"Initializes the object by loading a predefined Windows bitmap and attaching the bitmap to the object.","pos":[2748,2849]},{"pos":[2854,2903],"content":"<bpt id=\"p1\">[</bpt>CBitmap::SetBitmapBits<ept id=\"p1\">](#cbitmap__setbitmapbits)</ept>","source":"[CBitmap::SetBitmapBits](#cbitmap__setbitmapbits)"},{"content":"Sets the bits of a bitmap to the specified bit values.","pos":[2904,2958]},{"pos":[2963,3022],"content":"<bpt id=\"p1\">[</bpt>CBitmap::SetBitmapDimension<ept id=\"p1\">](#cbitmap__setbitmapdimension)</ept>","source":"[CBitmap::SetBitmapDimension](#cbitmap__setbitmapdimension)"},{"content":"Assigns a width and height to a bitmap in 0.1-millimeter units.","pos":[3023,3086]},{"pos":[3097,3113],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[3120,3124]},{"content":"Description","pos":[3125,3136]},{"pos":[3174,3229],"content":"<bpt id=\"p1\">[</bpt>CBitmap::operator HBITMAP<ept id=\"p1\">](#cbitmap__operator_hbitmap)</ept>","source":"[CBitmap::operator HBITMAP](#cbitmap__operator_hbitmap)"},{"pos":[3230,3290],"content":"Returns the Windows handle attached to the <ph id=\"ph1\">`CBitmap`</ph> object.","source":"Returns the Windows handle attached to the `CBitmap` object."},{"pos":[3300,3307],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3311,3482],"content":"To use a <ph id=\"ph1\">`CBitmap`</ph> object, construct the object, attach a bitmap handle to it with one of the initialization member functions, and then call the object's member functions.","source":"To use a `CBitmap` object, construct the object, attach a bitmap handle to it with one of the initialization member functions, and then call the object's member functions."},{"pos":[3489,3603],"content":"For more information on using graphic objects like <ph id=\"ph1\">`CBitmap`</ph>, see <bpt id=\"p1\">[</bpt>Graphic Objects<ept id=\"p1\">](../../mfc/graphic-objects.md)</ept>.","source":"For more information on using graphic objects like `CBitmap`, see [Graphic Objects](../../mfc/graphic-objects.md)."},{"pos":[3612,3633],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[3637,3684],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[3691,3744],"content":"<bpt id=\"p1\">[</bpt>CGdiObject<ept id=\"p1\">](../../mfc/reference/cgdiobject-class.md)</ept>","source":"[CGdiObject](../../mfc/reference/cgdiobject-class.md)"},{"pos":[3769,3781],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3785,3805],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxwin.h","source":"**Header:** afxwin.h"},{"pos":[3815,3864],"content":"<bpt id=\"p1\">&lt;a name=\"cbitmap__cbitmap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CBitmap::CBitmap","linkify":"<a name=\"cbitmap__cbitmap\"></a>  CBitmap::CBitmap","source":"<a name=\"cbitmap__cbitmap\"></a>  CBitmap::CBitmap"},{"pos":[3868,3898],"content":"Constructs a <ph id=\"ph1\">`CBitmap`</ph> object.","source":"Constructs a `CBitmap` object."},{"pos":[3934,3941],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The resulting object must be initialized with one of the initialization member functions.","pos":[3945,4034]},{"pos":[4044,4103],"content":"<bpt id=\"p1\">&lt;a name=\"cbitmap__createbitmap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CBitmap::CreateBitmap","linkify":"<a name=\"cbitmap__createbitmap\"></a>  CBitmap::CreateBitmap","source":"<a name=\"cbitmap__createbitmap\"></a>  CBitmap::CreateBitmap"},{"content":"Initializes a device-dependent memory bitmap that has the specified width, height, and bit pattern.","pos":[4107,4206]},{"pos":[4354,4364],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the width (in pixels) of the bitmap.","pos":[4380,4426]},{"content":"Specifies the height (in pixels) of the bitmap.","pos":[4446,4493]},{"content":"Specifies the number of color planes in the bitmap.","pos":[4513,4564]},{"content":"Specifies the number of color bits per display pixel.","pos":[4586,4639]},{"content":"Points to an array of bytes that contains the initial bitmap bit values.","pos":[4658,4730]},{"content":"If it is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the new bitmap is left uninitialized.","pos":[4731,4787],"source":" If it is **NULL**, the new bitmap is left uninitialized."},{"pos":[4797,4809],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[4813,4848]},{"pos":[4858,4865],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For a color bitmap, either the <ph id=\"ph1\">`nPlanes`</ph> or <ph id=\"ph2\">`nBitcount`</ph> parameter should be set to 1.","pos":[4869,4954],"source":"For a color bitmap, either the `nPlanes` or `nBitcount` parameter should be set to 1."},{"content":"If both of these parameters are set to 1, <ph id=\"ph1\">`CreateBitmap`</ph> creates a monochrome bitmap.","pos":[4955,5040],"source":" If both of these parameters are set to 1, `CreateBitmap` creates a monochrome bitmap."},{"pos":[5047,5393],"content":"Although a bitmap cannot be directly selected for a display device, it can be selected as the current bitmap for a \"memory device context\" by using <bpt id=\"p1\">[</bpt>CDC::SelectObject<ept id=\"p1\">](../../mfc/reference/cdc-class.md#cdc__selectobject)</ept> and copied to any compatible device context by using the <bpt id=\"p2\">[</bpt>CDC::BitBlt<ept id=\"p2\">](../../mfc/reference/cdc-class.md#cdc__bitblt)</ept> function.","source":"Although a bitmap cannot be directly selected for a display device, it can be selected as the current bitmap for a \"memory device context\" by using [CDC::SelectObject](../../mfc/reference/cdc-class.md#cdc__selectobject) and copied to any compatible device context by using the [CDC::BitBlt](../../mfc/reference/cdc-class.md#cdc__bitblt) function."},{"pos":[5400,5566],"content":"When you finish with the <ph id=\"ph1\">`CBitmap`</ph> object created by the <ph id=\"ph2\">`CreateBitmap`</ph> function, first select the bitmap out of the device context, then delete the <ph id=\"ph3\">`CBitmap`</ph> object.","source":"When you finish with the `CBitmap` object created by the `CreateBitmap` function, first select the bitmap out of the device context, then delete the `CBitmap` object."},{"content":"For more information, see the description of the <bpt id=\"p1\">**</bpt>bmBits<ept id=\"p1\">**</ept> field in the <bpt id=\"p2\">**</bpt>BITMAP<ept id=\"p2\">**</ept> structure.","pos":[5573,5667],"source":"For more information, see the description of the **bmBits** field in the **BITMAP** structure."},{"content":"The <bpt id=\"p1\">[</bpt>BITMAP<ept id=\"p1\">](../../mfc/reference/bitmap-structure.md)</ept> structure is described under the <bpt id=\"p2\">[</bpt>CBitmap::CreateBitmapIndirect<ept id=\"p2\">](#cbitmap__createbitmapindirect)</ept> member function.","pos":[5668,5835],"source":" The [BITMAP](../../mfc/reference/bitmap-structure.md) structure is described under the [CBitmap::CreateBitmapIndirect](#cbitmap__createbitmapindirect) member function."},{"pos":[5845,5920],"content":"<bpt id=\"p1\">&lt;a name=\"cbitmap__createbitmapindirect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CBitmap::CreateBitmapIndirect","linkify":"<a name=\"cbitmap__createbitmapindirect\"></a>  CBitmap::CreateBitmapIndirect","source":"<a name=\"cbitmap__createbitmapindirect\"></a>  CBitmap::CreateBitmapIndirect"},{"pos":[5924,6059],"content":"Initializes a bitmap that has the width, height, and bit pattern (if one is specified) given in the structure pointed to by <ph id=\"ph1\">`lpBitmap`</ph>.","source":"Initializes a bitmap that has the width, height, and bit pattern (if one is specified) given in the structure pointed to by `lpBitmap`."},{"pos":[6130,6140],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to a <bpt id=\"p1\">[</bpt>BITMAP<ept id=\"p1\">](../../mfc/reference/bitmap-structure.md)</ept> structure that contains information about the bitmap.","pos":[6158,6273],"source":" Points to a [BITMAP](../../mfc/reference/bitmap-structure.md) structure that contains information about the bitmap."},{"pos":[6283,6295],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[6299,6334]},{"pos":[6344,6351],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Although a bitmap cannot be directly selected for a display device, it can be selected as the current bitmap for a memory device context by using <bpt id=\"p1\">[</bpt>CDC::SelectObject<ept id=\"p1\">](../../mfc/reference/cdc-class.md#cdc__selectobject)</ept> and copied to any compatible device context by using the <bpt id=\"p2\">[</bpt>CDC::BitBlt<ept id=\"p2\">](../../mfc/reference/cdc-class.md#cdc__bitblt)</ept> or <bpt id=\"p3\">[</bpt>CDC::StretchBlt<ept id=\"p3\">](../../mfc/reference/cdc-class.md#cdc__stretchblt)</ept> function.","pos":[6355,6770],"source":"Although a bitmap cannot be directly selected for a display device, it can be selected as the current bitmap for a memory device context by using [CDC::SelectObject](../../mfc/reference/cdc-class.md#cdc__selectobject) and copied to any compatible device context by using the [CDC::BitBlt](../../mfc/reference/cdc-class.md#cdc__bitblt) or [CDC::StretchBlt](../../mfc/reference/cdc-class.md#cdc__stretchblt) function."},{"content":"(The <bpt id=\"p1\">[</bpt>CDC::PatBlt<ept id=\"p1\">](../../mfc/reference/cdc-class.md#cdc__patblt)</ept> function can copy the bitmap for the current brush directly to the display device context.)","pos":[6771,6927],"source":" (The [CDC::PatBlt](../../mfc/reference/cdc-class.md#cdc__patblt) function can copy the bitmap for the current brush directly to the display device context.)"},{"content":"If the <bpt id=\"p1\">**</bpt>BITMAP<ept id=\"p1\">**</ept> structure pointed to by the <ph id=\"ph1\">`lpBitmap`</ph> parameter has been filled in by using the <ph id=\"ph2\">`GetObject`</ph> function, the bits of the bitmap are not specified and the bitmap is uninitialized.","pos":[6934,7128],"source":"If the **BITMAP** structure pointed to by the `lpBitmap` parameter has been filled in by using the `GetObject` function, the bits of the bitmap are not specified and the bitmap is uninitialized."},{"content":"To initialize the bitmap, an application can use a function such as <bpt id=\"p1\">[</bpt>CDC::BitBlt<ept id=\"p1\">](../../mfc/reference/cdc-class.md#cdc__bitblt)</ept> or <bpt id=\"p2\">[</bpt>SetDIBits<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/dd162973)</ept> to copy the bits from the bitmap identified by the first parameter of <ph id=\"ph1\">`CGdiObject::GetObject`</ph> to the bitmap created by <ph id=\"ph2\">`CreateBitmapIndirect`</ph>.","pos":[7129,7474],"source":" To initialize the bitmap, an application can use a function such as [CDC::BitBlt](../../mfc/reference/cdc-class.md#cdc__bitblt) or [SetDIBits](http://msdn.microsoft.com/library/windows/desktop/dd162973) to copy the bits from the bitmap identified by the first parameter of `CGdiObject::GetObject` to the bitmap created by `CreateBitmapIndirect`."},{"pos":[7481,7653],"content":"When you finish with the <ph id=\"ph1\">`CBitmap`</ph> object created with <ph id=\"ph2\">`CreateBitmapIndirect`</ph> function, first select the bitmap out of the device context, then delete the <ph id=\"ph3\">`CBitmap`</ph> object.","source":"When you finish with the `CBitmap` object created with `CreateBitmapIndirect` function, first select the bitmap out of the device context, then delete the `CBitmap` object."},{"pos":[7663,7742],"content":"<bpt id=\"p1\">&lt;a name=\"cbitmap__createcompatiblebitmap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CBitmap::CreateCompatibleBitmap","linkify":"<a name=\"cbitmap__createcompatiblebitmap\"></a>  CBitmap::CreateCompatibleBitmap","source":"<a name=\"cbitmap__createcompatiblebitmap\"></a>  CBitmap::CreateCompatibleBitmap"},{"pos":[7746,7821],"content":"Initializes a bitmap that is compatible with the device specified by <ph id=\"ph1\">`pDC`</ph>.","source":"Initializes a bitmap that is compatible with the device specified by `pDC`."},{"pos":[7927,7937],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the device context.","pos":[7950,7979]},{"content":"Specifies the width (in pixels) of the bitmap.","pos":[7998,8044]},{"content":"Specifies the height (in pixels) of the bitmap.","pos":[8064,8111]},{"pos":[8121,8133],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[8137,8172]},{"pos":[8182,8189],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The bitmap has the same number of color planes or the same bits-per-pixel format as the specified device context.","pos":[8193,8306]},{"content":"It can be selected as the current bitmap for any memory device that is compatible with the one specified by <ph id=\"ph1\">`pDC`</ph>.","pos":[8307,8421],"source":" It can be selected as the current bitmap for any memory device that is compatible with the one specified by `pDC`."},{"content":"If <ph id=\"ph1\">`pDC`</ph> is a memory device context, the bitmap returned has the same format as the currently selected bitmap in that device context.","pos":[8428,8561],"source":"If `pDC` is a memory device context, the bitmap returned has the same format as the currently selected bitmap in that device context."},{"content":"A \"memory device context\" is a block of memory that represents a display surface.","pos":[8562,8643]},{"content":"It can be used to prepare images in memory before copying them to the actual display surface of the compatible device.","pos":[8644,8762]},{"content":"When a memory device context is created, GDI automatically selects a monochrome stock bitmap for it.","pos":[8769,8869]},{"pos":[8876,9177],"content":"Since a color memory device context can have either color or monochrome bitmaps selected, the format of the bitmap returned by the <ph id=\"ph1\">`CreateCompatibleBitmap`</ph> function is not always the same; however, the format of a compatible bitmap for a nonmemory device context is always in the format of the device.","source":"Since a color memory device context can have either color or monochrome bitmaps selected, the format of the bitmap returned by the `CreateCompatibleBitmap` function is not always the same; however, the format of a compatible bitmap for a nonmemory device context is always in the format of the device."},{"pos":[9184,9362],"content":"When you finish with the <ph id=\"ph1\">`CBitmap`</ph> object created with the <ph id=\"ph2\">`CreateCompatibleBitmap`</ph> function, first select the bitmap out of the device context, then delete the <ph id=\"ph3\">`CBitmap`</ph> object.","source":"When you finish with the `CBitmap` object created with the `CreateCompatibleBitmap` function, first select the bitmap out of the device context, then delete the `CBitmap` object."},{"pos":[9372,9453],"content":"<bpt id=\"p1\">&lt;a name=\"cbitmap__creatediscardablebitmap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CBitmap::CreateDiscardableBitmap","linkify":"<a name=\"cbitmap__creatediscardablebitmap\"></a>  CBitmap::CreateDiscardableBitmap","source":"<a name=\"cbitmap__creatediscardablebitmap\"></a>  CBitmap::CreateDiscardableBitmap"},{"pos":[9457,9553],"content":"Initializes a discardable bitmap that is compatible with the device context identified by <ph id=\"ph1\">`pDC`</ph>.","source":"Initializes a discardable bitmap that is compatible with the device context identified by `pDC`."},{"pos":[9660,9670],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies a device context.","pos":[9683,9710]},{"content":"Specifies the width (in bits) of the bitmap.","pos":[9729,9773]},{"content":"Specifies the height (in bits) of the bitmap.","pos":[9793,9838]},{"pos":[9848,9860],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[9864,9899]},{"pos":[9909,9916],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The bitmap has the same number of color planes or the same bits-per-pixel format as the specified device context.","pos":[9920,10033]},{"content":"An application can select this bitmap as the current bitmap for a memory device that is compatible with the one specified by <ph id=\"ph1\">`pDC`</ph>.","pos":[10034,10165],"source":" An application can select this bitmap as the current bitmap for a memory device that is compatible with the one specified by `pDC`."},{"content":"Windows can discard a bitmap created by this function only if an application has not selected it into a display context.","pos":[10172,10292]},{"content":"If Windows discards the bitmap when it is not selected and the application later attempts to select it, the <bpt id=\"p1\">[</bpt>CDC::SelectObject<ept id=\"p1\">](../../mfc/reference/cdc-class.md#cdc__selectobject)</ept> function will return <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>.","pos":[10293,10503],"source":" If Windows discards the bitmap when it is not selected and the application later attempts to select it, the [CDC::SelectObject](../../mfc/reference/cdc-class.md#cdc__selectobject) function will return **NULL**."},{"pos":[10510,10689],"content":"When you finish with the <ph id=\"ph1\">`CBitmap`</ph> object created with the <ph id=\"ph2\">`CreateDiscardableBitmap`</ph> function, first select the bitmap out of the device context, then delete the <ph id=\"ph3\">`CBitmap`</ph> object.","source":"When you finish with the `CBitmap` object created with the `CreateDiscardableBitmap` function, first select the bitmap out of the device context, then delete the `CBitmap` object."},{"pos":[10699,10754],"content":"<bpt id=\"p1\">&lt;a name=\"cbitmap__fromhandle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CBitmap::FromHandle","linkify":"<a name=\"cbitmap__fromhandle\"></a>  CBitmap::FromHandle","source":"<a name=\"cbitmap__fromhandle\"></a>  CBitmap::FromHandle"},{"pos":[10758,10842],"content":"Returns a pointer to a <ph id=\"ph1\">`CBitmap`</ph> object when given a handle to a Windows GDI bitmap.","source":"Returns a pointer to a `CBitmap` object when given a handle to a Windows GDI bitmap."},{"pos":[10919,10929],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies a Windows GDI bitmap.","pos":[10946,10977]},{"pos":[10987,10999],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[11003,11069],"content":"A pointer to a <ph id=\"ph1\">`CBitmap`</ph> object if successful; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"A pointer to a `CBitmap` object if successful; otherwise **NULL**."},{"pos":[11079,11086],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If a <ph id=\"ph1\">`CBitmap`</ph> object is not already attached to the handle, a temporary <ph id=\"ph2\">`CBitmap`</ph> object is created and attached.","pos":[11090,11204],"source":"If a `CBitmap` object is not already attached to the handle, a temporary `CBitmap` object is created and attached."},{"content":"This temporary <ph id=\"ph1\">`CBitmap`</ph> object is valid only until the next time the application has idle time in its event loop, at which time all temporary graphic objects are deleted.","pos":[11205,11376],"source":" This temporary `CBitmap` object is valid only until the next time the application has idle time in its event loop, at which time all temporary graphic objects are deleted."},{"content":"Another way of saying this is that the temporary object is only valid during the processing of one window message.","pos":[11377,11491]},{"pos":[11501,11554],"content":"<bpt id=\"p1\">&lt;a name=\"cbitmap__getbitmap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CBitmap::GetBitmap","linkify":"<a name=\"cbitmap__getbitmap\"></a>  CBitmap::GetBitmap","source":"<a name=\"cbitmap__getbitmap\"></a>  CBitmap::GetBitmap"},{"content":"Retrieves image properties for the attached bitmap.","pos":[11558,11609]},{"pos":[11666,11676],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to a <bpt id=\"p1\">[</bpt>BITMAP Structure<ept id=\"p1\">](../../mfc/reference/bitmap-structure.md)</ept> structure that will receive the image properties.","pos":[11693,11815],"source":" Pointer to a [BITMAP Structure](../../mfc/reference/bitmap-structure.md) structure that will receive the image properties."},{"content":"This parameter must not be <ph id=\"ph1\">`NULL`</ph>.","pos":[11816,11850],"source":" This parameter must not be `NULL`."},{"pos":[11860,11872],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the method was successful; otherwise 0.","pos":[11876,11926]},{"pos":[11936,11943],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11953,12014],"content":"<bpt id=\"p1\">&lt;a name=\"cbitmap__getbitmapbits\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CBitmap::GetBitmapBits","linkify":"<a name=\"cbitmap__getbitmapbits\"></a>  CBitmap::GetBitmapBits","source":"<a name=\"cbitmap__getbitmapbits\"></a>  CBitmap::GetBitmapBits"},{"content":"Copies the bit pattern of the attached bitmap into the specified buffer.","pos":[12018,12090]},{"pos":[12186,12196],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of bytes to copy to the buffer.","pos":[12213,12255]},{"content":"Pointer to the buffer that will receive the bitmap.","pos":[12274,12325]},{"pos":[12335,12347],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of bytes copied to the buffer if the method was successful; otherwise 0.","pos":[12351,12434]},{"pos":[12444,12451],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12455,12539],"content":"Use <bpt id=\"p1\">[</bpt>CBitmap::GetBitmap<ept id=\"p1\">](#cbitmap__getbitmap)</ept> to determine the required buffer size.","source":"Use [CBitmap::GetBitmap](#cbitmap__getbitmap) to determine the required buffer size."},{"pos":[12549,12620],"content":"<bpt id=\"p1\">&lt;a name=\"cbitmap__getbitmapdimension\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CBitmap::GetBitmapDimension","linkify":"<a name=\"cbitmap__getbitmapdimension\"></a>  CBitmap::GetBitmapDimension","source":"<a name=\"cbitmap__getbitmapdimension\"></a>  CBitmap::GetBitmapDimension"},{"content":"Returns the width and height of the bitmap.","pos":[12624,12667]},{"pos":[12729,12741],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width and height of the bitmap, measured in 0.1-millimeter units.","pos":[12745,12814]},{"content":"The height is in the <bpt id=\"p1\">**</bpt>cy<ept id=\"p1\">**</ept> member of the <ph id=\"ph1\">`CSize`</ph> object, and the width is in the <bpt id=\"p2\">**</bpt>cx<ept id=\"p2\">**</ept> member.","pos":[12815,12911],"source":" The height is in the **cy** member of the `CSize` object, and the width is in the **cx** member."},{"content":"If the bitmap width and height have not been set by using <ph id=\"ph1\">`SetBitmapDimension`</ph>, the return value is 0.","pos":[12912,13014],"source":" If the bitmap width and height have not been set by using `SetBitmapDimension`, the return value is 0."},{"pos":[13024,13031],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[13035,13176],"content":"The height and width are assumed to have been set previously by using the <bpt id=\"p1\">[</bpt>SetBitmapDimension<ept id=\"p1\">](#cbitmap__setbitmapdimension)</ept> member function.","source":"The height and width are assumed to have been set previously by using the [SetBitmapDimension](#cbitmap__setbitmapdimension) member function."},{"pos":[13186,13241],"content":"<bpt id=\"p1\">&lt;a name=\"cbitmap__loadbitmap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CBitmap::LoadBitmap","linkify":"<a name=\"cbitmap__loadbitmap\"></a>  CBitmap::LoadBitmap","source":"<a name=\"cbitmap__loadbitmap\"></a>  CBitmap::LoadBitmap"},{"pos":[13245,13386],"content":"Loads the bitmap resource named by <ph id=\"ph1\">`lpszResourceName`</ph> or identified by the ID number in <ph id=\"ph2\">`nIDResource`</ph> from the application's executable file.","source":"Loads the bitmap resource named by `lpszResourceName` or identified by the ID number in `nIDResource` from the application's executable file."},{"pos":[13492,13502],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to a null-terminated string that contains the name of the bitmap resource.","pos":[13528,13609]},{"content":"Specifies the resource ID number of the bitmap resource.","pos":[13633,13689]},{"pos":[13699,13711],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[13715,13750]},{"pos":[13760,13767],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[13771,13825],"content":"The loaded bitmap is attached to the <ph id=\"ph1\">`CBitmap`</ph> object.","source":"The loaded bitmap is attached to the `CBitmap` object."},{"pos":[13832,13972],"content":"If the bitmap identified by <ph id=\"ph1\">`lpszResourceName`</ph> does not exist or if there is insufficient memory to load the bitmap, the function returns 0.","source":"If the bitmap identified by `lpszResourceName` does not exist or if there is insufficient memory to load the bitmap, the function returns 0."},{"pos":[13979,14210],"content":"You can use the <bpt id=\"p1\">[</bpt>CGdiObject::DeleteObject<ept id=\"p1\">](../../mfc/reference/cgdiobject-class.md#cgdiobject__deleteobject)</ept> function to delete bitmap loaded by the <ph id=\"ph1\">`LoadBitmap`</ph> function, or the <ph id=\"ph2\">`CBitmap`</ph> destructor will delete the object for you.","source":"You can use the [CGdiObject::DeleteObject](../../mfc/reference/cgdiobject-class.md#cgdiobject__deleteobject) function to delete bitmap loaded by the `LoadBitmap` function, or the `CBitmap` destructor will delete the object for you."},{"pos":[14218,14313],"content":"[!CAUTION]\n Before you delete the object, make sure it is not selected into a device context.","leadings":["","> "],"nodes":[{"content":"Before you delete the object, make sure it is not selected into a device context.","pos":[12,93]}]},{"content":"The following bitmaps were added to Windows versions 3.1 and later:","pos":[14320,14387]},{"pos":[14394,14447],"content":"<bpt id=\"p1\">**</bpt>OBM_UPARRROWIOBM_DNARROWIOBM_RGARROWIOBM_LFARROWI<ept id=\"p1\">**</ept>","source":"**OBM_UPARRROWIOBM_DNARROWIOBM_RGARROWIOBM_LFARROWI**"},{"content":"These bitmaps are not found in device drivers for Windows versions 3.0 and earlier.","pos":[14454,14537]},{"content":"For a complete list of bitmaps and a display of their appearance, see the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[14538,14664],"source":" For a complete list of bitmaps and a display of their appearance, see the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[14674,14741],"content":"<bpt id=\"p1\">&lt;a name=\"cbitmap__loadmappedbitmap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CBitmap::LoadMappedBitmap","linkify":"<a name=\"cbitmap__loadmappedbitmap\"></a>  CBitmap::LoadMappedBitmap","source":"<a name=\"cbitmap__loadmappedbitmap\"></a>  CBitmap::LoadMappedBitmap"},{"content":"Call this member function to load a bitmap and map the colors to the current system colors.","pos":[14745,14836]},{"pos":[14988,14998],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The ID of the bitmap resource.","pos":[15017,15047]},{"content":"A flag for a bitmap.","pos":[15066,15086]},{"content":"Can be zero or <bpt id=\"p1\">**</bpt>CMB_MASKED<ept id=\"p1\">**</ept>.","pos":[15087,15117],"source":" Can be zero or **CMB_MASKED**."},{"content":"A pointer to a <bpt id=\"p1\">**</bpt>COLORMAP<ept id=\"p1\">**</ept> structure that contains the color information needed to map the bitmaps.","pos":[15140,15240],"source":" A pointer to a **COLORMAP** structure that contains the color information needed to map the bitmaps."},{"content":"If this parameter is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the function uses the default color map.","pos":[15241,15312],"source":" If this parameter is **NULL**, the function uses the default color map."},{"content":"<bpt id=\"p1\">*</bpt>nMapSize<ept id=\"p1\">*</ept>","pos":[15319,15329],"source":"*nMapSize*"},{"content":"The number of color maps pointed to by <ph id=\"ph1\">`lpColorMap`</ph>.","pos":[15333,15385],"source":" The number of color maps pointed to by `lpColorMap`."},{"pos":[15395,15407],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[15411,15446]},{"pos":[15456,15463],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[15467,15545],"content":"By default, <ph id=\"ph1\">`LoadMappedBitmap`</ph> will map colors commonly used in button glyphs.","source":"By default, `LoadMappedBitmap` will map colors commonly used in button glyphs."},{"pos":[15552,15840],"content":"For information about creating a mapped bitmap, see the Windows function <bpt id=\"p1\">[</bpt>CreateMappedBitmap<ept id=\"p1\">](http://go.microsoft.com/fwlink/linkid=230562)</ept> and the <bpt id=\"p2\">[</bpt>COLORMAP<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb760448)</ept> structure in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For information about creating a mapped bitmap, see the Windows function [CreateMappedBitmap](http://go.microsoft.com/fwlink/linkid=230562) and the [COLORMAP](http://msdn.microsoft.com/library/windows/desktop/bb760448) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[15850,15911],"content":"<bpt id=\"p1\">&lt;a name=\"cbitmap__loadoembitmap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CBitmap::LoadOEMBitmap","linkify":"<a name=\"cbitmap__loadoembitmap\"></a>  CBitmap::LoadOEMBitmap","source":"<a name=\"cbitmap__loadoembitmap\"></a>  CBitmap::LoadOEMBitmap"},{"content":"Loads a predefined bitmap used by Windows.","pos":[15915,15957]},{"pos":[16018,16028],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"ID number of the predefined Windows bitmap.","pos":[16047,16090]},{"content":"The possible values are listed below from WINDOWS.H:","pos":[16091,16143]},{"pos":[16164,16182],"content":"<bpt id=\"p1\">**</bpt>OBM_BTNCORNERS<ept id=\"p1\">**</ept>","source":"**OBM_BTNCORNERS**"},{"pos":[16183,16202],"content":"<bpt id=\"p1\">**</bpt>OBM_OLD_RESTORE<ept id=\"p1\">**</ept>","source":"**OBM_OLD_RESTORE**"},{"pos":[16207,16221],"content":"<bpt id=\"p1\">**</bpt>OBM_BTSIZE<ept id=\"p1\">**</ept>","source":"**OBM_BTSIZE**"},{"pos":[16222,16241],"content":"<bpt id=\"p1\">**</bpt>OBM_OLD_RGARROW<ept id=\"p1\">**</ept>","source":"**OBM_OLD_RGARROW**"},{"pos":[16246,16259],"content":"<bpt id=\"p1\">**</bpt>OBM_CHECK<ept id=\"p1\">**</ept>","source":"**OBM_CHECK**"},{"pos":[16260,16279],"content":"<bpt id=\"p1\">**</bpt>OBM_OLD_UPARROW<ept id=\"p1\">**</ept>","source":"**OBM_OLD_UPARROW**"},{"pos":[16284,16302],"content":"<bpt id=\"p1\">**</bpt>OBM_CHECKBOXES<ept id=\"p1\">**</ept>","source":"**OBM_CHECKBOXES**"},{"pos":[16303,16319],"content":"<bpt id=\"p1\">**</bpt>OBM_OLD_ZOOM<ept id=\"p1\">**</ept>","source":"**OBM_OLD_ZOOM**"},{"pos":[16324,16337],"content":"<bpt id=\"p1\">**</bpt>OBM_CLOSE<ept id=\"p1\">**</ept>","source":"**OBM_CLOSE**"},{"pos":[16338,16352],"content":"<bpt id=\"p1\">**</bpt>OBM_REDUCE<ept id=\"p1\">**</ept>","source":"**OBM_REDUCE**"},{"pos":[16357,16370],"content":"<bpt id=\"p1\">**</bpt>OBM_COMBO<ept id=\"p1\">**</ept>","source":"**OBM_COMBO**"},{"pos":[16371,16386],"content":"<bpt id=\"p1\">**</bpt>OBM_REDUCED<ept id=\"p1\">**</ept>","source":"**OBM_REDUCED**"},{"pos":[16391,16406],"content":"<bpt id=\"p1\">**</bpt>OBM_DNARROW<ept id=\"p1\">**</ept>","source":"**OBM_DNARROW**"},{"pos":[16407,16422],"content":"<bpt id=\"p1\">**</bpt>OBM_RESTORE<ept id=\"p1\">**</ept>","source":"**OBM_RESTORE**"},{"pos":[16427,16443],"content":"<bpt id=\"p1\">**</bpt>OBM_DNARROWD<ept id=\"p1\">**</ept>","source":"**OBM_DNARROWD**"},{"pos":[16444,16460],"content":"<bpt id=\"p1\">**</bpt>OBM_RESTORED<ept id=\"p1\">**</ept>","source":"**OBM_RESTORED**"},{"pos":[16465,16481],"content":"<bpt id=\"p1\">**</bpt>OBM_DNARROWI<ept id=\"p1\">**</ept>","source":"**OBM_DNARROWI**"},{"pos":[16482,16497],"content":"<bpt id=\"p1\">**</bpt>OBM_RGARROW<ept id=\"p1\">**</ept>","source":"**OBM_RGARROW**"},{"pos":[16502,16517],"content":"<bpt id=\"p1\">**</bpt>OBM_LFARROW<ept id=\"p1\">**</ept>","source":"**OBM_LFARROW**"},{"pos":[16518,16534],"content":"<bpt id=\"p1\">**</bpt>OBM_RGARROWD<ept id=\"p1\">**</ept>","source":"**OBM_RGARROWD**"},{"pos":[16539,16555],"content":"<bpt id=\"p1\">**</bpt>OBM_LFARROWD<ept id=\"p1\">**</ept>","source":"**OBM_LFARROWD**"},{"pos":[16556,16572],"content":"<bpt id=\"p1\">**</bpt>OBM_RGARROWI<ept id=\"p1\">**</ept>","source":"**OBM_RGARROWI**"},{"pos":[16577,16593],"content":"<bpt id=\"p1\">**</bpt>OBM_LFARROWI<ept id=\"p1\">**</ept>","source":"**OBM_LFARROWI**"},{"pos":[16594,16606],"content":"<bpt id=\"p1\">**</bpt>OBM_SIZE<ept id=\"p1\">**</ept>","source":"**OBM_SIZE**"},{"pos":[16611,16626],"content":"<bpt id=\"p1\">**</bpt>OBM_MNARROW<ept id=\"p1\">**</ept>","source":"**OBM_MNARROW**"},{"pos":[16627,16642],"content":"<bpt id=\"p1\">**</bpt>OBM_UPARROW<ept id=\"p1\">**</ept>","source":"**OBM_UPARROW**"},{"pos":[16647,16664],"content":"<bpt id=\"p1\">**</bpt>OBM_OLD_CLOSE<ept id=\"p1\">**</ept>","source":"**OBM_OLD_CLOSE**"},{"pos":[16665,16681],"content":"<bpt id=\"p1\">**</bpt>OBM_UPARROWD<ept id=\"p1\">**</ept>","source":"**OBM_UPARROWD**"},{"pos":[16686,16705],"content":"<bpt id=\"p1\">**</bpt>OBM_OLD_DNARROW<ept id=\"p1\">**</ept>","source":"**OBM_OLD_DNARROW**"},{"pos":[16706,16721],"content":"<bpt id=\"p1\">**</bpt>OBM_UPARROW<ept id=\"p1\">**</ept>","source":"**OBM_UPARROW**"},{"pos":[16726,16745],"content":"<bpt id=\"p1\">**</bpt>OBM_OLD_LFARROW<ept id=\"p1\">**</ept>","source":"**OBM_OLD_LFARROW**"},{"pos":[16746,16758],"content":"<bpt id=\"p1\">**</bpt>OBM_ZOOM<ept id=\"p1\">**</ept>","source":"**OBM_ZOOM**"},{"pos":[16763,16781],"content":"<bpt id=\"p1\">**</bpt>OBM_OLD_REDUCE<ept id=\"p1\">**</ept>","source":"**OBM_OLD_REDUCE**"},{"pos":[16782,16795],"content":"<bpt id=\"p1\">**</bpt>OBM_ZOOMD<ept id=\"p1\">**</ept>","source":"**OBM_ZOOMD**"},{"pos":[16806,16818],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[16822,16857]},{"pos":[16867,16874],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[16878,16975],"content":"Bitmap names that begin with <bpt id=\"p1\">**</bpt>OBM_OLD<ept id=\"p1\">**</ept> represent bitmaps used by Windows versions prior to 3.0.","source":"Bitmap names that begin with **OBM_OLD** represent bitmaps used by Windows versions prior to 3.0."},{"pos":[16982,17110],"content":"Note that the constant <bpt id=\"p1\">**</bpt>OEMRESOURCE<ept id=\"p1\">**</ept> must be defined before including WINDOWS.H in order to use any of the <bpt id=\"p2\">**</bpt>OBM_<ept id=\"p2\">**</ept> constants.","source":"Note that the constant **OEMRESOURCE** must be defined before including WINDOWS.H in order to use any of the **OBM_** constants."},{"pos":[17120,17187],"content":"<bpt id=\"p1\">&lt;a name=\"cbitmap__operator_hbitmap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CBitmap::operator HBITMAP","linkify":"<a name=\"cbitmap__operator_hbitmap\"></a>  CBitmap::operator HBITMAP","source":"<a name=\"cbitmap__operator_hbitmap\"></a>  CBitmap::operator HBITMAP"},{"pos":[17191,17272],"content":"Use this operator to get the attached Windows GDI handle of the <ph id=\"ph1\">`CBitmap`</ph> object.","source":"Use this operator to get the attached Windows GDI handle of the `CBitmap` object."},{"pos":[17326,17338],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[17342,17448],"content":"If successful, a handle to the Windows GDI object represented by the <ph id=\"ph1\">`CBitmap`</ph> object; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"If successful, a handle to the Windows GDI object represented by the `CBitmap` object; otherwise **NULL**."},{"pos":[17458,17465],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17469,17555],"content":"This operator is a casting operator, which supports direct use of an <ph id=\"ph1\">`HBITMAP`</ph> object.","source":"This operator is a casting operator, which supports direct use of an `HBITMAP` object."},{"pos":[17562,17753],"content":"For more information about using graphic objects, see <bpt id=\"p1\">[</bpt>Graphic Objects<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd144962)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information about using graphic objects, see [Graphic Objects](http://msdn.microsoft.com/library/windows/desktop/dd144962) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[17763,17824],"content":"<bpt id=\"p1\">&lt;a name=\"cbitmap__setbitmapbits\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CBitmap::SetBitmapBits","linkify":"<a name=\"cbitmap__setbitmapbits\"></a>  CBitmap::SetBitmapBits","source":"<a name=\"cbitmap__setbitmapbits\"></a>  CBitmap::SetBitmapBits"},{"pos":[17828,17890],"content":"Sets the bits of a bitmap to the bit values given by <ph id=\"ph1\">`lpBits`</ph>.","source":"Sets the bits of a bitmap to the bit values given by `lpBits`."},{"pos":[17982,17992],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the number of bytes pointed to by <ph id=\"ph1\">`lpBits`</ph>.","pos":[18009,18062],"source":" Specifies the number of bytes pointed to by `lpBits`."},{"content":"Points to the <bpt id=\"p1\">**</bpt>BYTE<ept id=\"p1\">**</ept> array that contains the pixel values to be copied to the <ph id=\"ph1\">`CBitmap`</ph> object.","pos":[18081,18178],"source":" Points to the **BYTE** array that contains the pixel values to be copied to the `CBitmap` object."},{"content":"In order for the bitmap to be able to render its image correctly, the values should be formatted to conform to the height, width and color depth values that were specified when the CBitmap instance was created.","pos":[18179,18389]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CBitmap::CreateBitmap<ept id=\"p1\">](#cbitmap__createbitmap)</ept>.","pos":[18390,18464],"source":" For more information, see [CBitmap::CreateBitmap](#cbitmap__createbitmap)."},{"pos":[18474,18486],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of bytes used in setting the bitmap bits; 0 if the function fails.","pos":[18490,18567]},{"pos":[18577,18648],"content":"<bpt id=\"p1\">&lt;a name=\"cbitmap__setbitmapdimension\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CBitmap::SetBitmapDimension","linkify":"<a name=\"cbitmap__setbitmapdimension\"></a>  CBitmap::SetBitmapDimension","source":"<a name=\"cbitmap__setbitmapdimension\"></a>  CBitmap::SetBitmapDimension"},{"content":"Assigns a width and height to a bitmap in 0.1-millimeter units.","pos":[18652,18715]},{"pos":[18802,18812],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the width of the bitmap (in 0.1-millimeter units).","pos":[18828,18888]},{"content":"Specifies the height of the bitmap (in 0.1-millimeter units).","pos":[18908,18969]},{"pos":[18979,18991],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The previous bitmap dimensions.","pos":[18995,19026]},{"content":"Height is in the <bpt id=\"p1\">**</bpt>cy<ept id=\"p1\">**</ept> member variable of the <ph id=\"ph1\">`CSize`</ph> object, and width is in the <bpt id=\"p2\">**</bpt>cx<ept id=\"p2\">**</ept> member variable.","pos":[19027,19133],"source":" Height is in the **cy** member variable of the `CSize` object, and width is in the **cx** member variable."},{"pos":[19143,19150],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[19154,19307],"content":"The GDI does not use these values except to return them when an application calls the <bpt id=\"p1\">[</bpt>GetBitmapDimension<ept id=\"p1\">](#cbitmap__getbitmapdimension)</ept> member function.","source":"The GDI does not use these values except to return them when an application calls the [GetBitmapDimension](#cbitmap__getbitmapdimension) member function."},{"pos":[19316,19324],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>MFC Sample MDI<ept id=\"p1\">](../../visual-cpp-samples.md)</ept><ph id=\"ph1\"> </ph>","pos":[19328,19374],"source":"[MFC Sample MDI](../../visual-cpp-samples.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CGdiObject Class<ept id=\"p1\">](../../mfc/reference/cgdiobject-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[19377,19438],"source":" [CGdiObject Class](../../mfc/reference/cgdiobject-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept>","pos":[19441,19489],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md)"}],"content":"---\ntitle: \"CBitmap Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CBitmap\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"drawing, tools\"\n  - \"CBitmap class\"\n  - \"GDI bitmap\"\nms.assetid: 3980616a-c59d-495a-86e6-62bd3889c84c\ncaps.latest.revision: 22\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CBitmap Class\nEncapsulates a Windows graphics device interface (GDI) bitmap and provides member functions to manipulate the bitmap.  \n  \n## Syntax  \n  \n```  \nclass CBitmap : public CGdiObject  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CBitmap::CBitmap](#cbitmap__cbitmap)|Constructs a `CBitmap` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CBitmap::CreateBitmap](#cbitmap__createbitmap)|Initializes the object with a device-dependent memory bitmap that has a specified width, height, and bit pattern.|  \n|[CBitmap::CreateBitmapIndirect](#cbitmap__createbitmapindirect)|Initializes the object with a bitmap with the width, height, and bit pattern (if one is specified) given in a **BITMAP** structure.|  \n|[CBitmap::CreateCompatibleBitmap](#cbitmap__createcompatiblebitmap)|Initializes the object with a bitmap so that it is compatible with a specified device.|  \n|[CBitmap::CreateDiscardableBitmap](#cbitmap__creatediscardablebitmap)|Initializes the object with a discardable bitmap that is compatible with a specified device.|  \n|[CBitmap::FromHandle](#cbitmap__fromhandle)|Returns a pointer to a `CBitmap` object when given a handle to a Windows `HBITMAP` bitmap.|  \n|[CBitmap::GetBitmap](#cbitmap__getbitmap)|Fills a **BITMAP** structure with information about the bitmap.|  \n|[CBitmap::GetBitmapBits](#cbitmap__getbitmapbits)|Copies the bits of the specified bitmap into the specified buffer.|  \n|[CBitmap::GetBitmapDimension](#cbitmap__getbitmapdimension)|Returns the width and height of the bitmap. The height and width are assumed to have been set previously by the [SetBitmapDimension](#cbitmap__setbitmapdimension) member function.|  \n|[CBitmap::LoadBitmap](#cbitmap__loadbitmap)|Initializes the object by loading a named bitmap resource from the application's executable file and attaching the bitmap to the object.|  \n|[CBitmap::LoadMappedBitmap](#cbitmap__loadmappedbitmap)|Loads a bitmap and maps colors to current system colors.|  \n|[CBitmap::LoadOEMBitmap](#cbitmap__loadoembitmap)|Initializes the object by loading a predefined Windows bitmap and attaching the bitmap to the object.|  \n|[CBitmap::SetBitmapBits](#cbitmap__setbitmapbits)|Sets the bits of a bitmap to the specified bit values.|  \n|[CBitmap::SetBitmapDimension](#cbitmap__setbitmapdimension)|Assigns a width and height to a bitmap in 0.1-millimeter units.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CBitmap::operator HBITMAP](#cbitmap__operator_hbitmap)|Returns the Windows handle attached to the `CBitmap` object.|  \n  \n## Remarks  \n To use a `CBitmap` object, construct the object, attach a bitmap handle to it with one of the initialization member functions, and then call the object's member functions.  \n  \n For more information on using graphic objects like `CBitmap`, see [Graphic Objects](../../mfc/graphic-objects.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CGdiObject](../../mfc/reference/cgdiobject-class.md)  \n  \n `CBitmap`  \n  \n## Requirements  \n **Header:** afxwin.h  \n  \n##  <a name=\"cbitmap__cbitmap\"></a>  CBitmap::CBitmap  \n Constructs a `CBitmap` object.  \n  \n```  \nCBitmap();\n```  \n  \n### Remarks  \n The resulting object must be initialized with one of the initialization member functions.  \n  \n##  <a name=\"cbitmap__createbitmap\"></a>  CBitmap::CreateBitmap  \n Initializes a device-dependent memory bitmap that has the specified width, height, and bit pattern.  \n  \n```  \nBOOL CreateBitmap(\n    int nWidth,  \n    int nHeight,  \n    UINT nPlanes,  \n    UINT nBitcount,  \n    const void* lpBits);\n```  \n  \n### Parameters  \n `nWidth`  \n Specifies the width (in pixels) of the bitmap.  \n  \n `nHeight`  \n Specifies the height (in pixels) of the bitmap.  \n  \n `nPlanes`  \n Specifies the number of color planes in the bitmap.  \n  \n `nBitcount`  \n Specifies the number of color bits per display pixel.  \n  \n `lpBits`  \n Points to an array of bytes that contains the initial bitmap bit values. If it is **NULL**, the new bitmap is left uninitialized.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n For a color bitmap, either the `nPlanes` or `nBitcount` parameter should be set to 1. If both of these parameters are set to 1, `CreateBitmap` creates a monochrome bitmap.  \n  \n Although a bitmap cannot be directly selected for a display device, it can be selected as the current bitmap for a \"memory device context\" by using [CDC::SelectObject](../../mfc/reference/cdc-class.md#cdc__selectobject) and copied to any compatible device context by using the [CDC::BitBlt](../../mfc/reference/cdc-class.md#cdc__bitblt) function.  \n  \n When you finish with the `CBitmap` object created by the `CreateBitmap` function, first select the bitmap out of the device context, then delete the `CBitmap` object.  \n  \n For more information, see the description of the **bmBits** field in the **BITMAP** structure. The [BITMAP](../../mfc/reference/bitmap-structure.md) structure is described under the [CBitmap::CreateBitmapIndirect](#cbitmap__createbitmapindirect) member function.  \n  \n##  <a name=\"cbitmap__createbitmapindirect\"></a>  CBitmap::CreateBitmapIndirect  \n Initializes a bitmap that has the width, height, and bit pattern (if one is specified) given in the structure pointed to by `lpBitmap`.  \n  \n```  \nBOOL CreateBitmapIndirect(LPBITMAP lpBitmap);\n```  \n  \n### Parameters  \n `lpBitmap`  \n Points to a [BITMAP](../../mfc/reference/bitmap-structure.md) structure that contains information about the bitmap.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n Although a bitmap cannot be directly selected for a display device, it can be selected as the current bitmap for a memory device context by using [CDC::SelectObject](../../mfc/reference/cdc-class.md#cdc__selectobject) and copied to any compatible device context by using the [CDC::BitBlt](../../mfc/reference/cdc-class.md#cdc__bitblt) or [CDC::StretchBlt](../../mfc/reference/cdc-class.md#cdc__stretchblt) function. (The [CDC::PatBlt](../../mfc/reference/cdc-class.md#cdc__patblt) function can copy the bitmap for the current brush directly to the display device context.)  \n  \n If the **BITMAP** structure pointed to by the `lpBitmap` parameter has been filled in by using the `GetObject` function, the bits of the bitmap are not specified and the bitmap is uninitialized. To initialize the bitmap, an application can use a function such as [CDC::BitBlt](../../mfc/reference/cdc-class.md#cdc__bitblt) or [SetDIBits](http://msdn.microsoft.com/library/windows/desktop/dd162973) to copy the bits from the bitmap identified by the first parameter of `CGdiObject::GetObject` to the bitmap created by `CreateBitmapIndirect`.  \n  \n When you finish with the `CBitmap` object created with `CreateBitmapIndirect` function, first select the bitmap out of the device context, then delete the `CBitmap` object.  \n  \n##  <a name=\"cbitmap__createcompatiblebitmap\"></a>  CBitmap::CreateCompatibleBitmap  \n Initializes a bitmap that is compatible with the device specified by `pDC`.  \n  \n```  \nBOOL CreateCompatibleBitmap(\n    CDC* pDC,  \n    int nWidth,  \n    int nHeight);\n```  \n  \n### Parameters  \n `pDC`  \n Specifies the device context.  \n  \n `nWidth`  \n Specifies the width (in pixels) of the bitmap.  \n  \n `nHeight`  \n Specifies the height (in pixels) of the bitmap.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n The bitmap has the same number of color planes or the same bits-per-pixel format as the specified device context. It can be selected as the current bitmap for any memory device that is compatible with the one specified by `pDC`.  \n  \n If `pDC` is a memory device context, the bitmap returned has the same format as the currently selected bitmap in that device context. A \"memory device context\" is a block of memory that represents a display surface. It can be used to prepare images in memory before copying them to the actual display surface of the compatible device.  \n  \n When a memory device context is created, GDI automatically selects a monochrome stock bitmap for it.  \n  \n Since a color memory device context can have either color or monochrome bitmaps selected, the format of the bitmap returned by the `CreateCompatibleBitmap` function is not always the same; however, the format of a compatible bitmap for a nonmemory device context is always in the format of the device.  \n  \n When you finish with the `CBitmap` object created with the `CreateCompatibleBitmap` function, first select the bitmap out of the device context, then delete the `CBitmap` object.  \n  \n##  <a name=\"cbitmap__creatediscardablebitmap\"></a>  CBitmap::CreateDiscardableBitmap  \n Initializes a discardable bitmap that is compatible with the device context identified by `pDC`.  \n  \n```  \nBOOL CreateDiscardableBitmap(\n    CDC* pDC,  \n    int nWidth,  \n    int nHeight);\n```  \n  \n### Parameters  \n `pDC`  \n Specifies a device context.  \n  \n `nWidth`  \n Specifies the width (in bits) of the bitmap.  \n  \n `nHeight`  \n Specifies the height (in bits) of the bitmap.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n The bitmap has the same number of color planes or the same bits-per-pixel format as the specified device context. An application can select this bitmap as the current bitmap for a memory device that is compatible with the one specified by `pDC`.  \n  \n Windows can discard a bitmap created by this function only if an application has not selected it into a display context. If Windows discards the bitmap when it is not selected and the application later attempts to select it, the [CDC::SelectObject](../../mfc/reference/cdc-class.md#cdc__selectobject) function will return **NULL**.  \n  \n When you finish with the `CBitmap` object created with the `CreateDiscardableBitmap` function, first select the bitmap out of the device context, then delete the `CBitmap` object.  \n  \n##  <a name=\"cbitmap__fromhandle\"></a>  CBitmap::FromHandle  \n Returns a pointer to a `CBitmap` object when given a handle to a Windows GDI bitmap.  \n  \n```  \nstatic CBitmap* PASCAL FromHandle(HBITMAP hBitmap);\n```  \n  \n### Parameters  \n `hBitmap`  \n Specifies a Windows GDI bitmap.  \n  \n### Return Value  \n A pointer to a `CBitmap` object if successful; otherwise **NULL**.  \n  \n### Remarks  \n If a `CBitmap` object is not already attached to the handle, a temporary `CBitmap` object is created and attached. This temporary `CBitmap` object is valid only until the next time the application has idle time in its event loop, at which time all temporary graphic objects are deleted. Another way of saying this is that the temporary object is only valid during the processing of one window message.  \n  \n##  <a name=\"cbitmap__getbitmap\"></a>  CBitmap::GetBitmap  \n Retrieves image properties for the attached bitmap.  \n  \n```  \nint GetBitmap(BITMAP* pBitMap);\n```  \n  \n### Parameters  \n `pBitMap`  \n Pointer to a [BITMAP Structure](../../mfc/reference/bitmap-structure.md) structure that will receive the image properties. This parameter must not be `NULL`.  \n  \n### Return Value  \n Nonzero if the method was successful; otherwise 0.  \n  \n### Remarks  \n  \n##  <a name=\"cbitmap__getbitmapbits\"></a>  CBitmap::GetBitmapBits  \n Copies the bit pattern of the attached bitmap into the specified buffer.  \n  \n```  \nDWORD GetBitmapBits(\n    DWORD dwCount,  \n    LPVOID lpBits) const;\n\n \n```  \n  \n### Parameters  \n `dwCount`  \n The number of bytes to copy to the buffer.  \n  \n `lpBits`  \n Pointer to the buffer that will receive the bitmap.  \n  \n### Return Value  \n The number of bytes copied to the buffer if the method was successful; otherwise 0.  \n  \n### Remarks  \n Use [CBitmap::GetBitmap](#cbitmap__getbitmap) to determine the required buffer size.  \n  \n##  <a name=\"cbitmap__getbitmapdimension\"></a>  CBitmap::GetBitmapDimension  \n Returns the width and height of the bitmap.  \n  \n```  \nCSize GetBitmapDimension() const;\n\n \n```  \n  \n### Return Value  \n The width and height of the bitmap, measured in 0.1-millimeter units. The height is in the **cy** member of the `CSize` object, and the width is in the **cx** member. If the bitmap width and height have not been set by using `SetBitmapDimension`, the return value is 0.  \n  \n### Remarks  \n The height and width are assumed to have been set previously by using the [SetBitmapDimension](#cbitmap__setbitmapdimension) member function.  \n  \n##  <a name=\"cbitmap__loadbitmap\"></a>  CBitmap::LoadBitmap  \n Loads the bitmap resource named by `lpszResourceName` or identified by the ID number in `nIDResource` from the application's executable file.  \n  \n```  \nBOOL LoadBitmap(LPCTSTR lpszResourceName);\n\n \nBOOL LoadBitmap(UINT nIDResource);\n```  \n  \n### Parameters  \n `lpszResourceName`  \n Points to a null-terminated string that contains the name of the bitmap resource.  \n  \n `nIDResource`  \n Specifies the resource ID number of the bitmap resource.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n The loaded bitmap is attached to the `CBitmap` object.  \n  \n If the bitmap identified by `lpszResourceName` does not exist or if there is insufficient memory to load the bitmap, the function returns 0.  \n  \n You can use the [CGdiObject::DeleteObject](../../mfc/reference/cgdiobject-class.md#cgdiobject__deleteobject) function to delete bitmap loaded by the `LoadBitmap` function, or the `CBitmap` destructor will delete the object for you.  \n  \n> [!CAUTION]\n>  Before you delete the object, make sure it is not selected into a device context.  \n  \n The following bitmaps were added to Windows versions 3.1 and later:  \n  \n **OBM_UPARRROWIOBM_DNARROWIOBM_RGARROWIOBM_LFARROWI**  \n  \n These bitmaps are not found in device drivers for Windows versions 3.0 and earlier. For a complete list of bitmaps and a display of their appearance, see the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cbitmap__loadmappedbitmap\"></a>  CBitmap::LoadMappedBitmap  \n Call this member function to load a bitmap and map the colors to the current system colors.  \n  \n```  \nBOOL LoadMappedBitmap(\n    UINT nIDBitmap,  \n    UINT nFlags = 0,  \n    LPCOLORMAP lpColorMap = NULL,  \n    int nMapSize = 0);\n```  \n  \n### Parameters  \n `nIDBitmap`  \n The ID of the bitmap resource.  \n  \n `nFlags`  \n A flag for a bitmap. Can be zero or **CMB_MASKED**.  \n  \n `lpColorMap`  \n A pointer to a **COLORMAP** structure that contains the color information needed to map the bitmaps. If this parameter is **NULL**, the function uses the default color map.  \n  \n *nMapSize*  \n The number of color maps pointed to by `lpColorMap`.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n By default, `LoadMappedBitmap` will map colors commonly used in button glyphs.  \n  \n For information about creating a mapped bitmap, see the Windows function [CreateMappedBitmap](http://go.microsoft.com/fwlink/linkid=230562) and the [COLORMAP](http://msdn.microsoft.com/library/windows/desktop/bb760448) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cbitmap__loadoembitmap\"></a>  CBitmap::LoadOEMBitmap  \n Loads a predefined bitmap used by Windows.  \n  \n```  \nBOOL LoadOEMBitmap(UINT nIDBitmap);\n```  \n  \n### Parameters  \n `nIDBitmap`  \n ID number of the predefined Windows bitmap. The possible values are listed below from WINDOWS.H:  \n  \n|||  \n|-|-|  \n|**OBM_BTNCORNERS**|**OBM_OLD_RESTORE**|  \n|**OBM_BTSIZE**|**OBM_OLD_RGARROW**|  \n|**OBM_CHECK**|**OBM_OLD_UPARROW**|  \n|**OBM_CHECKBOXES**|**OBM_OLD_ZOOM**|  \n|**OBM_CLOSE**|**OBM_REDUCE**|  \n|**OBM_COMBO**|**OBM_REDUCED**|  \n|**OBM_DNARROW**|**OBM_RESTORE**|  \n|**OBM_DNARROWD**|**OBM_RESTORED**|  \n|**OBM_DNARROWI**|**OBM_RGARROW**|  \n|**OBM_LFARROW**|**OBM_RGARROWD**|  \n|**OBM_LFARROWD**|**OBM_RGARROWI**|  \n|**OBM_LFARROWI**|**OBM_SIZE**|  \n|**OBM_MNARROW**|**OBM_UPARROW**|  \n|**OBM_OLD_CLOSE**|**OBM_UPARROWD**|  \n|**OBM_OLD_DNARROW**|**OBM_UPARROW**|  \n|**OBM_OLD_LFARROW**|**OBM_ZOOM**|  \n|**OBM_OLD_REDUCE**|**OBM_ZOOMD**|  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n Bitmap names that begin with **OBM_OLD** represent bitmaps used by Windows versions prior to 3.0.  \n  \n Note that the constant **OEMRESOURCE** must be defined before including WINDOWS.H in order to use any of the **OBM_** constants.  \n  \n##  <a name=\"cbitmap__operator_hbitmap\"></a>  CBitmap::operator HBITMAP  \n Use this operator to get the attached Windows GDI handle of the `CBitmap` object.  \n  \n```  \noperator HBITMAP() const;\n\n \n```  \n  \n### Return Value  \n If successful, a handle to the Windows GDI object represented by the `CBitmap` object; otherwise **NULL**.  \n  \n### Remarks  \n This operator is a casting operator, which supports direct use of an `HBITMAP` object.  \n  \n For more information about using graphic objects, see [Graphic Objects](http://msdn.microsoft.com/library/windows/desktop/dd144962) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cbitmap__setbitmapbits\"></a>  CBitmap::SetBitmapBits  \n Sets the bits of a bitmap to the bit values given by `lpBits`.  \n  \n```  \nDWORD SetBitmapBits(\n    DWORD dwCount,  \n    const void* lpBits);\n```  \n  \n### Parameters  \n `dwCount`  \n Specifies the number of bytes pointed to by `lpBits`.  \n  \n `lpBits`  \n Points to the **BYTE** array that contains the pixel values to be copied to the `CBitmap` object. In order for the bitmap to be able to render its image correctly, the values should be formatted to conform to the height, width and color depth values that were specified when the CBitmap instance was created. For more information, see [CBitmap::CreateBitmap](#cbitmap__createbitmap).  \n  \n### Return Value  \n The number of bytes used in setting the bitmap bits; 0 if the function fails.  \n  \n##  <a name=\"cbitmap__setbitmapdimension\"></a>  CBitmap::SetBitmapDimension  \n Assigns a width and height to a bitmap in 0.1-millimeter units.  \n  \n```  \nCSize SetBitmapDimension(\n    int nWidth,  \n    int nHeight);\n```  \n  \n### Parameters  \n `nWidth`  \n Specifies the width of the bitmap (in 0.1-millimeter units).  \n  \n `nHeight`  \n Specifies the height of the bitmap (in 0.1-millimeter units).  \n  \n### Return Value  \n The previous bitmap dimensions. Height is in the **cy** member variable of the `CSize` object, and width is in the **cx** member variable.  \n  \n### Remarks  \n The GDI does not use these values except to return them when an application calls the [GetBitmapDimension](#cbitmap__getbitmapdimension) member function.  \n  \n## See Also  \n [MFC Sample MDI](../../visual-cpp-samples.md)   \n [CGdiObject Class](../../mfc/reference/cgdiobject-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)\n\n"}