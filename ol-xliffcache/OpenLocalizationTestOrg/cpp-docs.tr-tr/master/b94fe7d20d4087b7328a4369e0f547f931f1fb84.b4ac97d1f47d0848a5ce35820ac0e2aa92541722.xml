{"nodes":[{"pos":[12,73],"content":"A.13   Using the flush Directive with a List | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"A.13   Using the flush Directive with a List | Microsoft Docs","pos":[0,61]}]},{"content":"A.13   Using the flush Directive with a List","pos":[553,597]},{"pos":[598,727],"content":"The following example uses the <ph id=\"ph1\">`flush`</ph> directive for point-to-point synchronization of specific objects between pairs of threads:","source":"The following example uses the `flush` directive for point-to-point synchronization of specific objects between pairs of threads:"}],"content":"---\ntitle: \"A.13   Using the flush Directive with a List | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: 6c9d0736-07c2-47b1-a216-5293f03b6397\ncaps.latest.revision: 6\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# A.13   Using the flush Directive with a List\nThe following example uses the `flush` directive for point-to-point synchronization of specific objects between pairs of threads:  \n  \n```  \nint   sync[NUMBER_OF_THREADS];  \nfloat work[NUMBER_OF_THREADS];  \n#pragma omp parallel private(iam,neighbor) shared(work,sync)  \n{  \n    iam = omp_get_thread_num();  \n    sync[iam] = 0;  \n    #pragma omp barrier  \n  \n    // Do computation into my portion of work array   \n    work[iam] = ...;  \n  \n    //  Announce that I am done with my work  \n    // The first flush ensures that my work is  \n    // made visible before sync.  \n    // The second flush ensures that sync is made visible.  \n    #pragma omp flush(work)  \n    sync[iam] = 1;  \n    #pragma omp flush(sync)  \n  \n    // Wait for neighbor  \n    neighbor = (iam>0 ? iam : omp_get_num_threads()) - 1;  \n    while (sync[neighbor]==0)   \n    {  \n        #pragma omp flush(sync)  \n    }  \n  \n    // Read neighbor's values of work array   \n    ... = work[neighbor];  \n}  \n```"}