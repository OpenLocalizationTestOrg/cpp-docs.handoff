{"nodes":[{"pos":[12,78],"content":"Recordset: Creating and Closing Recordsets (ODBC) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Recordset: Creating and Closing Recordsets (ODBC) | Microsoft Docs","pos":[0,66]}]},{"content":"Recordset: Creating and Closing Recordsets (ODBC)","pos":[753,802]},{"content":"This topic applies to the MFC ODBC classes.","pos":[803,846]},{"content":"To use a recordset, construct a recordset object and then call its <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> member function to run the recordset's query and select records.","pos":[853,993],"source":"To use a recordset, construct a recordset object and then call its **Open** member function to run the recordset's query and select records."},{"content":"When you finish with the recordset, close and destroy the object.","pos":[994,1059]},{"content":"This topic explains:","pos":[1066,1086]},{"pos":[1096,1180],"content":"<bpt id=\"p1\">[</bpt>When and how to create a recordset object<ept id=\"p1\">](#_core_creating_recordsets_at_run_time)</ept>.","source":"[When and how to create a recordset object](#_core_creating_recordsets_at_run_time)."},{"pos":[1190,1333],"content":"<bpt id=\"p1\">[</bpt>When and how you can qualify the recordset's behavior by parameterizing, filtering, sorting, or locking it<ept id=\"p1\">](#_core_setting_recordset_options)</ept>.","source":"[When and how you can qualify the recordset's behavior by parameterizing, filtering, sorting, or locking it](#_core_setting_recordset_options)."},{"pos":[1343,1414],"content":"<bpt id=\"p1\">[</bpt>When and how to close a recordset object<ept id=\"p1\">](#_core_closing_a_recordset)</ept>.","source":"[When and how to close a recordset object](#_core_closing_a_recordset)."},{"pos":[1477,1508],"content":"Creating Recordsets at Run Time"},{"content":"Before you can create recordset objects in your program, you typically write application-specific recordset classes.","pos":[1512,1628]},{"content":"For more information about this preliminary step, see <bpt id=\"p1\">[</bpt>Adding an MFC ODBC Consumer<ept id=\"p1\">](../../mfc/reference/adding-an-mfc-odbc-consumer.md)</ept>.","pos":[1629,1765],"source":" For more information about this preliminary step, see [Adding an MFC ODBC Consumer](../../mfc/reference/adding-an-mfc-odbc-consumer.md)."},{"content":"Open a dynaset or snapshot object when you need to select records from a data source.","pos":[1772,1857]},{"content":"The type of object to create depends on what you need to do with the data in your application and on what your ODBC driver supports.","pos":[1858,1990]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Dynaset<ept id=\"p1\">](../../data/odbc/dynaset.md)</ept> and <bpt id=\"p2\">[</bpt>Snapshot<ept id=\"p2\">](../../data/odbc/snapshot.md)</ept>.","pos":[1991,2099],"source":" For more information, see [Dynaset](../../data/odbc/dynaset.md) and [Snapshot](../../data/odbc/snapshot.md)."},{"content":"To open a recordset","pos":[2110,2129]},{"pos":[2139,2194],"content":"Construct an object of your <ph id=\"ph1\">`CRecordset`</ph>-derived class.","source":"Construct an object of your `CRecordset`-derived class."},{"content":"You can construct the object on the heap or on the stack frame of a function.","pos":[2205,2282]},{"content":"Optionally modify the default recordset behavior.","pos":[2292,2341]},{"content":"For the available options, see <bpt id=\"p1\">[</bpt>Setting Recordset Options<ept id=\"p1\">](#_core_setting_recordset_options)</ept>.","pos":[2342,2435],"source":" For the available options, see [Setting Recordset Options](#_core_setting_recordset_options)."},{"pos":[2445,2544],"content":"Call the object's <bpt id=\"p1\">[</bpt>Open<ept id=\"p1\">](../../mfc/reference/crecordset-class.md#crecordset__open)</ept> member function.","source":"Call the object's [Open](../../mfc/reference/crecordset-class.md#crecordset__open) member function."},{"content":"In the constructor, pass a pointer to a <ph id=\"ph1\">`CDatabase`</ph> object or pass <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> to use a temporary database object that the framework constructs and opens based on the connection string returned by the <bpt id=\"p2\">[</bpt>GetDefaultConnect<ept id=\"p2\">](../../mfc/reference/crecordset-class.md#crecordset__getdefaultconnect)</ept> member function.","pos":[2551,2856],"source":"In the constructor, pass a pointer to a `CDatabase` object or pass **NULL** to use a temporary database object that the framework constructs and opens based on the connection string returned by the [GetDefaultConnect](../../mfc/reference/crecordset-class.md#crecordset__getdefaultconnect) member function."},{"content":"The <ph id=\"ph1\">`CDatabase`</ph> object might already be connected to a data source.","pos":[2857,2924],"source":" The `CDatabase` object might already be connected to a data source."},{"content":"The call to <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> uses SQL to select records from the data source.","pos":[2931,3000],"source":"The call to **Open** uses SQL to select records from the data source."},{"content":"The first record selected (if any) is the current record.","pos":[3001,3058]},{"content":"The values of this record's fields are stored in the recordset object's field data members.","pos":[3059,3150]},{"content":"If any records were selected, both the <ph id=\"ph1\">`IsBOF`</ph> and <ph id=\"ph2\">`IsEOF`</ph> member functions return 0.","pos":[3151,3236],"source":" If any records were selected, both the `IsBOF` and `IsEOF` member functions return 0."},{"pos":[3243,3330],"content":"In your <bpt id=\"p1\">[</bpt>Open<ept id=\"p1\">](../../mfc/reference/crecordset-class.md#crecordset__open)</ept> call, you can:","source":"In your [Open](../../mfc/reference/crecordset-class.md#crecordset__open) call, you can:"},{"content":"Specify whether the recordset is a dynaset or snapshot.","pos":[3340,3395]},{"content":"Recordsets open as snapshots by default.","pos":[3396,3436]},{"content":"Or, you can specify a forward-only recordset, which allows only forward scrolling, one record at a time.","pos":[3437,3541]},{"content":"By default, a recordset uses the default type stored in the <ph id=\"ph1\">`CRecordset`</ph> data member <bpt id=\"p1\">**</bpt>m_nDefaultType<ept id=\"p1\">**</ept>.","pos":[3552,3656],"source":"By default, a recordset uses the default type stored in the `CRecordset` data member **m_nDefaultType**."},{"content":"Wizards write code to initialize <bpt id=\"p1\">**</bpt>m_nDefaultType<ept id=\"p1\">**</ept> to the recordset type you choose in the wizard.","pos":[3657,3756],"source":" Wizards write code to initialize **m_nDefaultType** to the recordset type you choose in the wizard."},{"content":"Rather than accepting this default, you can substitute another recordset type.","pos":[3757,3835]},{"pos":[3845,3940],"content":"Specify a string to replace the default SQL <bpt id=\"p1\">**</bpt>SELECT<ept id=\"p1\">**</ept> statement that the recordset constructs.","source":"Specify a string to replace the default SQL **SELECT** statement that the recordset constructs."},{"content":"Specify whether the recordset is read-only or append-only.","pos":[3950,4008]},{"content":"Recordsets allow full updating by default, but you can limit that to adding new records only or you can disallow all updates.","pos":[4009,4134]},{"pos":[4141,4263],"content":"The following example shows how to open a read-only snapshot object of class <ph id=\"ph1\">`CStudentSet`</ph>, an application-specific class:","source":"The following example shows how to open a read-only snapshot object of class `CStudentSet`, an application-specific class:"},{"content":"After you call <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept>, use the member functions and data members of the object to work with the records.","pos":[4549,4655],"source":"After you call **Open**, use the member functions and data members of the object to work with the records."},{"content":"In some cases, you might want to requery or refresh the recordset to include changes that have occurred on the data source.","pos":[4656,4779]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Recordset: Requerying a Recordset (ODBC)<ept id=\"p1\">](../../data/odbc/recordset-requerying-a-recordset-odbc.md)</ept>.","pos":[4780,4907],"source":" For more information, see [Recordset: Requerying a Recordset (ODBC)](../../data/odbc/recordset-requerying-a-recordset-odbc.md)."},{"pos":[4915,5206],"content":"[!TIP]\n The connect string you use during development might not be the same connect string that your eventual users need. For ideas about generalizing your application in this regard, see [Data Source: Managing Connections (ODBC)](../../data/odbc/data-source-managing-connections-odbc.md).","leadings":["","> "],"nodes":[{"content":" The connect string you use during development might not be the same connect string that your eventual users need. For ideas about generalizing your application in this regard, see [Data Source: Managing Connections (ODBC)](../../data/odbc/data-source-managing-connections-odbc.md).","pos":[7,289],"nodes":[{"content":"The connect string you use during development might not be the same connect string that your eventual users need.","pos":[1,114]},{"content":"For ideas about generalizing your application in this regard, see <bpt id=\"p1\">[</bpt>Data Source: Managing Connections (ODBC)<ept id=\"p1\">](../../data/odbc/data-source-managing-connections-odbc.md)</ept>.","pos":[115,282],"source":" For ideas about generalizing your application in this regard, see [Data Source: Managing Connections (ODBC)](../../data/odbc/data-source-managing-connections-odbc.md)."}]}]},{"pos":[5263,5288],"content":"Setting Recordset Options"},{"content":"After you construct your recordset object but before you call <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> to select records, you might want to set some options to control the recordset's behavior.","pos":[5292,5453],"source":"After you construct your recordset object but before you call **Open** to select records, you might want to set some options to control the recordset's behavior."},{"content":"For all recordsets, you can:","pos":[5454,5482]},{"pos":[5492,5594],"content":"Specify a <bpt id=\"p1\">[</bpt>filter<ept id=\"p1\">](../../data/odbc/recordset-filtering-records-odbc.md)</ept> to constrain record selection.","source":"Specify a [filter](../../data/odbc/recordset-filtering-records-odbc.md) to constrain record selection."},{"pos":[5604,5694],"content":"Specify a <bpt id=\"p1\">[</bpt>sort<ept id=\"p1\">](../../data/odbc/recordset-sorting-records-odbc.md)</ept> order for the records.","source":"Specify a [sort](../../data/odbc/recordset-sorting-records-odbc.md) order for the records."},{"pos":[5704,5866],"content":"Specify <bpt id=\"p1\">[</bpt>parameters<ept id=\"p1\">](../../data/odbc/recordset-parameterizing-a-recordset-odbc.md)</ept> so you can select records using information obtained or calculated at run time.","source":"Specify [parameters](../../data/odbc/recordset-parameterizing-a-recordset-odbc.md) so you can select records using information obtained or calculated at run time."},{"content":"You can also set the following option if conditions are right:","pos":[5873,5935]},{"pos":[5945,6103],"content":"If the recordset is updateable and supports locking options, specify the <bpt id=\"p1\">[</bpt>locking<ept id=\"p1\">](../../data/odbc/recordset-locking-records-odbc.md)</ept> method used for updates.","source":"If the recordset is updateable and supports locking options, specify the [locking](../../data/odbc/recordset-locking-records-odbc.md) method used for updates."},{"pos":[6111,6222],"content":"[!NOTE]\n To affect record selection, you must set these options before you call the **Open** member function.","leadings":["","> "],"nodes":[{"content":"To affect record selection, you must set these options before you call the <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> member function.","pos":[9,109],"source":" To affect record selection, you must set these options before you call the **Open** member function."}]},{"pos":[6273,6292],"content":"Closing a Recordset"},{"content":"When you finish with your recordset, you must dispose of it and deallocate its memory.","pos":[6296,6382]},{"content":"To close a recordset","pos":[6393,6413]},{"pos":[6423,6515],"content":"Call its <bpt id=\"p1\">[</bpt>Close<ept id=\"p1\">](../../mfc/reference/crecordset-class.md#crecordset__close)</ept> member function.","source":"Call its [Close](../../mfc/reference/crecordset-class.md#crecordset__close) member function."},{"content":"Destroy the recordset object.","pos":[6525,6554]},{"content":"If you declared it on the stack frame of a function, the object is destroyed automatically when the object goes out of scope.","pos":[6565,6690]},{"content":"Otherwise, use the <bpt id=\"p1\">**</bpt>delete<ept id=\"p1\">**</ept> operator.","pos":[6691,6730],"source":" Otherwise, use the **delete** operator."},{"content":"<bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> frees the recordset's <bpt id=\"p2\">**</bpt>HSTMT<ept id=\"p2\">**</ept> handle.","pos":[6737,6786],"source":"**Close** frees the recordset's **HSTMT** handle."},{"content":"It does not destroy the C++ object.","pos":[6787,6822]},{"content":"See Also","pos":[6831,6839]},{"content":"Recordset (ODBC)","pos":[6844,6860]},{"content":"Recordset: Scrolling (ODBC)","pos":[6902,6929]},{"content":"Recordset: Adding, Updating, and Deleting Records (ODBC)","pos":[6981,7037]}],"content":"---\ntitle: \"Recordset: Creating and Closing Recordsets (ODBC) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ODBC recordsets, creating\"\n  - \"recordsets, creating\"\n  - \"recordsets, opening\"\n  - \"recordsets, closing\"\n  - \"ODBC recordsets, closing\"\n  - \"ODBC recordsets, opening\"\nms.assetid: 8d2aac23-4396-4ce2-8c60-5ecf1b360d3d\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Recordset: Creating and Closing Recordsets (ODBC)\nThis topic applies to the MFC ODBC classes.  \n  \n To use a recordset, construct a recordset object and then call its **Open** member function to run the recordset's query and select records. When you finish with the recordset, close and destroy the object.  \n  \n This topic explains:  \n  \n-   [When and how to create a recordset object](#_core_creating_recordsets_at_run_time).  \n  \n-   [When and how you can qualify the recordset's behavior by parameterizing, filtering, sorting, or locking it](#_core_setting_recordset_options).  \n  \n-   [When and how to close a recordset object](#_core_closing_a_recordset).  \n  \n##  <a name=\"_core_creating_recordsets_at_run_time\"></a> Creating Recordsets at Run Time  \n Before you can create recordset objects in your program, you typically write application-specific recordset classes. For more information about this preliminary step, see [Adding an MFC ODBC Consumer](../../mfc/reference/adding-an-mfc-odbc-consumer.md).  \n  \n Open a dynaset or snapshot object when you need to select records from a data source. The type of object to create depends on what you need to do with the data in your application and on what your ODBC driver supports. For more information, see [Dynaset](../../data/odbc/dynaset.md) and [Snapshot](../../data/odbc/snapshot.md).  \n  \n#### To open a recordset  \n  \n1.  Construct an object of your `CRecordset`-derived class.  \n  \n     You can construct the object on the heap or on the stack frame of a function.  \n  \n2.  Optionally modify the default recordset behavior. For the available options, see [Setting Recordset Options](#_core_setting_recordset_options).  \n  \n3.  Call the object's [Open](../../mfc/reference/crecordset-class.md#crecordset__open) member function.  \n  \n In the constructor, pass a pointer to a `CDatabase` object or pass **NULL** to use a temporary database object that the framework constructs and opens based on the connection string returned by the [GetDefaultConnect](../../mfc/reference/crecordset-class.md#crecordset__getdefaultconnect) member function. The `CDatabase` object might already be connected to a data source.  \n  \n The call to **Open** uses SQL to select records from the data source. The first record selected (if any) is the current record. The values of this record's fields are stored in the recordset object's field data members. If any records were selected, both the `IsBOF` and `IsEOF` member functions return 0.  \n  \n In your [Open](../../mfc/reference/crecordset-class.md#crecordset__open) call, you can:  \n  \n-   Specify whether the recordset is a dynaset or snapshot. Recordsets open as snapshots by default. Or, you can specify a forward-only recordset, which allows only forward scrolling, one record at a time.  \n  \n     By default, a recordset uses the default type stored in the `CRecordset` data member **m_nDefaultType**. Wizards write code to initialize **m_nDefaultType** to the recordset type you choose in the wizard. Rather than accepting this default, you can substitute another recordset type.  \n  \n-   Specify a string to replace the default SQL **SELECT** statement that the recordset constructs.  \n  \n-   Specify whether the recordset is read-only or append-only. Recordsets allow full updating by default, but you can limit that to adding new records only or you can disallow all updates.  \n  \n The following example shows how to open a read-only snapshot object of class `CStudentSet`, an application-specific class:  \n  \n```  \n// Construct the snapshot object  \nCStudentSet rsStudent( NULL );  \n// Set options if desired, then open the recordset  \nif(!rsStudent.Open(CRecordset::snapshot, NULL, CRecordset::readOnly))  \n    return FALSE;  \n// Use the snapshot to operate on its records...  \n```  \n  \n After you call **Open**, use the member functions and data members of the object to work with the records. In some cases, you might want to requery or refresh the recordset to include changes that have occurred on the data source. For more information, see [Recordset: Requerying a Recordset (ODBC)](../../data/odbc/recordset-requerying-a-recordset-odbc.md).  \n  \n> [!TIP]\n>  The connect string you use during development might not be the same connect string that your eventual users need. For ideas about generalizing your application in this regard, see [Data Source: Managing Connections (ODBC)](../../data/odbc/data-source-managing-connections-odbc.md).  \n  \n##  <a name=\"_core_setting_recordset_options\"></a> Setting Recordset Options  \n After you construct your recordset object but before you call **Open** to select records, you might want to set some options to control the recordset's behavior. For all recordsets, you can:  \n  \n-   Specify a [filter](../../data/odbc/recordset-filtering-records-odbc.md) to constrain record selection.  \n  \n-   Specify a [sort](../../data/odbc/recordset-sorting-records-odbc.md) order for the records.  \n  \n-   Specify [parameters](../../data/odbc/recordset-parameterizing-a-recordset-odbc.md) so you can select records using information obtained or calculated at run time.  \n  \n You can also set the following option if conditions are right:  \n  \n-   If the recordset is updateable and supports locking options, specify the [locking](../../data/odbc/recordset-locking-records-odbc.md) method used for updates.  \n  \n> [!NOTE]\n>  To affect record selection, you must set these options before you call the **Open** member function.  \n  \n##  <a name=\"_core_closing_a_recordset\"></a> Closing a Recordset  \n When you finish with your recordset, you must dispose of it and deallocate its memory.  \n  \n#### To close a recordset  \n  \n1.  Call its [Close](../../mfc/reference/crecordset-class.md#crecordset__close) member function.  \n  \n2.  Destroy the recordset object.  \n  \n     If you declared it on the stack frame of a function, the object is destroyed automatically when the object goes out of scope. Otherwise, use the **delete** operator.  \n  \n **Close** frees the recordset's **HSTMT** handle. It does not destroy the C++ object.  \n  \n## See Also  \n [Recordset (ODBC)](../../data/odbc/recordset-odbc.md)   \n [Recordset: Scrolling (ODBC)](../../data/odbc/recordset-scrolling-odbc.md)   \n [Recordset: Adding, Updating, and Deleting Records (ODBC)](../../data/odbc/recordset-adding-updating-and-deleting-records-odbc.md)"}