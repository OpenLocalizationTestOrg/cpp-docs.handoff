{"nodes":[{"pos":[12,49],"content":"CFileException Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CFileException Class | Microsoft Docs","pos":[0,37]}]},{"pos":[677,697],"content":"CFileException Class","linkify":"CFileException Class","nodes":[{"content":"CFileException Class","pos":[0,20]}]},{"content":"Represents a file-related exception condition.","pos":[698,744]},{"pos":[753,759],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[826,833],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[843,862],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[869,873]},{"content":"Description","pos":[874,885]},{"pos":[923,988],"content":"<bpt id=\"p1\">[</bpt>CFileException::CFileException<ept id=\"p1\">](#cfileexception__cfileexception)</ept>","source":"[CFileException::CFileException](#cfileexception__cfileexception)"},{"pos":[989,1026],"content":"Constructs a <ph id=\"ph1\">`CFileException`</ph> object.","source":"Constructs a `CFileException` object."},{"pos":[1037,1051],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1058,1062]},{"content":"Description","pos":[1063,1074]},{"pos":[1112,1181],"content":"<bpt id=\"p1\">[</bpt>CFileException::ErrnoToException<ept id=\"p1\">](#cfileexception__errnotoexception)</ept>","source":"[CFileException::ErrnoToException](#cfileexception__errnotoexception)"},{"content":"Returns cause code corresponding to a run-time error number.","pos":[1182,1242]},{"pos":[1247,1314],"content":"<bpt id=\"p1\">[</bpt>CFileException::GetErrorMessage<ept id=\"p1\">](#cfileexception__geterrormessage)</ept>","source":"[CFileException::GetErrorMessage](#cfileexception__geterrormessage)"},{"content":"Retrieves the message describing an exception.","pos":[1315,1361]},{"pos":[1366,1439],"content":"<bpt id=\"p1\">[</bpt>CFileException::OsErrorToException<ept id=\"p1\">](#cfileexception__oserrortoexception)</ept>","source":"[CFileException::OsErrorToException](#cfileexception__oserrortoexception)"},{"content":"Returns a cause code corresponding to an operating system error code.","pos":[1440,1509]},{"pos":[1514,1571],"content":"<bpt id=\"p1\">[</bpt>CFileException::ThrowErrno<ept id=\"p1\">](#cfileexception__throwerrno)</ept>","source":"[CFileException::ThrowErrno](#cfileexception__throwerrno)"},{"content":"Throws a file exception based on a runtime error number.","pos":[1572,1628]},{"pos":[1633,1694],"content":"<bpt id=\"p1\">[</bpt>CFileException::ThrowOsError<ept id=\"p1\">](#cfileexception__throwoserror)</ept>","source":"[CFileException::ThrowOsError](#cfileexception__throwoserror)"},{"content":"Throws a file exception based on an operating system error number.","pos":[1695,1761]},{"pos":[1772,1791],"content":"Public Data Members","linkify":"Public Data Members","nodes":[{"content":"Public Data Members","pos":[0,19]}]},{"content":"Name","pos":[1798,1802]},{"content":"Description","pos":[1803,1814]},{"pos":[1852,1903],"content":"<bpt id=\"p1\">[</bpt>CFileException::m_cause<ept id=\"p1\">](#cfileexception__m_cause)</ept>","source":"[CFileException::m_cause](#cfileexception__m_cause)"},{"content":"Contains portable code corresponding to the exception cause.","pos":[1904,1964]},{"pos":[1969,2026],"content":"<bpt id=\"p1\">[</bpt>CFileException::m_lOsError<ept id=\"p1\">](#cfileexception__m_loserror)</ept>","source":"[CFileException::m_lOsError](#cfileexception__m_loserror)"},{"content":"Contains the related operating-system error number.","pos":[2027,2078]},{"pos":[2083,2146],"content":"<bpt id=\"p1\">[</bpt>CFileException::m_strFileName<ept id=\"p1\">](#cfileexception__m_strfilename)</ept>","source":"[CFileException::m_strFileName](#cfileexception__m_strfilename)"},{"content":"Contains the name of the file for this exception.","pos":[2147,2196]},{"pos":[2206,2213],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`CFileException`</ph> class includes public data members that hold the portable cause code and the operating-system-specific error number.","pos":[2217,2354],"source":"The `CFileException` class includes public data members that hold the portable cause code and the operating-system-specific error number."},{"content":"The class also provides static member functions for throwing file exceptions and for returning cause codes for both operating-system errors and C run-time errors.","pos":[2355,2517]},{"content":"<ph id=\"ph1\">`CFileException`</ph> objects are constructed and thrown in <ph id=\"ph2\">`CFile`</ph> member functions and in member functions of derived classes.","pos":[2524,2647],"source":"`CFileException` objects are constructed and thrown in `CFile` member functions and in member functions of derived classes."},{"content":"You can access these objects within the scope of a <bpt id=\"p1\">**</bpt>CATCH<ept id=\"p1\">**</ept> expression.","pos":[2648,2720],"source":" You can access these objects within the scope of a **CATCH** expression."},{"content":"For portability, use only the cause code to get the reason for an exception.","pos":[2721,2797]},{"content":"For more information about exceptions, see the article <bpt id=\"p1\">[</bpt>Exception Handling (MFC)<ept id=\"p1\">](../../mfc/exception-handling-in-mfc.md)</ept>.","pos":[2798,2920],"source":" For more information about exceptions, see the article [Exception Handling (MFC)](../../mfc/exception-handling-in-mfc.md)."},{"pos":[2929,2950],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[2954,3001],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[3008,3061],"content":"<bpt id=\"p1\">[</bpt>CException<ept id=\"p1\">](../../mfc/reference/cexception-class.md)</ept>","source":"[CException](../../mfc/reference/cexception-class.md)"},{"pos":[3093,3105],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3109,3126],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afx.h","source":"**Header:** afx.h"},{"pos":[3136,3213],"content":"<bpt id=\"p1\">&lt;a name=\"cfileexception__cfileexception\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFileException::CFileException","linkify":"<a name=\"cfileexception__cfileexception\"></a>  CFileException::CFileException","source":"<a name=\"cfileexception__cfileexception\"></a>  CFileException::CFileException"},{"pos":[3217,3325],"content":"Constructs a <ph id=\"ph1\">`CFileException`</ph> object that stores the cause code and the operating-system code in the object.","source":"Constructs a `CFileException` object that stores the cause code and the operating-system code in the object."},{"pos":[3469,3479],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An enumerated type variable that indicates the reason for the exception.","pos":[3494,3566]},{"content":"See <bpt id=\"p1\">[</bpt>CFileException::m_cause<ept id=\"p1\">](#cfileexception__m_cause)</ept> for a list of the possible values.","pos":[3567,3657],"source":" See [CFileException::m_cause](#cfileexception__m_cause) for a list of the possible values."},{"content":"An operating-system-specific reason for the exception, if available.","pos":[3678,3746]},{"content":"The <ph id=\"ph1\">`lOsError`</ph> parameter provides more information than <ph id=\"ph2\">`cause`</ph> does.","pos":[3747,3816],"source":" The `lOsError` parameter provides more information than `cause` does."},{"content":"Points to a string containing the name of the <ph id=\"ph1\">`CFile`</ph> object causing the exception.","pos":[3844,3927],"source":" Points to a string containing the name of the `CFile` object causing the exception."},{"pos":[3937,3944],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3948,4093],"content":"Do not use this constructor directly, but rather call the global function <bpt id=\"p1\">[</bpt>AfxThrowFileException<ept id=\"p1\">](exception-processing.md#afxthrowfileexception)</ept>.","source":"Do not use this constructor directly, but rather call the global function [AfxThrowFileException](exception-processing.md#afxthrowfileexception)."},{"pos":[4101,4239],"content":"[!NOTE]\n The variable `lOsError` applies only to `CFile` and `CStdioFile` objects. The `CMemFile` class does not handle this error code.","leadings":["","> "],"nodes":[{"content":" The variable `lOsError` applies only to `CFile` and `CStdioFile` objects. The `CMemFile` class does not handle this error code.","pos":[8,136],"nodes":[{"content":"The variable <ph id=\"ph1\">`lOsError`</ph> applies only to <ph id=\"ph2\">`CFile`</ph> and <ph id=\"ph3\">`CStdioFile`</ph> objects.","pos":[1,74],"source":" The variable `lOsError` applies only to `CFile` and `CStdioFile` objects."},{"content":"The <ph id=\"ph1\">`CMemFile`</ph> class does not handle this error code.","pos":[75,128],"source":" The `CMemFile` class does not handle this error code."}]}]},{"pos":[4249,4330],"content":"<bpt id=\"p1\">&lt;a name=\"cfileexception__errnotoexception\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFileException::ErrnoToException","linkify":"<a name=\"cfileexception__errnotoexception\"></a>  CFileException::ErrnoToException","source":"<a name=\"cfileexception__errnotoexception\"></a>  CFileException::ErrnoToException"},{"pos":[4334,4425],"content":"Converts a given run-time library error value to a <ph id=\"ph1\">`CFileException`</ph> enumerated error value.","source":"Converts a given run-time library error value to a `CFileException` enumerated error value."},{"pos":[4498,4508],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An integer error code as defined in the run-time include file ERRNO.H.","pos":[4524,4594]},{"pos":[4604,4616],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Enumerated value that corresponds to a given run-time library error value.","pos":[4620,4694]},{"pos":[4704,4711],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4715,4816],"content":"See <bpt id=\"p1\">[</bpt>CFileException::m_cause<ept id=\"p1\">](#cfileexception__m_cause)</ept> for a list of the possible enumerated values.","source":"See [CFileException::m_cause](#cfileexception__m_cause) for a list of the possible enumerated values."},{"pos":[4826,4833],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4837,4940],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCFiles#26<ept id=\"p2\">](../../atl-mfc-shared/reference/codesnippet/cpp/cfileexception-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCFiles#26](../../atl-mfc-shared/reference/codesnippet/cpp/cfileexception-class_1.cpp)]"},{"pos":[4950,5029],"content":"<bpt id=\"p1\">&lt;a name=\"cfileexception__geterrormessage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFileException::GetErrorMessage","linkify":"<a name=\"cfileexception__geterrormessage\"></a>  CFileException::GetErrorMessage","source":"<a name=\"cfileexception__geterrormessage\"></a>  CFileException::GetErrorMessage"},{"content":"Retrieves text that describes an exception.","pos":[5033,5076]},{"pos":[5219,5229],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in, out] <ph id=\"ph1\">`lpszError`</ph>","pos":[5233,5254],"source":"[in, out] `lpszError`"},{"content":"Pointer to a buffer that receives an error message.","pos":[5258,5309]},{"content":"[in] <ph id=\"ph1\">`nMaxError`</ph>","pos":[5316,5332],"source":"[in] `nMaxError`"},{"content":"The maximum number of characters the specified buffer can hold.","pos":[5336,5399]},{"content":"This includes the terminating null character.","pos":[5400,5445]},{"content":"[in, out] <ph id=\"ph1\">`pnHelpContext`</ph>","pos":[5452,5477],"source":"[in, out] `pnHelpContext`"},{"content":"Pointer to an unsigned integer that receives the help context ID.","pos":[5481,5546]},{"content":"If <ph id=\"ph1\">`NULL`</ph>, no ID is returned.","pos":[5547,5576],"source":" If `NULL`, no ID is returned."},{"pos":[5586,5598],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5602,5657],"content":"<ph id=\"ph1\">`TRUE`</ph> if the method was successful; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the method was successful; otherwise `FALSE`."},{"pos":[5667,5674],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the specified buffer is too small, the error message is truncated.","pos":[5678,5747]},{"pos":[5757,5764],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5768,5829],"content":"The following example uses <ph id=\"ph1\">`CFileException::GetErrorMessage`</ph>.","source":"The following example uses `CFileException::GetErrorMessage`."},{"pos":[5836,5923],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCExceptions#22<ept id=\"p2\">](../../mfc/codesnippet/cpp/cfileexception-class_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCExceptions#22](../../mfc/codesnippet/cpp/cfileexception-class_2.cpp)]"},{"pos":[5933,5996],"content":"<bpt id=\"p1\">&lt;a name=\"cfileexception__m_cause\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFileException::m_cause","linkify":"<a name=\"cfileexception__m_cause\"></a>  CFileException::m_cause","source":"<a name=\"cfileexception__m_cause\"></a>  CFileException::m_cause"},{"pos":[6000,6062],"content":"Contains values defined by a <ph id=\"ph1\">`CFileException`</ph> enumerated type.","source":"Contains values defined by a `CFileException` enumerated type."},{"pos":[6102,6109],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This data member is a public variable of type <ph id=\"ph1\">`int`</ph>.","pos":[6113,6165],"source":"This data member is a public variable of type `int`."},{"content":"The enumerators and their meanings are as follows:","pos":[6166,6216]},{"pos":[6224,6268],"content":"<ph id=\"ph1\">`CFileException::none`</ph> 0: No error occurred.","source":"`CFileException::none` 0: No error occurred."},{"pos":[6276,6344],"content":"<ph id=\"ph1\">`CFileException::genericException`</ph> 1: An unspecified error occurred.","source":"`CFileException::genericException` 1: An unspecified error occurred."},{"pos":[6352,6416],"content":"<ph id=\"ph1\">`CFileException::fileNotFound`</ph> 2: The file could not be located.","source":"`CFileException::fileNotFound` 2: The file could not be located."},{"pos":[6424,6488],"content":"<ph id=\"ph1\">`CFileException::badPath`</ph> 3: All or part of the path is invalid.","source":"`CFileException::badPath` 3: All or part of the path is invalid."},{"pos":[6496,6582],"content":"<ph id=\"ph1\">`CFileException::tooManyOpenFiles`</ph> 4: The permitted number of open files was exceeded.","source":"`CFileException::tooManyOpenFiles` 4: The permitted number of open files was exceeded."},{"pos":[6590,6655],"content":"<ph id=\"ph1\">`CFileException::accessDenied`</ph> 5: The file could not be accessed.","source":"`CFileException::accessDenied` 5: The file could not be accessed."},{"pos":[6663,6747],"content":"<ph id=\"ph1\">`CFileException::invalidFile`</ph> 6: There was an attempt to use an invalid file handle.","source":"`CFileException::invalidFile` 6: There was an attempt to use an invalid file handle."},{"pos":[6755,6841],"content":"<ph id=\"ph1\">`CFileException::removeCurrentDir`</ph> 7: The current working directory cannot be removed.","source":"`CFileException::removeCurrentDir` 7: The current working directory cannot be removed."},{"pos":[6849,6920],"content":"<ph id=\"ph1\">`CFileException::directoryFull`</ph> 8: There are no more directory entries.","source":"`CFileException::directoryFull` 8: There are no more directory entries."},{"pos":[6928,7007],"content":"<ph id=\"ph1\">`CFileException::badSeek`</ph> 9: There was an error trying to set the file pointer.","source":"`CFileException::badSeek` 9: There was an error trying to set the file pointer."},{"pos":[7015,7071],"content":"<ph id=\"ph1\">`CFileException::hardIO`</ph> 10: There was a hardware error.","source":"`CFileException::hardIO` 10: There was a hardware error."},{"pos":[7079,7174],"content":"<ph id=\"ph1\">`CFileException::sharingViolation`</ph> 11: SHARE.EXE was not loaded, or a shared region was locked.","source":"`CFileException::sharingViolation` 11: SHARE.EXE was not loaded, or a shared region was locked."},{"pos":[7182,7280],"content":"<ph id=\"ph1\">`CFileException::lockViolation`</ph> 12: There was an attempt to lock a region that was already locked.","source":"`CFileException::lockViolation` 12: There was an attempt to lock a region that was already locked."},{"pos":[7288,7336],"content":"<ph id=\"ph1\">`CFileException::diskFull`</ph> 14: The disk is full.","source":"`CFileException::diskFull` 14: The disk is full."},{"pos":[7344,7404],"content":"<ph id=\"ph1\">`CFileException::endOfFile`</ph> 15: The end of file was reached.","source":"`CFileException::endOfFile` 15: The end of file was reached."},{"pos":[7416,7532],"content":"[!NOTE]\nThese `CFileException` cause enumerators are distinct from the `CArchiveException` cause enumerators.","leadings":["","    >  "],"nodes":[{"content":"These <ph id=\"ph1\">`CFileException`</ph> cause enumerators are distinct from the <ph id=\"ph2\">`CArchiveException`</ph> cause enumerators.","pos":[8,109],"source":"These `CFileException` cause enumerators are distinct from the `CArchiveException` cause enumerators."}]},{"pos":[7544,7747],"content":"[!NOTE]\n`CArchiveException::generic` is deprecated. Use `genericException` instead. If `generic` is used in an application and built with /clr, the resulting syntax errors are not easy to decipher.","leadings":["","    > "],"nodes":[{"content":"`CArchiveException::generic` is deprecated. Use `genericException` instead. If `generic` is used in an application and built with /clr, the resulting syntax errors are not easy to decipher.","pos":[8,197],"nodes":[{"content":"<ph id=\"ph1\">`CArchiveException::generic`</ph> is deprecated.","pos":[0,43],"source":"`CArchiveException::generic` is deprecated."},{"content":"Use <ph id=\"ph1\">`genericException`</ph> instead.","pos":[44,75],"source":" Use `genericException` instead."},{"content":"If <ph id=\"ph1\">`generic`</ph> is used in an application and built with /clr, the resulting syntax errors are not easy to decipher.","pos":[76,189],"source":" If `generic` is used in an application and built with /clr, the resulting syntax errors are not easy to decipher."}]}]},{"pos":[7757,7764],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7768,7871],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCFiles#30<ept id=\"p2\">](../../atl-mfc-shared/reference/codesnippet/cpp/cfileexception-class_3.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCFiles#30](../../atl-mfc-shared/reference/codesnippet/cpp/cfileexception-class_3.cpp)]"},{"pos":[7881,7950],"content":"<bpt id=\"p1\">&lt;a name=\"cfileexception__m_loserror\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFileException::m_lOsError","linkify":"<a name=\"cfileexception__m_loserror\"></a>  CFileException::m_lOsError","source":"<a name=\"cfileexception__m_loserror\"></a>  CFileException::m_lOsError"},{"content":"Contains the operating-system error code for this exception.","pos":[7954,8014]},{"pos":[8058,8065],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"See your operating-system technical manual for a listing of error codes.","pos":[8069,8141]},{"content":"This data member is a public variable of type <bpt id=\"p1\">**</bpt>LONG<ept id=\"p1\">**</ept>.","pos":[8142,8197],"source":" This data member is a public variable of type **LONG**."},{"pos":[8207,8282],"content":"<bpt id=\"p1\">&lt;a name=\"cfileexception__m_strfilename\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFileException::m_strFileName","linkify":"<a name=\"cfileexception__m_strfilename\"></a>  CFileException::m_strFileName","source":"<a name=\"cfileexception__m_strfilename\"></a>  CFileException::m_strFileName"},{"content":"Contains the name of the file for this exception condition.","pos":[8286,8345]},{"pos":[8395,8480],"content":"<bpt id=\"p1\">&lt;a name=\"cfileexception__oserrortoexception\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFileException::OsErrorToException","linkify":"<a name=\"cfileexception__oserrortoexception\"></a>  CFileException::OsErrorToException","source":"<a name=\"cfileexception__oserrortoexception\"></a>  CFileException::OsErrorToException"},{"content":"Returns an enumerator that corresponds to a given <ph id=\"ph1\">`lOsError`</ph> value.","pos":[8484,8551],"source":"Returns an enumerator that corresponds to a given `lOsError` value."},{"content":"If the error code is unknown, then the function returns <bpt id=\"p1\">**</bpt>CFileException::generic<ept id=\"p1\">**</ept>.","pos":[8552,8636],"source":" If the error code is unknown, then the function returns **CFileException::generic**."},{"pos":[8714,8724],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An operating-system-specific error code.","pos":[8742,8782]},{"pos":[8792,8804],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Enumerated value that corresponds to a given operating-system error value.","pos":[8808,8882]},{"pos":[8892,8899],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8903,9006],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCFiles#27<ept id=\"p2\">](../../atl-mfc-shared/reference/codesnippet/cpp/cfileexception-class_4.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCFiles#27](../../atl-mfc-shared/reference/codesnippet/cpp/cfileexception-class_4.cpp)]"},{"pos":[9016,9085],"content":"<bpt id=\"p1\">&lt;a name=\"cfileexception__throwerrno\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFileException::ThrowErrno","linkify":"<a name=\"cfileexception__throwerrno\"></a>  CFileException::ThrowErrno","source":"<a name=\"cfileexception__throwerrno\"></a>  CFileException::ThrowErrno"},{"pos":[9089,9193],"content":"Constructs a <ph id=\"ph1\">`CFileException`</ph> object corresponding to a given <ph id=\"ph2\">`nErrno`</ph> value, then throws the exception.","source":"Constructs a `CFileException` object corresponding to a given `nErrno` value, then throws the exception."},{"pos":[9295,9305],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An integer error code as defined in the run-time include file ERRNO.H.","pos":[9321,9391]},{"content":"A pointer to the string containing the name of the file that caused the exception, if available.","pos":[9416,9512]},{"pos":[9522,9529],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9533,9636],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCFiles#28<ept id=\"p2\">](../../atl-mfc-shared/reference/codesnippet/cpp/cfileexception-class_5.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCFiles#28](../../atl-mfc-shared/reference/codesnippet/cpp/cfileexception-class_5.cpp)]"},{"pos":[9646,9719],"content":"<bpt id=\"p1\">&lt;a name=\"cfileexception__throwoserror\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CFileException::ThrowOsError","linkify":"<a name=\"cfileexception__throwoserror\"></a>  CFileException::ThrowOsError","source":"<a name=\"cfileexception__throwoserror\"></a>  CFileException::ThrowOsError"},{"content":"Throws a <ph id=\"ph1\">`CFileException`</ph> corresponding to a given <ph id=\"ph2\">`lOsError`</ph> value.","pos":[9723,9791],"source":"Throws a `CFileException` corresponding to a given `lOsError` value."},{"content":"If the error code is unknown, then the function throws an exception coded as <bpt id=\"p1\">**</bpt>CFileException::generic<ept id=\"p1\">**</ept>.","pos":[9792,9897],"source":" If the error code is unknown, then the function throws an exception coded as **CFileException::generic**."},{"pos":[10004,10014],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An operating-system-specific error code.","pos":[10032,10072]},{"content":"A pointer to the string containing the name of the file that caused the exception, if available.","pos":[10097,10193]},{"pos":[10203,10210],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10214,10317],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCFiles#29<ept id=\"p2\">](../../atl-mfc-shared/reference/codesnippet/cpp/cfileexception-class_6.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCFiles#29](../../atl-mfc-shared/reference/codesnippet/cpp/cfileexception-class_6.cpp)]"},{"pos":[10326,10334],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>CException Class<ept id=\"p1\">](../../mfc/reference/cexception-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[10338,10398],"source":"[CException Class](../../mfc/reference/cexception-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[10401,10450],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Exception Processing<ept id=\"p1\">](../../mfc/reference/exception-processing.md)</ept>","pos":[10453,10521],"source":" [Exception Processing](../../mfc/reference/exception-processing.md)"}],"content":"---\ntitle: \"CFileException Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CFileException\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CFile class, exceptions of\"\n  - \"exceptions, file type\"\n  - \"CFileException class\"\nms.assetid: f6491bb9-bfbc-42fd-a952-b33f9b62323f\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CFileException Class\nRepresents a file-related exception condition.  \n  \n## Syntax  \n  \n```  \nclass CFileException : public CException  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CFileException::CFileException](#cfileexception__cfileexception)|Constructs a `CFileException` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CFileException::ErrnoToException](#cfileexception__errnotoexception)|Returns cause code corresponding to a run-time error number.|  \n|[CFileException::GetErrorMessage](#cfileexception__geterrormessage)|Retrieves the message describing an exception.|  \n|[CFileException::OsErrorToException](#cfileexception__oserrortoexception)|Returns a cause code corresponding to an operating system error code.|  \n|[CFileException::ThrowErrno](#cfileexception__throwerrno)|Throws a file exception based on a runtime error number.|  \n|[CFileException::ThrowOsError](#cfileexception__throwoserror)|Throws a file exception based on an operating system error number.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CFileException::m_cause](#cfileexception__m_cause)|Contains portable code corresponding to the exception cause.|  \n|[CFileException::m_lOsError](#cfileexception__m_loserror)|Contains the related operating-system error number.|  \n|[CFileException::m_strFileName](#cfileexception__m_strfilename)|Contains the name of the file for this exception.|  \n  \n## Remarks  \n The `CFileException` class includes public data members that hold the portable cause code and the operating-system-specific error number. The class also provides static member functions for throwing file exceptions and for returning cause codes for both operating-system errors and C run-time errors.  \n  \n `CFileException` objects are constructed and thrown in `CFile` member functions and in member functions of derived classes. You can access these objects within the scope of a **CATCH** expression. For portability, use only the cause code to get the reason for an exception. For more information about exceptions, see the article [Exception Handling (MFC)](../../mfc/exception-handling-in-mfc.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CException](../../mfc/reference/cexception-class.md)  \n  \n `CFileException`  \n  \n## Requirements  \n **Header:** afx.h  \n  \n##  <a name=\"cfileexception__cfileexception\"></a>  CFileException::CFileException  \n Constructs a `CFileException` object that stores the cause code and the operating-system code in the object.  \n  \n```  \nCFileException(\n    int cause = CFileException::none,  \n    LONG lOsError = -1,  \n    LPCTSTR lpszArchiveName = NULL);\n```  \n  \n### Parameters  \n `cause`  \n An enumerated type variable that indicates the reason for the exception. See [CFileException::m_cause](#cfileexception__m_cause) for a list of the possible values.  \n  \n `lOsError`  \n An operating-system-specific reason for the exception, if available. The `lOsError` parameter provides more information than `cause` does.  \n  \n `lpszArchiveName`  \n Points to a string containing the name of the `CFile` object causing the exception.  \n  \n### Remarks  \n Do not use this constructor directly, but rather call the global function [AfxThrowFileException](exception-processing.md#afxthrowfileexception).  \n  \n> [!NOTE]\n>  The variable `lOsError` applies only to `CFile` and `CStdioFile` objects. The `CMemFile` class does not handle this error code.  \n  \n##  <a name=\"cfileexception__errnotoexception\"></a>  CFileException::ErrnoToException  \n Converts a given run-time library error value to a `CFileException` enumerated error value.  \n  \n```  \nstatic int PASCAL ErrnoToException(int nErrno);\n```  \n  \n### Parameters  \n `nErrno`  \n An integer error code as defined in the run-time include file ERRNO.H.  \n  \n### Return Value  \n Enumerated value that corresponds to a given run-time library error value.  \n  \n### Remarks  \n See [CFileException::m_cause](#cfileexception__m_cause) for a list of the possible enumerated values.  \n  \n### Example  \n [!code-cpp[NVC_MFCFiles#26](../../atl-mfc-shared/reference/codesnippet/cpp/cfileexception-class_1.cpp)]  \n  \n##  <a name=\"cfileexception__geterrormessage\"></a>  CFileException::GetErrorMessage  \n Retrieves text that describes an exception.  \n  \n```  \nvirtual BOOL GetErrorMessage(\n    LPTSTR lpszError,  \n    UINT nMaxError,  \n    PUINT pnHelpContext = NULL) const;\n\n \n```  \n  \n### Parameters  \n [in, out] `lpszError`  \n Pointer to a buffer that receives an error message.  \n  \n [in] `nMaxError`  \n The maximum number of characters the specified buffer can hold. This includes the terminating null character.  \n  \n [in, out] `pnHelpContext`  \n Pointer to an unsigned integer that receives the help context ID. If `NULL`, no ID is returned.  \n  \n### Return Value  \n `TRUE` if the method was successful; otherwise `FALSE`.  \n  \n### Remarks  \n If the specified buffer is too small, the error message is truncated.  \n  \n### Example  \n The following example uses `CFileException::GetErrorMessage`.  \n  \n [!code-cpp[NVC_MFCExceptions#22](../../mfc/codesnippet/cpp/cfileexception-class_2.cpp)]  \n  \n##  <a name=\"cfileexception__m_cause\"></a>  CFileException::m_cause  \n Contains values defined by a `CFileException` enumerated type.  \n  \n```  \nint m_cause;  \n```  \n  \n### Remarks  \n This data member is a public variable of type `int`. The enumerators and their meanings are as follows:  \n  \n- `CFileException::none` 0: No error occurred.  \n  \n- `CFileException::genericException` 1: An unspecified error occurred.  \n  \n- `CFileException::fileNotFound` 2: The file could not be located.  \n  \n- `CFileException::badPath` 3: All or part of the path is invalid.  \n  \n- `CFileException::tooManyOpenFiles` 4: The permitted number of open files was exceeded.  \n  \n- `CFileException::accessDenied` 5: The file could not be accessed.  \n  \n- `CFileException::invalidFile` 6: There was an attempt to use an invalid file handle.  \n  \n- `CFileException::removeCurrentDir` 7: The current working directory cannot be removed.  \n  \n- `CFileException::directoryFull` 8: There are no more directory entries.  \n  \n- `CFileException::badSeek` 9: There was an error trying to set the file pointer.  \n  \n- `CFileException::hardIO` 10: There was a hardware error.  \n  \n- `CFileException::sharingViolation` 11: SHARE.EXE was not loaded, or a shared region was locked.  \n  \n- `CFileException::lockViolation` 12: There was an attempt to lock a region that was already locked.  \n  \n- `CFileException::diskFull` 14: The disk is full.  \n  \n- `CFileException::endOfFile` 15: The end of file was reached.  \n  \n    > [!NOTE]\n    >  These `CFileException` cause enumerators are distinct from the `CArchiveException` cause enumerators.  \n  \n    > [!NOTE]\n    > `CArchiveException::generic` is deprecated. Use `genericException` instead. If `generic` is used in an application and built with /clr, the resulting syntax errors are not easy to decipher.  \n  \n### Example  \n [!code-cpp[NVC_MFCFiles#30](../../atl-mfc-shared/reference/codesnippet/cpp/cfileexception-class_3.cpp)]  \n  \n##  <a name=\"cfileexception__m_loserror\"></a>  CFileException::m_lOsError  \n Contains the operating-system error code for this exception.  \n  \n```  \nLONG m_lOsError;  \n```  \n  \n### Remarks  \n See your operating-system technical manual for a listing of error codes. This data member is a public variable of type **LONG**.  \n  \n##  <a name=\"cfileexception__m_strfilename\"></a>  CFileException::m_strFileName  \n Contains the name of the file for this exception condition.  \n  \n```  \nCString m_strFileName;  \n```  \n  \n##  <a name=\"cfileexception__oserrortoexception\"></a>  CFileException::OsErrorToException  \n Returns an enumerator that corresponds to a given `lOsError` value. If the error code is unknown, then the function returns **CFileException::generic**.  \n  \n```  \nstatic int PASCAL OsErrorToException(LONG lOsError);\n```  \n  \n### Parameters  \n `lOsError`  \n An operating-system-specific error code.  \n  \n### Return Value  \n Enumerated value that corresponds to a given operating-system error value.  \n  \n### Example  \n [!code-cpp[NVC_MFCFiles#27](../../atl-mfc-shared/reference/codesnippet/cpp/cfileexception-class_4.cpp)]  \n  \n##  <a name=\"cfileexception__throwerrno\"></a>  CFileException::ThrowErrno  \n Constructs a `CFileException` object corresponding to a given `nErrno` value, then throws the exception.  \n  \n```  \nstatic void PASCAL ThrowErrno(\n    int nErrno, LPCTSTR lpszFileName = NULL);\n```  \n  \n### Parameters  \n `nErrno`  \n An integer error code as defined in the run-time include file ERRNO.H.  \n  \n `lpszFileName`  \n A pointer to the string containing the name of the file that caused the exception, if available.  \n  \n### Example  \n [!code-cpp[NVC_MFCFiles#28](../../atl-mfc-shared/reference/codesnippet/cpp/cfileexception-class_5.cpp)]  \n  \n##  <a name=\"cfileexception__throwoserror\"></a>  CFileException::ThrowOsError  \n Throws a `CFileException` corresponding to a given `lOsError` value. If the error code is unknown, then the function throws an exception coded as **CFileException::generic**.  \n  \n```  \nstatic void PASCAL ThrowOsError(\n    LONG lOsError, LPCTSTR lpszFileName = NULL);\n```  \n  \n### Parameters  \n `lOsError`  \n An operating-system-specific error code.  \n  \n `lpszFileName`  \n A pointer to the string containing the name of the file that caused the exception, if available.  \n  \n### Example  \n [!code-cpp[NVC_MFCFiles#29](../../atl-mfc-shared/reference/codesnippet/cpp/cfileexception-class_6.cpp)]  \n  \n## See Also  \n [CException Class](../../mfc/reference/cexception-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Exception Processing](../../mfc/reference/exception-processing.md)\n\n\n\n"}