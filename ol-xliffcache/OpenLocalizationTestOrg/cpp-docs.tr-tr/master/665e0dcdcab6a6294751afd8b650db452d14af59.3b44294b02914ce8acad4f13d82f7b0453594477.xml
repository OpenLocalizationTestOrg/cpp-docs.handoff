{"nodes":[{"pos":[12,80],"content":"How to: Read Windows Performance Counters (C++-CLI) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Read Windows Performance Counters (C++-CLI) | Microsoft Docs","pos":[0,68]}]},{"content":"How to: Read Windows Performance Counters (C++/CLI)","pos":[862,913]},{"content":"Some applications and Windows subsystems expose performance data through the Windows performance system.","pos":[914,1018]},{"content":"These counters can be accessed using the &lt;xref:System.Diagnostics.PerformanceCounterCategory&gt; and &lt;xref:System.Diagnostics.PerformanceCounter&gt; classes, which reside in the &lt;xref:System.Diagnostics?displayProperty=fullName&gt; namespace.","pos":[1019,1252],"source":" These counters can be accessed using the <xref:System.Diagnostics.PerformanceCounterCategory> and <xref:System.Diagnostics.PerformanceCounter> classes, which reside in the <xref:System.Diagnostics?displayProperty=fullName> namespace."},{"content":"The following code example uses these classes to retrieve and display a counter that is updated by Windows to indicate the percentage of time that the processor is busy.","pos":[1259,1428]},{"pos":[1436,1519],"content":"[!NOTE]\n This example requires administrative privileges to run on Windows Vista.","leadings":["","> "],"nodes":[{"content":"This example requires administrative privileges to run on Windows Vista.","pos":[9,81]}]},{"content":"Example","pos":[1528,1535]},{"content":"See Also","pos":[3936,3944]},{"content":"Introduction to Monitoring Performance","pos":[3949,3987]},{"content":"Windows Operations (C++/CLI)","pos":[4064,4092]},{"content":".NET Programming with C++/CLI (Visual C++)","pos":[4140,4182]}],"content":"---\ntitle: \"How to: Read Windows Performance Counters (C++-CLI) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"performance counters\"\n  - \"performance counters, reading Windows performance counters\"\n  - \"performance monitoring, Windows performance counters\"\n  - \"performance, counters\"\n  - \"counters, reading Windows performance counters\"\n  - \"performance\"\n  - \"performance monitoring\"\nms.assetid: 9e1c836c-cb0f-4f37-9a93-3dca6412d6b1\ncaps.latest.revision: 12\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Read Windows Performance Counters (C++/CLI)\nSome applications and Windows subsystems expose performance data through the Windows performance system. These counters can be accessed using the <xref:System.Diagnostics.PerformanceCounterCategory> and <xref:System.Diagnostics.PerformanceCounter> classes, which reside in the <xref:System.Diagnostics?displayProperty=fullName> namespace.  \n  \n The following code example uses these classes to retrieve and display a counter that is updated by Windows to indicate the percentage of time that the processor is busy.  \n  \n> [!NOTE]\n>  This example requires administrative privileges to run on Windows Vista.  \n  \n## Example  \n  \n```  \n// processor_timer.cpp  \n// compile with: /clr  \n#using <system.dll>  \n  \nusing namespace System;  \nusing namespace System::Threading;  \nusing namespace System::Diagnostics;  \nusing namespace System::Timers;  \n  \nref struct TimerObject  \n{  \npublic:  \n   static String^ m_instanceName;  \n   static PerformanceCounter^ m_theCounter;  \n  \npublic:  \n   static void OnTimer(Object^ source, ElapsedEventArgs^ e)  \n   {  \n      try   \n      {  \n         Console::WriteLine(\"CPU time used: {0,6} \",  \n          m_theCounter->NextValue( ).ToString(\"f\"));  \n      }   \n      catch(Exception^ e)  \n      {  \n         if (dynamic_cast<InvalidOperationException^>(e))  \n         {  \n            Console::WriteLine(\"Instance '{0}' does not exist\",  \n                  m_instanceName);  \n            return;  \n         }  \n         else  \n         {  \n            Console::WriteLine(\"Unknown exception... ('q' to quit)\");  \n            return;  \n         }  \n      }  \n   }  \n};  \n  \nint main()  \n{  \n   String^ objectName = \"Processor\";  \n   String^ counterName = \"% Processor Time\";  \n   String^ instanceName = \"_Total\";  \n  \n   try  \n   {  \n      if ( !PerformanceCounterCategory::Exists(objectName) )  \n      {  \n         Console::WriteLine(\"Object {0} does not exist\", objectName);  \n         return -1;  \n      }  \n   }  \n   catch (UnauthorizedAccessException ^ex)  \n   {  \n      Console::WriteLine(\"You are not authorized to access this information.\");  \n      Console::Write(\"If you are using Windows Vista, run the application with \");  \n      Console::WriteLine(\"administrative privileges.\");  \n      Console::WriteLine(ex->Message);  \n      return -1;  \n   }  \n  \n   if ( !PerformanceCounterCategory::CounterExists(  \n          counterName, objectName) )  \n   {  \n      Console::WriteLine(\"Counter {0} does not exist\", counterName);  \n      return -1;  \n   }  \n  \n   TimerObject::m_instanceName = instanceName;  \n   TimerObject::m_theCounter = gcnew PerformanceCounter(  \n          objectName, counterName, instanceName);  \n  \n   System::Timers::Timer^ aTimer = gcnew System::Timers::Timer();  \n   aTimer->Elapsed += gcnew ElapsedEventHandler(&TimerObject::OnTimer);  \n   aTimer->Interval = 1000;  \n   aTimer->Enabled = true;  \n   aTimer->AutoReset = true;  \n  \n   Console::WriteLine(\"reporting CPU usage for the next 10 seconds\");  \n   Thread::Sleep(10000);  \n   return 0;  \n}  \n```  \n  \n## See Also  \n [Introduction to Monitoring Performance](http://msdn.microsoft.com/en-us/d40f10b9-e2b7-4ec8-a9b3-706929e5bf35)   \n [Windows Operations (C++/CLI)](../dotnet/windows-operations-cpp-cli.md)   \n [.NET Programming with C++/CLI (Visual C++)](../dotnet/dotnet-programming-with-cpp-cli-visual-cpp.md)"}