{"nodes":[{"pos":[12,49],"content":"Effects of Buffering | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Effects of Buffering | Microsoft Docs","pos":[0,37]}]},{"pos":[641,661],"content":"Effects of Buffering","linkify":"Effects of Buffering","nodes":[{"content":"Effects of Buffering","pos":[0,20]}]},{"content":"The following example shows the effects of buffering.","pos":[662,715]},{"content":"You might expect the program to print <ph id=\"ph1\">`please wait`</ph>, wait 5 seconds, and then proceed.","pos":[716,802],"source":" You might expect the program to print `please wait`, wait 5 seconds, and then proceed."},{"content":"It will not necessarily work this way, however, because the output is buffered.","pos":[803,882]},{"content":"To make the program work logically, the <ph id=\"ph1\">`cout`</ph> object must empty itself when the message is to appear.","pos":[1190,1292],"source":"To make the program work logically, the `cout` object must empty itself when the message is to appear."},{"content":"To flush an <ph id=\"ph1\">`ostream`</ph> object, send it the <ph id=\"ph2\">`flush`</ph> manipulator:","pos":[1293,1355],"source":" To flush an `ostream` object, send it the `flush` manipulator:"},{"content":"This step flushes the buffer, ensuring the message prints before the wait.","pos":[1412,1486]},{"content":"You can also use the <ph id=\"ph1\">`endl`</ph> manipulator, which flushes the buffer and outputs a carriage return–linefeed, or you can use the <ph id=\"ph2\">`cin`</ph> object.","pos":[1487,1625],"source":" You can also use the `endl` manipulator, which flushes the buffer and outputs a carriage return–linefeed, or you can use the `cin` object."},{"content":"This object (with the <ph id=\"ph1\">`cerr`</ph> or <ph id=\"ph2\">`clog`</ph> objects) is usually tied to the <ph id=\"ph3\">`cout`</ph> object.","pos":[1626,1711],"source":" This object (with the `cerr` or `clog` objects) is usually tied to the `cout` object."},{"content":"Thus, any use of <ph id=\"ph1\">`cin`</ph> (or of the <ph id=\"ph2\">`cerr`</ph> or <ph id=\"ph3\">`clog`</ph> objects) flushes the <ph id=\"ph4\">`cout`</ph> object.","pos":[1712,1798],"source":" Thus, any use of `cin` (or of the `cerr` or `clog` objects) flushes the `cout` object."},{"pos":[1807,1815],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[1819,1874],"content":"<bpt id=\"p1\">[</bpt>Output Streams<ept id=\"p1\">](../standard-library/output-streams.md)</ept>","source":"[Output Streams](../standard-library/output-streams.md)"}],"content":"---\ntitle: \"Effects of Buffering | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"buffers, effects of buffering\"\n  - \"buffering, effects of\"\nms.assetid: 5d544812-e95e-4f28-b15a-edef3f3414fd\ncaps.latest.revision: 9\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Effects of Buffering\nThe following example shows the effects of buffering. You might expect the program to print `please wait`, wait 5 seconds, and then proceed. It will not necessarily work this way, however, because the output is buffered.  \n  \n```  \n// effects_buffering.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <time.h>  \nusing namespace std;  \n  \nint main( )  \n{  \n   time_t tm = time( NULL ) + 5;  \n   cout << \"Please wait...\";  \n   while ( time( NULL ) < tm )  \n      ;  \n   cout << \"\\nAll done\" << endl;  \n}  \n```  \n  \n To make the program work logically, the `cout` object must empty itself when the message is to appear. To flush an `ostream` object, send it the `flush` manipulator:  \n  \n```  \ncout <<\"Please wait...\" <<flush;  \n```  \n  \n This step flushes the buffer, ensuring the message prints before the wait. You can also use the `endl` manipulator, which flushes the buffer and outputs a carriage return–linefeed, or you can use the `cin` object. This object (with the `cerr` or `clog` objects) is usually tied to the `cout` object. Thus, any use of `cin` (or of the `cerr` or `clog` objects) flushes the `cout` object.  \n  \n## See Also  \n [Output Streams](../standard-library/output-streams.md)\n\n"}