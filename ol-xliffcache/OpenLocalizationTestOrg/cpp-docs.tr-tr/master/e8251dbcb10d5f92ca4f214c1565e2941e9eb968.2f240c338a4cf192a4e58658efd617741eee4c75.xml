{"nodes":[{"pos":[12,56],"content":"CMFCBaseVisualManager Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMFCBaseVisualManager Class | Microsoft Docs","pos":[0,44]}]},{"content":"CMFCBaseVisualManager Class","pos":[855,882]},{"content":"A layer between derived visual managers and the Windows Theme API.","pos":[883,949]},{"pos":[980,1061],"content":"loads UxTheme.dll, if available, and manages access to Windows Theme API methods."},{"content":"This class is for internal use only.","pos":[1068,1104]},{"content":"Syntax","pos":[1113,1119]},{"content":"Members","pos":[1189,1196]},{"content":"Public Constructors","pos":[1206,1225]},{"content":"Name","pos":[1246,1250]},{"content":"Description","pos":[1251,1262]},{"content":"CMFCBaseVisualManager::CMFCBaseVisualManager","pos":[1268,1312]},{"pos":[1361,1421],"content":"Constructs and initializes a <ph id=\"ph1\">`CMFCBaseVisualManager`</ph> object.","source":"Constructs and initializes a `CMFCBaseVisualManager` object."},{"content":"Destructor.","pos":[1474,1485]},{"content":"Public Methods","pos":[1496,1510]},{"content":"Name","pos":[1531,1535]},{"content":"Description","pos":[1536,1547]},{"content":"CMFCBaseVisualManager::DrawCheckBox","pos":[1553,1588]},{"content":"Draws a check box control by using the current Windows theme.","pos":[1628,1689]},{"content":"CMFCBaseVisualManager::DrawComboBorder","pos":[1695,1733]},{"content":"Draws a combo box border using the current Windows theme.","pos":[1776,1833]},{"content":"CMFCBaseVisualManager::DrawComboDropButton","pos":[1839,1881]},{"content":"Draws a combo box drop-down button using the current Windows theme.","pos":[1928,1995]},{"content":"CMFCBaseVisualManager::DrawPushButton","pos":[2001,2038]},{"content":"Draws a push button using the current Windows theme.","pos":[2080,2132]},{"content":"CMFCBaseVisualManager::DrawRadioButton","pos":[2138,2176]},{"content":"Draws a radio button control by using the current Windows theme.","pos":[2219,2283]},{"content":"CMFCBaseVisualManager::DrawStatusBarProgress","pos":[2289,2333]},{"pos":[2382,2528],"content":"Draws a progress bar on a status bar control ( <bpt id=\"p1\">[</bpt>CMFCStatusBar Class<ept id=\"p1\">](../../mfc/reference/cmfcstatusbar-class.md)</ept>) using the current Windows theme.","source":"Draws a progress bar on a status bar control ( [CMFCStatusBar Class](../../mfc/reference/cmfcstatusbar-class.md)) using the current Windows theme."},{"content":"CMFCBaseVisualManager::FillReBarPane","pos":[2534,2570]},{"content":"Fills the background of the rebar control by using the current Windows theme.","pos":[2611,2688]},{"content":"CMFCBaseVisualManager::GetStandardWindowsTheme","pos":[2694,2740]},{"content":"Gets the current Windows theme.","pos":[2791,2822]},{"content":"Protected Methods","pos":[2833,2850]},{"content":"Name","pos":[2871,2875]},{"content":"Description","pos":[2876,2887]},{"content":"CMFCBaseVisualManager::CleanUpThemes","pos":[2893,2929]},{"pos":[2970,3042],"content":"Calls <ph id=\"ph1\">`CloseThemeData`</ph> for all handles obtained in <ph id=\"ph2\">`UpdateSystemColors`</ph>.","source":"Calls `CloseThemeData` for all handles obtained in `UpdateSystemColors`."},{"content":"CMFCBaseVisualManager::UpdateSystemColors","pos":[3048,3089]},{"pos":[3135,3243],"content":"Calls <ph id=\"ph1\">`OpenThemeData`</ph> to obtain handles for drawing various controls: windows, toolbars, buttons, and so on.","source":"Calls `OpenThemeData` to obtain handles for drawing various controls: windows, toolbars, buttons, and so on."},{"content":"Remarks","pos":[3253,3260]},{"content":"You do not have to instantiate objects of this class directly.","pos":[3264,3326]},{"content":"Because it is a base class for all visual managers, you can just call <bpt id=\"p1\">[</bpt>CMFCVisualManager::GetInstance<ept id=\"p1\">](../../mfc/reference/cmfcvisualmanager-class.md#cmfcvisualmanager__getinstance)</ept>, obtain a pointer to the current Visual Manager, and access the methods for <ph id=\"ph1\">`CMFCBaseVisualManager`</ph> using that pointer.","pos":[3333,3634],"source":"Because it is a base class for all visual managers, you can just call [CMFCVisualManager::GetInstance](../../mfc/reference/cmfcvisualmanager-class.md#cmfcvisualmanager__getinstance), obtain a pointer to the current Visual Manager, and access the methods for `CMFCBaseVisualManager` using that pointer."},{"content":"However, if you have to display a control by using the current Windows theme, it is better to use the <ph id=\"ph1\">`CMFCVisualManagerWindows`</ph> interface.","pos":[3635,3774],"source":" However, if you have to display a control by using the current Windows theme, it is better to use the `CMFCVisualManagerWindows` interface."},{"content":"Inheritance Hierarchy","pos":[3783,3804]},{"content":"CObject","pos":[3809,3816]},{"content":"CMFCBaseVisualManager","pos":[3863,3884]},{"content":"Requirements","pos":[3946,3958]},{"pos":[3962,3992],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxvisualmanager.h","source":"**Header:** afxvisualmanager.h"},{"pos":[4055,4091],"content":"CMFCBaseVisualManager::CleanUpThemes"},{"pos":[4095,4167],"content":"Calls <ph id=\"ph1\">`CloseThemeData`</ph> for all handles obtained in <ph id=\"ph2\">`UpdateSystemColors`</ph>.","source":"Calls `CloseThemeData` for all handles obtained in `UpdateSystemColors`."},{"content":"Remarks","pos":[4214,4221]},{"content":"For internal use only.","pos":[4225,4247]},{"pos":[4318,4362],"content":"CMFCBaseVisualManager::CMFCBaseVisualManager"},{"pos":[4366,4426],"content":"Constructs and initializes a <ph id=\"ph1\">`CMFCBaseVisualManager`</ph> object.","source":"Constructs and initializes a `CMFCBaseVisualManager` object."},{"pos":[4528,4563],"content":"CMFCBaseVisualManager::DrawCheckBox"},{"content":"Draws a check box control by using the current Windows theme.","pos":[4567,4628]},{"content":"Parameters","pos":[4807,4817]},{"content":"[in]","pos":[4821,4825]},{"content":"A pointer to a device context","pos":[4835,4864]},{"content":"[in]","pos":[4871,4875]},{"content":"The bounding rectangle of the check box.","pos":[4886,4926]},{"content":"[in]","pos":[4933,4937]},{"content":"Specifies whether the check box is highlighted.","pos":[4956,5003]},{"content":"[in]","pos":[5010,5014]},{"content":"0 for unchecked, 1 for checked normal,","pos":[5027,5065]},{"content":"2 for mixed normal.","pos":[5072,5091]},{"content":"[in]","pos":[5098,5102]},{"content":"Specifies whether the check box is enabled.","pos":[5117,5160]},{"content":"[in]","pos":[5167,5171]},{"content":"Specifies whether the check box is pressed.","pos":[5186,5229]},{"content":"Return Value","pos":[5239,5251]},{"pos":[5262,5305],"content":"if Theme API is enabled; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if Theme API is enabled; otherwise `FALSE`."},{"content":"Remarks","pos":[5315,5322]},{"pos":[5326,5394],"content":"The values of <ph id=\"ph1\">`nState`</ph> correspond to the following check box styles.","source":"The values of `nState` correspond to the following check box styles."},{"content":"nState","pos":[5401,5407]},{"content":"Check box style","pos":[5408,5423]},{"content":"0","pos":[5467,5468]},{"content":"CBS_UNCHECKEDNORMAL","pos":[5469,5488]},{"content":"1","pos":[5493,5494]},{"content":"CBS_CHECKEDNORMAL","pos":[5495,5512]},{"content":"2","pos":[5517,5518]},{"content":"CBS_MIXEDNORMAL","pos":[5519,5534]},{"pos":[5600,5638],"content":"CMFCBaseVisualManager::DrawComboBorder"},{"content":"Draws the combo box border using the current Windows theme.","pos":[5642,5701]},{"content":"Parameters","pos":[5865,5875]},{"content":"[in]","pos":[5879,5883]},{"content":"A pointer to a device context.","pos":[5893,5923]},{"content":"[in]","pos":[5930,5934]},{"content":"Bounding rectangle of the combo box border.","pos":[5945,5988]},{"content":"[in]","pos":[5995,5999]},{"content":"Specifies whether the combo box border is disabled.","pos":[6015,6066]},{"content":"[in]","pos":[6073,6077]},{"content":"Specifies whether the combo box border is dropped down.","pos":[6094,6149]},{"content":"[in]","pos":[6156,6160]},{"content":"Specifies whether the combo box border is highlighted.","pos":[6181,6235]},{"content":"Return Value","pos":[6245,6257]},{"pos":[6268,6311],"content":"if Theme API is enabled; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if Theme API is enabled; otherwise `FALSE`."},{"pos":[6380,6422],"content":"CMFCBaseVisualManager::DrawComboDropButton"},{"content":"Draws a combo box drop-down button using the current Windows theme.","pos":[6426,6493]},{"content":"Parameters","pos":[6661,6671]},{"content":"Parameter","pos":[6678,6687]},{"content":"Description","pos":[6688,6699]},{"pos":[6742,6746],"content":"[in]"},{"content":"A pointer to a device context.","pos":[6753,6783]},{"pos":[6788,6792],"content":"[in]"},{"content":"The bounding rectangle of the combo box drop-down button.","pos":[6800,6857]},{"pos":[6862,6866],"content":"[in]"},{"content":"Specifies whether the combo box drop-down button is disabled.","pos":[6879,6940]},{"pos":[6945,6949],"content":"[in]"},{"content":"Specifies whether the combo box drop-down button is dropped down.","pos":[6963,7028]},{"pos":[7033,7037],"content":"[in]"},{"content":"Specifies whether the combo box drop-down button is highlighted.","pos":[7055,7119]},{"content":"Return Value","pos":[7130,7142]},{"pos":[7153,7196],"content":"if Theme API is enabled; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if Theme API is enabled; otherwise `FALSE`."},{"pos":[7260,7297],"content":"CMFCBaseVisualManager::DrawPushButton"},{"content":"Draws a push button using the current Windows theme.","pos":[7301,7353]},{"content":"Parameters","pos":[7490,7500]},{"content":"[in]","pos":[7504,7508]},{"content":"A pointer to a device context.","pos":[7518,7548]},{"content":"[in]","pos":[7555,7559]},{"content":"The bounding rectangle of the push button.","pos":[7570,7612]},{"content":"[in]","pos":[7619,7623]},{"content":"A pointer to the <bpt id=\"p1\">[</bpt>CMFCButton Class<ept id=\"p1\">](../../mfc/reference/cmfcbutton-class.md)</ept> object to draw.","pos":[7637,7729],"source":" A pointer to the [CMFCButton Class](../../mfc/reference/cmfcbutton-class.md) object to draw."},{"content":"[in]","pos":[7736,7740]},{"content":"Ignored.","pos":[7754,7762]},{"content":"The state is taken from <ph id=\"ph1\">`pButton`</ph>.","pos":[7763,7797],"source":" The state is taken from `pButton`."},{"content":"Return Value","pos":[7807,7819]},{"pos":[7830,7873],"content":"if Theme API is enabled; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if Theme API is enabled; otherwise `FALSE`."},{"pos":[7938,7976],"content":"CMFCBaseVisualManager::DrawRadioButton"},{"content":"Draws a radio button control by using the current Windows theme.","pos":[7980,8044]},{"content":"Parameters","pos":[8225,8235]},{"content":"[in]","pos":[8239,8243]},{"content":"A pointer to a device context.","pos":[8253,8283]},{"content":"[in]","pos":[8290,8294]},{"content":"The bounding rectangle of the radio button.","pos":[8305,8348]},{"content":"[in]","pos":[8355,8359]},{"content":"Specifies whether the radio button is highlighted.","pos":[8378,8428]},{"content":"[in]","pos":[8435,8439]},{"content":"Specifies whether the radio button is checked.","pos":[8454,8500]},{"content":"[in]","pos":[8507,8511]},{"content":"Specifies whether the radio button is enabled.","pos":[8526,8572]},{"content":"[in]","pos":[8579,8583]},{"content":"Specifies whether the radio button is pressed.","pos":[8598,8644]},{"content":"Return Value","pos":[8654,8666]},{"pos":[8677,8720],"content":"if Theme API is enabled; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if Theme API is enabled; otherwise `FALSE`."},{"pos":[8791,8835],"content":"CMFCBaseVisualManager::DrawStatusBarProgress"},{"pos":[8839,8981],"content":"Draws progress bar on status bar control ( <bpt id=\"p1\">[</bpt>CMFCStatusBar Class<ept id=\"p1\">](../../mfc/reference/cmfcstatusbar-class.md)</ept>) using the current Windows theme.","source":"Draws progress bar on status bar control ( [CMFCStatusBar Class](../../mfc/reference/cmfcstatusbar-class.md)) using the current Windows theme."},{"content":"Parameters","pos":[9290,9300]},{"content":"[in]","pos":[9304,9308]},{"content":"A pointer to a device context.","pos":[9318,9348]},{"content":"[in]","pos":[9355,9359]},{"content":"A pointer to status bar.","pos":[9376,9400]},{"content":"This value is ignored.","pos":[9401,9423]},{"content":"[in]","pos":[9430,9434]},{"content":"The bounding rectangle of the progress bar in <ph id=\"ph1\">`pDC`</ph> coordinates.","pos":[9453,9517],"source":" The bounding rectangle of the progress bar in `pDC` coordinates."},{"content":"[in]","pos":[9524,9528]},{"content":"The total progress value.","pos":[9549,9574]},{"content":"[in]","pos":[9581,9585]},{"content":"The current progress value.","pos":[9605,9632]},{"content":"[in]","pos":[9639,9643]},{"content":"The start color.","pos":[9656,9672]},{"content":"ignores this.","pos":[9697,9710]},{"content":"Derived classes can use it for color gradients.","pos":[9711,9758]},{"content":"[in]","pos":[9765,9769]},{"content":"The end color.","pos":[9794,9808]},{"content":"ignores this.","pos":[9833,9846]},{"content":"Derived classes can use it for color gradients.","pos":[9847,9894]},{"content":"[in]","pos":[9901,9905]},{"content":"Progress text color.","pos":[9927,9947]},{"content":"ignores this.","pos":[9972,9985]},{"content":"The text color is defined by <ph id=\"ph1\">`afxGlobalData.clrBtnText`</ph>.","pos":[9986,10042],"source":" The text color is defined by `afxGlobalData.clrBtnText`."},{"content":"[in]","pos":[10049,10053]},{"content":"Specifies whether to display progress text.","pos":[10073,10116]},{"content":"Return Value","pos":[10126,10138]},{"pos":[10149,10192],"content":"if Theme API is enabled; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if Theme API is enabled; otherwise `FALSE`."},{"pos":[10255,10291],"content":"CMFCBaseVisualManager::FillReBarPane"},{"content":"Fills the background of the rebar control by using the current Windows theme.","pos":[10295,10372]},{"content":"Parameters","pos":[10489,10499]},{"content":"[in]","pos":[10503,10507]},{"content":"A pointer to a device context.","pos":[10517,10547]},{"content":"[in]","pos":[10554,10558]},{"content":"A pointer to a pane whose background should be drawn.","pos":[10569,10622]},{"content":"[in]","pos":[10629,10633]},{"content":"The bounding rectangle of the area to be filled.","pos":[10650,10698]},{"content":"Return Value","pos":[10708,10720]},{"pos":[10731,10774],"content":"if Theme API is enabled; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if Theme API is enabled; otherwise `FALSE`."},{"pos":[10847,10893],"content":"CMFCBaseVisualManager::GetStandardWindowsTheme"},{"content":"Gets the current Windows theme.","pos":[10897,10928]},{"content":"Return Value","pos":[10999,11011]},{"content":"The currently selected Windows Theme color.","pos":[11015,11058]},{"content":"Can be one of the following enumerated values:","pos":[11059,11105]},{"pos":[11131,11159],"content":"- there is no theme enabled."},{"pos":[11192,11285],"content":"- non standard theme is selected (meaning a theme is selected, but none from the list below)."},{"pos":[11311,11331],"content":"- blue theme (Luna)."},{"pos":[11358,11372],"content":"- olive theme."},{"pos":[11400,11415],"content":"- silver theme."},{"pos":[11483,11524],"content":"CMFCBaseVisualManager::UpdateSystemColors"},{"pos":[11528,11636],"content":"Calls <ph id=\"ph1\">`OpenThemeData`</ph> to obtain handles for drawing various controls: windows, toolbars, buttons, and so on.","source":"Calls `OpenThemeData` to obtain handles for drawing various controls: windows, toolbars, buttons, and so on."},{"content":"Remarks","pos":[11688,11695]},{"content":"For internal use only.","pos":[11699,11721]},{"content":"See Also","pos":[11730,11738]},{"content":"Hierarchy Chart","pos":[11743,11758]},{"content":"Classes","pos":[11795,11802]}],"content":"---\ntitle: \"CMFCBaseVisualManager Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CMFCBaseVisualManager\"\n  - \"CMFCBaseVisualManager.~CMFCBaseVisualManager\"\n  - \"~CMFCBaseVisualManager\"\n  - \"CMFCBaseVisualManager::~CMFCBaseVisualManager\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"~CMFCBaseVisualManager destructor\"\n  - \"CMFCBaseVisualManager class, destructor\"\n  - \"CMFCBaseVisualManager class\"\nms.assetid: d56f3afc-cdea-4de1-825a-a08999c571e0\ncaps.latest.revision: 24\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMFCBaseVisualManager Class\nA layer between derived visual managers and the Windows Theme API.  \n  \n `CMFCBaseVisualManager` loads UxTheme.dll, if available, and manages access to Windows Theme API methods.  \n  \n This class is for internal use only.  \n  \n## Syntax  \n  \n```  \nclass CMFCBaseVisualManager: public CObject  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|||  \n|-|-|  \n|Name|Description|  \n|[CMFCBaseVisualManager::CMFCBaseVisualManager](#cmfcbasevisualmanager__cmfcbasevisualmanager)|Constructs and initializes a `CMFCBaseVisualManager` object.|  \n|`CMFCBaseVisualManager::~CMFCBaseVisualManager`|Destructor.|  \n  \n### Public Methods  \n  \n|||  \n|-|-|  \n|Name|Description|  \n|[CMFCBaseVisualManager::DrawCheckBox](#cmfcbasevisualmanager__drawcheckbox)|Draws a check box control by using the current Windows theme.|  \n|[CMFCBaseVisualManager::DrawComboBorder](#cmfcbasevisualmanager__drawcomboborder)|Draws a combo box border using the current Windows theme.|  \n|[CMFCBaseVisualManager::DrawComboDropButton](#cmfcbasevisualmanager__drawcombodropbutton)|Draws a combo box drop-down button using the current Windows theme.|  \n|[CMFCBaseVisualManager::DrawPushButton](#cmfcbasevisualmanager__drawpushbutton)|Draws a push button using the current Windows theme.|  \n|[CMFCBaseVisualManager::DrawRadioButton](#cmfcbasevisualmanager__drawradiobutton)|Draws a radio button control by using the current Windows theme.|  \n|[CMFCBaseVisualManager::DrawStatusBarProgress](#cmfcbasevisualmanager__drawstatusbarprogress)|Draws a progress bar on a status bar control ( [CMFCStatusBar Class](../../mfc/reference/cmfcstatusbar-class.md)) using the current Windows theme.|  \n|[CMFCBaseVisualManager::FillReBarPane](#cmfcbasevisualmanager__fillrebarpane)|Fills the background of the rebar control by using the current Windows theme.|  \n|[CMFCBaseVisualManager::GetStandardWindowsTheme](#cmfcbasevisualmanager__getstandardwindowstheme)|Gets the current Windows theme.|  \n  \n### Protected Methods  \n  \n|||  \n|-|-|  \n|Name|Description|  \n|[CMFCBaseVisualManager::CleanUpThemes](#cmfcbasevisualmanager__cleanupthemes)|Calls `CloseThemeData` for all handles obtained in `UpdateSystemColors`.|  \n|[CMFCBaseVisualManager::UpdateSystemColors](#cmfcbasevisualmanager__updatesystemcolors)|Calls `OpenThemeData` to obtain handles for drawing various controls: windows, toolbars, buttons, and so on.|  \n  \n## Remarks  \n You do not have to instantiate objects of this class directly.  \n  \n Because it is a base class for all visual managers, you can just call [CMFCVisualManager::GetInstance](../../mfc/reference/cmfcvisualmanager-class.md#cmfcvisualmanager__getinstance), obtain a pointer to the current Visual Manager, and access the methods for `CMFCBaseVisualManager` using that pointer. However, if you have to display a control by using the current Windows theme, it is better to use the `CMFCVisualManagerWindows` interface.  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CMFCBaseVisualManager](../../mfc/reference/cmfcbasevisualmanager-class.md)  \n  \n## Requirements  \n **Header:** afxvisualmanager.h  \n  \n##  <a name=\"cmfcbasevisualmanager__cleanupthemes\"></a>  CMFCBaseVisualManager::CleanUpThemes  \n Calls `CloseThemeData` for all handles obtained in `UpdateSystemColors`.  \n  \n```  \nvoid CleanUpThemes();\n```  \n  \n### Remarks  \n For internal use only.  \n  \n##  <a name=\"cmfcbasevisualmanager__cmfcbasevisualmanager\"></a>  CMFCBaseVisualManager::CMFCBaseVisualManager  \n Constructs and initializes a `CMFCBaseVisualManager` object.  \n  \n```  \nCMFCBaseVisualManager();\n```  \n  \n##  <a name=\"cmfcbasevisualmanager__drawcheckbox\"></a>  CMFCBaseVisualManager::DrawCheckBox  \n Draws a check box control by using the current Windows theme.  \n  \n```  \nvirtual BOOL DrawCheckBox(\n    CDC* pDC,   \n    CRect rect,   \n    BOOL bHighlighted,   \n    int nState,   \n    BOOL bEnabled,   \n    BOOL bPressed);\n\n);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context  \n  \n [in] `rect`  \n The bounding rectangle of the check box.  \n  \n [in] `bHighlighted`  \n Specifies whether the check box is highlighted.  \n  \n [in] `nState`  \n 0 for unchecked, 1 for checked normal,  \n  \n 2 for mixed normal.  \n  \n [in] `bEnabled`  \n Specifies whether the check box is enabled.  \n  \n [in] `bPressed`  \n Specifies whether the check box is pressed.  \n  \n### Return Value  \n `TRUE` if Theme API is enabled; otherwise `FALSE`.  \n  \n### Remarks  \n The values of `nState` correspond to the following check box styles.  \n  \n|nState|Check box style|  \n|------------|---------------------|  \n|0|CBS_UNCHECKEDNORMAL|  \n|1|CBS_CHECKEDNORMAL|  \n|2|CBS_MIXEDNORMAL|  \n  \n##  <a name=\"cmfcbasevisualmanager__drawcomboborder\"></a>  CMFCBaseVisualManager::DrawComboBorder  \n Draws the combo box border using the current Windows theme.  \n  \n```  \nvirtual BOOL DrawComboBorder(\n    CDC* pDC,   \n    CRect rect,   \n    BOOL bDisabled,   \n    BOOL bIsDropped,   \n    BOOL bIsHighlighted);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n Bounding rectangle of the combo box border.  \n  \n [in] `bDisabled`  \n Specifies whether the combo box border is disabled.  \n  \n [in] `bIsDropped`  \n Specifies whether the combo box border is dropped down.  \n  \n [in] `bIsHighlighted`  \n Specifies whether the combo box border is highlighted.  \n  \n### Return Value  \n `TRUE` if Theme API is enabled; otherwise `FALSE`.  \n  \n##  <a name=\"cmfcbasevisualmanager__drawcombodropbutton\"></a>  CMFCBaseVisualManager::DrawComboDropButton  \n Draws a combo box drop-down button using the current Windows theme.  \n  \n```  \nvirtual BOOL DrawComboDropButton(\n    CDC* pDC,   \n    CRect rect,   \n    BOOL bDisabled,   \n    BOOL bIsDropped,   \n    BOOL bIsHighlighted);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `pDC`|A pointer to a device context.|  \n|[in] `rect`|The bounding rectangle of the combo box drop-down button.|  \n|[in] `bDisabled`|Specifies whether the combo box drop-down button is disabled.|  \n|[in] `bIsDropped`|Specifies whether the combo box drop-down button is dropped down.|  \n|[in] `bIsHighlighted`|Specifies whether the combo box drop-down button is highlighted.|  \n  \n### Return Value  \n `TRUE` if Theme API is enabled; otherwise `FALSE`.  \n  \n##  <a name=\"cmfcbasevisualmanager__drawpushbutton\"></a>  CMFCBaseVisualManager::DrawPushButton  \n Draws a push button using the current Windows theme.  \n  \n```  \nvirtual BOOL DrawPushButton(\n    CDC* pDC,   \n    CRect rect,   \n    CMFCButton* pButton,   \n    UINT uiState);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n The bounding rectangle of the push button.  \n  \n [in] `pButton`  \n A pointer to the [CMFCButton Class](../../mfc/reference/cmfcbutton-class.md) object to draw.  \n  \n [in] `uiState`  \n Ignored. The state is taken from `pButton`.  \n  \n### Return Value  \n `TRUE` if Theme API is enabled; otherwise `FALSE`.  \n  \n##  <a name=\"cmfcbasevisualmanager__drawradiobutton\"></a>  CMFCBaseVisualManager::DrawRadioButton  \n Draws a radio button control by using the current Windows theme.  \n  \n```  \nvirtual BOOL DrawRadioButton(\n    CDC* pDC,   \n    CRect rect,   \n    BOOL bHighlighted,   \n    BOOL bChecked,   \n    BOOL bEnabled,   \n    BOOL bPressed);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rect`  \n The bounding rectangle of the radio button.  \n  \n [in] `bHighlighted`  \n Specifies whether the radio button is highlighted.  \n  \n [in] `bChecked`  \n Specifies whether the radio button is checked.  \n  \n [in] `bEnabled`  \n Specifies whether the radio button is enabled.  \n  \n [in] `bPressed`  \n Specifies whether the radio button is pressed.  \n  \n### Return Value  \n `TRUE` if Theme API is enabled; otherwise `FALSE`.  \n  \n##  <a name=\"cmfcbasevisualmanager__drawstatusbarprogress\"></a>  CMFCBaseVisualManager::DrawStatusBarProgress  \n Draws progress bar on status bar control ( [CMFCStatusBar Class](../../mfc/reference/cmfcstatusbar-class.md)) using the current Windows theme.  \n  \n```  \nvirtual BOOL DrawStatusBarProgress(\n    CDC* pDC,   \n    CMFCStatusBar* pStatusBar,   \n    CRect rectProgress,   \n    int nProgressTotal,   \n    int nProgressCurr,  \n    COLORREF clrBar,   \n    COLORREF clrProgressBarDest,   \n    COLORREF clrProgressText,   \n    BOOL bProgressText);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pStatusBar`  \n A pointer to status bar. This value is ignored.  \n  \n [in] `rectProgress`  \n The bounding rectangle of the progress bar in `pDC` coordinates.  \n  \n [in] `nProgressTotal`  \n The total progress value.  \n  \n [in] `nProgressCurr`  \n The current progress value.  \n  \n [in] `clrBar`  \n The start color. `CMFCBaseVisualManager` ignores this. Derived classes can use it for color gradients.  \n  \n [in] `clrProgressBarDest`  \n The end color. `CMFCBaseVisualManager` ignores this. Derived classes can use it for color gradients.  \n  \n [in] `clrProgressText`  \n Progress text color. `CMFCBaseVisualManager` ignores this. The text color is defined by `afxGlobalData.clrBtnText`.  \n  \n [in] `bProgressText`  \n Specifies whether to display progress text.  \n  \n### Return Value  \n `TRUE` if Theme API is enabled; otherwise `FALSE`.  \n  \n##  <a name=\"cmfcbasevisualmanager__fillrebarpane\"></a>  CMFCBaseVisualManager::FillReBarPane  \n Fills the background of the rebar control by using the current Windows theme.  \n  \n```  \nvirtual void FillReBarPane(\n    CDC* pDC,   \n    CBasePane* pBar,   \n    CRect rectClient);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `pBar`  \n A pointer to a pane whose background should be drawn.  \n  \n [in] `rectClient`  \n The bounding rectangle of the area to be filled.  \n  \n### Return Value  \n `TRUE` if Theme API is enabled; otherwise `FALSE`.  \n  \n##  <a name=\"cmfcbasevisualmanager__getstandardwindowstheme\"></a>  CMFCBaseVisualManager::GetStandardWindowsTheme  \n Gets the current Windows theme.  \n  \n```  \nvirtual WinXpTheme GetStandardWindowsTheme();\n```  \n  \n### Return Value  \n The currently selected Windows Theme color. Can be one of the following enumerated values:  \n  \n- `WinXpTheme_None` - there is no theme enabled.  \n  \n- `WinXpTheme_NonStandard` - non standard theme is selected (meaning a theme is selected, but none from the list below).  \n  \n- `WinXpTheme_Blue` - blue theme (Luna).  \n  \n- `WinXpTheme_Olive` - olive theme.  \n  \n- `WinXpTheme_Silver` - silver theme.  \n  \n##  <a name=\"cmfcbasevisualmanager__updatesystemcolors\"></a>  CMFCBaseVisualManager::UpdateSystemColors  \n Calls `OpenThemeData` to obtain handles for drawing various controls: windows, toolbars, buttons, and so on.  \n  \n```  \nvoid UpdateSystemColors();\n```  \n  \n### Remarks  \n For internal use only.  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)\n"}