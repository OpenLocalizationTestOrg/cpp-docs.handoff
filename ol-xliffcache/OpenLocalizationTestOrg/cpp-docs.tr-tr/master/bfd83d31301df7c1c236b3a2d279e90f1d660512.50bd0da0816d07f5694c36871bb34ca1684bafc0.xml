{"nodes":[{"pos":[12,41],"content":"ptr::Release | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ptr::Release | Microsoft Docs","pos":[0,29]}]},{"content":"ptr::Release","pos":[676,688]},{"content":"Releases all owned references on the COM object.","pos":[689,737]},{"content":"Syntax","pos":[746,752]},{"content":"Remarks","pos":[794,801]},{"content":"Calling this function releases all owned references on the COM object and sets the internal handle to the COM object to <ph id=\"ph1\">`nullptr`</ph>.","pos":[805,935],"source":"Calling this function releases all owned references on the COM object and sets the internal handle to the COM object to `nullptr`."},{"content":"If no other references on the COM object exist, it will be destroyed.","pos":[937,1006]},{"content":"Example","pos":[1015,1022]},{"content":"This example implements a CLR class that uses a <ph id=\"ph1\">`com::ptr`</ph> to wrap its private member <ph id=\"ph2\">`IXMLDOMDocument`</ph> object.","pos":[1026,1137],"source":"This example implements a CLR class that uses a `com::ptr` to wrap its private member `IXMLDOMDocument` object."},{"content":"The <ph id=\"ph1\">`ReplaceDocument`</ph> member function uses <ph id=\"ph2\">`Release`</ph> to release any prior document object before attaching the new document.","pos":[1139,1263],"source":"  The `ReplaceDocument` member function uses `Release` to release any prior document object before attaching the new document."},{"content":"Requirements","pos":[3329,3341]},{"pos":[3345,3379],"content":"<bpt id=\"p1\">**</bpt>Header file<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>msclr\\com\\ptr.h&gt;","source":"**Header file** \\<msclr\\com\\ptr.h>"},{"pos":[3386,3410],"content":"<bpt id=\"p1\">**</bpt>Namespace<ept id=\"p1\">**</ept> msclr::com","source":"**Namespace** msclr::com"},{"content":"See Also","pos":[3419,3427]},{"content":"ptr Members","pos":[3432,3443]},{"content":"ptr::Detach","pos":[3476,3487]}],"content":"---\ntitle: \"ptr::Release | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ptr.Release\"\n  - \"ptr::Release\"\n  - \"msclr.com.ptr.Release\"\n  - \"msclr::com::ptr::Release\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"Release method\"\nms.assetid: 7855781e-e4f6-4ad5-86a5-a81e2c3d90db\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ptr::Release\nReleases all owned references on the COM object.  \n  \n## Syntax  \n  \n```  \nvoid Release();  \n```  \n  \n## Remarks  \n Calling this function releases all owned references on the COM object and sets the internal handle to the COM object to `nullptr`.  If no other references on the COM object exist, it will be destroyed.  \n  \n## Example  \n This example implements a CLR class that uses a `com::ptr` to wrap its private member `IXMLDOMDocument` object.  The `ReplaceDocument` member function uses `Release` to release any prior document object before attaching the new document.  \n  \n```  \n// comptr_release.cpp  \n// compile with: /clr /link msxml2.lib  \n#include <msxml2.h>  \n#include <msclr\\com\\ptr.h>  \n  \n#import <msxml3.dll> raw_interfaces_only  \n  \nusing namespace System;  \nusing namespace System::Runtime::InteropServices;  \nusing namespace msclr;  \n  \n// a ref class that uses a com::ptr to contain an   \n// IXMLDOMDocument object  \nref class XmlDocument {  \npublic:  \n   // construct the internal com::ptr with a null interface  \n   // and use CreateInstance to fill it  \n   XmlDocument(String^ progid) {  \n      m_ptrDoc.CreateInstance(progid);     \n   }  \n  \n   // replace currently held COM object with another one  \n   void ReplaceDocument(IXMLDOMDocument* pDoc) {  \n      // release current document object  \n      m_ptrDoc.Release();  \n      // attach the new document object  \n      m_ptrDoc.Attach(pDoc);  \n   }  \n  \n   // note that the destructor will call the com::ptr destructor  \n   // and automatically release the reference to the COM object  \n  \nprivate:  \n   com::ptr<IXMLDOMDocument> m_ptrDoc;  \n};  \n  \n// unmanaged function that creates a raw XML DOM Document object  \nIXMLDOMDocument* CreateDocument() {  \n   IXMLDOMDocument* pDoc = NULL;  \n   Marshal::ThrowExceptionForHR(CoCreateInstance(CLSID_DOMDocument30, NULL,  \n      CLSCTX_INPROC_SERVER, IID_IXMLDOMDocument, (void**)&pDoc));  \n   return pDoc;  \n}  \n  \n// use the ref class to handle an XML DOM Document object  \nint main() {  \n   IXMLDOMDocument* pDoc = NULL;  \n  \n   try {  \n      // create the class from a progid string  \n      XmlDocument doc(\"Msxml2.DOMDocument.3.0\");  \n  \n      // get another document object from unmanaged function and  \n      // store it in place of the one held by our ref class  \n      pDoc = CreateDocument();  \n      doc.ReplaceDocument(pDoc);  \n      // no further need for raw object reference  \n      pDoc->Release();  \n      pDoc = NULL;  \n   }  \n   catch (Exception^ e) {  \n      Console::WriteLine(e);     \n   }  \n   finally {  \n      if (NULL != pDoc) {  \n         pDoc->Release();  \n      }  \n   }  \n}  \n```  \n  \n## Requirements  \n **Header file** \\<msclr\\com\\ptr.h>  \n  \n **Namespace** msclr::com  \n  \n## See Also  \n [ptr Members](../dotnet/ptr-members.md)   \n [ptr::Detach](../dotnet/ptr-detach.md)"}