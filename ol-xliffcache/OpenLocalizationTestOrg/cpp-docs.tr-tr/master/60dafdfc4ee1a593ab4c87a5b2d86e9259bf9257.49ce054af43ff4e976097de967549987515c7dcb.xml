{"nodes":[{"pos":[12,39],"content":"CSid Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CSid Class | Microsoft Docs","pos":[0,27]}]},{"content":"CSid Class","pos":[617,627]},{"pos":[628,696],"content":"This class is a wrapper for a <ph id=\"ph1\">`SID`</ph> (security identifier) structure.","source":"This class is a wrapper for a `SID` (security identifier) structure."},{"pos":[704,814],"content":"[!IMPORTANT]\n This class and its members cannot be used in applications that execute in the Windows Runtime.","leadings":["","> "],"nodes":[{"content":"This class and its members cannot be used in applications that execute in the Windows Runtime.","pos":[14,108]}]},{"content":"Syntax","pos":[823,829]},{"content":"Members","pos":[862,869]},{"content":"Public Typedefs","pos":[879,894]},{"content":"Name","pos":[901,905]},{"content":"Description","pos":[906,917]},{"content":"CSid::CSidArray","pos":[956,971]},{"pos":[991,1018],"content":"An array of <ph id=\"ph1\">`CSid`</ph> objects.","source":"An array of `CSid` objects."},{"content":"Public Constructors","pos":[1029,1048]},{"content":"Name","pos":[1055,1059]},{"content":"Description","pos":[1060,1071]},{"content":"CSid::CSid","pos":[1110,1120]},{"content":"The constructor.","pos":[1135,1151]},{"content":"CSid::~CSid","pos":[1157,1168]},{"content":"The destructor.","pos":[1188,1203]},{"content":"Public Methods","pos":[1214,1228]},{"content":"Name","pos":[1235,1239]},{"content":"Description","pos":[1240,1251]},{"content":"CSid::AccountName","pos":[1290,1307]},{"pos":[1329,1395],"content":"Returns the name of the account associated with the <ph id=\"ph1\">`CSid`</ph> object.","source":"Returns the name of the account associated with the `CSid` object."},{"content":"CSid::Domain","pos":[1401,1413]},{"pos":[1430,1495],"content":"Returns the name of the domain associated with the <ph id=\"ph1\">`CSid`</ph> object.","source":"Returns the name of the domain associated with the `CSid` object."},{"content":"CSid::EqualPrefix","pos":[1501,1518]},{"pos":[1540,1596],"content":"Tests <ph id=\"ph1\">`SID`</ph> (security identifier) prefixes for equality.","source":"Tests `SID` (security identifier) prefixes for equality."},{"content":"CSid::GetLength","pos":[1602,1617]},{"pos":[1637,1677],"content":"Returns the length of the <ph id=\"ph1\">`CSid`</ph> object.","source":"Returns the length of the `CSid` object."},{"content":"CSid::GetPSID","pos":[1683,1696]},{"pos":[1714,1753],"content":"Returns a pointer to a <ph id=\"ph1\">`SID`</ph> structure.","source":"Returns a pointer to a `SID` structure."},{"content":"CSid::GetPSID_IDENTIFIER_AUTHORITY","pos":[1759,1793]},{"pos":[1832,1896],"content":"Returns a pointer to the <bpt id=\"p1\">**</bpt>SID_IDENTIFIER_AUTHORITY<ept id=\"p1\">**</ept> structure.","source":"Returns a pointer to the **SID_IDENTIFIER_AUTHORITY** structure."},{"content":"CSid::GetSubAuthority","pos":[1902,1923]},{"pos":[1949,2005],"content":"Returns a specified subauthority in a <bpt id=\"p1\">**</bpt>SID<ept id=\"p1\">**</ept> structure.","source":"Returns a specified subauthority in a **SID** structure."},{"content":"CSid::GetSubAuthorityCount","pos":[2011,2037]},{"content":"Returns the subauthority count.","pos":[2068,2099]},{"content":"CSid::IsValid","pos":[2105,2118]},{"pos":[2136,2173],"content":"Tests the <ph id=\"ph1\">`CSid`</ph> object for validity.","source":"Tests the `CSid` object for validity."},{"content":"CSid::LoadAccount","pos":[2179,2196]},{"pos":[2218,2310],"content":"Updates the <ph id=\"ph1\">`CSid`</ph> object given the account name and domain, or an existing <ph id=\"ph2\">`SID`</ph> structure.","source":"Updates the `CSid` object given the account name and domain, or an existing `SID` structure."},{"content":"CSid::Sid","pos":[2316,2325]},{"content":"Returns the ID string.","pos":[2339,2361]},{"content":"CSid::SidNameUse","pos":[2367,2383]},{"pos":[2404,2460],"content":"Returns a description of the state of the <ph id=\"ph1\">`CSid`</ph> object.","source":"Returns a description of the state of the `CSid` object."},{"content":"Operators","pos":[2471,2480]},{"content":"operator =","pos":[2502,2512]},{"content":"Assignment operator.","pos":[2534,2554]},{"content":"operator const SID *","pos":[2560,2580]},{"pos":[2615,2671],"content":"Casts a <ph id=\"ph1\">`CSid`</ph> object to a pointer to a <ph id=\"ph2\">`SID`</ph> structure.","source":"Casts a `CSid` object to a pointer to a `SID` structure."},{"content":"Global Operators","pos":[2682,2698]},{"content":"operator ==","pos":[2720,2731]},{"content":"Tests two security descriptor objects for equality","pos":[2756,2806]},{"content":"operator !=","pos":[2812,2823]},{"content":"Tests two security descriptor objects for inequality","pos":[2846,2898]},{"content":"operator","pos":[2904,2912]},{"content":"Compares relative value of two security descriptor objects.","pos":[2938,2997]},{"content":"operator &gt;","pos":[3003,3013],"source":"operator >"},{"content":"Compares relative value of two security descriptor objects.","pos":[3036,3095]},{"content":"operator","pos":[3101,3109]},{"content":"Compares relative value of two security descriptor objects.","pos":[3139,3198]},{"content":"operator &gt;=","pos":[3204,3215],"source":"operator >="},{"content":"Compares relative value of two security descriptor objects.","pos":[3241,3300]},{"content":"Remarks","pos":[3310,3317]},{"pos":[3321,3414],"content":"The <ph id=\"ph1\">`SID`</ph> structure is a variable-length structure used to uniquely identify users or groups.","source":"The `SID` structure is a variable-length structure used to uniquely identify users or groups."},{"content":"Applications should not modify the <ph id=\"ph1\">`SID`</ph> structure directly, but instead use the methods provided in this wrapper class.","pos":[3421,3541],"source":"Applications should not modify the `SID` structure directly, but instead use the methods provided in this wrapper class."},{"content":"See also <bpt id=\"p1\">[</bpt>AtlGetOwnerSid<ept id=\"p1\">](http://msdn.microsoft.com/library/0e3a2606-74b8-4412-9803-bb437e22da85)</ept>, <bpt id=\"p2\">[</bpt>AtlSetGroupSid<ept id=\"p2\">](http://msdn.microsoft.com/library/83531d32-11ab-4a68-a3c6-1bfa54ab8dfa)</ept>, <bpt id=\"p3\">[</bpt>AtlGetGroupSid<ept id=\"p3\">](http://msdn.microsoft.com/library/8e7ec6b9-15c8-4a8a-977e-1e4c853d0be7)</ept>, and <bpt id=\"p4\">[</bpt>AtlSetOwnerSid<ept id=\"p4\">](http://msdn.microsoft.com/library/3a8abb76-1d2c-465d-a5e8-62a12a3c37f3)</ept>.","pos":[3542,3914],"source":" See also [AtlGetOwnerSid](http://msdn.microsoft.com/library/0e3a2606-74b8-4412-9803-bb437e22da85), [AtlSetGroupSid](http://msdn.microsoft.com/library/83531d32-11ab-4a68-a3c6-1bfa54ab8dfa), [AtlGetGroupSid](http://msdn.microsoft.com/library/8e7ec6b9-15c8-4a8a-977e-1e4c853d0be7), and [AtlSetOwnerSid](http://msdn.microsoft.com/library/3a8abb76-1d2c-465d-a5e8-62a12a3c37f3)."},{"pos":[3921,4121],"content":"For an introduction to the access control model in Windows, see <bpt id=\"p1\">[</bpt>Access Control<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa374860)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For an introduction to the access control model in Windows, see [Access Control](http://msdn.microsoft.com/library/windows/desktop/aa374860) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Requirements","pos":[4130,4142]},{"pos":[4146,4171],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsecurity.h","source":"**Header:** atlsecurity.h"},{"pos":[4215,4232],"content":"CSid::AccountName"},{"pos":[4236,4302],"content":"Returns the name of the account associated with the <ph id=\"ph1\">`CSid`</ph> object.","source":"Returns the name of the account associated with the `CSid` object."},{"content":"Return Value","pos":[4365,4377]},{"pos":[4381,4439],"content":"Returns the <ph id=\"ph1\">`LPCTSTR`</ph> pointing to the name of the account.","source":"Returns the `LPCTSTR` pointing to the name of the account."},{"content":"Remarks","pos":[4449,4456]},{"content":"This method attempts to find a name for the specified <ph id=\"ph1\">`SID`</ph> (security identifier).","pos":[4460,4542],"source":"This method attempts to find a name for the specified `SID` (security identifier)."},{"content":"For full details, see <bpt id=\"p1\">[</bpt>LookupAccountSid<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa379166)</ept>.","pos":[4543,4644],"source":" For full details, see [LookupAccountSid](http://msdn.microsoft.com/library/windows/desktop/aa379166)."},{"content":"If no account name for the <ph id=\"ph1\">`SID`</ph> can be found, <ph id=\"ph2\">`AccountName`</ph> returns an empty string.","pos":[4651,4736],"source":"If no account name for the `SID` can be found, `AccountName` returns an empty string."},{"content":"This can occur if a network timeout prevents this method from finding the name.","pos":[4737,4816]},{"content":"It also occurs for security identifiers with no corresponding account name, such as a logon <ph id=\"ph1\">`SID`</ph> that identifies a logon session.","pos":[4817,4947],"source":" It also occurs for security identifiers with no corresponding account name, such as a logon `SID` that identifies a logon session."},{"pos":[4984,4994],"content":"CSid::CSid"},{"content":"The constructor.","pos":[4998,5014]},{"content":"Parameters","pos":[5423,5433]},{"content":"An existing <ph id=\"ph1\">`CSid`</ph> object or <ph id=\"ph2\">`SID`</ph> (security identifier) structure.","pos":[5446,5513],"source":" An existing `CSid` object or `SID` (security identifier) structure."},{"content":"IdentifierAuthority","pos":[5521,5540]},{"content":"The authority.","pos":[5545,5559]},{"content":"nSubAuthorityCount","pos":[5567,5585]},{"content":"The subauthority count.","pos":[5590,5613]},{"content":"The account name.","pos":[5640,5657]},{"content":"The system name.","pos":[5679,5695]},{"content":"This string can be the name of a remote computer.","pos":[5696,5745]},{"content":"If this string is NULL, the local system is used instead.","pos":[5746,5803]},{"content":"A pointer to a <ph id=\"ph1\">`SID`</ph> structure.","pos":[5820,5851],"source":" A pointer to a `SID` structure."},{"content":"Remarks","pos":[5861,5868]},{"pos":[5872,6051],"content":"The constructor initializes the <ph id=\"ph1\">`CSid`</ph> object, setting an internal data member to <bpt id=\"p1\">*</bpt>SidTypeInvalid<ept id=\"p1\">*</ept>, or by copying the settings from an existing <ph id=\"ph2\">`CSid`</ph>, <ph id=\"ph3\">`SID`</ph>, or existing account.","source":"The constructor initializes the `CSid` object, setting an internal data member to *SidTypeInvalid*, or by copying the settings from an existing `CSid`, `SID`, or existing account."},{"pos":[6058,6178],"content":"If initialization fails, the constructor will throw a <bpt id=\"p1\">[</bpt>CAtlException Class<ept id=\"p1\">](../../atl/reference/catlexception-class.md)</ept>.","source":"If initialization fails, the constructor will throw a [CAtlException Class](../../atl/reference/catlexception-class.md)."},{"pos":[6220,6231],"content":"CSid::~CSid"},{"content":"The destructor.","pos":[6235,6250]},{"content":"Remarks","pos":[6298,6305]},{"content":"The destructor frees any resources acquired by the object.","pos":[6309,6367]},{"pos":[6409,6424],"content":"CSid::CSidArray"},{"pos":[6428,6490],"content":"An array of <bpt id=\"p1\">[</bpt>CSid<ept id=\"p1\">](../../atl/reference/csid-class.md)</ept> objects.","source":"An array of [CSid](../../atl/reference/csid-class.md) objects."},{"content":"Remarks","pos":[6548,6555]},{"content":"This typedef specifies the array type that can be used to retrieve security identifiers from an ACL (access-control list).","pos":[6559,6681]},{"content":"See <bpt id=\"p1\">[</bpt>CAcl::GetAclEntries<ept id=\"p1\">](../../atl/reference/cacl-class.md#cacl__getaclentries)</ept>.","pos":[6682,6763],"source":" See [CAcl::GetAclEntries](../../atl/reference/cacl-class.md#cacl__getaclentries)."},{"pos":[6802,6814],"content":"CSid::Domain"},{"pos":[6818,6883],"content":"Returns the name of the domain associated with the <ph id=\"ph1\">`CSid`</ph> object.","source":"Returns the name of the domain associated with the `CSid` object."},{"content":"Return Value","pos":[6941,6953]},{"pos":[6957,7002],"content":"Returns the <ph id=\"ph1\">`LPCTSTR`</ph> pointing to the domain.","source":"Returns the `LPCTSTR` pointing to the domain."},{"content":"Remarks","pos":[7012,7019]},{"content":"This method attempts to find a name for the specified <ph id=\"ph1\">`SID`</ph> (security identifier).","pos":[7023,7105],"source":"This method attempts to find a name for the specified `SID` (security identifier)."},{"content":"For full details, see <bpt id=\"p1\">[</bpt>LookupAccountSid<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa379166)</ept>.","pos":[7106,7207],"source":" For full details, see [LookupAccountSid](http://msdn.microsoft.com/library/windows/desktop/aa379166)."},{"content":"If no account name for the <ph id=\"ph1\">`SID`</ph> can be found, <bpt id=\"p1\">**</bpt>Domain<ept id=\"p1\">**</ept> returns the domain as an empty string.","pos":[7214,7310],"source":"If no account name for the `SID` can be found, **Domain** returns the domain as an empty string."},{"content":"This can occur if a network timeout prevents this method from finding the name.","pos":[7311,7390]},{"content":"It also occurs for security identifiers with no corresponding account name, such as a logon <ph id=\"ph1\">`SID`</ph> that identifies a logon session.","pos":[7391,7521],"source":" It also occurs for security identifiers with no corresponding account name, such as a logon `SID` that identifies a logon session."},{"pos":[7565,7582],"content":"CSid::EqualPrefix"},{"pos":[7586,7642],"content":"Tests <ph id=\"ph1\">`SID`</ph> (security identifier) prefixes for equality.","source":"Tests `SID` (security identifier) prefixes for equality."},{"content":"Parameters","pos":[7762,7772]},{"content":"The <ph id=\"ph1\">`SID`</ph> (security identifier) structure or <ph id=\"ph2\">`CSid`</ph> object to compare.","pos":[7785,7855],"source":" The `SID` (security identifier) structure or `CSid` object to compare."},{"content":"Return Value","pos":[7865,7877]},{"pos":[7881,7931],"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> on success, <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> on failure.","source":"Returns **true** on success, **false** on failure."},{"content":"Remarks","pos":[7941,7948]},{"pos":[7952,8109],"content":"See <bpt id=\"p1\">[</bpt>EqualPrefixSid<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa446621)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for more details.","source":"See [EqualPrefixSid](http://msdn.microsoft.com/library/windows/desktop/aa446621) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for more details."},{"pos":[8151,8166],"content":"CSid::GetLength"},{"pos":[8170,8210],"content":"Returns the length of the <ph id=\"ph1\">`CSid`</ph> object.","source":"Returns the length of the `CSid` object."},{"content":"Return Value","pos":[8265,8277]},{"pos":[8281,8330],"content":"Returns the length in bytes of the <ph id=\"ph1\">`CSid`</ph> object.","source":"Returns the length in bytes of the `CSid` object."},{"content":"Remarks","pos":[8340,8347]},{"content":"If the <ph id=\"ph1\">`CSid`</ph> structure is not valid, the return value is undefined.","pos":[8351,8419],"source":"If the `CSid` structure is not valid, the return value is undefined."},{"content":"Before calling <ph id=\"ph1\">`GetLength`</ph>, use the <bpt id=\"p1\">[</bpt>CSid::IsValid<ept id=\"p1\">](#csid__isvalid)</ept> member function to verify that <ph id=\"ph2\">`CSid`</ph> is valid.","pos":[8420,8535],"source":" Before calling `GetLength`, use the [CSid::IsValid](#csid__isvalid) member function to verify that `CSid` is valid."},{"pos":[8543,8641],"content":"[!NOTE]\n Under debug builds the function will cause an ASSERT if the `CSid` object is not valid.","leadings":["","> "],"nodes":[{"content":"Under debug builds the function will cause an ASSERT if the <ph id=\"ph1\">`CSid`</ph> object is not valid.","pos":[9,96],"source":" Under debug builds the function will cause an ASSERT if the `CSid` object is not valid."}]},{"pos":[8681,8694],"content":"CSid::GetPSID"},{"pos":[8698,8759],"content":"Returns a pointer to a <ph id=\"ph1\">`SID`</ph> (security identifier) structure.","source":"Returns a pointer to a `SID` (security identifier) structure."},{"content":"Return Value","pos":[8821,8833]},{"pos":[8837,8907],"content":"Returns the address of the <ph id=\"ph1\">`CSid`</ph> object's underlying <ph id=\"ph2\">`SID`</ph> structure.","source":"Returns the address of the `CSid` object's underlying `SID` structure."},{"pos":[8968,9002],"content":"CSid::GetPSID_IDENTIFIER_AUTHORITY"},{"pos":[9006,9070],"content":"Returns a pointer to the <bpt id=\"p1\">**</bpt>SID_IDENTIFIER_AUTHORITY<ept id=\"p1\">**</ept> structure.","source":"Returns a pointer to the **SID_IDENTIFIER_AUTHORITY** structure."},{"content":"Return Value","pos":[9171,9183]},{"content":"If the method succeeds, it returns the address of the <bpt id=\"p1\">**</bpt>SID_IDENTIFIER_AUTHORITY<ept id=\"p1\">**</ept> structure.","pos":[9187,9280],"source":"If the method succeeds, it returns the address of the **SID_IDENTIFIER_AUTHORITY** structure."},{"content":"If it fails, the return value is undefined.","pos":[9281,9324]},{"content":"Failure may occur if the <ph id=\"ph1\">`CSid`</ph> object is not valid, in which case the <bpt id=\"p1\">[</bpt>CSid::IsValid<ept id=\"p1\">](#csid__isvalid)</ept> method returns <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","pos":[9325,9453],"source":" Failure may occur if the `CSid` object is not valid, in which case the [CSid::IsValid](#csid__isvalid) method returns **false**."},{"content":"The function <ph id=\"ph1\">`GetLastError`</ph> can be called for extended error information.","pos":[9454,9527],"source":" The function `GetLastError` can be called for extended error information."},{"pos":[9535,9633],"content":"[!NOTE]\n Under debug builds the function will cause an ASSERT if the `CSid` object is not valid.","leadings":["","> "],"nodes":[{"content":"Under debug builds the function will cause an ASSERT if the <ph id=\"ph1\">`CSid`</ph> object is not valid.","pos":[9,96],"source":" Under debug builds the function will cause an ASSERT if the `CSid` object is not valid."}]},{"pos":[9681,9702],"content":"CSid::GetSubAuthority"},{"pos":[9706,9782],"content":"Returns a specified subauthority in a <ph id=\"ph1\">`SID`</ph> (security identifier) structure.","source":"Returns a specified subauthority in a `SID` (security identifier) structure."},{"content":"Parameters","pos":[9863,9873]},{"content":"nSubAuthority","pos":[9878,9891]},{"content":"The subauthority.","pos":[9896,9913]},{"content":"Return Value","pos":[9923,9935]},{"content":"Returns the subauthority referenced by <bpt id=\"p1\">*</bpt>nSubAuthority.<ept id=\"p1\">*</ept>","pos":[9939,9994],"source":"Returns the subauthority referenced by *nSubAuthority.*"},{"content":"The subauthority value is a relative identifier (RID).","pos":[9995,10049]},{"content":"Remarks","pos":[10059,10066]},{"content":"The <bpt id=\"p1\">*</bpt>nSubAuthority<ept id=\"p1\">*</ept> parameter specifies an index value identifying the subauthority array element the method will return.","pos":[10070,10191],"source":"The *nSubAuthority* parameter specifies an index value identifying the subauthority array element the method will return."},{"content":"The method performs no validation tests on this value.","pos":[10192,10246]},{"content":"An application can call <bpt id=\"p1\">[</bpt>CSid::GetSubAuthorityCount<ept id=\"p1\">](#csid__getsubauthoritycount)</ept> to discover the range of acceptable values.","pos":[10247,10372],"source":" An application can call [CSid::GetSubAuthorityCount](#csid__getsubauthoritycount) to discover the range of acceptable values."},{"pos":[10380,10478],"content":"[!NOTE]\n Under debug builds the function will cause an ASSERT if the `CSid` object is not valid.","leadings":["","> "],"nodes":[{"content":"Under debug builds the function will cause an ASSERT if the <ph id=\"ph1\">`CSid`</ph> object is not valid.","pos":[9,96],"source":" Under debug builds the function will cause an ASSERT if the `CSid` object is not valid."}]},{"pos":[10531,10557],"content":"CSid::GetSubAuthorityCount"},{"content":"Returns the subauthority count.","pos":[10561,10592]},{"content":"Return Value","pos":[10659,10671]},{"content":"If the method succeeds, the return value is the subauthority count.","pos":[10675,10742]},{"content":"If the method fails, the return value is undefined.","pos":[10749,10800]},{"content":"The method fails if the <ph id=\"ph1\">`CSid`</ph> object is invalid.","pos":[10801,10850],"source":" The method fails if the `CSid` object is invalid."},{"content":"To get extended error information, call <ph id=\"ph1\">`GetLastError`</ph>.","pos":[10851,10906],"source":" To get extended error information, call `GetLastError`."},{"pos":[10914,11012],"content":"[!NOTE]\n Under debug builds the function will cause an ASSERT if the `CSid` object is not valid.","leadings":["","> "],"nodes":[{"content":"Under debug builds the function will cause an ASSERT if the <ph id=\"ph1\">`CSid`</ph> object is not valid.","pos":[9,96],"source":" Under debug builds the function will cause an ASSERT if the `CSid` object is not valid."}]},{"pos":[11052,11065],"content":"CSid::IsValid"},{"pos":[11069,11106],"content":"Tests the <ph id=\"ph1\">`CSid`</ph> object for validity.","source":"Tests the `CSid` object for validity."},{"content":"Return Value","pos":[11159,11171]},{"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the <ph id=\"ph1\">`CSid`</ph> object is valid, <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if not.","pos":[11175,11240],"source":"Returns **true** if the `CSid` object is valid, **false** if not."},{"content":"There is no extended error information for this method; do not call <ph id=\"ph1\">`GetLastError`</ph>.","pos":[11241,11324],"source":" There is no extended error information for this method; do not call `GetLastError`."},{"content":"Remarks","pos":[11334,11341]},{"pos":[11345,11519],"content":"The <ph id=\"ph1\">`IsValid`</ph> method validates the <ph id=\"ph2\">`CSid`</ph> object by verifying that the revision number is within a known range and that the number of subauthorities is less than the maximum.","source":"The `IsValid` method validates the `CSid` object by verifying that the revision number is within a known range and that the number of subauthorities is less than the maximum."},{"pos":[11563,11580],"content":"CSid::LoadAccount"},{"pos":[11584,11696],"content":"Updates the <ph id=\"ph1\">`CSid`</ph> object given the account name and domain, or an existing SID (security identifier) structure.","source":"Updates the `CSid` object given the account name and domain, or an existing SID (security identifier) structure."},{"content":"Parameters","pos":[11879,11889]},{"content":"The account name.","pos":[11913,11930]},{"content":"The system name.","pos":[11952,11968]},{"content":"This string can be the name of a remote computer.","pos":[11969,12018]},{"content":"If this string is NULL, the local system is used instead.","pos":[12019,12076]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>SID<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa379594\\(v=vs.85\\).aspx)</ept> structure.","pos":[12093,12200],"source":" A pointer to a [SID](http://msdn.microsoft.com/library/windows/desktop/aa379594\\(v=vs.85\\).aspx) structure."},{"content":"Return Value","pos":[12210,12222]},{"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> on success, <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> on failure.","pos":[12226,12276],"source":"Returns **true** on success, **false** on failure."},{"content":"To get extended error information, call <ph id=\"ph1\">`GetLastError`</ph>.","pos":[12277,12332],"source":" To get extended error information, call `GetLastError`."},{"content":"Remarks","pos":[12342,12349]},{"content":"attempts to find a security identifier for the specified name.","pos":[12367,12429]},{"content":"See <bpt id=\"p1\">[</bpt>LookupAccountSid<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa379166\\(v=vs.85\\).aspx)</ept> for more details.","pos":[12430,12546],"source":" See [LookupAccountSid](http://msdn.microsoft.com/library/windows/desktop/aa379166\\(v=vs.85\\).aspx) for more details."},{"pos":[12590,12606],"content":"CSid::operator ="},{"content":"Assignment operator.","pos":[12610,12630]},{"content":"Parameters","pos":[12749,12759]},{"content":"The <ph id=\"ph1\">`SID`</ph> (security identifier) or <ph id=\"ph2\">`CSid`</ph> to assign to the <ph id=\"ph3\">`CSid`</ph> object.","pos":[12772,12845],"source":" The `SID` (security identifier) or `CSid` to assign to the `CSid` object."},{"content":"Return Value","pos":[12855,12867]},{"pos":[12871,12920],"content":"Returns a reference to the updated <ph id=\"ph1\">`CSid`</ph> object.","source":"Returns a reference to the updated `CSid` object."},{"pos":[12967,12984],"content":"CSid::operator =="},{"content":"Tests two security descriptor objects for equality.","pos":[12988,13039]},{"content":"Parameters","pos":[13130,13140]},{"content":"The <ph id=\"ph1\">`SID`</ph> (security identifier) or <ph id=\"ph2\">`CSid`</ph> that appears on the left side of the == operator.","pos":[13153,13244],"source":" The `SID` (security identifier) or `CSid` that appears on the left side of the == operator."},{"content":"The <ph id=\"ph1\">`SID`</ph> (security identifier) or <ph id=\"ph2\">`CSid`</ph> that appears on the right side of the == operator.","pos":[13260,13352],"source":" The `SID` (security identifier) or `CSid` that appears on the right side of the == operator."},{"content":"Return Value","pos":[13362,13374]},{"pos":[13378,13446],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the security descriptors are equal, otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the security descriptors are equal, otherwise **false**."},{"pos":[13491,13508],"content":"CSid::operator !="},{"content":"Tests two security descriptor objects for inequality.","pos":[13512,13565]},{"content":"Parameters","pos":[13656,13666]},{"content":"The <ph id=\"ph1\">`SID`</ph> (security identifier) or <ph id=\"ph2\">`CSid`</ph> that appears on the left side of the != operator.","pos":[13679,13770],"source":" The `SID` (security identifier) or `CSid` that appears on the left side of the != operator."},{"content":"The <ph id=\"ph1\">`SID`</ph> (security identifier) or <ph id=\"ph2\">`CSid`</ph> that appears on the right side of the != operator.","pos":[13786,13878],"source":" The `SID` (security identifier) or `CSid` that appears on the right side of the != operator."},{"content":"Return Value","pos":[13888,13900]},{"pos":[13904,13976],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the security descriptors are not equal, otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the security descriptors are not equal, otherwise **false**."},{"pos":[14020,14034],"content":"CSid::operator"},{"content":"Compares relative value of two security descriptor objects.","pos":[14043,14102]},{"content":"Parameters","pos":[14192,14202]},{"content":"The <ph id=\"ph1\">`SID`</ph> (security identifier) or <ph id=\"ph2\">`CSid`</ph> that appears on the left side of the != operator.","pos":[14215,14306],"source":" The `SID` (security identifier) or `CSid` that appears on the left side of the != operator."},{"content":"The <ph id=\"ph1\">`SID`</ph> (security identifier) or <ph id=\"ph2\">`CSid`</ph> that appears on the right side of the != operator.","pos":[14322,14414],"source":" The `SID` (security identifier) or `CSid` that appears on the right side of the != operator."},{"content":"Return Value","pos":[14424,14436]},{"pos":[14440,14498],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if <ph id=\"ph1\">`lhs`</ph> is less than <ph id=\"ph2\">`rhs`</ph>, otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if `lhs` is less than `rhs`, otherwise **false**."},{"pos":[14546,14560],"content":"CSid::operator"},{"content":"Compares relative value of two security descriptor objects.","pos":[14570,14629]},{"content":"Parameters","pos":[14719,14729]},{"content":"The <ph id=\"ph1\">`SID`</ph> (security identifier) or <ph id=\"ph2\">`CSid`</ph> that appears on the left side of the != operator.","pos":[14742,14833],"source":" The `SID` (security identifier) or `CSid` that appears on the left side of the != operator."},{"content":"The <ph id=\"ph1\">`SID`</ph> (security identifier) or <ph id=\"ph2\">`CSid`</ph> that appears on the right side of the != operator.","pos":[14849,14941],"source":" The `SID` (security identifier) or `CSid` that appears on the right side of the != operator."},{"content":"Return Value","pos":[14951,14963]},{"pos":[14967,15037],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if <ph id=\"ph1\">`lhs`</ph> is less than or equal to <ph id=\"ph2\">`rhs`</ph>, otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if `lhs` is less than or equal to `rhs`, otherwise **false**."},{"pos":[15081,15095],"content":"CSid::operator"},{"content":"Compares relative value of two security descriptor objects.","pos":[15104,15163]},{"content":"Parameters","pos":[15253,15263]},{"content":"The <ph id=\"ph1\">`SID`</ph> (security identifier) or <ph id=\"ph2\">`CSid`</ph> that appears on the left side of the != operator.","pos":[15276,15367],"source":" The `SID` (security identifier) or `CSid` that appears on the left side of the != operator."},{"content":"The <ph id=\"ph1\">`SID`</ph> (security identifier) or <ph id=\"ph2\">`CSid`</ph> that appears on the right side of the != operator.","pos":[15383,15475],"source":" The `SID` (security identifier) or `CSid` that appears on the right side of the != operator."},{"content":"Return Value","pos":[15485,15497]},{"pos":[15501,15562],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if <ph id=\"ph1\">`lhs`</ph> is greater than <ph id=\"ph2\">`rhs`</ph>, otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if `lhs` is greater than `rhs`, otherwise **false**."},{"pos":[15610,15624],"content":"CSid::operator"},{"content":"Compares relative value of two security descriptor objects.","pos":[15634,15693]},{"content":"Parameters","pos":[15784,15794]},{"content":"The <ph id=\"ph1\">`SID`</ph> (security identifier) or <ph id=\"ph2\">`CSid`</ph> that appears on the left side of the != operator.","pos":[15807,15898],"source":" The `SID` (security identifier) or `CSid` that appears on the left side of the != operator."},{"content":"The <ph id=\"ph1\">`SID`</ph> (security identifier) or <ph id=\"ph2\">`CSid`</ph> that appears on the right side of the != operator.","pos":[15914,16006],"source":" The `SID` (security identifier) or `CSid` that appears on the right side of the != operator."},{"content":"Return Value","pos":[16016,16028]},{"pos":[16032,16105],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if <ph id=\"ph1\">`lhs`</ph> is greater than or equal to <ph id=\"ph2\">`rhs`</ph>, otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if `lhs` is greater than or equal to `rhs`, otherwise **false**."},{"pos":[16162,16188],"content":"CSid::operator const SID *"},{"pos":[16192,16270],"content":"Casts a <ph id=\"ph1\">`CSid`</ph> object to a pointer to a <ph id=\"ph2\">`SID`</ph> (security identifier) structure.","source":"Casts a `CSid` object to a pointer to a `SID` (security identifier) structure."},{"content":"```operator const SID *() const throw(...);","pos":[16276,16319]},{"content":"LPCTSTR Sid() const throw(...);","pos":[16508,16539]},{"content":"SID_NAME_USE SidNameUse() const throw();","pos":[17012,17052]}],"content":"---\ntitle: \"CSid Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CSid\"\n  - \"ATL::CSid\"\n  - \"ATL.CSid\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CSid class\"\nms.assetid: be58b7ca-5958-49c3-a833-ca341aaaf753\ncaps.latest.revision: 24\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CSid Class\nThis class is a wrapper for a `SID` (security identifier) structure.  \n  \n> [!IMPORTANT]\n>  This class and its members cannot be used in applications that execute in the Windows Runtime.  \n  \n## Syntax  \n  \n```\nclass CSid\n```  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CSid::CSidArray](#csid__csidarray)|An array of `CSid` objects.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CSid::CSid](#csid__csid)|The constructor.|  \n|[CSid::~CSid](#csid___dtorcsid)|The destructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CSid::AccountName](#csid__accountname)|Returns the name of the account associated with the `CSid` object.|  \n|[CSid::Domain](#csid__domain)|Returns the name of the domain associated with the `CSid` object.|  \n|[CSid::EqualPrefix](#csid__equalprefix)|Tests `SID` (security identifier) prefixes for equality.|  \n|[CSid::GetLength](#csid__getlength)|Returns the length of the `CSid` object.|  \n|[CSid::GetPSID](#csid__getpsid)|Returns a pointer to a `SID` structure.|  \n|[CSid::GetPSID_IDENTIFIER_AUTHORITY](#csid__getpsid_identifier_authority)|Returns a pointer to the **SID_IDENTIFIER_AUTHORITY** structure.|  \n|[CSid::GetSubAuthority](#csid__getsubauthority)|Returns a specified subauthority in a **SID** structure.|  \n|[CSid::GetSubAuthorityCount](#csid__getsubauthoritycount)|Returns the subauthority count.|  \n|[CSid::IsValid](#csid__isvalid)|Tests the `CSid` object for validity.|  \n|[CSid::LoadAccount](#csid__loadaccount)|Updates the `CSid` object given the account name and domain, or an existing `SID` structure.|  \n|[CSid::Sid](#csid__sid)|Returns the ID string.|  \n|[CSid::SidNameUse](#csid__sidnameuse)|Returns a description of the state of the `CSid` object.|  \n  \n### Operators  \n  \n|||  \n|-|-|  \n|[operator =](#csid__operator_eq)|Assignment operator.|  \n|[operator const SID *](#csid__operator_const_sid__star)|Casts a `CSid` object to a pointer to a `SID` structure.|  \n  \n### Global Operators  \n  \n|||  \n|-|-|  \n|[operator ==](#csid__operator_eq_eq)|Tests two security descriptor objects for equality|  \n|[operator !=](#csid__operator_neq)|Tests two security descriptor objects for inequality|  \n|[operator \\<](#csid__operator_lt_)|Compares relative value of two security descriptor objects.|  \n|[operator >](#csid__operator_gt_)|Compares relative value of two security descriptor objects.|  \n|[operator \\<=](#csid__operator_lt__eq)|Compares relative value of two security descriptor objects.|  \n|[operator >=](#csid__operator_gt__eq)|Compares relative value of two security descriptor objects.|  \n  \n## Remarks  \n The `SID` structure is a variable-length structure used to uniquely identify users or groups.  \n  \n Applications should not modify the `SID` structure directly, but instead use the methods provided in this wrapper class. See also [AtlGetOwnerSid](http://msdn.microsoft.com/library/0e3a2606-74b8-4412-9803-bb437e22da85), [AtlSetGroupSid](http://msdn.microsoft.com/library/83531d32-11ab-4a68-a3c6-1bfa54ab8dfa), [AtlGetGroupSid](http://msdn.microsoft.com/library/8e7ec6b9-15c8-4a8a-977e-1e4c853d0be7), and [AtlSetOwnerSid](http://msdn.microsoft.com/library/3a8abb76-1d2c-465d-a5e8-62a12a3c37f3).  \n  \n For an introduction to the access control model in Windows, see [Access Control](http://msdn.microsoft.com/library/windows/desktop/aa374860) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n## Requirements  \n **Header:** atlsecurity.h  \n  \n##  <a name=\"csid__accountname\"></a>  CSid::AccountName  \n Returns the name of the account associated with the `CSid` object.  \n  \n```\nLPCTSTR AccountName() const throw(...);\n```  \n  \n### Return Value  \n Returns the `LPCTSTR` pointing to the name of the account.  \n  \n### Remarks  \n This method attempts to find a name for the specified `SID` (security identifier). For full details, see [LookupAccountSid](http://msdn.microsoft.com/library/windows/desktop/aa379166).  \n  \n If no account name for the `SID` can be found, `AccountName` returns an empty string. This can occur if a network timeout prevents this method from finding the name. It also occurs for security identifiers with no corresponding account name, such as a logon `SID` that identifies a logon session.  \n  \n##  <a name=\"csid__csid\"></a>  CSid::CSid  \n The constructor.  \n  \n```\nCSid() throw();\nCSid(const SID& rhs) throw(...);\nCSid(const CSid& rhs) throw(...);\n\nCSid(\n    const SID_IDENTIFIER_AUTHORITY& IdentifierAuthority,\n    BYTE nSubAuthorityCount,\n    ...) throw(...);\n\n    explicit CSid(\n        LPCTSTR pszAccountName,\n        LPCTSTR pszSystem = NULL) throw(...);\n\n    explicit CSid(\n        const SID* pSid,\n        LPCTSTR pszSystem = NULL) throw(...);\n```  \n  \n### Parameters  \n `rhs`  \n An existing `CSid` object or `SID` (security identifier) structure.  \n  \n *IdentifierAuthority*  \n The authority.  \n  \n *nSubAuthorityCount*  \n The subauthority count.  \n  \n `pszAccountName`  \n The account name.  \n  \n `pszSystem`  \n The system name. This string can be the name of a remote computer. If this string is NULL, the local system is used instead.  \n  \n `pSid`  \n A pointer to a `SID` structure.  \n  \n### Remarks  \n The constructor initializes the `CSid` object, setting an internal data member to *SidTypeInvalid*, or by copying the settings from an existing `CSid`, `SID`, or existing account.  \n  \n If initialization fails, the constructor will throw a [CAtlException Class](../../atl/reference/catlexception-class.md).  \n  \n##  <a name=\"csid___dtorcsid\"></a>  CSid::~CSid  \n The destructor.  \n  \n```\nvirtual ~CSid() throw();\n```  \n  \n### Remarks  \n The destructor frees any resources acquired by the object.  \n  \n##  <a name=\"csid__csidarray\"></a>  CSid::CSidArray  \n An array of [CSid](../../atl/reference/csid-class.md) objects.  \n  \n```\ntypedef CAtlArray<CSid> CSidArray;\n```  \n  \n### Remarks  \n This typedef specifies the array type that can be used to retrieve security identifiers from an ACL (access-control list). See [CAcl::GetAclEntries](../../atl/reference/cacl-class.md#cacl__getaclentries).  \n  \n##  <a name=\"csid__domain\"></a>  CSid::Domain  \n Returns the name of the domain associated with the `CSid` object.  \n  \n```\nLPCTSTR Domain() const throw(...);\n```  \n  \n### Return Value  \n Returns the `LPCTSTR` pointing to the domain.  \n  \n### Remarks  \n This method attempts to find a name for the specified `SID` (security identifier). For full details, see [LookupAccountSid](http://msdn.microsoft.com/library/windows/desktop/aa379166).  \n  \n If no account name for the `SID` can be found, **Domain** returns the domain as an empty string. This can occur if a network timeout prevents this method from finding the name. It also occurs for security identifiers with no corresponding account name, such as a logon `SID` that identifies a logon session.  \n  \n##  <a name=\"csid__equalprefix\"></a>  CSid::EqualPrefix  \n Tests `SID` (security identifier) prefixes for equality.  \n  \n```\nbool EqualPrefix(const SID& rhs) const throw();\nbool EqualPrefix(const CSid& rhs) const throw();\n```  \n  \n### Parameters  \n `rhs`  \n The `SID` (security identifier) structure or `CSid` object to compare.  \n  \n### Return Value  \n Returns **true** on success, **false** on failure.  \n  \n### Remarks  \n See [EqualPrefixSid](http://msdn.microsoft.com/library/windows/desktop/aa446621) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for more details.  \n  \n##  <a name=\"csid__getlength\"></a>  CSid::GetLength  \n Returns the length of the `CSid` object.  \n  \n```\nUINT GetLength() const throw();\n```  \n  \n### Return Value  \n Returns the length in bytes of the `CSid` object.  \n  \n### Remarks  \n If the `CSid` structure is not valid, the return value is undefined. Before calling `GetLength`, use the [CSid::IsValid](#csid__isvalid) member function to verify that `CSid` is valid.  \n  \n> [!NOTE]\n>  Under debug builds the function will cause an ASSERT if the `CSid` object is not valid.  \n  \n##  <a name=\"csid__getpsid\"></a>  CSid::GetPSID  \n Returns a pointer to a `SID` (security identifier) structure.  \n  \n```\nconst SID* GetPSID() const throw(...);\n```  \n  \n### Return Value  \n Returns the address of the `CSid` object's underlying `SID` structure.  \n  \n##  <a name=\"csid__getpsid_identifier_authority\"></a>  CSid::GetPSID_IDENTIFIER_AUTHORITY  \n Returns a pointer to the **SID_IDENTIFIER_AUTHORITY** structure.  \n  \n```\nconst SID_IDENTIFIER_AUTHORITY* GetPSID_IDENTIFIER_AUTHORITY() const throw();\n```  \n  \n### Return Value  \n If the method succeeds, it returns the address of the **SID_IDENTIFIER_AUTHORITY** structure. If it fails, the return value is undefined. Failure may occur if the `CSid` object is not valid, in which case the [CSid::IsValid](#csid__isvalid) method returns **false**. The function `GetLastError` can be called for extended error information.  \n  \n> [!NOTE]\n>  Under debug builds the function will cause an ASSERT if the `CSid` object is not valid.  \n  \n##  <a name=\"csid__getsubauthority\"></a>  CSid::GetSubAuthority  \n Returns a specified subauthority in a `SID` (security identifier) structure.  \n  \n```\nDWORD GetSubAuthority(DWORD nSubAuthority) const throw();\n```  \n  \n### Parameters  \n *nSubAuthority*  \n The subauthority.  \n  \n### Return Value  \n Returns the subauthority referenced by *nSubAuthority.* The subauthority value is a relative identifier (RID).  \n  \n### Remarks  \n The *nSubAuthority* parameter specifies an index value identifying the subauthority array element the method will return. The method performs no validation tests on this value. An application can call [CSid::GetSubAuthorityCount](#csid__getsubauthoritycount) to discover the range of acceptable values.  \n  \n> [!NOTE]\n>  Under debug builds the function will cause an ASSERT if the `CSid` object is not valid.  \n  \n##  <a name=\"csid__getsubauthoritycount\"></a>  CSid::GetSubAuthorityCount  \n Returns the subauthority count.  \n  \n```\nUCHAR GetSubAuthorityCount() const throw();\n```  \n  \n### Return Value  \n If the method succeeds, the return value is the subauthority count.  \n  \n If the method fails, the return value is undefined. The method fails if the `CSid` object is invalid. To get extended error information, call `GetLastError`.  \n  \n> [!NOTE]\n>  Under debug builds the function will cause an ASSERT if the `CSid` object is not valid.  \n  \n##  <a name=\"csid__isvalid\"></a>  CSid::IsValid  \n Tests the `CSid` object for validity.  \n  \n```\nbool IsValid() const throw();\n```  \n  \n### Return Value  \n Returns **true** if the `CSid` object is valid, **false** if not. There is no extended error information for this method; do not call `GetLastError`.  \n  \n### Remarks  \n The `IsValid` method validates the `CSid` object by verifying that the revision number is within a known range and that the number of subauthorities is less than the maximum.  \n  \n##  <a name=\"csid__loadaccount\"></a>  CSid::LoadAccount  \n Updates the `CSid` object given the account name and domain, or an existing SID (security identifier) structure.  \n  \n```\nbool LoadAccount(LPCTSTR pszAccountName,\n    LPCTSTR pszSystem = NULL) throw(...);\n\nbool LoadAccount(const SID* pSid,\n    LPCTSTR pszSystem = NULL) throw(...);\n```  \n  \n### Parameters  \n `pszAccountName`  \n The account name.  \n  \n `pszSystem`  \n The system name. This string can be the name of a remote computer. If this string is NULL, the local system is used instead.  \n  \n `pSid`  \n A pointer to a [SID](http://msdn.microsoft.com/library/windows/desktop/aa379594\\(v=vs.85\\).aspx) structure.  \n  \n### Return Value  \n Returns **true** on success, **false** on failure. To get extended error information, call `GetLastError`.  \n  \n### Remarks  \n `LoadAccount` attempts to find a security identifier for the specified name. See [LookupAccountSid](http://msdn.microsoft.com/library/windows/desktop/aa379166\\(v=vs.85\\).aspx) for more details.  \n  \n##  <a name=\"csid__operator_eq\"></a>  CSid::operator =  \n Assignment operator.  \n  \n```\nCSid& operator= (const CSid& rhs) throw(...);\n\n    CSid& operator= (const SID& rhs) throw(...);\n```  \n  \n### Parameters  \n `rhs`  \n The `SID` (security identifier) or `CSid` to assign to the `CSid` object.  \n  \n### Return Value  \n Returns a reference to the updated `CSid` object.  \n  \n##  <a name=\"csid__operator_eq_eq\"></a>  CSid::operator ==  \n Tests two security descriptor objects for equality.  \n  \n```\nbool operator==(\n    const CSid& lhs,\n    const CSid& rhs) throw();\n```  \n  \n### Parameters  \n `lhs`  \n The `SID` (security identifier) or `CSid` that appears on the left side of the == operator.  \n  \n `rhs`  \n The `SID` (security identifier) or `CSid` that appears on the right side of the == operator.  \n  \n### Return Value  \n **true** if the security descriptors are equal, otherwise **false**.  \n  \n##  <a name=\"csid__operator_neq\"></a>  CSid::operator !=  \n Tests two security descriptor objects for inequality.  \n  \n```\nbool operator!=(\n    const CSid& lhs,\n    const CSid& rhs) throw();\n```  \n  \n### Parameters  \n `lhs`  \n The `SID` (security identifier) or `CSid` that appears on the left side of the != operator.  \n  \n `rhs`  \n The `SID` (security identifier) or `CSid` that appears on the right side of the != operator.  \n  \n### Return Value  \n **true** if the security descriptors are not equal, otherwise **false**.  \n  \n##  <a name=\"csid__operator_lt\"></a>  CSid::operator &lt;  \n Compares relative value of two security descriptor objects.  \n  \n```\nbool operator<(\n    const CSid& lhs,\n    const CSid& rhs) throw();\n```  \n  \n### Parameters  \n `lhs`  \n The `SID` (security identifier) or `CSid` that appears on the left side of the != operator.  \n  \n `rhs`  \n The `SID` (security identifier) or `CSid` that appears on the right side of the != operator.  \n  \n### Return Value  \n **true** if `lhs` is less than `rhs`, otherwise **false**.  \n  \n##  <a name=\"csid__operator_lt__eq\"></a>  CSid::operator &lt;=  \n Compares relative value of two security descriptor objects.  \n  \n```\nbool operator<(\n    const CSid& lhs,\n    const CSid& rhs) throw();\n```  \n  \n### Parameters  \n `lhs`  \n The `SID` (security identifier) or `CSid` that appears on the left side of the != operator.  \n  \n `rhs`  \n The `SID` (security identifier) or `CSid` that appears on the right side of the != operator.  \n  \n### Return Value  \n **true** if `lhs` is less than or equal to `rhs`, otherwise **false**.  \n  \n##  <a name=\"csid__operator_gt\"></a>  CSid::operator &gt;  \n Compares relative value of two security descriptor objects.  \n  \n```\nbool operator<(\n    const CSid& lhs,\n    const CSid& rhs) throw();\n```  \n  \n### Parameters  \n `lhs`  \n The `SID` (security identifier) or `CSid` that appears on the left side of the != operator.  \n  \n `rhs`  \n The `SID` (security identifier) or `CSid` that appears on the right side of the != operator.  \n  \n### Return Value  \n **true** if `lhs` is greater than `rhs`, otherwise **false**.  \n  \n##  <a name=\"csid__operator_gt__eq\"></a>  CSid::operator &gt;=  \n Compares relative value of two security descriptor objects.  \n  \n```\nbool operator<(\n    const CSid& lhs,\n    const CSid& rhs) throw());\n```  \n  \n### Parameters  \n `lhs`  \n The `SID` (security identifier) or `CSid` that appears on the left side of the != operator.  \n  \n `rhs`  \n The `SID` (security identifier) or `CSid` that appears on the right side of the != operator.  \n  \n### Return Value  \n **true** if `lhs` is greater than or equal to `rhs`, otherwise **false**.  \n  \n##  <a name=\"csid__operator_const_sid__star\"></a>  CSid::operator const SID *  \n Casts a `CSid` object to a pointer to a `SID` (security identifier) structure.  \n  \n```operator const SID *() const throw(...);\n```  \n  \n### Remarks  \n Returns the address of the `SID` structure.  \n  \n##  <a name=\"csid__sid\"></a>  CSid::Sid  \n Returns the `SID` (security identifier) structure as a string.  \n  \n```\nLPCTSTR Sid() const throw(...);\n```  \n  \n### Return Value  \n Returns the `SID` structure as a string in a format suitable for display, storage, or transmission. Equivalent to [ConvertSidToStringSid](http://msdn.microsoft.com/library/windows/desktop/aa376399), although this function is only available on Windows 2000 or later and so is emulated for earlier operating systems.  \n  \n##  <a name=\"csid__sidnameuse\"></a>  CSid::SidNameUse  \n Returns a description of the state of the `CSid` object.  \n  \n```\nSID_NAME_USE SidNameUse() const throw();\n```  \n  \n### Return Value  \n Returns the value of the data member that stores a value describing the state of the `CSid` object.  \n  \n|Value|Description|  \n|-----------|-----------------|  \n|SidTypeUser|Indicates a user `SID` (security identifier).|  \n|SidTypeGroup|Indicates a group `SID`.|  \n|SidTypeDomain|Indicates a domain `SID`.|  \n|SidTypeAlias|Indicates an alias `SID`.|  \n|SidTypeWellKnownGroup|Indicates a `SID` for a well-known group.|  \n|SidTypeDeletedAccount|Indicates a `SID` for a deleted account.|  \n|SidTypeInvalid|Indicates an invalid `SID`.|  \n|SidTypeUnknown|Indicates an unknown `SID` type.|  \n|SidTypeComputer|Indicates a `SID` for a computer.|  \n  \n### Remarks  \n Call [CSid::LoadAccount](#csid__loadaccount) to update the `CSid` object before calling `SidNameUse` to return its state. `SidNameUse` does not change the state of the object (by calling to **LookupAccountName** or **LookupAccountSid**), but only returns the current state.  \n  \n## See Also  \n [Security Sample](../../visual-cpp-samples.md)   \n [Class Overview](../../atl/atl-class-overview.md)   \n [Security Global Functions](../../atl/reference/security-global-functions.md)   \n [Operators](../../atl/reference/atl-operators.md)\n\n\n\n\n\n\n\n\n\n"}