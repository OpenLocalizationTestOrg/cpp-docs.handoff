{"nodes":[{"pos":[12,47],"content":"__alignof Operator | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"__alignof Operator | Microsoft Docs","pos":[0,35]}]},{"content":"__alignof Operator","pos":[787,805]},{"content":"C++11 introduces the <ph id=\"ph1\">`alignof`</ph> operator that returns the alignment, in bytes, of the specified type.","pos":[806,906],"source":"C++11 introduces the `alignof` operator that returns the alignment, in bytes, of the specified type."},{"content":"For maximum portability, you should use the alignof operator instead of the Microsoft-specific __alignof operator.","pos":[907,1021]},{"content":"Microsoft Specific","pos":[1030,1048]},{"pos":[1057,1138],"content":"Returns a value of type <bpt id=\"p1\">**</bpt>size_t<ept id=\"p1\">**</ept> that is the alignment requirement of the type.","source":"Returns a value of type **size_t** that is the alignment requirement of the type."},{"content":"Syntax","pos":[1147,1153]},{"content":"Remarks","pos":[1216,1223]},{"content":"For example:","pos":[1227,1239]},{"content":"Expression","pos":[1246,1256]},{"content":"Value","pos":[1257,1262]},{"content":"__alignof( char )","pos":[1302,1319]},{"content":"1","pos":[1322,1323]},{"content":"__alignof( short )","pos":[1330,1348]},{"content":"2","pos":[1351,1352]},{"content":"__alignof( int )","pos":[1359,1375]},{"content":"4","pos":[1378,1379]},{"content":"__alignof( <ph id=\"ph1\">\\_</ph>_int64 )","pos":[1386,1407],"source":"__alignof( \\__int64 )"},{"content":"8","pos":[1410,1411]},{"content":"__alignof( float )","pos":[1418,1436]},{"content":"4","pos":[1439,1440]},{"content":"__alignof( double )","pos":[1447,1466]},{"content":"8","pos":[1469,1470]},{"content":"__alignof( char<ph id=\"ph1\">\\*</ph> )","pos":[1477,1496],"source":"__alignof( char\\* )"},{"content":"4","pos":[1499,1500]},{"content":"The <ph id=\"ph1\">`__alignof`</ph> value is the same as the value for <ph id=\"ph2\">`sizeof`</ph> for basic types.","pos":[1508,1584],"source":"The `__alignof` value is the same as the value for `sizeof` for basic types."},{"content":"Consider, however, this example:","pos":[1585,1617]},{"pos":[1703,1808],"content":"In this case, the <ph id=\"ph1\">`__alignof`</ph> value is the alignment requirement of the largest element in the structure.","source":"In this case, the `__alignof` value is the alignment requirement of the largest element in the structure."},{"content":"Similarly, for","pos":[1815,1829]},{"pos":[1919,1936],"content":"is equal to <ph id=\"ph1\">`32`</ph>.","source":" is equal to `32`."},{"content":"One use for <ph id=\"ph1\">`__alignof`</ph> would be as a parameter to one of your own memory-allocation routines.","pos":[1943,2037],"source":"One use for `__alignof` would be as a parameter to one of your own memory-allocation routines."},{"content":"For example, given the following defined structure <ph id=\"ph1\">`S`</ph>, you could call a memory-allocation routine named <ph id=\"ph2\">`aligned_malloc`</ph> to allocate memory on a particular alignment boundary.","pos":[2038,2214],"source":" For example, given the following defined structure `S`, you could call a memory-allocation routine named `aligned_malloc` to allocate memory on a particular alignment boundary."},{"content":"For more information on modifying alignment, see:","pos":[2385,2434]},{"content":"pack","pos":[2445,2449]},{"content":"align","pos":[2486,2491]},{"content":"__unaligned","pos":[2524,2535]},{"content":"/Zp (Struct Member Alignment)","pos":[2568,2597]},{"pos":[2658,2751],"content":"<bpt id=\"p1\">[</bpt>Examples of Structure Alignment<ept id=\"p1\">](../build/examples-of-structure-alignment.md)</ept> (x64 specific)","source":"[Examples of Structure Alignment](../build/examples-of-structure-alignment.md) (x64 specific)"},{"content":"For more information on differences in alignment in code for x86 and x64, see:","pos":[2758,2836]},{"content":"Conflicts with the x86 Compiler","pos":[2847,2878]},{"content":"END Microsoft Specific","pos":[2933,2955]},{"content":"See Also","pos":[2964,2972]},{"content":"Expressions with Unary Operators","pos":[2977,3009]},{"content":"Keywords","pos":[3060,3068]}],"content":"---\ntitle: \"__alignof Operator | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"__alignof\"\n  - \"alignof\"\n  - \"alignas\"\n  - \"__alignof_cpp\"\n  - \"alignof_cpp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"alignas\"\n  - \"alignment of structures\"\n  - \"__alignof keyword [C++]\"\n  - \"alignof\"\n  - \"types [C++], alignment requirements\"\nms.assetid: acb1eed7-6398-40bd-b0c5-684ceb64afbc\ncaps.latest.revision: 11\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# __alignof Operator\nC++11 introduces the `alignof` operator that returns the alignment, in bytes, of the specified type. For maximum portability, you should use the alignof operator instead of the Microsoft-specific __alignof operator.  \n  \n **Microsoft Specific**  \n  \n Returns a value of type **size_t** that is the alignment requirement of the type.  \n  \n## Syntax  \n  \n```  \n  \n      __alignof(   \n   type    \n)  \n```  \n  \n## Remarks  \n For example:  \n  \n|Expression|Value|  \n|----------------|-----------|  \n|**__alignof( char )**|1|  \n|**__alignof( short )**|2|  \n|**__alignof( int )**|4|  \n|**__alignof( \\__int64 )**|8|  \n|**__alignof( float )**|4|  \n|**__alignof( double )**|8|  \n|**__alignof( char\\* )**|4|  \n  \n The `__alignof` value is the same as the value for `sizeof` for basic types. Consider, however, this example:  \n  \n```  \ntypedef struct { int a; double b; } S;  \n// __alignof(S) == 8  \n```  \n  \n In this case, the `__alignof` value is the alignment requirement of the largest element in the structure.  \n  \n Similarly, for  \n  \n```  \ntypedef __declspec(align(32)) struct { int a; } S;  \n```  \n  \n `__alignof(S)` is equal to `32`.  \n  \n One use for `__alignof` would be as a parameter to one of your own memory-allocation routines. For example, given the following defined structure `S`, you could call a memory-allocation routine named `aligned_malloc` to allocate memory on a particular alignment boundary.  \n  \n```  \ntypedef __declspec(align(32)) struct { int a; double b; } S;  \nint n = 50; // array size  \nS* p = (S*)aligned_malloc(n * sizeof(S), __alignof(S));  \n```  \n  \n For more information on modifying alignment, see:  \n  \n-   [pack](../preprocessor/pack.md)  \n  \n-   [align](../cpp/align-cpp.md)  \n  \n-   [__unaligned](../cpp/unaligned.md)  \n  \n-   [/Zp (Struct Member Alignment)](../build/reference/zp-struct-member-alignment.md)  \n  \n-   [Examples of Structure Alignment](../build/examples-of-structure-alignment.md) (x64 specific)  \n  \n For more information on differences in alignment in code for x86 and x64, see:  \n  \n-   [Conflicts with the x86 Compiler](../build/conflicts-with-the-x86-compiler.md)  \n  \n## END Microsoft Specific  \n  \n## See Also  \n [Expressions with Unary Operators](../cpp/expressions-with-unary-operators.md)   \n [Keywords](../cpp/keywords-cpp.md)"}