{"nodes":[{"pos":[12,49],"content":"Compiler Error C3057 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Error C3057 | Microsoft Docs","pos":[0,37]}]},{"content":"Compiler Error C3057","pos":[619,639]},{"content":"'symbol' : dynamic initialization of 'threadprivate' symbols is not currently supported","pos":[640,727]},{"pos":[734,881],"content":"The initialized value of a symbol used in a <bpt id=\"p1\">[</bpt>threadprivate<ept id=\"p1\">](../../parallel/openmp/reference/threadprivate.md)</ept> clause must be known at compile time.","source":"The initialized value of a symbol used in a [threadprivate](../../parallel/openmp/reference/threadprivate.md) clause must be known at compile time."},{"content":"The following sample generates C3057:","pos":[888,925]},{"content":"The following sample generates C3057:","pos":[1332,1369]}],"content":"---\ntitle: \"Compiler Error C3057 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"C3057\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C3057\"\nms.assetid: b0b2ba88-9c74-4bec-bf60-8fc72eade34c\ncaps.latest.revision: 10\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Compiler Error C3057\n'symbol' : dynamic initialization of 'threadprivate' symbols is not currently supported  \n  \n The initialized value of a symbol used in a [threadprivate](../../parallel/openmp/reference/threadprivate.md) clause must be known at compile time.  \n  \n The following sample generates C3057:  \n  \n```  \n// C3057.cpp  \n// compile with: /openmp /c  \nextern int f();  \nint x, y = f();  \nint a, b;  \n#pragma omp threadprivate(x, y)   // C3057  \n  \n#pragma omp threadprivate(a, b)  \n  \nint main() {  \n   // Delete the following 4 lines to resolve.  \n   #pragma omp parallel copyin(x, y)  \n   {  \n      x = y;  \n   }  \n  \n   #pragma omp parallel copyin(a, b)  \n   {  \n      a = b;  \n   }  \n}  \n```  \n  \n The following sample generates C3057:  \n  \n```  \n// C3057b.cpp  \n// compile with: /openmp /c  \nextern int Initialize();  \nint main() {  \n   #pragma omp parallel  \n   {  \n      static int var = Initialize();  \n      #pragma omp threadprivate(var)   // C3057  \n   }  \n  \n   // OK  \n   #pragma omp parallel  \n   {  \n      static int var2;  \n      static bool initialized2;  \n      #pragma omp threadprivate(var2, initialized2)  \n      if (!initialized2) {  \n         var2 = Initialize();  \n         initialized2 = true;  \n      }  \n   }  \n}  \n```"}