{"nodes":[{"pos":[12,44],"content":"exception Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"exception Class | Microsoft Docs","pos":[0,32]}]},{"pos":[640,655],"content":"exception Class","linkify":"exception Class","nodes":[{"content":"exception Class","pos":[0,15]}]},{"content":"The class serves as the base class for all exceptions thrown by certain expressions and by the Standard C++ Library.","pos":[656,772]},{"pos":[781,787],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1095,1102],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Specifically, this base class is the root of the standard exception classes defined in <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>stdexcept&gt;<ept id=\"p1\">](../standard-library/stdexcept.md)</ept>.","pos":[1106,1242],"source":"Specifically, this base class is the root of the standard exception classes defined in [\\<stdexcept>](../standard-library/stdexcept.md)."},{"content":"The C string value returned by <ph id=\"ph1\">`what`</ph> is left unspecified by the default constructor, but may be defined by the constructors for certain derived classes as an implementation-defined C string.","pos":[1243,1434],"source":" The C string value returned by `what` is left unspecified by the default constructor, but may be defined by the constructors for certain derived classes as an implementation-defined C string."},{"content":"None of the member functions throw any exceptions.","pos":[1435,1485]},{"content":"The <ph id=\"ph1\">`int`</ph> parameter allows you to specify that no memory should be allocated.","pos":[1492,1569],"source":"The `int` parameter allows you to specify that no memory should be allocated."},{"content":"The value of the <ph id=\"ph1\">`int`</ph> is ignored.","pos":[1570,1604],"source":" The value of the `int` is ignored."},{"pos":[1612,1782],"content":"[!NOTE]\n The constructors `exception(const char* const &message)` and `exception(const char* const &message, int)` are Microsoft extensions to the Standard C++ Library.","leadings":["","> "],"nodes":[{"content":"The constructors <ph id=\"ph1\">`exception(const char* const &amp;message)`</ph> and <ph id=\"ph2\">`exception(const char* const &amp;message, int)`</ph> are Microsoft extensions to the Standard C++ Library.","pos":[9,168],"source":" The constructors `exception(const char* const &message)` and `exception(const char* const &message, int)` are Microsoft extensions to the Standard C++ Library."}]},{"pos":[1791,1798],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1802,1984],"content":"For examples of the use of the standard exception classes that inherit from the <ph id=\"ph1\">`exception`</ph> class, see any of the classes defined in <bpt id=\"p1\">[</bpt><ph id=\"ph2\">\\&lt;</ph>stdexcept&gt;<ept id=\"p1\">](../standard-library/stdexcept.md)</ept>.","source":"For examples of the use of the standard exception classes that inherit from the `exception` class, see any of the classes defined in [\\<stdexcept>](../standard-library/stdexcept.md)."},{"pos":[1993,2005],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2009,2033],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>exception&gt;","source":"**Header:** \\<exception>"},{"pos":[2040,2058],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[2067,2075],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2079,2188],"content":"<bpt id=\"p1\">[</bpt>Thread Safety in the C++ Standard Library<ept id=\"p1\">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept>","source":"[Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)"}],"content":"---\ntitle: \"exception Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.exception\"\n  - \"exception\"\n  - \"std::exception\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"exception class\"\nms.assetid: 4f181f67-5888-4b50-89a6-745091ffb2fe\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# exception Class\nThe class serves as the base class for all exceptions thrown by certain expressions and by the Standard C++ Library.  \n  \n## Syntax  \n```  \nclass exception {\n   public:\n   exception();\n   exception(const char* const &message);\n   exception(const char* const &message, int);\n   exception(const exception &right);\n   exception& operator=(const exception &right);\n   virtual ~exception();\n   virtual const char *what() const;\n   };  \n``` \n## Remarks  \n Specifically, this base class is the root of the standard exception classes defined in [\\<stdexcept>](../standard-library/stdexcept.md). The C string value returned by `what` is left unspecified by the default constructor, but may be defined by the constructors for certain derived classes as an implementation-defined C string. None of the member functions throw any exceptions.  \n  \n The `int` parameter allows you to specify that no memory should be allocated. The value of the `int` is ignored.  \n  \n> [!NOTE]\n>  The constructors `exception(const char* const &message)` and `exception(const char* const &message, int)` are Microsoft extensions to the Standard C++ Library.  \n  \n## Example  \n For examples of the use of the standard exception classes that inherit from the `exception` class, see any of the classes defined in [\\<stdexcept>](../standard-library/stdexcept.md).  \n  \n## Requirements  \n **Header:** \\<exception>  \n  \n **Namespace:** std  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)\n\n\n\n"}