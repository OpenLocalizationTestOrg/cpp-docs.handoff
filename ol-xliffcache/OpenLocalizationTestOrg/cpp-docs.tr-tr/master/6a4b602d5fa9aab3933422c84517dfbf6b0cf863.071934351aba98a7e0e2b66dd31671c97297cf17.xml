{"nodes":[{"pos":[12,42],"content":"num_put Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"num_put Class | Microsoft Docs","pos":[0,30]}]},{"content":"num_put Class","pos":[657,670]},{"pos":[671,819],"content":"A template class that describes an object that can serve as a locale facet to control conversions of numeric values to sequences of type <ph id=\"ph1\">`CharType`</ph>.","source":"A template class that describes an object that can serve as a locale facet to control conversions of numeric values to sequences of type `CharType`."},{"content":"Syntax","pos":[828,834]},{"content":"Parameters","pos":[988,998]},{"content":"The type used within a program to encode characters in a locale.","pos":[1016,1080]},{"content":"The type of iterator to which the numeric put functions write their output.","pos":[1107,1182]},{"content":"Remarks","pos":[1191,1198]},{"content":"As with any locale facet, the static object ID has an initial stored value of zero.","pos":[1202,1285]},{"content":"The first attempt to access its stored value stores a unique positive value in <bpt id=\"p1\">**</bpt>id.<ept id=\"p1\">**</ept>","pos":[1286,1372],"source":" The first attempt to access its stored value stores a unique positive value in **id.**"},{"content":"Constructors","pos":[1382,1394]},{"content":"num_put","pos":[1416,1423]},{"pos":[1444,1490],"content":"The constructor for objects of type <ph id=\"ph1\">`num_put`</ph>.","source":"The constructor for objects of type `num_put`."},{"content":"Typedefs","pos":[1501,1509]},{"content":"char_type","pos":[1531,1540]},{"content":"A type that is used to describe a character used by a locale.","pos":[1563,1624]},{"content":"iter_type","pos":[1630,1639]},{"content":"A type that describes an output iterator.","pos":[1662,1703]},{"content":"Member Functions","pos":[1714,1730]},{"content":"do_put","pos":[1752,1758]},{"pos":[1778,1919],"content":"A virtual function that is called to convert a number into a sequence of <ph id=\"ph1\">`CharType`</ph>s that represents the number formatted for a given locale.","source":"A virtual function that is called to convert a number into a sequence of `CharType`s that represents the number formatted for a given locale."},{"content":"put","pos":[1925,1928]},{"pos":[1945,2051],"content":"Converts a number into a sequence of <ph id=\"ph1\">`CharType`</ph>s which represents the number formatted for a given locale.","source":"Converts a number into a sequence of `CharType`s which represents the number formatted for a given locale."},{"content":"Requirements","pos":[2061,2073]},{"pos":[2077,2098],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>locale&gt;","source":"**Header:** \\<locale>"},{"pos":[2105,2123],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[2168,2186],"content":"num_put::char_type"},{"content":"A type that is used to describe a character used by a locale.","pos":[2190,2251]},{"content":"Remarks","pos":[2306,2313]},{"pos":[2317,2379],"content":"The type is a synonym for the template parameter <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept>.","source":"The type is a synonym for the template parameter **CharType**."},{"pos":[2421,2436],"content":"num_put::do_put"},{"pos":[2440,2583],"content":"A virtual function that is called to convert a number into a sequence of <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept>s that represents the number formatted for a given locale.","source":"A virtual function that is called to convert a number into a sequence of **CharType**s that represents the number formatted for a given locale."},{"content":"Parameters","pos":[3595,3605]},{"content":"An iterator addressing the first element of the inserted string.","pos":[3620,3684]},{"content":"Specified the stream which contains locale with the numpunct facet used to punctuate the output and flags for formatting the output.","pos":[3705,3837]},{"content":"A character that is used for spacing.","pos":[3855,3892]},{"content":"The number or Boolean type that is to be output.","pos":[3909,3957]},{"content":"Return Value","pos":[3967,3979]},{"content":"An output iterator the addresses the position one beyond the last element produced.","pos":[3983,4066]},{"content":"Remarks","pos":[4076,4083]},{"content":"The first virtual protected member function generates sequential elements beginning at <ph id=\"ph1\">` next`</ph> to produce an integer output field from the value of <ph id=\"ph2\">` val`</ph>.","pos":[4087,4242],"source":"The first virtual protected member function generates sequential elements beginning at ` next` to produce an integer output field from the value of ` val`."},{"content":"The function returns an iterator designating the next place to insert an element beyond the generated integer output field.","pos":[4243,4366]},{"content":"The integer output field is generated by the same rules used by the print functions for generating a series of <ph id=\"ph1\">`char`</ph> elements to a file.","pos":[4373,4510],"source":"The integer output field is generated by the same rules used by the print functions for generating a series of `char` elements to a file."},{"content":"Each such char element is assumed to map to an equivalent element of type <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept> by a simple, one-to-one mapping.","pos":[4511,4630],"source":" Each such char element is assumed to map to an equivalent element of type **CharType** by a simple, one-to-one mapping."},{"content":"Where a print function pads a field with either spaces or the digit 0, however, <ph id=\"ph1\">`do_put`</ph> instead uses <bpt id=\"p1\">**</bpt>fill<ept id=\"p1\">**</ept>.","pos":[4631,4742],"source":" Where a print function pads a field with either spaces or the digit 0, however, `do_put` instead uses **fill**."},{"content":"The equivalent print conversion specification is determined as follows:","pos":[4743,4814]},{"content":"If <bpt id=\"p1\">**</bpt>iosbase<ept id=\"p1\">**</ept>.","pos":[4824,4839],"source":"If **iosbase**."},{"content":"<bpt id=\"p1\">[</bpt>flags<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__flags)</ept><ph id=\"ph1\"> &amp; `ios_base::basefield` == `ios_base::`</ph><bpt id=\"p2\">[</bpt>oct<ept id=\"p2\">](../standard-library/ios-functions.md#oct)</ept>, the conversion specification is <bpt id=\"p3\">**</bpt>lo<ept id=\"p3\">**</ept>.","pos":[4840,5030],"source":"[flags](../standard-library/ios-base-class.md#ios_base__flags) & `ios_base::basefield` == `ios_base::`[oct](../standard-library/ios-functions.md#oct), the conversion specification is **lo**."},{"pos":[5040,5190],"content":"If <bpt id=\"p1\">**</bpt>iosbase.flags<ept id=\"p1\">**</ept><ph id=\"ph1\"> &amp; </ph><bpt id=\"p2\">**</bpt>ios_base::basefield<ept id=\"p2\">**</ept><ph id=\"ph2\"> == `ios_base::`</ph><bpt id=\"p3\">[</bpt>hex<ept id=\"p3\">](../standard-library/ios-functions.md#hex)</ept>, the conversion specification is <bpt id=\"p4\">**</bpt>lx<ept id=\"p4\">**</ept>.","source":"If **iosbase.flags** & **ios_base::basefield** == `ios_base::`[hex](../standard-library/ios-functions.md#hex), the conversion specification is **lx**."},{"pos":[5200,5250],"content":"Otherwise, the conversion specification is <bpt id=\"p1\">**</bpt>ld<ept id=\"p1\">**</ept>.","source":"Otherwise, the conversion specification is **ld**."},{"content":"If <bpt id=\"p1\">**</bpt>iosbase<ept id=\"p1\">**</ept>.","pos":[5257,5272],"source":"If **iosbase**."},{"content":"<bpt id=\"p1\">[</bpt>width<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__width)</ept> is nonzero, a field width of this value is prepended.","pos":[5273,5389],"source":"[width](../standard-library/ios-base-class.md#ios_base__width) is nonzero, a field width of this value is prepended."},{"content":"The function then calls <bpt id=\"p1\">**</bpt>iosbase<ept id=\"p1\">**</ept>.","pos":[5390,5426],"source":" The function then calls **iosbase**."},{"content":"<bpt id=\"p1\">**</bpt>width<ept id=\"p1\">**</ept>(0) to reset the field width to zero.","pos":[5427,5473],"source":"**width**(0) to reset the field width to zero."},{"content":"Padding occurs only if the minimum number of elements <bpt id=\"p1\">*</bpt>N<ept id=\"p1\">*</ept> required to specify the output field is less than <bpt id=\"p2\">**</bpt>iosbase<ept id=\"p2\">**</ept>.","pos":[5480,5600],"source":"Padding occurs only if the minimum number of elements *N* required to specify the output field is less than **iosbase**."},{"content":"<bpt id=\"p1\">[</bpt>width<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__width)</ept>.","pos":[5601,5664],"source":"[width](../standard-library/ios-base-class.md#ios_base__width)."},{"content":"Such padding consists of a sequence of <bpt id=\"p1\">*</bpt>N<ept id=\"p1\">*</ept> – <bpt id=\"p2\">**</bpt>width<ept id=\"p2\">**</ept> copies of <bpt id=\"p3\">**</bpt>fill<ept id=\"p3\">**</ept>.","pos":[5665,5739],"source":" Such padding consists of a sequence of *N* – **width** copies of **fill**."},{"content":"Padding then occurs as follows:","pos":[5740,5771]},{"content":"If <bpt id=\"p1\">**</bpt>iosbase<ept id=\"p1\">**</ept>.","pos":[5781,5796],"source":"If **iosbase**."},{"content":"<bpt id=\"p1\">**</bpt>flags<ept id=\"p1\">**</ept><ph id=\"ph1\"> &amp; `ios_base::adjustfield` == `ios_base::`</ph><bpt id=\"p2\">[</bpt>left<ept id=\"p2\">](../standard-library/ios-functions.md#left)</ept>, the flag <bpt id=\"p3\">**</bpt>–<ept id=\"p3\">**</ept> is prepended.","pos":[5797,5927],"source":"**flags** & `ios_base::adjustfield` == `ios_base::`[left](../standard-library/ios-functions.md#left), the flag **–** is prepended."},{"content":"(Padding occurs after the generated text.)","pos":[5928,5970]},{"content":"If <bpt id=\"p1\">**</bpt>iosbase.flags<ept id=\"p1\">**</ept><ph id=\"ph1\"> &amp; </ph><bpt id=\"p2\">**</bpt>ios_base::adjustfield<ept id=\"p2\">**</ept><ph id=\"ph2\"> == `ios_base::`</ph><bpt id=\"p3\">[</bpt>internal<ept id=\"p3\">](../standard-library/ios-functions.md#internal)</ept>, the flag <bpt id=\"p4\">**</bpt>0<ept id=\"p4\">**</ept> is prepended.","pos":[5980,6131],"source":"If **iosbase.flags** & **ios_base::adjustfield** == `ios_base::`[internal](../standard-library/ios-functions.md#internal), the flag **0** is prepended."},{"content":"(For a numeric output field, padding occurs where the print functions pad with 0.)","pos":[6132,6214]},{"content":"Otherwise, no additional flag is prepended.","pos":[6224,6267]},{"content":"(Padding occurs before the generated sequence.)","pos":[6268,6315]},{"content":"Finally:","pos":[6322,6330]},{"content":"If <bpt id=\"p1\">**</bpt>iosbase<ept id=\"p1\">**</ept>.","pos":[6340,6355],"source":"If **iosbase**."},{"content":"<bpt id=\"p1\">**</bpt>flags<ept id=\"p1\">**</ept><ph id=\"ph1\"> &amp; `ios_base::`</ph><bpt id=\"p2\">[</bpt>showpos<ept id=\"p2\">](../standard-library/ios-functions.md#showpos)</ept> is nonzero, the flag <bpt id=\"p3\">**</bpt><ph id=\"ph2\">+</ph><ept id=\"p3\">**</ept> is prepended to the conversion specification.","pos":[6356,6508],"source":"**flags** & `ios_base::`[showpos](../standard-library/ios-functions.md#showpos) is nonzero, the flag **+** is prepended to the conversion specification."},{"content":"If <bpt id=\"p1\">**</bpt>iosbase<ept id=\"p1\">**</ept>.","pos":[6518,6533],"source":"If **iosbase**."},{"content":"<bpt id=\"p1\">**</bpt>flags<ept id=\"p1\">**</ept><ph id=\"ph1\"> &amp; </ph><bpt id=\"p2\">**</bpt>ios_base::<ept id=\"p2\">**</ept><bpt id=\"p3\">[</bpt>showbase<ept id=\"p3\">](../standard-library/ios-functions.md#showbase)</ept> is nonzero, the flag <bpt id=\"p4\">**</bpt><ph id=\"ph2\">#</ph><ept id=\"p4\">**</ept> is prepended to the conversion specification.","pos":[6534,6690],"source":"**flags** & **ios_base::**[showbase](../standard-library/ios-functions.md#showbase) is nonzero, the flag **#** is prepended to the conversion specification."},{"content":"The format of an integer output field is further determined by the <bpt id=\"p1\">[</bpt>locale facet<ept id=\"p1\">](../standard-library/locale-class.md#facet_class)</ept><bpt id=\"p2\">**</bpt>fac<ept id=\"p2\">**</ept> returned by the call <bpt id=\"p3\">[</bpt>use_facet<ept id=\"p3\">](../standard-library/locale-functions.md#use_facet)</ept><ph id=\"ph1\"> &lt; </ph><bpt id=\"p4\">[</bpt>numpunct<ept id=\"p4\">](../standard-library/numpunct-class.md)</ept><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p5\">**</bpt>Elem<ept id=\"p5\">**</ept>&gt;( <bpt id=\"p6\">**</bpt>iosbase<ept id=\"p6\">**</ept>.","pos":[6697,6996],"source":"The format of an integer output field is further determined by the [locale facet](../standard-library/locale-class.md#facet_class)**fac** returned by the call [use_facet](../standard-library/locale-functions.md#use_facet) < [numpunct](../standard-library/numpunct-class.md)\\< **Elem**>( **iosbase**."},{"content":"<bpt id=\"p1\">[</bpt>getloc<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__getloc)</ept>).","pos":[6997,7063],"source":"[getloc](../standard-library/ios-base-class.md#ios_base__getloc))."},{"content":"Specifically:","pos":[7064,7077]},{"content":"<bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[7085,7093],"source":"**fac**."},{"content":"<bpt id=\"p1\">[</bpt>grouping<ept id=\"p1\">](../standard-library/numpunct-class.md#numpunct__grouping)</ept> determines how digits are grouped to the left of any decimal point","pos":[7094,7229],"source":"[grouping](../standard-library/numpunct-class.md#numpunct__grouping) determines how digits are grouped to the left of any decimal point"},{"content":"<bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[7237,7245],"source":"**fac**."},{"content":"<bpt id=\"p1\">[</bpt>thousands_sep<ept id=\"p1\">](../standard-library/numpunct-class.md#numpunct__thousands_sep)</ept> determines the sequence that separates groups of digits to the left of any decimal point","pos":[7246,7413],"source":"[thousands_sep](../standard-library/numpunct-class.md#numpunct__thousands_sep) determines the sequence that separates groups of digits to the left of any decimal point"},{"content":"If no grouping constraints are imposed by <bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[7420,7470],"source":"If no grouping constraints are imposed by **fac**."},{"content":"<bpt id=\"p1\">**</bpt>grouping<ept id=\"p1\">**</ept> (its first element has the value CHAR_MAX), then no instances of <bpt id=\"p2\">**</bpt>fac<ept id=\"p2\">**</ept>.","pos":[7471,7557],"source":"**grouping** (its first element has the value CHAR_MAX), then no instances of **fac**."},{"content":"are generated in the output field.","pos":[7574,7608]},{"content":"Otherwise, separators are inserted after the print conversion occurs.","pos":[7609,7678]},{"content":"The second virtual protected member function:","pos":[7685,7730]},{"pos":[7869,7973],"content":"behaves the same as the first, except that it replaces a conversion specification of <bpt id=\"p1\">**</bpt>ld<ept id=\"p1\">**</ept> with <bpt id=\"p2\">**</bpt>lu<ept id=\"p2\">**</ept>.","source":"behaves the same as the first, except that it replaces a conversion specification of **ld** with **lu**."},{"content":"The third virtual protected member function:","pos":[7980,8024]},{"content":"behaves the same as the first, except that it produces a floating-point output field from the value of <bpt id=\"p1\">**</bpt>val<ept id=\"p1\">**</ept>.","pos":[8156,8267],"source":"behaves the same as the first, except that it produces a floating-point output field from the value of **val**."},{"content":"<bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[8268,8276],"source":"**fac**."},{"content":"<bpt id=\"p1\">[</bpt>decimal_point<ept id=\"p1\">](../standard-library/numpunct-class.md#numpunct__decimal_point)</ept> determines the sequence that separates the integer digits from the fraction digits.","pos":[8277,8439],"source":"[decimal_point](../standard-library/numpunct-class.md#numpunct__decimal_point) determines the sequence that separates the integer digits from the fraction digits."},{"content":"The equivalent print conversion specification is determined as follows:","pos":[8440,8511]},{"content":"If <bpt id=\"p1\">**</bpt>iosbase<ept id=\"p1\">**</ept>.","pos":[8521,8536],"source":"If **iosbase**."},{"content":"<bpt id=\"p1\">**</bpt>flags<ept id=\"p1\">**</ept><ph id=\"ph1\"> &amp; `ios_base::floatfield` == `ios_base::`</ph><bpt id=\"p2\">[</bpt>fixed<ept id=\"p2\">](../standard-library/ios-functions.md#fixed)</ept>, the conversion specification is <bpt id=\"p3\">**</bpt>lf<ept id=\"p3\">**</ept>.","pos":[8537,8679],"source":"**flags** & `ios_base::floatfield` == `ios_base::`[fixed](../standard-library/ios-functions.md#fixed), the conversion specification is **lf**."},{"content":"If <bpt id=\"p1\">**</bpt>iosbase<ept id=\"p1\">**</ept>.","pos":[8689,8704],"source":"If **iosbase**."},{"content":"<bpt id=\"p1\">**</bpt>flags<ept id=\"p1\">**</ept><ph id=\"ph1\"> &amp; </ph><bpt id=\"p2\">**</bpt>ios_base::floatfield<ept id=\"p2\">**</ept><ph id=\"ph2\"> == `ios_base::`</ph><bpt id=\"p3\">[</bpt>scientific<ept id=\"p3\">](../standard-library/ios-functions.md#scientific)</ept>, the conversion specification is <ph id=\"ph3\">`le`</ph>.","pos":[8705,8857],"source":"**flags** & **ios_base::floatfield** == `ios_base::`[scientific](../standard-library/ios-functions.md#scientific), the conversion specification is `le`."},{"content":"If <bpt id=\"p1\">**</bpt>iosbase<ept id=\"p1\">**</ept>.","pos":[8858,8873],"source":" If **iosbase**."},{"content":"<bpt id=\"p1\">**</bpt>flags<ept id=\"p1\">**</ept><ph id=\"ph1\"> &amp; `ios_base::`</ph><bpt id=\"p2\">[</bpt>uppercase<ept id=\"p2\">](../standard-library/ios-functions.md#uppercase)</ept> is nonzero, <bpt id=\"p3\">**</bpt>e<ept id=\"p3\">**</ept> is replaced with <bpt id=\"p4\">**</bpt>E<ept id=\"p4\">**</ept>.","pos":[8874,8999],"source":"**flags** & `ios_base::`[uppercase](../standard-library/ios-functions.md#uppercase) is nonzero, **e** is replaced with **E**."},{"content":"Otherwise, the conversion specification is <bpt id=\"p1\">**</bpt>lg<ept id=\"p1\">**</ept>.","pos":[9009,9059],"source":"Otherwise, the conversion specification is **lg**."},{"content":"If <bpt id=\"p1\">**</bpt>iosbase<ept id=\"p1\">**</ept>.","pos":[9060,9075],"source":" If **iosbase**."},{"content":"<bpt id=\"p1\">**</bpt>flags<ept id=\"p1\">**</ept><ph id=\"ph1\"> &amp; </ph><bpt id=\"p2\">**</bpt>ios_base::uppercase<ept id=\"p2\">**</ept> is nonzero, <bpt id=\"p3\">**</bpt>g<ept id=\"p3\">**</ept> is replaced with <bpt id=\"p4\">**</bpt>G<ept id=\"p4\">**</ept>.","pos":[9076,9153],"source":"**flags** & **ios_base::uppercase** is nonzero, **g** is replaced with **G**."},{"content":"If <bpt id=\"p1\">**</bpt>iosbase<ept id=\"p1\">**</ept>.","pos":[9160,9175],"source":"If **iosbase**."},{"content":"<bpt id=\"p1\">**</bpt>flags<ept id=\"p1\">**</ept><ph id=\"ph1\"> &amp; </ph><bpt id=\"p2\">**</bpt>ios_base::fixed<ept id=\"p2\">**</ept> is nonzero or if <bpt id=\"p3\">**</bpt>iosbase<ept id=\"p3\">**</ept>.","pos":[9176,9237],"source":"**flags** & **ios_base::fixed** is nonzero or if **iosbase**."},{"content":"<bpt id=\"p1\">[</bpt>precision<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__precision)</ept> is greater than zero, a precision with the value <bpt id=\"p2\">**</bpt>iosbase<ept id=\"p2\">**</ept>.","pos":[9238,9370],"source":"[precision](../standard-library/ios-base-class.md#ios_base__precision) is greater than zero, a precision with the value **iosbase**."},{"content":"<bpt id=\"p1\">**</bpt>precision<ept id=\"p1\">**</ept> is prepended to the conversion specification.","pos":[9371,9430],"source":"**precision** is prepended to the conversion specification."},{"content":"Any padding behaves the same as for an integer output field.","pos":[9431,9491]},{"content":"The padding character is <bpt id=\"p1\">**</bpt>fill<ept id=\"p1\">**</ept>.","pos":[9492,9526],"source":" The padding character is **fill**."},{"content":"Finally:","pos":[9527,9535]},{"content":"If <bpt id=\"p1\">**</bpt>iosbase<ept id=\"p1\">**</ept>.","pos":[9545,9560],"source":"If **iosbase**."},{"content":"<bpt id=\"p1\">**</bpt>flags<ept id=\"p1\">**</ept><ph id=\"ph1\"> &amp; `ios_base::`</ph><bpt id=\"p2\">[</bpt>showpos<ept id=\"p2\">](../standard-library/ios-functions.md#showpos)</ept> is nonzero, the flag <bpt id=\"p3\">**</bpt><ph id=\"ph2\">+</ph><ept id=\"p3\">**</ept> is prepended to the conversion specification.","pos":[9561,9713],"source":"**flags** & `ios_base::`[showpos](../standard-library/ios-functions.md#showpos) is nonzero, the flag **+** is prepended to the conversion specification."},{"content":"If <bpt id=\"p1\">**</bpt>iosbase<ept id=\"p1\">**</ept>.","pos":[9723,9738],"source":"If **iosbase**."},{"content":"<bpt id=\"p1\">**</bpt>flags<ept id=\"p1\">**</ept><ph id=\"ph1\"> &amp; `ios_base::`</ph><bpt id=\"p2\">[</bpt>showpoint<ept id=\"p2\">](../standard-library/ios-functions.md#showpoint)</ept> is nonzero, the flag <bpt id=\"p3\">**</bpt><ph id=\"ph2\">#</ph><ept id=\"p3\">**</ept> is prepended to the conversion specification.","pos":[9739,9895],"source":"**flags** & `ios_base::`[showpoint](../standard-library/ios-functions.md#showpoint) is nonzero, the flag **#** is prepended to the conversion specification."},{"content":"The fourth virtual protected member function:","pos":[9902,9947]},{"pos":[10084,10199],"content":"behaves the same the third, except that the qualifier <bpt id=\"p1\">**</bpt>l<ept id=\"p1\">**</ept> in the conversion specification is replaced with <bpt id=\"p2\">**</bpt>L<ept id=\"p2\">**</ept>.","source":"behaves the same the third, except that the qualifier **l** in the conversion specification is replaced with **L**."},{"content":"The fifth virtual protected member function:","pos":[10206,10250]},{"pos":[10387,10513],"content":"behaves the same the first, except that the conversion specification is <ph id=\"ph1\">`p`</ph><bpt id=\"p1\">**</bpt>,<ept id=\"p1\">**</ept> plus any qualifier needed to specify padding.","source":"behaves the same the first, except that the conversion specification is `p`**,** plus any qualifier needed to specify padding."},{"content":"The sixth virtual protected member function:","pos":[10520,10564]},{"pos":[10694,10785],"content":"behaves the same as the first, except that it generates a Boolean output field from <ph id=\"ph1\">` val`</ph>.","source":"behaves the same as the first, except that it generates a Boolean output field from ` val`."},{"content":"A Boolean output field takes one of two forms.","pos":[10792,10838]},{"content":"If <bpt id=\"p1\">**</bpt>iosbase<ept id=\"p1\">**</ept>.","pos":[10839,10854],"source":" If **iosbase**."},{"content":"<bpt id=\"p1\">**</bpt>flags<ept id=\"p1\">**</ept><ph id=\"ph1\"> &amp; `ios_base::`</ph><bpt id=\"p2\">[</bpt>boolalpha<ept id=\"p2\">](../standard-library/ios-functions.md#boolalpha)</ept> is <bpt id=\"p3\">**</bpt>false<ept id=\"p3\">**</ept>, the member function returns <ph id=\"ph2\">`do_put`</ph>(_ <bpt id=\"p4\">*</bpt>Next<ept id=\"p4\">*</ept>, <ph id=\"ph3\">\\_</ph> <bpt id=\"p5\">*</bpt>Iosbase<ept id=\"p5\">*</ept>, <ph id=\"ph4\">\\_</ph> <bpt id=\"p6\">*</bpt>Fill<ept id=\"p6\">*</ept>, ( <bpt id=\"p7\">**</bpt>long<ept id=\"p7\">**</ept>) <ph id=\"ph5\">` val`</ph>), which typically produces a generated sequence of either 0 (for <bpt id=\"p8\">**</bpt>false<ept id=\"p8\">**</ept>) or 1 (for <bpt id=\"p9\">**</bpt>true<ept id=\"p9\">**</ept>).","pos":[10855,11140],"source":"**flags** & `ios_base::`[boolalpha](../standard-library/ios-functions.md#boolalpha) is **false**, the member function returns `do_put`(_ *Next*, \\_ *Iosbase*, \\_ *Fill*, ( **long**) ` val`), which typically produces a generated sequence of either 0 (for **false**) or 1 (for **true**)."},{"content":"Otherwise, the generated sequence is either <bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[11141,11193],"source":" Otherwise, the generated sequence is either **fac**."},{"content":"<bpt id=\"p1\">[</bpt>falsename<ept id=\"p1\">](../standard-library/numpunct-class.md#numpunct__falsename)</ept><ph id=\"ph1\">`)`</ph> (for <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>), or <bpt id=\"p3\">**</bpt>fac<ept id=\"p3\">**</ept>.","pos":[11194,11296],"source":"[falsename](../standard-library/numpunct-class.md#numpunct__falsename)`)` (for **false**), or **fac**."},{"content":"<bpt id=\"p1\">[</bpt>truename<ept id=\"p1\">](../standard-library/numpunct-class.md#numpunct__truename)</ept> (for <bpt id=\"p2\">**</bpt>true<ept id=\"p2\">**</ept>).","pos":[11297,11381],"source":"[truename](../standard-library/numpunct-class.md#numpunct__truename) (for **true**)."},{"content":"The seventh virtual protected member function:","pos":[11388,11434]},{"pos":[11563,11668],"content":"behaves the same as the first, except that it replaces a conversion specification of <bpt id=\"p1\">**</bpt>ld<ept id=\"p1\">**</ept> with <bpt id=\"p2\">**</bpt>lld<ept id=\"p2\">**</ept>.","source":"behaves the same as the first, except that it replaces a conversion specification of **ld** with **lld**."},{"content":"The eighth virtual protected member function:","pos":[11675,11720]},{"pos":[11858,11959],"content":"behaves the same as the first, except that it replaces a conversion specification of <ph id=\"ph1\">`ld`</ph> with <ph id=\"ph2\">`llu`</ph>.","source":"behaves the same as the first, except that it replaces a conversion specification of `ld` with `llu`."},{"content":"Example","pos":[11969,11976]},{"pos":[11981,12044],"content":"See the example for <bpt id=\"p1\">[</bpt>put<ept id=\"p1\">](#num_put__put)</ept>, which calls <ph id=\"ph1\">`do_put`</ph>.","source":"See the example for [put](#num_put__put), which calls `do_put`."},{"pos":[12089,12107],"content":"num_put::iter_type"},{"content":"A type that describes an output iterator.","pos":[12111,12152]},{"content":"Remarks","pos":[12213,12220]},{"pos":[12224,12292],"content":"The type is a synonym for the template parameter <bpt id=\"p1\">**</bpt>OutputIterator.<ept id=\"p1\">**</ept>","source":"The type is a synonym for the template parameter **OutputIterator.**"},{"pos":[12335,12351],"content":"num_put::num_put"},{"pos":[12355,12401],"content":"The constructor for objects of type <ph id=\"ph1\">`num_put`</ph>.","source":"The constructor for objects of type `num_put`."},{"content":"Parameters","pos":[12462,12472]},{"content":"Integer value used to specify the type of memory management for the object.","pos":[12487,12562]},{"content":"Remarks","pos":[12572,12579]},{"pos":[12583,12656],"content":"The possible values for the <ph id=\"ph1\">`_Refs`</ph> parameter and their significance are:","source":"The possible values for the `_Refs` parameter and their significance are:"},{"content":"0: The lifetime of the object is managed by the locales that contain it.","pos":[12666,12738]},{"content":"1: The lifetime of the object must be manually managed.","pos":[12748,12803]},{"content":"0: These values are not defined.","pos":[12816,12848]},{"content":"No direct examples are possible, because the destructor is protected.","pos":[12855,12924]},{"pos":[12931,13059],"content":"The constructor initializes its base object with <bpt id=\"p1\">**</bpt>locale::<ept id=\"p1\">**</ept><bpt id=\"p2\">[</bpt>facet<ept id=\"p2\">](../standard-library/locale-class.md#facet_class)</ept>(_ <bpt id=\"p3\">*</bpt>Refs<ept id=\"p3\">*</ept>).","source":"The constructor initializes its base object with **locale::**[facet](../standard-library/locale-class.md#facet_class)(_ *Refs*)."},{"pos":[13098,13110],"content":"num_put::put"},{"pos":[13114,13221],"content":"Converts a number into a sequence of <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept>s that represents the number formatted for a given locale.","source":"Converts a number into a sequence of **CharType**s that represents the number formatted for a given locale."},{"content":"Parameters","pos":[14137,14147]},{"content":"An iterator addressing the first element of the inserted string.","pos":[14162,14226]},{"content":"Specified the stream that contains locale with the numpunct facet used to punctuate the output and flags for formatting the output.","pos":[14247,14378]},{"content":"A character that is used for spacing.","pos":[14396,14433]},{"content":"The number or Boolean type that is to be output.","pos":[14450,14498]},{"content":"Return Value","pos":[14508,14520]},{"content":"An output iterator the addresses the position one beyond the last element produced.","pos":[14524,14607]},{"content":"Remarks","pos":[14617,14624]},{"pos":[14628,14722],"content":"All member functions return <bpt id=\"p1\">[</bpt>do_put<ept id=\"p1\">](#num_put__do_put)</ept>( <ph id=\"ph1\">` next`</ph>, <ph id=\"ph2\">`_Iosbase`</ph>, <ph id=\"ph3\">`_Fill`</ph>, <ph id=\"ph4\">` val`</ph>).","source":"All member functions return [do_put](#num_put__do_put)( ` next`, `_Iosbase`, `_Fill`, ` val`)."},{"content":"Example","pos":[14732,14739]},{"content":"See Also","pos":[15588,15596]},{"content":"locale&gt;","pos":[15603,15610],"source":"locale>"},{"content":"facet Class","pos":[15648,15659]},{"content":"Thread Safety in the C++ Standard Library","pos":[15715,15756]}],"content":"---\ntitle: \"num_put Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std::num_put\"\n  - \"xlocnum/std::num_put\"\n  - \"num_put\"\n  - \"std.num_put\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"num_put class\"\nms.assetid: 36c5bffc-8283-4201-8ed4-78c4d81f8a17\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# num_put Class\nA template class that describes an object that can serve as a locale facet to control conversions of numeric values to sequences of type `CharType`.  \n  \n## Syntax  \n  \n```  \ntemplate <class CharType,  \n    class OutputIterator = ostreambuf_iterator<CharType>>  \nclass num_put : public locale::facet;  \n```  \n  \n#### Parameters  \n `CharType`  \n The type used within a program to encode characters in a locale.  \n  \n `OutputIterator`  \n The type of iterator to which the numeric put functions write their output.  \n  \n## Remarks  \n As with any locale facet, the static object ID has an initial stored value of zero. The first attempt to access its stored value stores a unique positive value in **id.**  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[num_put](#num_put__num_put)|The constructor for objects of type `num_put`.|  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|[char_type](#num_put__char_type)|A type that is used to describe a character used by a locale.|  \n|[iter_type](#num_put__iter_type)|A type that describes an output iterator.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[do_put](#num_put__do_put)|A virtual function that is called to convert a number into a sequence of `CharType`s that represents the number formatted for a given locale.|  \n|[put](#num_put__put)|Converts a number into a sequence of `CharType`s which represents the number formatted for a given locale.|  \n  \n## Requirements  \n **Header:** \\<locale>  \n  \n **Namespace:** std  \n  \n##  <a name=\"num_put__char_type\"></a>  num_put::char_type  \n A type that is used to describe a character used by a locale.  \n  \n```  \ntypedef CharType char_type;  \n```  \n  \n### Remarks  \n The type is a synonym for the template parameter **CharType**.  \n  \n##  <a name=\"num_put__do_put\"></a>  num_put::do_put  \n A virtual function that is called to convert a number into a sequence of **CharType**s that represents the number formatted for a given locale.  \n  \n```  \nvirtual iter_type do_put(\n    iter_type dest,  \n    ios_base& _Iosbase,  \n    _Elem _Fill,  \n    bool val) const;\n\n \nvirtual iter_type do_put(\n    iter_type dest,  \n    ios_base& _Iosbase,  \n    _Elem _Fill,  \n    long val) const;\n\n \nvirtual iter_type do_put(\n    iter_type dest,  \n    ios_base& _Iosbase,  \n    _Elem _Fill,  \n    unsigned long val) const;\n\n \nvirtual iter_type do_put(\n    iter_type dest,  \n    ios_base& _Iosbase,  \n    _Elem _Fill,  \n    double val) const;\n\n \nvirtual iter_type do_put(\n    iter_type dest,  \n    ios_base& _Iosbase,  \n    _Elem _Fill,  \n    long double val) const;\n\n \nvirtual iter_type do_put(\n    iter_type dest,  \n    ios_base& _Iosbase,  \n    _Elem _Fill,  \n    const void* val) const;\n\n \nvirtual iter_type do_put(\n    iter_type dest,  \n    ios_base& _Iosbase,  \n    _Elem _Fill,  \n    const long long val) const;\n\nvirtual iter_type do_put(\n    iter_type dest,  \n    ios_base& _Iosbase,  \n    _Elem _Fill,  \n    const unsigned long long val) const;\n```  \n  \n### Parameters  \n ` next`  \n An iterator addressing the first element of the inserted string.  \n  \n `_Iosbase`  \n Specified the stream which contains locale with the numpunct facet used to punctuate the output and flags for formatting the output.  \n  \n `_Fill`  \n A character that is used for spacing.  \n  \n ` val`  \n The number or Boolean type that is to be output.  \n  \n### Return Value  \n An output iterator the addresses the position one beyond the last element produced.  \n  \n### Remarks  \n The first virtual protected member function generates sequential elements beginning at ` next` to produce an integer output field from the value of ` val`. The function returns an iterator designating the next place to insert an element beyond the generated integer output field.  \n  \n The integer output field is generated by the same rules used by the print functions for generating a series of `char` elements to a file. Each such char element is assumed to map to an equivalent element of type **CharType** by a simple, one-to-one mapping. Where a print function pads a field with either spaces or the digit 0, however, `do_put` instead uses **fill**. The equivalent print conversion specification is determined as follows:  \n  \n-   If **iosbase**. [flags](../standard-library/ios-base-class.md#ios_base__flags) & `ios_base::basefield` == `ios_base::`[oct](../standard-library/ios-functions.md#oct), the conversion specification is **lo**.  \n  \n-   If **iosbase.flags** & **ios_base::basefield** == `ios_base::`[hex](../standard-library/ios-functions.md#hex), the conversion specification is **lx**.  \n  \n-   Otherwise, the conversion specification is **ld**.  \n  \n If **iosbase**. [width](../standard-library/ios-base-class.md#ios_base__width) is nonzero, a field width of this value is prepended. The function then calls **iosbase**. **width**(0) to reset the field width to zero.  \n  \n Padding occurs only if the minimum number of elements *N* required to specify the output field is less than **iosbase**. [width](../standard-library/ios-base-class.md#ios_base__width). Such padding consists of a sequence of *N* – **width** copies of **fill**. Padding then occurs as follows:  \n  \n-   If **iosbase**. **flags** & `ios_base::adjustfield` == `ios_base::`[left](../standard-library/ios-functions.md#left), the flag **–** is prepended. (Padding occurs after the generated text.)  \n  \n-   If **iosbase.flags** & **ios_base::adjustfield** == `ios_base::`[internal](../standard-library/ios-functions.md#internal), the flag **0** is prepended. (For a numeric output field, padding occurs where the print functions pad with 0.)  \n  \n-   Otherwise, no additional flag is prepended. (Padding occurs before the generated sequence.)  \n  \n Finally:  \n  \n-   If **iosbase**. **flags** & `ios_base::`[showpos](../standard-library/ios-functions.md#showpos) is nonzero, the flag **+** is prepended to the conversion specification.  \n  \n-   If **iosbase**. **flags** & **ios_base::**[showbase](../standard-library/ios-functions.md#showbase) is nonzero, the flag **#** is prepended to the conversion specification.  \n  \n The format of an integer output field is further determined by the [locale facet](../standard-library/locale-class.md#facet_class)**fac** returned by the call [use_facet](../standard-library/locale-functions.md#use_facet) < [numpunct](../standard-library/numpunct-class.md)\\< **Elem**>( **iosbase**. [getloc](../standard-library/ios-base-class.md#ios_base__getloc)). Specifically:  \n  \n- **fac**. [grouping](../standard-library/numpunct-class.md#numpunct__grouping) determines how digits are grouped to the left of any decimal point  \n  \n- **fac**. [thousands_sep](../standard-library/numpunct-class.md#numpunct__thousands_sep) determines the sequence that separates groups of digits to the left of any decimal point  \n  \n If no grouping constraints are imposed by **fac**. **grouping** (its first element has the value CHAR_MAX), then no instances of **fac**. `thousands_sep` are generated in the output field. Otherwise, separators are inserted after the print conversion occurs.  \n  \n The second virtual protected member function:  \n  \n```  \nvirtual iter_type do_put(iter_type next,\n    ios_base& _Iosbase,  \n    CharType _Fill,\n    unsigned long val) const;\n```  \n  \n behaves the same as the first, except that it replaces a conversion specification of **ld** with **lu**.  \n  \n The third virtual protected member function:  \n  \n```  \nvirtual iter_type do_put(iter_type next,\n    ios_base& _Iosbase,  \n    CharType _Fill,\n    double val) const;\n```  \n  \n behaves the same as the first, except that it produces a floating-point output field from the value of **val**. **fac**. [decimal_point](../standard-library/numpunct-class.md#numpunct__decimal_point) determines the sequence that separates the integer digits from the fraction digits. The equivalent print conversion specification is determined as follows:  \n  \n-   If **iosbase**. **flags** & `ios_base::floatfield` == `ios_base::`[fixed](../standard-library/ios-functions.md#fixed), the conversion specification is **lf**.  \n  \n-   If **iosbase**. **flags** & **ios_base::floatfield** == `ios_base::`[scientific](../standard-library/ios-functions.md#scientific), the conversion specification is `le`. If **iosbase**. **flags** & `ios_base::`[uppercase](../standard-library/ios-functions.md#uppercase) is nonzero, **e** is replaced with **E**.  \n  \n-   Otherwise, the conversion specification is **lg**. If **iosbase**. **flags** & **ios_base::uppercase** is nonzero, **g** is replaced with **G**.  \n  \n If **iosbase**. **flags** & **ios_base::fixed** is nonzero or if **iosbase**. [precision](../standard-library/ios-base-class.md#ios_base__precision) is greater than zero, a precision with the value **iosbase**. **precision** is prepended to the conversion specification. Any padding behaves the same as for an integer output field. The padding character is **fill**. Finally:  \n  \n-   If **iosbase**. **flags** & `ios_base::`[showpos](../standard-library/ios-functions.md#showpos) is nonzero, the flag **+** is prepended to the conversion specification.  \n  \n-   If **iosbase**. **flags** & `ios_base::`[showpoint](../standard-library/ios-functions.md#showpoint) is nonzero, the flag **#** is prepended to the conversion specification.  \n  \n The fourth virtual protected member function:  \n  \n```  \nvirtual iter_type do_put(iter_type next,\n    ios_base& _Iosbase,  \n    CharType _Fill,\n    long double val) const;\n```  \n  \n behaves the same the third, except that the qualifier **l** in the conversion specification is replaced with **L**.  \n  \n The fifth virtual protected member function:  \n  \n```  \nvirtual iter_type do_put(iter_type next,\n    ios_base& _Iosbase,  \n    CharType _Fill,\n    const void* val) const;\n```  \n  \n behaves the same the first, except that the conversion specification is `p`**,** plus any qualifier needed to specify padding.  \n  \n The sixth virtual protected member function:  \n  \n```  \nvirtual iter_type do_put(iter_type next,\n    ios_base& _Iosbase,  \n    CharType _Fill,\n    bool val) const;\n```  \n  \n behaves the same as the first, except that it generates a Boolean output field from ` val`.  \n  \n A Boolean output field takes one of two forms. If **iosbase**. **flags** & `ios_base::`[boolalpha](../standard-library/ios-functions.md#boolalpha) is **false**, the member function returns `do_put`(_ *Next*, \\_ *Iosbase*, \\_ *Fill*, ( **long**) ` val`), which typically produces a generated sequence of either 0 (for **false**) or 1 (for **true**). Otherwise, the generated sequence is either **fac**. [falsename](../standard-library/numpunct-class.md#numpunct__falsename)`)` (for **false**), or **fac**. [truename](../standard-library/numpunct-class.md#numpunct__truename) (for **true**).  \n  \n The seventh virtual protected member function:  \n  \n```  \nvirtual iter_type do_put(iter_type next,\n    ios_base& iosbase,  \n    Elem fill,\n    long long val) const;\n```  \n  \n behaves the same as the first, except that it replaces a conversion specification of **ld** with **lld**.  \n  \n The eighth virtual protected member function:  \n  \n```  \nvirtual iter_type do_put(iter_type next,\n    ios_base& iosbase,  \n    Elem fill,\n    unsigned long long val) const;\n```  \n  \n behaves the same as the first, except that it replaces a conversion specification of `ld` with `llu`.  \n  \n### Example  \n  See the example for [put](#num_put__put), which calls `do_put`.  \n  \n##  <a name=\"num_put__iter_type\"></a>  num_put::iter_type  \n A type that describes an output iterator.  \n  \n```  \ntypedef OutputIterator iter_type;  \n```  \n  \n### Remarks  \n The type is a synonym for the template parameter **OutputIterator.**  \n  \n##  <a name=\"num_put__num_put\"></a>  num_put::num_put  \n The constructor for objects of type `num_put`.  \n  \n```  \nexplicit num_put(size_t _Refs = 0);\n```  \n  \n### Parameters  \n `_Refs`  \n Integer value used to specify the type of memory management for the object.  \n  \n### Remarks  \n The possible values for the `_Refs` parameter and their significance are:  \n  \n-   0: The lifetime of the object is managed by the locales that contain it.  \n  \n-   1: The lifetime of the object must be manually managed.  \n  \n-   \\> 0: These values are not defined.  \n  \n No direct examples are possible, because the destructor is protected.  \n  \n The constructor initializes its base object with **locale::**[facet](../standard-library/locale-class.md#facet_class)(_ *Refs*).  \n  \n##  <a name=\"num_put__put\"></a>  num_put::put  \n Converts a number into a sequence of **CharType**s that represents the number formatted for a given locale.  \n  \n```  \niter_type put(\n    iter_type dest,  \n    ios_base& _Iosbase,  \n    _Elem _Fill,  \n    bool val) const;\n\n \niter_type put(\n    iter_type dest,  \n    ios_base& _Iosbase,  \n    _Elem _Fill,  \n    long val) const;\n\n \niter_type put(\n    iter_type dest,  \n    ios_base& _Iosbase,  \n    _Elem _Fill,  \n    unsigned long val) const;\n\n \niter_type put(\n    iter_type dest,  \n    ios_base& _Iosbase,  \n    _Elem _Fill,  \n    Long long val) const;\n\n \niter_type put(\n    iter_type dest,  \n    ios_base& _Iosbase,  \n    _Elem _Fill,  \n    Unsigned long long val) const;\n\n \n \niter_type put(\n    iter_type dest,  \n    ios_base& _Iosbase,  \n    _Elem _Fill,  \n    double val) const;\n\n \niter_type put(\n    iter_type dest,  \n    ios_base& _Iosbase,  \n    _Elem _Fill,  \n    long double val) const;\n\n \niter_type put(\n    iter_type dest,  \n    ios_base& _Iosbase,  \n    _Elem _Fill,  \n    const void* val) const;\n```  \n  \n### Parameters  \n ` dest`  \n An iterator addressing the first element of the inserted string.  \n  \n `_Iosbase`  \n Specified the stream that contains locale with the numpunct facet used to punctuate the output and flags for formatting the output.  \n  \n `_Fill`  \n A character that is used for spacing.  \n  \n ` val`  \n The number or Boolean type that is to be output.  \n  \n### Return Value  \n An output iterator the addresses the position one beyond the last element produced.  \n  \n### Remarks  \n All member functions return [do_put](#num_put__do_put)( ` next`, `_Iosbase`, `_Fill`, ` val`).  \n  \n### Example  \n  \n```cpp  \n// num_put_put.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n#include <sstream>  \nusing namespace std;  \nint main( )  \n{  \n   locale loc( \"german_germany\" );  \n   basic_stringstream<char> psz2;  \n   ios_base::iostate st = 0;  \n   long double fVal;  \n   cout << \"The thousands separator is: \"   \n        << use_facet < numpunct <char> >(loc).thousands_sep( )   \n        << endl;  \n  \n   psz2.imbue( loc );  \n   use_facet < num_put < char > >  \n      ( loc ).put(basic_ostream<char>::_Iter(psz2.rdbuf( ) ),  \n                    psz2, ' ', fVal=1000.67);  \n  \n   if ( st & ios_base::failbit )  \n      cout << \"num_put( ) FAILED\" << endl;  \n   else  \n      cout << \"num_put( ) = \" << psz2.rdbuf( )->str( ) << endl;  \n}  \n```  \n  \n```Output  \nThe thousands separator is: .  \nnum_put( ) = 1.000,67  \n```  \n  \n## See Also  \n [\\<locale>](../standard-library/locale.md)   \n [facet Class](../standard-library/locale-class.md#facet_class)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)\n\n"}