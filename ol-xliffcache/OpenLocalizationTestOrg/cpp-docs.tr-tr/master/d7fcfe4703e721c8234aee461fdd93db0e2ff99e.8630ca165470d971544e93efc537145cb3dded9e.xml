{"nodes":[{"pos":[12,56],"content":"is_trivially_copyable Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"is_trivially_copyable Class | Microsoft Docs","pos":[0,44]}]},{"pos":[770,797],"content":"is_trivially_copyable Class","linkify":"is_trivially_copyable Class","nodes":[{"content":"is_trivially_copyable Class","pos":[0,27]}]},{"content":"Tests whether the type is a trivially copyable type.","pos":[798,850]},{"pos":[859,865],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[938,948],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type to query.","pos":[959,977]},{"pos":[986,993],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An instance of the type predicate holds true if the type <ph id=\"ph1\">`T`</ph> is a trivially copyable type, otherwise it holds false.","pos":[997,1113],"source":"An instance of the type predicate holds true if the type `T` is a trivially copyable type, otherwise it holds false."},{"content":"Trivially copyable types have no non-trivial copy operations, move operations, or destructors.","pos":[1114,1208]},{"content":"Generally, a copy operation is considered trivial if it can be implemented as a bitwise copy.","pos":[1209,1302]},{"content":"Both built-in types and arrays of trivially copyable types are trivially copyable.","pos":[1303,1385]},{"pos":[1394,1406],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[1410,1435],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> &lt;type_traits&gt;","source":"**Header:** <type_traits>"},{"pos":[1442,1460],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[1469,1477],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[1481,1532],"content":"<bpt id=\"p1\">[</bpt>&lt;type_traits&gt;<ept id=\"p1\">](../standard-library/type-traits.md)</ept>","source":"[<type_traits>](../standard-library/type-traits.md)"}],"content":"---\ntitle: \"is_trivially_copyable Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"cpp\"\n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"is_trivially_copyable\"\n  - \"std.is_trivially_copyable\"\n  - \"std::is_trivially_copyable\"\n  - \"type_traits/std::is_trivially_copyable\"\ndev_langs: \n  - \"C++\"\n  - \"c++\"\nhelpviewer_keywords: \n  - \"is_trivially_copyable\"\nms.assetid: 89a53bf8-036c-4108-91e1-fe34adbde8b3\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# is_trivially_copyable Class\nTests whether the type is a trivially copyable type.  \n  \n## Syntax  \n  \n```\ntemplate <class T>\nstruct is_trivially_copyable;\n```  \n  \n#### Parameters  \n `T`  \n The type to query.  \n  \n## Remarks  \n An instance of the type predicate holds true if the type `T` is a trivially copyable type, otherwise it holds false. Trivially copyable types have no non-trivial copy operations, move operations, or destructors. Generally, a copy operation is considered trivial if it can be implemented as a bitwise copy. Both built-in types and arrays of trivially copyable types are trivially copyable.  \n  \n## Requirements  \n **Header:** <type_traits>  \n  \n **Namespace:** std  \n  \n## See Also  \n [<type_traits>](../standard-library/type-traits.md)\n\n\n\n"}