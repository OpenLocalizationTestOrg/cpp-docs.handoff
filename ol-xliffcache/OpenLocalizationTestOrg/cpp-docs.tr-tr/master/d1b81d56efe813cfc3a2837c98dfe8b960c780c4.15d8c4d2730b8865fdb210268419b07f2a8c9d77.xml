{"nodes":[{"pos":[12,55],"content":"CComMultiThreadModel Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CComMultiThreadModel Class | Microsoft Docs","pos":[0,43]}]},{"content":"CComMultiThreadModel Class","pos":[745,771]},{"pos":[795,882],"content":"provides thread-safe methods for incrementing and decrementing the value of a variable."},{"content":"Syntax","pos":[891,897]},{"content":"Members","pos":[946,953]},{"content":"Public Typedefs","pos":[963,978]},{"content":"Name","pos":[985,989]},{"content":"Description","pos":[990,1001]},{"content":"CComMultiThreadModel::AutoCriticalSection","pos":[1040,1081]},{"pos":[1127,1224],"content":"References class <bpt id=\"p1\">[</bpt>CComAutoCriticalSection<ept id=\"p1\">](../../atl/reference/ccomautocriticalsection-class.md)</ept>.","source":"References class [CComAutoCriticalSection](../../atl/reference/ccomautocriticalsection-class.md)."},{"content":"CComMultiThreadModel::CriticalSection","pos":[1230,1267]},{"pos":[1309,1398],"content":"References class <bpt id=\"p1\">[</bpt>CComCriticalSection<ept id=\"p1\">](../../atl/reference/ccomcriticalsection-class.md)</ept>.","source":"References class [CComCriticalSection](../../atl/reference/ccomcriticalsection-class.md)."},{"content":"CComMultiThreadModel::ThreadModelNoCS","pos":[1404,1441]},{"pos":[1483,1582],"content":"References class <bpt id=\"p1\">[</bpt>CComMultiThreadModelNoCS<ept id=\"p1\">](../../atl/reference/ccommultithreadmodelnocs-class.md)</ept>.","source":"References class [CComMultiThreadModelNoCS](../../atl/reference/ccommultithreadmodelnocs-class.md)."},{"content":"Public Methods","pos":[1593,1607]},{"content":"Name","pos":[1614,1618]},{"content":"Description","pos":[1619,1630]},{"content":"CComMultiThreadModel::Decrement","pos":[1669,1700]},{"content":"(Static) Decrements the value of the specified variable in a thread-safe manner.","pos":[1736,1816]},{"content":"CComMultiThreadModel::Increment","pos":[1822,1853]},{"content":"(Static) Increments the value of the specified variable in a thread-safe manner.","pos":[1889,1969]},{"content":"Remarks","pos":[1979,1986]},{"content":"Typically, you use <ph id=\"ph1\">`CComMultiThreadModel`</ph> through one of two <ph id=\"ph2\">`typedef`</ph> names, either [CComObjectThreadModel](atl-typedefs.md#ccomobjectthreadmodel or [CComGlobalsThreadModel](atl-typedefs.md#ccomglobalsthreadmodel.","pos":[1990,2204],"source":"Typically, you use `CComMultiThreadModel` through one of two `typedef` names, either [CComObjectThreadModel](atl-typedefs.md#ccomobjectthreadmodel or [CComGlobalsThreadModel](atl-typedefs.md#ccomglobalsthreadmodel."},{"content":"The class referenced by each <ph id=\"ph1\">`typedef`</ph> depends on the threading model used, as shown in the following table:","pos":[2205,2313],"source":" The class referenced by each `typedef` depends on the threading model used, as shown in the following table:"},{"content":"typedef","pos":[2320,2327]},{"content":"Single threading","pos":[2328,2344]},{"content":"Apartment threading","pos":[2345,2364]},{"content":"Free threading","pos":[2365,2379]},{"content":"S","pos":[2496,2497]},{"content":"S","pos":[2498,2499]},{"content":"M","pos":[2500,2501]},{"content":"S","pos":[2531,2532]},{"content":"M","pos":[2533,2534]},{"content":"M","pos":[2535,2536]},{"pos":[2544,2574],"content":"S= <ph id=\"ph1\">`CComSingleThreadModel`</ph>; M=","source":"S= `CComSingleThreadModel`; M= "},{"content":"itself defines three <ph id=\"ph1\">`typedef`</ph> names.","pos":[2627,2664],"source":" itself defines three `typedef` names."},{"content":"and <ph id=\"ph1\">`CriticalSection`</ph> reference classes that provide methods for obtaining and releasing ownership of a critical section.","pos":[2687,2808],"source":" and `CriticalSection` reference classes that provide methods for obtaining and releasing ownership of a critical section."},{"content":"references class [CComMultiThreadModelNoCS(ccommultithreadmodelnocs-class.md).","pos":[2827,2905]},{"content":"Requirements","pos":[2914,2926]},{"pos":[2930,2951],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlbase.h","source":"**Header:** atlbase.h"},{"pos":[3019,3060],"content":"CComMultiThreadModel::AutoCriticalSection"},{"pos":[3064,3308],"content":"When using <ph id=\"ph1\">`CComMultiThreadModel`</ph>, the <ph id=\"ph2\">`typedef`</ph> name <ph id=\"ph3\">`AutoCriticalSection`</ph> references class <bpt id=\"p1\">[</bpt>CComAutoCriticalSection<ept id=\"p1\">](ccomautocriticalsection-class.md)</ept>, which provides methods for obtaining and releasing ownership of a critical section object.","source":"When using `CComMultiThreadModel`, the `typedef` name `AutoCriticalSection` references class [CComAutoCriticalSection](ccomautocriticalsection-class.md), which provides methods for obtaining and releasing ownership of a critical section object."},{"content":"Remarks","pos":[3384,3391]},{"content":"<bpt id=\"p1\">[</bpt>CComSingleThreadModel<ept id=\"p1\">](ccomsinglethreadmodel-class.md)</ept> and <bpt id=\"p2\">[</bpt>CComMultiThreadModelNoCS<ept id=\"p2\">](ccommultithreadmodelnocs-class.md)</ept> also contain definitions for <ph id=\"ph1\">`AutoCriticalSection`</ph>.","pos":[3395,3568],"source":"[CComSingleThreadModel](ccomsinglethreadmodel-class.md) and [CComMultiThreadModelNoCS](ccommultithreadmodelnocs-class.md) also contain definitions for `AutoCriticalSection`."},{"content":"The following table shows the relationship between the threading model class and the critical section class referenced by <ph id=\"ph1\">`AutoCriticalSection`</ph>:","pos":[3569,3713],"source":" The following table shows the relationship between the threading model class and the critical section class referenced by `AutoCriticalSection`:"},{"content":"Class defined in","pos":[3720,3736]},{"content":"Class referenced","pos":[3737,3753]},{"content":"In addition to <ph id=\"ph1\">`AutoCriticalSection`</ph>, you can use the <ph id=\"ph2\">`typedef`</ph> name <bpt id=\"p1\">[</bpt>CriticalSection<ept id=\"p1\">](#ccommultithreadmodel__criticalsection)</ept>.","pos":[3971,4098],"source":"In addition to `AutoCriticalSection`, you can use the `typedef` name [CriticalSection](#ccommultithreadmodel__criticalsection)."},{"content":"You should not specify <ph id=\"ph1\">`AutoCriticalSection`</ph> in global objects or static class members if you want to eliminate the CRT startup code.","pos":[4099,4232],"source":" You should not specify `AutoCriticalSection` in global objects or static class members if you want to eliminate the CRT startup code."},{"content":"Example","pos":[4242,4249]},{"pos":[4253,4413],"content":"The following code is modeled after <bpt id=\"p1\">[</bpt>CComObjectRootEx<ept id=\"p1\">](ccomobjectrootex-class.md)</ept>, and demonstrates <ph id=\"ph1\">`AutoCriticalSection`</ph> being used in a threading environment.","source":"The following code is modeled after [CComObjectRootEx](ccomobjectrootex-class.md), and demonstrates `AutoCriticalSection` being used in a threading environment."},{"pos":[4944,5126],"content":"The following tables show the results of the <ph id=\"ph1\">`InternalAddRef`</ph> and <ph id=\"ph2\">`Lock`</ph> methods, depending on the <bpt id=\"p1\">**</bpt>ThreadModel<ept id=\"p1\">**</ept> template parameter and the threading model used by the application:","source":"The following tables show the results of the `InternalAddRef` and `Lock` methods, depending on the **ThreadModel** template parameter and the threading model used by the application:"},{"content":"ThreadModel = CComObjectThreadModel","pos":[5136,5171]},{"content":"Method","pos":[5178,5184]},{"content":"Single or Apartment Threading","pos":[5185,5214]},{"content":"Free Threading","pos":[5215,5229]},{"content":"The increment is not thread-safe.","pos":[5325,5358]},{"content":"The increment is thread-safe.","pos":[5359,5388]},{"content":"Does nothing; there is no critical section to lock.","pos":[5400,5451]},{"content":"The critical section is locked.","pos":[5452,5483]},{"content":"ThreadModel = CComObjectThreadModel::ThreadModelNoCS","pos":[5494,5546]},{"content":"Method","pos":[5553,5559]},{"content":"Single or Apartment Threading","pos":[5560,5589]},{"content":"Free Threading","pos":[5590,5604]},{"content":"The increment is not thread-safe.","pos":[5700,5733]},{"content":"The increment is thread-safe.","pos":[5734,5763]},{"content":"Does nothing; there is no critical section to lock.","pos":[5775,5826]},{"content":"Does nothing; there is no critical section to lock.","pos":[5827,5878]},{"pos":[5943,5980],"content":"CComMultiThreadModel::CriticalSection"},{"pos":[5984,6216],"content":"When using <ph id=\"ph1\">`CComMultiThreadModel`</ph>, the <ph id=\"ph2\">`typedef`</ph> name <ph id=\"ph3\">`CriticalSection`</ph> references class <bpt id=\"p1\">[</bpt>CComCriticalSection<ept id=\"p1\">](ccomcriticalsection-class.md)</ept>, which provides methods for obtaining and releasing ownership of a critical section object.","source":"When using `CComMultiThreadModel`, the `typedef` name `CriticalSection` references class [CComCriticalSection](ccomcriticalsection-class.md), which provides methods for obtaining and releasing ownership of a critical section object."},{"content":"Remarks","pos":[6284,6291]},{"content":"<bpt id=\"p1\">[</bpt>CComSingleThreadModel<ept id=\"p1\">](ccomsinglethreadmodel-class.md)</ept> and <bpt id=\"p2\">[</bpt>CComMultiThreadModelNoCS<ept id=\"p2\">](ccommultithreadmodelnocs-class.md)</ept> also contain definitions for <ph id=\"ph1\">`CriticalSection`</ph>.","pos":[6295,6464],"source":"[CComSingleThreadModel](ccomsinglethreadmodel-class.md) and [CComMultiThreadModelNoCS](ccommultithreadmodelnocs-class.md) also contain definitions for `CriticalSection`."},{"content":"The following table shows the relationship between the threading model class and the critical section class referenced by <ph id=\"ph1\">`CriticalSection`</ph>:","pos":[6465,6605],"source":" The following table shows the relationship between the threading model class and the critical section class referenced by `CriticalSection`:"},{"content":"Class defined in","pos":[6612,6628]},{"content":"Class referenced","pos":[6629,6645]},{"content":"In addition to <ph id=\"ph1\">`CriticalSection`</ph>, you can use the <ph id=\"ph2\">`typedef`</ph> name <bpt id=\"p1\">[</bpt>AutoCriticalSection<ept id=\"p1\">](#ccommultithreadmodel__autocriticalsection)</ept>.","pos":[6863,6994],"source":"In addition to `CriticalSection`, you can use the `typedef` name [AutoCriticalSection](#ccommultithreadmodel__autocriticalsection)."},{"content":"You should not specify <ph id=\"ph1\">`AutoCriticalSection`</ph> in global objects or static class members if you want to eliminate the CRT startup code.","pos":[6995,7128],"source":" You should not specify `AutoCriticalSection` in global objects or static class members if you want to eliminate the CRT startup code."},{"content":"Example","pos":[7138,7145]},{"pos":[7149,7241],"content":"See <bpt id=\"p1\">[</bpt>CComMultiThreadModel::AutoCriticalSection<ept id=\"p1\">](#ccommultithreadmodel__autocriticalsection)</ept>.","source":"See [CComMultiThreadModel::AutoCriticalSection](#ccommultithreadmodel__autocriticalsection)."},{"pos":[7299,7330],"content":"CComMultiThreadModel::Decrement"},{"pos":[7334,7525],"content":"This static function calls the Win32 function <bpt id=\"p1\">[</bpt>InterlockedDecrement<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms683580)</ept>, which decrements the value of the variable pointed to by <ph id=\"ph1\">`p`</ph>.","source":"This static function calls the Win32 function [InterlockedDecrement](http://msdn.microsoft.com/library/windows/desktop/ms683580), which decrements the value of the variable pointed to by `p`."},{"content":"Parameters","pos":[7598,7608]},{"content":"[in] Pointer to the variable to be decremented.","pos":[7619,7666]},{"content":"Return Value","pos":[7676,7688]},{"content":"If the result of the decrement is 0, then <ph id=\"ph1\">`Decrement`</ph> returns 0.","pos":[7692,7756],"source":"If the result of the decrement is 0, then `Decrement` returns 0."},{"content":"If the result of the decrement is nonzero, the return value is also nonzero but may not equal the result of the decrement.","pos":[7757,7879]},{"content":"Remarks","pos":[7889,7896]},{"pos":[7900,7995],"content":"<bpt id=\"p1\">**</bpt>InterlockedDecrement<ept id=\"p1\">**</ept> prevents more than one thread from simultaneously using this variable.","source":"**InterlockedDecrement** prevents more than one thread from simultaneously using this variable."},{"pos":[8053,8084],"content":"CComMultiThreadModel::Increment"},{"pos":[8088,8279],"content":"This static function calls the Win32 function <bpt id=\"p1\">[</bpt>InterlockedIncrement<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms683614)</ept>, which increments the value of the variable pointed to by <ph id=\"ph1\">`p`</ph>.","source":"This static function calls the Win32 function [InterlockedIncrement](http://msdn.microsoft.com/library/windows/desktop/ms683614), which increments the value of the variable pointed to by `p`."},{"content":"Parameters","pos":[8352,8362]},{"content":"[in] Pointer to the variable to be incremented.","pos":[8373,8420]},{"content":"Return Value","pos":[8430,8442]},{"content":"If the result of the increment is 0, then <bpt id=\"p1\">**</bpt>Increment<ept id=\"p1\">**</ept> returns 0.","pos":[8446,8512],"source":"If the result of the increment is 0, then **Increment** returns 0."},{"content":"If the result of the increment is nonzero, the return value is also nonzero but may not equal the result of the increment.","pos":[8513,8635]},{"content":"Remarks","pos":[8645,8652]},{"pos":[8656,8751],"content":"<bpt id=\"p1\">**</bpt>InterlockedIncrement<ept id=\"p1\">**</ept> prevents more than one thread from simultaneously using this variable.","source":"**InterlockedIncrement** prevents more than one thread from simultaneously using this variable."},{"pos":[8815,8852],"content":"CComMultiThreadModel::ThreadModelNoCS"},{"pos":[8856,9007],"content":"When using <ph id=\"ph1\">`CComMultiThreadModel`</ph>, the <ph id=\"ph2\">`typedef`</ph> name <ph id=\"ph3\">`ThreadModelNoCS`</ph> references class <bpt id=\"p1\">[</bpt>CComMultiThreadModelNoCS<ept id=\"p1\">](ccommultithreadmodelnocs-class.md)</ept>.","source":"When using `CComMultiThreadModel`, the `typedef` name `ThreadModelNoCS` references class [CComMultiThreadModelNoCS](ccommultithreadmodelnocs-class.md)."},{"content":"Remarks","pos":[9080,9087]},{"pos":[9118,9241],"content":"provides thread-safe methods for incrementing and decrementing a variable; however, it does not provide a critical section."},{"content":"<bpt id=\"p1\">[</bpt>CComSingleThreadModel<ept id=\"p1\">](ccomsinglethreadmodel-class.md)</ept> and <ph id=\"ph1\">`CComMultiThreadModelNoCS`</ph> also contain definitions for <ph id=\"ph2\">`ThreadModelNoCS`</ph>.","pos":[9248,9382],"source":"[CComSingleThreadModel](ccomsinglethreadmodel-class.md) and `CComMultiThreadModelNoCS` also contain definitions for `ThreadModelNoCS`."},{"content":"The following table shows the relationship between the threading model class and the class referenced by <ph id=\"ph1\">`ThreadModelNoCS`</ph>:","pos":[9383,9506],"source":" The following table shows the relationship between the threading model class and the class referenced by `ThreadModelNoCS`:"},{"content":"Class defined in","pos":[9513,9529]},{"content":"Class referenced","pos":[9530,9546]},{"content":"Example","pos":[9771,9778]},{"pos":[9782,9874],"content":"See <bpt id=\"p1\">[</bpt>CComMultiThreadModel::AutoCriticalSection<ept id=\"p1\">](#ccommultithreadmodel__autocriticalsection)</ept>.","source":"See [CComMultiThreadModel::AutoCriticalSection](#ccommultithreadmodel__autocriticalsection)."},{"content":"See Also","pos":[9883,9891]},{"content":"CComSingleThreadModel Class","pos":[9896,9923]},{"content":"CComAutoCriticalSection Class","pos":[9962,9991]},{"content":"CComCriticalSection Class","pos":[10032,10057]},{"content":"Class Overview","pos":[10094,10108]}],"content":"---\ntitle: \"CComMultiThreadModel Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CComMultiThreadModel\"\n  - \"ATL.CComMultiThreadModel\"\n  - \"ATL::CComMultiThreadModel\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ATL, multithreading\"\n  - \"CComMultiThreadModel class\"\n  - \"threading [ATL]\"\nms.assetid: db8f1662-2f7a-44b3-b341-ffbfb6e422a3\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CComMultiThreadModel Class\n`CComMultiThreadModel` provides thread-safe methods for incrementing and decrementing the value of a variable.  \n  \n## Syntax  \n  \n```\nclass CComMultiThreadModel\n```  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComMultiThreadModel::AutoCriticalSection](#ccommultithreadmodel__autocriticalsection)|References class [CComAutoCriticalSection](../../atl/reference/ccomautocriticalsection-class.md).|  \n|[CComMultiThreadModel::CriticalSection](#ccommultithreadmodel__criticalsection)|References class [CComCriticalSection](../../atl/reference/ccomcriticalsection-class.md).|  \n|[CComMultiThreadModel::ThreadModelNoCS](#ccommultithreadmodel__threadmodelnocs)|References class [CComMultiThreadModelNoCS](../../atl/reference/ccommultithreadmodelnocs-class.md).|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComMultiThreadModel::Decrement](#ccommultithreadmodel__decrement)|(Static) Decrements the value of the specified variable in a thread-safe manner.|  \n|[CComMultiThreadModel::Increment](#ccommultithreadmodel__increment)|(Static) Increments the value of the specified variable in a thread-safe manner.|  \n  \n## Remarks  \n Typically, you use `CComMultiThreadModel` through one of two `typedef` names, either [CComObjectThreadModel](atl-typedefs.md#ccomobjectthreadmodel or [CComGlobalsThreadModel](atl-typedefs.md#ccomglobalsthreadmodel. The class referenced by each `typedef` depends on the threading model used, as shown in the following table:  \n  \n|typedef|Single threading|Apartment threading|Free threading|  \n|-------------|----------------------|-------------------------|--------------------|  \n|`CComObjectThreadModel`|S|S|M|  \n|`CComGlobalsThreadModel`|S|M|M|  \n  \n S= `CComSingleThreadModel`; M= `CComMultiThreadModel`  \n  \n `CComMultiThreadModel` itself defines three `typedef` names. `AutoCriticalSection` and `CriticalSection` reference classes that provide methods for obtaining and releasing ownership of a critical section. `ThreadModelNoCS` references class [CComMultiThreadModelNoCS(ccommultithreadmodelnocs-class.md).  \n  \n## Requirements  \n **Header:** atlbase.h  \n  \n##  <a name=\"ccommultithreadmodel__autocriticalsection\"></a>  CComMultiThreadModel::AutoCriticalSection  \n When using `CComMultiThreadModel`, the `typedef` name `AutoCriticalSection` references class [CComAutoCriticalSection](ccomautocriticalsection-class.md), which provides methods for obtaining and releasing ownership of a critical section object.  \n  \n```\ntypedef CComAutoCriticalSection AutoCriticalSection;\n```  \n  \n### Remarks  \n [CComSingleThreadModel](ccomsinglethreadmodel-class.md) and [CComMultiThreadModelNoCS](ccommultithreadmodelnocs-class.md) also contain definitions for `AutoCriticalSection`. The following table shows the relationship between the threading model class and the critical section class referenced by `AutoCriticalSection`:  \n  \n|Class defined in|Class referenced|  \n|----------------------|----------------------|  \n|`CComMultiThreadModel`|`CComCriticalSection`|  \n|`CComSingleThreadModel`|`CComFakeCriticalSection`|  \n|`CComMultiThreadModelNoCS`|`CComFakeCriticalSection`|  \n  \n In addition to `AutoCriticalSection`, you can use the `typedef` name [CriticalSection](#ccommultithreadmodel__criticalsection). You should not specify `AutoCriticalSection` in global objects or static class members if you want to eliminate the CRT startup code.  \n  \n### Example  \n The following code is modeled after [CComObjectRootEx](ccomobjectrootex-class.md), and demonstrates `AutoCriticalSection` being used in a threading environment.  \n  \n\n ```cpp\ntemplate< class ThreadModel >\nclass CMyAutoCritClass\n{\npublic:\n   typedef ThreadModel _ThreadModel;\n   typedef typename _ThreadModel::AutoCriticalSection _CritSec;\n\n   CMyAutoCritClass() : m_dwRef(0) {}\n\n   ULONG InternalAddRef()\n   {\n      return _ThreadModel::Increment(&m_dwRef);\n   }\n   ULONG InternalRelease()\n   {\n      return _ThreadModel::Decrement(&m_dwRef);   \n   }\n   void Lock() { m_critsec.Lock( ); }\n   void Unlock() { m_critsec.Unlock(); }\n\nprivate:\n   _CritSec m_critsec;\n   LONG m_dwRef;\n ```  \n  \n The following tables show the results of the `InternalAddRef` and `Lock` methods, depending on the **ThreadModel** template parameter and the threading model used by the application:  \n  \n### ThreadModel = CComObjectThreadModel  \n  \n|Method|Single or Apartment Threading|Free Threading|  \n|------------|-----------------------------------|--------------------|  \n|`InternalAddRef`|The increment is not thread-safe.|The increment is thread-safe.|  \n|`Lock`|Does nothing; there is no critical section to lock.|The critical section is locked.|  \n  \n### ThreadModel = CComObjectThreadModel::ThreadModelNoCS  \n  \n|Method|Single or Apartment Threading|Free Threading|  \n|------------|-----------------------------------|--------------------|  \n|`InternalAddRef`|The increment is not thread-safe.|The increment is thread-safe.|  \n|`Lock`|Does nothing; there is no critical section to lock.|Does nothing; there is no critical section to lock.|  \n  \n##  <a name=\"ccommultithreadmodel__criticalsection\"></a>  CComMultiThreadModel::CriticalSection  \n When using `CComMultiThreadModel`, the `typedef` name `CriticalSection` references class [CComCriticalSection](ccomcriticalsection-class.md), which provides methods for obtaining and releasing ownership of a critical section object.  \n  \n```\ntypedef CComCriticalSection CriticalSection;\n```  \n  \n### Remarks  \n [CComSingleThreadModel](ccomsinglethreadmodel-class.md) and [CComMultiThreadModelNoCS](ccommultithreadmodelnocs-class.md) also contain definitions for `CriticalSection`. The following table shows the relationship between the threading model class and the critical section class referenced by `CriticalSection`:  \n  \n|Class defined in|Class referenced|  \n|----------------------|----------------------|  \n|`CComMultiThreadModel`|`CComCriticalSection`|  \n|`CComSingleThreadModel`|`CComFakeCriticalSection`|  \n|`CComMultiThreadModelNoCS`|`CComFakeCriticalSection`|  \n  \n In addition to `CriticalSection`, you can use the `typedef` name [AutoCriticalSection](#ccommultithreadmodel__autocriticalsection). You should not specify `AutoCriticalSection` in global objects or static class members if you want to eliminate the CRT startup code.  \n  \n### Example  \n See [CComMultiThreadModel::AutoCriticalSection](#ccommultithreadmodel__autocriticalsection).  \n  \n##  <a name=\"ccommultithreadmodel__decrement\"></a>  CComMultiThreadModel::Decrement  \n This static function calls the Win32 function [InterlockedDecrement](http://msdn.microsoft.com/library/windows/desktop/ms683580), which decrements the value of the variable pointed to by `p`.  \n  \n```\nstatic ULONG WINAPI Decrement(LPLONG p) throw ();\n```  \n  \n### Parameters  \n `p`  \n [in] Pointer to the variable to be decremented.  \n  \n### Return Value  \n If the result of the decrement is 0, then `Decrement` returns 0. If the result of the decrement is nonzero, the return value is also nonzero but may not equal the result of the decrement.  \n  \n### Remarks  \n **InterlockedDecrement** prevents more than one thread from simultaneously using this variable.  \n  \n##  <a name=\"ccommultithreadmodel__increment\"></a>  CComMultiThreadModel::Increment  \n This static function calls the Win32 function [InterlockedIncrement](http://msdn.microsoft.com/library/windows/desktop/ms683614), which increments the value of the variable pointed to by `p`.  \n  \n```\nstatic ULONG WINAPI Increment(LPLONG p) throw ();\n```  \n  \n### Parameters  \n `p`  \n [in] Pointer to the variable to be incremented.  \n  \n### Return Value  \n If the result of the increment is 0, then **Increment** returns 0. If the result of the increment is nonzero, the return value is also nonzero but may not equal the result of the increment.  \n  \n### Remarks  \n **InterlockedIncrement** prevents more than one thread from simultaneously using this variable.  \n  \n##  <a name=\"ccommultithreadmodel__threadmodelnocs\"></a>  CComMultiThreadModel::ThreadModelNoCS  \n When using `CComMultiThreadModel`, the `typedef` name `ThreadModelNoCS` references class [CComMultiThreadModelNoCS](ccommultithreadmodelnocs-class.md).  \n  \n```\ntypedef CComMultiThreadModelNoCS ThreadModelNoCS;\n```  \n  \n### Remarks  \n `CComMultiThreadModelNoCS` provides thread-safe methods for incrementing and decrementing a variable; however, it does not provide a critical section.  \n  \n [CComSingleThreadModel](ccomsinglethreadmodel-class.md) and `CComMultiThreadModelNoCS` also contain definitions for `ThreadModelNoCS`. The following table shows the relationship between the threading model class and the class referenced by `ThreadModelNoCS`:  \n  \n|Class defined in|Class referenced|  \n|----------------------|----------------------|  \n|`CComMultiThreadModel`|`CComMultiThreadModelNoCS`|  \n|`CComSingleThreadModel`|`CComSingleThreadModel`|  \n|`CComMultiThreadModelNoCS`|`CComMultiThreadModelNoCS`|  \n  \n### Example  \n See [CComMultiThreadModel::AutoCriticalSection](#ccommultithreadmodel__autocriticalsection).  \n  \n## See Also  \n [CComSingleThreadModel Class](ccomsinglethreadmodel-class.md)   \n [CComAutoCriticalSection Class](ccomautocriticalsection-class.md)   \n [CComCriticalSection Class](ccomcriticalsection-class.md)   \n [Class Overview](../atl-class-overview.md)\n"}