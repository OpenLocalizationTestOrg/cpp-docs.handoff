{"nodes":[{"pos":[12,46],"content":"sync_shared Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"sync_shared Class | Microsoft Docs","pos":[0,34]}]},{"content":"sync_shared Class","pos":[693,710]},{"pos":[711,877],"content":"Describes a <bpt id=\"p1\">[</bpt>synchronization filter<ept id=\"p1\">](../standard-library/allocators-header.md)</ept> that uses a mutex to control access to a cache object that is shared by all allocators.","source":"Describes a [synchronization filter](../standard-library/allocators-header.md) that uses a mutex to control access to a cache object that is shared by all allocators."},{"content":"Syntax","pos":[886,892]},{"content":"Parameters","pos":[959,969]},{"content":"Parameter","pos":[976,985]},{"content":"Description","pos":[986,997]},{"content":"The type of cache associated with the synchronization filter.","pos":[1048,1109]},{"content":"This can be <bpt id=\"p1\">[</bpt>cache_chunklist<ept id=\"p1\">](../standard-library/cache-chunklist-class.md)</ept>, <bpt id=\"p2\">[</bpt>cache_freelist<ept id=\"p2\">](../standard-library/cache-freelist-class.md)</ept>, or <bpt id=\"p3\">[</bpt>cache_suballoc<ept id=\"p3\">](../standard-library/cache-suballoc-class.md)</ept>.","pos":[1110,1315],"source":" This can be [cache_chunklist](../standard-library/cache-chunklist-class.md), [cache_freelist](../standard-library/cache-freelist-class.md), or [cache_suballoc](../standard-library/cache-suballoc-class.md)."},{"content":"Member Functions","pos":[1326,1342]},{"content":"allocate","pos":[1364,1372]},{"content":"Allocates a block of memory.","pos":[1398,1426]},{"content":"deallocate","pos":[1432,1442]},{"content":"Frees a specified number of objects from storage beginning at a specified position.","pos":[1470,1553]},{"content":"equals","pos":[1559,1565]},{"content":"Compares two caches for equality.","pos":[1589,1622]},{"content":"Requirements","pos":[1632,1644]},{"pos":[1648,1673],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>allocators&gt;","source":"**Header:** \\<allocators>"},{"pos":[1680,1701],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> stdext","source":"**Namespace:** stdext"},{"pos":[1749,1770],"content":"sync_shared::allocate"},{"content":"Allocates a block of memory.","pos":[1774,1802]},{"content":"Parameters","pos":[1860,1870]},{"content":"Parameter","pos":[1877,1886]},{"content":"Description","pos":[1887,1898]},{"content":"The number of elements in the array to be allocated.","pos":[1949,2001]},{"content":"Return Value","pos":[2012,2024]},{"content":"A pointer to the allocated object.","pos":[2028,2062]},{"content":"Remarks","pos":[2072,2079]},{"content":"The member function locks the mutex, calls <ph id=\"ph1\">`cache.allocate(count)`</ph>, unlocks the mutex, and returns the result of the earlier call to <ph id=\"ph2\">`cache.allocate(count)`</ph>.","pos":[2083,2240],"source":"The member function locks the mutex, calls `cache.allocate(count)`, unlocks the mutex, and returns the result of the earlier call to `cache.allocate(count)`."},{"content":"represents the current cache object.","pos":[2249,2285]},{"pos":[2335,2358],"content":"sync_shared::deallocate"},{"content":"Frees a specified number of objects from storage beginning at a specified position.","pos":[2362,2445]},{"content":"Parameters","pos":[2515,2525]},{"content":"Parameter","pos":[2532,2541]},{"content":"Description","pos":[2542,2553]},{"content":"A pointer to the first object to be deallocated from storage.","pos":[2602,2663]},{"content":"The number of objects to be deallocated from storage.","pos":[2676,2729]},{"content":"Remarks","pos":[2740,2747]},{"pos":[2751,2897],"content":"This member function locks the mutex, calls <ph id=\"ph1\">`cache.deallocate(ptr, count)`</ph>, where <ph id=\"ph2\">`cache`</ph> represents the cache object, and then unlocks the mutex.","source":"This member function locks the mutex, calls `cache.deallocate(ptr, count)`, where `cache` represents the cache object, and then unlocks the mutex."},{"pos":[2943,2962],"content":"sync_shared::equals"},{"content":"Compares two caches for equality.","pos":[2966,2999]},{"content":"Parameters","pos":[3074,3084]},{"content":"Parameter","pos":[3091,3100]},{"content":"Description","pos":[3101,3112]},{"content":"The type of cache associated with the synchronization filter.","pos":[3163,3224]},{"content":"The cache to compare for equality.","pos":[3237,3271]},{"content":"Return Value","pos":[3282,3294]},{"pos":[3305,3424],"content":"if the result of <ph id=\"ph1\">`cache.equals(Other.cache)`</ph>, where <ph id=\"ph2\">`cache`</ph> represents the cache object, is <ph id=\"ph3\">`true`</ph>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":" if the result of `cache.equals(Other.cache)`, where `cache` represents the cache object, is `true`; otherwise, `false`."},{"content":"Remarks","pos":[3434,3441]},{"content":"See Also","pos":[3450,3458]},{"content":"allocators&gt;","pos":[3465,3476],"source":"allocators>"}],"content":"---\ntitle: \"sync_shared Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"sync_shared\"\n  - \"allocators/stdext::sync_shared\"\n  - \"stdext.sync_shared\"\n  - \"stdext::sync_shared\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"sync_shared class\"\nms.assetid: cab3af9e-3d1a-4f2c-8580-0f89e5687d8e\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# sync_shared Class\nDescribes a [synchronization filter](../standard-library/allocators-header.md) that uses a mutex to control access to a cache object that is shared by all allocators.  \n  \n## Syntax  \n  \n```\ntemplate <class Cache>  \nclass sync_shared\n```  \n  \n#### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`Cache`|The type of cache associated with the synchronization filter. This can be [cache_chunklist](../standard-library/cache-chunklist-class.md), [cache_freelist](../standard-library/cache-freelist-class.md), or [cache_suballoc](../standard-library/cache-suballoc-class.md).|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[allocate](#sync_shared__allocate)|Allocates a block of memory.|  \n|[deallocate](#sync_shared__deallocate)|Frees a specified number of objects from storage beginning at a specified position.|  \n|[equals](#sync_shared__equals)|Compares two caches for equality.|  \n  \n## Requirements  \n **Header:** \\<allocators>  \n  \n **Namespace:** stdext  \n  \n##  <a name=\"sync_shared__allocate\"></a>  sync_shared::allocate  \n Allocates a block of memory.  \n  \n```\nvoid *allocate(std::size_t count);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`count`|The number of elements in the array to be allocated.|  \n  \n### Return Value  \n A pointer to the allocated object.  \n  \n### Remarks  \n The member function locks the mutex, calls `cache.allocate(count)`, unlocks the mutex, and returns the result of the earlier call to `cache.allocate(count)`. `cache` represents the current cache object.  \n  \n##  <a name=\"sync_shared__deallocate\"></a>  sync_shared::deallocate  \n Frees a specified number of objects from storage beginning at a specified position.  \n  \n```\nvoid deallocate(void* ptr, std::size_t count);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`ptr`|A pointer to the first object to be deallocated from storage.|  \n|`count`|The number of objects to be deallocated from storage.|  \n  \n### Remarks  \n This member function locks the mutex, calls `cache.deallocate(ptr, count)`, where `cache` represents the cache object, and then unlocks the mutex.  \n  \n##  <a name=\"sync_shared__equals\"></a>  sync_shared::equals  \n Compares two caches for equality.  \n  \n```\nbool equals(const sync_shared<Cache>& Other) const;\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`Cache`|The type of cache associated with the synchronization filter.|  \n|`Other`|The cache to compare for equality.|  \n  \n### Return Value  \n `true` if the result of `cache.equals(Other.cache)`, where `cache` represents the cache object, is `true`; otherwise, `false`.  \n  \n### Remarks  \n  \n## See Also  \n [\\<allocators>](../standard-library/allocators-header.md)\n\n\n\n"}