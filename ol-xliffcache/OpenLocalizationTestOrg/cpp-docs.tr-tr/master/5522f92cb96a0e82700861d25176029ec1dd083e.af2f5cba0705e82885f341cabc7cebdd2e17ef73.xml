{"nodes":[{"pos":[12,56],"content":"Registry Scripting Examples | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Registry Scripting Examples | Microsoft Docs","pos":[0,44]}]},{"content":"Registry Scripting Examples","pos":[674,701]},{"content":"The scripting examples in this topic demonstrate how to add a key to the system registry, register the Registrar COM server, and specify multiple parse trees.","pos":[702,860]},{"content":"Add a Key to HKEY_CURRENT_USER","pos":[869,899]},{"content":"The following parse tree illustrates a simple script that adds a single key to the system registry.","pos":[903,1002]},{"content":"In particular, the script adds the key, <ph id=\"ph1\">`MyVeryOwnKey`</ph>, to <ph id=\"ph2\">`HKEY_CURRENT_USER`</ph>.","pos":[1003,1082],"source":" In particular, the script adds the key, `MyVeryOwnKey`, to `HKEY_CURRENT_USER`."},{"content":"It also assigns the default string value of <ph id=\"ph1\">`HowGoesIt`</ph> to the new key:","pos":[1083,1154],"source":" It also assigns the default string value of `HowGoesIt` to the new key:"},{"content":"This script can easily be extended to define multiple subkeys as follows:","pos":[1238,1311]},{"content":"Now, the script adds a subkey, <ph id=\"ph1\">`HasASubkey`</ph>, to <ph id=\"ph2\">`MyVeryOwnKey`</ph>.","pos":[1488,1551],"source":"Now, the script adds a subkey, `HasASubkey`, to `MyVeryOwnKey`."},{"content":"To this subkey, it adds both the <ph id=\"ph1\">`PrettyCool`</ph> subkey (with a default <ph id=\"ph2\">`DWORD`</ph> value of 55) and the <ph id=\"ph3\">`ANameValue`</ph> named value (with a string value of <ph id=\"ph4\">`WithANamedValue`</ph>).","pos":[1552,1718],"source":" To this subkey, it adds both the `PrettyCool` subkey (with a default `DWORD` value of 55) and the `ANameValue` named value (with a string value of `WithANamedValue`)."},{"pos":[1782,1815],"content":"Register the Registrar COM Server"},{"content":"The following script registers the Registrar COM server itself.","pos":[1819,1882]},{"content":"At run time, this parse tree adds the <ph id=\"ph1\">`ATL.Registrar`</ph> key to <ph id=\"ph2\">`HKEY_CLASSES_ROOT`</ph>.","pos":[2281,2362],"source":"At run time, this parse tree adds the `ATL.Registrar` key to `HKEY_CLASSES_ROOT`."},{"content":"To this new key, it then:","pos":[2363,2388]},{"pos":[2398,2464],"content":"Specifies <ph id=\"ph1\">`ATL Registrar Class`</ph> as the key's default string value.","source":"Specifies `ATL Registrar Class` as the key's default string value."},{"pos":[2474,2499],"content":"Adds <ph id=\"ph1\">`CLSID`</ph> as a subkey.","source":"Adds `CLSID` as a subkey."},{"content":"Specifies <ph id=\"ph1\">`{44EC053A-400F-11D0-9DCD-00A0C90391D3}`</ph> for <ph id=\"ph2\">`CLSID`</ph>.","pos":[2509,2572],"source":"Specifies `{44EC053A-400F-11D0-9DCD-00A0C90391D3}` for `CLSID`."},{"content":"(This value is the Registrar's CLSID for use with <ph id=\"ph1\">`CoCreateInstance`</ph>.)","pos":[2573,2643],"source":" (This value is the Registrar's CLSID for use with `CoCreateInstance`.)"},{"content":"Since <ph id=\"ph1\">`CLSID`</ph> is shared, it should not be removed in Unregister mode.","pos":[2650,2719],"source":"Since `CLSID` is shared, it should not be removed in Unregister mode."},{"content":"The statement, <ph id=\"ph1\">`NoRemove CLSID`</ph>, does this by indicating that <ph id=\"ph2\">`CLSID`</ph> should be opened in Register mode and ignored in Unregister mode.","pos":[2720,2855],"source":" The statement, `NoRemove CLSID`, does this by indicating that `CLSID` should be opened in Register mode and ignored in Unregister mode."},{"content":"The <ph id=\"ph1\">`ForceRemove`</ph> statement provides a housekeeping function by removing a key and all of its subkeys before re-creating the key.","pos":[2862,2991],"source":"The `ForceRemove` statement provides a housekeeping function by removing a key and all of its subkeys before re-creating the key."},{"content":"This can be useful if the names of the subkeys have changed.","pos":[2992,3052]},{"content":"In this scripting example, <ph id=\"ph1\">`ForceRemove`</ph> checks to see if <ph id=\"ph2\">`{44EC053A-400F-11D0-9DCD-00A0C90391D3}`</ph> already exists.","pos":[3053,3167],"source":" In this scripting example, `ForceRemove` checks to see if `{44EC053A-400F-11D0-9DCD-00A0C90391D3}` already exists."},{"content":"If it does, <ph id=\"ph1\">`ForceRemove`</ph>:","pos":[3168,3194],"source":" If it does, `ForceRemove`:"},{"pos":[3204,3288],"content":"Recursively deletes <ph id=\"ph1\">`{44EC053A-400F-11D0-9DCD-00A0C90391D3}`</ph> and all of its subkeys.","source":"Recursively deletes `{44EC053A-400F-11D0-9DCD-00A0C90391D3}` and all of its subkeys."},{"pos":[3298,3350],"content":"Re-creates <ph id=\"ph1\">`{44EC053A-400F-11D0-9DCD-00A0C90391D3}`</ph>.","source":"Re-creates `{44EC053A-400F-11D0-9DCD-00A0C90391D3}`."},{"pos":[3360,3460],"content":"Adds <ph id=\"ph1\">`ATL Registrar Class`</ph> as the default string value for <ph id=\"ph2\">`{44EC053A-400F-11D0-9DCD-00A0C90391D3}`</ph>.","source":"Adds `ATL Registrar Class` as the default string value for `{44EC053A-400F-11D0-9DCD-00A0C90391D3}`."},{"content":"The parse tree now adds two new subkeys to <ph id=\"ph1\">`{44EC053A-400F-11D0-9DCD-00A0C90391D3}`</ph>.","pos":[3467,3551],"source":"The parse tree now adds two new subkeys to `{44EC053A-400F-11D0-9DCD-00A0C90391D3}`."},{"content":"The first key, <ph id=\"ph1\">`ProgID`</ph>, gets a default string value that is the ProgID.","pos":[3552,3624],"source":" The first key, `ProgID`, gets a default string value that is the ProgID."},{"content":"The second key, <ph id=\"ph1\">`InprocServer32`</ph>, gets a default string value, <ph id=\"ph2\">`%MODULE%`</ph>, that is a preprocessor value explained in the section, <bpt id=\"p1\">[</bpt>Using Replaceable Parameters (The Registrar's Preprocessor)<ept id=\"p1\">](../atl/using-replaceable-parameters-the-registrar-s-preprocessor.md)</ept>, of this article.","pos":[3625,3903],"source":" The second key, `InprocServer32`, gets a default string value, `%MODULE%`, that is a preprocessor value explained in the section, [Using Replaceable Parameters (The Registrar's Preprocessor)](../atl/using-replaceable-parameters-the-registrar-s-preprocessor.md), of this article."},{"content":"also gets a named value, <ph id=\"ph1\">`ThreadingModel`</ph>, with a string value of <ph id=\"ph2\">`Apartment`</ph>.","pos":[3921,3999],"source":" also gets a named value, `ThreadingModel`, with a string value of `Apartment`."},{"content":"Specify Multiple Parse Trees","pos":[4008,4036]},{"content":"To specify more than one parse tree in a script, simply place one tree at the end of another.","pos":[4040,4133]},{"content":"For example, the following script adds the key, <ph id=\"ph1\">`MyVeryOwnKey`</ph>, to the parse trees for both <ph id=\"ph2\">`HKEY_CLASSES_ROOT`</ph> and <ph id=\"ph3\">`HKEY_CURRENT_USER`</ph>:","pos":[4134,4270],"source":" For example, the following script adds the key, `MyVeryOwnKey`, to the parse trees for both `HKEY_CLASSES_ROOT` and `HKEY_CURRENT_USER`:"},{"pos":[4404,4636],"content":"[!NOTE]\n In a Registrar script, 4K is the maximum token size. (A token is any recognizable element in the syntax.) In the previous scripting example, `HKCR`, `HKEY_CURRENT_USER`, `'MyVeryOwnKey'`, and `'HowGoesIt'` are all tokens.","leadings":["","> "],"nodes":[{"content":" In a Registrar script, 4K is the maximum token size. (A token is any recognizable element in the syntax.) In the previous scripting example, `HKCR`, `HKEY_CURRENT_USER`, `'MyVeryOwnKey'`, and `'HowGoesIt'` are all tokens.","pos":[8,230],"nodes":[{"content":"In a Registrar script, 4K is the maximum token size.","pos":[1,53]},{"content":"(A token is any recognizable element in the syntax.) In the previous scripting example, <ph id=\"ph1\">`HKCR`</ph>, <ph id=\"ph2\">`HKEY_CURRENT_USER`</ph>, <ph id=\"ph3\">`'MyVeryOwnKey'`</ph>, and <ph id=\"ph4\">`'HowGoesIt'`</ph> are all tokens.","pos":[54,222],"source":" (A token is any recognizable element in the syntax.) In the previous scripting example, `HKCR`, `HKEY_CURRENT_USER`, `'MyVeryOwnKey'`, and `'HowGoesIt'` are all tokens."}]}]},{"content":"See Also","pos":[4645,4653]},{"content":"Creating Registrar Scripts","pos":[4658,4684]}],"content":"---\ntitle: \"Registry Scripting Examples | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"scripting, examples\"\n  - \"registrar scripts [ATL]\"\n  - \"scripts, Registrar scripts\"\n  - \"registry, Registrar\"\nms.assetid: b6df80e1-e08b-40ee-9243-9b381b172460\ncaps.latest.revision: 12\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Registry Scripting Examples\nThe scripting examples in this topic demonstrate how to add a key to the system registry, register the Registrar COM server, and specify multiple parse trees.  \n  \n## Add a Key to HKEY_CURRENT_USER  \n The following parse tree illustrates a simple script that adds a single key to the system registry. In particular, the script adds the key, `MyVeryOwnKey`, to `HKEY_CURRENT_USER`. It also assigns the default string value of `HowGoesIt` to the new key:  \n  \n```  \nHKEY_CURRENT_USER  \n{  \n 'MyVeryOwnKey' = s 'HowGoesIt'  \n}  \n```  \n  \n This script can easily be extended to define multiple subkeys as follows:  \n  \n```  \nHKCU  \n{  \n 'MyVeryOwnKey' = s 'HowGoesIt'  \n {  \n 'HasASubkey'  \n {  \n 'PrettyCool' = d '55'  \n    val 'ANameValue' = s 'WithANamedValue'  \n }  \n }  \n}  \n```  \n  \n Now, the script adds a subkey, `HasASubkey`, to `MyVeryOwnKey`. To this subkey, it adds both the `PrettyCool` subkey (with a default `DWORD` value of 55) and the `ANameValue` named value (with a string value of `WithANamedValue`).  \n  \n##  <a name=\"_atl_register_the_registrar_com_server\"></a> Register the Registrar COM Server  \n The following script registers the Registrar COM server itself.  \n  \n```  \nHKCR  \n{  \n    ATL.Registrar = s 'ATL Registrar Class'  \n {  \n    CLSID = s '{44EC053A-400F-11D0-9DCD-00A0C90391D3}'  \n }  \n    NoRemove CLSID  \n {  \n    ForceRemove {44EC053A-400F-11D0-9DCD-00A0C90391D3} = \n    s 'ATL Registrar Class'  \n {  \n    ProgID = s 'ATL.Registrar'  \n    InprocServer32 = s '%MODULE%'  \n {  \n    val ThreadingModel = s 'Apartment'  \n }  \n }  \n }  \n}  \n```  \n  \n At run time, this parse tree adds the `ATL.Registrar` key to `HKEY_CLASSES_ROOT`. To this new key, it then:  \n  \n-   Specifies `ATL Registrar Class` as the key's default string value.  \n  \n-   Adds `CLSID` as a subkey.  \n  \n-   Specifies `{44EC053A-400F-11D0-9DCD-00A0C90391D3}` for `CLSID`. (This value is the Registrar's CLSID for use with `CoCreateInstance`.)  \n  \n Since `CLSID` is shared, it should not be removed in Unregister mode. The statement, `NoRemove CLSID`, does this by indicating that `CLSID` should be opened in Register mode and ignored in Unregister mode.  \n  \n The `ForceRemove` statement provides a housekeeping function by removing a key and all of its subkeys before re-creating the key. This can be useful if the names of the subkeys have changed. In this scripting example, `ForceRemove` checks to see if `{44EC053A-400F-11D0-9DCD-00A0C90391D3}` already exists. If it does, `ForceRemove`:  \n  \n-   Recursively deletes `{44EC053A-400F-11D0-9DCD-00A0C90391D3}` and all of its subkeys.  \n  \n-   Re-creates `{44EC053A-400F-11D0-9DCD-00A0C90391D3}`.  \n  \n-   Adds `ATL Registrar Class` as the default string value for `{44EC053A-400F-11D0-9DCD-00A0C90391D3}`.  \n  \n The parse tree now adds two new subkeys to `{44EC053A-400F-11D0-9DCD-00A0C90391D3}`. The first key, `ProgID`, gets a default string value that is the ProgID. The second key, `InprocServer32`, gets a default string value, `%MODULE%`, that is a preprocessor value explained in the section, [Using Replaceable Parameters (The Registrar's Preprocessor)](../atl/using-replaceable-parameters-the-registrar-s-preprocessor.md), of this article. `InprocServer32` also gets a named value, `ThreadingModel`, with a string value of `Apartment`.  \n  \n## Specify Multiple Parse Trees  \n To specify more than one parse tree in a script, simply place one tree at the end of another. For example, the following script adds the key, `MyVeryOwnKey`, to the parse trees for both `HKEY_CLASSES_ROOT` and `HKEY_CURRENT_USER`:  \n  \n```  \nHKCR  \n{  \n 'MyVeryOwnKey' = s 'HowGoesIt'  \n}  \nHKEY_CURRENT_USER  \n{  \n 'MyVeryOwnKey' = s 'HowGoesIt'  \n}  \n```  \n  \n> [!NOTE]\n>  In a Registrar script, 4K is the maximum token size. (A token is any recognizable element in the syntax.) In the previous scripting example, `HKCR`, `HKEY_CURRENT_USER`, `'MyVeryOwnKey'`, and `'HowGoesIt'` are all tokens.  \n  \n## See Also  \n [Creating Registrar Scripts](../atl/creating-registrar-scripts.md)\n\n"}