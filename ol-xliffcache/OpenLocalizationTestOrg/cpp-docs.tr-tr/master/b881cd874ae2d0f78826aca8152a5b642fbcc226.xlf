<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b881cd874ae2d0f78826aca8152a5b642fbcc226</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\how-to-perform-map-and-reduce-operations-in-parallel.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0b257314796524ab43ac2e72f1ef705da0ffe225</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">502fb4e3e00eb7d062d3f3fe5c9bb3f83b934af0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Perform Map and Reduce Operations in Parallel | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Perform Map and Reduce Operations in Parallel</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This example shows how to use the <bpt id="p1">[</bpt>concurrency::parallel_transform<ept id="p1">](reference/concurrency-namespace-functions.md#parallel_transform)</ept> and <bpt id="p2">[</bpt>concurrency::parallel_reduce<ept id="p2">](reference/concurrency-namespace-functions.md#parallel_reduce)</ept> algorithms and the <bpt id="p3">[</bpt>concurrency::concurrent_unordered_map<ept id="p3">](../../parallel/concrt/reference/concurrent-unordered-map-class.md)</ept> class to count the occurrences of words in files.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>map<ept id="p1">*</ept> operation applies a function to each value in a sequence.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>reduce<ept id="p1">*</ept> operation combines the elements of a sequence into one value.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can use the Standard Template Library (STL) <bpt id="p1">[</bpt>std::transform<ept id="p1">](http://msdn.microsoft.com/Library/99396865-54fb-47dd-a661-38ce03467854)</ept><bpt id="p2">[</bpt>std::accumulate<ept id="p2">](../../standard-library/numeric-functions.md#accumulate)</ept> classes to perform map and reduce operations.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>However, to improve performance for many problems, you can use the <ph id="ph1">`parallel_transform`</ph> algorithm to perform the map operation in parallel and the <ph id="ph2">`parallel_reduce`</ph> algorithm to perform the reduce operation in parallel.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In some cases, you can use <ph id="ph1">`concurrent_unordered_map`</ph> to perform the map and the reduce in one operation.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following example counts the occurrences of words in files.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It uses <bpt id="p1">[</bpt>std::vector<ept id="p1">](../../standard-library/vector-class.md)</ept> to represent the contents of two files.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The map operation computes the occurrences of each word in each vector.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The reduce operation accumulates the word counts across both vectors.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>concrt-parallel-map-reduce#1</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To compile the code, copy it and then paste it in a Visual Studio project, or paste it in a file that is named <ph id="ph1">`parallel-map-reduce.cpp`</ph> and then run the following command in a Visual Studio Command Prompt window.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>cl.exe /EHsc parallel-map-reduce.cpp</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Robust Programming</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In this example, you can use the <ph id="ph1">`concurrent_unordered_map`</ph> class—which is defined in concurrent_unordered_map.h—to perform the map and reduce in one operation.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>concrt-parallel-map-reduce#2</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Typically, you parallelize only the outer or the inner loop.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Parallelize the inner loop if you have relatively few files and each file contains many words.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Parallelize the outer loop if you have relatively many files and each file contains few words.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Parallel Algorithms</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>parallel_transform Function</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>parallel_reduce Function</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>concurrent_unordered_map Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>