<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7f58e6daa3d45f852ac0b8b0f52faffc8720c24b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\considerations-when-writing-prolog-epilog-code.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">95ec2c90b1e90b2f8b60d79172a38469c891f2c8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1323bbb3a51fb0d2a70d101dfa5664824cc690ef</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Considerations When Writing Prolog-Epilog Code | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Considerations When Writing Prolog/Epilog Code</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Before writing your own prolog and epilog code sequences, it is important to understand how the stack frame is laid out.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>It is also useful to know how to use the <bpt id="p1">**</bpt>__LOCAL_SIZE<ept id="p1">**</ept> predefined constant.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>C Stack Frame Layout</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This example shows the standard prolog code that might appear in a 32-bit function:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`localbytes`</ph> variable represents the number of bytes needed on the stack for local variables, and the <ph id="ph2">`registers`</ph> variable is a placeholder that represents the list of registers to be saved on the stack.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>After pushing the registers, you can place any other appropriate data on the stack.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following is the corresponding epilog code:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The stack always grows down (from high to low memory addresses).</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The base pointer (<ph id="ph1">`ebp`</ph>) points to the pushed value of <ph id="ph2">`ebp`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The local variables area begins at <ph id="ph1">`ebp-2`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To access local variables, calculate an offset from <ph id="ph1">`ebp`</ph> by subtracting the appropriate value from <ph id="ph2">`ebp`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The __LOCAL_SIZE Constant</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The compiler provides a constant, <bpt id="p1">**</bpt>__LOCAL_SIZE<ept id="p1">**</ept>, for use in the inline assembler block of function prolog code.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This constant is used to allocate space for local variables on the stack frame in custom prolog code.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The compiler determines the value of <bpt id="p1">**</bpt>__LOCAL_SIZE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The value is the total number of bytes of all user-defined local variables and compiler-generated temporary variables.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>__LOCAL_SIZE<ept id="p1">**</ept> can be used only as an immediate operand; it cannot be used in an expression.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You must not change or redefine the value of this constant.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following example of a naked function containing custom prolog and epilog sequences uses <bpt id="p1">**</bpt>__LOCAL_SIZE<ept id="p1">**</ept> in the prolog sequence:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Naked Functions</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>