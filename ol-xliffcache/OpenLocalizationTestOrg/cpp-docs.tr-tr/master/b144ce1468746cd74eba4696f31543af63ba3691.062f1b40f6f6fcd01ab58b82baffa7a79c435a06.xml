{"nodes":[{"pos":[12,88],"content":"Walkthrough: Updating the MFC Scribble Application (Part 2) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Walkthrough: Updating the MFC Scribble Application (Part 2) | Microsoft Docs","pos":[0,76]}]},{"content":"Walkthrough: Updating the MFC Scribble Application (Part 2)","pos":[616,675]},{"content":"<bpt id=\"p1\">[</bpt>Part 1<ept id=\"p1\">](../mfc/walkthrough-updating-the-mfc-scribble-application-part-1.md)</ept> of this walkthrough showed how to add an Office Fluent Ribbon to the classic Scribble application.","pos":[676,851],"source":"[Part 1](../mfc/walkthrough-updating-the-mfc-scribble-application-part-1.md) of this walkthrough showed how to add an Office Fluent Ribbon to the classic Scribble application."},{"content":"This part shows how to add ribbon panels and controls that users can use instead of menus and commands.","pos":[852,955]},{"content":"Prerequisites","pos":[964,977]},{"content":"Visual C++ Samples","pos":[982,1000]},{"pos":[1056,1064],"content":"Sections"},{"content":"This part of the walkthrough has the following sections:","pos":[1068,1124]},{"content":"Adding New Panels to the Ribbon","pos":[1133,1164]},{"content":"Adding a Help Panel to the Ribbon","pos":[1188,1221]},{"content":"Adding a Pen Panel to the Ribbon","pos":[1246,1278]},{"content":"Adding a Color Button to the Ribbon","pos":[1302,1337]},{"content":"Adding a Color Member to the Document Class","pos":[1364,1407]},{"content":"Initializing Pens and Saving Preferences","pos":[1434,1474]},{"pos":[1526,1557],"content":"Adding New Panels to the Ribbon"},{"pos":[1561,1864],"content":"These steps show how to add a <bpt id=\"p1\">**</bpt>View<ept id=\"p1\">**</ept> panel that contains two check boxes that control the visibility of the toolbar and the status bar, and also a <bpt id=\"p2\">**</bpt>Window<ept id=\"p2\">**</ept> panel that contains a vertically oriented split button that controls the creation and arrangement of multiple-document interface (MDI) windows.","source":"These steps show how to add a **View** panel that contains two check boxes that control the visibility of the toolbar and the status bar, and also a **Window** panel that contains a vertically oriented split button that controls the creation and arrangement of multiple-document interface (MDI) windows."},{"content":"To add a View panel and Window panel to the ribbon bar","pos":[1875,1929]},{"pos":[1939,2033],"content":"Create a panel named <ph id=\"ph1\">`View`</ph>, which has two check boxes that toggle the status bar and toolbar.","source":"Create a panel named `View`, which has two check boxes that toggle the status bar and toolbar."},{"content":"From the <bpt id=\"p1\">**</bpt>Toolbox<ept id=\"p1\">**</ept>, drag a <bpt id=\"p2\">**</bpt>Panel<ept id=\"p2\">**</ept> to the <bpt id=\"p3\">**</bpt>Home<ept id=\"p3\">**</ept> category.","pos":[2047,2111],"source":"From the **Toolbox**, drag a **Panel** to the **Home** category."},{"content":"Then drag two <bpt id=\"p1\">**</bpt>Check Boxes<ept id=\"p1\">**</ept> to the panel.","pos":[2112,2155],"source":" Then drag two **Check Boxes** to the panel."},{"content":"Click the panel to modify its properties.","pos":[2169,2210]},{"content":"Change <bpt id=\"p1\">**</bpt>Caption<ept id=\"p1\">**</ept> to <ph id=\"ph1\">`View`</ph>.","pos":[2211,2240],"source":" Change **Caption** to `View`."},{"content":"Click the first check box to modify its properties.","pos":[2254,2305]},{"content":"Change <bpt id=\"p1\">**</bpt>ID<ept id=\"p1\">**</ept> to <ph id=\"ph1\">`ID_VIEW_TOOLBAR`</ph> and <bpt id=\"p2\">**</bpt>Caption<ept id=\"p2\">**</ept> to <ph id=\"ph2\">`Toolbar`</ph>.","pos":[2306,2370],"source":" Change **ID** to `ID_VIEW_TOOLBAR` and **Caption** to `Toolbar`."},{"content":"Click the second check box to modify its properties.","pos":[2384,2436]},{"content":"Change <bpt id=\"p1\">**</bpt>ID<ept id=\"p1\">**</ept> to <ph id=\"ph1\">`ID_VIEW_STATUS_BAR`</ph> and <bpt id=\"p2\">**</bpt>Caption<ept id=\"p2\">**</ept> to <ph id=\"ph2\">`Status Bar`</ph>.","pos":[2437,2507],"source":" Change **ID** to `ID_VIEW_STATUS_BAR` and **Caption** to `Status Bar`."},{"content":"Create a panel named <ph id=\"ph1\">`Window`</ph> that has a split button.","pos":[2517,2571],"source":"Create a panel named `Window` that has a split button."},{"content":"When a user clicks the split button, a shortcut menu displays three commands that are already defined in the Scribble application.","pos":[2572,2702]},{"content":"From the <bpt id=\"p1\">**</bpt>Toolbox<ept id=\"p1\">**</ept>, drag a <bpt id=\"p2\">**</bpt>Panel<ept id=\"p2\">**</ept> to the <bpt id=\"p3\">**</bpt>Home<ept id=\"p3\">**</ept> category.","pos":[2716,2780],"source":"From the **Toolbox**, drag a **Panel** to the **Home** category."},{"content":"Then drag a <bpt id=\"p1\">**</bpt>Button<ept id=\"p1\">**</ept> to the panel.","pos":[2781,2817],"source":" Then drag a **Button** to the panel."},{"content":"Click the panel to modify its properties.","pos":[2831,2872]},{"content":"Change <bpt id=\"p1\">**</bpt>Caption<ept id=\"p1\">**</ept> to <ph id=\"ph1\">`Window`</ph>.","pos":[2873,2904],"source":" Change **Caption** to `Window`."},{"content":"Click the button.","pos":[2918,2935]},{"content":"Change <bpt id=\"p1\">**</bpt>Caption<ept id=\"p1\">**</ept> to <ph id=\"ph1\">`Windows`</ph>, <bpt id=\"p2\">**</bpt>Keys<ept id=\"p2\">**</ept> to <ph id=\"ph2\">`w`</ph>, <bpt id=\"p3\">**</bpt>Large Image Index<ept id=\"p3\">**</ept> to <ph id=\"ph3\">`1`</ph>, and <bpt id=\"p4\">**</bpt>Split Mode<ept id=\"p4\">**</ept> to <ph id=\"ph4\">`False`</ph>.","pos":[2936,3046],"source":" Change **Caption** to `Windows`, **Keys** to `w`, **Large Image Index** to `1`, and **Split Mode** to `False`."},{"content":"Then click the ellipsis (<bpt id=\"p1\">**</bpt>...<ept id=\"p1\">**</ept>) next to <bpt id=\"p2\">**</bpt>Menu Items<ept id=\"p2\">**</ept> to open the <bpt id=\"p3\">**</bpt>Items Editor<ept id=\"p3\">**</ept> dialog box.","pos":[3047,3144],"source":" Then click the ellipsis (**...**) next to **Menu Items** to open the **Items Editor** dialog box."},{"pos":[3158,3205],"content":"Click <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept> three times to add three buttons.","source":"Click **Add** three times to add three buttons."},{"pos":[3219,3317],"content":"Click the first button and then change <bpt id=\"p1\">**</bpt>Caption<ept id=\"p1\">**</ept> to <ph id=\"ph1\">`New Window`</ph>, and <bpt id=\"p2\">**</bpt>ID<ept id=\"p2\">**</ept> to <ph id=\"ph2\">`ID_WINDOW_NEW`</ph>.","source":"Click the first button and then change **Caption** to `New Window`, and **ID** to `ID_WINDOW_NEW`."},{"pos":[3331,3431],"content":"Click the second button and then change <bpt id=\"p1\">**</bpt>Caption<ept id=\"p1\">**</ept> to <ph id=\"ph1\">`Cascade`</ph>, and <bpt id=\"p2\">**</bpt>ID<ept id=\"p2\">**</ept> to <ph id=\"ph2\">`ID_WINDOW_CASCADE`</ph>.","source":"Click the second button and then change **Caption** to `Cascade`, and **ID** to `ID_WINDOW_CASCADE`."},{"pos":[3445,3543],"content":"Click the third button and then change <bpt id=\"p1\">**</bpt>Caption<ept id=\"p1\">**</ept> to <ph id=\"ph1\">`Tile`</ph>, and <bpt id=\"p2\">**</bpt>ID<ept id=\"p2\">**</ept> to <ph id=\"ph2\">`ID_WINDOW_TILE_HORZ`</ph>.","source":"Click the third button and then change **Caption** to `Tile`, and **ID** to `ID_WINDOW_TILE_HORZ`."},{"content":"Save the changes, and then build and run the application.","pos":[3553,3610]},{"content":"The <bpt id=\"p1\">**</bpt>View<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Window<ept id=\"p2\">**</ept> panels should be displayed.","pos":[3611,3666],"source":" The **View** and **Window** panels should be displayed."},{"content":"Click the buttons to confirm that they function correctly.","pos":[3667,3725]},{"pos":[3732,3750],"content":"[<bpt id=\"p1\">[</bpt>Sections<ept id=\"p1\">](#top)</ept>]","source":"[[Sections](#top)]"},{"pos":[3788,3821],"content":"Adding a Help Panel to the Ribbon"},{"content":"Now, you can assign two menu items that are defined in the Scribble application to ribbon buttons that are named <bpt id=\"p1\">**</bpt>Help Topics<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>About Scribble<ept id=\"p2\">**</ept>.","pos":[3825,3977],"source":"Now, you can assign two menu items that are defined in the Scribble application to ribbon buttons that are named **Help Topics** and **About Scribble**."},{"content":"The buttons are added to a new panel named <bpt id=\"p1\">**</bpt>Help<ept id=\"p1\">**</ept>.","pos":[3978,4030],"source":" The buttons are added to a new panel named **Help**."},{"content":"To add a Help panel","pos":[4041,4060]},{"content":"From the <bpt id=\"p1\">**</bpt>Toolbox<ept id=\"p1\">**</ept>, drag a <bpt id=\"p2\">**</bpt>Panel<ept id=\"p2\">**</ept> to the <bpt id=\"p3\">**</bpt>Home<ept id=\"p3\">**</ept> category.","pos":[4070,4134],"source":"From the **Toolbox**, drag a **Panel** to the **Home** category."},{"content":"Then drag two <bpt id=\"p1\">**</bpt>Buttons<ept id=\"p1\">**</ept> to the panel.","pos":[4135,4174],"source":" Then drag two **Buttons** to the panel."},{"content":"Click the panel to modify its properties.","pos":[4184,4225]},{"content":"Change <bpt id=\"p1\">**</bpt>Caption<ept id=\"p1\">**</ept> to <ph id=\"ph1\">`Help`</ph>.","pos":[4226,4255],"source":" Change **Caption** to `Help`."},{"content":"Click the first button.","pos":[4265,4288]},{"content":"Change <bpt id=\"p1\">**</bpt>Caption<ept id=\"p1\">**</ept> to <ph id=\"ph1\">`Help Topics`</ph>, and <bpt id=\"p2\">**</bpt>ID<ept id=\"p2\">**</ept> to <ph id=\"ph2\">`ID_HELP_FINDER`</ph>.","pos":[4289,4357],"source":" Change **Caption** to `Help Topics`, and **ID** to `ID_HELP_FINDER`."},{"content":"Click the second button.","pos":[4367,4391]},{"content":"Change <bpt id=\"p1\">**</bpt>Caption<ept id=\"p1\">**</ept> to <ph id=\"ph1\">`About Scribble...`</ph>, and <bpt id=\"p2\">**</bpt>ID<ept id=\"p2\">**</ept> to <ph id=\"ph2\">`ID_APP_ABOUT`</ph>.","pos":[4392,4464],"source":" Change **Caption** to `About Scribble...`, and **ID** to `ID_APP_ABOUT`."},{"content":"Save the changes, and then build and run the application.","pos":[4474,4531]},{"content":"A <bpt id=\"p1\">**</bpt>Help<ept id=\"p1\">**</ept> panel that contains two ribbon buttons should be displayed.","pos":[4532,4602],"source":" A **Help** panel that contains two ribbon buttons should be displayed."},{"pos":[4614,4878],"content":"[!IMPORTANT]\n When you click the **Help Topics** button, the Scribble application opens a compressed HTML (.chm) help file named *your_project_name*.chm. Consequently, if your project is not named Scribble, you must rename the help file to your project name.","leadings":["","    > "],"nodes":[{"content":" When you click the **Help Topics** button, the Scribble application opens a compressed HTML (.chm) help file named *your_project_name*.chm. Consequently, if your project is not named Scribble, you must rename the help file to your project name.","pos":[13,258],"nodes":[{"content":"When you click the <bpt id=\"p1\">**</bpt>Help Topics<ept id=\"p1\">**</ept> button, the Scribble application opens a compressed HTML (.chm) help file named <bpt id=\"p2\">*</bpt>your_project_name<ept id=\"p2\">*</ept>.chm.","pos":[1,140],"source":" When you click the **Help Topics** button, the Scribble application opens a compressed HTML (.chm) help file named *your_project_name*.chm."},{"content":"Consequently, if your project is not named Scribble, you must rename the help file to your project name.","pos":[141,245]}]}]},{"pos":[4885,4903],"content":"[<bpt id=\"p1\">[</bpt>Sections<ept id=\"p1\">](#top)</ept>]","source":"[[Sections](#top)]"},{"pos":[4940,4972],"content":"Adding a Pen Panel to the Ribbon"},{"content":"Now, add a panel to display buttons that control the thickness and the color of the pen.","pos":[4976,5064]},{"content":"This panel contains a check box that toggles between thick and thin pens.","pos":[5065,5138]},{"content":"Its functionality resembles that of the <bpt id=\"p1\">**</bpt>Thick Line<ept id=\"p1\">**</ept> menu item in the Scribble application.","pos":[5139,5232],"source":" Its functionality resembles that of the **Thick Line** menu item in the Scribble application."},{"content":"The original Scribble application lets the user select pen widths from a dialog box that appears when the user clicks <bpt id=\"p1\">**</bpt>Pen Widths<ept id=\"p1\">**</ept> on the menu.","pos":[5239,5384],"source":"The original Scribble application lets the user select pen widths from a dialog box that appears when the user clicks **Pen Widths** on the menu."},{"content":"Because the ribbon bar has ample room for new controls, you can replace the dialog box by using two combo boxes on the ribbon.","pos":[5385,5511]},{"content":"One combo box adjusts the width of the thin pen and the other combo box adjusts the width of the thick pen.","pos":[5512,5619]},{"content":"To add a Pen panel and combo boxes to the ribbon","pos":[5630,5678]},{"content":"From the <bpt id=\"p1\">**</bpt>Toolbox<ept id=\"p1\">**</ept>, drag a <bpt id=\"p2\">**</bpt>Panel<ept id=\"p2\">**</ept> to the <bpt id=\"p3\">**</bpt>Home<ept id=\"p3\">**</ept> category.","pos":[5688,5752],"source":"From the **Toolbox**, drag a **Panel** to the **Home** category."},{"content":"Then drag a <bpt id=\"p1\">**</bpt>Check Box<ept id=\"p1\">**</ept> and two <bpt id=\"p2\">**</bpt>Combo Boxes<ept id=\"p2\">**</ept> to the panel.","pos":[5753,5816],"source":" Then drag a **Check Box** and two **Combo Boxes** to the panel."},{"content":"Click the panel to modify its properties.","pos":[5826,5867]},{"content":"Change <bpt id=\"p1\">**</bpt>Caption<ept id=\"p1\">**</ept> to <ph id=\"ph1\">`Pen`</ph>.","pos":[5868,5896],"source":" Change **Caption** to `Pen`."},{"content":"Click the check box.","pos":[5906,5926]},{"content":"Change <bpt id=\"p1\">**</bpt>Caption<ept id=\"p1\">**</ept> to <ph id=\"ph1\">`Use Thick`</ph>, and <bpt id=\"p2\">**</bpt>ID<ept id=\"p2\">**</ept> to <ph id=\"ph2\">`ID_PEN_THICK_OR_THIN`</ph>.","pos":[5927,5999],"source":" Change **Caption** to `Use Thick`, and **ID** to `ID_PEN_THICK_OR_THIN`."},{"content":"Click the first combo box.","pos":[6009,6035]},{"content":"Change <bpt id=\"p1\">**</bpt>Caption<ept id=\"p1\">**</ept> to <ph id=\"ph1\">`Thin Pen`</ph>, <bpt id=\"p2\">**</bpt>ID<ept id=\"p2\">**</ept> to <ph id=\"ph2\">`ID_PEN_THIN_WIDTH`</ph>, <bpt id=\"p3\">**</bpt>Text<ept id=\"p3\">**</ept> to <ph id=\"ph3\">`2`</ph>, <bpt id=\"p4\">**</bpt>Type<ept id=\"p4\">**</ept> to <ph id=\"ph4\">`Drop List`</ph>, and <bpt id=\"p5\">**</bpt>Data<ept id=\"p5\">**</ept> to <ph id=\"ph5\">`1;2;3;4;5;6;7;8;9;`</ph>.","pos":[6036,6180],"source":" Change **Caption** to `Thin Pen`, **ID** to `ID_PEN_THIN_WIDTH`, **Text** to `2`, **Type** to `Drop List`, and **Data** to `1;2;3;4;5;6;7;8;9;`."},{"content":"Click the second combo box.","pos":[6190,6217]},{"content":"Change <bpt id=\"p1\">**</bpt>Caption<ept id=\"p1\">**</ept> to <ph id=\"ph1\">`Thick Pen`</ph>, <bpt id=\"p2\">**</bpt>ID<ept id=\"p2\">**</ept> to <ph id=\"ph2\">`ID_PEN_THICK_WIDTH`</ph>, <bpt id=\"p3\">**</bpt>Text<ept id=\"p3\">**</ept> to <ph id=\"ph3\">`5`</ph>, <bpt id=\"p4\">**</bpt>Type<ept id=\"p4\">**</ept> to <ph id=\"ph4\">`Drop List`</ph>, and <bpt id=\"p5\">**</bpt>Data<ept id=\"p5\">**</ept> to <ph id=\"ph5\">`5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;`</ph>.","pos":[6218,6389],"source":" Change **Caption** to `Thick Pen`, **ID** to `ID_PEN_THICK_WIDTH`, **Text** to `5`, **Type** to `Drop List`, and **Data** to `5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;`."},{"content":"The new combo boxes do not correspond to any existing menu items.","pos":[6399,6464]},{"content":"Therefore, you must create a menu item for every pen option.","pos":[6465,6525]},{"pos":[6539,6610],"content":"In the <bpt id=\"p1\">**</bpt>Resource View<ept id=\"p1\">**</ept> window, open the IDR_SCRIBBTYPE menu resource.","source":"In the **Resource View** window, open the IDR_SCRIBBTYPE menu resource."},{"content":"Click <bpt id=\"p1\">**</bpt>Pen<ept id=\"p1\">**</ept> to open the p<bpt id=\"p2\">**</bpt>en<ept id=\"p2\">**</ept> menu.","pos":[6624,6663],"source":"Click **Pen** to open the p**en** menu."},{"content":"Then click <bpt id=\"p1\">**</bpt>Type Here<ept id=\"p1\">**</ept> and type <ph id=\"ph1\">`Thi&amp;n Pen`</ph>.","pos":[6664,6710],"source":" Then click **Type Here** and type `Thi&n Pen`."},{"pos":[6724,6855],"content":"Right-click the text that you just typed to open the <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> window, and then change the ID property to <ph id=\"ph1\">`ID_PEN_THIN_WIDTH`</ph>.","source":"Right-click the text that you just typed to open the **Properties** window, and then change the ID property to `ID_PEN_THIN_WIDTH`."},{"content":"You must also create an event handler for every pen menu item.","pos":[6869,6931]},{"content":"Right-click the <bpt id=\"p1\">**</bpt>Thi&amp;n Pen<ept id=\"p1\">**</ept> menu item that you just created and then click <bpt id=\"p2\">**</bpt>Add Event Handler<ept id=\"p2\">**</ept>.","pos":[6932,7031],"source":" Right-click the **Thi&n Pen** menu item that you just created and then click **Add Event Handler**."},{"content":"The <bpt id=\"p1\">**</bpt>Event Handler Wizard<ept id=\"p1\">**</ept> is displayed.","pos":[7032,7074],"source":" The **Event Handler Wizard** is displayed."},{"content":"In the <bpt id=\"p1\">**</bpt>Class list<ept id=\"p1\">**</ept> box in the wizard, select <bpt id=\"p2\">**</bpt>CScribbleDoc<ept id=\"p2\">**</ept> and then click <bpt id=\"p3\">**</bpt>Add and Edit<ept id=\"p3\">**</ept>.","pos":[7088,7185],"source":"In the **Class list** box in the wizard, select **CScribbleDoc** and then click **Add and Edit**."},{"content":"This creates an event handler named <ph id=\"ph1\">`CScribbleDoc::OnPenThinWidth`</ph>.","pos":[7186,7253],"source":" This creates an event handler named `CScribbleDoc::OnPenThinWidth`."},{"pos":[7267,7324],"content":"Add the following code to <ph id=\"ph1\">`CScribbleDoc::OnPenThinWidth`</ph>.","source":"Add the following code to `CScribbleDoc::OnPenThinWidth`."},{"pos":[7331,7802],"content":"``` *// Get a pointer to the ribbon bar  \nCMFCRibbonBar* pRibbon = ((CMDIFrameWndEx*) AfxGetMainWnd())->GetRibbonBar();\nASSERT_VALID(pRibbon);\n*// Get a pointer to the Thin Width combo box  \nCMFCRibbonComboBox* pThinComboBox = DYNAMIC_DOWNCAST(\nCMFCRibbonComboBox, pRibbon->FindByID(ID_PEN_THIN_WIDTH));\n*//Get the selected value  \nint nCurSel = pThinComboBox->GetCurSel();\nif (nCurSel>= 0)  \n{  \nm_nThinWidth = atoi(pThinComboBox->GetItem(nCurSel));","leadings":["","    ","","","    ","    ","","    ",""," ","    "],"nodes":[{"content":"<bpt id=\"p1\">*</bpt>// Get a pointer to the ribbon bar CMFCRibbonBar<ept id=\"p1\">*</ept> pRibbon = ((CMDIFrameWndEx<bpt id=\"p2\">*</bpt>) AfxGetMainWnd())-&gt;GetRibbonBar(); ASSERT_VALID(pRibbon); <ept id=\"p2\">*</ept>// Get a pointer to the Thin Width combo box","pos":[4,188],"source":"*// Get a pointer to the ribbon bar  \nCMFCRibbonBar* pRibbon = ((CMDIFrameWndEx*) AfxGetMainWnd())->GetRibbonBar();\nASSERT_VALID(pRibbon);\n*// Get a pointer to the Thin Width combo box"},{"content":"CMFCRibbonComboBox<bpt id=\"p1\">*</bpt> pThinComboBox = DYNAMIC_DOWNCAST( CMFCRibbonComboBox, pRibbon-&gt;FindByID(ID_PEN_THIN_WIDTH)); <ept id=\"p1\">*</ept>//Get the selected value","pos":[191,329],"source":"CMFCRibbonComboBox* pThinComboBox = DYNAMIC_DOWNCAST(\nCMFCRibbonComboBox, pRibbon->FindByID(ID_PEN_THIN_WIDTH));\n*//Get the selected value"},{"content":"int nCurSel = pThinComboBox-&gt;GetCurSel(); if (nCurSel&gt;= 0)","pos":[332,390],"source":"int nCurSel = pThinComboBox->GetCurSel();\nif (nCurSel>= 0)"},{"content":"{","pos":[393,394]},{"content":"m_nThinWidth = atoi(pThinComboBox-&gt;GetItem(nCurSel));","pos":[397,450],"source":"m_nThinWidth = atoi(pThinComboBox->GetItem(nCurSel));"}]},{"pos":[7805,7872],"content":"} *// Create a new pen using the selected width  \nReplacePen();","leadings":["","    "],"nodes":[{"content":"} *// Create a new pen using the selected width","pos":[0,47]},{"content":"ReplacePen();","pos":[50,63]}]},{"content":"Save the changes, and then build and run the application.","pos":[9201,9258]},{"content":"New buttons and combo boxes should be displayed.","pos":[9259,9307]},{"content":"Try using different pen widths to scribble.","pos":[9308,9351]},{"pos":[9358,9376],"content":"[<bpt id=\"p1\">[</bpt>Sections<ept id=\"p1\">](#top)</ept>]","source":"[[Sections](#top)]"},{"pos":[9416,9454],"content":"Adding a Color Button to the Pen Panel"},{"pos":[9458,9587],"content":"Next, add a <bpt id=\"p1\">[</bpt>CMFCRibbonColorButton<ept id=\"p1\">](../mfc/reference/cmfcribboncolorbutton-class.md)</ept> object that lets the user scribble in color.","source":"Next, add a [CMFCRibbonColorButton](../mfc/reference/cmfcribboncolorbutton-class.md) object that lets the user scribble in color."},{"content":"To add a color button to the Pen panel","pos":[9598,9636]},{"content":"Before you add the color button, create a menu item for it.","pos":[9646,9705]},{"content":"In the <bpt id=\"p1\">**</bpt>Resource View<ept id=\"p1\">**</ept> window, open the IDR_SCRIBBTYPE menu resource.","pos":[9706,9777],"source":" In the **Resource View** window, open the IDR_SCRIBBTYPE menu resource."},{"content":"Click the <bpt id=\"p1\">**</bpt>Pen<ept id=\"p1\">**</ept> menu item to open the pen menu.","pos":[9778,9827],"source":" Click the **Pen** menu item to open the pen menu."},{"content":"Then click <bpt id=\"p1\">**</bpt>Type Here<ept id=\"p1\">**</ept> and type <ph id=\"ph1\">`&amp;Color`</ph>.","pos":[9828,9871],"source":" Then click **Type Here** and type `&Color`."},{"content":"Right-click the text that you just typed to display the <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> window.","pos":[9872,9950],"source":" Right-click the text that you just typed to display the **Properties** window."},{"content":"Change the ID to <ph id=\"ph1\">`ID_PEN_COLOR`</ph>.","pos":[9951,9983],"source":" Change the ID to `ID_PEN_COLOR`."},{"content":"Now add the color button.","pos":[9993,10018]},{"content":"From the <bpt id=\"p1\">**</bpt>Toolbox<ept id=\"p1\">**</ept>, drag a <bpt id=\"p2\">**</bpt>Color Button<ept id=\"p2\">**</ept> to the <bpt id=\"p3\">**</bpt>Pen<ept id=\"p3\">**</ept> panel.","pos":[10019,10086],"source":" From the **Toolbox**, drag a **Color Button** to the **Pen** panel."},{"content":"Click the color button.","pos":[10096,10119]},{"content":"Change <bpt id=\"p1\">**</bpt>Caption<ept id=\"p1\">**</ept> to <ph id=\"ph1\">`Color`</ph>, <bpt id=\"p2\">**</bpt>ID<ept id=\"p2\">**</ept> to <ph id=\"ph2\">`ID_PEN_COLOR`</ph>, <bpt id=\"p3\">**</bpt>SimpleLook<ept id=\"p3\">**</ept> to <ph id=\"ph3\">`True`</ph>, <bpt id=\"p4\">**</bpt>Large Image Index<ept id=\"p4\">**</ept> to <ph id=\"ph4\">`1`</ph>, and <bpt id=\"p5\">**</bpt>Split Mode<ept id=\"p5\">**</ept> to <ph id=\"ph5\">`False`</ph>.","pos":[10120,10263],"source":" Change **Caption** to `Color`, **ID** to `ID_PEN_COLOR`, **SimpleLook** to `True`, **Large Image Index** to `1`, and **Split Mode** to `False`."},{"content":"Save the changes, and then build and run the application.","pos":[10273,10330]},{"content":"The new color button should be displayed on the <bpt id=\"p1\">**</bpt>Pen<ept id=\"p1\">**</ept> panel.","pos":[10331,10393],"source":" The new color button should be displayed on the **Pen** panel."},{"content":"However, it cannot be used because it does not yet have an event handler.","pos":[10394,10467]},{"content":"The next steps show how to add an event handler for the color button.","pos":[10468,10537]},{"pos":[10544,10562],"content":"[<bpt id=\"p1\">[</bpt>Sections<ept id=\"p1\">](#top)</ept>]","source":"[[Sections](#top)]"},{"pos":[10602,10645],"content":"Adding a Color Member to the Document Class"},{"content":"Because the original Scribble application does not have color pens, you must write an implementation for them.","pos":[10649,10759]},{"content":"To store the pen color of the document, add a new member to the document class,","pos":[10760,10839]},{"content":"To add a color member to the document class","pos":[10866,10909]},{"content":"In scribdoc.h, in the <ph id=\"ph1\">`CScribbleDoc`</ph> class, find the <ph id=\"ph2\">`// Attributes`</ph> section.","pos":[10919,10996],"source":"In scribdoc.h, in the `CScribbleDoc` class, find the `// Attributes` section."},{"content":"Add the following lines of code after the definition of the <ph id=\"ph1\">`m_nThickWidth`</ph> data member.","pos":[10997,11085],"source":" Add the following lines of code after the definition of the `m_nThickWidth` data member."},{"pos":[11092,11144],"content":"``` *// Current pen color  \nCOLORREF m_penColor;","leadings":["","    "],"nodes":[{"content":"``` *// Current pen color","pos":[0,25]},{"content":"COLORREF m_penColor;","pos":[28,48]}]},{"content":"In scribdoc.h, add a new <ph id=\"ph1\">`CStroke`</ph> constructor whose parameters specify a width and color.","pos":[11594,11684],"source":"In scribdoc.h, add a new `CStroke` constructor whose parameters specify a width and color."},{"content":"Add the following line of code after the <ph id=\"ph1\">`CStroke(UINT nPenWidth);`</ph> statement.","pos":[11685,11763],"source":" Add the following line of code after the `CStroke(UINT nPenWidth);` statement."},{"content":"In scribdoc.cpp, add the implementation of the new <ph id=\"ph1\">`CStroke`</ph> constructor.","pos":[11839,11912],"source":"In scribdoc.cpp, add the implementation of the new `CStroke` constructor."},{"content":"Add the following code after the implementation of the <ph id=\"ph1\">`CStroke::CStroke(UINT nPenWidth)`</ph> constructor.","pos":[11913,12015],"source":" Add the following code after the implementation of the `CStroke::CStroke(UINT nPenWidth)` constructor."},{"pos":[12022,12250],"content":"``` *// Constructor that uses the document's current width and color  \nCStroke::CStroke(UINT nPenWidth, COLORREF penColor)  \n{  \nm_nPenWidth = nPenWidth;  \nm_penColor = penColor;  \nm_rectBounding.SetRectEmpty();","leadings":["","    "," ","    ","    ","    "],"nodes":[{"content":"``` *// Constructor that uses the document's current width and color","pos":[0,68]},{"content":"CStroke::CStroke(UINT nPenWidth, COLORREF penColor)","pos":[71,122]},{"content":"{","pos":[125,126]},{"content":"m_nPenWidth = nPenWidth;","pos":[129,153]},{"content":"m_penColor = penColor;","pos":[156,178]},{"content":"m_rectBounding.SetRectEmpty();","pos":[181,211]}]},{"content":"}","pos":[12253,12254]},{"pos":[12358,12426],"content":"if (!penStroke.CreatePen(PS_SOLID, m_nPenWidth, m_penColor))","leadings":["","    ","    "],"source":"if (!penStroke.CreatePen(PS_SOLID,\nm_nPenWidth,\nm_penColor))"},{"pos":[12706,12802],"content":"In scribdoc.cpp, change the first line of the <ph id=\"ph1\">`CScribbleDoc::NewStroke`</ph> method to the following.","source":"In scribdoc.cpp, change the first line of the `CScribbleDoc::NewStroke` method to the following."},{"pos":[12895,12974],"content":"Change the last line of the <ph id=\"ph1\">`CScribbleDoc::ReplacePen`</ph> method to the following.","source":"Change the last line of the `CScribbleDoc::ReplacePen` method to the following."},{"content":"You added the <ph id=\"ph1\">`m_penColor`</ph> member in a previous step.","pos":[13068,13121],"source":"You added the `m_penColor` member in a previous step."},{"content":"Now, create an event handler for the color button that sets the member.","pos":[13122,13193]},{"pos":[13207,13278],"content":"In the <bpt id=\"p1\">**</bpt>Resource View<ept id=\"p1\">**</ept> window, open the IDR_SCRIBBTYPE menu resource.","source":"In the **Resource View** window, open the IDR_SCRIBBTYPE menu resource."},{"content":"Right-click the <bpt id=\"p1\">**</bpt>Color<ept id=\"p1\">**</ept> menu item and click <bpt id=\"p2\">**</bpt>Add Event Handler…<ept id=\"p2\">**</ept>.","pos":[13292,13361],"source":"Right-click the **Color** menu item and click **Add Event Handler…**."},{"content":"The <bpt id=\"p1\">**</bpt>Event Handler Wizard<ept id=\"p1\">**</ept> appears.","pos":[13362,13399],"source":" The **Event Handler Wizard** appears."},{"content":"In the <bpt id=\"p1\">**</bpt>Class list<ept id=\"p1\">**</ept> box in the wizard, select <bpt id=\"p2\">**</bpt>CScribbleDoc<ept id=\"p2\">**</ept> and then click the <bpt id=\"p3\">**</bpt>Add and Edit<ept id=\"p3\">**</ept> button.","pos":[13413,13521],"source":"In the **Class list** box in the wizard, select **CScribbleDoc** and then click the **Add and Edit** button."},{"content":"This creates the <ph id=\"ph1\">`CScribbleDoc::OnPenColor`</ph> event handler stub.","pos":[13522,13585],"source":" This creates the `CScribbleDoc::OnPenColor` event handler stub."},{"pos":[13595,13685],"content":"Replace the stub for the <ph id=\"ph1\">`CScribbleDoc::OnPenColor`</ph> event handler with the following code.","source":"Replace the stub for the `CScribbleDoc::OnPenColor` event handler with the following code."},{"content":"Save the changes and then build and run the application.","pos":[14152,14208]},{"content":"You should be able to press the color button and change the pen's color.","pos":[14209,14281]},{"pos":[14288,14306],"content":"[<bpt id=\"p1\">[</bpt>Sections<ept id=\"p1\">](#top)</ept>]","source":"[[Sections](#top)]"},{"pos":[14343,14383],"content":"Initializing Pens and Saving Preferences"},{"content":"Next, initialize the color and width of the pens.","pos":[14387,14436]},{"content":"Finally, save and load a color drawing from a file.","pos":[14437,14488]},{"content":"To initialize controls on the ribbon bar","pos":[14499,14539]},{"content":"Initialize the pens on the ribbon bar.","pos":[14549,14587]},{"pos":[14598,14731],"content":"Add the following code to scribdoc.cpp, in the <ph id=\"ph1\">`CScribbleDoc::InitDocument`</ph> method, after the <ph id=\"ph2\">`m_sizeDoc = CSize(200,200)`</ph> statement.","source":"Add the following code to scribdoc.cpp, in the `CScribbleDoc::InitDocument` method, after the `m_sizeDoc = CSize(200,200)` statement."},{"pos":[14738,14896],"content":"<ph id=\"ph1\">``` </ph><bpt id=\"p1\">*</bpt>// Reset the ribbon UI to its initial values CMFCRibbonBar<ept id=\"p1\">*</ept> pRibbon = ((CMDIFrameWndEx*) AfxGetMainWnd())-&gt;GetRibbonBar(); ASSERT_VALID(pRibbon);","leadings":["","    "," ",""],"source":"``` *// Reset the ribbon UI to its initial values  \nCMFCRibbonBar* pRibbon = \n((CMDIFrameWndEx*) AfxGetMainWnd())->GetRibbonBar();\nASSERT_VALID(pRibbon);"},{"pos":[14899,15095],"content":"CMFCRibbonColorButton* pColorBtn = DYNAMIC_DOWNCAST(\nCMFCRibbonColorButton, \npRibbon->FindByID(ID_PEN_COLOR));\n*// Set ColorButton to black  \npColorBtn->SetColor(RGB(0,\n0,\n0));","leadings":["","    ","    ","","    ","    ","    "],"nodes":[{"content":"CMFCRibbonColorButton<bpt id=\"p1\">*</bpt> pColorBtn = DYNAMIC_DOWNCAST( CMFCRibbonColorButton, pRibbon-&gt;FindByID(ID_PEN_COLOR)); <ept id=\"p1\">*</ept>// Set ColorButton to black","pos":[0,139],"source":"CMFCRibbonColorButton* pColorBtn = DYNAMIC_DOWNCAST(\nCMFCRibbonColorButton, \npRibbon->FindByID(ID_PEN_COLOR));\n*// Set ColorButton to black"},{"content":"pColorBtn-&gt;SetColor(RGB(0, 0, 0));","pos":[142,176],"source":"pColorBtn->SetColor(RGB(0,\n0,\n0));"}]},{"pos":[15098,15286],"content":"CMFCRibbonComboBox* pThinComboBox = DYNAMIC_DOWNCAST(\nCMFCRibbonComboBox, \npRibbon->FindByID(ID_PEN_THIN_WIDTH));\n*// Set Thin pen combobox to 2  \npThinComboBox->SelectItem(1);","leadings":["","    ","    ","","    "],"nodes":[{"content":"CMFCRibbonComboBox<bpt id=\"p1\">*</bpt> pThinComboBox = DYNAMIC_DOWNCAST( CMFCRibbonComboBox, pRibbon-&gt;FindByID(ID_PEN_THIN_WIDTH)); <ept id=\"p1\">*</ept>// Set Thin pen combobox to 2","pos":[0,144],"source":"CMFCRibbonComboBox* pThinComboBox = DYNAMIC_DOWNCAST(\nCMFCRibbonComboBox, \npRibbon->FindByID(ID_PEN_THIN_WIDTH));\n*// Set Thin pen combobox to 2"},{"content":"pThinComboBox-&gt;SelectItem(1);","pos":[147,176],"source":"pThinComboBox->SelectItem(1);"}]},{"pos":[15289,15481],"content":"CMFCRibbonComboBox* pThickComboBox = DYNAMIC_DOWNCAST(\nCMFCRibbonComboBox, \npRibbon->FindByID(ID_PEN_THICK_WIDTH));\n*// Set Thick pen combobox to 5  \npThickComboBox->SelectItem(0);","leadings":["","    ","    ","","    "],"nodes":[{"content":"CMFCRibbonComboBox<bpt id=\"p1\">*</bpt> pThickComboBox = DYNAMIC_DOWNCAST( CMFCRibbonComboBox, pRibbon-&gt;FindByID(ID_PEN_THICK_WIDTH)); <ept id=\"p1\">*</ept>// Set Thick pen combobox to 5","pos":[0,147],"source":"CMFCRibbonComboBox* pThickComboBox = DYNAMIC_DOWNCAST(\nCMFCRibbonComboBox, \npRibbon->FindByID(ID_PEN_THICK_WIDTH));\n*// Set Thick pen combobox to 5"},{"content":"pThickComboBox-&gt;SelectItem(0);","pos":[150,180],"source":"pThickComboBox->SelectItem(0);"}]},{"content":"ar &lt;&lt;(COLORREF)m_penColor;","pos":[15674,15700],"source":"ar <<(COLORREF)m_penColor;"},{"content":"ar&gt;&gt; m_penColor;","pos":[15884,15900],"source":"ar>> m_penColor;"}],"content":"---\ntitle: \"Walkthrough: Updating the MFC Scribble Application (Part 2) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"walkthroughs [C++]\"\nms.assetid: 602df5c2-17d4-4cd9-8cf6-dff652c4cae5\ncaps.latest.revision: 36\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Walkthrough: Updating the MFC Scribble Application (Part 2)\n[Part 1](../mfc/walkthrough-updating-the-mfc-scribble-application-part-1.md) of this walkthrough showed how to add an Office Fluent Ribbon to the classic Scribble application. This part shows how to add ribbon panels and controls that users can use instead of menus and commands.  \n  \n## Prerequisites  \n [Visual C++ Samples](../visual-cpp-samples.md)  \n  \n##  <a name=\"top\"></a> Sections  \n This part of the walkthrough has the following sections:  \n  \n- [Adding New Panels to the Ribbon](#addnewpanel)  \n  \n- [Adding a Help Panel to the Ribbon](#addhelppanel)  \n  \n- [Adding a Pen Panel to the Ribbon](#addpenpanel)  \n  \n- [Adding a Color Button to the Ribbon](#addcolorbutton)  \n  \n- [Adding a Color Member to the Document Class](#addcolormember)  \n  \n- [Initializing Pens and Saving Preferences](#initpensave)  \n  \n##  <a name=\"addnewpanel\"></a> Adding New Panels to the Ribbon  \n These steps show how to add a **View** panel that contains two check boxes that control the visibility of the toolbar and the status bar, and also a **Window** panel that contains a vertically oriented split button that controls the creation and arrangement of multiple-document interface (MDI) windows.  \n  \n#### To add a View panel and Window panel to the ribbon bar  \n  \n1.  Create a panel named `View`, which has two check boxes that toggle the status bar and toolbar.  \n  \n    1.  From the **Toolbox**, drag a **Panel** to the **Home** category. Then drag two **Check Boxes** to the panel.  \n  \n    2.  Click the panel to modify its properties. Change **Caption** to `View`.  \n  \n    3.  Click the first check box to modify its properties. Change **ID** to `ID_VIEW_TOOLBAR` and **Caption** to `Toolbar`.  \n  \n    4.  Click the second check box to modify its properties. Change **ID** to `ID_VIEW_STATUS_BAR` and **Caption** to `Status Bar`.  \n  \n2.  Create a panel named `Window` that has a split button. When a user clicks the split button, a shortcut menu displays three commands that are already defined in the Scribble application.  \n  \n    1.  From the **Toolbox**, drag a **Panel** to the **Home** category. Then drag a **Button** to the panel.  \n  \n    2.  Click the panel to modify its properties. Change **Caption** to `Window`.  \n  \n    3.  Click the button. Change **Caption** to `Windows`, **Keys** to `w`, **Large Image Index** to `1`, and **Split Mode** to `False`. Then click the ellipsis (**...**) next to **Menu Items** to open the **Items Editor** dialog box.  \n  \n    4.  Click **Add** three times to add three buttons.  \n  \n    5.  Click the first button and then change **Caption** to `New Window`, and **ID** to `ID_WINDOW_NEW`.  \n  \n    6.  Click the second button and then change **Caption** to `Cascade`, and **ID** to `ID_WINDOW_CASCADE`.  \n  \n    7.  Click the third button and then change **Caption** to `Tile`, and **ID** to `ID_WINDOW_TILE_HORZ`.  \n  \n3.  Save the changes, and then build and run the application. The **View** and **Window** panels should be displayed. Click the buttons to confirm that they function correctly.  \n  \n [[Sections](#top)]  \n  \n##  <a name=\"addhelppanel\"></a> Adding a Help Panel to the Ribbon  \n Now, you can assign two menu items that are defined in the Scribble application to ribbon buttons that are named **Help Topics** and **About Scribble**. The buttons are added to a new panel named **Help**.  \n  \n#### To add a Help panel  \n  \n1.  From the **Toolbox**, drag a **Panel** to the **Home** category. Then drag two **Buttons** to the panel.  \n  \n2.  Click the panel to modify its properties. Change **Caption** to `Help`.  \n  \n3.  Click the first button. Change **Caption** to `Help Topics`, and **ID** to `ID_HELP_FINDER`.  \n  \n4.  Click the second button. Change **Caption** to `About Scribble...`, and **ID** to `ID_APP_ABOUT`.  \n  \n5.  Save the changes, and then build and run the application. A **Help** panel that contains two ribbon buttons should be displayed.  \n  \n    > [!IMPORTANT]\n    >  When you click the **Help Topics** button, the Scribble application opens a compressed HTML (.chm) help file named *your_project_name*.chm. Consequently, if your project is not named Scribble, you must rename the help file to your project name.  \n  \n [[Sections](#top)]  \n  \n##  <a name=\"addpenpanel\"></a> Adding a Pen Panel to the Ribbon  \n Now, add a panel to display buttons that control the thickness and the color of the pen. This panel contains a check box that toggles between thick and thin pens. Its functionality resembles that of the **Thick Line** menu item in the Scribble application.  \n  \n The original Scribble application lets the user select pen widths from a dialog box that appears when the user clicks **Pen Widths** on the menu. Because the ribbon bar has ample room for new controls, you can replace the dialog box by using two combo boxes on the ribbon. One combo box adjusts the width of the thin pen and the other combo box adjusts the width of the thick pen.  \n  \n#### To add a Pen panel and combo boxes to the ribbon  \n  \n1.  From the **Toolbox**, drag a **Panel** to the **Home** category. Then drag a **Check Box** and two **Combo Boxes** to the panel.  \n  \n2.  Click the panel to modify its properties. Change **Caption** to `Pen`.  \n  \n3.  Click the check box. Change **Caption** to `Use Thick`, and **ID** to `ID_PEN_THICK_OR_THIN`.  \n  \n4.  Click the first combo box. Change **Caption** to `Thin Pen`, **ID** to `ID_PEN_THIN_WIDTH`, **Text** to `2`, **Type** to `Drop List`, and **Data** to `1;2;3;4;5;6;7;8;9;`.  \n  \n5.  Click the second combo box. Change **Caption** to `Thick Pen`, **ID** to `ID_PEN_THICK_WIDTH`, **Text** to `5`, **Type** to `Drop List`, and **Data** to `5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;`.  \n  \n6.  The new combo boxes do not correspond to any existing menu items. Therefore, you must create a menu item for every pen option.  \n  \n    1.  In the **Resource View** window, open the IDR_SCRIBBTYPE menu resource.  \n  \n    2.  Click **Pen** to open the p**en** menu. Then click **Type Here** and type `Thi&n Pen`.  \n  \n    3.  Right-click the text that you just typed to open the **Properties** window, and then change the ID property to `ID_PEN_THIN_WIDTH`.  \n  \n    4.  You must also create an event handler for every pen menu item. Right-click the **Thi&n Pen** menu item that you just created and then click **Add Event Handler**. The **Event Handler Wizard** is displayed.  \n  \n    5.  In the **Class list** box in the wizard, select **CScribbleDoc** and then click **Add and Edit**. This creates an event handler named `CScribbleDoc::OnPenThinWidth`.  \n  \n    6.  Add the following code to `CScribbleDoc::OnPenThinWidth`.  \n  \n ``` *// Get a pointer to the ribbon bar  \n    CMFCRibbonBar* pRibbon = ((CMDIFrameWndEx*) AfxGetMainWnd())->GetRibbonBar();\nASSERT_VALID(pRibbon);\n*// Get a pointer to the Thin Width combo box  \n    CMFCRibbonComboBox* pThinComboBox = DYNAMIC_DOWNCAST(\n    CMFCRibbonComboBox, pRibbon->FindByID(ID_PEN_THIN_WIDTH));\n*//Get the selected value  \n    int nCurSel = pThinComboBox->GetCurSel();\nif (nCurSel>= 0)  \n {  \n    m_nThinWidth = atoi(pThinComboBox->GetItem(nCurSel));\n\n } *// Create a new pen using the selected width  \n    ReplacePen();\n\n ```  \n  \n7.  Next, create a menu item and event handlers for the thick pen.  \n  \n    1.  In the **Resource View** window, open the IDR_SCRIBBTYPE menu resource.  \n  \n    2.  Click **Pen** to open the pen menu. Then click **Type Here** and type `Thic&k Pen`.  \n  \n    3.  Right-click the text that you just typed to display the **Properties** window. Change the ID property to `ID_PEN_THICK_WIDTH`.  \n  \n    4.  Right-click the **Thick Pen** menu item that you just created and then click **Add Event Handler**. The **Event Handler Wizard** is displayed.  \n  \n    5.  In the **Class list** box of the wizard, select **CScribbleDoc** and then click **Add and Edit**. This creates an event handler named `CScribbleDoc::OnPenThickWidth`.  \n  \n    6.  Add the following code to `CScribbleDoc::OnPenThickWidth`.  \n  \n ``` *// Get a pointer to the ribbon bar  \n    CMFCRibbonBar* pRibbon = ((CMDIFrameWndEx *) AfxGetMainWnd())->GetRibbonBar();\nASSERT_VALID(pRibbon);\n\n CMFCRibbonComboBox* pThickComboBox = DYNAMIC_DOWNCAST(\n    CMFCRibbonComboBox, pRibbon->FindByID(ID_PEN_THICK_WIDTH));\n*// Get the selected value  \n    int nCurSel = pThickComboBox->GetCurSel();\nif (nCurSel>= 0)  \n {  \n    m_nThickWidth = atoi(pThickComboBox->GetItem(nCurSel));\n\n } *// Create a new pen using the selected width  \n    ReplacePen();\n\n ```  \n  \n8.  Save the changes, and then build and run the application. New buttons and combo boxes should be displayed. Try using different pen widths to scribble.  \n  \n [[Sections](#top)]  \n  \n##  <a name=\"addcolorbutton\"></a> Adding a Color Button to the Pen Panel  \n Next, add a [CMFCRibbonColorButton](../mfc/reference/cmfcribboncolorbutton-class.md) object that lets the user scribble in color.  \n  \n#### To add a color button to the Pen panel  \n  \n1.  Before you add the color button, create a menu item for it. In the **Resource View** window, open the IDR_SCRIBBTYPE menu resource. Click the **Pen** menu item to open the pen menu. Then click **Type Here** and type `&Color`. Right-click the text that you just typed to display the **Properties** window. Change the ID to `ID_PEN_COLOR`.  \n  \n2.  Now add the color button. From the **Toolbox**, drag a **Color Button** to the **Pen** panel.  \n  \n3.  Click the color button. Change **Caption** to `Color`, **ID** to `ID_PEN_COLOR`, **SimpleLook** to `True`, **Large Image Index** to `1`, and **Split Mode** to `False`.  \n  \n4.  Save the changes, and then build and run the application. The new color button should be displayed on the **Pen** panel. However, it cannot be used because it does not yet have an event handler. The next steps show how to add an event handler for the color button.  \n  \n [[Sections](#top)]  \n  \n##  <a name=\"addcolormember\"></a> Adding a Color Member to the Document Class  \n Because the original Scribble application does not have color pens, you must write an implementation for them. To store the pen color of the document, add a new member to the document class, `CscribbleDoc.`  \n  \n#### To add a color member to the document class  \n  \n1.  In scribdoc.h, in the `CScribbleDoc` class, find the `// Attributes` section. Add the following lines of code after the definition of the `m_nThickWidth` data member.  \n  \n ``` *// Current pen color  \n    COLORREF m_penColor;  \n ```  \n  \n2.  Every document contains a list of stokes that the user has already drawn. Every stroke is defined by a `CStroke` object. The `CStroke` class does not include information about pen color. Therefore, you must modify the class. In scribdoc.h, in the `CStroke` class, add the following lines of code after the definition of the `m_nPenWidth` data member.  \n  \n ``` *// Pen color for the stroke  \n    COLORREF m_penColor;  \n ```  \n  \n3.  In scribdoc.h, add a new `CStroke` constructor whose parameters specify a width and color. Add the following line of code after the `CStroke(UINT nPenWidth);` statement.  \n  \n ```  \n    CStroke(UINT nPenWidth, COLORREF penColor);\n\n ```  \n  \n4.  In scribdoc.cpp, add the implementation of the new `CStroke` constructor. Add the following code after the implementation of the `CStroke::CStroke(UINT nPenWidth)` constructor.  \n  \n ``` *// Constructor that uses the document's current width and color  \n    CStroke::CStroke(UINT nPenWidth, COLORREF penColor)  \n {  \n    m_nPenWidth = nPenWidth;  \n    m_penColor = penColor;  \n    m_rectBounding.SetRectEmpty();\n\n }  \n ```  \n  \n5.  Change the second line of the `CStroke::DrawStroke` method as follows.  \n  \n ```  \n    if (!penStroke.CreatePen(PS_SOLID,\n    m_nPenWidth,\n    m_penColor))  \n ```  \n  \n6.  Set the default pen color for the document class. In scribdoc.cpp, add the following lines to `CScribbleDoc::InitDocument`, after the `m_nThickWidth = 5;` statement.  \n  \n ``` *// default pen color is black  \n    m_penColor = RGB(0,\n    0,\n    0);\n\n ```  \n  \n7.  In scribdoc.cpp, change the first line of the `CScribbleDoc::NewStroke` method to the following.  \n  \n ```  \n    CStroke* pStrokeItem = new CStroke(m_nPenWidth, m_penColor);\n\n ```  \n  \n8.  Change the last line of the `CScribbleDoc::ReplacePen` method to the following.  \n  \n ```  \n    m_penCur.CreatePen(PS_SOLID,\n    m_nPenWidth,\n    m_penColor);\n\n ```  \n  \n9. You added the `m_penColor` member in a previous step. Now, create an event handler for the color button that sets the member.  \n  \n    1.  In the **Resource View** window, open the IDR_SCRIBBTYPE menu resource.  \n  \n    2.  Right-click the **Color** menu item and click **Add Event Handler…**. The **Event Handler Wizard** appears.  \n  \n    3.  In the **Class list** box in the wizard, select **CScribbleDoc** and then click the **Add and Edit** button. This creates the `CScribbleDoc::OnPenColor` event handler stub.  \n  \n10. Replace the stub for the `CScribbleDoc::OnPenColor` event handler with the following code.  \n  \n ```  \n    void CScribbleDoc::OnPenColor()  \n { *// Change pen color to reflect color button's current selection  \n    CMFCRibbonBar* pRibbon = ((CMDIFrameWndEx*) AfxGetMainWnd())->GetRibbonBar();\nASSERT_VALID(pRibbon);\n\n CMFCRibbonColorButton* pColorBtn = DYNAMIC_DOWNCAST(\n    CMFCRibbonColorButton, pRibbon->FindByID(ID_PEN_COLOR));\n\n    m_penColor = pColorBtn->GetColor();\n*// Create new pen using the selected color  \n    ReplacePen();\n\n }  \n ```  \n  \n11. Save the changes and then build and run the application. You should be able to press the color button and change the pen's color.  \n  \n [[Sections](#top)]  \n  \n##  <a name=\"initpensave\"></a> Initializing Pens and Saving Preferences  \n Next, initialize the color and width of the pens. Finally, save and load a color drawing from a file.  \n  \n#### To initialize controls on the ribbon bar  \n  \n1.  Initialize the pens on the ribbon bar.  \n  \n     Add the following code to scribdoc.cpp, in the `CScribbleDoc::InitDocument` method, after the `m_sizeDoc = CSize(200,200)` statement.  \n  \n ``` *// Reset the ribbon UI to its initial values  \n    CMFCRibbonBar* pRibbon = \n ((CMDIFrameWndEx*) AfxGetMainWnd())->GetRibbonBar();\nASSERT_VALID(pRibbon);\n\n CMFCRibbonColorButton* pColorBtn = DYNAMIC_DOWNCAST(\n    CMFCRibbonColorButton, \n    pRibbon->FindByID(ID_PEN_COLOR));\n*// Set ColorButton to black  \n    pColorBtn->SetColor(RGB(0,\n    0,\n    0));\n\n CMFCRibbonComboBox* pThinComboBox = DYNAMIC_DOWNCAST(\n    CMFCRibbonComboBox, \n    pRibbon->FindByID(ID_PEN_THIN_WIDTH));\n*// Set Thin pen combobox to 2  \n    pThinComboBox->SelectItem(1);\n\n CMFCRibbonComboBox* pThickComboBox = DYNAMIC_DOWNCAST(\n    CMFCRibbonComboBox, \n    pRibbon->FindByID(ID_PEN_THICK_WIDTH));\n*// Set Thick pen combobox to 5  \n    pThickComboBox->SelectItem(0);\n\n ```  \n  \n2.  Save a color drawing to a file. Add the following statement to scribdoc.cpp, in the `CStroke::Serialize` method, after the `ar << (WORD)m_nPenWidth;` statement.  \n  \n ```  \n    ar <<(COLORREF)m_penColor;  \n ```  \n  \n3.  Finally, load a color drawing from a file. Add the following line of code, in the `CStroke::Serialize` method, after the `m_nPenWidth = w;` statement.  \n  \n ```  \n    ar>> m_penColor;  \n ```  \n  \n4.  Now scribble in color and save your drawing to a file.  \n  \n [[Sections](#top)]  \n  \n## Conclusion  \n You have updated the MFC Scribble application. Use this walkthrough as a guide when you modify your existing applications.  \n  \n## See Also  \n [Walkthroughs](../mfc/walkthroughs-mfc.md)   \n [Walkthrough: Updating the MFC Scribble Application (Part 1)](../mfc/walkthrough-updating-the-mfc-scribble-application-part-1.md)\n\n"}