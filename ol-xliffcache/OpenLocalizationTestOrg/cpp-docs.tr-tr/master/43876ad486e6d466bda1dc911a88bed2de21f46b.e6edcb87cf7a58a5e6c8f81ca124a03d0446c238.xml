{"nodes":[{"pos":[12,55],"content":"ICollectionOnSTLImpl Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ICollectionOnSTLImpl Class | Microsoft Docs","pos":[0,43]}]},{"content":"ICollectionOnSTLImpl Class","pos":[697,723]},{"content":"This class provides methods used by a collection class.","pos":[724,779]},{"content":"Syntax","pos":[788,794]},{"content":"STDMETHOD(getcount)(long* pcount);","pos":[3325,3359]},{"pos":[3659,3711],"content":"STDMETHOD(get_Item)(long Index, ItemType* pvar);","source":"STDMETHOD(get_Item)(long Index,\n    ItemType* pvar);"},{"content":"STDMETHOD(get__NewEnum)(IUnknown** ppUnk);","pos":[4362,4404]},{"content":"CollType m_coll;","pos":[4985,5001]}],"content":"---\ntitle: \"ICollectionOnSTLImpl Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL.ICollectionOnSTLImpl\"\n  - \"ATL::ICollectionOnSTLImpl\"\n  - \"ICollectionOnSTLImpl\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ICollectionOnSTLImpl class\"\nms.assetid: 683c88b0-0d97-4779-a762-e493334ba7f9\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ICollectionOnSTLImpl Class\nThis class provides methods used by a collection class.  \n  \n## Syntax  \n  \n```\ntemplate <class T, class CollType, class ItemType, class CopyItem, class EnumType>  class ICollectionOnSTLImpl :  public T```  \n  \n#### Parameters  \n `T`  \n A COM collection interface.  \n  \n `CollType`  \n An STL container class.  \n  \n *ItemType*  \n The type of item exposed by the container interface.  \n  \n *CopyItem*  \n A [copy policy class](../../atl/atl-copy-policy-classes.md).  \n  \n *EnumType*  \n A [CComEnumOnSTL](../../atl/reference/ccomenumonstl-class.md)-compatible enumerator class.  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[ICollectionOnSTLImpl::get__NewEnum](#icollectiononstlimpl__get__newenum)|Returns an enumerator object for the collection.|  \n|[ICollectionOnSTLImpl::getcount](#icollectiononstlimpl__get_count)|Returns the number of elements in the collection.|  \n|[ICollectionOnSTLImpl::get_Item](#icollectiononstlimpl__get_item)|Returns the requested item from the collection.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[ICollectionOnSTLImpl::m_coll](#icollectiononstlimpl__m_coll)|The collection.|  \n  \n## Remarks  \n This class provides the implementation for three methods of a collection interface: [getcount](#icollectiononstlimpl__get_count), [get_Item](#icollectiononstlimpl__get_item), and [get__NewEnum](#icollectiononstlimpl__get__newenum).  \n  \n To use this class:  \n  \n-   Define (or borrow) a collection interface that you wish to implement.  \n  \n-   Derive your class from a specialization of `ICollectionOnSTLImpl` based on this collection interface.  \n  \n-   Use your derived class to implement any methods from the collection interface not handled by `ICollectionOnSTLImpl`.  \n  \n> [!NOTE]\n>  If the collection interface is a dual interface, derive your class from [IDispatchImpl](../../atl/reference/idispatchimpl-class.md), passing the `ICollectionOnSTLImpl` specialization as the first template parameter if you want ATL to provide the implementation of the `IDispatch` methods.  \n  \n-   Add items to the [m_coll](#icollectiononstlimpl__m_coll) member to populate the collection.  \n  \n For more information and examples, see [ATL Collections and Enumerators](../../atl/atl-collections-and-enumerators.md).  \n  \n## Inheritance Hierarchy  \n `T`  \n  \n `ICollectionOnSTLImpl`  \n  \n## Requirements  \n **Header:** atlcom.h  \n  \n##  <a name=\"icollectiononstlimpl__get_count\"></a>  ICollectionOnSTLImpl::getcount  \n This method returns the number of items in the collection.  \n  \n```\nSTDMETHOD(getcount)(long* pcount);\n```  \n  \n### Parameters  \n *pcount*  \n [out] The number of elements in the collection.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n##  <a name=\"icollectiononstlimpl__get_item\"></a>  ICollectionOnSTLImpl::get_Item  \n This method returns the specified item from the collection.  \n  \n```\nSTDMETHOD(get_Item)(long Index,\n    ItemType* pvar);\n```  \n  \n### Parameters  \n `Index`  \n [in] The 1-based index of an item in the collection.  \n  \n `pvar`  \n [out] The item corresponding to `Index`.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The item is obtained by copying the data at the specified position in [m_coll](#icollectiononstlimpl__m_coll) using the copy method of the [copy policy class](../../atl/atl-copy-policy-classes.md) passed as a template argument in the `ICollectionOnSTLImpl` specialization.  \n  \n##  <a name=\"icollectiononstlimpl__get__newenum\"></a>  ICollectionOnSTLImpl::get__NewEnum  \n Returns an enumerator object for the collection.  \n  \n```\nSTDMETHOD(get__NewEnum)(IUnknown** ppUnk);\n```  \n  \n### Parameters  \n `ppUnk`  \n [out] The **IUnknown** pointer of a newly created enumerator object.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The newly created enumerator maintains an iterator on the original collection, `m_coll`, (so no copy is made) and holds a COM reference on the collection object to ensure that the collection remains alive while there are outstanding enumerators.  \n  \n##  <a name=\"icollectiononstlimpl__m_coll\"></a>  ICollectionOnSTLImpl::m_coll  \n This member holds the items represented by the collection.  \n  \n```\nCollType m_coll;\n```  \n  \n## See Also  \n [ATLCollections Sample](../../visual-cpp-samples.md)   \n [Class Overview](../../atl/atl-class-overview.md)\n"}