{"nodes":[{"pos":[12,56],"content":"&lt;exception&gt; functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"exception<ph id=\"ph1\">&amp;gt;</ph> functions | Microsoft Docs","pos":[4,44],"source":"exception&gt; functions | Microsoft Docs"}]},{"content":"exception<ph id=\"ph1\">&amp;gt;</ph> functions","pos":[263,286],"source":"exception&gt; functions"},{"content":"current_exception","pos":[306,323]},{"content":"get_terminate","pos":[346,359]},{"content":"get_unexpected","pos":[378,392]},{"content":"make_exception_ptr","pos":[416,434]},{"content":"rethrow_exception","pos":[458,475]},{"content":"set_terminate","pos":[498,511]},{"content":"set_unexpected","pos":[534,548]},{"content":"terminate","pos":[568,577]},{"content":"uncaught_exception","pos":[592,610]},{"content":"unexpected","pos":[638,648]},{"pos":[707,724],"content":"current_exception"},{"content":"Obtains a smart pointer to the current exception.","pos":[728,777]},{"content":"Return Value","pos":[840,852]},{"pos":[856,973],"content":"An <bpt id=\"p1\">[</bpt>exception_ptr<ept id=\"p1\">](../standard-library/exception-typedefs.md#exception_ptr)</ept> object pointing to the current exception.","source":"An [exception_ptr](../standard-library/exception-typedefs.md#exception_ptr) object pointing to the current exception."},{"content":"Remarks","pos":[983,990]},{"content":"Call the <ph id=\"ph1\">`current_exception`</ph> function in a catch block.","pos":[994,1049],"source":"Call the `current_exception` function in a catch block."},{"content":"If an exception is in flight and the catch block can catch the exception, the <ph id=\"ph1\">`current_exception`</ph> function returns an <ph id=\"ph2\">`exception_ptr`</ph> object that references the exception.","pos":[1050,1221],"source":" If an exception is in flight and the catch block can catch the exception, the `current_exception` function returns an `exception_ptr` object that references the exception."},{"content":"Otherwise, the function returns a null <ph id=\"ph1\">`exception_ptr`</ph> object.","pos":[1222,1284],"source":" Otherwise, the function returns a null `exception_ptr` object."},{"pos":[1291,1502],"content":"The <ph id=\"ph1\">`current_exception`</ph> function captures the exception that is in flight regardless of whether the <ph id=\"ph2\">`catch`</ph> statement specifies an <bpt id=\"p1\">[</bpt>exception-declaration<ept id=\"p1\">](../cpp/try-throw-and-catch-statements-cpp.md)</ept> statement.","source":"The `current_exception` function captures the exception that is in flight regardless of whether the `catch` statement specifies an [exception-declaration](../cpp/try-throw-and-catch-statements-cpp.md) statement."},{"content":"The destructor for the current exception is called at the end of the <ph id=\"ph1\">`catch`</ph> block if you do not rethrow the exception.","pos":[1509,1628],"source":"The destructor for the current exception is called at the end of the `catch` block if you do not rethrow the exception."},{"content":"However, even if you call the <ph id=\"ph1\">`current_exception`</ph> function in the destructor, the function returns an <ph id=\"ph2\">`exception_ptr`</ph> object that references the current exception.","pos":[1629,1792],"source":" However, even if you call the `current_exception` function in the destructor, the function returns an `exception_ptr` object that references the current exception."},{"content":"Successive calls to the <ph id=\"ph1\">`current_exception`</ph> function return <ph id=\"ph2\">`exception_ptr`</ph> objects that refer to different copies of the current exception.","pos":[1799,1939],"source":"Successive calls to the `current_exception` function return `exception_ptr` objects that refer to different copies of the current exception."},{"content":"Consequently, the objects compare as unequal because they refer to different copies, even though the copies have the same binary value.","pos":[1940,2075]},{"pos":[2120,2138],"content":"make_exception_ptr"},{"pos":[2142,2267],"content":"Creates an <bpt id=\"p1\">[</bpt>exception_ptr<ept id=\"p1\">](../standard-library/exception-typedefs.md#exception_ptr)</ept> object that holds a copy of an exception.","source":"Creates an [exception_ptr](../standard-library/exception-typedefs.md#exception_ptr) object that holds a copy of an exception."},{"content":"Parameters","pos":[2360,2370]},{"content":"The class with the exception to copy.","pos":[2386,2423]},{"content":"Usually, you specify an <bpt id=\"p1\">[</bpt>exception class<ept id=\"p1\">](../standard-library/exception-class.md)</ept> object as the argument to the <ph id=\"ph1\">`make_exception_ptr`</ph> function, although any class object can be the argument.","pos":[2424,2613],"source":" Usually, you specify an [exception class](../standard-library/exception-class.md) object as the argument to the `make_exception_ptr` function, although any class object can be the argument."},{"content":"Return Value","pos":[2623,2635]},{"pos":[2639,2779],"content":"An <bpt id=\"p1\">[</bpt>exception_ptr<ept id=\"p1\">](../standard-library/exception-typedefs.md#exception_ptr)</ept> object pointing to a copy of the current exception for <ph id=\"ph1\">`Except`</ph>.","source":"An [exception_ptr](../standard-library/exception-typedefs.md#exception_ptr) object pointing to a copy of the current exception for `Except`."},{"content":"Remarks","pos":[2789,2796]},{"content":"Calling the <ph id=\"ph1\">`make_exception_ptr`</ph> function is equivalent to throwing a C++ exception, catching it in a catch block, and then calling the <bpt id=\"p1\">[</bpt>current_exception<ept id=\"p1\">](../standard-library/exception-functions.md#current_exception)</ept> function to return an <ph id=\"ph2\">`exception_ptr`</ph> object that references the exception.","pos":[2800,3093],"source":"Calling the `make_exception_ptr` function is equivalent to throwing a C++ exception, catching it in a catch block, and then calling the [current_exception](../standard-library/exception-functions.md#current_exception) function to return an `exception_ptr` object that references the exception."},{"content":"The Microsoft implementation of the <ph id=\"ph1\">`make_exception_ptr`</ph> function is more efficient than throwing and then catching an exception.","pos":[3094,3223],"source":" The Microsoft implementation of the `make_exception_ptr` function is more efficient than throwing and then catching an exception."},{"pos":[3230,3333],"content":"An application typically does not require the <ph id=\"ph1\">`make_exception_ptr`</ph> function, and we discourage its use.","source":"An application typically does not require the `make_exception_ptr` function, and we discourage its use."},{"pos":[3377,3394],"content":"rethrow_exception"},{"content":"Throws an exception passed as a parameter.","pos":[3398,3440]},{"content":"Parameters","pos":[3509,3519]},{"content":"The caught exception to re-throw.","pos":[3530,3563]},{"content":"If <ph id=\"ph1\">`P`</ph> is a null <bpt id=\"p1\">[</bpt>exception_ptr<ept id=\"p1\">](../standard-library/exception-typedefs.md#exception_ptr)</ept>, the function throws <bpt id=\"p2\">[</bpt>std::bad_exception<ept id=\"p2\">](../standard-library/bad-exception-class.md)</ept>.","pos":[3564,3740],"source":" If `P` is a null [exception_ptr](../standard-library/exception-typedefs.md#exception_ptr), the function throws [std::bad_exception](../standard-library/bad-exception-class.md)."},{"content":"Remarks","pos":[3750,3757]},{"content":"After you store a caught exception in an <ph id=\"ph1\">`exception_ptr`</ph> object, the primary thread can process the object.","pos":[3761,3868],"source":"After you store a caught exception in an `exception_ptr` object, the primary thread can process the object."},{"content":"In your primary thread, call the <ph id=\"ph1\">`rethrow_exception`</ph> function together with the <ph id=\"ph2\">`exception_ptr`</ph> object as its argument.","pos":[3869,3988],"source":" In your primary thread, call the `rethrow_exception` function together with the `exception_ptr` object as its argument."},{"content":"The <ph id=\"ph1\">`rethrow_exception`</ph> function extracts the exception from the <ph id=\"ph2\">`exception_ptr`</ph> object and then throws the exception in the context of the primary thread.","pos":[3989,4144],"source":" The `rethrow_exception` function extracts the exception from the `exception_ptr` object and then throws the exception in the context of the primary thread."},{"pos":[4184,4197],"content":"get_terminate"},{"pos":[4201,4250],"content":"Obtains the current <ph id=\"ph1\">`terminate_handler`</ph> function.","source":"Obtains the current `terminate_handler` function."},{"pos":[4343,4356],"content":"set_terminate"},{"pos":[4360,4445],"content":"Establishes a new <ph id=\"ph1\">`terminate_handler`</ph> to be called at the termination of the program.","source":"Establishes a new `terminate_handler` to be called at the termination of the program."},{"content":"Parameters","pos":[4535,4545]},{"content":"The function to be called at termination.","pos":[4559,4600]},{"content":"Return Value","pos":[4610,4622]},{"content":"The address of the previous function that used to be called at termination.","pos":[4626,4701]},{"content":"Remarks","pos":[4711,4718]},{"content":"The function establishes a new <bpt id=\"p1\">[</bpt>terminate_handler<ept id=\"p1\">](../standard-library/exception-typedefs.md#terminate_handler)</ept> as the function * <ph id=\"ph1\">`fnew`</ph>.","pos":[4722,4859],"source":"The function establishes a new [terminate_handler](../standard-library/exception-typedefs.md#terminate_handler) as the function * `fnew`."},{"content":"Thus, <ph id=\"ph1\">`fnew`</ph> must not be a null pointer.","pos":[4860,4900],"source":" Thus, `fnew` must not be a null pointer."},{"content":"The function returns the address of the previous terminate handler.","pos":[4901,4968]},{"content":"Example","pos":[4978,4985]},{"pos":[5545,5559],"content":"get_unexpected"},{"pos":[5563,5613],"content":"Obtains the current <ph id=\"ph1\">`unexpected_handler`</ph> function.","source":"Obtains the current `unexpected_handler` function."},{"pos":[5709,5723],"content":"set_unexpected"},{"pos":[5727,5816],"content":"Establishes a new <ph id=\"ph1\">`unexpected_handler`</ph> to be when an unexpected exception is encountered.","source":"Establishes a new `unexpected_handler` to be when an unexpected exception is encountered."},{"content":"Parameters","pos":[5909,5919]},{"content":"The function to be called when an unexpected exception is encountered.","pos":[5933,6003]},{"content":"Return Value","pos":[6013,6025]},{"pos":[6029,6078],"content":"The address of the previous <ph id=\"ph1\">`unexpected_handler`</ph>.","source":"The address of the previous `unexpected_handler`."},{"content":"Remarks","pos":[6088,6095]},{"pos":[6106,6133],"content":"must not be a null pointer."},{"content":"The C++ Standard requires that <ph id=\"ph1\">`unexpected`</ph> is called when a function throws an exception that is not on its throw list.","pos":[6140,6260],"source":"The C++ Standard requires that `unexpected` is called when a function throws an exception that is not on its throw list."},{"content":"The current implementation does not support this.","pos":[6261,6310]},{"content":"The following example calls <ph id=\"ph1\">`unexpected`</ph> directly, which then calls the <ph id=\"ph2\">`unexpected_handler`</ph>.","pos":[6311,6404],"source":" The following example calls `unexpected` directly, which then calls the `unexpected_handler`."},{"content":"Example","pos":[6414,6421]},{"pos":[6974,6983],"content":"terminate"},{"content":"Calls a terminate handler.","pos":[6987,7013]},{"content":"Remarks","pos":[7056,7063]},{"content":"The function calls a terminate handler, a function of type <ph id=\"ph1\">`void`</ph>.","pos":[7067,7133],"source":"The function calls a terminate handler, a function of type `void`."},{"content":"If <bpt id=\"p1\">**</bpt>terminate<ept id=\"p1\">**</ept> is called directly by the program, the terminate handler is the one most recently set by a call to <bpt id=\"p2\">[</bpt>set_terminate<ept id=\"p2\">](../standard-library/exception-functions.md#set_terminate)</ept>.","pos":[7134,7324],"source":" If **terminate** is called directly by the program, the terminate handler is the one most recently set by a call to [set_terminate](../standard-library/exception-functions.md#set_terminate)."},{"content":"If <bpt id=\"p1\">**</bpt>terminate<ept id=\"p1\">**</ept> is called for any of several other reasons during evaluation of a throw expression, the terminate handler is the one in effect immediately after evaluating the throw expression.","pos":[7325,7519],"source":" If **terminate** is called for any of several other reasons during evaluation of a throw expression, the terminate handler is the one in effect immediately after evaluating the throw expression."},{"content":"A terminate handler may not return to its caller.","pos":[7526,7575]},{"content":"At program startup, the terminate handler is a function that calls <bpt id=\"p1\">**</bpt>abort<ept id=\"p1\">**</ept>.","pos":[7576,7653],"source":" At program startup, the terminate handler is a function that calls **abort**."},{"content":"Example","pos":[7663,7670]},{"pos":[7675,7798],"content":"See <bpt id=\"p1\">[</bpt>set_unexpected<ept id=\"p1\">](../standard-library/exception-functions.md#set_unexpected)</ept> for an example of the use of <bpt id=\"p2\">**</bpt>terminate<ept id=\"p2\">**</ept>.","source":"See [set_unexpected](../standard-library/exception-functions.md#set_unexpected) for an example of the use of **terminate**."},{"pos":[7843,7861],"content":"uncaught_exception"},{"pos":[7865,7936],"content":"Returns <ph id=\"ph1\">`true`</ph> only if a thrown exception is being currently processed.","source":"Returns `true` only if a thrown exception is being currently processed."},{"content":"Return Value","pos":[7988,8000]},{"content":"Returns <ph id=\"ph1\">`true`</ph> after completing evaluation of a throw expression and before completing initialization of the exception declaration in the matching handler or calling <bpt id=\"p1\">[</bpt>unexpected<ept id=\"p1\">](../standard-library/exception-functions.md#unexpected)</ept> as a result of the throw expression.","pos":[8004,8274],"source":"Returns `true` after completing evaluation of a throw expression and before completing initialization of the exception declaration in the matching handler or calling [unexpected](../standard-library/exception-functions.md#unexpected) as a result of the throw expression."},{"content":"In particular, <ph id=\"ph1\">`uncaught_exception`</ph> will return <ph id=\"ph2\">`true`</ph> when called from a destructor that is being invoked during an exception unwind.","pos":[8275,8409],"source":" In particular, `uncaught_exception` will return `true` when called from a destructor that is being invoked during an exception unwind."},{"content":"On devices, <ph id=\"ph1\">`uncaught_exception`</ph> is only supported on Windows CE 5.00 and higher versions, including Windows Mobile 2005 platforms.","pos":[8410,8541],"source":" On devices, `uncaught_exception` is only supported on Windows CE 5.00 and higher versions, including Windows Mobile 2005 platforms."},{"content":"Example","pos":[8551,8558]},{"pos":[9789,9799],"content":"unexpected"},{"content":"Calls the unexpected handler.","pos":[9803,9832]},{"content":"Remarks","pos":[9876,9883]},{"content":"The C++ Standard requires that <ph id=\"ph1\">`unexpected`</ph> is called when a function throws an exception that is not on its throw list.","pos":[9887,10007],"source":"The C++ Standard requires that `unexpected` is called when a function throws an exception that is not on its throw list."},{"content":"The current implementation does not support this.","pos":[10008,10057]},{"content":"The example calls <ph id=\"ph1\">`unexpected`</ph> directly, which calls the unexpected handler.","pos":[10058,10134],"source":" The example calls `unexpected` directly, which calls the unexpected handler."},{"content":"The function calls an unexpected handler, a function of type <ph id=\"ph1\">`void`</ph>.","pos":[10141,10209],"source":"The function calls an unexpected handler, a function of type `void`."},{"content":"If <ph id=\"ph1\">`unexpected`</ph> is called directly by the program, the unexpected handler is the one most recently set by a call to <bpt id=\"p1\">[</bpt>set_unexpected<ept id=\"p1\">](../standard-library/exception-functions.md#set_unexpected)</ept>.","pos":[10210,10402],"source":" If `unexpected` is called directly by the program, the unexpected handler is the one most recently set by a call to [set_unexpected](../standard-library/exception-functions.md#set_unexpected)."},{"content":"An unexpected handler may not return to its caller.","pos":[10409,10460]},{"content":"It may terminate execution by:","pos":[10461,10491]},{"content":"Throwing an object of a type listed in the exception specification or an object of any type if the unexpected handler is called directly by the program.","pos":[10501,10653]},{"pos":[10663,10750],"content":"Throwing an object of type <bpt id=\"p1\">[</bpt>bad_exception<ept id=\"p1\">](../standard-library/bad-exception-class.md)</ept>.","source":"Throwing an object of type [bad_exception](../standard-library/bad-exception-class.md)."},{"pos":[10760,10865],"content":"Calling <bpt id=\"p1\">[</bpt>terminate<ept id=\"p1\">](../standard-library/exception-functions.md#terminate)</ept>, <bpt id=\"p2\">**</bpt>abort<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>exit<ept id=\"p3\">**</ept>( <ph id=\"ph1\">`int`</ph>).","source":"Calling [terminate](../standard-library/exception-functions.md#terminate), **abort** or **exit**( `int`)."},{"pos":[10872,11006],"content":"At program startup, the unexpected handler is a function that calls <bpt id=\"p1\">[</bpt>terminate<ept id=\"p1\">](../standard-library/exception-functions.md#terminate)</ept>.","source":"At program startup, the unexpected handler is a function that calls [terminate](../standard-library/exception-functions.md#terminate)."},{"content":"Example","pos":[11016,11023]},{"pos":[11028,11152],"content":"See <bpt id=\"p1\">[</bpt>set_unexpected<ept id=\"p1\">](../standard-library/exception-functions.md#set_unexpected)</ept> for an example of the use of <bpt id=\"p2\">**</bpt>unexpected.<ept id=\"p2\">**</ept>","source":"See [set_unexpected](../standard-library/exception-functions.md#set_unexpected) for an example of the use of **unexpected.**"},{"content":"See Also","pos":[11161,11169]},{"content":"exception&gt;","pos":[11176,11186],"source":"exception>"}],"content":"---\ntitle: \"&lt;exception&gt; functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: c09ac569-5e35-4fe8-872d-ca5810274dd7\ncaps.latest.revision: 12\nmanager: \"ghogen\"\n---\n# &lt;exception&gt; functions\n||||  \n|-|-|-|  \n|[current_exception](#current_exception)|[get_terminate](#get_terminate)|[get_unexpected](#get_unexpected)|  \n|[make_exception_ptr](#make_exception_ptr)|[rethrow_exception](#rethrow_exception)|[set_terminate](#set_terminate)|  \n|[set_unexpected](#set_unexpected)|[terminate](#terminate)|[uncaught_exception](#uncaught_exception)|  \n|[unexpected](#unexpected)|  \n  \n##  <a name=\"current_exception\"></a>  current_exception  \n Obtains a smart pointer to the current exception.  \n  \n```cpp  \nexception_ptr current_exception();\n```  \n  \n### Return Value  \n An [exception_ptr](../standard-library/exception-typedefs.md#exception_ptr) object pointing to the current exception.  \n  \n### Remarks  \n Call the `current_exception` function in a catch block. If an exception is in flight and the catch block can catch the exception, the `current_exception` function returns an `exception_ptr` object that references the exception. Otherwise, the function returns a null `exception_ptr` object.  \n  \n The `current_exception` function captures the exception that is in flight regardless of whether the `catch` statement specifies an [exception-declaration](../cpp/try-throw-and-catch-statements-cpp.md) statement.  \n  \n The destructor for the current exception is called at the end of the `catch` block if you do not rethrow the exception. However, even if you call the `current_exception` function in the destructor, the function returns an `exception_ptr` object that references the current exception.  \n  \n Successive calls to the `current_exception` function return `exception_ptr` objects that refer to different copies of the current exception. Consequently, the objects compare as unequal because they refer to different copies, even though the copies have the same binary value.  \n  \n##  <a name=\"make_exception_ptr\"></a>  make_exception_ptr  \n Creates an [exception_ptr](../standard-library/exception-typedefs.md#exception_ptr) object that holds a copy of an exception.  \n  \n```cpp  \ntemplate <class E>  \nexception_ptr make_exception_ptr(E Except);\n```  \n  \n### Parameters  \n `Except`  \n The class with the exception to copy. Usually, you specify an [exception class](../standard-library/exception-class.md) object as the argument to the `make_exception_ptr` function, although any class object can be the argument.  \n  \n### Return Value  \n An [exception_ptr](../standard-library/exception-typedefs.md#exception_ptr) object pointing to a copy of the current exception for `Except`.  \n  \n### Remarks  \n Calling the `make_exception_ptr` function is equivalent to throwing a C++ exception, catching it in a catch block, and then calling the [current_exception](../standard-library/exception-functions.md#current_exception) function to return an `exception_ptr` object that references the exception. The Microsoft implementation of the `make_exception_ptr` function is more efficient than throwing and then catching an exception.  \n  \n An application typically does not require the `make_exception_ptr` function, and we discourage its use.  \n  \n##  <a name=\"rethrow_exception\"></a>  rethrow_exception  \n Throws an exception passed as a parameter.  \n  \n```cpp  \nvoid rethrow_exception(exception_ptr P);\n```  \n  \n### Parameters  \n `P`  \n The caught exception to re-throw. If `P` is a null [exception_ptr](../standard-library/exception-typedefs.md#exception_ptr), the function throws [std::bad_exception](../standard-library/bad-exception-class.md).  \n  \n### Remarks  \n After you store a caught exception in an `exception_ptr` object, the primary thread can process the object. In your primary thread, call the `rethrow_exception` function together with the `exception_ptr` object as its argument. The `rethrow_exception` function extracts the exception from the `exception_ptr` object and then throws the exception in the context of the primary thread.  \n  \n##  <a name=\"get_terminate\"></a>  get_terminate  \n Obtains the current `terminate_handler` function.  \n  \n```cpp  \nterminate_handler get_terminate();\n```  \n  \n##  <a name=\"set_terminate\"></a>  set_terminate  \n Establishes a new `terminate_handler` to be called at the termination of the program.  \n  \n```  \nterminate_handler set_terminate(terminate_handler fnew) throw();\n```  \n  \n### Parameters  \n `fnew`  \n The function to be called at termination.  \n  \n### Return Value  \n The address of the previous function that used to be called at termination.  \n  \n### Remarks  \n The function establishes a new [terminate_handler](../standard-library/exception-typedefs.md#terminate_handler) as the function * `fnew`. Thus, `fnew` must not be a null pointer. The function returns the address of the previous terminate handler.  \n  \n### Example  \n  \n```cpp  \n// exception_set_terminate.cpp  \n// compile with: /EHsc  \n#include <exception>  \n#include <iostream>  \n  \nusing namespace std;  \n  \nvoid termfunction()  \n{  \n    cout << \"My terminate function called.\" << endl;  \n    abort();  \n}  \n  \nint main()  \n{  \n    terminate_handler oldHandler = set_terminate(termfunction);  \n  \n    // Throwing an unhandled exception would also terminate the program  \n    // or we could explicitly call terminate();  \n  \n    //throw bad_alloc();  \n    terminate();  \n}  \n  \n```  \n  \n##  <a name=\"get_unexpected\"></a>  get_unexpected  \n Obtains the current `unexpected_handler` function.  \n  \n```cpp  \nunexpected_handler get_unexpected();\n```  \n  \n##  <a name=\"set_unexpected\"></a>  set_unexpected  \n Establishes a new `unexpected_handler` to be when an unexpected exception is encountered.  \n  \n```  \nunexpected_handler set_unexpected(unexpected_handler fnew) throw();\n```  \n  \n### Parameters  \n `fnew`  \n The function to be called when an unexpected exception is encountered.  \n  \n### Return Value  \n The address of the previous `unexpected_handler`.  \n  \n### Remarks  \n `fnew` must not be a null pointer.  \n  \n The C++ Standard requires that `unexpected` is called when a function throws an exception that is not on its throw list. The current implementation does not support this. The following example calls `unexpected` directly, which then calls the `unexpected_handler`.  \n  \n### Example  \n  \n```cpp  \n// exception_set_unexpected.cpp  \n// compile with: /EHsc  \n#include <exception>  \n#include <iostream>  \n  \nusing namespace std;  \n  \nvoid uefunction()  \n{  \n    cout << \"My unhandled exception function called.\" << endl;  \n    terminate(); // this is what unexpected() calls by default  \n}  \n  \nint main()  \n{  \n    unexpected_handler oldHandler = set_unexpected(uefunction);  \n  \n    unexpected(); // library function to force calling the   \n                  // current unexpected handler  \n}  \n  \n```  \n  \n##  <a name=\"terminate\"></a>  terminate  \n Calls a terminate handler.  \n  \n```  \nvoid terminate();\n```  \n  \n### Remarks  \n The function calls a terminate handler, a function of type `void`. If **terminate** is called directly by the program, the terminate handler is the one most recently set by a call to [set_terminate](../standard-library/exception-functions.md#set_terminate). If **terminate** is called for any of several other reasons during evaluation of a throw expression, the terminate handler is the one in effect immediately after evaluating the throw expression.  \n  \n A terminate handler may not return to its caller. At program startup, the terminate handler is a function that calls **abort**.  \n  \n### Example  \n  See [set_unexpected](../standard-library/exception-functions.md#set_unexpected) for an example of the use of **terminate**.  \n  \n##  <a name=\"uncaught_exception\"></a>  uncaught_exception  \n Returns `true` only if a thrown exception is being currently processed.  \n  \n```  \nbool uncaught_exception();\n```  \n  \n### Return Value  \n Returns `true` after completing evaluation of a throw expression and before completing initialization of the exception declaration in the matching handler or calling [unexpected](../standard-library/exception-functions.md#unexpected) as a result of the throw expression. In particular, `uncaught_exception` will return `true` when called from a destructor that is being invoked during an exception unwind. On devices, `uncaught_exception` is only supported on Windows CE 5.00 and higher versions, including Windows Mobile 2005 platforms.  \n  \n### Example  \n  \n```cpp  \n// exception_uncaught_exception.cpp  \n// compile with: /EHsc  \n#include <exception>  \n#include <iostream>  \n#include <string>  \n  \nclass Test   \n{  \npublic:  \n   Test( std::string msg ) : m_msg( msg )   \n   {  \n      std::cout << \"In Test::Test(\\\"\" << m_msg << \"\\\")\" << std::endl;  \n   }  \n   ~Test( )   \n   {  \n      std::cout << \"In Test::~Test(\\\"\" << m_msg << \"\\\")\" << std::endl  \n         << \"        std::uncaught_exception( ) = \"  \n         << std::uncaught_exception( )  \n         << std::endl;  \n   }  \nprivate:  \n    std::string m_msg;  \n};  \n  \n// uncaught_exception will be true in the destructor   \n// for the object created inside the try block because   \n// the destructor is being called as part of the unwind.  \n  \nint main( void )  \n   {  \n      Test t1( \"outside try block\" );  \n      try   \n      {  \n         Test t2( \"inside try block\" );  \n         throw 1;  \n      }  \n      catch (...) {  \n   }  \n}  \n```  \n  \n```Output  \nIn Test::Test(\"outside try block\")  \nIn Test::Test(\"inside try block\")  \nIn Test::~Test(\"inside try block\")  \n        std::uncaught_exception( ) = 1  \nIn Test::~Test(\"outside try block\")  \n        std::uncaught_exception( ) = 0  \n```  \n  \n##  <a name=\"unexpected\"></a>  unexpected  \n Calls the unexpected handler.  \n  \n```  \nvoid unexpected();\n```  \n  \n### Remarks  \n The C++ Standard requires that `unexpected` is called when a function throws an exception that is not on its throw list. The current implementation does not support this. The example calls `unexpected` directly, which calls the unexpected handler.  \n  \n The function calls an unexpected handler, a function of type `void`. If `unexpected` is called directly by the program, the unexpected handler is the one most recently set by a call to [set_unexpected](../standard-library/exception-functions.md#set_unexpected).  \n  \n An unexpected handler may not return to its caller. It may terminate execution by:  \n  \n-   Throwing an object of a type listed in the exception specification or an object of any type if the unexpected handler is called directly by the program.  \n  \n-   Throwing an object of type [bad_exception](../standard-library/bad-exception-class.md).  \n  \n-   Calling [terminate](../standard-library/exception-functions.md#terminate), **abort** or **exit**( `int`).  \n  \n At program startup, the unexpected handler is a function that calls [terminate](../standard-library/exception-functions.md#terminate).  \n  \n### Example  \n  See [set_unexpected](../standard-library/exception-functions.md#set_unexpected) for an example of the use of **unexpected.**  \n  \n## See Also  \n [\\<exception>](../standard-library/exception.md)\n\n"}