{"nodes":[{"pos":[12,98],"content":"How to: Enumerate Data Types in Assemblies using Reflection (C++-CLI) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Enumerate Data Types in Assemblies using Reflection (C++-CLI) | Microsoft Docs","pos":[0,86]}]},{"content":"How to: Enumerate Data Types in Assemblies using Reflection (C++/CLI)","pos":[806,875]},{"content":"The following code demonstrates the enumeration of public types and members using &lt;xref:System.Reflection&gt;.","pos":[876,983],"source":"The following code demonstrates the enumeration of public types and members using <xref:System.Reflection>."},{"content":"Given the name of an assembly, either in the local directory or in the GAC, the code below attempts to open the assembly and retrieve descriptions.","pos":[990,1137]},{"content":"If successful, each type is displayed with its public members.","pos":[1138,1200]},{"content":"Note that &lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt; requires that no file extension is used.","pos":[1207,1324],"source":"Note that <xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName> requires that no file extension is used."},{"content":"Therefore, using \"mscorlib.dll\" as a command-line argument will fail, while using just \"mscorlib\" will result the display of the .NET Framework types.","pos":[1325,1475]},{"content":"If no assembly name is provided, the code will detect and report the types within the current assembly (the EXE resulting from this code).","pos":[1476,1614]},{"content":"Example","pos":[1623,1630]},{"content":"See Also","pos":[3068,3076]},{"content":"Reflection (C++/CLI)","pos":[3081,3101]}],"content":"---\ntitle: \"How to: Enumerate Data Types in Assemblies using Reflection (C++-CLI) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"assemblies [C++], enumerating data types in\"\n  - \"public types [C++]\"\n  - \"reflection [C++], external assemblies\"\n  - \"assemblies [C++]\"\n  - \"data types [C++], enumerating\"\n  - \"public members [C++]\"\nms.assetid: c3578e6d-bb99-4599-80e1-ab795305f878\ncaps.latest.revision: 15\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Enumerate Data Types in Assemblies using Reflection (C++/CLI)\nThe following code demonstrates the enumeration of public types and members using <xref:System.Reflection>.  \n  \n Given the name of an assembly, either in the local directory or in the GAC, the code below attempts to open the assembly and retrieve descriptions. If successful, each type is displayed with its public members.  \n  \n Note that <xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName> requires that no file extension is used. Therefore, using \"mscorlib.dll\" as a command-line argument will fail, while using just \"mscorlib\" will result the display of the .NET Framework types. If no assembly name is provided, the code will detect and report the types within the current assembly (the EXE resulting from this code).  \n  \n## Example  \n  \n```  \n// self_reflection.cpp  \n// compile with: /clr  \nusing namespace System;  \nusing namespace System::Reflection;  \nusing namespace System::Collections;  \n  \npublic ref class ExampleType {  \npublic:  \n   ExampleType() {}  \n   void Func() {}  \n};  \n  \nint main() {  \n   String^ delimStr = \" \";  \n   array<Char>^ delimiter = delimStr->ToCharArray( );  \n   array<String^>^ args = Environment::CommandLine->Split( delimiter );  \n  \n// replace \"self_reflection.exe\" with an assembly from either the local  \n// directory or the GAC  \n   Assembly^ a = Assembly::LoadFrom(\"self_reflection.exe\");  \n   Console::WriteLine(a);  \n  \n   int count = 0;  \n   array<Type^>^ types = a->GetTypes();  \n   IEnumerator^ typeIter = types->GetEnumerator();  \n  \n   while ( typeIter->MoveNext() ) {  \n      Type^ t = dynamic_cast<Type^>(typeIter->Current);  \n      Console::WriteLine(\"   {0}\", t->ToString());  \n  \n      array<MemberInfo^>^ members = t->GetMembers();  \n      IEnumerator^ memberIter = members->GetEnumerator();  \n      while ( memberIter->MoveNext() ) {  \n         MemberInfo^ mi = dynamic_cast<MemberInfo^>(memberIter->Current);  \n         Console::Write(\"      {0}\", mi->ToString( ) );  \n         if (mi->MemberType == MemberTypes::Constructor)  \n            Console::Write(\"   (constructor)\");  \n  \n         Console::WriteLine();  \n      }  \n      count++;  \n   }  \n   Console::WriteLine(\"{0} types found\", count);  \n}  \n```  \n  \n## See Also  \n [Reflection (C++/CLI)](../dotnet/reflection-cpp-cli.md)"}