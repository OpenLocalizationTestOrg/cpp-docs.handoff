{"nodes":[{"pos":[12,42],"content":"fgetc, fgetwc | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"fgetc, fgetwc | Microsoft Docs","pos":[0,30]}]},{"content":"fgetc, fgetwc","pos":[1115,1128]},{"content":"Read a character from a stream.","pos":[1129,1160]},{"content":"Syntax","pos":[1169,1175]},{"content":"Parameters","pos":[1281,1291]},{"content":"Pointer to <ph id=\"ph1\">`FILE`</ph> structure.","pos":[1307,1335],"source":" Pointer to `FILE` structure."},{"content":"Return Value","pos":[1344,1356]},{"content":"returns the character read as an <ph id=\"ph1\">`int`</ph> or returns <ph id=\"ph2\">`EOF`</ph> to indicate an error or end of file.","pos":[1368,1460],"source":" returns the character read as an `int` or returns `EOF` to indicate an error or end of file."},{"content":"returns, as a <bpt id=\"p1\">[</bpt>wint_t<ept id=\"p1\">](../../c-runtime-library/standard-types.md)</ept>, the wide character that corresponds to the character read or returns <ph id=\"ph1\">`WEOF`</ph> to indicate an error or end of file.","pos":[1470,1649],"source":" returns, as a [wint_t](../../c-runtime-library/standard-types.md), the wide character that corresponds to the character read or returns `WEOF` to indicate an error or end of file."},{"content":"For both functions, use <ph id=\"ph1\">`feof`</ph> or <ph id=\"ph2\">`ferror`</ph> to distinguish between an error and an end-of-file condition.","pos":[1650,1754],"source":" For both functions, use `feof` or `ferror` to distinguish between an error and an end-of-file condition."},{"content":"If a read error occurs, the error indicator for the stream is set.","pos":[1755,1821]},{"content":"If <ph id=\"ph1\">`stream`</ph> is <ph id=\"ph2\">`NULL`</ph>, <ph id=\"ph3\">`fgetc`</ph> and <ph id=\"ph4\">`fgetwc`</ph> invoke the invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[1822,1992],"source":" If `stream` is `NULL`, `fgetc` and `fgetwc` invoke the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and return <ph id=\"ph3\">`EOF`</ph>.","pos":[1993,2087],"source":" If execution is allowed to continue, these functions set `errno` to `EINVAL` and return `EOF`."},{"content":"Remarks","pos":[2096,2103]},{"content":"Each of these functions reads a single character from the current position of the file associated with <ph id=\"ph1\">`stream`</ph>.","pos":[2107,2219],"source":"Each of these functions reads a single character from the current position of the file associated with `stream`."},{"content":"The function then increments the associated file pointer (if defined) to point to the next character.","pos":[2220,2321]},{"content":"If the stream is at end of file, the end-of-file indicator for the stream is set.","pos":[2322,2403]},{"pos":[2418,2520],"content":"is equivalent to <ph id=\"ph1\">`getc`</ph>, but is implemented only as a function, rather than as a function and a macro.","source":" is equivalent to `getc`, but is implemented only as a function, rather than as a function and a macro."},{"pos":[2536,2704],"content":"is the wide-character version of <ph id=\"ph1\">`fgetc`</ph>; it reads <ph id=\"ph2\">`c`</ph> as a multibyte character or a wide character according to whether <ph id=\"ph3\">`stream`</ph> is opened in text mode or binary mode.","source":" is the wide-character version of `fgetc`; it reads `c` as a multibyte character or a wide character according to whether `stream` is opened in text mode or binary mode."},{"pos":[2711,2834],"content":"The versions with the <ph id=\"ph1\">`_nolock`</ph> suffix are identical except that they are not protected from interference by other threads.","source":"The versions with the `_nolock` suffix are identical except that they are not protected from interference by other threads."},{"pos":[2841,3068],"content":"For more information about processing wide characters and multibyte characters in text and binary modes, see <bpt id=\"p1\">[</bpt>Unicode Stream I/O in Text and Binary Modes<ept id=\"p1\">](../../c-runtime-library/unicode-stream-i-o-in-text-and-binary-modes.md)</ept>.","source":"For more information about processing wide characters and multibyte characters in text and binary modes, see [Unicode Stream I/O in Text and Binary Modes](../../c-runtime-library/unicode-stream-i-o-in-text-and-binary-modes.md)."},{"content":"Generic-Text Routine Mappings","pos":[3078,3107]},{"content":"TCHAR.H routine","pos":[3114,3129]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[3130,3158],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[3159,3172]},{"content":"_UNICODE defined","pos":[3173,3189]},{"content":"Requirements","pos":[3346,3358]},{"content":"Function","pos":[3365,3373]},{"content":"Required header","pos":[3374,3389]},{"content":"stdio.h&gt;","pos":[3445,3453],"source":"stdio.h>"},{"content":"stdio.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[3469,3491],"source":"stdio.h> or \\<wchar.h>"},{"pos":[3499,3623],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[3632,3639]},{"content":"Input: crt_fgetc.txt","pos":[4433,4453]},{"content":"Output","pos":[4502,4508]},{"content":".NET Framework Equivalent","pos":[4556,4581]},{"content":"System::IO::StreamReader::Read","pos":[4592,4622]},{"content":"System::Console::Read","pos":[4709,4730]},{"content":"See Also","pos":[4807,4815]},{"content":"Stream I/O","pos":[4820,4830]},{"content":"fputc, fputwc","pos":[4876,4889]},{"content":"getc, getwc","pos":[4947,4958]}],"content":"---\ntitle: \"fgetc, fgetwc | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"fgetwc\"\n  - \"fgetc\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-stdio-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_fgettc\"\n  - \"fgetwc\"\n  - \"fgetc\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"fgettc function\"\n  - \"characters, reading\"\n  - \"_fgettc function\"\n  - \"fgetc function\"\n  - \"streams, reading characters from\"\n  - \"reading characters from streams\"\n  - \"fgetwc function\"\nms.assetid: 13348b7b-dc86-421c-9d6c-611ca79c8338\ncaps.latest.revision: 18\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# fgetc, fgetwc\nRead a character from a stream.  \n  \n## Syntax  \n  \n```  \nint fgetc(   \n   FILE *stream   \n);  \nwint_t fgetwc(   \n   FILE *stream   \n);  \n```  \n  \n#### Parameters  \n `stream`  \n Pointer to `FILE` structure.  \n  \n## Return Value  \n `fgetc` returns the character read as an `int` or returns `EOF` to indicate an error or end of file. `fgetwc` returns, as a [wint_t](../../c-runtime-library/standard-types.md), the wide character that corresponds to the character read or returns `WEOF` to indicate an error or end of file. For both functions, use `feof` or `ferror` to distinguish between an error and an end-of-file condition. If a read error occurs, the error indicator for the stream is set. If `stream` is `NULL`, `fgetc` and `fgetwc` invoke the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions set `errno` to `EINVAL` and return `EOF`.  \n  \n## Remarks  \n Each of these functions reads a single character from the current position of the file associated with `stream`. The function then increments the associated file pointer (if defined) to point to the next character. If the stream is at end of file, the end-of-file indicator for the stream is set.  \n  \n `fgetc` is equivalent to `getc`, but is implemented only as a function, rather than as a function and a macro.  \n  \n `fgetwc` is the wide-character version of `fgetc`; it reads `c` as a multibyte character or a wide character according to whether `stream` is opened in text mode or binary mode.  \n  \n The versions with the `_nolock` suffix are identical except that they are not protected from interference by other threads.  \n  \n For more information about processing wide characters and multibyte characters in text and binary modes, see [Unicode Stream I/O in Text and Binary Modes](../../c-runtime-library/unicode-stream-i-o-in-text-and-binary-modes.md).  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_fgettc`|`fgetc`|`fgetc`|`fgetwc`|  \n  \n## Requirements  \n  \n|Function|Required header|  \n|--------------|---------------------|  \n|`fgetc`|\\<stdio.h>|  \n|`fgetwc`|\\<stdio.h> or \\<wchar.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_fgetc.c  \n// This program uses getc to read the first  \n// 80 input characters (or until the end of input)  \n// and place them into a string named buffer.  \n  \n#include <stdio.h>  \n#include <stdlib.h>  \n  \nint main( void )  \n{  \n   FILE *stream;  \n   char buffer[81];  \n   int  i, ch;  \n  \n   // Open file to read line from:  \n   fopen_s( &stream, \"crt_fgetc.txt\", \"r\" );  \n   if( stream == NULL )  \n      exit( 0 );  \n  \n   // Read in first 80 characters and place them in \"buffer\":   \n   ch = fgetc( stream );  \n   for( i=0; (i < 80 ) && ( feof( stream ) == 0 ); i++ )  \n   {  \n      buffer[i] = (char)ch;  \n      ch = fgetc( stream );  \n   }  \n  \n   // Add null to end string   \n   buffer[i] = '\\0';  \n   printf( \"%s\\n\", buffer );  \n   fclose( stream );  \n}  \n```  \n  \n## Input: crt_fgetc.txt  \n  \n```  \nLine one.  \nLine two.  \n```  \n  \n### Output  \n  \n```  \nLine one.  \nLine two.  \n```  \n  \n## .NET Framework Equivalent  \n  \n-   [System::IO::StreamReader::Read](https://msdn.microsoft.com/en-us/library/system.io.streamreader.read.aspx)  \n  \n-   [System::Console::Read](https://msdn.microsoft.com/en-us/library/system.console.read.aspx)  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [fputc, fputwc](../../c-runtime-library/reference/fputc-fputwc.md)   \n [getc, getwc](../../c-runtime-library/reference/getc-getwc.md)"}