{"nodes":[{"pos":[12,54],"content":"list::reference (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"list::reference (STL-CLR) | Microsoft Docs","pos":[0,42]}]},{"content":"list::reference (STL/CLR)","pos":[662,687]},{"content":"The type of a reference to an element.","pos":[688,726]},{"content":"Syntax","pos":[735,741]},{"content":"Remarks","pos":[798,805]},{"content":"The type describes a reference to an element.","pos":[809,854]},{"content":"Example","pos":[863,870]},{"content":"Requirements","pos":[1851,1863]},{"pos":[1867,1893],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/list&gt;","source":"**Header:** \\<cliext/list>"},{"pos":[1900,1921],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[1930,1938]},{"content":"list (STL/CLR)","pos":[1943,1957]},{"content":"list::const_reference (STL/CLR)","pos":[1991,2022]},{"content":"list::value_type (STL/CLR)","pos":[2072,2098]}],"content":"---\ntitle: \"list::reference (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::list::reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"reference member [STL/CLR]\"\nms.assetid: 318a4566-63f2-4744-8e06-14f7c5608d82\ncaps.latest.revision: 17\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# list::reference (STL/CLR)\nThe type of a reference to an element.  \n  \n## Syntax  \n  \n```  \ntypedef value_type% reference;  \n```  \n  \n## Remarks  \n The type describes a reference to an element.  \n  \n## Example  \n  \n```  \n// cliext_list_reference.cpp   \n// compile with: /clr   \n#include <cliext/list>   \n  \nint main()   \n    {   \n    cliext::list<wchar_t> c1;   \n    c1.push_back(L'a');   \n    c1.push_back(L'b');   \n    c1.push_back(L'c');   \n  \n// display initial contents \" a b c\"   \n    cliext::list<wchar_t>::iterator it = c1.begin();   \n    for (; it != c1.end(); ++it)   \n        {   // get a reference to an element   \n        cliext::list<wchar_t>::reference ref = *it;   \n        System::Console::Write(\" {0}\", ref);   \n        }   \n    System::Console::WriteLine();   \n  \n// modify contents \" a b c\"   \n    for (it = c1.begin(); it != c1.end(); ++it)   \n        {   // get a reference to an element   \n        cliext::list<wchar_t>::reference ref = *it;   \n  \n        ref += (wchar_t)(L'A' - L'a');   \n        System::Console::Write(\" {0}\", ref);   \n        }   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \na b c  \nA B C  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/list>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [list (STL/CLR)](../dotnet/list-stl-clr.md)   \n [list::const_reference (STL/CLR)](../dotnet/list-const-reference-stl-clr.md)   \n [list::value_type (STL/CLR)](../dotnet/list-value-type-stl-clr.md)"}