{"nodes":[{"pos":[12,81],"content":"Argument-Dependent Name (Koenig) Lookup on Functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Argument-Dependent Name (Koenig) Lookup on Functions | Microsoft Docs","pos":[0,69]}]},{"content":"Argument-Dependent Name (Koenig) Lookup on Functions","pos":[653,705]},{"content":"The compiler can use argument-dependent name lookup to find the definition of an unqualified function call.","pos":[706,813]},{"content":"Argument-dependent name lookup is also called Koenig lookup.","pos":[814,874]},{"content":"The type of every argument in a function call is defined within a hierarchy of namespaces, classes, structures, unions, or templates.","pos":[875,1008]},{"content":"When you specify an unqualified <bpt id=\"p1\">[</bpt>postfix<ept id=\"p1\">](../cpp/postfix-expressions.md)</ept> function call, the compiler searches for the function definition in the hierarchy associated with each argument type.","pos":[1009,1199],"source":" When you specify an unqualified [postfix](../cpp/postfix-expressions.md) function call, the compiler searches for the function definition in the hierarchy associated with each argument type."},{"content":"Example","pos":[1208,1215]},{"content":"In the sample, the compiler notes that function <ph id=\"ph1\">`f()`</ph> takes an argument <ph id=\"ph2\">`x`</ph>.","pos":[1219,1295],"source":"In the sample, the compiler notes that function `f()` takes an argument `x`."},{"content":"Argument <ph id=\"ph1\">`x`</ph> is of type <ph id=\"ph2\">`A::X`</ph>, which is defined in namespace <ph id=\"ph3\">`A`</ph>.","pos":[1296,1362],"source":" Argument `x` is of type `A::X`, which is defined in namespace `A`."},{"content":"The compiler searches namespace <ph id=\"ph1\">`A`</ph> and finds a definition for function <ph id=\"ph2\">`f()`</ph> that takes an argument of type <ph id=\"ph3\">`A::X`</ph>.","pos":[1363,1479],"source":" The compiler searches namespace `A` and finds a definition for function `f()` that takes an argument of type `A::X`."}],"content":"---\ntitle: \"Argument-Dependent Name (Koenig) Lookup on Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"Koenig lookup\"\n  - \"argument-dependent lookup [C++]\"\nms.assetid: c0928401-da2c-4658-942d-9ba4df149c35\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Argument-Dependent Name (Koenig) Lookup on Functions\nThe compiler can use argument-dependent name lookup to find the definition of an unqualified function call. Argument-dependent name lookup is also called Koenig lookup. The type of every argument in a function call is defined within a hierarchy of namespaces, classes, structures, unions, or templates. When you specify an unqualified [postfix](../cpp/postfix-expressions.md) function call, the compiler searches for the function definition in the hierarchy associated with each argument type.  \n  \n## Example  \n In the sample, the compiler notes that function `f()` takes an argument `x`. Argument `x` is of type `A::X`, which is defined in namespace `A`. The compiler searches namespace `A` and finds a definition for function `f()` that takes an argument of type `A::X`.  \n  \n```  \n// argument_dependent_name_koenig_lookup_on_functions.cpp  \nnamespace A  \n{  \n   struct X  \n   {  \n   };  \n   void f(const X&)  \n   {  \n   }  \n}  \nint main()  \n{  \n// The compiler finds A::f() in namespace A, which is where   \n// the type of argument x is defined. The type of x is A::X.  \n   A::X x;  \n   f(x);     \n}  \n```  \n"}