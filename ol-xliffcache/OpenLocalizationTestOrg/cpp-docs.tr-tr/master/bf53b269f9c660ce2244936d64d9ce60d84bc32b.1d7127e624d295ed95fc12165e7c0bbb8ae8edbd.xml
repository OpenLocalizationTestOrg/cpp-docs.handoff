{"nodes":[{"pos":[12,69],"content":"priority_queue::priority_queue (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"priority_queue::priority_queue (STL-CLR) | Microsoft Docs","pos":[0,57]}]},{"content":"priority_queue::priority_queue (STL/CLR)","pos":[671,711]},{"content":"Constructs a container adapter object.","pos":[712,750]},{"content":"Syntax","pos":[759,765]},{"content":"Parameters","pos":[1333,1343]},{"content":"cont","pos":[1347,1351]},{"content":"Container to copy.","pos":[1355,1373]},{"content":"first","pos":[1380,1385]},{"content":"Beginning of range to insert.","pos":[1389,1418]},{"content":"last","pos":[1425,1429]},{"content":"End of range to insert.","pos":[1433,1456]},{"content":"pred","pos":[1463,1467]},{"content":"Ordering predicate for the controlled sequence.","pos":[1471,1518]},{"content":"right","pos":[1525,1530]},{"content":"Object or range to insert.","pos":[1534,1560]},{"content":"Remarks","pos":[1569,1576]},{"content":"The constructor:","pos":[1580,1596]},{"content":"creates an empty wrapped container, with the default ordering predicate.","pos":[1629,1701]},{"content":"You use it to specify an empty initial controlled sequence, with the default ordering predicate.","pos":[1702,1798]},{"content":"The constructor:","pos":[1805,1821]},{"content":"creates a wrapped container that is a copy of <ph id=\"ph1\">`right.get_container()`</ph>, with the ordering predicate <ph id=\"ph2\">`right.value_comp()`</ph>.","pos":[1893,2013],"source":"creates a wrapped container that is a copy of `right.get_container()`, with the ordering predicate `right.value_comp()`."},{"content":"You use it to specify an initial controlled sequence that is a copy of the sequence controlled by the queue object <ph id=\"ph1\">`right`</ph>, with the same ordering predicate.","pos":[2014,2171],"source":" You use it to specify an initial controlled sequence that is a copy of the sequence controlled by the queue object `right`, with the same ordering predicate."},{"content":"The constructor:","pos":[2178,2194]},{"content":"creates a wrapped container that is a copy of <ph id=\"ph1\">`right-&gt;get_container()`</ph>, with the ordering predicate <ph id=\"ph2\">`right-&gt;value_comp()`</ph>.","pos":[2266,2388],"source":"creates a wrapped container that is a copy of `right->get_container()`, with the ordering predicate `right->value_comp()`."},{"content":"You use it to specify an initial controlled sequence that is a copy of the sequence controlled by the queue object <ph id=\"ph1\">`*right`</ph>, with the same ordering predicate.","pos":[2389,2547],"source":" You use it to specify an initial controlled sequence that is a copy of the sequence controlled by the queue object `*right`, with the same ordering predicate."},{"content":"The constructor:","pos":[2554,2570]},{"content":"creates an empty wrapped container, with the ordering predicate <ph id=\"ph1\">`pred`</ph>.","pos":[2631,2702],"source":"creates an empty wrapped container, with the ordering predicate `pred`."},{"content":"You use it to specify an empty initial controlled sequence, with the specified ordering predicate.","pos":[2703,2801]},{"content":"The constructor:","pos":[2808,2824]},{"pos":[2897,3127],"content":"creates an empty wrapped container, with the ordering predicate <ph id=\"ph1\">`pred`</ph>, then pushes all the elements of <ph id=\"ph2\">`cont`</ph> You use it to specify an initial controlled sequence from an existing container, with the specified ordering predicate.","source":"creates an empty wrapped container, with the ordering predicate `pred`, then pushes all the elements of `cont` You use it to specify an initial controlled sequence from an existing container, with the specified ordering predicate."},{"content":"The constructor:","pos":[3134,3150]},{"content":"creates an empty wrapped container, with the default ordering predicate, then pushes the sequence <ph id=\"ph1\">`[``first``,`</ph> <ph id=\"ph2\">`last``)`</ph>.","pos":[3236,3358],"source":"creates an empty wrapped container, with the default ordering predicate, then pushes the sequence `[``first``,` `last``)`."},{"content":"You use it to specify an initial controlled sequence from a specified eqeuence, with the specified ordering predicate.","pos":[3359,3477]},{"content":"The constructor:","pos":[3484,3500]},{"content":"creates an empty wrapped container, with the ordering predicate <ph id=\"ph1\">`pred`</ph>, then pushes the sequence <ph id=\"ph2\">`[``first``,`</ph> <ph id=\"ph3\">`last``)`</ph>.","pos":[3615,3736],"source":"creates an empty wrapped container, with the ordering predicate `pred`, then pushes the sequence `[``first``,` `last``)`."},{"content":"You use it to specify an initial controlled sequence from a specified seqeuence, with the specified ordering predicate.","pos":[3737,3856]},{"content":"The constructor:","pos":[3863,3879]},{"content":"creates an empty wrapped container, with the ordering predicate <ph id=\"ph1\">`pred`</ph>, then pushes all the elements of <ph id=\"ph2\">`cont`</ph> plus the sequence <ph id=\"ph3\">`[``first``,`</ph> <ph id=\"ph4\">`last``)`</ph>.","pos":[4016,4169],"source":"creates an empty wrapped container, with the ordering predicate `pred`, then pushes all the elements of `cont` plus the sequence `[``first``,` `last``)`."},{"content":"You use it to specify an initial controlled sequence from an existing container and a specified seqeuence, with the specified ordering predicate.","pos":[4170,4315]},{"content":"Example","pos":[4324,4331]},{"content":"Requirements","pos":[7438,7450]},{"pos":[7454,7481],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/queue&gt;","source":"**Header:** \\<cliext/queue>"},{"pos":[7488,7509],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[7518,7526]},{"content":"priority_queue (STL/CLR)","pos":[7531,7555]},{"content":"priority_queue::assign (STL/CLR)","pos":[7599,7631]},{"content":"priority_queue::generic_container (STL/CLR)","pos":[7682,7725]},{"content":"priority_queue::operator= (STL/CLR)","pos":[7787,7822]}],"content":"---\ntitle: \"priority_queue::priority_queue (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::priority_queue::priority_queue\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"priority_queue member [STL/CLR]\"\nms.assetid: aab423d7-959e-48fd-9028-e9f45f43cb8a\ncaps.latest.revision: 17\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# priority_queue::priority_queue (STL/CLR)\nConstructs a container adapter object.  \n  \n## Syntax  \n  \n```  \npriority_queue();  \npriority_queue(priority_queue<Value, Container> right);  \npriority_queue(priority_queue<Value, Container> right);  \nexplicit priority_queue(value_compare^ pred);  \npriority_queue(value_compare^ pred, container_type% cont);  \ntemplate<typename InIt>  \n    priority_queue(InIt first, InIt last);  \ntemplate<typename InIt>  \n    priority_queue(InIt first, InIt last,  \n        value_compare^ pred);  \ntemplate<typename InIt>  \n    priority_queue(InIt first, InIt last,  \n        value_compare^ pred, container_type% cont);  \n```  \n  \n#### Parameters  \n cont  \n Container to copy.  \n  \n first  \n Beginning of range to insert.  \n  \n last  \n End of range to insert.  \n  \n pred  \n Ordering predicate for the controlled sequence.  \n  \n right  \n Object or range to insert.  \n  \n## Remarks  \n The constructor:  \n  \n `priority_queue();`  \n  \n creates an empty wrapped container, with the default ordering predicate. You use it to specify an empty initial controlled sequence, with the default ordering predicate.  \n  \n The constructor:  \n  \n `priority_queue(priority_queue<Value, Container>% right);`  \n  \n creates a wrapped container that is a copy of `right.get_container()`, with the ordering predicate `right.value_comp()`. You use it to specify an initial controlled sequence that is a copy of the sequence controlled by the queue object `right`, with the same ordering predicate.  \n  \n The constructor:  \n  \n `priority_queue(priority_queue<Value, Container>^ right);`  \n  \n creates a wrapped container that is a copy of `right->get_container()`, with the ordering predicate `right->value_comp()`. You use it to specify an initial controlled sequence that is a copy of the sequence controlled by the queue object `*right`, with the same ordering predicate.  \n  \n The constructor:  \n  \n `explicit priority_queue(value_compare^ pred);`  \n  \n creates an empty wrapped container, with the ordering predicate `pred`. You use it to specify an empty initial controlled sequence, with the specified ordering predicate.  \n  \n The constructor:  \n  \n `priority_queue(value_compare^ pred, container_type cont);`  \n  \n creates an empty wrapped container, with the ordering predicate `pred`, then pushes all the elements of `cont` You use it to specify an initial controlled sequence from an existing container, with the specified ordering predicate.  \n  \n The constructor:  \n  \n `template<typename InIt>`  \n  \n `priority_queue(InIt first, InIt last);`  \n  \n creates an empty wrapped container, with the default ordering predicate, then pushes the sequence `[``first``,` `last``)`. You use it to specify an initial controlled sequence from a specified eqeuence, with the specified ordering predicate.  \n  \n The constructor:  \n  \n `template<typename InIt>`  \n  \n `priority_queue(InIt first, InIt last,`  \n  \n `value_compare^ pred);`  \n  \n creates an empty wrapped container, with the ordering predicate `pred`, then pushes the sequence `[``first``,` `last``)`. You use it to specify an initial controlled sequence from a specified seqeuence, with the specified ordering predicate.  \n  \n The constructor:  \n  \n `template<typename InIt>`  \n  \n `priority_queue(InIt first, InIt last,`  \n  \n `value_compare^ pred, container_type% cont);`  \n  \n creates an empty wrapped container, with the ordering predicate `pred`, then pushes all the elements of `cont` plus the sequence `[``first``,` `last``)`. You use it to specify an initial controlled sequence from an existing container and a specified seqeuence, with the specified ordering predicate.  \n  \n## Example  \n  \n```  \n// cliext_priority_queue_construct.cpp   \n// compile with: /clr   \n#include <cliext/queue>   \n#include <cliext/deque>   \n  \ntypedef cliext::priority_queue<wchar_t> Mypriority_queue;   \ntypedef cliext::deque<wchar_t> Mydeque;   \nint main()   \n    {   \n// construct an empty container   \n    Mypriority_queue c1;   \n    Mypriority_queue::container_type^ wc1 = c1.get_container();   \n    System::Console::WriteLine(\"size() = {0}\", c1.size());   \n  \n    c1.push(L'a');   \n    c1.push(L'b');   \n    c1.push(L'c');   \n    for each (wchar_t elem in wc1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// construct with an ordering rule   \n    Mypriority_queue c2 = cliext::greater<wchar_t>();   \n    System::Console::WriteLine(\"size() = {0}\", c2.size());   \n  \n    for each (wchar_t elem in wc1)   \n        c2.push(elem);   \n    for each (wchar_t elem in c2.get_container())   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// construct with an ordering rule by copying an underlying container   \n    Mypriority_queue c2x =   \n        gcnew Mypriority_queue(cliext::greater<wchar_t>(), *wc1);   \n   for each (wchar_t elem in c2x.get_container())   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// construct with an iterator range   \n    Mypriority_queue c3(wc1->begin(), wc1->end());   \n    for each (wchar_t elem in c3.get_container())   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// construct with an iterator range and an ordering rule   \n    Mypriority_queue c4(wc1->begin(), wc1->end(),   \n        cliext::greater<wchar_t>());   \n    for each (wchar_t elem in c4.get_container())   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// construct with an iterator range, another container, and an ordering rule   \n    Mypriority_queue c5(wc1->begin(), wc1->end(),   \n        cliext::greater<wchar_t>(), *wc1);   \n    for each (wchar_t elem in c5.get_container())   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// construct from a generic container   \n    Mypriority_queue c6(c3);   \n    for each (wchar_t elem in c6.get_container())   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// construct by copying another container   \n    Mypriority_queue c7(%c3);   \n    for each (wchar_t elem in c7.get_container())   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// construct with an ordering rule, by copying an underlying container   \n    Mypriority_queue c8 =   \n        gcnew Mypriority_queue(cliext::greater<wchar_t>(), *wc1);   \n    for each (wchar_t elem in c8.get_container())   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \nsize() = 0  \n c a b  \nsize() = 0  \n a c b  \n a c b  \n c a b  \n a c b  \n a a b c c b  \n c a b  \n c a b  \n a c b  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/queue>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [priority_queue (STL/CLR)](../dotnet/priority-queue-stl-clr.md)   \n [priority_queue::assign (STL/CLR)](../dotnet/priority-queue-assign-stl-clr.md)   \n [priority_queue::generic_container (STL/CLR)](../dotnet/priority-queue-generic-container-stl-clr.md)   \n [priority_queue::operator= (STL/CLR)](../dotnet/priority-queue-operator-assign-stl-clr.md)"}