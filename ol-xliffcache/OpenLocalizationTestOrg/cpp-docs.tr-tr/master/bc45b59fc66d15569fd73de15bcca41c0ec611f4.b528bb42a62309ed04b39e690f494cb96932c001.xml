{"nodes":[{"pos":[12,48],"content":"while Statement (C) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"while Statement (C) | Microsoft Docs","pos":[0,36]}]},{"content":"while Statement (C)","pos":[640,659]},{"pos":[660,753],"content":"The <ph id=\"ph1\">`while`</ph> statement lets you repeat a statement until a specified expression becomes false.","source":"The `while` statement lets you repeat a statement until a specified expression becomes false."},{"content":"Syntax","pos":[762,768]},{"content":"<bpt id=\"p1\">*</bpt>iteration-statement<ept id=\"p1\">*</ept>:","pos":[772,794],"source":"*iteration-statement*:"},{"content":"<bpt id=\"p1\"> **</bpt>while (<ept id=\"p1\">**</ept>  <bpt id=\"p2\">*</bpt>expression<ept id=\"p2\">*</ept>  <bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept>  <bpt id=\"p4\">*</bpt>statement<ept id=\"p4\">*</ept>","pos":[797,843],"source":" **while (**  *expression*  **)**  *statement*"},{"content":"The <bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> must have arithmetic or pointer type.","pos":[850,904],"source":"The *expression* must have arithmetic or pointer type."},{"content":"Execution proceeds as follows:","pos":[905,935]},{"pos":[945,975],"content":"The <bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> is evaluated.","source":"The *expression* is evaluated."},{"pos":[985,1157],"content":"If <bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> is initially false, the body of the <ph id=\"ph1\">`while`</ph> statement is never executed, and control passes from the <ph id=\"ph2\">`while`</ph> statement to the next statement in the program.","source":"If *expression* is initially false, the body of the `while` statement is never executed, and control passes from the `while` statement to the next statement in the program."},{"pos":[1168,1289],"content":"If <bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> is true (nonzero), the body of the statement is executed and the process is repeated beginning at step 1.","source":"If *expression* is true (nonzero), the body of the statement is executed and the process is repeated beginning at step 1."},{"content":"The <ph id=\"ph1\">`while`</ph> statement can also terminate when a <bpt id=\"p1\">**</bpt>break<ept id=\"p1\">**</ept>, <ph id=\"ph2\">`goto`</ph>, or <ph id=\"ph3\">`return`</ph> within the statement body is executed.","pos":[1296,1413],"source":"The `while` statement can also terminate when a **break**, `goto`, or `return` within the statement body is executed."},{"content":"Use the <bpt id=\"p1\">**</bpt>continue<ept id=\"p1\">**</ept> statement to terminate an iteration without exiting the <ph id=\"ph1\">`while`</ph> loop.","pos":[1414,1504],"source":" Use the **continue** statement to terminate an iteration without exiting the `while` loop."},{"content":"The <bpt id=\"p1\">**</bpt>continue<ept id=\"p1\">**</ept> statement passes control to the next iteration of the <ph id=\"ph1\">`while`</ph> statement.","pos":[1505,1594],"source":" The **continue** statement passes control to the next iteration of the `while` statement."},{"pos":[1601,1645],"content":"This is an example of the <ph id=\"ph1\">`while`</ph> statement:","source":"This is an example of the `while` statement:"},{"content":"This example copies characters from <ph id=\"ph1\">`string2`</ph> to <ph id=\"ph2\">`string1`</ph>.","pos":[1737,1796],"source":"This example copies characters from `string2` to `string1`."},{"content":"If <ph id=\"ph1\">`i`</ph> is greater than or equal to 0, <ph id=\"ph2\">`string2[i]`</ph> is assigned to <ph id=\"ph3\">`string1[i]`</ph> and <ph id=\"ph4\">`i`</ph> is decremented.","pos":[1797,1899],"source":" If `i` is greater than or equal to 0, `string2[i]` is assigned to `string1[i]` and `i` is decremented."},{"content":"When <ph id=\"ph1\">`i`</ph> reaches or falls below 0, execution of the <ph id=\"ph2\">`while`</ph> statement terminates.","pos":[1900,1981],"source":" When `i` reaches or falls below 0, execution of the `while` statement terminates."},{"content":"See Also","pos":[1990,1998]},{"content":"while Statement (C++)","pos":[2003,2024]}],"content":"---\ntitle: \"while Statement (C) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"while\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"while keyword [C]\"\n  - \"while keyword [C], syntax\"\nms.assetid: d0c970b8-12a9-4827-afb2-a051111834b7\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# while Statement (C)\nThe `while` statement lets you repeat a statement until a specified expression becomes false.  \n  \n## Syntax  \n *iteration-statement*:  \n **while (**  *expression*  **)**  *statement*  \n  \n The *expression* must have arithmetic or pointer type. Execution proceeds as follows:  \n  \n1.  The *expression* is evaluated.  \n  \n2.  If *expression* is initially false, the body of the `while` statement is never executed, and control passes from the `while` statement to the next statement in the program.  \n  \n     If *expression* is true (nonzero), the body of the statement is executed and the process is repeated beginning at step 1.  \n  \n The `while` statement can also terminate when a **break**, `goto`, or `return` within the statement body is executed. Use the **continue** statement to terminate an iteration without exiting the `while` loop. The **continue** statement passes control to the next iteration of the `while` statement.  \n  \n This is an example of the `while` statement:  \n  \n```  \nwhile ( i >= 0 )   \n{  \n    string1[i] = string2[i];  \n    i--;  \n}  \n```  \n  \n This example copies characters from `string2` to `string1`. If `i` is greater than or equal to 0, `string2[i]` is assigned to `string1[i]` and `i` is decremented. When `i` reaches or falls below 0, execution of the `while` statement terminates.  \n  \n## See Also  \n [while Statement (C++)](../cpp/while-statement-cpp.md)"}