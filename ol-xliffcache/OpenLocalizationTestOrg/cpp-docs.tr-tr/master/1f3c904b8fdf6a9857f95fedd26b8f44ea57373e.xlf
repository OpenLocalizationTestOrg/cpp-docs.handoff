<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1f3c904b8fdf6a9857f95fedd26b8f44ea57373e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\special-cwinapp-services.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">050c16e4d8ecd6d1b263b1899757c9ba66ce0312</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3f9fa0f9b9e888554e4b148ca6cb89e65649b7e7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Special CWinApp Services | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Special CWinApp Services</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Besides running the message loop and giving you an opportunity to initialize the application and clean up after it, <bpt id="p1">[</bpt>CWinApp<ept id="p1">](../mfc/reference/cwinapp-class.md)</ept> provides several other services.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Shell Registration</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>By default, the MFC Application Wizard makes it possible for the user to open data files that your application has created by double-clicking them in File Explorer or File Manager.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If your application is an MDI application and you specify an extension for the files your application creates, the MFC Application Wizard adds calls to the <bpt id="p1">[</bpt>RegisterShellFileTypes<ept id="p1">](../mfc/reference/cwinapp-class.md#cwinapp__registershellfiletypes)</ept> and <bpt id="p2">[</bpt>EnableShellOpen<ept id="p2">](../mfc/reference/cwinapp-class.md#cwinapp__enableshellopen)</ept> member functions of <bpt id="p3">[</bpt>CWinApp<ept id="p3">](../mfc/reference/cwinapp-class.md)</ept> to the <ph id="ph1">`InitInstance`</ph> override that it writes for you.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>registers your application's document types with File Explorer or File Manager.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The function adds entries to the registration database that Windows maintains.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The entries register each document type, associate a file extension with the file type, specify a command line to open the application, and specify a dynamic data exchange (DDE) command to open a document of that type.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>completes the process by allowing your application to receive DDE commands from File Explorer or File Manager to open the file chosen by the user.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This automatic registration support in <ph id="ph1">`CWinApp`</ph> eliminates the need to ship a .reg file with your application or to do special installation work.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If you want to initialize GDI+ for your application (by calling [GdiplusStartup]--brokenlink--(<bpt id="p1">_</bpt>gdiplus_FUNC_GdiplusStartup_token_input_output<ept id="p1">_</ept>) in your <bpt id="p2">[</bpt>InitInstance<ept id="p2">](../mfc/reference/cwinapp-class.md#cwinapp__initinstance)</ept> function), you have to suppress the GDI+ background thread.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can do this by setting the <bpt id="p1">**</bpt>SuppressBackgroundThread<ept id="p1">**</ept> member of the [GdiplusStartupInput]--brokenlink--(_gdiplus_STRUC_GdiplusStartupInput) structure to <bpt id="p2">**</bpt>TRUE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When suppressing the GDI+ background thread, the <bpt id="p1">**</bpt>NotificationHook<ept id="p1">**</ept> and <bpt id="p2">**</bpt>NotificationUnhook<ept id="p2">**</ept> calls (see [GdiplusStartupOutput]--brokenlink--(_gdiplus_STRUC_GdiplusStartupOutput)) should be made just prior to entering and exiting the application's message loop.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Therefore, a good place to call <bpt id="p1">**</bpt>GdiplusStartup<ept id="p1">**</ept> and the hook notification functions would be in an override of the virtual function <bpt id="p2">[</bpt>CWinApp::Run<ept id="p2">](../mfc/reference/cwinapp-class.md#cwinapp__run)</ept>, as shown below:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#6</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you do not suppress the background GDI+ thread, DDE commands can be prematurely issued to the application before its main window has been created.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The DDE commands issued by the shell can be prematurely aborted, resulting in error messages.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>File Manager Drag and Drop</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Files can be dragged from the file view window in File Manager or File Explorer to a window in your application.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You might, for example, enable one or more files to be dragged to an MDI application's main window, where the application could retrieve the file names and open MDI child windows for those files.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To enable file drag and drop in your application, the MFC Application Wizard writes a call to the <bpt id="p1">[</bpt>CWnd<ept id="p1">](../mfc/reference/cwnd-class.md)</ept> member function <bpt id="p2">[</bpt>DragAcceptFiles<ept id="p2">](../mfc/reference/cwnd-class.md#cwnd__dragacceptfiles)</ept> for your main frame window in your <ph id="ph1">`InitInstance`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can remove that call if you do not want to implement the drag-and-drop feature.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can also implement more general drag-and-drop capabilities—dragging data between or within documents—with OLE.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For information, see the article <bpt id="p1">[</bpt>Drag and Drop (OLE)<ept id="p1">](../mfc/drag-and-drop-ole.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Keeping Track of the Most Recently Used Documents</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>As the user opens and closes files, the application object keeps track of the four most recently used files.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The names of these files are added to the File menu and updated when they change.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The framework stores these file names in either the registry or in the .ini file, with the same name as your project and reads them from the file when your application starts up.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`InitInstance`</ph> override that the MFC Application Wizard creates for you includes a call to the <bpt id="p1">[</bpt>CWinApp<ept id="p1">](../mfc/reference/cwinapp-class.md)</ept> member function <bpt id="p2">[</bpt>LoadStdProfileSettings<ept id="p2">](../mfc/reference/cwinapp-class.md#cwinapp__loadstdprofilesettings)</ept>, which loads information from the registry or .ini file, including the most recently used file names.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>These entries are stored as follows:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In Windows NT, Windows 2000, and later, the value is stored to a registry key.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In Windows 3.x, the value is stored in the WIN.INI file.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In Windows 95 and later, the value is stored in a cached version of WIN.INI.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>CWinApp: The Application Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>