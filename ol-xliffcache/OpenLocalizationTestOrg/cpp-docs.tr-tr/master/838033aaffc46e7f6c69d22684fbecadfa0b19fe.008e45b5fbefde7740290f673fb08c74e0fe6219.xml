{"nodes":[{"pos":[12,55],"content":"Function Call Operator: () | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Function Call Operator: () | Microsoft Docs","pos":[0,43]}]},{"content":"Function Call Operator: ()","pos":[804,830]},{"pos":[831,927],"content":"A postfix-expression followed by the function-call operator, <bpt id=\"p1\">**</bpt>( )<ept id=\"p1\">**</ept>, specifies a function call.","source":"A postfix-expression followed by the function-call operator, **( )**, specifies a function call."},{"content":"Syntax","pos":[936,942]},{"content":"Remarks","pos":[1022,1029]},{"content":"The arguments to the function-call operator are zero or more expressions separated by commas — the actual arguments to the function.","pos":[1033,1165]},{"content":"The <bpt id=\"p1\">*</bpt>postfix-expression<ept id=\"p1\">*</ept> must evaluate to a function address (for example, a function identifier or the value of a function pointer), and <bpt id=\"p2\">*</bpt>argument-expression-list<ept id=\"p2\">*</ept> is a list of expressions (separated by commas) whose values (the arguments) are passed to the function.","pos":[1172,1440],"source":"The *postfix-expression* must evaluate to a function address (for example, a function identifier or the value of a function pointer), and *argument-expression-list* is a list of expressions (separated by commas) whose values (the arguments) are passed to the function."},{"content":"The <bpt id=\"p1\">*</bpt>argument-expression-list<ept id=\"p1\">*</ept> argument can be empty.","pos":[1441,1494],"source":" The *argument-expression-list* argument can be empty."},{"pos":[1501,1556],"content":"The <bpt id=\"p1\">*</bpt>postfix-expression<ept id=\"p1\">*</ept> must be of one of these types:","source":"The *postfix-expression* must be of one of these types:"},{"content":"Function returning type <ph id=\"ph1\">`T`</ph>.","pos":[1566,1594],"source":"Function returning type `T`."},{"content":"An example declaration is","pos":[1595,1620]},{"content":"Pointer to a function returning type <ph id=\"ph1\">`T`</ph>.","pos":[1675,1716],"source":"Pointer to a function returning type `T`."},{"content":"An example declaration is","pos":[1717,1742]},{"content":"Reference to a function returning type <ph id=\"ph1\">`T`</ph>.","pos":[1800,1843],"source":"Reference to a function returning type `T`."},{"content":"An example declaration is","pos":[1844,1869]},{"content":"Pointer-to-member function dereference returning type <ph id=\"ph1\">`T`</ph>.","pos":[1925,1983],"source":"Pointer-to-member function dereference returning type `T`."},{"content":"Example function calls are","pos":[1984,2010]},{"content":"Example","pos":[2090,2097]},{"pos":[2101,2191],"content":"The following example calls the standard library function <ph id=\"ph1\">`strcat_s`</ph> with three arguments:","source":"The following example calls the standard library function `strcat_s` with three arguments:"},{"content":"Function call results","pos":[2635,2656]},{"content":"A function call evaluates to an r-value unless the function is declared as a reference type.","pos":[2660,2752]},{"content":"Functions with reference return type evaluate to l-values, and can be used on the left side of an assignment statement as follows:","pos":[2753,2883]},{"content":"The preceding code defines a class called <ph id=\"ph1\">`Point`</ph>, which contains private data objects that represent <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>y<ept id=\"p2\">*</ept> coordinates.","pos":[3531,3657],"source":"The preceding code defines a class called `Point`, which contains private data objects that represent *x* and *y* coordinates."},{"content":"These data objects must be modified and their values retrieved.","pos":[3658,3721]},{"content":"This program is only one of several designs for such a class; use of the <ph id=\"ph1\">`GetX`</ph> and <ph id=\"ph2\">`SetX`</ph> or <ph id=\"ph3\">`GetY`</ph> and <ph id=\"ph4\">`SetY`</ph> functions is another possible design.","pos":[3722,3871],"source":" This program is only one of several designs for such a class; use of the `GetX` and `SetX` or `GetY` and `SetY` functions is another possible design."},{"content":"Functions that return class types, pointers to class types, or references to class types can be used as the left operand to member-selection operators.","pos":[3878,4029]},{"content":"Therefore, the following code is legal:","pos":[4030,4069]},{"content":"Functions can be called recursively.","pos":[4596,4632]},{"content":"For more information about function declarations, see <bpt id=\"p1\">[</bpt>Functions<ept id=\"p1\">](functions-cpp.md)</ept>.","pos":[4633,4717],"source":" For more information about function declarations, see [Functions](functions-cpp.md)."},{"content":"Related material is in <bpt id=\"p1\">[</bpt>Program and Linkage<ept id=\"p1\">](../cpp/program-and-linkage-cpp.md)</ept>.","pos":[4718,4798],"source":" Related material is in [Program and Linkage](../cpp/program-and-linkage-cpp.md)."},{"content":"See Also","pos":[4807,4815]},{"content":"Postfix Expressions","pos":[4820,4839]},{"content":"C++ Built-in Operators, Precedence and Associativity","pos":[4877,4929]},{"content":"Function Call","pos":[4999,5012]}],"content":"---\ntitle: \"Function Call Operator: () | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"( ) function call operator\"\n  - \"function calls, C++ functions\"\n  - \"() function call operator\"\n  - \"postfix operators\"\n  - \"function calls, operator\"\n  - \"functions [C++], function-call operator\"\n  - \"function call operator ( )\"\nms.assetid: 50c92e59-a4bf-415a-a6ab-d66c679ee80a\ncaps.latest.revision: 14\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Function Call Operator: ()\nA postfix-expression followed by the function-call operator, **( )**, specifies a function call.  \n  \n## Syntax  \n  \n```  \npostfix-expression   \n( [argument-expression-list ] )  \n```  \n  \n## Remarks  \n The arguments to the function-call operator are zero or more expressions separated by commas — the actual arguments to the function.  \n  \n The *postfix-expression* must evaluate to a function address (for example, a function identifier or the value of a function pointer), and *argument-expression-list* is a list of expressions (separated by commas) whose values (the arguments) are passed to the function. The *argument-expression-list* argument can be empty.  \n  \n The *postfix-expression* must be of one of these types:  \n  \n-   Function returning type `T`. An example declaration is  \n  \n    ```  \n    T func( int i )  \n    ```  \n  \n-   Pointer to a function returning type `T`. An example declaration is  \n  \n    ```  \n    T (*func)( int i )  \n    ```  \n  \n-   Reference to a function returning type `T`. An example declaration is  \n  \n    ```  \n    T (&func)(int i)  \n    ```  \n  \n-   Pointer-to-member function dereference returning type `T`. Example function calls are  \n  \n    ```  \n    (pObject->*pmf)();  \n    (Object.*pmf)();  \n    ```  \n  \n## Example  \n The following example calls the standard library function `strcat_s` with three arguments:  \n  \n```  \n// expre_Function_Call_Operator.cpp  \n// compile with: /EHsc  \n  \n#include <iostream>  \n#include <string>  \n  \n// STL name space  \nusing namespace std;  \n  \nint main()  \n{  \n    enum  \n    {  \n        sizeOfBuffer = 20  \n    };  \n  \n    char s1[ sizeOfBuffer ] = \"Welcome to \";  \n    char s2[ ] = \"C++\";  \n  \n    strcat_s( s1, sizeOfBuffer, s2 );  \n  \n    cout << s1 << endl;  \n}  \n```  \n  \n```Output  \nWelcome to C++  \n```  \n  \n## Function call results  \n A function call evaluates to an r-value unless the function is declared as a reference type. Functions with reference return type evaluate to l-values, and can be used on the left side of an assignment statement as follows:  \n  \n```  \n// expre_Function_Call_Results.cpp  \n// compile with: /EHsc  \n#include <iostream>  \nclass Point  \n{  \npublic:  \n    // Define \"accessor\" functions as  \n    // reference types.  \n    unsigned& x() { return _x; }  \n    unsigned& y() { return _y; }  \nprivate:  \n    unsigned _x;  \n    unsigned _y;  \n};  \n  \nusing namespace std;  \nint main()  \n{  \n    Point ThePoint;  \n  \n    ThePoint.x() = 7;           // Use x() as an l-value.  \n    unsigned y = ThePoint.y();  // Use y() as an r-value.  \n  \n    // Use x() and y() as r-values.  \n    cout << \"x = \" << ThePoint.x() << \"\\n\"  \n         << \"y = \" << ThePoint.y() << \"\\n\";  \n}  \n```  \n  \n The preceding code defines a class called `Point`, which contains private data objects that represent *x* and *y* coordinates. These data objects must be modified and their values retrieved. This program is only one of several designs for such a class; use of the `GetX` and `SetX` or `GetY` and `SetY` functions is another possible design.  \n  \n Functions that return class types, pointers to class types, or references to class types can be used as the left operand to member-selection operators. Therefore, the following code is legal:  \n  \n```  \n// expre_Function_Results2.cpp  \nclass A {  \npublic:  \n   A() {}  \n   A(int i) {}  \n   int SetA( int i ) {  \n      return (I = i);  \n   }  \n  \n   int GetA() {  \n      return I;  \n   }  \n  \nprivate:  \n   int I;  \n};  \n  \nA func1() {  \n   A a = 0;  \n   return a;  \n}  \n  \nA* func2() {  \n   A *a = new A();  \n   return a;  \n}  \n  \nA& func3() {  \n   A *a = new A();  \n   A &b = *a;  \n   return b;  \n}  \n  \nint main() {  \n   int iResult = func1().GetA();  \n   func2()->SetA( 3 );  \n   func3().SetA( 7 );  \n}  \n```  \n  \n Functions can be called recursively. For more information about function declarations, see [Functions](functions-cpp.md). Related material is in [Program and Linkage](../cpp/program-and-linkage-cpp.md).  \n  \n## See Also  \n [Postfix Expressions](../cpp/postfix-expressions.md)   \n [C++ Built-in Operators, Precedence and Associativity](../cpp/cpp-built-in-operators-precedence-and-associativity.md)   \n [Function Call](../c-language/function-call-c.md)   \n"}