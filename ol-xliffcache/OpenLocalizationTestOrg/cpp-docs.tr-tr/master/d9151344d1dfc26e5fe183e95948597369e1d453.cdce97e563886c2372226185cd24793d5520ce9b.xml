{"nodes":[{"pos":[12,40],"content":"event Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"event Class | Microsoft Docs","pos":[0,28]}]},{"pos":[607,618],"content":"event Class","linkify":"event Class","nodes":[{"content":"event Class","pos":[0,11]}]},{"content":"A manual reset event which is explicitly aware of the Concurrency Runtime.","pos":[619,693]},{"pos":[702,708],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[743,750],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[760,779],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[786,790]},{"content":"Description","pos":[791,802]},{"pos":[840,873],"content":"<bpt id=\"p1\">[</bpt>event::~event Destructor<ept id=\"p1\">](#dtor)</ept>","source":"[event::~event Destructor](#dtor)"},{"content":"Destroys an event.","pos":[874,892]},{"pos":[903,917],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[924,928]},{"content":"Description","pos":[929,940]},{"pos":[978,1007],"content":"<bpt id=\"p1\">[</bpt>event::reset Method<ept id=\"p1\">](#reset)</ept>","source":"[event::reset Method](#reset)"},{"content":"Resets the event to a non-signaled state.","pos":[1008,1049]},{"pos":[1054,1079],"content":"<bpt id=\"p1\">[</bpt>event::set Method<ept id=\"p1\">](#set)</ept>","source":"[event::set Method](#set)"},{"content":"Signals the event.","pos":[1080,1098]},{"pos":[1103,1130],"content":"<bpt id=\"p1\">[</bpt>event::wait Method<ept id=\"p1\">](#wait)</ept>","source":"[event::wait Method](#wait)"},{"content":"Waits for the event to become signaled.","pos":[1131,1170]},{"pos":[1175,1228],"content":"<bpt id=\"p1\">[</bpt>event::wait_for_multiple Method<ept id=\"p1\">](#wait_for_multiple)</ept>","source":"[event::wait_for_multiple Method](#wait_for_multiple)"},{"content":"Waits for multiple events to become signaled.","pos":[1229,1274]},{"pos":[1285,1301],"content":"Public Constants","linkify":"Public Constants","nodes":[{"content":"Public Constants","pos":[0,16]}]},{"content":"Name","pos":[1308,1312]},{"content":"Description","pos":[1313,1324]},{"pos":[1362,1415],"content":"<bpt id=\"p1\">[</bpt>event::timeout_infinite Constant<ept id=\"p1\">](#timeout_infinite)</ept>","source":"[event::timeout_infinite Constant](#timeout_infinite)"},{"content":"Value indicating that a wait should never time out.","pos":[1416,1467]},{"pos":[1477,1484],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1488,1609],"content":"For more information, see <bpt id=\"p1\">[</bpt>Synchronization Data Structures<ept id=\"p1\">](../../../parallel/concrt/synchronization-data-structures.md)</ept>.","source":"For more information, see [Synchronization Data Structures](../../../parallel/concrt/synchronization-data-structures.md)."},{"pos":[1618,1639],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[1659,1671],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[1675,1695],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> concrt.h","source":"**Header:** concrt.h"},{"pos":[1702,1728],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[1738,1783],"content":"<bpt id=\"p1\">&lt;a name=\"ctor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  event::event Constructor","linkify":"<a name=\"ctor\"></a>  event::event Constructor","source":"<a name=\"ctor\"></a>  event::event Constructor"},{"content":"Constructs a new event.","pos":[1787,1810]},{"pos":[1850,1857],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1867,1912],"content":"<bpt id=\"p1\">&lt;a name=\"dtor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  event::~event Destructor","linkify":"<a name=\"dtor\"></a>  event::~event Destructor","source":"<a name=\"dtor\"></a>  event::~event Destructor"},{"content":"Destroys an event.","pos":[1916,1934]},{"pos":[1967,1974],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"It is expected that there are no threads waiting on the event when the destructor runs.","pos":[1978,2065]},{"content":"Allowing the event to destruct with threads still waiting on it results in undefined behavior.","pos":[2066,2160]},{"pos":[2170,2211],"content":"<bpt id=\"p1\">&lt;a name=\"reset\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  event::reset Method","linkify":"<a name=\"reset\"></a>  event::reset Method","source":"<a name=\"reset\"></a>  event::reset Method"},{"content":"Resets the event to a non-signaled state.","pos":[2215,2256]},{"pos":[2293,2330],"content":"<bpt id=\"p1\">&lt;a name=\"set\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  event::set Method","linkify":"<a name=\"set\"></a>  event::set Method","source":"<a name=\"set\"></a>  event::set Method"},{"content":"Signals the event.","pos":[2334,2352]},{"pos":[2387,2394],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Signaling the event can cause an arbitrary number of contexts waiting on the event to become runnable.","pos":[2398,2500]},{"pos":[2510,2575],"content":"<bpt id=\"p1\">&lt;a name=\"timeout_infinite\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  event::timeout_infinite Constant","linkify":"<a name=\"timeout_infinite\"></a>  event::timeout_infinite Constant","source":"<a name=\"timeout_infinite\"></a>  event::timeout_infinite Constant"},{"content":"Value indicating that a wait should never time out.","pos":[2579,2630]},{"pos":[2728,2767],"content":"<bpt id=\"p1\">&lt;a name=\"wait\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  event::wait Method","linkify":"<a name=\"wait\"></a>  event::wait Method","source":"<a name=\"wait\"></a>  event::wait Method"},{"content":"Waits for the event to become signaled.","pos":[2771,2810]},{"pos":[2900,2910],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Indicates the number of milliseconds before the wait times out.","pos":[2928,2991]},{"content":"The value <ph id=\"ph1\">`COOPERATIVE_TIMEOUT_INFINITE`</ph> signifies that there is no timeout.","pos":[2992,3068],"source":" The value `COOPERATIVE_TIMEOUT_INFINITE` signifies that there is no timeout."},{"pos":[3078,3090],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3094,3268],"content":"If the wait was satisfied, the value <ph id=\"ph1\">`0`</ph> is returned; otherwise, the value <ph id=\"ph2\">`COOPERATIVE_WAIT_TIMEOUT`</ph> to indicate that the wait timed out without the event becoming signaled.","source":"If the wait was satisfied, the value `0` is returned; otherwise, the value `COOPERATIVE_WAIT_TIMEOUT` to indicate that the wait timed out without the event becoming signaled."},{"pos":[3276,3511],"content":"[!IMPORTANT]\n In a [!INCLUDE[win8_appname_long](../../../build/includes/win8_appname_long_md.md)] app, do not call `wait` on the ASTA thread because this call can block the current thread and can cause the app to become unresponsive.","leadings":["","> "],"nodes":[{"content":"In a <ph id=\"ph1\">[!INCLUDE[win8_appname_long](../../../build/includes/win8_appname_long_md.md)]</ph> app, do not call <ph id=\"ph2\">`wait`</ph> on the ASTA thread because this call can block the current thread and can cause the app to become unresponsive.","pos":[14,233],"source":" In a [!INCLUDE[win8_appname_long](../../../build/includes/win8_appname_long_md.md)] app, do not call `wait` on the ASTA thread because this call can block the current thread and can cause the app to become unresponsive."}]},{"pos":[3521,3586],"content":"<bpt id=\"p1\">&lt;a name=\"wait_for_multiple\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  event::wait_for_multiple Method","linkify":"<a name=\"wait_for_multiple\"></a>  event::wait_for_multiple Method","source":"<a name=\"wait_for_multiple\"></a>  event::wait_for_multiple Method"},{"content":"Waits for multiple events to become signaled.","pos":[3590,3635]},{"pos":[3837,3847],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An array of events to wait on.","pos":[3866,3896]},{"content":"The number of events within the array is indicated by the <ph id=\"ph1\">`count`</ph> parameter.","pos":[3897,3973],"source":" The number of events within the array is indicated by the `count` parameter."},{"content":"The count of events within the array supplied in the <ph id=\"ph1\">`_PPEvents`</ph> parameter.","pos":[3991,4066],"source":" The count of events within the array supplied in the `_PPEvents` parameter."},{"content":"If set to the value <ph id=\"ph1\">`true`</ph>, the parameter specifies that all events within the array supplied in the <ph id=\"ph2\">`_PPEvents`</ph> parameter must become signaled in order to satisfy the wait.","pos":[4088,4261],"source":" If set to the value `true`, the parameter specifies that all events within the array supplied in the `_PPEvents` parameter must become signaled in order to satisfy the wait."},{"content":"If set to the value <ph id=\"ph1\">`false`</ph>, it specifies that any event within the array supplied in the <ph id=\"ph2\">`_PPEvents`</ph> parameter becoming signaled will satisfy the wait.","pos":[4262,4414],"source":" If set to the value `false`, it specifies that any event within the array supplied in the `_PPEvents` parameter becoming signaled will satisfy the wait."},{"content":"Indicates the number of milliseconds before the wait times out.","pos":[4435,4498]},{"content":"The value <ph id=\"ph1\">`COOPERATIVE_TIMEOUT_INFINITE`</ph> signifies that there is no timeout.","pos":[4499,4575],"source":" The value `COOPERATIVE_TIMEOUT_INFINITE` signifies that there is no timeout."},{"pos":[4585,4597],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4601,4851],"content":"If the wait was satisfied, the index within the array supplied in the <ph id=\"ph1\">`_PPEvents`</ph> parameter which satisfied the wait condition; otherwise, the value <ph id=\"ph2\">`COOPERATIVE_WAIT_TIMEOUT`</ph> to indicate that the wait timed out without the condition being satisfied.","source":"If the wait was satisfied, the index within the array supplied in the `_PPEvents` parameter which satisfied the wait condition; otherwise, the value `COOPERATIVE_WAIT_TIMEOUT` to indicate that the wait timed out without the condition being satisfied."},{"pos":[4861,4868],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4872,5137],"content":"If the parameter <ph id=\"ph1\">`_FWaitAll`</ph> is set to the value <ph id=\"ph2\">`true`</ph> to indicate that all events must become signaled to satisfy the wait, the index returned by the function carries no special significance other than the fact that it is not the value <ph id=\"ph3\">`COOPERATIVE_WAIT_TIMEOUT`</ph>.","source":"If the parameter `_FWaitAll` is set to the value `true` to indicate that all events must become signaled to satisfy the wait, the index returned by the function carries no special significance other than the fact that it is not the value `COOPERATIVE_WAIT_TIMEOUT`."},{"pos":[5145,5393],"content":"[!IMPORTANT]\n In a [!INCLUDE[win8_appname_long](../../../build/includes/win8_appname_long_md.md)] app, do not call `wait_for_multiple` on the ASTA thread because this call can block the current thread and can cause the app to become unresponsive.","leadings":["","> "],"nodes":[{"content":"In a <ph id=\"ph1\">[!INCLUDE[win8_appname_long](../../../build/includes/win8_appname_long_md.md)]</ph> app, do not call <ph id=\"ph2\">`wait_for_multiple`</ph> on the ASTA thread because this call can block the current thread and can cause the app to become unresponsive.","pos":[14,246],"source":" In a [!INCLUDE[win8_appname_long](../../../build/includes/win8_appname_long_md.md)] app, do not call `wait_for_multiple` on the ASTA thread because this call can block the current thread and can cause the app to become unresponsive."}]},{"pos":[5402,5410],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[5414,5463],"content":"<bpt id=\"p1\">[</bpt>concurrency Namespace<ept id=\"p1\">](concurrency-namespace.md)</ept>","source":"[concurrency Namespace](concurrency-namespace.md)"}],"content":"---\ntitle: \"event Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"concrt/concurrency::event\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"event class\"\nms.assetid: fba35a53-6568-4bfa-9aaf-07c0928cf73d\ncaps.latest.revision: 22\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# event Class\nA manual reset event which is explicitly aware of the Concurrency Runtime.  \n  \n## Syntax  \n  \n```\nclass event;\n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[event::~event Destructor](#dtor)|Destroys an event.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[event::reset Method](#reset)|Resets the event to a non-signaled state.|  \n|[event::set Method](#set)|Signals the event.|  \n|[event::wait Method](#wait)|Waits for the event to become signaled.|  \n|[event::wait_for_multiple Method](#wait_for_multiple)|Waits for multiple events to become signaled.|  \n  \n### Public Constants  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[event::timeout_infinite Constant](#timeout_infinite)|Value indicating that a wait should never time out.|  \n  \n## Remarks  \n For more information, see [Synchronization Data Structures](../../../parallel/concrt/synchronization-data-structures.md).  \n  \n## Inheritance Hierarchy  \n `event`  \n  \n## Requirements  \n **Header:** concrt.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"ctor\"></a>  event::event Constructor  \n Constructs a new event.  \n  \n```\n_CRTIMP event();\n```  \n  \n### Remarks  \n  \n##  <a name=\"dtor\"></a>  event::~event Destructor  \n Destroys an event.  \n  \n```\n~event();\n```  \n  \n### Remarks  \n It is expected that there are no threads waiting on the event when the destructor runs. Allowing the event to destruct with threads still waiting on it results in undefined behavior.  \n  \n##  <a name=\"reset\"></a>  event::reset Method  \n Resets the event to a non-signaled state.  \n  \n```\nvoid reset();\n```  \n  \n##  <a name=\"set\"></a>  event::set Method  \n Signals the event.  \n  \n```\nvoid set();\n```  \n  \n### Remarks  \n Signaling the event can cause an arbitrary number of contexts waiting on the event to become runnable.  \n  \n##  <a name=\"timeout_infinite\"></a>  event::timeout_infinite Constant  \n Value indicating that a wait should never time out.  \n  \n```\nstatic const unsigned int timeout_infinite = COOPERATIVE_TIMEOUT_INFINITE;\n```  \n  \n##  <a name=\"wait\"></a>  event::wait Method  \n Waits for the event to become signaled.  \n  \n```\nsize_t wait(unsigned int _Timeout = COOPERATIVE_TIMEOUT_INFINITE);\n```  \n  \n### Parameters  \n `_Timeout`  \n Indicates the number of milliseconds before the wait times out. The value `COOPERATIVE_TIMEOUT_INFINITE` signifies that there is no timeout.  \n  \n### Return Value  \n If the wait was satisfied, the value `0` is returned; otherwise, the value `COOPERATIVE_WAIT_TIMEOUT` to indicate that the wait timed out without the event becoming signaled.  \n  \n> [!IMPORTANT]\n>  In a [!INCLUDE[win8_appname_long](../../../build/includes/win8_appname_long_md.md)] app, do not call `wait` on the ASTA thread because this call can block the current thread and can cause the app to become unresponsive.  \n  \n##  <a name=\"wait_for_multiple\"></a>  event::wait_for_multiple Method  \n Waits for multiple events to become signaled.  \n  \n```\nstatic size_t __cdecl wait_for_multiple(\n    _In_reads_(count) event** _PPEvents,\n    size_t count,\n    bool _FWaitAll,\n    unsigned int _Timeout = COOPERATIVE_TIMEOUT_INFINITE);\n```  \n  \n### Parameters  \n `_PPEvents`  \n An array of events to wait on. The number of events within the array is indicated by the `count` parameter.  \n  \n `count`  \n The count of events within the array supplied in the `_PPEvents` parameter.  \n  \n `_FWaitAll`  \n If set to the value `true`, the parameter specifies that all events within the array supplied in the `_PPEvents` parameter must become signaled in order to satisfy the wait. If set to the value `false`, it specifies that any event within the array supplied in the `_PPEvents` parameter becoming signaled will satisfy the wait.  \n  \n `_Timeout`  \n Indicates the number of milliseconds before the wait times out. The value `COOPERATIVE_TIMEOUT_INFINITE` signifies that there is no timeout.  \n  \n### Return Value  \n If the wait was satisfied, the index within the array supplied in the `_PPEvents` parameter which satisfied the wait condition; otherwise, the value `COOPERATIVE_WAIT_TIMEOUT` to indicate that the wait timed out without the condition being satisfied.  \n  \n### Remarks  \n If the parameter `_FWaitAll` is set to the value `true` to indicate that all events must become signaled to satisfy the wait, the index returned by the function carries no special significance other than the fact that it is not the value `COOPERATIVE_WAIT_TIMEOUT`.  \n  \n> [!IMPORTANT]\n>  In a [!INCLUDE[win8_appname_long](../../../build/includes/win8_appname_long_md.md)] app, do not call `wait_for_multiple` on the ASTA thread because this call can block the current thread and can cause the app to become unresponsive.  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)\n"}