{"nodes":[{"pos":[12,90],"content":"vsprintf, _vsprintf_l, vswprintf, _vswprintf_l, __vswprintf_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"vsprintf, _vsprintf_l, vswprintf, _vswprintf_l, __vswprintf_l | Microsoft Docs","pos":[0,78]}]},{"pos":[1496,1557],"content":"vsprintf, _vsprintf_l, vswprintf, _vswprintf_l, __vswprintf_l","linkify":"vsprintf, _vsprintf_l, vswprintf, _vswprintf_l, __vswprintf_l","nodes":[{"content":"vsprintf, _vsprintf_l, vswprintf, _vswprintf_l, __vswprintf_l","pos":[0,61]}]},{"content":"Write formatted output using a pointer to a list of arguments.","pos":[1558,1620]},{"content":"More secure versions of these functions are available; see <bpt id=\"p1\">[</bpt>vsprintf_s, _vsprintf_s_l, vswprintf_s, _vswprintf_s_l<ept id=\"p1\">](../../c-runtime-library/reference/vsprintf-s-vsprintf-s-l-vswprintf-s-vswprintf-s-l.md)</ept>.","pos":[1621,1825],"source":" More secure versions of these functions are available; see [vsprintf_s, _vsprintf_s_l, vswprintf_s, _vswprintf_s_l](../../c-runtime-library/reference/vsprintf-s-vsprintf-s-l-vswprintf-s-vswprintf-s-l.md)."},{"pos":[1834,1840],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[3021,3031],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Storage location for output.","pos":[3047,3075]},{"content":"Maximum number of characters to store, in the <ph id=\"ph1\">`UNICODE`</ph> version of this function.","pos":[3093,3174],"source":" Maximum number of characters to store, in the `UNICODE` version of this function."},{"content":"Format specification.","pos":[3193,3214]},{"content":"Pointer to list of arguments.","pos":[3233,3262]},{"content":"The locale to use.","pos":[3281,3299]},{"pos":[3308,3320],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`vsprintf`</ph> and <ph id=\"ph2\">`vswprintf`</ph> return the number of characters written, not including the terminating null character, or a negative value if an output error occurs.","pos":[3324,3484],"source":"`vsprintf` and `vswprintf` return the number of characters written, not including the terminating null character, or a negative value if an output error occurs."},{"content":"If <ph id=\"ph1\">`buffer`</ph> or <ph id=\"ph2\">`format`</ph> is a null pointer, these functions invoke the invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[3485,3670],"source":" If `buffer` or `format` is a null pointer, these functions invoke the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions return -1 and set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph>.","pos":[3671,3762],"source":" If execution is allowed to continue, these functions return -1 and set `errno` to `EINVAL`."},{"pos":[3769,3937],"content":"For information on these and other error codes, see <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For information on these and other error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"pos":[3946,3953],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3957,4098],"content":"Each of these functions takes a pointer to an argument list, and then formats and writes the given data to the memory pointed to by <ph id=\"ph1\">`buffer`</ph>.","source":"Each of these functions takes a pointer to an argument list, and then formats and writes the given data to the memory pointed to by `buffer`."},{"pos":[4105,4261],"content":"The versions of these functions with the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead of the current thread locale.","source":"The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale."},{"pos":[4269,4876],"content":"[!IMPORTANT]\n Using `vsprintf`, here is no way to limit the number of characters written, which means that code using this function is susceptible to buffer overruns. Use [_vsnprintf](../../c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l.md) instead, or call [_vscprintf](../../c-runtime-library/reference/vscprintf-vscprintf-l-vscwprintf-vscwprintf-l.md) to determine how large a buffer is needed. Also, ensure that `format` is not a user-defined string. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).","leadings":["","> "],"nodes":[{"content":" Using `vsprintf`, here is no way to limit the number of characters written, which means that code using this function is susceptible to buffer overruns. Use [_vsnprintf](../../c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l.md) instead, or call [_vscprintf](../../c-runtime-library/reference/vscprintf-vscprintf-l-vscwprintf-vscwprintf-l.md) to determine how large a buffer is needed. Also, ensure that `format` is not a user-defined string. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).","pos":[13,605],"nodes":[{"content":"Using <ph id=\"ph1\">`vsprintf`</ph>, here is no way to limit the number of characters written, which means that code using this function is susceptible to buffer overruns.","pos":[1,153],"source":" Using `vsprintf`, here is no way to limit the number of characters written, which means that code using this function is susceptible to buffer overruns."},{"content":"Use <bpt id=\"p1\">[</bpt>_vsnprintf<ept id=\"p1\">](../../c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l.md)</ept> instead, or call <bpt id=\"p2\">[</bpt>_vscprintf<ept id=\"p2\">](../../c-runtime-library/reference/vscprintf-vscprintf-l-vscwprintf-vscwprintf-l.md)</ept> to determine how large a buffer is needed.","pos":[154,421],"source":" Use [_vsnprintf](../../c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l.md) instead, or call [_vscprintf](../../c-runtime-library/reference/vscprintf-vscprintf-l-vscwprintf-vscwprintf-l.md) to determine how large a buffer is needed."},{"content":"Also, ensure that <ph id=\"ph1\">`format`</ph> is not a user-defined string.","pos":[422,478],"source":" Also, ensure that `format` is not a user-defined string."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Avoiding Buffer Overruns<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms717795)</ept>.","pos":[479,592],"source":" For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795)."}]}]},{"content":"<ph id=\"ph1\">`vswprintf`</ph> conforms to the ISO C Standard, which requires the second parameter, <ph id=\"ph2\">`count`</ph>, of type <ph id=\"ph3\">`size_t`</ph>.","pos":[4883,4990],"source":"`vswprintf` conforms to the ISO C Standard, which requires the second parameter, `count`, of type `size_t`."},{"content":"To force the old nonstandard behavior, define <ph id=\"ph1\">`_CRT_NON_CONFORMING_SWPRINTFS.`</ph> The old behavior may not be in a future version, so code should be changed to use the new conformant behavior.","pos":[4991,5180],"source":" To force the old nonstandard behavior, define `_CRT_NON_CONFORMING_SWPRINTFS.` The old behavior may not be in a future version, so code should be changed to use the new conformant behavior."},{"content":"In C++, these functions have template overloads that invoke the newer, secure counterparts of these functions.","pos":[5187,5297]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[5298,5406],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"pos":[5416,5445],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"TCHAR.H routine","pos":[5452,5467]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[5468,5496],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[5497,5510]},{"content":"_UNICODE defined","pos":[5511,5527]},{"pos":[5758,5770],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[5777,5784]},{"content":"Required header","pos":[5785,5800]},{"content":"Optional headers","pos":[5801,5817]},{"pos":[5885,5910],"content":"<ph id=\"ph1\">`vsprintf`</ph>, <ph id=\"ph2\">`_vsprintf_l`</ph>","source":"`vsprintf`, `_vsprintf_l`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt; and <ph id=\"ph2\">\\&lt;</ph>stdarg.h&gt;","pos":[5911,5937],"source":"\\<stdio.h> and \\<stdarg.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>varargs.h&gt;*","pos":[5938,5951],"source":"\\<varargs.h>*"},{"pos":[5956,5983],"content":"<ph id=\"ph1\">`vswprintf`</ph>, <ph id=\"ph2\">`_vswprintf_l`</ph>","source":"`vswprintf`, `_vswprintf_l`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt; or <ph id=\"ph2\">\\&lt;</ph>wchar.h&gt;, and <ph id=\"ph3\">\\&lt;</ph>stdarg.h&gt;","pos":[5984,6025],"source":"\\<stdio.h> or \\<wchar.h>, and \\<stdarg.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>varargs.h&gt;*","pos":[6026,6039],"source":"\\<varargs.h>*"},{"content":"<ph id=\"ph1\">\\*</ph> Required for UNIX V compatibility.","pos":[6047,6084],"source":"\\* Required for UNIX V compatibility."},{"pos":[6091,6215],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[6224,6231],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7177,7202],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[7206,7298],"content":"<bpt id=\"p1\">[</bpt>System::String::Format<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.string.format.aspx)</ept>","source":"[System::String::Format](https://msdn.microsoft.com/en-us/library/system.string.format.aspx)"},{"pos":[7307,7315],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Stream I/O<ept id=\"p1\">](../../c-runtime-library/stream-i-o.md)</ept><ph id=\"ph1\"> </ph>","pos":[7319,7371],"source":"[Stream I/O](../../c-runtime-library/stream-i-o.md) "},{"content":"<bpt id=\"p1\"> [</bpt>vprintf Functions<ept id=\"p1\">](../../c-runtime-library/vprintf-functions.md)</ept><ph id=\"ph1\"> </ph>","pos":[7374,7441],"source":" [vprintf Functions](../../c-runtime-library/vprintf-functions.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Format Specification Syntax: printf and wprintf Functions<ept id=\"p1\">](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)</ept><ph id=\"ph1\"> </ph>","pos":[7444,7590],"source":" [Format Specification Syntax: printf and wprintf Functions](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md) "},{"content":"<bpt id=\"p1\"> [</bpt>fprintf, _fprintf_l, fwprintf, _fwprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[7593,7715],"source":" [fprintf, _fprintf_l, fwprintf, _fwprintf_l](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>printf, _printf_l, wprintf, _wprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[7718,7832],"source":" [printf, _printf_l, wprintf, _wprintf_l](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>sprintf, _sprintf_l, swprintf, _swprintf_l, <ph id=\"ph1\">\\_</ph>_swprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)</ept><ph id=\"ph2\"> </ph>","pos":[7835,7983],"source":" [sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>va_arg, va_copy, va_end, va_start<ept id=\"p1\">](../../c-runtime-library/reference/va-arg-va-copy-va-end-va-start.md)</ept>","pos":[7986,8091],"source":" [va_arg, va_copy, va_end, va_start](../../c-runtime-library/reference/va-arg-va-copy-va-end-va-start.md)"}],"content":"---\ntitle: \"vsprintf, _vsprintf_l, vswprintf, _vswprintf_l, __vswprintf_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_vswprintf_l\"\n  - \"_vsprintf_l\"\n  - \"vsprintf\"\n  - \"vswprintf\"\n  - \"__vswprintf_l\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"vstprintf\"\n  - \"vswprintf\"\n  - \"_vstprintf\"\n  - \"vsprintf\"\n  - \"__vswprintf_l\"\n  - \"_vsprintf_l\"\n  - \"_vswprintf_l\"\n  - \"vswprintf_l\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"__vswprintf_l function\"\n  - \"_vstprintf_l function\"\n  - \"formatted text\"\n  - \"vstprintf_l function\"\n  - \"_vswprintf_l function\"\n  - \"vsprintf_l function\"\n  - \"buffers, avoiding overruns\"\n  - \"buffer overruns\"\n  - \"vswprintf_l function\"\n  - \"buffers, buffer overruns\"\n  - \"vstprintf function\"\n  - \"_vsprintf_l function\"\n  - \"vswprintf function\"\n  - \"vsprintf function\"\n  - \"_vstprintf function\"\nms.assetid: b8ef1c0d-58f9-4a18-841a-f1a989e1c29b\ncaps.latest.revision: 32\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# vsprintf, _vsprintf_l, vswprintf, _vswprintf_l, __vswprintf_l\nWrite formatted output using a pointer to a list of arguments. More secure versions of these functions are available; see [vsprintf_s, _vsprintf_s_l, vswprintf_s, _vswprintf_s_l](../../c-runtime-library/reference/vsprintf-s-vsprintf-s-l-vswprintf-s-vswprintf-s-l.md).  \n  \n## Syntax  \n  \n```  \nint vsprintf(  \n   char *buffer,  \n   const char *format,  \n   va_list argptr   \n);   \nint _vsprintf_l(  \n   char *buffer,  \n   const char *format,  \n   locale_t locale,  \n   va_list argptr   \n);   \nint vswprintf(  \n   wchar_t *buffer,  \n   size_t count,  \n   const wchar_t *format,  \n   va_list argptr   \n);  \nint _vswprintf_l(  \n   wchar_t *buffer,  \n   size_t count,  \n   const wchar_t *format,  \n   locale_t locale,  \n   va_list argptr   \n);  \nint __vswprintf_l(  \n   wchar_t *buffer,  \n   const wchar_t *format,  \n   locale_t locale,  \n   va_list argptr   \n);  \ntemplate <size_t size>  \nint vsprintf(  \n   char (&buffer)[size],  \n   const char *format,  \n   va_list argptr   \n); // C++ only  \ntemplate <size_t size>  \nint _vsprintf_l(  \n   char (&buffer)[size],  \n   const char *format,  \n   locale_t locale,  \n   va_list argptr   \n); // C++ only  \ntemplate <size_t size>  \nint vswprintf(  \n   wchar_t (&buffer)[size],  \n   const wchar_t *format,  \n   va_list argptr   \n); // C++ only  \ntemplate <size_t size>  \nint _vswprintf_l(  \n   wchar_t (&buffer)[size],  \n   const wchar_t *format,  \n   locale_t locale,  \n   va_list argptr   \n); // C++ only  \n```  \n  \n#### Parameters  \n `buffer`  \n Storage location for output.  \n  \n `count`  \n Maximum number of characters to store, in the `UNICODE` version of this function.  \n  \n `format`  \n Format specification.  \n  \n `argptr`  \n Pointer to list of arguments.  \n  \n `locale`  \n The locale to use.  \n  \n## Return Value  \n `vsprintf` and `vswprintf` return the number of characters written, not including the terminating null character, or a negative value if an output error occurs. If `buffer` or `format` is a null pointer, these functions invoke the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions return -1 and set `errno` to `EINVAL`.  \n  \n For information on these and other error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n Each of these functions takes a pointer to an argument list, and then formats and writes the given data to the memory pointed to by `buffer`.  \n  \n The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale.  \n  \n> [!IMPORTANT]\n>  Using `vsprintf`, here is no way to limit the number of characters written, which means that code using this function is susceptible to buffer overruns. Use [_vsnprintf](../../c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l.md) instead, or call [_vscprintf](../../c-runtime-library/reference/vscprintf-vscprintf-l-vscwprintf-vscwprintf-l.md) to determine how large a buffer is needed. Also, ensure that `format` is not a user-defined string. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).  \n  \n `vswprintf` conforms to the ISO C Standard, which requires the second parameter, `count`, of type `size_t`. To force the old nonstandard behavior, define `_CRT_NON_CONFORMING_SWPRINTFS.` The old behavior may not be in a future version, so code should be changed to use the new conformant behavior.  \n  \n In C++, these functions have template overloads that invoke the newer, secure counterparts of these functions. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_vstprintf`|`vsprintf`|`vsprintf`|`vswprintf`|  \n|`_vstprintf_l`|`_vsprintf_l`|`_vsprintf_l`|`_vswprintf_l`|  \n  \n## Requirements  \n  \n|Routine|Required header|Optional headers|  \n|-------------|---------------------|----------------------|  \n|`vsprintf`, `_vsprintf_l`|\\<stdio.h> and \\<stdarg.h>|\\<varargs.h>*|  \n|`vswprintf`, `_vswprintf_l`|\\<stdio.h> or \\<wchar.h>, and \\<stdarg.h>|\\<varargs.h>*|  \n  \n \\* Required for UNIX V compatibility.  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_vsprintf.c  \n// compile with: /W3  \n// This program uses vsprintf to write to a buffer.  \n// The size of the buffer is determined by _vscprintf.  \n  \n#include <stdlib.h>  \n#include <stdio.h>  \n#include <stdarg.h>  \n  \nvoid test( char * format, ... )  \n{  \n    va_list args;  \n    int     len;  \n    char    *buffer;  \n  \n    // retrieve the variable arguments  \n    va_start( args, format );  \n  \n    len = _vscprintf( format, args ) // _vscprintf doesn't count  \n                                + 1; // terminating '\\0'  \n  \n    buffer = (char*)malloc( len * sizeof(char) );  \n  \n    vsprintf( buffer, format, args ); // C4996  \n    // Note: vsprintf is deprecated; consider using vsprintf_s instead  \n    puts( buffer );  \n  \n    free( buffer );  \n}  \n  \nint main( void )  \n{  \n   test( \"%d %c %d\", 123, '<', 456 );  \n   test( \"%s\", \"This is a string\" );  \n}  \n```  \n  \n```Output  \n123 < 456  \nThis is a string  \n```  \n  \n## .NET Framework Equivalent  \n [System::String::Format](https://msdn.microsoft.com/en-us/library/system.string.format.aspx)  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [vprintf Functions](../../c-runtime-library/vprintf-functions.md)   \n [Format Specification Syntax: printf and wprintf Functions](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)   \n [fprintf, _fprintf_l, fwprintf, _fwprintf_l](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)   \n [printf, _printf_l, wprintf, _wprintf_l](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)   \n [sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)   \n [va_arg, va_copy, va_end, va_start](../../c-runtime-library/reference/va-arg-va-copy-va-end-va-start.md)"}