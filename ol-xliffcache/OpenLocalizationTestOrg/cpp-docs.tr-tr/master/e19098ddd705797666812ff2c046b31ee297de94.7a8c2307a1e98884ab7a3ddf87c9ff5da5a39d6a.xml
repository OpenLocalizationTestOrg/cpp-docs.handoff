{"nodes":[{"pos":[12,55],"content":"ATL Event Handling Summary | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ATL Event Handling Summary | Microsoft Docs","pos":[0,43]}]},{"content":"ATL Event Handling Summary","pos":[619,645]},{"content":"In general, handling COM events is a relatively simple process.","pos":[646,709]},{"content":"There are three main steps:","pos":[710,737]},{"content":"Implement the event interface on your object.","pos":[747,792]},{"content":"Advise the event source that your object wants to receive events.","pos":[802,867]},{"content":"Unadvise the event source when your object no longer needs to receive events.","pos":[877,954]},{"content":"Implementing the Interface","pos":[963,989]},{"content":"There are four main ways of implementing an interface using ATL.","pos":[993,1057]},{"content":"Derive from","pos":[1064,1075]},{"content":"Suitable for Interface type","pos":[1076,1103]},{"content":"Requires you to implement all methods*","pos":[1104,1142]},{"content":"Requires a type library at run time","pos":[1143,1178]},{"content":"The interface","pos":[1327,1340]},{"content":"Vtable","pos":[1341,1347]},{"content":"Yes","pos":[1348,1351]},{"content":"No","pos":[1352,1354]},{"content":"IDispatchImpl","pos":[1360,1373]},{"content":"Dual","pos":[1416,1420]},{"content":"Yes","pos":[1421,1424]},{"content":"Yes","pos":[1425,1428]},{"content":"IDispEventImpl","pos":[1434,1448]},{"content":"Dispinterface","pos":[1492,1505]},{"content":"No","pos":[1506,1508]},{"content":"Yes","pos":[1509,1512]},{"content":"IDispEventSimpleImpl","pos":[1518,1538]},{"content":"Dispinterface","pos":[1588,1601]},{"content":"No","pos":[1602,1604]},{"content":"No","pos":[1605,1607]},{"pos":[1618,1735],"content":"When using ATL support classes, you are never required to implement the <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> or <ph id=\"ph1\">`IDispatch`</ph> methods manually.","source":" When using ATL support classes, you are never required to implement the **IUnknown** or `IDispatch` methods manually."},{"content":"Advising and Unadvising the Event Source","pos":[1744,1784]},{"content":"There are three main ways of advising and unadvising an event source using ATL.","pos":[1788,1867]},{"content":"Advise function","pos":[1874,1889]},{"content":"Unadvise function","pos":[1890,1907]},{"content":"Most suitable for use with","pos":[1908,1934]},{"content":"Requires you to keep track of a cookie","pos":[1935,1973]},{"content":"Comments","pos":[1974,1982]},{"content":"<bpt id=\"p1\">[</bpt>AtlAdvise<ept id=\"p1\">](http://msdn.microsoft.com/library/625a2f03-6b7f-4761-be5d-d2871d1d3254)</ept>, <bpt id=\"p2\">[</bpt>CComPtrBase::Advise<ept id=\"p2\">](../atl/reference/ccomptrbase-class.md#ccomptrbase__advise)</ept><ph id=\"ph1\">|</ph><bpt id=\"p3\">[</bpt>AtlUnadvise<ept id=\"p3\">](http://msdn.microsoft.com/library/939d2e50-e2df-4e8f-a16a-e9650b8f0340)</ept>|Vtable or dual interfaces|Yes|<ph id=\"ph2\">`AtlAdvise`</ph> is a global ATL function.","pos":[2132,2451],"source":"[AtlAdvise](http://msdn.microsoft.com/library/625a2f03-6b7f-4761-be5d-d2871d1d3254), [CComPtrBase::Advise](../atl/reference/ccomptrbase-class.md#ccomptrbase__advise)|[AtlUnadvise](http://msdn.microsoft.com/library/939d2e50-e2df-4e8f-a16a-e9650b8f0340)|Vtable or dual interfaces|Yes|`AtlAdvise` is a global ATL function."},{"content":"is used by <bpt id=\"p1\">[</bpt>CComPtr<ept id=\"p1\">](../atl/reference/ccomptr-class.md)</ept> and <bpt id=\"p2\">[</bpt>CComQIPtr<ept id=\"p2\">](../atl/reference/ccomqiptr-class.md)</ept>.|","pos":[2474,2584],"source":" is used by [CComPtr](../atl/reference/ccomptr-class.md) and [CComQIPtr](../atl/reference/ccomqiptr-class.md).|"},{"content":"<bpt id=\"p1\">[</bpt>IDispEventSimpleImpl::DispEventAdvise<ept id=\"p1\">](../atl/reference/idispeventsimpleimpl-class.md#idispeventsimpleimpl__dispeventadvise)</ept><ph id=\"ph1\">|</ph><bpt id=\"p2\">[</bpt>IDispEventSimpleImpl::DispEventUnadvise<ept id=\"p2\">](../atl/reference/idispeventsimpleimpl-class.md#idispeventsimpleimpl__dispeventunadvise)</ept><ph id=\"ph2\">|</ph><bpt id=\"p3\">[</bpt>IDispEventImpl<ept id=\"p3\">](../atl/reference/idispeventimpl-class.md)</ept> or <bpt id=\"p4\">[</bpt>IDispEventSimpleImpl<ept id=\"p4\">](../atl/reference/idispeventsimpleimpl-class.md)</ept>|No|Fewer parameters than <ph id=\"ph3\">`AtlAdvise`</ph> since the base class does more work.|","pos":[2589,3052],"source":"[IDispEventSimpleImpl::DispEventAdvise](../atl/reference/idispeventsimpleimpl-class.md#idispeventsimpleimpl__dispeventadvise)|[IDispEventSimpleImpl::DispEventUnadvise](../atl/reference/idispeventsimpleimpl-class.md#idispeventsimpleimpl__dispeventunadvise)|[IDispEventImpl](../atl/reference/idispeventimpl-class.md) or [IDispEventSimpleImpl](../atl/reference/idispeventsimpleimpl-class.md)|No|Fewer parameters than `AtlAdvise` since the base class does more work.|"},{"content":"<bpt id=\"p1\">[</bpt>CComCompositeControl::AdviseSinkMap(TRUE)<ept id=\"p1\">](../atl/reference/ccomcompositecontrol-class.md#ccomcompositecontrol__advisesinkmap)</ept><ph id=\"ph1\">|</ph><bpt id=\"p2\">[</bpt>CComCompositeControl::AdviseSinkMap(FALSE)<ept id=\"p2\">](../atl/reference/ccomcompositecontrol-class.md#ccomcompositecontrol__advisesinkmap)</ept>|ActiveX controls in Composite controls|No|<ph id=\"ph2\">`CComCompositeControl::AdviseSinkMap`</ph> advises all entries in the event sink map.","pos":[3056,3435],"source":"[CComCompositeControl::AdviseSinkMap(TRUE)](../atl/reference/ccomcompositecontrol-class.md#ccomcompositecontrol__advisesinkmap)|[CComCompositeControl::AdviseSinkMap(FALSE)](../atl/reference/ccomcompositecontrol-class.md#ccomcompositecontrol__advisesinkmap)|ActiveX controls in Composite controls|No|`CComCompositeControl::AdviseSinkMap` advises all entries in the event sink map."},{"content":"The same function unadvises the entries.","pos":[3436,3476]},{"content":"This method is called automatically by the <ph id=\"ph1\">`CComCompositeControl`</ph> class.|","pos":[3477,3550],"source":" This method is called automatically by the `CComCompositeControl` class.|"},{"content":"<bpt id=\"p1\">[</bpt>CAxDialogImpl::AdviseSinkMap(TRUE)<ept id=\"p1\">](../atl/reference/caxdialogimpl-class.md#caxdialogimpl__advisesinkmap)</ept><ph id=\"ph1\">|</ph><bpt id=\"p2\">[</bpt>CAxDialogImpl::AdviseSinkMap(FALSE)<ept id=\"p2\">](../atl/reference/caxdialogimpl-class.md#caxdialogimpl__advisesinkmap)</ept>|ActiveX controls in a dialog box|No|<ph id=\"ph2\">`CAxDialogImpl::AdviseSinkMap`</ph> advises and unadvises all ActiveX controls in the dialog resource.","pos":[3554,3902],"source":"[CAxDialogImpl::AdviseSinkMap(TRUE)](../atl/reference/caxdialogimpl-class.md#caxdialogimpl__advisesinkmap)|[CAxDialogImpl::AdviseSinkMap(FALSE)](../atl/reference/caxdialogimpl-class.md#caxdialogimpl__advisesinkmap)|ActiveX controls in a dialog box|No|`CAxDialogImpl::AdviseSinkMap` advises and unadvises all ActiveX controls in the dialog resource."},{"content":"This is done automatically for you.|","pos":[3903,3939]},{"content":"See Also","pos":[3948,3956]},{"content":"Event Handling","pos":[3961,3975]},{"content":"Supporting IDispEventImpl","pos":[4016,4041]}],"content":"---\ntitle: \"ATL Event Handling Summary | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"event handling, implementing\"\nms.assetid: e8b47ef0-0bdc-47ff-9dd6-34df11dde9a2\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# ATL Event Handling Summary\nIn general, handling COM events is a relatively simple process. There are three main steps:  \n  \n-   Implement the event interface on your object.  \n  \n-   Advise the event source that your object wants to receive events.  \n  \n-   Unadvise the event source when your object no longer needs to receive events.  \n  \n## Implementing the Interface  \n There are four main ways of implementing an interface using ATL.  \n  \n|Derive from|Suitable for Interface type|Requires you to implement all methods*|Requires a type library at run time|  \n|-----------------|---------------------------------|---------------------------------------------|-----------------------------------------|  \n|The interface|Vtable|Yes|No|  \n|[IDispatchImpl](../atl/reference/idispatchimpl-class.md)|Dual|Yes|Yes|  \n|[IDispEventImpl](../atl/reference/idispeventimpl-class.md)|Dispinterface|No|Yes|  \n|[IDispEventSimpleImpl](../atl/reference/idispeventsimpleimpl-class.md)|Dispinterface|No|No|  \n  \n \\* When using ATL support classes, you are never required to implement the **IUnknown** or `IDispatch` methods manually.  \n  \n## Advising and Unadvising the Event Source  \n There are three main ways of advising and unadvising an event source using ATL.  \n  \n|Advise function|Unadvise function|Most suitable for use with|Requires you to keep track of a cookie|Comments|  \n|---------------------|-----------------------|--------------------------------|---------------------------------------------|--------------|  \n\n|[AtlAdvise](http://msdn.microsoft.com/library/625a2f03-6b7f-4761-be5d-d2871d1d3254), [CComPtrBase::Advise](../atl/reference/ccomptrbase-class.md#ccomptrbase__advise)|[AtlUnadvise](http://msdn.microsoft.com/library/939d2e50-e2df-4e8f-a16a-e9650b8f0340)|Vtable or dual interfaces|Yes|`AtlAdvise` is a global ATL function. `CComPtrBase::Advise` is used by [CComPtr](../atl/reference/ccomptr-class.md) and [CComQIPtr](../atl/reference/ccomqiptr-class.md).|  \n\n|[IDispEventSimpleImpl::DispEventAdvise](../atl/reference/idispeventsimpleimpl-class.md#idispeventsimpleimpl__dispeventadvise)|[IDispEventSimpleImpl::DispEventUnadvise](../atl/reference/idispeventsimpleimpl-class.md#idispeventsimpleimpl__dispeventunadvise)|[IDispEventImpl](../atl/reference/idispeventimpl-class.md) or [IDispEventSimpleImpl](../atl/reference/idispeventsimpleimpl-class.md)|No|Fewer parameters than `AtlAdvise` since the base class does more work.|  \n|[CComCompositeControl::AdviseSinkMap(TRUE)](../atl/reference/ccomcompositecontrol-class.md#ccomcompositecontrol__advisesinkmap)|[CComCompositeControl::AdviseSinkMap(FALSE)](../atl/reference/ccomcompositecontrol-class.md#ccomcompositecontrol__advisesinkmap)|ActiveX controls in Composite controls|No|`CComCompositeControl::AdviseSinkMap` advises all entries in the event sink map. The same function unadvises the entries. This method is called automatically by the `CComCompositeControl` class.|  \n|[CAxDialogImpl::AdviseSinkMap(TRUE)](../atl/reference/caxdialogimpl-class.md#caxdialogimpl__advisesinkmap)|[CAxDialogImpl::AdviseSinkMap(FALSE)](../atl/reference/caxdialogimpl-class.md#caxdialogimpl__advisesinkmap)|ActiveX controls in a dialog box|No|`CAxDialogImpl::AdviseSinkMap` advises and unadvises all ActiveX controls in the dialog resource. This is done automatically for you.|  \n  \n## See Also  \n [Event Handling](../atl/event-handling-and-atl.md)   \n [Supporting IDispEventImpl](../atl/supporting-idispeventimpl.md)\n\n"}