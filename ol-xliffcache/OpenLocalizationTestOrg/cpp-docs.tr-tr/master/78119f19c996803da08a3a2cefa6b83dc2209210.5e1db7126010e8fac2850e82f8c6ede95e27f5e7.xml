{"nodes":[{"pos":[12,49],"content":"Compiler Error C2065 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Error C2065 | Microsoft Docs","pos":[0,37]}]},{"content":"Compiler Error C2065","pos":[598,618]},{"content":"'identifier' : undeclared identifier","pos":[619,655]},{"content":"A variable's type must be specified in a declaration before it can be used.","pos":[662,737]},{"content":"The parameters that a function uses must be specified in a declaration, or prototype, before the function can be used.","pos":[738,856]},{"content":"Possible causes:","pos":[863,879]},{"content":"Identifier name is misspelled.","pos":[889,919]},{"content":"Identifier uses the wrong uppercase and lowercase letters.","pos":[929,987]},{"content":"Missing closing quote after a string constant.","pos":[997,1043]},{"content":"You are compiling with a debug version of the C runtime, declaring a Standard C++ Library iterator variable in a <ph id=\"ph1\">`for`</ph> loop, and then trying to use that iterator variable outside the scope of the <ph id=\"ph2\">`for`</ph> loop.","pos":[1053,1260],"source":"You are compiling with a debug version of the C runtime, declaring a Standard C++ Library iterator variable in a `for` loop, and then trying to use that iterator variable outside the scope of the `for` loop."},{"content":"Compiling C++ Standard Library code with a debug version of the C runtime implies <bpt id=\"p1\">[</bpt>/Zc:forScope<ept id=\"p1\">](../../build/reference/zc-forscope-force-conformance-in-for-loop-scope.md)</ept>.","pos":[1261,1432],"source":" Compiling C++ Standard Library code with a debug version of the C runtime implies [/Zc:forScope](../../build/reference/zc-forscope-force-conformance-in-for-loop-scope.md)."},{"content":"See <bpt id=\"p1\">[</bpt>Debug Iterator Support<ept id=\"p1\">](../../standard-library/debug-iterator-support.md)</ept> for more information.","pos":[1434,1534],"source":"  See [Debug Iterator Support](../../standard-library/debug-iterator-support.md) for more information."},{"content":"You may be calling a function in an SDK header file that is currently not supported in your build environment.","pos":[1544,1654]},{"content":"Omitting necessary include files, especially if you define <ph id=\"ph1\">`VC_EXTRALEAN`</ph>, <ph id=\"ph2\">`WIN32_LEAN_AND_MEAN`</ph>, or <ph id=\"ph3\">`WIN32_EXTRA_LEAN`</ph>.","pos":[1664,1784],"source":"Omitting necessary include files, especially if you define `VC_EXTRALEAN`, `WIN32_LEAN_AND_MEAN`, or `WIN32_EXTRA_LEAN`."},{"content":"These symbols exclude some header files from windows.h and afxv_w32.h to speed compiles.","pos":[1785,1873]},{"content":"(Look in windows.h and afxv_w32.h for an up-to-date description of what's excluded.)","pos":[1874,1958]},{"content":"Improper namespace scope.","pos":[1968,1993]},{"content":"For example, to resolve C++ Standard Library functions and operators that are not fully qualified, you must specify the <ph id=\"ph1\">`std`</ph> namespace with the <ph id=\"ph2\">`using`</ph> directive.","pos":[1994,2157],"source":" For example, to resolve C++ Standard Library functions and operators that are not fully qualified, you must specify the `std` namespace with the `using` directive."},{"content":"The following example fails to compile because the <ph id=\"ph1\">`using`</ph> directive is commented out and <ph id=\"ph2\">`cout`</ph> is defined in the <ph id=\"ph3\">`std`</ph> namespace:","pos":[2158,2289],"source":" The following example fails to compile because the `using` directive is commented out and `cout` is defined in the `std` namespace:"},{"content":"Example","pos":[2298,2305]},{"content":"The following sample generates C2065 and shows how to fix it.","pos":[2309,2370]},{"content":"Example","pos":[2659,2666]},{"content":"When calling a generic function, if the intended type argument cannot be deduced from the parameters used, the compiler will report an error.","pos":[2670,2811]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Generic Functions (C++/CLI)<ept id=\"p1\">](../../windows/generic-functions-cpp-cli.md)</ept>.","pos":[2812,2912],"source":" For more information, see [Generic Functions (C++/CLI)](../../windows/generic-functions-cpp-cli.md)."},{"content":"The following sample generates C2065 and shows how to fix it.","pos":[2919,2980]},{"content":"Example","pos":[3240,3247]},{"content":"This error can also be generated as a result of compiler conformance work that was done for Visual C++ 2005: parameter checking for Visual C++ attributes.","pos":[3251,3405]},{"content":"The following sample generates C2065 and shows how to fix it.","pos":[3412,3473]}],"content":"---\ntitle: \"Compiler Error C2065 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"C2065\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C2065\"\nms.assetid: 78093376-acb7-45f5-9323-5ed7e0aab1dc\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Compiler Error C2065\n'identifier' : undeclared identifier  \n  \n A variable's type must be specified in a declaration before it can be used. The parameters that a function uses must be specified in a declaration, or prototype, before the function can be used.  \n  \n Possible causes:  \n  \n1.  Identifier name is misspelled.  \n  \n2.  Identifier uses the wrong uppercase and lowercase letters.  \n  \n3.  Missing closing quote after a string constant.  \n  \n4.  You are compiling with a debug version of the C runtime, declaring a Standard C++ Library iterator variable in a `for` loop, and then trying to use that iterator variable outside the scope of the `for` loop. Compiling C++ Standard Library code with a debug version of the C runtime implies [/Zc:forScope](../../build/reference/zc-forscope-force-conformance-in-for-loop-scope.md).  See [Debug Iterator Support](../../standard-library/debug-iterator-support.md) for more information.  \n  \n5.  You may be calling a function in an SDK header file that is currently not supported in your build environment.  \n  \n6.  Omitting necessary include files, especially if you define `VC_EXTRALEAN`, `WIN32_LEAN_AND_MEAN`, or `WIN32_EXTRA_LEAN`. These symbols exclude some header files from windows.h and afxv_w32.h to speed compiles. (Look in windows.h and afxv_w32.h for an up-to-date description of what's excluded.)  \n  \n7.  Improper namespace scope. For example, to resolve C++ Standard Library functions and operators that are not fully qualified, you must specify the `std` namespace with the `using` directive. The following example fails to compile because the `using` directive is commented out and `cout` is defined in the `std` namespace:  \n  \n## Example  \n The following sample generates C2065 and shows how to fix it.  \n  \n```  \n// C2065.cpp  \n// compile with: /EHsc  \n// using namespace std;   // Uncomment this line to fix  \n#include <iostream>  \nint main() {  \n   cout << \"Hello\" << endl;   // C2065  \n  \n   // Or try the following line instead  \n   std::cout << \"Hello\" << std::endl;  \n}  \n```  \n  \n## Example  \n When calling a generic function, if the intended type argument cannot be deduced from the parameters used, the compiler will report an error. For more information, see [Generic Functions (C++/CLI)](../../windows/generic-functions-cpp-cli.md).  \n  \n The following sample generates C2065 and shows how to fix it.  \n  \n```  \n// C2065_b.cpp  \n// compile with: /clr  \ngeneric <typename ItemType>  \nvoid G(int i) {}  \n  \nint main() {  \n   // global generic function call  \n   G<T>(10);   // C2065  \n   G<int>(10);   // OK - fix with a specific type argument  \n}  \n```  \n  \n## Example  \n This error can also be generated as a result of compiler conformance work that was done for Visual C++ 2005: parameter checking for Visual C++ attributes.  \n  \n The following sample generates C2065 and shows how to fix it.  \n  \n```  \n// C2065_c.cpp  \n// compile with: /c  \n[module(DLL, name=MyLibrary)];   // C2065  \n// try the following line instead  \n// [module(dll, name=\"MyLibrary\")];  \n  \n[export]  \nstruct MyStruct {  \n   int i;  \n};  \n```"}