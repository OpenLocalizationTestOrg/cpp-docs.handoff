{"nodes":[{"pos":[12,54],"content":"list::remove_if (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"list::remove_if (STL-CLR) | Microsoft Docs","pos":[0,42]}]},{"content":"list::remove_if (STL/CLR)","pos":[636,661]},{"content":"Removes elements that pass a specified test.","pos":[662,706]},{"content":"Syntax","pos":[715,721]},{"content":"Parameters","pos":[808,818]},{"content":"pred","pos":[822,826]},{"content":"Test for elements to remove.","pos":[830,858]},{"content":"Remarks","pos":[867,874]},{"content":"The member function removes from the controlled sequence (erases) every element <ph id=\"ph1\">`X`</ph> for which <ph id=\"ph2\">`pred``(X)`</ph> is true.","pos":[878,992],"source":"The member function removes from the controlled sequence (erases) every element `X` for which `pred``(X)` is true."},{"content":"You use it to remove all elements that satisfy a condition you specify as a function or delegate.","pos":[993,1090]},{"content":"Example","pos":[1099,1106]},{"content":"Requirements","pos":[2212,2224]},{"pos":[2228,2254],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/list&gt;","source":"**Header:** \\<cliext/list>"},{"pos":[2261,2282],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2291,2299]},{"content":"list (STL/CLR)","pos":[2304,2318]},{"content":"list::clear (STL/CLR)","pos":[2352,2373]},{"content":"list::erase (STL/CLR)","pos":[2413,2434]},{"content":"list::remove (STL/CLR)","pos":[2474,2496]},{"content":"list::unique (STL/CLR)","pos":[2537,2559]}],"content":"---\ntitle: \"list::remove_if (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::list::remove_if\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"remove_if member [STL/CLR]\"\nms.assetid: cbc66192-751b-41c5-b557-d5d7bbc2a840\ncaps.latest.revision: 15\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# list::remove_if (STL/CLR)\nRemoves elements that pass a specified test.  \n  \n## Syntax  \n  \n```  \ntemplate<typename Pred1>  \n    void remove_if(Pred1 pred);  \n```  \n  \n#### Parameters  \n pred  \n Test for elements to remove.  \n  \n## Remarks  \n The member function removes from the controlled sequence (erases) every element `X` for which `pred``(X)` is true. You use it to remove all elements that satisfy a condition you specify as a function or delegate.  \n  \n## Example  \n  \n```  \n// cliext_list_remove_if.cpp   \n// compile with: /clr   \n#include <cliext/list>   \n  \nint main()   \n    {   \n    cliext::list<wchar_t> c1;   \n    c1.push_back(L'a');   \n    c1.push_back(L'b');   \n    c1.push_back(L'b');   \n    c1.push_back(L'b');   \n    c1.push_back(L'c');   \n  \n// display initial contents \" a b b b c\"   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// fail to remove and redisplay   \n    c1.remove_if(cliext::binder2nd<cliext::equal_to<wchar_t> >(   \n        cliext::equal_to<wchar_t>(), L'd'));   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// remove and redisplay   \n    c1.remove_if(cliext::binder2nd<cliext::not_equal_to<wchar_t> >(   \n        cliext::not_equal_to<wchar_t>(), L'b'));   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \na b b b c  \na b b b c  \nb b b  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/list>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [list (STL/CLR)](../dotnet/list-stl-clr.md)   \n [list::clear (STL/CLR)](../dotnet/list-clear-stl-clr.md)   \n [list::erase (STL/CLR)](../dotnet/list-erase-stl-clr.md)   \n [list::remove (STL/CLR)](../dotnet/list-remove-stl-clr.md)   \n [list::unique (STL/CLR)](../dotnet/list-unique-stl-clr.md)"}