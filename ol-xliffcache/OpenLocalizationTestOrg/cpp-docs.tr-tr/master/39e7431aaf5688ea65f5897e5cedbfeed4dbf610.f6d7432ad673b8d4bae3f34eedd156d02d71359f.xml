{"nodes":[{"pos":[12,60],"content":"&lt;unordered_map&gt; functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"unordered_map<ph id=\"ph1\">&amp;gt;</ph> functions | Microsoft Docs","pos":[4,48],"source":"unordered_map&gt; functions | Microsoft Docs"}]},{"content":"unordered_map<ph id=\"ph1\">&amp;gt;</ph> functions","pos":[267,294],"source":"unordered_map&gt; functions"},{"content":"swap (unordered_map)","pos":[311,331]},{"content":"swap (unordered_multimap)","pos":[350,375]},{"pos":[442,462],"content":"swap (unordered_map)"},{"content":"Swaps the contents of two containers.","pos":[466,503]},{"content":"Parameters","pos":[721,731]},{"content":"The key type.","pos":[744,757]},{"content":"The mapped type.","pos":[772,788]},{"content":"The hash function object type.","pos":[805,835]},{"content":"The equality comparison function object type.","pos":[852,897]},{"content":"The allocator class.","pos":[915,935]},{"content":"The first container to swap.","pos":[952,980]},{"content":"The second container to swap.","pos":[998,1027]},{"content":"Remarks","pos":[1037,1044]},{"pos":[1048,1181],"content":"The template function executes <ph id=\"ph1\">`left.`</ph><bpt id=\"p1\">[</bpt>unordered_map::swap<ept id=\"p1\">](../standard-library/unordered-map-class.md#unordered_map__swap)</ept><ph id=\"ph2\">`(right)`</ph>.","source":"The template function executes `left.`[unordered_map::swap](../standard-library/unordered-map-class.md#unordered_map__swap)`(right)`."},{"content":"Example","pos":[1191,1198]},{"pos":[2644,2669],"content":"swap (unordered_multimap)"},{"content":"Swaps the contents of two containers.","pos":[2673,2710]},{"content":"Parameters","pos":[2938,2948]},{"content":"The key type.","pos":[2961,2974]},{"content":"The mapped type.","pos":[2989,3005]},{"content":"The hash function object type.","pos":[3022,3052]},{"content":"The equality comparison function object type.","pos":[3069,3114]},{"content":"The allocator class.","pos":[3132,3152]},{"content":"The first container to swap.","pos":[3169,3197]},{"content":"The second container to swap.","pos":[3215,3244]},{"content":"Remarks","pos":[3254,3261]},{"pos":[3265,3413],"content":"The template function executes <ph id=\"ph1\">`left.`</ph><bpt id=\"p1\">[</bpt>unordered_multimap::swap<ept id=\"p1\">](../standard-library/unordered-multimap-class.md#unordered_multimap__swap)</ept><ph id=\"ph2\">`(right)`</ph>.","source":"The template function executes `left.`[unordered_multimap::swap](../standard-library/unordered-multimap-class.md#unordered_multimap__swap)`(right)`."},{"content":"Example","pos":[3423,3430]},{"content":"See Also","pos":[4748,4756]},{"content":"&lt;unordered_map&gt;","pos":[4761,4776],"source":"<unordered_map>"}],"content":"---\ntitle: \"&lt;unordered_map&gt; functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: cf2e4115-f205-4a0e-90be-a143ffcc1f44\ncaps.latest.revision: 10\nmanager: \"ghogen\"\n---\n# &lt;unordered_map&gt; functions\n|||  \n|-|-|  \n|[swap (unordered_map)](#swap_function)|[swap (unordered_multimap)](#swap_function_multimap)|  \n  \n##  <a name=\"swap_function\"></a>  swap (unordered_map)  \n Swaps the contents of two containers.  \n  \n```  \ntemplate <class Key, class Ty, class Hash, class Pred, class Alloc>  \nvoid swap(\n    unordered_map <Key, Ty, Hash, Pred, Alloc>& left,  \n    unordered_map <Key, Ty, Hash, Pred, Alloc>& right);\n```  \n  \n### Parameters  \n `Key`  \n The key type.  \n  \n `Ty`  \n The mapped type.  \n  \n `Hash`  \n The hash function object type.  \n  \n `Pred`  \n The equality comparison function object type.  \n  \n `Alloc`  \n The allocator class.  \n  \n `left`  \n The first container to swap.  \n  \n `right`  \n The second container to swap.  \n  \n### Remarks  \n The template function executes `left.`[unordered_map::swap](../standard-library/unordered-map-class.md#unordered_map__swap)`(right)`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__u_m_swap.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_map<char, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n  \n    c1.insert(Mymap::value_type('a', 1));   \n    c1.insert(Mymap::value_type('b', 2));   \n    c1.insert(Mymap::value_type('c', 3));   \n  \n// display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n    Mymap c2;   \n  \n    c2.insert(Mymap::value_type('d', 4));   \n    c2.insert(Mymap::value_type('e', 5));   \n    c2.insert(Mymap::value_type('f', 6));   \n  \n    c1.swap(c2);   \n  \n// display contents \" [f 6] [e 5] [d 4]\"   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n    swap(c1, c2);   \n  \n// display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::const_iterator it = c1.begin();   \n        it != c1.end(); ++it)   \n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n[c, 3] [b, 2] [a, 1]  \n[f, 6] [e, 5] [d, 4]  \n[c, 3] [b, 2] [a, 1]  \n```  \n  \n##  <a name=\"swap_function_multimap\"></a>  swap (unordered_multimap)  \n Swaps the contents of two containers.  \n  \n```  \ntemplate <class Key, class Ty, class Hash, class Pred, class Alloc>  \nvoid swap(\n    unordered_multimap <Key, Ty, Hash, Pred, Alloc>& left,  \n    unordered_multimap <Key, Ty, Hash, Pred, Alloc>& right);\n```  \n  \n### Parameters  \n `Key`  \n The key type.  \n  \n `Ty`  \n The mapped type.  \n  \n `Hash`  \n The hash function object type.  \n  \n `Pred`  \n The equality comparison function object type.  \n  \n `Alloc`  \n The allocator class.  \n  \n `left`  \n The first container to swap.  \n  \n `right`  \n The second container to swap.  \n  \n### Remarks  \n The template function executes `left.`[unordered_multimap::swap](../standard-library/unordered-multimap-class.md#unordered_multimap__swap)`(right)`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__unordered_map__u_mm_swap.cpp   \n// compile with: /EHsc   \n#include <unordered_map>   \n#include <iostream>   \n  \ntypedef std::unordered_multimap<char, int> Mymap;\nint main()\n{\n    Mymap c1;\n\n    c1.insert(Mymap::value_type('a', 1));\n    c1.insert(Mymap::value_type('b', 2));\n    c1.insert(Mymap::value_type('c', 3));\n\n    // display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::const_iterator it = c1.begin();\n        it != c1.end(); ++it)\n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";\n    std::cout << std::endl;\n\n    Mymap c2;\n\n    c2.insert(Mymap::value_type('d', 4));\n    c2.insert(Mymap::value_type('e', 5));\n    c2.insert(Mymap::value_type('f', 6));\n\n    c1.swap(c2);\n\n    // display contents \" [f 6] [e 5] [d 4]\"   \n    for (Mymap::const_iterator it = c1.begin();\n        it != c1.end(); ++it)\n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";\n    std::cout << std::endl;\n\n    swap(c1, c2);\n\n    // display contents \" [c 3] [b 2] [a 1]\"   \n    for (Mymap::const_iterator it = c1.begin();\n        it != c1.end(); ++it)\n        std::cout << \" [\" << it->first << \", \" << it->second << \"]\";\n    std::cout << std::endl;\n\n    return (0);\n}\n  \n```  \n  \n```Output  \n[c, 3] [b, 2] [a, 1]  \n[f, 6] [e, 5] [d, 4]  \n[c, 3] [b, 2] [a, 1]  \n```  \n  \n## See Also  \n [<unordered_map>](../standard-library/unordered-map.md)\n\n"}