{"nodes":[{"pos":[12,50],"content":"while Statement (C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"while Statement (C++) | Microsoft Docs","pos":[0,38]}]},{"content":"while Statement (C++)","pos":[665,686]},{"pos":[687,756],"content":"Executes <bpt id=\"p1\">*</bpt>statement<ept id=\"p1\">*</ept> repeatedly until <bpt id=\"p2\">*</bpt>expression<ept id=\"p2\">*</ept> evaluates to zero.","source":"Executes *statement* repeatedly until *expression* evaluates to zero."},{"content":"Syntax","pos":[765,771]},{"content":"Remarks","pos":[842,849]},{"content":"The test of <bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> takes place before each execution of the loop; therefore, a <ph id=\"ph1\">`while`</ph> loop executes zero or more times.","pos":[853,979],"source":"The test of *expression* takes place before each execution of the loop; therefore, a `while` loop executes zero or more times."},{"content":"<bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> must be of an integral type, a pointer type, or a class type with an unambiguous conversion to an integral or pointer type.","pos":[980,1116],"source":"*expression* must be of an integral type, a pointer type, or a class type with an unambiguous conversion to an integral or pointer type."},{"content":"A <ph id=\"ph1\">`while`</ph> loop can also terminate when a <bpt id=\"p1\">[</bpt>break<ept id=\"p1\">](../cpp/break-statement-cpp.md)</ept>, <bpt id=\"p2\">[</bpt>goto<ept id=\"p2\">](../cpp/goto-statement-cpp.md)</ept>, or <bpt id=\"p3\">[</bpt>return<ept id=\"p3\">](../cpp/return-statement-cpp.md)</ept> within the statement body is executed.","pos":[1123,1324],"source":"A `while` loop can also terminate when a [break](../cpp/break-statement-cpp.md), [goto](../cpp/goto-statement-cpp.md), or [return](../cpp/return-statement-cpp.md) within the statement body is executed."},{"content":"Use <bpt id=\"p1\">[</bpt>continue<ept id=\"p1\">](../cpp/continue-statement-cpp.md)</ept> to terminate the current iteration without exiting the <ph id=\"ph1\">`while`</ph> loop.","pos":[1325,1442],"source":" Use [continue](../cpp/continue-statement-cpp.md) to terminate the current iteration without exiting the `while` loop."},{"content":"<bpt id=\"p1\">**</bpt>continue<ept id=\"p1\">**</ept> passes control to the next iteration of the <ph id=\"ph1\">`while`</ph> loop.","pos":[1443,1513],"source":"**continue** passes control to the next iteration of the `while` loop."},{"pos":[1520,1602],"content":"The following code uses a <ph id=\"ph1\">`while`</ph> loop to trim trailing underscores from a string:","source":"The following code uses a `while` loop to trim trailing underscores from a string:"},{"content":"The termination condition is evaluated at the top of the loop.","pos":[2189,2251]},{"content":"If there are no trailing underscores, the loop never executes.","pos":[2252,2314]},{"content":"See Also","pos":[2323,2331]},{"content":"Iteration Statements","pos":[2336,2356]},{"content":"Keywords","pos":[2399,2407]},{"content":"do-while Statement (C++)","pos":[2438,2462]},{"content":"for Statement (C++)","pos":[2503,2522]},{"content":"Range-based for Statement (C++)","pos":[2558,2589]}],"content":"---\ntitle: \"while Statement (C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"while_cpp\"\n  - \"while\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"while keyword [C++]\"\n  - \"while keyword [C++], syntax\"\nms.assetid: 358dbe76-5e5e-4af5-b575-c2293c636899\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# while Statement (C++)\nExecutes *statement* repeatedly until *expression* evaluates to zero.  \n  \n## Syntax  \n  \n```  \n  \n      while ( expression )  \n   statement  \n```  \n  \n## Remarks  \n The test of *expression* takes place before each execution of the loop; therefore, a `while` loop executes zero or more times. *expression* must be of an integral type, a pointer type, or a class type with an unambiguous conversion to an integral or pointer type.  \n  \n A `while` loop can also terminate when a [break](../cpp/break-statement-cpp.md), [goto](../cpp/goto-statement-cpp.md), or [return](../cpp/return-statement-cpp.md) within the statement body is executed. Use [continue](../cpp/continue-statement-cpp.md) to terminate the current iteration without exiting the `while` loop. **continue** passes control to the next iteration of the `while` loop.  \n  \n The following code uses a `while` loop to trim trailing underscores from a string:  \n  \n```  \n// while_statement.cpp  \n  \n#include <string.h>  \n#include <stdio.h>  \nchar *trim( char *szSource )  \n{  \n    char *pszEOS = 0;  \n  \n    //  Set pointer to character before terminating NULL  \n    pszEOS = szSource + strlen( szSource ) - 1;  \n  \n    //  iterate backwards until non '_' is found   \n    while( (pszEOS >= szSource) && (*pszEOS == '_') )  \n        *pszEOS-- = '\\0';  \n  \n    return szSource;  \n}  \nint main()  \n{  \n    char szbuf[] = \"12345_____\";  \n  \n    printf_s(\"\\nBefore trim: %s\", szbuf);  \n    printf_s(\"\\nAfter trim: %s\\n\", trim(szbuf));  \n}  \n```  \n  \n The termination condition is evaluated at the top of the loop. If there are no trailing underscores, the loop never executes.  \n  \n## See Also  \n [Iteration Statements](../cpp/iteration-statements-cpp.md)   \n [Keywords](../cpp/keywords-cpp.md)   \n [do-while Statement (C++)](../cpp/do-while-statement-cpp.md)   \n [for Statement (C++)](../cpp/for-statement-cpp.md)   \n [Range-based for Statement (C++)](../cpp/range-based-for-statement-cpp.md)"}