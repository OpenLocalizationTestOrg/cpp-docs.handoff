{"nodes":[{"pos":[12,46],"content":"Retrieving a BLOB | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Retrieving a BLOB | Microsoft Docs","pos":[0,34]}]},{"content":"Retrieving a BLOB","pos":[659,676]},{"content":"You can retrieve a binary large object (BLOB) in various ways.","pos":[677,739]},{"content":"You can use <bpt id=\"p1\">**</bpt>DBTYPE_BYTES<ept id=\"p1\">**</ept> to retrieve the BLOB as a sequence of bytes or use an interface like <ph id=\"ph1\">`ISequentialStream`</ph>.","pos":[740,858],"source":" You can use **DBTYPE_BYTES** to retrieve the BLOB as a sequence of bytes or use an interface like `ISequentialStream`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>BLOBS and OLE Objects<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/ms711511.aspx)</ept> in the <bpt id=\"p2\">*</bpt>OLE DB Programmer's Reference<ept id=\"p2\">*</ept>.","pos":[859,1004],"source":" For more information, see [BLOBS and OLE Objects](https://msdn.microsoft.com/en-us/library/ms711511.aspx) in the *OLE DB Programmer's Reference*."},{"content":"The following code shows how to retrieve a BLOB using <ph id=\"ph1\">`ISequentialStream`</ph>.","pos":[1011,1085],"source":"The following code shows how to retrieve a BLOB using `ISequentialStream`."},{"content":"The macro <bpt id=\"p1\">[</bpt>BLOB_ENTRY<ept id=\"p1\">](../../data/oledb/blob-entry.md)</ept> allows you to specify the interface and the flags used for the interface.","pos":[1086,1214],"source":" The macro [BLOB_ENTRY](../../data/oledb/blob-entry.md) allows you to specify the interface and the flags used for the interface."},{"content":"After opening the table, the code calls <bpt id=\"p1\">**</bpt>Read<ept id=\"p1\">**</ept> repeatedly on <ph id=\"ph1\">`ISequentialStream`</ph> to read bytes from the BLOB.","pos":[1215,1326],"source":" After opening the table, the code calls **Read** repeatedly on `ISequentialStream` to read bytes from the BLOB."},{"content":"The code calls <bpt id=\"p1\">**</bpt>Release<ept id=\"p1\">**</ept> to dispose of the interface pointer before calling <ph id=\"ph1\">`MoveNext`</ph> to obtain the next record.","pos":[1327,1442],"source":" The code calls **Release** to dispose of the interface pointer before calling `MoveNext` to obtain the next record."},{"pos":[2026,2249],"content":"For more information about macros that handle BLOB data, see \"Column Map Macros\" in <bpt id=\"p1\">[</bpt>Macros and Global Functions for OLE DB Consumer Templates<ept id=\"p1\">](../../data/oledb/macros-and-global-functions-for-ole-db-consumer-templates.md)</ept>.","source":"For more information about macros that handle BLOB data, see \"Column Map Macros\" in [Macros and Global Functions for OLE DB Consumer Templates](../../data/oledb/macros-and-global-functions-for-ole-db-consumer-templates.md)."},{"content":"See Also","pos":[2258,2266]},{"content":"Using Accessors","pos":[2271,2286]},{"content":"Macros and Global Functions for OLE DB Consumer Templates","pos":[2330,2387]}],"content":"---\ntitle: \"Retrieving a BLOB | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"retrieving BLOBs\"\n  - \"BLOB (binary large object), retrieving\"\n  - \"OLE DB, BLOBs (binary large objects)\"\nms.assetid: 2893eb0a-5c05-4016-8914-1e40ccbaf0b3\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Retrieving a BLOB\nYou can retrieve a binary large object (BLOB) in various ways. You can use **DBTYPE_BYTES** to retrieve the BLOB as a sequence of bytes or use an interface like `ISequentialStream`. For more information, see [BLOBS and OLE Objects](https://msdn.microsoft.com/en-us/library/ms711511.aspx) in the *OLE DB Programmer's Reference*.  \n  \n The following code shows how to retrieve a BLOB using `ISequentialStream`. The macro [BLOB_ENTRY](../../data/oledb/blob-entry.md) allows you to specify the interface and the flags used for the interface. After opening the table, the code calls **Read** repeatedly on `ISequentialStream` to read bytes from the BLOB. The code calls **Release** to dispose of the interface pointer before calling `MoveNext` to obtain the next record.  \n  \n```  \nclass CCategories  \n{  \npublic:  \n   ISequentialStream*   pPicture;  \n  \nBEGIN_COLUMN_MAP(CCategories)  \n   BLOB_ENTRY(4, IID_ISequentialStream, STGM_READ, pPicture)  \nEND_COLUMN_MAP()  \n};  \n  \nCTable<CAccessor<CCategories> > categories;  \nULONG          cb;  \nBYTE            myBuffer[65536];  \n  \ncategories.Open(session, \"Categories\");  \nwhile (categories.MoveNext() == S_OK)  \n{  \n   do  \n   {  \n      categories.pPicture->Read(myBuffer, 65536, &cb);  \n      // Do something with the buffer  \n   } while (cb > 0);  \n   categories.pPicture->Release();  \n}  \n```  \n  \n For more information about macros that handle BLOB data, see \"Column Map Macros\" in [Macros and Global Functions for OLE DB Consumer Templates](../../data/oledb/macros-and-global-functions-for-ole-db-consumer-templates.md).  \n  \n## See Also  \n [Using Accessors](../../data/oledb/using-accessors.md)   \n [Macros and Global Functions for OLE DB Consumer Templates](../../data/oledb/macros-and-global-functions-for-ole-db-consumer-templates.md)"}