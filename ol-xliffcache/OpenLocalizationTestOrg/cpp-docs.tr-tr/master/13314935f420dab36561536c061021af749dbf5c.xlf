<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">13314935f420dab36561536c061021af749dbf5c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\printf-printf-l-wprintf-wprintf-l.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fb9877d172e3426261ab3c637728865796fd41fd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">be940d401fbbf3a3ab5cad9ad2390b00eccfc195</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>printf, _printf_l, wprintf, _wprintf_l | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>printf, _printf_l, wprintf, _wprintf_l</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Prints formatted output to the standard output stream.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>More secure versions of these functions are available; see <bpt id="p1">[</bpt>printf_s, _printf_s_l, wprintf_s, _wprintf_s_l<ept id="p1">](../../c-runtime-library/reference/printf-s-printf-s-l-wprintf-s-wprintf-s-l.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Format control.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Optional arguments.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The locale to use.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Returns the number of characters printed, or a negative value if an error occurs.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`format`</ph> is <ph id="ph2">`NULL`</ph>, the invalid parameter handler is invoked, as described in <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../../c-runtime-library/parameter-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If execution is allowed to continue, the function returns -1 and sets <ph id="ph1">`errno`</ph> to <ph id="ph2">`EINVAL`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>EOF<ept id="p1">**</ept> (0xFFFF) is encountered in <ph id="ph1">`argument`</ph>, the function returns -1.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For information on <ph id="ph1">`errno`</ph> and error codes, see <bpt id="p1">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id="p1">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`printf`</ph> function formats and prints a series of characters and values to the standard output stream, <ph id="ph2">`stdout`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If arguments follow the <ph id="ph1">`format`</ph> string, the <ph id="ph2">`format`</ph> string must contain specifications that determine the output format for the arguments.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>and <bpt id="p1">[</bpt>fprintf<ept id="p1">](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)</ept> behave identically except that <ph id="ph1">`printf`</ph> writes output to <ph id="ph2">`stdout`</ph> rather than to a destination of type <ph id="ph3">`FILE`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>is a wide-character version of <ph id="ph1">`printf`</ph>; <ph id="ph2">`format`</ph> is a wide-character string.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`printf`</ph> behave identically if the stream is opened in ANSI mode.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>does not currently support output into a UNICODE stream.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The versions of these functions with the <ph id="ph1">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead of the current thread locale.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Generic-Text Routine Mappings</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>TCHAR.H routine</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>_UNICODE &amp; _MBCS not defined</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>_MBCS defined</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>_unicode defined</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`format`</ph> argument consists of ordinary characters, escape sequences, and (if arguments follow <ph id="ph2">`format`</ph>) format specifications.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The ordinary characters and escape sequences are copied to <ph id="ph1">`stdout`</ph> in order of their appearance.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For example, the line:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>produces the output:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Format specifications<ept id="p1">](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)</ept> always begin with a percent sign (<ph id="ph1">`%`</ph>) and are read left to right.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`printf`</ph> encounters the first format specification (if any), it converts the value of the first argument after <ph id="ph2">`format`</ph> and outputs it accordingly.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The second format specification causes the second argument to be converted and output, and so on.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If there are more arguments than there are format specifications, the extra arguments are ignored.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The results are undefined if there are not enough arguments for all the format specifications.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Ensure that <ph id="ph1">`format`</ph> is not a user-defined string.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Generic-Text Routine Mappings</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Tchar.h routine</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>_UNICODE and _MBCS not defined</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>_MBCS defined</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>_UNICODE defined</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>,</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>stdio.h&gt;</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>,</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>stdio.h&gt; or <ph id="ph1">\&lt;</ph>wchar.h&gt;</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The console is not supported in <ph id="ph1">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> apps.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The standard stream handles that are associated with the console—<ph id="ph1">`stdin`</ph>, <ph id="ph2">`stdout`</ph>, and <ph id="ph3">`stderr`</ph>—must be redirected before C run-time functions can use them in <ph id="ph4">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> apps.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For additional compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Sample Output</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>System::Console::Write</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>System::Console::WriteLine</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Floating-Point Support</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Stream I/O</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Locale</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>fopen, _wfopen</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>_fprintf_p, _fprintf_p_l, _fwprintf_p, _fwprintf_p_l</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>scanf, _scanf_l, wscanf, _wscanf_l</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>sprintf, _sprintf_l, swprintf, _swprintf_l, <ph id="ph1">\_</ph>_swprintf_l</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>vprintf Functions</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>_set_output_format</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>