<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d10ec374fc21e68ec8ed0f566259da1b3704c7a2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\dotnet\differences-in-exception-handling-behavior-under-clr.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">53cfbe3ad706a8fe0ee9f9ebd609373490c72fcb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8acbfb851a693b5f3144671473e076aa77f51427</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Differences in Exception Handling Behavior Under -CLR | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Differences in Exception Handling Behavior Under /CLR</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Basic Concepts in Using Managed Exceptions<ept id="p1">](../dotnet/basic-concepts-in-using-managed-exceptions.md)</ept> discusses exception handling in managed applications.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In this topic, differences from the standard behavior of exception handling and some restrictions are discussed in detail.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>The _set_se_translator Function<ept id="p1">](../c-runtime-library/reference/set-se-translator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Jumping Out of a Finally Block</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In native C/C++ code, jumping out of a __<bpt id="p1">**</bpt>finally<ept id="p1">**</ept> block using structured exception handling (SEH) is allowed although it produces a warning.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Under <bpt id="p1">[</bpt>/clr<ept id="p1">](../build/reference/clr-common-language-runtime-compilation.md)</ept>, jumping out of a <bpt id="p2">**</bpt>finally<ept id="p2">**</ept> block causes an error:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Raising Exceptions Within an Exception Filter</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When an exception is raised during the processing of an <bpt id="p1">[</bpt>exception filter<ept id="p1">](../cpp/writing-an-exception-filter.md)</ept> within managed code, the exception is caught and treated as if the filter returns 0.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This is in contrast to the behavior in native code where a nested exception is raised, the <bpt id="p1">**</bpt>ExceptionRecord<ept id="p1">**</ept> field in the <bpt id="p2">**</bpt>EXCEPTION_RECORD<ept id="p2">**</ept> structure (as returned by <bpt id="p3">[</bpt>GetExceptionInformation<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms679357)</ept>) is set, and the <bpt id="p4">**</bpt>ExceptionFlags<ept id="p4">**</ept> field sets the 0x10 bit.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following example illustrates this difference in behavior:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Disassociated Rethrows</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/clr<ept id="p1">**</ept> does not support rethrowing an exception outside of a catch handler (known as a disassociated rethrow).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Exceptions of this type are treated as a standard C++ rethrow.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If a disassociated rethrow is encountered when there is an active managed exception, the exception is wrapped as a C++ exception and then rethrown.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Exceptions of this type can only be caught as an exception of type <bpt id="p1">[</bpt>System::SEHException<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.runtime.interopservices.sehexception.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following example demonstrates a managed exception rethrown as a C++ exception:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Exception Filters and EXCEPTION_CONTINUE_EXECUTION</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If a filter returns <ph id="ph1">`EXCEPTION_CONTINUE_EXECUTION`</ph> in a managed application, it is treated as if the filter returned <ph id="ph2">`EXCEPTION_CONTINUE_SEARCH`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For more information on these constants, see <bpt id="p1">[</bpt>try-except Statement<ept id="p1">](../cpp/try-except-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following example demonstrates this difference:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The _set_se_translator Function</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The translator function, set by a call to <ph id="ph1">`_set_se_translator`</ph>, affects only catches in unmanaged code.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following example demonstrates this limitation:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Exception Handling</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>safe_cast</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Exception Handling</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>