{"nodes":[{"pos":[12,55],"content":"Optimizing Inline Assembly | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Optimizing Inline Assembly | Microsoft Docs","pos":[0,43]}]},{"content":"Optimizing Inline Assembly","pos":[756,782]},{"content":"Microsoft Specific","pos":[786,804]},{"content":"The presence of an <ph id=\"ph1\">`__asm`</ph> block in a function affects optimization in several ways.","pos":[808,892],"source":"The presence of an `__asm` block in a function affects optimization in several ways."},{"content":"First, the compiler doesn't try to optimize the <ph id=\"ph1\">`__asm`</ph> block itself.","pos":[893,962],"source":" First, the compiler doesn't try to optimize the `__asm` block itself."},{"content":"What you write in assembly language is exactly what you get.","pos":[963,1023]},{"content":"Second, the presence of an <ph id=\"ph1\">`__asm`</ph> block affects register variable storage.","pos":[1024,1099],"source":" Second, the presence of an `__asm` block affects register variable storage."},{"content":"The compiler avoids enregistering variables across an <ph id=\"ph1\">`__asm`</ph> block if the register's contents would be changed by the <ph id=\"ph2\">`__asm`</ph> block.","pos":[1100,1233],"source":" The compiler avoids enregistering variables across an `__asm` block if the register's contents would be changed by the `__asm` block."},{"content":"Finally, some other function-wide optimizations will be affected by the inclusion of assembly language in a function.","pos":[1234,1351]},{"content":"END Microsoft Specific","pos":[1360,1382]},{"content":"See Also","pos":[1393,1401]},{"content":"Inline Assembler","pos":[1406,1422]}],"content":"---\ntitle: \"Optimizing Inline Assembly | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"storage, optimizing in inline assembly\"\n  - \"optimization, inline assembly\"\n  - \"inline assembly, optimizing\"\n  - \"optimizing performance, inline assembly\"\n  - \"__asm keyword [C++], optimizing\"\nms.assetid: 52a7ec83-9782-4d96-94c1-53bb2ac9e8c8\ncaps.latest.revision: 7\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Optimizing Inline Assembly\n## Microsoft Specific  \n The presence of an `__asm` block in a function affects optimization in several ways. First, the compiler doesn't try to optimize the `__asm` block itself. What you write in assembly language is exactly what you get. Second, the presence of an `__asm` block affects register variable storage. The compiler avoids enregistering variables across an `__asm` block if the register's contents would be changed by the `__asm` block. Finally, some other function-wide optimizations will be affected by the inclusion of assembly language in a function.  \n  \n **END Microsoft Specific**  \n  \n## See Also  \n [Inline Assembler](../../assembler/inline/inline-assembler.md)"}