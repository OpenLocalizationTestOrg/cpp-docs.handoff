{"nodes":[{"pos":[12,40],"content":"copyprivate | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"copyprivate | Microsoft Docs","pos":[0,28]}]},{"pos":[607,618],"content":"copyprivate","linkify":"copyprivate","nodes":[{"content":"copyprivate","pos":[0,11]}]},{"content":"Specifies that one or more variables should be shared among all threads.","pos":[619,691]},{"pos":[700,706],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[749,756],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"where,","pos":[760,766]},{"content":"One or more variables to share.","pos":[782,813]},{"content":"If more than one variable is specified, separate variable names with a comma.","pos":[814,891]},{"pos":[900,907],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[911,1005],"content":"<ph id=\"ph1\">`copyprivate`</ph> applies to the <bpt id=\"p1\">[</bpt>single<ept id=\"p1\">](../../../parallel/openmp/reference/single.md)</ept> directive.","source":"`copyprivate` applies to the [single](../../../parallel/openmp/reference/single.md) directive."},{"pos":[1012,1109],"content":"For more information, see <bpt id=\"p1\">[</bpt>2.7.2.8 copyprivate<ept id=\"p1\">](../../../parallel/openmp/2-7-2-8-copyprivate.md)</ept>.","source":"For more information, see [2.7.2.8 copyprivate](../../../parallel/openmp/2-7-2-8-copyprivate.md)."},{"pos":[1118,1125],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2616,2624],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2628,2691],"content":"<bpt id=\"p1\">[</bpt>Clauses<ept id=\"p1\">](../../../parallel/openmp/reference/openmp-clauses.md)</ept>","source":"[Clauses](../../../parallel/openmp/reference/openmp-clauses.md)"}],"content":"---\ntitle: \"copyprivate | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"copyprivate\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"copyprivate OpenMP clause\"\nms.assetid: 02c0209d-abe8-4797-8365-a82b53c3f15d\ncaps.latest.revision: 12\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# copyprivate\nSpecifies that one or more variables should be shared among all threads.  \n  \n## Syntax  \n  \n```  \ncopyprivate(var)  \n```  \n  \n## Remarks  \n where,  \n  \n `var`  \n One or more variables to share. If more than one variable is specified, separate variable names with a comma.  \n  \n## Remarks  \n `copyprivate` applies to the [single](../../../parallel/openmp/reference/single.md) directive.  \n  \n For more information, see [2.7.2.8 copyprivate](../../../parallel/openmp/2-7-2-8-copyprivate.md).  \n  \n## Example  \n  \n```  \n// omp_copyprivate.cpp  \n// compile with: /openmp   \n#include <stdio.h>  \n#include <omp.h>  \n  \nfloat x, y, fGlobal = 1.0;  \n#pragma omp threadprivate(x, y)  \n  \nfloat get_float() {  \n   fGlobal += 0.001;  \n   return fGlobal;  \n}  \n  \nvoid use_float(float f, int t) {  \n   printf_s(\"Value = %f, thread = %d\\n\", f, t);  \n}  \n  \nvoid CopyPrivate(float a, float b) {  \n   #pragma omp single copyprivate(a, b, x, y)   \n   {  \n      a = get_float();  \n      b = get_float();  \n      x = get_float();  \n      y = get_float();  \n    }  \n  \n   use_float(a, omp_get_thread_num());     \n   use_float(b, omp_get_thread_num());     \n   use_float(x, omp_get_thread_num());  \n   use_float(y, omp_get_thread_num());  \n}  \n  \nint main() {  \n   float a = 9.99, b = 123.456;  \n  \n   printf_s(\"call CopyPrivate from a single thread\\n\");  \n   CopyPrivate(9.99, 123.456);  \n  \n   printf_s(\"call CopyPrivate from a parallel region\\n\");  \n   #pragma omp parallel       \n   {  \n      CopyPrivate(a, b);  \n   }  \n}  \n```  \n  \n```Output  \ncall CopyPrivate from a single thread  \nValue = 1.001000, thread = 0  \nValue = 1.002000, thread = 0  \nValue = 1.003000, thread = 0  \nValue = 1.004000, thread = 0  \ncall CopyPrivate from a parallel region  \nValue = 1.005000, thread = 0  \nValue = 1.005000, thread = 1  \nValue = 1.006000, thread = 0  \nValue = 1.006000, thread = 1  \nValue = 1.007000, thread = 0  \nValue = 1.007000, thread = 1  \nValue = 1.008000, thread = 0  \nValue = 1.008000, thread = 1  \n```  \n  \n## See Also  \n [Clauses](../../../parallel/openmp/reference/openmp-clauses.md)"}