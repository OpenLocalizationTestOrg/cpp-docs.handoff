{"nodes":[{"pos":[12,40],"content":"_dup, _dup2 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_dup, _dup2 | Microsoft Docs","pos":[0,28]}]},{"pos":[1060,1071],"content":"_dup, _dup2","linkify":"_dup, _dup2","nodes":[{"content":"_dup, _dup2","pos":[0,11]}]},{"pos":[1072,1173],"content":"Creates a second file descriptor for an open file (<ph id=\"ph1\">`_dup`</ph>), or reassigns a file descriptor (<ph id=\"ph2\">`_dup2`</ph>).","source":"Creates a second file descriptor for an open file (`_dup`), or reassigns a file descriptor (`_dup2`)."},{"pos":[1182,1188],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1292,1302],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<ph id=\"ph1\">`fd`</ph>, <ph id=\"ph2\">`fd1`</ph>","pos":[1306,1317],"source":"`fd`, `fd1`"},{"content":"File descriptors referring to open file.","pos":[1321,1361]},{"content":"Any file descriptor.","pos":[1377,1397]},{"pos":[1406,1418],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`_dup`</ph> returns a new file descriptor.","pos":[1422,1459],"source":"`_dup` returns a new file descriptor."},{"content":"<ph id=\"ph1\">`_dup2`</ph> returns 0 to indicate success.","pos":[1460,1498],"source":"`_dup2` returns 0 to indicate success."},{"content":"If an error occurs, each function returns –1 and sets <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EBADF`</ph> if the file descriptor is invalid or to <ph id=\"ph3\">`EMFILE`</ph> if no more file descriptors are available.","pos":[1499,1663],"source":" If an error occurs, each function returns –1 and sets `errno` to `EBADF` if the file descriptor is invalid or to `EMFILE` if no more file descriptors are available."},{"content":"In the case of an invalid file descriptor, the function also invokes the invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[1664,1852],"source":" In the case of an invalid file descriptor, the function also invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"pos":[1859,2036],"content":"For more information about these and other return codes, see <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For more information about these and other return codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"pos":[2045,2052],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_dup`</ph> and <ph id=\"ph2\">`_dup2`</ph> functions associate a second file descriptor with a currently open file.","pos":[2056,2151],"source":"The `_dup` and `_dup2` functions associate a second file descriptor with a currently open file."},{"content":"These functions can be used to associate a predefined file descriptor, such as that for <ph id=\"ph1\">`stdout`</ph>, with a different file.","pos":[2152,2272],"source":" These functions can be used to associate a predefined file descriptor, such as that for `stdout`, with a different file."},{"content":"Operations on the file can be carried out using either file descriptor.","pos":[2273,2344]},{"content":"The type of access allowed for the file is unaffected by the creation of a new descriptor.","pos":[2345,2435]},{"content":"<ph id=\"ph1\">`_dup`</ph> returns the next available file descriptor for the given file.","pos":[2436,2505],"source":"`_dup` returns the next available file descriptor for the given file."},{"content":"<ph id=\"ph1\">`_dup2`</ph> forces <ph id=\"ph2\">`fd2`</ph> to refer to the same file as <ph id=\"ph3\">`fd1`</ph>.","pos":[2506,2562],"source":"`_dup2` forces `fd2` to refer to the same file as `fd1`."},{"content":"If <ph id=\"ph1\">`fd2`</ph> is associated with an open file at the time of the call, that file is closed.","pos":[2563,2649],"source":" If `fd2` is associated with an open file at the time of the call, that file is closed."},{"content":"Both <ph id=\"ph1\">`_dup`</ph> and <ph id=\"ph2\">`_dup2`</ph> accept file descriptors as parameters.","pos":[2656,2718],"source":"Both `_dup` and `_dup2` accept file descriptors as parameters."},{"content":"To pass a stream <ph id=\"ph1\">`(FILE *)`</ph> to either of these functions, use <bpt id=\"p1\">[</bpt>_fileno<ept id=\"p1\">](../../c-runtime-library/reference/fileno.md)</ept>.","pos":[2719,2836],"source":" To pass a stream `(FILE *)` to either of these functions, use [_fileno](../../c-runtime-library/reference/fileno.md)."},{"content":"The <ph id=\"ph1\">`fileno`</ph> routine returns the file descriptor currently associated with the given stream.","pos":[2837,2929],"source":" The `fileno` routine returns the file descriptor currently associated with the given stream."},{"content":"The following example shows how to associate <ph id=\"ph1\">`stderr`</ph> (defined as <ph id=\"ph2\">`FILE`</ph> <ph id=\"ph3\">`*`</ph> in Stdio.h) with a file descriptor:","pos":[2930,3042],"source":" The following example shows how to associate `stderr` (defined as `FILE` `*` in Stdio.h) with a file descriptor:"},{"pos":[3108,3120],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[3127,3134]},{"content":"Required header","pos":[3135,3150]},{"content":"<ph id=\"ph1\">\\&lt;</ph>io.h&gt;","pos":[3202,3209],"source":"\\<io.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>io.h&gt;","pos":[3222,3229],"source":"\\<io.h>"},{"content":"The console is not supported in <ph id=\"ph1\">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> apps.","pos":[3237,3350],"source":"The console is not supported in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps."},{"content":"The standard stream handles that are associated with the console—<ph id=\"ph1\">`stdin`</ph>, <ph id=\"ph2\">`stdout`</ph>, and <ph id=\"ph3\">`stderr`</ph>—must be redirected before C run-time functions can use them in <ph id=\"ph4\">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> apps.","pos":[3351,3592],"source":" The standard stream handles that are associated with the console—`stdin`, `stdout`, and `stderr`—must be redirected before C run-time functions can use them in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps."},{"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","pos":[3593,3691],"source":" For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"pos":[3700,3707],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5126,5134],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Low-Level I/O<ept id=\"p1\">](../../c-runtime-library/low-level-i-o.md)</ept><ph id=\"ph1\"> </ph>","pos":[5138,5196],"source":"[Low-Level I/O](../../c-runtime-library/low-level-i-o.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_close<ept id=\"p1\">](../../c-runtime-library/reference/close.md)</ept><ph id=\"ph1\"> </ph>","pos":[5199,5253],"source":" [_close](../../c-runtime-library/reference/close.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_creat, _wcreat<ept id=\"p1\">](../../c-runtime-library/reference/creat-wcreat.md)</ept><ph id=\"ph1\"> </ph>","pos":[5256,5326],"source":" [_creat, _wcreat](../../c-runtime-library/reference/creat-wcreat.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_open, _wopen<ept id=\"p1\">](../../c-runtime-library/reference/open-wopen.md)</ept>","pos":[5329,5394],"source":" [_open, _wopen](../../c-runtime-library/reference/open-wopen.md)"}],"content":"---\ntitle: \"_dup, _dup2 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_dup\"\n  - \"_dup2\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-stdio-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_dup2\"\n  - \"_dup\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_dup2 function\"\n  - \"dup function\"\n  - \"file handles [C++], duplicating\"\n  - \"file handles [C++], reassigning\"\n  - \"dup2 function\"\n  - \"_dup function\"\nms.assetid: 4d07e92c-0d76-4832-a770-dfec0e7a0cfa\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _dup, _dup2\nCreates a second file descriptor for an open file (`_dup`), or reassigns a file descriptor (`_dup2`).  \n  \n## Syntax  \n  \n```  \nint _dup(   \n   int fd   \n);  \nint _dup2(   \n   int fd1,  \n   int fd2   \n);  \n```  \n  \n#### Parameters  \n `fd`, `fd1`  \n File descriptors referring to open file.  \n  \n `fd2`  \n Any file descriptor.  \n  \n## Return Value  \n `_dup` returns a new file descriptor. `_dup2` returns 0 to indicate success. If an error occurs, each function returns –1 and sets `errno` to `EBADF` if the file descriptor is invalid or to `EMFILE` if no more file descriptors are available. In the case of an invalid file descriptor, the function also invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md).  \n  \n For more information about these and other return codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n The `_dup` and `_dup2` functions associate a second file descriptor with a currently open file. These functions can be used to associate a predefined file descriptor, such as that for `stdout`, with a different file. Operations on the file can be carried out using either file descriptor. The type of access allowed for the file is unaffected by the creation of a new descriptor. `_dup` returns the next available file descriptor for the given file. `_dup2` forces `fd2` to refer to the same file as `fd1`. If `fd2` is associated with an open file at the time of the call, that file is closed.  \n  \n Both `_dup` and `_dup2` accept file descriptors as parameters. To pass a stream `(FILE *)` to either of these functions, use [_fileno](../../c-runtime-library/reference/fileno.md). The `fileno` routine returns the file descriptor currently associated with the given stream. The following example shows how to associate `stderr` (defined as `FILE` `*` in Stdio.h) with a file descriptor:  \n  \n```  \nint cstderr = _dup( _fileno( stderr ));  \n```  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_dup`|\\<io.h>|  \n|`_dup2`|\\<io.h>|  \n  \n The console is not supported in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps. The standard stream handles that are associated with the console—`stdin`, `stdout`, and `stderr`—must be redirected before C run-time functions can use them in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps. For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n// crt_dup.c  \n// This program uses the variable old to save  \n// the original stdout. It then opens a new file named  \n// DataFile and forces stdout to refer to it. Finally, it  \n// restores stdout to its original state.  \n//  \n  \n#include <io.h>  \n#include <stdlib.h>  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   int old;  \n   FILE *DataFile;  \n  \n   old = _dup( 1 );   // \"old\" now refers to \"stdout\"   \n                      // Note:  file descriptor 1 == \"stdout\"   \n   if( old == -1 )  \n   {  \n      perror( \"_dup( 1 ) failure\" );  \n      exit( 1 );  \n   }  \n   _write( old, \"This goes to stdout first\\n\", 26 );  \n   if( fopen_s( &DataFile, \"data\", \"w\" ) != 0 )  \n   {  \n      puts( \"Can't open file 'data'\\n\" );  \n      exit( 1 );  \n   }  \n  \n   // stdout now refers to file \"data\"   \n   if( -1 == _dup2( _fileno( DataFile ), 1 ) )  \n   {  \n      perror( \"Can't _dup2 stdout\" );  \n      exit( 1 );  \n   }  \n   puts( \"This goes to file 'data'\\n\" );  \n  \n   // Flush stdout stream buffer so it goes to correct file   \n   fflush( stdout );  \n   fclose( DataFile );  \n  \n   // Restore original stdout   \n   _dup2( old, 1 );  \n   puts( \"This goes to stdout\\n\" );  \n   puts( \"The file 'data' contains:\" );  \n   _flushall();  \n   system( \"type data\" );  \n}  \n```  \n  \n```Output  \nThis goes to stdout first  \nThis goes to stdout  \n  \nThe file 'data' contains:  \nThis goes to file 'data'  \n```  \n  \n## See Also  \n [Low-Level I/O](../../c-runtime-library/low-level-i-o.md)   \n [_close](../../c-runtime-library/reference/close.md)   \n [_creat, _wcreat](../../c-runtime-library/reference/creat-wcreat.md)   \n [_open, _wopen](../../c-runtime-library/reference/open-wopen.md)"}