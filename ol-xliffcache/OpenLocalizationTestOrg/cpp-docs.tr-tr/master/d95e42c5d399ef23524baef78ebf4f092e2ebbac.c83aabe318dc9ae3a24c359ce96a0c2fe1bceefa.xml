{"nodes":[{"pos":[12,66],"content":"_tempnam, _wtempnam, tmpnam, _wtmpnam | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_tempnam, _wtempnam, tmpnam, _wtmpnam | Microsoft Docs","pos":[0,54]}]},{"pos":[1352,1389],"content":"_tempnam, _wtempnam, tmpnam, _wtmpnam","linkify":"_tempnam, _wtempnam, tmpnam, _wtmpnam","nodes":[{"content":"_tempnam, _wtempnam, tmpnam, _wtmpnam","pos":[0,37]}]},{"content":"Generate names you can use to create temporary files.","pos":[1390,1443]},{"content":"More secure versions of some of these functions are available; see <bpt id=\"p1\">[</bpt>tmpnam_s, _wtmpnam_s<ept id=\"p1\">](../../c-runtime-library/reference/tmpnam-s-wtmpnam-s.md)</ept>.","pos":[1444,1591],"source":" More secure versions of some of these functions are available; see [tmpnam_s, _wtmpnam_s](../../c-runtime-library/reference/tmpnam-s-wtmpnam-s.md)."},{"pos":[1600,1606],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1864,1874],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The string that will be pre-pended to names returned by <ph id=\"ph1\">`_tempnam`</ph>.","pos":[1890,1957],"source":" The string that will be pre-pended to names returned by `_tempnam`."},{"content":"The path used in the file name if there is no TMP environment variable, or if TMP is not a valid directory.","pos":[1973,2080]},{"content":"Pointer that will hold the generated name and will be identical to the name returned by the function.","pos":[2096,2197]},{"content":"This is a convenient way to save the generated name.","pos":[2198,2250]},{"pos":[2259,2271],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Each of these functions returns a pointer to the name generated or <ph id=\"ph1\">`NULL`</ph> if there is a failure.","pos":[2275,2371],"source":"Each of these functions returns a pointer to the name generated or `NULL` if there is a failure."},{"content":"Failure can occur if you attempt more than <ph id=\"ph1\">`TMP_MAX`</ph> (see STDIO.H) calls with <ph id=\"ph2\">`tmpnam`</ph> or if you use <ph id=\"ph3\">`_tempnam`</ph>and there is an invalid directory name specified in the TMP environment variable and in the <ph id=\"ph4\">`dir`</ph> parameter.","pos":[2372,2591],"source":" Failure can occur if you attempt more than `TMP_MAX` (see STDIO.H) calls with `tmpnam` or if you use `_tempnam`and there is an invalid directory name specified in the TMP environment variable and in the `dir` parameter."},{"pos":[2599,2873],"content":"[!NOTE]\n The pointers returned by `tmpnam` and `_wtmpnam` point to internal static buffers. [free](../../c-runtime-library/reference/free.md) should not be called to deallocate those pointers. `free` needs to be called for pointers allocated by `_tempnam` and `_wtempnam`.","leadings":["","> "],"nodes":[{"content":" The pointers returned by `tmpnam` and `_wtmpnam` point to internal static buffers. [free](../../c-runtime-library/reference/free.md) should not be called to deallocate those pointers. `free` needs to be called for pointers allocated by `_tempnam` and `_wtempnam`.","pos":[8,272],"nodes":[{"content":"The pointers returned by <ph id=\"ph1\">`tmpnam`</ph> and <ph id=\"ph2\">`_wtmpnam`</ph> point to internal static buffers.","pos":[1,83],"source":" The pointers returned by `tmpnam` and `_wtmpnam` point to internal static buffers."},{"content":"<bpt id=\"p1\">[</bpt>free<ept id=\"p1\">](../../c-runtime-library/reference/free.md)</ept> should not be called to deallocate those pointers.","pos":[84,184],"source":"[free](../../c-runtime-library/reference/free.md) should not be called to deallocate those pointers."},{"content":"<ph id=\"ph1\">`free`</ph> needs to be called for pointers allocated by <ph id=\"ph2\">`_tempnam`</ph> and <ph id=\"ph3\">`_wtempnam`</ph>.","pos":[185,264],"source":"`free` needs to be called for pointers allocated by `_tempnam` and `_wtempnam`."}]}]},{"pos":[2882,2889],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Each of these functions returns the name of a file that does not currently exist.","pos":[2893,2974]},{"content":"<ph id=\"ph1\">`tmpnam`</ph> returns a name unique in the current working directory and <ph id=\"ph2\">`_tempnam`</ph> lets you generate a unique name in a directory other than the current one.","pos":[2975,3128],"source":"`tmpnam` returns a name unique in the current working directory and `_tempnam` lets you generate a unique name in a directory other than the current one."},{"content":"Note than when a file name is pre-pended with a backslash and no path information, such as \\fname21, this indicates that the name is valid for the current working directory.","pos":[3129,3302]},{"content":"For <ph id=\"ph1\">`tmpnam`</ph>, you can store this generated file name in <ph id=\"ph2\">`str`</ph>.","pos":[3309,3371],"source":"For `tmpnam`, you can store this generated file name in `str`."},{"content":"If <ph id=\"ph1\">`str`</ph> is <ph id=\"ph2\">`NULL`</ph>, then <ph id=\"ph3\">`tmpnam`</ph> leaves the result in an internal static buffer.","pos":[3372,3453],"source":" If `str` is `NULL`, then `tmpnam` leaves the result in an internal static buffer."},{"content":"Thus any subsequent calls destroy this value.","pos":[3454,3499]},{"content":"The name generated by <ph id=\"ph1\">`tmpnam`</ph> consists of a program-generated file name and, after the first call to <ph id=\"ph2\">`tmpnam`</ph>, a file extension of sequential numbers in base 32 (.1-.vvu, when <ph id=\"ph3\">`TMP_MAX`</ph> in STDIO.H is 32,767).","pos":[3500,3709],"source":" The name generated by `tmpnam` consists of a program-generated file name and, after the first call to `tmpnam`, a file extension of sequential numbers in base 32 (.1-.vvu, when `TMP_MAX` in STDIO.H is 32,767)."},{"pos":[3716,3806],"content":"<ph id=\"ph1\">`_tempnam`</ph> will generate a unique file name for a directory chosen by the following rules:","source":"`_tempnam` will generate a unique file name for a directory chosen by the following rules:"},{"content":"If the TMP environment variable is defined and set to a valid directory name, unique file names will be generated for the directory specified by TMP.","pos":[3816,3965]},{"pos":[3975,4178],"content":"If the TMP environment variable is not defined or if it is set to the name of a directory that does not exist, <ph id=\"ph1\">`_tempnam`</ph> will use the <ph id=\"ph2\">`dir`</ph> parameter as the path for which it will generate unique names.","source":"If the TMP environment variable is not defined or if it is set to the name of a directory that does not exist, `_tempnam` will use the `dir` parameter as the path for which it will generate unique names."},{"content":"If the TMP environment variable is not defined or if it is set to the name of a directory that does not exist, and if <ph id=\"ph1\">`dir`</ph> is either <ph id=\"ph2\">`NULL`</ph> or set to the name of a directory that does not exist, <ph id=\"ph3\">`_tempnam`</ph> will use the current working directory to generate unique names.","pos":[4188,4459],"source":"If the TMP environment variable is not defined or if it is set to the name of a directory that does not exist, and if `dir` is either `NULL` or set to the name of a directory that does not exist, `_tempnam` will use the current working directory to generate unique names."},{"content":"Currently, if both TMP and <ph id=\"ph1\">`dir`</ph> specify names of directories that do not exist, the <ph id=\"ph2\">`_tempnam`</ph> function call will fail.","pos":[4460,4580],"source":" Currently, if both TMP and `dir` specify names of directories that do not exist, the `_tempnam` function call will fail."},{"content":"The name returned by <ph id=\"ph1\">`_tempnam`</ph> will be a concatenation of <ph id=\"ph2\">`prefix`</ph> and a sequential number, which will combine to create a unique file name for the specified directory.","pos":[4587,4756],"source":"The name returned by `_tempnam` will be a concatenation of `prefix` and a sequential number, which will combine to create a unique file name for the specified directory."},{"content":"<ph id=\"ph1\">`_tempnam`</ph> generates file names that have no extension.","pos":[4757,4812],"source":"`_tempnam` generates file names that have no extension."},{"content":"<ph id=\"ph1\">`_tempnam`</ph> uses <bpt id=\"p1\">[</bpt>malloc<ept id=\"p1\">](../../c-runtime-library/reference/malloc.md)</ept> to allocate space for the filename; the program is responsible for freeing this space when it is no longer needed.","pos":[4813,4997],"source":"`_tempnam` uses [malloc](../../c-runtime-library/reference/malloc.md) to allocate space for the filename; the program is responsible for freeing this space when it is no longer needed."},{"content":"<ph id=\"ph1\">`_tempnam`</ph> and <ph id=\"ph2\">`tmpnam`</ph> automatically handle multibyte-character string arguments as appropriate, recognizing multibyte-character sequences according to the OEM code page obtained from the operating system.","pos":[5004,5210],"source":"`_tempnam` and `tmpnam` automatically handle multibyte-character string arguments as appropriate, recognizing multibyte-character sequences according to the OEM code page obtained from the operating system."},{"content":"<ph id=\"ph1\">`_wtempnam`</ph> is a wide-character version of <ph id=\"ph2\">`_tempnam`</ph>; the arguments and return value of <ph id=\"ph3\">`_wtempnam`</ph> are wide-character strings.","pos":[5211,5339],"source":"`_wtempnam` is a wide-character version of `_tempnam`; the arguments and return value of `_wtempnam` are wide-character strings."},{"content":"<ph id=\"ph1\">`_wtempnam`</ph> and <ph id=\"ph2\">`_tempnam`</ph> behave identically except that <ph id=\"ph3\">`_wtempnam`</ph> does not handle multibyte-character strings.","pos":[5340,5454],"source":"`_wtempnam` and `_tempnam` behave identically except that `_wtempnam` does not handle multibyte-character strings."},{"content":"<ph id=\"ph1\">`_wtmpnam`</ph> is a wide-character version of <ph id=\"ph2\">`tmpnam`</ph>; the argument and return value of <ph id=\"ph3\">`_wtmpnam`</ph> are wide-character strings.","pos":[5455,5578],"source":"`_wtmpnam` is a wide-character version of `tmpnam`; the argument and return value of `_wtmpnam` are wide-character strings."},{"content":"<ph id=\"ph1\">`_wtmpnam`</ph> and <ph id=\"ph2\">`tmpnam`</ph> behave identically except that <ph id=\"ph3\">`_wtmpnam`</ph> does not handle multibyte-character strings.","pos":[5579,5689],"source":"`_wtmpnam` and `tmpnam` behave identically except that `_wtmpnam` does not handle multibyte-character strings."},{"pos":[5696,5893],"content":"If <ph id=\"ph1\">`_DEBUG`</ph> and <ph id=\"ph2\">`_CRTDBG_MAP_ALLOC`</ph> are defined, <ph id=\"ph3\">`_tempnam`</ph> and <ph id=\"ph4\">`_wtempnam`</ph> are replaced by calls to <bpt id=\"p1\">[</bpt>_tempnam_dbg and _wtempnam_dbg<ept id=\"p1\">](../../c-runtime-library/reference/tempnam-dbg-wtempnam-dbg.md)</ept>.","source":"If `_DEBUG` and `_CRTDBG_MAP_ALLOC` are defined, `_tempnam` and `_wtempnam` are replaced by calls to [_tempnam_dbg and _wtempnam_dbg](../../c-runtime-library/reference/tempnam-dbg-wtempnam-dbg.md)."},{"pos":[5903,5932],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"TCHAR.H routine","pos":[5939,5954]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[5955,5983],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[5984,5997]},{"content":"_UNICODE defined","pos":[5998,6014]},{"pos":[6226,6238],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[6245,6252]},{"content":"Required header","pos":[6253,6268]},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt;","pos":[6324,6334],"source":"\\<stdio.h>"},{"pos":[6339,6362],"content":"<ph id=\"ph1\">`_wtempnam`</ph>, <ph id=\"ph2\">`_wtmpnam`</ph>","source":"`_wtempnam`, `_wtmpnam`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt; or <ph id=\"ph2\">\\&lt;</ph>wchar.h&gt;","pos":[6363,6387],"source":"\\<stdio.h> or \\<wchar.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt;","pos":[6401,6411],"source":"\\<stdio.h>"},{"pos":[6419,6543],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[6552,6559],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7927,7952],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[7956,7971]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[7972,8019],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[8020,8145],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[8154,8162],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Stream I/O<ept id=\"p1\">](../../c-runtime-library/stream-i-o.md)</ept><ph id=\"ph1\"> </ph>","pos":[8166,8218],"source":"[Stream I/O](../../c-runtime-library/stream-i-o.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_getmbcp<ept id=\"p1\">](../../c-runtime-library/reference/getmbcp.md)</ept><ph id=\"ph1\"> </ph>","pos":[8221,8279],"source":" [_getmbcp](../../c-runtime-library/reference/getmbcp.md) "},{"content":"<bpt id=\"p1\"> [</bpt>malloc<ept id=\"p1\">](../../c-runtime-library/reference/malloc.md)</ept><ph id=\"ph1\"> </ph>","pos":[8282,8337],"source":" [malloc](../../c-runtime-library/reference/malloc.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_setmbcp<ept id=\"p1\">](../../c-runtime-library/reference/setmbcp.md)</ept><ph id=\"ph1\"> </ph>","pos":[8340,8398],"source":" [_setmbcp](../../c-runtime-library/reference/setmbcp.md) "},{"content":"<bpt id=\"p1\"> [</bpt>tmpfile<ept id=\"p1\">](../../c-runtime-library/reference/tmpfile.md)</ept><ph id=\"ph1\"> </ph>","pos":[8401,8458],"source":" [tmpfile](../../c-runtime-library/reference/tmpfile.md) "},{"content":"<bpt id=\"p1\"> [</bpt>tmpfile_s<ept id=\"p1\">](../../c-runtime-library/reference/tmpfile-s.md)</ept>","pos":[8461,8521],"source":" [tmpfile_s](../../c-runtime-library/reference/tmpfile-s.md)"}],"content":"---\ntitle: \"_tempnam, _wtempnam, tmpnam, _wtmpnam | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_wtempnam\"\n  - \"_wtmpnam\"\n  - \"tmpnam\"\n  - \"_tempnam\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-stdio-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"wtempnam\"\n  - \"_wtmpnam\"\n  - \"wtmpnam\"\n  - \"tmpnam\"\n  - \"_wtempnam\"\n  - \"_tempnam\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"wtempnam function\"\n  - \"file names [C++], creating temporary\"\n  - \"_tempnam function\"\n  - \"ttmpnam function\"\n  - \"tmpnam function\"\n  - \"tempnam function\"\n  - \"wtmpnam function\"\n  - \"temporary files, creating\"\n  - \"file names [C++], temporary\"\n  - \"_ttmpnam function\"\n  - \"_wtmpnam function\"\n  - \"_wtempnam function\"\nms.assetid: 3ce75f0f-5e30-42a6-9791-8d7cbfe70fca\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _tempnam, _wtempnam, tmpnam, _wtmpnam\nGenerate names you can use to create temporary files. More secure versions of some of these functions are available; see [tmpnam_s, _wtmpnam_s](../../c-runtime-library/reference/tmpnam-s-wtmpnam-s.md).  \n  \n## Syntax  \n  \n```  \nchar *_tempnam(  \n   const char *dir,  \n   const char *prefix   \n);  \nwchar_t *_wtempnam(  \n   const wchar_t *dir,  \n   const wchar_t *prefix   \n);  \nchar *tmpnam(  \n   char *str   \n);  \nwchar_t *_wtmpnam(  \n   wchar_t *str   \n);  \n```  \n  \n#### Parameters  \n `prefix`  \n The string that will be pre-pended to names returned by `_tempnam`.  \n  \n `dir`  \n The path used in the file name if there is no TMP environment variable, or if TMP is not a valid directory.  \n  \n `str`  \n Pointer that will hold the generated name and will be identical to the name returned by the function. This is a convenient way to save the generated name.  \n  \n## Return Value  \n Each of these functions returns a pointer to the name generated or `NULL` if there is a failure. Failure can occur if you attempt more than `TMP_MAX` (see STDIO.H) calls with `tmpnam` or if you use `_tempnam`and there is an invalid directory name specified in the TMP environment variable and in the `dir` parameter.  \n  \n> [!NOTE]\n>  The pointers returned by `tmpnam` and `_wtmpnam` point to internal static buffers. [free](../../c-runtime-library/reference/free.md) should not be called to deallocate those pointers. `free` needs to be called for pointers allocated by `_tempnam` and `_wtempnam`.  \n  \n## Remarks  \n Each of these functions returns the name of a file that does not currently exist. `tmpnam` returns a name unique in the current working directory and `_tempnam` lets you generate a unique name in a directory other than the current one. Note than when a file name is pre-pended with a backslash and no path information, such as \\fname21, this indicates that the name is valid for the current working directory.  \n  \n For `tmpnam`, you can store this generated file name in `str`. If `str` is `NULL`, then `tmpnam` leaves the result in an internal static buffer. Thus any subsequent calls destroy this value. The name generated by `tmpnam` consists of a program-generated file name and, after the first call to `tmpnam`, a file extension of sequential numbers in base 32 (.1-.vvu, when `TMP_MAX` in STDIO.H is 32,767).  \n  \n `_tempnam` will generate a unique file name for a directory chosen by the following rules:  \n  \n-   If the TMP environment variable is defined and set to a valid directory name, unique file names will be generated for the directory specified by TMP.  \n  \n-   If the TMP environment variable is not defined or if it is set to the name of a directory that does not exist, `_tempnam` will use the `dir` parameter as the path for which it will generate unique names.  \n  \n-   If the TMP environment variable is not defined or if it is set to the name of a directory that does not exist, and if `dir` is either `NULL` or set to the name of a directory that does not exist, `_tempnam` will use the current working directory to generate unique names. Currently, if both TMP and `dir` specify names of directories that do not exist, the `_tempnam` function call will fail.  \n  \n The name returned by `_tempnam` will be a concatenation of `prefix` and a sequential number, which will combine to create a unique file name for the specified directory. `_tempnam` generates file names that have no extension. `_tempnam` uses [malloc](../../c-runtime-library/reference/malloc.md) to allocate space for the filename; the program is responsible for freeing this space when it is no longer needed.  \n  \n `_tempnam` and `tmpnam` automatically handle multibyte-character string arguments as appropriate, recognizing multibyte-character sequences according to the OEM code page obtained from the operating system. `_wtempnam` is a wide-character version of `_tempnam`; the arguments and return value of `_wtempnam` are wide-character strings. `_wtempnam` and `_tempnam` behave identically except that `_wtempnam` does not handle multibyte-character strings. `_wtmpnam` is a wide-character version of `tmpnam`; the argument and return value of `_wtmpnam` are wide-character strings. `_wtmpnam` and `tmpnam` behave identically except that `_wtmpnam` does not handle multibyte-character strings.  \n  \n If `_DEBUG` and `_CRTDBG_MAP_ALLOC` are defined, `_tempnam` and `_wtempnam` are replaced by calls to [_tempnam_dbg and _wtempnam_dbg](../../c-runtime-library/reference/tempnam-dbg-wtempnam-dbg.md).  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_ttmpnam`|`tmpnam`|`tmpnam`|`_wtmpnam`|  \n|`_ttempnam`|`_tempnam`|`_tempnam`|`_wtempnam`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_tempnam`|\\<stdio.h>|  \n|`_wtempnam`, `_wtmpnam`|\\<stdio.h> or \\<wchar.h>|  \n|`tmpnam`|\\<stdio.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_tempnam.c  \n// compile with: /W3  \n// This program uses tmpnam to create a unique filename in the  \n// current working directory, then uses _tempnam to create   \n// a unique filename with a prefix of stq.   \n  \n#include <stdio.h>  \n#include <stdlib.h>  \n  \nint main( void )  \n{     \n   char* name1 = NULL;  \n   char* name2 = NULL;  \n  \n   // Create a temporary filename for the current working directory:   \n   if( ( name1 = tmpnam( NULL ) ) != NULL ) // C4996  \n   // Note: tmpnam is deprecated; consider using tmpnam_s instead  \n      printf( \"%s is safe to use as a temporary file.\\n\", name1 );  \n   else  \n      printf( \"Cannot create a unique filename\\n\" );  \n  \n   // Create a temporary filename in temporary directory with the  \n   // prefix \"stq\". The actual destination directory may vary  \n   // depending on the state of the TMP environment variable and  \n   // the global variable P_tmpdir.     \n  \n   if( ( name2 = _tempnam( \"c:\\\\tmp\", \"stq\" ) ) != NULL )  \n      printf( \"%s is safe to use as a temporary file.\\n\", name2 );   \n   else  \n      printf( \"Cannot create a unique filename\\n\" );  \n  \n   // When name2 is no longer needed :     \n   if(name2)  \n     free(name2);  \n  \n}  \n```  \n  \n```Output  \n\\s1gk. is safe to use as a temporary file.  \nC:\\DOCUME~1\\user\\LOCALS~1\\Temp\\2\\stq2 is safe to use as a temporary file.  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [_getmbcp](../../c-runtime-library/reference/getmbcp.md)   \n [malloc](../../c-runtime-library/reference/malloc.md)   \n [_setmbcp](../../c-runtime-library/reference/setmbcp.md)   \n [tmpfile](../../c-runtime-library/reference/tmpfile.md)   \n [tmpfile_s](../../c-runtime-library/reference/tmpfile-s.md)"}