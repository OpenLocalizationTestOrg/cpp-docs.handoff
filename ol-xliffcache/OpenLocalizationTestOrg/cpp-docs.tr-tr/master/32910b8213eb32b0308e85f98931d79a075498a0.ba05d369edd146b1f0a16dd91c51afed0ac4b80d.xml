{"nodes":[{"pos":[12,48],"content":"tile_static Keyword | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"tile_static Keyword | Microsoft Docs","pos":[0,36]}]},{"content":"tile_static Keyword","pos":[624,643]},{"content":"The <ph id=\"ph1\">`tile_static`</ph> keyword is used to declare a variable that can be accessed by all threads in a tile of threads.","pos":[644,757],"source":"The `tile_static` keyword is used to declare a variable that can be accessed by all threads in a tile of threads."},{"content":"The lifetime of the variable starts when execution reaches the point of declaration and ends when the kernel function returns.","pos":[758,884]},{"content":"For more information on using tiles, see <bpt id=\"p1\">[</bpt>Using Tiles<ept id=\"p1\">](../parallel/amp/using-tiles.md)</ept>.","pos":[885,972],"source":" For more information on using tiles, see [Using Tiles](../parallel/amp/using-tiles.md)."},{"pos":[979,1035],"content":"The <ph id=\"ph1\">`tile_static`</ph> keyword has the following limitations:","source":"The `tile_static` keyword has the following limitations:"},{"pos":[1045,1139],"content":"It can be used only on variables that are in a function that has the <ph id=\"ph1\">`restrict(amp)`</ph> modifier.","source":"It can be used only on variables that are in a function that has the `restrict(amp)` modifier."},{"content":"It cannot be used on variables that are pointer or reference types.","pos":[1149,1216]},{"content":"A <ph id=\"ph1\">`tile_static`</ph> variable cannot have an initializer.","pos":[1226,1278],"source":"A `tile_static` variable cannot have an initializer."},{"content":"Default constructors and destructors are not invoked automatically.","pos":[1279,1346]},{"pos":[1356,1422],"content":"The value of an uninitialized <ph id=\"ph1\">`tile_static`</ph> variable is undefined.","source":"The value of an uninitialized `tile_static` variable is undefined."},{"pos":[1432,1616],"content":"If a <ph id=\"ph1\">`tile_static`</ph> variable is declared in a call graph that is rooted by a non-tiled call to <ph id=\"ph2\">`parallel_for_each`</ph>, a warning is generated and the behavior of the variable is undefined.","source":"If a `tile_static` variable is declared in a call graph that is rooted by a non-tiled call to `parallel_for_each`, a warning is generated and the behavior of the variable is undefined."},{"content":"Example","pos":[1625,1632]},{"pos":[1636,1757],"content":"The following example shows how a <ph id=\"ph1\">`tile_static`</ph> variable can be used to accumulate data across several threads in a tile.","source":"The following example shows how a `tile_static` variable can be used to accumulate data across several threads in a tile."},{"content":"See Also","pos":[4732,4740]},{"content":"Microsoft-Specific Modifiers","pos":[4745,4773]},{"content":"C++ AMP Overview","pos":[4820,4836]},{"content":"parallel_for_each Function (C++ AMP)","pos":[4880,4916]},{"content":"Walkthrough: Matrix Multiplication","pos":[5007,5041]}],"content":"---\ntitle: \"tile_static Keyword | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"tile_static_CPP\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"tile_static keyword\"\nms.assetid: d78384d4-65d9-45cf-b3df-7e904f489d06\ncaps.latest.revision: 12\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# tile_static Keyword\nThe `tile_static` keyword is used to declare a variable that can be accessed by all threads in a tile of threads. The lifetime of the variable starts when execution reaches the point of declaration and ends when the kernel function returns. For more information on using tiles, see [Using Tiles](../parallel/amp/using-tiles.md).  \n  \n The `tile_static` keyword has the following limitations:  \n  \n-   It can be used only on variables that are in a function that has the `restrict(amp)` modifier.  \n  \n-   It cannot be used on variables that are pointer or reference types.  \n  \n-   A `tile_static` variable cannot have an initializer. Default constructors and destructors are not invoked automatically.  \n  \n-   The value of an uninitialized `tile_static` variable is undefined.  \n  \n-   If a `tile_static` variable is declared in a call graph that is rooted by a non-tiled call to `parallel_for_each`, a warning is generated and the behavior of the variable is undefined.  \n  \n## Example  \n The following example shows how a `tile_static` variable can be used to accumulate data across several threads in a tile.  \n  \n```cpp  \n  \n// Sample data:  \nint sampledata[] = {  \n    2, 2, 9, 7, 1, 4,  \n    4, 4, 8, 8, 3, 4,  \n    1, 5, 1, 2, 5, 2,  \n    6, 8, 3, 2, 7, 2};  \n  \n// The tiles:  \n// 2 2    9 7    1 4  \n// 4 4    8 8    3 4  \n//  \n// 1 5    1 2    5 2  \n// 6 8    3 2    7 2  \n  \n// Averages:  \nint averagedata[] = {   \n    0, 0, 0, 0, 0, 0,   \n    0, 0, 0, 0, 0, 0,   \n    0, 0, 0, 0, 0, 0,   \n    0, 0, 0, 0, 0, 0,   \n};  \n  \narray_view<int, 2> sample(4, 6, sampledata);  \narray_view<int, 2> average(4, 6, averagedata);  \n  \nparallel_for_each(  \n    // Create threads for sample.extent and divide the extent into 2 x 2 tiles.  \n    sample.extent.tile<2,2>(),  \n    [=](tiled_index<2,2> idx) restrict(amp)  \n    {  \n        // Create a 2 x 2 array to hold the values in this tile.  \n        tile_static int nums[2][2];  \n        // Copy the values for the tile into the 2 x 2 array.  \n        nums[idx.local[1]][idx.local[0]] = sample[idx.global];  \n        // When all the threads have executed and the 2 x 2 array is complete, find the average.  \n        idx.barrier.wait();  \n        int sum = nums[0][0] + nums[0][1] + nums[1][0] + nums[1][1];  \n        // Copy the average into the array_view.  \n        average[idx.global] = sum / 4;  \n      }  \n);  \n  \nfor (int i = 0; i < 4; i++) {  \n    for (int j = 0; j < 6; j++) {  \n        std::cout << average(i,j) << \" \";  \n    }  \n    std::cout << \"\\n\";  \n}  \n  \n// Output:  \n// 3 3 8 8 3 3  \n// 3 3 8 8 3 3  \n// 5 5 2 2 4 4  \n// 5 5 2 2 4 4  \n// Sample data.  \nint sampledata[] = {  \n    2, 2, 9, 7, 1, 4,  \n    4, 4, 8, 8, 3, 4,  \n    1, 5, 1, 2, 5, 2,  \n    6, 8, 3, 2, 7, 2};  \n  \n// The tiles are:  \n// 2 2    9 7    1 4  \n// 4 4    8 8    3 4  \n//  \n// 1 5    1 2    5 2  \n// 6 8    3 2    7 2  \n  \n// Averages.  \nint averagedata[] = {   \n    0, 0, 0, 0, 0, 0,   \n    0, 0, 0, 0, 0, 0,   \n    0, 0, 0, 0, 0, 0,   \n    0, 0, 0, 0, 0, 0,   \n};  \n  \narray_view<int, 2> sample(4, 6, sampledata);  \narray_view<int, 2> average(4, 6, averagedata);  \n  \nparallel_for_each(  \n    // Create threads for sample.grid and divide the grid into 2 x 2 tiles.  \n    sample.extent.tile<2,2>(),  \n    [=](tiled_index<2,2> idx) restrict(amp)  \n    {  \n        // Create a 2 x 2 array to hold the values in this tile.  \n        tile_static int nums[2][2];  \n        // Copy the values for the tile into the 2 x 2 array.  \n        nums[idx.local[1]][idx.local[0]] = sample[idx.global];  \n        // When all the threads have executed and the 2 x 2 array is complete, find the average.  \n        idx.barrier.wait();  \n        int sum = nums[0][0] + nums[0][1] + nums[1][0] + nums[1][1];  \n        // Copy the average into the array_view.  \n        average[idx.global] = sum / 4;  \n      }  \n);  \n  \nfor (int i = 0; i < 4; i++) {  \n    for (int j = 0; j < 6; j++) {  \n        std::cout << average(i,j) << \" \";  \n    }  \n    std::cout << \"\\n\";  \n}  \n  \n// Output.  \n// 3 3 8 8 3 3  \n// 3 3 8 8 3 3  \n// 5 5 2 2 4 4  \n// 5 5 2 2 4 4  \n  \n```  \n  \n## See Also  \n [Microsoft-Specific Modifiers](../cpp/microsoft-specific-modifiers.md)   \n [C++ AMP Overview](../parallel/amp/cpp-amp-overview.md)   \n [parallel_for_each Function (C++ AMP)](../parallel/amp/reference/concurrency-namespace-functions-amp.md#parallel_for_each)   \n [Walkthrough: Matrix Multiplication](../parallel/amp/walkthrough-matrix-multiplication.md)"}