{"nodes":[{"pos":[12,79],"content":"How to: Load Unmanaged Resources into a Byte Array | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Load Unmanaged Resources into a Byte Array | Microsoft Docs","pos":[0,67]}]},{"content":"How to: Load Unmanaged Resources into a Byte Array","pos":[716,766]},{"content":"This topic discusses several ways to load unmanaged resources into a &lt;xref:System.Byte&gt; array.","pos":[767,861],"source":"This topic discusses several ways to load unmanaged resources into a <xref:System.Byte> array."},{"content":"Example","pos":[870,877]},{"content":"If you know the size of your unmanaged resource, you can preallocate a CLR array and then load the resource into the array using a pointer to the array block of the CLR array.","pos":[881,1056]},{"content":"Example","pos":[1733,1740]},{"content":"This sample shows how to copy data from an unmanaged memory block to a managed array.","pos":[1744,1829]},{"content":"See Also","pos":[2296,2304]},{"content":"Using C++ Interop (Implicit PInvoke)","pos":[2309,2345]}],"content":"---\ntitle: \"How to: Load Unmanaged Resources into a Byte Array | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"get-started-article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"native resources, loading into Byte array\"\n  - \"unmanaged resources, loading into Byte array\"\n  - \"native resources\"\nms.assetid: cdada6cd-6d42-437a-a90f-44a0b18d6a93\ncaps.latest.revision: 15\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Load Unmanaged Resources into a Byte Array\nThis topic discusses several ways to load unmanaged resources into a <xref:System.Byte> array.  \n  \n## Example  \n If you know the size of your unmanaged resource, you can preallocate a CLR array and then load the resource into the array using a pointer to the array block of the CLR array.  \n  \n```  \n// load_unmanaged_resources_into_Byte_array.cpp  \n// compile with: /clr  \nusing namespace System;  \nvoid unmanaged_func( unsigned char * p ) {  \n   for ( int i = 0; i < 10; i++ )  \n      p[ i ] = i;  \n}  \n  \npublic ref class A {  \npublic:  \n   void func() {  \n      array<Byte> ^b = gcnew array<Byte>(10);  \n      pin_ptr<Byte> p =  &b[ 0 ];  \n      Byte * np = p;  \n      unmanaged_func( np );   // pass pointer to the block of CLR array.  \n      for ( int i = 0; i < 10; i++ )  \n         Console::Write( b[ i ] );  \n      Console::WriteLine();  \n   }  \n};  \n  \nint main() {  \n   A^ g = gcnew A;  \n   g->func();  \n}  \n```  \n  \n```Output  \n0123456789  \n```  \n  \n## Example  \n This sample shows how to copy data from an unmanaged memory block to a managed array.  \n  \n```  \n// load_unmanaged_resources_into_Byte_array_2.cpp  \n// compile with: /clr  \nusing namespace System;  \nusing namespace System::Runtime::InteropServices;  \n  \n#include <string.h>  \nint main() {  \n   char buf[] = \"Native String\";  \n   int len = strlen(buf);  \n   array<Byte> ^byteArray = gcnew array<Byte>(len + 2);  \n  \n   // convert any native pointer to IntPtr by doing C-Style cast  \n   Marshal::Copy( (IntPtr)buf, byteArray, 0, len );  \n}  \n```  \n  \n## See Also  \n [Using C++ Interop (Implicit PInvoke)](../dotnet/using-cpp-interop-implicit-pinvoke.md)"}